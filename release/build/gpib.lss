
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000164c  00800100  0001ce7e  0001cf12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001ce7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a61  0080174c  0080174c  0001e55e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001e55e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001e570  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000016e0  00000000  00000000  0001e5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00028754  00000000  00000000  0001fc90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000607f  00000000  00000000  000483e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000121da  00000000  00000000  0004e463  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005104  00000000  00000000  00060640  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000481e  00000000  00000000  00065744  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00023fc5  00000000  00000000  00069f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000016e0  00000000  00000000  0008df27  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
0080174c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000001c2 l     O .text	0000001e __c.3622
000001e0 l     O .text	0000001d __c.3617
0080174c l     O .bss	00000001 error_flag
00000000 l    df *ABS*	00000000 time.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000068e4 l     F .text	0000002a IS_Leap
00800388 l     O .data	00000018 __days
008017c4 l     O .bss	00000016 t.3676
008017da l     O .bss	00000002 p.3677
008017a6 l     O .bss	00000008 ts.3755
008017ae l     O .bss	00000016 t.3688
008003a0 l     O .data	0000001a __days_sum
00000719 l     O .text	00000012 __c.3795
00000708 l     O .text	00000011 __c.3797
000006f7 l     O .text	00000011 __c.3799
000006e5 l     O .text	00000012 __c.3801
000006d4 l     O .text	00000011 __c.3803
000006bd l     O .text	00000017 __c.3805
0000072b l     O .text	00000021 __c.3774
0000074c l     O .text	0000001d __c.3649
008017fc l     O .bss	00000020 buf.3654
008017dc l     O .bss	00000020 buf.3666
000006ab l     O .text	00000012 __c.3851
00000696 l     O .text	00000015 __c.3853
0000067f l     O .text	00000017 __c.3855
00000665 l     O .text	0000001a __c.3857
00000641 l     O .text	00000024 __c.3859
0000062f l     O .text	00000012 __c.3866
0000061e l     O .text	00000011 __c.3868
0000060d l     O .text	00000011 __c.3870
000005fb l     O .text	00000012 __c.3872
000005ea l     O .text	00000011 __c.3874
00000000 l    df *ABS*	00000000 mmc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000d1ee l     F .text	00000004 xchg_spi
0000d1f2 l     F .text	0000000c deselect
0000d1fe l     F .text	00000046 rcvr_datablock
0000d268 l     F .text	00000044 select
00000769 l     O .text	00000010 __c.3617
0000d2ac l     F .text	00000086 send_cmd
0000d332 l     F .text	0000004e xmit_datablock
00801821 l     O .bss	00000001 CardType
00801823 l     O .bss	00000001 Timer1
00801822 l     O .bss	00000001 Timer2
00000000 l    df *ABS*	00000000 posix.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800ba6 l     O .data	00000014 CSWTCH.97
00000baf l     O .text	00000018 __c.3594
00000b97 l     O .text	00000018 __c.3601
0000ea54 l     F .text	0000001a _fprintf_putc
0080192d l     O .bss	0000002e _dp
0080182e l     O .bss	000000ff _de
00000b83 l     O .text	00000008 __c.3917
00000b7f l     O .text	00000004 __c.3919
00000b8b l     O .text	0000000c __c.3672
00000000 l    df *ABS*	00000000 posix_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000e49 l     O .text	0000000c __c.3618
00000d83 l     O .text	000000c6 __c.3620
00000cec l     O .text	0000000c __c.3684
00000cdc l     O .text	00000010 __c.3686
00000ccf l     O .text	0000000d __c.3688
00000cbf l     O .text	00000010 __c.3690
00000cb2 l     O .text	0000000d __c.3692
00000c96 l     O .text	0000000f __c.3697
00000ca5 l     O .text	0000000d __c.3694
00000c83 l     O .text	00000013 __c.3701
00800180 l     O .data	00000002 _pagesize
00000c7c l     O .text	00000007 __c.3711
00000c7a l     O .text	00000002 __c.3713
00000d05 l     O .text	00000010 __c.3666
00000d03 l     O .text	00000002 __c.3671
00000cf8 l     O .text	0000000b __c.3673
00000c68 l     O .text	00000012 __c.3725
00000c64 l     O .text	00000004 __c.3727
00000c4a l     O .text	0000001a __c.3732
00000c29 l     O .text	00000021 __c.3745
00000c1b l     O .text	0000000e __c.3747
00000c05 l     O .text	00000016 __c.3749
00000bd2 l     O .text	00000023 __c.3757
00000bf5 l     O .text	00000010 __c.3754
00000bc7 l     O .text	0000000b __c.3761
00000d72 l     O .text	00000011 __c.3636
00000d5a l     O .text	00000018 __c.3640
00000d49 l     O .text	00000011 __c.3647
00000d45 l     O .text	00000004 __c.3650
00000d34 l     O .text	00000011 __c.3652
00000d26 l     O .text	0000000e __c.3654
00000d15 l     O .text	00000011 __c.3656
00000000 l    df *ABS*	00000000 gpib.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001226 l     O .text	00000011 __c.4223
00001213 l     O .text	00000013 __c.4236
000011ed l     O .text	00000026 __c.4241
000011d2 l     O .text	0000001b __c.4243
000011ab l     O .text	00000027 __c.4248
00001190 l     O .text	0000001b __c.4250
00001162 l     O .text	0000002e __c.4268
0000103e l     O .text	0000002f __c.4301
0000106d l     O .text	0000003c __c.4297
000010e5 l     O .text	0000003f __c.4291
000010a9 l     O .text	0000003c __c.4293
00001143 l     O .text	0000001f __c.4283
00001124 l     O .text	0000001f __c.4286
0000102b l     O .text	00000013 __c.4306
00000fea l     O .text	00000009 __c.4350
00000fe4 l     O .text	00000006 __c.4352
00000fd9 l     O .text	0000000b __c.4356
00000fce l     O .text	0000000b __c.4358
00000fc3 l     O .text	0000000b __c.4360
00001011 l     O .text	0000001a __c.4321
00000ff3 l     O .text	0000001e __c.4324
00000faa l     O .text	00000019 __c.4376
00000f7d l     O .text	0000002d __c.4379
00000f56 l     O .text	00000027 __c.4383
00000f3c l     O .text	0000001a __c.4393
00000f0e l     O .text	0000002e __c.4395
00000ef4 l     O .text	0000001a __c.4400
00000ecc l     O .text	00000028 __c.4408
00000000 l    df *ABS*	00000000 gpib_task.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000014d9 l     O .text	00000012 __c.4231
000014c8 l     O .text	00000011 __c.4233
000014af l     O .text	00000019 __c.4235
00001495 l     O .text	0000001a __c.4281
0000146a l     O .text	0000002b __c.4283
00001453 l     O .text	00000017 __c.4285
00001447 l     O .text	0000000c __c.4287
00001441 l     O .text	00000006 __c.4291
0000142f l     O .text	00000012 __c.4293
00001428 l     O .text	00000007 __c.4298
0000141d l     O .text	0000000b __c.4300
00001416 l     O .text	00000007 __c.4302
00001409 l     O .text	0000000d __c.4304
000013f8 l     O .text	00000011 __c.4306
000013d7 l     O .text	00000021 __c.4333
000013bd l     O .text	0000001a __c.4335
000013a5 l     O .text	00000018 __c.4340
0000138d l     O .text	00000018 __c.4342
00001386 l     O .text	00000007 __c.4344
0000137f l     O .text	00000007 __c.4346
00001378 l     O .text	00000007 __c.4348
0000136c l     O .text	0000000c __c.4350
0000135f l     O .text	0000000d __c.4352
00001358 l     O .text	00000007 __c.4354
00001337 l     O .text	00000021 __c.4356
000012e4 l     O .text	00000007 __c.4376
000012d3 l     O .text	00000011 __c.4378
000012c1 l     O .text	00000012 __c.4380
000012ad l     O .text	00000014 __c.4382
0000129d l     O .text	00000010 __c.4384
00001291 l     O .text	0000000c __c.4386
00001280 l     O .text	00000011 __c.4391
0000126e l     O .text	00000012 __c.4393
00001248 l     O .text	00000026 __c.4395
00001237 l     O .text	00000011 __c.4400
00001330 l     O .text	00000007 __c.4361
0000132e l     O .text	00000002 __c.4363
0000131c l     O .text	00000012 __c.4365
0000130b l     O .text	00000011 __c.4367
000012f7 l     O .text	00000014 __c.4369
000012eb l     O .text	0000000c __c.4371
00000000 l    df *ABS*	00000000 drives.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001d9e l     O .text	00000015 __c.4450
00001d92 l     O .text	0000000c __c.4461
00001d8e l     O .text	00000004 __c.4471
00001a58 l     O .text	00000012 __c.4615
00001a3a l     O .text	00000002 __c.4624
00001a3c l     O .text	00000009 __c.4622
00001a45 l     O .text	0000000a __c.4620
00001a4f l     O .text	00000009 __c.4618
00001a38 l     O .text	00000002 __c.4629
00001a18 l     O .text	00000020 __c.4638
0000199d l     O .text	00000002 __c.4653
000019d2 l     O .text	0000000a __c.4647
000019b3 l     O .text	0000001f __c.4649
0000199f l     O .text	00000014 __c.4651
00001a0f l     O .text	00000009 __c.4641
000019f0 l     O .text	0000001f __c.4643
000019dc l     O .text	00000014 __c.4645
0000199b l     O .text	00000002 __c.4658
00001976 l     O .text	00000025 __c.4697
0000193d l     O .text	00000039 __c.4699
00001908 l     O .text	00000035 __c.4701
000018d3 l     O .text	00000035 __c.4703
0000189b l     O .text	00000038 __c.4705
00001870 l     O .text	0000002b __c.4707
0000184c l     O .text	00000024 __c.4720
0000182a l     O .text	00000022 __c.4728
00801973 l     O .bss	00000002 stack_ind
00801969 l     O .bss	0000000a stack_p
0000180b l     O .text	0000001f __c.4764
0000179e l     O .text	00000037 __c.4779
000017d5 l     O .text	00000036 __c.4777
00001d81 l     O .text	0000000d __c.4490
00001ad0 l     O .text	00000022 __c.4601
00001af2 l     O .text	00000030 __c.4598
00001b22 l     O .text	0000002f __c.4589
00001b51 l     O .text	00000030 __c.4586
00001b81 l     O .text	0000002e __c.4577
00001baf l     O .text	0000002e __c.4569
00001d63 l     O .text	0000001e __c.4492
00001d41 l     O .text	00000022 __c.4495
00001d1f l     O .text	00000022 __c.4506
00001cf5 l     O .text	0000002a __c.4510
00001cc4 l     O .text	00000031 __c.4513
00001c97 l     O .text	0000002d __c.4523
00001c69 l     O .text	0000002e __c.4531
00001c3b l     O .text	0000002e __c.4534
00001c09 l     O .text	00000032 __c.4542
00001bdd l     O .text	0000002c __c.4559
00001aae l     O .text	00000022 __c.4605
00001a91 l     O .text	0000001d __c.4607
00001a6a l     O .text	00000027 __c.4609
0000171e l     O .text	0000001a __c.4804
00001716 l     O .text	00000008 __c.4806
00001738 l     O .text	00000022 __c.4802
00001762 l     O .text	0000001a __c.4798
0000175a l     O .text	00000008 __c.4800
0000177c l     O .text	00000022 __c.4796
000016ce l     O .text	00000011 __c.4832
000016df l     O .text	00000014 __c.4830
000016f3 l     O .text	00000014 __c.4828
000016cc l     O .text	00000002 __c.4837
00001707 l     O .text	0000000f __c.4816
00000000 l    df *ABS*	00000000 ss80.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801995 l     O .bss	00000005 B.4236
00801982 l     O .bss	00000013 B.4240
00801975 l     O .bss	0000000d B.4244
00002424 l     O .text	00000005 __c.4347
00002419 l     O .text	0000000b __c.4349
00002405 l     O .text	00000014 __c.4359
000023ea l     O .text	0000001b __c.4361
000023d9 l     O .text	00000011 __c.4369
000023b6 l     O .text	00000023 __c.4371
00002399 l     O .text	0000001d __c.4373
0000237a l     O .text	0000001f __c.4375
00002362 l     O .text	00000018 __c.4380
00002348 l     O .text	0000001a __c.4385
00002322 l     O .text	00000026 __c.4394
00002309 l     O .text	00000019 __c.4396
0000220d l     O .text	00000025 __c.4418
00002232 l     O .text	0000001a __c.4416
0000224c l     O .text	00000016 __c.4414
00002262 l     O .text	0000000e __c.4412
00002270 l     O .text	0000001c __c.4410
0000228c l     O .text	0000001d __c.4408
000022f3 l     O .text	00000016 __c.4398
000022da l     O .text	00000019 __c.4401
000022c2 l     O .text	00000018 __c.4403
000022a9 l     O .text	00000019 __c.4406
000021ec l     O .text	00000021 __c.4420
000021d6 l     O .text	00000016 __c.4422
000021b9 l     O .text	0000001d __c.4424
0000219d l     O .text	0000001c __c.4426
0000218c l     O .text	00000011 __c.4428
0000216e l     O .text	0000001e __c.4430
0000214f l     O .text	0000001f __c.4432
00002134 l     O .text	0000001b __c.4434
0000211b l     O .text	00000019 __c.4436
00002104 l     O .text	00000017 __c.4438
000020e1 l     O .text	00000023 __c.4440
000020c1 l     O .text	00000020 __c.4442
00002089 l     O .text	00000038 __c.4445
00001f46 l     O .text	00000020 __c.4478
00001f32 l     O .text	00000014 __c.4480
000024c9 l     O .text	00000029 __c.4308
0000247c l     O .text	00000026 __c.4316
000024a2 l     O .text	00000014 __c.4314
000024b6 l     O .text	00000013 __c.4310
00002454 l     O .text	00000028 __c.4320
00002429 l     O .text	0000002b __c.4322
00001f18 l     O .text	0000001a __c.4487
00001f05 l     O .text	00000013 __c.4489
000025d2 l     O .text	00000013 __c.4250
00001ef9 l     O .text	0000000c __c.4503
00001ee6 l     O .text	00000013 __c.4510
00001ed7 l     O .text	0000000f __c.4512
00002076 l     O .text	00000013 __c.4454
0000205d l     O .text	00000019 __c.4456
00002038 l     O .text	00000025 __c.4459
0000201b l     O .text	0000001d __c.4462
00001ffd l     O .text	0000001e __c.4464
00001fd6 l     O .text	00000027 __c.4466
00001fc2 l     O .text	00000014 __c.4468
00001fa2 l     O .text	00000020 __c.4470
00001f66 l     O .text	0000003c __c.4473
00001eb4 l     O .text	00000023 __c.4526
0000258e l     O .text	00000028 __c.4283
00002570 l     O .text	0000001e __c.4285
0000253f l     O .text	00000019 __c.4289
00002558 l     O .text	00000018 __c.4287
0000251a l     O .text	00000025 __c.4294
000024f2 l     O .text	00000028 __c.4296
000025b6 l     O .text	0000001c __c.4266
00001e9e l     O .text	00000016 __c.4531
00001e88 l     O .text	00000016 __c.4533
00001e73 l     O .text	00000015 __c.4535
00001e64 l     O .text	0000000f __c.4537
00001e50 l     O .text	00000014 __c.4539
00001e1c l     O .text	00000034 __c.4541
00001de8 l     O .text	00000034 __c.4543
00000000 l    df *ABS*	00000000 main.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008019e7 l     O .bss	00000002 lcd_display_time
000047a8 l     O .text	00000030 __c.4449
00004789 l     O .text	0000001f __c.4451
0000476c l     O .text	0000001d __c.4453
0000475c l     O .text	00000010 __c.4455
00004735 l     O .text	00000027 __c.4457
0000471b l     O .text	0000001a __c.4459
00004701 l     O .text	0000001a __c.4461
000046ff l     O .text	00000002 __c.4463
000046e9 l     O .text	00000016 __c.4477
000046cf l     O .text	0000001a __c.4483
000046b1 l     O .text	0000001e __c.4489
0000469b l     O .text	00000016 __c.4491
00004695 l     O .text	00000006 __c.4493
0000468f l     O .text	00000006 __c.4495
00004675 l     O .text	0000001a __c.4497
0000466f l     O .text	00000006 __c.4504
00004669 l     O .text	00000006 __c.4506
000045c1 l     O .text	000000a8 __c.4513
0001becc l     F .text	00000288 user_task.part.1
000045be l     O .text	00000003 __c.4525
000045b2 l     O .text	0000000c __c.4527
000045a4 l     O .text	0000000e __c.4529
0000459b l     O .text	00000009 __c.4531
0000458b l     O .text	0000000c __c.4539
00004597 l     O .text	00000004 __c.4537
00004584 l     O .text	00000007 __c.4548
00004573 l     O .text	00000011 __c.4550
0000454c l     O .text	00000027 __c.4552
0000452d l     O .text	0000001f __c.4554
00004510 l     O .text	0000001d __c.4556
00004500 l     O .text	00000010 __c.4558
000044d9 l     O .text	00000027 __c.4560
000044bf l     O .text	0000001a __c.4562
000044a5 l     O .text	0000001a __c.4564
0000448f l     O .text	00000016 __c.4566
00004479 l     O .text	00000016 __c.4568
00004467 l     O .text	00000012 __c.4570
00004458 l     O .text	0000000f __c.4572
0000442a l     O .text	0000002e __c.4574
00004412 l     O .text	00000018 __c.4576
00004401 l     O .text	00000011 __c.4578
000043eb l     O .text	00000016 __c.4580
000043d6 l     O .text	00000015 __c.4582
000043c4 l     O .text	00000012 __c.4584
000043ac l     O .text	00000018 __c.4586
00004397 l     O .text	00000015 __c.4588
00004381 l     O .text	00000016 __c.4590
0000436b l     O .text	00000016 __c.4592
0000435a l     O .text	00000011 __c.4594
00004354 l     O .text	00000006 __c.4596
0000434e l     O .text	00000006 __c.4598
00004334 l     O .text	0000001a __c.4600
00004320 l     O .text	00000014 __c.4602
00000000 l    df *ABS*	00000000 i2c.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000429 l     O .text	00000018 __c.3593
00000410 l     O .text	00000019 __c.3595
000003fa l     O .text	00000016 __c.3597
000003de l     O .text	0000001c __c.3640
00801753 l     O .bss	00000001 i2c_init_status
000003c7 l     O .text	00000017 __c.3646
00005766 l     F .text	00000014 i2c_next
000003c1 l     O .text	00000006 __c.3696
000003b3 l     O .text	0000000e __c.3698
000003a9 l     O .text	0000000a __c.3700
0000039d l     O .text	0000000c __c.3702
0000038b l     O .text	00000012 __c.3704
00000379 l     O .text	00000012 __c.3706
00000366 l     O .text	00000013 __c.3708
00000364 l     O .text	00000002 __c.3710
00000351 l     O .text	00000013 __c.3715
0000033d l     O .text	00000014 __c.3717
00000333 l     O .text	0000000a __c.3719
00000331 l     O .text	00000002 __c.3721
00000000 l    df *ABS*	00000000 parsing.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000051e l     O .text	00000020 __c.3586
000004f8 l     O .text	00000026 __c.3629
00000000 l    df *ABS*	00000000 printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00007858 l     F .text	00000018 _putc_fn
00000000 l    df *ABS*	00000000 ff.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00008b52 l     F .text	0000002a ld_dword
00008b7c l     F .text	0000000c st_dword
00008b88 l     F .text	00000012 mem_set
00008b9a l     F .text	0000001e mem_cmp
00008bb8 l     F .text	0000010c tchar2uni
00008cc4 l     F .text	00000050 clst2sect
00008d14 l     F .text	00000078 clmt_clust
00008d8c l     F .text	0000001e sum_sfn
00008daa l     F .text	00000058 get_ldnumber
0080181c l     O .bss	00000001 CurrVol
00008e02 l     F .text	00000058 validate
00008e5a l     F .text	00000016 mem_cpy.part.0
00008e70 l     F .text	0000015a put_utf
00008fca l     F .text	00000220 get_fileinfo
000091ea l     F .text	0000002a ld_clust.isra.4
00009214 l     F .text	0000001a st_clust.isra.5
0000922e l     F .text	000000a6 sync_window.part.6
000092d4 l     F .text	000000e4 sync_fs
000093b8 l     F .text	00000150 dir_clear
00009508 l     F .text	00000076 move_window
0000957e l     F .text	00000080 check_fs
000095fe l     F .text	000004b4 mount_volume
0080181f l     O .bss	00000002 FatFs
0080181d l     O .bss	00000002 Fsid
00009ab2 l     F .text	000001f6 put_fat
00009ca8 l     F .text	00000168 get_fat.isra.10
00009e10 l     F .text	00000182 dir_sdi
00009f92 l     F .text	0000024c create_chain
0000a1de l     F .text	00000122 remove_chain
0000a300 l     F .text	000001d0 dir_next
0000a4d0 l     F .text	00000072 dir_alloc
0000a542 l     F .text	00000192 dir_read
008004eb l     O .data	0000000d LfnOfs
0000a6d4 l     F .text	00000090 dir_remove
0000a764 l     F .text	0000021c dir_find
0000a980 l     F .text	0000031c dir_register
0000ac9c l     F .text	00000462 follow_path
0080046b l     O .data	00000080 ExCvt
00000000 l    df *ABS*	00000000 ffunicode.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008007a6 l     O .data	00000100 uc437
008004f8 l     O .data	000000bc cvt2.1843
008005b4 l     O .data	000001f2 cvt1.1842
00000000 l    df *ABS*	00000000 mmc_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000dc5c l     F .text	00000048 mmc_task
00000827 l     O .text	0000001c __c.3594
0000081a l     O .text	0000000d __c.3622
0000080a l     O .text	00000010 __c.3635
00801824 l     O .bss	00000002 mmc_init_flag
000007ea l     O .text	00000020 __c.3637
000007d7 l     O .text	00000013 __c.3639
000007cb l     O .text	0000000c __c.3641
000007ba l     O .text	00000011 __c.3643
0000079c l     O .text	0000001e __c.3646
00000787 l     O .text	00000015 __c.3648
00000779 l     O .text	0000000e __c.3650
00000000 l    df *ABS*	00000000 fatfs_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000a37 l     O .text	00000007 __c.3596
008008ca l     O .data	00000008 CSWTCH.25
00000a26 l     O .text	00000011 __c.3632
00000a08 l     O .text	0000001e __c.3634
000009e9 l     O .text	0000001f __c.3636
000009cb l     O .text	0000001e __c.3638
000009ad l     O .text	0000001e __c.3640
0000098e l     O .text	0000001f __c.3642
0000096f l     O .text	0000001f __c.3644
00000950 l     O .text	0000001f __c.3646
00000931 l     O .text	0000001f __c.3648
00000912 l     O .text	0000001f __c.3650
000008f4 l     O .text	0000001e __c.3652
000008cf l     O .text	00000025 __c.3654
00000882 l     O .text	0000004d __c.3656
00000867 l     O .text	0000001b __c.3662
00000845 l     O .text	00000022 __c.3664
00000843 l     O .text	00000002 __c.3666
00000000 l    df *ABS*	00000000 fatfs_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000b73 l     O .text	0000000c __c.3587
00000afc l     O .text	00000077 __c.3589
00000a7c l     O .text	0000000e __c.3626
00000a53 l     O .text	00000029 __c.3630
00000a3e l     O .text	00000015 __c.3632
00000adc l     O .text	00000020 __c.3605
00000acc l     O .text	00000010 __c.3607
00000ab8 l     O .text	00000014 __c.3609
00000aaa l     O .text	0000000e __c.3611
00000a8a l     O .text	00000020 __c.3613
00000000 l    df *ABS*	00000000 gpib_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000016c1 l     O .text	0000000b __c.4416
000014f8 l     O .text	000001c9 __c.4418
000014eb l     O .text	0000000d __c.4426
00000000 l    df *ABS*	00000000 drives_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001dc4 l     O .text	00000007 __c.3641
00001dcb l     O .text	0000001d __c.3637
00001db3 l     O .text	00000011 __c.3643
00000000 l    df *ABS*	00000000 amigo.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00015fa4 l     F .text	000000ac amigo_overflow_check
00002da0 l     O .text	00000019 __c.4173
00016050 l     F .text	000000e8 amigo_chs_to_logical
00002d4d l     O .text	0000002b __c.4166
00002e20 l     O .text	00000018 __c.4143
00002e02 l     O .text	0000001e __c.4149
00002de8 l     O .text	0000001a __c.4151
00002dd3 l     O .text	00000015 __c.4157
00002db9 l     O .text	0000001a __c.4159
00002d78 l     O .text	00000028 __c.4196
00002d3d l     O .text	00000010 __c.4207
00002d28 l     O .text	00000015 __c.4211
00002d16 l     O .text	00000012 __c.4217
00002cfc l     O .text	0000001a __c.4223
00002cea l     O .text	00000012 __c.4230
00002ccb l     O .text	0000001f __c.4232
00002cab l     O .text	00000020 __c.4234
00002c91 l     O .text	0000001a __c.4241
00002c84 l     O .text	0000000d __c.4243
00002c75 l     O .text	0000000f __c.4256
00002c0e l     O .text	00000067 __c.4263
00002ba7 l     O .text	00000067 __c.4265
00002b40 l     O .text	00000067 __c.4267
00002adb l     O .text	00000065 __c.4269
00002a8b l     O .text	00000050 __c.4274
00002a3b l     O .text	00000050 __c.4276
000029eb l     O .text	00000050 __c.4278
0000299a l     O .text	00000051 __c.4280
00002968 l     O .text	00000032 __c.4292
00002946 l     O .text	00000022 __c.4294
00002925 l     O .text	00000021 __c.4296
00002904 l     O .text	00000021 __c.4298
000028d5 l     O .text	0000002f __c.4300
000028b5 l     O .text	00000020 __c.4303
000028a1 l     O .text	00000014 __c.4306
0000288d l     O .text	00000014 __c.4309
00002864 l     O .text	00000029 __c.4311
00002843 l     O .text	00000021 __c.4313
00002833 l     O .text	00000010 __c.4316
00002811 l     O .text	00000022 __c.4318
000027f5 l     O .text	0000001c __c.4320
000027cc l     O .text	00000029 __c.4322
000027ac l     O .text	00000020 __c.4324
00002781 l     O .text	0000002b __c.4326
00002762 l     O .text	0000001f __c.4328
00002752 l     O .text	00000010 __c.4331
00002720 l     O .text	00000032 __c.4336
00002700 l     O .text	00000020 __c.4340
000026df l     O .text	00000021 __c.4343
000026c0 l     O .text	0000001f __c.4346
0000269e l     O .text	00000022 __c.4349
00002682 l     O .text	0000001c __c.4352
00002662 l     O .text	00000020 __c.4355
00002639 l     O .text	00000029 __c.4360
0000260e l     O .text	0000002b __c.4363
000025e5 l     O .text	00000029 __c.4366
00000000 l    df *ABS*	00000000 printer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002e75 l     O .text	00000021 __c.4115
00002ea4 l     O .text	00000015 __c.4107
00002e96 l     O .text	0000000e __c.4109
00002edb l     O .text	00000022 __c.4097
00002ec5 l     O .text	00000016 __c.4099
00002eb9 l     O .text	0000000c __c.4101
00002e6e l     O .text	00000007 __c.4121
00002e52 l     O .text	0000001c __c.4126
00002e38 l     O .text	0000001a __c.4128
00000000 l    df *ABS*	00000000 lifutils.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00004316 l     O .text	0000000a __c.3845
00004152 l     O .text	000001c4 __c.3847
00004108 l     O .text	00000029 __c.3866
000040f0 l     O .text	00000018 __c.3871
000040cb l     O .text	00000025 __c.3883
000040b2 l     O .text	00000019 __c.3889
00004091 l     O .text	00000021 __c.3896
00004055 l     O .text	0000003c __c.3905
00004018 l     O .text	0000003d __c.3914
008019c7 l     O .bss	00000020 _lif_ctime_buf.4017
008019a7 l     O .bss	00000020 _timestr.4022
00004013 l     O .text	00000005 __c.4037
00003ff9 l     O .text	0000001a __c.4039
00003fdc l     O .text	0000001d __c.4041
00003fbf l     O .text	0000001d __c.4043
00003fa2 l     O .text	0000001d __c.4045
00003f85 l     O .text	0000001d __c.4047
00003f68 l     O .text	0000001d __c.4049
00003f4b l     O .text	0000001d __c.4051
00003f2e l     O .text	0000001d __c.4053
00003f11 l     O .text	0000001d __c.4055
00003ef7 l     O .text	0000001a __c.4057
00003edb l     O .text	0000001c __c.4059
00003ebe l     O .text	0000001d __c.4061
00003ea1 l     O .text	0000001d __c.4063
00003e85 l     O .text	0000001c __c.4065
00003e69 l     O .text	0000001c __c.4067
00003e4f l     O .text	0000001a __c.4069
00003e35 l     O .text	0000001a __c.4071
00003e19 l     O .text	0000001c __c.4073
00003dfd l     O .text	0000001c __c.4075
00003de0 l     O .text	0000001d __c.4077
00003dc3 l     O .text	0000001d __c.4079
00003da6 l     O .text	0000001d __c.4081
00003d8a l     O .text	0000001c __c.4083
00003d70 l     O .text	0000001a __c.4085
00003d6e l     O .text	00000002 __c.4087
00003d4f l     O .text	0000001f __c.4094
00003d16 l     O .text	00000039 __c.4096
00003cfe l     O .text	00000018 __c.4098
00003cc5 l     O .text	00000039 __c.4100
00003c8c l     O .text	00000039 __c.4102
00003c67 l     O .text	00000025 __c.4104
00003c38 l     O .text	0000002f __c.4106
00003c0c l     O .text	0000002c __c.4108
00003beb l     O .text	00000021 __c.4114
00003ba7 l     O .text	00000044 __c.4116
00003b66 l     O .text	00000041 __c.4118
00003b38 l     O .text	0000002e __c.4120
00003aed l     O .text	0000004b __c.4122
00003aa2 l     O .text	0000004b __c.4124
00003a77 l     O .text	0000002b __c.4126
00003a4b l     O .text	0000002c __c.4128
00003988 l     O .text	0000003a __c.4183
00003968 l     O .text	00000020 __c.4192
0000391b l     O .text	0000004d __c.4217
000039f6 l     O .text	00000055 __c.4144
000039e9 l     O .text	0000000d __c.4146
000039dc l     O .text	0000000d __c.4154
000039cf l     O .text	0000000d __c.4159
000039c2 l     O .text	0000000d __c.4164
000038e3 l     O .text	00000038 __c.4229
000038ba l     O .text	00000029 __c.4231
00003869 l     O .text	00000051 __c.4234
0000382a l     O .text	0000003f __c.4247
000037f4 l     O .text	00000036 __c.4249
000037c1 l     O .text	00000033 __c.4251
0000378e l     O .text	00000033 __c.4253
00003777 l     O .text	00000017 __c.4263
00003737 l     O .text	00000040 __c.4265
000036eb l     O .text	0000004c __c.4268
000036bb l     O .text	00000030 __c.4270
000036b9 l     O .text	00000002 __c.4273
000036ad l     O .text	0000000c __c.4275
000036a0 l     O .text	0000000d __c.4277
0000368f l     O .text	00000011 __c.4279
0000367c l     O .text	00000013 __c.4281
00003669 l     O .text	00000013 __c.4283
00003656 l     O .text	00000013 __c.4285
0000362f l     O .text	00000027 __c.4292
0000360a l     O .text	00000025 __c.4294
000035d1 l     O .text	00000039 __c.4308
000035ad l     O .text	00000024 __c.4325
0000359f l     O .text	0000000e __c.4342
00003591 l     O .text	0000000e __c.4347
00003583 l     O .text	0000000e __c.4349
00003550 l     O .text	00000033 __c.4363
00003522 l     O .text	0000002e __c.4365
000034f3 l     O .text	0000002f __c.4367
000034c3 l     O .text	00000030 __c.4369
00003494 l     O .text	0000002f __c.4371
00003464 l     O .text	00000030 __c.4373
0000343d l     O .text	00000027 __c.4375
00003426 l     O .text	00000017 __c.4377
0000340f l     O .text	00000017 __c.4379
000033f6 l     O .text	00000019 __c.4381
000033dd l     O .text	00000019 __c.4383
000033cf l     O .text	0000000e __c.4385
000033b7 l     O .text	00000018 __c.4409
000033a0 l     O .text	00000017 __c.4411
00003368 l     O .text	00000038 __c.4413
00003358 l     O .text	00000010 __c.4415
00003297 l     O .text	0000000e __c.4426
000032a5 l     O .text	00000028 __c.4424
00003323 l     O .text	00000035 __c.4419
000032cd l     O .text	00000056 __c.4421
0000326f l     O .text	00000028 __c.4434
00003261 l     O .text	0000000e __c.4437
00003249 l     O .text	00000018 __c.4454
00003236 l     O .text	00000013 __c.4456
00003228 l     O .text	0000000e __c.4458
0000321a l     O .text	0000000e __c.4463
000031fa l     O .text	00000020 __c.4480
000031df l     O .text	0000001b __c.4482
000031c3 l     O .text	0000001c __c.4484
00003194 l     O .text	0000002f __c.4486
00003181 l     O .text	00000013 __c.4488
00003151 l     O .text	00000030 __c.4490
00003143 l     O .text	0000000e __c.4492
00003135 l     O .text	0000000e __c.4497
00003110 l     O .text	00000025 __c.4505
000030f0 l     O .text	00000020 __c.4507
000030d1 l     O .text	0000001f __c.4509
000030a9 l     O .text	00000028 __c.4511
0000309a l     O .text	0000000f __c.4513
00003072 l     O .text	00000028 __c.4522
0000304b l     O .text	00000027 __c.4524
00003024 l     O .text	00000027 __c.4526
00002fee l     O .text	00000036 __c.4528
00002fc5 l     O .text	00000029 __c.4530
00002fae l     O .text	00000017 __c.4532
00002f85 l     O .text	00000029 __c.4545
00002f60 l     O .text	00000025 __c.4547
00002f3d l     O .text	00000023 __c.4549
00002f1d l     O .text	00000020 __c.4551
00002efd l     O .text	00000020 __c.4553
00004131 l     O .text	00000021 __c.3860
00000000 l    df *ABS*	00000000 ram.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000307 l     O .text	0000000d __c.3604
000002f4 l     O .text	00000013 __c.3606
000002e1 l     O .text	00000013 __c.3608
000002c3 l     O .text	0000001e __c.3610
000002a5 l     O .text	0000001e __c.3612
00000287 l     O .text	0000001e __c.3614
00000269 l     O .text	0000001e __c.3616
00000255 l     O .text	00000014 __c.3618
0000023a l     O .text	0000001b __c.3633
00000222 l     O .text	00000018 __c.3639
000001fd l     O .text	00000025 __c.3648
00000000 l    df *ABS*	00000000 spi.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0080174f l     O .bss	00000004 SPI0_Speed_value
00000314 l     O .text	0000001d __c.3602
0080174d l     O .bss	00000002 SPI0_Mode_value
00000000 l    df *ABS*	00000000 rtc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004de l     O .text	0000001a __c.3601
000004c2 l     O .text	0000001c __c.3609
000004a9 l     O .text	00000019 __c.3611
00000498 l     O .text	00000011 __c.3619
00000488 l     O .text	00000010 __c.3625
00000474 l     O .text	00000014 __c.3631
0000045f l     O .text	00000015 __c.3633
00000441 l     O .text	0000001e __c.3643
00000000 l    df *ABS*	00000000 timer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000064e6 l     F .text	0000007c clock_settime.part.2
000005cd l     O .text	0000001d __c.3599
000005c3 l     O .text	0000000a __c.3619
00801782 l     O .bss	00000020 _ts_to_str
0080177a l     O .bss	00000008 __clock_elapsed
000005b5 l     O .text	0000000e __c.3633
000005aa l     O .text	0000000b __c.3635
008017a2 l     O .bss	00000002 timers_configured
008017a4 l     O .bss	00000002 timers_enabled
00000596 l     O .text	00000014 __c.3655
00000583 l     O .text	00000013 __c.3657
00000577 l     O .text	0000000c __c.3659
0000055f l     O .text	00000018 __c.3661
0000054e l     O .text	00000011 __c.3663
0000053e l     O .text	00000010 __c.3665
00000000 l    df *ABS*	00000000 gpib_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000eaf l     O .text	0000001d __c.3746
0080195b l     O .bss	00000001 _ppr_reg
00000e9c l     O .text	00000013 __c.3764
00000e8b l     O .text	00000011 __c.3778
00000e7e l     O .text	0000000d __c.3787
00000e70 l     O .text	0000000e __c.3796
00000e63 l     O .text	0000000d __c.3803
00000e55 l     O .text	0000000e __c.3809
00000000 l    df *ABS*	00000000 _clear_bss.o
00004808 l       .text	00000000 .do_clear_bss_start
00004806 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 delay.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 rs232.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 stringsup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 timer_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 mathio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 ffsystem.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 diskio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 vector.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _udivmodqi4.o
0001c54a l       .text	00000000 __udivmodqi4_ep
0001c542 l       .text	00000000 __udivmodqi4_loop
00000000 l    df *ABS*	00000000 _udivmodhi4.o
0001c56a l       .text	00000000 __udivmodhi4_ep
0001c55c l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _divmodhi4.o
0001c592 l       .text	00000000 __divmodhi4_neg1
0001c59a l       .text	00000000 __divmodhi4_neg2
0001c5a0 l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
0001c5c8 l       .text	00000000 __udivmodsi4_ep
0001c5ae l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
0001c5fe l       .text	00000000 __divmodsi4_neg2
0001c60c l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 calloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _exit.o
0001ce7c l       .text	00000000 __stop_program
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 --library=m
000156da g     F .text	0000004a SS80_Selected_Device_Clear
0001c630 g       .text	00000002 .hidden __usmulhisi3
0000ea7a g     F .text	0000000c putchar
00011712 g     F .text	00000022 SS80_is_MTA
00006382 g     F .text	000000ea clock_gettime
00005a3c g     F .text	000000d4 i2c_display_task_errors
00005dd4 g     F .text	00000084 rtc_init
00011a50 g     F .text	000000a8 GPIB_COMMANDS
00004816  w      .text	00000000 __vector_22
00010b2a g     F .text	00000054 gpib_unread
000049fa g     F .text	0000000a set_error
000148ca g     F .text	00000034 SS80_test_extended_status
00005e88  w    F .text	00000016 strcpy
00007636 g     F .text	00000008 asctime
0000690e g     F .text	00000020 tm_mon_to_ascii
00801a7d g     O .bss	00000235 Fatfs
0000ebae g     F .text	0000004a mctime
00004816  w      .text	00000000 __vector_28
0000dbbc g     F .text	0000001a mmc_fast
00005c14 g     F .text	0000008c rtc_write
00005634 g     F .text	00000058 i2c_fn
000157cc g     F .text	00000218 SS80_Transparent_State
0080195c g     O .bss	00000001 gpib_unread_f
000048e4 g     F .text	00000004 spi_RX_buffer
00012196 g     F .text	00000042 gpib_help
00015542 g     F .text	0000009a SS80_Report
0000f6de g     F .text	0000006a free_file_descriptor
0000e86e g     F .text	00000096 fatfs_putc
0001c710 g       .text	0000001e .hidden __umulhisi3
008001b8 g     O .data	0000000c cfgfile
00004816  w      .text	00000000 __vector_1
00011bbe g     F .text	00000184 GPIB
0000e44c g     F .text	00000042 fatfs_help
000065d8 g     F .text	00000016 delete_all_timers
00005216 g     F .text	0000000c SPI0_TXRX_Byte
0001cbde g       .text	00000000 __fp_mpack_finite
0000f224 g     F .text	00000086 utime
00801a4d g     O .bss	00000008 __clock
0001bbde g     F .text	0000007c lcd_time
00012cb8 g     F .text	00000054 find_device
00007464 g     F .text	00000128 set_dst
0000ef42 g     F .text	00000096 fdevopen
00011734 g     F .text	00000022 SS80_is_MSA
00004880 g     F .text	00000060 spi_end
00018322 g     F .text	000000d6 lif_dir2str
0001cb64 g     F .text	00000040 round
00012fc6 g     F .text	0000017e alloc_device
00004bf6 g     F .text	0000006a safefree
00011d42 g     F .text	00000130 GPIB_TALK
00004816  w      .text	00000000 __vector_32
0000ff00 g       *ABS*	00000000 __DATA_REGION_LENGTH__
0001c800 g     F .text	00000004 __divsf3
0001c6b4 g       .text	00000036 .hidden __epilogue_restores__
00004fca g     F .text	00000018 uart_rx_count
0001423c g     F .text	0000003a lif_dir_count
00801cdc g     O .bss	00000009 gpib_timer
00011e72 g     F .text	000000f6 GPIB_SECONDARY_ADDRESS
00000000 g       *ABS*	00000000 __TEXT_REGION_ORIGIN__
000186a4 g     F .text	0000000e lif_vol_clear
0000646c g     F .text	0000007a clock_task
00010ef0 g     F .text	00000284 gpib_trace_display
0001b628 g     F .text	000000fc lif_rename_file
00013456 g     F .text	00000850 Read_Config
00012c38 g     F .text	00000028 find_type
0001ca22 g     F .text	00000022 __fp_round
00012c60 g     F .text	0000001e count_drive_types
0000692e g     F .text	00000042 Days_Per_Month
000067c8 g     F .text	00000028 execute_timers
0000fdf4 g     F .text	00000176 ls_info
00004816  w      .text	00000000 __vector_34
0000db76 g     F .text	0000001a mmc_spi_begin
0001c8d0 g     F .text	0000000a __fixsfsi
000066e2 g     F .text	0000000c clock_elapsed_begin
00005ef0  w    F .text	00000032 reverse
0000d4ca g     F .text	00000006 mmc_disk_status
0001ca44 g     F .text	00000044 __fp_split3
00010914 g     F .text	00000014 gpib_timeout_set
0001c554 g       .text	00000028 .hidden __udivmodhi4
0000487c g     F .text	00000004 chip_select_init
00006670 g     F .text	00000072 ts_to_str
00008b46 g     F .text	0000000c atol
000079b8 g     F .text	000000aa p_ntoa
0000de2c g     F .text	000000d8 tm_to_fat
00004a3c g     F .text	00000122 PrintFree
00016aa4 g     F .text	000000b8 amigo_cmd_dsj
0000d244 g     F .text	00000024 wait_ready
000001c2 g       .text	00000000 __trampolines_start
000131ee g     F .text	0000011c hpdir_set_device
0001c9ac g     F .text	00000048 __fp_cmp
000114f0 g     F .text	00000166 gpib_write_str
008002f0 g     O .data	00000005 _backlight
00801cba g     O .bss	00000002 errno
000157aa g     F .text	00000022 SS80_Cancel
0001ce7e g       .text	00000000 _etext
0000d67a g     F .text	00000488 mmc_disk_ioctl
00006078 g     F .text	00000028 MATCH
00800125 g     O .data	00000010 __WDay
00019168 g     F .text	000000b8 lif_writedirindex
000050d4 g     F .text	000000ce SPI0_Speed
0000556e g     F .text	000000c6 i2c_task_run
000066ee g     F .text	0000007c clock_elapsed_end
0000d0be g     F .text	000000c4 ff_wtoupper
0001c72e g     F .text	0000000a __subsf3
0001b1ea g     F .text	00000312 lif_add_lif_file
00801ce5 g     O .bss	00000002 lastcmd
00004816  w      .text	00000000 __vector_24
000131ec g     F .text	00000002 set_Config_Defaults
00005ba6 g     F .text	00000062 i2c_rtc_read
00006064 g     F .text	00000014 skipspaces
0000bc92 g     F .text	0000026c f_getcwd
00004816  w      .text	00000000 __vector_12
00010550 g     F .text	00000032 gpib_timer_init
000105b2 g     F .text	0000002c ppr_init
0000ea86 g     F .text	00000068 fgets
00004fe2 g     F .text	0000004c uart_get_tail
00004bb2 g     F .text	00000044 safemalloc
0001b4fc g     F .text	0000012c lif_del_file
00007826 g     F .text	00000032 _putc_buffer_fn
0001a422 g     F .text	00000172 lif_ascii_string_to_e010
0000dc42 g     F .text	0000001a mmc_ins_status
0080030a g     O .data	00000002 _cmd2
0001863a g     F .text	0000004e lif_lifbcd2timestr
00801ce7 g     O .bss	00000200 gpib_iobuff
00017af8 g     F .text	00000028 V2B_MSB
000184da g     F .text	00000084 lif_time2lifbcd
00012cb0 g     F .text	00000008 find_free
0000550c g     F .text	00000024 i2c_done
00018c14 g     F .text	0000036a lif_check_dir
00004816 g       .text	00000000 __bad_interrupt
00004cba g     F .text	00000090 delayms
000156a6 g     F .text	00000018 SS80_Channel_Independent_Clear
0000fd1c g     F .text	000000d8 cat
000089b6 g     F .text	00000028 snprintf_P
00016bac g     F .text	00000132 amigo_todo_op
00015724 g     F .text	00000086 SS80_Amigo_Clear
0000eeb8 g     F .text	0000008a perror
0001be66 g     F .text	00000024 gpib_user_task
0001e4ca g       *ABS*	00000000 __data_load_end
0000d18e g     F .text	0000000c disk_initialize
0080199a g     O .bss	0000000d plot
000108c2 g     F .text	00000006 gpib_timer_elapsed_end
00017c76 g     F .text	0000002a lif_free
0000eb1e g     F .text	0000002e puts
0000faf0 g     F .text	000001bc copy
000068d4 g     F .text	00000010 clock_settime
00017ca0 g     F .text	0000003e lif_stralloc
00005e58  w    F .text	00000016 islower
00004a0e g     F .text	0000002e freeRam
000161c0 g     F .text	0000001c amigo_request_logical_address
0000568c g     F .text	0000001c i2c_send_stop
0000cb74 g     F .text	0000022a f_rename
00004816  w      .text	00000000 __vector_6
000108a4 g     F .text	0000001e gpib_timer_reset
00019464 g     F .text	000005d4 lif_create_volume
0001cc2a g     F .text	00000130 malloc
00004908 g     F .text	00000040 spi_init
0000faae g     F .text	00000042 posix_help
00004816  w      .text	00000000 __vector_31
00010614 g     F .text	00000046 dbf_open
0001bb1c g     F .text	000000c2 copyright
0000bbdc g     F .text	000000b6 f_chdir
0001c7f8 g       .text	00000000 __lesf2
0000484c g     F .text	00000030 chip_deselect
00017a82 g     F .text	00000076 PRINTER_COMMANDS
0000676a g     F .text	00000036 clock_clear
00007660 g     F .text	000000ee initialize_clock
0000dc40 g     F .text	00000002 mmc_power_off
00013f98 g     F .text	00000124 display_mounts
0000de26 g     F .text	00000006 mmc_wp_status
0000e768 g     F .text	00000106 fatfs_getc
00801ee7 g     O .bss	00000001 listening_last
0000d182 g     F .text	0000000c disk_status
00800102 g     O .data	00000002 __malloc_heap_start
000001c2 g       .text	00000000 __trampolines_end
000068aa g     F .text	0000002a clock_getres
00801774 g     O .bss	00000004 i2c_task
0001a594 g     F .text	00000210 lif_add_ascii_file_as_e010_wrapper
00008084  w    F .text	00000038 strlen_X
000184c4 g     F .text	00000016 lif_BCD2BIN
00017cde g     F .text	00000054 lif_open
0000774e g     F .text	000000d8 display_clock
000105de g     F .text	0000001a ppr_bit_set
00004816  w      .text	00000000 __vector_3
000105aa g     F .text	00000008 ppr_reg
000113a4 g     F .text	00000008 gpib_decode
00004d4a g     F .text	00000022 uart_rx_flush
0000edc6 g     F .text	00000004 rmdir
00006562 g     F .text	00000076 set_timers
00801a71 g     O .bss	0000000c dst
0000ee3c g     F .text	0000007c readdir
0001ca88 g     F .text	0000000e __fp_zero
0000c558 g     F .text	0000002a f_closedir
0001bca8 g     F .text	00000148 lcd_setup
0000d1da g     F .text	00000014 disk_ioctl
0001b832 g     F .text	000002d6 lif_tests
00007f48 g     F .text	00000084 _puts_pad
000048e8 g     F .text	00000020 spi_TX
008019e9 g     O .bss	00000001 debug_input
000186b2 g     F .text	0000038c lif_dump_vol
00011f68 g     F .text	0000004c listen_cleanup
0001855e g     F .text	000000a0 lif_lifbcd2time
000183f8 g     F .text	000000be lif_str2dir
000052a4 g     F .text	0000002c SPI0_TXRX
0080030c g     O .data	00000015 _line1
0001c7f8 g       .text	00000000 __nesf2
0001330a g     F .text	00000020 hpdir_set_parameters
00005b10 g     F .text	0000000e BINtoBCD
0000f30a g     F .text	000000d0 lseek
00004816  w      .text	00000000 __vector_23
0001ce7e g       *ABS*	00000000 __data_load_start
00801828 g     O .bss	00000004 _mmc_clock
000047d8 g       .text	00000000 __dtors_end
00011800 g     F .text	00000012 gpib_init_devices
00005f94  w    F .text	00000050 strncasecmp
008021ad g       .bss	00000000 __bss_end
00017f52 g     F .text	00000056 lif_chars
0001c63c g       .text	00000014 .hidden __muluhisi3
000124c0 g     F .text	0000006a print_tok_str
00004816  w      .text	00000000 __vector_30
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
00013ca6 g     F .text	000002f2 format_drives
00004816  w      .text	00000000 __vector_25
008021a9 g     O .bss	00000002 __brkval
00006b2c g     F .text	0000002a gmtime_r
0000ec52 g     F .text	00000052 chmod
000067f0 g     F .text	000000ba init_timers
0001179a g     F .text	00000022 AMIGO_is_MSA
00018fca g     F .text	000000d0 lif_checkdirindex
0000c846 g     F .text	0000014e f_unlink
00010b8a g     F .text	00000020 gpib_control_pin_read
00010742 g     F .text	000000ae dbf_open_read
00005b30 g     F .text	00000076 i2c_rtc_write
0000dc3e g     F .text	00000002 mmc_power_on
00008a7c g     F .text	000000bc strtol
0001089e g     F .text	00000006 gpib_timer_elapsed_begin
00004d6c g     F .text	00000134 uart_ubr
0000d02e g     F .text	00000066 ff_uni2oem
00005326 g     F .text	0000009e i2c_check_op
0001a36c g     F .text	000000b6 lif_e010_pad_sector
00017bc8 g     F .text	00000042 lif_help
00006150 g     F .text	000000b8 split_args
0000ed4a g     F .text	0000003e rename
00010708 g     F .text	0000003a dbf_close
000176dc g     F .text	000000be receive_plot_flush
0001c81a g     F .text	000000dc __divsf3x
00004816  w      .text	00000000 __vector_11
00801ee8 g     O .bss	00000001 spoll
0000ebf8 g     F .text	0000001c basename
000148fe g     F .text	000000c6 SS80_display_extended_status
00017590 g     F .text	00000130 AMIGO_COMMANDS
00018090 g     F .text	0000007a lif_fixname
0000d592 g     F .text	000000e8 mmc_disk_write
000047d8  w      .text	00000000 __init
0001cbf6 g     F .text	00000034 calloc
0001af7a g     F .text	00000270 lif_extract_lif_as_lif
0000630e g     F .text	00000026 install_timers_isr
0001332a g     F .text	0000012c Post_Config
00010582 g     F .text	00000014 reverse_8bits
00014ac6 g     F .text	000000e0 SS80_describe
00005066 g     F .text	0000002c uart_getchar
00007a62 g     F .text	0000020e p_ftoa
0000f5ca g     F .text	000000dc write
00017fa8 g     F .text	00000074 lif_B2S
0001ca96 g       .text	00000000 __gtsf2
0000fa6e g     F .text	00000040 fprintf
00010e4c g     F .text	000000a4 gpib_decode_header
00011174 g     F .text	00000230 gpib_read_byte
000123be g     F .text	00000044 tok_index
000156be g     F .text	0000001c SS80_Universal_Device_Clear
0001a7a4 g     F .text	00000278 lif_add_ascii_file_as_e010
00006334 g     F .text	0000004e __vector_13
00005eca  w    F .text	00000026 strcat
008019ec g     O .bss	00000057 uarts
00004a04 g     F .text	0000000a clear_error
0001caba g       .text	00000000 __mulsf3_pse
00004816  w      .text	00000000 __vector_17
000049d8 g     F .text	00000022 spi_TXRX
0001ca00 g     F .text	00000006 __fp_nan
00012d0c g     F .text	000001c6 set_active_device
00004816  w      .text	00000000 __vector_19
0000628e g     F .text	0000007c get_value
0000527c g     F .text	00000028 SPI0_TX
0001801c g     F .text	0000003a lif_checkname
0000ec14 g     F .text	0000003e chdir
00004816  w      .text	00000000 __vector_7
00016820 g     F .text	000000b6 amigo_buffered_read_execute
0000dca4 g     F .text	00000182 mmc_init
0000e48e g     F .text	00000180 fatfs_ls
0001c9f4 g     F .text	0000000c __fp_inf
000089de g     F .text	00000028 sprintf_P
0001c6f8 g       .text	00000018 .hidden __cmpdi2_s8
0000efd8 g     F .text	00000088 fat_time_to_unix
0000f3da g     F .text	0000004e fseek
00801cb2 g     O .bss	00000004 AccSize
00018688 g     F .text	0000000c lif_image_clear
0000dbe8 g     F .text	0000000e mmc_set_ms_timeout
0000630a g     F .text	00000004 enable_system_task
0000dbdc g     F .text	00000006 mmc_spi_RX_buffer
00005530 g     F .text	00000024 i2c_task_done
00006c4c g     F .text	00000058 is_dst
00004ea0 g     F .text	0000008e uart_init
00014602 g     F .text	00000078 SS80ControllerPack
00801ef1 g     O .bss	00000204 Devices
000047fe g       .text	00000010 .hidden __do_clear_bss
000051a2 g     F .text	00000074 SPI0_Mode
00810000 g       .comment	00000000 __eeprom_end
00019cf8 g     F .text	00000200 lif_open_volume
0000fcac g     F .text	00000070 testpage
00017990 g     F .text	000000f2 printer_buffer
0000bbaa g     F .text	00000032 f_close
0001cab6 g     F .text	000000d2 __mulsf3x
000176c0 g     F .text	0000001c printer_init
0000db98 g     F .text	0000001a mmc_slow
00006024 g     F .text	00000020 sep
00800100 g     O .data	00000002 __malloc_heap_end
00010596 g     F .text	00000014 ppr_set
000165d6 g     F .text	00000130 amigo_format
0000f428 g     F .text	000000da read
00019220 g     F .text	00000030 lif_writedirEOF
0000db90 g     F .text	00000008 mmc_spi_end
0001c936 g       .text	00000000 __floatsisf
00016b5c g     F .text	00000050 amigo_cmd_clear
00000000 g       .text	00000000 __vectors
00019250 g     F .text	00000214 lif_updatefree
000052d0 g     F .text	0000002a SPI0_RX
0000b4e6 g     F .text	00000296 f_read
008019ea g     O .bss	00000002 rtc_ok
000109d4 g     F .text	00000024 gpib_tx_init
000116f0 g     F .text	00000022 SS80_is_MLA
00004f2e g     F .text	00000048 uart_rx_interrupt
00005092 g     F .text	00000006 uart0_getchar
00004816  w      .text	00000000 __vector_27
00010abe g     F .text	0000006c gpib_disable_PPR
0000df54 g     F .text	000000e0 fatfs_scan_files
0000481a g     F .text	00000032 chip_select
0080174c g       .data	00000000 __data_end
000106ce g     F .text	0000003a dbf_lseek
00015dd0 g     F .text	000001d4 SS80_COMMANDS
00005fe4 g     F .text	00000040 stralloc
0000c582 g     F .text	00000088 f_readdir
00801ee9 g     O .bss	00000002 current
00014bf8 g     F .text	0000004e SS80_Check_Volume
0000db3e g     F .text	00000038 mmc_install_timer
00007982 g     F .text	00000036 pch
00008a40 g     F .text	0000003c atodigit
0001c51e g       .text	0000001e .hidden __mulsi3
00005e9e  w    F .text	0000002c strncpy
0000ed88 g     F .text	0000003e unlink
0000f5a0 g     F .text	0000002a sync
0001561a g     F .text	0000008c SS80_init
0001c7f8 g       .text	00000000 __eqsf2
0000f7ba g     F .text	0000008a new_file_descriptor
00005f56  w    F .text	0000003e strcasecmp
0001c65c g       .text	00000020 .hidden __negdi2
00017b88 g     F .text	00000040 B2V_LSB
0000e346 g     F .text	00000106 fatfs_filinfo_list
0000cd9e g     F .text	0000009a f_chmod
00801a55 g     O .bss	00000018 timer_irq
00005554 g     F .text	0000001a i2c_send_start
00012c7e g     F .text	00000032 type_to_str
00000000  w      .text	00000000 __vector_default
0001c57c g       .text	00000026 .hidden __divmodhi4
0001467a g     F .text	00000198 SS80UnitPack
000107f0 g     F .text	000000ae dbf_open_write
00004816  w      .text	00000000 __vector_5
0000db02 g     F .text	0000003c mmc_disk_timerproc
00801a43 g     O .bss	0000000a i2c
00007358 g     F .text	0000010c find_dst
00800182 g     O .data	00000034 gpib_tokens
00004816  w      .text	00000000 __vector_33
00012402 g     F .text	0000003e tok_name
000113ac g     F .text	00000144 gpib_read_str
00019ef8 g     F .text	000003aa lif_dir
000168d6 g     F .text	000001ce amigo_buffered_write
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
000149c4 g     F .text	00000102 SS80_send_status
0001c61e g       .text	00000012 .hidden __tablejump2__
00011812 g     F .text	00000124 gpib_trace_task
00800135 g     O .data	00000001 Stat
0000f194 g     F .text	00000090 unix_time_to_fat
000047d8 g       .text	00000000 __ctors_start
0000d380 g     F .text	0000014a mmc_disk_initialize
00801a6d g     O .bss	00000004 __tzone
0000df04 g     F .text	00000026 get_fattime
00800321 g     O .data	00000002 _cmd1
0000f502 g     F .text	00000038 fread
00018694 g     F .text	00000010 lif_dir_clear
000163f2 g     F .text	00000052 amigo_increment
00011fb4 g     F .text	00000122 GPIB_LISTEN
008001b6 g     O .data	00000002 debuglevel
0080182c g     O .bss	00000002 _mmc_timeout
000047e4 g       .text	0000001a .hidden __do_copy_data
0080027c g     O .data	00000074 faults
0000f982 g     F .text	000000d4 posix_fopen_modes_to_open
00017b4a g     F .text	0000003e B2V_MSB
00801778 g     O .bss	00000002 i2c_callback
000184b6 g     F .text	0000000e lif_BIN2BCD
0001cba4 g     F .text	00000036 __fp_mintl
0001c7f8 g     F .text	00000008 __cmpsf2
0001c6ea g       .text	0000000e .hidden __xload_1
00010998 g     F .text	0000003c gpib_rx_init
00006bae g     F .text	0000005c gettimeofday
0001ca14 g     F .text	0000000e __fp_pscB
0001ca54 g       .text	00000000 __fp_splitA
000185fe g     F .text	0000003c lif_ctime_gmt
00017de6 g     F .text	000000a6 lif_read
0000fa56 g     F .text	00000018 fopen
0080174c g       .bss	00000000 __bss_start
0000758c g     F .text	000000aa asctime_r
00006d3c g     F .text	00000008 localtime
0001ce6c g     F .text	0000000e memset
00016cde g     F .text	00000108 amigo_todo
0001318c g     F .text	00000032 push_state
00007316 g     F .text	00000042 setdate
0001c168 g     F .text	000003b6 main
008002f5 g     O .data	00000015 _line2
00012194 g     F .text	00000002 talk_cleanup
00005d46 g     F .text	0000008e rtc_run
0000f2d4 g     F .text	00000036 ftell
00801eeb g     O .bss	00000001 talking
0000baaa g     F .text	00000100 f_sync
0080195f g     O .bss	00000002 AMIGOs
0001c7f8 g       .text	00000000 __ltsf2
000050d0 g     F .text	00000004 uart_keyhit
00013144 g     F .text	00000048 init_Devices
00004816  w      .text	00000000 __vector_4
00018f7e g     F .text	0000004c lif_close_volume
0000dbb2 g     F .text	0000000a mmc_spi_init
00800100 g       *ABS*	00000000 __DATA_REGION_ORIGIN__
0001909a g     F .text	000000ce lif_readdirindex
00016e0e g     F .text	000005cc Amigo_Command
0000f7aa g     F .text	00000010 fclose
0000ea6e g     F .text	0000000c getchar
00016340 g     F .text	000000b2 amigo_send_status
00016138 g     F .text	00000088 amigo_init
00800136 g     O .data	0000004a sys_errlist
00006c0a g     F .text	00000042 time
0000ee00 g     F .text	0000003c opendir
0001cbda g     F .text	0000001c __fp_mpack
00012ed2 g     F .text	000000f4 SS80_Set_Defaults
00005c08 g     F .text	0000000c i2c_rtc_init
00006b8a g     F .text	00000024 settimezone
0000b0fe g     F .text	00000078 f_mount
0000e052 g     F .text	000002f4 fatfs_status
00011778 g     F .text	00000022 AMIGO_is_MTA
0001c60e g       .text	00000010 .hidden __negsi2
0000c476 g     F .text	000000e2 f_opendir
000155dc g     F .text	0000003e Clear_Common
0001be8a g     F .text	00000042 help
00010a52 g     F .text	0000006c gpib_enable_PPR
000140bc g     F .text	00000084 mount
0001649a g     F .text	0000013c amigo_verify
0001ca9e g     F .text	00000004 __mulsf3
00006208 g     F .text	00000086 get_token
000161dc g     F .text	000000ba amigo_request_status
00012576 g     F .text	000001b6 display_Addresses
0000f2aa g     F .text	0000002a fileno_to_fatfs
0000d094 g     F .text	0000002a ff_oem2uni
00005f3c  w    F .text	0000001a strcmp
000109f8 g     F .text	0000005a gpib_state_init
00000000  w      *ABS*	00000000 __heap_end
000108c8 g     F .text	0000004c gpib_timer_task
00004c60 g     F .text	0000005a delayus
000131be g     F .text	0000002e pop_state
00004816  w      .text	00000000 __vector_9
0000eca4 g     F .text	0000004a getcwd
00004816  w      .text	00000000 __vector_2
000060a0 g     F .text	00000028 MATCHI
00016de6 g     F .text	00000028 amigo_check_unit
0001c752 g     F .text	000000cc __addsf3x
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
0000befe g     F .text	00000578 f_lseek
0000e904 g     F .text	000000ac fgetc
00801eec g     O .bss	00000001 secondary
0000896a g     F .text	0000004c vsnprintf_P
0000763e g     F .text	00000022 ctime_gm
0001ca96 g     F .text	00000008 __gesf2
00014140 g     F .text	000000fc hpdir_init
00016296 g     F .text	000000aa amigo_send_logical_address
00014ba6 g     F .text	00000052 SS80_Check_Unit
00011656 g     F .text	0000009a gpib_file_init
0080010a g     O .data	00000001 _cs_pin
0080195d g     O .bss	00000002 gpib_log_fp
00004816  w      .text	00000000 __vector_21
00004816  w      .text	00000000 __vector_15
00007c70 g     F .text	000002d8 p_etoa
0001252a g     F .text	0000004c print_tok
00801754 g     O .bss	00000020 i2c_task_op
00015a58 g     F .text	000002c4 SS80_locate_and_read
00005442 g     F .text	000000ca i2c_init
000121d8 g     F .text	000001e6 gpib_tests
00801cb6 g     O .bss	00000002 AccDirs
0000d028 g     F .text	00000006 ff_memfree
00801967 g     O .bss	00000002 PRINTERp
0001ca06 g     F .text	0000000e __fp_pscA
0001c53c g       .text	00000018 .hidden __udivmodqi4
00801eed g     O .bss	00000001 listening
00011936 g     F .text	0000011a gpib_error_test
00801963 g     O .bss	00000002 SS80s
0000c60a g     F .text	0000007c f_stat
00010928 g     F .text	00000070 gpib_bus_init
000052fa g     F .text	0000002c i2c_timer
0000e9b0 g     F .text	000000a4 fputc
00004816  w      .text	00000000 __vector_29
000050bc g     F .text	00000014 uart0_putchar
00008a06 g     F .text	0000003a printf_P
0001c654 g       .text	00000008 .hidden __mulohisi3
00015d1c g     F .text	000000b4 SS80_Execute_State
000070d4 g     F .text	00000008 timegm
00014c46 g     F .text	000004ee SS80_Command_State
00006b6c g     F .text	0000001e gettimezone
008021ad g       .comment	00000000 __heap_start
00006044 g     F .text	00000020 trim_tail
00010bc2 g     F .text	0000028a gpib_write_byte
0001779a g     F .text	000000b0 printer_close
000053ee g     F .text	00000054 i2c_task_op_add
00018a3e g     F .text	000001d6 lif_check_volume
00006ca4 g     F .text	00000098 localtime_r
008001c4 g     O .data	000000b8 tokens
00801cb8 g     O .bss	00000002 AccFiles
00005ca0 g     F .text	000000a6 rtc_read
000047d8 g       .text	00000000 __dtors_start
000047d8 g       .text	00000000 __ctors_end
0001c5e6 g       .text	00000028 .hidden __divmodsi4
00010b7e g     F .text	0000000c gpib_bus_read
0000f060 g     F .text	00000134 stat
000040ff  w      *ABS*	00000000 __stack
0000f53a g     F .text	00000066 syncfs
00017c0a g     F .text	0000006c lif_calloc
0000f6a6 g     F .text	00000038 fwrite
00011af8 g     F .text	000000c6 Send_Identify
00801826 g     O .bss	00000002 _mmc_pre
0000dbe2 g     F .text	00000006 mmc_spi_TXRX
0080174c g       .data	00000000 _edata
0000ce38 g     F .text	000000b2 f_utime
0001272c g     F .text	0000050c display_Config
0001c632 g       .text	0000000a .hidden __usmulhisi3_tail
008021ad g       .comment	00000000 _end
00017d7c g     F .text	0000006a lif_seek_msg
00004948 g     F .text	00000090 spi_begin
0001784a g     F .text	00000146 printer_open
0000b77c g     F .text	0000032e f_write
00004816  w      .text	00000000 __vector_8
0001a2a2 g     F .text	000000ca lif_find_file
0000577a g     F .text	000001d4 __vector_26
00007870 g     F .text	00000112 bin2num
0001c81e g       .text	00000000 __divsf3_pse
00800106 g     O .data	00000004 _spi_clock
00007fcc g     F .text	000000b8 _puts_pad_X
00801961 g     O .bss	00000002 AMIGOp
0000dbd6 g     F .text	00000006 mmc_spi_TX_buffer
0000b176 g     F .text	00000370 f_open
0001810a g     F .text	0000011c lif_vol2str
0000d1ba g     F .text	00000020 disk_write
0000ff6a g     F .text	00000228 ls
0001ce7a  w      .text	00000000 .hidden exit
000120d6 g     F .text	000000be gpib_task
000056a8 g     F .text	000000be i2c_task_next_op
0001c932 g     F .text	0000007a __floatunsisf
00016706 g     F .text	0000011a amigo_buffered_read_command
000065ee g     F .text	00000082 subtract_timespec
0001c57c g       .text	00000000 .hidden _div
0000594e g     F .text	000000ee i2c_print_error
000173da g     F .text	000001b6 Amigo_Execute
00005f22  w    F .text	0000001a strupper
008021ab g     O .bss	00000002 __flp
00012440 g     F .text	00000080 print_tok_val
0001c5a2 g       .text	00000044 .hidden __udivmodsi4
000117de g     F .text	00000022 PRINTER_is_MTA
00019a38 g     F .text	000002c0 lif_newdir
00014276 g     F .text	0000038c hpdir_find_drive
000117bc g     F .text	00000022 PRINTER_is_MLA
00008b38 g     F .text	0000000e atoi
00006970 g     F .text	000001bc time_to_tm
0000df2a g     F .text	0000002a put_rc
0000eb4c g     F .text	00000038 fileno
0080010b g     O .data	0000001a __Month
00005222 g     F .text	0000005a SPI0_Init
0000c994 g     F .text	000001e0 f_mkdir
0001c8da g     F .text	00000058 __fixunssfsi
008020f5 g     O .bss	000000b4 hpdir
000070dc g     F .text	0000023a setdate_r
000060c8 g     F .text	00000054 MATCHARGS
000048e0 g     F .text	00000004 spi_TX_buffer
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
0001ce7a g       .text	00000000 .hidden _exit
00017e8c g     F .text	000000c6 lif_write
00018056 g     F .text	0000003a lif_S2B
0001c154 g     F .text	00000014 user_task
00801eee g     O .bss	00000001 talking_last
0001065a g     F .text	0000003a dbf_read
00005b1e g     F .text	00000012 BCDtoBIN
0001bdf0 g     F .text	00000076 i2c_lcd_task
00006d44 g     F .text	00000390 normalize
00006b56 g     F .text	00000016 gmtime
00004816  w      .text	00000000 __vector_14
0000e68a g     F .text	000000de fatfs_tests
0001b724 g     F .text	0000010e lif_create_image
0000d19a g     F .text	00000020 disk_read
0000f844 g     F .text	0000013e open
00005e6e  w    F .text	0000001a toupper
0001521e g     F .text	00000324 SS80_locate_and_write
0001bb08 g     F .text	00000014 lcd_task
000080bc g     F .text	000008ae _printf_fn
00004816  w      .text	00000000 __vector_10
000105f8 g     F .text	0000001c ppr_bit_clr
00801cbc g     O .bss	00000020 __iob
0000ceea g     F .text	00000138 f_getlabel
00018226 g     F .text	000000fc lif_str2vol
0000c686 g     F .text	000001c0 f_getfree
0000eaee g     F .text	00000030 fputs
00004816  w      .text	00000000 __vector_16
0000611c g     F .text	00000034 MATCHI_LEN
00800100 g       .data	00000000 __data_start
00004b5e g     F .text	00000054 safecalloc
0000eb84 g     F .text	0000002a fileno_to_stream
00015134 g     F .text	000000ea SS80_cmd_seek
0000edca g     F .text	00000036 closedir
00004816  w      .text	00000000 __vector_18
000053c4 g     F .text	0000002a i2c_task_init
00000003 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00014812 g     F .text	000000b8 SS80VolumePack
0000d4d0 g     F .text	000000c2 mmc_disk_read
0000e60e g     F .text	0000007c mmc_test
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
00017d32 g     F .text	0000004a lif_stat
0000502e g     F .text	00000006 uart_rx_byte
000159e4 g     F .text	00000074 SS80_error_return
00800104 g     O .data	00000002 __malloc_margin
00004f76 g     F .text	00000054 __vector_20
0000ecee g     F .text	0000005c mkdir
0001bc5a g     F .text	0000004e lcd_backlight
00005098 g     F .text	00000024 uart_putchar
00010192 g     F .text	000003be posix_tests
00801eef g     O .bss	00000002 gpib_unread_data
0000f748 g     F .text	00000062 close
0001c730 g       .text	00000000 __addsf3
0001c67c g       .text	00000038 .hidden __prologue_saves__
00011756 g     F .text	00000022 AMIGO_is_MLA
0000dbf6 g     F .text	00000048 mmc_test_timeout
0001aa1c g     F .text	0000055e lif_extract_e010_as_ascii
00016444 g     F .text	00000056 amigo_seek
00010baa g     F .text	00000018 gpib_handshake_pin_read
000067a0 g     F .text	00000028 enable_timers
0000e034 g     F .text	0000001e fatfs_fstype
00017b20 g     F .text	0000002a V2B_LSB
00010694 g     F .text	0000003a dbf_write
00801965 g     O .bss	00000002 SS80p
0000d022 g     F .text	00000006 ff_memalloc
0001cd5a g     F .text	00000112 free
0001ca8a g       .text	00000000 __fp_szero
00005034 g     F .text	00000032 uart_tx_byte
0001c650 g       .text	00000004 .hidden __mulshisi3



Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ec 23 	jmp	0x47d8	; 0x47d8 <__ctors_end>
       4:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
       8:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
       c:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      10:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      14:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      18:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      1c:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      20:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      24:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      28:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      2c:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      30:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      34:	0c 94 9a 31 	jmp	0x6334	; 0x6334 <__vector_13>
      38:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      3c:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      40:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      44:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      48:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      4c:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      50:	0c 94 bb 27 	jmp	0x4f76	; 0x4f76 <__vector_20>
      54:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      58:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      5c:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      60:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      64:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      68:	0c 94 bd 2b 	jmp	0x577a	; 0x577a <__vector_26>
      6c:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      70:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      74:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      78:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      7c:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      80:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      84:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      88:	0c 94 0b 24 	jmp	0x4816	; 0x4816 <__bad_interrupt>
      8c:	ca 41       	sbci	r28, 0x1A	; 26
      8e:	1a 43       	sbci	r17, 0x3A	; 58
      90:	02 42       	sbci	r16, 0x22	; 34
      92:	ed 42       	sbci	r30, 0x2D	; 45
      94:	ed 42       	sbci	r30, 0x2D	; 45
      96:	1a 43       	sbci	r17, 0x3A	; 58
      98:	1a 43       	sbci	r17, 0x3A	; 58
      9a:	1a 43       	sbci	r17, 0x3A	; 58
      9c:	1a 43       	sbci	r17, 0x3A	; 58
      9e:	1a 43       	sbci	r17, 0x3A	; 58
      a0:	1a 43       	sbci	r17, 0x3A	; 58
      a2:	1a 43       	sbci	r17, 0x3A	; 58
      a4:	1a 43       	sbci	r17, 0x3A	; 58
      a6:	ca 41       	sbci	r28, 0x1A	; 26
      a8:	c7 41       	sbci	r28, 0x17	; 23
      aa:	1a 43       	sbci	r17, 0x3A	; 58
      ac:	1a 43       	sbci	r17, 0x3A	; 58
      ae:	10 43       	sbci	r17, 0x30	; 48
      b0:	1a 43       	sbci	r17, 0x3A	; 58
      b2:	fc 41       	sbci	r31, 0x1C	; 28
      b4:	1a 43       	sbci	r17, 0x3A	; 58
      b6:	1a 43       	sbci	r17, 0x3A	; 58
      b8:	ca 41       	sbci	r28, 0x1A	; 26
      ba:	1a 43       	sbci	r17, 0x3A	; 58
      bc:	1a 43       	sbci	r17, 0x3A	; 58
      be:	1a 43       	sbci	r17, 0x3A	; 58
      c0:	1a 43       	sbci	r17, 0x3A	; 58
      c2:	1a 43       	sbci	r17, 0x3A	; 58
      c4:	1a 43       	sbci	r17, 0x3A	; 58
      c6:	1a 43       	sbci	r17, 0x3A	; 58
      c8:	1a 43       	sbci	r17, 0x3A	; 58
      ca:	1a 43       	sbci	r17, 0x3A	; 58
      cc:	ca 41       	sbci	r28, 0x1A	; 26
      ce:	15 43       	sbci	r17, 0x35	; 53
      d0:	02 42       	sbci	r16, 0x22	; 34
      d2:	ed 42       	sbci	r30, 0x2D	; 45
      d4:	ed 42       	sbci	r30, 0x2D	; 45
      d6:	1a 43       	sbci	r17, 0x3A	; 58
      d8:	1a 43       	sbci	r17, 0x3A	; 58
      da:	1a 43       	sbci	r17, 0x3A	; 58
      dc:	1a 43       	sbci	r17, 0x3A	; 58
      de:	1a 43       	sbci	r17, 0x3A	; 58
      e0:	1a 43       	sbci	r17, 0x3A	; 58
      e2:	1a 43       	sbci	r17, 0x3A	; 58
      e4:	1a 43       	sbci	r17, 0x3A	; 58
      e6:	ca 41       	sbci	r28, 0x1A	; 26
      e8:	c7 41       	sbci	r28, 0x17	; 23
      ea:	1a 43       	sbci	r17, 0x3A	; 58
      ec:	1a 43       	sbci	r17, 0x3A	; 58
      ee:	0b 43       	sbci	r16, 0x3B	; 59
      f0:	1a 43       	sbci	r17, 0x3A	; 58
      f2:	fc 41       	sbci	r31, 0x1C	; 28
      f4:	1a 43       	sbci	r17, 0x3A	; 58
      f6:	1a 43       	sbci	r17, 0x3A	; 58
      f8:	ca 41       	sbci	r28, 0x1A	; 26
      fa:	3f 43       	sbci	r19, 0x3F	; 63
      fc:	80 44       	sbci	r24, 0x40	; 64
      fe:	32 43       	sbci	r19, 0x32	; 50
     100:	9a 43       	sbci	r25, 0x3A	; 58
     102:	7e 43       	sbci	r23, 0x3E	; 62
     104:	80 44       	sbci	r24, 0x40	; 64
     106:	80 44       	sbci	r24, 0x40	; 64
     108:	80 44       	sbci	r24, 0x40	; 64
     10a:	80 44       	sbci	r24, 0x40	; 64
     10c:	80 44       	sbci	r24, 0x40	; 64
     10e:	80 44       	sbci	r24, 0x40	; 64
     110:	80 44       	sbci	r24, 0x40	; 64
     112:	80 44       	sbci	r24, 0x40	; 64
     114:	4c 43       	sbci	r20, 0x3C	; 60
     116:	60 43       	sbci	r22, 0x30	; 48
     118:	80 44       	sbci	r24, 0x40	; 64
     11a:	80 44       	sbci	r24, 0x40	; 64
     11c:	26 44       	sbci	r18, 0x46	; 70
     11e:	80 44       	sbci	r24, 0x40	; 64
     120:	2e 43       	sbci	r18, 0x3E	; 62
     122:	80 44       	sbci	r24, 0x40	; 64
     124:	80 44       	sbci	r24, 0x40	; 64
     126:	60 43       	sbci	r22, 0x30	; 48
     128:	80 44       	sbci	r24, 0x40	; 64
     12a:	80 44       	sbci	r24, 0x40	; 64
     12c:	80 44       	sbci	r24, 0x40	; 64
     12e:	80 44       	sbci	r24, 0x40	; 64
     130:	80 44       	sbci	r24, 0x40	; 64
     132:	80 44       	sbci	r24, 0x40	; 64
     134:	80 44       	sbci	r24, 0x40	; 64
     136:	80 44       	sbci	r24, 0x40	; 64
     138:	80 44       	sbci	r24, 0x40	; 64
     13a:	3f 43       	sbci	r19, 0x3F	; 63
     13c:	ce 43       	sbci	r28, 0x3E	; 62
     13e:	32 43       	sbci	r19, 0x32	; 50
     140:	9a 43       	sbci	r25, 0x3A	; 58
     142:	7e 43       	sbci	r23, 0x3E	; 62
     144:	80 44       	sbci	r24, 0x40	; 64
     146:	80 44       	sbci	r24, 0x40	; 64
     148:	80 44       	sbci	r24, 0x40	; 64
     14a:	80 44       	sbci	r24, 0x40	; 64
     14c:	80 44       	sbci	r24, 0x40	; 64
     14e:	80 44       	sbci	r24, 0x40	; 64
     150:	80 44       	sbci	r24, 0x40	; 64
     152:	80 44       	sbci	r24, 0x40	; 64
     154:	4c 43       	sbci	r20, 0x3C	; 60
     156:	60 43       	sbci	r22, 0x30	; 48
     158:	80 44       	sbci	r24, 0x40	; 64
     15a:	80 44       	sbci	r24, 0x40	; 64
     15c:	ce 43       	sbci	r28, 0x3E	; 62
     15e:	80 44       	sbci	r24, 0x40	; 64
     160:	2e 43       	sbci	r18, 0x3E	; 62
     162:	80 44       	sbci	r24, 0x40	; 64
     164:	80 44       	sbci	r24, 0x40	; 64
     166:	60 43       	sbci	r22, 0x30	; 48
     168:	8f 68       	ori	r24, 0x8F	; 143
     16a:	99 68       	ori	r25, 0x89	; 137
     16c:	a1 68       	ori	r26, 0x81	; 129
     16e:	a4 68       	ori	r26, 0x84	; 132
     170:	a7 68       	ori	r26, 0x87	; 135
     172:	aa 68       	ori	r26, 0x8A	; 138
     174:	ad 68       	ori	r26, 0x8D	; 141
     176:	b0 68       	ori	r27, 0x80	; 128
     178:	b3 68       	ori	r27, 0x83	; 131
     17a:	4d 86       	std	Y+13, r4	; 0x0d
     17c:	56 86       	std	Z+14, r5	; 0x0e
     17e:	87 86       	std	Z+15, r8	; 0x0f
     180:	a0 86       	std	Z+8, r10	; 0x08
     182:	bc 86       	std	Y+12, r11	; 0x0c
     184:	c9 86       	std	Y+9, r12	; 0x09
     186:	e5 86       	std	Z+13, r14	; 0x0d
     188:	0f 87       	std	Y+15, r16	; 0x0f
     18a:	f2 86       	std	Z+10, r15	; 0x0a
     18c:	1f 9b       	sbis	0x03, 7	; 3
     18e:	f1 9b       	sbis	0x1e, 1	; 30
     190:	2d 9c       	mul	r2, r13
     192:	5c 9c       	mul	r5, r12
     194:	6c 9c       	mul	r6, r12
     196:	89 9c       	mul	r8, r9
     198:	e9 9c       	mul	r14, r9
     19a:	f8 9d       	mul	r31, r8
     19c:	f8 9d       	mul	r31, r8
     19e:	f8 9d       	mul	r31, r8
     1a0:	1d 9d       	mul	r17, r13
     1a2:	49 9d       	mul	r20, r9
     1a4:	97 9d       	mul	r25, r7
     1a6:	b3 9d       	mul	r27, r3
     1a8:	bc 9b       	sbis	0x17, 4	; 23
     1aa:	cf 9b       	sbis	0x19, 7	; 25
     1ac:	c0 ba       	out	0x10, r12	; 16
     1ae:	7f ba       	out	0x1f, r7	; 31
     1b0:	7f ba       	out	0x1f, r7	; 31
     1b2:	7f ba       	out	0x1f, r7	; 31
     1b4:	7f ba       	out	0x1f, r7	; 31
     1b6:	43 ba       	out	0x13, r4	; 19
     1b8:	4a ba       	out	0x1a, r4	; 26
     1ba:	51 ba       	out	0x11, r5	; 17
     1bc:	61 ba       	out	0x11, r6	; 17
     1be:	6f ba       	out	0x1f, r6	; 31
     1c0:	68 ba       	out	0x18, r6	; 24

000001c2 <__trampolines_end>:
     1c2:	63 73       	andi	r22, 0x33	; 51
     1c4:	5f 64       	ori	r21, 0x4F	; 79
     1c6:	69 73       	andi	r22, 0x39	; 57
     1c8:	61 62       	ori	r22, 0x21	; 33
     1ca:	6c 65       	ori	r22, 0x5C	; 92
     1cc:	20 77       	andi	r18, 0x70	; 112
     1ce:	61 73       	andi	r22, 0x31	; 49
     1d0:	3a 20       	and	r3, r10
     1d2:	25 64       	ori	r18, 0x45	; 69
     1d4:	2c 20       	and	r2, r12
     1d6:	77 61       	ori	r23, 0x17	; 23
     1d8:	6e 74       	andi	r22, 0x4E	; 78
     1da:	3a 20       	and	r3, r10
     1dc:	25 64       	ori	r18, 0x45	; 69
     1de:	0a 00       	.word	0x000a	; ????

000001e0 <__c.3617>:
     1e0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     1f0:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

000001fd <__c.3648>:
     1fd:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     20d:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     21d:	25 75 29 0a 00                                      %u)..

00000222 <__c.3639>:
     222:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     232:	61 69 6c 65 64 21 0a 00                             ailed!..

0000023a <__c.3633>:
     23a:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     24a:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000255 <__c.3618>:
     255:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     265:	35 75 0a 00                                         5u..

00000269 <__c.3616>:
     269:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     279:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

00000287 <__c.3614>:
     287:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     297:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002a5 <__c.3612>:
     2a5:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     2b5:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002c3 <__c.3610>:
     2c3:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     2d3:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002e1 <__c.3608>:
     2e1:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     2f1:	75 0a 00                                            u..

000002f4 <__c.3606>:
     2f4:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     304:	75 0a 00                                            u..

00000307 <__c.3604>:
     307:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000314 <__c.3602>:
     314:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     324:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000331 <__c.3721>:
     331:	0a 00                                               ..

00000333 <__c.3719>:
     333:	74 61 73 6b 3a 20 25 64 0a 00                       task: %d..

0000033d <__c.3717>:
     33d:	69 32 63 5f 74 61 73 6b 2e 65 72 72 6f 72 3a 20     i2c_task.error: 
     34d:	25 64 0a 00                                         %d..

00000351 <__c.3715>:
     351:	69 32 63 5f 74 61 73 6b 2e 64 6f 6e 65 3a 20 25     i2c_task.done: %
     361:	64 0a 00                                            d..

00000364 <__c.3710>:
     364:	0a 00                                               ..

00000366 <__c.3708>:
     366:	20 20 54 57 5f 4d 54 5f 44 41 54 41 5f 4e 41 43       TW_MT_DATA_NAC
     376:	4b 0a 00                                            K..

00000379 <__c.3706>:
     379:	20 20 54 57 5f 4d 54 5f 53 4c 41 5f 4e 41 43 4b       TW_MT_SLA_NACK
     389:	0a 00                                               ..

0000038b <__c.3704>:
     38b:	20 20 54 57 5f 4d 52 5f 53 4c 41 5f 4e 41 43 4b       TW_MR_SLA_NACK
     39b:	0a 00                                               ..

0000039d <__c.3702>:
     39d:	20 20 4f 50 5f 45 52 52 4f 52 0a 00                   OP_ERROR..

000003a9 <__c.3700>:
     3a9:	20 20 4f 50 5f 4c 45 4e 0a 00                         OP_LEN..

000003b3 <__c.3698>:
     3b3:	20 20 4f 50 5f 54 49 4d 45 4f 55 54 0a 00             OP_TIMEOUT..

000003c1 <__c.3696>:
     3c1:	20 20 25 73 0a 00                                     %s..

000003c7 <__c.3646>:
     3c7:	69 32 63 5f 74 69 6d 65 72 20 69 6e 69 74 20 66     i2c_timer init f
     3d7:	61 69 6c 65 64 0a 00                                ailed..

000003de <__c.3640>:
     3de:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     3ee:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

000003fa <__c.3597>:
     3fa:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     40a:	3d 3d 20 30 0a 00                                   == 0..

00000410 <__c.3595>:
     410:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     420:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

00000429 <__c.3593>:
     429:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     439:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

00000441 <__c.3643>:
     441:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     451:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

0000045f <__c.3633>:
     45f:	72 74 63 5f 72 75 6e 20 77 72 69 74 65 20 65 72     rtc_run write er
     46f:	72 6f 72 0a 00                                      ror..

00000474 <__c.3631>:
     474:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     484:	6f 72 0a 00                                         or..

00000488 <__c.3625>:
     488:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000498 <__c.3619>:
     498:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000004a9 <__c.3611>:
     4a9:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 64 61 74     i2c_rtc_read dat
     4b9:	61 20 65 72 72 6f 72 0a 00                          a error..

000004c2 <__c.3609>:
     4c2:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 61 64 64     i2c_rtc_read add
     4d2:	72 65 73 73 20 65 72 72 6f 72 0a 00                 ress error..

000004de <__c.3601>:
     4de:	69 32 63 5f 72 74 63 5f 77 72 69 74 65 20 64 61     i2c_rtc_write da
     4ee:	74 61 20 65 72 72 6f 72 0a 00                       ta error..

000004f8 <__c.3629>:
     4f8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     508:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     518:	74 20 25 64 0a 00                                   t %d..

0000051e <__c.3586>:
     51e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     52e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000053e <__c.3665>:
     53e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000054e <__c.3663>:
     54e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000055f <__c.3661>:
     55f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     56f:	66 61 69 6c 65 64 0a 00                             failed..

00000577 <__c.3659>:
     577:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000583 <__c.3657>:
     583:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     593:	64 0a 00                                            d..

00000596 <__c.3655>:
     596:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     5a6:	65 64 0a 00                                         ed..

000005aa <__c.3635>:
     5aa:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000005b5 <__c.3633>:
     5b5:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005c3 <__c.3619>:
     5c3:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005cd <__c.3599>:
     5cd:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5dd:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005ea <__c.3874>:
     5ea:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005fb <__c.3872>:
     5fb:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     60b:	0a 00                                               ..

0000060d <__c.3870>:
     60d:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000061e <__c.3868>:
     61e:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000062f <__c.3866>:
     62f:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     63f:	0a 00                                               ..

00000641 <__c.3859>:
     641:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     651:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     661:	6d 65 0a 00                                         me..

00000665 <__c.3857>:
     665:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     675:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000067f <__c.3855>:
     67f:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     68f:	61 69 6c 65 64 0a 00                                ailed..

00000696 <__c.3853>:
     696:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     6a6:	6e 69 74 0a 00                                      nit..

000006ab <__c.3851>:
     6ab:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6bb:	0a 00                                               ..

000006bd <__c.3805>:
     6bd:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6cd:	61 69 6c 65 64 0a 00                                ailed..

000006d4 <__c.3803>:
     6d4:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006e5 <__c.3801>:
     6e5:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6f5:	0a 00                                               ..

000006f7 <__c.3799>:
     6f7:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

00000708 <__c.3797>:
     708:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

00000719 <__c.3795>:
     719:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     729:	0a 00                                               ..

0000072b <__c.3774>:
     72b:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     73b:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000074c <__c.3649>:
     74c:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     75c:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

00000769 <__c.3617>:
     769:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

00000779 <__c.3650>:
     779:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

00000787 <__c.3648>:
     787:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     797:	25 6c 64 0a 00                                      %ld..

0000079c <__c.3646>:
     79c:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ac:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000007ba <__c.3643>:
     7ba:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000007cb <__c.3641>:
     7cb:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000007d7 <__c.3639>:
     7d7:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     7e7:	64 0a 00                                            d..

000007ea <__c.3637>:
     7ea:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     7fa:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

0000080a <__c.3635>:
     80a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000081a <__c.3622>:
     81a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000827 <__c.3594>:
     827:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     837:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000843 <__c.3666>:
     843:	0a 00                                               ..

00000845 <__c.3664>:
     845:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     855:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     865:	73 00                                               s.

00000867 <__c.3662>:
     867:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     877:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000882 <__c.3656>:
     882:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     892:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8a2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8b2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8c2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008cf <__c.3654>:
     8cf:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     8df:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     8ef:	30 34 58 0a 00                                      04X..

000008f4 <__c.3652>:
     8f4:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     904:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000912 <__c.3650>:
     912:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     922:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000931 <__c.3648>:
     931:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     941:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000950 <__c.3646>:
     950:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     960:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

0000096f <__c.3644>:
     96f:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     97f:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

0000098e <__c.3642>:
     98e:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     99e:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009ad <__c.3640>:
     9ad:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     9bd:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009cb <__c.3638>:
     9cb:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     9db:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009e9 <__c.3636>:
     9e9:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     9f9:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a08 <__c.3634>:
     a08:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a18:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a26 <__c.3632>:
     a26:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a37 <__c.3596>:
     a37:	72 63 3d 25 75 0a 00                                rc=%u..

00000a3e <__c.3632>:
     a3e:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a4e:	72 65 65 0a 00                                      ree..

00000a53 <__c.3630>:
     a53:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     a63:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a73:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000a7c <__c.3626>:
     a7c:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000a8a <__c.3613>:
     a8a:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a9a:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000aaa <__c.3611>:
     aaa:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000ab8 <__c.3609>:
     ab8:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     ac8:	73 74 0a 00                                         st..

00000acc <__c.3607>:
     acc:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000adc <__c.3605>:
     adc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aec:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000afc <__c.3589>:
     afc:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b0c:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b1c:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b2c:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b3c:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b4c:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b5c:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     b6c:	61 74 75 73 0a 0a 00                                atus...

00000b73 <__c.3587>:
     b73:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000b7f <__c.3919>:
     b7f:	25 73 0a 00                                         %s..

00000b83 <__c.3917>:
     b83:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000b8b <__c.3672>:
     b8b:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000b97 <__c.3601>:
     b97:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     ba7:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000baf <__c.3594>:
     baf:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     bbf:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bc7 <__c.3761>:
     bc7:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000bd2 <__c.3757>:
     bd2:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     be2:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     bf2:	68 0a 00                                            h..

00000bf5 <__c.3754>:
     bf5:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000c05 <__c.3749>:
     c05:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     c15:	5b 25 73 5d 0a 00                                   [%s]..

00000c1b <__c.3747>:
     c1b:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000c29 <__c.3745>:
     c29:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     c39:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000c4a <__c.3732>:
     c4a:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c5a:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c64 <__c.3727>:
     c64:	25 73 0a 00                                         %s..

00000c68 <__c.3725>:
     c68:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     c78:	0a 00                                               ..

00000c7a <__c.3713>:
     c7a:	0d 00                                               ..

00000c7c <__c.3711>:
     c7c:	4d 6f 72 65 2e 2e 00                                More...

00000c83 <__c.3701>:
     c83:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     c93:	2e 0a 00                                            ...

00000c96 <__c.3697>:
     c96:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000ca5 <__c.3694>:
     ca5:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000cb2 <__c.3692>:
     cb2:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000cbf <__c.3690>:
     cbf:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000ccf <__c.3688>:
     ccf:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000cdc <__c.3686>:
     cdc:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cec <__c.3684>:
     cec:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000cf8 <__c.3673>:
     cf8:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000d03 <__c.3671>:
     d03:	0a 00                                               ..

00000d05 <__c.3666>:
     d05:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d15 <__c.3656>:
     d15:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d26 <__c.3654>:
     d26:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d34 <__c.3652>:
     d34:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000d45 <__c.3650>:
     d45:	25 73 0a 00                                         %s..

00000d49 <__c.3647>:
     d49:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d5a <__c.3640>:
     d5a:	6c 73 3a 20 6e 75 6c 6c 20 61 72 67 75 6d 65 6e     ls: null argumen
     d6a:	74 20 23 20 25 64 0a 00                             t # %d..

00000d72 <__c.3636>:
     d72:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000d83 <__c.3620>:
     d83:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     d93:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     da3:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     db3:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     dc3:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     dd3:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     de3:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     df3:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     e03:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     e13:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     e23:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     e33:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     e43:	6e 65 77 0a 0a 00                                   new...

00000e49 <__c.3618>:
     e49:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000e55 <__c.3809>:
     e55:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000e63 <__c.3803>:
     e63:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000e70 <__c.3796>:
     e70:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000e7e <__c.3787>:
     e7e:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000e8b <__c.3778>:
     e8b:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000e9c <__c.3764>:
     e9c:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     eac:	5d 0a 00                                            ]..

00000eaf <__c.3746>:
     eaf:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     ebf:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000ecc <__c.4408>:
     ecc:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     edc:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     eec:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000ef4 <__c.4400>:
     ef4:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f04:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f0e <__c.4395>:
     f0e:	3c 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     <gpib_write_str 
     f1e:	74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67 20     timeout waiting 
     f2e:	66 6f 72 20 41 54 4e 20 3d 20 31 3e 0a 00           for ATN = 1>..

00000f3c <__c.4393>:
     f3c:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f4c:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f56 <__c.4383>:
     f56:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f66:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     f76:	28 25 64 29 5d 0a 00                                (%d)]..

00000f7d <__c.4379>:
     f7d:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     f8d:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     f9d:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000faa <__c.4376>:
     faa:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     fba:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000fc3 <__c.4360>:
     fc3:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000fce <__c.4358>:
     fce:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00000fd9 <__c.4356>:
     fd9:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00000fe4 <__c.4352>:
     fe4:	20 20 20 20 20 00                                        .

00000fea <__c.4350>:
     fea:	25 30 32 58 20 25 63 20 00                          %02X %c .

00000ff3 <__c.4324>:
     ff3:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    1003:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

00001011 <__c.4321>:
    1011:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    1021:	73 74 61 74 65 3d 25 64 0a 00                       state=%d..

0000102b <__c.4306>:
    102b:	3c 47 50 49 42 20 54 58 20 54 49 4d 45 4f 55 54     <GPIB TX TIMEOUT
    103b:	3e 0a 00                                            >..

0000103e <__c.4301>:
    103e:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    104e:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    105e:	20 66 6f 72 20 4e 44 41 43 3d 3d 31 3e 0a 00         for NDAC==1>..

0000106d <__c.4297>:
    106d:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    107d:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    108d:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    109d:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010a9 <__c.4293>:
    10a9:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    10b9:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10c9:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10d9:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010e5 <__c.4291>:
    10e5:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    10f5:	20 41 54 4e 20 3d 20 30 20 77 68 69 6c 65 20 77      ATN = 0 while w
    1105:	61 69 74 69 6e 67 20 66 6f 72 20 4e 52 46 44 20     aiting for NRFD 
    1115:	4c 4f 57 20 73 74 61 74 65 20 3d 25 64 0a 00        LOW state =%d..

00001124 <__c.4286>:
    1124:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1134:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

00001143 <__c.4283>:
    1143:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1153:	20 4b 45 59 20 73 74 61 74 65 3d 25 64 0a 00         KEY state=%d..

00001162 <__c.4268>:
    1162:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    1172:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    1182:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

00001190 <__c.4250>:
    1190:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    11a0:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011ab <__c.4248>:
    11ab:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    11bb:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    11cb:	72 61 6e 67 65 0a 00                                range..

000011d2 <__c.4243>:
    11d2:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    11e2:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011ed <__c.4241>:
    11ed:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    11fd:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    120d:	61 6e 67 65 0a 00                                   ange..

00001213 <__c.4236>:
    1213:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    1223:	5d 0a 00                                            ]..

00001226 <__c.4223>:
    1226:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

00001237 <__c.4400>:
    1237:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

00001248 <__c.4395>:
    1248:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    1258:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    1268:	32 58 48 5d 0a 00                                   2XH]..

0000126e <__c.4393>:
    126e:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    127e:	0a 00                                               ..

00001280 <__c.4391>:
    1280:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001291 <__c.4386>:
    1291:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

0000129d <__c.4384>:
    129d:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

000012ad <__c.4382>:
    12ad:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    12bd:	52 5d 0a 00                                         R]..

000012c1 <__c.4380>:
    12c1:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    12d1:	0a 00                                               ..

000012d3 <__c.4378>:
    12d3:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

000012e4 <__c.4376>:
    12e4:	5b 55 4e 54 5d 0a 00                                [UNT]..

000012eb <__c.4371>:
    12eb:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012f7 <__c.4369>:
    12f7:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    1307:	52 5d 0a 00                                         R]..

0000130b <__c.4367>:
    130b:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

0000131c <__c.4365>:
    131c:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    132c:	0a 00                                               ..

0000132e <__c.4363>:
    132e:	0a 00                                               ..

00001330 <__c.4361>:
    1330:	5b 55 4e 4c 5d 0a 00                                [UNL]..

00001337 <__c.4356>:
    1337:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    1347:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

00001358 <__c.4354>:
    1358:	5b 44 43 4c 5d 0a 00                                [DCL]..

0000135f <__c.4352>:
    135f:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

0000136c <__c.4350>:
    136c:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

00001378 <__c.4348>:
    1378:	5b 53 44 43 5d 0a 00                                [SDC]..

0000137f <__c.4346>:
    137f:	5b 53 50 44 5d 0a 00                                [SPD]..

00001386 <__c.4344>:
    1386:	5b 53 50 45 5d 0a 00                                [SPE]..

0000138d <__c.4342>:
    138d:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    139d:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013a5 <__c.4340>:
    13a5:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    13b5:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013bd <__c.4335>:
    13bd:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13cd:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

000013d7 <__c.4333>:
    13d7:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13e7:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

000013f8 <__c.4306>:
    13f8:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

00001409 <__c.4304>:
    1409:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

00001416 <__c.4302>:
    1416:	3c 42 55 53 3e 0a 00                                <BUS>..

0000141d <__c.4300>:
    141d:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

00001428 <__c.4298>:
    1428:	3c 49 46 43 3e 0a 00                                <IFC>..

0000142f <__c.4293>:
    142f:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    143f:	0a 00                                               ..

00001441 <__c.4291>:
    1441:	44 6f 6e 65 0a 00                                   Done..

00001447 <__c.4287>:
    1447:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00001453 <__c.4285>:
    1453:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1463:	20 65 78 69 74 0a 00                                 exit..

0000146a <__c.4283>:
    146a:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    147a:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    148a:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001495 <__c.4281>:
    1495:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    14a5:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

000014af <__c.4235>:
    14af:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    14bf:	6f 74 65 63 74 65 64 0a 00                          otected..

000014c8 <__c.4233>:
    14c8:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

000014d9 <__c.4231>:
    14d9:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    14e9:	0a 00                                               ..

000014eb <__c.4426>:
    14eb:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

000014f8 <__c.4418>:
    14f8:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    1508:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    1518:	69 62 20 61 64 64 72 65 73 73 65 73 0a 20 20 20     ib addresses.   
    1528:	44 69 73 70 6c 61 79 20 61 6c 6c 20 64 65 76 69     Display all devi
    1538:	63 65 20 47 50 49 42 20 62 75 73 20 61 64 64 72     ce GPIB bus addr
    1548:	65 73 73 65 73 20 61 6e 64 20 50 50 52 20 76 61     esses and PPR va
    1558:	6c 75 65 73 0a 67 70 69 62 20 63 6f 6e 66 69 67     lues.gpib config
    1568:	20 5b 2d 76 5d 0a 20 20 20 44 69 73 70 6c 61 79      [-v].   Display
    1578:	20 63 75 72 72 65 6e 74 20 64 72 69 76 65 73 20      current drives 
    1588:	63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 0a 20 20     configuration.  
    1598:	20 2d 76 20 56 65 72 62 6f 73 65 20 2d 20 73 68      -v Verbose - sh
    15a8:	6f 77 20 66 75 6c 6c 20 64 65 74 61 69 6c 0a 67     ow full detail.g
    15b8:	70 69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64     pib debug N.   d
    15c8:	65 62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70     ebug message rep
    15d8:	6f 72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73     orting see hpdis
    15e8:	6b 2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c     k.cfg for detail
    15f8:	73 0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67     s.gpib elapsed.g
    1608:	70 69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65     pib elapsed_rese
    1618:	74 0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20     t.gpib ifc.gpib 
    1628:	70 6c 6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78     plot filename.tx
    1638:	74 0a 67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f     t.gpib plot_echo
    1648:	0a 67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20     .gpib task.gpib 
    1658:	74 72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74     trace filename.t
    1668:	78 74 20 5b 42 55 53 5d 0a 20 20 20 44 69 73 70     xt [BUS].   Disp
    1678:	6c 61 79 20 61 63 74 69 76 69 74 79 20 6f 66 20     lay activity of 
    1688:	47 50 49 42 20 62 75 73 20 61 6e 64 20 6c 6f 67     GPIB bus and log
    1698:	20 69 74 0a 20 20 20 42 55 53 20 2d 20 69 6e 63      it.   BUS - inc
    16a8:	6c 75 64 65 20 68 61 6e 64 73 68 61 6b 65 20 73     lude handshake s
    16b8:	74 61 74 65 73 0a 0a 0a 00                          tates....

000016c1 <__c.4416>:
    16c1:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

000016cc <__c.4837>:
    16cc:	0a 00                                               ..

000016ce <__c.4832>:
    16ce:	25 2d 31 36 73 20 20 20 20 20 20 20 25 32 64 0a     %-16s       %2d.
	...

000016df <__c.4830>:
    16df:	25 2d 31 36 73 20 41 4d 49 47 4f 20 25 32 64 20     %-16s AMIGO %2d 
    16ef:	25 73 0a 00                                         %s..

000016f3 <__c.4828>:
    16f3:	25 2d 31 36 73 20 53 53 38 30 20 20 25 32 64 20     %-16s SS80  %2d 
    1703:	25 73 0a 00                                         %s..

00001707 <__c.4816>:
    1707:	61 72 67 76 5b 25 64 5d 20 3d 20 25 73 0a 00        argv[%d] = %s..

00001716 <__c.4806>:
    1716:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

0000171e <__c.4804>:
    171e:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    172e:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001738 <__c.4802>:
    1738:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1748:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1758:	0a 00                                               ..

0000175a <__c.4800>:
    175a:	53 53 38 30 2d 25 64 00                             SS80-%d.

00001762 <__c.4798>:
    1762:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1772:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

0000177c <__c.4796>:
    177c:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    178c:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    179c:	0a 00                                               ..

0000179e <__c.4779>:
    179e:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    17ae:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    17be:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    17ce:	6f 20 32 35 36 0a 00                                o 256..

000017d5 <__c.4777>:
    17d5:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    17e5:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    17f5:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1805:	20 32 35 36 0a 00                                    256..

0000180b <__c.4764>:
    180b:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    181b:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

0000182a <__c.4728>:
    182a:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    183a:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    184a:	0a 00                                               ..

0000184c <__c.4720>:
    184c:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    185c:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    186c:	6c 6c 0a 00                                         ll..

00001870 <__c.4707>:
    1870:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1880:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1890:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

0000189b <__c.4705>:
    189b:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    18ab:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    18bb:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    18cb:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

000018d3 <__c.4703>:
    18d3:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    18e3:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    18f3:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1903:	3a 25 73 0a 00                                      :%s..

00001908 <__c.4701>:
    1908:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1918:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1928:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1938:	55 4c 4c 0a 00                                      ULL..

0000193d <__c.4699>:
    193d:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    194d:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    195d:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    196d:	66 20 72 61 6e 67 65 0a 00                          f range..

00001976 <__c.4697>:
    1976:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1986:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1996:	6e 67 65 0a 00                                      nge..

0000199b <__c.4658>:
    199b:	0a 00                                               ..

0000199d <__c.4653>:
    199d:	0a 00                                               ..

0000199f <__c.4651>:
    199f:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    19af:	6c 64 0a 00                                         ld..

000019b3 <__c.4649>:
    19b3:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    19c3:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

000019d2 <__c.4647>:
    19d2:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

000019dc <__c.4645>:
    19dc:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    19ec:	6c 64 0a 00                                         ld..

000019f0 <__c.4643>:
    19f0:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1a00:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001a0f <__c.4641>:
    1a0f:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001a18 <__c.4638>:
    1a18:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1a28:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001a38 <__c.4629>:
    1a38:	0a 00                                               ..

00001a3a <__c.4624>:
    1a3a:	0a 00                                               ..

00001a3c <__c.4622>:
    1a3c:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00001a45 <__c.4620>:
    1a45:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001a4f <__c.4618>:
    1a4f:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001a58 <__c.4615>:
    1a58:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    1a68:	0a 00                                               ..

00001a6a <__c.4609>:
    1a6a:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1a7a:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1a8a:	2a 2a 2a 2a 2a 0a 00                                *****..

00001a91 <__c.4607>:
    1a91:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1aa1:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001aae <__c.4605>:
    1aae:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1abe:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1ace:	0a 00                                               ..

00001ad0 <__c.4601>:
    1ad0:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1ae0:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1af0:	0a 00                                               ..

00001af2 <__c.4598>:
    1af2:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b02:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1b12:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001b22 <__c.4589>:
    1b22:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b32:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1b42:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001b51 <__c.4586>:
    1b51:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1b61:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1b71:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001b81 <__c.4577>:
    1b81:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b91:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1ba1:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001baf <__c.4569>:
    1baf:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bbf:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1bcf:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001bdd <__c.4559>:
    1bdd:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bed:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1bfd:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001c09 <__c.4542>:
    1c09:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c19:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1c29:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1c39:	0a 00                                               ..

00001c3b <__c.4534>:
    1c3b:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c4b:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1c5b:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001c69 <__c.4531>:
    1c69:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c79:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1c89:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001c97 <__c.4523>:
    1c97:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1ca7:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1cb7:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001cc4 <__c.4513>:
    1cc4:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1cd4:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1ce4:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001cf5 <__c.4510>:
    1cf5:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1d05:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1d15:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001d1f <__c.4506>:
    1d1f:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1d2f:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1d3f:	0a 00                                               ..

00001d41 <__c.4495>:
    1d41:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1d51:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1d61:	0a 00                                               ..

00001d63 <__c.4492>:
    1d63:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1d73:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001d81 <__c.4490>:
    1d81:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001d8e <__c.4471>:
    1d8e:	25 73 0a 00                                         %s..

00001d92 <__c.4461>:
    1d92:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

00001d9e <__c.4450>:
    1d9e:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    1dae:	6c 64 29 0a 00                                      ld)..

00001db3 <__c.3643>:
    1db3:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001dc4 <__c.3641>:
    1dc4:	25 73 20 25 73 0a 00                                %s %s..

00001dcb <__c.3637>:
    1dcb:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    1ddb:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00001de8 <__c.4543>:
    1de8:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1df8:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1e08:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1e18:	48 5d 0a 00                                         H]..

00001e1c <__c.4541>:
    1e1c:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1e2c:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1e3c:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1e4c:	48 5d 0a 00                                         H]..

00001e50 <__c.4539>:
    1e50:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1e60:	74 5d 0a 00                                         t]..

00001e64 <__c.4537>:
    1e64:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001e73 <__c.4535>:
    1e73:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    1e83:	74 65 5d 0a 00                                      te]..

00001e88 <__c.4533>:
    1e88:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    1e98:	61 74 65 5d 0a 00                                   ate]..

00001e9e <__c.4531>:
    1e9e:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    1eae:	61 74 65 5d 0a 00                                   ate]..

00001eb4 <__c.4526>:
    1eb4:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    1ec4:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    1ed4:	5d 0a 00                                            ]..

00001ed7 <__c.4512>:
    1ed7:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001ee6 <__c.4510>:
    1ee6:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1ef6:	5d 0a 00                                            ]..

00001ef9 <__c.4503>:
    1ef9:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00001f05 <__c.4489>:
    1f05:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    1f15:	5d 0a 00                                            ]..

00001f18 <__c.4487>:
    1f18:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    1f28:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00001f32 <__c.4480>:
    1f32:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    1f42:	48 5d 0a 00                                         H]..

00001f46 <__c.4478>:
    1f46:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    1f56:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

00001f66 <__c.4473>:
    1f66:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1f76:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    1f86:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    1f96:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00001fa2 <__c.4470>:
    1fa2:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1fb2:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001fc2 <__c.4468>:
    1fc2:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    1fd2:	29 5d 0a 00                                         )]..

00001fd6 <__c.4466>:
    1fd6:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    1fe6:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    1ff6:	28 25 64 29 5d 0a 00                                (%d)]..

00001ffd <__c.4464>:
    1ffd:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    200d:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

0000201b <__c.4462>:
    201b:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    202b:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00002038 <__c.4459>:
    2038:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    2048:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    2058:	44 4f 5d 0a 00                                      DO]..

0000205d <__c.4456>:
    205d:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    206d:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002076 <__c.4454>:
    2076:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    2086:	5d 0a 00                                            ]..

00002089 <__c.4445>:
    2089:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    2099:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    20a9:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    20b9:	43 6f 64 65 73 5d 0a 00                             Codes]..

000020c1 <__c.4442>:
    20c1:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    20d1:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

000020e1 <__c.4440>:
    20e1:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    20f1:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    2101:	5d 0a 00                                            ]..

00002104 <__c.4438>:
    2104:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    2114:	61 74 75 73 5d 0a 00                                atus]..

0000211b <__c.4436>:
    211b:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    212b:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00002134 <__c.4434>:
    2134:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    2144:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

0000214f <__c.4432>:
    214f:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    215f:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

0000216e <__c.4430>:
    216e:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    217e:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

0000218c <__c.4428>:
    218c:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

0000219d <__c.4426>:
    219d:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    21ad:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

000021b9 <__c.4424>:
    21b9:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    21c9:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

000021d6 <__c.4422>:
    21d6:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    21e6:	2d 4f 50 5d 0a 00                                   -OP]..

000021ec <__c.4420>:
    21ec:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    21fc:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

0000220d <__c.4418>:
    220d:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    221d:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    222d:	44 4f 5d 0a 00                                      DO]..

00002232 <__c.4416>:
    2232:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    2242:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

0000224c <__c.4414>:
    224c:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    225c:	2d 4f 50 5d 0a 00                                   -OP]..

00002262 <__c.4412>:
    2262:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

00002270 <__c.4410>:
    2270:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    2280:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

0000228c <__c.4408>:
    228c:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    229c:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

000022a9 <__c.4406>:
    22a9:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    22b9:	20 57 72 69 74 65 5d 0a 00                           Write]..

000022c2 <__c.4403>:
    22c2:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    22d2:	20 52 65 61 64 5d 0a 00                              Read]..

000022da <__c.4401>:
    22da:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    22ea:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

000022f3 <__c.4398>:
    22f3:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    2303:	25 64 29 5d 0a 00                                   %d)]..

00002309 <__c.4396>:
    2309:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2319:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002322 <__c.4394>:
    2322:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2332:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    2342:	52 4f 52 5d 0a 00                                   ROR]..

00002348 <__c.4385>:
    2348:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    2358:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

00002362 <__c.4380>:
    2362:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    2372:	76 61 6c 69 64 5d 0a 00                             valid]..

0000237a <__c.4375>:
    237a:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    238a:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

00002399 <__c.4373>:
    2399:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    23a9:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

000023b6 <__c.4371>:
    23b6:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    23c6:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    23d6:	5d 0a 00                                            ]..

000023d9 <__c.4369>:
    23d9:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000023ea <__c.4361>:
    23ea:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    23fa:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

00002405 <__c.4359>:
    2405:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2415:	73 5d 0a 00                                         s]..

00002419 <__c.4349>:
    2419:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

00002424 <__c.4347>:
    2424:	25 73 3a 0a 00                                      %s:..

00002429 <__c.4322>:
    2429:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2439:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    2449:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

00002454 <__c.4320>:
    2454:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2464:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    2474:	49 4e 49 53 48 5d 0a 00                             INISH]..

0000247c <__c.4316>:
    247c:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    248c:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    249c:	58 48 29 5d 0a 00                                   XH)]..

000024a2 <__c.4314>:
    24a2:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    24b2:	72 5d 0a 00                                         r]..

000024b6 <__c.4310>:
    24b6:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    24c6:	5d 0a 00                                            ]..

000024c9 <__c.4308>:
    24c9:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    24d9:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    24e9:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

000024f2 <__c.4296>:
    24f2:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2502:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    2512:	62 79 74 65 73 5d 0a 00                             bytes]..

0000251a <__c.4294>:
    251a:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    252a:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    253a:	53 48 5d 0a 00                                      SH]..

0000253f <__c.4289>:
    253f:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    254f:	20 45 72 72 6f 72 5d 0a 00                           Error]..

00002558 <__c.4287>:
    2558:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2568:	45 72 72 6f 72 5d 0a 00                             Error]..

00002570 <__c.4285>:
    2570:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2580:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

0000258e <__c.4283>:
    258e:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    259e:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    25ae:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

000025b6 <__c.4266>:
    25b6:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    25c6:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

000025d2 <__c.4250>:
    25d2:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    25e2:	5d 0a 00                                            ]..

000025e5 <__c.4366>:
    25e5:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    25f5:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    2605:	64 64 72 65 73 73 5d 0a 00                          ddress]..

0000260e <__c.4363>:
    260e:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    261e:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    262e:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

00002639 <__c.4360>:
    2639:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2649:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    2659:	66 66 65 72 65 64 5d 0a 00                          ffered]..

00002662 <__c.4355>:
    2662:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2672:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

00002682 <__c.4352>:
    2682:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    2692:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

0000269e <__c.4349>:
    269e:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    26ae:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    26be:	0a 00                                               ..

000026c0 <__c.4346>:
    26c0:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    26d0:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

000026df <__c.4343>:
    26df:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    26ef:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

00002700 <__c.4340>:
    2700:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2710:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002720 <__c.4336>:
    2720:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    2730:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2740:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2750:	0a 00                                               ..

00002752 <__c.4331>:
    2752:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002762 <__c.4328>:
    2762:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2772:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002781 <__c.4326>:
    2781:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2791:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    27a1:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

000027ac <__c.4324>:
    27ac:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    27bc:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

000027cc <__c.4322>:
    27cc:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    27dc:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    27ec:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000027f5 <__c.4320>:
    27f5:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2805:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002811 <__c.4318>:
    2811:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2821:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2831:	0a 00                                               ..

00002833 <__c.4316>:
    2833:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002843 <__c.4313>:
    2843:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2853:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002864 <__c.4311>:
    2864:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2874:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2884:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

0000288d <__c.4309>:
    288d:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    289d:	36 5d 0a 00                                         6]..

000028a1 <__c.4306>:
    28a1:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    28b1:	35 5d 0a 00                                         5]..

000028b5 <__c.4303>:
    28b5:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    28c5:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

000028d5 <__c.4300>:
    28d5:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    28e5:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    28f5:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002904 <__c.4298>:
    2904:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2914:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002925 <__c.4296>:
    2925:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2935:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002946 <__c.4294>:
    2946:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2956:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2966:	0a 00                                               ..

00002968 <__c.4292>:
    2968:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2978:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2988:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2998:	0a 00                                               ..

0000299a <__c.4280>:
    299a:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    29aa:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    29ba:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    29ca:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    29da:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

000029eb <__c.4278>:
    29eb:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    29fb:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a0b:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2a1b:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2a2b:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002a3b <__c.4276>:
    2a3b:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2a4b:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a5b:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2a6b:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2a7b:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002a8b <__c.4274>:
    2a8b:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2a9b:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2aab:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2abb:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2acb:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002adb <__c.4269>:
    2adb:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2aeb:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2afb:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2b0b:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2b1b:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2b2b:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2b3b:	58 48 5d 0a 00                                      XH]..

00002b40 <__c.4267>:
    2b40:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2b50:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2b60:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2b70:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2b80:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2b90:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2ba0:	30 32 58 48 5d 0a 00                                02XH]..

00002ba7 <__c.4265>:
    2ba7:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2bb7:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2bc7:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2bd7:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2be7:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2bf7:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2c07:	30 32 58 48 5d 0a 00                                02XH]..

00002c0e <__c.4263>:
    2c0e:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2c1e:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2c2e:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2c3e:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2c4e:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2c5e:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2c6e:	30 32 58 48 5d 0a 00                                02XH]..

00002c75 <__c.4256>:
    2c75:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002c84 <__c.4243>:
    2c84:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002c91 <__c.4241>:
    2c91:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2ca1:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002cab <__c.4234>:
    2cab:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 64 69 73     [AMIGO Write dis
    2cbb:	6b 20 77 72 69 74 65 20 65 72 72 6f 72 5d 0a 00     k write error]..

00002ccb <__c.4232>:
    2ccb:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2cdb:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002cea <__c.4230>:
    2cea:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2cfa:	0a 00                                               ..

00002cfc <__c.4223>:
    2cfc:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2d0c:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002d16 <__c.4217>:
    2d16:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2d26:	0a 00                                               ..

00002d28 <__c.4211>:
    2d28:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2d38:	6e 65 5d 0a 00                                      ne]..

00002d3d <__c.4207>:
    2d3d:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002d4d <__c.4166>:
    2d4d:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2d5d:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2d6d:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002d78 <__c.4196>:
    2d78:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2d88:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2d98:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002da0 <__c.4173>:
    2da0:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2db0:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002db9 <__c.4159>:
    2db9:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2dc9:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002dd3 <__c.4157>:
    2dd3:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2de3:	75 73 5d 0a 00                                      us]..

00002de8 <__c.4151>:
    2de8:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2df8:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002e02 <__c.4149>:
    2e02:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2e12:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002e20 <__c.4143>:
    2e20:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2e30:	74 61 74 75 73 5d 0a 00                             tatus]..

00002e38 <__c.4128>:
    2e38:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    2e48:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00002e52 <__c.4126>:
    2e52:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2e62:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00002e6e <__c.4121>:
    2e6e:	25 30 38 6c 64 0d 00                                %08ld..

00002e75 <__c.4115>:
    2e75:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2e85:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002e96 <__c.4109>:
    2e96:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00002ea4 <__c.4107>:
    2ea4:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    2eb4:	69 74 65 0a 00                                      ite..

00002eb9 <__c.4101>:
    2eb9:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00002ec5 <__c.4099>:
    2ec5:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    2ed5:	6f 3a 25 73 0a 00                                   o:%s..

00002edb <__c.4097>:
    2edb:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    2eeb:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    2efb:	74 00                                               t.

00002efd <__c.4553>:
    2efd:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    2f0d:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

00002f1d <__c.4551>:
    2f1d:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f2d:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00002f3d <__c.4549>:
    2f3d:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f4d:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    2f5d:	30 0a 00                                            0..

00002f60 <__c.4547>:
    2f60:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f70:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    2f80:	70 74 79 0a 00                                      pty..

00002f85 <__c.4545>:
    2f85:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f95:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    2fa5:	73 20 65 6d 70 74 79 0a 00                          s empty..

00002fae <__c.4532>:
    2fae:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    2fbe:	20 25 31 30 73 0a 00                                 %10s..

00002fc5 <__c.4530>:
    2fc5:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    2fd5:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    2fe5:	74 20 66 6f 75 6e 64 0a 00                          t found..

00002fee <__c.4528>:
    2fee:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2ffe:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    300e:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    301e:	74 65 72 73 0a 00                                   ters..

00003024 <__c.4526>:
    3024:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3034:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    3044:	65 6d 70 74 79 0a 00                                empty..

0000304b <__c.4524>:
    304b:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    305b:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    306b:	65 6d 70 74 79 0a 00                                empty..

00003072 <__c.4522>:
    3072:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3082:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    3092:	20 65 6d 70 74 79 0a 00                              empty..

0000309a <__c.4513>:
    309a:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

000030a9 <__c.4511>:
    30a9:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    30b9:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    30c9:	20 66 6f 75 6e 64 0a 00                              found..

000030d1 <__c.4509>:
    30d1:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    30e1:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

000030f0 <__c.4507>:
    30f0:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3100:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

00003110 <__c.4505>:
    3110:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3120:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    3130:	70 74 79 0a 00                                      pty..

00003135 <__c.4497>:
    3135:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003143 <__c.4492>:
    3143:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003151 <__c.4490>:
    3151:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3161:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3171:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003181 <__c.4488>:
    3181:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3191:	73 0a 00                                            s..

00003194 <__c.4486>:
    3194:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    31a4:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    31b4:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000031c3 <__c.4484>:
    31c3:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    31d3:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

000031df <__c.4482>:
    31df:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    31ef:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

000031fa <__c.4480>:
    31fa:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    320a:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

0000321a <__c.4463>:
    321a:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003228 <__c.4458>:
    3228:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003236 <__c.4456>:
    3236:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3246:	73 0a 00                                            s..

00003249 <__c.4454>:
    3249:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3259:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003261 <__c.4437>:
    3261:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000326f <__c.4434>:
    326f:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    327f:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    328f:	20 65 72 72 6f 72 0a 00                              error..

00003297 <__c.4426>:
    3297:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000032a5 <__c.4424>:
    32a5:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    32b5:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    32c5:	20 65 72 72 6f 72 0a 00                              error..

000032cd <__c.4421>:
    32cd:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    32dd:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    32ed:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    32fd:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    330d:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    331d:	30 32 58 48 0a 00                                   02XH..

00003323 <__c.4419>:
    3323:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3333:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    3343:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    3353:	20 25 64 0a 00                                       %d..

00003358 <__c.4415>:
    3358:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003368 <__c.4413>:
    3368:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    3378:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    3388:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    3398:	30 78 45 30 31 33 0a 00                             0xE013..

000033a0 <__c.4411>:
    33a0:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    33b0:	6e 64 3a 25 73 0a 00                                nd:%s..

000033b7 <__c.4409>:
    33b7:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    33c7:	75 6e 64 3a 25 73 0a 00                             und:%s..

000033cf <__c.4385>:
    33cf:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000033dd <__c.4383>:
    33dd:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    33ed:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000033f6 <__c.4381>:
    33f6:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    3406:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000340f <__c.4379>:
    340f:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    341f:	20 20 25 34 64 0a 00                                  %4d..

00003426 <__c.4377>:
    3426:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3436:	20 20 20 25 73 0a 00                                   %s..

0000343d <__c.4375>:
    343d:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    344d:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    345d:	77 72 69 74 65 0a 00                                write..

00003464 <__c.4373>:
    3464:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3474:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3484:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003494 <__c.4371>:
    3494:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34a4:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    34b4:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000034c3 <__c.4369>:
    34c3:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    34d3:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    34e3:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

000034f3 <__c.4367>:
    34f3:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3503:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3513:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

00003522 <__c.4365>:
    3522:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3532:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    3542:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003550 <__c.4363>:
    3550:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3560:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    3570:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    3580:	79 0a 00                                            y..

00003583 <__c.4349>:
    3583:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003591 <__c.4347>:
    3591:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000359f <__c.4342>:
    359f:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000035ad <__c.4325>:
    35ad:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    35bd:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    35cd:	25 64 0a 00                                         %d..

000035d1 <__c.4308>:
    35d1:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    35e1:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    35f1:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    3601:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

0000360a <__c.4294>:
    360a:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    361a:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    362a:	62 69 67 0a 00                                      big..

0000362f <__c.4292>:
    362f:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    363f:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    364f:	63 74 65 72 73 0a 00                                cters..

00003656 <__c.4285>:
    3656:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    3666:	73 0a 00                                            s..

00003669 <__c.4283>:
    3669:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3679:	73 0a 00                                            s..

0000367c <__c.4281>:
    367c:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    368c:	73 0a 00                                            s..

0000368f <__c.4279>:
    368f:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

000036a0 <__c.4277>:
    36a0:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

000036ad <__c.4275>:
    36ad:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000036b9 <__c.4273>:
    36b9:	0a 00                                               ..

000036bb <__c.4270>:
    36bb:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    36cb:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    36db:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

000036eb <__c.4268>:
    36eb:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    36fb:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    370b:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    371b:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    372b:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003737 <__c.4265>:
    3737:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3747:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3757:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3767:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003777 <__c.4263>:
    3777:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3787:	3a 5b 25 73 5d 0a 00                                :[%s]..

0000378e <__c.4253>:
    378e:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    379e:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    37ae:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    37be:	64 0a 00                                            d..

000037c1 <__c.4251>:
    37c1:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    37d1:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    37e1:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    37f1:	64 0a 00                                            d..

000037f4 <__c.4249>:
    37f4:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3804:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3814:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3824:	69 6c 65 64 0a 00                                   iled..

0000382a <__c.4247>:
    382a:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    383a:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    384a:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    385a:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003869 <__c.4234>:
    3869:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3879:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3889:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3899:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    38a9:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

000038ba <__c.4231>:
    38ba:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    38ca:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    38da:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

000038e3 <__c.4229>:
    38e3:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    38f3:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3903:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3913:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

0000391b <__c.4217>:
    391b:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    392b:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    393b:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    394b:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    395b:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003968 <__c.4192>:
    3968:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3978:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003988 <__c.4183>:
    3988:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3998:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    39a8:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    39b8:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

000039c2 <__c.4164>:
    39c2:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

000039cf <__c.4159>:
    39cf:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000039dc <__c.4154>:
    39dc:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000039e9 <__c.4146>:
    39e9:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000039f6 <__c.4144>:
    39f6:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3a06:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3a16:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3a26:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3a36:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3a46:	25 6c 64 0a 00                                      %ld..

00003a4b <__c.4128>:
    3a4b:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a5b:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3a6b:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003a77 <__c.4126>:
    3a77:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a87:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3a97:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003aa2 <__c.4124>:
    3aa2:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ab2:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3ac2:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3ad2:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3ae2:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003aed <__c.4122>:
    3aed:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3afd:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3b0d:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3b1d:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3b2d:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003b38 <__c.4120>:
    3b38:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b48:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3b58:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003b66 <__c.4118>:
    3b66:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b76:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3b86:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3b96:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003ba7 <__c.4116>:
    3ba7:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3bb7:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3bc7:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3bd7:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3be7:	58 68 0a 00                                         Xh..

00003beb <__c.4114>:
    3beb:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3bfb:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003c0c <__c.4108>:
    3c0c:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c1c:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3c2c:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003c38 <__c.4106>:
    3c38:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c48:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3c58:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003c67 <__c.4104>:
    3c67:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c77:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3c87:	25 6c 64 0a 00                                      %ld..

00003c8c <__c.4102>:
    3c8c:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c9c:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3cac:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3cbc:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003cc5 <__c.4100>:
    3cc5:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3cd5:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3ce5:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3cf5:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003cfe <__c.4098>:
    3cfe:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3d0e:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003d16 <__c.4096>:
    3d16:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d26:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3d36:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3d46:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003d4f <__c.4094>:
    3d4f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d5f:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003d6e <__c.4087>:
    3d6e:	0a 00                                               ..

00003d70 <__c.4085>:
    3d70:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3d80:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003d8a <__c.4083>:
    3d8a:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    3d9a:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00003da6 <__c.4081>:
    3da6:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    3db6:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003dc3 <__c.4079>:
    3dc3:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    3dd3:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003de0 <__c.4077>:
    3de0:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    3df0:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003dfd <__c.4075>:
    3dfd:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    3e0d:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00003e19 <__c.4073>:
    3e19:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    3e29:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e35 <__c.4071>:
    3e35:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    3e45:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e4f <__c.4069>:
    3e4f:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    3e5f:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e69 <__c.4067>:
    3e69:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    3e79:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e85 <__c.4065>:
    3e85:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    3e95:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003ea1 <__c.4063>:
    3ea1:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    3eb1:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ebe <__c.4061>:
    3ebe:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    3ece:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003edb <__c.4059>:
    3edb:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    3eeb:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003ef7 <__c.4057>:
    3ef7:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    3f07:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003f11 <__c.4055>:
    3f11:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    3f21:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f2e <__c.4053>:
    3f2e:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    3f3e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f4b <__c.4051>:
    3f4b:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    3f5b:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f68 <__c.4049>:
    3f68:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    3f78:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f85 <__c.4047>:
    3f85:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    3f95:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003fa2 <__c.4045>:
    3fa2:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    3fb2:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fbf <__c.4043>:
    3fbf:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    3fcf:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fdc <__c.4041>:
    3fdc:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    3fec:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ff9 <__c.4039>:
    3ff9:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    4009:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004013 <__c.4037>:
    4013:	0a 25 73 0a 00                                      .%s..

00004018 <__c.3914>:
    4018:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    4028:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4038:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4048:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00004055 <__c.3905>:
    4055:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    4065:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    4075:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    4085:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

00004091 <__c.3896>:
    4091:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    40a1:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

000040b2 <__c.3889>:
    40b2:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    40c2:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

000040cb <__c.3883>:
    40cb:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    40db:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    40eb:	25 73 5d 0a 00                                      %s]..

000040f0 <__c.3871>:
    40f0:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    4100:	6f 69 6e 74 65 72 0a 00                             ointer..

00004108 <__c.3866>:
    4108:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    4118:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    4128:	20 6d 65 6d 6f 72 79 0a 00                           memory..

00004131 <__c.3860>:
    4131:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    4141:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

00004152 <__c.3847>:
    4152:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    4162:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    4172:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    4182:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    4192:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    41a2:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    41b2:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    41c2:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    41d2:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    41e2:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    41f2:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    4202:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    4212:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    4222:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    4232:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    4242:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    4252:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    4262:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    4272:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    4282:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    4292:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    42a2:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    42b2:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    42c2:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    42d2:	6d 65 0a 55 73 65 20 2d 64 20 20 61 66 74 65 72     me.Use -d  after
    42e2:	20 27 6c 69 66 27 20 6b 65 79 77 6f 72 64 20 74      'lif' keyword t
    42f2:	6f 20 65 6e 61 62 6c 65 20 4c 49 46 20 66 69 6c     o enable LIF fil
    4302:	65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69 6e     esystem debuggin
    4312:	67 0a 0a 00                                         g...

00004316 <__c.3845>:
    4316:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

00004320 <__c.4602>:
    4320:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    4330:	53 4b 0a 00                                         SK..

00004334 <__c.4600>:
    4334:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4344:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

0000434e <__c.4598>:
    434e:	25 2d 31 36 73 00                                   %-16s.

00004354 <__c.4596>:
    4354:	25 2d 31 36 73 00                                   %-16s.

0000435a <__c.4594>:
    435a:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

0000436b <__c.4592>:
    436b:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    437b:	30 34 78 48 0a 00                                   04xH..

00004381 <__c.4590>:
    4381:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    4391:	64 6f 6e 65 0a 00                                   done..

00004397 <__c.4588>:
    4397:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    43a7:	6f 6e 65 0a 00                                      one..

000043ac <__c.4586>:
    43ac:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    43bc:	61 6c 69 7a 65 64 0a 00                             alized..

000043c4 <__c.4584>:
    43c4:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    43d4:	0a 00                                               ..

000043d6 <__c.4582>:
    43d6:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    43e6:	7a 65 64 0a 00                                      zed..

000043eb <__c.4580>:
    43eb:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    43fb:	69 7a 65 64 0a 00                                   ized..

00004401 <__c.4578>:
    4401:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

00004412 <__c.4576>:
    4412:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    4422:	20 73 74 61 72 74 0a 00                              start..

0000442a <__c.4574>:
    442a:	53 79 73 74 65 6d 20 54 61 73 6b 20 49 6e 74 65     System Task Inte
    443a:	72 72 75 70 74 20 52 61 74 65 3a 20 25 6c 64 20     rrupt Rate: %ld 
    444a:	4e 61 6e 6f 20 53 65 63 6f 6e 64 73 0a 00           Nano Seconds..

00004458 <__c.4572>:
    4458:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

00004467 <__c.4570>:
    4467:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    4477:	0a 00                                               ..

00004479 <__c.4568>:
    4479:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    4489:	20 62 75 73 0a 00                                    bus..

0000448f <__c.4566>:
    448f:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    449f:	20 62 75 73 0a 00                                    bus..

000044a5 <__c.4564>:
    44a5:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    44b5:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000044bf <__c.4562>:
    44bf:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    44cf:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000044d9 <__c.4560>:
    44d9:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    44e9:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    44f9:	35 64 69 73 6b 0a 00                                5disk..

00004500 <__c.4558>:
    4500:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004510 <__c.4556>:
    4510:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    4520:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000452d <__c.4554>:
    452d:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    453d:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

0000454c <__c.4552>:
    454c:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    455c:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    456c:	3a 20 25 6c 64 0a 00                                : %ld..

00004573 <__c.4550>:
    4573:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004584 <__c.4548>:
    4584:	53 74 61 72 74 0a 00                                Start..

0000458b <__c.4539>:
    458b:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

00004597 <__c.4537>:
    4597:	4f 4b 0a 00                                         OK..

0000459b <__c.4531>:
    459b:	20 20 20 5b 25 73 5d 0a 00                             [%s]..

000045a4 <__c.4529>:
    45a4:	20 20 20 61 72 67 63 20 3d 20 25 64 0a 00              argc = %d..

000045b2 <__c.4527>:
    45b2:	41 72 67 75 6d 65 6e 74 73 3a 0a 00                 Arguments:..

000045be <__c.4525>:
    45be:	0a 3e 00                                            .>.

000045c1 <__c.4513>:
    45c1:	62 61 63 6b 6c 69 67 68 74 20 30 78 52 52 47 47     backlight 0xRRGG
    45d1:	42 42 0a 68 65 6c 70 0a 69 6e 70 75 74 0a 20 20     BB.help.input.  
    45e1:	20 2d 20 74 6f 67 67 6c 65 20 69 6e 70 75 74 20      - toggle input 
    45f1:	64 65 62 75 67 67 69 6e 67 0a 6d 65 6d 0a 20 20     debugging.mem.  
    4601:	20 2d 20 64 69 73 70 6c 61 79 20 66 72 65 65 20      - display free 
    4611:	6d 65 6d 6f 72 79 0a 72 65 73 65 74 0a 20 20 20     memory.reset.   
    4621:	2d 20 72 65 73 65 74 20 65 6d 75 6c 61 74 6f 72     - reset emulator
    4631:	0a 73 65 74 64 61 74 65 0a 20 20 20 2d 20 73 65     .setdate.   - se
    4641:	74 20 64 61 74 65 0a 74 69 6d 65 0a 20 20 20 2d     t date.time.   -
    4651:	20 64 69 73 70 6c 61 79 20 63 75 72 72 65 6e 74      display current
    4661:	20 74 69 6d 65 0a 0a 00                              time...

00004669 <__c.4506>:
    4669:	25 2d 31 36 73 00                                   %-16s.

0000466f <__c.4504>:
    466f:	25 2d 31 36 73 00                                   %-16s.

00004675 <__c.4497>:
    4675:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4685:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

0000468f <__c.4495>:
    468f:	25 2d 31 36 73 00                                   %-16s.

00004695 <__c.4493>:
    4695:	25 2d 31 36 73 00                                   %-16s.

0000469b <__c.4491>:
    469b:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    46ab:	69 6c 65 64 0a 00                                   iled..

000046b1 <__c.4489>:
    46b1:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    46c1:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

000046cf <__c.4483>:
    46cf:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    46df:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

000046e9 <__c.4477>:
    46e9:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    46f9:	3a 25 30 32 64 00                                   :%02d.

000046ff <__c.4463>:
    46ff:	0a 00                                               ..

00004701 <__c.4461>:
    4701:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4711:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

0000471b <__c.4459>:
    471b:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    472b:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004735 <__c.4457>:
    4735:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4745:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4755:	35 64 69 73 6b 0a 00                                5disk..

0000475c <__c.4455>:
    475c:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

0000476c <__c.4453>:
    476c:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    477c:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004789 <__c.4451>:
    4789:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4799:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000047a8 <__c.4449>:
    47a8:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    47b8:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    47c8:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..

000047d8 <__ctors_end>:
    47d8:	11 24       	eor	r1, r1
    47da:	1f be       	out	0x3f, r1	; 63
    47dc:	cf ef       	ldi	r28, 0xFF	; 255
    47de:	d0 e4       	ldi	r29, 0x40	; 64
    47e0:	de bf       	out	0x3e, r29	; 62
    47e2:	cd bf       	out	0x3d, r28	; 61

000047e4 <__do_copy_data>:
    47e4:	17 e1       	ldi	r17, 0x17	; 23
    47e6:	a0 e0       	ldi	r26, 0x00	; 0
    47e8:	b1 e0       	ldi	r27, 0x01	; 1
    47ea:	ee e7       	ldi	r30, 0x7E	; 126
    47ec:	fe ec       	ldi	r31, 0xCE	; 206
    47ee:	01 e0       	ldi	r16, 0x01	; 1
    47f0:	0b bf       	out	0x3b, r16	; 59
    47f2:	02 c0       	rjmp	.+4      	; 0x47f8 <__do_copy_data+0x14>
    47f4:	07 90       	elpm	r0, Z+
    47f6:	0d 92       	st	X+, r0
    47f8:	ac 34       	cpi	r26, 0x4C	; 76
    47fa:	b1 07       	cpc	r27, r17
    47fc:	d9 f7       	brne	.-10     	; 0x47f4 <__do_copy_data+0x10>

000047fe <__do_clear_bss>:
    47fe:	21 e2       	ldi	r18, 0x21	; 33
    4800:	ac e4       	ldi	r26, 0x4C	; 76
    4802:	b7 e1       	ldi	r27, 0x17	; 23
    4804:	01 c0       	rjmp	.+2      	; 0x4808 <.do_clear_bss_start>

00004806 <.do_clear_bss_loop>:
    4806:	1d 92       	st	X+, r1

00004808 <.do_clear_bss_start>:
    4808:	ad 3a       	cpi	r26, 0xAD	; 173
    480a:	b2 07       	cpc	r27, r18
    480c:	e1 f7       	brne	.-8      	; 0x4806 <.do_clear_bss_loop>
    480e:	0e 94 b4 e0 	call	0x1c168	; 0x1c168 <main>
    4812:	0c 94 3d e7 	jmp	0x1ce7a	; 0x1ce7a <_exit>

00004816 <__bad_interrupt>:
    4816:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000481a <chip_select>:
#endif
#ifdef AVR
    SPI0_RX(&data,1);
#endif
    return(data);
}
    481a:	e8 2f       	mov	r30, r24
    481c:	e6 95       	lsr	r30
    481e:	e6 95       	lsr	r30
    4820:	e6 95       	lsr	r30
    4822:	93 e0       	ldi	r25, 0x03	; 3
    4824:	e9 9f       	mul	r30, r25
    4826:	f0 01       	movw	r30, r0
    4828:	11 24       	eor	r1, r1
    482a:	32 a1       	ldd	r19, Z+34	; 0x22
    482c:	28 2f       	mov	r18, r24
    482e:	27 70       	andi	r18, 0x07	; 7
    4830:	81 e0       	ldi	r24, 0x01	; 1
    4832:	90 e0       	ldi	r25, 0x00	; 0
    4834:	01 c0       	rjmp	.+2      	; 0x4838 <chip_select+0x1e>
    4836:	88 0f       	add	r24, r24
    4838:	2a 95       	dec	r18
    483a:	ea f7       	brpl	.-6      	; 0x4836 <chip_select+0x1c>
    483c:	98 2f       	mov	r25, r24
    483e:	90 95       	com	r25
    4840:	93 23       	and	r25, r19
    4842:	92 a3       	std	Z+34, r25	; 0x22
    4844:	91 a1       	ldd	r25, Z+33	; 0x21
    4846:	89 2b       	or	r24, r25
    4848:	81 a3       	std	Z+33, r24	; 0x21
    484a:	08 95       	ret

0000484c <chip_deselect>:
    484c:	e8 2f       	mov	r30, r24
    484e:	e6 95       	lsr	r30
    4850:	e6 95       	lsr	r30
    4852:	e6 95       	lsr	r30
    4854:	93 e0       	ldi	r25, 0x03	; 3
    4856:	e9 9f       	mul	r30, r25
    4858:	f0 01       	movw	r30, r0
    485a:	11 24       	eor	r1, r1
    485c:	32 a1       	ldd	r19, Z+34	; 0x22
    485e:	28 2f       	mov	r18, r24
    4860:	27 70       	andi	r18, 0x07	; 7
    4862:	81 e0       	ldi	r24, 0x01	; 1
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	01 c0       	rjmp	.+2      	; 0x486a <chip_deselect+0x1e>
    4868:	88 0f       	add	r24, r24
    486a:	2a 95       	dec	r18
    486c:	ea f7       	brpl	.-6      	; 0x4868 <chip_deselect+0x1c>
    486e:	93 2f       	mov	r25, r19
    4870:	98 2b       	or	r25, r24
    4872:	92 a3       	std	Z+34, r25	; 0x22
    4874:	91 a1       	ldd	r25, Z+33	; 0x21
    4876:	89 2b       	or	r24, r25
    4878:	81 a3       	std	Z+33, r24	; 0x21
    487a:	08 95       	ret

0000487c <chip_select_init>:
    487c:	e7 cf       	rjmp	.-50     	; 0x484c <chip_deselect>
    487e:	08 95       	ret

00004880 <spi_end>:
    4880:	cf 93       	push	r28
    4882:	ad b7       	in	r26, 0x3d	; 61
    4884:	be b7       	in	r27, 0x3e	; 62
    4886:	17 97       	sbiw	r26, 0x07	; 7
    4888:	0f b6       	in	r0, 0x3f	; 63
    488a:	f8 94       	cli
    488c:	be bf       	out	0x3e, r27	; 62
    488e:	0f be       	out	0x3f, r0	; 63
    4890:	ad bf       	out	0x3d, r26	; 61
    4892:	c8 2f       	mov	r28, r24
    4894:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4898:	8c 17       	cp	r24, r28
    489a:	99 f0       	breq	.+38     	; 0x48c2 <spi_end+0x42>
    489c:	8f 3f       	cpi	r24, 0xFF	; 255
    489e:	89 f0       	breq	.+34     	; 0x48c2 <spi_end+0x42>
    48a0:	2c 2f       	mov	r18, r28
    48a2:	30 e0       	ldi	r19, 0x00	; 0
    48a4:	ed b7       	in	r30, 0x3d	; 61
    48a6:	fe b7       	in	r31, 0x3e	; 62
    48a8:	37 83       	std	Z+7, r19	; 0x07
    48aa:	26 83       	std	Z+6, r18	; 0x06
    48ac:	90 e0       	ldi	r25, 0x00	; 0
    48ae:	95 83       	std	Z+5, r25	; 0x05
    48b0:	84 83       	std	Z+4, r24	; 0x04
    48b2:	82 ec       	ldi	r24, 0xC2	; 194
    48b4:	91 e0       	ldi	r25, 0x01	; 1
    48b6:	a0 e0       	ldi	r26, 0x00	; 0
    48b8:	81 83       	std	Z+1, r24	; 0x01
    48ba:	92 83       	std	Z+2, r25	; 0x02
    48bc:	a3 83       	std	Z+3, r26	; 0x03
    48be:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    48c2:	8c 2f       	mov	r24, r28
    48c4:	c3 df       	rcall	.-122    	; 0x484c <chip_deselect>
    48c6:	8f ef       	ldi	r24, 0xFF	; 255
    48c8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    48cc:	ad b7       	in	r26, 0x3d	; 61
    48ce:	be b7       	in	r27, 0x3e	; 62
    48d0:	17 96       	adiw	r26, 0x07	; 7
    48d2:	0f b6       	in	r0, 0x3f	; 63
    48d4:	f8 94       	cli
    48d6:	be bf       	out	0x3e, r27	; 62
    48d8:	0f be       	out	0x3f, r0	; 63
    48da:	ad bf       	out	0x3d, r26	; 61
    48dc:	cf 91       	pop	r28
    48de:	08 95       	ret

000048e0 <spi_TX_buffer>:
    48e0:	cd c4       	rjmp	.+2458   	; 0x527c <SPI0_TX>
    48e2:	08 95       	ret

000048e4 <spi_RX_buffer>:
    48e4:	f5 c4       	rjmp	.+2538   	; 0x52d0 <SPI0_RX>
    48e6:	08 95       	ret

000048e8 <spi_TX>:

/// @brief SPI write 1 byte
/// @param[in] data: value to transmit
/// @return  void
void spi_TX(uint8_t data)
{
    48e8:	a1 e0       	ldi	r26, 0x01	; 1
    48ea:	b0 e0       	ldi	r27, 0x00	; 0
    48ec:	ea e7       	ldi	r30, 0x7A	; 122
    48ee:	f4 e2       	ldi	r31, 0x24	; 36
    48f0:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
    48f4:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TX(&data,1);
#endif
#ifdef AVR
    SPI0_TX(&data,1);
    48f6:	61 e0       	ldi	r22, 0x01	; 1
    48f8:	70 e0       	ldi	r23, 0x00	; 0
    48fa:	ce 01       	movw	r24, r28
    48fc:	01 96       	adiw	r24, 0x01	; 1
    48fe:	be d4       	rcall	.+2428   	; 0x527c <SPI0_TX>
#endif
}
    4900:	21 96       	adiw	r28, 0x01	; 1
    4902:	e2 e0       	ldi	r30, 0x02	; 2
    4904:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00004908 <spi_init>:
 @return void
*/
uint8_t _cs_pin = 0xff;
uint32_t _spi_clock = -1L;
void spi_init(uint32_t clock, int pin)
{
    4908:	cf 92       	push	r12
    490a:	df 92       	push	r13
    490c:	ef 92       	push	r14
    490e:	ff 92       	push	r15
    4910:	6b 01       	movw	r12, r22
    4912:	7c 01       	movw	r14, r24
    4914:	84 2f       	mov	r24, r20
    spi_waitReady();
    chip_deselect(pin);
    4916:	9a df       	rcall	.-204    	; 0x484c <chip_deselect>
    _cs_pin = 0xff;
    4918:	8f ef       	ldi	r24, 0xFF	; 255
    491a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>

#ifdef AVR
    SPI0_Init(clock);                             // Initialize the SPI bus - does nothing if clock unchanged
    491e:	c7 01       	movw	r24, r14
    4920:	b6 01       	movw	r22, r12
    4922:	7f d4       	rcall	.+2302   	; 0x5222 <SPI0_Init>
    SPI0_Mode(0);                                 // Set the clocking mode, etc
    4924:	80 e0       	ldi	r24, 0x00	; 0
    4926:	90 e0       	ldi	r25, 0x00	; 0
#endif
#ifdef ESP8266
    hspi_init(clock,0);                           // Initialize the SPI bus - does nothing if clock unchanged
#endif
    spi_TX(0xff);
    4928:	3c d4       	rcall	.+2168   	; 0x51a2 <SPI0_Mode>
    492a:	8f ef       	ldi	r24, 0xFF	; 255
    492c:	dd df       	rcall	.-70     	; 0x48e8 <spi_TX>
    _spi_clock = clock;
    492e:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    4932:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    4936:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    493a:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
// waits for any prior transactions to complete before updating
    spi_waitReady();
}
    493e:	ff 90       	pop	r15
    4940:	ef 90       	pop	r14
    4942:	df 90       	pop	r13
    4944:	cf 90       	pop	r12
    4946:	08 95       	ret

00004948 <spi_begin>:
 @param[in] clock: SPI clock rate
 @param[in] pin: GPIO CS pin
 @return void
*/
void spi_begin(uint32_t clock, int pin)
{
    4948:	cf 92       	push	r12
    494a:	df 92       	push	r13
    494c:	ef 92       	push	r14
    494e:	ff 92       	push	r15
    4950:	cf 93       	push	r28
    4952:	df 93       	push	r29
    4954:	ad b7       	in	r26, 0x3d	; 61
    4956:	be b7       	in	r27, 0x3e	; 62
    4958:	17 97       	sbiw	r26, 0x07	; 7
    495a:	0f b6       	in	r0, 0x3f	; 63
    495c:	f8 94       	cli
    495e:	be bf       	out	0x3e, r27	; 62
    4960:	0f be       	out	0x3f, r0	; 63
    4962:	ad bf       	out	0x3d, r26	; 61
    4964:	6b 01       	movw	r12, r22
    4966:	7c 01       	movw	r14, r24
    4968:	ea 01       	movw	r28, r20
// FIXME allow nesting by using an array of clock values for each pin

//@brief if there is a prior chip select in progress flag an error
    if(_cs_pin != 0xff)
    496a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    496e:	8f 3f       	cpi	r24, 0xFF	; 255
    4970:	79 f0       	breq	.+30     	; 0x4990 <spi_begin+0x48>
    {
// This implies a bug!
        printf("cs_enable was: %d, want: %d\n", 0xff & _cs_pin, pin);
    4972:	ed b7       	in	r30, 0x3d	; 61
    4974:	fe b7       	in	r31, 0x3e	; 62
    4976:	46 83       	std	Z+6, r20	; 0x06
    4978:	d7 83       	std	Z+7, r29	; 0x07
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	95 83       	std	Z+5, r25	; 0x05
    497e:	84 83       	std	Z+4, r24	; 0x04
    4980:	80 ee       	ldi	r24, 0xE0	; 224
    4982:	91 e0       	ldi	r25, 0x01	; 1
    4984:	a0 e0       	ldi	r26, 0x00	; 0
    4986:	81 83       	std	Z+1, r24	; 0x01
    4988:	92 83       	std	Z+2, r25	; 0x02
    498a:	a3 83       	std	Z+3, r26	; 0x03
    498c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
// waits for any prior transactions to complete before updating
    spi_waitReady();

///@brief initialize pin in case it has not been done yet
///@ we cache the clock frequency seeting for multiple device support
    if(_spi_clock != clock)
    4990:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    4994:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    4998:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    499c:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    49a0:	8c 15       	cp	r24, r12
    49a2:	9d 05       	cpc	r25, r13
    49a4:	ae 05       	cpc	r26, r14
    49a6:	bf 05       	cpc	r27, r15
    49a8:	21 f0       	breq	.+8      	; 0x49b2 <spi_begin+0x6a>
    {
        spi_init(clock,pin);
    49aa:	ae 01       	movw	r20, r28
    49ac:	c7 01       	movw	r24, r14
    49ae:	b6 01       	movw	r22, r12
    49b0:	ab df       	rcall	.-170    	; 0x4908 <spi_init>
    }

    chip_select(pin);
    49b2:	8c 2f       	mov	r24, r28
    49b4:	32 df       	rcall	.-412    	; 0x481a <chip_select>
    _cs_pin = pin;
    49b6:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
}
    49ba:	ad b7       	in	r26, 0x3d	; 61
    49bc:	be b7       	in	r27, 0x3e	; 62
    49be:	17 96       	adiw	r26, 0x07	; 7
    49c0:	0f b6       	in	r0, 0x3f	; 63
    49c2:	f8 94       	cli
    49c4:	be bf       	out	0x3e, r27	; 62
    49c6:	0f be       	out	0x3f, r0	; 63
    49c8:	ad bf       	out	0x3d, r26	; 61
    49ca:	df 91       	pop	r29
    49cc:	cf 91       	pop	r28
    49ce:	ff 90       	pop	r15
    49d0:	ef 90       	pop	r14
    49d2:	df 90       	pop	r13
    49d4:	cf 90       	pop	r12
    49d6:	08 95       	ret

000049d8 <spi_TXRX>:

/// @brief SPI read and write 1 byte
/// @param[in] data: value to transmit
/// @return  uint8_t value read
uint8_t spi_TXRX(uint8_t data)
{
    49d8:	a1 e0       	ldi	r26, 0x01	; 1
    49da:	b0 e0       	ldi	r27, 0x00	; 0
    49dc:	e2 ef       	ldi	r30, 0xF2	; 242
    49de:	f4 e2       	ldi	r31, 0x24	; 36
    49e0:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
    49e4:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TXRX(&data,1);
#endif
#ifdef AVR
    SPI0_TXRX(&data,1);
    49e6:	61 e0       	ldi	r22, 0x01	; 1
    49e8:	70 e0       	ldi	r23, 0x00	; 0
    49ea:	ce 01       	movw	r24, r28
    49ec:	01 96       	adiw	r24, 0x01	; 1
    49ee:	5a d4       	rcall	.+2228   	; 0x52a4 <SPI0_TXRX>
#endif
    return(data);
}
    49f0:	89 81       	ldd	r24, Y+1	; 0x01
    49f2:	21 96       	adiw	r28, 0x01	; 1
    49f4:	e2 e0       	ldi	r30, 0x02	; 2
    49f6:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

000049fa <set_error>:
static uint8_t error_flag = 0;
/// @brief Set error condition
/// @return  void
void set_error(uint8_t error)
{
	error_flag = error;
    49fa:	80 93 4c 17 	sts	0x174C, r24	; 0x80174c <__data_end>
    GPIO_PIN_HI(LED2);
    49fe:	2c 9a       	sbi	0x05, 4	; 5
    4a00:	24 9a       	sbi	0x04, 4	; 4
    4a02:	08 95       	ret

00004a04 <clear_error>:

/// @brief Set error condition
/// @return  void
void clear_error()
{
	error_flag = 0;
    4a04:	10 92 4c 17 	sts	0x174C, r1	; 0x80174c <__data_end>
    GPIO_PIN_LOW(LED2);
    4a08:	2c 98       	cbi	0x05, 4	; 5
    4a0a:	24 9a       	sbi	0x04, 4	; 4
    4a0c:	08 95       	ret

00004a0e <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    4a0e:	a2 e0       	ldi	r26, 0x02	; 2
    4a10:	b0 e0       	ldi	r27, 0x00	; 0
    4a12:	ed e0       	ldi	r30, 0x0D	; 13
    4a14:	f5 e2       	ldi	r31, 0x25	; 37
    4a16:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    4a1a:	20 91 a9 21 	lds	r18, 0x21A9	; 0x8021a9 <__brkval>
    4a1e:	30 91 aa 21 	lds	r19, 0x21AA	; 0x8021aa <__brkval+0x1>
    4a22:	21 15       	cp	r18, r1
    4a24:	31 05       	cpc	r19, r1
    4a26:	11 f4       	brne	.+4      	; 0x4a2c <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4a28:	2d ea       	ldi	r18, 0xAD	; 173
    4a2a:	31 e2       	ldi	r19, 0x21	; 33

    ret = (uint16_t) &v - top;
    return ( ret );
}
    4a2c:	ce 01       	movw	r24, r28
    4a2e:	01 96       	adiw	r24, 0x01	; 1
    4a30:	82 1b       	sub	r24, r18
    4a32:	93 0b       	sbc	r25, r19
    4a34:	22 96       	adiw	r28, 0x02	; 2
    4a36:	e2 e0       	ldi	r30, 0x02	; 2
    4a38:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00004a3c <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4a3c:	a9 e0       	ldi	r26, 0x09	; 9
    4a3e:	b0 e0       	ldi	r27, 0x00	; 0
    4a40:	e4 e2       	ldi	r30, 0x24	; 36
    4a42:	f5 e2       	ldi	r31, 0x25	; 37
    4a44:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    4a48:	e2 df       	rcall	.-60     	; 0x4a0e <freeRam>
    4a4a:	99 87       	std	Y+9, r25	; 0x09
    4a4c:	88 87       	std	Y+8, r24	; 0x08

    printf("Free Ram:%u\n", ram);
    4a4e:	ed b7       	in	r30, 0x3d	; 61
    4a50:	fe b7       	in	r31, 0x3e	; 62
    4a52:	95 83       	std	Z+5, r25	; 0x05
    4a54:	84 83       	std	Z+4, r24	; 0x04
    4a56:	87 e0       	ldi	r24, 0x07	; 7
    4a58:	93 e0       	ldi	r25, 0x03	; 3
    4a5a:	a0 e0       	ldi	r26, 0x00	; 0
    4a5c:	81 83       	std	Z+1, r24	; 0x01
    4a5e:	92 83       	std	Z+2, r25	; 0x02
    4a60:	a3 83       	std	Z+3, r26	; 0x03
    4a62:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    4a66:	8f ef       	ldi	r24, 0xFF	; 255
    4a68:	90 e4       	ldi	r25, 0x40	; 64
    4a6a:	ed b7       	in	r30, 0x3d	; 61
    4a6c:	fe b7       	in	r31, 0x3e	; 62
    4a6e:	95 83       	std	Z+5, r25	; 0x05
    4a70:	84 83       	std	Z+4, r24	; 0x04
    4a72:	84 ef       	ldi	r24, 0xF4	; 244
    4a74:	92 e0       	ldi	r25, 0x02	; 2
    4a76:	a0 e0       	ldi	r26, 0x00	; 0
    4a78:	81 83       	std	Z+1, r24	; 0x01
    4a7a:	92 83       	std	Z+2, r25	; 0x02
    4a7c:	a3 83       	std	Z+3, r26	; 0x03
    4a7e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    4a82:	ce 01       	movw	r24, r28
    4a84:	08 96       	adiw	r24, 0x08	; 8
    4a86:	ed b7       	in	r30, 0x3d	; 61
    4a88:	fe b7       	in	r31, 0x3e	; 62
    4a8a:	95 83       	std	Z+5, r25	; 0x05
    4a8c:	84 83       	std	Z+4, r24	; 0x04
    4a8e:	81 ee       	ldi	r24, 0xE1	; 225
    4a90:	92 e0       	ldi	r25, 0x02	; 2
    4a92:	a0 e0       	ldi	r26, 0x00	; 0
    4a94:	81 83       	std	Z+1, r24	; 0x01
    4a96:	92 83       	std	Z+2, r25	; 0x02
    4a98:	a3 83       	std	Z+3, r26	; 0x03
    4a9a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    4a9e:	8d ea       	ldi	r24, 0xAD	; 173
    4aa0:	91 e2       	ldi	r25, 0x21	; 33
    4aa2:	ed b7       	in	r30, 0x3d	; 61
    4aa4:	fe b7       	in	r31, 0x3e	; 62
    4aa6:	97 83       	std	Z+7, r25	; 0x07
    4aa8:	86 83       	std	Z+6, r24	; 0x06
    4aaa:	8c e4       	ldi	r24, 0x4C	; 76
    4aac:	97 e1       	ldi	r25, 0x17	; 23
    4aae:	95 83       	std	Z+5, r25	; 0x05
    4ab0:	84 83       	std	Z+4, r24	; 0x04
    4ab2:	83 ec       	ldi	r24, 0xC3	; 195
    4ab4:	92 e0       	ldi	r25, 0x02	; 2
    4ab6:	a0 e0       	ldi	r26, 0x00	; 0
    4ab8:	81 83       	std	Z+1, r24	; 0x01
    4aba:	92 83       	std	Z+2, r25	; 0x02
    4abc:	a3 83       	std	Z+3, r26	; 0x03
    4abe:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    4ac2:	8c e4       	ldi	r24, 0x4C	; 76
    4ac4:	97 e1       	ldi	r25, 0x17	; 23
    4ac6:	ed b7       	in	r30, 0x3d	; 61
    4ac8:	fe b7       	in	r31, 0x3e	; 62
    4aca:	97 83       	std	Z+7, r25	; 0x07
    4acc:	86 83       	std	Z+6, r24	; 0x06
    4ace:	80 e0       	ldi	r24, 0x00	; 0
    4ad0:	91 e0       	ldi	r25, 0x01	; 1
    4ad2:	95 83       	std	Z+5, r25	; 0x05
    4ad4:	84 83       	std	Z+4, r24	; 0x04
    4ad6:	85 ea       	ldi	r24, 0xA5	; 165
    4ad8:	92 e0       	ldi	r25, 0x02	; 2
    4ada:	a0 e0       	ldi	r26, 0x00	; 0
    4adc:	81 83       	std	Z+1, r24	; 0x01
    4ade:	92 83       	std	Z+2, r25	; 0x02
    4ae0:	a3 83       	std	Z+3, r26	; 0x03
    4ae2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    4ae6:	80 e0       	ldi	r24, 0x00	; 0
    4ae8:	90 e0       	ldi	r25, 0x00	; 0
    4aea:	ed b7       	in	r30, 0x3d	; 61
    4aec:	fe b7       	in	r31, 0x3e	; 62
    4aee:	97 83       	std	Z+7, r25	; 0x07
    4af0:	86 83       	std	Z+6, r24	; 0x06
    4af2:	8d ea       	ldi	r24, 0xAD	; 173
    4af4:	91 e2       	ldi	r25, 0x21	; 33
    4af6:	95 83       	std	Z+5, r25	; 0x05
    4af8:	84 83       	std	Z+4, r24	; 0x04
    4afa:	87 e8       	ldi	r24, 0x87	; 135
    4afc:	92 e0       	ldi	r25, 0x02	; 2
    4afe:	a0 e0       	ldi	r26, 0x00	; 0
    4b00:	81 83       	std	Z+1, r24	; 0x01
    4b02:	92 83       	std	Z+2, r25	; 0x02
    4b04:	a3 83       	std	Z+3, r26	; 0x03
    4b06:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    4b0a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4b0e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4b12:	ed b7       	in	r30, 0x3d	; 61
    4b14:	fe b7       	in	r31, 0x3e	; 62
    4b16:	97 83       	std	Z+7, r25	; 0x07
    4b18:	86 83       	std	Z+6, r24	; 0x06
    4b1a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    4b1e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4b22:	95 83       	std	Z+5, r25	; 0x05
    4b24:	84 83       	std	Z+4, r24	; 0x04
    4b26:	89 e6       	ldi	r24, 0x69	; 105
    4b28:	92 e0       	ldi	r25, 0x02	; 2
    4b2a:	a0 e0       	ldi	r26, 0x00	; 0
    4b2c:	81 83       	std	Z+1, r24	; 0x01
    4b2e:	92 83       	std	Z+2, r25	; 0x02
    4b30:	a3 83       	std	Z+3, r26	; 0x03
    4b32:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    4b36:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <__brkval>
    4b3a:	90 91 aa 21 	lds	r25, 0x21AA	; 0x8021aa <__brkval+0x1>
    4b3e:	ed b7       	in	r30, 0x3d	; 61
    4b40:	fe b7       	in	r31, 0x3e	; 62
    4b42:	95 83       	std	Z+5, r25	; 0x05
    4b44:	84 83       	std	Z+4, r24	; 0x04
    4b46:	85 e5       	ldi	r24, 0x55	; 85
    4b48:	92 e0       	ldi	r25, 0x02	; 2
    4b4a:	a0 e0       	ldi	r26, 0x00	; 0
    4b4c:	81 83       	std	Z+1, r24	; 0x01
    4b4e:	92 83       	std	Z+2, r25	; 0x02
    4b50:	a3 83       	std	Z+3, r26	; 0x03
    4b52:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

}
    4b56:	29 96       	adiw	r28, 0x09	; 9
    4b58:	e2 e0       	ldi	r30, 0x02	; 2
    4b5a:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00004b5e <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    4b5e:	ef 92       	push	r14
    4b60:	ff 92       	push	r15
    4b62:	0f 93       	push	r16
    4b64:	1f 93       	push	r17
    4b66:	cf 93       	push	r28
    4b68:	df 93       	push	r29
    4b6a:	ad b7       	in	r26, 0x3d	; 61
    4b6c:	be b7       	in	r27, 0x3e	; 62
    4b6e:	17 97       	sbiw	r26, 0x07	; 7
    4b70:	0f b6       	in	r0, 0x3f	; 63
    4b72:	f8 94       	cli
    4b74:	be bf       	out	0x3e, r27	; 62
    4b76:	0f be       	out	0x3f, r0	; 63
    4b78:	ad bf       	out	0x3d, r26	; 61
    4b7a:	8c 01       	movw	r16, r24
    4b7c:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    4b7e:	0e 94 fb e5 	call	0x1cbf6	; 0x1cbf6 <calloc>
    4b82:	ec 01       	movw	r28, r24
    if(!p)
    4b84:	89 2b       	or	r24, r25
    4b86:	71 f4       	brne	.+28     	; 0x4ba4 <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    4b88:	ed b7       	in	r30, 0x3d	; 61
    4b8a:	fe b7       	in	r31, 0x3e	; 62
    4b8c:	f7 82       	std	Z+7, r15	; 0x07
    4b8e:	e6 82       	std	Z+6, r14	; 0x06
    4b90:	15 83       	std	Z+5, r17	; 0x05
    4b92:	04 83       	std	Z+4, r16	; 0x04
    4b94:	8a e3       	ldi	r24, 0x3A	; 58
    4b96:	92 e0       	ldi	r25, 0x02	; 2
    4b98:	a0 e0       	ldi	r26, 0x00	; 0
    4b9a:	81 83       	std	Z+1, r24	; 0x01
    4b9c:	92 83       	std	Z+2, r25	; 0x02
    4b9e:	a3 83       	std	Z+3, r26	; 0x03
    4ba0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    }
    return(p);
}
    4ba4:	ce 01       	movw	r24, r28
    4ba6:	cd b7       	in	r28, 0x3d	; 61
    4ba8:	de b7       	in	r29, 0x3e	; 62
    4baa:	27 96       	adiw	r28, 0x07	; 7
    4bac:	e6 e0       	ldi	r30, 0x06	; 6
    4bae:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

00004bb2 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    4bb2:	0f 93       	push	r16
    4bb4:	1f 93       	push	r17
    4bb6:	cf 93       	push	r28
    4bb8:	df 93       	push	r29
    4bba:	00 d0       	rcall	.+0      	; 0x4bbc <safemalloc+0xa>
    4bbc:	00 d0       	rcall	.+0      	; 0x4bbe <safemalloc+0xc>
    4bbe:	1f 92       	push	r1
    4bc0:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    4bc2:	61 e0       	ldi	r22, 0x01	; 1
    4bc4:	70 e0       	ldi	r23, 0x00	; 0
    4bc6:	0e 94 fb e5 	call	0x1cbf6	; 0x1cbf6 <calloc>
    4bca:	ec 01       	movw	r28, r24
    if(!p)
    4bcc:	89 2b       	or	r24, r25
    4bce:	61 f4       	brne	.+24     	; 0x4be8 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    4bd0:	ed b7       	in	r30, 0x3d	; 61
    4bd2:	fe b7       	in	r31, 0x3e	; 62
    4bd4:	15 83       	std	Z+5, r17	; 0x05
    4bd6:	04 83       	std	Z+4, r16	; 0x04
    4bd8:	82 e2       	ldi	r24, 0x22	; 34
    4bda:	92 e0       	ldi	r25, 0x02	; 2
    4bdc:	a0 e0       	ldi	r26, 0x00	; 0
    4bde:	81 83       	std	Z+1, r24	; 0x01
    4be0:	92 83       	std	Z+2, r25	; 0x02
    4be2:	a3 83       	std	Z+3, r26	; 0x03
    4be4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    }
    return(p);
}
    4be8:	ce 01       	movw	r24, r28
    4bea:	cd b7       	in	r28, 0x3d	; 61
    4bec:	de b7       	in	r29, 0x3e	; 62
    4bee:	25 96       	adiw	r28, 0x05	; 5
    4bf0:	e4 e0       	ldi	r30, 0x04	; 4
    4bf2:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

00004bf6 <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    4bf6:	ad b7       	in	r26, 0x3d	; 61
    4bf8:	be b7       	in	r27, 0x3e	; 62
    4bfa:	17 97       	sbiw	r26, 0x07	; 7
    4bfc:	0f b6       	in	r0, 0x3f	; 63
    4bfe:	f8 94       	cli
    4c00:	be bf       	out	0x3e, r27	; 62
    4c02:	0f be       	out	0x3f, r0	; 63
    4c04:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    4c06:	00 97       	sbiw	r24, 0x00	; 0
    4c08:	11 f1       	breq	.+68     	; 0x4c4e <safefree+0x58>
        return;

    if(__brkval)
    4c0a:	20 91 a9 21 	lds	r18, 0x21A9	; 0x8021a9 <__brkval>
    4c0e:	30 91 aa 21 	lds	r19, 0x21AA	; 0x8021aa <__brkval+0x1>
    4c12:	21 15       	cp	r18, r1
    4c14:	31 05       	cpc	r19, r1
    4c16:	11 f4       	brne	.+4      	; 0x4c1c <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4c18:	2d ea       	ldi	r18, 0xAD	; 173
    4c1a:	31 e2       	ldi	r19, 0x21	; 33

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    4c1c:	41 e2       	ldi	r20, 0x21	; 33
    4c1e:	8d 3a       	cpi	r24, 0xAD	; 173
    4c20:	94 07       	cpc	r25, r20
    4c22:	30 f0       	brcs	.+12     	; 0x4c30 <safefree+0x3a>
    4c24:	28 17       	cp	r18, r24
    4c26:	39 07       	cpc	r19, r25
    4c28:	18 f0       	brcs	.+6      	; 0x4c30 <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    4c2a:	0e 94 ad e6 	call	0x1cd5a	; 0x1cd5a <free>
        return;
    4c2e:	0f c0       	rjmp	.+30     	; 0x4c4e <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    4c30:	ed b7       	in	r30, 0x3d	; 61
    4c32:	fe b7       	in	r31, 0x3e	; 62
    4c34:	37 83       	std	Z+7, r19	; 0x07
    4c36:	26 83       	std	Z+6, r18	; 0x06
    4c38:	95 83       	std	Z+5, r25	; 0x05
    4c3a:	84 83       	std	Z+4, r24	; 0x04
    4c3c:	8d ef       	ldi	r24, 0xFD	; 253
    4c3e:	91 e0       	ldi	r25, 0x01	; 1
    4c40:	a0 e0       	ldi	r26, 0x00	; 0
    4c42:	81 83       	std	Z+1, r24	; 0x01
    4c44:	92 83       	std	Z+2, r25	; 0x02
    4c46:	a3 83       	std	Z+3, r26	; 0x03
    4c48:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    PrintFree();
    4c4c:	f7 de       	rcall	.-530    	; 0x4a3c <PrintFree>
}
    4c4e:	ad b7       	in	r26, 0x3d	; 61
    4c50:	be b7       	in	r27, 0x3e	; 62
    4c52:	17 96       	adiw	r26, 0x07	; 7
    4c54:	0f b6       	in	r0, 0x3f	; 63
    4c56:	f8 94       	cli
    4c58:	be bf       	out	0x3e, r27	; 62
    4c5a:	0f be       	out	0x3f, r0	; 63
    4c5c:	ad bf       	out	0x3d, r26	; 61
    4c5e:	08 95       	ret

00004c60 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    4c60:	64 36       	cpi	r22, 0x64	; 100
    4c62:	71 05       	cpc	r23, r1
    4c64:	81 05       	cpc	r24, r1
    4c66:	91 05       	cpc	r25, r1
    4c68:	58 f0       	brcs	.+22     	; 0x4c80 <delayus+0x20>
    {
        us -= 100U;
    4c6a:	64 56       	subi	r22, 0x64	; 100
    4c6c:	71 09       	sbc	r23, r1
    4c6e:	81 09       	sbc	r24, r1
    4c70:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4c72:	e3 ef       	ldi	r30, 0xF3	; 243
    4c74:	f1 e0       	ldi	r31, 0x01	; 1
    4c76:	31 97       	sbiw	r30, 0x01	; 1
    4c78:	f1 f7       	brne	.-4      	; 0x4c76 <delayus+0x16>
    4c7a:	00 c0       	rjmp	.+0      	; 0x4c7c <delayus+0x1c>
    4c7c:	00 00       	nop
    4c7e:	f0 cf       	rjmp	.-32     	; 0x4c60 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    4c80:	6a 30       	cpi	r22, 0x0A	; 10
    4c82:	71 05       	cpc	r23, r1
    4c84:	81 05       	cpc	r24, r1
    4c86:	91 05       	cpc	r25, r1
    4c88:	48 f0       	brcs	.+18     	; 0x4c9c <delayus+0x3c>
    {
        us -= 10U;
    4c8a:	6a 50       	subi	r22, 0x0A	; 10
    4c8c:	71 09       	sbc	r23, r1
    4c8e:	81 09       	sbc	r24, r1
    4c90:	91 09       	sbc	r25, r1
    4c92:	f2 e4       	ldi	r31, 0x42	; 66
    4c94:	fa 95       	dec	r31
    4c96:	f1 f7       	brne	.-4      	; 0x4c94 <delayus+0x34>
    4c98:	00 c0       	rjmp	.+0      	; 0x4c9a <delayus+0x3a>
    4c9a:	f2 cf       	rjmp	.-28     	; 0x4c80 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    4c9c:	61 15       	cp	r22, r1
    4c9e:	71 05       	cpc	r23, r1
    4ca0:	81 05       	cpc	r24, r1
    4ca2:	91 05       	cpc	r25, r1
    4ca4:	49 f0       	breq	.+18     	; 0x4cb8 <delayus+0x58>
    {
        --us;
    4ca6:	61 50       	subi	r22, 0x01	; 1
    4ca8:	71 09       	sbc	r23, r1
    4caa:	81 09       	sbc	r24, r1
    4cac:	91 09       	sbc	r25, r1
    4cae:	26 e0       	ldi	r18, 0x06	; 6
    4cb0:	2a 95       	dec	r18
    4cb2:	f1 f7       	brne	.-4      	; 0x4cb0 <delayus+0x50>
    4cb4:	00 c0       	rjmp	.+0      	; 0x4cb6 <delayus+0x56>
    4cb6:	f2 cf       	rjmp	.-28     	; 0x4c9c <delayus+0x3c>
        _delay_us(1);
    }
}
    4cb8:	08 95       	ret

00004cba <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    4cba:	61 15       	cp	r22, r1
    4cbc:	71 05       	cpc	r23, r1
    4cbe:	81 05       	cpc	r24, r1
    4cc0:	91 05       	cpc	r25, r1
    4cc2:	09 f4       	brne	.+2      	; 0x4cc6 <delayms+0xc>
    4cc4:	41 c0       	rjmp	.+130    	; 0x4d48 <delayms+0x8e>
    4cc6:	e3 ef       	ldi	r30, 0xF3	; 243
    4cc8:	f1 e0       	ldi	r31, 0x01	; 1
    4cca:	31 97       	sbiw	r30, 0x01	; 1
    4ccc:	f1 f7       	brne	.-4      	; 0x4cca <delayms+0x10>
    4cce:	00 c0       	rjmp	.+0      	; 0x4cd0 <delayms+0x16>
    4cd0:	00 00       	nop
    4cd2:	e3 ef       	ldi	r30, 0xF3	; 243
    4cd4:	f1 e0       	ldi	r31, 0x01	; 1
    4cd6:	31 97       	sbiw	r30, 0x01	; 1
    4cd8:	f1 f7       	brne	.-4      	; 0x4cd6 <delayms+0x1c>
    4cda:	00 c0       	rjmp	.+0      	; 0x4cdc <delayms+0x22>
    4cdc:	00 00       	nop
    4cde:	e3 ef       	ldi	r30, 0xF3	; 243
    4ce0:	f1 e0       	ldi	r31, 0x01	; 1
    4ce2:	31 97       	sbiw	r30, 0x01	; 1
    4ce4:	f1 f7       	brne	.-4      	; 0x4ce2 <delayms+0x28>
    4ce6:	00 c0       	rjmp	.+0      	; 0x4ce8 <delayms+0x2e>
    4ce8:	00 00       	nop
    4cea:	e3 ef       	ldi	r30, 0xF3	; 243
    4cec:	f1 e0       	ldi	r31, 0x01	; 1
    4cee:	31 97       	sbiw	r30, 0x01	; 1
    4cf0:	f1 f7       	brne	.-4      	; 0x4cee <delayms+0x34>
    4cf2:	00 c0       	rjmp	.+0      	; 0x4cf4 <delayms+0x3a>
    4cf4:	00 00       	nop
    4cf6:	e3 ef       	ldi	r30, 0xF3	; 243
    4cf8:	f1 e0       	ldi	r31, 0x01	; 1
    4cfa:	31 97       	sbiw	r30, 0x01	; 1
    4cfc:	f1 f7       	brne	.-4      	; 0x4cfa <delayms+0x40>
    4cfe:	00 c0       	rjmp	.+0      	; 0x4d00 <delayms+0x46>
    4d00:	00 00       	nop
    4d02:	e3 ef       	ldi	r30, 0xF3	; 243
    4d04:	f1 e0       	ldi	r31, 0x01	; 1
    4d06:	31 97       	sbiw	r30, 0x01	; 1
    4d08:	f1 f7       	brne	.-4      	; 0x4d06 <delayms+0x4c>
    4d0a:	00 c0       	rjmp	.+0      	; 0x4d0c <delayms+0x52>
    4d0c:	00 00       	nop
    4d0e:	e3 ef       	ldi	r30, 0xF3	; 243
    4d10:	f1 e0       	ldi	r31, 0x01	; 1
    4d12:	31 97       	sbiw	r30, 0x01	; 1
    4d14:	f1 f7       	brne	.-4      	; 0x4d12 <delayms+0x58>
    4d16:	00 c0       	rjmp	.+0      	; 0x4d18 <delayms+0x5e>
    4d18:	00 00       	nop
    4d1a:	e3 ef       	ldi	r30, 0xF3	; 243
    4d1c:	f1 e0       	ldi	r31, 0x01	; 1
    4d1e:	31 97       	sbiw	r30, 0x01	; 1
    4d20:	f1 f7       	brne	.-4      	; 0x4d1e <delayms+0x64>
    4d22:	00 c0       	rjmp	.+0      	; 0x4d24 <delayms+0x6a>
    4d24:	00 00       	nop
    4d26:	e3 ef       	ldi	r30, 0xF3	; 243
    4d28:	f1 e0       	ldi	r31, 0x01	; 1
    4d2a:	31 97       	sbiw	r30, 0x01	; 1
    4d2c:	f1 f7       	brne	.-4      	; 0x4d2a <delayms+0x70>
    4d2e:	00 c0       	rjmp	.+0      	; 0x4d30 <delayms+0x76>
    4d30:	00 00       	nop
    4d32:	e3 ef       	ldi	r30, 0xF3	; 243
    4d34:	f1 e0       	ldi	r31, 0x01	; 1
    4d36:	31 97       	sbiw	r30, 0x01	; 1
    4d38:	f1 f7       	brne	.-4      	; 0x4d36 <delayms+0x7c>
    4d3a:	00 c0       	rjmp	.+0      	; 0x4d3c <delayms+0x82>
    4d3c:	00 00       	nop
    4d3e:	61 50       	subi	r22, 0x01	; 1
    4d40:	71 09       	sbc	r23, r1
    4d42:	81 09       	sbc	r24, r1
    4d44:	91 09       	sbc	r25, r1
    4d46:	b9 cf       	rjmp	.-142    	; 0x4cba <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    4d48:	08 95       	ret

00004d4a <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    4d4a:	81 11       	cpse	r24, r1
    4d4c:	0e c0       	rjmp	.+28     	; 0x4d6a <uart_rx_flush+0x20>
    4d4e:	f8 94       	cli
    4d50:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x4>
    4d54:	10 92 ef 19 	sts	0x19EF, r1	; 0x8019ef <uarts+0x3>
    4d58:	10 92 ec 19 	sts	0x19EC, r1	; 0x8019ec <uarts>
    4d5c:	10 92 ed 19 	sts	0x19ED, r1	; 0x8019ed <uarts+0x1>
    4d60:	10 92 ee 19 	sts	0x19EE, r1	; 0x8019ee <uarts+0x2>
    4d64:	10 92 f1 19 	sts	0x19F1, r1	; 0x8019f1 <uarts+0x5>
    4d68:	78 94       	sei
    4d6a:	08 95       	ret

00004d6c <uart_ubr>:
    4d6c:	4f 92       	push	r4
    4d6e:	5f 92       	push	r5
    4d70:	6f 92       	push	r6
    4d72:	7f 92       	push	r7
    4d74:	8f 92       	push	r8
    4d76:	9f 92       	push	r9
    4d78:	af 92       	push	r10
    4d7a:	bf 92       	push	r11
    4d7c:	cf 92       	push	r12
    4d7e:	df 92       	push	r13
    4d80:	ef 92       	push	r14
    4d82:	ff 92       	push	r15
    4d84:	cf 93       	push	r28
    4d86:	df 93       	push	r29
    4d88:	5a 01       	movw	r10, r20
    4d8a:	e9 01       	movw	r28, r18
    4d8c:	0e 94 99 e4 	call	0x1c932	; 0x1c932 <__floatunsisf>
    4d90:	2b 01       	movw	r4, r22
    4d92:	3c 01       	movw	r6, r24
    4d94:	20 e0       	ldi	r18, 0x00	; 0
    4d96:	30 e0       	ldi	r19, 0x00	; 0
    4d98:	40 e0       	ldi	r20, 0x00	; 0
    4d9a:	51 e4       	ldi	r21, 0x41	; 65
    4d9c:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <__mulsf3>
    4da0:	9b 01       	movw	r18, r22
    4da2:	ac 01       	movw	r20, r24
    4da4:	60 e8       	ldi	r22, 0x80	; 128
    4da6:	76 e9       	ldi	r23, 0x96	; 150
    4da8:	88 e9       	ldi	r24, 0x98	; 152
    4daa:	9b e4       	ldi	r25, 0x4B	; 75
    4dac:	0e 94 00 e4 	call	0x1c800	; 0x1c800 <__divsf3>
    4db0:	20 e0       	ldi	r18, 0x00	; 0
    4db2:	30 e0       	ldi	r19, 0x00	; 0
    4db4:	40 e8       	ldi	r20, 0x80	; 128
    4db6:	5f e3       	ldi	r21, 0x3F	; 63
    4db8:	0e 94 97 e3 	call	0x1c72e	; 0x1c72e <__subsf3>
    4dbc:	0e 94 b2 e5 	call	0x1cb64	; 0x1cb64 <round>
    4dc0:	0e 94 6d e4 	call	0x1c8da	; 0x1c8da <__fixunssfsi>
    4dc4:	6b 01       	movw	r12, r22
    4dc6:	7c 01       	movw	r14, r24
    4dc8:	c1 14       	cp	r12, r1
    4dca:	80 e1       	ldi	r24, 0x10	; 16
    4dcc:	d8 06       	cpc	r13, r24
    4dce:	e1 04       	cpc	r14, r1
    4dd0:	f1 04       	cpc	r15, r1
    4dd2:	58 f4       	brcc	.+22     	; 0x4dea <uart_ubr+0x7e>
    4dd4:	81 e0       	ldi	r24, 0x01	; 1
    4dd6:	90 e0       	ldi	r25, 0x00	; 0
    4dd8:	f5 01       	movw	r30, r10
    4dda:	91 83       	std	Z+1, r25	; 0x01
    4ddc:	80 83       	st	Z, r24
    4dde:	81 2c       	mov	r8, r1
    4de0:	91 2c       	mov	r9, r1
    4de2:	a1 2c       	mov	r10, r1
    4de4:	21 e4       	ldi	r18, 0x41	; 65
    4de6:	b2 2e       	mov	r11, r18
    4de8:	31 c0       	rjmp	.+98     	; 0x4e4c <uart_ubr+0xe0>
    4dea:	f5 01       	movw	r30, r10
    4dec:	11 82       	std	Z+1, r1	; 0x01
    4dee:	10 82       	st	Z, r1
    4df0:	20 e0       	ldi	r18, 0x00	; 0
    4df2:	30 e0       	ldi	r19, 0x00	; 0
    4df4:	40 e8       	ldi	r20, 0x80	; 128
    4df6:	51 e4       	ldi	r21, 0x41	; 65
    4df8:	c3 01       	movw	r24, r6
    4dfa:	b2 01       	movw	r22, r4
    4dfc:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <__mulsf3>
    4e00:	9b 01       	movw	r18, r22
    4e02:	ac 01       	movw	r20, r24
    4e04:	60 e8       	ldi	r22, 0x80	; 128
    4e06:	76 e9       	ldi	r23, 0x96	; 150
    4e08:	88 e9       	ldi	r24, 0x98	; 152
    4e0a:	9b e4       	ldi	r25, 0x4B	; 75
    4e0c:	0e 94 00 e4 	call	0x1c800	; 0x1c800 <__divsf3>
    4e10:	20 e0       	ldi	r18, 0x00	; 0
    4e12:	30 e0       	ldi	r19, 0x00	; 0
    4e14:	40 e8       	ldi	r20, 0x80	; 128
    4e16:	5f e3       	ldi	r21, 0x3F	; 63
    4e18:	0e 94 97 e3 	call	0x1c72e	; 0x1c72e <__subsf3>
    4e1c:	0e 94 b2 e5 	call	0x1cb64	; 0x1cb64 <round>
    4e20:	0e 94 6d e4 	call	0x1c8da	; 0x1c8da <__fixunssfsi>
    4e24:	6b 01       	movw	r12, r22
    4e26:	7c 01       	movw	r14, r24
    4e28:	81 2c       	mov	r8, r1
    4e2a:	91 2c       	mov	r9, r1
    4e2c:	90 e8       	ldi	r25, 0x80	; 128
    4e2e:	a9 2e       	mov	r10, r25
    4e30:	91 e4       	ldi	r25, 0x41	; 65
    4e32:	b9 2e       	mov	r11, r25
    4e34:	c1 14       	cp	r12, r1
    4e36:	f0 e1       	ldi	r31, 0x10	; 16
    4e38:	df 06       	cpc	r13, r31
    4e3a:	e1 04       	cpc	r14, r1
    4e3c:	f1 04       	cpc	r15, r1
    4e3e:	30 f0       	brcs	.+12     	; 0x4e4c <uart_ubr+0xe0>
    4e40:	cc 24       	eor	r12, r12
    4e42:	ca 94       	dec	r12
    4e44:	8f e0       	ldi	r24, 0x0F	; 15
    4e46:	d8 2e       	mov	r13, r24
    4e48:	e1 2c       	mov	r14, r1
    4e4a:	f1 2c       	mov	r15, r1
    4e4c:	c7 01       	movw	r24, r14
    4e4e:	b6 01       	movw	r22, r12
    4e50:	6f 5f       	subi	r22, 0xFF	; 255
    4e52:	7f 4f       	sbci	r23, 0xFF	; 255
    4e54:	8f 4f       	sbci	r24, 0xFF	; 255
    4e56:	9f 4f       	sbci	r25, 0xFF	; 255
    4e58:	0e 94 99 e4 	call	0x1c932	; 0x1c932 <__floatunsisf>
    4e5c:	a5 01       	movw	r20, r10
    4e5e:	94 01       	movw	r18, r8
    4e60:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <__mulsf3>
    4e64:	9b 01       	movw	r18, r22
    4e66:	ac 01       	movw	r20, r24
    4e68:	60 e8       	ldi	r22, 0x80	; 128
    4e6a:	76 e9       	ldi	r23, 0x96	; 150
    4e6c:	88 e9       	ldi	r24, 0x98	; 152
    4e6e:	9b e4       	ldi	r25, 0x4B	; 75
    4e70:	0e 94 00 e4 	call	0x1c800	; 0x1c800 <__divsf3>
    4e74:	0e 94 6d e4 	call	0x1c8da	; 0x1c8da <__fixunssfsi>
    4e78:	68 83       	st	Y, r22
    4e7a:	79 83       	std	Y+1, r23	; 0x01
    4e7c:	8a 83       	std	Y+2, r24	; 0x02
    4e7e:	9b 83       	std	Y+3, r25	; 0x03
    4e80:	c6 01       	movw	r24, r12
    4e82:	df 91       	pop	r29
    4e84:	cf 91       	pop	r28
    4e86:	ff 90       	pop	r15
    4e88:	ef 90       	pop	r14
    4e8a:	df 90       	pop	r13
    4e8c:	cf 90       	pop	r12
    4e8e:	bf 90       	pop	r11
    4e90:	af 90       	pop	r10
    4e92:	9f 90       	pop	r9
    4e94:	8f 90       	pop	r8
    4e96:	7f 90       	pop	r7
    4e98:	6f 90       	pop	r6
    4e9a:	5f 90       	pop	r5
    4e9c:	4f 90       	pop	r4
    4e9e:	08 95       	ret

00004ea0 <uart_init>:
    4ea0:	a6 e0       	ldi	r26, 0x06	; 6
    4ea2:	b0 e0       	ldi	r27, 0x00	; 0
    4ea4:	e6 e5       	ldi	r30, 0x56	; 86
    4ea6:	f7 e2       	ldi	r31, 0x27	; 39
    4ea8:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
    4eac:	1e 82       	std	Y+6, r1	; 0x06
    4eae:	1d 82       	std	Y+5, r1	; 0x05
    4eb0:	81 11       	cpse	r24, r1
    4eb2:	36 c0       	rjmp	.+108    	; 0x4f20 <uart_init+0x80>
    4eb4:	cb 01       	movw	r24, r22
    4eb6:	ba 01       	movw	r22, r20
    4eb8:	9e 01       	movw	r18, r28
    4eba:	2f 5f       	subi	r18, 0xFF	; 255
    4ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    4ebe:	ae 01       	movw	r20, r28
    4ec0:	4b 5f       	subi	r20, 0xFB	; 251
    4ec2:	5f 4f       	sbci	r21, 0xFF	; 255
    4ec4:	53 df       	rcall	.-346    	; 0x4d6c <uart_ubr>
    4ec6:	f8 94       	cli
    4ec8:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x4>
    4ecc:	10 92 ef 19 	sts	0x19EF, r1	; 0x8019ef <uarts+0x3>
    4ed0:	10 92 ec 19 	sts	0x19EC, r1	; 0x8019ec <uarts>
    4ed4:	10 92 ed 19 	sts	0x19ED, r1	; 0x8019ed <uarts+0x1>
    4ed8:	10 92 ee 19 	sts	0x19EE, r1	; 0x8019ee <uarts+0x2>
    4edc:	10 92 f1 19 	sts	0x19F1, r1	; 0x8019f1 <uarts+0x5>
    4ee0:	78 94       	sei
    4ee2:	f8 94       	cli
    4ee4:	58 9a       	sbi	0x0b, 0	; 11
    4ee6:	59 9a       	sbi	0x0b, 1	; 11
    4ee8:	50 98       	cbi	0x0a, 0	; 10
    4eea:	51 9a       	sbi	0x0a, 1	; 10
    4eec:	28 e9       	ldi	r18, 0x98	; 152
    4eee:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    4ef2:	2d 81       	ldd	r18, Y+5	; 0x05
    4ef4:	3e 81       	ldd	r19, Y+6	; 0x06
    4ef6:	23 2b       	or	r18, r19
    4ef8:	19 f0       	breq	.+6      	; 0x4f00 <uart_init+0x60>
    4efa:	22 e0       	ldi	r18, 0x02	; 2
    4efc:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4f00:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    4f04:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    4f08:	78 94       	sei
    4f0a:	69 e4       	ldi	r22, 0x49	; 73
    4f0c:	78 e2       	ldi	r23, 0x28	; 40
    4f0e:	8e e5       	ldi	r24, 0x5E	; 94
    4f10:	98 e2       	ldi	r25, 0x28	; 40
    4f12:	0e 94 a1 77 	call	0xef42	; 0xef42 <fdevopen>
    4f16:	69 81       	ldd	r22, Y+1	; 0x01
    4f18:	7a 81       	ldd	r23, Y+2	; 0x02
    4f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    4f1e:	03 c0       	rjmp	.+6      	; 0x4f26 <uart_init+0x86>
    4f20:	60 e0       	ldi	r22, 0x00	; 0
    4f22:	70 e0       	ldi	r23, 0x00	; 0
    4f24:	cb 01       	movw	r24, r22
    4f26:	26 96       	adiw	r28, 0x06	; 6
    4f28:	e2 e0       	ldi	r30, 0x02	; 2
    4f2a:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00004f2e <uart_rx_interrupt>:
    4f2e:	cf 93       	push	r28
    4f30:	df 93       	push	r29
    4f32:	27 e5       	ldi	r18, 0x57	; 87
    4f34:	82 9f       	mul	r24, r18
    4f36:	c0 01       	movw	r24, r0
    4f38:	11 24       	eor	r1, r1
    4f3a:	fc 01       	movw	r30, r24
    4f3c:	e4 51       	subi	r30, 0x14	; 20
    4f3e:	f6 4e       	sbci	r31, 0xE6	; 230
    4f40:	83 81       	ldd	r24, Z+3	; 0x03
    4f42:	94 81       	ldd	r25, Z+4	; 0x04
    4f44:	80 35       	cpi	r24, 0x50	; 80
    4f46:	91 05       	cpc	r25, r1
    4f48:	84 f4       	brge	.+32     	; 0x4f6a <uart_rx_interrupt+0x3c>
    4f4a:	30 81       	ld	r19, Z
    4f4c:	21 e0       	ldi	r18, 0x01	; 1
    4f4e:	23 0f       	add	r18, r19
    4f50:	20 83       	st	Z, r18
    4f52:	ef 01       	movw	r28, r30
    4f54:	c3 0f       	add	r28, r19
    4f56:	d1 1d       	adc	r29, r1
    4f58:	6f 77       	andi	r22, 0x7F	; 127
    4f5a:	6e 83       	std	Y+6, r22	; 0x06
    4f5c:	01 96       	adiw	r24, 0x01	; 1
    4f5e:	94 83       	std	Z+4, r25	; 0x04
    4f60:	83 83       	std	Z+3, r24	; 0x03
    4f62:	20 35       	cpi	r18, 0x50	; 80
    4f64:	28 f0       	brcs	.+10     	; 0x4f70 <uart_rx_interrupt+0x42>
    4f66:	10 82       	st	Z, r1
    4f68:	03 c0       	rjmp	.+6      	; 0x4f70 <uart_rx_interrupt+0x42>
    4f6a:	85 81       	ldd	r24, Z+5	; 0x05
    4f6c:	81 60       	ori	r24, 0x01	; 1
    4f6e:	85 83       	std	Z+5, r24	; 0x05
    4f70:	df 91       	pop	r29
    4f72:	cf 91       	pop	r28
    4f74:	08 95       	ret

00004f76 <__vector_20>:
    4f76:	1f 92       	push	r1
    4f78:	0f 92       	push	r0
    4f7a:	0f b6       	in	r0, 0x3f	; 63
    4f7c:	0f 92       	push	r0
    4f7e:	11 24       	eor	r1, r1
    4f80:	0b b6       	in	r0, 0x3b	; 59
    4f82:	0f 92       	push	r0
    4f84:	2f 93       	push	r18
    4f86:	3f 93       	push	r19
    4f88:	4f 93       	push	r20
    4f8a:	5f 93       	push	r21
    4f8c:	6f 93       	push	r22
    4f8e:	7f 93       	push	r23
    4f90:	8f 93       	push	r24
    4f92:	9f 93       	push	r25
    4f94:	af 93       	push	r26
    4f96:	bf 93       	push	r27
    4f98:	ef 93       	push	r30
    4f9a:	ff 93       	push	r31
    4f9c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    4fa0:	80 e0       	ldi	r24, 0x00	; 0
    4fa2:	c5 df       	rcall	.-118    	; 0x4f2e <uart_rx_interrupt>
    4fa4:	ff 91       	pop	r31
    4fa6:	ef 91       	pop	r30
    4fa8:	bf 91       	pop	r27
    4faa:	af 91       	pop	r26
    4fac:	9f 91       	pop	r25
    4fae:	8f 91       	pop	r24
    4fb0:	7f 91       	pop	r23
    4fb2:	6f 91       	pop	r22
    4fb4:	5f 91       	pop	r21
    4fb6:	4f 91       	pop	r20
    4fb8:	3f 91       	pop	r19
    4fba:	2f 91       	pop	r18
    4fbc:	0f 90       	pop	r0
    4fbe:	0b be       	out	0x3b, r0	; 59
    4fc0:	0f 90       	pop	r0
    4fc2:	0f be       	out	0x3f, r0	; 63
    4fc4:	0f 90       	pop	r0
    4fc6:	1f 90       	pop	r1
    4fc8:	18 95       	reti

00004fca <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    4fca:	81 11       	cpse	r24, r1
    4fcc:	07 c0       	rjmp	.+14     	; 0x4fdc <uart_rx_count+0x12>
        return(EOF);

    cli();
    4fce:	f8 94       	cli

    count = uarts[uart].rx_count;
    4fd0:	80 91 ef 19 	lds	r24, 0x19EF	; 0x8019ef <uarts+0x3>
    4fd4:	90 91 f0 19 	lds	r25, 0x19F0	; 0x8019f0 <uarts+0x4>

    sei();
    4fd8:	78 94       	sei

    return (count );
    4fda:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    4fdc:	8f ef       	ldi	r24, 0xFF	; 255
    4fde:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    4fe0:	08 95       	ret

00004fe2 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    4fe2:	81 11       	cpse	r24, r1
    4fe4:	21 c0       	rjmp	.+66     	; 0x5028 <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    4fe6:	80 e0       	ldi	r24, 0x00	; 0
    4fe8:	f0 df       	rcall	.-32     	; 0x4fca <uart_rx_count>
    4fea:	18 16       	cp	r1, r24
    4fec:	19 06       	cpc	r1, r25
    4fee:	dc f7       	brge	.-10     	; 0x4fe6 <uart_get_tail+0x4>
        ;

    cli();
    4ff0:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    4ff2:	e0 91 ed 19 	lds	r30, 0x19ED	; 0x8019ed <uarts+0x1>
    4ff6:	91 e0       	ldi	r25, 0x01	; 1
    4ff8:	9e 0f       	add	r25, r30
    4ffa:	90 93 ed 19 	sts	0x19ED, r25	; 0x8019ed <uarts+0x1>
    4ffe:	f0 e0       	ldi	r31, 0x00	; 0
    5000:	e4 51       	subi	r30, 0x14	; 20
    5002:	f6 4e       	sbci	r31, 0xE6	; 230
    5004:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    5006:	90 35       	cpi	r25, 0x50	; 80
    5008:	10 f0       	brcs	.+4      	; 0x500e <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    500a:	10 92 ed 19 	sts	0x19ED, r1	; 0x8019ed <uarts+0x1>
    uarts[uart].rx_count--;
    500e:	20 91 ef 19 	lds	r18, 0x19EF	; 0x8019ef <uarts+0x3>
    5012:	30 91 f0 19 	lds	r19, 0x19F0	; 0x8019f0 <uarts+0x4>
    5016:	21 50       	subi	r18, 0x01	; 1
    5018:	31 09       	sbc	r19, r1
    501a:	30 93 f0 19 	sts	0x19F0, r19	; 0x8019f0 <uarts+0x4>
    501e:	20 93 ef 19 	sts	0x19EF, r18	; 0x8019ef <uarts+0x3>
    sei();
    5022:	78 94       	sei

    return (c & 0xff);
    5024:	90 e0       	ldi	r25, 0x00	; 0
    5026:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    5028:	8f ef       	ldi	r24, 0xFF	; 255
    502a:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    502c:	08 95       	ret

0000502e <uart_rx_byte>:
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    return( uart_get_tail(uart) & 0xff);
    502e:	d9 df       	rcall	.-78     	; 0x4fe2 <uart_get_tail>
}
    5030:	99 27       	eor	r25, r25
    5032:	08 95       	ret

00005034 <uart_tx_byte>:
/// @param[in] uart: uart number.
///
/// @return void.
int uart_tx_byte(int c, uint8_t uart)
{
    if(uart == 0)
    5034:	61 11       	cpse	r22, r1
    5036:	09 c0       	rjmp	.+18     	; 0x504a <uart_tx_byte+0x16>
    {
        while (!BIT_TST(UCSR0A, UDRE0))
    5038:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    503c:	25 ff       	sbrs	r18, 5
    503e:	fc cf       	rjmp	.-8      	; 0x5038 <uart_tx_byte+0x4>
            ;
        UDR0 = c & 0x7f;
    5040:	28 2f       	mov	r18, r24
    5042:	2f 77       	andi	r18, 0x7F	; 127
    5044:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        return(c);
    5048:	08 95       	ret
    }
#ifdef UARTS > 1
    if(uart == 1)
    504a:	61 30       	cpi	r22, 0x01	; 1
    504c:	49 f4       	brne	.+18     	; 0x5060 <uart_tx_byte+0x2c>
    {
        while (!BIT_TST(UCSR1A, UDRE1))
    504e:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5052:	25 ff       	sbrs	r18, 5
    5054:	fc cf       	rjmp	.-8      	; 0x504e <uart_tx_byte+0x1a>
            ;
        UDR1 = c & 0x7f;
    5056:	28 2f       	mov	r18, r24
    5058:	2f 77       	andi	r18, 0x7F	; 127
    505a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    505e:	08 95       	ret
        return(c);
    }
#endif
    return(EOF);
    5060:	8f ef       	ldi	r24, 0xFF	; 255
    5062:	9f ef       	ldi	r25, 0xFF	; 255
}
    5064:	08 95       	ret

00005066 <uart_getchar>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_getchar(uint8_t uart)
{
    5066:	cf 93       	push	r28
    uint8_t c;

    if(uart >= UARTS)
    5068:	81 11       	cpse	r24, r1
    506a:	0f c0       	rjmp	.+30     	; 0x508a <uart_getchar+0x24>
        break;
    }
    if(c == '\r')
        c = '\n';
#endif
    c = uart_rx_byte(uart);
    506c:	e0 df       	rcall	.-64     	; 0x502e <uart_rx_byte>
    506e:	c8 2f       	mov	r28, r24
    uart_tx_byte(c, uart);
    5070:	60 e0       	ldi	r22, 0x00	; 0
    5072:	90 e0       	ldi	r25, 0x00	; 0
    5074:	df df       	rcall	.-66     	; 0x5034 <uart_tx_byte>
    if(c == '\r')
    5076:	cd 30       	cpi	r28, 0x0D	; 13
    5078:	29 f4       	brne	.+10     	; 0x5084 <uart_getchar+0x1e>
    {
        c = '\n';
        uart_tx_byte(c, uart);
    507a:	60 e0       	ldi	r22, 0x00	; 0
    507c:	8a e0       	ldi	r24, 0x0A	; 10
    507e:	90 e0       	ldi	r25, 0x00	; 0
    5080:	d9 df       	rcall	.-78     	; 0x5034 <uart_tx_byte>
#endif
    c = uart_rx_byte(uart);
    uart_tx_byte(c, uart);
    if(c == '\r')
    {
        c = '\n';
    5082:	ca e0       	ldi	r28, 0x0A	; 10
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
    5084:	8c 2f       	mov	r24, r28
    5086:	90 e0       	ldi	r25, 0x00	; 0
    5088:	02 c0       	rjmp	.+4      	; 0x508e <uart_getchar+0x28>
int uart_getchar(uint8_t uart)
{
    uint8_t c;

    if(uart >= UARTS)
        return(EOF);
    508a:	8f ef       	ldi	r24, 0xFF	; 255
    508c:	9f ef       	ldi	r25, 0xFF	; 255
        c = '\n';
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
}
    508e:	cf 91       	pop	r28
    5090:	08 95       	ret

00005092 <uart0_getchar>:
///
/// @return  uart_getchar(0);.
/// @see fdevopen() from avr-libc.
int uart0_getchar( void *f  __attribute__((unused)))
{
    return( uart_getchar(0) );
    5092:	80 e0       	ldi	r24, 0x00	; 0
    5094:	e8 cf       	rjmp	.-48     	; 0x5066 <uart_getchar>
}
    5096:	08 95       	ret

00005098 <uart_putchar>:
/// @param[in] c: transmit character.
/// @param[in] uart: uart number.
///
/// @return void.
int uart_putchar(int c, int uart)
{
    5098:	1f 93       	push	r17
    509a:	cf 93       	push	r28
    509c:	df 93       	push	r29
    509e:	ec 01       	movw	r28, r24
    50a0:	16 2f       	mov	r17, r22
    uart_tx_byte(c, uart);
    50a2:	c8 df       	rcall	.-112    	; 0x5034 <uart_tx_byte>

    if( c == '\n' )
    50a4:	ca 30       	cpi	r28, 0x0A	; 10
    50a6:	d1 05       	cpc	r29, r1
    50a8:	21 f4       	brne	.+8      	; 0x50b2 <uart_putchar+0x1a>
        uart_tx_byte('\r', uart);
    50aa:	61 2f       	mov	r22, r17
    50ac:	8d e0       	ldi	r24, 0x0D	; 13
    50ae:	90 e0       	ldi	r25, 0x00	; 0
    50b0:	c1 df       	rcall	.-126    	; 0x5034 <uart_tx_byte>

    return(c);
}
    50b2:	ce 01       	movw	r24, r28
    50b4:	df 91       	pop	r29
    50b6:	cf 91       	pop	r28
    50b8:	1f 91       	pop	r17
    50ba:	08 95       	ret

000050bc <uart0_putchar>:
/// @param[in] f: unused FILE *stream pointer.
///
/// @return  uart_putchar(c, 0);.
/// @see fdevopen() from avr-libc.
int uart0_putchar(int c, void *f  __attribute__((unused)))
{
    50bc:	cf 93       	push	r28
    50be:	df 93       	push	r29
    50c0:	ec 01       	movw	r28, r24
    uart_putchar(c, 0);
    50c2:	60 e0       	ldi	r22, 0x00	; 0
    50c4:	70 e0       	ldi	r23, 0x00	; 0
    50c6:	e8 df       	rcall	.-48     	; 0x5098 <uart_putchar>
    return(c);
}
    50c8:	ce 01       	movw	r24, r28
    50ca:	df 91       	pop	r29
    50cc:	cf 91       	pop	r28
    50ce:	08 95       	ret

000050d0 <uart_keyhit>:
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
    return ( uart_rx_count( uart ) );
    50d0:	7c cf       	rjmp	.-264    	; 0x4fca <uart_rx_count>
}
    50d2:	08 95       	ret

000050d4 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    50d4:	cf 92       	push	r12
    50d6:	df 92       	push	r13
    50d8:	ef 92       	push	r14
    50da:	ff 92       	push	r15
    50dc:	6b 01       	movw	r12, r22
    50de:	7c 01       	movw	r14, r24
    50e0:	80 91 4f 17 	lds	r24, 0x174F	; 0x80174f <SPI0_Speed_value>
    50e4:	90 91 50 17 	lds	r25, 0x1750	; 0x801750 <SPI0_Speed_value+0x1>
    50e8:	a0 91 51 17 	lds	r26, 0x1751	; 0x801751 <SPI0_Speed_value+0x2>
    50ec:	b0 91 52 17 	lds	r27, 0x1752	; 0x801752 <SPI0_Speed_value+0x3>
    50f0:	8c 15       	cp	r24, r12
    50f2:	9d 05       	cpc	r25, r13
    50f4:	ae 05       	cpc	r26, r14
    50f6:	bf 05       	cpc	r27, r15
    50f8:	09 f4       	brne	.+2      	; 0x50fc <SPI0_Speed+0x28>
    50fa:	4e c0       	rjmp	.+156    	; 0x5198 <SPI0_Speed+0xc4>
    50fc:	60 e0       	ldi	r22, 0x00	; 0
    50fe:	7d e2       	ldi	r23, 0x2D	; 45
    5100:	81 e3       	ldi	r24, 0x31	; 49
    5102:	91 e0       	ldi	r25, 0x01	; 1
    5104:	a7 01       	movw	r20, r14
    5106:	96 01       	movw	r18, r12
    5108:	0e 94 d1 e2 	call	0x1c5a2	; 0x1c5a2 <__udivmodsi4>
    510c:	20 38       	cpi	r18, 0x80	; 128
    510e:	31 05       	cpc	r19, r1
    5110:	41 05       	cpc	r20, r1
    5112:	51 05       	cpc	r21, r1
    5114:	28 f4       	brcc	.+10     	; 0x5120 <SPI0_Speed+0x4c>
    5116:	20 34       	cpi	r18, 0x40	; 64
    5118:	31 05       	cpc	r19, r1
    511a:	41 05       	cpc	r20, r1
    511c:	51 05       	cpc	r21, r1
    511e:	30 f0       	brcs	.+12     	; 0x512c <SPI0_Speed+0x58>
    5120:	8d b5       	in	r24, 0x2d	; 45
    5122:	8e 7f       	andi	r24, 0xFE	; 254
    5124:	8d bd       	out	0x2d, r24	; 45
    5126:	8c b5       	in	r24, 0x2c	; 44
    5128:	82 60       	ori	r24, 0x02	; 2
    512a:	1b c0       	rjmp	.+54     	; 0x5162 <SPI0_Speed+0x8e>
    512c:	8d b5       	in	r24, 0x2d	; 45
    512e:	20 32       	cpi	r18, 0x20	; 32
    5130:	31 05       	cpc	r19, r1
    5132:	41 05       	cpc	r20, r1
    5134:	51 05       	cpc	r21, r1
    5136:	28 f0       	brcs	.+10     	; 0x5142 <SPI0_Speed+0x6e>
    5138:	81 60       	ori	r24, 0x01	; 1
    513a:	8d bd       	out	0x2d, r24	; 45
    513c:	8c b5       	in	r24, 0x2c	; 44
    513e:	82 60       	ori	r24, 0x02	; 2
    5140:	1f c0       	rjmp	.+62     	; 0x5180 <SPI0_Speed+0xac>
    5142:	20 31       	cpi	r18, 0x10	; 16
    5144:	31 05       	cpc	r19, r1
    5146:	41 05       	cpc	r20, r1
    5148:	51 05       	cpc	r21, r1
    514a:	10 f0       	brcs	.+4      	; 0x5150 <SPI0_Speed+0x7c>
    514c:	8e 7f       	andi	r24, 0xFE	; 254
    514e:	06 c0       	rjmp	.+12     	; 0x515c <SPI0_Speed+0x88>
    5150:	28 30       	cpi	r18, 0x08	; 8
    5152:	31 05       	cpc	r19, r1
    5154:	41 05       	cpc	r20, r1
    5156:	51 05       	cpc	r21, r1
    5158:	40 f0       	brcs	.+16     	; 0x516a <SPI0_Speed+0x96>
    515a:	81 60       	ori	r24, 0x01	; 1
    515c:	8d bd       	out	0x2d, r24	; 45
    515e:	8c b5       	in	r24, 0x2c	; 44
    5160:	8d 7f       	andi	r24, 0xFD	; 253
    5162:	8c bd       	out	0x2c, r24	; 44
    5164:	8c b5       	in	r24, 0x2c	; 44
    5166:	81 60       	ori	r24, 0x01	; 1
    5168:	0e c0       	rjmp	.+28     	; 0x5186 <SPI0_Speed+0xb2>
    516a:	24 30       	cpi	r18, 0x04	; 4
    516c:	31 05       	cpc	r19, r1
    516e:	41 05       	cpc	r20, r1
    5170:	51 05       	cpc	r21, r1
    5172:	10 f0       	brcs	.+4      	; 0x5178 <SPI0_Speed+0xa4>
    5174:	8e 7f       	andi	r24, 0xFE	; 254
    5176:	01 c0       	rjmp	.+2      	; 0x517a <SPI0_Speed+0xa6>
    5178:	81 60       	ori	r24, 0x01	; 1
    517a:	8d bd       	out	0x2d, r24	; 45
    517c:	8c b5       	in	r24, 0x2c	; 44
    517e:	8d 7f       	andi	r24, 0xFD	; 253
    5180:	8c bd       	out	0x2c, r24	; 44
    5182:	8c b5       	in	r24, 0x2c	; 44
    5184:	8e 7f       	andi	r24, 0xFE	; 254
    5186:	8c bd       	out	0x2c, r24	; 44
    5188:	c0 92 4f 17 	sts	0x174F, r12	; 0x80174f <SPI0_Speed_value>
    518c:	d0 92 50 17 	sts	0x1750, r13	; 0x801750 <SPI0_Speed_value+0x1>
    5190:	e0 92 51 17 	sts	0x1751, r14	; 0x801751 <SPI0_Speed_value+0x2>
    5194:	f0 92 52 17 	sts	0x1752, r15	; 0x801752 <SPI0_Speed_value+0x3>
    5198:	ff 90       	pop	r15
    519a:	ef 90       	pop	r14
    519c:	df 90       	pop	r13
    519e:	cf 90       	pop	r12
    51a0:	08 95       	ret

000051a2 <SPI0_Mode>:
    51a2:	cf 93       	push	r28
    51a4:	df 93       	push	r29
    51a6:	00 d0       	rcall	.+0      	; 0x51a8 <SPI0_Mode+0x6>
    51a8:	00 d0       	rcall	.+0      	; 0x51aa <SPI0_Mode+0x8>
    51aa:	1f 92       	push	r1
    51ac:	ec 01       	movw	r28, r24
    51ae:	81 30       	cpi	r24, 0x01	; 1
    51b0:	91 05       	cpc	r25, r1
    51b2:	71 f0       	breq	.+28     	; 0x51d0 <SPI0_Mode+0x2e>
    51b4:	2c f4       	brge	.+10     	; 0x51c0 <SPI0_Mode+0x1e>
    51b6:	89 2b       	or	r24, r25
    51b8:	c1 f4       	brne	.+48     	; 0x51ea <SPI0_Mode+0x48>
    51ba:	8c b5       	in	r24, 0x2c	; 44
    51bc:	87 7f       	andi	r24, 0xF7	; 247
    51be:	11 c0       	rjmp	.+34     	; 0x51e2 <SPI0_Mode+0x40>
    51c0:	82 30       	cpi	r24, 0x02	; 2
    51c2:	91 05       	cpc	r25, r1
    51c4:	61 f0       	breq	.+24     	; 0x51de <SPI0_Mode+0x3c>
    51c6:	03 97       	sbiw	r24, 0x03	; 3
    51c8:	81 f4       	brne	.+32     	; 0x51ea <SPI0_Mode+0x48>
    51ca:	8c b5       	in	r24, 0x2c	; 44
    51cc:	88 60       	ori	r24, 0x08	; 8
    51ce:	02 c0       	rjmp	.+4      	; 0x51d4 <SPI0_Mode+0x32>
    51d0:	8c b5       	in	r24, 0x2c	; 44
    51d2:	87 7f       	andi	r24, 0xF7	; 247
    51d4:	8c bd       	out	0x2c, r24	; 44
    51d6:	8c b5       	in	r24, 0x2c	; 44
    51d8:	84 60       	ori	r24, 0x04	; 4
    51da:	8c bd       	out	0x2c, r24	; 44
    51dc:	12 c0       	rjmp	.+36     	; 0x5202 <SPI0_Mode+0x60>
    51de:	8c b5       	in	r24, 0x2c	; 44
    51e0:	88 60       	ori	r24, 0x08	; 8
    51e2:	8c bd       	out	0x2c, r24	; 44
    51e4:	8c b5       	in	r24, 0x2c	; 44
    51e6:	8b 7f       	andi	r24, 0xFB	; 251
    51e8:	f8 cf       	rjmp	.-16     	; 0x51da <SPI0_Mode+0x38>
    51ea:	ed b7       	in	r30, 0x3d	; 61
    51ec:	fe b7       	in	r31, 0x3e	; 62
    51ee:	d5 83       	std	Z+5, r29	; 0x05
    51f0:	c4 83       	std	Z+4, r28	; 0x04
    51f2:	84 e1       	ldi	r24, 0x14	; 20
    51f4:	93 e0       	ldi	r25, 0x03	; 3
    51f6:	a0 e0       	ldi	r26, 0x00	; 0
    51f8:	81 83       	std	Z+1, r24	; 0x01
    51fa:	92 83       	std	Z+2, r25	; 0x02
    51fc:	a3 83       	std	Z+3, r26	; 0x03
    51fe:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    5202:	d0 93 4e 17 	sts	0x174E, r29	; 0x80174e <SPI0_Mode_value+0x1>
    5206:	c0 93 4d 17 	sts	0x174D, r28	; 0x80174d <SPI0_Mode_value>
    520a:	cd b7       	in	r28, 0x3d	; 61
    520c:	de b7       	in	r29, 0x3e	; 62
    520e:	25 96       	adiw	r28, 0x05	; 5
    5210:	e2 e0       	ldi	r30, 0x02	; 2
    5212:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00005216 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    5216:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    5218:	0d b4       	in	r0, 0x2d	; 45
    521a:	07 fe       	sbrs	r0, 7
    521c:	fd cf       	rjmp	.-6      	; 0x5218 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    521e:	8e b5       	in	r24, 0x2e	; 46
}
    5220:	08 95       	ret

00005222 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5222:	cf 92       	push	r12
    5224:	df 92       	push	r13
    5226:	ef 92       	push	r14
    5228:	ff 92       	push	r15
    522a:	cf 93       	push	r28
    522c:	df 93       	push	r29
    522e:	1f 92       	push	r1
    5230:	cd b7       	in	r28, 0x3d	; 61
    5232:	de b7       	in	r29, 0x3e	; 62
    5234:	6b 01       	movw	r12, r22
    5236:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    5238:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    523a:	2f 9a       	sbi	0x05, 7	; 5
    523c:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    523e:	2d 9a       	sbi	0x05, 5	; 5
    5240:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    5242:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    5244:	2c 98       	cbi	0x05, 4	; 5
    5246:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    5248:	8c b5       	in	r24, 0x2c	; 44
    524a:	80 61       	ori	r24, 0x10	; 16
    524c:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    524e:	8c b5       	in	r24, 0x2c	; 44
    5250:	80 64       	ori	r24, 0x40	; 64
    5252:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    5254:	8d b5       	in	r24, 0x2d	; 45
    5256:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    5258:	8e b5       	in	r24, 0x2e	; 46
    525a:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    525c:	80 e0       	ldi	r24, 0x00	; 0
    525e:	90 e0       	ldi	r25, 0x00	; 0
    5260:	a0 df       	rcall	.-192    	; 0x51a2 <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    5262:	c7 01       	movw	r24, r14
    5264:	b6 01       	movw	r22, r12
    5266:	36 df       	rcall	.-404    	; 0x50d4 <SPI0_Speed>

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    5268:	8f ef       	ldi	r24, 0xFF	; 255
    526a:	d5 df       	rcall	.-86     	; 0x5216 <SPI0_TXRX_Byte>
    526c:	0f 90       	pop	r0
    SPI0_Init_state = 1;

}
    526e:	df 91       	pop	r29
    5270:	cf 91       	pop	r28
    5272:	ff 90       	pop	r15
    5274:	ef 90       	pop	r14
    5276:	df 90       	pop	r13
    5278:	cf 90       	pop	r12
    527a:	08 95       	ret

0000527c <SPI0_TX>:
    527c:	0f 93       	push	r16
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    527e:	1f 93       	push	r17
    5280:	cf 93       	push	r28
    5282:	df 93       	push	r29
    5284:	8c 01       	movw	r16, r24
    5286:	eb 01       	movw	r28, r22

    while(count > 0)
    5288:	1c 16       	cp	r1, r28
    528a:	1d 06       	cpc	r1, r29
    528c:	34 f4       	brge	.+12     	; 0x529a <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    528e:	f8 01       	movw	r30, r16
    5290:	81 91       	ld	r24, Z+
    5292:	8f 01       	movw	r16, r30
    5294:	c0 df       	rcall	.-128    	; 0x5216 <SPI0_TXRX_Byte>
        ++data;
        --count;
    5296:	21 97       	sbiw	r28, 0x01	; 1
    5298:	f7 cf       	rjmp	.-18     	; 0x5288 <SPI0_TX+0xc>
    }
}
    529a:	df 91       	pop	r29
    529c:	cf 91       	pop	r28
    529e:	1f 91       	pop	r17
    52a0:	0f 91       	pop	r16
    52a2:	08 95       	ret

000052a4 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    52a4:	0f 93       	push	r16
    52a6:	1f 93       	push	r17
    52a8:	cf 93       	push	r28
    52aa:	df 93       	push	r29
    52ac:	8c 01       	movw	r16, r24
    52ae:	eb 01       	movw	r28, r22

    while(count > 0)
    52b0:	1c 16       	cp	r1, r28
    52b2:	1d 06       	cpc	r1, r29
    52b4:	44 f4       	brge	.+16     	; 0x52c6 <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    52b6:	f8 01       	movw	r30, r16
    52b8:	80 81       	ld	r24, Z
    52ba:	ad df       	rcall	.-166    	; 0x5216 <SPI0_TXRX_Byte>
    52bc:	f8 01       	movw	r30, r16
    52be:	81 93       	st	Z+, r24
    52c0:	8f 01       	movw	r16, r30
        ++data;
        --count;
    52c2:	21 97       	sbiw	r28, 0x01	; 1
    52c4:	f5 cf       	rjmp	.-22     	; 0x52b0 <SPI0_TXRX+0xc>
    }
}
    52c6:	df 91       	pop	r29
    52c8:	cf 91       	pop	r28
    52ca:	1f 91       	pop	r17
    52cc:	0f 91       	pop	r16
    52ce:	08 95       	ret

000052d0 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    52d0:	0f 93       	push	r16
    52d2:	1f 93       	push	r17
    52d4:	cf 93       	push	r28
    52d6:	df 93       	push	r29
    52d8:	8c 01       	movw	r16, r24
    52da:	eb 01       	movw	r28, r22

    while(count > 0)
    52dc:	1c 16       	cp	r1, r28
    52de:	1d 06       	cpc	r1, r29
    52e0:	3c f4       	brge	.+14     	; 0x52f0 <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    52e2:	8f ef       	ldi	r24, 0xFF	; 255
    52e4:	98 df       	rcall	.-208    	; 0x5216 <SPI0_TXRX_Byte>
    52e6:	f8 01       	movw	r30, r16
    52e8:	81 93       	st	Z+, r24
    52ea:	8f 01       	movw	r16, r30
        ++data;
        --count;
    52ec:	21 97       	sbiw	r28, 0x01	; 1
    52ee:	f6 cf       	rjmp	.-20     	; 0x52dc <SPI0_RX+0xc>
    }
}
    52f0:	df 91       	pop	r29
    52f2:	cf 91       	pop	r28
    52f4:	1f 91       	pop	r17
    52f6:	0f 91       	pop	r16
    52f8:	08 95       	ret

000052fa <i2c_timer>:
int8_t i2c_ok()
{
	if (i2c.flags) 
		return(0);
	return(1);
}
    52fa:	2f b7       	in	r18, 0x3f	; 63
    52fc:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <i2c+0x1>
    5300:	81 11       	cpse	r24, r1
    5302:	04 c0       	rjmp	.+8      	; 0x530c <i2c_timer+0x12>
    5304:	80 91 45 1a 	lds	r24, 0x1A45	; 0x801a45 <i2c+0x2>
    5308:	81 11       	cpse	r24, r1
    530a:	0b c0       	rjmp	.+22     	; 0x5322 <i2c_timer+0x28>
    530c:	80 91 47 1a 	lds	r24, 0x1A47	; 0x801a47 <i2c+0x4>
    5310:	90 91 48 1a 	lds	r25, 0x1A48	; 0x801a48 <i2c+0x5>
    5314:	00 97       	sbiw	r24, 0x00	; 0
    5316:	29 f0       	breq	.+10     	; 0x5322 <i2c_timer+0x28>
    5318:	01 97       	sbiw	r24, 0x01	; 1
    531a:	90 93 48 1a 	sts	0x1A48, r25	; 0x801a48 <i2c+0x5>
    531e:	80 93 47 1a 	sts	0x1A47, r24	; 0x801a47 <i2c+0x4>
    5322:	2f bf       	out	0x3f, r18	; 63
    5324:	08 95       	ret

00005326 <i2c_check_op>:
    5326:	ad b7       	in	r26, 0x3d	; 61
    5328:	be b7       	in	r27, 0x3e	; 62
    532a:	17 97       	sbiw	r26, 0x07	; 7
    532c:	0f b6       	in	r0, 0x3f	; 63
    532e:	f8 94       	cli
    5330:	be bf       	out	0x3e, r27	; 62
    5332:	0f be       	out	0x3f, r0	; 63
    5334:	ad bf       	out	0x3d, r26	; 61
    5336:	28 2f       	mov	r18, r24
    5338:	08 2e       	mov	r0, r24
    533a:	00 0c       	add	r0, r0
    533c:	33 0b       	sbc	r19, r19
    533e:	80 31       	cpi	r24, 0x10	; 16
    5340:	88 f0       	brcs	.+34     	; 0x5364 <i2c_check_op+0x3e>
    5342:	80 e1       	ldi	r24, 0x10	; 16
    5344:	90 e0       	ldi	r25, 0x00	; 0
    5346:	ed b7       	in	r30, 0x3d	; 61
    5348:	fe b7       	in	r31, 0x3e	; 62
    534a:	97 83       	std	Z+7, r25	; 0x07
    534c:	86 83       	std	Z+6, r24	; 0x06
    534e:	35 83       	std	Z+5, r19	; 0x05
    5350:	24 83       	std	Z+4, r18	; 0x04
    5352:	89 e2       	ldi	r24, 0x29	; 41
    5354:	94 e0       	ldi	r25, 0x04	; 4
    5356:	a0 e0       	ldi	r26, 0x00	; 0
    5358:	81 83       	std	Z+1, r24	; 0x01
    535a:	92 83       	std	Z+2, r25	; 0x02
    535c:	a3 83       	std	Z+3, r26	; 0x03
    535e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    5362:	24 c0       	rjmp	.+72     	; 0x53ac <i2c_check_op+0x86>
    5364:	f9 01       	movw	r30, r18
    5366:	ee 0f       	add	r30, r30
    5368:	ff 1f       	adc	r31, r31
    536a:	ec 5a       	subi	r30, 0xAC	; 172
    536c:	f8 4e       	sbci	r31, 0xE8	; 232
    536e:	01 90       	ld	r0, Z+
    5370:	f0 81       	ld	r31, Z
    5372:	e0 2d       	mov	r30, r0
    5374:	30 97       	sbiw	r30, 0x00	; 0
    5376:	d1 f0       	breq	.+52     	; 0x53ac <i2c_check_op+0x86>
    5378:	80 85       	ldd	r24, Z+8	; 0x08
    537a:	91 85       	ldd	r25, Z+9	; 0x09
    537c:	89 2b       	or	r24, r25
    537e:	39 f4       	brne	.+14     	; 0x538e <i2c_check_op+0x68>
    5380:	ed b7       	in	r30, 0x3d	; 61
    5382:	fe b7       	in	r31, 0x3e	; 62
    5384:	35 83       	std	Z+5, r19	; 0x05
    5386:	24 83       	std	Z+4, r18	; 0x04
    5388:	80 e1       	ldi	r24, 0x10	; 16
    538a:	94 e0       	ldi	r25, 0x04	; 4
    538c:	09 c0       	rjmp	.+18     	; 0x53a0 <i2c_check_op+0x7a>
    538e:	86 81       	ldd	r24, Z+6	; 0x06
    5390:	81 11       	cpse	r24, r1
    5392:	0e c0       	rjmp	.+28     	; 0x53b0 <i2c_check_op+0x8a>
    5394:	ed b7       	in	r30, 0x3d	; 61
    5396:	fe b7       	in	r31, 0x3e	; 62
    5398:	35 83       	std	Z+5, r19	; 0x05
    539a:	24 83       	std	Z+4, r18	; 0x04
    539c:	8a ef       	ldi	r24, 0xFA	; 250
    539e:	93 e0       	ldi	r25, 0x03	; 3
    53a0:	a0 e0       	ldi	r26, 0x00	; 0
    53a2:	81 83       	std	Z+1, r24	; 0x01
    53a4:	92 83       	std	Z+2, r25	; 0x02
    53a6:	a3 83       	std	Z+3, r26	; 0x03
    53a8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    53ac:	80 e0       	ldi	r24, 0x00	; 0
    53ae:	01 c0       	rjmp	.+2      	; 0x53b2 <i2c_check_op+0x8c>
    53b0:	81 e0       	ldi	r24, 0x01	; 1
    53b2:	ad b7       	in	r26, 0x3d	; 61
    53b4:	be b7       	in	r27, 0x3e	; 62
    53b6:	17 96       	adiw	r26, 0x07	; 7
    53b8:	0f b6       	in	r0, 0x3f	; 63
    53ba:	f8 94       	cli
    53bc:	be bf       	out	0x3e, r27	; 62
    53be:	0f be       	out	0x3f, r0	; 63
    53c0:	ad bf       	out	0x3d, r26	; 61
    53c2:	08 95       	ret

000053c4 <i2c_task_init>:
    53c4:	8f b7       	in	r24, 0x3f	; 63
    53c6:	f8 94       	cli
    53c8:	e4 e5       	ldi	r30, 0x54	; 84
    53ca:	f7 e1       	ldi	r31, 0x17	; 23
    53cc:	11 92       	st	Z+, r1
    53ce:	11 92       	st	Z+, r1
    53d0:	97 e1       	ldi	r25, 0x17	; 23
    53d2:	e4 37       	cpi	r30, 0x74	; 116
    53d4:	f9 07       	cpc	r31, r25
    53d6:	d1 f7       	brne	.-12     	; 0x53cc <i2c_task_init+0x8>
    53d8:	10 92 74 17 	sts	0x1774, r1	; 0x801774 <i2c_task>
    53dc:	91 e0       	ldi	r25, 0x01	; 1
    53de:	90 93 76 17 	sts	0x1776, r25	; 0x801776 <i2c_task+0x2>
    53e2:	10 92 75 17 	sts	0x1775, r1	; 0x801775 <i2c_task+0x1>
    53e6:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <i2c_task+0x3>
    53ea:	8f bf       	out	0x3f, r24	; 63
    53ec:	08 95       	ret

000053ee <i2c_task_op_add>:
    53ee:	ef 92       	push	r14
    53f0:	ff 92       	push	r15
    53f2:	0f 93       	push	r16
    53f4:	1f 93       	push	r17
    53f6:	cf 93       	push	r28
    53f8:	df 93       	push	r29
    53fa:	d8 2f       	mov	r29, r24
    53fc:	c6 2f       	mov	r28, r22
    53fe:	7a 01       	movw	r14, r20
    5400:	02 2f       	mov	r16, r18
    5402:	1f b7       	in	r17, 0x3f	; 63
    5404:	6a e0       	ldi	r22, 0x0A	; 10
    5406:	70 e0       	ldi	r23, 0x00	; 0
    5408:	81 e0       	ldi	r24, 0x01	; 1
    540a:	90 e0       	ldi	r25, 0x00	; 0
    540c:	a8 db       	rcall	.-2224   	; 0x4b5e <safecalloc>
    540e:	fc 01       	movw	r30, r24
    5410:	89 2b       	or	r24, r25
    5412:	89 f0       	breq	.+34     	; 0x5436 <i2c_task_op_add+0x48>
    5414:	f8 94       	cli
    5416:	11 82       	std	Z+1, r1	; 0x01
    5418:	12 82       	std	Z+2, r1	; 0x02
    541a:	dd 0f       	add	r29, r29
    541c:	c1 70       	andi	r28, 0x01	; 1
    541e:	cd 2b       	or	r28, r29
    5420:	c0 83       	st	Z, r28
    5422:	8a e0       	ldi	r24, 0x0A	; 10
    5424:	90 e0       	ldi	r25, 0x00	; 0
    5426:	95 83       	std	Z+5, r25	; 0x05
    5428:	84 83       	std	Z+4, r24	; 0x04
    542a:	13 82       	std	Z+3, r1	; 0x03
    542c:	06 83       	std	Z+6, r16	; 0x06
    542e:	17 82       	std	Z+7, r1	; 0x07
    5430:	f1 86       	std	Z+9, r15	; 0x09
    5432:	e0 86       	std	Z+8, r14	; 0x08
    5434:	1f bf       	out	0x3f, r17	; 63
    5436:	cf 01       	movw	r24, r30
    5438:	cd b7       	in	r28, 0x3d	; 61
    543a:	de b7       	in	r29, 0x3e	; 62
    543c:	e6 e0       	ldi	r30, 0x06	; 6
    543e:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

00005442 <i2c_init>:
    5442:	cf 93       	push	r28
    5444:	00 d0       	rcall	.+0      	; 0x5446 <i2c_init+0x4>
    5446:	1f 92       	push	r1
    5448:	9b 01       	movw	r18, r22
    544a:	ac 01       	movw	r20, r24
    544c:	cf b7       	in	r28, 0x3f	; 63
    544e:	60 e0       	ldi	r22, 0x00	; 0
    5450:	7d e2       	ldi	r23, 0x2D	; 45
    5452:	81 e3       	ldi	r24, 0x31	; 49
    5454:	91 e0       	ldi	r25, 0x01	; 1
    5456:	0e 94 d1 e2 	call	0x1c5a2	; 0x1c5a2 <__udivmodsi4>
    545a:	da 01       	movw	r26, r20
    545c:	c9 01       	movw	r24, r18
    545e:	40 97       	sbiw	r24, 0x10	; 16
    5460:	a1 09       	sbc	r26, r1
    5462:	b1 09       	sbc	r27, r1
    5464:	ac 01       	movw	r20, r24
    5466:	bd 01       	movw	r22, r26
    5468:	76 95       	lsr	r23
    546a:	67 95       	ror	r22
    546c:	57 95       	ror	r21
    546e:	47 95       	ror	r20
    5470:	ca 01       	movw	r24, r20
    5472:	88 27       	eor	r24, r24
    5474:	89 2b       	or	r24, r25
    5476:	59 f0       	breq	.+22     	; 0x548e <i2c_init+0x4c>
    5478:	8e ed       	ldi	r24, 0xDE	; 222
    547a:	93 e0       	ldi	r25, 0x03	; 3
    547c:	a0 e0       	ldi	r26, 0x00	; 0
    547e:	ed b7       	in	r30, 0x3d	; 61
    5480:	fe b7       	in	r31, 0x3e	; 62
    5482:	81 83       	std	Z+1, r24	; 0x01
    5484:	92 83       	std	Z+2, r25	; 0x02
    5486:	a3 83       	std	Z+3, r26	; 0x03
    5488:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    548c:	3a c0       	rjmp	.+116    	; 0x5502 <i2c_init+0xc0>
    548e:	f8 94       	cli
    5490:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5494:	10 92 44 1a 	sts	0x1A44, r1	; 0x801a44 <i2c+0x1>
    5498:	81 e0       	ldi	r24, 0x01	; 1
    549a:	80 93 45 1a 	sts	0x1A45, r24	; 0x801a45 <i2c+0x2>
    549e:	10 92 74 17 	sts	0x1774, r1	; 0x801774 <i2c_task>
    54a2:	80 93 76 17 	sts	0x1776, r24	; 0x801776 <i2c_task+0x2>
    54a6:	40 9a       	sbi	0x08, 0	; 8
    54a8:	41 9a       	sbi	0x08, 1	; 8
    54aa:	84 e8       	ldi	r24, 0x84	; 132
    54ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    54b0:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    54b4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    54b8:	8c 7f       	andi	r24, 0xFC	; 252
    54ba:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    54be:	80 91 53 17 	lds	r24, 0x1753	; 0x801753 <i2c_init_status>
    54c2:	81 11       	cpse	r24, r1
    54c4:	1d c0       	rjmp	.+58     	; 0x5500 <i2c_init+0xbe>
    54c6:	e4 e5       	ldi	r30, 0x54	; 84
    54c8:	f7 e1       	ldi	r31, 0x17	; 23
    54ca:	11 92       	st	Z+, r1
    54cc:	11 92       	st	Z+, r1
    54ce:	27 e1       	ldi	r18, 0x17	; 23
    54d0:	e4 37       	cpi	r30, 0x74	; 116
    54d2:	f2 07       	cpc	r31, r18
    54d4:	d1 f7       	brne	.-12     	; 0x54ca <i2c_init+0x88>
    54d6:	61 e0       	ldi	r22, 0x01	; 1
    54d8:	70 e0       	ldi	r23, 0x00	; 0
    54da:	8d e7       	ldi	r24, 0x7D	; 125
    54dc:	99 e2       	ldi	r25, 0x29	; 41
    54de:	0e 94 b1 32 	call	0x6562	; 0x6562 <set_timers>
    54e2:	01 96       	adiw	r24, 0x01	; 1
    54e4:	51 f4       	brne	.+20     	; 0x54fa <i2c_init+0xb8>
    54e6:	87 ec       	ldi	r24, 0xC7	; 199
    54e8:	93 e0       	ldi	r25, 0x03	; 3
    54ea:	a0 e0       	ldi	r26, 0x00	; 0
    54ec:	ed b7       	in	r30, 0x3d	; 61
    54ee:	fe b7       	in	r31, 0x3e	; 62
    54f0:	81 83       	std	Z+1, r24	; 0x01
    54f2:	92 83       	std	Z+2, r25	; 0x02
    54f4:	a3 83       	std	Z+3, r26	; 0x03
    54f6:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    54fa:	81 e0       	ldi	r24, 0x01	; 1
    54fc:	80 93 53 17 	sts	0x1753, r24	; 0x801753 <i2c_init_status>
    5500:	cf bf       	out	0x3f, r28	; 63
    5502:	0f 90       	pop	r0
    5504:	0f 90       	pop	r0
    5506:	0f 90       	pop	r0
    5508:	cf 91       	pop	r28
    550a:	08 95       	ret

0000550c <i2c_done>:
///@brief Is i2c structure done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_done()
{
	delayus(1);
    550c:	61 e0       	ldi	r22, 0x01	; 1
    550e:	70 e0       	ldi	r23, 0x00	; 0
    5510:	80 e0       	ldi	r24, 0x00	; 0
    5512:	90 e0       	ldi	r25, 0x00	; 0
    5514:	a5 db       	rcall	.-2230   	; 0x4c60 <delayus>
	if(!i2c.enable || i2c.done )
    5516:	80 91 44 1a 	lds	r24, 0x1A44	; 0x801a44 <i2c+0x1>
    551a:	88 23       	and	r24, r24
    551c:	39 f0       	breq	.+14     	; 0x552c <i2c_done+0x20>
		return(1);
    551e:	81 e0       	ldi	r24, 0x01	; 1
    5520:	90 91 45 1a 	lds	r25, 0x1A45	; 0x801a45 <i2c+0x2>
    5524:	91 11       	cpse	r25, r1
    5526:	03 c0       	rjmp	.+6      	; 0x552e <i2c_done+0x22>
    5528:	80 e0       	ldi	r24, 0x00	; 0
    552a:	08 95       	ret
    552c:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    552e:	08 95       	ret

00005530 <i2c_task_done>:
///@brief Are all i2c_task_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_task_done()
{
	delayus(1);
    5530:	61 e0       	ldi	r22, 0x01	; 1
    5532:	70 e0       	ldi	r23, 0x00	; 0
    5534:	80 e0       	ldi	r24, 0x00	; 0
    5536:	90 e0       	ldi	r25, 0x00	; 0
    5538:	93 db       	rcall	.-2266   	; 0x4c60 <delayus>
	if(!i2c_task.enable || i2c_task.done )
    553a:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <i2c_task>
    553e:	88 23       	and	r24, r24
    5540:	39 f0       	breq	.+14     	; 0x5550 <i2c_task_done+0x20>
		return(1);
    5542:	81 e0       	ldi	r24, 0x01	; 1
    5544:	90 91 76 17 	lds	r25, 0x1776	; 0x801776 <i2c_task+0x2>
    5548:	91 11       	cpse	r25, r1
    554a:	03 c0       	rjmp	.+6      	; 0x5552 <i2c_task_done+0x22>
    554c:	80 e0       	ldi	r24, 0x00	; 0
    554e:	08 95       	ret
    5550:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    5552:	08 95       	ret

00005554 <i2c_send_start>:
///@brief Send I2C START and enable interrupts
///
/// @return  void
void i2c_send_start()
{
	i2c.done = 0;
    5554:	e3 e4       	ldi	r30, 0x43	; 67
    5556:	fa e1       	ldi	r31, 0x1A	; 26
    5558:	12 82       	std	Z+2, r1	; 0x02
	i2c.enable = 1;
    555a:	81 e0       	ldi	r24, 0x01	; 1
    555c:	81 83       	std	Z+1, r24	; 0x01
	i2c.timeout = I2C_TIMEOUT;		// Start timeout timer
    555e:	8a e0       	ldi	r24, 0x0A	; 10
    5560:	90 e0       	ldi	r25, 0x00	; 0
    5562:	95 83       	std	Z+5, r25	; 0x05
    5564:	84 83       	std	Z+4, r24	; 0x04
	// Start a transactions
	// TWI Enable
	// TWI Interrupt Enable
	// TWI Interrupt Clear
	// TWI SEND RESTART
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5566:	85 ea       	ldi	r24, 0xA5	; 165
    5568:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    556c:	08 95       	ret

0000556e <i2c_task_run>:

/// @brief Run all valid i2c_task_op[] tasks
///
/// @return  void
void i2c_task_run()
{
    556e:	ef 92       	push	r14
    5570:	ff 92       	push	r15
    5572:	0f 93       	push	r16
    5574:	1f 93       	push	r17
    5576:	cf 93       	push	r28
    5578:	df 93       	push	r29
	uint8_t sreg = SREG;
    557a:	ff b6       	in	r15, 0x3f	; 63
	i2c_op_t *o;
    uint8_t run = 0;
	int8_t i;


	cli();
    557c:	f8 94       	cli
	i2c_task.done = 0;
    557e:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task+0x2>
	i2c_task.error = 0;
    5582:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <i2c_task+0x3>
	i2c_task.ind = 0;
    5586:	10 92 75 17 	sts	0x1775, r1	; 0x801775 <i2c_task+0x1>

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    558a:	c0 e0       	ldi	r28, 0x00	; 0
/// @return  void
void i2c_task_run()
{
	uint8_t sreg = SREG;
	i2c_op_t *o;
    uint8_t run = 0;
    558c:	d0 e0       	ldi	r29, 0x00	; 0

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
	{
		o = i2c_task_op[i];
		o->enable = 1;
    558e:	ee 24       	eor	r14, r14
    5590:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->ind = 0;
		o->timeout = I2C_TIMEOUT;
    5592:	0a e0       	ldi	r16, 0x0A	; 10
    5594:	10 e0       	ldi	r17, 0x00	; 0
	i2c_task.done = 0;
	i2c_task.error = 0;
	i2c_task.ind = 0;

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    5596:	8c 2f       	mov	r24, r28
    5598:	c6 de       	rcall	.-628    	; 0x5326 <i2c_check_op>
    559a:	88 23       	and	r24, r24
    559c:	d1 f0       	breq	.+52     	; 0x55d2 <i2c_task_run+0x64>
	{
		o = i2c_task_op[i];
    559e:	ec 2f       	mov	r30, r28
    55a0:	ee 0f       	add	r30, r30
    55a2:	ff 0b       	sbc	r31, r31
    55a4:	ec 5a       	subi	r30, 0xAC	; 172
    55a6:	f8 4e       	sbci	r31, 0xE8	; 232
    55a8:	01 90       	ld	r0, Z+
    55aa:	f0 81       	ld	r31, Z
    55ac:	e0 2d       	mov	r30, r0
		o->enable = 1;
    55ae:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    55b0:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    55b2:	13 82       	std	Z+3, r1	; 0x03
		o->ind = 0;
    55b4:	17 82       	std	Z+7, r1	; 0x07
		o->timeout = I2C_TIMEOUT;
    55b6:	15 83       	std	Z+5, r17	; 0x05
    55b8:	04 83       	std	Z+4, r16	; 0x04
		if(!run)
    55ba:	d1 11       	cpse	r29, r1
    55bc:	07 c0       	rjmp	.+14     	; 0x55cc <i2c_task_run+0x5e>
		{
			run = 1;
			i2c = *o;
    55be:	8a e0       	ldi	r24, 0x0A	; 10
    55c0:	a3 e4       	ldi	r26, 0x43	; 67
    55c2:	ba e1       	ldi	r27, 0x1A	; 26
    55c4:	01 90       	ld	r0, Z+
    55c6:	0d 92       	st	X+, r0
    55c8:	8a 95       	dec	r24
    55ca:	e1 f7       	brne	.-8      	; 0x55c4 <i2c_task_run+0x56>
    55cc:	cf 5f       	subi	r28, 0xFF	; 255
    55ce:	d1 e0       	ldi	r29, 0x01	; 1
    55d0:	e2 cf       	rjmp	.-60     	; 0x5596 <i2c_task_run+0x28>
		}
	}

	if(run)
    55d2:	dd 23       	and	r29, r29
    55d4:	91 f0       	breq	.+36     	; 0x55fa <i2c_task_run+0x8c>
	{
		// TASK callback
		i2c_callback = i2c_task_next_op;
    55d6:	84 e5       	ldi	r24, 0x54	; 84
    55d8:	9b e2       	ldi	r25, 0x2B	; 43
    55da:	90 93 79 17 	sts	0x1779, r25	; 0x801779 <i2c_callback+0x1>
    55de:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_callback>

		i2c_task.enable = 1;
    55e2:	81 e0       	ldi	r24, 0x01	; 1
    55e4:	80 93 74 17 	sts	0x1774, r24	; 0x801774 <i2c_task>
		i2c_task.done = 0;
    55e8:	10 92 76 17 	sts	0x1776, r1	; 0x801776 <i2c_task+0x2>

        // Reset Status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    55ec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    55f0:	8c 7f       	andi	r24, 0xFC	; 252
    55f2:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // TWI Interrupt Clear
        // TWI SEND RESTART
        // TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
        // Disable Slave Mode

		i2c_send_start();
    55f6:	ae df       	rcall	.-164    	; 0x5554 <i2c_send_start>
    55f8:	15 c0       	rjmp	.+42     	; 0x5624 <i2c_task_run+0xb6>
        // FIXME we should notify the user ?
		// Nothing to DO
		// User Error

		// TASK callback
		i2c_callback = NULL;
    55fa:	10 92 79 17 	sts	0x1779, r1	; 0x801779 <i2c_callback+0x1>
    55fe:	10 92 78 17 	sts	0x1778, r1	; 0x801778 <i2c_callback>

		// TASK Nothing to DO
		i2c_task.enable = 0;
    5602:	10 92 74 17 	sts	0x1774, r1	; 0x801774 <i2c_task>
		i2c_task.done = 1;
    5606:	81 e0       	ldi	r24, 0x01	; 1
    5608:	80 93 76 17 	sts	0x1776, r24	; 0x801776 <i2c_task+0x2>

		// I2C Nothing to do
        i2c.done = 1;
    560c:	80 93 45 1a 	sts	0x1A45, r24	; 0x801a45 <i2c+0x2>
        i2c.enable = 0;
    5610:	10 92 44 1a 	sts	0x1A44, r1	; 0x801a44 <i2c+0x1>

        // TWI Enable
        // TWI Disable Enable
        // TWI Interrupt Clear
        TWCR = _BV(TWEN) | _BV(TWINT);
    5614:	84 e8       	ldi	r24, 0x84	; 132
    5616:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        // Reset status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    561a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    561e:	8c 7f       	andi	r24, 0xFC	; 252
    5620:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // Disable Slave Mode
        TWAR = 0;
    5624:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}
	// Disable Slave Mode

	SREG = sreg;
    5628:	ff be       	out	0x3f, r15	; 63

}
    562a:	cd b7       	in	r28, 0x3d	; 61
    562c:	de b7       	in	r29, 0x3e	; 62
    562e:	e6 e0       	ldi	r30, 0x06	; 6
    5630:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

00005634 <i2c_fn>:
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  1 = OK, 0 = ERROR
uint8_t i2c_fn(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	uint8_t sreg = SREG;
    5634:	9f b7       	in	r25, 0x3f	; 63
	
    cli();
    5636:	f8 94       	cli

	// sign task only
	i2c_callback = NULL;
    5638:	10 92 79 17 	sts	0x1779, r1	; 0x801779 <i2c_callback+0x1>
    563c:	10 92 78 17 	sts	0x1778, r1	; 0x801778 <i2c_callback>

	i2c.enable = 1; // Enabled
    5640:	31 e0       	ldi	r19, 0x01	; 1
    5642:	30 93 44 1a 	sts	0x1A44, r19	; 0x801a44 <i2c+0x1>
	i2c.done = 0;
    5646:	10 92 45 1a 	sts	0x1A45, r1	; 0x801a45 <i2c+0x2>
    i2c.address = (address << 1) | (mode & 1);
    564a:	88 0f       	add	r24, r24
    564c:	61 70       	andi	r22, 0x01	; 1
    564e:	68 2b       	or	r22, r24
    5650:	60 93 43 1a 	sts	0x1A43, r22	; 0x801a43 <i2c>
	i2c.flags = 0;
    5654:	10 92 46 1a 	sts	0x1A46, r1	; 0x801a46 <i2c+0x3>
    i2c.len = len;
    5658:	20 93 49 1a 	sts	0x1A49, r18	; 0x801a49 <i2c+0x6>
    i2c.ind = 0;
    565c:	10 92 4a 1a 	sts	0x1A4A, r1	; 0x801a4a <i2c+0x7>
    i2c.buf = buf;
    5660:	50 93 4c 1a 	sts	0x1A4C, r21	; 0x801a4c <i2c+0x9>
    5664:	40 93 4b 1a 	sts	0x1A4B, r20	; 0x801a4b <i2c+0x8>

	// Reset Status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5668:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    566c:	8c 7f       	andi	r24, 0xFC	; 252
    566e:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Disable Slave Mode
	TWAR = 0;
    5672:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	SREG = sreg;
    5676:	9f bf       	out	0x3f, r25	; 63

	i2c_send_start();
    5678:	6d df       	rcall	.-294    	; 0x5554 <i2c_send_start>
	{
		printf("timeout: %d\r",(int)i2c.timeout);
	}
	printf("\n");
#else
	while(! i2c_done() )
    567a:	48 df       	rcall	.-368    	; 0x550c <i2c_done>
    567c:	88 23       	and	r24, r24
    567e:	e9 f3       	breq	.-6      	; 0x567a <i2c_fn+0x46>
    5680:	81 e0       	ldi	r24, 0x01	; 1
		;
#endif
	return( i2c.flags ? 0 : 1);
    5682:	90 91 46 1a 	lds	r25, 0x1A46	; 0x801a46 <i2c+0x3>
    5686:	91 11       	cpse	r25, r1
    5688:	80 e0       	ldi	r24, 0x00	; 0
    568a:	08 95       	ret

0000568c <i2c_send_stop>:
}
    568c:	e3 e4       	ldi	r30, 0x43	; 67
///
/// @return  void
void i2c_send_stop()
{
    // All transactions are done
    i2c.done = 1;
    568e:	fa e1       	ldi	r31, 0x1A	; 26
    5690:	81 e0       	ldi	r24, 0x01	; 1
    5692:	82 83       	std	Z+2, r24	; 0x02
    i2c.enable = 0;
    5694:	11 82       	std	Z+1, r1	; 0x01
    // We are DONE
    // TWI Enable
    // TWI Interrupt Disable
    // TWI Interrupt Clear
    // TWI SEND STOP
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    5696:	84 e9       	ldi	r24, 0x94	; 148
    5698:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	delayus(10);
    569c:	6a e0       	ldi	r22, 0x0A	; 10
    569e:	70 e0       	ldi	r23, 0x00	; 0
    56a0:	80 e0       	ldi	r24, 0x00	; 0
    56a2:	90 e0       	ldi	r25, 0x00	; 0
    56a4:	dd ca       	rjmp	.-2630   	; 0x4c60 <delayus>
    56a6:	08 95       	ret

000056a8 <i2c_task_next_op>:

///@brief I2C task ISR callback function
///
/// @return  void
int8_t i2c_task_next_op()
{
    56a8:	cf 93       	push	r28
    56aa:	df 93       	push	r29
	i2c_op_t *o;

	// NOTE: we are in an ISR do not disable other interrupts

	if(i2c_task.enable)
    56ac:	80 91 74 17 	lds	r24, 0x1774	; 0x801774 <i2c_task>
    56b0:	88 23       	and	r24, r24
    56b2:	09 f4       	brne	.+2      	; 0x56b6 <i2c_task_next_op+0xe>
    56b4:	46 c0       	rjmp	.+140    	; 0x5742 <i2c_task_next_op+0x9a>
	{
		// Save state of LAST operation
		if(i2c_check_op(i2c_task.ind) )
    56b6:	80 91 75 17 	lds	r24, 0x1775	; 0x801775 <i2c_task+0x1>
    56ba:	35 de       	rcall	.-918    	; 0x5326 <i2c_check_op>
    56bc:	88 23       	and	r24, r24
    56be:	b1 f0       	breq	.+44     	; 0x56ec <i2c_task_next_op+0x44>
		{
			o = i2c_task_op[i2c_task.ind];
    56c0:	e0 91 75 17 	lds	r30, 0x1775	; 0x801775 <i2c_task+0x1>
    56c4:	ee 0f       	add	r30, r30
    56c6:	ff 0b       	sbc	r31, r31
    56c8:	ec 5a       	subi	r30, 0xAC	; 172
    56ca:	f8 4e       	sbci	r31, 0xE8	; 232
    56cc:	c0 81       	ld	r28, Z
    56ce:	d1 81       	ldd	r29, Z+1	; 0x01
			// Save state in last opperation
			*o = i2c;
    56d0:	8a e0       	ldi	r24, 0x0A	; 10
    56d2:	e3 e4       	ldi	r30, 0x43	; 67
    56d4:	fa e1       	ldi	r31, 0x1A	; 26
    56d6:	de 01       	movw	r26, r28
    56d8:	01 90       	ld	r0, Z+
    56da:	0d 92       	st	X+, r0
    56dc:	8a 95       	dec	r24
    56de:	e1 f7       	brne	.-8      	; 0x56d8 <i2c_task_next_op+0x30>
			if(o->flags)
    56e0:	8b 81       	ldd	r24, Y+3	; 0x03
    56e2:	88 23       	and	r24, r24
    56e4:	19 f0       	breq	.+6      	; 0x56ec <i2c_task_next_op+0x44>
				i2c_task.error = 1;
    56e6:	81 e0       	ldi	r24, 0x01	; 1
    56e8:	80 93 77 17 	sts	0x1777, r24	; 0x801777 <i2c_task+0x3>
		}

		if(i2c_check_op(i2c_task.ind+1) )
    56ec:	80 91 75 17 	lds	r24, 0x1775	; 0x801775 <i2c_task+0x1>
    56f0:	8f 5f       	subi	r24, 0xFF	; 255
    56f2:	19 de       	rcall	.-974    	; 0x5326 <i2c_check_op>
    56f4:	88 23       	and	r24, r24
    56f6:	29 f1       	breq	.+74     	; 0x5742 <i2c_task_next_op+0x9a>
		{
			i2c_task.ind++;
    56f8:	e0 91 75 17 	lds	r30, 0x1775	; 0x801775 <i2c_task+0x1>
    56fc:	ef 5f       	subi	r30, 0xFF	; 255
    56fe:	e0 93 75 17 	sts	0x1775, r30	; 0x801775 <i2c_task+0x1>

			o = i2c_task_op[i2c_task.ind];
    5702:	ee 0f       	add	r30, r30
    5704:	ff 0b       	sbc	r31, r31
    5706:	ec 5a       	subi	r30, 0xAC	; 172
    5708:	f8 4e       	sbci	r31, 0xE8	; 232
    570a:	01 90       	ld	r0, Z+
    570c:	f0 81       	ld	r31, Z
    570e:	e0 2d       	mov	r30, r0

			if( o->enable == 1 || o->done == 0)
    5710:	81 81       	ldd	r24, Z+1	; 0x01
    5712:	81 30       	cpi	r24, 0x01	; 1
    5714:	19 f0       	breq	.+6      	; 0x571c <i2c_task_next_op+0x74>
    5716:	82 81       	ldd	r24, Z+2	; 0x02
    5718:	81 11       	cpse	r24, r1
    571a:	13 c0       	rjmp	.+38     	; 0x5742 <i2c_task_next_op+0x9a>
			{
				o->timeout = I2C_TIMEOUT;
    571c:	8a e0       	ldi	r24, 0x0A	; 10
    571e:	90 e0       	ldi	r25, 0x00	; 0
    5720:	95 83       	std	Z+5, r25	; 0x05
    5722:	84 83       	std	Z+4, r24	; 0x04
				o->flags = 0;
    5724:	13 82       	std	Z+3, r1	; 0x03
				o->ind = 0;
    5726:	17 82       	std	Z+7, r1	; 0x07
				o->enable = 1;
    5728:	81 e0       	ldi	r24, 0x01	; 1
    572a:	81 83       	std	Z+1, r24	; 0x01
				o->done = 0;
    572c:	12 82       	std	Z+2, r1	; 0x02

				i2c = *o;
    572e:	8a e0       	ldi	r24, 0x0A	; 10
    5730:	a3 e4       	ldi	r26, 0x43	; 67
    5732:	ba e1       	ldi	r27, 0x1A	; 26
    5734:	01 90       	ld	r0, Z+
    5736:	0d 92       	st	X+, r0
    5738:	8a 95       	dec	r24

				i2c_send_start();
    573a:	e1 f7       	brne	.-8      	; 0x5734 <i2c_task_next_op+0x8c>
    573c:	0b df       	rcall	.-490    	; 0x5554 <i2c_send_start>

				return(1);
    573e:	81 e0       	ldi	r24, 0x01	; 1
    5740:	0f c0       	rjmp	.+30     	; 0x5760 <i2c_task_next_op+0xb8>
			}
		}
	}
	// program error
	// Disable TASK
	i2c_task.enable = 0;
    5742:	10 92 74 17 	sts	0x1774, r1	; 0x801774 <i2c_task>
	i2c_task.done = 1;
    5746:	81 e0       	ldi	r24, 0x01	; 1
    5748:	80 93 76 17 	sts	0x1776, r24	; 0x801776 <i2c_task+0x2>

	// I2C disable
	i2c.done = 1;
    574c:	80 93 45 1a 	sts	0x1A45, r24	; 0x801a45 <i2c+0x2>
	i2c.enable = 0;
    5750:	10 92 44 1a 	sts	0x1A44, r1	; 0x801a44 <i2c+0x1>
	i2c.flags = 0;
    5754:	10 92 46 1a 	sts	0x1A46, r1	; 0x801a46 <i2c+0x3>
	i2c.ind = 0;
    5758:	10 92 4a 1a 	sts	0x1A4A, r1	; 0x801a4a <i2c+0x7>

	i2c_send_stop();
    575c:	97 df       	rcall	.-210    	; 0x568c <i2c_send_stop>

	return(0);
    575e:	80 e0       	ldi	r24, 0x00	; 0
}
    5760:	df 91       	pop	r29
    5762:	cf 91       	pop	r28
    5764:	08 95       	ret

00005766 <i2c_next>:
{

	// IF we have an i2c_callback() function then
	// it must save status and reset i2c structure for next operation

	if(i2c_callback)
    5766:	e0 91 78 17 	lds	r30, 0x1778	; 0x801778 <i2c_callback>
    576a:	f0 91 79 17 	lds	r31, 0x1779	; 0x801779 <i2c_callback+0x1>
    576e:	30 97       	sbiw	r30, 0x00	; 0
    5770:	11 f0       	breq	.+4      	; 0x5776 <i2c_next+0x10>
	    i2c_callback();
    5772:	09 95       	icall
    5774:	08 95       	ret
	else
		i2c_send_stop();
    5776:	8a cf       	rjmp	.-236    	; 0x568c <i2c_send_stop>
    5778:	08 95       	ret

0000577a <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    577a:	1f 92       	push	r1
    577c:	0f 92       	push	r0
    577e:	0f b6       	in	r0, 0x3f	; 63
    5780:	0f 92       	push	r0
    5782:	11 24       	eor	r1, r1
    5784:	0b b6       	in	r0, 0x3b	; 59
    5786:	0f 92       	push	r0
    5788:	2f 93       	push	r18
    578a:	3f 93       	push	r19
    578c:	4f 93       	push	r20
    578e:	5f 93       	push	r21
    5790:	6f 93       	push	r22
    5792:	7f 93       	push	r23
    5794:	8f 93       	push	r24
    5796:	9f 93       	push	r25
    5798:	af 93       	push	r26
    579a:	bf 93       	push	r27
    579c:	ef 93       	push	r30
    579e:	ff 93       	push	r31
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    57a0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	// Program errors - these should not happen
	if(!i2c.enable || i2c.done || !i2c.buf || !i2c.len )
    57a4:	90 91 44 1a 	lds	r25, 0x1A44	; 0x801a44 <i2c+0x1>
    57a8:	99 23       	and	r25, r25
    57aa:	09 f1       	breq	.+66     	; 0x57ee <__vector_26+0x74>
    57ac:	90 91 45 1a 	lds	r25, 0x1A45	; 0x801a45 <i2c+0x2>
    57b0:	91 11       	cpse	r25, r1
    57b2:	1d c0       	rjmp	.+58     	; 0x57ee <__vector_26+0x74>
    57b4:	20 91 4b 1a 	lds	r18, 0x1A4B	; 0x801a4b <i2c+0x8>
    57b8:	30 91 4c 1a 	lds	r19, 0x1A4C	; 0x801a4c <i2c+0x9>
    57bc:	21 15       	cp	r18, r1
    57be:	31 05       	cpc	r19, r1
    57c0:	b1 f0       	breq	.+44     	; 0x57ee <__vector_26+0x74>
    57c2:	90 91 49 1a 	lds	r25, 0x1A49	; 0x801a49 <i2c+0x6>
    57c6:	99 23       	and	r25, r25
    57c8:	91 f0       	breq	.+36     	; 0x57ee <__vector_26+0x74>
		i2c_send_stop();
		return;
	}

	// TUMEOUT ? STOP everything
	if(i2c.timeout == 0)
    57ca:	40 91 47 1a 	lds	r20, 0x1A47	; 0x801a47 <i2c+0x4>
    57ce:	50 91 48 1a 	lds	r21, 0x1A48	; 0x801a48 <i2c+0x5>
    57d2:	45 2b       	or	r20, r21
    57d4:	71 f4       	brne	.+28     	; 0x57f2 <__vector_26+0x78>
	{
		i2c.flags |= (I2C_OP_TIMEOUT);
    57d6:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <i2c+0x3>
    57da:	81 60       	ori	r24, 0x01	; 1
    57dc:	80 93 46 1a 	sts	0x1A46, r24	; 0x801a46 <i2c+0x3>
		i2c_task.enable = 0;
    57e0:	10 92 74 17 	sts	0x1774, r1	; 0x801774 <i2c_task>
		i2c_task.done = 1;
    57e4:	81 e0       	ldi	r24, 0x01	; 1
    57e6:	80 93 76 17 	sts	0x1776, r24	; 0x801776 <i2c_task+0x2>
		i2c_task.error = 1;
    57ea:	80 93 77 17 	sts	0x1777, r24	; 0x801777 <i2c_task+0x3>
		i2c_send_stop();
    57ee:	4e df       	rcall	.-356    	; 0x568c <i2c_send_stop>
		return;
    57f0:	9b c0       	rjmp	.+310    	; 0x5928 <__vector_26+0x1ae>
	}

	// Master Receiver mode
	switch (status)
    57f2:	88 7f       	andi	r24, 0xF8	; 248
    57f4:	80 33       	cpi	r24, 0x30	; 48
    57f6:	09 f4       	brne	.+2      	; 0x57fa <__vector_26+0x80>
    57f8:	83 c0       	rjmp	.+262    	; 0x5900 <__vector_26+0x186>
    57fa:	70 f4       	brcc	.+28     	; 0x5818 <__vector_26+0x9e>
    57fc:	88 31       	cpi	r24, 0x18	; 24
    57fe:	09 f1       	breq	.+66     	; 0x5842 <__vector_26+0xc8>
    5800:	28 f4       	brcc	.+10     	; 0x580c <__vector_26+0x92>
    5802:	88 30       	cpi	r24, 0x08	; 8
    5804:	c9 f0       	breq	.+50     	; 0x5838 <__vector_26+0xbe>
    5806:	80 31       	cpi	r24, 0x10	; 16
    5808:	b9 f0       	breq	.+46     	; 0x5838 <__vector_26+0xbe>
    580a:	83 c0       	rjmp	.+262    	; 0x5912 <__vector_26+0x198>
    580c:	80 32       	cpi	r24, 0x20	; 32
    580e:	09 f4       	brne	.+2      	; 0x5812 <__vector_26+0x98>
    5810:	65 c0       	rjmp	.+202    	; 0x58dc <__vector_26+0x162>
    5812:	88 32       	cpi	r24, 0x28	; 40
    5814:	b1 f0       	breq	.+44     	; 0x5842 <__vector_26+0xc8>
    5816:	7d c0       	rjmp	.+250    	; 0x5912 <__vector_26+0x198>
    5818:	88 34       	cpi	r24, 0x48	; 72
    581a:	09 f4       	brne	.+2      	; 0x581e <__vector_26+0xa4>
    581c:	68 c0       	rjmp	.+208    	; 0x58ee <__vector_26+0x174>
    581e:	38 f4       	brcc	.+14     	; 0x582e <__vector_26+0xb4>
    5820:	88 33       	cpi	r24, 0x38	; 56
    5822:	09 f4       	brne	.+2      	; 0x5826 <__vector_26+0xac>
    5824:	57 c0       	rjmp	.+174    	; 0x58d4 <__vector_26+0x15a>
    5826:	80 34       	cpi	r24, 0x40	; 64
    5828:	09 f4       	brne	.+2      	; 0x582c <__vector_26+0xb2>
    582a:	42 c0       	rjmp	.+132    	; 0x58b0 <__vector_26+0x136>
    582c:	72 c0       	rjmp	.+228    	; 0x5912 <__vector_26+0x198>
    582e:	80 35       	cpi	r24, 0x50	; 80
    5830:	79 f1       	breq	.+94     	; 0x5890 <__vector_26+0x116>
    5832:	88 35       	cpi	r24, 0x58	; 88
    5834:	b9 f0       	breq	.+46     	; 0x5864 <__vector_26+0xea>
    5836:	6d c0       	rjmp	.+218    	; 0x5912 <__vector_26+0x198>
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			i2c.ind = 0;
    5838:	10 92 4a 1a 	sts	0x1A4A, r1	; 0x801a4a <i2c+0x7>
			TWDR = i2c.address;
    583c:	80 91 43 1a 	lds	r24, 0x1A43	; 0x801a43 <i2c>
    5840:	0e c0       	rjmp	.+28     	; 0x585e <__vector_26+0xe4>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (i2c.ind < i2c.len)
    5842:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <i2c+0x7>
    5846:	89 17       	cp	r24, r25
    5848:	ec f4       	brge	.+58     	; 0x5884 <__vector_26+0x10a>
			{
				TWDR = i2c.buf[i2c.ind++];
    584a:	91 e0       	ldi	r25, 0x01	; 1
    584c:	98 0f       	add	r25, r24
    584e:	90 93 4a 1a 	sts	0x1A4A, r25	; 0x801a4a <i2c+0x7>
    5852:	f9 01       	movw	r30, r18
    5854:	e8 0f       	add	r30, r24
    5856:	f1 1d       	adc	r31, r1
    5858:	87 fd       	sbrc	r24, 7
    585a:	fa 95       	dec	r31
    585c:	80 81       	ld	r24, Z
    585e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5862:	36 c0       	rjmp	.+108    	; 0x58d0 <__vector_26+0x156>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			if(i2c.ind < i2c.len)
    5864:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <i2c+0x7>
    5868:	89 17       	cp	r24, r25
    586a:	64 f4       	brge	.+24     	; 0x5884 <__vector_26+0x10a>
				i2c.buf[i2c.ind++] = TWDR;
    586c:	91 e0       	ldi	r25, 0x01	; 1
    586e:	98 0f       	add	r25, r24
    5870:	90 93 4a 1a 	sts	0x1A4A, r25	; 0x801a4a <i2c+0x7>
    5874:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5878:	f9 01       	movw	r30, r18
    587a:	e8 0f       	add	r30, r24
    587c:	f1 1d       	adc	r31, r1
    587e:	87 fd       	sbrc	r24, 7
    5880:	fa 95       	dec	r31
    5882:	90 83       	st	Z, r25
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			else
			{
				// Done
				i2c.done = 1;
    5884:	81 e0       	ldi	r24, 0x01	; 1
    5886:	80 93 45 1a 	sts	0x1A45, r24	; 0x801a45 <i2c+0x2>
				i2c.enable = 0;
    588a:	10 92 44 1a 	sts	0x1A44, r1	; 0x801a44 <i2c+0x1>
    588e:	4b c0       	rjmp	.+150    	; 0x5926 <__vector_26+0x1ac>
				i2c_next();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			if(i2c.ind < i2c.len)
    5890:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <i2c+0x7>
    5894:	89 17       	cp	r24, r25
    5896:	64 f4       	brge	.+24     	; 0x58b0 <__vector_26+0x136>
				i2c.buf[i2c.ind++] = TWDR;
    5898:	91 e0       	ldi	r25, 0x01	; 1
    589a:	98 0f       	add	r25, r24
    589c:	90 93 4a 1a 	sts	0x1A4A, r25	; 0x801a4a <i2c+0x7>
    58a0:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    58a4:	f9 01       	movw	r30, r18
    58a6:	e8 0f       	add	r30, r24
    58a8:	f1 1d       	adc	r31, r1
    58aa:	87 fd       	sbrc	r24, 7
    58ac:	fa 95       	dec	r31
    58ae:	90 83       	st	Z, r25
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((i2c.ind+1) < i2c.len)
    58b0:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <i2c+0x7>
    58b4:	08 2e       	mov	r0, r24
    58b6:	00 0c       	add	r0, r0
    58b8:	99 0b       	sbc	r25, r25
    58ba:	01 96       	adiw	r24, 0x01	; 1
    58bc:	20 91 49 1a 	lds	r18, 0x1A49	; 0x801a49 <i2c+0x6>
    58c0:	02 2e       	mov	r0, r18
    58c2:	00 0c       	add	r0, r0
    58c4:	33 0b       	sbc	r19, r19
    58c6:	82 17       	cp	r24, r18
    58c8:	93 07       	cpc	r25, r19
    58ca:	14 f4       	brge	.+4      	; 0x58d0 <__vector_26+0x156>
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    58cc:	85 ec       	ldi	r24, 0xC5	; 197
    58ce:	03 c0       	rjmp	.+6      	; 0x58d6 <__vector_26+0x15c>
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    58d0:	85 e8       	ldi	r24, 0x85	; 133
    58d2:	01 c0       	rjmp	.+2      	; 0x58d6 <__vector_26+0x15c>
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    58d4:	85 ea       	ldi	r24, 0xA5	; 165
    58d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
    58da:	26 c0       	rjmp	.+76     	; 0x5928 <__vector_26+0x1ae>

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			i2c.done = 1;
    58dc:	81 e0       	ldi	r24, 0x01	; 1
    58de:	80 93 45 1a 	sts	0x1A45, r24	; 0x801a45 <i2c+0x2>
			i2c.enable = 0;
    58e2:	10 92 44 1a 	sts	0x1A44, r1	; 0x801a44 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_SLA_NACK;
    58e6:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <i2c+0x3>
    58ea:	88 60       	ori	r24, 0x08	; 8
    58ec:	1a c0       	rjmp	.+52     	; 0x5922 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			i2c.done = 1;
    58ee:	81 e0       	ldi	r24, 0x01	; 1
    58f0:	80 93 45 1a 	sts	0x1A45, r24	; 0x801a45 <i2c+0x2>
			i2c.enable = 0;
    58f4:	10 92 44 1a 	sts	0x1A44, r1	; 0x801a44 <i2c+0x1>
			i2c.flags |= I2C_TW_MR_SLA_NACK;
    58f8:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <i2c+0x3>
    58fc:	80 61       	ori	r24, 0x10	; 16
    58fe:	11 c0       	rjmp	.+34     	; 0x5922 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			i2c.done = 1;
    5900:	81 e0       	ldi	r24, 0x01	; 1
    5902:	80 93 45 1a 	sts	0x1A45, r24	; 0x801a45 <i2c+0x2>
			i2c.enable = 0;
    5906:	10 92 44 1a 	sts	0x1A44, r1	; 0x801a44 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_DATA_NACK;
    590a:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <i2c+0x3>
    590e:	80 62       	ori	r24, 0x20	; 32
    5910:	08 c0       	rjmp	.+16     	; 0x5922 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		default:				// Error
			i2c.done = 1;
    5912:	81 e0       	ldi	r24, 0x01	; 1
    5914:	80 93 45 1a 	sts	0x1A45, r24	; 0x801a45 <i2c+0x2>
			i2c.enable = 0;
    5918:	10 92 44 1a 	sts	0x1A44, r1	; 0x801a44 <i2c+0x1>
			// ERROR
			i2c.flags |= I2C_BUS_ERROR;
    591c:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <i2c+0x3>
    5920:	80 64       	ori	r24, 0x40	; 64
    5922:	80 93 46 1a 	sts	0x1A46, r24	; 0x801a46 <i2c+0x3>
			i2c_next();
    5926:	1f df       	rcall	.-450    	; 0x5766 <i2c_next>
			break;
	}
}
    5928:	ff 91       	pop	r31
    592a:	ef 91       	pop	r30
    592c:	bf 91       	pop	r27
    592e:	af 91       	pop	r26
    5930:	9f 91       	pop	r25
    5932:	8f 91       	pop	r24
    5934:	7f 91       	pop	r23
    5936:	6f 91       	pop	r22
    5938:	5f 91       	pop	r21
    593a:	4f 91       	pop	r20
    593c:	3f 91       	pop	r19
    593e:	2f 91       	pop	r18
    5940:	0f 90       	pop	r0
    5942:	0b be       	out	0x3b, r0	; 59
    5944:	0f 90       	pop	r0
    5946:	0f be       	out	0x3f, r0	; 63
    5948:	0f 90       	pop	r0
    594a:	1f 90       	pop	r1
    594c:	18 95       	reti

0000594e <i2c_print_error>:
/// @brief Display Errors for i2c_task_op[index]
///
/// @param[in] index: index of i2c_task_op[] array
/// @return  void
void i2c_print_error(i2c_op_t *o)
{
    594e:	cf 93       	push	r28
    5950:	00 d0       	rcall	.+0      	; 0x5952 <i2c_print_error+0x4>
    5952:	00 d0       	rcall	.+0      	; 0x5954 <i2c_print_error+0x6>
    5954:	1f 92       	push	r1
    int flags = o->flags;
    5956:	fc 01       	movw	r30, r24
    5958:	c3 81       	ldd	r28, Z+3	; 0x03

	if(flags)
    595a:	cc 23       	and	r28, r28
    595c:	09 f4       	brne	.+2      	; 0x5960 <i2c_print_error+0x12>
    595e:	67 c0       	rjmp	.+206    	; 0x5a2e <i2c_print_error+0xe0>
	{
		printf("  %s\n", (i2c.done ? "DONE" : "ACTIVE") );
    5960:	80 91 45 1a 	lds	r24, 0x1A45	; 0x801a45 <i2c+0x2>
    5964:	81 11       	cpse	r24, r1
    5966:	03 c0       	rjmp	.+6      	; 0x596e <i2c_print_error+0x20>
    5968:	88 e2       	ldi	r24, 0x28	; 40
    596a:	93 e0       	ldi	r25, 0x03	; 3
    596c:	02 c0       	rjmp	.+4      	; 0x5972 <i2c_print_error+0x24>
    596e:	83 e2       	ldi	r24, 0x23	; 35
    5970:	93 e0       	ldi	r25, 0x03	; 3
    5972:	ed b7       	in	r30, 0x3d	; 61
    5974:	fe b7       	in	r31, 0x3e	; 62
    5976:	95 83       	std	Z+5, r25	; 0x05
    5978:	84 83       	std	Z+4, r24	; 0x04
    597a:	81 ec       	ldi	r24, 0xC1	; 193
    597c:	93 e0       	ldi	r25, 0x03	; 3
    597e:	a0 e0       	ldi	r26, 0x00	; 0
    5980:	81 83       	std	Z+1, r24	; 0x01
    5982:	92 83       	std	Z+2, r25	; 0x02
    5984:	a3 83       	std	Z+3, r26	; 0x03
    5986:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
		if(flags & I2C_OP_TIMEOUT)
    598a:	c0 ff       	sbrs	r28, 0
    598c:	0a c0       	rjmp	.+20     	; 0x59a2 <i2c_print_error+0x54>
			printf("  OP_TIMEOUT\n");
    598e:	83 eb       	ldi	r24, 0xB3	; 179
    5990:	93 e0       	ldi	r25, 0x03	; 3
    5992:	a0 e0       	ldi	r26, 0x00	; 0
    5994:	ed b7       	in	r30, 0x3d	; 61
    5996:	fe b7       	in	r31, 0x3e	; 62
    5998:	81 83       	std	Z+1, r24	; 0x01
    599a:	92 83       	std	Z+2, r25	; 0x02
    599c:	a3 83       	std	Z+3, r26	; 0x03
    599e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
		if(flags & I2C_OP_LEN)
    59a2:	c1 ff       	sbrs	r28, 1
    59a4:	0a c0       	rjmp	.+20     	; 0x59ba <i2c_print_error+0x6c>
			printf("  OP_LEN\n");
    59a6:	89 ea       	ldi	r24, 0xA9	; 169
    59a8:	93 e0       	ldi	r25, 0x03	; 3
    59aa:	a0 e0       	ldi	r26, 0x00	; 0
    59ac:	ed b7       	in	r30, 0x3d	; 61
    59ae:	fe b7       	in	r31, 0x3e	; 62
    59b0:	81 83       	std	Z+1, r24	; 0x01
    59b2:	92 83       	std	Z+2, r25	; 0x02
    59b4:	a3 83       	std	Z+3, r26	; 0x03
    59b6:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
		if(flags & I2C_OP_ERROR)
    59ba:	c2 ff       	sbrs	r28, 2
    59bc:	0a c0       	rjmp	.+20     	; 0x59d2 <i2c_print_error+0x84>
			printf("  OP_ERROR\n");
    59be:	8d e9       	ldi	r24, 0x9D	; 157
    59c0:	93 e0       	ldi	r25, 0x03	; 3
    59c2:	a0 e0       	ldi	r26, 0x00	; 0
    59c4:	ed b7       	in	r30, 0x3d	; 61
    59c6:	fe b7       	in	r31, 0x3e	; 62
    59c8:	81 83       	std	Z+1, r24	; 0x01
    59ca:	92 83       	std	Z+2, r25	; 0x02
    59cc:	a3 83       	std	Z+3, r26	; 0x03
    59ce:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
		if(flags & I2C_TW_MR_SLA_NACK)
    59d2:	c4 ff       	sbrs	r28, 4
    59d4:	0a c0       	rjmp	.+20     	; 0x59ea <i2c_print_error+0x9c>
			printf("  TW_MR_SLA_NACK\n");
    59d6:	8b e8       	ldi	r24, 0x8B	; 139
    59d8:	93 e0       	ldi	r25, 0x03	; 3
    59da:	a0 e0       	ldi	r26, 0x00	; 0
    59dc:	ed b7       	in	r30, 0x3d	; 61
    59de:	fe b7       	in	r31, 0x3e	; 62
    59e0:	81 83       	std	Z+1, r24	; 0x01
    59e2:	92 83       	std	Z+2, r25	; 0x02
    59e4:	a3 83       	std	Z+3, r26	; 0x03
    59e6:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
		if(flags & I2C_TW_MT_SLA_NACK)
    59ea:	c3 ff       	sbrs	r28, 3
    59ec:	0a c0       	rjmp	.+20     	; 0x5a02 <i2c_print_error+0xb4>
			printf("  TW_MT_SLA_NACK\n");
    59ee:	89 e7       	ldi	r24, 0x79	; 121
    59f0:	93 e0       	ldi	r25, 0x03	; 3
    59f2:	a0 e0       	ldi	r26, 0x00	; 0
    59f4:	ed b7       	in	r30, 0x3d	; 61
    59f6:	fe b7       	in	r31, 0x3e	; 62
    59f8:	81 83       	std	Z+1, r24	; 0x01
    59fa:	92 83       	std	Z+2, r25	; 0x02
    59fc:	a3 83       	std	Z+3, r26	; 0x03
    59fe:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
		if(flags & I2C_TW_MT_DATA_NACK)
    5a02:	c5 ff       	sbrs	r28, 5
    5a04:	0a c0       	rjmp	.+20     	; 0x5a1a <i2c_print_error+0xcc>
			printf("  TW_MT_DATA_NACK\n");
    5a06:	86 e6       	ldi	r24, 0x66	; 102
    5a08:	93 e0       	ldi	r25, 0x03	; 3
    5a0a:	a0 e0       	ldi	r26, 0x00	; 0
    5a0c:	ed b7       	in	r30, 0x3d	; 61
    5a0e:	fe b7       	in	r31, 0x3e	; 62
    5a10:	81 83       	std	Z+1, r24	; 0x01
    5a12:	92 83       	std	Z+2, r25	; 0x02
    5a14:	a3 83       	std	Z+3, r26	; 0x03
    5a16:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
		printf("\n");
    5a1a:	84 e6       	ldi	r24, 0x64	; 100
    5a1c:	93 e0       	ldi	r25, 0x03	; 3
    5a1e:	a0 e0       	ldi	r26, 0x00	; 0
    5a20:	ed b7       	in	r30, 0x3d	; 61
    5a22:	fe b7       	in	r31, 0x3e	; 62
    5a24:	81 83       	std	Z+1, r24	; 0x01
    5a26:	92 83       	std	Z+2, r25	; 0x02
    5a28:	a3 83       	std	Z+3, r26	; 0x03
    5a2a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
	}
}
    5a2e:	0f 90       	pop	r0
    5a30:	0f 90       	pop	r0
    5a32:	0f 90       	pop	r0
    5a34:	0f 90       	pop	r0
    5a36:	0f 90       	pop	r0
    5a38:	cf 91       	pop	r28
    5a3a:	08 95       	ret

00005a3c <i2c_display_task_errors>:

///@brief Display any task errors
void i2c_display_task_errors()
{
    5a3c:	6f 92       	push	r6
    5a3e:	7f 92       	push	r7
    5a40:	8f 92       	push	r8
    5a42:	af 92       	push	r10
    5a44:	bf 92       	push	r11
    5a46:	cf 92       	push	r12
    5a48:	df 92       	push	r13
    5a4a:	ef 92       	push	r14
    5a4c:	0f 93       	push	r16
    5a4e:	1f 93       	push	r17
    5a50:	cf 93       	push	r28
    5a52:	df 93       	push	r29
    5a54:	00 d0       	rcall	.+0      	; 0x5a56 <i2c_display_task_errors+0x1a>
    5a56:	00 d0       	rcall	.+0      	; 0x5a58 <i2c_display_task_errors+0x1c>
    5a58:	1f 92       	push	r1
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
    5a5a:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <i2c_task+0x2>
    5a5e:	90 e0       	ldi	r25, 0x00	; 0
    5a60:	ed b7       	in	r30, 0x3d	; 61
    5a62:	fe b7       	in	r31, 0x3e	; 62
    5a64:	95 83       	std	Z+5, r25	; 0x05
    5a66:	84 83       	std	Z+4, r24	; 0x04
    5a68:	81 e5       	ldi	r24, 0x51	; 81
    5a6a:	93 e0       	ldi	r25, 0x03	; 3
    5a6c:	a0 e0       	ldi	r26, 0x00	; 0
    5a6e:	81 83       	std	Z+1, r24	; 0x01
    5a70:	92 83       	std	Z+2, r25	; 0x02
    5a72:	a3 83       	std	Z+3, r26	; 0x03
    5a74:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
    5a78:	80 91 77 17 	lds	r24, 0x1777	; 0x801777 <i2c_task+0x3>
    5a7c:	90 e0       	ldi	r25, 0x00	; 0
    5a7e:	ed b7       	in	r30, 0x3d	; 61
    5a80:	fe b7       	in	r31, 0x3e	; 62
    5a82:	95 83       	std	Z+5, r25	; 0x05
    5a84:	84 83       	std	Z+4, r24	; 0x04
    5a86:	8d e3       	ldi	r24, 0x3D	; 61
    5a88:	93 e0       	ldi	r25, 0x03	; 3
    5a8a:	a0 e0       	ldi	r26, 0x00	; 0
    5a8c:	81 83       	std	Z+1, r24	; 0x01
    5a8e:	92 83       	std	Z+2, r25	; 0x02
    5a90:	a3 83       	std	Z+3, r26	; 0x03
    5a92:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    5a96:	c4 e5       	ldi	r28, 0x54	; 84
    5a98:	d7 e1       	ldi	r29, 0x17	; 23
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5a9a:	00 e0       	ldi	r16, 0x00	; 0
    5a9c:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("task: %d\n", (int) i);
    5a9e:	83 e3       	ldi	r24, 0x33	; 51
    5aa0:	93 e0       	ldi	r25, 0x03	; 3
    5aa2:	6c 01       	movw	r12, r24
    5aa4:	e1 2c       	mov	r14, r1
		i2c_print_error(i2c_task_op[i]);
		printf("\n");
    5aa6:	81 e3       	ldi	r24, 0x31	; 49
    5aa8:	93 e0       	ldi	r25, 0x03	; 3
    5aaa:	3c 01       	movw	r6, r24
    5aac:	81 2c       	mov	r8, r1
void i2c_display_task_errors()
{
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5aae:	30 2f       	mov	r19, r16
    5ab0:	21 2f       	mov	r18, r17
    5ab2:	5e 01       	movw	r10, r28
    5ab4:	0f 5f       	subi	r16, 0xFF	; 255
    5ab6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ab8:	88 81       	ld	r24, Y
    5aba:	99 81       	ldd	r25, Y+1	; 0x01
    5abc:	89 2b       	or	r24, r25
    5abe:	b1 f0       	breq	.+44     	; 0x5aec <i2c_display_task_errors+0xb0>
	{
		printf("task: %d\n", (int) i);
    5ac0:	ed b7       	in	r30, 0x3d	; 61
    5ac2:	fe b7       	in	r31, 0x3e	; 62
    5ac4:	34 83       	std	Z+4, r19	; 0x04
    5ac6:	25 83       	std	Z+5, r18	; 0x05
    5ac8:	c1 82       	std	Z+1, r12	; 0x01
    5aca:	d2 82       	std	Z+2, r13	; 0x02
    5acc:	e3 82       	std	Z+3, r14	; 0x03
    5ace:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    5ad2:	22 96       	adiw	r28, 0x02	; 2
		i2c_print_error(i2c_task_op[i]);
    5ad4:	f5 01       	movw	r30, r10
    5ad6:	80 81       	ld	r24, Z
    5ad8:	91 81       	ldd	r25, Z+1	; 0x01
    5ada:	39 df       	rcall	.-398    	; 0x594e <i2c_print_error>
		printf("\n");
    5adc:	ed b7       	in	r30, 0x3d	; 61
    5ade:	fe b7       	in	r31, 0x3e	; 62
    5ae0:	61 82       	std	Z+1, r6	; 0x01
    5ae2:	72 82       	std	Z+2, r7	; 0x02
    5ae4:	83 82       	std	Z+3, r8	; 0x03
    5ae6:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    5aea:	e1 cf       	rjmp	.-62     	; 0x5aae <i2c_display_task_errors+0x72>
	}
}
    5aec:	0f 90       	pop	r0
    5aee:	0f 90       	pop	r0
    5af0:	0f 90       	pop	r0
    5af2:	0f 90       	pop	r0
    5af4:	0f 90       	pop	r0
    5af6:	df 91       	pop	r29
    5af8:	cf 91       	pop	r28
    5afa:	1f 91       	pop	r17
    5afc:	0f 91       	pop	r16
    5afe:	ef 90       	pop	r14
    5b00:	df 90       	pop	r13
    5b02:	cf 90       	pop	r12
    5b04:	bf 90       	pop	r11
    5b06:	af 90       	pop	r10
    5b08:	8f 90       	pop	r8
    5b0a:	7f 90       	pop	r7
    5b0c:	6f 90       	pop	r6
    5b0e:	08 95       	ret

00005b10 <BINtoBCD>:
/// @return 0 if not running.
/// @return -1 ERROR
int8_t rtc_run_test()
{
	return ( rtc_run(-1) );
}
    5b10:	6a e0       	ldi	r22, 0x0A	; 10
    5b12:	0e 94 9e e2 	call	0x1c53c	; 0x1c53c <__udivmodqi4>
    5b16:	82 95       	swap	r24
    5b18:	80 7f       	andi	r24, 0xF0	; 240
    5b1a:	89 2b       	or	r24, r25
    5b1c:	08 95       	ret

00005b1e <BCDtoBIN>:
    5b1e:	98 2f       	mov	r25, r24
    5b20:	92 95       	swap	r25
    5b22:	9f 70       	andi	r25, 0x0F	; 15
    5b24:	8f 70       	andi	r24, 0x0F	; 15
    5b26:	2a e0       	ldi	r18, 0x0A	; 10
    5b28:	92 9f       	mul	r25, r18
    5b2a:	80 0d       	add	r24, r0
    5b2c:	11 24       	eor	r1, r1
    5b2e:	08 95       	ret

00005b30 <i2c_rtc_write>:
    5b30:	ac e0       	ldi	r26, 0x0C	; 12
    5b32:	b0 e0       	ldi	r27, 0x00	; 0
    5b34:	ee e9       	ldi	r30, 0x9E	; 158
    5b36:	fd e2       	ldi	r31, 0x2D	; 45
    5b38:	0c 94 4c e3 	jmp	0x1c698	; 0x1c698 <__prologue_saves__+0x1c>
    5b3c:	9f ef       	ldi	r25, 0xFF	; 255
    5b3e:	92 0f       	add	r25, r18
    5b40:	98 30       	cpi	r25, 0x08	; 8
    5b42:	50 f5       	brcc	.+84     	; 0x5b98 <i2c_rtc_write+0x68>
    5b44:	6c 83       	std	Y+4, r22	; 0x04
    5b46:	90 e0       	ldi	r25, 0x00	; 0
    5b48:	02 2f       	mov	r16, r18
    5b4a:	10 e0       	ldi	r17, 0x00	; 0
    5b4c:	69 2f       	mov	r22, r25
    5b4e:	09 2e       	mov	r0, r25
    5b50:	00 0c       	add	r0, r0
    5b52:	77 0b       	sbc	r23, r23
    5b54:	60 17       	cp	r22, r16
    5b56:	71 07       	cpc	r23, r17
    5b58:	6c f4       	brge	.+26     	; 0x5b74 <i2c_rtc_write+0x44>
    5b5a:	a5 e0       	ldi	r26, 0x05	; 5
    5b5c:	b0 e0       	ldi	r27, 0x00	; 0
    5b5e:	ac 0f       	add	r26, r28
    5b60:	bd 1f       	adc	r27, r29
    5b62:	a6 0f       	add	r26, r22
    5b64:	b7 1f       	adc	r27, r23
    5b66:	64 0f       	add	r22, r20
    5b68:	75 1f       	adc	r23, r21
    5b6a:	fb 01       	movw	r30, r22
    5b6c:	30 81       	ld	r19, Z
    5b6e:	3c 93       	st	X, r19
    5b70:	9f 5f       	subi	r25, 0xFF	; 255
    5b72:	ec cf       	rjmp	.-40     	; 0x5b4c <i2c_rtc_write+0x1c>
    5b74:	2f 5f       	subi	r18, 0xFF	; 255
    5b76:	ae 01       	movw	r20, r28
    5b78:	4c 5f       	subi	r20, 0xFC	; 252
    5b7a:	5f 4f       	sbci	r21, 0xFF	; 255
    5b7c:	60 e0       	ldi	r22, 0x00	; 0
    5b7e:	5a dd       	rcall	.-1356   	; 0x5634 <i2c_fn>
    5b80:	81 11       	cpse	r24, r1
    5b82:	0c c0       	rjmp	.+24     	; 0x5b9c <i2c_rtc_write+0x6c>
    5b84:	8e ed       	ldi	r24, 0xDE	; 222
    5b86:	94 e0       	ldi	r25, 0x04	; 4
    5b88:	a0 e0       	ldi	r26, 0x00	; 0
    5b8a:	ed b7       	in	r30, 0x3d	; 61
    5b8c:	fe b7       	in	r31, 0x3e	; 62
    5b8e:	81 83       	std	Z+1, r24	; 0x01
    5b90:	92 83       	std	Z+2, r25	; 0x02
    5b92:	a3 83       	std	Z+3, r26	; 0x03
    5b94:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    5b98:	80 e0       	ldi	r24, 0x00	; 0
    5b9a:	01 c0       	rjmp	.+2      	; 0x5b9e <i2c_rtc_write+0x6e>
    5b9c:	81 e0       	ldi	r24, 0x01	; 1
    5b9e:	2c 96       	adiw	r28, 0x0c	; 12
    5ba0:	e4 e0       	ldi	r30, 0x04	; 4
    5ba2:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

00005ba6 <i2c_rtc_read>:
    5ba6:	a4 e0       	ldi	r26, 0x04	; 4
    5ba8:	b0 e0       	ldi	r27, 0x00	; 0
    5baa:	e9 ed       	ldi	r30, 0xD9	; 217
    5bac:	fd e2       	ldi	r31, 0x2D	; 45
    5bae:	0c 94 4a e3 	jmp	0x1c694	; 0x1c694 <__prologue_saves__+0x18>
    5bb2:	6c 83       	std	Y+4, r22	; 0x04
    5bb4:	9f ef       	ldi	r25, 0xFF	; 255
    5bb6:	92 0f       	add	r25, r18
    5bb8:	98 30       	cpi	r25, 0x08	; 8
    5bba:	f8 f4       	brcc	.+62     	; 0x5bfa <i2c_rtc_read+0x54>
    5bbc:	02 2f       	mov	r16, r18
    5bbe:	7a 01       	movw	r14, r20
    5bc0:	18 2f       	mov	r17, r24
    5bc2:	21 e0       	ldi	r18, 0x01	; 1
    5bc4:	ae 01       	movw	r20, r28
    5bc6:	4c 5f       	subi	r20, 0xFC	; 252
    5bc8:	5f 4f       	sbci	r21, 0xFF	; 255
    5bca:	60 e0       	ldi	r22, 0x00	; 0
    5bcc:	33 dd       	rcall	.-1434   	; 0x5634 <i2c_fn>
    5bce:	81 11       	cpse	r24, r1
    5bd0:	03 c0       	rjmp	.+6      	; 0x5bd8 <i2c_rtc_read+0x32>
    5bd2:	82 ec       	ldi	r24, 0xC2	; 194
    5bd4:	94 e0       	ldi	r25, 0x04	; 4
    5bd6:	09 c0       	rjmp	.+18     	; 0x5bea <i2c_rtc_read+0x44>
    5bd8:	20 2f       	mov	r18, r16
    5bda:	a7 01       	movw	r20, r14
    5bdc:	61 e0       	ldi	r22, 0x01	; 1
    5bde:	81 2f       	mov	r24, r17
    5be0:	29 dd       	rcall	.-1454   	; 0x5634 <i2c_fn>
    5be2:	81 11       	cpse	r24, r1
    5be4:	0c c0       	rjmp	.+24     	; 0x5bfe <i2c_rtc_read+0x58>
    5be6:	89 ea       	ldi	r24, 0xA9	; 169
    5be8:	94 e0       	ldi	r25, 0x04	; 4
    5bea:	a0 e0       	ldi	r26, 0x00	; 0
    5bec:	ed b7       	in	r30, 0x3d	; 61
    5bee:	fe b7       	in	r31, 0x3e	; 62
    5bf0:	81 83       	std	Z+1, r24	; 0x01
    5bf2:	92 83       	std	Z+2, r25	; 0x02
    5bf4:	a3 83       	std	Z+3, r26	; 0x03
    5bf6:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    5bfa:	80 e0       	ldi	r24, 0x00	; 0
    5bfc:	01 c0       	rjmp	.+2      	; 0x5c00 <i2c_rtc_read+0x5a>
    5bfe:	81 e0       	ldi	r24, 0x01	; 1
    5c00:	24 96       	adiw	r28, 0x04	; 4
    5c02:	e6 e0       	ldi	r30, 0x06	; 6
    5c04:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

00005c08 <i2c_rtc_init>:
    5c08:	60 ea       	ldi	r22, 0xA0	; 160
    5c0a:	76 e8       	ldi	r23, 0x86	; 134
    5c0c:	81 e0       	ldi	r24, 0x01	; 1
    5c0e:	90 e0       	ldi	r25, 0x00	; 0
    5c10:	18 cc       	rjmp	.-2000   	; 0x5442 <i2c_init>
    5c12:	08 95       	ret

00005c14 <rtc_write>:
    5c14:	ab e0       	ldi	r26, 0x0B	; 11
    5c16:	b0 e0       	ldi	r27, 0x00	; 0
    5c18:	e0 e1       	ldi	r30, 0x10	; 16
    5c1a:	fe e2       	ldi	r31, 0x2E	; 46
    5c1c:	0c 94 4c e3 	jmp	0x1c698	; 0x1c698 <__prologue_saves__+0x1c>
    5c20:	8c 01       	movw	r16, r24
    5c22:	fc 01       	movw	r30, r24
    5c24:	80 81       	ld	r24, Z
    5c26:	74 df       	rcall	.-280    	; 0x5b10 <BINtoBCD>
    5c28:	8f 77       	andi	r24, 0x7F	; 127
    5c2a:	8c 83       	std	Y+4, r24	; 0x04
    5c2c:	f8 01       	movw	r30, r16
    5c2e:	82 81       	ldd	r24, Z+2	; 0x02
    5c30:	6f df       	rcall	.-290    	; 0x5b10 <BINtoBCD>
    5c32:	8f 77       	andi	r24, 0x7F	; 127
    5c34:	8d 83       	std	Y+5, r24	; 0x05
    5c36:	f8 01       	movw	r30, r16
    5c38:	84 81       	ldd	r24, Z+4	; 0x04
    5c3a:	6a df       	rcall	.-300    	; 0x5b10 <BINtoBCD>
    5c3c:	8f 73       	andi	r24, 0x3F	; 63
    5c3e:	8e 83       	std	Y+6, r24	; 0x06
    5c40:	f8 01       	movw	r30, r16
    5c42:	84 85       	ldd	r24, Z+12	; 0x0c
    5c44:	87 70       	andi	r24, 0x07	; 7
    5c46:	8f 5f       	subi	r24, 0xFF	; 255
    5c48:	8f 83       	std	Y+7, r24	; 0x07
    5c4a:	86 81       	ldd	r24, Z+6	; 0x06
    5c4c:	61 df       	rcall	.-318    	; 0x5b10 <BINtoBCD>
    5c4e:	8f 73       	andi	r24, 0x3F	; 63
    5c50:	88 87       	std	Y+8, r24	; 0x08
    5c52:	f8 01       	movw	r30, r16
    5c54:	80 85       	ldd	r24, Z+8	; 0x08
    5c56:	8f 5f       	subi	r24, 0xFF	; 255
    5c58:	5b df       	rcall	.-330    	; 0x5b10 <BINtoBCD>
    5c5a:	8f 71       	andi	r24, 0x1F	; 31
    5c5c:	89 87       	std	Y+9, r24	; 0x09
    5c5e:	f8 01       	movw	r30, r16
    5c60:	82 85       	ldd	r24, Z+10	; 0x0a
    5c62:	84 56       	subi	r24, 0x64	; 100
    5c64:	55 df       	rcall	.-342    	; 0x5b10 <BINtoBCD>
    5c66:	8a 87       	std	Y+10, r24	; 0x0a
    5c68:	83 e9       	ldi	r24, 0x93	; 147
    5c6a:	8b 87       	std	Y+11, r24	; 0x0b
    5c6c:	28 e0       	ldi	r18, 0x08	; 8
    5c6e:	ae 01       	movw	r20, r28
    5c70:	4c 5f       	subi	r20, 0xFC	; 252
    5c72:	5f 4f       	sbci	r21, 0xFF	; 255
    5c74:	60 e0       	ldi	r22, 0x00	; 0
    5c76:	88 e6       	ldi	r24, 0x68	; 104
    5c78:	5b df       	rcall	.-330    	; 0x5b30 <i2c_rtc_write>
    5c7a:	81 11       	cpse	r24, r1
    5c7c:	0c c0       	rjmp	.+24     	; 0x5c96 <rtc_write+0x82>
    5c7e:	88 e9       	ldi	r24, 0x98	; 152
    5c80:	94 e0       	ldi	r25, 0x04	; 4
    5c82:	a0 e0       	ldi	r26, 0x00	; 0
    5c84:	ed b7       	in	r30, 0x3d	; 61
    5c86:	fe b7       	in	r31, 0x3e	; 62
    5c88:	81 83       	std	Z+1, r24	; 0x01
    5c8a:	92 83       	std	Z+2, r25	; 0x02
    5c8c:	a3 83       	std	Z+3, r26	; 0x03
    5c8e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    5c92:	80 e0       	ldi	r24, 0x00	; 0
    5c94:	01 c0       	rjmp	.+2      	; 0x5c98 <rtc_write+0x84>
    5c96:	81 e0       	ldi	r24, 0x01	; 1
    5c98:	2b 96       	adiw	r28, 0x0b	; 11
    5c9a:	e4 e0       	ldi	r30, 0x04	; 4
    5c9c:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

00005ca0 <rtc_read>:
    5ca0:	ab e0       	ldi	r26, 0x0B	; 11
    5ca2:	b0 e0       	ldi	r27, 0x00	; 0
    5ca4:	e6 e5       	ldi	r30, 0x56	; 86
    5ca6:	fe e2       	ldi	r31, 0x2E	; 46
    5ca8:	0c 94 4c e3 	jmp	0x1c698	; 0x1c698 <__prologue_saves__+0x1c>
    5cac:	8c 01       	movw	r16, r24
    5cae:	28 e0       	ldi	r18, 0x08	; 8
    5cb0:	ae 01       	movw	r20, r28
    5cb2:	4c 5f       	subi	r20, 0xFC	; 252
    5cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    5cb6:	60 e0       	ldi	r22, 0x00	; 0
    5cb8:	88 e6       	ldi	r24, 0x68	; 104
    5cba:	75 df       	rcall	.-278    	; 0x5ba6 <i2c_rtc_read>
    5cbc:	81 11       	cpse	r24, r1
    5cbe:	0c c0       	rjmp	.+24     	; 0x5cd8 <rtc_read+0x38>
    5cc0:	88 e8       	ldi	r24, 0x88	; 136
    5cc2:	94 e0       	ldi	r25, 0x04	; 4
    5cc4:	a0 e0       	ldi	r26, 0x00	; 0
    5cc6:	ed b7       	in	r30, 0x3d	; 61
    5cc8:	fe b7       	in	r31, 0x3e	; 62
    5cca:	81 83       	std	Z+1, r24	; 0x01
    5ccc:	92 83       	std	Z+2, r25	; 0x02
    5cce:	a3 83       	std	Z+3, r26	; 0x03
    5cd0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    5cd4:	80 e0       	ldi	r24, 0x00	; 0
    5cd6:	33 c0       	rjmp	.+102    	; 0x5d3e <rtc_read+0x9e>
    5cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    5cda:	8f 77       	andi	r24, 0x7F	; 127
    5cdc:	20 df       	rcall	.-448    	; 0x5b1e <BCDtoBIN>
    5cde:	90 e0       	ldi	r25, 0x00	; 0
    5ce0:	f8 01       	movw	r30, r16
    5ce2:	91 83       	std	Z+1, r25	; 0x01
    5ce4:	80 83       	st	Z, r24
    5ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ce8:	8f 77       	andi	r24, 0x7F	; 127
    5cea:	19 df       	rcall	.-462    	; 0x5b1e <BCDtoBIN>
    5cec:	90 e0       	ldi	r25, 0x00	; 0
    5cee:	f8 01       	movw	r30, r16
    5cf0:	93 83       	std	Z+3, r25	; 0x03
    5cf2:	82 83       	std	Z+2, r24	; 0x02
    5cf4:	8e 81       	ldd	r24, Y+6	; 0x06
    5cf6:	8f 73       	andi	r24, 0x3F	; 63
    5cf8:	12 df       	rcall	.-476    	; 0x5b1e <BCDtoBIN>
    5cfa:	90 e0       	ldi	r25, 0x00	; 0
    5cfc:	f8 01       	movw	r30, r16
    5cfe:	95 83       	std	Z+5, r25	; 0x05
    5d00:	84 83       	std	Z+4, r24	; 0x04
    5d02:	8f 81       	ldd	r24, Y+7	; 0x07
    5d04:	87 70       	andi	r24, 0x07	; 7
    5d06:	90 e0       	ldi	r25, 0x00	; 0
    5d08:	01 97       	sbiw	r24, 0x01	; 1
    5d0a:	95 87       	std	Z+13, r25	; 0x0d
    5d0c:	84 87       	std	Z+12, r24	; 0x0c
    5d0e:	88 85       	ldd	r24, Y+8	; 0x08
    5d10:	8f 73       	andi	r24, 0x3F	; 63
    5d12:	05 df       	rcall	.-502    	; 0x5b1e <BCDtoBIN>
    5d14:	90 e0       	ldi	r25, 0x00	; 0
    5d16:	f8 01       	movw	r30, r16
    5d18:	97 83       	std	Z+7, r25	; 0x07
    5d1a:	86 83       	std	Z+6, r24	; 0x06
    5d1c:	89 85       	ldd	r24, Y+9	; 0x09
    5d1e:	8f 71       	andi	r24, 0x1F	; 31
    5d20:	fe de       	rcall	.-516    	; 0x5b1e <BCDtoBIN>
    5d22:	90 e0       	ldi	r25, 0x00	; 0
    5d24:	01 97       	sbiw	r24, 0x01	; 1
    5d26:	f8 01       	movw	r30, r16
    5d28:	91 87       	std	Z+9, r25	; 0x09
    5d2a:	80 87       	std	Z+8, r24	; 0x08
    5d2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d2e:	f7 de       	rcall	.-530    	; 0x5b1e <BCDtoBIN>
    5d30:	90 e0       	ldi	r25, 0x00	; 0
    5d32:	8c 59       	subi	r24, 0x9C	; 156
    5d34:	9f 4f       	sbci	r25, 0xFF	; 255
    5d36:	f8 01       	movw	r30, r16
    5d38:	93 87       	std	Z+11, r25	; 0x0b
    5d3a:	82 87       	std	Z+10, r24	; 0x0a
    5d3c:	81 e0       	ldi	r24, 0x01	; 1
    5d3e:	2b 96       	adiw	r28, 0x0b	; 11
    5d40:	e4 e0       	ldi	r30, 0x04	; 4
    5d42:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

00005d46 <rtc_run>:
    5d46:	a4 e0       	ldi	r26, 0x04	; 4
    5d48:	b0 e0       	ldi	r27, 0x00	; 0
    5d4a:	e9 ea       	ldi	r30, 0xA9	; 169
    5d4c:	fe e2       	ldi	r31, 0x2E	; 46
    5d4e:	0c 94 4c e3 	jmp	0x1c698	; 0x1c698 <__prologue_saves__+0x1c>
    5d52:	8c 01       	movw	r16, r24
    5d54:	21 e0       	ldi	r18, 0x01	; 1
    5d56:	ae 01       	movw	r20, r28
    5d58:	4c 5f       	subi	r20, 0xFC	; 252
    5d5a:	5f 4f       	sbci	r21, 0xFF	; 255
    5d5c:	60 e0       	ldi	r22, 0x00	; 0
    5d5e:	88 e6       	ldi	r24, 0x68	; 104
    5d60:	22 df       	rcall	.-444    	; 0x5ba6 <i2c_rtc_read>
    5d62:	81 11       	cpse	r24, r1
    5d64:	03 c0       	rjmp	.+6      	; 0x5d6c <rtc_run+0x26>
    5d66:	84 e7       	ldi	r24, 0x74	; 116
    5d68:	94 e0       	ldi	r25, 0x04	; 4
    5d6a:	24 c0       	rjmp	.+72     	; 0x5db4 <rtc_run+0x6e>
    5d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    5d6e:	0f 3f       	cpi	r16, 0xFF	; 255
    5d70:	ff ef       	ldi	r31, 0xFF	; 255
    5d72:	1f 07       	cpc	r17, r31
    5d74:	59 f4       	brne	.+22     	; 0x5d8c <rtc_run+0x46>
    5d76:	08 2e       	mov	r0, r24
    5d78:	00 0c       	add	r0, r0
    5d7a:	99 0b       	sbc	r25, r25
    5d7c:	80 95       	com	r24
    5d7e:	90 95       	com	r25
    5d80:	89 2f       	mov	r24, r25
    5d82:	88 1f       	adc	r24, r24
    5d84:	88 27       	eor	r24, r24
    5d86:	88 1f       	adc	r24, r24
    5d88:	90 e0       	ldi	r25, 0x00	; 0
    5d8a:	20 c0       	rjmp	.+64     	; 0x5dcc <rtc_run+0x86>
    5d8c:	8f 77       	andi	r24, 0x7F	; 127
    5d8e:	01 15       	cp	r16, r1
    5d90:	11 05       	cpc	r17, r1
    5d92:	11 f4       	brne	.+4      	; 0x5d98 <rtc_run+0x52>
    5d94:	90 e8       	ldi	r25, 0x80	; 128
    5d96:	01 c0       	rjmp	.+2      	; 0x5d9a <rtc_run+0x54>
    5d98:	90 e0       	ldi	r25, 0x00	; 0
    5d9a:	89 2b       	or	r24, r25
    5d9c:	8c 83       	std	Y+4, r24	; 0x04
    5d9e:	21 e0       	ldi	r18, 0x01	; 1
    5da0:	ae 01       	movw	r20, r28
    5da2:	4c 5f       	subi	r20, 0xFC	; 252
    5da4:	5f 4f       	sbci	r21, 0xFF	; 255
    5da6:	60 e0       	ldi	r22, 0x00	; 0
    5da8:	88 e6       	ldi	r24, 0x68	; 104
    5daa:	c2 de       	rcall	.-636    	; 0x5b30 <i2c_rtc_write>
    5dac:	81 11       	cpse	r24, r1
    5dae:	0d c0       	rjmp	.+26     	; 0x5dca <rtc_run+0x84>
    5db0:	8f e5       	ldi	r24, 0x5F	; 95
    5db2:	94 e0       	ldi	r25, 0x04	; 4
    5db4:	a0 e0       	ldi	r26, 0x00	; 0
    5db6:	ed b7       	in	r30, 0x3d	; 61
    5db8:	fe b7       	in	r31, 0x3e	; 62
    5dba:	81 83       	std	Z+1, r24	; 0x01
    5dbc:	92 83       	std	Z+2, r25	; 0x02
    5dbe:	a3 83       	std	Z+3, r26	; 0x03
    5dc0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    5dc4:	8f ef       	ldi	r24, 0xFF	; 255
    5dc6:	9f ef       	ldi	r25, 0xFF	; 255
    5dc8:	01 c0       	rjmp	.+2      	; 0x5dcc <rtc_run+0x86>
    5dca:	c8 01       	movw	r24, r16
    5dcc:	24 96       	adiw	r28, 0x04	; 4
    5dce:	e4 e0       	ldi	r30, 0x04	; 4
    5dd0:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

00005dd4 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  run state 0 = STOP, 1 = RUN
/// @return -1 = ERROR
uint8_t rtc_init (int force, time_t seconds)
{
    5dd4:	a7 e0       	ldi	r26, 0x07	; 7
    5dd6:	b0 e0       	ldi	r27, 0x00	; 0
    5dd8:	e0 ef       	ldi	r30, 0xF0	; 240
    5dda:	fe e2       	ldi	r31, 0x2E	; 46
    5ddc:	0c 94 4c e3 	jmp	0x1c698	; 0x1c698 <__prologue_saves__+0x1c>
    5de0:	8c 01       	movw	r16, r24
    5de2:	4c 83       	std	Y+4, r20	; 0x04
    5de4:	5d 83       	std	Y+5, r21	; 0x05
    5de6:	6e 83       	std	Y+6, r22	; 0x06
    5de8:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    i2c_rtc_init();
    5dea:	0e df       	rcall	.-484    	; 0x5c08 <i2c_rtc_init>

    if(!force)
    5dec:	01 15       	cp	r16, r1
    5dee:	11 05       	cpc	r17, r1
    5df0:	39 f4       	brne	.+14     	; 0x5e00 <rtc_init+0x2c>
    {
        state = rtc_run(-1);
    5df2:	8f ef       	ldi	r24, 0xFF	; 255
    5df4:	9f ef       	ldi	r25, 0xFF	; 255
    5df6:	a7 df       	rcall	.-178    	; 0x5d46 <rtc_run>
        if(state < 0)
    5df8:	87 fd       	sbrc	r24, 7
    5dfa:	16 c0       	rjmp	.+44     	; 0x5e28 <rtc_init+0x54>
        {
            rtc_ok = 0;
            return 0;
        }
        if(state == 0)                            // stopped
    5dfc:	81 11       	cpse	r24, r1
    5dfe:	22 c0       	rjmp	.+68     	; 0x5e44 <rtc_init+0x70>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5e00:	80 e0       	ldi	r24, 0x00	; 0
    5e02:	90 e0       	ldi	r25, 0x00	; 0
    5e04:	a0 df       	rcall	.-192    	; 0x5d46 <rtc_run>
    5e06:	97 fd       	sbrc	r25, 7
    5e08:	0f c0       	rjmp	.+30     	; 0x5e28 <rtc_init+0x54>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }

        tmp = gmtime(&seconds);
    5e0a:	ce 01       	movw	r24, r28
    5e0c:	04 96       	adiw	r24, 0x04	; 4
    5e0e:	a3 d6       	rcall	.+3398   	; 0x6b56 <gmtime>
    5e10:	00 97       	sbiw	r24, 0x00	; 0

        if(tmp == NULL || !rtc_write(tmp))
    5e12:	81 f4       	brne	.+32     	; 0x5e34 <rtc_init+0x60>
    5e14:	81 e4       	ldi	r24, 0x41	; 65
        {
            printf("rtc_init  write epoch failed\n");
    5e16:	94 e0       	ldi	r25, 0x04	; 4
    5e18:	a0 e0       	ldi	r26, 0x00	; 0
    5e1a:	ed b7       	in	r30, 0x3d	; 61
    5e1c:	fe b7       	in	r31, 0x3e	; 62
    5e1e:	81 83       	std	Z+1, r24	; 0x01
    5e20:	92 83       	std	Z+2, r25	; 0x02
    5e22:	a3 83       	std	Z+3, r26	; 0x03
    5e24:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    5e28:	10 92 eb 19 	sts	0x19EB, r1	; 0x8019eb <rtc_ok+0x1>
            rtc_ok = 0;
    5e2c:	10 92 ea 19 	sts	0x19EA, r1	; 0x8019ea <rtc_ok>
            return 0;
    5e30:	80 e0       	ldi	r24, 0x00	; 0
    5e32:	0e c0       	rjmp	.+28     	; 0x5e50 <rtc_init+0x7c>
            return 0;
        }

        tmp = gmtime(&seconds);

        if(tmp == NULL || !rtc_write(tmp))
    5e34:	ef de       	rcall	.-546    	; 0x5c14 <rtc_write>
    5e36:	88 23       	and	r24, r24
    5e38:	69 f3       	breq	.-38     	; 0x5e14 <rtc_init+0x40>
            printf("rtc_init  write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        if(rtc_run(1) < 0)                        // START RTC
    5e3a:	81 e0       	ldi	r24, 0x01	; 1
    5e3c:	90 e0       	ldi	r25, 0x00	; 0
    5e3e:	83 df       	rcall	.-250    	; 0x5d46 <rtc_run>
    5e40:	97 fd       	sbrc	r25, 7
    5e42:	f2 cf       	rjmp	.-28     	; 0x5e28 <rtc_init+0x54>
    5e44:	81 e0       	ldi	r24, 0x01	; 1
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5e46:	90 e0       	ldi	r25, 0x00	; 0
    5e48:	90 93 eb 19 	sts	0x19EB, r25	; 0x8019eb <rtc_ok+0x1>
    5e4c:	80 93 ea 19 	sts	0x19EA, r24	; 0x8019ea <rtc_ok>
    5e50:	27 96       	adiw	r28, 0x07	; 7
    return 1;
}
    5e52:	e4 e0       	ldi	r30, 0x04	; 4
    5e54:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

00005e58 <islower>:
    5e58:	9c 01       	movw	r18, r24
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    5e5a:	21 56       	subi	r18, 0x61	; 97
    5e5c:	31 09       	sbc	r19, r1
    5e5e:	81 e0       	ldi	r24, 0x01	; 1
    5e60:	90 e0       	ldi	r25, 0x00	; 0
    5e62:	2a 31       	cpi	r18, 0x1A	; 26
    5e64:	31 05       	cpc	r19, r1
    5e66:	10 f0       	brcs	.+4      	; 0x5e6c <islower+0x14>
    5e68:	80 e0       	ldi	r24, 0x00	; 0
    5e6a:	90 e0       	ldi	r25, 0x00	; 0
    5e6c:	08 95       	ret

00005e6e <toupper>:
    5e6e:	cf 93       	push	r28
    5e70:	df 93       	push	r29
    5e72:	ec 01       	movw	r28, r24
    5e74:	f1 df       	rcall	.-30     	; 0x5e58 <islower>
    5e76:	89 2b       	or	r24, r25
    5e78:	19 f0       	breq	.+6      	; 0x5e80 <toupper+0x12>
    5e7a:	ce 01       	movw	r24, r28
    5e7c:	80 97       	sbiw	r24, 0x20	; 32
    5e7e:	01 c0       	rjmp	.+2      	; 0x5e82 <toupper+0x14>
    5e80:	ce 01       	movw	r24, r28
    5e82:	df 91       	pop	r29
    5e84:	cf 91       	pop	r28
    5e86:	08 95       	ret

00005e88 <strcpy>:
    5e88:	fc 01       	movw	r30, r24
    5e8a:	db 01       	movw	r26, r22
    5e8c:	2d 91       	ld	r18, X+
    5e8e:	bd 01       	movw	r22, r26
    5e90:	01 96       	adiw	r24, 0x01	; 1
    5e92:	22 23       	and	r18, r18
    5e94:	11 f0       	breq	.+4      	; 0x5e9a <strcpy+0x12>
    5e96:	20 83       	st	Z, r18
    5e98:	f7 cf       	rjmp	.-18     	; 0x5e88 <strcpy>
    5e9a:	10 82       	st	Z, r1
    5e9c:	08 95       	ret

00005e9e <strncpy>:
    5e9e:	db 01       	movw	r26, r22
    5ea0:	fc 01       	movw	r30, r24
    5ea2:	2d 91       	ld	r18, X+
    5ea4:	21 11       	cpse	r18, r1
    5ea6:	03 c0       	rjmp	.+6      	; 0x5eae <strncpy+0x10>
    5ea8:	4e 0f       	add	r20, r30
    5eaa:	5f 1f       	adc	r21, r31
    5eac:	08 c0       	rjmp	.+16     	; 0x5ebe <strncpy+0x20>
    5eae:	41 15       	cp	r20, r1
    5eb0:	51 05       	cpc	r21, r1
    5eb2:	21 f0       	breq	.+8      	; 0x5ebc <strncpy+0x1e>
    5eb4:	21 93       	st	Z+, r18
    5eb6:	41 50       	subi	r20, 0x01	; 1
    5eb8:	51 09       	sbc	r21, r1
    5eba:	f3 cf       	rjmp	.-26     	; 0x5ea2 <strncpy+0x4>
    5ebc:	08 95       	ret
    5ebe:	4e 17       	cp	r20, r30
    5ec0:	5f 07       	cpc	r21, r31
    5ec2:	11 f0       	breq	.+4      	; 0x5ec8 <strncpy+0x2a>
    5ec4:	11 92       	st	Z+, r1
    5ec6:	fb cf       	rjmp	.-10     	; 0x5ebe <strncpy+0x20>
    5ec8:	08 95       	ret

00005eca <strcat>:
    5eca:	cf 93       	push	r28
    5ecc:	df 93       	push	r29
    5ece:	d8 2f       	mov	r29, r24
    5ed0:	c9 2f       	mov	r28, r25
    5ed2:	28 2f       	mov	r18, r24
    5ed4:	39 2f       	mov	r19, r25
    5ed6:	c9 01       	movw	r24, r18
    5ed8:	2f 5f       	subi	r18, 0xFF	; 255
    5eda:	3f 4f       	sbci	r19, 0xFF	; 255
    5edc:	fc 01       	movw	r30, r24
    5ede:	40 81       	ld	r20, Z
    5ee0:	41 11       	cpse	r20, r1
    5ee2:	f9 cf       	rjmp	.-14     	; 0x5ed6 <strcat+0xc>
    5ee4:	d1 df       	rcall	.-94     	; 0x5e88 <strcpy>
    5ee6:	8d 2f       	mov	r24, r29
    5ee8:	9c 2f       	mov	r25, r28
    5eea:	df 91       	pop	r29
    5eec:	cf 91       	pop	r28
    5eee:	08 95       	ret

00005ef0 <reverse>:
    5ef0:	fc 01       	movw	r30, r24
    5ef2:	01 90       	ld	r0, Z+
    5ef4:	00 20       	and	r0, r0
    5ef6:	e9 f7       	brne	.-6      	; 0x5ef2 <reverse+0x2>
    5ef8:	31 97       	sbiw	r30, 0x01	; 1
    5efa:	e8 1b       	sub	r30, r24
    5efc:	f9 0b       	sbc	r31, r25
    5efe:	af 01       	movw	r20, r30
    5f00:	55 95       	asr	r21
    5f02:	47 95       	ror	r20
    5f04:	e8 0f       	add	r30, r24
    5f06:	f9 1f       	adc	r31, r25
    5f08:	dc 01       	movw	r26, r24
    5f0a:	9d 01       	movw	r18, r26
    5f0c:	28 1b       	sub	r18, r24
    5f0e:	39 0b       	sbc	r19, r25
    5f10:	24 17       	cp	r18, r20
    5f12:	35 07       	cpc	r19, r21
    5f14:	2c f4       	brge	.+10     	; 0x5f20 <reverse+0x30>
    5f16:	22 91       	ld	r18, -Z
    5f18:	3c 91       	ld	r19, X
    5f1a:	30 83       	st	Z, r19
    5f1c:	2d 93       	st	X+, r18
    5f1e:	f5 cf       	rjmp	.-22     	; 0x5f0a <reverse+0x1a>
    5f20:	08 95       	ret

00005f22 <strupper>:
    5f22:	cf 93       	push	r28
    5f24:	df 93       	push	r29
    5f26:	ec 01       	movw	r28, r24
    5f28:	88 81       	ld	r24, Y
    5f2a:	88 23       	and	r24, r24
    5f2c:	21 f0       	breq	.+8      	; 0x5f36 <strupper+0x14>
    5f2e:	90 e0       	ldi	r25, 0x00	; 0
    5f30:	9e df       	rcall	.-196    	; 0x5e6e <toupper>
    5f32:	89 93       	st	Y+, r24
    5f34:	f9 cf       	rjmp	.-14     	; 0x5f28 <strupper+0x6>
    5f36:	df 91       	pop	r29
    5f38:	cf 91       	pop	r28
    5f3a:	08 95       	ret

00005f3c <strcmp>:
    5f3c:	dc 01       	movw	r26, r24
    5f3e:	fb 01       	movw	r30, r22
    5f40:	2d 91       	ld	r18, X+
    5f42:	41 91       	ld	r20, Z+
    5f44:	50 e0       	ldi	r21, 0x00	; 0
    5f46:	30 e0       	ldi	r19, 0x00	; 0
    5f48:	c9 01       	movw	r24, r18
    5f4a:	84 1b       	sub	r24, r20
    5f4c:	95 0b       	sbc	r25, r21
    5f4e:	11 f4       	brne	.+4      	; 0x5f54 <strcmp+0x18>
    5f50:	45 2b       	or	r20, r21
    5f52:	b1 f7       	brne	.-20     	; 0x5f40 <strcmp+0x4>
    5f54:	08 95       	ret

00005f56 <strcasecmp>:
    5f56:	ef 92       	push	r14
    5f58:	ff 92       	push	r15
    5f5a:	0f 93       	push	r16
    5f5c:	1f 93       	push	r17
    5f5e:	cf 93       	push	r28
    5f60:	df 93       	push	r29
    5f62:	7c 01       	movw	r14, r24
    5f64:	8b 01       	movw	r16, r22
    5f66:	f7 01       	movw	r30, r14
    5f68:	81 91       	ld	r24, Z+
    5f6a:	7f 01       	movw	r14, r30
    5f6c:	90 e0       	ldi	r25, 0x00	; 0
    5f6e:	7f df       	rcall	.-258    	; 0x5e6e <toupper>
    5f70:	ec 01       	movw	r28, r24
    5f72:	f8 01       	movw	r30, r16
    5f74:	81 91       	ld	r24, Z+
    5f76:	8f 01       	movw	r16, r30
    5f78:	90 e0       	ldi	r25, 0x00	; 0
    5f7a:	79 df       	rcall	.-270    	; 0x5e6e <toupper>
    5f7c:	9c 01       	movw	r18, r24
    5f7e:	ce 01       	movw	r24, r28
    5f80:	82 1b       	sub	r24, r18
    5f82:	93 0b       	sbc	r25, r19
    5f84:	11 f4       	brne	.+4      	; 0x5f8a <strcasecmp+0x34>
    5f86:	23 2b       	or	r18, r19
    5f88:	71 f7       	brne	.-36     	; 0x5f66 <strcasecmp+0x10>
    5f8a:	cd b7       	in	r28, 0x3d	; 61
    5f8c:	de b7       	in	r29, 0x3e	; 62
    5f8e:	e6 e0       	ldi	r30, 0x06	; 6
    5f90:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

00005f94 <strncasecmp>:
    5f94:	a0 e0       	ldi	r26, 0x00	; 0
    5f96:	b0 e0       	ldi	r27, 0x00	; 0
    5f98:	e0 ed       	ldi	r30, 0xD0	; 208
    5f9a:	ff e2       	ldi	r31, 0x2F	; 47
    5f9c:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
    5fa0:	8c 01       	movw	r16, r24
    5fa2:	7b 01       	movw	r14, r22
    5fa4:	6c 01       	movw	r12, r24
    5fa6:	c4 0e       	add	r12, r20
    5fa8:	d5 1e       	adc	r13, r21
    5faa:	0c 15       	cp	r16, r12
    5fac:	1d 05       	cpc	r17, r13
    5fae:	99 f0       	breq	.+38     	; 0x5fd6 <strncasecmp+0x42>
    5fb0:	f8 01       	movw	r30, r16
    5fb2:	81 91       	ld	r24, Z+
    5fb4:	8f 01       	movw	r16, r30
    5fb6:	90 e0       	ldi	r25, 0x00	; 0
    5fb8:	5a df       	rcall	.-332    	; 0x5e6e <toupper>
    5fba:	ec 01       	movw	r28, r24
    5fbc:	f7 01       	movw	r30, r14
    5fbe:	81 91       	ld	r24, Z+
    5fc0:	7f 01       	movw	r14, r30
    5fc2:	90 e0       	ldi	r25, 0x00	; 0
    5fc4:	54 df       	rcall	.-344    	; 0x5e6e <toupper>
    5fc6:	9c 01       	movw	r18, r24
    5fc8:	ce 01       	movw	r24, r28
    5fca:	82 1b       	sub	r24, r18
    5fcc:	93 0b       	sbc	r25, r19
    5fce:	29 f4       	brne	.+10     	; 0x5fda <strncasecmp+0x46>
    5fd0:	23 2b       	or	r18, r19
    5fd2:	59 f7       	brne	.-42     	; 0x5faa <strncasecmp+0x16>
    5fd4:	02 c0       	rjmp	.+4      	; 0x5fda <strncasecmp+0x46>
    5fd6:	80 e0       	ldi	r24, 0x00	; 0
    5fd8:	90 e0       	ldi	r25, 0x00	; 0
    5fda:	cd b7       	in	r28, 0x3d	; 61
    5fdc:	de b7       	in	r29, 0x3e	; 62
    5fde:	e8 e0       	ldi	r30, 0x08	; 8
    5fe0:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

00005fe4 <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    5fe4:	0f 93       	push	r16
    5fe6:	1f 93       	push	r17
    5fe8:	cf 93       	push	r28
    5fea:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    5fec:	00 97       	sbiw	r24, 0x00	; 0
    5fee:	99 f0       	breq	.+38     	; 0x6016 <stralloc+0x32>
    5ff0:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    5ff2:	fc 01       	movw	r30, r24
    5ff4:	01 90       	ld	r0, Z+
    5ff6:	00 20       	and	r0, r0
    5ff8:	e9 f7       	brne	.-6      	; 0x5ff4 <stralloc+0x10>
    5ffa:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    5ffc:	61 e0       	ldi	r22, 0x01	; 1
    5ffe:	70 e0       	ldi	r23, 0x00	; 0
    6000:	8c 1b       	sub	r24, r28
    6002:	9d 0b       	sbc	r25, r29
    6004:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <safecalloc>
    6008:	8c 01       	movw	r16, r24
    if(!ptr)
    600a:	00 97       	sbiw	r24, 0x00	; 0
    600c:	21 f0       	breq	.+8      	; 0x6016 <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    600e:	be 01       	movw	r22, r28
    6010:	3b df       	rcall	.-394    	; 0x5e88 <strcpy>
    return(ptr);
    6012:	c8 01       	movw	r24, r16
    6014:	02 c0       	rjmp	.+4      	; 0x601a <stralloc+0x36>
    6016:	80 e0       	ldi	r24, 0x00	; 0
    6018:	90 e0       	ldi	r25, 0x00	; 0
}
    601a:	df 91       	pop	r29
    601c:	cf 91       	pop	r28
    601e:	1f 91       	pop	r17
    6020:	0f 91       	pop	r16
    6022:	08 95       	ret

00006024 <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    6024:	00 d0       	rcall	.+0      	; 0x6026 <sep+0x2>
    6026:	1f 92       	push	r1
    6028:	8e e1       	ldi	r24, 0x1E	; 30
    602a:	95 e0       	ldi	r25, 0x05	; 5
    602c:	a0 e0       	ldi	r26, 0x00	; 0
    602e:	ed b7       	in	r30, 0x3d	; 61
    6030:	fe b7       	in	r31, 0x3e	; 62
    6032:	81 83       	std	Z+1, r24	; 0x01
    6034:	92 83       	std	Z+2, r25	; 0x02
    6036:	a3 83       	std	Z+3, r26	; 0x03
    6038:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    603c:	0f 90       	pop	r0
    603e:	0f 90       	pop	r0
    6040:	0f 90       	pop	r0
    6042:	08 95       	ret

00006044 <trim_tail>:
    6044:	00 97       	sbiw	r24, 0x00	; 0
    6046:	69 f0       	breq	.+26     	; 0x6062 <trim_tail+0x1e>
    6048:	fc 01       	movw	r30, r24
    604a:	01 90       	ld	r0, Z+
    604c:	00 20       	and	r0, r0
    604e:	e9 f7       	brne	.-6      	; 0x604a <trim_tail+0x6>
    6050:	31 97       	sbiw	r30, 0x01	; 1
    6052:	e8 17       	cp	r30, r24
    6054:	f9 07       	cpc	r31, r25
    6056:	29 f0       	breq	.+10     	; 0x6062 <trim_tail+0x1e>
    6058:	22 91       	ld	r18, -Z
    605a:	21 32       	cpi	r18, 0x21	; 33
    605c:	10 f4       	brcc	.+4      	; 0x6062 <trim_tail+0x1e>
    605e:	10 82       	st	Z, r1
    6060:	f8 cf       	rjmp	.-16     	; 0x6052 <trim_tail+0xe>
    6062:	08 95       	ret

00006064 <skipspaces>:
    6064:	00 97       	sbiw	r24, 0x00	; 0
    6066:	39 f0       	breq	.+14     	; 0x6076 <skipspaces+0x12>
    6068:	fc 01       	movw	r30, r24
    606a:	cf 01       	movw	r24, r30
    606c:	21 91       	ld	r18, Z+
    606e:	20 32       	cpi	r18, 0x20	; 32
    6070:	e1 f3       	breq	.-8      	; 0x606a <skipspaces+0x6>
    6072:	29 30       	cpi	r18, 0x09	; 9
    6074:	d1 f3       	breq	.-12     	; 0x606a <skipspaces+0x6>
    6076:	08 95       	ret

00006078 <MATCH>:
    6078:	cf 93       	push	r28
    607a:	df 93       	push	r29
    607c:	fb 01       	movw	r30, r22
    607e:	01 90       	ld	r0, Z+
    6080:	00 20       	and	r0, r0
    6082:	e9 f7       	brne	.-6      	; 0x607e <MATCH+0x6>
    6084:	31 97       	sbiw	r30, 0x01	; 1
    6086:	ef 01       	movw	r28, r30
    6088:	c6 1b       	sub	r28, r22
    608a:	d7 0b       	sbc	r29, r23
    608c:	57 df       	rcall	.-338    	; 0x5f3c <strcmp>
    608e:	89 2b       	or	r24, r25
    6090:	11 f4       	brne	.+4      	; 0x6096 <MATCH+0x1e>
    6092:	ce 01       	movw	r24, r28
    6094:	02 c0       	rjmp	.+4      	; 0x609a <MATCH+0x22>
    6096:	80 e0       	ldi	r24, 0x00	; 0
    6098:	90 e0       	ldi	r25, 0x00	; 0
    609a:	df 91       	pop	r29
    609c:	cf 91       	pop	r28
    609e:	08 95       	ret

000060a0 <MATCHI>:
    60a0:	cf 93       	push	r28
    60a2:	df 93       	push	r29
    60a4:	fb 01       	movw	r30, r22
    60a6:	01 90       	ld	r0, Z+
    60a8:	00 20       	and	r0, r0
    60aa:	e9 f7       	brne	.-6      	; 0x60a6 <MATCHI+0x6>
    60ac:	31 97       	sbiw	r30, 0x01	; 1
    60ae:	ef 01       	movw	r28, r30
    60b0:	c6 1b       	sub	r28, r22
    60b2:	d7 0b       	sbc	r29, r23
    60b4:	50 df       	rcall	.-352    	; 0x5f56 <strcasecmp>
    60b6:	89 2b       	or	r24, r25
    60b8:	11 f4       	brne	.+4      	; 0x60be <MATCHI+0x1e>
    60ba:	ce 01       	movw	r24, r28
    60bc:	02 c0       	rjmp	.+4      	; 0x60c2 <MATCHI+0x22>
    60be:	80 e0       	ldi	r24, 0x00	; 0
    60c0:	90 e0       	ldi	r25, 0x00	; 0
    60c2:	df 91       	pop	r29
    60c4:	cf 91       	pop	r28
    60c6:	08 95       	ret

000060c8 <MATCHARGS>:
    60c8:	a9 e0       	ldi	r26, 0x09	; 9
    60ca:	b0 e0       	ldi	r27, 0x00	; 0
    60cc:	ea e6       	ldi	r30, 0x6A	; 106
    60ce:	f0 e3       	ldi	r31, 0x30	; 48
    60d0:	0c 94 4a e3 	jmp	0x1c694	; 0x1c694 <__prologue_saves__+0x18>
    60d4:	eb 01       	movw	r28, r22
    60d6:	8a 01       	movw	r16, r20
    60d8:	79 01       	movw	r14, r18
    60da:	e2 df       	rcall	.-60     	; 0x60a0 <MATCHI>
    60dc:	00 97       	sbiw	r24, 0x00	; 0
    60de:	c1 f0       	breq	.+48     	; 0x6110 <MATCHARGS+0x48>
    60e0:	e0 16       	cp	r14, r16
    60e2:	f1 06       	cpc	r15, r17
    60e4:	9c f4       	brge	.+38     	; 0x610c <MATCHARGS+0x44>
    60e6:	ed b7       	in	r30, 0x3d	; 61
    60e8:	fe b7       	in	r31, 0x3e	; 62
    60ea:	f1 86       	std	Z+9, r15	; 0x09
    60ec:	e0 86       	std	Z+8, r14	; 0x08
    60ee:	17 83       	std	Z+7, r17	; 0x07
    60f0:	06 83       	std	Z+6, r16	; 0x06
    60f2:	d5 83       	std	Z+5, r29	; 0x05
    60f4:	c4 83       	std	Z+4, r28	; 0x04
    60f6:	88 ef       	ldi	r24, 0xF8	; 248
    60f8:	94 e0       	ldi	r25, 0x04	; 4
    60fa:	a0 e0       	ldi	r26, 0x00	; 0
    60fc:	81 83       	std	Z+1, r24	; 0x01
    60fe:	92 83       	std	Z+2, r25	; 0x02
    6100:	a3 83       	std	Z+3, r26	; 0x03
    6102:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    6106:	80 e0       	ldi	r24, 0x00	; 0
    6108:	90 e0       	ldi	r25, 0x00	; 0
    610a:	02 c0       	rjmp	.+4      	; 0x6110 <MATCHARGS+0x48>
    610c:	81 e0       	ldi	r24, 0x01	; 1
    610e:	90 e0       	ldi	r25, 0x00	; 0
    6110:	cd b7       	in	r28, 0x3d	; 61
    6112:	de b7       	in	r29, 0x3e	; 62
    6114:	29 96       	adiw	r28, 0x09	; 9
    6116:	e6 e0       	ldi	r30, 0x06	; 6
    6118:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

0000611c <MATCHI_LEN>:
    611c:	cf 93       	push	r28
    611e:	df 93       	push	r29
    6120:	00 97       	sbiw	r24, 0x00	; 0
    6122:	89 f0       	breq	.+34     	; 0x6146 <MATCHI_LEN+0x2a>
    6124:	61 15       	cp	r22, r1
    6126:	71 05       	cpc	r23, r1
    6128:	71 f0       	breq	.+28     	; 0x6146 <MATCHI_LEN+0x2a>
    612a:	eb 01       	movw	r28, r22
    612c:	09 90       	ld	r0, Y+
    612e:	00 20       	and	r0, r0
    6130:	e9 f7       	brne	.-6      	; 0x612c <MATCHI_LEN+0x10>
    6132:	21 97       	sbiw	r28, 0x01	; 1
    6134:	c6 1b       	sub	r28, r22
    6136:	d7 0b       	sbc	r29, r23
    6138:	31 f0       	breq	.+12     	; 0x6146 <MATCHI_LEN+0x2a>
    613a:	ae 01       	movw	r20, r28
    613c:	2b df       	rcall	.-426    	; 0x5f94 <strncasecmp>
    613e:	89 2b       	or	r24, r25
    6140:	11 f4       	brne	.+4      	; 0x6146 <MATCHI_LEN+0x2a>
    6142:	ce 01       	movw	r24, r28
    6144:	02 c0       	rjmp	.+4      	; 0x614a <MATCHI_LEN+0x2e>
    6146:	80 e0       	ldi	r24, 0x00	; 0
    6148:	90 e0       	ldi	r25, 0x00	; 0
    614a:	df 91       	pop	r29
    614c:	cf 91       	pop	r28
    614e:	08 95       	ret

00006150 <split_args>:
    6150:	a0 e0       	ldi	r26, 0x00	; 0
    6152:	b0 e0       	ldi	r27, 0x00	; 0
    6154:	ee ea       	ldi	r30, 0xAE	; 174
    6156:	f0 e3       	ldi	r31, 0x30	; 48
    6158:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
    615c:	dc 01       	movw	r26, r24
    615e:	6a 01       	movw	r12, r20
    6160:	8b 01       	movw	r16, r22
    6162:	fb 01       	movw	r30, r22
    6164:	80 e0       	ldi	r24, 0x00	; 0
    6166:	90 e0       	ldi	r25, 0x00	; 0
    6168:	8c 15       	cp	r24, r12
    616a:	9d 05       	cpc	r25, r13
    616c:	24 f4       	brge	.+8      	; 0x6176 <split_args+0x26>
    616e:	11 92       	st	Z+, r1
    6170:	11 92       	st	Z+, r1
    6172:	01 96       	adiw	r24, 0x01	; 1
    6174:	f9 cf       	rjmp	.-14     	; 0x6168 <split_args+0x18>
    6176:	c1 14       	cp	r12, r1
    6178:	d1 04       	cpc	r13, r1
    617a:	d9 f1       	breq	.+118    	; 0x61f2 <split_args+0xa2>
    617c:	10 97       	sbiw	r26, 0x00	; 0
    617e:	c9 f1       	breq	.+114    	; 0x61f2 <split_args+0xa2>
    6180:	ee 24       	eor	r14, r14
    6182:	e3 94       	inc	r14
    6184:	f1 2c       	mov	r15, r1
    6186:	c0 e0       	ldi	r28, 0x00	; 0
    6188:	d0 e0       	ldi	r29, 0x00	; 0
    618a:	8c 91       	ld	r24, X
    618c:	88 23       	and	r24, r24
    618e:	b1 f1       	breq	.+108    	; 0x61fc <split_args+0xac>
    6190:	cc 15       	cp	r28, r12
    6192:	dd 05       	cpc	r29, r13
    6194:	9c f5       	brge	.+102    	; 0x61fc <split_args+0xac>
    6196:	cd 01       	movw	r24, r26
    6198:	65 df       	rcall	.-310    	; 0x6064 <skipspaces>
    619a:	dc 01       	movw	r26, r24
    619c:	2c 91       	ld	r18, X
    619e:	22 23       	and	r18, r18
    61a0:	69 f1       	breq	.+90     	; 0x61fc <split_args+0xac>
    61a2:	22 32       	cpi	r18, 0x22	; 34
    61a4:	79 f4       	brne	.+30     	; 0x61c4 <split_args+0x74>
    61a6:	fc 01       	movw	r30, r24
    61a8:	31 96       	adiw	r30, 0x01	; 1
    61aa:	d8 01       	movw	r26, r16
    61ac:	ed 93       	st	X+, r30
    61ae:	fc 93       	st	X, r31
    61b0:	df 01       	movw	r26, r30
    61b2:	80 81       	ld	r24, Z
    61b4:	31 96       	adiw	r30, 0x01	; 1
    61b6:	88 23       	and	r24, r24
    61b8:	a9 f0       	breq	.+42     	; 0x61e4 <split_args+0x94>
    61ba:	82 32       	cpi	r24, 0x22	; 34
    61bc:	c9 f7       	brne	.-14     	; 0x61b0 <split_args+0x60>
    61be:	1c 92       	st	X, r1
    61c0:	df 01       	movw	r26, r30
    61c2:	10 c0       	rjmp	.+32     	; 0x61e4 <split_args+0x94>
    61c4:	f8 01       	movw	r30, r16
    61c6:	91 83       	std	Z+1, r25	; 0x01
    61c8:	80 83       	st	Z, r24
    61ca:	fc 01       	movw	r30, r24
    61cc:	2e 2f       	mov	r18, r30
    61ce:	9f 2f       	mov	r25, r31
    61d0:	81 91       	ld	r24, Z+
    61d2:	3f ed       	ldi	r19, 0xDF	; 223
    61d4:	38 0f       	add	r19, r24
    61d6:	3e 35       	cpi	r19, 0x5E	; 94
    61d8:	c8 f3       	brcs	.-14     	; 0x61cc <split_args+0x7c>
    61da:	88 23       	and	r24, r24
    61dc:	69 f0       	breq	.+26     	; 0x61f8 <split_args+0xa8>
    61de:	a2 2f       	mov	r26, r18
    61e0:	b9 2f       	mov	r27, r25
    61e2:	1d 92       	st	X+, r1
    61e4:	21 96       	adiw	r28, 0x01	; 1
    61e6:	ff ef       	ldi	r31, 0xFF	; 255
    61e8:	ef 1a       	sub	r14, r31
    61ea:	ff 0a       	sbc	r15, r31
    61ec:	0e 5f       	subi	r16, 0xFE	; 254
    61ee:	1f 4f       	sbci	r17, 0xFF	; 255
    61f0:	cc cf       	rjmp	.-104    	; 0x618a <split_args+0x3a>
    61f2:	80 e0       	ldi	r24, 0x00	; 0
    61f4:	90 e0       	ldi	r25, 0x00	; 0
    61f6:	03 c0       	rjmp	.+6      	; 0x61fe <split_args+0xae>
    61f8:	c7 01       	movw	r24, r14
    61fa:	01 c0       	rjmp	.+2      	; 0x61fe <split_args+0xae>
    61fc:	ce 01       	movw	r24, r28
    61fe:	cd b7       	in	r28, 0x3d	; 61
    6200:	de b7       	in	r29, 0x3e	; 62
    6202:	e8 e0       	ldi	r30, 0x08	; 8
    6204:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

00006208 <get_token>:
    6208:	ef 92       	push	r14
    620a:	ff 92       	push	r15
    620c:	0f 93       	push	r16
    620e:	1f 93       	push	r17
    6210:	cf 93       	push	r28
    6212:	df 93       	push	r29
    6214:	eb 01       	movw	r28, r22
    6216:	8a 01       	movw	r16, r20
    6218:	18 82       	st	Y, r1
    621a:	00 97       	sbiw	r24, 0x00	; 0
    621c:	89 f1       	breq	.+98     	; 0x6280 <get_token+0x78>
    621e:	fc 01       	movw	r30, r24
    6220:	20 81       	ld	r18, Z
    6222:	22 23       	and	r18, r18
    6224:	79 f1       	breq	.+94     	; 0x6284 <get_token+0x7c>
    6226:	1e df       	rcall	.-452    	; 0x6064 <skipspaces>
    6228:	7c 01       	movw	r14, r24
    622a:	0c df       	rcall	.-488    	; 0x6044 <trim_tail>
    622c:	f7 01       	movw	r30, r14
    622e:	cf 01       	movw	r24, r30
    6230:	21 91       	ld	r18, Z+
    6232:	21 32       	cpi	r18, 0x21	; 33
    6234:	e0 f0       	brcs	.+56     	; 0x626e <get_token+0x66>
    6236:	10 16       	cp	r1, r16
    6238:	11 06       	cpc	r1, r17
    623a:	cc f4       	brge	.+50     	; 0x626e <get_token+0x66>
    623c:	22 32       	cpi	r18, 0x22	; 34
    623e:	79 f4       	brne	.+30     	; 0x625e <get_token+0x56>
    6240:	fc 01       	movw	r30, r24
    6242:	31 96       	adiw	r30, 0x01	; 1
    6244:	0c 0f       	add	r16, r28
    6246:	1d 1f       	adc	r17, r29
    6248:	cf 01       	movw	r24, r30
    624a:	21 91       	ld	r18, Z+
    624c:	22 23       	and	r18, r18
    624e:	79 f0       	breq	.+30     	; 0x626e <get_token+0x66>
    6250:	22 32       	cpi	r18, 0x22	; 34
    6252:	59 f0       	breq	.+22     	; 0x626a <get_token+0x62>
    6254:	c0 17       	cp	r28, r16
    6256:	d1 07       	cpc	r29, r17
    6258:	51 f0       	breq	.+20     	; 0x626e <get_token+0x66>
    625a:	29 93       	st	Y+, r18
    625c:	f5 cf       	rjmp	.-22     	; 0x6248 <get_token+0x40>
    625e:	2c 32       	cpi	r18, 0x2C	; 44
    6260:	31 f0       	breq	.+12     	; 0x626e <get_token+0x66>
    6262:	29 93       	st	Y+, r18
    6264:	01 50       	subi	r16, 0x01	; 1
    6266:	11 09       	sbc	r17, r1
    6268:	e2 cf       	rjmp	.-60     	; 0x622e <get_token+0x26>
    626a:	cf 01       	movw	r24, r30
    626c:	18 82       	st	Y, r1
    626e:	fa de       	rcall	.-524    	; 0x6064 <skipspaces>
    6270:	fc 01       	movw	r30, r24
    6272:	80 81       	ld	r24, Z
    6274:	8c 32       	cpi	r24, 0x2C	; 44
    6276:	09 f4       	brne	.+2      	; 0x627a <get_token+0x72>
    6278:	31 96       	adiw	r30, 0x01	; 1
    627a:	18 82       	st	Y, r1
    627c:	cf 01       	movw	r24, r30
    627e:	02 c0       	rjmp	.+4      	; 0x6284 <get_token+0x7c>
    6280:	80 e0       	ldi	r24, 0x00	; 0
    6282:	90 e0       	ldi	r25, 0x00	; 0
    6284:	cd b7       	in	r28, 0x3d	; 61
    6286:	de b7       	in	r29, 0x3e	; 62
    6288:	e6 e0       	ldi	r30, 0x06	; 6
    628a:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

0000628e <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    628e:	a2 e0       	ldi	r26, 0x02	; 2
    6290:	b0 e0       	ldi	r27, 0x00	; 0
    6292:	ed e4       	ldi	r30, 0x4D	; 77
    6294:	f1 e3       	ldi	r31, 0x31	; 49
    6296:	0c 94 4c e3 	jmp	0x1c698	; 0x1c698 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    629a:	00 97       	sbiw	r24, 0x00	; 0
    629c:	79 f1       	breq	.+94     	; 0x62fc <get_value+0x6e>
    629e:	fc 01       	movw	r30, r24
    62a0:	20 81       	ld	r18, Z
    62a2:	22 23       	and	r18, r18
    62a4:	59 f1       	breq	.+86     	; 0x62fc <get_value+0x6e>
        return(0);

    ptr = skipspaces(str);
    62a6:	de de       	rcall	.-580    	; 0x6064 <skipspaces>
    62a8:	8c 01       	movw	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    62aa:	6f e2       	ldi	r22, 0x2F	; 47
    62ac:	73 e0       	ldi	r23, 0x03	; 3
    62ae:	36 df       	rcall	.-404    	; 0x611c <MATCHI_LEN>
    62b0:	00 97       	sbiw	r24, 0x00	; 0
    62b2:	29 f0       	breq	.+10     	; 0x62be <get_value+0x30>
    {
        base = 16;
        ptr += ret;
    62b4:	08 0f       	add	r16, r24
    62b6:	19 1f       	adc	r17, r25
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    62b8:	40 e1       	ldi	r20, 0x10	; 16
    62ba:	50 e0       	ldi	r21, 0x00	; 0
    62bc:	18 c0       	rjmp	.+48     	; 0x62ee <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    62be:	62 e3       	ldi	r22, 0x32	; 50
    62c0:	73 e0       	ldi	r23, 0x03	; 3
    62c2:	c8 01       	movw	r24, r16
    62c4:	2b df       	rcall	.-426    	; 0x611c <MATCHI_LEN>
    62c6:	00 97       	sbiw	r24, 0x00	; 0
    62c8:	29 f0       	breq	.+10     	; 0x62d4 <get_value+0x46>
    {
        base = 8;
        ptr += ret;
    62ca:	08 0f       	add	r16, r24
    62cc:	19 1f       	adc	r17, r25
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    62ce:	48 e0       	ldi	r20, 0x08	; 8
    62d0:	50 e0       	ldi	r21, 0x00	; 0
    62d2:	0d c0       	rjmp	.+26     	; 0x62ee <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    62d4:	65 e3       	ldi	r22, 0x35	; 53
    62d6:	73 e0       	ldi	r23, 0x03	; 3
    62d8:	c8 01       	movw	r24, r16
    62da:	20 df       	rcall	.-448    	; 0x611c <MATCHI_LEN>
    62dc:	00 97       	sbiw	r24, 0x00	; 0
    62de:	29 f0       	breq	.+10     	; 0x62ea <get_value+0x5c>
    {
        base = 2;
        ptr += ret;
    62e0:	08 0f       	add	r16, r24
    62e2:	19 1f       	adc	r17, r25
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    62e4:	42 e0       	ldi	r20, 0x02	; 2
    62e6:	50 e0       	ldi	r21, 0x00	; 0
    62e8:	02 c0       	rjmp	.+4      	; 0x62ee <get_value+0x60>

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    62ea:	4a e0       	ldi	r20, 0x0A	; 10
    62ec:	50 e0       	ldi	r21, 0x00	; 0
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    62ee:	be 01       	movw	r22, r28
    62f0:	6f 5f       	subi	r22, 0xFF	; 255
    62f2:	7f 4f       	sbci	r23, 0xFF	; 255
    62f4:	c8 01       	movw	r24, r16
    62f6:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <strtol>
    62fa:	03 c0       	rjmp	.+6      	; 0x6302 <get_value+0x74>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    62fc:	60 e0       	ldi	r22, 0x00	; 0
    62fe:	70 e0       	ldi	r23, 0x00	; 0
    6300:	cb 01       	movw	r24, r22
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    6302:	22 96       	adiw	r28, 0x02	; 2
    6304:	e4 e0       	ldi	r30, 0x04	; 4
    6306:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

0000630a <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    630a:	78 94       	sei
    630c:	08 95       	ret

0000630e <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    630e:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    6310:	89 e0       	ldi	r24, 0x09	; 9
    6312:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    6316:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    631a:	8f e1       	ldi	r24, 0x1F	; 31
    631c:	9e e4       	ldi	r25, 0x4E	; 78
    631e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    6322:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    6326:	ef e6       	ldi	r30, 0x6F	; 111
    6328:	f0 e0       	ldi	r31, 0x00	; 0
    632a:	80 81       	ld	r24, Z
    632c:	82 60       	ori	r24, 0x02	; 2
    632e:	80 83       	st	Z, r24
    sei();
    6330:	78 94       	sei
    6332:	08 95       	ret

00006334 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    6334:	1f 92       	push	r1
    6336:	0f 92       	push	r0
    6338:	0f b6       	in	r0, 0x3f	; 63
    633a:	0f 92       	push	r0
    633c:	11 24       	eor	r1, r1
    633e:	0b b6       	in	r0, 0x3b	; 59
    6340:	0f 92       	push	r0
    6342:	2f 93       	push	r18
    6344:	3f 93       	push	r19
    6346:	4f 93       	push	r20
    6348:	5f 93       	push	r21
    634a:	6f 93       	push	r22
    634c:	7f 93       	push	r23
    634e:	8f 93       	push	r24
    6350:	9f 93       	push	r25
    6352:	af 93       	push	r26
    6354:	bf 93       	push	r27
    6356:	ef 93       	push	r30
    6358:	ff 93       	push	r31
    execute_timers();
    635a:	36 d2       	rcall	.+1132   	; 0x67c8 <execute_timers>
}
    635c:	ff 91       	pop	r31
    635e:	ef 91       	pop	r30
    6360:	bf 91       	pop	r27
    6362:	af 91       	pop	r26
    6364:	9f 91       	pop	r25
    6366:	8f 91       	pop	r24
    6368:	7f 91       	pop	r23
    636a:	6f 91       	pop	r22
    636c:	5f 91       	pop	r21
    636e:	4f 91       	pop	r20
    6370:	3f 91       	pop	r19
    6372:	2f 91       	pop	r18
    6374:	0f 90       	pop	r0
    6376:	0b be       	out	0x3b, r0	; 59
    6378:	0f 90       	pop	r0
    637a:	0f be       	out	0x3f, r0	; 63
    637c:	0f 90       	pop	r0
    637e:	1f 90       	pop	r1
    6380:	18 95       	reti

00006382 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    6382:	0f 93       	push	r16
    6384:	1f 93       	push	r17
    6386:	cf 93       	push	r28
    6388:	df 93       	push	r29
    638a:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    638c:	f8 94       	cli

    count1 = TCNT1;
    638e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6392:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6396:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <__clock>
    639a:	90 91 4e 1a 	lds	r25, 0x1A4E	; 0x801a4e <__clock+0x1>
    639e:	a0 91 4f 1a 	lds	r26, 0x1A4F	; 0x801a4f <__clock+0x2>
    63a2:	b0 91 50 1a 	lds	r27, 0x1A50	; 0x801a50 <__clock+0x3>
    63a6:	80 83       	st	Z, r24
    63a8:	91 83       	std	Z+1, r25	; 0x01
    63aa:	a2 83       	std	Z+2, r26	; 0x02
    63ac:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    63ae:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <__clock+0x4>
    63b2:	90 91 52 1a 	lds	r25, 0x1A52	; 0x801a52 <__clock+0x5>
    63b6:	a0 91 53 1a 	lds	r26, 0x1A53	; 0x801a53 <__clock+0x6>
    63ba:	b0 91 54 1a 	lds	r27, 0x1A54	; 0x801a54 <__clock+0x7>
    63be:	84 83       	std	Z+4, r24	; 0x04
    63c0:	95 83       	std	Z+5, r25	; 0x05
    63c2:	a6 83       	std	Z+6, r26	; 0x06
    63c4:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    63c6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    63ca:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    63ce:	b1 9b       	sbis	0x16, 1	; 22
    63d0:	03 c0       	rjmp	.+6      	; 0x63d8 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    63d2:	c0 e0       	ldi	r28, 0x00	; 0
    63d4:	d0 e0       	ldi	r29, 0x00	; 0
    63d6:	3f c0       	rjmp	.+126    	; 0x6456 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    63d8:	82 17       	cp	r24, r18
    63da:	93 07       	cpc	r25, r19
    63dc:	d0 f1       	brcs	.+116    	; 0x6452 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    63de:	c0 e0       	ldi	r28, 0x00	; 0
    63e0:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    63e2:	40 e0       	ldi	r20, 0x00	; 0
    63e4:	50 e0       	ldi	r21, 0x00	; 0
    63e6:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    63e8:	9a 01       	movw	r18, r20
    63ea:	ab 01       	movw	r20, r22
    63ec:	28 0f       	add	r18, r24
    63ee:	39 1f       	adc	r19, r25
    63f0:	41 1d       	adc	r20, r1
    63f2:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    63f4:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    63f6:	a2 e3       	ldi	r26, 0x32	; 50
    63f8:	b0 e0       	ldi	r27, 0x00	; 0
    63fa:	0e 94 1e e3 	call	0x1c63c	; 0x1c63c <__muluhisi3>
    63fe:	04 81       	ldd	r16, Z+4	; 0x04
    6400:	15 81       	ldd	r17, Z+5	; 0x05
    6402:	26 81       	ldd	r18, Z+6	; 0x06
    6404:	37 81       	ldd	r19, Z+7	; 0x07
    6406:	dc 01       	movw	r26, r24
    6408:	cb 01       	movw	r24, r22
    640a:	80 0f       	add	r24, r16
    640c:	91 1f       	adc	r25, r17
    640e:	a2 1f       	adc	r26, r18
    6410:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    6412:	81 15       	cp	r24, r1
    6414:	2a ec       	ldi	r18, 0xCA	; 202
    6416:	92 07       	cpc	r25, r18
    6418:	2a e9       	ldi	r18, 0x9A	; 154
    641a:	a2 07       	cpc	r26, r18
    641c:	2b e3       	ldi	r18, 0x3B	; 59
    641e:	b2 07       	cpc	r27, r18
    6420:	2c f4       	brge	.+10     	; 0x642c <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6422:	84 83       	std	Z+4, r24	; 0x04
    6424:	95 83       	std	Z+5, r25	; 0x05
    6426:	a6 83       	std	Z+6, r26	; 0x06
    6428:	b7 83       	std	Z+7, r27	; 0x07
    642a:	1a c0       	rjmp	.+52     	; 0x6460 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    642c:	9a 5c       	subi	r25, 0xCA	; 202
    642e:	aa 49       	sbci	r26, 0x9A	; 154
    6430:	bb 43       	sbci	r27, 0x3B	; 59
    6432:	84 83       	std	Z+4, r24	; 0x04
    6434:	95 83       	std	Z+5, r25	; 0x05
    6436:	a6 83       	std	Z+6, r26	; 0x06
    6438:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    643a:	80 81       	ld	r24, Z
    643c:	91 81       	ldd	r25, Z+1	; 0x01
    643e:	a2 81       	ldd	r26, Z+2	; 0x02
    6440:	b3 81       	ldd	r27, Z+3	; 0x03
    6442:	01 96       	adiw	r24, 0x01	; 1
    6444:	a1 1d       	adc	r26, r1
    6446:	b1 1d       	adc	r27, r1
    6448:	80 83       	st	Z, r24
    644a:	91 83       	std	Z+1, r25	; 0x01
    644c:	a2 83       	std	Z+2, r26	; 0x02
    644e:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6450:	07 c0       	rjmp	.+14     	; 0x6460 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    6452:	cf ef       	ldi	r28, 0xFF	; 255
    6454:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6456:	40 e2       	ldi	r20, 0x20	; 32
    6458:	5e e4       	ldi	r21, 0x4E	; 78
    645a:	60 e0       	ldi	r22, 0x00	; 0
    645c:	70 e0       	ldi	r23, 0x00	; 0
    645e:	c4 cf       	rjmp	.-120    	; 0x63e8 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6460:	ce 01       	movw	r24, r28
    6462:	df 91       	pop	r29
    6464:	cf 91       	pop	r28
    6466:	1f 91       	pop	r17
    6468:	0f 91       	pop	r16
    646a:	08 95       	ret

0000646c <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    646c:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <__clock+0x4>
    6470:	90 91 52 1a 	lds	r25, 0x1A52	; 0x801a52 <__clock+0x5>
    6474:	a0 91 53 1a 	lds	r26, 0x1A53	; 0x801a53 <__clock+0x6>
    6478:	b0 91 54 1a 	lds	r27, 0x1A54	; 0x801a54 <__clock+0x7>
    647c:	80 5c       	subi	r24, 0xC0	; 192
    647e:	9d 4b       	sbci	r25, 0xBD	; 189
    6480:	a0 4f       	sbci	r26, 0xF0	; 240
    6482:	bf 4f       	sbci	r27, 0xFF	; 255
    6484:	80 93 51 1a 	sts	0x1A51, r24	; 0x801a51 <__clock+0x4>
    6488:	90 93 52 1a 	sts	0x1A52, r25	; 0x801a52 <__clock+0x5>
    648c:	a0 93 53 1a 	sts	0x1A53, r26	; 0x801a53 <__clock+0x6>
    6490:	b0 93 54 1a 	sts	0x1A54, r27	; 0x801a54 <__clock+0x7>
    6494:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <__clock+0x4>
    6498:	90 91 52 1a 	lds	r25, 0x1A52	; 0x801a52 <__clock+0x5>
    649c:	a0 91 53 1a 	lds	r26, 0x1A53	; 0x801a53 <__clock+0x6>
    64a0:	b0 91 54 1a 	lds	r27, 0x1A54	; 0x801a54 <__clock+0x7>
    64a4:	81 15       	cp	r24, r1
    64a6:	9a 4c       	sbci	r25, 0xCA	; 202
    64a8:	aa 49       	sbci	r26, 0x9A	; 154
    64aa:	bb 43       	sbci	r27, 0x3B	; 59
    64ac:	dc f0       	brlt	.+54     	; 0x64e4 <clock_task+0x78>
    64ae:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <__clock>
    64b2:	90 91 4e 1a 	lds	r25, 0x1A4E	; 0x801a4e <__clock+0x1>
    64b6:	a0 91 4f 1a 	lds	r26, 0x1A4F	; 0x801a4f <__clock+0x2>
    64ba:	b0 91 50 1a 	lds	r27, 0x1A50	; 0x801a50 <__clock+0x3>
    64be:	01 96       	adiw	r24, 0x01	; 1
    64c0:	a1 1d       	adc	r26, r1
    64c2:	b1 1d       	adc	r27, r1
    64c4:	80 93 4d 1a 	sts	0x1A4D, r24	; 0x801a4d <__clock>
    64c8:	90 93 4e 1a 	sts	0x1A4E, r25	; 0x801a4e <__clock+0x1>
    64cc:	a0 93 4f 1a 	sts	0x1A4F, r26	; 0x801a4f <__clock+0x2>
    64d0:	b0 93 50 1a 	sts	0x1A50, r27	; 0x801a50 <__clock+0x3>
    64d4:	10 92 51 1a 	sts	0x1A51, r1	; 0x801a51 <__clock+0x4>
    64d8:	10 92 52 1a 	sts	0x1A52, r1	; 0x801a52 <__clock+0x5>
    64dc:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <__clock+0x6>
    64e0:	10 92 54 1a 	sts	0x1A54, r1	; 0x801a54 <__clock+0x7>
    64e4:	08 95       	ret

000064e6 <clock_settime.part.2>:
    64e6:	fc 01       	movw	r30, r24
    64e8:	84 81       	ldd	r24, Z+4	; 0x04
    64ea:	95 81       	ldd	r25, Z+5	; 0x05
    64ec:	a6 81       	ldd	r26, Z+6	; 0x06
    64ee:	b7 81       	ldd	r27, Z+7	; 0x07
    64f0:	80 93 51 1a 	sts	0x1A51, r24	; 0x801a51 <__clock+0x4>
    64f4:	90 93 52 1a 	sts	0x1A52, r25	; 0x801a52 <__clock+0x5>
    64f8:	a0 93 53 1a 	sts	0x1A53, r26	; 0x801a53 <__clock+0x6>
    64fc:	b0 93 54 1a 	sts	0x1A54, r27	; 0x801a54 <__clock+0x7>
    6500:	80 81       	ld	r24, Z
    6502:	91 81       	ldd	r25, Z+1	; 0x01
    6504:	a2 81       	ldd	r26, Z+2	; 0x02
    6506:	b3 81       	ldd	r27, Z+3	; 0x03
    6508:	80 93 4d 1a 	sts	0x1A4D, r24	; 0x801a4d <__clock>
    650c:	90 93 4e 1a 	sts	0x1A4E, r25	; 0x801a4e <__clock+0x1>
    6510:	a0 93 4f 1a 	sts	0x1A4F, r26	; 0x801a4f <__clock+0x2>
    6514:	b0 93 50 1a 	sts	0x1A50, r27	; 0x801a50 <__clock+0x3>
    6518:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <__clock+0x4>
    651c:	90 91 52 1a 	lds	r25, 0x1A52	; 0x801a52 <__clock+0x5>
    6520:	a0 91 53 1a 	lds	r26, 0x1A53	; 0x801a53 <__clock+0x6>
    6524:	b0 91 54 1a 	lds	r27, 0x1A54	; 0x801a54 <__clock+0x7>
    6528:	44 81       	ldd	r20, Z+4	; 0x04
    652a:	55 81       	ldd	r21, Z+5	; 0x05
    652c:	66 81       	ldd	r22, Z+6	; 0x06
    652e:	77 81       	ldd	r23, Z+7	; 0x07
    6530:	48 17       	cp	r20, r24
    6532:	59 07       	cpc	r21, r25
    6534:	6a 07       	cpc	r22, r26
    6536:	7b 07       	cpc	r23, r27
    6538:	b9 f6       	brne	.-82     	; 0x64e8 <clock_settime.part.2+0x2>
    653a:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <__clock>
    653e:	90 91 4e 1a 	lds	r25, 0x1A4E	; 0x801a4e <__clock+0x1>
    6542:	a0 91 4f 1a 	lds	r26, 0x1A4F	; 0x801a4f <__clock+0x2>
    6546:	b0 91 50 1a 	lds	r27, 0x1A50	; 0x801a50 <__clock+0x3>
    654a:	40 81       	ld	r20, Z
    654c:	51 81       	ldd	r21, Z+1	; 0x01
    654e:	62 81       	ldd	r22, Z+2	; 0x02
    6550:	73 81       	ldd	r23, Z+3	; 0x03
    6552:	48 17       	cp	r20, r24
    6554:	59 07       	cpc	r21, r25
    6556:	6a 07       	cpc	r22, r26
    6558:	7b 07       	cpc	r23, r27
    655a:	31 f6       	brne	.-116    	; 0x64e8 <clock_settime.part.2+0x2>
    655c:	80 e0       	ldi	r24, 0x00	; 0
    655e:	90 e0       	ldi	r25, 0x00	; 0
    6560:	08 95       	ret

00006562 <set_timers>:
    6562:	00 d0       	rcall	.+0      	; 0x6564 <set_timers+0x2>
    6564:	1f 92       	push	r1
    6566:	00 97       	sbiw	r24, 0x00	; 0
    6568:	79 f1       	breq	.+94     	; 0x65c8 <set_timers+0x66>
    656a:	e5 e5       	ldi	r30, 0x55	; 85
    656c:	fa e1       	ldi	r31, 0x1A	; 26
    656e:	4f ef       	ldi	r20, 0xFF	; 255
    6570:	5f ef       	ldi	r21, 0xFF	; 255
    6572:	20 e0       	ldi	r18, 0x00	; 0
    6574:	30 e0       	ldi	r19, 0x00	; 0
    6576:	60 81       	ld	r22, Z
    6578:	71 81       	ldd	r23, Z+1	; 0x01
    657a:	86 17       	cp	r24, r22
    657c:	97 07       	cpc	r25, r23
    657e:	79 f0       	breq	.+30     	; 0x659e <set_timers+0x3c>
    6580:	67 2b       	or	r22, r23
    6582:	71 f4       	brne	.+28     	; 0x65a0 <set_timers+0x3e>
    6584:	f9 01       	movw	r30, r18
    6586:	ee 0f       	add	r30, r30
    6588:	ff 1f       	adc	r31, r31
    658a:	e2 0f       	add	r30, r18
    658c:	f3 1f       	adc	r31, r19
    658e:	eb 5a       	subi	r30, 0xAB	; 171
    6590:	f5 4e       	sbci	r31, 0xE5	; 229
    6592:	91 83       	std	Z+1, r25	; 0x01
    6594:	80 83       	st	Z, r24
    6596:	81 e0       	ldi	r24, 0x01	; 1
    6598:	82 83       	std	Z+2, r24	; 0x02
    659a:	c9 01       	movw	r24, r18
    659c:	19 c0       	rjmp	.+50     	; 0x65d0 <set_timers+0x6e>
    659e:	a9 01       	movw	r20, r18
    65a0:	2f 5f       	subi	r18, 0xFF	; 255
    65a2:	3f 4f       	sbci	r19, 0xFF	; 255
    65a4:	33 96       	adiw	r30, 0x03	; 3
    65a6:	28 30       	cpi	r18, 0x08	; 8
    65a8:	31 05       	cpc	r19, r1
    65aa:	29 f7       	brne	.-54     	; 0x6576 <set_timers+0x14>
    65ac:	4f 3f       	cpi	r20, 0xFF	; 255
    65ae:	8f ef       	ldi	r24, 0xFF	; 255
    65b0:	58 07       	cpc	r21, r24
    65b2:	69 f4       	brne	.+26     	; 0x65ce <set_timers+0x6c>
    65b4:	8d ec       	ldi	r24, 0xCD	; 205
    65b6:	95 e0       	ldi	r25, 0x05	; 5
    65b8:	a0 e0       	ldi	r26, 0x00	; 0
    65ba:	ed b7       	in	r30, 0x3d	; 61
    65bc:	fe b7       	in	r31, 0x3e	; 62
    65be:	81 83       	std	Z+1, r24	; 0x01
    65c0:	92 83       	std	Z+2, r25	; 0x02
    65c2:	a3 83       	std	Z+3, r26	; 0x03
    65c4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    65c8:	8f ef       	ldi	r24, 0xFF	; 255
    65ca:	9f ef       	ldi	r25, 0xFF	; 255
    65cc:	01 c0       	rjmp	.+2      	; 0x65d0 <set_timers+0x6e>
    65ce:	ca 01       	movw	r24, r20
    65d0:	0f 90       	pop	r0
    65d2:	0f 90       	pop	r0
    65d4:	0f 90       	pop	r0
    65d6:	08 95       	ret

000065d8 <delete_all_timers>:
    65d8:	e5 e5       	ldi	r30, 0x55	; 85
    65da:	fa e1       	ldi	r31, 0x1A	; 26
    65dc:	12 82       	std	Z+2, r1	; 0x02
    65de:	11 82       	std	Z+1, r1	; 0x01
    65e0:	10 82       	st	Z, r1
    65e2:	33 96       	adiw	r30, 0x03	; 3
    65e4:	8a e1       	ldi	r24, 0x1A	; 26
    65e6:	ed 36       	cpi	r30, 0x6D	; 109
    65e8:	f8 07       	cpc	r31, r24
    65ea:	c1 f7       	brne	.-16     	; 0x65dc <delete_all_timers+0x4>
    65ec:	08 95       	ret

000065ee <subtract_timespec>:
    65ee:	0f 93       	push	r16
    65f0:	1f 93       	push	r17
    65f2:	cf 93       	push	r28
    65f4:	df 93       	push	r29
    65f6:	fc 01       	movw	r30, r24
    65f8:	84 81       	ldd	r24, Z+4	; 0x04
    65fa:	95 81       	ldd	r25, Z+5	; 0x05
    65fc:	a6 81       	ldd	r26, Z+6	; 0x06
    65fe:	b7 81       	ldd	r27, Z+7	; 0x07
    6600:	eb 01       	movw	r28, r22
    6602:	0c 81       	ldd	r16, Y+4	; 0x04
    6604:	1d 81       	ldd	r17, Y+5	; 0x05
    6606:	2e 81       	ldd	r18, Y+6	; 0x06
    6608:	3f 81       	ldd	r19, Y+7	; 0x07
    660a:	80 1b       	sub	r24, r16
    660c:	91 0b       	sbc	r25, r17
    660e:	a2 0b       	sbc	r26, r18
    6610:	b3 0b       	sbc	r27, r19
    6612:	b7 fd       	sbrc	r27, 7
    6614:	05 c0       	rjmp	.+10     	; 0x6620 <subtract_timespec+0x32>
    6616:	84 83       	std	Z+4, r24	; 0x04
    6618:	95 83       	std	Z+5, r25	; 0x05
    661a:	a6 83       	std	Z+6, r26	; 0x06
    661c:	b7 83       	std	Z+7, r27	; 0x07
    661e:	12 c0       	rjmp	.+36     	; 0x6644 <subtract_timespec+0x56>
    6620:	96 53       	subi	r25, 0x36	; 54
    6622:	a5 46       	sbci	r26, 0x65	; 101
    6624:	b4 4c       	sbci	r27, 0xC4	; 196
    6626:	84 83       	std	Z+4, r24	; 0x04
    6628:	95 83       	std	Z+5, r25	; 0x05
    662a:	a6 83       	std	Z+6, r26	; 0x06
    662c:	b7 83       	std	Z+7, r27	; 0x07
    662e:	80 81       	ld	r24, Z
    6630:	91 81       	ldd	r25, Z+1	; 0x01
    6632:	a2 81       	ldd	r26, Z+2	; 0x02
    6634:	b3 81       	ldd	r27, Z+3	; 0x03
    6636:	01 97       	sbiw	r24, 0x01	; 1
    6638:	a1 09       	sbc	r26, r1
    663a:	b1 09       	sbc	r27, r1
    663c:	80 83       	st	Z, r24
    663e:	91 83       	std	Z+1, r25	; 0x01
    6640:	a2 83       	std	Z+2, r26	; 0x02
    6642:	b3 83       	std	Z+3, r27	; 0x03
    6644:	80 81       	ld	r24, Z
    6646:	91 81       	ldd	r25, Z+1	; 0x01
    6648:	a2 81       	ldd	r26, Z+2	; 0x02
    664a:	b3 81       	ldd	r27, Z+3	; 0x03
    664c:	eb 01       	movw	r28, r22
    664e:	48 81       	ld	r20, Y
    6650:	59 81       	ldd	r21, Y+1	; 0x01
    6652:	6a 81       	ldd	r22, Y+2	; 0x02
    6654:	7b 81       	ldd	r23, Y+3	; 0x03
    6656:	84 1b       	sub	r24, r20
    6658:	95 0b       	sbc	r25, r21
    665a:	a6 0b       	sbc	r26, r22
    665c:	b7 0b       	sbc	r27, r23
    665e:	80 83       	st	Z, r24
    6660:	91 83       	std	Z+1, r25	; 0x01
    6662:	a2 83       	std	Z+2, r26	; 0x02
    6664:	b3 83       	std	Z+3, r27	; 0x03
    6666:	df 91       	pop	r29
    6668:	cf 91       	pop	r28
    666a:	1f 91       	pop	r17
    666c:	0f 91       	pop	r16
    666e:	08 95       	ret

00006670 <ts_to_str>:
    6670:	ad b7       	in	r26, 0x3d	; 61
    6672:	be b7       	in	r27, 0x3e	; 62
    6674:	1f 97       	sbiw	r26, 0x0f	; 15
    6676:	0f b6       	in	r0, 0x3f	; 63
    6678:	f8 94       	cli
    667a:	be bf       	out	0x3e, r27	; 62
    667c:	0f be       	out	0x3f, r0	; 63
    667e:	ad bf       	out	0x3d, r26	; 61
    6680:	fc 01       	movw	r30, r24
    6682:	44 81       	ldd	r20, Z+4	; 0x04
    6684:	55 81       	ldd	r21, Z+5	; 0x05
    6686:	66 81       	ldd	r22, Z+6	; 0x06
    6688:	77 81       	ldd	r23, Z+7	; 0x07
    668a:	ed b7       	in	r30, 0x3d	; 61
    668c:	fe b7       	in	r31, 0x3e	; 62
    668e:	44 87       	std	Z+12, r20	; 0x0c
    6690:	55 87       	std	Z+13, r21	; 0x0d
    6692:	66 87       	std	Z+14, r22	; 0x0e
    6694:	77 87       	std	Z+15, r23	; 0x0f
    6696:	fc 01       	movw	r30, r24
    6698:	80 81       	ld	r24, Z
    669a:	91 81       	ldd	r25, Z+1	; 0x01
    669c:	a2 81       	ldd	r26, Z+2	; 0x02
    669e:	b3 81       	ldd	r27, Z+3	; 0x03
    66a0:	ed b7       	in	r30, 0x3d	; 61
    66a2:	fe b7       	in	r31, 0x3e	; 62
    66a4:	80 87       	std	Z+8, r24	; 0x08
    66a6:	91 87       	std	Z+9, r25	; 0x09
    66a8:	a2 87       	std	Z+10, r26	; 0x0a
    66aa:	b3 87       	std	Z+11, r27	; 0x0b
    66ac:	83 ec       	ldi	r24, 0xC3	; 195
    66ae:	95 e0       	ldi	r25, 0x05	; 5
    66b0:	a0 e0       	ldi	r26, 0x00	; 0
    66b2:	85 83       	std	Z+5, r24	; 0x05
    66b4:	96 83       	std	Z+6, r25	; 0x06
    66b6:	a7 83       	std	Z+7, r26	; 0x07
    66b8:	8f e1       	ldi	r24, 0x1F	; 31
    66ba:	90 e0       	ldi	r25, 0x00	; 0
    66bc:	94 83       	std	Z+4, r25	; 0x04
    66be:	83 83       	std	Z+3, r24	; 0x03
    66c0:	82 e8       	ldi	r24, 0x82	; 130
    66c2:	97 e1       	ldi	r25, 0x17	; 23
    66c4:	92 83       	std	Z+2, r25	; 0x02
    66c6:	81 83       	std	Z+1, r24	; 0x01
    66c8:	0e 94 db 44 	call	0x89b6	; 0x89b6 <snprintf_P>
    66cc:	82 e8       	ldi	r24, 0x82	; 130
    66ce:	97 e1       	ldi	r25, 0x17	; 23
    66d0:	ad b7       	in	r26, 0x3d	; 61
    66d2:	be b7       	in	r27, 0x3e	; 62
    66d4:	1f 96       	adiw	r26, 0x0f	; 15
    66d6:	0f b6       	in	r0, 0x3f	; 63
    66d8:	f8 94       	cli
    66da:	be bf       	out	0x3e, r27	; 62
    66dc:	0f be       	out	0x3f, r0	; 63
    66de:	ad bf       	out	0x3d, r26	; 61
    66e0:	08 95       	ret

000066e2 <clock_elapsed_begin>:
    66e2:	6a e7       	ldi	r22, 0x7A	; 122
    66e4:	77 e1       	ldi	r23, 0x17	; 23
    66e6:	80 e0       	ldi	r24, 0x00	; 0
    66e8:	90 e0       	ldi	r25, 0x00	; 0
    66ea:	4b ce       	rjmp	.-874    	; 0x6382 <clock_gettime>
    66ec:	08 95       	ret

000066ee <clock_elapsed_end>:
    66ee:	af e0       	ldi	r26, 0x0F	; 15
    66f0:	b0 e0       	ldi	r27, 0x00	; 0
    66f2:	ed e7       	ldi	r30, 0x7D	; 125
    66f4:	f3 e3       	ldi	r31, 0x33	; 51
    66f6:	0c 94 4c e3 	jmp	0x1c698	; 0x1c698 <__prologue_saves__+0x1c>
    66fa:	8c 01       	movw	r16, r24
    66fc:	be 01       	movw	r22, r28
    66fe:	68 5f       	subi	r22, 0xF8	; 248
    6700:	7f 4f       	sbci	r23, 0xFF	; 255
    6702:	80 e0       	ldi	r24, 0x00	; 0
    6704:	90 e0       	ldi	r25, 0x00	; 0
    6706:	3d de       	rcall	.-902    	; 0x6382 <clock_gettime>
    6708:	6a e7       	ldi	r22, 0x7A	; 122
    670a:	77 e1       	ldi	r23, 0x17	; 23
    670c:	ce 01       	movw	r24, r28
    670e:	08 96       	adiw	r24, 0x08	; 8
    6710:	6e df       	rcall	.-292    	; 0x65ee <subtract_timespec>
    6712:	01 15       	cp	r16, r1
    6714:	11 05       	cpc	r17, r1
    6716:	b1 f0       	breq	.+44     	; 0x6744 <clock_elapsed_end+0x56>
    6718:	f8 01       	movw	r30, r16
    671a:	80 81       	ld	r24, Z
    671c:	88 23       	and	r24, r24
    671e:	91 f0       	breq	.+36     	; 0x6744 <clock_elapsed_end+0x56>
    6720:	ce 01       	movw	r24, r28
    6722:	08 96       	adiw	r24, 0x08	; 8
    6724:	a5 df       	rcall	.-182    	; 0x6670 <ts_to_str>
    6726:	ed b7       	in	r30, 0x3d	; 61
    6728:	fe b7       	in	r31, 0x3e	; 62
    672a:	97 83       	std	Z+7, r25	; 0x07
    672c:	86 83       	std	Z+6, r24	; 0x06
    672e:	15 83       	std	Z+5, r17	; 0x05
    6730:	04 83       	std	Z+4, r16	; 0x04
    6732:	85 eb       	ldi	r24, 0xB5	; 181
    6734:	95 e0       	ldi	r25, 0x05	; 5
    6736:	a0 e0       	ldi	r26, 0x00	; 0
    6738:	81 83       	std	Z+1, r24	; 0x01
    673a:	92 83       	std	Z+2, r25	; 0x02
    673c:	a3 83       	std	Z+3, r26	; 0x03
    673e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    6742:	0f c0       	rjmp	.+30     	; 0x6762 <clock_elapsed_end+0x74>
    6744:	ce 01       	movw	r24, r28
    6746:	08 96       	adiw	r24, 0x08	; 8
    6748:	93 df       	rcall	.-218    	; 0x6670 <ts_to_str>
    674a:	ed b7       	in	r30, 0x3d	; 61
    674c:	fe b7       	in	r31, 0x3e	; 62
    674e:	95 83       	std	Z+5, r25	; 0x05
    6750:	84 83       	std	Z+4, r24	; 0x04
    6752:	8a ea       	ldi	r24, 0xAA	; 170
    6754:	95 e0       	ldi	r25, 0x05	; 5
    6756:	a0 e0       	ldi	r26, 0x00	; 0
    6758:	81 83       	std	Z+1, r24	; 0x01
    675a:	92 83       	std	Z+2, r25	; 0x02
    675c:	a3 83       	std	Z+3, r26	; 0x03
    675e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    6762:	2f 96       	adiw	r28, 0x0f	; 15
    6764:	e4 e0       	ldi	r30, 0x04	; 4
    6766:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

0000676a <clock_clear>:
    676a:	a8 e0       	ldi	r26, 0x08	; 8
    676c:	b0 e0       	ldi	r27, 0x00	; 0
    676e:	eb eb       	ldi	r30, 0xBB	; 187
    6770:	f3 e3       	ldi	r31, 0x33	; 51
    6772:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
    6776:	1d 82       	std	Y+5, r1	; 0x05
    6778:	1e 82       	std	Y+6, r1	; 0x06
    677a:	1f 82       	std	Y+7, r1	; 0x07
    677c:	18 86       	std	Y+8, r1	; 0x08
    677e:	19 82       	std	Y+1, r1	; 0x01
    6780:	1a 82       	std	Y+2, r1	; 0x02
    6782:	1b 82       	std	Y+3, r1	; 0x03
    6784:	1c 82       	std	Y+4, r1	; 0x04
    6786:	ce 01       	movw	r24, r28
    6788:	01 96       	adiw	r24, 0x01	; 1
    678a:	ad de       	rcall	.-678    	; 0x64e6 <clock_settime.part.2>
    678c:	ed e6       	ldi	r30, 0x6D	; 109
    678e:	fa e1       	ldi	r31, 0x1A	; 26
    6790:	11 82       	std	Z+1, r1	; 0x01
    6792:	10 82       	st	Z, r1
    6794:	13 82       	std	Z+3, r1	; 0x03
    6796:	12 82       	std	Z+2, r1	; 0x02
    6798:	28 96       	adiw	r28, 0x08	; 8
    679a:	e2 e0       	ldi	r30, 0x02	; 2
    679c:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

000067a0 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    67a0:	80 91 a2 17 	lds	r24, 0x17A2	; 0x8017a2 <timers_configured>
    67a4:	90 91 a3 17 	lds	r25, 0x17A3	; 0x8017a3 <timers_configured+0x1>
    67a8:	89 2b       	or	r24, r25
    67aa:	69 f0       	breq	.+26     	; 0x67c6 <enable_timers+0x26>
    67ac:	80 91 a4 17 	lds	r24, 0x17A4	; 0x8017a4 <timers_enabled>
    67b0:	90 91 a5 17 	lds	r25, 0x17A5	; 0x8017a5 <timers_enabled+0x1>
    67b4:	89 2b       	or	r24, r25
    67b6:	39 f4       	brne	.+14     	; 0x67c6 <enable_timers+0x26>
    {
        enable_system_task();
    67b8:	a8 dd       	rcall	.-1200   	; 0x630a <enable_system_task>
        timers_enabled = 1;
    67ba:	81 e0       	ldi	r24, 0x01	; 1
    67bc:	90 e0       	ldi	r25, 0x00	; 0
    67be:	90 93 a5 17 	sts	0x17A5, r25	; 0x8017a5 <timers_enabled+0x1>
    67c2:	80 93 a4 17 	sts	0x17A4, r24	; 0x8017a4 <timers_enabled>
    67c6:	08 95       	ret

000067c8 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    67c8:	cf 93       	push	r28
    67ca:	df 93       	push	r29
    67cc:	c5 e5       	ldi	r28, 0x55	; 85
    67ce:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    67d0:	8a 81       	ldd	r24, Y+2	; 0x02
    67d2:	88 23       	and	r24, r24
    67d4:	29 f0       	breq	.+10     	; 0x67e0 <execute_timers+0x18>
    67d6:	e8 81       	ld	r30, Y
    67d8:	f9 81       	ldd	r31, Y+1	; 0x01
    67da:	30 97       	sbiw	r30, 0x00	; 0
    67dc:	09 f0       	breq	.+2      	; 0x67e0 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    67de:	09 95       	icall
    67e0:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    67e2:	8a e1       	ldi	r24, 0x1A	; 26
    67e4:	cd 36       	cpi	r28, 0x6D	; 109
    67e6:	d8 07       	cpc	r29, r24
    67e8:	99 f7       	brne	.-26     	; 0x67d0 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    67ea:	df 91       	pop	r29
    67ec:	cf 91       	pop	r28
    67ee:	08 95       	ret

000067f0 <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    67f0:	00 d0       	rcall	.+0      	; 0x67f2 <init_timers+0x2>
    67f2:	1f 92       	push	r1
    printf("Timers init called\n");
    67f4:	86 e9       	ldi	r24, 0x96	; 150
    67f6:	95 e0       	ldi	r25, 0x05	; 5
    67f8:	a0 e0       	ldi	r26, 0x00	; 0
    67fa:	ed b7       	in	r30, 0x3d	; 61
    67fc:	fe b7       	in	r31, 0x3e	; 62
    67fe:	81 83       	std	Z+1, r24	; 0x01
    6800:	92 83       	std	Z+2, r25	; 0x02
    6802:	a3 83       	std	Z+3, r26	; 0x03
    6804:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

    if(!timers_configured)
    6808:	80 91 a2 17 	lds	r24, 0x17A2	; 0x8017a2 <timers_configured>
    680c:	90 91 a3 17 	lds	r25, 0x17A3	; 0x8017a3 <timers_configured+0x1>
    6810:	89 2b       	or	r24, r25
    6812:	a9 f4       	brne	.+42     	; 0x683e <init_timers+0x4e>
    {
        install_timers_isr();
    6814:	7c dd       	rcall	.-1288   	; 0x630e <install_timers_isr>
        timers_configured = 1;
    6816:	81 e0       	ldi	r24, 0x01	; 1
    6818:	90 e0       	ldi	r25, 0x00	; 0
    681a:	90 93 a3 17 	sts	0x17A3, r25	; 0x8017a3 <timers_configured+0x1>
    681e:	80 93 a2 17 	sts	0x17A2, r24	; 0x8017a2 <timers_configured>
        timers_enabled = 0;
    6822:	10 92 a5 17 	sts	0x17A5, r1	; 0x8017a5 <timers_enabled+0x1>
    6826:	10 92 a4 17 	sts	0x17A4, r1	; 0x8017a4 <timers_enabled>
        printf("Timers configured\n");
    682a:	83 e8       	ldi	r24, 0x83	; 131
    682c:	95 e0       	ldi	r25, 0x05	; 5
    682e:	a0 e0       	ldi	r26, 0x00	; 0
    6830:	ed b7       	in	r30, 0x3d	; 61
    6832:	fe b7       	in	r31, 0x3e	; 62
    6834:	81 83       	std	Z+1, r24	; 0x01
    6836:	92 83       	std	Z+2, r25	; 0x02
    6838:	a3 83       	std	Z+3, r26	; 0x03
    683a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    }

    delete_all_timers();

    clock_clear();
    683e:	cc de       	rcall	.-616    	; 0x65d8 <delete_all_timers>
    6840:	94 df       	rcall	.-216    	; 0x676a <clock_clear>
    printf("Clock Init\n");
    6842:	87 e7       	ldi	r24, 0x77	; 119
    6844:	95 e0       	ldi	r25, 0x05	; 5
    6846:	a0 e0       	ldi	r26, 0x00	; 0
    6848:	ed b7       	in	r30, 0x3d	; 61
    684a:	fe b7       	in	r31, 0x3e	; 62
    684c:	81 83       	std	Z+1, r24	; 0x01
    684e:	92 83       	std	Z+2, r25	; 0x02
    6850:	a3 83       	std	Z+3, r26	; 0x03
    6852:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6856:	61 e0       	ldi	r22, 0x01	; 1
    6858:	70 e0       	ldi	r23, 0x00	; 0
    685a:	86 e3       	ldi	r24, 0x36	; 54
    685c:	92 e3       	ldi	r25, 0x32	; 50
    685e:	81 de       	rcall	.-766    	; 0x6562 <set_timers>
    6860:	01 96       	adiw	r24, 0x01	; 1
    6862:	51 f4       	brne	.+20     	; 0x6878 <init_timers+0x88>
        printf("Clock task init failed\n");
    6864:	8f e5       	ldi	r24, 0x5F	; 95
    6866:	95 e0       	ldi	r25, 0x05	; 5
    6868:	a0 e0       	ldi	r26, 0x00	; 0
    686a:	ed b7       	in	r30, 0x3d	; 61
    686c:	fe b7       	in	r31, 0x3e	; 62
    686e:	81 83       	std	Z+1, r24	; 0x01
    6870:	92 83       	std	Z+2, r25	; 0x02
    6872:	a3 83       	std	Z+3, r26	; 0x03
    6874:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("Clock Installed\n");
    6878:	8e e4       	ldi	r24, 0x4E	; 78
    687a:	95 e0       	ldi	r25, 0x05	; 5
    687c:	a0 e0       	ldi	r26, 0x00	; 0
    687e:	ed b7       	in	r30, 0x3d	; 61
    6880:	fe b7       	in	r31, 0x3e	; 62
    6882:	81 83       	std	Z+1, r24	; 0x01
    6884:	92 83       	std	Z+2, r25	; 0x02
    6886:	a3 83       	std	Z+3, r26	; 0x03
    6888:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

    enable_timers();
    688c:	89 df       	rcall	.-238    	; 0x67a0 <enable_timers>

    printf("Timers enabled\n");
    688e:	8e e3       	ldi	r24, 0x3E	; 62
    6890:	95 e0       	ldi	r25, 0x05	; 5
    6892:	a0 e0       	ldi	r26, 0x00	; 0
    6894:	ed b7       	in	r30, 0x3d	; 61
    6896:	fe b7       	in	r31, 0x3e	; 62
    6898:	81 83       	std	Z+1, r24	; 0x01
    689a:	92 83       	std	Z+2, r25	; 0x02
    689c:	a3 83       	std	Z+3, r26	; 0x03
    689e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
}
    68a2:	0f 90       	pop	r0
    68a4:	0f 90       	pop	r0
    68a6:	0f 90       	pop	r0
    68a8:	08 95       	ret

000068aa <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    68aa:	89 2b       	or	r24, r25
    68ac:	81 f4       	brne	.+32     	; 0x68ce <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    68ae:	fb 01       	movw	r30, r22
    68b0:	10 82       	st	Z, r1
    68b2:	11 82       	std	Z+1, r1	; 0x01
    68b4:	12 82       	std	Z+2, r1	; 0x02
    68b6:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    68b8:	80 e4       	ldi	r24, 0x40	; 64
    68ba:	92 e4       	ldi	r25, 0x42	; 66
    68bc:	af e0       	ldi	r26, 0x0F	; 15
    68be:	b0 e0       	ldi	r27, 0x00	; 0
    68c0:	84 83       	std	Z+4, r24	; 0x04
    68c2:	95 83       	std	Z+5, r25	; 0x05
    68c4:	a6 83       	std	Z+6, r26	; 0x06
    68c6:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    68c8:	80 e0       	ldi	r24, 0x00	; 0
    68ca:	90 e0       	ldi	r25, 0x00	; 0
    68cc:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    68ce:	8f ef       	ldi	r24, 0xFF	; 255
    68d0:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    68d2:	08 95       	ret

000068d4 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    68d4:	89 2b       	or	r24, r25
    68d6:	19 f4       	brne	.+6      	; 0x68de <clock_settime+0xa>
    68d8:	cb 01       	movw	r24, r22
    68da:	05 ce       	rjmp	.-1014   	; 0x64e6 <clock_settime.part.2>
    68dc:	08 95       	ret
        return(-1);
    68de:	8f ef       	ldi	r24, 0xFF	; 255
    68e0:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    68e2:	08 95       	ret

000068e4 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    68e4:	9c 01       	movw	r18, r24
    68e6:	83 70       	andi	r24, 0x03	; 3
    68e8:	99 27       	eor	r25, r25
    68ea:	00 97       	sbiw	r24, 0x00	; 0
    68ec:	69 f4       	brne	.+26     	; 0x6908 <IS_Leap+0x24>
    68ee:	2c 36       	cpi	r18, 0x6C	; 108
    68f0:	47 e0       	ldi	r20, 0x07	; 7
    68f2:	34 07       	cpc	r19, r20
    68f4:	59 f0       	breq	.+22     	; 0x690c <IS_Leap+0x28>
    68f6:	51 e0       	ldi	r21, 0x01	; 1
    68f8:	40 e0       	ldi	r20, 0x00	; 0
    68fa:	24 33       	cpi	r18, 0x34	; 52
    68fc:	38 40       	sbci	r19, 0x08	; 8
    68fe:	09 f4       	brne	.+2      	; 0x6902 <IS_Leap+0x1e>
    6900:	50 e0       	ldi	r21, 0x00	; 0
    6902:	85 2f       	mov	r24, r21
    6904:	94 2f       	mov	r25, r20
    6906:	08 95       	ret
    6908:	80 e0       	ldi	r24, 0x00	; 0
    690a:	90 e0       	ldi	r25, 0x00	; 0
    690c:	08 95       	ret

0000690e <tm_mon_to_ascii>:
    690e:	8c 30       	cpi	r24, 0x0C	; 12
    6910:	91 05       	cpc	r25, r1
    6912:	40 f4       	brcc	.+16     	; 0x6924 <tm_mon_to_ascii+0x16>
    6914:	88 0f       	add	r24, r24
    6916:	99 1f       	adc	r25, r25
    6918:	fc 01       	movw	r30, r24
    691a:	e5 5f       	subi	r30, 0xF5	; 245
    691c:	fe 4f       	sbci	r31, 0xFE	; 254
    691e:	80 81       	ld	r24, Z
    6920:	91 81       	ldd	r25, Z+1	; 0x01
    6922:	08 95       	ret
    6924:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    6928:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    692c:	08 95       	ret

0000692e <Days_Per_Month>:
    692e:	cf 93       	push	r28
    6930:	df 93       	push	r29
    6932:	8c 30       	cpi	r24, 0x0C	; 12
    6934:	91 05       	cpc	r25, r1
    6936:	24 f0       	brlt	.+8      	; 0x6940 <Days_Per_Month+0x12>
    6938:	6f 5f       	subi	r22, 0xFF	; 255
    693a:	7f 4f       	sbci	r23, 0xFF	; 255
    693c:	0c 97       	sbiw	r24, 0x0c	; 12
    693e:	f9 cf       	rjmp	.-14     	; 0x6932 <Days_Per_Month+0x4>
    6940:	97 ff       	sbrs	r25, 7
    6942:	04 c0       	rjmp	.+8      	; 0x694c <Days_Per_Month+0x1e>
    6944:	61 50       	subi	r22, 0x01	; 1
    6946:	71 09       	sbc	r23, r1
    6948:	0c 96       	adiw	r24, 0x0c	; 12
    694a:	fa cf       	rjmp	.-12     	; 0x6940 <Days_Per_Month+0x12>
    694c:	fc 01       	movw	r30, r24
    694e:	ee 0f       	add	r30, r30
    6950:	ff 1f       	adc	r31, r31
    6952:	e8 57       	subi	r30, 0x78	; 120
    6954:	fc 4f       	sbci	r31, 0xFC	; 252
    6956:	c0 81       	ld	r28, Z
    6958:	d1 81       	ldd	r29, Z+1	; 0x01
    695a:	01 97       	sbiw	r24, 0x01	; 1
    695c:	29 f4       	brne	.+10     	; 0x6968 <Days_Per_Month+0x3a>
    695e:	cb 01       	movw	r24, r22
    6960:	c1 df       	rcall	.-126    	; 0x68e4 <IS_Leap>
    6962:	89 2b       	or	r24, r25
    6964:	09 f0       	breq	.+2      	; 0x6968 <Days_Per_Month+0x3a>
    6966:	21 96       	adiw	r28, 0x01	; 1
    6968:	ce 01       	movw	r24, r28
    696a:	df 91       	pop	r29
    696c:	cf 91       	pop	r28
    696e:	08 95       	ret

00006970 <time_to_tm>:
    6970:	a0 e0       	ldi	r26, 0x00	; 0
    6972:	b0 e0       	ldi	r27, 0x00	; 0
    6974:	ee eb       	ldi	r30, 0xBE	; 190
    6976:	f4 e3       	ldi	r31, 0x34	; 52
    6978:	0c 94 40 e3 	jmp	0x1c680	; 0x1c680 <__prologue_saves__+0x4>
    697c:	e8 01       	movw	r28, r16
    697e:	e6 e1       	ldi	r30, 0x16	; 22
    6980:	d8 01       	movw	r26, r16
    6982:	1d 92       	st	X+, r1
    6984:	ea 95       	dec	r30
    6986:	e9 f7       	brne	.-6      	; 0x6982 <time_to_tm+0x12>
    6988:	61 15       	cp	r22, r1
    698a:	bd e5       	ldi	r27, 0x5D	; 93
    698c:	7b 07       	cpc	r23, r27
    698e:	bd ef       	ldi	r27, 0xFD	; 253
    6990:	8b 07       	cpc	r24, r27
    6992:	bf ef       	ldi	r27, 0xFF	; 255
    6994:	9b 07       	cpc	r25, r27
    6996:	08 f0       	brcs	.+2      	; 0x699a <time_to_tm+0x2a>
    6998:	c0 c0       	rjmp	.+384    	; 0x6b1a <time_to_tm+0x1aa>
    699a:	6b 01       	movw	r12, r22
    699c:	7c 01       	movw	r14, r24
    699e:	c2 1a       	sub	r12, r18
    69a0:	d3 0a       	sbc	r13, r19
    69a2:	e4 0a       	sbc	r14, r20
    69a4:	f5 0a       	sbc	r15, r21
    69a6:	46 01       	movw	r8, r12
    69a8:	57 01       	movw	r10, r14
    69aa:	e0 e8       	ldi	r30, 0x80	; 128
    69ac:	ce 16       	cp	r12, r30
    69ae:	ee ea       	ldi	r30, 0xAE	; 174
    69b0:	de 06       	cpc	r13, r30
    69b2:	ee ef       	ldi	r30, 0xFE	; 254
    69b4:	ee 06       	cpc	r14, r30
    69b6:	ef ef       	ldi	r30, 0xFF	; 255
    69b8:	fe 06       	cpc	r15, r30
    69ba:	50 f0       	brcs	.+20     	; 0x69d0 <time_to_tm+0x60>
    69bc:	80 e8       	ldi	r24, 0x80	; 128
    69be:	88 0e       	add	r8, r24
    69c0:	81 e5       	ldi	r24, 0x51	; 81
    69c2:	98 1e       	adc	r9, r24
    69c4:	81 e0       	ldi	r24, 0x01	; 1
    69c6:	a8 1e       	adc	r10, r24
    69c8:	b1 1c       	adc	r11, r1
    69ca:	01 e0       	ldi	r16, 0x01	; 1
    69cc:	10 e0       	ldi	r17, 0x00	; 0
    69ce:	02 c0       	rjmp	.+4      	; 0x69d4 <time_to_tm+0x64>
    69d0:	00 e0       	ldi	r16, 0x00	; 0
    69d2:	10 e0       	ldi	r17, 0x00	; 0
    69d4:	8c e3       	ldi	r24, 0x3C	; 60
    69d6:	48 2e       	mov	r4, r24
    69d8:	51 2c       	mov	r5, r1
    69da:	61 2c       	mov	r6, r1
    69dc:	71 2c       	mov	r7, r1
    69de:	c5 01       	movw	r24, r10
    69e0:	b4 01       	movw	r22, r8
    69e2:	a3 01       	movw	r20, r6
    69e4:	92 01       	movw	r18, r4
    69e6:	0e 94 d1 e2 	call	0x1c5a2	; 0x1c5a2 <__udivmodsi4>
    69ea:	79 83       	std	Y+1, r23	; 0x01
    69ec:	68 83       	st	Y, r22
    69ee:	ca 01       	movw	r24, r20
    69f0:	b9 01       	movw	r22, r18
    69f2:	a3 01       	movw	r20, r6
    69f4:	92 01       	movw	r18, r4
    69f6:	0e 94 d1 e2 	call	0x1c5a2	; 0x1c5a2 <__udivmodsi4>
    69fa:	7b 83       	std	Y+3, r23	; 0x03
    69fc:	6a 83       	std	Y+2, r22	; 0x02
    69fe:	c5 01       	movw	r24, r10
    6a00:	b4 01       	movw	r22, r8
    6a02:	20 e1       	ldi	r18, 0x10	; 16
    6a04:	3e e0       	ldi	r19, 0x0E	; 14
    6a06:	40 e0       	ldi	r20, 0x00	; 0
    6a08:	50 e0       	ldi	r21, 0x00	; 0
    6a0a:	0e 94 d1 e2 	call	0x1c5a2	; 0x1c5a2 <__udivmodsi4>
    6a0e:	ca 01       	movw	r24, r20
    6a10:	b9 01       	movw	r22, r18
    6a12:	28 e1       	ldi	r18, 0x18	; 24
    6a14:	30 e0       	ldi	r19, 0x00	; 0
    6a16:	40 e0       	ldi	r20, 0x00	; 0
    6a18:	50 e0       	ldi	r21, 0x00	; 0
    6a1a:	0e 94 d1 e2 	call	0x1c5a2	; 0x1c5a2 <__udivmodsi4>
    6a1e:	7d 83       	std	Y+5, r23	; 0x05
    6a20:	6c 83       	std	Y+4, r22	; 0x04
    6a22:	01 15       	cp	r16, r1
    6a24:	11 05       	cpc	r17, r1
    6a26:	89 f0       	breq	.+34     	; 0x6a4a <time_to_tm+0xda>
    6a28:	85 e4       	ldi	r24, 0x45	; 69
    6a2a:	90 e0       	ldi	r25, 0x00	; 0
    6a2c:	9b 87       	std	Y+11, r25	; 0x0b
    6a2e:	8a 87       	std	Y+10, r24	; 0x0a
    6a30:	8b e0       	ldi	r24, 0x0B	; 11
    6a32:	90 e0       	ldi	r25, 0x00	; 0
    6a34:	99 87       	std	Y+9, r25	; 0x09
    6a36:	88 87       	std	Y+8, r24	; 0x08
    6a38:	8f e1       	ldi	r24, 0x1F	; 31
    6a3a:	90 e0       	ldi	r25, 0x00	; 0
    6a3c:	9f 83       	std	Y+7, r25	; 0x07
    6a3e:	8e 83       	std	Y+6, r24	; 0x06
    6a40:	83 e0       	ldi	r24, 0x03	; 3
    6a42:	90 e0       	ldi	r25, 0x00	; 0
    6a44:	9d 87       	std	Y+13, r25	; 0x0d
    6a46:	8c 87       	std	Y+12, r24	; 0x0c
    6a48:	65 c0       	rjmp	.+202    	; 0x6b14 <time_to_tm+0x1a4>
    6a4a:	c5 01       	movw	r24, r10
    6a4c:	b4 01       	movw	r22, r8
    6a4e:	20 e8       	ldi	r18, 0x80	; 128
    6a50:	31 e5       	ldi	r19, 0x51	; 81
    6a52:	41 e0       	ldi	r20, 0x01	; 1
    6a54:	50 e0       	ldi	r21, 0x00	; 0
    6a56:	0e 94 d1 e2 	call	0x1c5a2	; 0x1c5a2 <__udivmodsi4>
    6a5a:	49 01       	movw	r8, r18
    6a5c:	5a 01       	movw	r10, r20
    6a5e:	ca 01       	movw	r24, r20
    6a60:	b9 01       	movw	r22, r18
    6a62:	6c 5f       	subi	r22, 0xFC	; 252
    6a64:	7f 4f       	sbci	r23, 0xFF	; 255
    6a66:	8f 4f       	sbci	r24, 0xFF	; 255
    6a68:	9f 4f       	sbci	r25, 0xFF	; 255
    6a6a:	27 e0       	ldi	r18, 0x07	; 7
    6a6c:	30 e0       	ldi	r19, 0x00	; 0
    6a6e:	40 e0       	ldi	r20, 0x00	; 0
    6a70:	50 e0       	ldi	r21, 0x00	; 0
    6a72:	0e 94 f3 e2 	call	0x1c5e6	; 0x1c5e6 <__divmodsi4>
    6a76:	7d 87       	std	Y+13, r23	; 0x0d
    6a78:	6c 87       	std	Y+12, r22	; 0x0c
    6a7a:	02 eb       	ldi	r16, 0xB2	; 178
    6a7c:	17 e0       	ldi	r17, 0x07	; 7
    6a7e:	c8 01       	movw	r24, r16
    6a80:	31 df       	rcall	.-414    	; 0x68e4 <IS_Leap>
    6a82:	00 97       	sbiw	r24, 0x00	; 0
    6a84:	19 f4       	brne	.+6      	; 0x6a8c <time_to_tm+0x11c>
    6a86:	4d e6       	ldi	r20, 0x6D	; 109
    6a88:	51 e0       	ldi	r21, 0x01	; 1
    6a8a:	02 c0       	rjmp	.+4      	; 0x6a90 <time_to_tm+0x120>
    6a8c:	4e e6       	ldi	r20, 0x6E	; 110
    6a8e:	51 e0       	ldi	r21, 0x01	; 1
    6a90:	05 2e       	mov	r0, r21
    6a92:	00 0c       	add	r0, r0
    6a94:	66 0b       	sbc	r22, r22
    6a96:	77 0b       	sbc	r23, r23
    6a98:	84 16       	cp	r8, r20
    6a9a:	95 06       	cpc	r9, r21
    6a9c:	a6 06       	cpc	r10, r22
    6a9e:	b7 06       	cpc	r11, r23
    6aa0:	3c f0       	brlt	.+14     	; 0x6ab0 <time_to_tm+0x140>
    6aa2:	0f 5f       	subi	r16, 0xFF	; 255
    6aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    6aa6:	84 1a       	sub	r8, r20
    6aa8:	95 0a       	sbc	r9, r21
    6aaa:	a6 0a       	sbc	r10, r22
    6aac:	b7 0a       	sbc	r11, r23
    6aae:	e7 cf       	rjmp	.-50     	; 0x6a7e <time_to_tm+0x10e>
    6ab0:	0c 56       	subi	r16, 0x6C	; 108
    6ab2:	17 40       	sbci	r17, 0x07	; 7
    6ab4:	1b 87       	std	Y+11, r17	; 0x0b
    6ab6:	0a 87       	std	Y+10, r16	; 0x0a
    6ab8:	9f 86       	std	Y+15, r9	; 0x0f
    6aba:	8e 86       	std	Y+14, r8	; 0x0e
    6abc:	e8 e8       	ldi	r30, 0x88	; 136
    6abe:	f3 e0       	ldi	r31, 0x03	; 3
    6ac0:	20 e0       	ldi	r18, 0x00	; 0
    6ac2:	30 e0       	ldi	r19, 0x00	; 0
    6ac4:	18 14       	cp	r1, r8
    6ac6:	19 04       	cpc	r1, r9
    6ac8:	1a 04       	cpc	r1, r10
    6aca:	1b 04       	cpc	r1, r11
    6acc:	e4 f4       	brge	.+56     	; 0x6b06 <time_to_tm+0x196>
    6ace:	2c 30       	cpi	r18, 0x0C	; 12
    6ad0:	31 05       	cpc	r19, r1
    6ad2:	c9 f0       	breq	.+50     	; 0x6b06 <time_to_tm+0x196>
    6ad4:	41 91       	ld	r20, Z+
    6ad6:	51 91       	ld	r21, Z+
    6ad8:	21 30       	cpi	r18, 0x01	; 1
    6ada:	31 05       	cpc	r19, r1
    6adc:	21 f4       	brne	.+8      	; 0x6ae6 <time_to_tm+0x176>
    6ade:	00 97       	sbiw	r24, 0x00	; 0
    6ae0:	11 f0       	breq	.+4      	; 0x6ae6 <time_to_tm+0x176>
    6ae2:	4f 5f       	subi	r20, 0xFF	; 255
    6ae4:	5f 4f       	sbci	r21, 0xFF	; 255
    6ae6:	05 2e       	mov	r0, r21
    6ae8:	00 0c       	add	r0, r0
    6aea:	66 0b       	sbc	r22, r22
    6aec:	77 0b       	sbc	r23, r23
    6aee:	84 16       	cp	r8, r20
    6af0:	95 06       	cpc	r9, r21
    6af2:	a6 06       	cpc	r10, r22
    6af4:	b7 06       	cpc	r11, r23
    6af6:	3c f0       	brlt	.+14     	; 0x6b06 <time_to_tm+0x196>
    6af8:	84 1a       	sub	r8, r20
    6afa:	95 0a       	sbc	r9, r21
    6afc:	a6 0a       	sbc	r10, r22
    6afe:	b7 0a       	sbc	r11, r23
    6b00:	2f 5f       	subi	r18, 0xFF	; 255
    6b02:	3f 4f       	sbci	r19, 0xFF	; 255
    6b04:	df cf       	rjmp	.-66     	; 0x6ac4 <time_to_tm+0x154>
    6b06:	39 87       	std	Y+9, r19	; 0x09
    6b08:	28 87       	std	Y+8, r18	; 0x08
    6b0a:	af ef       	ldi	r26, 0xFF	; 255
    6b0c:	8a 1a       	sub	r8, r26
    6b0e:	9a 0a       	sbc	r9, r26
    6b10:	9f 82       	std	Y+7, r9	; 0x07
    6b12:	8e 82       	std	Y+6, r8	; 0x06
    6b14:	b6 01       	movw	r22, r12
    6b16:	c7 01       	movw	r24, r14
    6b18:	04 c0       	rjmp	.+8      	; 0x6b22 <time_to_tm+0x1b2>
    6b1a:	6f ef       	ldi	r22, 0xFF	; 255
    6b1c:	7f ef       	ldi	r23, 0xFF	; 255
    6b1e:	8f ef       	ldi	r24, 0xFF	; 255
    6b20:	9f ef       	ldi	r25, 0xFF	; 255
    6b22:	cd b7       	in	r28, 0x3d	; 61
    6b24:	de b7       	in	r29, 0x3e	; 62
    6b26:	e0 e1       	ldi	r30, 0x10	; 16
    6b28:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__epilogue_restores__+0x4>

00006b2c <gmtime_r>:
    6b2c:	0f 93       	push	r16
    6b2e:	1f 93       	push	r17
    6b30:	cf 93       	push	r28
    6b32:	df 93       	push	r29
    6b34:	eb 01       	movw	r28, r22
    6b36:	fc 01       	movw	r30, r24
    6b38:	60 81       	ld	r22, Z
    6b3a:	71 81       	ldd	r23, Z+1	; 0x01
    6b3c:	82 81       	ldd	r24, Z+2	; 0x02
    6b3e:	93 81       	ldd	r25, Z+3	; 0x03
    6b40:	8e 01       	movw	r16, r28
    6b42:	20 e0       	ldi	r18, 0x00	; 0
    6b44:	30 e0       	ldi	r19, 0x00	; 0
    6b46:	a9 01       	movw	r20, r18
    6b48:	13 df       	rcall	.-474    	; 0x6970 <time_to_tm>
    6b4a:	ce 01       	movw	r24, r28
    6b4c:	df 91       	pop	r29
    6b4e:	cf 91       	pop	r28
    6b50:	1f 91       	pop	r17
    6b52:	0f 91       	pop	r16
    6b54:	08 95       	ret

00006b56 <gmtime>:
    6b56:	24 ec       	ldi	r18, 0xC4	; 196
    6b58:	37 e1       	ldi	r19, 0x17	; 23
    6b5a:	30 93 db 17 	sts	0x17DB, r19	; 0x8017db <p.3677+0x1>
    6b5e:	20 93 da 17 	sts	0x17DA, r18	; 0x8017da <p.3677>
    6b62:	b9 01       	movw	r22, r18
    6b64:	e3 df       	rcall	.-58     	; 0x6b2c <gmtime_r>
    6b66:	84 ec       	ldi	r24, 0xC4	; 196
    6b68:	97 e1       	ldi	r25, 0x17	; 23
    6b6a:	08 95       	ret

00006b6c <gettimezone>:
    6b6c:	ed e6       	ldi	r30, 0x6D	; 109
    6b6e:	fa e1       	ldi	r31, 0x1A	; 26
    6b70:	20 81       	ld	r18, Z
    6b72:	31 81       	ldd	r19, Z+1	; 0x01
    6b74:	dc 01       	movw	r26, r24
    6b76:	2d 93       	st	X+, r18
    6b78:	3c 93       	st	X, r19
    6b7a:	22 81       	ldd	r18, Z+2	; 0x02
    6b7c:	33 81       	ldd	r19, Z+3	; 0x03
    6b7e:	fc 01       	movw	r30, r24
    6b80:	33 83       	std	Z+3, r19	; 0x03
    6b82:	22 83       	std	Z+2, r18	; 0x02
    6b84:	80 e0       	ldi	r24, 0x00	; 0
    6b86:	90 e0       	ldi	r25, 0x00	; 0
    6b88:	08 95       	ret

00006b8a <settimezone>:
    6b8a:	cf 93       	push	r28
    6b8c:	df 93       	push	r29
    6b8e:	ec 01       	movw	r28, r24
    6b90:	28 81       	ld	r18, Y
    6b92:	39 81       	ldd	r19, Y+1	; 0x01
    6b94:	ed e6       	ldi	r30, 0x6D	; 109
    6b96:	fa e1       	ldi	r31, 0x1A	; 26
    6b98:	31 83       	std	Z+1, r19	; 0x01
    6b9a:	20 83       	st	Z, r18
    6b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    6b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    6ba0:	93 83       	std	Z+3, r25	; 0x03
    6ba2:	82 83       	std	Z+2, r24	; 0x02
    6ba4:	80 e0       	ldi	r24, 0x00	; 0
    6ba6:	90 e0       	ldi	r25, 0x00	; 0
    6ba8:	df 91       	pop	r29
    6baa:	cf 91       	pop	r28
    6bac:	08 95       	ret

00006bae <gettimeofday>:
    6bae:	a8 e0       	ldi	r26, 0x08	; 8
    6bb0:	b0 e0       	ldi	r27, 0x00	; 0
    6bb2:	ed ed       	ldi	r30, 0xDD	; 221
    6bb4:	f5 e3       	ldi	r31, 0x35	; 53
    6bb6:	0c 94 4a e3 	jmp	0x1c694	; 0x1c694 <__prologue_saves__+0x18>
    6bba:	8c 01       	movw	r16, r24
    6bbc:	7b 01       	movw	r14, r22
    6bbe:	be 01       	movw	r22, r28
    6bc0:	6f 5f       	subi	r22, 0xFF	; 255
    6bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    6bc4:	80 e0       	ldi	r24, 0x00	; 0
    6bc6:	90 e0       	ldi	r25, 0x00	; 0
    6bc8:	dc db       	rcall	.-2120   	; 0x6382 <clock_gettime>
    6bca:	89 81       	ldd	r24, Y+1	; 0x01
    6bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    6bce:	ab 81       	ldd	r26, Y+3	; 0x03
    6bd0:	bc 81       	ldd	r27, Y+4	; 0x04
    6bd2:	f8 01       	movw	r30, r16
    6bd4:	80 83       	st	Z, r24
    6bd6:	91 83       	std	Z+1, r25	; 0x01
    6bd8:	a2 83       	std	Z+2, r26	; 0x02
    6bda:	b3 83       	std	Z+3, r27	; 0x03
    6bdc:	6d 81       	ldd	r22, Y+5	; 0x05
    6bde:	7e 81       	ldd	r23, Y+6	; 0x06
    6be0:	8f 81       	ldd	r24, Y+7	; 0x07
    6be2:	98 85       	ldd	r25, Y+8	; 0x08
    6be4:	28 ee       	ldi	r18, 0xE8	; 232
    6be6:	33 e0       	ldi	r19, 0x03	; 3
    6be8:	40 e0       	ldi	r20, 0x00	; 0
    6bea:	50 e0       	ldi	r21, 0x00	; 0
    6bec:	0e 94 f3 e2 	call	0x1c5e6	; 0x1c5e6 <__divmodsi4>
    6bf0:	f8 01       	movw	r30, r16
    6bf2:	24 83       	std	Z+4, r18	; 0x04
    6bf4:	35 83       	std	Z+5, r19	; 0x05
    6bf6:	46 83       	std	Z+6, r20	; 0x06
    6bf8:	57 83       	std	Z+7, r21	; 0x07
    6bfa:	c7 01       	movw	r24, r14
    6bfc:	b7 df       	rcall	.-146    	; 0x6b6c <gettimezone>
    6bfe:	80 e0       	ldi	r24, 0x00	; 0
    6c00:	90 e0       	ldi	r25, 0x00	; 0
    6c02:	28 96       	adiw	r28, 0x08	; 8
    6c04:	e6 e0       	ldi	r30, 0x06	; 6
    6c06:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

00006c0a <time>:
    6c0a:	cf 93       	push	r28
    6c0c:	df 93       	push	r29
    6c0e:	ec 01       	movw	r28, r24
    6c10:	66 ea       	ldi	r22, 0xA6	; 166
    6c12:	77 e1       	ldi	r23, 0x17	; 23
    6c14:	80 e0       	ldi	r24, 0x00	; 0
    6c16:	90 e0       	ldi	r25, 0x00	; 0
    6c18:	b4 db       	rcall	.-2200   	; 0x6382 <clock_gettime>
    6c1a:	20 97       	sbiw	r28, 0x00	; 0
    6c1c:	61 f0       	breq	.+24     	; 0x6c36 <time+0x2c>
    6c1e:	80 91 a6 17 	lds	r24, 0x17A6	; 0x8017a6 <ts.3755>
    6c22:	90 91 a7 17 	lds	r25, 0x17A7	; 0x8017a7 <ts.3755+0x1>
    6c26:	a0 91 a8 17 	lds	r26, 0x17A8	; 0x8017a8 <ts.3755+0x2>
    6c2a:	b0 91 a9 17 	lds	r27, 0x17A9	; 0x8017a9 <ts.3755+0x3>
    6c2e:	88 83       	st	Y, r24
    6c30:	99 83       	std	Y+1, r25	; 0x01
    6c32:	aa 83       	std	Y+2, r26	; 0x02
    6c34:	bb 83       	std	Y+3, r27	; 0x03
    6c36:	60 91 a6 17 	lds	r22, 0x17A6	; 0x8017a6 <ts.3755>
    6c3a:	70 91 a7 17 	lds	r23, 0x17A7	; 0x8017a7 <ts.3755+0x1>
    6c3e:	80 91 a8 17 	lds	r24, 0x17A8	; 0x8017a8 <ts.3755+0x2>
    6c42:	90 91 a9 17 	lds	r25, 0x17A9	; 0x8017a9 <ts.3755+0x3>
    6c46:	df 91       	pop	r29
    6c48:	cf 91       	pop	r28
    6c4a:	08 95       	ret

00006c4c <is_dst>:
    6c4c:	cf 92       	push	r12
    6c4e:	df 92       	push	r13
    6c50:	ef 92       	push	r14
    6c52:	ff 92       	push	r15
    6c54:	6b 01       	movw	r12, r22
    6c56:	7c 01       	movw	r14, r24
    6c58:	05 d4       	rcall	.+2058   	; 0x7464 <set_dst>
    6c5a:	80 91 71 1a 	lds	r24, 0x1A71	; 0x801a71 <dst>
    6c5e:	90 91 72 1a 	lds	r25, 0x1A72	; 0x801a72 <dst+0x1>
    6c62:	a0 91 73 1a 	lds	r26, 0x1A73	; 0x801a73 <dst+0x2>
    6c66:	b0 91 74 1a 	lds	r27, 0x1A74	; 0x801a74 <dst+0x3>
    6c6a:	c8 16       	cp	r12, r24
    6c6c:	d9 06       	cpc	r13, r25
    6c6e:	ea 06       	cpc	r14, r26
    6c70:	fb 06       	cpc	r15, r27
    6c72:	88 f0       	brcs	.+34     	; 0x6c96 <is_dst+0x4a>
    6c74:	81 e0       	ldi	r24, 0x01	; 1
    6c76:	90 e0       	ldi	r25, 0x00	; 0
    6c78:	40 91 75 1a 	lds	r20, 0x1A75	; 0x801a75 <dst+0x4>
    6c7c:	50 91 76 1a 	lds	r21, 0x1A76	; 0x801a76 <dst+0x5>
    6c80:	60 91 77 1a 	lds	r22, 0x1A77	; 0x801a77 <dst+0x6>
    6c84:	70 91 78 1a 	lds	r23, 0x1A78	; 0x801a78 <dst+0x7>
    6c88:	4c 15       	cp	r20, r12
    6c8a:	5d 05       	cpc	r21, r13
    6c8c:	6e 05       	cpc	r22, r14
    6c8e:	7f 05       	cpc	r23, r15
    6c90:	20 f4       	brcc	.+8      	; 0x6c9a <is_dst+0x4e>
    6c92:	80 e0       	ldi	r24, 0x00	; 0
    6c94:	02 c0       	rjmp	.+4      	; 0x6c9a <is_dst+0x4e>
    6c96:	80 e0       	ldi	r24, 0x00	; 0
    6c98:	90 e0       	ldi	r25, 0x00	; 0
    6c9a:	ff 90       	pop	r15
    6c9c:	ef 90       	pop	r14
    6c9e:	df 90       	pop	r13
    6ca0:	cf 90       	pop	r12
    6ca2:	08 95       	ret

00006ca4 <localtime_r>:
    6ca4:	4f 92       	push	r4
    6ca6:	5f 92       	push	r5
    6ca8:	6f 92       	push	r6
    6caa:	7f 92       	push	r7
    6cac:	af 92       	push	r10
    6cae:	bf 92       	push	r11
    6cb0:	cf 92       	push	r12
    6cb2:	df 92       	push	r13
    6cb4:	ef 92       	push	r14
    6cb6:	ff 92       	push	r15
    6cb8:	0f 93       	push	r16
    6cba:	1f 93       	push	r17
    6cbc:	cf 93       	push	r28
    6cbe:	df 93       	push	r29
    6cc0:	00 d0       	rcall	.+0      	; 0x6cc2 <localtime_r+0x1e>
    6cc2:	00 d0       	rcall	.+0      	; 0x6cc4 <localtime_r+0x20>
    6cc4:	cd b7       	in	r28, 0x3d	; 61
    6cc6:	de b7       	in	r29, 0x3e	; 62
    6cc8:	5b 01       	movw	r10, r22
    6cca:	fc 01       	movw	r30, r24
    6ccc:	40 80       	ld	r4, Z
    6cce:	51 80       	ldd	r5, Z+1	; 0x01
    6cd0:	62 80       	ldd	r6, Z+2	; 0x02
    6cd2:	73 80       	ldd	r7, Z+3	; 0x03
    6cd4:	ce 01       	movw	r24, r28
    6cd6:	01 96       	adiw	r24, 0x01	; 1
    6cd8:	49 df       	rcall	.-366    	; 0x6b6c <gettimezone>
    6cda:	a9 81       	ldd	r26, Y+1	; 0x01
    6cdc:	ba 81       	ldd	r27, Y+2	; 0x02
    6cde:	2c e3       	ldi	r18, 0x3C	; 60
    6ce0:	30 e0       	ldi	r19, 0x00	; 0
    6ce2:	0e 94 18 e3 	call	0x1c630	; 0x1c630 <__usmulhisi3>
    6ce6:	6b 01       	movw	r12, r22
    6ce8:	7c 01       	movw	r14, r24
    6cea:	c3 01       	movw	r24, r6
    6cec:	b2 01       	movw	r22, r4
    6cee:	6c 19       	sub	r22, r12
    6cf0:	7d 09       	sbc	r23, r13
    6cf2:	8e 09       	sbc	r24, r14
    6cf4:	9f 09       	sbc	r25, r15
    6cf6:	aa df       	rcall	.-172    	; 0x6c4c <is_dst>
    6cf8:	89 2b       	or	r24, r25
    6cfa:	31 f0       	breq	.+12     	; 0x6d08 <localtime_r+0x64>
    6cfc:	f0 e1       	ldi	r31, 0x10	; 16
    6cfe:	cf 1a       	sub	r12, r31
    6d00:	fe e0       	ldi	r31, 0x0E	; 14
    6d02:	df 0a       	sbc	r13, r31
    6d04:	e1 08       	sbc	r14, r1
    6d06:	f1 08       	sbc	r15, r1
    6d08:	85 01       	movw	r16, r10
    6d0a:	a7 01       	movw	r20, r14
    6d0c:	96 01       	movw	r18, r12
    6d0e:	c3 01       	movw	r24, r6
    6d10:	b2 01       	movw	r22, r4
    6d12:	2e de       	rcall	.-932    	; 0x6970 <time_to_tm>
    6d14:	c5 01       	movw	r24, r10
    6d16:	0f 90       	pop	r0
    6d18:	0f 90       	pop	r0
    6d1a:	0f 90       	pop	r0
    6d1c:	0f 90       	pop	r0
    6d1e:	df 91       	pop	r29
    6d20:	cf 91       	pop	r28
    6d22:	1f 91       	pop	r17
    6d24:	0f 91       	pop	r16
    6d26:	ff 90       	pop	r15
    6d28:	ef 90       	pop	r14
    6d2a:	df 90       	pop	r13
    6d2c:	cf 90       	pop	r12
    6d2e:	bf 90       	pop	r11
    6d30:	af 90       	pop	r10
    6d32:	7f 90       	pop	r7
    6d34:	6f 90       	pop	r6
    6d36:	5f 90       	pop	r5
    6d38:	4f 90       	pop	r4
    6d3a:	08 95       	ret

00006d3c <localtime>:
    6d3c:	6e ea       	ldi	r22, 0xAE	; 174
    6d3e:	77 e1       	ldi	r23, 0x17	; 23
    6d40:	b1 cf       	rjmp	.-158    	; 0x6ca4 <localtime_r>
    6d42:	08 95       	ret

00006d44 <normalize>:
    6d44:	aa e0       	ldi	r26, 0x0A	; 10
    6d46:	b0 e0       	ldi	r27, 0x00	; 0
    6d48:	e8 ea       	ldi	r30, 0xA8	; 168
    6d4a:	f6 e3       	ldi	r31, 0x36	; 54
    6d4c:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
    6d50:	7c 01       	movw	r14, r24
    6d52:	7a 87       	std	Y+10, r23	; 0x0a
    6d54:	69 87       	std	Y+9, r22	; 0x09
    6d56:	f7 01       	movw	r30, r14
    6d58:	80 81       	ld	r24, Z
    6d5a:	91 81       	ldd	r25, Z+1	; 0x01
    6d5c:	8c 33       	cpi	r24, 0x3C	; 60
    6d5e:	91 05       	cpc	r25, r1
    6d60:	5c f0       	brlt	.+22     	; 0x6d78 <normalize+0x34>
    6d62:	f7 01       	movw	r30, r14
    6d64:	22 81       	ldd	r18, Z+2	; 0x02
    6d66:	33 81       	ldd	r19, Z+3	; 0x03
    6d68:	2f 5f       	subi	r18, 0xFF	; 255
    6d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    6d6c:	33 83       	std	Z+3, r19	; 0x03
    6d6e:	22 83       	std	Z+2, r18	; 0x02
    6d70:	cc 97       	sbiw	r24, 0x3c	; 60
    6d72:	91 83       	std	Z+1, r25	; 0x01
    6d74:	80 83       	st	Z, r24
    6d76:	ef cf       	rjmp	.-34     	; 0x6d56 <normalize+0x12>
    6d78:	f7 01       	movw	r30, r14
    6d7a:	01 90       	ld	r0, Z+
    6d7c:	f0 81       	ld	r31, Z
    6d7e:	e0 2d       	mov	r30, r0
    6d80:	fe 83       	std	Y+6, r31	; 0x06
    6d82:	ed 83       	std	Y+5, r30	; 0x05
    6d84:	f7 ff       	sbrs	r31, 7
    6d86:	0d c0       	rjmp	.+26     	; 0x6da2 <normalize+0x5e>
    6d88:	f7 01       	movw	r30, r14
    6d8a:	82 81       	ldd	r24, Z+2	; 0x02
    6d8c:	93 81       	ldd	r25, Z+3	; 0x03
    6d8e:	01 97       	sbiw	r24, 0x01	; 1
    6d90:	93 83       	std	Z+3, r25	; 0x03
    6d92:	82 83       	std	Z+2, r24	; 0x02
    6d94:	6d 81       	ldd	r22, Y+5	; 0x05
    6d96:	7e 81       	ldd	r23, Y+6	; 0x06
    6d98:	64 5c       	subi	r22, 0xC4	; 196
    6d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    6d9c:	71 83       	std	Z+1, r23	; 0x01
    6d9e:	60 83       	st	Z, r22
    6da0:	eb cf       	rjmp	.-42     	; 0x6d78 <normalize+0x34>
    6da2:	f7 01       	movw	r30, r14
    6da4:	82 81       	ldd	r24, Z+2	; 0x02
    6da6:	93 81       	ldd	r25, Z+3	; 0x03
    6da8:	8c 33       	cpi	r24, 0x3C	; 60
    6daa:	91 05       	cpc	r25, r1
    6dac:	5c f0       	brlt	.+22     	; 0x6dc4 <normalize+0x80>
    6dae:	f7 01       	movw	r30, r14
    6db0:	24 81       	ldd	r18, Z+4	; 0x04
    6db2:	35 81       	ldd	r19, Z+5	; 0x05
    6db4:	2f 5f       	subi	r18, 0xFF	; 255
    6db6:	3f 4f       	sbci	r19, 0xFF	; 255
    6db8:	35 83       	std	Z+5, r19	; 0x05
    6dba:	24 83       	std	Z+4, r18	; 0x04
    6dbc:	cc 97       	sbiw	r24, 0x3c	; 60
    6dbe:	93 83       	std	Z+3, r25	; 0x03
    6dc0:	82 83       	std	Z+2, r24	; 0x02
    6dc2:	ef cf       	rjmp	.-34     	; 0x6da2 <normalize+0x5e>
    6dc4:	f7 01       	movw	r30, r14
    6dc6:	22 80       	ldd	r2, Z+2	; 0x02
    6dc8:	33 80       	ldd	r3, Z+3	; 0x03
    6dca:	37 fe       	sbrs	r3, 7
    6dcc:	0d c0       	rjmp	.+26     	; 0x6de8 <normalize+0xa4>
    6dce:	f7 01       	movw	r30, r14
    6dd0:	84 81       	ldd	r24, Z+4	; 0x04
    6dd2:	95 81       	ldd	r25, Z+5	; 0x05
    6dd4:	01 97       	sbiw	r24, 0x01	; 1
    6dd6:	95 83       	std	Z+5, r25	; 0x05
    6dd8:	84 83       	std	Z+4, r24	; 0x04
    6dda:	fc e3       	ldi	r31, 0x3C	; 60
    6ddc:	2f 0e       	add	r2, r31
    6dde:	31 1c       	adc	r3, r1
    6de0:	f7 01       	movw	r30, r14
    6de2:	33 82       	std	Z+3, r3	; 0x03
    6de4:	22 82       	std	Z+2, r2	; 0x02
    6de6:	ee cf       	rjmp	.-36     	; 0x6dc4 <normalize+0x80>
    6de8:	f7 01       	movw	r30, r14
    6dea:	84 81       	ldd	r24, Z+4	; 0x04
    6dec:	95 81       	ldd	r25, Z+5	; 0x05
    6dee:	88 31       	cpi	r24, 0x18	; 24
    6df0:	91 05       	cpc	r25, r1
    6df2:	5c f0       	brlt	.+22     	; 0x6e0a <normalize+0xc6>
    6df4:	f7 01       	movw	r30, r14
    6df6:	26 81       	ldd	r18, Z+6	; 0x06
    6df8:	37 81       	ldd	r19, Z+7	; 0x07
    6dfa:	2f 5f       	subi	r18, 0xFF	; 255
    6dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    6dfe:	37 83       	std	Z+7, r19	; 0x07
    6e00:	26 83       	std	Z+6, r18	; 0x06
    6e02:	48 97       	sbiw	r24, 0x18	; 24
    6e04:	95 83       	std	Z+5, r25	; 0x05
    6e06:	84 83       	std	Z+4, r24	; 0x04
    6e08:	ef cf       	rjmp	.-34     	; 0x6de8 <normalize+0xa4>
    6e0a:	f7 01       	movw	r30, r14
    6e0c:	04 81       	ldd	r16, Z+4	; 0x04
    6e0e:	15 81       	ldd	r17, Z+5	; 0x05
    6e10:	17 ff       	sbrs	r17, 7
    6e12:	0b c0       	rjmp	.+22     	; 0x6e2a <normalize+0xe6>
    6e14:	f7 01       	movw	r30, r14
    6e16:	86 81       	ldd	r24, Z+6	; 0x06
    6e18:	97 81       	ldd	r25, Z+7	; 0x07
    6e1a:	01 97       	sbiw	r24, 0x01	; 1
    6e1c:	97 83       	std	Z+7, r25	; 0x07
    6e1e:	86 83       	std	Z+6, r24	; 0x06
    6e20:	08 5e       	subi	r16, 0xE8	; 232
    6e22:	1f 4f       	sbci	r17, 0xFF	; 255
    6e24:	15 83       	std	Z+5, r17	; 0x05
    6e26:	04 83       	std	Z+4, r16	; 0x04
    6e28:	f0 cf       	rjmp	.-32     	; 0x6e0a <normalize+0xc6>
    6e2a:	f7 01       	movw	r30, r14
    6e2c:	80 85       	ldd	r24, Z+8	; 0x08
    6e2e:	91 85       	ldd	r25, Z+9	; 0x09
    6e30:	8c 30       	cpi	r24, 0x0C	; 12
    6e32:	91 05       	cpc	r25, r1
    6e34:	5c f0       	brlt	.+22     	; 0x6e4c <normalize+0x108>
    6e36:	f7 01       	movw	r30, r14
    6e38:	22 85       	ldd	r18, Z+10	; 0x0a
    6e3a:	33 85       	ldd	r19, Z+11	; 0x0b
    6e3c:	2f 5f       	subi	r18, 0xFF	; 255
    6e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    6e40:	33 87       	std	Z+11, r19	; 0x0b
    6e42:	22 87       	std	Z+10, r18	; 0x0a
    6e44:	0c 97       	sbiw	r24, 0x0c	; 12
    6e46:	91 87       	std	Z+9, r25	; 0x09
    6e48:	80 87       	std	Z+8, r24	; 0x08
    6e4a:	ef cf       	rjmp	.-34     	; 0x6e2a <normalize+0xe6>
    6e4c:	f7 01       	movw	r30, r14
    6e4e:	80 85       	ldd	r24, Z+8	; 0x08
    6e50:	91 85       	ldd	r25, Z+9	; 0x09
    6e52:	97 ff       	sbrs	r25, 7
    6e54:	2d c0       	rjmp	.+90     	; 0x6eb0 <normalize+0x16c>
    6e56:	f7 01       	movw	r30, r14
    6e58:	22 85       	ldd	r18, Z+10	; 0x0a
    6e5a:	33 85       	ldd	r19, Z+11	; 0x0b
    6e5c:	21 50       	subi	r18, 0x01	; 1
    6e5e:	31 09       	sbc	r19, r1
    6e60:	33 87       	std	Z+11, r19	; 0x0b
    6e62:	22 87       	std	Z+10, r18	; 0x0a
    6e64:	0c 96       	adiw	r24, 0x0c	; 12
    6e66:	91 87       	std	Z+9, r25	; 0x09
    6e68:	80 87       	std	Z+8, r24	; 0x08
    6e6a:	f0 cf       	rjmp	.-32     	; 0x6e4c <normalize+0x108>
    6e6c:	f7 01       	movw	r30, r14
    6e6e:	c6 80       	ldd	r12, Z+6	; 0x06
    6e70:	d7 80       	ldd	r13, Z+7	; 0x07
    6e72:	a0 84       	ldd	r10, Z+8	; 0x08
    6e74:	b1 84       	ldd	r11, Z+9	; 0x09
    6e76:	b4 01       	movw	r22, r8
    6e78:	c5 01       	movw	r24, r10
    6e7a:	59 dd       	rcall	.-1358   	; 0x692e <Days_Per_Month>
    6e7c:	8c 15       	cp	r24, r12
    6e7e:	9d 05       	cpc	r25, r13
    6e80:	84 f5       	brge	.+96     	; 0x6ee2 <normalize+0x19e>
    6e82:	c8 1a       	sub	r12, r24
    6e84:	d9 0a       	sbc	r13, r25
    6e86:	f7 01       	movw	r30, r14
    6e88:	d7 82       	std	Z+7, r13	; 0x07
    6e8a:	c6 82       	std	Z+6, r12	; 0x06
    6e8c:	c5 01       	movw	r24, r10
    6e8e:	01 96       	adiw	r24, 0x01	; 1
    6e90:	91 87       	std	Z+9, r25	; 0x09
    6e92:	80 87       	std	Z+8, r24	; 0x08
    6e94:	0c 97       	sbiw	r24, 0x0c	; 12
    6e96:	54 f3       	brlt	.-44     	; 0x6e6c <normalize+0x128>
    6e98:	fb e0       	ldi	r31, 0x0B	; 11
    6e9a:	af 1a       	sub	r10, r31
    6e9c:	b1 08       	sbc	r11, r1
    6e9e:	f7 01       	movw	r30, r14
    6ea0:	b1 86       	std	Z+9, r11	; 0x09
    6ea2:	a0 86       	std	Z+8, r10	; 0x08
    6ea4:	ff ef       	ldi	r31, 0xFF	; 255
    6ea6:	8f 1a       	sub	r8, r31
    6ea8:	9f 0a       	sbc	r9, r31
    6eaa:	f7 01       	movw	r30, r14
    6eac:	93 86       	std	Z+11, r9	; 0x0b
    6eae:	82 86       	std	Z+10, r8	; 0x0a
    6eb0:	f7 01       	movw	r30, r14
    6eb2:	82 84       	ldd	r8, Z+10	; 0x0a
    6eb4:	93 84       	ldd	r9, Z+11	; 0x0b
    6eb6:	da cf       	rjmp	.-76     	; 0x6e6c <normalize+0x128>
    6eb8:	f7 01       	movw	r30, r14
    6eba:	80 85       	ldd	r24, Z+8	; 0x08
    6ebc:	91 85       	ldd	r25, Z+9	; 0x09
    6ebe:	9c 01       	movw	r18, r24
    6ec0:	21 50       	subi	r18, 0x01	; 1
    6ec2:	31 09       	sbc	r19, r1
    6ec4:	37 fd       	sbrc	r19, 7
    6ec6:	16 c0       	rjmp	.+44     	; 0x6ef4 <normalize+0x1b0>
    6ec8:	31 87       	std	Z+9, r19	; 0x09
    6eca:	20 87       	std	Z+8, r18	; 0x08
    6ecc:	f7 01       	movw	r30, r14
    6ece:	62 85       	ldd	r22, Z+10	; 0x0a
    6ed0:	73 85       	ldd	r23, Z+11	; 0x0b
    6ed2:	80 85       	ldd	r24, Z+8	; 0x08
    6ed4:	91 85       	ldd	r25, Z+9	; 0x09
    6ed6:	2b dd       	rcall	.-1450   	; 0x692e <Days_Per_Month>
    6ed8:	88 0d       	add	r24, r8
    6eda:	99 1d       	adc	r25, r9
    6edc:	f7 01       	movw	r30, r14
    6ede:	97 83       	std	Z+7, r25	; 0x07
    6ee0:	86 83       	std	Z+6, r24	; 0x06
    6ee2:	f7 01       	movw	r30, r14
    6ee4:	86 80       	ldd	r8, Z+6	; 0x06
    6ee6:	97 80       	ldd	r9, Z+7	; 0x07
    6ee8:	a2 84       	ldd	r10, Z+10	; 0x0a
    6eea:	b3 84       	ldd	r11, Z+11	; 0x0b
    6eec:	18 14       	cp	r1, r8
    6eee:	19 04       	cpc	r1, r9
    6ef0:	1c f7       	brge	.-58     	; 0x6eb8 <normalize+0x174>
    6ef2:	0b c0       	rjmp	.+22     	; 0x6f0a <normalize+0x1c6>
    6ef4:	0b 96       	adiw	r24, 0x0b	; 11
    6ef6:	f7 01       	movw	r30, r14
    6ef8:	91 87       	std	Z+9, r25	; 0x09
    6efa:	80 87       	std	Z+8, r24	; 0x08
    6efc:	f1 e0       	ldi	r31, 0x01	; 1
    6efe:	af 1a       	sub	r10, r31
    6f00:	b1 08       	sbc	r11, r1
    6f02:	f7 01       	movw	r30, r14
    6f04:	b3 86       	std	Z+11, r11	; 0x0b
    6f06:	a2 86       	std	Z+10, r10	; 0x0a
    6f08:	e1 cf       	rjmp	.-62     	; 0x6ecc <normalize+0x188>
    6f0a:	a5 01       	movw	r20, r10
    6f0c:	44 59       	subi	r20, 0x94	; 148
    6f0e:	58 4f       	sbci	r21, 0xF8	; 248
    6f10:	58 87       	std	Y+8, r21	; 0x08
    6f12:	4f 83       	std	Y+7, r20	; 0x07
    6f14:	35 01       	movw	r6, r10
    6f16:	56 e4       	ldi	r21, 0x46	; 70
    6f18:	65 1a       	sub	r6, r21
    6f1a:	71 08       	sbc	r7, r1
    6f1c:	89 e8       	ldi	r24, 0x89	; 137
    6f1e:	68 16       	cp	r6, r24
    6f20:	71 04       	cpc	r7, r1
    6f22:	08 f0       	brcs	.+2      	; 0x6f26 <normalize+0x1e2>
    6f24:	9b c0       	rjmp	.+310    	; 0x705c <normalize+0x318>
    6f26:	c0 84       	ldd	r12, Z+8	; 0x08
    6f28:	d1 84       	ldd	r13, Z+9	; 0x09
    6f2a:	9c e0       	ldi	r25, 0x0C	; 12
    6f2c:	c9 16       	cp	r12, r25
    6f2e:	d1 04       	cpc	r13, r1
    6f30:	08 f0       	brcs	.+2      	; 0x6f34 <normalize+0x1f0>
    6f32:	94 c0       	rjmp	.+296    	; 0x705c <normalize+0x318>
    6f34:	24 01       	movw	r4, r8
    6f36:	e1 e0       	ldi	r30, 0x01	; 1
    6f38:	4e 1a       	sub	r4, r30
    6f3a:	51 08       	sbc	r5, r1
    6f3c:	6f 81       	ldd	r22, Y+7	; 0x07
    6f3e:	78 85       	ldd	r23, Y+8	; 0x08
    6f40:	c6 01       	movw	r24, r12
    6f42:	f5 dc       	rcall	.-1558   	; 0x692e <Days_Per_Month>
    6f44:	48 16       	cp	r4, r24
    6f46:	59 06       	cpc	r5, r25
    6f48:	0c f0       	brlt	.+2      	; 0x6f4c <normalize+0x208>
    6f4a:	88 c0       	rjmp	.+272    	; 0x705c <normalize+0x318>
    6f4c:	08 31       	cpi	r16, 0x18	; 24
    6f4e:	11 05       	cpc	r17, r1
    6f50:	0c f0       	brlt	.+2      	; 0x6f54 <normalize+0x210>
    6f52:	84 c0       	rjmp	.+264    	; 0x705c <normalize+0x318>
    6f54:	fc e3       	ldi	r31, 0x3C	; 60
    6f56:	2f 16       	cp	r2, r31
    6f58:	31 04       	cpc	r3, r1
    6f5a:	0c f0       	brlt	.+2      	; 0x6f5e <normalize+0x21a>
    6f5c:	7f c0       	rjmp	.+254    	; 0x705c <normalize+0x318>
    6f5e:	4d 81       	ldd	r20, Y+5	; 0x05
    6f60:	5e 81       	ldd	r21, Y+6	; 0x06
    6f62:	4c 33       	cpi	r20, 0x3C	; 60
    6f64:	51 05       	cpc	r21, r1
    6f66:	0c f0       	brlt	.+2      	; 0x6f6a <normalize+0x226>
    6f68:	79 c0       	rjmp	.+242    	; 0x705c <normalize+0x318>
    6f6a:	2d e6       	ldi	r18, 0x6D	; 109
    6f6c:	31 e0       	ldi	r19, 0x01	; 1
    6f6e:	d3 01       	movw	r26, r6
    6f70:	0e 94 18 e3 	call	0x1c630	; 0x1c630 <__usmulhisi3>
    6f74:	f6 01       	movw	r30, r12
    6f76:	ee 0f       	add	r30, r30
    6f78:	ff 1f       	adc	r31, r31
    6f7a:	e0 56       	subi	r30, 0x60	; 96
    6f7c:	fc 4f       	sbci	r31, 0xFC	; 252
    6f7e:	20 81       	ld	r18, Z
    6f80:	31 81       	ldd	r19, Z+1	; 0x01
    6f82:	dc 01       	movw	r26, r24
    6f84:	cb 01       	movw	r24, r22
    6f86:	82 0f       	add	r24, r18
    6f88:	93 1f       	adc	r25, r19
    6f8a:	a1 1d       	adc	r26, r1
    6f8c:	b1 1d       	adc	r27, r1
    6f8e:	05 2c       	mov	r0, r5
    6f90:	00 0c       	add	r0, r0
    6f92:	66 08       	sbc	r6, r6
    6f94:	77 08       	sbc	r7, r7
    6f96:	48 0e       	add	r4, r24
    6f98:	59 1e       	adc	r5, r25
    6f9a:	6a 1e       	adc	r6, r26
    6f9c:	7b 1e       	adc	r7, r27
    6f9e:	1a 14       	cp	r1, r10
    6fa0:	1b 04       	cpc	r1, r11
    6fa2:	1c f4       	brge	.+6      	; 0x6faa <normalize+0x266>
    6fa4:	51 e0       	ldi	r21, 0x01	; 1
    6fa6:	a5 1a       	sub	r10, r21
    6fa8:	b1 08       	sbc	r11, r1
    6faa:	45 01       	movw	r8, r10
    6fac:	95 94       	asr	r9
    6fae:	87 94       	ror	r8
    6fb0:	95 94       	asr	r9
    6fb2:	87 94       	ror	r8
    6fb4:	88 ec       	ldi	r24, 0xC8	; 200
    6fb6:	a8 16       	cp	r10, r24
    6fb8:	b1 04       	cpc	r11, r1
    6fba:	1c f0       	brlt	.+6      	; 0x6fc2 <normalize+0x27e>
    6fbc:	91 e0       	ldi	r25, 0x01	; 1
    6fbe:	89 1a       	sub	r8, r25
    6fc0:	91 08       	sbc	r9, r1
    6fc2:	09 2c       	mov	r0, r9
    6fc4:	00 0c       	add	r0, r0
    6fc6:	aa 08       	sbc	r10, r10
    6fc8:	bb 08       	sbc	r11, r11
    6fca:	84 0c       	add	r8, r4
    6fcc:	95 1c       	adc	r9, r5
    6fce:	a6 1c       	adc	r10, r6
    6fd0:	b7 1c       	adc	r11, r7
    6fd2:	24 01       	movw	r4, r8
    6fd4:	35 01       	movw	r6, r10
    6fd6:	e1 e1       	ldi	r30, 0x11	; 17
    6fd8:	4e 1a       	sub	r4, r30
    6fda:	51 08       	sbc	r5, r1
    6fdc:	61 08       	sbc	r6, r1
    6fde:	71 08       	sbc	r7, r1
    6fe0:	f2 e0       	ldi	r31, 0x02	; 2
    6fe2:	cf 16       	cp	r12, r31
    6fe4:	d1 04       	cpc	r13, r1
    6fe6:	64 f0       	brlt	.+24     	; 0x7000 <normalize+0x2bc>
    6fe8:	8f 81       	ldd	r24, Y+7	; 0x07
    6fea:	98 85       	ldd	r25, Y+8	; 0x08
    6fec:	7b dc       	rcall	.-1802   	; 0x68e4 <IS_Leap>
    6fee:	89 2b       	or	r24, r25
    6ff0:	39 f0       	breq	.+14     	; 0x7000 <normalize+0x2bc>
    6ff2:	24 01       	movw	r4, r8
    6ff4:	35 01       	movw	r6, r10
    6ff6:	40 e1       	ldi	r20, 0x10	; 16
    6ff8:	44 1a       	sub	r4, r20
    6ffa:	51 08       	sbc	r5, r1
    6ffc:	61 08       	sbc	r6, r1
    6ffe:	71 08       	sbc	r7, r1
    7000:	a8 e1       	ldi	r26, 0x18	; 24
    7002:	b0 e0       	ldi	r27, 0x00	; 0
    7004:	a3 01       	movw	r20, r6
    7006:	92 01       	movw	r18, r4
    7008:	0e 94 1e e3 	call	0x1c63c	; 0x1c63c <__muluhisi3>
    700c:	01 2e       	mov	r0, r17
    700e:	00 0c       	add	r0, r0
    7010:	22 0b       	sbc	r18, r18
    7012:	33 0b       	sbc	r19, r19
    7014:	a9 01       	movw	r20, r18
    7016:	98 01       	movw	r18, r16
    7018:	26 0f       	add	r18, r22
    701a:	37 1f       	adc	r19, r23
    701c:	48 1f       	adc	r20, r24
    701e:	59 1f       	adc	r21, r25
    7020:	ac e3       	ldi	r26, 0x3C	; 60
    7022:	b0 e0       	ldi	r27, 0x00	; 0
    7024:	0e 94 1e e3 	call	0x1c63c	; 0x1c63c <__muluhisi3>
    7028:	81 01       	movw	r16, r2
    702a:	03 2c       	mov	r0, r3
    702c:	00 0c       	add	r0, r0
    702e:	22 0b       	sbc	r18, r18
    7030:	33 0b       	sbc	r19, r19
    7032:	a9 01       	movw	r20, r18
    7034:	98 01       	movw	r18, r16
    7036:	26 0f       	add	r18, r22
    7038:	37 1f       	adc	r19, r23
    703a:	48 1f       	adc	r20, r24
    703c:	59 1f       	adc	r21, r25
    703e:	0e 94 1e e3 	call	0x1c63c	; 0x1c63c <__muluhisi3>
    7042:	ed 81       	ldd	r30, Y+5	; 0x05
    7044:	fe 81       	ldd	r31, Y+6	; 0x06
    7046:	8f 01       	movw	r16, r30
    7048:	ff 0f       	add	r31, r31
    704a:	22 0b       	sbc	r18, r18
    704c:	33 0b       	sbc	r19, r19
    704e:	48 01       	movw	r8, r16
    7050:	59 01       	movw	r10, r18
    7052:	86 0e       	add	r8, r22
    7054:	97 1e       	adc	r9, r23
    7056:	a8 1e       	adc	r10, r24
    7058:	b9 1e       	adc	r11, r25
    705a:	04 c0       	rjmp	.+8      	; 0x7064 <normalize+0x320>
    705c:	88 24       	eor	r8, r8
    705e:	8a 94       	dec	r8
    7060:	98 2c       	mov	r9, r8
    7062:	54 01       	movw	r10, r8
    7064:	49 85       	ldd	r20, Y+9	; 0x09
    7066:	5a 85       	ldd	r21, Y+10	; 0x0a
    7068:	45 2b       	or	r20, r21
    706a:	e9 f0       	breq	.+58     	; 0x70a6 <normalize+0x362>
    706c:	ce 01       	movw	r24, r28
    706e:	01 96       	adiw	r24, 0x01	; 1
    7070:	7d dd       	rcall	.-1286   	; 0x6b6c <gettimezone>
    7072:	a9 81       	ldd	r26, Y+1	; 0x01
    7074:	ba 81       	ldd	r27, Y+2	; 0x02
    7076:	2c e3       	ldi	r18, 0x3C	; 60
    7078:	30 e0       	ldi	r19, 0x00	; 0
    707a:	0e 94 18 e3 	call	0x1c630	; 0x1c630 <__usmulhisi3>
    707e:	2b 01       	movw	r4, r22
    7080:	3c 01       	movw	r6, r24
    7082:	c5 01       	movw	r24, r10
    7084:	b4 01       	movw	r22, r8
    7086:	e2 dd       	rcall	.-1084   	; 0x6c4c <is_dst>
    7088:	89 2b       	or	r24, r25
    708a:	51 f0       	breq	.+20     	; 0x70a0 <normalize+0x35c>
    708c:	50 e1       	ldi	r21, 0x10	; 16
    708e:	45 1a       	sub	r4, r21
    7090:	5e e0       	ldi	r21, 0x0E	; 14
    7092:	55 0a       	sbc	r5, r21
    7094:	61 08       	sbc	r6, r1
    7096:	71 08       	sbc	r7, r1
    7098:	cc 24       	eor	r12, r12
    709a:	c3 94       	inc	r12
    709c:	d1 2c       	mov	r13, r1
    709e:	08 c0       	rjmp	.+16     	; 0x70b0 <normalize+0x36c>
    70a0:	c1 2c       	mov	r12, r1
    70a2:	d1 2c       	mov	r13, r1
    70a4:	05 c0       	rjmp	.+10     	; 0x70b0 <normalize+0x36c>
    70a6:	c1 2c       	mov	r12, r1
    70a8:	d1 2c       	mov	r13, r1
    70aa:	41 2c       	mov	r4, r1
    70ac:	51 2c       	mov	r5, r1
    70ae:	32 01       	movw	r6, r4
    70b0:	87 01       	movw	r16, r14
    70b2:	a3 01       	movw	r20, r6
    70b4:	92 01       	movw	r18, r4
    70b6:	c5 01       	movw	r24, r10
    70b8:	b4 01       	movw	r22, r8
    70ba:	5a dc       	rcall	.-1868   	; 0x6970 <time_to_tm>
    70bc:	c1 14       	cp	r12, r1
    70be:	d1 04       	cpc	r13, r1
    70c0:	29 f0       	breq	.+10     	; 0x70cc <normalize+0x388>
    70c2:	21 e0       	ldi	r18, 0x01	; 1
    70c4:	30 e0       	ldi	r19, 0x00	; 0
    70c6:	f7 01       	movw	r30, r14
    70c8:	31 8b       	std	Z+17, r19	; 0x11
    70ca:	20 8b       	std	Z+16, r18	; 0x10
    70cc:	2a 96       	adiw	r28, 0x0a	; 10
    70ce:	e2 e1       	ldi	r30, 0x12	; 18
    70d0:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

000070d4 <timegm>:
    70d4:	60 e0       	ldi	r22, 0x00	; 0
    70d6:	70 e0       	ldi	r23, 0x00	; 0
    70d8:	35 ce       	rjmp	.-918    	; 0x6d44 <normalize>
    70da:	08 95       	ret

000070dc <setdate_r>:
    70dc:	cf 92       	push	r12
    70de:	df 92       	push	r13
    70e0:	ef 92       	push	r14
    70e2:	ff 92       	push	r15
    70e4:	cf 93       	push	r28
    70e6:	df 93       	push	r29
    70e8:	cd b7       	in	r28, 0x3d	; 61
    70ea:	de b7       	in	r29, 0x3e	; 62
    70ec:	a5 97       	sbiw	r28, 0x25	; 37
    70ee:	0f b6       	in	r0, 0x3f	; 63
    70f0:	f8 94       	cli
    70f2:	de bf       	out	0x3e, r29	; 62
    70f4:	0f be       	out	0x3f, r0	; 63
    70f6:	cd bf       	out	0x3d, r28	; 61
    70f8:	9d a3       	std	Y+37, r25	; 0x25
    70fa:	8c a3       	std	Y+36, r24	; 0x24
    70fc:	1f 82       	std	Y+7, r1	; 0x07
    70fe:	1e 82       	std	Y+6, r1	; 0x06
    7100:	19 86       	std	Y+9, r1	; 0x09
    7102:	18 86       	std	Y+8, r1	; 0x08
    7104:	1b 86       	std	Y+11, r1	; 0x0b
    7106:	1a 86       	std	Y+10, r1	; 0x0a
    7108:	1d 86       	std	Y+13, r1	; 0x0d
    710a:	1c 86       	std	Y+12, r1	; 0x0c
    710c:	1f 86       	std	Y+15, r1	; 0x0f
    710e:	1e 86       	std	Y+14, r1	; 0x0e
    7110:	19 8a       	std	Y+17, r1	; 0x11
    7112:	18 8a       	std	Y+16, r1	; 0x10
    7114:	8c a1       	ldd	r24, Y+36	; 0x24
    7116:	9d a1       	ldd	r25, Y+37	; 0x25
    7118:	fc 01       	movw	r30, r24
    711a:	20 81       	ld	r18, Z
    711c:	20 32       	cpi	r18, 0x20	; 32
    711e:	21 f4       	brne	.+8      	; 0x7128 <setdate_r+0x4c>
    7120:	01 96       	adiw	r24, 0x01	; 1
    7122:	9d a3       	std	Y+37, r25	; 0x25
    7124:	8c a3       	std	Y+36, r24	; 0x24
    7126:	f6 cf       	rjmp	.-20     	; 0x7114 <setdate_r+0x38>
    7128:	4a e0       	ldi	r20, 0x0A	; 10
    712a:	50 e0       	ldi	r21, 0x00	; 0
    712c:	be 01       	movw	r22, r28
    712e:	6c 5d       	subi	r22, 0xDC	; 220
    7130:	7f 4f       	sbci	r23, 0xFF	; 255
    7132:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <strtol>
    7136:	79 8b       	std	Y+17, r23	; 0x11
    7138:	68 8b       	std	Y+16, r22	; 0x10
    713a:	8c a1       	ldd	r24, Y+36	; 0x24
    713c:	9d a1       	ldd	r25, Y+37	; 0x25
    713e:	fc 01       	movw	r30, r24
    7140:	20 81       	ld	r18, Z
    7142:	20 32       	cpi	r18, 0x20	; 32
    7144:	21 f4       	brne	.+8      	; 0x714e <setdate_r+0x72>
    7146:	01 96       	adiw	r24, 0x01	; 1
    7148:	9d a3       	std	Y+37, r25	; 0x25
    714a:	8c a3       	std	Y+36, r24	; 0x24
    714c:	f6 cf       	rjmp	.-20     	; 0x713a <setdate_r+0x5e>
    714e:	4a e0       	ldi	r20, 0x0A	; 10
    7150:	50 e0       	ldi	r21, 0x00	; 0
    7152:	be 01       	movw	r22, r28
    7154:	6c 5d       	subi	r22, 0xDC	; 220
    7156:	7f 4f       	sbci	r23, 0xFF	; 255
    7158:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <strtol>
    715c:	7f 87       	std	Y+15, r23	; 0x0f
    715e:	6e 87       	std	Y+14, r22	; 0x0e
    7160:	8c a1       	ldd	r24, Y+36	; 0x24
    7162:	9d a1       	ldd	r25, Y+37	; 0x25
    7164:	fc 01       	movw	r30, r24
    7166:	20 81       	ld	r18, Z
    7168:	20 32       	cpi	r18, 0x20	; 32
    716a:	21 f4       	brne	.+8      	; 0x7174 <setdate_r+0x98>
    716c:	01 96       	adiw	r24, 0x01	; 1
    716e:	9d a3       	std	Y+37, r25	; 0x25
    7170:	8c a3       	std	Y+36, r24	; 0x24
    7172:	f6 cf       	rjmp	.-20     	; 0x7160 <setdate_r+0x84>
    7174:	4a e0       	ldi	r20, 0x0A	; 10
    7176:	50 e0       	ldi	r21, 0x00	; 0
    7178:	be 01       	movw	r22, r28
    717a:	6c 5d       	subi	r22, 0xDC	; 220
    717c:	7f 4f       	sbci	r23, 0xFF	; 255
    717e:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <strtol>
    7182:	7d 87       	std	Y+13, r23	; 0x0d
    7184:	6c 87       	std	Y+12, r22	; 0x0c
    7186:	8c a1       	ldd	r24, Y+36	; 0x24
    7188:	9d a1       	ldd	r25, Y+37	; 0x25
    718a:	fc 01       	movw	r30, r24
    718c:	20 81       	ld	r18, Z
    718e:	20 32       	cpi	r18, 0x20	; 32
    7190:	21 f4       	brne	.+8      	; 0x719a <setdate_r+0xbe>
    7192:	01 96       	adiw	r24, 0x01	; 1
    7194:	9d a3       	std	Y+37, r25	; 0x25
    7196:	8c a3       	std	Y+36, r24	; 0x24
    7198:	f6 cf       	rjmp	.-20     	; 0x7186 <setdate_r+0xaa>
    719a:	4a e0       	ldi	r20, 0x0A	; 10
    719c:	50 e0       	ldi	r21, 0x00	; 0
    719e:	be 01       	movw	r22, r28
    71a0:	6c 5d       	subi	r22, 0xDC	; 220
    71a2:	7f 4f       	sbci	r23, 0xFF	; 255
    71a4:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <strtol>
    71a8:	7b 87       	std	Y+11, r23	; 0x0b
    71aa:	6a 87       	std	Y+10, r22	; 0x0a
    71ac:	ec a1       	ldd	r30, Y+36	; 0x24
    71ae:	fd a1       	ldd	r31, Y+37	; 0x25
    71b0:	80 81       	ld	r24, Z
    71b2:	88 23       	and	r24, r24
    71b4:	39 f0       	breq	.+14     	; 0x71c4 <setdate_r+0xe8>
    71b6:	80 32       	cpi	r24, 0x20	; 32
    71b8:	11 f0       	breq	.+4      	; 0x71be <setdate_r+0xe2>
    71ba:	8a 33       	cpi	r24, 0x3A	; 58
    71bc:	19 f4       	brne	.+6      	; 0x71c4 <setdate_r+0xe8>
    71be:	31 96       	adiw	r30, 0x01	; 1
    71c0:	fd a3       	std	Y+37, r31	; 0x25
    71c2:	ec a3       	std	Y+36, r30	; 0x24
    71c4:	4a e0       	ldi	r20, 0x0A	; 10
    71c6:	50 e0       	ldi	r21, 0x00	; 0
    71c8:	be 01       	movw	r22, r28
    71ca:	6c 5d       	subi	r22, 0xDC	; 220
    71cc:	7f 4f       	sbci	r23, 0xFF	; 255
    71ce:	8c a1       	ldd	r24, Y+36	; 0x24
    71d0:	9d a1       	ldd	r25, Y+37	; 0x25
    71d2:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <strtol>
    71d6:	79 87       	std	Y+9, r23	; 0x09
    71d8:	68 87       	std	Y+8, r22	; 0x08
    71da:	ec a1       	ldd	r30, Y+36	; 0x24
    71dc:	fd a1       	ldd	r31, Y+37	; 0x25
    71de:	80 81       	ld	r24, Z
    71e0:	88 23       	and	r24, r24
    71e2:	39 f0       	breq	.+14     	; 0x71f2 <setdate_r+0x116>
    71e4:	80 32       	cpi	r24, 0x20	; 32
    71e6:	11 f0       	breq	.+4      	; 0x71ec <setdate_r+0x110>
    71e8:	8a 33       	cpi	r24, 0x3A	; 58
    71ea:	19 f4       	brne	.+6      	; 0x71f2 <setdate_r+0x116>
    71ec:	31 96       	adiw	r30, 0x01	; 1
    71ee:	fd a3       	std	Y+37, r31	; 0x25
    71f0:	ec a3       	std	Y+36, r30	; 0x24
    71f2:	4a e0       	ldi	r20, 0x0A	; 10
    71f4:	50 e0       	ldi	r21, 0x00	; 0
    71f6:	be 01       	movw	r22, r28
    71f8:	6c 5d       	subi	r22, 0xDC	; 220
    71fa:	7f 4f       	sbci	r23, 0xFF	; 255
    71fc:	8c a1       	ldd	r24, Y+36	; 0x24
    71fe:	9d a1       	ldd	r25, Y+37	; 0x25
    7200:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <strtol>
    7204:	7f 83       	std	Y+7, r23	; 0x07
    7206:	6e 83       	std	Y+6, r22	; 0x06
    7208:	2e 85       	ldd	r18, Y+14	; 0x0e
    720a:	3f 85       	ldd	r19, Y+15	; 0x0f
    720c:	21 50       	subi	r18, 0x01	; 1
    720e:	31 09       	sbc	r19, r1
    7210:	3f 87       	std	Y+15, r19	; 0x0f
    7212:	2e 87       	std	Y+14, r18	; 0x0e
    7214:	88 89       	ldd	r24, Y+16	; 0x10
    7216:	99 89       	ldd	r25, Y+17	; 0x11
    7218:	ac 01       	movw	r20, r24
    721a:	42 5b       	subi	r20, 0xB2	; 178
    721c:	57 40       	sbci	r21, 0x07	; 7
    721e:	45 34       	cpi	r20, 0x45	; 69
    7220:	51 05       	cpc	r21, r1
    7222:	38 f0       	brcs	.+14     	; 0x7232 <setdate_r+0x156>
    7224:	ed b7       	in	r30, 0x3d	; 61
    7226:	fe b7       	in	r31, 0x3e	; 62
    7228:	95 83       	std	Z+5, r25	; 0x05
    722a:	84 83       	std	Z+4, r24	; 0x04
    722c:	89 e1       	ldi	r24, 0x19	; 25
    722e:	97 e0       	ldi	r25, 0x07	; 7
    7230:	34 c0       	rjmp	.+104    	; 0x729a <setdate_r+0x1be>
    7232:	8c 56       	subi	r24, 0x6C	; 108
    7234:	97 40       	sbci	r25, 0x07	; 7
    7236:	99 8b       	std	Y+17, r25	; 0x11
    7238:	88 8b       	std	Y+16, r24	; 0x10
    723a:	2c 30       	cpi	r18, 0x0C	; 12
    723c:	31 05       	cpc	r19, r1
    723e:	38 f0       	brcs	.+14     	; 0x724e <setdate_r+0x172>
    7240:	ed b7       	in	r30, 0x3d	; 61
    7242:	fe b7       	in	r31, 0x3e	; 62
    7244:	95 83       	std	Z+5, r25	; 0x05
    7246:	84 83       	std	Z+4, r24	; 0x04
    7248:	88 e0       	ldi	r24, 0x08	; 8
    724a:	97 e0       	ldi	r25, 0x07	; 7
    724c:	26 c0       	rjmp	.+76     	; 0x729a <setdate_r+0x1be>
    724e:	8c 85       	ldd	r24, Y+12	; 0x0c
    7250:	9d 85       	ldd	r25, Y+13	; 0x0d
    7252:	9c 01       	movw	r18, r24
    7254:	21 50       	subi	r18, 0x01	; 1
    7256:	31 09       	sbc	r19, r1
    7258:	2f 31       	cpi	r18, 0x1F	; 31
    725a:	31 05       	cpc	r19, r1
    725c:	38 f0       	brcs	.+14     	; 0x726c <setdate_r+0x190>
    725e:	ed b7       	in	r30, 0x3d	; 61
    7260:	fe b7       	in	r31, 0x3e	; 62
    7262:	95 83       	std	Z+5, r25	; 0x05
    7264:	84 83       	std	Z+4, r24	; 0x04
    7266:	87 ef       	ldi	r24, 0xF7	; 247
    7268:	96 e0       	ldi	r25, 0x06	; 6
    726a:	17 c0       	rjmp	.+46     	; 0x729a <setdate_r+0x1be>
    726c:	8a 85       	ldd	r24, Y+10	; 0x0a
    726e:	9b 85       	ldd	r25, Y+11	; 0x0b
    7270:	88 31       	cpi	r24, 0x18	; 24
    7272:	91 05       	cpc	r25, r1
    7274:	38 f0       	brcs	.+14     	; 0x7284 <setdate_r+0x1a8>
    7276:	ed b7       	in	r30, 0x3d	; 61
    7278:	fe b7       	in	r31, 0x3e	; 62
    727a:	95 83       	std	Z+5, r25	; 0x05
    727c:	84 83       	std	Z+4, r24	; 0x04
    727e:	85 ee       	ldi	r24, 0xE5	; 229
    7280:	96 e0       	ldi	r25, 0x06	; 6
    7282:	0b c0       	rjmp	.+22     	; 0x729a <setdate_r+0x1be>
    7284:	88 85       	ldd	r24, Y+8	; 0x08
    7286:	99 85       	ldd	r25, Y+9	; 0x09
    7288:	8c 33       	cpi	r24, 0x3C	; 60
    728a:	91 05       	cpc	r25, r1
    728c:	68 f0       	brcs	.+26     	; 0x72a8 <setdate_r+0x1cc>
    728e:	ed b7       	in	r30, 0x3d	; 61
    7290:	fe b7       	in	r31, 0x3e	; 62
    7292:	95 83       	std	Z+5, r25	; 0x05
    7294:	84 83       	std	Z+4, r24	; 0x04
    7296:	84 ed       	ldi	r24, 0xD4	; 212
    7298:	96 e0       	ldi	r25, 0x06	; 6
    729a:	a0 e0       	ldi	r26, 0x00	; 0
    729c:	81 83       	std	Z+1, r24	; 0x01
    729e:	92 83       	std	Z+2, r25	; 0x02
    72a0:	a3 83       	std	Z+3, r26	; 0x03
    72a2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    72a6:	25 c0       	rjmp	.+74     	; 0x72f2 <setdate_r+0x216>
    72a8:	ce 01       	movw	r24, r28
    72aa:	06 96       	adiw	r24, 0x06	; 6
    72ac:	13 df       	rcall	.-474    	; 0x70d4 <timegm>
    72ae:	6b 01       	movw	r12, r22
    72b0:	7c 01       	movw	r14, r24
    72b2:	6c 8f       	std	Y+28, r22	; 0x1c
    72b4:	7d 8f       	std	Y+29, r23	; 0x1d
    72b6:	8e 8f       	std	Y+30, r24	; 0x1e
    72b8:	9f 8f       	std	Y+31, r25	; 0x1f
    72ba:	18 a2       	std	Y+32, r1	; 0x20
    72bc:	19 a2       	std	Y+33, r1	; 0x21
    72be:	1a a2       	std	Y+34, r1	; 0x22
    72c0:	1b a2       	std	Y+35, r1	; 0x23
    72c2:	be 01       	movw	r22, r28
    72c4:	64 5e       	subi	r22, 0xE4	; 228
    72c6:	7f 4f       	sbci	r23, 0xFF	; 255
    72c8:	80 e0       	ldi	r24, 0x00	; 0
    72ca:	90 e0       	ldi	r25, 0x00	; 0
    72cc:	03 db       	rcall	.-2554   	; 0x68d4 <clock_settime>
    72ce:	b7 01       	movw	r22, r14
    72d0:	a6 01       	movw	r20, r12
    72d2:	81 e0       	ldi	r24, 0x01	; 1
    72d4:	90 e0       	ldi	r25, 0x00	; 0
    72d6:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <rtc_init>
    72da:	81 11       	cpse	r24, r1
    72dc:	0d c0       	rjmp	.+26     	; 0x72f8 <setdate_r+0x21c>
    72de:	8d eb       	ldi	r24, 0xBD	; 189
    72e0:	96 e0       	ldi	r25, 0x06	; 6
    72e2:	a0 e0       	ldi	r26, 0x00	; 0
    72e4:	ed b7       	in	r30, 0x3d	; 61
    72e6:	fe b7       	in	r31, 0x3e	; 62
    72e8:	81 83       	std	Z+1, r24	; 0x01
    72ea:	92 83       	std	Z+2, r25	; 0x02
    72ec:	a3 83       	std	Z+3, r26	; 0x03
    72ee:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    72f2:	8f ef       	ldi	r24, 0xFF	; 255
    72f4:	9f ef       	ldi	r25, 0xFF	; 255
    72f6:	02 c0       	rjmp	.+4      	; 0x72fc <setdate_r+0x220>
    72f8:	80 e0       	ldi	r24, 0x00	; 0
    72fa:	90 e0       	ldi	r25, 0x00	; 0
    72fc:	a5 96       	adiw	r28, 0x25	; 37
    72fe:	0f b6       	in	r0, 0x3f	; 63
    7300:	f8 94       	cli
    7302:	de bf       	out	0x3e, r29	; 62
    7304:	0f be       	out	0x3f, r0	; 63
    7306:	cd bf       	out	0x3d, r28	; 61
    7308:	df 91       	pop	r29
    730a:	cf 91       	pop	r28
    730c:	ff 90       	pop	r15
    730e:	ef 90       	pop	r14
    7310:	df 90       	pop	r13
    7312:	cf 90       	pop	r12
    7314:	08 95       	ret

00007316 <setdate>:
    7316:	ab e2       	ldi	r26, 0x2B	; 43
    7318:	b0 e0       	ldi	r27, 0x00	; 0
    731a:	e1 e9       	ldi	r30, 0x91	; 145
    731c:	f9 e3       	ldi	r31, 0x39	; 57
    731e:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
    7322:	8b e2       	ldi	r24, 0x2B	; 43
    7324:	97 e0       	ldi	r25, 0x07	; 7
    7326:	a0 e0       	ldi	r26, 0x00	; 0
    7328:	ed b7       	in	r30, 0x3d	; 61
    732a:	fe b7       	in	r31, 0x3e	; 62
    732c:	81 83       	std	Z+1, r24	; 0x01
    732e:	92 83       	std	Z+2, r25	; 0x02
    7330:	a3 83       	std	Z+3, r26	; 0x03
    7332:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    7336:	40 91 bc 1c 	lds	r20, 0x1CBC	; 0x801cbc <__iob>
    733a:	50 91 bd 1c 	lds	r21, 0x1CBD	; 0x801cbd <__iob+0x1>
    733e:	66 e2       	ldi	r22, 0x26	; 38
    7340:	70 e0       	ldi	r23, 0x00	; 0
    7342:	ce 01       	movw	r24, r28
    7344:	04 96       	adiw	r24, 0x04	; 4
    7346:	0e 94 43 75 	call	0xea86	; 0xea86 <fgets>
    734a:	ce 01       	movw	r24, r28
    734c:	04 96       	adiw	r24, 0x04	; 4
    734e:	c6 de       	rcall	.-628    	; 0x70dc <setdate_r>
    7350:	ab 96       	adiw	r28, 0x2b	; 43
    7352:	e2 e0       	ldi	r30, 0x02	; 2
    7354:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00007358 <find_dst>:
    7358:	a8 e2       	ldi	r26, 0x28	; 40
    735a:	b0 e0       	ldi	r27, 0x00	; 0
    735c:	e2 eb       	ldi	r30, 0xB2	; 178
    735e:	f9 e3       	ldi	r31, 0x39	; 57
    7360:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
    7364:	3c 01       	movw	r6, r24
    7366:	1a 01       	movw	r2, r20
    7368:	2b 01       	movw	r4, r22
    736a:	49 01       	movw	r8, r18
    736c:	1c a3       	std	Y+36, r17	; 0x24
    736e:	0b a3       	std	Y+35, r16	; 0x23
    7370:	de a2       	std	Y+38, r13	; 0x26
    7372:	cd a2       	std	Y+37, r12	; 0x25
    7374:	b8 a6       	std	Y+40, r11	; 0x28
    7376:	af a2       	std	Y+39, r10	; 0x27
    7378:	be 01       	movw	r22, r28
    737a:	61 5e       	subi	r22, 0xE1	; 225
    737c:	7f 4f       	sbci	r23, 0xFF	; 255
    737e:	ce 01       	movw	r24, r28
    7380:	47 96       	adiw	r24, 0x17	; 23
    7382:	15 dc       	rcall	.-2006   	; 0x6bae <gettimeofday>
    7384:	af 8d       	ldd	r26, Y+31	; 0x1f
    7386:	b8 a1       	ldd	r27, Y+32	; 0x20
    7388:	2c e3       	ldi	r18, 0x3C	; 60
    738a:	30 e0       	ldi	r19, 0x00	; 0
    738c:	0e 94 18 e3 	call	0x1c630	; 0x1c630 <__usmulhisi3>
    7390:	5b 01       	movw	r10, r22
    7392:	6c 01       	movw	r12, r24
    7394:	61 14       	cp	r6, r1
    7396:	71 04       	cpc	r7, r1
    7398:	31 f0       	breq	.+12     	; 0x73a6 <find_dst+0x4e>
    739a:	20 e1       	ldi	r18, 0x10	; 16
    739c:	a2 1a       	sub	r10, r18
    739e:	2e e0       	ldi	r18, 0x0E	; 14
    73a0:	b2 0a       	sbc	r11, r18
    73a2:	c1 08       	sbc	r12, r1
    73a4:	d1 08       	sbc	r13, r1
    73a6:	81 14       	cp	r8, r1
    73a8:	91 04       	cpc	r9, r1
    73aa:	39 f0       	breq	.+14     	; 0x73ba <find_dst+0x62>
    73ac:	4c e6       	ldi	r20, 0x6C	; 108
    73ae:	84 1a       	sub	r8, r20
    73b0:	47 e0       	ldi	r20, 0x07	; 7
    73b2:	94 0a       	sbc	r9, r20
    73b4:	9c 86       	std	Y+12, r9	; 0x0c
    73b6:	8b 86       	std	Y+11, r8	; 0x0b
    73b8:	11 c0       	rjmp	.+34     	; 0x73dc <find_dst+0x84>
    73ba:	21 14       	cp	r2, r1
    73bc:	31 04       	cpc	r3, r1
    73be:	41 04       	cpc	r4, r1
    73c0:	51 04       	cpc	r5, r1
    73c2:	21 f4       	brne	.+8      	; 0x73cc <find_dst+0x74>
    73c4:	2f 88       	ldd	r2, Y+23	; 0x17
    73c6:	38 8c       	ldd	r3, Y+24	; 0x18
    73c8:	49 8c       	ldd	r4, Y+25	; 0x19
    73ca:	5a 8c       	ldd	r5, Y+26	; 0x1a
    73cc:	8e 01       	movw	r16, r28
    73ce:	0f 5f       	subi	r16, 0xFF	; 255
    73d0:	1f 4f       	sbci	r17, 0xFF	; 255
    73d2:	a6 01       	movw	r20, r12
    73d4:	95 01       	movw	r18, r10
    73d6:	c2 01       	movw	r24, r4
    73d8:	b1 01       	movw	r22, r2
    73da:	ca da       	rcall	.-2668   	; 0x6970 <time_to_tm>
    73dc:	8b a1       	ldd	r24, Y+35	; 0x23
    73de:	9c a1       	ldd	r25, Y+36	; 0x24
    73e0:	01 97       	sbiw	r24, 0x01	; 1
    73e2:	9a 87       	std	Y+10, r25	; 0x0a
    73e4:	89 87       	std	Y+9, r24	; 0x09
    73e6:	81 e0       	ldi	r24, 0x01	; 1
    73e8:	90 e0       	ldi	r25, 0x00	; 0
    73ea:	98 87       	std	Y+8, r25	; 0x08
    73ec:	8f 83       	std	Y+7, r24	; 0x07
    73ee:	8f a1       	ldd	r24, Y+39	; 0x27
    73f0:	98 a5       	ldd	r25, Y+40	; 0x28
    73f2:	9e 83       	std	Y+6, r25	; 0x06
    73f4:	8d 83       	std	Y+5, r24	; 0x05
    73f6:	1c 82       	std	Y+4, r1	; 0x04
    73f8:	1b 82       	std	Y+3, r1	; 0x03
    73fa:	1a 82       	std	Y+2, r1	; 0x02
    73fc:	19 82       	std	Y+1, r1	; 0x01
    73fe:	ce 01       	movw	r24, r28
    7400:	01 96       	adiw	r24, 0x01	; 1
    7402:	68 de       	rcall	.-816    	; 0x70d4 <timegm>
    7404:	45 01       	movw	r8, r10
    7406:	56 01       	movw	r10, r12
    7408:	86 0e       	add	r8, r22
    740a:	97 1e       	adc	r9, r23
    740c:	a8 1e       	adc	r10, r24
    740e:	b9 1e       	adc	r11, r25
    7410:	8e 01       	movw	r16, r28
    7412:	0f 5f       	subi	r16, 0xFF	; 255
    7414:	1f 4f       	sbci	r17, 0xFF	; 255
    7416:	20 e0       	ldi	r18, 0x00	; 0
    7418:	30 e0       	ldi	r19, 0x00	; 0
    741a:	a9 01       	movw	r20, r18
    741c:	c5 01       	movw	r24, r10
    741e:	b4 01       	movw	r22, r8
    7420:	a7 da       	rcall	.-2738   	; 0x6970 <time_to_tm>
    7422:	2d 85       	ldd	r18, Y+13	; 0x0d
    7424:	3e 85       	ldd	r19, Y+14	; 0x0e
    7426:	e7 e0       	ldi	r30, 0x07	; 7
    7428:	f0 e0       	ldi	r31, 0x00	; 0
    742a:	c9 01       	movw	r24, r18
    742c:	bf 01       	movw	r22, r30
    742e:	0e 94 be e2 	call	0x1c57c	; 0x1c57c <__divmodhi4>
    7432:	4d a1       	ldd	r20, Y+37	; 0x25
    7434:	5e a1       	ldd	r21, Y+38	; 0x26
    7436:	48 17       	cp	r20, r24
    7438:	59 07       	cpc	r21, r25
    743a:	21 f4       	brne	.+8      	; 0x7444 <find_dst+0xec>
    743c:	51 e0       	ldi	r21, 0x01	; 1
    743e:	e5 1a       	sub	r14, r21
    7440:	f1 08       	sbc	r15, r1
    7442:	51 f0       	breq	.+20     	; 0x7458 <find_dst+0x100>
    7444:	80 e8       	ldi	r24, 0x80	; 128
    7446:	88 0e       	add	r8, r24
    7448:	81 e5       	ldi	r24, 0x51	; 81
    744a:	98 1e       	adc	r9, r24
    744c:	81 e0       	ldi	r24, 0x01	; 1
    744e:	a8 1e       	adc	r10, r24
    7450:	b1 1c       	adc	r11, r1
    7452:	2f 5f       	subi	r18, 0xFF	; 255
    7454:	3f 4f       	sbci	r19, 0xFF	; 255
    7456:	e9 cf       	rjmp	.-46     	; 0x742a <find_dst+0xd2>
    7458:	c5 01       	movw	r24, r10
    745a:	b4 01       	movw	r22, r8
    745c:	a8 96       	adiw	r28, 0x28	; 40
    745e:	e2 e1       	ldi	r30, 0x12	; 18
    7460:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

00007464 <set_dst>:
    7464:	4f 92       	push	r4
    7466:	5f 92       	push	r5
    7468:	6f 92       	push	r6
    746a:	7f 92       	push	r7
    746c:	af 92       	push	r10
    746e:	bf 92       	push	r11
    7470:	cf 92       	push	r12
    7472:	df 92       	push	r13
    7474:	ef 92       	push	r14
    7476:	ff 92       	push	r15
    7478:	0f 93       	push	r16
    747a:	1f 93       	push	r17
    747c:	cf 93       	push	r28
    747e:	df 93       	push	r29
    7480:	cd b7       	in	r28, 0x3d	; 61
    7482:	de b7       	in	r29, 0x3e	; 62
    7484:	2c 97       	sbiw	r28, 0x0c	; 12
    7486:	0f b6       	in	r0, 0x3f	; 63
    7488:	f8 94       	cli
    748a:	de bf       	out	0x3e, r29	; 62
    748c:	0f be       	out	0x3f, r0	; 63
    748e:	cd bf       	out	0x3d, r28	; 61
    7490:	2b 01       	movw	r4, r22
    7492:	3c 01       	movw	r6, r24
    7494:	67 2b       	or	r22, r23
    7496:	68 2b       	or	r22, r24
    7498:	69 2b       	or	r22, r25
    749a:	51 f4       	brne	.+20     	; 0x74b0 <set_dst+0x4c>
    749c:	be 01       	movw	r22, r28
    749e:	67 5f       	subi	r22, 0xF7	; 247
    74a0:	7f 4f       	sbci	r23, 0xFF	; 255
    74a2:	ce 01       	movw	r24, r28
    74a4:	01 96       	adiw	r24, 0x01	; 1
    74a6:	83 db       	rcall	.-2298   	; 0x6bae <gettimeofday>
    74a8:	49 80       	ldd	r4, Y+1	; 0x01
    74aa:	5a 80       	ldd	r5, Y+2	; 0x02
    74ac:	6b 80       	ldd	r6, Y+3	; 0x03
    74ae:	7c 80       	ldd	r7, Y+4	; 0x04
    74b0:	80 91 79 1a 	lds	r24, 0x1A79	; 0x801a79 <dst+0x8>
    74b4:	90 91 7a 1a 	lds	r25, 0x1A7A	; 0x801a7a <dst+0x9>
    74b8:	a0 91 7b 1a 	lds	r26, 0x1A7B	; 0x801a7b <dst+0xa>
    74bc:	b0 91 7c 1a 	lds	r27, 0x1A7C	; 0x801a7c <dst+0xb>
    74c0:	84 15       	cp	r24, r4
    74c2:	95 05       	cpc	r25, r5
    74c4:	a6 05       	cpc	r26, r6
    74c6:	b7 05       	cpc	r27, r7
    74c8:	50 f0       	brcs	.+20     	; 0x74de <set_dst+0x7a>
    74ca:	84 19       	sub	r24, r4
    74cc:	95 09       	sbc	r25, r5
    74ce:	a6 09       	sbc	r26, r6
    74d0:	b7 09       	sbc	r27, r7
    74d2:	80 38       	cpi	r24, 0x80	; 128
    74d4:	91 45       	sbci	r25, 0x51	; 81
    74d6:	a1 40       	sbci	r26, 0x01	; 1
    74d8:	b1 05       	cpc	r27, r1
    74da:	70 f4       	brcc	.+28     	; 0x74f8 <set_dst+0x94>
    74dc:	42 c0       	rjmp	.+132    	; 0x7562 <set_dst+0xfe>
    74de:	a3 01       	movw	r20, r6
    74e0:	92 01       	movw	r18, r4
    74e2:	28 1b       	sub	r18, r24
    74e4:	39 0b       	sbc	r19, r25
    74e6:	4a 0b       	sbc	r20, r26
    74e8:	5b 0b       	sbc	r21, r27
    74ea:	da 01       	movw	r26, r20
    74ec:	c9 01       	movw	r24, r18
    74ee:	80 38       	cpi	r24, 0x80	; 128
    74f0:	91 45       	sbci	r25, 0x51	; 81
    74f2:	a1 40       	sbci	r26, 0x01	; 1
    74f4:	b1 05       	cpc	r27, r1
    74f6:	a8 f1       	brcs	.+106    	; 0x7562 <set_dst+0xfe>
    74f8:	40 92 79 1a 	sts	0x1A79, r4	; 0x801a79 <dst+0x8>
    74fc:	50 92 7a 1a 	sts	0x1A7A, r5	; 0x801a7a <dst+0x9>
    7500:	60 92 7b 1a 	sts	0x1A7B, r6	; 0x801a7b <dst+0xa>
    7504:	70 92 7c 1a 	sts	0x1A7C, r7	; 0x801a7c <dst+0xb>
    7508:	82 e0       	ldi	r24, 0x02	; 2
    750a:	a8 2e       	mov	r10, r24
    750c:	b1 2c       	mov	r11, r1
    750e:	c1 2c       	mov	r12, r1
    7510:	d1 2c       	mov	r13, r1
    7512:	92 e0       	ldi	r25, 0x02	; 2
    7514:	e9 2e       	mov	r14, r25
    7516:	f1 2c       	mov	r15, r1
    7518:	03 e0       	ldi	r16, 0x03	; 3
    751a:	10 e0       	ldi	r17, 0x00	; 0
    751c:	20 e0       	ldi	r18, 0x00	; 0
    751e:	30 e0       	ldi	r19, 0x00	; 0
    7520:	b3 01       	movw	r22, r6
    7522:	a2 01       	movw	r20, r4
    7524:	80 e0       	ldi	r24, 0x00	; 0
    7526:	90 e0       	ldi	r25, 0x00	; 0
    7528:	17 df       	rcall	.-466    	; 0x7358 <find_dst>
    752a:	60 93 71 1a 	sts	0x1A71, r22	; 0x801a71 <dst>
    752e:	70 93 72 1a 	sts	0x1A72, r23	; 0x801a72 <dst+0x1>
    7532:	80 93 73 1a 	sts	0x1A73, r24	; 0x801a73 <dst+0x2>
    7536:	90 93 74 1a 	sts	0x1A74, r25	; 0x801a74 <dst+0x3>
    753a:	ee 24       	eor	r14, r14
    753c:	e3 94       	inc	r14
    753e:	f1 2c       	mov	r15, r1
    7540:	0b e0       	ldi	r16, 0x0B	; 11
    7542:	10 e0       	ldi	r17, 0x00	; 0
    7544:	20 e0       	ldi	r18, 0x00	; 0
    7546:	30 e0       	ldi	r19, 0x00	; 0
    7548:	b3 01       	movw	r22, r6
    754a:	a2 01       	movw	r20, r4
    754c:	81 e0       	ldi	r24, 0x01	; 1
    754e:	90 e0       	ldi	r25, 0x00	; 0
    7550:	03 df       	rcall	.-506    	; 0x7358 <find_dst>
    7552:	60 93 75 1a 	sts	0x1A75, r22	; 0x801a75 <dst+0x4>
    7556:	70 93 76 1a 	sts	0x1A76, r23	; 0x801a76 <dst+0x5>
    755a:	80 93 77 1a 	sts	0x1A77, r24	; 0x801a77 <dst+0x6>
    755e:	90 93 78 1a 	sts	0x1A78, r25	; 0x801a78 <dst+0x7>
    7562:	2c 96       	adiw	r28, 0x0c	; 12
    7564:	0f b6       	in	r0, 0x3f	; 63
    7566:	f8 94       	cli
    7568:	de bf       	out	0x3e, r29	; 62
    756a:	0f be       	out	0x3f, r0	; 63
    756c:	cd bf       	out	0x3d, r28	; 61
    756e:	df 91       	pop	r29
    7570:	cf 91       	pop	r28
    7572:	1f 91       	pop	r17
    7574:	0f 91       	pop	r16
    7576:	ff 90       	pop	r15
    7578:	ef 90       	pop	r14
    757a:	df 90       	pop	r13
    757c:	cf 90       	pop	r12
    757e:	bf 90       	pop	r11
    7580:	af 90       	pop	r10
    7582:	7f 90       	pop	r7
    7584:	6f 90       	pop	r6
    7586:	5f 90       	pop	r5
    7588:	4f 90       	pop	r4
    758a:	08 95       	ret

0000758c <asctime_r>:
    758c:	a5 e1       	ldi	r26, 0x15	; 21
    758e:	b0 e0       	ldi	r27, 0x00	; 0
    7590:	ec ec       	ldi	r30, 0xCC	; 204
    7592:	fa e3       	ldi	r31, 0x3A	; 58
    7594:	0c 94 4c e3 	jmp	0x1c698	; 0x1c698 <__prologue_saves__+0x1c>
    7598:	ec 01       	movw	r28, r24
    759a:	8b 01       	movw	r16, r22
    759c:	60 e0       	ldi	r22, 0x00	; 0
    759e:	70 e0       	ldi	r23, 0x00	; 0
    75a0:	d1 db       	rcall	.-2142   	; 0x6d44 <normalize>
    75a2:	80 e2       	ldi	r24, 0x20	; 32
    75a4:	f8 01       	movw	r30, r16
    75a6:	11 92       	st	Z+, r1
    75a8:	8a 95       	dec	r24
    75aa:	e9 f7       	brne	.-6      	; 0x75a6 <asctime_r+0x1a>
    75ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    75ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    75b0:	84 59       	subi	r24, 0x94	; 148
    75b2:	98 4f       	sbci	r25, 0xF8	; 248
    75b4:	ed b7       	in	r30, 0x3d	; 61
    75b6:	fe b7       	in	r31, 0x3e	; 62
    75b8:	95 8b       	std	Z+21, r25	; 0x15
    75ba:	84 8b       	std	Z+20, r24	; 0x14
    75bc:	88 81       	ld	r24, Y
    75be:	99 81       	ldd	r25, Y+1	; 0x01
    75c0:	93 8b       	std	Z+19, r25	; 0x13
    75c2:	82 8b       	std	Z+18, r24	; 0x12
    75c4:	8a 81       	ldd	r24, Y+2	; 0x02
    75c6:	9b 81       	ldd	r25, Y+3	; 0x03
    75c8:	91 8b       	std	Z+17, r25	; 0x11
    75ca:	80 8b       	std	Z+16, r24	; 0x10
    75cc:	8c 81       	ldd	r24, Y+4	; 0x04
    75ce:	9d 81       	ldd	r25, Y+5	; 0x05
    75d0:	97 87       	std	Z+15, r25	; 0x0f
    75d2:	86 87       	std	Z+14, r24	; 0x0e
    75d4:	8e 81       	ldd	r24, Y+6	; 0x06
    75d6:	9f 81       	ldd	r25, Y+7	; 0x07
    75d8:	95 87       	std	Z+13, r25	; 0x0d
    75da:	84 87       	std	Z+12, r24	; 0x0c
    75dc:	e8 85       	ldd	r30, Y+8	; 0x08
    75de:	f9 85       	ldd	r31, Y+9	; 0x09
    75e0:	ee 0f       	add	r30, r30
    75e2:	ff 1f       	adc	r31, r31
    75e4:	e5 5f       	subi	r30, 0xF5	; 245
    75e6:	fe 4f       	sbci	r31, 0xFE	; 254
    75e8:	80 81       	ld	r24, Z
    75ea:	91 81       	ldd	r25, Z+1	; 0x01
    75ec:	ed b7       	in	r30, 0x3d	; 61
    75ee:	fe b7       	in	r31, 0x3e	; 62
    75f0:	93 87       	std	Z+11, r25	; 0x0b
    75f2:	82 87       	std	Z+10, r24	; 0x0a
    75f4:	ec 85       	ldd	r30, Y+12	; 0x0c
    75f6:	fd 85       	ldd	r31, Y+13	; 0x0d
    75f8:	ee 0f       	add	r30, r30
    75fa:	ff 1f       	adc	r31, r31
    75fc:	eb 5d       	subi	r30, 0xDB	; 219
    75fe:	fe 4f       	sbci	r31, 0xFE	; 254
    7600:	80 81       	ld	r24, Z
    7602:	91 81       	ldd	r25, Z+1	; 0x01
    7604:	ed b7       	in	r30, 0x3d	; 61
    7606:	fe b7       	in	r31, 0x3e	; 62
    7608:	91 87       	std	Z+9, r25	; 0x09
    760a:	80 87       	std	Z+8, r24	; 0x08
    760c:	8c e4       	ldi	r24, 0x4C	; 76
    760e:	97 e0       	ldi	r25, 0x07	; 7
    7610:	a0 e0       	ldi	r26, 0x00	; 0
    7612:	85 83       	std	Z+5, r24	; 0x05
    7614:	96 83       	std	Z+6, r25	; 0x06
    7616:	a7 83       	std	Z+7, r26	; 0x07
    7618:	80 e2       	ldi	r24, 0x20	; 32
    761a:	90 e0       	ldi	r25, 0x00	; 0
    761c:	94 83       	std	Z+4, r25	; 0x04
    761e:	83 83       	std	Z+3, r24	; 0x03
    7620:	12 83       	std	Z+2, r17	; 0x02
    7622:	01 83       	std	Z+1, r16	; 0x01
    7624:	0e 94 db 44 	call	0x89b6	; 0x89b6 <snprintf_P>
    7628:	c8 01       	movw	r24, r16
    762a:	cd b7       	in	r28, 0x3d	; 61
    762c:	de b7       	in	r29, 0x3e	; 62
    762e:	65 96       	adiw	r28, 0x15	; 21
    7630:	e4 e0       	ldi	r30, 0x04	; 4
    7632:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

00007636 <asctime>:
    7636:	6c ef       	ldi	r22, 0xFC	; 252
    7638:	77 e1       	ldi	r23, 0x17	; 23
    763a:	a8 cf       	rjmp	.-176    	; 0x758c <asctime_r>
    763c:	08 95       	ret

0000763e <ctime_gm>:
    763e:	a6 e1       	ldi	r26, 0x16	; 22
    7640:	b0 e0       	ldi	r27, 0x00	; 0
    7642:	e5 e2       	ldi	r30, 0x25	; 37
    7644:	fb e3       	ldi	r31, 0x3B	; 59
    7646:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
    764a:	be 01       	movw	r22, r28
    764c:	6f 5f       	subi	r22, 0xFF	; 255
    764e:	7f 4f       	sbci	r23, 0xFF	; 255
    7650:	6d da       	rcall	.-2854   	; 0x6b2c <gmtime_r>
    7652:	6c ed       	ldi	r22, 0xDC	; 220
    7654:	77 e1       	ldi	r23, 0x17	; 23
    7656:	9a df       	rcall	.-204    	; 0x758c <asctime_r>
    7658:	66 96       	adiw	r28, 0x16	; 22
    765a:	e2 e0       	ldi	r30, 0x02	; 2
    765c:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00007660 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7660:	a5 e2       	ldi	r26, 0x25	; 37
    7662:	b0 e0       	ldi	r27, 0x00	; 0
    7664:	e6 e3       	ldi	r30, 0x36	; 54
    7666:	fb e3       	ldi	r31, 0x3B	; 59
    7668:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
    766c:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    766e:	40 e0       	ldi	r20, 0x00	; 0
    7670:	50 e0       	ldi	r21, 0x00	; 0
    7672:	ba 01       	movw	r22, r20
    7674:	80 e0       	ldi	r24, 0x00	; 0
    7676:	90 e0       	ldi	r25, 0x00	; 0
    7678:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <rtc_init>
    767c:	81 11       	cpse	r24, r1
    767e:	27 c0       	rjmp	.+78     	; 0x76ce <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7680:	8b ea       	ldi	r24, 0xAB	; 171
    7682:	96 e0       	ldi	r25, 0x06	; 6
    7684:	a0 e0       	ldi	r26, 0x00	; 0
    7686:	ed b7       	in	r30, 0x3d	; 61
    7688:	fe b7       	in	r31, 0x3e	; 62
    768a:	81 83       	std	Z+1, r24	; 0x01
    768c:	92 83       	std	Z+2, r25	; 0x02
    768e:	a3 83       	std	Z+3, r26	; 0x03
    7690:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        printf("attempting rtc init\n");
    7694:	86 e9       	ldi	r24, 0x96	; 150
    7696:	96 e0       	ldi	r25, 0x06	; 6
    7698:	a0 e0       	ldi	r26, 0x00	; 0
    769a:	ed b7       	in	r30, 0x3d	; 61
    769c:	fe b7       	in	r31, 0x3e	; 62
    769e:	81 83       	std	Z+1, r24	; 0x01
    76a0:	92 83       	std	Z+2, r25	; 0x02
    76a2:	a3 83       	std	Z+3, r26	; 0x03
    76a4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    76a8:	40 e0       	ldi	r20, 0x00	; 0
    76aa:	50 e0       	ldi	r21, 0x00	; 0
    76ac:	ba 01       	movw	r22, r20
    76ae:	81 e0       	ldi	r24, 0x01	; 1
    76b0:	90 e0       	ldi	r25, 0x00	; 0
    76b2:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <rtc_init>
    76b6:	81 11       	cpse	r24, r1
    76b8:	0a c0       	rjmp	.+20     	; 0x76ce <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    76ba:	8f e7       	ldi	r24, 0x7F	; 127
    76bc:	96 e0       	ldi	r25, 0x06	; 6
    76be:	a0 e0       	ldi	r26, 0x00	; 0
    76c0:	ed b7       	in	r30, 0x3d	; 61
    76c2:	fe b7       	in	r31, 0x3e	; 62
    76c4:	81 83       	std	Z+1, r24	; 0x01
    76c6:	92 83       	std	Z+2, r25	; 0x02
    76c8:	a3 83       	std	Z+3, r26	; 0x03
    76ca:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        }
    }

    if(rtc_read(&tc))
    76ce:	ce 01       	movw	r24, r28
    76d0:	04 96       	adiw	r24, 0x04	; 4
    76d2:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <rtc_read>
    76d6:	88 23       	and	r24, r24
    76d8:	51 f0       	breq	.+20     	; 0x76ee <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    76da:	ce 01       	movw	r24, r28
    76dc:	04 96       	adiw	r24, 0x04	; 4
    76de:	fa dc       	rcall	.-1548   	; 0x70d4 <timegm>
    76e0:	6b 01       	movw	r12, r22
    76e2:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    76e4:	67 2b       	or	r22, r23
    76e6:	68 2b       	or	r22, r24
    76e8:	69 2b       	or	r22, r25
    76ea:	c1 f4       	brne	.+48     	; 0x771c <initialize_clock+0xbc>
    76ec:	0a c0       	rjmp	.+20     	; 0x7702 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    76ee:	85 e6       	ldi	r24, 0x65	; 101
    76f0:	96 e0       	ldi	r25, 0x06	; 6
    76f2:	a0 e0       	ldi	r26, 0x00	; 0
    76f4:	ed b7       	in	r30, 0x3d	; 61
    76f6:	fe b7       	in	r31, 0x3e	; 62
    76f8:	81 83       	std	Z+1, r24	; 0x01
    76fa:	92 83       	std	Z+2, r25	; 0x02
    76fc:	a3 83       	std	Z+3, r26	; 0x03
    76fe:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7702:	81 e4       	ldi	r24, 0x41	; 65
    7704:	96 e0       	ldi	r25, 0x06	; 6
    7706:	a0 e0       	ldi	r26, 0x00	; 0
    7708:	ed b7       	in	r30, 0x3d	; 61
    770a:	fe b7       	in	r31, 0x3e	; 62
    770c:	81 83       	std	Z+1, r24	; 0x01
    770e:	92 83       	std	Z+2, r25	; 0x02
    7710:	a3 83       	std	Z+3, r26	; 0x03
    7712:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    7716:	c1 2c       	mov	r12, r1
    7718:	d1 2c       	mov	r13, r1
    771a:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    771c:	1b a3       	std	Y+35, r17	; 0x23
    771e:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    7720:	1d a2       	std	Y+37, r1	; 0x25
    7722:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    7724:	ce 01       	movw	r24, r28
    7726:	82 96       	adiw	r24, 0x22	; 34
    7728:	30 da       	rcall	.-2976   	; 0x6b8a <settimezone>

    ts.tv_sec = seconds;
    772a:	ca 8e       	std	Y+26, r12	; 0x1a
    772c:	db 8e       	std	Y+27, r13	; 0x1b
    772e:	ec 8e       	std	Y+28, r14	; 0x1c
    7730:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    7732:	1e 8e       	std	Y+30, r1	; 0x1e
    7734:	1f 8e       	std	Y+31, r1	; 0x1f
    7736:	18 a2       	std	Y+32, r1	; 0x20
    7738:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    773a:	be 01       	movw	r22, r28
    773c:	66 5e       	subi	r22, 0xE6	; 230
    773e:	7f 4f       	sbci	r23, 0xFF	; 255
    7740:	80 e0       	ldi	r24, 0x00	; 0
    7742:	90 e0       	ldi	r25, 0x00	; 0
    7744:	c7 d8       	rcall	.-3698   	; 0x68d4 <clock_settime>
}
    7746:	a5 96       	adiw	r28, 0x25	; 37
    7748:	e8 e0       	ldi	r30, 0x08	; 8
    774a:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

0000774e <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    774e:	a9 e2       	ldi	r26, 0x29	; 41
    7750:	b0 e0       	ldi	r27, 0x00	; 0
    7752:	ed ea       	ldi	r30, 0xAD	; 173
    7754:	fb e3       	ldi	r31, 0x3B	; 59
    7756:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    775a:	ce 01       	movw	r24, r28
    775c:	08 96       	adiw	r24, 0x08	; 8
    775e:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <rtc_read>
    7762:	88 23       	and	r24, r24
    7764:	29 f1       	breq	.+74     	; 0x77b0 <display_clock+0x62>
    {
        seconds = timegm(&tc);
    7766:	ce 01       	movw	r24, r28
    7768:	08 96       	adiw	r24, 0x08	; 8
    776a:	b4 dc       	rcall	.-1688   	; 0x70d4 <timegm>
    776c:	6e a3       	std	Y+38, r22	; 0x26
    776e:	7f a3       	std	Y+39, r23	; 0x27
    7770:	88 a7       	std	Y+40, r24	; 0x28
    7772:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    7774:	ed b7       	in	r30, 0x3d	; 61
    7776:	fe b7       	in	r31, 0x3e	; 62
    7778:	64 83       	std	Z+4, r22	; 0x04
    777a:	75 83       	std	Z+5, r23	; 0x05
    777c:	86 83       	std	Z+6, r24	; 0x06
    777e:	97 83       	std	Z+7, r25	; 0x07
    7780:	8f e2       	ldi	r24, 0x2F	; 47
    7782:	96 e0       	ldi	r25, 0x06	; 6
    7784:	a0 e0       	ldi	r26, 0x00	; 0
    7786:	81 83       	std	Z+1, r24	; 0x01
    7788:	92 83       	std	Z+2, r25	; 0x02
    778a:	a3 83       	std	Z+3, r26	; 0x03
    778c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7790:	ce 01       	movw	r24, r28
    7792:	08 96       	adiw	r24, 0x08	; 8
    7794:	50 df       	rcall	.-352    	; 0x7636 <asctime>
    7796:	ed b7       	in	r30, 0x3d	; 61
    7798:	fe b7       	in	r31, 0x3e	; 62
    779a:	95 83       	std	Z+5, r25	; 0x05
    779c:	84 83       	std	Z+4, r24	; 0x04
    779e:	8e e1       	ldi	r24, 0x1E	; 30
    77a0:	96 e0       	ldi	r25, 0x06	; 6
    77a2:	a0 e0       	ldi	r26, 0x00	; 0
    77a4:	81 83       	std	Z+1, r24	; 0x01
    77a6:	92 83       	std	Z+2, r25	; 0x02
    77a8:	a3 83       	std	Z+3, r26	; 0x03
    77aa:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    77ae:	0a c0       	rjmp	.+20     	; 0x77c4 <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    77b0:	8d e0       	ldi	r24, 0x0D	; 13
    77b2:	96 e0       	ldi	r25, 0x06	; 6
    77b4:	a0 e0       	ldi	r26, 0x00	; 0
    77b6:	ed b7       	in	r30, 0x3d	; 61
    77b8:	fe b7       	in	r31, 0x3e	; 62
    77ba:	81 83       	std	Z+1, r24	; 0x01
    77bc:	92 83       	std	Z+2, r25	; 0x02
    77be:	a3 83       	std	Z+3, r26	; 0x03
    77c0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    77c4:	be 01       	movw	r22, r28
    77c6:	62 5e       	subi	r22, 0xE2	; 226
    77c8:	7f 4f       	sbci	r23, 0xFF	; 255
    77ca:	80 e0       	ldi	r24, 0x00	; 0
    77cc:	90 e0       	ldi	r25, 0x00	; 0
    77ce:	0e 94 c1 31 	call	0x6382	; 0x6382 <clock_gettime>
    seconds = ts.tv_sec;
    77d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    77d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    77d6:	a8 a1       	ldd	r26, Y+32	; 0x20
    77d8:	b9 a1       	ldd	r27, Y+33	; 0x21
    77da:	8e a3       	std	Y+38, r24	; 0x26
    77dc:	9f a3       	std	Y+39, r25	; 0x27
    77de:	a8 a7       	std	Y+40, r26	; 0x28
    77e0:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    77e2:	ed b7       	in	r30, 0x3d	; 61
    77e4:	fe b7       	in	r31, 0x3e	; 62
    77e6:	84 83       	std	Z+4, r24	; 0x04
    77e8:	95 83       	std	Z+5, r25	; 0x05
    77ea:	a6 83       	std	Z+6, r26	; 0x06
    77ec:	b7 83       	std	Z+7, r27	; 0x07
    77ee:	8b ef       	ldi	r24, 0xFB	; 251
    77f0:	95 e0       	ldi	r25, 0x05	; 5
    77f2:	a0 e0       	ldi	r26, 0x00	; 0
    77f4:	81 83       	std	Z+1, r24	; 0x01
    77f6:	92 83       	std	Z+2, r25	; 0x02
    77f8:	a3 83       	std	Z+3, r26	; 0x03
    77fa:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    77fe:	ce 01       	movw	r24, r28
    7800:	86 96       	adiw	r24, 0x26	; 38
    7802:	a9 d9       	rcall	.-3246   	; 0x6b56 <gmtime>
    7804:	18 df       	rcall	.-464    	; 0x7636 <asctime>
    7806:	ed b7       	in	r30, 0x3d	; 61
    7808:	fe b7       	in	r31, 0x3e	; 62
    780a:	95 83       	std	Z+5, r25	; 0x05
    780c:	84 83       	std	Z+4, r24	; 0x04
    780e:	8a ee       	ldi	r24, 0xEA	; 234
    7810:	95 e0       	ldi	r25, 0x05	; 5
    7812:	a0 e0       	ldi	r26, 0x00	; 0
    7814:	81 83       	std	Z+1, r24	; 0x01
    7816:	92 83       	std	Z+2, r25	; 0x02
    7818:	a3 83       	std	Z+3, r26	; 0x03
    781a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
}
    781e:	a9 96       	adiw	r28, 0x29	; 41
    7820:	e2 e0       	ldi	r30, 0x02	; 2
    7822:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00007826 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7826:	fc 01       	movw	r30, r24
    7828:	84 81       	ldd	r24, Z+4	; 0x04
    782a:	95 81       	ldd	r25, Z+5	; 0x05
    782c:	00 97       	sbiw	r24, 0x00	; 0
    782e:	79 f0       	breq	.+30     	; 0x784e <_putc_buffer_fn+0x28>
    7830:	66 23       	and	r22, r22
    7832:	69 f0       	breq	.+26     	; 0x784e <_putc_buffer_fn+0x28>
    7834:	01 97       	sbiw	r24, 0x01	; 1
    7836:	95 83       	std	Z+5, r25	; 0x05
    7838:	84 83       	std	Z+4, r24	; 0x04
    783a:	86 81       	ldd	r24, Z+6	; 0x06
    783c:	97 81       	ldd	r25, Z+7	; 0x07
    783e:	01 96       	adiw	r24, 0x01	; 1
    7840:	97 83       	std	Z+7, r25	; 0x07
    7842:	86 83       	std	Z+6, r24	; 0x06
    7844:	a2 81       	ldd	r26, Z+2	; 0x02
    7846:	b3 81       	ldd	r27, Z+3	; 0x03
    7848:	6d 93       	st	X+, r22
    784a:	b3 83       	std	Z+3, r27	; 0x03
    784c:	a2 83       	std	Z+2, r26	; 0x02
    784e:	02 80       	ldd	r0, Z+2	; 0x02
    7850:	f3 81       	ldd	r31, Z+3	; 0x03
    7852:	e0 2d       	mov	r30, r0
    7854:	10 82       	st	Z, r1
    7856:	08 95       	ret

00007858 <_putc_fn>:
    7858:	fc 01       	movw	r30, r24
    785a:	26 81       	ldd	r18, Z+6	; 0x06
    785c:	37 81       	ldd	r19, Z+7	; 0x07
    785e:	2f 5f       	subi	r18, 0xFF	; 255
    7860:	3f 4f       	sbci	r19, 0xFF	; 255
    7862:	37 83       	std	Z+7, r19	; 0x07
    7864:	26 83       	std	Z+6, r18	; 0x06
    7866:	86 2f       	mov	r24, r22
    7868:	90 e0       	ldi	r25, 0x00	; 0
    786a:	0c 94 3d 75 	jmp	0xea7a	; 0xea7a <putchar>
    786e:	08 95       	ret

00007870 <bin2num>:
    7870:	a0 e0       	ldi	r26, 0x00	; 0
    7872:	b0 e0       	ldi	r27, 0x00	; 0
    7874:	ee e3       	ldi	r30, 0x3E	; 62
    7876:	fc e3       	ldi	r31, 0x3C	; 60
    7878:	0c 94 45 e3 	jmp	0x1c68a	; 0x1c68a <__prologue_saves__+0xe>
    787c:	ea 01       	movw	r28, r20
    787e:	53 e0       	ldi	r21, 0x03	; 3
    7880:	ee 0c       	add	r14, r14
    7882:	ff 1c       	adc	r15, r15
    7884:	5a 95       	dec	r21
    7886:	e1 f7       	brne	.-8      	; 0x7880 <bin2num+0x10>
    7888:	fc 01       	movw	r30, r24
    788a:	af 01       	movw	r20, r30
    788c:	48 1b       	sub	r20, r24
    788e:	59 0b       	sbc	r21, r25
    7890:	c4 17       	cp	r28, r20
    7892:	d5 07       	cpc	r29, r21
    7894:	14 f0       	brlt	.+4      	; 0x789a <bin2num+0x2a>
    7896:	11 92       	st	Z+, r1
    7898:	f8 cf       	rjmp	.-16     	; 0x788a <bin2num+0x1a>
    789a:	41 e0       	ldi	r20, 0x01	; 1
    789c:	e4 1a       	sub	r14, r20
    789e:	f1 08       	sbc	r15, r1
    78a0:	5b 01       	movw	r10, r22
    78a2:	42 e0       	ldi	r20, 0x02	; 2
    78a4:	a4 1a       	sub	r10, r20
    78a6:	b1 08       	sbc	r11, r1
    78a8:	f7 fc       	sbrc	r15, 7
    78aa:	3b c0       	rjmp	.+118    	; 0x7922 <bin2num+0xb2>
    78ac:	f7 01       	movw	r30, r14
    78ae:	43 e0       	ldi	r20, 0x03	; 3
    78b0:	f5 95       	asr	r31
    78b2:	e7 95       	ror	r30
    78b4:	4a 95       	dec	r20
    78b6:	e1 f7       	brne	.-8      	; 0x78b0 <bin2num+0x40>
    78b8:	e0 0f       	add	r30, r16
    78ba:	f1 1f       	adc	r31, r17
    78bc:	40 81       	ld	r20, Z
    78be:	50 e0       	ldi	r21, 0x00	; 0
    78c0:	f7 01       	movw	r30, r14
    78c2:	e7 70       	andi	r30, 0x07	; 7
    78c4:	ff 27       	eor	r31, r31
    78c6:	02 c0       	rjmp	.+4      	; 0x78cc <bin2num+0x5c>
    78c8:	55 95       	asr	r21
    78ca:	47 95       	ror	r20
    78cc:	ea 95       	dec	r30
    78ce:	e2 f7       	brpl	.-8      	; 0x78c8 <bin2num+0x58>
    78d0:	41 70       	andi	r20, 0x01	; 1
    78d2:	55 27       	eor	r21, r21
    78d4:	dc 01       	movw	r26, r24
    78d6:	e0 e0       	ldi	r30, 0x00	; 0
    78d8:	f0 e0       	ldi	r31, 0x00	; 0
    78da:	ec 17       	cp	r30, r28
    78dc:	fd 07       	cpc	r31, r29
    78de:	ec f4       	brge	.+58     	; 0x791a <bin2num+0xaa>
    78e0:	ea 15       	cp	r30, r10
    78e2:	fb 05       	cpc	r31, r11
    78e4:	4c f0       	brlt	.+18     	; 0x78f8 <bin2num+0x88>
    78e6:	dc 01       	movw	r26, r24
    78e8:	ae 0f       	add	r26, r30
    78ea:	bf 1f       	adc	r27, r31
    78ec:	1c 92       	st	X, r1
    78ee:	41 e0       	ldi	r20, 0x01	; 1
    78f0:	e4 1a       	sub	r14, r20
    78f2:	f1 08       	sbc	r15, r1
    78f4:	ef 01       	movw	r28, r30
    78f6:	d8 cf       	rjmp	.-80     	; 0x78a8 <bin2num+0x38>
    78f8:	9c 90       	ld	r9, X
    78fa:	99 0c       	add	r9, r9
    78fc:	94 2a       	or	r9, r20
    78fe:	49 2d       	mov	r20, r9
    7900:	50 e0       	ldi	r21, 0x00	; 0
    7902:	42 17       	cp	r20, r18
    7904:	53 07       	cpc	r21, r19
    7906:	24 f0       	brlt	.+8      	; 0x7910 <bin2num+0xa0>
    7908:	92 1a       	sub	r9, r18
    790a:	41 e0       	ldi	r20, 0x01	; 1
    790c:	50 e0       	ldi	r21, 0x00	; 0
    790e:	02 c0       	rjmp	.+4      	; 0x7914 <bin2num+0xa4>
    7910:	40 e0       	ldi	r20, 0x00	; 0
    7912:	50 e0       	ldi	r21, 0x00	; 0
    7914:	9d 92       	st	X+, r9
    7916:	31 96       	adiw	r30, 0x01	; 1
    7918:	e0 cf       	rjmp	.-64     	; 0x78da <bin2num+0x6a>
    791a:	41 15       	cp	r20, r1
    791c:	51 05       	cpc	r21, r1
    791e:	01 f7       	brne	.-64     	; 0x78e0 <bin2num+0x70>
    7920:	e2 cf       	rjmp	.-60     	; 0x78e6 <bin2num+0x76>
    7922:	fc 01       	movw	r30, r24
    7924:	9f 01       	movw	r18, r30
    7926:	28 1b       	sub	r18, r24
    7928:	39 0b       	sbc	r19, r25
    792a:	2c 17       	cp	r18, r28
    792c:	3d 07       	cpc	r19, r29
    792e:	4c f4       	brge	.+18     	; 0x7942 <bin2num+0xd2>
    7930:	20 81       	ld	r18, Z
    7932:	2a 30       	cpi	r18, 0x0A	; 10
    7934:	10 f4       	brcc	.+4      	; 0x793a <bin2num+0xca>
    7936:	20 5d       	subi	r18, 0xD0	; 208
    7938:	01 c0       	rjmp	.+2      	; 0x793c <bin2num+0xcc>
    793a:	29 5a       	subi	r18, 0xA9	; 169
    793c:	20 83       	st	Z, r18
    793e:	31 96       	adiw	r30, 0x01	; 1
    7940:	f1 cf       	rjmp	.-30     	; 0x7924 <bin2num+0xb4>
    7942:	9e 01       	movw	r18, r28
    7944:	d7 ff       	sbrs	r29, 7
    7946:	02 c0       	rjmp	.+4      	; 0x794c <bin2num+0xdc>
    7948:	20 e0       	ldi	r18, 0x00	; 0
    794a:	30 e0       	ldi	r19, 0x00	; 0
    794c:	c1 14       	cp	r12, r1
    794e:	d1 04       	cpc	r13, r1
    7950:	61 f0       	breq	.+24     	; 0x796a <bin2num+0xfa>
    7952:	61 50       	subi	r22, 0x01	; 1
    7954:	71 09       	sbc	r23, r1
    7956:	26 17       	cp	r18, r22
    7958:	37 07       	cpc	r19, r23
    795a:	3c f4       	brge	.+14     	; 0x796a <bin2num+0xfa>
    795c:	fc 01       	movw	r30, r24
    795e:	e2 0f       	add	r30, r18
    7960:	f3 1f       	adc	r31, r19
    7962:	c0 82       	st	Z, r12
    7964:	21 96       	adiw	r28, 0x01	; 1
    7966:	2f 5f       	subi	r18, 0xFF	; 255
    7968:	3f 4f       	sbci	r19, 0xFF	; 255
    796a:	fc 01       	movw	r30, r24
    796c:	e2 0f       	add	r30, r18
    796e:	f3 1f       	adc	r31, r19
    7970:	10 82       	st	Z, r1
    7972:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <reverse>
    7976:	ce 01       	movw	r24, r28
    7978:	cd b7       	in	r28, 0x3d	; 61
    797a:	de b7       	in	r29, 0x3e	; 62
    797c:	eb e0       	ldi	r30, 0x0B	; 11
    797e:	0c 94 61 e3 	jmp	0x1c6c2	; 0x1c6c2 <__epilogue_restores__+0xe>

00007982 <pch>:
    7982:	fc 01       	movw	r30, r24
    7984:	22 81       	ldd	r18, Z+2	; 0x02
    7986:	33 81       	ldd	r19, Z+3	; 0x03
    7988:	44 81       	ldd	r20, Z+4	; 0x04
    798a:	55 81       	ldd	r21, Z+5	; 0x05
    798c:	80 81       	ld	r24, Z
    798e:	91 81       	ldd	r25, Z+1	; 0x01
    7990:	24 17       	cp	r18, r20
    7992:	35 07       	cpc	r19, r21
    7994:	54 f4       	brge	.+20     	; 0x79aa <pch+0x28>
    7996:	a9 01       	movw	r20, r18
    7998:	4f 5f       	subi	r20, 0xFF	; 255
    799a:	5f 4f       	sbci	r21, 0xFF	; 255
    799c:	53 83       	std	Z+3, r21	; 0x03
    799e:	42 83       	std	Z+2, r20	; 0x02
    79a0:	dc 01       	movw	r26, r24
    79a2:	a2 0f       	add	r26, r18
    79a4:	b3 1f       	adc	r27, r19
    79a6:	6c 93       	st	X, r22
    79a8:	04 c0       	rjmp	.+8      	; 0x79b2 <pch+0x30>
    79aa:	dc 01       	movw	r26, r24
    79ac:	a2 0f       	add	r26, r18
    79ae:	b3 1f       	adc	r27, r19
    79b0:	1c 92       	st	X, r1
    79b2:	82 81       	ldd	r24, Z+2	; 0x02
    79b4:	93 81       	ldd	r25, Z+3	; 0x03
    79b6:	08 95       	ret

000079b8 <p_ntoa>:
    79b8:	af 92       	push	r10
    79ba:	cf 92       	push	r12
    79bc:	df 92       	push	r13
    79be:	ef 92       	push	r14
    79c0:	ff 92       	push	r15
    79c2:	0f 93       	push	r16
    79c4:	1f 93       	push	r17
    79c6:	cf 93       	push	r28
    79c8:	df 93       	push	r29
    79ca:	dc 01       	movw	r26, r24
    79cc:	eb 01       	movw	r28, r22
    79ce:	fa 01       	movw	r30, r20
    79d0:	b9 01       	movw	r22, r18
    79d2:	98 01       	movw	r18, r16
    79d4:	a6 01       	movw	r20, r12
    79d6:	9a 2d       	mov	r25, r10
    79d8:	a5 fa       	bst	r10, 5
    79da:	cc 24       	eor	r12, r12
    79dc:	c0 f8       	bld	r12, 0
    79de:	a6 fc       	sbrc	r10, 6
    79e0:	07 c0       	rjmp	.+14     	; 0x79f0 <p_ntoa+0x38>
    79e2:	a2 fc       	sbrc	r10, 2
    79e4:	08 c0       	rjmp	.+16     	; 0x79f6 <p_ntoa+0x3e>
    79e6:	a4 fe       	sbrs	r10, 4
    79e8:	09 c0       	rjmp	.+18     	; 0x79fc <p_ntoa+0x44>
    79ea:	00 e2       	ldi	r16, 0x20	; 32
    79ec:	10 e0       	ldi	r17, 0x00	; 0
    79ee:	08 c0       	rjmp	.+16     	; 0x7a00 <p_ntoa+0x48>
    79f0:	0d e2       	ldi	r16, 0x2D	; 45
    79f2:	10 e0       	ldi	r17, 0x00	; 0
    79f4:	05 c0       	rjmp	.+10     	; 0x7a00 <p_ntoa+0x48>
    79f6:	0b e2       	ldi	r16, 0x2B	; 43
    79f8:	10 e0       	ldi	r17, 0x00	; 0
    79fa:	02 c0       	rjmp	.+4      	; 0x7a00 <p_ntoa+0x48>
    79fc:	00 e0       	ldi	r16, 0x00	; 0
    79fe:	10 e0       	ldi	r17, 0x00	; 0
    7a00:	95 ff       	sbrs	r25, 5
    7a02:	04 c0       	rjmp	.+8      	; 0x7a0c <p_ntoa+0x54>
    7a04:	89 2f       	mov	r24, r25
    7a06:	8a 70       	andi	r24, 0x0A	; 10
    7a08:	09 f0       	breq	.+2      	; 0x7a0c <p_ntoa+0x54>
    7a0a:	c1 2c       	mov	r12, r1
    7a0c:	c0 fa       	bst	r12, 0
    7a0e:	95 f9       	bld	r25, 5
    7a10:	89 2f       	mov	r24, r25
    7a12:	82 70       	andi	r24, 0x02	; 2
    7a14:	c8 2e       	mov	r12, r24
    7a16:	91 fd       	sbrc	r25, 1
    7a18:	02 c0       	rjmp	.+4      	; 0x7a1e <p_ntoa+0x66>
    7a1a:	40 e0       	ldi	r20, 0x00	; 0
    7a1c:	50 e0       	ldi	r21, 0x00	; 0
    7a1e:	89 2f       	mov	r24, r25
    7a20:	83 70       	andi	r24, 0x03	; 3
    7a22:	11 f4       	brne	.+4      	; 0x7a28 <p_ntoa+0x70>
    7a24:	41 e0       	ldi	r20, 0x01	; 1
    7a26:	50 e0       	ldi	r21, 0x00	; 0
    7a28:	90 ff       	sbrs	r25, 0
    7a2a:	0c c0       	rjmp	.+24     	; 0x7a44 <p_ntoa+0x8c>
    7a2c:	95 fd       	sbrc	r25, 5
    7a2e:	05 c0       	rjmp	.+10     	; 0x7a3a <p_ntoa+0x82>
    7a30:	c1 10       	cpse	r12, r1
    7a32:	08 c0       	rjmp	.+16     	; 0x7a44 <p_ntoa+0x8c>
    7a34:	41 e0       	ldi	r20, 0x01	; 1
    7a36:	50 e0       	ldi	r21, 0x00	; 0
    7a38:	05 c0       	rjmp	.+10     	; 0x7a44 <p_ntoa+0x8c>
    7a3a:	94 75       	andi	r25, 0x54	; 84
    7a3c:	a7 01       	movw	r20, r14
    7a3e:	11 f0       	breq	.+4      	; 0x7a44 <p_ntoa+0x8c>
    7a40:	41 50       	subi	r20, 0x01	; 1
    7a42:	51 09       	sbc	r21, r1
    7a44:	68 01       	movw	r12, r16
    7a46:	7e 01       	movw	r14, r28
    7a48:	8d 01       	movw	r16, r26
    7a4a:	cf 01       	movw	r24, r30
    7a4c:	11 df       	rcall	.-478    	; 0x7870 <bin2num>
    7a4e:	df 91       	pop	r29
    7a50:	cf 91       	pop	r28
    7a52:	1f 91       	pop	r17
    7a54:	0f 91       	pop	r16
    7a56:	ff 90       	pop	r15
    7a58:	ef 90       	pop	r14
    7a5a:	df 90       	pop	r13
    7a5c:	cf 90       	pop	r12
    7a5e:	af 90       	pop	r10
    7a60:	08 95       	ret

00007a62 <p_ftoa>:
    7a62:	aa e0       	ldi	r26, 0x0A	; 10
    7a64:	b0 e0       	ldi	r27, 0x00	; 0
    7a66:	e7 e3       	ldi	r30, 0x37	; 55
    7a68:	fd e3       	ldi	r31, 0x3D	; 61
    7a6a:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
    7a6e:	4b 01       	movw	r8, r22
    7a70:	5c 01       	movw	r10, r24
    7a72:	1a 01       	movw	r2, r20
    7a74:	28 01       	movw	r4, r16
    7a76:	c6 fa       	bst	r12, 6
    7a78:	11 27       	eor	r17, r17
    7a7a:	10 f9       	bld	r17, 0
    7a7c:	5a 83       	std	Y+2, r21	; 0x02
    7a7e:	49 83       	std	Y+1, r20	; 0x01
    7a80:	1c 82       	std	Y+4, r1	; 0x04
    7a82:	1b 82       	std	Y+3, r1	; 0x03
    7a84:	21 50       	subi	r18, 0x01	; 1
    7a86:	31 09       	sbc	r19, r1
    7a88:	3e 83       	std	Y+6, r19	; 0x06
    7a8a:	2d 83       	std	Y+5, r18	; 0x05
    7a8c:	fa 01       	movw	r30, r20
    7a8e:	10 82       	st	Z, r1
    7a90:	20 e0       	ldi	r18, 0x00	; 0
    7a92:	30 e0       	ldi	r19, 0x00	; 0
    7a94:	a9 01       	movw	r20, r18
    7a96:	0e 94 fc e3 	call	0x1c7f8	; 0x1c7f8 <__cmpsf2>
    7a9a:	87 ff       	sbrs	r24, 7
    7a9c:	05 c0       	rjmp	.+10     	; 0x7aa8 <p_ftoa+0x46>
    7a9e:	b7 fa       	bst	r11, 7
    7aa0:	b0 94       	com	r11
    7aa2:	b7 f8       	bld	r11, 7
    7aa4:	b0 94       	com	r11
    7aa6:	11 e0       	ldi	r17, 0x01	; 1
    7aa8:	10 fb       	bst	r17, 0
    7aaa:	c6 f8       	bld	r12, 6
    7aac:	c6 fe       	sbrs	r12, 6
    7aae:	02 c0       	rjmp	.+4      	; 0x7ab4 <p_ftoa+0x52>
    7ab0:	6d e2       	ldi	r22, 0x2D	; 45
    7ab2:	07 c0       	rjmp	.+14     	; 0x7ac2 <p_ftoa+0x60>
    7ab4:	c2 fe       	sbrs	r12, 2
    7ab6:	02 c0       	rjmp	.+4      	; 0x7abc <p_ftoa+0x5a>
    7ab8:	6b e2       	ldi	r22, 0x2B	; 43
    7aba:	03 c0       	rjmp	.+6      	; 0x7ac2 <p_ftoa+0x60>
    7abc:	c4 fe       	sbrs	r12, 4
    7abe:	04 c0       	rjmp	.+8      	; 0x7ac8 <p_ftoa+0x66>
    7ac0:	60 e2       	ldi	r22, 0x20	; 32
    7ac2:	ce 01       	movw	r24, r28
    7ac4:	01 96       	adiw	r24, 0x01	; 1
    7ac6:	5d df       	rcall	.-326    	; 0x7982 <pch>
    7ac8:	37 01       	movw	r6, r14
    7aca:	f7 fe       	sbrs	r15, 7
    7acc:	02 c0       	rjmp	.+4      	; 0x7ad2 <p_ftoa+0x70>
    7ace:	61 2c       	mov	r6, r1
    7ad0:	71 2c       	mov	r7, r1
    7ad2:	20 e0       	ldi	r18, 0x00	; 0
    7ad4:	30 e0       	ldi	r19, 0x00	; 0
    7ad6:	a9 01       	movw	r20, r18
    7ad8:	c5 01       	movw	r24, r10
    7ada:	b4 01       	movw	r22, r8
    7adc:	0e 94 fc e3 	call	0x1c7f8	; 0x1c7f8 <__cmpsf2>
    7ae0:	88 23       	and	r24, r24
    7ae2:	d1 f1       	breq	.+116    	; 0x7b58 <p_ftoa+0xf6>
    7ae4:	c1 fe       	sbrs	r12, 1
    7ae6:	11 c0       	rjmp	.+34     	; 0x7b0a <p_ftoa+0xa8>
    7ae8:	83 01       	movw	r16, r6
    7aea:	60 e0       	ldi	r22, 0x00	; 0
    7aec:	70 e0       	ldi	r23, 0x00	; 0
    7aee:	80 e0       	ldi	r24, 0x00	; 0
    7af0:	9f e3       	ldi	r25, 0x3F	; 63
    7af2:	01 15       	cp	r16, r1
    7af4:	11 05       	cpc	r17, r1
    7af6:	69 f0       	breq	.+26     	; 0x7b12 <p_ftoa+0xb0>
    7af8:	20 e0       	ldi	r18, 0x00	; 0
    7afa:	30 e0       	ldi	r19, 0x00	; 0
    7afc:	40 e2       	ldi	r20, 0x20	; 32
    7afe:	51 e4       	ldi	r21, 0x41	; 65
    7b00:	0e 94 00 e4 	call	0x1c800	; 0x1c800 <__divsf3>
    7b04:	01 50       	subi	r16, 0x01	; 1
    7b06:	11 09       	sbc	r17, r1
    7b08:	f4 cf       	rjmp	.-24     	; 0x7af2 <p_ftoa+0x90>
    7b0a:	60 e0       	ldi	r22, 0x00	; 0
    7b0c:	70 e0       	ldi	r23, 0x00	; 0
    7b0e:	80 e0       	ldi	r24, 0x00	; 0
    7b10:	9f e3       	ldi	r25, 0x3F	; 63
    7b12:	9b 01       	movw	r18, r22
    7b14:	ac 01       	movw	r20, r24
    7b16:	c5 01       	movw	r24, r10
    7b18:	b4 01       	movw	r22, r8
    7b1a:	0e 94 98 e3 	call	0x1c730	; 0x1c730 <__addsf3>
    7b1e:	4b 01       	movw	r8, r22
    7b20:	5c 01       	movw	r10, r24
    7b22:	ee 24       	eor	r14, r14
    7b24:	e3 94       	inc	r14
    7b26:	f1 2c       	mov	r15, r1
    7b28:	20 e0       	ldi	r18, 0x00	; 0
    7b2a:	30 e0       	ldi	r19, 0x00	; 0
    7b2c:	40 e2       	ldi	r20, 0x20	; 32
    7b2e:	51 e4       	ldi	r21, 0x41	; 65
    7b30:	c5 01       	movw	r24, r10
    7b32:	b4 01       	movw	r22, r8
    7b34:	0e 94 4b e5 	call	0x1ca96	; 0x1ca96 <__gesf2>
    7b38:	87 fd       	sbrc	r24, 7
    7b3a:	11 c0       	rjmp	.+34     	; 0x7b5e <p_ftoa+0xfc>
    7b3c:	ff ef       	ldi	r31, 0xFF	; 255
    7b3e:	ef 1a       	sub	r14, r31
    7b40:	ff 0a       	sbc	r15, r31
    7b42:	20 e0       	ldi	r18, 0x00	; 0
    7b44:	30 e0       	ldi	r19, 0x00	; 0
    7b46:	40 e2       	ldi	r20, 0x20	; 32
    7b48:	51 e4       	ldi	r21, 0x41	; 65
    7b4a:	c5 01       	movw	r24, r10
    7b4c:	b4 01       	movw	r22, r8
    7b4e:	0e 94 00 e4 	call	0x1c800	; 0x1c800 <__divsf3>
    7b52:	4b 01       	movw	r8, r22
    7b54:	5c 01       	movw	r10, r24
    7b56:	e8 cf       	rjmp	.-48     	; 0x7b28 <p_ftoa+0xc6>
    7b58:	ee 24       	eor	r14, r14
    7b5a:	e3 94       	inc	r14
    7b5c:	f1 2c       	mov	r15, r1
    7b5e:	8c 2d       	mov	r24, r12
    7b60:	88 72       	andi	r24, 0x28	; 40
    7b62:	80 32       	cpi	r24, 0x20	; 32
    7b64:	c1 f4       	brne	.+48     	; 0x7b96 <p_ftoa+0x134>
    7b66:	82 01       	movw	r16, r4
    7b68:	0e 19       	sub	r16, r14
    7b6a:	1f 09       	sbc	r17, r15
    7b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    7b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    7b70:	08 1b       	sub	r16, r24
    7b72:	19 0b       	sbc	r17, r25
    7b74:	c1 fe       	sbrs	r12, 1
    7b76:	07 c0       	rjmp	.+14     	; 0x7b86 <p_ftoa+0x124>
    7b78:	61 14       	cp	r6, r1
    7b7a:	71 04       	cpc	r7, r1
    7b7c:	21 f0       	breq	.+8      	; 0x7b86 <p_ftoa+0x124>
    7b7e:	06 19       	sub	r16, r6
    7b80:	17 09       	sbc	r17, r7
    7b82:	01 50       	subi	r16, 0x01	; 1
    7b84:	11 09       	sbc	r17, r1
    7b86:	10 16       	cp	r1, r16
    7b88:	11 06       	cpc	r1, r17
    7b8a:	2c f4       	brge	.+10     	; 0x7b96 <p_ftoa+0x134>
    7b8c:	60 e3       	ldi	r22, 0x30	; 48
    7b8e:	ce 01       	movw	r24, r28
    7b90:	01 96       	adiw	r24, 0x01	; 1
    7b92:	f7 de       	rcall	.-530    	; 0x7982 <pch>
    7b94:	f6 cf       	rjmp	.-20     	; 0x7b82 <p_ftoa+0x120>
    7b96:	c5 01       	movw	r24, r10
    7b98:	b4 01       	movw	r22, r8
    7b9a:	0e 94 68 e4 	call	0x1c8d0	; 0x1c8d0 <__fixsfsi>
    7b9e:	6f 83       	std	Y+7, r22	; 0x07
    7ba0:	78 87       	std	Y+8, r23	; 0x08
    7ba2:	89 87       	std	Y+9, r24	; 0x09
    7ba4:	9a 87       	std	Y+10, r25	; 0x0a
    7ba6:	6f 81       	ldd	r22, Y+7	; 0x07
    7ba8:	60 5d       	subi	r22, 0xD0	; 208
    7baa:	ce 01       	movw	r24, r28
    7bac:	01 96       	adiw	r24, 0x01	; 1
    7bae:	e9 de       	rcall	.-558    	; 0x7982 <pch>
    7bb0:	2f 81       	ldd	r18, Y+7	; 0x07
    7bb2:	38 85       	ldd	r19, Y+8	; 0x08
    7bb4:	b9 01       	movw	r22, r18
    7bb6:	33 0f       	add	r19, r19
    7bb8:	88 0b       	sbc	r24, r24
    7bba:	99 0b       	sbc	r25, r25
    7bbc:	0e 94 9b e4 	call	0x1c936	; 0x1c936 <__floatsisf>
    7bc0:	9b 01       	movw	r18, r22
    7bc2:	ac 01       	movw	r20, r24
    7bc4:	c5 01       	movw	r24, r10
    7bc6:	b4 01       	movw	r22, r8
    7bc8:	0e 94 97 e3 	call	0x1c72e	; 0x1c72e <__subsf3>
    7bcc:	31 e0       	ldi	r19, 0x01	; 1
    7bce:	e3 1a       	sub	r14, r19
    7bd0:	f1 08       	sbc	r15, r1
    7bd2:	20 e0       	ldi	r18, 0x00	; 0
    7bd4:	30 e0       	ldi	r19, 0x00	; 0
    7bd6:	40 e2       	ldi	r20, 0x20	; 32
    7bd8:	51 e4       	ldi	r21, 0x41	; 65
    7bda:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <__mulsf3>
    7bde:	4b 01       	movw	r8, r22
    7be0:	5c 01       	movw	r10, r24
    7be2:	e1 14       	cp	r14, r1
    7be4:	f1 04       	cpc	r15, r1
    7be6:	b9 f6       	brne	.-82     	; 0x7b96 <p_ftoa+0x134>
    7be8:	c1 fc       	sbrc	r12, 1
    7bea:	10 c0       	rjmp	.+32     	; 0x7c0c <p_ftoa+0x1aa>
    7bec:	60 e0       	ldi	r22, 0x00	; 0
    7bee:	ce 01       	movw	r24, r28
    7bf0:	01 96       	adiw	r24, 0x01	; 1
    7bf2:	c7 de       	rcall	.-626    	; 0x7982 <pch>
    7bf4:	f1 01       	movw	r30, r2
    7bf6:	01 90       	ld	r0, Z+
    7bf8:	00 20       	and	r0, r0
    7bfa:	e9 f7       	brne	.-6      	; 0x7bf6 <p_ftoa+0x194>
    7bfc:	31 97       	sbiw	r30, 0x01	; 1
    7bfe:	cf 01       	movw	r24, r30
    7c00:	82 19       	sub	r24, r2
    7c02:	93 09       	sbc	r25, r3
    7c04:	2a 96       	adiw	r28, 0x0a	; 10
    7c06:	e2 e1       	ldi	r30, 0x12	; 18
    7c08:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>
    7c0c:	61 14       	cp	r6, r1
    7c0e:	71 04       	cpc	r7, r1
    7c10:	69 f3       	breq	.-38     	; 0x7bec <p_ftoa+0x18a>
    7c12:	6e e2       	ldi	r22, 0x2E	; 46
    7c14:	ce 01       	movw	r24, r28
    7c16:	01 96       	adiw	r24, 0x01	; 1
    7c18:	b4 de       	rcall	.-664    	; 0x7982 <pch>
    7c1a:	c5 01       	movw	r24, r10
    7c1c:	b4 01       	movw	r22, r8
    7c1e:	0e 94 68 e4 	call	0x1c8d0	; 0x1c8d0 <__fixsfsi>
    7c22:	6b 01       	movw	r12, r22
    7c24:	7c 01       	movw	r14, r24
    7c26:	07 2e       	mov	r0, r23
    7c28:	00 0c       	add	r0, r0
    7c2a:	88 0b       	sbc	r24, r24
    7c2c:	99 0b       	sbc	r25, r25
    7c2e:	0e 94 9b e4 	call	0x1c936	; 0x1c936 <__floatsisf>
    7c32:	9b 01       	movw	r18, r22
    7c34:	ac 01       	movw	r20, r24
    7c36:	c5 01       	movw	r24, r10
    7c38:	b4 01       	movw	r22, r8
    7c3a:	0e 94 97 e3 	call	0x1c72e	; 0x1c72e <__subsf3>
    7c3e:	4b 01       	movw	r8, r22
    7c40:	5c 01       	movw	r10, r24
    7c42:	b6 01       	movw	r22, r12
    7c44:	60 5d       	subi	r22, 0xD0	; 208
    7c46:	7f 4f       	sbci	r23, 0xFF	; 255
    7c48:	ce 01       	movw	r24, r28
    7c4a:	01 96       	adiw	r24, 0x01	; 1
    7c4c:	9a de       	rcall	.-716    	; 0x7982 <pch>
    7c4e:	81 e0       	ldi	r24, 0x01	; 1
    7c50:	68 1a       	sub	r6, r24
    7c52:	71 08       	sbc	r7, r1
    7c54:	20 e0       	ldi	r18, 0x00	; 0
    7c56:	30 e0       	ldi	r19, 0x00	; 0
    7c58:	40 e2       	ldi	r20, 0x20	; 32
    7c5a:	51 e4       	ldi	r21, 0x41	; 65
    7c5c:	c5 01       	movw	r24, r10
    7c5e:	b4 01       	movw	r22, r8
    7c60:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <__mulsf3>
    7c64:	4b 01       	movw	r8, r22
    7c66:	5c 01       	movw	r10, r24
    7c68:	61 14       	cp	r6, r1
    7c6a:	71 04       	cpc	r7, r1
    7c6c:	b1 f6       	brne	.-84     	; 0x7c1a <p_ftoa+0x1b8>
    7c6e:	be cf       	rjmp	.-132    	; 0x7bec <p_ftoa+0x18a>

00007c70 <p_etoa>:
    7c70:	a3 e1       	ldi	r26, 0x13	; 19
    7c72:	b0 e0       	ldi	r27, 0x00	; 0
    7c74:	ee e3       	ldi	r30, 0x3E	; 62
    7c76:	fe e3       	ldi	r31, 0x3E	; 62
    7c78:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
    7c7c:	4b 01       	movw	r8, r22
    7c7e:	5c 01       	movw	r10, r24
    7c80:	59 8b       	std	Y+17, r21	; 0x11
    7c82:	48 8b       	std	Y+16, r20	; 0x10
    7c84:	1b 8b       	std	Y+19, r17	; 0x13
    7c86:	0a 8b       	std	Y+18, r16	; 0x12
    7c88:	3c 2c       	mov	r3, r12
    7c8a:	c6 fa       	bst	r12, 6
    7c8c:	11 27       	eor	r17, r17
    7c8e:	10 f9       	bld	r17, 0
    7c90:	59 87       	std	Y+9, r21	; 0x09
    7c92:	48 87       	std	Y+8, r20	; 0x08
    7c94:	1b 86       	std	Y+11, r1	; 0x0b
    7c96:	1a 86       	std	Y+10, r1	; 0x0a
    7c98:	21 50       	subi	r18, 0x01	; 1
    7c9a:	31 09       	sbc	r19, r1
    7c9c:	3d 87       	std	Y+13, r19	; 0x0d
    7c9e:	2c 87       	std	Y+12, r18	; 0x0c
    7ca0:	fa 01       	movw	r30, r20
    7ca2:	10 82       	st	Z, r1
    7ca4:	20 e0       	ldi	r18, 0x00	; 0
    7ca6:	30 e0       	ldi	r19, 0x00	; 0
    7ca8:	a9 01       	movw	r20, r18
    7caa:	0e 94 fc e3 	call	0x1c7f8	; 0x1c7f8 <__cmpsf2>
    7cae:	87 ff       	sbrs	r24, 7
    7cb0:	05 c0       	rjmp	.+10     	; 0x7cbc <p_etoa+0x4c>
    7cb2:	b7 fa       	bst	r11, 7
    7cb4:	b0 94       	com	r11
    7cb6:	b7 f8       	bld	r11, 7
    7cb8:	b0 94       	com	r11
    7cba:	11 e0       	ldi	r17, 0x01	; 1
    7cbc:	10 fb       	bst	r17, 0
    7cbe:	36 f8       	bld	r3, 6
    7cc0:	36 fe       	sbrs	r3, 6
    7cc2:	02 c0       	rjmp	.+4      	; 0x7cc8 <p_etoa+0x58>
    7cc4:	6d e2       	ldi	r22, 0x2D	; 45
    7cc6:	07 c0       	rjmp	.+14     	; 0x7cd6 <p_etoa+0x66>
    7cc8:	32 fe       	sbrs	r3, 2
    7cca:	02 c0       	rjmp	.+4      	; 0x7cd0 <p_etoa+0x60>
    7ccc:	6b e2       	ldi	r22, 0x2B	; 43
    7cce:	03 c0       	rjmp	.+6      	; 0x7cd6 <p_etoa+0x66>
    7cd0:	34 fe       	sbrs	r3, 4
    7cd2:	04 c0       	rjmp	.+8      	; 0x7cdc <p_etoa+0x6c>
    7cd4:	60 e2       	ldi	r22, 0x20	; 32
    7cd6:	ce 01       	movw	r24, r28
    7cd8:	08 96       	adiw	r24, 0x08	; 8
    7cda:	53 de       	rcall	.-858    	; 0x7982 <pch>
    7cdc:	37 01       	movw	r6, r14
    7cde:	f7 fe       	sbrs	r15, 7
    7ce0:	02 c0       	rjmp	.+4      	; 0x7ce6 <p_etoa+0x76>
    7ce2:	61 2c       	mov	r6, r1
    7ce4:	71 2c       	mov	r7, r1
    7ce6:	1f 86       	std	Y+15, r1	; 0x0f
    7ce8:	1e 86       	std	Y+14, r1	; 0x0e
    7cea:	20 e0       	ldi	r18, 0x00	; 0
    7cec:	30 e0       	ldi	r19, 0x00	; 0
    7cee:	a9 01       	movw	r20, r18
    7cf0:	c5 01       	movw	r24, r10
    7cf2:	b4 01       	movw	r22, r8
    7cf4:	0e 94 fc e3 	call	0x1c7f8	; 0x1c7f8 <__cmpsf2>
    7cf8:	f3 2d       	mov	r31, r3
    7cfa:	f2 70       	andi	r31, 0x02	; 2
    7cfc:	2f 2e       	mov	r2, r31
    7cfe:	88 23       	and	r24, r24
    7d00:	09 f4       	brne	.+2      	; 0x7d04 <p_etoa+0x94>
    7d02:	70 c0       	rjmp	.+224    	; 0x7de4 <p_etoa+0x174>
    7d04:	ff 23       	and	r31, r31
    7d06:	b1 f0       	breq	.+44     	; 0x7d34 <p_etoa+0xc4>
    7d08:	83 01       	movw	r16, r6
    7d0a:	c1 2c       	mov	r12, r1
    7d0c:	d1 2c       	mov	r13, r1
    7d0e:	e1 2c       	mov	r14, r1
    7d10:	2f e3       	ldi	r18, 0x3F	; 63
    7d12:	f2 2e       	mov	r15, r18
    7d14:	01 15       	cp	r16, r1
    7d16:	11 05       	cpc	r17, r1
    7d18:	91 f0       	breq	.+36     	; 0x7d3e <p_etoa+0xce>
    7d1a:	20 e0       	ldi	r18, 0x00	; 0
    7d1c:	30 e0       	ldi	r19, 0x00	; 0
    7d1e:	40 e2       	ldi	r20, 0x20	; 32
    7d20:	51 e4       	ldi	r21, 0x41	; 65
    7d22:	c7 01       	movw	r24, r14
    7d24:	b6 01       	movw	r22, r12
    7d26:	0e 94 00 e4 	call	0x1c800	; 0x1c800 <__divsf3>
    7d2a:	6b 01       	movw	r12, r22
    7d2c:	7c 01       	movw	r14, r24
    7d2e:	01 50       	subi	r16, 0x01	; 1
    7d30:	11 09       	sbc	r17, r1
    7d32:	f0 cf       	rjmp	.-32     	; 0x7d14 <p_etoa+0xa4>
    7d34:	c1 2c       	mov	r12, r1
    7d36:	d1 2c       	mov	r13, r1
    7d38:	e1 2c       	mov	r14, r1
    7d3a:	9f e3       	ldi	r25, 0x3F	; 63
    7d3c:	f9 2e       	mov	r15, r25
    7d3e:	41 2c       	mov	r4, r1
    7d40:	51 2c       	mov	r5, r1
    7d42:	82 01       	movw	r16, r4
    7d44:	01 50       	subi	r16, 0x01	; 1
    7d46:	11 09       	sbc	r17, r1
    7d48:	20 e0       	ldi	r18, 0x00	; 0
    7d4a:	30 e0       	ldi	r19, 0x00	; 0
    7d4c:	40 e8       	ldi	r20, 0x80	; 128
    7d4e:	5f e3       	ldi	r21, 0x3F	; 63
    7d50:	c5 01       	movw	r24, r10
    7d52:	b4 01       	movw	r22, r8
    7d54:	0e 94 fc e3 	call	0x1c7f8	; 0x1c7f8 <__cmpsf2>
    7d58:	87 ff       	sbrs	r24, 7
    7d5a:	0c c0       	rjmp	.+24     	; 0x7d74 <p_etoa+0x104>
    7d5c:	20 e0       	ldi	r18, 0x00	; 0
    7d5e:	30 e0       	ldi	r19, 0x00	; 0
    7d60:	40 e2       	ldi	r20, 0x20	; 32
    7d62:	51 e4       	ldi	r21, 0x41	; 65
    7d64:	c5 01       	movw	r24, r10
    7d66:	b4 01       	movw	r22, r8
    7d68:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <__mulsf3>
    7d6c:	4b 01       	movw	r8, r22
    7d6e:	5c 01       	movw	r10, r24
    7d70:	28 01       	movw	r4, r16
    7d72:	e7 cf       	rjmp	.-50     	; 0x7d42 <p_etoa+0xd2>
    7d74:	82 01       	movw	r16, r4
    7d76:	0f 5f       	subi	r16, 0xFF	; 255
    7d78:	1f 4f       	sbci	r17, 0xFF	; 255
    7d7a:	20 e0       	ldi	r18, 0x00	; 0
    7d7c:	30 e0       	ldi	r19, 0x00	; 0
    7d7e:	40 e2       	ldi	r20, 0x20	; 32
    7d80:	51 e4       	ldi	r21, 0x41	; 65
    7d82:	c5 01       	movw	r24, r10
    7d84:	b4 01       	movw	r22, r8
    7d86:	0e 94 4b e5 	call	0x1ca96	; 0x1ca96 <__gesf2>
    7d8a:	87 fd       	sbrc	r24, 7
    7d8c:	0c c0       	rjmp	.+24     	; 0x7da6 <p_etoa+0x136>
    7d8e:	20 e0       	ldi	r18, 0x00	; 0
    7d90:	30 e0       	ldi	r19, 0x00	; 0
    7d92:	40 e2       	ldi	r20, 0x20	; 32
    7d94:	51 e4       	ldi	r21, 0x41	; 65
    7d96:	c5 01       	movw	r24, r10
    7d98:	b4 01       	movw	r22, r8
    7d9a:	0e 94 00 e4 	call	0x1c800	; 0x1c800 <__divsf3>
    7d9e:	4b 01       	movw	r8, r22
    7da0:	5c 01       	movw	r10, r24
    7da2:	28 01       	movw	r4, r16
    7da4:	e7 cf       	rjmp	.-50     	; 0x7d74 <p_etoa+0x104>
    7da6:	a7 01       	movw	r20, r14
    7da8:	96 01       	movw	r18, r12
    7daa:	c5 01       	movw	r24, r10
    7dac:	b4 01       	movw	r22, r8
    7dae:	0e 94 98 e3 	call	0x1c730	; 0x1c730 <__addsf3>
    7db2:	4b 01       	movw	r8, r22
    7db4:	5c 01       	movw	r10, r24
    7db6:	82 01       	movw	r16, r4
    7db8:	2f ef       	ldi	r18, 0xFF	; 255
    7dba:	42 1a       	sub	r4, r18
    7dbc:	52 0a       	sbc	r5, r18
    7dbe:	20 e0       	ldi	r18, 0x00	; 0
    7dc0:	30 e0       	ldi	r19, 0x00	; 0
    7dc2:	40 e2       	ldi	r20, 0x20	; 32
    7dc4:	51 e4       	ldi	r21, 0x41	; 65
    7dc6:	0e 94 4b e5 	call	0x1ca96	; 0x1ca96 <__gesf2>
    7dca:	87 fd       	sbrc	r24, 7
    7dcc:	09 c0       	rjmp	.+18     	; 0x7de0 <p_etoa+0x170>
    7dce:	20 e0       	ldi	r18, 0x00	; 0
    7dd0:	30 e0       	ldi	r19, 0x00	; 0
    7dd2:	40 e2       	ldi	r20, 0x20	; 32
    7dd4:	51 e4       	ldi	r21, 0x41	; 65
    7dd6:	c5 01       	movw	r24, r10
    7dd8:	b4 01       	movw	r22, r8
    7dda:	0e 94 00 e4 	call	0x1c800	; 0x1c800 <__divsf3>
    7dde:	e9 cf       	rjmp	.-46     	; 0x7db2 <p_etoa+0x142>
    7de0:	0e 87       	std	Y+14, r16	; 0x0e
    7de2:	1f 87       	std	Y+15, r17	; 0x0f
    7de4:	85 e6       	ldi	r24, 0x65	; 101
    7de6:	89 83       	std	Y+1, r24	; 0x01
    7de8:	8e 85       	ldd	r24, Y+14	; 0x0e
    7dea:	9f 85       	ldd	r25, Y+15	; 0x0f
    7dec:	97 ff       	sbrs	r25, 7
    7dee:	08 c0       	rjmp	.+16     	; 0x7e00 <p_etoa+0x190>
    7df0:	91 95       	neg	r25
    7df2:	81 95       	neg	r24
    7df4:	91 09       	sbc	r25, r1
    7df6:	9f 87       	std	Y+15, r25	; 0x0f
    7df8:	8e 87       	std	Y+14, r24	; 0x0e
    7dfa:	8d e2       	ldi	r24, 0x2D	; 45
    7dfc:	90 e0       	ldi	r25, 0x00	; 0
    7dfe:	02 c0       	rjmp	.+4      	; 0x7e04 <p_etoa+0x194>
    7e00:	8b e2       	ldi	r24, 0x2B	; 43
    7e02:	90 e0       	ldi	r25, 0x00	; 0
    7e04:	6c 01       	movw	r12, r24
    7e06:	82 e0       	ldi	r24, 0x02	; 2
    7e08:	e8 2e       	mov	r14, r24
    7e0a:	f1 2c       	mov	r15, r1
    7e0c:	8e 01       	movw	r16, r28
    7e0e:	02 5f       	subi	r16, 0xF2	; 242
    7e10:	1f 4f       	sbci	r17, 0xFF	; 255
    7e12:	2a e0       	ldi	r18, 0x0A	; 10
    7e14:	30 e0       	ldi	r19, 0x00	; 0
    7e16:	42 e0       	ldi	r20, 0x02	; 2
    7e18:	50 e0       	ldi	r21, 0x00	; 0
    7e1a:	65 e0       	ldi	r22, 0x05	; 5
    7e1c:	70 e0       	ldi	r23, 0x00	; 0
    7e1e:	ce 01       	movw	r24, r28
    7e20:	02 96       	adiw	r24, 0x02	; 2
    7e22:	26 dd       	rcall	.-1460   	; 0x7870 <bin2num>
    7e24:	9c 01       	movw	r18, r24
    7e26:	93 2d       	mov	r25, r3
    7e28:	98 72       	andi	r25, 0x28	; 40
    7e2a:	90 32       	cpi	r25, 0x20	; 32
    7e2c:	71 f0       	breq	.+28     	; 0x7e4a <p_etoa+0x1da>
    7e2e:	c5 01       	movw	r24, r10
    7e30:	b4 01       	movw	r22, r8
    7e32:	0e 94 68 e4 	call	0x1c8d0	; 0x1c8d0 <__fixsfsi>
    7e36:	6b 01       	movw	r12, r22
    7e38:	7c 01       	movw	r14, r24
    7e3a:	60 e3       	ldi	r22, 0x30	; 48
    7e3c:	6c 0d       	add	r22, r12
    7e3e:	ce 01       	movw	r24, r28
    7e40:	08 96       	adiw	r24, 0x08	; 8
    7e42:	9f dd       	rcall	.-1218   	; 0x7982 <pch>
    7e44:	21 10       	cpse	r2, r1
    7e46:	20 c0       	rjmp	.+64     	; 0x7e88 <p_etoa+0x218>
    7e48:	63 c0       	rjmp	.+198    	; 0x7f10 <p_etoa+0x2a0>
    7e4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    7e4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    7e4e:	0a 89       	ldd	r16, Y+18	; 0x12
    7e50:	1b 89       	ldd	r17, Y+19	; 0x13
    7e52:	08 1b       	sub	r16, r24
    7e54:	19 0b       	sbc	r17, r25
    7e56:	22 20       	and	r2, r2
    7e58:	41 f0       	breq	.+16     	; 0x7e6a <p_etoa+0x1fa>
    7e5a:	61 14       	cp	r6, r1
    7e5c:	71 04       	cpc	r7, r1
    7e5e:	29 f0       	breq	.+10     	; 0x7e6a <p_etoa+0x1fa>
    7e60:	06 19       	sub	r16, r6
    7e62:	17 09       	sbc	r17, r7
    7e64:	06 50       	subi	r16, 0x06	; 6
    7e66:	11 09       	sbc	r17, r1
    7e68:	02 c0       	rjmp	.+4      	; 0x7e6e <p_etoa+0x1fe>
    7e6a:	05 50       	subi	r16, 0x05	; 5
    7e6c:	11 09       	sbc	r17, r1
    7e6e:	24 30       	cpi	r18, 0x04	; 4
    7e70:	31 05       	cpc	r19, r1
    7e72:	14 f0       	brlt	.+4      	; 0x7e78 <p_etoa+0x208>
    7e74:	01 50       	subi	r16, 0x01	; 1
    7e76:	11 09       	sbc	r17, r1
    7e78:	10 16       	cp	r1, r16
    7e7a:	11 06       	cpc	r1, r17
    7e7c:	c4 f6       	brge	.-80     	; 0x7e2e <p_etoa+0x1be>
    7e7e:	60 e3       	ldi	r22, 0x30	; 48
    7e80:	ce 01       	movw	r24, r28
    7e82:	08 96       	adiw	r24, 0x08	; 8
    7e84:	7e dd       	rcall	.-1284   	; 0x7982 <pch>
    7e86:	f6 cf       	rjmp	.-20     	; 0x7e74 <p_etoa+0x204>
    7e88:	61 14       	cp	r6, r1
    7e8a:	71 04       	cpc	r7, r1
    7e8c:	09 f4       	brne	.+2      	; 0x7e90 <p_etoa+0x220>
    7e8e:	40 c0       	rjmp	.+128    	; 0x7f10 <p_etoa+0x2a0>
    7e90:	b6 01       	movw	r22, r12
    7e92:	dd 0c       	add	r13, r13
    7e94:	88 0b       	sbc	r24, r24
    7e96:	99 0b       	sbc	r25, r25
    7e98:	0e 94 9b e4 	call	0x1c936	; 0x1c936 <__floatsisf>
    7e9c:	9b 01       	movw	r18, r22
    7e9e:	ac 01       	movw	r20, r24
    7ea0:	c5 01       	movw	r24, r10
    7ea2:	b4 01       	movw	r22, r8
    7ea4:	0e 94 97 e3 	call	0x1c72e	; 0x1c72e <__subsf3>
    7ea8:	20 e0       	ldi	r18, 0x00	; 0
    7eaa:	30 e0       	ldi	r19, 0x00	; 0
    7eac:	40 e2       	ldi	r20, 0x20	; 32
    7eae:	51 e4       	ldi	r21, 0x41	; 65
    7eb0:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <__mulsf3>
    7eb4:	4b 01       	movw	r8, r22
    7eb6:	5c 01       	movw	r10, r24
    7eb8:	6e e2       	ldi	r22, 0x2E	; 46
    7eba:	ce 01       	movw	r24, r28
    7ebc:	08 96       	adiw	r24, 0x08	; 8
    7ebe:	61 dd       	rcall	.-1342   	; 0x7982 <pch>
    7ec0:	c5 01       	movw	r24, r10
    7ec2:	b4 01       	movw	r22, r8
    7ec4:	0e 94 68 e4 	call	0x1c8d0	; 0x1c8d0 <__fixsfsi>
    7ec8:	6b 01       	movw	r12, r22
    7eca:	7c 01       	movw	r14, r24
    7ecc:	07 2e       	mov	r0, r23
    7ece:	00 0c       	add	r0, r0
    7ed0:	88 0b       	sbc	r24, r24
    7ed2:	99 0b       	sbc	r25, r25
    7ed4:	0e 94 9b e4 	call	0x1c936	; 0x1c936 <__floatsisf>
    7ed8:	9b 01       	movw	r18, r22
    7eda:	ac 01       	movw	r20, r24
    7edc:	c5 01       	movw	r24, r10
    7ede:	b4 01       	movw	r22, r8
    7ee0:	0e 94 97 e3 	call	0x1c72e	; 0x1c72e <__subsf3>
    7ee4:	4b 01       	movw	r8, r22
    7ee6:	5c 01       	movw	r10, r24
    7ee8:	b6 01       	movw	r22, r12
    7eea:	60 5d       	subi	r22, 0xD0	; 208
    7eec:	7f 4f       	sbci	r23, 0xFF	; 255
    7eee:	ce 01       	movw	r24, r28
    7ef0:	08 96       	adiw	r24, 0x08	; 8
    7ef2:	47 dd       	rcall	.-1394   	; 0x7982 <pch>
    7ef4:	20 e0       	ldi	r18, 0x00	; 0
    7ef6:	30 e0       	ldi	r19, 0x00	; 0
    7ef8:	40 e2       	ldi	r20, 0x20	; 32
    7efa:	51 e4       	ldi	r21, 0x41	; 65
    7efc:	c5 01       	movw	r24, r10
    7efe:	b4 01       	movw	r22, r8
    7f00:	0e 94 4f e5 	call	0x1ca9e	; 0x1ca9e <__mulsf3>
    7f04:	4b 01       	movw	r8, r22
    7f06:	5c 01       	movw	r10, r24
    7f08:	31 e0       	ldi	r19, 0x01	; 1
    7f0a:	63 1a       	sub	r6, r19
    7f0c:	71 08       	sbc	r7, r1
    7f0e:	c1 f6       	brne	.-80     	; 0x7ec0 <p_etoa+0x250>
    7f10:	8e 01       	movw	r16, r28
    7f12:	0f 5f       	subi	r16, 0xFF	; 255
    7f14:	1f 4f       	sbci	r17, 0xFF	; 255
    7f16:	f8 01       	movw	r30, r16
    7f18:	61 91       	ld	r22, Z+
    7f1a:	8f 01       	movw	r16, r30
    7f1c:	ce 01       	movw	r24, r28
    7f1e:	08 96       	adiw	r24, 0x08	; 8
    7f20:	66 23       	and	r22, r22
    7f22:	11 f0       	breq	.+4      	; 0x7f28 <p_etoa+0x2b8>
    7f24:	2e dd       	rcall	.-1444   	; 0x7982 <pch>
    7f26:	f7 cf       	rjmp	.-18     	; 0x7f16 <p_etoa+0x2a6>
    7f28:	2c dd       	rcall	.-1448   	; 0x7982 <pch>
    7f2a:	e8 89       	ldd	r30, Y+16	; 0x10
    7f2c:	f9 89       	ldd	r31, Y+17	; 0x11
    7f2e:	01 90       	ld	r0, Z+
    7f30:	00 20       	and	r0, r0
    7f32:	e9 f7       	brne	.-6      	; 0x7f2e <p_etoa+0x2be>
    7f34:	cf 01       	movw	r24, r30
    7f36:	01 97       	sbiw	r24, 0x01	; 1
    7f38:	28 89       	ldd	r18, Y+16	; 0x10
    7f3a:	39 89       	ldd	r19, Y+17	; 0x11
    7f3c:	82 1b       	sub	r24, r18
    7f3e:	93 0b       	sbc	r25, r19
    7f40:	63 96       	adiw	r28, 0x13	; 19
    7f42:	e2 e1       	ldi	r30, 0x12	; 18
    7f44:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

00007f48 <_puts_pad>:
    7f48:	a0 e0       	ldi	r26, 0x00	; 0
    7f4a:	b0 e0       	ldi	r27, 0x00	; 0
    7f4c:	ea ea       	ldi	r30, 0xAA	; 170
    7f4e:	ff e3       	ldi	r31, 0x3F	; 63
    7f50:	0c 94 44 e3 	jmp	0x1c688	; 0x1c688 <__prologue_saves__+0xc>
    7f54:	6c 01       	movw	r12, r24
    7f56:	4b 01       	movw	r8, r22
    7f58:	79 01       	movw	r14, r18
    7f5a:	24 17       	cp	r18, r20
    7f5c:	35 07       	cpc	r19, r21
    7f5e:	24 f4       	brge	.+8      	; 0x7f68 <_puts_pad+0x20>
    7f60:	ea 01       	movw	r28, r20
    7f62:	c2 1b       	sub	r28, r18
    7f64:	d3 0b       	sbc	r29, r19
    7f66:	02 c0       	rjmp	.+4      	; 0x7f6c <_puts_pad+0x24>
    7f68:	c0 e0       	ldi	r28, 0x00	; 0
    7f6a:	d0 e0       	ldi	r29, 0x00	; 0
    7f6c:	01 15       	cp	r16, r1
    7f6e:	11 05       	cpc	r17, r1
    7f70:	49 f4       	brne	.+18     	; 0x7f84 <_puts_pad+0x3c>
    7f72:	21 97       	sbiw	r28, 0x01	; 1
    7f74:	38 f0       	brcs	.+14     	; 0x7f84 <_puts_pad+0x3c>
    7f76:	d6 01       	movw	r26, r12
    7f78:	ed 91       	ld	r30, X+
    7f7a:	fc 91       	ld	r31, X
    7f7c:	60 e2       	ldi	r22, 0x20	; 32
    7f7e:	c6 01       	movw	r24, r12
    7f80:	09 95       	icall
    7f82:	f7 cf       	rjmp	.-18     	; 0x7f72 <_puts_pad+0x2a>
    7f84:	54 01       	movw	r10, r8
    7f86:	f5 01       	movw	r30, r10
    7f88:	61 91       	ld	r22, Z+
    7f8a:	5f 01       	movw	r10, r30
    7f8c:	66 23       	and	r22, r22
    7f8e:	61 f0       	breq	.+24     	; 0x7fa8 <_puts_pad+0x60>
    7f90:	e1 14       	cp	r14, r1
    7f92:	f1 04       	cpc	r15, r1
    7f94:	49 f0       	breq	.+18     	; 0x7fa8 <_puts_pad+0x60>
    7f96:	d6 01       	movw	r26, r12
    7f98:	ed 91       	ld	r30, X+
    7f9a:	fc 91       	ld	r31, X
    7f9c:	c6 01       	movw	r24, r12
    7f9e:	09 95       	icall
    7fa0:	b1 e0       	ldi	r27, 0x01	; 1
    7fa2:	eb 1a       	sub	r14, r27
    7fa4:	f1 08       	sbc	r15, r1
    7fa6:	ef cf       	rjmp	.-34     	; 0x7f86 <_puts_pad+0x3e>
    7fa8:	01 15       	cp	r16, r1
    7faa:	11 05       	cpc	r17, r1
    7fac:	51 f0       	breq	.+20     	; 0x7fc2 <_puts_pad+0x7a>
    7fae:	20 97       	sbiw	r28, 0x00	; 0
    7fb0:	41 f0       	breq	.+16     	; 0x7fc2 <_puts_pad+0x7a>
    7fb2:	d6 01       	movw	r26, r12
    7fb4:	ed 91       	ld	r30, X+
    7fb6:	fc 91       	ld	r31, X
    7fb8:	60 e2       	ldi	r22, 0x20	; 32
    7fba:	c6 01       	movw	r24, r12
    7fbc:	09 95       	icall
    7fbe:	21 97       	sbiw	r28, 0x01	; 1
    7fc0:	f6 cf       	rjmp	.-20     	; 0x7fae <_puts_pad+0x66>
    7fc2:	cd b7       	in	r28, 0x3d	; 61
    7fc4:	de b7       	in	r29, 0x3e	; 62
    7fc6:	ec e0       	ldi	r30, 0x0C	; 12
    7fc8:	0c 94 60 e3 	jmp	0x1c6c0	; 0x1c6c0 <__epilogue_restores__+0xc>

00007fcc <_puts_pad_X>:
    7fcc:	2f 92       	push	r2
    7fce:	3f 92       	push	r3
    7fd0:	4f 92       	push	r4
    7fd2:	6f 92       	push	r6
    7fd4:	7f 92       	push	r7
    7fd6:	8f 92       	push	r8
    7fd8:	cf 92       	push	r12
    7fda:	df 92       	push	r13
    7fdc:	ef 92       	push	r14
    7fde:	ff 92       	push	r15
    7fe0:	0f 93       	push	r16
    7fe2:	1f 93       	push	r17
    7fe4:	cf 93       	push	r28
    7fe6:	df 93       	push	r29
    7fe8:	6c 01       	movw	r12, r24
    7fea:	3a 01       	movw	r6, r20
    7fec:	86 2e       	mov	r8, r22
    7fee:	02 17       	cp	r16, r18
    7ff0:	13 07       	cpc	r17, r19
    7ff2:	24 f4       	brge	.+8      	; 0x7ffc <_puts_pad_X+0x30>
    7ff4:	e9 01       	movw	r28, r18
    7ff6:	c0 1b       	sub	r28, r16
    7ff8:	d1 0b       	sbc	r29, r17
    7ffa:	02 c0       	rjmp	.+4      	; 0x8000 <_puts_pad_X+0x34>
    7ffc:	c0 e0       	ldi	r28, 0x00	; 0
    7ffe:	d0 e0       	ldi	r29, 0x00	; 0
    8000:	e1 14       	cp	r14, r1
    8002:	f1 04       	cpc	r15, r1
    8004:	49 f4       	brne	.+18     	; 0x8018 <_puts_pad_X+0x4c>
    8006:	21 97       	sbiw	r28, 0x01	; 1
    8008:	38 f0       	brcs	.+14     	; 0x8018 <_puts_pad_X+0x4c>
    800a:	d6 01       	movw	r26, r12
    800c:	ed 91       	ld	r30, X+
    800e:	fc 91       	ld	r31, X
    8010:	60 e2       	ldi	r22, 0x20	; 32
    8012:	c6 01       	movw	r24, r12
    8014:	09 95       	icall
    8016:	f7 cf       	rjmp	.-18     	; 0x8006 <_puts_pad_X+0x3a>
    8018:	13 01       	movw	r2, r6
    801a:	48 2c       	mov	r4, r8
    801c:	20 0e       	add	r2, r16
    801e:	31 1e       	adc	r3, r17
    8020:	41 1c       	adc	r4, r1
    8022:	17 fd       	sbrc	r17, 7
    8024:	4a 94       	dec	r4
    8026:	f3 01       	movw	r30, r6
    8028:	58 2d       	mov	r21, r8
    802a:	0e 94 75 e3 	call	0x1c6ea	; 0x1c6ea <__xload_1>
    802e:	66 23       	and	r22, r22
    8030:	71 f0       	breq	.+28     	; 0x804e <_puts_pad_X+0x82>
    8032:	62 14       	cp	r6, r2
    8034:	73 04       	cpc	r7, r3
    8036:	84 04       	cpc	r8, r4
    8038:	51 f0       	breq	.+20     	; 0x804e <_puts_pad_X+0x82>
    803a:	d6 01       	movw	r26, r12
    803c:	ed 91       	ld	r30, X+
    803e:	fc 91       	ld	r31, X
    8040:	c6 01       	movw	r24, r12
    8042:	09 95       	icall
    8044:	bf ef       	ldi	r27, 0xFF	; 255
    8046:	6b 1a       	sub	r6, r27
    8048:	7b 0a       	sbc	r7, r27
    804a:	8b 0a       	sbc	r8, r27
    804c:	ec cf       	rjmp	.-40     	; 0x8026 <_puts_pad_X+0x5a>
    804e:	ef 28       	or	r14, r15
    8050:	51 f0       	breq	.+20     	; 0x8066 <_puts_pad_X+0x9a>
    8052:	20 97       	sbiw	r28, 0x00	; 0
    8054:	41 f0       	breq	.+16     	; 0x8066 <_puts_pad_X+0x9a>
    8056:	d6 01       	movw	r26, r12
    8058:	ed 91       	ld	r30, X+
    805a:	fc 91       	ld	r31, X
    805c:	60 e2       	ldi	r22, 0x20	; 32
    805e:	c6 01       	movw	r24, r12
    8060:	09 95       	icall
    8062:	21 97       	sbiw	r28, 0x01	; 1
    8064:	f6 cf       	rjmp	.-20     	; 0x8052 <_puts_pad_X+0x86>
    8066:	df 91       	pop	r29
    8068:	cf 91       	pop	r28
    806a:	1f 91       	pop	r17
    806c:	0f 91       	pop	r16
    806e:	ff 90       	pop	r15
    8070:	ef 90       	pop	r14
    8072:	df 90       	pop	r13
    8074:	cf 90       	pop	r12
    8076:	8f 90       	pop	r8
    8078:	7f 90       	pop	r7
    807a:	6f 90       	pop	r6
    807c:	4f 90       	pop	r4
    807e:	3f 90       	pop	r3
    8080:	2f 90       	pop	r2
    8082:	08 95       	ret

00008084 <strlen_X>:
    8084:	cf 92       	push	r12
    8086:	df 92       	push	r13
    8088:	ef 92       	push	r14
    808a:	9b 01       	movw	r18, r22
    808c:	48 2f       	mov	r20, r24
    808e:	80 e0       	ldi	r24, 0x00	; 0
    8090:	90 e0       	ldi	r25, 0x00	; 0
    8092:	2f 5f       	subi	r18, 0xFF	; 255
    8094:	3f 4f       	sbci	r19, 0xFF	; 255
    8096:	4f 4f       	sbci	r20, 0xFF	; 255
    8098:	69 01       	movw	r12, r18
    809a:	e4 2e       	mov	r14, r20
    809c:	51 e0       	ldi	r21, 0x01	; 1
    809e:	c5 1a       	sub	r12, r21
    80a0:	d1 08       	sbc	r13, r1
    80a2:	e1 08       	sbc	r14, r1
    80a4:	f6 01       	movw	r30, r12
    80a6:	5e 2d       	mov	r21, r14
    80a8:	0e 94 75 e3 	call	0x1c6ea	; 0x1c6ea <__xload_1>
    80ac:	66 23       	and	r22, r22
    80ae:	11 f0       	breq	.+4      	; 0x80b4 <strlen_X+0x30>
    80b0:	01 96       	adiw	r24, 0x01	; 1
    80b2:	ef cf       	rjmp	.-34     	; 0x8092 <strlen_X+0xe>
    80b4:	ef 90       	pop	r14
    80b6:	df 90       	pop	r13
    80b8:	cf 90       	pop	r12
    80ba:	08 95       	ret

000080bc <_printf_fn>:
    80bc:	ae e6       	ldi	r26, 0x6E	; 110
    80be:	b0 e0       	ldi	r27, 0x00	; 0
    80c0:	e4 e6       	ldi	r30, 0x64	; 100
    80c2:	f0 e4       	ldi	r31, 0x40	; 64
    80c4:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
    80c8:	a5 96       	adiw	r28, 0x25	; 37
    80ca:	9f af       	std	Y+63, r25	; 0x3f
    80cc:	8e af       	std	Y+62, r24	; 0x3e
    80ce:	a5 97       	sbiw	r28, 0x25	; 37
    80d0:	6a 01       	movw	r12, r20
    80d2:	e6 2e       	mov	r14, r22
    80d4:	19 01       	movw	r2, r18
    80d6:	a9 96       	adiw	r28, 0x29	; 41
    80d8:	1c ae       	std	Y+60, r1	; 0x3c
    80da:	1d ae       	std	Y+61, r1	; 0x3d
    80dc:	1e ae       	std	Y+62, r1	; 0x3e
    80de:	1f ae       	std	Y+63, r1	; 0x3f
    80e0:	a9 97       	sbiw	r28, 0x29	; 41
    80e2:	8a e1       	ldi	r24, 0x1A	; 26
    80e4:	94 e0       	ldi	r25, 0x04	; 4
    80e6:	9c 01       	movw	r18, r24
    80e8:	40 e8       	ldi	r20, 0x80	; 128
    80ea:	ae 96       	adiw	r28, 0x2e	; 46
    80ec:	2d af       	std	Y+61, r18	; 0x3d
    80ee:	3e af       	std	Y+62, r19	; 0x3e
    80f0:	4f af       	std	Y+63, r20	; 0x3f
    80f2:	ae 97       	sbiw	r28, 0x2e	; 46
    80f4:	ae 01       	movw	r20, r28
    80f6:	4f 5a       	subi	r20, 0xAF	; 175
    80f8:	5f 4f       	sbci	r21, 0xFF	; 255
    80fa:	67 96       	adiw	r28, 0x17	; 23
    80fc:	5f af       	std	Y+63, r21	; 0x3f
    80fe:	4e af       	std	Y+62, r20	; 0x3e
    8100:	67 97       	sbiw	r28, 0x17	; 23
    8102:	ce 01       	movw	r24, r28
    8104:	8d 5b       	subi	r24, 0xBD	; 189
    8106:	9f 4f       	sbci	r25, 0xFF	; 255
    8108:	69 96       	adiw	r28, 0x19	; 25
    810a:	9f af       	std	Y+63, r25	; 0x3f
    810c:	8e af       	std	Y+62, r24	; 0x3e
    810e:	69 97       	sbiw	r28, 0x19	; 25
    8110:	de 01       	movw	r26, r28
    8112:	a5 5b       	subi	r26, 0xB5	; 181
    8114:	bf 4f       	sbci	r27, 0xFF	; 255
    8116:	6b 96       	adiw	r28, 0x1b	; 27
    8118:	bf af       	std	Y+63, r27	; 0x3f
    811a:	ae af       	std	Y+62, r26	; 0x3e
    811c:	6b 97       	sbiw	r28, 0x1b	; 27
    811e:	fe 01       	movw	r30, r28
    8120:	ed 5a       	subi	r30, 0xAD	; 173
    8122:	ff 4f       	sbci	r31, 0xFF	; 255
    8124:	6d 96       	adiw	r28, 0x1d	; 29
    8126:	ff af       	std	Y+63, r31	; 0x3f
    8128:	ee af       	std	Y+62, r30	; 0x3e
    812a:	6d 97       	sbiw	r28, 0x1d	; 29
    812c:	f6 01       	movw	r30, r12
    812e:	5e 2d       	mov	r21, r14
    8130:	0e 94 75 e3 	call	0x1c6ea	; 0x1c6ea <__xload_1>
    8134:	66 23       	and	r22, r22
    8136:	09 f4       	brne	.+2      	; 0x813a <_printf_fn+0x7e>
    8138:	13 c4       	rjmp	.+2086   	; 0x8960 <_printf_fn+0x8a4>
    813a:	ae 2d       	mov	r26, r14
    813c:	c6 01       	movw	r24, r12
    813e:	01 96       	adiw	r24, 0x01	; 1
    8140:	a1 1d       	adc	r26, r1
    8142:	3c 01       	movw	r6, r24
    8144:	8a 2e       	mov	r8, r26
    8146:	65 32       	cpi	r22, 0x25	; 37
    8148:	51 f0       	breq	.+20     	; 0x815e <_printf_fn+0xa2>
    814a:	a5 96       	adiw	r28, 0x25	; 37
    814c:	ae ad       	ldd	r26, Y+62	; 0x3e
    814e:	bf ad       	ldd	r27, Y+63	; 0x3f
    8150:	a5 97       	sbiw	r28, 0x25	; 37
    8152:	ed 91       	ld	r30, X+
    8154:	fc 91       	ld	r31, X
    8156:	11 97       	sbiw	r26, 0x01	; 1
    8158:	cd 01       	movw	r24, r26
    815a:	09 95       	icall
    815c:	d5 c3       	rjmp	.+1962   	; 0x8908 <_printf_fn+0x84c>
    815e:	91 2c       	mov	r9, r1
    8160:	f3 01       	movw	r30, r6
    8162:	58 2d       	mov	r21, r8
    8164:	0e 94 75 e3 	call	0x1c6ea	; 0x1c6ea <__xload_1>
    8168:	63 32       	cpi	r22, 0x23	; 35
    816a:	19 f4       	brne	.+6      	; 0x8172 <_printf_fn+0xb6>
    816c:	68 94       	set
    816e:	97 f8       	bld	r9, 7
    8170:	04 c0       	rjmp	.+8      	; 0x817a <_printf_fn+0xbe>
    8172:	6b 32       	cpi	r22, 0x2B	; 43
    8174:	39 f4       	brne	.+14     	; 0x8184 <_printf_fn+0xc8>
    8176:	68 94       	set
    8178:	92 f8       	bld	r9, 2
    817a:	bf ef       	ldi	r27, 0xFF	; 255
    817c:	6b 1a       	sub	r6, r27
    817e:	7b 0a       	sbc	r7, r27
    8180:	8b 0a       	sbc	r8, r27
    8182:	ee cf       	rjmp	.-36     	; 0x8160 <_printf_fn+0xa4>
    8184:	6d 32       	cpi	r22, 0x2D	; 45
    8186:	a9 f4       	brne	.+42     	; 0x81b2 <_printf_fn+0xf6>
    8188:	93 fc       	sbrc	r9, 3
    818a:	05 c0       	rjmp	.+10     	; 0x8196 <_printf_fn+0xda>
    818c:	6d 32       	cpi	r22, 0x2D	; 45
    818e:	19 f4       	brne	.+6      	; 0x8196 <_printf_fn+0xda>
    8190:	68 94       	set
    8192:	93 f8       	bld	r9, 3
    8194:	f2 cf       	rjmp	.-28     	; 0x817a <_printf_fn+0xbe>
    8196:	94 fc       	sbrc	r9, 4
    8198:	05 c0       	rjmp	.+10     	; 0x81a4 <_printf_fn+0xe8>
    819a:	60 32       	cpi	r22, 0x20	; 32
    819c:	19 f4       	brne	.+6      	; 0x81a4 <_printf_fn+0xe8>
    819e:	68 94       	set
    81a0:	94 f8       	bld	r9, 4
    81a2:	eb cf       	rjmp	.-42     	; 0x817a <_printf_fn+0xbe>
    81a4:	95 fc       	sbrc	r9, 5
    81a6:	e9 cf       	rjmp	.-46     	; 0x817a <_printf_fn+0xbe>
    81a8:	60 33       	cpi	r22, 0x30	; 48
    81aa:	39 f7       	brne	.-50     	; 0x817a <_printf_fn+0xbe>
    81ac:	68 94       	set
    81ae:	95 f8       	bld	r9, 5
    81b0:	e4 cf       	rjmp	.-56     	; 0x817a <_printf_fn+0xbe>
    81b2:	86 2f       	mov	r24, r22
    81b4:	8f 7e       	andi	r24, 0xEF	; 239
    81b6:	80 32       	cpi	r24, 0x20	; 32
    81b8:	39 f3       	breq	.-50     	; 0x8188 <_printf_fn+0xcc>
    81ba:	70 e0       	ldi	r23, 0x00	; 0
    81bc:	60 53       	subi	r22, 0x30	; 48
    81be:	71 09       	sbc	r23, r1
    81c0:	6f 96       	adiw	r28, 0x1f	; 31
    81c2:	1f ae       	std	Y+63, r1	; 0x3f
    81c4:	1e ae       	std	Y+62, r1	; 0x3e
    81c6:	6f 97       	sbiw	r28, 0x1f	; 31
    81c8:	6a 30       	cpi	r22, 0x0A	; 10
    81ca:	71 05       	cpc	r23, r1
    81cc:	10 f5       	brcc	.+68     	; 0x8212 <_printf_fn+0x156>
    81ce:	2a e0       	ldi	r18, 0x0A	; 10
    81d0:	f3 01       	movw	r30, r6
    81d2:	58 2d       	mov	r21, r8
    81d4:	0e 94 75 e3 	call	0x1c6ea	; 0x1c6ea <__xload_1>
    81d8:	70 e0       	ldi	r23, 0x00	; 0
    81da:	cb 01       	movw	r24, r22
    81dc:	c0 97       	sbiw	r24, 0x30	; 48
    81de:	0a 97       	sbiw	r24, 0x0a	; 10
    81e0:	b0 f4       	brcc	.+44     	; 0x820e <_printf_fn+0x152>
    81e2:	ef ef       	ldi	r30, 0xFF	; 255
    81e4:	6e 1a       	sub	r6, r30
    81e6:	7e 0a       	sbc	r7, r30
    81e8:	8e 0a       	sbc	r8, r30
    81ea:	6f 96       	adiw	r28, 0x1f	; 31
    81ec:	4e ad       	ldd	r20, Y+62	; 0x3e
    81ee:	5f ad       	ldd	r21, Y+63	; 0x3f
    81f0:	6f 97       	sbiw	r28, 0x1f	; 31
    81f2:	24 9f       	mul	r18, r20
    81f4:	c0 01       	movw	r24, r0
    81f6:	25 9f       	mul	r18, r21
    81f8:	90 0d       	add	r25, r0
    81fa:	11 24       	eor	r1, r1
    81fc:	68 0f       	add	r22, r24
    81fe:	79 1f       	adc	r23, r25
    8200:	cb 01       	movw	r24, r22
    8202:	c0 97       	sbiw	r24, 0x30	; 48
    8204:	6f 96       	adiw	r28, 0x1f	; 31
    8206:	9f af       	std	Y+63, r25	; 0x3f
    8208:	8e af       	std	Y+62, r24	; 0x3e
    820a:	6f 97       	sbiw	r28, 0x1f	; 31
    820c:	e1 cf       	rjmp	.-62     	; 0x81d0 <_printf_fn+0x114>
    820e:	68 94       	set
    8210:	90 f8       	bld	r9, 0
    8212:	f3 01       	movw	r30, r6
    8214:	58 2d       	mov	r21, r8
    8216:	0e 94 75 e3 	call	0x1c6ea	; 0x1c6ea <__xload_1>
    821a:	6e 32       	cpi	r22, 0x2E	; 46
    821c:	61 f5       	brne	.+88     	; 0x8276 <_printf_fn+0x1ba>
    821e:	9f ef       	ldi	r25, 0xFF	; 255
    8220:	69 1a       	sub	r6, r25
    8222:	79 0a       	sbc	r7, r25
    8224:	89 0a       	sbc	r8, r25
    8226:	a1 96       	adiw	r28, 0x21	; 33
    8228:	1f ae       	std	Y+63, r1	; 0x3f
    822a:	1e ae       	std	Y+62, r1	; 0x3e
    822c:	a1 97       	sbiw	r28, 0x21	; 33
    822e:	2a e0       	ldi	r18, 0x0A	; 10
    8230:	f3 01       	movw	r30, r6
    8232:	58 2d       	mov	r21, r8
    8234:	0e 94 75 e3 	call	0x1c6ea	; 0x1c6ea <__xload_1>
    8238:	70 e0       	ldi	r23, 0x00	; 0
    823a:	cb 01       	movw	r24, r22
    823c:	c0 97       	sbiw	r24, 0x30	; 48
    823e:	0a 97       	sbiw	r24, 0x0a	; 10
    8240:	b8 f4       	brcc	.+46     	; 0x8270 <_printf_fn+0x1b4>
    8242:	af ef       	ldi	r26, 0xFF	; 255
    8244:	6a 1a       	sub	r6, r26
    8246:	7a 0a       	sbc	r7, r26
    8248:	8a 0a       	sbc	r8, r26
    824a:	a1 96       	adiw	r28, 0x21	; 33
    824c:	ee ad       	ldd	r30, Y+62	; 0x3e
    824e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8250:	a1 97       	sbiw	r28, 0x21	; 33
    8252:	2e 9f       	mul	r18, r30
    8254:	c0 01       	movw	r24, r0
    8256:	2f 9f       	mul	r18, r31
    8258:	90 0d       	add	r25, r0
    825a:	11 24       	eor	r1, r1
    825c:	68 0f       	add	r22, r24
    825e:	79 1f       	adc	r23, r25
    8260:	ab 01       	movw	r20, r22
    8262:	40 53       	subi	r20, 0x30	; 48
    8264:	51 09       	sbc	r21, r1
    8266:	a1 96       	adiw	r28, 0x21	; 33
    8268:	5f af       	std	Y+63, r21	; 0x3f
    826a:	4e af       	std	Y+62, r20	; 0x3e
    826c:	a1 97       	sbiw	r28, 0x21	; 33
    826e:	e0 cf       	rjmp	.-64     	; 0x8230 <_printf_fn+0x174>
    8270:	68 94       	set
    8272:	91 f8       	bld	r9, 1
    8274:	04 c0       	rjmp	.+8      	; 0x827e <_printf_fn+0x1c2>
    8276:	a1 96       	adiw	r28, 0x21	; 33
    8278:	1f ae       	std	Y+63, r1	; 0x3f
    827a:	1e ae       	std	Y+62, r1	; 0x3e
    827c:	a1 97       	sbiw	r28, 0x21	; 33
    827e:	f3 01       	movw	r30, r6
    8280:	58 2d       	mov	r21, r8
    8282:	0e 94 75 e3 	call	0x1c6ea	; 0x1c6ea <__xload_1>
    8286:	69 34       	cpi	r22, 0x49	; 73
    8288:	91 f5       	brne	.+100    	; 0x82ee <_printf_fn+0x232>
    828a:	5f ef       	ldi	r21, 0xFF	; 255
    828c:	65 1a       	sub	r6, r21
    828e:	75 0a       	sbc	r7, r21
    8290:	85 0a       	sbc	r8, r21
    8292:	41 2c       	mov	r4, r1
    8294:	51 2c       	mov	r5, r1
    8296:	2a e0       	ldi	r18, 0x0A	; 10
    8298:	f3 01       	movw	r30, r6
    829a:	58 2d       	mov	r21, r8
    829c:	0e 94 75 e3 	call	0x1c6ea	; 0x1c6ea <__xload_1>
    82a0:	70 e0       	ldi	r23, 0x00	; 0
    82a2:	cb 01       	movw	r24, r22
    82a4:	c0 97       	sbiw	r24, 0x30	; 48
    82a6:	0a 97       	sbiw	r24, 0x0a	; 10
    82a8:	80 f4       	brcc	.+32     	; 0x82ca <_printf_fn+0x20e>
    82aa:	8f ef       	ldi	r24, 0xFF	; 255
    82ac:	68 1a       	sub	r6, r24
    82ae:	78 0a       	sbc	r7, r24
    82b0:	88 0a       	sbc	r8, r24
    82b2:	24 9d       	mul	r18, r4
    82b4:	c0 01       	movw	r24, r0
    82b6:	25 9d       	mul	r18, r5
    82b8:	90 0d       	add	r25, r0
    82ba:	11 24       	eor	r1, r1
    82bc:	68 0f       	add	r22, r24
    82be:	79 1f       	adc	r23, r25
    82c0:	2b 01       	movw	r4, r22
    82c2:	90 e3       	ldi	r25, 0x30	; 48
    82c4:	49 1a       	sub	r4, r25
    82c6:	51 08       	sbc	r5, r1
    82c8:	e7 cf       	rjmp	.-50     	; 0x8298 <_printf_fn+0x1dc>
    82ca:	41 14       	cp	r4, r1
    82cc:	51 04       	cpc	r5, r1
    82ce:	09 f4       	brne	.+2      	; 0x82d2 <_printf_fn+0x216>
    82d0:	40 c0       	rjmp	.+128    	; 0x8352 <_printf_fn+0x296>
    82d2:	c2 01       	movw	r24, r4
    82d4:	87 70       	andi	r24, 0x07	; 7
    82d6:	99 27       	eor	r25, r25
    82d8:	89 2b       	or	r24, r25
    82da:	c9 f5       	brne	.+114    	; 0x834e <_printf_fn+0x292>
    82dc:	63 e0       	ldi	r22, 0x03	; 3
    82de:	55 94       	asr	r5
    82e0:	47 94       	ror	r4
    82e2:	6a 95       	dec	r22
    82e4:	e1 f7       	brne	.-8      	; 0x82de <_printf_fn+0x222>
    82e6:	41 14       	cp	r4, r1
    82e8:	51 04       	cpc	r5, r1
    82ea:	99 f1       	breq	.+102    	; 0x8352 <_printf_fn+0x296>
    82ec:	21 c0       	rjmp	.+66     	; 0x8330 <_printf_fn+0x274>
    82ee:	68 36       	cpi	r22, 0x68	; 104
    82f0:	29 f4       	brne	.+10     	; 0x82fc <_printf_fn+0x240>
    82f2:	af ef       	ldi	r26, 0xFF	; 255
    82f4:	6a 1a       	sub	r6, r26
    82f6:	7a 0a       	sbc	r7, r26
    82f8:	8a 0a       	sbc	r8, r26
    82fa:	09 c3       	rjmp	.+1554   	; 0x890e <_printf_fn+0x852>
    82fc:	6c 36       	cpi	r22, 0x6C	; 108
    82fe:	09 f0       	breq	.+2      	; 0x8302 <_printf_fn+0x246>
    8300:	06 c3       	rjmp	.+1548   	; 0x890e <_printf_fn+0x852>
    8302:	a8 2d       	mov	r26, r8
    8304:	c3 01       	movw	r24, r6
    8306:	01 96       	adiw	r24, 0x01	; 1
    8308:	a1 1d       	adc	r26, r1
    830a:	fc 01       	movw	r30, r24
    830c:	5a 2f       	mov	r21, r26
    830e:	0e 94 75 e3 	call	0x1c6ea	; 0x1c6ea <__xload_1>
    8312:	6c 36       	cpi	r22, 0x6C	; 108
    8314:	31 f0       	breq	.+12     	; 0x8322 <_printf_fn+0x266>
    8316:	3c 01       	movw	r6, r24
    8318:	8a 2e       	mov	r8, r26
    831a:	54 e0       	ldi	r21, 0x04	; 4
    831c:	45 2e       	mov	r4, r21
    831e:	51 2c       	mov	r5, r1
    8320:	07 c0       	rjmp	.+14     	; 0x8330 <_printf_fn+0x274>
    8322:	b2 e0       	ldi	r27, 0x02	; 2
    8324:	6b 0e       	add	r6, r27
    8326:	71 1c       	adc	r7, r1
    8328:	81 1c       	adc	r8, r1
    832a:	48 e0       	ldi	r20, 0x08	; 8
    832c:	44 2e       	mov	r4, r20
    832e:	51 2c       	mov	r5, r1
    8330:	f3 01       	movw	r30, r6
    8332:	58 2d       	mov	r21, r8
    8334:	0e 94 75 e3 	call	0x1c6ea	; 0x1c6ea <__xload_1>
    8338:	e6 2f       	mov	r30, r22
    833a:	f0 e0       	ldi	r31, 0x00	; 0
    833c:	a3 96       	adiw	r28, 0x23	; 35
    833e:	ff af       	std	Y+63, r31	; 0x3f
    8340:	ee af       	std	Y+62, r30	; 0x3e
    8342:	a3 97       	sbiw	r28, 0x23	; 35
    8344:	e4 36       	cpi	r30, 0x64	; 100
    8346:	f1 05       	cpc	r31, r1
    8348:	09 f4       	brne	.+2      	; 0x834c <_printf_fn+0x290>
    834a:	e5 c2       	rjmp	.+1482   	; 0x8916 <_printf_fn+0x85a>
    834c:	06 c0       	rjmp	.+12     	; 0x835a <_printf_fn+0x29e>
    834e:	41 2c       	mov	r4, r1
    8350:	51 2c       	mov	r5, r1
    8352:	a3 96       	adiw	r28, 0x23	; 35
    8354:	1f ae       	std	Y+63, r1	; 0x3f
    8356:	1e ae       	std	Y+62, r1	; 0x3e
    8358:	a3 97       	sbiw	r28, 0x23	; 35
    835a:	31 e0       	ldi	r19, 0x01	; 1
    835c:	20 e0       	ldi	r18, 0x00	; 0
    835e:	a3 96       	adiw	r28, 0x23	; 35
    8360:	4e ad       	ldd	r20, Y+62	; 0x3e
    8362:	5f ad       	ldd	r21, Y+63	; 0x3f
    8364:	a3 97       	sbiw	r28, 0x23	; 35
    8366:	44 34       	cpi	r20, 0x44	; 68
    8368:	51 05       	cpc	r21, r1
    836a:	09 f0       	breq	.+2      	; 0x836e <_printf_fn+0x2b2>
    836c:	30 e0       	ldi	r19, 0x00	; 0
    836e:	83 2f       	mov	r24, r19
    8370:	92 2f       	mov	r25, r18
    8372:	a3 96       	adiw	r28, 0x23	; 35
    8374:	ee ad       	ldd	r30, Y+62	; 0x3e
    8376:	ff ad       	ldd	r31, Y+63	; 0x3f
    8378:	a3 97       	sbiw	r28, 0x23	; 35
    837a:	e2 54       	subi	r30, 0x42	; 66
    837c:	f1 09       	sbc	r31, r1
    837e:	e7 33       	cpi	r30, 0x37	; 55
    8380:	f1 05       	cpc	r31, r1
    8382:	08 f0       	brcs	.+2      	; 0x8386 <_printf_fn+0x2ca>
    8384:	57 c1       	rjmp	.+686    	; 0x8634 <_printf_fn+0x578>
    8386:	ea 5b       	subi	r30, 0xBA	; 186
    8388:	ff 4f       	sbci	r31, 0xFF	; 255
    838a:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__tablejump2__>
    838e:	32 e0       	ldi	r19, 0x02	; 2
    8390:	43 2e       	mov	r4, r19
    8392:	51 2c       	mov	r5, r1
    8394:	29 2d       	mov	r18, r9
    8396:	28 72       	andi	r18, 0x28	; 40
    8398:	28 32       	cpi	r18, 0x28	; 40
    839a:	11 f4       	brne	.+4      	; 0x83a0 <_printf_fn+0x2e4>
    839c:	e8 94       	clt
    839e:	95 f8       	bld	r9, 5
    83a0:	29 2d       	mov	r18, r9
    83a2:	22 72       	andi	r18, 0x22	; 34
    83a4:	22 32       	cpi	r18, 0x22	; 34
    83a6:	11 f4       	brne	.+4      	; 0x83ac <_printf_fn+0x2f0>
    83a8:	e8 94       	clt
    83aa:	95 f8       	bld	r9, 5
    83ac:	29 2d       	mov	r18, r9
    83ae:	21 72       	andi	r18, 0x21	; 33
    83b0:	21 32       	cpi	r18, 0x21	; 33
    83b2:	79 f4       	brne	.+30     	; 0x83d2 <_printf_fn+0x316>
    83b4:	a1 96       	adiw	r28, 0x21	; 33
    83b6:	ae ad       	ldd	r26, Y+62	; 0x3e
    83b8:	bf ad       	ldd	r27, Y+63	; 0x3f
    83ba:	a1 97       	sbiw	r28, 0x21	; 33
    83bc:	6f 96       	adiw	r28, 0x1f	; 31
    83be:	ee ad       	ldd	r30, Y+62	; 0x3e
    83c0:	ff ad       	ldd	r31, Y+63	; 0x3f
    83c2:	6f 97       	sbiw	r28, 0x1f	; 31
    83c4:	ae 17       	cp	r26, r30
    83c6:	bf 07       	cpc	r27, r31
    83c8:	24 f4       	brge	.+8      	; 0x83d2 <_printf_fn+0x316>
    83ca:	a1 96       	adiw	r28, 0x21	; 33
    83cc:	ff af       	std	Y+63, r31	; 0x3f
    83ce:	ee af       	std	Y+62, r30	; 0x3e
    83d0:	a1 97       	sbiw	r28, 0x21	; 33
    83d2:	29 2d       	mov	r18, r9
    83d4:	23 72       	andi	r18, 0x23	; 35
    83d6:	23 32       	cpi	r18, 0x23	; 35
    83d8:	79 f4       	brne	.+30     	; 0x83f8 <_printf_fn+0x33c>
    83da:	a1 96       	adiw	r28, 0x21	; 33
    83dc:	2e ad       	ldd	r18, Y+62	; 0x3e
    83de:	3f ad       	ldd	r19, Y+63	; 0x3f
    83e0:	a1 97       	sbiw	r28, 0x21	; 33
    83e2:	6f 96       	adiw	r28, 0x1f	; 31
    83e4:	4e ad       	ldd	r20, Y+62	; 0x3e
    83e6:	5f ad       	ldd	r21, Y+63	; 0x3f
    83e8:	6f 97       	sbiw	r28, 0x1f	; 31
    83ea:	24 17       	cp	r18, r20
    83ec:	35 07       	cpc	r19, r21
    83ee:	24 f4       	brge	.+8      	; 0x83f8 <_printf_fn+0x33c>
    83f0:	a1 96       	adiw	r28, 0x21	; 33
    83f2:	5f af       	std	Y+63, r21	; 0x3f
    83f4:	4e af       	std	Y+62, r20	; 0x3e
    83f6:	a1 97       	sbiw	r28, 0x21	; 33
    83f8:	e8 94       	clt
    83fa:	94 f8       	bld	r9, 4
    83fc:	e8 94       	clt
    83fe:	92 f8       	bld	r9, 2
    8400:	e8 94       	clt
    8402:	96 f8       	bld	r9, 6
    8404:	52 e0       	ldi	r21, 0x02	; 2
    8406:	45 16       	cp	r4, r21
    8408:	51 04       	cpc	r5, r1
    840a:	f9 f4       	brne	.+62     	; 0x844a <_printf_fn+0x38e>
    840c:	51 01       	movw	r10, r2
    840e:	82 e0       	ldi	r24, 0x02	; 2
    8410:	a8 0e       	add	r10, r24
    8412:	b1 1c       	adc	r11, r1
    8414:	d1 01       	movw	r26, r2
    8416:	8d 91       	ld	r24, X+
    8418:	9c 91       	ld	r25, X
    841a:	65 96       	adiw	r28, 0x15	; 21
    841c:	9f af       	std	Y+63, r25	; 0x3f
    841e:	8e af       	std	Y+62, r24	; 0x3e
    8420:	65 97       	sbiw	r28, 0x15	; 21
    8422:	a3 96       	adiw	r28, 0x23	; 35
    8424:	ee ad       	ldd	r30, Y+62	; 0x3e
    8426:	ff ad       	ldd	r31, Y+63	; 0x3f
    8428:	a3 97       	sbiw	r28, 0x23	; 35
    842a:	e4 34       	cpi	r30, 0x44	; 68
    842c:	f1 05       	cpc	r31, r1
    842e:	09 f0       	breq	.+2      	; 0x8432 <_printf_fn+0x376>
    8430:	ac c0       	rjmp	.+344    	; 0x858a <_printf_fn+0x4ce>
    8432:	97 ff       	sbrs	r25, 7
    8434:	a7 c0       	rjmp	.+334    	; 0x8584 <_printf_fn+0x4c8>
    8436:	68 94       	set
    8438:	96 f8       	bld	r9, 6
    843a:	91 95       	neg	r25
    843c:	81 95       	neg	r24
    843e:	91 09       	sbc	r25, r1
    8440:	65 96       	adiw	r28, 0x15	; 21
    8442:	9f af       	std	Y+63, r25	; 0x3f
    8444:	8e af       	std	Y+62, r24	; 0x3e
    8446:	65 97       	sbiw	r28, 0x15	; 21
    8448:	9d c0       	rjmp	.+314    	; 0x8584 <_printf_fn+0x4c8>
    844a:	f4 e0       	ldi	r31, 0x04	; 4
    844c:	4f 16       	cp	r4, r31
    844e:	51 04       	cpc	r5, r1
    8450:	59 f5       	brne	.+86     	; 0x84a8 <_printf_fn+0x3ec>
    8452:	51 01       	movw	r10, r2
    8454:	24 e0       	ldi	r18, 0x04	; 4
    8456:	a2 0e       	add	r10, r18
    8458:	b1 1c       	adc	r11, r1
    845a:	f1 01       	movw	r30, r2
    845c:	80 81       	ld	r24, Z
    845e:	91 81       	ldd	r25, Z+1	; 0x01
    8460:	a2 81       	ldd	r26, Z+2	; 0x02
    8462:	b3 81       	ldd	r27, Z+3	; 0x03
    8464:	2f 96       	adiw	r28, 0x0f	; 15
    8466:	8c af       	std	Y+60, r24	; 0x3c
    8468:	9d af       	std	Y+61, r25	; 0x3d
    846a:	ae af       	std	Y+62, r26	; 0x3e
    846c:	bf af       	std	Y+63, r27	; 0x3f
    846e:	2f 97       	sbiw	r28, 0x0f	; 15
    8470:	a3 96       	adiw	r28, 0x23	; 35
    8472:	2e ad       	ldd	r18, Y+62	; 0x3e
    8474:	3f ad       	ldd	r19, Y+63	; 0x3f
    8476:	a3 97       	sbiw	r28, 0x23	; 35
    8478:	24 34       	cpi	r18, 0x44	; 68
    847a:	31 05       	cpc	r19, r1
    847c:	09 f0       	breq	.+2      	; 0x8480 <_printf_fn+0x3c4>
    847e:	8f c0       	rjmp	.+286    	; 0x859e <_printf_fn+0x4e2>
    8480:	b7 ff       	sbrs	r27, 7
    8482:	8a c0       	rjmp	.+276    	; 0x8598 <_printf_fn+0x4dc>
    8484:	68 94       	set
    8486:	96 f8       	bld	r9, 6
    8488:	b0 95       	com	r27
    848a:	a0 95       	com	r26
    848c:	90 95       	com	r25
    848e:	81 95       	neg	r24
    8490:	9f 4f       	sbci	r25, 0xFF	; 255
    8492:	af 4f       	sbci	r26, 0xFF	; 255
    8494:	bf 4f       	sbci	r27, 0xFF	; 255
    8496:	2f 96       	adiw	r28, 0x0f	; 15
    8498:	8c af       	std	Y+60, r24	; 0x3c
    849a:	9d af       	std	Y+61, r25	; 0x3d
    849c:	ae af       	std	Y+62, r26	; 0x3e
    849e:	bf af       	std	Y+63, r27	; 0x3f
    84a0:	2f 97       	sbiw	r28, 0x0f	; 15
    84a2:	7a c0       	rjmp	.+244    	; 0x8598 <_printf_fn+0x4dc>
    84a4:	81 e0       	ldi	r24, 0x01	; 1
    84a6:	90 e0       	ldi	r25, 0x00	; 0
    84a8:	51 01       	movw	r10, r2
    84aa:	38 e0       	ldi	r19, 0x08	; 8
    84ac:	43 16       	cp	r4, r19
    84ae:	51 04       	cpc	r5, r1
    84b0:	09 f0       	breq	.+2      	; 0x84b4 <_printf_fn+0x3f8>
    84b2:	7c c0       	rjmp	.+248    	; 0x85ac <_printf_fn+0x4f0>
    84b4:	48 e0       	ldi	r20, 0x08	; 8
    84b6:	a4 0e       	add	r10, r20
    84b8:	b1 1c       	adc	r11, r1
    84ba:	d1 01       	movw	r26, r2
    84bc:	fc 90       	ld	r15, X
    84be:	f1 01       	movw	r30, r2
    84c0:	01 81       	ldd	r16, Z+1	; 0x01
    84c2:	12 81       	ldd	r17, Z+2	; 0x02
    84c4:	f3 81       	ldd	r31, Z+3	; 0x03
    84c6:	aa 96       	adiw	r28, 0x2a	; 42
    84c8:	ff af       	std	Y+63, r31	; 0x3f
    84ca:	aa 97       	sbiw	r28, 0x2a	; 42
    84cc:	f1 01       	movw	r30, r2
    84ce:	f4 81       	ldd	r31, Z+4	; 0x04
    84d0:	ab 96       	adiw	r28, 0x2b	; 43
    84d2:	ff af       	std	Y+63, r31	; 0x3f
    84d4:	ab 97       	sbiw	r28, 0x2b	; 43
    84d6:	f1 01       	movw	r30, r2
    84d8:	b5 81       	ldd	r27, Z+5	; 0x05
    84da:	f6 81       	ldd	r31, Z+6	; 0x06
    84dc:	af 96       	adiw	r28, 0x2f	; 47
    84de:	ff af       	std	Y+63, r31	; 0x3f
    84e0:	af 97       	sbiw	r28, 0x2f	; 47
    84e2:	f1 01       	movw	r30, r2
    84e4:	37 80       	ldd	r3, Z+7	; 0x07
    84e6:	24 96       	adiw	r28, 0x04	; 4
    84e8:	ff ae       	std	Y+63, r15	; 0x3f
    84ea:	24 97       	sbiw	r28, 0x04	; 4
    84ec:	25 96       	adiw	r28, 0x05	; 5
    84ee:	0f af       	std	Y+63, r16	; 0x3f
    84f0:	25 97       	sbiw	r28, 0x05	; 5
    84f2:	26 96       	adiw	r28, 0x06	; 6
    84f4:	1f af       	std	Y+63, r17	; 0x3f
    84f6:	26 97       	sbiw	r28, 0x06	; 6
    84f8:	aa 96       	adiw	r28, 0x2a	; 42
    84fa:	ff ad       	ldd	r31, Y+63	; 0x3f
    84fc:	aa 97       	sbiw	r28, 0x2a	; 42
    84fe:	27 96       	adiw	r28, 0x07	; 7
    8500:	ff af       	std	Y+63, r31	; 0x3f
    8502:	27 97       	sbiw	r28, 0x07	; 7
    8504:	ab 96       	adiw	r28, 0x2b	; 43
    8506:	ef ad       	ldd	r30, Y+63	; 0x3f
    8508:	ab 97       	sbiw	r28, 0x2b	; 43
    850a:	28 96       	adiw	r28, 0x08	; 8
    850c:	ef af       	std	Y+63, r30	; 0x3f
    850e:	28 97       	sbiw	r28, 0x08	; 8
    8510:	29 96       	adiw	r28, 0x09	; 9
    8512:	bf af       	std	Y+63, r27	; 0x3f
    8514:	29 97       	sbiw	r28, 0x09	; 9
    8516:	af 96       	adiw	r28, 0x2f	; 47
    8518:	ff ad       	ldd	r31, Y+63	; 0x3f
    851a:	af 97       	sbiw	r28, 0x2f	; 47
    851c:	2a 96       	adiw	r28, 0x0a	; 10
    851e:	ff af       	std	Y+63, r31	; 0x3f
    8520:	2a 97       	sbiw	r28, 0x0a	; 10
    8522:	2b 96       	adiw	r28, 0x0b	; 11
    8524:	3f ae       	std	Y+63, r3	; 0x3f
    8526:	2b 97       	sbiw	r28, 0x0b	; 11
    8528:	89 2b       	or	r24, r25
    852a:	09 f4       	brne	.+2      	; 0x852e <_printf_fn+0x472>
    852c:	4a c0       	rjmp	.+148    	; 0x85c2 <_printf_fn+0x506>
    852e:	2f 2d       	mov	r18, r15
    8530:	30 2f       	mov	r19, r16
    8532:	41 2f       	mov	r20, r17
    8534:	aa 96       	adiw	r28, 0x2a	; 42
    8536:	5f ad       	ldd	r21, Y+63	; 0x3f
    8538:	aa 97       	sbiw	r28, 0x2a	; 42
    853a:	6e 2f       	mov	r22, r30
    853c:	7b 2f       	mov	r23, r27
    853e:	8f 2f       	mov	r24, r31
    8540:	93 2d       	mov	r25, r3
    8542:	a0 e0       	ldi	r26, 0x00	; 0
    8544:	0e 94 7c e3 	call	0x1c6f8	; 0x1c6f8 <__cmpdi2_s8>
    8548:	e4 f5       	brge	.+120    	; 0x85c2 <_printf_fn+0x506>
    854a:	68 94       	set
    854c:	96 f8       	bld	r9, 6
    854e:	0e 94 2e e3 	call	0x1c65c	; 0x1c65c <__negdi2>
    8552:	24 96       	adiw	r28, 0x04	; 4
    8554:	2f af       	std	Y+63, r18	; 0x3f
    8556:	24 97       	sbiw	r28, 0x04	; 4
    8558:	25 96       	adiw	r28, 0x05	; 5
    855a:	3f af       	std	Y+63, r19	; 0x3f
    855c:	25 97       	sbiw	r28, 0x05	; 5
    855e:	26 96       	adiw	r28, 0x06	; 6
    8560:	4f af       	std	Y+63, r20	; 0x3f
    8562:	26 97       	sbiw	r28, 0x06	; 6
    8564:	27 96       	adiw	r28, 0x07	; 7
    8566:	5f af       	std	Y+63, r21	; 0x3f
    8568:	27 97       	sbiw	r28, 0x07	; 7
    856a:	28 96       	adiw	r28, 0x08	; 8
    856c:	6f af       	std	Y+63, r22	; 0x3f
    856e:	28 97       	sbiw	r28, 0x08	; 8
    8570:	29 96       	adiw	r28, 0x09	; 9
    8572:	7f af       	std	Y+63, r23	; 0x3f
    8574:	29 97       	sbiw	r28, 0x09	; 9
    8576:	2a 96       	adiw	r28, 0x0a	; 10
    8578:	8f af       	std	Y+63, r24	; 0x3f
    857a:	2a 97       	sbiw	r28, 0x0a	; 10
    857c:	2b 96       	adiw	r28, 0x0b	; 11
    857e:	9f af       	std	Y+63, r25	; 0x3f
    8580:	2b 97       	sbiw	r28, 0x0b	; 11
    8582:	1f c0       	rjmp	.+62     	; 0x85c2 <_printf_fn+0x506>
    8584:	22 e0       	ldi	r18, 0x02	; 2
    8586:	42 2e       	mov	r4, r18
    8588:	51 2c       	mov	r5, r1
    858a:	6c 96       	adiw	r28, 0x1c	; 28
    858c:	8f ad       	ldd	r24, Y+63	; 0x3f
    858e:	6c 97       	sbiw	r28, 0x1c	; 28
    8590:	6d 96       	adiw	r28, 0x1d	; 29
    8592:	9f ad       	ldd	r25, Y+63	; 0x3f
    8594:	6d 97       	sbiw	r28, 0x1d	; 29
    8596:	1b c0       	rjmp	.+54     	; 0x85ce <_printf_fn+0x512>
    8598:	94 e0       	ldi	r25, 0x04	; 4
    859a:	49 2e       	mov	r4, r25
    859c:	51 2c       	mov	r5, r1
    859e:	6a 96       	adiw	r28, 0x1a	; 26
    85a0:	8f ad       	ldd	r24, Y+63	; 0x3f
    85a2:	6a 97       	sbiw	r28, 0x1a	; 26
    85a4:	6b 96       	adiw	r28, 0x1b	; 27
    85a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    85a8:	6b 97       	sbiw	r28, 0x1b	; 27
    85aa:	11 c0       	rjmp	.+34     	; 0x85ce <_printf_fn+0x512>
    85ac:	66 96       	adiw	r28, 0x16	; 22
    85ae:	8f ad       	ldd	r24, Y+63	; 0x3f
    85b0:	66 97       	sbiw	r28, 0x16	; 22
    85b2:	67 96       	adiw	r28, 0x17	; 23
    85b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    85b6:	67 97       	sbiw	r28, 0x17	; 23
    85b8:	a3 96       	adiw	r28, 0x23	; 35
    85ba:	1f ae       	std	Y+63, r1	; 0x3f
    85bc:	1e ae       	std	Y+62, r1	; 0x3e
    85be:	a3 97       	sbiw	r28, 0x23	; 35
    85c0:	06 c0       	rjmp	.+12     	; 0x85ce <_printf_fn+0x512>
    85c2:	68 96       	adiw	r28, 0x18	; 24
    85c4:	8f ad       	ldd	r24, Y+63	; 0x3f
    85c6:	68 97       	sbiw	r28, 0x18	; 24
    85c8:	69 96       	adiw	r28, 0x19	; 25
    85ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    85cc:	69 97       	sbiw	r28, 0x19	; 25
    85ce:	2f ef       	ldi	r18, 0xFF	; 255
    85d0:	62 1a       	sub	r6, r18
    85d2:	72 0a       	sbc	r7, r18
    85d4:	82 0a       	sbc	r8, r18
    85d6:	15 01       	movw	r2, r10
    85d8:	33 c0       	rjmp	.+102    	; 0x8640 <_printf_fn+0x584>
    85da:	91 fc       	sbrc	r9, 1
    85dc:	08 c0       	rjmp	.+16     	; 0x85ee <_printf_fn+0x532>
    85de:	68 94       	set
    85e0:	91 f8       	bld	r9, 1
    85e2:	46 e0       	ldi	r20, 0x06	; 6
    85e4:	50 e0       	ldi	r21, 0x00	; 0
    85e6:	a1 96       	adiw	r28, 0x21	; 33
    85e8:	5f af       	std	Y+63, r21	; 0x3f
    85ea:	4e af       	std	Y+62, r20	; 0x3e
    85ec:	a1 97       	sbiw	r28, 0x21	; 33
    85ee:	d1 01       	movw	r26, r2
    85f0:	8d 91       	ld	r24, X+
    85f2:	9d 91       	ld	r25, X+
    85f4:	0d 90       	ld	r0, X+
    85f6:	bc 91       	ld	r27, X
    85f8:	a0 2d       	mov	r26, r0
    85fa:	a9 96       	adiw	r28, 0x29	; 41
    85fc:	8c af       	std	Y+60, r24	; 0x3c
    85fe:	9d af       	std	Y+61, r25	; 0x3d
    8600:	ae af       	std	Y+62, r26	; 0x3e
    8602:	bf af       	std	Y+63, r27	; 0x3f
    8604:	a9 97       	sbiw	r28, 0x29	; 41
    8606:	bf ef       	ldi	r27, 0xFF	; 255
    8608:	6b 1a       	sub	r6, r27
    860a:	7b 0a       	sbc	r7, r27
    860c:	8b 0a       	sbc	r8, r27
    860e:	f1 01       	movw	r30, r2
    8610:	34 96       	adiw	r30, 0x04	; 4
    8612:	1f 01       	movw	r2, r30
    8614:	0f c0       	rjmp	.+30     	; 0x8634 <_printf_fn+0x578>
    8616:	ff ef       	ldi	r31, 0xFF	; 255
    8618:	6f 1a       	sub	r6, r31
    861a:	7f 0a       	sbc	r7, r31
    861c:	8f 0a       	sbc	r8, r31
    861e:	c5 c0       	rjmp	.+394    	; 0x87aa <_printf_fn+0x6ee>
    8620:	2f ef       	ldi	r18, 0xFF	; 255
    8622:	62 1a       	sub	r6, r18
    8624:	72 0a       	sbc	r7, r18
    8626:	82 0a       	sbc	r8, r18
    8628:	11 c1       	rjmp	.+546    	; 0x884c <_printf_fn+0x790>
    862a:	3f ef       	ldi	r19, 0xFF	; 255
    862c:	63 1a       	sub	r6, r19
    862e:	73 0a       	sbc	r7, r19
    8630:	83 0a       	sbc	r8, r19
    8632:	c8 c0       	rjmp	.+400    	; 0x87c4 <_printf_fn+0x708>
    8634:	66 96       	adiw	r28, 0x16	; 22
    8636:	8f ad       	ldd	r24, Y+63	; 0x3f
    8638:	66 97       	sbiw	r28, 0x16	; 22
    863a:	67 96       	adiw	r28, 0x17	; 23
    863c:	9f ad       	ldd	r25, Y+63	; 0x3f
    863e:	67 97       	sbiw	r28, 0x17	; 23
    8640:	a3 96       	adiw	r28, 0x23	; 35
    8642:	ee ad       	ldd	r30, Y+62	; 0x3e
    8644:	ff ad       	ldd	r31, Y+63	; 0x3f
    8646:	a3 97       	sbiw	r28, 0x23	; 35
    8648:	e2 54       	subi	r30, 0x42	; 66
    864a:	f1 09       	sbc	r31, r1
    864c:	e7 33       	cpi	r30, 0x37	; 55
    864e:	f1 05       	cpc	r31, r1
    8650:	08 f0       	brcs	.+2      	; 0x8654 <_printf_fn+0x598>
    8652:	56 c1       	rjmp	.+684    	; 0x8900 <_printf_fn+0x844>
    8654:	e3 58       	subi	r30, 0x83	; 131
    8656:	ff 4f       	sbci	r31, 0xFF	; 255
    8658:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__tablejump2__>
    865c:	e8 94       	clt
    865e:	94 f8       	bld	r9, 4
    8660:	e8 94       	clt
    8662:	92 f8       	bld	r9, 2
    8664:	a9 2c       	mov	r10, r9
    8666:	b1 2c       	mov	r11, r1
    8668:	a1 96       	adiw	r28, 0x21	; 33
    866a:	ce ac       	ldd	r12, Y+62	; 0x3e
    866c:	df ac       	ldd	r13, Y+63	; 0x3f
    866e:	a1 97       	sbiw	r28, 0x21	; 33
    8670:	6f 96       	adiw	r28, 0x1f	; 31
    8672:	ee ac       	ldd	r14, Y+62	; 0x3e
    8674:	ff ac       	ldd	r15, Y+63	; 0x3f
    8676:	6f 97       	sbiw	r28, 0x1f	; 31
    8678:	0a e0       	ldi	r16, 0x0A	; 10
    867a:	10 e0       	ldi	r17, 0x00	; 0
    867c:	19 c0       	rjmp	.+50     	; 0x86b0 <_printf_fn+0x5f4>
    867e:	a9 2c       	mov	r10, r9
    8680:	b1 2c       	mov	r11, r1
    8682:	a1 96       	adiw	r28, 0x21	; 33
    8684:	ce ac       	ldd	r12, Y+62	; 0x3e
    8686:	df ac       	ldd	r13, Y+63	; 0x3f
    8688:	a1 97       	sbiw	r28, 0x21	; 33
    868a:	6f 96       	adiw	r28, 0x1f	; 31
    868c:	ee ac       	ldd	r14, Y+62	; 0x3e
    868e:	ff ac       	ldd	r15, Y+63	; 0x3f
    8690:	6f 97       	sbiw	r28, 0x1f	; 31
    8692:	02 e0       	ldi	r16, 0x02	; 2
    8694:	10 e0       	ldi	r17, 0x00	; 0
    8696:	0c c0       	rjmp	.+24     	; 0x86b0 <_printf_fn+0x5f4>
    8698:	a9 2c       	mov	r10, r9
    869a:	b1 2c       	mov	r11, r1
    869c:	a1 96       	adiw	r28, 0x21	; 33
    869e:	ce ac       	ldd	r12, Y+62	; 0x3e
    86a0:	df ac       	ldd	r13, Y+63	; 0x3f
    86a2:	a1 97       	sbiw	r28, 0x21	; 33
    86a4:	6f 96       	adiw	r28, 0x1f	; 31
    86a6:	ee ac       	ldd	r14, Y+62	; 0x3e
    86a8:	ff ac       	ldd	r15, Y+63	; 0x3f
    86aa:	6f 97       	sbiw	r28, 0x1f	; 31
    86ac:	08 e0       	ldi	r16, 0x08	; 8
    86ae:	10 e0       	ldi	r17, 0x00	; 0
    86b0:	22 e4       	ldi	r18, 0x42	; 66
    86b2:	30 e0       	ldi	r19, 0x00	; 0
    86b4:	ae 01       	movw	r20, r28
    86b6:	4f 5f       	subi	r20, 0xFF	; 255
    86b8:	5f 4f       	sbci	r21, 0xFF	; 255
    86ba:	b2 01       	movw	r22, r4
    86bc:	7d d9       	rcall	.-3334   	; 0x79b8 <p_ntoa>
    86be:	34 c0       	rjmp	.+104    	; 0x8728 <_printf_fn+0x66c>
    86c0:	a9 2c       	mov	r10, r9
    86c2:	b1 2c       	mov	r11, r1
    86c4:	a1 96       	adiw	r28, 0x21	; 33
    86c6:	ce ac       	ldd	r12, Y+62	; 0x3e
    86c8:	df ac       	ldd	r13, Y+63	; 0x3f
    86ca:	a1 97       	sbiw	r28, 0x21	; 33
    86cc:	6f 96       	adiw	r28, 0x1f	; 31
    86ce:	ee ac       	ldd	r14, Y+62	; 0x3e
    86d0:	ff ac       	ldd	r15, Y+63	; 0x3f
    86d2:	6f 97       	sbiw	r28, 0x1f	; 31
    86d4:	00 e1       	ldi	r16, 0x10	; 16
    86d6:	10 e0       	ldi	r17, 0x00	; 0
    86d8:	22 e4       	ldi	r18, 0x42	; 66
    86da:	30 e0       	ldi	r19, 0x00	; 0
    86dc:	ae 01       	movw	r20, r28
    86de:	4f 5f       	subi	r20, 0xFF	; 255
    86e0:	5f 4f       	sbci	r21, 0xFF	; 255
    86e2:	b2 01       	movw	r22, r4
    86e4:	69 d9       	rcall	.-3374   	; 0x79b8 <p_ntoa>
    86e6:	6c 01       	movw	r12, r24
    86e8:	a3 96       	adiw	r28, 0x23	; 35
    86ea:	6e ad       	ldd	r22, Y+62	; 0x3e
    86ec:	7f ad       	ldd	r23, Y+63	; 0x3f
    86ee:	a3 97       	sbiw	r28, 0x23	; 35
    86f0:	67 7f       	andi	r22, 0xF7	; 247
    86f2:	60 35       	cpi	r22, 0x50	; 80
    86f4:	71 05       	cpc	r23, r1
    86f6:	09 f0       	breq	.+2      	; 0x86fa <_printf_fn+0x63e>
    86f8:	3f c0       	rjmp	.+126    	; 0x8778 <_printf_fn+0x6bc>
    86fa:	3a c0       	rjmp	.+116    	; 0x8770 <_printf_fn+0x6b4>
    86fc:	c9 2c       	mov	r12, r9
    86fe:	d1 2c       	mov	r13, r1
    8700:	a1 96       	adiw	r28, 0x21	; 33
    8702:	ee ac       	ldd	r14, Y+62	; 0x3e
    8704:	ff ac       	ldd	r15, Y+63	; 0x3f
    8706:	a1 97       	sbiw	r28, 0x21	; 33
    8708:	6f 96       	adiw	r28, 0x1f	; 31
    870a:	0e ad       	ldd	r16, Y+62	; 0x3e
    870c:	1f ad       	ldd	r17, Y+63	; 0x3f
    870e:	6f 97       	sbiw	r28, 0x1f	; 31
    8710:	22 e4       	ldi	r18, 0x42	; 66
    8712:	30 e0       	ldi	r19, 0x00	; 0
    8714:	ae 01       	movw	r20, r28
    8716:	4f 5f       	subi	r20, 0xFF	; 255
    8718:	5f 4f       	sbci	r21, 0xFF	; 255
    871a:	a9 96       	adiw	r28, 0x29	; 41
    871c:	6c ad       	ldd	r22, Y+60	; 0x3c
    871e:	7d ad       	ldd	r23, Y+61	; 0x3d
    8720:	8e ad       	ldd	r24, Y+62	; 0x3e
    8722:	9f ad       	ldd	r25, Y+63	; 0x3f
    8724:	a9 97       	sbiw	r28, 0x29	; 41
    8726:	9d d9       	rcall	.-3270   	; 0x7a62 <p_ftoa>
    8728:	93 fa       	bst	r9, 3
    872a:	00 27       	eor	r16, r16
    872c:	00 f9       	bld	r16, 0
    872e:	10 e0       	ldi	r17, 0x00	; 0
    8730:	9c 01       	movw	r18, r24
    8732:	27 c0       	rjmp	.+78     	; 0x8782 <_printf_fn+0x6c6>
    8734:	c9 2c       	mov	r12, r9
    8736:	d1 2c       	mov	r13, r1
    8738:	a1 96       	adiw	r28, 0x21	; 33
    873a:	ee ac       	ldd	r14, Y+62	; 0x3e
    873c:	ff ac       	ldd	r15, Y+63	; 0x3f
    873e:	a1 97       	sbiw	r28, 0x21	; 33
    8740:	6f 96       	adiw	r28, 0x1f	; 31
    8742:	0e ad       	ldd	r16, Y+62	; 0x3e
    8744:	1f ad       	ldd	r17, Y+63	; 0x3f
    8746:	6f 97       	sbiw	r28, 0x1f	; 31
    8748:	22 e4       	ldi	r18, 0x42	; 66
    874a:	30 e0       	ldi	r19, 0x00	; 0
    874c:	ae 01       	movw	r20, r28
    874e:	4f 5f       	subi	r20, 0xFF	; 255
    8750:	5f 4f       	sbci	r21, 0xFF	; 255
    8752:	a9 96       	adiw	r28, 0x29	; 41
    8754:	6c ad       	ldd	r22, Y+60	; 0x3c
    8756:	7d ad       	ldd	r23, Y+61	; 0x3d
    8758:	8e ad       	ldd	r24, Y+62	; 0x3e
    875a:	9f ad       	ldd	r25, Y+63	; 0x3f
    875c:	a9 97       	sbiw	r28, 0x29	; 41
    875e:	88 da       	rcall	.-2800   	; 0x7c70 <p_etoa>
    8760:	6c 01       	movw	r12, r24
    8762:	a3 96       	adiw	r28, 0x23	; 35
    8764:	4e ad       	ldd	r20, Y+62	; 0x3e
    8766:	5f ad       	ldd	r21, Y+63	; 0x3f
    8768:	a3 97       	sbiw	r28, 0x23	; 35
    876a:	45 34       	cpi	r20, 0x45	; 69
    876c:	51 05       	cpc	r21, r1
    876e:	21 f4       	brne	.+8      	; 0x8778 <_printf_fn+0x6bc>
    8770:	ce 01       	movw	r24, r28
    8772:	01 96       	adiw	r24, 0x01	; 1
    8774:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <strupper>
    8778:	93 fa       	bst	r9, 3
    877a:	00 27       	eor	r16, r16
    877c:	00 f9       	bld	r16, 0
    877e:	10 e0       	ldi	r17, 0x00	; 0
    8780:	96 01       	movw	r18, r12
    8782:	6f 96       	adiw	r28, 0x1f	; 31
    8784:	4e ad       	ldd	r20, Y+62	; 0x3e
    8786:	5f ad       	ldd	r21, Y+63	; 0x3f
    8788:	6f 97       	sbiw	r28, 0x1f	; 31
    878a:	be 01       	movw	r22, r28
    878c:	6f 5f       	subi	r22, 0xFF	; 255
    878e:	7f 4f       	sbci	r23, 0xFF	; 255
    8790:	a5 96       	adiw	r28, 0x25	; 37
    8792:	8e ad       	ldd	r24, Y+62	; 0x3e
    8794:	9f ad       	ldd	r25, Y+63	; 0x3f
    8796:	a5 97       	sbiw	r28, 0x25	; 37
    8798:	d7 db       	rcall	.-2130   	; 0x7f48 <_puts_pad>
    879a:	b6 c0       	rjmp	.+364    	; 0x8908 <_printf_fn+0x84c>
    879c:	a3 96       	adiw	r28, 0x23	; 35
    879e:	8e ad       	ldd	r24, Y+62	; 0x3e
    87a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    87a2:	a3 97       	sbiw	r28, 0x23	; 35
    87a4:	83 37       	cpi	r24, 0x73	; 115
    87a6:	91 05       	cpc	r25, r1
    87a8:	69 f4       	brne	.+26     	; 0x87c4 <_printf_fn+0x708>
    87aa:	61 01       	movw	r12, r2
    87ac:	92 e0       	ldi	r25, 0x02	; 2
    87ae:	c9 0e       	add	r12, r25
    87b0:	d1 1c       	adc	r13, r1
    87b2:	d1 01       	movw	r26, r2
    87b4:	6d 91       	ld	r22, X+
    87b6:	7c 91       	ld	r23, X
    87b8:	61 15       	cp	r22, r1
    87ba:	71 05       	cpc	r23, r1
    87bc:	91 f4       	brne	.+36     	; 0x87e2 <_printf_fn+0x726>
    87be:	6a e1       	ldi	r22, 0x1A	; 26
    87c0:	74 e0       	ldi	r23, 0x04	; 4
    87c2:	0f c0       	rjmp	.+30     	; 0x87e2 <_printf_fn+0x726>
    87c4:	61 01       	movw	r12, r2
    87c6:	b2 e0       	ldi	r27, 0x02	; 2
    87c8:	cb 0e       	add	r12, r27
    87ca:	d1 1c       	adc	r13, r1
    87cc:	f1 01       	movw	r30, r2
    87ce:	80 81       	ld	r24, Z
    87d0:	60 96       	adiw	r28, 0x10	; 16
    87d2:	8f af       	std	Y+63, r24	; 0x3f
    87d4:	60 97       	sbiw	r28, 0x10	; 16
    87d6:	61 96       	adiw	r28, 0x11	; 17
    87d8:	1f ae       	std	Y+63, r1	; 0x3f
    87da:	61 97       	sbiw	r28, 0x11	; 17
    87dc:	be 01       	movw	r22, r28
    87de:	61 5b       	subi	r22, 0xB1	; 177
    87e0:	7f 4f       	sbci	r23, 0xFF	; 255
    87e2:	fb 01       	movw	r30, r22
    87e4:	01 90       	ld	r0, Z+
    87e6:	00 20       	and	r0, r0
    87e8:	e9 f7       	brne	.-6      	; 0x87e4 <_printf_fn+0x728>
    87ea:	31 97       	sbiw	r30, 0x01	; 1
    87ec:	e6 1b       	sub	r30, r22
    87ee:	f7 0b       	sbc	r31, r23
    87f0:	a1 96       	adiw	r28, 0x21	; 33
    87f2:	2e ad       	ldd	r18, Y+62	; 0x3e
    87f4:	3f ad       	ldd	r19, Y+63	; 0x3f
    87f6:	a1 97       	sbiw	r28, 0x21	; 33
    87f8:	23 2b       	or	r18, r19
    87fa:	21 f4       	brne	.+8      	; 0x8804 <_printf_fn+0x748>
    87fc:	a1 96       	adiw	r28, 0x21	; 33
    87fe:	ff af       	std	Y+63, r31	; 0x3f
    8800:	ee af       	std	Y+62, r30	; 0x3e
    8802:	a1 97       	sbiw	r28, 0x21	; 33
    8804:	6f 96       	adiw	r28, 0x1f	; 31
    8806:	4e ad       	ldd	r20, Y+62	; 0x3e
    8808:	5f ad       	ldd	r21, Y+63	; 0x3f
    880a:	6f 97       	sbiw	r28, 0x1f	; 31
    880c:	a1 96       	adiw	r28, 0x21	; 33
    880e:	8e ad       	ldd	r24, Y+62	; 0x3e
    8810:	9f ad       	ldd	r25, Y+63	; 0x3f
    8812:	a1 97       	sbiw	r28, 0x21	; 33
    8814:	48 17       	cp	r20, r24
    8816:	59 07       	cpc	r21, r25
    8818:	3c f4       	brge	.+14     	; 0x8828 <_printf_fn+0x76c>
    881a:	41 15       	cp	r20, r1
    881c:	51 05       	cpc	r21, r1
    881e:	21 f0       	breq	.+8      	; 0x8828 <_printf_fn+0x76c>
    8820:	a1 96       	adiw	r28, 0x21	; 33
    8822:	5f af       	std	Y+63, r21	; 0x3f
    8824:	4e af       	std	Y+62, r20	; 0x3e
    8826:	a1 97       	sbiw	r28, 0x21	; 33
    8828:	93 fa       	bst	r9, 3
    882a:	00 27       	eor	r16, r16
    882c:	00 f9       	bld	r16, 0
    882e:	10 e0       	ldi	r17, 0x00	; 0
    8830:	a1 96       	adiw	r28, 0x21	; 33
    8832:	2e ad       	ldd	r18, Y+62	; 0x3e
    8834:	3f ad       	ldd	r19, Y+63	; 0x3f
    8836:	a1 97       	sbiw	r28, 0x21	; 33
    8838:	6f 96       	adiw	r28, 0x1f	; 31
    883a:	4e ad       	ldd	r20, Y+62	; 0x3e
    883c:	5f ad       	ldd	r21, Y+63	; 0x3f
    883e:	6f 97       	sbiw	r28, 0x1f	; 31
    8840:	a5 96       	adiw	r28, 0x25	; 37
    8842:	8e ad       	ldd	r24, Y+62	; 0x3e
    8844:	9f ad       	ldd	r25, Y+63	; 0x3f
    8846:	a5 97       	sbiw	r28, 0x25	; 37
    8848:	7f db       	rcall	.-2306   	; 0x7f48 <_puts_pad>
    884a:	45 c0       	rjmp	.+138    	; 0x88d6 <_printf_fn+0x81a>
    884c:	61 01       	movw	r12, r2
    884e:	92 e0       	ldi	r25, 0x02	; 2
    8850:	c9 0e       	add	r12, r25
    8852:	d1 1c       	adc	r13, r1
    8854:	d1 01       	movw	r26, r2
    8856:	2d 90       	ld	r2, X+
    8858:	3c 90       	ld	r3, X
    885a:	41 2c       	mov	r4, r1
    885c:	21 14       	cp	r2, r1
    885e:	31 04       	cpc	r3, r1
    8860:	41 04       	cpc	r4, r1
    8862:	29 f4       	brne	.+10     	; 0x886e <_printf_fn+0x7b2>
    8864:	ae 96       	adiw	r28, 0x2e	; 46
    8866:	2d ac       	ldd	r2, Y+61	; 0x3d
    8868:	3e ac       	ldd	r3, Y+62	; 0x3e
    886a:	4f ac       	ldd	r4, Y+63	; 0x3f
    886c:	ae 97       	sbiw	r28, 0x2e	; 46
    886e:	84 2d       	mov	r24, r4
    8870:	b1 01       	movw	r22, r2
    8872:	08 dc       	rcall	.-2032   	; 0x8084 <strlen_X>
    8874:	a1 96       	adiw	r28, 0x21	; 33
    8876:	ee ad       	ldd	r30, Y+62	; 0x3e
    8878:	ff ad       	ldd	r31, Y+63	; 0x3f
    887a:	a1 97       	sbiw	r28, 0x21	; 33
    887c:	ef 2b       	or	r30, r31
    887e:	31 f4       	brne	.+12     	; 0x888c <_printf_fn+0x7d0>
    8880:	a0 96       	adiw	r28, 0x20	; 32
    8882:	8f af       	std	Y+63, r24	; 0x3f
    8884:	a0 97       	sbiw	r28, 0x20	; 32
    8886:	a1 96       	adiw	r28, 0x21	; 33
    8888:	9f af       	std	Y+63, r25	; 0x3f
    888a:	a1 97       	sbiw	r28, 0x21	; 33
    888c:	6f 96       	adiw	r28, 0x1f	; 31
    888e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8890:	3f ad       	ldd	r19, Y+63	; 0x3f
    8892:	6f 97       	sbiw	r28, 0x1f	; 31
    8894:	a1 96       	adiw	r28, 0x21	; 33
    8896:	4e ad       	ldd	r20, Y+62	; 0x3e
    8898:	5f ad       	ldd	r21, Y+63	; 0x3f
    889a:	a1 97       	sbiw	r28, 0x21	; 33
    889c:	24 17       	cp	r18, r20
    889e:	35 07       	cpc	r19, r21
    88a0:	3c f4       	brge	.+14     	; 0x88b0 <_printf_fn+0x7f4>
    88a2:	21 15       	cp	r18, r1
    88a4:	31 05       	cpc	r19, r1
    88a6:	21 f0       	breq	.+8      	; 0x88b0 <_printf_fn+0x7f4>
    88a8:	a1 96       	adiw	r28, 0x21	; 33
    88aa:	3f af       	std	Y+63, r19	; 0x3f
    88ac:	2e af       	std	Y+62, r18	; 0x3e
    88ae:	a1 97       	sbiw	r28, 0x21	; 33
    88b0:	93 fa       	bst	r9, 3
    88b2:	ee 24       	eor	r14, r14
    88b4:	e0 f8       	bld	r14, 0
    88b6:	f1 2c       	mov	r15, r1
    88b8:	a1 96       	adiw	r28, 0x21	; 33
    88ba:	0e ad       	ldd	r16, Y+62	; 0x3e
    88bc:	1f ad       	ldd	r17, Y+63	; 0x3f
    88be:	a1 97       	sbiw	r28, 0x21	; 33
    88c0:	6f 96       	adiw	r28, 0x1f	; 31
    88c2:	2e ad       	ldd	r18, Y+62	; 0x3e
    88c4:	3f ad       	ldd	r19, Y+63	; 0x3f
    88c6:	6f 97       	sbiw	r28, 0x1f	; 31
    88c8:	64 2d       	mov	r22, r4
    88ca:	a1 01       	movw	r20, r2
    88cc:	a5 96       	adiw	r28, 0x25	; 37
    88ce:	8e ad       	ldd	r24, Y+62	; 0x3e
    88d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    88d2:	a5 97       	sbiw	r28, 0x25	; 37
    88d4:	7b db       	rcall	.-2314   	; 0x7fcc <_puts_pad_X>
    88d6:	16 01       	movw	r2, r12
    88d8:	17 c0       	rjmp	.+46     	; 0x8908 <_printf_fn+0x84c>
    88da:	f6 01       	movw	r30, r12
    88dc:	5e 2d       	mov	r21, r14
    88de:	0e 94 75 e3 	call	0x1c6ea	; 0x1c6ea <__xload_1>
    88e2:	66 23       	and	r22, r22
    88e4:	89 f0       	breq	.+34     	; 0x8908 <_printf_fn+0x84c>
    88e6:	5f ef       	ldi	r21, 0xFF	; 255
    88e8:	c5 1a       	sub	r12, r21
    88ea:	d5 0a       	sbc	r13, r21
    88ec:	e5 0a       	sbc	r14, r21
    88ee:	a5 96       	adiw	r28, 0x25	; 37
    88f0:	ae ad       	ldd	r26, Y+62	; 0x3e
    88f2:	bf ad       	ldd	r27, Y+63	; 0x3f
    88f4:	a5 97       	sbiw	r28, 0x25	; 37
    88f6:	ed 91       	ld	r30, X+
    88f8:	fc 91       	ld	r31, X
    88fa:	11 97       	sbiw	r26, 0x01	; 1
    88fc:	cd 01       	movw	r24, r26
    88fe:	09 95       	icall
    8900:	6c 14       	cp	r6, r12
    8902:	7d 04       	cpc	r7, r13
    8904:	8e 04       	cpc	r8, r14
    8906:	48 f7       	brcc	.-46     	; 0x88da <_printf_fn+0x81e>
    8908:	e8 2c       	mov	r14, r8
    890a:	63 01       	movw	r12, r6
    890c:	0f cc       	rjmp	.-2018   	; 0x812c <_printf_fn+0x70>
    890e:	82 e0       	ldi	r24, 0x02	; 2
    8910:	48 2e       	mov	r4, r24
    8912:	51 2c       	mov	r5, r1
    8914:	0d cd       	rjmp	.-1510   	; 0x8330 <_printf_fn+0x274>
    8916:	f2 e0       	ldi	r31, 0x02	; 2
    8918:	4f 16       	cp	r4, r31
    891a:	51 04       	cpc	r5, r1
    891c:	61 f4       	brne	.+24     	; 0x8936 <_printf_fn+0x87a>
    891e:	51 01       	movw	r10, r2
    8920:	b2 e0       	ldi	r27, 0x02	; 2
    8922:	ab 0e       	add	r10, r27
    8924:	b1 1c       	adc	r11, r1
    8926:	f1 01       	movw	r30, r2
    8928:	80 81       	ld	r24, Z
    892a:	91 81       	ldd	r25, Z+1	; 0x01
    892c:	65 96       	adiw	r28, 0x15	; 21
    892e:	9f af       	std	Y+63, r25	; 0x3f
    8930:	8e af       	std	Y+62, r24	; 0x3e
    8932:	65 97       	sbiw	r28, 0x15	; 21
    8934:	7e cd       	rjmp	.-1284   	; 0x8432 <_printf_fn+0x376>
    8936:	f4 e0       	ldi	r31, 0x04	; 4
    8938:	4f 16       	cp	r4, r31
    893a:	51 04       	cpc	r5, r1
    893c:	09 f0       	breq	.+2      	; 0x8940 <_printf_fn+0x884>
    893e:	b2 cd       	rjmp	.-1180   	; 0x84a4 <_printf_fn+0x3e8>
    8940:	51 01       	movw	r10, r2
    8942:	24 e0       	ldi	r18, 0x04	; 4
    8944:	a2 0e       	add	r10, r18
    8946:	b1 1c       	adc	r11, r1
    8948:	f1 01       	movw	r30, r2
    894a:	80 81       	ld	r24, Z
    894c:	91 81       	ldd	r25, Z+1	; 0x01
    894e:	a2 81       	ldd	r26, Z+2	; 0x02
    8950:	b3 81       	ldd	r27, Z+3	; 0x03
    8952:	2f 96       	adiw	r28, 0x0f	; 15
    8954:	8c af       	std	Y+60, r24	; 0x3c
    8956:	9d af       	std	Y+61, r25	; 0x3d
    8958:	ae af       	std	Y+62, r26	; 0x3e
    895a:	bf af       	std	Y+63, r27	; 0x3f
    895c:	2f 97       	sbiw	r28, 0x0f	; 15
    895e:	90 cd       	rjmp	.-1248   	; 0x8480 <_printf_fn+0x3c4>
    8960:	c2 59       	subi	r28, 0x92	; 146
    8962:	df 4f       	sbci	r29, 0xFF	; 255
    8964:	e2 e1       	ldi	r30, 0x12	; 18
    8966:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

0000896a <vsnprintf_P>:
    896a:	a8 e0       	ldi	r26, 0x08	; 8
    896c:	b0 e0       	ldi	r27, 0x00	; 0
    896e:	eb eb       	ldi	r30, 0xBB	; 187
    8970:	f4 e4       	ldi	r31, 0x44	; 68
    8972:	0c 94 4a e3 	jmp	0x1c694	; 0x1c694 <__prologue_saves__+0x18>
    8976:	7c 01       	movw	r14, r24
    8978:	cb 01       	movw	r24, r22
    897a:	64 2f       	mov	r22, r20
    897c:	a9 01       	movw	r20, r18
    897e:	98 01       	movw	r18, r16
    8980:	f7 01       	movw	r30, r14
    8982:	10 82       	st	Z, r1
    8984:	e3 e1       	ldi	r30, 0x13	; 19
    8986:	fc e3       	ldi	r31, 0x3C	; 60
    8988:	fa 83       	std	Y+2, r31	; 0x02
    898a:	e9 83       	std	Y+1, r30	; 0x01
    898c:	9e 83       	std	Y+6, r25	; 0x06
    898e:	8d 83       	std	Y+5, r24	; 0x05
    8990:	18 86       	std	Y+8, r1	; 0x08
    8992:	1f 82       	std	Y+7, r1	; 0x07
    8994:	fc 82       	std	Y+4, r15	; 0x04
    8996:	eb 82       	std	Y+3, r14	; 0x03
    8998:	ce 01       	movw	r24, r28
    899a:	01 96       	adiw	r24, 0x01	; 1
    899c:	8f db       	rcall	.-2274   	; 0x80bc <_printf_fn>
    899e:	f7 01       	movw	r30, r14
    89a0:	01 90       	ld	r0, Z+
    89a2:	00 20       	and	r0, r0
    89a4:	e9 f7       	brne	.-6      	; 0x89a0 <vsnprintf_P+0x36>
    89a6:	cf 01       	movw	r24, r30
    89a8:	01 97       	sbiw	r24, 0x01	; 1
    89aa:	8e 19       	sub	r24, r14
    89ac:	9f 09       	sbc	r25, r15
    89ae:	28 96       	adiw	r28, 0x08	; 8
    89b0:	e6 e0       	ldi	r30, 0x06	; 6
    89b2:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

000089b6 <snprintf_P>:
    89b6:	a0 e0       	ldi	r26, 0x00	; 0
    89b8:	b0 e0       	ldi	r27, 0x00	; 0
    89ba:	e1 ee       	ldi	r30, 0xE1	; 225
    89bc:	f4 e4       	ldi	r31, 0x44	; 68
    89be:	0c 94 4c e3 	jmp	0x1c698	; 0x1c698 <__prologue_saves__+0x1c>
    89c2:	8e 01       	movw	r16, r28
    89c4:	02 5f       	subi	r16, 0xF2	; 242
    89c6:	1f 4f       	sbci	r17, 0xFF	; 255
    89c8:	2b 85       	ldd	r18, Y+11	; 0x0b
    89ca:	3c 85       	ldd	r19, Y+12	; 0x0c
    89cc:	4d 85       	ldd	r20, Y+13	; 0x0d
    89ce:	69 85       	ldd	r22, Y+9	; 0x09
    89d0:	7a 85       	ldd	r23, Y+10	; 0x0a
    89d2:	8f 81       	ldd	r24, Y+7	; 0x07
    89d4:	98 85       	ldd	r25, Y+8	; 0x08
    89d6:	c9 df       	rcall	.-110    	; 0x896a <vsnprintf_P>
    89d8:	e4 e0       	ldi	r30, 0x04	; 4
    89da:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

000089de <sprintf_P>:
    89de:	a0 e0       	ldi	r26, 0x00	; 0
    89e0:	b0 e0       	ldi	r27, 0x00	; 0
    89e2:	e5 ef       	ldi	r30, 0xF5	; 245
    89e4:	f4 e4       	ldi	r31, 0x44	; 68
    89e6:	0c 94 4c e3 	jmp	0x1c698	; 0x1c698 <__prologue_saves__+0x1c>
    89ea:	8e 01       	movw	r16, r28
    89ec:	04 5f       	subi	r16, 0xF4	; 244
    89ee:	1f 4f       	sbci	r17, 0xFF	; 255
    89f0:	29 85       	ldd	r18, Y+9	; 0x09
    89f2:	3a 85       	ldd	r19, Y+10	; 0x0a
    89f4:	4b 85       	ldd	r20, Y+11	; 0x0b
    89f6:	60 e0       	ldi	r22, 0x00	; 0
    89f8:	74 e0       	ldi	r23, 0x04	; 4
    89fa:	8f 81       	ldd	r24, Y+7	; 0x07
    89fc:	98 85       	ldd	r25, Y+8	; 0x08
    89fe:	b5 df       	rcall	.-150    	; 0x896a <vsnprintf_P>
    8a00:	e4 e0       	ldi	r30, 0x04	; 4
    8a02:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

00008a06 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    8a06:	a8 e0       	ldi	r26, 0x08	; 8
    8a08:	b0 e0       	ldi	r27, 0x00	; 0
    8a0a:	e9 e0       	ldi	r30, 0x09	; 9
    8a0c:	f5 e4       	ldi	r31, 0x45	; 69
    8a0e:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
    8a12:	9e 01       	movw	r18, r28
    8a14:	23 5f       	subi	r18, 0xF3	; 243
    8a16:	3f 4f       	sbci	r19, 0xFF	; 255
    8a18:	f9 01       	movw	r30, r18
    8a1a:	41 91       	ld	r20, Z+
    8a1c:	51 91       	ld	r21, Z+
    8a1e:	61 91       	ld	r22, Z+
    8a20:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8a22:	8c e2       	ldi	r24, 0x2C	; 44
    8a24:	9c e3       	ldi	r25, 0x3C	; 60
    8a26:	9a 83       	std	Y+2, r25	; 0x02
    8a28:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8a2a:	18 86       	std	Y+8, r1	; 0x08
    8a2c:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8a2e:	ce 01       	movw	r24, r28
    8a30:	01 96       	adiw	r24, 0x01	; 1
    8a32:	44 db       	rcall	.-2424   	; 0x80bc <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8a34:	8f 81       	ldd	r24, Y+7	; 0x07
    8a36:	98 85       	ldd	r25, Y+8	; 0x08
    8a38:	28 96       	adiw	r28, 0x08	; 8
    8a3a:	e2 e0       	ldi	r30, 0x02	; 2
    8a3c:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00008a40 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8a40:	9c 01       	movw	r18, r24
    8a42:	20 53       	subi	r18, 0x30	; 48
    8a44:	31 09       	sbc	r19, r1
    8a46:	2a 30       	cpi	r18, 0x0A	; 10
    8a48:	31 05       	cpc	r19, r1
    8a4a:	10 f4       	brcc	.+4      	; 0x8a50 <atodigit+0x10>
    8a4c:	c9 01       	movw	r24, r18
    8a4e:	10 c0       	rjmp	.+32     	; 0x8a70 <atodigit+0x30>
    8a50:	9c 01       	movw	r18, r24
    8a52:	21 54       	subi	r18, 0x41	; 65
    8a54:	31 09       	sbc	r19, r1
    8a56:	26 30       	cpi	r18, 0x06	; 6
    8a58:	31 05       	cpc	r19, r1
    8a5a:	10 f4       	brcc	.+4      	; 0x8a60 <atodigit+0x20>
    8a5c:	c7 97       	sbiw	r24, 0x37	; 55
    8a5e:	08 c0       	rjmp	.+16     	; 0x8a70 <atodigit+0x30>
    8a60:	9c 01       	movw	r18, r24
    8a62:	21 56       	subi	r18, 0x61	; 97
    8a64:	31 09       	sbc	r19, r1
    8a66:	26 30       	cpi	r18, 0x06	; 6
    8a68:	31 05       	cpc	r19, r1
    8a6a:	28 f4       	brcc	.+10     	; 0x8a76 <atodigit+0x36>
    8a6c:	87 55       	subi	r24, 0x57	; 87
    8a6e:	91 09       	sbc	r25, r1
    8a70:	86 17       	cp	r24, r22
    8a72:	97 07       	cpc	r25, r23
    8a74:	14 f0       	brlt	.+4      	; 0x8a7a <atodigit+0x3a>
    8a76:	8f ef       	ldi	r24, 0xFF	; 255
    8a78:	9f ef       	ldi	r25, 0xFF	; 255
    8a7a:	08 95       	ret

00008a7c <strtol>:
    8a7c:	a0 e0       	ldi	r26, 0x00	; 0
    8a7e:	b0 e0       	ldi	r27, 0x00	; 0
    8a80:	e4 e4       	ldi	r30, 0x44	; 68
    8a82:	f5 e4       	ldi	r31, 0x45	; 69
    8a84:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
    8a88:	2b 01       	movw	r4, r22
    8a8a:	8a 01       	movw	r16, r20
    8a8c:	ec 01       	movw	r28, r24
    8a8e:	28 81       	ld	r18, Y
    8a90:	01 96       	adiw	r24, 0x01	; 1
    8a92:	20 32       	cpi	r18, 0x20	; 32
    8a94:	d9 f3       	breq	.-10     	; 0x8a8c <strtol+0x10>
    8a96:	29 30       	cpi	r18, 0x09	; 9
    8a98:	c9 f3       	breq	.-14     	; 0x8a8c <strtol+0x10>
    8a9a:	2d 32       	cpi	r18, 0x2D	; 45
    8a9c:	29 f4       	brne	.+10     	; 0x8aa8 <strtol+0x2c>
    8a9e:	ec 01       	movw	r28, r24
    8aa0:	66 24       	eor	r6, r6
    8aa2:	63 94       	inc	r6
    8aa4:	71 2c       	mov	r7, r1
    8aa6:	05 c0       	rjmp	.+10     	; 0x8ab2 <strtol+0x36>
    8aa8:	2b 32       	cpi	r18, 0x2B	; 43
    8aaa:	09 f4       	brne	.+2      	; 0x8aae <strtol+0x32>
    8aac:	ec 01       	movw	r28, r24
    8aae:	61 2c       	mov	r6, r1
    8ab0:	71 2c       	mov	r7, r1
    8ab2:	9e 01       	movw	r18, r28
    8ab4:	2f 5f       	subi	r18, 0xFF	; 255
    8ab6:	3f 4f       	sbci	r19, 0xFF	; 255
    8ab8:	88 81       	ld	r24, Y
    8aba:	80 33       	cpi	r24, 0x30	; 48
    8abc:	11 f4       	brne	.+4      	; 0x8ac2 <strtol+0x46>
    8abe:	e9 01       	movw	r28, r18
    8ac0:	f8 cf       	rjmp	.-16     	; 0x8ab2 <strtol+0x36>
    8ac2:	c1 2c       	mov	r12, r1
    8ac4:	d1 2c       	mov	r13, r1
    8ac6:	76 01       	movw	r14, r12
    8ac8:	48 01       	movw	r8, r16
    8aca:	01 2e       	mov	r0, r17
    8acc:	00 0c       	add	r0, r0
    8ace:	aa 08       	sbc	r10, r10
    8ad0:	bb 08       	sbc	r11, r11
    8ad2:	3c 2e       	mov	r3, r28
    8ad4:	2d 2e       	mov	r2, r29
    8ad6:	89 91       	ld	r24, Y+
    8ad8:	88 23       	and	r24, r24
    8ada:	31 f0       	breq	.+12     	; 0x8ae8 <strtol+0x6c>
    8adc:	b8 01       	movw	r22, r16
    8ade:	90 e0       	ldi	r25, 0x00	; 0
    8ae0:	af df       	rcall	.-162    	; 0x8a40 <atodigit>
    8ae2:	fc 01       	movw	r30, r24
    8ae4:	97 ff       	sbrs	r25, 7
    8ae6:	0c c0       	rjmp	.+24     	; 0x8b00 <strtol+0x84>
    8ae8:	61 14       	cp	r6, r1
    8aea:	71 04       	cpc	r7, r1
    8aec:	c1 f0       	breq	.+48     	; 0x8b1e <strtol+0xa2>
    8aee:	f0 94       	com	r15
    8af0:	e0 94       	com	r14
    8af2:	d0 94       	com	r13
    8af4:	c0 94       	com	r12
    8af6:	c1 1c       	adc	r12, r1
    8af8:	d1 1c       	adc	r13, r1
    8afa:	e1 1c       	adc	r14, r1
    8afc:	f1 1c       	adc	r15, r1
    8afe:	0f c0       	rjmp	.+30     	; 0x8b1e <strtol+0xa2>
    8b00:	a5 01       	movw	r20, r10
    8b02:	94 01       	movw	r18, r8
    8b04:	c7 01       	movw	r24, r14
    8b06:	b6 01       	movw	r22, r12
    8b08:	0e 94 8f e2 	call	0x1c51e	; 0x1c51e <__mulsi3>
    8b0c:	6f 01       	movw	r12, r30
    8b0e:	ff 0f       	add	r31, r31
    8b10:	ee 08       	sbc	r14, r14
    8b12:	ff 08       	sbc	r15, r15
    8b14:	c6 0e       	add	r12, r22
    8b16:	d7 1e       	adc	r13, r23
    8b18:	e8 1e       	adc	r14, r24
    8b1a:	f9 1e       	adc	r15, r25
    8b1c:	da cf       	rjmp	.-76     	; 0x8ad2 <strtol+0x56>
    8b1e:	41 14       	cp	r4, r1
    8b20:	51 04       	cpc	r5, r1
    8b22:	19 f0       	breq	.+6      	; 0x8b2a <strtol+0xae>
    8b24:	f2 01       	movw	r30, r4
    8b26:	30 82       	st	Z, r3
    8b28:	21 82       	std	Z+1, r2	; 0x01
    8b2a:	c7 01       	movw	r24, r14
    8b2c:	b6 01       	movw	r22, r12
    8b2e:	cd b7       	in	r28, 0x3d	; 61
    8b30:	de b7       	in	r29, 0x3e	; 62
    8b32:	e2 e1       	ldi	r30, 0x12	; 18
    8b34:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

00008b38 <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8b38:	4a e0       	ldi	r20, 0x0A	; 10
    8b3a:	50 e0       	ldi	r21, 0x00	; 0
    8b3c:	60 e0       	ldi	r22, 0x00	; 0
    8b3e:	70 e0       	ldi	r23, 0x00	; 0
    8b40:	9d df       	rcall	.-198    	; 0x8a7c <strtol>
    return((int)num);
}
    8b42:	cb 01       	movw	r24, r22
    8b44:	08 95       	ret

00008b46 <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8b46:	4a e0       	ldi	r20, 0x0A	; 10
    8b48:	50 e0       	ldi	r21, 0x00	; 0
    8b4a:	60 e0       	ldi	r22, 0x00	; 0
    8b4c:	70 e0       	ldi	r23, 0x00	; 0
    8b4e:	96 cf       	rjmp	.-212    	; 0x8a7c <strtol>
    return(num);
}
    8b50:	08 95       	ret

00008b52 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8b52:	fc 01       	movw	r30, r24
    8b54:	62 81       	ldd	r22, Z+2	; 0x02
    8b56:	73 81       	ldd	r23, Z+3	; 0x03
    8b58:	cb 01       	movw	r24, r22
    8b5a:	a0 e0       	ldi	r26, 0x00	; 0
    8b5c:	b0 e0       	ldi	r27, 0x00	; 0
    8b5e:	ba 2f       	mov	r27, r26
    8b60:	a9 2f       	mov	r26, r25
    8b62:	98 2f       	mov	r25, r24
    8b64:	88 27       	eor	r24, r24
    8b66:	21 81       	ldd	r18, Z+1	; 0x01
    8b68:	82 2b       	or	r24, r18
    8b6a:	ba 2f       	mov	r27, r26
    8b6c:	a9 2f       	mov	r26, r25
    8b6e:	98 2f       	mov	r25, r24
    8b70:	88 27       	eor	r24, r24
    8b72:	20 81       	ld	r18, Z
    8b74:	bc 01       	movw	r22, r24
    8b76:	cd 01       	movw	r24, r26
    8b78:	62 2b       	or	r22, r18
    8b7a:	08 95       	ret

00008b7c <st_dword>:
    8b7c:	fc 01       	movw	r30, r24
    8b7e:	40 83       	st	Z, r20
    8b80:	51 83       	std	Z+1, r21	; 0x01
    8b82:	62 83       	std	Z+2, r22	; 0x02
    8b84:	73 83       	std	Z+3, r23	; 0x03
    8b86:	08 95       	ret

00008b88 <mem_set>:
    8b88:	48 0f       	add	r20, r24
    8b8a:	59 1f       	adc	r21, r25
    8b8c:	fc 01       	movw	r30, r24
    8b8e:	61 93       	st	Z+, r22
    8b90:	cf 01       	movw	r24, r30
    8b92:	e4 17       	cp	r30, r20
    8b94:	f5 07       	cpc	r31, r21
    8b96:	d1 f7       	brne	.-12     	; 0x8b8c <mem_set+0x4>
    8b98:	08 95       	ret

00008b9a <mem_cmp>:
    8b9a:	dc 01       	movw	r26, r24
    8b9c:	fb 01       	movw	r30, r22
    8b9e:	2d 91       	ld	r18, X+
    8ba0:	81 91       	ld	r24, Z+
    8ba2:	30 e0       	ldi	r19, 0x00	; 0
    8ba4:	b9 01       	movw	r22, r18
    8ba6:	68 1b       	sub	r22, r24
    8ba8:	71 09       	sbc	r23, r1
    8baa:	cb 01       	movw	r24, r22
    8bac:	41 50       	subi	r20, 0x01	; 1
    8bae:	51 09       	sbc	r21, r1
    8bb0:	11 f0       	breq	.+4      	; 0x8bb6 <mem_cmp+0x1c>
    8bb2:	00 97       	sbiw	r24, 0x00	; 0
    8bb4:	a1 f3       	breq	.-24     	; 0x8b9e <mem_cmp+0x4>
    8bb6:	08 95       	ret

00008bb8 <tchar2uni>:
    8bb8:	0f 93       	push	r16
    8bba:	1f 93       	push	r17
    8bbc:	fc 01       	movw	r30, r24
    8bbe:	a0 81       	ld	r26, Z
    8bc0:	b1 81       	ldd	r27, Z+1	; 0x01
    8bc2:	fd 01       	movw	r30, r26
    8bc4:	31 96       	adiw	r30, 0x01	; 1
    8bc6:	4c 91       	ld	r20, X
    8bc8:	47 fd       	sbrc	r20, 7
    8bca:	04 c0       	rjmp	.+8      	; 0x8bd4 <tchar2uni+0x1c>
    8bcc:	50 e0       	ldi	r21, 0x00	; 0
    8bce:	60 e0       	ldi	r22, 0x00	; 0
    8bd0:	70 e0       	ldi	r23, 0x00	; 0
    8bd2:	68 c0       	rjmp	.+208    	; 0x8ca4 <tchar2uni+0xec>
    8bd4:	24 2f       	mov	r18, r20
    8bd6:	20 7e       	andi	r18, 0xE0	; 224
    8bd8:	20 3c       	cpi	r18, 0xC0	; 192
    8bda:	39 f4       	brne	.+14     	; 0x8bea <tchar2uni+0x32>
    8bdc:	4f 71       	andi	r20, 0x1F	; 31
    8bde:	50 e0       	ldi	r21, 0x00	; 0
    8be0:	60 e0       	ldi	r22, 0x00	; 0
    8be2:	70 e0       	ldi	r23, 0x00	; 0
    8be4:	21 e0       	ldi	r18, 0x01	; 1
    8be6:	30 e0       	ldi	r19, 0x00	; 0
    8be8:	16 c0       	rjmp	.+44     	; 0x8c16 <tchar2uni+0x5e>
    8bea:	24 2f       	mov	r18, r20
    8bec:	20 7f       	andi	r18, 0xF0	; 240
    8bee:	20 3e       	cpi	r18, 0xE0	; 224
    8bf0:	39 f4       	brne	.+14     	; 0x8c00 <tchar2uni+0x48>
    8bf2:	4f 70       	andi	r20, 0x0F	; 15
    8bf4:	50 e0       	ldi	r21, 0x00	; 0
    8bf6:	60 e0       	ldi	r22, 0x00	; 0
    8bf8:	70 e0       	ldi	r23, 0x00	; 0
    8bfa:	22 e0       	ldi	r18, 0x02	; 2
    8bfc:	30 e0       	ldi	r19, 0x00	; 0
    8bfe:	0b c0       	rjmp	.+22     	; 0x8c16 <tchar2uni+0x5e>
    8c00:	24 2f       	mov	r18, r20
    8c02:	28 7f       	andi	r18, 0xF8	; 248
    8c04:	20 3f       	cpi	r18, 0xF0	; 240
    8c06:	09 f0       	breq	.+2      	; 0x8c0a <tchar2uni+0x52>
    8c08:	54 c0       	rjmp	.+168    	; 0x8cb2 <tchar2uni+0xfa>
    8c0a:	47 70       	andi	r20, 0x07	; 7
    8c0c:	50 e0       	ldi	r21, 0x00	; 0
    8c0e:	60 e0       	ldi	r22, 0x00	; 0
    8c10:	70 e0       	ldi	r23, 0x00	; 0
    8c12:	23 e0       	ldi	r18, 0x03	; 3
    8c14:	30 e0       	ldi	r19, 0x00	; 0
    8c16:	31 96       	adiw	r30, 0x01	; 1
    8c18:	df 01       	movw	r26, r30
    8c1a:	11 97       	sbiw	r26, 0x01	; 1
    8c1c:	ac 91       	ld	r26, X
    8c1e:	ba 2f       	mov	r27, r26
    8c20:	b0 7c       	andi	r27, 0xC0	; 192
    8c22:	b0 38       	cpi	r27, 0x80	; 128
    8c24:	09 f0       	breq	.+2      	; 0x8c28 <tchar2uni+0x70>
    8c26:	45 c0       	rjmp	.+138    	; 0x8cb2 <tchar2uni+0xfa>
    8c28:	b6 e0       	ldi	r27, 0x06	; 6
    8c2a:	44 0f       	add	r20, r20
    8c2c:	55 1f       	adc	r21, r21
    8c2e:	66 1f       	adc	r22, r22
    8c30:	77 1f       	adc	r23, r23
    8c32:	ba 95       	dec	r27
    8c34:	d1 f7       	brne	.-12     	; 0x8c2a <tchar2uni+0x72>
    8c36:	af 73       	andi	r26, 0x3F	; 63
    8c38:	4a 2b       	or	r20, r26
    8c3a:	21 50       	subi	r18, 0x01	; 1
    8c3c:	31 09       	sbc	r19, r1
    8c3e:	59 f7       	brne	.-42     	; 0x8c16 <tchar2uni+0x5e>
    8c40:	8a 01       	movw	r16, r20
    8c42:	9b 01       	movw	r18, r22
    8c44:	00 58       	subi	r16, 0x80	; 128
    8c46:	11 09       	sbc	r17, r1
    8c48:	21 09       	sbc	r18, r1
    8c4a:	31 09       	sbc	r19, r1
    8c4c:	00 38       	cpi	r16, 0x80	; 128
    8c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    8c50:	20 41       	sbci	r18, 0x10	; 16
    8c52:	31 05       	cpc	r19, r1
    8c54:	70 f5       	brcc	.+92     	; 0x8cb2 <tchar2uni+0xfa>
    8c56:	8a 01       	movw	r16, r20
    8c58:	9b 01       	movw	r18, r22
    8c5a:	18 5d       	subi	r17, 0xD8	; 216
    8c5c:	21 09       	sbc	r18, r1
    8c5e:	31 09       	sbc	r19, r1
    8c60:	01 15       	cp	r16, r1
    8c62:	18 40       	sbci	r17, 0x08	; 8
    8c64:	21 05       	cpc	r18, r1
    8c66:	31 05       	cpc	r19, r1
    8c68:	20 f1       	brcs	.+72     	; 0x8cb2 <tchar2uni+0xfa>
    8c6a:	41 15       	cp	r20, r1
    8c6c:	51 05       	cpc	r21, r1
    8c6e:	21 e0       	ldi	r18, 0x01	; 1
    8c70:	62 07       	cpc	r22, r18
    8c72:	71 05       	cpc	r23, r1
    8c74:	b8 f0       	brcs	.+46     	; 0x8ca4 <tchar2uni+0xec>
    8c76:	8a 01       	movw	r16, r20
    8c78:	9b 01       	movw	r18, r22
    8c7a:	21 50       	subi	r18, 0x01	; 1
    8c7c:	31 09       	sbc	r19, r1
    8c7e:	a6 e0       	ldi	r26, 0x06	; 6
    8c80:	00 0f       	add	r16, r16
    8c82:	11 1f       	adc	r17, r17
    8c84:	22 1f       	adc	r18, r18
    8c86:	33 1f       	adc	r19, r19
    8c88:	aa 95       	dec	r26
    8c8a:	d1 f7       	brne	.-12     	; 0x8c80 <tchar2uni+0xc8>
    8c8c:	00 27       	eor	r16, r16
    8c8e:	11 27       	eor	r17, r17
    8c90:	33 70       	andi	r19, 0x03	; 3
    8c92:	53 70       	andi	r21, 0x03	; 3
    8c94:	66 27       	eor	r22, r22
    8c96:	77 27       	eor	r23, r23
    8c98:	5c 6d       	ori	r21, 0xDC	; 220
    8c9a:	78 6d       	ori	r23, 0xD8	; 216
    8c9c:	40 2b       	or	r20, r16
    8c9e:	51 2b       	or	r21, r17
    8ca0:	62 2b       	or	r22, r18
    8ca2:	73 2b       	or	r23, r19
    8ca4:	dc 01       	movw	r26, r24
    8ca6:	ed 93       	st	X+, r30
    8ca8:	fc 93       	st	X, r31
    8caa:	34 2f       	mov	r19, r20
    8cac:	25 2f       	mov	r18, r21
    8cae:	cb 01       	movw	r24, r22
    8cb0:	04 c0       	rjmp	.+8      	; 0x8cba <tchar2uni+0x102>
    8cb2:	3f ef       	ldi	r19, 0xFF	; 255
    8cb4:	2f ef       	ldi	r18, 0xFF	; 255
    8cb6:	8f ef       	ldi	r24, 0xFF	; 255
    8cb8:	9f ef       	ldi	r25, 0xFF	; 255
    8cba:	63 2f       	mov	r22, r19
    8cbc:	72 2f       	mov	r23, r18
    8cbe:	1f 91       	pop	r17
    8cc0:	0f 91       	pop	r16
    8cc2:	08 95       	ret

00008cc4 <clst2sect>:
    8cc4:	0f 93       	push	r16
    8cc6:	1f 93       	push	r17
    8cc8:	fc 01       	movw	r30, r24
    8cca:	9a 01       	movw	r18, r20
    8ccc:	ab 01       	movw	r20, r22
    8cce:	22 50       	subi	r18, 0x02	; 2
    8cd0:	31 09       	sbc	r19, r1
    8cd2:	41 09       	sbc	r20, r1
    8cd4:	51 09       	sbc	r21, r1
    8cd6:	81 8d       	ldd	r24, Z+25	; 0x19
    8cd8:	92 8d       	ldd	r25, Z+26	; 0x1a
    8cda:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8cdc:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8cde:	02 97       	sbiw	r24, 0x02	; 2
    8ce0:	a1 09       	sbc	r26, r1
    8ce2:	b1 09       	sbc	r27, r1
    8ce4:	28 17       	cp	r18, r24
    8ce6:	39 07       	cpc	r19, r25
    8ce8:	4a 07       	cpc	r20, r26
    8cea:	5b 07       	cpc	r21, r27
    8cec:	68 f4       	brcc	.+26     	; 0x8d08 <clst2sect+0x44>
    8cee:	a1 85       	ldd	r26, Z+9	; 0x09
    8cf0:	b2 85       	ldd	r27, Z+10	; 0x0a
    8cf2:	0e 94 1e e3 	call	0x1c63c	; 0x1c63c <__muluhisi3>
    8cf6:	05 a5       	ldd	r16, Z+45	; 0x2d
    8cf8:	16 a5       	ldd	r17, Z+46	; 0x2e
    8cfa:	27 a5       	ldd	r18, Z+47	; 0x2f
    8cfc:	30 a9       	ldd	r19, Z+48	; 0x30
    8cfe:	60 0f       	add	r22, r16
    8d00:	71 1f       	adc	r23, r17
    8d02:	82 1f       	adc	r24, r18
    8d04:	93 1f       	adc	r25, r19
    8d06:	03 c0       	rjmp	.+6      	; 0x8d0e <clst2sect+0x4a>
    8d08:	60 e0       	ldi	r22, 0x00	; 0
    8d0a:	70 e0       	ldi	r23, 0x00	; 0
    8d0c:	cb 01       	movw	r24, r22
    8d0e:	1f 91       	pop	r17
    8d10:	0f 91       	pop	r16
    8d12:	08 95       	ret

00008d14 <clmt_clust>:
    8d14:	cf 93       	push	r28
    8d16:	df 93       	push	r29
    8d18:	fc 01       	movw	r30, r24
    8d1a:	c2 a1       	ldd	r28, Z+34	; 0x22
    8d1c:	d3 a1       	ldd	r29, Z+35	; 0x23
    8d1e:	24 96       	adiw	r28, 0x04	; 4
    8d20:	cb 01       	movw	r24, r22
    8d22:	ba 01       	movw	r22, r20
    8d24:	29 e0       	ldi	r18, 0x09	; 9
    8d26:	96 95       	lsr	r25
    8d28:	87 95       	ror	r24
    8d2a:	77 95       	ror	r23
    8d2c:	67 95       	ror	r22
    8d2e:	2a 95       	dec	r18
    8d30:	d1 f7       	brne	.-12     	; 0x8d26 <clmt_clust+0x12>
    8d32:	01 90       	ld	r0, Z+
    8d34:	f0 81       	ld	r31, Z
    8d36:	e0 2d       	mov	r30, r0
    8d38:	21 85       	ldd	r18, Z+9	; 0x09
    8d3a:	32 85       	ldd	r19, Z+10	; 0x0a
    8d3c:	40 e0       	ldi	r20, 0x00	; 0
    8d3e:	50 e0       	ldi	r21, 0x00	; 0
    8d40:	0e 94 d1 e2 	call	0x1c5a2	; 0x1c5a2 <__udivmodsi4>
    8d44:	88 81       	ld	r24, Y
    8d46:	99 81       	ldd	r25, Y+1	; 0x01
    8d48:	aa 81       	ldd	r26, Y+2	; 0x02
    8d4a:	bb 81       	ldd	r27, Y+3	; 0x03
    8d4c:	00 97       	sbiw	r24, 0x00	; 0
    8d4e:	a1 05       	cpc	r26, r1
    8d50:	b1 05       	cpc	r27, r1
    8d52:	b1 f0       	breq	.+44     	; 0x8d80 <clmt_clust+0x6c>
    8d54:	28 17       	cp	r18, r24
    8d56:	39 07       	cpc	r19, r25
    8d58:	4a 07       	cpc	r20, r26
    8d5a:	5b 07       	cpc	r21, r27
    8d5c:	30 f0       	brcs	.+12     	; 0x8d6a <clmt_clust+0x56>
    8d5e:	28 1b       	sub	r18, r24
    8d60:	39 0b       	sbc	r19, r25
    8d62:	4a 0b       	sbc	r20, r26
    8d64:	5b 0b       	sbc	r21, r27
    8d66:	28 96       	adiw	r28, 0x08	; 8
    8d68:	ed cf       	rjmp	.-38     	; 0x8d44 <clmt_clust+0x30>
    8d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    8d6c:	9d 81       	ldd	r25, Y+5	; 0x05
    8d6e:	ae 81       	ldd	r26, Y+6	; 0x06
    8d70:	bf 81       	ldd	r27, Y+7	; 0x07
    8d72:	bc 01       	movw	r22, r24
    8d74:	cd 01       	movw	r24, r26
    8d76:	62 0f       	add	r22, r18
    8d78:	73 1f       	adc	r23, r19
    8d7a:	84 1f       	adc	r24, r20
    8d7c:	95 1f       	adc	r25, r21
    8d7e:	03 c0       	rjmp	.+6      	; 0x8d86 <clmt_clust+0x72>
    8d80:	60 e0       	ldi	r22, 0x00	; 0
    8d82:	70 e0       	ldi	r23, 0x00	; 0
    8d84:	cb 01       	movw	r24, r22
    8d86:	df 91       	pop	r29
    8d88:	cf 91       	pop	r28
    8d8a:	08 95       	ret

00008d8c <sum_sfn>:
    8d8c:	fc 01       	movw	r30, r24
    8d8e:	9c 01       	movw	r18, r24
    8d90:	25 5f       	subi	r18, 0xF5	; 245
    8d92:	3f 4f       	sbci	r19, 0xFF	; 255
    8d94:	80 e0       	ldi	r24, 0x00	; 0
    8d96:	98 2f       	mov	r25, r24
    8d98:	90 fb       	bst	r25, 0
    8d9a:	97 95       	ror	r25
    8d9c:	97 f9       	bld	r25, 7
    8d9e:	81 91       	ld	r24, Z+
    8da0:	89 0f       	add	r24, r25
    8da2:	e2 17       	cp	r30, r18
    8da4:	f3 07       	cpc	r31, r19
    8da6:	b9 f7       	brne	.-18     	; 0x8d96 <sum_sfn+0xa>
    8da8:	08 95       	ret

00008daa <get_ldnumber>:
    8daa:	cf 93       	push	r28
    8dac:	df 93       	push	r29
    8dae:	dc 01       	movw	r26, r24
    8db0:	ed 91       	ld	r30, X+
    8db2:	fc 91       	ld	r31, X
    8db4:	11 97       	sbiw	r26, 0x01	; 1
    8db6:	30 97       	sbiw	r30, 0x00	; 0
    8db8:	f9 f0       	breq	.+62     	; 0x8df8 <get_ldnumber+0x4e>
    8dba:	9f 01       	movw	r18, r30
    8dbc:	2f 5f       	subi	r18, 0xFF	; 255
    8dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    8dc0:	e9 01       	movw	r28, r18
    8dc2:	21 97       	sbiw	r28, 0x01	; 1
    8dc4:	88 81       	ld	r24, Y
    8dc6:	80 32       	cpi	r24, 0x20	; 32
    8dc8:	18 f0       	brcs	.+6      	; 0x8dd0 <get_ldnumber+0x26>
    8dca:	8a 33       	cpi	r24, 0x3A	; 58
    8dcc:	b9 f7       	brne	.-18     	; 0x8dbc <get_ldnumber+0x12>
    8dce:	04 c0       	rjmp	.+8      	; 0x8dd8 <get_ldnumber+0x2e>
    8dd0:	80 91 1c 18 	lds	r24, 0x181C	; 0x80181c <CurrVol>
    8dd4:	90 e0       	ldi	r25, 0x00	; 0
    8dd6:	12 c0       	rjmp	.+36     	; 0x8dfc <get_ldnumber+0x52>
    8dd8:	90 81       	ld	r25, Z
    8dda:	80 ed       	ldi	r24, 0xD0	; 208
    8ddc:	89 0f       	add	r24, r25
    8dde:	8a 30       	cpi	r24, 0x0A	; 10
    8de0:	58 f4       	brcc	.+22     	; 0x8df8 <get_ldnumber+0x4e>
    8de2:	32 96       	adiw	r30, 0x02	; 2
    8de4:	2e 17       	cp	r18, r30
    8de6:	3f 07       	cpc	r19, r31
    8de8:	39 f4       	brne	.+14     	; 0x8df8 <get_ldnumber+0x4e>
    8dea:	90 33       	cpi	r25, 0x30	; 48
    8dec:	29 f4       	brne	.+10     	; 0x8df8 <get_ldnumber+0x4e>
    8dee:	2d 93       	st	X+, r18
    8df0:	3c 93       	st	X, r19
    8df2:	80 e0       	ldi	r24, 0x00	; 0
    8df4:	90 e0       	ldi	r25, 0x00	; 0
    8df6:	02 c0       	rjmp	.+4      	; 0x8dfc <get_ldnumber+0x52>
    8df8:	8f ef       	ldi	r24, 0xFF	; 255
    8dfa:	9f ef       	ldi	r25, 0xFF	; 255
    8dfc:	df 91       	pop	r29
    8dfe:	cf 91       	pop	r28
    8e00:	08 95       	ret

00008e02 <validate>:
    8e02:	0f 93       	push	r16
    8e04:	1f 93       	push	r17
    8e06:	cf 93       	push	r28
    8e08:	df 93       	push	r29
    8e0a:	ec 01       	movw	r28, r24
    8e0c:	8b 01       	movw	r16, r22
    8e0e:	89 2b       	or	r24, r25
    8e10:	f9 f0       	breq	.+62     	; 0x8e50 <validate+0x4e>
    8e12:	e8 81       	ld	r30, Y
    8e14:	f9 81       	ldd	r31, Y+1	; 0x01
    8e16:	30 97       	sbiw	r30, 0x00	; 0
    8e18:	d9 f0       	breq	.+54     	; 0x8e50 <validate+0x4e>
    8e1a:	80 81       	ld	r24, Z
    8e1c:	88 23       	and	r24, r24
    8e1e:	c1 f0       	breq	.+48     	; 0x8e50 <validate+0x4e>
    8e20:	2a 81       	ldd	r18, Y+2	; 0x02
    8e22:	3b 81       	ldd	r19, Y+3	; 0x03
    8e24:	85 81       	ldd	r24, Z+5	; 0x05
    8e26:	96 81       	ldd	r25, Z+6	; 0x06
    8e28:	28 17       	cp	r18, r24
    8e2a:	39 07       	cpc	r19, r25
    8e2c:	89 f4       	brne	.+34     	; 0x8e50 <validate+0x4e>
    8e2e:	81 81       	ldd	r24, Z+1	; 0x01
    8e30:	0e 94 c1 68 	call	0xd182	; 0xd182 <disk_status>
    8e34:	80 fd       	sbrc	r24, 0
    8e36:	0c c0       	rjmp	.+24     	; 0x8e50 <validate+0x4e>
    8e38:	28 81       	ld	r18, Y
    8e3a:	39 81       	ldd	r19, Y+1	; 0x01
    8e3c:	80 e0       	ldi	r24, 0x00	; 0
    8e3e:	90 e0       	ldi	r25, 0x00	; 0
    8e40:	f8 01       	movw	r30, r16
    8e42:	31 83       	std	Z+1, r19	; 0x01
    8e44:	20 83       	st	Z, r18
    8e46:	df 91       	pop	r29
    8e48:	cf 91       	pop	r28
    8e4a:	1f 91       	pop	r17
    8e4c:	0f 91       	pop	r16
    8e4e:	08 95       	ret
    8e50:	89 e0       	ldi	r24, 0x09	; 9
    8e52:	90 e0       	ldi	r25, 0x00	; 0
    8e54:	20 e0       	ldi	r18, 0x00	; 0
    8e56:	30 e0       	ldi	r19, 0x00	; 0
    8e58:	f3 cf       	rjmp	.-26     	; 0x8e40 <validate+0x3e>

00008e5a <mem_cpy.part.0>:
    8e5a:	fb 01       	movw	r30, r22
    8e5c:	48 0f       	add	r20, r24
    8e5e:	59 1f       	adc	r21, r25
    8e60:	21 91       	ld	r18, Z+
    8e62:	dc 01       	movw	r26, r24
    8e64:	2d 93       	st	X+, r18
    8e66:	cd 01       	movw	r24, r26
    8e68:	a4 17       	cp	r26, r20
    8e6a:	b5 07       	cpc	r27, r21
    8e6c:	c9 f7       	brne	.-14     	; 0x8e60 <mem_cpy.part.0+0x6>
    8e6e:	08 95       	ret

00008e70 <put_utf>:
    8e70:	0f 93       	push	r16
    8e72:	1f 93       	push	r17
    8e74:	fa 01       	movw	r30, r20
    8e76:	60 38       	cpi	r22, 0x80	; 128
    8e78:	71 05       	cpc	r23, r1
    8e7a:	81 05       	cpc	r24, r1
    8e7c:	91 05       	cpc	r25, r1
    8e7e:	30 f4       	brcc	.+12     	; 0x8e8c <put_utf+0x1c>
    8e80:	23 2b       	or	r18, r19
    8e82:	09 f4       	brne	.+2      	; 0x8e86 <put_utf+0x16>
    8e84:	9e c0       	rjmp	.+316    	; 0x8fc2 <put_utf+0x152>
    8e86:	60 83       	st	Z, r22
    8e88:	81 e0       	ldi	r24, 0x01	; 1
    8e8a:	9c c0       	rjmp	.+312    	; 0x8fc4 <put_utf+0x154>
    8e8c:	61 15       	cp	r22, r1
    8e8e:	48 e0       	ldi	r20, 0x08	; 8
    8e90:	74 07       	cpc	r23, r20
    8e92:	81 05       	cpc	r24, r1
    8e94:	91 05       	cpc	r25, r1
    8e96:	a0 f4       	brcc	.+40     	; 0x8ec0 <put_utf+0x50>
    8e98:	22 30       	cpi	r18, 0x02	; 2
    8e9a:	31 05       	cpc	r19, r1
    8e9c:	08 f4       	brcc	.+2      	; 0x8ea0 <put_utf+0x30>
    8e9e:	91 c0       	rjmp	.+290    	; 0x8fc2 <put_utf+0x152>
    8ea0:	8b 01       	movw	r16, r22
    8ea2:	9c 01       	movw	r18, r24
    8ea4:	76 e0       	ldi	r23, 0x06	; 6
    8ea6:	36 95       	lsr	r19
    8ea8:	27 95       	ror	r18
    8eaa:	17 95       	ror	r17
    8eac:	07 95       	ror	r16
    8eae:	7a 95       	dec	r23
    8eb0:	d1 f7       	brne	.-12     	; 0x8ea6 <put_utf+0x36>
    8eb2:	00 6c       	ori	r16, 0xC0	; 192
    8eb4:	00 83       	st	Z, r16
    8eb6:	6f 73       	andi	r22, 0x3F	; 63
    8eb8:	60 68       	ori	r22, 0x80	; 128
    8eba:	61 83       	std	Z+1, r22	; 0x01
    8ebc:	82 e0       	ldi	r24, 0x02	; 2
    8ebe:	82 c0       	rjmp	.+260    	; 0x8fc4 <put_utf+0x154>
    8ec0:	61 15       	cp	r22, r1
    8ec2:	71 05       	cpc	r23, r1
    8ec4:	41 e0       	ldi	r20, 0x01	; 1
    8ec6:	84 07       	cpc	r24, r20
    8ec8:	91 05       	cpc	r25, r1
    8eca:	58 f5       	brcc	.+86     	; 0x8f22 <put_utf+0xb2>
    8ecc:	23 30       	cpi	r18, 0x03	; 3
    8ece:	31 05       	cpc	r19, r1
    8ed0:	08 f4       	brcc	.+2      	; 0x8ed4 <put_utf+0x64>
    8ed2:	77 c0       	rjmp	.+238    	; 0x8fc2 <put_utf+0x152>
    8ed4:	8b 01       	movw	r16, r22
    8ed6:	9c 01       	movw	r18, r24
    8ed8:	18 5d       	subi	r17, 0xD8	; 216
    8eda:	21 09       	sbc	r18, r1
    8edc:	31 09       	sbc	r19, r1
    8ede:	01 15       	cp	r16, r1
    8ee0:	18 40       	sbci	r17, 0x08	; 8
    8ee2:	21 05       	cpc	r18, r1
    8ee4:	31 05       	cpc	r19, r1
    8ee6:	08 f4       	brcc	.+2      	; 0x8eea <put_utf+0x7a>
    8ee8:	6c c0       	rjmp	.+216    	; 0x8fc2 <put_utf+0x152>
    8eea:	8b 01       	movw	r16, r22
    8eec:	9c 01       	movw	r18, r24
    8eee:	4c e0       	ldi	r20, 0x0C	; 12
    8ef0:	36 95       	lsr	r19
    8ef2:	27 95       	ror	r18
    8ef4:	17 95       	ror	r17
    8ef6:	07 95       	ror	r16
    8ef8:	4a 95       	dec	r20
    8efa:	d1 f7       	brne	.-12     	; 0x8ef0 <put_utf+0x80>
    8efc:	00 6e       	ori	r16, 0xE0	; 224
    8efe:	00 83       	st	Z, r16
    8f00:	8b 01       	movw	r16, r22
    8f02:	9c 01       	movw	r18, r24
    8f04:	56 e0       	ldi	r21, 0x06	; 6
    8f06:	36 95       	lsr	r19
    8f08:	27 95       	ror	r18
    8f0a:	17 95       	ror	r17
    8f0c:	07 95       	ror	r16
    8f0e:	5a 95       	dec	r21
    8f10:	d1 f7       	brne	.-12     	; 0x8f06 <put_utf+0x96>
    8f12:	0f 73       	andi	r16, 0x3F	; 63
    8f14:	00 68       	ori	r16, 0x80	; 128
    8f16:	01 83       	std	Z+1, r16	; 0x01
    8f18:	6f 73       	andi	r22, 0x3F	; 63
    8f1a:	60 68       	ori	r22, 0x80	; 128
    8f1c:	62 83       	std	Z+2, r22	; 0x02
    8f1e:	83 e0       	ldi	r24, 0x03	; 3
    8f20:	51 c0       	rjmp	.+162    	; 0x8fc4 <put_utf+0x154>
    8f22:	24 30       	cpi	r18, 0x04	; 4
    8f24:	31 05       	cpc	r19, r1
    8f26:	08 f4       	brcc	.+2      	; 0x8f2a <put_utf+0xba>
    8f28:	4c c0       	rjmp	.+152    	; 0x8fc2 <put_utf+0x152>
    8f2a:	8b 01       	movw	r16, r22
    8f2c:	9c 01       	movw	r18, r24
    8f2e:	00 27       	eor	r16, r16
    8f30:	11 27       	eor	r17, r17
    8f32:	38 5d       	subi	r19, 0xD8	; 216
    8f34:	b6 e0       	ldi	r27, 0x06	; 6
    8f36:	36 95       	lsr	r19
    8f38:	27 95       	ror	r18
    8f3a:	17 95       	ror	r17
    8f3c:	07 95       	ror	r16
    8f3e:	ba 95       	dec	r27
    8f40:	d1 f7       	brne	.-12     	; 0x8f36 <put_utf+0xc6>
    8f42:	01 15       	cp	r16, r1
    8f44:	11 05       	cpc	r17, r1
    8f46:	40 e1       	ldi	r20, 0x10	; 16
    8f48:	24 07       	cpc	r18, r20
    8f4a:	31 05       	cpc	r19, r1
    8f4c:	d0 f5       	brcc	.+116    	; 0x8fc2 <put_utf+0x152>
    8f4e:	dc 01       	movw	r26, r24
    8f50:	cb 01       	movw	r24, r22
    8f52:	aa 27       	eor	r26, r26
    8f54:	bb 27       	eor	r27, r27
    8f56:	9c 5d       	subi	r25, 0xDC	; 220
    8f58:	a1 09       	sbc	r26, r1
    8f5a:	b1 09       	sbc	r27, r1
    8f5c:	81 15       	cp	r24, r1
    8f5e:	44 e0       	ldi	r20, 0x04	; 4
    8f60:	94 07       	cpc	r25, r20
    8f62:	a1 05       	cpc	r26, r1
    8f64:	b1 05       	cpc	r27, r1
    8f66:	68 f5       	brcc	.+90     	; 0x8fc2 <put_utf+0x152>
    8f68:	80 2b       	or	r24, r16
    8f6a:	91 2b       	or	r25, r17
    8f6c:	a2 2b       	or	r26, r18
    8f6e:	b3 2b       	or	r27, r19
    8f70:	11 96       	adiw	r26, 0x01	; 1
    8f72:	ac 01       	movw	r20, r24
    8f74:	bd 01       	movw	r22, r26
    8f76:	22 e1       	ldi	r18, 0x12	; 18
    8f78:	76 95       	lsr	r23
    8f7a:	67 95       	ror	r22
    8f7c:	57 95       	ror	r21
    8f7e:	47 95       	ror	r20
    8f80:	2a 95       	dec	r18
    8f82:	d1 f7       	brne	.-12     	; 0x8f78 <put_utf+0x108>
    8f84:	40 6f       	ori	r20, 0xF0	; 240
    8f86:	40 83       	st	Z, r20
    8f88:	ac 01       	movw	r20, r24
    8f8a:	bd 01       	movw	r22, r26
    8f8c:	3c e0       	ldi	r19, 0x0C	; 12
    8f8e:	76 95       	lsr	r23
    8f90:	67 95       	ror	r22
    8f92:	57 95       	ror	r21
    8f94:	47 95       	ror	r20
    8f96:	3a 95       	dec	r19
    8f98:	d1 f7       	brne	.-12     	; 0x8f8e <put_utf+0x11e>
    8f9a:	4f 73       	andi	r20, 0x3F	; 63
    8f9c:	40 68       	ori	r20, 0x80	; 128
    8f9e:	41 83       	std	Z+1, r20	; 0x01
    8fa0:	ac 01       	movw	r20, r24
    8fa2:	bd 01       	movw	r22, r26
    8fa4:	a6 e0       	ldi	r26, 0x06	; 6
    8fa6:	76 95       	lsr	r23
    8fa8:	67 95       	ror	r22
    8faa:	57 95       	ror	r21
    8fac:	47 95       	ror	r20
    8fae:	aa 95       	dec	r26
    8fb0:	d1 f7       	brne	.-12     	; 0x8fa6 <put_utf+0x136>
    8fb2:	4f 73       	andi	r20, 0x3F	; 63
    8fb4:	40 68       	ori	r20, 0x80	; 128
    8fb6:	42 83       	std	Z+2, r20	; 0x02
    8fb8:	8f 73       	andi	r24, 0x3F	; 63
    8fba:	80 68       	ori	r24, 0x80	; 128
    8fbc:	83 83       	std	Z+3, r24	; 0x03
    8fbe:	84 e0       	ldi	r24, 0x04	; 4
    8fc0:	01 c0       	rjmp	.+2      	; 0x8fc4 <put_utf+0x154>
    8fc2:	80 e0       	ldi	r24, 0x00	; 0
    8fc4:	1f 91       	pop	r17
    8fc6:	0f 91       	pop	r16
    8fc8:	08 95       	ret

00008fca <get_fileinfo>:
    8fca:	a0 e0       	ldi	r26, 0x00	; 0
    8fcc:	b0 e0       	ldi	r27, 0x00	; 0
    8fce:	eb ee       	ldi	r30, 0xEB	; 235
    8fd0:	f7 e4       	ldi	r31, 0x47	; 71
    8fd2:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
    8fd6:	fc 01       	movw	r30, r24
    8fd8:	60 80       	ld	r6, Z
    8fda:	71 80       	ldd	r7, Z+1	; 0x01
    8fdc:	fb 01       	movw	r30, r22
    8fde:	16 8a       	std	Z+22, r1	; 0x16
    8fe0:	fc 01       	movw	r30, r24
    8fe2:	06 89       	ldd	r16, Z+22	; 0x16
    8fe4:	17 89       	ldd	r17, Z+23	; 0x17
    8fe6:	20 8d       	ldd	r18, Z+24	; 0x18
    8fe8:	31 8d       	ldd	r19, Z+25	; 0x19
    8fea:	01 15       	cp	r16, r1
    8fec:	11 05       	cpc	r17, r1
    8fee:	21 05       	cpc	r18, r1
    8ff0:	31 05       	cpc	r19, r1
    8ff2:	09 f4       	brne	.+2      	; 0x8ff6 <get_fileinfo+0x2c>
    8ff4:	f5 c0       	rjmp	.+490    	; 0x91e0 <get_fileinfo+0x216>
    8ff6:	eb 01       	movw	r28, r22
    8ff8:	8c 01       	movw	r16, r24
    8ffa:	80 a5       	ldd	r24, Z+40	; 0x28
    8ffc:	91 a5       	ldd	r25, Z+41	; 0x29
    8ffe:	a2 a5       	ldd	r26, Z+42	; 0x2a
    9000:	b3 a5       	ldd	r27, Z+43	; 0x2b
    9002:	8f 3f       	cpi	r24, 0xFF	; 255
    9004:	9f 4f       	sbci	r25, 0xFF	; 255
    9006:	af 4f       	sbci	r26, 0xFF	; 255
    9008:	bf 4f       	sbci	r27, 0xFF	; 255
    900a:	09 f4       	brne	.+2      	; 0x900e <get_fileinfo+0x44>
    900c:	48 c0       	rjmp	.+144    	; 0x909e <get_fileinfo+0xd4>
    900e:	a1 2c       	mov	r10, r1
    9010:	b1 2c       	mov	r11, r1
    9012:	c1 2c       	mov	r12, r1
    9014:	d1 2c       	mov	r13, r1
    9016:	e1 2c       	mov	r14, r1
    9018:	f1 2c       	mov	r15, r1
    901a:	88 24       	eor	r8, r8
    901c:	8a 94       	dec	r8
    901e:	91 2c       	mov	r9, r1
    9020:	f3 01       	movw	r30, r6
    9022:	83 85       	ldd	r24, Z+11	; 0x0b
    9024:	94 85       	ldd	r25, Z+12	; 0x0c
    9026:	fc 01       	movw	r30, r24
    9028:	ea 0d       	add	r30, r10
    902a:	fb 1d       	adc	r31, r11
    902c:	80 81       	ld	r24, Z
    902e:	91 81       	ldd	r25, Z+1	; 0x01
    9030:	00 97       	sbiw	r24, 0x00	; 0
    9032:	69 f1       	breq	.+90     	; 0x908e <get_fileinfo+0xc4>
    9034:	c1 14       	cp	r12, r1
    9036:	d1 04       	cpc	r13, r1
    9038:	29 f4       	brne	.+10     	; 0x9044 <get_fileinfo+0x7a>
    903a:	9c 01       	movw	r18, r24
    903c:	38 5d       	subi	r19, 0xD8	; 216
    903e:	21 15       	cp	r18, r1
    9040:	38 40       	sbci	r19, 0x08	; 8
    9042:	f0 f0       	brcs	.+60     	; 0x9080 <get_fileinfo+0xb6>
    9044:	a7 01       	movw	r20, r14
    9046:	4a 5e       	subi	r20, 0xEA	; 234
    9048:	5f 4f       	sbci	r21, 0xFF	; 255
    904a:	4c 0f       	add	r20, r28
    904c:	5d 1f       	adc	r21, r29
    904e:	16 01       	movw	r2, r12
    9050:	41 2c       	mov	r4, r1
    9052:	51 2c       	mov	r5, r1
    9054:	21 01       	movw	r4, r2
    9056:	33 24       	eor	r3, r3
    9058:	22 24       	eor	r2, r2
    905a:	a0 e0       	ldi	r26, 0x00	; 0
    905c:	b0 e0       	ldi	r27, 0x00	; 0
    905e:	bc 01       	movw	r22, r24
    9060:	cd 01       	movw	r24, r26
    9062:	62 29       	or	r22, r2
    9064:	73 29       	or	r23, r3
    9066:	84 29       	or	r24, r4
    9068:	95 29       	or	r25, r5
    906a:	94 01       	movw	r18, r8
    906c:	2e 19       	sub	r18, r14
    906e:	3f 09       	sbc	r19, r15
    9070:	ff de       	rcall	.-514    	; 0x8e70 <put_utf>
    9072:	90 e0       	ldi	r25, 0x00	; 0
    9074:	00 97       	sbiw	r24, 0x00	; 0
    9076:	49 f0       	breq	.+18     	; 0x908a <get_fileinfo+0xc0>
    9078:	e8 0e       	add	r14, r24
    907a:	f9 1e       	adc	r15, r25
    907c:	80 e0       	ldi	r24, 0x00	; 0
    907e:	90 e0       	ldi	r25, 0x00	; 0
    9080:	e2 e0       	ldi	r30, 0x02	; 2
    9082:	ae 0e       	add	r10, r30
    9084:	b1 1c       	adc	r11, r1
    9086:	6c 01       	movw	r12, r24
    9088:	cb cf       	rjmp	.-106    	; 0x9020 <get_fileinfo+0x56>
    908a:	e1 2c       	mov	r14, r1
    908c:	f1 2c       	mov	r15, r1
    908e:	cd 28       	or	r12, r13
    9090:	11 f0       	breq	.+4      	; 0x9096 <get_fileinfo+0xcc>
    9092:	e1 2c       	mov	r14, r1
    9094:	f1 2c       	mov	r15, r1
    9096:	fe 01       	movw	r30, r28
    9098:	ee 0d       	add	r30, r14
    909a:	ff 1d       	adc	r31, r15
    909c:	16 8a       	std	Z+22, r1	; 0x16
    909e:	e1 2c       	mov	r14, r1
    90a0:	f1 2c       	mov	r15, r1
    90a2:	80 e0       	ldi	r24, 0x00	; 0
    90a4:	90 e0       	ldi	r25, 0x00	; 0
    90a6:	2c e0       	ldi	r18, 0x0C	; 12
    90a8:	a2 2e       	mov	r10, r18
    90aa:	b1 2c       	mov	r11, r1
    90ac:	3e e2       	ldi	r19, 0x2E	; 46
    90ae:	93 2e       	mov	r9, r19
    90b0:	6c 01       	movw	r12, r24
    90b2:	ff ef       	ldi	r31, 0xFF	; 255
    90b4:	cf 1a       	sub	r12, r31
    90b6:	df 0a       	sbc	r13, r31
    90b8:	f8 01       	movw	r30, r16
    90ba:	22 8d       	ldd	r18, Z+26	; 0x1a
    90bc:	33 8d       	ldd	r19, Z+27	; 0x1b
    90be:	f9 01       	movw	r30, r18
    90c0:	e8 0f       	add	r30, r24
    90c2:	f9 1f       	adc	r31, r25
    90c4:	80 81       	ld	r24, Z
    90c6:	90 e0       	ldi	r25, 0x00	; 0
    90c8:	80 32       	cpi	r24, 0x20	; 32
    90ca:	91 05       	cpc	r25, r1
    90cc:	71 f1       	breq	.+92     	; 0x912a <get_fileinfo+0x160>
    90ce:	85 30       	cpi	r24, 0x05	; 5
    90d0:	91 05       	cpc	r25, r1
    90d2:	11 f4       	brne	.+4      	; 0x90d8 <get_fileinfo+0x10e>
    90d4:	85 ee       	ldi	r24, 0xE5	; 229
    90d6:	90 e0       	ldi	r25, 0x00	; 0
    90d8:	f9 e0       	ldi	r31, 0x09	; 9
    90da:	cf 16       	cp	r12, r31
    90dc:	d1 04       	cpc	r13, r1
    90de:	59 f4       	brne	.+22     	; 0x90f6 <get_fileinfo+0x12c>
    90e0:	2c e0       	ldi	r18, 0x0C	; 12
    90e2:	e2 16       	cp	r14, r18
    90e4:	f1 04       	cpc	r15, r1
    90e6:	38 f4       	brcc	.+14     	; 0x90f6 <get_fileinfo+0x12c>
    90e8:	fe 01       	movw	r30, r28
    90ea:	ee 0d       	add	r30, r14
    90ec:	ff 1d       	adc	r31, r15
    90ee:	91 86       	std	Z+9, r9	; 0x09
    90f0:	f7 01       	movw	r30, r14
    90f2:	31 96       	adiw	r30, 0x01	; 1
    90f4:	7f 01       	movw	r14, r30
    90f6:	65 eb       	ldi	r22, 0xB5	; 181
    90f8:	71 e0       	ldi	r23, 0x01	; 1
    90fa:	0e 94 4a 68 	call	0xd094	; 0xd094 <ff_oem2uni>
    90fe:	00 97       	sbiw	r24, 0x00	; 0
    9100:	19 f4       	brne	.+6      	; 0x9108 <get_fileinfo+0x13e>
    9102:	e1 2c       	mov	r14, r1
    9104:	f1 2c       	mov	r15, r1
    9106:	16 c0       	rjmp	.+44     	; 0x9134 <get_fileinfo+0x16a>
    9108:	a7 01       	movw	r20, r14
    910a:	47 5f       	subi	r20, 0xF7	; 247
    910c:	5f 4f       	sbci	r21, 0xFF	; 255
    910e:	4c 0f       	add	r20, r28
    9110:	5d 1f       	adc	r21, r29
    9112:	bc 01       	movw	r22, r24
    9114:	80 e0       	ldi	r24, 0x00	; 0
    9116:	90 e0       	ldi	r25, 0x00	; 0
    9118:	95 01       	movw	r18, r10
    911a:	2e 19       	sub	r18, r14
    911c:	3f 09       	sbc	r19, r15
    911e:	a8 de       	rcall	.-688    	; 0x8e70 <put_utf>
    9120:	90 e0       	ldi	r25, 0x00	; 0
    9122:	00 97       	sbiw	r24, 0x00	; 0
    9124:	71 f3       	breq	.-36     	; 0x9102 <get_fileinfo+0x138>
    9126:	e8 0e       	add	r14, r24
    9128:	f9 1e       	adc	r15, r25
    912a:	c6 01       	movw	r24, r12
    912c:	8b 30       	cpi	r24, 0x0B	; 11
    912e:	91 05       	cpc	r25, r1
    9130:	09 f0       	breq	.+2      	; 0x9134 <get_fileinfo+0x16a>
    9132:	be cf       	rjmp	.-132    	; 0x90b0 <get_fileinfo+0xe6>
    9134:	fe 01       	movw	r30, r28
    9136:	ee 0d       	add	r30, r14
    9138:	ff 1d       	adc	r31, r15
    913a:	11 86       	std	Z+9, r1	; 0x09
    913c:	8e 89       	ldd	r24, Y+22	; 0x16
    913e:	81 11       	cpse	r24, r1
    9140:	36 c0       	rjmp	.+108    	; 0x91ae <get_fileinfo+0x1e4>
    9142:	e1 14       	cp	r14, r1
    9144:	f1 04       	cpc	r15, r1
    9146:	31 f0       	breq	.+12     	; 0x9154 <get_fileinfo+0x18a>
    9148:	de 01       	movw	r26, r28
    914a:	19 96       	adiw	r26, 0x09	; 9
    914c:	58 e0       	ldi	r21, 0x08	; 8
    914e:	20 e0       	ldi	r18, 0x00	; 0
    9150:	30 e0       	ldi	r19, 0x00	; 0
    9152:	14 c0       	rjmp	.+40     	; 0x917c <get_fileinfo+0x1b2>
    9154:	8f e3       	ldi	r24, 0x3F	; 63
    9156:	8e 8b       	std	Y+22, r24	; 0x16
    9158:	21 e0       	ldi	r18, 0x01	; 1
    915a:	30 e0       	ldi	r19, 0x00	; 0
    915c:	1c c0       	rjmp	.+56     	; 0x9196 <get_fileinfo+0x1cc>
    915e:	90 e0       	ldi	r25, 0x00	; 0
    9160:	8e 32       	cpi	r24, 0x2E	; 46
    9162:	91 05       	cpc	r25, r1
    9164:	09 f4       	brne	.+2      	; 0x9168 <get_fileinfo+0x19e>
    9166:	50 e1       	ldi	r21, 0x10	; 16
    9168:	bc 01       	movw	r22, r24
    916a:	61 54       	subi	r22, 0x41	; 65
    916c:	71 09       	sbc	r23, r1
    916e:	6a 31       	cpi	r22, 0x1A	; 26
    9170:	71 05       	cpc	r23, r1
    9172:	40 f0       	brcs	.+16     	; 0x9184 <get_fileinfo+0x1ba>
    9174:	fd 01       	movw	r30, r26
    9176:	84 87       	std	Z+12, r24	; 0x0c
    9178:	2f 5f       	subi	r18, 0xFF	; 255
    917a:	3f 4f       	sbci	r19, 0xFF	; 255
    917c:	8d 91       	ld	r24, X+
    917e:	81 11       	cpse	r24, r1
    9180:	ee cf       	rjmp	.-36     	; 0x915e <get_fileinfo+0x194>
    9182:	09 c0       	rjmp	.+18     	; 0x9196 <get_fileinfo+0x1cc>
    9184:	f8 01       	movw	r30, r16
    9186:	62 8d       	ldd	r22, Z+26	; 0x1a
    9188:	73 8d       	ldd	r23, Z+27	; 0x1b
    918a:	fb 01       	movw	r30, r22
    918c:	44 85       	ldd	r20, Z+12	; 0x0c
    918e:	45 23       	and	r20, r21
    9190:	89 f3       	breq	.-30     	; 0x9174 <get_fileinfo+0x1aa>
    9192:	80 96       	adiw	r24, 0x20	; 32
    9194:	ef cf       	rjmp	.-34     	; 0x9174 <get_fileinfo+0x1aa>
    9196:	fe 01       	movw	r30, r28
    9198:	e2 0f       	add	r30, r18
    919a:	f3 1f       	adc	r31, r19
    919c:	16 8a       	std	Z+22, r1	; 0x16
    919e:	f8 01       	movw	r30, r16
    91a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    91a2:	93 8d       	ldd	r25, Z+27	; 0x1b
    91a4:	fc 01       	movw	r30, r24
    91a6:	84 85       	ldd	r24, Z+12	; 0x0c
    91a8:	81 11       	cpse	r24, r1
    91aa:	01 c0       	rjmp	.+2      	; 0x91ae <get_fileinfo+0x1e4>
    91ac:	19 86       	std	Y+9, r1	; 0x09
    91ae:	f8 01       	movw	r30, r16
    91b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    91b2:	93 8d       	ldd	r25, Z+27	; 0x1b
    91b4:	fc 01       	movw	r30, r24
    91b6:	83 85       	ldd	r24, Z+11	; 0x0b
    91b8:	88 87       	std	Y+8, r24	; 0x08
    91ba:	f8 01       	movw	r30, r16
    91bc:	02 8d       	ldd	r16, Z+26	; 0x1a
    91be:	13 8d       	ldd	r17, Z+27	; 0x1b
    91c0:	c8 01       	movw	r24, r16
    91c2:	4c 96       	adiw	r24, 0x1c	; 28
    91c4:	c6 dc       	rcall	.-1652   	; 0x8b52 <ld_dword>
    91c6:	68 83       	st	Y, r22
    91c8:	79 83       	std	Y+1, r23	; 0x01
    91ca:	8a 83       	std	Y+2, r24	; 0x02
    91cc:	9b 83       	std	Y+3, r25	; 0x03
    91ce:	f8 01       	movw	r30, r16
    91d0:	86 89       	ldd	r24, Z+22	; 0x16
    91d2:	97 89       	ldd	r25, Z+23	; 0x17
    91d4:	9f 83       	std	Y+7, r25	; 0x07
    91d6:	8e 83       	std	Y+6, r24	; 0x06
    91d8:	80 8d       	ldd	r24, Z+24	; 0x18
    91da:	91 8d       	ldd	r25, Z+25	; 0x19
    91dc:	9d 83       	std	Y+5, r25	; 0x05
    91de:	8c 83       	std	Y+4, r24	; 0x04
    91e0:	cd b7       	in	r28, 0x3d	; 61
    91e2:	de b7       	in	r29, 0x3e	; 62
    91e4:	e2 e1       	ldi	r30, 0x12	; 18
    91e6:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

000091ea <ld_clust.isra.4>:
    91ea:	fb 01       	movw	r30, r22
    91ec:	42 8d       	ldd	r20, Z+26	; 0x1a
    91ee:	53 8d       	ldd	r21, Z+27	; 0x1b
    91f0:	60 e0       	ldi	r22, 0x00	; 0
    91f2:	70 e0       	ldi	r23, 0x00	; 0
    91f4:	83 30       	cpi	r24, 0x03	; 3
    91f6:	59 f4       	brne	.+22     	; 0x920e <ld_clust.isra.4+0x24>
    91f8:	84 89       	ldd	r24, Z+20	; 0x14
    91fa:	95 89       	ldd	r25, Z+21	; 0x15
    91fc:	a0 e0       	ldi	r26, 0x00	; 0
    91fe:	b0 e0       	ldi	r27, 0x00	; 0
    9200:	dc 01       	movw	r26, r24
    9202:	99 27       	eor	r25, r25
    9204:	88 27       	eor	r24, r24
    9206:	48 2b       	or	r20, r24
    9208:	59 2b       	or	r21, r25
    920a:	6a 2b       	or	r22, r26
    920c:	7b 2b       	or	r23, r27
    920e:	cb 01       	movw	r24, r22
    9210:	ba 01       	movw	r22, r20
    9212:	08 95       	ret

00009214 <st_clust.isra.5>:
    9214:	fb 01       	movw	r30, r22
    9216:	22 8f       	std	Z+26, r18	; 0x1a
    9218:	33 8f       	std	Z+27, r19	; 0x1b
    921a:	dc 01       	movw	r26, r24
    921c:	8c 91       	ld	r24, X
    921e:	83 30       	cpi	r24, 0x03	; 3
    9220:	29 f4       	brne	.+10     	; 0x922c <st_clust.isra.5+0x18>
    9222:	ca 01       	movw	r24, r20
    9224:	aa 27       	eor	r26, r26
    9226:	bb 27       	eor	r27, r27
    9228:	84 8b       	std	Z+20, r24	; 0x14
    922a:	95 8b       	std	Z+21, r25	; 0x15
    922c:	08 95       	ret

0000922e <sync_window.part.6>:
    922e:	8f 92       	push	r8
    9230:	9f 92       	push	r9
    9232:	af 92       	push	r10
    9234:	bf 92       	push	r11
    9236:	ef 92       	push	r14
    9238:	ff 92       	push	r15
    923a:	0f 93       	push	r16
    923c:	1f 93       	push	r17
    923e:	cf 93       	push	r28
    9240:	df 93       	push	r29
    9242:	ec 01       	movw	r28, r24
    9244:	7c 01       	movw	r14, r24
    9246:	45 e3       	ldi	r20, 0x35	; 53
    9248:	e4 0e       	add	r14, r20
    924a:	f1 1c       	adc	r15, r1
    924c:	29 a9       	ldd	r18, Y+49	; 0x31
    924e:	3a a9       	ldd	r19, Y+50	; 0x32
    9250:	4b a9       	ldd	r20, Y+51	; 0x33
    9252:	5c a9       	ldd	r21, Y+52	; 0x34
    9254:	01 e0       	ldi	r16, 0x01	; 1
    9256:	10 e0       	ldi	r17, 0x00	; 0
    9258:	b7 01       	movw	r22, r14
    925a:	89 81       	ldd	r24, Y+1	; 0x01
    925c:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <disk_write>
    9260:	89 2b       	or	r24, r25
    9262:	41 f5       	brne	.+80     	; 0x92b4 <sync_window.part.6+0x86>
    9264:	1b 82       	std	Y+3, r1	; 0x03
    9266:	09 a9       	ldd	r16, Y+49	; 0x31
    9268:	1a a9       	ldd	r17, Y+50	; 0x32
    926a:	2b a9       	ldd	r18, Y+51	; 0x33
    926c:	3c a9       	ldd	r19, Y+52	; 0x34
    926e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9270:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9272:	af 8d       	ldd	r26, Y+31	; 0x1f
    9274:	b8 a1       	ldd	r27, Y+32	; 0x20
    9276:	8d a0       	ldd	r8, Y+37	; 0x25
    9278:	9e a0       	ldd	r9, Y+38	; 0x26
    927a:	af a0       	ldd	r10, Y+39	; 0x27
    927c:	b8 a4       	ldd	r11, Y+40	; 0x28
    927e:	b9 01       	movw	r22, r18
    9280:	a8 01       	movw	r20, r16
    9282:	48 19       	sub	r20, r8
    9284:	59 09       	sbc	r21, r9
    9286:	6a 09       	sbc	r22, r10
    9288:	7b 09       	sbc	r23, r11
    928a:	48 17       	cp	r20, r24
    928c:	59 07       	cpc	r21, r25
    928e:	6a 07       	cpc	r22, r26
    9290:	7b 07       	cpc	r23, r27
    9292:	98 f4       	brcc	.+38     	; 0x92ba <sync_window.part.6+0x8c>
    9294:	6a 81       	ldd	r22, Y+2	; 0x02
    9296:	62 30       	cpi	r22, 0x02	; 2
    9298:	81 f4       	brne	.+32     	; 0x92ba <sync_window.part.6+0x8c>
    929a:	a9 01       	movw	r20, r18
    929c:	98 01       	movw	r18, r16
    929e:	28 0f       	add	r18, r24
    92a0:	39 1f       	adc	r19, r25
    92a2:	4a 1f       	adc	r20, r26
    92a4:	5b 1f       	adc	r21, r27
    92a6:	01 e0       	ldi	r16, 0x01	; 1
    92a8:	10 e0       	ldi	r17, 0x00	; 0
    92aa:	b7 01       	movw	r22, r14
    92ac:	89 81       	ldd	r24, Y+1	; 0x01
    92ae:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <disk_write>
    92b2:	03 c0       	rjmp	.+6      	; 0x92ba <sync_window.part.6+0x8c>
    92b4:	81 e0       	ldi	r24, 0x01	; 1
    92b6:	90 e0       	ldi	r25, 0x00	; 0
    92b8:	02 c0       	rjmp	.+4      	; 0x92be <sync_window.part.6+0x90>
    92ba:	80 e0       	ldi	r24, 0x00	; 0
    92bc:	90 e0       	ldi	r25, 0x00	; 0
    92be:	df 91       	pop	r29
    92c0:	cf 91       	pop	r28
    92c2:	1f 91       	pop	r17
    92c4:	0f 91       	pop	r16
    92c6:	ff 90       	pop	r15
    92c8:	ef 90       	pop	r14
    92ca:	bf 90       	pop	r11
    92cc:	af 90       	pop	r10
    92ce:	9f 90       	pop	r9
    92d0:	8f 90       	pop	r8
    92d2:	08 95       	ret

000092d4 <sync_fs>:
    92d4:	ef 92       	push	r14
    92d6:	ff 92       	push	r15
    92d8:	0f 93       	push	r16
    92da:	1f 93       	push	r17
    92dc:	cf 93       	push	r28
    92de:	df 93       	push	r29
    92e0:	ec 01       	movw	r28, r24
    92e2:	8b 81       	ldd	r24, Y+3	; 0x03
    92e4:	81 11       	cpse	r24, r1
    92e6:	05 c0       	rjmp	.+10     	; 0x92f2 <sync_fs+0x1e>
    92e8:	88 81       	ld	r24, Y
    92ea:	83 30       	cpi	r24, 0x03	; 3
    92ec:	09 f0       	breq	.+2      	; 0x92f0 <sync_fs+0x1c>
    92ee:	52 c0       	rjmp	.+164    	; 0x9394 <sync_fs+0xc0>
    92f0:	06 c0       	rjmp	.+12     	; 0x92fe <sync_fs+0x2a>
    92f2:	ce 01       	movw	r24, r28
    92f4:	9c df       	rcall	.-200    	; 0x922e <sync_window.part.6>
    92f6:	00 97       	sbiw	r24, 0x00	; 0
    92f8:	09 f0       	breq	.+2      	; 0x92fc <sync_fs+0x28>
    92fa:	59 c0       	rjmp	.+178    	; 0x93ae <sync_fs+0xda>
    92fc:	f5 cf       	rjmp	.-22     	; 0x92e8 <sync_fs+0x14>
    92fe:	8c 81       	ldd	r24, Y+4	; 0x04
    9300:	81 30       	cpi	r24, 0x01	; 1
    9302:	09 f0       	breq	.+2      	; 0x9306 <sync_fs+0x32>
    9304:	47 c0       	rjmp	.+142    	; 0x9394 <sync_fs+0xc0>
    9306:	40 e0       	ldi	r20, 0x00	; 0
    9308:	52 e0       	ldi	r21, 0x02	; 2
    930a:	60 e0       	ldi	r22, 0x00	; 0
    930c:	70 e0       	ldi	r23, 0x00	; 0
    930e:	7e 01       	movw	r14, r28
    9310:	85 e3       	ldi	r24, 0x35	; 53
    9312:	e8 0e       	add	r14, r24
    9314:	f1 1c       	adc	r15, r1
    9316:	c7 01       	movw	r24, r14
    9318:	37 dc       	rcall	.-1938   	; 0x8b88 <mem_set>
    931a:	85 e5       	ldi	r24, 0x55	; 85
    931c:	fe 01       	movw	r30, r28
    931e:	ed 5c       	subi	r30, 0xCD	; 205
    9320:	fd 4f       	sbci	r31, 0xFD	; 253
    9322:	80 83       	st	Z, r24
    9324:	8a ea       	ldi	r24, 0xAA	; 170
    9326:	31 96       	adiw	r30, 0x01	; 1
    9328:	80 83       	st	Z, r24
    932a:	82 e5       	ldi	r24, 0x52	; 82
    932c:	8d ab       	std	Y+53, r24	; 0x35
    932e:	8e ab       	std	Y+54, r24	; 0x36
    9330:	81 e6       	ldi	r24, 0x61	; 97
    9332:	8f ab       	std	Y+55, r24	; 0x37
    9334:	91 e4       	ldi	r25, 0x41	; 65
    9336:	98 af       	std	Y+56, r25	; 0x38
    9338:	22 e7       	ldi	r18, 0x72	; 114
    933a:	7b 97       	sbiw	r30, 0x1b	; 27
    933c:	20 83       	st	Z, r18
    933e:	31 96       	adiw	r30, 0x01	; 1
    9340:	20 83       	st	Z, r18
    9342:	31 96       	adiw	r30, 0x01	; 1
    9344:	90 83       	st	Z, r25
    9346:	31 96       	adiw	r30, 0x01	; 1
    9348:	80 83       	st	Z, r24
    934a:	49 89       	ldd	r20, Y+17	; 0x11
    934c:	5a 89       	ldd	r21, Y+18	; 0x12
    934e:	6b 89       	ldd	r22, Y+19	; 0x13
    9350:	7c 89       	ldd	r23, Y+20	; 0x14
    9352:	ce 01       	movw	r24, r28
    9354:	83 5e       	subi	r24, 0xE3	; 227
    9356:	9d 4f       	sbci	r25, 0xFD	; 253
    9358:	11 dc       	rcall	.-2014   	; 0x8b7c <st_dword>
    935a:	4d 85       	ldd	r20, Y+13	; 0x0d
    935c:	5e 85       	ldd	r21, Y+14	; 0x0e
    935e:	6f 85       	ldd	r22, Y+15	; 0x0f
    9360:	78 89       	ldd	r23, Y+16	; 0x10
    9362:	ce 01       	movw	r24, r28
    9364:	8f 5d       	subi	r24, 0xDF	; 223
    9366:	9d 4f       	sbci	r25, 0xFD	; 253
    9368:	09 dc       	rcall	.-2030   	; 0x8b7c <st_dword>
    936a:	89 a1       	ldd	r24, Y+33	; 0x21
    936c:	9a a1       	ldd	r25, Y+34	; 0x22
    936e:	ab a1       	ldd	r26, Y+35	; 0x23
    9370:	bc a1       	ldd	r27, Y+36	; 0x24
    9372:	9c 01       	movw	r18, r24
    9374:	ad 01       	movw	r20, r26
    9376:	2f 5f       	subi	r18, 0xFF	; 255
    9378:	3f 4f       	sbci	r19, 0xFF	; 255
    937a:	4f 4f       	sbci	r20, 0xFF	; 255
    937c:	5f 4f       	sbci	r21, 0xFF	; 255
    937e:	29 ab       	std	Y+49, r18	; 0x31
    9380:	3a ab       	std	Y+50, r19	; 0x32
    9382:	4b ab       	std	Y+51, r20	; 0x33
    9384:	5c ab       	std	Y+52, r21	; 0x34
    9386:	01 e0       	ldi	r16, 0x01	; 1
    9388:	10 e0       	ldi	r17, 0x00	; 0
    938a:	b7 01       	movw	r22, r14
    938c:	89 81       	ldd	r24, Y+1	; 0x01
    938e:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <disk_write>
    9392:	1c 82       	std	Y+4, r1	; 0x04
    9394:	40 e0       	ldi	r20, 0x00	; 0
    9396:	50 e0       	ldi	r21, 0x00	; 0
    9398:	60 e0       	ldi	r22, 0x00	; 0
    939a:	89 81       	ldd	r24, Y+1	; 0x01
    939c:	0e 94 ed 68 	call	0xd1da	; 0xd1da <disk_ioctl>
    93a0:	31 e0       	ldi	r19, 0x01	; 1
    93a2:	20 e0       	ldi	r18, 0x00	; 0
    93a4:	89 2b       	or	r24, r25
    93a6:	09 f4       	brne	.+2      	; 0x93aa <sync_fs+0xd6>
    93a8:	30 e0       	ldi	r19, 0x00	; 0
    93aa:	83 2f       	mov	r24, r19
    93ac:	92 2f       	mov	r25, r18
    93ae:	cd b7       	in	r28, 0x3d	; 61
    93b0:	de b7       	in	r29, 0x3e	; 62
    93b2:	e6 e0       	ldi	r30, 0x06	; 6
    93b4:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

000093b8 <dir_clear>:
    93b8:	4f 92       	push	r4
    93ba:	5f 92       	push	r5
    93bc:	6f 92       	push	r6
    93be:	7f 92       	push	r7
    93c0:	af 92       	push	r10
    93c2:	bf 92       	push	r11
    93c4:	cf 92       	push	r12
    93c6:	df 92       	push	r13
    93c8:	ef 92       	push	r14
    93ca:	ff 92       	push	r15
    93cc:	0f 93       	push	r16
    93ce:	1f 93       	push	r17
    93d0:	cf 93       	push	r28
    93d2:	df 93       	push	r29
    93d4:	ec 01       	movw	r28, r24
    93d6:	6a 01       	movw	r12, r20
    93d8:	7b 01       	movw	r14, r22
    93da:	8b 81       	ldd	r24, Y+3	; 0x03
    93dc:	81 11       	cpse	r24, r1
    93de:	28 c0       	rjmp	.+80     	; 0x9430 <dir_clear+0x78>
    93e0:	b7 01       	movw	r22, r14
    93e2:	a6 01       	movw	r20, r12
    93e4:	ce 01       	movw	r24, r28
    93e6:	6e dc       	rcall	.-1828   	; 0x8cc4 <clst2sect>
    93e8:	2b 01       	movw	r4, r22
    93ea:	3c 01       	movw	r6, r24
    93ec:	69 ab       	std	Y+49, r22	; 0x31
    93ee:	7a ab       	std	Y+50, r23	; 0x32
    93f0:	8b ab       	std	Y+51, r24	; 0x33
    93f2:	9c ab       	std	Y+52, r25	; 0x34
    93f4:	5e 01       	movw	r10, r28
    93f6:	25 e3       	ldi	r18, 0x35	; 53
    93f8:	a2 0e       	add	r10, r18
    93fa:	b1 1c       	adc	r11, r1
    93fc:	40 e0       	ldi	r20, 0x00	; 0
    93fe:	52 e0       	ldi	r21, 0x02	; 2
    9400:	60 e0       	ldi	r22, 0x00	; 0
    9402:	70 e0       	ldi	r23, 0x00	; 0
    9404:	c5 01       	movw	r24, r10
    9406:	c0 db       	rcall	.-2176   	; 0x8b88 <mem_set>
    9408:	09 85       	ldd	r16, Y+9	; 0x09
    940a:	1a 85       	ldd	r17, Y+10	; 0x0a
    940c:	c8 01       	movw	r24, r16
    940e:	a0 e0       	ldi	r26, 0x00	; 0
    9410:	b0 e0       	ldi	r27, 0x00	; 0
    9412:	39 e0       	ldi	r19, 0x09	; 9
    9414:	88 0f       	add	r24, r24
    9416:	99 1f       	adc	r25, r25
    9418:	aa 1f       	adc	r26, r26
    941a:	bb 1f       	adc	r27, r27
    941c:	3a 95       	dec	r19
    941e:	d1 f7       	brne	.-12     	; 0x9414 <dir_clear+0x5c>
    9420:	81 15       	cp	r24, r1
    9422:	90 48       	sbci	r25, 0x80	; 128
    9424:	a1 05       	cpc	r26, r1
    9426:	b1 05       	cpc	r27, r1
    9428:	50 f0       	brcs	.+20     	; 0x943e <dir_clear+0x86>
    942a:	00 e0       	ldi	r16, 0x00	; 0
    942c:	10 e8       	ldi	r17, 0x80	; 128
    942e:	14 c0       	rjmp	.+40     	; 0x9458 <dir_clear+0xa0>
    9430:	ce 01       	movw	r24, r28
    9432:	fd de       	rcall	.-518    	; 0x922e <sync_window.part.6>
    9434:	89 2b       	or	r24, r25
    9436:	a1 f2       	breq	.-88     	; 0x93e0 <dir_clear+0x28>
    9438:	81 e0       	ldi	r24, 0x01	; 1
    943a:	90 e0       	ldi	r25, 0x00	; 0
    943c:	56 c0       	rjmp	.+172    	; 0x94ea <dir_clear+0x132>
    943e:	10 2f       	mov	r17, r16
    9440:	00 27       	eor	r16, r16
    9442:	11 0f       	add	r17, r17
    9444:	09 c0       	rjmp	.+18     	; 0x9458 <dir_clear+0xa0>
    9446:	c8 01       	movw	r24, r16
    9448:	0e 94 11 68 	call	0xd022	; 0xd022 <ff_memalloc>
    944c:	6c 01       	movw	r12, r24
    944e:	00 97       	sbiw	r24, 0x00	; 0
    9450:	09 f0       	breq	.+2      	; 0x9454 <dir_clear+0x9c>
    9452:	40 c0       	rjmp	.+128    	; 0x94d4 <dir_clear+0x11c>
    9454:	16 95       	lsr	r17
    9456:	07 95       	ror	r16
    9458:	01 30       	cpi	r16, 0x01	; 1
    945a:	82 e0       	ldi	r24, 0x02	; 2
    945c:	18 07       	cpc	r17, r24
    945e:	98 f7       	brcc	.-26     	; 0x9446 <dir_clear+0x8e>
    9460:	e1 2c       	mov	r14, r1
    9462:	f1 2c       	mov	r15, r1
    9464:	11 c0       	rjmp	.+34     	; 0x9488 <dir_clear+0xd0>
    9466:	01 e0       	ldi	r16, 0x01	; 1
    9468:	10 e0       	ldi	r17, 0x00	; 0
    946a:	a3 01       	movw	r20, r6
    946c:	92 01       	movw	r18, r4
    946e:	2e 0d       	add	r18, r14
    9470:	3f 1d       	adc	r19, r15
    9472:	41 1d       	adc	r20, r1
    9474:	51 1d       	adc	r21, r1
    9476:	b5 01       	movw	r22, r10
    9478:	89 81       	ldd	r24, Y+1	; 0x01
    947a:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <disk_write>
    947e:	89 2b       	or	r24, r25
    9480:	01 f5       	brne	.+64     	; 0x94c2 <dir_clear+0x10a>
    9482:	2f ef       	ldi	r18, 0xFF	; 255
    9484:	e2 1a       	sub	r14, r18
    9486:	f2 0a       	sbc	r15, r18
    9488:	89 85       	ldd	r24, Y+9	; 0x09
    948a:	9a 85       	ldd	r25, Y+10	; 0x0a
    948c:	e8 16       	cp	r14, r24
    948e:	f9 06       	cpc	r15, r25
    9490:	50 f3       	brcs	.-44     	; 0x9466 <dir_clear+0xae>
    9492:	17 c0       	rjmp	.+46     	; 0x94c2 <dir_clear+0x10a>
    9494:	85 01       	movw	r16, r10
    9496:	a3 01       	movw	r20, r6
    9498:	92 01       	movw	r18, r4
    949a:	2e 0d       	add	r18, r14
    949c:	3f 1d       	adc	r19, r15
    949e:	41 1d       	adc	r20, r1
    94a0:	51 1d       	adc	r21, r1
    94a2:	b6 01       	movw	r22, r12
    94a4:	89 81       	ldd	r24, Y+1	; 0x01
    94a6:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <disk_write>
    94aa:	89 2b       	or	r24, r25
    94ac:	39 f4       	brne	.+14     	; 0x94bc <dir_clear+0x104>
    94ae:	ea 0c       	add	r14, r10
    94b0:	fb 1c       	adc	r15, r11
    94b2:	89 85       	ldd	r24, Y+9	; 0x09
    94b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    94b6:	e8 16       	cp	r14, r24
    94b8:	f9 06       	cpc	r15, r25
    94ba:	60 f3       	brcs	.-40     	; 0x9494 <dir_clear+0xdc>
    94bc:	c6 01       	movw	r24, r12
    94be:	0e 94 14 68 	call	0xd028	; 0xd028 <ff_memfree>
    94c2:	81 e0       	ldi	r24, 0x01	; 1
    94c4:	90 e0       	ldi	r25, 0x00	; 0
    94c6:	29 85       	ldd	r18, Y+9	; 0x09
    94c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    94ca:	2e 15       	cp	r18, r14
    94cc:	3f 05       	cpc	r19, r15
    94ce:	69 f4       	brne	.+26     	; 0x94ea <dir_clear+0x132>
    94d0:	80 e0       	ldi	r24, 0x00	; 0
    94d2:	0b c0       	rjmp	.+22     	; 0x94ea <dir_clear+0x132>
    94d4:	a8 01       	movw	r20, r16
    94d6:	60 e0       	ldi	r22, 0x00	; 0
    94d8:	70 e0       	ldi	r23, 0x00	; 0
    94da:	56 db       	rcall	.-2388   	; 0x8b88 <mem_set>
    94dc:	58 01       	movw	r10, r16
    94de:	ab 2c       	mov	r10, r11
    94e0:	bb 24       	eor	r11, r11
    94e2:	a6 94       	lsr	r10
    94e4:	e1 2c       	mov	r14, r1
    94e6:	f1 2c       	mov	r15, r1
    94e8:	e4 cf       	rjmp	.-56     	; 0x94b2 <dir_clear+0xfa>
    94ea:	df 91       	pop	r29
    94ec:	cf 91       	pop	r28
    94ee:	1f 91       	pop	r17
    94f0:	0f 91       	pop	r16
    94f2:	ff 90       	pop	r15
    94f4:	ef 90       	pop	r14
    94f6:	df 90       	pop	r13
    94f8:	cf 90       	pop	r12
    94fa:	bf 90       	pop	r11
    94fc:	af 90       	pop	r10
    94fe:	7f 90       	pop	r7
    9500:	6f 90       	pop	r6
    9502:	5f 90       	pop	r5
    9504:	4f 90       	pop	r4
    9506:	08 95       	ret

00009508 <move_window>:
    9508:	a0 e0       	ldi	r26, 0x00	; 0
    950a:	b0 e0       	ldi	r27, 0x00	; 0
    950c:	ea e8       	ldi	r30, 0x8A	; 138
    950e:	fa e4       	ldi	r31, 0x4A	; 74
    9510:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
    9514:	ec 01       	movw	r28, r24
    9516:	6a 01       	movw	r12, r20
    9518:	7b 01       	movw	r14, r22
    951a:	89 a9       	ldd	r24, Y+49	; 0x31
    951c:	9a a9       	ldd	r25, Y+50	; 0x32
    951e:	ab a9       	ldd	r26, Y+51	; 0x33
    9520:	bc a9       	ldd	r27, Y+52	; 0x34
    9522:	84 17       	cp	r24, r20
    9524:	95 07       	cpc	r25, r21
    9526:	a6 07       	cpc	r26, r22
    9528:	b7 07       	cpc	r27, r23
    952a:	11 f1       	breq	.+68     	; 0x9570 <move_window+0x68>
    952c:	8b 81       	ldd	r24, Y+3	; 0x03
    952e:	81 11       	cpse	r24, r1
    9530:	13 c0       	rjmp	.+38     	; 0x9558 <move_window+0x50>
    9532:	01 e0       	ldi	r16, 0x01	; 1
    9534:	10 e0       	ldi	r17, 0x00	; 0
    9536:	a7 01       	movw	r20, r14
    9538:	96 01       	movw	r18, r12
    953a:	be 01       	movw	r22, r28
    953c:	6b 5c       	subi	r22, 0xCB	; 203
    953e:	7f 4f       	sbci	r23, 0xFF	; 255
    9540:	89 81       	ldd	r24, Y+1	; 0x01
    9542:	0e 94 cd 68 	call	0xd19a	; 0xd19a <disk_read>
    9546:	89 2b       	or	r24, r25
    9548:	61 f0       	breq	.+24     	; 0x9562 <move_window+0x5a>
    954a:	81 e0       	ldi	r24, 0x01	; 1
    954c:	90 e0       	ldi	r25, 0x00	; 0
    954e:	cc 24       	eor	r12, r12
    9550:	ca 94       	dec	r12
    9552:	dc 2c       	mov	r13, r12
    9554:	76 01       	movw	r14, r12
    9556:	07 c0       	rjmp	.+14     	; 0x9566 <move_window+0x5e>
    9558:	ce 01       	movw	r24, r28
    955a:	69 de       	rcall	.-814    	; 0x922e <sync_window.part.6>
    955c:	00 97       	sbiw	r24, 0x00	; 0
    955e:	51 f4       	brne	.+20     	; 0x9574 <move_window+0x6c>
    9560:	e8 cf       	rjmp	.-48     	; 0x9532 <move_window+0x2a>
    9562:	80 e0       	ldi	r24, 0x00	; 0
    9564:	90 e0       	ldi	r25, 0x00	; 0
    9566:	c9 aa       	std	Y+49, r12	; 0x31
    9568:	da aa       	std	Y+50, r13	; 0x32
    956a:	eb aa       	std	Y+51, r14	; 0x33
    956c:	fc aa       	std	Y+52, r15	; 0x34
    956e:	02 c0       	rjmp	.+4      	; 0x9574 <move_window+0x6c>
    9570:	80 e0       	ldi	r24, 0x00	; 0
    9572:	90 e0       	ldi	r25, 0x00	; 0
    9574:	cd b7       	in	r28, 0x3d	; 61
    9576:	de b7       	in	r29, 0x3e	; 62
    9578:	e8 e0       	ldi	r30, 0x08	; 8
    957a:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

0000957e <check_fs>:
    957e:	cf 93       	push	r28
    9580:	df 93       	push	r29
    9582:	ec 01       	movw	r28, r24
    9584:	1b 82       	std	Y+3, r1	; 0x03
    9586:	8f ef       	ldi	r24, 0xFF	; 255
    9588:	9f ef       	ldi	r25, 0xFF	; 255
    958a:	dc 01       	movw	r26, r24
    958c:	89 ab       	std	Y+49, r24	; 0x31
    958e:	9a ab       	std	Y+50, r25	; 0x32
    9590:	ab ab       	std	Y+51, r26	; 0x33
    9592:	bc ab       	std	Y+52, r27	; 0x34
    9594:	ce 01       	movw	r24, r28
    9596:	b8 df       	rcall	.-144    	; 0x9508 <move_window>
    9598:	89 2b       	or	r24, r25
    959a:	19 f5       	brne	.+70     	; 0x95e2 <check_fs+0x64>
    959c:	fe 01       	movw	r30, r28
    959e:	ed 5c       	subi	r30, 0xCD	; 205
    95a0:	fd 4f       	sbci	r31, 0xFD	; 253
    95a2:	80 81       	ld	r24, Z
    95a4:	91 81       	ldd	r25, Z+1	; 0x01
    95a6:	85 35       	cpi	r24, 0x55	; 85
    95a8:	9a 4a       	sbci	r25, 0xAA	; 170
    95aa:	f1 f4       	brne	.+60     	; 0x95e8 <check_fs+0x6a>
    95ac:	8d a9       	ldd	r24, Y+53	; 0x35
    95ae:	8b 3e       	cpi	r24, 0xEB	; 235
    95b0:	19 f0       	breq	.+6      	; 0x95b8 <check_fs+0x3a>
    95b2:	88 5e       	subi	r24, 0xE8	; 232
    95b4:	82 30       	cpi	r24, 0x02	; 2
    95b6:	f0 f4       	brcc	.+60     	; 0x95f4 <check_fs+0x76>
    95b8:	43 e0       	ldi	r20, 0x03	; 3
    95ba:	50 e0       	ldi	r21, 0x00	; 0
    95bc:	66 ec       	ldi	r22, 0xC6	; 198
    95be:	78 e0       	ldi	r23, 0x08	; 8
    95c0:	ce 01       	movw	r24, r28
    95c2:	85 59       	subi	r24, 0x95	; 149
    95c4:	9f 4f       	sbci	r25, 0xFF	; 255
    95c6:	e9 da       	rcall	.-2606   	; 0x8b9a <mem_cmp>
    95c8:	89 2b       	or	r24, r25
    95ca:	89 f0       	breq	.+34     	; 0x95ee <check_fs+0x70>
    95cc:	45 e0       	ldi	r20, 0x05	; 5
    95ce:	50 e0       	ldi	r21, 0x00	; 0
    95d0:	61 e2       	ldi	r22, 0x21	; 33
    95d2:	74 e0       	ldi	r23, 0x04	; 4
    95d4:	ce 01       	movw	r24, r28
    95d6:	89 57       	subi	r24, 0x79	; 121
    95d8:	9f 4f       	sbci	r25, 0xFF	; 255
    95da:	df da       	rcall	.-2626   	; 0x8b9a <mem_cmp>
    95dc:	89 2b       	or	r24, r25
    95de:	51 f4       	brne	.+20     	; 0x95f4 <check_fs+0x76>
    95e0:	06 c0       	rjmp	.+12     	; 0x95ee <check_fs+0x70>
    95e2:	84 e0       	ldi	r24, 0x04	; 4
    95e4:	90 e0       	ldi	r25, 0x00	; 0
    95e6:	08 c0       	rjmp	.+16     	; 0x95f8 <check_fs+0x7a>
    95e8:	83 e0       	ldi	r24, 0x03	; 3
    95ea:	90 e0       	ldi	r25, 0x00	; 0
    95ec:	05 c0       	rjmp	.+10     	; 0x95f8 <check_fs+0x7a>
    95ee:	80 e0       	ldi	r24, 0x00	; 0
    95f0:	90 e0       	ldi	r25, 0x00	; 0
    95f2:	02 c0       	rjmp	.+4      	; 0x95f8 <check_fs+0x7a>
    95f4:	82 e0       	ldi	r24, 0x02	; 2
    95f6:	90 e0       	ldi	r25, 0x00	; 0
    95f8:	df 91       	pop	r29
    95fa:	cf 91       	pop	r28
    95fc:	08 95       	ret

000095fe <mount_volume>:
    95fe:	a0 e2       	ldi	r26, 0x20	; 32
    9600:	b0 e0       	ldi	r27, 0x00	; 0
    9602:	e5 e0       	ldi	r30, 0x05	; 5
    9604:	fb e4       	ldi	r31, 0x4B	; 75
    9606:	0c 94 40 e3 	jmp	0x1c680	; 0x1c680 <__prologue_saves__+0x4>
    960a:	5b 01       	movw	r10, r22
    960c:	f4 2e       	mov	r15, r20
    960e:	db 01       	movw	r26, r22
    9610:	1d 92       	st	X+, r1
    9612:	1c 92       	st	X, r1
    9614:	ca db       	rcall	.-2156   	; 0x8daa <get_ldnumber>
    9616:	6c 01       	movw	r12, r24
    9618:	97 fd       	sbrc	r25, 7
    961a:	39 c2       	rjmp	.+1138   	; 0x9a8e <mount_volume+0x490>
    961c:	fc 01       	movw	r30, r24
    961e:	ee 0f       	add	r30, r30
    9620:	ff 1f       	adc	r31, r31
    9622:	e1 5e       	subi	r30, 0xE1	; 225
    9624:	f7 4e       	sbci	r31, 0xE7	; 231
    9626:	00 81       	ld	r16, Z
    9628:	11 81       	ldd	r17, Z+1	; 0x01
    962a:	01 15       	cp	r16, r1
    962c:	11 05       	cpc	r17, r1
    962e:	09 f4       	brne	.+2      	; 0x9632 <mount_volume+0x34>
    9630:	31 c2       	rjmp	.+1122   	; 0x9a94 <mount_volume+0x496>
    9632:	f5 01       	movw	r30, r10
    9634:	11 83       	std	Z+1, r17	; 0x01
    9636:	00 83       	st	Z, r16
    9638:	ff 2d       	mov	r31, r15
    963a:	fe 7f       	andi	r31, 0xFE	; 254
    963c:	ff 2e       	mov	r15, r31
    963e:	d8 01       	movw	r26, r16
    9640:	8c 91       	ld	r24, X
    9642:	88 23       	and	r24, r24
    9644:	71 f0       	breq	.+28     	; 0x9662 <mount_volume+0x64>
    9646:	f8 01       	movw	r30, r16
    9648:	81 81       	ldd	r24, Z+1	; 0x01
    964a:	0e 94 c1 68 	call	0xd182	; 0xd182 <disk_status>
    964e:	80 fd       	sbrc	r24, 0
    9650:	08 c0       	rjmp	.+16     	; 0x9662 <mount_volume+0x64>
    9652:	ff 20       	and	r15, r15
    9654:	09 f4       	brne	.+2      	; 0x9658 <mount_volume+0x5a>
    9656:	21 c2       	rjmp	.+1090   	; 0x9a9a <mount_volume+0x49c>
    9658:	82 ff       	sbrs	r24, 2
    965a:	1f c2       	rjmp	.+1086   	; 0x9a9a <mount_volume+0x49c>
    965c:	8a e0       	ldi	r24, 0x0A	; 10
    965e:	90 e0       	ldi	r25, 0x00	; 0
    9660:	24 c2       	rjmp	.+1096   	; 0x9aaa <mount_volume+0x4ac>
    9662:	d8 01       	movw	r26, r16
    9664:	1c 92       	st	X, r1
    9666:	f8 01       	movw	r30, r16
    9668:	c1 82       	std	Z+1, r12	; 0x01
    966a:	8c 2d       	mov	r24, r12
    966c:	0e 94 c7 68 	call	0xd18e	; 0xd18e <disk_initialize>
    9670:	80 fd       	sbrc	r24, 0
    9672:	16 c2       	rjmp	.+1068   	; 0x9aa0 <mount_volume+0x4a2>
    9674:	ff 20       	and	r15, r15
    9676:	11 f0       	breq	.+4      	; 0x967c <mount_volume+0x7e>
    9678:	82 fd       	sbrc	r24, 2
    967a:	f0 cf       	rjmp	.-32     	; 0x965c <mount_volume+0x5e>
    967c:	40 e0       	ldi	r20, 0x00	; 0
    967e:	50 e0       	ldi	r21, 0x00	; 0
    9680:	ba 01       	movw	r22, r20
    9682:	c8 01       	movw	r24, r16
    9684:	7c df       	rcall	.-264    	; 0x957e <check_fs>
    9686:	82 30       	cpi	r24, 0x02	; 2
    9688:	91 05       	cpc	r25, r1
    968a:	b9 f5       	brne	.+110    	; 0x96fa <mount_volume+0xfc>
    968c:	68 01       	movw	r12, r16
    968e:	f5 e0       	ldi	r31, 0x05	; 5
    9690:	cf 1a       	sub	r12, r31
    9692:	fe ef       	ldi	r31, 0xFE	; 254
    9694:	df 0a       	sbc	r13, r31
    9696:	9e 01       	movw	r18, r28
    9698:	2f 5f       	subi	r18, 0xFF	; 255
    969a:	3f 4f       	sbci	r19, 0xFF	; 255
    969c:	79 01       	movw	r14, r18
    969e:	48 01       	movw	r8, r16
    96a0:	35 ec       	ldi	r19, 0xC5	; 197
    96a2:	83 1a       	sub	r8, r19
    96a4:	3d ef       	ldi	r19, 0xFD	; 253
    96a6:	93 0a       	sbc	r9, r19
    96a8:	57 01       	movw	r10, r14
    96aa:	c6 01       	movw	r24, r12
    96ac:	52 da       	rcall	.-2908   	; 0x8b52 <ld_dword>
    96ae:	d5 01       	movw	r26, r10
    96b0:	6d 93       	st	X+, r22
    96b2:	7d 93       	st	X+, r23
    96b4:	8d 93       	st	X+, r24
    96b6:	9d 93       	st	X+, r25
    96b8:	5d 01       	movw	r10, r26
    96ba:	b0 e1       	ldi	r27, 0x10	; 16
    96bc:	cb 0e       	add	r12, r27
    96be:	d1 1c       	adc	r13, r1
    96c0:	c8 14       	cp	r12, r8
    96c2:	d9 04       	cpc	r13, r9
    96c4:	91 f7       	brne	.-28     	; 0x96aa <mount_volume+0xac>
    96c6:	6e 01       	movw	r12, r28
    96c8:	e1 e1       	ldi	r30, 0x11	; 17
    96ca:	ce 0e       	add	r12, r30
    96cc:	d1 1c       	adc	r13, r1
    96ce:	d7 01       	movw	r26, r14
    96d0:	4d 91       	ld	r20, X+
    96d2:	5d 91       	ld	r21, X+
    96d4:	6d 91       	ld	r22, X+
    96d6:	7d 91       	ld	r23, X+
    96d8:	7d 01       	movw	r14, r26
    96da:	41 15       	cp	r20, r1
    96dc:	51 05       	cpc	r21, r1
    96de:	61 05       	cpc	r22, r1
    96e0:	71 05       	cpc	r23, r1
    96e2:	31 f0       	breq	.+12     	; 0x96f0 <mount_volume+0xf2>
    96e4:	c8 01       	movw	r24, r16
    96e6:	4b df       	rcall	.-362    	; 0x957e <check_fs>
    96e8:	82 30       	cpi	r24, 0x02	; 2
    96ea:	91 05       	cpc	r25, r1
    96ec:	18 f4       	brcc	.+6      	; 0x96f4 <mount_volume+0xf6>
    96ee:	05 c0       	rjmp	.+10     	; 0x96fa <mount_volume+0xfc>
    96f0:	83 e0       	ldi	r24, 0x03	; 3
    96f2:	90 e0       	ldi	r25, 0x00	; 0
    96f4:	ce 14       	cp	r12, r14
    96f6:	df 04       	cpc	r13, r15
    96f8:	51 f7       	brne	.-44     	; 0x96ce <mount_volume+0xd0>
    96fa:	84 30       	cpi	r24, 0x04	; 4
    96fc:	91 05       	cpc	r25, r1
    96fe:	09 f4       	brne	.+2      	; 0x9702 <mount_volume+0x104>
    9700:	d2 c1       	rjmp	.+932    	; 0x9aa6 <mount_volume+0x4a8>
    9702:	02 97       	sbiw	r24, 0x02	; 2
    9704:	18 f0       	brcs	.+6      	; 0x970c <mount_volume+0x10e>
    9706:	8d e0       	ldi	r24, 0x0D	; 13
    9708:	90 e0       	ldi	r25, 0x00	; 0
    970a:	cf c1       	rjmp	.+926    	; 0x9aaa <mount_volume+0x4ac>
    970c:	f8 01       	movw	r30, r16
    970e:	e0 5c       	subi	r30, 0xC0	; 192
    9710:	ff 4f       	sbci	r31, 0xFF	; 255
    9712:	80 81       	ld	r24, Z
    9714:	91 81       	ldd	r25, Z+1	; 0x01
    9716:	81 15       	cp	r24, r1
    9718:	92 40       	sbci	r25, 0x02	; 2
    971a:	a9 f7       	brne	.-22     	; 0x9706 <mount_volume+0x108>
    971c:	3b 96       	adiw	r30, 0x0b	; 11
    971e:	40 80       	ld	r4, Z
    9720:	51 80       	ldd	r5, Z+1	; 0x01
    9722:	41 14       	cp	r4, r1
    9724:	51 04       	cpc	r5, r1
    9726:	19 f0       	breq	.+6      	; 0x972e <mount_volume+0x130>
    9728:	61 2c       	mov	r6, r1
    972a:	71 2c       	mov	r7, r1
    972c:	06 c0       	rjmp	.+12     	; 0x973a <mount_volume+0x13c>
    972e:	c8 01       	movw	r24, r16
    9730:	87 5a       	subi	r24, 0xA7	; 167
    9732:	9f 4f       	sbci	r25, 0xFF	; 255
    9734:	0e da       	rcall	.-3044   	; 0x8b52 <ld_dword>
    9736:	2b 01       	movw	r4, r22
    9738:	3c 01       	movw	r6, r24
    973a:	f8 01       	movw	r30, r16
    973c:	21 a9       	ldd	r18, Z+49	; 0x31
    973e:	32 a9       	ldd	r19, Z+50	; 0x32
    9740:	43 a9       	ldd	r20, Z+51	; 0x33
    9742:	54 a9       	ldd	r21, Z+52	; 0x34
    9744:	29 8b       	std	Y+17, r18	; 0x11
    9746:	3a 8b       	std	Y+18, r19	; 0x12
    9748:	4b 8b       	std	Y+19, r20	; 0x13
    974a:	5c 8b       	std	Y+20, r21	; 0x14
    974c:	45 8e       	std	Z+29, r4	; 0x1d
    974e:	56 8e       	std	Z+30, r5	; 0x1e
    9750:	67 8e       	std	Z+31, r6	; 0x1f
    9752:	70 a2       	std	Z+32, r7	; 0x20
    9754:	eb 5b       	subi	r30, 0xBB	; 187
    9756:	ff 4f       	sbci	r31, 0xFF	; 255
    9758:	a0 80       	ld	r10, Z
    975a:	f8 01       	movw	r30, r16
    975c:	a2 82       	std	Z+2, r10	; 0x02
    975e:	8f ef       	ldi	r24, 0xFF	; 255
    9760:	8a 0d       	add	r24, r10
    9762:	82 30       	cpi	r24, 0x02	; 2
    9764:	80 f6       	brcc	.-96     	; 0x9706 <mount_volume+0x108>
    9766:	ee 5b       	subi	r30, 0xBE	; 190
    9768:	ff 4f       	sbci	r31, 0xFF	; 255
    976a:	b0 80       	ld	r11, Z
    976c:	8b 2d       	mov	r24, r11
    976e:	90 e0       	ldi	r25, 0x00	; 0
    9770:	f8 01       	movw	r30, r16
    9772:	92 87       	std	Z+10, r25	; 0x0a
    9774:	81 87       	std	Z+9, r24	; 0x09
    9776:	00 97       	sbiw	r24, 0x00	; 0
    9778:	31 f2       	breq	.-116    	; 0x9706 <mount_volume+0x108>
    977a:	9c 01       	movw	r18, r24
    977c:	21 50       	subi	r18, 0x01	; 1
    977e:	31 09       	sbc	r19, r1
    9780:	82 23       	and	r24, r18
    9782:	93 23       	and	r25, r19
    9784:	89 2b       	or	r24, r25
    9786:	09 f0       	breq	.+2      	; 0x978a <mount_volume+0x18c>
    9788:	be cf       	rjmp	.-132    	; 0x9706 <mount_volume+0x108>
    978a:	ea 5b       	subi	r30, 0xBA	; 186
    978c:	ff 4f       	sbci	r31, 0xFF	; 255
    978e:	80 80       	ld	r8, Z
    9790:	91 80       	ldd	r9, Z+1	; 0x01
    9792:	f8 01       	movw	r30, r16
    9794:	90 86       	std	Z+8, r9	; 0x08
    9796:	87 82       	std	Z+7, r8	; 0x07
    9798:	c4 01       	movw	r24, r8
    979a:	8f 70       	andi	r24, 0x0F	; 15
    979c:	99 27       	eor	r25, r25
    979e:	89 2b       	or	r24, r25
    97a0:	09 f0       	breq	.+2      	; 0x97a4 <mount_volume+0x1a6>
    97a2:	b1 cf       	rjmp	.-158    	; 0x9706 <mount_volume+0x108>
    97a4:	e8 5b       	subi	r30, 0xB8	; 184
    97a6:	ff 4f       	sbci	r31, 0xFF	; 255
    97a8:	80 81       	ld	r24, Z
    97aa:	91 81       	ldd	r25, Z+1	; 0x01
    97ac:	6c 01       	movw	r12, r24
    97ae:	e1 2c       	mov	r14, r1
    97b0:	f1 2c       	mov	r15, r1
    97b2:	89 2b       	or	r24, r25
    97b4:	31 f4       	brne	.+12     	; 0x97c2 <mount_volume+0x1c4>
    97b6:	c8 01       	movw	r24, r16
    97b8:	8b 5a       	subi	r24, 0xAB	; 171
    97ba:	9f 4f       	sbci	r25, 0xFF	; 255
    97bc:	ca d9       	rcall	.-3180   	; 0x8b52 <ld_dword>
    97be:	6b 01       	movw	r12, r22
    97c0:	7c 01       	movw	r14, r24
    97c2:	f8 01       	movw	r30, r16
    97c4:	ed 5b       	subi	r30, 0xBD	; 189
    97c6:	ff 4f       	sbci	r31, 0xFF	; 255
    97c8:	01 90       	ld	r0, Z+
    97ca:	f0 81       	ld	r31, Z
    97cc:	e0 2d       	mov	r30, r0
    97ce:	30 97       	sbiw	r30, 0x00	; 0
    97d0:	09 f4       	brne	.+2      	; 0x97d4 <mount_volume+0x1d6>
    97d2:	99 cf       	rjmp	.-206    	; 0x9706 <mount_volume+0x108>
    97d4:	aa 2d       	mov	r26, r10
    97d6:	b0 e0       	ldi	r27, 0x00	; 0
    97d8:	a3 01       	movw	r20, r6
    97da:	92 01       	movw	r18, r4
    97dc:	0e 94 1e e3 	call	0x1c63c	; 0x1c63c <__muluhisi3>
    97e0:	69 8f       	std	Y+25, r22	; 0x19
    97e2:	7a 8f       	std	Y+26, r23	; 0x1a
    97e4:	8b 8f       	std	Y+27, r24	; 0x1b
    97e6:	9c 8f       	std	Y+28, r25	; 0x1c
    97e8:	9f 01       	movw	r18, r30
    97ea:	40 e0       	ldi	r20, 0x00	; 0
    97ec:	50 e0       	ldi	r21, 0x00	; 0
    97ee:	2d 8f       	std	Y+29, r18	; 0x1d
    97f0:	3e 8f       	std	Y+30, r19	; 0x1e
    97f2:	4f 8f       	std	Y+31, r20	; 0x1f
    97f4:	58 a3       	std	Y+32, r21	; 0x20
    97f6:	c4 01       	movw	r24, r8
    97f8:	f4 e0       	ldi	r31, 0x04	; 4
    97fa:	96 95       	lsr	r25
    97fc:	87 95       	ror	r24
    97fe:	fa 95       	dec	r31
    9800:	e1 f7       	brne	.-8      	; 0x97fa <mount_volume+0x1fc>
    9802:	28 0f       	add	r18, r24
    9804:	39 1f       	adc	r19, r25
    9806:	41 1d       	adc	r20, r1
    9808:	51 1d       	adc	r21, r1
    980a:	da 01       	movw	r26, r20
    980c:	c9 01       	movw	r24, r18
    980e:	29 8d       	ldd	r18, Y+25	; 0x19
    9810:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9812:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9814:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9816:	28 0f       	add	r18, r24
    9818:	39 1f       	adc	r19, r25
    981a:	4a 1f       	adc	r20, r26
    981c:	5b 1f       	adc	r21, r27
    981e:	2d 8b       	std	Y+21, r18	; 0x15
    9820:	3e 8b       	std	Y+22, r19	; 0x16
    9822:	4f 8b       	std	Y+23, r20	; 0x17
    9824:	58 8f       	std	Y+24, r21	; 0x18
    9826:	c2 16       	cp	r12, r18
    9828:	d3 06       	cpc	r13, r19
    982a:	e4 06       	cpc	r14, r20
    982c:	f5 06       	cpc	r15, r21
    982e:	08 f4       	brcc	.+2      	; 0x9832 <mount_volume+0x234>
    9830:	6a cf       	rjmp	.-300    	; 0x9706 <mount_volume+0x108>
    9832:	c7 01       	movw	r24, r14
    9834:	b6 01       	movw	r22, r12
    9836:	62 1b       	sub	r22, r18
    9838:	73 0b       	sbc	r23, r19
    983a:	84 0b       	sbc	r24, r20
    983c:	95 0b       	sbc	r25, r21
    983e:	2b 2d       	mov	r18, r11
    9840:	30 e0       	ldi	r19, 0x00	; 0
    9842:	40 e0       	ldi	r20, 0x00	; 0
    9844:	50 e0       	ldi	r21, 0x00	; 0
    9846:	0e 94 d1 e2 	call	0x1c5a2	; 0x1c5a2 <__udivmodsi4>
    984a:	da 01       	movw	r26, r20
    984c:	c9 01       	movw	r24, r18
    984e:	01 97       	sbiw	r24, 0x01	; 1
    9850:	a1 09       	sbc	r26, r1
    9852:	b1 09       	sbc	r27, r1
    9854:	85 3f       	cpi	r24, 0xF5	; 245
    9856:	9f 4f       	sbci	r25, 0xFF	; 255
    9858:	af 4f       	sbci	r26, 0xFF	; 255
    985a:	bf 40       	sbci	r27, 0x0F	; 15
    985c:	08 f0       	brcs	.+2      	; 0x9860 <mount_volume+0x262>
    985e:	53 cf       	rjmp	.-346    	; 0x9706 <mount_volume+0x108>
    9860:	26 3f       	cpi	r18, 0xF6	; 246
    9862:	8f ef       	ldi	r24, 0xFF	; 255
    9864:	38 07       	cpc	r19, r24
    9866:	41 05       	cpc	r20, r1
    9868:	51 05       	cpc	r21, r1
    986a:	50 f4       	brcc	.+20     	; 0x9880 <mount_volume+0x282>
    986c:	26 3f       	cpi	r18, 0xF6	; 246
    986e:	9f e0       	ldi	r25, 0x0F	; 15
    9870:	39 07       	cpc	r19, r25
    9872:	41 05       	cpc	r20, r1
    9874:	51 05       	cpc	r21, r1
    9876:	40 f4       	brcc	.+16     	; 0x9888 <mount_volume+0x28a>
    9878:	aa 24       	eor	r10, r10
    987a:	a3 94       	inc	r10
    987c:	b1 2c       	mov	r11, r1
    987e:	07 c0       	rjmp	.+14     	; 0x988e <mount_volume+0x290>
    9880:	73 e0       	ldi	r23, 0x03	; 3
    9882:	a7 2e       	mov	r10, r23
    9884:	b1 2c       	mov	r11, r1
    9886:	03 c0       	rjmp	.+6      	; 0x988e <mount_volume+0x290>
    9888:	62 e0       	ldi	r22, 0x02	; 2
    988a:	a6 2e       	mov	r10, r22
    988c:	b1 2c       	mov	r11, r1
    988e:	69 01       	movw	r12, r18
    9890:	7a 01       	movw	r14, r20
    9892:	a2 e0       	ldi	r26, 0x02	; 2
    9894:	ca 0e       	add	r12, r26
    9896:	d1 1c       	adc	r13, r1
    9898:	e1 1c       	adc	r14, r1
    989a:	f1 1c       	adc	r15, r1
    989c:	f8 01       	movw	r30, r16
    989e:	c1 8e       	std	Z+25, r12	; 0x19
    98a0:	d2 8e       	std	Z+26, r13	; 0x1a
    98a2:	e3 8e       	std	Z+27, r14	; 0x1b
    98a4:	f4 8e       	std	Z+28, r15	; 0x1c
    98a6:	29 89       	ldd	r18, Y+17	; 0x11
    98a8:	3a 89       	ldd	r19, Y+18	; 0x12
    98aa:	4b 89       	ldd	r20, Y+19	; 0x13
    98ac:	5c 89       	ldd	r21, Y+20	; 0x14
    98ae:	21 a3       	std	Z+33, r18	; 0x21
    98b0:	32 a3       	std	Z+34, r19	; 0x22
    98b2:	43 a3       	std	Z+35, r20	; 0x23
    98b4:	54 a3       	std	Z+36, r21	; 0x24
    98b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    98b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    98ba:	af 8d       	ldd	r26, Y+31	; 0x1f
    98bc:	b8 a1       	ldd	r27, Y+32	; 0x20
    98be:	28 0f       	add	r18, r24
    98c0:	39 1f       	adc	r19, r25
    98c2:	4a 1f       	adc	r20, r26
    98c4:	5b 1f       	adc	r21, r27
    98c6:	2d 8f       	std	Y+29, r18	; 0x1d
    98c8:	3e 8f       	std	Y+30, r19	; 0x1e
    98ca:	4f 8f       	std	Y+31, r20	; 0x1f
    98cc:	58 a3       	std	Y+32, r21	; 0x20
    98ce:	25 a3       	std	Z+37, r18	; 0x25
    98d0:	36 a3       	std	Z+38, r19	; 0x26
    98d2:	47 a3       	std	Z+39, r20	; 0x27
    98d4:	50 a7       	std	Z+40, r21	; 0x28
    98d6:	49 89       	ldd	r20, Y+17	; 0x11
    98d8:	5a 89       	ldd	r21, Y+18	; 0x12
    98da:	6b 89       	ldd	r22, Y+19	; 0x13
    98dc:	7c 89       	ldd	r23, Y+20	; 0x14
    98de:	8d 89       	ldd	r24, Y+21	; 0x15
    98e0:	9e 89       	ldd	r25, Y+22	; 0x16
    98e2:	af 89       	ldd	r26, Y+23	; 0x17
    98e4:	b8 8d       	ldd	r27, Y+24	; 0x18
    98e6:	48 0f       	add	r20, r24
    98e8:	59 1f       	adc	r21, r25
    98ea:	6a 1f       	adc	r22, r26
    98ec:	7b 1f       	adc	r23, r27
    98ee:	45 a7       	std	Z+45, r20	; 0x2d
    98f0:	56 a7       	std	Z+46, r21	; 0x2e
    98f2:	67 a7       	std	Z+47, r22	; 0x2f
    98f4:	70 ab       	std	Z+48, r23	; 0x30
    98f6:	f3 e0       	ldi	r31, 0x03	; 3
    98f8:	af 16       	cp	r10, r31
    98fa:	b1 04       	cpc	r11, r1
    98fc:	e9 f4       	brne	.+58     	; 0x9938 <mount_volume+0x33a>
    98fe:	f8 01       	movw	r30, r16
    9900:	e1 5a       	subi	r30, 0xA1	; 161
    9902:	ff 4f       	sbci	r31, 0xFF	; 255
    9904:	80 81       	ld	r24, Z
    9906:	91 81       	ldd	r25, Z+1	; 0x01
    9908:	89 2b       	or	r24, r25
    990a:	09 f0       	breq	.+2      	; 0x990e <mount_volume+0x310>
    990c:	fc ce       	rjmp	.-520    	; 0x9706 <mount_volume+0x108>
    990e:	81 14       	cp	r8, r1
    9910:	91 04       	cpc	r9, r1
    9912:	09 f0       	breq	.+2      	; 0x9916 <mount_volume+0x318>
    9914:	f8 ce       	rjmp	.-528    	; 0x9706 <mount_volume+0x108>
    9916:	c8 01       	movw	r24, r16
    9918:	8f 59       	subi	r24, 0x9F	; 159
    991a:	9f 4f       	sbci	r25, 0xFF	; 255
    991c:	1a d9       	rcall	.-3532   	; 0x8b52 <ld_dword>
    991e:	f8 01       	movw	r30, r16
    9920:	61 a7       	std	Z+41, r22	; 0x29
    9922:	72 a7       	std	Z+42, r23	; 0x2a
    9924:	83 a7       	std	Z+43, r24	; 0x2b
    9926:	94 a7       	std	Z+44, r25	; 0x2c
    9928:	42 e0       	ldi	r20, 0x02	; 2
    992a:	cc 0c       	add	r12, r12
    992c:	dd 1c       	adc	r13, r13
    992e:	ee 1c       	adc	r14, r14
    9930:	ff 1c       	adc	r15, r15
    9932:	4a 95       	dec	r20
    9934:	d1 f7       	brne	.-12     	; 0x992a <mount_volume+0x32c>
    9936:	33 c0       	rjmp	.+102    	; 0x999e <mount_volume+0x3a0>
    9938:	81 14       	cp	r8, r1
    993a:	91 04       	cpc	r9, r1
    993c:	09 f4       	brne	.+2      	; 0x9940 <mount_volume+0x342>
    993e:	e3 ce       	rjmp	.-570    	; 0x9706 <mount_volume+0x108>
    9940:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9942:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9944:	af 8d       	ldd	r26, Y+31	; 0x1f
    9946:	b8 a1       	ldd	r27, Y+32	; 0x20
    9948:	29 8d       	ldd	r18, Y+25	; 0x19
    994a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    994c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    994e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9950:	82 0f       	add	r24, r18
    9952:	93 1f       	adc	r25, r19
    9954:	a4 1f       	adc	r26, r20
    9956:	b5 1f       	adc	r27, r21
    9958:	f8 01       	movw	r30, r16
    995a:	81 a7       	std	Z+41, r24	; 0x29
    995c:	92 a7       	std	Z+42, r25	; 0x2a
    995e:	a3 a7       	std	Z+43, r26	; 0x2b
    9960:	b4 a7       	std	Z+44, r27	; 0x2c
    9962:	f2 e0       	ldi	r31, 0x02	; 2
    9964:	af 16       	cp	r10, r31
    9966:	b1 04       	cpc	r11, r1
    9968:	29 f4       	brne	.+10     	; 0x9974 <mount_volume+0x376>
    996a:	cc 0c       	add	r12, r12
    996c:	dd 1c       	adc	r13, r13
    996e:	ee 1c       	adc	r14, r14
    9970:	ff 1c       	adc	r15, r15
    9972:	15 c0       	rjmp	.+42     	; 0x999e <mount_volume+0x3a0>
    9974:	a3 e0       	ldi	r26, 0x03	; 3
    9976:	b0 e0       	ldi	r27, 0x00	; 0
    9978:	a7 01       	movw	r20, r14
    997a:	96 01       	movw	r18, r12
    997c:	0e 94 1e e3 	call	0x1c63c	; 0x1c63c <__muluhisi3>
    9980:	dc 01       	movw	r26, r24
    9982:	cb 01       	movw	r24, r22
    9984:	b6 95       	lsr	r27
    9986:	a7 95       	ror	r26
    9988:	97 95       	ror	r25
    998a:	87 95       	ror	r24
    998c:	21 e0       	ldi	r18, 0x01	; 1
    998e:	c2 22       	and	r12, r18
    9990:	dd 24       	eor	r13, r13
    9992:	ee 24       	eor	r14, r14
    9994:	ff 24       	eor	r15, r15
    9996:	c8 0e       	add	r12, r24
    9998:	d9 1e       	adc	r13, r25
    999a:	ea 1e       	adc	r14, r26
    999c:	fb 1e       	adc	r15, r27
    999e:	3f ef       	ldi	r19, 0xFF	; 255
    99a0:	c3 0e       	add	r12, r19
    99a2:	31 e0       	ldi	r19, 0x01	; 1
    99a4:	d3 1e       	adc	r13, r19
    99a6:	e1 1c       	adc	r14, r1
    99a8:	f1 1c       	adc	r15, r1
    99aa:	89 e0       	ldi	r24, 0x09	; 9
    99ac:	f6 94       	lsr	r15
    99ae:	e7 94       	ror	r14
    99b0:	d7 94       	ror	r13
    99b2:	c7 94       	ror	r12
    99b4:	8a 95       	dec	r24
    99b6:	d1 f7       	brne	.-12     	; 0x99ac <mount_volume+0x3ae>
    99b8:	4c 14       	cp	r4, r12
    99ba:	5d 04       	cpc	r5, r13
    99bc:	6e 04       	cpc	r6, r14
    99be:	7f 04       	cpc	r7, r15
    99c0:	08 f4       	brcc	.+2      	; 0x99c4 <mount_volume+0x3c6>
    99c2:	a1 ce       	rjmp	.-702    	; 0x9706 <mount_volume+0x108>
    99c4:	8f ef       	ldi	r24, 0xFF	; 255
    99c6:	9f ef       	ldi	r25, 0xFF	; 255
    99c8:	dc 01       	movw	r26, r24
    99ca:	f8 01       	movw	r30, r16
    99cc:	81 8b       	std	Z+17, r24	; 0x11
    99ce:	92 8b       	std	Z+18, r25	; 0x12
    99d0:	a3 8b       	std	Z+19, r26	; 0x13
    99d2:	b4 8b       	std	Z+20, r27	; 0x14
    99d4:	85 87       	std	Z+13, r24	; 0x0d
    99d6:	96 87       	std	Z+14, r25	; 0x0e
    99d8:	a7 87       	std	Z+15, r26	; 0x0f
    99da:	b0 8b       	std	Z+16, r27	; 0x10
    99dc:	80 e8       	ldi	r24, 0x80	; 128
    99de:	84 83       	std	Z+4, r24	; 0x04
    99e0:	f3 e0       	ldi	r31, 0x03	; 3
    99e2:	af 16       	cp	r10, r31
    99e4:	b1 04       	cpc	r11, r1
    99e6:	09 f0       	breq	.+2      	; 0x99ea <mount_volume+0x3ec>
    99e8:	3f c0       	rjmp	.+126    	; 0x9a68 <mount_volume+0x46a>
    99ea:	f8 01       	movw	r30, r16
    99ec:	eb 59       	subi	r30, 0x9B	; 155
    99ee:	ff 4f       	sbci	r31, 0xFF	; 255
    99f0:	80 81       	ld	r24, Z
    99f2:	91 81       	ldd	r25, Z+1	; 0x01
    99f4:	01 97       	sbiw	r24, 0x01	; 1
    99f6:	c1 f5       	brne	.+112    	; 0x9a68 <mount_volume+0x46a>
    99f8:	49 89       	ldd	r20, Y+17	; 0x11
    99fa:	5a 89       	ldd	r21, Y+18	; 0x12
    99fc:	6b 89       	ldd	r22, Y+19	; 0x13
    99fe:	7c 89       	ldd	r23, Y+20	; 0x14
    9a00:	4f 5f       	subi	r20, 0xFF	; 255
    9a02:	5f 4f       	sbci	r21, 0xFF	; 255
    9a04:	6f 4f       	sbci	r22, 0xFF	; 255
    9a06:	7f 4f       	sbci	r23, 0xFF	; 255
    9a08:	c8 01       	movw	r24, r16
    9a0a:	7e dd       	rcall	.-1284   	; 0x9508 <move_window>
    9a0c:	89 2b       	or	r24, r25
    9a0e:	61 f5       	brne	.+88     	; 0x9a68 <mount_volume+0x46a>
    9a10:	f8 01       	movw	r30, r16
    9a12:	14 82       	std	Z+4, r1	; 0x04
    9a14:	ed 5c       	subi	r30, 0xCD	; 205
    9a16:	fd 4f       	sbci	r31, 0xFD	; 253
    9a18:	80 81       	ld	r24, Z
    9a1a:	91 81       	ldd	r25, Z+1	; 0x01
    9a1c:	85 35       	cpi	r24, 0x55	; 85
    9a1e:	9a 4a       	sbci	r25, 0xAA	; 170
    9a20:	19 f5       	brne	.+70     	; 0x9a68 <mount_volume+0x46a>
    9a22:	c8 01       	movw	r24, r16
    9a24:	c5 96       	adiw	r24, 0x35	; 53
    9a26:	95 d8       	rcall	.-3798   	; 0x8b52 <ld_dword>
    9a28:	62 35       	cpi	r22, 0x52	; 82
    9a2a:	72 45       	sbci	r23, 0x52	; 82
    9a2c:	81 46       	sbci	r24, 0x61	; 97
    9a2e:	91 44       	sbci	r25, 0x41	; 65
    9a30:	d9 f4       	brne	.+54     	; 0x9a68 <mount_volume+0x46a>
    9a32:	c8 01       	movw	r24, r16
    9a34:	87 5e       	subi	r24, 0xE7	; 231
    9a36:	9d 4f       	sbci	r25, 0xFD	; 253
    9a38:	8c d8       	rcall	.-3816   	; 0x8b52 <ld_dword>
    9a3a:	62 37       	cpi	r22, 0x72	; 114
    9a3c:	72 47       	sbci	r23, 0x72	; 114
    9a3e:	81 44       	sbci	r24, 0x41	; 65
    9a40:	91 46       	sbci	r25, 0x61	; 97
    9a42:	91 f4       	brne	.+36     	; 0x9a68 <mount_volume+0x46a>
    9a44:	c8 01       	movw	r24, r16
    9a46:	83 5e       	subi	r24, 0xE3	; 227
    9a48:	9d 4f       	sbci	r25, 0xFD	; 253
    9a4a:	83 d8       	rcall	.-3834   	; 0x8b52 <ld_dword>
    9a4c:	f8 01       	movw	r30, r16
    9a4e:	61 8b       	std	Z+17, r22	; 0x11
    9a50:	72 8b       	std	Z+18, r23	; 0x12
    9a52:	83 8b       	std	Z+19, r24	; 0x13
    9a54:	94 8b       	std	Z+20, r25	; 0x14
    9a56:	c8 01       	movw	r24, r16
    9a58:	8f 5d       	subi	r24, 0xDF	; 223
    9a5a:	9d 4f       	sbci	r25, 0xFD	; 253
    9a5c:	7a d8       	rcall	.-3852   	; 0x8b52 <ld_dword>
    9a5e:	f8 01       	movw	r30, r16
    9a60:	65 87       	std	Z+13, r22	; 0x0d
    9a62:	76 87       	std	Z+14, r23	; 0x0e
    9a64:	87 87       	std	Z+15, r24	; 0x0f
    9a66:	90 8b       	std	Z+16, r25	; 0x10
    9a68:	d8 01       	movw	r26, r16
    9a6a:	ac 92       	st	X, r10
    9a6c:	80 91 1d 18 	lds	r24, 0x181D	; 0x80181d <Fsid>
    9a70:	90 91 1e 18 	lds	r25, 0x181E	; 0x80181e <Fsid+0x1>
    9a74:	01 96       	adiw	r24, 0x01	; 1
    9a76:	90 93 1e 18 	sts	0x181E, r25	; 0x80181e <Fsid+0x1>
    9a7a:	80 93 1d 18 	sts	0x181D, r24	; 0x80181d <Fsid>
    9a7e:	f8 01       	movw	r30, r16
    9a80:	96 83       	std	Z+6, r25	; 0x06
    9a82:	85 83       	std	Z+5, r24	; 0x05
    9a84:	15 8a       	std	Z+21, r1	; 0x15
    9a86:	16 8a       	std	Z+22, r1	; 0x16
    9a88:	17 8a       	std	Z+23, r1	; 0x17
    9a8a:	10 8e       	std	Z+24, r1	; 0x18
    9a8c:	06 c0       	rjmp	.+12     	; 0x9a9a <mount_volume+0x49c>
    9a8e:	8b e0       	ldi	r24, 0x0B	; 11
    9a90:	90 e0       	ldi	r25, 0x00	; 0
    9a92:	0b c0       	rjmp	.+22     	; 0x9aaa <mount_volume+0x4ac>
    9a94:	8c e0       	ldi	r24, 0x0C	; 12
    9a96:	90 e0       	ldi	r25, 0x00	; 0
    9a98:	08 c0       	rjmp	.+16     	; 0x9aaa <mount_volume+0x4ac>
    9a9a:	80 e0       	ldi	r24, 0x00	; 0
    9a9c:	90 e0       	ldi	r25, 0x00	; 0
    9a9e:	05 c0       	rjmp	.+10     	; 0x9aaa <mount_volume+0x4ac>
    9aa0:	83 e0       	ldi	r24, 0x03	; 3
    9aa2:	90 e0       	ldi	r25, 0x00	; 0
    9aa4:	02 c0       	rjmp	.+4      	; 0x9aaa <mount_volume+0x4ac>
    9aa6:	81 e0       	ldi	r24, 0x01	; 1
    9aa8:	90 e0       	ldi	r25, 0x00	; 0
    9aaa:	a0 96       	adiw	r28, 0x20	; 32
    9aac:	e0 e1       	ldi	r30, 0x10	; 16
    9aae:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__epilogue_restores__+0x4>

00009ab2 <put_fat>:
    9ab2:	a6 e0       	ldi	r26, 0x06	; 6
    9ab4:	b0 e0       	ldi	r27, 0x00	; 0
    9ab6:	ef e5       	ldi	r30, 0x5F	; 95
    9ab8:	fd e4       	ldi	r31, 0x4D	; 77
    9aba:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
    9abe:	42 30       	cpi	r20, 0x02	; 2
    9ac0:	51 05       	cpc	r21, r1
    9ac2:	61 05       	cpc	r22, r1
    9ac4:	71 05       	cpc	r23, r1
    9ac6:	08 f4       	brcc	.+2      	; 0x9aca <put_fat+0x18>
    9ac8:	e7 c0       	rjmp	.+462    	; 0x9c98 <put_fat+0x1e6>
    9aca:	fc 01       	movw	r30, r24
    9acc:	c1 8c       	ldd	r12, Z+25	; 0x19
    9ace:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9ad0:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9ad2:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9ad4:	4c 15       	cp	r20, r12
    9ad6:	5d 05       	cpc	r21, r13
    9ad8:	6e 05       	cpc	r22, r14
    9ada:	7f 05       	cpc	r23, r15
    9adc:	08 f0       	brcs	.+2      	; 0x9ae0 <put_fat+0x2e>
    9ade:	dc c0       	rjmp	.+440    	; 0x9c98 <put_fat+0x1e6>
    9ae0:	28 01       	movw	r4, r16
    9ae2:	39 01       	movw	r6, r18
    9ae4:	6a 01       	movw	r12, r20
    9ae6:	7b 01       	movw	r14, r22
    9ae8:	9e 83       	std	Y+6, r25	; 0x06
    9aea:	8d 83       	std	Y+5, r24	; 0x05
    9aec:	80 81       	ld	r24, Z
    9aee:	82 30       	cpi	r24, 0x02	; 2
    9af0:	09 f4       	brne	.+2      	; 0x9af4 <put_fat+0x42>
    9af2:	73 c0       	rjmp	.+230    	; 0x9bda <put_fat+0x128>
    9af4:	83 30       	cpi	r24, 0x03	; 3
    9af6:	09 f4       	brne	.+2      	; 0x9afa <put_fat+0x48>
    9af8:	92 c0       	rjmp	.+292    	; 0x9c1e <put_fat+0x16c>
    9afa:	81 30       	cpi	r24, 0x01	; 1
    9afc:	09 f0       	breq	.+2      	; 0x9b00 <put_fat+0x4e>
    9afe:	cc c0       	rjmp	.+408    	; 0x9c98 <put_fat+0x1e6>
    9b00:	4a 01       	movw	r8, r20
    9b02:	96 94       	lsr	r9
    9b04:	87 94       	ror	r8
    9b06:	84 0e       	add	r8, r20
    9b08:	95 1e       	adc	r9, r21
    9b0a:	c4 01       	movw	r24, r8
    9b0c:	89 2f       	mov	r24, r25
    9b0e:	99 27       	eor	r25, r25
    9b10:	86 95       	lsr	r24
    9b12:	45 a1       	ldd	r20, Z+37	; 0x25
    9b14:	56 a1       	ldd	r21, Z+38	; 0x26
    9b16:	67 a1       	ldd	r22, Z+39	; 0x27
    9b18:	70 a5       	ldd	r23, Z+40	; 0x28
    9b1a:	48 0f       	add	r20, r24
    9b1c:	59 1f       	adc	r21, r25
    9b1e:	61 1d       	adc	r22, r1
    9b20:	71 1d       	adc	r23, r1
    9b22:	cf 01       	movw	r24, r30
    9b24:	f1 dc       	rcall	.-1566   	; 0x9508 <move_window>
    9b26:	5c 01       	movw	r10, r24
    9b28:	89 2b       	or	r24, r25
    9b2a:	09 f0       	breq	.+2      	; 0x9b2e <put_fat+0x7c>
    9b2c:	b8 c0       	rjmp	.+368    	; 0x9c9e <put_fat+0x1ec>
    9b2e:	2d 80       	ldd	r2, Y+5	; 0x05
    9b30:	3e 80       	ldd	r3, Y+6	; 0x06
    9b32:	f5 e3       	ldi	r31, 0x35	; 53
    9b34:	2f 0e       	add	r2, r31
    9b36:	31 1c       	adc	r3, r1
    9b38:	84 01       	movw	r16, r8
    9b3a:	0f 5f       	subi	r16, 0xFF	; 255
    9b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    9b3e:	21 e0       	ldi	r18, 0x01	; 1
    9b40:	92 22       	and	r9, r18
    9b42:	f1 01       	movw	r30, r2
    9b44:	e8 0d       	add	r30, r8
    9b46:	f9 1d       	adc	r31, r9
    9b48:	d7 01       	movw	r26, r14
    9b4a:	c6 01       	movw	r24, r12
    9b4c:	81 70       	andi	r24, 0x01	; 1
    9b4e:	99 27       	eor	r25, r25
    9b50:	aa 27       	eor	r26, r26
    9b52:	bb 27       	eor	r27, r27
    9b54:	89 83       	std	Y+1, r24	; 0x01
    9b56:	9a 83       	std	Y+2, r25	; 0x02
    9b58:	ab 83       	std	Y+3, r26	; 0x03
    9b5a:	bc 83       	std	Y+4, r27	; 0x04
    9b5c:	c0 fe       	sbrs	r12, 0
    9b5e:	09 c0       	rjmp	.+18     	; 0x9b72 <put_fat+0xc0>
    9b60:	80 81       	ld	r24, Z
    9b62:	28 2f       	mov	r18, r24
    9b64:	2f 70       	andi	r18, 0x0F	; 15
    9b66:	a0 e1       	ldi	r26, 0x10	; 16
    9b68:	4a 9e       	mul	r4, r26
    9b6a:	c0 01       	movw	r24, r0
    9b6c:	11 24       	eor	r1, r1
    9b6e:	82 2b       	or	r24, r18
    9b70:	01 c0       	rjmp	.+2      	; 0x9b74 <put_fat+0xc2>
    9b72:	84 2d       	mov	r24, r4
    9b74:	80 83       	st	Z, r24
    9b76:	81 e0       	ldi	r24, 0x01	; 1
    9b78:	ed 81       	ldd	r30, Y+5	; 0x05
    9b7a:	fe 81       	ldd	r31, Y+6	; 0x06
    9b7c:	83 83       	std	Z+3, r24	; 0x03
    9b7e:	45 a1       	ldd	r20, Z+37	; 0x25
    9b80:	56 a1       	ldd	r21, Z+38	; 0x26
    9b82:	67 a1       	ldd	r22, Z+39	; 0x27
    9b84:	70 a5       	ldd	r23, Z+40	; 0x28
    9b86:	c8 01       	movw	r24, r16
    9b88:	89 2f       	mov	r24, r25
    9b8a:	99 27       	eor	r25, r25
    9b8c:	86 95       	lsr	r24
    9b8e:	48 0f       	add	r20, r24
    9b90:	59 1f       	adc	r21, r25
    9b92:	61 1d       	adc	r22, r1
    9b94:	71 1d       	adc	r23, r1
    9b96:	cf 01       	movw	r24, r30
    9b98:	b7 dc       	rcall	.-1682   	; 0x9508 <move_window>
    9b9a:	5c 01       	movw	r10, r24
    9b9c:	89 2b       	or	r24, r25
    9b9e:	09 f0       	breq	.+2      	; 0x9ba2 <put_fat+0xf0>
    9ba0:	7e c0       	rjmp	.+252    	; 0x9c9e <put_fat+0x1ec>
    9ba2:	11 70       	andi	r17, 0x01	; 1
    9ba4:	f1 01       	movw	r30, r2
    9ba6:	e0 0f       	add	r30, r16
    9ba8:	f1 1f       	adc	r31, r17
    9baa:	89 81       	ldd	r24, Y+1	; 0x01
    9bac:	9a 81       	ldd	r25, Y+2	; 0x02
    9bae:	ab 81       	ldd	r26, Y+3	; 0x03
    9bb0:	bc 81       	ldd	r27, Y+4	; 0x04
    9bb2:	89 2b       	or	r24, r25
    9bb4:	8a 2b       	or	r24, r26
    9bb6:	8b 2b       	or	r24, r27
    9bb8:	41 f0       	breq	.+16     	; 0x9bca <put_fat+0x118>
    9bba:	54 e0       	ldi	r21, 0x04	; 4
    9bbc:	76 94       	lsr	r7
    9bbe:	67 94       	ror	r6
    9bc0:	57 94       	ror	r5
    9bc2:	47 94       	ror	r4
    9bc4:	5a 95       	dec	r21
    9bc6:	d1 f7       	brne	.-12     	; 0x9bbc <put_fat+0x10a>
    9bc8:	06 c0       	rjmp	.+12     	; 0x9bd6 <put_fat+0x124>
    9bca:	00 81       	ld	r16, Z
    9bcc:	00 7f       	andi	r16, 0xF0	; 240
    9bce:	85 2d       	mov	r24, r5
    9bd0:	8f 70       	andi	r24, 0x0F	; 15
    9bd2:	40 2e       	mov	r4, r16
    9bd4:	48 2a       	or	r4, r24
    9bd6:	40 82       	st	Z, r4
    9bd8:	5a c0       	rjmp	.+180    	; 0x9c8e <put_fat+0x1dc>
    9bda:	77 27       	eor	r23, r23
    9bdc:	6f 2d       	mov	r22, r15
    9bde:	5e 2d       	mov	r21, r14
    9be0:	4d 2d       	mov	r20, r13
    9be2:	ed 81       	ldd	r30, Y+5	; 0x05
    9be4:	fe 81       	ldd	r31, Y+6	; 0x06
    9be6:	85 a1       	ldd	r24, Z+37	; 0x25
    9be8:	96 a1       	ldd	r25, Z+38	; 0x26
    9bea:	a7 a1       	ldd	r26, Z+39	; 0x27
    9bec:	b0 a5       	ldd	r27, Z+40	; 0x28
    9bee:	48 0f       	add	r20, r24
    9bf0:	59 1f       	adc	r21, r25
    9bf2:	6a 1f       	adc	r22, r26
    9bf4:	7b 1f       	adc	r23, r27
    9bf6:	cf 01       	movw	r24, r30
    9bf8:	87 dc       	rcall	.-1778   	; 0x9508 <move_window>
    9bfa:	5c 01       	movw	r10, r24
    9bfc:	89 2b       	or	r24, r25
    9bfe:	09 f0       	breq	.+2      	; 0x9c02 <put_fat+0x150>
    9c00:	4e c0       	rjmp	.+156    	; 0x9c9e <put_fat+0x1ec>
    9c02:	ed 81       	ldd	r30, Y+5	; 0x05
    9c04:	fe 81       	ldd	r31, Y+6	; 0x06
    9c06:	f5 96       	adiw	r30, 0x35	; 53
    9c08:	cc 0c       	add	r12, r12
    9c0a:	dd 1c       	adc	r13, r13
    9c0c:	e8 94       	clt
    9c0e:	c0 f8       	bld	r12, 0
    9c10:	21 e0       	ldi	r18, 0x01	; 1
    9c12:	d2 22       	and	r13, r18
    9c14:	ec 0d       	add	r30, r12
    9c16:	fd 1d       	adc	r31, r13
    9c18:	40 82       	st	Z, r4
    9c1a:	51 82       	std	Z+1, r5	; 0x01
    9c1c:	38 c0       	rjmp	.+112    	; 0x9c8e <put_fat+0x1dc>
    9c1e:	ed 81       	ldd	r30, Y+5	; 0x05
    9c20:	fe 81       	ldd	r31, Y+6	; 0x06
    9c22:	85 a1       	ldd	r24, Z+37	; 0x25
    9c24:	96 a1       	ldd	r25, Z+38	; 0x26
    9c26:	a7 a1       	ldd	r26, Z+39	; 0x27
    9c28:	b0 a5       	ldd	r27, Z+40	; 0x28
    9c2a:	27 e0       	ldi	r18, 0x07	; 7
    9c2c:	76 95       	lsr	r23
    9c2e:	67 95       	ror	r22
    9c30:	57 95       	ror	r21
    9c32:	47 95       	ror	r20
    9c34:	2a 95       	dec	r18
    9c36:	d1 f7       	brne	.-12     	; 0x9c2c <put_fat+0x17a>
    9c38:	48 0f       	add	r20, r24
    9c3a:	59 1f       	adc	r21, r25
    9c3c:	6a 1f       	adc	r22, r26
    9c3e:	7b 1f       	adc	r23, r27
    9c40:	cf 01       	movw	r24, r30
    9c42:	62 dc       	rcall	.-1852   	; 0x9508 <move_window>
    9c44:	5c 01       	movw	r10, r24
    9c46:	89 2b       	or	r24, r25
    9c48:	51 f5       	brne	.+84     	; 0x9c9e <put_fat+0x1ec>
    9c4a:	4d 81       	ldd	r20, Y+5	; 0x05
    9c4c:	5e 81       	ldd	r21, Y+6	; 0x06
    9c4e:	4b 5c       	subi	r20, 0xCB	; 203
    9c50:	5f 4f       	sbci	r21, 0xFF	; 255
    9c52:	cc 0c       	add	r12, r12
    9c54:	dd 1c       	adc	r13, r13
    9c56:	cc 0c       	add	r12, r12
    9c58:	dd 1c       	adc	r13, r13
    9c5a:	fc ef       	ldi	r31, 0xFC	; 252
    9c5c:	cf 22       	and	r12, r31
    9c5e:	f1 e0       	ldi	r31, 0x01	; 1
    9c60:	df 22       	and	r13, r31
    9c62:	c4 0e       	add	r12, r20
    9c64:	d5 1e       	adc	r13, r21
    9c66:	c6 01       	movw	r24, r12
    9c68:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <ld_dword>
    9c6c:	2f e0       	ldi	r18, 0x0F	; 15
    9c6e:	72 22       	and	r7, r18
    9c70:	dc 01       	movw	r26, r24
    9c72:	cb 01       	movw	r24, r22
    9c74:	88 27       	eor	r24, r24
    9c76:	99 27       	eor	r25, r25
    9c78:	aa 27       	eor	r26, r26
    9c7a:	b0 7f       	andi	r27, 0xF0	; 240
    9c7c:	b3 01       	movw	r22, r6
    9c7e:	a2 01       	movw	r20, r4
    9c80:	48 2b       	or	r20, r24
    9c82:	59 2b       	or	r21, r25
    9c84:	6a 2b       	or	r22, r26
    9c86:	7b 2b       	or	r23, r27
    9c88:	c6 01       	movw	r24, r12
    9c8a:	0e 94 be 45 	call	0x8b7c	; 0x8b7c <st_dword>
    9c8e:	81 e0       	ldi	r24, 0x01	; 1
    9c90:	ed 81       	ldd	r30, Y+5	; 0x05
    9c92:	fe 81       	ldd	r31, Y+6	; 0x06
    9c94:	83 83       	std	Z+3, r24	; 0x03
    9c96:	03 c0       	rjmp	.+6      	; 0x9c9e <put_fat+0x1ec>
    9c98:	82 e0       	ldi	r24, 0x02	; 2
    9c9a:	a8 2e       	mov	r10, r24
    9c9c:	b1 2c       	mov	r11, r1
    9c9e:	c5 01       	movw	r24, r10
    9ca0:	26 96       	adiw	r28, 0x06	; 6
    9ca2:	e2 e1       	ldi	r30, 0x12	; 18
    9ca4:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

00009ca8 <get_fat.isra.10>:
    9ca8:	a0 e0       	ldi	r26, 0x00	; 0
    9caa:	b0 e0       	ldi	r27, 0x00	; 0
    9cac:	ea e5       	ldi	r30, 0x5A	; 90
    9cae:	fe e4       	ldi	r31, 0x4E	; 78
    9cb0:	0c 94 46 e3 	jmp	0x1c68c	; 0x1c68c <__prologue_saves__+0x10>
    9cb4:	42 30       	cpi	r20, 0x02	; 2
    9cb6:	51 05       	cpc	r21, r1
    9cb8:	61 05       	cpc	r22, r1
    9cba:	71 05       	cpc	r23, r1
    9cbc:	08 f4       	brcc	.+2      	; 0x9cc0 <get_fat.isra.10+0x18>
    9cbe:	9f c0       	rjmp	.+318    	; 0x9dfe <get_fat.isra.10+0x156>
    9cc0:	fc 01       	movw	r30, r24
    9cc2:	01 8d       	ldd	r16, Z+25	; 0x19
    9cc4:	12 8d       	ldd	r17, Z+26	; 0x1a
    9cc6:	23 8d       	ldd	r18, Z+27	; 0x1b
    9cc8:	34 8d       	ldd	r19, Z+28	; 0x1c
    9cca:	40 17       	cp	r20, r16
    9ccc:	51 07       	cpc	r21, r17
    9cce:	62 07       	cpc	r22, r18
    9cd0:	73 07       	cpc	r23, r19
    9cd2:	08 f0       	brcs	.+2      	; 0x9cd6 <get_fat.isra.10+0x2e>
    9cd4:	94 c0       	rjmp	.+296    	; 0x9dfe <get_fat.isra.10+0x156>
    9cd6:	6a 01       	movw	r12, r20
    9cd8:	7b 01       	movw	r14, r22
    9cda:	8c 01       	movw	r16, r24
    9cdc:	80 81       	ld	r24, Z
    9cde:	82 30       	cpi	r24, 0x02	; 2
    9ce0:	09 f4       	brne	.+2      	; 0x9ce4 <get_fat.isra.10+0x3c>
    9ce2:	4b c0       	rjmp	.+150    	; 0x9d7a <get_fat.isra.10+0xd2>
    9ce4:	83 30       	cpi	r24, 0x03	; 3
    9ce6:	09 f4       	brne	.+2      	; 0x9cea <get_fat.isra.10+0x42>
    9ce8:	67 c0       	rjmp	.+206    	; 0x9db8 <get_fat.isra.10+0x110>
    9cea:	81 30       	cpi	r24, 0x01	; 1
    9cec:	09 f0       	breq	.+2      	; 0x9cf0 <get_fat.isra.10+0x48>
    9cee:	87 c0       	rjmp	.+270    	; 0x9dfe <get_fat.isra.10+0x156>
    9cf0:	ea 01       	movw	r28, r20
    9cf2:	d6 95       	lsr	r29
    9cf4:	c7 95       	ror	r28
    9cf6:	cc 0d       	add	r28, r12
    9cf8:	dd 1d       	adc	r29, r13
    9cfa:	ce 01       	movw	r24, r28
    9cfc:	89 2f       	mov	r24, r25
    9cfe:	99 27       	eor	r25, r25
    9d00:	86 95       	lsr	r24
    9d02:	45 a1       	ldd	r20, Z+37	; 0x25
    9d04:	56 a1       	ldd	r21, Z+38	; 0x26
    9d06:	67 a1       	ldd	r22, Z+39	; 0x27
    9d08:	70 a5       	ldd	r23, Z+40	; 0x28
    9d0a:	48 0f       	add	r20, r24
    9d0c:	59 1f       	adc	r21, r25
    9d0e:	61 1d       	adc	r22, r1
    9d10:	71 1d       	adc	r23, r1
    9d12:	cf 01       	movw	r24, r30
    9d14:	f9 db       	rcall	.-2062   	; 0x9508 <move_window>
    9d16:	89 2b       	or	r24, r25
    9d18:	21 f0       	breq	.+8      	; 0x9d22 <get_fat.isra.10+0x7a>
    9d1a:	6f ef       	ldi	r22, 0xFF	; 255
    9d1c:	7f ef       	ldi	r23, 0xFF	; 255
    9d1e:	cb 01       	movw	r24, r22
    9d20:	72 c0       	rjmp	.+228    	; 0x9e06 <get_fat.isra.10+0x15e>
    9d22:	5e 01       	movw	r10, r28
    9d24:	ff ef       	ldi	r31, 0xFF	; 255
    9d26:	af 1a       	sub	r10, r31
    9d28:	bf 0a       	sbc	r11, r31
    9d2a:	d1 70       	andi	r29, 0x01	; 1
    9d2c:	c0 0f       	add	r28, r16
    9d2e:	d1 1f       	adc	r29, r17
    9d30:	cd a9       	ldd	r28, Y+53	; 0x35
    9d32:	c5 01       	movw	r24, r10
    9d34:	89 2f       	mov	r24, r25
    9d36:	99 27       	eor	r25, r25
    9d38:	86 95       	lsr	r24
    9d3a:	f8 01       	movw	r30, r16
    9d3c:	45 a1       	ldd	r20, Z+37	; 0x25
    9d3e:	56 a1       	ldd	r21, Z+38	; 0x26
    9d40:	67 a1       	ldd	r22, Z+39	; 0x27
    9d42:	70 a5       	ldd	r23, Z+40	; 0x28
    9d44:	48 0f       	add	r20, r24
    9d46:	59 1f       	adc	r21, r25
    9d48:	61 1d       	adc	r22, r1
    9d4a:	71 1d       	adc	r23, r1
    9d4c:	c8 01       	movw	r24, r16
    9d4e:	dc db       	rcall	.-2120   	; 0x9508 <move_window>
    9d50:	89 2b       	or	r24, r25
    9d52:	19 f7       	brne	.-58     	; 0x9d1a <get_fat.isra.10+0x72>
    9d54:	f1 e0       	ldi	r31, 0x01	; 1
    9d56:	bf 22       	and	r11, r31
    9d58:	f8 01       	movw	r30, r16
    9d5a:	ea 0d       	add	r30, r10
    9d5c:	fb 1d       	adc	r31, r11
    9d5e:	85 a9       	ldd	r24, Z+53	; 0x35
    9d60:	6c 2f       	mov	r22, r28
    9d62:	70 e0       	ldi	r23, 0x00	; 0
    9d64:	78 2b       	or	r23, r24
    9d66:	c0 fe       	sbrs	r12, 0
    9d68:	06 c0       	rjmp	.+12     	; 0x9d76 <get_fat.isra.10+0xce>
    9d6a:	54 e0       	ldi	r21, 0x04	; 4
    9d6c:	76 95       	lsr	r23
    9d6e:	67 95       	ror	r22
    9d70:	5a 95       	dec	r21
    9d72:	e1 f7       	brne	.-8      	; 0x9d6c <get_fat.isra.10+0xc4>
    9d74:	1e c0       	rjmp	.+60     	; 0x9db2 <get_fat.isra.10+0x10a>
    9d76:	7f 70       	andi	r23, 0x0F	; 15
    9d78:	1c c0       	rjmp	.+56     	; 0x9db2 <get_fat.isra.10+0x10a>
    9d7a:	77 27       	eor	r23, r23
    9d7c:	6f 2d       	mov	r22, r15
    9d7e:	5e 2d       	mov	r21, r14
    9d80:	4d 2d       	mov	r20, r13
    9d82:	85 a1       	ldd	r24, Z+37	; 0x25
    9d84:	96 a1       	ldd	r25, Z+38	; 0x26
    9d86:	a7 a1       	ldd	r26, Z+39	; 0x27
    9d88:	b0 a5       	ldd	r27, Z+40	; 0x28
    9d8a:	48 0f       	add	r20, r24
    9d8c:	59 1f       	adc	r21, r25
    9d8e:	6a 1f       	adc	r22, r26
    9d90:	7b 1f       	adc	r23, r27
    9d92:	cf 01       	movw	r24, r30
    9d94:	b9 db       	rcall	.-2190   	; 0x9508 <move_window>
    9d96:	89 2b       	or	r24, r25
    9d98:	09 f0       	breq	.+2      	; 0x9d9c <get_fat.isra.10+0xf4>
    9d9a:	bf cf       	rjmp	.-130    	; 0x9d1a <get_fat.isra.10+0x72>
    9d9c:	cc 0c       	add	r12, r12
    9d9e:	dd 1c       	adc	r13, r13
    9da0:	e8 94       	clt
    9da2:	c0 f8       	bld	r12, 0
    9da4:	f1 e0       	ldi	r31, 0x01	; 1
    9da6:	df 22       	and	r13, r31
    9da8:	f8 01       	movw	r30, r16
    9daa:	ec 0d       	add	r30, r12
    9dac:	fd 1d       	adc	r31, r13
    9dae:	65 a9       	ldd	r22, Z+53	; 0x35
    9db0:	76 a9       	ldd	r23, Z+54	; 0x36
    9db2:	80 e0       	ldi	r24, 0x00	; 0
    9db4:	90 e0       	ldi	r25, 0x00	; 0
    9db6:	27 c0       	rjmp	.+78     	; 0x9e06 <get_fat.isra.10+0x15e>
    9db8:	85 a1       	ldd	r24, Z+37	; 0x25
    9dba:	96 a1       	ldd	r25, Z+38	; 0x26
    9dbc:	a7 a1       	ldd	r26, Z+39	; 0x27
    9dbe:	b0 a5       	ldd	r27, Z+40	; 0x28
    9dc0:	27 e0       	ldi	r18, 0x07	; 7
    9dc2:	76 95       	lsr	r23
    9dc4:	67 95       	ror	r22
    9dc6:	57 95       	ror	r21
    9dc8:	47 95       	ror	r20
    9dca:	2a 95       	dec	r18
    9dcc:	d1 f7       	brne	.-12     	; 0x9dc2 <get_fat.isra.10+0x11a>
    9dce:	48 0f       	add	r20, r24
    9dd0:	59 1f       	adc	r21, r25
    9dd2:	6a 1f       	adc	r22, r26
    9dd4:	7b 1f       	adc	r23, r27
    9dd6:	cf 01       	movw	r24, r30
    9dd8:	97 db       	rcall	.-2258   	; 0x9508 <move_window>
    9dda:	89 2b       	or	r24, r25
    9ddc:	09 f0       	breq	.+2      	; 0x9de0 <get_fat.isra.10+0x138>
    9dde:	9d cf       	rjmp	.-198    	; 0x9d1a <get_fat.isra.10+0x72>
    9de0:	0b 5c       	subi	r16, 0xCB	; 203
    9de2:	1f 4f       	sbci	r17, 0xFF	; 255
    9de4:	cc 0c       	add	r12, r12
    9de6:	dd 1c       	adc	r13, r13
    9de8:	cc 0c       	add	r12, r12
    9dea:	dd 1c       	adc	r13, r13
    9dec:	c6 01       	movw	r24, r12
    9dee:	8c 7f       	andi	r24, 0xFC	; 252
    9df0:	91 70       	andi	r25, 0x01	; 1
    9df2:	80 0f       	add	r24, r16
    9df4:	91 1f       	adc	r25, r17
    9df6:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <ld_dword>
    9dfa:	9f 70       	andi	r25, 0x0F	; 15
    9dfc:	04 c0       	rjmp	.+8      	; 0x9e06 <get_fat.isra.10+0x15e>
    9dfe:	61 e0       	ldi	r22, 0x01	; 1
    9e00:	70 e0       	ldi	r23, 0x00	; 0
    9e02:	80 e0       	ldi	r24, 0x00	; 0
    9e04:	90 e0       	ldi	r25, 0x00	; 0
    9e06:	cd b7       	in	r28, 0x3d	; 61
    9e08:	de b7       	in	r29, 0x3e	; 62
    9e0a:	ea e0       	ldi	r30, 0x0A	; 10
    9e0c:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__epilogue_restores__+0x10>

00009e10 <dir_sdi>:
    9e10:	a0 e0       	ldi	r26, 0x00	; 0
    9e12:	b0 e0       	ldi	r27, 0x00	; 0
    9e14:	ee e0       	ldi	r30, 0x0E	; 14
    9e16:	ff e4       	ldi	r31, 0x4F	; 79
    9e18:	0c 94 40 e3 	jmp	0x1c680	; 0x1c680 <__prologue_saves__+0x4>
    9e1c:	ec 01       	movw	r28, r24
    9e1e:	6a 01       	movw	r12, r20
    9e20:	7b 01       	movw	r14, r22
    9e22:	41 15       	cp	r20, r1
    9e24:	51 05       	cpc	r21, r1
    9e26:	80 e2       	ldi	r24, 0x20	; 32
    9e28:	68 07       	cpc	r22, r24
    9e2a:	71 05       	cpc	r23, r1
    9e2c:	18 f0       	brcs	.+6      	; 0x9e34 <dir_sdi+0x24>
    9e2e:	82 e0       	ldi	r24, 0x02	; 2
    9e30:	90 e0       	ldi	r25, 0x00	; 0
    9e32:	aa c0       	rjmp	.+340    	; 0x9f88 <dir_sdi+0x178>
    9e34:	db 01       	movw	r26, r22
    9e36:	ca 01       	movw	r24, r20
    9e38:	8f 71       	andi	r24, 0x1F	; 31
    9e3a:	99 27       	eor	r25, r25
    9e3c:	aa 27       	eor	r26, r26
    9e3e:	bb 27       	eor	r27, r27
    9e40:	89 2b       	or	r24, r25
    9e42:	8a 2b       	or	r24, r26
    9e44:	8b 2b       	or	r24, r27
    9e46:	99 f7       	brne	.-26     	; 0x9e2e <dir_sdi+0x1e>
    9e48:	08 81       	ld	r16, Y
    9e4a:	19 81       	ldd	r17, Y+1	; 0x01
    9e4c:	4e 87       	std	Y+14, r20	; 0x0e
    9e4e:	5f 87       	std	Y+15, r21	; 0x0f
    9e50:	68 8b       	std	Y+16, r22	; 0x10
    9e52:	79 8b       	std	Y+17, r23	; 0x11
    9e54:	8e 80       	ldd	r8, Y+6	; 0x06
    9e56:	9f 80       	ldd	r9, Y+7	; 0x07
    9e58:	a8 84       	ldd	r10, Y+8	; 0x08
    9e5a:	b9 84       	ldd	r11, Y+9	; 0x09
    9e5c:	81 14       	cp	r8, r1
    9e5e:	91 04       	cpc	r9, r1
    9e60:	a1 04       	cpc	r10, r1
    9e62:	b1 04       	cpc	r11, r1
    9e64:	51 f5       	brne	.+84     	; 0x9eba <dir_sdi+0xaa>
    9e66:	f8 01       	movw	r30, r16
    9e68:	80 81       	ld	r24, Z
    9e6a:	83 30       	cpi	r24, 0x03	; 3
    9e6c:	40 f0       	brcs	.+16     	; 0x9e7e <dir_sdi+0x6e>
    9e6e:	81 a5       	ldd	r24, Z+41	; 0x29
    9e70:	92 a5       	ldd	r25, Z+42	; 0x2a
    9e72:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9e74:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9e76:	00 97       	sbiw	r24, 0x00	; 0
    9e78:	a1 05       	cpc	r26, r1
    9e7a:	b1 05       	cpc	r27, r1
    9e7c:	e1 f4       	brne	.+56     	; 0x9eb6 <dir_sdi+0xa6>
    9e7e:	f8 01       	movw	r30, r16
    9e80:	87 81       	ldd	r24, Z+7	; 0x07
    9e82:	90 85       	ldd	r25, Z+8	; 0x08
    9e84:	a0 e0       	ldi	r26, 0x00	; 0
    9e86:	b0 e0       	ldi	r27, 0x00	; 0
    9e88:	b7 01       	movw	r22, r14
    9e8a:	a6 01       	movw	r20, r12
    9e8c:	25 e0       	ldi	r18, 0x05	; 5
    9e8e:	76 95       	lsr	r23
    9e90:	67 95       	ror	r22
    9e92:	57 95       	ror	r21
    9e94:	47 95       	ror	r20
    9e96:	2a 95       	dec	r18
    9e98:	d1 f7       	brne	.-12     	; 0x9e8e <dir_sdi+0x7e>
    9e9a:	48 17       	cp	r20, r24
    9e9c:	59 07       	cpc	r21, r25
    9e9e:	6a 07       	cpc	r22, r26
    9ea0:	7b 07       	cpc	r23, r27
    9ea2:	28 f6       	brcc	.-118    	; 0x9e2e <dir_sdi+0x1e>
    9ea4:	81 a5       	ldd	r24, Z+41	; 0x29
    9ea6:	92 a5       	ldd	r25, Z+42	; 0x2a
    9ea8:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9eaa:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9eac:	8e 8b       	std	Y+22, r24	; 0x16
    9eae:	9f 8b       	std	Y+23, r25	; 0x17
    9eb0:	a8 8f       	std	Y+24, r26	; 0x18
    9eb2:	b9 8f       	std	Y+25, r27	; 0x19
    9eb4:	3e c0       	rjmp	.+124    	; 0x9f32 <dir_sdi+0x122>
    9eb6:	4c 01       	movw	r8, r24
    9eb8:	5d 01       	movw	r10, r26
    9eba:	f8 01       	movw	r30, r16
    9ebc:	41 84       	ldd	r4, Z+9	; 0x09
    9ebe:	52 84       	ldd	r5, Z+10	; 0x0a
    9ec0:	61 2c       	mov	r6, r1
    9ec2:	71 2c       	mov	r7, r1
    9ec4:	39 e0       	ldi	r19, 0x09	; 9
    9ec6:	44 0c       	add	r4, r4
    9ec8:	55 1c       	adc	r5, r5
    9eca:	66 1c       	adc	r6, r6
    9ecc:	77 1c       	adc	r7, r7
    9ece:	3a 95       	dec	r19
    9ed0:	d1 f7       	brne	.-12     	; 0x9ec6 <dir_sdi+0xb6>
    9ed2:	b5 01       	movw	r22, r10
    9ed4:	a4 01       	movw	r20, r8
    9ed6:	c4 14       	cp	r12, r4
    9ed8:	d5 04       	cpc	r13, r5
    9eda:	e6 04       	cpc	r14, r6
    9edc:	f7 04       	cpc	r15, r7
    9ede:	10 f1       	brcs	.+68     	; 0x9f24 <dir_sdi+0x114>
    9ee0:	88 81       	ld	r24, Y
    9ee2:	99 81       	ldd	r25, Y+1	; 0x01
    9ee4:	e1 de       	rcall	.-574    	; 0x9ca8 <get_fat.isra.10>
    9ee6:	4b 01       	movw	r8, r22
    9ee8:	5c 01       	movw	r10, r24
    9eea:	6f 3f       	cpi	r22, 0xFF	; 255
    9eec:	7f 4f       	sbci	r23, 0xFF	; 255
    9eee:	8f 4f       	sbci	r24, 0xFF	; 255
    9ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    9ef2:	09 f4       	brne	.+2      	; 0x9ef6 <dir_sdi+0xe6>
    9ef4:	47 c0       	rjmp	.+142    	; 0x9f84 <dir_sdi+0x174>
    9ef6:	82 e0       	ldi	r24, 0x02	; 2
    9ef8:	88 16       	cp	r8, r24
    9efa:	91 04       	cpc	r9, r1
    9efc:	a1 04       	cpc	r10, r1
    9efe:	b1 04       	cpc	r11, r1
    9f00:	08 f4       	brcc	.+2      	; 0x9f04 <dir_sdi+0xf4>
    9f02:	95 cf       	rjmp	.-214    	; 0x9e2e <dir_sdi+0x1e>
    9f04:	f8 01       	movw	r30, r16
    9f06:	81 8d       	ldd	r24, Z+25	; 0x19
    9f08:	92 8d       	ldd	r25, Z+26	; 0x1a
    9f0a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9f0c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9f0e:	88 16       	cp	r8, r24
    9f10:	99 06       	cpc	r9, r25
    9f12:	aa 06       	cpc	r10, r26
    9f14:	bb 06       	cpc	r11, r27
    9f16:	08 f0       	brcs	.+2      	; 0x9f1a <dir_sdi+0x10a>
    9f18:	8a cf       	rjmp	.-236    	; 0x9e2e <dir_sdi+0x1e>
    9f1a:	c4 18       	sub	r12, r4
    9f1c:	d5 08       	sbc	r13, r5
    9f1e:	e6 08       	sbc	r14, r6
    9f20:	f7 08       	sbc	r15, r7
    9f22:	d7 cf       	rjmp	.-82     	; 0x9ed2 <dir_sdi+0xc2>
    9f24:	c8 01       	movw	r24, r16
    9f26:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <clst2sect>
    9f2a:	6e 8b       	std	Y+22, r22	; 0x16
    9f2c:	7f 8b       	std	Y+23, r23	; 0x17
    9f2e:	88 8f       	std	Y+24, r24	; 0x18
    9f30:	99 8f       	std	Y+25, r25	; 0x19
    9f32:	8a 8a       	std	Y+18, r8	; 0x12
    9f34:	9b 8a       	std	Y+19, r9	; 0x13
    9f36:	ac 8a       	std	Y+20, r10	; 0x14
    9f38:	bd 8a       	std	Y+21, r11	; 0x15
    9f3a:	8e 89       	ldd	r24, Y+22	; 0x16
    9f3c:	9f 89       	ldd	r25, Y+23	; 0x17
    9f3e:	a8 8d       	ldd	r26, Y+24	; 0x18
    9f40:	b9 8d       	ldd	r27, Y+25	; 0x19
    9f42:	00 97       	sbiw	r24, 0x00	; 0
    9f44:	a1 05       	cpc	r26, r1
    9f46:	b1 05       	cpc	r27, r1
    9f48:	09 f4       	brne	.+2      	; 0x9f4c <dir_sdi+0x13c>
    9f4a:	71 cf       	rjmp	.-286    	; 0x9e2e <dir_sdi+0x1e>
    9f4c:	b7 01       	movw	r22, r14
    9f4e:	a6 01       	movw	r20, r12
    9f50:	29 e0       	ldi	r18, 0x09	; 9
    9f52:	76 95       	lsr	r23
    9f54:	67 95       	ror	r22
    9f56:	57 95       	ror	r21
    9f58:	47 95       	ror	r20
    9f5a:	2a 95       	dec	r18
    9f5c:	d1 f7       	brne	.-12     	; 0x9f52 <dir_sdi+0x142>
    9f5e:	84 0f       	add	r24, r20
    9f60:	95 1f       	adc	r25, r21
    9f62:	a6 1f       	adc	r26, r22
    9f64:	b7 1f       	adc	r27, r23
    9f66:	8e 8b       	std	Y+22, r24	; 0x16
    9f68:	9f 8b       	std	Y+23, r25	; 0x17
    9f6a:	a8 8f       	std	Y+24, r26	; 0x18
    9f6c:	b9 8f       	std	Y+25, r27	; 0x19
    9f6e:	0b 5c       	subi	r16, 0xCB	; 203
    9f70:	1f 4f       	sbci	r17, 0xFF	; 255
    9f72:	f1 e0       	ldi	r31, 0x01	; 1
    9f74:	df 22       	and	r13, r31
    9f76:	c0 0e       	add	r12, r16
    9f78:	d1 1e       	adc	r13, r17
    9f7a:	db 8e       	std	Y+27, r13	; 0x1b
    9f7c:	ca 8e       	std	Y+26, r12	; 0x1a
    9f7e:	80 e0       	ldi	r24, 0x00	; 0
    9f80:	90 e0       	ldi	r25, 0x00	; 0
    9f82:	02 c0       	rjmp	.+4      	; 0x9f88 <dir_sdi+0x178>
    9f84:	81 e0       	ldi	r24, 0x01	; 1
    9f86:	90 e0       	ldi	r25, 0x00	; 0
    9f88:	cd b7       	in	r28, 0x3d	; 61
    9f8a:	de b7       	in	r29, 0x3e	; 62
    9f8c:	e0 e1       	ldi	r30, 0x10	; 16
    9f8e:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__epilogue_restores__+0x4>

00009f92 <create_chain>:
    9f92:	a0 e0       	ldi	r26, 0x00	; 0
    9f94:	b0 e0       	ldi	r27, 0x00	; 0
    9f96:	ef ec       	ldi	r30, 0xCF	; 207
    9f98:	ff e4       	ldi	r31, 0x4F	; 79
    9f9a:	0c 94 40 e3 	jmp	0x1c680	; 0x1c680 <__prologue_saves__+0x4>
    9f9e:	8c 01       	movw	r16, r24
    9fa0:	2a 01       	movw	r4, r20
    9fa2:	3b 01       	movw	r6, r22
    9fa4:	fc 01       	movw	r30, r24
    9fa6:	c0 81       	ld	r28, Z
    9fa8:	d1 81       	ldd	r29, Z+1	; 0x01
    9faa:	41 15       	cp	r20, r1
    9fac:	51 05       	cpc	r21, r1
    9fae:	61 05       	cpc	r22, r1
    9fb0:	71 05       	cpc	r23, r1
    9fb2:	99 f4       	brne	.+38     	; 0x9fda <create_chain+0x48>
    9fb4:	8d 84       	ldd	r8, Y+13	; 0x0d
    9fb6:	9e 84       	ldd	r9, Y+14	; 0x0e
    9fb8:	af 84       	ldd	r10, Y+15	; 0x0f
    9fba:	b8 88       	ldd	r11, Y+16	; 0x10
    9fbc:	81 14       	cp	r8, r1
    9fbe:	91 04       	cpc	r9, r1
    9fc0:	a1 04       	cpc	r10, r1
    9fc2:	b1 04       	cpc	r11, r1
    9fc4:	51 f1       	breq	.+84     	; 0xa01a <create_chain+0x88>
    9fc6:	89 8d       	ldd	r24, Y+25	; 0x19
    9fc8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9fca:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9fcc:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9fce:	88 16       	cp	r8, r24
    9fd0:	99 06       	cpc	r9, r25
    9fd2:	aa 06       	cpc	r10, r26
    9fd4:	bb 06       	cpc	r11, r27
    9fd6:	28 f1       	brcs	.+74     	; 0xa022 <create_chain+0x90>
    9fd8:	20 c0       	rjmp	.+64     	; 0xa01a <create_chain+0x88>
    9fda:	ce 01       	movw	r24, r28
    9fdc:	65 de       	rcall	.-822    	; 0x9ca8 <get_fat.isra.10>
    9fde:	62 30       	cpi	r22, 0x02	; 2
    9fe0:	71 05       	cpc	r23, r1
    9fe2:	81 05       	cpc	r24, r1
    9fe4:	91 05       	cpc	r25, r1
    9fe6:	08 f4       	brcc	.+2      	; 0x9fea <create_chain+0x58>
    9fe8:	ea c0       	rjmp	.+468    	; 0xa1be <create_chain+0x22c>
    9fea:	6f 3f       	cpi	r22, 0xFF	; 255
    9fec:	ff ef       	ldi	r31, 0xFF	; 255
    9fee:	7f 07       	cpc	r23, r31
    9ff0:	8f 07       	cpc	r24, r31
    9ff2:	9f 07       	cpc	r25, r31
    9ff4:	29 f4       	brne	.+10     	; 0xa000 <create_chain+0x6e>
    9ff6:	4f ef       	ldi	r20, 0xFF	; 255
    9ff8:	3f ef       	ldi	r19, 0xFF	; 255
    9ffa:	2f ef       	ldi	r18, 0xFF	; 255
    9ffc:	9f ef       	ldi	r25, 0xFF	; 255
    9ffe:	e7 c0       	rjmp	.+462    	; 0xa1ce <create_chain+0x23c>
    a000:	c9 8c       	ldd	r12, Y+25	; 0x19
    a002:	da 8c       	ldd	r13, Y+26	; 0x1a
    a004:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a006:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a008:	6c 15       	cp	r22, r12
    a00a:	7d 05       	cpc	r23, r13
    a00c:	8e 05       	cpc	r24, r14
    a00e:	9f 05       	cpc	r25, r15
    a010:	08 f4       	brcc	.+2      	; 0xa014 <create_chain+0x82>
    a012:	da c0       	rjmp	.+436    	; 0xa1c8 <create_chain+0x236>
    a014:	53 01       	movw	r10, r6
    a016:	42 01       	movw	r8, r4
    a018:	04 c0       	rjmp	.+8      	; 0xa022 <create_chain+0x90>
    a01a:	81 2c       	mov	r8, r1
    a01c:	91 2c       	mov	r9, r1
    a01e:	54 01       	movw	r10, r8
    a020:	83 94       	inc	r8
    a022:	89 89       	ldd	r24, Y+17	; 0x11
    a024:	9a 89       	ldd	r25, Y+18	; 0x12
    a026:	ab 89       	ldd	r26, Y+19	; 0x13
    a028:	bc 89       	ldd	r27, Y+20	; 0x14
    a02a:	89 2b       	or	r24, r25
    a02c:	8a 2b       	or	r24, r26
    a02e:	8b 2b       	or	r24, r27
    a030:	11 f4       	brne	.+4      	; 0xa036 <create_chain+0xa4>
    a032:	40 e0       	ldi	r20, 0x00	; 0
    a034:	c5 c0       	rjmp	.+394    	; 0xa1c0 <create_chain+0x22e>
    a036:	84 14       	cp	r8, r4
    a038:	95 04       	cpc	r9, r5
    a03a:	a6 04       	cpc	r10, r6
    a03c:	b7 04       	cpc	r11, r7
    a03e:	09 f0       	breq	.+2      	; 0xa042 <create_chain+0xb0>
    a040:	46 c0       	rjmp	.+140    	; 0xa0ce <create_chain+0x13c>
    a042:	75 01       	movw	r14, r10
    a044:	64 01       	movw	r12, r8
    a046:	2f ef       	ldi	r18, 0xFF	; 255
    a048:	c2 1a       	sub	r12, r18
    a04a:	d2 0a       	sbc	r13, r18
    a04c:	e2 0a       	sbc	r14, r18
    a04e:	f2 0a       	sbc	r15, r18
    a050:	89 8d       	ldd	r24, Y+25	; 0x19
    a052:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a054:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a056:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a058:	c8 16       	cp	r12, r24
    a05a:	d9 06       	cpc	r13, r25
    a05c:	ea 06       	cpc	r14, r26
    a05e:	fb 06       	cpc	r15, r27
    a060:	28 f0       	brcs	.+10     	; 0xa06c <create_chain+0xda>
    a062:	92 e0       	ldi	r25, 0x02	; 2
    a064:	c9 2e       	mov	r12, r25
    a066:	d1 2c       	mov	r13, r1
    a068:	e1 2c       	mov	r14, r1
    a06a:	f1 2c       	mov	r15, r1
    a06c:	b7 01       	movw	r22, r14
    a06e:	a6 01       	movw	r20, r12
    a070:	f8 01       	movw	r30, r16
    a072:	80 81       	ld	r24, Z
    a074:	91 81       	ldd	r25, Z+1	; 0x01
    a076:	18 de       	rcall	.-976    	; 0x9ca8 <get_fat.isra.10>
    a078:	61 30       	cpi	r22, 0x01	; 1
    a07a:	71 05       	cpc	r23, r1
    a07c:	81 05       	cpc	r24, r1
    a07e:	91 05       	cpc	r25, r1
    a080:	09 f4       	brne	.+2      	; 0xa084 <create_chain+0xf2>
    a082:	9d c0       	rjmp	.+314    	; 0xa1be <create_chain+0x22c>
    a084:	6f 3f       	cpi	r22, 0xFF	; 255
    a086:	ff ef       	ldi	r31, 0xFF	; 255
    a088:	7f 07       	cpc	r23, r31
    a08a:	8f 07       	cpc	r24, r31
    a08c:	9f 07       	cpc	r25, r31
    a08e:	09 f4       	brne	.+2      	; 0xa092 <create_chain+0x100>
    a090:	b2 cf       	rjmp	.-156    	; 0x9ff6 <create_chain+0x64>
    a092:	67 2b       	or	r22, r23
    a094:	68 2b       	or	r22, r24
    a096:	69 2b       	or	r22, r25
    a098:	a9 f0       	breq	.+42     	; 0xa0c4 <create_chain+0x132>
    a09a:	8d 85       	ldd	r24, Y+13	; 0x0d
    a09c:	9e 85       	ldd	r25, Y+14	; 0x0e
    a09e:	af 85       	ldd	r26, Y+15	; 0x0f
    a0a0:	b8 89       	ldd	r27, Y+16	; 0x10
    a0a2:	82 30       	cpi	r24, 0x02	; 2
    a0a4:	91 05       	cpc	r25, r1
    a0a6:	a1 05       	cpc	r26, r1
    a0a8:	b1 05       	cpc	r27, r1
    a0aa:	88 f0       	brcs	.+34     	; 0xa0ce <create_chain+0x13c>
    a0ac:	49 8d       	ldd	r20, Y+25	; 0x19
    a0ae:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a0b0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a0b2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a0b4:	84 17       	cp	r24, r20
    a0b6:	95 07       	cpc	r25, r21
    a0b8:	a6 07       	cpc	r26, r22
    a0ba:	b7 07       	cpc	r27, r23
    a0bc:	40 f4       	brcc	.+16     	; 0xa0ce <create_chain+0x13c>
    a0be:	4c 01       	movw	r8, r24
    a0c0:	5d 01       	movw	r10, r26
    a0c2:	05 c0       	rjmp	.+10     	; 0xa0ce <create_chain+0x13c>
    a0c4:	c1 14       	cp	r12, r1
    a0c6:	d1 04       	cpc	r13, r1
    a0c8:	e1 04       	cpc	r14, r1
    a0ca:	f1 04       	cpc	r15, r1
    a0cc:	c9 f5       	brne	.+114    	; 0xa140 <create_chain+0x1ae>
    a0ce:	75 01       	movw	r14, r10
    a0d0:	64 01       	movw	r12, r8
    a0d2:	2f ef       	ldi	r18, 0xFF	; 255
    a0d4:	c2 1a       	sub	r12, r18
    a0d6:	d2 0a       	sbc	r13, r18
    a0d8:	e2 0a       	sbc	r14, r18
    a0da:	f2 0a       	sbc	r15, r18
    a0dc:	89 8d       	ldd	r24, Y+25	; 0x19
    a0de:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a0e0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a0e2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a0e4:	c8 16       	cp	r12, r24
    a0e6:	d9 06       	cpc	r13, r25
    a0e8:	ea 06       	cpc	r14, r26
    a0ea:	fb 06       	cpc	r15, r27
    a0ec:	60 f0       	brcs	.+24     	; 0xa106 <create_chain+0x174>
    a0ee:	82 e0       	ldi	r24, 0x02	; 2
    a0f0:	88 16       	cp	r8, r24
    a0f2:	91 04       	cpc	r9, r1
    a0f4:	a1 04       	cpc	r10, r1
    a0f6:	b1 04       	cpc	r11, r1
    a0f8:	08 f4       	brcc	.+2      	; 0xa0fc <create_chain+0x16a>
    a0fa:	9b cf       	rjmp	.-202    	; 0xa032 <create_chain+0xa0>
    a0fc:	82 e0       	ldi	r24, 0x02	; 2
    a0fe:	c8 2e       	mov	r12, r24
    a100:	d1 2c       	mov	r13, r1
    a102:	e1 2c       	mov	r14, r1
    a104:	f1 2c       	mov	r15, r1
    a106:	b7 01       	movw	r22, r14
    a108:	a6 01       	movw	r20, r12
    a10a:	f8 01       	movw	r30, r16
    a10c:	80 81       	ld	r24, Z
    a10e:	91 81       	ldd	r25, Z+1	; 0x01
    a110:	cb dd       	rcall	.-1130   	; 0x9ca8 <get_fat.isra.10>
    a112:	61 15       	cp	r22, r1
    a114:	71 05       	cpc	r23, r1
    a116:	81 05       	cpc	r24, r1
    a118:	91 05       	cpc	r25, r1
    a11a:	91 f0       	breq	.+36     	; 0xa140 <create_chain+0x1ae>
    a11c:	61 30       	cpi	r22, 0x01	; 1
    a11e:	71 05       	cpc	r23, r1
    a120:	81 05       	cpc	r24, r1
    a122:	91 05       	cpc	r25, r1
    a124:	09 f4       	brne	.+2      	; 0xa128 <create_chain+0x196>
    a126:	4b c0       	rjmp	.+150    	; 0xa1be <create_chain+0x22c>
    a128:	6f 3f       	cpi	r22, 0xFF	; 255
    a12a:	7f 4f       	sbci	r23, 0xFF	; 255
    a12c:	8f 4f       	sbci	r24, 0xFF	; 255
    a12e:	9f 4f       	sbci	r25, 0xFF	; 255
    a130:	09 f4       	brne	.+2      	; 0xa134 <create_chain+0x1a2>
    a132:	61 cf       	rjmp	.-318    	; 0x9ff6 <create_chain+0x64>
    a134:	c8 14       	cp	r12, r8
    a136:	d9 04       	cpc	r13, r9
    a138:	ea 04       	cpc	r14, r10
    a13a:	fb 04       	cpc	r15, r11
    a13c:	51 f6       	brne	.-108    	; 0xa0d2 <create_chain+0x140>
    a13e:	79 cf       	rjmp	.-270    	; 0xa032 <create_chain+0xa0>
    a140:	0f ef       	ldi	r16, 0xFF	; 255
    a142:	1f ef       	ldi	r17, 0xFF	; 255
    a144:	98 01       	movw	r18, r16
    a146:	b7 01       	movw	r22, r14
    a148:	a6 01       	movw	r20, r12
    a14a:	ce 01       	movw	r24, r28
    a14c:	b2 dc       	rcall	.-1692   	; 0x9ab2 <put_fat>
    a14e:	00 97       	sbiw	r24, 0x00	; 0
    a150:	99 f5       	brne	.+102    	; 0xa1b8 <create_chain+0x226>
    a152:	41 14       	cp	r4, r1
    a154:	51 04       	cpc	r5, r1
    a156:	61 04       	cpc	r6, r1
    a158:	71 04       	cpc	r7, r1
    a15a:	e9 f4       	brne	.+58     	; 0xa196 <create_chain+0x204>
    a15c:	cd 86       	std	Y+13, r12	; 0x0d
    a15e:	de 86       	std	Y+14, r13	; 0x0e
    a160:	ef 86       	std	Y+15, r14	; 0x0f
    a162:	f8 8a       	std	Y+16, r15	; 0x10
    a164:	89 89       	ldd	r24, Y+17	; 0x11
    a166:	9a 89       	ldd	r25, Y+18	; 0x12
    a168:	ab 89       	ldd	r26, Y+19	; 0x13
    a16a:	bc 89       	ldd	r27, Y+20	; 0x14
    a16c:	49 8d       	ldd	r20, Y+25	; 0x19
    a16e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a170:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a172:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a174:	42 50       	subi	r20, 0x02	; 2
    a176:	51 09       	sbc	r21, r1
    a178:	61 09       	sbc	r22, r1
    a17a:	71 09       	sbc	r23, r1
    a17c:	48 17       	cp	r20, r24
    a17e:	59 07       	cpc	r21, r25
    a180:	6a 07       	cpc	r22, r26
    a182:	7b 07       	cpc	r23, r27
    a184:	88 f0       	brcs	.+34     	; 0xa1a8 <create_chain+0x216>
    a186:	01 97       	sbiw	r24, 0x01	; 1
    a188:	a1 09       	sbc	r26, r1
    a18a:	b1 09       	sbc	r27, r1
    a18c:	89 8b       	std	Y+17, r24	; 0x11
    a18e:	9a 8b       	std	Y+18, r25	; 0x12
    a190:	ab 8b       	std	Y+19, r26	; 0x13
    a192:	bc 8b       	std	Y+20, r27	; 0x14
    a194:	09 c0       	rjmp	.+18     	; 0xa1a8 <create_chain+0x216>
    a196:	97 01       	movw	r18, r14
    a198:	86 01       	movw	r16, r12
    a19a:	b3 01       	movw	r22, r6
    a19c:	a2 01       	movw	r20, r4
    a19e:	ce 01       	movw	r24, r28
    a1a0:	88 dc       	rcall	.-1776   	; 0x9ab2 <put_fat>
    a1a2:	00 97       	sbiw	r24, 0x00	; 0
    a1a4:	d9 f2       	breq	.-74     	; 0xa15c <create_chain+0x1ca>
    a1a6:	08 c0       	rjmp	.+16     	; 0xa1b8 <create_chain+0x226>
    a1a8:	8c 81       	ldd	r24, Y+4	; 0x04
    a1aa:	81 60       	ori	r24, 0x01	; 1
    a1ac:	8c 83       	std	Y+4, r24	; 0x04
    a1ae:	4c 2d       	mov	r20, r12
    a1b0:	3d 2d       	mov	r19, r13
    a1b2:	2e 2d       	mov	r18, r14
    a1b4:	9f 2d       	mov	r25, r15
    a1b6:	0b c0       	rjmp	.+22     	; 0xa1ce <create_chain+0x23c>
    a1b8:	01 97       	sbiw	r24, 0x01	; 1
    a1ba:	09 f4       	brne	.+2      	; 0xa1be <create_chain+0x22c>
    a1bc:	1c cf       	rjmp	.-456    	; 0x9ff6 <create_chain+0x64>
    a1be:	41 e0       	ldi	r20, 0x01	; 1
    a1c0:	30 e0       	ldi	r19, 0x00	; 0
    a1c2:	20 e0       	ldi	r18, 0x00	; 0
    a1c4:	90 e0       	ldi	r25, 0x00	; 0
    a1c6:	03 c0       	rjmp	.+6      	; 0xa1ce <create_chain+0x23c>
    a1c8:	46 2f       	mov	r20, r22
    a1ca:	37 2f       	mov	r19, r23
    a1cc:	28 2f       	mov	r18, r24
    a1ce:	64 2f       	mov	r22, r20
    a1d0:	73 2f       	mov	r23, r19
    a1d2:	82 2f       	mov	r24, r18
    a1d4:	cd b7       	in	r28, 0x3d	; 61
    a1d6:	de b7       	in	r29, 0x3e	; 62
    a1d8:	e0 e1       	ldi	r30, 0x10	; 16
    a1da:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__epilogue_restores__+0x4>

0000a1de <remove_chain>:
    a1de:	4f 92       	push	r4
    a1e0:	5f 92       	push	r5
    a1e2:	6f 92       	push	r6
    a1e4:	7f 92       	push	r7
    a1e6:	af 92       	push	r10
    a1e8:	bf 92       	push	r11
    a1ea:	cf 92       	push	r12
    a1ec:	df 92       	push	r13
    a1ee:	ef 92       	push	r14
    a1f0:	ff 92       	push	r15
    a1f2:	0f 93       	push	r16
    a1f4:	1f 93       	push	r17
    a1f6:	cf 93       	push	r28
    a1f8:	df 93       	push	r29
    a1fa:	5c 01       	movw	r10, r24
    a1fc:	6a 01       	movw	r12, r20
    a1fe:	7b 01       	movw	r14, r22
    a200:	b9 01       	movw	r22, r18
    a202:	a8 01       	movw	r20, r16
    a204:	22 e0       	ldi	r18, 0x02	; 2
    a206:	c2 16       	cp	r12, r18
    a208:	d1 04       	cpc	r13, r1
    a20a:	e1 04       	cpc	r14, r1
    a20c:	f1 04       	cpc	r15, r1
    a20e:	10 f4       	brcc	.+4      	; 0xa214 <remove_chain+0x36>
    a210:	22 e0       	ldi	r18, 0x02	; 2
    a212:	27 c0       	rjmp	.+78     	; 0xa262 <remove_chain+0x84>
    a214:	fc 01       	movw	r30, r24
    a216:	c0 81       	ld	r28, Z
    a218:	d1 81       	ldd	r29, Z+1	; 0x01
    a21a:	89 8d       	ldd	r24, Y+25	; 0x19
    a21c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a21e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a220:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a222:	c8 16       	cp	r12, r24
    a224:	d9 06       	cpc	r13, r25
    a226:	ea 06       	cpc	r14, r26
    a228:	fb 06       	cpc	r15, r27
    a22a:	90 f7       	brcc	.-28     	; 0xa210 <remove_chain+0x32>
    a22c:	41 15       	cp	r20, r1
    a22e:	51 05       	cpc	r21, r1
    a230:	61 05       	cpc	r22, r1
    a232:	71 05       	cpc	r23, r1
    a234:	41 f0       	breq	.+16     	; 0xa246 <remove_chain+0x68>
    a236:	0f ef       	ldi	r16, 0xFF	; 255
    a238:	1f ef       	ldi	r17, 0xFF	; 255
    a23a:	98 01       	movw	r18, r16
    a23c:	ce 01       	movw	r24, r28
    a23e:	39 dc       	rcall	.-1934   	; 0x9ab2 <put_fat>
    a240:	00 97       	sbiw	r24, 0x00	; 0
    a242:	09 f0       	breq	.+2      	; 0xa246 <remove_chain+0x68>
    a244:	4c c0       	rjmp	.+152    	; 0xa2de <remove_chain+0x100>
    a246:	b7 01       	movw	r22, r14
    a248:	a6 01       	movw	r20, r12
    a24a:	f5 01       	movw	r30, r10
    a24c:	80 81       	ld	r24, Z
    a24e:	91 81       	ldd	r25, Z+1	; 0x01
    a250:	2b dd       	rcall	.-1450   	; 0x9ca8 <get_fat.isra.10>
    a252:	2b 01       	movw	r4, r22
    a254:	3c 01       	movw	r6, r24
    a256:	61 15       	cp	r22, r1
    a258:	71 05       	cpc	r23, r1
    a25a:	81 05       	cpc	r24, r1
    a25c:	91 05       	cpc	r25, r1
    a25e:	19 f4       	brne	.+6      	; 0xa266 <remove_chain+0x88>
    a260:	20 e0       	ldi	r18, 0x00	; 0
    a262:	90 e0       	ldi	r25, 0x00	; 0
    a264:	3d c0       	rjmp	.+122    	; 0xa2e0 <remove_chain+0x102>
    a266:	61 30       	cpi	r22, 0x01	; 1
    a268:	71 05       	cpc	r23, r1
    a26a:	81 05       	cpc	r24, r1
    a26c:	91 05       	cpc	r25, r1
    a26e:	81 f2       	breq	.-96     	; 0xa210 <remove_chain+0x32>
    a270:	6f 3f       	cpi	r22, 0xFF	; 255
    a272:	7f 4f       	sbci	r23, 0xFF	; 255
    a274:	8f 4f       	sbci	r24, 0xFF	; 255
    a276:	9f 4f       	sbci	r25, 0xFF	; 255
    a278:	81 f1       	breq	.+96     	; 0xa2da <remove_chain+0xfc>
    a27a:	00 e0       	ldi	r16, 0x00	; 0
    a27c:	10 e0       	ldi	r17, 0x00	; 0
    a27e:	98 01       	movw	r18, r16
    a280:	b7 01       	movw	r22, r14
    a282:	a6 01       	movw	r20, r12
    a284:	ce 01       	movw	r24, r28
    a286:	15 dc       	rcall	.-2006   	; 0x9ab2 <put_fat>
    a288:	00 97       	sbiw	r24, 0x00	; 0
    a28a:	49 f5       	brne	.+82     	; 0xa2de <remove_chain+0x100>
    a28c:	89 89       	ldd	r24, Y+17	; 0x11
    a28e:	9a 89       	ldd	r25, Y+18	; 0x12
    a290:	ab 89       	ldd	r26, Y+19	; 0x13
    a292:	bc 89       	ldd	r27, Y+20	; 0x14
    a294:	49 8d       	ldd	r20, Y+25	; 0x19
    a296:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a298:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a29a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a29c:	6a 01       	movw	r12, r20
    a29e:	7b 01       	movw	r14, r22
    a2a0:	e2 e0       	ldi	r30, 0x02	; 2
    a2a2:	ce 1a       	sub	r12, r30
    a2a4:	d1 08       	sbc	r13, r1
    a2a6:	e1 08       	sbc	r14, r1
    a2a8:	f1 08       	sbc	r15, r1
    a2aa:	8c 15       	cp	r24, r12
    a2ac:	9d 05       	cpc	r25, r13
    a2ae:	ae 05       	cpc	r26, r14
    a2b0:	bf 05       	cpc	r27, r15
    a2b2:	50 f4       	brcc	.+20     	; 0xa2c8 <remove_chain+0xea>
    a2b4:	01 96       	adiw	r24, 0x01	; 1
    a2b6:	a1 1d       	adc	r26, r1
    a2b8:	b1 1d       	adc	r27, r1
    a2ba:	89 8b       	std	Y+17, r24	; 0x11
    a2bc:	9a 8b       	std	Y+18, r25	; 0x12
    a2be:	ab 8b       	std	Y+19, r26	; 0x13
    a2c0:	bc 8b       	std	Y+20, r27	; 0x14
    a2c2:	8c 81       	ldd	r24, Y+4	; 0x04
    a2c4:	81 60       	ori	r24, 0x01	; 1
    a2c6:	8c 83       	std	Y+4, r24	; 0x04
    a2c8:	73 01       	movw	r14, r6
    a2ca:	62 01       	movw	r12, r4
    a2cc:	44 16       	cp	r4, r20
    a2ce:	55 06       	cpc	r5, r21
    a2d0:	66 06       	cpc	r6, r22
    a2d2:	77 06       	cpc	r7, r23
    a2d4:	08 f4       	brcc	.+2      	; 0xa2d8 <remove_chain+0xfa>
    a2d6:	b7 cf       	rjmp	.-146    	; 0xa246 <remove_chain+0x68>
    a2d8:	c3 cf       	rjmp	.-122    	; 0xa260 <remove_chain+0x82>
    a2da:	21 e0       	ldi	r18, 0x01	; 1
    a2dc:	c2 cf       	rjmp	.-124    	; 0xa262 <remove_chain+0x84>
    a2de:	28 2f       	mov	r18, r24
    a2e0:	82 2f       	mov	r24, r18
    a2e2:	df 91       	pop	r29
    a2e4:	cf 91       	pop	r28
    a2e6:	1f 91       	pop	r17
    a2e8:	0f 91       	pop	r16
    a2ea:	ff 90       	pop	r15
    a2ec:	ef 90       	pop	r14
    a2ee:	df 90       	pop	r13
    a2f0:	cf 90       	pop	r12
    a2f2:	bf 90       	pop	r11
    a2f4:	af 90       	pop	r10
    a2f6:	7f 90       	pop	r7
    a2f8:	6f 90       	pop	r6
    a2fa:	5f 90       	pop	r5
    a2fc:	4f 90       	pop	r4
    a2fe:	08 95       	ret

0000a300 <dir_next>:
    a300:	4f 92       	push	r4
    a302:	5f 92       	push	r5
    a304:	6f 92       	push	r6
    a306:	7f 92       	push	r7
    a308:	af 92       	push	r10
    a30a:	bf 92       	push	r11
    a30c:	cf 92       	push	r12
    a30e:	df 92       	push	r13
    a310:	ef 92       	push	r14
    a312:	ff 92       	push	r15
    a314:	0f 93       	push	r16
    a316:	1f 93       	push	r17
    a318:	cf 93       	push	r28
    a31a:	df 93       	push	r29
    a31c:	ec 01       	movw	r28, r24
    a31e:	08 81       	ld	r16, Y
    a320:	19 81       	ldd	r17, Y+1	; 0x01
    a322:	ce 84       	ldd	r12, Y+14	; 0x0e
    a324:	df 84       	ldd	r13, Y+15	; 0x0f
    a326:	e8 88       	ldd	r14, Y+16	; 0x10
    a328:	f9 88       	ldd	r15, Y+17	; 0x11
    a32a:	80 e2       	ldi	r24, 0x20	; 32
    a32c:	c8 0e       	add	r12, r24
    a32e:	d1 1c       	adc	r13, r1
    a330:	e1 1c       	adc	r14, r1
    a332:	f1 1c       	adc	r15, r1
    a334:	c1 14       	cp	r12, r1
    a336:	d1 04       	cpc	r13, r1
    a338:	e0 e2       	ldi	r30, 0x20	; 32
    a33a:	ee 06       	cpc	r14, r30
    a33c:	f1 04       	cpc	r15, r1
    a33e:	20 f0       	brcs	.+8      	; 0xa348 <dir_next+0x48>
    a340:	1e 8a       	std	Y+22, r1	; 0x16
    a342:	1f 8a       	std	Y+23, r1	; 0x17
    a344:	18 8e       	std	Y+24, r1	; 0x18
    a346:	19 8e       	std	Y+25, r1	; 0x19
    a348:	8e 89       	ldd	r24, Y+22	; 0x16
    a34a:	9f 89       	ldd	r25, Y+23	; 0x17
    a34c:	a8 8d       	ldd	r26, Y+24	; 0x18
    a34e:	b9 8d       	ldd	r27, Y+25	; 0x19
    a350:	00 97       	sbiw	r24, 0x00	; 0
    a352:	a1 05       	cpc	r26, r1
    a354:	b1 05       	cpc	r27, r1
    a356:	09 f4       	brne	.+2      	; 0xa35a <dir_next+0x5a>
    a358:	a7 c0       	rjmp	.+334    	; 0xa4a8 <dir_next+0x1a8>
    a35a:	5b 01       	movw	r10, r22
    a35c:	b7 01       	movw	r22, r14
    a35e:	a6 01       	movw	r20, r12
    a360:	51 70       	andi	r21, 0x01	; 1
    a362:	66 27       	eor	r22, r22
    a364:	77 27       	eor	r23, r23
    a366:	45 2b       	or	r20, r21
    a368:	46 2b       	or	r20, r22
    a36a:	47 2b       	or	r20, r23
    a36c:	09 f0       	breq	.+2      	; 0xa370 <dir_next+0x70>
    a36e:	8d c0       	rjmp	.+282    	; 0xa48a <dir_next+0x18a>
    a370:	01 96       	adiw	r24, 0x01	; 1
    a372:	a1 1d       	adc	r26, r1
    a374:	b1 1d       	adc	r27, r1
    a376:	8e 8b       	std	Y+22, r24	; 0x16
    a378:	9f 8b       	std	Y+23, r25	; 0x17
    a37a:	a8 8f       	std	Y+24, r26	; 0x18
    a37c:	b9 8f       	std	Y+25, r27	; 0x19
    a37e:	4a 89       	ldd	r20, Y+18	; 0x12
    a380:	5b 89       	ldd	r21, Y+19	; 0x13
    a382:	6c 89       	ldd	r22, Y+20	; 0x14
    a384:	7d 89       	ldd	r23, Y+21	; 0x15
    a386:	f8 01       	movw	r30, r16
    a388:	41 15       	cp	r20, r1
    a38a:	51 05       	cpc	r21, r1
    a38c:	61 05       	cpc	r22, r1
    a38e:	71 05       	cpc	r23, r1
    a390:	c1 f4       	brne	.+48     	; 0xa3c2 <dir_next+0xc2>
    a392:	87 81       	ldd	r24, Z+7	; 0x07
    a394:	90 85       	ldd	r25, Z+8	; 0x08
    a396:	a0 e0       	ldi	r26, 0x00	; 0
    a398:	b0 e0       	ldi	r27, 0x00	; 0
    a39a:	b7 01       	movw	r22, r14
    a39c:	a6 01       	movw	r20, r12
    a39e:	35 e0       	ldi	r19, 0x05	; 5
    a3a0:	76 95       	lsr	r23
    a3a2:	67 95       	ror	r22
    a3a4:	57 95       	ror	r21
    a3a6:	47 95       	ror	r20
    a3a8:	3a 95       	dec	r19
    a3aa:	d1 f7       	brne	.-12     	; 0xa3a0 <dir_next+0xa0>
    a3ac:	48 17       	cp	r20, r24
    a3ae:	59 07       	cpc	r21, r25
    a3b0:	6a 07       	cpc	r22, r26
    a3b2:	7b 07       	cpc	r23, r27
    a3b4:	08 f4       	brcc	.+2      	; 0xa3b8 <dir_next+0xb8>
    a3b6:	69 c0       	rjmp	.+210    	; 0xa48a <dir_next+0x18a>
    a3b8:	1e 8a       	std	Y+22, r1	; 0x16
    a3ba:	1f 8a       	std	Y+23, r1	; 0x17
    a3bc:	18 8e       	std	Y+24, r1	; 0x18
    a3be:	19 8e       	std	Y+25, r1	; 0x19
    a3c0:	73 c0       	rjmp	.+230    	; 0xa4a8 <dir_next+0x1a8>
    a3c2:	81 85       	ldd	r24, Z+9	; 0x09
    a3c4:	92 85       	ldd	r25, Z+10	; 0x0a
    a3c6:	01 97       	sbiw	r24, 0x01	; 1
    a3c8:	a0 e0       	ldi	r26, 0x00	; 0
    a3ca:	b0 e0       	ldi	r27, 0x00	; 0
    a3cc:	26 01       	movw	r4, r12
    a3ce:	37 01       	movw	r6, r14
    a3d0:	29 e0       	ldi	r18, 0x09	; 9
    a3d2:	76 94       	lsr	r7
    a3d4:	67 94       	ror	r6
    a3d6:	57 94       	ror	r5
    a3d8:	47 94       	ror	r4
    a3da:	2a 95       	dec	r18
    a3dc:	d1 f7       	brne	.-12     	; 0xa3d2 <dir_next+0xd2>
    a3de:	84 21       	and	r24, r4
    a3e0:	95 21       	and	r25, r5
    a3e2:	a6 21       	and	r26, r6
    a3e4:	b7 21       	and	r27, r7
    a3e6:	89 2b       	or	r24, r25
    a3e8:	8a 2b       	or	r24, r26
    a3ea:	8b 2b       	or	r24, r27
    a3ec:	09 f0       	breq	.+2      	; 0xa3f0 <dir_next+0xf0>
    a3ee:	4d c0       	rjmp	.+154    	; 0xa48a <dir_next+0x18a>
    a3f0:	c8 01       	movw	r24, r16
    a3f2:	5a dc       	rcall	.-1868   	; 0x9ca8 <get_fat.isra.10>
    a3f4:	2b 01       	movw	r4, r22
    a3f6:	3c 01       	movw	r6, r24
    a3f8:	62 30       	cpi	r22, 0x02	; 2
    a3fa:	71 05       	cpc	r23, r1
    a3fc:	81 05       	cpc	r24, r1
    a3fe:	91 05       	cpc	r25, r1
    a400:	18 f4       	brcc	.+6      	; 0xa408 <dir_next+0x108>
    a402:	82 e0       	ldi	r24, 0x02	; 2
    a404:	90 e0       	ldi	r25, 0x00	; 0
    a406:	55 c0       	rjmp	.+170    	; 0xa4b2 <dir_next+0x1b2>
    a408:	8f ef       	ldi	r24, 0xFF	; 255
    a40a:	48 16       	cp	r4, r24
    a40c:	58 06       	cpc	r5, r24
    a40e:	68 06       	cpc	r6, r24
    a410:	78 06       	cpc	r7, r24
    a412:	19 f4       	brne	.+6      	; 0xa41a <dir_next+0x11a>
    a414:	81 e0       	ldi	r24, 0x01	; 1
    a416:	90 e0       	ldi	r25, 0x00	; 0
    a418:	4c c0       	rjmp	.+152    	; 0xa4b2 <dir_next+0x1b2>
    a41a:	f8 01       	movw	r30, r16
    a41c:	81 8d       	ldd	r24, Z+25	; 0x19
    a41e:	92 8d       	ldd	r25, Z+26	; 0x1a
    a420:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a422:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a424:	48 16       	cp	r4, r24
    a426:	59 06       	cpc	r5, r25
    a428:	6a 06       	cpc	r6, r26
    a42a:	7b 06       	cpc	r7, r27
    a42c:	08 f1       	brcs	.+66     	; 0xa470 <dir_next+0x170>
    a42e:	ab 28       	or	r10, r11
    a430:	19 f2       	breq	.-122    	; 0xa3b8 <dir_next+0xb8>
    a432:	4a 89       	ldd	r20, Y+18	; 0x12
    a434:	5b 89       	ldd	r21, Y+19	; 0x13
    a436:	6c 89       	ldd	r22, Y+20	; 0x14
    a438:	7d 89       	ldd	r23, Y+21	; 0x15
    a43a:	ce 01       	movw	r24, r28
    a43c:	aa dd       	rcall	.-1196   	; 0x9f92 <create_chain>
    a43e:	2b 01       	movw	r4, r22
    a440:	3c 01       	movw	r6, r24
    a442:	61 15       	cp	r22, r1
    a444:	71 05       	cpc	r23, r1
    a446:	81 05       	cpc	r24, r1
    a448:	91 05       	cpc	r25, r1
    a44a:	89 f1       	breq	.+98     	; 0xa4ae <dir_next+0x1ae>
    a44c:	61 30       	cpi	r22, 0x01	; 1
    a44e:	71 05       	cpc	r23, r1
    a450:	81 05       	cpc	r24, r1
    a452:	91 05       	cpc	r25, r1
    a454:	b1 f2       	breq	.-84     	; 0xa402 <dir_next+0x102>
    a456:	8f ef       	ldi	r24, 0xFF	; 255
    a458:	48 16       	cp	r4, r24
    a45a:	58 06       	cpc	r5, r24
    a45c:	68 06       	cpc	r6, r24
    a45e:	78 06       	cpc	r7, r24
    a460:	c9 f2       	breq	.-78     	; 0xa414 <dir_next+0x114>
    a462:	b3 01       	movw	r22, r6
    a464:	a2 01       	movw	r20, r4
    a466:	c8 01       	movw	r24, r16
    a468:	0e 94 dc 49 	call	0x93b8	; 0x93b8 <dir_clear>
    a46c:	89 2b       	or	r24, r25
    a46e:	91 f6       	brne	.-92     	; 0xa414 <dir_next+0x114>
    a470:	4a 8a       	std	Y+18, r4	; 0x12
    a472:	5b 8a       	std	Y+19, r5	; 0x13
    a474:	6c 8a       	std	Y+20, r6	; 0x14
    a476:	7d 8a       	std	Y+21, r7	; 0x15
    a478:	b3 01       	movw	r22, r6
    a47a:	a2 01       	movw	r20, r4
    a47c:	c8 01       	movw	r24, r16
    a47e:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <clst2sect>
    a482:	6e 8b       	std	Y+22, r22	; 0x16
    a484:	7f 8b       	std	Y+23, r23	; 0x17
    a486:	88 8f       	std	Y+24, r24	; 0x18
    a488:	99 8f       	std	Y+25, r25	; 0x19
    a48a:	ce 86       	std	Y+14, r12	; 0x0e
    a48c:	df 86       	std	Y+15, r13	; 0x0f
    a48e:	e8 8a       	std	Y+16, r14	; 0x10
    a490:	f9 8a       	std	Y+17, r15	; 0x11
    a492:	0b 5c       	subi	r16, 0xCB	; 203
    a494:	1f 4f       	sbci	r17, 0xFF	; 255
    a496:	e1 e0       	ldi	r30, 0x01	; 1
    a498:	de 22       	and	r13, r30
    a49a:	c0 0e       	add	r12, r16
    a49c:	d1 1e       	adc	r13, r17
    a49e:	db 8e       	std	Y+27, r13	; 0x1b
    a4a0:	ca 8e       	std	Y+26, r12	; 0x1a
    a4a2:	80 e0       	ldi	r24, 0x00	; 0
    a4a4:	90 e0       	ldi	r25, 0x00	; 0
    a4a6:	05 c0       	rjmp	.+10     	; 0xa4b2 <dir_next+0x1b2>
    a4a8:	84 e0       	ldi	r24, 0x04	; 4
    a4aa:	90 e0       	ldi	r25, 0x00	; 0
    a4ac:	02 c0       	rjmp	.+4      	; 0xa4b2 <dir_next+0x1b2>
    a4ae:	87 e0       	ldi	r24, 0x07	; 7
    a4b0:	90 e0       	ldi	r25, 0x00	; 0
    a4b2:	df 91       	pop	r29
    a4b4:	cf 91       	pop	r28
    a4b6:	1f 91       	pop	r17
    a4b8:	0f 91       	pop	r16
    a4ba:	ff 90       	pop	r15
    a4bc:	ef 90       	pop	r14
    a4be:	df 90       	pop	r13
    a4c0:	cf 90       	pop	r12
    a4c2:	bf 90       	pop	r11
    a4c4:	af 90       	pop	r10
    a4c6:	7f 90       	pop	r7
    a4c8:	6f 90       	pop	r6
    a4ca:	5f 90       	pop	r5
    a4cc:	4f 90       	pop	r4
    a4ce:	08 95       	ret

0000a4d0 <dir_alloc>:
    a4d0:	a0 e0       	ldi	r26, 0x00	; 0
    a4d2:	b0 e0       	ldi	r27, 0x00	; 0
    a4d4:	ee e6       	ldi	r30, 0x6E	; 110
    a4d6:	f2 e5       	ldi	r31, 0x52	; 82
    a4d8:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
    a4dc:	ec 01       	movw	r28, r24
    a4de:	6b 01       	movw	r12, r22
    a4e0:	e8 80       	ld	r14, Y
    a4e2:	f9 80       	ldd	r15, Y+1	; 0x01
    a4e4:	40 e0       	ldi	r20, 0x00	; 0
    a4e6:	50 e0       	ldi	r21, 0x00	; 0
    a4e8:	ba 01       	movw	r22, r20
    a4ea:	92 dc       	rcall	.-1756   	; 0x9e10 <dir_sdi>
    a4ec:	00 97       	sbiw	r24, 0x00	; 0
    a4ee:	f9 f4       	brne	.+62     	; 0xa52e <dir_alloc+0x5e>
    a4f0:	00 e0       	ldi	r16, 0x00	; 0
    a4f2:	10 e0       	ldi	r17, 0x00	; 0
    a4f4:	4e 89       	ldd	r20, Y+22	; 0x16
    a4f6:	5f 89       	ldd	r21, Y+23	; 0x17
    a4f8:	68 8d       	ldd	r22, Y+24	; 0x18
    a4fa:	79 8d       	ldd	r23, Y+25	; 0x19
    a4fc:	c7 01       	movw	r24, r14
    a4fe:	04 d8       	rcall	.-4088   	; 0x9508 <move_window>
    a500:	00 97       	sbiw	r24, 0x00	; 0
    a502:	a9 f4       	brne	.+42     	; 0xa52e <dir_alloc+0x5e>
    a504:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a506:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a508:	20 81       	ld	r18, Z
    a50a:	25 3e       	cpi	r18, 0xE5	; 229
    a50c:	11 f0       	breq	.+4      	; 0xa512 <dir_alloc+0x42>
    a50e:	21 11       	cpse	r18, r1
    a510:	06 c0       	rjmp	.+12     	; 0xa51e <dir_alloc+0x4e>
    a512:	0f 5f       	subi	r16, 0xFF	; 255
    a514:	1f 4f       	sbci	r17, 0xFF	; 255
    a516:	0c 15       	cp	r16, r12
    a518:	1d 05       	cpc	r17, r13
    a51a:	19 f4       	brne	.+6      	; 0xa522 <dir_alloc+0x52>
    a51c:	0d c0       	rjmp	.+26     	; 0xa538 <dir_alloc+0x68>
    a51e:	00 e0       	ldi	r16, 0x00	; 0
    a520:	10 e0       	ldi	r17, 0x00	; 0
    a522:	61 e0       	ldi	r22, 0x01	; 1
    a524:	70 e0       	ldi	r23, 0x00	; 0
    a526:	ce 01       	movw	r24, r28
    a528:	eb de       	rcall	.-554    	; 0xa300 <dir_next>
    a52a:	00 97       	sbiw	r24, 0x00	; 0
    a52c:	19 f3       	breq	.-58     	; 0xa4f4 <dir_alloc+0x24>
    a52e:	84 30       	cpi	r24, 0x04	; 4
    a530:	91 05       	cpc	r25, r1
    a532:	11 f4       	brne	.+4      	; 0xa538 <dir_alloc+0x68>
    a534:	87 e0       	ldi	r24, 0x07	; 7
    a536:	90 e0       	ldi	r25, 0x00	; 0
    a538:	cd b7       	in	r28, 0x3d	; 61
    a53a:	de b7       	in	r29, 0x3e	; 62
    a53c:	e8 e0       	ldi	r30, 0x08	; 8
    a53e:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

0000a542 <dir_read>:
    a542:	a0 e0       	ldi	r26, 0x00	; 0
    a544:	b0 e0       	ldi	r27, 0x00	; 0
    a546:	e7 ea       	ldi	r30, 0xA7	; 167
    a548:	f2 e5       	ldi	r31, 0x52	; 82
    a54a:	0c 94 44 e3 	jmp	0x1c688	; 0x1c688 <__prologue_saves__+0xc>
    a54e:	ec 01       	movw	r28, r24
    a550:	7b 01       	movw	r14, r22
    a552:	a8 80       	ld	r10, Y
    a554:	b9 80       	ldd	r11, Y+1	; 0x01
    a556:	dd 24       	eor	r13, r13
    a558:	da 94       	dec	r13
    a55a:	1f ef       	ldi	r17, 0xFF	; 255
    a55c:	84 e0       	ldi	r24, 0x04	; 4
    a55e:	90 e0       	ldi	r25, 0x00	; 0
    a560:	fd e0       	ldi	r31, 0x0D	; 13
    a562:	cf 2e       	mov	r12, r31
    a564:	4e 89       	ldd	r20, Y+22	; 0x16
    a566:	5f 89       	ldd	r21, Y+23	; 0x17
    a568:	68 8d       	ldd	r22, Y+24	; 0x18
    a56a:	79 8d       	ldd	r23, Y+25	; 0x19
    a56c:	41 15       	cp	r20, r1
    a56e:	51 05       	cpc	r21, r1
    a570:	61 05       	cpc	r22, r1
    a572:	71 05       	cpc	r23, r1
    a574:	09 f4       	brne	.+2      	; 0xa578 <dir_read+0x36>
    a576:	9a c0       	rjmp	.+308    	; 0xa6ac <dir_read+0x16a>
    a578:	c5 01       	movw	r24, r10
    a57a:	0e 94 84 4a 	call	0x9508	; 0x9508 <move_window>
    a57e:	00 97       	sbiw	r24, 0x00	; 0
    a580:	09 f0       	breq	.+2      	; 0xa584 <dir_read+0x42>
    a582:	96 c0       	rjmp	.+300    	; 0xa6b0 <dir_read+0x16e>
    a584:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a586:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a588:	f4 01       	movw	r30, r8
    a58a:	00 81       	ld	r16, Z
    a58c:	00 23       	and	r16, r16
    a58e:	09 f4       	brne	.+2      	; 0xa592 <dir_read+0x50>
    a590:	97 c0       	rjmp	.+302    	; 0xa6c0 <dir_read+0x17e>
    a592:	83 85       	ldd	r24, Z+11	; 0x0b
    a594:	8f 73       	andi	r24, 0x3F	; 63
    a596:	8c 83       	std	Y+4, r24	; 0x04
    a598:	05 3e       	cpi	r16, 0xE5	; 229
    a59a:	09 f4       	brne	.+2      	; 0xa59e <dir_read+0x5c>
    a59c:	7e c0       	rjmp	.+252    	; 0xa69a <dir_read+0x158>
    a59e:	0e 32       	cpi	r16, 0x2E	; 46
    a5a0:	09 f4       	brne	.+2      	; 0xa5a4 <dir_read+0x62>
    a5a2:	7b c0       	rjmp	.+246    	; 0xa69a <dir_read+0x158>
    a5a4:	21 e0       	ldi	r18, 0x01	; 1
    a5a6:	30 e0       	ldi	r19, 0x00	; 0
    a5a8:	98 2f       	mov	r25, r24
    a5aa:	9f 71       	andi	r25, 0x1F	; 31
    a5ac:	98 30       	cpi	r25, 0x08	; 8
    a5ae:	11 f0       	breq	.+4      	; 0xa5b4 <dir_read+0x72>
    a5b0:	20 e0       	ldi	r18, 0x00	; 0
    a5b2:	30 e0       	ldi	r19, 0x00	; 0
    a5b4:	2e 15       	cp	r18, r14
    a5b6:	3f 05       	cpc	r19, r15
    a5b8:	09 f0       	breq	.+2      	; 0xa5bc <dir_read+0x7a>
    a5ba:	6f c0       	rjmp	.+222    	; 0xa69a <dir_read+0x158>
    a5bc:	8f 30       	cpi	r24, 0x0F	; 15
    a5be:	09 f0       	breq	.+2      	; 0xa5c2 <dir_read+0x80>
    a5c0:	5c c0       	rjmp	.+184    	; 0xa67a <dir_read+0x138>
    a5c2:	06 ff       	sbrs	r16, 6
    a5c4:	0c c0       	rjmp	.+24     	; 0xa5de <dir_read+0x9c>
    a5c6:	f4 01       	movw	r30, r8
    a5c8:	85 85       	ldd	r24, Z+13	; 0x0d
    a5ca:	0f 7b       	andi	r16, 0xBF	; 191
    a5cc:	4e 85       	ldd	r20, Y+14	; 0x0e
    a5ce:	5f 85       	ldd	r21, Y+15	; 0x0f
    a5d0:	68 89       	ldd	r22, Y+16	; 0x10
    a5d2:	79 89       	ldd	r23, Y+17	; 0x11
    a5d4:	48 a7       	std	Y+40, r20	; 0x28
    a5d6:	59 a7       	std	Y+41, r21	; 0x29
    a5d8:	6a a7       	std	Y+42, r22	; 0x2a
    a5da:	7b a7       	std	Y+43, r23	; 0x2b
    a5dc:	03 c0       	rjmp	.+6      	; 0xa5e4 <dir_read+0xa2>
    a5de:	10 13       	cpse	r17, r16
    a5e0:	5c c0       	rjmp	.+184    	; 0xa69a <dir_read+0x158>
    a5e2:	8d 2d       	mov	r24, r13
    a5e4:	f4 01       	movw	r30, r8
    a5e6:	d5 84       	ldd	r13, Z+13	; 0x0d
    a5e8:	d8 12       	cpse	r13, r24
    a5ea:	56 c0       	rjmp	.+172    	; 0xa698 <dir_read+0x156>
    a5ec:	82 8d       	ldd	r24, Z+26	; 0x1a
    a5ee:	93 8d       	ldd	r25, Z+27	; 0x1b
    a5f0:	89 2b       	or	r24, r25
    a5f2:	09 f0       	breq	.+2      	; 0xa5f6 <dir_read+0xb4>
    a5f4:	52 c0       	rjmp	.+164    	; 0xa69a <dir_read+0x158>
    a5f6:	f5 01       	movw	r30, r10
    a5f8:	63 85       	ldd	r22, Z+11	; 0x0b
    a5fa:	74 85       	ldd	r23, Z+12	; 0x0c
    a5fc:	f4 01       	movw	r30, r8
    a5fe:	80 81       	ld	r24, Z
    a600:	90 e0       	ldi	r25, 0x00	; 0
    a602:	8f 7b       	andi	r24, 0xBF	; 191
    a604:	01 97       	sbiw	r24, 0x01	; 1
    a606:	c8 9e       	mul	r12, r24
    a608:	90 01       	movw	r18, r0
    a60a:	c9 9e       	mul	r12, r25
    a60c:	30 0d       	add	r19, r0
    a60e:	11 24       	eor	r1, r1
    a610:	ab ee       	ldi	r26, 0xEB	; 235
    a612:	b4 e0       	ldi	r27, 0x04	; 4
    a614:	81 e0       	ldi	r24, 0x01	; 1
    a616:	90 e0       	ldi	r25, 0x00	; 0
    a618:	4d 91       	ld	r20, X+
    a61a:	f4 01       	movw	r30, r8
    a61c:	e4 0f       	add	r30, r20
    a61e:	f1 1d       	adc	r31, r1
    a620:	40 81       	ld	r20, Z
    a622:	51 81       	ldd	r21, Z+1	; 0x01
    a624:	00 97       	sbiw	r24, 0x00	; 0
    a626:	81 f0       	breq	.+32     	; 0xa648 <dir_read+0x106>
    a628:	2f 3f       	cpi	r18, 0xFF	; 255
    a62a:	31 05       	cpc	r19, r1
    a62c:	09 f0       	breq	.+2      	; 0xa630 <dir_read+0xee>
    a62e:	a8 f5       	brcc	.+106    	; 0xa69a <dir_read+0x158>
    a630:	c9 01       	movw	r24, r18
    a632:	88 0f       	add	r24, r24
    a634:	99 1f       	adc	r25, r25
    a636:	86 0f       	add	r24, r22
    a638:	97 1f       	adc	r25, r23
    a63a:	fc 01       	movw	r30, r24
    a63c:	51 83       	std	Z+1, r21	; 0x01
    a63e:	40 83       	st	Z, r20
    a640:	ca 01       	movw	r24, r20
    a642:	2f 5f       	subi	r18, 0xFF	; 255
    a644:	3f 4f       	sbci	r19, 0xFF	; 255
    a646:	03 c0       	rjmp	.+6      	; 0xa64e <dir_read+0x10c>
    a648:	4f 3f       	cpi	r20, 0xFF	; 255
    a64a:	5f 4f       	sbci	r21, 0xFF	; 255
    a64c:	31 f5       	brne	.+76     	; 0xa69a <dir_read+0x158>
    a64e:	44 e0       	ldi	r20, 0x04	; 4
    a650:	a8 3f       	cpi	r26, 0xF8	; 248
    a652:	b4 07       	cpc	r27, r20
    a654:	09 f7       	brne	.-62     	; 0xa618 <dir_read+0xd6>
    a656:	f4 01       	movw	r30, r8
    a658:	40 81       	ld	r20, Z
    a65a:	46 ff       	sbrs	r20, 6
    a65c:	2e c0       	rjmp	.+92     	; 0xa6ba <dir_read+0x178>
    a65e:	89 2b       	or	r24, r25
    a660:	61 f1       	breq	.+88     	; 0xa6ba <dir_read+0x178>
    a662:	2f 3f       	cpi	r18, 0xFF	; 255
    a664:	31 05       	cpc	r19, r1
    a666:	09 f0       	breq	.+2      	; 0xa66a <dir_read+0x128>
    a668:	c0 f4       	brcc	.+48     	; 0xa69a <dir_read+0x158>
    a66a:	22 0f       	add	r18, r18
    a66c:	33 1f       	adc	r19, r19
    a66e:	fb 01       	movw	r30, r22
    a670:	e2 0f       	add	r30, r18
    a672:	f3 1f       	adc	r31, r19
    a674:	11 82       	std	Z+1, r1	; 0x01
    a676:	10 82       	st	Z, r1
    a678:	20 c0       	rjmp	.+64     	; 0xa6ba <dir_read+0x178>
    a67a:	11 11       	cpse	r17, r1
    a67c:	05 c0       	rjmp	.+10     	; 0xa688 <dir_read+0x146>
    a67e:	c4 01       	movw	r24, r8
    a680:	0e 94 c6 46 	call	0x8d8c	; 0x8d8c <sum_sfn>
    a684:	d8 16       	cp	r13, r24
    a686:	f9 f0       	breq	.+62     	; 0xa6c6 <dir_read+0x184>
    a688:	8f ef       	ldi	r24, 0xFF	; 255
    a68a:	9f ef       	ldi	r25, 0xFF	; 255
    a68c:	dc 01       	movw	r26, r24
    a68e:	88 a7       	std	Y+40, r24	; 0x28
    a690:	99 a7       	std	Y+41, r25	; 0x29
    a692:	aa a7       	std	Y+42, r26	; 0x2a
    a694:	bb a7       	std	Y+43, r27	; 0x2b
    a696:	17 c0       	rjmp	.+46     	; 0xa6c6 <dir_read+0x184>
    a698:	d8 2e       	mov	r13, r24
    a69a:	1f ef       	ldi	r17, 0xFF	; 255
    a69c:	60 e0       	ldi	r22, 0x00	; 0
    a69e:	70 e0       	ldi	r23, 0x00	; 0
    a6a0:	ce 01       	movw	r24, r28
    a6a2:	2e de       	rcall	.-932    	; 0xa300 <dir_next>
    a6a4:	00 97       	sbiw	r24, 0x00	; 0
    a6a6:	09 f4       	brne	.+2      	; 0xa6aa <dir_read+0x168>
    a6a8:	5d cf       	rjmp	.-326    	; 0xa564 <dir_read+0x22>
    a6aa:	02 c0       	rjmp	.+4      	; 0xa6b0 <dir_read+0x16e>
    a6ac:	00 97       	sbiw	r24, 0x00	; 0
    a6ae:	59 f0       	breq	.+22     	; 0xa6c6 <dir_read+0x184>
    a6b0:	1e 8a       	std	Y+22, r1	; 0x16
    a6b2:	1f 8a       	std	Y+23, r1	; 0x17
    a6b4:	18 8e       	std	Y+24, r1	; 0x18
    a6b6:	19 8e       	std	Y+25, r1	; 0x19
    a6b8:	08 c0       	rjmp	.+16     	; 0xa6ca <dir_read+0x188>
    a6ba:	1f ef       	ldi	r17, 0xFF	; 255
    a6bc:	10 0f       	add	r17, r16
    a6be:	ee cf       	rjmp	.-36     	; 0xa69c <dir_read+0x15a>
    a6c0:	84 e0       	ldi	r24, 0x04	; 4
    a6c2:	90 e0       	ldi	r25, 0x00	; 0
    a6c4:	f5 cf       	rjmp	.-22     	; 0xa6b0 <dir_read+0x16e>
    a6c6:	80 e0       	ldi	r24, 0x00	; 0
    a6c8:	90 e0       	ldi	r25, 0x00	; 0
    a6ca:	cd b7       	in	r28, 0x3d	; 61
    a6cc:	de b7       	in	r29, 0x3e	; 62
    a6ce:	ec e0       	ldi	r30, 0x0C	; 12
    a6d0:	0c 94 60 e3 	jmp	0x1c6c0	; 0x1c6c0 <__epilogue_restores__+0xc>

0000a6d4 <dir_remove>:
    a6d4:	a0 e0       	ldi	r26, 0x00	; 0
    a6d6:	b0 e0       	ldi	r27, 0x00	; 0
    a6d8:	e0 e7       	ldi	r30, 0x70	; 112
    a6da:	f3 e5       	ldi	r31, 0x53	; 83
    a6dc:	0c 94 46 e3 	jmp	0x1c68c	; 0x1c68c <__prologue_saves__+0x10>
    a6e0:	ec 01       	movw	r28, r24
    a6e2:	08 81       	ld	r16, Y
    a6e4:	19 81       	ldd	r17, Y+1	; 0x01
    a6e6:	ce 84       	ldd	r12, Y+14	; 0x0e
    a6e8:	df 84       	ldd	r13, Y+15	; 0x0f
    a6ea:	e8 88       	ldd	r14, Y+16	; 0x10
    a6ec:	f9 88       	ldd	r15, Y+17	; 0x11
    a6ee:	48 a5       	ldd	r20, Y+40	; 0x28
    a6f0:	59 a5       	ldd	r21, Y+41	; 0x29
    a6f2:	6a a5       	ldd	r22, Y+42	; 0x2a
    a6f4:	7b a5       	ldd	r23, Y+43	; 0x2b
    a6f6:	4f 3f       	cpi	r20, 0xFF	; 255
    a6f8:	8f ef       	ldi	r24, 0xFF	; 255
    a6fa:	58 07       	cpc	r21, r24
    a6fc:	68 07       	cpc	r22, r24
    a6fe:	78 07       	cpc	r23, r24
    a700:	29 f4       	brne	.+10     	; 0xa70c <dir_remove+0x38>
    a702:	85 ee       	ldi	r24, 0xE5	; 229
    a704:	b8 2e       	mov	r11, r24
    a706:	aa 24       	eor	r10, r10
    a708:	a3 94       	inc	r10
    a70a:	19 c0       	rjmp	.+50     	; 0xa73e <dir_remove+0x6a>
    a70c:	ce 01       	movw	r24, r28
    a70e:	80 db       	rcall	.-2304   	; 0x9e10 <dir_sdi>
    a710:	00 97       	sbiw	r24, 0x00	; 0
    a712:	19 f5       	brne	.+70     	; 0xa75a <dir_remove+0x86>
    a714:	f6 cf       	rjmp	.-20     	; 0xa702 <dir_remove+0x2e>
    a716:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a718:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a71a:	b0 82       	st	Z, r11
    a71c:	f8 01       	movw	r30, r16
    a71e:	a3 82       	std	Z+3, r10	; 0x03
    a720:	4e 85       	ldd	r20, Y+14	; 0x0e
    a722:	5f 85       	ldd	r21, Y+15	; 0x0f
    a724:	68 89       	ldd	r22, Y+16	; 0x10
    a726:	79 89       	ldd	r23, Y+17	; 0x11
    a728:	4c 15       	cp	r20, r12
    a72a:	5d 05       	cpc	r21, r13
    a72c:	6e 05       	cpc	r22, r14
    a72e:	7f 05       	cpc	r23, r15
    a730:	a0 f4       	brcc	.+40     	; 0xa75a <dir_remove+0x86>
    a732:	60 e0       	ldi	r22, 0x00	; 0
    a734:	70 e0       	ldi	r23, 0x00	; 0
    a736:	ce 01       	movw	r24, r28
    a738:	e3 dd       	rcall	.-1082   	; 0xa300 <dir_next>
    a73a:	00 97       	sbiw	r24, 0x00	; 0
    a73c:	49 f4       	brne	.+18     	; 0xa750 <dir_remove+0x7c>
    a73e:	4e 89       	ldd	r20, Y+22	; 0x16
    a740:	5f 89       	ldd	r21, Y+23	; 0x17
    a742:	68 8d       	ldd	r22, Y+24	; 0x18
    a744:	79 8d       	ldd	r23, Y+25	; 0x19
    a746:	c8 01       	movw	r24, r16
    a748:	0e 94 84 4a 	call	0x9508	; 0x9508 <move_window>
    a74c:	00 97       	sbiw	r24, 0x00	; 0
    a74e:	19 f3       	breq	.-58     	; 0xa716 <dir_remove+0x42>
    a750:	84 30       	cpi	r24, 0x04	; 4
    a752:	91 05       	cpc	r25, r1
    a754:	11 f4       	brne	.+4      	; 0xa75a <dir_remove+0x86>
    a756:	82 e0       	ldi	r24, 0x02	; 2
    a758:	90 e0       	ldi	r25, 0x00	; 0
    a75a:	cd b7       	in	r28, 0x3d	; 61
    a75c:	de b7       	in	r29, 0x3e	; 62
    a75e:	ea e0       	ldi	r30, 0x0A	; 10
    a760:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__epilogue_restores__+0x10>

0000a764 <dir_find>:
    a764:	ac e0       	ldi	r26, 0x0C	; 12
    a766:	b0 e0       	ldi	r27, 0x00	; 0
    a768:	e8 eb       	ldi	r30, 0xB8	; 184
    a76a:	f3 e5       	ldi	r31, 0x53	; 83
    a76c:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
    a770:	9c 87       	std	Y+12, r25	; 0x0c
    a772:	8b 87       	std	Y+11, r24	; 0x0b
    a774:	fc 01       	movw	r30, r24
    a776:	01 90       	ld	r0, Z+
    a778:	f0 81       	ld	r31, Z
    a77a:	e0 2d       	mov	r30, r0
    a77c:	fc 83       	std	Y+4, r31	; 0x04
    a77e:	eb 83       	std	Y+3, r30	; 0x03
    a780:	40 e0       	ldi	r20, 0x00	; 0
    a782:	50 e0       	ldi	r21, 0x00	; 0
    a784:	ba 01       	movw	r22, r20
    a786:	44 db       	rcall	.-2424   	; 0x9e10 <dir_sdi>
    a788:	00 97       	sbiw	r24, 0x00	; 0
    a78a:	09 f0       	breq	.+2      	; 0xa78e <dir_find+0x2a>
    a78c:	e7 c0       	rjmp	.+462    	; 0xa95c <dir_find+0x1f8>
    a78e:	8f ef       	ldi	r24, 0xFF	; 255
    a790:	9f ef       	ldi	r25, 0xFF	; 255
    a792:	dc 01       	movw	r26, r24
    a794:	eb 85       	ldd	r30, Y+11	; 0x0b
    a796:	fc 85       	ldd	r31, Y+12	; 0x0c
    a798:	80 a7       	std	Z+40, r24	; 0x28
    a79a:	91 a7       	std	Z+41, r25	; 0x29
    a79c:	a2 a7       	std	Z+42, r26	; 0x2a
    a79e:	b3 a7       	std	Z+43, r27	; 0x2b
    a7a0:	0f ef       	ldi	r16, 0xFF	; 255
    a7a2:	1f ef       	ldi	r17, 0xFF	; 255
    a7a4:	44 24       	eor	r4, r4
    a7a6:	4a 94       	dec	r4
    a7a8:	54 2c       	mov	r5, r4
    a7aa:	32 01       	movw	r6, r4
    a7ac:	7c 96       	adiw	r30, 0x1c	; 28
    a7ae:	fa 87       	std	Y+10, r31	; 0x0a
    a7b0:	e9 87       	std	Y+9, r30	; 0x09
    a7b2:	eb 85       	ldd	r30, Y+11	; 0x0b
    a7b4:	fc 85       	ldd	r31, Y+12	; 0x0c
    a7b6:	46 89       	ldd	r20, Z+22	; 0x16
    a7b8:	57 89       	ldd	r21, Z+23	; 0x17
    a7ba:	60 8d       	ldd	r22, Z+24	; 0x18
    a7bc:	71 8d       	ldd	r23, Z+25	; 0x19
    a7be:	8b 81       	ldd	r24, Y+3	; 0x03
    a7c0:	9c 81       	ldd	r25, Y+4	; 0x04
    a7c2:	0e 94 84 4a 	call	0x9508	; 0x9508 <move_window>
    a7c6:	00 97       	sbiw	r24, 0x00	; 0
    a7c8:	09 f0       	breq	.+2      	; 0xa7cc <dir_find+0x68>
    a7ca:	c8 c0       	rjmp	.+400    	; 0xa95c <dir_find+0x1f8>
    a7cc:	eb 85       	ldd	r30, Y+11	; 0x0b
    a7ce:	fc 85       	ldd	r31, Y+12	; 0x0c
    a7d0:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a7d2:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a7d4:	f7 01       	movw	r30, r14
    a7d6:	d0 80       	ld	r13, Z
    a7d8:	dd 20       	and	r13, r13
    a7da:	09 f4       	brne	.+2      	; 0xa7de <dir_find+0x7a>
    a7dc:	c1 c0       	rjmp	.+386    	; 0xa960 <dir_find+0x1fc>
    a7de:	93 85       	ldd	r25, Z+11	; 0x0b
    a7e0:	89 2f       	mov	r24, r25
    a7e2:	8f 73       	andi	r24, 0x3F	; 63
    a7e4:	eb 85       	ldd	r30, Y+11	; 0x0b
    a7e6:	fc 85       	ldd	r31, Y+12	; 0x0c
    a7e8:	84 83       	std	Z+4, r24	; 0x04
    a7ea:	f5 ee       	ldi	r31, 0xE5	; 229
    a7ec:	df 16       	cp	r13, r31
    a7ee:	09 f4       	brne	.+2      	; 0xa7f2 <dir_find+0x8e>
    a7f0:	a6 c0       	rjmp	.+332    	; 0xa93e <dir_find+0x1da>
    a7f2:	93 ff       	sbrs	r25, 3
    a7f4:	04 c0       	rjmp	.+8      	; 0xa7fe <dir_find+0x9a>
    a7f6:	8f 30       	cpi	r24, 0x0F	; 15
    a7f8:	09 f0       	breq	.+2      	; 0xa7fc <dir_find+0x98>
    a7fa:	a1 c0       	rjmp	.+322    	; 0xa93e <dir_find+0x1da>
    a7fc:	03 c0       	rjmp	.+6      	; 0xa804 <dir_find+0xa0>
    a7fe:	8f 30       	cpi	r24, 0x0F	; 15
    a800:	09 f0       	breq	.+2      	; 0xa804 <dir_find+0xa0>
    a802:	88 c0       	rjmp	.+272    	; 0xa914 <dir_find+0x1b0>
    a804:	eb 85       	ldd	r30, Y+11	; 0x0b
    a806:	fc 85       	ldd	r31, Y+12	; 0x0c
    a808:	87 a1       	ldd	r24, Z+39	; 0x27
    a80a:	86 fd       	sbrc	r24, 6
    a80c:	9f c0       	rjmp	.+318    	; 0xa94c <dir_find+0x1e8>
    a80e:	d6 fe       	sbrs	r13, 6
    a810:	10 c0       	rjmp	.+32     	; 0xa832 <dir_find+0xce>
    a812:	f7 01       	movw	r30, r14
    a814:	05 85       	ldd	r16, Z+13	; 0x0d
    a816:	fd 2d       	mov	r31, r13
    a818:	ff 7b       	andi	r31, 0xBF	; 191
    a81a:	df 2e       	mov	r13, r31
    a81c:	eb 85       	ldd	r30, Y+11	; 0x0b
    a81e:	fc 85       	ldd	r31, Y+12	; 0x0c
    a820:	86 85       	ldd	r24, Z+14	; 0x0e
    a822:	97 85       	ldd	r25, Z+15	; 0x0f
    a824:	a0 89       	ldd	r26, Z+16	; 0x10
    a826:	b1 89       	ldd	r27, Z+17	; 0x11
    a828:	80 a7       	std	Z+40, r24	; 0x28
    a82a:	91 a7       	std	Z+41, r25	; 0x29
    a82c:	a2 a7       	std	Z+42, r26	; 0x2a
    a82e:	b3 a7       	std	Z+43, r27	; 0x2b
    a830:	02 c0       	rjmp	.+4      	; 0xa836 <dir_find+0xd2>
    a832:	1d 11       	cpse	r17, r13
    a834:	8a c0       	rjmp	.+276    	; 0xa94a <dir_find+0x1e6>
    a836:	f7 01       	movw	r30, r14
    a838:	c5 84       	ldd	r12, Z+13	; 0x0d
    a83a:	c0 12       	cpse	r12, r16
    a83c:	86 c0       	rjmp	.+268    	; 0xa94a <dir_find+0x1e6>
    a83e:	82 8d       	ldd	r24, Z+26	; 0x1a
    a840:	93 8d       	ldd	r25, Z+27	; 0x1b
    a842:	89 2b       	or	r24, r25
    a844:	09 f0       	breq	.+2      	; 0xa848 <dir_find+0xe4>
    a846:	91 c0       	rjmp	.+290    	; 0xa96a <dir_find+0x206>
    a848:	eb 81       	ldd	r30, Y+3	; 0x03
    a84a:	fc 81       	ldd	r31, Y+4	; 0x04
    a84c:	03 84       	ldd	r0, Z+11	; 0x0b
    a84e:	f4 85       	ldd	r31, Z+12	; 0x0c
    a850:	e0 2d       	mov	r30, r0
    a852:	fe 83       	std	Y+6, r31	; 0x06
    a854:	ed 83       	std	Y+5, r30	; 0x05
    a856:	f7 01       	movw	r30, r14
    a858:	80 81       	ld	r24, Z
    a85a:	8f 73       	andi	r24, 0x3F	; 63
    a85c:	90 e0       	ldi	r25, 0x00	; 0
    a85e:	01 97       	sbiw	r24, 0x01	; 1
    a860:	fd e0       	ldi	r31, 0x0D	; 13
    a862:	f8 9f       	mul	r31, r24
    a864:	80 01       	movw	r16, r0
    a866:	f9 9f       	mul	r31, r25
    a868:	10 0d       	add	r17, r0
    a86a:	11 24       	eor	r1, r1
    a86c:	2b ee       	ldi	r18, 0xEB	; 235
    a86e:	34 e0       	ldi	r19, 0x04	; 4
    a870:	3a 83       	std	Y+2, r19	; 0x02
    a872:	29 83       	std	Y+1, r18	; 0x01
    a874:	81 e0       	ldi	r24, 0x01	; 1
    a876:	90 e0       	ldi	r25, 0x00	; 0
    a878:	e9 81       	ldd	r30, Y+1	; 0x01
    a87a:	fa 81       	ldd	r31, Y+2	; 0x02
    a87c:	21 91       	ld	r18, Z+
    a87e:	fa 83       	std	Y+2, r31	; 0x02
    a880:	e9 83       	std	Y+1, r30	; 0x01
    a882:	f7 01       	movw	r30, r14
    a884:	e2 0f       	add	r30, r18
    a886:	f1 1d       	adc	r31, r1
    a888:	20 80       	ld	r2, Z
    a88a:	31 80       	ldd	r3, Z+1	; 0x01
    a88c:	00 97       	sbiw	r24, 0x00	; 0
    a88e:	39 f1       	breq	.+78     	; 0xa8de <dir_find+0x17a>
    a890:	0f 3f       	cpi	r16, 0xFF	; 255
    a892:	11 05       	cpc	r17, r1
    a894:	11 f0       	breq	.+4      	; 0xa89a <dir_find+0x136>
    a896:	08 f0       	brcs	.+2      	; 0xa89a <dir_find+0x136>
    a898:	68 c0       	rjmp	.+208    	; 0xa96a <dir_find+0x206>
    a89a:	b1 01       	movw	r22, r2
    a89c:	80 e0       	ldi	r24, 0x00	; 0
    a89e:	90 e0       	ldi	r25, 0x00	; 0
    a8a0:	0e 94 5f 68 	call	0xd0be	; 0xd0be <ff_wtoupper>
    a8a4:	4b 01       	movw	r8, r22
    a8a6:	5c 01       	movw	r10, r24
    a8a8:	98 01       	movw	r18, r16
    a8aa:	2f 5f       	subi	r18, 0xFF	; 255
    a8ac:	3f 4f       	sbci	r19, 0xFF	; 255
    a8ae:	38 87       	std	Y+8, r19	; 0x08
    a8b0:	2f 83       	std	Y+7, r18	; 0x07
    a8b2:	00 0f       	add	r16, r16
    a8b4:	11 1f       	adc	r17, r17
    a8b6:	ed 81       	ldd	r30, Y+5	; 0x05
    a8b8:	fe 81       	ldd	r31, Y+6	; 0x06
    a8ba:	e0 0f       	add	r30, r16
    a8bc:	f1 1f       	adc	r31, r17
    a8be:	60 81       	ld	r22, Z
    a8c0:	71 81       	ldd	r23, Z+1	; 0x01
    a8c2:	80 e0       	ldi	r24, 0x00	; 0
    a8c4:	90 e0       	ldi	r25, 0x00	; 0
    a8c6:	0e 94 5f 68 	call	0xd0be	; 0xd0be <ff_wtoupper>
    a8ca:	86 16       	cp	r8, r22
    a8cc:	97 06       	cpc	r9, r23
    a8ce:	a8 06       	cpc	r10, r24
    a8d0:	b9 06       	cpc	r11, r25
    a8d2:	09 f0       	breq	.+2      	; 0xa8d6 <dir_find+0x172>
    a8d4:	4a c0       	rjmp	.+148    	; 0xa96a <dir_find+0x206>
    a8d6:	c1 01       	movw	r24, r2
    a8d8:	0f 81       	ldd	r16, Y+7	; 0x07
    a8da:	18 85       	ldd	r17, Y+8	; 0x08
    a8dc:	05 c0       	rjmp	.+10     	; 0xa8e8 <dir_find+0x184>
    a8de:	3f ef       	ldi	r19, 0xFF	; 255
    a8e0:	23 16       	cp	r2, r19
    a8e2:	33 06       	cpc	r3, r19
    a8e4:	09 f0       	breq	.+2      	; 0xa8e8 <dir_find+0x184>
    a8e6:	41 c0       	rjmp	.+130    	; 0xa96a <dir_find+0x206>
    a8e8:	e9 81       	ldd	r30, Y+1	; 0x01
    a8ea:	fa 81       	ldd	r31, Y+2	; 0x02
    a8ec:	e8 5f       	subi	r30, 0xF8	; 248
    a8ee:	f4 40       	sbci	r31, 0x04	; 4
    a8f0:	19 f6       	brne	.-122    	; 0xa878 <dir_find+0x114>
    a8f2:	f7 01       	movw	r30, r14
    a8f4:	20 81       	ld	r18, Z
    a8f6:	26 ff       	sbrs	r18, 6
    a8f8:	3a c0       	rjmp	.+116    	; 0xa96e <dir_find+0x20a>
    a8fa:	89 2b       	or	r24, r25
    a8fc:	c1 f1       	breq	.+112    	; 0xa96e <dir_find+0x20a>
    a8fe:	00 0f       	add	r16, r16
    a900:	11 1f       	adc	r17, r17
    a902:	ed 81       	ldd	r30, Y+5	; 0x05
    a904:	fe 81       	ldd	r31, Y+6	; 0x06
    a906:	e0 0f       	add	r30, r16
    a908:	f1 1f       	adc	r31, r17
    a90a:	80 81       	ld	r24, Z
    a90c:	91 81       	ldd	r25, Z+1	; 0x01
    a90e:	89 2b       	or	r24, r25
    a910:	71 f1       	breq	.+92     	; 0xa96e <dir_find+0x20a>
    a912:	2b c0       	rjmp	.+86     	; 0xa96a <dir_find+0x206>
    a914:	11 11       	cpse	r17, r1
    a916:	05 c0       	rjmp	.+10     	; 0xa922 <dir_find+0x1be>
    a918:	c7 01       	movw	r24, r14
    a91a:	0e 94 c6 46 	call	0x8d8c	; 0x8d8c <sum_sfn>
    a91e:	08 17       	cp	r16, r24
    a920:	09 f1       	breq	.+66     	; 0xa964 <dir_find+0x200>
    a922:	eb 85       	ldd	r30, Y+11	; 0x0b
    a924:	fc 85       	ldd	r31, Y+12	; 0x0c
    a926:	87 a1       	ldd	r24, Z+39	; 0x27
    a928:	80 fd       	sbrc	r24, 0
    a92a:	09 c0       	rjmp	.+18     	; 0xa93e <dir_find+0x1da>
    a92c:	4b e0       	ldi	r20, 0x0B	; 11
    a92e:	50 e0       	ldi	r21, 0x00	; 0
    a930:	69 85       	ldd	r22, Y+9	; 0x09
    a932:	7a 85       	ldd	r23, Y+10	; 0x0a
    a934:	c7 01       	movw	r24, r14
    a936:	0e 94 cd 45 	call	0x8b9a	; 0x8b9a <mem_cmp>
    a93a:	89 2b       	or	r24, r25
    a93c:	99 f0       	breq	.+38     	; 0xa964 <dir_find+0x200>
    a93e:	eb 85       	ldd	r30, Y+11	; 0x0b
    a940:	fc 85       	ldd	r31, Y+12	; 0x0c
    a942:	40 a6       	std	Z+40, r4	; 0x28
    a944:	51 a6       	std	Z+41, r5	; 0x29
    a946:	62 a6       	std	Z+42, r6	; 0x2a
    a948:	73 a6       	std	Z+43, r7	; 0x2b
    a94a:	1f ef       	ldi	r17, 0xFF	; 255
    a94c:	60 e0       	ldi	r22, 0x00	; 0
    a94e:	70 e0       	ldi	r23, 0x00	; 0
    a950:	8b 85       	ldd	r24, Y+11	; 0x0b
    a952:	9c 85       	ldd	r25, Y+12	; 0x0c
    a954:	d5 dc       	rcall	.-1622   	; 0xa300 <dir_next>
    a956:	00 97       	sbiw	r24, 0x00	; 0
    a958:	09 f4       	brne	.+2      	; 0xa95c <dir_find+0x1f8>
    a95a:	2b cf       	rjmp	.-426    	; 0xa7b2 <dir_find+0x4e>
    a95c:	28 2f       	mov	r18, r24
    a95e:	0b c0       	rjmp	.+22     	; 0xa976 <dir_find+0x212>
    a960:	24 e0       	ldi	r18, 0x04	; 4
    a962:	01 c0       	rjmp	.+2      	; 0xa966 <dir_find+0x202>
    a964:	20 e0       	ldi	r18, 0x00	; 0
    a966:	90 e0       	ldi	r25, 0x00	; 0
    a968:	06 c0       	rjmp	.+12     	; 0xa976 <dir_find+0x212>
    a96a:	0c 2d       	mov	r16, r12
    a96c:	ee cf       	rjmp	.-36     	; 0xa94a <dir_find+0x1e6>
    a96e:	1f ef       	ldi	r17, 0xFF	; 255
    a970:	1d 0d       	add	r17, r13
    a972:	0c 2d       	mov	r16, r12
    a974:	eb cf       	rjmp	.-42     	; 0xa94c <dir_find+0x1e8>
    a976:	82 2f       	mov	r24, r18
    a978:	2c 96       	adiw	r28, 0x0c	; 12
    a97a:	e2 e1       	ldi	r30, 0x12	; 18
    a97c:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

0000a980 <dir_register>:
    a980:	a6 e1       	ldi	r26, 0x16	; 22
    a982:	b0 e0       	ldi	r27, 0x00	; 0
    a984:	e6 ec       	ldi	r30, 0xC6	; 198
    a986:	f4 e5       	ldi	r31, 0x54	; 84
    a988:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
    a98c:	fc 01       	movw	r30, r24
    a98e:	27 a1       	ldd	r18, Z+39	; 0x27
    a990:	20 7a       	andi	r18, 0xA0	; 160
    a992:	09 f0       	breq	.+2      	; 0xa996 <dir_register+0x16>
    a994:	53 c1       	rjmp	.+678    	; 0xac3c <dir_register+0x2bc>
    a996:	c0 80       	ld	r12, Z
    a998:	d1 80       	ldd	r13, Z+1	; 0x01
    a99a:	f6 01       	movw	r30, r12
    a99c:	a3 85       	ldd	r26, Z+11	; 0x0b
    a99e:	b4 85       	ldd	r27, Z+12	; 0x0c
    a9a0:	81 2c       	mov	r8, r1
    a9a2:	91 2c       	mov	r9, r1
    a9a4:	2d 91       	ld	r18, X+
    a9a6:	3d 91       	ld	r19, X+
    a9a8:	23 2b       	or	r18, r19
    a9aa:	21 f0       	breq	.+8      	; 0xa9b4 <dir_register+0x34>
    a9ac:	ff ef       	ldi	r31, 0xFF	; 255
    a9ae:	8f 1a       	sub	r8, r31
    a9b0:	9f 0a       	sbc	r9, r31
    a9b2:	f8 cf       	rjmp	.-16     	; 0xa9a4 <dir_register+0x24>
    a9b4:	8c 01       	movw	r16, r24
    a9b6:	5c 01       	movw	r10, r24
    a9b8:	2c e1       	ldi	r18, 0x1C	; 28
    a9ba:	a2 0e       	add	r10, r18
    a9bc:	b1 1c       	adc	r11, r1
    a9be:	4c e0       	ldi	r20, 0x0C	; 12
    a9c0:	50 e0       	ldi	r21, 0x00	; 0
    a9c2:	b5 01       	movw	r22, r10
    a9c4:	ce 01       	movw	r24, r28
    a9c6:	01 96       	adiw	r24, 0x01	; 1
    a9c8:	0e 94 2d 47 	call	0x8e5a	; 0x8e5a <mem_cpy.part.0>
    a9cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    a9ce:	80 ff       	sbrs	r24, 0
    a9d0:	94 c0       	rjmp	.+296    	; 0xaafa <dir_register+0x17a>
    a9d2:	80 e4       	ldi	r24, 0x40	; 64
    a9d4:	f8 01       	movw	r30, r16
    a9d6:	87 a3       	std	Z+39, r24	; 0x27
    a9d8:	41 2c       	mov	r4, r1
    a9da:	51 2c       	mov	r5, r1
    a9dc:	32 01       	movw	r6, r4
    a9de:	43 94       	inc	r4
    a9e0:	72 01       	movw	r14, r4
    a9e2:	f6 01       	movw	r30, r12
    a9e4:	23 84       	ldd	r2, Z+11	; 0x0b
    a9e6:	34 84       	ldd	r3, Z+12	; 0x0c
    a9e8:	4b e0       	ldi	r20, 0x0B	; 11
    a9ea:	50 e0       	ldi	r21, 0x00	; 0
    a9ec:	be 01       	movw	r22, r28
    a9ee:	6f 5f       	subi	r22, 0xFF	; 255
    a9f0:	7f 4f       	sbci	r23, 0xFF	; 255
    a9f2:	c5 01       	movw	r24, r10
    a9f4:	0e 94 2d 47 	call	0x8e5a	; 0x8e5a <mem_cpy.part.0>
    a9f8:	f6 e0       	ldi	r31, 0x06	; 6
    a9fa:	4f 16       	cp	r4, r31
    a9fc:	51 04       	cpc	r5, r1
    a9fe:	18 f1       	brcs	.+70     	; 0xaa46 <dir_register+0xc6>
    aa00:	f1 01       	movw	r30, r2
    aa02:	b3 01       	movw	r22, r6
    aa04:	a2 01       	movw	r20, r4
    aa06:	81 91       	ld	r24, Z+
    aa08:	91 91       	ld	r25, Z+
    aa0a:	00 97       	sbiw	r24, 0x00	; 0
    aa0c:	d9 f0       	breq	.+54     	; 0xaa44 <dir_register+0xc4>
    aa0e:	20 e1       	ldi	r18, 0x10	; 16
    aa10:	30 e0       	ldi	r19, 0x00	; 0
    aa12:	44 0f       	add	r20, r20
    aa14:	55 1f       	adc	r21, r21
    aa16:	66 1f       	adc	r22, r22
    aa18:	77 1f       	adc	r23, r23
    aa1a:	dc 01       	movw	r26, r24
    aa1c:	a1 70       	andi	r26, 0x01	; 1
    aa1e:	bb 27       	eor	r27, r27
    aa20:	4a 0f       	add	r20, r26
    aa22:	5b 1f       	adc	r21, r27
    aa24:	61 1d       	adc	r22, r1
    aa26:	71 1d       	adc	r23, r1
    aa28:	96 95       	lsr	r25
    aa2a:	87 95       	ror	r24
    aa2c:	60 ff       	sbrs	r22, 0
    aa2e:	06 c0       	rjmp	.+12     	; 0xaa3c <dir_register+0xbc>
    aa30:	a1 e2       	ldi	r26, 0x21	; 33
    aa32:	4a 27       	eor	r20, r26
    aa34:	a0 e1       	ldi	r26, 0x10	; 16
    aa36:	5a 27       	eor	r21, r26
    aa38:	a1 e0       	ldi	r26, 0x01	; 1
    aa3a:	6a 27       	eor	r22, r26
    aa3c:	21 50       	subi	r18, 0x01	; 1
    aa3e:	31 09       	sbc	r19, r1
    aa40:	41 f7       	brne	.-48     	; 0xaa12 <dir_register+0x92>
    aa42:	e1 cf       	rjmp	.-62     	; 0xaa06 <dir_register+0x86>
    aa44:	7a 01       	movw	r14, r20
    aa46:	fe 01       	movw	r30, r28
    aa48:	75 96       	adiw	r30, 0x15	; 21
    aa4a:	27 e0       	ldi	r18, 0x07	; 7
    aa4c:	30 e0       	ldi	r19, 0x00	; 0
    aa4e:	9e 2d       	mov	r25, r14
    aa50:	9f 70       	andi	r25, 0x0F	; 15
    aa52:	80 e3       	ldi	r24, 0x30	; 48
    aa54:	89 0f       	add	r24, r25
    aa56:	8a 33       	cpi	r24, 0x3A	; 58
    aa58:	10 f0       	brcs	.+4      	; 0xaa5e <dir_register+0xde>
    aa5a:	87 e3       	ldi	r24, 0x37	; 55
    aa5c:	89 0f       	add	r24, r25
    aa5e:	21 50       	subi	r18, 0x01	; 1
    aa60:	31 09       	sbc	r19, r1
    aa62:	82 93       	st	-Z, r24
    aa64:	a4 e0       	ldi	r26, 0x04	; 4
    aa66:	f6 94       	lsr	r15
    aa68:	e7 94       	ror	r14
    aa6a:	aa 95       	dec	r26
    aa6c:	e1 f7       	brne	.-8      	; 0xaa66 <dir_register+0xe6>
    aa6e:	e1 14       	cp	r14, r1
    aa70:	f1 04       	cpc	r15, r1
    aa72:	69 f7       	brne	.-38     	; 0xaa4e <dir_register+0xce>
    aa74:	ed e0       	ldi	r30, 0x0D	; 13
    aa76:	f0 e0       	ldi	r31, 0x00	; 0
    aa78:	ec 0f       	add	r30, r28
    aa7a:	fd 1f       	adc	r31, r29
    aa7c:	e2 0f       	add	r30, r18
    aa7e:	f3 1f       	adc	r31, r19
    aa80:	4e e7       	ldi	r20, 0x7E	; 126
    aa82:	40 83       	st	Z, r20
    aa84:	f5 01       	movw	r30, r10
    aa86:	80 e0       	ldi	r24, 0x00	; 0
    aa88:	90 e0       	ldi	r25, 0x00	; 0
    aa8a:	28 17       	cp	r18, r24
    aa8c:	39 07       	cpc	r19, r25
    aa8e:	29 f0       	breq	.+10     	; 0xaa9a <dir_register+0x11a>
    aa90:	41 91       	ld	r20, Z+
    aa92:	40 32       	cpi	r20, 0x20	; 32
    aa94:	11 f0       	breq	.+4      	; 0xaa9a <dir_register+0x11a>
    aa96:	01 96       	adiw	r24, 0x01	; 1
    aa98:	f8 cf       	rjmp	.-16     	; 0xaa8a <dir_register+0x10a>
    aa9a:	f5 01       	movw	r30, r10
    aa9c:	e8 0f       	add	r30, r24
    aa9e:	f9 1f       	adc	r31, r25
    aaa0:	28 30       	cpi	r18, 0x08	; 8
    aaa2:	31 05       	cpc	r19, r1
    aaa4:	50 f4       	brcc	.+20     	; 0xaaba <dir_register+0x13a>
    aaa6:	ad e0       	ldi	r26, 0x0D	; 13
    aaa8:	b0 e0       	ldi	r27, 0x00	; 0
    aaaa:	ac 0f       	add	r26, r28
    aaac:	bd 1f       	adc	r27, r29
    aaae:	a2 0f       	add	r26, r18
    aab0:	b3 1f       	adc	r27, r19
    aab2:	8c 91       	ld	r24, X
    aab4:	2f 5f       	subi	r18, 0xFF	; 255
    aab6:	3f 4f       	sbci	r19, 0xFF	; 255
    aab8:	01 c0       	rjmp	.+2      	; 0xaabc <dir_register+0x13c>
    aaba:	80 e2       	ldi	r24, 0x20	; 32
    aabc:	81 93       	st	Z+, r24
    aabe:	cf 01       	movw	r24, r30
    aac0:	8a 19       	sub	r24, r10
    aac2:	9b 09       	sbc	r25, r11
    aac4:	08 97       	sbiw	r24, 0x08	; 8
    aac6:	60 f3       	brcs	.-40     	; 0xaaa0 <dir_register+0x120>
    aac8:	c8 01       	movw	r24, r16
    aaca:	4c de       	rcall	.-872    	; 0xa764 <dir_find>
    aacc:	00 97       	sbiw	r24, 0x00	; 0
    aace:	71 f4       	brne	.+28     	; 0xaaec <dir_register+0x16c>
    aad0:	8f ef       	ldi	r24, 0xFF	; 255
    aad2:	48 1a       	sub	r4, r24
    aad4:	58 0a       	sbc	r5, r24
    aad6:	68 0a       	sbc	r6, r24
    aad8:	78 0a       	sbc	r7, r24
    aada:	94 e6       	ldi	r25, 0x64	; 100
    aadc:	49 16       	cp	r4, r25
    aade:	51 04       	cpc	r5, r1
    aae0:	61 04       	cpc	r6, r1
    aae2:	71 04       	cpc	r7, r1
    aae4:	09 f0       	breq	.+2      	; 0xaae8 <dir_register+0x168>
    aae6:	7c cf       	rjmp	.-264    	; 0xa9e0 <dir_register+0x60>
    aae8:	27 e0       	ldi	r18, 0x07	; 7
    aaea:	a9 c0       	rjmp	.+338    	; 0xac3e <dir_register+0x2be>
    aaec:	84 30       	cpi	r24, 0x04	; 4
    aaee:	91 05       	cpc	r25, r1
    aaf0:	09 f0       	breq	.+2      	; 0xaaf4 <dir_register+0x174>
    aaf2:	ce c0       	rjmp	.+412    	; 0xac90 <dir_register+0x310>
    aaf4:	8c 85       	ldd	r24, Y+12	; 0x0c
    aaf6:	f8 01       	movw	r30, r16
    aaf8:	87 a3       	std	Z+39, r24	; 0x27
    aafa:	8c 85       	ldd	r24, Y+12	; 0x0c
    aafc:	81 ff       	sbrs	r24, 1
    aafe:	0b c0       	rjmp	.+22     	; 0xab16 <dir_register+0x196>
    ab00:	c4 01       	movw	r24, r8
    ab02:	0c 96       	adiw	r24, 0x0c	; 12
    ab04:	6d e0       	ldi	r22, 0x0D	; 13
    ab06:	70 e0       	ldi	r23, 0x00	; 0
    ab08:	0e 94 aa e2 	call	0x1c554	; 0x1c554 <__udivmodhi4>
    ab0c:	7b 01       	movw	r14, r22
    ab0e:	ff ef       	ldi	r31, 0xFF	; 255
    ab10:	ef 1a       	sub	r14, r31
    ab12:	ff 0a       	sbc	r15, r31
    ab14:	03 c0       	rjmp	.+6      	; 0xab1c <dir_register+0x19c>
    ab16:	ee 24       	eor	r14, r14
    ab18:	e3 94       	inc	r14
    ab1a:	f1 2c       	mov	r15, r1
    ab1c:	b7 01       	movw	r22, r14
    ab1e:	c8 01       	movw	r24, r16
    ab20:	d7 dc       	rcall	.-1618   	; 0xa4d0 <dir_alloc>
    ab22:	00 97       	sbiw	r24, 0x00	; 0
    ab24:	09 f0       	breq	.+2      	; 0xab28 <dir_register+0x1a8>
    ab26:	b4 c0       	rjmp	.+360    	; 0xac90 <dir_register+0x310>
    ab28:	21 e0       	ldi	r18, 0x01	; 1
    ab2a:	e2 1a       	sub	r14, r18
    ab2c:	f1 08       	sbc	r15, r1
    ab2e:	09 f4       	brne	.+2      	; 0xab32 <dir_register+0x1b2>
    ab30:	88 c0       	rjmp	.+272    	; 0xac42 <dir_register+0x2c2>
    ab32:	f8 01       	movw	r30, r16
    ab34:	46 85       	ldd	r20, Z+14	; 0x0e
    ab36:	57 85       	ldd	r21, Z+15	; 0x0f
    ab38:	60 89       	ldd	r22, Z+16	; 0x10
    ab3a:	71 89       	ldd	r23, Z+17	; 0x11
    ab3c:	c7 01       	movw	r24, r14
    ab3e:	e5 e0       	ldi	r30, 0x05	; 5
    ab40:	88 0f       	add	r24, r24
    ab42:	99 1f       	adc	r25, r25
    ab44:	ea 95       	dec	r30
    ab46:	e1 f7       	brne	.-8      	; 0xab40 <dir_register+0x1c0>
    ab48:	48 1b       	sub	r20, r24
    ab4a:	59 0b       	sbc	r21, r25
    ab4c:	61 09       	sbc	r22, r1
    ab4e:	71 09       	sbc	r23, r1
    ab50:	c8 01       	movw	r24, r16
    ab52:	5e d9       	rcall	.-3396   	; 0x9e10 <dir_sdi>
    ab54:	00 97       	sbiw	r24, 0x00	; 0
    ab56:	09 f0       	breq	.+2      	; 0xab5a <dir_register+0x1da>
    ab58:	9b c0       	rjmp	.+310    	; 0xac90 <dir_register+0x310>
    ab5a:	c5 01       	movw	r24, r10
    ab5c:	0e 94 c6 46 	call	0x8d8c	; 0x8d8c <sum_sfn>
    ab60:	68 2e       	mov	r6, r24
    ab62:	5f e0       	ldi	r21, 0x0F	; 15
    ab64:	35 2e       	mov	r3, r21
    ab66:	6d e0       	ldi	r22, 0x0D	; 13
    ab68:	46 2e       	mov	r4, r22
    ab6a:	78 ef       	ldi	r23, 0xF8	; 248
    ab6c:	87 2e       	mov	r8, r23
    ab6e:	74 e0       	ldi	r23, 0x04	; 4
    ab70:	97 2e       	mov	r9, r23
    ab72:	55 24       	eor	r5, r5
    ab74:	53 94       	inc	r5
    ab76:	f8 01       	movw	r30, r16
    ab78:	46 89       	ldd	r20, Z+22	; 0x16
    ab7a:	57 89       	ldd	r21, Z+23	; 0x17
    ab7c:	60 8d       	ldd	r22, Z+24	; 0x18
    ab7e:	71 8d       	ldd	r23, Z+25	; 0x19
    ab80:	c6 01       	movw	r24, r12
    ab82:	0e 94 84 4a 	call	0x9508	; 0x9508 <move_window>
    ab86:	00 97       	sbiw	r24, 0x00	; 0
    ab88:	09 f0       	breq	.+2      	; 0xab8c <dir_register+0x20c>
    ab8a:	82 c0       	rjmp	.+260    	; 0xac90 <dir_register+0x310>
    ab8c:	f6 01       	movw	r30, r12
    ab8e:	63 85       	ldd	r22, Z+11	; 0x0b
    ab90:	74 85       	ldd	r23, Z+12	; 0x0c
    ab92:	f8 01       	movw	r30, r16
    ab94:	02 8c       	ldd	r0, Z+26	; 0x1a
    ab96:	f3 8d       	ldd	r31, Z+27	; 0x1b
    ab98:	e0 2d       	mov	r30, r0
    ab9a:	fe 8b       	std	Y+22, r31	; 0x16
    ab9c:	ed 8b       	std	Y+21, r30	; 0x15
    ab9e:	7e 2c       	mov	r7, r14
    aba0:	65 86       	std	Z+13, r6	; 0x0d
    aba2:	33 86       	std	Z+11, r3	; 0x0b
    aba4:	14 86       	std	Z+12, r1	; 0x0c
    aba6:	12 8e       	std	Z+26, r1	; 0x1a
    aba8:	13 8e       	std	Z+27, r1	; 0x1b
    abaa:	97 01       	movw	r18, r14
    abac:	33 27       	eor	r19, r19
    abae:	21 50       	subi	r18, 0x01	; 1
    abb0:	31 09       	sbc	r19, r1
    abb2:	42 9e       	mul	r4, r18
    abb4:	c0 01       	movw	r24, r0
    abb6:	43 9e       	mul	r4, r19
    abb8:	90 0d       	add	r25, r0
    abba:	11 24       	eor	r1, r1
    abbc:	ab ee       	ldi	r26, 0xEB	; 235
    abbe:	b4 e0       	ldi	r27, 0x04	; 4
    abc0:	20 e0       	ldi	r18, 0x00	; 0
    abc2:	30 e0       	ldi	r19, 0x00	; 0
    abc4:	2f 3f       	cpi	r18, 0xFF	; 255
    abc6:	ff ef       	ldi	r31, 0xFF	; 255
    abc8:	3f 07       	cpc	r19, r31
    abca:	49 f0       	breq	.+18     	; 0xabde <dir_register+0x25e>
    abcc:	9c 01       	movw	r18, r24
    abce:	22 0f       	add	r18, r18
    abd0:	33 1f       	adc	r19, r19
    abd2:	26 0f       	add	r18, r22
    abd4:	37 1f       	adc	r19, r23
    abd6:	f9 01       	movw	r30, r18
    abd8:	20 81       	ld	r18, Z
    abda:	31 81       	ldd	r19, Z+1	; 0x01
    abdc:	01 96       	adiw	r24, 0x01	; 1
    abde:	4d 91       	ld	r20, X+
    abe0:	ed 89       	ldd	r30, Y+21	; 0x15
    abe2:	fe 89       	ldd	r31, Y+22	; 0x16
    abe4:	e4 0f       	add	r30, r20
    abe6:	f1 1d       	adc	r31, r1
    abe8:	20 83       	st	Z, r18
    abea:	31 83       	std	Z+1, r19	; 0x01
    abec:	21 15       	cp	r18, r1
    abee:	31 05       	cpc	r19, r1
    abf0:	11 f4       	brne	.+4      	; 0xabf6 <dir_register+0x276>
    abf2:	2f ef       	ldi	r18, 0xFF	; 255
    abf4:	3f ef       	ldi	r19, 0xFF	; 255
    abf6:	8a 16       	cp	r8, r26
    abf8:	9b 06       	cpc	r9, r27
    abfa:	21 f7       	brne	.-56     	; 0xabc4 <dir_register+0x244>
    abfc:	2f 3f       	cpi	r18, 0xFF	; 255
    abfe:	3f 4f       	sbci	r19, 0xFF	; 255
    ac00:	49 f0       	breq	.+18     	; 0xac14 <dir_register+0x294>
    ac02:	88 0f       	add	r24, r24
    ac04:	99 1f       	adc	r25, r25
    ac06:	db 01       	movw	r26, r22
    ac08:	a8 0f       	add	r26, r24
    ac0a:	b9 1f       	adc	r27, r25
    ac0c:	8d 91       	ld	r24, X+
    ac0e:	9c 91       	ld	r25, X
    ac10:	89 2b       	or	r24, r25
    ac12:	19 f4       	brne	.+6      	; 0xac1a <dir_register+0x29a>
    ac14:	27 2d       	mov	r18, r7
    ac16:	20 64       	ori	r18, 0x40	; 64
    ac18:	72 2e       	mov	r7, r18
    ac1a:	ed 89       	ldd	r30, Y+21	; 0x15
    ac1c:	fe 89       	ldd	r31, Y+22	; 0x16
    ac1e:	70 82       	st	Z, r7
    ac20:	f6 01       	movw	r30, r12
    ac22:	53 82       	std	Z+3, r5	; 0x03
    ac24:	60 e0       	ldi	r22, 0x00	; 0
    ac26:	70 e0       	ldi	r23, 0x00	; 0
    ac28:	c8 01       	movw	r24, r16
    ac2a:	6a db       	rcall	.-2348   	; 0xa300 <dir_next>
    ac2c:	00 97       	sbiw	r24, 0x00	; 0
    ac2e:	81 f5       	brne	.+96     	; 0xac90 <dir_register+0x310>
    ac30:	f1 e0       	ldi	r31, 0x01	; 1
    ac32:	ef 1a       	sub	r14, r31
    ac34:	f1 08       	sbc	r15, r1
    ac36:	09 f0       	breq	.+2      	; 0xac3a <dir_register+0x2ba>
    ac38:	9e cf       	rjmp	.-196    	; 0xab76 <dir_register+0x1f6>
    ac3a:	03 c0       	rjmp	.+6      	; 0xac42 <dir_register+0x2c2>
    ac3c:	26 e0       	ldi	r18, 0x06	; 6
    ac3e:	90 e0       	ldi	r25, 0x00	; 0
    ac40:	28 c0       	rjmp	.+80     	; 0xac92 <dir_register+0x312>
    ac42:	f8 01       	movw	r30, r16
    ac44:	46 89       	ldd	r20, Z+22	; 0x16
    ac46:	57 89       	ldd	r21, Z+23	; 0x17
    ac48:	60 8d       	ldd	r22, Z+24	; 0x18
    ac4a:	71 8d       	ldd	r23, Z+25	; 0x19
    ac4c:	c6 01       	movw	r24, r12
    ac4e:	0e 94 84 4a 	call	0x9508	; 0x9508 <move_window>
    ac52:	00 97       	sbiw	r24, 0x00	; 0
    ac54:	e9 f4       	brne	.+58     	; 0xac90 <dir_register+0x310>
    ac56:	40 e2       	ldi	r20, 0x20	; 32
    ac58:	50 e0       	ldi	r21, 0x00	; 0
    ac5a:	60 e0       	ldi	r22, 0x00	; 0
    ac5c:	70 e0       	ldi	r23, 0x00	; 0
    ac5e:	f8 01       	movw	r30, r16
    ac60:	82 8d       	ldd	r24, Z+26	; 0x1a
    ac62:	93 8d       	ldd	r25, Z+27	; 0x1b
    ac64:	0e 94 c4 45 	call	0x8b88	; 0x8b88 <mem_set>
    ac68:	4b e0       	ldi	r20, 0x0B	; 11
    ac6a:	50 e0       	ldi	r21, 0x00	; 0
    ac6c:	b5 01       	movw	r22, r10
    ac6e:	f8 01       	movw	r30, r16
    ac70:	82 8d       	ldd	r24, Z+26	; 0x1a
    ac72:	93 8d       	ldd	r25, Z+27	; 0x1b
    ac74:	0e 94 2d 47 	call	0x8e5a	; 0x8e5a <mem_cpy.part.0>
    ac78:	f8 01       	movw	r30, r16
    ac7a:	22 8d       	ldd	r18, Z+26	; 0x1a
    ac7c:	33 8d       	ldd	r19, Z+27	; 0x1b
    ac7e:	87 a1       	ldd	r24, Z+39	; 0x27
    ac80:	88 71       	andi	r24, 0x18	; 24
    ac82:	f9 01       	movw	r30, r18
    ac84:	84 87       	std	Z+12, r24	; 0x0c
    ac86:	81 e0       	ldi	r24, 0x01	; 1
    ac88:	f6 01       	movw	r30, r12
    ac8a:	83 83       	std	Z+3, r24	; 0x03
    ac8c:	20 e0       	ldi	r18, 0x00	; 0
    ac8e:	d7 cf       	rjmp	.-82     	; 0xac3e <dir_register+0x2be>
    ac90:	28 2f       	mov	r18, r24
    ac92:	82 2f       	mov	r24, r18
    ac94:	66 96       	adiw	r28, 0x16	; 22
    ac96:	e2 e1       	ldi	r30, 0x12	; 18
    ac98:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

0000ac9c <follow_path>:
    ac9c:	aa e0       	ldi	r26, 0x0A	; 10
    ac9e:	b0 e0       	ldi	r27, 0x00	; 0
    aca0:	e4 e5       	ldi	r30, 0x54	; 84
    aca2:	f6 e5       	ldi	r31, 0x56	; 86
    aca4:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
    aca8:	7c 01       	movw	r14, r24
    acaa:	3b 01       	movw	r6, r22
    acac:	dc 01       	movw	r26, r24
    acae:	0d 90       	ld	r0, X+
    acb0:	bc 91       	ld	r27, X
    acb2:	a0 2d       	mov	r26, r0
    acb4:	be 83       	std	Y+6, r27	; 0x06
    acb6:	ad 83       	std	Y+5, r26	; 0x05
    acb8:	fb 01       	movw	r30, r22
    acba:	80 81       	ld	r24, Z
    acbc:	8f 32       	cpi	r24, 0x2F	; 47
    acbe:	11 f0       	breq	.+4      	; 0xacc4 <follow_path+0x28>
    acc0:	8c 35       	cpi	r24, 0x5C	; 92
    acc2:	11 f4       	brne	.+4      	; 0xacc8 <follow_path+0x2c>
    acc4:	93 01       	movw	r18, r6
    acc6:	0c c0       	rjmp	.+24     	; 0xace0 <follow_path+0x44>
    acc8:	ed 81       	ldd	r30, Y+5	; 0x05
    acca:	fe 81       	ldd	r31, Y+6	; 0x06
    accc:	85 89       	ldd	r24, Z+21	; 0x15
    acce:	96 89       	ldd	r25, Z+22	; 0x16
    acd0:	a7 89       	ldd	r26, Z+23	; 0x17
    acd2:	b0 8d       	ldd	r27, Z+24	; 0x18
    acd4:	f7 01       	movw	r30, r14
    acd6:	86 83       	std	Z+6, r24	; 0x06
    acd8:	97 83       	std	Z+7, r25	; 0x07
    acda:	a0 87       	std	Z+8, r26	; 0x08
    acdc:	b1 87       	std	Z+9, r27	; 0x09
    acde:	0e c0       	rjmp	.+28     	; 0xacfc <follow_path+0x60>
    ace0:	39 01       	movw	r6, r18
    ace2:	d9 01       	movw	r26, r18
    ace4:	8c 91       	ld	r24, X
    ace6:	2f 5f       	subi	r18, 0xFF	; 255
    ace8:	3f 4f       	sbci	r19, 0xFF	; 255
    acea:	8f 32       	cpi	r24, 0x2F	; 47
    acec:	c9 f3       	breq	.-14     	; 0xace0 <follow_path+0x44>
    acee:	8c 35       	cpi	r24, 0x5C	; 92
    acf0:	b9 f3       	breq	.-18     	; 0xace0 <follow_path+0x44>
    acf2:	f7 01       	movw	r30, r14
    acf4:	16 82       	std	Z+6, r1	; 0x06
    acf6:	17 82       	std	Z+7, r1	; 0x07
    acf8:	10 86       	std	Z+8, r1	; 0x08
    acfa:	11 86       	std	Z+9, r1	; 0x09
    acfc:	d3 01       	movw	r26, r6
    acfe:	8c 91       	ld	r24, X
    ad00:	80 32       	cpi	r24, 0x20	; 32
    ad02:	58 f0       	brcs	.+22     	; 0xad1a <follow_path+0x7e>
    ad04:	f7 01       	movw	r30, r14
    ad06:	7c 96       	adiw	r30, 0x1c	; 28
    ad08:	f8 87       	std	Y+8, r31	; 0x08
    ad0a:	ef 83       	std	Y+7, r30	; 0x07
    ad0c:	2d 81       	ldd	r18, Y+5	; 0x05
    ad0e:	3e 81       	ldd	r19, Y+6	; 0x06
    ad10:	2b 5c       	subi	r18, 0xCB	; 203
    ad12:	3f 4f       	sbci	r19, 0xFF	; 255
    ad14:	3a 87       	std	Y+10, r19	; 0x0a
    ad16:	29 87       	std	Y+9, r18	; 0x09
    ad18:	96 c0       	rjmp	.+300    	; 0xae46 <follow_path+0x1aa>
    ad1a:	80 e8       	ldi	r24, 0x80	; 128
    ad1c:	f7 01       	movw	r30, r14
    ad1e:	87 a3       	std	Z+39, r24	; 0x27
    ad20:	40 e0       	ldi	r20, 0x00	; 0
    ad22:	50 e0       	ldi	r21, 0x00	; 0
    ad24:	ba 01       	movw	r22, r20
    ad26:	c7 01       	movw	r24, r14
    ad28:	73 d8       	rcall	.-3866   	; 0x9e10 <dir_sdi>
    ad2a:	e5 c1       	rjmp	.+970    	; 0xb0f6 <follow_path+0x45a>
    ad2c:	6c 35       	cpi	r22, 0x5C	; 92
    ad2e:	71 05       	cpc	r23, r1
    ad30:	b9 f1       	breq	.+110    	; 0xada0 <follow_path+0x104>
    ad32:	60 38       	cpi	r22, 0x80	; 128
    ad34:	71 05       	cpc	r23, r1
    ad36:	28 f4       	brcc	.+10     	; 0xad42 <follow_path+0xa6>
    ad38:	e7 e2       	ldi	r30, 0x27	; 39
    ad3a:	f4 e0       	ldi	r31, 0x04	; 4
    ad3c:	41 91       	ld	r20, Z+
    ad3e:	41 11       	cpse	r20, r1
    ad40:	8c c0       	rjmp	.+280    	; 0xae5a <follow_path+0x1be>
    ad42:	0f 3f       	cpi	r16, 0xFF	; 255
    ad44:	11 05       	cpc	r17, r1
    ad46:	08 f0       	brcs	.+2      	; 0xad4a <follow_path+0xae>
    ad48:	b9 c1       	rjmp	.+882    	; 0xb0bc <follow_path+0x420>
    ad4a:	f8 01       	movw	r30, r16
    ad4c:	ee 0f       	add	r30, r30
    ad4e:	ff 1f       	adc	r31, r31
    ad50:	ea 0d       	add	r30, r10
    ad52:	fb 1d       	adc	r31, r11
    ad54:	71 83       	std	Z+1, r23	; 0x01
    ad56:	60 83       	st	Z, r22
    ad58:	0f 5f       	subi	r16, 0xFF	; 255
    ad5a:	1f 4f       	sbci	r17, 0xFF	; 255
    ad5c:	ce 01       	movw	r24, r28
    ad5e:	01 96       	adiw	r24, 0x01	; 1
    ad60:	0e 94 dc 45 	call	0x8bb8	; 0x8bb8 <tchar2uni>
    ad64:	6f 3f       	cpi	r22, 0xFF	; 255
    ad66:	bf ef       	ldi	r27, 0xFF	; 255
    ad68:	7b 07       	cpc	r23, r27
    ad6a:	8b 07       	cpc	r24, r27
    ad6c:	9b 07       	cpc	r25, r27
    ad6e:	09 f4       	brne	.+2      	; 0xad72 <follow_path+0xd6>
    ad70:	a5 c1       	rjmp	.+842    	; 0xb0bc <follow_path+0x420>
    ad72:	61 15       	cp	r22, r1
    ad74:	71 05       	cpc	r23, r1
    ad76:	e1 e0       	ldi	r30, 0x01	; 1
    ad78:	8e 07       	cpc	r24, r30
    ad7a:	91 05       	cpc	r25, r1
    ad7c:	48 f0       	brcs	.+18     	; 0xad90 <follow_path+0xf4>
    ad7e:	f8 01       	movw	r30, r16
    ad80:	ee 0f       	add	r30, r30
    ad82:	ff 1f       	adc	r31, r31
    ad84:	ea 0d       	add	r30, r10
    ad86:	fb 1d       	adc	r31, r11
    ad88:	91 83       	std	Z+1, r25	; 0x01
    ad8a:	80 83       	st	Z, r24
    ad8c:	0f 5f       	subi	r16, 0xFF	; 255
    ad8e:	1f 4f       	sbci	r17, 0xFF	; 255
    ad90:	9b 01       	movw	r18, r22
    ad92:	60 32       	cpi	r22, 0x20	; 32
    ad94:	71 05       	cpc	r23, r1
    ad96:	08 f4       	brcc	.+2      	; 0xad9a <follow_path+0xfe>
    ad98:	6a c0       	rjmp	.+212    	; 0xae6e <follow_path+0x1d2>
    ad9a:	6f 32       	cpi	r22, 0x2F	; 47
    ad9c:	71 05       	cpc	r23, r1
    ad9e:	31 f6       	brne	.-116    	; 0xad2c <follow_path+0x90>
    ada0:	e9 81       	ldd	r30, Y+1	; 0x01
    ada2:	fa 81       	ldd	r31, Y+2	; 0x02
    ada4:	80 81       	ld	r24, Z
    ada6:	8f 32       	cpi	r24, 0x2F	; 47
    ada8:	09 f4       	brne	.+2      	; 0xadac <follow_path+0x110>
    adaa:	5d c0       	rjmp	.+186    	; 0xae66 <follow_path+0x1ca>
    adac:	8c 35       	cpi	r24, 0x5C	; 92
    adae:	09 f4       	brne	.+2      	; 0xadb2 <follow_path+0x116>
    adb0:	5a c0       	rjmp	.+180    	; 0xae66 <follow_path+0x1ca>
    adb2:	1b 82       	std	Y+3, r1	; 0x03
    adb4:	69 80       	ldd	r6, Y+1	; 0x01
    adb6:	7a 80       	ldd	r7, Y+2	; 0x02
    adb8:	98 01       	movw	r18, r16
    adba:	22 0f       	add	r18, r18
    adbc:	33 1f       	adc	r19, r19
    adbe:	01 30       	cpi	r16, 0x01	; 1
    adc0:	11 05       	cpc	r17, r1
    adc2:	09 f0       	breq	.+2      	; 0xadc6 <follow_path+0x12a>
    adc4:	57 c0       	rjmp	.+174    	; 0xae74 <follow_path+0x1d8>
    adc6:	d5 01       	movw	r26, r10
    adc8:	8d 91       	ld	r24, X+
    adca:	9c 91       	ld	r25, X
    adcc:	8e 97       	sbiw	r24, 0x2e	; 46
    adce:	09 f0       	breq	.+2      	; 0xadd2 <follow_path+0x136>
    add0:	5c c0       	rjmp	.+184    	; 0xae8a <follow_path+0x1ee>
    add2:	f9 01       	movw	r30, r18
    add4:	ea 0d       	add	r30, r10
    add6:	fb 1d       	adc	r31, r11
    add8:	11 82       	std	Z+1, r1	; 0x01
    adda:	10 82       	st	Z, r1
    addc:	f7 01       	movw	r30, r14
    adde:	7c 96       	adiw	r30, 0x1c	; 28
    ade0:	80 e0       	ldi	r24, 0x00	; 0
    ade2:	90 e0       	ldi	r25, 0x00	; 0
    ade4:	80 17       	cp	r24, r16
    ade6:	91 07       	cpc	r25, r17
    ade8:	08 f0       	brcs	.+2      	; 0xadec <follow_path+0x150>
    adea:	53 c0       	rjmp	.+166    	; 0xae92 <follow_path+0x1f6>
    adec:	2e e2       	ldi	r18, 0x2E	; 46
    adee:	21 93       	st	Z+, r18
    adf0:	01 96       	adiw	r24, 0x01	; 1
    adf2:	8b 30       	cpi	r24, 0x0B	; 11
    adf4:	91 05       	cpc	r25, r1
    adf6:	b1 f7       	brne	.-20     	; 0xade4 <follow_path+0x148>
    adf8:	8b 81       	ldd	r24, Y+3	; 0x03
    adfa:	80 62       	ori	r24, 0x20	; 32
    adfc:	f7 01       	movw	r30, r14
    adfe:	87 a3       	std	Z+39, r24	; 0x27
    ae00:	80 e0       	ldi	r24, 0x00	; 0
    ae02:	90 e0       	ldi	r25, 0x00	; 0
    ae04:	00 97       	sbiw	r24, 0x00	; 0
    ae06:	09 f0       	breq	.+2      	; 0xae0a <follow_path+0x16e>
    ae08:	76 c1       	rjmp	.+748    	; 0xb0f6 <follow_path+0x45a>
    ae0a:	c7 01       	movw	r24, r14
    ae0c:	ab dc       	rcall	.-1706   	; 0xa764 <dir_find>
    ae0e:	f7 01       	movw	r30, r14
    ae10:	27 a1       	ldd	r18, Z+39	; 0x27
    ae12:	00 97       	sbiw	r24, 0x00	; 0
    ae14:	09 f0       	breq	.+2      	; 0xae18 <follow_path+0x17c>
    ae16:	55 c1       	rjmp	.+682    	; 0xb0c2 <follow_path+0x426>
    ae18:	22 fd       	sbrc	r18, 2
    ae1a:	6d c1       	rjmp	.+730    	; 0xb0f6 <follow_path+0x45a>
    ae1c:	f7 01       	movw	r30, r14
    ae1e:	84 81       	ldd	r24, Z+4	; 0x04
    ae20:	84 ff       	sbrs	r24, 4
    ae22:	60 c1       	rjmp	.+704    	; 0xb0e4 <follow_path+0x448>
    ae24:	66 85       	ldd	r22, Z+14	; 0x0e
    ae26:	77 85       	ldd	r23, Z+15	; 0x0f
    ae28:	71 70       	andi	r23, 0x01	; 1
    ae2a:	29 85       	ldd	r18, Y+9	; 0x09
    ae2c:	3a 85       	ldd	r19, Y+10	; 0x0a
    ae2e:	62 0f       	add	r22, r18
    ae30:	73 1f       	adc	r23, r19
    ae32:	ad 81       	ldd	r26, Y+5	; 0x05
    ae34:	be 81       	ldd	r27, Y+6	; 0x06
    ae36:	8c 91       	ld	r24, X
    ae38:	0e 94 f5 48 	call	0x91ea	; 0x91ea <ld_clust.isra.4>
    ae3c:	f7 01       	movw	r30, r14
    ae3e:	66 83       	std	Z+6, r22	; 0x06
    ae40:	77 83       	std	Z+7, r23	; 0x07
    ae42:	80 87       	std	Z+8, r24	; 0x08
    ae44:	91 87       	std	Z+9, r25	; 0x09
    ae46:	7a 82       	std	Y+2, r7	; 0x02
    ae48:	69 82       	std	Y+1, r6	; 0x01
    ae4a:	d7 01       	movw	r26, r14
    ae4c:	ed 91       	ld	r30, X+
    ae4e:	fc 91       	ld	r31, X
    ae50:	a3 84       	ldd	r10, Z+11	; 0x0b
    ae52:	b4 84       	ldd	r11, Z+12	; 0x0c
    ae54:	00 e0       	ldi	r16, 0x00	; 0
    ae56:	10 e0       	ldi	r17, 0x00	; 0
    ae58:	81 cf       	rjmp	.-254    	; 0xad5c <follow_path+0xc0>
    ae5a:	50 e0       	ldi	r21, 0x00	; 0
    ae5c:	24 17       	cp	r18, r20
    ae5e:	35 07       	cpc	r19, r21
    ae60:	09 f0       	breq	.+2      	; 0xae64 <follow_path+0x1c8>
    ae62:	6c cf       	rjmp	.-296    	; 0xad3c <follow_path+0xa0>
    ae64:	2b c1       	rjmp	.+598    	; 0xb0bc <follow_path+0x420>
    ae66:	31 96       	adiw	r30, 0x01	; 1
    ae68:	fa 83       	std	Y+2, r31	; 0x02
    ae6a:	e9 83       	std	Y+1, r30	; 0x01
    ae6c:	99 cf       	rjmp	.-206    	; 0xada0 <follow_path+0x104>
    ae6e:	f4 e0       	ldi	r31, 0x04	; 4
    ae70:	fb 83       	std	Y+3, r31	; 0x03
    ae72:	a0 cf       	rjmp	.-192    	; 0xadb4 <follow_path+0x118>
    ae74:	02 30       	cpi	r16, 0x02	; 2
    ae76:	11 05       	cpc	r17, r1
    ae78:	41 f4       	brne	.+16     	; 0xae8a <follow_path+0x1ee>
    ae7a:	f5 01       	movw	r30, r10
    ae7c:	82 81       	ldd	r24, Z+2	; 0x02
    ae7e:	93 81       	ldd	r25, Z+3	; 0x03
    ae80:	8e 97       	sbiw	r24, 0x2e	; 46
    ae82:	19 f4       	brne	.+6      	; 0xae8a <follow_path+0x1ee>
    ae84:	80 81       	ld	r24, Z
    ae86:	91 81       	ldd	r25, Z+1	; 0x01
    ae88:	a1 cf       	rjmp	.-190    	; 0xadcc <follow_path+0x130>
    ae8a:	f9 01       	movw	r30, r18
    ae8c:	ea 0d       	add	r30, r10
    ae8e:	fb 1d       	adc	r31, r11
    ae90:	09 c0       	rjmp	.+18     	; 0xaea4 <follow_path+0x208>
    ae92:	20 e2       	ldi	r18, 0x20	; 32
    ae94:	ac cf       	rjmp	.-168    	; 0xadee <follow_path+0x152>
    ae96:	92 91       	ld	r25, -Z
    ae98:	82 91       	ld	r24, -Z
    ae9a:	80 32       	cpi	r24, 0x20	; 32
    ae9c:	91 05       	cpc	r25, r1
    ae9e:	31 f4       	brne	.+12     	; 0xaeac <follow_path+0x210>
    aea0:	01 50       	subi	r16, 0x01	; 1
    aea2:	11 09       	sbc	r17, r1
    aea4:	01 15       	cp	r16, r1
    aea6:	11 05       	cpc	r17, r1
    aea8:	b1 f7       	brne	.-20     	; 0xae96 <follow_path+0x1fa>
    aeaa:	02 c0       	rjmp	.+4      	; 0xaeb0 <follow_path+0x214>
    aeac:	8e 97       	sbiw	r24, 0x2e	; 46
    aeae:	c1 f3       	breq	.-16     	; 0xaea0 <follow_path+0x204>
    aeb0:	f8 01       	movw	r30, r16
    aeb2:	ee 0f       	add	r30, r30
    aeb4:	ff 1f       	adc	r31, r31
    aeb6:	ea 0d       	add	r30, r10
    aeb8:	fb 1d       	adc	r31, r11
    aeba:	11 82       	std	Z+1, r1	; 0x01
    aebc:	10 82       	st	Z, r1
    aebe:	01 15       	cp	r16, r1
    aec0:	11 05       	cpc	r17, r1
    aec2:	09 f4       	brne	.+2      	; 0xaec6 <follow_path+0x22a>
    aec4:	fb c0       	rjmp	.+502    	; 0xb0bc <follow_path+0x420>
    aec6:	d5 01       	movw	r26, r10
    aec8:	41 2c       	mov	r4, r1
    aeca:	51 2c       	mov	r5, r1
    aecc:	8d 91       	ld	r24, X+
    aece:	9d 91       	ld	r25, X+
    aed0:	80 32       	cpi	r24, 0x20	; 32
    aed2:	91 05       	cpc	r25, r1
    aed4:	21 f4       	brne	.+8      	; 0xaede <follow_path+0x242>
    aed6:	2f ef       	ldi	r18, 0xFF	; 255
    aed8:	42 1a       	sub	r4, r18
    aeda:	52 0a       	sbc	r5, r18
    aedc:	f7 cf       	rjmp	.-18     	; 0xaecc <follow_path+0x230>
    aede:	41 14       	cp	r4, r1
    aee0:	51 04       	cpc	r5, r1
    aee2:	11 f4       	brne	.+4      	; 0xaee8 <follow_path+0x24c>
    aee4:	8e 97       	sbiw	r24, 0x2e	; 46
    aee6:	39 f4       	brne	.+14     	; 0xaef6 <follow_path+0x25a>
    aee8:	3b 81       	ldd	r19, Y+3	; 0x03
    aeea:	33 60       	ori	r19, 0x03	; 3
    aeec:	3b 83       	std	Y+3, r19	; 0x03
    aeee:	03 c0       	rjmp	.+6      	; 0xaef6 <follow_path+0x25a>
    aef0:	01 50       	subi	r16, 0x01	; 1
    aef2:	11 09       	sbc	r17, r1
    aef4:	21 f0       	breq	.+8      	; 0xaefe <follow_path+0x262>
    aef6:	92 91       	ld	r25, -Z
    aef8:	82 91       	ld	r24, -Z
    aefa:	8e 97       	sbiw	r24, 0x2e	; 46
    aefc:	c9 f7       	brne	.-14     	; 0xaef0 <follow_path+0x254>
    aefe:	4b e0       	ldi	r20, 0x0B	; 11
    af00:	50 e0       	ldi	r21, 0x00	; 0
    af02:	60 e2       	ldi	r22, 0x20	; 32
    af04:	70 e0       	ldi	r23, 0x00	; 0
    af06:	8f 81       	ldd	r24, Y+7	; 0x07
    af08:	98 85       	ldd	r25, Y+8	; 0x08
    af0a:	0e 94 c4 45 	call	0x8b88	; 0x8b88 <mem_set>
    af0e:	48 e0       	ldi	r20, 0x08	; 8
    af10:	84 2e       	mov	r8, r20
    af12:	91 2c       	mov	r9, r1
    af14:	c1 2c       	mov	r12, r1
    af16:	d1 2c       	mov	r13, r1
    af18:	1c 82       	std	Y+4, r1	; 0x04
    af1a:	12 01       	movw	r2, r4
    af1c:	8f ef       	ldi	r24, 0xFF	; 255
    af1e:	28 1a       	sub	r2, r24
    af20:	38 0a       	sbc	r3, r24
    af22:	44 0c       	add	r4, r4
    af24:	55 1c       	adc	r5, r5
    af26:	f5 01       	movw	r30, r10
    af28:	e4 0d       	add	r30, r4
    af2a:	f5 1d       	adc	r31, r5
    af2c:	80 81       	ld	r24, Z
    af2e:	91 81       	ldd	r25, Z+1	; 0x01
    af30:	00 97       	sbiw	r24, 0x00	; 0
    af32:	09 f4       	brne	.+2      	; 0xaf36 <follow_path+0x29a>
    af34:	98 c0       	rjmp	.+304    	; 0xb066 <follow_path+0x3ca>
    af36:	80 32       	cpi	r24, 0x20	; 32
    af38:	91 05       	cpc	r25, r1
    af3a:	31 f0       	breq	.+12     	; 0xaf48 <follow_path+0x2ac>
    af3c:	8e 32       	cpi	r24, 0x2E	; 46
    af3e:	91 05       	cpc	r25, r1
    af40:	41 f4       	brne	.+16     	; 0xaf52 <follow_path+0x2b6>
    af42:	20 16       	cp	r2, r16
    af44:	31 06       	cpc	r3, r17
    af46:	61 f0       	breq	.+24     	; 0xaf60 <follow_path+0x2c4>
    af48:	9b 81       	ldd	r25, Y+3	; 0x03
    af4a:	93 60       	ori	r25, 0x03	; 3
    af4c:	9b 83       	std	Y+3, r25	; 0x03
    af4e:	21 01       	movw	r4, r2
    af50:	e4 cf       	rjmp	.-56     	; 0xaf1a <follow_path+0x27e>
    af52:	c8 14       	cp	r12, r8
    af54:	d9 04       	cpc	r13, r9
    af56:	40 f4       	brcc	.+16     	; 0xaf68 <follow_path+0x2cc>
    af58:	20 16       	cp	r2, r16
    af5a:	31 06       	cpc	r3, r17
    af5c:	31 f5       	brne	.+76     	; 0xafaa <follow_path+0x30e>
    af5e:	c5 c0       	rjmp	.+394    	; 0xb0ea <follow_path+0x44e>
    af60:	c8 14       	cp	r12, r8
    af62:	d9 04       	cpc	r13, r9
    af64:	08 f4       	brcc	.+2      	; 0xaf68 <follow_path+0x2cc>
    af66:	c1 c0       	rjmp	.+386    	; 0xb0ea <follow_path+0x44e>
    af68:	ab e0       	ldi	r26, 0x0B	; 11
    af6a:	8a 16       	cp	r8, r26
    af6c:	91 04       	cpc	r9, r1
    af6e:	39 f4       	brne	.+14     	; 0xaf7e <follow_path+0x2e2>
    af70:	bb 81       	ldd	r27, Y+3	; 0x03
    af72:	b3 60       	ori	r27, 0x03	; 3
    af74:	bb 83       	std	Y+3, r27	; 0x03
    af76:	2b e0       	ldi	r18, 0x0B	; 11
    af78:	82 2e       	mov	r8, r18
    af7a:	91 2c       	mov	r9, r1
    af7c:	74 c0       	rjmp	.+232    	; 0xb066 <follow_path+0x3ca>
    af7e:	20 16       	cp	r2, r16
    af80:	31 06       	cpc	r3, r17
    af82:	39 f0       	breq	.+14     	; 0xaf92 <follow_path+0x2f6>
    af84:	eb 81       	ldd	r30, Y+3	; 0x03
    af86:	e3 60       	ori	r30, 0x03	; 3
    af88:	eb 83       	std	Y+3, r30	; 0x03
    af8a:	02 15       	cp	r16, r2
    af8c:	13 05       	cpc	r17, r3
    af8e:	08 f4       	brcc	.+2      	; 0xaf92 <follow_path+0x2f6>
    af90:	6a c0       	rjmp	.+212    	; 0xb066 <follow_path+0x3ca>
    af92:	fc 81       	ldd	r31, Y+4	; 0x04
    af94:	ff 0f       	add	r31, r31
    af96:	ff 0f       	add	r31, r31
    af98:	fc 83       	std	Y+4, r31	; 0x04
    af9a:	18 01       	movw	r2, r16
    af9c:	8b e0       	ldi	r24, 0x0B	; 11
    af9e:	88 2e       	mov	r8, r24
    afa0:	91 2c       	mov	r9, r1
    afa2:	98 e0       	ldi	r25, 0x08	; 8
    afa4:	c9 2e       	mov	r12, r25
    afa6:	d1 2c       	mov	r13, r1
    afa8:	d2 cf       	rjmp	.-92     	; 0xaf4e <follow_path+0x2b2>
    afaa:	80 38       	cpi	r24, 0x80	; 128
    afac:	91 05       	cpc	r25, r1
    afae:	78 f1       	brcs	.+94     	; 0xb00e <follow_path+0x372>
    afb0:	2b 81       	ldd	r18, Y+3	; 0x03
    afb2:	22 60       	ori	r18, 0x02	; 2
    afb4:	52 2e       	mov	r5, r18
    afb6:	bc 01       	movw	r22, r24
    afb8:	80 e0       	ldi	r24, 0x00	; 0
    afba:	90 e0       	ldi	r25, 0x00	; 0
    afbc:	45 eb       	ldi	r20, 0xB5	; 181
    afbe:	51 e0       	ldi	r21, 0x01	; 1
    afc0:	0e 94 17 68 	call	0xd02e	; 0xd02e <ff_uni2oem>
    afc4:	87 ff       	sbrs	r24, 7
    afc6:	08 c0       	rjmp	.+16     	; 0xafd8 <follow_path+0x33c>
    afc8:	8f 77       	andi	r24, 0x7F	; 127
    afca:	99 27       	eor	r25, r25
    afcc:	fc 01       	movw	r30, r24
    afce:	e5 59       	subi	r30, 0x95	; 149
    afd0:	fb 4f       	sbci	r31, 0xFB	; 251
    afd2:	80 81       	ld	r24, Z
    afd4:	90 e0       	ldi	r25, 0x00	; 0
    afd6:	18 c0       	rjmp	.+48     	; 0xb008 <follow_path+0x36c>
    afd8:	8f 3f       	cpi	r24, 0xFF	; 255
    afda:	91 05       	cpc	r25, r1
    afdc:	a9 f0       	breq	.+42     	; 0xb008 <follow_path+0x36c>
    afde:	a0 f0       	brcs	.+40     	; 0xb008 <follow_path+0x36c>
    afe0:	94 01       	movw	r18, r8
    afe2:	21 50       	subi	r18, 0x01	; 1
    afe4:	31 09       	sbc	r19, r1
    afe6:	c2 16       	cp	r12, r18
    afe8:	d3 06       	cpc	r13, r19
    afea:	28 f0       	brcs	.+10     	; 0xaff6 <follow_path+0x35a>
    afec:	3b 81       	ldd	r19, Y+3	; 0x03
    afee:	33 60       	ori	r19, 0x03	; 3
    aff0:	3b 83       	std	Y+3, r19	; 0x03
    aff2:	64 01       	movw	r12, r8
    aff4:	ac cf       	rjmp	.-168    	; 0xaf4e <follow_path+0x2b2>
    aff6:	f7 01       	movw	r30, r14
    aff8:	ec 0d       	add	r30, r12
    affa:	fd 1d       	adc	r31, r13
    affc:	94 8f       	std	Z+28, r25	; 0x1c
    affe:	d6 01       	movw	r26, r12
    b000:	11 96       	adiw	r26, 0x01	; 1
    b002:	6d 01       	movw	r12, r26
    b004:	5b 82       	std	Y+3, r5	; 0x03
    b006:	26 c0       	rjmp	.+76     	; 0xb054 <follow_path+0x3b8>
    b008:	00 97       	sbiw	r24, 0x00	; 0
    b00a:	59 f0       	breq	.+22     	; 0xb022 <follow_path+0x386>
    b00c:	5b 82       	std	Y+3, r5	; 0x03
    b00e:	e0 e3       	ldi	r30, 0x30	; 48
    b010:	f4 e0       	ldi	r31, 0x04	; 4
    b012:	21 91       	ld	r18, Z+
    b014:	22 23       	and	r18, r18
    b016:	59 f0       	breq	.+22     	; 0xb02e <follow_path+0x392>
    b018:	30 e0       	ldi	r19, 0x00	; 0
    b01a:	82 17       	cp	r24, r18
    b01c:	93 07       	cpc	r25, r19
    b01e:	c9 f7       	brne	.-14     	; 0xb012 <follow_path+0x376>
    b020:	5b 80       	ldd	r5, Y+3	; 0x03
    b022:	b5 2d       	mov	r27, r5
    b024:	b3 60       	ori	r27, 0x03	; 3
    b026:	bb 83       	std	Y+3, r27	; 0x03
    b028:	8f e5       	ldi	r24, 0x5F	; 95
    b02a:	90 e0       	ldi	r25, 0x00	; 0
    b02c:	13 c0       	rjmp	.+38     	; 0xb054 <follow_path+0x3b8>
    b02e:	9c 01       	movw	r18, r24
    b030:	21 54       	subi	r18, 0x41	; 65
    b032:	31 09       	sbc	r19, r1
    b034:	2a 31       	cpi	r18, 0x1A	; 26
    b036:	31 05       	cpc	r19, r1
    b038:	18 f4       	brcc	.+6      	; 0xb040 <follow_path+0x3a4>
    b03a:	ec 81       	ldd	r30, Y+4	; 0x04
    b03c:	e2 60       	ori	r30, 0x02	; 2
    b03e:	ec 83       	std	Y+4, r30	; 0x04
    b040:	9c 01       	movw	r18, r24
    b042:	21 56       	subi	r18, 0x61	; 97
    b044:	31 09       	sbc	r19, r1
    b046:	2a 31       	cpi	r18, 0x1A	; 26
    b048:	31 05       	cpc	r19, r1
    b04a:	20 f4       	brcc	.+8      	; 0xb054 <follow_path+0x3b8>
    b04c:	fc 81       	ldd	r31, Y+4	; 0x04
    b04e:	f1 60       	ori	r31, 0x01	; 1
    b050:	fc 83       	std	Y+4, r31	; 0x04
    b052:	80 97       	sbiw	r24, 0x20	; 32
    b054:	f7 01       	movw	r30, r14
    b056:	ec 0d       	add	r30, r12
    b058:	fd 1d       	adc	r31, r13
    b05a:	84 8f       	std	Z+28, r24	; 0x1c
    b05c:	96 01       	movw	r18, r12
    b05e:	2f 5f       	subi	r18, 0xFF	; 255
    b060:	3f 4f       	sbci	r19, 0xFF	; 255
    b062:	69 01       	movw	r12, r18
    b064:	74 cf       	rjmp	.-280    	; 0xaf4e <follow_path+0x2b2>
    b066:	f7 01       	movw	r30, r14
    b068:	84 8d       	ldd	r24, Z+28	; 0x1c
    b06a:	85 3e       	cpi	r24, 0xE5	; 229
    b06c:	11 f4       	brne	.+4      	; 0xb072 <follow_path+0x3d6>
    b06e:	25 e0       	ldi	r18, 0x05	; 5
    b070:	24 8f       	std	Z+28, r18	; 0x1c
    b072:	38 e0       	ldi	r19, 0x08	; 8
    b074:	83 16       	cp	r8, r19
    b076:	91 04       	cpc	r9, r1
    b078:	21 f4       	brne	.+8      	; 0xb082 <follow_path+0x3e6>
    b07a:	8c 81       	ldd	r24, Y+4	; 0x04
    b07c:	88 0f       	add	r24, r24
    b07e:	88 0f       	add	r24, r24
    b080:	8c 83       	std	Y+4, r24	; 0x04
    b082:	8c 81       	ldd	r24, Y+4	; 0x04
    b084:	8c 70       	andi	r24, 0x0C	; 12
    b086:	8c 30       	cpi	r24, 0x0C	; 12
    b088:	21 f0       	breq	.+8      	; 0xb092 <follow_path+0x3f6>
    b08a:	8c 81       	ldd	r24, Y+4	; 0x04
    b08c:	83 70       	andi	r24, 0x03	; 3
    b08e:	83 30       	cpi	r24, 0x03	; 3
    b090:	19 f4       	brne	.+6      	; 0xb098 <follow_path+0x3fc>
    b092:	9b 81       	ldd	r25, Y+3	; 0x03
    b094:	92 60       	ori	r25, 0x02	; 2
    b096:	9b 83       	std	Y+3, r25	; 0x03
    b098:	ab 81       	ldd	r26, Y+3	; 0x03
    b09a:	a1 fd       	sbrc	r26, 1
    b09c:	0b c0       	rjmp	.+22     	; 0xb0b4 <follow_path+0x418>
    b09e:	bc 81       	ldd	r27, Y+4	; 0x04
    b0a0:	b0 ff       	sbrs	r27, 0
    b0a2:	02 c0       	rjmp	.+4      	; 0xb0a8 <follow_path+0x40c>
    b0a4:	a0 61       	ori	r26, 0x10	; 16
    b0a6:	ab 83       	std	Y+3, r26	; 0x03
    b0a8:	ec 81       	ldd	r30, Y+4	; 0x04
    b0aa:	e2 ff       	sbrs	r30, 2
    b0ac:	03 c0       	rjmp	.+6      	; 0xb0b4 <follow_path+0x418>
    b0ae:	fb 81       	ldd	r31, Y+3	; 0x03
    b0b0:	f8 60       	ori	r31, 0x08	; 8
    b0b2:	fb 83       	std	Y+3, r31	; 0x03
    b0b4:	2b 81       	ldd	r18, Y+3	; 0x03
    b0b6:	f7 01       	movw	r30, r14
    b0b8:	27 a3       	std	Z+39, r18	; 0x27
    b0ba:	a2 ce       	rjmp	.-700    	; 0xae00 <follow_path+0x164>
    b0bc:	86 e0       	ldi	r24, 0x06	; 6
    b0be:	90 e0       	ldi	r25, 0x00	; 0
    b0c0:	a1 ce       	rjmp	.-702    	; 0xae04 <follow_path+0x168>
    b0c2:	84 30       	cpi	r24, 0x04	; 4
    b0c4:	91 05       	cpc	r25, r1
    b0c6:	b9 f4       	brne	.+46     	; 0xb0f6 <follow_path+0x45a>
    b0c8:	32 2f       	mov	r19, r18
    b0ca:	34 70       	andi	r19, 0x04	; 4
    b0cc:	25 ff       	sbrs	r18, 5
    b0ce:	08 c0       	rjmp	.+16     	; 0xb0e0 <follow_path+0x444>
    b0d0:	33 23       	and	r19, r19
    b0d2:	09 f4       	brne	.+2      	; 0xb0d6 <follow_path+0x43a>
    b0d4:	b8 ce       	rjmp	.-656    	; 0xae46 <follow_path+0x1aa>
    b0d6:	80 e8       	ldi	r24, 0x80	; 128
    b0d8:	87 a3       	std	Z+39, r24	; 0x27
    b0da:	80 e0       	ldi	r24, 0x00	; 0
    b0dc:	90 e0       	ldi	r25, 0x00	; 0
    b0de:	0b c0       	rjmp	.+22     	; 0xb0f6 <follow_path+0x45a>
    b0e0:	31 11       	cpse	r19, r1
    b0e2:	09 c0       	rjmp	.+18     	; 0xb0f6 <follow_path+0x45a>
    b0e4:	85 e0       	ldi	r24, 0x05	; 5
    b0e6:	90 e0       	ldi	r25, 0x00	; 0
    b0e8:	06 c0       	rjmp	.+12     	; 0xb0f6 <follow_path+0x45a>
    b0ea:	fb e0       	ldi	r31, 0x0B	; 11
    b0ec:	8f 16       	cp	r8, r31
    b0ee:	91 04       	cpc	r9, r1
    b0f0:	09 f0       	breq	.+2      	; 0xb0f4 <follow_path+0x458>
    b0f2:	4f cf       	rjmp	.-354    	; 0xaf92 <follow_path+0x2f6>
    b0f4:	3d cf       	rjmp	.-390    	; 0xaf70 <follow_path+0x2d4>
    b0f6:	2a 96       	adiw	r28, 0x0a	; 10
    b0f8:	e2 e1       	ldi	r30, 0x12	; 18
    b0fa:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

0000b0fe <f_mount>:
    b0fe:	a6 e0       	ldi	r26, 0x06	; 6
    b100:	b0 e0       	ldi	r27, 0x00	; 0
    b102:	e5 e8       	ldi	r30, 0x85	; 133
    b104:	f8 e5       	ldi	r31, 0x58	; 88
    b106:	0c 94 4d e3 	jmp	0x1c69a	; 0x1c69a <__prologue_saves__+0x1e>
    b10a:	9c 83       	std	Y+4, r25	; 0x04
    b10c:	8b 83       	std	Y+3, r24	; 0x03
    b10e:	7e 83       	std	Y+6, r23	; 0x06
    b110:	6d 83       	std	Y+5, r22	; 0x05
    b112:	14 2f       	mov	r17, r20
    b114:	7a 83       	std	Y+2, r23	; 0x02
    b116:	69 83       	std	Y+1, r22	; 0x01
    b118:	ce 01       	movw	r24, r28
    b11a:	01 96       	adiw	r24, 0x01	; 1
    b11c:	0e 94 d5 46 	call	0x8daa	; 0x8daa <get_ldnumber>
    b120:	97 fd       	sbrc	r25, 7
    b122:	20 c0       	rjmp	.+64     	; 0xb164 <f_mount+0x66>
    b124:	88 0f       	add	r24, r24
    b126:	99 1f       	adc	r25, r25
    b128:	fc 01       	movw	r30, r24
    b12a:	e1 5e       	subi	r30, 0xE1	; 225
    b12c:	f7 4e       	sbci	r31, 0xE7	; 231
    b12e:	01 90       	ld	r0, Z+
    b130:	f0 81       	ld	r31, Z
    b132:	e0 2d       	mov	r30, r0
    b134:	30 97       	sbiw	r30, 0x00	; 0
    b136:	09 f0       	breq	.+2      	; 0xb13a <f_mount+0x3c>
    b138:	10 82       	st	Z, r1
    b13a:	eb 81       	ldd	r30, Y+3	; 0x03
    b13c:	fc 81       	ldd	r31, Y+4	; 0x04
    b13e:	30 97       	sbiw	r30, 0x00	; 0
    b140:	09 f0       	breq	.+2      	; 0xb144 <f_mount+0x46>
    b142:	10 82       	st	Z, r1
    b144:	dc 01       	movw	r26, r24
    b146:	a1 5e       	subi	r26, 0xE1	; 225
    b148:	b7 4e       	sbci	r27, 0xE7	; 231
    b14a:	ed 93       	st	X+, r30
    b14c:	fc 93       	st	X, r31
    b14e:	11 23       	and	r17, r17
    b150:	61 f0       	breq	.+24     	; 0xb16a <f_mount+0x6c>
    b152:	40 e0       	ldi	r20, 0x00	; 0
    b154:	be 01       	movw	r22, r28
    b156:	6d 5f       	subi	r22, 0xFD	; 253
    b158:	7f 4f       	sbci	r23, 0xFF	; 255
    b15a:	ce 01       	movw	r24, r28
    b15c:	05 96       	adiw	r24, 0x05	; 5
    b15e:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <mount_volume>
    b162:	05 c0       	rjmp	.+10     	; 0xb16e <f_mount+0x70>
    b164:	8b e0       	ldi	r24, 0x0B	; 11
    b166:	90 e0       	ldi	r25, 0x00	; 0
    b168:	02 c0       	rjmp	.+4      	; 0xb16e <f_mount+0x70>
    b16a:	80 e0       	ldi	r24, 0x00	; 0
    b16c:	90 e0       	ldi	r25, 0x00	; 0
    b16e:	26 96       	adiw	r28, 0x06	; 6
    b170:	e3 e0       	ldi	r30, 0x03	; 3
    b172:	0c 94 69 e3 	jmp	0x1c6d2	; 0x1c6d2 <__epilogue_restores__+0x1e>

0000b176 <f_open>:
    b176:	a6 e3       	ldi	r26, 0x36	; 54
    b178:	b0 e0       	ldi	r27, 0x00	; 0
    b17a:	e1 ec       	ldi	r30, 0xC1	; 193
    b17c:	f8 e5       	ldi	r31, 0x58	; 88
    b17e:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
    b182:	7a ab       	std	Y+50, r23	; 0x32
    b184:	69 ab       	std	Y+49, r22	; 0x31
    b186:	00 97       	sbiw	r24, 0x00	; 0
    b188:	09 f4       	brne	.+2      	; 0xb18c <f_open+0x16>
    b18a:	93 c1       	rjmp	.+806    	; 0xb4b2 <f_open+0x33c>
    b18c:	74 2e       	mov	r7, r20
    b18e:	7c 01       	movw	r14, r24
    b190:	24 2f       	mov	r18, r20
    b192:	2f 73       	andi	r18, 0x3F	; 63
    b194:	32 2e       	mov	r3, r18
    b196:	42 2f       	mov	r20, r18
    b198:	be 01       	movw	r22, r28
    b19a:	61 5d       	subi	r22, 0xD1	; 209
    b19c:	7f 4f       	sbci	r23, 0xFF	; 255
    b19e:	ce 01       	movw	r24, r28
    b1a0:	c1 96       	adiw	r24, 0x31	; 49
    b1a2:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <mount_volume>
    b1a6:	00 97       	sbiw	r24, 0x00	; 0
    b1a8:	09 f0       	breq	.+2      	; 0xb1ac <f_open+0x36>
    b1aa:	7d c1       	rjmp	.+762    	; 0xb4a6 <f_open+0x330>
    b1ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    b1ae:	98 a9       	ldd	r25, Y+48	; 0x30
    b1b0:	9a 83       	std	Y+2, r25	; 0x02
    b1b2:	89 83       	std	Y+1, r24	; 0x01
    b1b4:	80 e0       	ldi	r24, 0x00	; 0
    b1b6:	92 e0       	ldi	r25, 0x02	; 2
    b1b8:	0e 94 11 68 	call	0xd022	; 0xd022 <ff_memalloc>
    b1bc:	5c 01       	movw	r10, r24
    b1be:	00 97       	sbiw	r24, 0x00	; 0
    b1c0:	09 f4       	brne	.+2      	; 0xb1c4 <f_open+0x4e>
    b1c2:	79 c1       	rjmp	.+754    	; 0xb4b6 <f_open+0x340>
    b1c4:	ef a5       	ldd	r30, Y+47	; 0x2f
    b1c6:	f8 a9       	ldd	r31, Y+48	; 0x30
    b1c8:	94 87       	std	Z+12, r25	; 0x0c
    b1ca:	83 87       	std	Z+11, r24	; 0x0b
    b1cc:	69 a9       	ldd	r22, Y+49	; 0x31
    b1ce:	7a a9       	ldd	r23, Y+50	; 0x32
    b1d0:	ce 01       	movw	r24, r28
    b1d2:	01 96       	adiw	r24, 0x01	; 1
    b1d4:	63 dd       	rcall	.-1338   	; 0xac9c <follow_path>
    b1d6:	8c 01       	movw	r16, r24
    b1d8:	89 2b       	or	r24, r25
    b1da:	29 f4       	brne	.+10     	; 0xb1e6 <f_open+0x70>
    b1dc:	88 a5       	ldd	r24, Y+40	; 0x28
    b1de:	87 ff       	sbrs	r24, 7
    b1e0:	02 c0       	rjmp	.+4      	; 0xb1e6 <f_open+0x70>
    b1e2:	06 e0       	ldi	r16, 0x06	; 6
    b1e4:	10 e0       	ldi	r17, 0x00	; 0
    b1e6:	87 2d       	mov	r24, r7
    b1e8:	8c 71       	andi	r24, 0x1C	; 28
    b1ea:	09 f4       	brne	.+2      	; 0xb1ee <f_open+0x78>
    b1ec:	75 c0       	rjmp	.+234    	; 0xb2d8 <f_open+0x162>
    b1ee:	01 15       	cp	r16, r1
    b1f0:	11 05       	cpc	r17, r1
    b1f2:	79 f0       	breq	.+30     	; 0xb212 <f_open+0x9c>
    b1f4:	04 30       	cpi	r16, 0x04	; 4
    b1f6:	11 05       	cpc	r17, r1
    b1f8:	09 f0       	breq	.+2      	; 0xb1fc <f_open+0x86>
    b1fa:	6d c1       	rjmp	.+730    	; 0xb4d6 <f_open+0x360>
    b1fc:	ce 01       	movw	r24, r28
    b1fe:	01 96       	adiw	r24, 0x01	; 1
    b200:	bf db       	rcall	.-2178   	; 0xa980 <dir_register>
    b202:	8c 01       	movw	r16, r24
    b204:	89 2b       	or	r24, r25
    b206:	09 f0       	breq	.+2      	; 0xb20a <f_open+0x94>
    b208:	66 c1       	rjmp	.+716    	; 0xb4d6 <f_open+0x360>
    b20a:	33 2d       	mov	r19, r3
    b20c:	38 60       	ori	r19, 0x08	; 8
    b20e:	33 2e       	mov	r3, r19
    b210:	06 c0       	rjmp	.+12     	; 0xb21e <f_open+0xa8>
    b212:	8d 81       	ldd	r24, Y+5	; 0x05
    b214:	81 71       	andi	r24, 0x11	; 17
    b216:	09 f0       	breq	.+2      	; 0xb21a <f_open+0xa4>
    b218:	5c c1       	rjmp	.+696    	; 0xb4d2 <f_open+0x35c>
    b21a:	72 fc       	sbrc	r7, 2
    b21c:	51 c1       	rjmp	.+674    	; 0xb4c0 <f_open+0x34a>
    b21e:	33 fe       	sbrs	r3, 3
    b220:	6b c0       	rjmp	.+214    	; 0xb2f8 <f_open+0x182>
    b222:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b224:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b226:	ef a5       	ldd	r30, Y+47	; 0x2f
    b228:	f8 a9       	ldd	r31, Y+48	; 0x30
    b22a:	b8 01       	movw	r22, r16
    b22c:	80 81       	ld	r24, Z
    b22e:	0e 94 f5 48 	call	0x91ea	; 0x91ea <ld_clust.isra.4>
    b232:	2b 01       	movw	r4, r22
    b234:	3c 01       	movw	r6, r24
    b236:	0e 94 82 6f 	call	0xdf04	; 0xdf04 <get_fattime>
    b23a:	ab 01       	movw	r20, r22
    b23c:	bc 01       	movw	r22, r24
    b23e:	c8 01       	movw	r24, r16
    b240:	0e 96       	adiw	r24, 0x0e	; 14
    b242:	0e 94 be 45 	call	0x8b7c	; 0x8b7c <st_dword>
    b246:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b248:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b24a:	80 e2       	ldi	r24, 0x20	; 32
    b24c:	83 87       	std	Z+11, r24	; 0x0b
    b24e:	af a5       	ldd	r26, Y+47	; 0x2f
    b250:	b8 a9       	ldd	r27, Y+48	; 0x30
    b252:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b254:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b256:	12 8e       	std	Z+26, r1	; 0x1a
    b258:	13 8e       	std	Z+27, r1	; 0x1b
    b25a:	8c 91       	ld	r24, X
    b25c:	83 30       	cpi	r24, 0x03	; 3
    b25e:	11 f4       	brne	.+4      	; 0xb264 <f_open+0xee>
    b260:	14 8a       	std	Z+20, r1	; 0x14
    b262:	15 8a       	std	Z+21, r1	; 0x15
    b264:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b266:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b268:	14 8e       	std	Z+28, r1	; 0x1c
    b26a:	15 8e       	std	Z+29, r1	; 0x1d
    b26c:	16 8e       	std	Z+30, r1	; 0x1e
    b26e:	17 8e       	std	Z+31, r1	; 0x1f
    b270:	81 e0       	ldi	r24, 0x01	; 1
    b272:	fd 01       	movw	r30, r26
    b274:	83 83       	std	Z+3, r24	; 0x03
    b276:	41 14       	cp	r4, r1
    b278:	51 04       	cpc	r5, r1
    b27a:	61 04       	cpc	r6, r1
    b27c:	71 04       	cpc	r7, r1
    b27e:	c9 f1       	breq	.+114    	; 0xb2f2 <f_open+0x17c>
    b280:	21 a9       	ldd	r18, Z+49	; 0x31
    b282:	32 a9       	ldd	r19, Z+50	; 0x32
    b284:	43 a9       	ldd	r20, Z+51	; 0x33
    b286:	54 a9       	ldd	r21, Z+52	; 0x34
    b288:	2b ab       	std	Y+51, r18	; 0x33
    b28a:	3c ab       	std	Y+52, r19	; 0x34
    b28c:	4d ab       	std	Y+53, r20	; 0x35
    b28e:	5e ab       	std	Y+54, r21	; 0x36
    b290:	00 e0       	ldi	r16, 0x00	; 0
    b292:	10 e0       	ldi	r17, 0x00	; 0
    b294:	98 01       	movw	r18, r16
    b296:	b3 01       	movw	r22, r6
    b298:	a2 01       	movw	r20, r4
    b29a:	ce 01       	movw	r24, r28
    b29c:	01 96       	adiw	r24, 0x01	; 1
    b29e:	0e 94 ef 50 	call	0xa1de	; 0xa1de <remove_chain>
    b2a2:	8c 01       	movw	r16, r24
    b2a4:	89 2b       	or	r24, r25
    b2a6:	09 f0       	breq	.+2      	; 0xb2aa <f_open+0x134>
    b2a8:	16 c1       	rjmp	.+556    	; 0xb4d6 <f_open+0x360>
    b2aa:	4b a9       	ldd	r20, Y+51	; 0x33
    b2ac:	5c a9       	ldd	r21, Y+52	; 0x34
    b2ae:	6d a9       	ldd	r22, Y+53	; 0x35
    b2b0:	7e a9       	ldd	r23, Y+54	; 0x36
    b2b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    b2b4:	98 a9       	ldd	r25, Y+48	; 0x30
    b2b6:	0e 94 84 4a 	call	0x9508	; 0x9508 <move_window>
    b2ba:	8c 01       	movw	r16, r24
    b2bc:	ef a5       	ldd	r30, Y+47	; 0x2f
    b2be:	f8 a9       	ldd	r31, Y+48	; 0x30
    b2c0:	21 e0       	ldi	r18, 0x01	; 1
    b2c2:	42 1a       	sub	r4, r18
    b2c4:	51 08       	sbc	r5, r1
    b2c6:	61 08       	sbc	r6, r1
    b2c8:	71 08       	sbc	r7, r1
    b2ca:	45 86       	std	Z+13, r4	; 0x0d
    b2cc:	56 86       	std	Z+14, r5	; 0x0e
    b2ce:	67 86       	std	Z+15, r6	; 0x0f
    b2d0:	70 8a       	std	Z+16, r7	; 0x10
    b2d2:	89 2b       	or	r24, r25
    b2d4:	61 f0       	breq	.+24     	; 0xb2ee <f_open+0x178>
    b2d6:	ff c0       	rjmp	.+510    	; 0xb4d6 <f_open+0x360>
    b2d8:	01 15       	cp	r16, r1
    b2da:	11 05       	cpc	r17, r1
    b2dc:	09 f0       	breq	.+2      	; 0xb2e0 <f_open+0x16a>
    b2de:	fb c0       	rjmp	.+502    	; 0xb4d6 <f_open+0x360>
    b2e0:	8d 81       	ldd	r24, Y+5	; 0x05
    b2e2:	84 fd       	sbrc	r24, 4
    b2e4:	f3 c0       	rjmp	.+486    	; 0xb4cc <f_open+0x356>
    b2e6:	71 fe       	sbrs	r7, 1
    b2e8:	02 c0       	rjmp	.+4      	; 0xb2ee <f_open+0x178>
    b2ea:	80 fd       	sbrc	r24, 0
    b2ec:	f2 c0       	rjmp	.+484    	; 0xb4d2 <f_open+0x35c>
    b2ee:	33 fe       	sbrs	r3, 3
    b2f0:	03 c0       	rjmp	.+6      	; 0xb2f8 <f_open+0x182>
    b2f2:	33 2d       	mov	r19, r3
    b2f4:	30 64       	ori	r19, 0x40	; 64
    b2f6:	33 2e       	mov	r3, r19
    b2f8:	0f a5       	ldd	r16, Y+47	; 0x2f
    b2fa:	18 a9       	ldd	r17, Y+48	; 0x30
    b2fc:	f8 01       	movw	r30, r16
    b2fe:	81 a9       	ldd	r24, Z+49	; 0x31
    b300:	92 a9       	ldd	r25, Z+50	; 0x32
    b302:	a3 a9       	ldd	r26, Z+51	; 0x33
    b304:	b4 a9       	ldd	r27, Z+52	; 0x34
    b306:	f7 01       	movw	r30, r14
    b308:	84 8f       	std	Z+28, r24	; 0x1c
    b30a:	95 8f       	std	Z+29, r25	; 0x1d
    b30c:	a6 8f       	std	Z+30, r26	; 0x1e
    b30e:	b7 8f       	std	Z+31, r27	; 0x1f
    b310:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b312:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b314:	71 a2       	std	Z+33, r7	; 0x21
    b316:	60 a2       	std	Z+32, r6	; 0x20
    b318:	b3 01       	movw	r22, r6
    b31a:	f8 01       	movw	r30, r16
    b31c:	80 81       	ld	r24, Z
    b31e:	0e 94 f5 48 	call	0x91ea	; 0x91ea <ld_clust.isra.4>
    b322:	f7 01       	movw	r30, r14
    b324:	66 83       	std	Z+6, r22	; 0x06
    b326:	77 83       	std	Z+7, r23	; 0x07
    b328:	80 87       	std	Z+8, r24	; 0x08
    b32a:	91 87       	std	Z+9, r25	; 0x09
    b32c:	c3 01       	movw	r24, r6
    b32e:	4c 96       	adiw	r24, 0x1c	; 28
    b330:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <ld_dword>
    b334:	f7 01       	movw	r30, r14
    b336:	62 87       	std	Z+10, r22	; 0x0a
    b338:	73 87       	std	Z+11, r23	; 0x0b
    b33a:	84 87       	std	Z+12, r24	; 0x0c
    b33c:	95 87       	std	Z+13, r25	; 0x0d
    b33e:	13 a2       	std	Z+35, r1	; 0x23
    b340:	12 a2       	std	Z+34, r1	; 0x22
    b342:	11 83       	std	Z+1, r17	; 0x01
    b344:	00 83       	st	Z, r16
    b346:	f8 01       	movw	r30, r16
    b348:	85 81       	ldd	r24, Z+5	; 0x05
    b34a:	96 81       	ldd	r25, Z+6	; 0x06
    b34c:	f7 01       	movw	r30, r14
    b34e:	93 83       	std	Z+3, r25	; 0x03
    b350:	82 83       	std	Z+2, r24	; 0x02
    b352:	36 86       	std	Z+14, r3	; 0x0e
    b354:	17 86       	std	Z+15, r1	; 0x0f
    b356:	10 8e       	std	Z+24, r1	; 0x18
    b358:	11 8e       	std	Z+25, r1	; 0x19
    b35a:	12 8e       	std	Z+26, r1	; 0x1a
    b35c:	13 8e       	std	Z+27, r1	; 0x1b
    b35e:	10 8a       	std	Z+16, r1	; 0x10
    b360:	11 8a       	std	Z+17, r1	; 0x11
    b362:	12 8a       	std	Z+18, r1	; 0x12
    b364:	13 8a       	std	Z+19, r1	; 0x13
    b366:	67 01       	movw	r12, r14
    b368:	f4 e2       	ldi	r31, 0x24	; 36
    b36a:	cf 0e       	add	r12, r31
    b36c:	d1 1c       	adc	r13, r1
    b36e:	40 e0       	ldi	r20, 0x00	; 0
    b370:	52 e0       	ldi	r21, 0x02	; 2
    b372:	60 e0       	ldi	r22, 0x00	; 0
    b374:	70 e0       	ldi	r23, 0x00	; 0
    b376:	c6 01       	movw	r24, r12
    b378:	0e 94 c4 45 	call	0x8b88	; 0x8b88 <mem_set>
    b37c:	35 fc       	sbrc	r3, 5
    b37e:	03 c0       	rjmp	.+6      	; 0xb386 <f_open+0x210>
    b380:	00 e0       	ldi	r16, 0x00	; 0
    b382:	10 e0       	ldi	r17, 0x00	; 0
    b384:	89 c0       	rjmp	.+274    	; 0xb498 <f_open+0x322>
    b386:	f7 01       	movw	r30, r14
    b388:	62 84       	ldd	r6, Z+10	; 0x0a
    b38a:	73 84       	ldd	r7, Z+11	; 0x0b
    b38c:	84 84       	ldd	r8, Z+12	; 0x0c
    b38e:	95 84       	ldd	r9, Z+13	; 0x0d
    b390:	61 14       	cp	r6, r1
    b392:	71 04       	cpc	r7, r1
    b394:	81 04       	cpc	r8, r1
    b396:	91 04       	cpc	r9, r1
    b398:	99 f3       	breq	.-26     	; 0xb380 <f_open+0x20a>
    b39a:	60 8a       	std	Z+16, r6	; 0x10
    b39c:	71 8a       	std	Z+17, r7	; 0x11
    b39e:	82 8a       	std	Z+18, r8	; 0x12
    b3a0:	93 8a       	std	Z+19, r9	; 0x13
    b3a2:	ef a5       	ldd	r30, Y+47	; 0x2f
    b3a4:	f8 a9       	ldd	r31, Y+48	; 0x30
    b3a6:	21 84       	ldd	r2, Z+9	; 0x09
    b3a8:	32 84       	ldd	r3, Z+10	; 0x0a
    b3aa:	c1 01       	movw	r24, r2
    b3ac:	a0 e0       	ldi	r26, 0x00	; 0
    b3ae:	b0 e0       	ldi	r27, 0x00	; 0
    b3b0:	1c 01       	movw	r2, r24
    b3b2:	2d 01       	movw	r4, r26
    b3b4:	59 e0       	ldi	r21, 0x09	; 9
    b3b6:	22 0c       	add	r2, r2
    b3b8:	33 1c       	adc	r3, r3
    b3ba:	44 1c       	adc	r4, r4
    b3bc:	55 1c       	adc	r5, r5
    b3be:	5a 95       	dec	r21
    b3c0:	d1 f7       	brne	.-12     	; 0xb3b6 <f_open+0x240>
    b3c2:	f7 01       	movw	r30, r14
    b3c4:	46 81       	ldd	r20, Z+6	; 0x06
    b3c6:	57 81       	ldd	r21, Z+7	; 0x07
    b3c8:	60 85       	ldd	r22, Z+8	; 0x08
    b3ca:	71 85       	ldd	r23, Z+9	; 0x09
    b3cc:	26 14       	cp	r2, r6
    b3ce:	37 04       	cpc	r3, r7
    b3d0:	48 04       	cpc	r4, r8
    b3d2:	59 04       	cpc	r5, r9
    b3d4:	f0 f4       	brcc	.+60     	; 0xb412 <f_open+0x29c>
    b3d6:	f7 01       	movw	r30, r14
    b3d8:	80 81       	ld	r24, Z
    b3da:	91 81       	ldd	r25, Z+1	; 0x01
    b3dc:	0e 94 54 4e 	call	0x9ca8	; 0x9ca8 <get_fat.isra.10>
    b3e0:	ab 01       	movw	r20, r22
    b3e2:	bc 01       	movw	r22, r24
    b3e4:	d4 01       	movw	r26, r8
    b3e6:	c3 01       	movw	r24, r6
    b3e8:	82 19       	sub	r24, r2
    b3ea:	93 09       	sbc	r25, r3
    b3ec:	a4 09       	sbc	r26, r4
    b3ee:	b5 09       	sbc	r27, r5
    b3f0:	3c 01       	movw	r6, r24
    b3f2:	4d 01       	movw	r8, r26
    b3f4:	42 30       	cpi	r20, 0x02	; 2
    b3f6:	51 05       	cpc	r21, r1
    b3f8:	61 05       	cpc	r22, r1
    b3fa:	71 05       	cpc	r23, r1
    b3fc:	08 f4       	brcc	.+2      	; 0xb400 <f_open+0x28a>
    b3fe:	63 c0       	rjmp	.+198    	; 0xb4c6 <f_open+0x350>
    b400:	4f 3f       	cpi	r20, 0xFF	; 255
    b402:	ff ef       	ldi	r31, 0xFF	; 255
    b404:	5f 07       	cpc	r21, r31
    b406:	6f 07       	cpc	r22, r31
    b408:	7f 07       	cpc	r23, r31
    b40a:	01 f7       	brne	.-64     	; 0xb3cc <f_open+0x256>
    b40c:	01 e0       	ldi	r16, 0x01	; 1
    b40e:	10 e0       	ldi	r17, 0x00	; 0
    b410:	02 c0       	rjmp	.+4      	; 0xb416 <f_open+0x2a0>
    b412:	00 e0       	ldi	r16, 0x00	; 0
    b414:	10 e0       	ldi	r17, 0x00	; 0
    b416:	f7 01       	movw	r30, r14
    b418:	44 8b       	std	Z+20, r20	; 0x14
    b41a:	55 8b       	std	Z+21, r21	; 0x15
    b41c:	66 8b       	std	Z+22, r22	; 0x16
    b41e:	77 8b       	std	Z+23, r23	; 0x17
    b420:	01 15       	cp	r16, r1
    b422:	11 05       	cpc	r17, r1
    b424:	c9 f5       	brne	.+114    	; 0xb498 <f_open+0x322>
    b426:	d4 01       	movw	r26, r8
    b428:	c3 01       	movw	r24, r6
    b42a:	91 70       	andi	r25, 0x01	; 1
    b42c:	aa 27       	eor	r26, r26
    b42e:	bb 27       	eor	r27, r27
    b430:	89 2b       	or	r24, r25
    b432:	8a 2b       	or	r24, r26
    b434:	8b 2b       	or	r24, r27
    b436:	09 f4       	brne	.+2      	; 0xb43a <f_open+0x2c4>
    b438:	a3 cf       	rjmp	.-186    	; 0xb380 <f_open+0x20a>
    b43a:	4f a4       	ldd	r4, Y+47	; 0x2f
    b43c:	58 a8       	ldd	r5, Y+48	; 0x30
    b43e:	c2 01       	movw	r24, r4
    b440:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <clst2sect>
    b444:	61 15       	cp	r22, r1
    b446:	71 05       	cpc	r23, r1
    b448:	81 05       	cpc	r24, r1
    b44a:	91 05       	cpc	r25, r1
    b44c:	19 f1       	breq	.+70     	; 0xb494 <f_open+0x31e>
    b44e:	94 01       	movw	r18, r8
    b450:	83 01       	movw	r16, r6
    b452:	49 e0       	ldi	r20, 0x09	; 9
    b454:	36 95       	lsr	r19
    b456:	27 95       	ror	r18
    b458:	17 95       	ror	r17
    b45a:	07 95       	ror	r16
    b45c:	4a 95       	dec	r20
    b45e:	d1 f7       	brne	.-12     	; 0xb454 <f_open+0x2de>
    b460:	a9 01       	movw	r20, r18
    b462:	98 01       	movw	r18, r16
    b464:	26 0f       	add	r18, r22
    b466:	37 1f       	adc	r19, r23
    b468:	48 1f       	adc	r20, r24
    b46a:	59 1f       	adc	r21, r25
    b46c:	f7 01       	movw	r30, r14
    b46e:	20 8f       	std	Z+24, r18	; 0x18
    b470:	31 8f       	std	Z+25, r19	; 0x19
    b472:	42 8f       	std	Z+26, r20	; 0x1a
    b474:	53 8f       	std	Z+27, r21	; 0x1b
    b476:	01 e0       	ldi	r16, 0x01	; 1
    b478:	10 e0       	ldi	r17, 0x00	; 0
    b47a:	b6 01       	movw	r22, r12
    b47c:	f2 01       	movw	r30, r4
    b47e:	81 81       	ldd	r24, Z+1	; 0x01
    b480:	0e 94 cd 68 	call	0xd19a	; 0xd19a <disk_read>
    b484:	31 e0       	ldi	r19, 0x01	; 1
    b486:	20 e0       	ldi	r18, 0x00	; 0
    b488:	89 2b       	or	r24, r25
    b48a:	09 f4       	brne	.+2      	; 0xb48e <f_open+0x318>
    b48c:	30 e0       	ldi	r19, 0x00	; 0
    b48e:	03 2f       	mov	r16, r19
    b490:	12 2f       	mov	r17, r18
    b492:	02 c0       	rjmp	.+4      	; 0xb498 <f_open+0x322>
    b494:	02 e0       	ldi	r16, 0x02	; 2
    b496:	10 e0       	ldi	r17, 0x00	; 0
    b498:	c5 01       	movw	r24, r10
    b49a:	0e 94 14 68 	call	0xd028	; 0xd028 <ff_memfree>
    b49e:	01 15       	cp	r16, r1
    b4a0:	11 05       	cpc	r17, r1
    b4a2:	59 f0       	breq	.+22     	; 0xb4ba <f_open+0x344>
    b4a4:	01 c0       	rjmp	.+2      	; 0xb4a8 <f_open+0x332>
    b4a6:	8c 01       	movw	r16, r24
    b4a8:	f7 01       	movw	r30, r14
    b4aa:	11 82       	std	Z+1, r1	; 0x01
    b4ac:	10 82       	st	Z, r1
    b4ae:	c8 01       	movw	r24, r16
    b4b0:	16 c0       	rjmp	.+44     	; 0xb4de <f_open+0x368>
    b4b2:	89 e0       	ldi	r24, 0x09	; 9
    b4b4:	03 c0       	rjmp	.+6      	; 0xb4bc <f_open+0x346>
    b4b6:	81 e1       	ldi	r24, 0x11	; 17
    b4b8:	01 c0       	rjmp	.+2      	; 0xb4bc <f_open+0x346>
    b4ba:	80 e0       	ldi	r24, 0x00	; 0
    b4bc:	90 e0       	ldi	r25, 0x00	; 0
    b4be:	0f c0       	rjmp	.+30     	; 0xb4de <f_open+0x368>
    b4c0:	08 e0       	ldi	r16, 0x08	; 8
    b4c2:	10 e0       	ldi	r17, 0x00	; 0
    b4c4:	08 c0       	rjmp	.+16     	; 0xb4d6 <f_open+0x360>
    b4c6:	02 e0       	ldi	r16, 0x02	; 2
    b4c8:	10 e0       	ldi	r17, 0x00	; 0
    b4ca:	a5 cf       	rjmp	.-182    	; 0xb416 <f_open+0x2a0>
    b4cc:	04 e0       	ldi	r16, 0x04	; 4
    b4ce:	10 e0       	ldi	r17, 0x00	; 0
    b4d0:	02 c0       	rjmp	.+4      	; 0xb4d6 <f_open+0x360>
    b4d2:	07 e0       	ldi	r16, 0x07	; 7
    b4d4:	10 e0       	ldi	r17, 0x00	; 0
    b4d6:	c5 01       	movw	r24, r10
    b4d8:	0e 94 14 68 	call	0xd028	; 0xd028 <ff_memfree>
    b4dc:	e5 cf       	rjmp	.-54     	; 0xb4a8 <f_open+0x332>
    b4de:	e6 96       	adiw	r28, 0x36	; 54
    b4e0:	e2 e1       	ldi	r30, 0x12	; 18
    b4e2:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

0000b4e6 <f_read>:
    b4e6:	a6 e0       	ldi	r26, 0x06	; 6
    b4e8:	b0 e0       	ldi	r27, 0x00	; 0
    b4ea:	e9 e7       	ldi	r30, 0x79	; 121
    b4ec:	fa e5       	ldi	r31, 0x5A	; 90
    b4ee:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
    b4f2:	7c 01       	movw	r14, r24
    b4f4:	4b 01       	movw	r8, r22
    b4f6:	5a 01       	movw	r10, r20
    b4f8:	3e 83       	std	Y+6, r19	; 0x06
    b4fa:	2d 83       	std	Y+5, r18	; 0x05
    b4fc:	f9 01       	movw	r30, r18
    b4fe:	11 82       	std	Z+1, r1	; 0x01
    b500:	10 82       	st	Z, r1
    b502:	be 01       	movw	r22, r28
    b504:	6f 5f       	subi	r22, 0xFF	; 255
    b506:	7f 4f       	sbci	r23, 0xFF	; 255
    b508:	0e 94 01 47 	call	0x8e02	; 0x8e02 <validate>
    b50c:	00 97       	sbiw	r24, 0x00	; 0
    b50e:	09 f0       	breq	.+2      	; 0xb512 <f_read+0x2c>
    b510:	31 c1       	rjmp	.+610    	; 0xb774 <f_read+0x28e>
    b512:	f7 01       	movw	r30, r14
    b514:	87 85       	ldd	r24, Z+15	; 0x0f
    b516:	90 e0       	ldi	r25, 0x00	; 0
    b518:	00 97       	sbiw	r24, 0x00	; 0
    b51a:	09 f0       	breq	.+2      	; 0xb51e <f_read+0x38>
    b51c:	2b c1       	rjmp	.+598    	; 0xb774 <f_read+0x28e>
    b51e:	86 85       	ldd	r24, Z+14	; 0x0e
    b520:	80 ff       	sbrs	r24, 0
    b522:	26 c1       	rjmp	.+588    	; 0xb770 <f_read+0x28a>
    b524:	82 85       	ldd	r24, Z+10	; 0x0a
    b526:	93 85       	ldd	r25, Z+11	; 0x0b
    b528:	a4 85       	ldd	r26, Z+12	; 0x0c
    b52a:	b5 85       	ldd	r27, Z+13	; 0x0d
    b52c:	40 89       	ldd	r20, Z+16	; 0x10
    b52e:	51 89       	ldd	r21, Z+17	; 0x11
    b530:	62 89       	ldd	r22, Z+18	; 0x12
    b532:	73 89       	ldd	r23, Z+19	; 0x13
    b534:	84 1b       	sub	r24, r20
    b536:	95 0b       	sbc	r25, r21
    b538:	a6 0b       	sbc	r26, r22
    b53a:	b7 0b       	sbc	r27, r23
    b53c:	a5 01       	movw	r20, r10
    b53e:	60 e0       	ldi	r22, 0x00	; 0
    b540:	70 e0       	ldi	r23, 0x00	; 0
    b542:	84 17       	cp	r24, r20
    b544:	95 07       	cpc	r25, r21
    b546:	a6 07       	cpc	r26, r22
    b548:	b7 07       	cpc	r27, r23
    b54a:	08 f4       	brcc	.+2      	; 0xb54e <f_read+0x68>
    b54c:	5c 01       	movw	r10, r24
    b54e:	17 01       	movw	r2, r14
    b550:	f4 e2       	ldi	r31, 0x24	; 36
    b552:	2f 0e       	add	r2, r31
    b554:	31 1c       	adc	r3, r1
    b556:	a1 14       	cp	r10, r1
    b558:	b1 04       	cpc	r11, r1
    b55a:	09 f4       	brne	.+2      	; 0xb55e <f_read+0x78>
    b55c:	07 c1       	rjmp	.+526    	; 0xb76c <f_read+0x286>
    b55e:	f7 01       	movw	r30, r14
    b560:	40 89       	ldd	r20, Z+16	; 0x10
    b562:	51 89       	ldd	r21, Z+17	; 0x11
    b564:	62 89       	ldd	r22, Z+18	; 0x12
    b566:	73 89       	ldd	r23, Z+19	; 0x13
    b568:	db 01       	movw	r26, r22
    b56a:	ca 01       	movw	r24, r20
    b56c:	91 70       	andi	r25, 0x01	; 1
    b56e:	aa 27       	eor	r26, r26
    b570:	bb 27       	eor	r27, r27
    b572:	89 2b       	or	r24, r25
    b574:	8a 2b       	or	r24, r26
    b576:	8b 2b       	or	r24, r27
    b578:	09 f0       	breq	.+2      	; 0xb57c <f_read+0x96>
    b57a:	cb c0       	rjmp	.+406    	; 0xb712 <f_read+0x22c>
    b57c:	e9 81       	ldd	r30, Y+1	; 0x01
    b57e:	fa 81       	ldd	r31, Y+2	; 0x02
    b580:	01 85       	ldd	r16, Z+9	; 0x09
    b582:	12 85       	ldd	r17, Z+10	; 0x0a
    b584:	01 50       	subi	r16, 0x01	; 1
    b586:	11 09       	sbc	r17, r1
    b588:	db 01       	movw	r26, r22
    b58a:	ca 01       	movw	r24, r20
    b58c:	e9 e0       	ldi	r30, 0x09	; 9
    b58e:	b6 95       	lsr	r27
    b590:	a7 95       	ror	r26
    b592:	97 95       	ror	r25
    b594:	87 95       	ror	r24
    b596:	ea 95       	dec	r30
    b598:	d1 f7       	brne	.-12     	; 0xb58e <f_read+0xa8>
    b59a:	08 23       	and	r16, r24
    b59c:	19 23       	and	r17, r25
    b59e:	01 15       	cp	r16, r1
    b5a0:	11 05       	cpc	r17, r1
    b5a2:	91 f5       	brne	.+100    	; 0xb608 <f_read+0x122>
    b5a4:	f7 01       	movw	r30, r14
    b5a6:	41 15       	cp	r20, r1
    b5a8:	51 05       	cpc	r21, r1
    b5aa:	61 05       	cpc	r22, r1
    b5ac:	71 05       	cpc	r23, r1
    b5ae:	29 f4       	brne	.+10     	; 0xb5ba <f_read+0xd4>
    b5b0:	66 81       	ldd	r22, Z+6	; 0x06
    b5b2:	77 81       	ldd	r23, Z+7	; 0x07
    b5b4:	80 85       	ldd	r24, Z+8	; 0x08
    b5b6:	91 85       	ldd	r25, Z+9	; 0x09
    b5b8:	11 c0       	rjmp	.+34     	; 0xb5dc <f_read+0xf6>
    b5ba:	82 a1       	ldd	r24, Z+34	; 0x22
    b5bc:	93 a1       	ldd	r25, Z+35	; 0x23
    b5be:	89 2b       	or	r24, r25
    b5c0:	21 f0       	breq	.+8      	; 0xb5ca <f_read+0xe4>
    b5c2:	c7 01       	movw	r24, r14
    b5c4:	0e 94 8a 46 	call	0x8d14	; 0x8d14 <clmt_clust>
    b5c8:	09 c0       	rjmp	.+18     	; 0xb5dc <f_read+0xf6>
    b5ca:	f7 01       	movw	r30, r14
    b5cc:	44 89       	ldd	r20, Z+20	; 0x14
    b5ce:	55 89       	ldd	r21, Z+21	; 0x15
    b5d0:	66 89       	ldd	r22, Z+22	; 0x16
    b5d2:	77 89       	ldd	r23, Z+23	; 0x17
    b5d4:	80 81       	ld	r24, Z
    b5d6:	91 81       	ldd	r25, Z+1	; 0x01
    b5d8:	0e 94 54 4e 	call	0x9ca8	; 0x9ca8 <get_fat.isra.10>
    b5dc:	62 30       	cpi	r22, 0x02	; 2
    b5de:	71 05       	cpc	r23, r1
    b5e0:	81 05       	cpc	r24, r1
    b5e2:	91 05       	cpc	r25, r1
    b5e4:	10 f4       	brcc	.+4      	; 0xb5ea <f_read+0x104>
    b5e6:	82 e0       	ldi	r24, 0x02	; 2
    b5e8:	07 c0       	rjmp	.+14     	; 0xb5f8 <f_read+0x112>
    b5ea:	6f 3f       	cpi	r22, 0xFF	; 255
    b5ec:	ff ef       	ldi	r31, 0xFF	; 255
    b5ee:	7f 07       	cpc	r23, r31
    b5f0:	8f 07       	cpc	r24, r31
    b5f2:	9f 07       	cpc	r25, r31
    b5f4:	21 f4       	brne	.+8      	; 0xb5fe <f_read+0x118>
    b5f6:	81 e0       	ldi	r24, 0x01	; 1
    b5f8:	f7 01       	movw	r30, r14
    b5fa:	87 87       	std	Z+15, r24	; 0x0f
    b5fc:	ba c0       	rjmp	.+372    	; 0xb772 <f_read+0x28c>
    b5fe:	f7 01       	movw	r30, r14
    b600:	64 8b       	std	Z+20, r22	; 0x14
    b602:	75 8b       	std	Z+21, r23	; 0x15
    b604:	86 8b       	std	Z+22, r24	; 0x16
    b606:	97 8b       	std	Z+23, r25	; 0x17
    b608:	89 81       	ldd	r24, Y+1	; 0x01
    b60a:	9a 81       	ldd	r25, Y+2	; 0x02
    b60c:	9c 83       	std	Y+4, r25	; 0x04
    b60e:	8b 83       	std	Y+3, r24	; 0x03
    b610:	f7 01       	movw	r30, r14
    b612:	44 89       	ldd	r20, Z+20	; 0x14
    b614:	55 89       	ldd	r21, Z+21	; 0x15
    b616:	66 89       	ldd	r22, Z+22	; 0x16
    b618:	77 89       	ldd	r23, Z+23	; 0x17
    b61a:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <clst2sect>
    b61e:	61 15       	cp	r22, r1
    b620:	71 05       	cpc	r23, r1
    b622:	81 05       	cpc	r24, r1
    b624:	91 05       	cpc	r25, r1
    b626:	f9 f2       	breq	.-66     	; 0xb5e6 <f_read+0x100>
    b628:	2b 01       	movw	r4, r22
    b62a:	3c 01       	movw	r6, r24
    b62c:	40 0e       	add	r4, r16
    b62e:	51 1e       	adc	r5, r17
    b630:	61 1c       	adc	r6, r1
    b632:	71 1c       	adc	r7, r1
    b634:	65 01       	movw	r12, r10
    b636:	cd 2c       	mov	r12, r13
    b638:	dd 24       	eor	r13, r13
    b63a:	c6 94       	lsr	r12
    b63c:	c1 14       	cp	r12, r1
    b63e:	d1 04       	cpc	r13, r1
    b640:	d1 f1       	breq	.+116    	; 0xb6b6 <f_read+0x1d0>
    b642:	eb 81       	ldd	r30, Y+3	; 0x03
    b644:	fc 81       	ldd	r31, Y+4	; 0x04
    b646:	81 85       	ldd	r24, Z+9	; 0x09
    b648:	92 85       	ldd	r25, Z+10	; 0x0a
    b64a:	98 01       	movw	r18, r16
    b64c:	2c 0d       	add	r18, r12
    b64e:	3d 1d       	adc	r19, r13
    b650:	82 17       	cp	r24, r18
    b652:	93 07       	cpc	r25, r19
    b654:	18 f4       	brcc	.+6      	; 0xb65c <f_read+0x176>
    b656:	6c 01       	movw	r12, r24
    b658:	c0 1a       	sub	r12, r16
    b65a:	d1 0a       	sbc	r13, r17
    b65c:	86 01       	movw	r16, r12
    b65e:	a3 01       	movw	r20, r6
    b660:	92 01       	movw	r18, r4
    b662:	b4 01       	movw	r22, r8
    b664:	eb 81       	ldd	r30, Y+3	; 0x03
    b666:	fc 81       	ldd	r31, Y+4	; 0x04
    b668:	81 81       	ldd	r24, Z+1	; 0x01
    b66a:	0e 94 cd 68 	call	0xd19a	; 0xd19a <disk_read>
    b66e:	89 2b       	or	r24, r25
    b670:	11 f6       	brne	.-124    	; 0xb5f6 <f_read+0x110>
    b672:	f7 01       	movw	r30, r14
    b674:	86 85       	ldd	r24, Z+14	; 0x0e
    b676:	87 ff       	sbrs	r24, 7
    b678:	1a c0       	rjmp	.+52     	; 0xb6ae <f_read+0x1c8>
    b67a:	80 8d       	ldd	r24, Z+24	; 0x18
    b67c:	91 8d       	ldd	r25, Z+25	; 0x19
    b67e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b680:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b682:	84 19       	sub	r24, r4
    b684:	95 09       	sbc	r25, r5
    b686:	a6 09       	sbc	r26, r6
    b688:	b7 09       	sbc	r27, r7
    b68a:	a6 01       	movw	r20, r12
    b68c:	60 e0       	ldi	r22, 0x00	; 0
    b68e:	70 e0       	ldi	r23, 0x00	; 0
    b690:	84 17       	cp	r24, r20
    b692:	95 07       	cpc	r25, r21
    b694:	a6 07       	cpc	r26, r22
    b696:	b7 07       	cpc	r27, r23
    b698:	50 f4       	brcc	.+20     	; 0xb6ae <f_read+0x1c8>
    b69a:	98 2f       	mov	r25, r24
    b69c:	88 27       	eor	r24, r24
    b69e:	99 0f       	add	r25, r25
    b6a0:	40 e0       	ldi	r20, 0x00	; 0
    b6a2:	52 e0       	ldi	r21, 0x02	; 2
    b6a4:	b1 01       	movw	r22, r2
    b6a6:	88 0d       	add	r24, r8
    b6a8:	99 1d       	adc	r25, r9
    b6aa:	0e 94 2d 47 	call	0x8e5a	; 0x8e5a <mem_cpy.part.0>
    b6ae:	dc 2c       	mov	r13, r12
    b6b0:	cc 24       	eor	r12, r12
    b6b2:	dd 0c       	add	r13, r13
    b6b4:	41 c0       	rjmp	.+130    	; 0xb738 <f_read+0x252>
    b6b6:	f7 01       	movw	r30, r14
    b6b8:	20 8d       	ldd	r18, Z+24	; 0x18
    b6ba:	31 8d       	ldd	r19, Z+25	; 0x19
    b6bc:	42 8d       	ldd	r20, Z+26	; 0x1a
    b6be:	53 8d       	ldd	r21, Z+27	; 0x1b
    b6c0:	42 16       	cp	r4, r18
    b6c2:	53 06       	cpc	r5, r19
    b6c4:	64 06       	cpc	r6, r20
    b6c6:	75 06       	cpc	r7, r21
    b6c8:	f9 f0       	breq	.+62     	; 0xb708 <f_read+0x222>
    b6ca:	86 85       	ldd	r24, Z+14	; 0x0e
    b6cc:	87 ff       	sbrs	r24, 7
    b6ce:	0f c0       	rjmp	.+30     	; 0xb6ee <f_read+0x208>
    b6d0:	01 e0       	ldi	r16, 0x01	; 1
    b6d2:	10 e0       	ldi	r17, 0x00	; 0
    b6d4:	b1 01       	movw	r22, r2
    b6d6:	eb 81       	ldd	r30, Y+3	; 0x03
    b6d8:	fc 81       	ldd	r31, Y+4	; 0x04
    b6da:	81 81       	ldd	r24, Z+1	; 0x01
    b6dc:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <disk_write>
    b6e0:	89 2b       	or	r24, r25
    b6e2:	09 f0       	breq	.+2      	; 0xb6e6 <f_read+0x200>
    b6e4:	88 cf       	rjmp	.-240    	; 0xb5f6 <f_read+0x110>
    b6e6:	f7 01       	movw	r30, r14
    b6e8:	86 85       	ldd	r24, Z+14	; 0x0e
    b6ea:	8f 77       	andi	r24, 0x7F	; 127
    b6ec:	86 87       	std	Z+14, r24	; 0x0e
    b6ee:	e9 81       	ldd	r30, Y+1	; 0x01
    b6f0:	fa 81       	ldd	r31, Y+2	; 0x02
    b6f2:	01 e0       	ldi	r16, 0x01	; 1
    b6f4:	10 e0       	ldi	r17, 0x00	; 0
    b6f6:	a3 01       	movw	r20, r6
    b6f8:	92 01       	movw	r18, r4
    b6fa:	b1 01       	movw	r22, r2
    b6fc:	81 81       	ldd	r24, Z+1	; 0x01
    b6fe:	0e 94 cd 68 	call	0xd19a	; 0xd19a <disk_read>
    b702:	89 2b       	or	r24, r25
    b704:	09 f0       	breq	.+2      	; 0xb708 <f_read+0x222>
    b706:	77 cf       	rjmp	.-274    	; 0xb5f6 <f_read+0x110>
    b708:	f7 01       	movw	r30, r14
    b70a:	40 8e       	std	Z+24, r4	; 0x18
    b70c:	51 8e       	std	Z+25, r5	; 0x19
    b70e:	62 8e       	std	Z+26, r6	; 0x1a
    b710:	73 8e       	std	Z+27, r7	; 0x1b
    b712:	f7 01       	movw	r30, r14
    b714:	60 89       	ldd	r22, Z+16	; 0x10
    b716:	71 89       	ldd	r23, Z+17	; 0x11
    b718:	71 70       	andi	r23, 0x01	; 1
    b71a:	80 e0       	ldi	r24, 0x00	; 0
    b71c:	92 e0       	ldi	r25, 0x02	; 2
    b71e:	86 1b       	sub	r24, r22
    b720:	97 0b       	sbc	r25, r23
    b722:	65 01       	movw	r12, r10
    b724:	8a 15       	cp	r24, r10
    b726:	9b 05       	cpc	r25, r11
    b728:	08 f4       	brcc	.+2      	; 0xb72c <f_read+0x246>
    b72a:	6c 01       	movw	r12, r24
    b72c:	62 0d       	add	r22, r2
    b72e:	73 1d       	adc	r23, r3
    b730:	a6 01       	movw	r20, r12
    b732:	c4 01       	movw	r24, r8
    b734:	0e 94 2d 47 	call	0x8e5a	; 0x8e5a <mem_cpy.part.0>
    b738:	ac 18       	sub	r10, r12
    b73a:	bd 08       	sbc	r11, r13
    b73c:	ed 81       	ldd	r30, Y+5	; 0x05
    b73e:	fe 81       	ldd	r31, Y+6	; 0x06
    b740:	80 81       	ld	r24, Z
    b742:	91 81       	ldd	r25, Z+1	; 0x01
    b744:	8c 0d       	add	r24, r12
    b746:	9d 1d       	adc	r25, r13
    b748:	91 83       	std	Z+1, r25	; 0x01
    b74a:	80 83       	st	Z, r24
    b74c:	8c 0c       	add	r8, r12
    b74e:	9d 1c       	adc	r9, r13
    b750:	f7 01       	movw	r30, r14
    b752:	80 89       	ldd	r24, Z+16	; 0x10
    b754:	91 89       	ldd	r25, Z+17	; 0x11
    b756:	a2 89       	ldd	r26, Z+18	; 0x12
    b758:	b3 89       	ldd	r27, Z+19	; 0x13
    b75a:	8c 0d       	add	r24, r12
    b75c:	9d 1d       	adc	r25, r13
    b75e:	a1 1d       	adc	r26, r1
    b760:	b1 1d       	adc	r27, r1
    b762:	80 8b       	std	Z+16, r24	; 0x10
    b764:	91 8b       	std	Z+17, r25	; 0x11
    b766:	a2 8b       	std	Z+18, r26	; 0x12
    b768:	b3 8b       	std	Z+19, r27	; 0x13
    b76a:	f5 ce       	rjmp	.-534    	; 0xb556 <f_read+0x70>
    b76c:	80 e0       	ldi	r24, 0x00	; 0
    b76e:	01 c0       	rjmp	.+2      	; 0xb772 <f_read+0x28c>
    b770:	87 e0       	ldi	r24, 0x07	; 7
    b772:	90 e0       	ldi	r25, 0x00	; 0
    b774:	26 96       	adiw	r28, 0x06	; 6
    b776:	e2 e1       	ldi	r30, 0x12	; 18
    b778:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

0000b77c <f_write>:
    b77c:	a8 e0       	ldi	r26, 0x08	; 8
    b77e:	b0 e0       	ldi	r27, 0x00	; 0
    b780:	e4 ec       	ldi	r30, 0xC4	; 196
    b782:	fb e5       	ldi	r31, 0x5B	; 91
    b784:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
    b788:	7c 01       	movw	r14, r24
    b78a:	3b 01       	movw	r6, r22
    b78c:	5a 01       	movw	r10, r20
    b78e:	38 87       	std	Y+8, r19	; 0x08
    b790:	2f 83       	std	Y+7, r18	; 0x07
    b792:	f9 01       	movw	r30, r18
    b794:	11 82       	std	Z+1, r1	; 0x01
    b796:	10 82       	st	Z, r1
    b798:	be 01       	movw	r22, r28
    b79a:	6f 5f       	subi	r22, 0xFF	; 255
    b79c:	7f 4f       	sbci	r23, 0xFF	; 255
    b79e:	0e 94 01 47 	call	0x8e02	; 0x8e02 <validate>
    b7a2:	00 97       	sbiw	r24, 0x00	; 0
    b7a4:	09 f0       	breq	.+2      	; 0xb7a8 <f_write+0x2c>
    b7a6:	7d c1       	rjmp	.+762    	; 0xbaa2 <f_write+0x326>
    b7a8:	f7 01       	movw	r30, r14
    b7aa:	87 85       	ldd	r24, Z+15	; 0x0f
    b7ac:	90 e0       	ldi	r25, 0x00	; 0
    b7ae:	00 97       	sbiw	r24, 0x00	; 0
    b7b0:	09 f0       	breq	.+2      	; 0xb7b4 <f_write+0x38>
    b7b2:	77 c1       	rjmp	.+750    	; 0xbaa2 <f_write+0x326>
    b7b4:	86 85       	ldd	r24, Z+14	; 0x0e
    b7b6:	81 ff       	sbrs	r24, 1
    b7b8:	72 c1       	rjmp	.+740    	; 0xba9e <f_write+0x322>
    b7ba:	80 89       	ldd	r24, Z+16	; 0x10
    b7bc:	91 89       	ldd	r25, Z+17	; 0x11
    b7be:	a2 89       	ldd	r26, Z+18	; 0x12
    b7c0:	b3 89       	ldd	r27, Z+19	; 0x13
    b7c2:	ac 01       	movw	r20, r24
    b7c4:	bd 01       	movw	r22, r26
    b7c6:	4a 0d       	add	r20, r10
    b7c8:	5b 1d       	adc	r21, r11
    b7ca:	61 1d       	adc	r22, r1
    b7cc:	71 1d       	adc	r23, r1
    b7ce:	48 17       	cp	r20, r24
    b7d0:	59 07       	cpc	r21, r25
    b7d2:	6a 07       	cpc	r22, r26
    b7d4:	7b 07       	cpc	r23, r27
    b7d6:	18 f4       	brcc	.+6      	; 0xb7de <f_write+0x62>
    b7d8:	5c 01       	movw	r10, r24
    b7da:	a0 94       	com	r10
    b7dc:	b0 94       	com	r11
    b7de:	97 01       	movw	r18, r14
    b7e0:	2c 5d       	subi	r18, 0xDC	; 220
    b7e2:	3f 4f       	sbci	r19, 0xFF	; 255
    b7e4:	3e 83       	std	Y+6, r19	; 0x06
    b7e6:	2d 83       	std	Y+5, r18	; 0x05
    b7e8:	a1 14       	cp	r10, r1
    b7ea:	b1 04       	cpc	r11, r1
    b7ec:	09 f4       	brne	.+2      	; 0xb7f0 <f_write+0x74>
    b7ee:	4d c0       	rjmp	.+154    	; 0xb88a <f_write+0x10e>
    b7f0:	f7 01       	movw	r30, r14
    b7f2:	40 89       	ldd	r20, Z+16	; 0x10
    b7f4:	51 89       	ldd	r21, Z+17	; 0x11
    b7f6:	62 89       	ldd	r22, Z+18	; 0x12
    b7f8:	73 89       	ldd	r23, Z+19	; 0x13
    b7fa:	db 01       	movw	r26, r22
    b7fc:	ca 01       	movw	r24, r20
    b7fe:	91 70       	andi	r25, 0x01	; 1
    b800:	aa 27       	eor	r26, r26
    b802:	bb 27       	eor	r27, r27
    b804:	89 2b       	or	r24, r25
    b806:	8a 2b       	or	r24, r26
    b808:	8b 2b       	or	r24, r27
    b80a:	09 f0       	breq	.+2      	; 0xb80e <f_write+0x92>
    b80c:	05 c1       	rjmp	.+522    	; 0xba18 <f_write+0x29c>
    b80e:	e9 81       	ldd	r30, Y+1	; 0x01
    b810:	fa 81       	ldd	r31, Y+2	; 0x02
    b812:	81 84       	ldd	r8, Z+9	; 0x09
    b814:	92 84       	ldd	r9, Z+10	; 0x0a
    b816:	f1 e0       	ldi	r31, 0x01	; 1
    b818:	8f 1a       	sub	r8, r31
    b81a:	91 08       	sbc	r9, r1
    b81c:	db 01       	movw	r26, r22
    b81e:	ca 01       	movw	r24, r20
    b820:	e9 e0       	ldi	r30, 0x09	; 9
    b822:	b6 95       	lsr	r27
    b824:	a7 95       	ror	r26
    b826:	97 95       	ror	r25
    b828:	87 95       	ror	r24
    b82a:	ea 95       	dec	r30
    b82c:	d1 f7       	brne	.-12     	; 0xb822 <f_write+0xa6>
    b82e:	88 22       	and	r8, r24
    b830:	99 22       	and	r9, r25
    b832:	81 14       	cp	r8, r1
    b834:	91 04       	cpc	r9, r1
    b836:	09 f0       	breq	.+2      	; 0xb83a <f_write+0xbe>
    b838:	51 c0       	rjmp	.+162    	; 0xb8dc <f_write+0x160>
    b83a:	f7 01       	movw	r30, r14
    b83c:	41 15       	cp	r20, r1
    b83e:	51 05       	cpc	r21, r1
    b840:	61 05       	cpc	r22, r1
    b842:	71 05       	cpc	r23, r1
    b844:	69 f4       	brne	.+26     	; 0xb860 <f_write+0xe4>
    b846:	66 81       	ldd	r22, Z+6	; 0x06
    b848:	77 81       	ldd	r23, Z+7	; 0x07
    b84a:	80 85       	ldd	r24, Z+8	; 0x08
    b84c:	91 85       	ldd	r25, Z+9	; 0x09
    b84e:	61 15       	cp	r22, r1
    b850:	71 05       	cpc	r23, r1
    b852:	81 05       	cpc	r24, r1
    b854:	91 05       	cpc	r25, r1
    b856:	f9 f4       	brne	.+62     	; 0xb896 <f_write+0x11a>
    b858:	40 e0       	ldi	r20, 0x00	; 0
    b85a:	50 e0       	ldi	r21, 0x00	; 0
    b85c:	ba 01       	movw	r22, r20
    b85e:	0d c0       	rjmp	.+26     	; 0xb87a <f_write+0xfe>
    b860:	82 a1       	ldd	r24, Z+34	; 0x22
    b862:	93 a1       	ldd	r25, Z+35	; 0x23
    b864:	89 2b       	or	r24, r25
    b866:	21 f0       	breq	.+8      	; 0xb870 <f_write+0xf4>
    b868:	c7 01       	movw	r24, r14
    b86a:	0e 94 8a 46 	call	0x8d14	; 0x8d14 <clmt_clust>
    b86e:	08 c0       	rjmp	.+16     	; 0xb880 <f_write+0x104>
    b870:	f7 01       	movw	r30, r14
    b872:	44 89       	ldd	r20, Z+20	; 0x14
    b874:	55 89       	ldd	r21, Z+21	; 0x15
    b876:	66 89       	ldd	r22, Z+22	; 0x16
    b878:	77 89       	ldd	r23, Z+23	; 0x17
    b87a:	c7 01       	movw	r24, r14
    b87c:	0e 94 c9 4f 	call	0x9f92	; 0x9f92 <create_chain>
    b880:	61 15       	cp	r22, r1
    b882:	71 05       	cpc	r23, r1
    b884:	81 05       	cpc	r24, r1
    b886:	91 05       	cpc	r25, r1
    b888:	31 f4       	brne	.+12     	; 0xb896 <f_write+0x11a>
    b88a:	f7 01       	movw	r30, r14
    b88c:	86 85       	ldd	r24, Z+14	; 0x0e
    b88e:	80 64       	ori	r24, 0x40	; 64
    b890:	86 87       	std	Z+14, r24	; 0x0e
    b892:	80 e0       	ldi	r24, 0x00	; 0
    b894:	05 c1       	rjmp	.+522    	; 0xbaa0 <f_write+0x324>
    b896:	61 30       	cpi	r22, 0x01	; 1
    b898:	71 05       	cpc	r23, r1
    b89a:	81 05       	cpc	r24, r1
    b89c:	91 05       	cpc	r25, r1
    b89e:	11 f4       	brne	.+4      	; 0xb8a4 <f_write+0x128>
    b8a0:	82 e0       	ldi	r24, 0x02	; 2
    b8a2:	07 c0       	rjmp	.+14     	; 0xb8b2 <f_write+0x136>
    b8a4:	6f 3f       	cpi	r22, 0xFF	; 255
    b8a6:	ff ef       	ldi	r31, 0xFF	; 255
    b8a8:	7f 07       	cpc	r23, r31
    b8aa:	8f 07       	cpc	r24, r31
    b8ac:	9f 07       	cpc	r25, r31
    b8ae:	21 f4       	brne	.+8      	; 0xb8b8 <f_write+0x13c>
    b8b0:	81 e0       	ldi	r24, 0x01	; 1
    b8b2:	f7 01       	movw	r30, r14
    b8b4:	87 87       	std	Z+15, r24	; 0x0f
    b8b6:	f4 c0       	rjmp	.+488    	; 0xbaa0 <f_write+0x324>
    b8b8:	f7 01       	movw	r30, r14
    b8ba:	64 8b       	std	Z+20, r22	; 0x14
    b8bc:	75 8b       	std	Z+21, r23	; 0x15
    b8be:	86 8b       	std	Z+22, r24	; 0x16
    b8c0:	97 8b       	std	Z+23, r25	; 0x17
    b8c2:	06 81       	ldd	r16, Z+6	; 0x06
    b8c4:	17 81       	ldd	r17, Z+7	; 0x07
    b8c6:	20 85       	ldd	r18, Z+8	; 0x08
    b8c8:	31 85       	ldd	r19, Z+9	; 0x09
    b8ca:	01 15       	cp	r16, r1
    b8cc:	11 05       	cpc	r17, r1
    b8ce:	21 05       	cpc	r18, r1
    b8d0:	31 05       	cpc	r19, r1
    b8d2:	21 f4       	brne	.+8      	; 0xb8dc <f_write+0x160>
    b8d4:	66 83       	std	Z+6, r22	; 0x06
    b8d6:	77 83       	std	Z+7, r23	; 0x07
    b8d8:	80 87       	std	Z+8, r24	; 0x08
    b8da:	91 87       	std	Z+9, r25	; 0x09
    b8dc:	f7 01       	movw	r30, r14
    b8de:	86 85       	ldd	r24, Z+14	; 0x0e
    b8e0:	87 ff       	sbrs	r24, 7
    b8e2:	13 c0       	rjmp	.+38     	; 0xb90a <f_write+0x18e>
    b8e4:	20 8d       	ldd	r18, Z+24	; 0x18
    b8e6:	31 8d       	ldd	r19, Z+25	; 0x19
    b8e8:	42 8d       	ldd	r20, Z+26	; 0x1a
    b8ea:	53 8d       	ldd	r21, Z+27	; 0x1b
    b8ec:	e9 81       	ldd	r30, Y+1	; 0x01
    b8ee:	fa 81       	ldd	r31, Y+2	; 0x02
    b8f0:	01 e0       	ldi	r16, 0x01	; 1
    b8f2:	10 e0       	ldi	r17, 0x00	; 0
    b8f4:	6d 81       	ldd	r22, Y+5	; 0x05
    b8f6:	7e 81       	ldd	r23, Y+6	; 0x06
    b8f8:	81 81       	ldd	r24, Z+1	; 0x01
    b8fa:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <disk_write>
    b8fe:	89 2b       	or	r24, r25
    b900:	b9 f6       	brne	.-82     	; 0xb8b0 <f_write+0x134>
    b902:	f7 01       	movw	r30, r14
    b904:	86 85       	ldd	r24, Z+14	; 0x0e
    b906:	8f 77       	andi	r24, 0x7F	; 127
    b908:	86 87       	std	Z+14, r24	; 0x0e
    b90a:	29 81       	ldd	r18, Y+1	; 0x01
    b90c:	3a 81       	ldd	r19, Y+2	; 0x02
    b90e:	3c 83       	std	Y+4, r19	; 0x04
    b910:	2b 83       	std	Y+3, r18	; 0x03
    b912:	f7 01       	movw	r30, r14
    b914:	44 89       	ldd	r20, Z+20	; 0x14
    b916:	55 89       	ldd	r21, Z+21	; 0x15
    b918:	66 89       	ldd	r22, Z+22	; 0x16
    b91a:	77 89       	ldd	r23, Z+23	; 0x17
    b91c:	c9 01       	movw	r24, r18
    b91e:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <clst2sect>
    b922:	61 15       	cp	r22, r1
    b924:	71 05       	cpc	r23, r1
    b926:	81 05       	cpc	r24, r1
    b928:	91 05       	cpc	r25, r1
    b92a:	09 f4       	brne	.+2      	; 0xb92e <f_write+0x1b2>
    b92c:	b9 cf       	rjmp	.-142    	; 0xb8a0 <f_write+0x124>
    b92e:	1b 01       	movw	r2, r22
    b930:	2c 01       	movw	r4, r24
    b932:	28 0c       	add	r2, r8
    b934:	39 1c       	adc	r3, r9
    b936:	41 1c       	adc	r4, r1
    b938:	51 1c       	adc	r5, r1
    b93a:	65 01       	movw	r12, r10
    b93c:	cd 2c       	mov	r12, r13
    b93e:	dd 24       	eor	r13, r13
    b940:	c6 94       	lsr	r12
    b942:	c1 14       	cp	r12, r1
    b944:	d1 04       	cpc	r13, r1
    b946:	f1 f1       	breq	.+124    	; 0xb9c4 <f_write+0x248>
    b948:	eb 81       	ldd	r30, Y+3	; 0x03
    b94a:	fc 81       	ldd	r31, Y+4	; 0x04
    b94c:	81 85       	ldd	r24, Z+9	; 0x09
    b94e:	92 85       	ldd	r25, Z+10	; 0x0a
    b950:	94 01       	movw	r18, r8
    b952:	2c 0d       	add	r18, r12
    b954:	3d 1d       	adc	r19, r13
    b956:	82 17       	cp	r24, r18
    b958:	93 07       	cpc	r25, r19
    b95a:	18 f4       	brcc	.+6      	; 0xb962 <f_write+0x1e6>
    b95c:	6c 01       	movw	r12, r24
    b95e:	c8 18       	sub	r12, r8
    b960:	d9 08       	sbc	r13, r9
    b962:	86 01       	movw	r16, r12
    b964:	a2 01       	movw	r20, r4
    b966:	91 01       	movw	r18, r2
    b968:	b3 01       	movw	r22, r6
    b96a:	eb 81       	ldd	r30, Y+3	; 0x03
    b96c:	fc 81       	ldd	r31, Y+4	; 0x04
    b96e:	81 81       	ldd	r24, Z+1	; 0x01
    b970:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <disk_write>
    b974:	89 2b       	or	r24, r25
    b976:	09 f0       	breq	.+2      	; 0xb97a <f_write+0x1fe>
    b978:	9b cf       	rjmp	.-202    	; 0xb8b0 <f_write+0x134>
    b97a:	f7 01       	movw	r30, r14
    b97c:	80 8d       	ldd	r24, Z+24	; 0x18
    b97e:	91 8d       	ldd	r25, Z+25	; 0x19
    b980:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b982:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b984:	82 19       	sub	r24, r2
    b986:	93 09       	sbc	r25, r3
    b988:	a4 09       	sbc	r26, r4
    b98a:	b5 09       	sbc	r27, r5
    b98c:	a6 01       	movw	r20, r12
    b98e:	60 e0       	ldi	r22, 0x00	; 0
    b990:	70 e0       	ldi	r23, 0x00	; 0
    b992:	84 17       	cp	r24, r20
    b994:	95 07       	cpc	r25, r21
    b996:	a6 07       	cpc	r26, r22
    b998:	b7 07       	cpc	r27, r23
    b99a:	80 f4       	brcc	.+32     	; 0xb9bc <f_write+0x240>
    b99c:	98 2f       	mov	r25, r24
    b99e:	88 27       	eor	r24, r24
    b9a0:	99 0f       	add	r25, r25
    b9a2:	b3 01       	movw	r22, r6
    b9a4:	68 0f       	add	r22, r24
    b9a6:	79 1f       	adc	r23, r25
    b9a8:	40 e0       	ldi	r20, 0x00	; 0
    b9aa:	52 e0       	ldi	r21, 0x02	; 2
    b9ac:	8d 81       	ldd	r24, Y+5	; 0x05
    b9ae:	9e 81       	ldd	r25, Y+6	; 0x06
    b9b0:	0e 94 2d 47 	call	0x8e5a	; 0x8e5a <mem_cpy.part.0>
    b9b4:	f7 01       	movw	r30, r14
    b9b6:	86 85       	ldd	r24, Z+14	; 0x0e
    b9b8:	8f 77       	andi	r24, 0x7F	; 127
    b9ba:	86 87       	std	Z+14, r24	; 0x0e
    b9bc:	dc 2c       	mov	r13, r12
    b9be:	cc 24       	eor	r12, r12
    b9c0:	dd 0c       	add	r13, r13
    b9c2:	43 c0       	rjmp	.+134    	; 0xba4a <f_write+0x2ce>
    b9c4:	f7 01       	movw	r30, r14
    b9c6:	80 8d       	ldd	r24, Z+24	; 0x18
    b9c8:	91 8d       	ldd	r25, Z+25	; 0x19
    b9ca:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b9cc:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b9ce:	28 16       	cp	r2, r24
    b9d0:	39 06       	cpc	r3, r25
    b9d2:	4a 06       	cpc	r4, r26
    b9d4:	5b 06       	cpc	r5, r27
    b9d6:	d9 f0       	breq	.+54     	; 0xba0e <f_write+0x292>
    b9d8:	40 89       	ldd	r20, Z+16	; 0x10
    b9da:	51 89       	ldd	r21, Z+17	; 0x11
    b9dc:	62 89       	ldd	r22, Z+18	; 0x12
    b9de:	73 89       	ldd	r23, Z+19	; 0x13
    b9e0:	82 85       	ldd	r24, Z+10	; 0x0a
    b9e2:	93 85       	ldd	r25, Z+11	; 0x0b
    b9e4:	a4 85       	ldd	r26, Z+12	; 0x0c
    b9e6:	b5 85       	ldd	r27, Z+13	; 0x0d
    b9e8:	48 17       	cp	r20, r24
    b9ea:	59 07       	cpc	r21, r25
    b9ec:	6a 07       	cpc	r22, r26
    b9ee:	7b 07       	cpc	r23, r27
    b9f0:	70 f4       	brcc	.+28     	; 0xba0e <f_write+0x292>
    b9f2:	01 e0       	ldi	r16, 0x01	; 1
    b9f4:	10 e0       	ldi	r17, 0x00	; 0
    b9f6:	a2 01       	movw	r20, r4
    b9f8:	91 01       	movw	r18, r2
    b9fa:	6d 81       	ldd	r22, Y+5	; 0x05
    b9fc:	7e 81       	ldd	r23, Y+6	; 0x06
    b9fe:	eb 81       	ldd	r30, Y+3	; 0x03
    ba00:	fc 81       	ldd	r31, Y+4	; 0x04
    ba02:	81 81       	ldd	r24, Z+1	; 0x01
    ba04:	0e 94 cd 68 	call	0xd19a	; 0xd19a <disk_read>
    ba08:	89 2b       	or	r24, r25
    ba0a:	09 f0       	breq	.+2      	; 0xba0e <f_write+0x292>
    ba0c:	51 cf       	rjmp	.-350    	; 0xb8b0 <f_write+0x134>
    ba0e:	f7 01       	movw	r30, r14
    ba10:	20 8e       	std	Z+24, r2	; 0x18
    ba12:	31 8e       	std	Z+25, r3	; 0x19
    ba14:	42 8e       	std	Z+26, r4	; 0x1a
    ba16:	53 8e       	std	Z+27, r5	; 0x1b
    ba18:	f7 01       	movw	r30, r14
    ba1a:	80 89       	ldd	r24, Z+16	; 0x10
    ba1c:	91 89       	ldd	r25, Z+17	; 0x11
    ba1e:	91 70       	andi	r25, 0x01	; 1
    ba20:	20 e0       	ldi	r18, 0x00	; 0
    ba22:	32 e0       	ldi	r19, 0x02	; 2
    ba24:	28 1b       	sub	r18, r24
    ba26:	39 0b       	sbc	r19, r25
    ba28:	65 01       	movw	r12, r10
    ba2a:	2a 15       	cp	r18, r10
    ba2c:	3b 05       	cpc	r19, r11
    ba2e:	08 f4       	brcc	.+2      	; 0xba32 <f_write+0x2b6>
    ba30:	69 01       	movw	r12, r18
    ba32:	a6 01       	movw	r20, r12
    ba34:	b3 01       	movw	r22, r6
    ba36:	2d 81       	ldd	r18, Y+5	; 0x05
    ba38:	3e 81       	ldd	r19, Y+6	; 0x06
    ba3a:	82 0f       	add	r24, r18
    ba3c:	93 1f       	adc	r25, r19
    ba3e:	0e 94 2d 47 	call	0x8e5a	; 0x8e5a <mem_cpy.part.0>
    ba42:	f7 01       	movw	r30, r14
    ba44:	86 85       	ldd	r24, Z+14	; 0x0e
    ba46:	80 68       	ori	r24, 0x80	; 128
    ba48:	86 87       	std	Z+14, r24	; 0x0e
    ba4a:	ac 18       	sub	r10, r12
    ba4c:	bd 08       	sbc	r11, r13
    ba4e:	ef 81       	ldd	r30, Y+7	; 0x07
    ba50:	f8 85       	ldd	r31, Y+8	; 0x08
    ba52:	80 81       	ld	r24, Z
    ba54:	91 81       	ldd	r25, Z+1	; 0x01
    ba56:	8c 0d       	add	r24, r12
    ba58:	9d 1d       	adc	r25, r13
    ba5a:	91 83       	std	Z+1, r25	; 0x01
    ba5c:	80 83       	st	Z, r24
    ba5e:	6c 0c       	add	r6, r12
    ba60:	7d 1c       	adc	r7, r13
    ba62:	f7 01       	movw	r30, r14
    ba64:	80 89       	ldd	r24, Z+16	; 0x10
    ba66:	91 89       	ldd	r25, Z+17	; 0x11
    ba68:	a2 89       	ldd	r26, Z+18	; 0x12
    ba6a:	b3 89       	ldd	r27, Z+19	; 0x13
    ba6c:	8c 0d       	add	r24, r12
    ba6e:	9d 1d       	adc	r25, r13
    ba70:	a1 1d       	adc	r26, r1
    ba72:	b1 1d       	adc	r27, r1
    ba74:	80 8b       	std	Z+16, r24	; 0x10
    ba76:	91 8b       	std	Z+17, r25	; 0x11
    ba78:	a2 8b       	std	Z+18, r26	; 0x12
    ba7a:	b3 8b       	std	Z+19, r27	; 0x13
    ba7c:	42 85       	ldd	r20, Z+10	; 0x0a
    ba7e:	53 85       	ldd	r21, Z+11	; 0x0b
    ba80:	64 85       	ldd	r22, Z+12	; 0x0c
    ba82:	75 85       	ldd	r23, Z+13	; 0x0d
    ba84:	48 17       	cp	r20, r24
    ba86:	59 07       	cpc	r21, r25
    ba88:	6a 07       	cpc	r22, r26
    ba8a:	7b 07       	cpc	r23, r27
    ba8c:	10 f4       	brcc	.+4      	; 0xba92 <f_write+0x316>
    ba8e:	ac 01       	movw	r20, r24
    ba90:	bd 01       	movw	r22, r26
    ba92:	f7 01       	movw	r30, r14
    ba94:	42 87       	std	Z+10, r20	; 0x0a
    ba96:	53 87       	std	Z+11, r21	; 0x0b
    ba98:	64 87       	std	Z+12, r22	; 0x0c
    ba9a:	75 87       	std	Z+13, r23	; 0x0d
    ba9c:	a5 ce       	rjmp	.-694    	; 0xb7e8 <f_write+0x6c>
    ba9e:	87 e0       	ldi	r24, 0x07	; 7
    baa0:	90 e0       	ldi	r25, 0x00	; 0
    baa2:	28 96       	adiw	r28, 0x08	; 8
    baa4:	e2 e1       	ldi	r30, 0x12	; 18
    baa6:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

0000baaa <f_sync>:
    baaa:	8f 92       	push	r8
    baac:	9f 92       	push	r9
    baae:	af 92       	push	r10
    bab0:	bf 92       	push	r11
    bab2:	ef 92       	push	r14
    bab4:	ff 92       	push	r15
    bab6:	0f 93       	push	r16
    bab8:	1f 93       	push	r17
    baba:	cf 93       	push	r28
    babc:	df 93       	push	r29
    babe:	00 d0       	rcall	.+0      	; 0xbac0 <f_sync+0x16>
    bac0:	cd b7       	in	r28, 0x3d	; 61
    bac2:	de b7       	in	r29, 0x3e	; 62
    bac4:	7c 01       	movw	r14, r24
    bac6:	be 01       	movw	r22, r28
    bac8:	6f 5f       	subi	r22, 0xFF	; 255
    baca:	7f 4f       	sbci	r23, 0xFF	; 255
    bacc:	0e 94 01 47 	call	0x8e02	; 0x8e02 <validate>
    bad0:	00 97       	sbiw	r24, 0x00	; 0
    bad2:	09 f0       	breq	.+2      	; 0xbad6 <f_sync+0x2c>
    bad4:	5d c0       	rjmp	.+186    	; 0xbb90 <f_sync+0xe6>
    bad6:	f7 01       	movw	r30, r14
    bad8:	86 85       	ldd	r24, Z+14	; 0x0e
    bada:	86 ff       	sbrs	r24, 6
    badc:	55 c0       	rjmp	.+170    	; 0xbb88 <f_sync+0xde>
    bade:	87 ff       	sbrs	r24, 7
    bae0:	15 c0       	rjmp	.+42     	; 0xbb0c <f_sync+0x62>
    bae2:	20 8d       	ldd	r18, Z+24	; 0x18
    bae4:	31 8d       	ldd	r19, Z+25	; 0x19
    bae6:	42 8d       	ldd	r20, Z+26	; 0x1a
    bae8:	53 8d       	ldd	r21, Z+27	; 0x1b
    baea:	e9 81       	ldd	r30, Y+1	; 0x01
    baec:	fa 81       	ldd	r31, Y+2	; 0x02
    baee:	01 e0       	ldi	r16, 0x01	; 1
    baf0:	10 e0       	ldi	r17, 0x00	; 0
    baf2:	b7 01       	movw	r22, r14
    baf4:	6c 5d       	subi	r22, 0xDC	; 220
    baf6:	7f 4f       	sbci	r23, 0xFF	; 255
    baf8:	81 81       	ldd	r24, Z+1	; 0x01
    bafa:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <disk_write>
    bafe:	89 2b       	or	r24, r25
    bb00:	09 f0       	breq	.+2      	; 0xbb04 <f_sync+0x5a>
    bb02:	44 c0       	rjmp	.+136    	; 0xbb8c <f_sync+0xe2>
    bb04:	f7 01       	movw	r30, r14
    bb06:	86 85       	ldd	r24, Z+14	; 0x0e
    bb08:	8f 77       	andi	r24, 0x7F	; 127
    bb0a:	86 87       	std	Z+14, r24	; 0x0e
    bb0c:	0e 94 82 6f 	call	0xdf04	; 0xdf04 <get_fattime>
    bb10:	4b 01       	movw	r8, r22
    bb12:	5c 01       	movw	r10, r24
    bb14:	f7 01       	movw	r30, r14
    bb16:	44 8d       	ldd	r20, Z+28	; 0x1c
    bb18:	55 8d       	ldd	r21, Z+29	; 0x1d
    bb1a:	66 8d       	ldd	r22, Z+30	; 0x1e
    bb1c:	77 8d       	ldd	r23, Z+31	; 0x1f
    bb1e:	89 81       	ldd	r24, Y+1	; 0x01
    bb20:	9a 81       	ldd	r25, Y+2	; 0x02
    bb22:	0e 94 84 4a 	call	0x9508	; 0x9508 <move_window>
    bb26:	00 97       	sbiw	r24, 0x00	; 0
    bb28:	99 f5       	brne	.+102    	; 0xbb90 <f_sync+0xe6>
    bb2a:	f7 01       	movw	r30, r14
    bb2c:	00 a1       	ldd	r16, Z+32	; 0x20
    bb2e:	11 a1       	ldd	r17, Z+33	; 0x21
    bb30:	f8 01       	movw	r30, r16
    bb32:	83 85       	ldd	r24, Z+11	; 0x0b
    bb34:	80 62       	ori	r24, 0x20	; 32
    bb36:	83 87       	std	Z+11, r24	; 0x0b
    bb38:	f7 01       	movw	r30, r14
    bb3a:	26 81       	ldd	r18, Z+6	; 0x06
    bb3c:	37 81       	ldd	r19, Z+7	; 0x07
    bb3e:	40 85       	ldd	r20, Z+8	; 0x08
    bb40:	51 85       	ldd	r21, Z+9	; 0x09
    bb42:	b8 01       	movw	r22, r16
    bb44:	80 81       	ld	r24, Z
    bb46:	91 81       	ldd	r25, Z+1	; 0x01
    bb48:	0e 94 0a 49 	call	0x9214	; 0x9214 <st_clust.isra.5>
    bb4c:	f7 01       	movw	r30, r14
    bb4e:	42 85       	ldd	r20, Z+10	; 0x0a
    bb50:	53 85       	ldd	r21, Z+11	; 0x0b
    bb52:	64 85       	ldd	r22, Z+12	; 0x0c
    bb54:	75 85       	ldd	r23, Z+13	; 0x0d
    bb56:	c8 01       	movw	r24, r16
    bb58:	4c 96       	adiw	r24, 0x1c	; 28
    bb5a:	0e 94 be 45 	call	0x8b7c	; 0x8b7c <st_dword>
    bb5e:	b5 01       	movw	r22, r10
    bb60:	a4 01       	movw	r20, r8
    bb62:	c8 01       	movw	r24, r16
    bb64:	46 96       	adiw	r24, 0x16	; 22
    bb66:	0e 94 be 45 	call	0x8b7c	; 0x8b7c <st_dword>
    bb6a:	f8 01       	movw	r30, r16
    bb6c:	12 8a       	std	Z+18, r1	; 0x12
    bb6e:	13 8a       	std	Z+19, r1	; 0x13
    bb70:	89 81       	ldd	r24, Y+1	; 0x01
    bb72:	9a 81       	ldd	r25, Y+2	; 0x02
    bb74:	21 e0       	ldi	r18, 0x01	; 1
    bb76:	fc 01       	movw	r30, r24
    bb78:	23 83       	std	Z+3, r18	; 0x03
    bb7a:	0e 94 6a 49 	call	0x92d4	; 0x92d4 <sync_fs>
    bb7e:	f7 01       	movw	r30, r14
    bb80:	26 85       	ldd	r18, Z+14	; 0x0e
    bb82:	2f 7b       	andi	r18, 0xBF	; 191
    bb84:	26 87       	std	Z+14, r18	; 0x0e
    bb86:	04 c0       	rjmp	.+8      	; 0xbb90 <f_sync+0xe6>
    bb88:	80 e0       	ldi	r24, 0x00	; 0
    bb8a:	01 c0       	rjmp	.+2      	; 0xbb8e <f_sync+0xe4>
    bb8c:	81 e0       	ldi	r24, 0x01	; 1
    bb8e:	90 e0       	ldi	r25, 0x00	; 0
    bb90:	0f 90       	pop	r0
    bb92:	0f 90       	pop	r0
    bb94:	df 91       	pop	r29
    bb96:	cf 91       	pop	r28
    bb98:	1f 91       	pop	r17
    bb9a:	0f 91       	pop	r16
    bb9c:	ff 90       	pop	r15
    bb9e:	ef 90       	pop	r14
    bba0:	bf 90       	pop	r11
    bba2:	af 90       	pop	r10
    bba4:	9f 90       	pop	r9
    bba6:	8f 90       	pop	r8
    bba8:	08 95       	ret

0000bbaa <f_close>:
    bbaa:	a2 e0       	ldi	r26, 0x02	; 2
    bbac:	b0 e0       	ldi	r27, 0x00	; 0
    bbae:	eb ed       	ldi	r30, 0xDB	; 219
    bbb0:	fd e5       	ldi	r31, 0x5D	; 93
    bbb2:	0c 94 4c e3 	jmp	0x1c698	; 0x1c698 <__prologue_saves__+0x1c>
    bbb6:	8c 01       	movw	r16, r24
    bbb8:	78 df       	rcall	.-272    	; 0xbaaa <f_sync>
    bbba:	00 97       	sbiw	r24, 0x00	; 0
    bbbc:	59 f4       	brne	.+22     	; 0xbbd4 <f_close+0x2a>
    bbbe:	be 01       	movw	r22, r28
    bbc0:	6f 5f       	subi	r22, 0xFF	; 255
    bbc2:	7f 4f       	sbci	r23, 0xFF	; 255
    bbc4:	c8 01       	movw	r24, r16
    bbc6:	0e 94 01 47 	call	0x8e02	; 0x8e02 <validate>
    bbca:	00 97       	sbiw	r24, 0x00	; 0
    bbcc:	19 f4       	brne	.+6      	; 0xbbd4 <f_close+0x2a>
    bbce:	f8 01       	movw	r30, r16
    bbd0:	11 82       	std	Z+1, r1	; 0x01
    bbd2:	10 82       	st	Z, r1
    bbd4:	22 96       	adiw	r28, 0x02	; 2
    bbd6:	e4 e0       	ldi	r30, 0x04	; 4
    bbd8:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

0000bbdc <f_chdir>:
    bbdc:	a2 e3       	ldi	r26, 0x32	; 50
    bbde:	b0 e0       	ldi	r27, 0x00	; 0
    bbe0:	e4 ef       	ldi	r30, 0xF4	; 244
    bbe2:	fd e5       	ldi	r31, 0x5D	; 93
    bbe4:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
    bbe8:	9a ab       	std	Y+50, r25	; 0x32
    bbea:	89 ab       	std	Y+49, r24	; 0x31
    bbec:	40 e0       	ldi	r20, 0x00	; 0
    bbee:	be 01       	movw	r22, r28
    bbf0:	61 5d       	subi	r22, 0xD1	; 209
    bbf2:	7f 4f       	sbci	r23, 0xFF	; 255
    bbf4:	ce 01       	movw	r24, r28
    bbf6:	c1 96       	adiw	r24, 0x31	; 49
    bbf8:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <mount_volume>
    bbfc:	00 97       	sbiw	r24, 0x00	; 0
    bbfe:	09 f0       	breq	.+2      	; 0xbc02 <f_chdir+0x26>
    bc00:	44 c0       	rjmp	.+136    	; 0xbc8a <f_chdir+0xae>
    bc02:	8f a5       	ldd	r24, Y+47	; 0x2f
    bc04:	98 a9       	ldd	r25, Y+48	; 0x30
    bc06:	9a 83       	std	Y+2, r25	; 0x02
    bc08:	89 83       	std	Y+1, r24	; 0x01
    bc0a:	80 e0       	ldi	r24, 0x00	; 0
    bc0c:	92 e0       	ldi	r25, 0x02	; 2
    bc0e:	0e 94 11 68 	call	0xd022	; 0xd022 <ff_memalloc>
    bc12:	7c 01       	movw	r14, r24
    bc14:	00 97       	sbiw	r24, 0x00	; 0
    bc16:	a9 f1       	breq	.+106    	; 0xbc82 <f_chdir+0xa6>
    bc18:	ef a5       	ldd	r30, Y+47	; 0x2f
    bc1a:	f8 a9       	ldd	r31, Y+48	; 0x30
    bc1c:	94 87       	std	Z+12, r25	; 0x0c
    bc1e:	83 87       	std	Z+11, r24	; 0x0b
    bc20:	69 a9       	ldd	r22, Y+49	; 0x31
    bc22:	7a a9       	ldd	r23, Y+50	; 0x32
    bc24:	ce 01       	movw	r24, r28
    bc26:	01 96       	adiw	r24, 0x01	; 1
    bc28:	39 d8       	rcall	.-3982   	; 0xac9c <follow_path>
    bc2a:	8c 01       	movw	r16, r24
    bc2c:	89 2b       	or	r24, r25
    bc2e:	09 f5       	brne	.+66     	; 0xbc72 <f_chdir+0x96>
    bc30:	88 a5       	ldd	r24, Y+40	; 0x28
    bc32:	87 ff       	sbrs	r24, 7
    bc34:	0b c0       	rjmp	.+22     	; 0xbc4c <f_chdir+0x70>
    bc36:	ef a5       	ldd	r30, Y+47	; 0x2f
    bc38:	f8 a9       	ldd	r31, Y+48	; 0x30
    bc3a:	8f 81       	ldd	r24, Y+7	; 0x07
    bc3c:	98 85       	ldd	r25, Y+8	; 0x08
    bc3e:	a9 85       	ldd	r26, Y+9	; 0x09
    bc40:	ba 85       	ldd	r27, Y+10	; 0x0a
    bc42:	85 8b       	std	Z+21, r24	; 0x15
    bc44:	96 8b       	std	Z+22, r25	; 0x16
    bc46:	a7 8b       	std	Z+23, r26	; 0x17
    bc48:	b0 8f       	std	Z+24, r27	; 0x18
    bc4a:	13 c0       	rjmp	.+38     	; 0xbc72 <f_chdir+0x96>
    bc4c:	8d 81       	ldd	r24, Y+5	; 0x05
    bc4e:	84 ff       	sbrs	r24, 4
    bc50:	0e c0       	rjmp	.+28     	; 0xbc6e <f_chdir+0x92>
    bc52:	cf a4       	ldd	r12, Y+47	; 0x2f
    bc54:	d8 a8       	ldd	r13, Y+48	; 0x30
    bc56:	6b 8d       	ldd	r22, Y+27	; 0x1b
    bc58:	7c 8d       	ldd	r23, Y+28	; 0x1c
    bc5a:	f6 01       	movw	r30, r12
    bc5c:	80 81       	ld	r24, Z
    bc5e:	0e 94 f5 48 	call	0x91ea	; 0x91ea <ld_clust.isra.4>
    bc62:	f6 01       	movw	r30, r12
    bc64:	65 8b       	std	Z+21, r22	; 0x15
    bc66:	76 8b       	std	Z+22, r23	; 0x16
    bc68:	87 8b       	std	Z+23, r24	; 0x17
    bc6a:	90 8f       	std	Z+24, r25	; 0x18
    bc6c:	02 c0       	rjmp	.+4      	; 0xbc72 <f_chdir+0x96>
    bc6e:	05 e0       	ldi	r16, 0x05	; 5
    bc70:	10 e0       	ldi	r17, 0x00	; 0
    bc72:	c7 01       	movw	r24, r14
    bc74:	0e 94 14 68 	call	0xd028	; 0xd028 <ff_memfree>
    bc78:	04 30       	cpi	r16, 0x04	; 4
    bc7a:	11 05       	cpc	r17, r1
    bc7c:	29 f4       	brne	.+10     	; 0xbc88 <f_chdir+0xac>
    bc7e:	85 e0       	ldi	r24, 0x05	; 5
    bc80:	01 c0       	rjmp	.+2      	; 0xbc84 <f_chdir+0xa8>
    bc82:	81 e1       	ldi	r24, 0x11	; 17
    bc84:	90 e0       	ldi	r25, 0x00	; 0
    bc86:	01 c0       	rjmp	.+2      	; 0xbc8a <f_chdir+0xae>
    bc88:	c8 01       	movw	r24, r16
    bc8a:	e2 96       	adiw	r28, 0x32	; 50
    bc8c:	e8 e0       	ldi	r30, 0x08	; 8
    bc8e:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

0000bc92 <f_getcwd>:
    bc92:	a8 e4       	ldi	r26, 0x48	; 72
    bc94:	b1 e0       	ldi	r27, 0x01	; 1
    bc96:	ef e4       	ldi	r30, 0x4F	; 79
    bc98:	fe e5       	ldi	r31, 0x5E	; 94
    bc9a:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
    bc9e:	c9 5b       	subi	r28, 0xB9	; 185
    bca0:	de 4f       	sbci	r29, 0xFE	; 254
    bca2:	99 83       	std	Y+1, r25	; 0x01
    bca4:	88 83       	st	Y, r24
    bca6:	c7 54       	subi	r28, 0x47	; 71
    bca8:	d1 40       	sbci	r29, 0x01	; 1
    bcaa:	4b 01       	movw	r8, r22
    bcac:	7c 01       	movw	r14, r24
    bcae:	fc 01       	movw	r30, r24
    bcb0:	10 82       	st	Z, r1
    bcb2:	40 e0       	ldi	r20, 0x00	; 0
    bcb4:	be 01       	movw	r22, r28
    bcb6:	6b 5b       	subi	r22, 0xBB	; 187
    bcb8:	7e 4f       	sbci	r23, 0xFE	; 254
    bcba:	ce 01       	movw	r24, r28
    bcbc:	89 5b       	subi	r24, 0xB9	; 185
    bcbe:	9e 4f       	sbci	r25, 0xFE	; 254
    bcc0:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <mount_volume>
    bcc4:	1c 01       	movw	r2, r24
    bcc6:	89 2b       	or	r24, r25
    bcc8:	09 f0       	breq	.+2      	; 0xbccc <f_getcwd+0x3a>
    bcca:	03 c1       	rjmp	.+518    	; 0xbed2 <f_getcwd+0x240>
    bccc:	cb 5b       	subi	r28, 0xBB	; 187
    bcce:	de 4f       	sbci	r29, 0xFE	; 254
    bcd0:	88 81       	ld	r24, Y
    bcd2:	99 81       	ldd	r25, Y+1	; 0x01
    bcd4:	c5 54       	subi	r28, 0x45	; 69
    bcd6:	d1 40       	sbci	r29, 0x01	; 1
    bcd8:	c9 5e       	subi	r28, 0xE9	; 233
    bcda:	de 4f       	sbci	r29, 0xFE	; 254
    bcdc:	99 83       	std	Y+1, r25	; 0x01
    bcde:	88 83       	st	Y, r24
    bce0:	c7 51       	subi	r28, 0x17	; 23
    bce2:	d1 40       	sbci	r29, 0x01	; 1
    bce4:	80 e0       	ldi	r24, 0x00	; 0
    bce6:	92 e0       	ldi	r25, 0x02	; 2
    bce8:	0e 94 11 68 	call	0xd022	; 0xd022 <ff_memalloc>
    bcec:	5c 01       	movw	r10, r24
    bcee:	00 97       	sbiw	r24, 0x00	; 0
    bcf0:	09 f4       	brne	.+2      	; 0xbcf4 <f_getcwd+0x62>
    bcf2:	f3 c0       	rjmp	.+486    	; 0xbeda <f_getcwd+0x248>
    bcf4:	cb 5b       	subi	r28, 0xBB	; 187
    bcf6:	de 4f       	sbci	r29, 0xFE	; 254
    bcf8:	e8 81       	ld	r30, Y
    bcfa:	f9 81       	ldd	r31, Y+1	; 0x01
    bcfc:	c5 54       	subi	r28, 0x45	; 69
    bcfe:	d1 40       	sbci	r29, 0x01	; 1
    bd00:	94 87       	std	Z+12, r25	; 0x0c
    bd02:	83 87       	std	Z+11, r24	; 0x0b
    bd04:	85 89       	ldd	r24, Z+21	; 0x15
    bd06:	96 89       	ldd	r25, Z+22	; 0x16
    bd08:	a7 89       	ldd	r26, Z+23	; 0x17
    bd0a:	b0 8d       	ldd	r27, Z+24	; 0x18
    bd0c:	c3 5e       	subi	r28, 0xE3	; 227
    bd0e:	de 4f       	sbci	r29, 0xFE	; 254
    bd10:	88 83       	st	Y, r24
    bd12:	99 83       	std	Y+1, r25	; 0x01
    bd14:	aa 83       	std	Y+2, r26	; 0x02
    bd16:	bb 83       	std	Y+3, r27	; 0x03
    bd18:	cd 51       	subi	r28, 0x1D	; 29
    bd1a:	d1 40       	sbci	r29, 0x01	; 1
    bd1c:	84 01       	movw	r16, r8
    bd1e:	ce 01       	movw	r24, r28
    bd20:	01 96       	adiw	r24, 0x01	; 1
    bd22:	6c 01       	movw	r12, r24
    bd24:	c3 5e       	subi	r28, 0xE3	; 227
    bd26:	de 4f       	sbci	r29, 0xFE	; 254
    bd28:	48 80       	ld	r4, Y
    bd2a:	59 80       	ldd	r5, Y+1	; 0x01
    bd2c:	6a 80       	ldd	r6, Y+2	; 0x02
    bd2e:	7b 80       	ldd	r7, Y+3	; 0x03
    bd30:	cd 51       	subi	r28, 0x1D	; 29
    bd32:	d1 40       	sbci	r29, 0x01	; 1
    bd34:	41 14       	cp	r4, r1
    bd36:	51 04       	cpc	r5, r1
    bd38:	61 04       	cpc	r6, r1
    bd3a:	71 04       	cpc	r7, r1
    bd3c:	09 f4       	brne	.+2      	; 0xbd40 <f_getcwd+0xae>
    bd3e:	a3 c0       	rjmp	.+326    	; 0xbe86 <f_getcwd+0x1f4>
    bd40:	40 e2       	ldi	r20, 0x20	; 32
    bd42:	50 e0       	ldi	r21, 0x00	; 0
    bd44:	60 e0       	ldi	r22, 0x00	; 0
    bd46:	70 e0       	ldi	r23, 0x00	; 0
    bd48:	ce 01       	movw	r24, r28
    bd4a:	89 5e       	subi	r24, 0xE9	; 233
    bd4c:	9e 4f       	sbci	r25, 0xFE	; 254
    bd4e:	0e 94 08 4f 	call	0x9e10	; 0x9e10 <dir_sdi>
    bd52:	00 97       	sbiw	r24, 0x00	; 0
    bd54:	09 f0       	breq	.+2      	; 0xbd58 <f_getcwd+0xc6>
    bd56:	c6 c0       	rjmp	.+396    	; 0xbee4 <f_getcwd+0x252>
    bd58:	c3 5d       	subi	r28, 0xD3	; 211
    bd5a:	de 4f       	sbci	r29, 0xFE	; 254
    bd5c:	48 81       	ld	r20, Y
    bd5e:	59 81       	ldd	r21, Y+1	; 0x01
    bd60:	6a 81       	ldd	r22, Y+2	; 0x02
    bd62:	7b 81       	ldd	r23, Y+3	; 0x03
    bd64:	cd 52       	subi	r28, 0x2D	; 45
    bd66:	d1 40       	sbci	r29, 0x01	; 1
    bd68:	cb 5b       	subi	r28, 0xBB	; 187
    bd6a:	de 4f       	sbci	r29, 0xFE	; 254
    bd6c:	88 81       	ld	r24, Y
    bd6e:	99 81       	ldd	r25, Y+1	; 0x01
    bd70:	c5 54       	subi	r28, 0x45	; 69
    bd72:	d1 40       	sbci	r29, 0x01	; 1
    bd74:	0e 94 84 4a 	call	0x9508	; 0x9508 <move_window>
    bd78:	00 97       	sbiw	r24, 0x00	; 0
    bd7a:	09 f0       	breq	.+2      	; 0xbd7e <f_getcwd+0xec>
    bd7c:	b3 c0       	rjmp	.+358    	; 0xbee4 <f_getcwd+0x252>
    bd7e:	cf 5c       	subi	r28, 0xCF	; 207
    bd80:	de 4f       	sbci	r29, 0xFE	; 254
    bd82:	68 81       	ld	r22, Y
    bd84:	79 81       	ldd	r23, Y+1	; 0x01
    bd86:	c1 53       	subi	r28, 0x31	; 49
    bd88:	d1 40       	sbci	r29, 0x01	; 1
    bd8a:	cb 5b       	subi	r28, 0xBB	; 187
    bd8c:	de 4f       	sbci	r29, 0xFE	; 254
    bd8e:	e8 81       	ld	r30, Y
    bd90:	f9 81       	ldd	r31, Y+1	; 0x01
    bd92:	c5 54       	subi	r28, 0x45	; 69
    bd94:	d1 40       	sbci	r29, 0x01	; 1
    bd96:	80 81       	ld	r24, Z
    bd98:	0e 94 f5 48 	call	0x91ea	; 0x91ea <ld_clust.isra.4>
    bd9c:	c3 5e       	subi	r28, 0xE3	; 227
    bd9e:	de 4f       	sbci	r29, 0xFE	; 254
    bda0:	68 83       	st	Y, r22
    bda2:	79 83       	std	Y+1, r23	; 0x01
    bda4:	8a 83       	std	Y+2, r24	; 0x02
    bda6:	9b 83       	std	Y+3, r25	; 0x03
    bda8:	cd 51       	subi	r28, 0x1D	; 29
    bdaa:	d1 40       	sbci	r29, 0x01	; 1
    bdac:	40 e0       	ldi	r20, 0x00	; 0
    bdae:	50 e0       	ldi	r21, 0x00	; 0
    bdb0:	ba 01       	movw	r22, r20
    bdb2:	ce 01       	movw	r24, r28
    bdb4:	89 5e       	subi	r24, 0xE9	; 233
    bdb6:	9e 4f       	sbci	r25, 0xFE	; 254
    bdb8:	0e 94 08 4f 	call	0x9e10	; 0x9e10 <dir_sdi>
    bdbc:	00 97       	sbiw	r24, 0x00	; 0
    bdbe:	09 f0       	breq	.+2      	; 0xbdc2 <f_getcwd+0x130>
    bdc0:	91 c0       	rjmp	.+290    	; 0xbee4 <f_getcwd+0x252>
    bdc2:	60 e0       	ldi	r22, 0x00	; 0
    bdc4:	70 e0       	ldi	r23, 0x00	; 0
    bdc6:	ce 01       	movw	r24, r28
    bdc8:	89 5e       	subi	r24, 0xE9	; 233
    bdca:	9e 4f       	sbci	r25, 0xFE	; 254
    bdcc:	0e 94 a1 52 	call	0xa542	; 0xa542 <dir_read>
    bdd0:	00 97       	sbiw	r24, 0x00	; 0
    bdd2:	09 f0       	breq	.+2      	; 0xbdd6 <f_getcwd+0x144>
    bdd4:	89 c0       	rjmp	.+274    	; 0xbee8 <f_getcwd+0x256>
    bdd6:	cf 5c       	subi	r28, 0xCF	; 207
    bdd8:	de 4f       	sbci	r29, 0xFE	; 254
    bdda:	68 81       	ld	r22, Y
    bddc:	79 81       	ldd	r23, Y+1	; 0x01
    bdde:	c1 53       	subi	r28, 0x31	; 49
    bde0:	d1 40       	sbci	r29, 0x01	; 1
    bde2:	cb 5b       	subi	r28, 0xBB	; 187
    bde4:	de 4f       	sbci	r29, 0xFE	; 254
    bde6:	e8 81       	ld	r30, Y
    bde8:	f9 81       	ldd	r31, Y+1	; 0x01
    bdea:	c5 54       	subi	r28, 0x45	; 69
    bdec:	d1 40       	sbci	r29, 0x01	; 1
    bdee:	80 81       	ld	r24, Z
    bdf0:	0e 94 f5 48 	call	0x91ea	; 0x91ea <ld_clust.isra.4>
    bdf4:	46 16       	cp	r4, r22
    bdf6:	57 06       	cpc	r5, r23
    bdf8:	68 06       	cpc	r6, r24
    bdfa:	79 06       	cpc	r7, r25
    bdfc:	41 f4       	brne	.+16     	; 0xbe0e <f_getcwd+0x17c>
    bdfe:	b6 01       	movw	r22, r12
    be00:	ce 01       	movw	r24, r28
    be02:	89 5e       	subi	r24, 0xE9	; 233
    be04:	9e 4f       	sbci	r25, 0xFE	; 254
    be06:	0e 94 e5 47 	call	0x8fca	; 0x8fca <get_fileinfo>
    be0a:	f6 01       	movw	r30, r12
    be0c:	0a c0       	rjmp	.+20     	; 0xbe22 <f_getcwd+0x190>
    be0e:	60 e0       	ldi	r22, 0x00	; 0
    be10:	70 e0       	ldi	r23, 0x00	; 0
    be12:	ce 01       	movw	r24, r28
    be14:	89 5e       	subi	r24, 0xE9	; 233
    be16:	9e 4f       	sbci	r25, 0xFE	; 254
    be18:	0e 94 80 51 	call	0xa300	; 0xa300 <dir_next>
    be1c:	00 97       	sbiw	r24, 0x00	; 0
    be1e:	89 f2       	breq	.-94     	; 0xbdc2 <f_getcwd+0x130>
    be20:	63 c0       	rjmp	.+198    	; 0xbee8 <f_getcwd+0x256>
    be22:	cf 01       	movw	r24, r30
    be24:	8c 19       	sub	r24, r12
    be26:	9d 09       	sbc	r25, r13
    be28:	31 96       	adiw	r30, 0x01	; 1
    be2a:	25 89       	ldd	r18, Z+21	; 0x15
    be2c:	21 11       	cpse	r18, r1
    be2e:	f9 cf       	rjmp	.-14     	; 0xbe22 <f_getcwd+0x190>
    be30:	9c 01       	movw	r18, r24
    be32:	2f 5f       	subi	r18, 0xFF	; 255
    be34:	3f 4f       	sbci	r19, 0xFF	; 255
    be36:	02 17       	cp	r16, r18
    be38:	13 07       	cpc	r17, r19
    be3a:	08 f4       	brcc	.+2      	; 0xbe3e <f_getcwd+0x1ac>
    be3c:	51 c0       	rjmp	.+162    	; 0xbee0 <f_getcwd+0x24e>
    be3e:	f6 01       	movw	r30, r12
    be40:	e8 0f       	add	r30, r24
    be42:	f9 1f       	adc	r31, r25
    be44:	98 01       	movw	r18, r16
    be46:	ce 16       	cp	r12, r30
    be48:	df 06       	cpc	r13, r31
    be4a:	71 f0       	breq	.+28     	; 0xbe68 <f_getcwd+0x1d6>
    be4c:	21 50       	subi	r18, 0x01	; 1
    be4e:	31 09       	sbc	r19, r1
    be50:	45 89       	ldd	r20, Z+21	; 0x15
    be52:	c9 5b       	subi	r28, 0xB9	; 185
    be54:	de 4f       	sbci	r29, 0xFE	; 254
    be56:	a8 81       	ld	r26, Y
    be58:	b9 81       	ldd	r27, Y+1	; 0x01
    be5a:	c7 54       	subi	r28, 0x47	; 71
    be5c:	d1 40       	sbci	r29, 0x01	; 1
    be5e:	a2 0f       	add	r26, r18
    be60:	b3 1f       	adc	r27, r19
    be62:	4c 93       	st	X, r20
    be64:	31 97       	sbiw	r30, 0x01	; 1
    be66:	ef cf       	rjmp	.-34     	; 0xbe46 <f_getcwd+0x1b4>
    be68:	80 95       	com	r24
    be6a:	90 95       	com	r25
    be6c:	08 0f       	add	r16, r24
    be6e:	19 1f       	adc	r17, r25
    be70:	c9 5b       	subi	r28, 0xB9	; 185
    be72:	de 4f       	sbci	r29, 0xFE	; 254
    be74:	e8 81       	ld	r30, Y
    be76:	f9 81       	ldd	r31, Y+1	; 0x01
    be78:	c7 54       	subi	r28, 0x47	; 71
    be7a:	d1 40       	sbci	r29, 0x01	; 1
    be7c:	e0 0f       	add	r30, r16
    be7e:	f1 1f       	adc	r31, r17
    be80:	9f e2       	ldi	r25, 0x2F	; 47
    be82:	90 83       	st	Z, r25
    be84:	4f cf       	rjmp	.-354    	; 0xbd24 <f_getcwd+0x92>
    be86:	08 15       	cp	r16, r8
    be88:	19 05       	cpc	r17, r9
    be8a:	61 f4       	brne	.+24     	; 0xbea4 <f_getcwd+0x212>
    be8c:	01 50       	subi	r16, 0x01	; 1
    be8e:	11 09       	sbc	r17, r1
    be90:	c9 5b       	subi	r28, 0xB9	; 185
    be92:	de 4f       	sbci	r29, 0xFE	; 254
    be94:	e8 81       	ld	r30, Y
    be96:	f9 81       	ldd	r31, Y+1	; 0x01
    be98:	c7 54       	subi	r28, 0x47	; 71
    be9a:	d1 40       	sbci	r29, 0x01	; 1
    be9c:	e0 0f       	add	r30, r16
    be9e:	f1 1f       	adc	r31, r17
    bea0:	8f e2       	ldi	r24, 0x2F	; 47
    bea2:	80 83       	st	Z, r24
    bea4:	ef ef       	ldi	r30, 0xFF	; 255
    bea6:	ee 1a       	sub	r14, r30
    bea8:	fe 0a       	sbc	r15, r30
    beaa:	c9 5b       	subi	r28, 0xB9	; 185
    beac:	de 4f       	sbci	r29, 0xFE	; 254
    beae:	e8 81       	ld	r30, Y
    beb0:	f9 81       	ldd	r31, Y+1	; 0x01
    beb2:	c7 54       	subi	r28, 0x47	; 71
    beb4:	d1 40       	sbci	r29, 0x01	; 1
    beb6:	e0 0f       	add	r30, r16
    beb8:	f1 1f       	adc	r31, r17
    beba:	80 81       	ld	r24, Z
    bebc:	f7 01       	movw	r30, r14
    bebe:	31 97       	sbiw	r30, 0x01	; 1
    bec0:	80 83       	st	Z, r24
    bec2:	0f 5f       	subi	r16, 0xFF	; 255
    bec4:	1f 4f       	sbci	r17, 0xFF	; 255
    bec6:	08 15       	cp	r16, r8
    bec8:	19 05       	cpc	r17, r9
    beca:	60 f3       	brcs	.-40     	; 0xbea4 <f_getcwd+0x212>
    becc:	c5 01       	movw	r24, r10
    bece:	0e 94 14 68 	call	0xd028	; 0xd028 <ff_memfree>
    bed2:	f7 01       	movw	r30, r14
    bed4:	10 82       	st	Z, r1
    bed6:	c1 01       	movw	r24, r2
    bed8:	0d c0       	rjmp	.+26     	; 0xbef4 <f_getcwd+0x262>
    beda:	81 e1       	ldi	r24, 0x11	; 17
    bedc:	90 e0       	ldi	r25, 0x00	; 0
    bede:	0a c0       	rjmp	.+20     	; 0xbef4 <f_getcwd+0x262>
    bee0:	81 e1       	ldi	r24, 0x11	; 17
    bee2:	90 e0       	ldi	r25, 0x00	; 0
    bee4:	1c 01       	movw	r2, r24
    bee6:	f2 cf       	rjmp	.-28     	; 0xbecc <f_getcwd+0x23a>
    bee8:	84 30       	cpi	r24, 0x04	; 4
    beea:	91 05       	cpc	r25, r1
    beec:	d9 f7       	brne	.-10     	; 0xbee4 <f_getcwd+0x252>
    beee:	82 e0       	ldi	r24, 0x02	; 2
    bef0:	90 e0       	ldi	r25, 0x00	; 0
    bef2:	f8 cf       	rjmp	.-16     	; 0xbee4 <f_getcwd+0x252>
    bef4:	c8 5b       	subi	r28, 0xB8	; 184
    bef6:	de 4f       	sbci	r29, 0xFE	; 254
    bef8:	e2 e1       	ldi	r30, 0x12	; 18
    befa:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

0000befe <f_lseek>:
    befe:	aa e0       	ldi	r26, 0x0A	; 10
    bf00:	b0 e0       	ldi	r27, 0x00	; 0
    bf02:	e5 e8       	ldi	r30, 0x85	; 133
    bf04:	ff e5       	ldi	r31, 0x5F	; 95
    bf06:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
    bf0a:	1c 01       	movw	r2, r24
    bf0c:	6a 01       	movw	r12, r20
    bf0e:	7b 01       	movw	r14, r22
    bf10:	be 01       	movw	r22, r28
    bf12:	6f 5f       	subi	r22, 0xFF	; 255
    bf14:	7f 4f       	sbci	r23, 0xFF	; 255
    bf16:	0e 94 01 47 	call	0x8e02	; 0x8e02 <validate>
    bf1a:	00 97       	sbiw	r24, 0x00	; 0
    bf1c:	09 f0       	breq	.+2      	; 0xbf20 <f_lseek+0x22>
    bf1e:	a7 c2       	rjmp	.+1358   	; 0xc46e <f_lseek+0x570>
    bf20:	f1 01       	movw	r30, r2
    bf22:	87 85       	ldd	r24, Z+15	; 0x0f
    bf24:	90 e0       	ldi	r25, 0x00	; 0
    bf26:	00 97       	sbiw	r24, 0x00	; 0
    bf28:	09 f0       	breq	.+2      	; 0xbf2c <f_lseek+0x2e>
    bf2a:	a1 c2       	rjmp	.+1346   	; 0xc46e <f_lseek+0x570>
    bf2c:	22 a1       	ldd	r18, Z+34	; 0x22
    bf2e:	33 a1       	ldd	r19, Z+35	; 0x23
    bf30:	21 15       	cp	r18, r1
    bf32:	31 05       	cpc	r19, r1
    bf34:	09 f4       	brne	.+2      	; 0xbf38 <f_lseek+0x3a>
    bf36:	2e c1       	rjmp	.+604    	; 0xc194 <f_lseek+0x296>
    bf38:	ff ef       	ldi	r31, 0xFF	; 255
    bf3a:	cf 16       	cp	r12, r31
    bf3c:	df 06       	cpc	r13, r31
    bf3e:	ef 06       	cpc	r14, r31
    bf40:	ff 06       	cpc	r15, r31
    bf42:	09 f0       	breq	.+2      	; 0xbf46 <f_lseek+0x48>
    bf44:	9a c0       	rjmp	.+308    	; 0xc07a <f_lseek+0x17c>
    bf46:	89 01       	movw	r16, r18
    bf48:	0c 5f       	subi	r16, 0xFC	; 252
    bf4a:	1f 4f       	sbci	r17, 0xFF	; 255
    bf4c:	d9 01       	movw	r26, r18
    bf4e:	4d 91       	ld	r20, X+
    bf50:	5d 91       	ld	r21, X+
    bf52:	6d 91       	ld	r22, X+
    bf54:	7c 91       	ld	r23, X
    bf56:	4f 83       	std	Y+7, r20	; 0x07
    bf58:	58 87       	std	Y+8, r21	; 0x08
    bf5a:	69 87       	std	Y+9, r22	; 0x09
    bf5c:	7a 87       	std	Y+10, r23	; 0x0a
    bf5e:	f1 01       	movw	r30, r2
    bf60:	86 80       	ldd	r8, Z+6	; 0x06
    bf62:	97 80       	ldd	r9, Z+7	; 0x07
    bf64:	a0 84       	ldd	r10, Z+8	; 0x08
    bf66:	b1 84       	ldd	r11, Z+9	; 0x09
    bf68:	52 e0       	ldi	r21, 0x02	; 2
    bf6a:	c5 2e       	mov	r12, r21
    bf6c:	d1 2c       	mov	r13, r1
    bf6e:	e1 2c       	mov	r14, r1
    bf70:	f1 2c       	mov	r15, r1
    bf72:	81 14       	cp	r8, r1
    bf74:	91 04       	cpc	r9, r1
    bf76:	a1 04       	cpc	r10, r1
    bf78:	b1 04       	cpc	r11, r1
    bf7a:	09 f4       	brne	.+2      	; 0xbf7e <f_lseek+0x80>
    bf7c:	65 c0       	rjmp	.+202    	; 0xc048 <f_lseek+0x14a>
    bf7e:	24 01       	movw	r4, r8
    bf80:	35 01       	movw	r6, r10
    bf82:	1b 82       	std	Y+3, r1	; 0x03
    bf84:	1c 82       	std	Y+4, r1	; 0x04
    bf86:	1d 82       	std	Y+5, r1	; 0x05
    bf88:	1e 82       	std	Y+6, r1	; 0x06
    bf8a:	2b 81       	ldd	r18, Y+3	; 0x03
    bf8c:	3c 81       	ldd	r19, Y+4	; 0x04
    bf8e:	4d 81       	ldd	r20, Y+5	; 0x05
    bf90:	5e 81       	ldd	r21, Y+6	; 0x06
    bf92:	2f 5f       	subi	r18, 0xFF	; 255
    bf94:	3f 4f       	sbci	r19, 0xFF	; 255
    bf96:	4f 4f       	sbci	r20, 0xFF	; 255
    bf98:	5f 4f       	sbci	r21, 0xFF	; 255
    bf9a:	2b 83       	std	Y+3, r18	; 0x03
    bf9c:	3c 83       	std	Y+4, r19	; 0x04
    bf9e:	4d 83       	std	Y+5, r20	; 0x05
    bfa0:	5e 83       	std	Y+6, r21	; 0x06
    bfa2:	b3 01       	movw	r22, r6
    bfa4:	a2 01       	movw	r20, r4
    bfa6:	d1 01       	movw	r26, r2
    bfa8:	8d 91       	ld	r24, X+
    bfaa:	9c 91       	ld	r25, X
    bfac:	0e 94 54 4e 	call	0x9ca8	; 0x9ca8 <get_fat.isra.10>
    bfb0:	62 30       	cpi	r22, 0x02	; 2
    bfb2:	71 05       	cpc	r23, r1
    bfb4:	81 05       	cpc	r24, r1
    bfb6:	91 05       	cpc	r25, r1
    bfb8:	10 f4       	brcc	.+4      	; 0xbfbe <f_lseek+0xc0>
    bfba:	82 e0       	ldi	r24, 0x02	; 2
    bfbc:	07 c0       	rjmp	.+14     	; 0xbfcc <f_lseek+0xce>
    bfbe:	6f 3f       	cpi	r22, 0xFF	; 255
    bfc0:	ff ef       	ldi	r31, 0xFF	; 255
    bfc2:	7f 07       	cpc	r23, r31
    bfc4:	8f 07       	cpc	r24, r31
    bfc6:	9f 07       	cpc	r25, r31
    bfc8:	29 f4       	brne	.+10     	; 0xbfd4 <f_lseek+0xd6>
    bfca:	81 e0       	ldi	r24, 0x01	; 1
    bfcc:	f1 01       	movw	r30, r2
    bfce:	87 87       	std	Z+15, r24	; 0x0f
    bfd0:	90 e0       	ldi	r25, 0x00	; 0
    bfd2:	4d c2       	rjmp	.+1178   	; 0xc46e <f_lseek+0x570>
    bfd4:	a3 01       	movw	r20, r6
    bfd6:	92 01       	movw	r18, r4
    bfd8:	2f 5f       	subi	r18, 0xFF	; 255
    bfda:	3f 4f       	sbci	r19, 0xFF	; 255
    bfdc:	4f 4f       	sbci	r20, 0xFF	; 255
    bfde:	5f 4f       	sbci	r21, 0xFF	; 255
    bfe0:	2b 01       	movw	r4, r22
    bfe2:	3c 01       	movw	r6, r24
    bfe4:	62 17       	cp	r22, r18
    bfe6:	73 07       	cpc	r23, r19
    bfe8:	84 07       	cpc	r24, r20
    bfea:	95 07       	cpc	r25, r21
    bfec:	71 f2       	breq	.-100    	; 0xbf8a <f_lseek+0x8c>
    bfee:	f2 e0       	ldi	r31, 0x02	; 2
    bff0:	cf 0e       	add	r12, r31
    bff2:	d1 1c       	adc	r13, r1
    bff4:	e1 1c       	adc	r14, r1
    bff6:	f1 1c       	adc	r15, r1
    bff8:	2f 81       	ldd	r18, Y+7	; 0x07
    bffa:	38 85       	ldd	r19, Y+8	; 0x08
    bffc:	49 85       	ldd	r20, Y+9	; 0x09
    bffe:	5a 85       	ldd	r21, Y+10	; 0x0a
    c000:	2c 15       	cp	r18, r12
    c002:	3d 05       	cpc	r19, r13
    c004:	4e 05       	cpc	r20, r14
    c006:	5f 05       	cpc	r21, r15
    c008:	88 f0       	brcs	.+34     	; 0xc02c <f_lseek+0x12e>
    c00a:	2b 81       	ldd	r18, Y+3	; 0x03
    c00c:	3c 81       	ldd	r19, Y+4	; 0x04
    c00e:	4d 81       	ldd	r20, Y+5	; 0x05
    c010:	5e 81       	ldd	r21, Y+6	; 0x06
    c012:	d8 01       	movw	r26, r16
    c014:	2d 93       	st	X+, r18
    c016:	3d 93       	st	X+, r19
    c018:	4d 93       	st	X+, r20
    c01a:	5c 93       	st	X, r21
    c01c:	13 97       	sbiw	r26, 0x03	; 3
    c01e:	f8 01       	movw	r30, r16
    c020:	84 82       	std	Z+4, r8	; 0x04
    c022:	95 82       	std	Z+5, r9	; 0x05
    c024:	a6 82       	std	Z+6, r10	; 0x06
    c026:	b7 82       	std	Z+7, r11	; 0x07
    c028:	08 5f       	subi	r16, 0xF8	; 248
    c02a:	1f 4f       	sbci	r17, 0xFF	; 255
    c02c:	e9 81       	ldd	r30, Y+1	; 0x01
    c02e:	fa 81       	ldd	r31, Y+2	; 0x02
    c030:	81 8c       	ldd	r8, Z+25	; 0x19
    c032:	92 8c       	ldd	r9, Z+26	; 0x1a
    c034:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c036:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c038:	68 15       	cp	r22, r8
    c03a:	79 05       	cpc	r23, r9
    c03c:	8a 05       	cpc	r24, r10
    c03e:	9b 05       	cpc	r25, r11
    c040:	18 f4       	brcc	.+6      	; 0xc048 <f_lseek+0x14a>
    c042:	4b 01       	movw	r8, r22
    c044:	5c 01       	movw	r10, r24
    c046:	9b cf       	rjmp	.-202    	; 0xbf7e <f_lseek+0x80>
    c048:	f1 01       	movw	r30, r2
    c04a:	a2 a1       	ldd	r26, Z+34	; 0x22
    c04c:	b3 a1       	ldd	r27, Z+35	; 0x23
    c04e:	cd 92       	st	X+, r12
    c050:	dd 92       	st	X+, r13
    c052:	ed 92       	st	X+, r14
    c054:	fc 92       	st	X, r15
    c056:	13 97       	sbiw	r26, 0x03	; 3
    c058:	2f 81       	ldd	r18, Y+7	; 0x07
    c05a:	38 85       	ldd	r19, Y+8	; 0x08
    c05c:	49 85       	ldd	r20, Y+9	; 0x09
    c05e:	5a 85       	ldd	r21, Y+10	; 0x0a
    c060:	2c 15       	cp	r18, r12
    c062:	3d 05       	cpc	r19, r13
    c064:	4e 05       	cpc	r20, r14
    c066:	5f 05       	cpc	r21, r15
    c068:	08 f4       	brcc	.+2      	; 0xc06c <f_lseek+0x16e>
    c06a:	f8 c1       	rjmp	.+1008   	; 0xc45c <f_lseek+0x55e>
    c06c:	d8 01       	movw	r26, r16
    c06e:	1d 92       	st	X+, r1
    c070:	1d 92       	st	X+, r1
    c072:	1d 92       	st	X+, r1
    c074:	1c 92       	st	X, r1
    c076:	13 97       	sbiw	r26, 0x03	; 3
    c078:	ef c1       	rjmp	.+990    	; 0xc458 <f_lseek+0x55a>
    c07a:	f1 01       	movw	r30, r2
    c07c:	82 85       	ldd	r24, Z+10	; 0x0a
    c07e:	93 85       	ldd	r25, Z+11	; 0x0b
    c080:	a4 85       	ldd	r26, Z+12	; 0x0c
    c082:	b5 85       	ldd	r27, Z+13	; 0x0d
    c084:	46 01       	movw	r8, r12
    c086:	57 01       	movw	r10, r14
    c088:	8c 15       	cp	r24, r12
    c08a:	9d 05       	cpc	r25, r13
    c08c:	ae 05       	cpc	r26, r14
    c08e:	bf 05       	cpc	r27, r15
    c090:	10 f4       	brcc	.+4      	; 0xc096 <f_lseek+0x198>
    c092:	4c 01       	movw	r8, r24
    c094:	5d 01       	movw	r10, r26
    c096:	f1 01       	movw	r30, r2
    c098:	80 8a       	std	Z+16, r8	; 0x10
    c09a:	91 8a       	std	Z+17, r9	; 0x11
    c09c:	a2 8a       	std	Z+18, r10	; 0x12
    c09e:	b3 8a       	std	Z+19, r11	; 0x13
    c0a0:	81 14       	cp	r8, r1
    c0a2:	91 04       	cpc	r9, r1
    c0a4:	a1 04       	cpc	r10, r1
    c0a6:	b1 04       	cpc	r11, r1
    c0a8:	09 f4       	brne	.+2      	; 0xc0ac <f_lseek+0x1ae>
    c0aa:	d6 c1       	rjmp	.+940    	; 0xc458 <f_lseek+0x55a>
    c0ac:	24 01       	movw	r4, r8
    c0ae:	35 01       	movw	r6, r10
    c0b0:	f1 e0       	ldi	r31, 0x01	; 1
    c0b2:	4f 1a       	sub	r4, r31
    c0b4:	51 08       	sbc	r5, r1
    c0b6:	61 08       	sbc	r6, r1
    c0b8:	71 08       	sbc	r7, r1
    c0ba:	b3 01       	movw	r22, r6
    c0bc:	a2 01       	movw	r20, r4
    c0be:	c1 01       	movw	r24, r2
    c0c0:	0e 94 8a 46 	call	0x8d14	; 0x8d14 <clmt_clust>
    c0c4:	ab 01       	movw	r20, r22
    c0c6:	bc 01       	movw	r22, r24
    c0c8:	f1 01       	movw	r30, r2
    c0ca:	44 8b       	std	Z+20, r20	; 0x14
    c0cc:	55 8b       	std	Z+21, r21	; 0x15
    c0ce:	66 8b       	std	Z+22, r22	; 0x16
    c0d0:	77 8b       	std	Z+23, r23	; 0x17
    c0d2:	e9 80       	ldd	r14, Y+1	; 0x01
    c0d4:	fa 80       	ldd	r15, Y+2	; 0x02
    c0d6:	c7 01       	movw	r24, r14
    c0d8:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <clst2sect>
    c0dc:	61 15       	cp	r22, r1
    c0de:	71 05       	cpc	r23, r1
    c0e0:	81 05       	cpc	r24, r1
    c0e2:	91 05       	cpc	r25, r1
    c0e4:	09 f4       	brne	.+2      	; 0xc0e8 <f_lseek+0x1ea>
    c0e6:	69 cf       	rjmp	.-302    	; 0xbfba <f_lseek+0xbc>
    c0e8:	95 01       	movw	r18, r10
    c0ea:	84 01       	movw	r16, r8
    c0ec:	11 70       	andi	r17, 0x01	; 1
    c0ee:	22 27       	eor	r18, r18
    c0f0:	33 27       	eor	r19, r19
    c0f2:	01 15       	cp	r16, r1
    c0f4:	11 05       	cpc	r17, r1
    c0f6:	21 05       	cpc	r18, r1
    c0f8:	31 05       	cpc	r19, r1
    c0fa:	09 f4       	brne	.+2      	; 0xc0fe <f_lseek+0x200>
    c0fc:	ad c1       	rjmp	.+858    	; 0xc458 <f_lseek+0x55a>
    c0fe:	f7 01       	movw	r30, r14
    c100:	81 84       	ldd	r8, Z+9	; 0x09
    c102:	92 84       	ldd	r9, Z+10	; 0x0a
    c104:	f1 e0       	ldi	r31, 0x01	; 1
    c106:	8f 1a       	sub	r8, r31
    c108:	91 08       	sbc	r9, r1
    c10a:	a1 2c       	mov	r10, r1
    c10c:	b1 2c       	mov	r11, r1
    c10e:	49 e0       	ldi	r20, 0x09	; 9
    c110:	76 94       	lsr	r7
    c112:	67 94       	ror	r6
    c114:	57 94       	ror	r5
    c116:	47 94       	ror	r4
    c118:	4a 95       	dec	r20
    c11a:	d1 f7       	brne	.-12     	; 0xc110 <f_lseek+0x212>
    c11c:	48 20       	and	r4, r8
    c11e:	59 20       	and	r5, r9
    c120:	6a 20       	and	r6, r10
    c122:	7b 20       	and	r7, r11
    c124:	53 01       	movw	r10, r6
    c126:	42 01       	movw	r8, r4
    c128:	86 0e       	add	r8, r22
    c12a:	97 1e       	adc	r9, r23
    c12c:	a8 1e       	adc	r10, r24
    c12e:	b9 1e       	adc	r11, r25
    c130:	f1 01       	movw	r30, r2
    c132:	20 8d       	ldd	r18, Z+24	; 0x18
    c134:	31 8d       	ldd	r19, Z+25	; 0x19
    c136:	42 8d       	ldd	r20, Z+26	; 0x1a
    c138:	53 8d       	ldd	r21, Z+27	; 0x1b
    c13a:	82 16       	cp	r8, r18
    c13c:	93 06       	cpc	r9, r19
    c13e:	a4 06       	cpc	r10, r20
    c140:	b5 06       	cpc	r11, r21
    c142:	09 f4       	brne	.+2      	; 0xc146 <f_lseek+0x248>
    c144:	89 c1       	rjmp	.+786    	; 0xc458 <f_lseek+0x55a>
    c146:	86 85       	ldd	r24, Z+14	; 0x0e
    c148:	b1 01       	movw	r22, r2
    c14a:	6c 5d       	subi	r22, 0xDC	; 220
    c14c:	7f 4f       	sbci	r23, 0xFF	; 255
    c14e:	6b 01       	movw	r12, r22
    c150:	87 ff       	sbrs	r24, 7
    c152:	0d c0       	rjmp	.+26     	; 0xc16e <f_lseek+0x270>
    c154:	01 e0       	ldi	r16, 0x01	; 1
    c156:	10 e0       	ldi	r17, 0x00	; 0
    c158:	f7 01       	movw	r30, r14
    c15a:	81 81       	ldd	r24, Z+1	; 0x01
    c15c:	0e 94 dd 68 	call	0xd1ba	; 0xd1ba <disk_write>
    c160:	89 2b       	or	r24, r25
    c162:	09 f0       	breq	.+2      	; 0xc166 <f_lseek+0x268>
    c164:	32 cf       	rjmp	.-412    	; 0xbfca <f_lseek+0xcc>
    c166:	f1 01       	movw	r30, r2
    c168:	86 85       	ldd	r24, Z+14	; 0x0e
    c16a:	8f 77       	andi	r24, 0x7F	; 127
    c16c:	86 87       	std	Z+14, r24	; 0x0e
    c16e:	e9 81       	ldd	r30, Y+1	; 0x01
    c170:	fa 81       	ldd	r31, Y+2	; 0x02
    c172:	01 e0       	ldi	r16, 0x01	; 1
    c174:	10 e0       	ldi	r17, 0x00	; 0
    c176:	a5 01       	movw	r20, r10
    c178:	94 01       	movw	r18, r8
    c17a:	b6 01       	movw	r22, r12
    c17c:	81 81       	ldd	r24, Z+1	; 0x01
    c17e:	0e 94 cd 68 	call	0xd19a	; 0xd19a <disk_read>
    c182:	89 2b       	or	r24, r25
    c184:	09 f0       	breq	.+2      	; 0xc188 <f_lseek+0x28a>
    c186:	21 cf       	rjmp	.-446    	; 0xbfca <f_lseek+0xcc>
    c188:	f1 01       	movw	r30, r2
    c18a:	80 8e       	std	Z+24, r8	; 0x18
    c18c:	91 8e       	std	Z+25, r9	; 0x19
    c18e:	a2 8e       	std	Z+26, r10	; 0x1a
    c190:	b3 8e       	std	Z+27, r11	; 0x1b
    c192:	62 c1       	rjmp	.+708    	; 0xc458 <f_lseek+0x55a>
    c194:	f1 01       	movw	r30, r2
    c196:	82 85       	ldd	r24, Z+10	; 0x0a
    c198:	93 85       	ldd	r25, Z+11	; 0x0b
    c19a:	a4 85       	ldd	r26, Z+12	; 0x0c
    c19c:	b5 85       	ldd	r27, Z+13	; 0x0d
    c19e:	8c 15       	cp	r24, r12
    c1a0:	9d 05       	cpc	r25, r13
    c1a2:	ae 05       	cpc	r26, r14
    c1a4:	bf 05       	cpc	r27, r15
    c1a6:	28 f4       	brcc	.+10     	; 0xc1b2 <f_lseek+0x2b4>
    c1a8:	26 85       	ldd	r18, Z+14	; 0x0e
    c1aa:	21 fd       	sbrc	r18, 1
    c1ac:	02 c0       	rjmp	.+4      	; 0xc1b2 <f_lseek+0x2b4>
    c1ae:	6c 01       	movw	r12, r24
    c1b0:	7d 01       	movw	r14, r26
    c1b2:	f1 01       	movw	r30, r2
    c1b4:	40 88       	ldd	r4, Z+16	; 0x10
    c1b6:	51 88       	ldd	r5, Z+17	; 0x11
    c1b8:	62 88       	ldd	r6, Z+18	; 0x12
    c1ba:	73 88       	ldd	r7, Z+19	; 0x13
    c1bc:	10 8a       	std	Z+16, r1	; 0x10
    c1be:	11 8a       	std	Z+17, r1	; 0x11
    c1c0:	12 8a       	std	Z+18, r1	; 0x12
    c1c2:	13 8a       	std	Z+19, r1	; 0x13
    c1c4:	c1 14       	cp	r12, r1
    c1c6:	d1 04       	cpc	r13, r1
    c1c8:	e1 04       	cpc	r14, r1
    c1ca:	f1 04       	cpc	r15, r1
    c1cc:	09 f4       	brne	.+2      	; 0xc1d0 <f_lseek+0x2d2>
    c1ce:	48 c1       	rjmp	.+656    	; 0xc460 <f_lseek+0x562>
    c1d0:	e9 81       	ldd	r30, Y+1	; 0x01
    c1d2:	fa 81       	ldd	r31, Y+2	; 0x02
    c1d4:	81 84       	ldd	r8, Z+9	; 0x09
    c1d6:	92 84       	ldd	r9, Z+10	; 0x0a
    c1d8:	a1 2c       	mov	r10, r1
    c1da:	b1 2c       	mov	r11, r1
    c1dc:	39 e0       	ldi	r19, 0x09	; 9
    c1de:	88 0c       	add	r8, r8
    c1e0:	99 1c       	adc	r9, r9
    c1e2:	aa 1c       	adc	r10, r10
    c1e4:	bb 1c       	adc	r11, r11
    c1e6:	3a 95       	dec	r19
    c1e8:	d1 f7       	brne	.-12     	; 0xc1de <f_lseek+0x2e0>
    c1ea:	41 14       	cp	r4, r1
    c1ec:	51 04       	cpc	r5, r1
    c1ee:	61 04       	cpc	r6, r1
    c1f0:	71 04       	cpc	r7, r1
    c1f2:	d9 f1       	breq	.+118    	; 0xc26a <f_lseek+0x36c>
    c1f4:	f1 e0       	ldi	r31, 0x01	; 1
    c1f6:	4f 1a       	sub	r4, r31
    c1f8:	51 08       	sbc	r5, r1
    c1fa:	61 08       	sbc	r6, r1
    c1fc:	71 08       	sbc	r7, r1
    c1fe:	c7 01       	movw	r24, r14
    c200:	b6 01       	movw	r22, r12
    c202:	61 50       	subi	r22, 0x01	; 1
    c204:	71 09       	sbc	r23, r1
    c206:	81 09       	sbc	r24, r1
    c208:	91 09       	sbc	r25, r1
    c20a:	a5 01       	movw	r20, r10
    c20c:	94 01       	movw	r18, r8
    c20e:	0e 94 d1 e2 	call	0x1c5a2	; 0x1c5a2 <__udivmodsi4>
    c212:	2b 83       	std	Y+3, r18	; 0x03
    c214:	3c 83       	std	Y+4, r19	; 0x04
    c216:	4d 83       	std	Y+5, r20	; 0x05
    c218:	5e 83       	std	Y+6, r21	; 0x06
    c21a:	c3 01       	movw	r24, r6
    c21c:	b2 01       	movw	r22, r4
    c21e:	a5 01       	movw	r20, r10
    c220:	94 01       	movw	r18, r8
    c222:	0e 94 d1 e2 	call	0x1c5a2	; 0x1c5a2 <__udivmodsi4>
    c226:	6b 81       	ldd	r22, Y+3	; 0x03
    c228:	7c 81       	ldd	r23, Y+4	; 0x04
    c22a:	8d 81       	ldd	r24, Y+5	; 0x05
    c22c:	9e 81       	ldd	r25, Y+6	; 0x06
    c22e:	62 17       	cp	r22, r18
    c230:	73 07       	cpc	r23, r19
    c232:	84 07       	cpc	r24, r20
    c234:	95 07       	cpc	r25, r21
    c236:	c8 f0       	brcs	.+50     	; 0xc26a <f_lseek+0x36c>
    c238:	88 27       	eor	r24, r24
    c23a:	99 27       	eor	r25, r25
    c23c:	dc 01       	movw	r26, r24
    c23e:	88 19       	sub	r24, r8
    c240:	99 09       	sbc	r25, r9
    c242:	aa 09       	sbc	r26, r10
    c244:	bb 09       	sbc	r27, r11
    c246:	48 22       	and	r4, r24
    c248:	59 22       	and	r5, r25
    c24a:	6a 22       	and	r6, r26
    c24c:	7b 22       	and	r7, r27
    c24e:	f1 01       	movw	r30, r2
    c250:	40 8a       	std	Z+16, r4	; 0x10
    c252:	51 8a       	std	Z+17, r5	; 0x11
    c254:	62 8a       	std	Z+18, r6	; 0x12
    c256:	73 8a       	std	Z+19, r7	; 0x13
    c258:	c4 18       	sub	r12, r4
    c25a:	d5 08       	sbc	r13, r5
    c25c:	e6 08       	sbc	r14, r6
    c25e:	f7 08       	sbc	r15, r7
    c260:	44 89       	ldd	r20, Z+20	; 0x14
    c262:	55 89       	ldd	r21, Z+21	; 0x15
    c264:	66 89       	ldd	r22, Z+22	; 0x16
    c266:	77 89       	ldd	r23, Z+23	; 0x17
    c268:	29 c0       	rjmp	.+82     	; 0xc2bc <f_lseek+0x3be>
    c26a:	f1 01       	movw	r30, r2
    c26c:	46 81       	ldd	r20, Z+6	; 0x06
    c26e:	57 81       	ldd	r21, Z+7	; 0x07
    c270:	60 85       	ldd	r22, Z+8	; 0x08
    c272:	71 85       	ldd	r23, Z+9	; 0x09
    c274:	41 15       	cp	r20, r1
    c276:	51 05       	cpc	r21, r1
    c278:	61 05       	cpc	r22, r1
    c27a:	71 05       	cpc	r23, r1
    c27c:	d1 f4       	brne	.+52     	; 0xc2b2 <f_lseek+0x3b4>
    c27e:	40 e0       	ldi	r20, 0x00	; 0
    c280:	50 e0       	ldi	r21, 0x00	; 0
    c282:	ba 01       	movw	r22, r20
    c284:	c1 01       	movw	r24, r2
    c286:	0e 94 c9 4f 	call	0x9f92	; 0x9f92 <create_chain>
    c28a:	ab 01       	movw	r20, r22
    c28c:	bc 01       	movw	r22, r24
    c28e:	41 30       	cpi	r20, 0x01	; 1
    c290:	51 05       	cpc	r21, r1
    c292:	61 05       	cpc	r22, r1
    c294:	71 05       	cpc	r23, r1
    c296:	09 f4       	brne	.+2      	; 0xc29a <f_lseek+0x39c>
    c298:	90 ce       	rjmp	.-736    	; 0xbfba <f_lseek+0xbc>
    c29a:	4f 3f       	cpi	r20, 0xFF	; 255
    c29c:	ff ef       	ldi	r31, 0xFF	; 255
    c29e:	5f 07       	cpc	r21, r31
    c2a0:	6f 07       	cpc	r22, r31
    c2a2:	7f 07       	cpc	r23, r31
    c2a4:	09 f4       	brne	.+2      	; 0xc2a8 <f_lseek+0x3aa>
    c2a6:	91 ce       	rjmp	.-734    	; 0xbfca <f_lseek+0xcc>
    c2a8:	f1 01       	movw	r30, r2
    c2aa:	46 83       	std	Z+6, r20	; 0x06
    c2ac:	57 83       	std	Z+7, r21	; 0x07
    c2ae:	60 87       	std	Z+8, r22	; 0x08
    c2b0:	71 87       	std	Z+9, r23	; 0x09
    c2b2:	f1 01       	movw	r30, r2
    c2b4:	44 8b       	std	Z+20, r20	; 0x14
    c2b6:	55 8b       	std	Z+21, r21	; 0x15
    c2b8:	66 8b       	std	Z+22, r22	; 0x16
    c2ba:	77 8b       	std	Z+23, r23	; 0x17
    c2bc:	41 15       	cp	r20, r1
    c2be:	51 05       	cpc	r21, r1
    c2c0:	61 05       	cpc	r22, r1
    c2c2:	71 05       	cpc	r23, r1
    c2c4:	09 f0       	breq	.+2      	; 0xc2c8 <f_lseek+0x3ca>
    c2c6:	40 c0       	rjmp	.+128    	; 0xc348 <f_lseek+0x44a>
    c2c8:	c1 2c       	mov	r12, r1
    c2ca:	d1 2c       	mov	r13, r1
    c2cc:	76 01       	movw	r14, r12
    c2ce:	79 c0       	rjmp	.+242    	; 0xc3c2 <f_lseek+0x4c4>
    c2d0:	c8 18       	sub	r12, r8
    c2d2:	d9 08       	sbc	r13, r9
    c2d4:	ea 08       	sbc	r14, r10
    c2d6:	fb 08       	sbc	r15, r11
    c2d8:	f1 01       	movw	r30, r2
    c2da:	80 89       	ldd	r24, Z+16	; 0x10
    c2dc:	91 89       	ldd	r25, Z+17	; 0x11
    c2de:	a2 89       	ldd	r26, Z+18	; 0x12
    c2e0:	b3 89       	ldd	r27, Z+19	; 0x13
    c2e2:	88 0d       	add	r24, r8
    c2e4:	99 1d       	adc	r25, r9
    c2e6:	aa 1d       	adc	r26, r10
    c2e8:	bb 1d       	adc	r27, r11
    c2ea:	80 8b       	std	Z+16, r24	; 0x10
    c2ec:	91 8b       	std	Z+17, r25	; 0x11
    c2ee:	a2 8b       	std	Z+18, r26	; 0x12
    c2f0:	b3 8b       	std	Z+19, r27	; 0x13
    c2f2:	86 85       	ldd	r24, Z+14	; 0x0e
    c2f4:	81 ff       	sbrs	r24, 1
    c2f6:	2f c0       	rjmp	.+94     	; 0xc356 <f_lseek+0x458>
    c2f8:	c1 01       	movw	r24, r2
    c2fa:	0e 94 c9 4f 	call	0x9f92	; 0x9f92 <create_chain>
    c2fe:	ab 01       	movw	r20, r22
    c300:	bc 01       	movw	r22, r24
    c302:	41 15       	cp	r20, r1
    c304:	51 05       	cpc	r21, r1
    c306:	61 05       	cpc	r22, r1
    c308:	71 05       	cpc	r23, r1
    c30a:	61 f1       	breq	.+88     	; 0xc364 <f_lseek+0x466>
    c30c:	4f 3f       	cpi	r20, 0xFF	; 255
    c30e:	bf ef       	ldi	r27, 0xFF	; 255
    c310:	5b 07       	cpc	r21, r27
    c312:	6b 07       	cpc	r22, r27
    c314:	7b 07       	cpc	r23, r27
    c316:	09 f4       	brne	.+2      	; 0xc31a <f_lseek+0x41c>
    c318:	58 ce       	rjmp	.-848    	; 0xbfca <f_lseek+0xcc>
    c31a:	42 30       	cpi	r20, 0x02	; 2
    c31c:	51 05       	cpc	r21, r1
    c31e:	61 05       	cpc	r22, r1
    c320:	71 05       	cpc	r23, r1
    c322:	08 f4       	brcc	.+2      	; 0xc326 <f_lseek+0x428>
    c324:	4a ce       	rjmp	.-876    	; 0xbfba <f_lseek+0xbc>
    c326:	e9 81       	ldd	r30, Y+1	; 0x01
    c328:	fa 81       	ldd	r31, Y+2	; 0x02
    c32a:	81 8d       	ldd	r24, Z+25	; 0x19
    c32c:	92 8d       	ldd	r25, Z+26	; 0x1a
    c32e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c330:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c332:	48 17       	cp	r20, r24
    c334:	59 07       	cpc	r21, r25
    c336:	6a 07       	cpc	r22, r26
    c338:	7b 07       	cpc	r23, r27
    c33a:	08 f0       	brcs	.+2      	; 0xc33e <f_lseek+0x440>
    c33c:	3e ce       	rjmp	.-900    	; 0xbfba <f_lseek+0xbc>
    c33e:	f1 01       	movw	r30, r2
    c340:	44 8b       	std	Z+20, r20	; 0x14
    c342:	55 8b       	std	Z+21, r21	; 0x15
    c344:	66 8b       	std	Z+22, r22	; 0x16
    c346:	77 8b       	std	Z+23, r23	; 0x17
    c348:	8c 14       	cp	r8, r12
    c34a:	9d 04       	cpc	r9, r13
    c34c:	ae 04       	cpc	r10, r14
    c34e:	bf 04       	cpc	r11, r15
    c350:	08 f4       	brcc	.+2      	; 0xc354 <f_lseek+0x456>
    c352:	be cf       	rjmp	.-132    	; 0xc2d0 <f_lseek+0x3d2>
    c354:	0a c0       	rjmp	.+20     	; 0xc36a <f_lseek+0x46c>
    c356:	80 81       	ld	r24, Z
    c358:	91 81       	ldd	r25, Z+1	; 0x01
    c35a:	0e 94 54 4e 	call	0x9ca8	; 0x9ca8 <get_fat.isra.10>
    c35e:	ab 01       	movw	r20, r22
    c360:	bc 01       	movw	r22, r24
    c362:	d4 cf       	rjmp	.-88     	; 0xc30c <f_lseek+0x40e>
    c364:	c1 2c       	mov	r12, r1
    c366:	d1 2c       	mov	r13, r1
    c368:	76 01       	movw	r14, r12
    c36a:	f1 01       	movw	r30, r2
    c36c:	80 89       	ldd	r24, Z+16	; 0x10
    c36e:	91 89       	ldd	r25, Z+17	; 0x11
    c370:	a2 89       	ldd	r26, Z+18	; 0x12
    c372:	b3 89       	ldd	r27, Z+19	; 0x13
    c374:	8c 0d       	add	r24, r12
    c376:	9d 1d       	adc	r25, r13
    c378:	ae 1d       	adc	r26, r14
    c37a:	bf 1d       	adc	r27, r15
    c37c:	80 8b       	std	Z+16, r24	; 0x10
    c37e:	91 8b       	std	Z+17, r25	; 0x11
    c380:	a2 8b       	std	Z+18, r26	; 0x12
    c382:	b3 8b       	std	Z+19, r27	; 0x13
    c384:	d7 01       	movw	r26, r14
    c386:	c6 01       	movw	r24, r12
    c388:	91 70       	andi	r25, 0x01	; 1
    c38a:	aa 27       	eor	r26, r26
    c38c:	bb 27       	eor	r27, r27
    c38e:	89 2b       	or	r24, r25
    c390:	8a 2b       	or	r24, r26
    c392:	8b 2b       	or	r24, r27
    c394:	09 f4       	brne	.+2      	; 0xc398 <f_lseek+0x49a>
    c396:	98 cf       	rjmp	.-208    	; 0xc2c8 <f_lseek+0x3ca>
    c398:	89 81       	ldd	r24, Y+1	; 0x01
    c39a:	9a 81       	ldd	r25, Y+2	; 0x02
    c39c:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <clst2sect>
    c3a0:	61 15       	cp	r22, r1
    c3a2:	71 05       	cpc	r23, r1
    c3a4:	81 05       	cpc	r24, r1
    c3a6:	91 05       	cpc	r25, r1
    c3a8:	09 f4       	brne	.+2      	; 0xc3ac <f_lseek+0x4ae>
    c3aa:	07 ce       	rjmp	.-1010   	; 0xbfba <f_lseek+0xbc>
    c3ac:	29 e0       	ldi	r18, 0x09	; 9
    c3ae:	f6 94       	lsr	r15
    c3b0:	e7 94       	ror	r14
    c3b2:	d7 94       	ror	r13
    c3b4:	c7 94       	ror	r12
    c3b6:	2a 95       	dec	r18
    c3b8:	d1 f7       	brne	.-12     	; 0xc3ae <f_lseek+0x4b0>
    c3ba:	c6 0e       	add	r12, r22
    c3bc:	d7 1e       	adc	r13, r23
    c3be:	e8 1e       	adc	r14, r24
    c3c0:	f9 1e       	adc	r15, r25
    c3c2:	f1 01       	movw	r30, r2
    c3c4:	80 89       	ldd	r24, Z+16	; 0x10
    c3c6:	91 89       	ldd	r25, Z+17	; 0x11
    c3c8:	a2 89       	ldd	r26, Z+18	; 0x12
    c3ca:	b3 89       	ldd	r27, Z+19	; 0x13
    c3cc:	42 85       	ldd	r20, Z+10	; 0x0a
    c3ce:	53 85       	ldd	r21, Z+11	; 0x0b
    c3d0:	64 85       	ldd	r22, Z+12	; 0x0c
    c3d2:	75 85       	ldd	r23, Z+13	; 0x0d
    c3d4:	48 17       	cp	r20, r24
    c3d6:	59 07       	cpc	r21, r25
    c3d8:	6a 07       	cpc	r22, r26
    c3da:	7b 07       	cpc	r23, r27
    c3dc:	38 f4       	brcc	.+14     	; 0xc3ec <f_lseek+0x4ee>
    c3de:	82 87       	std	Z+10, r24	; 0x0a
    c3e0:	93 87       	std	Z+11, r25	; 0x0b
    c3e2:	a4 87       	std	Z+12, r26	; 0x0c
    c3e4:	b5 87       	std	Z+13, r27	; 0x0d
    c3e6:	26 85       	ldd	r18, Z+14	; 0x0e
    c3e8:	20 64       	ori	r18, 0x40	; 64
    c3ea:	26 87       	std	Z+14, r18	; 0x0e
    c3ec:	91 70       	andi	r25, 0x01	; 1
    c3ee:	aa 27       	eor	r26, r26
    c3f0:	bb 27       	eor	r27, r27
    c3f2:	89 2b       	or	r24, r25
    c3f4:	8a 2b       	or	r24, r26
    c3f6:	8b 2b       	or	r24, r27
    c3f8:	79 f1       	breq	.+94     	; 0xc458 <f_lseek+0x55a>
    c3fa:	f1 01       	movw	r30, r2
    c3fc:	20 8d       	ldd	r18, Z+24	; 0x18
    c3fe:	31 8d       	ldd	r19, Z+25	; 0x19
    c400:	42 8d       	ldd	r20, Z+26	; 0x1a
    c402:	53 8d       	ldd	r21, Z+27	; 0x1b
    c404:	2c 15       	cp	r18, r12
    c406:	3d 05       	cpc	r19, r13
    c408:	4e 05       	cpc	r20, r14
    c40a:	5f 05       	cpc	r21, r15
    c40c:	29 f1       	breq	.+74     	; 0xc458 <f_lseek+0x55a>
    c40e:	86 85       	ldd	r24, Z+14	; 0x0e
    c410:	b1 01       	movw	r22, r2
    c412:	6c 5d       	subi	r22, 0xDC	; 220
    c414:	7f 4f       	sbci	r23, 0xFF	; 255
    c416:	5b 01       	movw	r10, r22
    c418:	87 ff       	sbrs	r24, 7
    c41a:	0d c0       	rjmp	.+26     	; 0xc436 <f_lseek+0x538>
    c41c:	e9 81       	ldd	r30, Y+1	; 0x01
    c41e:	fa 81       	ldd	r31, Y+2	; 0x02
    c420:	01 e0       	ldi	r16, 0x01	; 1
    c422:	10 e0       	ldi	r17, 0x00	; 0
    c424:	81 81       	ldd	r24, Z+1	; 0x01
    c426:	c9 d6       	rcall	.+3474   	; 0xd1ba <disk_write>
    c428:	89 2b       	or	r24, r25
    c42a:	09 f0       	breq	.+2      	; 0xc42e <f_lseek+0x530>
    c42c:	ce cd       	rjmp	.-1124   	; 0xbfca <f_lseek+0xcc>
    c42e:	f1 01       	movw	r30, r2
    c430:	86 85       	ldd	r24, Z+14	; 0x0e
    c432:	8f 77       	andi	r24, 0x7F	; 127
    c434:	86 87       	std	Z+14, r24	; 0x0e
    c436:	e9 81       	ldd	r30, Y+1	; 0x01
    c438:	fa 81       	ldd	r31, Y+2	; 0x02
    c43a:	01 e0       	ldi	r16, 0x01	; 1
    c43c:	10 e0       	ldi	r17, 0x00	; 0
    c43e:	a7 01       	movw	r20, r14
    c440:	96 01       	movw	r18, r12
    c442:	b5 01       	movw	r22, r10
    c444:	81 81       	ldd	r24, Z+1	; 0x01
    c446:	a9 d6       	rcall	.+3410   	; 0xd19a <disk_read>
    c448:	89 2b       	or	r24, r25
    c44a:	09 f0       	breq	.+2      	; 0xc44e <f_lseek+0x550>
    c44c:	be cd       	rjmp	.-1156   	; 0xbfca <f_lseek+0xcc>
    c44e:	f1 01       	movw	r30, r2
    c450:	c0 8e       	std	Z+24, r12	; 0x18
    c452:	d1 8e       	std	Z+25, r13	; 0x19
    c454:	e2 8e       	std	Z+26, r14	; 0x1a
    c456:	f3 8e       	std	Z+27, r15	; 0x1b
    c458:	80 e0       	ldi	r24, 0x00	; 0
    c45a:	ba cd       	rjmp	.-1164   	; 0xbfd0 <f_lseek+0xd2>
    c45c:	81 e1       	ldi	r24, 0x11	; 17
    c45e:	b8 cd       	rjmp	.-1168   	; 0xbfd0 <f_lseek+0xd2>
    c460:	80 e0       	ldi	r24, 0x00	; 0
    c462:	90 e0       	ldi	r25, 0x00	; 0
    c464:	dc 01       	movw	r26, r24
    c466:	c1 2c       	mov	r12, r1
    c468:	d1 2c       	mov	r13, r1
    c46a:	76 01       	movw	r14, r12
    c46c:	bf cf       	rjmp	.-130    	; 0xc3ec <f_lseek+0x4ee>
    c46e:	2a 96       	adiw	r28, 0x0a	; 10
    c470:	e2 e1       	ldi	r30, 0x12	; 18
    c472:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

0000c476 <f_opendir>:
    c476:	a4 e0       	ldi	r26, 0x04	; 4
    c478:	b0 e0       	ldi	r27, 0x00	; 0
    c47a:	e1 e4       	ldi	r30, 0x41	; 65
    c47c:	f2 e6       	ldi	r31, 0x62	; 98
    c47e:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
    c482:	7c 83       	std	Y+4, r23	; 0x04
    c484:	6b 83       	std	Y+3, r22	; 0x03
    c486:	00 97       	sbiw	r24, 0x00	; 0
    c488:	09 f4       	brne	.+2      	; 0xc48c <f_opendir+0x16>
    c48a:	48 c0       	rjmp	.+144    	; 0xc51c <f_opendir+0xa6>
    c48c:	8c 01       	movw	r16, r24
    c48e:	40 e0       	ldi	r20, 0x00	; 0
    c490:	be 01       	movw	r22, r28
    c492:	6f 5f       	subi	r22, 0xFF	; 255
    c494:	7f 4f       	sbci	r23, 0xFF	; 255
    c496:	ce 01       	movw	r24, r28
    c498:	03 96       	adiw	r24, 0x03	; 3
    c49a:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <mount_volume>
    c49e:	7c 01       	movw	r14, r24
    c4a0:	89 2b       	or	r24, r25
    c4a2:	b9 f5       	brne	.+110    	; 0xc512 <f_opendir+0x9c>
    c4a4:	89 81       	ldd	r24, Y+1	; 0x01
    c4a6:	9a 81       	ldd	r25, Y+2	; 0x02
    c4a8:	f8 01       	movw	r30, r16
    c4aa:	91 83       	std	Z+1, r25	; 0x01
    c4ac:	80 83       	st	Z, r24
    c4ae:	80 e0       	ldi	r24, 0x00	; 0
    c4b0:	92 e0       	ldi	r25, 0x02	; 2
    c4b2:	b7 d5       	rcall	.+2926   	; 0xd022 <ff_memalloc>
    c4b4:	6c 01       	movw	r12, r24
    c4b6:	00 97       	sbiw	r24, 0x00	; 0
    c4b8:	99 f1       	breq	.+102    	; 0xc520 <f_opendir+0xaa>
    c4ba:	e9 81       	ldd	r30, Y+1	; 0x01
    c4bc:	fa 81       	ldd	r31, Y+2	; 0x02
    c4be:	94 87       	std	Z+12, r25	; 0x0c
    c4c0:	83 87       	std	Z+11, r24	; 0x0b
    c4c2:	6b 81       	ldd	r22, Y+3	; 0x03
    c4c4:	7c 81       	ldd	r23, Y+4	; 0x04
    c4c6:	c8 01       	movw	r24, r16
    c4c8:	0e 94 4e 56 	call	0xac9c	; 0xac9c <follow_path>
    c4cc:	7c 01       	movw	r14, r24
    c4ce:	89 2b       	or	r24, r25
    c4d0:	b9 f4       	brne	.+46     	; 0xc500 <f_opendir+0x8a>
    c4d2:	f8 01       	movw	r30, r16
    c4d4:	87 a1       	ldd	r24, Z+39	; 0x27
    c4d6:	87 fd       	sbrc	r24, 7
    c4d8:	28 c0       	rjmp	.+80     	; 0xc52a <f_opendir+0xb4>
    c4da:	84 81       	ldd	r24, Z+4	; 0x04
    c4dc:	84 ff       	sbrs	r24, 4
    c4de:	0d c0       	rjmp	.+26     	; 0xc4fa <f_opendir+0x84>
    c4e0:	62 8d       	ldd	r22, Z+26	; 0x1a
    c4e2:	73 8d       	ldd	r23, Z+27	; 0x1b
    c4e4:	e9 81       	ldd	r30, Y+1	; 0x01
    c4e6:	fa 81       	ldd	r31, Y+2	; 0x02
    c4e8:	80 81       	ld	r24, Z
    c4ea:	0e 94 f5 48 	call	0x91ea	; 0x91ea <ld_clust.isra.4>
    c4ee:	f8 01       	movw	r30, r16
    c4f0:	66 83       	std	Z+6, r22	; 0x06
    c4f2:	77 83       	std	Z+7, r23	; 0x07
    c4f4:	80 87       	std	Z+8, r24	; 0x08
    c4f6:	91 87       	std	Z+9, r25	; 0x09
    c4f8:	18 c0       	rjmp	.+48     	; 0xc52a <f_opendir+0xb4>
    c4fa:	95 e0       	ldi	r25, 0x05	; 5
    c4fc:	e9 2e       	mov	r14, r25
    c4fe:	f1 2c       	mov	r15, r1
    c500:	c6 01       	movw	r24, r12
    c502:	92 d5       	rcall	.+2852   	; 0xd028 <ff_memfree>
    c504:	f4 e0       	ldi	r31, 0x04	; 4
    c506:	ef 16       	cp	r14, r31
    c508:	f1 04       	cpc	r15, r1
    c50a:	f1 f0       	breq	.+60     	; 0xc548 <f_opendir+0xd2>
    c50c:	e1 14       	cp	r14, r1
    c50e:	f1 04       	cpc	r15, r1
    c510:	49 f0       	breq	.+18     	; 0xc524 <f_opendir+0xae>
    c512:	f8 01       	movw	r30, r16
    c514:	11 82       	std	Z+1, r1	; 0x01
    c516:	10 82       	st	Z, r1
    c518:	c7 01       	movw	r24, r14
    c51a:	1a c0       	rjmp	.+52     	; 0xc550 <f_opendir+0xda>
    c51c:	89 e0       	ldi	r24, 0x09	; 9
    c51e:	03 c0       	rjmp	.+6      	; 0xc526 <f_opendir+0xb0>
    c520:	81 e1       	ldi	r24, 0x11	; 17
    c522:	01 c0       	rjmp	.+2      	; 0xc526 <f_opendir+0xb0>
    c524:	80 e0       	ldi	r24, 0x00	; 0
    c526:	90 e0       	ldi	r25, 0x00	; 0
    c528:	13 c0       	rjmp	.+38     	; 0xc550 <f_opendir+0xda>
    c52a:	e9 81       	ldd	r30, Y+1	; 0x01
    c52c:	fa 81       	ldd	r31, Y+2	; 0x02
    c52e:	85 81       	ldd	r24, Z+5	; 0x05
    c530:	96 81       	ldd	r25, Z+6	; 0x06
    c532:	f8 01       	movw	r30, r16
    c534:	93 83       	std	Z+3, r25	; 0x03
    c536:	82 83       	std	Z+2, r24	; 0x02
    c538:	40 e0       	ldi	r20, 0x00	; 0
    c53a:	50 e0       	ldi	r21, 0x00	; 0
    c53c:	ba 01       	movw	r22, r20
    c53e:	c8 01       	movw	r24, r16
    c540:	0e 94 08 4f 	call	0x9e10	; 0x9e10 <dir_sdi>
    c544:	7c 01       	movw	r14, r24
    c546:	dc cf       	rjmp	.-72     	; 0xc500 <f_opendir+0x8a>
    c548:	85 e0       	ldi	r24, 0x05	; 5
    c54a:	e8 2e       	mov	r14, r24
    c54c:	f1 2c       	mov	r15, r1
    c54e:	e1 cf       	rjmp	.-62     	; 0xc512 <f_opendir+0x9c>
    c550:	24 96       	adiw	r28, 0x04	; 4
    c552:	e8 e0       	ldi	r30, 0x08	; 8
    c554:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

0000c558 <f_closedir>:
    c558:	a2 e0       	ldi	r26, 0x02	; 2
    c55a:	b0 e0       	ldi	r27, 0x00	; 0
    c55c:	e2 eb       	ldi	r30, 0xB2	; 178
    c55e:	f2 e6       	ldi	r31, 0x62	; 98
    c560:	0c 94 4c e3 	jmp	0x1c698	; 0x1c698 <__prologue_saves__+0x1c>
    c564:	8c 01       	movw	r16, r24
    c566:	be 01       	movw	r22, r28
    c568:	6f 5f       	subi	r22, 0xFF	; 255
    c56a:	7f 4f       	sbci	r23, 0xFF	; 255
    c56c:	0e 94 01 47 	call	0x8e02	; 0x8e02 <validate>
    c570:	00 97       	sbiw	r24, 0x00	; 0
    c572:	19 f4       	brne	.+6      	; 0xc57a <f_closedir+0x22>
    c574:	f8 01       	movw	r30, r16
    c576:	11 82       	std	Z+1, r1	; 0x01
    c578:	10 82       	st	Z, r1
    c57a:	22 96       	adiw	r28, 0x02	; 2
    c57c:	e4 e0       	ldi	r30, 0x04	; 4
    c57e:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

0000c582 <f_readdir>:
    c582:	a2 e0       	ldi	r26, 0x02	; 2
    c584:	b0 e0       	ldi	r27, 0x00	; 0
    c586:	e7 ec       	ldi	r30, 0xC7	; 199
    c588:	f2 e6       	ldi	r31, 0x62	; 98
    c58a:	0c 94 46 e3 	jmp	0x1c68c	; 0x1c68c <__prologue_saves__+0x10>
    c58e:	7c 01       	movw	r14, r24
    c590:	5b 01       	movw	r10, r22
    c592:	be 01       	movw	r22, r28
    c594:	6f 5f       	subi	r22, 0xFF	; 255
    c596:	7f 4f       	sbci	r23, 0xFF	; 255
    c598:	0e 94 01 47 	call	0x8e02	; 0x8e02 <validate>
    c59c:	00 97       	sbiw	r24, 0x00	; 0
    c59e:	89 f5       	brne	.+98     	; 0xc602 <f_readdir+0x80>
    c5a0:	a1 14       	cp	r10, r1
    c5a2:	b1 04       	cpc	r11, r1
    c5a4:	39 f4       	brne	.+14     	; 0xc5b4 <f_readdir+0x32>
    c5a6:	40 e0       	ldi	r20, 0x00	; 0
    c5a8:	50 e0       	ldi	r21, 0x00	; 0
    c5aa:	ba 01       	movw	r22, r20
    c5ac:	c7 01       	movw	r24, r14
    c5ae:	0e 94 08 4f 	call	0x9e10	; 0x9e10 <dir_sdi>
    c5b2:	27 c0       	rjmp	.+78     	; 0xc602 <f_readdir+0x80>
    c5b4:	80 e0       	ldi	r24, 0x00	; 0
    c5b6:	92 e0       	ldi	r25, 0x02	; 2
    c5b8:	34 d5       	rcall	.+2664   	; 0xd022 <ff_memalloc>
    c5ba:	6c 01       	movw	r12, r24
    c5bc:	00 97       	sbiw	r24, 0x00	; 0
    c5be:	f9 f0       	breq	.+62     	; 0xc5fe <f_readdir+0x7c>
    c5c0:	e9 81       	ldd	r30, Y+1	; 0x01
    c5c2:	fa 81       	ldd	r31, Y+2	; 0x02
    c5c4:	94 87       	std	Z+12, r25	; 0x0c
    c5c6:	83 87       	std	Z+11, r24	; 0x0b
    c5c8:	60 e0       	ldi	r22, 0x00	; 0
    c5ca:	70 e0       	ldi	r23, 0x00	; 0
    c5cc:	c7 01       	movw	r24, r14
    c5ce:	0e 94 a1 52 	call	0xa542	; 0xa542 <dir_read>
    c5d2:	8c 01       	movw	r16, r24
    c5d4:	8b 7f       	andi	r24, 0xFB	; 251
    c5d6:	89 2b       	or	r24, r25
    c5d8:	71 f4       	brne	.+28     	; 0xc5f6 <f_readdir+0x74>
    c5da:	b5 01       	movw	r22, r10
    c5dc:	c7 01       	movw	r24, r14
    c5de:	0e 94 e5 47 	call	0x8fca	; 0x8fca <get_fileinfo>
    c5e2:	60 e0       	ldi	r22, 0x00	; 0
    c5e4:	70 e0       	ldi	r23, 0x00	; 0
    c5e6:	c7 01       	movw	r24, r14
    c5e8:	0e 94 80 51 	call	0xa300	; 0xa300 <dir_next>
    c5ec:	8c 01       	movw	r16, r24
    c5ee:	04 97       	sbiw	r24, 0x04	; 4
    c5f0:	11 f4       	brne	.+4      	; 0xc5f6 <f_readdir+0x74>
    c5f2:	00 e0       	ldi	r16, 0x00	; 0
    c5f4:	10 e0       	ldi	r17, 0x00	; 0
    c5f6:	c6 01       	movw	r24, r12
    c5f8:	17 d5       	rcall	.+2606   	; 0xd028 <ff_memfree>
    c5fa:	c8 01       	movw	r24, r16
    c5fc:	02 c0       	rjmp	.+4      	; 0xc602 <f_readdir+0x80>
    c5fe:	81 e1       	ldi	r24, 0x11	; 17
    c600:	90 e0       	ldi	r25, 0x00	; 0
    c602:	22 96       	adiw	r28, 0x02	; 2
    c604:	ea e0       	ldi	r30, 0x0A	; 10
    c606:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__epilogue_restores__+0x10>

0000c60a <f_stat>:
    c60a:	a0 e3       	ldi	r26, 0x30	; 48
    c60c:	b0 e0       	ldi	r27, 0x00	; 0
    c60e:	eb e0       	ldi	r30, 0x0B	; 11
    c610:	f3 e6       	ldi	r31, 0x63	; 99
    c612:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
    c616:	98 ab       	std	Y+48, r25	; 0x30
    c618:	8f a7       	std	Y+47, r24	; 0x2f
    c61a:	6b 01       	movw	r12, r22
    c61c:	40 e0       	ldi	r20, 0x00	; 0
    c61e:	be 01       	movw	r22, r28
    c620:	6f 5f       	subi	r22, 0xFF	; 255
    c622:	7f 4f       	sbci	r23, 0xFF	; 255
    c624:	ce 01       	movw	r24, r28
    c626:	8f 96       	adiw	r24, 0x2f	; 47
    c628:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <mount_volume>
    c62c:	00 97       	sbiw	r24, 0x00	; 0
    c62e:	39 f5       	brne	.+78     	; 0xc67e <f_stat+0x74>
    c630:	80 e0       	ldi	r24, 0x00	; 0
    c632:	92 e0       	ldi	r25, 0x02	; 2
    c634:	f6 d4       	rcall	.+2540   	; 0xd022 <ff_memalloc>
    c636:	7c 01       	movw	r14, r24
    c638:	00 97       	sbiw	r24, 0x00	; 0
    c63a:	f9 f0       	breq	.+62     	; 0xc67a <f_stat+0x70>
    c63c:	e9 81       	ldd	r30, Y+1	; 0x01
    c63e:	fa 81       	ldd	r31, Y+2	; 0x02
    c640:	94 87       	std	Z+12, r25	; 0x0c
    c642:	83 87       	std	Z+11, r24	; 0x0b
    c644:	6f a5       	ldd	r22, Y+47	; 0x2f
    c646:	78 a9       	ldd	r23, Y+48	; 0x30
    c648:	ce 01       	movw	r24, r28
    c64a:	01 96       	adiw	r24, 0x01	; 1
    c64c:	0e 94 4e 56 	call	0xac9c	; 0xac9c <follow_path>
    c650:	8c 01       	movw	r16, r24
    c652:	89 2b       	or	r24, r25
    c654:	71 f4       	brne	.+28     	; 0xc672 <f_stat+0x68>
    c656:	88 a5       	ldd	r24, Y+40	; 0x28
    c658:	87 fd       	sbrc	r24, 7
    c65a:	09 c0       	rjmp	.+18     	; 0xc66e <f_stat+0x64>
    c65c:	c1 14       	cp	r12, r1
    c65e:	d1 04       	cpc	r13, r1
    c660:	41 f0       	breq	.+16     	; 0xc672 <f_stat+0x68>
    c662:	b6 01       	movw	r22, r12
    c664:	ce 01       	movw	r24, r28
    c666:	01 96       	adiw	r24, 0x01	; 1
    c668:	0e 94 e5 47 	call	0x8fca	; 0x8fca <get_fileinfo>
    c66c:	02 c0       	rjmp	.+4      	; 0xc672 <f_stat+0x68>
    c66e:	06 e0       	ldi	r16, 0x06	; 6
    c670:	10 e0       	ldi	r17, 0x00	; 0
    c672:	c7 01       	movw	r24, r14
    c674:	d9 d4       	rcall	.+2482   	; 0xd028 <ff_memfree>
    c676:	c8 01       	movw	r24, r16
    c678:	02 c0       	rjmp	.+4      	; 0xc67e <f_stat+0x74>
    c67a:	81 e1       	ldi	r24, 0x11	; 17
    c67c:	90 e0       	ldi	r25, 0x00	; 0
    c67e:	e0 96       	adiw	r28, 0x30	; 48
    c680:	e8 e0       	ldi	r30, 0x08	; 8
    c682:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

0000c686 <f_getfree>:
    c686:	aa e0       	ldi	r26, 0x0A	; 10
    c688:	b0 e0       	ldi	r27, 0x00	; 0
    c68a:	e9 e4       	ldi	r30, 0x49	; 73
    c68c:	f3 e6       	ldi	r31, 0x63	; 99
    c68e:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
    c692:	9c 83       	std	Y+4, r25	; 0x04
    c694:	8b 83       	std	Y+3, r24	; 0x03
    c696:	7e 83       	std	Y+6, r23	; 0x06
    c698:	6d 83       	std	Y+5, r22	; 0x05
    c69a:	7a 01       	movw	r14, r20
    c69c:	40 e0       	ldi	r20, 0x00	; 0
    c69e:	be 01       	movw	r22, r28
    c6a0:	6f 5f       	subi	r22, 0xFF	; 255
    c6a2:	7f 4f       	sbci	r23, 0xFF	; 255
    c6a4:	ce 01       	movw	r24, r28
    c6a6:	03 96       	adiw	r24, 0x03	; 3
    c6a8:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <mount_volume>
    c6ac:	8c 01       	movw	r16, r24
    c6ae:	89 2b       	or	r24, r25
    c6b0:	09 f0       	breq	.+2      	; 0xc6b4 <f_getfree+0x2e>
    c6b2:	c4 c0       	rjmp	.+392    	; 0xc83c <f_getfree+0x1b6>
    c6b4:	69 80       	ldd	r6, Y+1	; 0x01
    c6b6:	7a 80       	ldd	r7, Y+2	; 0x02
    c6b8:	d7 01       	movw	r26, r14
    c6ba:	6d 92       	st	X+, r6
    c6bc:	7c 92       	st	X, r7
    c6be:	f3 01       	movw	r30, r6
    c6c0:	81 89       	ldd	r24, Z+17	; 0x11
    c6c2:	92 89       	ldd	r25, Z+18	; 0x12
    c6c4:	a3 89       	ldd	r26, Z+19	; 0x13
    c6c6:	b4 89       	ldd	r27, Z+20	; 0x14
    c6c8:	81 8c       	ldd	r8, Z+25	; 0x19
    c6ca:	92 8c       	ldd	r9, Z+26	; 0x1a
    c6cc:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c6ce:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c6d0:	b5 01       	movw	r22, r10
    c6d2:	a4 01       	movw	r20, r8
    c6d4:	42 50       	subi	r20, 0x02	; 2
    c6d6:	51 09       	sbc	r21, r1
    c6d8:	61 09       	sbc	r22, r1
    c6da:	71 09       	sbc	r23, r1
    c6dc:	48 17       	cp	r20, r24
    c6de:	59 07       	cpc	r21, r25
    c6e0:	6a 07       	cpc	r22, r26
    c6e2:	7b 07       	cpc	r23, r27
    c6e4:	38 f0       	brcs	.+14     	; 0xc6f4 <f_getfree+0x6e>
    c6e6:	ed 81       	ldd	r30, Y+5	; 0x05
    c6e8:	fe 81       	ldd	r31, Y+6	; 0x06
    c6ea:	80 83       	st	Z, r24
    c6ec:	91 83       	std	Z+1, r25	; 0x01
    c6ee:	a2 83       	std	Z+2, r26	; 0x02
    c6f0:	b3 83       	std	Z+3, r27	; 0x03
    c6f2:	a4 c0       	rjmp	.+328    	; 0xc83c <f_getfree+0x1b6>
    c6f4:	80 81       	ld	r24, Z
    c6f6:	81 30       	cpi	r24, 0x01	; 1
    c6f8:	a1 f5       	brne	.+104    	; 0xc762 <f_getfree+0xdc>
    c6fa:	82 e0       	ldi	r24, 0x02	; 2
    c6fc:	88 2e       	mov	r8, r24
    c6fe:	91 2c       	mov	r9, r1
    c700:	a1 2c       	mov	r10, r1
    c702:	b1 2c       	mov	r11, r1
    c704:	c1 2c       	mov	r12, r1
    c706:	d1 2c       	mov	r13, r1
    c708:	76 01       	movw	r14, r12
    c70a:	b5 01       	movw	r22, r10
    c70c:	a4 01       	movw	r20, r8
    c70e:	c3 01       	movw	r24, r6
    c710:	0e 94 54 4e 	call	0x9ca8	; 0x9ca8 <get_fat.isra.10>
    c714:	6f 3f       	cpi	r22, 0xFF	; 255
    c716:	bf ef       	ldi	r27, 0xFF	; 255
    c718:	7b 07       	cpc	r23, r27
    c71a:	8b 07       	cpc	r24, r27
    c71c:	9b 07       	cpc	r25, r27
    c71e:	09 f4       	brne	.+2      	; 0xc722 <f_getfree+0x9c>
    c720:	76 c0       	rjmp	.+236    	; 0xc80e <f_getfree+0x188>
    c722:	61 30       	cpi	r22, 0x01	; 1
    c724:	71 05       	cpc	r23, r1
    c726:	81 05       	cpc	r24, r1
    c728:	91 05       	cpc	r25, r1
    c72a:	09 f4       	brne	.+2      	; 0xc72e <f_getfree+0xa8>
    c72c:	73 c0       	rjmp	.+230    	; 0xc814 <f_getfree+0x18e>
    c72e:	67 2b       	or	r22, r23
    c730:	68 2b       	or	r22, r24
    c732:	69 2b       	or	r22, r25
    c734:	29 f4       	brne	.+10     	; 0xc740 <f_getfree+0xba>
    c736:	ef ef       	ldi	r30, 0xFF	; 255
    c738:	ce 1a       	sub	r12, r30
    c73a:	de 0a       	sbc	r13, r30
    c73c:	ee 0a       	sbc	r14, r30
    c73e:	fe 0a       	sbc	r15, r30
    c740:	ff ef       	ldi	r31, 0xFF	; 255
    c742:	8f 1a       	sub	r8, r31
    c744:	9f 0a       	sbc	r9, r31
    c746:	af 0a       	sbc	r10, r31
    c748:	bf 0a       	sbc	r11, r31
    c74a:	e9 81       	ldd	r30, Y+1	; 0x01
    c74c:	fa 81       	ldd	r31, Y+2	; 0x02
    c74e:	81 8d       	ldd	r24, Z+25	; 0x19
    c750:	92 8d       	ldd	r25, Z+26	; 0x1a
    c752:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c754:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c756:	88 16       	cp	r8, r24
    c758:	99 06       	cpc	r9, r25
    c75a:	aa 06       	cpc	r10, r26
    c75c:	bb 06       	cpc	r11, r27
    c75e:	a8 f2       	brcs	.-86     	; 0xc70a <f_getfree+0x84>
    c760:	5d c0       	rjmp	.+186    	; 0xc81c <f_getfree+0x196>
    c762:	f3 01       	movw	r30, r6
    c764:	45 a0       	ldd	r4, Z+37	; 0x25
    c766:	56 a0       	ldd	r5, Z+38	; 0x26
    c768:	67 a0       	ldd	r6, Z+39	; 0x27
    c76a:	70 a4       	ldd	r7, Z+40	; 0x28
    c76c:	21 2c       	mov	r2, r1
    c76e:	31 2c       	mov	r3, r1
    c770:	c1 2c       	mov	r12, r1
    c772:	d1 2c       	mov	r13, r1
    c774:	76 01       	movw	r14, r12
    c776:	21 14       	cp	r2, r1
    c778:	31 04       	cpc	r3, r1
    c77a:	b1 f4       	brne	.+44     	; 0xc7a8 <f_getfree+0x122>
    c77c:	d3 01       	movw	r26, r6
    c77e:	c2 01       	movw	r24, r4
    c780:	01 96       	adiw	r24, 0x01	; 1
    c782:	a1 1d       	adc	r26, r1
    c784:	b1 1d       	adc	r27, r1
    c786:	8f 83       	std	Y+7, r24	; 0x07
    c788:	98 87       	std	Y+8, r25	; 0x08
    c78a:	a9 87       	std	Y+9, r26	; 0x09
    c78c:	ba 87       	std	Y+10, r27	; 0x0a
    c78e:	b3 01       	movw	r22, r6
    c790:	a2 01       	movw	r20, r4
    c792:	89 81       	ldd	r24, Y+1	; 0x01
    c794:	9a 81       	ldd	r25, Y+2	; 0x02
    c796:	0e 94 84 4a 	call	0x9508	; 0x9508 <move_window>
    c79a:	00 97       	sbiw	r24, 0x00	; 0
    c79c:	09 f0       	breq	.+2      	; 0xc7a0 <f_getfree+0x11a>
    c79e:	3d c0       	rjmp	.+122    	; 0xc81a <f_getfree+0x194>
    c7a0:	4f 80       	ldd	r4, Y+7	; 0x07
    c7a2:	58 84       	ldd	r5, Y+8	; 0x08
    c7a4:	69 84       	ldd	r6, Y+9	; 0x09
    c7a6:	7a 84       	ldd	r7, Y+10	; 0x0a
    c7a8:	e9 81       	ldd	r30, Y+1	; 0x01
    c7aa:	fa 81       	ldd	r31, Y+2	; 0x02
    c7ac:	80 81       	ld	r24, Z
    c7ae:	82 30       	cpi	r24, 0x02	; 2
    c7b0:	79 f4       	brne	.+30     	; 0xc7d0 <f_getfree+0x14a>
    c7b2:	e2 0d       	add	r30, r2
    c7b4:	f3 1d       	adc	r31, r3
    c7b6:	85 a9       	ldd	r24, Z+53	; 0x35
    c7b8:	96 a9       	ldd	r25, Z+54	; 0x36
    c7ba:	89 2b       	or	r24, r25
    c7bc:	29 f4       	brne	.+10     	; 0xc7c8 <f_getfree+0x142>
    c7be:	9f ef       	ldi	r25, 0xFF	; 255
    c7c0:	c9 1a       	sub	r12, r25
    c7c2:	d9 0a       	sbc	r13, r25
    c7c4:	e9 0a       	sbc	r14, r25
    c7c6:	f9 0a       	sbc	r15, r25
    c7c8:	a2 e0       	ldi	r26, 0x02	; 2
    c7ca:	2a 0e       	add	r2, r26
    c7cc:	31 1c       	adc	r3, r1
    c7ce:	15 c0       	rjmp	.+42     	; 0xc7fa <f_getfree+0x174>
    c7d0:	cf 01       	movw	r24, r30
    c7d2:	c5 96       	adiw	r24, 0x35	; 53
    c7d4:	82 0d       	add	r24, r2
    c7d6:	93 1d       	adc	r25, r3
    c7d8:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <ld_dword>
    c7dc:	dc 01       	movw	r26, r24
    c7de:	cb 01       	movw	r24, r22
    c7e0:	bf 70       	andi	r27, 0x0F	; 15
    c7e2:	89 2b       	or	r24, r25
    c7e4:	8a 2b       	or	r24, r26
    c7e6:	8b 2b       	or	r24, r27
    c7e8:	29 f4       	brne	.+10     	; 0xc7f4 <f_getfree+0x16e>
    c7ea:	bf ef       	ldi	r27, 0xFF	; 255
    c7ec:	cb 1a       	sub	r12, r27
    c7ee:	db 0a       	sbc	r13, r27
    c7f0:	eb 0a       	sbc	r14, r27
    c7f2:	fb 0a       	sbc	r15, r27
    c7f4:	e4 e0       	ldi	r30, 0x04	; 4
    c7f6:	2e 0e       	add	r2, r30
    c7f8:	31 1c       	adc	r3, r1
    c7fa:	f1 e0       	ldi	r31, 0x01	; 1
    c7fc:	3f 22       	and	r3, r31
    c7fe:	21 e0       	ldi	r18, 0x01	; 1
    c800:	82 1a       	sub	r8, r18
    c802:	91 08       	sbc	r9, r1
    c804:	a1 08       	sbc	r10, r1
    c806:	b1 08       	sbc	r11, r1
    c808:	09 f0       	breq	.+2      	; 0xc80c <f_getfree+0x186>
    c80a:	b5 cf       	rjmp	.-150    	; 0xc776 <f_getfree+0xf0>
    c80c:	07 c0       	rjmp	.+14     	; 0xc81c <f_getfree+0x196>
    c80e:	01 e0       	ldi	r16, 0x01	; 1
    c810:	10 e0       	ldi	r17, 0x00	; 0
    c812:	04 c0       	rjmp	.+8      	; 0xc81c <f_getfree+0x196>
    c814:	02 e0       	ldi	r16, 0x02	; 2
    c816:	10 e0       	ldi	r17, 0x00	; 0
    c818:	01 c0       	rjmp	.+2      	; 0xc81c <f_getfree+0x196>
    c81a:	8c 01       	movw	r16, r24
    c81c:	ad 81       	ldd	r26, Y+5	; 0x05
    c81e:	be 81       	ldd	r27, Y+6	; 0x06
    c820:	cd 92       	st	X+, r12
    c822:	dd 92       	st	X+, r13
    c824:	ed 92       	st	X+, r14
    c826:	fc 92       	st	X, r15
    c828:	13 97       	sbiw	r26, 0x03	; 3
    c82a:	e9 81       	ldd	r30, Y+1	; 0x01
    c82c:	fa 81       	ldd	r31, Y+2	; 0x02
    c82e:	c1 8a       	std	Z+17, r12	; 0x11
    c830:	d2 8a       	std	Z+18, r13	; 0x12
    c832:	e3 8a       	std	Z+19, r14	; 0x13
    c834:	f4 8a       	std	Z+20, r15	; 0x14
    c836:	84 81       	ldd	r24, Z+4	; 0x04
    c838:	81 60       	ori	r24, 0x01	; 1
    c83a:	84 83       	std	Z+4, r24	; 0x04
    c83c:	c8 01       	movw	r24, r16
    c83e:	2a 96       	adiw	r28, 0x0a	; 10
    c840:	e2 e1       	ldi	r30, 0x12	; 18
    c842:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

0000c846 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    c846:	a0 e6       	ldi	r26, 0x60	; 96
    c848:	b0 e0       	ldi	r27, 0x00	; 0
    c84a:	e9 e2       	ldi	r30, 0x29	; 41
    c84c:	f4 e6       	ldi	r31, 0x64	; 100
    c84e:	0c 94 45 e3 	jmp	0x1c68a	; 0x1c68a <__prologue_saves__+0xe>
    c852:	a1 96       	adiw	r28, 0x21	; 33
    c854:	9f af       	std	Y+63, r25	; 0x3f
    c856:	8e af       	std	Y+62, r24	; 0x3e
    c858:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    c85a:	42 e0       	ldi	r20, 0x02	; 2
    c85c:	be 01       	movw	r22, r28
    c85e:	63 5a       	subi	r22, 0xA3	; 163
    c860:	7f 4f       	sbci	r23, 0xFF	; 255
    c862:	ce 01       	movw	r24, r28
    c864:	81 5a       	subi	r24, 0xA1	; 161
    c866:	9f 4f       	sbci	r25, 0xFF	; 255
    c868:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <mount_volume>
	if (res == FR_OK) {
    c86c:	00 97       	sbiw	r24, 0x00	; 0
    c86e:	09 f0       	breq	.+2      	; 0xc872 <f_unlink+0x2c>
    c870:	8c c0       	rjmp	.+280    	; 0xc98a <f_unlink+0x144>
		dj.obj.fs = fs;
    c872:	6f 96       	adiw	r28, 0x1f	; 31
    c874:	8e ad       	ldd	r24, Y+62	; 0x3e
    c876:	9f ad       	ldd	r25, Y+63	; 0x3f
    c878:	6f 97       	sbiw	r28, 0x1f	; 31
    c87a:	98 ab       	std	Y+48, r25	; 0x30
    c87c:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    c87e:	80 e0       	ldi	r24, 0x00	; 0
    c880:	92 e0       	ldi	r25, 0x02	; 2
    c882:	cf d3       	rcall	.+1950   	; 0xd022 <ff_memalloc>
    c884:	5c 01       	movw	r10, r24
    c886:	00 97       	sbiw	r24, 0x00	; 0
    c888:	09 f4       	brne	.+2      	; 0xc88c <f_unlink+0x46>
    c88a:	49 c0       	rjmp	.+146    	; 0xc91e <f_unlink+0xd8>
    c88c:	6f 96       	adiw	r28, 0x1f	; 31
    c88e:	ee ad       	ldd	r30, Y+62	; 0x3e
    c890:	ff ad       	ldd	r31, Y+63	; 0x3f
    c892:	6f 97       	sbiw	r28, 0x1f	; 31
    c894:	94 87       	std	Z+12, r25	; 0x0c
    c896:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    c898:	a1 96       	adiw	r28, 0x21	; 33
    c89a:	6e ad       	ldd	r22, Y+62	; 0x3e
    c89c:	7f ad       	ldd	r23, Y+63	; 0x3f
    c89e:	a1 97       	sbiw	r28, 0x21	; 33
    c8a0:	ce 01       	movw	r24, r28
    c8a2:	8f 96       	adiw	r24, 0x2f	; 47
    c8a4:	0e 94 4e 56 	call	0xac9c	; 0xac9c <follow_path>
    c8a8:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    c8aa:	89 2b       	or	r24, r25
    c8ac:	a1 f5       	brne	.+104    	; 0xc916 <f_unlink+0xd0>
    c8ae:	67 96       	adiw	r28, 0x17	; 23
    c8b0:	8f ad       	ldd	r24, Y+63	; 0x3f
    c8b2:	67 97       	sbiw	r28, 0x17	; 23
    c8b4:	85 fd       	sbrc	r24, 5
    c8b6:	36 c0       	rjmp	.+108    	; 0xc924 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    c8b8:	87 fd       	sbrc	r24, 7
    c8ba:	34 c0       	rjmp	.+104    	; 0xc924 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    c8bc:	9b a8       	ldd	r9, Y+51	; 0x33
    c8be:	90 fc       	sbrc	r9, 0
    c8c0:	40 c0       	rjmp	.+128    	; 0xc942 <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    c8c2:	6f 96       	adiw	r28, 0x1f	; 31
    c8c4:	0e ad       	ldd	r16, Y+62	; 0x3e
    c8c6:	1f ad       	ldd	r17, Y+63	; 0x3f
    c8c8:	6f 97       	sbiw	r28, 0x1f	; 31
    c8ca:	2b 96       	adiw	r28, 0x0b	; 11
    c8cc:	6e ad       	ldd	r22, Y+62	; 0x3e
    c8ce:	7f ad       	ldd	r23, Y+63	; 0x3f
    c8d0:	2b 97       	sbiw	r28, 0x0b	; 11
    c8d2:	f8 01       	movw	r30, r16
    c8d4:	80 81       	ld	r24, Z
    c8d6:	0e 94 f5 48 	call	0x91ea	; 0x91ea <ld_clust.isra.4>
    c8da:	6b 01       	movw	r12, r22
    c8dc:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    c8de:	94 fe       	sbrs	r9, 4
    c8e0:	33 c0       	rjmp	.+102    	; 0xc948 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    c8e2:	f8 01       	movw	r30, r16
    c8e4:	85 89       	ldd	r24, Z+21	; 0x15
    c8e6:	96 89       	ldd	r25, Z+22	; 0x16
    c8e8:	a7 89       	ldd	r26, Z+23	; 0x17
    c8ea:	b0 8d       	ldd	r27, Z+24	; 0x18
    c8ec:	c8 16       	cp	r12, r24
    c8ee:	d9 06       	cpc	r13, r25
    c8f0:	ea 06       	cpc	r14, r26
    c8f2:	fb 06       	cpc	r15, r27
    c8f4:	31 f1       	breq	.+76     	; 0xc942 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    c8f6:	1a 83       	std	Y+2, r17	; 0x02
    c8f8:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    c8fa:	cf 82       	std	Y+7, r12	; 0x07
    c8fc:	d8 86       	std	Y+8, r13	; 0x08
    c8fe:	e9 86       	std	Y+9, r14	; 0x09
    c900:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    c902:	40 e0       	ldi	r20, 0x00	; 0
    c904:	50 e0       	ldi	r21, 0x00	; 0
    c906:	ba 01       	movw	r22, r20
    c908:	ce 01       	movw	r24, r28
    c90a:	01 96       	adiw	r24, 0x01	; 1
    c90c:	0e 94 08 4f 	call	0x9e10	; 0x9e10 <dir_sdi>
    c910:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    c912:	89 2b       	or	r24, r25
    c914:	51 f0       	breq	.+20     	; 0xc92a <f_unlink+0xe4>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    c916:	c5 01       	movw	r24, r10
    c918:	87 d3       	rcall	.+1806   	; 0xd028 <ff_memfree>
    c91a:	c8 01       	movw	r24, r16
    c91c:	36 c0       	rjmp	.+108    	; 0xc98a <f_unlink+0x144>

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    c91e:	81 e1       	ldi	r24, 0x11	; 17
    c920:	90 e0       	ldi	r25, 0x00	; 0
    c922:	33 c0       	rjmp	.+102    	; 0xc98a <f_unlink+0x144>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    c924:	06 e0       	ldi	r16, 0x06	; 6
    c926:	10 e0       	ldi	r17, 0x00	; 0
    c928:	f6 cf       	rjmp	.-20     	; 0xc916 <f_unlink+0xd0>
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    c92a:	60 e0       	ldi	r22, 0x00	; 0
    c92c:	70 e0       	ldi	r23, 0x00	; 0
    c92e:	ce 01       	movw	r24, r28
    c930:	01 96       	adiw	r24, 0x01	; 1
    c932:	0e 94 a1 52 	call	0xa542	; 0xa542 <dir_read>
    c936:	8c 01       	movw	r16, r24
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    c938:	00 97       	sbiw	r24, 0x00	; 0
    c93a:	19 f0       	breq	.+6      	; 0xc942 <f_unlink+0xfc>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    c93c:	04 97       	sbiw	r24, 0x04	; 4
    c93e:	21 f0       	breq	.+8      	; 0xc948 <f_unlink+0x102>
    c940:	ea cf       	rjmp	.-44     	; 0xc916 <f_unlink+0xd0>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    c942:	07 e0       	ldi	r16, 0x07	; 7
    c944:	10 e0       	ldi	r17, 0x00	; 0
    c946:	e7 cf       	rjmp	.-50     	; 0xc916 <f_unlink+0xd0>
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    c948:	ce 01       	movw	r24, r28
    c94a:	8f 96       	adiw	r24, 0x2f	; 47
    c94c:	0e 94 6a 53 	call	0xa6d4	; 0xa6d4 <dir_remove>
    c950:	8c 01       	movw	r16, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    c952:	89 2b       	or	r24, r25
    c954:	01 f7       	brne	.-64     	; 0xc916 <f_unlink+0xd0>
    c956:	c1 14       	cp	r12, r1
    c958:	d1 04       	cpc	r13, r1
    c95a:	e1 04       	cpc	r14, r1
    c95c:	f1 04       	cpc	r15, r1
    c95e:	41 f4       	brne	.+16     	; 0xc970 <f_unlink+0x12a>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    c960:	6f 96       	adiw	r28, 0x1f	; 31
    c962:	8e ad       	ldd	r24, Y+62	; 0x3e
    c964:	9f ad       	ldd	r25, Y+63	; 0x3f
    c966:	6f 97       	sbiw	r28, 0x1f	; 31
    c968:	0e 94 6a 49 	call	0x92d4	; 0x92d4 <sync_fs>
    c96c:	8c 01       	movw	r16, r24
    c96e:	d3 cf       	rjmp	.-90     	; 0xc916 <f_unlink+0xd0>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    c970:	00 e0       	ldi	r16, 0x00	; 0
    c972:	10 e0       	ldi	r17, 0x00	; 0
    c974:	98 01       	movw	r18, r16
    c976:	b7 01       	movw	r22, r14
    c978:	a6 01       	movw	r20, r12
    c97a:	ce 01       	movw	r24, r28
    c97c:	8f 96       	adiw	r24, 0x2f	; 47
    c97e:	0e 94 ef 50 	call	0xa1de	; 0xa1de <remove_chain>
    c982:	8c 01       	movw	r16, r24
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    c984:	89 2b       	or	r24, r25
    c986:	39 f6       	brne	.-114    	; 0xc916 <f_unlink+0xd0>
    c988:	eb cf       	rjmp	.-42     	; 0xc960 <f_unlink+0x11a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    c98a:	c0 5a       	subi	r28, 0xA0	; 160
    c98c:	df 4f       	sbci	r29, 0xFF	; 255
    c98e:	eb e0       	ldi	r30, 0x0B	; 11
    c990:	0c 94 61 e3 	jmp	0x1c6c2	; 0x1c6c2 <__epilogue_restores__+0xe>

0000c994 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    c994:	a0 e4       	ldi	r26, 0x40	; 64
    c996:	b0 e0       	ldi	r27, 0x00	; 0
    c998:	e0 ed       	ldi	r30, 0xD0	; 208
    c99a:	f4 e6       	ldi	r31, 0x64	; 100
    c99c:	0c 94 40 e3 	jmp	0x1c680	; 0x1c680 <__prologue_saves__+0x4>
    c9a0:	21 96       	adiw	r28, 0x01	; 1
    c9a2:	9f af       	std	Y+63, r25	; 0x3f
    c9a4:	8e af       	std	Y+62, r24	; 0x3e
    c9a6:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    c9a8:	42 e0       	ldi	r20, 0x02	; 2
    c9aa:	be 01       	movw	r22, r28
    c9ac:	63 5c       	subi	r22, 0xC3	; 195
    c9ae:	7f 4f       	sbci	r23, 0xFF	; 255
    c9b0:	ce 01       	movw	r24, r28
    c9b2:	cf 96       	adiw	r24, 0x3f	; 63
    c9b4:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <mount_volume>
	if (res == FR_OK) {
    c9b8:	00 97       	sbiw	r24, 0x00	; 0
    c9ba:	09 f0       	breq	.+2      	; 0xc9be <f_mkdir+0x2a>
    c9bc:	d6 c0       	rjmp	.+428    	; 0xcb6a <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    c9be:	8d ad       	ldd	r24, Y+61	; 0x3d
    c9c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    c9c2:	9a 83       	std	Y+2, r25	; 0x02
    c9c4:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    c9c6:	80 e0       	ldi	r24, 0x00	; 0
    c9c8:	92 e0       	ldi	r25, 0x02	; 2
    c9ca:	2b d3       	rcall	.+1622   	; 0xd022 <ff_memalloc>
    c9cc:	6c 01       	movw	r12, r24
    c9ce:	00 97       	sbiw	r24, 0x00	; 0
    c9d0:	e9 f0       	breq	.+58     	; 0xca0c <f_mkdir+0x78>
    c9d2:	ed ad       	ldd	r30, Y+61	; 0x3d
    c9d4:	fe ad       	ldd	r31, Y+62	; 0x3e
    c9d6:	94 87       	std	Z+12, r25	; 0x0c
    c9d8:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    c9da:	21 96       	adiw	r28, 0x01	; 1
    c9dc:	6e ad       	ldd	r22, Y+62	; 0x3e
    c9de:	7f ad       	ldd	r23, Y+63	; 0x3f
    c9e0:	21 97       	sbiw	r28, 0x01	; 1
    c9e2:	ce 01       	movw	r24, r28
    c9e4:	01 96       	adiw	r24, 0x01	; 1
    c9e6:	0e 94 4e 56 	call	0xac9c	; 0xac9c <follow_path>
    c9ea:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    c9ec:	89 2b       	or	r24, r25
    c9ee:	89 f0       	breq	.+34     	; 0xca12 <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    c9f0:	84 e0       	ldi	r24, 0x04	; 4
    c9f2:	e8 16       	cp	r14, r24
    c9f4:	f1 04       	cpc	r15, r1
    c9f6:	31 f4       	brne	.+12     	; 0xca04 <f_mkdir+0x70>
    c9f8:	88 a5       	ldd	r24, Y+40	; 0x28
    c9fa:	85 ff       	sbrs	r24, 5
    c9fc:	0e c0       	rjmp	.+28     	; 0xca1a <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    c9fe:	26 e0       	ldi	r18, 0x06	; 6
    ca00:	e2 2e       	mov	r14, r18
    ca02:	f1 2c       	mov	r15, r1
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    ca04:	c6 01       	movw	r24, r12
    ca06:	10 d3       	rcall	.+1568   	; 0xd028 <ff_memfree>
    ca08:	c7 01       	movw	r24, r14
    ca0a:	af c0       	rjmp	.+350    	; 0xcb6a <f_mkdir+0x1d6>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    ca0c:	81 e1       	ldi	r24, 0x11	; 17
    ca0e:	90 e0       	ldi	r25, 0x00	; 0
    ca10:	ac c0       	rjmp	.+344    	; 0xcb6a <f_mkdir+0x1d6>
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    ca12:	38 e0       	ldi	r19, 0x08	; 8
    ca14:	e3 2e       	mov	r14, r19
    ca16:	f1 2c       	mov	r15, r1
    ca18:	f5 cf       	rjmp	.-22     	; 0xca04 <f_mkdir+0x70>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    ca1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    ca1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    ca1e:	98 ab       	std	Y+48, r25	; 0x30
    ca20:	8f a7       	std	Y+47, r24	; 0x2f
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    ca22:	40 e0       	ldi	r20, 0x00	; 0
    ca24:	50 e0       	ldi	r21, 0x00	; 0
    ca26:	ba 01       	movw	r22, r20
    ca28:	ce 01       	movw	r24, r28
    ca2a:	8f 96       	adiw	r24, 0x2f	; 47
    ca2c:	0e 94 c9 4f 	call	0x9f92	; 0x9f92 <create_chain>
    ca30:	4b 01       	movw	r8, r22
    ca32:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    ca34:	67 2b       	or	r22, r23
    ca36:	68 2b       	or	r22, r24
    ca38:	69 2b       	or	r22, r25
    ca3a:	09 f1       	breq	.+66     	; 0xca7e <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    ca3c:	e1 e0       	ldi	r30, 0x01	; 1
    ca3e:	8e 16       	cp	r8, r30
    ca40:	91 04       	cpc	r9, r1
    ca42:	a1 04       	cpc	r10, r1
    ca44:	b1 04       	cpc	r11, r1
    ca46:	61 f0       	breq	.+24     	; 0xca60 <f_mkdir+0xcc>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    ca48:	ff ef       	ldi	r31, 0xFF	; 255
    ca4a:	8f 16       	cp	r8, r31
    ca4c:	9f 06       	cpc	r9, r31
    ca4e:	af 06       	cpc	r10, r31
    ca50:	bf 06       	cpc	r11, r31
    ca52:	d9 f4       	brne	.+54     	; 0xca8a <f_mkdir+0xf6>
			tm = GET_FATTIME();
    ca54:	0e 94 82 6f 	call	0xdf04	; 0xdf04 <get_fattime>
    ca58:	ee 24       	eor	r14, r14
    ca5a:	e3 94       	inc	r14
    ca5c:	f1 2c       	mov	r15, r1
    ca5e:	05 c0       	rjmp	.+10     	; 0xca6a <f_mkdir+0xd6>
    ca60:	0e 94 82 6f 	call	0xdf04	; 0xdf04 <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    ca64:	92 e0       	ldi	r25, 0x02	; 2
    ca66:	e9 2e       	mov	r14, r25
    ca68:	f1 2c       	mov	r15, r1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    ca6a:	00 e0       	ldi	r16, 0x00	; 0
    ca6c:	10 e0       	ldi	r17, 0x00	; 0
    ca6e:	98 01       	movw	r18, r16
    ca70:	b5 01       	movw	r22, r10
    ca72:	a4 01       	movw	r20, r8
    ca74:	ce 01       	movw	r24, r28
    ca76:	8f 96       	adiw	r24, 0x2f	; 47
    ca78:	0e 94 ef 50 	call	0xa1de	; 0xa1de <remove_chain>
    ca7c:	c3 cf       	rjmp	.-122    	; 0xca04 <f_mkdir+0x70>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    ca7e:	0e 94 82 6f 	call	0xdf04	; 0xdf04 <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    ca82:	87 e0       	ldi	r24, 0x07	; 7
    ca84:	e8 2e       	mov	r14, r24
    ca86:	f1 2c       	mov	r15, r1
    ca88:	f0 cf       	rjmp	.-32     	; 0xca6a <f_mkdir+0xd6>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    ca8a:	0e 94 82 6f 	call	0xdf04	; 0xdf04 <get_fattime>
    ca8e:	2b 01       	movw	r4, r22
    ca90:	3c 01       	movw	r6, r24
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    ca92:	b5 01       	movw	r22, r10
    ca94:	a4 01       	movw	r20, r8
    ca96:	8d ad       	ldd	r24, Y+61	; 0x3d
    ca98:	9e ad       	ldd	r25, Y+62	; 0x3e
    ca9a:	0e 94 dc 49 	call	0x93b8	; 0x93b8 <dir_clear>
    ca9e:	7c 01       	movw	r14, r24
				if (res == FR_OK) {
    caa0:	89 2b       	or	r24, r25
    caa2:	19 f7       	brne	.-58     	; 0xca6a <f_mkdir+0xd6>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    caa4:	8d ad       	ldd	r24, Y+61	; 0x3d
    caa6:	9e ad       	ldd	r25, Y+62	; 0x3e
    caa8:	4b e0       	ldi	r20, 0x0B	; 11
    caaa:	50 e0       	ldi	r21, 0x00	; 0
    caac:	60 e2       	ldi	r22, 0x20	; 32
    caae:	70 e0       	ldi	r23, 0x00	; 0
    cab0:	c5 96       	adiw	r24, 0x35	; 53
    cab2:	0e 94 c4 45 	call	0x8b88	; 0x8b88 <mem_set>
						fs->win[DIR_Name] = '.';
    cab6:	8d ad       	ldd	r24, Y+61	; 0x3d
    cab8:	9e ad       	ldd	r25, Y+62	; 0x3e
    caba:	1e e2       	ldi	r17, 0x2E	; 46
    cabc:	fc 01       	movw	r30, r24
    cabe:	15 ab       	std	Z+53, r17	; 0x35
						fs->win[DIR_Attr] = AM_DIR;
    cac0:	e0 5c       	subi	r30, 0xC0	; 192
    cac2:	ff 4f       	sbci	r31, 0xFF	; 255
    cac4:	20 e1       	ldi	r18, 0x10	; 16
    cac6:	20 83       	st	Z, r18
						st_dword(fs->win + DIR_ModTime, tm);
    cac8:	b3 01       	movw	r22, r6
    caca:	a2 01       	movw	r20, r4
    cacc:	85 5b       	subi	r24, 0xB5	; 181
    cace:	9f 4f       	sbci	r25, 0xFF	; 255
    cad0:	0e 94 be 45 	call	0x8b7c	; 0x8b7c <st_dword>
						st_clust(fs, fs->win, dcl);
    cad4:	8d ad       	ldd	r24, Y+61	; 0x3d
    cad6:	9e ad       	ldd	r25, Y+62	; 0x3e
    cad8:	bc 01       	movw	r22, r24
    cada:	6b 5c       	subi	r22, 0xCB	; 203
    cadc:	7f 4f       	sbci	r23, 0xFF	; 255
    cade:	a5 01       	movw	r20, r10
    cae0:	94 01       	movw	r18, r8
    cae2:	0e 94 0a 49 	call	0x9214	; 0x9214 <st_clust.isra.5>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    cae6:	8d ad       	ldd	r24, Y+61	; 0x3d
    cae8:	9e ad       	ldd	r25, Y+62	; 0x3e
    caea:	bc 01       	movw	r22, r24
    caec:	6b 5c       	subi	r22, 0xCB	; 203
    caee:	7f 4f       	sbci	r23, 0xFF	; 255
    caf0:	40 e2       	ldi	r20, 0x20	; 32
    caf2:	50 e0       	ldi	r21, 0x00	; 0
    caf4:	8b 5a       	subi	r24, 0xAB	; 171
    caf6:	9f 4f       	sbci	r25, 0xFF	; 255
    caf8:	0e 94 2d 47 	call	0x8e5a	; 0x8e5a <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    cafc:	8d ad       	ldd	r24, Y+61	; 0x3d
    cafe:	9e ad       	ldd	r25, Y+62	; 0x3e
    cb00:	fc 01       	movw	r30, r24
    cb02:	ea 5a       	subi	r30, 0xAA	; 170
    cb04:	ff 4f       	sbci	r31, 0xFF	; 255
    cb06:	10 83       	st	Z, r17
						st_clust(fs, fs->win + SZDIRE, pcl);
    cb08:	2f 81       	ldd	r18, Y+7	; 0x07
    cb0a:	38 85       	ldd	r19, Y+8	; 0x08
    cb0c:	49 85       	ldd	r20, Y+9	; 0x09
    cb0e:	5a 85       	ldd	r21, Y+10	; 0x0a
    cb10:	bc 01       	movw	r22, r24
    cb12:	6b 5a       	subi	r22, 0xAB	; 171
    cb14:	7f 4f       	sbci	r23, 0xFF	; 255
    cb16:	0e 94 0a 49 	call	0x9214	; 0x9214 <st_clust.isra.5>
						fs->wflag = 1;
    cb1a:	ed ad       	ldd	r30, Y+61	; 0x3d
    cb1c:	fe ad       	ldd	r31, Y+62	; 0x3e
    cb1e:	81 e0       	ldi	r24, 0x01	; 1
    cb20:	83 83       	std	Z+3, r24	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    cb22:	ce 01       	movw	r24, r28
    cb24:	01 96       	adiw	r24, 0x01	; 1
    cb26:	0e 94 c0 54 	call	0xa980	; 0xa980 <dir_register>
    cb2a:	7c 01       	movw	r14, r24
				}
			}
			if (res == FR_OK) {
    cb2c:	89 2b       	or	r24, r25
    cb2e:	09 f0       	breq	.+2      	; 0xcb32 <f_mkdir+0x19e>
    cb30:	9c cf       	rjmp	.-200    	; 0xca6a <f_mkdir+0xd6>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    cb32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cb34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cb36:	b3 01       	movw	r22, r6
    cb38:	a2 01       	movw	r20, r4
    cb3a:	46 96       	adiw	r24, 0x16	; 22
    cb3c:	0e 94 be 45 	call	0x8b7c	; 0x8b7c <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    cb40:	6b 8d       	ldd	r22, Y+27	; 0x1b
    cb42:	7c 8d       	ldd	r23, Y+28	; 0x1c
    cb44:	a5 01       	movw	r20, r10
    cb46:	94 01       	movw	r18, r8
    cb48:	8d ad       	ldd	r24, Y+61	; 0x3d
    cb4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    cb4c:	0e 94 0a 49 	call	0x9214	; 0x9214 <st_clust.isra.5>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    cb50:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cb52:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cb54:	80 e1       	ldi	r24, 0x10	; 16
    cb56:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    cb58:	8d ad       	ldd	r24, Y+61	; 0x3d
    cb5a:	9e ad       	ldd	r25, Y+62	; 0x3e
    cb5c:	21 e0       	ldi	r18, 0x01	; 1
    cb5e:	fc 01       	movw	r30, r24
    cb60:	23 83       	std	Z+3, r18	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    cb62:	0e 94 6a 49 	call	0x92d4	; 0x92d4 <sync_fs>
    cb66:	7c 01       	movw	r14, r24
    cb68:	4d cf       	rjmp	.-358    	; 0xca04 <f_mkdir+0x70>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cb6a:	c0 5c       	subi	r28, 0xC0	; 192
    cb6c:	df 4f       	sbci	r29, 0xFF	; 255
    cb6e:	e0 e1       	ldi	r30, 0x10	; 16
    cb70:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__epilogue_restores__+0x4>

0000cb74 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    cb74:	a2 e8       	ldi	r26, 0x82	; 130
    cb76:	b0 e0       	ldi	r27, 0x00	; 0
    cb78:	e0 ec       	ldi	r30, 0xC0	; 192
    cb7a:	f5 e6       	ldi	r31, 0x65	; 101
    cb7c:	0c 94 47 e3 	jmp	0x1c68e	; 0x1c68e <__prologue_saves__+0x12>
    cb80:	c1 58       	subi	r28, 0x81	; 129
    cb82:	df 4f       	sbci	r29, 0xFF	; 255
    cb84:	99 83       	std	Y+1, r25	; 0x01
    cb86:	88 83       	st	Y, r24
    cb88:	cf 57       	subi	r28, 0x7F	; 127
    cb8a:	d0 40       	sbci	r29, 0x00	; 0
    cb8c:	cf 57       	subi	r28, 0x7F	; 127
    cb8e:	df 4f       	sbci	r29, 0xFF	; 255
    cb90:	79 83       	std	Y+1, r23	; 0x01
    cb92:	68 83       	st	Y, r22
    cb94:	c1 58       	subi	r28, 0x81	; 129
    cb96:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    cb98:	ce 01       	movw	r24, r28
    cb9a:	8f 57       	subi	r24, 0x7F	; 127
    cb9c:	9f 4f       	sbci	r25, 0xFF	; 255
    cb9e:	0e 94 d5 46 	call	0x8daa	; 0x8daa <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    cba2:	42 e0       	ldi	r20, 0x02	; 2
    cba4:	be 01       	movw	r22, r28
    cba6:	63 58       	subi	r22, 0x83	; 131
    cba8:	7f 4f       	sbci	r23, 0xFF	; 255
    cbaa:	ce 01       	movw	r24, r28
    cbac:	81 58       	subi	r24, 0x81	; 129
    cbae:	9f 4f       	sbci	r25, 0xFF	; 255
    cbb0:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <mount_volume>
	if (res == FR_OK) {
    cbb4:	00 97       	sbiw	r24, 0x00	; 0
    cbb6:	09 f0       	breq	.+2      	; 0xcbba <f_rename+0x46>
    cbb8:	ed c0       	rjmp	.+474    	; 0xcd94 <f_rename+0x220>
		djo.obj.fs = fs;
    cbba:	ef 96       	adiw	r28, 0x3f	; 63
    cbbc:	8e ad       	ldd	r24, Y+62	; 0x3e
    cbbe:	9f ad       	ldd	r25, Y+63	; 0x3f
    cbc0:	ef 97       	sbiw	r28, 0x3f	; 63
    cbc2:	98 ab       	std	Y+48, r25	; 0x30
    cbc4:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cbc6:	80 e0       	ldi	r24, 0x00	; 0
    cbc8:	92 e0       	ldi	r25, 0x02	; 2
    cbca:	2b d2       	rcall	.+1110   	; 0xd022 <ff_memalloc>
    cbcc:	6c 01       	movw	r12, r24
    cbce:	00 97       	sbiw	r24, 0x00	; 0
    cbd0:	f1 f0       	breq	.+60     	; 0xcc0e <f_rename+0x9a>
    cbd2:	ef 96       	adiw	r28, 0x3f	; 63
    cbd4:	ee ad       	ldd	r30, Y+62	; 0x3e
    cbd6:	ff ad       	ldd	r31, Y+63	; 0x3f
    cbd8:	ef 97       	sbiw	r28, 0x3f	; 63
    cbda:	94 87       	std	Z+12, r25	; 0x0c
    cbdc:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    cbde:	c1 58       	subi	r28, 0x81	; 129
    cbe0:	df 4f       	sbci	r29, 0xFF	; 255
    cbe2:	68 81       	ld	r22, Y
    cbe4:	79 81       	ldd	r23, Y+1	; 0x01
    cbe6:	cf 57       	subi	r28, 0x7F	; 127
    cbe8:	d0 40       	sbci	r29, 0x00	; 0
    cbea:	ce 01       	movw	r24, r28
    cbec:	8f 96       	adiw	r24, 0x2f	; 47
    cbee:	0e 94 4e 56 	call	0xac9c	; 0xac9c <follow_path>
    cbf2:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    cbf4:	89 2b       	or	r24, r25
    cbf6:	39 f4       	brne	.+14     	; 0xcc06 <f_rename+0x92>
    cbf8:	67 96       	adiw	r28, 0x17	; 23
    cbfa:	8f ad       	ldd	r24, Y+63	; 0x3f
    cbfc:	67 97       	sbiw	r28, 0x17	; 23
    cbfe:	80 7a       	andi	r24, 0xA0	; 160
    cc00:	49 f0       	breq	.+18     	; 0xcc14 <f_rename+0xa0>
    cc02:	06 e0       	ldi	r16, 0x06	; 6
    cc04:	10 e0       	ldi	r17, 0x00	; 0
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    cc06:	c6 01       	movw	r24, r12
    cc08:	0f d2       	rcall	.+1054   	; 0xd028 <ff_memfree>
    cc0a:	c8 01       	movw	r24, r16
    cc0c:	c3 c0       	rjmp	.+390    	; 0xcd94 <f_rename+0x220>

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    cc0e:	81 e1       	ldi	r24, 0x11	; 17
    cc10:	90 e0       	ldi	r25, 0x00	; 0
    cc12:	c0 c0       	rjmp	.+384    	; 0xcd94 <f_rename+0x220>
    cc14:	2b 96       	adiw	r28, 0x0b	; 11
    cc16:	6e ad       	ldd	r22, Y+62	; 0x3e
    cc18:	7f ad       	ldd	r23, Y+63	; 0x3f
    cc1a:	2b 97       	sbiw	r28, 0x0b	; 11
    cc1c:	40 e2       	ldi	r20, 0x20	; 32
    cc1e:	50 e0       	ldi	r21, 0x00	; 0
    cc20:	ce 01       	movw	r24, r28
    cc22:	83 5a       	subi	r24, 0xA3	; 163
    cc24:	9f 4f       	sbci	r25, 0xFF	; 255
    cc26:	0e 94 2d 47 	call	0x8e5a	; 0x8e5a <mem_cpy.part.0>
    cc2a:	4e e2       	ldi	r20, 0x2E	; 46
    cc2c:	50 e0       	ldi	r21, 0x00	; 0
    cc2e:	be 01       	movw	r22, r28
    cc30:	61 5d       	subi	r22, 0xD1	; 209
    cc32:	7f 4f       	sbci	r23, 0xFF	; 255
    cc34:	ce 01       	movw	r24, r28
    cc36:	01 96       	adiw	r24, 0x01	; 1
    cc38:	0e 94 2d 47 	call	0x8e5a	; 0x8e5a <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    cc3c:	cf 57       	subi	r28, 0x7F	; 127
    cc3e:	df 4f       	sbci	r29, 0xFF	; 255
    cc40:	68 81       	ld	r22, Y
    cc42:	79 81       	ldd	r23, Y+1	; 0x01
    cc44:	c1 58       	subi	r28, 0x81	; 129
    cc46:	d0 40       	sbci	r29, 0x00	; 0
    cc48:	ce 01       	movw	r24, r28
    cc4a:	01 96       	adiw	r24, 0x01	; 1
    cc4c:	0e 94 4e 56 	call	0xac9c	; 0xac9c <follow_path>
    cc50:	8c 01       	movw	r16, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    cc52:	89 2b       	or	r24, r25
    cc54:	f9 f4       	brne	.+62     	; 0xcc94 <f_rename+0x120>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    cc56:	4f 81       	ldd	r20, Y+7	; 0x07
    cc58:	58 85       	ldd	r21, Y+8	; 0x08
    cc5a:	69 85       	ldd	r22, Y+9	; 0x09
    cc5c:	7a 85       	ldd	r23, Y+10	; 0x0a
    cc5e:	8d a9       	ldd	r24, Y+53	; 0x35
    cc60:	9e a9       	ldd	r25, Y+54	; 0x36
    cc62:	af a9       	ldd	r26, Y+55	; 0x37
    cc64:	b8 ad       	ldd	r27, Y+56	; 0x38
    cc66:	48 17       	cp	r20, r24
    cc68:	59 07       	cpc	r21, r25
    cc6a:	6a 07       	cpc	r22, r26
    cc6c:	7b 07       	cpc	r23, r27
    cc6e:	09 f0       	breq	.+2      	; 0xcc72 <f_rename+0xfe>
    cc70:	8b c0       	rjmp	.+278    	; 0xcd88 <f_rename+0x214>
    cc72:	4f 85       	ldd	r20, Y+15	; 0x0f
    cc74:	58 89       	ldd	r21, Y+16	; 0x10
    cc76:	69 89       	ldd	r22, Y+17	; 0x11
    cc78:	7a 89       	ldd	r23, Y+18	; 0x12
    cc7a:	21 96       	adiw	r28, 0x01	; 1
    cc7c:	8c ad       	ldd	r24, Y+60	; 0x3c
    cc7e:	9d ad       	ldd	r25, Y+61	; 0x3d
    cc80:	ae ad       	ldd	r26, Y+62	; 0x3e
    cc82:	bf ad       	ldd	r27, Y+63	; 0x3f
    cc84:	21 97       	sbiw	r28, 0x01	; 1
    cc86:	48 17       	cp	r20, r24
    cc88:	59 07       	cpc	r21, r25
    cc8a:	6a 07       	cpc	r22, r26
    cc8c:	7b 07       	cpc	r23, r27
    cc8e:	09 f0       	breq	.+2      	; 0xcc92 <f_rename+0x11e>
    cc90:	7b c0       	rjmp	.+246    	; 0xcd88 <f_rename+0x214>
    cc92:	04 c0       	rjmp	.+8      	; 0xcc9c <f_rename+0x128>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    cc94:	04 30       	cpi	r16, 0x04	; 4
    cc96:	11 05       	cpc	r17, r1
    cc98:	09 f0       	breq	.+2      	; 0xcc9c <f_rename+0x128>
    cc9a:	b5 cf       	rjmp	.-150    	; 0xcc06 <f_rename+0x92>
					res = dir_register(&djn);			/* Register the new entry */
    cc9c:	ce 01       	movw	r24, r28
    cc9e:	01 96       	adiw	r24, 0x01	; 1
    cca0:	0e 94 c0 54 	call	0xa980	; 0xa980 <dir_register>
    cca4:	8c 01       	movw	r16, r24
					if (res == FR_OK) {
    cca6:	89 2b       	or	r24, r25
    cca8:	09 f0       	breq	.+2      	; 0xccac <f_rename+0x138>
    ccaa:	ad cf       	rjmp	.-166    	; 0xcc06 <f_rename+0x92>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    ccac:	0b 8d       	ldd	r16, Y+27	; 0x1b
    ccae:	1c 8d       	ldd	r17, Y+28	; 0x1c
    ccb0:	6d e5       	ldi	r22, 0x5D	; 93
    ccb2:	70 e0       	ldi	r23, 0x00	; 0
    ccb4:	6c 0f       	add	r22, r28
    ccb6:	7d 1f       	adc	r23, r29
    ccb8:	63 5f       	subi	r22, 0xF3	; 243
    ccba:	7f 4f       	sbci	r23, 0xFF	; 255
    ccbc:	43 e1       	ldi	r20, 0x13	; 19
    ccbe:	50 e0       	ldi	r21, 0x00	; 0
    ccc0:	c8 01       	movw	r24, r16
    ccc2:	0d 96       	adiw	r24, 0x0d	; 13
    ccc4:	0e 94 2d 47 	call	0x8e5a	; 0x8e5a <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    ccc8:	a9 96       	adiw	r28, 0x29	; 41
    ccca:	8f ad       	ldd	r24, Y+63	; 0x3f
    cccc:	a9 97       	sbiw	r28, 0x29	; 41
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    ccce:	84 ff       	sbrs	r24, 4
    ccd0:	80 62       	ori	r24, 0x20	; 32
    ccd2:	f8 01       	movw	r30, r16
    ccd4:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    ccd6:	ef 96       	adiw	r28, 0x3f	; 63
    ccd8:	ee ac       	ldd	r14, Y+62	; 0x3e
    ccda:	ff ac       	ldd	r15, Y+63	; 0x3f
    ccdc:	ef 97       	sbiw	r28, 0x3f	; 63
    ccde:	bb 24       	eor	r11, r11
    cce0:	b3 94       	inc	r11
    cce2:	f7 01       	movw	r30, r14
    cce4:	b3 82       	std	Z+3, r11	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    cce6:	f8 01       	movw	r30, r16
    cce8:	83 85       	ldd	r24, Z+11	; 0x0b
    ccea:	84 ff       	sbrs	r24, 4
    ccec:	3d c0       	rjmp	.+122    	; 0xcd68 <f_rename+0x1f4>
    ccee:	4d a9       	ldd	r20, Y+53	; 0x35
    ccf0:	5e a9       	ldd	r21, Y+54	; 0x36
    ccf2:	6f a9       	ldd	r22, Y+55	; 0x37
    ccf4:	78 ad       	ldd	r23, Y+56	; 0x38
    ccf6:	8f 81       	ldd	r24, Y+7	; 0x07
    ccf8:	98 85       	ldd	r25, Y+8	; 0x08
    ccfa:	a9 85       	ldd	r26, Y+9	; 0x09
    ccfc:	ba 85       	ldd	r27, Y+10	; 0x0a
    ccfe:	48 17       	cp	r20, r24
    cd00:	59 07       	cpc	r21, r25
    cd02:	6a 07       	cpc	r22, r26
    cd04:	7b 07       	cpc	r23, r27
    cd06:	81 f1       	breq	.+96     	; 0xcd68 <f_rename+0x1f4>
							sect = clst2sect(fs, ld_clust(fs, dir));
    cd08:	b8 01       	movw	r22, r16
    cd0a:	f7 01       	movw	r30, r14
    cd0c:	80 81       	ld	r24, Z
    cd0e:	0e 94 f5 48 	call	0x91ea	; 0x91ea <ld_clust.isra.4>
    cd12:	ab 01       	movw	r20, r22
    cd14:	bc 01       	movw	r22, r24
    cd16:	c7 01       	movw	r24, r14
    cd18:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <clst2sect>
    cd1c:	ab 01       	movw	r20, r22
    cd1e:	bc 01       	movw	r22, r24
							if (sect == 0) {
    cd20:	41 15       	cp	r20, r1
    cd22:	51 05       	cpc	r21, r1
    cd24:	61 05       	cpc	r22, r1
    cd26:	71 05       	cpc	r23, r1
    cd28:	91 f1       	breq	.+100    	; 0xcd8e <f_rename+0x21a>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    cd2a:	c7 01       	movw	r24, r14
    cd2c:	0e 94 84 4a 	call	0x9508	; 0x9508 <move_window>
    cd30:	8c 01       	movw	r16, r24
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    cd32:	89 2b       	or	r24, r25
    cd34:	09 f0       	breq	.+2      	; 0xcd38 <f_rename+0x1c4>
    cd36:	67 cf       	rjmp	.-306    	; 0xcc06 <f_rename+0x92>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cd38:	ef 96       	adiw	r28, 0x3f	; 63
    cd3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    cd3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    cd3e:	ef 97       	sbiw	r28, 0x3f	; 63
								if (res == FR_OK && dir[1] == '.') {
    cd40:	fc 01       	movw	r30, r24
    cd42:	ea 5a       	subi	r30, 0xAA	; 170
    cd44:	ff 4f       	sbci	r31, 0xFF	; 255
    cd46:	20 81       	ld	r18, Z
    cd48:	2e 32       	cpi	r18, 0x2E	; 46
    cd4a:	71 f4       	brne	.+28     	; 0xcd68 <f_rename+0x1f4>
									st_clust(fs, dir, djn.obj.sclust);
    cd4c:	2f 81       	ldd	r18, Y+7	; 0x07
    cd4e:	38 85       	ldd	r19, Y+8	; 0x08
    cd50:	49 85       	ldd	r20, Y+9	; 0x09
    cd52:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cd54:	bc 01       	movw	r22, r24
    cd56:	6b 5a       	subi	r22, 0xAB	; 171
    cd58:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    cd5a:	0e 94 0a 49 	call	0x9214	; 0x9214 <st_clust.isra.5>
									fs->wflag = 1;
    cd5e:	ef 96       	adiw	r28, 0x3f	; 63
    cd60:	ee ad       	ldd	r30, Y+62	; 0x3e
    cd62:	ff ad       	ldd	r31, Y+63	; 0x3f
    cd64:	ef 97       	sbiw	r28, 0x3f	; 63
    cd66:	b3 82       	std	Z+3, r11	; 0x03
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    cd68:	ce 01       	movw	r24, r28
    cd6a:	8f 96       	adiw	r24, 0x2f	; 47
    cd6c:	0e 94 6a 53 	call	0xa6d4	; 0xa6d4 <dir_remove>
    cd70:	8c 01       	movw	r16, r24
				if (res == FR_OK) {
    cd72:	89 2b       	or	r24, r25
    cd74:	09 f0       	breq	.+2      	; 0xcd78 <f_rename+0x204>
    cd76:	47 cf       	rjmp	.-370    	; 0xcc06 <f_rename+0x92>
					res = sync_fs(fs);
    cd78:	ef 96       	adiw	r28, 0x3f	; 63
    cd7a:	8e ad       	ldd	r24, Y+62	; 0x3e
    cd7c:	9f ad       	ldd	r25, Y+63	; 0x3f
    cd7e:	ef 97       	sbiw	r28, 0x3f	; 63
    cd80:	0e 94 6a 49 	call	0x92d4	; 0x92d4 <sync_fs>
    cd84:	8c 01       	movw	r16, r24
    cd86:	3f cf       	rjmp	.-386    	; 0xcc06 <f_rename+0x92>
    cd88:	08 e0       	ldi	r16, 0x08	; 8
    cd8a:	10 e0       	ldi	r17, 0x00	; 0
    cd8c:	3c cf       	rjmp	.-392    	; 0xcc06 <f_rename+0x92>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    cd8e:	02 e0       	ldi	r16, 0x02	; 2
    cd90:	10 e0       	ldi	r17, 0x00	; 0
    cd92:	39 cf       	rjmp	.-398    	; 0xcc06 <f_rename+0x92>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cd94:	ce 57       	subi	r28, 0x7E	; 126
    cd96:	df 4f       	sbci	r29, 0xFF	; 255
    cd98:	e9 e0       	ldi	r30, 0x09	; 9
    cd9a:	0c 94 63 e3 	jmp	0x1c6c6	; 0x1c6c6 <__epilogue_restores__+0x12>

0000cd9e <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    cd9e:	a2 e3       	ldi	r26, 0x32	; 50
    cda0:	b0 e0       	ldi	r27, 0x00	; 0
    cda2:	e5 ed       	ldi	r30, 0xD5	; 213
    cda4:	f6 e6       	ldi	r31, 0x66	; 102
    cda6:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
    cdaa:	9a ab       	std	Y+50, r25	; 0x32
    cdac:	89 ab       	std	Y+49, r24	; 0x31
    cdae:	e6 2e       	mov	r14, r22
    cdb0:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cdb2:	42 e0       	ldi	r20, 0x02	; 2
    cdb4:	be 01       	movw	r22, r28
    cdb6:	61 5d       	subi	r22, 0xD1	; 209
    cdb8:	7f 4f       	sbci	r23, 0xFF	; 255
    cdba:	ce 01       	movw	r24, r28
    cdbc:	c1 96       	adiw	r24, 0x31	; 49
    cdbe:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <mount_volume>
	if (res == FR_OK) {
    cdc2:	00 97       	sbiw	r24, 0x00	; 0
    cdc4:	a9 f5       	brne	.+106    	; 0xce30 <f_chmod+0x92>
		dj.obj.fs = fs;
    cdc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    cdc8:	98 a9       	ldd	r25, Y+48	; 0x30
    cdca:	9a 83       	std	Y+2, r25	; 0x02
    cdcc:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cdce:	80 e0       	ldi	r24, 0x00	; 0
    cdd0:	92 e0       	ldi	r25, 0x02	; 2
    cdd2:	27 d1       	rcall	.+590    	; 0xd022 <ff_memalloc>
    cdd4:	6c 01       	movw	r12, r24
    cdd6:	00 97       	sbiw	r24, 0x00	; 0
    cdd8:	b1 f0       	breq	.+44     	; 0xce06 <f_chmod+0x68>
    cdda:	ef a5       	ldd	r30, Y+47	; 0x2f
    cddc:	f8 a9       	ldd	r31, Y+48	; 0x30
    cdde:	94 87       	std	Z+12, r25	; 0x0c
    cde0:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cde2:	69 a9       	ldd	r22, Y+49	; 0x31
    cde4:	7a a9       	ldd	r23, Y+50	; 0x32
    cde6:	ce 01       	movw	r24, r28
    cde8:	01 96       	adiw	r24, 0x01	; 1
    cdea:	0e 94 4e 56 	call	0xac9c	; 0xac9c <follow_path>
    cdee:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cdf0:	89 2b       	or	r24, r25
    cdf2:	29 f4       	brne	.+10     	; 0xcdfe <f_chmod+0x60>
    cdf4:	88 a5       	ldd	r24, Y+40	; 0x28
    cdf6:	80 7a       	andi	r24, 0xA0	; 160
    cdf8:	49 f0       	breq	.+18     	; 0xce0c <f_chmod+0x6e>
    cdfa:	06 e0       	ldi	r16, 0x06	; 6
    cdfc:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cdfe:	c6 01       	movw	r24, r12
    ce00:	13 d1       	rcall	.+550    	; 0xd028 <ff_memfree>
    ce02:	c8 01       	movw	r24, r16
    ce04:	15 c0       	rjmp	.+42     	; 0xce30 <f_chmod+0x92>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    ce06:	81 e1       	ldi	r24, 0x11	; 17
    ce08:	90 e0       	ldi	r25, 0x00	; 0
    ce0a:	12 c0       	rjmp	.+36     	; 0xce30 <f_chmod+0x92>
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    ce0c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    ce0e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    ce10:	83 85       	ldd	r24, Z+11	; 0x0b
    ce12:	6e 2d       	mov	r22, r14
    ce14:	68 27       	eor	r22, r24
    ce16:	6f 21       	and	r22, r15
    ce18:	67 72       	andi	r22, 0x27	; 39
    ce1a:	68 27       	eor	r22, r24
    ce1c:	63 87       	std	Z+11, r22	; 0x0b
				fs->wflag = 1;
    ce1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    ce20:	98 a9       	ldd	r25, Y+48	; 0x30
    ce22:	21 e0       	ldi	r18, 0x01	; 1
    ce24:	fc 01       	movw	r30, r24
    ce26:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    ce28:	0e 94 6a 49 	call	0x92d4	; 0x92d4 <sync_fs>
    ce2c:	8c 01       	movw	r16, r24
    ce2e:	e7 cf       	rjmp	.-50     	; 0xcdfe <f_chmod+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    ce30:	e2 96       	adiw	r28, 0x32	; 50
    ce32:	e8 e0       	ldi	r30, 0x08	; 8
    ce34:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

0000ce38 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    ce38:	a2 e3       	ldi	r26, 0x32	; 50
    ce3a:	b0 e0       	ldi	r27, 0x00	; 0
    ce3c:	e2 e2       	ldi	r30, 0x22	; 34
    ce3e:	f7 e6       	ldi	r31, 0x67	; 103
    ce40:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
    ce44:	9a ab       	std	Y+50, r25	; 0x32
    ce46:	89 ab       	std	Y+49, r24	; 0x31
    ce48:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    ce4a:	42 e0       	ldi	r20, 0x02	; 2
    ce4c:	be 01       	movw	r22, r28
    ce4e:	61 5d       	subi	r22, 0xD1	; 209
    ce50:	7f 4f       	sbci	r23, 0xFF	; 255
    ce52:	ce 01       	movw	r24, r28
    ce54:	c1 96       	adiw	r24, 0x31	; 49
    ce56:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <mount_volume>
	if (res == FR_OK) {
    ce5a:	00 97       	sbiw	r24, 0x00	; 0
    ce5c:	09 f0       	breq	.+2      	; 0xce60 <f_utime+0x28>
    ce5e:	41 c0       	rjmp	.+130    	; 0xcee2 <f_utime+0xaa>
		dj.obj.fs = fs;
    ce60:	8f a5       	ldd	r24, Y+47	; 0x2f
    ce62:	98 a9       	ldd	r25, Y+48	; 0x30
    ce64:	9a 83       	std	Y+2, r25	; 0x02
    ce66:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    ce68:	80 e0       	ldi	r24, 0x00	; 0
    ce6a:	92 e0       	ldi	r25, 0x02	; 2
    ce6c:	da d0       	rcall	.+436    	; 0xd022 <ff_memalloc>
    ce6e:	7c 01       	movw	r14, r24
    ce70:	00 97       	sbiw	r24, 0x00	; 0
    ce72:	b1 f0       	breq	.+44     	; 0xcea0 <f_utime+0x68>
    ce74:	ef a5       	ldd	r30, Y+47	; 0x2f
    ce76:	f8 a9       	ldd	r31, Y+48	; 0x30
    ce78:	94 87       	std	Z+12, r25	; 0x0c
    ce7a:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    ce7c:	69 a9       	ldd	r22, Y+49	; 0x31
    ce7e:	7a a9       	ldd	r23, Y+50	; 0x32
    ce80:	ce 01       	movw	r24, r28
    ce82:	01 96       	adiw	r24, 0x01	; 1
    ce84:	0e 94 4e 56 	call	0xac9c	; 0xac9c <follow_path>
    ce88:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    ce8a:	89 2b       	or	r24, r25
    ce8c:	29 f4       	brne	.+10     	; 0xce98 <f_utime+0x60>
    ce8e:	88 a5       	ldd	r24, Y+40	; 0x28
    ce90:	80 7a       	andi	r24, 0xA0	; 160
    ce92:	49 f0       	breq	.+18     	; 0xcea6 <f_utime+0x6e>
    ce94:	06 e0       	ldi	r16, 0x06	; 6
    ce96:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    ce98:	c7 01       	movw	r24, r14
    ce9a:	c6 d0       	rcall	.+396    	; 0xd028 <ff_memfree>
    ce9c:	c8 01       	movw	r24, r16
    ce9e:	21 c0       	rjmp	.+66     	; 0xcee2 <f_utime+0xaa>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cea0:	81 e1       	ldi	r24, 0x11	; 17
    cea2:	90 e0       	ldi	r25, 0x00	; 0
    cea4:	1e c0       	rjmp	.+60     	; 0xcee2 <f_utime+0xaa>
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    cea6:	f6 01       	movw	r30, r12
    cea8:	44 81       	ldd	r20, Z+4	; 0x04
    ceaa:	55 81       	ldd	r21, Z+5	; 0x05
    ceac:	60 e0       	ldi	r22, 0x00	; 0
    ceae:	70 e0       	ldi	r23, 0x00	; 0
    ceb0:	ba 01       	movw	r22, r20
    ceb2:	55 27       	eor	r21, r21
    ceb4:	44 27       	eor	r20, r20
    ceb6:	86 81       	ldd	r24, Z+6	; 0x06
    ceb8:	97 81       	ldd	r25, Z+7	; 0x07
    ceba:	a0 e0       	ldi	r26, 0x00	; 0
    cebc:	b0 e0       	ldi	r27, 0x00	; 0
    cebe:	48 2b       	or	r20, r24
    cec0:	59 2b       	or	r21, r25
    cec2:	6a 2b       	or	r22, r26
    cec4:	7b 2b       	or	r23, r27
    cec6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cec8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ceca:	46 96       	adiw	r24, 0x16	; 22
    cecc:	0e 94 be 45 	call	0x8b7c	; 0x8b7c <st_dword>
				fs->wflag = 1;
    ced0:	8f a5       	ldd	r24, Y+47	; 0x2f
    ced2:	98 a9       	ldd	r25, Y+48	; 0x30
    ced4:	21 e0       	ldi	r18, 0x01	; 1
    ced6:	fc 01       	movw	r30, r24
    ced8:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    ceda:	0e 94 6a 49 	call	0x92d4	; 0x92d4 <sync_fs>
    cede:	8c 01       	movw	r16, r24
    cee0:	db cf       	rjmp	.-74     	; 0xce98 <f_utime+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cee2:	e2 96       	adiw	r28, 0x32	; 50
    cee4:	e8 e0       	ldi	r30, 0x08	; 8
    cee6:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

0000ceea <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    ceea:	a2 e3       	ldi	r26, 0x32	; 50
    ceec:	b0 e0       	ldi	r27, 0x00	; 0
    ceee:	eb e7       	ldi	r30, 0x7B	; 123
    cef0:	f7 e6       	ldi	r31, 0x67	; 103
    cef2:	0c 94 44 e3 	jmp	0x1c688	; 0x1c688 <__prologue_saves__+0xc>
    cef6:	9a ab       	std	Y+50, r25	; 0x32
    cef8:	89 ab       	std	Y+49, r24	; 0x31
    cefa:	6b 01       	movw	r12, r22
    cefc:	5a 01       	movw	r10, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    cefe:	40 e0       	ldi	r20, 0x00	; 0
    cf00:	be 01       	movw	r22, r28
    cf02:	61 5d       	subi	r22, 0xD1	; 209
    cf04:	7f 4f       	sbci	r23, 0xFF	; 255
    cf06:	ce 01       	movw	r24, r28
    cf08:	c1 96       	adiw	r24, 0x31	; 49
    cf0a:	0e 94 ff 4a 	call	0x95fe	; 0x95fe <mount_volume>
    cf0e:	7c 01       	movw	r14, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    cf10:	89 2b       	or	r24, r25
    cf12:	09 f0       	breq	.+2      	; 0xcf16 <f_getlabel+0x2c>
    cf14:	81 c0       	rjmp	.+258    	; 0xd018 <f_getlabel+0x12e>
    cf16:	c1 14       	cp	r12, r1
    cf18:	d1 04       	cpc	r13, r1
    cf1a:	09 f4       	brne	.+2      	; 0xcf1e <f_getlabel+0x34>
    cf1c:	53 c0       	rjmp	.+166    	; 0xcfc4 <f_getlabel+0xda>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    cf1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    cf20:	98 a9       	ldd	r25, Y+48	; 0x30
    cf22:	9a 83       	std	Y+2, r25	; 0x02
    cf24:	89 83       	std	Y+1, r24	; 0x01
    cf26:	1f 82       	std	Y+7, r1	; 0x07
    cf28:	18 86       	std	Y+8, r1	; 0x08
    cf2a:	19 86       	std	Y+9, r1	; 0x09
    cf2c:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    cf2e:	40 e0       	ldi	r20, 0x00	; 0
    cf30:	50 e0       	ldi	r21, 0x00	; 0
    cf32:	ba 01       	movw	r22, r20
    cf34:	ce 01       	movw	r24, r28
    cf36:	01 96       	adiw	r24, 0x01	; 1
    cf38:	0e 94 08 4f 	call	0x9e10	; 0x9e10 <dir_sdi>
		if (res == FR_OK) {
    cf3c:	00 97       	sbiw	r24, 0x00	; 0
    cf3e:	e9 f5       	brne	.+122    	; 0xcfba <f_getlabel+0xd0>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    cf40:	61 e0       	ldi	r22, 0x01	; 1
    cf42:	70 e0       	ldi	r23, 0x00	; 0
    cf44:	ce 01       	movw	r24, r28
    cf46:	01 96       	adiw	r24, 0x01	; 1
    cf48:	0e 94 a1 52 	call	0xa542	; 0xa542 <dir_read>
		 	if (res == FR_OK) {
    cf4c:	00 97       	sbiw	r24, 0x00	; 0
    cf4e:	a9 f5       	brne	.+106    	; 0xcfba <f_getlabel+0xd0>
    cf50:	00 e0       	ldi	r16, 0x00	; 0
    cf52:	10 e0       	ldi	r17, 0x00	; 0
    cf54:	80 e0       	ldi	r24, 0x00	; 0
    cf56:	90 e0       	ldi	r25, 0x00	; 0
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    cf58:	4c 01       	movw	r8, r24
    cf5a:	2f ef       	ldi	r18, 0xFF	; 255
    cf5c:	82 1a       	sub	r8, r18
    cf5e:	92 0a       	sbc	r9, r18
    cf60:	2b 8d       	ldd	r18, Y+27	; 0x1b
    cf62:	3c 8d       	ldd	r19, Y+28	; 0x1c
    cf64:	f9 01       	movw	r30, r18
    cf66:	e8 0f       	add	r30, r24
    cf68:	f9 1f       	adc	r31, r25
    cf6a:	80 81       	ld	r24, Z
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
    cf6c:	65 eb       	ldi	r22, 0xB5	; 181
    cf6e:	71 e0       	ldi	r23, 0x01	; 1
    cf70:	90 e0       	ldi	r25, 0x00	; 0
    cf72:	90 d0       	rcall	.+288    	; 0xd094 <ff_oem2uni>
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    cf74:	00 97       	sbiw	r24, 0x00	; 0
    cf76:	19 f4       	brne	.+6      	; 0xcf7e <f_getlabel+0x94>
						if (wc == 0) { di = 0; break; }
    cf78:	00 e0       	ldi	r16, 0x00	; 0
    cf7a:	10 e0       	ldi	r17, 0x00	; 0
    cf7c:	13 c0       	rjmp	.+38     	; 0xcfa4 <f_getlabel+0xba>
					while (si < 11) {
						wc = dj.dir[si++];
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    cf7e:	bc 01       	movw	r22, r24
    cf80:	80 e0       	ldi	r24, 0x00	; 0
    cf82:	90 e0       	ldi	r25, 0x00	; 0
    cf84:	24 e0       	ldi	r18, 0x04	; 4
    cf86:	30 e0       	ldi	r19, 0x00	; 0
    cf88:	a6 01       	movw	r20, r12
    cf8a:	40 0f       	add	r20, r16
    cf8c:	51 1f       	adc	r21, r17
    cf8e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <put_utf>
    cf92:	90 e0       	ldi	r25, 0x00	; 0
						if (wc == 0) { di = 0; break; }
    cf94:	00 97       	sbiw	r24, 0x00	; 0
    cf96:	81 f3       	breq	.-32     	; 0xcf78 <f_getlabel+0x8e>
						di += wc;
    cf98:	08 0f       	add	r16, r24
    cf9a:	19 1f       	adc	r17, r25
    cf9c:	c4 01       	movw	r24, r8
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    cf9e:	8b 30       	cpi	r24, 0x0B	; 11
    cfa0:	91 05       	cpc	r25, r1
    cfa2:	d1 f6       	brne	.-76     	; 0xcf58 <f_getlabel+0x6e>
    cfa4:	f6 01       	movw	r30, r12
    cfa6:	e0 0f       	add	r30, r16
    cfa8:	f1 1f       	adc	r31, r17
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    cfaa:	10 82       	st	Z, r1
						if (di == 0) break;
    cfac:	ce 16       	cp	r12, r30
    cfae:	df 06       	cpc	r13, r31
    cfb0:	49 f0       	breq	.+18     	; 0xcfc4 <f_getlabel+0xda>
					} while (label[--di] == ' ');
    cfb2:	82 91       	ld	r24, -Z
    cfb4:	80 32       	cpi	r24, 0x20	; 32
    cfb6:	c9 f3       	breq	.-14     	; 0xcfaa <f_getlabel+0xc0>
    cfb8:	05 c0       	rjmp	.+10     	; 0xcfc4 <f_getlabel+0xda>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    cfba:	84 30       	cpi	r24, 0x04	; 4
    cfbc:	91 05       	cpc	r25, r1
    cfbe:	59 f5       	brne	.+86     	; 0xd016 <f_getlabel+0x12c>
			label[0] = 0;
    cfc0:	f6 01       	movw	r30, r12
    cfc2:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    cfc4:	a1 14       	cp	r10, r1
    cfc6:	b1 04       	cpc	r11, r1
    cfc8:	39 f1       	breq	.+78     	; 0xd018 <f_getlabel+0x12e>
		res = move_window(fs, fs->volbase);
    cfca:	8f a5       	ldd	r24, Y+47	; 0x2f
    cfcc:	98 a9       	ldd	r25, Y+48	; 0x30
    cfce:	fc 01       	movw	r30, r24
    cfd0:	41 a1       	ldd	r20, Z+33	; 0x21
    cfd2:	52 a1       	ldd	r21, Z+34	; 0x22
    cfd4:	63 a1       	ldd	r22, Z+35	; 0x23
    cfd6:	74 a1       	ldd	r23, Z+36	; 0x24
    cfd8:	0e 94 84 4a 	call	0x9508	; 0x9508 <move_window>
    cfdc:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    cfde:	89 2b       	or	r24, r25
    cfe0:	d9 f4       	brne	.+54     	; 0xd018 <f_getlabel+0x12e>
			switch (fs->fs_type) {
    cfe2:	ef a5       	ldd	r30, Y+47	; 0x2f
    cfe4:	f8 a9       	ldd	r31, Y+48	; 0x30
    cfe6:	80 81       	ld	r24, Z
    cfe8:	83 30       	cpi	r24, 0x03	; 3
    cfea:	29 f0       	breq	.+10     	; 0xcff6 <f_getlabel+0x10c>
    cfec:	84 30       	cpi	r24, 0x04	; 4
    cfee:	31 f0       	breq	.+12     	; 0xcffc <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    cff0:	87 e2       	ldi	r24, 0x27	; 39
    cff2:	90 e0       	ldi	r25, 0x00	; 0
    cff4:	05 c0       	rjmp	.+10     	; 0xd000 <f_getlabel+0x116>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    cff6:	83 e4       	ldi	r24, 0x43	; 67
    cff8:	90 e0       	ldi	r25, 0x00	; 0
    cffa:	02 c0       	rjmp	.+4      	; 0xd000 <f_getlabel+0x116>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    cffc:	84 e6       	ldi	r24, 0x64	; 100
    cffe:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d000:	f5 96       	adiw	r30, 0x35	; 53
    d002:	8e 0f       	add	r24, r30
    d004:	9f 1f       	adc	r25, r31
    d006:	0e 94 a9 45 	call	0x8b52	; 0x8b52 <ld_dword>
    d00a:	f5 01       	movw	r30, r10
    d00c:	60 83       	st	Z, r22
    d00e:	71 83       	std	Z+1, r23	; 0x01
    d010:	82 83       	std	Z+2, r24	; 0x02
    d012:	93 83       	std	Z+3, r25	; 0x03
    d014:	01 c0       	rjmp	.+2      	; 0xd018 <f_getlabel+0x12e>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d016:	7c 01       	movw	r14, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d018:	c7 01       	movw	r24, r14
    d01a:	e2 96       	adiw	r28, 0x32	; 50
    d01c:	ec e0       	ldi	r30, 0x0C	; 12
    d01e:	0c 94 60 e3 	jmp	0x1c6c0	; 0x1c6c0 <__epilogue_restores__+0xc>

0000d022 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d022:	0c 94 d9 25 	jmp	0x4bb2	; 0x4bb2 <safemalloc>
}
    d026:	08 95       	ret

0000d028 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d028:	0c 94 fb 25 	jmp	0x4bf6	; 0x4bf6 <safefree>
    d02c:	08 95       	ret

0000d02e <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d02e:	cf 92       	push	r12
    d030:	df 92       	push	r13
    d032:	ef 92       	push	r14
    d034:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d036:	60 38       	cpi	r22, 0x80	; 128
    d038:	71 05       	cpc	r23, r1
    d03a:	81 05       	cpc	r24, r1
    d03c:	91 05       	cpc	r25, r1
    d03e:	10 f4       	brcc	.+4      	; 0xd044 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d040:	cb 01       	movw	r24, r22
    d042:	23 c0       	rjmp	.+70     	; 0xd08a <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d044:	61 15       	cp	r22, r1
    d046:	71 05       	cpc	r23, r1
    d048:	21 e0       	ldi	r18, 0x01	; 1
    d04a:	82 07       	cpc	r24, r18
    d04c:	91 05       	cpc	r25, r1
    d04e:	d8 f4       	brcc	.+54     	; 0xd086 <ff_uni2oem+0x58>
    d050:	45 3b       	cpi	r20, 0xB5	; 181
    d052:	51 40       	sbci	r21, 0x01	; 1
    d054:	c1 f4       	brne	.+48     	; 0xd086 <ff_uni2oem+0x58>
    d056:	e6 ea       	ldi	r30, 0xA6	; 166
    d058:	f7 e0       	ldi	r31, 0x07	; 7
    d05a:	20 e0       	ldi	r18, 0x00	; 0
    d05c:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d05e:	c1 90       	ld	r12, Z+
    d060:	d1 90       	ld	r13, Z+
    d062:	e1 2c       	mov	r14, r1
    d064:	f1 2c       	mov	r15, r1
    d066:	6c 15       	cp	r22, r12
    d068:	7d 05       	cpc	r23, r13
    d06a:	8e 05       	cpc	r24, r14
    d06c:	9f 05       	cpc	r25, r15
    d06e:	29 f0       	breq	.+10     	; 0xd07a <ff_uni2oem+0x4c>
    d070:	2f 5f       	subi	r18, 0xFF	; 255
    d072:	3f 4f       	sbci	r19, 0xFF	; 255
    d074:	20 38       	cpi	r18, 0x80	; 128
    d076:	31 05       	cpc	r19, r1
    d078:	91 f7       	brne	.-28     	; 0xd05e <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d07a:	b9 01       	movw	r22, r18
    d07c:	60 58       	subi	r22, 0x80	; 128
    d07e:	7f 4f       	sbci	r23, 0xFF	; 255
    d080:	cb 01       	movw	r24, r22
    d082:	99 27       	eor	r25, r25
    d084:	02 c0       	rjmp	.+4      	; 0xd08a <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d086:	80 e0       	ldi	r24, 0x00	; 0
    d088:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d08a:	ff 90       	pop	r15
    d08c:	ef 90       	pop	r14
    d08e:	df 90       	pop	r13
    d090:	cf 90       	pop	r12
    d092:	08 95       	ret

0000d094 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d094:	80 38       	cpi	r24, 0x80	; 128
    d096:	91 05       	cpc	r25, r1
    d098:	88 f0       	brcs	.+34     	; 0xd0bc <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d09a:	65 3b       	cpi	r22, 0xB5	; 181
    d09c:	71 40       	sbci	r23, 0x01	; 1
    d09e:	61 f4       	brne	.+24     	; 0xd0b8 <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d0a0:	8f 3f       	cpi	r24, 0xFF	; 255
    d0a2:	91 05       	cpc	r25, r1
    d0a4:	09 f0       	breq	.+2      	; 0xd0a8 <ff_oem2uni+0x14>
    d0a6:	40 f4       	brcc	.+16     	; 0xd0b8 <ff_oem2uni+0x24>
    d0a8:	88 0f       	add	r24, r24
    d0aa:	99 1f       	adc	r25, r25
    d0ac:	fc 01       	movw	r30, r24
    d0ae:	ea 55       	subi	r30, 0x5A	; 90
    d0b0:	f9 4f       	sbci	r31, 0xF9	; 249
    d0b2:	80 81       	ld	r24, Z
    d0b4:	91 81       	ldd	r25, Z+1	; 0x01
    d0b6:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d0b8:	80 e0       	ldi	r24, 0x00	; 0
    d0ba:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d0bc:	08 95       	ret

0000d0be <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d0be:	61 15       	cp	r22, r1
    d0c0:	71 05       	cpc	r23, r1
    d0c2:	21 e0       	ldi	r18, 0x01	; 1
    d0c4:	82 07       	cpc	r24, r18
    d0c6:	91 05       	cpc	r25, r1
    d0c8:	08 f0       	brcs	.+2      	; 0xd0cc <ff_wtoupper+0xe>
    d0ca:	5a c0       	rjmp	.+180    	; 0xd180 <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d0cc:	61 15       	cp	r22, r1
    d0ce:	80 e1       	ldi	r24, 0x10	; 16
    d0d0:	78 07       	cpc	r23, r24
    d0d2:	18 f0       	brcs	.+6      	; 0xd0da <ff_wtoupper+0x1c>
    d0d4:	a8 ef       	ldi	r26, 0xF8	; 248
    d0d6:	b4 e0       	ldi	r27, 0x04	; 4
    d0d8:	02 c0       	rjmp	.+4      	; 0xd0de <ff_wtoupper+0x20>
    d0da:	a4 eb       	ldi	r26, 0xB4	; 180
    d0dc:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    d0de:	2d 91       	ld	r18, X+
    d0e0:	3c 91       	ld	r19, X
    d0e2:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d0e4:	21 15       	cp	r18, r1
    d0e6:	31 05       	cpc	r19, r1
    d0e8:	09 f4       	brne	.+2      	; 0xd0ec <ff_wtoupper+0x2e>
    d0ea:	48 c0       	rjmp	.+144    	; 0xd17c <ff_wtoupper+0xbe>
    d0ec:	62 17       	cp	r22, r18
    d0ee:	73 07       	cpc	r23, r19
    d0f0:	08 f4       	brcc	.+2      	; 0xd0f4 <ff_wtoupper+0x36>
    d0f2:	44 c0       	rjmp	.+136    	; 0xd17c <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d0f4:	14 96       	adiw	r26, 0x04	; 4
    d0f6:	fd 01       	movw	r30, r26
    d0f8:	32 97       	sbiw	r30, 0x02	; 2
    d0fa:	80 81       	ld	r24, Z
    d0fc:	91 81       	ldd	r25, Z+1	; 0x01
    d0fe:	e9 2f       	mov	r30, r25
    d100:	ff 27       	eor	r31, r31
    d102:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d104:	a9 01       	movw	r20, r18
    d106:	48 0f       	add	r20, r24
    d108:	59 1f       	adc	r21, r25
    d10a:	64 17       	cp	r22, r20
    d10c:	75 07       	cpc	r23, r21
    d10e:	70 f5       	brcc	.+92     	; 0xd16c <ff_wtoupper+0xae>
				switch (cmd) {
    d110:	e9 30       	cpi	r30, 0x09	; 9
    d112:	f1 05       	cpc	r31, r1
    d114:	98 f5       	brcc	.+102    	; 0xd17c <ff_wtoupper+0xbe>
    d116:	ec 54       	subi	r30, 0x4C	; 76
    d118:	ff 4f       	sbci	r31, 0xFF	; 255
    d11a:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d11e:	62 1b       	sub	r22, r18
    d120:	73 0b       	sbc	r23, r19
    d122:	fb 01       	movw	r30, r22
    d124:	ee 0f       	add	r30, r30
    d126:	ff 1f       	adc	r31, r31
    d128:	ea 0f       	add	r30, r26
    d12a:	fb 1f       	adc	r31, r27
    d12c:	60 81       	ld	r22, Z
    d12e:	71 81       	ldd	r23, Z+1	; 0x01
    d130:	25 c0       	rjmp	.+74     	; 0xd17c <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d132:	cb 01       	movw	r24, r22
    d134:	82 1b       	sub	r24, r18
    d136:	93 0b       	sbc	r25, r19
    d138:	81 70       	andi	r24, 0x01	; 1
    d13a:	99 27       	eor	r25, r25
    d13c:	68 1b       	sub	r22, r24
    d13e:	79 0b       	sbc	r23, r25
    d140:	1d c0       	rjmp	.+58     	; 0xd17c <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d142:	60 51       	subi	r22, 0x10	; 16
    d144:	71 09       	sbc	r23, r1
    d146:	1a c0       	rjmp	.+52     	; 0xd17c <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d148:	60 52       	subi	r22, 0x20	; 32
    d14a:	71 09       	sbc	r23, r1
    d14c:	17 c0       	rjmp	.+46     	; 0xd17c <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d14e:	60 53       	subi	r22, 0x30	; 48
    d150:	71 09       	sbc	r23, r1
    d152:	14 c0       	rjmp	.+40     	; 0xd17c <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d154:	6a 51       	subi	r22, 0x1A	; 26
    d156:	71 09       	sbc	r23, r1
    d158:	11 c0       	rjmp	.+34     	; 0xd17c <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d15a:	68 5f       	subi	r22, 0xF8	; 248
    d15c:	7f 4f       	sbci	r23, 0xFF	; 255
    d15e:	0e c0       	rjmp	.+28     	; 0xd17c <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d160:	60 55       	subi	r22, 0x50	; 80
    d162:	71 09       	sbc	r23, r1
    d164:	0b c0       	rjmp	.+22     	; 0xd17c <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d166:	60 56       	subi	r22, 0x60	; 96
    d168:	7c 41       	sbci	r23, 0x1C	; 28
    d16a:	08 c0       	rjmp	.+16     	; 0xd17c <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d16c:	ef 2b       	or	r30, r31
    d16e:	09 f0       	breq	.+2      	; 0xd172 <ff_wtoupper+0xb4>
    d170:	b6 cf       	rjmp	.-148    	; 0xd0de <ff_wtoupper+0x20>
    d172:	88 0f       	add	r24, r24
    d174:	99 1f       	adc	r25, r25
    d176:	a8 0f       	add	r26, r24
    d178:	b9 1f       	adc	r27, r25
    d17a:	b1 cf       	rjmp	.-158    	; 0xd0de <ff_wtoupper+0x20>
		}
		uni = uc;
    d17c:	80 e0       	ldi	r24, 0x00	; 0
    d17e:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d180:	08 95       	ret

0000d182 <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    d182:	81 11       	cpse	r24, r1
    d184:	02 c0       	rjmp	.+4      	; 0xd18a <disk_status+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    d186:	a1 c1       	rjmp	.+834    	; 0xd4ca <mmc_disk_status>
    d188:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    d18a:	81 e0       	ldi	r24, 0x01	; 1
}
    d18c:	08 95       	ret

0000d18e <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    d18e:	81 11       	cpse	r24, r1
    d190:	02 c0       	rjmp	.+4      	; 0xd196 <disk_initialize+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    d192:	f6 c0       	rjmp	.+492    	; 0xd380 <mmc_disk_initialize>
    d194:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    d196:	81 e0       	ldi	r24, 0x01	; 1
}
    d198:	08 95       	ret

0000d19a <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    d19a:	0f 93       	push	r16
    d19c:	1f 93       	push	r17
    d19e:	fb 01       	movw	r30, r22
    switch (pdrv)
    d1a0:	81 11       	cpse	r24, r1
    d1a2:	06 c0       	rjmp	.+12     	; 0xd1b0 <disk_read+0x16>
    d1a4:	ba 01       	movw	r22, r20
    d1a6:	a9 01       	movw	r20, r18
    d1a8:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    d1aa:	98 01       	movw	r18, r16
    d1ac:	91 d1       	rcall	.+802    	; 0xd4d0 <mmc_disk_read>
    d1ae:	02 c0       	rjmp	.+4      	; 0xd1b4 <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    d1b0:	84 e0       	ldi	r24, 0x04	; 4
    d1b2:	90 e0       	ldi	r25, 0x00	; 0
}
    d1b4:	1f 91       	pop	r17
    d1b6:	0f 91       	pop	r16
    d1b8:	08 95       	ret

0000d1ba <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    d1ba:	0f 93       	push	r16
    d1bc:	1f 93       	push	r17
    d1be:	fb 01       	movw	r30, r22
    switch (pdrv)
    d1c0:	81 11       	cpse	r24, r1
    d1c2:	06 c0       	rjmp	.+12     	; 0xd1d0 <disk_write+0x16>
    d1c4:	ba 01       	movw	r22, r20
    d1c6:	a9 01       	movw	r20, r18
    d1c8:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    d1ca:	98 01       	movw	r18, r16
    d1cc:	e2 d1       	rcall	.+964    	; 0xd592 <mmc_disk_write>
    d1ce:	02 c0       	rjmp	.+4      	; 0xd1d4 <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    d1d0:	84 e0       	ldi	r24, 0x04	; 4
    d1d2:	90 e0       	ldi	r25, 0x00	; 0
}
    d1d4:	1f 91       	pop	r17
    d1d6:	0f 91       	pop	r16
    d1d8:	08 95       	ret

0000d1da <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d1da:	96 2f       	mov	r25, r22
    switch (pdrv)
    d1dc:	81 11       	cpse	r24, r1
    d1de:	04 c0       	rjmp	.+8      	; 0xd1e8 <disk_ioctl+0xe>
    d1e0:	ba 01       	movw	r22, r20
    d1e2:	89 2f       	mov	r24, r25
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    d1e4:	4a c2       	rjmp	.+1172   	; 0xd67a <mmc_disk_ioctl>
    d1e6:	08 95       	ret
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d1e8:	84 e0       	ldi	r24, 0x04	; 4
    d1ea:	90 e0       	ldi	r25, 0x00	; 0
}
    d1ec:	08 95       	ret

0000d1ee <xchg_spi>:
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d1ee:	f9 c4       	rjmp	.+2546   	; 0xdbe2 <mmc_spi_TXRX>
    return dat;
}
    d1f0:	08 95       	ret

0000d1f2 <deselect>:
///@return void
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    d1f2:	ce d4       	rcall	.+2460   	; 0xdb90 <mmc_spi_end>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d1f4:	8f ef       	ldi	r24, 0xFF	; 255
    d1f6:	fb df       	rcall	.-10     	; 0xd1ee <xchg_spi>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d1f8:	8f ef       	ldi	r24, 0xFF	; 255
    d1fa:	f9 cf       	rjmp	.-14     	; 0xd1ee <xchg_spi>
    d1fc:	08 95       	ret

0000d1fe <rcvr_datablock>:
    d1fe:	0f 93       	push	r16
static
int rcvr_datablock (
BYTE *buff,                                       /*< Data buffer to store received data */
UINT btr                                          /*< Byte count (must be multiple of 4) */
)
{
    d200:	1f 93       	push	r17
    d202:	cf 93       	push	r28
    d204:	df 93       	push	r29
    d206:	ec 01       	movw	r28, r24
    d208:	8b 01       	movw	r16, r22
    BYTE token;

    mmc_set_ms_timeout(1000);
    d20a:	88 ee       	ldi	r24, 0xE8	; 232
    d20c:	93 e0       	ldi	r25, 0x03	; 3
    d20e:	ec d4       	rcall	.+2520   	; 0xdbe8 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d210:	8f ef       	ldi	r24, 0xFF	; 255
    d212:	e7 d4       	rcall	.+2510   	; 0xdbe2 <mmc_spi_TXRX>

    mmc_set_ms_timeout(1000);
    do                                            /* Wait for data packet in timeout of 400ms */
    {
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    d214:	8f 3f       	cpi	r24, 0xFF	; 255
    d216:	31 f4       	brne	.+12     	; 0xd224 <rcvr_datablock+0x26>
    d218:	ee d4       	rcall	.+2524   	; 0xdbf6 <mmc_test_timeout>
    d21a:	89 2b       	or	r24, r25
    d21c:	c9 f3       	breq	.-14     	; 0xd210 <rcvr_datablock+0x12>
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */
    d21e:	80 e0       	ldi	r24, 0x00	; 0
    d220:	90 e0       	ldi	r25, 0x00	; 0
    d222:	0b c0       	rjmp	.+22     	; 0xd23a <rcvr_datablock+0x3c>
    d224:	8e 3f       	cpi	r24, 0xFE	; 254
void rcvr_spi_multi (
BYTE *p,                                          /* Data read buffer */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_RX_buffer((uint8_t *)p, cnt);
    d226:	d9 f7       	brne	.-10     	; 0xd21e <rcvr_datablock+0x20>
    d228:	b8 01       	movw	r22, r16
    d22a:	ce 01       	movw	r24, r28
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */

    rcvr_spi_multi(buff, btr);                    /* Receive the data block into buffer */
    xchg_spi(0xFF);                               /* Discard CRC */
    d22c:	d7 d4       	rcall	.+2478   	; 0xdbdc <mmc_spi_RX_buffer>
    d22e:	8f ef       	ldi	r24, 0xFF	; 255
    d230:	de df       	rcall	.-68     	; 0xd1ee <xchg_spi>
    xchg_spi(0xFF);
    d232:	8f ef       	ldi	r24, 0xFF	; 255
    d234:	dc df       	rcall	.-72     	; 0xd1ee <xchg_spi>
    d236:	81 e0       	ldi	r24, 0x01	; 1
    d238:	90 e0       	ldi	r25, 0x00	; 0
    d23a:	df 91       	pop	r29

    return 1;                                     /* Return with success */
}
    d23c:	cf 91       	pop	r28
    d23e:	1f 91       	pop	r17
    d240:	0f 91       	pop	r16
    d242:	08 95       	ret

0000d244 <wait_ready>:
    d244:	cf 93       	push	r28
int wait_ready (
UINT wt                                           /*< Timeout [ms] */
)
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    d246:	d0 d4       	rcall	.+2464   	; 0xdbe8 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d248:	8f ef       	ldi	r24, 0xFF	; 255
    d24a:	cb d4       	rcall	.+2454   	; 0xdbe2 <mmc_spi_TXRX>
    d24c:	c8 2f       	mov	r28, r24
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    do
    d = xchg_spi(0xFF);
    while (d != 0xFF && !mmc_test_timeout());
    d24e:	8f 3f       	cpi	r24, 0xFF	; 255
    d250:	19 f0       	breq	.+6      	; 0xd258 <wait_ready+0x14>
    d252:	d1 d4       	rcall	.+2466   	; 0xdbf6 <mmc_test_timeout>
    d254:	89 2b       	or	r24, r25
    d256:	c1 f3       	breq	.-16     	; 0xd248 <wait_ready+0x4>

    return (d == 0xFF) ? 1 : 0;
    d258:	81 e0       	ldi	r24, 0x01	; 1
    d25a:	90 e0       	ldi	r25, 0x00	; 0
    d25c:	cf 3f       	cpi	r28, 0xFF	; 255
    d25e:	11 f0       	breq	.+4      	; 0xd264 <wait_ready+0x20>
    d260:	80 e0       	ldi	r24, 0x00	; 0
    d262:	90 e0       	ldi	r25, 0x00	; 0
}
    d264:	cf 91       	pop	r28
    d266:	08 95       	ret

0000d268 <select>:
///@return 1 Successful
///@return 0 Timeout
MEMSPACE
static
int select (void)
{
    d268:	cf 93       	push	r28
    d26a:	df 93       	push	r29
    d26c:	00 d0       	rcall	.+0      	; 0xd26e <select+0x6>
    d26e:	1f 92       	push	r1
    CS_LOW();
    d270:	82 d4       	rcall	.+2308   	; 0xdb76 <mmc_spi_begin>
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */
    d272:	8f ef       	ldi	r24, 0xFF	; 255
    d274:	bc df       	rcall	.-136    	; 0xd1ee <xchg_spi>

    if (wait_ready(1000))
    d276:	88 ee       	ldi	r24, 0xE8	; 232
    d278:	93 e0       	ldi	r25, 0x03	; 3
    d27a:	e4 df       	rcall	.-56     	; 0xd244 <wait_ready>
    d27c:	ec 01       	movw	r28, r24
    d27e:	89 2b       	or	r24, r25
    d280:	61 f4       	brne	.+24     	; 0xd29a <select+0x32>
        return 1;                                 /* OK */

    printf("select failed!\n");
    d282:	89 e6       	ldi	r24, 0x69	; 105
    d284:	97 e0       	ldi	r25, 0x07	; 7
    d286:	a0 e0       	ldi	r26, 0x00	; 0
    d288:	ed b7       	in	r30, 0x3d	; 61
    d28a:	fe b7       	in	r31, 0x3e	; 62
    d28c:	81 83       	std	Z+1, r24	; 0x01
    d28e:	92 83       	std	Z+2, r25	; 0x02
    d290:	a3 83       	std	Z+3, r26	; 0x03
    d292:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

    deselect();
    d296:	ad df       	rcall	.-166    	; 0xd1f2 <deselect>
    d298:	02 c0       	rjmp	.+4      	; 0xd29e <select+0x36>
{
    CS_LOW();
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */

    if (wait_ready(1000))
        return 1;                                 /* OK */
    d29a:	c1 e0       	ldi	r28, 0x01	; 1
    d29c:	d0 e0       	ldi	r29, 0x00	; 0

    printf("select failed!\n");

    deselect();
    return 0;                                     /* Timeout */
}
    d29e:	ce 01       	movw	r24, r28
    d2a0:	cd b7       	in	r28, 0x3d	; 61
    d2a2:	de b7       	in	r29, 0x3e	; 62
    d2a4:	23 96       	adiw	r28, 0x03	; 3
    d2a6:	e2 e0       	ldi	r30, 0x02	; 2
    d2a8:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

0000d2ac <send_cmd>:
static
BYTE send_cmd (
BYTE cmd,                                         /*< Command index */
DWORD arg                                         /*< Argument */
)
{
    d2ac:	ff 92       	push	r15
    d2ae:	0f 93       	push	r16
    d2b0:	1f 93       	push	r17
    d2b2:	cf 93       	push	r28
    d2b4:	df 93       	push	r29
    d2b6:	c8 2f       	mov	r28, r24
    d2b8:	d4 2f       	mov	r29, r20
    d2ba:	15 2f       	mov	r17, r21
    d2bc:	06 2f       	mov	r16, r22
    d2be:	f7 2e       	mov	r15, r23
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    d2c0:	87 ff       	sbrs	r24, 7
    d2c2:	08 c0       	rjmp	.+16     	; 0xd2d4 <send_cmd+0x28>
    {
        cmd &= 0x7F;
        res = send_cmd(CMD55, 0);
    d2c4:	40 e0       	ldi	r20, 0x00	; 0
    d2c6:	50 e0       	ldi	r21, 0x00	; 0
    d2c8:	ba 01       	movw	r22, r20
    d2ca:	87 e3       	ldi	r24, 0x37	; 55
    d2cc:	ef df       	rcall	.-34     	; 0xd2ac <send_cmd>
        if (res > 1) return res;
    d2ce:	82 30       	cpi	r24, 0x02	; 2
    d2d0:	58 f5       	brcc	.+86     	; 0xd328 <send_cmd+0x7c>
{
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    {
        cmd &= 0x7F;
    d2d2:	cf 77       	andi	r28, 0x7F	; 127
        res = send_cmd(CMD55, 0);
        if (res > 1) return res;
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    d2d4:	cc 30       	cpi	r28, 0x0C	; 12
    d2d6:	71 f4       	brne	.+28     	; 0xd2f4 <send_cmd+0x48>
        deselect();
        if (!select()) return 0xFF;
    }

/* Send command packet */
    xchg_spi(0x40 | cmd);                         /* Start + Command index */
    d2d8:	8c 2f       	mov	r24, r28
    d2da:	80 64       	ori	r24, 0x40	; 64
    d2dc:	88 df       	rcall	.-240    	; 0xd1ee <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));                  /* Argument[31..24] */
    d2de:	8f 2d       	mov	r24, r15
    d2e0:	86 df       	rcall	.-244    	; 0xd1ee <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    d2e2:	80 2f       	mov	r24, r16
    d2e4:	84 df       	rcall	.-248    	; 0xd1ee <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    d2e6:	81 2f       	mov	r24, r17
    d2e8:	82 df       	rcall	.-252    	; 0xd1ee <xchg_spi>
    d2ea:	8d 2f       	mov	r24, r29
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    d2ec:	80 df       	rcall	.-256    	; 0xd1ee <xchg_spi>
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    d2ee:	cc 23       	and	r28, r28
    d2f0:	c9 f0       	breq	.+50     	; 0xd324 <send_cmd+0x78>
    d2f2:	06 c0       	rjmp	.+12     	; 0xd300 <send_cmd+0x54>
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    {
        deselect();
    d2f4:	7e df       	rcall	.-260    	; 0xd1f2 <deselect>
    d2f6:	b8 df       	rcall	.-144    	; 0xd268 <select>
        if (!select()) return 0xFF;
    d2f8:	89 2b       	or	r24, r25
    d2fa:	71 f7       	brne	.-36     	; 0xd2d8 <send_cmd+0x2c>
    d2fc:	8f ef       	ldi	r24, 0xFF	; 255
    d2fe:	14 c0       	rjmp	.+40     	; 0xd328 <send_cmd+0x7c>
    d300:	c8 30       	cpi	r28, 0x08	; 8
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d302:	11 f4       	brne	.+4      	; 0xd308 <send_cmd+0x5c>
    d304:	87 e8       	ldi	r24, 0x87	; 135
    d306:	01 c0       	rjmp	.+2      	; 0xd30a <send_cmd+0x5e>

    xchg_spi(n);
    d308:	81 e0       	ldi	r24, 0x01	; 1
    d30a:	71 df       	rcall	.-286    	; 0xd1ee <xchg_spi>

/* Receive command response */
    if (cmd == CMD12) xchg_spi(0xFF);             /* Skip a stuff byte when stop reading */
    d30c:	cc 30       	cpi	r28, 0x0C	; 12
    d30e:	11 f4       	brne	.+4      	; 0xd314 <send_cmd+0x68>
    d310:	8f ef       	ldi	r24, 0xFF	; 255
    d312:	6d df       	rcall	.-294    	; 0xd1ee <xchg_spi>
    d314:	ca e0       	ldi	r28, 0x0A	; 10
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d316:	8f ef       	ldi	r24, 0xFF	; 255
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d318:	64 d4       	rcall	.+2248   	; 0xdbe2 <mmc_spi_TXRX>
    d31a:	87 ff       	sbrs	r24, 7
    d31c:	05 c0       	rjmp	.+10     	; 0xd328 <send_cmd+0x7c>
    n = 10;                                       /* Wait for a valid response in timeout of 10 attempts */
    do
    {
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);
    d31e:	c1 50       	subi	r28, 0x01	; 1
    d320:	d1 f7       	brne	.-12     	; 0xd316 <send_cmd+0x6a>
    d322:	02 c0       	rjmp	.+4      	; 0xd328 <send_cmd+0x7c>
    d324:	85 e9       	ldi	r24, 0x95	; 149
    d326:	f5 cf       	rjmp	.-22     	; 0xd312 <send_cmd+0x66>
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */

    xchg_spi(n);
    d328:	cd b7       	in	r28, 0x3d	; 61
    d32a:	de b7       	in	r29, 0x3e	; 62
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);

    return res;                                   /* Return with the response value */
}
    d32c:	e5 e0       	ldi	r30, 0x05	; 5
    d32e:	0c 94 67 e3 	jmp	0x1c6ce	; 0x1c6ce <__epilogue_restores__+0x1a>

0000d332 <xmit_datablock>:
    d332:	0f 93       	push	r16
    d334:	1f 93       	push	r17
static
int xmit_datablock (
const BYTE *buff,                                 /*< 512 byte data block to be transmitted */
BYTE token                                        /*< Data/Stop token */
)
{
    d336:	cf 93       	push	r28
    d338:	8c 01       	movw	r16, r24
    d33a:	c6 2f       	mov	r28, r22
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d33c:	88 ee       	ldi	r24, 0xE8	; 232
    d33e:	93 e0       	ldi	r25, 0x03	; 3
    d340:	81 df       	rcall	.-254    	; 0xd244 <wait_ready>
    d342:	00 97       	sbiw	r24, 0x00	; 0
    d344:	c9 f0       	breq	.+50     	; 0xd378 <xmit_datablock+0x46>

    xchg_spi(token);                              /* Xmit data token */
    d346:	8c 2f       	mov	r24, r28
    d348:	52 df       	rcall	.-348    	; 0xd1ee <xchg_spi>
    if (token != 0xFD)                            /* Is data token */
    d34a:	cd 3f       	cpi	r28, 0xFD	; 253
    d34c:	99 f0       	breq	.+38     	; 0xd374 <xmit_datablock+0x42>
void xmit_spi_multi (
const BYTE *p,                                    /* Data block to be sent */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_TX_buffer((uint8_t *)p, cnt);
    d34e:	60 e0       	ldi	r22, 0x00	; 0
    d350:	72 e0       	ldi	r23, 0x02	; 2
    d352:	c8 01       	movw	r24, r16
    xchg_spi(token);                              /* Xmit data token */
    if (token != 0xFD)                            /* Is data token */
    {
        xmit_spi_multi(buff, 512);                /* Xmit the data block to the MMC */

        xchg_spi(0xFF);                           /* CRC (Dummy) */
    d354:	40 d4       	rcall	.+2176   	; 0xdbd6 <mmc_spi_TX_buffer>
    d356:	8f ef       	ldi	r24, 0xFF	; 255
        xchg_spi(0xFF);
    d358:	4a df       	rcall	.-364    	; 0xd1ee <xchg_spi>
    d35a:	8f ef       	ldi	r24, 0xFF	; 255
    d35c:	48 df       	rcall	.-368    	; 0xd1ee <xchg_spi>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d35e:	8f ef       	ldi	r24, 0xFF	; 255
    d360:	40 d4       	rcall	.+2176   	; 0xdbe2 <mmc_spi_TXRX>
    d362:	8f 71       	andi	r24, 0x1F	; 31
BYTE token                                        /*< Data/Stop token */
)
{
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d364:	31 e0       	ldi	r19, 0x01	; 1
    d366:	20 e0       	ldi	r18, 0x00	; 0
    d368:	85 30       	cpi	r24, 0x05	; 5
    d36a:	09 f0       	breq	.+2      	; 0xd36e <xmit_datablock+0x3c>
    d36c:	30 e0       	ldi	r19, 0x00	; 0
    d36e:	83 2f       	mov	r24, r19
    d370:	92 2f       	mov	r25, r18
    d372:	02 c0       	rjmp	.+4      	; 0xd378 <xmit_datablock+0x46>
    d374:	81 e0       	ldi	r24, 0x01	; 1
        resp = xchg_spi(0xFF);                    /* Reveive data response */
        if ((resp & 0x1F) != 0x05)                /* If not accepted, return with error */
            return 0;
    }

    return 1;
    d376:	90 e0       	ldi	r25, 0x00	; 0
    d378:	cf 91       	pop	r28
}
    d37a:	1f 91       	pop	r17
    d37c:	0f 91       	pop	r16
    d37e:	08 95       	ret

0000d380 <mmc_disk_initialize>:
    d380:	a4 e0       	ldi	r26, 0x04	; 4

///@brief Initialize Disk Drive
///@return Stat
MEMSPACE
DSTATUS mmc_disk_initialize (void)
{
    d382:	b0 e0       	ldi	r27, 0x00	; 0
    d384:	e6 ec       	ldi	r30, 0xC6	; 198
    d386:	f9 e6       	ldi	r31, 0x69	; 105
    d388:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d38c:	59 d4       	rcall	.+2226   	; 0xdc40 <mmc_power_off>
DSTATUS mmc_disk_initialize (void)
{
    BYTE n, cmd, ty, ocr[4];

    power_off();                                  /* Turn off the socket power to reset the card */
    delayms(100);                                 /* Wait for 100ms */
    d38e:	64 e6       	ldi	r22, 0x64	; 100
    d390:	70 e0       	ldi	r23, 0x00	; 0
    d392:	80 e0       	ldi	r24, 0x00	; 0
    d394:	90 e0       	ldi	r25, 0x00	; 0
    d396:	0e 94 5d 26 	call	0x4cba	; 0x4cba <delayms>

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    d39a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d39e:	81 fd       	sbrc	r24, 1
void power_on (void)
{
/* Turn socket power on and wait for 10ms+ (nothing to do if no power controls) */
/* Configure MOSI/MISO/SCLK/CS pins */
/* Enable SPI module in SPI mode 0 */
    mmc_power_on();
    d3a0:	8e c0       	rjmp	.+284    	; 0xd4be <mmc_disk_initialize+0x13e>
    delayms(100);                                 /* Wait for 100ms */

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    power_on();                                   /* Turn on the socket power */

    FCLK_SLOW();
    d3a2:	4d d4       	rcall	.+2202   	; 0xdc3e <mmc_power_on>
    d3a4:	f9 d3       	rcall	.+2034   	; 0xdb98 <mmc_slow>

    for (n = 10; n; n--) xchg_spi(0xFF);          /* 80 dummy clocks */
    d3a6:	1a e0       	ldi	r17, 0x0A	; 10
    d3a8:	8f ef       	ldi	r24, 0xFF	; 255
    d3aa:	21 df       	rcall	.-446    	; 0xd1ee <xchg_spi>
    d3ac:	11 50       	subi	r17, 0x01	; 1
    d3ae:	e1 f7       	brne	.-8      	; 0xd3a8 <mmc_disk_initialize+0x28>

    ty = 0;
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    d3b0:	40 e0       	ldi	r20, 0x00	; 0
    d3b2:	50 e0       	ldi	r21, 0x00	; 0
    d3b4:	ba 01       	movw	r22, r20
    d3b6:	80 e0       	ldi	r24, 0x00	; 0
    d3b8:	79 df       	rcall	.-270    	; 0xd2ac <send_cmd>
    d3ba:	81 30       	cpi	r24, 0x01	; 1
    d3bc:	09 f0       	breq	.+2      	; 0xd3c0 <mmc_disk_initialize+0x40>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
    d3be:	6f c0       	rjmp	.+222    	; 0xd49e <mmc_disk_initialize+0x11e>
    d3c0:	80 ed       	ldi	r24, 0xD0	; 208
    d3c2:	97 e0       	ldi	r25, 0x07	; 7
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
    d3c4:	11 d4       	rcall	.+2082   	; 0xdbe8 <mmc_set_ms_timeout>
    d3c6:	4a ea       	ldi	r20, 0xAA	; 170
    d3c8:	51 e0       	ldi	r21, 0x01	; 1
    d3ca:	60 e0       	ldi	r22, 0x00	; 0
    d3cc:	70 e0       	ldi	r23, 0x00	; 0
    d3ce:	88 e0       	ldi	r24, 0x08	; 8
    d3d0:	6d df       	rcall	.-294    	; 0xd2ac <send_cmd>
    d3d2:	81 30       	cpi	r24, 0x01	; 1
    d3d4:	09 f0       	breq	.+2      	; 0xd3d8 <mmc_disk_initialize+0x58>
    d3d6:	3d c0       	rjmp	.+122    	; 0xd452 <mmc_disk_initialize+0xd2>
    d3d8:	8e 01       	movw	r16, r28
    d3da:	0f 5f       	subi	r16, 0xFF	; 255
    d3dc:	1f 4f       	sbci	r17, 0xFF	; 255
    d3de:	6e 01       	movw	r12, r28
    d3e0:	85 e0       	ldi	r24, 0x05	; 5
    d3e2:	c8 0e       	add	r12, r24
    d3e4:	d1 1c       	adc	r13, r1
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d3e6:	78 01       	movw	r14, r16
    d3e8:	8f ef       	ldi	r24, 0xFF	; 255
    d3ea:	fb d3       	rcall	.+2038   	; 0xdbe2 <mmc_spi_TXRX>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
    d3ec:	f7 01       	movw	r30, r14
    d3ee:	81 93       	st	Z+, r24
    d3f0:	7f 01       	movw	r14, r30
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
    d3f2:	ce 16       	cp	r12, r30
    d3f4:	df 06       	cpc	r13, r31
    d3f6:	c1 f7       	brne	.-16     	; 0xd3e8 <mmc_disk_initialize+0x68>
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
    d3f8:	8b 81       	ldd	r24, Y+3	; 0x03
    d3fa:	81 30       	cpi	r24, 0x01	; 1
    d3fc:	09 f0       	breq	.+2      	; 0xd400 <mmc_disk_initialize+0x80>
    d3fe:	4f c0       	rjmp	.+158    	; 0xd49e <mmc_disk_initialize+0x11e>
    d400:	8c 81       	ldd	r24, Y+4	; 0x04
    d402:	8a 3a       	cpi	r24, 0xAA	; 170
    d404:	09 f0       	breq	.+2      	; 0xd408 <mmc_disk_initialize+0x88>
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d406:	4b c0       	rjmp	.+150    	; 0xd49e <mmc_disk_initialize+0x11e>
    d408:	f6 d3       	rcall	.+2028   	; 0xdbf6 <mmc_test_timeout>
    d40a:	89 2b       	or	r24, r25
    d40c:	29 f0       	breq	.+10     	; 0xd418 <mmc_disk_initialize+0x98>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d40e:	f3 d3       	rcall	.+2022   	; 0xdbf6 <mmc_test_timeout>
    d410:	89 2b       	or	r24, r25
    d412:	09 f0       	breq	.+2      	; 0xd416 <mmc_disk_initialize+0x96>
    d414:	44 c0       	rjmp	.+136    	; 0xd49e <mmc_disk_initialize+0x11e>
    d416:	09 c0       	rjmp	.+18     	; 0xd42a <mmc_disk_initialize+0xaa>
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d418:	40 e0       	ldi	r20, 0x00	; 0
    d41a:	50 e0       	ldi	r21, 0x00	; 0
    d41c:	60 e0       	ldi	r22, 0x00	; 0
    d41e:	70 e4       	ldi	r23, 0x40	; 64
    d420:	89 ea       	ldi	r24, 0xA9	; 169
    d422:	44 df       	rcall	.-376    	; 0xd2ac <send_cmd>
    d424:	81 11       	cpse	r24, r1
    d426:	f0 cf       	rjmp	.-32     	; 0xd408 <mmc_disk_initialize+0x88>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d428:	f2 cf       	rjmp	.-28     	; 0xd40e <mmc_disk_initialize+0x8e>
    d42a:	40 e0       	ldi	r20, 0x00	; 0
    d42c:	50 e0       	ldi	r21, 0x00	; 0
    d42e:	ba 01       	movw	r22, r20
    d430:	8a e3       	ldi	r24, 0x3A	; 58
    d432:	3c df       	rcall	.-392    	; 0xd2ac <send_cmd>
    d434:	81 11       	cpse	r24, r1
    d436:	33 c0       	rjmp	.+102    	; 0xd49e <mmc_disk_initialize+0x11e>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d438:	8f ef       	ldi	r24, 0xFF	; 255
    d43a:	d3 d3       	rcall	.+1958   	; 0xdbe2 <mmc_spi_TXRX>
    d43c:	f8 01       	movw	r30, r16
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    d43e:	81 93       	st	Z+, r24
    d440:	8f 01       	movw	r16, r30
    d442:	ce 16       	cp	r12, r30
    d444:	df 06       	cpc	r13, r31
    d446:	c1 f7       	brne	.-16     	; 0xd438 <mmc_disk_initialize+0xb8>
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d448:	89 81       	ldd	r24, Y+1	; 0x01
    d44a:	86 fd       	sbrc	r24, 6
    d44c:	2a c0       	rjmp	.+84     	; 0xd4a2 <mmc_disk_initialize+0x122>
    d44e:	14 e0       	ldi	r17, 0x04	; 4
    d450:	29 c0       	rjmp	.+82     	; 0xd4a4 <mmc_disk_initialize+0x124>
                }
            }
        }
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
    d452:	80 ed       	ldi	r24, 0xD0	; 208
    d454:	97 e0       	ldi	r25, 0x07	; 7
    d456:	c8 d3       	rcall	.+1936   	; 0xdbe8 <mmc_set_ms_timeout>
            if (send_cmd(ACMD41, 0) <= 1)
    d458:	40 e0       	ldi	r20, 0x00	; 0
    d45a:	50 e0       	ldi	r21, 0x00	; 0
    d45c:	ba 01       	movw	r22, r20
    d45e:	89 ea       	ldi	r24, 0xA9	; 169
    d460:	25 df       	rcall	.-438    	; 0xd2ac <send_cmd>
    d462:	82 30       	cpi	r24, 0x02	; 2
    d464:	18 f0       	brcs	.+6      	; 0xd46c <mmc_disk_initialize+0xec>
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
            }
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
    d466:	11 e0       	ldi	r17, 0x01	; 1
    d468:	01 e0       	ldi	r16, 0x01	; 1
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
            if (send_cmd(ACMD41, 0) <= 1)
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
    d46a:	02 c0       	rjmp	.+4      	; 0xd470 <mmc_disk_initialize+0xf0>
    d46c:	12 e0       	ldi	r17, 0x02	; 2
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d46e:	09 ea       	ldi	r16, 0xA9	; 169
    d470:	c2 d3       	rcall	.+1924   	; 0xdbf6 <mmc_test_timeout>
    d472:	89 2b       	or	r24, r25
    d474:	21 f0       	breq	.+8      	; 0xd47e <mmc_disk_initialize+0xfe>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d476:	bf d3       	rcall	.+1918   	; 0xdbf6 <mmc_test_timeout>
    d478:	89 2b       	or	r24, r25
    d47a:	89 f4       	brne	.+34     	; 0xd49e <mmc_disk_initialize+0x11e>
    d47c:	08 c0       	rjmp	.+16     	; 0xd48e <mmc_disk_initialize+0x10e>
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d47e:	40 e0       	ldi	r20, 0x00	; 0
    d480:	50 e0       	ldi	r21, 0x00	; 0
    d482:	ba 01       	movw	r22, r20
    d484:	80 2f       	mov	r24, r16
    d486:	12 df       	rcall	.-476    	; 0xd2ac <send_cmd>
    d488:	81 11       	cpse	r24, r1
    d48a:	f2 cf       	rjmp	.-28     	; 0xd470 <mmc_disk_initialize+0xf0>
    d48c:	f4 cf       	rjmp	.-24     	; 0xd476 <mmc_disk_initialize+0xf6>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d48e:	40 e0       	ldi	r20, 0x00	; 0
    d490:	52 e0       	ldi	r21, 0x02	; 2
    d492:	60 e0       	ldi	r22, 0x00	; 0
    d494:	70 e0       	ldi	r23, 0x00	; 0
    d496:	80 e1       	ldi	r24, 0x10	; 16
    d498:	09 df       	rcall	.-494    	; 0xd2ac <send_cmd>
    d49a:	88 23       	and	r24, r24
                ty = 0;
    d49c:	19 f0       	breq	.+6      	; 0xd4a4 <mmc_disk_initialize+0x124>
    d49e:	10 e0       	ldi	r17, 0x00	; 0
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d4a0:	01 c0       	rjmp	.+2      	; 0xd4a4 <mmc_disk_initialize+0x124>
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
                ty = 0;
        }
    }

    CardType = ty;
    d4a2:	1c e0       	ldi	r17, 0x0C	; 12
    d4a4:	10 93 21 18 	sts	0x1821, r17	; 0x801821 <CardType>
    deselect();
    d4a8:	a4 de       	rcall	.-696    	; 0xd1f2 <deselect>

    if (ty)                                       /* Initialization succeded */
    d4aa:	11 23       	and	r17, r17
    d4ac:	39 f0       	breq	.+14     	; 0xd4bc <mmc_disk_initialize+0x13c>
    {
        Stat &= ~STA_NOINIT;                      /* Clear STA_NOINIT */
    d4ae:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d4b2:	8e 7f       	andi	r24, 0xFE	; 254
    d4b4:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
        FCLK_FAST();
    d4b8:	81 d3       	rcall	.+1794   	; 0xdbbc <mmc_fast>
    d4ba:	01 c0       	rjmp	.+2      	; 0xd4be <mmc_disk_initialize+0x13e>
    d4bc:	c1 d3       	rcall	.+1922   	; 0xdc40 <mmc_power_off>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d4be:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    else
    {
        power_off();
    }

    return Stat;
    d4c2:	24 96       	adiw	r28, 0x04	; 4
    d4c4:	e8 e0       	ldi	r30, 0x08	; 8
}
    d4c6:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

0000d4ca <mmc_disk_status>:
    d4ca:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
/// @return STA_NOINIT if no drive
MEMSPACE
DSTATUS mmc_disk_status ( void )
{
    return Stat;
}
    d4ce:	08 95       	ret

0000d4d0 <mmc_disk_read>:
DRESULT mmc_disk_read (
BYTE *buff,                                       /*< Pointer to the data buffer to store read data */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /*< Sector count (1..128) */
)
{
    d4d0:	8f 92       	push	r8
    d4d2:	9f 92       	push	r9
    d4d4:	af 92       	push	r10
    d4d6:	bf 92       	push	r11
    d4d8:	ef 92       	push	r14
    d4da:	ff 92       	push	r15
    d4dc:	1f 93       	push	r17
    d4de:	cf 93       	push	r28
    d4e0:	df 93       	push	r29
    d4e2:	7c 01       	movw	r14, r24
    d4e4:	4a 01       	movw	r8, r20
    d4e6:	5b 01       	movw	r10, r22
    d4e8:	e9 01       	movw	r28, r18
    BYTE cmd;

    if (!count)
    d4ea:	20 97       	sbiw	r28, 0x00	; 0
    d4ec:	19 f4       	brne	.+6      	; 0xd4f4 <mmc_disk_read+0x24>
    {
        deselect();
    d4ee:	81 de       	rcall	.-766    	; 0xd1f2 <deselect>
        return RES_PARERR;
    d4f0:	84 e0       	ldi	r24, 0x04	; 4
    d4f2:	0d c0       	rjmp	.+26     	; 0xd50e <mmc_disk_read+0x3e>
    }

	if( Stat )
    d4f4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d4f8:	88 23       	and	r24, r24
    d4fa:	19 f0       	breq	.+6      	; 0xd502 <mmc_disk_read+0x32>
		set_error(1);
    d4fc:	81 e0       	ldi	r24, 0x01	; 1
    d4fe:	0e 94 fd 24 	call	0x49fa	; 0x49fa <set_error>

    if (Stat & STA_NOINIT)
    d502:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d506:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d508:	04 c0       	rjmp	.+8      	; 0xd512 <mmc_disk_read+0x42>
    d50a:	73 de       	rcall	.-794    	; 0xd1f2 <deselect>
        return RES_NOTRDY;
    d50c:	83 e0       	ldi	r24, 0x03	; 3
    d50e:	90 e0       	ldi	r25, 0x00	; 0
    d510:	36 c0       	rjmp	.+108    	; 0xd57e <mmc_disk_read+0xae>
    }
    if (Stat & STA_NODISK)
    d512:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d516:	81 fd       	sbrc	r24, 1
    d518:	f8 cf       	rjmp	.-16     	; 0xd50a <mmc_disk_read+0x3a>
    {
        deselect();
        return RES_NOTRDY;
	}
    GPIO_PIN_HI(LED1);
    d51a:	46 9a       	sbi	0x08, 6	; 8
    d51c:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d51e:	80 91 21 18 	lds	r24, 0x1821	; 0x801821 <CardType>
    d522:	83 fd       	sbrc	r24, 3
    d524:	07 c0       	rjmp	.+14     	; 0xd534 <mmc_disk_read+0x64>
    d526:	89 e0       	ldi	r24, 0x09	; 9
    d528:	88 0c       	add	r8, r8
    d52a:	99 1c       	adc	r9, r9
    d52c:	aa 1c       	adc	r10, r10
    d52e:	bb 1c       	adc	r11, r11
    d530:	8a 95       	dec	r24
    d532:	d1 f7       	brne	.-12     	; 0xd528 <mmc_disk_read+0x58>

    cmd = count > 1 ? CMD18 : CMD17;              /*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    d534:	c2 30       	cpi	r28, 0x02	; 2
    d536:	d1 05       	cpc	r29, r1
    d538:	10 f4       	brcc	.+4      	; 0xd53e <mmc_disk_read+0x6e>
    d53a:	11 e1       	ldi	r17, 0x11	; 17
    d53c:	01 c0       	rjmp	.+2      	; 0xd540 <mmc_disk_read+0x70>
    d53e:	12 e1       	ldi	r17, 0x12	; 18
    if (send_cmd(cmd, sector) == 0)
    d540:	b5 01       	movw	r22, r10
    d542:	a4 01       	movw	r20, r8
    d544:	81 2f       	mov	r24, r17
    d546:	b2 de       	rcall	.-668    	; 0xd2ac <send_cmd>
    d548:	81 11       	cpse	r24, r1
    d54a:	11 c0       	rjmp	.+34     	; 0xd56e <mmc_disk_read+0x9e>
    {
        do
        {
            if (!rcvr_datablock(buff, 512))
    d54c:	60 e0       	ldi	r22, 0x00	; 0
    d54e:	72 e0       	ldi	r23, 0x02	; 2
    d550:	c7 01       	movw	r24, r14
    d552:	55 de       	rcall	.-854    	; 0xd1fe <rcvr_datablock>
    d554:	89 2b       	or	r24, r25
    d556:	21 f0       	breq	.+8      	; 0xd560 <mmc_disk_read+0x90>
                break;
            buff += 512;
    d558:	8e ef       	ldi	r24, 0xFE	; 254
    d55a:	f8 1a       	sub	r15, r24
        } while (--count);
    d55c:	21 97       	sbiw	r28, 0x01	; 1
    d55e:	b1 f7       	brne	.-20     	; 0xd54c <mmc_disk_read+0x7c>
        if (cmd == CMD18) send_cmd(CMD12, 0);     /* STOP_TRANSMISSION */
    d560:	12 31       	cpi	r17, 0x12	; 18
    d562:	29 f4       	brne	.+10     	; 0xd56e <mmc_disk_read+0x9e>
    d564:	40 e0       	ldi	r20, 0x00	; 0
    d566:	50 e0       	ldi	r21, 0x00	; 0
    d568:	ba 01       	movw	r22, r20
    d56a:	8c e0       	ldi	r24, 0x0C	; 12
    }
    deselect();
    d56c:	9f de       	rcall	.-706    	; 0xd2ac <send_cmd>
    d56e:	41 de       	rcall	.-894    	; 0xd1f2 <deselect>
    GPIO_PIN_LOW(LED1);
    d570:	46 98       	cbi	0x08, 6	; 8
    d572:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d574:	81 e0       	ldi	r24, 0x01	; 1
    d576:	90 e0       	ldi	r25, 0x00	; 0
    d578:	cd 2b       	or	r28, r29
    d57a:	09 f4       	brne	.+2      	; 0xd57e <mmc_disk_read+0xae>
    d57c:	80 e0       	ldi	r24, 0x00	; 0
}
    d57e:	df 91       	pop	r29
    d580:	cf 91       	pop	r28
    d582:	1f 91       	pop	r17
    d584:	ff 90       	pop	r15
    d586:	ef 90       	pop	r14
    d588:	bf 90       	pop	r11
    d58a:	af 90       	pop	r10
    d58c:	9f 90       	pop	r9
    d58e:	8f 90       	pop	r8
    d590:	08 95       	ret

0000d592 <mmc_disk_write>:
DRESULT mmc_disk_write (
const BYTE *buff,                                 /*< Pointer to the data to be written */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /* Sector count (1..128) */
)
{
    d592:	a0 e0       	ldi	r26, 0x00	; 0
    d594:	b0 e0       	ldi	r27, 0x00	; 0
    d596:	ef ec       	ldi	r30, 0xCF	; 207
    d598:	fa e6       	ldi	r31, 0x6A	; 106
    d59a:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
    d59e:	8c 01       	movw	r16, r24
    d5a0:	6a 01       	movw	r12, r20
    d5a2:	7b 01       	movw	r14, r22
    d5a4:	e9 01       	movw	r28, r18
    if (!count)
    d5a6:	20 97       	sbiw	r28, 0x00	; 0
    d5a8:	19 f4       	brne	.+6      	; 0xd5b0 <mmc_disk_write+0x1e>
    {
        deselect();
    d5aa:	23 de       	rcall	.-954    	; 0xd1f2 <deselect>
        return RES_PARERR;
    d5ac:	84 e0       	ldi	r24, 0x04	; 4
    d5ae:	18 c0       	rjmp	.+48     	; 0xd5e0 <mmc_disk_write+0x4e>
    }

	if( Stat )
    d5b0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d5b4:	88 23       	and	r24, r24
    d5b6:	19 f0       	breq	.+6      	; 0xd5be <mmc_disk_write+0x2c>
		set_error(1);
    d5b8:	81 e0       	ldi	r24, 0x01	; 1
    d5ba:	0e 94 fd 24 	call	0x49fa	; 0x49fa <set_error>

    if (Stat & STA_NOINIT)
    d5be:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d5c2:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d5c4:	03 c0       	rjmp	.+6      	; 0xd5cc <mmc_disk_write+0x3a>
    d5c6:	15 de       	rcall	.-982    	; 0xd1f2 <deselect>
        return RES_NOTRDY;
    d5c8:	83 e0       	ldi	r24, 0x03	; 3
    d5ca:	0a c0       	rjmp	.+20     	; 0xd5e0 <mmc_disk_write+0x4e>
    }
    if (Stat & STA_NODISK)
    d5cc:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d5d0:	81 fd       	sbrc	r24, 1
    d5d2:	f9 cf       	rjmp	.-14     	; 0xd5c6 <mmc_disk_write+0x34>
    {
        deselect();
        return RES_NOTRDY;
	}
    if (Stat & STA_PROTECT)
    d5d4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d5d8:	82 ff       	sbrs	r24, 2
    {
        deselect();
    d5da:	04 c0       	rjmp	.+8      	; 0xd5e4 <mmc_disk_write+0x52>
    d5dc:	0a de       	rcall	.-1004   	; 0xd1f2 <deselect>
        return RES_WRPRT;
    d5de:	82 e0       	ldi	r24, 0x02	; 2
    d5e0:	90 e0       	ldi	r25, 0x00	; 0
    d5e2:	46 c0       	rjmp	.+140    	; 0xd670 <mmc_disk_write+0xde>
    }

    GPIO_PIN_HI(LED1);
    d5e4:	46 9a       	sbi	0x08, 6	; 8
    d5e6:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d5e8:	80 91 21 18 	lds	r24, 0x1821	; 0x801821 <CardType>
    d5ec:	83 fd       	sbrc	r24, 3
    d5ee:	07 c0       	rjmp	.+14     	; 0xd5fe <mmc_disk_write+0x6c>
    d5f0:	99 e0       	ldi	r25, 0x09	; 9
    d5f2:	cc 0c       	add	r12, r12
    d5f4:	dd 1c       	adc	r13, r13
    d5f6:	ee 1c       	adc	r14, r14
    d5f8:	ff 1c       	adc	r15, r15
    d5fa:	9a 95       	dec	r25
    d5fc:	d1 f7       	brne	.-12     	; 0xd5f2 <mmc_disk_write+0x60>

    if (count == 1)                               /* Single block write */
    d5fe:	c1 30       	cpi	r28, 0x01	; 1
    d600:	d1 05       	cpc	r29, r1
    d602:	89 f4       	brne	.+34     	; 0xd626 <mmc_disk_write+0x94>
    {
        if ((send_cmd(CMD24, sector) == 0)        /* WRITE_BLOCK */
    d604:	b7 01       	movw	r22, r14
    d606:	a6 01       	movw	r20, r12
    d608:	88 e1       	ldi	r24, 0x18	; 24
    d60a:	50 de       	rcall	.-864    	; 0xd2ac <send_cmd>
    d60c:	81 11       	cpse	r24, r1
            && xmit_datablock(buff, 0xFE))
    d60e:	26 c0       	rjmp	.+76     	; 0xd65c <mmc_disk_write+0xca>
    d610:	6e ef       	ldi	r22, 0xFE	; 254
    d612:	c8 01       	movw	r24, r16
    d614:	8e de       	rcall	.-740    	; 0xd332 <xmit_datablock>
    d616:	31 e0       	ldi	r19, 0x01	; 1
    d618:	20 e0       	ldi	r18, 0x00	; 0
    d61a:	89 2b       	or	r24, r25
    d61c:	09 f0       	breq	.+2      	; 0xd620 <mmc_disk_write+0x8e>
    d61e:	30 e0       	ldi	r19, 0x00	; 0
    d620:	c3 2f       	mov	r28, r19
    d622:	d2 2f       	mov	r29, r18
    d624:	1d c0       	rjmp	.+58     	; 0xd660 <mmc_disk_write+0xce>
            count = 0;
    }
    else                                          /* Multiple block write */
    {
        if (CardType & CT_SDC) send_cmd(ACMD23, count);
    d626:	86 70       	andi	r24, 0x06	; 6
    d628:	29 f0       	breq	.+10     	; 0xd634 <mmc_disk_write+0xa2>
    d62a:	ae 01       	movw	r20, r28
    d62c:	60 e0       	ldi	r22, 0x00	; 0
    d62e:	70 e0       	ldi	r23, 0x00	; 0
    d630:	87 e9       	ldi	r24, 0x97	; 151
        if (send_cmd(CMD25, sector) == 0)         /* WRITE_MULTIPLE_BLOCK */
    d632:	3c de       	rcall	.-904    	; 0xd2ac <send_cmd>
    d634:	b7 01       	movw	r22, r14
    d636:	a6 01       	movw	r20, r12
    d638:	89 e1       	ldi	r24, 0x19	; 25
    d63a:	38 de       	rcall	.-912    	; 0xd2ac <send_cmd>
    d63c:	81 11       	cpse	r24, r1
        {
            do
            {
                if (!xmit_datablock(buff, 0xFC)) break;
    d63e:	10 c0       	rjmp	.+32     	; 0xd660 <mmc_disk_write+0xce>
    d640:	6c ef       	ldi	r22, 0xFC	; 252
    d642:	c8 01       	movw	r24, r16
    d644:	76 de       	rcall	.-788    	; 0xd332 <xmit_datablock>
    d646:	89 2b       	or	r24, r25
                buff += 512;
    d648:	19 f0       	breq	.+6      	; 0xd650 <mmc_disk_write+0xbe>
            } while (--count);
    d64a:	1e 5f       	subi	r17, 0xFE	; 254
    d64c:	21 97       	sbiw	r28, 0x01	; 1
            if (!xmit_datablock(0, 0xFD))         /* STOP_TRAN token */
    d64e:	c1 f7       	brne	.-16     	; 0xd640 <mmc_disk_write+0xae>
    d650:	6d ef       	ldi	r22, 0xFD	; 253
    d652:	80 e0       	ldi	r24, 0x00	; 0
    d654:	90 e0       	ldi	r25, 0x00	; 0
    d656:	6d de       	rcall	.-806    	; 0xd332 <xmit_datablock>
    d658:	89 2b       	or	r24, r25
                count = 1;
    d65a:	11 f4       	brne	.+4      	; 0xd660 <mmc_disk_write+0xce>
    d65c:	c1 e0       	ldi	r28, 0x01	; 1
        }
    }
    deselect();
    d65e:	d0 e0       	ldi	r29, 0x00	; 0
    d660:	c8 dd       	rcall	.-1136   	; 0xd1f2 <deselect>
    GPIO_PIN_LOW(LED1);
    d662:	46 98       	cbi	0x08, 6	; 8
    d664:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d666:	81 e0       	ldi	r24, 0x01	; 1
    d668:	90 e0       	ldi	r25, 0x00	; 0
    d66a:	cd 2b       	or	r28, r29
    d66c:	09 f4       	brne	.+2      	; 0xd670 <mmc_disk_write+0xde>
    d66e:	80 e0       	ldi	r24, 0x00	; 0
}
    d670:	cd b7       	in	r28, 0x3d	; 61
    d672:	de b7       	in	r29, 0x3e	; 62
    d674:	e8 e0       	ldi	r30, 0x08	; 8
    d676:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

0000d67a <mmc_disk_ioctl>:
MEMSPACE
DRESULT mmc_disk_ioctl (
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d67a:	a0 e1       	ldi	r26, 0x10	; 16
    d67c:	b0 e0       	ldi	r27, 0x00	; 0
    d67e:	e3 e4       	ldi	r30, 0x43	; 67
    d680:	fb e6       	ldi	r31, 0x6B	; 107
    d682:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
    SDIO_CTRL *sdi;
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    d686:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d68a:	90 fd       	sbrc	r25, 0
    d68c:	31 c2       	rjmp	.+1122   	; 0xdaf0 <mmc_disk_ioctl+0x476>
    d68e:	8b 01       	movw	r16, r22
        return RES_NOTRDY;

    if (Stat & STA_NODISK)
    d690:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d694:	91 ff       	sbrs	r25, 1
    d696:	02 c0       	rjmp	.+4      	; 0xd69c <mmc_disk_ioctl+0x22>
    {
        deselect();
    d698:	ac dd       	rcall	.-1192   	; 0xd1f2 <deselect>
    d69a:	2a c2       	rjmp	.+1108   	; 0xdaf0 <mmc_disk_ioctl+0x476>
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d69c:	83 33       	cpi	r24, 0x33	; 51
    d69e:	09 f4       	brne	.+2      	; 0xd6a2 <mmc_disk_ioctl+0x28>
    d6a0:	01 c1       	rjmp	.+514    	; 0xd8a4 <mmc_disk_ioctl+0x22a>
    d6a2:	a0 f4       	brcc	.+40     	; 0xd6cc <mmc_disk_ioctl+0x52>
    d6a4:	83 30       	cpi	r24, 0x03	; 3
    d6a6:	09 f4       	brne	.+2      	; 0xd6aa <mmc_disk_ioctl+0x30>
    d6a8:	85 c0       	rjmp	.+266    	; 0xd7b4 <mmc_disk_ioctl+0x13a>
    d6aa:	28 f4       	brcc	.+10     	; 0xd6b6 <mmc_disk_ioctl+0x3c>
    d6ac:	88 23       	and	r24, r24
    d6ae:	11 f1       	breq	.+68     	; 0xd6f4 <mmc_disk_ioctl+0x7a>
    d6b0:	81 30       	cpi	r24, 0x01	; 1
    d6b2:	11 f1       	breq	.+68     	; 0xd6f8 <mmc_disk_ioctl+0x7e>
    d6b4:	1f c2       	rjmp	.+1086   	; 0xdaf4 <mmc_disk_ioctl+0x47a>
    d6b6:	87 30       	cpi	r24, 0x07	; 7
    d6b8:	09 f4       	brne	.+2      	; 0xd6bc <mmc_disk_ioctl+0x42>
    d6ba:	2a c1       	rjmp	.+596    	; 0xd910 <mmc_disk_ioctl+0x296>
    d6bc:	82 33       	cpi	r24, 0x32	; 50
    d6be:	09 f0       	breq	.+2      	; 0xd6c2 <mmc_disk_ioctl+0x48>
    d6c0:	19 c2       	rjmp	.+1074   	; 0xdaf4 <mmc_disk_ioctl+0x47a>
#endif

/* Following commands are never used by FatFs module */

        case MMC_GET_TYPE :                       /* Get card type flags (1 byte) */
            *ptr = CardType;
    d6c2:	80 91 21 18 	lds	r24, 0x1821	; 0x801821 <CardType>
    d6c6:	fb 01       	movw	r30, r22
    d6c8:	80 83       	st	Z, r24
    d6ca:	28 c1       	rjmp	.+592    	; 0xd91c <mmc_disk_ioctl+0x2a2>
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d6cc:	86 33       	cpi	r24, 0x36	; 54
    d6ce:	09 f4       	brne	.+2      	; 0xd6d2 <mmc_disk_ioctl+0x58>
    d6d0:	0c c1       	rjmp	.+536    	; 0xd8ea <mmc_disk_ioctl+0x270>
    d6d2:	38 f4       	brcc	.+14     	; 0xd6e2 <mmc_disk_ioctl+0x68>
    d6d4:	84 33       	cpi	r24, 0x34	; 52
    d6d6:	09 f4       	brne	.+2      	; 0xd6da <mmc_disk_ioctl+0x60>
    d6d8:	ea c0       	rjmp	.+468    	; 0xd8ae <mmc_disk_ioctl+0x234>
    d6da:	85 33       	cpi	r24, 0x35	; 53
    d6dc:	09 f4       	brne	.+2      	; 0xd6e0 <mmc_disk_ioctl+0x66>
    d6de:	f1 c0       	rjmp	.+482    	; 0xd8c2 <mmc_disk_ioctl+0x248>
    d6e0:	09 c2       	rjmp	.+1042   	; 0xdaf4 <mmc_disk_ioctl+0x47a>
    d6e2:	88 33       	cpi	r24, 0x38	; 56
    d6e4:	09 f4       	brne	.+2      	; 0xd6e8 <mmc_disk_ioctl+0x6e>
    d6e6:	74 c1       	rjmp	.+744    	; 0xd9d0 <mmc_disk_ioctl+0x356>
    d6e8:	08 f4       	brcc	.+2      	; 0xd6ec <mmc_disk_ioctl+0x72>
    d6ea:	1a c1       	rjmp	.+564    	; 0xd920 <mmc_disk_ioctl+0x2a6>
    d6ec:	89 33       	cpi	r24, 0x39	; 57
    d6ee:	09 f4       	brne	.+2      	; 0xd6f2 <mmc_disk_ioctl+0x78>
    d6f0:	bc c1       	rjmp	.+888    	; 0xda6a <mmc_disk_ioctl+0x3f0>
    {
        case CTRL_SYNC :                          /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select()) res = RES_OK;
    d6f2:	00 c2       	rjmp	.+1024   	; 0xdaf4 <mmc_disk_ioctl+0x47a>
    d6f4:	b9 dd       	rcall	.-1166   	; 0xd268 <select>
    d6f6:	06 c1       	rjmp	.+524    	; 0xd904 <mmc_disk_ioctl+0x28a>
            deselect();
            break;

        case GET_SECTOR_COUNT :                   /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d6f8:	40 e0       	ldi	r20, 0x00	; 0
    d6fa:	50 e0       	ldi	r21, 0x00	; 0
    d6fc:	ba 01       	movw	r22, r20
    d6fe:	89 e0       	ldi	r24, 0x09	; 9
    d700:	d5 dd       	rcall	.-1110   	; 0xd2ac <send_cmd>
    d702:	81 11       	cpse	r24, r1
    d704:	f1 c1       	rjmp	.+994    	; 0xdae8 <mmc_disk_ioctl+0x46e>
    d706:	60 e1       	ldi	r22, 0x10	; 16
    d708:	70 e0       	ldi	r23, 0x00	; 0
    d70a:	ce 01       	movw	r24, r28
    d70c:	01 96       	adiw	r24, 0x01	; 1
    d70e:	77 dd       	rcall	.-1298   	; 0xd1fe <rcvr_datablock>
    d710:	89 2b       	or	r24, r25
    d712:	09 f4       	brne	.+2      	; 0xd716 <mmc_disk_ioctl+0x9c>
    d714:	e9 c1       	rjmp	.+978    	; 0xdae8 <mmc_disk_ioctl+0x46e>
            {
                if ((csd[0] >> 6) == 1)           /* SDC ver 2.00 */
    d716:	99 81       	ldd	r25, Y+1	; 0x01
    d718:	92 95       	swap	r25
    d71a:	96 95       	lsr	r25
    d71c:	96 95       	lsr	r25
    d71e:	93 70       	andi	r25, 0x03	; 3
    d720:	29 85       	ldd	r18, Y+9	; 0x09
    d722:	4a 85       	ldd	r20, Y+10	; 0x0a
    d724:	88 85       	ldd	r24, Y+8	; 0x08
    d726:	91 30       	cpi	r25, 0x01	; 1
    d728:	d9 f4       	brne	.+54     	; 0xd760 <mmc_disk_ioctl+0xe6>
                {
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
                    *(DWORD*)buff = csize << 10;
    d72a:	30 e0       	ldi	r19, 0x00	; 0
    d72c:	32 2f       	mov	r19, r18
    d72e:	22 27       	eor	r18, r18
    d730:	24 0f       	add	r18, r20
    d732:	31 1d       	adc	r19, r1
    d734:	8f 73       	andi	r24, 0x3F	; 63
    d736:	90 e0       	ldi	r25, 0x00	; 0
    d738:	a0 e0       	ldi	r26, 0x00	; 0
    d73a:	b0 e0       	ldi	r27, 0x00	; 0
    d73c:	dc 01       	movw	r26, r24
    d73e:	99 27       	eor	r25, r25
    d740:	88 27       	eor	r24, r24
    d742:	01 96       	adiw	r24, 0x01	; 1
    d744:	a1 1d       	adc	r26, r1
    d746:	b1 1d       	adc	r27, r1
    d748:	82 0f       	add	r24, r18
    d74a:	93 1f       	adc	r25, r19
    d74c:	a1 1d       	adc	r26, r1
    d74e:	b1 1d       	adc	r27, r1
    d750:	fa e0       	ldi	r31, 0x0A	; 10
    d752:	88 0f       	add	r24, r24
    d754:	99 1f       	adc	r25, r25
    d756:	aa 1f       	adc	r26, r26
    d758:	bb 1f       	adc	r27, r27
    d75a:	fa 95       	dec	r31
    d75c:	d1 f7       	brne	.-12     	; 0xd752 <mmc_disk_ioctl+0xd8>
    d75e:	9b c0       	rjmp	.+310    	; 0xd896 <mmc_disk_ioctl+0x21c>
                }                                 /* SDC ver 1.XX or MMC*/
                else
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(DWORD*)buff = csize << (n - 9);
    d760:	22 95       	swap	r18
    d762:	26 95       	lsr	r18
    d764:	26 95       	lsr	r18
    d766:	23 70       	andi	r18, 0x03	; 3
    d768:	f4 e0       	ldi	r31, 0x04	; 4
    d76a:	8f 9f       	mul	r24, r31
    d76c:	c0 01       	movw	r24, r0
    d76e:	11 24       	eor	r1, r1
    d770:	82 0f       	add	r24, r18
    d772:	91 1d       	adc	r25, r1
    d774:	01 96       	adiw	r24, 0x01	; 1
    d776:	2f 81       	ldd	r18, Y+7	; 0x07
    d778:	23 70       	andi	r18, 0x03	; 3
    d77a:	30 e0       	ldi	r19, 0x00	; 0
    d77c:	32 2f       	mov	r19, r18
    d77e:	22 27       	eor	r18, r18
    d780:	33 0f       	add	r19, r19
    d782:	33 0f       	add	r19, r19
    d784:	82 0f       	add	r24, r18
    d786:	93 1f       	adc	r25, r19
    d788:	a0 e0       	ldi	r26, 0x00	; 0
    d78a:	b0 e0       	ldi	r27, 0x00	; 0
    d78c:	2e 81       	ldd	r18, Y+6	; 0x06
    d78e:	32 2f       	mov	r19, r18
    d790:	3f 70       	andi	r19, 0x0F	; 15
    d792:	2b 85       	ldd	r18, Y+11	; 0x0b
    d794:	22 1f       	adc	r18, r18
    d796:	22 27       	eor	r18, r18
    d798:	22 1f       	adc	r18, r18
    d79a:	23 0f       	add	r18, r19
    d79c:	43 70       	andi	r20, 0x03	; 3
    d79e:	44 0f       	add	r20, r20
    d7a0:	42 0f       	add	r20, r18
    d7a2:	47 50       	subi	r20, 0x07	; 7
    d7a4:	04 c0       	rjmp	.+8      	; 0xd7ae <mmc_disk_ioctl+0x134>
    d7a6:	88 0f       	add	r24, r24
    d7a8:	99 1f       	adc	r25, r25
    d7aa:	aa 1f       	adc	r26, r26
    d7ac:	bb 1f       	adc	r27, r27
    d7ae:	4a 95       	dec	r20
    d7b0:	d2 f7       	brpl	.-12     	; 0xd7a6 <mmc_disk_ioctl+0x12c>
    d7b2:	71 c0       	rjmp	.+226    	; 0xd896 <mmc_disk_ioctl+0x21c>
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d7b4:	80 91 21 18 	lds	r24, 0x1821	; 0x801821 <CardType>
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d7b8:	40 e0       	ldi	r20, 0x00	; 0
    d7ba:	50 e0       	ldi	r21, 0x00	; 0
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d7bc:	ba 01       	movw	r22, r20
    d7be:	82 ff       	sbrs	r24, 2
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d7c0:	24 c0       	rjmp	.+72     	; 0xd80a <mmc_disk_ioctl+0x190>
    d7c2:	8d e8       	ldi	r24, 0x8D	; 141
    d7c4:	73 dd       	rcall	.-1306   	; 0xd2ac <send_cmd>
    d7c6:	81 11       	cpse	r24, r1
                {
                    xchg_spi(0xFF);
    d7c8:	8f c1       	rjmp	.+798    	; 0xdae8 <mmc_disk_ioctl+0x46e>
    d7ca:	8f ef       	ldi	r24, 0xFF	; 255
                    if (rcvr_datablock(csd, 16))  /* Read partial block */
    d7cc:	10 dd       	rcall	.-1504   	; 0xd1ee <xchg_spi>
    d7ce:	60 e1       	ldi	r22, 0x10	; 16
    d7d0:	70 e0       	ldi	r23, 0x00	; 0
    d7d2:	ce 01       	movw	r24, r28
    d7d4:	01 96       	adiw	r24, 0x01	; 1
    d7d6:	13 dd       	rcall	.-1498   	; 0xd1fe <rcvr_datablock>
    d7d8:	89 2b       	or	r24, r25
    d7da:	09 f4       	brne	.+2      	; 0xd7de <mmc_disk_ioctl+0x164>
    d7dc:	85 c1       	rjmp	.+778    	; 0xdae8 <mmc_disk_ioctl+0x46e>
    d7de:	50 e3       	ldi	r21, 0x30	; 48
                    {
/* Purge trailing data */
                        for (n = 64 - 16; n; n--) xchg_spi(0xFF);
    d7e0:	f5 2e       	mov	r15, r21
    d7e2:	8f ef       	ldi	r24, 0xFF	; 255
    d7e4:	04 dd       	rcall	.-1528   	; 0xd1ee <xchg_spi>
    d7e6:	fa 94       	dec	r15
    d7e8:	f1 10       	cpse	r15, r1
    d7ea:	fb cf       	rjmp	.-10     	; 0xd7e2 <mmc_disk_ioctl+0x168>
                        *(DWORD*)buff = 16UL << (csd[10] >> 4);
    d7ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    d7ee:	22 95       	swap	r18
    d7f0:	2f 70       	andi	r18, 0x0F	; 15
    d7f2:	80 e1       	ldi	r24, 0x10	; 16
    d7f4:	90 e0       	ldi	r25, 0x00	; 0
    d7f6:	a0 e0       	ldi	r26, 0x00	; 0
    d7f8:	b0 e0       	ldi	r27, 0x00	; 0
    d7fa:	04 c0       	rjmp	.+8      	; 0xd804 <mmc_disk_ioctl+0x18a>
    d7fc:	88 0f       	add	r24, r24
    d7fe:	99 1f       	adc	r25, r25
    d800:	aa 1f       	adc	r26, r26
    d802:	bb 1f       	adc	r27, r27
    d804:	2a 95       	dec	r18
    d806:	d2 f7       	brpl	.-12     	; 0xd7fc <mmc_disk_ioctl+0x182>
                }
            }                                     /* SDv1 or MMCv3 */
            else
            {
/* Read CSD */
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d808:	46 c0       	rjmp	.+140    	; 0xd896 <mmc_disk_ioctl+0x21c>
    d80a:	89 e0       	ldi	r24, 0x09	; 9
    d80c:	4f dd       	rcall	.-1378   	; 0xd2ac <send_cmd>
    d80e:	81 11       	cpse	r24, r1
    d810:	6b c1       	rjmp	.+726    	; 0xdae8 <mmc_disk_ioctl+0x46e>
    d812:	60 e1       	ldi	r22, 0x10	; 16
    d814:	70 e0       	ldi	r23, 0x00	; 0
    d816:	ce 01       	movw	r24, r28
    d818:	01 96       	adiw	r24, 0x01	; 1
    d81a:	f1 dc       	rcall	.-1566   	; 0xd1fe <rcvr_datablock>
    d81c:	89 2b       	or	r24, r25
    d81e:	09 f4       	brne	.+2      	; 0xd822 <mmc_disk_ioctl+0x1a8>
    d820:	63 c1       	rjmp	.+710    	; 0xdae8 <mmc_disk_ioctl+0x46e>
                {
                    if (CardType & CT_SD1)        /* SDv1 */
    d822:	90 91 21 18 	lds	r25, 0x1821	; 0x801821 <CardType>
    d826:	2b 85       	ldd	r18, Y+11	; 0x0b
    d828:	8c 85       	ldd	r24, Y+12	; 0x0c
    d82a:	91 ff       	sbrs	r25, 1
    d82c:	16 c0       	rjmp	.+44     	; 0xd85a <mmc_disk_ioctl+0x1e0>
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    d82e:	2f 73       	andi	r18, 0x3F	; 63
    d830:	88 1f       	adc	r24, r24
    d832:	88 27       	eor	r24, r24
    d834:	88 1f       	adc	r24, r24
    d836:	90 e0       	ldi	r25, 0x00	; 0
    d838:	01 96       	adiw	r24, 0x01	; 1
    d83a:	82 0f       	add	r24, r18
    d83c:	91 1d       	adc	r25, r1
    d83e:	82 0f       	add	r24, r18
    d840:	91 1d       	adc	r25, r1
    d842:	2e 85       	ldd	r18, Y+14	; 0x0e
    d844:	22 95       	swap	r18
    d846:	26 95       	lsr	r18
    d848:	26 95       	lsr	r18
    d84a:	23 70       	andi	r18, 0x03	; 3
    d84c:	21 50       	subi	r18, 0x01	; 1
    d84e:	02 c0       	rjmp	.+4      	; 0xd854 <mmc_disk_ioctl+0x1da>
    d850:	88 0f       	add	r24, r24
    d852:	99 1f       	adc	r25, r25
    d854:	2a 95       	dec	r18
    d856:	e2 f7       	brpl	.-8      	; 0xd850 <mmc_disk_ioctl+0x1d6>
    d858:	1c c0       	rjmp	.+56     	; 0xd892 <mmc_disk_ioctl+0x218>
                    }                             /* MMCv3 */
                    else
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    d85a:	38 2f       	mov	r19, r24
    d85c:	33 70       	andi	r19, 0x03	; 3
    d85e:	82 95       	swap	r24
    d860:	86 95       	lsr	r24
    d862:	87 70       	andi	r24, 0x07	; 7
    d864:	90 e0       	ldi	r25, 0x00	; 0
    d866:	f8 e0       	ldi	r31, 0x08	; 8
    d868:	3f 9f       	mul	r19, r31
    d86a:	80 0d       	add	r24, r0
    d86c:	91 1d       	adc	r25, r1
    d86e:	11 24       	eor	r1, r1
    d870:	01 96       	adiw	r24, 0x01	; 1
    d872:	2c 77       	andi	r18, 0x7C	; 124
    d874:	30 e0       	ldi	r19, 0x00	; 0
    d876:	35 95       	asr	r19
    d878:	27 95       	ror	r18
    d87a:	35 95       	asr	r19
    d87c:	27 95       	ror	r18
    d87e:	2f 5f       	subi	r18, 0xFF	; 255
    d880:	3f 4f       	sbci	r19, 0xFF	; 255
    d882:	82 9f       	mul	r24, r18
    d884:	a0 01       	movw	r20, r0
    d886:	83 9f       	mul	r24, r19
    d888:	50 0d       	add	r21, r0
    d88a:	92 9f       	mul	r25, r18
    d88c:	50 0d       	add	r21, r0
    d88e:	11 24       	eor	r1, r1
    d890:	ca 01       	movw	r24, r20
    d892:	a0 e0       	ldi	r26, 0x00	; 0
    d894:	b0 e0       	ldi	r27, 0x00	; 0
    d896:	f8 01       	movw	r30, r16
    d898:	80 83       	st	Z, r24
    d89a:	91 83       	std	Z+1, r25	; 0x01
    d89c:	a2 83       	std	Z+2, r26	; 0x02
    d89e:	b3 83       	std	Z+3, r27	; 0x03
                    }
                    res = RES_OK;
    d8a0:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
            break;

        case MMC_GET_CSD :                        /* Receive CSD as a data block (16 bytes) */
/* READ_CSD */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))
    d8a2:	23 c1       	rjmp	.+582    	; 0xdaea <mmc_disk_ioctl+0x470>
    d8a4:	40 e0       	ldi	r20, 0x00	; 0
    d8a6:	50 e0       	ldi	r21, 0x00	; 0
    d8a8:	ba 01       	movw	r22, r20
    d8aa:	89 e0       	ldi	r24, 0x09	; 9
            deselect();
            break;

        case MMC_GET_CID :                        /* Receive CID as a data block (16 bytes) */
/* READ_CID */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))
    d8ac:	04 c0       	rjmp	.+8      	; 0xd8b6 <mmc_disk_ioctl+0x23c>
    d8ae:	40 e0       	ldi	r20, 0x00	; 0
    d8b0:	50 e0       	ldi	r21, 0x00	; 0
    d8b2:	ba 01       	movw	r22, r20
    d8b4:	8a e0       	ldi	r24, 0x0A	; 10
    d8b6:	fa dc       	rcall	.-1548   	; 0xd2ac <send_cmd>
    d8b8:	81 11       	cpse	r24, r1
    d8ba:	16 c1       	rjmp	.+556    	; 0xdae8 <mmc_disk_ioctl+0x46e>
    d8bc:	60 e1       	ldi	r22, 0x10	; 16
    d8be:	70 e0       	ldi	r23, 0x00	; 0
                res = RES_OK;
            deselect();
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
    d8c0:	1f c0       	rjmp	.+62     	; 0xd900 <mmc_disk_ioctl+0x286>
    d8c2:	40 e0       	ldi	r20, 0x00	; 0
    d8c4:	50 e0       	ldi	r21, 0x00	; 0
    d8c6:	ba 01       	movw	r22, r20
    d8c8:	8a e3       	ldi	r24, 0x3A	; 58
    d8ca:	f0 dc       	rcall	.-1568   	; 0xd2ac <send_cmd>
    d8cc:	81 11       	cpse	r24, r1
    d8ce:	0c c1       	rjmp	.+536    	; 0xdae8 <mmc_disk_ioctl+0x46e>
    d8d0:	78 01       	movw	r14, r16
    d8d2:	f4 e0       	ldi	r31, 0x04	; 4
    d8d4:	ef 0e       	add	r14, r31
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d8d6:	f1 1c       	adc	r15, r1
    d8d8:	8f ef       	ldi	r24, 0xFF	; 255
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
            {
                for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    d8da:	83 d1       	rcall	.+774    	; 0xdbe2 <mmc_spi_TXRX>
    d8dc:	f8 01       	movw	r30, r16
    d8de:	81 93       	st	Z+, r24
    d8e0:	8f 01       	movw	r16, r30
    d8e2:	ee 15       	cp	r30, r14
    d8e4:	ff 05       	cpc	r31, r15
            }
            deselect();
            break;

        case MMC_GET_SDSTAT :                     /* Receive SD statsu as a data block (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0)         /* SD_STATUS */
    d8e6:	c1 f7       	brne	.-16     	; 0xd8d8 <mmc_disk_ioctl+0x25e>
    d8e8:	db cf       	rjmp	.-74     	; 0xd8a0 <mmc_disk_ioctl+0x226>
    d8ea:	40 e0       	ldi	r20, 0x00	; 0
    d8ec:	50 e0       	ldi	r21, 0x00	; 0
    d8ee:	ba 01       	movw	r22, r20
    d8f0:	8d e8       	ldi	r24, 0x8D	; 141
    d8f2:	dc dc       	rcall	.-1608   	; 0xd2ac <send_cmd>
            {
                xchg_spi(0xFF);
    d8f4:	81 11       	cpse	r24, r1
    d8f6:	f8 c0       	rjmp	.+496    	; 0xdae8 <mmc_disk_ioctl+0x46e>
    d8f8:	8f ef       	ldi	r24, 0xFF	; 255
                if (rcvr_datablock(ptr, 64)) res = RES_OK;
    d8fa:	79 dc       	rcall	.-1806   	; 0xd1ee <xchg_spi>
    d8fc:	60 e4       	ldi	r22, 0x40	; 64
    d8fe:	70 e0       	ldi	r23, 0x00	; 0
    d900:	c8 01       	movw	r24, r16
    d902:	7d dc       	rcall	.-1798   	; 0xd1fe <rcvr_datablock>
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    d904:	01 e0       	ldi	r16, 0x01	; 1
    d906:	10 e0       	ldi	r17, 0x00	; 0
    d908:	89 2b       	or	r24, r25
    d90a:	09 f4       	brne	.+2      	; 0xd90e <mmc_disk_ioctl+0x294>
    d90c:	ef c0       	rjmp	.+478    	; 0xdaec <mmc_disk_ioctl+0x472>
    d90e:	ea c0       	rjmp	.+468    	; 0xdae4 <mmc_disk_ioctl+0x46a>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d910:	97 d1       	rcall	.+814    	; 0xdc40 <mmc_power_off>
    d912:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
            deselect();
            break;

        case CTRL_POWER_OFF :                     /* Power off */
            power_off();
            Stat |= STA_NOINIT;
    d916:	81 60       	ori	r24, 0x01	; 1
    d918:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    d91c:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
    d91e:	eb c0       	rjmp	.+470    	; 0xdaf6 <mmc_disk_ioctl+0x47c>
    d920:	fb 01       	movw	r30, r22
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    d922:	43 81       	ldd	r20, Z+3	; 0x03
    d924:	54 81       	ldd	r21, Z+4	; 0x04
    d926:	65 81       	ldd	r22, Z+5	; 0x05
    d928:	76 81       	ldd	r23, Z+6	; 0x06
    d92a:	39 e0       	ldi	r19, 0x09	; 9
    d92c:	44 0f       	add	r20, r20
    d92e:	55 1f       	adc	r21, r21
    d930:	66 1f       	adc	r22, r22
    d932:	77 1f       	adc	r23, r23
    d934:	3a 95       	dec	r19
    d936:	d1 f7       	brne	.-12     	; 0xd92c <mmc_disk_ioctl+0x2b2>
    d938:	70 68       	ori	r23, 0x80	; 128
    d93a:	80 81       	ld	r24, Z
    d93c:	90 e0       	ldi	r25, 0x00	; 0
    d93e:	a0 e0       	ldi	r26, 0x00	; 0
    d940:	b0 e0       	ldi	r27, 0x00	; 0
    d942:	2c e1       	ldi	r18, 0x1C	; 28
    d944:	88 0f       	add	r24, r24
    d946:	99 1f       	adc	r25, r25
    d948:	aa 1f       	adc	r26, r26
    d94a:	bb 1f       	adc	r27, r27
    d94c:	2a 95       	dec	r18
    d94e:	d1 f7       	brne	.-12     	; 0xd944 <mmc_disk_ioctl+0x2ca>
    d950:	48 2b       	or	r20, r24
    d952:	59 2b       	or	r21, r25
    d954:	6a 2b       	or	r22, r26
    d956:	7b 2b       	or	r23, r27
    d958:	81 81       	ldd	r24, Z+1	; 0x01
    d95a:	92 81       	ldd	r25, Z+2	; 0x02
    d95c:	01 97       	sbiw	r24, 0x01	; 1
    d95e:	91 70       	andi	r25, 0x01	; 1
    d960:	a0 e0       	ldi	r26, 0x00	; 0
    d962:	b0 e0       	ldi	r27, 0x00	; 0
    d964:	48 2b       	or	r20, r24
    d966:	59 2b       	or	r21, r25
    d968:	6a 2b       	or	r22, r26
    d96a:	7b 2b       	or	r23, r27
    d96c:	80 e3       	ldi	r24, 0x30	; 48
    d96e:	9e dc       	rcall	.-1732   	; 0xd2ac <send_cmd>
            {
                mmc_set_ms_timeout(1000);
    d970:	81 11       	cpse	r24, r1
    d972:	ba c0       	rjmp	.+372    	; 0xdae8 <mmc_disk_ioctl+0x46e>
    d974:	88 ee       	ldi	r24, 0xE8	; 232
    d976:	93 e0       	ldi	r25, 0x03	; 3
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d978:	37 d1       	rcall	.+622    	; 0xdbe8 <mmc_set_ms_timeout>
    d97a:	8f ef       	ldi	r24, 0xFF	; 255
    d97c:	32 d1       	rcall	.+612    	; 0xdbe2 <mmc_spi_TXRX>
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
    d97e:	8f 3f       	cpi	r24, 0xFF	; 255
    d980:	21 f4       	brne	.+8      	; 0xd98a <mmc_disk_ioctl+0x310>
    d982:	39 d1       	rcall	.+626    	; 0xdbf6 <mmc_test_timeout>
    d984:	89 2b       	or	r24, r25
    d986:	c9 f3       	breq	.-14     	; 0xd97a <mmc_disk_ioctl+0x300>
    d988:	af c0       	rjmp	.+350    	; 0xdae8 <mmc_disk_ioctl+0x46e>
                    ;
                if (rc == 0xFE)
    d98a:	8e 3f       	cpi	r24, 0xFE	; 254
    d98c:	09 f0       	breq	.+2      	; 0xd990 <mmc_disk_ioctl+0x316>
    d98e:	ac c0       	rjmp	.+344    	; 0xdae8 <mmc_disk_ioctl+0x46e>
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    d990:	f8 01       	movw	r30, r16
    d992:	e7 80       	ldd	r14, Z+7	; 0x07
    d994:	f0 84       	ldd	r15, Z+8	; 0x08
    d996:	c1 80       	ldd	r12, Z+1	; 0x01
    d998:	d2 80       	ldd	r13, Z+2	; 0x02
    d99a:	ce 0c       	add	r12, r14
    d99c:	df 1c       	adc	r13, r15
    d99e:	ce 14       	cp	r12, r14
    d9a0:	df 04       	cpc	r13, r15
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d9a2:	31 f0       	breq	.+12     	; 0xd9b0 <mmc_disk_ioctl+0x336>
    d9a4:	8f ef       	ldi	r24, 0xFF	; 255
    d9a6:	1d d1       	rcall	.+570    	; 0xdbe2 <mmc_spi_TXRX>
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
                    ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    d9a8:	f7 01       	movw	r30, r14
    d9aa:	81 93       	st	Z+, r24
    d9ac:	7f 01       	movw	r14, r30
    d9ae:	f7 cf       	rjmp	.-18     	; 0xd99e <mmc_disk_ioctl+0x324>
                    for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    d9b0:	f8 01       	movw	r30, r16
    d9b2:	81 81       	ldd	r24, Z+1	; 0x01
    d9b4:	92 81       	ldd	r25, Z+2	; 0x02
    d9b6:	02 e0       	ldi	r16, 0x02	; 2
    d9b8:	12 e0       	ldi	r17, 0x02	; 2
    d9ba:	08 1b       	sub	r16, r24
    d9bc:	19 0b       	sbc	r17, r25
    d9be:	01 15       	cp	r16, r1
    d9c0:	11 05       	cpc	r17, r1
    d9c2:	09 f4       	brne	.+2      	; 0xd9c6 <mmc_disk_ioctl+0x34c>
    d9c4:	6d cf       	rjmp	.-294    	; 0xd8a0 <mmc_disk_ioctl+0x226>
    d9c6:	8f ef       	ldi	r24, 0xFF	; 255
    d9c8:	12 dc       	rcall	.-2012   	; 0xd1ee <xchg_spi>
    d9ca:	01 50       	subi	r16, 0x01	; 1
    d9cc:	11 09       	sbc	r17, r1
    d9ce:	f7 cf       	rjmp	.-18     	; 0xd9be <mmc_disk_ioctl+0x344>
    d9d0:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    d9d2:	43 81       	ldd	r20, Z+3	; 0x03
    d9d4:	54 81       	ldd	r21, Z+4	; 0x04
    d9d6:	65 81       	ldd	r22, Z+5	; 0x05
    d9d8:	76 81       	ldd	r23, Z+6	; 0x06
    d9da:	39 e0       	ldi	r19, 0x09	; 9
    d9dc:	44 0f       	add	r20, r20
    d9de:	55 1f       	adc	r21, r21
    d9e0:	66 1f       	adc	r22, r22
    d9e2:	77 1f       	adc	r23, r23
    d9e4:	3a 95       	dec	r19
    d9e6:	d1 f7       	brne	.-12     	; 0xd9dc <mmc_disk_ioctl+0x362>
    d9e8:	70 68       	ori	r23, 0x80	; 128
    d9ea:	80 81       	ld	r24, Z
    d9ec:	90 e0       	ldi	r25, 0x00	; 0
    d9ee:	a0 e0       	ldi	r26, 0x00	; 0
    d9f0:	b0 e0       	ldi	r27, 0x00	; 0
    d9f2:	2c e1       	ldi	r18, 0x1C	; 28
    d9f4:	88 0f       	add	r24, r24
    d9f6:	99 1f       	adc	r25, r25
    d9f8:	aa 1f       	adc	r26, r26
    d9fa:	bb 1f       	adc	r27, r27
    d9fc:	2a 95       	dec	r18
    d9fe:	d1 f7       	brne	.-12     	; 0xd9f4 <mmc_disk_ioctl+0x37a>
    da00:	48 2b       	or	r20, r24
    da02:	59 2b       	or	r21, r25
    da04:	6a 2b       	or	r22, r26
    da06:	7b 2b       	or	r23, r27
    da08:	81 81       	ldd	r24, Z+1	; 0x01
    da0a:	92 81       	ldd	r25, Z+2	; 0x02
    da0c:	01 97       	sbiw	r24, 0x01	; 1
    da0e:	91 70       	andi	r25, 0x01	; 1
    da10:	a0 e0       	ldi	r26, 0x00	; 0
    da12:	b0 e0       	ldi	r27, 0x00	; 0
    da14:	48 2b       	or	r20, r24
    da16:	59 2b       	or	r21, r25
    da18:	6a 2b       	or	r22, r26
    da1a:	7b 2b       	or	r23, r27
    da1c:	81 e3       	ldi	r24, 0x31	; 49
    da1e:	46 dc       	rcall	.-1908   	; 0xd2ac <send_cmd>
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    da20:	81 11       	cpse	r24, r1
    da22:	62 c0       	rjmp	.+196    	; 0xdae8 <mmc_disk_ioctl+0x46e>
    da24:	8f ef       	ldi	r24, 0xFF	; 255
    da26:	e3 db       	rcall	.-2106   	; 0xd1ee <xchg_spi>
    da28:	8e ef       	ldi	r24, 0xFE	; 254
    da2a:	e1 db       	rcall	.-2110   	; 0xd1ee <xchg_spi>
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    da2c:	f8 01       	movw	r30, r16
    da2e:	e7 80       	ldd	r14, Z+7	; 0x07
    da30:	f0 84       	ldd	r15, Z+8	; 0x08
    da32:	c1 80       	ldd	r12, Z+1	; 0x01
    da34:	d2 80       	ldd	r13, Z+2	; 0x02
    da36:	ce 0c       	add	r12, r14
    da38:	df 1c       	adc	r13, r15
    da3a:	ec 14       	cp	r14, r12
    da3c:	fd 04       	cpc	r15, r13
    da3e:	29 f0       	breq	.+10     	; 0xda4a <mmc_disk_ioctl+0x3d0>
    da40:	f7 01       	movw	r30, r14
    da42:	81 91       	ld	r24, Z+
    da44:	7f 01       	movw	r14, r30
    da46:	d3 db       	rcall	.-2138   	; 0xd1ee <xchg_spi>
    da48:	f8 cf       	rjmp	.-16     	; 0xda3a <mmc_disk_ioctl+0x3c0>
                for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    da4a:	f8 01       	movw	r30, r16
    da4c:	81 81       	ldd	r24, Z+1	; 0x01
    da4e:	92 81       	ldd	r25, Z+2	; 0x02
    da50:	02 e0       	ldi	r16, 0x02	; 2
    da52:	12 e0       	ldi	r17, 0x02	; 2
    da54:	08 1b       	sub	r16, r24
    da56:	19 0b       	sbc	r17, r25
    da58:	8f ef       	ldi	r24, 0xFF	; 255
    da5a:	01 15       	cp	r16, r1
    da5c:	11 05       	cpc	r17, r1
    da5e:	09 f4       	brne	.+2      	; 0xda62 <mmc_disk_ioctl+0x3e8>
    da60:	3b c0       	rjmp	.+118    	; 0xdad8 <mmc_disk_ioctl+0x45e>
    da62:	c5 db       	rcall	.-2166   	; 0xd1ee <xchg_spi>
    da64:	01 50       	subi	r16, 0x01	; 1
    da66:	11 09       	sbc	r17, r1
    da68:	f7 cf       	rjmp	.-18     	; 0xda58 <mmc_disk_ioctl+0x3de>
    da6a:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    da6c:	43 81       	ldd	r20, Z+3	; 0x03
    da6e:	54 81       	ldd	r21, Z+4	; 0x04
    da70:	65 81       	ldd	r22, Z+5	; 0x05
    da72:	76 81       	ldd	r23, Z+6	; 0x06
    da74:	89 e0       	ldi	r24, 0x09	; 9
    da76:	44 0f       	add	r20, r20
    da78:	55 1f       	adc	r21, r21
    da7a:	66 1f       	adc	r22, r22
    da7c:	77 1f       	adc	r23, r23
    da7e:	8a 95       	dec	r24
    da80:	d1 f7       	brne	.-12     	; 0xda76 <mmc_disk_ioctl+0x3fc>
    da82:	74 68       	ori	r23, 0x84	; 132
    da84:	80 81       	ld	r24, Z
    da86:	90 e0       	ldi	r25, 0x00	; 0
    da88:	a0 e0       	ldi	r26, 0x00	; 0
    da8a:	b0 e0       	ldi	r27, 0x00	; 0
    da8c:	2c e1       	ldi	r18, 0x1C	; 28
    da8e:	88 0f       	add	r24, r24
    da90:	99 1f       	adc	r25, r25
    da92:	aa 1f       	adc	r26, r26
    da94:	bb 1f       	adc	r27, r27
    da96:	2a 95       	dec	r18
    da98:	d1 f7       	brne	.-12     	; 0xda8e <mmc_disk_ioctl+0x414>
    da9a:	48 2b       	or	r20, r24
    da9c:	59 2b       	or	r21, r25
    da9e:	6a 2b       	or	r22, r26
    daa0:	7b 2b       	or	r23, r27
    daa2:	82 81       	ldd	r24, Z+2	; 0x02
    daa4:	90 e0       	ldi	r25, 0x00	; 0
    daa6:	a0 e0       	ldi	r26, 0x00	; 0
    daa8:	b0 e0       	ldi	r27, 0x00	; 0
    daaa:	48 2b       	or	r20, r24
    daac:	59 2b       	or	r21, r25
    daae:	6a 2b       	or	r22, r26
    dab0:	7b 2b       	or	r23, r27
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    dab2:	81 e3       	ldi	r24, 0x31	; 49
    dab4:	fb db       	rcall	.-2058   	; 0xd2ac <send_cmd>
    dab6:	81 11       	cpse	r24, r1
    dab8:	17 c0       	rjmp	.+46     	; 0xdae8 <mmc_disk_ioctl+0x46e>
    daba:	8f ef       	ldi	r24, 0xFF	; 255
    dabc:	98 db       	rcall	.-2256   	; 0xd1ee <xchg_spi>
                xchg_spi(sdi->ndata);
    dabe:	8e ef       	ldi	r24, 0xFE	; 254
    dac0:	96 db       	rcall	.-2260   	; 0xd1ee <xchg_spi>
    dac2:	f8 01       	movw	r30, r16
    dac4:	81 81       	ldd	r24, Z+1	; 0x01
    dac6:	93 db       	rcall	.-2266   	; 0xd1ee <xchg_spi>
    dac8:	01 e0       	ldi	r16, 0x01	; 1
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
    daca:	12 e0       	ldi	r17, 0x02	; 2
    dacc:	8f ef       	ldi	r24, 0xFF	; 255
    dace:	8f db       	rcall	.-2274   	; 0xd1ee <xchg_spi>
    dad0:	01 50       	subi	r16, 0x01	; 1
    dad2:	11 09       	sbc	r17, r1
    dad4:	d9 f7       	brne	.-10     	; 0xdacc <mmc_disk_ioctl+0x452>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dad6:	8f ef       	ldi	r24, 0xFF	; 255
    dad8:	84 d0       	rcall	.+264    	; 0xdbe2 <mmc_spi_TXRX>
    dada:	8f 71       	andi	r24, 0x1F	; 31
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    dadc:	01 e0       	ldi	r16, 0x01	; 1
    dade:	10 e0       	ldi	r17, 0x00	; 0
    dae0:	85 30       	cpi	r24, 0x05	; 5
    dae2:	21 f4       	brne	.+8      	; 0xdaec <mmc_disk_ioctl+0x472>
    dae4:	00 e0       	ldi	r16, 0x00	; 0
    dae6:	02 c0       	rjmp	.+4      	; 0xdaec <mmc_disk_ioctl+0x472>
    dae8:	01 e0       	ldi	r16, 0x01	; 1
    daea:	10 e0       	ldi	r17, 0x00	; 0
    daec:	82 db       	rcall	.-2300   	; 0xd1f2 <deselect>
                xchg_spi(0xFF); xchg_spi(0xFE);
                xchg_spi(sdi->ndata);
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
                if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
            }
            deselect();
    daee:	04 c0       	rjmp	.+8      	; 0xdaf8 <mmc_disk_ioctl+0x47e>
    daf0:	03 e0       	ldi	r16, 0x03	; 3
            break;
    daf2:	01 c0       	rjmp	.+2      	; 0xdaf6 <mmc_disk_ioctl+0x47c>
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
        return RES_NOTRDY;
    daf4:	04 e0       	ldi	r16, 0x04	; 4
    daf6:	10 e0       	ldi	r17, 0x00	; 0
            }
            deselect();
            break;
#endif
        default:
            res = RES_PARERR;
    daf8:	c8 01       	movw	r24, r16
    dafa:	60 96       	adiw	r28, 0x10	; 16
    }

    return res;
}
    dafc:	e8 e0       	ldi	r30, 0x08	; 8
    dafe:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

0000db02 <mmc_disk_timerproc>:
    db02:	cf 93       	push	r28
    db04:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <Timer1>
{
    BYTE n;
    BYTE s;

    n = Timer1;                                   /* 100Hz decrement timer */
    if (n) Timer1 = --n;
    db08:	88 23       	and	r24, r24
    db0a:	19 f0       	breq	.+6      	; 0xdb12 <mmc_disk_timerproc+0x10>
    db0c:	81 50       	subi	r24, 0x01	; 1
    db0e:	80 93 23 18 	sts	0x1823, r24	; 0x801823 <Timer1>
    n = Timer2;
    db12:	80 91 22 18 	lds	r24, 0x1822	; 0x801822 <Timer2>
    if (n) Timer2 = --n;
    db16:	88 23       	and	r24, r24
    db18:	19 f0       	breq	.+6      	; 0xdb20 <mmc_disk_timerproc+0x1e>
    db1a:	81 50       	subi	r24, 0x01	; 1
    db1c:	80 93 22 18 	sts	0x1822, r24	; 0x801822 <Timer2>

    s = Stat;
    db20:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
        s |= STA_PROTECT;
    else                                          /* Write enabled */
        s &= ~STA_PROTECT;
#endif

    if (MMC_CD)                                   /* Card inserted */
    db24:	8e d0       	rcall	.+284    	; 0xdc42 <mmc_ins_status>
    db26:	89 2b       	or	r24, r25
    db28:	11 f0       	breq	.+4      	; 0xdb2e <mmc_disk_timerproc+0x2c>
	{
        s &= ~STA_NODISK;
    db2a:	cd 7f       	andi	r28, 0xFD	; 253
    db2c:	04 c0       	rjmp	.+8      	; 0xdb36 <mmc_disk_timerproc+0x34>
	}
    else                                          /* Socket empty */
	{	
        s |= (STA_NODISK | STA_NOINIT);
    db2e:	c3 60       	ori	r28, 0x03	; 3
		set_error(1);
    db30:	81 e0       	ldi	r24, 0x01	; 1
    db32:	0e 94 fd 24 	call	0x49fa	; 0x49fa <set_error>
	}

    Stat = s;                                     /* Update MMC status */
    db36:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
}
    db3a:	cf 91       	pop	r28
    db3c:	08 95       	ret

0000db3e <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    db3e:	00 d0       	rcall	.+0      	; 0xdb40 <mmc_install_timer+0x2>
    db40:	1f 92       	push	r1
    db42:	10 92 2d 18 	sts	0x182D, r1	; 0x80182d <_mmc_timeout+0x1>
    db46:	10 92 2c 18 	sts	0x182C, r1	; 0x80182c <_mmc_timeout>
    db4a:	61 e0       	ldi	r22, 0x01	; 1
    db4c:	70 e0       	ldi	r23, 0x00	; 0
    db4e:	8e e2       	ldi	r24, 0x2E	; 46
    db50:	9e e6       	ldi	r25, 0x6E	; 110
    db52:	0e 94 b1 32 	call	0x6562	; 0x6562 <set_timers>
    db56:	01 96       	adiw	r24, 0x01	; 1
    db58:	51 f4       	brne	.+20     	; 0xdb6e <mmc_install_timer+0x30>
    db5a:	87 e2       	ldi	r24, 0x27	; 39
    db5c:	98 e0       	ldi	r25, 0x08	; 8
    db5e:	a0 e0       	ldi	r26, 0x00	; 0
    db60:	ed b7       	in	r30, 0x3d	; 61
    db62:	fe b7       	in	r31, 0x3e	; 62
    db64:	81 83       	std	Z+1, r24	; 0x01
    db66:	92 83       	std	Z+2, r25	; 0x02
    db68:	a3 83       	std	Z+3, r26	; 0x03
    db6a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    db6e:	0f 90       	pop	r0
    db70:	0f 90       	pop	r0
    db72:	0f 90       	pop	r0
    db74:	08 95       	ret

0000db76 <mmc_spi_begin>:
    db76:	60 91 28 18 	lds	r22, 0x1828	; 0x801828 <_mmc_clock>
    db7a:	70 91 29 18 	lds	r23, 0x1829	; 0x801829 <_mmc_clock+0x1>
    db7e:	80 91 2a 18 	lds	r24, 0x182A	; 0x80182a <_mmc_clock+0x2>
    db82:	90 91 2b 18 	lds	r25, 0x182B	; 0x80182b <_mmc_clock+0x3>
    db86:	4b e0       	ldi	r20, 0x0B	; 11
    db88:	50 e0       	ldi	r21, 0x00	; 0
    db8a:	0c 94 a4 24 	jmp	0x4948	; 0x4948 <spi_begin>
    db8e:	08 95       	ret

0000db90 <mmc_spi_end>:
    db90:	8b e0       	ldi	r24, 0x0B	; 11
    db92:	0c 94 40 24 	jmp	0x4880	; 0x4880 <spi_end>
    db96:	08 95       	ret

0000db98 <mmc_slow>:
    db98:	80 e2       	ldi	r24, 0x20	; 32
    db9a:	91 ea       	ldi	r25, 0xA1	; 161
    db9c:	a7 e0       	ldi	r26, 0x07	; 7
    db9e:	b0 e0       	ldi	r27, 0x00	; 0
    dba0:	80 93 28 18 	sts	0x1828, r24	; 0x801828 <_mmc_clock>
    dba4:	90 93 29 18 	sts	0x1829, r25	; 0x801829 <_mmc_clock+0x1>
    dba8:	a0 93 2a 18 	sts	0x182A, r26	; 0x80182a <_mmc_clock+0x2>
    dbac:	b0 93 2b 18 	sts	0x182B, r27	; 0x80182b <_mmc_clock+0x3>
    dbb0:	08 95       	ret

0000dbb2 <mmc_spi_init>:
    dbb2:	8b e0       	ldi	r24, 0x0B	; 11
    dbb4:	0e 94 3e 24 	call	0x487c	; 0x487c <chip_select_init>
    dbb8:	ef cf       	rjmp	.-34     	; 0xdb98 <mmc_slow>
    dbba:	08 95       	ret

0000dbbc <mmc_fast>:
    dbbc:	80 ea       	ldi	r24, 0xA0	; 160
    dbbe:	95 e2       	ldi	r25, 0x25	; 37
    dbc0:	a6 e2       	ldi	r26, 0x26	; 38
    dbc2:	b0 e0       	ldi	r27, 0x00	; 0
    dbc4:	80 93 28 18 	sts	0x1828, r24	; 0x801828 <_mmc_clock>
    dbc8:	90 93 29 18 	sts	0x1829, r25	; 0x801829 <_mmc_clock+0x1>
    dbcc:	a0 93 2a 18 	sts	0x182A, r26	; 0x80182a <_mmc_clock+0x2>
    dbd0:	b0 93 2b 18 	sts	0x182B, r27	; 0x80182b <_mmc_clock+0x3>
    dbd4:	08 95       	ret

0000dbd6 <mmc_spi_TX_buffer>:
    dbd6:	0c 94 70 24 	jmp	0x48e0	; 0x48e0 <spi_TX_buffer>
    dbda:	08 95       	ret

0000dbdc <mmc_spi_RX_buffer>:
    dbdc:	0c 94 72 24 	jmp	0x48e4	; 0x48e4 <spi_RX_buffer>
    dbe0:	08 95       	ret

0000dbe2 <mmc_spi_TXRX>:
    dbe2:	0c 94 ec 24 	jmp	0x49d8	; 0x49d8 <spi_TXRX>
    dbe6:	08 95       	ret

0000dbe8 <mmc_set_ms_timeout>:
    dbe8:	f8 94       	cli
    dbea:	90 93 2d 18 	sts	0x182D, r25	; 0x80182d <_mmc_timeout+0x1>
    dbee:	80 93 2c 18 	sts	0x182C, r24	; 0x80182c <_mmc_timeout>
    dbf2:	78 94       	sei
    dbf4:	08 95       	ret

0000dbf6 <mmc_test_timeout>:
    dbf6:	00 d0       	rcall	.+0      	; 0xdbf8 <mmc_test_timeout+0x2>
    dbf8:	1f 92       	push	r1
    dbfa:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    dbfe:	81 fd       	sbrc	r24, 1
    dc00:	15 c0       	rjmp	.+42     	; 0xdc2c <mmc_test_timeout+0x36>
    dc02:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <_mmc_timeout>
    dc06:	90 91 2d 18 	lds	r25, 0x182D	; 0x80182d <_mmc_timeout+0x1>
    dc0a:	89 2b       	or	r24, r25
    dc0c:	91 f4       	brne	.+36     	; 0xdc32 <mmc_test_timeout+0x3c>
    dc0e:	8a e1       	ldi	r24, 0x1A	; 26
    dc10:	98 e0       	ldi	r25, 0x08	; 8
    dc12:	a0 e0       	ldi	r26, 0x00	; 0
    dc14:	ed b7       	in	r30, 0x3d	; 61
    dc16:	fe b7       	in	r31, 0x3e	; 62
    dc18:	81 83       	std	Z+1, r24	; 0x01
    dc1a:	92 83       	std	Z+2, r25	; 0x02
    dc1c:	a3 83       	std	Z+3, r26	; 0x03
    dc1e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    dc22:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    dc26:	83 60       	ori	r24, 0x03	; 3
    dc28:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    dc2c:	81 e0       	ldi	r24, 0x01	; 1
    dc2e:	90 e0       	ldi	r25, 0x00	; 0
    dc30:	02 c0       	rjmp	.+4      	; 0xdc36 <mmc_test_timeout+0x40>
    dc32:	80 e0       	ldi	r24, 0x00	; 0
    dc34:	90 e0       	ldi	r25, 0x00	; 0
    dc36:	0f 90       	pop	r0
    dc38:	0f 90       	pop	r0
    dc3a:	0f 90       	pop	r0
    dc3c:	08 95       	ret

0000dc3e <mmc_power_on>:
    dc3e:	08 95       	ret

0000dc40 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    dc40:	08 95       	ret

0000dc42 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    dc42:	3f 98       	cbi	0x07, 7	; 7
    dc44:	86 b1       	in	r24, 0x06	; 6
    dc46:	08 2e       	mov	r0, r24
    dc48:	00 0c       	add	r0, r0
    dc4a:	99 0b       	sbc	r25, r25
    dc4c:	80 95       	com	r24
    dc4e:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    dc50:	89 2f       	mov	r24, r25
    dc52:	88 1f       	adc	r24, r24
    dc54:	88 27       	eor	r24, r24
    dc56:	88 1f       	adc	r24, r24
    dc58:	90 e0       	ldi	r25, 0x00	; 0
    dc5a:	08 95       	ret

0000dc5c <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    dc5c:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <_mmc_timeout>
    dc60:	90 91 2d 18 	lds	r25, 0x182D	; 0x80182d <_mmc_timeout+0x1>
    dc64:	00 97       	sbiw	r24, 0x00	; 0
    dc66:	29 f0       	breq	.+10     	; 0xdc72 <mmc_task+0x16>
        _mmc_timeout--;
    dc68:	01 97       	sbiw	r24, 0x01	; 1
    dc6a:	90 93 2d 18 	sts	0x182D, r25	; 0x80182d <_mmc_timeout+0x1>
    dc6e:	80 93 2c 18 	sts	0x182C, r24	; 0x80182c <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    dc72:	80 91 26 18 	lds	r24, 0x1826	; 0x801826 <_mmc_pre>
    dc76:	90 91 27 18 	lds	r25, 0x1827	; 0x801827 <_mmc_pre+0x1>
    dc7a:	8a 30       	cpi	r24, 0x0A	; 10
    dc7c:	91 05       	cpc	r25, r1
    dc7e:	30 f4       	brcc	.+12     	; 0xdc8c <mmc_task+0x30>
    dc80:	01 96       	adiw	r24, 0x01	; 1
    dc82:	90 93 27 18 	sts	0x1827, r25	; 0x801827 <_mmc_pre+0x1>
    dc86:	80 93 26 18 	sts	0x1826, r24	; 0x801826 <_mmc_pre>
    dc8a:	08 95       	ret
        return;

    _mmc_pre = 0;
    dc8c:	10 92 27 18 	sts	0x1827, r1	; 0x801827 <_mmc_pre+0x1>
    dc90:	10 92 26 18 	sts	0x1826, r1	; 0x801826 <_mmc_pre>

	if(!mmc_ins_status())
    dc94:	d6 df       	rcall	.-84     	; 0xdc42 <mmc_ins_status>
    dc96:	89 2b       	or	r24, r25
    dc98:	19 f4       	brne	.+6      	; 0xdca0 <mmc_task+0x44>
		set_error(1);
    dc9a:	81 e0       	ldi	r24, 0x01	; 1
    dc9c:	0e 94 fd 24 	call	0x49fa	; 0x49fa <set_error>

    mmc_disk_timerproc();
    dca0:	30 cf       	rjmp	.-416    	; 0xdb02 <mmc_disk_timerproc>
    dca2:	08 95       	ret

0000dca4 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    dca4:	ab e0       	ldi	r26, 0x0B	; 11
    dca6:	b0 e0       	ldi	r27, 0x00	; 0
    dca8:	e8 e5       	ldi	r30, 0x58	; 88
    dcaa:	fe e6       	ldi	r31, 0x6E	; 110
    dcac:	0c 94 4a e3 	jmp	0x1c694	; 0x1c694 <__prologue_saves__+0x18>
    dcb0:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    dcb2:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    dcb6:	0e 94 02 25 	call	0x4a04	; 0x4a04 <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    dcba:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);
    dcbc:	3f 98       	cbi	0x07, 7	; 7

    mmc_spi_init();
    dcbe:	79 df       	rcall	.-270    	; 0xdbb2 <mmc_spi_init>

    if( verbose)
    dcc0:	e1 14       	cp	r14, r1
    dcc2:	f1 04       	cpc	r15, r1
    dcc4:	51 f0       	breq	.+20     	; 0xdcda <mmc_init+0x36>
    {
        printf("START MMC INIT\n");
    dcc6:	8a e0       	ldi	r24, 0x0A	; 10
    dcc8:	98 e0       	ldi	r25, 0x08	; 8
    dcca:	a0 e0       	ldi	r26, 0x00	; 0
    dccc:	ed b7       	in	r30, 0x3d	; 61
    dcce:	fe b7       	in	r31, 0x3e	; 62
    dcd0:	81 83       	std	Z+1, r24	; 0x01
    dcd2:	92 83       	std	Z+2, r25	; 0x02
    dcd4:	a3 83       	std	Z+3, r26	; 0x03
    dcd6:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    dcda:	80 91 24 18 	lds	r24, 0x1824	; 0x801824 <mmc_init_flag>
    dcde:	90 91 25 18 	lds	r25, 0x1825	; 0x801825 <mmc_init_flag+0x1>
    dce2:	89 2b       	or	r24, r25
        mmc_install_timer();
    dce4:	09 f4       	brne	.+2      	; 0xdce8 <mmc_init+0x44>

	if(!mmc_ins_status())
    dce6:	2b df       	rcall	.-426    	; 0xdb3e <mmc_install_timer>
    dce8:	ac df       	rcall	.-168    	; 0xdc42 <mmc_ins_status>
    dcea:	89 2b       	or	r24, r25
    dcec:	61 f4       	brne	.+24     	; 0xdd06 <mmc_init+0x62>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    dcee:	8a ee       	ldi	r24, 0xEA	; 234
    dcf0:	97 e0       	ldi	r25, 0x07	; 7
    dcf2:	a0 e0       	ldi	r26, 0x00	; 0
    dcf4:	ed b7       	in	r30, 0x3d	; 61
    dcf6:	fe b7       	in	r31, 0x3e	; 62
    dcf8:	81 83       	std	Z+1, r24	; 0x01
    dcfa:	92 83       	std	Z+2, r25	; 0x02
    dcfc:	a3 83       	std	Z+3, r26	; 0x03
    dcfe:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
		return(RES_NOTRDY);	
    dd02:	83 e0       	ldi	r24, 0x03	; 3
    dd04:	8b c0       	rjmp	.+278    	; 0xde1c <mmc_init+0x178>
	}


    if( verbose)
    dd06:	e1 14       	cp	r14, r1
    dd08:	f1 04       	cpc	r15, r1
    dd0a:	11 f1       	breq	.+68     	; 0xdd50 <mmc_init+0xac>
    {
		printf("MMC Card Inserted\n");
    dd0c:	87 ed       	ldi	r24, 0xD7	; 215
    dd0e:	97 e0       	ldi	r25, 0x07	; 7
    dd10:	a0 e0       	ldi	r26, 0x00	; 0
    dd12:	ed b7       	in	r30, 0x3d	; 61
    dd14:	fe b7       	in	r31, 0x3e	; 62
    dd16:	81 83       	std	Z+1, r24	; 0x01
    dd18:	92 83       	std	Z+2, r25	; 0x02
    dd1a:	a3 83       	std	Z+3, r26	; 0x03
    dd1c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    dd20:	8b ec       	ldi	r24, 0xCB	; 203
    dd22:	97 e0       	ldi	r25, 0x07	; 7
    dd24:	a0 e0       	ldi	r26, 0x00	; 0
    dd26:	ed b7       	in	r30, 0x3d	; 61
    dd28:	fe b7       	in	r31, 0x3e	; 62
    dd2a:	81 83       	std	Z+1, r24	; 0x01
    dd2c:	92 83       	std	Z+2, r25	; 0x02
    dd2e:	a3 83       	std	Z+3, r26	; 0x03
    dd30:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    dd34:	85 eb       	ldi	r24, 0xB5	; 181
    dd36:	91 e0       	ldi	r25, 0x01	; 1
    dd38:	ed b7       	in	r30, 0x3d	; 61
    dd3a:	fe b7       	in	r31, 0x3e	; 62
    dd3c:	95 83       	std	Z+5, r25	; 0x05
    dd3e:	84 83       	std	Z+4, r24	; 0x04
    dd40:	8a eb       	ldi	r24, 0xBA	; 186
    dd42:	97 e0       	ldi	r25, 0x07	; 7
    dd44:	a0 e0       	ldi	r26, 0x00	; 0
    dd46:	81 83       	std	Z+1, r24	; 0x01
    dd48:	92 83       	std	Z+2, r25	; 0x02
    dd4a:	a3 83       	std	Z+3, r26	; 0x03
    dd4c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    dd50:	80 e0       	ldi	r24, 0x00	; 0
    dd52:	1d da       	rcall	.-3014   	; 0xd18e <disk_initialize>
    dd54:	08 2f       	mov	r16, r24
    dd56:	10 e0       	ldi	r17, 0x00	; 0

    if( rc != RES_OK  )
    dd58:	01 15       	cp	r16, r1
    dd5a:	11 05       	cpc	r17, r1
        put_rc(rc);
    dd5c:	19 f0       	breq	.+6      	; 0xdd64 <mmc_init+0xc0>
    dd5e:	c8 01       	movw	r24, r16
    dd60:	e4 d0       	rcall	.+456    	; 0xdf2a <put_rc>
    dd62:	0e c0       	rjmp	.+28     	; 0xdd80 <mmc_init+0xdc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    dd64:	40 e0       	ldi	r20, 0x00	; 0
    dd66:	66 ea       	ldi	r22, 0xA6	; 166
    dd68:	78 e0       	ldi	r23, 0x08	; 8
    dd6a:	8d e7       	ldi	r24, 0x7D	; 125
    dd6c:	9a e1       	ldi	r25, 0x1A	; 26
    dd6e:	0e 94 7f 58 	call	0xb0fe	; 0xb0fe <f_mount>
    dd72:	8c 01       	movw	r16, r24

    if( rc != RES_OK || verbose)
    dd74:	89 2b       	or	r24, r25
    dd76:	21 f4       	brne	.+8      	; 0xdd80 <mmc_init+0xdc>
    dd78:	e1 14       	cp	r14, r1
    dd7a:	f1 04       	cpc	r15, r1
    dd7c:	09 f4       	brne	.+2      	; 0xdd80 <mmc_init+0xdc>
        put_rc( rc );
    dd7e:	40 c0       	rjmp	.+128    	; 0xde00 <mmc_init+0x15c>
    dd80:	c8 01       	movw	r24, r16
    dd82:	d3 d0       	rcall	.+422    	; 0xdf2a <put_rc>

    if (verbose )
    dd84:	e1 14       	cp	r14, r1
    dd86:	f1 04       	cpc	r15, r1
    dd88:	d9 f1       	breq	.+118    	; 0xde00 <mmc_init+0x15c>
    {
        DWORD blksize = 0;
    dd8a:	18 86       	std	Y+8, r1	; 0x08
    dd8c:	19 86       	std	Y+9, r1	; 0x09
    dd8e:	1a 86       	std	Y+10, r1	; 0x0a
    dd90:	1b 86       	std	Y+11, r1	; 0x0b
        if(rc == RES_OK)
    dd92:	01 15       	cp	r16, r1
    dd94:	11 05       	cpc	r17, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    dd96:	51 f5       	brne	.+84     	; 0xddec <mmc_init+0x148>
    dd98:	ae 01       	movw	r20, r28
    dd9a:	48 5f       	subi	r20, 0xF8	; 248
    dd9c:	5f 4f       	sbci	r21, 0xFF	; 255
    dd9e:	63 e0       	ldi	r22, 0x03	; 3
    dda0:	80 e0       	ldi	r24, 0x00	; 0
    dda2:	1b da       	rcall	.-3018   	; 0xd1da <disk_ioctl>
            if( rc != RES_OK)
    dda4:	8c 01       	movw	r16, r24
    dda6:	00 97       	sbiw	r24, 0x00	; 0
            {
                put_rc( rc );
    dda8:	61 f0       	breq	.+24     	; 0xddc2 <mmc_init+0x11e>
    ddaa:	bf d0       	rcall	.+382    	; 0xdf2a <put_rc>
                printf("MMC Block Size - read failed\n");
    ddac:	8c e9       	ldi	r24, 0x9C	; 156
    ddae:	97 e0       	ldi	r25, 0x07	; 7
    ddb0:	a0 e0       	ldi	r26, 0x00	; 0
    ddb2:	ed b7       	in	r30, 0x3d	; 61
    ddb4:	fe b7       	in	r31, 0x3e	; 62
    ddb6:	81 83       	std	Z+1, r24	; 0x01
    ddb8:	92 83       	std	Z+2, r25	; 0x02
    ddba:	a3 83       	std	Z+3, r26	; 0x03
    ddbc:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    ddc0:	15 c0       	rjmp	.+42     	; 0xddec <mmc_init+0x148>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    ddc2:	88 85       	ldd	r24, Y+8	; 0x08
    ddc4:	99 85       	ldd	r25, Y+9	; 0x09
    ddc6:	aa 85       	ldd	r26, Y+10	; 0x0a
    ddc8:	bb 85       	ldd	r27, Y+11	; 0x0b
    ddca:	ed b7       	in	r30, 0x3d	; 61
    ddcc:	fe b7       	in	r31, 0x3e	; 62
    ddce:	84 83       	std	Z+4, r24	; 0x04
    ddd0:	95 83       	std	Z+5, r25	; 0x05
    ddd2:	a6 83       	std	Z+6, r26	; 0x06
    ddd4:	b7 83       	std	Z+7, r27	; 0x07
    ddd6:	87 e8       	ldi	r24, 0x87	; 135
    ddd8:	97 e0       	ldi	r25, 0x07	; 7
    ddda:	a0 e0       	ldi	r26, 0x00	; 0
    dddc:	81 83       	std	Z+1, r24	; 0x01
    ddde:	92 83       	std	Z+2, r25	; 0x02
    dde0:	a3 83       	std	Z+3, r26	; 0x03
    dde2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    dde6:	86 ea       	ldi	r24, 0xA6	; 166
    dde8:	98 e0       	ldi	r25, 0x08	; 8
    ddea:	33 d1       	rcall	.+614    	; 0xe052 <fatfs_status>
            }
        }
        printf("END MMC INIT\n");
    ddec:	89 e7       	ldi	r24, 0x79	; 121
    ddee:	97 e0       	ldi	r25, 0x07	; 7
    ddf0:	a0 e0       	ldi	r26, 0x00	; 0
    ddf2:	ed b7       	in	r30, 0x3d	; 61
    ddf4:	fe b7       	in	r31, 0x3e	; 62
    ddf6:	81 83       	std	Z+1, r24	; 0x01
    ddf8:	92 83       	std	Z+2, r25	; 0x02
    ddfa:	a3 83       	std	Z+3, r26	; 0x03
    ddfc:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    }
    mmc_init_flag = 1;
    de00:	81 e0       	ldi	r24, 0x01	; 1
    de02:	90 e0       	ldi	r25, 0x00	; 0
    de04:	90 93 25 18 	sts	0x1825, r25	; 0x801825 <mmc_init_flag+0x1>
    de08:	80 93 24 18 	sts	0x1824, r24	; 0x801824 <mmc_init_flag>

	if(rc != RES_OK)
    de0c:	01 15       	cp	r16, r1
    de0e:	11 05       	cpc	r17, r1
    de10:	21 f0       	breq	.+8      	; 0xde1a <mmc_init+0x176>
		set_error(1);
    de12:	0e 94 fd 24 	call	0x49fa	; 0x49fa <set_error>
    de16:	c8 01       	movw	r24, r16
    de18:	02 c0       	rjmp	.+4      	; 0xde1e <mmc_init+0x17a>
    de1a:	80 e0       	ldi	r24, 0x00	; 0
    de1c:	90 e0       	ldi	r25, 0x00	; 0

    return( rc ) ;
}
    de1e:	2b 96       	adiw	r28, 0x0b	; 11
    de20:	e6 e0       	ldi	r30, 0x06	; 6
    de22:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

0000de26 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    de26:	80 e0       	ldi	r24, 0x00	; 0
    de28:	90 e0       	ldi	r25, 0x00	; 0
    de2a:	08 95       	ret

0000de2c <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    de2c:	0f 93       	push	r16
    de2e:	1f 93       	push	r17
    de30:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    de32:	46 81       	ldd	r20, Z+6	; 0x06
    de34:	57 81       	ldd	r21, Z+7	; 0x07
    de36:	05 2e       	mov	r0, r21
    de38:	00 0c       	add	r0, r0
    de3a:	66 0b       	sbc	r22, r22
    de3c:	77 0b       	sbc	r23, r23
    de3e:	ba 01       	movw	r22, r20
    de40:	55 27       	eor	r21, r21
    de42:	44 27       	eor	r20, r20
    de44:	84 81       	ldd	r24, Z+4	; 0x04
    de46:	95 81       	ldd	r25, Z+5	; 0x05
    de48:	09 2e       	mov	r0, r25
    de4a:	00 0c       	add	r0, r0
    de4c:	aa 0b       	sbc	r26, r26
    de4e:	bb 0b       	sbc	r27, r27
    de50:	2b e0       	ldi	r18, 0x0B	; 11
    de52:	88 0f       	add	r24, r24
    de54:	99 1f       	adc	r25, r25
    de56:	aa 1f       	adc	r26, r26
    de58:	bb 1f       	adc	r27, r27
    de5a:	2a 95       	dec	r18
    de5c:	d1 f7       	brne	.-12     	; 0xde52 <tm_to_fat+0x26>
    de5e:	48 2b       	or	r20, r24
    de60:	59 2b       	or	r21, r25
    de62:	6a 2b       	or	r22, r26
    de64:	7b 2b       	or	r23, r27
    de66:	82 81       	ldd	r24, Z+2	; 0x02
    de68:	93 81       	ldd	r25, Z+3	; 0x03
    de6a:	09 2e       	mov	r0, r25
    de6c:	00 0c       	add	r0, r0
    de6e:	aa 0b       	sbc	r26, r26
    de70:	bb 0b       	sbc	r27, r27
    de72:	35 e0       	ldi	r19, 0x05	; 5
    de74:	88 0f       	add	r24, r24
    de76:	99 1f       	adc	r25, r25
    de78:	aa 1f       	adc	r26, r26
    de7a:	bb 1f       	adc	r27, r27
    de7c:	3a 95       	dec	r19
    de7e:	d1 f7       	brne	.-12     	; 0xde74 <tm_to_fat+0x48>
    de80:	48 2b       	or	r20, r24
    de82:	59 2b       	or	r21, r25
    de84:	6a 2b       	or	r22, r26
    de86:	7b 2b       	or	r23, r27
    de88:	80 81       	ld	r24, Z
    de8a:	91 81       	ldd	r25, Z+1	; 0x01
    de8c:	09 2e       	mov	r0, r25
    de8e:	00 0c       	add	r0, r0
    de90:	aa 0b       	sbc	r26, r26
    de92:	bb 0b       	sbc	r27, r27
    de94:	b6 95       	lsr	r27
    de96:	a7 95       	ror	r26
    de98:	97 95       	ror	r25
    de9a:	87 95       	ror	r24
    de9c:	84 2b       	or	r24, r20
    de9e:	95 2b       	or	r25, r21
    dea0:	a6 2b       	or	r26, r22
    dea2:	b7 2b       	or	r27, r23
    dea4:	02 85       	ldd	r16, Z+10	; 0x0a
    dea6:	13 85       	ldd	r17, Z+11	; 0x0b
    dea8:	00 55       	subi	r16, 0x50	; 80
    deaa:	11 09       	sbc	r17, r1
    deac:	01 2e       	mov	r0, r17
    deae:	00 0c       	add	r0, r0
    deb0:	22 0b       	sbc	r18, r18
    deb2:	33 0b       	sbc	r19, r19
    deb4:	49 e1       	ldi	r20, 0x19	; 25
    deb6:	00 0f       	add	r16, r16
    deb8:	11 1f       	adc	r17, r17
    deba:	22 1f       	adc	r18, r18
    debc:	33 1f       	adc	r19, r19
    debe:	4a 95       	dec	r20
    dec0:	d1 f7       	brne	.-12     	; 0xdeb6 <tm_to_fat+0x8a>
    dec2:	ac 01       	movw	r20, r24
    dec4:	bd 01       	movw	r22, r26
    dec6:	40 2b       	or	r20, r16
    dec8:	51 2b       	or	r21, r17
    deca:	62 2b       	or	r22, r18
    decc:	73 2b       	or	r23, r19
    dece:	80 85       	ldd	r24, Z+8	; 0x08
    ded0:	91 85       	ldd	r25, Z+9	; 0x09
    ded2:	09 2e       	mov	r0, r25
    ded4:	00 0c       	add	r0, r0
    ded6:	aa 0b       	sbc	r26, r26
    ded8:	bb 0b       	sbc	r27, r27
    deda:	01 96       	adiw	r24, 0x01	; 1
    dedc:	a1 1d       	adc	r26, r1
    dede:	b1 1d       	adc	r27, r1
    dee0:	e5 e1       	ldi	r30, 0x15	; 21
    dee2:	88 0f       	add	r24, r24
    dee4:	99 1f       	adc	r25, r25
    dee6:	aa 1f       	adc	r26, r26
    dee8:	bb 1f       	adc	r27, r27
    deea:	ea 95       	dec	r30
    deec:	d1 f7       	brne	.-12     	; 0xdee2 <tm_to_fat+0xb6>
    deee:	8a 01       	movw	r16, r20
    def0:	9b 01       	movw	r18, r22
    def2:	08 2b       	or	r16, r24
    def4:	19 2b       	or	r17, r25
    def6:	2a 2b       	or	r18, r26
    def8:	3b 2b       	or	r19, r27
    defa:	c9 01       	movw	r24, r18
    defc:	b8 01       	movw	r22, r16
}
    defe:	1f 91       	pop	r17
    df00:	0f 91       	pop	r16
    df02:	08 95       	ret

0000df04 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    df04:	a4 e0       	ldi	r26, 0x04	; 4
    df06:	b0 e0       	ldi	r27, 0x00	; 0
    df08:	e8 e8       	ldi	r30, 0x88	; 136
    df0a:	ff e6       	ldi	r31, 0x6F	; 111
    df0c:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    df10:	ce 01       	movw	r24, r28
    df12:	01 96       	adiw	r24, 0x01	; 1
    df14:	0e 94 05 36 	call	0x6c0a	; 0x6c0a <time>
    return( tm_to_fat(localtime(&t)));
    df18:	ce 01       	movw	r24, r28
    df1a:	01 96       	adiw	r24, 0x01	; 1
    df1c:	0e 94 9e 36 	call	0x6d3c	; 0x6d3c <localtime>
    df20:	85 df       	rcall	.-246    	; 0xde2c <tm_to_fat>
}
    df22:	24 96       	adiw	r28, 0x04	; 4
    df24:	e2 e0       	ldi	r30, 0x02	; 2
    df26:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

0000df2a <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    df2a:	00 d0       	rcall	.+0      	; 0xdf2c <put_rc+0x2>
    df2c:	00 d0       	rcall	.+0      	; 0xdf2e <put_rc+0x4>
    df2e:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    df30:	ed b7       	in	r30, 0x3d	; 61
    df32:	fe b7       	in	r31, 0x3e	; 62
    df34:	95 83       	std	Z+5, r25	; 0x05
    df36:	84 83       	std	Z+4, r24	; 0x04
    df38:	87 e3       	ldi	r24, 0x37	; 55
    df3a:	9a e0       	ldi	r25, 0x0A	; 10
    df3c:	a0 e0       	ldi	r26, 0x00	; 0
    df3e:	81 83       	std	Z+1, r24	; 0x01
    df40:	92 83       	std	Z+2, r25	; 0x02
    df42:	a3 83       	std	Z+3, r26	; 0x03
    df44:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
}
    df48:	0f 90       	pop	r0
    df4a:	0f 90       	pop	r0
    df4c:	0f 90       	pop	r0
    df4e:	0f 90       	pop	r0
    df50:	0f 90       	pop	r0
    df52:	08 95       	ret

0000df54 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    df54:	a4 e4       	ldi	r26, 0x44	; 68
    df56:	b1 e0       	ldi	r27, 0x01	; 1
    df58:	e0 eb       	ldi	r30, 0xB0	; 176
    df5a:	ff e6       	ldi	r31, 0x6F	; 111
    df5c:	0c 94 49 e3 	jmp	0x1c692	; 0x1c692 <__prologue_saves__+0x16>
    df60:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    df62:	bc 01       	movw	r22, r24
    df64:	ce 01       	movw	r24, r28
    df66:	89 5e       	subi	r24, 0xE9	; 233
    df68:	9e 4f       	sbci	r25, 0xFE	; 254
    df6a:	0e 94 3b 62 	call	0xc476	; 0xc476 <f_opendir>
    if (fr == FR_OK)
    df6e:	00 97       	sbiw	r24, 0x00	; 0
    df70:	09 f0       	breq	.+2      	; 0xdf74 <fatfs_scan_files+0x20>
    df72:	5b c0       	rjmp	.+182    	; 0xe02a <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    df74:	8f e2       	ldi	r24, 0x2F	; 47
    df76:	d8 2e       	mov	r13, r24
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    df78:	be 01       	movw	r22, r28
    df7a:	6f 5f       	subi	r22, 0xFF	; 255
    df7c:	7f 4f       	sbci	r23, 0xFF	; 255
    df7e:	ce 01       	movw	r24, r28
    df80:	89 5e       	subi	r24, 0xE9	; 233
    df82:	9e 4f       	sbci	r25, 0xFE	; 254
    df84:	0e 94 c1 62 	call	0xc582	; 0xc582 <f_readdir>
    df88:	00 97       	sbiw	r24, 0x00	; 0
    df8a:	09 f0       	breq	.+2      	; 0xdf8e <fatfs_scan_files+0x3a>
    df8c:	4e c0       	rjmp	.+156    	; 0xe02a <fatfs_scan_files+0xd6>
    df8e:	2f 89       	ldd	r18, Y+23	; 0x17
    df90:	22 23       	and	r18, r18
    df92:	09 f4       	brne	.+2      	; 0xdf96 <fatfs_scan_files+0x42>
    df94:	4a c0       	rjmp	.+148    	; 0xe02a <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    df96:	89 85       	ldd	r24, Y+9	; 0x09
    df98:	84 ff       	sbrs	r24, 4
    df9a:	25 c0       	rjmp	.+74     	; 0xdfe6 <fatfs_scan_files+0x92>
            {
                AccDirs++;
    df9c:	80 91 b6 1c 	lds	r24, 0x1CB6	; 0x801cb6 <AccDirs>
    dfa0:	90 91 b7 1c 	lds	r25, 0x1CB7	; 0x801cb7 <AccDirs+0x1>
    dfa4:	01 96       	adiw	r24, 0x01	; 1
    dfa6:	90 93 b7 1c 	sts	0x1CB7, r25	; 0x801cb7 <AccDirs+0x1>
    dfaa:	80 93 b6 1c 	sts	0x1CB6, r24	; 0x801cb6 <AccDirs>
                i = strlen(path);
    dfae:	f8 01       	movw	r30, r16
    dfb0:	01 90       	ld	r0, Z+
    dfb2:	00 20       	and	r0, r0
    dfb4:	e9 f7       	brne	.-6      	; 0xdfb0 <fatfs_scan_files+0x5c>
    dfb6:	31 97       	sbiw	r30, 0x01	; 1
    dfb8:	e0 1b       	sub	r30, r16
    dfba:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    dfbc:	78 01       	movw	r14, r16
    dfbe:	ee 0e       	add	r14, r30
    dfc0:	ff 1e       	adc	r15, r31
    dfc2:	d7 01       	movw	r26, r14
    dfc4:	dc 92       	st	X, r13
    dfc6:	cf 01       	movw	r24, r30
    dfc8:	01 96       	adiw	r24, 0x01	; 1
    dfca:	be 01       	movw	r22, r28
    dfcc:	69 5e       	subi	r22, 0xE9	; 233
    dfce:	7f 4f       	sbci	r23, 0xFF	; 255
    dfd0:	80 0f       	add	r24, r16
    dfd2:	91 1f       	adc	r25, r17
    dfd4:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <strcpy>
                fr = fatfs_scan_files(path);
    dfd8:	c8 01       	movw	r24, r16
    dfda:	bc df       	rcall	.-136    	; 0xdf54 <fatfs_scan_files>
                path[i] = 0;
    dfdc:	f7 01       	movw	r30, r14
    dfde:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    dfe0:	00 97       	sbiw	r24, 0x00	; 0
    dfe2:	51 f2       	breq	.-108    	; 0xdf78 <fatfs_scan_files+0x24>
    dfe4:	22 c0       	rjmp	.+68     	; 0xe02a <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    dfe6:	80 91 b8 1c 	lds	r24, 0x1CB8	; 0x801cb8 <AccFiles>
    dfea:	90 91 b9 1c 	lds	r25, 0x1CB9	; 0x801cb9 <AccFiles+0x1>
    dfee:	01 96       	adiw	r24, 0x01	; 1
    dff0:	90 93 b9 1c 	sts	0x1CB9, r25	; 0x801cb9 <AccFiles+0x1>
    dff4:	80 93 b8 1c 	sts	0x1CB8, r24	; 0x801cb8 <AccFiles>
                AccSize += info.fsize;
    dff8:	40 91 b2 1c 	lds	r20, 0x1CB2	; 0x801cb2 <AccSize>
    dffc:	50 91 b3 1c 	lds	r21, 0x1CB3	; 0x801cb3 <AccSize+0x1>
    e000:	60 91 b4 1c 	lds	r22, 0x1CB4	; 0x801cb4 <AccSize+0x2>
    e004:	70 91 b5 1c 	lds	r23, 0x1CB5	; 0x801cb5 <AccSize+0x3>
    e008:	89 81       	ldd	r24, Y+1	; 0x01
    e00a:	9a 81       	ldd	r25, Y+2	; 0x02
    e00c:	ab 81       	ldd	r26, Y+3	; 0x03
    e00e:	bc 81       	ldd	r27, Y+4	; 0x04
    e010:	84 0f       	add	r24, r20
    e012:	95 1f       	adc	r25, r21
    e014:	a6 1f       	adc	r26, r22
    e016:	b7 1f       	adc	r27, r23
    e018:	80 93 b2 1c 	sts	0x1CB2, r24	; 0x801cb2 <AccSize>
    e01c:	90 93 b3 1c 	sts	0x1CB3, r25	; 0x801cb3 <AccSize+0x1>
    e020:	a0 93 b4 1c 	sts	0x1CB4, r26	; 0x801cb4 <AccSize+0x2>
    e024:	b0 93 b5 1c 	sts	0x1CB5, r27	; 0x801cb5 <AccSize+0x3>
    e028:	a7 cf       	rjmp	.-178    	; 0xdf78 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e02a:	cc 5b       	subi	r28, 0xBC	; 188
    e02c:	de 4f       	sbci	r29, 0xFE	; 254
    e02e:	e7 e0       	ldi	r30, 0x07	; 7
    e030:	0c 94 65 e3 	jmp	0x1c6ca	; 0x1c6ca <__epilogue_restores__+0x16>

0000e034 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e034:	01 97       	sbiw	r24, 0x01	; 1
    e036:	84 30       	cpi	r24, 0x04	; 4
    e038:	91 05       	cpc	r25, r1
    e03a:	40 f4       	brcc	.+16     	; 0xe04c <fatfs_fstype+0x18>
    e03c:	88 0f       	add	r24, r24
    e03e:	99 1f       	adc	r25, r25
    e040:	fc 01       	movw	r30, r24
    e042:	e6 53       	subi	r30, 0x36	; 54
    e044:	f7 4f       	sbci	r31, 0xF7	; 247
    e046:	80 81       	ld	r24, Z
    e048:	91 81       	ldd	r25, Z+1	; 0x01
    e04a:	08 95       	ret
    char *ptr;
    switch(type)
    e04c:	88 ea       	ldi	r24, 0xA8	; 168
    e04e:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e050:	08 95       	ret

0000e052 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    e052:	a7 e3       	ldi	r26, 0x37	; 55
    e054:	b0 e0       	ldi	r27, 0x00	; 0
    e056:	ef e2       	ldi	r30, 0x2F	; 47
    e058:	f0 e7       	ldi	r31, 0x70	; 112
    e05a:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
    e05e:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e060:	fc 01       	movw	r30, r24
    e062:	21 91       	ld	r18, Z+
    e064:	cf 01       	movw	r24, r30
    e066:	20 32       	cpi	r18, 0x20	; 32
    e068:	d1 f3       	breq	.-12     	; 0xe05e <fatfs_status+0xc>
    e06a:	29 30       	cpi	r18, 0x09	; 9
    e06c:	c1 f3       	breq	.-16     	; 0xe05e <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    e06e:	ed b7       	in	r30, 0x3d	; 61
    e070:	fe b7       	in	r31, 0x3e	; 62
    e072:	e4 82       	std	Z+4, r14	; 0x04
    e074:	f5 82       	std	Z+5, r15	; 0x05
    e076:	86 e2       	ldi	r24, 0x26	; 38
    e078:	9a e0       	ldi	r25, 0x0A	; 10
    e07a:	a0 e0       	ldi	r26, 0x00	; 0
    e07c:	81 83       	std	Z+1, r24	; 0x01
    e07e:	92 83       	std	Z+2, r25	; 0x02
    e080:	a3 83       	std	Z+3, r26	; 0x03
    e082:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e086:	ae 01       	movw	r20, r28
    e088:	4a 5c       	subi	r20, 0xCA	; 202
    e08a:	5f 4f       	sbci	r21, 0xFF	; 255
    e08c:	be 01       	movw	r22, r28
    e08e:	6e 5c       	subi	r22, 0xCE	; 206
    e090:	7f 4f       	sbci	r23, 0xFF	; 255
    e092:	c7 01       	movw	r24, r14
    e094:	0e 94 43 63 	call	0xc686	; 0xc686 <f_getfree>
    if (res)
    e098:	00 97       	sbiw	r24, 0x00	; 0
    e09a:	09 f0       	breq	.+2      	; 0xe09e <fatfs_status+0x4c>
    e09c:	f8 c0       	rjmp	.+496    	; 0xe28e <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e09e:	ee a9       	ldd	r30, Y+54	; 0x36
    e0a0:	ff a9       	ldd	r31, Y+55	; 0x37
    e0a2:	80 81       	ld	r24, Z
    e0a4:	90 e0       	ldi	r25, 0x00	; 0
    e0a6:	c6 df       	rcall	.-116    	; 0xe034 <fatfs_fstype>
    e0a8:	ed b7       	in	r30, 0x3d	; 61
    e0aa:	fe b7       	in	r31, 0x3e	; 62
    e0ac:	95 83       	std	Z+5, r25	; 0x05
    e0ae:	84 83       	std	Z+4, r24	; 0x04
    e0b0:	88 e0       	ldi	r24, 0x08	; 8
    e0b2:	9a e0       	ldi	r25, 0x0A	; 10
    e0b4:	a0 e0       	ldi	r26, 0x00	; 0
    e0b6:	81 83       	std	Z+1, r24	; 0x01
    e0b8:	92 83       	std	Z+2, r25	; 0x02
    e0ba:	a3 83       	std	Z+3, r26	; 0x03
    e0bc:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e0c0:	ee a9       	ldd	r30, Y+54	; 0x36
    e0c2:	ff a9       	ldd	r31, Y+55	; 0x37
    e0c4:	81 85       	ldd	r24, Z+9	; 0x09
    e0c6:	92 85       	ldd	r25, Z+10	; 0x0a
    e0c8:	a0 e0       	ldi	r26, 0x00	; 0
    e0ca:	b0 e0       	ldi	r27, 0x00	; 0
    e0cc:	39 e0       	ldi	r19, 0x09	; 9
    e0ce:	88 0f       	add	r24, r24
    e0d0:	99 1f       	adc	r25, r25
    e0d2:	aa 1f       	adc	r26, r26
    e0d4:	bb 1f       	adc	r27, r27
    e0d6:	3a 95       	dec	r19
    e0d8:	d1 f7       	brne	.-12     	; 0xe0ce <fatfs_status+0x7c>
    e0da:	ed b7       	in	r30, 0x3d	; 61
    e0dc:	fe b7       	in	r31, 0x3e	; 62
    e0de:	84 83       	std	Z+4, r24	; 0x04
    e0e0:	95 83       	std	Z+5, r25	; 0x05
    e0e2:	a6 83       	std	Z+6, r26	; 0x06
    e0e4:	b7 83       	std	Z+7, r27	; 0x07
    e0e6:	89 ee       	ldi	r24, 0xE9	; 233
    e0e8:	99 e0       	ldi	r25, 0x09	; 9
    e0ea:	a0 e0       	ldi	r26, 0x00	; 0
    e0ec:	81 83       	std	Z+1, r24	; 0x01
    e0ee:	92 83       	std	Z+2, r25	; 0x02
    e0f0:	a3 83       	std	Z+3, r26	; 0x03
    e0f2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e0f6:	ee a9       	ldd	r30, Y+54	; 0x36
    e0f8:	ff a9       	ldd	r31, Y+55	; 0x37
    e0fa:	82 81       	ldd	r24, Z+2	; 0x02
    e0fc:	90 e0       	ldi	r25, 0x00	; 0
    e0fe:	ed b7       	in	r30, 0x3d	; 61
    e100:	fe b7       	in	r31, 0x3e	; 62
    e102:	95 83       	std	Z+5, r25	; 0x05
    e104:	84 83       	std	Z+4, r24	; 0x04
    e106:	8b ec       	ldi	r24, 0xCB	; 203
    e108:	99 e0       	ldi	r25, 0x09	; 9
    e10a:	a0 e0       	ldi	r26, 0x00	; 0
    e10c:	81 83       	std	Z+1, r24	; 0x01
    e10e:	92 83       	std	Z+2, r25	; 0x02
    e110:	a3 83       	std	Z+3, r26	; 0x03
    e112:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e116:	ee a9       	ldd	r30, Y+54	; 0x36
    e118:	ff a9       	ldd	r31, Y+55	; 0x37
    e11a:	87 81       	ldd	r24, Z+7	; 0x07
    e11c:	90 85       	ldd	r25, Z+8	; 0x08
    e11e:	ed b7       	in	r30, 0x3d	; 61
    e120:	fe b7       	in	r31, 0x3e	; 62
    e122:	95 83       	std	Z+5, r25	; 0x05
    e124:	84 83       	std	Z+4, r24	; 0x04
    e126:	8d ea       	ldi	r24, 0xAD	; 173
    e128:	99 e0       	ldi	r25, 0x09	; 9
    e12a:	a0 e0       	ldi	r26, 0x00	; 0
    e12c:	81 83       	std	Z+1, r24	; 0x01
    e12e:	92 83       	std	Z+2, r25	; 0x02
    e130:	a3 83       	std	Z+3, r26	; 0x03
    e132:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e136:	ee a9       	ldd	r30, Y+54	; 0x36
    e138:	ff a9       	ldd	r31, Y+55	; 0x37
    e13a:	85 8d       	ldd	r24, Z+29	; 0x1d
    e13c:	96 8d       	ldd	r25, Z+30	; 0x1e
    e13e:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e140:	b0 a1       	ldd	r27, Z+32	; 0x20
    e142:	ed b7       	in	r30, 0x3d	; 61
    e144:	fe b7       	in	r31, 0x3e	; 62
    e146:	84 83       	std	Z+4, r24	; 0x04
    e148:	95 83       	std	Z+5, r25	; 0x05
    e14a:	a6 83       	std	Z+6, r26	; 0x06
    e14c:	b7 83       	std	Z+7, r27	; 0x07
    e14e:	8e e8       	ldi	r24, 0x8E	; 142
    e150:	99 e0       	ldi	r25, 0x09	; 9
    e152:	a0 e0       	ldi	r26, 0x00	; 0
    e154:	81 83       	std	Z+1, r24	; 0x01
    e156:	92 83       	std	Z+2, r25	; 0x02
    e158:	a3 83       	std	Z+3, r26	; 0x03
    e15a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e15e:	ee a9       	ldd	r30, Y+54	; 0x36
    e160:	ff a9       	ldd	r31, Y+55	; 0x37
    e162:	81 8d       	ldd	r24, Z+25	; 0x19
    e164:	92 8d       	ldd	r25, Z+26	; 0x1a
    e166:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e168:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e16a:	02 97       	sbiw	r24, 0x02	; 2
    e16c:	a1 09       	sbc	r26, r1
    e16e:	b1 09       	sbc	r27, r1
    e170:	ed b7       	in	r30, 0x3d	; 61
    e172:	fe b7       	in	r31, 0x3e	; 62
    e174:	84 83       	std	Z+4, r24	; 0x04
    e176:	95 83       	std	Z+5, r25	; 0x05
    e178:	a6 83       	std	Z+6, r26	; 0x06
    e17a:	b7 83       	std	Z+7, r27	; 0x07
    e17c:	8f e6       	ldi	r24, 0x6F	; 111
    e17e:	99 e0       	ldi	r25, 0x09	; 9
    e180:	a0 e0       	ldi	r26, 0x00	; 0
    e182:	81 83       	std	Z+1, r24	; 0x01
    e184:	92 83       	std	Z+2, r25	; 0x02
    e186:	a3 83       	std	Z+3, r26	; 0x03
    e188:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e18c:	ee a9       	ldd	r30, Y+54	; 0x36
    e18e:	ff a9       	ldd	r31, Y+55	; 0x37
    e190:	85 a1       	ldd	r24, Z+37	; 0x25
    e192:	96 a1       	ldd	r25, Z+38	; 0x26
    e194:	a7 a1       	ldd	r26, Z+39	; 0x27
    e196:	b0 a5       	ldd	r27, Z+40	; 0x28
    e198:	ed b7       	in	r30, 0x3d	; 61
    e19a:	fe b7       	in	r31, 0x3e	; 62
    e19c:	84 83       	std	Z+4, r24	; 0x04
    e19e:	95 83       	std	Z+5, r25	; 0x05
    e1a0:	a6 83       	std	Z+6, r26	; 0x06
    e1a2:	b7 83       	std	Z+7, r27	; 0x07
    e1a4:	80 e5       	ldi	r24, 0x50	; 80
    e1a6:	99 e0       	ldi	r25, 0x09	; 9
    e1a8:	a0 e0       	ldi	r26, 0x00	; 0
    e1aa:	81 83       	std	Z+1, r24	; 0x01
    e1ac:	92 83       	std	Z+2, r25	; 0x02
    e1ae:	a3 83       	std	Z+3, r26	; 0x03
    e1b0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e1b4:	ee a9       	ldd	r30, Y+54	; 0x36
    e1b6:	ff a9       	ldd	r31, Y+55	; 0x37
    e1b8:	81 a5       	ldd	r24, Z+41	; 0x29
    e1ba:	92 a5       	ldd	r25, Z+42	; 0x2a
    e1bc:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e1be:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e1c0:	ed b7       	in	r30, 0x3d	; 61
    e1c2:	fe b7       	in	r31, 0x3e	; 62
    e1c4:	84 83       	std	Z+4, r24	; 0x04
    e1c6:	95 83       	std	Z+5, r25	; 0x05
    e1c8:	a6 83       	std	Z+6, r26	; 0x06
    e1ca:	b7 83       	std	Z+7, r27	; 0x07
    e1cc:	81 e3       	ldi	r24, 0x31	; 49
    e1ce:	99 e0       	ldi	r25, 0x09	; 9
    e1d0:	a0 e0       	ldi	r26, 0x00	; 0
    e1d2:	81 83       	std	Z+1, r24	; 0x01
    e1d4:	92 83       	std	Z+2, r25	; 0x02
    e1d6:	a3 83       	std	Z+3, r26	; 0x03
    e1d8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e1dc:	ee a9       	ldd	r30, Y+54	; 0x36
    e1de:	ff a9       	ldd	r31, Y+55	; 0x37
    e1e0:	85 a5       	ldd	r24, Z+45	; 0x2d
    e1e2:	96 a5       	ldd	r25, Z+46	; 0x2e
    e1e4:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e1e6:	b0 a9       	ldd	r27, Z+48	; 0x30
    e1e8:	ed b7       	in	r30, 0x3d	; 61
    e1ea:	fe b7       	in	r31, 0x3e	; 62
    e1ec:	84 83       	std	Z+4, r24	; 0x04
    e1ee:	95 83       	std	Z+5, r25	; 0x05
    e1f0:	a6 83       	std	Z+6, r26	; 0x06
    e1f2:	b7 83       	std	Z+7, r27	; 0x07
    e1f4:	82 e1       	ldi	r24, 0x12	; 18
    e1f6:	99 e0       	ldi	r25, 0x09	; 9
    e1f8:	a0 e0       	ldi	r26, 0x00	; 0
    e1fa:	81 83       	std	Z+1, r24	; 0x01
    e1fc:	92 83       	std	Z+2, r25	; 0x02
    e1fe:	a3 83       	std	Z+3, r26	; 0x03
    e200:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e204:	ae 01       	movw	r20, r28
    e206:	42 5d       	subi	r20, 0xD2	; 210
    e208:	5f 4f       	sbci	r21, 0xFF	; 255
    e20a:	be 01       	movw	r22, r28
    e20c:	6c 5e       	subi	r22, 0xEC	; 236
    e20e:	7f 4f       	sbci	r23, 0xFF	; 255
    e210:	c7 01       	movw	r24, r14
    e212:	0e 94 75 67 	call	0xceea	; 0xceea <f_getlabel>
    if (res)
    e216:	00 97       	sbiw	r24, 0x00	; 0
    e218:	d1 f5       	brne	.+116    	; 0xe28e <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e21a:	8c 89       	ldd	r24, Y+20	; 0x14
    e21c:	81 11       	cpse	r24, r1
    e21e:	03 c0       	rjmp	.+6      	; 0xe226 <fatfs_status+0x1d4>
    e220:	80 eb       	ldi	r24, 0xB0	; 176
    e222:	98 e0       	ldi	r25, 0x08	; 8
    e224:	02 c0       	rjmp	.+4      	; 0xe22a <fatfs_status+0x1d8>
    e226:	ce 01       	movw	r24, r28
    e228:	44 96       	adiw	r24, 0x14	; 20
    e22a:	ed b7       	in	r30, 0x3d	; 61
    e22c:	fe b7       	in	r31, 0x3e	; 62
    e22e:	95 83       	std	Z+5, r25	; 0x05
    e230:	84 83       	std	Z+4, r24	; 0x04
    e232:	84 ef       	ldi	r24, 0xF4	; 244
    e234:	98 e0       	ldi	r25, 0x08	; 8
    e236:	a0 e0       	ldi	r26, 0x00	; 0
    e238:	81 83       	std	Z+1, r24	; 0x01
    e23a:	92 83       	std	Z+2, r25	; 0x02
    e23c:	a3 83       	std	Z+3, r26	; 0x03
    e23e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e242:	8e a5       	ldd	r24, Y+46	; 0x2e
    e244:	9f a5       	ldd	r25, Y+47	; 0x2f
    e246:	a8 a9       	ldd	r26, Y+48	; 0x30
    e248:	b9 a9       	ldd	r27, Y+49	; 0x31
    e24a:	ed b7       	in	r30, 0x3d	; 61
    e24c:	fe b7       	in	r31, 0x3e	; 62
    e24e:	97 83       	std	Z+7, r25	; 0x07
    e250:	86 83       	std	Z+6, r24	; 0x06
    e252:	b5 83       	std	Z+5, r27	; 0x05
    e254:	a4 83       	std	Z+4, r26	; 0x04
    e256:	8f ec       	ldi	r24, 0xCF	; 207
    e258:	98 e0       	ldi	r25, 0x08	; 8
    e25a:	a0 e0       	ldi	r26, 0x00	; 0
    e25c:	81 83       	std	Z+1, r24	; 0x01
    e25e:	92 83       	std	Z+2, r25	; 0x02
    e260:	a3 83       	std	Z+3, r26	; 0x03
    e262:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e266:	10 92 b7 1c 	sts	0x1CB7, r1	; 0x801cb7 <AccDirs+0x1>
    e26a:	10 92 b6 1c 	sts	0x1CB6, r1	; 0x801cb6 <AccDirs>
    e26e:	10 92 b9 1c 	sts	0x1CB9, r1	; 0x801cb9 <AccFiles+0x1>
    e272:	10 92 b8 1c 	sts	0x1CB8, r1	; 0x801cb8 <AccFiles>
    e276:	10 92 b2 1c 	sts	0x1CB2, r1	; 0x801cb2 <AccSize>
    e27a:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <AccSize+0x1>
    e27e:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <AccSize+0x2>
    e282:	10 92 b5 1c 	sts	0x1CB5, r1	; 0x801cb5 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e286:	c7 01       	movw	r24, r14
    e288:	65 de       	rcall	.-822    	; 0xdf54 <fatfs_scan_files>
    if (res)
    e28a:	00 97       	sbiw	r24, 0x00	; 0
    {
        put_rc(res);
    e28c:	11 f0       	breq	.+4      	; 0xe292 <fatfs_status+0x240>
    e28e:	4d de       	rcall	.-870    	; 0xdf2a <put_rc>
        return;
    e290:	56 c0       	rjmp	.+172    	; 0xe33e <fatfs_status+0x2ec>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e292:	0e a9       	ldd	r16, Y+54	; 0x36
    e294:	1f a9       	ldd	r17, Y+55	; 0x37
    e296:	f8 01       	movw	r30, r16
    e298:	c1 84       	ldd	r12, Z+9	; 0x09
    e29a:	d2 84       	ldd	r13, Z+10	; 0x0a
    e29c:	e1 2c       	mov	r14, r1
    e29e:	f1 2c       	mov	r15, r1
    e2a0:	6a a9       	ldd	r22, Y+50	; 0x32
    e2a2:	7b a9       	ldd	r23, Y+51	; 0x33
    e2a4:	8c a9       	ldd	r24, Y+52	; 0x34
    e2a6:	9d a9       	ldd	r25, Y+53	; 0x35
    e2a8:	a7 01       	movw	r20, r14
    e2aa:	96 01       	movw	r18, r12
    e2ac:	0e 94 8f e2 	call	0x1c51e	; 0x1c51e <__mulsi3>
    e2b0:	22 e0       	ldi	r18, 0x02	; 2
    e2b2:	30 e0       	ldi	r19, 0x00	; 0
    e2b4:	40 e0       	ldi	r20, 0x00	; 0
    e2b6:	50 e0       	ldi	r21, 0x00	; 0
    e2b8:	0e 94 f3 e2 	call	0x1c5e6	; 0x1c5e6 <__divmodsi4>
    e2bc:	ed b7       	in	r30, 0x3d	; 61
    e2be:	fe b7       	in	r31, 0x3e	; 62
    e2c0:	20 8b       	std	Z+16, r18	; 0x10
    e2c2:	31 8b       	std	Z+17, r19	; 0x11
    e2c4:	42 8b       	std	Z+18, r20	; 0x12
    e2c6:	53 8b       	std	Z+19, r21	; 0x13
    e2c8:	f8 01       	movw	r30, r16
    e2ca:	81 8d       	ldd	r24, Z+25	; 0x19
    e2cc:	92 8d       	ldd	r25, Z+26	; 0x1a
    e2ce:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e2d0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e2d2:	9c 01       	movw	r18, r24
    e2d4:	ad 01       	movw	r20, r26
    e2d6:	22 50       	subi	r18, 0x02	; 2
    e2d8:	31 09       	sbc	r19, r1
    e2da:	41 09       	sbc	r20, r1
    e2dc:	51 09       	sbc	r21, r1
    e2de:	c7 01       	movw	r24, r14
    e2e0:	b6 01       	movw	r22, r12
    e2e2:	0e 94 8f e2 	call	0x1c51e	; 0x1c51e <__mulsi3>
    e2e6:	dc 01       	movw	r26, r24
    e2e8:	cb 01       	movw	r24, r22
    e2ea:	b6 95       	lsr	r27
    e2ec:	a7 95       	ror	r26
    e2ee:	97 95       	ror	r25
    e2f0:	87 95       	ror	r24
    e2f2:	ed b7       	in	r30, 0x3d	; 61
    e2f4:	fe b7       	in	r31, 0x3e	; 62
    e2f6:	84 87       	std	Z+12, r24	; 0x0c
    e2f8:	95 87       	std	Z+13, r25	; 0x0d
    e2fa:	a6 87       	std	Z+14, r26	; 0x0e
    e2fc:	b7 87       	std	Z+15, r27	; 0x0f
    e2fe:	80 91 b6 1c 	lds	r24, 0x1CB6	; 0x801cb6 <AccDirs>
    e302:	90 91 b7 1c 	lds	r25, 0x1CB7	; 0x801cb7 <AccDirs+0x1>
    e306:	93 87       	std	Z+11, r25	; 0x0b
    e308:	82 87       	std	Z+10, r24	; 0x0a
    e30a:	80 91 b2 1c 	lds	r24, 0x1CB2	; 0x801cb2 <AccSize>
    e30e:	90 91 b3 1c 	lds	r25, 0x1CB3	; 0x801cb3 <AccSize+0x1>
    e312:	a0 91 b4 1c 	lds	r26, 0x1CB4	; 0x801cb4 <AccSize+0x2>
    e316:	b0 91 b5 1c 	lds	r27, 0x1CB5	; 0x801cb5 <AccSize+0x3>
    e31a:	86 83       	std	Z+6, r24	; 0x06
    e31c:	97 83       	std	Z+7, r25	; 0x07
    e31e:	a0 87       	std	Z+8, r26	; 0x08
    e320:	b1 87       	std	Z+9, r27	; 0x09
    e322:	80 91 b8 1c 	lds	r24, 0x1CB8	; 0x801cb8 <AccFiles>
    e326:	90 91 b9 1c 	lds	r25, 0x1CB9	; 0x801cb9 <AccFiles+0x1>
    e32a:	95 83       	std	Z+5, r25	; 0x05
    e32c:	84 83       	std	Z+4, r24	; 0x04
    e32e:	82 e8       	ldi	r24, 0x82	; 130
    e330:	98 e0       	ldi	r25, 0x08	; 8
    e332:	a0 e0       	ldi	r26, 0x00	; 0
    e334:	81 83       	std	Z+1, r24	; 0x01
    e336:	92 83       	std	Z+2, r25	; 0x02
    e338:	a3 83       	std	Z+3, r26	; 0x03
    e33a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );

}
    e33e:	e7 96       	adiw	r28, 0x37	; 55
    e340:	e8 e0       	ldi	r30, 0x08	; 8
    e342:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

0000e346 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e346:	ab e1       	ldi	r26, 0x1B	; 27
    e348:	b0 e0       	ldi	r27, 0x00	; 0
    e34a:	e9 ea       	ldi	r30, 0xA9	; 169
    e34c:	f1 e7       	ldi	r31, 0x71	; 113
    e34e:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
    e352:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e354:	fc 01       	movw	r30, r24
    e356:	86 89       	ldd	r24, Z+22	; 0x16
    e358:	81 11       	cpse	r24, r1
    e35a:	03 c0       	rjmp	.+6      	; 0xe362 <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e35c:	87 e6       	ldi	r24, 0x67	; 103
    e35e:	98 e0       	ldi	r25, 0x08	; 8
    e360:	69 c0       	rjmp	.+210    	; 0xe434 <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e362:	fd 01       	movw	r30, r26
    e364:	80 85       	ldd	r24, Z+8	; 0x08
    e366:	84 fd       	sbrc	r24, 4
    e368:	02 c0       	rjmp	.+4      	; 0xe36e <fatfs_filinfo_list+0x28>
    e36a:	9d e2       	ldi	r25, 0x2D	; 45
    e36c:	01 c0       	rjmp	.+2      	; 0xe370 <fatfs_filinfo_list+0x2a>
    e36e:	94 e4       	ldi	r25, 0x44	; 68
    e370:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e372:	80 fd       	sbrc	r24, 0
    e374:	02 c0       	rjmp	.+4      	; 0xe37a <fatfs_filinfo_list+0x34>
    e376:	9d e2       	ldi	r25, 0x2D	; 45
    e378:	01 c0       	rjmp	.+2      	; 0xe37c <fatfs_filinfo_list+0x36>
    e37a:	92 e5       	ldi	r25, 0x52	; 82
    e37c:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e37e:	81 fd       	sbrc	r24, 1
    e380:	02 c0       	rjmp	.+4      	; 0xe386 <fatfs_filinfo_list+0x40>
    e382:	9d e2       	ldi	r25, 0x2D	; 45
    e384:	01 c0       	rjmp	.+2      	; 0xe388 <fatfs_filinfo_list+0x42>
    e386:	98 e4       	ldi	r25, 0x48	; 72
    e388:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e38a:	82 fd       	sbrc	r24, 2
    e38c:	02 c0       	rjmp	.+4      	; 0xe392 <fatfs_filinfo_list+0x4c>
    e38e:	9d e2       	ldi	r25, 0x2D	; 45
    e390:	01 c0       	rjmp	.+2      	; 0xe394 <fatfs_filinfo_list+0x4e>
    e392:	93 e5       	ldi	r25, 0x53	; 83
    e394:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e396:	85 fd       	sbrc	r24, 5
    e398:	02 c0       	rjmp	.+4      	; 0xe39e <fatfs_filinfo_list+0x58>
    e39a:	8d e2       	ldi	r24, 0x2D	; 45
    e39c:	01 c0       	rjmp	.+2      	; 0xe3a0 <fatfs_filinfo_list+0x5a>
    e39e:	81 e4       	ldi	r24, 0x41	; 65
    e3a0:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e3a2:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e3a4:	fd 01       	movw	r30, r26
    e3a6:	24 81       	ldd	r18, Z+4	; 0x04
    e3a8:	35 81       	ldd	r19, Z+5	; 0x05
    e3aa:	46 81       	ldd	r20, Z+6	; 0x06
    e3ac:	57 81       	ldd	r21, Z+7	; 0x07
    e3ae:	cd 01       	movw	r24, r26
    e3b0:	46 96       	adiw	r24, 0x16	; 22
    e3b2:	ed b7       	in	r30, 0x3d	; 61
    e3b4:	fe b7       	in	r31, 0x3e	; 62
    e3b6:	95 8b       	std	Z+21, r25	; 0x15
    e3b8:	84 8b       	std	Z+20, r24	; 0x14
    e3ba:	8d 91       	ld	r24, X+
    e3bc:	9d 91       	ld	r25, X+
    e3be:	0d 90       	ld	r0, X+
    e3c0:	bc 91       	ld	r27, X
    e3c2:	a0 2d       	mov	r26, r0
    e3c4:	80 8b       	std	Z+16, r24	; 0x10
    e3c6:	91 8b       	std	Z+17, r25	; 0x11
    e3c8:	a2 8b       	std	Z+18, r26	; 0x12
    e3ca:	b3 8b       	std	Z+19, r27	; 0x13
    e3cc:	ca 01       	movw	r24, r20
    e3ce:	45 e0       	ldi	r20, 0x05	; 5
    e3d0:	96 95       	lsr	r25
    e3d2:	87 95       	ror	r24
    e3d4:	4a 95       	dec	r20
    e3d6:	e1 f7       	brne	.-8      	; 0xe3d0 <fatfs_filinfo_list+0x8a>
    e3d8:	8f 73       	andi	r24, 0x3F	; 63
    e3da:	99 27       	eor	r25, r25
    e3dc:	97 87       	std	Z+15, r25	; 0x0f
    e3de:	86 87       	std	Z+14, r24	; 0x0e
    e3e0:	85 2f       	mov	r24, r21
    e3e2:	86 95       	lsr	r24
    e3e4:	86 95       	lsr	r24
    e3e6:	86 95       	lsr	r24
    e3e8:	84 87       	std	Z+12, r24	; 0x0c
    e3ea:	15 86       	std	Z+13, r1	; 0x0d
    e3ec:	c9 01       	movw	r24, r18
    e3ee:	8f 71       	andi	r24, 0x1F	; 31
    e3f0:	99 27       	eor	r25, r25
    e3f2:	93 87       	std	Z+11, r25	; 0x0b
    e3f4:	82 87       	std	Z+10, r24	; 0x0a
    e3f6:	c9 01       	movw	r24, r18
    e3f8:	55 e0       	ldi	r21, 0x05	; 5
    e3fa:	96 95       	lsr	r25
    e3fc:	87 95       	ror	r24
    e3fe:	5a 95       	dec	r21
    e400:	e1 f7       	brne	.-8      	; 0xe3fa <fatfs_filinfo_list+0xb4>
    e402:	8f 70       	andi	r24, 0x0F	; 15
    e404:	99 27       	eor	r25, r25
    e406:	91 87       	std	Z+9, r25	; 0x09
    e408:	80 87       	std	Z+8, r24	; 0x08
    e40a:	23 2f       	mov	r18, r19
    e40c:	33 27       	eor	r19, r19
    e40e:	26 95       	lsr	r18
    e410:	24 54       	subi	r18, 0x44	; 68
    e412:	38 4f       	sbci	r19, 0xF8	; 248
    e414:	37 83       	std	Z+7, r19	; 0x07
    e416:	26 83       	std	Z+6, r18	; 0x06
    e418:	ce 01       	movw	r24, r28
    e41a:	46 96       	adiw	r24, 0x16	; 22
    e41c:	95 83       	std	Z+5, r25	; 0x05
    e41e:	84 83       	std	Z+4, r24	; 0x04
    e420:	85 e4       	ldi	r24, 0x45	; 69
    e422:	98 e0       	ldi	r25, 0x08	; 8
    e424:	a0 e0       	ldi	r26, 0x00	; 0
    e426:	81 83       	std	Z+1, r24	; 0x01
    e428:	92 83       	std	Z+2, r25	; 0x02
    e42a:	a3 83       	std	Z+3, r26	; 0x03
    e42c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e430:	83 e4       	ldi	r24, 0x43	; 67
    e432:	98 e0       	ldi	r25, 0x08	; 8
    e434:	a0 e0       	ldi	r26, 0x00	; 0
    e436:	ed b7       	in	r30, 0x3d	; 61
    e438:	fe b7       	in	r31, 0x3e	; 62
    e43a:	81 83       	std	Z+1, r24	; 0x01
    e43c:	92 83       	std	Z+2, r25	; 0x02
    e43e:	a3 83       	std	Z+3, r26	; 0x03
    e440:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
}
    e444:	6b 96       	adiw	r28, 0x1b	; 27
    e446:	e2 e0       	ldi	r30, 0x02	; 2
    e448:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

0000e44c <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e44c:	cf 93       	push	r28
    e44e:	df 93       	push	r29
    e450:	00 d0       	rcall	.+0      	; 0xe452 <fatfs_help+0x6>
    e452:	1f 92       	push	r1
    e454:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e456:	83 e7       	ldi	r24, 0x73	; 115
    e458:	9b e0       	ldi	r25, 0x0B	; 11
    e45a:	a0 e0       	ldi	r26, 0x00	; 0
    e45c:	ed b7       	in	r30, 0x3d	; 61
    e45e:	fe b7       	in	r31, 0x3e	; 62
    e460:	81 83       	std	Z+1, r24	; 0x01
    e462:	92 83       	std	Z+2, r25	; 0x02
    e464:	a3 83       	std	Z+3, r26	; 0x03
    e466:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

    if(full)
    e46a:	cd 2b       	or	r28, r29
    e46c:	51 f0       	breq	.+20     	; 0xe482 <fatfs_help+0x36>
    {
        printf(
    e46e:	8c ef       	ldi	r24, 0xFC	; 252
    e470:	9a e0       	ldi	r25, 0x0A	; 10
    e472:	a0 e0       	ldi	r26, 0x00	; 0
    e474:	ed b7       	in	r30, 0x3d	; 61
    e476:	fe b7       	in	r31, 0x3e	; 62
    e478:	81 83       	std	Z+1, r24	; 0x01
    e47a:	92 83       	std	Z+2, r25	; 0x02
    e47c:	a3 83       	std	Z+3, r26	; 0x03
    e47e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    #endif
            "\n"
            );
    }

}
    e482:	cd b7       	in	r28, 0x3d	; 61
    e484:	de b7       	in	r29, 0x3e	; 62
    e486:	23 96       	adiw	r28, 0x03	; 3
    e488:	e2 e0       	ldi	r30, 0x02	; 2
    e48a:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

0000e48e <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    e48e:	a5 e5       	ldi	r26, 0x55	; 85
    e490:	b2 e0       	ldi	r27, 0x02	; 2
    e492:	ed e4       	ldi	r30, 0x4D	; 77
    e494:	f2 e7       	ldi	r31, 0x72	; 114
    e496:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256];

	memset(buff,0,sizeof(buff)-1);
    e49a:	8e 01       	movw	r16, r28
    e49c:	0e 5d       	subi	r16, 0xDE	; 222
    e49e:	1e 4f       	sbci	r17, 0xFE	; 254
    e4a0:	2f ef       	ldi	r18, 0xFF	; 255
    e4a2:	f8 01       	movw	r30, r16
    e4a4:	11 92       	st	Z+, r1
    e4a6:	2a 95       	dec	r18
    e4a8:	e9 f7       	brne	.-6      	; 0xe4a4 <fatfs_ls+0x16>

    if(!name || !*name)
    e4aa:	00 97       	sbiw	r24, 0x00	; 0
    e4ac:	21 f0       	breq	.+8      	; 0xe4b6 <fatfs_ls+0x28>
    e4ae:	fc 01       	movw	r30, r24
    e4b0:	20 81       	ld	r18, Z
    e4b2:	21 11       	cpse	r18, r1
    e4b4:	03 c0       	rjmp	.+6      	; 0xe4bc <fatfs_ls+0x2e>
    {
        strcpy(buff,".");
    e4b6:	6d ef       	ldi	r22, 0xFD	; 253
    e4b8:	72 e1       	ldi	r23, 0x12	; 18
    e4ba:	01 c0       	rjmp	.+2      	; 0xe4be <fatfs_ls+0x30>
    }
    else
    {
        strcpy(buff,name);
    e4bc:	bc 01       	movw	r22, r24
    e4be:	c8 01       	movw	r24, r16
    e4c0:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e4c4:	ed b7       	in	r30, 0x3d	; 61
    e4c6:	fe b7       	in	r31, 0x3e	; 62
    e4c8:	15 83       	std	Z+5, r17	; 0x05
    e4ca:	04 83       	std	Z+4, r16	; 0x04
    e4cc:	8c e7       	ldi	r24, 0x7C	; 124
    e4ce:	9a e0       	ldi	r25, 0x0A	; 10
    e4d0:	a0 e0       	ldi	r26, 0x00	; 0
    e4d2:	81 83       	std	Z+1, r24	; 0x01
    e4d4:	92 83       	std	Z+2, r25	; 0x02
    e4d6:	a3 83       	std	Z+3, r26	; 0x03
    e4d8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

    res = f_opendir(&dirs, buff);
    e4dc:	b8 01       	movw	r22, r16
    e4de:	ce 01       	movw	r24, r28
    e4e0:	8e 5d       	subi	r24, 0xDE	; 222
    e4e2:	9d 4f       	sbci	r25, 0xFD	; 253
    e4e4:	0e 94 3b 62 	call	0xc476	; 0xc476 <f_opendir>
    if (res) { put_rc(res); return; }
    e4e8:	00 97       	sbiw	r24, 0x00	; 0
    e4ea:	11 f0       	breq	.+4      	; 0xe4f0 <fatfs_ls+0x62>
    e4ec:	1e dd       	rcall	.-1476   	; 0xdf2a <put_rc>
    e4ee:	8a c0       	rjmp	.+276    	; 0xe604 <fatfs_ls+0x176>
    p1 = s1 = s2 = 0;
    e4f0:	c0 5b       	subi	r28, 0xB0	; 176
    e4f2:	dd 4f       	sbci	r29, 0xFD	; 253
    e4f4:	18 82       	st	Y, r1
    e4f6:	19 82       	std	Y+1, r1	; 0x01
    e4f8:	1a 82       	std	Y+2, r1	; 0x02
    e4fa:	1b 82       	std	Y+3, r1	; 0x03
    e4fc:	c0 55       	subi	r28, 0x50	; 80
    e4fe:	d2 40       	sbci	r29, 0x02	; 2
    e500:	c1 2c       	mov	r12, r1
    e502:	d1 2c       	mov	r13, r1
    e504:	e1 2c       	mov	r14, r1
    e506:	f1 2c       	mov	r15, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e508:	be 01       	movw	r22, r28
    e50a:	64 5f       	subi	r22, 0xF4	; 244
    e50c:	7f 4f       	sbci	r23, 0xFF	; 255
    e50e:	ce 01       	movw	r24, r28
    e510:	8e 5d       	subi	r24, 0xDE	; 222
    e512:	9d 4f       	sbci	r25, 0xFD	; 253
    e514:	0e 94 c1 62 	call	0xc582	; 0xc582 <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    e518:	89 2b       	or	r24, r25
    e51a:	49 f5       	brne	.+82     	; 0xe56e <fatfs_ls+0xe0>
    e51c:	8a a1       	ldd	r24, Y+34	; 0x22
    e51e:	88 23       	and	r24, r24
    e520:	31 f1       	breq	.+76     	; 0xe56e <fatfs_ls+0xe0>
        if (fno.fattrib & AM_DIR)
    e522:	8c 89       	ldd	r24, Y+20	; 0x14
    e524:	84 ff       	sbrs	r24, 4
    e526:	04 c0       	rjmp	.+8      	; 0xe530 <fatfs_ls+0xa2>
        {
            s2++;
    e528:	ff ef       	ldi	r31, 0xFF	; 255
    e52a:	cf 1a       	sub	r12, r31
    e52c:	df 0a       	sbc	r13, r31
    e52e:	1b c0       	rjmp	.+54     	; 0xe566 <fatfs_ls+0xd8>
        }
        else
        {
            s1++; p1 += fno.fsize;
    e530:	8f ef       	ldi	r24, 0xFF	; 255
    e532:	e8 1a       	sub	r14, r24
    e534:	f8 0a       	sbc	r15, r24
    e536:	4c 85       	ldd	r20, Y+12	; 0x0c
    e538:	5d 85       	ldd	r21, Y+13	; 0x0d
    e53a:	6e 85       	ldd	r22, Y+14	; 0x0e
    e53c:	7f 85       	ldd	r23, Y+15	; 0x0f
    e53e:	c0 5b       	subi	r28, 0xB0	; 176
    e540:	dd 4f       	sbci	r29, 0xFD	; 253
    e542:	88 81       	ld	r24, Y
    e544:	99 81       	ldd	r25, Y+1	; 0x01
    e546:	aa 81       	ldd	r26, Y+2	; 0x02
    e548:	bb 81       	ldd	r27, Y+3	; 0x03
    e54a:	c0 55       	subi	r28, 0x50	; 80
    e54c:	d2 40       	sbci	r29, 0x02	; 2
    e54e:	84 0f       	add	r24, r20
    e550:	95 1f       	adc	r25, r21
    e552:	a6 1f       	adc	r26, r22
    e554:	b7 1f       	adc	r27, r23
    e556:	c0 5b       	subi	r28, 0xB0	; 176
    e558:	dd 4f       	sbci	r29, 0xFD	; 253
    e55a:	88 83       	st	Y, r24
    e55c:	99 83       	std	Y+1, r25	; 0x01
    e55e:	aa 83       	std	Y+2, r26	; 0x02
    e560:	bb 83       	std	Y+3, r27	; 0x03
    e562:	c0 55       	subi	r28, 0x50	; 80
    e564:	d2 40       	sbci	r29, 0x02	; 2
        }
        fatfs_filinfo_list(&fno);
    e566:	ce 01       	movw	r24, r28
    e568:	0c 96       	adiw	r24, 0x0c	; 12
    e56a:	ed de       	rcall	.-550    	; 0xe346 <fatfs_filinfo_list>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e56c:	cd cf       	rjmp	.-102    	; 0xe508 <fatfs_ls+0x7a>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e56e:	ed b7       	in	r30, 0x3d	; 61
    e570:	fe b7       	in	r31, 0x3e	; 62
    e572:	d3 86       	std	Z+11, r13	; 0x0b
    e574:	c2 86       	std	Z+10, r12	; 0x0a
    e576:	c0 5b       	subi	r28, 0xB0	; 176
    e578:	dd 4f       	sbci	r29, 0xFD	; 253
    e57a:	88 81       	ld	r24, Y
    e57c:	99 81       	ldd	r25, Y+1	; 0x01
    e57e:	aa 81       	ldd	r26, Y+2	; 0x02
    e580:	bb 81       	ldd	r27, Y+3	; 0x03
    e582:	c0 55       	subi	r28, 0x50	; 80
    e584:	d2 40       	sbci	r29, 0x02	; 2
    e586:	86 83       	std	Z+6, r24	; 0x06
    e588:	97 83       	std	Z+7, r25	; 0x07
    e58a:	a0 87       	std	Z+8, r26	; 0x08
    e58c:	b1 87       	std	Z+9, r27	; 0x09
    e58e:	f5 82       	std	Z+5, r15	; 0x05
    e590:	e4 82       	std	Z+4, r14	; 0x04
    e592:	83 e5       	ldi	r24, 0x53	; 83
    e594:	9a e0       	ldi	r25, 0x0A	; 10
    e596:	a0 e0       	ldi	r26, 0x00	; 0
    e598:	81 83       	std	Z+1, r24	; 0x01
    e59a:	92 83       	std	Z+2, r25	; 0x02
    e59c:	a3 83       	std	Z+3, r26	; 0x03
    e59e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e5a2:	ae 01       	movw	r20, r28
    e5a4:	4c 5a       	subi	r20, 0xAC	; 172
    e5a6:	5d 4f       	sbci	r21, 0xFD	; 253
    e5a8:	be 01       	movw	r22, r28
    e5aa:	60 5b       	subi	r22, 0xB0	; 176
    e5ac:	7d 4f       	sbci	r23, 0xFD	; 253
    e5ae:	c8 01       	movw	r24, r16
    e5b0:	0e 94 43 63 	call	0xc686	; 0xc686 <f_getfree>
    e5b4:	89 2b       	or	r24, r25
    e5b6:	31 f5       	brne	.+76     	; 0xe604 <fatfs_ls+0x176>
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e5b8:	cc 5a       	subi	r28, 0xAC	; 172
    e5ba:	dd 4f       	sbci	r29, 0xFD	; 253
    e5bc:	e8 81       	ld	r30, Y
    e5be:	f9 81       	ldd	r31, Y+1	; 0x01
    e5c0:	c4 55       	subi	r28, 0x54	; 84
    e5c2:	d2 40       	sbci	r29, 0x02	; 2
    e5c4:	a1 85       	ldd	r26, Z+9	; 0x09
    e5c6:	b2 85       	ldd	r27, Z+10	; 0x0a
    e5c8:	c0 5b       	subi	r28, 0xB0	; 176
    e5ca:	dd 4f       	sbci	r29, 0xFD	; 253
    e5cc:	28 81       	ld	r18, Y
    e5ce:	39 81       	ldd	r19, Y+1	; 0x01
    e5d0:	4a 81       	ldd	r20, Y+2	; 0x02
    e5d2:	5b 81       	ldd	r21, Y+3	; 0x03
    e5d4:	c0 55       	subi	r28, 0x50	; 80
    e5d6:	d2 40       	sbci	r29, 0x02	; 2
    e5d8:	0e 94 1e e3 	call	0x1c63c	; 0x1c63c <__muluhisi3>
    e5dc:	22 e0       	ldi	r18, 0x02	; 2
    e5de:	30 e0       	ldi	r19, 0x00	; 0
    e5e0:	40 e0       	ldi	r20, 0x00	; 0
    e5e2:	50 e0       	ldi	r21, 0x00	; 0
    e5e4:	0e 94 f3 e2 	call	0x1c5e6	; 0x1c5e6 <__divmodsi4>
    e5e8:	ed b7       	in	r30, 0x3d	; 61
    e5ea:	fe b7       	in	r31, 0x3e	; 62
    e5ec:	24 83       	std	Z+4, r18	; 0x04
    e5ee:	35 83       	std	Z+5, r19	; 0x05
    e5f0:	46 83       	std	Z+6, r20	; 0x06
    e5f2:	57 83       	std	Z+7, r21	; 0x07
    e5f4:	8e e3       	ldi	r24, 0x3E	; 62
    e5f6:	9a e0       	ldi	r25, 0x0A	; 10
    e5f8:	a0 e0       	ldi	r26, 0x00	; 0
    e5fa:	81 83       	std	Z+1, r24	; 0x01
    e5fc:	92 83       	std	Z+2, r25	; 0x02
    e5fe:	a3 83       	std	Z+3, r26	; 0x03
    e600:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
}
    e604:	cb 5a       	subi	r28, 0xAB	; 171
    e606:	dd 4f       	sbci	r29, 0xFD	; 253
    e608:	e8 e0       	ldi	r30, 0x08	; 8
    e60a:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

0000e60e <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e60e:	00 d0       	rcall	.+0      	; 0xe610 <mmc_test+0x2>
    e610:	1f 92       	push	r1
    printf("==============================\n");
    e612:	8c ed       	ldi	r24, 0xDC	; 220
    e614:	9a e0       	ldi	r25, 0x0A	; 10
    e616:	a0 e0       	ldi	r26, 0x00	; 0
    e618:	ed b7       	in	r30, 0x3d	; 61
    e61a:	fe b7       	in	r31, 0x3e	; 62
    e61c:	81 83       	std	Z+1, r24	; 0x01
    e61e:	92 83       	std	Z+2, r25	; 0x02
    e620:	a3 83       	std	Z+3, r26	; 0x03
    e622:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("START MMC TEST\n");
    e626:	8c ec       	ldi	r24, 0xCC	; 204
    e628:	9a e0       	ldi	r25, 0x0A	; 10
    e62a:	a0 e0       	ldi	r26, 0x00	; 0
    e62c:	ed b7       	in	r30, 0x3d	; 61
    e62e:	fe b7       	in	r31, 0x3e	; 62
    e630:	81 83       	std	Z+1, r24	; 0x01
    e632:	92 83       	std	Z+2, r25	; 0x02
    e634:	a3 83       	std	Z+3, r26	; 0x03
    e636:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    fatfs_status("/");
    e63a:	86 ea       	ldi	r24, 0xA6	; 166
    e63c:	98 e0       	ldi	r25, 0x08	; 8
    e63e:	09 dd       	rcall	.-1518   	; 0xe052 <fatfs_status>
    printf("MMC Directory List\n");
    e640:	88 eb       	ldi	r24, 0xB8	; 184
    e642:	9a e0       	ldi	r25, 0x0A	; 10
    e644:	a0 e0       	ldi	r26, 0x00	; 0
    e646:	ed b7       	in	r30, 0x3d	; 61
    e648:	fe b7       	in	r31, 0x3e	; 62
    e64a:	81 83       	std	Z+1, r24	; 0x01
    e64c:	92 83       	std	Z+2, r25	; 0x02
    e64e:	a3 83       	std	Z+3, r26	; 0x03
    e650:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    fatfs_ls("/");
    e654:	86 ea       	ldi	r24, 0xA6	; 166
    e656:	98 e0       	ldi	r25, 0x08	; 8
    e658:	1a df       	rcall	.-460    	; 0xe48e <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e65a:	8a ea       	ldi	r24, 0xAA	; 170
    e65c:	9a e0       	ldi	r25, 0x0A	; 10
    e65e:	a0 e0       	ldi	r26, 0x00	; 0
    e660:	ed b7       	in	r30, 0x3d	; 61
    e662:	fe b7       	in	r31, 0x3e	; 62
    e664:	81 83       	std	Z+1, r24	; 0x01
    e666:	92 83       	std	Z+2, r25	; 0x02
    e668:	a3 83       	std	Z+3, r26	; 0x03
    e66a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("==============================\n");
    e66e:	8a e8       	ldi	r24, 0x8A	; 138
    e670:	9a e0       	ldi	r25, 0x0A	; 10
    e672:	a0 e0       	ldi	r26, 0x00	; 0
    e674:	ed b7       	in	r30, 0x3d	; 61
    e676:	fe b7       	in	r31, 0x3e	; 62
    e678:	81 83       	std	Z+1, r24	; 0x01
    e67a:	92 83       	std	Z+2, r25	; 0x02
    e67c:	a3 83       	std	Z+3, r26	; 0x03
    e67e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
}
    e682:	0f 90       	pop	r0
    e684:	0f 90       	pop	r0
    e686:	0f 90       	pop	r0
    e688:	08 95       	ret

0000e68a <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e68a:	ef 92       	push	r14
    e68c:	ff 92       	push	r15
    e68e:	0f 93       	push	r16
    e690:	1f 93       	push	r17
    e692:	cf 93       	push	r28
    e694:	df 93       	push	r29
    e696:	7c 01       	movw	r14, r24
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
    e698:	fb 01       	movw	r30, r22
    e69a:	80 81       	ld	r24, Z
    e69c:	91 81       	ldd	r25, Z+1	; 0x01

    if(!ptr)
    e69e:	00 97       	sbiw	r24, 0x00	; 0
    e6a0:	19 f4       	brne	.+6      	; 0xe6a8 <fatfs_tests+0x1e>
        return(0);
    e6a2:	80 e0       	ldi	r24, 0x00	; 0
    e6a4:	90 e0       	ldi	r25, 0x00	; 0
    e6a6:	5b c0       	rjmp	.+182    	; 0xe75e <fatfs_tests+0xd4>
    e6a8:	eb 01       	movw	r28, r22

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    e6aa:	62 ed       	ldi	r22, 0xD2	; 210
    e6ac:	78 e0       	ldi	r23, 0x08	; 8
    e6ae:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
    e6b2:	89 2b       	or	r24, r25
    e6b4:	b1 f3       	breq	.-20     	; 0xe6a2 <fatfs_tests+0x18>
    {
        ptr = argv[ind++];
    e6b6:	0a 81       	ldd	r16, Y+2	; 0x02
    e6b8:	1b 81       	ldd	r17, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    e6ba:	01 15       	cp	r16, r1
    e6bc:	11 05       	cpc	r17, r1
    e6be:	21 f4       	brne	.+8      	; 0xe6c8 <fatfs_tests+0x3e>
        {
            fatfs_help(1);
    e6c0:	81 e0       	ldi	r24, 0x01	; 1
    e6c2:	90 e0       	ldi	r25, 0x00	; 0
    e6c4:	c3 de       	rcall	.-634    	; 0xe44c <fatfs_help>
    e6c6:	49 c0       	rjmp	.+146    	; 0xe75a <fatfs_tests+0xd0>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    e6c8:	69 e7       	ldi	r22, 0x79	; 121
    e6ca:	76 e1       	ldi	r23, 0x16	; 22
    e6cc:	c8 01       	movw	r24, r16
    e6ce:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
    e6d2:	89 2b       	or	r24, r25
    e6d4:	a9 f7       	brne	.-22     	; 0xe6c0 <fatfs_tests+0x36>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") )
    e6d6:	68 ed       	ldi	r22, 0xD8	; 216
    e6d8:	78 e0       	ldi	r23, 0x08	; 8
    e6da:	c8 01       	movw	r24, r16
    e6dc:	0e 94 50 30 	call	0x60a0	; 0x60a0 <MATCHI>
    e6e0:	89 2b       	or	r24, r25
    e6e2:	99 f0       	breq	.+38     	; 0xe70a <fatfs_tests+0x80>
    e6e4:	24 96       	adiw	r28, 0x04	; 4
    e6e6:	02 e0       	ldi	r16, 0x02	; 2
    e6e8:	10 e0       	ldi	r17, 0x00	; 0
    {
        int i;
        int args = 0;
// printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    e6ea:	0e 15       	cp	r16, r14
    e6ec:	1f 05       	cpc	r17, r15
    e6ee:	34 f4       	brge	.+12     	; 0xe6fc <fatfs_tests+0x72>
        {
//printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    e6f0:	89 91       	ld	r24, Y+
    e6f2:	99 91       	ld	r25, Y+
    e6f4:	cc de       	rcall	.-616    	; 0xe48e <fatfs_ls>
    if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
// printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    e6f6:	0f 5f       	subi	r16, 0xFF	; 255
    e6f8:	1f 4f       	sbci	r17, 0xFF	; 255
    e6fa:	f7 cf       	rjmp	.-18     	; 0xe6ea <fatfs_tests+0x60>
        {
//printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    e6fc:	02 30       	cpi	r16, 0x02	; 2
    e6fe:	11 05       	cpc	r17, r1
    e700:	61 f5       	brne	.+88     	; 0xe75a <fatfs_tests+0xd0>
        {
            fatfs_ls("");
    e702:	8d e2       	ldi	r24, 0x2D	; 45
    e704:	9c e0       	ldi	r25, 0x0C	; 12
    e706:	c3 de       	rcall	.-634    	; 0xe48e <fatfs_ls>
    e708:	28 c0       	rjmp	.+80     	; 0xe75a <fatfs_tests+0xd0>
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    e70a:	97 01       	movw	r18, r14
    e70c:	42 e0       	ldi	r20, 0x02	; 2
    e70e:	50 e0       	ldi	r21, 0x00	; 0
    e710:	6b ed       	ldi	r22, 0xDB	; 219
    e712:	78 e0       	ldi	r23, 0x08	; 8
    e714:	c8 01       	movw	r24, r16
    e716:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
    e71a:	89 2b       	or	r24, r25
    {
        mmc_test();
    e71c:	11 f0       	breq	.+4      	; 0xe722 <fatfs_tests+0x98>
    e71e:	77 df       	rcall	.-274    	; 0xe60e <mmc_test>
    e720:	1c c0       	rjmp	.+56     	; 0xe75a <fatfs_tests+0xd0>
        return(1);
    }

    else if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    e722:	97 01       	movw	r18, r14
    e724:	42 e0       	ldi	r20, 0x02	; 2
    e726:	50 e0       	ldi	r21, 0x00	; 0
    e728:	64 ee       	ldi	r22, 0xE4	; 228
    e72a:	78 e0       	ldi	r23, 0x08	; 8
    e72c:	c8 01       	movw	r24, r16
    e72e:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
    e732:	89 2b       	or	r24, r25
    {
        mmc_init(1);
    e734:	21 f0       	breq	.+8      	; 0xe73e <fatfs_tests+0xb4>
    e736:	81 e0       	ldi	r24, 0x01	; 1
    e738:	90 e0       	ldi	r25, 0x00	; 0
    e73a:	b4 da       	rcall	.-2712   	; 0xdca4 <mmc_init>
    e73c:	0e c0       	rjmp	.+28     	; 0xe75a <fatfs_tests+0xd0>
        return(1);
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    e73e:	97 01       	movw	r18, r14
    e740:	43 e0       	ldi	r20, 0x03	; 3
    e742:	50 e0       	ldi	r21, 0x00	; 0
    e744:	6d ee       	ldi	r22, 0xED	; 237
    e746:	78 e0       	ldi	r23, 0x08	; 8
    e748:	c8 01       	movw	r24, r16
    e74a:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
    e74e:	89 2b       	or	r24, r25
    e750:	09 f4       	brne	.+2      	; 0xe754 <fatfs_tests+0xca>
    {
        fatfs_status(argv[ind]);
    e752:	a7 cf       	rjmp	.-178    	; 0xe6a2 <fatfs_tests+0x18>
    e754:	8c 81       	ldd	r24, Y+4	; 0x04
    e756:	9d 81       	ldd	r25, Y+5	; 0x05
    e758:	7c dc       	rcall	.-1800   	; 0xe052 <fatfs_status>
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    e75a:	81 e0       	ldi	r24, 0x01	; 1
    e75c:	90 e0       	ldi	r25, 0x00	; 0
        return(1);
    }
#endif

    return(0);
}
    e75e:	cd b7       	in	r28, 0x3d	; 61
    e760:	de b7       	in	r29, 0x3e	; 62
    e762:	e6 e0       	ldi	r30, 0x06	; 6
    e764:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

0000e768 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    e768:	8f 92       	push	r8
    e76a:	9f 92       	push	r9
    e76c:	af 92       	push	r10
    e76e:	bf 92       	push	r11
    e770:	ef 92       	push	r14
    e772:	ff 92       	push	r15
    e774:	0f 93       	push	r16
    e776:	1f 93       	push	r17
    e778:	cf 93       	push	r28
    e77a:	df 93       	push	r29
    e77c:	00 d0       	rcall	.+0      	; 0xe77e <fatfs_getc+0x16>
    e77e:	1f 92       	push	r1
    e780:	cd b7       	in	r28, 0x3d	; 61
    e782:	de b7       	in	r29, 0x3e	; 62
    e784:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <errno+0x1>
    e788:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <errno>
    e78c:	00 97       	sbiw	r24, 0x00	; 0
    e78e:	39 f4       	brne	.+14     	; 0xe79e <fatfs_getc+0x36>
    e790:	89 e0       	ldi	r24, 0x09	; 9
    e792:	90 e0       	ldi	r25, 0x00	; 0
    e794:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    e798:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    e79c:	2f c0       	rjmp	.+94     	; 0xe7fc <fatfs_getc+0x94>
    e79e:	fc 01       	movw	r30, r24
    e7a0:	e4 84       	ldd	r14, Z+12	; 0x0c
    e7a2:	f5 84       	ldd	r15, Z+13	; 0x0d
    e7a4:	e1 14       	cp	r14, r1
    e7a6:	f1 04       	cpc	r15, r1
    e7a8:	99 f3       	breq	.-26     	; 0xe790 <fatfs_getc+0x28>
    e7aa:	8c 01       	movw	r16, r24
    e7ac:	9e 01       	movw	r18, r28
    e7ae:	2f 5f       	subi	r18, 0xFF	; 255
    e7b0:	3f 4f       	sbci	r19, 0xFF	; 255
    e7b2:	41 e0       	ldi	r20, 0x01	; 1
    e7b4:	50 e0       	ldi	r21, 0x00	; 0
    e7b6:	be 01       	movw	r22, r28
    e7b8:	6d 5f       	subi	r22, 0xFD	; 253
    e7ba:	7f 4f       	sbci	r23, 0xFF	; 255
    e7bc:	c7 01       	movw	r24, r14
    e7be:	0e 94 73 5a 	call	0xb4e6	; 0xb4e6 <f_read>
    e7c2:	00 97       	sbiw	r24, 0x00	; 0
    e7c4:	31 f4       	brne	.+12     	; 0xe7d2 <fatfs_getc+0x6a>
    e7c6:	29 81       	ldd	r18, Y+1	; 0x01
    e7c8:	3a 81       	ldd	r19, Y+2	; 0x02
    e7ca:	21 30       	cpi	r18, 0x01	; 1
    e7cc:	31 05       	cpc	r19, r1
    e7ce:	c9 f0       	breq	.+50     	; 0xe802 <fatfs_getc+0x9a>
    e7d0:	03 c0       	rjmp	.+6      	; 0xe7d8 <fatfs_getc+0x70>
    e7d2:	84 31       	cpi	r24, 0x14	; 20
    e7d4:	91 05       	cpc	r25, r1
    e7d6:	40 f4       	brcc	.+16     	; 0xe7e8 <fatfs_getc+0x80>
    e7d8:	fc 01       	movw	r30, r24
    e7da:	ea 55       	subi	r30, 0x5A	; 90
    e7dc:	f4 4f       	sbci	r31, 0xF4	; 244
    e7de:	80 81       	ld	r24, Z
    e7e0:	08 2e       	mov	r0, r24
    e7e2:	00 0c       	add	r0, r0
    e7e4:	99 0b       	sbc	r25, r25
    e7e6:	02 c0       	rjmp	.+4      	; 0xe7ec <fatfs_getc+0x84>
    e7e8:	83 e2       	ldi	r24, 0x23	; 35
    e7ea:	90 e0       	ldi	r25, 0x00	; 0
    e7ec:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    e7f0:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    e7f4:	f8 01       	movw	r30, r16
    e7f6:	83 81       	ldd	r24, Z+3	; 0x03
    e7f8:	80 62       	ori	r24, 0x20	; 32
    e7fa:	83 83       	std	Z+3, r24	; 0x03
    e7fc:	8f ef       	ldi	r24, 0xFF	; 255
    e7fe:	9f ef       	ldi	r25, 0xFF	; 255
    e800:	28 c0       	rjmp	.+80     	; 0xe852 <fatfs_getc+0xea>
    e802:	8b 81       	ldd	r24, Y+3	; 0x03
    e804:	8d 30       	cpi	r24, 0x0D	; 13
    e806:	01 f5       	brne	.+64     	; 0xe848 <fatfs_getc+0xe0>
    e808:	f7 01       	movw	r30, r14
    e80a:	80 88       	ldd	r8, Z+16	; 0x10
    e80c:	91 88       	ldd	r9, Z+17	; 0x11
    e80e:	a2 88       	ldd	r10, Z+18	; 0x12
    e810:	b3 88       	ldd	r11, Z+19	; 0x13
    e812:	9e 01       	movw	r18, r28
    e814:	2f 5f       	subi	r18, 0xFF	; 255
    e816:	3f 4f       	sbci	r19, 0xFF	; 255
    e818:	41 e0       	ldi	r20, 0x01	; 1
    e81a:	50 e0       	ldi	r21, 0x00	; 0
    e81c:	be 01       	movw	r22, r28
    e81e:	6d 5f       	subi	r22, 0xFD	; 253
    e820:	7f 4f       	sbci	r23, 0xFF	; 255
    e822:	c7 01       	movw	r24, r14
    e824:	0e 94 73 5a 	call	0xb4e6	; 0xb4e6 <f_read>
    e828:	89 2b       	or	r24, r25
    e82a:	89 f4       	brne	.+34     	; 0xe84e <fatfs_getc+0xe6>
    e82c:	89 81       	ldd	r24, Y+1	; 0x01
    e82e:	9a 81       	ldd	r25, Y+2	; 0x02
    e830:	01 97       	sbiw	r24, 0x01	; 1
    e832:	69 f4       	brne	.+26     	; 0xe84e <fatfs_getc+0xe6>
    e834:	8b 81       	ldd	r24, Y+3	; 0x03
    e836:	8a 30       	cpi	r24, 0x0A	; 10
    e838:	31 f0       	breq	.+12     	; 0xe846 <fatfs_getc+0xde>
    e83a:	b5 01       	movw	r22, r10
    e83c:	a4 01       	movw	r20, r8
    e83e:	c7 01       	movw	r24, r14
    e840:	0e 94 7f 5f 	call	0xbefe	; 0xbefe <f_lseek>
    e844:	04 c0       	rjmp	.+8      	; 0xe84e <fatfs_getc+0xe6>
    e846:	8b 83       	std	Y+3, r24	; 0x03
    e848:	8b 81       	ldd	r24, Y+3	; 0x03
    e84a:	90 e0       	ldi	r25, 0x00	; 0
    e84c:	02 c0       	rjmp	.+4      	; 0xe852 <fatfs_getc+0xea>
    e84e:	8a e0       	ldi	r24, 0x0A	; 10
    e850:	90 e0       	ldi	r25, 0x00	; 0
    e852:	0f 90       	pop	r0
    e854:	0f 90       	pop	r0
    e856:	0f 90       	pop	r0
    e858:	df 91       	pop	r29
    e85a:	cf 91       	pop	r28
    e85c:	1f 91       	pop	r17
    e85e:	0f 91       	pop	r16
    e860:	ff 90       	pop	r15
    e862:	ef 90       	pop	r14
    e864:	bf 90       	pop	r11
    e866:	af 90       	pop	r10
    e868:	9f 90       	pop	r9
    e86a:	8f 90       	pop	r8
    e86c:	08 95       	ret

0000e86e <fatfs_putc>:
    e86e:	a3 e0       	ldi	r26, 0x03	; 3
    e870:	b0 e0       	ldi	r27, 0x00	; 0
    e872:	ed e3       	ldi	r30, 0x3D	; 61
    e874:	f4 e7       	ldi	r31, 0x74	; 116
    e876:	0c 94 4c e3 	jmp	0x1c698	; 0x1c698 <__prologue_saves__+0x1c>
    e87a:	8b 83       	std	Y+3, r24	; 0x03
    e87c:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <errno+0x1>
    e880:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <errno>
    e884:	61 15       	cp	r22, r1
    e886:	71 05       	cpc	r23, r1
    e888:	39 f4       	brne	.+14     	; 0xe898 <fatfs_putc+0x2a>
    e88a:	89 e0       	ldi	r24, 0x09	; 9
    e88c:	90 e0       	ldi	r25, 0x00	; 0
    e88e:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    e892:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    e896:	2d c0       	rjmp	.+90     	; 0xe8f2 <fatfs_putc+0x84>
    e898:	fb 01       	movw	r30, r22
    e89a:	84 85       	ldd	r24, Z+12	; 0x0c
    e89c:	95 85       	ldd	r25, Z+13	; 0x0d
    e89e:	00 97       	sbiw	r24, 0x00	; 0
    e8a0:	a1 f3       	breq	.-24     	; 0xe88a <fatfs_putc+0x1c>
    e8a2:	8b 01       	movw	r16, r22
    e8a4:	9e 01       	movw	r18, r28
    e8a6:	2f 5f       	subi	r18, 0xFF	; 255
    e8a8:	3f 4f       	sbci	r19, 0xFF	; 255
    e8aa:	41 e0       	ldi	r20, 0x01	; 1
    e8ac:	50 e0       	ldi	r21, 0x00	; 0
    e8ae:	be 01       	movw	r22, r28
    e8b0:	6d 5f       	subi	r22, 0xFD	; 253
    e8b2:	7f 4f       	sbci	r23, 0xFF	; 255
    e8b4:	0e 94 be 5b 	call	0xb77c	; 0xb77c <f_write>
    e8b8:	00 97       	sbiw	r24, 0x00	; 0
    e8ba:	31 f4       	brne	.+12     	; 0xe8c8 <fatfs_putc+0x5a>
    e8bc:	29 81       	ldd	r18, Y+1	; 0x01
    e8be:	3a 81       	ldd	r19, Y+2	; 0x02
    e8c0:	21 30       	cpi	r18, 0x01	; 1
    e8c2:	31 05       	cpc	r19, r1
    e8c4:	c9 f0       	breq	.+50     	; 0xe8f8 <fatfs_putc+0x8a>
    e8c6:	03 c0       	rjmp	.+6      	; 0xe8ce <fatfs_putc+0x60>
    e8c8:	84 31       	cpi	r24, 0x14	; 20
    e8ca:	91 05       	cpc	r25, r1
    e8cc:	40 f4       	brcc	.+16     	; 0xe8de <fatfs_putc+0x70>
    e8ce:	fc 01       	movw	r30, r24
    e8d0:	ea 55       	subi	r30, 0x5A	; 90
    e8d2:	f4 4f       	sbci	r31, 0xF4	; 244
    e8d4:	80 81       	ld	r24, Z
    e8d6:	08 2e       	mov	r0, r24
    e8d8:	00 0c       	add	r0, r0
    e8da:	99 0b       	sbc	r25, r25
    e8dc:	02 c0       	rjmp	.+4      	; 0xe8e2 <fatfs_putc+0x74>
    e8de:	83 e2       	ldi	r24, 0x23	; 35
    e8e0:	90 e0       	ldi	r25, 0x00	; 0
    e8e2:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    e8e6:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    e8ea:	f8 01       	movw	r30, r16
    e8ec:	83 81       	ldd	r24, Z+3	; 0x03
    e8ee:	80 62       	ori	r24, 0x20	; 32
    e8f0:	83 83       	std	Z+3, r24	; 0x03
    e8f2:	8f ef       	ldi	r24, 0xFF	; 255
    e8f4:	9f ef       	ldi	r25, 0xFF	; 255
    e8f6:	02 c0       	rjmp	.+4      	; 0xe8fc <fatfs_putc+0x8e>
    e8f8:	8b 81       	ldd	r24, Y+3	; 0x03
    e8fa:	90 e0       	ldi	r25, 0x00	; 0
    e8fc:	23 96       	adiw	r28, 0x03	; 3
    e8fe:	e4 e0       	ldi	r30, 0x04	; 4
    e900:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

0000e904 <fgetc>:
    e904:	cf 93       	push	r28
    e906:	df 93       	push	r29
    e908:	00 d0       	rcall	.+0      	; 0xe90a <fgetc+0x6>
    e90a:	1f 92       	push	r1
    e90c:	ec 01       	movw	r28, r24
    e90e:	00 97       	sbiw	r24, 0x00	; 0
    e910:	39 f4       	brne	.+14     	; 0xe920 <fgetc+0x1c>
    e912:	89 e0       	ldi	r24, 0x09	; 9
    e914:	90 e0       	ldi	r25, 0x00	; 0
    e916:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    e91a:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    e91e:	40 c0       	rjmp	.+128    	; 0xe9a0 <fgetc+0x9c>
    e920:	2b 81       	ldd	r18, Y+3	; 0x03
    e922:	20 ff       	sbrs	r18, 0
    e924:	3d c0       	rjmp	.+122    	; 0xe9a0 <fgetc+0x9c>
    e926:	26 ff       	sbrs	r18, 6
    e928:	0a c0       	rjmp	.+20     	; 0xe93e <fgetc+0x3a>
    e92a:	2f 7b       	andi	r18, 0xBF	; 191
    e92c:	2b 83       	std	Y+3, r18	; 0x03
    e92e:	8e 81       	ldd	r24, Y+6	; 0x06
    e930:	9f 81       	ldd	r25, Y+7	; 0x07
    e932:	01 96       	adiw	r24, 0x01	; 1
    e934:	9f 83       	std	Y+7, r25	; 0x07
    e936:	8e 83       	std	Y+6, r24	; 0x06
    e938:	8a 81       	ldd	r24, Y+2	; 0x02
    e93a:	90 e0       	ldi	r25, 0x00	; 0
    e93c:	33 c0       	rjmp	.+102    	; 0xe9a4 <fgetc+0xa0>
    e93e:	22 ff       	sbrs	r18, 2
    e940:	0d c0       	rjmp	.+26     	; 0xe95c <fgetc+0x58>
    e942:	e8 81       	ld	r30, Y
    e944:	f9 81       	ldd	r31, Y+1	; 0x01
    e946:	80 81       	ld	r24, Z
    e948:	90 e0       	ldi	r25, 0x00	; 0
    e94a:	00 97       	sbiw	r24, 0x00	; 0
    e94c:	19 f4       	brne	.+6      	; 0xe954 <fgetc+0x50>
    e94e:	20 62       	ori	r18, 0x20	; 32
    e950:	2b 83       	std	Y+3, r18	; 0x03
    e952:	26 c0       	rjmp	.+76     	; 0xe9a0 <fgetc+0x9c>
    e954:	31 96       	adiw	r30, 0x01	; 1
    e956:	f9 83       	std	Y+1, r31	; 0x01
    e958:	e8 83       	st	Y, r30
    e95a:	1b c0       	rjmp	.+54     	; 0xe992 <fgetc+0x8e>
    e95c:	ea 85       	ldd	r30, Y+10	; 0x0a
    e95e:	fb 85       	ldd	r31, Y+11	; 0x0b
    e960:	30 97       	sbiw	r30, 0x00	; 0
    e962:	59 f4       	brne	.+22     	; 0xe97a <fgetc+0x76>
    e964:	8f ea       	ldi	r24, 0xAF	; 175
    e966:	9b e0       	ldi	r25, 0x0B	; 11
    e968:	a0 e0       	ldi	r26, 0x00	; 0
    e96a:	ed b7       	in	r30, 0x3d	; 61
    e96c:	fe b7       	in	r31, 0x3e	; 62
    e96e:	81 83       	std	Z+1, r24	; 0x01
    e970:	92 83       	std	Z+2, r25	; 0x02
    e972:	a3 83       	std	Z+3, r26	; 0x03
    e974:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    e978:	13 c0       	rjmp	.+38     	; 0xe9a0 <fgetc+0x9c>
    e97a:	09 95       	icall
    e97c:	97 ff       	sbrs	r25, 7
    e97e:	09 c0       	rjmp	.+18     	; 0xe992 <fgetc+0x8e>
    e980:	2b 81       	ldd	r18, Y+3	; 0x03
    e982:	02 96       	adiw	r24, 0x02	; 2
    e984:	11 f0       	breq	.+4      	; 0xe98a <fgetc+0x86>
    e986:	80 e2       	ldi	r24, 0x20	; 32
    e988:	01 c0       	rjmp	.+2      	; 0xe98c <fgetc+0x88>
    e98a:	80 e1       	ldi	r24, 0x10	; 16
    e98c:	82 2b       	or	r24, r18
    e98e:	8b 83       	std	Y+3, r24	; 0x03
    e990:	07 c0       	rjmp	.+14     	; 0xe9a0 <fgetc+0x9c>
    e992:	2e 81       	ldd	r18, Y+6	; 0x06
    e994:	3f 81       	ldd	r19, Y+7	; 0x07
    e996:	2f 5f       	subi	r18, 0xFF	; 255
    e998:	3f 4f       	sbci	r19, 0xFF	; 255
    e99a:	3f 83       	std	Y+7, r19	; 0x07
    e99c:	2e 83       	std	Y+6, r18	; 0x06
    e99e:	02 c0       	rjmp	.+4      	; 0xe9a4 <fgetc+0xa0>
    e9a0:	8f ef       	ldi	r24, 0xFF	; 255
    e9a2:	9f ef       	ldi	r25, 0xFF	; 255
    e9a4:	cd b7       	in	r28, 0x3d	; 61
    e9a6:	de b7       	in	r29, 0x3e	; 62
    e9a8:	23 96       	adiw	r28, 0x03	; 3
    e9aa:	e2 e0       	ldi	r30, 0x02	; 2
    e9ac:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

0000e9b0 <fputc>:
    e9b0:	cf 93       	push	r28
    e9b2:	df 93       	push	r29
    e9b4:	00 d0       	rcall	.+0      	; 0xe9b6 <fputc+0x6>
    e9b6:	1f 92       	push	r1
    e9b8:	eb 01       	movw	r28, r22
    e9ba:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <errno+0x1>
    e9be:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <errno>
    e9c2:	20 91 be 1c 	lds	r18, 0x1CBE	; 0x801cbe <__iob+0x2>
    e9c6:	30 91 bf 1c 	lds	r19, 0x1CBF	; 0x801cbf <__iob+0x3>
    e9ca:	62 17       	cp	r22, r18
    e9cc:	73 07       	cpc	r23, r19
    e9ce:	49 f0       	breq	.+18     	; 0xe9e2 <fputc+0x32>
    e9d0:	20 91 c0 1c 	lds	r18, 0x1CC0	; 0x801cc0 <__iob+0x4>
    e9d4:	30 91 c1 1c 	lds	r19, 0x1CC1	; 0x801cc1 <__iob+0x5>
    e9d8:	62 17       	cp	r22, r18
    e9da:	73 07       	cpc	r23, r19
    e9dc:	11 f0       	breq	.+4      	; 0xe9e2 <fputc+0x32>
    e9de:	47 df       	rcall	.-370    	; 0xe86e <fatfs_putc>
    e9e0:	33 c0       	rjmp	.+102    	; 0xea48 <fputc+0x98>
    e9e2:	2b 81       	ldd	r18, Y+3	; 0x03
    e9e4:	21 ff       	sbrs	r18, 1
    e9e6:	2e c0       	rjmp	.+92     	; 0xea44 <fputc+0x94>
    e9e8:	22 ff       	sbrs	r18, 2
    e9ea:	10 c0       	rjmp	.+32     	; 0xea0c <fputc+0x5c>
    e9ec:	4e 81       	ldd	r20, Y+6	; 0x06
    e9ee:	5f 81       	ldd	r21, Y+7	; 0x07
    e9f0:	2c 81       	ldd	r18, Y+4	; 0x04
    e9f2:	3d 81       	ldd	r19, Y+5	; 0x05
    e9f4:	42 17       	cp	r20, r18
    e9f6:	53 07       	cpc	r21, r19
    e9f8:	f4 f4       	brge	.+60     	; 0xea36 <fputc+0x86>
    e9fa:	e8 81       	ld	r30, Y
    e9fc:	f9 81       	ldd	r31, Y+1	; 0x01
    e9fe:	9f 01       	movw	r18, r30
    ea00:	2f 5f       	subi	r18, 0xFF	; 255
    ea02:	3f 4f       	sbci	r19, 0xFF	; 255
    ea04:	39 83       	std	Y+1, r19	; 0x01
    ea06:	28 83       	st	Y, r18
    ea08:	80 83       	st	Z, r24
    ea0a:	15 c0       	rjmp	.+42     	; 0xea36 <fputc+0x86>
    ea0c:	e8 85       	ldd	r30, Y+8	; 0x08
    ea0e:	f9 85       	ldd	r31, Y+9	; 0x09
    ea10:	30 97       	sbiw	r30, 0x00	; 0
    ea12:	59 f4       	brne	.+22     	; 0xea2a <fputc+0x7a>
    ea14:	87 e9       	ldi	r24, 0x97	; 151
    ea16:	9b e0       	ldi	r25, 0x0B	; 11
    ea18:	a0 e0       	ldi	r26, 0x00	; 0
    ea1a:	ed b7       	in	r30, 0x3d	; 61
    ea1c:	fe b7       	in	r31, 0x3e	; 62
    ea1e:	81 83       	std	Z+1, r24	; 0x01
    ea20:	92 83       	std	Z+2, r25	; 0x02
    ea22:	a3 83       	std	Z+3, r26	; 0x03
    ea24:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    ea28:	0d c0       	rjmp	.+26     	; 0xea44 <fputc+0x94>
    ea2a:	be 01       	movw	r22, r28
    ea2c:	09 95       	icall
    ea2e:	8f 3f       	cpi	r24, 0xFF	; 255
    ea30:	ff ef       	ldi	r31, 0xFF	; 255
    ea32:	9f 07       	cpc	r25, r31
    ea34:	39 f0       	breq	.+14     	; 0xea44 <fputc+0x94>
    ea36:	2e 81       	ldd	r18, Y+6	; 0x06
    ea38:	3f 81       	ldd	r19, Y+7	; 0x07
    ea3a:	2f 5f       	subi	r18, 0xFF	; 255
    ea3c:	3f 4f       	sbci	r19, 0xFF	; 255
    ea3e:	3f 83       	std	Y+7, r19	; 0x07
    ea40:	2e 83       	std	Y+6, r18	; 0x06
    ea42:	02 c0       	rjmp	.+4      	; 0xea48 <fputc+0x98>
    ea44:	8f ef       	ldi	r24, 0xFF	; 255
    ea46:	9f ef       	ldi	r25, 0xFF	; 255
    ea48:	cd b7       	in	r28, 0x3d	; 61
    ea4a:	de b7       	in	r29, 0x3e	; 62
    ea4c:	23 96       	adiw	r28, 0x03	; 3
    ea4e:	e2 e0       	ldi	r30, 0x02	; 2
    ea50:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

0000ea54 <_fprintf_putc>:
    ea54:	fc 01       	movw	r30, r24
    ea56:	86 2f       	mov	r24, r22
    ea58:	26 81       	ldd	r18, Z+6	; 0x06
    ea5a:	37 81       	ldd	r19, Z+7	; 0x07
    ea5c:	2f 5f       	subi	r18, 0xFF	; 255
    ea5e:	3f 4f       	sbci	r19, 0xFF	; 255
    ea60:	37 83       	std	Z+7, r19	; 0x07
    ea62:	26 83       	std	Z+6, r18	; 0x06
    ea64:	62 81       	ldd	r22, Z+2	; 0x02
    ea66:	73 81       	ldd	r23, Z+3	; 0x03
    ea68:	90 e0       	ldi	r25, 0x00	; 0
    ea6a:	a2 cf       	rjmp	.-188    	; 0xe9b0 <fputc>
    ea6c:	08 95       	ret

0000ea6e <getchar>:
    ea6e:	80 91 bc 1c 	lds	r24, 0x1CBC	; 0x801cbc <__iob>
    ea72:	90 91 bd 1c 	lds	r25, 0x1CBD	; 0x801cbd <__iob+0x1>
    ea76:	46 cf       	rjmp	.-372    	; 0xe904 <fgetc>
    ea78:	08 95       	ret

0000ea7a <putchar>:
    ea7a:	60 91 be 1c 	lds	r22, 0x1CBE	; 0x801cbe <__iob+0x2>
    ea7e:	70 91 bf 1c 	lds	r23, 0x1CBF	; 0x801cbf <__iob+0x3>
    ea82:	96 cf       	rjmp	.-212    	; 0xe9b0 <fputc>
    ea84:	08 95       	ret

0000ea86 <fgets>:
    ea86:	a0 e0       	ldi	r26, 0x00	; 0
    ea88:	b0 e0       	ldi	r27, 0x00	; 0
    ea8a:	e9 e4       	ldi	r30, 0x49	; 73
    ea8c:	f5 e7       	ldi	r31, 0x75	; 117
    ea8e:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
    ea92:	7c 01       	movw	r14, r24
    ea94:	6a 01       	movw	r12, r20
    ea96:	8b 01       	movw	r16, r22
    ea98:	c0 e0       	ldi	r28, 0x00	; 0
    ea9a:	d0 e0       	ldi	r29, 0x00	; 0
    ea9c:	01 15       	cp	r16, r1
    ea9e:	11 05       	cpc	r17, r1
    eaa0:	41 f0       	breq	.+16     	; 0xeab2 <fgets+0x2c>
    eaa2:	c6 01       	movw	r24, r12
    eaa4:	2f df       	rcall	.-418    	; 0xe904 <fgetc>
    eaa6:	8f 3f       	cpi	r24, 0xFF	; 255
    eaa8:	2f ef       	ldi	r18, 0xFF	; 255
    eaaa:	92 07       	cpc	r25, r18
    eaac:	39 f4       	brne	.+14     	; 0xeabc <fgets+0x36>
    eaae:	20 97       	sbiw	r28, 0x00	; 0
    eab0:	b9 f0       	breq	.+46     	; 0xeae0 <fgets+0x5a>
    eab2:	ce 0d       	add	r28, r14
    eab4:	df 1d       	adc	r29, r15
    eab6:	18 82       	st	Y, r1
    eab8:	c7 01       	movw	r24, r14
    eaba:	14 c0       	rjmp	.+40     	; 0xeae4 <fgets+0x5e>
    eabc:	8a 30       	cpi	r24, 0x0A	; 10
    eabe:	91 05       	cpc	r25, r1
    eac0:	c1 f3       	breq	.-16     	; 0xeab2 <fgets+0x2c>
    eac2:	88 30       	cpi	r24, 0x08	; 8
    eac4:	91 05       	cpc	r25, r1
    eac6:	21 f4       	brne	.+8      	; 0xead0 <fgets+0x4a>
    eac8:	20 97       	sbiw	r28, 0x00	; 0
    eaca:	39 f0       	breq	.+14     	; 0xeada <fgets+0x54>
    eacc:	21 97       	sbiw	r28, 0x01	; 1
    eace:	05 c0       	rjmp	.+10     	; 0xeada <fgets+0x54>
    ead0:	f7 01       	movw	r30, r14
    ead2:	ec 0f       	add	r30, r28
    ead4:	fd 1f       	adc	r31, r29
    ead6:	80 83       	st	Z, r24
    ead8:	21 96       	adiw	r28, 0x01	; 1
    eada:	01 50       	subi	r16, 0x01	; 1
    eadc:	11 09       	sbc	r17, r1
    eade:	de cf       	rjmp	.-68     	; 0xea9c <fgets+0x16>
    eae0:	80 e0       	ldi	r24, 0x00	; 0
    eae2:	90 e0       	ldi	r25, 0x00	; 0
    eae4:	cd b7       	in	r28, 0x3d	; 61
    eae6:	de b7       	in	r29, 0x3e	; 62
    eae8:	e8 e0       	ldi	r30, 0x08	; 8
    eaea:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

0000eaee <fputs>:
    eaee:	0f 93       	push	r16
    eaf0:	1f 93       	push	r17
    eaf2:	cf 93       	push	r28
    eaf4:	df 93       	push	r29
    eaf6:	8b 01       	movw	r16, r22
    eaf8:	ec 01       	movw	r28, r24
    eafa:	89 91       	ld	r24, Y+
    eafc:	88 23       	and	r24, r24
    eafe:	41 f0       	breq	.+16     	; 0xeb10 <fputs+0x22>
    eb00:	b8 01       	movw	r22, r16
    eb02:	90 e0       	ldi	r25, 0x00	; 0
    eb04:	55 df       	rcall	.-342    	; 0xe9b0 <fputc>
    eb06:	8f 3f       	cpi	r24, 0xFF	; 255
    eb08:	2f ef       	ldi	r18, 0xFF	; 255
    eb0a:	92 07       	cpc	r25, r18
    eb0c:	b1 f7       	brne	.-20     	; 0xeafa <fputs+0xc>
    eb0e:	02 c0       	rjmp	.+4      	; 0xeb14 <fputs+0x26>
    eb10:	80 e0       	ldi	r24, 0x00	; 0
    eb12:	90 e0       	ldi	r25, 0x00	; 0
    eb14:	df 91       	pop	r29
    eb16:	cf 91       	pop	r28
    eb18:	1f 91       	pop	r17
    eb1a:	0f 91       	pop	r16
    eb1c:	08 95       	ret

0000eb1e <puts>:
    eb1e:	cf 93       	push	r28
    eb20:	df 93       	push	r29
    eb22:	ec 01       	movw	r28, r24
    eb24:	89 91       	ld	r24, Y+
    eb26:	60 91 be 1c 	lds	r22, 0x1CBE	; 0x801cbe <__iob+0x2>
    eb2a:	70 91 bf 1c 	lds	r23, 0x1CBF	; 0x801cbf <__iob+0x3>
    eb2e:	88 23       	and	r24, r24
    eb30:	39 f0       	breq	.+14     	; 0xeb40 <puts+0x22>
    eb32:	90 e0       	ldi	r25, 0x00	; 0
    eb34:	3d df       	rcall	.-390    	; 0xe9b0 <fputc>
    eb36:	8f 3f       	cpi	r24, 0xFF	; 255
    eb38:	2f ef       	ldi	r18, 0xFF	; 255
    eb3a:	92 07       	cpc	r25, r18
    eb3c:	99 f7       	brne	.-26     	; 0xeb24 <puts+0x6>
    eb3e:	03 c0       	rjmp	.+6      	; 0xeb46 <puts+0x28>
    eb40:	8a e0       	ldi	r24, 0x0A	; 10
    eb42:	90 e0       	ldi	r25, 0x00	; 0
    eb44:	35 df       	rcall	.-406    	; 0xe9b0 <fputc>
    eb46:	df 91       	pop	r29
    eb48:	cf 91       	pop	r28
    eb4a:	08 95       	ret

0000eb4c <fileno>:
    eb4c:	00 97       	sbiw	r24, 0x00	; 0
    eb4e:	39 f4       	brne	.+14     	; 0xeb5e <fileno+0x12>
    eb50:	89 e0       	ldi	r24, 0x09	; 9
    eb52:	90 e0       	ldi	r25, 0x00	; 0
    eb54:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    eb58:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    eb5c:	0e c0       	rjmp	.+28     	; 0xeb7a <fileno+0x2e>
    eb5e:	ec eb       	ldi	r30, 0xBC	; 188
    eb60:	fc e1       	ldi	r31, 0x1C	; 28
    eb62:	20 e0       	ldi	r18, 0x00	; 0
    eb64:	30 e0       	ldi	r19, 0x00	; 0
    eb66:	41 91       	ld	r20, Z+
    eb68:	51 91       	ld	r21, Z+
    eb6a:	84 17       	cp	r24, r20
    eb6c:	95 07       	cpc	r25, r21
    eb6e:	41 f0       	breq	.+16     	; 0xeb80 <fileno+0x34>
    eb70:	2f 5f       	subi	r18, 0xFF	; 255
    eb72:	3f 4f       	sbci	r19, 0xFF	; 255
    eb74:	20 31       	cpi	r18, 0x10	; 16
    eb76:	31 05       	cpc	r19, r1
    eb78:	b1 f7       	brne	.-20     	; 0xeb66 <fileno+0x1a>
    eb7a:	8f ef       	ldi	r24, 0xFF	; 255
    eb7c:	9f ef       	ldi	r25, 0xFF	; 255
    eb7e:	08 95       	ret
    eb80:	c9 01       	movw	r24, r18
    eb82:	08 95       	ret

0000eb84 <fileno_to_stream>:
    eb84:	80 31       	cpi	r24, 0x10	; 16
    eb86:	91 05       	cpc	r25, r1
    eb88:	48 f4       	brcc	.+18     	; 0xeb9c <fileno_to_stream+0x18>
    eb8a:	88 0f       	add	r24, r24
    eb8c:	99 1f       	adc	r25, r25
    eb8e:	fc 01       	movw	r30, r24
    eb90:	e4 54       	subi	r30, 0x44	; 68
    eb92:	f3 4e       	sbci	r31, 0xE3	; 227
    eb94:	80 81       	ld	r24, Z
    eb96:	91 81       	ldd	r25, Z+1	; 0x01
    eb98:	00 97       	sbiw	r24, 0x00	; 0
    eb9a:	41 f4       	brne	.+16     	; 0xebac <fileno_to_stream+0x28>
    eb9c:	89 e0       	ldi	r24, 0x09	; 9
    eb9e:	90 e0       	ldi	r25, 0x00	; 0
    eba0:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    eba4:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    eba8:	80 e0       	ldi	r24, 0x00	; 0
    ebaa:	90 e0       	ldi	r25, 0x00	; 0
    ebac:	08 95       	ret

0000ebae <mctime>:
    ebae:	a4 e0       	ldi	r26, 0x04	; 4
    ebb0:	b0 e0       	ldi	r27, 0x00	; 0
    ebb2:	ed ed       	ldi	r30, 0xDD	; 221
    ebb4:	f5 e7       	ldi	r31, 0x75	; 117
    ebb6:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
    ebba:	69 83       	std	Y+1, r22	; 0x01
    ebbc:	7a 83       	std	Y+2, r23	; 0x02
    ebbe:	8b 83       	std	Y+3, r24	; 0x03
    ebc0:	9c 83       	std	Y+4, r25	; 0x04
    ebc2:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <errno+0x1>
    ebc6:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <errno>
    ebca:	ce 01       	movw	r24, r28
    ebcc:	01 96       	adiw	r24, 0x01	; 1
    ebce:	0e 94 1f 3b 	call	0x763e	; 0x763e <ctime_gm>
    ebd2:	fc 01       	movw	r30, r24
    ebd4:	01 90       	ld	r0, Z+
    ebd6:	00 20       	and	r0, r0
    ebd8:	e9 f7       	brne	.-6      	; 0xebd4 <mctime+0x26>
    ebda:	31 97       	sbiw	r30, 0x01	; 1
    ebdc:	e8 1b       	sub	r30, r24
    ebde:	f9 0b       	sbc	r31, r25
    ebe0:	39 f0       	breq	.+14     	; 0xebf0 <mctime+0x42>
    ebe2:	31 97       	sbiw	r30, 0x01	; 1
    ebe4:	e8 0f       	add	r30, r24
    ebe6:	f9 1f       	adc	r31, r25
    ebe8:	20 81       	ld	r18, Z
    ebea:	2a 30       	cpi	r18, 0x0A	; 10
    ebec:	09 f4       	brne	.+2      	; 0xebf0 <mctime+0x42>
    ebee:	10 82       	st	Z, r1
    ebf0:	24 96       	adiw	r28, 0x04	; 4
    ebf2:	e2 e0       	ldi	r30, 0x02	; 2
    ebf4:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

0000ebf8 <basename>:
    ebf8:	00 97       	sbiw	r24, 0x00	; 0
    ebfa:	49 f0       	breq	.+18     	; 0xec0e <basename+0x16>
    ebfc:	fc 01       	movw	r30, r24
    ebfe:	21 91       	ld	r18, Z+
    ec00:	22 23       	and	r18, r18
    ec02:	21 f0       	breq	.+8      	; 0xec0c <basename+0x14>
    ec04:	2f 32       	cpi	r18, 0x2F	; 47
    ec06:	d9 f7       	brne	.-10     	; 0xebfe <basename+0x6>
    ec08:	cf 01       	movw	r24, r30
    ec0a:	f9 cf       	rjmp	.-14     	; 0xebfe <basename+0x6>
    ec0c:	08 95       	ret
    ec0e:	8d e2       	ldi	r24, 0x2D	; 45
    ec10:	9c e0       	ldi	r25, 0x0C	; 12
    ec12:	08 95       	ret

0000ec14 <chdir>:
    ec14:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <errno+0x1>
    ec18:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <errno>
    ec1c:	0e 94 ee 5d 	call	0xbbdc	; 0xbbdc <f_chdir>
    ec20:	00 97       	sbiw	r24, 0x00	; 0
    ec22:	a1 f0       	breq	.+40     	; 0xec4c <chdir+0x38>
    ec24:	84 31       	cpi	r24, 0x14	; 20
    ec26:	91 05       	cpc	r25, r1
    ec28:	40 f4       	brcc	.+16     	; 0xec3a <chdir+0x26>
    ec2a:	fc 01       	movw	r30, r24
    ec2c:	ea 55       	subi	r30, 0x5A	; 90
    ec2e:	f4 4f       	sbci	r31, 0xF4	; 244
    ec30:	80 81       	ld	r24, Z
    ec32:	08 2e       	mov	r0, r24
    ec34:	00 0c       	add	r0, r0
    ec36:	99 0b       	sbc	r25, r25
    ec38:	02 c0       	rjmp	.+4      	; 0xec3e <chdir+0x2a>
    ec3a:	83 e2       	ldi	r24, 0x23	; 35
    ec3c:	90 e0       	ldi	r25, 0x00	; 0
    ec3e:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    ec42:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    ec46:	8f ef       	ldi	r24, 0xFF	; 255
    ec48:	9f ef       	ldi	r25, 0xFF	; 255
    ec4a:	08 95       	ret
    ec4c:	80 e0       	ldi	r24, 0x00	; 0
    ec4e:	90 e0       	ldi	r25, 0x00	; 0
    ec50:	08 95       	ret

0000ec52 <chmod>:
    ec52:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <errno+0x1>
    ec56:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <errno>
    ec5a:	42 79       	andi	r20, 0x92	; 146
    ec5c:	55 27       	eor	r21, r21
    ec5e:	66 27       	eor	r22, r22
    ec60:	77 27       	eor	r23, r23
    ec62:	45 2b       	or	r20, r21
    ec64:	46 2b       	or	r20, r22
    ec66:	47 2b       	or	r20, r23
    ec68:	19 f0       	breq	.+6      	; 0xec70 <chmod+0x1e>
    ec6a:	80 e0       	ldi	r24, 0x00	; 0
    ec6c:	90 e0       	ldi	r25, 0x00	; 0
    ec6e:	08 95       	ret
    ec70:	41 e0       	ldi	r20, 0x01	; 1
    ec72:	61 e0       	ldi	r22, 0x01	; 1
    ec74:	0e 94 cf 66 	call	0xcd9e	; 0xcd9e <f_chmod>
    ec78:	00 97       	sbiw	r24, 0x00	; 0
    ec7a:	b9 f3       	breq	.-18     	; 0xec6a <chmod+0x18>
    ec7c:	84 31       	cpi	r24, 0x14	; 20
    ec7e:	91 05       	cpc	r25, r1
    ec80:	40 f4       	brcc	.+16     	; 0xec92 <chmod+0x40>
    ec82:	fc 01       	movw	r30, r24
    ec84:	ea 55       	subi	r30, 0x5A	; 90
    ec86:	f4 4f       	sbci	r31, 0xF4	; 244
    ec88:	80 81       	ld	r24, Z
    ec8a:	08 2e       	mov	r0, r24
    ec8c:	00 0c       	add	r0, r0
    ec8e:	99 0b       	sbc	r25, r25
    ec90:	02 c0       	rjmp	.+4      	; 0xec96 <chmod+0x44>
    ec92:	83 e2       	ldi	r24, 0x23	; 35
    ec94:	90 e0       	ldi	r25, 0x00	; 0
    ec96:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    ec9a:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    ec9e:	8f ef       	ldi	r24, 0xFF	; 255
    eca0:	9f ef       	ldi	r25, 0xFF	; 255
    eca2:	08 95       	ret

0000eca4 <getcwd>:
    eca4:	cf 93       	push	r28
    eca6:	df 93       	push	r29
    eca8:	d8 2f       	mov	r29, r24
    ecaa:	c9 2f       	mov	r28, r25
    ecac:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <errno+0x1>
    ecb0:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <errno>
    ecb4:	0e 94 49 5e 	call	0xbc92	; 0xbc92 <f_getcwd>
    ecb8:	00 97       	sbiw	r24, 0x00	; 0
    ecba:	a1 f0       	breq	.+40     	; 0xece4 <getcwd+0x40>
    ecbc:	84 31       	cpi	r24, 0x14	; 20
    ecbe:	91 05       	cpc	r25, r1
    ecc0:	40 f4       	brcc	.+16     	; 0xecd2 <getcwd+0x2e>
    ecc2:	fc 01       	movw	r30, r24
    ecc4:	ea 55       	subi	r30, 0x5A	; 90
    ecc6:	f4 4f       	sbci	r31, 0xF4	; 244
    ecc8:	80 81       	ld	r24, Z
    ecca:	08 2e       	mov	r0, r24
    eccc:	00 0c       	add	r0, r0
    ecce:	99 0b       	sbc	r25, r25
    ecd0:	02 c0       	rjmp	.+4      	; 0xecd6 <getcwd+0x32>
    ecd2:	83 e2       	ldi	r24, 0x23	; 35
    ecd4:	90 e0       	ldi	r25, 0x00	; 0
    ecd6:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    ecda:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    ecde:	80 e0       	ldi	r24, 0x00	; 0
    ece0:	90 e0       	ldi	r25, 0x00	; 0
    ece2:	02 c0       	rjmp	.+4      	; 0xece8 <getcwd+0x44>
    ece4:	8d 2f       	mov	r24, r29
    ece6:	9c 2f       	mov	r25, r28
    ece8:	df 91       	pop	r29
    ecea:	cf 91       	pop	r28
    ecec:	08 95       	ret

0000ecee <mkdir>:
    ecee:	cf 93       	push	r28
    ecf0:	df 93       	push	r29
    ecf2:	ec 01       	movw	r28, r24
    ecf4:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <errno+0x1>
    ecf8:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <errno>
    ecfc:	41 15       	cp	r20, r1
    ecfe:	51 05       	cpc	r21, r1
    ed00:	61 05       	cpc	r22, r1
    ed02:	71 05       	cpc	r23, r1
    ed04:	41 f4       	brne	.+16     	; 0xed16 <mkdir+0x28>
    ed06:	ce 01       	movw	r24, r28
    ed08:	0e 94 ca 64 	call	0xc994	; 0xc994 <f_mkdir>
    ed0c:	00 97       	sbiw	r24, 0x00	; 0
    ed0e:	39 f4       	brne	.+14     	; 0xed1e <mkdir+0x30>
    ed10:	80 e0       	ldi	r24, 0x00	; 0
    ed12:	90 e0       	ldi	r25, 0x00	; 0
    ed14:	17 c0       	rjmp	.+46     	; 0xed44 <mkdir+0x56>
    ed16:	9d df       	rcall	.-198    	; 0xec52 <chmod>
    ed18:	89 2b       	or	r24, r25
    ed1a:	a9 f3       	breq	.-22     	; 0xed06 <mkdir+0x18>
    ed1c:	11 c0       	rjmp	.+34     	; 0xed40 <mkdir+0x52>
    ed1e:	84 31       	cpi	r24, 0x14	; 20
    ed20:	91 05       	cpc	r25, r1
    ed22:	40 f4       	brcc	.+16     	; 0xed34 <mkdir+0x46>
    ed24:	fc 01       	movw	r30, r24
    ed26:	ea 55       	subi	r30, 0x5A	; 90
    ed28:	f4 4f       	sbci	r31, 0xF4	; 244
    ed2a:	80 81       	ld	r24, Z
    ed2c:	08 2e       	mov	r0, r24
    ed2e:	00 0c       	add	r0, r0
    ed30:	99 0b       	sbc	r25, r25
    ed32:	02 c0       	rjmp	.+4      	; 0xed38 <mkdir+0x4a>
    ed34:	83 e2       	ldi	r24, 0x23	; 35
    ed36:	90 e0       	ldi	r25, 0x00	; 0
    ed38:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    ed3c:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    ed40:	8f ef       	ldi	r24, 0xFF	; 255
    ed42:	9f ef       	ldi	r25, 0xFF	; 255
    ed44:	df 91       	pop	r29
    ed46:	cf 91       	pop	r28
    ed48:	08 95       	ret

0000ed4a <rename>:
    ed4a:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <errno+0x1>
    ed4e:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <errno>
    ed52:	0e 94 ba 65 	call	0xcb74	; 0xcb74 <f_rename>
    ed56:	00 97       	sbiw	r24, 0x00	; 0
    ed58:	a1 f0       	breq	.+40     	; 0xed82 <rename+0x38>
    ed5a:	84 31       	cpi	r24, 0x14	; 20
    ed5c:	91 05       	cpc	r25, r1
    ed5e:	40 f4       	brcc	.+16     	; 0xed70 <rename+0x26>
    ed60:	fc 01       	movw	r30, r24
    ed62:	ea 55       	subi	r30, 0x5A	; 90
    ed64:	f4 4f       	sbci	r31, 0xF4	; 244
    ed66:	80 81       	ld	r24, Z
    ed68:	08 2e       	mov	r0, r24
    ed6a:	00 0c       	add	r0, r0
    ed6c:	99 0b       	sbc	r25, r25
    ed6e:	02 c0       	rjmp	.+4      	; 0xed74 <rename+0x2a>
    ed70:	83 e2       	ldi	r24, 0x23	; 35
    ed72:	90 e0       	ldi	r25, 0x00	; 0
    ed74:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    ed78:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    ed7c:	8f ef       	ldi	r24, 0xFF	; 255
    ed7e:	9f ef       	ldi	r25, 0xFF	; 255
    ed80:	08 95       	ret
    ed82:	80 e0       	ldi	r24, 0x00	; 0
    ed84:	90 e0       	ldi	r25, 0x00	; 0
    ed86:	08 95       	ret

0000ed88 <unlink>:
    ed88:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <errno+0x1>
    ed8c:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <errno>
    ed90:	0e 94 23 64 	call	0xc846	; 0xc846 <f_unlink>
    ed94:	00 97       	sbiw	r24, 0x00	; 0
    ed96:	a1 f0       	breq	.+40     	; 0xedc0 <unlink+0x38>
    ed98:	84 31       	cpi	r24, 0x14	; 20
    ed9a:	91 05       	cpc	r25, r1
    ed9c:	40 f4       	brcc	.+16     	; 0xedae <unlink+0x26>
    ed9e:	fc 01       	movw	r30, r24
    eda0:	ea 55       	subi	r30, 0x5A	; 90
    eda2:	f4 4f       	sbci	r31, 0xF4	; 244
    eda4:	80 81       	ld	r24, Z
    eda6:	08 2e       	mov	r0, r24
    eda8:	00 0c       	add	r0, r0
    edaa:	99 0b       	sbc	r25, r25
    edac:	02 c0       	rjmp	.+4      	; 0xedb2 <unlink+0x2a>
    edae:	83 e2       	ldi	r24, 0x23	; 35
    edb0:	90 e0       	ldi	r25, 0x00	; 0
    edb2:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    edb6:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    edba:	8f ef       	ldi	r24, 0xFF	; 255
    edbc:	9f ef       	ldi	r25, 0xFF	; 255
    edbe:	08 95       	ret
    edc0:	80 e0       	ldi	r24, 0x00	; 0
    edc2:	90 e0       	ldi	r25, 0x00	; 0
    edc4:	08 95       	ret

0000edc6 <rmdir>:
    edc6:	e0 cf       	rjmp	.-64     	; 0xed88 <unlink>
    edc8:	08 95       	ret

0000edca <closedir>:
    edca:	0e 94 ac 62 	call	0xc558	; 0xc558 <f_closedir>
    edce:	00 97       	sbiw	r24, 0x00	; 0
    edd0:	a1 f0       	breq	.+40     	; 0xedfa <closedir+0x30>
    edd2:	84 31       	cpi	r24, 0x14	; 20
    edd4:	91 05       	cpc	r25, r1
    edd6:	40 f4       	brcc	.+16     	; 0xede8 <closedir+0x1e>
    edd8:	fc 01       	movw	r30, r24
    edda:	ea 55       	subi	r30, 0x5A	; 90
    eddc:	f4 4f       	sbci	r31, 0xF4	; 244
    edde:	80 81       	ld	r24, Z
    ede0:	08 2e       	mov	r0, r24
    ede2:	00 0c       	add	r0, r0
    ede4:	99 0b       	sbc	r25, r25
    ede6:	02 c0       	rjmp	.+4      	; 0xedec <closedir+0x22>
    ede8:	83 e2       	ldi	r24, 0x23	; 35
    edea:	90 e0       	ldi	r25, 0x00	; 0
    edec:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    edf0:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    edf4:	8f ef       	ldi	r24, 0xFF	; 255
    edf6:	9f ef       	ldi	r25, 0xFF	; 255
    edf8:	08 95       	ret
    edfa:	80 e0       	ldi	r24, 0x00	; 0
    edfc:	90 e0       	ldi	r25, 0x00	; 0
    edfe:	08 95       	ret

0000ee00 <opendir>:
    ee00:	bc 01       	movw	r22, r24
    ee02:	8d e2       	ldi	r24, 0x2D	; 45
    ee04:	99 e1       	ldi	r25, 0x19	; 25
    ee06:	0e 94 3b 62 	call	0xc476	; 0xc476 <f_opendir>
    ee0a:	00 97       	sbiw	r24, 0x00	; 0
    ee0c:	a1 f0       	breq	.+40     	; 0xee36 <opendir+0x36>
    ee0e:	84 31       	cpi	r24, 0x14	; 20
    ee10:	91 05       	cpc	r25, r1
    ee12:	40 f4       	brcc	.+16     	; 0xee24 <opendir+0x24>
    ee14:	fc 01       	movw	r30, r24
    ee16:	ea 55       	subi	r30, 0x5A	; 90
    ee18:	f4 4f       	sbci	r31, 0xF4	; 244
    ee1a:	80 81       	ld	r24, Z
    ee1c:	08 2e       	mov	r0, r24
    ee1e:	00 0c       	add	r0, r0
    ee20:	99 0b       	sbc	r25, r25
    ee22:	02 c0       	rjmp	.+4      	; 0xee28 <opendir+0x28>
    ee24:	83 e2       	ldi	r24, 0x23	; 35
    ee26:	90 e0       	ldi	r25, 0x00	; 0
    ee28:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    ee2c:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    ee30:	80 e0       	ldi	r24, 0x00	; 0
    ee32:	90 e0       	ldi	r25, 0x00	; 0
    ee34:	08 95       	ret
    ee36:	8d e2       	ldi	r24, 0x2D	; 45
    ee38:	99 e1       	ldi	r25, 0x19	; 25
    ee3a:	08 95       	ret

0000ee3c <readdir>:
    ee3c:	a6 e1       	ldi	r26, 0x16	; 22
    ee3e:	b1 e0       	ldi	r27, 0x01	; 1
    ee40:	e4 e2       	ldi	r30, 0x24	; 36
    ee42:	f7 e7       	ldi	r31, 0x77	; 119
    ee44:	0c 94 4c e3 	jmp	0x1c698	; 0x1c698 <__prologue_saves__+0x1c>
    ee48:	10 92 2e 18 	sts	0x182E, r1	; 0x80182e <_de>
    ee4c:	be 01       	movw	r22, r28
    ee4e:	6f 5f       	subi	r22, 0xFF	; 255
    ee50:	7f 4f       	sbci	r23, 0xFF	; 255
    ee52:	0e 94 c1 62 	call	0xc582	; 0xc582 <f_readdir>
    ee56:	00 97       	sbiw	r24, 0x00	; 0
    ee58:	a1 f0       	breq	.+40     	; 0xee82 <readdir+0x46>
    ee5a:	84 31       	cpi	r24, 0x14	; 20
    ee5c:	91 05       	cpc	r25, r1
    ee5e:	40 f4       	brcc	.+16     	; 0xee70 <readdir+0x34>
    ee60:	fc 01       	movw	r30, r24
    ee62:	ea 55       	subi	r30, 0x5A	; 90
    ee64:	f4 4f       	sbci	r31, 0xF4	; 244
    ee66:	80 81       	ld	r24, Z
    ee68:	08 2e       	mov	r0, r24
    ee6a:	00 0c       	add	r0, r0
    ee6c:	99 0b       	sbc	r25, r25
    ee6e:	02 c0       	rjmp	.+4      	; 0xee74 <readdir+0x38>
    ee70:	83 e2       	ldi	r24, 0x23	; 35
    ee72:	90 e0       	ldi	r25, 0x00	; 0
    ee74:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    ee78:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    ee7c:	80 e0       	ldi	r24, 0x00	; 0
    ee7e:	90 e0       	ldi	r25, 0x00	; 0
    ee80:	16 c0       	rjmp	.+44     	; 0xeeae <readdir+0x72>
    ee82:	be 01       	movw	r22, r28
    ee84:	69 5e       	subi	r22, 0xE9	; 233
    ee86:	7f 4f       	sbci	r23, 0xFF	; 255
    ee88:	fb 01       	movw	r30, r22
    ee8a:	01 90       	ld	r0, Z+
    ee8c:	00 20       	and	r0, r0
    ee8e:	e9 f7       	brne	.-6      	; 0xee8a <readdir+0x4e>
    ee90:	31 97       	sbiw	r30, 0x01	; 1
    ee92:	8f 01       	movw	r16, r30
    ee94:	06 1b       	sub	r16, r22
    ee96:	17 0b       	sbc	r17, r23
    ee98:	a8 01       	movw	r20, r16
    ee9a:	8e e2       	ldi	r24, 0x2E	; 46
    ee9c:	98 e1       	ldi	r25, 0x18	; 24
    ee9e:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <strncpy>
    eea2:	f8 01       	movw	r30, r16
    eea4:	e2 5d       	subi	r30, 0xD2	; 210
    eea6:	f7 4e       	sbci	r31, 0xE7	; 231
    eea8:	10 82       	st	Z, r1
    eeaa:	8e e2       	ldi	r24, 0x2E	; 46
    eeac:	98 e1       	ldi	r25, 0x18	; 24
    eeae:	ca 5e       	subi	r28, 0xEA	; 234
    eeb0:	de 4f       	sbci	r29, 0xFE	; 254
    eeb2:	e4 e0       	ldi	r30, 0x04	; 4
    eeb4:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

0000eeb8 <perror>:
    eeb8:	ad b7       	in	r26, 0x3d	; 61
    eeba:	be b7       	in	r27, 0x3e	; 62
    eebc:	17 97       	sbiw	r26, 0x07	; 7
    eebe:	0f b6       	in	r0, 0x3f	; 63
    eec0:	f8 94       	cli
    eec2:	be bf       	out	0x3e, r27	; 62
    eec4:	0f be       	out	0x3f, r0	; 63
    eec6:	ad bf       	out	0x3d, r26	; 61
    eec8:	20 91 ba 1c 	lds	r18, 0x1CBA	; 0x801cba <errno>
    eecc:	30 91 bb 1c 	lds	r19, 0x1CBB	; 0x801cbb <errno+0x1>
    eed0:	23 32       	cpi	r18, 0x23	; 35
    eed2:	31 05       	cpc	r19, r1
    eed4:	40 f4       	brcc	.+16     	; 0xeee6 <perror+0x2e>
    eed6:	22 0f       	add	r18, r18
    eed8:	33 1f       	adc	r19, r19
    eeda:	f9 01       	movw	r30, r18
    eedc:	ea 5c       	subi	r30, 0xCA	; 202
    eede:	fe 4f       	sbci	r31, 0xFE	; 254
    eee0:	20 81       	ld	r18, Z
    eee2:	31 81       	ldd	r19, Z+1	; 0x01
    eee4:	04 c0       	rjmp	.+8      	; 0xeeee <perror+0x36>
    eee6:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    eeea:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    eeee:	00 97       	sbiw	r24, 0x00	; 0
    eef0:	99 f0       	breq	.+38     	; 0xef18 <perror+0x60>
    eef2:	fc 01       	movw	r30, r24
    eef4:	40 81       	ld	r20, Z
    eef6:	44 23       	and	r20, r20
    eef8:	79 f0       	breq	.+30     	; 0xef18 <perror+0x60>
    eefa:	ed b7       	in	r30, 0x3d	; 61
    eefc:	fe b7       	in	r31, 0x3e	; 62
    eefe:	37 83       	std	Z+7, r19	; 0x07
    ef00:	26 83       	std	Z+6, r18	; 0x06
    ef02:	95 83       	std	Z+5, r25	; 0x05
    ef04:	84 83       	std	Z+4, r24	; 0x04
    ef06:	83 e8       	ldi	r24, 0x83	; 131
    ef08:	9b e0       	ldi	r25, 0x0B	; 11
    ef0a:	a0 e0       	ldi	r26, 0x00	; 0
    ef0c:	81 83       	std	Z+1, r24	; 0x01
    ef0e:	92 83       	std	Z+2, r25	; 0x02
    ef10:	a3 83       	std	Z+3, r26	; 0x03
    ef12:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    ef16:	0c c0       	rjmp	.+24     	; 0xef30 <perror+0x78>
    ef18:	ed b7       	in	r30, 0x3d	; 61
    ef1a:	fe b7       	in	r31, 0x3e	; 62
    ef1c:	35 83       	std	Z+5, r19	; 0x05
    ef1e:	24 83       	std	Z+4, r18	; 0x04
    ef20:	8f e7       	ldi	r24, 0x7F	; 127
    ef22:	9b e0       	ldi	r25, 0x0B	; 11
    ef24:	a0 e0       	ldi	r26, 0x00	; 0
    ef26:	81 83       	std	Z+1, r24	; 0x01
    ef28:	92 83       	std	Z+2, r25	; 0x02
    ef2a:	a3 83       	std	Z+3, r26	; 0x03
    ef2c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    ef30:	ad b7       	in	r26, 0x3d	; 61
    ef32:	be b7       	in	r27, 0x3e	; 62
    ef34:	17 96       	adiw	r26, 0x07	; 7
    ef36:	0f b6       	in	r0, 0x3f	; 63
    ef38:	f8 94       	cli
    ef3a:	be bf       	out	0x3e, r27	; 62
    ef3c:	0f be       	out	0x3f, r0	; 63
    ef3e:	ad bf       	out	0x3d, r26	; 61
    ef40:	08 95       	ret

0000ef42 <fdevopen>:
    ef42:	0f 93       	push	r16
    ef44:	1f 93       	push	r17
    ef46:	cf 93       	push	r28
    ef48:	df 93       	push	r29
    ef4a:	00 97       	sbiw	r24, 0x00	; 0
    ef4c:	31 f4       	brne	.+12     	; 0xef5a <fdevopen+0x18>
    ef4e:	61 15       	cp	r22, r1
    ef50:	71 05       	cpc	r23, r1
    ef52:	19 f4       	brne	.+6      	; 0xef5a <fdevopen+0x18>
    ef54:	80 e0       	ldi	r24, 0x00	; 0
    ef56:	90 e0       	ldi	r25, 0x00	; 0
    ef58:	3a c0       	rjmp	.+116    	; 0xefce <fdevopen+0x8c>
    ef5a:	8b 01       	movw	r16, r22
    ef5c:	ec 01       	movw	r28, r24
    ef5e:	6e e0       	ldi	r22, 0x0E	; 14
    ef60:	70 e0       	ldi	r23, 0x00	; 0
    ef62:	81 e0       	ldi	r24, 0x01	; 1
    ef64:	90 e0       	ldi	r25, 0x00	; 0
    ef66:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <safecalloc>
    ef6a:	fc 01       	movw	r30, r24
    ef6c:	89 2b       	or	r24, r25
    ef6e:	91 f3       	breq	.-28     	; 0xef54 <fdevopen+0x12>
    ef70:	80 e8       	ldi	r24, 0x80	; 128
    ef72:	83 83       	std	Z+3, r24	; 0x03
    ef74:	01 15       	cp	r16, r1
    ef76:	11 05       	cpc	r17, r1
    ef78:	71 f0       	breq	.+28     	; 0xef96 <fdevopen+0x54>
    ef7a:	13 87       	std	Z+11, r17	; 0x0b
    ef7c:	02 87       	std	Z+10, r16	; 0x0a
    ef7e:	81 e8       	ldi	r24, 0x81	; 129
    ef80:	83 83       	std	Z+3, r24	; 0x03
    ef82:	80 91 bc 1c 	lds	r24, 0x1CBC	; 0x801cbc <__iob>
    ef86:	90 91 bd 1c 	lds	r25, 0x1CBD	; 0x801cbd <__iob+0x1>
    ef8a:	89 2b       	or	r24, r25
    ef8c:	21 f4       	brne	.+8      	; 0xef96 <fdevopen+0x54>
    ef8e:	f0 93 bd 1c 	sts	0x1CBD, r31	; 0x801cbd <__iob+0x1>
    ef92:	e0 93 bc 1c 	sts	0x1CBC, r30	; 0x801cbc <__iob>
    ef96:	20 97       	sbiw	r28, 0x00	; 0
    ef98:	c9 f0       	breq	.+50     	; 0xefcc <fdevopen+0x8a>
    ef9a:	d1 87       	std	Z+9, r29	; 0x09
    ef9c:	c0 87       	std	Z+8, r28	; 0x08
    ef9e:	83 81       	ldd	r24, Z+3	; 0x03
    efa0:	82 60       	ori	r24, 0x02	; 2
    efa2:	83 83       	std	Z+3, r24	; 0x03
    efa4:	80 91 be 1c 	lds	r24, 0x1CBE	; 0x801cbe <__iob+0x2>
    efa8:	90 91 bf 1c 	lds	r25, 0x1CBF	; 0x801cbf <__iob+0x3>
    efac:	89 2b       	or	r24, r25
    efae:	21 f4       	brne	.+8      	; 0xefb8 <fdevopen+0x76>
    efb0:	f0 93 bf 1c 	sts	0x1CBF, r31	; 0x801cbf <__iob+0x3>
    efb4:	e0 93 be 1c 	sts	0x1CBE, r30	; 0x801cbe <__iob+0x2>
    efb8:	80 91 c0 1c 	lds	r24, 0x1CC0	; 0x801cc0 <__iob+0x4>
    efbc:	90 91 c1 1c 	lds	r25, 0x1CC1	; 0x801cc1 <__iob+0x5>
    efc0:	89 2b       	or	r24, r25
    efc2:	21 f4       	brne	.+8      	; 0xefcc <fdevopen+0x8a>
    efc4:	f0 93 c1 1c 	sts	0x1CC1, r31	; 0x801cc1 <__iob+0x5>
    efc8:	e0 93 c0 1c 	sts	0x1CC0, r30	; 0x801cc0 <__iob+0x4>
    efcc:	cf 01       	movw	r24, r30
    efce:	df 91       	pop	r29
    efd0:	cf 91       	pop	r28
    efd2:	1f 91       	pop	r17
    efd4:	0f 91       	pop	r16
    efd6:	08 95       	ret

0000efd8 <fat_time_to_unix>:
    efd8:	a6 e1       	ldi	r26, 0x16	; 22
    efda:	b0 e0       	ldi	r27, 0x00	; 0
    efdc:	e2 ef       	ldi	r30, 0xF2	; 242
    efde:	f7 e7       	ldi	r31, 0x77	; 119
    efe0:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
    efe4:	fe 01       	movw	r30, r28
    efe6:	31 96       	adiw	r30, 0x01	; 1
    efe8:	26 e1       	ldi	r18, 0x16	; 22
    efea:	df 01       	movw	r26, r30
    efec:	1d 92       	st	X+, r1
    efee:	2a 95       	dec	r18
    eff0:	e9 f7       	brne	.-6      	; 0xefec <fat_time_to_unix+0x14>
    eff2:	9b 01       	movw	r18, r22
    eff4:	22 0f       	add	r18, r18
    eff6:	33 1f       	adc	r19, r19
    eff8:	2e 73       	andi	r18, 0x3E	; 62
    effa:	33 27       	eor	r19, r19
    effc:	3a 83       	std	Y+2, r19	; 0x02
    effe:	29 83       	std	Y+1, r18	; 0x01
    f000:	9b 01       	movw	r18, r22
    f002:	55 e0       	ldi	r21, 0x05	; 5
    f004:	36 95       	lsr	r19
    f006:	27 95       	ror	r18
    f008:	5a 95       	dec	r21
    f00a:	e1 f7       	brne	.-8      	; 0xf004 <fat_time_to_unix+0x2c>
    f00c:	2f 73       	andi	r18, 0x3F	; 63
    f00e:	33 27       	eor	r19, r19
    f010:	3c 83       	std	Y+4, r19	; 0x04
    f012:	2b 83       	std	Y+3, r18	; 0x03
    f014:	27 2f       	mov	r18, r23
    f016:	26 95       	lsr	r18
    f018:	26 95       	lsr	r18
    f01a:	26 95       	lsr	r18
    f01c:	2d 83       	std	Y+5, r18	; 0x05
    f01e:	1e 82       	std	Y+6, r1	; 0x06
    f020:	9c 01       	movw	r18, r24
    f022:	2f 71       	andi	r18, 0x1F	; 31
    f024:	33 27       	eor	r19, r19
    f026:	38 87       	std	Y+8, r19	; 0x08
    f028:	2f 83       	std	Y+7, r18	; 0x07
    f02a:	9c 01       	movw	r18, r24
    f02c:	65 e0       	ldi	r22, 0x05	; 5
    f02e:	36 95       	lsr	r19
    f030:	27 95       	ror	r18
    f032:	6a 95       	dec	r22
    f034:	e1 f7       	brne	.-8      	; 0xf02e <fat_time_to_unix+0x56>
    f036:	2f 70       	andi	r18, 0x0F	; 15
    f038:	33 27       	eor	r19, r19
    f03a:	21 50       	subi	r18, 0x01	; 1
    f03c:	31 09       	sbc	r19, r1
    f03e:	3a 87       	std	Y+10, r19	; 0x0a
    f040:	29 87       	std	Y+9, r18	; 0x09
    f042:	9c 01       	movw	r18, r24
    f044:	23 2f       	mov	r18, r19
    f046:	33 27       	eor	r19, r19
    f048:	26 95       	lsr	r18
    f04a:	20 5b       	subi	r18, 0xB0	; 176
    f04c:	3f 4f       	sbci	r19, 0xFF	; 255
    f04e:	3c 87       	std	Y+12, r19	; 0x0c
    f050:	2b 87       	std	Y+11, r18	; 0x0b
    f052:	cf 01       	movw	r24, r30
    f054:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <timegm>
    f058:	66 96       	adiw	r28, 0x16	; 22
    f05a:	e2 e0       	ldi	r30, 0x02	; 2
    f05c:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

0000f060 <stat>:
    f060:	a6 e1       	ldi	r26, 0x16	; 22
    f062:	b1 e0       	ldi	r27, 0x01	; 1
    f064:	e6 e3       	ldi	r30, 0x36	; 54
    f066:	f8 e7       	ldi	r31, 0x78	; 120
    f068:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
    f06c:	6c 01       	movw	r12, r24
    f06e:	8b 01       	movw	r16, r22
    f070:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <errno+0x1>
    f074:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <errno>
    f078:	6c ef       	ldi	r22, 0xFC	; 252
    f07a:	78 e0       	ldi	r23, 0x08	; 8
    f07c:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
    f080:	89 2b       	or	r24, r25
    f082:	01 f1       	breq	.+64     	; 0xf0c4 <stat+0x64>
    f084:	f8 01       	movw	r30, r16
    f086:	14 a2       	std	Z+36, r1	; 0x24
    f088:	15 a2       	std	Z+37, r1	; 0x25
    f08a:	16 a2       	std	Z+38, r1	; 0x26
    f08c:	17 a2       	std	Z+39, r1	; 0x27
    f08e:	10 a6       	std	Z+40, r1	; 0x28
    f090:	11 a6       	std	Z+41, r1	; 0x29
    f092:	12 a6       	std	Z+42, r1	; 0x2a
    f094:	13 a6       	std	Z+43, r1	; 0x2b
    f096:	14 a6       	std	Z+44, r1	; 0x2c
    f098:	15 a6       	std	Z+45, r1	; 0x2d
    f09a:	16 a6       	std	Z+46, r1	; 0x2e
    f09c:	17 a6       	std	Z+47, r1	; 0x2f
    f09e:	11 8a       	std	Z+17, r1	; 0x11
    f0a0:	10 8a       	std	Z+16, r1	; 0x10
    f0a2:	13 8a       	std	Z+19, r1	; 0x13
    f0a4:	12 8a       	std	Z+18, r1	; 0x12
    f0a6:	10 8e       	std	Z+24, r1	; 0x18
    f0a8:	11 8e       	std	Z+25, r1	; 0x19
    f0aa:	12 8e       	std	Z+26, r1	; 0x1a
    f0ac:	13 8e       	std	Z+27, r1	; 0x1b
    f0ae:	80 e0       	ldi	r24, 0x00	; 0
    f0b0:	90 e4       	ldi	r25, 0x40	; 64
    f0b2:	a0 e0       	ldi	r26, 0x00	; 0
    f0b4:	b0 e0       	ldi	r27, 0x00	; 0
    f0b6:	80 87       	std	Z+8, r24	; 0x08
    f0b8:	91 87       	std	Z+9, r25	; 0x09
    f0ba:	a2 87       	std	Z+10, r26	; 0x0a
    f0bc:	b3 87       	std	Z+11, r27	; 0x0b
    f0be:	e1 2c       	mov	r14, r1
    f0c0:	f1 2c       	mov	r15, r1
    f0c2:	62 c0       	rjmp	.+196    	; 0xf188 <stat+0x128>
    f0c4:	66 ea       	ldi	r22, 0xA6	; 166
    f0c6:	78 e0       	ldi	r23, 0x08	; 8
    f0c8:	c6 01       	movw	r24, r12
    f0ca:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
    f0ce:	89 2b       	or	r24, r25
    f0d0:	c9 f6       	brne	.-78     	; 0xf084 <stat+0x24>
    f0d2:	6d ef       	ldi	r22, 0xFD	; 253
    f0d4:	72 e1       	ldi	r23, 0x12	; 18
    f0d6:	c6 01       	movw	r24, r12
    f0d8:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
    f0dc:	7c 01       	movw	r14, r24
    f0de:	89 2b       	or	r24, r25
    f0e0:	89 f6       	brne	.-94     	; 0xf084 <stat+0x24>
    f0e2:	be 01       	movw	r22, r28
    f0e4:	6f 5f       	subi	r22, 0xFF	; 255
    f0e6:	7f 4f       	sbci	r23, 0xFF	; 255
    f0e8:	c6 01       	movw	r24, r12
    f0ea:	0e 94 05 63 	call	0xc60a	; 0xc60a <f_stat>
    f0ee:	00 97       	sbiw	r24, 0x00	; 0
    f0f0:	a9 f0       	breq	.+42     	; 0xf11c <stat+0xbc>
    f0f2:	84 31       	cpi	r24, 0x14	; 20
    f0f4:	91 05       	cpc	r25, r1
    f0f6:	40 f4       	brcc	.+16     	; 0xf108 <stat+0xa8>
    f0f8:	fc 01       	movw	r30, r24
    f0fa:	ea 55       	subi	r30, 0x5A	; 90
    f0fc:	f4 4f       	sbci	r31, 0xF4	; 244
    f0fe:	80 81       	ld	r24, Z
    f100:	08 2e       	mov	r0, r24
    f102:	00 0c       	add	r0, r0
    f104:	99 0b       	sbc	r25, r25
    f106:	02 c0       	rjmp	.+4      	; 0xf10c <stat+0xac>
    f108:	83 e2       	ldi	r24, 0x23	; 35
    f10a:	90 e0       	ldi	r25, 0x00	; 0
    f10c:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    f110:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    f114:	ee 24       	eor	r14, r14
    f116:	ea 94       	dec	r14
    f118:	fe 2c       	mov	r15, r14
    f11a:	36 c0       	rjmp	.+108    	; 0xf188 <stat+0x128>
    f11c:	89 81       	ldd	r24, Y+1	; 0x01
    f11e:	9a 81       	ldd	r25, Y+2	; 0x02
    f120:	ab 81       	ldd	r26, Y+3	; 0x03
    f122:	bc 81       	ldd	r27, Y+4	; 0x04
    f124:	f8 01       	movw	r30, r16
    f126:	80 8f       	std	Z+24, r24	; 0x18
    f128:	91 8f       	std	Z+25, r25	; 0x19
    f12a:	a2 8f       	std	Z+26, r26	; 0x1a
    f12c:	b3 8f       	std	Z+27, r27	; 0x1b
    f12e:	6f 81       	ldd	r22, Y+7	; 0x07
    f130:	78 85       	ldd	r23, Y+8	; 0x08
    f132:	8d 81       	ldd	r24, Y+5	; 0x05
    f134:	9e 81       	ldd	r25, Y+6	; 0x06
    f136:	50 df       	rcall	.-352    	; 0xefd8 <fat_time_to_unix>
    f138:	f8 01       	movw	r30, r16
    f13a:	64 a3       	std	Z+36, r22	; 0x24
    f13c:	75 a3       	std	Z+37, r23	; 0x25
    f13e:	86 a3       	std	Z+38, r24	; 0x26
    f140:	97 a3       	std	Z+39, r25	; 0x27
    f142:	60 a7       	std	Z+40, r22	; 0x28
    f144:	71 a7       	std	Z+41, r23	; 0x29
    f146:	82 a7       	std	Z+42, r24	; 0x2a
    f148:	93 a7       	std	Z+43, r25	; 0x2b
    f14a:	64 a7       	std	Z+44, r22	; 0x2c
    f14c:	75 a7       	std	Z+45, r23	; 0x2d
    f14e:	86 a7       	std	Z+46, r24	; 0x2e
    f150:	97 a7       	std	Z+47, r25	; 0x2f
    f152:	29 85       	ldd	r18, Y+9	; 0x09
    f154:	20 fd       	sbrc	r18, 0
    f156:	03 c0       	rjmp	.+6      	; 0xf15e <stat+0xfe>
    f158:	8f ef       	ldi	r24, 0xFF	; 255
    f15a:	91 e0       	ldi	r25, 0x01	; 1
    f15c:	02 c0       	rjmp	.+4      	; 0xf162 <stat+0x102>
    f15e:	8d e6       	ldi	r24, 0x6D	; 109
    f160:	91 e0       	ldi	r25, 0x01	; 1
    f162:	48 ee       	ldi	r20, 0xE8	; 232
    f164:	53 e0       	ldi	r21, 0x03	; 3
    f166:	f8 01       	movw	r30, r16
    f168:	51 8b       	std	Z+17, r21	; 0x11
    f16a:	40 8b       	std	Z+16, r20	; 0x10
    f16c:	53 8b       	std	Z+19, r21	; 0x13
    f16e:	42 8b       	std	Z+18, r20	; 0x12
    f170:	24 ff       	sbrs	r18, 4
    f172:	02 c0       	rjmp	.+4      	; 0xf178 <stat+0x118>
    f174:	90 64       	ori	r25, 0x40	; 64
    f176:	01 c0       	rjmp	.+2      	; 0xf17a <stat+0x11a>
    f178:	90 68       	ori	r25, 0x80	; 128
    f17a:	a0 e0       	ldi	r26, 0x00	; 0
    f17c:	b0 e0       	ldi	r27, 0x00	; 0
    f17e:	f8 01       	movw	r30, r16
    f180:	80 87       	std	Z+8, r24	; 0x08
    f182:	91 87       	std	Z+9, r25	; 0x09
    f184:	a2 87       	std	Z+10, r26	; 0x0a
    f186:	b3 87       	std	Z+11, r27	; 0x0b
    f188:	c7 01       	movw	r24, r14
    f18a:	ca 5e       	subi	r28, 0xEA	; 234
    f18c:	de 4f       	sbci	r29, 0xFE	; 254
    f18e:	e8 e0       	ldi	r30, 0x08	; 8
    f190:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

0000f194 <unix_time_to_fat>:
    f194:	a4 e0       	ldi	r26, 0x04	; 4
    f196:	b0 e0       	ldi	r27, 0x00	; 0
    f198:	e0 ed       	ldi	r30, 0xD0	; 208
    f19a:	f8 e7       	ldi	r31, 0x78	; 120
    f19c:	0c 94 4a e3 	jmp	0x1c694	; 0x1c694 <__prologue_saves__+0x18>
    f1a0:	69 83       	std	Y+1, r22	; 0x01
    f1a2:	7a 83       	std	Y+2, r23	; 0x02
    f1a4:	8b 83       	std	Y+3, r24	; 0x03
    f1a6:	9c 83       	std	Y+4, r25	; 0x04
    f1a8:	7a 01       	movw	r14, r20
    f1aa:	89 01       	movw	r16, r18
    f1ac:	ce 01       	movw	r24, r28
    f1ae:	01 96       	adiw	r24, 0x01	; 1
    f1b0:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <gmtime>
    f1b4:	fc 01       	movw	r30, r24
    f1b6:	22 85       	ldd	r18, Z+10	; 0x0a
    f1b8:	33 85       	ldd	r19, Z+11	; 0x0b
    f1ba:	20 55       	subi	r18, 0x50	; 80
    f1bc:	31 09       	sbc	r19, r1
    f1be:	c9 01       	movw	r24, r18
    f1c0:	98 2f       	mov	r25, r24
    f1c2:	88 27       	eor	r24, r24
    f1c4:	99 0f       	add	r25, r25
    f1c6:	20 85       	ldd	r18, Z+8	; 0x08
    f1c8:	31 85       	ldd	r19, Z+9	; 0x09
    f1ca:	2f 5f       	subi	r18, 0xFF	; 255
    f1cc:	3f 4f       	sbci	r19, 0xFF	; 255
    f1ce:	45 e0       	ldi	r20, 0x05	; 5
    f1d0:	22 0f       	add	r18, r18
    f1d2:	33 1f       	adc	r19, r19
    f1d4:	4a 95       	dec	r20
    f1d6:	e1 f7       	brne	.-8      	; 0xf1d0 <unix_time_to_fat+0x3c>
    f1d8:	28 2b       	or	r18, r24
    f1da:	39 2b       	or	r19, r25
    f1dc:	86 81       	ldd	r24, Z+6	; 0x06
    f1de:	97 81       	ldd	r25, Z+7	; 0x07
    f1e0:	28 2b       	or	r18, r24
    f1e2:	39 2b       	or	r19, r25
    f1e4:	d7 01       	movw	r26, r14
    f1e6:	2d 93       	st	X+, r18
    f1e8:	3c 93       	st	X, r19
    f1ea:	84 81       	ldd	r24, Z+4	; 0x04
    f1ec:	20 e0       	ldi	r18, 0x00	; 0
    f1ee:	30 e0       	ldi	r19, 0x00	; 0
    f1f0:	38 2f       	mov	r19, r24
    f1f2:	33 0f       	add	r19, r19
    f1f4:	33 0f       	add	r19, r19
    f1f6:	33 0f       	add	r19, r19
    f1f8:	82 81       	ldd	r24, Z+2	; 0x02
    f1fa:	93 81       	ldd	r25, Z+3	; 0x03
    f1fc:	55 e0       	ldi	r21, 0x05	; 5
    f1fe:	88 0f       	add	r24, r24
    f200:	99 1f       	adc	r25, r25
    f202:	5a 95       	dec	r21
    f204:	e1 f7       	brne	.-8      	; 0xf1fe <unix_time_to_fat+0x6a>
    f206:	82 2b       	or	r24, r18
    f208:	93 2b       	or	r25, r19
    f20a:	20 81       	ld	r18, Z
    f20c:	31 81       	ldd	r19, Z+1	; 0x01
    f20e:	36 95       	lsr	r19
    f210:	27 95       	ror	r18
    f212:	82 2b       	or	r24, r18
    f214:	93 2b       	or	r25, r19
    f216:	f8 01       	movw	r30, r16
    f218:	91 83       	std	Z+1, r25	; 0x01
    f21a:	80 83       	st	Z, r24
    f21c:	24 96       	adiw	r28, 0x04	; 4
    f21e:	e6 e0       	ldi	r30, 0x06	; 6
    f220:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

0000f224 <utime>:
    f224:	aa e1       	ldi	r26, 0x1A	; 26
    f226:	b1 e0       	ldi	r27, 0x01	; 1
    f228:	e8 e1       	ldi	r30, 0x18	; 24
    f22a:	f9 e7       	ldi	r31, 0x79	; 121
    f22c:	0c 94 4c e3 	jmp	0x1c698	; 0x1c698 <__prologue_saves__+0x1c>
    f230:	8c 01       	movw	r16, r24
    f232:	61 15       	cp	r22, r1
    f234:	71 05       	cpc	r23, r1
    f236:	31 f0       	breq	.+12     	; 0xf244 <utime+0x20>
    f238:	fb 01       	movw	r30, r22
    f23a:	64 81       	ldd	r22, Z+4	; 0x04
    f23c:	75 81       	ldd	r23, Z+5	; 0x05
    f23e:	86 81       	ldd	r24, Z+6	; 0x06
    f240:	97 81       	ldd	r25, Z+7	; 0x07
    f242:	04 c0       	rjmp	.+8      	; 0xf24c <utime+0x28>
    f244:	80 e0       	ldi	r24, 0x00	; 0
    f246:	90 e0       	ldi	r25, 0x00	; 0
    f248:	0e 94 05 36 	call	0x6c0a	; 0x6c0a <time>
    f24c:	9e 01       	movw	r18, r28
    f24e:	29 5e       	subi	r18, 0xE9	; 233
    f250:	3e 4f       	sbci	r19, 0xFE	; 254
    f252:	ae 01       	movw	r20, r28
    f254:	47 5e       	subi	r20, 0xE7	; 231
    f256:	5e 4f       	sbci	r21, 0xFE	; 254
    f258:	9d df       	rcall	.-198    	; 0xf194 <unix_time_to_fat>
    f25a:	c7 5e       	subi	r28, 0xE7	; 231
    f25c:	de 4f       	sbci	r29, 0xFE	; 254
    f25e:	88 81       	ld	r24, Y
    f260:	99 81       	ldd	r25, Y+1	; 0x01
    f262:	c9 51       	subi	r28, 0x19	; 25
    f264:	d1 40       	sbci	r29, 0x01	; 1
    f266:	9e 83       	std	Y+6, r25	; 0x06
    f268:	8d 83       	std	Y+5, r24	; 0x05
    f26a:	c9 5e       	subi	r28, 0xE9	; 233
    f26c:	de 4f       	sbci	r29, 0xFE	; 254
    f26e:	88 81       	ld	r24, Y
    f270:	99 81       	ldd	r25, Y+1	; 0x01
    f272:	c7 51       	subi	r28, 0x17	; 23
    f274:	d1 40       	sbci	r29, 0x01	; 1
    f276:	98 87       	std	Y+8, r25	; 0x08
    f278:	8f 83       	std	Y+7, r24	; 0x07
    f27a:	be 01       	movw	r22, r28
    f27c:	6f 5f       	subi	r22, 0xFF	; 255
    f27e:	7f 4f       	sbci	r23, 0xFF	; 255
    f280:	c8 01       	movw	r24, r16
    f282:	0e 94 1c 67 	call	0xce38	; 0xce38 <f_utime>
    f286:	84 31       	cpi	r24, 0x14	; 20
    f288:	91 05       	cpc	r25, r1
    f28a:	40 f4       	brcc	.+16     	; 0xf29c <utime+0x78>
    f28c:	fc 01       	movw	r30, r24
    f28e:	ea 55       	subi	r30, 0x5A	; 90
    f290:	f4 4f       	sbci	r31, 0xF4	; 244
    f292:	80 81       	ld	r24, Z
    f294:	08 2e       	mov	r0, r24
    f296:	00 0c       	add	r0, r0
    f298:	99 0b       	sbc	r25, r25
    f29a:	02 c0       	rjmp	.+4      	; 0xf2a0 <utime+0x7c>
    f29c:	83 e2       	ldi	r24, 0x23	; 35
    f29e:	90 e0       	ldi	r25, 0x00	; 0
    f2a0:	c6 5e       	subi	r28, 0xE6	; 230
    f2a2:	de 4f       	sbci	r29, 0xFE	; 254
    f2a4:	e4 e0       	ldi	r30, 0x04	; 4
    f2a6:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

0000f2aa <fileno_to_fatfs>:
    f2aa:	83 30       	cpi	r24, 0x03	; 3
    f2ac:	91 05       	cpc	r25, r1
    f2ae:	48 f4       	brcc	.+18     	; 0xf2c2 <fileno_to_fatfs+0x18>
    f2b0:	89 e0       	ldi	r24, 0x09	; 9
    f2b2:	90 e0       	ldi	r25, 0x00	; 0
    f2b4:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    f2b8:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    f2bc:	80 e0       	ldi	r24, 0x00	; 0
    f2be:	90 e0       	ldi	r25, 0x00	; 0
    f2c0:	08 95       	ret
    f2c2:	60 dc       	rcall	.-1856   	; 0xeb84 <fileno_to_stream>
    f2c4:	00 97       	sbiw	r24, 0x00	; 0
    f2c6:	d1 f3       	breq	.-12     	; 0xf2bc <fileno_to_fatfs+0x12>
    f2c8:	fc 01       	movw	r30, r24
    f2ca:	84 85       	ldd	r24, Z+12	; 0x0c
    f2cc:	95 85       	ldd	r25, Z+13	; 0x0d
    f2ce:	00 97       	sbiw	r24, 0x00	; 0
    f2d0:	79 f3       	breq	.-34     	; 0xf2b0 <fileno_to_fatfs+0x6>
    f2d2:	08 95       	ret

0000f2d4 <ftell>:
    f2d4:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <errno+0x1>
    f2d8:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <errno>
    f2dc:	37 dc       	rcall	.-1938   	; 0xeb4c <fileno>
    f2de:	83 30       	cpi	r24, 0x03	; 3
    f2e0:	91 05       	cpc	r25, r1
    f2e2:	48 f0       	brcs	.+18     	; 0xf2f6 <ftell+0x22>
    f2e4:	e2 df       	rcall	.-60     	; 0xf2aa <fileno_to_fatfs>
    f2e6:	00 97       	sbiw	r24, 0x00	; 0
    f2e8:	51 f4       	brne	.+20     	; 0xf2fe <ftell+0x2a>
    f2ea:	89 e0       	ldi	r24, 0x09	; 9
    f2ec:	90 e0       	ldi	r25, 0x00	; 0
    f2ee:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    f2f2:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    f2f6:	6f ef       	ldi	r22, 0xFF	; 255
    f2f8:	7f ef       	ldi	r23, 0xFF	; 255
    f2fa:	cb 01       	movw	r24, r22
    f2fc:	08 95       	ret
    f2fe:	fc 01       	movw	r30, r24
    f300:	60 89       	ldd	r22, Z+16	; 0x10
    f302:	71 89       	ldd	r23, Z+17	; 0x11
    f304:	82 89       	ldd	r24, Z+18	; 0x12
    f306:	93 89       	ldd	r25, Z+19	; 0x13
    f308:	08 95       	ret

0000f30a <lseek>:
    f30a:	a3 e0       	ldi	r26, 0x03	; 3
    f30c:	b0 e0       	ldi	r27, 0x00	; 0
    f30e:	eb e8       	ldi	r30, 0x8B	; 139
    f310:	f9 e7       	ldi	r31, 0x79	; 121
    f312:	0c 94 46 e3 	jmp	0x1c68c	; 0x1c68c <__prologue_saves__+0x10>
    f316:	5c 01       	movw	r10, r24
    f318:	6a 01       	movw	r12, r20
    f31a:	7b 01       	movw	r14, r22
    f31c:	89 01       	movw	r16, r18
    f31e:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <errno+0x1>
    f322:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <errno>
    f326:	c1 df       	rcall	.-126    	; 0xf2aa <fileno_to_fatfs>
    f328:	ec 01       	movw	r28, r24
    f32a:	89 2b       	or	r24, r25
    f32c:	19 f4       	brne	.+6      	; 0xf334 <lseek+0x2a>
    f32e:	88 e1       	ldi	r24, 0x18	; 24
    f330:	90 e0       	ldi	r25, 0x00	; 0
    f332:	26 c0       	rjmp	.+76     	; 0xf380 <lseek+0x76>
    f334:	83 e0       	ldi	r24, 0x03	; 3
    f336:	a8 16       	cp	r10, r24
    f338:	b1 04       	cpc	r11, r1
    f33a:	d0 f1       	brcs	.+116    	; 0xf3b0 <lseek+0xa6>
    f33c:	c5 01       	movw	r24, r10
    f33e:	22 dc       	rcall	.-1980   	; 0xeb84 <fileno_to_stream>
    f340:	fc 01       	movw	r30, r24
    f342:	93 81       	ldd	r25, Z+3	; 0x03
    f344:	90 64       	ori	r25, 0x40	; 64
    f346:	93 83       	std	Z+3, r25	; 0x03
    f348:	02 30       	cpi	r16, 0x02	; 2
    f34a:	11 05       	cpc	r17, r1
    f34c:	a9 f5       	brne	.+106    	; 0xf3b8 <lseek+0xae>
    f34e:	8a 85       	ldd	r24, Y+10	; 0x0a
    f350:	9b 85       	ldd	r25, Y+11	; 0x0b
    f352:	ac 85       	ldd	r26, Y+12	; 0x0c
    f354:	bd 85       	ldd	r27, Y+13	; 0x0d
    f356:	c8 0e       	add	r12, r24
    f358:	d9 1e       	adc	r13, r25
    f35a:	ea 1e       	adc	r14, r26
    f35c:	fb 1e       	adc	r15, r27
    f35e:	b7 01       	movw	r22, r14
    f360:	a6 01       	movw	r20, r12
    f362:	ce 01       	movw	r24, r28
    f364:	0e 94 7f 5f 	call	0xbefe	; 0xbefe <f_lseek>
    f368:	00 97       	sbiw	r24, 0x00	; 0
    f36a:	79 f0       	breq	.+30     	; 0xf38a <lseek+0x80>
    f36c:	84 31       	cpi	r24, 0x14	; 20
    f36e:	91 05       	cpc	r25, r1
    f370:	58 f5       	brcc	.+86     	; 0xf3c8 <lseek+0xbe>
    f372:	fc 01       	movw	r30, r24
    f374:	ea 55       	subi	r30, 0x5A	; 90
    f376:	f4 4f       	sbci	r31, 0xF4	; 244
    f378:	80 81       	ld	r24, Z
    f37a:	08 2e       	mov	r0, r24
    f37c:	00 0c       	add	r0, r0
    f37e:	99 0b       	sbc	r25, r25
    f380:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    f384:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    f388:	13 c0       	rjmp	.+38     	; 0xf3b0 <lseek+0xa6>
    f38a:	68 89       	ldd	r22, Y+16	; 0x10
    f38c:	79 89       	ldd	r23, Y+17	; 0x11
    f38e:	8a 89       	ldd	r24, Y+18	; 0x12
    f390:	9b 89       	ldd	r25, Y+19	; 0x13
    f392:	c6 16       	cp	r12, r22
    f394:	d7 06       	cpc	r13, r23
    f396:	e8 06       	cpc	r14, r24
    f398:	f9 06       	cpc	r15, r25
    f39a:	c9 f0       	breq	.+50     	; 0xf3ce <lseek+0xc4>
    f39c:	8b e8       	ldi	r24, 0x8B	; 139
    f39e:	9b e0       	ldi	r25, 0x0B	; 11
    f3a0:	a0 e0       	ldi	r26, 0x00	; 0
    f3a2:	ed b7       	in	r30, 0x3d	; 61
    f3a4:	fe b7       	in	r31, 0x3e	; 62
    f3a6:	81 83       	std	Z+1, r24	; 0x01
    f3a8:	92 83       	std	Z+2, r25	; 0x02
    f3aa:	a3 83       	std	Z+3, r26	; 0x03
    f3ac:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    f3b0:	6f ef       	ldi	r22, 0xFF	; 255
    f3b2:	7f ef       	ldi	r23, 0xFF	; 255
    f3b4:	cb 01       	movw	r24, r22
    f3b6:	0b c0       	rjmp	.+22     	; 0xf3ce <lseek+0xc4>
    f3b8:	01 30       	cpi	r16, 0x01	; 1
    f3ba:	11 05       	cpc	r17, r1
    f3bc:	81 f6       	brne	.-96     	; 0xf35e <lseek+0x54>
    f3be:	88 89       	ldd	r24, Y+16	; 0x10
    f3c0:	99 89       	ldd	r25, Y+17	; 0x11
    f3c2:	aa 89       	ldd	r26, Y+18	; 0x12
    f3c4:	bb 89       	ldd	r27, Y+19	; 0x13
    f3c6:	c7 cf       	rjmp	.-114    	; 0xf356 <lseek+0x4c>
    f3c8:	83 e2       	ldi	r24, 0x23	; 35
    f3ca:	90 e0       	ldi	r25, 0x00	; 0
    f3cc:	d9 cf       	rjmp	.-78     	; 0xf380 <lseek+0x76>
    f3ce:	cd b7       	in	r28, 0x3d	; 61
    f3d0:	de b7       	in	r29, 0x3e	; 62
    f3d2:	23 96       	adiw	r28, 0x03	; 3
    f3d4:	ea e0       	ldi	r30, 0x0A	; 10
    f3d6:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__epilogue_restores__+0x10>

0000f3da <fseek>:
    f3da:	cf 92       	push	r12
    f3dc:	df 92       	push	r13
    f3de:	ef 92       	push	r14
    f3e0:	ff 92       	push	r15
    f3e2:	cf 93       	push	r28
    f3e4:	df 93       	push	r29
    f3e6:	6a 01       	movw	r12, r20
    f3e8:	7b 01       	movw	r14, r22
    f3ea:	e9 01       	movw	r28, r18
    f3ec:	af db       	rcall	.-2210   	; 0xeb4c <fileno>
    f3ee:	97 fd       	sbrc	r25, 7
    f3f0:	12 c0       	rjmp	.+36     	; 0xf416 <fseek+0x3c>
    f3f2:	9e 01       	movw	r18, r28
    f3f4:	b7 01       	movw	r22, r14
    f3f6:	a6 01       	movw	r20, r12
    f3f8:	88 df       	rcall	.-240    	; 0xf30a <lseek>
    f3fa:	21 e0       	ldi	r18, 0x01	; 1
    f3fc:	30 e0       	ldi	r19, 0x00	; 0
    f3fe:	6f 3f       	cpi	r22, 0xFF	; 255
    f400:	7f 4f       	sbci	r23, 0xFF	; 255
    f402:	8f 4f       	sbci	r24, 0xFF	; 255
    f404:	9f 4f       	sbci	r25, 0xFF	; 255
    f406:	11 f0       	breq	.+4      	; 0xf40c <fseek+0x32>
    f408:	20 e0       	ldi	r18, 0x00	; 0
    f40a:	30 e0       	ldi	r19, 0x00	; 0
    f40c:	88 27       	eor	r24, r24
    f40e:	99 27       	eor	r25, r25
    f410:	82 1b       	sub	r24, r18
    f412:	93 0b       	sbc	r25, r19
    f414:	02 c0       	rjmp	.+4      	; 0xf41a <fseek+0x40>
    f416:	8f ef       	ldi	r24, 0xFF	; 255
    f418:	9f ef       	ldi	r25, 0xFF	; 255
    f41a:	df 91       	pop	r29
    f41c:	cf 91       	pop	r28
    f41e:	ff 90       	pop	r15
    f420:	ef 90       	pop	r14
    f422:	df 90       	pop	r13
    f424:	cf 90       	pop	r12
    f426:	08 95       	ret

0000f428 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f428:	a2 e0       	ldi	r26, 0x02	; 2
    f42a:	b0 e0       	ldi	r27, 0x00	; 0
    f42c:	ea e1       	ldi	r30, 0x1A	; 26
    f42e:	fa e7       	ldi	r31, 0x7A	; 122
    f430:	0c 94 46 e3 	jmp	0x1c68c	; 0x1c68c <__prologue_saves__+0x10>
    f434:	5c 01       	movw	r10, r24
    f436:	8b 01       	movw	r16, r22
    f438:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f43a:	fb 01       	movw	r30, r22
    f43c:	10 82       	st	Z, r1

    errno = 0;
    f43e:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <errno+0x1>
    f442:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f446:	9e db       	rcall	.-2244   	; 0xeb84 <fileno_to_stream>
    f448:	7c 01       	movw	r14, r24
    if(stream == stdin)
    f44a:	80 91 bc 1c 	lds	r24, 0x1CBC	; 0x801cbc <__iob>
    f44e:	90 91 bd 1c 	lds	r25, 0x1CBD	; 0x801cbd <__iob+0x1>
    f452:	e8 16       	cp	r14, r24
    f454:	f9 06       	cpc	r15, r25
    f456:	c9 f4       	brne	.+50     	; 0xf48a <read+0x62>
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f458:	f7 01       	movw	r30, r14
    f45a:	83 81       	ldd	r24, Z+3	; 0x03
    f45c:	80 64       	ori	r24, 0x40	; 64
    f45e:	83 83       	std	Z+3, r24	; 0x03
        size = 0;
    f460:	1a 82       	std	Y+2, r1	; 0x02
    f462:	19 82       	std	Y+1, r1	; 0x01
    f464:	c0 0e       	add	r12, r16
    f466:	d1 1e       	adc	r13, r17
        while(count--)
    f468:	0c 15       	cp	r16, r12
    f46a:	1d 05       	cpc	r17, r13
    f46c:	09 f4       	brne	.+2      	; 0xf470 <read+0x48>
    f46e:	3d c0       	rjmp	.+122    	; 0xf4ea <read+0xc2>
        {
            ret = fgetc(stream);
    f470:	c7 01       	movw	r24, r14
    f472:	48 da       	rcall	.-2928   	; 0xe904 <fgetc>
            if(ret < 0)
    f474:	97 fd       	sbrc	r25, 7
    f476:	39 c0       	rjmp	.+114    	; 0xf4ea <read+0xc2>
                break;

            *ptr++ = ret;
    f478:	f8 01       	movw	r30, r16
    f47a:	81 93       	st	Z+, r24
    f47c:	8f 01       	movw	r16, r30
            ++size;
    f47e:	89 81       	ldd	r24, Y+1	; 0x01
    f480:	9a 81       	ldd	r25, Y+2	; 0x02
    f482:	01 96       	adiw	r24, 0x01	; 1
    f484:	9a 83       	std	Y+2, r25	; 0x02
    f486:	89 83       	std	Y+1, r24	; 0x01
    f488:	ef cf       	rjmp	.-34     	; 0xf468 <read+0x40>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f48a:	80 91 be 1c 	lds	r24, 0x1CBE	; 0x801cbe <__iob+0x2>
    f48e:	90 91 bf 1c 	lds	r25, 0x1CBF	; 0x801cbf <__iob+0x3>
    f492:	e8 16       	cp	r14, r24
    f494:	f9 06       	cpc	r15, r25
    f496:	71 f1       	breq	.+92     	; 0xf4f4 <read+0xcc>
    f498:	80 91 c0 1c 	lds	r24, 0x1CC0	; 0x801cc0 <__iob+0x4>
    f49c:	90 91 c1 1c 	lds	r25, 0x1CC1	; 0x801cc1 <__iob+0x5>
    f4a0:	e8 16       	cp	r14, r24
    f4a2:	f9 06       	cpc	r15, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f4a4:	39 f1       	breq	.+78     	; 0xf4f4 <read+0xcc>
    f4a6:	c5 01       	movw	r24, r10
    f4a8:	00 df       	rcall	.-512    	; 0xf2aa <fileno_to_fatfs>
    if ( fh == NULL )
    f4aa:	00 97       	sbiw	r24, 0x00	; 0
    f4ac:	19 f4       	brne	.+6      	; 0xf4b4 <read+0x8c>
    {
        errno = EBADF;
    f4ae:	89 e0       	ldi	r24, 0x09	; 9
    f4b0:	90 e0       	ldi	r25, 0x00	; 0
    f4b2:	16 c0       	rjmp	.+44     	; 0xf4e0 <read+0xb8>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f4b4:	9e 01       	movw	r18, r28
    f4b6:	2f 5f       	subi	r18, 0xFF	; 255
    f4b8:	3f 4f       	sbci	r19, 0xFF	; 255
    f4ba:	a6 01       	movw	r20, r12
    f4bc:	b8 01       	movw	r22, r16
    f4be:	0e 94 73 5a 	call	0xb4e6	; 0xb4e6 <f_read>
    if(res != FR_OK)
    f4c2:	00 97       	sbiw	r24, 0x00	; 0
    f4c4:	91 f0       	breq	.+36     	; 0xf4ea <read+0xc2>
    f4c6:	84 31       	cpi	r24, 0x14	; 20
    f4c8:	91 05       	cpc	r25, r1
    f4ca:	40 f4       	brcc	.+16     	; 0xf4dc <read+0xb4>
    f4cc:	fc 01       	movw	r30, r24
    f4ce:	ea 55       	subi	r30, 0x5A	; 90
    f4d0:	f4 4f       	sbci	r31, 0xF4	; 244
    f4d2:	80 81       	ld	r24, Z
    f4d4:	08 2e       	mov	r0, r24
    f4d6:	00 0c       	add	r0, r0
    f4d8:	99 0b       	sbc	r25, r25
    f4da:	02 c0       	rjmp	.+4      	; 0xf4e0 <read+0xb8>
    f4dc:	83 e2       	ldi	r24, 0x23	; 35
    f4de:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f4e0:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    f4e4:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    f4e8:	05 c0       	rjmp	.+10     	; 0xf4f4 <read+0xcc>
        return(-1);
    }
    return ((ssize_t) size);
    f4ea:	69 81       	ldd	r22, Y+1	; 0x01
    f4ec:	7a 81       	ldd	r23, Y+2	; 0x02
    f4ee:	80 e0       	ldi	r24, 0x00	; 0
    f4f0:	90 e0       	ldi	r25, 0x00	; 0
    f4f2:	03 c0       	rjmp	.+6      	; 0xf4fa <read+0xd2>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f4f4:	6f ef       	ldi	r22, 0xFF	; 255
    f4f6:	7f ef       	ldi	r23, 0xFF	; 255
    f4f8:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f4fa:	22 96       	adiw	r28, 0x02	; 2
    f4fc:	ea e0       	ldi	r30, 0x0A	; 10
    f4fe:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__epilogue_restores__+0x10>

0000f502 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f502:	0f 93       	push	r16
    f504:	1f 93       	push	r17
    f506:	cf 93       	push	r28
    f508:	df 93       	push	r29
    f50a:	ec 01       	movw	r28, r24
    f50c:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f50e:	64 9f       	mul	r22, r20
    f510:	80 01       	movw	r16, r0
    f512:	65 9f       	mul	r22, r21
    f514:	10 0d       	add	r17, r0
    f516:	74 9f       	mul	r23, r20
    f518:	10 0d       	add	r17, r0
    f51a:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f51c:	17 db       	rcall	.-2514   	; 0xeb4c <fileno>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f51e:	a8 01       	movw	r20, r16
    f520:	be 01       	movw	r22, r28
    f522:	82 df       	rcall	.-252    	; 0xf428 <read>
    if(ret < 0)
    f524:	97 fd       	sbrc	r25, 7
    f526:	02 c0       	rjmp	.+4      	; 0xf52c <fread+0x2a>
        return(0);

    return((size_t) ret);
    f528:	cb 01       	movw	r24, r22
    f52a:	02 c0       	rjmp	.+4      	; 0xf530 <fread+0x2e>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f52c:	80 e0       	ldi	r24, 0x00	; 0
    f52e:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f530:	df 91       	pop	r29
    f532:	cf 91       	pop	r28
    f534:	1f 91       	pop	r17
    f536:	0f 91       	pop	r16
    f538:	08 95       	ret

0000f53a <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f53a:	cf 93       	push	r28
    f53c:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f53e:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <errno+0x1>
    f542:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f546:	83 30       	cpi	r24, 0x03	; 3
    f548:	91 05       	cpc	r25, r1
    f54a:	18 f4       	brcc	.+6      	; 0xf552 <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f54c:	89 e0       	ldi	r24, 0x09	; 9
    f54e:	90 e0       	ldi	r25, 0x00	; 0
    f550:	18 c0       	rjmp	.+48     	; 0xf582 <syncfs+0x48>
    f552:	ec 01       	movw	r28, r24
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f554:	17 db       	rcall	.-2514   	; 0xeb84 <fileno_to_stream>
    f556:	fc 01       	movw	r30, r24
// reset unget on sync
    stream->flags |= __SUNGET;
    f558:	93 81       	ldd	r25, Z+3	; 0x03
    f55a:	90 64       	ori	r25, 0x40	; 64
    f55c:	93 83       	std	Z+3, r25	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f55e:	ce 01       	movw	r24, r28
    f560:	a4 de       	rcall	.-696    	; 0xf2aa <fileno_to_fatfs>
    if(fh == NULL)
    f562:	00 97       	sbiw	r24, 0x00	; 0
    f564:	99 f3       	breq	.-26     	; 0xf54c <syncfs+0x12>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f566:	0e 94 55 5d 	call	0xbaaa	; 0xbaaa <f_sync>
    if (res != FR_OK)
    f56a:	00 97       	sbiw	r24, 0x00	; 0
    f56c:	a1 f0       	breq	.+40     	; 0xf596 <syncfs+0x5c>
    f56e:	84 31       	cpi	r24, 0x14	; 20
    f570:	91 05       	cpc	r25, r1
    f572:	70 f4       	brcc	.+28     	; 0xf590 <syncfs+0x56>
    f574:	fc 01       	movw	r30, r24
    f576:	ea 55       	subi	r30, 0x5A	; 90
    f578:	f4 4f       	sbci	r31, 0xF4	; 244
    f57a:	80 81       	ld	r24, Z
    f57c:	08 2e       	mov	r0, r24
    f57e:	00 0c       	add	r0, r0
    f580:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    f582:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    f586:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
        return(-1);
    f58a:	8f ef       	ldi	r24, 0xFF	; 255
    f58c:	9f ef       	ldi	r25, 0xFF	; 255
    f58e:	05 c0       	rjmp	.+10     	; 0xf59a <syncfs+0x60>
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f590:	83 e2       	ldi	r24, 0x23	; 35
    f592:	90 e0       	ldi	r25, 0x00	; 0
    f594:	f6 cf       	rjmp	.-20     	; 0xf582 <syncfs+0x48>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f596:	80 e0       	ldi	r24, 0x00	; 0
    f598:	90 e0       	ldi	r25, 0x00	; 0
}
    f59a:	df 91       	pop	r29
    f59c:	cf 91       	pop	r28
    f59e:	08 95       	ret

0000f5a0 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f5a0:	cf 93       	push	r28
    f5a2:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f5a4:	c0 e0       	ldi	r28, 0x00	; 0
    f5a6:	d0 e0       	ldi	r29, 0x00	; 0
    f5a8:	21 96       	adiw	r28, 0x01	; 1
    f5aa:	c0 31       	cpi	r28, 0x10	; 16
    f5ac:	d1 05       	cpc	r29, r1
    f5ae:	51 f0       	breq	.+20     	; 0xf5c4 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f5b0:	c3 30       	cpi	r28, 0x03	; 3
    f5b2:	d1 05       	cpc	r29, r1
    f5b4:	cc f3       	brlt	.-14     	; 0xf5a8 <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f5b6:	ce 01       	movw	r24, r28
    f5b8:	78 de       	rcall	.-784    	; 0xf2aa <fileno_to_fatfs>
        if(fh == NULL)
    f5ba:	89 2b       	or	r24, r25
    f5bc:	a9 f3       	breq	.-22     	; 0xf5a8 <sync+0x8>
            continue;

        (void ) syncfs(i);
    f5be:	ce 01       	movw	r24, r28
    f5c0:	bc df       	rcall	.-136    	; 0xf53a <syncfs>
    f5c2:	f2 cf       	rjmp	.-28     	; 0xf5a8 <sync+0x8>
    }
}
    f5c4:	df 91       	pop	r29
    f5c6:	cf 91       	pop	r28
    f5c8:	08 95       	ret

0000f5ca <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f5ca:	a2 e0       	ldi	r26, 0x02	; 2
    f5cc:	b0 e0       	ldi	r27, 0x00	; 0
    f5ce:	eb ee       	ldi	r30, 0xEB	; 235
    f5d0:	fa e7       	ldi	r31, 0x7A	; 122
    f5d2:	0c 94 44 e3 	jmp	0x1c688	; 0x1c688 <__prologue_saves__+0xc>
    f5d6:	8c 01       	movw	r16, r24
    f5d8:	b6 2e       	mov	r11, r22
    f5da:	f7 2e       	mov	r15, r23
    f5dc:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f5de:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <errno+0x1>
    f5e2:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    f5e6:	ce da       	rcall	.-2660   	; 0xeb84 <fileno_to_stream>
    f5e8:	6c 01       	movw	r12, r24
    if(stream == stdout || stream == stderr)
    f5ea:	80 91 be 1c 	lds	r24, 0x1CBE	; 0x801cbe <__iob+0x2>
    f5ee:	90 91 bf 1c 	lds	r25, 0x1CBF	; 0x801cbf <__iob+0x3>
    f5f2:	c8 16       	cp	r12, r24
    f5f4:	d9 06       	cpc	r13, r25
    f5f6:	39 f0       	breq	.+14     	; 0xf606 <write+0x3c>
    f5f8:	80 91 c0 1c 	lds	r24, 0x1CC0	; 0x801cc0 <__iob+0x4>
    f5fc:	90 91 c1 1c 	lds	r25, 0x1CC1	; 0x801cc1 <__iob+0x5>
    f600:	c8 16       	cp	r12, r24
    f602:	d9 06       	cpc	r13, r25
    f604:	d1 f4       	brne	.+52     	; 0xf63a <write+0x70>
    {
        char *ptr = (char *) buf;
        size = 0;
    f606:	1a 82       	std	Y+2, r1	; 0x02
    f608:	19 82       	std	Y+1, r1	; 0x01
    f60a:	0b 2d       	mov	r16, r11
    f60c:	1f 2d       	mov	r17, r15
    f60e:	78 01       	movw	r14, r16
    f610:	e8 0c       	add	r14, r8
    f612:	f9 1c       	adc	r15, r9
        while(count--)
    f614:	0e 15       	cp	r16, r14
    f616:	1f 05       	cpc	r17, r15
    f618:	d1 f1       	breq	.+116    	; 0xf68e <write+0xc4>
        {
            int c,ret;
            c = *ptr++;
    f61a:	f8 01       	movw	r30, r16
    f61c:	a1 90       	ld	r10, Z+
    f61e:	8f 01       	movw	r16, r30
    f620:	b1 2c       	mov	r11, r1
            ret = fputc(c, stream);
    f622:	b6 01       	movw	r22, r12
    f624:	c5 01       	movw	r24, r10
    f626:	c4 d9       	rcall	.-3192   	; 0xe9b0 <fputc>
            if(c != ret)
    f628:	a8 16       	cp	r10, r24
    f62a:	b9 06       	cpc	r11, r25
    f62c:	81 f5       	brne	.+96     	; 0xf68e <write+0xc4>
                break;

            ++size;
    f62e:	89 81       	ldd	r24, Y+1	; 0x01
    f630:	9a 81       	ldd	r25, Y+2	; 0x02
    f632:	01 96       	adiw	r24, 0x01	; 1
    f634:	9a 83       	std	Y+2, r25	; 0x02
    f636:	89 83       	std	Y+1, r24	; 0x01
    f638:	ed cf       	rjmp	.-38     	; 0xf614 <write+0x4a>
        }
        return(size);
    }
    if(stream == stdin)
    f63a:	80 91 bc 1c 	lds	r24, 0x1CBC	; 0x801cbc <__iob>
    f63e:	90 91 bd 1c 	lds	r25, 0x1CBD	; 0x801cbd <__iob+0x1>
    f642:	c8 16       	cp	r12, r24
    f644:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f646:	41 f1       	breq	.+80     	; 0xf698 <write+0xce>
    f648:	c8 01       	movw	r24, r16
    f64a:	2f de       	rcall	.-930    	; 0xf2aa <fileno_to_fatfs>
    if ( fh == NULL )
    f64c:	00 97       	sbiw	r24, 0x00	; 0
    f64e:	19 f4       	brne	.+6      	; 0xf656 <write+0x8c>
    {
        errno = EBADF;
    f650:	89 e0       	ldi	r24, 0x09	; 9
    f652:	90 e0       	ldi	r25, 0x00	; 0
    f654:	17 c0       	rjmp	.+46     	; 0xf684 <write+0xba>
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f656:	9e 01       	movw	r18, r28
    f658:	2f 5f       	subi	r18, 0xFF	; 255
    f65a:	3f 4f       	sbci	r19, 0xFF	; 255
    f65c:	a4 01       	movw	r20, r8
    f65e:	6b 2d       	mov	r22, r11
    f660:	7f 2d       	mov	r23, r15
    f662:	0e 94 be 5b 	call	0xb77c	; 0xb77c <f_write>
    if(res != FR_OK)
    f666:	00 97       	sbiw	r24, 0x00	; 0
    f668:	91 f0       	breq	.+36     	; 0xf68e <write+0xc4>
    f66a:	84 31       	cpi	r24, 0x14	; 20
    f66c:	91 05       	cpc	r25, r1
    f66e:	40 f4       	brcc	.+16     	; 0xf680 <write+0xb6>
    f670:	fc 01       	movw	r30, r24
    f672:	ea 55       	subi	r30, 0x5A	; 90
    f674:	f4 4f       	sbci	r31, 0xF4	; 244
    f676:	80 81       	ld	r24, Z
    f678:	08 2e       	mov	r0, r24
    f67a:	00 0c       	add	r0, r0
    f67c:	99 0b       	sbc	r25, r25
    f67e:	02 c0       	rjmp	.+4      	; 0xf684 <write+0xba>
    f680:	83 e2       	ldi	r24, 0x23	; 35
    f682:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f684:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    f688:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    f68c:	05 c0       	rjmp	.+10     	; 0xf698 <write+0xce>
        return(-1);
    }
    return ((ssize_t) size);
    f68e:	69 81       	ldd	r22, Y+1	; 0x01
    f690:	7a 81       	ldd	r23, Y+2	; 0x02
    f692:	80 e0       	ldi	r24, 0x00	; 0
    f694:	90 e0       	ldi	r25, 0x00	; 0
    f696:	03 c0       	rjmp	.+6      	; 0xf69e <write+0xd4>
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f698:	6f ef       	ldi	r22, 0xFF	; 255
    f69a:	7f ef       	ldi	r23, 0xFF	; 255
    f69c:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f69e:	22 96       	adiw	r28, 0x02	; 2
    f6a0:	ec e0       	ldi	r30, 0x0C	; 12
    f6a2:	0c 94 60 e3 	jmp	0x1c6c0	; 0x1c6c0 <__epilogue_restores__+0xc>

0000f6a6 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f6a6:	0f 93       	push	r16
    f6a8:	1f 93       	push	r17
    f6aa:	cf 93       	push	r28
    f6ac:	df 93       	push	r29
    f6ae:	ec 01       	movw	r28, r24
    f6b0:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f6b2:	64 9f       	mul	r22, r20
    f6b4:	80 01       	movw	r16, r0
    f6b6:	65 9f       	mul	r22, r21
    f6b8:	10 0d       	add	r17, r0
    f6ba:	74 9f       	mul	r23, r20
    f6bc:	10 0d       	add	r17, r0
    f6be:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f6c0:	45 da       	rcall	.-2934   	; 0xeb4c <fileno>
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f6c2:	a8 01       	movw	r20, r16
    f6c4:	be 01       	movw	r22, r28
    f6c6:	81 df       	rcall	.-254    	; 0xf5ca <write>

    if(ret < 0)
    f6c8:	97 fd       	sbrc	r25, 7
    f6ca:	02 c0       	rjmp	.+4      	; 0xf6d0 <fwrite+0x2a>
        return(0);

    return((size_t) ret);
    f6cc:	cb 01       	movw	r24, r22
    f6ce:	02 c0       	rjmp	.+4      	; 0xf6d4 <fwrite+0x2e>

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f6d0:	80 e0       	ldi	r24, 0x00	; 0
    f6d2:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f6d4:	df 91       	pop	r29
    f6d6:	cf 91       	pop	r28
    f6d8:	1f 91       	pop	r17
    f6da:	0f 91       	pop	r16
    f6dc:	08 95       	ret

0000f6de <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f6de:	0f 93       	push	r16
    f6e0:	1f 93       	push	r17
    f6e2:	cf 93       	push	r28
    f6e4:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f6e6:	83 30       	cpi	r24, 0x03	; 3
    f6e8:	91 05       	cpc	r25, r1
    f6ea:	48 f4       	brcc	.+18     	; 0xf6fe <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f6ec:	89 e0       	ldi	r24, 0x09	; 9
    f6ee:	90 e0       	ldi	r25, 0x00	; 0
    f6f0:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    f6f4:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
        return(-1);
    f6f8:	8f ef       	ldi	r24, 0xFF	; 255
    f6fa:	9f ef       	ldi	r25, 0xFF	; 255
    f6fc:	20 c0       	rjmp	.+64     	; 0xf73e <free_file_descriptor+0x60>
    f6fe:	ec 01       	movw	r28, r24
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f700:	41 da       	rcall	.-2942   	; 0xeb84 <fileno_to_stream>
    f702:	8c 01       	movw	r16, r24
    if(stream == NULL)
    f704:	89 2b       	or	r24, r25
    f706:	c1 f3       	breq	.-16     	; 0xf6f8 <free_file_descriptor+0x1a>
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f708:	f8 01       	movw	r30, r16
    f70a:	84 85       	ldd	r24, Z+12	; 0x0c
    f70c:	95 85       	ldd	r25, Z+13	; 0x0d

    if(fh != NULL)
    f70e:	00 97       	sbiw	r24, 0x00	; 0
    f710:	11 f0       	breq	.+4      	; 0xf716 <free_file_descriptor+0x38>
    {
        safefree(fh);
    f712:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f716:	f8 01       	movw	r30, r16
    f718:	80 81       	ld	r24, Z
    f71a:	91 81       	ldd	r25, Z+1	; 0x01
    f71c:	00 97       	sbiw	r24, 0x00	; 0
    f71e:	21 f0       	breq	.+8      	; 0xf728 <free_file_descriptor+0x4a>
    f720:	23 81       	ldd	r18, Z+3	; 0x03
    f722:	27 fd       	sbrc	r18, 7
    {
        safefree(stream->buf);
    f724:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <safefree>
    }

    __iob[fileno]  = NULL;
    f728:	fe 01       	movw	r30, r28
    f72a:	ee 0f       	add	r30, r30
    f72c:	ff 1f       	adc	r31, r31
    f72e:	e4 54       	subi	r30, 0x44	; 68
    f730:	f3 4e       	sbci	r31, 0xE3	; 227
    f732:	11 82       	std	Z+1, r1	; 0x01
    f734:	10 82       	st	Z, r1
    safefree(stream);
    f736:	c8 01       	movw	r24, r16
    f738:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <safefree>
    return(fileno);
    f73c:	ce 01       	movw	r24, r28
}
    f73e:	df 91       	pop	r29
    f740:	cf 91       	pop	r28
    f742:	1f 91       	pop	r17
    f744:	0f 91       	pop	r16
    f746:	08 95       	ret

0000f748 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    f748:	0f 93       	push	r16
    f74a:	1f 93       	push	r17
    f74c:	cf 93       	push	r28
    f74e:	df 93       	push	r29
    f750:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f752:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <errno+0x1>
    f756:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f75a:	14 da       	rcall	.-3032   	; 0xeb84 <fileno_to_stream>
    if(stream == NULL)
    f75c:	89 2b       	or	r24, r25
    f75e:	d9 f0       	breq	.+54     	; 0xf796 <close+0x4e>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f760:	c8 01       	movw	r24, r16
    f762:	a3 dd       	rcall	.-1210   	; 0xf2aa <fileno_to_fatfs>
    if(fh == NULL)
    f764:	00 97       	sbiw	r24, 0x00	; 0
    f766:	b9 f0       	breq	.+46     	; 0xf796 <close+0x4e>
    {
        return(-1);
    }
    res = f_close(fh);
    f768:	0e 94 d5 5d 	call	0xbbaa	; 0xbbaa <f_close>
    free_file_descriptor(fileno);
    f76c:	ec 01       	movw	r28, r24
    f76e:	c8 01       	movw	r24, r16
    f770:	b6 df       	rcall	.-148    	; 0xf6de <free_file_descriptor>
    if (res != FR_OK)
    f772:	20 97       	sbiw	r28, 0x00	; 0
    f774:	99 f0       	breq	.+38     	; 0xf79c <close+0x54>
    f776:	c4 31       	cpi	r28, 0x14	; 20
    f778:	d1 05       	cpc	r29, r1
    f77a:	38 f4       	brcc	.+14     	; 0xf78a <close+0x42>
    f77c:	ca 55       	subi	r28, 0x5A	; 90
    f77e:	d4 4f       	sbci	r29, 0xF4	; 244
    f780:	88 81       	ld	r24, Y
    f782:	08 2e       	mov	r0, r24
    f784:	00 0c       	add	r0, r0
    f786:	99 0b       	sbc	r25, r25
    f788:	02 c0       	rjmp	.+4      	; 0xf78e <close+0x46>
    f78a:	83 e2       	ldi	r24, 0x23	; 35
    f78c:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f78e:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    f792:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
        return(-1);
    f796:	8f ef       	ldi	r24, 0xFF	; 255
    f798:	9f ef       	ldi	r25, 0xFF	; 255
    f79a:	02 c0       	rjmp	.+4      	; 0xf7a0 <close+0x58>
    }
    return(0);
    f79c:	80 e0       	ldi	r24, 0x00	; 0
    f79e:	90 e0       	ldi	r25, 0x00	; 0
}
    f7a0:	df 91       	pop	r29
    f7a2:	cf 91       	pop	r28
    f7a4:	1f 91       	pop	r17
    f7a6:	0f 91       	pop	r16
    f7a8:	08 95       	ret

0000f7aa <fclose>:
/// @return  0 on sucess.
/// @return  -1 on error witrh errno set.
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    f7aa:	d0 d9       	rcall	.-3168   	; 0xeb4c <fileno>
    if(fn < 0)
    f7ac:	97 fd       	sbrc	r25, 7
        return(EOF);

    return( close(fn) );
    f7ae:	02 c0       	rjmp	.+4      	; 0xf7b4 <fclose+0xa>
    f7b0:	cb cf       	rjmp	.-106    	; 0xf748 <close>
    f7b2:	08 95       	ret
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    if(fn < 0)
        return(EOF);
    f7b4:	8f ef       	ldi	r24, 0xFF	; 255
    f7b6:	9f ef       	ldi	r25, 0xFF	; 255

    return( close(fn) );
}
    f7b8:	08 95       	ret

0000f7ba <new_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure with errno set.
MEMSPACE
int new_file_descriptor( void )
{
    f7ba:	0f 93       	push	r16
    f7bc:	1f 93       	push	r17
    f7be:	cf 93       	push	r28
    f7c0:	df 93       	push	r29
    f7c2:	ec eb       	ldi	r30, 0xBC	; 188
    f7c4:	fc e1       	ldi	r31, 0x1C	; 28
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f7c6:	c0 e0       	ldi	r28, 0x00	; 0
    f7c8:	d0 e0       	ldi	r29, 0x00	; 0
    f7ca:	21 96       	adiw	r28, 0x01	; 1
    f7cc:	c0 31       	cpi	r28, 0x10	; 16
    f7ce:	d1 05       	cpc	r29, r1
    f7d0:	49 f0       	breq	.+18     	; 0xf7e4 <new_file_descriptor+0x2a>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f7d2:	c3 30       	cpi	r28, 0x03	; 3
    f7d4:	d1 05       	cpc	r29, r1
    f7d6:	24 f0       	brlt	.+8      	; 0xf7e0 <new_file_descriptor+0x26>

    for(i=0;i<MAX_FILES;++i)
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
    f7d8:	82 81       	ldd	r24, Z+2	; 0x02
    f7da:	93 81       	ldd	r25, Z+3	; 0x03
    f7dc:	89 2b       	or	r24, r25
    f7de:	59 f0       	breq	.+22     	; 0xf7f6 <new_file_descriptor+0x3c>
    f7e0:	32 96       	adiw	r30, 0x02	; 2
    f7e2:	f3 cf       	rjmp	.-26     	; 0xf7ca <new_file_descriptor+0x10>
            __iob[i]  = stream;
            fdev_set_udata(stream, (void *) fh);
            return(i);
        }
    }
    errno = ENFILE;
    f7e4:	87 e1       	ldi	r24, 0x17	; 23
    f7e6:	90 e0       	ldi	r25, 0x00	; 0
    f7e8:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    f7ec:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    return(-1);
    f7f0:	8f ef       	ldi	r24, 0xFF	; 255
    f7f2:	9f ef       	ldi	r25, 0xFF	; 255
    f7f4:	22 c0       	rjmp	.+68     	; 0xf83a <new_file_descriptor+0x80>
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
        {
            stream = (FILE *) safecalloc(sizeof(FILE),1);
    f7f6:	61 e0       	ldi	r22, 0x01	; 1
    f7f8:	70 e0       	ldi	r23, 0x00	; 0
    f7fa:	8e e0       	ldi	r24, 0x0E	; 14
    f7fc:	90 e0       	ldi	r25, 0x00	; 0
    f7fe:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <safecalloc>
    f802:	8c 01       	movw	r16, r24
            if(stream == NULL)
    f804:	89 2b       	or	r24, r25
    f806:	59 f0       	breq	.+22     	; 0xf81e <new_file_descriptor+0x64>
            {
                errno = ENOMEM;
                return(-1);
            }
            fh = (FIL *) safecalloc(sizeof(FIL),1);
    f808:	61 e0       	ldi	r22, 0x01	; 1
    f80a:	70 e0       	ldi	r23, 0x00	; 0
    f80c:	84 e2       	ldi	r24, 0x24	; 36
    f80e:	92 e0       	ldi	r25, 0x02	; 2
    f810:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <safecalloc>
            if(fh == NULL)
    f814:	00 97       	sbiw	r24, 0x00	; 0
    f816:	31 f4       	brne	.+12     	; 0xf824 <new_file_descriptor+0x6a>
            {
                safefree(stream);
    f818:	c8 01       	movw	r24, r16
    f81a:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <safefree>
                errno = ENOMEM;
    f81e:	8c e0       	ldi	r24, 0x0C	; 12
    f820:	90 e0       	ldi	r25, 0x00	; 0
    f822:	e2 cf       	rjmp	.-60     	; 0xf7e8 <new_file_descriptor+0x2e>
                return(-1);
            }

            __iob[i]  = stream;
    f824:	fe 01       	movw	r30, r28
    f826:	ee 0f       	add	r30, r30
    f828:	ff 1f       	adc	r31, r31
    f82a:	e4 54       	subi	r30, 0x44	; 68
    f82c:	f3 4e       	sbci	r31, 0xE3	; 227
    f82e:	11 83       	std	Z+1, r17	; 0x01
    f830:	00 83       	st	Z, r16
            fdev_set_udata(stream, (void *) fh);
    f832:	f8 01       	movw	r30, r16
    f834:	95 87       	std	Z+13, r25	; 0x0d
    f836:	84 87       	std	Z+12, r24	; 0x0c
{
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f838:	ce 01       	movw	r24, r28
            return(i);
        }
    }
    errno = ENFILE;
    return(-1);
}
    f83a:	df 91       	pop	r29
    f83c:	cf 91       	pop	r28
    f83e:	1f 91       	pop	r17
    f840:	0f 91       	pop	r16
    f842:	08 95       	ret

0000f844 <open>:
///
/// @return fileno on success.
/// @return -1 on error with errno set.
MEMSPACE
int open(const char *pathname, int flags)
{
    f844:	a0 e0       	ldi	r26, 0x00	; 0
    f846:	b0 e0       	ldi	r27, 0x00	; 0
    f848:	e8 e2       	ldi	r30, 0x28	; 40
    f84a:	fc e7       	ldi	r31, 0x7C	; 124
    f84c:	0c 94 42 e3 	jmp	0x1c684	; 0x1c684 <__prologue_saves__+0x8>
    f850:	5c 01       	movw	r10, r24
    f852:	6b 01       	movw	r12, r22
    int fatfs_modes;
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f854:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <errno+0x1>
    f858:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <errno>
        errno = fatfs_to_errno(res);
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
    f85c:	7b 01       	movw	r14, r22
    f85e:	83 e0       	ldi	r24, 0x03	; 3
    f860:	e8 22       	and	r14, r24
    f862:	ff 24       	eor	r15, r15
    f864:	e2 e0       	ldi	r30, 0x02	; 2
    f866:	ee 16       	cp	r14, r30
    f868:	f1 04       	cpc	r15, r1
    f86a:	31 f0       	breq	.+12     	; 0xf878 <open+0x34>
        fatfs_modes = FA_READ | FA_WRITE;
    else if((flags & O_ACCMODE) == O_RDONLY)
    f86c:	e1 14       	cp	r14, r1
    f86e:	f1 04       	cpc	r15, r1
    f870:	31 f0       	breq	.+12     	; 0xf87e <open+0x3a>
        fatfs_modes = FA_READ;
    else
        fatfs_modes = FA_WRITE;
    f872:	02 e0       	ldi	r16, 0x02	; 2
    f874:	10 e0       	ldi	r17, 0x00	; 0
    f876:	05 c0       	rjmp	.+10     	; 0xf882 <open+0x3e>
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
        fatfs_modes = FA_READ | FA_WRITE;
    f878:	03 e0       	ldi	r16, 0x03	; 3
    f87a:	10 e0       	ldi	r17, 0x00	; 0
    f87c:	02 c0       	rjmp	.+4      	; 0xf882 <open+0x3e>
    else if((flags & O_ACCMODE) == O_RDONLY)
        fatfs_modes = FA_READ;
    f87e:	01 e0       	ldi	r16, 0x01	; 1
    f880:	10 e0       	ldi	r17, 0x00	; 0
    else
        fatfs_modes = FA_WRITE;

    if(flags & O_CREAT)
    f882:	c6 fe       	sbrs	r12, 6
    f884:	05 c0       	rjmp	.+10     	; 0xf890 <open+0x4c>
    {
        if(flags & O_TRUNC)
    f886:	d1 fe       	sbrs	r13, 1
    f888:	02 c0       	rjmp	.+4      	; 0xf88e <open+0x4a>
            fatfs_modes |= FA_CREATE_ALWAYS;
    f88a:	08 60       	ori	r16, 0x08	; 8
    f88c:	01 c0       	rjmp	.+2      	; 0xf890 <open+0x4c>
        else
            fatfs_modes |= FA_OPEN_ALWAYS;
    f88e:	00 61       	ori	r16, 0x10	; 16
    }

    fileno = new_file_descriptor();
    f890:	94 df       	rcall	.-216    	; 0xf7ba <new_file_descriptor>
    f892:	3c 01       	movw	r6, r24

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f894:	77 d9       	rcall	.-3346   	; 0xeb84 <fileno_to_stream>
    f896:	ec 01       	movw	r28, r24
    f898:	c3 01       	movw	r24, r6
    if(stream == NULL)
    {
        free_file_descriptor(fileno);
    f89a:	20 97       	sbiw	r28, 0x00	; 0

    fileno = new_file_descriptor();

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    f89c:	09 f4       	brne	.+2      	; 0xf8a0 <open+0x5c>
    f89e:	48 c0       	rjmp	.+144    	; 0xf930 <open+0xec>
        free_file_descriptor(fileno);
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f8a0:	04 dd       	rcall	.-1528   	; 0xf2aa <fileno_to_fatfs>
    f8a2:	4c 01       	movw	r8, r24
    f8a4:	00 97       	sbiw	r24, 0x00	; 0
    if(fh == NULL)
    f8a6:	59 f4       	brne	.+22     	; 0xf8be <open+0x7a>
    {
        free_file_descriptor(fileno);
    f8a8:	c3 01       	movw	r24, r6
    f8aa:	19 df       	rcall	.-462    	; 0xf6de <free_file_descriptor>
    f8ac:	89 e0       	ldi	r24, 0x09	; 9
        errno = EBADF;
    f8ae:	90 e0       	ldi	r25, 0x00	; 0
    f8b0:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    f8b4:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    f8b8:	8f ef       	ldi	r24, 0xFF	; 255
        return(-1);
    f8ba:	9f ef       	ldi	r25, 0xFF	; 255
    f8bc:	5d c0       	rjmp	.+186    	; 0xf978 <open+0x134>
    f8be:	40 2f       	mov	r20, r16
    }
    res = f_open(fh, pathname, (BYTE) (fatfs_modes & 0xff));
    f8c0:	b5 01       	movw	r22, r10
    f8c2:	0e 94 bb 58 	call	0xb176	; 0xb176 <f_open>
    f8c6:	00 97       	sbiw	r24, 0x00	; 0
    if(res != FR_OK)
    f8c8:	91 f0       	breq	.+36     	; 0xf8ee <open+0xaa>
    f8ca:	84 31       	cpi	r24, 0x14	; 20
    f8cc:	91 05       	cpc	r25, r1
    f8ce:	40 f4       	brcc	.+16     	; 0xf8e0 <open+0x9c>
    f8d0:	fc 01       	movw	r30, r24
    f8d2:	ea 55       	subi	r30, 0x5A	; 90
    f8d4:	f4 4f       	sbci	r31, 0xF4	; 244
    f8d6:	80 81       	ld	r24, Z
    f8d8:	08 2e       	mov	r0, r24
    f8da:	00 0c       	add	r0, r0
    f8dc:	99 0b       	sbc	r25, r25
    f8de:	02 c0       	rjmp	.+4      	; 0xf8e4 <open+0xa0>
    f8e0:	83 e2       	ldi	r24, 0x23	; 35
    f8e2:	90 e0       	ldi	r25, 0x00	; 0
    f8e4:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
    {
        errno = fatfs_to_errno(res);
    f8e8:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    f8ec:	20 c0       	rjmp	.+64     	; 0xf92e <open+0xea>
    f8ee:	d2 fe       	sbrs	r13, 2
        free_file_descriptor(fileno);
        return(-1);
    }
    if(flags & O_APPEND)
    f8f0:	21 c0       	rjmp	.+66     	; 0xf934 <open+0xf0>
    f8f2:	f4 01       	movw	r30, r8
    {
///  Seek to end of the file
        res = f_lseek(fh, f_size(fh));
    f8f4:	42 85       	ldd	r20, Z+10	; 0x0a
    f8f6:	53 85       	ldd	r21, Z+11	; 0x0b
    f8f8:	64 85       	ldd	r22, Z+12	; 0x0c
    f8fa:	75 85       	ldd	r23, Z+13	; 0x0d
    f8fc:	c4 01       	movw	r24, r8
    f8fe:	0e 94 7f 5f 	call	0xbefe	; 0xbefe <f_lseek>
    f902:	00 97       	sbiw	r24, 0x00	; 0
        if (res != FR_OK)
    f904:	b9 f0       	breq	.+46     	; 0xf934 <open+0xf0>
    f906:	84 31       	cpi	r24, 0x14	; 20
    f908:	91 05       	cpc	r25, r1
    f90a:	40 f4       	brcc	.+16     	; 0xf91c <open+0xd8>
    f90c:	fc 01       	movw	r30, r24
    f90e:	ea 55       	subi	r30, 0x5A	; 90
    f910:	f4 4f       	sbci	r31, 0xF4	; 244
    f912:	80 81       	ld	r24, Z
    f914:	08 2e       	mov	r0, r24
    f916:	00 0c       	add	r0, r0
    f918:	99 0b       	sbc	r25, r25
    f91a:	02 c0       	rjmp	.+4      	; 0xf920 <open+0xdc>
    f91c:	83 e2       	ldi	r24, 0x23	; 35
    f91e:	90 e0       	ldi	r25, 0x00	; 0
    f920:	90 93 bb 1c 	sts	0x1CBB, r25	; 0x801cbb <errno+0x1>
        {
            errno = fatfs_to_errno(res);
    f924:	80 93 ba 1c 	sts	0x1CBA, r24	; 0x801cba <errno>
    f928:	c4 01       	movw	r24, r8
            f_close(fh);
    f92a:	0e 94 d5 5d 	call	0xbbaa	; 0xbbaa <f_close>
            free_file_descriptor(fileno);
    f92e:	c3 01       	movw	r24, r6
    f930:	d6 de       	rcall	.-596    	; 0xf6de <free_file_descriptor>
    f932:	c2 cf       	rjmp	.-124    	; 0xf8b8 <open+0x74>
    f934:	f2 e0       	ldi	r31, 0x02	; 2
            return(-1);
        }
    }

    if((flags & O_ACCMODE) == O_RDWR)
    f936:	ef 16       	cp	r14, r31
    f938:	f1 04       	cpc	r15, r1
    f93a:	51 f4       	brne	.+20     	; 0xf950 <open+0x10c>
    f93c:	87 e3       	ldi	r24, 0x37	; 55
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    f93e:	94 e7       	ldi	r25, 0x74	; 116
    f940:	99 87       	std	Y+9, r25	; 0x09
    f942:	88 87       	std	Y+8, r24	; 0x08
    f944:	84 eb       	ldi	r24, 0xB4	; 180
        stream->get = fatfs_getc;
    f946:	93 e7       	ldi	r25, 0x73	; 115
    f948:	9b 87       	std	Y+11, r25	; 0x0b
    f94a:	8a 87       	std	Y+10, r24	; 0x0a
    f94c:	83 e0       	ldi	r24, 0x03	; 3
        stream->flags = _FDEV_SETUP_RW;
    f94e:	12 c0       	rjmp	.+36     	; 0xf974 <open+0x130>
    f950:	e1 14       	cp	r14, r1
    }
    else if((flags & O_ACCMODE) == O_RDONLY)
    f952:	f1 04       	cpc	r15, r1
    f954:	41 f4       	brne	.+16     	; 0xf966 <open+0x122>
    f956:	19 86       	std	Y+9, r1	; 0x09
    {
// FIXME fdevopen should do this
        stream->put = NULL;
    f958:	18 86       	std	Y+8, r1	; 0x08
    f95a:	84 eb       	ldi	r24, 0xB4	; 180
        stream->get = fatfs_getc;
    f95c:	93 e7       	ldi	r25, 0x73	; 115
    f95e:	9b 87       	std	Y+11, r25	; 0x0b
    f960:	8a 87       	std	Y+10, r24	; 0x0a
    f962:	81 e0       	ldi	r24, 0x01	; 1
        stream->flags = _FDEV_SETUP_READ;
    f964:	07 c0       	rjmp	.+14     	; 0xf974 <open+0x130>
    f966:	87 e3       	ldi	r24, 0x37	; 55
    }
    else
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    f968:	94 e7       	ldi	r25, 0x74	; 116
    f96a:	99 87       	std	Y+9, r25	; 0x09
    f96c:	88 87       	std	Y+8, r24	; 0x08
    f96e:	1b 86       	std	Y+11, r1	; 0x0b
        stream->get = NULL;
    f970:	1a 86       	std	Y+10, r1	; 0x0a
    f972:	82 e0       	ldi	r24, 0x02	; 2
        stream->flags = _FDEV_SETUP_WRITE;
    f974:	8b 83       	std	Y+3, r24	; 0x03
    f976:	c3 01       	movw	r24, r6
    }

    return(fileno);
    f978:	cd b7       	in	r28, 0x3d	; 61
}
    f97a:	de b7       	in	r29, 0x3e	; 62
    f97c:	ee e0       	ldi	r30, 0x0E	; 14
    f97e:	0c 94 5e e3 	jmp	0x1c6bc	; 0x1c6bc <__epilogue_restores__+0x8>

0000f982 <posix_fopen_modes_to_open>:
    f982:	cf 93       	push	r28
/// @return open mode flags.
/// @return -1 on error.
/// @warning read and write BOTH share the same stream buffer and buffer index pointers.
MEMSPACE
int posix_fopen_modes_to_open(const char *mode)
{
    f984:	df 93       	push	r29
    f986:	ec 01       	movw	r28, r24
    int flag = 0;

    if(modecmp(mode,"r") || modecmp(mode,"rb"))
    f988:	62 e4       	ldi	r22, 0x42	; 66
    f98a:	73 e0       	ldi	r23, 0x03	; 3
    f98c:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <strcmp>
    f990:	00 97       	sbiw	r24, 0x00	; 0
    f992:	09 f4       	brne	.+2      	; 0xf996 <posix_fopen_modes_to_open+0x14>
    f994:	5d c0       	rjmp	.+186    	; 0xfa50 <posix_fopen_modes_to_open+0xce>
    f996:	6e ef       	ldi	r22, 0xFE	; 254
    f998:	78 e0       	ldi	r23, 0x08	; 8
    f99a:	ce 01       	movw	r24, r28
    f99c:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <strcmp>
    f9a0:	00 97       	sbiw	r24, 0x00	; 0
    f9a2:	09 f4       	brne	.+2      	; 0xf9a6 <posix_fopen_modes_to_open+0x24>
    f9a4:	55 c0       	rjmp	.+170    	; 0xfa50 <posix_fopen_modes_to_open+0xce>
    {
        flag = O_RDONLY;
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    f9a6:	61 e0       	ldi	r22, 0x01	; 1
    f9a8:	79 e0       	ldi	r23, 0x09	; 9
    f9aa:	ce 01       	movw	r24, r28
    f9ac:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <strcmp>
    f9b0:	89 2b       	or	r24, r25
    f9b2:	09 f4       	brne	.+2      	; 0xf9b6 <posix_fopen_modes_to_open+0x34>
    f9b4:	42 c0       	rjmp	.+132    	; 0xfa3a <posix_fopen_modes_to_open+0xb8>
    f9b6:	64 e0       	ldi	r22, 0x04	; 4
    f9b8:	79 e0       	ldi	r23, 0x09	; 9
    f9ba:	ce 01       	movw	r24, r28
    f9bc:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <strcmp>
    f9c0:	89 2b       	or	r24, r25
    f9c2:	d9 f1       	breq	.+118    	; 0xfa3a <posix_fopen_modes_to_open+0xb8>
    f9c4:	68 e0       	ldi	r22, 0x08	; 8
    f9c6:	79 e0       	ldi	r23, 0x09	; 9
    f9c8:	ce 01       	movw	r24, r28
    f9ca:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <strcmp>
    f9ce:	89 2b       	or	r24, r25
    f9d0:	a1 f1       	breq	.+104    	; 0xfa3a <posix_fopen_modes_to_open+0xb8>
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    f9d2:	6d eb       	ldi	r22, 0xBD	; 189
    f9d4:	7a e0       	ldi	r23, 0x0A	; 10
    f9d6:	ce 01       	movw	r24, r28
    f9d8:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <strcmp>
    f9dc:	89 2b       	or	r24, r25
    f9de:	81 f1       	breq	.+96     	; 0xfa40 <posix_fopen_modes_to_open+0xbe>
    f9e0:	6c e0       	ldi	r22, 0x0C	; 12
    f9e2:	79 e0       	ldi	r23, 0x09	; 9
    f9e4:	ce 01       	movw	r24, r28
    f9e6:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <strcmp>
    f9ea:	89 2b       	or	r24, r25
    f9ec:	49 f1       	breq	.+82     	; 0xfa40 <posix_fopen_modes_to_open+0xbe>
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    f9ee:	6f e0       	ldi	r22, 0x0F	; 15
    f9f0:	79 e0       	ldi	r23, 0x09	; 9
    f9f2:	ce 01       	movw	r24, r28
    f9f4:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <strcmp>
    f9f8:	89 2b       	or	r24, r25
    f9fa:	29 f1       	breq	.+74     	; 0xfa46 <posix_fopen_modes_to_open+0xc4>
    f9fc:	62 e1       	ldi	r22, 0x12	; 18
    f9fe:	79 e0       	ldi	r23, 0x09	; 9
    fa00:	ce 01       	movw	r24, r28
    fa02:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <strcmp>
    fa06:	89 2b       	or	r24, r25
    fa08:	f1 f0       	breq	.+60     	; 0xfa46 <posix_fopen_modes_to_open+0xc4>
    fa0a:	66 e1       	ldi	r22, 0x16	; 22
    fa0c:	79 e0       	ldi	r23, 0x09	; 9
    fa0e:	ce 01       	movw	r24, r28
    fa10:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <strcmp>
    fa14:	89 2b       	or	r24, r25
    fa16:	b9 f0       	breq	.+46     	; 0xfa46 <posix_fopen_modes_to_open+0xc4>
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    fa18:	6e e2       	ldi	r22, 0x2E	; 46
    fa1a:	73 e1       	ldi	r23, 0x13	; 19
    fa1c:	ce 01       	movw	r24, r28
    fa1e:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <strcmp>
    fa22:	89 2b       	or	r24, r25
    fa24:	99 f0       	breq	.+38     	; 0xfa4c <posix_fopen_modes_to_open+0xca>
    fa26:	6a e1       	ldi	r22, 0x1A	; 26
    fa28:	79 e0       	ldi	r23, 0x09	; 9
    fa2a:	ce 01       	movw	r24, r28
    fa2c:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <strcmp>
    fa30:	89 2b       	or	r24, r25
    fa32:	61 f0       	breq	.+24     	; 0xfa4c <posix_fopen_modes_to_open+0xca>
        return(flag);
    }
    if(modecmp(mode,"a+") || modecmp(mode, "a+b" ) || modecmp(mode, "ab+" ))
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    fa34:	8f ef       	ldi	r24, 0xFF	; 255
    fa36:	9f ef       	ldi	r25, 0xFF	; 255
    fa38:	0b c0       	rjmp	.+22     	; 0xfa50 <posix_fopen_modes_to_open+0xce>
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    fa3a:	82 e0       	ldi	r24, 0x02	; 2
    fa3c:	92 e0       	ldi	r25, 0x02	; 2
    fa3e:	08 c0       	rjmp	.+16     	; 0xfa50 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    fa40:	81 e4       	ldi	r24, 0x41	; 65
    fa42:	92 e0       	ldi	r25, 0x02	; 2
    fa44:	05 c0       	rjmp	.+10     	; 0xfa50 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    fa46:	82 e4       	ldi	r24, 0x42	; 66
    fa48:	92 e0       	ldi	r25, 0x02	; 2
    fa4a:	02 c0       	rjmp	.+4      	; 0xfa50 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    {
        flag = O_WRONLY | O_CREAT | O_APPEND;
        return(flag);
    fa4c:	81 e4       	ldi	r24, 0x41	; 65
    fa4e:	94 e0       	ldi	r25, 0x04	; 4
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    }
    return(-1);                                   // nvalid mode
}
    fa50:	df 91       	pop	r29
    fa52:	cf 91       	pop	r28
    fa54:	08 95       	ret

0000fa56 <fopen>:
///
/// @return stream * on success.
/// @return NULL on error with errno set.
MEMSPACE
FILE *fopen(const char *path, const char *mode)
{
    fa56:	cf 93       	push	r28
    fa58:	df 93       	push	r29
    fa5a:	ec 01       	movw	r28, r24
    fa5c:	cb 01       	movw	r24, r22
    int flags = posix_fopen_modes_to_open(mode);
    fa5e:	91 df       	rcall	.-222    	; 0xf982 <posix_fopen_modes_to_open>
    int fileno = open(path, flags);
    fa60:	bc 01       	movw	r22, r24
    fa62:	ce 01       	movw	r24, r28

// checks if fileno out of bounds
    return( fileno_to_stream(fileno) );
    fa64:	ef de       	rcall	.-546    	; 0xf844 <open>
    fa66:	8e d8       	rcall	.-3812   	; 0xeb84 <fileno_to_stream>
}
    fa68:	df 91       	pop	r29
    fa6a:	cf 91       	pop	r28
    fa6c:	08 95       	ret

0000fa6e <fprintf>:
/// @param[in] ...: vararg list or arguments
/// @return size of printed result
MEMSPACE
int
fprintf(FILE *fp, const char *format, ...)
{
    fa6e:	a8 e0       	ldi	r26, 0x08	; 8
    fa70:	b0 e0       	ldi	r27, 0x00	; 0
    fa72:	ed e3       	ldi	r30, 0x3D	; 61
    fa74:	fd e7       	ldi	r31, 0x7D	; 125
    fa76:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
    printf_t fn;
    va_list va;

    fn.put = _fprintf_putc;
    fa7a:	8a e2       	ldi	r24, 0x2A	; 42
    fa7c:	95 e7       	ldi	r25, 0x75	; 117
    fa7e:	9a 83       	std	Y+2, r25	; 0x02
    fa80:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    fa82:	18 86       	std	Y+8, r1	; 0x08
    fa84:	1f 82       	std	Y+7, r1	; 0x07
    fn.buffer = (void *) fp;
    fa86:	8d 85       	ldd	r24, Y+13	; 0x0d
    fa88:	9e 85       	ldd	r25, Y+14	; 0x0e
    fa8a:	9c 83       	std	Y+4, r25	; 0x04
    fa8c:	8b 83       	std	Y+3, r24	; 0x03

    va_start(va, format);
    _printf_fn(&fn, format, va);
    fa8e:	4f 85       	ldd	r20, Y+15	; 0x0f
    fa90:	58 89       	ldd	r21, Y+16	; 0x10
    fa92:	60 e8       	ldi	r22, 0x80	; 128
    fa94:	9e 01       	movw	r18, r28
    fa96:	2f 5e       	subi	r18, 0xEF	; 239
    fa98:	3f 4f       	sbci	r19, 0xFF	; 255
    fa9a:	ce 01       	movw	r24, r28
    fa9c:	01 96       	adiw	r24, 0x01	; 1
    fa9e:	0e 94 5e 40 	call	0x80bc	; 0x80bc <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    faa2:	8f 81       	ldd	r24, Y+7	; 0x07
    faa4:	98 85       	ldd	r25, Y+8	; 0x08
    faa6:	28 96       	adiw	r28, 0x08	; 8
    faa8:	e2 e0       	ldi	r30, 0x02	; 2
    faaa:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

0000faae <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    faae:	cf 93       	push	r28
    fab0:	df 93       	push	r29
    fab2:	00 d0       	rcall	.+0      	; 0xfab4 <posix_help+0x6>
    fab4:	1f 92       	push	r1
    fab6:	ec 01       	movw	r28, r24
    fab8:	89 e4       	ldi	r24, 0x49	; 73
    faba:	9e e0       	ldi	r25, 0x0E	; 14
    fabc:	a0 e0       	ldi	r26, 0x00	; 0
    fabe:	ed b7       	in	r30, 0x3d	; 61
    fac0:	fe b7       	in	r31, 0x3e	; 62
    fac2:	81 83       	std	Z+1, r24	; 0x01
    fac4:	92 83       	std	Z+2, r25	; 0x02
    fac6:	a3 83       	std	Z+3, r26	; 0x03
    fac8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    facc:	cd 2b       	or	r28, r29
    face:	51 f0       	breq	.+20     	; 0xfae4 <posix_help+0x36>
    fad0:	83 e8       	ldi	r24, 0x83	; 131
    fad2:	9d e0       	ldi	r25, 0x0D	; 13
    fad4:	a0 e0       	ldi	r26, 0x00	; 0
    fad6:	ed b7       	in	r30, 0x3d	; 61
    fad8:	fe b7       	in	r31, 0x3e	; 62
    fada:	81 83       	std	Z+1, r24	; 0x01
    fadc:	92 83       	std	Z+2, r25	; 0x02
    fade:	a3 83       	std	Z+3, r26	; 0x03
    fae0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    fae4:	cd b7       	in	r28, 0x3d	; 61
    fae6:	de b7       	in	r29, 0x3e	; 62
    fae8:	23 96       	adiw	r28, 0x03	; 3
    faea:	e2 e0       	ldi	r30, 0x02	; 2
    faec:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

0000faf0 <copy>:
    faf0:	4f 92       	push	r4
    faf2:	5f 92       	push	r5
    faf4:	6f 92       	push	r6
    faf6:	8f 92       	push	r8
    faf8:	9f 92       	push	r9
    fafa:	af 92       	push	r10
    fafc:	bf 92       	push	r11
    fafe:	cf 92       	push	r12
    fb00:	df 92       	push	r13
    fb02:	ef 92       	push	r14
    fb04:	ff 92       	push	r15
    fb06:	0f 93       	push	r16
    fb08:	1f 93       	push	r17
    fb0a:	cf 93       	push	r28
    fb0c:	df 93       	push	r29
    fb0e:	ad b7       	in	r26, 0x3d	; 61
    fb10:	be b7       	in	r27, 0x3e	; 62
    fb12:	17 97       	sbiw	r26, 0x07	; 7
    fb14:	0f b6       	in	r0, 0x3f	; 63
    fb16:	f8 94       	cli
    fb18:	be bf       	out	0x3e, r27	; 62
    fb1a:	0f be       	out	0x3f, r0	; 63
    fb1c:	ad bf       	out	0x3d, r26	; 61
    fb1e:	8c 01       	movw	r16, r24
    fb20:	eb 01       	movw	r28, r22
    fb22:	ed b7       	in	r30, 0x3d	; 61
    fb24:	fe b7       	in	r31, 0x3e	; 62
    fb26:	95 83       	std	Z+5, r25	; 0x05
    fb28:	84 83       	std	Z+4, r24	; 0x04
    fb2a:	8c ee       	ldi	r24, 0xEC	; 236
    fb2c:	9c e0       	ldi	r25, 0x0C	; 12
    fb2e:	a0 e0       	ldi	r26, 0x00	; 0
    fb30:	81 83       	std	Z+1, r24	; 0x01
    fb32:	92 83       	std	Z+2, r25	; 0x02
    fb34:	a3 83       	std	Z+3, r26	; 0x03
    fb36:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    fb3a:	6e ef       	ldi	r22, 0xFE	; 254
    fb3c:	78 e0       	ldi	r23, 0x08	; 8
    fb3e:	c8 01       	movw	r24, r16
    fb40:	8a df       	rcall	.-236    	; 0xfa56 <fopen>
    fb42:	7c 01       	movw	r14, r24
    fb44:	ed b7       	in	r30, 0x3d	; 61
    fb46:	fe b7       	in	r31, 0x3e	; 62
    fb48:	89 2b       	or	r24, r25
    fb4a:	59 f4       	brne	.+22     	; 0xfb62 <copy+0x72>
    fb4c:	15 83       	std	Z+5, r17	; 0x05
    fb4e:	04 83       	std	Z+4, r16	; 0x04
    fb50:	8c ed       	ldi	r24, 0xDC	; 220
    fb52:	9c e0       	ldi	r25, 0x0C	; 12
    fb54:	a0 e0       	ldi	r26, 0x00	; 0
    fb56:	81 83       	std	Z+1, r24	; 0x01
    fb58:	92 83       	std	Z+2, r25	; 0x02
    fb5a:	a3 83       	std	Z+3, r26	; 0x03
    fb5c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    fb60:	20 c0       	rjmp	.+64     	; 0xfba2 <copy+0xb2>
    fb62:	d5 83       	std	Z+5, r29	; 0x05
    fb64:	c4 83       	std	Z+4, r28	; 0x04
    fb66:	8f ec       	ldi	r24, 0xCF	; 207
    fb68:	9c e0       	ldi	r25, 0x0C	; 12
    fb6a:	a0 e0       	ldi	r26, 0x00	; 0
    fb6c:	81 83       	std	Z+1, r24	; 0x01
    fb6e:	92 83       	std	Z+2, r25	; 0x02
    fb70:	a3 83       	std	Z+3, r26	; 0x03
    fb72:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    fb76:	6c e0       	ldi	r22, 0x0C	; 12
    fb78:	79 e0       	ldi	r23, 0x09	; 9
    fb7a:	ce 01       	movw	r24, r28
    fb7c:	6c df       	rcall	.-296    	; 0xfa56 <fopen>
    fb7e:	8c 01       	movw	r16, r24
    fb80:	89 2b       	or	r24, r25
    fb82:	a1 f4       	brne	.+40     	; 0xfbac <copy+0xbc>
    fb84:	ed b7       	in	r30, 0x3d	; 61
    fb86:	fe b7       	in	r31, 0x3e	; 62
    fb88:	d5 83       	std	Z+5, r29	; 0x05
    fb8a:	c4 83       	std	Z+4, r28	; 0x04
    fb8c:	8f eb       	ldi	r24, 0xBF	; 191
    fb8e:	9c e0       	ldi	r25, 0x0C	; 12
    fb90:	a0 e0       	ldi	r26, 0x00	; 0
    fb92:	81 83       	std	Z+1, r24	; 0x01
    fb94:	92 83       	std	Z+2, r25	; 0x02
    fb96:	a3 83       	std	Z+3, r26	; 0x03
    fb98:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    fb9c:	80 e0       	ldi	r24, 0x00	; 0
    fb9e:	90 e0       	ldi	r25, 0x00	; 0
    fba0:	04 de       	rcall	.-1016   	; 0xf7aa <fclose>
    fba2:	60 e0       	ldi	r22, 0x00	; 0
    fba4:	70 e0       	ldi	r23, 0x00	; 0
    fba6:	80 e0       	ldi	r24, 0x00	; 0
    fba8:	90 e0       	ldi	r25, 0x00	; 0
    fbaa:	68 c0       	rjmp	.+208    	; 0xfc7c <copy+0x18c>
    fbac:	61 e0       	ldi	r22, 0x01	; 1
    fbae:	70 e0       	ldi	r23, 0x00	; 0
    fbb0:	80 e0       	ldi	r24, 0x00	; 0
    fbb2:	92 e0       	ldi	r25, 0x02	; 2
    fbb4:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <safecalloc>
    fbb8:	6c 01       	movw	r12, r24
    fbba:	89 2b       	or	r24, r25
    fbbc:	21 f4       	brne	.+8      	; 0xfbc6 <copy+0xd6>
    fbbe:	c7 01       	movw	r24, r14
    fbc0:	f4 dd       	rcall	.-1048   	; 0xf7aa <fclose>
    fbc2:	c8 01       	movw	r24, r16
    fbc4:	ed cf       	rjmp	.-38     	; 0xfba0 <copy+0xb0>
    fbc6:	82 eb       	ldi	r24, 0xB2	; 178
    fbc8:	9c e0       	ldi	r25, 0x0C	; 12
    fbca:	a0 e0       	ldi	r26, 0x00	; 0
    fbcc:	ed b7       	in	r30, 0x3d	; 61
    fbce:	fe b7       	in	r31, 0x3e	; 62
    fbd0:	81 83       	std	Z+1, r24	; 0x01
    fbd2:	92 83       	std	Z+2, r25	; 0x02
    fbd4:	a3 83       	std	Z+3, r26	; 0x03
    fbd6:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    fbda:	81 2c       	mov	r8, r1
    fbdc:	91 2c       	mov	r9, r1
    fbde:	54 01       	movw	r10, r8
    fbe0:	86 e9       	ldi	r24, 0x96	; 150
    fbe2:	9c e0       	ldi	r25, 0x0C	; 12
    fbe4:	2c 01       	movw	r4, r24
    fbe6:	61 2c       	mov	r6, r1
    fbe8:	97 01       	movw	r18, r14
    fbea:	40 e0       	ldi	r20, 0x00	; 0
    fbec:	52 e0       	ldi	r21, 0x02	; 2
    fbee:	61 e0       	ldi	r22, 0x01	; 1
    fbf0:	70 e0       	ldi	r23, 0x00	; 0
    fbf2:	c6 01       	movw	r24, r12
    fbf4:	86 dc       	rcall	.-1780   	; 0xf502 <fread>
    fbf6:	ec 01       	movw	r28, r24
    fbf8:	18 16       	cp	r1, r24
    fbfa:	19 06       	cpc	r1, r25
    fbfc:	44 f5       	brge	.+80     	; 0xfc4e <copy+0x15e>
    fbfe:	98 01       	movw	r18, r16
    fc00:	ae 01       	movw	r20, r28
    fc02:	61 e0       	ldi	r22, 0x01	; 1
    fc04:	70 e0       	ldi	r23, 0x00	; 0
    fc06:	c6 01       	movw	r24, r12
    fc08:	4e dd       	rcall	.-1380   	; 0xf6a6 <fwrite>
    fc0a:	8c 17       	cp	r24, r28
    fc0c:	9d 07       	cpc	r25, r29
    fc0e:	5c f4       	brge	.+22     	; 0xfc26 <copy+0x136>
    fc10:	85 ea       	ldi	r24, 0xA5	; 165
    fc12:	9c e0       	ldi	r25, 0x0C	; 12
    fc14:	a0 e0       	ldi	r26, 0x00	; 0
    fc16:	ed b7       	in	r30, 0x3d	; 61
    fc18:	fe b7       	in	r31, 0x3e	; 62
    fc1a:	81 83       	std	Z+1, r24	; 0x01
    fc1c:	92 83       	std	Z+2, r25	; 0x02
    fc1e:	a3 83       	std	Z+3, r26	; 0x03
    fc20:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    fc24:	14 c0       	rjmp	.+40     	; 0xfc4e <copy+0x15e>
    fc26:	ce 01       	movw	r24, r28
    fc28:	dd 0f       	add	r29, r29
    fc2a:	aa 0b       	sbc	r26, r26
    fc2c:	bb 0b       	sbc	r27, r27
    fc2e:	88 0e       	add	r8, r24
    fc30:	99 1e       	adc	r9, r25
    fc32:	aa 1e       	adc	r10, r26
    fc34:	bb 1e       	adc	r11, r27
    fc36:	ed b7       	in	r30, 0x3d	; 61
    fc38:	fe b7       	in	r31, 0x3e	; 62
    fc3a:	84 82       	std	Z+4, r8	; 0x04
    fc3c:	95 82       	std	Z+5, r9	; 0x05
    fc3e:	a6 82       	std	Z+6, r10	; 0x06
    fc40:	b7 82       	std	Z+7, r11	; 0x07
    fc42:	41 82       	std	Z+1, r4	; 0x01
    fc44:	52 82       	std	Z+2, r5	; 0x02
    fc46:	63 82       	std	Z+3, r6	; 0x03
    fc48:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    fc4c:	cd cf       	rjmp	.-102    	; 0xfbe8 <copy+0xf8>
    fc4e:	ed b7       	in	r30, 0x3d	; 61
    fc50:	fe b7       	in	r31, 0x3e	; 62
    fc52:	84 82       	std	Z+4, r8	; 0x04
    fc54:	95 82       	std	Z+5, r9	; 0x05
    fc56:	a6 82       	std	Z+6, r10	; 0x06
    fc58:	b7 82       	std	Z+7, r11	; 0x07
    fc5a:	83 e8       	ldi	r24, 0x83	; 131
    fc5c:	9c e0       	ldi	r25, 0x0C	; 12
    fc5e:	a0 e0       	ldi	r26, 0x00	; 0
    fc60:	81 83       	std	Z+1, r24	; 0x01
    fc62:	92 83       	std	Z+2, r25	; 0x02
    fc64:	a3 83       	std	Z+3, r26	; 0x03
    fc66:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    fc6a:	c6 01       	movw	r24, r12
    fc6c:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <safefree>
    fc70:	c7 01       	movw	r24, r14
    fc72:	9b dd       	rcall	.-1226   	; 0xf7aa <fclose>
    fc74:	c8 01       	movw	r24, r16
    fc76:	99 dd       	rcall	.-1230   	; 0xf7aa <fclose>
    fc78:	b4 01       	movw	r22, r8
    fc7a:	c5 01       	movw	r24, r10
    fc7c:	ad b7       	in	r26, 0x3d	; 61
    fc7e:	be b7       	in	r27, 0x3e	; 62
    fc80:	17 96       	adiw	r26, 0x07	; 7
    fc82:	0f b6       	in	r0, 0x3f	; 63
    fc84:	f8 94       	cli
    fc86:	be bf       	out	0x3e, r27	; 62
    fc88:	0f be       	out	0x3f, r0	; 63
    fc8a:	ad bf       	out	0x3d, r26	; 61
    fc8c:	df 91       	pop	r29
    fc8e:	cf 91       	pop	r28
    fc90:	1f 91       	pop	r17
    fc92:	0f 91       	pop	r16
    fc94:	ff 90       	pop	r15
    fc96:	ef 90       	pop	r14
    fc98:	df 90       	pop	r13
    fc9a:	cf 90       	pop	r12
    fc9c:	bf 90       	pop	r11
    fc9e:	af 90       	pop	r10
    fca0:	9f 90       	pop	r9
    fca2:	8f 90       	pop	r8
    fca4:	6f 90       	pop	r6
    fca6:	5f 90       	pop	r5
    fca8:	4f 90       	pop	r4
    fcaa:	08 95       	ret

0000fcac <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    fcac:	cf 93       	push	r28
    fcae:	df 93       	push	r29
    fcb0:	00 d0       	rcall	.+0      	; 0xfcb2 <testpage+0x6>
    fcb2:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
    fcb4:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
    fcb8:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
    fcbc:	82 17       	cp	r24, r18
    fcbe:	93 07       	cpc	r25, r19
    fcc0:	3c f1       	brlt	.+78     	; 0xfd10 <testpage+0x64>
    {
        printf("More..");
    fcc2:	8c e7       	ldi	r24, 0x7C	; 124
    fcc4:	9c e0       	ldi	r25, 0x0C	; 12
    fcc6:	a0 e0       	ldi	r26, 0x00	; 0
    fcc8:	ed b7       	in	r30, 0x3d	; 61
    fcca:	fe b7       	in	r31, 0x3e	; 62
    fccc:	81 83       	std	Z+1, r24	; 0x01
    fcce:	92 83       	std	Z+2, r25	; 0x02
    fcd0:	a3 83       	std	Z+3, r26	; 0x03
    fcd2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    fcd6:	0e 94 37 75 	call	0xea6e	; 0xea6e <getchar>
    fcda:	ec 01       	movw	r28, r24
        printf("\r");
    fcdc:	8a e7       	ldi	r24, 0x7A	; 122
    fcde:	9c e0       	ldi	r25, 0x0C	; 12
    fce0:	a0 e0       	ldi	r26, 0x00	; 0
    fce2:	ed b7       	in	r30, 0x3d	; 61
    fce4:	fe b7       	in	r31, 0x3e	; 62
    fce6:	81 83       	std	Z+1, r24	; 0x01
    fce8:	92 83       	std	Z+2, r25	; 0x02
    fcea:	a3 83       	std	Z+3, r26	; 0x03
    fcec:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        if(c == 'q')
    fcf0:	c1 37       	cpi	r28, 0x71	; 113
    fcf2:	d1 05       	cpc	r29, r1
    fcf4:	41 f0       	breq	.+16     	; 0xfd06 <testpage+0x5a>
            return(-1);                           // quit
        if(c == '\n')
    fcf6:	2a 97       	sbiw	r28, 0x0a	; 10
    fcf8:	49 f4       	brne	.+18     	; 0xfd0c <testpage+0x60>
            return(_pagesize-1);                  // single line
    fcfa:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
    fcfe:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
    fd02:	01 97       	sbiw	r24, 0x01	; 1
    fd04:	05 c0       	rjmp	.+10     	; 0xfd10 <testpage+0x64>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);                           // quit
    fd06:	8f ef       	ldi	r24, 0xFF	; 255
    fd08:	9f ef       	ldi	r25, 0xFF	; 255
    fd0a:	02 c0       	rjmp	.+4      	; 0xfd10 <testpage+0x64>
        if(c == '\n')
            return(_pagesize-1);                  // single line
        return(0);                                // new page
    fd0c:	80 e0       	ldi	r24, 0x00	; 0
    fd0e:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    fd10:	cd b7       	in	r28, 0x3d	; 61
    fd12:	de b7       	in	r29, 0x3e	; 62
    fd14:	23 96       	adiw	r28, 0x03	; 3
    fd16:	e2 e0       	ldi	r30, 0x02	; 2
    fd18:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

0000fd1c <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
    fd1c:	a7 e0       	ldi	r26, 0x07	; 7
    fd1e:	b1 e0       	ldi	r27, 0x01	; 1
    fd20:	e4 e9       	ldi	r30, 0x94	; 148
    fd22:	fe e7       	ldi	r31, 0x7E	; 126
    fd24:	0c 94 44 e3 	jmp	0x1c688	; 0x1c688 <__prologue_saves__+0xc>
    fd28:	8c 01       	movw	r16, r24
    fd2a:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    fd2c:	6e ef       	ldi	r22, 0xFE	; 254
    fd2e:	78 e0       	ldi	r23, 0x08	; 8
    fd30:	92 de       	rcall	.-732    	; 0xfa56 <fopen>
    fd32:	7c 01       	movw	r14, r24
    if (!fp)
    fd34:	89 2b       	or	r24, r25
    fd36:	41 f0       	breq	.+16     	; 0xfd48 <cat+0x2c>
    fd38:	c1 2c       	mov	r12, r1
    fd3a:	d1 2c       	mov	r13, r1
    fd3c:	a1 2c       	mov	r10, r1
    fd3e:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fd40:	8e 01       	movw	r16, r28
    fd42:	08 5f       	subi	r16, 0xF8	; 248
    fd44:	1f 4f       	sbci	r17, 0xFF	; 255
    fd46:	22 c0       	rjmp	.+68     	; 0xfd8c <cat+0x70>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
    fd48:	ed b7       	in	r30, 0x3d	; 61
    fd4a:	fe b7       	in	r31, 0x3e	; 62
    fd4c:	15 83       	std	Z+5, r17	; 0x05
    fd4e:	04 83       	std	Z+4, r16	; 0x04
    fd50:	85 e0       	ldi	r24, 0x05	; 5
    fd52:	9d e0       	ldi	r25, 0x0D	; 13
    fd54:	a0 e0       	ldi	r26, 0x00	; 0
    fd56:	81 83       	std	Z+1, r24	; 0x01
    fd58:	92 83       	std	Z+2, r25	; 0x02
    fd5a:	a3 83       	std	Z+3, r26	; 0x03
    fd5c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        return(0);
    fd60:	c1 2c       	mov	r12, r1
    fd62:	d1 2c       	mov	r13, r1
    fd64:	76 01       	movw	r14, r12
    fd66:	3f c0       	rjmp	.+126    	; 0xfde6 <cat+0xca>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
    fd68:	c8 01       	movw	r24, r16
    fd6a:	0e 94 22 30 	call	0x6044	; 0x6044 <trim_tail>
        size += strlen(line);
    fd6e:	f8 01       	movw	r30, r16
    fd70:	01 90       	ld	r0, Z+
    fd72:	00 20       	and	r0, r0
    fd74:	e9 f7       	brne	.-6      	; 0xfd70 <cat+0x54>
    fd76:	31 97       	sbiw	r30, 0x01	; 1
    fd78:	e0 1b       	sub	r30, r16
    fd7a:	f1 0b       	sbc	r31, r17
    fd7c:	ce 0e       	add	r12, r30
    fd7e:	df 1e       	adc	r13, r31
        puts(line);
    fd80:	c8 01       	movw	r24, r16
    fd82:	0e 94 8f 75 	call	0xeb1e	; 0xeb1e <puts>
        if(dopage)
    fd86:	81 14       	cp	r8, r1
    fd88:	91 04       	cpc	r9, r1
    fd8a:	49 f4       	brne	.+18     	; 0xfd9e <cat+0x82>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fd8c:	a7 01       	movw	r20, r14
    fd8e:	6e ef       	ldi	r22, 0xFE	; 254
    fd90:	70 e0       	ldi	r23, 0x00	; 0
    fd92:	c8 01       	movw	r24, r16
    fd94:	0e 94 43 75 	call	0xea86	; 0xea86 <fgets>
    fd98:	89 2b       	or	r24, r25
    fd9a:	31 f7       	brne	.-52     	; 0xfd68 <cat+0x4c>
    fd9c:	06 c0       	rjmp	.+12     	; 0xfdaa <cat+0x8e>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
    fd9e:	c5 01       	movw	r24, r10
    fda0:	01 96       	adiw	r24, 0x01	; 1
    fda2:	84 df       	rcall	.-248    	; 0xfcac <testpage>
    fda4:	5c 01       	movw	r10, r24
            if(count < 0)
    fda6:	97 ff       	sbrs	r25, 7
    fda8:	f1 cf       	rjmp	.-30     	; 0xfd8c <cat+0x70>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
    fdaa:	83 e0       	ldi	r24, 0x03	; 3
    fdac:	9d e0       	ldi	r25, 0x0D	; 13
    fdae:	a0 e0       	ldi	r26, 0x00	; 0
    fdb0:	ed b7       	in	r30, 0x3d	; 61
    fdb2:	fe b7       	in	r31, 0x3e	; 62
    fdb4:	81 83       	std	Z+1, r24	; 0x01
    fdb6:	92 83       	std	Z+2, r25	; 0x02
    fdb8:	a3 83       	std	Z+3, r26	; 0x03
    fdba:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    fclose(fp);
    fdbe:	c7 01       	movw	r24, r14
    fdc0:	f4 dc       	rcall	.-1560   	; 0xf7aa <fclose>
    printf("%ld bytes\n", (long)size);
    fdc2:	0d 2c       	mov	r0, r13
    fdc4:	00 0c       	add	r0, r0
    fdc6:	ee 08       	sbc	r14, r14
    fdc8:	ff 08       	sbc	r15, r15
    fdca:	ed b7       	in	r30, 0x3d	; 61
    fdcc:	fe b7       	in	r31, 0x3e	; 62
    fdce:	c4 82       	std	Z+4, r12	; 0x04
    fdd0:	d5 82       	std	Z+5, r13	; 0x05
    fdd2:	e6 82       	std	Z+6, r14	; 0x06
    fdd4:	f7 82       	std	Z+7, r15	; 0x07
    fdd6:	88 ef       	ldi	r24, 0xF8	; 248
    fdd8:	9c e0       	ldi	r25, 0x0C	; 12
    fdda:	a0 e0       	ldi	r26, 0x00	; 0
    fddc:	81 83       	std	Z+1, r24	; 0x01
    fdde:	92 83       	std	Z+2, r25	; 0x02
    fde0:	a3 83       	std	Z+3, r26	; 0x03
    fde2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    return(size);
}
    fde6:	c7 01       	movw	r24, r14
    fde8:	b6 01       	movw	r22, r12
    fdea:	c9 5f       	subi	r28, 0xF9	; 249
    fdec:	de 4f       	sbci	r29, 0xFE	; 254
    fdee:	ec e0       	ldi	r30, 0x0C	; 12
    fdf0:	0c 94 60 e3 	jmp	0x1c6c0	; 0x1c6c0 <__epilogue_restores__+0xc>

0000fdf4 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fdf4:	4f 92       	push	r4
    fdf6:	5f 92       	push	r5
    fdf8:	6f 92       	push	r6
    fdfa:	7f 92       	push	r7
    fdfc:	af 92       	push	r10
    fdfe:	bf 92       	push	r11
    fe00:	cf 92       	push	r12
    fe02:	df 92       	push	r13
    fe04:	ef 92       	push	r14
    fe06:	ff 92       	push	r15
    fe08:	0f 93       	push	r16
    fe0a:	1f 93       	push	r17
    fe0c:	cf 93       	push	r28
    fe0e:	df 93       	push	r29
    fe10:	cd b7       	in	r28, 0x3d	; 61
    fe12:	de b7       	in	r29, 0x3e	; 62
    fe14:	c9 54       	subi	r28, 0x49	; 73
    fe16:	d1 09       	sbc	r29, r1
    fe18:	0f b6       	in	r0, 0x3f	; 63
    fe1a:	f8 94       	cli
    fe1c:	de bf       	out	0x3e, r29	; 62
    fe1e:	0f be       	out	0x3f, r0	; 63
    fe20:	cd bf       	out	0x3d, r28	; 61
    fe22:	8c 01       	movw	r16, r24
    fe24:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
    fe26:	be 01       	movw	r22, r28
    fe28:	62 5f       	subi	r22, 0xF2	; 242
    fe2a:	7f 4f       	sbci	r23, 0xFF	; 255
    fe2c:	19 d9       	rcall	.-3534   	; 0xf060 <stat>
    fe2e:	01 96       	adiw	r24, 0x01	; 1
    fe30:	79 f4       	brne	.+30     	; 0xfe50 <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
    fe32:	ed b7       	in	r30, 0x3d	; 61
    fe34:	fe b7       	in	r31, 0x3e	; 62
    fe36:	15 83       	std	Z+5, r17	; 0x05
    fe38:	04 83       	std	Z+4, r16	; 0x04
    fe3a:	88 e6       	ldi	r24, 0x68	; 104
    fe3c:	9c e0       	ldi	r25, 0x0C	; 12
    fe3e:	a0 e0       	ldi	r26, 0x00	; 0
    fe40:	81 83       	std	Z+1, r24	; 0x01
    fe42:	92 83       	std	Z+2, r25	; 0x02
    fe44:	a3 83       	std	Z+3, r26	; 0x03
    fe46:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        return(0);
    fe4a:	80 e0       	ldi	r24, 0x00	; 0
    fe4c:	90 e0       	ldi	r25, 0x00	; 0
    fe4e:	77 c0       	rjmp	.+238    	; 0xff3e <__DATA_REGION_LENGTH__+0x3e>
    }

    if(!verbose)
    fe50:	ef 28       	or	r14, r15
    fe52:	81 f4       	brne	.+32     	; 0xfe74 <ls_info+0x80>
    {
        printf("%s\n",basename(name));
    fe54:	c8 01       	movw	r24, r16
    fe56:	0e 94 fc 75 	call	0xebf8	; 0xebf8 <basename>
    fe5a:	ed b7       	in	r30, 0x3d	; 61
    fe5c:	fe b7       	in	r31, 0x3e	; 62
    fe5e:	95 83       	std	Z+5, r25	; 0x05
    fe60:	84 83       	std	Z+4, r24	; 0x04
    fe62:	84 e6       	ldi	r24, 0x64	; 100
    fe64:	9c e0       	ldi	r25, 0x0C	; 12
    fe66:	a0 e0       	ldi	r26, 0x00	; 0
    fe68:	81 83       	std	Z+1, r24	; 0x01
    fe6a:	92 83       	std	Z+2, r25	; 0x02
    fe6c:	a3 83       	std	Z+3, r26	; 0x03
    fe6e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    fe72:	63 c0       	rjmp	.+198    	; 0xff3a <__DATA_REGION_LENGTH__+0x3a>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
    fe74:	4e 88       	ldd	r4, Y+22	; 0x16
    fe76:	5f 88       	ldd	r5, Y+23	; 0x17
    fe78:	68 8c       	ldd	r6, Y+24	; 0x18
    fe7a:	79 8c       	ldd	r7, Y+25	; 0x19
    fe7c:	d3 01       	movw	r26, r6
    fe7e:	c2 01       	movw	r24, r4
    fe80:	88 27       	eor	r24, r24
    fe82:	90 7f       	andi	r25, 0xF0	; 240
    fe84:	aa 27       	eor	r26, r26
    fe86:	bb 27       	eor	r27, r27
    fe88:	81 15       	cp	r24, r1
    fe8a:	90 44       	sbci	r25, 0x40	; 64
    fe8c:	a1 05       	cpc	r26, r1
    fe8e:	b1 05       	cpc	r27, r1
    fe90:	11 f4       	brne	.+4      	; 0xfe96 <ls_info+0xa2>
        *p++ = 'd';
    fe92:	84 e6       	ldi	r24, 0x64	; 100
    fe94:	01 c0       	rjmp	.+2      	; 0xfe98 <ls_info+0xa4>
    else
        *p++ = '-';
    fe96:	8d e2       	ldi	r24, 0x2D	; 45
    fe98:	8e af       	std	Y+62, r24	; 0x3e
    fe9a:	fe 01       	movw	r30, r28
    fe9c:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fe9e:	e1 2c       	mov	r14, r1
    fea0:	ff 24       	eor	r15, r15
    fea2:	f3 94       	inc	r15
    fea4:	20 e0       	ldi	r18, 0x00	; 0
    fea6:	30 e0       	ldi	r19, 0x00	; 0
    fea8:	be 2e       	mov	r11, r30
    feaa:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
    feac:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
    feae:	53 e0       	ldi	r21, 0x03	; 3
    feb0:	c5 2e       	mov	r12, r21
    feb2:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
    feb4:	c7 01       	movw	r24, r14
    feb6:	a0 e0       	ldi	r26, 0x00	; 0
    feb8:	b0 e0       	ldi	r27, 0x00	; 0
    feba:	84 21       	and	r24, r4
    febc:	95 21       	and	r25, r5
    febe:	a6 21       	and	r26, r6
    fec0:	b7 21       	and	r27, r7
    fec2:	89 2b       	or	r24, r25
    fec4:	8a 2b       	or	r24, r26
    fec6:	8b 2b       	or	r24, r27
    fec8:	51 f0       	breq	.+20     	; 0xfede <ls_info+0xea>
            *p++ = cm[ i % 3];
    feca:	c9 01       	movw	r24, r18
    fecc:	b6 01       	movw	r22, r12
    fece:	0e 94 be e2 	call	0x1c57c	; 0x1c57c <__divmodhi4>
    fed2:	dc 01       	movw	r26, r24
    fed4:	a6 54       	subi	r26, 0x46	; 70
    fed6:	b4 4f       	sbci	r27, 0xF4	; 244
    fed8:	8c 91       	ld	r24, X
    feda:	81 83       	std	Z+1, r24	; 0x01
    fedc:	01 c0       	rjmp	.+2      	; 0xfee0 <ls_info+0xec>
        else
            *p++ = '-';
    fede:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
    fee0:	f6 94       	lsr	r15
    fee2:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
    fee4:	2f 5f       	subi	r18, 0xFF	; 255
    fee6:	3f 4f       	sbci	r19, 0xFF	; 255
    fee8:	31 96       	adiw	r30, 0x01	; 1
    feea:	29 30       	cpi	r18, 0x09	; 9
    feec:	31 05       	cpc	r19, r1
    feee:	11 f7       	brne	.-60     	; 0xfeb4 <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
    fef0:	29 96       	adiw	r28, 0x09	; 9
    fef2:	1f ae       	std	Y+63, r1	; 0x3f
    fef4:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
    fef6:	4e a0       	ldd	r4, Y+38	; 0x26
    fef8:	5f a0       	ldd	r5, Y+39	; 0x27
    fefa:	68 a4       	ldd	r6, Y+40	; 0x28
    fefc:	79 a4       	ldd	r7, Y+41	; 0x29
    fefe:	6e a9       	ldd	r22, Y+54	; 0x36
    ff00:	7f a9       	ldd	r23, Y+55	; 0x37
    ff02:	88 ad       	ldd	r24, Y+56	; 0x38
    ff04:	99 ad       	ldd	r25, Y+57	; 0x39
    ff06:	0e 94 d7 75 	call	0xebae	; 0xebae <mctime>
    ff0a:	7c 01       	movw	r14, r24
    ff0c:	c8 01       	movw	r24, r16
    ff0e:	0e 94 fc 75 	call	0xebf8	; 0xebf8 <basename>
    ff12:	ed b7       	in	r30, 0x3d	; 61
    ff14:	fe b7       	in	r31, 0x3e	; 62
    ff16:	95 87       	std	Z+13, r25	; 0x0d
    ff18:	84 87       	std	Z+12, r24	; 0x0c
    ff1a:	f3 86       	std	Z+11, r15	; 0x0b
    ff1c:	e2 86       	std	Z+10, r14	; 0x0a
    ff1e:	46 82       	std	Z+6, r4	; 0x06
    ff20:	57 82       	std	Z+7, r5	; 0x07
    ff22:	60 86       	std	Z+8, r6	; 0x08
    ff24:	71 86       	std	Z+9, r7	; 0x09
    ff26:	b4 82       	std	Z+4, r11	; 0x04
    ff28:	a5 82       	std	Z+5, r10	; 0x05
    ff2a:	8a e4       	ldi	r24, 0x4A	; 74
    ff2c:	9c e0       	ldi	r25, 0x0C	; 12
    ff2e:	a0 e0       	ldi	r26, 0x00	; 0
    ff30:	81 83       	std	Z+1, r24	; 0x01
    ff32:	92 83       	std	Z+2, r25	; 0x02
    ff34:	a3 83       	std	Z+3, r26	; 0x03
    ff36:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
    ff3a:	81 e0       	ldi	r24, 0x01	; 1
    ff3c:	90 e0       	ldi	r25, 0x00	; 0
}
    ff3e:	c7 5b       	subi	r28, 0xB7	; 183
    ff40:	df 4f       	sbci	r29, 0xFF	; 255
    ff42:	0f b6       	in	r0, 0x3f	; 63
    ff44:	f8 94       	cli
    ff46:	de bf       	out	0x3e, r29	; 62
    ff48:	0f be       	out	0x3f, r0	; 63
    ff4a:	cd bf       	out	0x3d, r28	; 61
    ff4c:	df 91       	pop	r29
    ff4e:	cf 91       	pop	r28
    ff50:	1f 91       	pop	r17
    ff52:	0f 91       	pop	r16
    ff54:	ff 90       	pop	r15
    ff56:	ef 90       	pop	r14
    ff58:	df 90       	pop	r13
    ff5a:	cf 90       	pop	r12
    ff5c:	bf 90       	pop	r11
    ff5e:	af 90       	pop	r10
    ff60:	7f 90       	pop	r7
    ff62:	6f 90       	pop	r6
    ff64:	5f 90       	pop	r5
    ff66:	4f 90       	pop	r4
    ff68:	08 95       	ret

0000ff6a <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
    ff6a:	2f 92       	push	r2
    ff6c:	3f 92       	push	r3
    ff6e:	4f 92       	push	r4
    ff70:	5f 92       	push	r5
    ff72:	6f 92       	push	r6
    ff74:	8f 92       	push	r8
    ff76:	9f 92       	push	r9
    ff78:	af 92       	push	r10
    ff7a:	bf 92       	push	r11
    ff7c:	cf 92       	push	r12
    ff7e:	df 92       	push	r13
    ff80:	ef 92       	push	r14
    ff82:	ff 92       	push	r15
    ff84:	0f 93       	push	r16
    ff86:	1f 93       	push	r17
    ff88:	cf 93       	push	r28
    ff8a:	df 93       	push	r29
    ff8c:	cd b7       	in	r28, 0x3d	; 61
    ff8e:	de b7       	in	r29, 0x3e	; 62
    ff90:	c7 53       	subi	r28, 0x37	; 55
    ff92:	d1 40       	sbci	r29, 0x01	; 1
    ff94:	0f b6       	in	r0, 0x3f	; 63
    ff96:	f8 94       	cli
    ff98:	de bf       	out	0x3e, r29	; 62
    ff9a:	0f be       	out	0x3f, r0	; 63
    ff9c:	cd bf       	out	0x3d, r28	; 61
    ff9e:	7c 01       	movw	r14, r24
    ffa0:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    ffa2:	1e 82       	std	Y+6, r1	; 0x06
    ffa4:	8e 01       	movw	r16, r28
    ffa6:	0a 5f       	subi	r16, 0xFA	; 250
    ffa8:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
    ffaa:	00 97       	sbiw	r24, 0x00	; 0
    ffac:	91 f4       	brne	.+36     	; 0xffd2 <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
    ffae:	6e ef       	ldi	r22, 0xFE	; 254
    ffb0:	70 e0       	ldi	r23, 0x00	; 0
    ffb2:	c8 01       	movw	r24, r16
    ffb4:	0e 94 52 76 	call	0xeca4	; 0xeca4 <getcwd>
    ffb8:	89 2b       	or	r24, r25
    ffba:	d1 f4       	brne	.+52     	; 0xfff0 <ls+0x86>
        {
            printf("ls: Can't get current directory\n");
    ffbc:	89 e2       	ldi	r24, 0x29	; 41
    ffbe:	9c e0       	ldi	r25, 0x0C	; 12
    ffc0:	a0 e0       	ldi	r26, 0x00	; 0
    ffc2:	ed b7       	in	r30, 0x3d	; 61
    ffc4:	fe b7       	in	r31, 0x3e	; 62
    ffc6:	81 83       	std	Z+1, r24	; 0x01
    ffc8:	92 83       	std	Z+2, r25	; 0x02
    ffca:	a3 83       	std	Z+3, r26	; 0x03
    ffcc:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    ffd0:	37 c0       	rjmp	.+110    	; 0x10040 <__EEPROM_REGION_LENGTH__+0x40>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
    ffd2:	fc 01       	movw	r30, r24
    ffd4:	80 81       	ld	r24, Z
    ffd6:	88 23       	and	r24, r24
    ffd8:	51 f3       	breq	.-44     	; 0xffae <ls+0x44>
    ffda:	6d ef       	ldi	r22, 0xFD	; 253
    ffdc:	72 e1       	ldi	r23, 0x12	; 18
    ffde:	c7 01       	movw	r24, r14
    ffe0:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
    ffe4:	89 2b       	or	r24, r25
    ffe6:	19 f7       	brne	.-58     	; 0xffae <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
    ffe8:	b7 01       	movw	r22, r14
    ffea:	c8 01       	movw	r24, r16
    ffec:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <strcpy>
    }
    len = strlen(fullpath);
    fff0:	f8 01       	movw	r30, r16
    fff2:	01 90       	ld	r0, Z+
    fff4:	00 20       	and	r0, r0
    fff6:	e9 f7       	brne	.-6      	; 0xfff2 <ls+0x88>
    fff8:	31 97       	sbiw	r30, 0x01	; 1
    fffa:	1f 01       	movw	r2, r30
    fffc:	20 1a       	sub	r2, r16
    fffe:	31 0a       	sbc	r3, r17

    printf("Listing:[%s]\n",fullpath);
   10000:	ed b7       	in	r30, 0x3d	; 61
   10002:	fe b7       	in	r31, 0x3e	; 62
   10004:	15 83       	std	Z+5, r17	; 0x05
   10006:	04 83       	std	Z+4, r16	; 0x04
   10008:	8b e1       	ldi	r24, 0x1B	; 27
   1000a:	9c e0       	ldi	r25, 0x0C	; 12
   1000c:	a0 e0       	ldi	r26, 0x00	; 0
   1000e:	81 83       	std	Z+1, r24	; 0x01
   10010:	92 83       	std	Z+2, r25	; 0x02
   10012:	a3 83       	std	Z+3, r26	; 0x03
   10014:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

    if (stat(fullpath, &st))
   10018:	be 01       	movw	r22, r28
   1001a:	6a 5f       	subi	r22, 0xFA	; 250
   1001c:	7e 4f       	sbci	r23, 0xFE	; 254
   1001e:	c8 01       	movw	r24, r16
   10020:	1f d8       	rcall	.-4034   	; 0xf060 <stat>
   10022:	7c 01       	movw	r14, r24
   10024:	89 2b       	or	r24, r25
   10026:	79 f0       	breq	.+30     	; 0x10046 <__EEPROM_REGION_LENGTH__+0x46>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   10028:	ed b7       	in	r30, 0x3d	; 61
   1002a:	fe b7       	in	r31, 0x3e	; 62
   1002c:	15 83       	std	Z+5, r17	; 0x05
   1002e:	04 83       	std	Z+4, r16	; 0x04
   10030:	85 e0       	ldi	r24, 0x05	; 5
   10032:	9c e0       	ldi	r25, 0x0C	; 12
   10034:	a0 e0       	ldi	r26, 0x00	; 0
   10036:	81 83       	std	Z+1, r24	; 0x01
   10038:	92 83       	std	Z+2, r25	; 0x02
   1003a:	a3 83       	std	Z+3, r26	; 0x03
   1003c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        return(0);
   10040:	e1 2c       	mov	r14, r1
   10042:	f1 2c       	mov	r15, r1
   10044:	8c c0       	rjmp	.+280    	; 0x1015e <__EEPROM_REGION_LENGTH__+0x15e>
    }

    switch (st.st_mode & S_IFMT)
   10046:	c2 5f       	subi	r28, 0xF2	; 242
   10048:	de 4f       	sbci	r29, 0xFE	; 254
   1004a:	88 81       	ld	r24, Y
   1004c:	99 81       	ldd	r25, Y+1	; 0x01
   1004e:	aa 81       	ldd	r26, Y+2	; 0x02
   10050:	bb 81       	ldd	r27, Y+3	; 0x03
   10052:	ce 50       	subi	r28, 0x0E	; 14
   10054:	d1 40       	sbci	r29, 0x01	; 1
   10056:	88 27       	eor	r24, r24
   10058:	90 7f       	andi	r25, 0xF0	; 240
   1005a:	aa 27       	eor	r26, r26
   1005c:	bb 27       	eor	r27, r27
   1005e:	81 15       	cp	r24, r1
   10060:	f0 e4       	ldi	r31, 0x40	; 64
   10062:	9f 07       	cpc	r25, r31
   10064:	a1 05       	cpc	r26, r1
   10066:	b1 05       	cpc	r27, r1
   10068:	59 f0       	breq	.+22     	; 0x10080 <__EEPROM_REGION_LENGTH__+0x80>
   1006a:	81 15       	cp	r24, r1
   1006c:	90 48       	sbci	r25, 0x80	; 128
   1006e:	a1 05       	cpc	r26, r1
   10070:	b1 05       	cpc	r27, r1
   10072:	09 f0       	breq	.+2      	; 0x10076 <__EEPROM_REGION_LENGTH__+0x76>
   10074:	66 c0       	rjmp	.+204    	; 0x10142 <__EEPROM_REGION_LENGTH__+0x142>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
   10076:	b4 01       	movw	r22, r8
   10078:	c8 01       	movw	r24, r16
   1007a:	bc de       	rcall	.-648    	; 0xfdf4 <ls_info>
   1007c:	7c 01       	movw	r14, r24
            break;
   1007e:	63 c0       	rjmp	.+198    	; 0x10146 <__EEPROM_REGION_LENGTH__+0x146>
        case S_IFDIR:
            dirp = opendir(fullpath);
   10080:	c8 01       	movw	r24, r16
   10082:	0e 94 00 77 	call	0xee00	; 0xee00 <opendir>
   10086:	5c 01       	movw	r10, r24
            if(!dirp)
   10088:	89 2b       	or	r24, r25
   1008a:	81 f0       	breq	.+32     	; 0x100ac <__EEPROM_REGION_LENGTH__+0xac>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   1008c:	e1 2c       	mov	r14, r1
   1008e:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
   10090:	c8 01       	movw	r24, r16
   10092:	82 0d       	add	r24, r2
   10094:	93 1d       	adc	r25, r3
   10096:	ca 5c       	subi	r28, 0xCA	; 202
   10098:	de 4f       	sbci	r29, 0xFE	; 254
   1009a:	99 83       	std	Y+1, r25	; 0x01
   1009c:	88 83       	st	Y, r24
   1009e:	c6 53       	subi	r28, 0x36	; 54
   100a0:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   100a2:	82 ed       	ldi	r24, 0xD2	; 210
   100a4:	9b e0       	ldi	r25, 0x0B	; 11
   100a6:	2c 01       	movw	r4, r24
   100a8:	61 2c       	mov	r6, r1
   100aa:	24 c0       	rjmp	.+72     	; 0x100f4 <__EEPROM_REGION_LENGTH__+0xf4>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
   100ac:	85 ef       	ldi	r24, 0xF5	; 245
   100ae:	9b e0       	ldi	r25, 0x0B	; 11
   100b0:	a0 e0       	ldi	r26, 0x00	; 0
   100b2:	ed b7       	in	r30, 0x3d	; 61
   100b4:	fe b7       	in	r31, 0x3e	; 62
   100b6:	81 83       	std	Z+1, r24	; 0x01
   100b8:	92 83       	std	Z+2, r25	; 0x02
   100ba:	a3 83       	std	Z+3, r26	; 0x03
   100bc:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
                return(0);
   100c0:	4e c0       	rjmp	.+156    	; 0x1015e <__EEPROM_REGION_LENGTH__+0x15e>
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
   100c2:	f6 01       	movw	r30, r12
   100c4:	80 81       	ld	r24, Z
   100c6:	88 23       	and	r24, r24
   100c8:	d9 f0       	breq	.+54     	; 0x10100 <__EEPROM_REGION_LENGTH__+0x100>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
   100ca:	f6 01       	movw	r30, r12
   100cc:	01 90       	ld	r0, Z+
   100ce:	00 20       	and	r0, r0
   100d0:	e9 f7       	brne	.-6      	; 0x100cc <__EEPROM_REGION_LENGTH__+0xcc>
   100d2:	31 97       	sbiw	r30, 0x01	; 1
   100d4:	ec 19       	sub	r30, r12
   100d6:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
   100d8:	e2 0d       	add	r30, r2
   100da:	f3 1d       	adc	r31, r3
   100dc:	ef 3f       	cpi	r30, 0xFF	; 255
   100de:	f1 05       	cpc	r31, r1
   100e0:	9c f0       	brlt	.+38     	; 0x10108 <__EEPROM_REGION_LENGTH__+0x108>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   100e2:	ed b7       	in	r30, 0x3d	; 61
   100e4:	fe b7       	in	r31, 0x3e	; 62
   100e6:	d5 82       	std	Z+5, r13	; 0x05
   100e8:	c4 82       	std	Z+4, r12	; 0x04
   100ea:	41 82       	std	Z+1, r4	; 0x01
   100ec:	52 82       	std	Z+2, r5	; 0x02
   100ee:	63 82       	std	Z+3, r6	; 0x03
   100f0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(0);
            }
            while ( (de = readdir(dirp)) )
   100f4:	c5 01       	movw	r24, r10
   100f6:	0e 94 1e 77 	call	0xee3c	; 0xee3c <readdir>
   100fa:	6c 01       	movw	r12, r24
   100fc:	89 2b       	or	r24, r25
   100fe:	09 f7       	brne	.-62     	; 0x100c2 <__EEPROM_REGION_LENGTH__+0xc2>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
   10100:	c5 01       	movw	r24, r10
   10102:	0e 94 e5 76 	call	0xedca	; 0xedca <closedir>
            break;
   10106:	1f c0       	rjmp	.+62     	; 0x10146 <__EEPROM_REGION_LENGTH__+0x146>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
   10108:	66 ea       	ldi	r22, 0xA6	; 166
   1010a:	78 e0       	ldi	r23, 0x08	; 8
   1010c:	c8 01       	movw	r24, r16
   1010e:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
   10112:	89 2b       	or	r24, r25
   10114:	29 f4       	brne	.+10     	; 0x10120 <__EEPROM_REGION_LENGTH__+0x120>
                {
                    strcat(fullpath,"/");
   10116:	66 ea       	ldi	r22, 0xA6	; 166
   10118:	78 e0       	ldi	r23, 0x08	; 8
   1011a:	c8 01       	movw	r24, r16
   1011c:	0e 94 65 2f 	call	0x5eca	; 0x5eca <strcat>
                }
                strcat(fullpath,de->d_name);
   10120:	b6 01       	movw	r22, r12
   10122:	c8 01       	movw	r24, r16
   10124:	0e 94 65 2f 	call	0x5eca	; 0x5eca <strcat>
                files +=ls_info(fullpath,verbose);
   10128:	b4 01       	movw	r22, r8
   1012a:	c8 01       	movw	r24, r16
   1012c:	63 de       	rcall	.-826    	; 0xfdf4 <ls_info>
   1012e:	e8 0e       	add	r14, r24
   10130:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
   10132:	ca 5c       	subi	r28, 0xCA	; 202
   10134:	de 4f       	sbci	r29, 0xFE	; 254
   10136:	e8 81       	ld	r30, Y
   10138:	f9 81       	ldd	r31, Y+1	; 0x01
   1013a:	c6 53       	subi	r28, 0x36	; 54
   1013c:	d1 40       	sbci	r29, 0x01	; 1
   1013e:	10 82       	st	Z, r1
   10140:	d9 cf       	rjmp	.-78     	; 0x100f4 <__EEPROM_REGION_LENGTH__+0xf4>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   10142:	e1 2c       	mov	r14, r1
   10144:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
   10146:	ed b7       	in	r30, 0x3d	; 61
   10148:	fe b7       	in	r31, 0x3e	; 62
   1014a:	f5 82       	std	Z+5, r15	; 0x05
   1014c:	e4 82       	std	Z+4, r14	; 0x04
   1014e:	87 ec       	ldi	r24, 0xC7	; 199
   10150:	9b e0       	ldi	r25, 0x0B	; 11
   10152:	a0 e0       	ldi	r26, 0x00	; 0
   10154:	81 83       	std	Z+1, r24	; 0x01
   10156:	92 83       	std	Z+2, r25	; 0x02
   10158:	a3 83       	std	Z+3, r26	; 0x03
   1015a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    return(files);
}
   1015e:	c7 01       	movw	r24, r14
   10160:	c9 5c       	subi	r28, 0xC9	; 201
   10162:	de 4f       	sbci	r29, 0xFE	; 254
   10164:	0f b6       	in	r0, 0x3f	; 63
   10166:	f8 94       	cli
   10168:	de bf       	out	0x3e, r29	; 62
   1016a:	0f be       	out	0x3f, r0	; 63
   1016c:	cd bf       	out	0x3d, r28	; 61
   1016e:	df 91       	pop	r29
   10170:	cf 91       	pop	r28
   10172:	1f 91       	pop	r17
   10174:	0f 91       	pop	r16
   10176:	ff 90       	pop	r15
   10178:	ef 90       	pop	r14
   1017a:	df 90       	pop	r13
   1017c:	cf 90       	pop	r12
   1017e:	bf 90       	pop	r11
   10180:	af 90       	pop	r10
   10182:	9f 90       	pop	r9
   10184:	8f 90       	pop	r8
   10186:	6f 90       	pop	r6
   10188:	5f 90       	pop	r5
   1018a:	4f 90       	pop	r4
   1018c:	3f 90       	pop	r3
   1018e:	2f 90       	pop	r2
   10190:	08 95       	ret

00010192 <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   10192:	a7 e0       	ldi	r26, 0x07	; 7
   10194:	b1 e0       	ldi	r27, 0x01	; 1
   10196:	ef ec       	ldi	r30, 0xCF	; 207
   10198:	f0 e8       	ldi	r31, 0x80	; 128
   1019a:	0c 94 40 e3 	jmp	0x1c680	; 0x1c680 <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
	if(argc < 1)
   1019e:	18 16       	cp	r1, r24
   101a0:	19 06       	cpc	r1, r25
   101a2:	0c f0       	brlt	.+2      	; 0x101a6 <posix_tests+0x14>
   101a4:	a8 c1       	rjmp	.+848    	; 0x104f6 <posix_tests+0x364>
		return(0);

    ptr = argv[ind++];
   101a6:	fb 01       	movw	r30, r22
   101a8:	c0 80       	ld	r12, Z
   101aa:	d1 80       	ldd	r13, Z+1	; 0x01
	printf("argv[%d]=%s\n",(int)i, argv[i]);
}
#endif


    if(!ptr)
   101ac:	c1 14       	cp	r12, r1
   101ae:	d1 04       	cpc	r13, r1
   101b0:	09 f4       	brne	.+2      	; 0x101b4 <posix_tests+0x22>
   101b2:	a1 c1       	rjmp	.+834    	; 0x104f6 <posix_tests+0x364>
   101b4:	2b 01       	movw	r4, r22
   101b6:	3c 01       	movw	r6, r24
        return(0);

    if( MATCH(ptr,"posix") )
   101b8:	6e eb       	ldi	r22, 0xBE	; 190
   101ba:	7b e0       	ldi	r23, 0x0B	; 11
   101bc:	c6 01       	movw	r24, r12
   101be:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
   101c2:	89 2b       	or	r24, r25
   101c4:	a1 f0       	breq	.+40     	; 0x101ee <posix_tests+0x5c>
    {
        ptr = argv[ind++];
   101c6:	f2 01       	movw	r30, r4
   101c8:	c2 80       	ldd	r12, Z+2	; 0x02
   101ca:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   101cc:	c1 14       	cp	r12, r1
   101ce:	d1 04       	cpc	r13, r1
   101d0:	21 f4       	brne	.+8      	; 0x101da <posix_tests+0x48>
        {
            posix_help(1);
   101d2:	81 e0       	ldi	r24, 0x01	; 1
   101d4:	90 e0       	ldi	r25, 0x00	; 0
   101d6:	6b dc       	rcall	.-1834   	; 0xfaae <posix_help>
   101d8:	31 c1       	rjmp	.+610    	; 0x1043c <posix_tests+0x2aa>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   101da:	69 e7       	ldi	r22, 0x79	; 121
   101dc:	76 e1       	ldi	r23, 0x16	; 22
   101de:	c6 01       	movw	r24, r12
   101e0:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
   101e4:	89 2b       	or	r24, r25
   101e6:	a9 f7       	brne	.-22     	; 0x101d2 <posix_tests+0x40>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   101e8:	02 e0       	ldi	r16, 0x02	; 2
   101ea:	10 e0       	ldi	r17, 0x00	; 0
   101ec:	02 c0       	rjmp	.+4      	; 0x101f2 <posix_tests+0x60>

    ind = 0;
	if(argc < 1)
		return(0);

    ptr = argv[ind++];
   101ee:	01 e0       	ldi	r16, 0x01	; 1
   101f0:	10 e0       	ldi	r17, 0x00	; 0
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   101f2:	58 01       	movw	r10, r16
   101f4:	ff ef       	ldi	r31, 0xFF	; 255
   101f6:	af 1a       	sub	r10, r31
   101f8:	bf 0a       	sbc	r11, r31
   101fa:	93 01       	movw	r18, r6
   101fc:	a5 01       	movw	r20, r10
   101fe:	64 ec       	ldi	r22, 0xC4	; 196
   10200:	7b e0       	ldi	r23, 0x0B	; 11
   10202:	c6 01       	movw	r24, r12
   10204:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
   10208:	89 2b       	or	r24, r25
   1020a:	99 f1       	breq	.+102    	; 0x10272 <posix_tests+0xe0>
   1020c:	78 01       	movw	r14, r16
   1020e:	ee 0c       	add	r14, r14
   10210:	ff 1c       	adc	r15, r15
   10212:	e4 0c       	add	r14, r4
   10214:	f5 1c       	adc	r15, r5
   10216:	57 01       	movw	r10, r14
   10218:	47 01       	movw	r8, r14
   1021a:	68 01       	movw	r12, r16
   1021c:	41 2c       	mov	r4, r1
   1021e:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   10220:	c6 14       	cp	r12, r6
   10222:	d7 04       	cpc	r13, r7
   10224:	14 f5       	brge	.+68     	; 0x1026a <posix_tests+0xd8>
        {
            if(MATCH(argv[i],"-p"))
   10226:	68 ec       	ldi	r22, 0xC8	; 200
   10228:	7b e0       	ldi	r23, 0x0B	; 11
   1022a:	f4 01       	movw	r30, r8
   1022c:	81 91       	ld	r24, Z+
   1022e:	91 91       	ld	r25, Z+
   10230:	4f 01       	movw	r8, r30
   10232:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
   10236:	89 2b       	or	r24, r25
   10238:	19 f0       	breq	.+6      	; 0x10240 <posix_tests+0xae>
                page = 1;
   1023a:	44 24       	eor	r4, r4
   1023c:	43 94       	inc	r4
   1023e:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   10240:	ff ef       	ldi	r31, 0xFF	; 255
   10242:	cf 1a       	sub	r12, r31
   10244:	df 0a       	sbc	r13, r31
   10246:	ec cf       	rjmp	.-40     	; 0x10220 <posix_tests+0x8e>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   10248:	68 ec       	ldi	r22, 0xC8	; 200
   1024a:	7b e0       	ldi	r23, 0x0B	; 11
   1024c:	f5 01       	movw	r30, r10
   1024e:	81 91       	ld	r24, Z+
   10250:	91 91       	ld	r25, Z+
   10252:	5f 01       	movw	r10, r30
   10254:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
   10258:	89 2b       	or	r24, r25
   1025a:	29 f4       	brne	.+10     	; 0x10266 <posix_tests+0xd4>
                cat(argv[ind], page);
   1025c:	b2 01       	movw	r22, r4
   1025e:	f7 01       	movw	r30, r14
   10260:	80 81       	ld	r24, Z
   10262:	91 81       	ldd	r25, Z+1	; 0x01
   10264:	5b dd       	rcall	.-1354   	; 0xfd1c <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   10266:	0f 5f       	subi	r16, 0xFF	; 255
   10268:	1f 4f       	sbci	r17, 0xFF	; 255
   1026a:	06 15       	cp	r16, r6
   1026c:	17 05       	cpc	r17, r7
   1026e:	64 f3       	brlt	.-40     	; 0x10248 <posix_tests+0xb6>
   10270:	e5 c0       	rjmp	.+458    	; 0x1043c <posix_tests+0x2aa>
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   10272:	48 01       	movw	r8, r16
   10274:	f2 e0       	ldi	r31, 0x02	; 2
   10276:	8f 0e       	add	r8, r31
   10278:	91 1c       	adc	r9, r1
   1027a:	93 01       	movw	r18, r6
   1027c:	a4 01       	movw	r20, r8
   1027e:	6b ec       	ldi	r22, 0xCB	; 203
   10280:	7b e0       	ldi	r23, 0x0B	; 11
   10282:	c6 01       	movw	r24, r12
   10284:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
   10288:	89 2b       	or	r24, r25
   1028a:	59 f0       	breq	.+22     	; 0x102a2 <posix_tests+0x110>
    {
        copy(argv[ind],argv[ind+1]);
   1028c:	f8 01       	movw	r30, r16
   1028e:	ee 0f       	add	r30, r30
   10290:	ff 1f       	adc	r31, r31
   10292:	e4 0d       	add	r30, r4
   10294:	f5 1d       	adc	r31, r5
   10296:	62 81       	ldd	r22, Z+2	; 0x02
   10298:	73 81       	ldd	r23, Z+3	; 0x03
   1029a:	80 81       	ld	r24, Z
   1029c:	91 81       	ldd	r25, Z+1	; 0x01
   1029e:	28 dc       	rcall	.-1968   	; 0xfaf0 <copy>
   102a0:	cd c0       	rjmp	.+410    	; 0x1043c <posix_tests+0x2aa>
        return(1);
    }

    else if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   102a2:	93 01       	movw	r18, r6
   102a4:	a5 01       	movw	r20, r10
   102a6:	60 ed       	ldi	r22, 0xD0	; 208
   102a8:	7b e0       	ldi	r23, 0x0B	; 11
   102aa:	c6 01       	movw	r24, r12
   102ac:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
   102b0:	89 2b       	or	r24, r25
   102b2:	b9 f0       	breq	.+46     	; 0x102e2 <posix_tests+0x150>
    {
        if ( chdir(argv[ind]) != 0)
   102b4:	78 01       	movw	r14, r16
   102b6:	ee 0c       	add	r14, r14
   102b8:	ff 1c       	adc	r15, r15
   102ba:	e4 0c       	add	r14, r4
   102bc:	f5 1c       	adc	r15, r5
   102be:	f7 01       	movw	r30, r14
   102c0:	80 81       	ld	r24, Z
   102c2:	91 81       	ldd	r25, Z+1	; 0x01
   102c4:	0e 94 0a 76 	call	0xec14	; 0xec14 <chdir>
   102c8:	89 2b       	or	r24, r25
   102ca:	09 f4       	brne	.+2      	; 0x102ce <posix_tests+0x13c>
   102cc:	b7 c0       	rjmp	.+366    	; 0x1043c <posix_tests+0x2aa>
            printf("chdir %s failed\n", argv[ind]);
   102ce:	f7 01       	movw	r30, r14
   102d0:	80 81       	ld	r24, Z
   102d2:	91 81       	ldd	r25, Z+1	; 0x01
   102d4:	ed b7       	in	r30, 0x3d	; 61
   102d6:	fe b7       	in	r31, 0x3e	; 62
   102d8:	95 83       	std	Z+5, r25	; 0x05
   102da:	84 83       	std	Z+4, r24	; 0x04
   102dc:	82 e7       	ldi	r24, 0x72	; 114
   102de:	9d e0       	ldi	r25, 0x0D	; 13
   102e0:	a7 c0       	rjmp	.+334    	; 0x10430 <posix_tests+0x29e>
        logfile(argv[ind],argv[ind+1]);
        return(1);
    }
#endif

    else if (MATCHI(ptr,"ls") )
   102e2:	68 ed       	ldi	r22, 0xD8	; 216
   102e4:	78 e0       	ldi	r23, 0x08	; 8
   102e6:	c6 01       	movw	r24, r12
   102e8:	0e 94 50 30 	call	0x60a0	; 0x60a0 <MATCHI>
   102ec:	7c 01       	movw	r14, r24
   102ee:	89 2b       	or	r24, r25
   102f0:	e1 f1       	breq	.+120    	; 0x1036a <posix_tests+0x1d8>
   102f2:	78 01       	movw	r14, r16
   102f4:	ee 0c       	add	r14, r14
   102f6:	ff 1c       	adc	r15, r15
   102f8:	e4 0c       	add	r14, r4
   102fa:	f5 1c       	adc	r15, r5
   102fc:	c1 2c       	mov	r12, r1
   102fe:	d1 2c       	mov	r13, r1
        int args = 0;
        for(i=ind;i<argc;++i)
        {
			if(!argv[i])
			{
				printf("ls: null argument # %d\n", i);
   10300:	8a e5       	ldi	r24, 0x5A	; 90
   10302:	9d e0       	ldi	r25, 0x0D	; 13
   10304:	4c 01       	movw	r8, r24
   10306:	a1 2c       	mov	r10, r1

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   10308:	06 15       	cp	r16, r6
   1030a:	17 05       	cpc	r17, r7
   1030c:	24 f5       	brge	.+72     	; 0x10356 <posix_tests+0x1c4>
        {
			if(!argv[i])
   1030e:	f7 01       	movw	r30, r14
   10310:	80 81       	ld	r24, Z
   10312:	91 81       	ldd	r25, Z+1	; 0x01
   10314:	00 97       	sbiw	r24, 0x00	; 0
   10316:	51 f4       	brne	.+20     	; 0x1032c <posix_tests+0x19a>
			{
				printf("ls: null argument # %d\n", i);
   10318:	ed b7       	in	r30, 0x3d	; 61
   1031a:	fe b7       	in	r31, 0x3e	; 62
   1031c:	15 83       	std	Z+5, r17	; 0x05
   1031e:	04 83       	std	Z+4, r16	; 0x04
   10320:	81 82       	std	Z+1, r8	; 0x01
   10322:	92 82       	std	Z+2, r9	; 0x02
   10324:	a3 82       	std	Z+3, r10	; 0x03
   10326:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
				continue;
   1032a:	0f c0       	rjmp	.+30     	; 0x1034a <posix_tests+0x1b8>
			}
            if(MATCH(argv[i],"-l"))	// skip long format test - we always use long format
   1032c:	63 ed       	ldi	r22, 0xD3	; 211
   1032e:	7b e0       	ldi	r23, 0x0B	; 11
   10330:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
   10334:	89 2b       	or	r24, r25
   10336:	49 f4       	brne	.+18     	; 0x1034a <posix_tests+0x1b8>
				continue;
			ls(argv[i],1);
   10338:	61 e0       	ldi	r22, 0x01	; 1
   1033a:	70 e0       	ldi	r23, 0x00	; 0
   1033c:	f7 01       	movw	r30, r14
   1033e:	80 81       	ld	r24, Z
   10340:	91 81       	ldd	r25, Z+1	; 0x01
   10342:	13 de       	rcall	.-986    	; 0xff6a <ls>
            ++args;
   10344:	ff ef       	ldi	r31, 0xFF	; 255
   10346:	cf 1a       	sub	r12, r31
   10348:	df 0a       	sbc	r13, r31

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   1034a:	0f 5f       	subi	r16, 0xFF	; 255
   1034c:	1f 4f       	sbci	r17, 0xFF	; 255
   1034e:	82 e0       	ldi	r24, 0x02	; 2
   10350:	e8 0e       	add	r14, r24
   10352:	f1 1c       	adc	r15, r1
   10354:	d9 cf       	rjmp	.-78     	; 0x10308 <posix_tests+0x176>
            if(MATCH(argv[i],"-l"))	// skip long format test - we always use long format
				continue;
			ls(argv[i],1);
            ++args;
        }
        if(!args)
   10356:	c1 14       	cp	r12, r1
   10358:	d1 04       	cpc	r13, r1
   1035a:	09 f0       	breq	.+2      	; 0x1035e <posix_tests+0x1cc>
   1035c:	6f c0       	rjmp	.+222    	; 0x1043c <posix_tests+0x2aa>
        {
            ls("",1);
   1035e:	61 e0       	ldi	r22, 0x01	; 1
   10360:	70 e0       	ldi	r23, 0x00	; 0
   10362:	8d e2       	ldi	r24, 0x2D	; 45
   10364:	9c e0       	ldi	r25, 0x0C	; 12
   10366:	01 de       	rcall	.-1022   	; 0xff6a <ls>
   10368:	69 c0       	rjmp	.+210    	; 0x1043c <posix_tests+0x2aa>
        mkfs(argv[ind++]);
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   1036a:	93 01       	movw	r18, r6
   1036c:	a5 01       	movw	r20, r10
   1036e:	66 ed       	ldi	r22, 0xD6	; 214
   10370:	7b e0       	ldi	r23, 0x0B	; 11
   10372:	c6 01       	movw	r24, r12
   10374:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
   10378:	89 2b       	or	r24, r25
   1037a:	69 f1       	breq	.+90     	; 0x103d6 <posix_tests+0x244>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   1037c:	a6 14       	cp	r10, r6
   1037e:	b7 04       	cpc	r11, r7
   10380:	7c f4       	brge	.+30     	; 0x103a0 <posix_tests+0x20e>
        {
            mode = strtol(argv[ind+1],NULL,8);
   10382:	aa 0c       	add	r10, r10
   10384:	bb 1c       	adc	r11, r11
   10386:	f2 01       	movw	r30, r4
   10388:	ea 0d       	add	r30, r10
   1038a:	fb 1d       	adc	r31, r11
   1038c:	48 e0       	ldi	r20, 0x08	; 8
   1038e:	50 e0       	ldi	r21, 0x00	; 0
   10390:	60 e0       	ldi	r22, 0x00	; 0
   10392:	70 e0       	ldi	r23, 0x00	; 0
   10394:	80 81       	ld	r24, Z
   10396:	91 81       	ldd	r25, Z+1	; 0x01
   10398:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <strtol>
   1039c:	ab 01       	movw	r20, r22
   1039e:	02 c0       	rjmp	.+4      	; 0x103a4 <posix_tests+0x212>
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   103a0:	4f ef       	ldi	r20, 0xFF	; 255
   103a2:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   103a4:	00 0f       	add	r16, r16
   103a6:	11 1f       	adc	r17, r17
   103a8:	40 0e       	add	r4, r16
   103aa:	51 1e       	adc	r5, r17
   103ac:	05 2e       	mov	r0, r21
   103ae:	00 0c       	add	r0, r0
   103b0:	66 0b       	sbc	r22, r22
   103b2:	77 0b       	sbc	r23, r23
   103b4:	f2 01       	movw	r30, r4
   103b6:	80 81       	ld	r24, Z
   103b8:	91 81       	ldd	r25, Z+1	; 0x01
   103ba:	0e 94 77 76 	call	0xecee	; 0xecee <mkdir>
   103be:	89 2b       	or	r24, r25
   103c0:	e9 f1       	breq	.+122    	; 0x1043c <posix_tests+0x2aa>
        {
            printf("mkdir %s failed\n", argv[ind]);
   103c2:	f2 01       	movw	r30, r4
   103c4:	80 81       	ld	r24, Z
   103c6:	91 81       	ldd	r25, Z+1	; 0x01
   103c8:	ed b7       	in	r30, 0x3d	; 61
   103ca:	fe b7       	in	r31, 0x3e	; 62
   103cc:	95 83       	std	Z+5, r25	; 0x05
   103ce:	84 83       	std	Z+4, r24	; 0x04
   103d0:	89 e4       	ldi	r24, 0x49	; 73
   103d2:	9d e0       	ldi	r25, 0x0D	; 13
   103d4:	b1 c0       	rjmp	.+354    	; 0x10538 <posix_tests+0x3a6>
            return(0);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"page", (ind + 1), argc))
   103d6:	93 01       	movw	r18, r6
   103d8:	a5 01       	movw	r20, r10
   103da:	6c ed       	ldi	r22, 0xDC	; 220
   103dc:	7b e0       	ldi	r23, 0x0B	; 11
   103de:	c6 01       	movw	r24, r12
   103e0:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
   103e4:	89 2b       	or	r24, r25
   103e6:	71 f0       	breq	.+28     	; 0x10404 <posix_tests+0x272>
    {
        setpage(atoi(argv[ind]));
   103e8:	00 0f       	add	r16, r16
   103ea:	11 1f       	adc	r17, r17
   103ec:	f2 01       	movw	r30, r4
   103ee:	e0 0f       	add	r30, r16
   103f0:	f1 1f       	adc	r31, r17
   103f2:	80 81       	ld	r24, Z
   103f4:	91 81       	ldd	r25, Z+1	; 0x01
   103f6:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   103fa:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   103fe:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
   10402:	1c c0       	rjmp	.+56     	; 0x1043c <posix_tests+0x2aa>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    else if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   10404:	93 01       	movw	r18, r6
   10406:	a8 01       	movw	r20, r16
   10408:	61 ee       	ldi	r22, 0xE1	; 225
   1040a:	7b e0       	ldi	r23, 0x0B	; 11
   1040c:	c6 01       	movw	r24, r12
   1040e:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
   10412:	7c 01       	movw	r14, r24
   10414:	89 2b       	or	r24, r25
   10416:	b1 f0       	breq	.+44     	; 0x10444 <posix_tests+0x2b2>
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   10418:	6e ef       	ldi	r22, 0xFE	; 254
   1041a:	70 e0       	ldi	r23, 0x00	; 0
   1041c:	ce 01       	movw	r24, r28
   1041e:	08 96       	adiw	r24, 0x08	; 8
   10420:	0e 94 52 76 	call	0xeca4	; 0xeca4 <getcwd>
   10424:	ed b7       	in	r30, 0x3d	; 61
   10426:	fe b7       	in	r31, 0x3e	; 62
   10428:	95 83       	std	Z+5, r25	; 0x05
   1042a:	84 83       	std	Z+4, r24	; 0x04
   1042c:	85 e4       	ldi	r24, 0x45	; 69
   1042e:	9d e0       	ldi	r25, 0x0D	; 13
   10430:	a0 e0       	ldi	r26, 0x00	; 0
   10432:	81 83       	std	Z+1, r24	; 0x01
   10434:	92 83       	std	Z+2, r25	; 0x02
   10436:	a3 83       	std	Z+3, r26	; 0x03
   10438:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        return(1);
   1043c:	ee 24       	eor	r14, r14
   1043e:	e3 94       	inc	r14
   10440:	f1 2c       	mov	r15, r1
   10442:	80 c0       	rjmp	.+256    	; 0x10544 <posix_tests+0x3b2>
    }

    else if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   10444:	93 01       	movw	r18, r6
   10446:	a4 01       	movw	r20, r8
   10448:	65 ee       	ldi	r22, 0xE5	; 229
   1044a:	7b e0       	ldi	r23, 0x0B	; 11
   1044c:	c6 01       	movw	r24, r12
   1044e:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
   10452:	89 2b       	or	r24, r25
   10454:	51 f1       	breq	.+84     	; 0x104aa <posix_tests+0x318>
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   10456:	00 0f       	add	r16, r16
   10458:	11 1f       	adc	r17, r17
   1045a:	62 01       	movw	r12, r4
   1045c:	c0 0e       	add	r12, r16
   1045e:	d1 1e       	adc	r13, r17
   10460:	0e 5f       	subi	r16, 0xFE	; 254
   10462:	1f 4f       	sbci	r17, 0xFF	; 255
   10464:	40 0e       	add	r4, r16
   10466:	51 1e       	adc	r5, r17
   10468:	f2 01       	movw	r30, r4
   1046a:	60 81       	ld	r22, Z
   1046c:	71 81       	ldd	r23, Z+1	; 0x01
   1046e:	f6 01       	movw	r30, r12
   10470:	80 81       	ld	r24, Z
   10472:	91 81       	ldd	r25, Z+1	; 0x01
   10474:	0e 94 a5 76 	call	0xed4a	; 0xed4a <rename>
   10478:	89 2b       	or	r24, r25
   1047a:	01 f3       	breq	.-64     	; 0x1043c <posix_tests+0x2aa>
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   1047c:	f2 01       	movw	r30, r4
   1047e:	80 81       	ld	r24, Z
   10480:	91 81       	ldd	r25, Z+1	; 0x01
   10482:	ed b7       	in	r30, 0x3d	; 61
   10484:	fe b7       	in	r31, 0x3e	; 62
   10486:	97 83       	std	Z+7, r25	; 0x07
   10488:	86 83       	std	Z+6, r24	; 0x06
   1048a:	f6 01       	movw	r30, r12
   1048c:	80 81       	ld	r24, Z
   1048e:	91 81       	ldd	r25, Z+1	; 0x01
   10490:	ed b7       	in	r30, 0x3d	; 61
   10492:	fe b7       	in	r31, 0x3e	; 62
   10494:	95 83       	std	Z+5, r25	; 0x05
   10496:	84 83       	std	Z+4, r24	; 0x04
   10498:	84 e3       	ldi	r24, 0x34	; 52
   1049a:	9d e0       	ldi	r25, 0x0D	; 13
   1049c:	a0 e0       	ldi	r26, 0x00	; 0
   1049e:	81 83       	std	Z+1, r24	; 0x01
   104a0:	92 83       	std	Z+2, r25	; 0x02
   104a2:	a3 83       	std	Z+3, r26	; 0x03
   104a4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            return(0);
   104a8:	4d c0       	rjmp	.+154    	; 0x10544 <posix_tests+0x3b2>
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   104aa:	93 01       	movw	r18, r6
   104ac:	a5 01       	movw	r20, r10
   104ae:	6c ee       	ldi	r22, 0xEC	; 236
   104b0:	7b e0       	ldi	r23, 0x0B	; 11
   104b2:	c6 01       	movw	r24, r12
   104b4:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
   104b8:	7c 01       	movw	r14, r24
   104ba:	89 2b       	or	r24, r25
   104bc:	f9 f0       	breq	.+62     	; 0x104fc <posix_tests+0x36a>
    {
        if ( unlink(argv[ind]) != 0)
   104be:	78 01       	movw	r14, r16
   104c0:	ee 0c       	add	r14, r14
   104c2:	ff 1c       	adc	r15, r15
   104c4:	e4 0c       	add	r14, r4
   104c6:	f5 1c       	adc	r15, r5
   104c8:	f7 01       	movw	r30, r14
   104ca:	80 81       	ld	r24, Z
   104cc:	91 81       	ldd	r25, Z+1	; 0x01
   104ce:	0e 94 c4 76 	call	0xed88	; 0xed88 <unlink>
   104d2:	89 2b       	or	r24, r25
   104d4:	09 f4       	brne	.+2      	; 0x104d8 <posix_tests+0x346>
   104d6:	b2 cf       	rjmp	.-156    	; 0x1043c <posix_tests+0x2aa>
        {
            printf("rm %s failed\n", argv[ind]);
   104d8:	f7 01       	movw	r30, r14
   104da:	80 81       	ld	r24, Z
   104dc:	91 81       	ldd	r25, Z+1	; 0x01
   104de:	ed b7       	in	r30, 0x3d	; 61
   104e0:	fe b7       	in	r31, 0x3e	; 62
   104e2:	95 83       	std	Z+5, r25	; 0x05
   104e4:	84 83       	std	Z+4, r24	; 0x04
   104e6:	86 e2       	ldi	r24, 0x26	; 38
   104e8:	9d e0       	ldi	r25, 0x0D	; 13
   104ea:	a0 e0       	ldi	r26, 0x00	; 0
   104ec:	81 83       	std	Z+1, r24	; 0x01
   104ee:	92 83       	std	Z+2, r25	; 0x02
   104f0:	a3 83       	std	Z+3, r26	; 0x03
   104f2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            return(0);
   104f6:	e1 2c       	mov	r14, r1
   104f8:	f1 2c       	mov	r15, r1
   104fa:	24 c0       	rjmp	.+72     	; 0x10544 <posix_tests+0x3b2>
        dump_stat(&p);
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   104fc:	93 01       	movw	r18, r6
   104fe:	a5 01       	movw	r20, r10
   10500:	6f ee       	ldi	r22, 0xEF	; 239
   10502:	7b e0       	ldi	r23, 0x0B	; 11
   10504:	c6 01       	movw	r24, r12
   10506:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
   1050a:	89 2b       	or	r24, r25
   1050c:	a1 f3       	breq	.-24     	; 0x104f6 <posix_tests+0x364>
    {
        if ( rmdir(argv[ind]) != 0)
   1050e:	00 0f       	add	r16, r16
   10510:	11 1f       	adc	r17, r17
   10512:	40 0e       	add	r4, r16
   10514:	51 1e       	adc	r5, r17
   10516:	f2 01       	movw	r30, r4
   10518:	80 81       	ld	r24, Z
   1051a:	91 81       	ldd	r25, Z+1	; 0x01
   1051c:	0e 94 e3 76 	call	0xedc6	; 0xedc6 <rmdir>
   10520:	89 2b       	or	r24, r25
   10522:	09 f4       	brne	.+2      	; 0x10526 <posix_tests+0x394>
   10524:	8b cf       	rjmp	.-234    	; 0x1043c <posix_tests+0x2aa>
        {
            printf("rmdir %s failed\n", argv[ind]);
   10526:	f2 01       	movw	r30, r4
   10528:	80 81       	ld	r24, Z
   1052a:	91 81       	ldd	r25, Z+1	; 0x01
   1052c:	ed b7       	in	r30, 0x3d	; 61
   1052e:	fe b7       	in	r31, 0x3e	; 62
   10530:	95 83       	std	Z+5, r25	; 0x05
   10532:	84 83       	std	Z+4, r24	; 0x04
   10534:	85 e1       	ldi	r24, 0x15	; 21
   10536:	9d e0       	ldi	r25, 0x0D	; 13
   10538:	a0 e0       	ldi	r26, 0x00	; 0
   1053a:	81 83       	std	Z+1, r24	; 0x01
   1053c:	92 83       	std	Z+2, r25	; 0x02
   1053e:	a3 83       	std	Z+3, r26	; 0x03
   10540:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        return(1);
    }
#endif

    return(0);
}
   10544:	c7 01       	movw	r24, r14
   10546:	c9 5f       	subi	r28, 0xF9	; 249
   10548:	de 4f       	sbci	r29, 0xFE	; 254
   1054a:	e0 e1       	ldi	r30, 0x10	; 16
   1054c:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__epilogue_restores__+0x4>

00010550 <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   10550:	00 d0       	rcall	.+0      	; 0x10552 <gpib_timer_init+0x2>
   10552:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   10554:	61 e0       	ldi	r22, 0x01	; 1
   10556:	70 e0       	ldi	r23, 0x00	; 0
   10558:	84 e6       	ldi	r24, 0x64	; 100
   1055a:	94 e8       	ldi	r25, 0x84	; 132
   1055c:	0e 94 b1 32 	call	0x6562	; 0x6562 <set_timers>
   10560:	01 96       	adiw	r24, 0x01	; 1
   10562:	51 f4       	brne	.+20     	; 0x10578 <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   10564:	8f ea       	ldi	r24, 0xAF	; 175
   10566:	9e e0       	ldi	r25, 0x0E	; 14
   10568:	a0 e0       	ldi	r26, 0x00	; 0
   1056a:	ed b7       	in	r30, 0x3d	; 61
   1056c:	fe b7       	in	r31, 0x3e	; 62
   1056e:	81 83       	std	Z+1, r24	; 0x01
   10570:	92 83       	std	Z+2, r25	; 0x02
   10572:	a3 83       	std	Z+3, r26	; 0x03
   10574:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

    gpib_timer_reset();
   10578:	95 d1       	rcall	.+810    	; 0x108a4 <gpib_timer_reset>
}
   1057a:	0f 90       	pop	r0
   1057c:	0f 90       	pop	r0
   1057e:	0f 90       	pop	r0
   10580:	08 95       	ret

00010582 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   10582:	28 2f       	mov	r18, r24
   10584:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   10586:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   10588:	88 0f       	add	r24, r24
        if(mask & 1)
   1058a:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   1058c:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   1058e:	26 95       	lsr	r18
   10590:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   10592:	d1 f7       	brne	.-12     	; 0x10588 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   10594:	08 95       	ret

00010596 <ppr_set>:
void ppr_set(uint8_t mask)
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    _ppr_reg = reverse_8bits(mask);
   10596:	f5 df       	rcall	.-22     	; 0x10582 <reverse_8bits>
   10598:	80 93 5b 19 	sts	0x195B, r24	; 0x80195b <_ppr_reg>
#else
    _ppr_reg = mask;
#endif
    SPI0_TXRX_Byte(_ppr_reg);
   1059c:	0e 94 0b 29 	call	0x5216	; 0x5216 <SPI0_TXRX_Byte>

    GPIB_IO_HI(PPE);
   105a0:	2a 9a       	sbi	0x05, 2	; 5
   105a2:	22 9a       	sbi	0x04, 2	; 4
    GPIB_IO_LOW(PPE);
   105a4:	2a 98       	cbi	0x05, 2	; 5
   105a6:	22 9a       	sbi	0x04, 2	; 4
   105a8:	08 95       	ret

000105aa <ppr_reg>:
uint8_t ppr_reg()
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    return(reverse_8bits(_ppr_reg));
   105aa:	80 91 5b 19 	lds	r24, 0x195B	; 0x80195b <_ppr_reg>
   105ae:	e9 cf       	rjmp	.-46     	; 0x10582 <reverse_8bits>
#else
    return(_ppr_reg);
#endif
}
   105b0:	08 95       	ret

000105b2 <ppr_init>:
///
/// - Hides the register access implimentation from the upper level.
/// @return  void

void ppr_init()
{
   105b2:	00 d0       	rcall	.+0      	; 0x105b4 <ppr_init+0x2>
   105b4:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_PPR)
   105b6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   105ba:	81 ff       	sbrs	r24, 1
   105bc:	0a c0       	rjmp	.+20     	; 0x105d2 <ppr_init+0x20>
        printf("[PPR DISABLE ALL]\n");
   105be:	8c e9       	ldi	r24, 0x9C	; 156
   105c0:	9e e0       	ldi	r25, 0x0E	; 14
   105c2:	a0 e0       	ldi	r26, 0x00	; 0
   105c4:	ed b7       	in	r30, 0x3d	; 61
   105c6:	fe b7       	in	r31, 0x3e	; 62
   105c8:	81 83       	std	Z+1, r24	; 0x01
   105ca:	92 83       	std	Z+2, r25	; 0x02
   105cc:	a3 83       	std	Z+3, r26	; 0x03
   105ce:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
    ppr_set(0);
   105d2:	80 e0       	ldi	r24, 0x00	; 0
   105d4:	e0 df       	rcall	.-64     	; 0x10596 <ppr_set>
}
   105d6:	0f 90       	pop	r0
   105d8:	0f 90       	pop	r0
   105da:	0f 90       	pop	r0
   105dc:	08 95       	ret

000105de <ppr_bit_set>:
/// @return  void

void ppr_bit_set(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_SET(_ppr_reg,bit);
   105de:	21 e0       	ldi	r18, 0x01	; 1
   105e0:	30 e0       	ldi	r19, 0x00	; 0
   105e2:	01 c0       	rjmp	.+2      	; 0x105e6 <ppr_bit_set+0x8>
   105e4:	22 0f       	add	r18, r18
   105e6:	8a 95       	dec	r24
   105e8:	ea f7       	brpl	.-6      	; 0x105e4 <ppr_bit_set+0x6>
   105ea:	80 91 5b 19 	lds	r24, 0x195B	; 0x80195b <_ppr_reg>
   105ee:	82 2b       	or	r24, r18
   105f0:	80 93 5b 19 	sts	0x195B, r24	; 0x80195b <_ppr_reg>
    ppr_set(_ppr_reg);
   105f4:	d0 cf       	rjmp	.-96     	; 0x10596 <ppr_set>
   105f6:	08 95       	ret

000105f8 <ppr_bit_clr>:
/// @return  void

void ppr_bit_clr(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_CLR(_ppr_reg,bit);
   105f8:	21 e0       	ldi	r18, 0x01	; 1
   105fa:	30 e0       	ldi	r19, 0x00	; 0
   105fc:	01 c0       	rjmp	.+2      	; 0x10600 <ppr_bit_clr+0x8>
   105fe:	22 0f       	add	r18, r18
   10600:	8a 95       	dec	r24
   10602:	ea f7       	brpl	.-6      	; 0x105fe <ppr_bit_clr+0x6>
   10604:	20 95       	com	r18
   10606:	80 91 5b 19 	lds	r24, 0x195B	; 0x80195b <_ppr_reg>
   1060a:	82 23       	and	r24, r18
   1060c:	80 93 5b 19 	sts	0x195B, r24	; 0x80195b <_ppr_reg>
    ppr_set(_ppr_reg);
   10610:	c2 cf       	rjmp	.-124    	; 0x10596 <ppr_set>
   10612:	08 95       	ret

00010614 <dbf_open>:
/// @see ff.h
///
/// @return  FRESULT f_open(fp,path, mode);

FRESULT dbf_open (FIL* fp, const TCHAR* path, BYTE mode)
{
   10614:	0f 93       	push	r16
   10616:	1f 93       	push	r17
   10618:	cf 93       	push	r28
   1061a:	df 93       	push	r29
   1061c:	00 d0       	rcall	.+0      	; 0x1061e <dbf_open+0xa>
   1061e:	00 d0       	rcall	.+0      	; 0x10620 <dbf_open+0xc>
   10620:	1f 92       	push	r1
   10622:	8b 01       	movw	r16, r22
    int rc;
    rc = f_open(fp,path, mode);
   10624:	0e 94 bb 58 	call	0xb176	; 0xb176 <f_open>
   10628:	ec 01       	movw	r28, r24
    if(rc)
   1062a:	89 2b       	or	r24, r25
   1062c:	79 f0       	breq	.+30     	; 0x1064c <dbf_open+0x38>
    {
        printf("Open error:[%s] ", path);
   1062e:	ed b7       	in	r30, 0x3d	; 61
   10630:	fe b7       	in	r31, 0x3e	; 62
   10632:	15 83       	std	Z+5, r17	; 0x05
   10634:	04 83       	std	Z+4, r16	; 0x04
   10636:	8b e8       	ldi	r24, 0x8B	; 139
   10638:	9e e0       	ldi	r25, 0x0E	; 14
   1063a:	a0 e0       	ldi	r26, 0x00	; 0
   1063c:	81 83       	std	Z+1, r24	; 0x01
   1063e:	92 83       	std	Z+2, r25	; 0x02
   10640:	a3 83       	std	Z+3, r26	; 0x03
   10642:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        put_rc(rc);
   10646:	ce 01       	movw	r24, r28
   10648:	0e 94 95 6f 	call	0xdf2a	; 0xdf2a <put_rc>
        return (rc);
    }
    return(0);
}
   1064c:	ce 01       	movw	r24, r28
   1064e:	cd b7       	in	r28, 0x3d	; 61
   10650:	de b7       	in	r29, 0x3e	; 62
   10652:	25 96       	adiw	r28, 0x05	; 5
   10654:	e4 e0       	ldi	r30, 0x04	; 4
   10656:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

0001065a <dbf_read>:
/// @see ff.h
///
/// @return  FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br)

FRESULT dbf_read (FIL* fp, void* buff, UINT btr, UINT* br)
{
   1065a:	cf 93       	push	r28
   1065c:	df 93       	push	r29
   1065e:	00 d0       	rcall	.+0      	; 0x10660 <dbf_read+0x6>
   10660:	1f 92       	push	r1
    int rc;
    rc = f_read(fp, buff, btr, br);
   10662:	0e 94 73 5a 	call	0xb4e6	; 0xb4e6 <f_read>
   10666:	ec 01       	movw	r28, r24
    if(rc)
   10668:	89 2b       	or	r24, r25
   1066a:	69 f0       	breq	.+26     	; 0x10686 <dbf_read+0x2c>
    {
        printf("Read error: ");
   1066c:	8e e7       	ldi	r24, 0x7E	; 126
   1066e:	9e e0       	ldi	r25, 0x0E	; 14
   10670:	a0 e0       	ldi	r26, 0x00	; 0
   10672:	ed b7       	in	r30, 0x3d	; 61
   10674:	fe b7       	in	r31, 0x3e	; 62
   10676:	81 83       	std	Z+1, r24	; 0x01
   10678:	92 83       	std	Z+2, r25	; 0x02
   1067a:	a3 83       	std	Z+3, r26	; 0x03
   1067c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        put_rc(rc);
   10680:	ce 01       	movw	r24, r28
   10682:	0e 94 95 6f 	call	0xdf2a	; 0xdf2a <put_rc>
        return (rc);
    }
    return(0);
}
   10686:	ce 01       	movw	r24, r28
   10688:	cd b7       	in	r28, 0x3d	; 61
   1068a:	de b7       	in	r29, 0x3e	; 62
   1068c:	23 96       	adiw	r28, 0x03	; 3
   1068e:	e2 e0       	ldi	r30, 0x02	; 2
   10690:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00010694 <dbf_write>:
///
/// @see ff.h
/// @return  FRESULT f_write (FIL* fp, void* buff, UINT btw, UINT* bw)

FRESULT dbf_write (FIL* fp, const void* buff, UINT btw, UINT* bw)
{
   10694:	cf 93       	push	r28
   10696:	df 93       	push	r29
   10698:	00 d0       	rcall	.+0      	; 0x1069a <dbf_write+0x6>
   1069a:	1f 92       	push	r1
    int rc;
    rc = f_write(fp, buff, btw, bw);
   1069c:	0e 94 be 5b 	call	0xb77c	; 0xb77c <f_write>
   106a0:	ec 01       	movw	r28, r24
    if(rc)
   106a2:	89 2b       	or	r24, r25
   106a4:	69 f0       	breq	.+26     	; 0x106c0 <dbf_write+0x2c>
    {
        printf("Write error: ");
   106a6:	80 e7       	ldi	r24, 0x70	; 112
   106a8:	9e e0       	ldi	r25, 0x0E	; 14
   106aa:	a0 e0       	ldi	r26, 0x00	; 0
   106ac:	ed b7       	in	r30, 0x3d	; 61
   106ae:	fe b7       	in	r31, 0x3e	; 62
   106b0:	81 83       	std	Z+1, r24	; 0x01
   106b2:	92 83       	std	Z+2, r25	; 0x02
   106b4:	a3 83       	std	Z+3, r26	; 0x03
   106b6:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        put_rc(rc);
   106ba:	ce 01       	movw	r24, r28
   106bc:	0e 94 95 6f 	call	0xdf2a	; 0xdf2a <put_rc>
        return (rc);
    }
    return(0);
}
   106c0:	ce 01       	movw	r24, r28
   106c2:	cd b7       	in	r28, 0x3d	; 61
   106c4:	de b7       	in	r29, 0x3e	; 62
   106c6:	23 96       	adiw	r28, 0x03	; 3
   106c8:	e2 e0       	ldi	r30, 0x02	; 2
   106ca:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

000106ce <dbf_lseek>:
///
/// @see ff.h.
/// @return  FRESULT

FRESULT dbf_lseek (FIL* fp, DWORD ofs)
{
   106ce:	cf 93       	push	r28
   106d0:	df 93       	push	r29
   106d2:	00 d0       	rcall	.+0      	; 0x106d4 <dbf_lseek+0x6>
   106d4:	1f 92       	push	r1
    int rc;
    rc = f_lseek(fp, ofs);
   106d6:	0e 94 7f 5f 	call	0xbefe	; 0xbefe <f_lseek>
   106da:	ec 01       	movw	r28, r24
    if(rc)
   106dc:	89 2b       	or	r24, r25
   106de:	69 f0       	breq	.+26     	; 0x106fa <dbf_lseek+0x2c>
    {
        printf("Seek error: ");
   106e0:	83 e6       	ldi	r24, 0x63	; 99
   106e2:	9e e0       	ldi	r25, 0x0E	; 14
   106e4:	a0 e0       	ldi	r26, 0x00	; 0
   106e6:	ed b7       	in	r30, 0x3d	; 61
   106e8:	fe b7       	in	r31, 0x3e	; 62
   106ea:	81 83       	std	Z+1, r24	; 0x01
   106ec:	92 83       	std	Z+2, r25	; 0x02
   106ee:	a3 83       	std	Z+3, r26	; 0x03
   106f0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        put_rc(rc);
   106f4:	ce 01       	movw	r24, r28
   106f6:	0e 94 95 6f 	call	0xdf2a	; 0xdf2a <put_rc>
        return (rc);
    }
    return(0);
}
   106fa:	ce 01       	movw	r24, r28
   106fc:	cd b7       	in	r28, 0x3d	; 61
   106fe:	de b7       	in	r29, 0x3e	; 62
   10700:	23 96       	adiw	r28, 0x03	; 3
   10702:	e2 e0       	ldi	r30, 0x02	; 2
   10704:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00010708 <dbf_close>:
///
/// @see ff.h.
/// @return  FRESULT dbf_close (FIL* fp)

FRESULT dbf_close (FIL* fp)
{
   10708:	cf 93       	push	r28
   1070a:	df 93       	push	r29
   1070c:	00 d0       	rcall	.+0      	; 0x1070e <dbf_close+0x6>
   1070e:	1f 92       	push	r1
    int rc;
    rc = f_close(fp);
   10710:	0e 94 d5 5d 	call	0xbbaa	; 0xbbaa <f_close>
   10714:	ec 01       	movw	r28, r24
    if(rc != FR_OK)
   10716:	89 2b       	or	r24, r25
   10718:	69 f0       	breq	.+26     	; 0x10734 <dbf_close+0x2c>
    {
        printf("Close error: ");
   1071a:	85 e5       	ldi	r24, 0x55	; 85
   1071c:	9e e0       	ldi	r25, 0x0E	; 14
   1071e:	a0 e0       	ldi	r26, 0x00	; 0
   10720:	ed b7       	in	r30, 0x3d	; 61
   10722:	fe b7       	in	r31, 0x3e	; 62
   10724:	81 83       	std	Z+1, r24	; 0x01
   10726:	92 83       	std	Z+2, r25	; 0x02
   10728:	a3 83       	std	Z+3, r26	; 0x03
   1072a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        put_rc(rc);
   1072e:	ce 01       	movw	r24, r28
   10730:	0e 94 95 6f 	call	0xdf2a	; 0xdf2a <put_rc>
        return (rc);
    }
    return(0);
}
   10734:	ce 01       	movw	r24, r28
   10736:	cd b7       	in	r28, 0x3d	; 61
   10738:	de b7       	in	r29, 0x3e	; 62
   1073a:	23 96       	adiw	r28, 0x03	; 3
   1073c:	e2 e0       	ldi	r30, 0x02	; 2
   1073e:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00010742 <dbf_open_read>:
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT

int dbf_open_read(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   10742:	a6 e2       	ldi	r26, 0x26	; 38
   10744:	b2 e0       	ldi	r27, 0x02	; 2
   10746:	e7 ea       	ldi	r30, 0xA7	; 167
   10748:	f3 e8       	ldi	r31, 0x83	; 131
   1074a:	0c 94 44 e3 	jmp	0x1c688	; 0x1c688 <__prologue_saves__+0xc>
   1074e:	4a 01       	movw	r8, r20
   10750:	5b 01       	movw	r10, r22
   10752:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   10754:	cb 5d       	subi	r28, 0xDB	; 219
   10756:	dd 4f       	sbci	r29, 0xFD	; 253
   10758:	19 82       	std	Y+1, r1	; 0x01
   1075a:	18 82       	st	Y, r1
   1075c:	c5 52       	subi	r28, 0x25	; 37
   1075e:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   10760:	43 e0       	ldi	r20, 0x03	; 3
   10762:	bc 01       	movw	r22, r24
   10764:	ce 01       	movw	r24, r28
   10766:	01 96       	adiw	r24, 0x01	; 1
   10768:	55 df       	rcall	.-342    	; 0x10614 <dbf_open>
    if( rc != FR_OK)
   1076a:	89 2b       	or	r24, r25
   1076c:	19 f0       	breq	.+6      	; 0x10774 <dbf_open_read+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_READ;
        *errors = flags;
   1076e:	81 e1       	ldi	r24, 0x11	; 17
   10770:	90 e0       	ldi	r25, 0x00	; 0
   10772:	2f c0       	rjmp	.+94     	; 0x107d2 <dbf_open_read+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   10774:	b5 01       	movw	r22, r10
   10776:	a4 01       	movw	r20, r8
   10778:	ce 01       	movw	r24, r28
   1077a:	01 96       	adiw	r24, 0x01	; 1
   1077c:	a8 df       	rcall	.-176    	; 0x106ce <dbf_lseek>
    if( rc != FR_OK)
   1077e:	89 2b       	or	r24, r25
   10780:	59 f0       	breq	.+22     	; 0x10798 <dbf_open_read+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_READ;
        *errors = flags;
   10782:	85 e0       	ldi	r24, 0x05	; 5
   10784:	90 e0       	ldi	r25, 0x00	; 0
   10786:	f7 01       	movw	r30, r14
   10788:	91 83       	std	Z+1, r25	; 0x01
   1078a:	80 83       	st	Z, r24
        dbf_close(&fp);
   1078c:	ce 01       	movw	r24, r28
   1078e:	01 96       	adiw	r24, 0x01	; 1
   10790:	bb df       	rcall	.-138    	; 0x10708 <dbf_close>
        return( -1 );
   10792:	8f ef       	ldi	r24, 0xFF	; 255
   10794:	9f ef       	ldi	r25, 0xFF	; 255
   10796:	27 c0       	rjmp	.+78     	; 0x107e6 <dbf_open_read+0xa4>
    }

    rc = dbf_read(&fp, buff,size,&bytes);
   10798:	9e 01       	movw	r18, r28
   1079a:	2b 5d       	subi	r18, 0xDB	; 219
   1079c:	3d 4f       	sbci	r19, 0xFD	; 253
   1079e:	a8 01       	movw	r20, r16
   107a0:	b6 01       	movw	r22, r12
   107a2:	ce 01       	movw	r24, r28
   107a4:	01 96       	adiw	r24, 0x01	; 1
   107a6:	59 df       	rcall	.-334    	; 0x1065a <dbf_read>
    if( rc != FR_OK || (UINT) size != bytes)
   107a8:	89 2b       	or	r24, r25
   107aa:	49 f4       	brne	.+18     	; 0x107be <dbf_open_read+0x7c>
   107ac:	cb 5d       	subi	r28, 0xDB	; 219
   107ae:	dd 4f       	sbci	r29, 0xFD	; 253
   107b0:	88 81       	ld	r24, Y
   107b2:	99 81       	ldd	r25, Y+1	; 0x01
   107b4:	c5 52       	subi	r28, 0x25	; 37
   107b6:	d2 40       	sbci	r29, 0x02	; 2
   107b8:	08 17       	cp	r16, r24
   107ba:	19 07       	cpc	r17, r25
   107bc:	19 f0       	breq	.+6      	; 0x107c4 <dbf_open_read+0x82>
    {
        flags |= ERR_READ;
        *errors = flags;
   107be:	81 e0       	ldi	r24, 0x01	; 1
   107c0:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   107c2:	e1 cf       	rjmp	.-62     	; 0x10786 <dbf_open_read+0x44>
   107c4:	ce 01       	movw	r24, r28
   107c6:	01 96       	adiw	r24, 0x01	; 1
   107c8:	9f df       	rcall	.-194    	; 0x10708 <dbf_close>
    if( rc != FR_OK)
   107ca:	89 2b       	or	r24, r25
   107cc:	31 f0       	breq	.+12     	; 0x107da <dbf_open_read+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   107ce:	80 e1       	ldi	r24, 0x10	; 16
   107d0:	90 e0       	ldi	r25, 0x00	; 0
   107d2:	f7 01       	movw	r30, r14
   107d4:	91 83       	std	Z+1, r25	; 0x01
   107d6:	80 83       	st	Z, r24
   107d8:	dc cf       	rjmp	.-72     	; 0x10792 <dbf_open_read+0x50>
#if 0
// test timeout - this works ok
	delayms(500); 
#endif

    return(bytes);
   107da:	cb 5d       	subi	r28, 0xDB	; 219
   107dc:	dd 4f       	sbci	r29, 0xFD	; 253
   107de:	88 81       	ld	r24, Y
   107e0:	99 81       	ldd	r25, Y+1	; 0x01
   107e2:	c5 52       	subi	r28, 0x25	; 37
   107e4:	d2 40       	sbci	r29, 0x02	; 2
}
   107e6:	ca 5d       	subi	r28, 0xDA	; 218
   107e8:	dd 4f       	sbci	r29, 0xFD	; 253
   107ea:	ec e0       	ldi	r30, 0x0C	; 12
   107ec:	0c 94 60 e3 	jmp	0x1c6c0	; 0x1c6c0 <__epilogue_restores__+0xc>

000107f0 <dbf_open_write>:
/// @return  bytes actually written.
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT
int dbf_open_write(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   107f0:	a6 e2       	ldi	r26, 0x26	; 38
   107f2:	b2 e0       	ldi	r27, 0x02	; 2
   107f4:	ee ef       	ldi	r30, 0xFE	; 254
   107f6:	f3 e8       	ldi	r31, 0x83	; 131
   107f8:	0c 94 44 e3 	jmp	0x1c688	; 0x1c688 <__prologue_saves__+0xc>
   107fc:	4a 01       	movw	r8, r20
   107fe:	5b 01       	movw	r10, r22
   10800:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   10802:	cb 5d       	subi	r28, 0xDB	; 219
   10804:	dd 4f       	sbci	r29, 0xFD	; 253
   10806:	19 82       	std	Y+1, r1	; 0x01
   10808:	18 82       	st	Y, r1
   1080a:	c5 52       	subi	r28, 0x25	; 37
   1080c:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   1080e:	43 e0       	ldi	r20, 0x03	; 3
   10810:	bc 01       	movw	r22, r24
   10812:	ce 01       	movw	r24, r28
   10814:	01 96       	adiw	r24, 0x01	; 1
   10816:	fe de       	rcall	.-516    	; 0x10614 <dbf_open>
    if( rc != FR_OK)
   10818:	89 2b       	or	r24, r25
   1081a:	19 f0       	breq	.+6      	; 0x10822 <dbf_open_write+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_WRITE;
        *errors = flags;
   1081c:	82 e1       	ldi	r24, 0x12	; 18
   1081e:	90 e0       	ldi	r25, 0x00	; 0
   10820:	2f c0       	rjmp	.+94     	; 0x10880 <dbf_open_write+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   10822:	b5 01       	movw	r22, r10
   10824:	a4 01       	movw	r20, r8
   10826:	ce 01       	movw	r24, r28
   10828:	01 96       	adiw	r24, 0x01	; 1
   1082a:	51 df       	rcall	.-350    	; 0x106ce <dbf_lseek>
    if( rc != FR_OK)
   1082c:	89 2b       	or	r24, r25
   1082e:	59 f0       	breq	.+22     	; 0x10846 <dbf_open_write+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_WRITE;
        *errors = flags;
   10830:	86 e0       	ldi	r24, 0x06	; 6
   10832:	90 e0       	ldi	r25, 0x00	; 0
   10834:	f7 01       	movw	r30, r14
   10836:	91 83       	std	Z+1, r25	; 0x01
   10838:	80 83       	st	Z, r24
        dbf_close(&fp);
   1083a:	ce 01       	movw	r24, r28
   1083c:	01 96       	adiw	r24, 0x01	; 1
   1083e:	64 df       	rcall	.-312    	; 0x10708 <dbf_close>
        return( -1 );
   10840:	8f ef       	ldi	r24, 0xFF	; 255
   10842:	9f ef       	ldi	r25, 0xFF	; 255
   10844:	27 c0       	rjmp	.+78     	; 0x10894 <dbf_open_write+0xa4>
    }

    rc = dbf_write(&fp, buff,size,&bytes);
   10846:	9e 01       	movw	r18, r28
   10848:	2b 5d       	subi	r18, 0xDB	; 219
   1084a:	3d 4f       	sbci	r19, 0xFD	; 253
   1084c:	a8 01       	movw	r20, r16
   1084e:	b6 01       	movw	r22, r12
   10850:	ce 01       	movw	r24, r28
   10852:	01 96       	adiw	r24, 0x01	; 1
   10854:	1f df       	rcall	.-450    	; 0x10694 <dbf_write>
    if( rc != FR_OK || (UINT) size != bytes)
   10856:	89 2b       	or	r24, r25
   10858:	49 f4       	brne	.+18     	; 0x1086c <dbf_open_write+0x7c>
   1085a:	cb 5d       	subi	r28, 0xDB	; 219
   1085c:	dd 4f       	sbci	r29, 0xFD	; 253
   1085e:	88 81       	ld	r24, Y
   10860:	99 81       	ldd	r25, Y+1	; 0x01
   10862:	c5 52       	subi	r28, 0x25	; 37
   10864:	d2 40       	sbci	r29, 0x02	; 2
   10866:	08 17       	cp	r16, r24
   10868:	19 07       	cpc	r17, r25
   1086a:	19 f0       	breq	.+6      	; 0x10872 <dbf_open_write+0x82>
    {
        flags |= ERR_WRITE;
        *errors = flags;
   1086c:	82 e0       	ldi	r24, 0x02	; 2
   1086e:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10870:	e1 cf       	rjmp	.-62     	; 0x10834 <dbf_open_write+0x44>
   10872:	ce 01       	movw	r24, r28
   10874:	01 96       	adiw	r24, 0x01	; 1
   10876:	48 df       	rcall	.-368    	; 0x10708 <dbf_close>
    if( rc != FR_OK)
   10878:	89 2b       	or	r24, r25
   1087a:	31 f0       	breq	.+12     	; 0x10888 <dbf_open_write+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   1087c:	80 e1       	ldi	r24, 0x10	; 16
   1087e:	90 e0       	ldi	r25, 0x00	; 0
   10880:	f7 01       	movw	r30, r14
   10882:	91 83       	std	Z+1, r25	; 0x01
   10884:	80 83       	st	Z, r24
   10886:	dc cf       	rjmp	.-72     	; 0x10840 <dbf_open_write+0x50>
#if 0
// test timeout - this causes timeout
	delayms(200); 
#endif

    return(bytes);
   10888:	cb 5d       	subi	r28, 0xDB	; 219
   1088a:	dd 4f       	sbci	r29, 0xFD	; 253
   1088c:	88 81       	ld	r24, Y
   1088e:	99 81       	ldd	r25, Y+1	; 0x01
   10890:	c5 52       	subi	r28, 0x25	; 37
   10892:	d2 40       	sbci	r29, 0x02	; 2
}
   10894:	ca 5d       	subi	r28, 0xDA	; 218
   10896:	dd 4f       	sbci	r29, 0xFD	; 253
   10898:	ec e0       	ldi	r30, 0x0C	; 12
   1089a:	0c 94 60 e3 	jmp	0x1c6c0	; 0x1c6c0 <__epilogue_restores__+0xc>

0001089e <gpib_timer_elapsed_begin>:
            gpib_timer_elapsed_end("PP released");
#endif
        return(1);
    }
    return(0);
}
   1089e:	0c 94 71 33 	jmp	0x66e2	; 0x66e2 <clock_elapsed_begin>
   108a2:	08 95       	ret

000108a4 <gpib_timer_reset>:
   108a4:	f8 94       	cli
   108a6:	ec ed       	ldi	r30, 0xDC	; 220
   108a8:	fc e1       	ldi	r31, 0x1C	; 28
   108aa:	10 82       	st	Z, r1
   108ac:	11 82       	std	Z+1, r1	; 0x01
   108ae:	12 82       	std	Z+2, r1	; 0x02
   108b0:	13 82       	std	Z+3, r1	; 0x03
   108b2:	14 82       	std	Z+4, r1	; 0x04
   108b4:	15 82       	std	Z+5, r1	; 0x05
   108b6:	16 82       	std	Z+6, r1	; 0x06
   108b8:	17 82       	std	Z+7, r1	; 0x07
   108ba:	81 e0       	ldi	r24, 0x01	; 1
   108bc:	80 87       	std	Z+8, r24	; 0x08
   108be:	78 94       	sei
   108c0:	08 95       	ret

000108c2 <gpib_timer_elapsed_end>:
   108c2:	0c 94 77 33 	jmp	0x66ee	; 0x66ee <clock_elapsed_end>
   108c6:	08 95       	ret

000108c8 <gpib_timer_task>:
   108c8:	f8 94       	cli
   108ca:	80 91 e0 1c 	lds	r24, 0x1CE0	; 0x801ce0 <gpib_timer+0x4>
   108ce:	90 91 e1 1c 	lds	r25, 0x1CE1	; 0x801ce1 <gpib_timer+0x5>
   108d2:	a0 91 e2 1c 	lds	r26, 0x1CE2	; 0x801ce2 <gpib_timer+0x6>
   108d6:	b0 91 e3 1c 	lds	r27, 0x1CE3	; 0x801ce3 <gpib_timer+0x7>
   108da:	89 2b       	or	r24, r25
   108dc:	8a 2b       	or	r24, r26
   108de:	8b 2b       	or	r24, r27
   108e0:	a1 f0       	breq	.+40     	; 0x1090a <gpib_timer_task+0x42>
   108e2:	80 91 e0 1c 	lds	r24, 0x1CE0	; 0x801ce0 <gpib_timer+0x4>
   108e6:	90 91 e1 1c 	lds	r25, 0x1CE1	; 0x801ce1 <gpib_timer+0x5>
   108ea:	a0 91 e2 1c 	lds	r26, 0x1CE2	; 0x801ce2 <gpib_timer+0x6>
   108ee:	b0 91 e3 1c 	lds	r27, 0x1CE3	; 0x801ce3 <gpib_timer+0x7>
   108f2:	01 97       	sbiw	r24, 0x01	; 1
   108f4:	a1 09       	sbc	r26, r1
   108f6:	b1 09       	sbc	r27, r1
   108f8:	80 93 e0 1c 	sts	0x1CE0, r24	; 0x801ce0 <gpib_timer+0x4>
   108fc:	90 93 e1 1c 	sts	0x1CE1, r25	; 0x801ce1 <gpib_timer+0x5>
   10900:	a0 93 e2 1c 	sts	0x1CE2, r26	; 0x801ce2 <gpib_timer+0x6>
   10904:	b0 93 e3 1c 	sts	0x1CE3, r27	; 0x801ce3 <gpib_timer+0x7>
   10908:	03 c0       	rjmp	.+6      	; 0x10910 <gpib_timer_task+0x48>
   1090a:	81 e0       	ldi	r24, 0x01	; 1
   1090c:	80 93 e4 1c 	sts	0x1CE4, r24	; 0x801ce4 <gpib_timer+0x8>
   10910:	78 94       	sei
   10912:	08 95       	ret

00010914 <gpib_timeout_set>:
   10914:	f8 94       	cli
   10916:	ec ed       	ldi	r30, 0xDC	; 220
   10918:	fc e1       	ldi	r31, 0x1C	; 28
   1091a:	64 83       	std	Z+4, r22	; 0x04
   1091c:	75 83       	std	Z+5, r23	; 0x05
   1091e:	86 83       	std	Z+6, r24	; 0x06
   10920:	97 83       	std	Z+7, r25	; 0x07
   10922:	10 86       	std	Z+8, r1	; 0x08
   10924:	78 94       	sei
   10926:	08 95       	ret

00010928 <gpib_bus_init>:
   10928:	00 d0       	rcall	.+0      	; 0x1092a <gpib_bus_init+0x2>
   1092a:	1f 92       	push	r1
   1092c:	8f b7       	in	r24, 0x3f	; 63
   1092e:	f8 94       	cli
   10930:	10 92 5c 19 	sts	0x195C, r1	; 0x80195c <gpib_unread_f>
   10934:	11 b8       	out	0x01, r1	; 1
   10936:	9f ef       	ldi	r25, 0xFF	; 255
   10938:	92 b9       	out	0x02, r25	; 2
   1093a:	21 98       	cbi	0x04, 1	; 4
   1093c:	29 9a       	sbi	0x05, 1	; 5
   1093e:	52 98       	cbi	0x0a, 2	; 10
   10940:	5a 9a       	sbi	0x0b, 2	; 11
   10942:	53 98       	cbi	0x0a, 3	; 10
   10944:	5b 9a       	sbi	0x0b, 3	; 11
   10946:	56 98       	cbi	0x0a, 6	; 10
   10948:	5e 9a       	sbi	0x0b, 6	; 11
   1094a:	54 98       	cbi	0x0a, 4	; 10
   1094c:	5c 9a       	sbi	0x0b, 4	; 11
   1094e:	57 98       	cbi	0x0a, 7	; 10
   10950:	5f 9a       	sbi	0x0b, 7	; 11
   10952:	55 98       	cbi	0x0a, 5	; 10
   10954:	5d 9a       	sbi	0x0b, 5	; 11
   10956:	20 98       	cbi	0x04, 0	; 4
   10958:	28 9a       	sbi	0x05, 0	; 5
   1095a:	45 98       	cbi	0x08, 5	; 8
   1095c:	3d 9a       	sbi	0x07, 5	; 7
   1095e:	44 9a       	sbi	0x08, 4	; 8
   10960:	3c 9a       	sbi	0x07, 4	; 7
   10962:	43 98       	cbi	0x08, 3	; 8
   10964:	3b 9a       	sbi	0x07, 3	; 7
   10966:	42 98       	cbi	0x08, 2	; 8
   10968:	3a 9a       	sbi	0x07, 2	; 7
   1096a:	9d e0       	ldi	r25, 0x0D	; 13
   1096c:	9a 95       	dec	r25
   1096e:	f1 f7       	brne	.-4      	; 0x1096c <gpib_bus_init+0x44>
   10970:	00 00       	nop
   10972:	8f bf       	out	0x3f, r24	; 63
   10974:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10978:	82 ff       	sbrs	r24, 2
   1097a:	0a c0       	rjmp	.+20     	; 0x10990 <gpib_bus_init+0x68>
   1097c:	86 e2       	ldi	r24, 0x26	; 38
   1097e:	92 e1       	ldi	r25, 0x12	; 18
   10980:	a0 e0       	ldi	r26, 0x00	; 0
   10982:	ed b7       	in	r30, 0x3d	; 61
   10984:	fe b7       	in	r31, 0x3e	; 62
   10986:	81 83       	std	Z+1, r24	; 0x01
   10988:	92 83       	std	Z+2, r25	; 0x02
   1098a:	a3 83       	std	Z+3, r26	; 0x03
   1098c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   10990:	0f 90       	pop	r0
   10992:	0f 90       	pop	r0
   10994:	0f 90       	pop	r0
   10996:	08 95       	ret

00010998 <gpib_rx_init>:
   10998:	9f b7       	in	r25, 0x3f	; 63
   1099a:	f8 94       	cli
   1099c:	11 b8       	out	0x01, r1	; 1
   1099e:	2f ef       	ldi	r18, 0xFF	; 255
   109a0:	22 b9       	out	0x02, r18	; 2
   109a2:	21 98       	cbi	0x04, 1	; 4
   109a4:	29 9a       	sbi	0x05, 1	; 5
   109a6:	20 98       	cbi	0x04, 0	; 4
   109a8:	28 9a       	sbi	0x05, 0	; 5
   109aa:	4e 9b       	sbis	0x09, 6	; 9
   109ac:	09 c0       	rjmp	.+18     	; 0x109c0 <gpib_rx_init+0x28>
   109ae:	81 11       	cpse	r24, r1
   109b0:	07 c0       	rjmp	.+14     	; 0x109c0 <gpib_rx_init+0x28>
   109b2:	52 98       	cbi	0x0a, 2	; 10
   109b4:	5a 9a       	sbi	0x0b, 2	; 11
   109b6:	53 98       	cbi	0x0a, 3	; 10
   109b8:	5b 9a       	sbi	0x0b, 3	; 11
   109ba:	42 98       	cbi	0x08, 2	; 8
   109bc:	3a 9a       	sbi	0x07, 2	; 7
   109be:	08 c0       	rjmp	.+16     	; 0x109d0 <gpib_rx_init+0x38>
   109c0:	42 98       	cbi	0x08, 2	; 8
   109c2:	3a 9a       	sbi	0x07, 2	; 7
   109c4:	5b 98       	cbi	0x0b, 3	; 11
   109c6:	53 9a       	sbi	0x0a, 3	; 10
   109c8:	5a 98       	cbi	0x0b, 2	; 11
   109ca:	52 9a       	sbi	0x0a, 2	; 10
   109cc:	88 23       	and	r24, r24
   109ce:	89 f3       	breq	.-30     	; 0x109b2 <gpib_rx_init+0x1a>
   109d0:	9f bf       	out	0x3f, r25	; 63
   109d2:	08 95       	ret

000109d4 <gpib_tx_init>:
   109d4:	9f b7       	in	r25, 0x3f	; 63
   109d6:	f8 94       	cli
   109d8:	11 b8       	out	0x01, r1	; 1
   109da:	8f ef       	ldi	r24, 0xFF	; 255
   109dc:	82 b9       	out	0x02, r24	; 2
   109de:	21 98       	cbi	0x04, 1	; 4
   109e0:	29 9a       	sbi	0x05, 1	; 5
   109e2:	52 98       	cbi	0x0a, 2	; 10
   109e4:	5a 9a       	sbi	0x0b, 2	; 11
   109e6:	53 98       	cbi	0x0a, 3	; 10
   109e8:	5b 9a       	sbi	0x0b, 3	; 11
   109ea:	20 98       	cbi	0x04, 0	; 4
   109ec:	28 9a       	sbi	0x05, 0	; 5
   109ee:	42 9a       	sbi	0x08, 2	; 8
   109f0:	3a 9a       	sbi	0x07, 2	; 7
   109f2:	81 b9       	out	0x01, r24	; 1
   109f4:	9f bf       	out	0x3f, r25	; 63
   109f6:	08 95       	ret

000109f8 <gpib_state_init>:
   109f8:	00 d0       	rcall	.+0      	; 0x109fa <gpib_state_init+0x2>
   109fa:	1f 92       	push	r1
   109fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10a00:	82 ff       	sbrs	r24, 2
   10a02:	0a c0       	rjmp	.+20     	; 0x10a18 <gpib_state_init+0x20>
   10a04:	83 e1       	ldi	r24, 0x13	; 19
   10a06:	92 e1       	ldi	r25, 0x12	; 18
   10a08:	a0 e0       	ldi	r26, 0x00	; 0
   10a0a:	ed b7       	in	r30, 0x3d	; 61
   10a0c:	fe b7       	in	r31, 0x3e	; 62
   10a0e:	81 83       	std	Z+1, r24	; 0x01
   10a10:	92 83       	std	Z+2, r25	; 0x02
   10a12:	a3 83       	std	Z+3, r26	; 0x03
   10a14:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   10a18:	cc dd       	rcall	.-1128   	; 0x105b2 <ppr_init>
   10a1a:	0e 94 b4 8f 	call	0x11f68	; 0x11f68 <listen_cleanup>
   10a1e:	0e 94 ca 90 	call	0x12194	; 0x12194 <talk_cleanup>
   10a22:	10 92 e8 1e 	sts	0x1EE8, r1	; 0x801ee8 <spoll>
   10a26:	10 92 eb 1e 	sts	0x1EEB, r1	; 0x801eeb <talking>
   10a2a:	10 92 ee 1e 	sts	0x1EEE, r1	; 0x801eee <talking_last>
   10a2e:	10 92 ed 1e 	sts	0x1EED, r1	; 0x801eed <listening>
   10a32:	10 92 e7 1e 	sts	0x1EE7, r1	; 0x801ee7 <listening_last>
   10a36:	10 92 e6 1c 	sts	0x1CE6, r1	; 0x801ce6 <lastcmd+0x1>
   10a3a:	10 92 e5 1c 	sts	0x1CE5, r1	; 0x801ce5 <lastcmd>
   10a3e:	10 92 ea 1e 	sts	0x1EEA, r1	; 0x801eea <current+0x1>
   10a42:	10 92 e9 1e 	sts	0x1EE9, r1	; 0x801ee9 <current>
   10a46:	10 92 ec 1e 	sts	0x1EEC, r1	; 0x801eec <secondary>
   10a4a:	0f 90       	pop	r0
   10a4c:	0f 90       	pop	r0
   10a4e:	0f 90       	pop	r0
   10a50:	08 95       	ret

00010a52 <gpib_enable_PPR>:
   10a52:	cf 93       	push	r28
   10a54:	df 93       	push	r29
   10a56:	ad b7       	in	r26, 0x3d	; 61
   10a58:	be b7       	in	r27, 0x3e	; 62
   10a5a:	17 97       	sbiw	r26, 0x07	; 7
   10a5c:	0f b6       	in	r0, 0x3f	; 63
   10a5e:	f8 94       	cli
   10a60:	be bf       	out	0x3e, r27	; 62
   10a62:	0f be       	out	0x3f, r0	; 63
   10a64:	ad bf       	out	0x3d, r26	; 61
   10a66:	ec 01       	movw	r28, r24
   10a68:	88 30       	cpi	r24, 0x08	; 8
   10a6a:	91 05       	cpc	r25, r1
   10a6c:	68 f0       	brcs	.+26     	; 0x10a88 <gpib_enable_PPR+0x36>
   10a6e:	ed b7       	in	r30, 0x3d	; 61
   10a70:	fe b7       	in	r31, 0x3e	; 62
   10a72:	95 83       	std	Z+5, r25	; 0x05
   10a74:	84 83       	std	Z+4, r24	; 0x04
   10a76:	8d ee       	ldi	r24, 0xED	; 237
   10a78:	91 e1       	ldi	r25, 0x11	; 17
   10a7a:	a0 e0       	ldi	r26, 0x00	; 0
   10a7c:	81 83       	std	Z+1, r24	; 0x01
   10a7e:	92 83       	std	Z+2, r25	; 0x02
   10a80:	a3 83       	std	Z+3, r26	; 0x03
   10a82:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   10a86:	15 c0       	rjmp	.+42     	; 0x10ab2 <gpib_enable_PPR+0x60>
   10a88:	aa dd       	rcall	.-1196   	; 0x105de <ppr_bit_set>
   10a8a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10a8e:	81 ff       	sbrs	r24, 1
   10a90:	10 c0       	rjmp	.+32     	; 0x10ab2 <gpib_enable_PPR+0x60>
   10a92:	8b dd       	rcall	.-1258   	; 0x105aa <ppr_reg>
   10a94:	90 e0       	ldi	r25, 0x00	; 0
   10a96:	ed b7       	in	r30, 0x3d	; 61
   10a98:	fe b7       	in	r31, 0x3e	; 62
   10a9a:	97 83       	std	Z+7, r25	; 0x07
   10a9c:	86 83       	std	Z+6, r24	; 0x06
   10a9e:	d5 83       	std	Z+5, r29	; 0x05
   10aa0:	c4 83       	std	Z+4, r28	; 0x04
   10aa2:	82 ed       	ldi	r24, 0xD2	; 210
   10aa4:	91 e1       	ldi	r25, 0x11	; 17
   10aa6:	a0 e0       	ldi	r26, 0x00	; 0
   10aa8:	81 83       	std	Z+1, r24	; 0x01
   10aaa:	92 83       	std	Z+2, r25	; 0x02
   10aac:	a3 83       	std	Z+3, r26	; 0x03
   10aae:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   10ab2:	cd b7       	in	r28, 0x3d	; 61
   10ab4:	de b7       	in	r29, 0x3e	; 62
   10ab6:	27 96       	adiw	r28, 0x07	; 7
   10ab8:	e2 e0       	ldi	r30, 0x02	; 2
   10aba:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00010abe <gpib_disable_PPR>:
   10abe:	cf 93       	push	r28
   10ac0:	df 93       	push	r29
   10ac2:	ad b7       	in	r26, 0x3d	; 61
   10ac4:	be b7       	in	r27, 0x3e	; 62
   10ac6:	17 97       	sbiw	r26, 0x07	; 7
   10ac8:	0f b6       	in	r0, 0x3f	; 63
   10aca:	f8 94       	cli
   10acc:	be bf       	out	0x3e, r27	; 62
   10ace:	0f be       	out	0x3f, r0	; 63
   10ad0:	ad bf       	out	0x3d, r26	; 61
   10ad2:	ec 01       	movw	r28, r24
   10ad4:	88 30       	cpi	r24, 0x08	; 8
   10ad6:	91 05       	cpc	r25, r1
   10ad8:	68 f0       	brcs	.+26     	; 0x10af4 <gpib_disable_PPR+0x36>
   10ada:	ed b7       	in	r30, 0x3d	; 61
   10adc:	fe b7       	in	r31, 0x3e	; 62
   10ade:	95 83       	std	Z+5, r25	; 0x05
   10ae0:	84 83       	std	Z+4, r24	; 0x04
   10ae2:	8b ea       	ldi	r24, 0xAB	; 171
   10ae4:	91 e1       	ldi	r25, 0x11	; 17
   10ae6:	a0 e0       	ldi	r26, 0x00	; 0
   10ae8:	81 83       	std	Z+1, r24	; 0x01
   10aea:	92 83       	std	Z+2, r25	; 0x02
   10aec:	a3 83       	std	Z+3, r26	; 0x03
   10aee:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   10af2:	15 c0       	rjmp	.+42     	; 0x10b1e <gpib_disable_PPR+0x60>
   10af4:	81 dd       	rcall	.-1278   	; 0x105f8 <ppr_bit_clr>
   10af6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10afa:	81 ff       	sbrs	r24, 1
   10afc:	10 c0       	rjmp	.+32     	; 0x10b1e <gpib_disable_PPR+0x60>
   10afe:	55 dd       	rcall	.-1366   	; 0x105aa <ppr_reg>
   10b00:	90 e0       	ldi	r25, 0x00	; 0
   10b02:	ed b7       	in	r30, 0x3d	; 61
   10b04:	fe b7       	in	r31, 0x3e	; 62
   10b06:	97 83       	std	Z+7, r25	; 0x07
   10b08:	86 83       	std	Z+6, r24	; 0x06
   10b0a:	d5 83       	std	Z+5, r29	; 0x05
   10b0c:	c4 83       	std	Z+4, r28	; 0x04
   10b0e:	80 e9       	ldi	r24, 0x90	; 144
   10b10:	91 e1       	ldi	r25, 0x11	; 17
   10b12:	a0 e0       	ldi	r26, 0x00	; 0
   10b14:	81 83       	std	Z+1, r24	; 0x01
   10b16:	92 83       	std	Z+2, r25	; 0x02
   10b18:	a3 83       	std	Z+3, r26	; 0x03
   10b1a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   10b1e:	cd b7       	in	r28, 0x3d	; 61
   10b20:	de b7       	in	r29, 0x3e	; 62
   10b22:	27 96       	adiw	r28, 0x07	; 7
   10b24:	e2 e0       	ldi	r30, 0x02	; 2
   10b26:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00010b2a <gpib_unread>:
///     - If ATN is LOW then we strip parity from the byte.
///   - Upper 8 bits: Status and Errors present.
///     - @see gpib.h _FLAGS defines for a full list.
/// @return ch
uint16_t gpib_unread(uint16_t ch)
{
   10b2a:	cf 93       	push	r28
   10b2c:	df 93       	push	r29
   10b2e:	00 d0       	rcall	.+0      	; 0x10b30 <gpib_unread+0x6>
   10b30:	1f 92       	push	r1
   10b32:	ec 01       	movw	r28, r24
    if(!gpib_unread_f)
   10b34:	80 91 5c 19 	lds	r24, 0x195C	; 0x80195c <gpib_unread_f>
   10b38:	81 11       	cpse	r24, r1
   10b3a:	08 c0       	rjmp	.+16     	; 0x10b4c <gpib_unread+0x22>
    {
        gpib_unread_data = ch;
   10b3c:	d0 93 f0 1e 	sts	0x1EF0, r29	; 0x801ef0 <gpib_unread_data+0x1>
   10b40:	c0 93 ef 1e 	sts	0x1EEF, r28	; 0x801eef <gpib_unread_data>
        gpib_unread_f = 1;
   10b44:	81 e0       	ldi	r24, 0x01	; 1
   10b46:	80 93 5c 19 	sts	0x195C, r24	; 0x80195c <gpib_unread_f>
   10b4a:	12 c0       	rjmp	.+36     	; 0x10b70 <gpib_unread+0x46>
    }
    else
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10b4c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b50:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10b54:	85 70       	andi	r24, 0x05	; 5
   10b56:	99 27       	eor	r25, r25
   10b58:	89 2b       	or	r24, r25
   10b5a:	51 f0       	breq	.+20     	; 0x10b70 <gpib_unread+0x46>
            printf("gpib_unread: error, can only be called once!\n");
   10b5c:	82 e6       	ldi	r24, 0x62	; 98
   10b5e:	91 e1       	ldi	r25, 0x11	; 17
   10b60:	a0 e0       	ldi	r26, 0x00	; 0
   10b62:	ed b7       	in	r30, 0x3d	; 61
   10b64:	fe b7       	in	r31, 0x3e	; 62
   10b66:	81 83       	std	Z+1, r24	; 0x01
   10b68:	92 83       	std	Z+2, r25	; 0x02
   10b6a:	a3 83       	std	Z+3, r26	; 0x03
   10b6c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    }
    return(ch);
}
   10b70:	ce 01       	movw	r24, r28
   10b72:	cd b7       	in	r28, 0x3d	; 61
   10b74:	de b7       	in	r29, 0x3e	; 62
   10b76:	23 96       	adiw	r28, 0x03	; 3
   10b78:	e2 e0       	ldi	r30, 0x02	; 2
   10b7a:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00010b7e <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10b7e:	11 b8       	out	0x01, r1	; 1
   10b80:	80 b1       	in	r24, 0x00	; 0
   10b82:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10b84:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10b86:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10b88:	08 95       	ret

00010b8a <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10b8a:	4e 99       	sbic	0x09, 6	; 9
   10b8c:	03 c0       	rjmp	.+6      	; 0x10b94 <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10b8e:	80 e0       	ldi	r24, 0x00	; 0
   10b90:	94 e0       	ldi	r25, 0x04	; 4
   10b92:	02 c0       	rjmp	.+4      	; 0x10b98 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10b94:	80 e0       	ldi	r24, 0x00	; 0
   10b96:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10b98:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10b9a:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10b9c:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10b9e:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10ba0:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10ba2:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10ba4:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10ba6:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10ba8:	08 95       	ret

00010baa <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10baa:	19 99       	sbic	0x03, 1	; 3
   10bac:	03 c0       	rjmp	.+6      	; 0x10bb4 <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10bae:	80 e0       	ldi	r24, 0x00	; 0
   10bb0:	90 e2       	ldi	r25, 0x20	; 32
   10bb2:	02 c0       	rjmp	.+4      	; 0x10bb8 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10bb4:	80 e0       	ldi	r24, 0x00	; 0
   10bb6:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10bb8:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10bba:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10bbc:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10bbe:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10bc0:	08 95       	ret

00010bc2 <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10bc2:	2f 92       	push	r2
   10bc4:	3f 92       	push	r3
   10bc6:	4f 92       	push	r4
   10bc8:	6f 92       	push	r6
   10bca:	7f 92       	push	r7
   10bcc:	8f 92       	push	r8
   10bce:	af 92       	push	r10
   10bd0:	bf 92       	push	r11
   10bd2:	cf 92       	push	r12
   10bd4:	df 92       	push	r13
   10bd6:	ef 92       	push	r14
   10bd8:	1f 93       	push	r17
   10bda:	cf 93       	push	r28
   10bdc:	df 93       	push	r29
   10bde:	cd b7       	in	r28, 0x3d	; 61
   10be0:	de b7       	in	r29, 0x3e	; 62
   10be2:	2a 97       	sbiw	r28, 0x0a	; 10
   10be4:	0f b6       	in	r0, 0x3f	; 63
   10be6:	f8 94       	cli
   10be8:	de bf       	out	0x3e, r29	; 62
   10bea:	0f be       	out	0x3f, r0	; 63
   10bec:	cd bf       	out	0x3d, r28	; 61
   10bee:	9a 87       	std	Y+10, r25	; 0x0a
   10bf0:	89 87       	std	Y+9, r24	; 0x09
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10bf2:	64 ef       	ldi	r22, 0xF4	; 244
   10bf4:	71 e0       	ldi	r23, 0x01	; 1
   10bf6:	80 e0       	ldi	r24, 0x00	; 0
   10bf8:	90 e0       	ldi	r25, 0x00	; 0
   10bfa:	8c de       	rcall	.-744    	; 0x10914 <gpib_timeout_set>
// Now Done in write_str
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
   10bfc:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10bfe:	8e e3       	ldi	r24, 0x3E	; 62
   10c00:	90 e1       	ldi	r25, 0x10	; 16
   10c02:	6c 01       	movw	r12, r24
   10c04:	e1 2c       	mov	r14, r1
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10c06:	8d e6       	ldi	r24, 0x6D	; 109
   10c08:	90 e1       	ldi	r25, 0x10	; 16
   10c0a:	3c 01       	movw	r6, r24
   10c0c:	81 2c       	mov	r8, r1
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10c0e:	aa 24       	eor	r10, r10
   10c10:	a3 94       	inc	r10
   10c12:	b1 2c       	mov	r11, r1
   10c14:	85 ee       	ldi	r24, 0xE5	; 229
   10c16:	90 e1       	ldi	r25, 0x10	; 16
   10c18:	1c 01       	movw	r2, r24
   10c1a:	41 2c       	mov	r4, r1
					break;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10c1c:	89 ea       	ldi	r24, 0xA9	; 169
   10c1e:	90 e1       	ldi	r25, 0x10	; 16
   10c20:	9c 01       	movw	r18, r24
   10c22:	40 e0       	ldi	r20, 0x00	; 0
   10c24:	2e 83       	std	Y+6, r18	; 0x06
   10c26:	3f 83       	std	Y+7, r19	; 0x07
   10c28:	48 87       	std	Y+8, r20	; 0x08
	// Not called for writting
#if 0
        gpib_user_task();
#endif

		if(uart_keyhit(0))
   10c2a:	80 e0       	ldi	r24, 0x00	; 0
   10c2c:	0e 94 68 28 	call	0x50d0	; 0x50d0 <uart_keyhit>
   10c30:	89 2b       	or	r24, r25
   10c32:	69 f0       	breq	.+26     	; 0x10c4e <gpib_write_byte+0x8c>
		{
			if(debuglevel & GPIB_ERR)
   10c34:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c38:	80 ff       	sbrs	r24, 0
   10c3a:	f1 c0       	rjmp	.+482    	; 0x10e1e <gpib_write_byte+0x25c>
				printf("gpib_write_byte: KEY state=%d\n", tx_state);
   10c3c:	81 2f       	mov	r24, r17
   10c3e:	90 e0       	ldi	r25, 0x00	; 0
   10c40:	ed b7       	in	r30, 0x3d	; 61
   10c42:	fe b7       	in	r31, 0x3e	; 62
   10c44:	95 83       	std	Z+5, r25	; 0x05
   10c46:	84 83       	std	Z+4, r24	; 0x04
   10c48:	83 e4       	ldi	r24, 0x43	; 67
   10c4a:	91 e1       	ldi	r25, 0x11	; 17
   10c4c:	14 c0       	rjmp	.+40     	; 0x10c76 <gpib_write_byte+0xb4>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10c4e:	4c 99       	sbic	0x09, 4	; 9
   10c50:	19 c0       	rjmp	.+50     	; 0x10c84 <gpib_write_byte+0xc2>
        {
            ch |= IFC_FLAG;
   10c52:	29 85       	ldd	r18, Y+9	; 0x09
   10c54:	3a 85       	ldd	r19, Y+10	; 0x0a
   10c56:	30 61       	ori	r19, 0x10	; 16
   10c58:	3a 87       	std	Y+10, r19	; 0x0a
            gpib_bus_init();
   10c5a:	29 87       	std	Y+9, r18	; 0x09
   10c5c:	65 de       	rcall	.-822    	; 0x10928 <gpib_bus_init>
			if(debuglevel & GPIB_ERR)
   10c5e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c62:	80 ff       	sbrs	r24, 0
   10c64:	dc c0       	rjmp	.+440    	; 0x10e1e <gpib_write_byte+0x25c>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   10c66:	81 2f       	mov	r24, r17
   10c68:	90 e0       	ldi	r25, 0x00	; 0
   10c6a:	ed b7       	in	r30, 0x3d	; 61
   10c6c:	fe b7       	in	r31, 0x3e	; 62
   10c6e:	95 83       	std	Z+5, r25	; 0x05
   10c70:	84 83       	std	Z+4, r24	; 0x04
   10c72:	84 e2       	ldi	r24, 0x24	; 36
   10c74:	91 e1       	ldi	r25, 0x11	; 17
   10c76:	a0 e0       	ldi	r26, 0x00	; 0
   10c78:	81 83       	std	Z+1, r24	; 0x01
   10c7a:	92 83       	std	Z+2, r25	; 0x02
   10c7c:	a3 83       	std	Z+3, r26	; 0x03
   10c7e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   10c82:	cd c0       	rjmp	.+410    	; 0x10e1e <gpib_write_byte+0x25c>
            break;
        }

        switch(tx_state)
   10c84:	81 2f       	mov	r24, r17
   10c86:	90 e0       	ldi	r25, 0x00	; 0
   10c88:	89 30       	cpi	r24, 0x09	; 9
   10c8a:	91 05       	cpc	r25, r1
   10c8c:	08 f0       	brcs	.+2      	; 0x10c90 <gpib_write_byte+0xce>
   10c8e:	bf c0       	rjmp	.+382    	; 0x10e0e <gpib_write_byte+0x24c>
   10c90:	fc 01       	movw	r30, r24
   10c92:	e3 54       	subi	r30, 0x43	; 67
   10c94:	ff 4f       	sbci	r31, 0xFF	; 255
   10c96:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__tablejump2__>
        {
			// DAV == 1 the bus is ready
            case GPIB_TX_START:
				gpib_tx_init(0);
   10c9a:	80 e0       	ldi	r24, 0x00	; 0
   10c9c:	9b de       	rcall	.-714    	; 0x109d4 <gpib_tx_init>
				GPIB_PIN_FLOAT_UP(DAV);
   10c9e:	21 98       	cbi	0x04, 1	; 4
   10ca0:	29 9a       	sbi	0x05, 1	; 5
   10ca2:	fd e0       	ldi	r31, 0x0D	; 13
   10ca4:	fa 95       	dec	r31
   10ca6:	f1 f7       	brne	.-4      	; 0x10ca4 <gpib_write_byte+0xe2>
   10ca8:	00 00       	nop
   10caa:	06 c0       	rjmp	.+12     	; 0x10cb8 <gpib_write_byte+0xf6>
                tx_state = GPIB_TX_PUT_DATA;
                break;

// Wait for NRFD or NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_OR_NDAC_LOW:
                if(GPIB_PIN_TST(NRFD) == 0 || GPIB_PIN_TST(NDAC) == 0)
   10cac:	4a 9b       	sbis	0x09, 2	; 9
   10cae:	02 c0       	rjmp	.+4      	; 0x10cb4 <gpib_write_byte+0xf2>
   10cb0:	4b 99       	sbic	0x09, 3	; 9
   10cb2:	17 c0       	rjmp	.+46     	; 0x10ce2 <gpib_write_byte+0x120>
                {
					if(GPIB_PIN_TST(ATN) == 1)
   10cb4:	4e 9b       	sbis	0x09, 6	; 9
   10cb6:	07 c0       	rjmp	.+14     	; 0x10cc6 <gpib_write_byte+0x104>
					{
						gpib_timeout_set(HTIMEOUT);
   10cb8:	64 ef       	ldi	r22, 0xF4	; 244
   10cba:	71 e0       	ldi	r23, 0x01	; 1
   10cbc:	80 e0       	ldi	r24, 0x00	; 0
   10cbe:	90 e0       	ldi	r25, 0x00	; 0
   10cc0:	29 de       	rcall	.-942    	; 0x10914 <gpib_timeout_set>
						tx_state = GPIB_TX_PUT_DATA;
   10cc2:	12 e0       	ldi	r17, 0x02	; 2
   10cc4:	b2 cf       	rjmp	.-156    	; 0x10c2a <gpib_write_byte+0x68>
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
   10cc6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10cca:	80 ff       	sbrs	r24, 0
   10ccc:	ae cf       	rjmp	.-164    	; 0x10c2a <gpib_write_byte+0x68>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10cce:	ed b7       	in	r30, 0x3d	; 61
   10cd0:	fe b7       	in	r31, 0x3e	; 62
   10cd2:	b5 82       	std	Z+5, r11	; 0x05
   10cd4:	a4 82       	std	Z+4, r10	; 0x04
   10cd6:	21 82       	std	Z+1, r2	; 0x01
   10cd8:	32 82       	std	Z+2, r3	; 0x02
   10cda:	43 82       	std	Z+3, r4	; 0x03
   10cdc:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   10ce0:	a4 cf       	rjmp	.-184    	; 0x10c2a <gpib_write_byte+0x68>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10ce2:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <gpib_timer+0x8>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
#endif
					}
					break;
                }
                if (gpib_timeout_test())
   10ce6:	88 23       	and	r24, r24
   10ce8:	09 f4       	brne	.+2      	; 0x10cec <gpib_write_byte+0x12a>
   10cea:	9f cf       	rjmp	.-194    	; 0x10c2a <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10cec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10cf0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10cf4:	85 70       	andi	r24, 0x05	; 5
   10cf6:	99 27       	eor	r25, r25
   10cf8:	89 2b       	or	r24, r25
   10cfa:	c1 f1       	breq	.+112    	; 0x10d6c <gpib_write_byte+0x1aa>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10cfc:	2e 81       	ldd	r18, Y+6	; 0x06
   10cfe:	3f 81       	ldd	r19, Y+7	; 0x07
   10d00:	48 85       	ldd	r20, Y+8	; 0x08
   10d02:	ed b7       	in	r30, 0x3d	; 61
   10d04:	fe b7       	in	r31, 0x3e	; 62
   10d06:	21 83       	std	Z+1, r18	; 0x01
   10d08:	32 83       	std	Z+2, r19	; 0x02
   10d0a:	43 83       	std	Z+3, r20	; 0x03
   10d0c:	2d c0       	rjmp	.+90     	; 0x10d68 <gpib_write_byte+0x1a6>
                }
                break;

// Write Data
            case GPIB_TX_PUT_DATA:
                if(ch & EOI_FLAG)
   10d0e:	89 85       	ldd	r24, Y+9	; 0x09
   10d10:	9a 85       	ldd	r25, Y+10	; 0x0a
   10d12:	90 ff       	sbrs	r25, 0
   10d14:	03 c0       	rjmp	.+6      	; 0x10d1c <gpib_write_byte+0x15a>
                    GPIB_IO_LOW(EOI);
   10d16:	28 98       	cbi	0x05, 0	; 5
   10d18:	20 9a       	sbi	0x04, 0	; 4
   10d1a:	02 c0       	rjmp	.+4      	; 0x10d20 <gpib_write_byte+0x15e>
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10d1c:	20 98       	cbi	0x04, 0	; 4
   10d1e:	28 9a       	sbi	0x05, 0	; 5
                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10d20:	8f ef       	ldi	r24, 0xFF	; 255
   10d22:	81 b9       	out	0x01, r24	; 1
   10d24:	89 85       	ldd	r24, Y+9	; 0x09
   10d26:	80 95       	com	r24
   10d28:	82 b9       	out	0x02, r24	; 2
   10d2a:	9d e0       	ldi	r25, 0x0D	; 13
   10d2c:	9a 95       	dec	r25
   10d2e:	f1 f7       	brne	.-4      	; 0x10d2c <gpib_write_byte+0x16a>
   10d30:	00 00       	nop
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10d32:	64 ef       	ldi	r22, 0xF4	; 244
   10d34:	71 e0       	ldi	r23, 0x01	; 1
   10d36:	80 e0       	ldi	r24, 0x00	; 0
   10d38:	90 e0       	ldi	r25, 0x00	; 0
   10d3a:	ec dd       	rcall	.-1064   	; 0x10914 <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NRFD_HI;
   10d3c:	13 e0       	ldi	r17, 0x03	; 3
                break;
   10d3e:	75 cf       	rjmp	.-278    	; 0x10c2a <gpib_write_byte+0x68>
// Wait for BOTH NRFD HI and NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_HI:
#if 0
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
#else
                if(GPIB_PIN_TST(NRFD))
   10d40:	4a 99       	sbic	0x09, 2	; 9
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
   10d42:	14 e0       	ldi	r17, 0x04	; 4
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10d44:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD))
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
   10d48:	88 23       	and	r24, r24
   10d4a:	09 f4       	brne	.+2      	; 0x10d4e <gpib_write_byte+0x18c>
   10d4c:	6e cf       	rjmp	.-292    	; 0x10c2a <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10d4e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d52:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10d56:	85 70       	andi	r24, 0x05	; 5
   10d58:	99 27       	eor	r25, r25
   10d5a:	89 2b       	or	r24, r25
   10d5c:	39 f0       	breq	.+14     	; 0x10d6c <gpib_write_byte+0x1aa>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10d5e:	ed b7       	in	r30, 0x3d	; 61
   10d60:	fe b7       	in	r31, 0x3e	; 62
   10d62:	61 82       	std	Z+1, r6	; 0x01
   10d64:	72 82       	std	Z+2, r7	; 0x02
   10d66:	83 82       	std	Z+3, r8	; 0x03
   10d68:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
                    ch |= TIMEOUT_FLAG;
   10d6c:	29 85       	ldd	r18, Y+9	; 0x09
   10d6e:	3a 85       	ldd	r19, Y+10	; 0x0a
   10d70:	30 64       	ori	r19, 0x40	; 64
   10d72:	3a 87       	std	Y+10, r19	; 0x0a
   10d74:	29 87       	std	Y+9, r18	; 0x09
   10d76:	51 c0       	rjmp	.+162    	; 0x10e1a <gpib_write_byte+0x258>
                    break;
                }
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10d78:	29 98       	cbi	0x05, 1	; 5
   10d7a:	21 9a       	sbi	0x04, 1	; 4
   10d7c:	3d e0       	ldi	r19, 0x0D	; 13
   10d7e:	3a 95       	dec	r19
   10d80:	f1 f7       	brne	.-4      	; 0x10d7e <gpib_write_byte+0x1bc>
                GPIB_BUS_SETTLE();                
                gpib_timeout_set(HTIMEOUT);
   10d82:	00 00       	nop
   10d84:	64 ef       	ldi	r22, 0xF4	; 244
   10d86:	71 e0       	ldi	r23, 0x01	; 1
   10d88:	80 e0       	ldi	r24, 0x00	; 0
   10d8a:	90 e0       	ldi	r25, 0x00	; 0
   10d8c:	c3 dd       	rcall	.-1146   	; 0x10914 <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   10d8e:	15 e0       	ldi	r17, 0x05	; 5
                break;
   10d90:	4c cf       	rjmp	.-360    	; 0x10c2a <gpib_write_byte+0x68>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   10d92:	4b 99       	sbic	0x09, 3	; 9
   10d94:	40 c0       	rjmp	.+128    	; 0x10e16 <gpib_write_byte+0x254>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10d96:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   10d9a:	88 23       	and	r24, r24
   10d9c:	09 f4       	brne	.+2      	; 0x10da0 <gpib_write_byte+0x1de>
   10d9e:	45 cf       	rjmp	.-374    	; 0x10c2a <gpib_write_byte+0x68>
                {
                    ch |= TIMEOUT_FLAG;
   10da0:	89 85       	ldd	r24, Y+9	; 0x09
   10da2:	9a 85       	ldd	r25, Y+10	; 0x0a
   10da4:	90 64       	ori	r25, 0x40	; 64
   10da6:	9a 87       	std	Y+10, r25	; 0x0a
   10da8:	89 87       	std	Y+9, r24	; 0x09
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10daa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10dae:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10db2:	85 70       	andi	r24, 0x05	; 5
   10db4:	99 27       	eor	r25, r25
   10db6:	89 2b       	or	r24, r25
   10db8:	81 f1       	breq	.+96     	; 0x10e1a <gpib_write_byte+0x258>
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10dba:	ed b7       	in	r30, 0x3d	; 61
   10dbc:	fe b7       	in	r31, 0x3e	; 62
   10dbe:	c1 82       	std	Z+1, r12	; 0x01
   10dc0:	d2 82       	std	Z+2, r13	; 0x02
   10dc2:	e3 82       	std	Z+3, r14	; 0x03
   10dc4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   10dc8:	28 c0       	rjmp	.+80     	; 0x10e1a <gpib_write_byte+0x258>
                }
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   10dca:	21 98       	cbi	0x04, 1	; 4
   10dcc:	29 9a       	sbi	0x05, 1	; 5
   10dce:	fd e0       	ldi	r31, 0x0D	; 13
   10dd0:	fa 95       	dec	r31
   10dd2:	f1 f7       	brne	.-4      	; 0x10dd0 <gpib_write_byte+0x20e>
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
                gpib_timeout_set(HTIMEOUT);
   10dd4:	00 00       	nop
   10dd6:	64 ef       	ldi	r22, 0xF4	; 244
   10dd8:	71 e0       	ldi	r23, 0x01	; 1
   10dda:	80 e0       	ldi	r24, 0x00	; 0
   10ddc:	90 e0       	ldi	r25, 0x00	; 0

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
   10dde:	9a dd       	rcall	.-1228   	; 0x10914 <gpib_timeout_set>
                gpib_timeout_set(HTIMEOUT);
                break;
   10de0:	17 e0       	ldi	r17, 0x07	; 7
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
				// Free BUS, BUSY on error
                gpib_rx_init(1);
   10de2:	23 cf       	rjmp	.-442    	; 0x10c2a <gpib_write_byte+0x68>
   10de4:	81 e0       	ldi	r24, 0x01	; 1
   10de6:	d8 dd       	rcall	.-1104   	; 0x10998 <gpib_rx_init>
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10de8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10dec:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10df0:	85 70       	andi	r24, 0x05	; 5
   10df2:	99 27       	eor	r25, r25
   10df4:	89 2b       	or	r24, r25
   10df6:	99 f0       	breq	.+38     	; 0x10e1e <gpib_write_byte+0x25c>
                    printf("<GPIB TX TIMEOUT>\n");
   10df8:	8b e2       	ldi	r24, 0x2B	; 43
   10dfa:	90 e1       	ldi	r25, 0x10	; 16
   10dfc:	a0 e0       	ldi	r26, 0x00	; 0
   10dfe:	ed b7       	in	r30, 0x3d	; 61
   10e00:	fe b7       	in	r31, 0x3e	; 62
   10e02:	81 83       	std	Z+1, r24	; 0x01
   10e04:	92 83       	std	Z+2, r25	; 0x02
   10e06:	a3 83       	std	Z+3, r26	; 0x03
   10e08:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   10e0c:	08 c0       	rjmp	.+16     	; 0x10e1e <gpib_write_byte+0x25c>
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
    while(tx_state != GPIB_TX_DONE )
   10e0e:	19 30       	cpi	r17, 0x09	; 9
   10e10:	09 f0       	breq	.+2      	; 0x10e14 <gpib_write_byte+0x252>
   10e12:	0b cf       	rjmp	.-490    	; 0x10c2a <gpib_write_byte+0x68>
   10e14:	04 c0       	rjmp	.+8      	; 0x10e1e <gpib_write_byte+0x25c>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   10e16:	16 e0       	ldi	r17, 0x06	; 6
   10e18:	08 cf       	rjmp	.-496    	; 0x10c2a <gpib_write_byte+0x68>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   10e1a:	18 e0       	ldi	r17, 0x08	; 8
   10e1c:	06 cf       	rjmp	.-500    	; 0x10c2a <gpib_write_byte+0x68>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   10e1e:	89 85       	ldd	r24, Y+9	; 0x09
   10e20:	9a 85       	ldd	r25, Y+10	; 0x0a
   10e22:	2a 96       	adiw	r28, 0x0a	; 10
   10e24:	0f b6       	in	r0, 0x3f	; 63
   10e26:	f8 94       	cli
   10e28:	de bf       	out	0x3e, r29	; 62
   10e2a:	0f be       	out	0x3f, r0	; 63
   10e2c:	cd bf       	out	0x3d, r28	; 61
   10e2e:	df 91       	pop	r29
   10e30:	cf 91       	pop	r28
   10e32:	1f 91       	pop	r17
   10e34:	ef 90       	pop	r14
   10e36:	df 90       	pop	r13
   10e38:	cf 90       	pop	r12
   10e3a:	bf 90       	pop	r11
   10e3c:	af 90       	pop	r10
   10e3e:	8f 90       	pop	r8
   10e40:	7f 90       	pop	r7
   10e42:	6f 90       	pop	r6
   10e44:	4f 90       	pop	r4
   10e46:	3f 90       	pop	r3
   10e48:	2f 90       	pop	r2
   10e4a:	08 95       	ret

00010e4c <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   10e4c:	cf 93       	push	r28
   10e4e:	df 93       	push	r29
   10e50:	ec 01       	movw	r28, r24
    if(fo == NULL)
   10e52:	89 2b       	or	r24, r25
   10e54:	21 f4       	brne	.+8      	; 0x10e5e <gpib_decode_header+0x12>
        fo = stdout;
   10e56:	c0 91 be 1c 	lds	r28, 0x1CBE	; 0x801cbe <__iob+0x2>
   10e5a:	d0 91 bf 1c 	lds	r29, 0x1CBF	; 0x801cbf <__iob+0x3>

    fprintf(fo,"===========================================\n");
   10e5e:	be 01       	movw	r22, r28
   10e60:	81 e0       	ldi	r24, 0x01	; 1
   10e62:	9c e0       	ldi	r25, 0x0C	; 12
   10e64:	0e 94 77 75 	call	0xeaee	; 0xeaee <fputs>
    fprintf(fo,"GPIB bus state\n");
   10e68:	be 01       	movw	r22, r28
   10e6a:	8e e2       	ldi	r24, 0x2E	; 46
   10e6c:	9c e0       	ldi	r25, 0x0C	; 12
   10e6e:	0e 94 77 75 	call	0xeaee	; 0xeaee <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   10e72:	be 01       	movw	r22, r28
   10e74:	8e e3       	ldi	r24, 0x3E	; 62
   10e76:	9c e0       	ldi	r25, 0x0C	; 12
   10e78:	0e 94 77 75 	call	0xeaee	; 0xeaee <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   10e7c:	be 01       	movw	r22, r28
   10e7e:	82 e5       	ldi	r24, 0x52	; 82
   10e80:	9c e0       	ldi	r25, 0x0C	; 12
   10e82:	0e 94 77 75 	call	0xeaee	; 0xeaee <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   10e86:	be 01       	movw	r22, r28
   10e88:	85 e7       	ldi	r24, 0x75	; 117
   10e8a:	9c e0       	ldi	r25, 0x0C	; 12
   10e8c:	0e 94 77 75 	call	0xeaee	; 0xeaee <fputs>
    fprintf(fo,"     A = ATN\n");
   10e90:	be 01       	movw	r22, r28
   10e92:	8f e9       	ldi	r24, 0x9F	; 159
   10e94:	9c e0       	ldi	r25, 0x0C	; 12
   10e96:	0e 94 77 75 	call	0xeaee	; 0xeaee <fputs>
    fprintf(fo,"      E = EOI\n");
   10e9a:	be 01       	movw	r22, r28
   10e9c:	8d ea       	ldi	r24, 0xAD	; 173
   10e9e:	9c e0       	ldi	r25, 0x0C	; 12
   10ea0:	0e 94 77 75 	call	0xeaee	; 0xeaee <fputs>
    fprintf(fo,"       S = SRQ\n");
   10ea4:	be 01       	movw	r22, r28
   10ea6:	8c eb       	ldi	r24, 0xBC	; 188
   10ea8:	9c e0       	ldi	r25, 0x0C	; 12
   10eaa:	0e 94 77 75 	call	0xeaee	; 0xeaee <fputs>
    fprintf(fo,"        R = REN\n");
   10eae:	be 01       	movw	r22, r28
   10eb0:	8c ec       	ldi	r24, 0xCC	; 204
   10eb2:	9c e0       	ldi	r25, 0x0C	; 12
   10eb4:	0e 94 77 75 	call	0xeaee	; 0xeaee <fputs>
    fprintf(fo,"         I = IFC\n");
   10eb8:	be 01       	movw	r22, r28
   10eba:	8d ed       	ldi	r24, 0xDD	; 221
   10ebc:	9c e0       	ldi	r25, 0x0C	; 12
   10ebe:	0e 94 77 75 	call	0xeaee	; 0xeaee <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   10ec2:	be 01       	movw	r22, r28
   10ec4:	8f ee       	ldi	r24, 0xEF	; 239
   10ec6:	9c e0       	ldi	r25, 0x0C	; 12
   10ec8:	0e 94 77 75 	call	0xeaee	; 0xeaee <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   10ecc:	be 01       	movw	r22, r28
   10ece:	81 e1       	ldi	r24, 0x11	; 17
   10ed0:	9d e0       	ldi	r25, 0x0D	; 13
   10ed2:	0e 94 77 75 	call	0xeaee	; 0xeaee <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   10ed6:	be 01       	movw	r22, r28
   10ed8:	89 e2       	ldi	r24, 0x29	; 41
   10eda:	9d e0       	ldi	r25, 0x0D	; 13
   10edc:	0e 94 77 75 	call	0xeaee	; 0xeaee <fputs>
    fprintf(fo,"              GPIB commands\n");
   10ee0:	be 01       	movw	r22, r28
   10ee2:	84 e4       	ldi	r24, 0x44	; 68
   10ee4:	9d e0       	ldi	r25, 0x0D	; 13
   10ee6:	0e 94 77 75 	call	0xeaee	; 0xeaee <fputs>
}
   10eea:	df 91       	pop	r29
   10eec:	cf 91       	pop	r28
   10eee:	08 95       	ret

00010ef0 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   10ef0:	a9 e8       	ldi	r26, 0x89	; 137
   10ef2:	b0 e0       	ldi	r27, 0x00	; 0
   10ef4:	ee e7       	ldi	r30, 0x7E	; 126
   10ef6:	f7 e8       	ldi	r31, 0x87	; 135
   10ef8:	0c 94 44 e3 	jmp	0x1c688	; 0x1c688 <__prologue_saves__+0xc>
   10efc:	8c 01       	movw	r16, r24
   10efe:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   10f00:	1a 86       	std	Y+10, r1	; 0x0a
   10f02:	4c 01       	movw	r8, r24
   10f04:	88 24       	eor	r8, r8
   10f06:	44 e0       	ldi	r20, 0x04	; 4
   10f08:	94 22       	and	r9, r20
   10f0a:	ce 01       	movw	r24, r28
   10f0c:	0a 96       	adiw	r24, 0x0a	; 10
   10f0e:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   10f10:	62 30       	cpi	r22, 0x02	; 2
   10f12:	71 05       	cpc	r23, r1
   10f14:	e8 f4       	brcc	.+58     	; 0x10f50 <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10f16:	81 14       	cp	r8, r1
   10f18:	91 04       	cpc	r9, r1
   10f1a:	29 f4       	brne	.+10     	; 0x10f26 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   10f1c:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10f1e:	90 ee       	ldi	r25, 0xE0	; 224
   10f20:	90 0f       	add	r25, r16
   10f22:	9f 35       	cpi	r25, 0x5F	; 95
   10f24:	08 f0       	brcs	.+2      	; 0x10f28 <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   10f26:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   10f28:	90 e0       	ldi	r25, 0x00	; 0
   10f2a:	ed b7       	in	r30, 0x3d	; 61
   10f2c:	fe b7       	in	r31, 0x3e	; 62
   10f2e:	91 87       	std	Z+9, r25	; 0x09
   10f30:	80 87       	std	Z+8, r24	; 0x08
   10f32:	c8 01       	movw	r24, r16
   10f34:	99 27       	eor	r25, r25
   10f36:	97 83       	std	Z+7, r25	; 0x07
   10f38:	86 83       	std	Z+6, r24	; 0x06
   10f3a:	8a ee       	ldi	r24, 0xEA	; 234
   10f3c:	9f e0       	ldi	r25, 0x0F	; 15
   10f3e:	a0 e0       	ldi	r26, 0x00	; 0
   10f40:	83 83       	std	Z+3, r24	; 0x03
   10f42:	94 83       	std	Z+4, r25	; 0x04
   10f44:	a5 83       	std	Z+5, r26	; 0x05
   10f46:	f2 82       	std	Z+2, r15	; 0x02
   10f48:	e1 82       	std	Z+1, r14	; 0x01
   10f4a:	0e 94 ef 44 	call	0x89de	; 0x89de <sprintf_P>
   10f4e:	0c c0       	rjmp	.+24     	; 0x10f68 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   10f50:	84 ee       	ldi	r24, 0xE4	; 228
   10f52:	9f e0       	ldi	r25, 0x0F	; 15
   10f54:	a0 e0       	ldi	r26, 0x00	; 0
   10f56:	ed b7       	in	r30, 0x3d	; 61
   10f58:	fe b7       	in	r31, 0x3e	; 62
   10f5a:	83 83       	std	Z+3, r24	; 0x03
   10f5c:	94 83       	std	Z+4, r25	; 0x04
   10f5e:	a5 83       	std	Z+5, r26	; 0x05
   10f60:	f2 82       	std	Z+2, r15	; 0x02
   10f62:	e1 82       	std	Z+1, r14	; 0x01
   10f64:	0e 94 ef 44 	call	0x89de	; 0x89de <sprintf_P>
    }

    tmp = str + strlen(str);
   10f68:	f7 01       	movw	r30, r14
   10f6a:	01 90       	ld	r0, Z+
   10f6c:	00 20       	and	r0, r0
   10f6e:	e9 f7       	brne	.-6      	; 0x10f6a <gpib_trace_display+0x7a>
   10f70:	31 97       	sbiw	r30, 0x01	; 1
   10f72:	cf 01       	movw	r24, r30
   10f74:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   10f76:	81 14       	cp	r8, r1
   10f78:	91 04       	cpc	r9, r1
   10f7a:	11 f0       	breq	.+4      	; 0x10f80 <gpib_trace_display+0x90>
        *tmp++ = 'A';
   10f7c:	21 e4       	ldi	r18, 0x41	; 65
   10f7e:	01 c0       	rjmp	.+2      	; 0x10f82 <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   10f80:	2d e2       	ldi	r18, 0x2D	; 45
   10f82:	20 83       	st	Z, r18
   10f84:	dc 01       	movw	r26, r24
   10f86:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   10f88:	10 ff       	sbrs	r17, 0
   10f8a:	02 c0       	rjmp	.+4      	; 0x10f90 <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   10f8c:	25 e4       	ldi	r18, 0x45	; 69
   10f8e:	01 c0       	rjmp	.+2      	; 0x10f92 <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   10f90:	2d e2       	ldi	r18, 0x2D	; 45
   10f92:	fc 01       	movw	r30, r24
   10f94:	20 83       	st	Z, r18
   10f96:	fd 01       	movw	r30, r26
   10f98:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   10f9a:	11 ff       	sbrs	r17, 1
   10f9c:	02 c0       	rjmp	.+4      	; 0x10fa2 <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   10f9e:	83 e5       	ldi	r24, 0x53	; 83
   10fa0:	01 c0       	rjmp	.+2      	; 0x10fa4 <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   10fa2:	8d e2       	ldi	r24, 0x2D	; 45
   10fa4:	8c 93       	st	X, r24
   10fa6:	df 01       	movw	r26, r30
   10fa8:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   10faa:	13 ff       	sbrs	r17, 3
   10fac:	02 c0       	rjmp	.+4      	; 0x10fb2 <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   10fae:	82 e5       	ldi	r24, 0x52	; 82
   10fb0:	01 c0       	rjmp	.+2      	; 0x10fb4 <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   10fb2:	8d e2       	ldi	r24, 0x2D	; 45
   10fb4:	80 83       	st	Z, r24
   10fb6:	fd 01       	movw	r30, r26
   10fb8:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   10fba:	14 ff       	sbrs	r17, 4
   10fbc:	02 c0       	rjmp	.+4      	; 0x10fc2 <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   10fbe:	89 e4       	ldi	r24, 0x49	; 73
   10fc0:	01 c0       	rjmp	.+2      	; 0x10fc4 <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   10fc2:	8d e2       	ldi	r24, 0x2D	; 45
   10fc4:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   10fc6:	a1 14       	cp	r10, r1
   10fc8:	b1 04       	cpc	r11, r1
   10fca:	d1 f4       	brne	.+52     	; 0x11000 <gpib_trace_display+0x110>
   10fcc:	df 01       	movw	r26, r30
   10fce:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   10fd0:	15 ff       	sbrs	r17, 5
   10fd2:	02 c0       	rjmp	.+4      	; 0x10fd8 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   10fd4:	80 e5       	ldi	r24, 0x50	; 80
   10fd6:	01 c0       	rjmp	.+2      	; 0x10fda <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   10fd8:	8d e2       	ldi	r24, 0x2D	; 45
   10fda:	80 83       	st	Z, r24
   10fdc:	fd 01       	movw	r30, r26
   10fde:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   10fe0:	16 ff       	sbrs	r17, 6
   10fe2:	02 c0       	rjmp	.+4      	; 0x10fe8 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   10fe4:	84 e5       	ldi	r24, 0x54	; 84
   10fe6:	01 c0       	rjmp	.+2      	; 0x10fea <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   10fe8:	8d e2       	ldi	r24, 0x2D	; 45
   10fea:	8c 93       	st	X, r24
   10fec:	cf 01       	movw	r24, r30
   10fee:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   10ff0:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   10ff2:	17 ff       	sbrs	r17, 7
   10ff4:	02 c0       	rjmp	.+4      	; 0x10ffa <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   10ff6:	82 e4       	ldi	r24, 0x42	; 66
   10ff8:	01 c0       	rjmp	.+2      	; 0x10ffc <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   10ffa:	8d e2       	ldi	r24, 0x2D	; 45
   10ffc:	80 83       	st	Z, r24
   10ffe:	08 c0       	rjmp	.+16     	; 0x11010 <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   11000:	8d e2       	ldi	r24, 0x2D	; 45
   11002:	80 83       	st	Z, r24
        *tmp++ = '-';
   11004:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   11006:	6f 01       	movw	r12, r30
   11008:	43 e0       	ldi	r20, 0x03	; 3
   1100a:	c4 0e       	add	r12, r20
   1100c:	d1 1c       	adc	r13, r1
   1100e:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   11010:	f6 01       	movw	r30, r12
   11012:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   11014:	f1 e0       	ldi	r31, 0x01	; 1
   11016:	af 1a       	sub	r10, r31
   11018:	b1 08       	sbc	r11, r1
   1101a:	42 e0       	ldi	r20, 0x02	; 2
   1101c:	a4 16       	cp	r10, r20
   1101e:	b1 04       	cpc	r11, r1
   11020:	f0 f4       	brcc	.+60     	; 0x1105e <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   11022:	15 ff       	sbrs	r17, 5
   11024:	03 c0       	rjmp	.+6      	; 0x1102c <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   11026:	61 e6       	ldi	r22, 0x61	; 97
   11028:	7d e0       	ldi	r23, 0x0D	; 13
   1102a:	02 c0       	rjmp	.+4      	; 0x11030 <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   1102c:	65 e6       	ldi	r22, 0x65	; 101
   1102e:	74 e0       	ldi	r23, 0x04	; 4
   11030:	c7 01       	movw	r24, r14
   11032:	0e 94 65 2f 	call	0x5eca	; 0x5eca <strcat>
        if(status & NRFD_FLAG)
   11036:	16 ff       	sbrs	r17, 6
   11038:	03 c0       	rjmp	.+6      	; 0x11040 <gpib_trace_display+0x150>
            strcat(str," NRFD");
   1103a:	67 e6       	ldi	r22, 0x67	; 103
   1103c:	7d e0       	ldi	r23, 0x0D	; 13
   1103e:	02 c0       	rjmp	.+4      	; 0x11044 <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   11040:	65 e6       	ldi	r22, 0x65	; 101
   11042:	74 e0       	ldi	r23, 0x04	; 4
   11044:	c7 01       	movw	r24, r14
   11046:	0e 94 65 2f 	call	0x5eca	; 0x5eca <strcat>
        if(status & NDAC_FLAG)
   1104a:	17 ff       	sbrs	r17, 7
   1104c:	03 c0       	rjmp	.+6      	; 0x11054 <gpib_trace_display+0x164>
            strcat(str," NDAC");
   1104e:	6d e6       	ldi	r22, 0x6D	; 109
   11050:	7d e0       	ldi	r23, 0x0D	; 13
   11052:	02 c0       	rjmp	.+4      	; 0x11058 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   11054:	65 e6       	ldi	r22, 0x65	; 101
   11056:	74 e0       	ldi	r23, 0x04	; 4
   11058:	c7 01       	movw	r24, r14
   1105a:	0e 94 65 2f 	call	0x5eca	; 0x5eca <strcat>
    }

    if( (status & ATN_FLAG) )
   1105e:	81 14       	cp	r8, r1
   11060:	91 04       	cpc	r9, r1
   11062:	09 f4       	brne	.+2      	; 0x11066 <gpib_trace_display+0x176>
   11064:	5a c0       	rjmp	.+180    	; 0x1111a <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   11066:	c8 01       	movw	r24, r16
   11068:	8f 77       	andi	r24, 0x7F	; 127
   1106a:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   1106c:	9c 01       	movw	r18, r24
   1106e:	20 52       	subi	r18, 0x20	; 32
   11070:	31 09       	sbc	r19, r1
   11072:	2f 31       	cpi	r18, 0x1F	; 31
   11074:	31 05       	cpc	r19, r1
   11076:	48 f4       	brcc	.+18     	; 0x1108a <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   11078:	0f 71       	andi	r16, 0x1F	; 31
   1107a:	11 27       	eor	r17, r17
   1107c:	ed b7       	in	r30, 0x3d	; 61
   1107e:	fe b7       	in	r31, 0x3e	; 62
   11080:	17 83       	std	Z+7, r17	; 0x07
   11082:	06 83       	std	Z+6, r16	; 0x06
   11084:	89 ed       	ldi	r24, 0xD9	; 217
   11086:	9f e0       	ldi	r25, 0x0F	; 15
   11088:	0e c0       	rjmp	.+28     	; 0x110a6 <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   1108a:	9c 01       	movw	r18, r24
   1108c:	20 54       	subi	r18, 0x40	; 64
   1108e:	31 09       	sbc	r19, r1
   11090:	2f 30       	cpi	r18, 0x0F	; 15
   11092:	31 05       	cpc	r19, r1
   11094:	88 f4       	brcc	.+34     	; 0x110b8 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   11096:	0f 71       	andi	r16, 0x1F	; 31
   11098:	11 27       	eor	r17, r17
   1109a:	ed b7       	in	r30, 0x3d	; 61
   1109c:	fe b7       	in	r31, 0x3e	; 62
   1109e:	17 83       	std	Z+7, r17	; 0x07
   110a0:	06 83       	std	Z+6, r16	; 0x06
   110a2:	8e ec       	ldi	r24, 0xCE	; 206
   110a4:	9f e0       	ldi	r25, 0x0F	; 15
   110a6:	a0 e0       	ldi	r26, 0x00	; 0
   110a8:	83 83       	std	Z+3, r24	; 0x03
   110aa:	94 83       	std	Z+4, r25	; 0x04
   110ac:	a5 83       	std	Z+5, r26	; 0x05
   110ae:	d2 82       	std	Z+2, r13	; 0x02
   110b0:	c1 82       	std	Z+1, r12	; 0x01
   110b2:	0e 94 ef 44 	call	0x89de	; 0x89de <sprintf_P>
   110b6:	31 c0       	rjmp	.+98     	; 0x1111a <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   110b8:	9c 01       	movw	r18, r24
   110ba:	20 56       	subi	r18, 0x60	; 96
   110bc:	31 09       	sbc	r19, r1
   110be:	20 31       	cpi	r18, 0x10	; 16
   110c0:	31 05       	cpc	r19, r1
   110c2:	28 f0       	brcs	.+10     	; 0x110ce <gpib_trace_display+0x1de>
   110c4:	e2 e8       	ldi	r30, 0x82	; 130
   110c6:	f1 e0       	ldi	r31, 0x01	; 1
   110c8:	00 e0       	ldi	r16, 0x00	; 0
   110ca:	10 e0       	ldi	r17, 0x00	; 0
   110cc:	0b c0       	rjmp	.+22     	; 0x110e4 <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   110ce:	0f 71       	andi	r16, 0x1F	; 31
   110d0:	11 27       	eor	r17, r17
   110d2:	ed b7       	in	r30, 0x3d	; 61
   110d4:	fe b7       	in	r31, 0x3e	; 62
   110d6:	17 83       	std	Z+7, r17	; 0x07
   110d8:	06 83       	std	Z+6, r16	; 0x06
   110da:	83 ec       	ldi	r24, 0xC3	; 195
   110dc:	9f e0       	ldi	r25, 0x0F	; 15
   110de:	e3 cf       	rjmp	.-58     	; 0x110a6 <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   110e0:	0f 5f       	subi	r16, 0xFF	; 255
   110e2:	1f 4f       	sbci	r17, 0xFF	; 255
   110e4:	20 81       	ld	r18, Z
   110e6:	31 81       	ldd	r19, Z+1	; 0x01
   110e8:	2f 3f       	cpi	r18, 0xFF	; 255
   110ea:	4f ef       	ldi	r20, 0xFF	; 255
   110ec:	34 07       	cpc	r19, r20
   110ee:	a9 f0       	breq	.+42     	; 0x1111a <gpib_trace_display+0x22a>
   110f0:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   110f2:	82 17       	cp	r24, r18
   110f4:	93 07       	cpc	r25, r19
   110f6:	a1 f7       	brne	.-24     	; 0x110e0 <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   110f8:	69 e6       	ldi	r22, 0x69	; 105
   110fa:	74 e0       	ldi	r23, 0x04	; 4
   110fc:	c6 01       	movw	r24, r12
   110fe:	0e 94 65 2f 	call	0x5eca	; 0x5eca <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   11102:	f8 01       	movw	r30, r16
   11104:	ee 0f       	add	r30, r30
   11106:	ff 1f       	adc	r31, r31
   11108:	ee 0f       	add	r30, r30
   1110a:	ff 1f       	adc	r31, r31
   1110c:	ee 57       	subi	r30, 0x7E	; 126
   1110e:	fe 4f       	sbci	r31, 0xFE	; 254
   11110:	62 81       	ldd	r22, Z+2	; 0x02
   11112:	73 81       	ldd	r23, Z+3	; 0x03
   11114:	c6 01       	movw	r24, r12
   11116:	0e 94 65 2f 	call	0x5eca	; 0x5eca <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   1111a:	20 91 5d 19 	lds	r18, 0x195D	; 0x80195d <gpib_log_fp>
   1111e:	30 91 5e 19 	lds	r19, 0x195E	; 0x80195e <gpib_log_fp+0x1>
   11122:	80 91 be 1c 	lds	r24, 0x1CBE	; 0x801cbe <__iob+0x2>
   11126:	90 91 bf 1c 	lds	r25, 0x1CBF	; 0x801cbf <__iob+0x3>
   1112a:	23 2b       	or	r18, r19
   1112c:	21 f4       	brne	.+8      	; 0x11136 <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   1112e:	90 93 5e 19 	sts	0x195E, r25	; 0x80195e <gpib_log_fp+0x1>
   11132:	80 93 5d 19 	sts	0x195D, r24	; 0x80195d <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   11136:	20 91 5d 19 	lds	r18, 0x195D	; 0x80195d <gpib_log_fp>
   1113a:	30 91 5e 19 	lds	r19, 0x195E	; 0x80195e <gpib_log_fp+0x1>
   1113e:	82 17       	cp	r24, r18
   11140:	93 07       	cpc	r25, r19
   11142:	19 f0       	breq	.+6      	; 0x1114a <gpib_trace_display+0x25a>
        puts(str);
   11144:	c7 01       	movw	r24, r14
   11146:	0e 94 8f 75 	call	0xeb1e	; 0xeb1e <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   1114a:	ed b7       	in	r30, 0x3d	; 61
   1114c:	fe b7       	in	r31, 0x3e	; 62
   1114e:	f6 82       	std	Z+6, r15	; 0x06
   11150:	e5 82       	std	Z+5, r14	; 0x05
   11152:	83 e7       	ldi	r24, 0x73	; 115
   11154:	9d e0       	ldi	r25, 0x0D	; 13
   11156:	94 83       	std	Z+4, r25	; 0x04
   11158:	83 83       	std	Z+3, r24	; 0x03
   1115a:	80 91 5d 19 	lds	r24, 0x195D	; 0x80195d <gpib_log_fp>
   1115e:	90 91 5e 19 	lds	r25, 0x195E	; 0x80195e <gpib_log_fp+0x1>
   11162:	92 83       	std	Z+2, r25	; 0x02
   11164:	81 83       	std	Z+1, r24	; 0x01
   11166:	0e 94 37 7d 	call	0xfa6e	; 0xfa6e <fprintf>
}
   1116a:	c7 57       	subi	r28, 0x77	; 119
   1116c:	df 4f       	sbci	r29, 0xFF	; 255
   1116e:	ec e0       	ldi	r30, 0x0C	; 12
   11170:	0c 94 60 e3 	jmp	0x1c6c0	; 0x1c6c0 <__epilogue_restores__+0xc>

00011174 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   11174:	af 92       	push	r10
   11176:	bf 92       	push	r11
   11178:	cf 92       	push	r12
   1117a:	df 92       	push	r13
   1117c:	ef 92       	push	r14
   1117e:	ff 92       	push	r15
   11180:	0f 93       	push	r16
   11182:	1f 93       	push	r17
   11184:	cf 93       	push	r28
   11186:	00 d0       	rcall	.+0      	; 0x11188 <gpib_read_byte+0x14>
   11188:	00 d0       	rcall	.+0      	; 0x1118a <gpib_read_byte+0x16>
   1118a:	1f 92       	push	r1

    ch = 0;
    control_last = 0;

	// Return unread - last read - data and control lines
    if(gpib_unread_f)
   1118c:	20 91 5c 19 	lds	r18, 0x195C	; 0x80195c <gpib_unread_f>
   11190:	22 23       	and	r18, r18
   11192:	39 f0       	breq	.+14     	; 0x111a2 <gpib_read_byte+0x2e>
    {
		// FYI any unread data has been traced
        gpib_unread_f = 0;
   11194:	10 92 5c 19 	sts	0x195C, r1	; 0x80195c <gpib_unread_f>
        return(gpib_unread_data);
   11198:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <gpib_unread_data>
   1119c:	90 91 f0 1e 	lds	r25, 0x1EF0	; 0x801ef0 <gpib_unread_data+0x1>
   111a0:	f2 c0       	rjmp	.+484    	; 0x11386 <gpib_read_byte+0x212>
   111a2:	6c 01       	movw	r12, r24
	// We start and end gpib_read_byte() with NRFD and NDAC LOW 
	// When ATN goes LOW all devices must pull NRFD and NDAC lines LOW
	// within 200 nanoseconds to permit three-wire handshake 
	// ATN requirements are met because we are always reading in command mode
	// ATN = 0 = COmmand Mode
    gpib_rx_init(1);
   111a4:	81 e0       	ldi	r24, 0x01	; 1
   111a6:	f8 db       	rcall	.-2064   	; 0x10998 <gpib_rx_init>
	// GPIB_IO_LOW(TE);			// BUS IN
	// BUS IN, DAV IN, NDAC OUT , NRFD OUT 
	// ATN IN, EOI IN, SRQ OUT OC

	///@brief V2 boards can NOT read ALL bits on the control bus at once
    if(trace)
   111a8:	c1 14       	cp	r12, r1
   111aa:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   111ac:	51 f0       	breq	.+20     	; 0x111c2 <gpib_read_byte+0x4e>
   111ae:	ed dc       	rcall	.-1574   	; 0x10b8a <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   111b0:	7c 01       	movw	r14, r24
   111b2:	fb dc       	rcall	.-1546   	; 0x10baa <gpib_handshake_pin_read>
   111b4:	e8 2a       	or	r14, r24
   111b6:	f9 2a       	or	r15, r25
        gpib_trace_display(control_last, TRACE_BUS);
   111b8:	62 e0       	ldi	r22, 0x02	; 2
   111ba:	70 e0       	ldi	r23, 0x00	; 0
   111bc:	c7 01       	movw	r24, r14
   111be:	98 de       	rcall	.-720    	; 0x10ef0 <gpib_trace_display>
   111c0:	02 c0       	rjmp	.+4      	; 0x111c6 <gpib_read_byte+0x52>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   111c2:	e1 2c       	mov	r14, r1
   111c4:	f1 2c       	mov	r15, r1
        control_last = gpib_control_pin_read();
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
   111c6:	64 ef       	ldi	r22, 0xF4	; 244
   111c8:	71 e0       	ldi	r23, 0x01	; 1
   111ca:	80 e0       	ldi	r24, 0x00	; 0
   111cc:	90 e0       	ldi	r25, 0x00	; 0
   111ce:	a2 db       	rcall	.-2236   	; 0x10914 <gpib_timeout_set>
    uint16_t ch;
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
   111d0:	00 e0       	ldi	r16, 0x00	; 0
   111d2:	10 e0       	ldi	r17, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
   111d4:	c0 e0       	ldi	r28, 0x00	; 0
    while(rx_state != GPIB_RX_DONE)
    {

        // User task that is called while waiting for commands
        gpib_user_task();
   111d6:	0e 94 33 df 	call	0x1be66	; 0x1be66 <gpib_user_task>

        if(uart_keyhit(0))
   111da:	80 e0       	ldi	r24, 0x00	; 0
   111dc:	0e 94 68 28 	call	0x50d0	; 0x50d0 <uart_keyhit>
   111e0:	89 2b       	or	r24, r25
   111e2:	99 f0       	breq	.+38     	; 0x1120a <gpib_read_byte+0x96>
		{
			if(debuglevel & GPIB_ERR)
   111e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   111e8:	80 ff       	sbrs	r24, 0
   111ea:	ab c0       	rjmp	.+342    	; 0x11342 <gpib_read_byte+0x1ce>
				printf("gpib_read_byte: state=%d\n", rx_state);
   111ec:	8c 2f       	mov	r24, r28
   111ee:	90 e0       	ldi	r25, 0x00	; 0
   111f0:	ed b7       	in	r30, 0x3d	; 61
   111f2:	fe b7       	in	r31, 0x3e	; 62
   111f4:	95 83       	std	Z+5, r25	; 0x05
   111f6:	84 83       	std	Z+4, r24	; 0x04
   111f8:	81 e1       	ldi	r24, 0x11	; 17
   111fa:	90 e1       	ldi	r25, 0x10	; 16
   111fc:	a0 e0       	ldi	r26, 0x00	; 0
   111fe:	81 83       	std	Z+1, r24	; 0x01
   11200:	92 83       	std	Z+2, r25	; 0x02
   11202:	a3 83       	std	Z+3, r26	; 0x03
   11204:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   11208:	9c c0       	rjmp	.+312    	; 0x11342 <gpib_read_byte+0x1ce>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is alwayon IN always in device mode
        if(GPIB_PIN_TST(IFC) == 0)
   1120a:	4c 99       	sbic	0x09, 4	; 9
   1120c:	15 c0       	rjmp	.+42     	; 0x11238 <gpib_read_byte+0xc4>
        {
            ch |= IFC_FLAG;
   1120e:	10 61       	ori	r17, 0x10	; 16
			if(debuglevel & GPIB_ERR)
   11210:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11214:	80 ff       	sbrs	r24, 0
   11216:	0e c0       	rjmp	.+28     	; 0x11234 <gpib_read_byte+0xc0>
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   11218:	8c 2f       	mov	r24, r28
   1121a:	90 e0       	ldi	r25, 0x00	; 0
   1121c:	ed b7       	in	r30, 0x3d	; 61
   1121e:	fe b7       	in	r31, 0x3e	; 62
   11220:	95 83       	std	Z+5, r25	; 0x05
   11222:	84 83       	std	Z+4, r24	; 0x04
   11224:	83 ef       	ldi	r24, 0xF3	; 243
   11226:	9f e0       	ldi	r25, 0x0F	; 15
   11228:	a0 e0       	ldi	r26, 0x00	; 0
   1122a:	81 83       	std	Z+1, r24	; 0x01
   1122c:	92 83       	std	Z+2, r25	; 0x02
   1122e:	a3 83       	std	Z+3, r26	; 0x03
   11230:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            gpib_bus_init();
   11234:	79 db       	rcall	.-2318   	; 0x10928 <gpib_bus_init>
   11236:	85 c0       	rjmp	.+266    	; 0x11342 <gpib_read_byte+0x1ce>
            break;
        }

        switch(rx_state)
   11238:	c2 30       	cpi	r28, 0x02	; 2
   1123a:	31 f1       	breq	.+76     	; 0x11288 <gpib_read_byte+0x114>
   1123c:	28 f4       	brcc	.+10     	; 0x11248 <gpib_read_byte+0xd4>
   1123e:	cc 23       	and	r28, r28
   11240:	69 f0       	breq	.+26     	; 0x1125c <gpib_read_byte+0xe8>
   11242:	c1 30       	cpi	r28, 0x01	; 1
   11244:	c9 f0       	breq	.+50     	; 0x11278 <gpib_read_byte+0x104>
   11246:	63 c0       	rjmp	.+198    	; 0x1130e <gpib_read_byte+0x19a>
   11248:	c5 30       	cpi	r28, 0x05	; 5
   1124a:	09 f4       	brne	.+2      	; 0x1124e <gpib_read_byte+0xda>
   1124c:	54 c0       	rjmp	.+168    	; 0x112f6 <gpib_read_byte+0x182>
   1124e:	c7 30       	cpi	r28, 0x07	; 7
   11250:	09 f4       	brne	.+2      	; 0x11254 <gpib_read_byte+0xe0>
   11252:	58 c0       	rjmp	.+176    	; 0x11304 <gpib_read_byte+0x190>
   11254:	c4 30       	cpi	r28, 0x04	; 4
   11256:	09 f0       	breq	.+2      	; 0x1125a <gpib_read_byte+0xe6>
   11258:	5a c0       	rjmp	.+180    	; 0x1130e <gpib_read_byte+0x19a>
   1125a:	3e c0       	rjmp	.+124    	; 0x112d8 <gpib_read_byte+0x164>
        {

			///@brief DAV must be high
            case GPIB_RX_START:
				//DEBUG
				if (GPIB_PIN_TST(DAV) == 1)
   1125c:	19 9b       	sbis	0x03, 1	; 3
   1125e:	43 c0       	rjmp	.+134    	; 0x112e6 <gpib_read_byte+0x172>
   11260:	fd e0       	ldi	r31, 0x0D	; 13
   11262:	fa 95       	dec	r31
   11264:	f1 f7       	brne	.-4      	; 0x11262 <gpib_read_byte+0xee>
   11266:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					GPIB_PIN_FLOAT_UP(NRFD);
   11268:	52 98       	cbi	0x0a, 2	; 10
   1126a:	5a 9a       	sbi	0x0b, 2	; 11
   1126c:	8d e0       	ldi	r24, 0x0D	; 13
   1126e:	8a 95       	dec	r24
   11270:	f1 f7       	brne	.-4      	; 0x1126e <gpib_read_byte+0xfa>
   11272:	00 00       	nop
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   11274:	c1 e0       	ldi	r28, 0x01	; 1
   11276:	37 c0       	rjmp	.+110    	; 0x112e6 <gpib_read_byte+0x172>
                }
                break;

			// Wait for Data Avalable without timeout
            case GPIB_RX_WAIT_FOR_DAV_LOW:
                if ( GPIB_PIN_TST(DAV) == 0 )
   11278:	19 99       	sbic	0x03, 1	; 3
   1127a:	80 c0       	rjmp	.+256    	; 0x1137c <gpib_read_byte+0x208>
   1127c:	ed e0       	ldi	r30, 0x0D	; 13
   1127e:	ea 95       	dec	r30
   11280:	f1 f7       	brne	.-4      	; 0x1127e <gpib_read_byte+0x10a>
   11282:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                
                    rx_state = GPIB_RX_DAV_IS_LOW;
   11284:	c2 e0       	ldi	r28, 0x02	; 2
   11286:	7a c0       	rjmp	.+244    	; 0x1137c <gpib_read_byte+0x208>
				}
                break;

			// Data is Avaliable
            case GPIB_RX_DAV_IS_LOW:
				GPIB_IO_LOW(NRFD); // BUSY
   11288:	5a 98       	cbi	0x0b, 2	; 11
   1128a:	52 9a       	sbi	0x0a, 2	; 10
   1128c:	fd e0       	ldi	r31, 0x0D	; 13
   1128e:	fa 95       	dec	r31
				GPIB_BUS_SETTLE();                

				// Read DATA and Control lines
				// gpib_bus_read() strips parity if ATN is low command state

                bus = gpib_bus_read();
   11290:	f1 f7       	brne	.-4      	; 0x1128e <gpib_read_byte+0x11a>
   11292:	00 00       	nop
   11294:	74 dc       	rcall	.-1816   	; 0x10b7e <gpib_bus_read>
   11296:	a8 2e       	mov	r10, r24
                ch |= bus;

				///@brief V2 boards can NOT read all control bits at once
				///@brief NRFD,NDAC and SRQ are cirrently outputs

                control_last = gpib_control_pin_read();
   11298:	b1 2c       	mov	r11, r1
   1129a:	77 dc       	rcall	.-1810   	; 0x10b8a <gpib_control_pin_read>
   1129c:	7c 01       	movw	r14, r24
   1129e:	08 2b       	or	r16, r24
                ch |= control_last;
   112a0:	19 2b       	or	r17, r25
   112a2:	0a 29       	or	r16, r10

				// In theory the control_last should not have changed
				// from the initial values. ONly the Data BUS
                if(trace)
   112a4:	1b 29       	or	r17, r11
   112a6:	c1 14       	cp	r12, r1
   112a8:	d1 04       	cpc	r13, r1
                {
                    control_last |= gpib_handshake_pin_read();
   112aa:	49 f0       	breq	.+18     	; 0x112be <gpib_read_byte+0x14a>
   112ac:	7e dc       	rcall	.-1796   	; 0x10baa <gpib_handshake_pin_read>
   112ae:	e8 2a       	or	r14, r24
                    gpib_trace_display(bus | control_last, TRACE_READ);
   112b0:	f9 2a       	or	r15, r25
   112b2:	61 e0       	ldi	r22, 0x01	; 1
   112b4:	70 e0       	ldi	r23, 0x00	; 0
   112b6:	c5 01       	movw	r24, r10
   112b8:	8e 29       	or	r24, r14
   112ba:	9f 29       	or	r25, r15
   112bc:	19 de       	rcall	.-974    	; 0x10ef0 <gpib_trace_display>
                }

				// Release NDAC to say we read the byte
                GPIB_PIN_FLOAT_UP(NDAC);
   112be:	53 98       	cbi	0x0a, 3	; 10
   112c0:	5b 9a       	sbi	0x0b, 3	; 11
   112c2:	8d e0       	ldi	r24, 0x0D	; 13
   112c4:	8a 95       	dec	r24
   112c6:	f1 f7       	brne	.-4      	; 0x112c4 <gpib_read_byte+0x150>
                GPIB_BUS_SETTLE();                // NDAC bus settle time
                gpib_timeout_set(HTIMEOUT);
   112c8:	00 00       	nop
   112ca:	64 ef       	ldi	r22, 0xF4	; 244
   112cc:	71 e0       	ldi	r23, 0x01	; 1
   112ce:	80 e0       	ldi	r24, 0x00	; 0
   112d0:	90 e0       	ldi	r25, 0x00	; 0
   112d2:	20 db       	rcall	.-2496   	; 0x10914 <gpib_timeout_set>
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   112d4:	c4 e0       	ldi	r28, 0x04	; 4
   112d6:	52 c0       	rjmp	.+164    	; 0x1137c <gpib_read_byte+0x208>
                break;

			///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   112d8:	19 9b       	sbis	0x03, 1	; 3
   112da:	05 c0       	rjmp	.+10     	; 0x112e6 <gpib_read_byte+0x172>
   112dc:	ed e0       	ldi	r30, 0x0D	; 13
   112de:	ea 95       	dec	r30
   112e0:	f1 f7       	brne	.-4      	; 0x112de <gpib_read_byte+0x16a>
   112e2:	00 00       	nop
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
   112e4:	c5 e0       	ldi	r28, 0x05	; 5
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   112e6:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <gpib_timer+0x8>
                if (GPIB_PIN_TST(DAV) == 1)
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   112ea:	88 23       	and	r24, r24
   112ec:	09 f4       	brne	.+2      	; 0x112f0 <gpib_read_byte+0x17c>
   112ee:	46 c0       	rjmp	.+140    	; 0x1137c <gpib_read_byte+0x208>
                {
                    ch |= TIMEOUT_FLAG;
   112f0:	10 64       	ori	r17, 0x40	; 64
                    rx_state = GPIB_RX_ERROR;
   112f2:	c7 e0       	ldi	r28, 0x07	; 7
   112f4:	43 c0       	rjmp	.+134    	; 0x1137c <gpib_read_byte+0x208>
                }
                break;

			///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
				GPIB_IO_LOW(NDAC);
   112f6:	5b 98       	cbi	0x0b, 3	; 11
   112f8:	53 9a       	sbi	0x0a, 3	; 10
   112fa:	fd e0       	ldi	r31, 0x0D	; 13
   112fc:	fa 95       	dec	r31
   112fe:	f1 f7       	brne	.-4      	; 0x112fc <gpib_read_byte+0x188>
   11300:	00 00       	nop
   11302:	09 c0       	rjmp	.+18     	; 0x11316 <gpib_read_byte+0x1a2>
				// Now BOTH NDAC and NRFD are LOW
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_ERROR:
				GPIB_IO_LOW(NRFD);
   11304:	5a 98       	cbi	0x0b, 2	; 11
   11306:	52 9a       	sbi	0x0a, 2	; 10
				GPIB_IO_LOW(NDAC);
   11308:	5b 98       	cbi	0x0b, 3	; 11
   1130a:	53 9a       	sbi	0x0a, 3	; 10

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   1130c:	04 c0       	rjmp	.+8      	; 0x11316 <gpib_read_byte+0x1a2>
   1130e:	c1 14       	cp	r12, r1
   11310:	d1 04       	cpc	r13, r1
   11312:	91 f0       	breq	.+36     	; 0x11338 <gpib_read_byte+0x1c4>
   11314:	04 c0       	rjmp	.+8      	; 0x1131e <gpib_read_byte+0x1aa>
   11316:	c1 14       	cp	r12, r1
   11318:	d1 04       	cpc	r13, r1
   1131a:	99 f0       	breq	.+38     	; 0x11342 <gpib_read_byte+0x1ce>
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   1131c:	c8 e0       	ldi	r28, 0x08	; 8
   1131e:	35 dc       	rcall	.-1942   	; 0x10b8a <gpib_control_pin_read>
            control |= gpib_handshake_pin_read();
   11320:	5c 01       	movw	r10, r24
   11322:	43 dc       	rcall	.-1914   	; 0x10baa <gpib_handshake_pin_read>
   11324:	a8 2a       	or	r10, r24
   11326:	b9 2a       	or	r11, r25
            if(control_last != control)
   11328:	ae 14       	cp	r10, r14
   1132a:	bf 04       	cpc	r11, r15
   1132c:	31 f0       	breq	.+12     	; 0x1133a <gpib_read_byte+0x1c6>
            {
                gpib_trace_display(control, TRACE_BUS);
   1132e:	62 e0       	ldi	r22, 0x02	; 2
   11330:	70 e0       	ldi	r23, 0x00	; 0
   11332:	c5 01       	movw	r24, r10
   11334:	dd dd       	rcall	.-1094   	; 0x10ef0 <gpib_trace_display>
   11336:	01 c0       	rjmp	.+2      	; 0x1133a <gpib_read_byte+0x1c6>
   11338:	57 01       	movw	r10, r14

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   1133a:	c8 30       	cpi	r28, 0x08	; 8
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   1133c:	11 f0       	breq	.+4      	; 0x11342 <gpib_read_byte+0x1ce>
   1133e:	75 01       	movw	r14, r10
   11340:	4a cf       	rjmp	.-364    	; 0x111d6 <gpib_read_byte+0x62>
   11342:	80 91 e9 1e 	lds	r24, 0x1EE9	; 0x801ee9 <current>
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   11346:	90 91 ea 1e 	lds	r25, 0x1EEA	; 0x801eea <current+0x1>
   1134a:	90 93 e6 1c 	sts	0x1CE6, r25	; 0x801ce6 <lastcmd+0x1>
   1134e:	80 93 e5 1c 	sts	0x1CE5, r24	; 0x801ce5 <lastcmd>
   11352:	c8 01       	movw	r24, r16

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   11354:	88 27       	eor	r24, r24
   11356:	90 7d       	andi	r25, 0xD0	; 208
   11358:	89 2b       	or	r24, r25
   1135a:	11 f4       	brne	.+4      	; 0x11360 <gpib_read_byte+0x1ec>
   1135c:	12 fd       	sbrc	r17, 2
   1135e:	05 c0       	rjmp	.+10     	; 0x1136a <gpib_read_byte+0x1f6>
   11360:	10 92 ea 1e 	sts	0x1EEA, r1	; 0x801eea <current+0x1>
        current = 0;
   11364:	10 92 e9 1e 	sts	0x1EE9, r1	; 0x801ee9 <current>
   11368:	07 c0       	rjmp	.+14     	; 0x11378 <gpib_read_byte+0x204>
   1136a:	c8 01       	movw	r24, r16
    else
        current = ch & CMD_MASK;
   1136c:	8f 77       	andi	r24, 0x7F	; 127
   1136e:	99 27       	eor	r25, r25
   11370:	90 93 ea 1e 	sts	0x1EEA, r25	; 0x801eea <current+0x1>
   11374:	80 93 e9 1e 	sts	0x1EE9, r24	; 0x801ee9 <current>
   11378:	c8 01       	movw	r24, r16
   1137a:	05 c0       	rjmp	.+10     	; 0x11386 <gpib_read_byte+0x212>
   1137c:	c1 14       	cp	r12, r1

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   1137e:	d1 04       	cpc	r13, r1
   11380:	09 f4       	brne	.+2      	; 0x11384 <gpib_read_byte+0x210>
   11382:	29 cf       	rjmp	.-430    	; 0x111d6 <gpib_read_byte+0x62>
   11384:	cc cf       	rjmp	.-104    	; 0x1131e <gpib_read_byte+0x1aa>
   11386:	0f 90       	pop	r0
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   11388:	0f 90       	pop	r0
   1138a:	0f 90       	pop	r0
   1138c:	0f 90       	pop	r0
   1138e:	0f 90       	pop	r0
   11390:	cf 91       	pop	r28
   11392:	1f 91       	pop	r17
   11394:	0f 91       	pop	r16
   11396:	ff 90       	pop	r15
   11398:	ef 90       	pop	r14
   1139a:	df 90       	pop	r13
   1139c:	cf 90       	pop	r12
   1139e:	bf 90       	pop	r11
   113a0:	af 90       	pop	r10
   113a2:	08 95       	ret

000113a4 <gpib_decode>:
   113a4:	60 e0       	ldi	r22, 0x00	; 0
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   113a6:	70 e0       	ldi	r23, 0x00	; 0
   113a8:	a3 cd       	rjmp	.-1210   	; 0x10ef0 <gpib_trace_display>
   113aa:	08 95       	ret

000113ac <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   113ac:	a7 e0       	ldi	r26, 0x07	; 7
   113ae:	b0 e0       	ldi	r27, 0x00	; 0
   113b0:	ec ed       	ldi	r30, 0xDC	; 220
   113b2:	f9 e8       	ldi	r31, 0x89	; 137
   113b4:	0c 94 46 e3 	jmp	0x1c68c	; 0x1c68c <__prologue_saves__+0x10>
   113b8:	5b 01       	movw	r10, r22
   113ba:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   113bc:	fa 01       	movw	r30, r20
   113be:	20 81       	ld	r18, Z
   113c0:	31 81       	ldd	r19, Z+1	; 0x01
   113c2:	22 27       	eor	r18, r18
   113c4:	31 83       	std	Z+1, r19	; 0x01
   113c6:	20 83       	st	Z, r18

    if(!size)
   113c8:	67 2b       	or	r22, r23
   113ca:	21 f0       	breq	.+8      	; 0x113d4 <gpib_read_str+0x28>
   113cc:	7c 01       	movw	r14, r24
   113ce:	00 e0       	ldi	r16, 0x00	; 0
   113d0:	10 e0       	ldi	r17, 0x00	; 0
   113d2:	28 c0       	rjmp	.+80     	; 0x11424 <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   113d4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   113d8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   113dc:	81 72       	andi	r24, 0x21	; 33
   113de:	91 70       	andi	r25, 0x01	; 1
   113e0:	89 2b       	or	r24, r25
   113e2:	09 f4       	brne	.+2      	; 0x113e6 <gpib_read_str+0x3a>
   113e4:	7c c0       	rjmp	.+248    	; 0x114de <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   113e6:	8a ea       	ldi	r24, 0xAA	; 170
   113e8:	9f e0       	ldi	r25, 0x0F	; 15
   113ea:	a0 e0       	ldi	r26, 0x00	; 0
   113ec:	ed b7       	in	r30, 0x3d	; 61
   113ee:	fe b7       	in	r31, 0x3e	; 62
   113f0:	81 83       	std	Z+1, r24	; 0x01
   113f2:	92 83       	std	Z+2, r25	; 0x02
   113f4:	a3 83       	std	Z+3, r26	; 0x03
   113f6:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   113fa:	71 c0       	rjmp	.+226    	; 0x114de <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   113fc:	8c 27       	eor	r24, r28
   113fe:	9d 27       	eor	r25, r29
   11400:	92 fd       	sbrc	r25, 2
   11402:	2e c0       	rjmp	.+92     	; 0x11460 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11404:	ce 01       	movw	r24, r28
   11406:	88 27       	eor	r24, r24
   11408:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   1140a:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   1140c:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   1140e:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   11410:	f7 01       	movw	r30, r14
   11412:	20 83       	st	Z, r18
        ++ind;
   11414:	0f 5f       	subi	r16, 0xFF	; 255
   11416:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11418:	89 2b       	or	r24, r25
   1141a:	09 f4       	brne	.+2      	; 0x1141e <gpib_read_str+0x72>
   1141c:	3c c0       	rjmp	.+120    	; 0x11496 <gpib_read_str+0xea>
   1141e:	ff ef       	ldi	r31, 0xFF	; 255
   11420:	ef 1a       	sub	r14, r31
   11422:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   11424:	0a 15       	cp	r16, r10
   11426:	1b 05       	cpc	r17, r11
   11428:	0c f0       	brlt	.+2      	; 0x1142c <gpib_read_str+0x80>
   1142a:	3f c0       	rjmp	.+126    	; 0x114aa <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   1142c:	80 e0       	ldi	r24, 0x00	; 0
   1142e:	90 e0       	ldi	r25, 0x00	; 0
   11430:	a1 de       	rcall	.-702    	; 0x11174 <gpib_read_byte>
   11432:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   11434:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11438:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1143c:	90 ff       	sbrs	r25, 0
   1143e:	02 c0       	rjmp	.+4      	; 0x11444 <gpib_read_str+0x98>
            gpib_decode(val);
   11440:	ce 01       	movw	r24, r28
   11442:	b0 df       	rcall	.-160    	; 0x113a4 <gpib_decode>
#endif
        if(val & ERROR_MASK)
   11444:	9e 01       	movw	r18, r28
   11446:	22 27       	eor	r18, r18
   11448:	30 7d       	andi	r19, 0xD0	; 208
   1144a:	f6 01       	movw	r30, r12
   1144c:	80 81       	ld	r24, Z
   1144e:	91 81       	ldd	r25, Z+1	; 0x01
   11450:	21 15       	cp	r18, r1
   11452:	31 05       	cpc	r19, r1
   11454:	99 f2       	breq	.-90     	; 0x113fc <gpib_read_str+0x50>
        {
            *status |= (val & ERROR_MASK);
   11456:	82 2b       	or	r24, r18
   11458:	93 2b       	or	r25, r19
   1145a:	91 83       	std	Z+1, r25	; 0x01
   1145c:	80 83       	st	Z, r24
            break;
   1145e:	28 c0       	rjmp	.+80     	; 0x114b0 <gpib_read_str+0x104>
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11460:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11464:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11468:	81 72       	andi	r24, 0x21	; 33
   1146a:	91 70       	andi	r25, 0x01	; 1
   1146c:	89 2b       	or	r24, r25
   1146e:	81 f0       	breq	.+32     	; 0x11490 <gpib_read_str+0xe4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   11470:	ce 01       	movw	r24, r28
   11472:	99 27       	eor	r25, r25
   11474:	ed b7       	in	r30, 0x3d	; 61
   11476:	fe b7       	in	r31, 0x3e	; 62
   11478:	97 83       	std	Z+7, r25	; 0x07
   1147a:	86 83       	std	Z+6, r24	; 0x06
   1147c:	15 83       	std	Z+5, r17	; 0x05
   1147e:	04 83       	std	Z+4, r16	; 0x04
   11480:	8d e7       	ldi	r24, 0x7D	; 125
   11482:	9f e0       	ldi	r25, 0x0F	; 15
   11484:	a0 e0       	ldi	r26, 0x00	; 0
   11486:	81 83       	std	Z+1, r24	; 0x01
   11488:	92 83       	std	Z+2, r25	; 0x02
   1148a:	a3 83       	std	Z+3, r26	; 0x03
   1148c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            gpib_unread(val);
   11490:	ce 01       	movw	r24, r28
   11492:	4b db       	rcall	.-2410   	; 0x10b2a <gpib_unread>
            break;
   11494:	0d c0       	rjmp	.+26     	; 0x114b0 <gpib_read_str+0x104>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11496:	d0 ff       	sbrs	r29, 0
   11498:	c2 cf       	rjmp	.-124    	; 0x1141e <gpib_read_str+0x72>
        {

            if(*status & EOI_FLAG)
   1149a:	f6 01       	movw	r30, r12
   1149c:	80 81       	ld	r24, Z
   1149e:	91 81       	ldd	r25, Z+1	; 0x01
   114a0:	90 fd       	sbrc	r25, 0
   114a2:	1f c0       	rjmp	.+62     	; 0x114e2 <gpib_read_str+0x136>
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   114a4:	91 60       	ori	r25, 0x01	; 1
   114a6:	91 83       	std	Z+1, r25	; 0x01
   114a8:	80 83       	st	Z, r24
            break;
        }
    }
    if ( ind != size ) 
   114aa:	0a 15       	cp	r16, r10
   114ac:	1b 05       	cpc	r17, r11
   114ae:	c9 f0       	breq	.+50     	; 0x114e2 <gpib_read_str+0x136>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   114b0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   114b4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   114b8:	81 72       	andi	r24, 0x21	; 33
   114ba:	99 27       	eor	r25, r25
   114bc:	89 2b       	or	r24, r25
   114be:	89 f0       	breq	.+34     	; 0x114e2 <gpib_read_str+0x136>
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   114c0:	ed b7       	in	r30, 0x3d	; 61
   114c2:	fe b7       	in	r31, 0x3e	; 62
   114c4:	b7 82       	std	Z+7, r11	; 0x07
   114c6:	a6 82       	std	Z+6, r10	; 0x06
   114c8:	15 83       	std	Z+5, r17	; 0x05
   114ca:	04 83       	std	Z+4, r16	; 0x04
   114cc:	86 e5       	ldi	r24, 0x56	; 86
   114ce:	9f e0       	ldi	r25, 0x0F	; 15
   114d0:	a0 e0       	ldi	r26, 0x00	; 0
   114d2:	81 83       	std	Z+1, r24	; 0x01
   114d4:	92 83       	std	Z+2, r25	; 0x02
   114d6:	a3 83       	std	Z+3, r26	; 0x03
   114d8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   114dc:	02 c0       	rjmp	.+4      	; 0x114e2 <gpib_read_str+0x136>
   114de:	00 e0       	ldi	r16, 0x00	; 0
   114e0:	10 e0       	ldi	r17, 0x00	; 0
    }
    return(ind);
}
   114e2:	c8 01       	movw	r24, r16
   114e4:	cd b7       	in	r28, 0x3d	; 61
   114e6:	de b7       	in	r29, 0x3e	; 62
   114e8:	27 96       	adiw	r28, 0x07	; 7
   114ea:	ea e0       	ldi	r30, 0x0A	; 10
   114ec:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__epilogue_restores__+0x10>

000114f0 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   114f0:	a7 e0       	ldi	r26, 0x07	; 7
   114f2:	b0 e0       	ldi	r27, 0x00	; 0
   114f4:	ee e7       	ldi	r30, 0x7E	; 126
   114f6:	fa e8       	ldi	r31, 0x8A	; 138
   114f8:	0c 94 46 e3 	jmp	0x1c68c	; 0x1c68c <__prologue_saves__+0x10>
   114fc:	d8 2f       	mov	r29, r24
   114fe:	c9 2f       	mov	r28, r25
   11500:	7b 01       	movw	r14, r22
   11502:	8a 01       	movw	r16, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   11504:	fa 01       	movw	r30, r20
   11506:	80 81       	ld	r24, Z
   11508:	91 81       	ldd	r25, Z+1	; 0x01
   1150a:	88 27       	eor	r24, r24
   1150c:	91 83       	std	Z+1, r25	; 0x01
   1150e:	80 83       	st	Z, r24

    if(!size)
   11510:	67 2b       	or	r22, r23
   11512:	91 f4       	brne	.+36     	; 0x11538 <gpib_write_str+0x48>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11514:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11518:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1151c:	81 72       	andi	r24, 0x21	; 33
   1151e:	91 70       	andi	r25, 0x01	; 1
   11520:	89 2b       	or	r24, r25
   11522:	51 f0       	breq	.+20     	; 0x11538 <gpib_write_str+0x48>
            printf("gpib_write_str: size = 0\n");
   11524:	8c e3       	ldi	r24, 0x3C	; 60
   11526:	9f e0       	ldi	r25, 0x0F	; 15
   11528:	a0 e0       	ldi	r26, 0x00	; 0
   1152a:	ed b7       	in	r30, 0x3d	; 61
   1152c:	fe b7       	in	r31, 0x3e	; 62
   1152e:	81 83       	std	Z+1, r24	; 0x01
   11530:	92 83       	std	Z+2, r25	; 0x02
   11532:	a3 83       	std	Z+3, r26	; 0x03
   11534:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    }

	// Start with NRFD and NDAC = 1 - ie off the OC BUS
	gpib_rx_init(0);
   11538:	80 e0       	ldi	r24, 0x00	; 0
   1153a:	2e da       	rcall	.-2980   	; 0x10998 <gpib_rx_init>

// Wait until ATN is released!
#if 1
    if (GPIB_PIN_TST(ATN) == 0)
   1153c:	4e 9b       	sbis	0x09, 6	; 9
   1153e:	06 c0       	rjmp	.+12     	; 0x1154c <gpib_write_str+0x5c>
#endif

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
   11540:	64 ef       	ldi	r22, 0xF4	; 244
   11542:	71 e0       	ldi	r23, 0x01	; 1
   11544:	80 e0       	ldi	r24, 0x00	; 0
   11546:	90 e0       	ldi	r25, 0x00	; 0
   11548:	e5 d9       	rcall	.-3126   	; 0x10914 <gpib_timeout_set>
	while ( GPIB_PIN_TST(DAV) == 0)
   1154a:	18 c0       	rjmp	.+48     	; 0x1157c <gpib_write_str+0x8c>
#endif
		// Wait for ATN free
		// Keep in mind that we have been addressed to talk already
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
   1154c:	64 ef       	ldi	r22, 0xF4	; 244
   1154e:	71 e0       	ldi	r23, 0x01	; 1
   11550:	80 e0       	ldi	r24, 0x00	; 0
   11552:	90 e0       	ldi	r25, 0x00	; 0
   11554:	df d9       	rcall	.-3138   	; 0x10914 <gpib_timeout_set>
		while(GPIB_PIN_TST(ATN) == 0)
   11556:	4e 99       	sbic	0x09, 6	; 9
   11558:	f3 cf       	rjmp	.-26     	; 0x11540 <gpib_write_str+0x50>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1155a:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <gpib_timer+0x8>
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
		while(GPIB_PIN_TST(ATN) == 0)
		{
			if(gpib_timeout_test())
   1155e:	88 23       	and	r24, r24
   11560:	d1 f3       	breq	.-12     	; 0x11556 <gpib_write_str+0x66>
			{
				gpib_rx_init(1);
   11562:	81 e0       	ldi	r24, 0x01	; 1
   11564:	19 da       	rcall	.-3022   	; 0x10998 <gpib_rx_init>
				if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11566:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1156a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1156e:	85 70       	andi	r24, 0x05	; 5
   11570:	99 27       	eor	r25, r25
   11572:	89 2b       	or	r24, r25
   11574:	d9 f0       	breq	.+54     	; 0x115ac <gpib_write_str+0xbc>
					printf("<gpib_write_str timeout waiting for ATN = 1>\n");
   11576:	8e e0       	ldi	r24, 0x0E	; 14
   11578:	9f e0       	ldi	r25, 0x0F	; 15
   1157a:	10 c0       	rjmp	.+32     	; 0x1159c <gpib_write_str+0xac>

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   1157c:	19 99       	sbic	0x03, 1	; 3
   1157e:	1f c0       	rjmp	.+62     	; 0x115be <gpib_write_str+0xce>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11580:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <gpib_timer+0x8>
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
	{
		if(gpib_timeout_test())
   11584:	88 23       	and	r24, r24
   11586:	d1 f3       	breq	.-12     	; 0x1157c <gpib_write_str+0x8c>
		{
			if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11588:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1158c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11590:	85 70       	andi	r24, 0x05	; 5
   11592:	99 27       	eor	r25, r25
   11594:	89 2b       	or	r24, r25
   11596:	51 f0       	breq	.+20     	; 0x115ac <gpib_write_str+0xbc>
				printf("<BUS waiting for DAV==1>\n");
   11598:	84 ef       	ldi	r24, 0xF4	; 244
   1159a:	9e e0       	ldi	r25, 0x0E	; 14
   1159c:	a0 e0       	ldi	r26, 0x00	; 0
   1159e:	ed b7       	in	r30, 0x3d	; 61
   115a0:	fe b7       	in	r31, 0x3e	; 62
   115a2:	81 83       	std	Z+1, r24	; 0x01
   115a4:	92 83       	std	Z+2, r25	; 0x02
   115a6:	a3 83       	std	Z+3, r26	; 0x03
   115a8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
			*status |= (TIMEOUT_FLAG | BUS_ERROR_FLAG);
   115ac:	f8 01       	movw	r30, r16
   115ae:	80 81       	ld	r24, Z
   115b0:	91 81       	ldd	r25, Z+1	; 0x01
   115b2:	90 6c       	ori	r25, 0xC0	; 192
   115b4:	91 83       	std	Z+1, r25	; 0x01
   115b6:	80 83       	st	Z, r24
			return(ind);
   115b8:	c0 e0       	ldi	r28, 0x00	; 0
   115ba:	d0 e0       	ldi	r29, 0x00	; 0
   115bc:	45 c0       	rjmp	.+138    	; 0x11648 <gpib_write_str+0x158>
   115be:	cd 2e       	mov	r12, r29
   115c0:	dc 2e       	mov	r13, r28

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   115c2:	c0 e0       	ldi	r28, 0x00	; 0
   115c4:	d0 e0       	ldi	r29, 0x00	; 0
			return(ind);
		}
	}
#endif

    while(ind < size)
   115c6:	ce 15       	cp	r28, r14
   115c8:	df 05       	cpc	r29, r15
   115ca:	1c f5       	brge	.+70     	; 0x11612 <gpib_write_str+0x122>
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   115cc:	21 96       	adiw	r28, 0x01	; 1
   115ce:	f6 01       	movw	r30, r12
   115d0:	81 91       	ld	r24, Z+
   115d2:	6f 01       	movw	r12, r30
   115d4:	90 e0       	ldi	r25, 0x00	; 0

        if( (*status & EOI_FLAG) && (ind == size ) )
   115d6:	f8 01       	movw	r30, r16
   115d8:	20 81       	ld	r18, Z
   115da:	31 81       	ldd	r19, Z+1	; 0x01
   115dc:	30 ff       	sbrs	r19, 0
   115de:	04 c0       	rjmp	.+8      	; 0x115e8 <gpib_write_str+0xf8>
   115e0:	ec 16       	cp	r14, r28
   115e2:	fd 06       	cpc	r15, r29
            ch |= EOI_FLAG;
   115e4:	09 f4       	brne	.+2      	; 0x115e8 <gpib_write_str+0xf8>

/// @return Returns

        val = gpib_write_byte(ch);
   115e6:	91 60       	ori	r25, 0x01	; 1
   115e8:	ec da       	rcall	.-2600   	; 0x10bc2 <gpib_write_byte>
        *status |= (val & ERROR_MASK);
   115ea:	5c 01       	movw	r10, r24
   115ec:	aa 24       	eor	r10, r10
   115ee:	f0 ed       	ldi	r31, 0xD0	; 208
   115f0:	bf 22       	and	r11, r31
   115f2:	f8 01       	movw	r30, r16
   115f4:	20 81       	ld	r18, Z
   115f6:	31 81       	ldd	r19, Z+1	; 0x01
   115f8:	2a 29       	or	r18, r10
   115fa:	3b 29       	or	r19, r11
   115fc:	31 83       	std	Z+1, r19	; 0x01
   115fe:	20 83       	st	Z, r18

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   11600:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11604:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   11608:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   1160a:	cc de       	rcall	.-616    	; 0x113a4 <gpib_decode>
   1160c:	a1 14       	cp	r10, r1
   1160e:	b1 04       	cpc	r11, r1

    }                                             // while(ind < size)

// End by setting receive mode and set NRFD and NDAC busy until
// we get back to the main loop (this happens very quickly
	gpib_rx_init(1);	// BUSY
   11610:	d1 f2       	breq	.-76     	; 0x115c6 <gpib_write_str+0xd6>
   11612:	81 e0       	ldi	r24, 0x01	; 1
   11614:	c1 d9       	rcall	.-3198   	; 0x10998 <gpib_rx_init>

    if ( ind != size )
   11616:	ce 15       	cp	r28, r14
   11618:	df 05       	cpc	r29, r15
   1161a:	b1 f0       	breq	.+44     	; 0x11648 <gpib_write_str+0x158>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1161c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11620:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11624:	81 72       	andi	r24, 0x21	; 33
   11626:	91 70       	andi	r25, 0x01	; 1
   11628:	89 2b       	or	r24, r25
   1162a:	71 f0       	breq	.+28     	; 0x11648 <gpib_write_str+0x158>
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   1162c:	ed b7       	in	r30, 0x3d	; 61
   1162e:	fe b7       	in	r31, 0x3e	; 62
   11630:	f7 82       	std	Z+7, r15	; 0x07
   11632:	e6 82       	std	Z+6, r14	; 0x06
   11634:	d5 83       	std	Z+5, r29	; 0x05
   11636:	c4 83       	std	Z+4, r28	; 0x04
   11638:	8c ec       	ldi	r24, 0xCC	; 204
   1163a:	9e e0       	ldi	r25, 0x0E	; 14
   1163c:	a0 e0       	ldi	r26, 0x00	; 0
   1163e:	81 83       	std	Z+1, r24	; 0x01
   11640:	92 83       	std	Z+2, r25	; 0x02
   11642:	a3 83       	std	Z+3, r26	; 0x03
   11644:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    }
    return(ind);
}
   11648:	ce 01       	movw	r24, r28
   1164a:	cd b7       	in	r28, 0x3d	; 61
   1164c:	de b7       	in	r29, 0x3e	; 62
   1164e:	27 96       	adiw	r28, 0x07	; 7
   11650:	ea e0       	ldi	r30, 0x0A	; 10
   11652:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__epilogue_restores__+0x10>

00011656 <gpib_file_init>:
{
    int index = find_device(PRINTER_TYPE, address, BASE_MSA);
    if(index == -1)
        return(0);
    return(set_active_device(index));
}
   11656:	ad b7       	in	r26, 0x3d	; 61
   11658:	be b7       	in	r27, 0x3e	; 62
   1165a:	17 97       	sbiw	r26, 0x07	; 7
   1165c:	0f b6       	in	r0, 0x3f	; 63
   1165e:	f8 94       	cli
   11660:	be bf       	out	0x3e, r27	; 62
   11662:	0f be       	out	0x3f, r0	; 63
   11664:	ad bf       	out	0x3d, r26	; 61
   11666:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   1166a:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   1166e:	88 eb       	ldi	r24, 0xB8	; 184
   11670:	91 e0       	ldi	r25, 0x01	; 1
   11672:	0e 94 2b 9a 	call	0x13456	; 0x13456 <Read_Config>
   11676:	18 16       	cp	r1, r24
   11678:	19 06       	cpc	r1, r25
   1167a:	8c f4       	brge	.+34     	; 0x1169e <gpib_file_init+0x48>
   1167c:	ed b7       	in	r30, 0x3d	; 61
   1167e:	fe b7       	in	r31, 0x3e	; 62
   11680:	97 83       	std	Z+7, r25	; 0x07
   11682:	86 83       	std	Z+6, r24	; 0x06
   11684:	88 eb       	ldi	r24, 0xB8	; 184
   11686:	91 e0       	ldi	r25, 0x01	; 1
   11688:	95 83       	std	Z+5, r25	; 0x05
   1168a:	84 83       	std	Z+4, r24	; 0x04
   1168c:	89 ed       	ldi	r24, 0xD9	; 217
   1168e:	94 e1       	ldi	r25, 0x14	; 20
   11690:	a0 e0       	ldi	r26, 0x00	; 0
   11692:	81 83       	std	Z+1, r24	; 0x01
   11694:	92 83       	std	Z+2, r25	; 0x02
   11696:	a3 83       	std	Z+3, r26	; 0x03
   11698:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1169c:	10 c0       	rjmp	.+32     	; 0x116be <gpib_file_init+0x68>
   1169e:	89 2b       	or	r24, r25
   116a0:	71 f0       	breq	.+28     	; 0x116be <gpib_file_init+0x68>
   116a2:	88 eb       	ldi	r24, 0xB8	; 184
   116a4:	91 e0       	ldi	r25, 0x01	; 1
   116a6:	ed b7       	in	r30, 0x3d	; 61
   116a8:	fe b7       	in	r31, 0x3e	; 62
   116aa:	95 83       	std	Z+5, r25	; 0x05
   116ac:	84 83       	std	Z+4, r24	; 0x04
   116ae:	88 ec       	ldi	r24, 0xC8	; 200
   116b0:	94 e1       	ldi	r25, 0x14	; 20
   116b2:	a0 e0       	ldi	r26, 0x00	; 0
   116b4:	81 83       	std	Z+1, r24	; 0x01
   116b6:	92 83       	std	Z+2, r25	; 0x02
   116b8:	a3 83       	std	Z+3, r26	; 0x03
   116ba:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   116be:	0e 94 f6 98 	call	0x131ec	; 0x131ec <set_Config_Defaults>
   116c2:	0e 94 13 6f 	call	0xde26	; 0xde26 <mmc_wp_status>
   116c6:	89 2b       	or	r24, r25
   116c8:	51 f0       	breq	.+20     	; 0x116de <gpib_file_init+0x88>
   116ca:	8f ea       	ldi	r24, 0xAF	; 175
   116cc:	94 e1       	ldi	r25, 0x14	; 20
   116ce:	a0 e0       	ldi	r26, 0x00	; 0
   116d0:	ed b7       	in	r30, 0x3d	; 61
   116d2:	fe b7       	in	r31, 0x3e	; 62
   116d4:	81 83       	std	Z+1, r24	; 0x01
   116d6:	92 83       	std	Z+2, r25	; 0x02
   116d8:	a3 83       	std	Z+3, r26	; 0x03
   116da:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   116de:	ad b7       	in	r26, 0x3d	; 61
   116e0:	be b7       	in	r27, 0x3e	; 62
   116e2:	17 96       	adiw	r26, 0x07	; 7
   116e4:	0f b6       	in	r0, 0x3f	; 63
   116e6:	f8 94       	cli
   116e8:	be bf       	out	0x3e, r27	; 62
   116ea:	0f be       	out	0x3f, r0	; 63
   116ec:	ad bf       	out	0x3d, r26	; 61
   116ee:	08 95       	ret

000116f0 <SS80_is_MLA>:
   116f0:	40 e2       	ldi	r20, 0x20	; 32
   116f2:	50 e0       	ldi	r21, 0x00	; 0
   116f4:	bc 01       	movw	r22, r24
   116f6:	83 e0       	ldi	r24, 0x03	; 3
   116f8:	90 e0       	ldi	r25, 0x00	; 0
   116fa:	0e 94 5c 96 	call	0x12cb8	; 0x12cb8 <find_device>
   116fe:	8f 3f       	cpi	r24, 0xFF	; 255
   11700:	2f ef       	ldi	r18, 0xFF	; 255
   11702:	92 07       	cpc	r25, r18
   11704:	19 f0       	breq	.+6      	; 0x1170c <SS80_is_MLA+0x1c>
   11706:	0c 94 86 96 	jmp	0x12d0c	; 0x12d0c <set_active_device>
   1170a:	08 95       	ret
   1170c:	80 e0       	ldi	r24, 0x00	; 0
   1170e:	90 e0       	ldi	r25, 0x00	; 0
   11710:	08 95       	ret

00011712 <SS80_is_MTA>:
   11712:	40 e4       	ldi	r20, 0x40	; 64
   11714:	50 e0       	ldi	r21, 0x00	; 0
   11716:	bc 01       	movw	r22, r24
   11718:	83 e0       	ldi	r24, 0x03	; 3
   1171a:	90 e0       	ldi	r25, 0x00	; 0
   1171c:	0e 94 5c 96 	call	0x12cb8	; 0x12cb8 <find_device>
   11720:	8f 3f       	cpi	r24, 0xFF	; 255
   11722:	2f ef       	ldi	r18, 0xFF	; 255
   11724:	92 07       	cpc	r25, r18
   11726:	19 f0       	breq	.+6      	; 0x1172e <SS80_is_MTA+0x1c>
   11728:	0c 94 86 96 	jmp	0x12d0c	; 0x12d0c <set_active_device>
   1172c:	08 95       	ret
   1172e:	80 e0       	ldi	r24, 0x00	; 0
   11730:	90 e0       	ldi	r25, 0x00	; 0
   11732:	08 95       	ret

00011734 <SS80_is_MSA>:
   11734:	40 e6       	ldi	r20, 0x60	; 96
   11736:	50 e0       	ldi	r21, 0x00	; 0
   11738:	bc 01       	movw	r22, r24
   1173a:	83 e0       	ldi	r24, 0x03	; 3
   1173c:	90 e0       	ldi	r25, 0x00	; 0
   1173e:	0e 94 5c 96 	call	0x12cb8	; 0x12cb8 <find_device>
   11742:	8f 3f       	cpi	r24, 0xFF	; 255
   11744:	2f ef       	ldi	r18, 0xFF	; 255
   11746:	92 07       	cpc	r25, r18
   11748:	19 f0       	breq	.+6      	; 0x11750 <SS80_is_MSA+0x1c>
   1174a:	0c 94 86 96 	jmp	0x12d0c	; 0x12d0c <set_active_device>
   1174e:	08 95       	ret
   11750:	80 e0       	ldi	r24, 0x00	; 0
   11752:	90 e0       	ldi	r25, 0x00	; 0
   11754:	08 95       	ret

00011756 <AMIGO_is_MLA>:
   11756:	40 e2       	ldi	r20, 0x20	; 32
   11758:	50 e0       	ldi	r21, 0x00	; 0
   1175a:	bc 01       	movw	r22, r24
   1175c:	81 e0       	ldi	r24, 0x01	; 1
   1175e:	90 e0       	ldi	r25, 0x00	; 0
   11760:	0e 94 5c 96 	call	0x12cb8	; 0x12cb8 <find_device>
   11764:	8f 3f       	cpi	r24, 0xFF	; 255
   11766:	2f ef       	ldi	r18, 0xFF	; 255
   11768:	92 07       	cpc	r25, r18
   1176a:	19 f0       	breq	.+6      	; 0x11772 <AMIGO_is_MLA+0x1c>
   1176c:	0c 94 86 96 	jmp	0x12d0c	; 0x12d0c <set_active_device>
   11770:	08 95       	ret
   11772:	80 e0       	ldi	r24, 0x00	; 0
   11774:	90 e0       	ldi	r25, 0x00	; 0
   11776:	08 95       	ret

00011778 <AMIGO_is_MTA>:
   11778:	40 e4       	ldi	r20, 0x40	; 64
   1177a:	50 e0       	ldi	r21, 0x00	; 0
   1177c:	bc 01       	movw	r22, r24
   1177e:	81 e0       	ldi	r24, 0x01	; 1
   11780:	90 e0       	ldi	r25, 0x00	; 0
   11782:	0e 94 5c 96 	call	0x12cb8	; 0x12cb8 <find_device>
   11786:	8f 3f       	cpi	r24, 0xFF	; 255
   11788:	2f ef       	ldi	r18, 0xFF	; 255
   1178a:	92 07       	cpc	r25, r18
   1178c:	19 f0       	breq	.+6      	; 0x11794 <AMIGO_is_MTA+0x1c>
   1178e:	0c 94 86 96 	jmp	0x12d0c	; 0x12d0c <set_active_device>
   11792:	08 95       	ret
   11794:	80 e0       	ldi	r24, 0x00	; 0
   11796:	90 e0       	ldi	r25, 0x00	; 0
   11798:	08 95       	ret

0001179a <AMIGO_is_MSA>:
   1179a:	40 e6       	ldi	r20, 0x60	; 96
   1179c:	50 e0       	ldi	r21, 0x00	; 0
   1179e:	bc 01       	movw	r22, r24
   117a0:	81 e0       	ldi	r24, 0x01	; 1
   117a2:	90 e0       	ldi	r25, 0x00	; 0
   117a4:	0e 94 5c 96 	call	0x12cb8	; 0x12cb8 <find_device>
   117a8:	8f 3f       	cpi	r24, 0xFF	; 255
   117aa:	2f ef       	ldi	r18, 0xFF	; 255
   117ac:	92 07       	cpc	r25, r18
   117ae:	19 f0       	breq	.+6      	; 0x117b6 <AMIGO_is_MSA+0x1c>
   117b0:	0c 94 86 96 	jmp	0x12d0c	; 0x12d0c <set_active_device>
   117b4:	08 95       	ret
   117b6:	80 e0       	ldi	r24, 0x00	; 0
   117b8:	90 e0       	ldi	r25, 0x00	; 0
   117ba:	08 95       	ret

000117bc <PRINTER_is_MLA>:
   117bc:	40 e2       	ldi	r20, 0x20	; 32
   117be:	50 e0       	ldi	r21, 0x00	; 0
   117c0:	bc 01       	movw	r22, r24
   117c2:	84 e0       	ldi	r24, 0x04	; 4
   117c4:	90 e0       	ldi	r25, 0x00	; 0
   117c6:	0e 94 5c 96 	call	0x12cb8	; 0x12cb8 <find_device>
   117ca:	8f 3f       	cpi	r24, 0xFF	; 255
   117cc:	2f ef       	ldi	r18, 0xFF	; 255
   117ce:	92 07       	cpc	r25, r18
   117d0:	19 f0       	breq	.+6      	; 0x117d8 <PRINTER_is_MLA+0x1c>
   117d2:	0c 94 86 96 	jmp	0x12d0c	; 0x12d0c <set_active_device>
   117d6:	08 95       	ret
   117d8:	80 e0       	ldi	r24, 0x00	; 0
   117da:	90 e0       	ldi	r25, 0x00	; 0
   117dc:	08 95       	ret

000117de <PRINTER_is_MTA>:
   117de:	40 e4       	ldi	r20, 0x40	; 64
   117e0:	50 e0       	ldi	r21, 0x00	; 0
   117e2:	bc 01       	movw	r22, r24
   117e4:	84 e0       	ldi	r24, 0x04	; 4
   117e6:	90 e0       	ldi	r25, 0x00	; 0
   117e8:	0e 94 5c 96 	call	0x12cb8	; 0x12cb8 <find_device>
   117ec:	8f 3f       	cpi	r24, 0xFF	; 255
   117ee:	2f ef       	ldi	r18, 0xFF	; 255
   117f0:	92 07       	cpc	r25, r18
   117f2:	19 f0       	breq	.+6      	; 0x117fa <PRINTER_is_MTA+0x1c>
   117f4:	0c 94 86 96 	jmp	0x12d0c	; 0x12d0c <set_active_device>
   117f8:	08 95       	ret
   117fa:	80 e0       	ldi	r24, 0x00	; 0
   117fc:	90 e0       	ldi	r25, 0x00	; 0
   117fe:	08 95       	ret

00011800 <gpib_init_devices>:
///
/// - Used at power up, Bus IFC or user aborts
/// @return  void
void gpib_init_devices(void)
{
    gpib_bus_init();                              // Not busy - we have to free all pins on the BUS
   11800:	93 d8       	rcall	.-3802   	; 0x10928 <gpib_bus_init>

// Init PPR talking and listening states
// Enable this 14 April 2020 - testing MIke Gore
    gpib_state_init();
   11802:	fa d8       	rcall	.-3596   	; 0x109f8 <gpib_state_init>
   11804:	0e 94 0d ab 	call	0x1561a	; 0x1561a <SS80_init>

    SS80_init();                                  // SS80 state init
   11808:	0e 94 9c b0 	call	0x16138	; 0x16138 <amigo_init>

#ifdef AMIGO
    amigo_init();                                 // AMIGO state init
   1180c:	0c 94 cd bb 	jmp	0x1779a	; 0x1779a <printer_close>
#endif

    printer_close();                              // Close any open fprinter files
   11810:	08 95       	ret

00011812 <gpib_trace_task>:
   11812:	0f 93       	push	r16
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   11814:	1f 93       	push	r17
   11816:	cf 93       	push	r28
   11818:	df 93       	push	r29
   1181a:	00 d0       	rcall	.+0      	; 0x1181c <gpib_trace_task+0xa>
   1181c:	00 d0       	rcall	.+0      	; 0x1181e <gpib_trace_task+0xc>
   1181e:	1f 92       	push	r1
   11820:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   11822:	00 97       	sbiw	r24, 0x00	; 0
   11824:	09 f4       	brne	.+2      	; 0x11828 <gpib_trace_task+0x16>
   11826:	44 c0       	rjmp	.+136    	; 0x118b0 <gpib_trace_task+0x9e>
   11828:	fc 01       	movw	r30, r24
   1182a:	20 81       	ld	r18, Z
   1182c:	22 23       	and	r18, r18
   1182e:	09 f4       	brne	.+2      	; 0x11832 <gpib_trace_task+0x20>
   11830:	3f c0       	rjmp	.+126    	; 0x118b0 <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   11832:	0e 94 32 30 	call	0x6064	; 0x6064 <skipspaces>
   11836:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   11838:	ed b7       	in	r30, 0x3d	; 61
   1183a:	fe b7       	in	r31, 0x3e	; 62
   1183c:	95 83       	std	Z+5, r25	; 0x05
   1183e:	84 83       	std	Z+4, r24	; 0x04
   11840:	85 e9       	ldi	r24, 0x95	; 149
   11842:	94 e1       	ldi	r25, 0x14	; 20
   11844:	a0 e0       	ldi	r26, 0x00	; 0
   11846:	81 83       	std	Z+1, r24	; 0x01
   11848:	92 83       	std	Z+2, r25	; 0x02
   1184a:	a3 83       	std	Z+3, r26	; 0x03
   1184c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        if(detail)
   11850:	20 97       	sbiw	r28, 0x00	; 0
   11852:	51 f0       	breq	.+20     	; 0x11868 <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   11854:	8a e6       	ldi	r24, 0x6A	; 106
   11856:	94 e1       	ldi	r25, 0x14	; 20
   11858:	a0 e0       	ldi	r26, 0x00	; 0
   1185a:	ed b7       	in	r30, 0x3d	; 61
   1185c:	fe b7       	in	r31, 0x3e	; 62
   1185e:	81 83       	std	Z+1, r24	; 0x01
   11860:	92 83       	std	Z+2, r25	; 0x02
   11862:	a3 83       	std	Z+3, r26	; 0x03
   11864:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        printf("Press ANY key to exit\n");
   11868:	83 e5       	ldi	r24, 0x53	; 83
   1186a:	94 e1       	ldi	r25, 0x14	; 20
   1186c:	a0 e0       	ldi	r26, 0x00	; 0
   1186e:	ed b7       	in	r30, 0x3d	; 61
   11870:	fe b7       	in	r31, 0x3e	; 62
   11872:	81 83       	std	Z+1, r24	; 0x01
   11874:	92 83       	std	Z+2, r25	; 0x02
   11876:	a3 83       	std	Z+3, r26	; 0x03
   11878:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

        gpib_log_fp = fopen(name,"wb");
   1187c:	6c e0       	ldi	r22, 0x0C	; 12
   1187e:	79 e0       	ldi	r23, 0x09	; 9
   11880:	c8 01       	movw	r24, r16
   11882:	0e 94 2b 7d 	call	0xfa56	; 0xfa56 <fopen>
   11886:	90 93 5e 19 	sts	0x195E, r25	; 0x80195e <gpib_log_fp+0x1>
   1188a:	80 93 5d 19 	sts	0x195D, r24	; 0x80195d <gpib_log_fp>
        if(gpib_log_fp == NULL)
   1188e:	89 2b       	or	r24, r25
   11890:	b9 f4       	brne	.+46     	; 0x118c0 <gpib_trace_task+0xae>
        {
            perror("open failed");
   11892:	87 ea       	ldi	r24, 0xA7	; 167
   11894:	9d e0       	ldi	r25, 0x0D	; 13
   11896:	0e 94 5c 77 	call	0xeeb8	; 0xeeb8 <perror>
            printf("exiting...\n");
   1189a:	87 e4       	ldi	r24, 0x47	; 71
   1189c:	94 e1       	ldi	r25, 0x14	; 20
   1189e:	a0 e0       	ldi	r26, 0x00	; 0
   118a0:	ed b7       	in	r30, 0x3d	; 61
   118a2:	fe b7       	in	r31, 0x3e	; 62
   118a4:	81 83       	std	Z+1, r24	; 0x01
   118a6:	92 83       	std	Z+2, r25	; 0x02
   118a8:	a3 83       	std	Z+3, r26	; 0x03
   118aa:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            return;
   118ae:	3d c0       	rjmp	.+122    	; 0x1192a <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   118b0:	80 91 be 1c 	lds	r24, 0x1CBE	; 0x801cbe <__iob+0x2>
   118b4:	90 91 bf 1c 	lds	r25, 0x1CBF	; 0x801cbf <__iob+0x3>
   118b8:	90 93 5e 19 	sts	0x195E, r25	; 0x80195e <gpib_log_fp+0x1>
   118bc:	80 93 5d 19 	sts	0x195D, r24	; 0x80195d <gpib_log_fp>
    }

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();
   118c0:	9f df       	rcall	.-194    	; 0x11800 <gpib_init_devices>

    gpib_decode_header(gpib_log_fp);
   118c2:	80 91 5d 19 	lds	r24, 0x195D	; 0x80195d <gpib_log_fp>
   118c6:	90 91 5e 19 	lds	r25, 0x195E	; 0x80195e <gpib_log_fp+0x1>
   118ca:	c0 da       	rcall	.-2688   	; 0x10e4c <gpib_decode_header>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   118cc:	80 e0       	ldi	r24, 0x00	; 0
   118ce:	0e 94 68 28 	call	0x50d0	; 0x50d0 <uart_keyhit>
   118d2:	89 2b       	or	r24, r25
            break;

        ch = gpib_read_byte(detail);
   118d4:	31 f4       	brne	.+12     	; 0x118e2 <gpib_trace_task+0xd0>
   118d6:	ce 01       	movw	r24, r28
        if(!detail)
   118d8:	4d dc       	rcall	.-1894   	; 0x11174 <gpib_read_byte>
   118da:	20 97       	sbiw	r28, 0x00	; 0
            gpib_decode(ch);
   118dc:	b9 f7       	brne	.-18     	; 0x118cc <gpib_trace_task+0xba>
   118de:	62 dd       	rcall	.-1340   	; 0x113a4 <gpib_decode>
   118e0:	f5 cf       	rjmp	.-22     	; 0x118cc <gpib_trace_task+0xba>
    }

    printf("Done\n");
   118e2:	81 e4       	ldi	r24, 0x41	; 65
   118e4:	94 e1       	ldi	r25, 0x14	; 20
   118e6:	a0 e0       	ldi	r26, 0x00	; 0
   118e8:	ed b7       	in	r30, 0x3d	; 61
   118ea:	fe b7       	in	r31, 0x3e	; 62
   118ec:	81 83       	std	Z+1, r24	; 0x01
   118ee:	92 83       	std	Z+2, r25	; 0x02
   118f0:	a3 83       	std	Z+3, r26	; 0x03
   118f2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    if(gpib_log_fp)
   118f6:	80 91 5d 19 	lds	r24, 0x195D	; 0x80195d <gpib_log_fp>
   118fa:	90 91 5e 19 	lds	r25, 0x195E	; 0x80195e <gpib_log_fp+0x1>
   118fe:	00 97       	sbiw	r24, 0x00	; 0
   11900:	a1 f0       	breq	.+40     	; 0x1192a <gpib_trace_task+0x118>
    {
        fclose(gpib_log_fp);
   11902:	0e 94 d5 7b 	call	0xf7aa	; 0xf7aa <fclose>
        printf("Capturing Closed\n");
   11906:	8f e2       	ldi	r24, 0x2F	; 47
   11908:	94 e1       	ldi	r25, 0x14	; 20
   1190a:	a0 e0       	ldi	r26, 0x00	; 0
   1190c:	ed b7       	in	r30, 0x3d	; 61
   1190e:	fe b7       	in	r31, 0x3e	; 62
   11910:	81 83       	std	Z+1, r24	; 0x01
   11912:	92 83       	std	Z+2, r25	; 0x02
   11914:	a3 83       	std	Z+3, r26	; 0x03
   11916:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        gpib_log_fp = stdout;
   1191a:	80 91 be 1c 	lds	r24, 0x1CBE	; 0x801cbe <__iob+0x2>
   1191e:	90 91 bf 1c 	lds	r25, 0x1CBF	; 0x801cbf <__iob+0x3>
   11922:	90 93 5e 19 	sts	0x195E, r25	; 0x80195e <gpib_log_fp+0x1>
   11926:	80 93 5d 19 	sts	0x195D, r24	; 0x80195d <gpib_log_fp>
    }
}
   1192a:	cd b7       	in	r28, 0x3d	; 61
   1192c:	de b7       	in	r29, 0x3e	; 62
   1192e:	25 96       	adiw	r28, 0x05	; 5
   11930:	e4 e0       	ldi	r30, 0x04	; 4
   11932:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

00011936 <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   11936:	ef 92       	push	r14
   11938:	ff 92       	push	r15
   1193a:	0f 93       	push	r16
   1193c:	1f 93       	push	r17
   1193e:	cf 93       	push	r28
   11940:	df 93       	push	r29
   11942:	00 d0       	rcall	.+0      	; 0x11944 <gpib_error_test+0xe>
   11944:	1f 92       	push	r1
   11946:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11948:	ec 01       	movw	r28, r24
   1194a:	cc 27       	eor	r28, r28
   1194c:	d0 7d       	andi	r29, 0xD0	; 208
   1194e:	20 97       	sbiw	r28, 0x00	; 0
   11950:	61 f0       	breq	.+24     	; 0x1196a <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11952:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11956:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1195a:	8d 72       	andi	r24, 0x2D	; 45
   1195c:	99 27       	eor	r25, r25
   1195e:	87 01       	movw	r16, r14
   11960:	00 27       	eor	r16, r16
   11962:	10 71       	andi	r17, 0x10	; 16
   11964:	89 2b       	or	r24, r25
   11966:	59 f4       	brne	.+22     	; 0x1197e <gpib_error_test+0x48>
   11968:	17 c0       	rjmp	.+46     	; 0x11998 <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   1196a:	80 e0       	ldi	r24, 0x00	; 0
   1196c:	0e 94 68 28 	call	0x50d0	; 0x50d0 <uart_keyhit>
   11970:	89 2b       	or	r24, r25
   11972:	79 f7       	brne	.-34     	; 0x11952 <gpib_error_test+0x1c>
   11974:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <mmc_ins_status>
   11978:	01 97       	sbiw	r24, 0x01	; 1
   1197a:	59 f7       	brne	.-42     	; 0x11952 <gpib_error_test+0x1c>
   1197c:	62 c0       	rjmp	.+196    	; 0x11a42 <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   1197e:	01 15       	cp	r16, r1
   11980:	11 05       	cpc	r17, r1
   11982:	51 f0       	breq	.+20     	; 0x11998 <gpib_error_test+0x62>
                printf("<IFC>\n");
   11984:	88 e2       	ldi	r24, 0x28	; 40
   11986:	94 e1       	ldi	r25, 0x14	; 20
   11988:	a0 e0       	ldi	r26, 0x00	; 0
   1198a:	ed b7       	in	r30, 0x3d	; 61
   1198c:	fe b7       	in	r31, 0x3e	; 62
   1198e:	81 83       	std	Z+1, r24	; 0x01
   11990:	92 83       	std	Z+2, r25	; 0x02
   11992:	a3 83       	std	Z+3, r26	; 0x03
   11994:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11998:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1199c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   119a0:	8d 72       	andi	r24, 0x2D	; 45
   119a2:	99 27       	eor	r25, r25
   119a4:	89 2b       	or	r24, r25
   119a6:	c1 f0       	breq	.+48     	; 0x119d8 <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   119a8:	f6 fe       	sbrs	r15, 6
   119aa:	0a c0       	rjmp	.+20     	; 0x119c0 <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   119ac:	8d e1       	ldi	r24, 0x1D	; 29
   119ae:	94 e1       	ldi	r25, 0x14	; 20
   119b0:	a0 e0       	ldi	r26, 0x00	; 0
   119b2:	ed b7       	in	r30, 0x3d	; 61
   119b4:	fe b7       	in	r31, 0x3e	; 62
   119b6:	81 83       	std	Z+1, r24	; 0x01
   119b8:	92 83       	std	Z+2, r25	; 0x02
   119ba:	a3 83       	std	Z+3, r26	; 0x03
   119bc:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            if(val & BUS_ERROR_FLAG)
   119c0:	d7 ff       	sbrs	r29, 7
   119c2:	0a c0       	rjmp	.+20     	; 0x119d8 <gpib_error_test+0xa2>
                printf("<BUS>\n");
   119c4:	86 e1       	ldi	r24, 0x16	; 22
   119c6:	94 e1       	ldi	r25, 0x14	; 20
   119c8:	a0 e0       	ldi	r26, 0x00	; 0
   119ca:	ed b7       	in	r30, 0x3d	; 61
   119cc:	fe b7       	in	r31, 0x3e	; 62
   119ce:	81 83       	std	Z+1, r24	; 0x01
   119d0:	92 83       	std	Z+2, r25	; 0x02
   119d2:	a3 83       	std	Z+3, r26	; 0x03
   119d4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        }

        if(uart_keyhit(0))
   119d8:	80 e0       	ldi	r24, 0x00	; 0
   119da:	0e 94 68 28 	call	0x50d0	; 0x50d0 <uart_keyhit>
   119de:	89 2b       	or	r24, r25
   119e0:	51 f0       	breq	.+20     	; 0x119f6 <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   119e2:	89 e0       	ldi	r24, 0x09	; 9
   119e4:	94 e1       	ldi	r25, 0x14	; 20
   119e6:	a0 e0       	ldi	r26, 0x00	; 0
   119e8:	ed b7       	in	r30, 0x3d	; 61
   119ea:	fe b7       	in	r31, 0x3e	; 62
   119ec:	81 83       	std	Z+1, r24	; 0x01
   119ee:	92 83       	std	Z+2, r25	; 0x02
   119f0:	a3 83       	std	Z+3, r26	; 0x03
   119f2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

        if( mmc_ins_status() != 1 )
   119f6:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <mmc_ins_status>
   119fa:	01 97       	sbiw	r24, 0x01	; 1
   119fc:	51 f0       	breq	.+20     	; 0x11a12 <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   119fe:	88 ef       	ldi	r24, 0xF8	; 248
   11a00:	93 e1       	ldi	r25, 0x13	; 19
   11a02:	a0 e0       	ldi	r26, 0x00	; 0
   11a04:	ed b7       	in	r30, 0x3d	; 61
   11a06:	fe b7       	in	r31, 0x3e	; 62
   11a08:	81 83       	std	Z+1, r24	; 0x01
   11a0a:	92 83       	std	Z+2, r25	; 0x02
   11a0c:	a3 83       	std	Z+3, r26	; 0x03
   11a0e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

        if(val & IFC_FLAG)
   11a12:	01 15       	cp	r16, r1
   11a14:	11 05       	cpc	r17, r1
   11a16:	09 f0       	breq	.+2      	; 0x11a1a <gpib_error_test+0xe4>
        {
            gpib_init_devices();
   11a18:	f3 de       	rcall	.-538    	; 0x11800 <gpib_init_devices>
        }

        if(uart_keyhit(0))
   11a1a:	80 e0       	ldi	r24, 0x00	; 0
   11a1c:	0e 94 68 28 	call	0x50d0	; 0x50d0 <uart_keyhit>
   11a20:	89 2b       	or	r24, r25
        {
            gpib_init_devices();
   11a22:	11 f0       	breq	.+4      	; 0x11a28 <gpib_error_test+0xf2>
   11a24:	ed de       	rcall	.-550    	; 0x11800 <gpib_init_devices>
   11a26:	0b c0       	rjmp	.+22     	; 0x11a3e <gpib_error_test+0x108>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   11a28:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <mmc_ins_status>
   11a2c:	01 97       	sbiw	r24, 0x01	; 1
   11a2e:	39 f4       	brne	.+14     	; 0x11a3e <gpib_error_test+0x108>
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   11a30:	01 15       	cp	r16, r1
   11a32:	11 05       	cpc	r17, r1
   11a34:	31 f0       	breq	.+12     	; 0x11a42 <gpib_error_test+0x10c>
        {
            while(GPIB_IO_RD(IFC) == 0)
   11a36:	54 98       	cbi	0x0a, 4	; 10
   11a38:	4c 9b       	sbis	0x09, 4	; 9
   11a3a:	fd cf       	rjmp	.-6      	; 0x11a36 <gpib_error_test+0x100>
   11a3c:	02 c0       	rjmp	.+4      	; 0x11a42 <gpib_error_test+0x10c>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   11a3e:	c1 e0       	ldi	r28, 0x01	; 1
   11a40:	d0 e0       	ldi	r29, 0x00	; 0
                ;
        }
        return(val);
    }
    return(0);
}
   11a42:	ce 01       	movw	r24, r28
   11a44:	cd b7       	in	r28, 0x3d	; 61
   11a46:	de b7       	in	r29, 0x3e	; 62
   11a48:	23 96       	adiw	r28, 0x03	; 3
   11a4a:	e6 e0       	ldi	r30, 0x06	; 6
   11a4c:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

00011a50 <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   11a50:	1f 93       	push	r17
   11a52:	cf 93       	push	r28
   11a54:	df 93       	push	r29
   11a56:	ec 01       	movw	r28, r24
   11a58:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   11a5a:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   11a5e:	8f 35       	cpi	r24, 0x5F	; 95
   11a60:	91 f0       	breq	.+36     	; 0x11a86 <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   11a62:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   11a66:	90 e0       	ldi	r25, 0x00	; 0
   11a68:	76 de       	rcall	.-788    	; 0x11756 <AMIGO_is_MLA>
   11a6a:	89 2b       	or	r24, r25
   11a6c:	c9 f4       	brne	.+50     	; 0x11aa0 <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   11a6e:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   11a72:	90 e0       	ldi	r25, 0x00	; 0
   11a74:	3d de       	rcall	.-902    	; 0x116f0 <SS80_is_MLA>
   11a76:	89 2b       	or	r24, r25
   11a78:	11 f5       	brne	.+68     	; 0x11abe <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11a7a:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   11a7e:	90 e0       	ldi	r25, 0x00	; 0
   11a80:	9d de       	rcall	.-710    	; 0x117bc <PRINTER_is_MLA>
   11a82:	89 2b       	or	r24, r25
   11a84:	59 f5       	brne	.+86     	; 0x11adc <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   11a86:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   11a8a:	8f 33       	cpi	r24, 0x3F	; 63
   11a8c:	19 f4       	brne	.+6      	; 0x11a94 <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11a8e:	80 e0       	ldi	r24, 0x00	; 0
   11a90:	90 e0       	ldi	r25, 0x00	; 0
   11a92:	2e c0       	rjmp	.+92     	; 0x11af0 <GPIB_COMMANDS+0xa0>

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   11a94:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   11a98:	90 e0       	ldi	r25, 0x00	; 0
   11a9a:	6e de       	rcall	.-804    	; 0x11778 <AMIGO_is_MTA>
   11a9c:	89 2b       	or	r24, r25
   11a9e:	49 f0       	breq	.+18     	; 0x11ab2 <GPIB_COMMANDS+0x62>
        {
            if(unread)
   11aa0:	11 23       	and	r17, r17
   11aa2:	11 f0       	breq	.+4      	; 0x11aa8 <GPIB_COMMANDS+0x58>
                gpib_unread(val);
   11aa4:	ce 01       	movw	r24, r28
   11aa6:	41 d8       	rcall	.-3966   	; 0x10b2a <gpib_unread>
   11aa8:	80 91 ec 1e 	lds	r24, 0x1EEC	; 0x801eec <secondary>
            status = AMIGO_COMMANDS(secondary);
   11aac:	0e 94 c8 ba 	call	0x17590	; 0x17590 <AMIGO_COMMANDS>
   11ab0:	1d c0       	rjmp	.+58     	; 0x11aec <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   11ab2:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   11ab6:	90 e0       	ldi	r25, 0x00	; 0
   11ab8:	2c de       	rcall	.-936    	; 0x11712 <SS80_is_MTA>
   11aba:	89 2b       	or	r24, r25
   11abc:	49 f0       	breq	.+18     	; 0x11ad0 <GPIB_COMMANDS+0x80>
        {
            if(unread)
   11abe:	11 23       	and	r17, r17
   11ac0:	11 f0       	breq	.+4      	; 0x11ac6 <GPIB_COMMANDS+0x76>
                gpib_unread(val);
   11ac2:	ce 01       	movw	r24, r28
   11ac4:	32 d8       	rcall	.-3996   	; 0x10b2a <gpib_unread>
   11ac6:	80 91 ec 1e 	lds	r24, 0x1EEC	; 0x801eec <secondary>
            status = SS80_COMMANDS(secondary);
   11aca:	0e 94 e8 ae 	call	0x15dd0	; 0x15dd0 <SS80_COMMANDS>
   11ace:	0e c0       	rjmp	.+28     	; 0x11aec <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11ad0:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   11ad4:	90 e0       	ldi	r25, 0x00	; 0
   11ad6:	83 de       	rcall	.-762    	; 0x117de <PRINTER_is_MTA>
   11ad8:	89 2b       	or	r24, r25
   11ada:	c9 f2       	breq	.-78     	; 0x11a8e <GPIB_COMMANDS+0x3e>
        {
            if(unread)
   11adc:	11 23       	and	r17, r17
   11ade:	11 f0       	breq	.+4      	; 0x11ae4 <GPIB_COMMANDS+0x94>
                gpib_unread(val);
   11ae0:	ce 01       	movw	r24, r28
   11ae2:	23 d8       	rcall	.-4026   	; 0x10b2a <gpib_unread>
   11ae4:	80 91 ec 1e 	lds	r24, 0x1EEC	; 0x801eec <secondary>
            status = PRINTER_COMMANDS(secondary);
   11ae8:	0e 94 41 bd 	call	0x17a82	; 0x17a82 <PRINTER_COMMANDS>
   11aec:	10 92 ec 1e 	sts	0x1EEC, r1	; 0x801eec <secondary>
            secondary = 0;
   11af0:	df 91       	pop	r29
            return(status);
        }
    }
    return(0);
}
   11af2:	cf 91       	pop	r28
   11af4:	1f 91       	pop	r17
   11af6:	08 95       	ret

00011af8 <Send_Identify>:
   11af8:	cf 92       	push	r12
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11afa:	df 92       	push	r13
   11afc:	ff 92       	push	r15
   11afe:	0f 93       	push	r16
   11b00:	1f 93       	push	r17
   11b02:	cf 93       	push	r28
   11b04:	df 93       	push	r29
   11b06:	cd b7       	in	r28, 0x3d	; 61
   11b08:	de b7       	in	r29, 0x3e	; 62
   11b0a:	2b 97       	sbiw	r28, 0x0b	; 11
   11b0c:	0f b6       	in	r0, 0x3f	; 63
   11b0e:	f8 94       	cli
   11b10:	de bf       	out	0x3e, r29	; 62
   11b12:	0f be       	out	0x3f, r0	; 63
   11b14:	cd bf       	out	0x3d, r28	; 61
   11b16:	f8 2e       	mov	r15, r24
   11b18:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   11b1a:	80 e0       	ldi	r24, 0x00	; 0
   11b1c:	91 e0       	ldi	r25, 0x01	; 1
   11b1e:	9b 87       	std	Y+11, r25	; 0x0b
   11b20:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   11b22:	8b 01       	movw	r16, r22
   11b24:	20 e0       	ldi	r18, 0x00	; 0
   11b26:	30 e0       	ldi	r19, 0x00	; 0
   11b28:	42 e0       	ldi	r20, 0x02	; 2
   11b2a:	50 e0       	ldi	r21, 0x00	; 0
   11b2c:	60 e0       	ldi	r22, 0x00	; 0
   11b2e:	70 e0       	ldi	r23, 0x00	; 0
   11b30:	ce 01       	movw	r24, r28
   11b32:	08 96       	adiw	r24, 0x08	; 8
   11b34:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   11b38:	ae 01       	movw	r20, r28
   11b3a:	46 5f       	subi	r20, 0xF6	; 246
   11b3c:	5f 4f       	sbci	r21, 0xFF	; 255
   11b3e:	62 e0       	ldi	r22, 0x02	; 2
   11b40:	70 e0       	ldi	r23, 0x00	; 0
   11b42:	ce 01       	movw	r24, r28
   11b44:	08 96       	adiw	r24, 0x08	; 8
   11b46:	d4 dc       	rcall	.-1624   	; 0x114f0 <gpib_write_str>
   11b48:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11b4c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11b50:	02 97       	sbiw	r24, 0x02	; 2
   11b52:	79 f0       	breq	.+30     	; 0x11b72 <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11b54:	25 72       	andi	r18, 0x25	; 37
   11b56:	33 27       	eor	r19, r19
   11b58:	23 2b       	or	r18, r19
   11b5a:	f9 f0       	breq	.+62     	; 0x11b9a <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   11b5c:	ed b7       	in	r30, 0x3d	; 61
   11b5e:	fe b7       	in	r31, 0x3e	; 62
   11b60:	d7 82       	std	Z+7, r13	; 0x07
   11b62:	c6 82       	std	Z+6, r12	; 0x06
   11b64:	8f 2d       	mov	r24, r15
   11b66:	90 e0       	ldi	r25, 0x00	; 0
   11b68:	95 83       	std	Z+5, r25	; 0x05
   11b6a:	84 83       	std	Z+4, r24	; 0x04
   11b6c:	87 ed       	ldi	r24, 0xD7	; 215
   11b6e:	93 e1       	ldi	r25, 0x13	; 19
   11b70:	0e c0       	rjmp	.+28     	; 0x11b8e <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11b72:	24 72       	andi	r18, 0x24	; 36
   11b74:	33 27       	eor	r19, r19
   11b76:	23 2b       	or	r18, r19
   11b78:	81 f0       	breq	.+32     	; 0x11b9a <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11b7a:	ed b7       	in	r30, 0x3d	; 61
   11b7c:	fe b7       	in	r31, 0x3e	; 62
   11b7e:	d7 82       	std	Z+7, r13	; 0x07
   11b80:	c6 82       	std	Z+6, r12	; 0x06
   11b82:	8f 2d       	mov	r24, r15
   11b84:	90 e0       	ldi	r25, 0x00	; 0
   11b86:	95 83       	std	Z+5, r25	; 0x05
   11b88:	84 83       	std	Z+4, r24	; 0x04
   11b8a:	8d eb       	ldi	r24, 0xBD	; 189
   11b8c:	93 e1       	ldi	r25, 0x13	; 19
   11b8e:	a0 e0       	ldi	r26, 0x00	; 0
   11b90:	81 83       	std	Z+1, r24	; 0x01
   11b92:	92 83       	std	Z+2, r25	; 0x02
   11b94:	a3 83       	std	Z+3, r26	; 0x03
   11b96:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
    return (status & ERROR_MASK);
   11b9a:	8a 85       	ldd	r24, Y+10	; 0x0a
   11b9c:	9b 85       	ldd	r25, Y+11	; 0x0b
   11b9e:	88 27       	eor	r24, r24
   11ba0:	90 7d       	andi	r25, 0xD0	; 208
}
   11ba2:	2b 96       	adiw	r28, 0x0b	; 11
   11ba4:	0f b6       	in	r0, 0x3f	; 63
   11ba6:	f8 94       	cli
   11ba8:	de bf       	out	0x3e, r29	; 62
   11baa:	0f be       	out	0x3f, r0	; 63
   11bac:	cd bf       	out	0x3d, r28	; 61
   11bae:	df 91       	pop	r29
   11bb0:	cf 91       	pop	r28
   11bb2:	1f 91       	pop	r17
   11bb4:	0f 91       	pop	r16
   11bb6:	ff 90       	pop	r15
   11bb8:	df 90       	pop	r13
   11bba:	cf 90       	pop	r12
   11bbc:	08 95       	ret

00011bbe <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11bbe:	00 d0       	rcall	.+0      	; 0x11bc0 <GPIB+0x2>
   11bc0:	00 d0       	rcall	.+0      	; 0x11bc2 <GPIB+0x4>
   11bc2:	1f 92       	push	r1
   11bc4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11bc8:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   11bcc:	85 30       	cpi	r24, 0x05	; 5
   11bce:	89 f4       	brne	.+34     	; 0x11bf2 <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11bd0:	27 71       	andi	r18, 0x17	; 23
   11bd2:	33 27       	eor	r19, r19
   11bd4:	23 2b       	or	r18, r19
   11bd6:	51 f0       	breq	.+20     	; 0x11bec <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   11bd8:	85 ea       	ldi	r24, 0xA5	; 165
   11bda:	93 e1       	ldi	r25, 0x13	; 19
   11bdc:	a0 e0       	ldi	r26, 0x00	; 0
   11bde:	ed b7       	in	r30, 0x3d	; 61
   11be0:	fe b7       	in	r31, 0x3e	; 62
   11be2:	81 83       	std	Z+1, r24	; 0x01
   11be4:	92 83       	std	Z+2, r25	; 0x02
   11be6:	a3 83       	std	Z+3, r26	; 0x03
   11be8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        spoll = 0;
   11bec:	10 92 e8 1e 	sts	0x1EE8, r1	; 0x801ee8 <spoll>
   11bf0:	a0 c0       	rjmp	.+320    	; 0x11d32 <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   11bf2:	85 31       	cpi	r24, 0x15	; 21
   11bf4:	39 f4       	brne	.+14     	; 0x11c04 <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11bf6:	27 71       	andi	r18, 0x17	; 23
   11bf8:	33 27       	eor	r19, r19
   11bfa:	23 2b       	or	r18, r19
   11bfc:	b9 f3       	breq	.-18     	; 0x11bec <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   11bfe:	8d e8       	ldi	r24, 0x8D	; 141
   11c00:	93 e1       	ldi	r25, 0x13	; 19
   11c02:	ec cf       	rjmp	.-40     	; 0x11bdc <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   11c04:	88 31       	cpi	r24, 0x18	; 24
   11c06:	d9 f4       	brne	.+54     	; 0x11c3e <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11c08:	26 70       	andi	r18, 0x06	; 6
   11c0a:	33 27       	eor	r19, r19
   11c0c:	23 2b       	or	r18, r19
   11c0e:	51 f0       	breq	.+20     	; 0x11c24 <GPIB+0x66>
            printf("[SPE]\n");
   11c10:	86 e8       	ldi	r24, 0x86	; 134
   11c12:	93 e1       	ldi	r25, 0x13	; 19
   11c14:	a0 e0       	ldi	r26, 0x00	; 0
   11c16:	ed b7       	in	r30, 0x3d	; 61
   11c18:	fe b7       	in	r31, 0x3e	; 62
   11c1a:	81 83       	std	Z+1, r24	; 0x01
   11c1c:	92 83       	std	Z+2, r25	; 0x02
   11c1e:	a3 83       	std	Z+3, r26	; 0x03
   11c20:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
        spoll = 1;
   11c24:	81 e0       	ldi	r24, 0x01	; 1
   11c26:	80 93 e8 1e 	sts	0x1EE8, r24	; 0x801ee8 <spoll>
        if(SS80_is_MTA(talking))
   11c2a:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   11c2e:	90 e0       	ldi	r25, 0x00	; 0
   11c30:	70 dd       	rcall	.-1312   	; 0x11712 <SS80_is_MTA>
   11c32:	89 2b       	or	r24, r25
   11c34:	09 f4       	brne	.+2      	; 0x11c38 <GPIB+0x7a>
   11c36:	7d c0       	rjmp	.+250    	; 0x11d32 <GPIB+0x174>
        {
            return( SS80_Report() );
   11c38:	0e 94 a1 aa 	call	0x15542	; 0x15542 <SS80_Report>
   11c3c:	7c c0       	rjmp	.+248    	; 0x11d36 <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   11c3e:	89 31       	cpi	r24, 0x19	; 25
   11c40:	39 f4       	brne	.+14     	; 0x11c50 <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11c42:	26 70       	andi	r18, 0x06	; 6
   11c44:	33 27       	eor	r19, r19
   11c46:	23 2b       	or	r18, r19
   11c48:	89 f2       	breq	.-94     	; 0x11bec <GPIB+0x2e>
            printf("[SPD]\n");
   11c4a:	8f e7       	ldi	r24, 0x7F	; 127
   11c4c:	93 e1       	ldi	r25, 0x13	; 19
   11c4e:	c6 cf       	rjmp	.-116    	; 0x11bdc <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   11c50:	84 30       	cpi	r24, 0x04	; 4
   11c52:	09 f0       	breq	.+2      	; 0x11c56 <GPIB+0x98>
   11c54:	48 c0       	rjmp	.+144    	; 0x11ce6 <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11c56:	22 ff       	sbrs	r18, 2
   11c58:	0a c0       	rjmp	.+20     	; 0x11c6e <GPIB+0xb0>
            printf("[SDC]\n");
   11c5a:	88 e7       	ldi	r24, 0x78	; 120
   11c5c:	93 e1       	ldi	r25, 0x13	; 19
   11c5e:	a0 e0       	ldi	r26, 0x00	; 0
   11c60:	ed b7       	in	r30, 0x3d	; 61
   11c62:	fe b7       	in	r31, 0x3e	; 62
   11c64:	81 83       	std	Z+1, r24	; 0x01
   11c66:	92 83       	std	Z+2, r25	; 0x02
   11c68:	a3 83       	std	Z+3, r26	; 0x03
   11c6a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11c6e:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   11c72:	90 e0       	ldi	r25, 0x00	; 0
   11c74:	3d dd       	rcall	.-1414   	; 0x116f0 <SS80_is_MLA>
   11c76:	89 2b       	or	r24, r25
   11c78:	d9 f0       	breq	.+54     	; 0x11cb0 <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c7a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c7e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c82:	84 72       	andi	r24, 0x24	; 36
   11c84:	99 27       	eor	r25, r25
   11c86:	89 2b       	or	r24, r25
   11c88:	51 f0       	breq	.+20     	; 0x11c9e <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11c8a:	8c e6       	ldi	r24, 0x6C	; 108
   11c8c:	93 e1       	ldi	r25, 0x13	; 19
   11c8e:	a0 e0       	ldi	r26, 0x00	; 0
   11c90:	ed b7       	in	r30, 0x3d	; 61
   11c92:	fe b7       	in	r31, 0x3e	; 62
   11c94:	81 83       	std	Z+1, r24	; 0x01
   11c96:	92 83       	std	Z+2, r25	; 0x02
   11c98:	a3 83       	std	Z+3, r26	; 0x03
   11c9a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11c9e:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   11ca2:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   11ca6:	85 81       	ldd	r24, Z+5	; 0x05
   11ca8:	90 e0       	ldi	r25, 0x00	; 0
   11caa:	0e 94 6d ab 	call	0x156da	; 0x156da <SS80_Selected_Device_Clear>
   11cae:	43 c0       	rjmp	.+134    	; 0x11d36 <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11cb0:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   11cb4:	90 e0       	ldi	r25, 0x00	; 0
   11cb6:	4f dd       	rcall	.-1378   	; 0x11756 <AMIGO_is_MLA>
   11cb8:	89 2b       	or	r24, r25
   11cba:	d9 f1       	breq	.+118    	; 0x11d32 <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11cbc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11cc0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11cc4:	84 72       	andi	r24, 0x24	; 36
   11cc6:	99 27       	eor	r25, r25
   11cc8:	89 2b       	or	r24, r25
   11cca:	51 f0       	breq	.+20     	; 0x11ce0 <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   11ccc:	8f e5       	ldi	r24, 0x5F	; 95
   11cce:	93 e1       	ldi	r25, 0x13	; 19
   11cd0:	a0 e0       	ldi	r26, 0x00	; 0
   11cd2:	ed b7       	in	r30, 0x3d	; 61
   11cd4:	fe b7       	in	r31, 0x3e	; 62
   11cd6:	81 83       	std	Z+1, r24	; 0x01
   11cd8:	92 83       	std	Z+2, r25	; 0x02
   11cda:	a3 83       	std	Z+3, r26	; 0x03
   11cdc:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
            return( amigo_cmd_clear() );
   11ce0:	0e 94 ae b5 	call	0x16b5c	; 0x16b5c <amigo_cmd_clear>
   11ce4:	28 c0       	rjmp	.+80     	; 0x11d36 <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   11ce6:	84 31       	cpi	r24, 0x14	; 20
   11ce8:	99 f4       	brne	.+38     	; 0x11d10 <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11cea:	22 ff       	sbrs	r18, 2
   11cec:	0a c0       	rjmp	.+20     	; 0x11d02 <GPIB+0x144>
            printf("[DCL]\n");
   11cee:	88 e5       	ldi	r24, 0x58	; 88
   11cf0:	93 e1       	ldi	r25, 0x13	; 19
   11cf2:	a0 e0       	ldi	r26, 0x00	; 0
   11cf4:	ed b7       	in	r30, 0x3d	; 61
   11cf6:	fe b7       	in	r31, 0x3e	; 62
   11cf8:	81 83       	std	Z+1, r24	; 0x01
   11cfa:	92 83       	std	Z+2, r25	; 0x02
   11cfc:	a3 83       	std	Z+3, r26	; 0x03
   11cfe:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
        SS80_Universal_Device_Clear();
   11d02:	0e 94 5f ab 	call	0x156be	; 0x156be <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   11d06:	0e 94 ae b5 	call	0x16b5c	; 0x16b5c <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   11d0a:	0e 94 cd bb 	call	0x1779a	; 0x1779a <printer_close>
   11d0e:	11 c0       	rjmp	.+34     	; 0x11d32 <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11d10:	25 71       	andi	r18, 0x15	; 21
   11d12:	33 27       	eor	r19, r19
   11d14:	23 2b       	or	r18, r19
   11d16:	69 f0       	breq	.+26     	; 0x11d32 <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   11d18:	90 e0       	ldi	r25, 0x00	; 0
   11d1a:	ed b7       	in	r30, 0x3d	; 61
   11d1c:	fe b7       	in	r31, 0x3e	; 62
   11d1e:	95 83       	std	Z+5, r25	; 0x05
   11d20:	84 83       	std	Z+4, r24	; 0x04
   11d22:	87 e3       	ldi	r24, 0x37	; 55
   11d24:	93 e1       	ldi	r25, 0x13	; 19
   11d26:	a0 e0       	ldi	r26, 0x00	; 0
   11d28:	81 83       	std	Z+1, r24	; 0x01
   11d2a:	92 83       	std	Z+2, r25	; 0x02
   11d2c:	a3 83       	std	Z+3, r26	; 0x03
   11d2e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    return(0);
   11d32:	80 e0       	ldi	r24, 0x00	; 0
   11d34:	90 e0       	ldi	r25, 0x00	; 0
}
   11d36:	0f 90       	pop	r0
   11d38:	0f 90       	pop	r0
   11d3a:	0f 90       	pop	r0
   11d3c:	0f 90       	pop	r0
   11d3e:	0f 90       	pop	r0
   11d40:	08 95       	ret

00011d42 <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   11d42:	cf 93       	push	r28
   11d44:	df 93       	push	r29
   11d46:	00 d0       	rcall	.+0      	; 0x11d48 <GPIB_TALK+0x6>
   11d48:	00 d0       	rcall	.+0      	; 0x11d4a <GPIB_TALK+0x8>
   11d4a:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   11d4c:	90 91 eb 1e 	lds	r25, 0x1EEB	; 0x801eeb <talking>
   11d50:	90 93 ee 1e 	sts	0x1EEE, r25	; 0x801eee <talking_last>
    talking = ch;
   11d54:	80 93 eb 1e 	sts	0x1EEB, r24	; 0x801eeb <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   11d58:	8f 35       	cpi	r24, 0x5F	; 95
   11d5a:	79 f4       	brne	.+30     	; 0x11d7a <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11d5c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11d60:	82 ff       	sbrs	r24, 2
   11d62:	7f c0       	rjmp	.+254    	; 0x11e62 <GPIB_TALK+0x120>
            printf("[UNT]\n");
   11d64:	84 ee       	ldi	r24, 0xE4	; 228
   11d66:	92 e1       	ldi	r25, 0x12	; 18
   11d68:	a0 e0       	ldi	r26, 0x00	; 0
   11d6a:	ed b7       	in	r30, 0x3d	; 61
   11d6c:	fe b7       	in	r31, 0x3e	; 62
   11d6e:	81 83       	std	Z+1, r24	; 0x01
   11d70:	92 83       	std	Z+2, r25	; 0x02
   11d72:	a3 83       	std	Z+3, r26	; 0x03
   11d74:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   11d78:	74 c0       	rjmp	.+232    	; 0x11e62 <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   11d7a:	c8 2f       	mov	r28, r24
   11d7c:	d0 e0       	ldi	r29, 0x00	; 0
   11d7e:	ce 01       	movw	r24, r28
   11d80:	c8 dc       	rcall	.-1648   	; 0x11712 <SS80_is_MTA>
   11d82:	89 2b       	or	r24, r25
   11d84:	e1 f0       	breq	.+56     	; 0x11dbe <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d86:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11d8a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d8e:	84 72       	andi	r24, 0x24	; 36
   11d90:	99 27       	eor	r25, r25
   11d92:	89 2b       	or	r24, r25
   11d94:	61 f0       	breq	.+24     	; 0x11dae <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   11d96:	ed b7       	in	r30, 0x3d	; 61
   11d98:	fe b7       	in	r31, 0x3e	; 62
   11d9a:	d5 83       	std	Z+5, r29	; 0x05
   11d9c:	c4 83       	std	Z+4, r28	; 0x04
   11d9e:	83 ed       	ldi	r24, 0xD3	; 211
   11da0:	92 e1       	ldi	r25, 0x12	; 18
   11da2:	a0 e0       	ldi	r26, 0x00	; 0
   11da4:	81 83       	std	Z+1, r24	; 0x01
   11da6:	92 83       	std	Z+2, r25	; 0x02
   11da8:	a3 83       	std	Z+3, r26	; 0x03
   11daa:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif

        if (spoll)
   11dae:	80 91 e8 1e 	lds	r24, 0x1EE8	; 0x801ee8 <spoll>
   11db2:	88 23       	and	r24, r24
   11db4:	09 f4       	brne	.+2      	; 0x11db8 <GPIB_TALK+0x76>
   11db6:	55 c0       	rjmp	.+170    	; 0x11e62 <GPIB_TALK+0x120>
        {
            SS80_Report();
   11db8:	0e 94 a1 aa 	call	0x15542	; 0x15542 <SS80_Report>
   11dbc:	52 c0       	rjmp	.+164    	; 0x11e62 <GPIB_TALK+0x120>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   11dbe:	ce 01       	movw	r24, r28
   11dc0:	db dc       	rcall	.-1610   	; 0x11778 <AMIGO_is_MTA>
   11dc2:	89 2b       	or	r24, r25
   11dc4:	81 f0       	breq	.+32     	; 0x11de6 <GPIB_TALK+0xa4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11dc6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11dca:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11dce:	84 72       	andi	r24, 0x24	; 36
   11dd0:	99 27       	eor	r25, r25
   11dd2:	89 2b       	or	r24, r25
   11dd4:	09 f4       	brne	.+2      	; 0x11dd8 <GPIB_TALK+0x96>
   11dd6:	45 c0       	rjmp	.+138    	; 0x11e62 <GPIB_TALK+0x120>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   11dd8:	ed b7       	in	r30, 0x3d	; 61
   11dda:	fe b7       	in	r31, 0x3e	; 62
   11ddc:	d5 83       	std	Z+5, r29	; 0x05
   11dde:	c4 83       	std	Z+4, r28	; 0x04
   11de0:	81 ec       	ldi	r24, 0xC1	; 193
   11de2:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   11de4:	38 c0       	rjmp	.+112    	; 0x11e56 <GPIB_TALK+0x114>
   11de6:	ce 01       	movw	r24, r28
   11de8:	fa dc       	rcall	.-1548   	; 0x117de <PRINTER_is_MTA>
   11dea:	89 2b       	or	r24, r25
   11dec:	79 f0       	breq	.+30     	; 0x11e0c <GPIB_TALK+0xca>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11dee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11df2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11df6:	84 72       	andi	r24, 0x24	; 36
   11df8:	99 27       	eor	r25, r25
   11dfa:	89 2b       	or	r24, r25
   11dfc:	91 f1       	breq	.+100    	; 0x11e62 <GPIB_TALK+0x120>
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   11dfe:	ed b7       	in	r30, 0x3d	; 61
   11e00:	fe b7       	in	r31, 0x3e	; 62
   11e02:	d5 83       	std	Z+5, r29	; 0x05
   11e04:	c4 83       	std	Z+4, r28	; 0x04
   11e06:	8d ea       	ldi	r24, 0xAD	; 173
   11e08:	92 e1       	ldi	r25, 0x12	; 18
   11e0a:	25 c0       	rjmp	.+74     	; 0x11e56 <GPIB_TALK+0x114>
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   11e0c:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   11e10:	90 e0       	ldi	r25, 0x00	; 0
   11e12:	d4 dc       	rcall	.-1624   	; 0x117bc <PRINTER_is_MLA>
   11e14:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11e18:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e1c:	89 2b       	or	r24, r25
   11e1e:	99 f0       	breq	.+38     	; 0x11e46 <GPIB_TALK+0x104>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e20:	24 72       	andi	r18, 0x24	; 36
   11e22:	33 27       	eor	r19, r19
   11e24:	23 2b       	or	r18, r19
   11e26:	51 f0       	breq	.+20     	; 0x11e3c <GPIB_TALK+0xfa>
            printf("[PRINTER OPEN]\n");
   11e28:	8d e9       	ldi	r24, 0x9D	; 157
   11e2a:	92 e1       	ldi	r25, 0x12	; 18
   11e2c:	a0 e0       	ldi	r26, 0x00	; 0
   11e2e:	ed b7       	in	r30, 0x3d	; 61
   11e30:	fe b7       	in	r31, 0x3e	; 62
   11e32:	81 83       	std	Z+1, r24	; 0x01
   11e34:	92 83       	std	Z+2, r25	; 0x02
   11e36:	a3 83       	std	Z+3, r26	; 0x03
   11e38:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        printer_open(NULL);
   11e3c:	80 e0       	ldi	r24, 0x00	; 0
   11e3e:	90 e0       	ldi	r25, 0x00	; 0
   11e40:	0e 94 25 bc 	call	0x1784a	; 0x1784a <printer_open>
   11e44:	0e c0       	rjmp	.+28     	; 0x11e62 <GPIB_TALK+0x120>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11e46:	22 ff       	sbrs	r18, 2
   11e48:	0c c0       	rjmp	.+24     	; 0x11e62 <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   11e4a:	ed b7       	in	r30, 0x3d	; 61
   11e4c:	fe b7       	in	r31, 0x3e	; 62
   11e4e:	d5 83       	std	Z+5, r29	; 0x05
   11e50:	c4 83       	std	Z+4, r28	; 0x04
   11e52:	81 e9       	ldi	r24, 0x91	; 145
   11e54:	92 e1       	ldi	r25, 0x12	; 18
   11e56:	a0 e0       	ldi	r26, 0x00	; 0
   11e58:	81 83       	std	Z+1, r24	; 0x01
   11e5a:	92 83       	std	Z+2, r25	; 0x02
   11e5c:	a3 83       	std	Z+3, r26	; 0x03
   11e5e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
    return(0);
}                                                 // Talk Address primary address group
   11e62:	80 e0       	ldi	r24, 0x00	; 0
   11e64:	90 e0       	ldi	r25, 0x00	; 0
   11e66:	cd b7       	in	r28, 0x3d	; 61
   11e68:	de b7       	in	r29, 0x3e	; 62
   11e6a:	25 96       	adiw	r28, 0x05	; 5
   11e6c:	e2 e0       	ldi	r30, 0x02	; 2
   11e6e:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00011e72 <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   11e72:	a9 e0       	ldi	r26, 0x09	; 9
   11e74:	b0 e0       	ldi	r27, 0x00	; 0
   11e76:	ef e3       	ldi	r30, 0x3F	; 63
   11e78:	ff e8       	ldi	r31, 0x8F	; 143
   11e7a:	0c 94 4d e3 	jmp	0x1c69a	; 0x1c69a <__prologue_saves__+0x1e>
   11e7e:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   11e80:	c8 2f       	mov	r28, r24
   11e82:	d0 e0       	ldi	r29, 0x00	; 0
   11e84:	ce 01       	movw	r24, r28
   11e86:	56 dc       	rcall	.-1876   	; 0x11734 <SS80_is_MSA>
   11e88:	89 2b       	or	r24, r25
   11e8a:	09 f1       	breq	.+66     	; 0x11ece <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e8c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11e90:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e94:	84 72       	andi	r24, 0x24	; 36
   11e96:	99 27       	eor	r25, r25
   11e98:	89 2b       	or	r24, r25
   11e9a:	61 f0       	breq	.+24     	; 0x11eb4 <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   11e9c:	ed b7       	in	r30, 0x3d	; 61
   11e9e:	fe b7       	in	r31, 0x3e	; 62
   11ea0:	d5 83       	std	Z+5, r29	; 0x05
   11ea2:	c4 83       	std	Z+4, r28	; 0x04
   11ea4:	80 e8       	ldi	r24, 0x80	; 128
   11ea6:	92 e1       	ldi	r25, 0x12	; 18
   11ea8:	a0 e0       	ldi	r26, 0x00	; 0
   11eaa:	81 83       	std	Z+1, r24	; 0x01
   11eac:	92 83       	std	Z+2, r25	; 0x02
   11eae:	a3 83       	std	Z+3, r26	; 0x03
   11eb0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   11eb4:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   11eb8:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   11ebc:	81 81       	ldd	r24, Z+1	; 0x01
   11ebe:	90 e0       	ldi	r25, 0x00	; 0
   11ec0:	0e 94 5f 85 	call	0x10abe	; 0x10abe <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   11ec4:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   11ec8:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   11ecc:	25 c0       	rjmp	.+74     	; 0x11f18 <GPIB_SECONDARY_ADDRESS+0xa6>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   11ece:	ce 01       	movw	r24, r28
   11ed0:	64 dc       	rcall	.-1848   	; 0x1179a <AMIGO_is_MSA>
   11ed2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11ed6:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11eda:	89 2b       	or	r24, r25
   11edc:	11 f1       	breq	.+68     	; 0x11f22 <GPIB_SECONDARY_ADDRESS+0xb0>
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ede:	c9 01       	movw	r24, r18
   11ee0:	84 72       	andi	r24, 0x24	; 36
   11ee2:	99 27       	eor	r25, r25
   11ee4:	89 2b       	or	r24, r25
   11ee6:	61 f0       	breq	.+24     	; 0x11f00 <GPIB_SECONDARY_ADDRESS+0x8e>
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   11ee8:	ed b7       	in	r30, 0x3d	; 61
   11eea:	fe b7       	in	r31, 0x3e	; 62
   11eec:	d5 83       	std	Z+5, r29	; 0x05
   11eee:	c4 83       	std	Z+4, r28	; 0x04
   11ef0:	8e e6       	ldi	r24, 0x6E	; 110
   11ef2:	92 e1       	ldi	r25, 0x12	; 18
   11ef4:	a0 e0       	ldi	r26, 0x00	; 0
   11ef6:	81 83       	std	Z+1, r24	; 0x01
   11ef8:	92 83       	std	Z+2, r25	; 0x02
   11efa:	a3 83       	std	Z+3, r26	; 0x03
   11efc:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   11f00:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   11f04:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   11f08:	81 81       	ldd	r24, Z+1	; 0x01
   11f0a:	90 e0       	ldi	r25, 0x00	; 0
   11f0c:	0e 94 5f 85 	call	0x10abe	; 0x10abe <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   11f10:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   11f14:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   11f18:	64 81       	ldd	r22, Z+4	; 0x04
   11f1a:	75 81       	ldd	r23, Z+5	; 0x05
   11f1c:	81 2f       	mov	r24, r17
   11f1e:	ec dd       	rcall	.-1064   	; 0x11af8 <Send_Identify>
   11f20:	1d c0       	rjmp	.+58     	; 0x11f5c <GPIB_SECONDARY_ADDRESS+0xea>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f22:	c9 01       	movw	r24, r18
   11f24:	84 72       	andi	r24, 0x24	; 36
   11f26:	99 27       	eor	r25, r25
   11f28:	00 97       	sbiw	r24, 0x00	; 0
   11f2a:	c1 f0       	breq	.+48     	; 0x11f5c <GPIB_SECONDARY_ADDRESS+0xea>
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   11f2c:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   11f30:	90 e0       	ldi	r25, 0x00	; 0
   11f32:	ed b7       	in	r30, 0x3d	; 61
   11f34:	fe b7       	in	r31, 0x3e	; 62
   11f36:	91 87       	std	Z+9, r25	; 0x09
   11f38:	80 87       	std	Z+8, r24	; 0x08
   11f3a:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   11f3e:	90 e0       	ldi	r25, 0x00	; 0
   11f40:	97 83       	std	Z+7, r25	; 0x07
   11f42:	86 83       	std	Z+6, r24	; 0x06
   11f44:	d5 83       	std	Z+5, r29	; 0x05
   11f46:	c4 83       	std	Z+4, r28	; 0x04
   11f48:	88 e4       	ldi	r24, 0x48	; 72
   11f4a:	92 e1       	ldi	r25, 0x12	; 18
   11f4c:	a0 e0       	ldi	r26, 0x00	; 0
   11f4e:	81 83       	std	Z+1, r24	; 0x01
   11f50:	92 83       	std	Z+2, r25	; 0x02
   11f52:	a3 83       	std	Z+3, r26	; 0x03
   11f54:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   11f58:	80 e0       	ldi	r24, 0x00	; 0
   11f5a:	90 e0       	ldi	r25, 0x00	; 0
}
   11f5c:	cd b7       	in	r28, 0x3d	; 61
   11f5e:	de b7       	in	r29, 0x3e	; 62
   11f60:	29 96       	adiw	r28, 0x09	; 9
   11f62:	e3 e0       	ldi	r30, 0x03	; 3
   11f64:	0c 94 69 e3 	jmp	0x1c6d2	; 0x1c6d2 <__epilogue_restores__+0x1e>

00011f68 <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   11f68:	00 d0       	rcall	.+0      	; 0x11f6a <listen_cleanup+0x2>
   11f6a:	1f 92       	push	r1
    if(listening_last)
   11f6c:	60 91 e7 1e 	lds	r22, 0x1EE7	; 0x801ee7 <listening_last>
   11f70:	66 23       	and	r22, r22
   11f72:	e1 f0       	breq	.+56     	; 0x11fac <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   11f74:	70 e0       	ldi	r23, 0x00	; 0
   11f76:	40 e2       	ldi	r20, 0x20	; 32
   11f78:	50 e0       	ldi	r21, 0x00	; 0
   11f7a:	84 e0       	ldi	r24, 0x04	; 4
   11f7c:	90 e0       	ldi	r25, 0x00	; 0
   11f7e:	9c d6       	rcall	.+3384   	; 0x12cb8 <find_device>
        if(index == -1)
   11f80:	01 96       	adiw	r24, 0x01	; 1
   11f82:	a1 f0       	breq	.+40     	; 0x11fac <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f84:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f88:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11f8c:	84 72       	andi	r24, 0x24	; 36
   11f8e:	99 27       	eor	r25, r25
   11f90:	89 2b       	or	r24, r25
   11f92:	51 f0       	breq	.+20     	; 0x11fa8 <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   11f94:	87 e3       	ldi	r24, 0x37	; 55
   11f96:	92 e1       	ldi	r25, 0x12	; 18
   11f98:	a0 e0       	ldi	r26, 0x00	; 0
   11f9a:	ed b7       	in	r30, 0x3d	; 61
   11f9c:	fe b7       	in	r31, 0x3e	; 62
   11f9e:	81 83       	std	Z+1, r24	; 0x01
   11fa0:	92 83       	std	Z+2, r25	; 0x02
   11fa2:	a3 83       	std	Z+3, r26	; 0x03
   11fa4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        printer_close();
   11fa8:	0e 94 cd bb 	call	0x1779a	; 0x1779a <printer_close>
    }
}
   11fac:	0f 90       	pop	r0
   11fae:	0f 90       	pop	r0
   11fb0:	0f 90       	pop	r0
   11fb2:	08 95       	ret

00011fb4 <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   11fb4:	cf 93       	push	r28
   11fb6:	df 93       	push	r29
   11fb8:	00 d0       	rcall	.+0      	; 0x11fba <GPIB_LISTEN+0x6>
   11fba:	00 d0       	rcall	.+0      	; 0x11fbc <GPIB_LISTEN+0x8>
   11fbc:	1f 92       	push	r1
   11fbe:	c8 2f       	mov	r28, r24
    listening_last = listening;
   11fc0:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   11fc4:	80 93 e7 1e 	sts	0x1EE7, r24	; 0x801ee7 <listening_last>
    listening = ch;
   11fc8:	c0 93 ed 1e 	sts	0x1EED, r28	; 0x801eed <listening>

    listen_cleanup();
   11fcc:	cd df       	rcall	.-102    	; 0x11f68 <listen_cleanup>

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   11fce:	cf 33       	cpi	r28, 0x3F	; 63
   11fd0:	19 f5       	brne	.+70     	; 0x12018 <GPIB_LISTEN+0x64>
    {
        listening = 0;
   11fd2:	10 92 ed 1e 	sts	0x1EED, r1	; 0x801eed <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11fd6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11fda:	82 ff       	sbrs	r24, 2
   11fdc:	74 c0       	rjmp	.+232    	; 0x120c6 <GPIB_LISTEN+0x112>
        {
            printf("[UNL]\n");
   11fde:	80 e3       	ldi	r24, 0x30	; 48
   11fe0:	93 e1       	ldi	r25, 0x13	; 19
   11fe2:	a0 e0       	ldi	r26, 0x00	; 0
   11fe4:	ed b7       	in	r30, 0x3d	; 61
   11fe6:	fe b7       	in	r31, 0x3e	; 62
   11fe8:	81 83       	std	Z+1, r24	; 0x01
   11fea:	92 83       	std	Z+2, r25	; 0x02
   11fec:	a3 83       	std	Z+3, r26	; 0x03
   11fee:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   11ff2:	80 91 e5 1c 	lds	r24, 0x1CE5	; 0x801ce5 <lastcmd>
   11ff6:	90 91 e6 1c 	lds	r25, 0x1CE6	; 0x801ce6 <lastcmd+0x1>
   11ffa:	8f 35       	cpi	r24, 0x5F	; 95
   11ffc:	91 05       	cpc	r25, r1
   11ffe:	09 f0       	breq	.+2      	; 0x12002 <GPIB_LISTEN+0x4e>
   12000:	62 c0       	rjmp	.+196    	; 0x120c6 <GPIB_LISTEN+0x112>
                printf("\n");
   12002:	8e e2       	ldi	r24, 0x2E	; 46
   12004:	93 e1       	ldi	r25, 0x13	; 19
   12006:	a0 e0       	ldi	r26, 0x00	; 0
   12008:	ed b7       	in	r30, 0x3d	; 61
   1200a:	fe b7       	in	r31, 0x3e	; 62
   1200c:	81 83       	std	Z+1, r24	; 0x01
   1200e:	92 83       	std	Z+2, r25	; 0x02
   12010:	a3 83       	std	Z+3, r26	; 0x03
   12012:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   12016:	57 c0       	rjmp	.+174    	; 0x120c6 <GPIB_LISTEN+0x112>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   12018:	d0 e0       	ldi	r29, 0x00	; 0
   1201a:	ce 01       	movw	r24, r28
   1201c:	9c db       	rcall	.-2248   	; 0x11756 <AMIGO_is_MLA>
   1201e:	89 2b       	or	r24, r25
   12020:	81 f0       	breq	.+32     	; 0x12042 <GPIB_LISTEN+0x8e>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12022:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12026:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1202a:	84 72       	andi	r24, 0x24	; 36
   1202c:	99 27       	eor	r25, r25
   1202e:	89 2b       	or	r24, r25
   12030:	09 f4       	brne	.+2      	; 0x12034 <GPIB_LISTEN+0x80>
   12032:	49 c0       	rjmp	.+146    	; 0x120c6 <GPIB_LISTEN+0x112>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   12034:	ed b7       	in	r30, 0x3d	; 61
   12036:	fe b7       	in	r31, 0x3e	; 62
   12038:	d5 83       	std	Z+5, r29	; 0x05
   1203a:	c4 83       	std	Z+4, r28	; 0x04
   1203c:	8c e1       	ldi	r24, 0x1C	; 28
   1203e:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   12040:	3c c0       	rjmp	.+120    	; 0x120ba <GPIB_LISTEN+0x106>
   12042:	ce 01       	movw	r24, r28
   12044:	55 db       	rcall	.-2390   	; 0x116f0 <SS80_is_MLA>
   12046:	89 2b       	or	r24, r25
   12048:	79 f0       	breq	.+30     	; 0x12068 <GPIB_LISTEN+0xb4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1204a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1204e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12052:	84 72       	andi	r24, 0x24	; 36
   12054:	99 27       	eor	r25, r25
   12056:	89 2b       	or	r24, r25
   12058:	b1 f1       	breq	.+108    	; 0x120c6 <GPIB_LISTEN+0x112>
            printf("[LA %02XH SS80]\n", 0xff & ch);
   1205a:	ed b7       	in	r30, 0x3d	; 61
   1205c:	fe b7       	in	r31, 0x3e	; 62
   1205e:	d5 83       	std	Z+5, r29	; 0x05
   12060:	c4 83       	std	Z+4, r28	; 0x04
   12062:	8b e0       	ldi	r24, 0x0B	; 11
   12064:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   12066:	29 c0       	rjmp	.+82     	; 0x120ba <GPIB_LISTEN+0x106>
   12068:	ce 01       	movw	r24, r28
   1206a:	a8 db       	rcall	.-2224   	; 0x117bc <PRINTER_is_MLA>
   1206c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12070:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12074:	89 2b       	or	r24, r25
   12076:	c9 f0       	breq	.+50     	; 0x120aa <GPIB_LISTEN+0xf6>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12078:	24 72       	andi	r18, 0x24	; 36
   1207a:	33 27       	eor	r19, r19
   1207c:	23 2b       	or	r18, r19
   1207e:	61 f0       	breq	.+24     	; 0x12098 <GPIB_LISTEN+0xe4>
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   12080:	ed b7       	in	r30, 0x3d	; 61
   12082:	fe b7       	in	r31, 0x3e	; 62
   12084:	d5 83       	std	Z+5, r29	; 0x05
   12086:	c4 83       	std	Z+4, r28	; 0x04
   12088:	87 ef       	ldi	r24, 0xF7	; 247
   1208a:	92 e1       	ldi	r25, 0x12	; 18
   1208c:	a0 e0       	ldi	r26, 0x00	; 0
   1208e:	81 83       	std	Z+1, r24	; 0x01
   12090:	92 83       	std	Z+2, r25	; 0x02
   12092:	a3 83       	std	Z+3, r26	; 0x03
   12094:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
        if(talking != UNT)
   12098:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   1209c:	8f 35       	cpi	r24, 0x5F	; 95
   1209e:	99 f0       	breq	.+38     	; 0x120c6 <GPIB_LISTEN+0x112>
        {
///@brief NULL creates a file named based on date and time
            printer_open(NULL);
   120a0:	80 e0       	ldi	r24, 0x00	; 0
   120a2:	90 e0       	ldi	r25, 0x00	; 0
   120a4:	0e 94 25 bc 	call	0x1784a	; 0x1784a <printer_open>
   120a8:	0e c0       	rjmp	.+28     	; 0x120c6 <GPIB_LISTEN+0x112>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   120aa:	22 ff       	sbrs	r18, 2
   120ac:	0c c0       	rjmp	.+24     	; 0x120c6 <GPIB_LISTEN+0x112>
        printf("[LA %02XH]\n", 0xff & ch);
   120ae:	ed b7       	in	r30, 0x3d	; 61
   120b0:	fe b7       	in	r31, 0x3e	; 62
   120b2:	d5 83       	std	Z+5, r29	; 0x05
   120b4:	c4 83       	std	Z+4, r28	; 0x04
   120b6:	8b ee       	ldi	r24, 0xEB	; 235
   120b8:	92 e1       	ldi	r25, 0x12	; 18
   120ba:	a0 e0       	ldi	r26, 0x00	; 0
   120bc:	81 83       	std	Z+1, r24	; 0x01
   120be:	92 83       	std	Z+2, r25	; 0x02
   120c0:	a3 83       	std	Z+3, r26	; 0x03
   120c2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   120c6:	80 e0       	ldi	r24, 0x00	; 0
   120c8:	90 e0       	ldi	r25, 0x00	; 0
   120ca:	cd b7       	in	r28, 0x3d	; 61
   120cc:	de b7       	in	r29, 0x3e	; 62
   120ce:	25 96       	adiw	r28, 0x05	; 5
   120d0:	e2 e0       	ldi	r30, 0x02	; 2
   120d2:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

000120d6 <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   120d6:	cf 93       	push	r28
   120d8:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   120da:	92 db       	rcall	.-2268   	; 0x11800 <gpib_init_devices>
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   120dc:	10 92 5e 19 	sts	0x195E, r1	; 0x80195e <gpib_log_fp+0x1>
   120e0:	10 92 5d 19 	sts	0x195D, r1	; 0x80195d <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   120e4:	80 e0       	ldi	r24, 0x00	; 0
   120e6:	90 e0       	ldi	r25, 0x00	; 0
   120e8:	45 d8       	rcall	.-3958   	; 0x11174 <gpib_read_byte>
   120ea:	ec 01       	movw	r28, r24

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   120ec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   120f0:	83 ff       	sbrs	r24, 3
            gpib_decode(val);
   120f2:	02 c0       	rjmp	.+4      	; 0x120f8 <gpib_task+0x22>
   120f4:	ce 01       	movw	r24, r28
   120f6:	56 d9       	rcall	.-3412   	; 0x113a4 <gpib_decode>
#endif
        status = gpib_error_test(val);
   120f8:	ce 01       	movw	r24, r28
   120fa:	1d dc       	rcall	.-1990   	; 0x11936 <gpib_error_test>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   120fc:	9c 01       	movw	r18, r24
   120fe:	23 70       	andi	r18, 0x03	; 3
   12100:	33 27       	eor	r19, r19
   12102:	23 2b       	or	r18, r19
   12104:	09 f0       	breq	.+2      	; 0x12108 <gpib_task+0x32>
   12106:	43 c0       	rjmp	.+134    	; 0x1218e <gpib_task+0xb8>
        {
            return;
        }
        else if(status)
   12108:	89 2b       	or	r24, r25
   1210a:	61 f7       	brne	.-40     	; 0x120e4 <gpib_task+0xe>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   1210c:	d2 ff       	sbrs	r29, 2
   1210e:	26 c0       	rjmp	.+76     	; 0x1215c <gpib_task+0x86>
        {
            ch = val & CMD_MASK;
   12110:	8c 2f       	mov	r24, r28
   12112:	8f 77       	andi	r24, 0x7F	; 127
            if(ch <= 0x1f)
   12114:	80 32       	cpi	r24, 0x20	; 32
            {
                GPIB(ch);
   12116:	10 f4       	brcc	.+4      	; 0x1211c <gpib_task+0x46>
   12118:	52 dd       	rcall	.-1372   	; 0x11bbe <GPIB>
                continue;
   1211a:	e4 cf       	rjmp	.-56     	; 0x120e4 <gpib_task+0xe>
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   1211c:	90 ee       	ldi	r25, 0xE0	; 224
   1211e:	98 0f       	add	r25, r24
   12120:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_LISTEN(ch);
   12122:	10 f4       	brcc	.+4      	; 0x12128 <gpib_task+0x52>
   12124:	47 df       	rcall	.-370    	; 0x11fb4 <GPIB_LISTEN>
                continue;
   12126:	de cf       	rjmp	.-68     	; 0x120e4 <gpib_task+0xe>
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   12128:	90 ec       	ldi	r25, 0xC0	; 192
   1212a:	98 0f       	add	r25, r24
   1212c:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_TALK(ch);
   1212e:	10 f4       	brcc	.+4      	; 0x12134 <gpib_task+0x5e>
   12130:	08 de       	rcall	.-1008   	; 0x11d42 <GPIB_TALK>
                continue;
   12132:	d8 cf       	rjmp	.-80     	; 0x120e4 <gpib_task+0xe>
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   12134:	90 91 ed 1e 	lds	r25, 0x1EED	; 0x801eed <listening>
   12138:	99 23       	and	r25, r25
   1213a:	59 f0       	breq	.+22     	; 0x12152 <gpib_task+0x7c>
   1213c:	20 91 e5 1c 	lds	r18, 0x1CE5	; 0x801ce5 <lastcmd>
   12140:	30 91 e6 1c 	lds	r19, 0x1CE6	; 0x801ce6 <lastcmd+0x1>
   12144:	2f 35       	cpi	r18, 0x5F	; 95
   12146:	31 05       	cpc	r19, r1
            {
                secondary = 0;
   12148:	21 f4       	brne	.+8      	; 0x12152 <gpib_task+0x7c>
   1214a:	10 92 ec 1e 	sts	0x1EEC, r1	; 0x801eec <secondary>
                GPIB_SECONDARY_ADDRESS(ch);
   1214e:	91 de       	rcall	.-734    	; 0x11e72 <GPIB_SECONDARY_ADDRESS>
                continue;
   12150:	c9 cf       	rjmp	.-110    	; 0x120e4 <gpib_task+0xe>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   12152:	80 93 ec 1e 	sts	0x1EEC, r24	; 0x801eec <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   12156:	60 e0       	ldi	r22, 0x00	; 0
   12158:	90 e0       	ldi	r25, 0x00	; 0
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   1215a:	12 c0       	rjmp	.+36     	; 0x12180 <gpib_task+0xaa>
   1215c:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   12160:	90 e0       	ldi	r25, 0x00	; 0
   12162:	2c db       	rcall	.-2472   	; 0x117bc <PRINTER_is_MLA>
   12164:	89 2b       	or	r24, r25
   12166:	29 f0       	breq	.+10     	; 0x12172 <gpib_task+0x9c>
            {
                printer_buffer( 0xff & val );
   12168:	ce 01       	movw	r24, r28
   1216a:	99 27       	eor	r25, r25
   1216c:	0e 94 c8 bc 	call	0x17990	; 0x17990 <printer_buffer>
                continue;
   12170:	b9 cf       	rjmp	.-142    	; 0x120e4 <gpib_task+0xe>
            }

            if(!secondary)
   12172:	80 91 ec 1e 	lds	r24, 0x1EEC	; 0x801eec <secondary>
   12176:	88 23       	and	r24, r24
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   12178:	09 f4       	brne	.+2      	; 0x1217c <gpib_task+0xa6>
   1217a:	b4 cf       	rjmp	.-152    	; 0x120e4 <gpib_task+0xe>
   1217c:	61 e0       	ldi	r22, 0x01	; 1
   1217e:	ce 01       	movw	r24, r28
            status = gpib_error_test(status);
   12180:	67 dc       	rcall	.-1842   	; 0x11a50 <GPIB_COMMANDS>
   12182:	d9 db       	rcall	.-2126   	; 0x11936 <gpib_error_test>

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   12184:	83 70       	andi	r24, 0x03	; 3
   12186:	99 27       	eor	r25, r25
   12188:	89 2b       	or	r24, r25
   1218a:	09 f4       	brne	.+2      	; 0x1218e <gpib_task+0xb8>
   1218c:	ab cf       	rjmp	.-170    	; 0x120e4 <gpib_task+0xe>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   1218e:	df 91       	pop	r29
   12190:	cf 91       	pop	r28
   12192:	08 95       	ret

00012194 <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   12194:	08 95       	ret

00012196 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   12196:	cf 93       	push	r28
   12198:	df 93       	push	r29
   1219a:	00 d0       	rcall	.+0      	; 0x1219c <gpib_help+0x6>
   1219c:	1f 92       	push	r1
   1219e:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   121a0:	81 ec       	ldi	r24, 0xC1	; 193
   121a2:	96 e1       	ldi	r25, 0x16	; 22
   121a4:	a0 e0       	ldi	r26, 0x00	; 0
   121a6:	ed b7       	in	r30, 0x3d	; 61
   121a8:	fe b7       	in	r31, 0x3e	; 62
   121aa:	81 83       	std	Z+1, r24	; 0x01
   121ac:	92 83       	std	Z+2, r25	; 0x02
   121ae:	a3 83       	std	Z+3, r26	; 0x03
   121b0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    if(full)
   121b4:	cd 2b       	or	r28, r29
   121b6:	51 f0       	breq	.+20     	; 0x121cc <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   121b8:	88 ef       	ldi	r24, 0xF8	; 248
   121ba:	94 e1       	ldi	r25, 0x14	; 20
   121bc:	a0 e0       	ldi	r26, 0x00	; 0
   121be:	ed b7       	in	r30, 0x3d	; 61
   121c0:	fe b7       	in	r31, 0x3e	; 62
   121c2:	81 83       	std	Z+1, r24	; 0x01
   121c4:	92 83       	std	Z+2, r25	; 0x02
   121c6:	a3 83       	std	Z+3, r26	; 0x03
   121c8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            "gpib ppr_set XX\n"
    #endif
            "\n"
            );
    }
}
   121cc:	cd b7       	in	r28, 0x3d	; 61
   121ce:	de b7       	in	r29, 0x3e	; 62
   121d0:	23 96       	adiw	r28, 0x03	; 3
   121d2:	e2 e0       	ldi	r30, 0x02	; 2
   121d4:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

000121d8 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   121d8:	a5 e0       	ldi	r26, 0x05	; 5
   121da:	b0 e0       	ldi	r27, 0x00	; 0
   121dc:	e2 ef       	ldi	r30, 0xF2	; 242
   121de:	f0 e9       	ldi	r31, 0x90	; 144
   121e0:	0c 94 46 e3 	jmp	0x1c68c	; 0x1c68c <__prologue_saves__+0x10>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   121e4:	fb 01       	movw	r30, r22
   121e6:	e0 80       	ld	r14, Z
   121e8:	f1 80       	ldd	r15, Z+1	; 0x01

    if(!ptr)
   121ea:	e1 14       	cp	r14, r1
   121ec:	f1 04       	cpc	r15, r1
   121ee:	19 f4       	brne	.+6      	; 0x121f6 <gpib_tests+0x1e>
        return(0);
   121f0:	80 e0       	ldi	r24, 0x00	; 0
   121f2:	90 e0       	ldi	r25, 0x00	; 0
   121f4:	de c0       	rjmp	.+444    	; 0x123b2 <gpib_tests+0x1da>
   121f6:	6b 01       	movw	r12, r22
   121f8:	5c 01       	movw	r10, r24

    if( MATCH(ptr,"gpib") )
   121fa:	63 eb       	ldi	r22, 0xB3	; 179
   121fc:	7d e0       	ldi	r23, 0x0D	; 13
   121fe:	c7 01       	movw	r24, r14
   12200:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
   12204:	89 2b       	or	r24, r25
   12206:	a1 f0       	breq	.+40     	; 0x12230 <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   12208:	f6 01       	movw	r30, r12
   1220a:	e2 80       	ldd	r14, Z+2	; 0x02
   1220c:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   1220e:	e1 14       	cp	r14, r1
   12210:	f1 04       	cpc	r15, r1
   12212:	21 f4       	brne	.+8      	; 0x1221c <gpib_tests+0x44>
        {
            gpib_help(1);
   12214:	81 e0       	ldi	r24, 0x01	; 1
   12216:	90 e0       	ldi	r25, 0x00	; 0
   12218:	be df       	rcall	.-132    	; 0x12196 <gpib_help>
   1221a:	c9 c0       	rjmp	.+402    	; 0x123ae <gpib_tests+0x1d6>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   1221c:	69 e7       	ldi	r22, 0x79	; 121
   1221e:	76 e1       	ldi	r23, 0x16	; 22
   12220:	c7 01       	movw	r24, r14
   12222:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
   12226:	89 2b       	or	r24, r25
   12228:	a9 f7       	brne	.-22     	; 0x12214 <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   1222a:	c2 e0       	ldi	r28, 0x02	; 2
   1222c:	d0 e0       	ldi	r29, 0x00	; 0
   1222e:	02 c0       	rjmp	.+4      	; 0x12234 <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   12230:	c1 e0       	ldi	r28, 0x01	; 1
   12232:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   12234:	68 eb       	ldi	r22, 0xB8	; 184
   12236:	7d e0       	ldi	r23, 0x0D	; 13
   12238:	c7 01       	movw	r24, r14
   1223a:	0e 94 50 30 	call	0x60a0	; 0x60a0 <MATCHI>
   1223e:	89 2b       	or	r24, r25
   12240:	29 f1       	breq	.+74     	; 0x1228c <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   12242:	fe 01       	movw	r30, r28
   12244:	ee 0f       	add	r30, r30
   12246:	ff 1f       	adc	r31, r31
   12248:	ec 0d       	add	r30, r12
   1224a:	fd 1d       	adc	r31, r13
        if(*ptr == '=')
   1224c:	01 90       	ld	r0, Z+
   1224e:	f0 81       	ld	r31, Z
   12250:	e0 2d       	mov	r30, r0
   12252:	80 81       	ld	r24, Z
   12254:	8d 33       	cpi	r24, 0x3D	; 61
   12256:	09 f4       	brne	.+2      	; 0x1225a <gpib_tests+0x82>
            ++ind;
   12258:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   1225a:	cc 0f       	add	r28, r28
   1225c:	dd 1f       	adc	r29, r29
   1225e:	cc 0d       	add	r28, r12
   12260:	dd 1d       	adc	r29, r13
   12262:	88 81       	ld	r24, Y
   12264:	99 81       	ldd	r25, Y+1	; 0x01
   12266:	0e 94 47 31 	call	0x628e	; 0x628e <get_value>
   1226a:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   1226e:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   12272:	ed b7       	in	r30, 0x3d	; 61
   12274:	fe b7       	in	r31, 0x3e	; 62
   12276:	75 83       	std	Z+5, r23	; 0x05
   12278:	64 83       	std	Z+4, r22	; 0x04
   1227a:	8b ee       	ldi	r24, 0xEB	; 235
   1227c:	94 e1       	ldi	r25, 0x14	; 20
   1227e:	a0 e0       	ldi	r26, 0x00	; 0
   12280:	81 83       	std	Z+1, r24	; 0x01
   12282:	92 83       	std	Z+2, r25	; 0x02
   12284:	a3 83       	std	Z+3, r26	; 0x03
   12286:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1228a:	91 c0       	rjmp	.+290    	; 0x123ae <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"mount") )
   1228c:	6e eb       	ldi	r22, 0xBE	; 190
   1228e:	7d e0       	ldi	r23, 0x0D	; 13
   12290:	c7 01       	movw	r24, r14
   12292:	0e 94 50 30 	call	0x60a0	; 0x60a0 <MATCHI>
   12296:	89 2b       	or	r24, r25
   12298:	29 f0       	breq	.+10     	; 0x122a4 <gpib_tests+0xcc>
    {
		mount(argc, argv);
   1229a:	b6 01       	movw	r22, r12
   1229c:	c5 01       	movw	r24, r10
   1229e:	0e 94 5e a0 	call	0x140bc	; 0x140bc <mount>
   122a2:	85 c0       	rjmp	.+266    	; 0x123ae <gpib_tests+0x1d6>
		return(1);
    }

    if (MATCHI(ptr,"addresses") )
   122a4:	64 ec       	ldi	r22, 0xC4	; 196
   122a6:	7d e0       	ldi	r23, 0x0D	; 13
   122a8:	c7 01       	movw	r24, r14
   122aa:	0e 94 50 30 	call	0x60a0	; 0x60a0 <MATCHI>
   122ae:	89 2b       	or	r24, r25
   122b0:	c9 f0       	breq	.+50     	; 0x122e4 <gpib_tests+0x10c>
    {
        ptr = argv[ind];
   122b2:	cc 0f       	add	r28, r28
   122b4:	dd 1f       	adc	r29, r29
   122b6:	cc 0d       	add	r28, r12
   122b8:	dd 1d       	adc	r29, r13
   122ba:	88 81       	ld	r24, Y
   122bc:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   122be:	00 97       	sbiw	r24, 0x00	; 0
   122c0:	69 f0       	breq	.+26     	; 0x122dc <gpib_tests+0x104>
   122c2:	fc 01       	movw	r30, r24
   122c4:	20 81       	ld	r18, Z
   122c6:	22 23       	and	r18, r18
   122c8:	49 f0       	breq	.+18     	; 0x122dc <gpib_tests+0x104>
   122ca:	6e ec       	ldi	r22, 0xCE	; 206
   122cc:	7d e0       	ldi	r23, 0x0D	; 13
   122ce:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
   122d2:	89 2b       	or	r24, r25
   122d4:	19 f0       	breq	.+6      	; 0x122dc <gpib_tests+0x104>
            display_Addresses(1);
   122d6:	81 e0       	ldi	r24, 0x01	; 1
   122d8:	90 e0       	ldi	r25, 0x00	; 0
   122da:	02 c0       	rjmp	.+4      	; 0x122e0 <gpib_tests+0x108>
        else
            display_Addresses(0);
   122dc:	80 e0       	ldi	r24, 0x00	; 0
   122de:	90 e0       	ldi	r25, 0x00	; 0
   122e0:	4a d1       	rcall	.+660    	; 0x12576 <display_Addresses>
   122e2:	65 c0       	rjmp	.+202    	; 0x123ae <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   122e4:	61 ed       	ldi	r22, 0xD1	; 209
   122e6:	7d e0       	ldi	r23, 0x0D	; 13
   122e8:	c7 01       	movw	r24, r14
   122ea:	0e 94 50 30 	call	0x60a0	; 0x60a0 <MATCHI>
   122ee:	89 2b       	or	r24, r25
   122f0:	c9 f0       	breq	.+50     	; 0x12324 <gpib_tests+0x14c>
    {
        ptr = argv[ind];
   122f2:	cc 0f       	add	r28, r28
   122f4:	dd 1f       	adc	r29, r29
   122f6:	cc 0d       	add	r28, r12
   122f8:	dd 1d       	adc	r29, r13
   122fa:	88 81       	ld	r24, Y
   122fc:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   122fe:	00 97       	sbiw	r24, 0x00	; 0
   12300:	69 f0       	breq	.+26     	; 0x1231c <gpib_tests+0x144>
   12302:	fc 01       	movw	r30, r24
   12304:	20 81       	ld	r18, Z
   12306:	22 23       	and	r18, r18
   12308:	49 f0       	breq	.+18     	; 0x1231c <gpib_tests+0x144>
   1230a:	6e ec       	ldi	r22, 0xCE	; 206
   1230c:	7d e0       	ldi	r23, 0x0D	; 13
   1230e:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
   12312:	89 2b       	or	r24, r25
   12314:	19 f0       	breq	.+6      	; 0x1231c <gpib_tests+0x144>
            display_Config(1);
   12316:	81 e0       	ldi	r24, 0x01	; 1
   12318:	90 e0       	ldi	r25, 0x00	; 0
   1231a:	02 c0       	rjmp	.+4      	; 0x12320 <gpib_tests+0x148>
        else
            display_Config(0);
   1231c:	80 e0       	ldi	r24, 0x00	; 0
   1231e:	90 e0       	ldi	r25, 0x00	; 0
   12320:	05 d2       	rcall	.+1034   	; 0x1272c <display_Config>
   12322:	45 c0       	rjmp	.+138    	; 0x123ae <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   12324:	68 ed       	ldi	r22, 0xD8	; 216
   12326:	7d e0       	ldi	r23, 0x0D	; 13
   12328:	c7 01       	movw	r24, r14
   1232a:	0e 94 50 30 	call	0x60a0	; 0x60a0 <MATCHI>
   1232e:	89 2b       	or	r24, r25
   12330:	19 f0       	breq	.+6      	; 0x12338 <gpib_tests+0x160>
    {
        gpib_timer_elapsed_begin();
   12332:	0e 94 4f 84 	call	0x1089e	; 0x1089e <gpib_timer_elapsed_begin>
   12336:	3b c0       	rjmp	.+118    	; 0x123ae <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   12338:	66 ee       	ldi	r22, 0xE6	; 230
   1233a:	7d e0       	ldi	r23, 0x0D	; 13
   1233c:	c7 01       	movw	r24, r14
   1233e:	0e 94 50 30 	call	0x60a0	; 0x60a0 <MATCHI>
   12342:	89 2b       	or	r24, r25
   12344:	29 f0       	breq	.+10     	; 0x12350 <gpib_tests+0x178>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   12346:	8e ee       	ldi	r24, 0xEE	; 238
   12348:	9d e0       	ldi	r25, 0x0D	; 13
   1234a:	0e 94 61 84 	call	0x108c2	; 0x108c2 <gpib_timer_elapsed_end>
   1234e:	2f c0       	rjmp	.+94     	; 0x123ae <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"task") )
   12350:	6c ef       	ldi	r22, 0xFC	; 252
   12352:	7d e0       	ldi	r23, 0x0D	; 13
   12354:	c7 01       	movw	r24, r14
   12356:	0e 94 50 30 	call	0x60a0	; 0x60a0 <MATCHI>
   1235a:	89 2b       	or	r24, r25
    {
        gpib_task();
   1235c:	11 f0       	breq	.+4      	; 0x12362 <gpib_tests+0x18a>
   1235e:	bb de       	rcall	.-650    	; 0x120d6 <gpib_task>
   12360:	26 c0       	rjmp	.+76     	; 0x123ae <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   12362:	8e 01       	movw	r16, r28
   12364:	0f 5f       	subi	r16, 0xFF	; 255
   12366:	1f 4f       	sbci	r17, 0xFF	; 255
   12368:	95 01       	movw	r18, r10
   1236a:	a8 01       	movw	r20, r16
   1236c:	61 e0       	ldi	r22, 0x01	; 1
   1236e:	7e e0       	ldi	r23, 0x0E	; 14
   12370:	c7 01       	movw	r24, r14
   12372:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
   12376:	89 2b       	or	r24, r25
   12378:	09 f4       	brne	.+2      	; 0x1237c <gpib_tests+0x1a4>
   1237a:	3a cf       	rjmp	.-396    	; 0x121f0 <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   1237c:	00 0f       	add	r16, r16
   1237e:	11 1f       	adc	r17, r17
   12380:	e6 01       	movw	r28, r12
   12382:	c0 0f       	add	r28, r16
   12384:	d1 1f       	adc	r29, r17
   12386:	88 81       	ld	r24, Y
   12388:	99 81       	ldd	r25, Y+1	; 0x01
   1238a:	00 97       	sbiw	r24, 0x00	; 0
   1238c:	51 f0       	breq	.+20     	; 0x123a2 <gpib_tests+0x1ca>
   1238e:	67 e0       	ldi	r22, 0x07	; 7
   12390:	7e e0       	ldi	r23, 0x0E	; 14
   12392:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   12396:	61 e0       	ldi	r22, 0x01	; 1
   12398:	70 e0       	ldi	r23, 0x00	; 0
   1239a:	89 2b       	or	r24, r25
   1239c:	21 f4       	brne	.+8      	; 0x123a6 <gpib_tests+0x1ce>
   1239e:	60 e0       	ldi	r22, 0x00	; 0
   123a0:	02 c0       	rjmp	.+4      	; 0x123a6 <gpib_tests+0x1ce>
   123a2:	60 e0       	ldi	r22, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   123a4:	70 e0       	ldi	r23, 0x00	; 0
   123a6:	22 97       	sbiw	r28, 0x02	; 2
   123a8:	88 81       	ld	r24, Y
   123aa:	99 81       	ldd	r25, Y+1	; 0x01
   123ac:	32 da       	rcall	.-2972   	; 0x11812 <gpib_trace_task>
        return(1);
   123ae:	81 e0       	ldi	r24, 0x01	; 1
   123b0:	90 e0       	ldi	r25, 0x00	; 0

    }                                             // port write
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   123b2:	cd b7       	in	r28, 0x3d	; 61
   123b4:	de b7       	in	r29, 0x3e	; 62
   123b6:	25 96       	adiw	r28, 0x05	; 5
   123b8:	ea e0       	ldi	r30, 0x0A	; 10
   123ba:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__epilogue_restores__+0x10>

000123be <tok_index>:
        }
    }
    if(bad)
        return(0);
    return(1);
}
   123be:	ef 92       	push	r14
   123c0:	ff 92       	push	r15
   123c2:	0f 93       	push	r16
   123c4:	1f 93       	push	r17
   123c6:	cf 93       	push	r28
   123c8:	df 93       	push	r29
   123ca:	7c 01       	movw	r14, r24
   123cc:	c4 ec       	ldi	r28, 0xC4	; 196
   123ce:	d1 e0       	ldi	r29, 0x01	; 1
   123d0:	00 e0       	ldi	r16, 0x00	; 0
   123d2:	10 e0       	ldi	r17, 0x00	; 0
   123d4:	8a 81       	ldd	r24, Y+2	; 0x02
   123d6:	9b 81       	ldd	r25, Y+3	; 0x03
   123d8:	8f 3f       	cpi	r24, 0xFF	; 255
   123da:	2f ef       	ldi	r18, 0xFF	; 255
   123dc:	92 07       	cpc	r25, r18
   123de:	61 f0       	breq	.+24     	; 0x123f8 <tok_index+0x3a>
   123e0:	68 81       	ld	r22, Y
   123e2:	79 81       	ldd	r23, Y+1	; 0x01
   123e4:	c7 01       	movw	r24, r14
   123e6:	0e 94 50 30 	call	0x60a0	; 0x60a0 <MATCHI>
   123ea:	24 96       	adiw	r28, 0x04	; 4
   123ec:	89 2b       	or	r24, r25
   123ee:	19 f4       	brne	.+6      	; 0x123f6 <tok_index+0x38>
   123f0:	0f 5f       	subi	r16, 0xFF	; 255
   123f2:	1f 4f       	sbci	r17, 0xFF	; 255
   123f4:	ef cf       	rjmp	.-34     	; 0x123d4 <tok_index+0x16>
   123f6:	c8 01       	movw	r24, r16
   123f8:	cd b7       	in	r28, 0x3d	; 61
   123fa:	de b7       	in	r29, 0x3e	; 62
   123fc:	e6 e0       	ldi	r30, 0x06	; 6
   123fe:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

00012402 <tok_name>:
   12402:	e4 ec       	ldi	r30, 0xC4	; 196
   12404:	f1 e0       	ldi	r31, 0x01	; 1
   12406:	20 e0       	ldi	r18, 0x00	; 0
   12408:	30 e0       	ldi	r19, 0x00	; 0
   1240a:	90 e0       	ldi	r25, 0x00	; 0
   1240c:	42 81       	ldd	r20, Z+2	; 0x02
   1240e:	53 81       	ldd	r21, Z+3	; 0x03
   12410:	4f 3f       	cpi	r20, 0xFF	; 255
   12412:	6f ef       	ldi	r22, 0xFF	; 255
   12414:	56 07       	cpc	r21, r22
   12416:	89 f0       	breq	.+34     	; 0x1243a <tok_name+0x38>
   12418:	34 96       	adiw	r30, 0x04	; 4
   1241a:	48 17       	cp	r20, r24
   1241c:	59 07       	cpc	r21, r25
   1241e:	51 f4       	brne	.+20     	; 0x12434 <tok_name+0x32>
   12420:	22 0f       	add	r18, r18
   12422:	33 1f       	adc	r19, r19
   12424:	22 0f       	add	r18, r18
   12426:	33 1f       	adc	r19, r19
   12428:	f9 01       	movw	r30, r18
   1242a:	ec 53       	subi	r30, 0x3C	; 60
   1242c:	fe 4f       	sbci	r31, 0xFE	; 254
   1242e:	80 81       	ld	r24, Z
   12430:	91 81       	ldd	r25, Z+1	; 0x01
   12432:	08 95       	ret
   12434:	2f 5f       	subi	r18, 0xFF	; 255
   12436:	3f 4f       	sbci	r19, 0xFF	; 255
   12438:	e9 cf       	rjmp	.-46     	; 0x1240c <tok_name+0xa>
   1243a:	8d e2       	ldi	r24, 0x2D	; 45
   1243c:	9c e0       	ldi	r25, 0x0C	; 12
   1243e:	08 95       	ret

00012440 <print_tok_val>:
   12440:	cf 92       	push	r12
   12442:	df 92       	push	r13
   12444:	ef 92       	push	r14
   12446:	ff 92       	push	r15
   12448:	0f 93       	push	r16
   1244a:	1f 93       	push	r17
   1244c:	cf 93       	push	r28
   1244e:	ad b7       	in	r26, 0x3d	; 61
   12450:	be b7       	in	r27, 0x3e	; 62
   12452:	1d 97       	sbiw	r26, 0x0d	; 13
   12454:	0f b6       	in	r0, 0x3f	; 63
   12456:	f8 94       	cli
   12458:	be bf       	out	0x3e, r27	; 62
   1245a:	0f be       	out	0x3f, r0	; 63
   1245c:	ad bf       	out	0x3d, r26	; 61
   1245e:	c6 2f       	mov	r28, r22
   12460:	69 01       	movw	r12, r18
   12462:	7a 01       	movw	r14, r20
   12464:	ce df       	rcall	.-100    	; 0x12402 <tok_name>
   12466:	8c 01       	movw	r16, r24
   12468:	cc 23       	and	r28, r28
   1246a:	31 f0       	breq	.+12     	; 0x12478 <print_tok_val+0x38>
   1246c:	80 e2       	ldi	r24, 0x20	; 32
   1246e:	90 e0       	ldi	r25, 0x00	; 0
   12470:	0e 94 3d 75 	call	0xea7a	; 0xea7a <putchar>
   12474:	c1 50       	subi	r28, 0x01	; 1
   12476:	f8 cf       	rjmp	.-16     	; 0x12468 <print_tok_val+0x28>
   12478:	ed b7       	in	r30, 0x3d	; 61
   1247a:	fe b7       	in	r31, 0x3e	; 62
   1247c:	c2 86       	std	Z+10, r12	; 0x0a
   1247e:	d3 86       	std	Z+11, r13	; 0x0b
   12480:	e4 86       	std	Z+12, r14	; 0x0c
   12482:	f5 86       	std	Z+13, r15	; 0x0d
   12484:	c6 82       	std	Z+6, r12	; 0x06
   12486:	d7 82       	std	Z+7, r13	; 0x07
   12488:	e0 86       	std	Z+8, r14	; 0x08
   1248a:	f1 86       	std	Z+9, r15	; 0x09
   1248c:	15 83       	std	Z+5, r17	; 0x05
   1248e:	04 83       	std	Z+4, r16	; 0x04
   12490:	8e e9       	ldi	r24, 0x9E	; 158
   12492:	9d e1       	ldi	r25, 0x1D	; 29
   12494:	a0 e0       	ldi	r26, 0x00	; 0
   12496:	81 83       	std	Z+1, r24	; 0x01
   12498:	92 83       	std	Z+2, r25	; 0x02
   1249a:	a3 83       	std	Z+3, r26	; 0x03
   1249c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   124a0:	ad b7       	in	r26, 0x3d	; 61
   124a2:	be b7       	in	r27, 0x3e	; 62
   124a4:	1d 96       	adiw	r26, 0x0d	; 13
   124a6:	0f b6       	in	r0, 0x3f	; 63
   124a8:	f8 94       	cli
   124aa:	be bf       	out	0x3e, r27	; 62
   124ac:	0f be       	out	0x3f, r0	; 63
   124ae:	ad bf       	out	0x3d, r26	; 61
   124b0:	cf 91       	pop	r28
   124b2:	1f 91       	pop	r17
   124b4:	0f 91       	pop	r16
   124b6:	ff 90       	pop	r15
   124b8:	ef 90       	pop	r14
   124ba:	df 90       	pop	r13
   124bc:	cf 90       	pop	r12
   124be:	08 95       	ret

000124c0 <print_tok_str>:
   124c0:	ef 92       	push	r14
   124c2:	ff 92       	push	r15
   124c4:	0f 93       	push	r16
   124c6:	1f 93       	push	r17
   124c8:	cf 93       	push	r28
   124ca:	ad b7       	in	r26, 0x3d	; 61
   124cc:	be b7       	in	r27, 0x3e	; 62
   124ce:	17 97       	sbiw	r26, 0x07	; 7
   124d0:	0f b6       	in	r0, 0x3f	; 63
   124d2:	f8 94       	cli
   124d4:	be bf       	out	0x3e, r27	; 62
   124d6:	0f be       	out	0x3f, r0	; 63
   124d8:	ad bf       	out	0x3d, r26	; 61
   124da:	c6 2f       	mov	r28, r22
   124dc:	7a 01       	movw	r14, r20
   124de:	91 df       	rcall	.-222    	; 0x12402 <tok_name>
   124e0:	8c 01       	movw	r16, r24
   124e2:	cc 23       	and	r28, r28
   124e4:	31 f0       	breq	.+12     	; 0x124f2 <print_tok_str+0x32>
   124e6:	80 e2       	ldi	r24, 0x20	; 32
   124e8:	90 e0       	ldi	r25, 0x00	; 0
   124ea:	0e 94 3d 75 	call	0xea7a	; 0xea7a <putchar>
   124ee:	c1 50       	subi	r28, 0x01	; 1
   124f0:	f8 cf       	rjmp	.-16     	; 0x124e2 <print_tok_str+0x22>
   124f2:	ed b7       	in	r30, 0x3d	; 61
   124f4:	fe b7       	in	r31, 0x3e	; 62
   124f6:	f7 82       	std	Z+7, r15	; 0x07
   124f8:	e6 82       	std	Z+6, r14	; 0x06
   124fa:	15 83       	std	Z+5, r17	; 0x05
   124fc:	04 83       	std	Z+4, r16	; 0x04
   124fe:	82 e9       	ldi	r24, 0x92	; 146
   12500:	9d e1       	ldi	r25, 0x1D	; 29
   12502:	a0 e0       	ldi	r26, 0x00	; 0
   12504:	81 83       	std	Z+1, r24	; 0x01
   12506:	92 83       	std	Z+2, r25	; 0x02
   12508:	a3 83       	std	Z+3, r26	; 0x03
   1250a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1250e:	ad b7       	in	r26, 0x3d	; 61
   12510:	be b7       	in	r27, 0x3e	; 62
   12512:	17 96       	adiw	r26, 0x07	; 7
   12514:	0f b6       	in	r0, 0x3f	; 63
   12516:	f8 94       	cli
   12518:	be bf       	out	0x3e, r27	; 62
   1251a:	0f be       	out	0x3f, r0	; 63
   1251c:	ad bf       	out	0x3d, r26	; 61
   1251e:	cf 91       	pop	r28
   12520:	1f 91       	pop	r17
   12522:	0f 91       	pop	r16
   12524:	ff 90       	pop	r15
   12526:	ef 90       	pop	r14
   12528:	08 95       	ret

0001252a <print_tok>:
   1252a:	0f 93       	push	r16
   1252c:	1f 93       	push	r17
   1252e:	cf 93       	push	r28
   12530:	00 d0       	rcall	.+0      	; 0x12532 <print_tok+0x8>
   12532:	00 d0       	rcall	.+0      	; 0x12534 <print_tok+0xa>
   12534:	1f 92       	push	r1
   12536:	c6 2f       	mov	r28, r22
   12538:	64 df       	rcall	.-312    	; 0x12402 <tok_name>
   1253a:	8c 01       	movw	r16, r24
   1253c:	cc 23       	and	r28, r28
   1253e:	31 f0       	breq	.+12     	; 0x1254c <print_tok+0x22>
   12540:	80 e2       	ldi	r24, 0x20	; 32
   12542:	90 e0       	ldi	r25, 0x00	; 0
   12544:	0e 94 3d 75 	call	0xea7a	; 0xea7a <putchar>
   12548:	c1 50       	subi	r28, 0x01	; 1
   1254a:	f8 cf       	rjmp	.-16     	; 0x1253c <print_tok+0x12>
   1254c:	ed b7       	in	r30, 0x3d	; 61
   1254e:	fe b7       	in	r31, 0x3e	; 62
   12550:	15 83       	std	Z+5, r17	; 0x05
   12552:	04 83       	std	Z+4, r16	; 0x04
   12554:	8e e8       	ldi	r24, 0x8E	; 142
   12556:	9d e1       	ldi	r25, 0x1D	; 29
   12558:	a0 e0       	ldi	r26, 0x00	; 0
   1255a:	81 83       	std	Z+1, r24	; 0x01
   1255c:	92 83       	std	Z+2, r25	; 0x02
   1255e:	a3 83       	std	Z+3, r26	; 0x03
   12560:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   12564:	0f 90       	pop	r0
   12566:	0f 90       	pop	r0
   12568:	0f 90       	pop	r0
   1256a:	0f 90       	pop	r0
   1256c:	0f 90       	pop	r0
   1256e:	cf 91       	pop	r28
   12570:	1f 91       	pop	r17
   12572:	0f 91       	pop	r16
   12574:	08 95       	ret

00012576 <display_Addresses>:
   12576:	2f 92       	push	r2
   12578:	3f 92       	push	r3
   1257a:	4f 92       	push	r4
   1257c:	6f 92       	push	r6
   1257e:	7f 92       	push	r7
   12580:	8f 92       	push	r8
   12582:	cf 92       	push	r12
   12584:	df 92       	push	r13
   12586:	ef 92       	push	r14
   12588:	cf 93       	push	r28
   1258a:	df 93       	push	r29
   1258c:	cd b7       	in	r28, 0x3d	; 61
   1258e:	de b7       	in	r29, 0x3e	; 62
   12590:	2a 97       	sbiw	r28, 0x0a	; 10
   12592:	0f b6       	in	r0, 0x3f	; 63
   12594:	f8 94       	cli
   12596:	de bf       	out	0x3e, r29	; 62
   12598:	0f be       	out	0x3f, r0	; 63
   1259a:	cd bf       	out	0x3d, r28	; 61
   1259c:	88 e5       	ldi	r24, 0x58	; 88
   1259e:	9a e1       	ldi	r25, 0x1A	; 26
   125a0:	a0 e0       	ldi	r26, 0x00	; 0
   125a2:	ed b7       	in	r30, 0x3d	; 61
   125a4:	fe b7       	in	r31, 0x3e	; 62
   125a6:	81 83       	std	Z+1, r24	; 0x01
   125a8:	92 83       	std	Z+2, r25	; 0x02
   125aa:	a3 83       	std	Z+3, r26	; 0x03
   125ac:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   125b0:	21 ef       	ldi	r18, 0xF1	; 241
   125b2:	3e e1       	ldi	r19, 0x1E	; 30
   125b4:	3a 87       	std	Y+10, r19	; 0x0a
   125b6:	29 87       	std	Y+9, r18	; 0x09
   125b8:	8a e3       	ldi	r24, 0x3A	; 58
   125ba:	9a e1       	ldi	r25, 0x1A	; 26
   125bc:	6c 01       	movw	r12, r24
   125be:	e1 2c       	mov	r14, r1
   125c0:	8c e3       	ldi	r24, 0x3C	; 60
   125c2:	9a e1       	ldi	r25, 0x1A	; 26
   125c4:	3c 01       	movw	r6, r24
   125c6:	81 2c       	mov	r8, r1
   125c8:	85 e4       	ldi	r24, 0x45	; 69
   125ca:	9a e1       	ldi	r25, 0x1A	; 26
   125cc:	1c 01       	movw	r2, r24
   125ce:	41 2c       	mov	r4, r1
   125d0:	8f e4       	ldi	r24, 0x4F	; 79
   125d2:	9a e1       	ldi	r25, 0x1A	; 26
   125d4:	9c 01       	movw	r18, r24
   125d6:	40 e0       	ldi	r20, 0x00	; 0
   125d8:	2e 83       	std	Y+6, r18	; 0x06
   125da:	3f 83       	std	Y+7, r19	; 0x07
   125dc:	48 87       	std	Y+8, r20	; 0x08
   125de:	e9 85       	ldd	r30, Y+9	; 0x09
   125e0:	fa 85       	ldd	r31, Y+10	; 0x0a
   125e2:	80 81       	ld	r24, Z
   125e4:	88 23       	and	r24, r24
   125e6:	09 f4       	brne	.+2      	; 0x125ea <display_Addresses+0x74>
   125e8:	7b c0       	rjmp	.+246    	; 0x126e0 <display_Addresses+0x16a>
   125ea:	83 30       	cpi	r24, 0x03	; 3
   125ec:	21 f0       	breq	.+8      	; 0x125f6 <display_Addresses+0x80>
   125ee:	81 30       	cpi	r24, 0x01	; 1
   125f0:	09 f0       	breq	.+2      	; 0x125f4 <display_Addresses+0x7e>
   125f2:	5a c0       	rjmp	.+180    	; 0x126a8 <display_Addresses+0x132>
   125f4:	1f c0       	rjmp	.+62     	; 0x12634 <display_Addresses+0xbe>
   125f6:	e9 85       	ldd	r30, Y+9	; 0x09
   125f8:	fa 85       	ldd	r31, Y+10	; 0x0a
   125fa:	87 a1       	ldd	r24, Z+39	; 0x27
   125fc:	90 a5       	ldd	r25, Z+40	; 0x28
   125fe:	90 93 66 19 	sts	0x1966, r25	; 0x801966 <SS80p+0x1>
   12602:	80 93 65 19 	sts	0x1965, r24	; 0x801965 <SS80p>
   12606:	cf 01       	movw	r24, r30
   12608:	07 96       	adiw	r24, 0x07	; 7
   1260a:	ed b7       	in	r30, 0x3d	; 61
   1260c:	fe b7       	in	r31, 0x3e	; 62
   1260e:	95 83       	std	Z+5, r25	; 0x05
   12610:	84 83       	std	Z+4, r24	; 0x04
   12612:	2e 81       	ldd	r18, Y+6	; 0x06
   12614:	3f 81       	ldd	r19, Y+7	; 0x07
   12616:	48 85       	ldd	r20, Y+8	; 0x08
   12618:	21 83       	std	Z+1, r18	; 0x01
   1261a:	32 83       	std	Z+2, r19	; 0x02
   1261c:	43 83       	std	Z+3, r20	; 0x03
   1261e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   12622:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   12626:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   1262a:	42 81       	ldd	r20, Z+2	; 0x02
   1262c:	53 81       	ldd	r21, Z+3	; 0x03
   1262e:	64 e0       	ldi	r22, 0x04	; 4
   12630:	82 e1       	ldi	r24, 0x12	; 18
   12632:	46 df       	rcall	.-372    	; 0x124c0 <print_tok_str>
   12634:	e9 85       	ldd	r30, Y+9	; 0x09
   12636:	fa 85       	ldd	r31, Y+10	; 0x0a
   12638:	80 81       	ld	r24, Z
   1263a:	81 30       	cpi	r24, 0x01	; 1
   1263c:	d1 f4       	brne	.+52     	; 0x12672 <display_Addresses+0xfc>
   1263e:	87 a1       	ldd	r24, Z+39	; 0x27
   12640:	90 a5       	ldd	r25, Z+40	; 0x28
   12642:	90 93 62 19 	sts	0x1962, r25	; 0x801962 <AMIGOp+0x1>
   12646:	80 93 61 19 	sts	0x1961, r24	; 0x801961 <AMIGOp>
   1264a:	cf 01       	movw	r24, r30
   1264c:	07 96       	adiw	r24, 0x07	; 7
   1264e:	ed b7       	in	r30, 0x3d	; 61
   12650:	fe b7       	in	r31, 0x3e	; 62
   12652:	95 83       	std	Z+5, r25	; 0x05
   12654:	84 83       	std	Z+4, r24	; 0x04
   12656:	21 82       	std	Z+1, r2	; 0x01
   12658:	32 82       	std	Z+2, r3	; 0x02
   1265a:	43 82       	std	Z+3, r4	; 0x03
   1265c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   12660:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   12664:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   12668:	42 81       	ldd	r20, Z+2	; 0x02
   1266a:	53 81       	ldd	r21, Z+3	; 0x03
   1266c:	64 e0       	ldi	r22, 0x04	; 4
   1266e:	82 e1       	ldi	r24, 0x12	; 18
   12670:	27 df       	rcall	.-434    	; 0x124c0 <print_tok_str>
   12672:	e9 85       	ldd	r30, Y+9	; 0x09
   12674:	fa 85       	ldd	r31, Y+10	; 0x0a
   12676:	21 81       	ldd	r18, Z+1	; 0x01
   12678:	30 e0       	ldi	r19, 0x00	; 0
   1267a:	40 e0       	ldi	r20, 0x00	; 0
   1267c:	50 e0       	ldi	r21, 0x00	; 0
   1267e:	64 e0       	ldi	r22, 0x04	; 4
   12680:	81 e0       	ldi	r24, 0x01	; 1
   12682:	de de       	rcall	.-580    	; 0x12440 <print_tok_val>
   12684:	e9 85       	ldd	r30, Y+9	; 0x09
   12686:	fa 85       	ldd	r31, Y+10	; 0x0a
   12688:	22 81       	ldd	r18, Z+2	; 0x02
   1268a:	30 e0       	ldi	r19, 0x00	; 0
   1268c:	40 e0       	ldi	r20, 0x00	; 0
   1268e:	50 e0       	ldi	r21, 0x00	; 0
   12690:	64 e0       	ldi	r22, 0x04	; 4
   12692:	8f e1       	ldi	r24, 0x1F	; 31
   12694:	d5 de       	rcall	.-598    	; 0x12440 <print_tok_val>
   12696:	e9 85       	ldd	r30, Y+9	; 0x09
   12698:	fa 85       	ldd	r31, Y+10	; 0x0a
   1269a:	23 81       	ldd	r18, Z+3	; 0x03
   1269c:	34 81       	ldd	r19, Z+4	; 0x04
   1269e:	45 81       	ldd	r20, Z+5	; 0x05
   126a0:	56 81       	ldd	r21, Z+6	; 0x06
   126a2:	64 e0       	ldi	r22, 0x04	; 4
   126a4:	83 e0       	ldi	r24, 0x03	; 3
   126a6:	cc de       	rcall	.-616    	; 0x12440 <print_tok_val>
   126a8:	e9 85       	ldd	r30, Y+9	; 0x09
   126aa:	fa 85       	ldd	r31, Y+10	; 0x0a
   126ac:	80 81       	ld	r24, Z
   126ae:	84 30       	cpi	r24, 0x04	; 4
   126b0:	81 f4       	brne	.+32     	; 0x126d2 <display_Addresses+0x15c>
   126b2:	ed b7       	in	r30, 0x3d	; 61
   126b4:	fe b7       	in	r31, 0x3e	; 62
   126b6:	61 82       	std	Z+1, r6	; 0x01
   126b8:	72 82       	std	Z+2, r7	; 0x02
   126ba:	83 82       	std	Z+3, r8	; 0x03
   126bc:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   126c0:	e9 85       	ldd	r30, Y+9	; 0x09
   126c2:	fa 85       	ldd	r31, Y+10	; 0x0a
   126c4:	21 81       	ldd	r18, Z+1	; 0x01
   126c6:	30 e0       	ldi	r19, 0x00	; 0
   126c8:	40 e0       	ldi	r20, 0x00	; 0
   126ca:	50 e0       	ldi	r21, 0x00	; 0
   126cc:	64 e0       	ldi	r22, 0x04	; 4
   126ce:	81 e0       	ldi	r24, 0x01	; 1
   126d0:	b7 de       	rcall	.-658    	; 0x12440 <print_tok_val>
   126d2:	ed b7       	in	r30, 0x3d	; 61
   126d4:	fe b7       	in	r31, 0x3e	; 62
   126d6:	c1 82       	std	Z+1, r12	; 0x01
   126d8:	d2 82       	std	Z+2, r13	; 0x02
   126da:	e3 82       	std	Z+3, r14	; 0x03
   126dc:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   126e0:	29 85       	ldd	r18, Y+9	; 0x09
   126e2:	3a 85       	ldd	r19, Y+10	; 0x0a
   126e4:	25 5d       	subi	r18, 0xD5	; 213
   126e6:	3f 4f       	sbci	r19, 0xFF	; 255
   126e8:	3a 87       	std	Y+10, r19	; 0x0a
   126ea:	29 87       	std	Y+9, r18	; 0x09
   126ec:	25 5f       	subi	r18, 0xF5	; 245
   126ee:	30 42       	sbci	r19, 0x20	; 32
   126f0:	09 f0       	breq	.+2      	; 0x126f4 <display_Addresses+0x17e>
   126f2:	75 cf       	rjmp	.-278    	; 0x125de <display_Addresses+0x68>
   126f4:	88 e3       	ldi	r24, 0x38	; 56
   126f6:	9a e1       	ldi	r25, 0x1A	; 26
   126f8:	a0 e0       	ldi	r26, 0x00	; 0
   126fa:	ed b7       	in	r30, 0x3d	; 61
   126fc:	fe b7       	in	r31, 0x3e	; 62
   126fe:	81 83       	std	Z+1, r24	; 0x01
   12700:	92 83       	std	Z+2, r25	; 0x02
   12702:	a3 83       	std	Z+3, r26	; 0x03
   12704:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   12708:	2a 96       	adiw	r28, 0x0a	; 10
   1270a:	0f b6       	in	r0, 0x3f	; 63
   1270c:	f8 94       	cli
   1270e:	de bf       	out	0x3e, r29	; 62
   12710:	0f be       	out	0x3f, r0	; 63
   12712:	cd bf       	out	0x3d, r28	; 61
   12714:	df 91       	pop	r29
   12716:	cf 91       	pop	r28
   12718:	ef 90       	pop	r14
   1271a:	df 90       	pop	r13
   1271c:	cf 90       	pop	r12
   1271e:	8f 90       	pop	r8
   12720:	7f 90       	pop	r7
   12722:	6f 90       	pop	r6
   12724:	4f 90       	pop	r4
   12726:	3f 90       	pop	r3
   12728:	2f 90       	pop	r2
   1272a:	08 95       	ret

0001272c <display_Config>:
   1272c:	2f 92       	push	r2
   1272e:	3f 92       	push	r3
   12730:	4f 92       	push	r4
   12732:	6f 92       	push	r6
   12734:	7f 92       	push	r7
   12736:	8f 92       	push	r8
   12738:	af 92       	push	r10
   1273a:	bf 92       	push	r11
   1273c:	cf 92       	push	r12
   1273e:	df 92       	push	r13
   12740:	ef 92       	push	r14
   12742:	0f 93       	push	r16
   12744:	1f 93       	push	r17
   12746:	cf 93       	push	r28
   12748:	df 93       	push	r29
   1274a:	cd b7       	in	r28, 0x3d	; 61
   1274c:	de b7       	in	r29, 0x3e	; 62
   1274e:	62 97       	sbiw	r28, 0x12	; 18
   12750:	0f b6       	in	r0, 0x3f	; 63
   12752:	f8 94       	cli
   12754:	de bf       	out	0x3e, r29	; 62
   12756:	0f be       	out	0x3f, r0	; 63
   12758:	cd bf       	out	0x3d, r28	; 61
   1275a:	5c 01       	movw	r10, r24
   1275c:	88 e1       	ldi	r24, 0x18	; 24
   1275e:	9a e1       	ldi	r25, 0x1A	; 26
   12760:	a0 e0       	ldi	r26, 0x00	; 0
   12762:	ed b7       	in	r30, 0x3d	; 61
   12764:	fe b7       	in	r31, 0x3e	; 62
   12766:	81 83       	std	Z+1, r24	; 0x01
   12768:	92 83       	std	Z+2, r25	; 0x02
   1276a:	a3 83       	std	Z+3, r26	; 0x03
   1276c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   12770:	01 ef       	ldi	r16, 0xF1	; 241
   12772:	1e e1       	ldi	r17, 0x1E	; 30
   12774:	8d e9       	ldi	r24, 0x9D	; 157
   12776:	99 e1       	ldi	r25, 0x19	; 25
   12778:	9c 01       	movw	r18, r24
   1277a:	40 e0       	ldi	r20, 0x00	; 0
   1277c:	28 87       	std	Y+8, r18	; 0x08
   1277e:	39 87       	std	Y+9, r19	; 0x09
   12780:	4a 87       	std	Y+10, r20	; 0x0a
   12782:	82 ed       	ldi	r24, 0xD2	; 210
   12784:	99 e1       	ldi	r25, 0x19	; 25
   12786:	9c 01       	movw	r18, r24
   12788:	40 e0       	ldi	r20, 0x00	; 0
   1278a:	2b 87       	std	Y+11, r18	; 0x0b
   1278c:	3c 87       	std	Y+12, r19	; 0x0c
   1278e:	4d 87       	std	Y+13, r20	; 0x0d
   12790:	83 eb       	ldi	r24, 0xB3	; 179
   12792:	99 e1       	ldi	r25, 0x19	; 25
   12794:	9c 01       	movw	r18, r24
   12796:	40 e0       	ldi	r20, 0x00	; 0
   12798:	2e 87       	std	Y+14, r18	; 0x0e
   1279a:	3f 87       	std	Y+15, r19	; 0x0f
   1279c:	48 8b       	std	Y+16, r20	; 0x10
   1279e:	8f e9       	ldi	r24, 0x9F	; 159
   127a0:	99 e1       	ldi	r25, 0x19	; 25
   127a2:	1c 01       	movw	r2, r24
   127a4:	41 2c       	mov	r4, r1
   127a6:	8f e0       	ldi	r24, 0x0F	; 15
   127a8:	9a e1       	ldi	r25, 0x1A	; 26
   127aa:	6c 01       	movw	r12, r24
   127ac:	e1 2c       	mov	r14, r1
   127ae:	80 ef       	ldi	r24, 0xF0	; 240
   127b0:	99 e1       	ldi	r25, 0x19	; 25
   127b2:	3c 01       	movw	r6, r24
   127b4:	81 2c       	mov	r8, r1
   127b6:	f8 01       	movw	r30, r16
   127b8:	80 81       	ld	r24, Z
   127ba:	88 23       	and	r24, r24
   127bc:	09 f4       	brne	.+2      	; 0x127c0 <display_Config+0x94>
   127be:	14 c2       	rjmp	.+1064   	; 0x12be8 <display_Config+0x4bc>
   127c0:	83 30       	cpi	r24, 0x03	; 3
   127c2:	09 f0       	breq	.+2      	; 0x127c6 <display_Config+0x9a>
   127c4:	38 c1       	rjmp	.+624    	; 0x12a36 <display_Config+0x30a>
   127c6:	27 a1       	ldd	r18, Z+39	; 0x27
   127c8:	30 a5       	ldd	r19, Z+40	; 0x28
   127ca:	3a 8b       	std	Y+18, r19	; 0x12
   127cc:	29 8b       	std	Y+17, r18	; 0x11
   127ce:	c8 01       	movw	r24, r16
   127d0:	07 96       	adiw	r24, 0x07	; 7
   127d2:	ed b7       	in	r30, 0x3d	; 61
   127d4:	fe b7       	in	r31, 0x3e	; 62
   127d6:	95 83       	std	Z+5, r25	; 0x05
   127d8:	84 83       	std	Z+4, r24	; 0x04
   127da:	c1 82       	std	Z+1, r12	; 0x01
   127dc:	d2 82       	std	Z+2, r13	; 0x02
   127de:	e3 82       	std	Z+3, r14	; 0x03
   127e0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   127e4:	e9 89       	ldd	r30, Y+17	; 0x11
   127e6:	fa 89       	ldd	r31, Y+18	; 0x12
   127e8:	80 81       	ld	r24, Z
   127ea:	90 e0       	ldi	r25, 0x00	; 0
   127ec:	ed b7       	in	r30, 0x3d	; 61
   127ee:	fe b7       	in	r31, 0x3e	; 62
   127f0:	95 83       	std	Z+5, r25	; 0x05
   127f2:	84 83       	std	Z+4, r24	; 0x04
   127f4:	61 82       	std	Z+1, r6	; 0x01
   127f6:	72 82       	std	Z+2, r7	; 0x02
   127f8:	83 82       	std	Z+3, r8	; 0x03
   127fa:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   127fe:	64 e0       	ldi	r22, 0x04	; 4
   12800:	89 e0       	ldi	r24, 0x09	; 9
   12802:	93 de       	rcall	.-730    	; 0x1252a <print_tok>
   12804:	e9 89       	ldd	r30, Y+17	; 0x11
   12806:	fa 89       	ldd	r31, Y+18	; 0x12
   12808:	20 81       	ld	r18, Z
   1280a:	30 e0       	ldi	r19, 0x00	; 0
   1280c:	40 e0       	ldi	r20, 0x00	; 0
   1280e:	50 e0       	ldi	r21, 0x00	; 0
   12810:	68 e0       	ldi	r22, 0x08	; 8
   12812:	81 e0       	ldi	r24, 0x01	; 1
   12814:	15 de       	rcall	.-982    	; 0x12440 <print_tok_val>
   12816:	e9 89       	ldd	r30, Y+17	; 0x11
   12818:	fa 89       	ldd	r31, Y+18	; 0x12
   1281a:	21 81       	ldd	r18, Z+1	; 0x01
   1281c:	30 e0       	ldi	r19, 0x00	; 0
   1281e:	40 e0       	ldi	r20, 0x00	; 0
   12820:	50 e0       	ldi	r21, 0x00	; 0
   12822:	68 e0       	ldi	r22, 0x08	; 8
   12824:	8f e1       	ldi	r24, 0x1F	; 31
   12826:	0c de       	rcall	.-1000   	; 0x12440 <print_tok_val>
   12828:	e9 89       	ldd	r30, Y+17	; 0x11
   1282a:	fa 89       	ldd	r31, Y+18	; 0x12
   1282c:	42 81       	ldd	r20, Z+2	; 0x02
   1282e:	53 81       	ldd	r21, Z+3	; 0x03
   12830:	68 e0       	ldi	r22, 0x08	; 8
   12832:	82 e1       	ldi	r24, 0x12	; 18
   12834:	45 de       	rcall	.-886    	; 0x124c0 <print_tok_str>
   12836:	64 e0       	ldi	r22, 0x04	; 4
   12838:	81 e1       	ldi	r24, 0x11	; 17
   1283a:	77 de       	rcall	.-786    	; 0x1252a <print_tok>
   1283c:	64 e0       	ldi	r22, 0x04	; 4
   1283e:	85 e1       	ldi	r24, 0x15	; 21
   12840:	74 de       	rcall	.-792    	; 0x1252a <print_tok>
   12842:	e9 89       	ldd	r30, Y+17	; 0x11
   12844:	fa 89       	ldd	r31, Y+18	; 0x12
   12846:	24 81       	ldd	r18, Z+4	; 0x04
   12848:	35 81       	ldd	r19, Z+5	; 0x05
   1284a:	40 e0       	ldi	r20, 0x00	; 0
   1284c:	50 e0       	ldi	r21, 0x00	; 0
   1284e:	68 e0       	ldi	r22, 0x08	; 8
   12850:	87 e1       	ldi	r24, 0x17	; 23
   12852:	f6 dd       	rcall	.-1044   	; 0x12440 <print_tok_val>
   12854:	64 e0       	ldi	r22, 0x04	; 4
   12856:	81 e1       	ldi	r24, 0x11	; 17
   12858:	68 de       	rcall	.-816    	; 0x1252a <print_tok>
   1285a:	a1 14       	cp	r10, r1
   1285c:	b1 04       	cpc	r11, r1
   1285e:	09 f1       	breq	.+66     	; 0x128a2 <display_Config+0x176>
   12860:	64 e0       	ldi	r22, 0x04	; 4
   12862:	8b e0       	ldi	r24, 0x0B	; 11
   12864:	62 de       	rcall	.-828    	; 0x1252a <print_tok>
   12866:	e9 89       	ldd	r30, Y+17	; 0x11
   12868:	fa 89       	ldd	r31, Y+18	; 0x12
   1286a:	26 81       	ldd	r18, Z+6	; 0x06
   1286c:	37 81       	ldd	r19, Z+7	; 0x07
   1286e:	40 e0       	ldi	r20, 0x00	; 0
   12870:	50 e0       	ldi	r21, 0x00	; 0
   12872:	68 e0       	ldi	r22, 0x08	; 8
   12874:	88 e2       	ldi	r24, 0x28	; 40
   12876:	e4 dd       	rcall	.-1080   	; 0x12440 <print_tok_val>
   12878:	e9 89       	ldd	r30, Y+17	; 0x11
   1287a:	fa 89       	ldd	r31, Y+18	; 0x12
   1287c:	20 85       	ldd	r18, Z+8	; 0x08
   1287e:	31 85       	ldd	r19, Z+9	; 0x09
   12880:	40 e0       	ldi	r20, 0x00	; 0
   12882:	50 e0       	ldi	r21, 0x00	; 0
   12884:	68 e0       	ldi	r22, 0x08	; 8
   12886:	85 e2       	ldi	r24, 0x25	; 37
   12888:	db dd       	rcall	.-1098   	; 0x12440 <print_tok_val>
   1288a:	e9 89       	ldd	r30, Y+17	; 0x11
   1288c:	fa 89       	ldd	r31, Y+18	; 0x12
   1288e:	22 85       	ldd	r18, Z+10	; 0x0a
   12890:	30 e0       	ldi	r19, 0x00	; 0
   12892:	40 e0       	ldi	r20, 0x00	; 0
   12894:	50 e0       	ldi	r21, 0x00	; 0
   12896:	68 e0       	ldi	r22, 0x08	; 8
   12898:	86 e2       	ldi	r24, 0x26	; 38
   1289a:	d2 dd       	rcall	.-1116   	; 0x12440 <print_tok_val>
   1289c:	64 e0       	ldi	r22, 0x04	; 4
   1289e:	81 e1       	ldi	r24, 0x11	; 17
   128a0:	44 de       	rcall	.-888    	; 0x1252a <print_tok>
   128a2:	64 e0       	ldi	r22, 0x04	; 4
   128a4:	87 e2       	ldi	r24, 0x27	; 39
   128a6:	41 de       	rcall	.-894    	; 0x1252a <print_tok>
   128a8:	a1 14       	cp	r10, r1
   128aa:	b1 04       	cpc	r11, r1
   128ac:	49 f0       	breq	.+18     	; 0x128c0 <display_Config+0x194>
   128ae:	e9 89       	ldd	r30, Y+17	; 0x11
   128b0:	fa 89       	ldd	r31, Y+18	; 0x12
   128b2:	23 85       	ldd	r18, Z+11	; 0x0b
   128b4:	30 e0       	ldi	r19, 0x00	; 0
   128b6:	40 e0       	ldi	r20, 0x00	; 0
   128b8:	50 e0       	ldi	r21, 0x00	; 0
   128ba:	68 e0       	ldi	r22, 0x08	; 8
   128bc:	89 e2       	ldi	r24, 0x29	; 41
   128be:	c0 dd       	rcall	.-1152   	; 0x12440 <print_tok_val>
   128c0:	e9 89       	ldd	r30, Y+17	; 0x11
   128c2:	fa 89       	ldd	r31, Y+18	; 0x12
   128c4:	24 85       	ldd	r18, Z+12	; 0x0c
   128c6:	35 85       	ldd	r19, Z+13	; 0x0d
   128c8:	46 85       	ldd	r20, Z+14	; 0x0e
   128ca:	57 85       	ldd	r21, Z+15	; 0x0f
   128cc:	68 e0       	ldi	r22, 0x08	; 8
   128ce:	8f e0       	ldi	r24, 0x0F	; 15
   128d0:	b7 dd       	rcall	.-1170   	; 0x12440 <print_tok_val>
   128d2:	a1 14       	cp	r10, r1
   128d4:	b1 04       	cpc	r11, r1
   128d6:	09 f4       	brne	.+2      	; 0x128da <display_Config+0x1ae>
   128d8:	5a c0       	rjmp	.+180    	; 0x1298e <display_Config+0x262>
   128da:	e9 89       	ldd	r30, Y+17	; 0x11
   128dc:	fa 89       	ldd	r31, Y+18	; 0x12
   128de:	20 89       	ldd	r18, Z+16	; 0x10
   128e0:	31 89       	ldd	r19, Z+17	; 0x11
   128e2:	40 e0       	ldi	r20, 0x00	; 0
   128e4:	50 e0       	ldi	r21, 0x00	; 0
   128e6:	68 e0       	ldi	r22, 0x08	; 8
   128e8:	87 e0       	ldi	r24, 0x07	; 7
   128ea:	aa dd       	rcall	.-1196   	; 0x12440 <print_tok_val>
   128ec:	e9 89       	ldd	r30, Y+17	; 0x11
   128ee:	fa 89       	ldd	r31, Y+18	; 0x12
   128f0:	22 89       	ldd	r18, Z+18	; 0x12
   128f2:	30 e0       	ldi	r19, 0x00	; 0
   128f4:	40 e0       	ldi	r20, 0x00	; 0
   128f6:	50 e0       	ldi	r21, 0x00	; 0
   128f8:	68 e0       	ldi	r22, 0x08	; 8
   128fa:	85 e0       	ldi	r24, 0x05	; 5
   128fc:	a1 dd       	rcall	.-1214   	; 0x12440 <print_tok_val>
   128fe:	e9 89       	ldd	r30, Y+17	; 0x11
   12900:	fa 89       	ldd	r31, Y+18	; 0x12
   12902:	23 89       	ldd	r18, Z+19	; 0x13
   12904:	30 e0       	ldi	r19, 0x00	; 0
   12906:	40 e0       	ldi	r20, 0x00	; 0
   12908:	50 e0       	ldi	r21, 0x00	; 0
   1290a:	68 e0       	ldi	r22, 0x08	; 8
   1290c:	86 e0       	ldi	r24, 0x06	; 6
   1290e:	98 dd       	rcall	.-1232   	; 0x12440 <print_tok_val>
   12910:	e9 89       	ldd	r30, Y+17	; 0x11
   12912:	fa 89       	ldd	r31, Y+18	; 0x12
   12914:	24 89       	ldd	r18, Z+20	; 0x14
   12916:	35 89       	ldd	r19, Z+21	; 0x15
   12918:	40 e0       	ldi	r20, 0x00	; 0
   1291a:	50 e0       	ldi	r21, 0x00	; 0
   1291c:	68 e0       	ldi	r22, 0x08	; 8
   1291e:	84 e0       	ldi	r24, 0x04	; 4
   12920:	8f dd       	rcall	.-1250   	; 0x12440 <print_tok_val>
   12922:	e9 89       	ldd	r30, Y+17	; 0x11
   12924:	fa 89       	ldd	r31, Y+18	; 0x12
   12926:	26 89       	ldd	r18, Z+22	; 0x16
   12928:	37 89       	ldd	r19, Z+23	; 0x17
   1292a:	40 e0       	ldi	r20, 0x00	; 0
   1292c:	50 e0       	ldi	r21, 0x00	; 0
   1292e:	68 e0       	ldi	r22, 0x08	; 8
   12930:	8a e0       	ldi	r24, 0x0A	; 10
   12932:	86 dd       	rcall	.-1268   	; 0x12440 <print_tok_val>
   12934:	e9 89       	ldd	r30, Y+17	; 0x11
   12936:	fa 89       	ldd	r31, Y+18	; 0x12
   12938:	20 8d       	ldd	r18, Z+24	; 0x18
   1293a:	31 8d       	ldd	r19, Z+25	; 0x19
   1293c:	40 e0       	ldi	r20, 0x00	; 0
   1293e:	50 e0       	ldi	r21, 0x00	; 0
   12940:	68 e0       	ldi	r22, 0x08	; 8
   12942:	8e e1       	ldi	r24, 0x1E	; 30
   12944:	7d dd       	rcall	.-1286   	; 0x12440 <print_tok_val>
   12946:	e9 89       	ldd	r30, Y+17	; 0x11
   12948:	fa 89       	ldd	r31, Y+18	; 0x12
   1294a:	22 8d       	ldd	r18, Z+26	; 0x1a
   1294c:	33 8d       	ldd	r19, Z+27	; 0x1b
   1294e:	40 e0       	ldi	r20, 0x00	; 0
   12950:	50 e0       	ldi	r21, 0x00	; 0
   12952:	68 e0       	ldi	r22, 0x08	; 8
   12954:	80 e0       	ldi	r24, 0x00	; 0
   12956:	74 dd       	rcall	.-1304   	; 0x12440 <print_tok_val>
   12958:	e9 89       	ldd	r30, Y+17	; 0x11
   1295a:	fa 89       	ldd	r31, Y+18	; 0x12
   1295c:	24 8d       	ldd	r18, Z+28	; 0x1c
   1295e:	30 e0       	ldi	r19, 0x00	; 0
   12960:	40 e0       	ldi	r20, 0x00	; 0
   12962:	50 e0       	ldi	r21, 0x00	; 0
   12964:	68 e0       	ldi	r22, 0x08	; 8
   12966:	8c e1       	ldi	r24, 0x1C	; 28
   12968:	6b dd       	rcall	.-1322   	; 0x12440 <print_tok_val>
   1296a:	e9 89       	ldd	r30, Y+17	; 0x11
   1296c:	fa 89       	ldd	r31, Y+18	; 0x12
   1296e:	25 8d       	ldd	r18, Z+29	; 0x1d
   12970:	30 e0       	ldi	r19, 0x00	; 0
   12972:	40 e0       	ldi	r20, 0x00	; 0
   12974:	50 e0       	ldi	r21, 0x00	; 0
   12976:	68 e0       	ldi	r22, 0x08	; 8
   12978:	83 e1       	ldi	r24, 0x13	; 19
   1297a:	62 dd       	rcall	.-1340   	; 0x12440 <print_tok_val>
   1297c:	e9 89       	ldd	r30, Y+17	; 0x11
   1297e:	fa 89       	ldd	r31, Y+18	; 0x12
   12980:	26 8d       	ldd	r18, Z+30	; 0x1e
   12982:	30 e0       	ldi	r19, 0x00	; 0
   12984:	40 e0       	ldi	r20, 0x00	; 0
   12986:	50 e0       	ldi	r21, 0x00	; 0
   12988:	68 e0       	ldi	r22, 0x08	; 8
   1298a:	81 e2       	ldi	r24, 0x21	; 33
   1298c:	59 dd       	rcall	.-1358   	; 0x12440 <print_tok_val>
   1298e:	64 e0       	ldi	r22, 0x04	; 4
   12990:	81 e1       	ldi	r24, 0x11	; 17
   12992:	cb dd       	rcall	.-1130   	; 0x1252a <print_tok>
   12994:	a1 14       	cp	r10, r1
   12996:	b1 04       	cpc	r11, r1
   12998:	99 f1       	breq	.+102    	; 0x12a00 <display_Config+0x2d4>
   1299a:	64 e0       	ldi	r22, 0x04	; 4
   1299c:	8a e2       	ldi	r24, 0x2A	; 42
   1299e:	c5 dd       	rcall	.-1142   	; 0x1252a <print_tok>
   129a0:	e9 89       	ldd	r30, Y+17	; 0x11
   129a2:	fa 89       	ldd	r31, Y+18	; 0x12
   129a4:	27 8d       	ldd	r18, Z+31	; 0x1f
   129a6:	30 a1       	ldd	r19, Z+32	; 0x20
   129a8:	41 a1       	ldd	r20, Z+33	; 0x21
   129aa:	52 a1       	ldd	r21, Z+34	; 0x22
   129ac:	68 e0       	ldi	r22, 0x08	; 8
   129ae:	8a e1       	ldi	r24, 0x1A	; 26
   129b0:	47 dd       	rcall	.-1394   	; 0x12440 <print_tok_val>
   129b2:	e9 89       	ldd	r30, Y+17	; 0x11
   129b4:	fa 89       	ldd	r31, Y+18	; 0x12
   129b6:	23 a1       	ldd	r18, Z+35	; 0x23
   129b8:	30 e0       	ldi	r19, 0x00	; 0
   129ba:	40 e0       	ldi	r20, 0x00	; 0
   129bc:	50 e0       	ldi	r21, 0x00	; 0
   129be:	68 e0       	ldi	r22, 0x08	; 8
   129c0:	8b e1       	ldi	r24, 0x1B	; 27
   129c2:	3e dd       	rcall	.-1412   	; 0x12440 <print_tok_val>
   129c4:	e9 89       	ldd	r30, Y+17	; 0x11
   129c6:	fa 89       	ldd	r31, Y+18	; 0x12
   129c8:	24 a1       	ldd	r18, Z+36	; 0x24
   129ca:	35 a1       	ldd	r19, Z+37	; 0x25
   129cc:	40 e0       	ldi	r20, 0x00	; 0
   129ce:	50 e0       	ldi	r21, 0x00	; 0
   129d0:	68 e0       	ldi	r22, 0x08	; 8
   129d2:	8d e1       	ldi	r24, 0x1D	; 29
   129d4:	35 dd       	rcall	.-1430   	; 0x12440 <print_tok_val>
   129d6:	e9 89       	ldd	r30, Y+17	; 0x11
   129d8:	fa 89       	ldd	r31, Y+18	; 0x12
   129da:	26 a1       	ldd	r18, Z+38	; 0x26
   129dc:	37 a1       	ldd	r19, Z+39	; 0x27
   129de:	40 a5       	ldd	r20, Z+40	; 0x28
   129e0:	51 a5       	ldd	r21, Z+41	; 0x29
   129e2:	68 e0       	ldi	r22, 0x08	; 8
   129e4:	89 e1       	ldi	r24, 0x19	; 25
   129e6:	2c dd       	rcall	.-1448   	; 0x12440 <print_tok_val>
   129e8:	e9 89       	ldd	r30, Y+17	; 0x11
   129ea:	fa 89       	ldd	r31, Y+18	; 0x12
   129ec:	22 a5       	ldd	r18, Z+42	; 0x2a
   129ee:	30 e0       	ldi	r19, 0x00	; 0
   129f0:	40 e0       	ldi	r20, 0x00	; 0
   129f2:	50 e0       	ldi	r21, 0x00	; 0
   129f4:	68 e0       	ldi	r22, 0x08	; 8
   129f6:	88 e1       	ldi	r24, 0x18	; 24
   129f8:	23 dd       	rcall	.-1466   	; 0x12440 <print_tok_val>
   129fa:	64 e0       	ldi	r22, 0x04	; 4
   129fc:	81 e1       	ldi	r24, 0x11	; 17
   129fe:	95 dd       	rcall	.-1238   	; 0x1252a <print_tok>
   12a00:	e9 89       	ldd	r30, Y+17	; 0x11
   12a02:	fa 89       	ldd	r31, Y+18	; 0x12
   12a04:	86 a1       	ldd	r24, Z+38	; 0x26
   12a06:	97 a1       	ldd	r25, Z+39	; 0x27
   12a08:	a0 a5       	ldd	r26, Z+40	; 0x28
   12a0a:	b1 a5       	ldd	r27, Z+41	; 0x29
   12a0c:	01 96       	adiw	r24, 0x01	; 1
   12a0e:	a1 1d       	adc	r26, r1
   12a10:	b1 1d       	adc	r27, r1
   12a12:	ed b7       	in	r30, 0x3d	; 61
   12a14:	fe b7       	in	r31, 0x3e	; 62
   12a16:	84 83       	std	Z+4, r24	; 0x04
   12a18:	95 83       	std	Z+5, r25	; 0x05
   12a1a:	a6 83       	std	Z+6, r26	; 0x06
   12a1c:	b7 83       	std	Z+7, r27	; 0x07
   12a1e:	2c ed       	ldi	r18, 0xDC	; 220
   12a20:	39 e1       	ldi	r19, 0x19	; 25
   12a22:	c9 01       	movw	r24, r18
   12a24:	a0 e0       	ldi	r26, 0x00	; 0
   12a26:	81 83       	std	Z+1, r24	; 0x01
   12a28:	92 83       	std	Z+2, r25	; 0x02
   12a2a:	a3 83       	std	Z+3, r26	; 0x03
   12a2c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   12a30:	60 e0       	ldi	r22, 0x00	; 0
   12a32:	81 e1       	ldi	r24, 0x11	; 17
   12a34:	7a dd       	rcall	.-1292   	; 0x1252a <print_tok>
   12a36:	f8 01       	movw	r30, r16
   12a38:	80 81       	ld	r24, Z
   12a3a:	81 30       	cpi	r24, 0x01	; 1
   12a3c:	09 f0       	breq	.+2      	; 0x12a40 <display_Config+0x314>
   12a3e:	ad c0       	rjmp	.+346    	; 0x12b9a <display_Config+0x46e>
   12a40:	27 a1       	ldd	r18, Z+39	; 0x27
   12a42:	30 a5       	ldd	r19, Z+40	; 0x28
   12a44:	3a 8b       	std	Y+18, r19	; 0x12
   12a46:	29 8b       	std	Y+17, r18	; 0x11
   12a48:	c8 01       	movw	r24, r16
   12a4a:	07 96       	adiw	r24, 0x07	; 7
   12a4c:	ed b7       	in	r30, 0x3d	; 61
   12a4e:	fe b7       	in	r31, 0x3e	; 62
   12a50:	95 83       	std	Z+5, r25	; 0x05
   12a52:	84 83       	std	Z+4, r24	; 0x04
   12a54:	2b 85       	ldd	r18, Y+11	; 0x0b
   12a56:	3c 85       	ldd	r19, Y+12	; 0x0c
   12a58:	4d 85       	ldd	r20, Y+13	; 0x0d
   12a5a:	21 83       	std	Z+1, r18	; 0x01
   12a5c:	32 83       	std	Z+2, r19	; 0x02
   12a5e:	43 83       	std	Z+3, r20	; 0x03
   12a60:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   12a64:	e9 89       	ldd	r30, Y+17	; 0x11
   12a66:	fa 89       	ldd	r31, Y+18	; 0x12
   12a68:	80 81       	ld	r24, Z
   12a6a:	90 e0       	ldi	r25, 0x00	; 0
   12a6c:	ed b7       	in	r30, 0x3d	; 61
   12a6e:	fe b7       	in	r31, 0x3e	; 62
   12a70:	95 83       	std	Z+5, r25	; 0x05
   12a72:	84 83       	std	Z+4, r24	; 0x04
   12a74:	2e 85       	ldd	r18, Y+14	; 0x0e
   12a76:	3f 85       	ldd	r19, Y+15	; 0x0f
   12a78:	48 89       	ldd	r20, Y+16	; 0x10
   12a7a:	21 83       	std	Z+1, r18	; 0x01
   12a7c:	32 83       	std	Z+2, r19	; 0x02
   12a7e:	43 83       	std	Z+3, r20	; 0x03
   12a80:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   12a84:	64 e0       	ldi	r22, 0x04	; 4
   12a86:	85 e1       	ldi	r24, 0x15	; 21
   12a88:	50 dd       	rcall	.-1376   	; 0x1252a <print_tok>
   12a8a:	e9 89       	ldd	r30, Y+17	; 0x11
   12a8c:	fa 89       	ldd	r31, Y+18	; 0x12
   12a8e:	20 81       	ld	r18, Z
   12a90:	30 e0       	ldi	r19, 0x00	; 0
   12a92:	40 e0       	ldi	r20, 0x00	; 0
   12a94:	50 e0       	ldi	r21, 0x00	; 0
   12a96:	68 e0       	ldi	r22, 0x08	; 8
   12a98:	81 e0       	ldi	r24, 0x01	; 1
   12a9a:	d2 dc       	rcall	.-1628   	; 0x12440 <print_tok_val>
   12a9c:	e9 89       	ldd	r30, Y+17	; 0x11
   12a9e:	fa 89       	ldd	r31, Y+18	; 0x12
   12aa0:	21 81       	ldd	r18, Z+1	; 0x01
   12aa2:	30 e0       	ldi	r19, 0x00	; 0
   12aa4:	40 e0       	ldi	r20, 0x00	; 0
   12aa6:	50 e0       	ldi	r21, 0x00	; 0
   12aa8:	68 e0       	ldi	r22, 0x08	; 8
   12aaa:	8f e1       	ldi	r24, 0x1F	; 31
   12aac:	c9 dc       	rcall	.-1646   	; 0x12440 <print_tok_val>
   12aae:	e9 89       	ldd	r30, Y+17	; 0x11
   12ab0:	fa 89       	ldd	r31, Y+18	; 0x12
   12ab2:	42 81       	ldd	r20, Z+2	; 0x02
   12ab4:	53 81       	ldd	r21, Z+3	; 0x03
   12ab6:	68 e0       	ldi	r22, 0x08	; 8
   12ab8:	82 e1       	ldi	r24, 0x12	; 18
   12aba:	02 dd       	rcall	.-1532   	; 0x124c0 <print_tok_str>
   12abc:	64 e0       	ldi	r22, 0x04	; 4
   12abe:	81 e1       	ldi	r24, 0x11	; 17
   12ac0:	34 dd       	rcall	.-1432   	; 0x1252a <print_tok>
   12ac2:	64 e0       	ldi	r22, 0x04	; 4
   12ac4:	89 e0       	ldi	r24, 0x09	; 9
   12ac6:	31 dd       	rcall	.-1438   	; 0x1252a <print_tok>
   12ac8:	e9 89       	ldd	r30, Y+17	; 0x11
   12aca:	fa 89       	ldd	r31, Y+18	; 0x12
   12acc:	24 81       	ldd	r18, Z+4	; 0x04
   12ace:	35 81       	ldd	r19, Z+5	; 0x05
   12ad0:	40 e0       	ldi	r20, 0x00	; 0
   12ad2:	50 e0       	ldi	r21, 0x00	; 0
   12ad4:	68 e0       	ldi	r22, 0x08	; 8
   12ad6:	87 e1       	ldi	r24, 0x17	; 23
   12ad8:	b3 dc       	rcall	.-1690   	; 0x12440 <print_tok_val>
   12ada:	64 e0       	ldi	r22, 0x04	; 4
   12adc:	81 e1       	ldi	r24, 0x11	; 17
   12ade:	25 dd       	rcall	.-1462   	; 0x1252a <print_tok>
   12ae0:	a1 14       	cp	r10, r1
   12ae2:	b1 04       	cpc	r11, r1
   12ae4:	91 f1       	breq	.+100    	; 0x12b4a <display_Config+0x41e>
   12ae6:	64 e0       	ldi	r22, 0x04	; 4
   12ae8:	84 e1       	ldi	r24, 0x14	; 20
   12aea:	1f dd       	rcall	.-1474   	; 0x1252a <print_tok>
   12aec:	e9 89       	ldd	r30, Y+17	; 0x11
   12aee:	fa 89       	ldd	r31, Y+18	; 0x12
   12af0:	26 81       	ldd	r18, Z+6	; 0x06
   12af2:	37 81       	ldd	r19, Z+7	; 0x07
   12af4:	03 2e       	mov	r0, r19
   12af6:	00 0c       	add	r0, r0
   12af8:	44 0b       	sbc	r20, r20
   12afa:	55 0b       	sbc	r21, r21
   12afc:	68 e0       	ldi	r22, 0x08	; 8
   12afe:	88 e0       	ldi	r24, 0x08	; 8
   12b00:	9f dc       	rcall	.-1730   	; 0x12440 <print_tok_val>
   12b02:	e9 89       	ldd	r30, Y+17	; 0x11
   12b04:	fa 89       	ldd	r31, Y+18	; 0x12
   12b06:	20 85       	ldd	r18, Z+8	; 0x08
   12b08:	31 85       	ldd	r19, Z+9	; 0x09
   12b0a:	03 2e       	mov	r0, r19
   12b0c:	00 0c       	add	r0, r0
   12b0e:	44 0b       	sbc	r20, r20
   12b10:	55 0b       	sbc	r21, r21
   12b12:	68 e0       	ldi	r22, 0x08	; 8
   12b14:	82 e2       	ldi	r24, 0x22	; 34
   12b16:	94 dc       	rcall	.-1752   	; 0x12440 <print_tok_val>
   12b18:	e9 89       	ldd	r30, Y+17	; 0x11
   12b1a:	fa 89       	ldd	r31, Y+18	; 0x12
   12b1c:	22 85       	ldd	r18, Z+10	; 0x0a
   12b1e:	33 85       	ldd	r19, Z+11	; 0x0b
   12b20:	03 2e       	mov	r0, r19
   12b22:	00 0c       	add	r0, r0
   12b24:	44 0b       	sbc	r20, r20
   12b26:	55 0b       	sbc	r21, r21
   12b28:	68 e0       	ldi	r22, 0x08	; 8
   12b2a:	86 e1       	ldi	r24, 0x16	; 22
   12b2c:	89 dc       	rcall	.-1774   	; 0x12440 <print_tok_val>
   12b2e:	e9 89       	ldd	r30, Y+17	; 0x11
   12b30:	fa 89       	ldd	r31, Y+18	; 0x12
   12b32:	24 85       	ldd	r18, Z+12	; 0x0c
   12b34:	35 85       	ldd	r19, Z+13	; 0x0d
   12b36:	03 2e       	mov	r0, r19
   12b38:	00 0c       	add	r0, r0
   12b3a:	44 0b       	sbc	r20, r20
   12b3c:	55 0b       	sbc	r21, r21
   12b3e:	68 e0       	ldi	r22, 0x08	; 8
   12b40:	8d e0       	ldi	r24, 0x0D	; 13
   12b42:	7e dc       	rcall	.-1796   	; 0x12440 <print_tok_val>
   12b44:	64 e0       	ldi	r22, 0x04	; 4
   12b46:	81 e1       	ldi	r24, 0x11	; 17
   12b48:	f0 dc       	rcall	.-1568   	; 0x1252a <print_tok>
   12b4a:	e9 89       	ldd	r30, Y+17	; 0x11
   12b4c:	fa 89       	ldd	r31, Y+18	; 0x12
   12b4e:	44 85       	ldd	r20, Z+12	; 0x0c
   12b50:	55 85       	ldd	r21, Z+13	; 0x0d
   12b52:	20 85       	ldd	r18, Z+8	; 0x08
   12b54:	31 85       	ldd	r19, Z+9	; 0x09
   12b56:	42 9f       	mul	r20, r18
   12b58:	c0 01       	movw	r24, r0
   12b5a:	43 9f       	mul	r20, r19
   12b5c:	90 0d       	add	r25, r0
   12b5e:	52 9f       	mul	r21, r18
   12b60:	90 0d       	add	r25, r0
   12b62:	11 24       	eor	r1, r1
   12b64:	42 85       	ldd	r20, Z+10	; 0x0a
   12b66:	53 85       	ldd	r21, Z+11	; 0x0b
   12b68:	84 9f       	mul	r24, r20
   12b6a:	90 01       	movw	r18, r0
   12b6c:	85 9f       	mul	r24, r21
   12b6e:	30 0d       	add	r19, r0
   12b70:	94 9f       	mul	r25, r20
   12b72:	30 0d       	add	r19, r0
   12b74:	11 24       	eor	r1, r1
   12b76:	c9 01       	movw	r24, r18
   12b78:	33 0f       	add	r19, r19
   12b7a:	aa 0b       	sbc	r26, r26
   12b7c:	bb 0b       	sbc	r27, r27
   12b7e:	ed b7       	in	r30, 0x3d	; 61
   12b80:	fe b7       	in	r31, 0x3e	; 62
   12b82:	84 83       	std	Z+4, r24	; 0x04
   12b84:	95 83       	std	Z+5, r25	; 0x05
   12b86:	a6 83       	std	Z+6, r26	; 0x06
   12b88:	b7 83       	std	Z+7, r27	; 0x07
   12b8a:	21 82       	std	Z+1, r2	; 0x01
   12b8c:	32 82       	std	Z+2, r3	; 0x02
   12b8e:	43 82       	std	Z+3, r4	; 0x03
   12b90:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   12b94:	60 e0       	ldi	r22, 0x00	; 0
   12b96:	81 e1       	ldi	r24, 0x11	; 17
   12b98:	c8 dc       	rcall	.-1648   	; 0x1252a <print_tok>
   12b9a:	f8 01       	movw	r30, r16
   12b9c:	80 81       	ld	r24, Z
   12b9e:	84 30       	cpi	r24, 0x04	; 4
   12ba0:	c9 f4       	brne	.+50     	; 0x12bd4 <display_Config+0x4a8>
   12ba2:	27 a1       	ldd	r18, Z+39	; 0x27
   12ba4:	30 a5       	ldd	r19, Z+40	; 0x28
   12ba6:	3a 8b       	std	Y+18, r19	; 0x12
   12ba8:	29 8b       	std	Y+17, r18	; 0x11
   12baa:	60 e0       	ldi	r22, 0x00	; 0
   12bac:	80 e2       	ldi	r24, 0x20	; 32
   12bae:	bd dc       	rcall	.-1670   	; 0x1252a <print_tok>
   12bb0:	64 e0       	ldi	r22, 0x04	; 4
   12bb2:	89 e0       	ldi	r24, 0x09	; 9
   12bb4:	ba dc       	rcall	.-1676   	; 0x1252a <print_tok>
   12bb6:	e9 89       	ldd	r30, Y+17	; 0x11
   12bb8:	fa 89       	ldd	r31, Y+18	; 0x12
   12bba:	20 81       	ld	r18, Z
   12bbc:	30 e0       	ldi	r19, 0x00	; 0
   12bbe:	40 e0       	ldi	r20, 0x00	; 0
   12bc0:	50 e0       	ldi	r21, 0x00	; 0
   12bc2:	68 e0       	ldi	r22, 0x08	; 8
   12bc4:	81 e0       	ldi	r24, 0x01	; 1
   12bc6:	3c dc       	rcall	.-1928   	; 0x12440 <print_tok_val>
   12bc8:	64 e0       	ldi	r22, 0x04	; 4
   12bca:	81 e1       	ldi	r24, 0x11	; 17
   12bcc:	ae dc       	rcall	.-1700   	; 0x1252a <print_tok>
   12bce:	60 e0       	ldi	r22, 0x00	; 0
   12bd0:	81 e1       	ldi	r24, 0x11	; 17
   12bd2:	ab dc       	rcall	.-1706   	; 0x1252a <print_tok>
   12bd4:	28 85       	ldd	r18, Y+8	; 0x08
   12bd6:	39 85       	ldd	r19, Y+9	; 0x09
   12bd8:	4a 85       	ldd	r20, Y+10	; 0x0a
   12bda:	ed b7       	in	r30, 0x3d	; 61
   12bdc:	fe b7       	in	r31, 0x3e	; 62
   12bde:	21 83       	std	Z+1, r18	; 0x01
   12be0:	32 83       	std	Z+2, r19	; 0x02
   12be2:	43 83       	std	Z+3, r20	; 0x03
   12be4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   12be8:	05 5d       	subi	r16, 0xD5	; 213
   12bea:	1f 4f       	sbci	r17, 0xFF	; 255
   12bec:	25 ef       	ldi	r18, 0xF5	; 245
   12bee:	30 e2       	ldi	r19, 0x20	; 32
   12bf0:	20 17       	cp	r18, r16
   12bf2:	31 07       	cpc	r19, r17
   12bf4:	09 f0       	breq	.+2      	; 0x12bf8 <display_Config+0x4cc>
   12bf6:	df cd       	rjmp	.-1090   	; 0x127b6 <display_Config+0x8a>
   12bf8:	8b e9       	ldi	r24, 0x9B	; 155
   12bfa:	99 e1       	ldi	r25, 0x19	; 25
   12bfc:	a0 e0       	ldi	r26, 0x00	; 0
   12bfe:	ed b7       	in	r30, 0x3d	; 61
   12c00:	fe b7       	in	r31, 0x3e	; 62
   12c02:	81 83       	std	Z+1, r24	; 0x01
   12c04:	92 83       	std	Z+2, r25	; 0x02
   12c06:	a3 83       	std	Z+3, r26	; 0x03
   12c08:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   12c0c:	62 96       	adiw	r28, 0x12	; 18
   12c0e:	0f b6       	in	r0, 0x3f	; 63
   12c10:	f8 94       	cli
   12c12:	de bf       	out	0x3e, r29	; 62
   12c14:	0f be       	out	0x3f, r0	; 63
   12c16:	cd bf       	out	0x3d, r28	; 61
   12c18:	df 91       	pop	r29
   12c1a:	cf 91       	pop	r28
   12c1c:	1f 91       	pop	r17
   12c1e:	0f 91       	pop	r16
   12c20:	ef 90       	pop	r14
   12c22:	df 90       	pop	r13
   12c24:	cf 90       	pop	r12
   12c26:	bf 90       	pop	r11
   12c28:	af 90       	pop	r10
   12c2a:	8f 90       	pop	r8
   12c2c:	7f 90       	pop	r7
   12c2e:	6f 90       	pop	r6
   12c30:	4f 90       	pop	r4
   12c32:	3f 90       	pop	r3
   12c34:	2f 90       	pop	r2
   12c36:	08 95       	ret

00012c38 <find_type>:
   12c38:	e1 ef       	ldi	r30, 0xF1	; 241
   12c3a:	fe e1       	ldi	r31, 0x1E	; 30
   12c3c:	20 e0       	ldi	r18, 0x00	; 0
   12c3e:	30 e0       	ldi	r19, 0x00	; 0
   12c40:	40 81       	ld	r20, Z
   12c42:	50 e0       	ldi	r21, 0x00	; 0
   12c44:	48 17       	cp	r20, r24
   12c46:	59 07       	cpc	r21, r25
   12c48:	49 f0       	breq	.+18     	; 0x12c5c <find_type+0x24>
   12c4a:	2f 5f       	subi	r18, 0xFF	; 255
   12c4c:	3f 4f       	sbci	r19, 0xFF	; 255
   12c4e:	bb 96       	adiw	r30, 0x2b	; 43
   12c50:	2c 30       	cpi	r18, 0x0C	; 12
   12c52:	31 05       	cpc	r19, r1
   12c54:	a9 f7       	brne	.-22     	; 0x12c40 <find_type+0x8>
   12c56:	8f ef       	ldi	r24, 0xFF	; 255
   12c58:	9f ef       	ldi	r25, 0xFF	; 255
   12c5a:	08 95       	ret
   12c5c:	c9 01       	movw	r24, r18
   12c5e:	08 95       	ret

00012c60 <count_drive_types>:
   12c60:	28 2f       	mov	r18, r24
   12c62:	e1 ef       	ldi	r30, 0xF1	; 241
   12c64:	fe e1       	ldi	r31, 0x1E	; 30
   12c66:	80 e0       	ldi	r24, 0x00	; 0
   12c68:	90 e0       	ldi	r25, 0x00	; 0
   12c6a:	30 81       	ld	r19, Z
   12c6c:	32 13       	cpse	r19, r18
   12c6e:	01 c0       	rjmp	.+2      	; 0x12c72 <count_drive_types+0x12>
   12c70:	01 96       	adiw	r24, 0x01	; 1
   12c72:	bb 96       	adiw	r30, 0x2b	; 43
   12c74:	30 e2       	ldi	r19, 0x20	; 32
   12c76:	e5 3f       	cpi	r30, 0xF5	; 245
   12c78:	f3 07       	cpc	r31, r19
   12c7a:	b9 f7       	brne	.-18     	; 0x12c6a <count_drive_types+0xa>
   12c7c:	08 95       	ret

00012c7e <type_to_str>:
   12c7e:	00 97       	sbiw	r24, 0x00	; 0
   12c80:	59 f0       	breq	.+22     	; 0x12c98 <type_to_str+0x1a>
   12c82:	81 30       	cpi	r24, 0x01	; 1
   12c84:	91 05       	cpc	r25, r1
   12c86:	59 f0       	breq	.+22     	; 0x12c9e <type_to_str+0x20>
   12c88:	83 30       	cpi	r24, 0x03	; 3
   12c8a:	91 05       	cpc	r25, r1
   12c8c:	59 f0       	breq	.+22     	; 0x12ca4 <type_to_str+0x26>
   12c8e:	04 97       	sbiw	r24, 0x04	; 4
   12c90:	61 f0       	breq	.+24     	; 0x12caa <type_to_str+0x2c>
   12c92:	85 e3       	ldi	r24, 0x35	; 53
   12c94:	9e e0       	ldi	r25, 0x0E	; 14
   12c96:	08 95       	ret
   12c98:	8b e0       	ldi	r24, 0x0B	; 11
   12c9a:	9e e0       	ldi	r25, 0x0E	; 14
   12c9c:	08 95       	ret
   12c9e:	83 e1       	ldi	r24, 0x13	; 19
   12ca0:	9e e0       	ldi	r25, 0x0E	; 14
   12ca2:	08 95       	ret
   12ca4:	8b e2       	ldi	r24, 0x2B	; 43
   12ca6:	9e e0       	ldi	r25, 0x0E	; 14
   12ca8:	08 95       	ret
   12caa:	8e e1       	ldi	r24, 0x1E	; 30
   12cac:	9e e0       	ldi	r25, 0x0E	; 14
   12cae:	08 95       	ret

00012cb0 <find_free>:
   12cb0:	80 e0       	ldi	r24, 0x00	; 0
   12cb2:	90 e0       	ldi	r25, 0x00	; 0
   12cb4:	c1 cf       	rjmp	.-126    	; 0x12c38 <find_type>
   12cb6:	08 95       	ret

00012cb8 <find_device>:
   12cb8:	9b 01       	movw	r18, r22
   12cba:	20 52       	subi	r18, 0x20	; 32
   12cbc:	31 09       	sbc	r19, r1
   12cbe:	2f 35       	cpi	r18, 0x5F	; 95
   12cc0:	31 05       	cpc	r19, r1
   12cc2:	f8 f4       	brcc	.+62     	; 0x12d02 <find_device+0x4a>
   12cc4:	64 17       	cp	r22, r20
   12cc6:	75 07       	cpc	r23, r21
   12cc8:	e4 f0       	brlt	.+56     	; 0x12d02 <find_device+0x4a>
   12cca:	9a 01       	movw	r18, r20
   12ccc:	22 5e       	subi	r18, 0xE2	; 226
   12cce:	3f 4f       	sbci	r19, 0xFF	; 255
   12cd0:	26 17       	cp	r18, r22
   12cd2:	37 07       	cpc	r19, r23
   12cd4:	b4 f0       	brlt	.+44     	; 0x12d02 <find_device+0x4a>
   12cd6:	64 1b       	sub	r22, r20
   12cd8:	75 0b       	sbc	r23, r21
   12cda:	e1 ef       	ldi	r30, 0xF1	; 241
   12cdc:	fe e1       	ldi	r31, 0x1E	; 30
   12cde:	20 e0       	ldi	r18, 0x00	; 0
   12ce0:	30 e0       	ldi	r19, 0x00	; 0
   12ce2:	40 81       	ld	r20, Z
   12ce4:	50 e0       	ldi	r21, 0x00	; 0
   12ce6:	48 17       	cp	r20, r24
   12ce8:	59 07       	cpc	r21, r25
   12cea:	29 f4       	brne	.+10     	; 0x12cf6 <find_device+0x3e>
   12cec:	41 81       	ldd	r20, Z+1	; 0x01
   12cee:	50 e0       	ldi	r21, 0x00	; 0
   12cf0:	64 17       	cp	r22, r20
   12cf2:	75 07       	cpc	r23, r21
   12cf4:	49 f0       	breq	.+18     	; 0x12d08 <find_device+0x50>
   12cf6:	2f 5f       	subi	r18, 0xFF	; 255
   12cf8:	3f 4f       	sbci	r19, 0xFF	; 255
   12cfa:	bb 96       	adiw	r30, 0x2b	; 43
   12cfc:	2c 30       	cpi	r18, 0x0C	; 12
   12cfe:	31 05       	cpc	r19, r1
   12d00:	81 f7       	brne	.-32     	; 0x12ce2 <find_device+0x2a>
   12d02:	8f ef       	ldi	r24, 0xFF	; 255
   12d04:	9f ef       	ldi	r25, 0xFF	; 255
   12d06:	08 95       	ret
   12d08:	c9 01       	movw	r24, r18
   12d0a:	08 95       	ret

00012d0c <set_active_device>:
   12d0c:	a9 e0       	ldi	r26, 0x09	; 9
   12d0e:	b0 e0       	ldi	r27, 0x00	; 0
   12d10:	ec e8       	ldi	r30, 0x8C	; 140
   12d12:	f6 e9       	ldi	r31, 0x96	; 150
   12d14:	0c 94 4c e3 	jmp	0x1c698	; 0x1c698 <__prologue_saves__+0x1c>
   12d18:	8f 3f       	cpi	r24, 0xFF	; 255
   12d1a:	2f ef       	ldi	r18, 0xFF	; 255
   12d1c:	92 07       	cpc	r25, r18
   12d1e:	09 f4       	brne	.+2      	; 0x12d22 <set_active_device+0x16>
   12d20:	d0 c0       	rjmp	.+416    	; 0x12ec2 <set_active_device+0x1b6>
   12d22:	ec 01       	movw	r28, r24
   12d24:	0c 97       	sbiw	r24, 0x0c	; 12
   12d26:	b0 f0       	brcs	.+44     	; 0x12d54 <set_active_device+0x48>
   12d28:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12d2c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12d30:	c9 01       	movw	r24, r18
   12d32:	81 70       	andi	r24, 0x01	; 1
   12d34:	99 27       	eor	r25, r25
   12d36:	20 ff       	sbrs	r18, 0
   12d38:	c6 c0       	rjmp	.+396    	; 0x12ec6 <set_active_device+0x1ba>
   12d3a:	ed b7       	in	r30, 0x3d	; 61
   12d3c:	fe b7       	in	r31, 0x3e	; 62
   12d3e:	d5 83       	std	Z+5, r29	; 0x05
   12d40:	c4 83       	std	Z+4, r28	; 0x04
   12d42:	86 e7       	ldi	r24, 0x76	; 118
   12d44:	99 e1       	ldi	r25, 0x19	; 25
   12d46:	a0 e0       	ldi	r26, 0x00	; 0
   12d48:	81 83       	std	Z+1, r24	; 0x01
   12d4a:	92 83       	std	Z+2, r25	; 0x02
   12d4c:	a3 83       	std	Z+3, r26	; 0x03
   12d4e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   12d52:	b7 c0       	rjmp	.+366    	; 0x12ec2 <set_active_device+0x1b6>
   12d54:	8b e2       	ldi	r24, 0x2B	; 43
   12d56:	8c 9f       	mul	r24, r28
   12d58:	f0 01       	movw	r30, r0
   12d5a:	8d 9f       	mul	r24, r29
   12d5c:	f0 0d       	add	r31, r0
   12d5e:	11 24       	eor	r1, r1
   12d60:	ef 50       	subi	r30, 0x0F	; 15
   12d62:	f1 4e       	sbci	r31, 0xE1	; 225
   12d64:	21 81       	ldd	r18, Z+1	; 0x01
   12d66:	2f 31       	cpi	r18, 0x1F	; 31
   12d68:	d0 f0       	brcs	.+52     	; 0x12d9e <set_active_device+0x92>
   12d6a:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   12d6e:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12d72:	ca 01       	movw	r24, r20
   12d74:	81 70       	andi	r24, 0x01	; 1
   12d76:	99 27       	eor	r25, r25
   12d78:	40 ff       	sbrs	r20, 0
   12d7a:	a5 c0       	rjmp	.+330    	; 0x12ec6 <set_active_device+0x1ba>
   12d7c:	82 2f       	mov	r24, r18
   12d7e:	90 e0       	ldi	r25, 0x00	; 0
   12d80:	ed b7       	in	r30, 0x3d	; 61
   12d82:	fe b7       	in	r31, 0x3e	; 62
   12d84:	97 83       	std	Z+7, r25	; 0x07
   12d86:	86 83       	std	Z+6, r24	; 0x06
   12d88:	d5 83       	std	Z+5, r29	; 0x05
   12d8a:	c4 83       	std	Z+4, r28	; 0x04
   12d8c:	8d e3       	ldi	r24, 0x3D	; 61
   12d8e:	99 e1       	ldi	r25, 0x19	; 25
   12d90:	a0 e0       	ldi	r26, 0x00	; 0
   12d92:	81 83       	std	Z+1, r24	; 0x01
   12d94:	92 83       	std	Z+2, r25	; 0x02
   12d96:	a3 83       	std	Z+3, r26	; 0x03
   12d98:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   12d9c:	92 c0       	rjmp	.+292    	; 0x12ec2 <set_active_device+0x1b6>
   12d9e:	20 81       	ld	r18, Z
   12da0:	02 2f       	mov	r16, r18
   12da2:	10 e0       	ldi	r17, 0x00	; 0
   12da4:	87 a1       	ldd	r24, Z+39	; 0x27
   12da6:	90 a5       	ldd	r25, Z+40	; 0x28
   12da8:	00 97       	sbiw	r24, 0x00	; 0
   12daa:	b1 f4       	brne	.+44     	; 0x12dd8 <set_active_device+0xcc>
   12dac:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12db0:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12db4:	c9 01       	movw	r24, r18
   12db6:	81 70       	andi	r24, 0x01	; 1
   12db8:	99 27       	eor	r25, r25
   12dba:	20 ff       	sbrs	r18, 0
   12dbc:	84 c0       	rjmp	.+264    	; 0x12ec6 <set_active_device+0x1ba>
   12dbe:	c8 01       	movw	r24, r16
   12dc0:	5e df       	rcall	.-324    	; 0x12c7e <type_to_str>
   12dc2:	ed b7       	in	r30, 0x3d	; 61
   12dc4:	fe b7       	in	r31, 0x3e	; 62
   12dc6:	91 87       	std	Z+9, r25	; 0x09
   12dc8:	80 87       	std	Z+8, r24	; 0x08
   12dca:	17 83       	std	Z+7, r17	; 0x07
   12dcc:	06 83       	std	Z+6, r16	; 0x06
   12dce:	d5 83       	std	Z+5, r29	; 0x05
   12dd0:	c4 83       	std	Z+4, r28	; 0x04
   12dd2:	88 e0       	ldi	r24, 0x08	; 8
   12dd4:	99 e1       	ldi	r25, 0x19	; 25
   12dd6:	6f c0       	rjmp	.+222    	; 0x12eb6 <set_active_device+0x1aa>
   12dd8:	01 15       	cp	r16, r1
   12dda:	11 05       	cpc	r17, r1
   12ddc:	b9 f4       	brne	.+46     	; 0x12e0c <set_active_device+0x100>
   12dde:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12de2:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12de6:	c9 01       	movw	r24, r18
   12de8:	81 70       	andi	r24, 0x01	; 1
   12dea:	99 27       	eor	r25, r25
   12dec:	20 ff       	sbrs	r18, 0
   12dee:	6b c0       	rjmp	.+214    	; 0x12ec6 <set_active_device+0x1ba>
   12df0:	80 e0       	ldi	r24, 0x00	; 0
   12df2:	90 e0       	ldi	r25, 0x00	; 0
   12df4:	44 df       	rcall	.-376    	; 0x12c7e <type_to_str>
   12df6:	ed b7       	in	r30, 0x3d	; 61
   12df8:	fe b7       	in	r31, 0x3e	; 62
   12dfa:	91 87       	std	Z+9, r25	; 0x09
   12dfc:	80 87       	std	Z+8, r24	; 0x08
   12dfe:	17 82       	std	Z+7, r1	; 0x07
   12e00:	16 82       	std	Z+6, r1	; 0x06
   12e02:	d5 83       	std	Z+5, r29	; 0x05
   12e04:	c4 83       	std	Z+4, r28	; 0x04
   12e06:	83 ed       	ldi	r24, 0xD3	; 211
   12e08:	98 e1       	ldi	r25, 0x18	; 24
   12e0a:	55 c0       	rjmp	.+170    	; 0x12eb6 <set_active_device+0x1aa>
   12e0c:	04 30       	cpi	r16, 0x04	; 4
   12e0e:	11 05       	cpc	r17, r1
   12e10:	29 f4       	brne	.+10     	; 0x12e1c <set_active_device+0x110>
   12e12:	90 93 68 19 	sts	0x1968, r25	; 0x801968 <PRINTERp+0x1>
   12e16:	80 93 67 19 	sts	0x1967, r24	; 0x801967 <PRINTERp>
   12e1a:	35 c0       	rjmp	.+106    	; 0x12e86 <set_active_device+0x17a>
   12e1c:	2d 7f       	andi	r18, 0xFD	; 253
   12e1e:	21 30       	cpi	r18, 0x01	; 1
   12e20:	a9 f5       	brne	.+106    	; 0x12e8c <set_active_device+0x180>
   12e22:	21 a5       	ldd	r18, Z+41	; 0x29
   12e24:	32 a5       	ldd	r19, Z+42	; 0x2a
   12e26:	21 15       	cp	r18, r1
   12e28:	31 05       	cpc	r19, r1
   12e2a:	b1 f4       	brne	.+44     	; 0x12e58 <set_active_device+0x14c>
   12e2c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12e30:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12e34:	c9 01       	movw	r24, r18
   12e36:	81 70       	andi	r24, 0x01	; 1
   12e38:	99 27       	eor	r25, r25
   12e3a:	20 ff       	sbrs	r18, 0
   12e3c:	44 c0       	rjmp	.+136    	; 0x12ec6 <set_active_device+0x1ba>
   12e3e:	c8 01       	movw	r24, r16
   12e40:	1e df       	rcall	.-452    	; 0x12c7e <type_to_str>
   12e42:	ed b7       	in	r30, 0x3d	; 61
   12e44:	fe b7       	in	r31, 0x3e	; 62
   12e46:	91 87       	std	Z+9, r25	; 0x09
   12e48:	80 87       	std	Z+8, r24	; 0x08
   12e4a:	17 83       	std	Z+7, r17	; 0x07
   12e4c:	06 83       	std	Z+6, r16	; 0x06
   12e4e:	d5 83       	std	Z+5, r29	; 0x05
   12e50:	c4 83       	std	Z+4, r28	; 0x04
   12e52:	8b e9       	ldi	r24, 0x9B	; 155
   12e54:	98 e1       	ldi	r25, 0x18	; 24
   12e56:	2f c0       	rjmp	.+94     	; 0x12eb6 <set_active_device+0x1aa>
   12e58:	01 30       	cpi	r16, 0x01	; 1
   12e5a:	11 05       	cpc	r17, r1
   12e5c:	49 f4       	brne	.+18     	; 0x12e70 <set_active_device+0x164>
   12e5e:	90 93 62 19 	sts	0x1962, r25	; 0x801962 <AMIGOp+0x1>
   12e62:	80 93 61 19 	sts	0x1961, r24	; 0x801961 <AMIGOp>
   12e66:	30 93 60 19 	sts	0x1960, r19	; 0x801960 <AMIGOs+0x1>
   12e6a:	20 93 5f 19 	sts	0x195F, r18	; 0x80195f <AMIGOs>
   12e6e:	0b c0       	rjmp	.+22     	; 0x12e86 <set_active_device+0x17a>
   12e70:	03 30       	cpi	r16, 0x03	; 3
   12e72:	11 05       	cpc	r17, r1
   12e74:	59 f4       	brne	.+22     	; 0x12e8c <set_active_device+0x180>
   12e76:	90 93 66 19 	sts	0x1966, r25	; 0x801966 <SS80p+0x1>
   12e7a:	80 93 65 19 	sts	0x1965, r24	; 0x801965 <SS80p>
   12e7e:	30 93 64 19 	sts	0x1964, r19	; 0x801964 <SS80s+0x1>
   12e82:	20 93 63 19 	sts	0x1963, r18	; 0x801963 <SS80s>
   12e86:	81 e0       	ldi	r24, 0x01	; 1
   12e88:	90 e0       	ldi	r25, 0x00	; 0
   12e8a:	1d c0       	rjmp	.+58     	; 0x12ec6 <set_active_device+0x1ba>
   12e8c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12e90:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12e94:	c9 01       	movw	r24, r18
   12e96:	81 70       	andi	r24, 0x01	; 1
   12e98:	99 27       	eor	r25, r25
   12e9a:	20 ff       	sbrs	r18, 0
   12e9c:	14 c0       	rjmp	.+40     	; 0x12ec6 <set_active_device+0x1ba>
   12e9e:	c8 01       	movw	r24, r16
   12ea0:	ee de       	rcall	.-548    	; 0x12c7e <type_to_str>
   12ea2:	ed b7       	in	r30, 0x3d	; 61
   12ea4:	fe b7       	in	r31, 0x3e	; 62
   12ea6:	91 87       	std	Z+9, r25	; 0x09
   12ea8:	80 87       	std	Z+8, r24	; 0x08
   12eaa:	17 83       	std	Z+7, r17	; 0x07
   12eac:	06 83       	std	Z+6, r16	; 0x06
   12eae:	d5 83       	std	Z+5, r29	; 0x05
   12eb0:	c4 83       	std	Z+4, r28	; 0x04
   12eb2:	80 e7       	ldi	r24, 0x70	; 112
   12eb4:	98 e1       	ldi	r25, 0x18	; 24
   12eb6:	a0 e0       	ldi	r26, 0x00	; 0
   12eb8:	81 83       	std	Z+1, r24	; 0x01
   12eba:	92 83       	std	Z+2, r25	; 0x02
   12ebc:	a3 83       	std	Z+3, r26	; 0x03
   12ebe:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   12ec2:	80 e0       	ldi	r24, 0x00	; 0
   12ec4:	90 e0       	ldi	r25, 0x00	; 0
   12ec6:	cd b7       	in	r28, 0x3d	; 61
   12ec8:	de b7       	in	r29, 0x3e	; 62
   12eca:	29 96       	adiw	r28, 0x09	; 9
   12ecc:	e4 e0       	ldi	r30, 0x04	; 4
   12ece:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

00012ed2 <SS80_Set_Defaults>:
   12ed2:	0f 93       	push	r16
   12ed4:	1f 93       	push	r17
   12ed6:	cf 93       	push	r28
   12ed8:	df 93       	push	r29
   12eda:	ec 01       	movw	r28, r24
   12edc:	82 e0       	ldi	r24, 0x02	; 2
   12ede:	90 e0       	ldi	r25, 0x00	; 0
   12ee0:	ab de       	rcall	.-682    	; 0x12c38 <find_type>
   12ee2:	97 fd       	sbrc	r25, 7
   12ee4:	6b c0       	rjmp	.+214    	; 0x12fbc <SS80_Set_Defaults+0xea>
   12ee6:	2b e2       	ldi	r18, 0x2B	; 43
   12ee8:	2c 9f       	mul	r18, r28
   12eea:	f0 01       	movw	r30, r0
   12eec:	2d 9f       	mul	r18, r29
   12eee:	f0 0d       	add	r31, r0
   12ef0:	11 24       	eor	r1, r1
   12ef2:	ef 50       	subi	r30, 0x0F	; 15
   12ef4:	f1 4e       	sbci	r31, 0xE1	; 225
   12ef6:	c7 a1       	ldd	r28, Z+39	; 0x27
   12ef8:	d0 a5       	ldd	r29, Z+40	; 0x28
   12efa:	28 9f       	mul	r18, r24
   12efc:	f0 01       	movw	r30, r0
   12efe:	29 9f       	mul	r18, r25
   12f00:	f0 0d       	add	r31, r0
   12f02:	11 24       	eor	r1, r1
   12f04:	ef 50       	subi	r30, 0x0F	; 15
   12f06:	f1 4e       	sbci	r31, 0xE1	; 225
   12f08:	07 a1       	ldd	r16, Z+39	; 0x27
   12f0a:	10 a5       	ldd	r17, Z+40	; 0x28
   12f0c:	f8 01       	movw	r30, r16
   12f0e:	80 81       	ld	r24, Z
   12f10:	88 83       	st	Y, r24
   12f12:	81 81       	ldd	r24, Z+1	; 0x01
   12f14:	89 83       	std	Y+1, r24	; 0x01
   12f16:	82 81       	ldd	r24, Z+2	; 0x02
   12f18:	93 81       	ldd	r25, Z+3	; 0x03
   12f1a:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <stralloc>
   12f1e:	9b 83       	std	Y+3, r25	; 0x03
   12f20:	8a 83       	std	Y+2, r24	; 0x02
   12f22:	f8 01       	movw	r30, r16
   12f24:	84 81       	ldd	r24, Z+4	; 0x04
   12f26:	95 81       	ldd	r25, Z+5	; 0x05
   12f28:	9d 83       	std	Y+5, r25	; 0x05
   12f2a:	8c 83       	std	Y+4, r24	; 0x04
   12f2c:	86 81       	ldd	r24, Z+6	; 0x06
   12f2e:	97 81       	ldd	r25, Z+7	; 0x07
   12f30:	9f 83       	std	Y+7, r25	; 0x07
   12f32:	8e 83       	std	Y+6, r24	; 0x06
   12f34:	80 85       	ldd	r24, Z+8	; 0x08
   12f36:	91 85       	ldd	r25, Z+9	; 0x09
   12f38:	99 87       	std	Y+9, r25	; 0x09
   12f3a:	88 87       	std	Y+8, r24	; 0x08
   12f3c:	82 85       	ldd	r24, Z+10	; 0x0a
   12f3e:	8a 87       	std	Y+10, r24	; 0x0a
   12f40:	83 85       	ldd	r24, Z+11	; 0x0b
   12f42:	8b 87       	std	Y+11, r24	; 0x0b
   12f44:	84 85       	ldd	r24, Z+12	; 0x0c
   12f46:	95 85       	ldd	r25, Z+13	; 0x0d
   12f48:	a6 85       	ldd	r26, Z+14	; 0x0e
   12f4a:	b7 85       	ldd	r27, Z+15	; 0x0f
   12f4c:	8c 87       	std	Y+12, r24	; 0x0c
   12f4e:	9d 87       	std	Y+13, r25	; 0x0d
   12f50:	ae 87       	std	Y+14, r26	; 0x0e
   12f52:	bf 87       	std	Y+15, r27	; 0x0f
   12f54:	80 89       	ldd	r24, Z+16	; 0x10
   12f56:	91 89       	ldd	r25, Z+17	; 0x11
   12f58:	99 8b       	std	Y+17, r25	; 0x11
   12f5a:	88 8b       	std	Y+16, r24	; 0x10
   12f5c:	82 89       	ldd	r24, Z+18	; 0x12
   12f5e:	8a 8b       	std	Y+18, r24	; 0x12
   12f60:	83 89       	ldd	r24, Z+19	; 0x13
   12f62:	8b 8b       	std	Y+19, r24	; 0x13
   12f64:	84 89       	ldd	r24, Z+20	; 0x14
   12f66:	95 89       	ldd	r25, Z+21	; 0x15
   12f68:	9d 8b       	std	Y+21, r25	; 0x15
   12f6a:	8c 8b       	std	Y+20, r24	; 0x14
   12f6c:	86 89       	ldd	r24, Z+22	; 0x16
   12f6e:	97 89       	ldd	r25, Z+23	; 0x17
   12f70:	9f 8b       	std	Y+23, r25	; 0x17
   12f72:	8e 8b       	std	Y+22, r24	; 0x16
   12f74:	80 8d       	ldd	r24, Z+24	; 0x18
   12f76:	91 8d       	ldd	r25, Z+25	; 0x19
   12f78:	99 8f       	std	Y+25, r25	; 0x19
   12f7a:	88 8f       	std	Y+24, r24	; 0x18
   12f7c:	82 8d       	ldd	r24, Z+26	; 0x1a
   12f7e:	93 8d       	ldd	r25, Z+27	; 0x1b
   12f80:	9b 8f       	std	Y+27, r25	; 0x1b
   12f82:	8a 8f       	std	Y+26, r24	; 0x1a
   12f84:	84 8d       	ldd	r24, Z+28	; 0x1c
   12f86:	8c 8f       	std	Y+28, r24	; 0x1c
   12f88:	85 8d       	ldd	r24, Z+29	; 0x1d
   12f8a:	8d 8f       	std	Y+29, r24	; 0x1d
   12f8c:	87 8d       	ldd	r24, Z+31	; 0x1f
   12f8e:	90 a1       	ldd	r25, Z+32	; 0x20
   12f90:	a1 a1       	ldd	r26, Z+33	; 0x21
   12f92:	b2 a1       	ldd	r27, Z+34	; 0x22
   12f94:	8f 8f       	std	Y+31, r24	; 0x1f
   12f96:	98 a3       	std	Y+32, r25	; 0x20
   12f98:	a9 a3       	std	Y+33, r26	; 0x21
   12f9a:	ba a3       	std	Y+34, r27	; 0x22
   12f9c:	83 a1       	ldd	r24, Z+35	; 0x23
   12f9e:	8b a3       	std	Y+35, r24	; 0x23
   12fa0:	84 a1       	ldd	r24, Z+36	; 0x24
   12fa2:	95 a1       	ldd	r25, Z+37	; 0x25
   12fa4:	9d a3       	std	Y+37, r25	; 0x25
   12fa6:	8c a3       	std	Y+36, r24	; 0x24
   12fa8:	86 a1       	ldd	r24, Z+38	; 0x26
   12faa:	97 a1       	ldd	r25, Z+39	; 0x27
   12fac:	a0 a5       	ldd	r26, Z+40	; 0x28
   12fae:	b1 a5       	ldd	r27, Z+41	; 0x29
   12fb0:	8e a3       	std	Y+38, r24	; 0x26
   12fb2:	9f a3       	std	Y+39, r25	; 0x27
   12fb4:	a8 a7       	std	Y+40, r26	; 0x28
   12fb6:	b9 a7       	std	Y+41, r27	; 0x29
   12fb8:	82 a5       	ldd	r24, Z+42	; 0x2a
   12fba:	8a a7       	std	Y+42, r24	; 0x2a
   12fbc:	df 91       	pop	r29
   12fbe:	cf 91       	pop	r28
   12fc0:	1f 91       	pop	r17
   12fc2:	0f 91       	pop	r16
   12fc4:	08 95       	ret

00012fc6 <alloc_device>:
   12fc6:	0f 93       	push	r16
   12fc8:	1f 93       	push	r17
   12fca:	cf 93       	push	r28
   12fcc:	df 93       	push	r29
   12fce:	ad b7       	in	r26, 0x3d	; 61
   12fd0:	be b7       	in	r27, 0x3e	; 62
   12fd2:	17 97       	sbiw	r26, 0x07	; 7
   12fd4:	0f b6       	in	r0, 0x3f	; 63
   12fd6:	f8 94       	cli
   12fd8:	be bf       	out	0x3e, r27	; 62
   12fda:	0f be       	out	0x3f, r0	; 63
   12fdc:	ad bf       	out	0x3d, r26	; 61
   12fde:	8c 01       	movw	r16, r24
   12fe0:	67 de       	rcall	.-818    	; 0x12cb0 <find_free>
   12fe2:	ec 01       	movw	r28, r24
   12fe4:	cf 3f       	cpi	r28, 0xFF	; 255
   12fe6:	8f ef       	ldi	r24, 0xFF	; 255
   12fe8:	d8 07       	cpc	r29, r24
   12fea:	89 f4       	brne	.+34     	; 0x1300e <alloc_device+0x48>
   12fec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12ff0:	80 ff       	sbrs	r24, 0
   12ff2:	a1 c0       	rjmp	.+322    	; 0x13136 <alloc_device+0x170>
   12ff4:	ed b7       	in	r30, 0x3d	; 61
   12ff6:	fe b7       	in	r31, 0x3e	; 62
   12ff8:	15 83       	std	Z+5, r17	; 0x05
   12ffa:	04 83       	std	Z+4, r16	; 0x04
   12ffc:	8c e4       	ldi	r24, 0x4C	; 76
   12ffe:	98 e1       	ldi	r25, 0x18	; 24
   13000:	a0 e0       	ldi	r26, 0x00	; 0
   13002:	81 83       	std	Z+1, r24	; 0x01
   13004:	92 83       	std	Z+2, r25	; 0x02
   13006:	a3 83       	std	Z+3, r26	; 0x03
   13008:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1300c:	94 c0       	rjmp	.+296    	; 0x13136 <alloc_device+0x170>
   1300e:	02 30       	cpi	r16, 0x02	; 2
   13010:	11 05       	cpc	r17, r1
   13012:	e1 f1       	breq	.+120    	; 0x1308c <alloc_device+0xc6>
   13014:	ec f4       	brge	.+58     	; 0x13050 <alloc_device+0x8a>
   13016:	01 30       	cpi	r16, 0x01	; 1
   13018:	11 05       	cpc	r17, r1
   1301a:	09 f0       	breq	.+2      	; 0x1301e <alloc_device+0x58>
   1301c:	76 c0       	rjmp	.+236    	; 0x1310a <alloc_device+0x144>
   1301e:	8b e2       	ldi	r24, 0x2B	; 43
   13020:	8c 9f       	mul	r24, r28
   13022:	80 01       	movw	r16, r0
   13024:	8d 9f       	mul	r24, r29
   13026:	10 0d       	add	r17, r0
   13028:	11 24       	eor	r1, r1
   1302a:	0f 50       	subi	r16, 0x0F	; 15
   1302c:	11 4e       	sbci	r17, 0xE1	; 225
   1302e:	81 e0       	ldi	r24, 0x01	; 1
   13030:	f8 01       	movw	r30, r16
   13032:	80 83       	st	Z, r24
   13034:	61 e0       	ldi	r22, 0x01	; 1
   13036:	70 e0       	ldi	r23, 0x00	; 0
   13038:	85 e1       	ldi	r24, 0x15	; 21
   1303a:	90 e0       	ldi	r25, 0x00	; 0
   1303c:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <safecalloc>
   13040:	f8 01       	movw	r30, r16
   13042:	90 a7       	std	Z+40, r25	; 0x28
   13044:	87 a3       	std	Z+39, r24	; 0x27
   13046:	61 e0       	ldi	r22, 0x01	; 1
   13048:	70 e0       	ldi	r23, 0x00	; 0
   1304a:	88 e1       	ldi	r24, 0x18	; 24
   1304c:	90 e0       	ldi	r25, 0x00	; 0
   1304e:	57 c0       	rjmp	.+174    	; 0x130fe <alloc_device+0x138>
   13050:	03 30       	cpi	r16, 0x03	; 3
   13052:	11 05       	cpc	r17, r1
   13054:	a1 f1       	breq	.+104    	; 0x130be <alloc_device+0xf8>
   13056:	04 30       	cpi	r16, 0x04	; 4
   13058:	11 05       	cpc	r17, r1
   1305a:	09 f0       	breq	.+2      	; 0x1305e <alloc_device+0x98>
   1305c:	56 c0       	rjmp	.+172    	; 0x1310a <alloc_device+0x144>
   1305e:	8b e2       	ldi	r24, 0x2B	; 43
   13060:	8c 9f       	mul	r24, r28
   13062:	80 01       	movw	r16, r0
   13064:	8d 9f       	mul	r24, r29
   13066:	10 0d       	add	r17, r0
   13068:	11 24       	eor	r1, r1
   1306a:	0f 50       	subi	r16, 0x0F	; 15
   1306c:	11 4e       	sbci	r17, 0xE1	; 225
   1306e:	84 e0       	ldi	r24, 0x04	; 4
   13070:	f8 01       	movw	r30, r16
   13072:	80 83       	st	Z, r24
   13074:	61 e0       	ldi	r22, 0x01	; 1
   13076:	70 e0       	ldi	r23, 0x00	; 0
   13078:	8b e0       	ldi	r24, 0x0B	; 11
   1307a:	90 e0       	ldi	r25, 0x00	; 0
   1307c:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <safecalloc>
   13080:	f8 01       	movw	r30, r16
   13082:	90 a7       	std	Z+40, r25	; 0x28
   13084:	87 a3       	std	Z+39, r24	; 0x27
   13086:	12 a6       	std	Z+42, r1	; 0x2a
   13088:	11 a6       	std	Z+41, r1	; 0x29
   1308a:	55 c0       	rjmp	.+170    	; 0x13136 <alloc_device+0x170>
   1308c:	8b e2       	ldi	r24, 0x2B	; 43
   1308e:	8c 9f       	mul	r24, r28
   13090:	80 01       	movw	r16, r0
   13092:	8d 9f       	mul	r24, r29
   13094:	10 0d       	add	r17, r0
   13096:	11 24       	eor	r1, r1
   13098:	0f 50       	subi	r16, 0x0F	; 15
   1309a:	11 4e       	sbci	r17, 0xE1	; 225
   1309c:	82 e0       	ldi	r24, 0x02	; 2
   1309e:	f8 01       	movw	r30, r16
   130a0:	80 83       	st	Z, r24
   130a2:	61 e0       	ldi	r22, 0x01	; 1
   130a4:	70 e0       	ldi	r23, 0x00	; 0
   130a6:	82 e3       	ldi	r24, 0x32	; 50
   130a8:	90 e0       	ldi	r25, 0x00	; 0
   130aa:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <safecalloc>
   130ae:	f8 01       	movw	r30, r16
   130b0:	90 a7       	std	Z+40, r25	; 0x28
   130b2:	87 a3       	std	Z+39, r24	; 0x27
   130b4:	61 e0       	ldi	r22, 0x01	; 1
   130b6:	70 e0       	ldi	r23, 0x00	; 0
   130b8:	86 e1       	ldi	r24, 0x16	; 22
   130ba:	90 e0       	ldi	r25, 0x00	; 0
   130bc:	20 c0       	rjmp	.+64     	; 0x130fe <alloc_device+0x138>
   130be:	8b e2       	ldi	r24, 0x2B	; 43
   130c0:	8c 9f       	mul	r24, r28
   130c2:	80 01       	movw	r16, r0
   130c4:	8d 9f       	mul	r24, r29
   130c6:	10 0d       	add	r17, r0
   130c8:	11 24       	eor	r1, r1
   130ca:	0f 50       	subi	r16, 0x0F	; 15
   130cc:	11 4e       	sbci	r17, 0xE1	; 225
   130ce:	83 e0       	ldi	r24, 0x03	; 3
   130d0:	f8 01       	movw	r30, r16
   130d2:	80 83       	st	Z, r24
   130d4:	61 e0       	ldi	r22, 0x01	; 1
   130d6:	70 e0       	ldi	r23, 0x00	; 0
   130d8:	82 e3       	ldi	r24, 0x32	; 50
   130da:	90 e0       	ldi	r25, 0x00	; 0
   130dc:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <safecalloc>
   130e0:	f8 01       	movw	r30, r16
   130e2:	90 a7       	std	Z+40, r25	; 0x28
   130e4:	87 a3       	std	Z+39, r24	; 0x27
   130e6:	61 e0       	ldi	r22, 0x01	; 1
   130e8:	70 e0       	ldi	r23, 0x00	; 0
   130ea:	86 e1       	ldi	r24, 0x16	; 22
   130ec:	90 e0       	ldi	r25, 0x00	; 0
   130ee:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <safecalloc>
   130f2:	f8 01       	movw	r30, r16
   130f4:	92 a7       	std	Z+42, r25	; 0x2a
   130f6:	81 a7       	std	Z+41, r24	; 0x29
   130f8:	ce 01       	movw	r24, r28
   130fa:	eb de       	rcall	.-554    	; 0x12ed2 <SS80_Set_Defaults>
   130fc:	1c c0       	rjmp	.+56     	; 0x13136 <alloc_device+0x170>
   130fe:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <safecalloc>
   13102:	f8 01       	movw	r30, r16
   13104:	92 a7       	std	Z+42, r25	; 0x2a
   13106:	81 a7       	std	Z+41, r24	; 0x29
   13108:	16 c0       	rjmp	.+44     	; 0x13136 <alloc_device+0x170>
   1310a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1310e:	80 ff       	sbrs	r24, 0
   13110:	10 c0       	rjmp	.+32     	; 0x13132 <alloc_device+0x16c>
   13112:	c8 01       	movw	r24, r16
   13114:	b4 dd       	rcall	.-1176   	; 0x12c7e <type_to_str>
   13116:	ed b7       	in	r30, 0x3d	; 61
   13118:	fe b7       	in	r31, 0x3e	; 62
   1311a:	97 83       	std	Z+7, r25	; 0x07
   1311c:	86 83       	std	Z+6, r24	; 0x06
   1311e:	15 83       	std	Z+5, r17	; 0x05
   13120:	04 83       	std	Z+4, r16	; 0x04
   13122:	8a e2       	ldi	r24, 0x2A	; 42
   13124:	98 e1       	ldi	r25, 0x18	; 24
   13126:	a0 e0       	ldi	r26, 0x00	; 0
   13128:	81 83       	std	Z+1, r24	; 0x01
   1312a:	92 83       	std	Z+2, r25	; 0x02
   1312c:	a3 83       	std	Z+3, r26	; 0x03
   1312e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   13132:	cf ef       	ldi	r28, 0xFF	; 255
   13134:	df ef       	ldi	r29, 0xFF	; 255
   13136:	ce 01       	movw	r24, r28
   13138:	cd b7       	in	r28, 0x3d	; 61
   1313a:	de b7       	in	r29, 0x3e	; 62
   1313c:	27 96       	adiw	r28, 0x07	; 7
   1313e:	e4 e0       	ldi	r30, 0x04	; 4
   13140:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

00013144 <init_Devices>:
   13144:	cf 93       	push	r28
   13146:	df 93       	push	r29
   13148:	10 92 74 19 	sts	0x1974, r1	; 0x801974 <stack_ind+0x1>
   1314c:	10 92 73 19 	sts	0x1973, r1	; 0x801973 <stack_ind>
   13150:	e1 ef       	ldi	r30, 0xF1	; 241
   13152:	fe e1       	ldi	r31, 0x1E	; 30
   13154:	9f ef       	ldi	r25, 0xFF	; 255
   13156:	80 e2       	ldi	r24, 0x20	; 32
   13158:	10 82       	st	Z, r1
   1315a:	11 82       	std	Z+1, r1	; 0x01
   1315c:	92 83       	std	Z+2, r25	; 0x02
   1315e:	13 82       	std	Z+3, r1	; 0x03
   13160:	14 82       	std	Z+4, r1	; 0x04
   13162:	15 82       	std	Z+5, r1	; 0x05
   13164:	16 82       	std	Z+6, r1	; 0x06
   13166:	df 01       	movw	r26, r30
   13168:	17 96       	adiw	r26, 0x07	; 7
   1316a:	ed 01       	movw	r28, r26
   1316c:	28 2f       	mov	r18, r24
   1316e:	19 92       	st	Y+, r1
   13170:	2a 95       	dec	r18
   13172:	e9 f7       	brne	.-6      	; 0x1316e <init_Devices+0x2a>
   13174:	10 a6       	std	Z+40, r1	; 0x28
   13176:	17 a2       	std	Z+39, r1	; 0x27
   13178:	12 a6       	std	Z+42, r1	; 0x2a
   1317a:	11 a6       	std	Z+41, r1	; 0x29
   1317c:	bb 96       	adiw	r30, 0x2b	; 43
   1317e:	c0 e2       	ldi	r28, 0x20	; 32
   13180:	e5 3f       	cpi	r30, 0xF5	; 245
   13182:	fc 07       	cpc	r31, r28
   13184:	49 f7       	brne	.-46     	; 0x13158 <init_Devices+0x14>
   13186:	df 91       	pop	r29
   13188:	cf 91       	pop	r28
   1318a:	08 95       	ret

0001318c <push_state>:
   1318c:	20 91 73 19 	lds	r18, 0x1973	; 0x801973 <stack_ind>
   13190:	30 91 74 19 	lds	r19, 0x1974	; 0x801974 <stack_ind+0x1>
   13194:	25 30       	cpi	r18, 0x05	; 5
   13196:	31 05       	cpc	r19, r1
   13198:	7c f4       	brge	.+30     	; 0x131b8 <push_state+0x2c>
   1319a:	a9 01       	movw	r20, r18
   1319c:	4f 5f       	subi	r20, 0xFF	; 255
   1319e:	5f 4f       	sbci	r21, 0xFF	; 255
   131a0:	50 93 74 19 	sts	0x1974, r21	; 0x801974 <stack_ind+0x1>
   131a4:	40 93 73 19 	sts	0x1973, r20	; 0x801973 <stack_ind>
   131a8:	22 0f       	add	r18, r18
   131aa:	33 1f       	adc	r19, r19
   131ac:	f9 01       	movw	r30, r18
   131ae:	e7 59       	subi	r30, 0x97	; 151
   131b0:	f6 4e       	sbci	r31, 0xE6	; 230
   131b2:	80 83       	st	Z, r24
   131b4:	91 83       	std	Z+1, r25	; 0x01
   131b6:	08 95       	ret
   131b8:	80 e0       	ldi	r24, 0x00	; 0
   131ba:	90 e0       	ldi	r25, 0x00	; 0
   131bc:	08 95       	ret

000131be <pop_state>:
   131be:	80 91 73 19 	lds	r24, 0x1973	; 0x801973 <stack_ind>
   131c2:	90 91 74 19 	lds	r25, 0x1974	; 0x801974 <stack_ind+0x1>
   131c6:	18 16       	cp	r1, r24
   131c8:	19 06       	cpc	r1, r25
   131ca:	6c f4       	brge	.+26     	; 0x131e6 <pop_state+0x28>
   131cc:	01 97       	sbiw	r24, 0x01	; 1
   131ce:	90 93 74 19 	sts	0x1974, r25	; 0x801974 <stack_ind+0x1>
   131d2:	80 93 73 19 	sts	0x1973, r24	; 0x801973 <stack_ind>
   131d6:	88 0f       	add	r24, r24
   131d8:	99 1f       	adc	r25, r25
   131da:	fc 01       	movw	r30, r24
   131dc:	e7 59       	subi	r30, 0x97	; 151
   131de:	f6 4e       	sbci	r31, 0xE6	; 230
   131e0:	80 81       	ld	r24, Z
   131e2:	91 81       	ldd	r25, Z+1	; 0x01
   131e4:	08 95       	ret
   131e6:	80 e0       	ldi	r24, 0x00	; 0
   131e8:	90 e0       	ldi	r25, 0x00	; 0
   131ea:	08 95       	ret

000131ec <set_Config_Defaults>:
/// ===============================================
///@brief Set Defaults for any missing disk or printer devices
/// These are only used if the Config file omits them or is empty
/// @return  void
void set_Config_Defaults()
{
   131ec:	08 95       	ret

000131ee <hpdir_set_device>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
   131ee:	0f 93       	push	r16
   131f0:	1f 93       	push	r17
   131f2:	cf 93       	push	r28
   131f4:	df 93       	push	r29
   131f6:	00 d0       	rcall	.+0      	; 0x131f8 <hpdir_set_device+0xa>
   131f8:	1f 92       	push	r1
    if(Devices[index].TYPE == SS80_TYPE)
   131fa:	2b e2       	ldi	r18, 0x2B	; 43
   131fc:	ac 01       	movw	r20, r24
   131fe:	24 9f       	mul	r18, r20
   13200:	c0 01       	movw	r24, r0
   13202:	25 9f       	mul	r18, r21
   13204:	90 0d       	add	r25, r0
   13206:	11 24       	eor	r1, r1
   13208:	ec 01       	movw	r28, r24
   1320a:	cf 50       	subi	r28, 0x0F	; 15
   1320c:	d1 4e       	sbci	r29, 0xE1	; 225
   1320e:	28 81       	ld	r18, Y
   13210:	23 30       	cpi	r18, 0x03	; 3
   13212:	a1 f5       	brne	.+104    	; 0x1327c <hpdir_set_device+0x8e>
    {
        SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
   13214:	ef a1       	ldd	r30, Y+39	; 0x27
   13216:	f8 a5       	ldd	r31, Y+40	; 0x28
        SS80p->CONFIG.ID                = hpdir.ID;
   13218:	20 91 75 21 	lds	r18, 0x2175	; 0x802175 <hpdir+0x80>
   1321c:	30 91 76 21 	lds	r19, 0x2176	; 0x802176 <hpdir+0x81>
   13220:	35 83       	std	Z+5, r19	; 0x05
   13222:	24 83       	std	Z+4, r18	; 0x04
        SS80p->UNIT.DEVICE_NUMBER       = hpdir.DEVICE_NUMBER;
   13224:	40 91 81 21 	lds	r20, 0x2181	; 0x802181 <hpdir+0x8c>
   13228:	50 91 82 21 	lds	r21, 0x2182	; 0x802182 <hpdir+0x8d>
   1322c:	60 91 83 21 	lds	r22, 0x2183	; 0x802183 <hpdir+0x8e>
   13230:	70 91 84 21 	lds	r23, 0x2184	; 0x802184 <hpdir+0x8f>
   13234:	44 87       	std	Z+12, r20	; 0x0c
   13236:	55 87       	std	Z+13, r21	; 0x0d
   13238:	66 87       	std	Z+14, r22	; 0x0e
   1323a:	77 87       	std	Z+15, r23	; 0x0f
        SS80p->UNIT.BYTES_PER_BLOCK     = hpdir.BYTES_PER_SECTOR;
   1323c:	20 91 95 21 	lds	r18, 0x2195	; 0x802195 <hpdir+0xa0>
   13240:	30 91 96 21 	lds	r19, 0x2196	; 0x802196 <hpdir+0xa1>
   13244:	31 8b       	std	Z+17, r19	; 0x11
   13246:	20 8b       	std	Z+16, r18	; 0x10

// CHS NOT used in this emulator!
        SS80p->VOLUME.MAX_CYLINDER      = 0;      // hpdir.CYLINDERS-1;
   13248:	17 8e       	std	Z+31, r1	; 0x1f
   1324a:	10 a2       	std	Z+32, r1	; 0x20
   1324c:	11 a2       	std	Z+33, r1	; 0x21
   1324e:	12 a2       	std	Z+34, r1	; 0x22
        SS80p->VOLUME.MAX_HEAD          = 0;      // hpdir.HEADS-1;
   13250:	13 a2       	std	Z+35, r1	; 0x23
        SS80p->VOLUME.MAX_SECTOR        = 0;      // hpdir.SECTORS-1;
   13252:	15 a2       	std	Z+37, r1	; 0x25
   13254:	14 a2       	std	Z+36, r1	; 0x24

        SS80p->VOLUME.MAX_BLOCK_NUMBER  = hpdir.BLOCKS-1;
   13256:	40 91 a1 21 	lds	r20, 0x21A1	; 0x8021a1 <hpdir+0xac>
   1325a:	50 91 a2 21 	lds	r21, 0x21A2	; 0x8021a2 <hpdir+0xad>
   1325e:	60 91 a3 21 	lds	r22, 0x21A3	; 0x8021a3 <hpdir+0xae>
   13262:	70 91 a4 21 	lds	r23, 0x21A4	; 0x8021a4 <hpdir+0xaf>
   13266:	8a 01       	movw	r16, r20
   13268:	9b 01       	movw	r18, r22
   1326a:	01 50       	subi	r16, 0x01	; 1
   1326c:	11 09       	sbc	r17, r1
   1326e:	21 09       	sbc	r18, r1
   13270:	31 09       	sbc	r19, r1
   13272:	06 a3       	std	Z+38, r16	; 0x26
   13274:	17 a3       	std	Z+39, r17	; 0x27
   13276:	20 a7       	std	Z+40, r18	; 0x28
   13278:	31 a7       	std	Z+41, r19	; 0x29
   1327a:	2a c0       	rjmp	.+84     	; 0x132d0 <hpdir_set_device+0xe2>
        Devices[index].BLOCKS = hpdir.BLOCKS;
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
    }

#ifdef AMIGO
    else if(Devices[index].TYPE == AMIGO_TYPE)
   1327c:	21 30       	cpi	r18, 0x01	; 1
   1327e:	a9 f5       	brne	.+106    	; 0x132ea <hpdir_set_device+0xfc>
    {
        AMIGODiskType *AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13280:	ef a1       	ldd	r30, Y+39	; 0x27
   13282:	f8 a5       	ldd	r31, Y+40	; 0x28
        AMIGOp->CONFIG.ID = hpdir.ID;
   13284:	20 91 75 21 	lds	r18, 0x2175	; 0x802175 <hpdir+0x80>
   13288:	30 91 76 21 	lds	r19, 0x2176	; 0x802176 <hpdir+0x81>
   1328c:	35 83       	std	Z+5, r19	; 0x05
   1328e:	24 83       	std	Z+4, r18	; 0x04
        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   13290:	20 91 95 21 	lds	r18, 0x2195	; 0x802195 <hpdir+0xa0>
   13294:	30 91 96 21 	lds	r19, 0x2196	; 0x802196 <hpdir+0xa1>
   13298:	37 83       	std	Z+7, r19	; 0x07
   1329a:	26 83       	std	Z+6, r18	; 0x06
        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   1329c:	20 91 91 21 	lds	r18, 0x2191	; 0x802191 <hpdir+0x9c>
   132a0:	30 91 92 21 	lds	r19, 0x2192	; 0x802192 <hpdir+0x9d>
   132a4:	31 87       	std	Z+9, r19	; 0x09
   132a6:	20 87       	std	Z+8, r18	; 0x08
        AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   132a8:	20 91 8d 21 	lds	r18, 0x218D	; 0x80218d <hpdir+0x98>
   132ac:	30 91 8e 21 	lds	r19, 0x218E	; 0x80218e <hpdir+0x99>
   132b0:	33 87       	std	Z+11, r19	; 0x0b
   132b2:	22 87       	std	Z+10, r18	; 0x0a
        AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   132b4:	20 91 89 21 	lds	r18, 0x2189	; 0x802189 <hpdir+0x94>
   132b8:	30 91 8a 21 	lds	r19, 0x218A	; 0x80218a <hpdir+0x95>
   132bc:	35 87       	std	Z+13, r19	; 0x0d
   132be:	24 87       	std	Z+12, r18	; 0x0c
        Devices[index].BLOCKS = hpdir.BLOCKS;
   132c0:	40 91 a1 21 	lds	r20, 0x21A1	; 0x8021a1 <hpdir+0xac>
   132c4:	50 91 a2 21 	lds	r21, 0x21A2	; 0x8021a2 <hpdir+0xad>
   132c8:	60 91 a3 21 	lds	r22, 0x21A3	; 0x8021a3 <hpdir+0xae>
   132cc:	70 91 a4 21 	lds	r23, 0x21A4	; 0x8021a4 <hpdir+0xaf>
   132d0:	4b 83       	std	Y+3, r20	; 0x03
   132d2:	5c 83       	std	Y+4, r21	; 0x04
   132d4:	6d 83       	std	Y+5, r22	; 0x05
   132d6:	7e 83       	std	Y+6, r23	; 0x06
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   132d8:	4e e1       	ldi	r20, 0x1E	; 30
   132da:	50 e0       	ldi	r21, 0x00	; 0
   132dc:	65 ef       	ldi	r22, 0xF5	; 245
   132de:	70 e2       	ldi	r23, 0x20	; 32
   132e0:	88 50       	subi	r24, 0x08	; 8
   132e2:	91 4e       	sbci	r25, 0xE1	; 225
   132e4:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <strncpy>
   132e8:	0a c0       	rjmp	.+20     	; 0x132fe <hpdir_set_device+0x110>
    }
#endif
    else
    {
        printf("hpdir_parameters invalid TYPE\n");
   132ea:	8b e0       	ldi	r24, 0x0B	; 11
   132ec:	98 e1       	ldi	r25, 0x18	; 24
   132ee:	a0 e0       	ldi	r26, 0x00	; 0
   132f0:	ed b7       	in	r30, 0x3d	; 61
   132f2:	fe b7       	in	r31, 0x3e	; 62
   132f4:	81 83       	std	Z+1, r24	; 0x01
   132f6:	92 83       	std	Z+2, r25	; 0x02
   132f8:	a3 83       	std	Z+3, r26	; 0x03
   132fa:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    }

}
   132fe:	cd b7       	in	r28, 0x3d	; 61
   13300:	de b7       	in	r29, 0x3e	; 62
   13302:	23 96       	adiw	r28, 0x03	; 3
   13304:	e4 e0       	ldi	r30, 0x04	; 4
   13306:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

0001330a <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   1330a:	cf 93       	push	r28
   1330c:	df 93       	push	r29
   1330e:	ec 01       	movw	r28, r24
   13310:	cb 01       	movw	r24, r22
    if ( hpdir_find_drive( model, 0 ,1) )
   13312:	41 e0       	ldi	r20, 0x01	; 1
   13314:	50 e0       	ldi	r21, 0x00	; 0
   13316:	60 e0       	ldi	r22, 0x00	; 0
   13318:	70 e0       	ldi	r23, 0x00	; 0
   1331a:	ad d7       	rcall	.+3930   	; 0x14276 <hpdir_find_drive>
   1331c:	89 2b       	or	r24, r25
   1331e:	11 f0       	breq	.+4      	; 0x13324 <hpdir_set_parameters+0x1a>
        hpdir_set_device(index);
   13320:	ce 01       	movw	r24, r28
   13322:	65 df       	rcall	.-310    	; 0x131ee <hpdir_set_device>
}
   13324:	df 91       	pop	r29
   13326:	cf 91       	pop	r28
   13328:	08 95       	ret

0001332a <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   1332a:	4f 92       	push	r4
   1332c:	5f 92       	push	r5
   1332e:	6f 92       	push	r6
   13330:	7f 92       	push	r7
   13332:	8f 92       	push	r8
   13334:	af 92       	push	r10
   13336:	bf 92       	push	r11
   13338:	cf 92       	push	r12
   1333a:	df 92       	push	r13
   1333c:	ef 92       	push	r14
   1333e:	0f 93       	push	r16
   13340:	1f 93       	push	r17
   13342:	cf 93       	push	r28
   13344:	df 93       	push	r29
   13346:	00 d0       	rcall	.+0      	; 0x13348 <Post_Config+0x1e>
   13348:	00 d0       	rcall	.+0      	; 0x1334a <Post_Config+0x20>
   1334a:	1f 92       	push	r1
   1334c:	c1 ef       	ldi	r28, 0xF1	; 241
   1334e:	de e1       	ldi	r29, 0x1E	; 30
   13350:	85 ef       	ldi	r24, 0xF5	; 245
   13352:	48 2e       	mov	r4, r24
   13354:	80 e2       	ldi	r24, 0x20	; 32
   13356:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   13358:	a1 2c       	mov	r10, r1
   1335a:	bb 24       	eor	r11, r11
   1335c:	b3 94       	inc	r11
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   1335e:	8e e9       	ldi	r24, 0x9E	; 158
   13360:	97 e1       	ldi	r25, 0x17	; 23
   13362:	6c 01       	movw	r12, r24
   13364:	e1 2c       	mov	r14, r1
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   13366:	85 ed       	ldi	r24, 0xD5	; 213
   13368:	97 e1       	ldi	r25, 0x17	; 23
   1336a:	3c 01       	movw	r6, r24
   1336c:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   1336e:	88 81       	ld	r24, Y
   13370:	88 23       	and	r24, r24
   13372:	09 f4       	brne	.+2      	; 0x13376 <Post_Config+0x4c>
   13374:	57 c0       	rjmp	.+174    	; 0x13424 <Post_Config+0xfa>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13376:	83 30       	cpi	r24, 0x03	; 3
   13378:	f9 f4       	brne	.+62     	; 0x133b8 <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   1337a:	0f a1       	ldd	r16, Y+39	; 0x27
   1337c:	18 a5       	ldd	r17, Y+40	; 0x28
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   1337e:	f8 01       	movw	r30, r16
   13380:	80 89       	ldd	r24, Z+16	; 0x10
   13382:	91 89       	ldd	r25, Z+17	; 0x11
   13384:	81 15       	cp	r24, r1
   13386:	91 40       	sbci	r25, 0x01	; 1
   13388:	59 f0       	breq	.+22     	; 0x133a0 <Post_Config+0x76>
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   1338a:	ce 01       	movw	r24, r28
   1338c:	07 96       	adiw	r24, 0x07	; 7
   1338e:	ed b7       	in	r30, 0x3d	; 61
   13390:	fe b7       	in	r31, 0x3e	; 62
   13392:	95 83       	std	Z+5, r25	; 0x05
   13394:	84 83       	std	Z+4, r24	; 0x04
   13396:	61 82       	std	Z+1, r6	; 0x01
   13398:	72 82       	std	Z+2, r7	; 0x02
   1339a:	83 82       	std	Z+3, r8	; 0x03
   1339c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            }
            sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
            Devices[i].BLOCKS = sectors;
   133a0:	f8 01       	movw	r30, r16
   133a2:	86 a1       	ldd	r24, Z+38	; 0x26
   133a4:	97 a1       	ldd	r25, Z+39	; 0x27
   133a6:	a0 a5       	ldd	r26, Z+40	; 0x28
   133a8:	b1 a5       	ldd	r27, Z+41	; 0x29
   133aa:	01 96       	adiw	r24, 0x01	; 1
   133ac:	a1 1d       	adc	r26, r1
   133ae:	b1 1d       	adc	r27, r1
   133b0:	8b 83       	std	Y+3, r24	; 0x03
   133b2:	9c 83       	std	Y+4, r25	; 0x04
   133b4:	ad 83       	std	Y+5, r26	; 0x05
   133b6:	be 83       	std	Y+6, r27	; 0x06
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   133b8:	88 81       	ld	r24, Y
   133ba:	81 30       	cpi	r24, 0x01	; 1
   133bc:	99 f5       	brne	.+102    	; 0x13424 <Post_Config+0xfa>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   133be:	0f a1       	ldd	r16, Y+39	; 0x27
   133c0:	18 a5       	ldd	r17, Y+40	; 0x28
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   133c2:	f8 01       	movw	r30, r16
   133c4:	86 81       	ldd	r24, Z+6	; 0x06
   133c6:	97 81       	ldd	r25, Z+7	; 0x07
   133c8:	81 15       	cp	r24, r1
   133ca:	91 40       	sbci	r25, 0x01	; 1
   133cc:	71 f0       	breq	.+28     	; 0x133ea <Post_Config+0xc0>
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   133ce:	f8 01       	movw	r30, r16
   133d0:	b7 82       	std	Z+7, r11	; 0x07
   133d2:	a6 82       	std	Z+6, r10	; 0x06
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   133d4:	ce 01       	movw	r24, r28
   133d6:	07 96       	adiw	r24, 0x07	; 7
   133d8:	ed b7       	in	r30, 0x3d	; 61
   133da:	fe b7       	in	r31, 0x3e	; 62
   133dc:	95 83       	std	Z+5, r25	; 0x05
   133de:	84 83       	std	Z+4, r24	; 0x04
   133e0:	c1 82       	std	Z+1, r12	; 0x01
   133e2:	d2 82       	std	Z+2, r13	; 0x02
   133e4:	e3 82       	std	Z+3, r14	; 0x03
   133e6:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            }
            sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                * AMIGOp->GEOMETRY.HEADS
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
   133ea:	f8 01       	movw	r30, r16
   133ec:	20 85       	ldd	r18, Z+8	; 0x08
   133ee:	31 85       	ldd	r19, Z+9	; 0x09
   133f0:	82 85       	ldd	r24, Z+10	; 0x0a
   133f2:	93 85       	ldd	r25, Z+11	; 0x0b
   133f4:	28 9f       	mul	r18, r24
   133f6:	a0 01       	movw	r20, r0
   133f8:	29 9f       	mul	r18, r25
   133fa:	50 0d       	add	r21, r0
   133fc:	38 9f       	mul	r19, r24
   133fe:	50 0d       	add	r21, r0
   13400:	11 24       	eor	r1, r1
   13402:	24 85       	ldd	r18, Z+12	; 0x0c
   13404:	35 85       	ldd	r19, Z+13	; 0x0d
   13406:	42 9f       	mul	r20, r18
   13408:	c0 01       	movw	r24, r0
   1340a:	43 9f       	mul	r20, r19
   1340c:	90 0d       	add	r25, r0
   1340e:	52 9f       	mul	r21, r18
   13410:	90 0d       	add	r25, r0
   13412:	11 24       	eor	r1, r1
   13414:	09 2e       	mov	r0, r25
   13416:	00 0c       	add	r0, r0
   13418:	aa 0b       	sbc	r26, r26
   1341a:	bb 0b       	sbc	r27, r27
   1341c:	8b 83       	std	Y+3, r24	; 0x03
   1341e:	9c 83       	std	Y+4, r25	; 0x04
   13420:	ad 83       	std	Y+5, r26	; 0x05
   13422:	be 83       	std	Y+6, r27	; 0x06
   13424:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13426:	4c 16       	cp	r4, r28
   13428:	5d 06       	cpc	r5, r29
   1342a:	09 f0       	breq	.+2      	; 0x1342e <Post_Config+0x104>
   1342c:	a0 cf       	rjmp	.-192    	; 0x1336e <Post_Config+0x44>
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
        }
#endif                                    // #ifdef AMIGO
    }
}
   1342e:	0f 90       	pop	r0
   13430:	0f 90       	pop	r0
   13432:	0f 90       	pop	r0
   13434:	0f 90       	pop	r0
   13436:	0f 90       	pop	r0
   13438:	df 91       	pop	r29
   1343a:	cf 91       	pop	r28
   1343c:	1f 91       	pop	r17
   1343e:	0f 91       	pop	r16
   13440:	ef 90       	pop	r14
   13442:	df 90       	pop	r13
   13444:	cf 90       	pop	r12
   13446:	bf 90       	pop	r11
   13448:	af 90       	pop	r10
   1344a:	8f 90       	pop	r8
   1344c:	7f 90       	pop	r7
   1344e:	6f 90       	pop	r6
   13450:	5f 90       	pop	r5
   13452:	4f 90       	pop	r4
   13454:	08 95       	ret

00013456 <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   13456:	af e1       	ldi	r26, 0x1F	; 31
   13458:	b1 e0       	ldi	r27, 0x01	; 1
   1345a:	e1 e3       	ldi	r30, 0x31	; 49
   1345c:	fa e9       	ldi	r31, 0x9A	; 154
   1345e:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
   13462:	8c 01       	movw	r16, r24
    int lines = 0;

    char str[128];
    char token[128];

    init_Devices();
   13464:	6f de       	rcall	.-802    	; 0x13144 <init_Devices>

    printf("Reading: %s\n", name);
   13466:	ed b7       	in	r30, 0x3d	; 61
   13468:	fe b7       	in	r31, 0x3e	; 62
   1346a:	15 83       	std	Z+5, r17	; 0x05
   1346c:	04 83       	std	Z+4, r16	; 0x04
   1346e:	81 e8       	ldi	r24, 0x81	; 129
   13470:	9d e1       	ldi	r25, 0x1D	; 29
   13472:	a0 e0       	ldi	r26, 0x00	; 0
   13474:	81 83       	std	Z+1, r24	; 0x01
   13476:	92 83       	std	Z+2, r25	; 0x02
   13478:	a3 83       	std	Z+3, r26	; 0x03
   1347a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    cfg = fopen(name, "rb");
   1347e:	6e ef       	ldi	r22, 0xFE	; 254
   13480:	78 e0       	ldi	r23, 0x08	; 8
   13482:	c8 01       	movw	r24, r16
   13484:	0e 94 2b 7d 	call	0xfa56	; 0xfa56 <fopen>
   13488:	c4 5f       	subi	r28, 0xF4	; 244
   1348a:	de 4f       	sbci	r29, 0xFE	; 254
   1348c:	99 83       	std	Y+1, r25	; 0x01
   1348e:	88 83       	st	Y, r24
   13490:	cc 50       	subi	r28, 0x0C	; 12
   13492:	d1 40       	sbci	r29, 0x01	; 1
    if(cfg == NULL)
   13494:	89 2b       	or	r24, r25
   13496:	09 f4       	brne	.+2      	; 0x1349a <Read_Config+0x44>
   13498:	59 c0       	rjmp	.+178    	; 0x1354c <Read_Config+0xf6>
   1349a:	41 2c       	mov	r4, r1
   1349c:	51 2c       	mov	r5, r1
   1349e:	c1 2c       	mov	r12, r1
   134a0:	d1 2c       	mov	r13, r1
   134a2:	c8 5f       	subi	r28, 0xF8	; 248
   134a4:	de 4f       	sbci	r29, 0xFE	; 254
   134a6:	19 82       	std	Y+1, r1	; 0x01
   134a8:	18 82       	st	Y, r1
   134aa:	c8 50       	subi	r28, 0x08	; 8
   134ac:	d1 40       	sbci	r29, 0x01	; 1
   134ae:	61 2c       	mov	r6, r1
   134b0:	71 2c       	mov	r7, r1
   134b2:	c6 5f       	subi	r28, 0xF6	; 246
   134b4:	de 4f       	sbci	r29, 0xFE	; 254
   134b6:	19 82       	std	Y+1, r1	; 0x01
   134b8:	18 82       	st	Y, r1
   134ba:	ca 50       	subi	r28, 0x0A	; 10
   134bc:	d1 40       	sbci	r29, 0x01	; 1
   134be:	e1 2c       	mov	r14, r1
   134c0:	f1 2c       	mov	r15, r1
   134c2:	21 2c       	mov	r2, r1
   134c4:	31 2c       	mov	r3, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   134c6:	80 ed       	ldi	r24, 0xD0	; 208
   134c8:	9a e1       	ldi	r25, 0x1A	; 26
   134ca:	9c 01       	movw	r18, r24
   134cc:	40 e0       	ldi	r20, 0x00	; 0
   134ce:	c2 5f       	subi	r28, 0xF2	; 242
   134d0:	de 4f       	sbci	r29, 0xFE	; 254
   134d2:	28 83       	st	Y, r18
   134d4:	39 83       	std	Y+1, r19	; 0x01
   134d6:	4a 83       	std	Y+2, r20	; 0x02
   134d8:	ce 50       	subi	r28, 0x0E	; 14
   134da:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   134dc:	82 ef       	ldi	r24, 0xF2	; 242
   134de:	9a e1       	ldi	r25, 0x1A	; 26
   134e0:	9c 01       	movw	r18, r24
   134e2:	40 e0       	ldi	r20, 0x00	; 0
   134e4:	cf 5e       	subi	r28, 0xEF	; 239
   134e6:	de 4f       	sbci	r29, 0xFE	; 254
   134e8:	28 83       	st	Y, r18
   134ea:	39 83       	std	Y+1, r19	; 0x01
   134ec:	4a 83       	std	Y+2, r20	; 0x02
   134ee:	c1 51       	subi	r28, 0x11	; 17
   134f0:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   134f2:	82 e2       	ldi	r24, 0x22	; 34
   134f4:	9b e1       	ldi	r25, 0x1B	; 27
   134f6:	9c 01       	movw	r18, r24
   134f8:	40 e0       	ldi	r20, 0x00	; 0
   134fa:	cc 5e       	subi	r28, 0xEC	; 236
   134fc:	de 4f       	sbci	r29, 0xFE	; 254
   134fe:	28 83       	st	Y, r18
   13500:	39 83       	std	Y+1, r19	; 0x01
   13502:	4a 83       	std	Y+2, r20	; 0x02
   13504:	c4 51       	subi	r28, 0x14	; 20
   13506:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13508:	81 e5       	ldi	r24, 0x51	; 81
   1350a:	9b e1       	ldi	r25, 0x1B	; 27
   1350c:	9c 01       	movw	r18, r24
   1350e:	40 e0       	ldi	r20, 0x00	; 0
   13510:	c9 5e       	subi	r28, 0xE9	; 233
   13512:	de 4f       	sbci	r29, 0xFE	; 254
   13514:	28 83       	st	Y, r18
   13516:	39 83       	std	Y+1, r19	; 0x01
   13518:	4a 83       	std	Y+2, r20	; 0x02
   1351a:	c7 51       	subi	r28, 0x17	; 23
   1351c:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   1351e:	81 e8       	ldi	r24, 0x81	; 129
   13520:	9b e1       	ldi	r25, 0x1B	; 27
   13522:	9c 01       	movw	r18, r24
   13524:	40 e0       	ldi	r20, 0x00	; 0
   13526:	c6 5e       	subi	r28, 0xE6	; 230
   13528:	de 4f       	sbci	r29, 0xFE	; 254
   1352a:	28 83       	st	Y, r18
   1352c:	39 83       	std	Y+1, r19	; 0x01
   1352e:	4a 83       	std	Y+2, r20	; 0x02
   13530:	ca 51       	subi	r28, 0x1A	; 26
   13532:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13534:	8f ea       	ldi	r24, 0xAF	; 175
   13536:	9b e1       	ldi	r25, 0x1B	; 27
   13538:	9c 01       	movw	r18, r24
   1353a:	40 e0       	ldi	r20, 0x00	; 0
   1353c:	c3 5e       	subi	r28, 0xE3	; 227
   1353e:	de 4f       	sbci	r29, 0xFE	; 254
   13540:	28 83       	st	Y, r18
   13542:	39 83       	std	Y+1, r19	; 0x01
   13544:	4a 83       	std	Y+2, r20	; 0x02
   13546:	cd 51       	subi	r28, 0x1D	; 29
   13548:	d1 40       	sbci	r29, 0x01	; 1
   1354a:	26 c0       	rjmp	.+76     	; 0x13598 <Read_Config+0x142>
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   1354c:	8d e5       	ldi	r24, 0x5D	; 93
   1354e:	9e e0       	ldi	r25, 0x0E	; 14
   13550:	0e 94 5c 77 	call	0xeeb8	; 0xeeb8 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   13554:	ed b7       	in	r30, 0x3d	; 61
   13556:	fe b7       	in	r31, 0x3e	; 62
   13558:	15 83       	std	Z+5, r17	; 0x05
   1355a:	04 83       	std	Z+4, r16	; 0x04
   1355c:	83 e6       	ldi	r24, 0x63	; 99
   1355e:	9d e1       	ldi	r25, 0x1D	; 29
   13560:	a0 e0       	ldi	r26, 0x00	; 0
   13562:	81 83       	std	Z+1, r24	; 0x01
   13564:	92 83       	std	Z+2, r25	; 0x02
   13566:	a3 83       	std	Z+3, r26	; 0x03
   13568:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        set_Config_Defaults();
        return(errors);
   1356c:	81 e0       	ldi	r24, 0x01	; 1
   1356e:	90 e0       	ldi	r25, 0x00	; 0
   13570:	95 c3       	rjmp	.+1834   	; 0x13c9c <Read_Config+0x846>
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   13572:	ff ef       	ldi	r31, 0xFF	; 255
   13574:	4f 1a       	sub	r4, r31
   13576:	5f 0a       	sbc	r5, r31

        ptr = get_token(str, token, sizeof(token)-2);
   13578:	4e e7       	ldi	r20, 0x7E	; 126
   1357a:	50 e0       	ldi	r21, 0x00	; 0
   1357c:	9e 01       	movw	r18, r28
   1357e:	28 5f       	subi	r18, 0xF8	; 248
   13580:	3f 4f       	sbci	r19, 0xFF	; 255
   13582:	49 01       	movw	r8, r18
   13584:	b9 01       	movw	r22, r18
   13586:	ce 01       	movw	r24, r28
   13588:	88 57       	subi	r24, 0x78	; 120
   1358a:	9f 4f       	sbci	r25, 0xFF	; 255
   1358c:	0e 94 04 31 	call	0x6208	; 0x6208 <get_token>
   13590:	5c 01       	movw	r10, r24

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13592:	88 85       	ldd	r24, Y+8	; 0x08
   13594:	81 11       	cpse	r24, r1
   13596:	10 c0       	rjmp	.+32     	; 0x135b8 <Read_Config+0x162>
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13598:	c4 5f       	subi	r28, 0xF4	; 244
   1359a:	de 4f       	sbci	r29, 0xFE	; 254
   1359c:	48 81       	ld	r20, Y
   1359e:	59 81       	ldd	r21, Y+1	; 0x01
   135a0:	cc 50       	subi	r28, 0x0C	; 12
   135a2:	d1 40       	sbci	r29, 0x01	; 1
   135a4:	6e e7       	ldi	r22, 0x7E	; 126
   135a6:	70 e0       	ldi	r23, 0x00	; 0
   135a8:	ce 01       	movw	r24, r28
   135aa:	88 57       	subi	r24, 0x78	; 120
   135ac:	9f 4f       	sbci	r25, 0xFF	; 255
   135ae:	0e 94 43 75 	call	0xea86	; 0xea86 <fgets>
   135b2:	89 2b       	or	r24, r25
   135b4:	f1 f6       	brne	.-68     	; 0x13572 <Read_Config+0x11c>
   135b6:	32 c3       	rjmp	.+1636   	; 0x13c1c <Read_Config+0x7c6>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   135b8:	83 32       	cpi	r24, 0x23	; 35
   135ba:	71 f3       	breq	.-36     	; 0x13598 <Read_Config+0x142>
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   135bc:	c4 01       	movw	r24, r8
   135be:	0e 94 df 91 	call	0x123be	; 0x123be <tok_index>
   135c2:	8f 3f       	cpi	r24, 0xFF	; 255
   135c4:	3f ef       	ldi	r19, 0xFF	; 255
   135c6:	93 07       	cpc	r25, r19
   135c8:	49 f4       	brne	.+18     	; 0x135dc <Read_Config+0x186>
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   135ca:	ed b7       	in	r30, 0x3d	; 61
   135cc:	fe b7       	in	r31, 0x3e	; 62
   135ce:	57 82       	std	Z+7, r5	; 0x07
   135d0:	46 82       	std	Z+6, r4	; 0x06
   135d2:	95 82       	std	Z+5, r9	; 0x05
   135d4:	84 82       	std	Z+4, r8	; 0x04
   135d6:	81 e4       	ldi	r24, 0x41	; 65
   135d8:	9d e1       	ldi	r25, 0x1D	; 29
   135da:	c9 c0       	rjmp	.+402    	; 0x1376e <Read_Config+0x318>
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   135dc:	88 0f       	add	r24, r24
   135de:	99 1f       	adc	r25, r25
   135e0:	88 0f       	add	r24, r24
   135e2:	99 1f       	adc	r25, r25
   135e4:	fc 01       	movw	r30, r24
   135e6:	ec 53       	subi	r30, 0x3C	; 60
   135e8:	fe 4f       	sbci	r31, 0xFE	; 254
   135ea:	02 81       	ldd	r16, Z+2	; 0x02
   135ec:	13 81       	ldd	r17, Z+3	; 0x03

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   135ee:	4e e7       	ldi	r20, 0x7E	; 126
   135f0:	50 e0       	ldi	r21, 0x00	; 0
   135f2:	b4 01       	movw	r22, r8
   135f4:	c5 01       	movw	r24, r10
   135f6:	0e 94 04 31 	call	0x6208	; 0x6208 <get_token>
   135fa:	5c 01       	movw	r10, r24
        if(MATCH(token,"="))
   135fc:	60 e7       	ldi	r22, 0x70	; 112
   135fe:	7e e0       	ldi	r23, 0x0E	; 14
   13600:	c4 01       	movw	r24, r8
   13602:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
   13606:	89 2b       	or	r24, r25
   13608:	39 f0       	breq	.+14     	; 0x13618 <Read_Config+0x1c2>
            ptr = get_token(ptr, token, sizeof(token)-2);
   1360a:	4e e7       	ldi	r20, 0x7E	; 126
   1360c:	50 e0       	ldi	r21, 0x00	; 0
   1360e:	b4 01       	movw	r22, r8
   13610:	c5 01       	movw	r24, r10
   13612:	0e 94 04 31 	call	0x6208	; 0x6208 <get_token>
   13616:	5c 01       	movw	r10, r24
        val.l = get_value(token);
   13618:	c4 01       	movw	r24, r8
   1361a:	0e 94 47 31 	call	0x628e	; 0x628e <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   1361e:	01 31       	cpi	r16, 0x11	; 17
   13620:	11 05       	cpc	r17, r1
        {
            state = pop_state();
   13622:	19 f4       	brne	.+6      	; 0x1362a <Read_Config+0x1d4>
   13624:	cc dd       	rcall	.-1128   	; 0x131be <pop_state>
   13626:	1c 01       	movw	r2, r24
            continue;
   13628:	b7 cf       	rjmp	.-146    	; 0x13598 <Read_Config+0x142>
        }

        switch(state)
   1362a:	30 e1       	ldi	r19, 0x10	; 16
   1362c:	23 16       	cp	r2, r19
   1362e:	31 04       	cpc	r3, r1
   13630:	08 f0       	brcs	.+2      	; 0x13634 <Read_Config+0x1de>
   13632:	de c2       	rjmp	.+1468   	; 0x13bf0 <Read_Config+0x79a>
   13634:	f1 01       	movw	r30, r2
   13636:	ea 53       	subi	r30, 0x3A	; 58
   13638:	ff 4f       	sbci	r31, 0xFF	; 255
   1363a:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   1363e:	0e 30       	cpi	r16, 0x0E	; 14
   13640:	11 05       	cpc	r17, r1
   13642:	09 f4       	brne	.+2      	; 0x13646 <Read_Config+0x1f0>
   13644:	87 c0       	rjmp	.+270    	; 0x13754 <Read_Config+0x2fe>
   13646:	44 f4       	brge	.+16     	; 0x13658 <Read_Config+0x202>
   13648:	02 30       	cpi	r16, 0x02	; 2
   1364a:	11 05       	cpc	r17, r1
   1364c:	09 f4       	brne	.+2      	; 0x13650 <Read_Config+0x1fa>
   1364e:	41 c0       	rjmp	.+130    	; 0x136d2 <Read_Config+0x27c>
   13650:	0c 30       	cpi	r16, 0x0C	; 12
   13652:	11 05       	cpc	r17, r1
   13654:	09 f1       	breq	.+66     	; 0x13698 <Read_Config+0x242>
   13656:	83 c0       	rjmp	.+262    	; 0x1375e <Read_Config+0x308>
   13658:	03 32       	cpi	r16, 0x23	; 35
   1365a:	11 05       	cpc	r17, r1
   1365c:	e9 f0       	breq	.+58     	; 0x13698 <Read_Config+0x242>
   1365e:	04 32       	cpi	r16, 0x24	; 36
   13660:	11 05       	cpc	r17, r1
   13662:	29 f0       	breq	.+10     	; 0x1366e <Read_Config+0x218>
   13664:	00 32       	cpi	r16, 0x20	; 32
   13666:	11 05       	cpc	r17, r1
   13668:	09 f0       	breq	.+2      	; 0x1366c <Read_Config+0x216>
   1366a:	79 c0       	rjmp	.+242    	; 0x1375e <Read_Config+0x308>
   1366c:	55 c0       	rjmp	.+170    	; 0x13718 <Read_Config+0x2c2>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   1366e:	80 e0       	ldi	r24, 0x00	; 0
   13670:	90 e0       	ldi	r25, 0x00	; 0
   13672:	8c dd       	rcall	.-1256   	; 0x1318c <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   13674:	82 e0       	ldi	r24, 0x02	; 2
   13676:	90 e0       	ldi	r25, 0x00	; 0
   13678:	a6 dc       	rcall	.-1716   	; 0x12fc6 <alloc_device>
   1367a:	6c 01       	movw	r12, r24
   1367c:	01 96       	adiw	r24, 0x01	; 1
                        if(index == -1)
   1367e:	09 f4       	brne	.+2      	; 0x13682 <Read_Config+0x22c>
   13680:	8b cf       	rjmp	.-234    	; 0x13598 <Read_Config+0x142>
   13682:	8b e2       	ldi	r24, 0x2B	; 43
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13684:	8c 9d       	mul	r24, r12
   13686:	f0 01       	movw	r30, r0
   13688:	8d 9d       	mul	r24, r13
   1368a:	f0 0d       	add	r31, r0
   1368c:	11 24       	eor	r1, r1
   1368e:	ef 50       	subi	r30, 0x0F	; 15
   13690:	f1 4e       	sbci	r31, 0xE1	; 225
   13692:	67 a0       	ldd	r6, Z+39	; 0x27
   13694:	70 a4       	ldd	r7, Z+40	; 0x28
   13696:	19 c0       	rjmp	.+50     	; 0x136ca <Read_Config+0x274>
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   13698:	80 e0       	ldi	r24, 0x00	; 0
   1369a:	90 e0       	ldi	r25, 0x00	; 0
   1369c:	77 dd       	rcall	.-1298   	; 0x1318c <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   1369e:	83 e0       	ldi	r24, 0x03	; 3
   136a0:	90 e0       	ldi	r25, 0x00	; 0
   136a2:	91 dc       	rcall	.-1758   	; 0x12fc6 <alloc_device>
   136a4:	6c 01       	movw	r12, r24
   136a6:	8f ef       	ldi	r24, 0xFF	; 255
                        if(index == -1)
   136a8:	c8 16       	cp	r12, r24
   136aa:	d8 06       	cpc	r13, r24
   136ac:	09 f4       	brne	.+2      	; 0x136b0 <Read_Config+0x25a>
   136ae:	74 cf       	rjmp	.-280    	; 0x13598 <Read_Config+0x142>
   136b0:	8b e2       	ldi	r24, 0x2B	; 43
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   136b2:	8c 9d       	mul	r24, r12
   136b4:	f0 01       	movw	r30, r0
   136b6:	8d 9d       	mul	r24, r13
   136b8:	f0 0d       	add	r31, r0
   136ba:	11 24       	eor	r1, r1
   136bc:	ef 50       	subi	r30, 0x0F	; 15
   136be:	f1 4e       	sbci	r31, 0xE1	; 225
   136c0:	67 a0       	ldd	r6, Z+39	; 0x27
   136c2:	70 a4       	ldd	r7, Z+40	; 0x28
// Also sets Devices[index].model
                            hpdir_set_parameters(index,token);
   136c4:	b4 01       	movw	r22, r8
   136c6:	c6 01       	movw	r24, r12
   136c8:	20 de       	rcall	.-960    	; 0x1330a <hpdir_set_parameters>
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   136ca:	22 24       	eor	r2, r2
   136cc:	23 94       	inc	r2
   136ce:	31 2c       	mov	r3, r1
                            hpdir_set_parameters(index,token);
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   136d0:	63 cf       	rjmp	.-314    	; 0x13598 <Read_Config+0x142>
   136d2:	80 e0       	ldi	r24, 0x00	; 0
   136d4:	90 e0       	ldi	r25, 0x00	; 0
   136d6:	5a dd       	rcall	.-1356   	; 0x1318c <push_state>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   136d8:	81 e0       	ldi	r24, 0x01	; 1
   136da:	90 e0       	ldi	r25, 0x00	; 0
   136dc:	74 dc       	rcall	.-1816   	; 0x12fc6 <alloc_device>
   136de:	6c 01       	movw	r12, r24
   136e0:	9f ef       	ldi	r25, 0xFF	; 255
                        if(index == -1)
   136e2:	c9 16       	cp	r12, r25
   136e4:	d9 06       	cpc	r13, r25
   136e6:	09 f4       	brne	.+2      	; 0x136ea <Read_Config+0x294>
   136e8:	57 cf       	rjmp	.-338    	; 0x13598 <Read_Config+0x142>
   136ea:	8b e2       	ldi	r24, 0x2B	; 43
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   136ec:	8c 9d       	mul	r24, r12
   136ee:	f0 01       	movw	r30, r0
   136f0:	8d 9d       	mul	r24, r13
   136f2:	f0 0d       	add	r31, r0
   136f4:	11 24       	eor	r1, r1
   136f6:	ef 50       	subi	r30, 0x0F	; 15
   136f8:	f1 4e       	sbci	r31, 0xE1	; 225
   136fa:	a7 a1       	ldd	r26, Z+39	; 0x27
   136fc:	b0 a5       	ldd	r27, Z+40	; 0x28
   136fe:	c8 5f       	subi	r28, 0xF8	; 248
   13700:	de 4f       	sbci	r29, 0xFE	; 254
   13702:	b9 83       	std	Y+1, r27	; 0x01
   13704:	a8 83       	st	Y, r26
   13706:	c8 50       	subi	r28, 0x08	; 8
   13708:	d1 40       	sbci	r29, 0x01	; 1
// Also sets Devices[index.model
                            hpdir_set_parameters(index,token);
   1370a:	b4 01       	movw	r22, r8
   1370c:	c6 01       	movw	r24, r12
   1370e:	fd dd       	rcall	.-1030   	; 0x1330a <hpdir_set_parameters>
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   13710:	aa e0       	ldi	r26, 0x0A	; 10
   13712:	2a 2e       	mov	r2, r26
   13714:	31 2c       	mov	r3, r1
   13716:	40 cf       	rjmp	.-384    	; 0x13598 <Read_Config+0x142>
                            hpdir_set_parameters(index,token);
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   13718:	80 e0       	ldi	r24, 0x00	; 0
   1371a:	90 e0       	ldi	r25, 0x00	; 0
   1371c:	37 dd       	rcall	.-1426   	; 0x1318c <push_state>
   1371e:	84 e0       	ldi	r24, 0x04	; 4
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   13720:	90 e0       	ldi	r25, 0x00	; 0
   13722:	51 dc       	rcall	.-1886   	; 0x12fc6 <alloc_device>
   13724:	6c 01       	movw	r12, r24
   13726:	01 96       	adiw	r24, 0x01	; 1
   13728:	09 f4       	brne	.+2      	; 0x1372c <Read_Config+0x2d6>
                        if(index == -1)
   1372a:	36 cf       	rjmp	.-404    	; 0x13598 <Read_Config+0x142>
   1372c:	8b e2       	ldi	r24, 0x2B	; 43
   1372e:	8c 9d       	mul	r24, r12
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13730:	f0 01       	movw	r30, r0
   13732:	8d 9d       	mul	r24, r13
   13734:	f0 0d       	add	r31, r0
   13736:	11 24       	eor	r1, r1
   13738:	ef 50       	subi	r30, 0x0F	; 15
   1373a:	f1 4e       	sbci	r31, 0xE1	; 225
   1373c:	27 a1       	ldd	r18, Z+39	; 0x27
   1373e:	30 a5       	ldd	r19, Z+40	; 0x28
   13740:	c6 5f       	subi	r28, 0xF6	; 246
   13742:	de 4f       	sbci	r29, 0xFE	; 254
   13744:	39 83       	std	Y+1, r19	; 0x01
   13746:	28 83       	st	Y, r18
   13748:	ca 50       	subi	r28, 0x0A	; 10
   1374a:	d1 40       	sbci	r29, 0x01	; 1
   1374c:	fe e0       	ldi	r31, 0x0E	; 14
   1374e:	2f 2e       	mov	r2, r31
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   13750:	31 2c       	mov	r3, r1
   13752:	22 cf       	rjmp	.-444    	; 0x13598 <Read_Config+0x142>
   13754:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   13758:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   1375c:	1d cf       	rjmp	.-454    	; 0x13598 <Read_Config+0x142>
   1375e:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13760:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   13762:	57 82       	std	Z+7, r5	; 0x07
   13764:	46 82       	std	Z+6, r4	; 0x06
   13766:	b5 82       	std	Z+5, r11	; 0x05
   13768:	a4 82       	std	Z+4, r10	; 0x04
   1376a:	8f e1       	ldi	r24, 0x1F	; 31
   1376c:	9d e1       	ldi	r25, 0x1D	; 29
   1376e:	a0 e0       	ldi	r26, 0x00	; 0
   13770:	81 83       	std	Z+1, r24	; 0x01
   13772:	92 83       	std	Z+2, r25	; 0x02
   13774:	a3 83       	std	Z+3, r26	; 0x03
   13776:	4c c2       	rjmp	.+1176   	; 0x13c10 <Read_Config+0x7ba>
   13778:	09 30       	cpi	r16, 0x09	; 9
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   1377a:	11 05       	cpc	r17, r1
   1377c:	39 f4       	brne	.+14     	; 0x1378c <Read_Config+0x336>
   1377e:	8e e0       	ldi	r24, 0x0E	; 14
                {
                    push_state(state);
   13780:	90 e0       	ldi	r25, 0x00	; 0
   13782:	04 dd       	rcall	.-1528   	; 0x1318c <push_state>
   13784:	ef e0       	ldi	r30, 0x0F	; 15
   13786:	2e 2e       	mov	r2, r30
                    state = PRINTER_CONFIG;
   13788:	31 2c       	mov	r3, r1
   1378a:	06 cf       	rjmp	.-500    	; 0x13598 <Read_Config+0x142>
   1378c:	ed b7       	in	r30, 0x3d	; 61
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   1378e:	fe b7       	in	r31, 0x3e	; 62
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   13790:	57 82       	std	Z+7, r5	; 0x07
   13792:	46 82       	std	Z+6, r4	; 0x06
   13794:	b5 82       	std	Z+5, r11	; 0x05
   13796:	a4 82       	std	Z+4, r10	; 0x04
   13798:	85 ef       	ldi	r24, 0xF5	; 245
   1379a:	9c e1       	ldi	r25, 0x1C	; 28
   1379c:	e8 cf       	rjmp	.-48     	; 0x1376e <Read_Config+0x318>
   1379e:	01 30       	cpi	r16, 0x01	; 1
   137a0:	11 05       	cpc	r17, r1
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   137a2:	b1 f4       	brne	.+44     	; 0x137d0 <Read_Config+0x37a>
   137a4:	6f 71       	andi	r22, 0x1F	; 31
   137a6:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    Devices[index].ADDRESS = 0x1f & val.b;
   137a8:	8c 9d       	mul	r24, r12
   137aa:	f0 01       	movw	r30, r0
   137ac:	8d 9d       	mul	r24, r13
   137ae:	f0 0d       	add	r31, r0
   137b0:	11 24       	eor	r1, r1
   137b2:	ef 50       	subi	r30, 0x0F	; 15
   137b4:	f1 4e       	sbci	r31, 0xE1	; 225
   137b6:	61 83       	std	Z+1, r22	; 0x01
   137b8:	c6 5f       	subi	r28, 0xF6	; 246
   137ba:	de 4f       	sbci	r29, 0xFE	; 254
                    PRINTERp->HEADER.ADDRESS  = 0x1f & val.b;
   137bc:	a8 81       	ld	r26, Y
   137be:	b9 81       	ldd	r27, Y+1	; 0x01
   137c0:	ca 50       	subi	r28, 0x0A	; 10
   137c2:	d1 40       	sbci	r29, 0x01	; 1
   137c4:	6c 93       	st	X, r22
   137c6:	8f ef       	ldi	r24, 0xFF	; 255
   137c8:	82 83       	std	Z+2, r24	; 0x02
// NO PPR
                    Devices[index].PPR = 0xff;
   137ca:	fd 01       	movw	r30, r26
   137cc:	81 83       	std	Z+1, r24	; 0x01
                    PRINTERp->HEADER.PPR = 0xff;
   137ce:	e4 ce       	rjmp	.-568    	; 0x13598 <Read_Config+0x142>
   137d0:	ed b7       	in	r30, 0x3d	; 61
   137d2:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   137d4:	57 82       	std	Z+7, r5	; 0x07
   137d6:	46 82       	std	Z+6, r4	; 0x06
   137d8:	b5 82       	std	Z+5, r11	; 0x05
   137da:	a4 82       	std	Z+4, r10	; 0x04
   137dc:	84 ec       	ldi	r24, 0xC4	; 196
   137de:	9c e1       	ldi	r25, 0x1C	; 28
   137e0:	c6 cf       	rjmp	.-116    	; 0x1376e <Read_Config+0x318>
   137e2:	05 31       	cpi	r16, 0x15	; 21
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   137e4:	11 05       	cpc	r17, r1
   137e6:	d9 f0       	breq	.+54     	; 0x1381e <Read_Config+0x3c8>
   137e8:	6c f4       	brge	.+26     	; 0x13804 <Read_Config+0x3ae>
   137ea:	09 30       	cpi	r16, 0x09	; 9
   137ec:	11 05       	cpc	r17, r1
   137ee:	f1 f0       	breq	.+60     	; 0x1382c <Read_Config+0x3d6>
   137f0:	0b 30       	cpi	r16, 0x0B	; 11
   137f2:	11 05       	cpc	r17, r1
   137f4:	49 f5       	brne	.+82     	; 0x13848 <Read_Config+0x3f2>
   137f6:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   137f8:	90 e0       	ldi	r25, 0x00	; 0
   137fa:	c8 dc       	rcall	.-1648   	; 0x1318c <push_state>
   137fc:	54 e0       	ldi	r21, 0x04	; 4
                        state = SS80_CONTROLLER;
   137fe:	25 2e       	mov	r2, r21
   13800:	31 2c       	mov	r3, r1
   13802:	ca ce       	rjmp	.-620    	; 0x13598 <Read_Config+0x142>
                        break;
   13804:	07 32       	cpi	r16, 0x27	; 39
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   13806:	11 05       	cpc	r17, r1
   13808:	c1 f0       	breq	.+48     	; 0x1383a <Read_Config+0x3e4>
   1380a:	0a 32       	cpi	r16, 0x2A	; 42
   1380c:	11 05       	cpc	r17, r1
   1380e:	e1 f4       	brne	.+56     	; 0x13848 <Read_Config+0x3f2>
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   13810:	81 e0       	ldi	r24, 0x01	; 1
   13812:	90 e0       	ldi	r25, 0x00	; 0
   13814:	bb dc       	rcall	.-1674   	; 0x1318c <push_state>
                        state = SS80_VOLUME;
   13816:	36 e0       	ldi	r19, 0x06	; 6
   13818:	23 2e       	mov	r2, r19
   1381a:	31 2c       	mov	r3, r1
                        break;
   1381c:	bd ce       	rjmp	.-646    	; 0x13598 <Read_Config+0x142>

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   1381e:	81 e0       	ldi	r24, 0x01	; 1
   13820:	90 e0       	ldi	r25, 0x00	; 0
   13822:	b4 dc       	rcall	.-1688   	; 0x1318c <push_state>
                        state = SS80_HEADER;
   13824:	72 e0       	ldi	r23, 0x02	; 2
   13826:	27 2e       	mov	r2, r23
   13828:	31 2c       	mov	r3, r1
                        break;
   1382a:	b6 ce       	rjmp	.-660    	; 0x13598 <Read_Config+0x142>
                    case TOK_CONFIG:
                        push_state(state);
   1382c:	81 e0       	ldi	r24, 0x01	; 1
   1382e:	90 e0       	ldi	r25, 0x00	; 0
   13830:	ad dc       	rcall	.-1702   	; 0x1318c <push_state>
   13832:	63 e0       	ldi	r22, 0x03	; 3
                        state = SS80_CONFIG;
   13834:	26 2e       	mov	r2, r22
   13836:	31 2c       	mov	r3, r1
   13838:	af ce       	rjmp	.-674    	; 0x13598 <Read_Config+0x142>
                        break;
   1383a:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   1383c:	90 e0       	ldi	r25, 0x00	; 0
   1383e:	a6 dc       	rcall	.-1716   	; 0x1318c <push_state>
   13840:	45 e0       	ldi	r20, 0x05	; 5
   13842:	24 2e       	mov	r2, r20
                        state = SS80_UNIT;
   13844:	31 2c       	mov	r3, r1
   13846:	a8 ce       	rjmp	.-688    	; 0x13598 <Read_Config+0x142>
   13848:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1384a:	fe b7       	in	r31, 0x3e	; 62
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   1384c:	57 82       	std	Z+7, r5	; 0x07
   1384e:	46 82       	std	Z+6, r4	; 0x06
   13850:	b5 82       	std	Z+5, r11	; 0x05
   13852:	a4 82       	std	Z+4, r10	; 0x04
   13854:	87 e9       	ldi	r24, 0x97	; 151
   13856:	9c e1       	ldi	r25, 0x1C	; 28
   13858:	8a cf       	rjmp	.-236    	; 0x1376e <Read_Config+0x318>
   1385a:	02 31       	cpi	r16, 0x12	; 18
   1385c:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   1385e:	f1 f0       	breq	.+60     	; 0x1389c <Read_Config+0x446>
   13860:	0f 31       	cpi	r16, 0x1F	; 31
   13862:	11 05       	cpc	r17, r1
   13864:	79 f0       	breq	.+30     	; 0x13884 <Read_Config+0x42e>
   13866:	01 30       	cpi	r16, 0x01	; 1
   13868:	11 05       	cpc	r17, r1
   1386a:	e9 f4       	brne	.+58     	; 0x138a6 <Read_Config+0x450>
   1386c:	6f 71       	andi	r22, 0x1F	; 31
   1386e:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   13870:	8c 9d       	mul	r24, r12
   13872:	f0 01       	movw	r30, r0
   13874:	8d 9d       	mul	r24, r13
   13876:	f0 0d       	add	r31, r0
   13878:	11 24       	eor	r1, r1
   1387a:	ef 50       	subi	r30, 0x0F	; 15
   1387c:	f1 4e       	sbci	r31, 0xE1	; 225
   1387e:	61 83       	std	Z+1, r22	; 0x01
   13880:	d3 01       	movw	r26, r6
   13882:	37 c1       	rjmp	.+622    	; 0x13af2 <Read_Config+0x69c>
                        SS80p->HEADER.ADDRESS  = 0x1f & val.b;
   13884:	67 70       	andi	r22, 0x07	; 7
   13886:	8b e2       	ldi	r24, 0x2B	; 43
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   13888:	8c 9d       	mul	r24, r12
   1388a:	f0 01       	movw	r30, r0
   1388c:	8d 9d       	mul	r24, r13
   1388e:	f0 0d       	add	r31, r0
   13890:	11 24       	eor	r1, r1
   13892:	ef 50       	subi	r30, 0x0F	; 15
   13894:	f1 4e       	sbci	r31, 0xE1	; 225
   13896:	62 83       	std	Z+2, r22	; 0x02
   13898:	f3 01       	movw	r30, r6
   1389a:	2d c1       	rjmp	.+602    	; 0x13af6 <Read_Config+0x6a0>
                        SS80p->HEADER.PPR = 0x07 & val.b;
   1389c:	c4 01       	movw	r24, r8
   1389e:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <stralloc>
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   138a2:	f3 01       	movw	r30, r6
   138a4:	33 c1       	rjmp	.+614    	; 0x13b0c <Read_Config+0x6b6>
   138a6:	ed b7       	in	r30, 0x3d	; 61
   138a8:	fe b7       	in	r31, 0x3e	; 62
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   138aa:	57 82       	std	Z+7, r5	; 0x07
   138ac:	46 82       	std	Z+6, r4	; 0x06
   138ae:	b5 82       	std	Z+5, r11	; 0x05
   138b0:	a4 82       	std	Z+4, r10	; 0x04
   138b2:	89 e6       	ldi	r24, 0x69	; 105
   138b4:	9c e1       	ldi	r25, 0x1C	; 28
   138b6:	5b cf       	rjmp	.-330    	; 0x1376e <Read_Config+0x318>
   138b8:	07 31       	cpi	r16, 0x17	; 23
   138ba:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   138bc:	21 f4       	brne	.+8      	; 0x138c6 <Read_Config+0x470>
   138be:	96 2f       	mov	r25, r22
   138c0:	87 2f       	mov	r24, r23
                {
                    SS80p->CONFIG.ID = val.w;
   138c2:	f3 01       	movw	r30, r6
   138c4:	3f c1       	rjmp	.+638    	; 0x13b44 <Read_Config+0x6ee>
   138c6:	ed b7       	in	r30, 0x3d	; 61
   138c8:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   138ca:	57 82       	std	Z+7, r5	; 0x07
   138cc:	46 82       	std	Z+6, r4	; 0x06
   138ce:	b5 82       	std	Z+5, r11	; 0x05
   138d0:	a4 82       	std	Z+4, r10	; 0x04
   138d2:	8b e3       	ldi	r24, 0x3B	; 59
   138d4:	9c e1       	ldi	r25, 0x1C	; 28
   138d6:	4b cf       	rjmp	.-362    	; 0x1376e <Read_Config+0x318>
   138d8:	06 32       	cpi	r16, 0x26	; 38
   138da:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   138dc:	71 f0       	breq	.+28     	; 0x138fa <Read_Config+0x4a4>
   138de:	08 32       	cpi	r16, 0x28	; 40
   138e0:	11 05       	cpc	r17, r1
   138e2:	39 f0       	breq	.+14     	; 0x138f2 <Read_Config+0x49c>
   138e4:	05 32       	cpi	r16, 0x25	; 37
   138e6:	11 05       	cpc	r17, r1
   138e8:	59 f4       	brne	.+22     	; 0x13900 <Read_Config+0x4aa>
   138ea:	96 2f       	mov	r25, r22
   138ec:	87 2f       	mov	r24, r23
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   138ee:	f3 01       	movw	r30, r6
   138f0:	5c c1       	rjmp	.+696    	; 0x13baa <Read_Config+0x754>
   138f2:	96 2f       	mov	r25, r22
   138f4:	87 2f       	mov	r24, r23

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   138f6:	f3 01       	movw	r30, r6
   138f8:	55 c1       	rjmp	.+682    	; 0x13ba4 <Read_Config+0x74e>
   138fa:	f3 01       	movw	r30, r6
   138fc:	62 87       	std	Z+10, r22	; 0x0a
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   138fe:	4c ce       	rjmp	.-872    	; 0x13598 <Read_Config+0x142>
   13900:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13902:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   13904:	57 82       	std	Z+7, r5	; 0x07
   13906:	46 82       	std	Z+6, r4	; 0x06
   13908:	b5 82       	std	Z+5, r11	; 0x05
   1390a:	a4 82       	std	Z+4, r10	; 0x04
   1390c:	89 e0       	ldi	r24, 0x09	; 9
   1390e:	9c e1       	ldi	r25, 0x1C	; 28
   13910:	2e cf       	rjmp	.-420    	; 0x1376e <Read_Config+0x318>
   13912:	0a 30       	cpi	r16, 0x0A	; 10
   13914:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13916:	09 f4       	brne	.+2      	; 0x1391a <Read_Config+0x4c4>
   13918:	45 c0       	rjmp	.+138    	; 0x139a4 <Read_Config+0x54e>
   1391a:	d4 f4       	brge	.+52     	; 0x13950 <Read_Config+0x4fa>
   1391c:	05 30       	cpi	r16, 0x05	; 5
   1391e:	11 05       	cpc	r17, r1
   13920:	d1 f1       	breq	.+116    	; 0x13996 <Read_Config+0x540>
   13922:	64 f4       	brge	.+24     	; 0x1393c <Read_Config+0x4e6>
   13924:	01 15       	cp	r16, r1
   13926:	11 05       	cpc	r17, r1
   13928:	09 f4       	brne	.+2      	; 0x1392c <Read_Config+0x4d6>
   1392a:	40 c0       	rjmp	.+128    	; 0x139ac <Read_Config+0x556>
   1392c:	04 30       	cpi	r16, 0x04	; 4
   1392e:	11 05       	cpc	r17, r1
   13930:	09 f0       	breq	.+2      	; 0x13934 <Read_Config+0x4de>
   13932:	46 c0       	rjmp	.+140    	; 0x139c0 <Read_Config+0x56a>
   13934:	f3 01       	movw	r30, r6
   13936:	64 8b       	std	Z+20, r22	; 0x14
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   13938:	75 8b       	std	Z+21, r23	; 0x15
   1393a:	2e ce       	rjmp	.-932    	; 0x13598 <Read_Config+0x142>
   1393c:	06 30       	cpi	r16, 0x06	; 6
                        break;
   1393e:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13940:	71 f1       	breq	.+92     	; 0x1399e <Read_Config+0x548>
   13942:	07 30       	cpi	r16, 0x07	; 7
   13944:	11 05       	cpc	r17, r1
   13946:	e1 f5       	brne	.+120    	; 0x139c0 <Read_Config+0x56a>
   13948:	f3 01       	movw	r30, r6
   1394a:	60 8b       	std	Z+16, r22	; 0x10
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   1394c:	71 8b       	std	Z+17, r23	; 0x11
   1394e:	24 ce       	rjmp	.-952    	; 0x13598 <Read_Config+0x142>
   13950:	0c 31       	cpi	r16, 0x1C	; 28
                        break;
   13952:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13954:	79 f1       	breq	.+94     	; 0x139b4 <Read_Config+0x55e>
   13956:	4c f4       	brge	.+18     	; 0x1396a <Read_Config+0x514>
   13958:	0f 30       	cpi	r16, 0x0F	; 15
   1395a:	11 05       	cpc	r17, r1
   1395c:	b1 f0       	breq	.+44     	; 0x1398a <Read_Config+0x534>
   1395e:	03 31       	cpi	r16, 0x13	; 19
   13960:	11 05       	cpc	r17, r1
   13962:	71 f5       	brne	.+92     	; 0x139c0 <Read_Config+0x56a>
   13964:	f3 01       	movw	r30, r6
   13966:	65 8f       	std	Z+29, r22	; 0x1d
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   13968:	17 ce       	rjmp	.-978    	; 0x13598 <Read_Config+0x142>
   1396a:	01 32       	cpi	r16, 0x21	; 33
                        break;
   1396c:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   1396e:	29 f1       	breq	.+74     	; 0x139ba <Read_Config+0x564>
   13970:	09 32       	cpi	r16, 0x29	; 41
   13972:	11 05       	cpc	r17, r1
   13974:	39 f0       	breq	.+14     	; 0x13984 <Read_Config+0x52e>
   13976:	0e 31       	cpi	r16, 0x1E	; 30
   13978:	11 05       	cpc	r17, r1
   1397a:	11 f5       	brne	.+68     	; 0x139c0 <Read_Config+0x56a>
   1397c:	f3 01       	movw	r30, r6
   1397e:	60 8f       	std	Z+24, r22	; 0x18
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   13980:	71 8f       	std	Z+25, r23	; 0x19
   13982:	0a ce       	rjmp	.-1004   	; 0x13598 <Read_Config+0x142>
   13984:	f3 01       	movw	r30, r6
                        break;
   13986:	63 87       	std	Z+11, r22	; 0x0b

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   13988:	07 ce       	rjmp	.-1010   	; 0x13598 <Read_Config+0x142>
   1398a:	f3 01       	movw	r30, r6
                        break;
   1398c:	64 87       	std	Z+12, r22	; 0x0c
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   1398e:	75 87       	std	Z+13, r23	; 0x0d
   13990:	86 87       	std	Z+14, r24	; 0x0e
   13992:	97 87       	std	Z+15, r25	; 0x0f
   13994:	01 ce       	rjmp	.-1022   	; 0x13598 <Read_Config+0x142>
   13996:	61 70       	andi	r22, 0x01	; 1
                        break;
   13998:	f3 01       	movw	r30, r6
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   1399a:	62 8b       	std	Z+18, r22	; 0x12
   1399c:	fd cd       	rjmp	.-1030   	; 0x13598 <Read_Config+0x142>
   1399e:	f3 01       	movw	r30, r6
                        break;
   139a0:	63 8b       	std	Z+19, r22	; 0x13
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   139a2:	fa cd       	rjmp	.-1036   	; 0x13598 <Read_Config+0x142>
   139a4:	f3 01       	movw	r30, r6
                        break;
   139a6:	66 8b       	std	Z+22, r22	; 0x16
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   139a8:	77 8b       	std	Z+23, r23	; 0x17
   139aa:	f6 cd       	rjmp	.-1044   	; 0x13598 <Read_Config+0x142>
   139ac:	f3 01       	movw	r30, r6
                        break;
   139ae:	62 8f       	std	Z+26, r22	; 0x1a
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   139b0:	73 8f       	std	Z+27, r23	; 0x1b
   139b2:	f2 cd       	rjmp	.-1052   	; 0x13598 <Read_Config+0x142>
   139b4:	f3 01       	movw	r30, r6
                        break;
   139b6:	64 8f       	std	Z+28, r22	; 0x1c
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   139b8:	ef cd       	rjmp	.-1058   	; 0x13598 <Read_Config+0x142>
   139ba:	f3 01       	movw	r30, r6
                        break;
   139bc:	66 8f       	std	Z+30, r22	; 0x1e
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   139be:	ec cd       	rjmp	.-1064   	; 0x13598 <Read_Config+0x142>
   139c0:	ed b7       	in	r30, 0x3d	; 61
                        break;
   139c2:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   139c4:	57 82       	std	Z+7, r5	; 0x07
   139c6:	46 82       	std	Z+6, r4	; 0x06
   139c8:	b5 82       	std	Z+5, r11	; 0x05
   139ca:	a4 82       	std	Z+4, r10	; 0x04
   139cc:	8d ed       	ldi	r24, 0xDD	; 221
   139ce:	9b e1       	ldi	r25, 0x1B	; 27
   139d0:	ce ce       	rjmp	.-612    	; 0x1376e <Read_Config+0x318>
   139d2:	0a 31       	cpi	r16, 0x1A	; 26
   139d4:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   139d6:	b9 f0       	breq	.+46     	; 0x13a06 <Read_Config+0x5b0>
   139d8:	64 f4       	brge	.+24     	; 0x139f2 <Read_Config+0x59c>
   139da:	08 31       	cpi	r16, 0x18	; 24
   139dc:	11 05       	cpc	r17, r1
   139de:	e1 f0       	breq	.+56     	; 0x13a18 <Read_Config+0x5c2>
   139e0:	09 31       	cpi	r16, 0x19	; 25
   139e2:	11 05       	cpc	r17, r1
   139e4:	e1 f4       	brne	.+56     	; 0x13a1e <Read_Config+0x5c8>
   139e6:	f3 01       	movw	r30, r6
   139e8:	66 a3       	std	Z+38, r22	; 0x26
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   139ea:	77 a3       	std	Z+39, r23	; 0x27
   139ec:	80 a7       	std	Z+40, r24	; 0x28
   139ee:	91 a7       	std	Z+41, r25	; 0x29
   139f0:	d3 cd       	rjmp	.-1114   	; 0x13598 <Read_Config+0x142>
   139f2:	0b 31       	cpi	r16, 0x1B	; 27
                        break;
   139f4:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   139f6:	69 f0       	breq	.+26     	; 0x13a12 <Read_Config+0x5bc>
   139f8:	0d 31       	cpi	r16, 0x1D	; 29
   139fa:	11 05       	cpc	r17, r1
   139fc:	81 f4       	brne	.+32     	; 0x13a1e <Read_Config+0x5c8>
   139fe:	f3 01       	movw	r30, r6
   13a00:	64 a3       	std	Z+36, r22	; 0x24
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   13a02:	75 a3       	std	Z+37, r23	; 0x25
   13a04:	c9 cd       	rjmp	.-1134   	; 0x13598 <Read_Config+0x142>
   13a06:	f3 01       	movw	r30, r6
                        break;
   13a08:	67 8f       	std	Z+31, r22	; 0x1f

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   13a0a:	70 a3       	std	Z+32, r23	; 0x20
   13a0c:	81 a3       	std	Z+33, r24	; 0x21
   13a0e:	92 a3       	std	Z+34, r25	; 0x22
   13a10:	c3 cd       	rjmp	.-1146   	; 0x13598 <Read_Config+0x142>
   13a12:	f3 01       	movw	r30, r6
                        break;
   13a14:	63 a3       	std	Z+35, r22	; 0x23
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   13a16:	c0 cd       	rjmp	.-1152   	; 0x13598 <Read_Config+0x142>
   13a18:	f3 01       	movw	r30, r6
                        break;
   13a1a:	62 a7       	std	Z+42, r22	; 0x2a
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   13a1c:	bd cd       	rjmp	.-1158   	; 0x13598 <Read_Config+0x142>
   13a1e:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13a20:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13a22:	57 82       	std	Z+7, r5	; 0x07
   13a24:	46 82       	std	Z+6, r4	; 0x06
   13a26:	b5 82       	std	Z+5, r11	; 0x05
   13a28:	a4 82       	std	Z+4, r10	; 0x04
   13a2a:	c3 5e       	subi	r28, 0xE3	; 227
   13a2c:	de 4f       	sbci	r29, 0xFE	; 254
   13a2e:	28 81       	ld	r18, Y
   13a30:	39 81       	ldd	r19, Y+1	; 0x01
   13a32:	4a 81       	ldd	r20, Y+2	; 0x02
   13a34:	cd 51       	subi	r28, 0x1D	; 29
   13a36:	d1 40       	sbci	r29, 0x01	; 1
   13a38:	e8 c0       	rjmp	.+464    	; 0x13c0a <Read_Config+0x7b4>
   13a3a:	04 31       	cpi	r16, 0x14	; 20
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   13a3c:	11 05       	cpc	r17, r1
   13a3e:	a1 f0       	breq	.+40     	; 0x13a68 <Read_Config+0x612>
   13a40:	05 31       	cpi	r16, 0x15	; 21
   13a42:	11 05       	cpc	r17, r1
   13a44:	51 f0       	breq	.+20     	; 0x13a5a <Read_Config+0x604>
   13a46:	09 30       	cpi	r16, 0x09	; 9
   13a48:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   13a4a:	a9 f4       	brne	.+42     	; 0x13a76 <Read_Config+0x620>
   13a4c:	8a e0       	ldi	r24, 0x0A	; 10
   13a4e:	90 e0       	ldi	r25, 0x00	; 0
   13a50:	9d db       	rcall	.-2246   	; 0x1318c <push_state>
                        state = AMIGO_CONFIG;
   13a52:	9c e0       	ldi	r25, 0x0C	; 12
   13a54:	29 2e       	mov	r2, r25
   13a56:	31 2c       	mov	r3, r1
                        break;
   13a58:	9f cd       	rjmp	.-1218   	; 0x13598 <Read_Config+0x142>
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   13a5a:	8a e0       	ldi	r24, 0x0A	; 10
   13a5c:	90 e0       	ldi	r25, 0x00	; 0
   13a5e:	96 db       	rcall	.-2260   	; 0x1318c <push_state>
   13a60:	2b e0       	ldi	r18, 0x0B	; 11
                        state = AMIGO_HEADER;
   13a62:	22 2e       	mov	r2, r18
   13a64:	31 2c       	mov	r3, r1
   13a66:	98 cd       	rjmp	.-1232   	; 0x13598 <Read_Config+0x142>
                        break;
   13a68:	8a e0       	ldi	r24, 0x0A	; 10
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   13a6a:	90 e0       	ldi	r25, 0x00	; 0
   13a6c:	8f db       	rcall	.-2274   	; 0x1318c <push_state>
   13a6e:	8d e0       	ldi	r24, 0x0D	; 13
   13a70:	28 2e       	mov	r2, r24
                        state = AMIGO_GEOMETRY;
   13a72:	31 2c       	mov	r3, r1
   13a74:	91 cd       	rjmp	.-1246   	; 0x13598 <Read_Config+0x142>
   13a76:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13a78:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13a7a:	57 82       	std	Z+7, r5	; 0x07
   13a7c:	46 82       	std	Z+6, r4	; 0x06
   13a7e:	b5 82       	std	Z+5, r11	; 0x05
   13a80:	a4 82       	std	Z+4, r10	; 0x04
   13a82:	c6 5e       	subi	r28, 0xE6	; 230
   13a84:	de 4f       	sbci	r29, 0xFE	; 254
   13a86:	28 81       	ld	r18, Y
   13a88:	39 81       	ldd	r19, Y+1	; 0x01
   13a8a:	4a 81       	ldd	r20, Y+2	; 0x02
   13a8c:	ca 51       	subi	r28, 0x1A	; 26
   13a8e:	d1 40       	sbci	r29, 0x01	; 1
   13a90:	bc c0       	rjmp	.+376    	; 0x13c0a <Read_Config+0x7b4>
   13a92:	00 31       	cpi	r16, 0x10	; 16
   13a94:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   13a96:	09 f4       	brne	.+2      	; 0x13a9a <Read_Config+0x644>
   13a98:	7f cd       	rjmp	.-1282   	; 0x13598 <Read_Config+0x142>
   13a9a:	a4 f4       	brge	.+40     	; 0x13ac4 <Read_Config+0x66e>
   13a9c:	01 30       	cpi	r16, 0x01	; 1
   13a9e:	11 05       	cpc	r17, r1
   13aa0:	c1 f5       	brne	.+112    	; 0x13b12 <Read_Config+0x6bc>
   13aa2:	6f 71       	andi	r22, 0x1F	; 31
   13aa4:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   13aa6:	8c 9d       	mul	r24, r12
   13aa8:	f0 01       	movw	r30, r0
   13aaa:	8d 9d       	mul	r24, r13
   13aac:	f0 0d       	add	r31, r0
   13aae:	11 24       	eor	r1, r1
   13ab0:	ef 50       	subi	r30, 0x0F	; 15
   13ab2:	f1 4e       	sbci	r31, 0xE1	; 225
   13ab4:	61 83       	std	Z+1, r22	; 0x01
   13ab6:	c8 5f       	subi	r28, 0xF8	; 248
   13ab8:	de 4f       	sbci	r29, 0xFE	; 254
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13aba:	a8 81       	ld	r26, Y
   13abc:	b9 81       	ldd	r27, Y+1	; 0x01
   13abe:	c8 50       	subi	r28, 0x08	; 8
   13ac0:	d1 40       	sbci	r29, 0x01	; 1
   13ac2:	17 c0       	rjmp	.+46     	; 0x13af2 <Read_Config+0x69c>
   13ac4:	02 31       	cpi	r16, 0x12	; 18
   13ac6:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   13ac8:	c1 f0       	breq	.+48     	; 0x13afa <Read_Config+0x6a4>
   13aca:	0f 31       	cpi	r16, 0x1F	; 31
   13acc:	11 05       	cpc	r17, r1
   13ace:	09 f5       	brne	.+66     	; 0x13b12 <Read_Config+0x6bc>
   13ad0:	67 70       	andi	r22, 0x07	; 7
   13ad2:	8b e2       	ldi	r24, 0x2B	; 43
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   13ad4:	8c 9d       	mul	r24, r12
   13ad6:	f0 01       	movw	r30, r0
   13ad8:	8d 9d       	mul	r24, r13
   13ada:	f0 0d       	add	r31, r0
   13adc:	11 24       	eor	r1, r1
   13ade:	ef 50       	subi	r30, 0x0F	; 15
   13ae0:	f1 4e       	sbci	r31, 0xE1	; 225
   13ae2:	62 83       	std	Z+2, r22	; 0x02
   13ae4:	c8 5f       	subi	r28, 0xF8	; 248
   13ae6:	de 4f       	sbci	r29, 0xFE	; 254
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   13ae8:	e8 81       	ld	r30, Y
   13aea:	f9 81       	ldd	r31, Y+1	; 0x01
   13aec:	c8 50       	subi	r28, 0x08	; 8
   13aee:	d1 40       	sbci	r29, 0x01	; 1
   13af0:	02 c0       	rjmp	.+4      	; 0x13af6 <Read_Config+0x6a0>
   13af2:	6c 93       	st	X, r22
   13af4:	51 cd       	rjmp	.-1374   	; 0x13598 <Read_Config+0x142>
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13af6:	61 83       	std	Z+1, r22	; 0x01
                        break;
   13af8:	4f cd       	rjmp	.-1378   	; 0x13598 <Read_Config+0x142>
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   13afa:	c4 01       	movw	r24, r8
                        break;
   13afc:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <stralloc>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   13b00:	c8 5f       	subi	r28, 0xF8	; 248
   13b02:	de 4f       	sbci	r29, 0xFE	; 254
   13b04:	e8 81       	ld	r30, Y
   13b06:	f9 81       	ldd	r31, Y+1	; 0x01
   13b08:	c8 50       	subi	r28, 0x08	; 8
   13b0a:	d1 40       	sbci	r29, 0x01	; 1
   13b0c:	93 83       	std	Z+3, r25	; 0x03
   13b0e:	82 83       	std	Z+2, r24	; 0x02
   13b10:	43 cd       	rjmp	.-1402   	; 0x13598 <Read_Config+0x142>
   13b12:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13b14:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13b16:	57 82       	std	Z+7, r5	; 0x07
   13b18:	46 82       	std	Z+6, r4	; 0x06
   13b1a:	b5 82       	std	Z+5, r11	; 0x05
   13b1c:	a4 82       	std	Z+4, r10	; 0x04
   13b1e:	c9 5e       	subi	r28, 0xE9	; 233
   13b20:	de 4f       	sbci	r29, 0xFE	; 254
   13b22:	28 81       	ld	r18, Y
   13b24:	39 81       	ldd	r19, Y+1	; 0x01
   13b26:	4a 81       	ldd	r20, Y+2	; 0x02
   13b28:	c7 51       	subi	r28, 0x17	; 23
   13b2a:	d1 40       	sbci	r29, 0x01	; 1
   13b2c:	6e c0       	rjmp	.+220    	; 0x13c0a <Read_Config+0x7b4>
   13b2e:	07 31       	cpi	r16, 0x17	; 23
   13b30:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   13b32:	59 f4       	brne	.+22     	; 0x13b4a <Read_Config+0x6f4>
   13b34:	96 2f       	mov	r25, r22
   13b36:	87 2f       	mov	r24, r23
                {
                    AMIGOp->CONFIG.ID = val.w;
   13b38:	c8 5f       	subi	r28, 0xF8	; 248
   13b3a:	de 4f       	sbci	r29, 0xFE	; 254
   13b3c:	e8 81       	ld	r30, Y
   13b3e:	f9 81       	ldd	r31, Y+1	; 0x01
   13b40:	c8 50       	subi	r28, 0x08	; 8
   13b42:	d1 40       	sbci	r29, 0x01	; 1
   13b44:	94 83       	std	Z+4, r25	; 0x04
   13b46:	85 83       	std	Z+5, r24	; 0x05
   13b48:	27 cd       	rjmp	.-1458   	; 0x13598 <Read_Config+0x142>
   13b4a:	ed b7       	in	r30, 0x3d	; 61
   13b4c:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13b4e:	57 82       	std	Z+7, r5	; 0x07
   13b50:	46 82       	std	Z+6, r4	; 0x06
   13b52:	b5 82       	std	Z+5, r11	; 0x05
   13b54:	a4 82       	std	Z+4, r10	; 0x04
   13b56:	cc 5e       	subi	r28, 0xEC	; 236
   13b58:	de 4f       	sbci	r29, 0xFE	; 254
   13b5a:	28 81       	ld	r18, Y
   13b5c:	39 81       	ldd	r19, Y+1	; 0x01
   13b5e:	4a 81       	ldd	r20, Y+2	; 0x02
   13b60:	c4 51       	subi	r28, 0x14	; 20
   13b62:	d1 40       	sbci	r29, 0x01	; 1
   13b64:	52 c0       	rjmp	.+164    	; 0x13c0a <Read_Config+0x7b4>
   13b66:	0d 30       	cpi	r16, 0x0D	; 13
   13b68:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   13b6a:	59 f1       	breq	.+86     	; 0x13bc2 <Read_Config+0x76c>
   13b6c:	64 f4       	brge	.+24     	; 0x13b86 <Read_Config+0x730>
   13b6e:	08 30       	cpi	r16, 0x08	; 8
   13b70:	11 05       	cpc	r17, r1
   13b72:	81 f5       	brne	.+96     	; 0x13bd4 <Read_Config+0x77e>
   13b74:	96 2f       	mov	r25, r22
   13b76:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13b78:	c8 5f       	subi	r28, 0xF8	; 248
   13b7a:	de 4f       	sbci	r29, 0xFE	; 254
   13b7c:	e8 81       	ld	r30, Y
   13b7e:	f9 81       	ldd	r31, Y+1	; 0x01
   13b80:	c8 50       	subi	r28, 0x08	; 8
   13b82:	d1 40       	sbci	r29, 0x01	; 1
   13b84:	0f c0       	rjmp	.+30     	; 0x13ba4 <Read_Config+0x74e>
   13b86:	06 31       	cpi	r16, 0x16	; 22
   13b88:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   13b8a:	91 f0       	breq	.+36     	; 0x13bb0 <Read_Config+0x75a>
   13b8c:	02 32       	cpi	r16, 0x22	; 34
   13b8e:	11 05       	cpc	r17, r1
   13b90:	09 f5       	brne	.+66     	; 0x13bd4 <Read_Config+0x77e>
   13b92:	96 2f       	mov	r25, r22
   13b94:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13b96:	c8 5f       	subi	r28, 0xF8	; 248
   13b98:	de 4f       	sbci	r29, 0xFE	; 254
   13b9a:	e8 81       	ld	r30, Y
   13b9c:	f9 81       	ldd	r31, Y+1	; 0x01
   13b9e:	c8 50       	subi	r28, 0x08	; 8
   13ba0:	d1 40       	sbci	r29, 0x01	; 1
   13ba2:	03 c0       	rjmp	.+6      	; 0x13baa <Read_Config+0x754>
   13ba4:	96 83       	std	Z+6, r25	; 0x06
   13ba6:	87 83       	std	Z+7, r24	; 0x07

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13ba8:	f7 cc       	rjmp	.-1554   	; 0x13598 <Read_Config+0x142>
   13baa:	90 87       	std	Z+8, r25	; 0x08
                        break;
   13bac:	81 87       	std	Z+9, r24	; 0x09
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13bae:	f4 cc       	rjmp	.-1560   	; 0x13598 <Read_Config+0x142>
   13bb0:	c8 5f       	subi	r28, 0xF8	; 248
                        break;
   13bb2:	de 4f       	sbci	r29, 0xFE	; 254
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   13bb4:	e8 81       	ld	r30, Y
   13bb6:	f9 81       	ldd	r31, Y+1	; 0x01
   13bb8:	c8 50       	subi	r28, 0x08	; 8
   13bba:	d1 40       	sbci	r29, 0x01	; 1
   13bbc:	62 87       	std	Z+10, r22	; 0x0a
   13bbe:	73 87       	std	Z+11, r23	; 0x0b
   13bc0:	eb cc       	rjmp	.-1578   	; 0x13598 <Read_Config+0x142>
   13bc2:	c8 5f       	subi	r28, 0xF8	; 248
                        break;
   13bc4:	de 4f       	sbci	r29, 0xFE	; 254
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   13bc6:	e8 81       	ld	r30, Y
   13bc8:	f9 81       	ldd	r31, Y+1	; 0x01
   13bca:	c8 50       	subi	r28, 0x08	; 8
   13bcc:	d1 40       	sbci	r29, 0x01	; 1
   13bce:	64 87       	std	Z+12, r22	; 0x0c
   13bd0:	75 87       	std	Z+13, r23	; 0x0d
   13bd2:	e2 cc       	rjmp	.-1596   	; 0x13598 <Read_Config+0x142>
   13bd4:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13bd6:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13bd8:	57 82       	std	Z+7, r5	; 0x07
   13bda:	46 82       	std	Z+6, r4	; 0x06
   13bdc:	b5 82       	std	Z+5, r11	; 0x05
   13bde:	a4 82       	std	Z+4, r10	; 0x04
   13be0:	cf 5e       	subi	r28, 0xEF	; 239
   13be2:	de 4f       	sbci	r29, 0xFE	; 254
   13be4:	28 81       	ld	r18, Y
   13be6:	39 81       	ldd	r19, Y+1	; 0x01
   13be8:	4a 81       	ldd	r20, Y+2	; 0x02
   13bea:	c1 51       	subi	r28, 0x11	; 17
   13bec:	d1 40       	sbci	r29, 0x01	; 1
   13bee:	0d c0       	rjmp	.+26     	; 0x13c0a <Read_Config+0x7b4>
   13bf0:	ed b7       	in	r30, 0x3d	; 61
   13bf2:	fe b7       	in	r31, 0x3e	; 62
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13bf4:	57 82       	std	Z+7, r5	; 0x07
   13bf6:	46 82       	std	Z+6, r4	; 0x06
   13bf8:	b5 82       	std	Z+5, r11	; 0x05
   13bfa:	a4 82       	std	Z+4, r10	; 0x04
   13bfc:	c2 5f       	subi	r28, 0xF2	; 242
   13bfe:	de 4f       	sbci	r29, 0xFE	; 254
   13c00:	28 81       	ld	r18, Y
   13c02:	39 81       	ldd	r19, Y+1	; 0x01
   13c04:	4a 81       	ldd	r20, Y+2	; 0x02
   13c06:	ce 50       	subi	r28, 0x0E	; 14
   13c08:	d1 40       	sbci	r29, 0x01	; 1
   13c0a:	21 83       	std	Z+1, r18	; 0x01
   13c0c:	32 83       	std	Z+2, r19	; 0x02
   13c0e:	43 83       	std	Z+3, r20	; 0x03
   13c10:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   13c14:	ff ef       	ldi	r31, 0xFF	; 255
   13c16:	ef 1a       	sub	r14, r31
                ++errors;
   13c18:	ff 0a       	sbc	r15, r31
   13c1a:	be cc       	rjmp	.-1668   	; 0x13598 <Read_Config+0x142>
   13c1c:	21 14       	cp	r2, r1
                break;
   13c1e:	31 04       	cpc	r3, r1

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   13c20:	79 f0       	breq	.+30     	; 0x13c40 <Read_Config+0x7ea>
   13c22:	ed b7       	in	r30, 0x3d	; 61
   13c24:	fe b7       	in	r31, 0x3e	; 62
    {
        printf("Missing END statement at line:%d\n", lines);
   13c26:	55 82       	std	Z+5, r5	; 0x05
   13c28:	44 82       	std	Z+4, r4	; 0x04
   13c2a:	8e ea       	ldi	r24, 0xAE	; 174
   13c2c:	9a e1       	ldi	r25, 0x1A	; 26
   13c2e:	a0 e0       	ldi	r26, 0x00	; 0
   13c30:	81 83       	std	Z+1, r24	; 0x01
   13c32:	92 83       	std	Z+2, r25	; 0x02
   13c34:	a3 83       	std	Z+3, r26	; 0x03
   13c36:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   13c3a:	ff ef       	ldi	r31, 0xFF	; 255
   13c3c:	ef 1a       	sub	r14, r31
        ++errors;
   13c3e:	ff 0a       	sbc	r15, r31
   13c40:	ed b7       	in	r30, 0x3d	; 61
   13c42:	fe b7       	in	r31, 0x3e	; 62
    }
    printf("Read_Config: read(%d) lines\n", lines);
   13c44:	55 82       	std	Z+5, r5	; 0x05
   13c46:	44 82       	std	Z+4, r4	; 0x04
   13c48:	81 e9       	ldi	r24, 0x91	; 145
   13c4a:	9a e1       	ldi	r25, 0x1A	; 26
   13c4c:	a0 e0       	ldi	r26, 0x00	; 0
   13c4e:	81 83       	std	Z+1, r24	; 0x01
   13c50:	92 83       	std	Z+2, r25	; 0x02
   13c52:	a3 83       	std	Z+3, r26	; 0x03
   13c54:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   13c58:	e1 14       	cp	r14, r1
   13c5a:	f1 04       	cpc	r15, r1
    if(errors)
   13c5c:	61 f0       	breq	.+24     	; 0x13c76 <Read_Config+0x820>
   13c5e:	ed b7       	in	r30, 0x3d	; 61
   13c60:	fe b7       	in	r31, 0x3e	; 62
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   13c62:	f5 82       	std	Z+5, r15	; 0x05
   13c64:	e4 82       	std	Z+4, r14	; 0x04
   13c66:	8a e6       	ldi	r24, 0x6A	; 106
   13c68:	9a e1       	ldi	r25, 0x1A	; 26
   13c6a:	a0 e0       	ldi	r26, 0x00	; 0
   13c6c:	81 83       	std	Z+1, r24	; 0x01
   13c6e:	92 83       	std	Z+2, r25	; 0x02
   13c70:	a3 83       	std	Z+3, r26	; 0x03
   13c72:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   13c76:	c4 5f       	subi	r28, 0xF4	; 244

    if(fclose(cfg) == EOF)
   13c78:	de 4f       	sbci	r29, 0xFE	; 254
   13c7a:	88 81       	ld	r24, Y
   13c7c:	99 81       	ldd	r25, Y+1	; 0x01
   13c7e:	cc 50       	subi	r28, 0x0C	; 12
   13c80:	d1 40       	sbci	r29, 0x01	; 1
   13c82:	0e 94 d5 7b 	call	0xf7aa	; 0xf7aa <fclose>
   13c86:	01 96       	adiw	r24, 0x01	; 1
   13c88:	39 f4       	brne	.+14     	; 0x13c98 <Read_Config+0x842>
   13c8a:	82 e7       	ldi	r24, 0x72	; 114
    {
        perror("Read_Config - close error");
   13c8c:	9e e0       	ldi	r25, 0x0E	; 14
   13c8e:	0e 94 5c 77 	call	0xeeb8	; 0xeeb8 <perror>
   13c92:	2f ef       	ldi	r18, 0xFF	; 255
        ++errors;
   13c94:	e2 1a       	sub	r14, r18
   13c96:	f2 0a       	sbc	r15, r18
   13c98:	48 db       	rcall	.-2416   	; 0x1332a <Post_Config>
    }

// Post process device values
    Post_Config();
   13c9a:	c7 01       	movw	r24, r14
   13c9c:	c1 5e       	subi	r28, 0xE1	; 225

    return(errors);
   13c9e:	de 4f       	sbci	r29, 0xFE	; 254
}
   13ca0:	e2 e1       	ldi	r30, 0x12	; 18
   13ca2:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

00013ca6 <format_drives>:
   13ca6:	2f 92       	push	r2
   13ca8:	3f 92       	push	r3

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   13caa:	4f 92       	push	r4
   13cac:	5f 92       	push	r5
   13cae:	6f 92       	push	r6
   13cb0:	7f 92       	push	r7
   13cb2:	8f 92       	push	r8
   13cb4:	af 92       	push	r10
   13cb6:	bf 92       	push	r11
   13cb8:	cf 92       	push	r12
   13cba:	df 92       	push	r13
   13cbc:	ef 92       	push	r14
   13cbe:	ff 92       	push	r15
   13cc0:	0f 93       	push	r16
   13cc2:	1f 93       	push	r17
   13cc4:	cf 93       	push	r28
   13cc6:	df 93       	push	r29
   13cc8:	cd b7       	in	r28, 0x3d	; 61
   13cca:	de b7       	in	r29, 0x3e	; 62
   13ccc:	ce 56       	subi	r28, 0x6E	; 110
   13cce:	d1 09       	sbc	r29, r1
   13cd0:	0f b6       	in	r0, 0x3f	; 63
   13cd2:	f8 94       	cli
   13cd4:	de bf       	out	0x3e, r29	; 62
   13cd6:	0f be       	out	0x3f, r0	; 63
   13cd8:	cd bf       	out	0x3d, r28	; 61
   13cda:	81 ef       	ldi	r24, 0xF1	; 241
   13cdc:	c8 2e       	mov	r12, r24
   13cde:	8e e1       	ldi	r24, 0x1E	; 30
   13ce0:	d8 2e       	mov	r13, r24
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
    int amigo = 0;
   13ce2:	a0 96       	adiw	r28, 0x20	; 32
   13ce4:	1f ae       	std	Y+63, r1	; 0x3f
   13ce6:	1e ae       	std	Y+62, r1	; 0x3e
   13ce8:	a0 97       	sbiw	r28, 0x20	; 32
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
   13cea:	6e 96       	adiw	r28, 0x1e	; 30
   13cec:	1f ae       	std	Y+63, r1	; 0x3f
   13cee:	1e ae       	std	Y+62, r1	; 0x3e
   13cf0:	6e 97       	sbiw	r28, 0x1e	; 30
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
   13cf2:	6c 96       	adiw	r28, 0x1c	; 28
   13cf4:	1f ae       	std	Y+63, r1	; 0x3f
   13cf6:	1e ae       	std	Y+62, r1	; 0x3e
   13cf8:	6c 97       	sbiw	r28, 0x1c	; 28
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13cfa:	8e e1       	ldi	r24, 0x1E	; 30
   13cfc:	97 e1       	ldi	r25, 0x17	; 23
   13cfe:	9c 01       	movw	r18, r24
   13d00:	40 e0       	ldi	r20, 0x00	; 0
   13d02:	a3 96       	adiw	r28, 0x23	; 35
   13d04:	2d af       	std	Y+61, r18	; 0x3d
   13d06:	3e af       	std	Y+62, r19	; 0x3e
   13d08:	4f af       	std	Y+63, r20	; 0x3f
   13d0a:	a3 97       	sbiw	r28, 0x23	; 35
                sprintf(label,"AMIGO%d", amigo);
   13d0c:	86 e1       	ldi	r24, 0x16	; 22
   13d0e:	97 e1       	ldi	r25, 0x17	; 23
   13d10:	9c 01       	movw	r18, r24
   13d12:	40 e0       	ldi	r20, 0x00	; 0
   13d14:	a6 96       	adiw	r28, 0x26	; 38
   13d16:	2d af       	std	Y+61, r18	; 0x3d
   13d18:	3e af       	std	Y+62, r19	; 0x3e
   13d1a:	4f af       	std	Y+63, r20	; 0x3f
   13d1c:	a6 97       	sbiw	r28, 0x26	; 38
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13d1e:	88 e3       	ldi	r24, 0x38	; 56
   13d20:	97 e1       	ldi	r25, 0x17	; 23
   13d22:	9c 01       	movw	r18, r24
   13d24:	40 e0       	ldi	r20, 0x00	; 0
   13d26:	a9 96       	adiw	r28, 0x29	; 41
   13d28:	2d af       	std	Y+61, r18	; 0x3d
   13d2a:	3e af       	std	Y+62, r19	; 0x3e
   13d2c:	4f af       	std	Y+63, r20	; 0x3f
   13d2e:	a9 97       	sbiw	r28, 0x29	; 41
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13d30:	82 e6       	ldi	r24, 0x62	; 98
   13d32:	97 e1       	ldi	r25, 0x17	; 23
   13d34:	9c 01       	movw	r18, r24
   13d36:	40 e0       	ldi	r20, 0x00	; 0
   13d38:	ac 96       	adiw	r28, 0x2c	; 44
   13d3a:	2d af       	std	Y+61, r18	; 0x3d
   13d3c:	3e af       	std	Y+62, r19	; 0x3e
   13d3e:	4f af       	std	Y+63, r20	; 0x3f
   13d40:	ac 97       	sbiw	r28, 0x2c	; 44
                sprintf(label,"SS80-%d", ss80);
   13d42:	8a e5       	ldi	r24, 0x5A	; 90
   13d44:	97 e1       	ldi	r25, 0x17	; 23
   13d46:	9c 01       	movw	r18, r24
   13d48:	40 e0       	ldi	r20, 0x00	; 0
   13d4a:	af 96       	adiw	r28, 0x2f	; 47
   13d4c:	2d af       	std	Y+61, r18	; 0x3d
   13d4e:	3e af       	std	Y+62, r19	; 0x3e
   13d50:	4f af       	std	Y+63, r20	; 0x3f
   13d52:	af 97       	sbiw	r28, 0x2f	; 47

            if(stat(SS80p->HEADER.NAME, &st) == -1)
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13d54:	8c e7       	ldi	r24, 0x7C	; 124
   13d56:	97 e1       	ldi	r25, 0x17	; 23
   13d58:	3c 01       	movw	r6, r24
   13d5a:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13d5c:	f6 01       	movw	r30, r12
   13d5e:	80 81       	ld	r24, Z
   13d60:	88 23       	and	r24, r24
   13d62:	09 f4       	brne	.+2      	; 0x13d66 <format_drives+0xc0>
   13d64:	ef c0       	rjmp	.+478    	; 0x13f44 <format_drives+0x29e>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13d66:	83 30       	cpi	r24, 0x03	; 3
   13d68:	09 f0       	breq	.+2      	; 0x13d6c <format_drives+0xc6>
   13d6a:	70 c0       	rjmp	.+224    	; 0x13e4c <format_drives+0x1a6>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13d6c:	a7 a0       	ldd	r10, Z+39	; 0x27
   13d6e:	b0 a4       	ldd	r11, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1)
   13d70:	be 01       	movw	r22, r28
   13d72:	66 5f       	subi	r22, 0xF6	; 246
   13d74:	7f 4f       	sbci	r23, 0xFF	; 255
   13d76:	f5 01       	movw	r30, r10
   13d78:	82 81       	ldd	r24, Z+2	; 0x02
   13d7a:	93 81       	ldd	r25, Z+3	; 0x03
   13d7c:	0e 94 30 78 	call	0xf060	; 0xf060 <stat>
   13d80:	01 96       	adiw	r24, 0x01	; 1
   13d82:	09 f0       	breq	.+2      	; 0x13d86 <format_drives+0xe0>
   13d84:	63 c0       	rjmp	.+198    	; 0x13e4c <format_drives+0x1a6>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13d86:	f5 01       	movw	r30, r10
   13d88:	80 89       	ldd	r24, Z+16	; 0x10
   13d8a:	91 89       	ldd	r25, Z+17	; 0x11
   13d8c:	81 15       	cp	r24, r1
   13d8e:	91 40       	sbci	r25, 0x01	; 1
   13d90:	31 f0       	breq	.+12     	; 0x13d9e <format_drives+0xf8>
                {
                    printf("Can not use non 256 byte sectors\n");
   13d92:	ed b7       	in	r30, 0x3d	; 61
   13d94:	fe b7       	in	r31, 0x3e	; 62
   13d96:	61 82       	std	Z+1, r6	; 0x01
   13d98:	72 82       	std	Z+2, r7	; 0x02
   13d9a:	83 82       	std	Z+3, r8	; 0x03
   13d9c:	79 c0       	rjmp	.+242    	; 0x13e90 <format_drives+0x1ea>
                    continue;
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   13d9e:	f6 01       	movw	r30, r12
   13da0:	23 80       	ldd	r2, Z+3	; 0x03
   13da2:	34 80       	ldd	r3, Z+4	; 0x04
   13da4:	45 80       	ldd	r4, Z+5	; 0x05
   13da6:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13da8:	ed b7       	in	r30, 0x3d	; 61
   13daa:	fe b7       	in	r31, 0x3e	; 62
   13dac:	26 82       	std	Z+6, r2	; 0x06
   13dae:	37 82       	std	Z+7, r3	; 0x07
   13db0:	40 86       	std	Z+8, r4	; 0x08
   13db2:	51 86       	std	Z+9, r5	; 0x09
   13db4:	f5 01       	movw	r30, r10
   13db6:	82 81       	ldd	r24, Z+2	; 0x02
   13db8:	93 81       	ldd	r25, Z+3	; 0x03
   13dba:	ed b7       	in	r30, 0x3d	; 61
   13dbc:	fe b7       	in	r31, 0x3e	; 62
   13dbe:	95 83       	std	Z+5, r25	; 0x05
   13dc0:	84 83       	std	Z+4, r24	; 0x04
   13dc2:	ac 96       	adiw	r28, 0x2c	; 44
   13dc4:	2d ad       	ldd	r18, Y+61	; 0x3d
   13dc6:	3e ad       	ldd	r19, Y+62	; 0x3e
   13dc8:	4f ad       	ldd	r20, Y+63	; 0x3f
   13dca:	ac 97       	sbiw	r28, 0x2c	; 44
   13dcc:	21 83       	std	Z+1, r18	; 0x01
   13dce:	32 83       	std	Z+2, r19	; 0x02
   13dd0:	43 83       	std	Z+3, r20	; 0x03
   13dd2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
                sprintf(label,"SS80-%d", ss80);
   13dd6:	6e 96       	adiw	r28, 0x1e	; 30
   13dd8:	2e ad       	ldd	r18, Y+62	; 0x3e
   13dda:	3f ad       	ldd	r19, Y+63	; 0x3f
   13ddc:	6e 97       	sbiw	r28, 0x1e	; 30
   13dde:	ed b7       	in	r30, 0x3d	; 61
   13de0:	fe b7       	in	r31, 0x3e	; 62
   13de2:	37 83       	std	Z+7, r19	; 0x07
   13de4:	26 83       	std	Z+6, r18	; 0x06
   13de6:	af 96       	adiw	r28, 0x2f	; 47
   13de8:	8d ad       	ldd	r24, Y+61	; 0x3d
   13dea:	9e ad       	ldd	r25, Y+62	; 0x3e
   13dec:	af ad       	ldd	r26, Y+63	; 0x3f
   13dee:	af 97       	sbiw	r28, 0x2f	; 47
   13df0:	83 83       	std	Z+3, r24	; 0x03
   13df2:	94 83       	std	Z+4, r25	; 0x04
   13df4:	a5 83       	std	Z+5, r26	; 0x05
   13df6:	2a e3       	ldi	r18, 0x3A	; 58
   13df8:	30 e0       	ldi	r19, 0x00	; 0
   13dfa:	2c 0f       	add	r18, r28
   13dfc:	3d 1f       	adc	r19, r29
   13dfe:	32 83       	std	Z+2, r19	; 0x02
   13e00:	21 83       	std	Z+1, r18	; 0x01
   13e02:	0e 94 ef 44 	call	0x89de	; 0x89de <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13e06:	f5 01       	movw	r30, r10
   13e08:	a2 80       	ldd	r10, Z+2	; 0x02
   13e0a:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13e0c:	c2 01       	movw	r24, r4
   13e0e:	b1 01       	movw	r22, r2
   13e10:	15 d2       	rcall	.+1066   	; 0x1423c <lif_dir_count>
   13e12:	9b 01       	movw	r18, r22
   13e14:	ac 01       	movw	r20, r24
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13e16:	82 01       	movw	r16, r4
   13e18:	71 01       	movw	r14, r2
   13e1a:	be 01       	movw	r22, r28
   13e1c:	66 5c       	subi	r22, 0xC6	; 198
   13e1e:	7f 4f       	sbci	r23, 0xFF	; 255
   13e20:	c5 01       	movw	r24, r10
   13e22:	0e 94 92 db 	call	0x1b724	; 0x1b724 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif
                ++count;
   13e26:	6c 96       	adiw	r28, 0x1c	; 28
   13e28:	2e ad       	ldd	r18, Y+62	; 0x3e
   13e2a:	3f ad       	ldd	r19, Y+63	; 0x3f
   13e2c:	6c 97       	sbiw	r28, 0x1c	; 28
   13e2e:	2f 5f       	subi	r18, 0xFF	; 255
   13e30:	3f 4f       	sbci	r19, 0xFF	; 255
   13e32:	6c 96       	adiw	r28, 0x1c	; 28
   13e34:	3f af       	std	Y+63, r19	; 0x3f
   13e36:	2e af       	std	Y+62, r18	; 0x3e
   13e38:	6c 97       	sbiw	r28, 0x1c	; 28
                ++ss80;
   13e3a:	6e 96       	adiw	r28, 0x1e	; 30
   13e3c:	8e ad       	ldd	r24, Y+62	; 0x3e
   13e3e:	9f ad       	ldd	r25, Y+63	; 0x3f
   13e40:	6e 97       	sbiw	r28, 0x1e	; 30
   13e42:	01 96       	adiw	r24, 0x01	; 1
   13e44:	6e 96       	adiw	r28, 0x1e	; 30
   13e46:	9f af       	std	Y+63, r25	; 0x3f
   13e48:	8e af       	std	Y+62, r24	; 0x3e
   13e4a:	6e 97       	sbiw	r28, 0x1e	; 30

            }
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13e4c:	f6 01       	movw	r30, r12
   13e4e:	80 81       	ld	r24, Z
   13e50:	81 30       	cpi	r24, 0x01	; 1
   13e52:	09 f0       	breq	.+2      	; 0x13e56 <format_drives+0x1b0>
   13e54:	77 c0       	rjmp	.+238    	; 0x13f44 <format_drives+0x29e>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   13e56:	a7 a0       	ldd	r10, Z+39	; 0x27
   13e58:	b0 a4       	ldd	r11, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
   13e5a:	be 01       	movw	r22, r28
   13e5c:	66 5f       	subi	r22, 0xF6	; 246
   13e5e:	7f 4f       	sbci	r23, 0xFF	; 255
   13e60:	f5 01       	movw	r30, r10
   13e62:	82 81       	ldd	r24, Z+2	; 0x02
   13e64:	93 81       	ldd	r25, Z+3	; 0x03
   13e66:	0e 94 30 78 	call	0xf060	; 0xf060 <stat>
   13e6a:	01 96       	adiw	r24, 0x01	; 1
   13e6c:	09 f0       	breq	.+2      	; 0x13e70 <format_drives+0x1ca>
   13e6e:	6a c0       	rjmp	.+212    	; 0x13f44 <format_drives+0x29e>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13e70:	f5 01       	movw	r30, r10
   13e72:	86 81       	ldd	r24, Z+6	; 0x06
   13e74:	97 81       	ldd	r25, Z+7	; 0x07
   13e76:	81 15       	cp	r24, r1
   13e78:	91 40       	sbci	r25, 0x01	; 1
   13e7a:	69 f0       	breq	.+26     	; 0x13e96 <format_drives+0x1f0>
                {
                    printf("Can not use non 256 byte sectors\n");
   13e7c:	a9 96       	adiw	r28, 0x29	; 41
   13e7e:	2d ad       	ldd	r18, Y+61	; 0x3d
   13e80:	3e ad       	ldd	r19, Y+62	; 0x3e
   13e82:	4f ad       	ldd	r20, Y+63	; 0x3f
   13e84:	a9 97       	sbiw	r28, 0x29	; 41
   13e86:	ed b7       	in	r30, 0x3d	; 61
   13e88:	fe b7       	in	r31, 0x3e	; 62
   13e8a:	21 83       	std	Z+1, r18	; 0x01
   13e8c:	32 83       	std	Z+2, r19	; 0x02
   13e8e:	43 83       	std	Z+3, r20	; 0x03
   13e90:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
                    continue;
   13e94:	57 c0       	rjmp	.+174    	; 0x13f44 <format_drives+0x29e>
                }
                sectors = Devices[i].BLOCKS;
   13e96:	f6 01       	movw	r30, r12
   13e98:	23 80       	ldd	r2, Z+3	; 0x03
   13e9a:	34 80       	ldd	r3, Z+4	; 0x04
   13e9c:	45 80       	ldd	r4, Z+5	; 0x05
   13e9e:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13ea0:	ed b7       	in	r30, 0x3d	; 61
   13ea2:	fe b7       	in	r31, 0x3e	; 62
   13ea4:	26 82       	std	Z+6, r2	; 0x06
   13ea6:	37 82       	std	Z+7, r3	; 0x07
   13ea8:	40 86       	std	Z+8, r4	; 0x08
   13eaa:	51 86       	std	Z+9, r5	; 0x09
   13eac:	f5 01       	movw	r30, r10
   13eae:	82 81       	ldd	r24, Z+2	; 0x02
   13eb0:	93 81       	ldd	r25, Z+3	; 0x03
   13eb2:	ed b7       	in	r30, 0x3d	; 61
   13eb4:	fe b7       	in	r31, 0x3e	; 62
   13eb6:	95 83       	std	Z+5, r25	; 0x05
   13eb8:	84 83       	std	Z+4, r24	; 0x04
   13eba:	a3 96       	adiw	r28, 0x23	; 35
   13ebc:	2d ad       	ldd	r18, Y+61	; 0x3d
   13ebe:	3e ad       	ldd	r19, Y+62	; 0x3e
   13ec0:	4f ad       	ldd	r20, Y+63	; 0x3f
   13ec2:	a3 97       	sbiw	r28, 0x23	; 35
   13ec4:	21 83       	std	Z+1, r18	; 0x01
   13ec6:	32 83       	std	Z+2, r19	; 0x02
   13ec8:	43 83       	std	Z+3, r20	; 0x03
   13eca:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
                sprintf(label,"AMIGO%d", amigo);
   13ece:	a0 96       	adiw	r28, 0x20	; 32
   13ed0:	2e ad       	ldd	r18, Y+62	; 0x3e
   13ed2:	3f ad       	ldd	r19, Y+63	; 0x3f
   13ed4:	a0 97       	sbiw	r28, 0x20	; 32
   13ed6:	ed b7       	in	r30, 0x3d	; 61
   13ed8:	fe b7       	in	r31, 0x3e	; 62
   13eda:	37 83       	std	Z+7, r19	; 0x07
   13edc:	26 83       	std	Z+6, r18	; 0x06
   13ede:	a6 96       	adiw	r28, 0x26	; 38
   13ee0:	8d ad       	ldd	r24, Y+61	; 0x3d
   13ee2:	9e ad       	ldd	r25, Y+62	; 0x3e
   13ee4:	af ad       	ldd	r26, Y+63	; 0x3f
   13ee6:	a6 97       	sbiw	r28, 0x26	; 38
   13ee8:	83 83       	std	Z+3, r24	; 0x03
   13eea:	94 83       	std	Z+4, r25	; 0x04
   13eec:	a5 83       	std	Z+5, r26	; 0x05
   13eee:	2a e3       	ldi	r18, 0x3A	; 58
   13ef0:	30 e0       	ldi	r19, 0x00	; 0
   13ef2:	2c 0f       	add	r18, r28
   13ef4:	3d 1f       	adc	r19, r29
   13ef6:	32 83       	std	Z+2, r19	; 0x02
   13ef8:	21 83       	std	Z+1, r18	; 0x01
   13efa:	0e 94 ef 44 	call	0x89de	; 0x89de <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13efe:	f5 01       	movw	r30, r10
   13f00:	a2 80       	ldd	r10, Z+2	; 0x02
   13f02:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13f04:	c2 01       	movw	r24, r4
   13f06:	b1 01       	movw	r22, r2
   13f08:	99 d1       	rcall	.+818    	; 0x1423c <lif_dir_count>
   13f0a:	9b 01       	movw	r18, r22
   13f0c:	ac 01       	movw	r20, r24
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13f0e:	82 01       	movw	r16, r4
   13f10:	71 01       	movw	r14, r2
   13f12:	be 01       	movw	r22, r28
   13f14:	66 5c       	subi	r22, 0xC6	; 198
   13f16:	7f 4f       	sbci	r23, 0xFF	; 255
   13f18:	c5 01       	movw	r24, r10
   13f1a:	0e 94 92 db 	call	0x1b724	; 0x1b724 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
                ++count;
   13f1e:	6c 96       	adiw	r28, 0x1c	; 28
   13f20:	2e ad       	ldd	r18, Y+62	; 0x3e
   13f22:	3f ad       	ldd	r19, Y+63	; 0x3f
   13f24:	6c 97       	sbiw	r28, 0x1c	; 28
   13f26:	2f 5f       	subi	r18, 0xFF	; 255
   13f28:	3f 4f       	sbci	r19, 0xFF	; 255
   13f2a:	6c 96       	adiw	r28, 0x1c	; 28
   13f2c:	3f af       	std	Y+63, r19	; 0x3f
   13f2e:	2e af       	std	Y+62, r18	; 0x3e
   13f30:	6c 97       	sbiw	r28, 0x1c	; 28
                ++amigo;
   13f32:	a0 96       	adiw	r28, 0x20	; 32
   13f34:	8e ad       	ldd	r24, Y+62	; 0x3e
   13f36:	9f ad       	ldd	r25, Y+63	; 0x3f
   13f38:	a0 97       	sbiw	r28, 0x20	; 32
   13f3a:	01 96       	adiw	r24, 0x01	; 1
   13f3c:	a0 96       	adiw	r28, 0x20	; 32
   13f3e:	9f af       	std	Y+63, r25	; 0x3f
   13f40:	8e af       	std	Y+62, r24	; 0x3e
   13f42:	a0 97       	sbiw	r28, 0x20	; 32
   13f44:	9b e2       	ldi	r25, 0x2B	; 43
   13f46:	c9 0e       	add	r12, r25
   13f48:	d1 1c       	adc	r13, r1
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13f4a:	a5 ef       	ldi	r26, 0xF5	; 245
   13f4c:	ca 16       	cp	r12, r26
   13f4e:	a0 e2       	ldi	r26, 0x20	; 32
   13f50:	da 06       	cpc	r13, r26
   13f52:	09 f0       	breq	.+2      	; 0x13f56 <format_drives+0x2b0>
   13f54:	03 cf       	rjmp	.-506    	; 0x13d5c <format_drives+0xb6>
                ++amigo;
            }
        }
#endif                                    // #ifdef AMIGO
    }
    if(count)
   13f56:	6c 96       	adiw	r28, 0x1c	; 28
   13f58:	ee ad       	ldd	r30, Y+62	; 0x3e
   13f5a:	ff ad       	ldd	r31, Y+63	; 0x3f
   13f5c:	6c 97       	sbiw	r28, 0x1c	; 28
   13f5e:	ef 2b       	or	r30, r31
   13f60:	11 f0       	breq	.+4      	; 0x13f66 <format_drives+0x2c0>
        sep();
   13f62:	0e 94 12 30 	call	0x6024	; 0x6024 <sep>
}
   13f66:	c2 59       	subi	r28, 0x92	; 146
   13f68:	df 4f       	sbci	r29, 0xFF	; 255
   13f6a:	0f b6       	in	r0, 0x3f	; 63
   13f6c:	f8 94       	cli
   13f6e:	de bf       	out	0x3e, r29	; 62
   13f70:	0f be       	out	0x3f, r0	; 63
   13f72:	cd bf       	out	0x3d, r28	; 61
   13f74:	df 91       	pop	r29
   13f76:	cf 91       	pop	r28
   13f78:	1f 91       	pop	r17
   13f7a:	0f 91       	pop	r16
   13f7c:	ff 90       	pop	r15
   13f7e:	ef 90       	pop	r14
   13f80:	df 90       	pop	r13
   13f82:	cf 90       	pop	r12
   13f84:	bf 90       	pop	r11
   13f86:	af 90       	pop	r10
   13f88:	8f 90       	pop	r8
   13f8a:	7f 90       	pop	r7
   13f8c:	6f 90       	pop	r6
   13f8e:	5f 90       	pop	r5
   13f90:	4f 90       	pop	r4
   13f92:	3f 90       	pop	r3
   13f94:	2f 90       	pop	r2
   13f96:	08 95       	ret

00013f98 <display_mounts>:
	}
	display_mounts();
}

void display_mounts( )
{
   13f98:	2f 92       	push	r2
   13f9a:	3f 92       	push	r3
   13f9c:	4f 92       	push	r4
   13f9e:	6f 92       	push	r6
   13fa0:	7f 92       	push	r7
   13fa2:	8f 92       	push	r8
   13fa4:	cf 92       	push	r12
   13fa6:	df 92       	push	r13
   13fa8:	ef 92       	push	r14
   13faa:	0f 93       	push	r16
   13fac:	1f 93       	push	r17
   13fae:	cf 93       	push	r28
   13fb0:	df 93       	push	r29
   13fb2:	ad b7       	in	r26, 0x3d	; 61
   13fb4:	be b7       	in	r27, 0x3e	; 62
   13fb6:	19 97       	sbiw	r26, 0x09	; 9
   13fb8:	0f b6       	in	r0, 0x3f	; 63
   13fba:	f8 94       	cli
   13fbc:	be bf       	out	0x3e, r27	; 62
   13fbe:	0f be       	out	0x3f, r0	; 63
   13fc0:	ad bf       	out	0x3d, r26	; 61
   13fc2:	c1 ef       	ldi	r28, 0xF1	; 241
   13fc4:	de e1       	ldi	r29, 0x1E	; 30
#endif                                    // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
   13fc6:	0c e8       	ldi	r16, 0x8C	; 140
   13fc8:	1e e0       	ldi	r17, 0x0E	; 14
   13fca:	8e ec       	ldi	r24, 0xCE	; 206
   13fcc:	96 e1       	ldi	r25, 0x16	; 22
   13fce:	6c 01       	movw	r12, r24
   13fd0:	e1 2c       	mov	r14, r1

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            printf("%-16s AMIGO %2d %s\n", Devices[i].model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   13fd2:	8f ed       	ldi	r24, 0xDF	; 223
   13fd4:	96 e1       	ldi	r25, 0x16	; 22
   13fd6:	3c 01       	movw	r6, r24
   13fd8:	81 2c       	mov	r8, r1

        if(Devices[i].TYPE == SS80_TYPE)
        {
            SS80p= (SS80DiskType *)Devices[i].dev;

            printf("%-16s SS80  %2d %s\n", Devices[i].model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   13fda:	83 ef       	ldi	r24, 0xF3	; 243
   13fdc:	96 e1       	ldi	r25, 0x16	; 22
   13fde:	1c 01       	movw	r2, r24
   13fe0:	41 2c       	mov	r4, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13fe2:	88 81       	ld	r24, Y
   13fe4:	88 23       	and	r24, r24
   13fe6:	09 f4       	brne	.+2      	; 0x13fea <display_mounts+0x52>
   13fe8:	43 c0       	rjmp	.+134    	; 0x14070 <display_mounts+0xd8>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13fea:	83 30       	cpi	r24, 0x03	; 3
   13fec:	b1 f4       	brne	.+44     	; 0x1401a <display_mounts+0x82>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13fee:	af a1       	ldd	r26, Y+39	; 0x27
   13ff0:	b8 a5       	ldd	r27, Y+40	; 0x28

            printf("%-16s SS80  %2d %s\n", Devices[i].model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   13ff2:	fd 01       	movw	r30, r26
   13ff4:	82 81       	ldd	r24, Z+2	; 0x02
   13ff6:	93 81       	ldd	r25, Z+3	; 0x03
   13ff8:	ed b7       	in	r30, 0x3d	; 61
   13ffa:	fe b7       	in	r31, 0x3e	; 62
   13ffc:	91 87       	std	Z+9, r25	; 0x09
   13ffe:	80 87       	std	Z+8, r24	; 0x08
   14000:	8c 91       	ld	r24, X
   14002:	90 e0       	ldi	r25, 0x00	; 0
   14004:	97 83       	std	Z+7, r25	; 0x07
   14006:	86 83       	std	Z+6, r24	; 0x06
   14008:	ce 01       	movw	r24, r28
   1400a:	07 96       	adiw	r24, 0x07	; 7
   1400c:	95 83       	std	Z+5, r25	; 0x05
   1400e:	84 83       	std	Z+4, r24	; 0x04
   14010:	21 82       	std	Z+1, r2	; 0x01
   14012:	32 82       	std	Z+2, r3	; 0x02
   14014:	43 82       	std	Z+3, r4	; 0x03
   14016:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
		}

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   1401a:	88 81       	ld	r24, Y
   1401c:	81 30       	cpi	r24, 0x01	; 1
   1401e:	b1 f4       	brne	.+44     	; 0x1404c <display_mounts+0xb4>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   14020:	af a1       	ldd	r26, Y+39	; 0x27
   14022:	b8 a5       	ldd	r27, Y+40	; 0x28
            printf("%-16s AMIGO %2d %s\n", Devices[i].model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   14024:	fd 01       	movw	r30, r26
   14026:	82 81       	ldd	r24, Z+2	; 0x02
   14028:	93 81       	ldd	r25, Z+3	; 0x03
   1402a:	ed b7       	in	r30, 0x3d	; 61
   1402c:	fe b7       	in	r31, 0x3e	; 62
   1402e:	91 87       	std	Z+9, r25	; 0x09
   14030:	80 87       	std	Z+8, r24	; 0x08
   14032:	8c 91       	ld	r24, X
   14034:	90 e0       	ldi	r25, 0x00	; 0
   14036:	97 83       	std	Z+7, r25	; 0x07
   14038:	86 83       	std	Z+6, r24	; 0x06
   1403a:	ce 01       	movw	r24, r28
   1403c:	07 96       	adiw	r24, 0x07	; 7
   1403e:	95 83       	std	Z+5, r25	; 0x05
   14040:	84 83       	std	Z+4, r24	; 0x04
   14042:	61 82       	std	Z+1, r6	; 0x01
   14044:	72 82       	std	Z+2, r7	; 0x02
   14046:	83 82       	std	Z+3, r8	; 0x03
   14048:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        }
#endif                                    // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   1404c:	88 81       	ld	r24, Y
   1404e:	84 30       	cpi	r24, 0x04	; 4
   14050:	79 f4       	brne	.+30     	; 0x14070 <display_mounts+0xd8>
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
   14052:	ef a1       	ldd	r30, Y+39	; 0x27
   14054:	f8 a5       	ldd	r31, Y+40	; 0x28
   14056:	80 81       	ld	r24, Z
   14058:	90 e0       	ldi	r25, 0x00	; 0
   1405a:	ed b7       	in	r30, 0x3d	; 61
   1405c:	fe b7       	in	r31, 0x3e	; 62
   1405e:	97 83       	std	Z+7, r25	; 0x07
   14060:	86 83       	std	Z+6, r24	; 0x06
   14062:	15 83       	std	Z+5, r17	; 0x05
   14064:	04 83       	std	Z+4, r16	; 0x04
   14066:	c1 82       	std	Z+1, r12	; 0x01
   14068:	d2 82       	std	Z+2, r13	; 0x02
   1406a:	e3 82       	std	Z+3, r14	; 0x03
   1406c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   14070:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   14072:	f0 e2       	ldi	r31, 0x20	; 32
   14074:	c5 3f       	cpi	r28, 0xF5	; 245
   14076:	df 07       	cpc	r29, r31
   14078:	09 f0       	breq	.+2      	; 0x1407c <display_mounts+0xe4>
   1407a:	b3 cf       	rjmp	.-154    	; 0x13fe2 <display_mounts+0x4a>
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
		}
    }
    printf("\n");
   1407c:	8c ec       	ldi	r24, 0xCC	; 204
   1407e:	96 e1       	ldi	r25, 0x16	; 22
   14080:	a0 e0       	ldi	r26, 0x00	; 0
   14082:	ed b7       	in	r30, 0x3d	; 61
   14084:	fe b7       	in	r31, 0x3e	; 62
   14086:	81 83       	std	Z+1, r24	; 0x01
   14088:	92 83       	std	Z+2, r25	; 0x02
   1408a:	a3 83       	std	Z+3, r26	; 0x03
   1408c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
}
   14090:	ad b7       	in	r26, 0x3d	; 61
   14092:	be b7       	in	r27, 0x3e	; 62
   14094:	19 96       	adiw	r26, 0x09	; 9
   14096:	0f b6       	in	r0, 0x3f	; 63
   14098:	f8 94       	cli
   1409a:	be bf       	out	0x3e, r27	; 62
   1409c:	0f be       	out	0x3f, r0	; 63
   1409e:	ad bf       	out	0x3d, r26	; 61
   140a0:	df 91       	pop	r29
   140a2:	cf 91       	pop	r28
   140a4:	1f 91       	pop	r17
   140a6:	0f 91       	pop	r16
   140a8:	ef 90       	pop	r14
   140aa:	df 90       	pop	r13
   140ac:	cf 90       	pop	r12
   140ae:	8f 90       	pop	r8
   140b0:	7f 90       	pop	r7
   140b2:	6f 90       	pop	r6
   140b4:	4f 90       	pop	r4
   140b6:	3f 90       	pop	r3
   140b8:	2f 90       	pop	r2
   140ba:	08 95       	ret

000140bc <mount>:

/// ===============================================
/// @brief mount disks - testing
/// @return  void
void mount(int argc, char *argv[])
{
   140bc:	af 92       	push	r10
   140be:	bf 92       	push	r11
   140c0:	cf 92       	push	r12
   140c2:	df 92       	push	r13
   140c4:	ef 92       	push	r14
   140c6:	0f 93       	push	r16
   140c8:	1f 93       	push	r17
   140ca:	cf 93       	push	r28
   140cc:	df 93       	push	r29
   140ce:	ad b7       	in	r26, 0x3d	; 61
   140d0:	be b7       	in	r27, 0x3e	; 62
   140d2:	17 97       	sbiw	r26, 0x07	; 7
   140d4:	0f b6       	in	r0, 0x3f	; 63
   140d6:	f8 94       	cli
   140d8:	be bf       	out	0x3e, r27	; 62
   140da:	0f be       	out	0x3f, r0	; 63
   140dc:	ad bf       	out	0x3d, r26	; 61
   140de:	5c 01       	movw	r10, r24
   140e0:	8b 01       	movw	r16, r22
   140e2:	0e 5f       	subi	r16, 0xFE	; 254
   140e4:	1f 4f       	sbci	r17, 0xFF	; 255
	int i;
	for(i = 1;i< argc;++i)
   140e6:	c1 e0       	ldi	r28, 0x01	; 1
   140e8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);
   140ea:	87 e0       	ldi	r24, 0x07	; 7
   140ec:	97 e1       	ldi	r25, 0x17	; 23
   140ee:	6c 01       	movw	r12, r24
   140f0:	e1 2c       	mov	r14, r1
/// @brief mount disks - testing
/// @return  void
void mount(int argc, char *argv[])
{
	int i;
	for(i = 1;i< argc;++i)
   140f2:	ca 15       	cp	r28, r10
   140f4:	db 05       	cpc	r29, r11
   140f6:	8c f4       	brge	.+34     	; 0x1411a <mount+0x5e>
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);
   140f8:	f8 01       	movw	r30, r16
   140fa:	81 91       	ld	r24, Z+
   140fc:	91 91       	ld	r25, Z+
   140fe:	8f 01       	movw	r16, r30
   14100:	ed b7       	in	r30, 0x3d	; 61
   14102:	fe b7       	in	r31, 0x3e	; 62
   14104:	97 83       	std	Z+7, r25	; 0x07
   14106:	86 83       	std	Z+6, r24	; 0x06
   14108:	d5 83       	std	Z+5, r29	; 0x05
   1410a:	c4 83       	std	Z+4, r28	; 0x04
   1410c:	c1 82       	std	Z+1, r12	; 0x01
   1410e:	d2 82       	std	Z+2, r13	; 0x02
   14110:	e3 82       	std	Z+3, r14	; 0x03
   14112:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
/// @brief mount disks - testing
/// @return  void
void mount(int argc, char *argv[])
{
	int i;
	for(i = 1;i< argc;++i)
   14116:	21 96       	adiw	r28, 0x01	; 1
   14118:	ec cf       	rjmp	.-40     	; 0x140f2 <mount+0x36>
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);

	}
	display_mounts();
   1411a:	3e df       	rcall	.-388    	; 0x13f98 <display_mounts>
}
   1411c:	ad b7       	in	r26, 0x3d	; 61
   1411e:	be b7       	in	r27, 0x3e	; 62
   14120:	17 96       	adiw	r26, 0x07	; 7
   14122:	0f b6       	in	r0, 0x3f	; 63
   14124:	f8 94       	cli
   14126:	be bf       	out	0x3e, r27	; 62
   14128:	0f be       	out	0x3f, r0	; 63
   1412a:	ad bf       	out	0x3d, r26	; 61
   1412c:	df 91       	pop	r29
   1412e:	cf 91       	pop	r28
   14130:	1f 91       	pop	r17
   14132:	0f 91       	pop	r16
   14134:	ef 90       	pop	r14
   14136:	df 90       	pop	r13
   14138:	cf 90       	pop	r12
   1413a:	bf 90       	pop	r11
   1413c:	af 90       	pop	r10
   1413e:	08 95       	ret

00014140 <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   14140:	8f e1       	ldi	r24, 0x1F	; 31
   14142:	e5 ef       	ldi	r30, 0xF5	; 245
   14144:	f0 e2       	ldi	r31, 0x20	; 32
   14146:	df 01       	movw	r26, r30
   14148:	98 2f       	mov	r25, r24
   1414a:	1d 92       	st	X+, r1
   1414c:	9a 95       	dec	r25
   1414e:	e9 f7       	brne	.-6      	; 0x1414a <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   14150:	9f e3       	ldi	r25, 0x3F	; 63
   14152:	e5 e1       	ldi	r30, 0x15	; 21
   14154:	f1 e2       	ldi	r31, 0x21	; 33
   14156:	df 01       	movw	r26, r30
   14158:	1d 92       	st	X+, r1
   1415a:	9a 95       	dec	r25
   1415c:	e9 f7       	brne	.-6      	; 0x14158 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   1415e:	e5 e5       	ldi	r30, 0x55	; 85
   14160:	f1 e2       	ldi	r31, 0x21	; 33
   14162:	df 01       	movw	r26, r30
   14164:	1d 92       	st	X+, r1
   14166:	8a 95       	dec	r24
   14168:	e9 f7       	brne	.-6      	; 0x14164 <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   1416a:	10 92 75 21 	sts	0x2175, r1	; 0x802175 <hpdir+0x80>
   1416e:	10 92 76 21 	sts	0x2176, r1	; 0x802176 <hpdir+0x81>
   14172:	10 92 77 21 	sts	0x2177, r1	; 0x802177 <hpdir+0x82>
   14176:	10 92 78 21 	sts	0x2178, r1	; 0x802178 <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   1417a:	10 92 79 21 	sts	0x2179, r1	; 0x802179 <hpdir+0x84>
   1417e:	10 92 7a 21 	sts	0x217A, r1	; 0x80217a <hpdir+0x85>
   14182:	10 92 7b 21 	sts	0x217B, r1	; 0x80217b <hpdir+0x86>
   14186:	10 92 7c 21 	sts	0x217C, r1	; 0x80217c <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   1418a:	10 92 7d 21 	sts	0x217D, r1	; 0x80217d <hpdir+0x88>
   1418e:	10 92 7e 21 	sts	0x217E, r1	; 0x80217e <hpdir+0x89>
   14192:	10 92 7f 21 	sts	0x217F, r1	; 0x80217f <hpdir+0x8a>
   14196:	10 92 80 21 	sts	0x2180, r1	; 0x802180 <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   1419a:	10 92 81 21 	sts	0x2181, r1	; 0x802181 <hpdir+0x8c>
   1419e:	10 92 82 21 	sts	0x2182, r1	; 0x802182 <hpdir+0x8d>
   141a2:	10 92 83 21 	sts	0x2183, r1	; 0x802183 <hpdir+0x8e>
   141a6:	10 92 84 21 	sts	0x2184, r1	; 0x802184 <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   141aa:	81 e0       	ldi	r24, 0x01	; 1
   141ac:	90 e8       	ldi	r25, 0x80	; 128
   141ae:	a0 e0       	ldi	r26, 0x00	; 0
   141b0:	b0 e0       	ldi	r27, 0x00	; 0
   141b2:	80 93 85 21 	sts	0x2185, r24	; 0x802185 <hpdir+0x90>
   141b6:	90 93 86 21 	sts	0x2186, r25	; 0x802186 <hpdir+0x91>
   141ba:	a0 93 87 21 	sts	0x2187, r26	; 0x802187 <hpdir+0x92>
   141be:	b0 93 88 21 	sts	0x2188, r27	; 0x802188 <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   141c2:	10 92 89 21 	sts	0x2189, r1	; 0x802189 <hpdir+0x94>
   141c6:	10 92 8a 21 	sts	0x218A, r1	; 0x80218a <hpdir+0x95>
   141ca:	10 92 8b 21 	sts	0x218B, r1	; 0x80218b <hpdir+0x96>
   141ce:	10 92 8c 21 	sts	0x218C, r1	; 0x80218c <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   141d2:	10 92 8d 21 	sts	0x218D, r1	; 0x80218d <hpdir+0x98>
   141d6:	10 92 8e 21 	sts	0x218E, r1	; 0x80218e <hpdir+0x99>
   141da:	10 92 8f 21 	sts	0x218F, r1	; 0x80218f <hpdir+0x9a>
   141de:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   141e2:	10 92 91 21 	sts	0x2191, r1	; 0x802191 <hpdir+0x9c>
   141e6:	10 92 92 21 	sts	0x2192, r1	; 0x802192 <hpdir+0x9d>
   141ea:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <hpdir+0x9e>
   141ee:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   141f2:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <hpdir+0xa0>
   141f6:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <hpdir+0xa1>
   141fa:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <hpdir+0xa2>
   141fe:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   14202:	10 92 99 21 	sts	0x2199, r1	; 0x802199 <hpdir+0xa4>
   14206:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <hpdir+0xa5>
   1420a:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <hpdir+0xa6>
   1420e:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   14212:	81 e0       	ldi	r24, 0x01	; 1
   14214:	90 e0       	ldi	r25, 0x00	; 0
   14216:	a0 e0       	ldi	r26, 0x00	; 0
   14218:	b0 e0       	ldi	r27, 0x00	; 0
   1421a:	80 93 9d 21 	sts	0x219D, r24	; 0x80219d <hpdir+0xa8>
   1421e:	90 93 9e 21 	sts	0x219E, r25	; 0x80219e <hpdir+0xa9>
   14222:	a0 93 9f 21 	sts	0x219F, r26	; 0x80219f <hpdir+0xaa>
   14226:	b0 93 a0 21 	sts	0x21A0, r27	; 0x8021a0 <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   1422a:	10 92 a1 21 	sts	0x21A1, r1	; 0x8021a1 <hpdir+0xac>
   1422e:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <hpdir+0xad>
   14232:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <hpdir+0xae>
   14236:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <hpdir+0xaf>
   1423a:	08 95       	ret

0001423c <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   1423c:	20 e0       	ldi	r18, 0x00	; 0
   1423e:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   14240:	61 15       	cp	r22, r1
   14242:	71 05       	cpc	r23, r1
   14244:	81 05       	cpc	r24, r1
   14246:	91 05       	cpc	r25, r1
   14248:	39 f0       	breq	.+14     	; 0x14258 <lif_dir_count+0x1c>
    {
        scale++;
   1424a:	2f 5f       	subi	r18, 0xFF	; 255
   1424c:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   1424e:	95 95       	asr	r25
   14250:	87 95       	ror	r24
   14252:	77 95       	ror	r23
   14254:	67 95       	ror	r22
   14256:	f4 cf       	rjmp	.-24     	; 0x14240 <lif_dir_count+0x4>
    }
    scale>>=1;
   14258:	35 95       	asr	r19
   1425a:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   1425c:	61 e0       	ldi	r22, 0x01	; 1
   1425e:	70 e0       	ldi	r23, 0x00	; 0
   14260:	80 e0       	ldi	r24, 0x00	; 0
   14262:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   14264:	21 50       	subi	r18, 0x01	; 1
   14266:	31 09       	sbc	r19, r1
   14268:	28 f0       	brcs	.+10     	; 0x14274 <lif_dir_count+0x38>
        num <<=1;
   1426a:	66 0f       	add	r22, r22
   1426c:	77 1f       	adc	r23, r23
   1426e:	88 1f       	adc	r24, r24
   14270:	99 1f       	adc	r25, r25
   14272:	f8 cf       	rjmp	.-16     	; 0x14264 <lif_dir_count+0x28>
    return(num);
}
   14274:	08 95       	ret

00014276 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   14276:	2f 92       	push	r2
   14278:	3f 92       	push	r3
   1427a:	4f 92       	push	r4
   1427c:	5f 92       	push	r5
   1427e:	6f 92       	push	r6
   14280:	8f 92       	push	r8
   14282:	9f 92       	push	r9
   14284:	af 92       	push	r10
   14286:	bf 92       	push	r11
   14288:	cf 92       	push	r12
   1428a:	df 92       	push	r13
   1428c:	ef 92       	push	r14
   1428e:	ff 92       	push	r15
   14290:	0f 93       	push	r16
   14292:	1f 93       	push	r17
   14294:	cf 93       	push	r28
   14296:	df 93       	push	r29
   14298:	cd b7       	in	r28, 0x3d	; 61
   1429a:	de b7       	in	r29, 0x3e	; 62
   1429c:	c9 58       	subi	r28, 0x89	; 137
   1429e:	d1 40       	sbci	r29, 0x01	; 1
   142a0:	0f b6       	in	r0, 0x3f	; 63
   142a2:	f8 94       	cli
   142a4:	de bf       	out	0x3e, r29	; 62
   142a6:	0f be       	out	0x3f, r0	; 63
   142a8:	cd bf       	out	0x3d, r28	; 61
   142aa:	6c 01       	movw	r12, r24
   142ac:	c8 57       	subi	r28, 0x78	; 120
   142ae:	de 4f       	sbci	r29, 0xFE	; 254
   142b0:	79 83       	std	Y+1, r23	; 0x01
   142b2:	68 83       	st	Y, r22
   142b4:	c8 58       	subi	r28, 0x88	; 136
   142b6:	d1 40       	sbci	r29, 0x01	; 1
   142b8:	5a 01       	movw	r10, r20
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   142ba:	42 df       	rcall	.-380    	; 0x14140 <hpdir_init>

    cfg = fopen("hpdir.ini","rb");
   142bc:	6e ef       	ldi	r22, 0xFE	; 254
   142be:	78 e0       	ldi	r23, 0x08	; 8
   142c0:	83 e6       	ldi	r24, 0x63	; 99
   142c2:	90 e1       	ldi	r25, 0x10	; 16
   142c4:	0e 94 2b 7d 	call	0xfa56	; 0xfa56 <fopen>
   142c8:	7c 01       	movw	r14, r24

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   142ca:	89 2b       	or	r24, r25
   142cc:	49 f4       	brne	.+18     	; 0x142e0 <hpdir_find_drive+0x6a>
        cfg = fopen("/hpdir.ini","rb");
   142ce:	6e ef       	ldi	r22, 0xFE	; 254
   142d0:	78 e0       	ldi	r23, 0x08	; 8
   142d2:	82 e6       	ldi	r24, 0x62	; 98
   142d4:	90 e1       	ldi	r25, 0x10	; 16
   142d6:	0e 94 2b 7d 	call	0xfa56	; 0xfa56 <fopen>
   142da:	7c 01       	movw	r14, r24
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   142dc:	89 2b       	or	r24, r25
   142de:	51 f0       	breq	.+20     	; 0x142f4 <hpdir_find_drive+0x7e>
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   142e0:	21 2c       	mov	r2, r1
   142e2:	31 2c       	mov	r3, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   142e4:	8e 01       	movw	r16, r28
   142e6:	08 5f       	subi	r16, 0xF8	; 248
   142e8:	1e 4f       	sbci	r17, 0xFE	; 254
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   142ea:	84 ec       	ldi	r24, 0xC4	; 196
   142ec:	9d e1       	ldi	r25, 0x1D	; 29
   142ee:	2c 01       	movw	r4, r24
   142f0:	61 2c       	mov	r6, r1
   142f2:	1e c0       	rjmp	.+60     	; 0x14330 <hpdir_find_drive+0xba>
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   142f4:	ab 28       	or	r10, r11
   142f6:	09 f4       	brne	.+2      	; 0x142fa <hpdir_find_drive+0x84>
   142f8:	69 c1       	rjmp	.+722    	; 0x145cc <hpdir_find_drive+0x356>
            printf("Error: hpdir.ini not found!\n");
   142fa:	8b ec       	ldi	r24, 0xCB	; 203
   142fc:	9d e1       	ldi	r25, 0x1D	; 29
   142fe:	a0 e0       	ldi	r26, 0x00	; 0
   14300:	ed b7       	in	r30, 0x3d	; 61
   14302:	fe b7       	in	r31, 0x3e	; 62
   14304:	81 83       	std	Z+1, r24	; 0x01
   14306:	92 83       	std	Z+2, r25	; 0x02
   14308:	a3 83       	std	Z+3, r26	; 0x03
   1430a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1430e:	5e c1       	rjmp	.+700    	; 0x145cc <hpdir_find_drive+0x356>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   14310:	ce 01       	movw	r24, r28
   14312:	08 96       	adiw	r24, 0x08	; 8
   14314:	0e 94 22 30 	call	0x6044	; 0x6044 <trim_tail>
        ptr = skipspaces(ptr);
   14318:	ce 01       	movw	r24, r28
   1431a:	08 96       	adiw	r24, 0x08	; 8
   1431c:	0e 94 32 30 	call	0x6064	; 0x6064 <skipspaces>

        len = strlen(ptr);
   14320:	fc 01       	movw	r30, r24
   14322:	01 90       	ld	r0, Z+
   14324:	00 20       	and	r0, r0
   14326:	e9 f7       	brne	.-6      	; 0x14322 <hpdir_find_drive+0xac>
   14328:	31 97       	sbiw	r30, 0x01	; 1
        if(!len)
   1432a:	8e 17       	cp	r24, r30
   1432c:	9f 07       	cpc	r25, r31
   1432e:	51 f4       	brne	.+20     	; 0x14344 <hpdir_find_drive+0xce>
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   14330:	a7 01       	movw	r20, r14
   14332:	6e ef       	ldi	r22, 0xFE	; 254
   14334:	70 e0       	ldi	r23, 0x00	; 0
   14336:	ce 01       	movw	r24, r28
   14338:	08 96       	adiw	r24, 0x08	; 8
   1433a:	0e 94 43 75 	call	0xea86	; 0xea86 <fgets>
   1433e:	89 2b       	or	r24, r25
   14340:	39 f7       	brne	.-50     	; 0x14310 <hpdir_find_drive+0x9a>
   14342:	0c c0       	rjmp	.+24     	; 0x1435c <hpdir_find_drive+0xe6>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   14344:	fc 01       	movw	r30, r24
   14346:	20 81       	ld	r18, Z
   14348:	2b 33       	cpi	r18, 0x3B	; 59
   1434a:	91 f3       	breq	.-28     	; 0x14330 <hpdir_find_drive+0xba>
   1434c:	23 32       	cpi	r18, 0x23	; 35
   1434e:	81 f3       	breq	.-32     	; 0x14330 <hpdir_find_drive+0xba>
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   14350:	2b 35       	cpi	r18, 0x5B	; 91
   14352:	31 f4       	brne	.+12     	; 0x14360 <hpdir_find_drive+0xea>
   14354:	f1 e0       	ldi	r31, 0x01	; 1
   14356:	2f 16       	cp	r2, r31
   14358:	31 04       	cpc	r3, r1
   1435a:	11 f4       	brne	.+4      	; 0x14360 <hpdir_find_drive+0xea>
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   1435c:	00 e0       	ldi	r16, 0x00	; 0
   1435e:	30 c1       	rjmp	.+608    	; 0x145c0 <hpdir_find_drive+0x34a>

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14360:	4e e7       	ldi	r20, 0x7E	; 126
   14362:	50 e0       	ldi	r21, 0x00	; 0
   14364:	b8 01       	movw	r22, r16
   14366:	0e 94 04 31 	call	0x6208	; 0x6208 <get_token>
   1436a:	4c 01       	movw	r8, r24

        if(MATCHI(token,"[driveinfo]"))
   1436c:	6d e6       	ldi	r22, 0x6D	; 109
   1436e:	70 e1       	ldi	r23, 0x10	; 16
   14370:	c8 01       	movw	r24, r16
   14372:	0e 94 50 30 	call	0x60a0	; 0x60a0 <MATCHI>
   14376:	89 2b       	or	r24, r25
   14378:	21 f0       	breq	.+8      	; 0x14382 <hpdir_find_drive+0x10c>
        {
            driveinfo = 1;
   1437a:	22 24       	eor	r2, r2
   1437c:	23 94       	inc	r2
   1437e:	31 2c       	mov	r3, r1
   14380:	d7 cf       	rjmp	.-82     	; 0x14330 <hpdir_find_drive+0xba>
            continue;
        }

        if( driveinfo != 1)
   14382:	21 e0       	ldi	r18, 0x01	; 1
   14384:	22 16       	cp	r2, r18
   14386:	31 04       	cpc	r3, r1
   14388:	99 f6       	brne	.-90     	; 0x14330 <hpdir_find_drive+0xba>
            continue;

        if(list)
   1438a:	c8 57       	subi	r28, 0x78	; 120
   1438c:	de 4f       	sbci	r29, 0xFE	; 254
   1438e:	88 81       	ld	r24, Y
   14390:	99 81       	ldd	r25, Y+1	; 0x01
   14392:	c8 58       	subi	r28, 0x88	; 136
   14394:	d1 40       	sbci	r29, 0x01	; 1
   14396:	89 2b       	or	r24, r25
   14398:	61 f0       	breq	.+24     	; 0x143b2 <hpdir_find_drive+0x13c>
        {
            printf("%s %s\n", token, ptr);
   1439a:	ed b7       	in	r30, 0x3d	; 61
   1439c:	fe b7       	in	r31, 0x3e	; 62
   1439e:	97 82       	std	Z+7, r9	; 0x07
   143a0:	86 82       	std	Z+6, r8	; 0x06
   143a2:	15 83       	std	Z+5, r17	; 0x05
   143a4:	04 83       	std	Z+4, r16	; 0x04
   143a6:	41 82       	std	Z+1, r4	; 0x01
   143a8:	52 82       	std	Z+2, r5	; 0x02
   143aa:	63 82       	std	Z+3, r6	; 0x03
   143ac:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            continue;
   143b0:	bf cf       	rjmp	.-130    	; 0x14330 <hpdir_find_drive+0xba>
        }

        if ( ! MATCHI(model,token) )
   143b2:	b8 01       	movw	r22, r16
   143b4:	c6 01       	movw	r24, r12
   143b6:	0e 94 50 30 	call	0x60a0	; 0x60a0 <MATCHI>
   143ba:	89 2b       	or	r24, r25
            continue;

        hpdir_init();
   143bc:	f1 f2       	breq	.-68     	; 0x1437a <hpdir_find_drive+0x104>
   143be:	c0 de       	rcall	.-640    	; 0x14140 <hpdir_init>

        if(verbose)
   143c0:	ab 28       	or	r10, r11
   143c2:	61 f0       	breq	.+24     	; 0x143dc <hpdir_find_drive+0x166>
            printf("Found Model: %s\n", model);
   143c4:	ed b7       	in	r30, 0x3d	; 61
   143c6:	fe b7       	in	r31, 0x3e	; 62
   143c8:	d5 82       	std	Z+5, r13	; 0x05
   143ca:	c4 82       	std	Z+4, r12	; 0x04
   143cc:	83 eb       	ldi	r24, 0xB3	; 179
   143ce:	9d e1       	ldi	r25, 0x1D	; 29
   143d0:	a0 e0       	ldi	r26, 0x00	; 0
   143d2:	81 83       	std	Z+1, r24	; 0x01
   143d4:	92 83       	std	Z+2, r25	; 0x02
   143d6:	a3 83       	std	Z+3, r26	; 0x03
   143d8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   143dc:	4e e1       	ldi	r20, 0x1E	; 30
   143de:	50 e0       	ldi	r21, 0x00	; 0
   143e0:	b8 01       	movw	r22, r16
   143e2:	85 ef       	ldi	r24, 0xF5	; 245
   143e4:	90 e2       	ldi	r25, 0x20	; 32
   143e6:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   143ea:	4e e7       	ldi	r20, 0x7E	; 126
   143ec:	50 e0       	ldi	r21, 0x00	; 0
   143ee:	b8 01       	movw	r22, r16
   143f0:	c4 01       	movw	r24, r8
   143f2:	0e 94 04 31 	call	0x6208	; 0x6208 <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   143f6:	4e e3       	ldi	r20, 0x3E	; 62
   143f8:	50 e0       	ldi	r21, 0x00	; 0
   143fa:	65 e1       	ldi	r22, 0x15	; 21
   143fc:	71 e2       	ldi	r23, 0x21	; 33
   143fe:	0e 94 04 31 	call	0x6208	; 0x6208 <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   14402:	4e e1       	ldi	r20, 0x1E	; 30
   14404:	50 e0       	ldi	r21, 0x00	; 0
   14406:	65 e5       	ldi	r22, 0x55	; 85
   14408:	71 e2       	ldi	r23, 0x21	; 33
   1440a:	0e 94 04 31 	call	0x6208	; 0x6208 <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1440e:	4e e7       	ldi	r20, 0x7E	; 126
   14410:	50 e0       	ldi	r21, 0x00	; 0
   14412:	b8 01       	movw	r22, r16
   14414:	0e 94 04 31 	call	0x6208	; 0x6208 <get_token>
   14418:	6c 01       	movw	r12, r24
        hpdir.ID = get_value(token);
   1441a:	c8 01       	movw	r24, r16
   1441c:	0e 94 47 31 	call	0x628e	; 0x628e <get_value>
   14420:	60 93 75 21 	sts	0x2175, r22	; 0x802175 <hpdir+0x80>
   14424:	70 93 76 21 	sts	0x2176, r23	; 0x802176 <hpdir+0x81>
   14428:	80 93 77 21 	sts	0x2177, r24	; 0x802177 <hpdir+0x82>
   1442c:	90 93 78 21 	sts	0x2178, r25	; 0x802178 <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14430:	4e e7       	ldi	r20, 0x7E	; 126
   14432:	50 e0       	ldi	r21, 0x00	; 0
   14434:	b8 01       	movw	r22, r16
   14436:	c6 01       	movw	r24, r12
   14438:	0e 94 04 31 	call	0x6208	; 0x6208 <get_token>
   1443c:	6c 01       	movw	r12, r24
        hpdir.mask_stat2 = get_value(token);
   1443e:	c8 01       	movw	r24, r16
   14440:	0e 94 47 31 	call	0x628e	; 0x628e <get_value>
   14444:	60 93 79 21 	sts	0x2179, r22	; 0x802179 <hpdir+0x84>
   14448:	70 93 7a 21 	sts	0x217A, r23	; 0x80217a <hpdir+0x85>
   1444c:	80 93 7b 21 	sts	0x217B, r24	; 0x80217b <hpdir+0x86>
   14450:	90 93 7c 21 	sts	0x217C, r25	; 0x80217c <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14454:	4e e7       	ldi	r20, 0x7E	; 126
   14456:	50 e0       	ldi	r21, 0x00	; 0
   14458:	b8 01       	movw	r22, r16
   1445a:	c6 01       	movw	r24, r12
   1445c:	0e 94 04 31 	call	0x6208	; 0x6208 <get_token>
   14460:	6c 01       	movw	r12, r24
        hpdir.id_stat2 = get_value(token);
   14462:	c8 01       	movw	r24, r16
   14464:	0e 94 47 31 	call	0x628e	; 0x628e <get_value>
   14468:	60 93 7d 21 	sts	0x217D, r22	; 0x80217d <hpdir+0x88>
   1446c:	70 93 7e 21 	sts	0x217E, r23	; 0x80217e <hpdir+0x89>
   14470:	80 93 7f 21 	sts	0x217F, r24	; 0x80217f <hpdir+0x8a>
   14474:	90 93 80 21 	sts	0x2180, r25	; 0x802180 <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14478:	4e e7       	ldi	r20, 0x7E	; 126
   1447a:	50 e0       	ldi	r21, 0x00	; 0
   1447c:	b8 01       	movw	r22, r16
   1447e:	c6 01       	movw	r24, r12
   14480:	0e 94 04 31 	call	0x6208	; 0x6208 <get_token>
   14484:	6c 01       	movw	r12, r24
        hpdir.DEVICE_NUMBER = get_value(token);
   14486:	c8 01       	movw	r24, r16
   14488:	0e 94 47 31 	call	0x628e	; 0x628e <get_value>
   1448c:	60 93 81 21 	sts	0x2181, r22	; 0x802181 <hpdir+0x8c>
   14490:	70 93 82 21 	sts	0x2182, r23	; 0x802182 <hpdir+0x8d>
   14494:	80 93 83 21 	sts	0x2183, r24	; 0x802183 <hpdir+0x8e>
   14498:	90 93 84 21 	sts	0x2184, r25	; 0x802184 <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1449c:	4e e7       	ldi	r20, 0x7E	; 126
   1449e:	50 e0       	ldi	r21, 0x00	; 0
   144a0:	b8 01       	movw	r22, r16
   144a2:	c6 01       	movw	r24, r12
   144a4:	0e 94 04 31 	call	0x6208	; 0x6208 <get_token>
   144a8:	6c 01       	movw	r12, r24
        hpdir.UNITS_INSTALLED = get_value(token);
   144aa:	c8 01       	movw	r24, r16
   144ac:	0e 94 47 31 	call	0x628e	; 0x628e <get_value>
   144b0:	60 93 85 21 	sts	0x2185, r22	; 0x802185 <hpdir+0x90>
   144b4:	70 93 86 21 	sts	0x2186, r23	; 0x802186 <hpdir+0x91>
   144b8:	80 93 87 21 	sts	0x2187, r24	; 0x802187 <hpdir+0x92>
   144bc:	90 93 88 21 	sts	0x2188, r25	; 0x802188 <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   144c0:	4e e7       	ldi	r20, 0x7E	; 126
   144c2:	50 e0       	ldi	r21, 0x00	; 0
   144c4:	b8 01       	movw	r22, r16
   144c6:	c6 01       	movw	r24, r12
   144c8:	0e 94 04 31 	call	0x6208	; 0x6208 <get_token>
   144cc:	6c 01       	movw	r12, r24
        hpdir.CYLINDERS = get_value(token);
   144ce:	c8 01       	movw	r24, r16
   144d0:	0e 94 47 31 	call	0x628e	; 0x628e <get_value>
   144d4:	60 93 89 21 	sts	0x2189, r22	; 0x802189 <hpdir+0x94>
   144d8:	70 93 8a 21 	sts	0x218A, r23	; 0x80218a <hpdir+0x95>
   144dc:	80 93 8b 21 	sts	0x218B, r24	; 0x80218b <hpdir+0x96>
   144e0:	90 93 8c 21 	sts	0x218C, r25	; 0x80218c <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   144e4:	4e e7       	ldi	r20, 0x7E	; 126
   144e6:	50 e0       	ldi	r21, 0x00	; 0
   144e8:	b8 01       	movw	r22, r16
   144ea:	c6 01       	movw	r24, r12
   144ec:	0e 94 04 31 	call	0x6208	; 0x6208 <get_token>
   144f0:	6c 01       	movw	r12, r24
        hpdir.HEADS = get_value(token);
   144f2:	c8 01       	movw	r24, r16
   144f4:	0e 94 47 31 	call	0x628e	; 0x628e <get_value>
   144f8:	60 93 8d 21 	sts	0x218D, r22	; 0x80218d <hpdir+0x98>
   144fc:	70 93 8e 21 	sts	0x218E, r23	; 0x80218e <hpdir+0x99>
   14500:	80 93 8f 21 	sts	0x218F, r24	; 0x80218f <hpdir+0x9a>
   14504:	90 93 90 21 	sts	0x2190, r25	; 0x802190 <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14508:	4e e7       	ldi	r20, 0x7E	; 126
   1450a:	50 e0       	ldi	r21, 0x00	; 0
   1450c:	b8 01       	movw	r22, r16
   1450e:	c6 01       	movw	r24, r12
   14510:	0e 94 04 31 	call	0x6208	; 0x6208 <get_token>
   14514:	6c 01       	movw	r12, r24
        hpdir.SECTORS = get_value(token);
   14516:	c8 01       	movw	r24, r16
   14518:	0e 94 47 31 	call	0x628e	; 0x628e <get_value>
   1451c:	60 93 91 21 	sts	0x2191, r22	; 0x802191 <hpdir+0x9c>
   14520:	70 93 92 21 	sts	0x2192, r23	; 0x802192 <hpdir+0x9d>
   14524:	80 93 93 21 	sts	0x2193, r24	; 0x802193 <hpdir+0x9e>
   14528:	90 93 94 21 	sts	0x2194, r25	; 0x802194 <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1452c:	4e e7       	ldi	r20, 0x7E	; 126
   1452e:	50 e0       	ldi	r21, 0x00	; 0
   14530:	b8 01       	movw	r22, r16
   14532:	c6 01       	movw	r24, r12
   14534:	0e 94 04 31 	call	0x6208	; 0x6208 <get_token>
   14538:	6c 01       	movw	r12, r24
        hpdir.BYTES_PER_SECTOR = get_value(token);
   1453a:	c8 01       	movw	r24, r16
   1453c:	0e 94 47 31 	call	0x628e	; 0x628e <get_value>
   14540:	60 93 95 21 	sts	0x2195, r22	; 0x802195 <hpdir+0xa0>
   14544:	70 93 96 21 	sts	0x2196, r23	; 0x802196 <hpdir+0xa1>
   14548:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <hpdir+0xa2>
   1454c:	90 93 98 21 	sts	0x2198, r25	; 0x802198 <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14550:	4e e7       	ldi	r20, 0x7E	; 126
   14552:	50 e0       	ldi	r21, 0x00	; 0
   14554:	b8 01       	movw	r22, r16
   14556:	c6 01       	movw	r24, r12
   14558:	0e 94 04 31 	call	0x6208	; 0x6208 <get_token>
        hpdir.INTERLEAVE = get_value(token);
   1455c:	c8 01       	movw	r24, r16
   1455e:	0e 94 47 31 	call	0x628e	; 0x628e <get_value>
   14562:	60 93 99 21 	sts	0x2199, r22	; 0x802199 <hpdir+0xa4>
   14566:	70 93 9a 21 	sts	0x219A, r23	; 0x80219a <hpdir+0xa5>
   1456a:	80 93 9b 21 	sts	0x219B, r24	; 0x80219b <hpdir+0xa6>
   1456e:	90 93 9c 21 	sts	0x219C, r25	; 0x80219c <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   14572:	20 91 89 21 	lds	r18, 0x2189	; 0x802189 <hpdir+0x94>
   14576:	30 91 8a 21 	lds	r19, 0x218A	; 0x80218a <hpdir+0x95>
   1457a:	40 91 8b 21 	lds	r20, 0x218B	; 0x80218b <hpdir+0x96>
   1457e:	50 91 8c 21 	lds	r21, 0x218C	; 0x80218c <hpdir+0x97>
   14582:	60 91 8d 21 	lds	r22, 0x218D	; 0x80218d <hpdir+0x98>
   14586:	70 91 8e 21 	lds	r23, 0x218E	; 0x80218e <hpdir+0x99>
   1458a:	80 91 8f 21 	lds	r24, 0x218F	; 0x80218f <hpdir+0x9a>
   1458e:	90 91 90 21 	lds	r25, 0x2190	; 0x802190 <hpdir+0x9b>
   14592:	0e 94 8f e2 	call	0x1c51e	; 0x1c51e <__mulsi3>
   14596:	9b 01       	movw	r18, r22
   14598:	ac 01       	movw	r20, r24
   1459a:	60 91 91 21 	lds	r22, 0x2191	; 0x802191 <hpdir+0x9c>
   1459e:	70 91 92 21 	lds	r23, 0x2192	; 0x802192 <hpdir+0x9d>
   145a2:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <hpdir+0x9e>
   145a6:	90 91 94 21 	lds	r25, 0x2194	; 0x802194 <hpdir+0x9f>
   145aa:	0e 94 8f e2 	call	0x1c51e	; 0x1c51e <__mulsi3>
   145ae:	60 93 a1 21 	sts	0x21A1, r22	; 0x8021a1 <hpdir+0xac>
   145b2:	70 93 a2 21 	sts	0x21A2, r23	; 0x8021a2 <hpdir+0xad>
   145b6:	80 93 a3 21 	sts	0x21A3, r24	; 0x8021a3 <hpdir+0xae>
   145ba:	90 93 a4 21 	sts	0x21A4, r25	; 0x8021a4 <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   145be:	01 e0       	ldi	r16, 0x01	; 1
   145c0:	10 e0       	ldi	r17, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
   145c2:	c7 01       	movw	r24, r14
   145c4:	0e 94 d5 7b 	call	0xf7aa	; 0xf7aa <fclose>
    return(found);
   145c8:	c8 01       	movw	r24, r16
   145ca:	02 c0       	rjmp	.+4      	; 0x145d0 <hpdir_find_drive+0x35a>

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   145cc:	80 e0       	ldi	r24, 0x00	; 0
   145ce:	90 e0       	ldi	r25, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
    return(found);
}
   145d0:	c7 57       	subi	r28, 0x77	; 119
   145d2:	de 4f       	sbci	r29, 0xFE	; 254
   145d4:	0f b6       	in	r0, 0x3f	; 63
   145d6:	f8 94       	cli
   145d8:	de bf       	out	0x3e, r29	; 62
   145da:	0f be       	out	0x3f, r0	; 63
   145dc:	cd bf       	out	0x3d, r28	; 61
   145de:	df 91       	pop	r29
   145e0:	cf 91       	pop	r28
   145e2:	1f 91       	pop	r17
   145e4:	0f 91       	pop	r16
   145e6:	ff 90       	pop	r15
   145e8:	ef 90       	pop	r14
   145ea:	df 90       	pop	r13
   145ec:	cf 90       	pop	r12
   145ee:	bf 90       	pop	r11
   145f0:	af 90       	pop	r10
   145f2:	9f 90       	pop	r9
   145f4:	8f 90       	pop	r8
   145f6:	6f 90       	pop	r6
   145f8:	5f 90       	pop	r5
   145fa:	4f 90       	pop	r4
   145fc:	3f 90       	pop	r3
   145fe:	2f 90       	pop	r2
   14600:	08 95       	ret

00014602 <SS80ControllerPack>:
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
        printf("[SS80 Increment to (%lXH)]\n",
            (long) SS80_Blocks_to_Bytes(SS80s->AddressBlocks));
#endif
    return(0);
}
   14602:	0f 93       	push	r16
   14604:	1f 93       	push	r17
   14606:	25 e0       	ldi	r18, 0x05	; 5
   14608:	30 e0       	ldi	r19, 0x00	; 0
   1460a:	fc 01       	movw	r30, r24
   1460c:	31 83       	std	Z+1, r19	; 0x01
   1460e:	20 83       	st	Z, r18
   14610:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   14614:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   14618:	06 81       	ldd	r16, Z+6	; 0x06
   1461a:	17 81       	ldd	r17, Z+7	; 0x07
   1461c:	20 e0       	ldi	r18, 0x00	; 0
   1461e:	30 e0       	ldi	r19, 0x00	; 0
   14620:	42 e0       	ldi	r20, 0x02	; 2
   14622:	50 e0       	ldi	r21, 0x00	; 0
   14624:	60 e0       	ldi	r22, 0x00	; 0
   14626:	70 e0       	ldi	r23, 0x00	; 0
   14628:	85 e9       	ldi	r24, 0x95	; 149
   1462a:	99 e1       	ldi	r25, 0x19	; 25
   1462c:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   14630:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   14634:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   14638:	00 85       	ldd	r16, Z+8	; 0x08
   1463a:	11 85       	ldd	r17, Z+9	; 0x09
   1463c:	20 e0       	ldi	r18, 0x00	; 0
   1463e:	30 e0       	ldi	r19, 0x00	; 0
   14640:	42 e0       	ldi	r20, 0x02	; 2
   14642:	50 e0       	ldi	r21, 0x00	; 0
   14644:	61 e0       	ldi	r22, 0x01	; 1
   14646:	70 e0       	ldi	r23, 0x00	; 0
   14648:	85 e9       	ldi	r24, 0x95	; 149
   1464a:	99 e1       	ldi	r25, 0x19	; 25
   1464c:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   14650:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   14654:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   14658:	02 85       	ldd	r16, Z+10	; 0x0a
   1465a:	10 e0       	ldi	r17, 0x00	; 0
   1465c:	20 e0       	ldi	r18, 0x00	; 0
   1465e:	30 e0       	ldi	r19, 0x00	; 0
   14660:	41 e0       	ldi	r20, 0x01	; 1
   14662:	50 e0       	ldi	r21, 0x00	; 0
   14664:	64 e0       	ldi	r22, 0x04	; 4
   14666:	70 e0       	ldi	r23, 0x00	; 0
   14668:	85 e9       	ldi	r24, 0x95	; 149
   1466a:	99 e1       	ldi	r25, 0x19	; 25
   1466c:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   14670:	85 e9       	ldi	r24, 0x95	; 149
   14672:	99 e1       	ldi	r25, 0x19	; 25
   14674:	1f 91       	pop	r17
   14676:	0f 91       	pop	r16
   14678:	08 95       	ret

0001467a <SS80UnitPack>:
   1467a:	0f 93       	push	r16
   1467c:	1f 93       	push	r17
   1467e:	23 e1       	ldi	r18, 0x13	; 19
   14680:	30 e0       	ldi	r19, 0x00	; 0
   14682:	fc 01       	movw	r30, r24
   14684:	31 83       	std	Z+1, r19	; 0x01
   14686:	20 83       	st	Z, r18
   14688:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   1468c:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   14690:	03 85       	ldd	r16, Z+11	; 0x0b
   14692:	10 e0       	ldi	r17, 0x00	; 0
   14694:	20 e0       	ldi	r18, 0x00	; 0
   14696:	30 e0       	ldi	r19, 0x00	; 0
   14698:	41 e0       	ldi	r20, 0x01	; 1
   1469a:	50 e0       	ldi	r21, 0x00	; 0
   1469c:	60 e0       	ldi	r22, 0x00	; 0
   1469e:	70 e0       	ldi	r23, 0x00	; 0
   146a0:	82 e8       	ldi	r24, 0x82	; 130
   146a2:	99 e1       	ldi	r25, 0x19	; 25
   146a4:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   146a8:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   146ac:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   146b0:	04 85       	ldd	r16, Z+12	; 0x0c
   146b2:	15 85       	ldd	r17, Z+13	; 0x0d
   146b4:	26 85       	ldd	r18, Z+14	; 0x0e
   146b6:	37 85       	ldd	r19, Z+15	; 0x0f
   146b8:	43 e0       	ldi	r20, 0x03	; 3
   146ba:	50 e0       	ldi	r21, 0x00	; 0
   146bc:	61 e0       	ldi	r22, 0x01	; 1
   146be:	70 e0       	ldi	r23, 0x00	; 0
   146c0:	82 e8       	ldi	r24, 0x82	; 130
   146c2:	99 e1       	ldi	r25, 0x19	; 25
   146c4:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   146c8:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   146cc:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   146d0:	00 89       	ldd	r16, Z+16	; 0x10
   146d2:	11 89       	ldd	r17, Z+17	; 0x11
   146d4:	20 e0       	ldi	r18, 0x00	; 0
   146d6:	30 e0       	ldi	r19, 0x00	; 0
   146d8:	42 e0       	ldi	r20, 0x02	; 2
   146da:	50 e0       	ldi	r21, 0x00	; 0
   146dc:	64 e0       	ldi	r22, 0x04	; 4
   146de:	70 e0       	ldi	r23, 0x00	; 0
   146e0:	82 e8       	ldi	r24, 0x82	; 130
   146e2:	99 e1       	ldi	r25, 0x19	; 25
   146e4:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   146e8:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   146ec:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   146f0:	02 89       	ldd	r16, Z+18	; 0x12
   146f2:	10 e0       	ldi	r17, 0x00	; 0
   146f4:	20 e0       	ldi	r18, 0x00	; 0
   146f6:	30 e0       	ldi	r19, 0x00	; 0
   146f8:	41 e0       	ldi	r20, 0x01	; 1
   146fa:	50 e0       	ldi	r21, 0x00	; 0
   146fc:	66 e0       	ldi	r22, 0x06	; 6
   146fe:	70 e0       	ldi	r23, 0x00	; 0
   14700:	82 e8       	ldi	r24, 0x82	; 130
   14702:	99 e1       	ldi	r25, 0x19	; 25
   14704:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   14708:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   1470c:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   14710:	03 89       	ldd	r16, Z+19	; 0x13
   14712:	10 e0       	ldi	r17, 0x00	; 0
   14714:	20 e0       	ldi	r18, 0x00	; 0
   14716:	30 e0       	ldi	r19, 0x00	; 0
   14718:	41 e0       	ldi	r20, 0x01	; 1
   1471a:	50 e0       	ldi	r21, 0x00	; 0
   1471c:	67 e0       	ldi	r22, 0x07	; 7
   1471e:	70 e0       	ldi	r23, 0x00	; 0
   14720:	82 e8       	ldi	r24, 0x82	; 130
   14722:	99 e1       	ldi	r25, 0x19	; 25
   14724:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   14728:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   1472c:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   14730:	04 89       	ldd	r16, Z+20	; 0x14
   14732:	15 89       	ldd	r17, Z+21	; 0x15
   14734:	20 e0       	ldi	r18, 0x00	; 0
   14736:	30 e0       	ldi	r19, 0x00	; 0
   14738:	42 e0       	ldi	r20, 0x02	; 2
   1473a:	50 e0       	ldi	r21, 0x00	; 0
   1473c:	68 e0       	ldi	r22, 0x08	; 8
   1473e:	70 e0       	ldi	r23, 0x00	; 0
   14740:	82 e8       	ldi	r24, 0x82	; 130
   14742:	99 e1       	ldi	r25, 0x19	; 25
   14744:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   14748:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   1474c:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   14750:	06 89       	ldd	r16, Z+22	; 0x16
   14752:	17 89       	ldd	r17, Z+23	; 0x17
   14754:	20 e0       	ldi	r18, 0x00	; 0
   14756:	30 e0       	ldi	r19, 0x00	; 0
   14758:	42 e0       	ldi	r20, 0x02	; 2
   1475a:	50 e0       	ldi	r21, 0x00	; 0
   1475c:	6a e0       	ldi	r22, 0x0A	; 10
   1475e:	70 e0       	ldi	r23, 0x00	; 0
   14760:	82 e8       	ldi	r24, 0x82	; 130
   14762:	99 e1       	ldi	r25, 0x19	; 25
   14764:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   14768:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   1476c:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   14770:	00 8d       	ldd	r16, Z+24	; 0x18
   14772:	11 8d       	ldd	r17, Z+25	; 0x19
   14774:	20 e0       	ldi	r18, 0x00	; 0
   14776:	30 e0       	ldi	r19, 0x00	; 0
   14778:	42 e0       	ldi	r20, 0x02	; 2
   1477a:	50 e0       	ldi	r21, 0x00	; 0
   1477c:	6c e0       	ldi	r22, 0x0C	; 12
   1477e:	70 e0       	ldi	r23, 0x00	; 0
   14780:	82 e8       	ldi	r24, 0x82	; 130
   14782:	99 e1       	ldi	r25, 0x19	; 25
   14784:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   14788:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   1478c:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   14790:	02 8d       	ldd	r16, Z+26	; 0x1a
   14792:	13 8d       	ldd	r17, Z+27	; 0x1b
   14794:	20 e0       	ldi	r18, 0x00	; 0
   14796:	30 e0       	ldi	r19, 0x00	; 0
   14798:	42 e0       	ldi	r20, 0x02	; 2
   1479a:	50 e0       	ldi	r21, 0x00	; 0
   1479c:	6e e0       	ldi	r22, 0x0E	; 14
   1479e:	70 e0       	ldi	r23, 0x00	; 0
   147a0:	82 e8       	ldi	r24, 0x82	; 130
   147a2:	99 e1       	ldi	r25, 0x19	; 25
   147a4:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   147a8:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   147ac:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   147b0:	04 8d       	ldd	r16, Z+28	; 0x1c
   147b2:	10 e0       	ldi	r17, 0x00	; 0
   147b4:	20 e0       	ldi	r18, 0x00	; 0
   147b6:	30 e0       	ldi	r19, 0x00	; 0
   147b8:	41 e0       	ldi	r20, 0x01	; 1
   147ba:	50 e0       	ldi	r21, 0x00	; 0
   147bc:	60 e1       	ldi	r22, 0x10	; 16
   147be:	70 e0       	ldi	r23, 0x00	; 0
   147c0:	82 e8       	ldi	r24, 0x82	; 130
   147c2:	99 e1       	ldi	r25, 0x19	; 25
   147c4:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   147c8:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   147cc:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   147d0:	05 8d       	ldd	r16, Z+29	; 0x1d
   147d2:	10 e0       	ldi	r17, 0x00	; 0
   147d4:	20 e0       	ldi	r18, 0x00	; 0
   147d6:	30 e0       	ldi	r19, 0x00	; 0
   147d8:	41 e0       	ldi	r20, 0x01	; 1
   147da:	50 e0       	ldi	r21, 0x00	; 0
   147dc:	61 e1       	ldi	r22, 0x11	; 17
   147de:	70 e0       	ldi	r23, 0x00	; 0
   147e0:	82 e8       	ldi	r24, 0x82	; 130
   147e2:	99 e1       	ldi	r25, 0x19	; 25
   147e4:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   147e8:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   147ec:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   147f0:	06 8d       	ldd	r16, Z+30	; 0x1e
   147f2:	10 e0       	ldi	r17, 0x00	; 0
   147f4:	20 e0       	ldi	r18, 0x00	; 0
   147f6:	30 e0       	ldi	r19, 0x00	; 0
   147f8:	41 e0       	ldi	r20, 0x01	; 1
   147fa:	50 e0       	ldi	r21, 0x00	; 0
   147fc:	62 e1       	ldi	r22, 0x12	; 18
   147fe:	70 e0       	ldi	r23, 0x00	; 0
   14800:	82 e8       	ldi	r24, 0x82	; 130
   14802:	99 e1       	ldi	r25, 0x19	; 25
   14804:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   14808:	82 e8       	ldi	r24, 0x82	; 130
   1480a:	99 e1       	ldi	r25, 0x19	; 25
   1480c:	1f 91       	pop	r17
   1480e:	0f 91       	pop	r16
   14810:	08 95       	ret

00014812 <SS80VolumePack>:
   14812:	0f 93       	push	r16
   14814:	1f 93       	push	r17
   14816:	2d e0       	ldi	r18, 0x0D	; 13
   14818:	30 e0       	ldi	r19, 0x00	; 0
   1481a:	fc 01       	movw	r30, r24
   1481c:	31 83       	std	Z+1, r19	; 0x01
   1481e:	20 83       	st	Z, r18
   14820:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   14824:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   14828:	07 8d       	ldd	r16, Z+31	; 0x1f
   1482a:	10 a1       	ldd	r17, Z+32	; 0x20
   1482c:	21 a1       	ldd	r18, Z+33	; 0x21
   1482e:	32 a1       	ldd	r19, Z+34	; 0x22
   14830:	43 e0       	ldi	r20, 0x03	; 3
   14832:	50 e0       	ldi	r21, 0x00	; 0
   14834:	60 e0       	ldi	r22, 0x00	; 0
   14836:	70 e0       	ldi	r23, 0x00	; 0
   14838:	85 e7       	ldi	r24, 0x75	; 117
   1483a:	99 e1       	ldi	r25, 0x19	; 25
   1483c:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   14840:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   14844:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   14848:	03 a1       	ldd	r16, Z+35	; 0x23
   1484a:	10 e0       	ldi	r17, 0x00	; 0
   1484c:	20 e0       	ldi	r18, 0x00	; 0
   1484e:	30 e0       	ldi	r19, 0x00	; 0
   14850:	41 e0       	ldi	r20, 0x01	; 1
   14852:	50 e0       	ldi	r21, 0x00	; 0
   14854:	63 e0       	ldi	r22, 0x03	; 3
   14856:	70 e0       	ldi	r23, 0x00	; 0
   14858:	85 e7       	ldi	r24, 0x75	; 117
   1485a:	99 e1       	ldi	r25, 0x19	; 25
   1485c:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   14860:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   14864:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   14868:	04 a1       	ldd	r16, Z+36	; 0x24
   1486a:	15 a1       	ldd	r17, Z+37	; 0x25
   1486c:	20 e0       	ldi	r18, 0x00	; 0
   1486e:	30 e0       	ldi	r19, 0x00	; 0
   14870:	42 e0       	ldi	r20, 0x02	; 2
   14872:	50 e0       	ldi	r21, 0x00	; 0
   14874:	64 e0       	ldi	r22, 0x04	; 4
   14876:	70 e0       	ldi	r23, 0x00	; 0
   14878:	85 e7       	ldi	r24, 0x75	; 117
   1487a:	99 e1       	ldi	r25, 0x19	; 25
   1487c:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   14880:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   14884:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   14888:	06 a1       	ldd	r16, Z+38	; 0x26
   1488a:	17 a1       	ldd	r17, Z+39	; 0x27
   1488c:	20 a5       	ldd	r18, Z+40	; 0x28
   1488e:	31 a5       	ldd	r19, Z+41	; 0x29
   14890:	46 e0       	ldi	r20, 0x06	; 6
   14892:	50 e0       	ldi	r21, 0x00	; 0
   14894:	66 e0       	ldi	r22, 0x06	; 6
   14896:	70 e0       	ldi	r23, 0x00	; 0
   14898:	85 e7       	ldi	r24, 0x75	; 117
   1489a:	99 e1       	ldi	r25, 0x19	; 25
   1489c:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   148a0:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   148a4:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   148a8:	02 a5       	ldd	r16, Z+42	; 0x2a
   148aa:	10 e0       	ldi	r17, 0x00	; 0
   148ac:	20 e0       	ldi	r18, 0x00	; 0
   148ae:	30 e0       	ldi	r19, 0x00	; 0
   148b0:	41 e0       	ldi	r20, 0x01	; 1
   148b2:	50 e0       	ldi	r21, 0x00	; 0
   148b4:	6c e0       	ldi	r22, 0x0C	; 12
   148b6:	70 e0       	ldi	r23, 0x00	; 0
   148b8:	85 e7       	ldi	r24, 0x75	; 117
   148ba:	99 e1       	ldi	r25, 0x19	; 25
   148bc:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   148c0:	85 e7       	ldi	r24, 0x75	; 117
   148c2:	99 e1       	ldi	r25, 0x19	; 25
   148c4:	1f 91       	pop	r17
   148c6:	0f 91       	pop	r16
   148c8:	08 95       	ret

000148ca <SS80_test_extended_status>:
   148ca:	9b 01       	movw	r18, r22
   148cc:	43 e0       	ldi	r20, 0x03	; 3
   148ce:	35 95       	asr	r19
   148d0:	27 95       	ror	r18
   148d2:	4a 95       	dec	r20
   148d4:	e1 f7       	brne	.-8      	; 0x148ce <SS80_test_extended_status+0x4>
   148d6:	82 0f       	add	r24, r18
   148d8:	93 1f       	adc	r25, r19
   148da:	67 70       	andi	r22, 0x07	; 7
   148dc:	77 27       	eor	r23, r23
   148de:	20 e8       	ldi	r18, 0x80	; 128
   148e0:	30 e0       	ldi	r19, 0x00	; 0
   148e2:	02 c0       	rjmp	.+4      	; 0x148e8 <SS80_test_extended_status+0x1e>
   148e4:	35 95       	asr	r19
   148e6:	27 95       	ror	r18
   148e8:	6a 95       	dec	r22
   148ea:	e2 f7       	brpl	.-8      	; 0x148e4 <SS80_test_extended_status+0x1a>
   148ec:	fc 01       	movw	r30, r24
   148ee:	80 81       	ld	r24, Z
   148f0:	28 23       	and	r18, r24
   148f2:	81 e0       	ldi	r24, 0x01	; 1
   148f4:	90 e0       	ldi	r25, 0x00	; 0
   148f6:	11 f4       	brne	.+4      	; 0x148fc <SS80_test_extended_status+0x32>
   148f8:	80 e0       	ldi	r24, 0x00	; 0
   148fa:	90 e0       	ldi	r25, 0x00	; 0
   148fc:	08 95       	ret

000148fe <SS80_display_extended_status>:
   148fe:	6f 92       	push	r6
   14900:	7f 92       	push	r7
   14902:	8f 92       	push	r8
   14904:	ef 92       	push	r14
   14906:	ff 92       	push	r15
   14908:	0f 93       	push	r16
   1490a:	1f 93       	push	r17
   1490c:	cf 93       	push	r28
   1490e:	df 93       	push	r29
   14910:	ad b7       	in	r26, 0x3d	; 61
   14912:	be b7       	in	r27, 0x3e	; 62
   14914:	17 97       	sbiw	r26, 0x07	; 7
   14916:	0f b6       	in	r0, 0x3f	; 63
   14918:	f8 94       	cli
   1491a:	be bf       	out	0x3e, r27	; 62
   1491c:	0f be       	out	0x3f, r0	; 63
   1491e:	ad bf       	out	0x3d, r26	; 61
   14920:	fc 01       	movw	r30, r24
   14922:	ac 01       	movw	r20, r24
   14924:	48 5f       	subi	r20, 0xF8	; 248
   14926:	5f 4f       	sbci	r21, 0xFF	; 255
   14928:	20 e0       	ldi	r18, 0x00	; 0
   1492a:	30 e0       	ldi	r19, 0x00	; 0
   1492c:	a1 91       	ld	r26, Z+
   1492e:	aa 23       	and	r26, r26
   14930:	11 f0       	breq	.+4      	; 0x14936 <SS80_display_extended_status+0x38>
   14932:	21 e0       	ldi	r18, 0x01	; 1
   14934:	30 e0       	ldi	r19, 0x00	; 0
   14936:	e4 17       	cp	r30, r20
   14938:	f5 07       	cpc	r31, r21
   1493a:	c1 f7       	brne	.-16     	; 0x1492c <SS80_display_extended_status+0x2e>
   1493c:	23 2b       	or	r18, r19
   1493e:	81 f1       	breq	.+96     	; 0x149a0 <SS80_display_extended_status+0xa2>
   14940:	ec 01       	movw	r28, r24
   14942:	ed b7       	in	r30, 0x3d	; 61
   14944:	fe b7       	in	r31, 0x3e	; 62
   14946:	75 83       	std	Z+5, r23	; 0x05
   14948:	64 83       	std	Z+4, r22	; 0x04
   1494a:	84 e2       	ldi	r24, 0x24	; 36
   1494c:	94 e2       	ldi	r25, 0x24	; 36
   1494e:	a0 e0       	ldi	r26, 0x00	; 0
   14950:	81 83       	std	Z+1, r24	; 0x01
   14952:	92 83       	std	Z+2, r25	; 0x02
   14954:	a3 83       	std	Z+3, r26	; 0x03
   14956:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1495a:	0c e7       	ldi	r16, 0x7C	; 124
   1495c:	12 e0       	ldi	r17, 0x02	; 2
   1495e:	89 e1       	ldi	r24, 0x19	; 25
   14960:	94 e2       	ldi	r25, 0x24	; 36
   14962:	3c 01       	movw	r6, r24
   14964:	81 2c       	mov	r8, r1
   14966:	f8 01       	movw	r30, r16
   14968:	e0 80       	ld	r14, Z
   1496a:	f1 80       	ldd	r15, Z+1	; 0x01
   1496c:	ff ef       	ldi	r31, 0xFF	; 255
   1496e:	ef 16       	cp	r14, r31
   14970:	ff 06       	cpc	r15, r31
   14972:	b1 f0       	breq	.+44     	; 0x149a0 <SS80_display_extended_status+0xa2>
   14974:	b7 01       	movw	r22, r14
   14976:	ce 01       	movw	r24, r28
   14978:	a8 df       	rcall	.-176    	; 0x148ca <SS80_test_extended_status>
   1497a:	89 2b       	or	r24, r25
   1497c:	71 f0       	breq	.+28     	; 0x1499a <SS80_display_extended_status+0x9c>
   1497e:	f8 01       	movw	r30, r16
   14980:	82 81       	ldd	r24, Z+2	; 0x02
   14982:	93 81       	ldd	r25, Z+3	; 0x03
   14984:	ed b7       	in	r30, 0x3d	; 61
   14986:	fe b7       	in	r31, 0x3e	; 62
   14988:	97 83       	std	Z+7, r25	; 0x07
   1498a:	86 83       	std	Z+6, r24	; 0x06
   1498c:	f5 82       	std	Z+5, r15	; 0x05
   1498e:	e4 82       	std	Z+4, r14	; 0x04
   14990:	61 82       	std	Z+1, r6	; 0x01
   14992:	72 82       	std	Z+2, r7	; 0x02
   14994:	83 82       	std	Z+3, r8	; 0x03
   14996:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1499a:	0c 5f       	subi	r16, 0xFC	; 252
   1499c:	1f 4f       	sbci	r17, 0xFF	; 255
   1499e:	e3 cf       	rjmp	.-58     	; 0x14966 <SS80_display_extended_status+0x68>
   149a0:	ad b7       	in	r26, 0x3d	; 61
   149a2:	be b7       	in	r27, 0x3e	; 62
   149a4:	17 96       	adiw	r26, 0x07	; 7
   149a6:	0f b6       	in	r0, 0x3f	; 63
   149a8:	f8 94       	cli
   149aa:	be bf       	out	0x3e, r27	; 62
   149ac:	0f be       	out	0x3f, r0	; 63
   149ae:	ad bf       	out	0x3d, r26	; 61
   149b0:	df 91       	pop	r29
   149b2:	cf 91       	pop	r28
   149b4:	1f 91       	pop	r17
   149b6:	0f 91       	pop	r16
   149b8:	ff 90       	pop	r15
   149ba:	ef 90       	pop	r14
   149bc:	8f 90       	pop	r8
   149be:	7f 90       	pop	r7
   149c0:	6f 90       	pop	r6
   149c2:	08 95       	ret

000149c4 <SS80_send_status>:
   149c4:	a9 e1       	ldi	r26, 0x19	; 25
   149c6:	b0 e0       	ldi	r27, 0x00	; 0
   149c8:	e8 ee       	ldi	r30, 0xE8	; 232
   149ca:	f4 ea       	ldi	r31, 0xA4	; 164
   149cc:	0c 94 4a e3 	jmp	0x1c694	; 0x1c694 <__prologue_saves__+0x18>
   149d0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   149d4:	85 ff       	sbrs	r24, 5
   149d6:	0a c0       	rjmp	.+20     	; 0x149ec <SS80_send_status+0x28>
   149d8:	85 e0       	ldi	r24, 0x05	; 5
   149da:	94 e2       	ldi	r25, 0x24	; 36
   149dc:	a0 e0       	ldi	r26, 0x00	; 0
   149de:	ed b7       	in	r30, 0x3d	; 61
   149e0:	fe b7       	in	r31, 0x3e	; 62
   149e2:	81 83       	std	Z+1, r24	; 0x01
   149e4:	92 83       	std	Z+2, r25	; 0x02
   149e6:	a3 83       	std	Z+3, r26	; 0x03
   149e8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   149ec:	ce 01       	movw	r24, r28
   149ee:	04 96       	adiw	r24, 0x04	; 4
   149f0:	7c 01       	movw	r14, r24
   149f2:	84 e1       	ldi	r24, 0x14	; 20
   149f4:	f7 01       	movw	r30, r14
   149f6:	11 92       	st	Z+, r1
   149f8:	8a 95       	dec	r24
   149fa:	e9 f7       	brne	.-6      	; 0x149f6 <SS80_send_status+0x32>
   149fc:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   14a00:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   14a04:	86 81       	ldd	r24, Z+6	; 0x06
   14a06:	20 e1       	ldi	r18, 0x10	; 16
   14a08:	82 9f       	mul	r24, r18
   14a0a:	c0 01       	movw	r24, r0
   14a0c:	11 24       	eor	r1, r1
   14a0e:	95 81       	ldd	r25, Z+5	; 0x05
   14a10:	9f 70       	andi	r25, 0x0F	; 15
   14a12:	89 2b       	or	r24, r25
   14a14:	8c 83       	std	Y+4, r24	; 0x04
   14a16:	8f ef       	ldi	r24, 0xFF	; 255
   14a18:	8d 83       	std	Y+5, r24	; 0x05
   14a1a:	83 81       	ldd	r24, Z+3	; 0x03
   14a1c:	86 ff       	sbrs	r24, 6
   14a1e:	02 c0       	rjmp	.+4      	; 0x14a24 <SS80_send_status+0x60>
   14a20:	92 e0       	ldi	r25, 0x02	; 2
   14a22:	9e 83       	std	Y+6, r25	; 0x06
   14a24:	82 ff       	sbrs	r24, 2
   14a26:	03 c0       	rjmp	.+6      	; 0x14a2e <SS80_send_status+0x6a>
   14a28:	9e 81       	ldd	r25, Y+6	; 0x06
   14a2a:	91 60       	ori	r25, 0x01	; 1
   14a2c:	9e 83       	std	Y+6, r25	; 0x06
   14a2e:	80 ff       	sbrs	r24, 0
   14a30:	02 c0       	rjmp	.+4      	; 0x14a36 <SS80_send_status+0x72>
   14a32:	82 e0       	ldi	r24, 0x02	; 2
   14a34:	88 87       	std	Y+8, r24	; 0x08
   14a36:	83 81       	ldd	r24, Z+3	; 0x03
   14a38:	81 ff       	sbrs	r24, 1
   14a3a:	03 c0       	rjmp	.+6      	; 0x14a42 <SS80_send_status+0x7e>
   14a3c:	88 85       	ldd	r24, Y+8	; 0x08
   14a3e:	82 60       	ori	r24, 0x02	; 2
   14a40:	88 87       	std	Y+8, r24	; 0x08
   14a42:	83 81       	ldd	r24, Z+3	; 0x03
   14a44:	83 ff       	sbrs	r24, 3
   14a46:	02 c0       	rjmp	.+4      	; 0x14a4c <SS80_send_status+0x88>
   14a48:	88 e0       	ldi	r24, 0x08	; 8
   14a4a:	8a 87       	std	Y+10, r24	; 0x0a
   14a4c:	83 81       	ldd	r24, Z+3	; 0x03
   14a4e:	94 81       	ldd	r25, Z+4	; 0x04
   14a50:	89 2b       	or	r24, r25
   14a52:	59 f4       	brne	.+22     	; 0x14a6a <SS80_send_status+0xa6>
   14a54:	07 81       	ldd	r16, Z+7	; 0x07
   14a56:	10 85       	ldd	r17, Z+8	; 0x08
   14a58:	21 85       	ldd	r18, Z+9	; 0x09
   14a5a:	32 85       	ldd	r19, Z+10	; 0x0a
   14a5c:	46 e0       	ldi	r20, 0x06	; 6
   14a5e:	50 e0       	ldi	r21, 0x00	; 0
   14a60:	6a e0       	ldi	r22, 0x0A	; 10
   14a62:	70 e0       	ldi	r23, 0x00	; 0
   14a64:	c7 01       	movw	r24, r14
   14a66:	0e 94 7c bd 	call	0x17af8	; 0x17af8 <V2B_MSB>
   14a6a:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   14a6e:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   14a72:	83 81       	ldd	r24, Z+3	; 0x03
   14a74:	94 81       	ldd	r25, Z+4	; 0x04
   14a76:	89 2b       	or	r24, r25
   14a78:	11 f0       	breq	.+4      	; 0x14a7e <SS80_send_status+0xba>
   14a7a:	81 e0       	ldi	r24, 0x01	; 1
   14a7c:	82 83       	std	Z+2, r24	; 0x02
   14a7e:	80 e0       	ldi	r24, 0x00	; 0
   14a80:	91 e0       	ldi	r25, 0x01	; 1
   14a82:	99 8f       	std	Y+25, r25	; 0x19
   14a84:	88 8f       	std	Y+24, r24	; 0x18
   14a86:	ae 01       	movw	r20, r28
   14a88:	48 5e       	subi	r20, 0xE8	; 232
   14a8a:	5f 4f       	sbci	r21, 0xFF	; 255
   14a8c:	64 e1       	ldi	r22, 0x14	; 20
   14a8e:	70 e0       	ldi	r23, 0x00	; 0
   14a90:	c7 01       	movw	r24, r14
   14a92:	0e 94 78 8a 	call	0x114f0	; 0x114f0 <gpib_write_str>
   14a96:	44 97       	sbiw	r24, 0x14	; 20
   14a98:	71 f0       	breq	.+28     	; 0x14ab6 <SS80_send_status+0xf2>
   14a9a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14a9e:	80 ff       	sbrs	r24, 0
   14aa0:	0a c0       	rjmp	.+20     	; 0x14ab6 <SS80_send_status+0xf2>
   14aa2:	8a ee       	ldi	r24, 0xEA	; 234
   14aa4:	93 e2       	ldi	r25, 0x23	; 35
   14aa6:	a0 e0       	ldi	r26, 0x00	; 0
   14aa8:	ed b7       	in	r30, 0x3d	; 61
   14aaa:	fe b7       	in	r31, 0x3e	; 62
   14aac:	81 83       	std	Z+1, r24	; 0x01
   14aae:	92 83       	std	Z+2, r25	; 0x02
   14ab0:	a3 83       	std	Z+3, r26	; 0x03
   14ab2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   14ab6:	88 8d       	ldd	r24, Y+24	; 0x18
   14ab8:	99 8d       	ldd	r25, Y+25	; 0x19
   14aba:	88 27       	eor	r24, r24
   14abc:	90 7d       	andi	r25, 0xD0	; 208
   14abe:	69 96       	adiw	r28, 0x19	; 25
   14ac0:	e6 e0       	ldi	r30, 0x06	; 6
   14ac2:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

00014ac6 <SS80_describe>:
   14ac6:	a7 e0       	ldi	r26, 0x07	; 7
   14ac8:	b0 e0       	ldi	r27, 0x00	; 0
   14aca:	e9 e6       	ldi	r30, 0x69	; 105
   14acc:	f5 ea       	ldi	r31, 0xA5	; 165
   14ace:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
   14ad2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14ad6:	85 ff       	sbrs	r24, 5
   14ad8:	0a c0       	rjmp	.+20     	; 0x14aee <SS80_describe+0x28>
   14ada:	89 ed       	ldi	r24, 0xD9	; 217
   14adc:	93 e2       	ldi	r25, 0x23	; 35
   14ade:	a0 e0       	ldi	r26, 0x00	; 0
   14ae0:	ed b7       	in	r30, 0x3d	; 61
   14ae2:	fe b7       	in	r31, 0x3e	; 62
   14ae4:	81 83       	std	Z+1, r24	; 0x01
   14ae6:	92 83       	std	Z+2, r25	; 0x02
   14ae8:	a3 83       	std	Z+3, r26	; 0x03
   14aea:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   14aee:	1f 82       	std	Y+7, r1	; 0x07
   14af0:	1e 82       	std	Y+6, r1	; 0x06
   14af2:	ce 01       	movw	r24, r28
   14af4:	04 96       	adiw	r24, 0x04	; 4
   14af6:	85 dd       	rcall	.-1270   	; 0x14602 <SS80ControllerPack>
   14af8:	6c 81       	ldd	r22, Y+4	; 0x04
   14afa:	7d 81       	ldd	r23, Y+5	; 0x05
   14afc:	ae 01       	movw	r20, r28
   14afe:	4a 5f       	subi	r20, 0xFA	; 250
   14b00:	5f 4f       	sbci	r21, 0xFF	; 255
   14b02:	0e 94 78 8a 	call	0x114f0	; 0x114f0 <gpib_write_str>
   14b06:	2c 81       	ldd	r18, Y+4	; 0x04
   14b08:	3d 81       	ldd	r19, Y+5	; 0x05
   14b0a:	82 17       	cp	r24, r18
   14b0c:	93 07       	cpc	r25, r19
   14b0e:	39 f0       	breq	.+14     	; 0x14b1e <SS80_describe+0x58>
   14b10:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b14:	80 ff       	sbrs	r24, 0
   14b16:	3c c0       	rjmp	.+120    	; 0x14b90 <SS80_describe+0xca>
   14b18:	86 eb       	ldi	r24, 0xB6	; 182
   14b1a:	93 e2       	ldi	r25, 0x23	; 35
   14b1c:	31 c0       	rjmp	.+98     	; 0x14b80 <SS80_describe+0xba>
   14b1e:	1f 82       	std	Y+7, r1	; 0x07
   14b20:	1e 82       	std	Y+6, r1	; 0x06
   14b22:	ce 01       	movw	r24, r28
   14b24:	04 96       	adiw	r24, 0x04	; 4
   14b26:	a9 dd       	rcall	.-1198   	; 0x1467a <SS80UnitPack>
   14b28:	6c 81       	ldd	r22, Y+4	; 0x04
   14b2a:	7d 81       	ldd	r23, Y+5	; 0x05
   14b2c:	ae 01       	movw	r20, r28
   14b2e:	4a 5f       	subi	r20, 0xFA	; 250
   14b30:	5f 4f       	sbci	r21, 0xFF	; 255
   14b32:	0e 94 78 8a 	call	0x114f0	; 0x114f0 <gpib_write_str>
   14b36:	2c 81       	ldd	r18, Y+4	; 0x04
   14b38:	3d 81       	ldd	r19, Y+5	; 0x05
   14b3a:	82 17       	cp	r24, r18
   14b3c:	93 07       	cpc	r25, r19
   14b3e:	39 f0       	breq	.+14     	; 0x14b4e <SS80_describe+0x88>
   14b40:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b44:	80 ff       	sbrs	r24, 0
   14b46:	24 c0       	rjmp	.+72     	; 0x14b90 <SS80_describe+0xca>
   14b48:	89 e9       	ldi	r24, 0x99	; 153
   14b4a:	93 e2       	ldi	r25, 0x23	; 35
   14b4c:	19 c0       	rjmp	.+50     	; 0x14b80 <SS80_describe+0xba>
   14b4e:	80 e0       	ldi	r24, 0x00	; 0
   14b50:	91 e0       	ldi	r25, 0x01	; 1
   14b52:	9f 83       	std	Y+7, r25	; 0x07
   14b54:	8e 83       	std	Y+6, r24	; 0x06
   14b56:	ce 01       	movw	r24, r28
   14b58:	04 96       	adiw	r24, 0x04	; 4
   14b5a:	5b de       	rcall	.-842    	; 0x14812 <SS80VolumePack>
   14b5c:	6c 81       	ldd	r22, Y+4	; 0x04
   14b5e:	7d 81       	ldd	r23, Y+5	; 0x05
   14b60:	ae 01       	movw	r20, r28
   14b62:	4a 5f       	subi	r20, 0xFA	; 250
   14b64:	5f 4f       	sbci	r21, 0xFF	; 255
   14b66:	0e 94 78 8a 	call	0x114f0	; 0x114f0 <gpib_write_str>
   14b6a:	2c 81       	ldd	r18, Y+4	; 0x04
   14b6c:	3d 81       	ldd	r19, Y+5	; 0x05
   14b6e:	82 17       	cp	r24, r18
   14b70:	93 07       	cpc	r25, r19
   14b72:	99 f0       	breq	.+38     	; 0x14b9a <SS80_describe+0xd4>
   14b74:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b78:	80 ff       	sbrs	r24, 0
   14b7a:	0a c0       	rjmp	.+20     	; 0x14b90 <SS80_describe+0xca>
   14b7c:	8a e7       	ldi	r24, 0x7A	; 122
   14b7e:	93 e2       	ldi	r25, 0x23	; 35
   14b80:	a0 e0       	ldi	r26, 0x00	; 0
   14b82:	ed b7       	in	r30, 0x3d	; 61
   14b84:	fe b7       	in	r31, 0x3e	; 62
   14b86:	81 83       	std	Z+1, r24	; 0x01
   14b88:	92 83       	std	Z+2, r25	; 0x02
   14b8a:	a3 83       	std	Z+3, r26	; 0x03
   14b8c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   14b90:	8e 81       	ldd	r24, Y+6	; 0x06
   14b92:	9f 81       	ldd	r25, Y+7	; 0x07
   14b94:	88 27       	eor	r24, r24
   14b96:	90 7d       	andi	r25, 0xD0	; 208
   14b98:	02 c0       	rjmp	.+4      	; 0x14b9e <SS80_describe+0xd8>
   14b9a:	80 e0       	ldi	r24, 0x00	; 0
   14b9c:	90 e0       	ldi	r25, 0x00	; 0
   14b9e:	27 96       	adiw	r28, 0x07	; 7
   14ba0:	e2 e0       	ldi	r30, 0x02	; 2
   14ba2:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00014ba6 <SS80_Check_Unit>:
   14ba6:	00 d0       	rcall	.+0      	; 0x14ba8 <SS80_Check_Unit+0x2>
   14ba8:	00 d0       	rcall	.+0      	; 0x14baa <SS80_Check_Unit+0x4>
   14baa:	1f 92       	push	r1
   14bac:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   14bb0:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   14bb4:	88 23       	and	r24, r24
   14bb6:	c9 f0       	breq	.+50     	; 0x14bea <SS80_Check_Unit+0x44>
   14bb8:	8f 30       	cpi	r24, 0x0F	; 15
   14bba:	b9 f0       	breq	.+46     	; 0x14bea <SS80_Check_Unit+0x44>
   14bbc:	23 81       	ldd	r18, Z+3	; 0x03
   14bbe:	34 81       	ldd	r19, Z+4	; 0x04
   14bc0:	20 64       	ori	r18, 0x40	; 64
   14bc2:	34 83       	std	Z+4, r19	; 0x04
   14bc4:	23 83       	std	Z+3, r18	; 0x03
   14bc6:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14bca:	90 ff       	sbrs	r25, 0
   14bcc:	0f c0       	rjmp	.+30     	; 0x14bec <SS80_Check_Unit+0x46>
   14bce:	90 e0       	ldi	r25, 0x00	; 0
   14bd0:	ed b7       	in	r30, 0x3d	; 61
   14bd2:	fe b7       	in	r31, 0x3e	; 62
   14bd4:	95 83       	std	Z+5, r25	; 0x05
   14bd6:	84 83       	std	Z+4, r24	; 0x04
   14bd8:	82 e6       	ldi	r24, 0x62	; 98
   14bda:	93 e2       	ldi	r25, 0x23	; 35
   14bdc:	a0 e0       	ldi	r26, 0x00	; 0
   14bde:	81 83       	std	Z+1, r24	; 0x01
   14be0:	92 83       	std	Z+2, r25	; 0x02
   14be2:	a3 83       	std	Z+3, r26	; 0x03
   14be4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   14be8:	01 c0       	rjmp	.+2      	; 0x14bec <SS80_Check_Unit+0x46>
   14bea:	85 83       	std	Z+5, r24	; 0x05
   14bec:	0f 90       	pop	r0
   14bee:	0f 90       	pop	r0
   14bf0:	0f 90       	pop	r0
   14bf2:	0f 90       	pop	r0
   14bf4:	0f 90       	pop	r0
   14bf6:	08 95       	ret

00014bf8 <SS80_Check_Volume>:
   14bf8:	00 d0       	rcall	.+0      	; 0x14bfa <SS80_Check_Volume+0x2>
   14bfa:	00 d0       	rcall	.+0      	; 0x14bfc <SS80_Check_Volume+0x4>
   14bfc:	1f 92       	push	r1
   14bfe:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   14c02:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   14c06:	88 23       	and	r24, r24
   14c08:	b9 f0       	breq	.+46     	; 0x14c38 <SS80_Check_Volume+0x40>
   14c0a:	23 81       	ldd	r18, Z+3	; 0x03
   14c0c:	34 81       	ldd	r19, Z+4	; 0x04
   14c0e:	20 64       	ori	r18, 0x40	; 64
   14c10:	34 83       	std	Z+4, r19	; 0x04
   14c12:	23 83       	std	Z+3, r18	; 0x03
   14c14:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14c18:	90 ff       	sbrs	r25, 0
   14c1a:	0f c0       	rjmp	.+30     	; 0x14c3a <SS80_Check_Volume+0x42>
   14c1c:	90 e0       	ldi	r25, 0x00	; 0
   14c1e:	ed b7       	in	r30, 0x3d	; 61
   14c20:	fe b7       	in	r31, 0x3e	; 62
   14c22:	95 83       	std	Z+5, r25	; 0x05
   14c24:	84 83       	std	Z+4, r24	; 0x04
   14c26:	88 e4       	ldi	r24, 0x48	; 72
   14c28:	93 e2       	ldi	r25, 0x23	; 35
   14c2a:	a0 e0       	ldi	r26, 0x00	; 0
   14c2c:	81 83       	std	Z+1, r24	; 0x01
   14c2e:	92 83       	std	Z+2, r25	; 0x02
   14c30:	a3 83       	std	Z+3, r26	; 0x03
   14c32:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   14c36:	01 c0       	rjmp	.+2      	; 0x14c3a <SS80_Check_Volume+0x42>
   14c38:	16 82       	std	Z+6, r1	; 0x06
   14c3a:	0f 90       	pop	r0
   14c3c:	0f 90       	pop	r0
   14c3e:	0f 90       	pop	r0
   14c40:	0f 90       	pop	r0
   14c42:	0f 90       	pop	r0
   14c44:	08 95       	ret

00014c46 <SS80_Command_State>:
   14c46:	2f 92       	push	r2
   14c48:	3f 92       	push	r3
   14c4a:	4f 92       	push	r4
   14c4c:	6f 92       	push	r6
   14c4e:	7f 92       	push	r7
   14c50:	8f 92       	push	r8
   14c52:	af 92       	push	r10
   14c54:	bf 92       	push	r11
   14c56:	cf 92       	push	r12
   14c58:	ef 92       	push	r14
   14c5a:	ff 92       	push	r15
   14c5c:	0f 93       	push	r16
   14c5e:	1f 93       	push	r17
   14c60:	cf 93       	push	r28
   14c62:	df 93       	push	r29
   14c64:	cd b7       	in	r28, 0x3d	; 61
   14c66:	de b7       	in	r29, 0x3e	; 62
   14c68:	66 97       	sbiw	r28, 0x16	; 22
   14c6a:	0f b6       	in	r0, 0x3f	; 63
   14c6c:	f8 94       	cli
   14c6e:	de bf       	out	0x3e, r29	; 62
   14c70:	0f be       	out	0x3f, r0	; 63
   14c72:	cd bf       	out	0x3d, r28	; 61
   14c74:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   14c78:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   14c7c:	81 81       	ldd	r24, Z+1	; 0x01
   14c7e:	90 e0       	ldi	r25, 0x00	; 0
   14c80:	0e 94 5f 85 	call	0x10abe	; 0x10abe <gpib_disable_PPR>
   14c84:	80 e0       	ldi	r24, 0x00	; 0
   14c86:	91 e0       	ldi	r25, 0x01	; 1
   14c88:	99 87       	std	Y+9, r25	; 0x09
   14c8a:	88 87       	std	Y+8, r24	; 0x08
   14c8c:	ae 01       	movw	r20, r28
   14c8e:	48 5f       	subi	r20, 0xF8	; 248
   14c90:	5f 4f       	sbci	r21, 0xFF	; 255
   14c92:	60 e0       	ldi	r22, 0x00	; 0
   14c94:	72 e0       	ldi	r23, 0x02	; 2
   14c96:	87 ee       	ldi	r24, 0xE7	; 231
   14c98:	9c e1       	ldi	r25, 0x1C	; 28
   14c9a:	0e 94 d6 89 	call	0x113ac	; 0x113ac <gpib_read_str>
   14c9e:	9b 87       	std	Y+11, r25	; 0x0b
   14ca0:	8a 87       	std	Y+10, r24	; 0x0a
   14ca2:	88 85       	ldd	r24, Y+8	; 0x08
   14ca4:	99 85       	ldd	r25, Y+9	; 0x09
   14ca6:	9c 01       	movw	r18, r24
   14ca8:	22 27       	eor	r18, r18
   14caa:	30 7d       	andi	r19, 0xD0	; 208
   14cac:	23 2b       	or	r18, r19
   14cae:	79 f0       	breq	.+30     	; 0x14cce <SS80_Command_State+0x88>
   14cb0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14cb4:	80 ff       	sbrs	r24, 0
   14cb6:	21 c2       	rjmp	.+1090   	; 0x150fa <SS80_Command_State+0x4b4>
   14cb8:	82 e2       	ldi	r24, 0x22	; 34
   14cba:	93 e2       	ldi	r25, 0x23	; 35
   14cbc:	a0 e0       	ldi	r26, 0x00	; 0
   14cbe:	ed b7       	in	r30, 0x3d	; 61
   14cc0:	fe b7       	in	r31, 0x3e	; 62
   14cc2:	81 83       	std	Z+1, r24	; 0x01
   14cc4:	92 83       	std	Z+2, r25	; 0x02
   14cc6:	a3 83       	std	Z+3, r26	; 0x03
   14cc8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   14ccc:	16 c2       	rjmp	.+1068   	; 0x150fa <SS80_Command_State+0x4b4>
   14cce:	2a 85       	ldd	r18, Y+10	; 0x0a
   14cd0:	3b 85       	ldd	r19, Y+11	; 0x0b
   14cd2:	23 2b       	or	r18, r19
   14cd4:	09 f4       	brne	.+2      	; 0x14cd8 <SS80_Command_State+0x92>
   14cd6:	16 c2       	rjmp	.+1068   	; 0x15104 <SS80_Command_State+0x4be>
   14cd8:	90 fd       	sbrc	r25, 0
   14cda:	0e c0       	rjmp	.+28     	; 0x14cf8 <SS80_Command_State+0xb2>
   14cdc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14ce0:	80 ff       	sbrs	r24, 0
   14ce2:	0a c0       	rjmp	.+20     	; 0x14cf8 <SS80_Command_State+0xb2>
   14ce4:	89 e0       	ldi	r24, 0x09	; 9
   14ce6:	93 e2       	ldi	r25, 0x23	; 35
   14ce8:	a0 e0       	ldi	r26, 0x00	; 0
   14cea:	ed b7       	in	r30, 0x3d	; 61
   14cec:	fe b7       	in	r31, 0x3e	; 62
   14cee:	81 83       	std	Z+1, r24	; 0x01
   14cf0:	92 83       	std	Z+2, r25	; 0x02
   14cf2:	a3 83       	std	Z+3, r26	; 0x03
   14cf4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   14cf8:	e1 2c       	mov	r14, r1
   14cfa:	f1 2c       	mov	r15, r1
   14cfc:	8d e0       	ldi	r24, 0x0D	; 13
   14cfe:	92 e2       	ldi	r25, 0x22	; 34
   14d00:	9c 01       	movw	r18, r24
   14d02:	40 e0       	ldi	r20, 0x00	; 0
   14d04:	2e 87       	std	Y+14, r18	; 0x0e
   14d06:	3f 87       	std	Y+15, r19	; 0x0f
   14d08:	48 8b       	std	Y+16, r20	; 0x10
   14d0a:	82 e3       	ldi	r24, 0x32	; 50
   14d0c:	92 e2       	ldi	r25, 0x22	; 34
   14d0e:	9c 01       	movw	r18, r24
   14d10:	40 e0       	ldi	r20, 0x00	; 0
   14d12:	29 8b       	std	Y+17, r18	; 0x11
   14d14:	3a 8b       	std	Y+18, r19	; 0x12
   14d16:	4b 8b       	std	Y+19, r20	; 0x13
   14d18:	8c e4       	ldi	r24, 0x4C	; 76
   14d1a:	92 e2       	ldi	r25, 0x22	; 34
   14d1c:	9c 01       	movw	r18, r24
   14d1e:	40 e0       	ldi	r20, 0x00	; 0
   14d20:	2c 8b       	std	Y+20, r18	; 0x14
   14d22:	3d 8b       	std	Y+21, r19	; 0x15
   14d24:	4e 8b       	std	Y+22, r20	; 0x16
   14d26:	82 e6       	ldi	r24, 0x62	; 98
   14d28:	92 e2       	ldi	r25, 0x22	; 34
   14d2a:	3c 01       	movw	r6, r24
   14d2c:	81 2c       	mov	r8, r1
   14d2e:	80 e7       	ldi	r24, 0x70	; 112
   14d30:	92 e2       	ldi	r25, 0x22	; 34
   14d32:	5c 01       	movw	r10, r24
   14d34:	c1 2c       	mov	r12, r1
   14d36:	8c e8       	ldi	r24, 0x8C	; 140
   14d38:	92 e2       	ldi	r25, 0x22	; 34
   14d3a:	1c 01       	movw	r2, r24
   14d3c:	41 2c       	mov	r4, r1
   14d3e:	2a 85       	ldd	r18, Y+10	; 0x0a
   14d40:	3b 85       	ldd	r19, Y+11	; 0x0b
   14d42:	87 01       	movw	r16, r14
   14d44:	e2 16       	cp	r14, r18
   14d46:	f3 06       	cpc	r15, r19
   14d48:	0c f0       	brlt	.+2      	; 0x14d4c <SS80_Command_State+0x106>
   14d4a:	b6 c1       	rjmp	.+876    	; 0x150b8 <SS80_Command_State+0x472>
   14d4c:	0f 5f       	subi	r16, 0xFF	; 255
   14d4e:	1f 4f       	sbci	r17, 0xFF	; 255
   14d50:	f7 01       	movw	r30, r14
   14d52:	e9 51       	subi	r30, 0x19	; 25
   14d54:	f3 4e       	sbci	r31, 0xE3	; 227
   14d56:	80 81       	ld	r24, Z
   14d58:	28 2f       	mov	r18, r24
   14d5a:	30 e0       	ldi	r19, 0x00	; 0
   14d5c:	a9 01       	movw	r20, r18
   14d5e:	40 52       	subi	r20, 0x20	; 32
   14d60:	51 09       	sbc	r21, r1
   14d62:	40 31       	cpi	r20, 0x10	; 16
   14d64:	51 05       	cpc	r21, r1
   14d66:	98 f4       	brcc	.+38     	; 0x14d8e <SS80_Command_State+0x148>
   14d68:	80 52       	subi	r24, 0x20	; 32
   14d6a:	1d df       	rcall	.-454    	; 0x14ba6 <SS80_Check_Unit>
   14d6c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14d70:	85 ff       	sbrs	r24, 5
   14d72:	a0 c1       	rjmp	.+832    	; 0x150b4 <SS80_Command_State+0x46e>
   14d74:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   14d78:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   14d7c:	85 81       	ldd	r24, Z+5	; 0x05
   14d7e:	90 e0       	ldi	r25, 0x00	; 0
   14d80:	ed b7       	in	r30, 0x3d	; 61
   14d82:	fe b7       	in	r31, 0x3e	; 62
   14d84:	95 83       	std	Z+5, r25	; 0x05
   14d86:	84 83       	std	Z+4, r24	; 0x04
   14d88:	83 ef       	ldi	r24, 0xF3	; 243
   14d8a:	92 e2       	ldi	r25, 0x22	; 34
   14d8c:	19 c0       	rjmp	.+50     	; 0x14dc0 <SS80_Command_State+0x17a>
   14d8e:	a9 01       	movw	r20, r18
   14d90:	40 54       	subi	r20, 0x40	; 64
   14d92:	51 09       	sbc	r21, r1
   14d94:	40 31       	cpi	r20, 0x10	; 16
   14d96:	51 05       	cpc	r21, r1
   14d98:	d0 f4       	brcc	.+52     	; 0x14dce <SS80_Command_State+0x188>
   14d9a:	80 54       	subi	r24, 0x40	; 64
   14d9c:	2d df       	rcall	.-422    	; 0x14bf8 <SS80_Check_Volume>
   14d9e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14da2:	85 ff       	sbrs	r24, 5
   14da4:	87 c1       	rjmp	.+782    	; 0x150b4 <SS80_Command_State+0x46e>
   14da6:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   14daa:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   14dae:	86 81       	ldd	r24, Z+6	; 0x06
   14db0:	90 e0       	ldi	r25, 0x00	; 0
   14db2:	ed b7       	in	r30, 0x3d	; 61
   14db4:	fe b7       	in	r31, 0x3e	; 62
   14db6:	95 83       	std	Z+5, r25	; 0x05
   14db8:	84 83       	std	Z+4, r24	; 0x04
   14dba:	2a ed       	ldi	r18, 0xDA	; 218
   14dbc:	32 e2       	ldi	r19, 0x22	; 34
   14dbe:	c9 01       	movw	r24, r18
   14dc0:	a0 e0       	ldi	r26, 0x00	; 0
   14dc2:	81 83       	std	Z+1, r24	; 0x01
   14dc4:	92 83       	std	Z+2, r25	; 0x02
   14dc6:	a3 83       	std	Z+3, r26	; 0x03
   14dc8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   14dcc:	73 c1       	rjmp	.+742    	; 0x150b4 <SS80_Command_State+0x46e>
   14dce:	21 15       	cp	r18, r1
   14dd0:	31 05       	cpc	r19, r1
   14dd2:	79 f4       	brne	.+30     	; 0x14df2 <SS80_Command_State+0x1ac>
   14dd4:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   14dd8:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   14ddc:	81 e0       	ldi	r24, 0x01	; 1
   14dde:	90 e0       	ldi	r25, 0x00	; 0
   14de0:	91 83       	std	Z+1, r25	; 0x01
   14de2:	80 83       	st	Z, r24
   14de4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14de8:	85 ff       	sbrs	r24, 5
   14dea:	66 c1       	rjmp	.+716    	; 0x150b8 <SS80_Command_State+0x472>
   14dec:	82 ec       	ldi	r24, 0xC2	; 194
   14dee:	92 e2       	ldi	r25, 0x22	; 34
   14df0:	0f c0       	rjmp	.+30     	; 0x14e10 <SS80_Command_State+0x1ca>
   14df2:	22 30       	cpi	r18, 0x02	; 2
   14df4:	31 05       	cpc	r19, r1
   14df6:	a9 f4       	brne	.+42     	; 0x14e22 <SS80_Command_State+0x1dc>
   14df8:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   14dfc:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   14e00:	31 83       	std	Z+1, r19	; 0x01
   14e02:	20 83       	st	Z, r18
   14e04:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14e08:	85 ff       	sbrs	r24, 5
   14e0a:	56 c1       	rjmp	.+684    	; 0x150b8 <SS80_Command_State+0x472>
   14e0c:	89 ea       	ldi	r24, 0xA9	; 169
   14e0e:	92 e2       	ldi	r25, 0x22	; 34
   14e10:	a0 e0       	ldi	r26, 0x00	; 0
   14e12:	ed b7       	in	r30, 0x3d	; 61
   14e14:	fe b7       	in	r31, 0x3e	; 62
   14e16:	81 83       	std	Z+1, r24	; 0x01
   14e18:	92 83       	std	Z+2, r25	; 0x02
   14e1a:	a3 83       	std	Z+3, r26	; 0x03
   14e1c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   14e20:	4b c1       	rjmp	.+662    	; 0x150b8 <SS80_Command_State+0x472>
   14e22:	20 31       	cpi	r18, 0x10	; 16
   14e24:	31 05       	cpc	r19, r1
   14e26:	b1 f5       	brne	.+108    	; 0x14e94 <SS80_Command_State+0x24e>
   14e28:	20 91 63 19 	lds	r18, 0x1963	; 0x801963 <SS80s>
   14e2c:	30 91 64 19 	lds	r19, 0x1964	; 0x801964 <SS80s+0x1>
   14e30:	3d 87       	std	Y+13, r19	; 0x0d
   14e32:	2c 87       	std	Y+12, r18	; 0x0c
   14e34:	46 e0       	ldi	r20, 0x06	; 6
   14e36:	50 e0       	ldi	r21, 0x00	; 0
   14e38:	b8 01       	movw	r22, r16
   14e3a:	87 ee       	ldi	r24, 0xE7	; 231
   14e3c:	9c e1       	ldi	r25, 0x1C	; 28
   14e3e:	0e 94 a5 bd 	call	0x17b4a	; 0x17b4a <B2V_MSB>
   14e42:	ec 85       	ldd	r30, Y+12	; 0x0c
   14e44:	fd 85       	ldd	r31, Y+13	; 0x0d
   14e46:	67 83       	std	Z+7, r22	; 0x07
   14e48:	70 87       	std	Z+8, r23	; 0x08
   14e4a:	81 87       	std	Z+9, r24	; 0x09
   14e4c:	92 87       	std	Z+10, r25	; 0x0a
   14e4e:	87 01       	movw	r16, r14
   14e50:	09 5f       	subi	r16, 0xF9	; 249
   14e52:	1f 4f       	sbci	r17, 0xFF	; 255
   14e54:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14e58:	85 ff       	sbrs	r24, 5
   14e5a:	2c c1       	rjmp	.+600    	; 0x150b4 <SS80_Command_State+0x46e>
   14e5c:	20 91 63 19 	lds	r18, 0x1963	; 0x801963 <SS80s>
   14e60:	30 91 64 19 	lds	r19, 0x1964	; 0x801964 <SS80s+0x1>
   14e64:	80 91 65 19 	lds	r24, 0x1965	; 0x801965 <SS80p>
   14e68:	90 91 66 19 	lds	r25, 0x1966	; 0x801966 <SS80p+0x1>
   14e6c:	fc 01       	movw	r30, r24
   14e6e:	a0 89       	ldd	r26, Z+16	; 0x10
   14e70:	b1 89       	ldd	r27, Z+17	; 0x11
   14e72:	f9 01       	movw	r30, r18
   14e74:	27 81       	ldd	r18, Z+7	; 0x07
   14e76:	30 85       	ldd	r19, Z+8	; 0x08
   14e78:	41 85       	ldd	r20, Z+9	; 0x09
   14e7a:	52 85       	ldd	r21, Z+10	; 0x0a
   14e7c:	0e 94 1e e3 	call	0x1c63c	; 0x1c63c <__muluhisi3>
   14e80:	ed b7       	in	r30, 0x3d	; 61
   14e82:	fe b7       	in	r31, 0x3e	; 62
   14e84:	64 83       	std	Z+4, r22	; 0x04
   14e86:	75 83       	std	Z+5, r23	; 0x05
   14e88:	86 83       	std	Z+6, r24	; 0x06
   14e8a:	97 83       	std	Z+7, r25	; 0x07
   14e8c:	21 82       	std	Z+1, r2	; 0x01
   14e8e:	32 82       	std	Z+2, r3	; 0x02
   14e90:	43 82       	std	Z+3, r4	; 0x03
   14e92:	2e c0       	rjmp	.+92     	; 0x14ef0 <SS80_Command_State+0x2aa>
   14e94:	28 31       	cpi	r18, 0x18	; 24
   14e96:	31 05       	cpc	r19, r1
   14e98:	71 f5       	brne	.+92     	; 0x14ef6 <SS80_Command_State+0x2b0>
   14e9a:	20 91 63 19 	lds	r18, 0x1963	; 0x801963 <SS80s>
   14e9e:	30 91 64 19 	lds	r19, 0x1964	; 0x801964 <SS80s+0x1>
   14ea2:	3d 87       	std	Y+13, r19	; 0x0d
   14ea4:	2c 87       	std	Y+12, r18	; 0x0c
   14ea6:	44 e0       	ldi	r20, 0x04	; 4
   14ea8:	50 e0       	ldi	r21, 0x00	; 0
   14eaa:	b8 01       	movw	r22, r16
   14eac:	87 ee       	ldi	r24, 0xE7	; 231
   14eae:	9c e1       	ldi	r25, 0x1C	; 28
   14eb0:	0e 94 a5 bd 	call	0x17b4a	; 0x17b4a <B2V_MSB>
   14eb4:	ec 85       	ldd	r30, Y+12	; 0x0c
   14eb6:	fd 85       	ldd	r31, Y+13	; 0x0d
   14eb8:	63 87       	std	Z+11, r22	; 0x0b
   14eba:	74 87       	std	Z+12, r23	; 0x0c
   14ebc:	85 87       	std	Z+13, r24	; 0x0d
   14ebe:	96 87       	std	Z+14, r25	; 0x0e
   14ec0:	87 01       	movw	r16, r14
   14ec2:	0b 5f       	subi	r16, 0xFB	; 251
   14ec4:	1f 4f       	sbci	r17, 0xFF	; 255
   14ec6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14eca:	85 ff       	sbrs	r24, 5
   14ecc:	f3 c0       	rjmp	.+486    	; 0x150b4 <SS80_Command_State+0x46e>
   14ece:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   14ed2:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   14ed6:	83 85       	ldd	r24, Z+11	; 0x0b
   14ed8:	94 85       	ldd	r25, Z+12	; 0x0c
   14eda:	a5 85       	ldd	r26, Z+13	; 0x0d
   14edc:	b6 85       	ldd	r27, Z+14	; 0x0e
   14ede:	ed b7       	in	r30, 0x3d	; 61
   14ee0:	fe b7       	in	r31, 0x3e	; 62
   14ee2:	84 83       	std	Z+4, r24	; 0x04
   14ee4:	95 83       	std	Z+5, r25	; 0x05
   14ee6:	a6 83       	std	Z+6, r26	; 0x06
   14ee8:	b7 83       	std	Z+7, r27	; 0x07
   14eea:	a1 82       	std	Z+1, r10	; 0x01
   14eec:	b2 82       	std	Z+2, r11	; 0x02
   14eee:	c3 82       	std	Z+3, r12	; 0x03
   14ef0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   14ef4:	df c0       	rjmp	.+446    	; 0x150b4 <SS80_Command_State+0x46e>
   14ef6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14efa:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   14efe:	24 33       	cpi	r18, 0x34	; 52
   14f00:	31 05       	cpc	r19, r1
   14f02:	41 f4       	brne	.+16     	; 0x14f14 <SS80_Command_State+0x2ce>
   14f04:	85 ff       	sbrs	r24, 5
   14f06:	d6 c0       	rjmp	.+428    	; 0x150b4 <SS80_Command_State+0x46e>
   14f08:	ed b7       	in	r30, 0x3d	; 61
   14f0a:	fe b7       	in	r31, 0x3e	; 62
   14f0c:	61 82       	std	Z+1, r6	; 0x01
   14f0e:	72 82       	std	Z+2, r7	; 0x02
   14f10:	83 82       	std	Z+3, r8	; 0x03
   14f12:	2b c0       	rjmp	.+86     	; 0x14f6a <SS80_Command_State+0x324>
   14f14:	29 33       	cpi	r18, 0x39	; 57
   14f16:	31 05       	cpc	r19, r1
   14f18:	49 f4       	brne	.+18     	; 0x14f2c <SS80_Command_State+0x2e6>
   14f1a:	87 01       	movw	r16, r14
   14f1c:	0d 5f       	subi	r16, 0xFD	; 253
   14f1e:	1f 4f       	sbci	r17, 0xFF	; 255
   14f20:	85 ff       	sbrs	r24, 5
   14f22:	c8 c0       	rjmp	.+400    	; 0x150b4 <SS80_Command_State+0x46e>
   14f24:	2c 89       	ldd	r18, Y+20	; 0x14
   14f26:	3d 89       	ldd	r19, Y+21	; 0x15
   14f28:	4e 89       	ldd	r20, Y+22	; 0x16
   14f2a:	1a c0       	rjmp	.+52     	; 0x14f60 <SS80_Command_State+0x31a>
   14f2c:	2b 33       	cpi	r18, 0x3B	; 59
   14f2e:	31 05       	cpc	r19, r1
   14f30:	49 f4       	brne	.+18     	; 0x14f44 <SS80_Command_State+0x2fe>
   14f32:	87 01       	movw	r16, r14
   14f34:	0e 5f       	subi	r16, 0xFE	; 254
   14f36:	1f 4f       	sbci	r17, 0xFF	; 255
   14f38:	85 ff       	sbrs	r24, 5
   14f3a:	bc c0       	rjmp	.+376    	; 0x150b4 <SS80_Command_State+0x46e>
   14f3c:	29 89       	ldd	r18, Y+17	; 0x11
   14f3e:	3a 89       	ldd	r19, Y+18	; 0x12
   14f40:	4b 89       	ldd	r20, Y+19	; 0x13
   14f42:	0e c0       	rjmp	.+28     	; 0x14f60 <SS80_Command_State+0x31a>
   14f44:	28 34       	cpi	r18, 0x48	; 72
   14f46:	31 05       	cpc	r19, r1
   14f48:	99 f4       	brne	.+38     	; 0x14f70 <SS80_Command_State+0x32a>
   14f4a:	87 01       	movw	r16, r14
   14f4c:	0e 5f       	subi	r16, 0xFE	; 254
   14f4e:	1f 4f       	sbci	r17, 0xFF	; 255
   14f50:	80 73       	andi	r24, 0x30	; 48
   14f52:	99 27       	eor	r25, r25
   14f54:	89 2b       	or	r24, r25
   14f56:	09 f4       	brne	.+2      	; 0x14f5a <SS80_Command_State+0x314>
   14f58:	ad c0       	rjmp	.+346    	; 0x150b4 <SS80_Command_State+0x46e>
   14f5a:	2e 85       	ldd	r18, Y+14	; 0x0e
   14f5c:	3f 85       	ldd	r19, Y+15	; 0x0f
   14f5e:	48 89       	ldd	r20, Y+16	; 0x10
   14f60:	ed b7       	in	r30, 0x3d	; 61
   14f62:	fe b7       	in	r31, 0x3e	; 62
   14f64:	21 83       	std	Z+1, r18	; 0x01
   14f66:	32 83       	std	Z+2, r19	; 0x02
   14f68:	43 83       	std	Z+3, r20	; 0x03
   14f6a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   14f6e:	a2 c0       	rjmp	.+324    	; 0x150b4 <SS80_Command_State+0x46e>
   14f70:	24 30       	cpi	r18, 0x04	; 4
   14f72:	31 05       	cpc	r19, r1
   14f74:	41 f4       	brne	.+16     	; 0x14f86 <SS80_Command_State+0x340>
   14f76:	80 73       	andi	r24, 0x30	; 48
   14f78:	99 27       	eor	r25, r25
   14f7a:	89 2b       	or	r24, r25
   14f7c:	09 f4       	brne	.+2      	; 0x14f80 <SS80_Command_State+0x33a>
   14f7e:	9c c0       	rjmp	.+312    	; 0x150b8 <SS80_Command_State+0x472>
   14f80:	8c ee       	ldi	r24, 0xEC	; 236
   14f82:	91 e2       	ldi	r25, 0x21	; 33
   14f84:	45 cf       	rjmp	.-374    	; 0x14e10 <SS80_Command_State+0x1ca>
   14f86:	2e 30       	cpi	r18, 0x0E	; 14
   14f88:	31 05       	cpc	r19, r1
   14f8a:	29 f4       	brne	.+10     	; 0x14f96 <SS80_Command_State+0x350>
   14f8c:	85 ff       	sbrs	r24, 5
   14f8e:	94 c0       	rjmp	.+296    	; 0x150b8 <SS80_Command_State+0x472>
   14f90:	86 ed       	ldi	r24, 0xD6	; 214
   14f92:	91 e2       	ldi	r25, 0x21	; 33
   14f94:	3d cf       	rjmp	.-390    	; 0x14e10 <SS80_Command_State+0x1ca>
   14f96:	2f 30       	cpi	r18, 0x0F	; 15
   14f98:	31 05       	cpc	r19, r1
   14f9a:	29 f4       	brne	.+10     	; 0x14fa6 <SS80_Command_State+0x360>
   14f9c:	85 ff       	sbrs	r24, 5
   14f9e:	8c c0       	rjmp	.+280    	; 0x150b8 <SS80_Command_State+0x472>
   14fa0:	89 eb       	ldi	r24, 0xB9	; 185
   14fa2:	91 e2       	ldi	r25, 0x21	; 33
   14fa4:	35 cf       	rjmp	.-406    	; 0x14e10 <SS80_Command_State+0x1ca>
   14fa6:	21 33       	cpi	r18, 0x31	; 49
   14fa8:	31 05       	cpc	r19, r1
   14faa:	59 f4       	brne	.+22     	; 0x14fc2 <SS80_Command_State+0x37c>
   14fac:	87 01       	movw	r16, r14
   14fae:	0d 5f       	subi	r16, 0xFD	; 253
   14fb0:	1f 4f       	sbci	r17, 0xFF	; 255
   14fb2:	80 73       	andi	r24, 0x30	; 48
   14fb4:	99 27       	eor	r25, r25
   14fb6:	89 2b       	or	r24, r25
   14fb8:	09 f4       	brne	.+2      	; 0x14fbc <SS80_Command_State+0x376>
   14fba:	7e c0       	rjmp	.+252    	; 0x150b8 <SS80_Command_State+0x472>
   14fbc:	8d e9       	ldi	r24, 0x9D	; 157
   14fbe:	91 e2       	ldi	r25, 0x21	; 33
   14fc0:	27 cf       	rjmp	.-434    	; 0x14e10 <SS80_Command_State+0x1ca>
   14fc2:	25 33       	cpi	r18, 0x35	; 53
   14fc4:	31 05       	cpc	r19, r1
   14fc6:	69 f4       	brne	.+26     	; 0x14fe2 <SS80_Command_State+0x39c>
   14fc8:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   14fcc:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   14fd0:	24 e0       	ldi	r18, 0x04	; 4
   14fd2:	30 e0       	ldi	r19, 0x00	; 0
   14fd4:	31 83       	std	Z+1, r19	; 0x01
   14fd6:	20 83       	st	Z, r18
   14fd8:	85 ff       	sbrs	r24, 5
   14fda:	6e c0       	rjmp	.+220    	; 0x150b8 <SS80_Command_State+0x472>
   14fdc:	8c e8       	ldi	r24, 0x8C	; 140
   14fde:	91 e2       	ldi	r25, 0x21	; 33
   14fe0:	17 cf       	rjmp	.-466    	; 0x14e10 <SS80_Command_State+0x1ca>
   14fe2:	27 33       	cpi	r18, 0x37	; 55
   14fe4:	31 05       	cpc	r19, r1
   14fe6:	59 f4       	brne	.+22     	; 0x14ffe <SS80_Command_State+0x3b8>
   14fe8:	87 01       	movw	r16, r14
   14fea:	0d 5f       	subi	r16, 0xFD	; 253
   14fec:	1f 4f       	sbci	r17, 0xFF	; 255
   14fee:	80 73       	andi	r24, 0x30	; 48
   14ff0:	99 27       	eor	r25, r25
   14ff2:	89 2b       	or	r24, r25
   14ff4:	09 f4       	brne	.+2      	; 0x14ff8 <SS80_Command_State+0x3b2>
   14ff6:	60 c0       	rjmp	.+192    	; 0x150b8 <SS80_Command_State+0x472>
   14ff8:	8e e6       	ldi	r24, 0x6E	; 110
   14ffa:	91 e2       	ldi	r25, 0x21	; 33
   14ffc:	09 cf       	rjmp	.-494    	; 0x14e10 <SS80_Command_State+0x1ca>
   14ffe:	2e 33       	cpi	r18, 0x3E	; 62
   15000:	31 05       	cpc	r19, r1
   15002:	c1 f4       	brne	.+48     	; 0x15034 <SS80_Command_State+0x3ee>
   15004:	80 73       	andi	r24, 0x30	; 48
   15006:	99 27       	eor	r25, r25
   15008:	89 2b       	or	r24, r25
   1500a:	81 f0       	breq	.+32     	; 0x1502c <SS80_Command_State+0x3e6>
   1500c:	8f e4       	ldi	r24, 0x4F	; 79
   1500e:	91 e2       	ldi	r25, 0x21	; 33
   15010:	a0 e0       	ldi	r26, 0x00	; 0
   15012:	ed b7       	in	r30, 0x3d	; 61
   15014:	fe b7       	in	r31, 0x3e	; 62
   15016:	81 83       	std	Z+1, r24	; 0x01
   15018:	92 83       	std	Z+2, r25	; 0x02
   1501a:	a3 83       	std	Z+3, r26	; 0x03
   1501c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   15020:	69 e7       	ldi	r22, 0x79	; 121
   15022:	70 e1       	ldi	r23, 0x10	; 16
   15024:	c8 01       	movw	r24, r16
   15026:	89 51       	subi	r24, 0x19	; 25
   15028:	93 4e       	sbci	r25, 0xE3	; 227
   1502a:	69 dc       	rcall	.-1838   	; 0x148fe <SS80_display_extended_status>
   1502c:	87 01       	movw	r16, r14
   1502e:	07 5f       	subi	r16, 0xF7	; 247
   15030:	1f 4f       	sbci	r17, 0xFF	; 255
   15032:	42 c0       	rjmp	.+132    	; 0x150b8 <SS80_Command_State+0x472>
   15034:	2c 34       	cpi	r18, 0x4C	; 76
   15036:	31 05       	cpc	r19, r1
   15038:	39 f4       	brne	.+14     	; 0x15048 <SS80_Command_State+0x402>
   1503a:	80 73       	andi	r24, 0x30	; 48
   1503c:	99 27       	eor	r25, r25
   1503e:	89 2b       	or	r24, r25
   15040:	d9 f1       	breq	.+118    	; 0x150b8 <SS80_Command_State+0x472>
   15042:	84 e3       	ldi	r24, 0x34	; 52
   15044:	91 e2       	ldi	r25, 0x21	; 33
   15046:	e4 ce       	rjmp	.-568    	; 0x14e10 <SS80_Command_State+0x1ca>
   15048:	2d 34       	cpi	r18, 0x4D	; 77
   1504a:	31 05       	cpc	r19, r1
   1504c:	39 f4       	brne	.+14     	; 0x1505c <SS80_Command_State+0x416>
   1504e:	80 73       	andi	r24, 0x30	; 48
   15050:	99 27       	eor	r25, r25
   15052:	89 2b       	or	r24, r25
   15054:	89 f1       	breq	.+98     	; 0x150b8 <SS80_Command_State+0x472>
   15056:	8b e1       	ldi	r24, 0x1B	; 27
   15058:	91 e2       	ldi	r25, 0x21	; 33
   1505a:	da ce       	rjmp	.-588    	; 0x14e10 <SS80_Command_State+0x1ca>
   1505c:	2d 30       	cpi	r18, 0x0D	; 13
   1505e:	31 05       	cpc	r19, r1
   15060:	69 f4       	brne	.+26     	; 0x1507c <SS80_Command_State+0x436>
   15062:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   15066:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   1506a:	23 e0       	ldi	r18, 0x03	; 3
   1506c:	30 e0       	ldi	r19, 0x00	; 0
   1506e:	31 83       	std	Z+1, r19	; 0x01
   15070:	20 83       	st	Z, r18
   15072:	85 ff       	sbrs	r24, 5
   15074:	21 c0       	rjmp	.+66     	; 0x150b8 <SS80_Command_State+0x472>
   15076:	84 e0       	ldi	r24, 0x04	; 4
   15078:	91 e2       	ldi	r25, 0x21	; 33
   1507a:	ca ce       	rjmp	.-620    	; 0x14e10 <SS80_Command_State+0x1ca>
   1507c:	23 33       	cpi	r18, 0x33	; 51
   1507e:	31 05       	cpc	r19, r1
   15080:	51 f4       	brne	.+20     	; 0x15096 <SS80_Command_State+0x450>
   15082:	87 01       	movw	r16, r14
   15084:	0c 5f       	subi	r16, 0xFC	; 252
   15086:	1f 4f       	sbci	r17, 0xFF	; 255
   15088:	80 73       	andi	r24, 0x30	; 48
   1508a:	99 27       	eor	r25, r25
   1508c:	89 2b       	or	r24, r25
   1508e:	a1 f0       	breq	.+40     	; 0x150b8 <SS80_Command_State+0x472>
   15090:	81 ee       	ldi	r24, 0xE1	; 225
   15092:	90 e2       	ldi	r25, 0x20	; 32
   15094:	bd ce       	rjmp	.-646    	; 0x14e10 <SS80_Command_State+0x1ca>
   15096:	80 ff       	sbrs	r24, 0
   15098:	28 c0       	rjmp	.+80     	; 0x150ea <SS80_Command_State+0x4a4>
   1509a:	ed b7       	in	r30, 0x3d	; 61
   1509c:	fe b7       	in	r31, 0x3e	; 62
   1509e:	35 83       	std	Z+5, r19	; 0x05
   150a0:	24 83       	std	Z+4, r18	; 0x04
   150a2:	81 ec       	ldi	r24, 0xC1	; 193
   150a4:	90 e2       	ldi	r25, 0x20	; 32
   150a6:	a0 e0       	ldi	r26, 0x00	; 0
   150a8:	81 83       	std	Z+1, r24	; 0x01
   150aa:	92 83       	std	Z+2, r25	; 0x02
   150ac:	a3 83       	std	Z+3, r26	; 0x03
   150ae:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   150b2:	02 c0       	rjmp	.+4      	; 0x150b8 <SS80_Command_State+0x472>
   150b4:	78 01       	movw	r14, r16
   150b6:	43 ce       	rjmp	.-890    	; 0x14d3e <SS80_Command_State+0xf8>
   150b8:	8a 85       	ldd	r24, Y+10	; 0x0a
   150ba:	9b 85       	ldd	r25, Y+11	; 0x0b
   150bc:	08 17       	cp	r16, r24
   150be:	19 07       	cpc	r17, r25
   150c0:	a1 f0       	breq	.+40     	; 0x150ea <SS80_Command_State+0x4a4>
   150c2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   150c6:	80 ff       	sbrs	r24, 0
   150c8:	10 c0       	rjmp	.+32     	; 0x150ea <SS80_Command_State+0x4a4>
   150ca:	2a 85       	ldd	r18, Y+10	; 0x0a
   150cc:	3b 85       	ldd	r19, Y+11	; 0x0b
   150ce:	ed b7       	in	r30, 0x3d	; 61
   150d0:	fe b7       	in	r31, 0x3e	; 62
   150d2:	37 83       	std	Z+7, r19	; 0x07
   150d4:	26 83       	std	Z+6, r18	; 0x06
   150d6:	15 83       	std	Z+5, r17	; 0x05
   150d8:	04 83       	std	Z+4, r16	; 0x04
   150da:	89 e8       	ldi	r24, 0x89	; 137
   150dc:	90 e2       	ldi	r25, 0x20	; 32
   150de:	a0 e0       	ldi	r26, 0x00	; 0
   150e0:	81 83       	std	Z+1, r24	; 0x01
   150e2:	92 83       	std	Z+2, r25	; 0x02
   150e4:	a3 83       	std	Z+3, r26	; 0x03
   150e6:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   150ea:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   150ee:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   150f2:	81 81       	ldd	r24, Z+1	; 0x01
   150f4:	90 e0       	ldi	r25, 0x00	; 0
   150f6:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
   150fa:	88 85       	ldd	r24, Y+8	; 0x08
   150fc:	99 85       	ldd	r25, Y+9	; 0x09
   150fe:	88 27       	eor	r24, r24
   15100:	90 7d       	andi	r25, 0xD0	; 208
   15102:	02 c0       	rjmp	.+4      	; 0x15108 <SS80_Command_State+0x4c2>
   15104:	80 e0       	ldi	r24, 0x00	; 0
   15106:	90 e0       	ldi	r25, 0x00	; 0
   15108:	66 96       	adiw	r28, 0x16	; 22
   1510a:	0f b6       	in	r0, 0x3f	; 63
   1510c:	f8 94       	cli
   1510e:	de bf       	out	0x3e, r29	; 62
   15110:	0f be       	out	0x3f, r0	; 63
   15112:	cd bf       	out	0x3d, r28	; 61
   15114:	df 91       	pop	r29
   15116:	cf 91       	pop	r28
   15118:	1f 91       	pop	r17
   1511a:	0f 91       	pop	r16
   1511c:	ff 90       	pop	r15
   1511e:	ef 90       	pop	r14
   15120:	cf 90       	pop	r12
   15122:	bf 90       	pop	r11
   15124:	af 90       	pop	r10
   15126:	8f 90       	pop	r8
   15128:	7f 90       	pop	r7
   1512a:	6f 90       	pop	r6
   1512c:	4f 90       	pop	r4
   1512e:	3f 90       	pop	r3
   15130:	2f 90       	pop	r2
   15132:	08 95       	ret

00015134 <SS80_cmd_seek>:
   15134:	a7 e0       	ldi	r26, 0x07	; 7
   15136:	b0 e0       	ldi	r27, 0x00	; 0
   15138:	e0 ea       	ldi	r30, 0xA0	; 160
   1513a:	f8 ea       	ldi	r31, 0xA8	; 168
   1513c:	0c 94 40 e3 	jmp	0x1c680	; 0x1c680 <__prologue_saves__+0x4>
   15140:	c0 91 63 19 	lds	r28, 0x1963	; 0x801963 <SS80s>
   15144:	d0 91 64 19 	lds	r29, 0x1964	; 0x801964 <SS80s+0x1>
   15148:	8f 80       	ldd	r8, Y+7	; 0x07
   1514a:	98 84       	ldd	r9, Y+8	; 0x08
   1514c:	a9 84       	ldd	r10, Y+9	; 0x09
   1514e:	ba 84       	ldd	r11, Y+10	; 0x0a
   15150:	00 91 65 19 	lds	r16, 0x1965	; 0x801965 <SS80p>
   15154:	10 91 66 19 	lds	r17, 0x1966	; 0x801966 <SS80p+0x1>
   15158:	f8 01       	movw	r30, r16
   1515a:	c0 88       	ldd	r12, Z+16	; 0x10
   1515c:	d1 88       	ldd	r13, Z+17	; 0x11
   1515e:	e1 2c       	mov	r14, r1
   15160:	f1 2c       	mov	r15, r1
   15162:	6b 85       	ldd	r22, Y+11	; 0x0b
   15164:	7c 85       	ldd	r23, Y+12	; 0x0c
   15166:	8d 85       	ldd	r24, Y+13	; 0x0d
   15168:	9e 85       	ldd	r25, Y+14	; 0x0e
   1516a:	a7 01       	movw	r20, r14
   1516c:	96 01       	movw	r18, r12
   1516e:	0e 94 d1 e2 	call	0x1c5a2	; 0x1c5a2 <__udivmodsi4>
   15172:	da 01       	movw	r26, r20
   15174:	c9 01       	movw	r24, r18
   15176:	88 0d       	add	r24, r8
   15178:	99 1d       	adc	r25, r9
   1517a:	aa 1d       	adc	r26, r10
   1517c:	bb 1d       	adc	r27, r11
   1517e:	f8 01       	movw	r30, r16
   15180:	46 a0       	ldd	r4, Z+38	; 0x26
   15182:	57 a0       	ldd	r5, Z+39	; 0x27
   15184:	60 a4       	ldd	r6, Z+40	; 0x28
   15186:	71 a4       	ldd	r7, Z+41	; 0x29
   15188:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   1518c:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15190:	48 16       	cp	r4, r24
   15192:	59 06       	cpc	r5, r25
   15194:	6a 06       	cpc	r6, r26
   15196:	7b 06       	cpc	r7, r27
   15198:	f0 f4       	brcc	.+60     	; 0x151d6 <SS80_cmd_seek+0xa2>
   1519a:	81 e0       	ldi	r24, 0x01	; 1
   1519c:	8a 83       	std	Y+2, r24	; 0x02
   1519e:	8b 81       	ldd	r24, Y+3	; 0x03
   151a0:	9c 81       	ldd	r25, Y+4	; 0x04
   151a2:	84 60       	ori	r24, 0x04	; 4
   151a4:	9c 83       	std	Y+4, r25	; 0x04
   151a6:	8b 83       	std	Y+3, r24	; 0x03
   151a8:	40 ff       	sbrs	r20, 0
   151aa:	31 c0       	rjmp	.+98     	; 0x1520e <SS80_cmd_seek+0xda>
   151ac:	a0 89       	ldd	r26, Z+16	; 0x10
   151ae:	b1 89       	ldd	r27, Z+17	; 0x11
   151b0:	a5 01       	movw	r20, r10
   151b2:	94 01       	movw	r18, r8
   151b4:	0e 94 1e e3 	call	0x1c63c	; 0x1c63c <__muluhisi3>
   151b8:	ed b7       	in	r30, 0x3d	; 61
   151ba:	fe b7       	in	r31, 0x3e	; 62
   151bc:	64 83       	std	Z+4, r22	; 0x04
   151be:	75 83       	std	Z+5, r23	; 0x05
   151c0:	86 83       	std	Z+6, r24	; 0x06
   151c2:	97 83       	std	Z+7, r25	; 0x07
   151c4:	86 e4       	ldi	r24, 0x46	; 70
   151c6:	9f e1       	ldi	r25, 0x1F	; 31
   151c8:	a0 e0       	ldi	r26, 0x00	; 0
   151ca:	81 83       	std	Z+1, r24	; 0x01
   151cc:	92 83       	std	Z+2, r25	; 0x02
   151ce:	a3 83       	std	Z+3, r26	; 0x03
   151d0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   151d4:	1c c0       	rjmp	.+56     	; 0x1520e <SS80_cmd_seek+0xda>
   151d6:	ca 01       	movw	r24, r20
   151d8:	80 72       	andi	r24, 0x20	; 32
   151da:	99 27       	eor	r25, r25
   151dc:	45 ff       	sbrs	r20, 5
   151de:	19 c0       	rjmp	.+50     	; 0x15212 <SS80_cmd_seek+0xde>
   151e0:	a5 01       	movw	r20, r10
   151e2:	94 01       	movw	r18, r8
   151e4:	c7 01       	movw	r24, r14
   151e6:	b6 01       	movw	r22, r12
   151e8:	0e 94 8f e2 	call	0x1c51e	; 0x1c51e <__mulsi3>
   151ec:	ed b7       	in	r30, 0x3d	; 61
   151ee:	fe b7       	in	r31, 0x3e	; 62
   151f0:	64 83       	std	Z+4, r22	; 0x04
   151f2:	75 83       	std	Z+5, r23	; 0x05
   151f4:	86 83       	std	Z+6, r24	; 0x06
   151f6:	97 83       	std	Z+7, r25	; 0x07
   151f8:	82 e3       	ldi	r24, 0x32	; 50
   151fa:	9f e1       	ldi	r25, 0x1F	; 31
   151fc:	a0 e0       	ldi	r26, 0x00	; 0
   151fe:	81 83       	std	Z+1, r24	; 0x01
   15200:	92 83       	std	Z+2, r25	; 0x02
   15202:	a3 83       	std	Z+3, r26	; 0x03
   15204:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   15208:	80 e0       	ldi	r24, 0x00	; 0
   1520a:	90 e0       	ldi	r25, 0x00	; 0
   1520c:	02 c0       	rjmp	.+4      	; 0x15212 <SS80_cmd_seek+0xde>
   1520e:	81 e0       	ldi	r24, 0x01	; 1
   15210:	90 e0       	ldi	r25, 0x00	; 0
   15212:	cd b7       	in	r28, 0x3d	; 61
   15214:	de b7       	in	r29, 0x3e	; 62
   15216:	27 96       	adiw	r28, 0x07	; 7
   15218:	e0 e1       	ldi	r30, 0x10	; 16
   1521a:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__epilogue_restores__+0x4>

0001521e <SS80_locate_and_write>:
   1521e:	a3 e1       	ldi	r26, 0x13	; 19
   15220:	b0 e0       	ldi	r27, 0x00	; 0
   15222:	e5 e1       	ldi	r30, 0x15	; 21
   15224:	f9 ea       	ldi	r31, 0xA9	; 169
   15226:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
   1522a:	00 91 63 19 	lds	r16, 0x1963	; 0x801963 <SS80s>
   1522e:	10 91 64 19 	lds	r17, 0x1964	; 0x801964 <SS80s+0x1>
   15232:	80 91 65 19 	lds	r24, 0x1965	; 0x801965 <SS80p>
   15236:	90 91 66 19 	lds	r25, 0x1966	; 0x801966 <SS80p+0x1>
   1523a:	fc 01       	movw	r30, r24
   1523c:	a0 89       	ldd	r26, Z+16	; 0x10
   1523e:	b1 89       	ldd	r27, Z+17	; 0x11
   15240:	f8 01       	movw	r30, r16
   15242:	27 81       	ldd	r18, Z+7	; 0x07
   15244:	30 85       	ldd	r19, Z+8	; 0x08
   15246:	41 85       	ldd	r20, Z+9	; 0x09
   15248:	52 85       	ldd	r21, Z+10	; 0x0a
   1524a:	0e 94 1e e3 	call	0x1c63c	; 0x1c63c <__muluhisi3>
   1524e:	4b 01       	movw	r8, r22
   15250:	5c 01       	movw	r10, r24
   15252:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15256:	85 ff       	sbrs	r24, 5
   15258:	16 c0       	rjmp	.+44     	; 0x15286 <SS80_locate_and_write+0x68>
   1525a:	83 85       	ldd	r24, Z+11	; 0x0b
   1525c:	94 85       	ldd	r25, Z+12	; 0x0c
   1525e:	a5 85       	ldd	r26, Z+13	; 0x0d
   15260:	b6 85       	ldd	r27, Z+14	; 0x0e
   15262:	ed b7       	in	r30, 0x3d	; 61
   15264:	fe b7       	in	r31, 0x3e	; 62
   15266:	80 87       	std	Z+8, r24	; 0x08
   15268:	91 87       	std	Z+9, r25	; 0x09
   1526a:	a2 87       	std	Z+10, r26	; 0x0a
   1526c:	b3 87       	std	Z+11, r27	; 0x0b
   1526e:	84 82       	std	Z+4, r8	; 0x04
   15270:	95 82       	std	Z+5, r9	; 0x05
   15272:	a6 82       	std	Z+6, r10	; 0x06
   15274:	b7 82       	std	Z+7, r11	; 0x07
   15276:	89 ec       	ldi	r24, 0xC9	; 201
   15278:	94 e2       	ldi	r25, 0x24	; 36
   1527a:	a0 e0       	ldi	r26, 0x00	; 0
   1527c:	81 83       	std	Z+1, r24	; 0x01
   1527e:	92 83       	std	Z+2, r25	; 0x02
   15280:	a3 83       	std	Z+3, r26	; 0x03
   15282:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   15286:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   1528a:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   1528e:	12 82       	std	Z+2, r1	; 0x02
   15290:	54 98       	cbi	0x0a, 4	; 10
   15292:	4c 99       	sbic	0x09, 4	; 9
   15294:	03 c0       	rjmp	.+6      	; 0x1529c <SS80_locate_and_write+0x7e>
   15296:	80 e0       	ldi	r24, 0x00	; 0
   15298:	90 e1       	ldi	r25, 0x10	; 16
   1529a:	4f c1       	rjmp	.+670    	; 0x1553a <SS80_locate_and_write+0x31c>
   1529c:	4b df       	rcall	.-362    	; 0x15134 <SS80_cmd_seek>
   1529e:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   152a2:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   152a6:	89 2b       	or	r24, r25
   152a8:	41 f0       	breq	.+16     	; 0x152ba <SS80_locate_and_write+0x9c>
   152aa:	83 81       	ldd	r24, Z+3	; 0x03
   152ac:	94 81       	ldd	r25, Z+4	; 0x04
   152ae:	82 60       	ori	r24, 0x02	; 2
   152b0:	94 83       	std	Z+4, r25	; 0x04
   152b2:	83 83       	std	Z+3, r24	; 0x03
   152b4:	01 e0       	ldi	r16, 0x01	; 1
   152b6:	10 e0       	ldi	r17, 0x00	; 0
   152b8:	02 c0       	rjmp	.+4      	; 0x152be <SS80_locate_and_write+0xa0>
   152ba:	00 e0       	ldi	r16, 0x00	; 0
   152bc:	10 e0       	ldi	r17, 0x00	; 0
   152be:	23 84       	ldd	r2, Z+11	; 0x0b
   152c0:	34 84       	ldd	r3, Z+12	; 0x0c
   152c2:	1d 86       	std	Y+13, r1	; 0x0d
   152c4:	1c 86       	std	Y+12, r1	; 0x0c
   152c6:	41 2c       	mov	r4, r1
   152c8:	51 2c       	mov	r5, r1
   152ca:	32 01       	movw	r6, r4
   152cc:	8c e7       	ldi	r24, 0x7C	; 124
   152ce:	94 e2       	ldi	r25, 0x24	; 36
   152d0:	9c 01       	movw	r18, r24
   152d2:	40 e0       	ldi	r20, 0x00	; 0
   152d4:	2e 87       	std	Y+14, r18	; 0x0e
   152d6:	3f 87       	std	Y+15, r19	; 0x0f
   152d8:	48 8b       	std	Y+16, r20	; 0x10
   152da:	82 ea       	ldi	r24, 0xA2	; 162
   152dc:	94 e2       	ldi	r25, 0x24	; 36
   152de:	9c 01       	movw	r18, r24
   152e0:	40 e0       	ldi	r20, 0x00	; 0
   152e2:	29 8b       	std	Y+17, r18	; 0x11
   152e4:	3a 8b       	std	Y+18, r19	; 0x12
   152e6:	4b 8b       	std	Y+19, r20	; 0x13
   152e8:	12 14       	cp	r1, r2
   152ea:	13 04       	cpc	r1, r3
   152ec:	0c f0       	brlt	.+2      	; 0x152f0 <SS80_locate_and_write+0xd2>
   152ee:	f5 c0       	rjmp	.+490    	; 0x154da <SS80_locate_and_write+0x2bc>
   152f0:	54 98       	cbi	0x0a, 4	; 10
   152f2:	4c 9b       	sbis	0x09, 4	; 9
   152f4:	d0 cf       	rjmp	.-96     	; 0x15296 <SS80_locate_and_write+0x78>
   152f6:	71 01       	movw	r14, r2
   152f8:	31 e0       	ldi	r19, 0x01	; 1
   152fa:	23 16       	cp	r2, r19
   152fc:	33 06       	cpc	r3, r19
   152fe:	1c f0       	brlt	.+6      	; 0x15306 <SS80_locate_and_write+0xe8>
   15300:	e1 2c       	mov	r14, r1
   15302:	ff 24       	eor	r15, r15
   15304:	f3 94       	inc	r15
   15306:	e7 ee       	ldi	r30, 0xE7	; 231
   15308:	fc e1       	ldi	r31, 0x1C	; 28
   1530a:	20 e0       	ldi	r18, 0x00	; 0
   1530c:	32 e0       	ldi	r19, 0x02	; 2
   1530e:	11 92       	st	Z+, r1
   15310:	21 50       	subi	r18, 0x01	; 1
   15312:	30 40       	sbci	r19, 0x00	; 0
   15314:	e1 f7       	brne	.-8      	; 0x1530e <SS80_locate_and_write+0xf0>
   15316:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1531a:	87 fd       	sbrc	r24, 7
   1531c:	0e 94 4f 84 	call	0x1089e	; 0x1089e <gpib_timer_elapsed_begin>
   15320:	ae 01       	movw	r20, r28
   15322:	44 5f       	subi	r20, 0xF4	; 244
   15324:	5f 4f       	sbci	r21, 0xFF	; 255
   15326:	b7 01       	movw	r22, r14
   15328:	87 ee       	ldi	r24, 0xE7	; 231
   1532a:	9c e1       	ldi	r25, 0x1C	; 28
   1532c:	0e 94 d6 89 	call	0x113ac	; 0x113ac <gpib_read_str>
   15330:	6c 01       	movw	r12, r24
   15332:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15336:	87 ff       	sbrs	r24, 7
   15338:	04 c0       	rjmp	.+8      	; 0x15342 <SS80_locate_and_write+0x124>
   1533a:	85 e9       	ldi	r24, 0x95	; 149
   1533c:	90 e1       	ldi	r25, 0x10	; 16
   1533e:	0e 94 61 84 	call	0x108c2	; 0x108c2 <gpib_timer_elapsed_end>
   15342:	ce 14       	cp	r12, r14
   15344:	df 04       	cpc	r13, r15
   15346:	39 f1       	breq	.+78     	; 0x15396 <SS80_locate_and_write+0x178>
   15348:	8c 85       	ldd	r24, Y+12	; 0x0c
   1534a:	9d 85       	ldd	r25, Y+13	; 0x0d
   1534c:	9c 01       	movw	r18, r24
   1534e:	22 27       	eor	r18, r18
   15350:	30 7d       	andi	r19, 0xD0	; 208
   15352:	23 2b       	or	r18, r19
   15354:	d1 f0       	breq	.+52     	; 0x1538a <SS80_locate_and_write+0x16c>
   15356:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1535a:	80 ff       	sbrs	r24, 0
   1535c:	0a c0       	rjmp	.+20     	; 0x15372 <SS80_locate_and_write+0x154>
   1535e:	86 eb       	ldi	r24, 0xB6	; 182
   15360:	94 e2       	ldi	r25, 0x24	; 36
   15362:	a0 e0       	ldi	r26, 0x00	; 0
   15364:	ed b7       	in	r30, 0x3d	; 61
   15366:	fe b7       	in	r31, 0x3e	; 62
   15368:	81 83       	std	Z+1, r24	; 0x01
   1536a:	92 83       	std	Z+2, r25	; 0x02
   1536c:	a3 83       	std	Z+3, r26	; 0x03
   1536e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   15372:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   15376:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   1537a:	83 81       	ldd	r24, Z+3	; 0x03
   1537c:	94 81       	ldd	r25, Z+4	; 0x04
   1537e:	82 60       	ori	r24, 0x02	; 2
   15380:	94 83       	std	Z+4, r25	; 0x04
   15382:	83 83       	std	Z+3, r24	; 0x03
   15384:	81 e0       	ldi	r24, 0x01	; 1
   15386:	82 83       	std	Z+2, r24	; 0x02
   15388:	99 c0       	rjmp	.+306    	; 0x154bc <SS80_locate_and_write+0x29e>
   1538a:	c1 14       	cp	r12, r1
   1538c:	d1 04       	cpc	r13, r1
   1538e:	09 f0       	breq	.+2      	; 0x15392 <SS80_locate_and_write+0x174>
   15390:	d0 c0       	rjmp	.+416    	; 0x15532 <SS80_locate_and_write+0x314>
   15392:	90 fd       	sbrc	r25, 0
   15394:	93 c0       	rjmp	.+294    	; 0x154bc <SS80_locate_and_write+0x29e>
   15396:	01 15       	cp	r16, r1
   15398:	11 05       	cpc	r17, r1
   1539a:	09 f0       	breq	.+2      	; 0x1539e <SS80_locate_and_write+0x180>
   1539c:	84 c0       	rjmp	.+264    	; 0x154a6 <SS80_locate_and_write+0x288>
   1539e:	c1 14       	cp	r12, r1
   153a0:	d1 04       	cpc	r13, r1
   153a2:	09 f4       	brne	.+2      	; 0x153a6 <SS80_locate_and_write+0x188>
   153a4:	82 c0       	rjmp	.+260    	; 0x154aa <SS80_locate_and_write+0x28c>
   153a6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153aa:	86 fd       	sbrc	r24, 6
   153ac:	0e 94 4f 84 	call	0x1089e	; 0x1089e <gpib_timer_elapsed_begin>
   153b0:	e0 90 63 19 	lds	r14, 0x1963	; 0x801963 <SS80s>
   153b4:	f0 90 64 19 	lds	r15, 0x1964	; 0x801964 <SS80s+0x1>
   153b8:	f3 e0       	ldi	r31, 0x03	; 3
   153ba:	ef 0e       	add	r14, r31
   153bc:	f1 1c       	adc	r15, r1
   153be:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   153c2:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   153c6:	86 01       	movw	r16, r12
   153c8:	27 ee       	ldi	r18, 0xE7	; 231
   153ca:	3c e1       	ldi	r19, 0x1C	; 28
   153cc:	b5 01       	movw	r22, r10
   153ce:	a4 01       	movw	r20, r8
   153d0:	82 81       	ldd	r24, Z+2	; 0x02
   153d2:	93 81       	ldd	r25, Z+3	; 0x03
   153d4:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <dbf_open_write>
   153d8:	7c 01       	movw	r14, r24
   153da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153de:	86 ff       	sbrs	r24, 6
   153e0:	04 c0       	rjmp	.+8      	; 0x153ea <SS80_locate_and_write+0x1cc>
   153e2:	80 ea       	ldi	r24, 0xA0	; 160
   153e4:	90 e1       	ldi	r25, 0x10	; 16
   153e6:	0e 94 61 84 	call	0x108c2	; 0x108c2 <gpib_timer_elapsed_end>
   153ea:	ce 14       	cp	r12, r14
   153ec:	df 04       	cpc	r13, r15
   153ee:	39 f1       	breq	.+78     	; 0x1543e <SS80_locate_and_write+0x220>
   153f0:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   153f4:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   153f8:	83 81       	ldd	r24, Z+3	; 0x03
   153fa:	94 81       	ldd	r25, Z+4	; 0x04
   153fc:	82 60       	ori	r24, 0x02	; 2
   153fe:	94 83       	std	Z+4, r25	; 0x04
   15400:	83 83       	std	Z+3, r24	; 0x03
   15402:	0e 94 13 6f 	call	0xde26	; 0xde26 <mmc_wp_status>
   15406:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   1540a:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   1540e:	89 2b       	or	r24, r25
   15410:	29 f0       	breq	.+10     	; 0x1541c <SS80_locate_and_write+0x1fe>
   15412:	83 81       	ldd	r24, Z+3	; 0x03
   15414:	94 81       	ldd	r25, Z+4	; 0x04
   15416:	88 60       	ori	r24, 0x08	; 8
   15418:	94 83       	std	Z+4, r25	; 0x04
   1541a:	83 83       	std	Z+3, r24	; 0x03
   1541c:	21 e0       	ldi	r18, 0x01	; 1
   1541e:	22 83       	std	Z+2, r18	; 0x02
   15420:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15424:	80 ff       	sbrs	r24, 0
   15426:	27 c0       	rjmp	.+78     	; 0x15476 <SS80_locate_and_write+0x258>
   15428:	89 89       	ldd	r24, Y+17	; 0x11
   1542a:	9a 89       	ldd	r25, Y+18	; 0x12
   1542c:	ab 89       	ldd	r26, Y+19	; 0x13
   1542e:	ed b7       	in	r30, 0x3d	; 61
   15430:	fe b7       	in	r31, 0x3e	; 62
   15432:	81 83       	std	Z+1, r24	; 0x01
   15434:	92 83       	std	Z+2, r25	; 0x02
   15436:	a3 83       	std	Z+3, r26	; 0x03
   15438:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1543c:	1c c0       	rjmp	.+56     	; 0x15476 <SS80_locate_and_write+0x258>
   1543e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15442:	85 ff       	sbrs	r24, 5
   15444:	0c c0       	rjmp	.+24     	; 0x1545e <SS80_locate_and_write+0x240>
   15446:	ed b7       	in	r30, 0x3d	; 61
   15448:	fe b7       	in	r31, 0x3e	; 62
   1544a:	d5 82       	std	Z+5, r13	; 0x05
   1544c:	c4 82       	std	Z+4, r12	; 0x04
   1544e:	2e 85       	ldd	r18, Y+14	; 0x0e
   15450:	3f 85       	ldd	r19, Y+15	; 0x0f
   15452:	48 89       	ldd	r20, Y+16	; 0x10
   15454:	21 83       	std	Z+1, r18	; 0x01
   15456:	32 83       	std	Z+2, r19	; 0x02
   15458:	43 83       	std	Z+3, r20	; 0x03
   1545a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1545e:	c6 01       	movw	r24, r12
   15460:	0d 2c       	mov	r0, r13
   15462:	00 0c       	add	r0, r0
   15464:	aa 0b       	sbc	r26, r26
   15466:	bb 0b       	sbc	r27, r27
   15468:	88 0e       	add	r8, r24
   1546a:	99 1e       	adc	r9, r25
   1546c:	aa 1e       	adc	r10, r26
   1546e:	bb 1e       	adc	r11, r27
   15470:	00 e0       	ldi	r16, 0x00	; 0
   15472:	10 e0       	ldi	r17, 0x00	; 0
   15474:	05 c0       	rjmp	.+10     	; 0x15480 <SS80_locate_and_write+0x262>
   15476:	ec 14       	cp	r14, r12
   15478:	fd 04       	cpc	r15, r13
   1547a:	64 f0       	brlt	.+24     	; 0x15494 <SS80_locate_and_write+0x276>
   1547c:	01 e0       	ldi	r16, 0x01	; 1
   1547e:	10 e0       	ldi	r17, 0x00	; 0
   15480:	c7 01       	movw	r24, r14
   15482:	0f 2c       	mov	r0, r15
   15484:	00 0c       	add	r0, r0
   15486:	aa 0b       	sbc	r26, r26
   15488:	bb 0b       	sbc	r27, r27
   1548a:	48 0e       	add	r4, r24
   1548c:	59 1e       	adc	r5, r25
   1548e:	6a 1e       	adc	r6, r26
   15490:	7b 1e       	adc	r7, r27
   15492:	0b c0       	rjmp	.+22     	; 0x154aa <SS80_locate_and_write+0x28c>
   15494:	c6 01       	movw	r24, r12
   15496:	0d 2c       	mov	r0, r13
   15498:	00 0c       	add	r0, r0
   1549a:	aa 0b       	sbc	r26, r26
   1549c:	bb 0b       	sbc	r27, r27
   1549e:	48 0e       	add	r4, r24
   154a0:	59 1e       	adc	r5, r25
   154a2:	6a 1e       	adc	r6, r26
   154a4:	7b 1e       	adc	r7, r27
   154a6:	01 e0       	ldi	r16, 0x01	; 1
   154a8:	10 e0       	ldi	r17, 0x00	; 0
   154aa:	2c 18       	sub	r2, r12
   154ac:	3d 08       	sbc	r3, r13
   154ae:	8c 85       	ldd	r24, Y+12	; 0x0c
   154b0:	9d 85       	ldd	r25, Y+13	; 0x0d
   154b2:	90 ff       	sbrs	r25, 0
   154b4:	19 cf       	rjmp	.-462    	; 0x152e8 <SS80_locate_and_write+0xca>
   154b6:	12 14       	cp	r1, r2
   154b8:	13 04       	cpc	r1, r3
   154ba:	7c f4       	brge	.+30     	; 0x154da <SS80_locate_and_write+0x2bc>
   154bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   154c0:	80 ff       	sbrs	r24, 0
   154c2:	1d c0       	rjmp	.+58     	; 0x154fe <SS80_locate_and_write+0x2e0>
   154c4:	84 e5       	ldi	r24, 0x54	; 84
   154c6:	94 e2       	ldi	r25, 0x24	; 36
   154c8:	a0 e0       	ldi	r26, 0x00	; 0
   154ca:	ed b7       	in	r30, 0x3d	; 61
   154cc:	fe b7       	in	r31, 0x3e	; 62
   154ce:	81 83       	std	Z+1, r24	; 0x01
   154d0:	92 83       	std	Z+2, r25	; 0x02
   154d2:	a3 83       	std	Z+3, r26	; 0x03
   154d4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   154d8:	12 c0       	rjmp	.+36     	; 0x154fe <SS80_locate_and_write+0x2e0>
   154da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   154de:	85 ff       	sbrs	r24, 5
   154e0:	0e c0       	rjmp	.+28     	; 0x154fe <SS80_locate_and_write+0x2e0>
   154e2:	ed b7       	in	r30, 0x3d	; 61
   154e4:	fe b7       	in	r31, 0x3e	; 62
   154e6:	44 82       	std	Z+4, r4	; 0x04
   154e8:	55 82       	std	Z+5, r5	; 0x05
   154ea:	66 82       	std	Z+6, r6	; 0x06
   154ec:	77 82       	std	Z+7, r7	; 0x07
   154ee:	89 e2       	ldi	r24, 0x29	; 41
   154f0:	94 e2       	ldi	r25, 0x24	; 36
   154f2:	a0 e0       	ldi	r26, 0x00	; 0
   154f4:	81 83       	std	Z+1, r24	; 0x01
   154f6:	92 83       	std	Z+2, r25	; 0x02
   154f8:	a3 83       	std	Z+3, r26	; 0x03
   154fa:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   154fe:	00 91 63 19 	lds	r16, 0x1963	; 0x801963 <SS80s>
   15502:	10 91 64 19 	lds	r17, 0x1964	; 0x801964 <SS80s+0x1>
   15506:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   1550a:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   1550e:	20 89       	ldd	r18, Z+16	; 0x10
   15510:	31 89       	ldd	r19, Z+17	; 0x11
   15512:	40 e0       	ldi	r20, 0x00	; 0
   15514:	50 e0       	ldi	r21, 0x00	; 0
   15516:	c5 01       	movw	r24, r10
   15518:	b4 01       	movw	r22, r8
   1551a:	0e 94 d1 e2 	call	0x1c5a2	; 0x1c5a2 <__udivmodsi4>
   1551e:	f8 01       	movw	r30, r16
   15520:	27 83       	std	Z+7, r18	; 0x07
   15522:	30 87       	std	Z+8, r19	; 0x08
   15524:	41 87       	std	Z+9, r20	; 0x09
   15526:	52 87       	std	Z+10, r21	; 0x0a
   15528:	8c 85       	ldd	r24, Y+12	; 0x0c
   1552a:	9d 85       	ldd	r25, Y+13	; 0x0d
   1552c:	88 27       	eor	r24, r24
   1552e:	90 7d       	andi	r25, 0xD0	; 208
   15530:	04 c0       	rjmp	.+8      	; 0x1553a <SS80_locate_and_write+0x31c>
   15532:	01 2b       	or	r16, r17
   15534:	09 f4       	brne	.+2      	; 0x15538 <SS80_locate_and_write+0x31a>
   15536:	37 cf       	rjmp	.-402    	; 0x153a6 <SS80_locate_and_write+0x188>
   15538:	b6 cf       	rjmp	.-148    	; 0x154a6 <SS80_locate_and_write+0x288>
   1553a:	63 96       	adiw	r28, 0x13	; 19
   1553c:	e2 e1       	ldi	r30, 0x12	; 18
   1553e:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

00015542 <SS80_Report>:
   15542:	a8 e0       	ldi	r26, 0x08	; 8
   15544:	b0 e0       	ldi	r27, 0x00	; 0
   15546:	e7 ea       	ldi	r30, 0xA7	; 167
   15548:	fa ea       	ldi	r31, 0xAA	; 170
   1554a:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
   1554e:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   15552:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   15556:	82 81       	ldd	r24, Z+2	; 0x02
   15558:	88 87       	std	Y+8, r24	; 0x08
   1555a:	80 e0       	ldi	r24, 0x00	; 0
   1555c:	91 e0       	ldi	r25, 0x01	; 1
   1555e:	9f 83       	std	Y+7, r25	; 0x07
   15560:	8e 83       	std	Y+6, r24	; 0x06
   15562:	ae 01       	movw	r20, r28
   15564:	4a 5f       	subi	r20, 0xFA	; 250
   15566:	5f 4f       	sbci	r21, 0xFF	; 255
   15568:	61 e0       	ldi	r22, 0x01	; 1
   1556a:	70 e0       	ldi	r23, 0x00	; 0
   1556c:	ce 01       	movw	r24, r28
   1556e:	08 96       	adiw	r24, 0x08	; 8
   15570:	0e 94 78 8a 	call	0x114f0	; 0x114f0 <gpib_write_str>
   15574:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15578:	01 97       	sbiw	r24, 0x01	; 1
   1557a:	89 f0       	breq	.+34     	; 0x1559e <SS80_Report+0x5c>
   1557c:	20 ff       	sbrs	r18, 0
   1557e:	0a c0       	rjmp	.+20     	; 0x15594 <SS80_Report+0x52>
   15580:	88 e1       	ldi	r24, 0x18	; 24
   15582:	9f e1       	ldi	r25, 0x1F	; 31
   15584:	a0 e0       	ldi	r26, 0x00	; 0
   15586:	ed b7       	in	r30, 0x3d	; 61
   15588:	fe b7       	in	r31, 0x3e	; 62
   1558a:	81 83       	std	Z+1, r24	; 0x01
   1558c:	92 83       	std	Z+2, r25	; 0x02
   1558e:	a3 83       	std	Z+3, r26	; 0x03
   15590:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   15594:	8e 81       	ldd	r24, Y+6	; 0x06
   15596:	9f 81       	ldd	r25, Y+7	; 0x07
   15598:	88 27       	eor	r24, r24
   1559a:	90 7d       	andi	r25, 0xD0	; 208
   1559c:	1b c0       	rjmp	.+54     	; 0x155d4 <SS80_Report+0x92>
   1559e:	25 ff       	sbrs	r18, 5
   155a0:	12 c0       	rjmp	.+36     	; 0x155c6 <SS80_Report+0x84>
   155a2:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   155a6:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   155aa:	82 81       	ldd	r24, Z+2	; 0x02
   155ac:	90 e0       	ldi	r25, 0x00	; 0
   155ae:	ed b7       	in	r30, 0x3d	; 61
   155b0:	fe b7       	in	r31, 0x3e	; 62
   155b2:	95 83       	std	Z+5, r25	; 0x05
   155b4:	84 83       	std	Z+4, r24	; 0x04
   155b6:	85 e0       	ldi	r24, 0x05	; 5
   155b8:	9f e1       	ldi	r25, 0x1F	; 31
   155ba:	a0 e0       	ldi	r26, 0x00	; 0
   155bc:	81 83       	std	Z+1, r24	; 0x01
   155be:	92 83       	std	Z+2, r25	; 0x02
   155c0:	a3 83       	std	Z+3, r26	; 0x03
   155c2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   155c6:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   155ca:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   155ce:	12 82       	std	Z+2, r1	; 0x02
   155d0:	80 e0       	ldi	r24, 0x00	; 0
   155d2:	90 e0       	ldi	r25, 0x00	; 0
   155d4:	28 96       	adiw	r28, 0x08	; 8
   155d6:	e2 e0       	ldi	r30, 0x02	; 2
   155d8:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

000155dc <Clear_Common>:
   155dc:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   155e0:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   155e4:	25 81       	ldd	r18, Z+5	; 0x05
   155e6:	30 e0       	ldi	r19, 0x00	; 0
   155e8:	28 17       	cp	r18, r24
   155ea:	39 07       	cpc	r19, r25
   155ec:	19 f0       	breq	.+6      	; 0x155f4 <Clear_Common+0x18>
   155ee:	0f 97       	sbiw	r24, 0x0f	; 15
   155f0:	99 f4       	brne	.+38     	; 0x15618 <Clear_Common+0x3c>
   155f2:	03 c0       	rjmp	.+6      	; 0x155fa <Clear_Common+0x1e>
   155f4:	2f 30       	cpi	r18, 0x0F	; 15
   155f6:	31 05       	cpc	r19, r1
   155f8:	09 f4       	brne	.+2      	; 0x155fc <Clear_Common+0x20>
   155fa:	15 82       	std	Z+5, r1	; 0x05
   155fc:	16 82       	std	Z+6, r1	; 0x06
   155fe:	17 82       	std	Z+7, r1	; 0x07
   15600:	10 86       	std	Z+8, r1	; 0x08
   15602:	11 86       	std	Z+9, r1	; 0x09
   15604:	12 86       	std	Z+10, r1	; 0x0a
   15606:	13 86       	std	Z+11, r1	; 0x0b
   15608:	14 86       	std	Z+12, r1	; 0x0c
   1560a:	15 86       	std	Z+13, r1	; 0x0d
   1560c:	16 86       	std	Z+14, r1	; 0x0e
   1560e:	11 82       	std	Z+1, r1	; 0x01
   15610:	10 82       	st	Z, r1
   15612:	14 82       	std	Z+4, r1	; 0x04
   15614:	13 82       	std	Z+3, r1	; 0x03
   15616:	12 82       	std	Z+2, r1	; 0x02
   15618:	08 95       	ret

0001561a <SS80_init>:
   1561a:	a5 e0       	ldi	r26, 0x05	; 5
   1561c:	b0 e0       	ldi	r27, 0x00	; 0
   1561e:	e3 e1       	ldi	r30, 0x13	; 19
   15620:	fb ea       	ldi	r31, 0xAB	; 171
   15622:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
   15626:	0a ec       	ldi	r16, 0xCA	; 202
   15628:	10 e2       	ldi	r17, 0x20	; 32
   1562a:	cb e0       	ldi	r28, 0x0B	; 11
   1562c:	d0 e0       	ldi	r29, 0x00	; 0
   1562e:	82 e0       	ldi	r24, 0x02	; 2
   15630:	f8 2e       	mov	r15, r24
   15632:	82 ed       	ldi	r24, 0xD2	; 210
   15634:	95 e2       	ldi	r25, 0x25	; 37
   15636:	6c 01       	movw	r12, r24
   15638:	e1 2c       	mov	r14, r1
   1563a:	f8 01       	movw	r30, r16
   1563c:	80 81       	ld	r24, Z
   1563e:	83 30       	cpi	r24, 0x03	; 3
   15640:	29 f5       	brne	.+74     	; 0x1568c <SS80_init+0x72>
   15642:	ce 01       	movw	r24, r28
   15644:	0e 94 86 96 	call	0x12d0c	; 0x12d0c <set_active_device>
   15648:	89 2b       	or	r24, r25
   1564a:	01 f1       	breq	.+64     	; 0x1568c <SS80_init+0x72>
   1564c:	8f e0       	ldi	r24, 0x0F	; 15
   1564e:	90 e0       	ldi	r25, 0x00	; 0
   15650:	c5 df       	rcall	.-118    	; 0x155dc <Clear_Common>
   15652:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   15656:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   1565a:	f2 82       	std	Z+2, r15	; 0x02
   1565c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15660:	85 ff       	sbrs	r24, 5
   15662:	0c c0       	rjmp	.+24     	; 0x1567c <SS80_init+0x62>
   15664:	f8 01       	movw	r30, r16
   15666:	81 81       	ldd	r24, Z+1	; 0x01
   15668:	90 e0       	ldi	r25, 0x00	; 0
   1566a:	ed b7       	in	r30, 0x3d	; 61
   1566c:	fe b7       	in	r31, 0x3e	; 62
   1566e:	95 83       	std	Z+5, r25	; 0x05
   15670:	84 83       	std	Z+4, r24	; 0x04
   15672:	c1 82       	std	Z+1, r12	; 0x01
   15674:	d2 82       	std	Z+2, r13	; 0x02
   15676:	e3 82       	std	Z+3, r14	; 0x03
   15678:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1567c:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   15680:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   15684:	81 81       	ldd	r24, Z+1	; 0x01
   15686:	90 e0       	ldi	r25, 0x00	; 0
   15688:	0e 94 5f 85 	call	0x10abe	; 0x10abe <gpib_disable_PPR>
   1568c:	21 97       	sbiw	r28, 0x01	; 1
   1568e:	0b 52       	subi	r16, 0x2B	; 43
   15690:	11 09       	sbc	r17, r1
   15692:	cf 3f       	cpi	r28, 0xFF	; 255
   15694:	ff ef       	ldi	r31, 0xFF	; 255
   15696:	df 07       	cpc	r29, r31
   15698:	81 f6       	brne	.-96     	; 0x1563a <SS80_init+0x20>
   1569a:	cd b7       	in	r28, 0x3d	; 61
   1569c:	de b7       	in	r29, 0x3e	; 62
   1569e:	25 96       	adiw	r28, 0x05	; 5
   156a0:	e8 e0       	ldi	r30, 0x08	; 8
   156a2:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

000156a6 <SS80_Channel_Independent_Clear>:
   156a6:	9a df       	rcall	.-204    	; 0x155dc <Clear_Common>
   156a8:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   156ac:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   156b0:	81 81       	ldd	r24, Z+1	; 0x01
   156b2:	90 e0       	ldi	r25, 0x00	; 0
   156b4:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
   156b8:	80 e0       	ldi	r24, 0x00	; 0
   156ba:	90 e0       	ldi	r25, 0x00	; 0
   156bc:	08 95       	ret

000156be <SS80_Universal_Device_Clear>:
   156be:	8f e0       	ldi	r24, 0x0F	; 15
   156c0:	90 e0       	ldi	r25, 0x00	; 0
   156c2:	8c df       	rcall	.-232    	; 0x155dc <Clear_Common>
   156c4:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   156c8:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   156cc:	81 81       	ldd	r24, Z+1	; 0x01
   156ce:	90 e0       	ldi	r25, 0x00	; 0
   156d0:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
   156d4:	80 e0       	ldi	r24, 0x00	; 0
   156d6:	90 e0       	ldi	r25, 0x00	; 0
   156d8:	08 95       	ret

000156da <SS80_Selected_Device_Clear>:
   156da:	cf 93       	push	r28
   156dc:	df 93       	push	r29
   156de:	00 d0       	rcall	.+0      	; 0x156e0 <SS80_Selected_Device_Clear+0x6>
   156e0:	1f 92       	push	r1
   156e2:	ec 01       	movw	r28, r24
   156e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   156e8:	85 ff       	sbrs	r24, 5
   156ea:	0a c0       	rjmp	.+20     	; 0x15700 <SS80_Selected_Device_Clear+0x26>
   156ec:	89 ef       	ldi	r24, 0xF9	; 249
   156ee:	9e e1       	ldi	r25, 0x1E	; 30
   156f0:	a0 e0       	ldi	r26, 0x00	; 0
   156f2:	ed b7       	in	r30, 0x3d	; 61
   156f4:	fe b7       	in	r31, 0x3e	; 62
   156f6:	81 83       	std	Z+1, r24	; 0x01
   156f8:	92 83       	std	Z+2, r25	; 0x02
   156fa:	a3 83       	std	Z+3, r26	; 0x03
   156fc:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   15700:	ce 01       	movw	r24, r28
   15702:	6c df       	rcall	.-296    	; 0x155dc <Clear_Common>
   15704:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   15708:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   1570c:	81 81       	ldd	r24, Z+1	; 0x01
   1570e:	90 e0       	ldi	r25, 0x00	; 0
   15710:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
   15714:	80 e0       	ldi	r24, 0x00	; 0
   15716:	90 e0       	ldi	r25, 0x00	; 0
   15718:	cd b7       	in	r28, 0x3d	; 61
   1571a:	de b7       	in	r29, 0x3e	; 62
   1571c:	23 96       	adiw	r28, 0x03	; 3
   1571e:	e2 e0       	ldi	r30, 0x02	; 2
   15720:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00015724 <SS80_Amigo_Clear>:
   15724:	a6 e0       	ldi	r26, 0x06	; 6
   15726:	b0 e0       	ldi	r27, 0x00	; 0
   15728:	e8 e9       	ldi	r30, 0x98	; 152
   1572a:	fb ea       	ldi	r31, 0xAB	; 171
   1572c:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
   15730:	1d 82       	std	Y+5, r1	; 0x05
   15732:	1c 82       	std	Y+4, r1	; 0x04
   15734:	ae 01       	movw	r20, r28
   15736:	4c 5f       	subi	r20, 0xFC	; 252
   15738:	5f 4f       	sbci	r21, 0xFF	; 255
   1573a:	61 e0       	ldi	r22, 0x01	; 1
   1573c:	70 e0       	ldi	r23, 0x00	; 0
   1573e:	ce 01       	movw	r24, r28
   15740:	06 96       	adiw	r24, 0x06	; 6
   15742:	0e 94 d6 89 	call	0x113ac	; 0x113ac <gpib_read_str>
   15746:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1574a:	01 97       	sbiw	r24, 0x01	; 1
   1574c:	89 f0       	breq	.+34     	; 0x15770 <SS80_Amigo_Clear+0x4c>
   1574e:	20 ff       	sbrs	r18, 0
   15750:	0a c0       	rjmp	.+20     	; 0x15766 <SS80_Amigo_Clear+0x42>
   15752:	86 ee       	ldi	r24, 0xE6	; 230
   15754:	9e e1       	ldi	r25, 0x1E	; 30
   15756:	a0 e0       	ldi	r26, 0x00	; 0
   15758:	ed b7       	in	r30, 0x3d	; 61
   1575a:	fe b7       	in	r31, 0x3e	; 62
   1575c:	81 83       	std	Z+1, r24	; 0x01
   1575e:	92 83       	std	Z+2, r25	; 0x02
   15760:	a3 83       	std	Z+3, r26	; 0x03
   15762:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   15766:	8c 81       	ldd	r24, Y+4	; 0x04
   15768:	9d 81       	ldd	r25, Y+5	; 0x05
   1576a:	88 27       	eor	r24, r24
   1576c:	90 7d       	andi	r25, 0xD0	; 208
   1576e:	19 c0       	rjmp	.+50     	; 0x157a2 <SS80_Amigo_Clear+0x7e>
   15770:	25 ff       	sbrs	r18, 5
   15772:	0a c0       	rjmp	.+20     	; 0x15788 <SS80_Amigo_Clear+0x64>
   15774:	87 ed       	ldi	r24, 0xD7	; 215
   15776:	9e e1       	ldi	r25, 0x1E	; 30
   15778:	a0 e0       	ldi	r26, 0x00	; 0
   1577a:	ed b7       	in	r30, 0x3d	; 61
   1577c:	fe b7       	in	r31, 0x3e	; 62
   1577e:	81 83       	std	Z+1, r24	; 0x01
   15780:	92 83       	std	Z+2, r25	; 0x02
   15782:	a3 83       	std	Z+3, r26	; 0x03
   15784:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   15788:	8f e0       	ldi	r24, 0x0F	; 15
   1578a:	90 e0       	ldi	r25, 0x00	; 0
   1578c:	27 df       	rcall	.-434    	; 0x155dc <Clear_Common>
   1578e:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   15792:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   15796:	81 81       	ldd	r24, Z+1	; 0x01
   15798:	90 e0       	ldi	r25, 0x00	; 0
   1579a:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
   1579e:	80 e0       	ldi	r24, 0x00	; 0
   157a0:	90 e0       	ldi	r25, 0x00	; 0
   157a2:	26 96       	adiw	r28, 0x06	; 6
   157a4:	e2 e0       	ldi	r30, 0x02	; 2
   157a6:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

000157aa <SS80_Cancel>:
   157aa:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   157ae:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   157b2:	11 82       	std	Z+1, r1	; 0x01
   157b4:	10 82       	st	Z, r1
   157b6:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   157ba:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   157be:	81 81       	ldd	r24, Z+1	; 0x01
   157c0:	90 e0       	ldi	r25, 0x00	; 0
   157c2:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
   157c6:	80 e0       	ldi	r24, 0x00	; 0
   157c8:	90 e0       	ldi	r25, 0x00	; 0
   157ca:	08 95       	ret

000157cc <SS80_Transparent_State>:
   157cc:	a9 e0       	ldi	r26, 0x09	; 9
   157ce:	b0 e0       	ldi	r27, 0x00	; 0
   157d0:	ec ee       	ldi	r30, 0xEC	; 236
   157d2:	fb ea       	ldi	r31, 0xAB	; 171
   157d4:	0c 94 46 e3 	jmp	0x1c68c	; 0x1c68c <__prologue_saves__+0x10>
   157d8:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   157dc:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   157e0:	81 81       	ldd	r24, Z+1	; 0x01
   157e2:	90 e0       	ldi	r25, 0x00	; 0
   157e4:	0e 94 5f 85 	call	0x10abe	; 0x10abe <gpib_disable_PPR>
   157e8:	80 e0       	ldi	r24, 0x00	; 0
   157ea:	91 e0       	ldi	r25, 0x01	; 1
   157ec:	99 87       	std	Y+9, r25	; 0x09
   157ee:	88 87       	std	Y+8, r24	; 0x08
   157f0:	ae 01       	movw	r20, r28
   157f2:	48 5f       	subi	r20, 0xF8	; 248
   157f4:	5f 4f       	sbci	r21, 0xFF	; 255
   157f6:	60 e0       	ldi	r22, 0x00	; 0
   157f8:	72 e0       	ldi	r23, 0x02	; 2
   157fa:	87 ee       	ldi	r24, 0xE7	; 231
   157fc:	9c e1       	ldi	r25, 0x1C	; 28
   157fe:	0e 94 d6 89 	call	0x113ac	; 0x113ac <gpib_read_str>
   15802:	7c 01       	movw	r14, r24
   15804:	88 85       	ldd	r24, Y+8	; 0x08
   15806:	99 85       	ldd	r25, Y+9	; 0x09
   15808:	9c 01       	movw	r18, r24
   1580a:	22 27       	eor	r18, r18
   1580c:	30 7d       	andi	r19, 0xD0	; 208
   1580e:	23 2b       	or	r18, r19
   15810:	79 f0       	breq	.+30     	; 0x15830 <SS80_Transparent_State+0x64>
   15812:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15816:	80 ff       	sbrs	r24, 0
   15818:	da c0       	rjmp	.+436    	; 0x159ce <SS80_Transparent_State+0x202>
   1581a:	86 e7       	ldi	r24, 0x76	; 118
   1581c:	90 e2       	ldi	r25, 0x20	; 32
   1581e:	a0 e0       	ldi	r26, 0x00	; 0
   15820:	ed b7       	in	r30, 0x3d	; 61
   15822:	fe b7       	in	r31, 0x3e	; 62
   15824:	81 83       	std	Z+1, r24	; 0x01
   15826:	92 83       	std	Z+2, r25	; 0x02
   15828:	a3 83       	std	Z+3, r26	; 0x03
   1582a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1582e:	cf c0       	rjmp	.+414    	; 0x159ce <SS80_Transparent_State+0x202>
   15830:	e1 14       	cp	r14, r1
   15832:	f1 04       	cpc	r15, r1
   15834:	09 f4       	brne	.+2      	; 0x15838 <SS80_Transparent_State+0x6c>
   15836:	d0 c0       	rjmp	.+416    	; 0x159d8 <SS80_Transparent_State+0x20c>
   15838:	90 fd       	sbrc	r25, 0
   1583a:	0e c0       	rjmp	.+28     	; 0x15858 <SS80_Transparent_State+0x8c>
   1583c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15840:	80 ff       	sbrs	r24, 0
   15842:	0a c0       	rjmp	.+20     	; 0x15858 <SS80_Transparent_State+0x8c>
   15844:	8d e5       	ldi	r24, 0x5D	; 93
   15846:	90 e2       	ldi	r25, 0x20	; 32
   15848:	a0 e0       	ldi	r26, 0x00	; 0
   1584a:	ed b7       	in	r30, 0x3d	; 61
   1584c:	fe b7       	in	r31, 0x3e	; 62
   1584e:	81 83       	std	Z+1, r24	; 0x01
   15850:	92 83       	std	Z+2, r25	; 0x02
   15852:	a3 83       	std	Z+3, r26	; 0x03
   15854:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   15858:	87 ee       	ldi	r24, 0xE7	; 231
   1585a:	a8 2e       	mov	r10, r24
   1585c:	8c e1       	ldi	r24, 0x1C	; 28
   1585e:	b8 2e       	mov	r11, r24
   15860:	00 e0       	ldi	r16, 0x00	; 0
   15862:	10 e0       	ldi	r17, 0x00	; 0
   15864:	0e 15       	cp	r16, r14
   15866:	1f 05       	cpc	r17, r15
   15868:	0c f0       	brlt	.+2      	; 0x1586c <SS80_Transparent_State+0xa0>
   1586a:	9c c0       	rjmp	.+312    	; 0x159a4 <SS80_Transparent_State+0x1d8>
   1586c:	68 01       	movw	r12, r16
   1586e:	ff ef       	ldi	r31, 0xFF	; 255
   15870:	cf 1a       	sub	r12, r31
   15872:	df 0a       	sbc	r13, r31
   15874:	f5 01       	movw	r30, r10
   15876:	81 91       	ld	r24, Z+
   15878:	5f 01       	movw	r10, r30
   1587a:	28 2f       	mov	r18, r24
   1587c:	30 e0       	ldi	r19, 0x00	; 0
   1587e:	a9 01       	movw	r20, r18
   15880:	40 52       	subi	r20, 0x20	; 32
   15882:	51 09       	sbc	r21, r1
   15884:	40 31       	cpi	r20, 0x10	; 16
   15886:	51 05       	cpc	r21, r1
   15888:	20 f4       	brcc	.+8      	; 0x15892 <SS80_Transparent_State+0xc6>
   1588a:	80 52       	subi	r24, 0x20	; 32
   1588c:	8c d9       	rcall	.-3304   	; 0x14ba6 <SS80_Check_Unit>
   1588e:	86 01       	movw	r16, r12
   15890:	e9 cf       	rjmp	.-46     	; 0x15864 <SS80_Transparent_State+0x98>
   15892:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15896:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1589a:	21 30       	cpi	r18, 0x01	; 1
   1589c:	31 05       	cpc	r19, r1
   1589e:	c9 f4       	brne	.+50     	; 0x158d2 <SS80_Transparent_State+0x106>
   158a0:	0e 5f       	subi	r16, 0xFE	; 254
   158a2:	1f 4f       	sbci	r17, 0xFF	; 255
   158a4:	80 73       	andi	r24, 0x30	; 48
   158a6:	99 27       	eor	r25, r25
   158a8:	89 2b       	or	r24, r25
   158aa:	51 f0       	breq	.+20     	; 0x158c0 <SS80_Transparent_State+0xf4>
   158ac:	88 e3       	ldi	r24, 0x38	; 56
   158ae:	90 e2       	ldi	r25, 0x20	; 32
   158b0:	a0 e0       	ldi	r26, 0x00	; 0
   158b2:	ed b7       	in	r30, 0x3d	; 61
   158b4:	fe b7       	in	r31, 0x3e	; 62
   158b6:	81 83       	std	Z+1, r24	; 0x01
   158b8:	92 83       	std	Z+2, r25	; 0x02
   158ba:	a3 83       	std	Z+3, r26	; 0x03
   158bc:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   158c0:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   158c4:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   158c8:	81 81       	ldd	r24, Z+1	; 0x01
   158ca:	90 e0       	ldi	r25, 0x00	; 0
   158cc:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
   158d0:	69 c0       	rjmp	.+210    	; 0x159a4 <SS80_Transparent_State+0x1d8>
   158d2:	22 30       	cpi	r18, 0x02	; 2
   158d4:	31 05       	cpc	r19, r1
   158d6:	51 f4       	brne	.+20     	; 0x158ec <SS80_Transparent_State+0x120>
   158d8:	0b 5f       	subi	r16, 0xFB	; 251
   158da:	1f 4f       	sbci	r17, 0xFF	; 255
   158dc:	80 73       	andi	r24, 0x30	; 48
   158de:	99 27       	eor	r25, r25
   158e0:	89 2b       	or	r24, r25
   158e2:	09 f4       	brne	.+2      	; 0x158e6 <SS80_Transparent_State+0x11a>
   158e4:	5f c0       	rjmp	.+190    	; 0x159a4 <SS80_Transparent_State+0x1d8>
   158e6:	8b e1       	ldi	r24, 0x1B	; 27
   158e8:	90 e2       	ldi	r25, 0x20	; 32
   158ea:	0c c0       	rjmp	.+24     	; 0x15904 <SS80_Transparent_State+0x138>
   158ec:	23 30       	cpi	r18, 0x03	; 3
   158ee:	31 05       	cpc	r19, r1
   158f0:	91 f4       	brne	.+36     	; 0x15916 <SS80_Transparent_State+0x14a>
   158f2:	0b 5f       	subi	r16, 0xFB	; 251
   158f4:	1f 4f       	sbci	r17, 0xFF	; 255
   158f6:	80 73       	andi	r24, 0x30	; 48
   158f8:	99 27       	eor	r25, r25
   158fa:	89 2b       	or	r24, r25
   158fc:	09 f4       	brne	.+2      	; 0x15900 <SS80_Transparent_State+0x134>
   158fe:	52 c0       	rjmp	.+164    	; 0x159a4 <SS80_Transparent_State+0x1d8>
   15900:	8d ef       	ldi	r24, 0xFD	; 253
   15902:	9f e1       	ldi	r25, 0x1F	; 31
   15904:	a0 e0       	ldi	r26, 0x00	; 0
   15906:	ed b7       	in	r30, 0x3d	; 61
   15908:	fe b7       	in	r31, 0x3e	; 62
   1590a:	81 83       	std	Z+1, r24	; 0x01
   1590c:	92 83       	std	Z+2, r25	; 0x02
   1590e:	a3 83       	std	Z+3, r26	; 0x03
   15910:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   15914:	47 c0       	rjmp	.+142    	; 0x159a4 <SS80_Transparent_State+0x1d8>
   15916:	28 30       	cpi	r18, 0x08	; 8
   15918:	31 05       	cpc	r19, r1
   1591a:	e1 f4       	brne	.+56     	; 0x15954 <SS80_Transparent_State+0x188>
   1591c:	85 ff       	sbrs	r24, 5
   1591e:	12 c0       	rjmp	.+36     	; 0x15944 <SS80_Transparent_State+0x178>
   15920:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   15924:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   15928:	85 81       	ldd	r24, Z+5	; 0x05
   1592a:	90 e0       	ldi	r25, 0x00	; 0
   1592c:	ed b7       	in	r30, 0x3d	; 61
   1592e:	fe b7       	in	r31, 0x3e	; 62
   15930:	95 83       	std	Z+5, r25	; 0x05
   15932:	84 83       	std	Z+4, r24	; 0x04
   15934:	86 ed       	ldi	r24, 0xD6	; 214
   15936:	9f e1       	ldi	r25, 0x1F	; 31
   15938:	a0 e0       	ldi	r26, 0x00	; 0
   1593a:	81 83       	std	Z+1, r24	; 0x01
   1593c:	92 83       	std	Z+2, r25	; 0x02
   1593e:	a3 83       	std	Z+3, r26	; 0x03
   15940:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   15944:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   15948:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   1594c:	85 81       	ldd	r24, Z+5	; 0x05
   1594e:	90 e0       	ldi	r25, 0x00	; 0
   15950:	aa de       	rcall	.-684    	; 0x156a6 <SS80_Channel_Independent_Clear>
   15952:	44 c0       	rjmp	.+136    	; 0x159dc <SS80_Transparent_State+0x210>
   15954:	29 30       	cpi	r18, 0x09	; 9
   15956:	31 05       	cpc	r19, r1
   15958:	b1 f4       	brne	.+44     	; 0x15986 <SS80_Transparent_State+0x1ba>
   1595a:	85 ff       	sbrs	r24, 5
   1595c:	12 c0       	rjmp	.+36     	; 0x15982 <SS80_Transparent_State+0x1b6>
   1595e:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   15962:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   15966:	85 81       	ldd	r24, Z+5	; 0x05
   15968:	90 e0       	ldi	r25, 0x00	; 0
   1596a:	ed b7       	in	r30, 0x3d	; 61
   1596c:	fe b7       	in	r31, 0x3e	; 62
   1596e:	95 83       	std	Z+5, r25	; 0x05
   15970:	84 83       	std	Z+4, r24	; 0x04
   15972:	82 ec       	ldi	r24, 0xC2	; 194
   15974:	9f e1       	ldi	r25, 0x1F	; 31
   15976:	a0 e0       	ldi	r26, 0x00	; 0
   15978:	81 83       	std	Z+1, r24	; 0x01
   1597a:	92 83       	std	Z+2, r25	; 0x02
   1597c:	a3 83       	std	Z+3, r26	; 0x03
   1597e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   15982:	13 df       	rcall	.-474    	; 0x157aa <SS80_Cancel>
   15984:	2b c0       	rjmp	.+86     	; 0x159dc <SS80_Transparent_State+0x210>
   15986:	80 ff       	sbrs	r24, 0
   15988:	22 c0       	rjmp	.+68     	; 0x159ce <SS80_Transparent_State+0x202>
   1598a:	ed b7       	in	r30, 0x3d	; 61
   1598c:	fe b7       	in	r31, 0x3e	; 62
   1598e:	35 83       	std	Z+5, r19	; 0x05
   15990:	24 83       	std	Z+4, r18	; 0x04
   15992:	82 ea       	ldi	r24, 0xA2	; 162
   15994:	9f e1       	ldi	r25, 0x1F	; 31
   15996:	a0 e0       	ldi	r26, 0x00	; 0
   15998:	81 83       	std	Z+1, r24	; 0x01
   1599a:	92 83       	std	Z+2, r25	; 0x02
   1599c:	a3 83       	std	Z+3, r26	; 0x03
   1599e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   159a2:	86 01       	movw	r16, r12
   159a4:	0e 15       	cp	r16, r14
   159a6:	1f 05       	cpc	r17, r15
   159a8:	91 f0       	breq	.+36     	; 0x159ce <SS80_Transparent_State+0x202>
   159aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159ae:	80 ff       	sbrs	r24, 0
   159b0:	0e c0       	rjmp	.+28     	; 0x159ce <SS80_Transparent_State+0x202>
   159b2:	ed b7       	in	r30, 0x3d	; 61
   159b4:	fe b7       	in	r31, 0x3e	; 62
   159b6:	f7 82       	std	Z+7, r15	; 0x07
   159b8:	e6 82       	std	Z+6, r14	; 0x06
   159ba:	15 83       	std	Z+5, r17	; 0x05
   159bc:	04 83       	std	Z+4, r16	; 0x04
   159be:	86 e6       	ldi	r24, 0x66	; 102
   159c0:	9f e1       	ldi	r25, 0x1F	; 31
   159c2:	a0 e0       	ldi	r26, 0x00	; 0
   159c4:	81 83       	std	Z+1, r24	; 0x01
   159c6:	92 83       	std	Z+2, r25	; 0x02
   159c8:	a3 83       	std	Z+3, r26	; 0x03
   159ca:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   159ce:	88 85       	ldd	r24, Y+8	; 0x08
   159d0:	99 85       	ldd	r25, Y+9	; 0x09
   159d2:	88 27       	eor	r24, r24
   159d4:	90 7d       	andi	r25, 0xD0	; 208
   159d6:	02 c0       	rjmp	.+4      	; 0x159dc <SS80_Transparent_State+0x210>
   159d8:	80 e0       	ldi	r24, 0x00	; 0
   159da:	90 e0       	ldi	r25, 0x00	; 0
   159dc:	29 96       	adiw	r28, 0x09	; 9
   159de:	ea e0       	ldi	r30, 0x0A	; 10
   159e0:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__epilogue_restores__+0x10>

000159e4 <SS80_error_return>:
/// @return  0 on send
/// @return GPIB flags on send error
/// @see gpib.h _FLAGS defines for a full list.

int SS80_error_return( void )
{
   159e4:	a6 e0       	ldi	r26, 0x06	; 6
   159e6:	b0 e0       	ldi	r27, 0x00	; 0
   159e8:	e8 ef       	ldi	r30, 0xF8	; 248
   159ea:	fc ea       	ldi	r31, 0xAC	; 172
   159ec:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
    uint8_t tmp[1];
    uint16_t status = EOI_FLAG;
   159f0:	80 e0       	ldi	r24, 0x00	; 0
   159f2:	91 e0       	ldi	r25, 0x01	; 1
   159f4:	9d 83       	std	Y+5, r25	; 0x05
   159f6:	8c 83       	std	Y+4, r24	; 0x04

    SS80s->qstat = 1;
   159f8:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   159fc:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   15a00:	81 e0       	ldi	r24, 0x01	; 1
   15a02:	82 83       	std	Z+2, r24	; 0x02
    tmp[0] = SS80s->qstat;
   15a04:	8e 83       	std	Y+6, r24	; 0x06

    status = EOI_FLAG;
    if( gpib_write_str(tmp,sizeof(tmp), &status) != sizeof(tmp))
   15a06:	ae 01       	movw	r20, r28
   15a08:	4c 5f       	subi	r20, 0xFC	; 252
   15a0a:	5f 4f       	sbci	r21, 0xFF	; 255
   15a0c:	61 e0       	ldi	r22, 0x01	; 1
   15a0e:	70 e0       	ldi	r23, 0x00	; 0
   15a10:	ce 01       	movw	r24, r28
   15a12:	06 96       	adiw	r24, 0x06	; 6
   15a14:	0e 94 78 8a 	call	0x114f0	; 0x114f0 <gpib_write_str>
   15a18:	01 97       	sbiw	r24, 0x01	; 1
   15a1a:	99 f0       	breq	.+38     	; 0x15a42 <SS80_error_return+0x5e>
    {
        if(debuglevel & GPIB_ERR)
   15a1c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a20:	80 ff       	sbrs	r24, 0
   15a22:	0a c0       	rjmp	.+20     	; 0x15a38 <SS80_error_return+0x54>
            printf("[GPIB Error Return - Write ERROR]\n");
   15a24:	84 eb       	ldi	r24, 0xB4	; 180
   15a26:	9e e1       	ldi	r25, 0x1E	; 30
   15a28:	a0 e0       	ldi	r26, 0x00	; 0
   15a2a:	ed b7       	in	r30, 0x3d	; 61
   15a2c:	fe b7       	in	r31, 0x3e	; 62
   15a2e:	81 83       	std	Z+1, r24	; 0x01
   15a30:	92 83       	std	Z+2, r25	; 0x02
   15a32:	a3 83       	std	Z+3, r26	; 0x03
   15a34:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        return(status & ERROR_MASK);
   15a38:	8c 81       	ldd	r24, Y+4	; 0x04
   15a3a:	9d 81       	ldd	r25, Y+5	; 0x05
   15a3c:	88 27       	eor	r24, r24
   15a3e:	90 7d       	andi	r25, 0xD0	; 208
   15a40:	07 c0       	rjmp	.+14     	; 0x15a50 <SS80_error_return+0x6c>
    }
    SS80s->qstat = 0;
   15a42:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   15a46:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   15a4a:	12 82       	std	Z+2, r1	; 0x02
    return(0);
   15a4c:	80 e0       	ldi	r24, 0x00	; 0
   15a4e:	90 e0       	ldi	r25, 0x00	; 0
}
   15a50:	26 96       	adiw	r28, 0x06	; 6
   15a52:	e2 e0       	ldi	r30, 0x02	; 2
   15a54:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00015a58 <SS80_locate_and_read>:
///  - Currenly we will only process 2 ** 31 bytes Max in one transfer.
///  - If an seek or I/O error happens then we MUST continue to
/// read and discard the GPIB data until we get an EOI or GPIB error...

int SS80_locate_and_read( void )
{
   15a58:	a7 e1       	ldi	r26, 0x17	; 23
   15a5a:	b0 e0       	ldi	r27, 0x00	; 0
   15a5c:	e2 e3       	ldi	r30, 0x32	; 50
   15a5e:	fd ea       	ldi	r31, 0xAD	; 173
   15a60:	0c 94 3f e3 	jmp	0x1c67e	; 0x1c67e <__prologue_saves__+0x2>
    DWORD total_bytes;
    DWORD count;
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);
   15a64:	60 91 63 19 	lds	r22, 0x1963	; 0x801963 <SS80s>
   15a68:	70 91 64 19 	lds	r23, 0x1964	; 0x801964 <SS80s+0x1>
   15a6c:	fb 01       	movw	r30, r22
   15a6e:	27 81       	ldd	r18, Z+7	; 0x07
   15a70:	30 85       	ldd	r19, Z+8	; 0x08
   15a72:	41 85       	ldd	r20, Z+9	; 0x09
   15a74:	52 85       	ldd	r21, Z+10	; 0x0a

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   15a76:	80 91 65 19 	lds	r24, 0x1965	; 0x801965 <SS80p>
   15a7a:	90 91 66 19 	lds	r25, 0x1966	; 0x801966 <SS80p+0x1>
   15a7e:	fc 01       	movw	r30, r24
   15a80:	a0 89       	ldd	r26, Z+16	; 0x10
   15a82:	b1 89       	ldd	r27, Z+17	; 0x11
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);

    SS80s->qstat = 0;
   15a84:	fb 01       	movw	r30, r22
   15a86:	12 82       	std	Z+2, r1	; 0x02

    status = 0;
   15a88:	1d 86       	std	Y+13, r1	; 0x0d
   15a8a:	1c 86       	std	Y+12, r1	; 0x0c

    if( GPIB_IO_RD(IFC) == 0)
   15a8c:	54 98       	cbi	0x0a, 4	; 10
   15a8e:	4c 99       	sbic	0x09, 4	; 9
   15a90:	03 c0       	rjmp	.+6      	; 0x15a98 <SS80_locate_and_read+0x40>
        return(IFC_FLAG);
   15a92:	80 e0       	ldi	r24, 0x00	; 0
   15a94:	90 e1       	ldi	r25, 0x10	; 16
   15a96:	3e c1       	rjmp	.+636    	; 0x15d14 <SS80_locate_and_read+0x2bc>

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   15a98:	0e 94 1e e3 	call	0x1c63c	; 0x1c63c <__muluhisi3>
   15a9c:	4b 01       	movw	r8, r22
   15a9e:	5c 01       	movw	r10, r24
/// @todo FIXME
///  SS80 4-39
///  For now we will assume the controller will never do this

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15aa0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15aa4:	85 ff       	sbrs	r24, 5
   15aa6:	1a c0       	rjmp	.+52     	; 0x15adc <SS80_locate_and_read+0x84>
        printf("[SS80 Locate and Read at %08lXH(%lXH)]\n",
   15aa8:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   15aac:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   15ab0:	83 85       	ldd	r24, Z+11	; 0x0b
   15ab2:	94 85       	ldd	r25, Z+12	; 0x0c
   15ab4:	a5 85       	ldd	r26, Z+13	; 0x0d
   15ab6:	b6 85       	ldd	r27, Z+14	; 0x0e
   15ab8:	ed b7       	in	r30, 0x3d	; 61
   15aba:	fe b7       	in	r31, 0x3e	; 62
   15abc:	80 87       	std	Z+8, r24	; 0x08
   15abe:	91 87       	std	Z+9, r25	; 0x09
   15ac0:	a2 87       	std	Z+10, r26	; 0x0a
   15ac2:	b3 87       	std	Z+11, r27	; 0x0b
   15ac4:	84 82       	std	Z+4, r8	; 0x04
   15ac6:	95 82       	std	Z+5, r9	; 0x05
   15ac8:	a6 82       	std	Z+6, r10	; 0x06
   15aca:	b7 82       	std	Z+7, r11	; 0x07
   15acc:	8e e8       	ldi	r24, 0x8E	; 142
   15ace:	95 e2       	ldi	r25, 0x25	; 37
   15ad0:	a0 e0       	ldi	r26, 0x00	; 0
   15ad2:	81 83       	std	Z+1, r24	; 0x01
   15ad4:	92 83       	std	Z+2, r25	; 0x02
   15ad6:	a3 83       	std	Z+3, r26	; 0x03
   15ad8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            (long) Address, (long) SS80s->Length);
#endif

    if( SS80_cmd_seek() )
   15adc:	2b db       	rcall	.-2474   	; 0x15134 <SS80_cmd_seek>
   15ade:	89 2b       	or	r24, r25
   15ae0:	09 f0       	breq	.+2      	; 0x15ae4 <SS80_locate_and_read+0x8c>
   15ae2:	ae c0       	rjmp	.+348    	; 0x15c40 <SS80_locate_and_read+0x1e8>
    {
        return(SS80_error_return());
    }

    count = SS80s->Length;
   15ae4:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   15ae8:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   15aec:	43 84       	ldd	r4, Z+11	; 0x0b
   15aee:	54 84       	ldd	r5, Z+12	; 0x0c
   15af0:	65 84       	ldd	r6, Z+13	; 0x0d
   15af2:	76 84       	ldd	r7, Z+14	; 0x0e
    total_bytes = 0;
   15af4:	1e 86       	std	Y+14, r1	; 0x0e
   15af6:	1f 86       	std	Y+15, r1	; 0x0f
   15af8:	18 8a       	std	Y+16, r1	; 0x10
   15afa:	19 8a       	std	Y+17, r1	; 0x11

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
            gpib_timer_elapsed_end("disk READ ");
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   15afc:	80 e7       	ldi	r24, 0x70	; 112
   15afe:	95 e2       	ldi	r25, 0x25	; 37
   15b00:	9c 01       	movw	r18, r24
   15b02:	40 e0       	ldi	r20, 0x00	; 0
   15b04:	2a 8b       	std	Y+18, r18	; 0x12
   15b06:	3b 8b       	std	Y+19, r19	; 0x13
   15b08:	4c 8b       	std	Y+20, r20	; 0x14
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   15b0a:	33 24       	eor	r3, r3
   15b0c:	33 94       	inc	r3
            if(debuglevel & GPIB_ERR)
                printf("[SS80 GPIB Write Error]\n");
   15b0e:	8f e3       	ldi	r24, 0x3F	; 63
   15b10:	95 e2       	ldi	r25, 0x25	; 37
   15b12:	9c 01       	movw	r18, r24
   15b14:	40 e0       	ldi	r20, 0x00	; 0
   15b16:	2d 8b       	std	Y+21, r18	; 0x15
   15b18:	3e 8b       	std	Y+22, r19	; 0x16
   15b1a:	4f 8b       	std	Y+23, r20	; 0x17
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   15b1c:	34 c0       	rjmp	.+104    	; 0x15b86 <SS80_locate_and_read+0x12e>
                printf("[SS80 Disk Read Error]\n");
            return( SS80_error_return() );
        }

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   15b1e:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   15b20:	0e 94 4f 84 	call	0x1089e	; 0x1089e <gpib_timer_elapsed_begin>
#endif
        len = gpib_write_str(gpib_iobuff, chunk, &status);
   15b24:	ae 01       	movw	r20, r28
   15b26:	44 5f       	subi	r20, 0xF4	; 244
   15b28:	5f 4f       	sbci	r21, 0xFF	; 255
   15b2a:	b6 01       	movw	r22, r12
   15b2c:	87 ee       	ldi	r24, 0xE7	; 231
   15b2e:	9c e1       	ldi	r25, 0x1C	; 28
   15b30:	0e 94 78 8a 	call	0x114f0	; 0x114f0 <gpib_write_str>
   15b34:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   15b36:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b3a:	87 ff       	sbrs	r24, 7
   15b3c:	04 c0       	rjmp	.+8      	; 0x15b46 <SS80_locate_and_read+0xee>
            gpib_timer_elapsed_end("GPIB write");
   15b3e:	86 eb       	ldi	r24, 0xB6	; 182
   15b40:	90 e1       	ldi	r25, 0x10	; 16
   15b42:	0e 94 61 84 	call	0x108c2	; 0x108c2 <gpib_timer_elapsed_end>
#endif
        if( len != chunk)
   15b46:	c0 16       	cp	r12, r16
   15b48:	d1 06       	cpc	r13, r17
   15b4a:	09 f0       	breq	.+2      	; 0x15b4e <SS80_locate_and_read+0xf6>
   15b4c:	82 c0       	rjmp	.+260    	; 0x15c52 <SS80_locate_and_read+0x1fa>
                SS80s->Errors |= ERR_GPIB;
                break;
            }
        }

        Address += chunk;
   15b4e:	0d 2c       	mov	r0, r13
   15b50:	00 0c       	add	r0, r0
   15b52:	ee 08       	sbc	r14, r14
   15b54:	ff 08       	sbc	r15, r15
   15b56:	8c 0c       	add	r8, r12
   15b58:	9d 1c       	adc	r9, r13
   15b5a:	ae 1c       	adc	r10, r14
   15b5c:	bf 1c       	adc	r11, r15
        total_bytes = total_bytes + len;
   15b5e:	01 2e       	mov	r0, r17
   15b60:	00 0c       	add	r0, r0
   15b62:	22 0b       	sbc	r18, r18
   15b64:	33 0b       	sbc	r19, r19
   15b66:	8e 85       	ldd	r24, Y+14	; 0x0e
   15b68:	9f 85       	ldd	r25, Y+15	; 0x0f
   15b6a:	a8 89       	ldd	r26, Y+16	; 0x10
   15b6c:	b9 89       	ldd	r27, Y+17	; 0x11
   15b6e:	80 0f       	add	r24, r16
   15b70:	91 1f       	adc	r25, r17
   15b72:	a2 1f       	adc	r26, r18
   15b74:	b3 1f       	adc	r27, r19
   15b76:	8e 87       	std	Y+14, r24	; 0x0e
   15b78:	9f 87       	std	Y+15, r25	; 0x0f
   15b7a:	a8 8b       	std	Y+16, r26	; 0x10
   15b7c:	b9 8b       	std	Y+17, r27	; 0x11
        count -= len;
   15b7e:	40 1a       	sub	r4, r16
   15b80:	51 0a       	sbc	r5, r17
   15b82:	62 0a       	sbc	r6, r18
   15b84:	73 0a       	sbc	r7, r19
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   15b86:	41 14       	cp	r4, r1
   15b88:	51 04       	cpc	r5, r1
   15b8a:	61 04       	cpc	r6, r1
   15b8c:	71 04       	cpc	r7, r1
   15b8e:	09 f4       	brne	.+2      	; 0x15b92 <SS80_locate_and_read+0x13a>
   15b90:	92 c0       	rjmp	.+292    	; 0x15cb6 <SS80_locate_and_read+0x25e>
    {
        if( GPIB_IO_RD(IFC) == 0)
   15b92:	54 98       	cbi	0x0a, 4	; 10
   15b94:	4c 9b       	sbis	0x09, 4	; 9
   15b96:	7d cf       	rjmp	.-262    	; 0x15a92 <SS80_locate_and_read+0x3a>
        {
            return(IFC_FLAG);
        }

        if(count > 256)
   15b98:	31 e0       	ldi	r19, 0x01	; 1
   15b9a:	43 16       	cp	r4, r19
   15b9c:	53 06       	cpc	r5, r19
   15b9e:	61 04       	cpc	r6, r1
   15ba0:	71 04       	cpc	r7, r1
   15ba2:	08 f4       	brcc	.+2      	; 0x15ba6 <SS80_locate_and_read+0x14e>
   15ba4:	4f c0       	rjmp	.+158    	; 0x15c44 <SS80_locate_and_read+0x1ec>
        {
            chunk = 256;
            status = 0;                           // GPIB status
   15ba6:	1d 86       	std	Y+13, r1	; 0x0d
   15ba8:	1c 86       	std	Y+12, r1	; 0x0c
            return(IFC_FLAG);
        }

        if(count > 256)
        {
            chunk = 256;
   15baa:	c1 2c       	mov	r12, r1
   15bac:	dd 24       	eor	r13, r13
   15bae:	d3 94       	inc	r13
            chunk = count;
            status |= EOI_FLAG;                   // GPIB EOI on final charater
        }

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   15bb0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15bb4:	86 fd       	sbrc	r24, 6
            gpib_timer_elapsed_begin();
   15bb6:	0e 94 4f 84 	call	0x1089e	; 0x1089e <gpib_timer_elapsed_begin>
#endif

// FIXME len != chunk
        len = dbf_open_read(SS80p->HEADER.NAME, Address, gpib_iobuff, chunk, &SS80s->Errors);
   15bba:	e0 90 63 19 	lds	r14, 0x1963	; 0x801963 <SS80s>
   15bbe:	f0 90 64 19 	lds	r15, 0x1964	; 0x801964 <SS80s+0x1>
   15bc2:	43 e0       	ldi	r20, 0x03	; 3
   15bc4:	e4 0e       	add	r14, r20
   15bc6:	f1 1c       	adc	r15, r1
   15bc8:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   15bcc:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   15bd0:	86 01       	movw	r16, r12
   15bd2:	27 ee       	ldi	r18, 0xE7	; 231
   15bd4:	3c e1       	ldi	r19, 0x1C	; 28
   15bd6:	b5 01       	movw	r22, r10
   15bd8:	a4 01       	movw	r20, r8
   15bda:	82 81       	ldd	r24, Z+2	; 0x02
   15bdc:	93 81       	ldd	r25, Z+3	; 0x03
   15bde:	0e 94 a1 83 	call	0x10742	; 0x10742 <dbf_open_read>
   15be2:	8c 01       	movw	r16, r24

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   15be4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15be8:	86 ff       	sbrs	r24, 6
   15bea:	04 c0       	rjmp	.+8      	; 0x15bf4 <SS80_locate_and_read+0x19c>
            gpib_timer_elapsed_end("disk READ ");
   15bec:	8b ea       	ldi	r24, 0xAB	; 171
   15bee:	90 e1       	ldi	r25, 0x10	; 16
   15bf0:	0e 94 61 84 	call	0x108c2	; 0x108c2 <gpib_timer_elapsed_end>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15bf4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15bf8:	85 ff       	sbrs	r24, 5
   15bfa:	0c c0       	rjmp	.+24     	; 0x15c14 <SS80_locate_and_read+0x1bc>
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   15bfc:	ed b7       	in	r30, 0x3d	; 61
   15bfe:	fe b7       	in	r31, 0x3e	; 62
   15c00:	15 83       	std	Z+5, r17	; 0x05
   15c02:	04 83       	std	Z+4, r16	; 0x04
   15c04:	2a 89       	ldd	r18, Y+18	; 0x12
   15c06:	3b 89       	ldd	r19, Y+19	; 0x13
   15c08:	4c 89       	ldd	r20, Y+20	; 0x14
   15c0a:	21 83       	std	Z+1, r18	; 0x01
   15c0c:	32 83       	std	Z+2, r19	; 0x02
   15c0e:	43 83       	std	Z+3, r20	; 0x03
   15c10:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   15c14:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
#endif
        if(len < 0)
   15c18:	17 ff       	sbrs	r17, 7
   15c1a:	81 cf       	rjmp	.-254    	; 0x15b1e <SS80_locate_and_read+0xc6>
        {
            SS80s->qstat = 1;
   15c1c:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   15c20:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   15c24:	91 e0       	ldi	r25, 0x01	; 1
   15c26:	92 83       	std	Z+2, r25	; 0x02
/// @return Return
            if(debuglevel & GPIB_ERR)
   15c28:	80 ff       	sbrs	r24, 0
   15c2a:	0a c0       	rjmp	.+20     	; 0x15c40 <SS80_locate_and_read+0x1e8>
                printf("[SS80 Disk Read Error]\n");
   15c2c:	88 e5       	ldi	r24, 0x58	; 88
   15c2e:	95 e2       	ldi	r25, 0x25	; 37
   15c30:	a0 e0       	ldi	r26, 0x00	; 0
   15c32:	ed b7       	in	r30, 0x3d	; 61
   15c34:	fe b7       	in	r31, 0x3e	; 62
   15c36:	81 83       	std	Z+1, r24	; 0x01
   15c38:	92 83       	std	Z+2, r25	; 0x02
   15c3a:	a3 83       	std	Z+3, r26	; 0x03
   15c3c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            return( SS80_error_return() );
   15c40:	d1 de       	rcall	.-606    	; 0x159e4 <SS80_error_return>
   15c42:	68 c0       	rjmp	.+208    	; 0x15d14 <SS80_locate_and_read+0x2bc>
            chunk = 256;
            status = 0;                           // GPIB status
        }
        else
        {
            chunk = count;
   15c44:	62 01       	movw	r12, r4
            status |= EOI_FLAG;                   // GPIB EOI on final charater
   15c46:	8c 85       	ldd	r24, Y+12	; 0x0c
   15c48:	9d 85       	ldd	r25, Y+13	; 0x0d
   15c4a:	91 60       	ori	r25, 0x01	; 1
   15c4c:	9d 87       	std	Y+13, r25	; 0x0d
   15c4e:	8c 87       	std	Y+12, r24	; 0x0c
   15c50:	af cf       	rjmp	.-162    	; 0x15bb0 <SS80_locate_and_read+0x158>
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   15c52:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   15c56:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   15c5a:	32 82       	std	Z+2, r3	; 0x02
            if(debuglevel & GPIB_ERR)
   15c5c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c60:	80 ff       	sbrs	r24, 0
   15c62:	0a c0       	rjmp	.+20     	; 0x15c78 <SS80_locate_and_read+0x220>
                printf("[SS80 GPIB Write Error]\n");
   15c64:	2d 89       	ldd	r18, Y+21	; 0x15
   15c66:	3e 89       	ldd	r19, Y+22	; 0x16
   15c68:	4f 89       	ldd	r20, Y+23	; 0x17
   15c6a:	ed b7       	in	r30, 0x3d	; 61
   15c6c:	fe b7       	in	r31, 0x3e	; 62
   15c6e:	21 83       	std	Z+1, r18	; 0x01
   15c70:	32 83       	std	Z+2, r19	; 0x02
   15c72:	43 83       	std	Z+3, r20	; 0x03
   15c74:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            if(status & ERROR_MASK)
   15c78:	8c 85       	ldd	r24, Y+12	; 0x0c
   15c7a:	9d 85       	ldd	r25, Y+13	; 0x0d
   15c7c:	88 27       	eor	r24, r24
   15c7e:	90 7d       	andi	r25, 0xD0	; 208
   15c80:	89 2b       	or	r24, r25
   15c82:	09 f4       	brne	.+2      	; 0x15c86 <SS80_locate_and_read+0x22e>
   15c84:	64 cf       	rjmp	.-312    	; 0x15b4e <SS80_locate_and_read+0xf6>
            {
                SS80s->Errors |= ERR_GPIB;
   15c86:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   15c8a:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   15c8e:	83 81       	ldd	r24, Z+3	; 0x03
   15c90:	94 81       	ldd	r25, Z+4	; 0x04
   15c92:	80 62       	ori	r24, 0x20	; 32
   15c94:	94 83       	std	Z+4, r25	; 0x04
   15c96:	83 83       	std	Z+3, r24	; 0x03
        count -= len;
    }
///  Note: this should not happen unless we exit on errors above
    if(count > 0)
    {
        if(debuglevel & GPIB_ERR)
   15c98:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c9c:	80 ff       	sbrs	r24, 0
   15c9e:	21 c0       	rjmp	.+66     	; 0x15ce2 <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read DID NOT FINISH]\n");
   15ca0:	8a e1       	ldi	r24, 0x1A	; 26
   15ca2:	95 e2       	ldi	r25, 0x25	; 37
   15ca4:	a0 e0       	ldi	r26, 0x00	; 0
   15ca6:	ed b7       	in	r30, 0x3d	; 61
   15ca8:	fe b7       	in	r31, 0x3e	; 62
   15caa:	81 83       	std	Z+1, r24	; 0x01
   15cac:	92 83       	std	Z+2, r25	; 0x02
   15cae:	a3 83       	std	Z+3, r26	; 0x03
   15cb0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   15cb4:	16 c0       	rjmp	.+44     	; 0x15ce2 <SS80_locate_and_read+0x28a>
    }
    else
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15cb6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15cba:	85 ff       	sbrs	r24, 5
   15cbc:	12 c0       	rjmp	.+36     	; 0x15ce2 <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
   15cbe:	8e 85       	ldd	r24, Y+14	; 0x0e
   15cc0:	9f 85       	ldd	r25, Y+15	; 0x0f
   15cc2:	a8 89       	ldd	r26, Y+16	; 0x10
   15cc4:	b9 89       	ldd	r27, Y+17	; 0x11
   15cc6:	ed b7       	in	r30, 0x3d	; 61
   15cc8:	fe b7       	in	r31, 0x3e	; 62
   15cca:	84 83       	std	Z+4, r24	; 0x04
   15ccc:	95 83       	std	Z+5, r25	; 0x05
   15cce:	a6 83       	std	Z+6, r26	; 0x06
   15cd0:	b7 83       	std	Z+7, r27	; 0x07
   15cd2:	82 ef       	ldi	r24, 0xF2	; 242
   15cd4:	94 e2       	ldi	r25, 0x24	; 36
   15cd6:	a0 e0       	ldi	r26, 0x00	; 0
   15cd8:	81 83       	std	Z+1, r24	; 0x01
   15cda:	92 83       	std	Z+2, r25	; 0x02
   15cdc:	a3 83       	std	Z+3, r26	; 0x03
   15cde:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   15ce2:	00 91 63 19 	lds	r16, 0x1963	; 0x801963 <SS80s>
   15ce6:	10 91 64 19 	lds	r17, 0x1964	; 0x801964 <SS80s+0x1>

/// @brief  SS80 Return current block addresss from bytes
/// @return Block Address
uint32_t SS80_Bytes_to_Blocks(uint32_t bytes)
{
    return(bytes / SS80p->UNIT.BYTES_PER_BLOCK);
   15cea:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   15cee:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   15cf2:	20 89       	ldd	r18, Z+16	; 0x10
   15cf4:	31 89       	ldd	r19, Z+17	; 0x11
   15cf6:	40 e0       	ldi	r20, 0x00	; 0
   15cf8:	50 e0       	ldi	r21, 0x00	; 0
   15cfa:	c5 01       	movw	r24, r10
   15cfc:	b4 01       	movw	r22, r8
   15cfe:	0e 94 d1 e2 	call	0x1c5a2	; 0x1c5a2 <__udivmodsi4>
   15d02:	f8 01       	movw	r30, r16
   15d04:	27 83       	std	Z+7, r18	; 0x07
   15d06:	30 87       	std	Z+8, r19	; 0x08
   15d08:	41 87       	std	Z+9, r20	; 0x09
   15d0a:	52 87       	std	Z+10, r21	; 0x0a
    return (status & ERROR_MASK);
   15d0c:	8c 85       	ldd	r24, Y+12	; 0x0c
   15d0e:	9d 85       	ldd	r25, Y+13	; 0x0d
   15d10:	88 27       	eor	r24, r24
   15d12:	90 7d       	andi	r25, 0xD0	; 208
}
   15d14:	67 96       	adiw	r28, 0x17	; 23
   15d16:	e1 e1       	ldi	r30, 0x11	; 17
   15d18:	0c 94 5b e3 	jmp	0x1c6b6	; 0x1c6b6 <__epilogue_restores__+0x2>

00015d1c <SS80_Execute_State>:
/// - State: EXEC STATE COMMAND
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
   15d1c:	cf 93       	push	r28
   15d1e:	df 93       	push	r29
   15d20:	00 d0       	rcall	.+0      	; 0x15d22 <SS80_Execute_State+0x6>
   15d22:	00 d0       	rcall	.+0      	; 0x15d24 <SS80_Execute_State+0x8>
   15d24:	1f 92       	push	r1
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
   15d26:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   15d2a:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   15d2e:	81 81       	ldd	r24, Z+1	; 0x01
   15d30:	90 e0       	ldi	r25, 0x00	; 0
   15d32:	0e 94 5f 85 	call	0x10abe	; 0x10abe <gpib_disable_PPR>
    switch(SS80s->estate)
   15d36:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   15d3a:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   15d3e:	80 81       	ld	r24, Z
   15d40:	91 81       	ldd	r25, Z+1	; 0x01
   15d42:	82 30       	cpi	r24, 0x02	; 2
   15d44:	91 05       	cpc	r25, r1
   15d46:	89 f0       	breq	.+34     	; 0x15d6a <SS80_Execute_State+0x4e>
   15d48:	3c f4       	brge	.+14     	; 0x15d58 <SS80_Execute_State+0x3c>
   15d4a:	00 97       	sbiw	r24, 0x00	; 0
   15d4c:	81 f1       	breq	.+96     	; 0x15dae <SS80_Execute_State+0x92>
   15d4e:	81 30       	cpi	r24, 0x01	; 1
   15d50:	91 05       	cpc	r25, r1
   15d52:	b9 f4       	brne	.+46     	; 0x15d82 <SS80_Execute_State+0x66>
    {
        case EXEC_IDLE:
            break;
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
   15d54:	81 de       	rcall	.-766    	; 0x15a58 <SS80_locate_and_read>
   15d56:	0d c0       	rjmp	.+26     	; 0x15d72 <SS80_Execute_State+0x56>
int SS80_Execute_State(void)
{
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
    switch(SS80s->estate)
   15d58:	83 30       	cpi	r24, 0x03	; 3
   15d5a:	91 05       	cpc	r25, r1
   15d5c:	41 f0       	breq	.+16     	; 0x15d6e <SS80_Execute_State+0x52>
   15d5e:	84 30       	cpi	r24, 0x04	; 4
   15d60:	91 05       	cpc	r25, r1
   15d62:	79 f4       	brne	.+30     	; 0x15d82 <SS80_Execute_State+0x66>
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   15d64:	0e 94 63 a5 	call	0x14ac6	; 0x14ac6 <SS80_describe>
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_LOCATE_AND_WRITE:
            ret = SS80_locate_and_write();
   15d68:	04 c0       	rjmp	.+8      	; 0x15d72 <SS80_Execute_State+0x56>
   15d6a:	59 da       	rcall	.-2894   	; 0x1521e <SS80_locate_and_write>
   15d6c:	02 c0       	rjmp	.+4      	; 0x15d72 <SS80_Execute_State+0x56>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
   15d6e:	0e 94 e2 a4 	call	0x149c4	; 0x149c4 <SS80_send_status>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   15d72:	ec 01       	movw	r28, r24
            SS80s->estate = EXEC_IDLE;
   15d74:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   15d78:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   15d7c:	11 82       	std	Z+1, r1	; 0x01
   15d7e:	10 82       	st	Z, r1
            break;
   15d80:	18 c0       	rjmp	.+48     	; 0x15db2 <SS80_Execute_State+0x96>
        default:
            if(debuglevel & GPIB_ERR)
   15d82:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15d86:	20 ff       	sbrs	r18, 0
   15d88:	0c c0       	rjmp	.+24     	; 0x15da2 <SS80_Execute_State+0x86>
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
   15d8a:	ed b7       	in	r30, 0x3d	; 61
   15d8c:	fe b7       	in	r31, 0x3e	; 62
   15d8e:	95 83       	std	Z+5, r25	; 0x05
   15d90:	84 83       	std	Z+4, r24	; 0x04
   15d92:	86 eb       	ldi	r24, 0xB6	; 182
   15d94:	95 e2       	ldi	r25, 0x25	; 37
   15d96:	a0 e0       	ldi	r26, 0x00	; 0
   15d98:	81 83       	std	Z+1, r24	; 0x01
   15d9a:	92 83       	std	Z+2, r25	; 0x02
   15d9c:	a3 83       	std	Z+3, r26	; 0x03
   15d9e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            SS80s->estate = EXEC_IDLE;
   15da2:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <SS80s>
   15da6:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <SS80s+0x1>
   15daa:	11 82       	std	Z+1, r1	; 0x01
   15dac:	10 82       	st	Z, r1
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
    int ret = 0;
   15dae:	c0 e0       	ldi	r28, 0x00	; 0
   15db0:	d0 e0       	ldi	r29, 0x00	; 0
            if(debuglevel & GPIB_ERR)
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
            SS80s->estate = EXEC_IDLE;
            break;
    }
    gpib_enable_PPR(SS80p->HEADER.PPR);
   15db2:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   15db6:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   15dba:	81 81       	ldd	r24, Z+1	; 0x01
   15dbc:	90 e0       	ldi	r25, 0x00	; 0
   15dbe:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
    return(ret);
}
   15dc2:	ce 01       	movw	r24, r28
   15dc4:	cd b7       	in	r28, 0x3d	; 61
   15dc6:	de b7       	in	r29, 0x3e	; 62
   15dc8:	25 96       	adiw	r28, 0x05	; 5
   15dca:	e2 e0       	ldi	r30, 0x02	; 2
   15dcc:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00015dd0 <SS80_COMMANDS>:
/// @param[in] ch command.
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
   15dd0:	a9 e0       	ldi	r26, 0x09	; 9
   15dd2:	b0 e0       	ldi	r27, 0x00	; 0
   15dd4:	ee ee       	ldi	r30, 0xEE	; 238
   15dd6:	fe ea       	ldi	r31, 0xAE	; 174
   15dd8:	0c 94 4d e3 	jmp	0x1c69a	; 0x1c69a <__prologue_saves__+0x1e>
   15ddc:	18 2f       	mov	r17, r24
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   15dde:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   15de2:	90 e0       	ldi	r25, 0x00	; 0
   15de4:	0e 94 89 8b 	call	0x11712	; 0x11712 <SS80_is_MTA>
   15de8:	89 2b       	or	r24, r25
   15dea:	19 f0       	breq	.+6      	; 0x15df2 <SS80_COMMANDS+0x22>
    {
        if(ch == 0x65 )
   15dec:	15 36       	cpi	r17, 0x65	; 101
   15dee:	19 f5       	brne	.+70     	; 0x15e36 <SS80_COMMANDS+0x66>
   15df0:	09 c0       	rjmp	.+18     	; 0x15e04 <SS80_COMMANDS+0x34>
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   15df2:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   15df6:	90 e0       	ldi	r25, 0x00	; 0
   15df8:	0e 94 78 8b 	call	0x116f0	; 0x116f0 <SS80_is_MLA>
   15dfc:	ec 01       	movw	r28, r24
   15dfe:	89 2b       	or	r24, r25
   15e00:	a9 f7       	brne	.-22     	; 0x15dec <SS80_COMMANDS+0x1c>
   15e02:	ad c0       	rjmp	.+346    	; 0x15f5e <SS80_COMMANDS+0x18e>
    {
        if(ch == 0x65 )
        {
            if(SS80_is_MLA(listening))
   15e04:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   15e08:	90 e0       	ldi	r25, 0x00	; 0
   15e0a:	0e 94 78 8b 	call	0x116f0	; 0x116f0 <SS80_is_MLA>
   15e0e:	89 2b       	or	r24, r25
   15e10:	09 f4       	brne	.+2      	; 0x15e14 <SS80_COMMANDS+0x44>
   15e12:	a2 c0       	rjmp	.+324    	; 0x15f58 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15e14:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e18:	85 ff       	sbrs	r24, 5
   15e1a:	0a c0       	rjmp	.+20     	; 0x15e30 <SS80_COMMANDS+0x60>
                    printf("[SS80 Command State]\n");
   15e1c:	8e e9       	ldi	r24, 0x9E	; 158
   15e1e:	9e e1       	ldi	r25, 0x1E	; 30
   15e20:	a0 e0       	ldi	r26, 0x00	; 0
   15e22:	ed b7       	in	r30, 0x3d	; 61
   15e24:	fe b7       	in	r31, 0x3e	; 62
   15e26:	81 83       	std	Z+1, r24	; 0x01
   15e28:	92 83       	std	Z+2, r25	; 0x02
   15e2a:	a3 83       	std	Z+3, r26	; 0x03
   15e2c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
                return ( SS80_Command_State() );
   15e30:	0e 94 23 a6 	call	0x14c46	; 0x14c46 <SS80_Command_State>
   15e34:	73 c0       	rjmp	.+230    	; 0x15f1c <SS80_COMMANDS+0x14c>
            }
            return(0);
        }

        if(ch == 0x6e )
   15e36:	1e 36       	cpi	r17, 0x6E	; 110
   15e38:	01 f5       	brne	.+64     	; 0x15e7a <SS80_COMMANDS+0xaa>
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   15e3a:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   15e3e:	90 e0       	ldi	r25, 0x00	; 0
   15e40:	0e 94 78 8b 	call	0x116f0	; 0x116f0 <SS80_is_MLA>
   15e44:	89 2b       	or	r24, r25
   15e46:	79 f0       	breq	.+30     	; 0x15e66 <SS80_COMMANDS+0x96>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15e48:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e4c:	85 ff       	sbrs	r24, 5
   15e4e:	13 c0       	rjmp	.+38     	; 0x15e76 <SS80_COMMANDS+0xa6>
                    printf("[SS00 Execute State]\n");
   15e50:	88 e8       	ldi	r24, 0x88	; 136
   15e52:	9e e1       	ldi	r25, 0x1E	; 30
   15e54:	a0 e0       	ldi	r26, 0x00	; 0
   15e56:	ed b7       	in	r30, 0x3d	; 61
   15e58:	fe b7       	in	r31, 0x3e	; 62
   15e5a:	81 83       	std	Z+1, r24	; 0x01
   15e5c:	92 83       	std	Z+2, r25	; 0x02
   15e5e:	a3 83       	std	Z+3, r26	; 0x03
   15e60:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   15e64:	08 c0       	rjmp	.+16     	; 0x15e76 <SS80_COMMANDS+0xa6>
            return(0);
        }

        if(ch == 0x6e )
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   15e66:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   15e6a:	90 e0       	ldi	r25, 0x00	; 0
   15e6c:	0e 94 89 8b 	call	0x11712	; 0x11712 <SS80_is_MTA>
   15e70:	89 2b       	or	r24, r25
   15e72:	51 f7       	brne	.-44     	; 0x15e48 <SS80_COMMANDS+0x78>
   15e74:	71 c0       	rjmp	.+226    	; 0x15f58 <SS80_COMMANDS+0x188>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
                    printf("[SS00 Execute State]\n");
                return ( SS80_Execute_State() );
   15e76:	52 df       	rcall	.-348    	; 0x15d1c <SS80_Execute_State>
   15e78:	51 c0       	rjmp	.+162    	; 0x15f1c <SS80_COMMANDS+0x14c>

            }
            return(0);
        }

        if(ch == 0x70 )
   15e7a:	10 37       	cpi	r17, 0x70	; 112
   15e7c:	b9 f5       	brne	.+110    	; 0x15eec <SS80_COMMANDS+0x11c>
        {
            if(SS80_is_MTA(talking) )
   15e7e:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   15e82:	90 e0       	ldi	r25, 0x00	; 0
   15e84:	0e 94 89 8b 	call	0x11712	; 0x11712 <SS80_is_MTA>
   15e88:	89 2b       	or	r24, r25
   15e8a:	81 f0       	breq	.+32     	; 0x15eac <SS80_COMMANDS+0xdc>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15e8c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e90:	85 ff       	sbrs	r24, 5
   15e92:	0a c0       	rjmp	.+20     	; 0x15ea8 <SS80_COMMANDS+0xd8>
                    printf("[SS80 Report State]\n");
   15e94:	83 e7       	ldi	r24, 0x73	; 115
   15e96:	9e e1       	ldi	r25, 0x1E	; 30
   15e98:	a0 e0       	ldi	r26, 0x00	; 0
   15e9a:	ed b7       	in	r30, 0x3d	; 61
   15e9c:	fe b7       	in	r31, 0x3e	; 62
   15e9e:	81 83       	std	Z+1, r24	; 0x01
   15ea0:	92 83       	std	Z+2, r25	; 0x02
   15ea2:	a3 83       	std	Z+3, r26	; 0x03
   15ea4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
                return( SS80_Report() );
   15ea8:	4c db       	rcall	.-2408   	; 0x15542 <SS80_Report>
   15eaa:	38 c0       	rjmp	.+112    	; 0x15f1c <SS80_COMMANDS+0x14c>
            }

            if(SS80_is_MLA(listening))
   15eac:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   15eb0:	90 e0       	ldi	r25, 0x00	; 0
   15eb2:	0e 94 78 8b 	call	0x116f0	; 0x116f0 <SS80_is_MLA>
   15eb6:	89 2b       	or	r24, r25
   15eb8:	09 f4       	brne	.+2      	; 0x15ebc <SS80_COMMANDS+0xec>
   15eba:	4e c0       	rjmp	.+156    	; 0x15f58 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15ebc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ec0:	85 ff       	sbrs	r24, 5
   15ec2:	0a c0       	rjmp	.+20     	; 0x15ed8 <SS80_COMMANDS+0x108>
                    printf("[Amigo Clear]\n");
   15ec4:	84 e6       	ldi	r24, 0x64	; 100
   15ec6:	9e e1       	ldi	r25, 0x1E	; 30
   15ec8:	a0 e0       	ldi	r26, 0x00	; 0
   15eca:	ed b7       	in	r30, 0x3d	; 61
   15ecc:	fe b7       	in	r31, 0x3e	; 62
   15ece:	81 83       	std	Z+1, r24	; 0x01
   15ed0:	92 83       	std	Z+2, r25	; 0x02
   15ed2:	a3 83       	std	Z+3, r26	; 0x03
   15ed4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
                gpib_disable_PPR(SS80p->HEADER.PPR);
   15ed8:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <SS80p>
   15edc:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <SS80p+0x1>
   15ee0:	81 81       	ldd	r24, Z+1	; 0x01
   15ee2:	90 e0       	ldi	r25, 0x00	; 0
   15ee4:	0e 94 5f 85 	call	0x10abe	; 0x10abe <gpib_disable_PPR>
                return( SS80_Amigo_Clear() );
   15ee8:	1d dc       	rcall	.-1990   	; 0x15724 <SS80_Amigo_Clear>
   15eea:	18 c0       	rjmp	.+48     	; 0x15f1c <SS80_COMMANDS+0x14c>
            }
            return (0);
        }
        if(ch == 0x72 )
   15eec:	12 37       	cpi	r17, 0x72	; 114
   15eee:	c1 f4       	brne	.+48     	; 0x15f20 <SS80_COMMANDS+0x150>
        {
            if(SS80_is_MLA(listening) )
   15ef0:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   15ef4:	90 e0       	ldi	r25, 0x00	; 0
   15ef6:	0e 94 78 8b 	call	0x116f0	; 0x116f0 <SS80_is_MLA>
   15efa:	89 2b       	or	r24, r25
   15efc:	89 f0       	breq	.+34     	; 0x15f20 <SS80_COMMANDS+0x150>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15efe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f02:	85 ff       	sbrs	r24, 5
   15f04:	0a c0       	rjmp	.+20     	; 0x15f1a <SS80_COMMANDS+0x14a>
                    printf("[SS80 Transparent]\n");
   15f06:	80 e5       	ldi	r24, 0x50	; 80
   15f08:	9e e1       	ldi	r25, 0x1E	; 30
   15f0a:	a0 e0       	ldi	r26, 0x00	; 0
   15f0c:	ed b7       	in	r30, 0x3d	; 61
   15f0e:	fe b7       	in	r31, 0x3e	; 62
   15f10:	81 83       	std	Z+1, r24	; 0x01
   15f12:	92 83       	std	Z+2, r25	; 0x02
   15f14:	a3 83       	std	Z+3, r26	; 0x03
   15f16:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
                return( SS80_Transparent_State() );
   15f1a:	58 dc       	rcall	.-1872   	; 0x157cc <SS80_Transparent_State>
   15f1c:	ec 01       	movw	r28, r24
   15f1e:	3b c0       	rjmp	.+118    	; 0x15f96 <SS80_COMMANDS+0x1c6>
            }
        }
        if(debuglevel & GPIB_ERR)
   15f20:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f24:	80 ff       	sbrs	r24, 0
   15f26:	18 c0       	rjmp	.+48     	; 0x15f58 <SS80_COMMANDS+0x188>
            printf("[SS80 SC Unknown: %02XH, listen:%02XH, talk:%02XH]\n",
   15f28:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   15f2c:	90 e0       	ldi	r25, 0x00	; 0
   15f2e:	ed b7       	in	r30, 0x3d	; 61
   15f30:	fe b7       	in	r31, 0x3e	; 62
   15f32:	91 87       	std	Z+9, r25	; 0x09
   15f34:	80 87       	std	Z+8, r24	; 0x08
   15f36:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   15f3a:	90 e0       	ldi	r25, 0x00	; 0
   15f3c:	97 83       	std	Z+7, r25	; 0x07
   15f3e:	86 83       	std	Z+6, r24	; 0x06
   15f40:	81 2f       	mov	r24, r17
   15f42:	90 e0       	ldi	r25, 0x00	; 0
   15f44:	95 83       	std	Z+5, r25	; 0x05
   15f46:	84 83       	std	Z+4, r24	; 0x04
   15f48:	8c e1       	ldi	r24, 0x1C	; 28
   15f4a:	9e e1       	ldi	r25, 0x1E	; 30
   15f4c:	a0 e0       	ldi	r26, 0x00	; 0
   15f4e:	81 83       	std	Z+1, r24	; 0x01
   15f50:	92 83       	std	Z+2, r25	; 0x02
   15f52:	a3 83       	std	Z+3, r26	; 0x03
   15f54:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
                0xff & ch, 0xff & listening, 0xff & talking);
        return(0);
   15f58:	c0 e0       	ldi	r28, 0x00	; 0
   15f5a:	d0 e0       	ldi	r29, 0x00	; 0
   15f5c:	1c c0       	rjmp	.+56     	; 0x15f96 <SS80_COMMANDS+0x1c6>
    }

    if(debuglevel & GPIB_ERR)
   15f5e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f62:	80 ff       	sbrs	r24, 0
   15f64:	f9 cf       	rjmp	.-14     	; 0x15f58 <SS80_COMMANDS+0x188>
        printf("[SS80 Unknown SC: %02XH, listen:%02XH, talk:%02XH]\n",
   15f66:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   15f6a:	90 e0       	ldi	r25, 0x00	; 0
   15f6c:	ed b7       	in	r30, 0x3d	; 61
   15f6e:	fe b7       	in	r31, 0x3e	; 62
   15f70:	91 87       	std	Z+9, r25	; 0x09
   15f72:	80 87       	std	Z+8, r24	; 0x08
   15f74:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   15f78:	90 e0       	ldi	r25, 0x00	; 0
   15f7a:	97 83       	std	Z+7, r25	; 0x07
   15f7c:	86 83       	std	Z+6, r24	; 0x06
   15f7e:	81 2f       	mov	r24, r17
   15f80:	90 e0       	ldi	r25, 0x00	; 0
   15f82:	95 83       	std	Z+5, r25	; 0x05
   15f84:	84 83       	std	Z+4, r24	; 0x04
   15f86:	88 ee       	ldi	r24, 0xE8	; 232
   15f88:	9d e1       	ldi	r25, 0x1D	; 29
   15f8a:	a0 e0       	ldi	r26, 0x00	; 0
   15f8c:	81 83       	std	Z+1, r24	; 0x01
   15f8e:	92 83       	std	Z+2, r25	; 0x02
   15f90:	a3 83       	std	Z+3, r26	; 0x03
   15f92:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
    return(0);
}
   15f96:	ce 01       	movw	r24, r28
   15f98:	cd b7       	in	r28, 0x3d	; 61
   15f9a:	de b7       	in	r29, 0x3e	; 62
   15f9c:	29 96       	adiw	r28, 0x09	; 9
   15f9e:	e3 e0       	ldi	r30, 0x03	; 3
   15fa0:	0c 94 69 e3 	jmp	0x1c6d2	; 0x1c6d2 <__epilogue_restores__+0x1e>

00015fa4 <amigo_overflow_check>:
    }
/// @todo FIXME
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
    AMIGOs->dsj = 0;
    return(status & ERROR_MASK);
}
   15fa4:	cf 92       	push	r12
   15fa6:	df 92       	push	r13
   15fa8:	ef 92       	push	r14
   15faa:	0f 93       	push	r16
   15fac:	1f 93       	push	r17
   15fae:	cf 93       	push	r28
   15fb0:	df 93       	push	r29
   15fb2:	00 d0       	rcall	.+0      	; 0x15fb4 <amigo_overflow_check+0x10>
   15fb4:	00 d0       	rcall	.+0      	; 0x15fb6 <amigo_overflow_check+0x12>
   15fb6:	1f 92       	push	r1
   15fb8:	ec 01       	movw	r28, r24
   15fba:	8b 01       	movw	r16, r22
   15fbc:	80 e0       	ldi	r24, 0x00	; 0
   15fbe:	90 e0       	ldi	r25, 0x00	; 0
   15fc0:	20 ea       	ldi	r18, 0xA0	; 160
   15fc2:	3d e2       	ldi	r19, 0x2D	; 45
   15fc4:	69 01       	movw	r12, r18
   15fc6:	e1 2c       	mov	r14, r1
   15fc8:	2d 81       	ldd	r18, Y+5	; 0x05
   15fca:	30 e0       	ldi	r19, 0x00	; 0
   15fcc:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   15fd0:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   15fd4:	40 85       	ldd	r20, Z+8	; 0x08
   15fd6:	51 85       	ldd	r21, Z+9	; 0x09
   15fd8:	24 17       	cp	r18, r20
   15fda:	35 07       	cpc	r19, r21
   15fdc:	64 f1       	brlt	.+88     	; 0x16036 <amigo_overflow_check+0x92>
   15fde:	1d 82       	std	Y+5, r1	; 0x05
   15fe0:	2c 81       	ldd	r18, Y+4	; 0x04
   15fe2:	2f 5f       	subi	r18, 0xFF	; 255
   15fe4:	2c 83       	std	Y+4, r18	; 0x04
   15fe6:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   15fea:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   15fee:	2c 81       	ldd	r18, Y+4	; 0x04
   15ff0:	30 e0       	ldi	r19, 0x00	; 0
   15ff2:	42 85       	ldd	r20, Z+10	; 0x0a
   15ff4:	53 85       	ldd	r21, Z+11	; 0x0b
   15ff6:	24 17       	cp	r18, r20
   15ff8:	35 07       	cpc	r19, r21
   15ffa:	34 f3       	brlt	.-52     	; 0x15fc8 <amigo_overflow_check+0x24>
   15ffc:	1c 82       	std	Y+4, r1	; 0x04
   15ffe:	2b 81       	ldd	r18, Y+3	; 0x03
   16000:	2f 5f       	subi	r18, 0xFF	; 255
   16002:	2b 83       	std	Y+3, r18	; 0x03
   16004:	30 e0       	ldi	r19, 0x00	; 0
   16006:	44 85       	ldd	r20, Z+12	; 0x0c
   16008:	55 85       	ldd	r21, Z+13	; 0x0d
   1600a:	24 17       	cp	r18, r20
   1600c:	35 07       	cpc	r19, r21
   1600e:	5c f3       	brlt	.-42     	; 0x15fe6 <amigo_overflow_check+0x42>
   16010:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16014:	80 ff       	sbrs	r24, 0
   16016:	0c c0       	rjmp	.+24     	; 0x16030 <amigo_overflow_check+0x8c>
   16018:	01 15       	cp	r16, r1
   1601a:	11 05       	cpc	r17, r1
   1601c:	49 f0       	breq	.+18     	; 0x16030 <amigo_overflow_check+0x8c>
   1601e:	ed b7       	in	r30, 0x3d	; 61
   16020:	fe b7       	in	r31, 0x3e	; 62
   16022:	15 83       	std	Z+5, r17	; 0x05
   16024:	04 83       	std	Z+4, r16	; 0x04
   16026:	c1 82       	std	Z+1, r12	; 0x01
   16028:	d2 82       	std	Z+2, r13	; 0x02
   1602a:	e3 82       	std	Z+3, r14	; 0x03
   1602c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   16030:	81 e0       	ldi	r24, 0x01	; 1
   16032:	90 e0       	ldi	r25, 0x00	; 0
   16034:	d8 cf       	rjmp	.-80     	; 0x15fe6 <amigo_overflow_check+0x42>
   16036:	0f 90       	pop	r0
   16038:	0f 90       	pop	r0
   1603a:	0f 90       	pop	r0
   1603c:	0f 90       	pop	r0
   1603e:	0f 90       	pop	r0
   16040:	df 91       	pop	r29
   16042:	cf 91       	pop	r28
   16044:	1f 91       	pop	r17
   16046:	0f 91       	pop	r16
   16048:	ef 90       	pop	r14
   1604a:	df 90       	pop	r13
   1604c:	cf 90       	pop	r12
   1604e:	08 95       	ret

00016050 <amigo_chs_to_logical>:
   16050:	a1 e1       	ldi	r26, 0x11	; 17
   16052:	b0 e0       	ldi	r27, 0x00	; 0
   16054:	ee e2       	ldi	r30, 0x2E	; 46
   16056:	f0 eb       	ldi	r31, 0xB0	; 176
   16058:	0c 94 42 e3 	jmp	0x1c684	; 0x1c684 <__prologue_saves__+0x8>
   1605c:	8b 01       	movw	r16, r22
   1605e:	60 91 61 19 	lds	r22, 0x1961	; 0x801961 <AMIGOp>
   16062:	70 91 62 19 	lds	r23, 0x1962	; 0x801962 <AMIGOp+0x1>
   16066:	fb 01       	movw	r30, r22
   16068:	40 85       	ldd	r20, Z+8	; 0x08
   1606a:	51 85       	ldd	r21, Z+9	; 0x09
   1606c:	fc 01       	movw	r30, r24
   1606e:	c4 81       	ldd	r28, Z+4	; 0x04
   16070:	d0 e0       	ldi	r29, 0x00	; 0
   16072:	4c 9f       	mul	r20, r28
   16074:	90 01       	movw	r18, r0
   16076:	4d 9f       	mul	r20, r29
   16078:	30 0d       	add	r19, r0
   1607a:	5c 9f       	mul	r21, r28
   1607c:	30 0d       	add	r19, r0
   1607e:	11 24       	eor	r1, r1
   16080:	49 01       	movw	r8, r18
   16082:	33 0f       	add	r19, r19
   16084:	aa 08       	sbc	r10, r10
   16086:	bb 08       	sbc	r11, r11
   16088:	63 80       	ldd	r6, Z+3	; 0x03
   1608a:	71 2c       	mov	r7, r1
   1608c:	fb 01       	movw	r30, r22
   1608e:	e2 84       	ldd	r14, Z+10	; 0x0a
   16090:	f3 84       	ldd	r15, Z+11	; 0x0b
   16092:	4e 9d       	mul	r20, r14
   16094:	d0 01       	movw	r26, r0
   16096:	4f 9d       	mul	r20, r15
   16098:	b0 0d       	add	r27, r0
   1609a:	5e 9d       	mul	r21, r14
   1609c:	b0 0d       	add	r27, r0
   1609e:	11 24       	eor	r1, r1
   160a0:	a6 9d       	mul	r26, r6
   160a2:	90 01       	movw	r18, r0
   160a4:	a7 9d       	mul	r26, r7
   160a6:	30 0d       	add	r19, r0
   160a8:	b6 9d       	mul	r27, r6
   160aa:	30 0d       	add	r19, r0
   160ac:	11 24       	eor	r1, r1
   160ae:	69 01       	movw	r12, r18
   160b0:	33 0f       	add	r19, r19
   160b2:	ee 08       	sbc	r14, r14
   160b4:	ff 08       	sbc	r15, r15
   160b6:	8c 0c       	add	r8, r12
   160b8:	9d 1c       	adc	r9, r13
   160ba:	ae 1c       	adc	r10, r14
   160bc:	bf 1c       	adc	r11, r15
   160be:	fc 01       	movw	r30, r24
   160c0:	f5 80       	ldd	r15, Z+5	; 0x05
   160c2:	a5 01       	movw	r20, r10
   160c4:	94 01       	movw	r18, r8
   160c6:	2f 0d       	add	r18, r15
   160c8:	31 1d       	adc	r19, r1
   160ca:	41 1d       	adc	r20, r1
   160cc:	51 1d       	adc	r21, r1
   160ce:	fb 01       	movw	r30, r22
   160d0:	a6 81       	ldd	r26, Z+6	; 0x06
   160d2:	b7 81       	ldd	r27, Z+7	; 0x07
   160d4:	0e 94 28 e3 	call	0x1c650	; 0x1c650 <__mulshisi3>
   160d8:	4b 01       	movw	r8, r22
   160da:	5c 01       	movw	r10, r24
   160dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   160e0:	85 ff       	sbrs	r24, 5
   160e2:	22 c0       	rjmp	.+68     	; 0x16128 <amigo_chs_to_logical+0xd8>
   160e4:	8f 2d       	mov	r24, r15
   160e6:	90 e0       	ldi	r25, 0x00	; 0
   160e8:	ed b7       	in	r30, 0x3d	; 61
   160ea:	fe b7       	in	r31, 0x3e	; 62
   160ec:	91 8b       	std	Z+17, r25	; 0x11
   160ee:	80 8b       	std	Z+16, r24	; 0x10
   160f0:	d7 87       	std	Z+15, r29	; 0x0f
   160f2:	c6 87       	std	Z+14, r28	; 0x0e
   160f4:	75 86       	std	Z+13, r7	; 0x0d
   160f6:	64 86       	std	Z+12, r6	; 0x0c
   160f8:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   160fc:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16100:	81 81       	ldd	r24, Z+1	; 0x01
   16102:	90 e0       	ldi	r25, 0x00	; 0
   16104:	ed b7       	in	r30, 0x3d	; 61
   16106:	fe b7       	in	r31, 0x3e	; 62
   16108:	93 87       	std	Z+11, r25	; 0x0b
   1610a:	82 87       	std	Z+10, r24	; 0x0a
   1610c:	86 82       	std	Z+6, r8	; 0x06
   1610e:	97 82       	std	Z+7, r9	; 0x07
   16110:	a0 86       	std	Z+8, r10	; 0x08
   16112:	b1 86       	std	Z+9, r11	; 0x09
   16114:	15 83       	std	Z+5, r17	; 0x05
   16116:	04 83       	std	Z+4, r16	; 0x04
   16118:	8d e4       	ldi	r24, 0x4D	; 77
   1611a:	9d e2       	ldi	r25, 0x2D	; 45
   1611c:	a0 e0       	ldi	r26, 0x00	; 0
   1611e:	81 83       	std	Z+1, r24	; 0x01
   16120:	92 83       	std	Z+2, r25	; 0x02
   16122:	a3 83       	std	Z+3, r26	; 0x03
   16124:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   16128:	c5 01       	movw	r24, r10
   1612a:	b4 01       	movw	r22, r8
   1612c:	cd b7       	in	r28, 0x3d	; 61
   1612e:	de b7       	in	r29, 0x3e	; 62
   16130:	61 96       	adiw	r28, 0x11	; 17
   16132:	ee e0       	ldi	r30, 0x0E	; 14
   16134:	0c 94 5e e3 	jmp	0x1c6bc	; 0x1c6bc <__epilogue_restores__+0x8>

00016138 <amigo_init>:
   16138:	ef 92       	push	r14
   1613a:	ff 92       	push	r15
   1613c:	0f 93       	push	r16
   1613e:	1f 93       	push	r17
   16140:	cf 93       	push	r28
   16142:	df 93       	push	r29
   16144:	0a ec       	ldi	r16, 0xCA	; 202
   16146:	10 e2       	ldi	r17, 0x20	; 32
   16148:	cb e0       	ldi	r28, 0x0B	; 11
   1614a:	d0 e0       	ldi	r29, 0x00	; 0
   1614c:	84 e0       	ldi	r24, 0x04	; 4
   1614e:	f8 2e       	mov	r15, r24
   16150:	92 e0       	ldi	r25, 0x02	; 2
   16152:	e9 2e       	mov	r14, r25
   16154:	d8 01       	movw	r26, r16
   16156:	8c 91       	ld	r24, X
   16158:	81 30       	cpi	r24, 0x01	; 1
   1615a:	31 f5       	brne	.+76     	; 0x161a8 <amigo_init+0x70>
   1615c:	ce 01       	movw	r24, r28
   1615e:	0e 94 86 96 	call	0x12d0c	; 0x12d0c <set_active_device>
   16162:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   16166:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   1616a:	10 82       	st	Z, r1
   1616c:	9f 01       	movw	r18, r30
   1616e:	27 5f       	subi	r18, 0xF7	; 247
   16170:	3f 4f       	sbci	r19, 0xFF	; 255
   16172:	d9 01       	movw	r26, r18
   16174:	8f 2d       	mov	r24, r15
   16176:	1d 92       	st	X+, r1
   16178:	8a 95       	dec	r24
   1617a:	e9 f7       	brne	.-6      	; 0x16176 <amigo_init+0x3e>
   1617c:	2c 5f       	subi	r18, 0xFC	; 252
   1617e:	3f 4f       	sbci	r19, 0xFF	; 255
   16180:	d9 01       	movw	r26, r18
   16182:	8f 2d       	mov	r24, r15
   16184:	1d 92       	st	X+, r1
   16186:	8a 95       	dec	r24
   16188:	e9 f7       	brne	.-6      	; 0x16184 <amigo_init+0x4c>
   1618a:	11 82       	std	Z+1, r1	; 0x01
   1618c:	15 82       	std	Z+5, r1	; 0x05
   1618e:	14 82       	std	Z+4, r1	; 0x04
   16190:	13 82       	std	Z+3, r1	; 0x03
   16192:	e6 82       	std	Z+6, r14	; 0x06
   16194:	10 86       	std	Z+8, r1	; 0x08
   16196:	17 82       	std	Z+7, r1	; 0x07
   16198:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   1619c:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   161a0:	81 81       	ldd	r24, Z+1	; 0x01
   161a2:	90 e0       	ldi	r25, 0x00	; 0
   161a4:	0e 94 5f 85 	call	0x10abe	; 0x10abe <gpib_disable_PPR>
   161a8:	21 97       	sbiw	r28, 0x01	; 1
   161aa:	0b 52       	subi	r16, 0x2B	; 43
   161ac:	11 09       	sbc	r17, r1
   161ae:	cf 3f       	cpi	r28, 0xFF	; 255
   161b0:	af ef       	ldi	r26, 0xFF	; 255
   161b2:	da 07       	cpc	r29, r26
   161b4:	79 f6       	brne	.-98     	; 0x16154 <amigo_init+0x1c>
   161b6:	cd b7       	in	r28, 0x3d	; 61
   161b8:	de b7       	in	r29, 0x3e	; 62
   161ba:	e6 e0       	ldi	r30, 0x06	; 6
   161bc:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

000161c0 <amigo_request_logical_address>:
   161c0:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   161c4:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   161c8:	15 86       	std	Z+13, r1	; 0x0d
   161ca:	83 81       	ldd	r24, Z+3	; 0x03
   161cc:	86 87       	std	Z+14, r24	; 0x0e
   161ce:	84 81       	ldd	r24, Z+4	; 0x04
   161d0:	87 87       	std	Z+15, r24	; 0x0f
   161d2:	85 81       	ldd	r24, Z+5	; 0x05
   161d4:	80 8b       	std	Z+16, r24	; 0x10
   161d6:	80 e0       	ldi	r24, 0x00	; 0
   161d8:	90 e0       	ldi	r25, 0x00	; 0
   161da:	08 95       	ret

000161dc <amigo_request_status>:
   161dc:	00 d0       	rcall	.+0      	; 0x161de <amigo_request_status+0x2>
   161de:	1f 92       	push	r1
   161e0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161e4:	85 ff       	sbrs	r24, 5
   161e6:	0a c0       	rjmp	.+20     	; 0x161fc <amigo_request_status+0x20>
   161e8:	80 e2       	ldi	r24, 0x20	; 32
   161ea:	9e e2       	ldi	r25, 0x2E	; 46
   161ec:	a0 e0       	ldi	r26, 0x00	; 0
   161ee:	ed b7       	in	r30, 0x3d	; 61
   161f0:	fe b7       	in	r31, 0x3e	; 62
   161f2:	81 83       	std	Z+1, r24	; 0x01
   161f4:	92 83       	std	Z+2, r25	; 0x02
   161f6:	a3 83       	std	Z+3, r26	; 0x03
   161f8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   161fc:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   16200:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16204:	11 86       	std	Z+9, r1	; 0x09
   16206:	81 81       	ldd	r24, Z+1	; 0x01
   16208:	82 87       	std	Z+10, r24	; 0x0a
   1620a:	8d e0       	ldi	r24, 0x0D	; 13
   1620c:	83 87       	std	Z+11, r24	; 0x0b
   1620e:	14 86       	std	Z+12, r1	; 0x0c
   16210:	0e 94 13 6f 	call	0xde26	; 0xde26 <mmc_wp_status>
   16214:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   16218:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   1621c:	89 2b       	or	r24, r25
   1621e:	19 f0       	breq	.+6      	; 0x16226 <amigo_request_status+0x4a>
   16220:	84 85       	ldd	r24, Z+12	; 0x0c
   16222:	80 66       	ori	r24, 0x60	; 96
   16224:	84 87       	std	Z+12, r24	; 0x0c
   16226:	86 81       	ldd	r24, Z+6	; 0x06
   16228:	82 30       	cpi	r24, 0x02	; 2
   1622a:	31 f4       	brne	.+12     	; 0x16238 <amigo_request_status+0x5c>
   1622c:	83 e1       	ldi	r24, 0x13	; 19
   1622e:	81 87       	std	Z+9, r24	; 0x09
   16230:	84 85       	ldd	r24, Z+12	; 0x0c
   16232:	88 60       	ori	r24, 0x08	; 8
   16234:	84 87       	std	Z+12, r24	; 0x0c
   16236:	21 c0       	rjmp	.+66     	; 0x1627a <amigo_request_status+0x9e>
   16238:	27 81       	ldd	r18, Z+7	; 0x07
   1623a:	30 85       	ldd	r19, Z+8	; 0x08
   1623c:	21 15       	cp	r18, r1
   1623e:	31 05       	cpc	r19, r1
   16240:	11 f4       	brne	.+4      	; 0x16246 <amigo_request_status+0x6a>
   16242:	81 30       	cpi	r24, 0x01	; 1
   16244:	d1 f4       	brne	.+52     	; 0x1627a <amigo_request_status+0x9e>
   16246:	26 fd       	sbrc	r18, 6
   16248:	0c c0       	rjmp	.+24     	; 0x16262 <amigo_request_status+0x86>
   1624a:	25 ff       	sbrs	r18, 5
   1624c:	03 c0       	rjmp	.+6      	; 0x16254 <amigo_request_status+0x78>
   1624e:	8a e0       	ldi	r24, 0x0A	; 10
   16250:	81 87       	std	Z+9, r24	; 0x09
   16252:	0d c0       	rjmp	.+26     	; 0x1626e <amigo_request_status+0x92>
   16254:	84 85       	ldd	r24, Z+12	; 0x0c
   16256:	24 ff       	sbrs	r18, 4
   16258:	02 c0       	rjmp	.+4      	; 0x1625e <amigo_request_status+0x82>
   1625a:	83 60       	ori	r24, 0x03	; 3
   1625c:	07 c0       	rjmp	.+14     	; 0x1626c <amigo_request_status+0x90>
   1625e:	21 ff       	sbrs	r18, 1
   16260:	02 c0       	rjmp	.+4      	; 0x16266 <amigo_request_status+0x8a>
   16262:	83 e1       	ldi	r24, 0x13	; 19
   16264:	f5 cf       	rjmp	.-22     	; 0x16250 <amigo_request_status+0x74>
   16266:	22 ff       	sbrs	r18, 2
   16268:	02 c0       	rjmp	.+4      	; 0x1626e <amigo_request_status+0x92>
   1626a:	84 60       	ori	r24, 0x04	; 4
   1626c:	84 87       	std	Z+12, r24	; 0x0c
   1626e:	84 85       	ldd	r24, Z+12	; 0x0c
   16270:	80 61       	ori	r24, 0x10	; 16
   16272:	84 87       	std	Z+12, r24	; 0x0c
   16274:	83 85       	ldd	r24, Z+11	; 0x0b
   16276:	80 68       	ori	r24, 0x80	; 128
   16278:	83 87       	std	Z+11, r24	; 0x0b
   1627a:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   1627e:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   16282:	81 81       	ldd	r24, Z+1	; 0x01
   16284:	90 e0       	ldi	r25, 0x00	; 0
   16286:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
   1628a:	80 e0       	ldi	r24, 0x00	; 0
   1628c:	90 e0       	ldi	r25, 0x00	; 0
   1628e:	0f 90       	pop	r0
   16290:	0f 90       	pop	r0
   16292:	0f 90       	pop	r0
   16294:	08 95       	ret

00016296 <amigo_send_logical_address>:
   16296:	a5 e0       	ldi	r26, 0x05	; 5
   16298:	b0 e0       	ldi	r27, 0x00	; 0
   1629a:	e1 e5       	ldi	r30, 0x51	; 81
   1629c:	f1 eb       	ldi	r31, 0xB1	; 177
   1629e:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
   162a2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   162a6:	85 ff       	sbrs	r24, 5
   162a8:	0a c0       	rjmp	.+20     	; 0x162be <amigo_send_logical_address+0x28>
   162aa:	82 e0       	ldi	r24, 0x02	; 2
   162ac:	9e e2       	ldi	r25, 0x2E	; 46
   162ae:	a0 e0       	ldi	r26, 0x00	; 0
   162b0:	ed b7       	in	r30, 0x3d	; 61
   162b2:	fe b7       	in	r31, 0x3e	; 62
   162b4:	81 83       	std	Z+1, r24	; 0x01
   162b6:	92 83       	std	Z+2, r25	; 0x02
   162b8:	a3 83       	std	Z+3, r26	; 0x03
   162ba:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   162be:	80 e0       	ldi	r24, 0x00	; 0
   162c0:	91 e0       	ldi	r25, 0x01	; 1
   162c2:	9d 83       	std	Y+5, r25	; 0x05
   162c4:	8c 83       	std	Y+4, r24	; 0x04
   162c6:	80 91 5f 19 	lds	r24, 0x195F	; 0x80195f <AMIGOs>
   162ca:	90 91 60 19 	lds	r25, 0x1960	; 0x801960 <AMIGOs+0x1>
   162ce:	ae 01       	movw	r20, r28
   162d0:	4c 5f       	subi	r20, 0xFC	; 252
   162d2:	5f 4f       	sbci	r21, 0xFF	; 255
   162d4:	64 e0       	ldi	r22, 0x04	; 4
   162d6:	70 e0       	ldi	r23, 0x00	; 0
   162d8:	0d 96       	adiw	r24, 0x0d	; 13
   162da:	0e 94 78 8a 	call	0x114f0	; 0x114f0 <gpib_write_str>
   162de:	2c 81       	ldd	r18, Y+4	; 0x04
   162e0:	3d 81       	ldd	r19, Y+5	; 0x05
   162e2:	22 27       	eor	r18, r18
   162e4:	30 7d       	andi	r19, 0xD0	; 208
   162e6:	23 2b       	or	r18, r19
   162e8:	11 f4       	brne	.+4      	; 0x162ee <amigo_send_logical_address+0x58>
   162ea:	04 97       	sbiw	r24, 0x04	; 4
   162ec:	c9 f0       	breq	.+50     	; 0x16320 <amigo_send_logical_address+0x8a>
   162ee:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   162f2:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   162f6:	87 81       	ldd	r24, Z+7	; 0x07
   162f8:	90 85       	ldd	r25, Z+8	; 0x08
   162fa:	80 62       	ori	r24, 0x20	; 32
   162fc:	90 87       	std	Z+8, r25	; 0x08
   162fe:	87 83       	std	Z+7, r24	; 0x07
   16300:	81 e0       	ldi	r24, 0x01	; 1
   16302:	86 83       	std	Z+6, r24	; 0x06
   16304:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16308:	80 ff       	sbrs	r24, 0
   1630a:	0a c0       	rjmp	.+20     	; 0x16320 <amigo_send_logical_address+0x8a>
   1630c:	88 ee       	ldi	r24, 0xE8	; 232
   1630e:	9d e2       	ldi	r25, 0x2D	; 45
   16310:	a0 e0       	ldi	r26, 0x00	; 0
   16312:	ed b7       	in	r30, 0x3d	; 61
   16314:	fe b7       	in	r31, 0x3e	; 62
   16316:	81 83       	std	Z+1, r24	; 0x01
   16318:	92 83       	std	Z+2, r25	; 0x02
   1631a:	a3 83       	std	Z+3, r26	; 0x03
   1631c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   16320:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   16324:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   16328:	81 81       	ldd	r24, Z+1	; 0x01
   1632a:	90 e0       	ldi	r25, 0x00	; 0
   1632c:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
   16330:	8c 81       	ldd	r24, Y+4	; 0x04
   16332:	9d 81       	ldd	r25, Y+5	; 0x05
   16334:	88 27       	eor	r24, r24
   16336:	90 7d       	andi	r25, 0xD0	; 208
   16338:	25 96       	adiw	r28, 0x05	; 5
   1633a:	e2 e0       	ldi	r30, 0x02	; 2
   1633c:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00016340 <amigo_send_status>:
   16340:	a5 e0       	ldi	r26, 0x05	; 5
   16342:	b0 e0       	ldi	r27, 0x00	; 0
   16344:	e6 ea       	ldi	r30, 0xA6	; 166
   16346:	f1 eb       	ldi	r31, 0xB1	; 177
   16348:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
   1634c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16350:	85 ff       	sbrs	r24, 5
   16352:	0a c0       	rjmp	.+20     	; 0x16368 <amigo_send_status+0x28>
   16354:	83 ed       	ldi	r24, 0xD3	; 211
   16356:	9d e2       	ldi	r25, 0x2D	; 45
   16358:	a0 e0       	ldi	r26, 0x00	; 0
   1635a:	ed b7       	in	r30, 0x3d	; 61
   1635c:	fe b7       	in	r31, 0x3e	; 62
   1635e:	81 83       	std	Z+1, r24	; 0x01
   16360:	92 83       	std	Z+2, r25	; 0x02
   16362:	a3 83       	std	Z+3, r26	; 0x03
   16364:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   16368:	80 e0       	ldi	r24, 0x00	; 0
   1636a:	91 e0       	ldi	r25, 0x01	; 1
   1636c:	9d 83       	std	Y+5, r25	; 0x05
   1636e:	8c 83       	std	Y+4, r24	; 0x04
   16370:	80 91 5f 19 	lds	r24, 0x195F	; 0x80195f <AMIGOs>
   16374:	90 91 60 19 	lds	r25, 0x1960	; 0x801960 <AMIGOs+0x1>
   16378:	ae 01       	movw	r20, r28
   1637a:	4c 5f       	subi	r20, 0xFC	; 252
   1637c:	5f 4f       	sbci	r21, 0xFF	; 255
   1637e:	64 e0       	ldi	r22, 0x04	; 4
   16380:	70 e0       	ldi	r23, 0x00	; 0
   16382:	09 96       	adiw	r24, 0x09	; 9
   16384:	0e 94 78 8a 	call	0x114f0	; 0x114f0 <gpib_write_str>
   16388:	2c 81       	ldd	r18, Y+4	; 0x04
   1638a:	3d 81       	ldd	r19, Y+5	; 0x05
   1638c:	22 27       	eor	r18, r18
   1638e:	30 7d       	andi	r19, 0xD0	; 208
   16390:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   16394:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16398:	23 2b       	or	r18, r19
   1639a:	11 f4       	brne	.+4      	; 0x163a0 <amigo_send_status+0x60>
   1639c:	04 97       	sbiw	r24, 0x04	; 4
   1639e:	b1 f0       	breq	.+44     	; 0x163cc <amigo_send_status+0x8c>
   163a0:	87 81       	ldd	r24, Z+7	; 0x07
   163a2:	90 85       	ldd	r25, Z+8	; 0x08
   163a4:	80 62       	ori	r24, 0x20	; 32
   163a6:	90 87       	std	Z+8, r25	; 0x08
   163a8:	87 83       	std	Z+7, r24	; 0x07
   163aa:	81 e0       	ldi	r24, 0x01	; 1
   163ac:	86 83       	std	Z+6, r24	; 0x06
   163ae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   163b2:	80 ff       	sbrs	r24, 0
   163b4:	0e c0       	rjmp	.+28     	; 0x163d2 <amigo_send_status+0x92>
   163b6:	89 eb       	ldi	r24, 0xB9	; 185
   163b8:	9d e2       	ldi	r25, 0x2D	; 45
   163ba:	a0 e0       	ldi	r26, 0x00	; 0
   163bc:	ed b7       	in	r30, 0x3d	; 61
   163be:	fe b7       	in	r31, 0x3e	; 62
   163c0:	81 83       	std	Z+1, r24	; 0x01
   163c2:	92 83       	std	Z+2, r25	; 0x02
   163c4:	a3 83       	std	Z+3, r26	; 0x03
   163c6:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   163ca:	03 c0       	rjmp	.+6      	; 0x163d2 <amigo_send_status+0x92>
   163cc:	10 86       	std	Z+8, r1	; 0x08
   163ce:	17 82       	std	Z+7, r1	; 0x07
   163d0:	16 82       	std	Z+6, r1	; 0x06
   163d2:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   163d6:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   163da:	81 81       	ldd	r24, Z+1	; 0x01
   163dc:	90 e0       	ldi	r25, 0x00	; 0
   163de:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
   163e2:	8c 81       	ldd	r24, Y+4	; 0x04
   163e4:	9d 81       	ldd	r25, Y+5	; 0x05
   163e6:	88 27       	eor	r24, r24
   163e8:	90 7d       	andi	r25, 0xD0	; 208
   163ea:	25 96       	adiw	r28, 0x05	; 5
   163ec:	e2 e0       	ldi	r30, 0x02	; 2
   163ee:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

000163f2 <amigo_increment>:
   163f2:	a1 e1       	ldi	r26, 0x11	; 17
   163f4:	b0 e0       	ldi	r27, 0x00	; 0
   163f6:	ef ef       	ldi	r30, 0xFF	; 255
   163f8:	f1 eb       	ldi	r31, 0xB1	; 177
   163fa:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
   163fe:	bc 01       	movw	r22, r24
   16400:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   16404:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16408:	91 e1       	ldi	r25, 0x11	; 17
   1640a:	de 01       	movw	r26, r28
   1640c:	11 96       	adiw	r26, 0x01	; 1
   1640e:	01 90       	ld	r0, Z+
   16410:	0d 92       	st	X+, r0
   16412:	9a 95       	dec	r25
   16414:	e1 f7       	brne	.-8      	; 0x1640e <amigo_increment+0x1c>
   16416:	9e 81       	ldd	r25, Y+6	; 0x06
   16418:	9f 5f       	subi	r25, 0xFF	; 255
   1641a:	9e 83       	std	Y+6, r25	; 0x06
   1641c:	ce 01       	movw	r24, r28
   1641e:	01 96       	adiw	r24, 0x01	; 1
   16420:	c1 dd       	rcall	.-1150   	; 0x15fa4 <amigo_overflow_check>
   16422:	00 97       	sbiw	r24, 0x00	; 0
   16424:	59 f4       	brne	.+22     	; 0x1643c <amigo_increment+0x4a>
   16426:	a0 91 5f 19 	lds	r26, 0x195F	; 0x80195f <AMIGOs>
   1642a:	b0 91 60 19 	lds	r27, 0x1960	; 0x801960 <AMIGOs+0x1>
   1642e:	21 e1       	ldi	r18, 0x11	; 17
   16430:	fe 01       	movw	r30, r28
   16432:	31 96       	adiw	r30, 0x01	; 1
   16434:	01 90       	ld	r0, Z+
   16436:	0d 92       	st	X+, r0
   16438:	2a 95       	dec	r18
   1643a:	e1 f7       	brne	.-8      	; 0x16434 <amigo_increment+0x42>
   1643c:	61 96       	adiw	r28, 0x11	; 17
   1643e:	e2 e0       	ldi	r30, 0x02	; 2
   16440:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00016444 <amigo_seek>:
   16444:	0f 93       	push	r16
   16446:	1f 93       	push	r17
   16448:	cf 93       	push	r28
   1644a:	df 93       	push	r29
   1644c:	ec 01       	movw	r28, r24
   1644e:	62 e9       	ldi	r22, 0x92	; 146
   16450:	75 e1       	ldi	r23, 0x15	; 21
   16452:	a8 dd       	rcall	.-1200   	; 0x15fa4 <amigo_overflow_check>
   16454:	8c 01       	movw	r16, r24
   16456:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   1645a:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   1645e:	89 2b       	or	r24, r25
   16460:	41 f0       	breq	.+16     	; 0x16472 <amigo_seek+0x2e>
   16462:	81 e0       	ldi	r24, 0x01	; 1
   16464:	86 83       	std	Z+6, r24	; 0x06
   16466:	87 81       	ldd	r24, Z+7	; 0x07
   16468:	90 85       	ldd	r25, Z+8	; 0x08
   1646a:	84 60       	ori	r24, 0x04	; 4
   1646c:	90 87       	std	Z+8, r25	; 0x08
   1646e:	87 83       	std	Z+7, r24	; 0x07
   16470:	06 c0       	rjmp	.+12     	; 0x1647e <amigo_seek+0x3a>
   16472:	8d 81       	ldd	r24, Y+5	; 0x05
   16474:	85 83       	std	Z+5, r24	; 0x05
   16476:	8c 81       	ldd	r24, Y+4	; 0x04
   16478:	84 83       	std	Z+4, r24	; 0x04
   1647a:	8b 81       	ldd	r24, Y+3	; 0x03
   1647c:	83 83       	std	Z+3, r24	; 0x03
   1647e:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   16482:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   16486:	81 81       	ldd	r24, Z+1	; 0x01
   16488:	90 e0       	ldi	r25, 0x00	; 0
   1648a:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
   1648e:	c8 01       	movw	r24, r16
   16490:	df 91       	pop	r29
   16492:	cf 91       	pop	r28
   16494:	1f 91       	pop	r17
   16496:	0f 91       	pop	r16
   16498:	08 95       	ret

0001649a <amigo_verify>:
   1649a:	8f 92       	push	r8
   1649c:	9f 92       	push	r9
   1649e:	af 92       	push	r10
   164a0:	bf 92       	push	r11
   164a2:	ef 92       	push	r14
   164a4:	ff 92       	push	r15
   164a6:	0f 93       	push	r16
   164a8:	1f 93       	push	r17
   164aa:	cf 93       	push	r28
   164ac:	df 93       	push	r29
   164ae:	ad b7       	in	r26, 0x3d	; 61
   164b0:	be b7       	in	r27, 0x3e	; 62
   164b2:	19 97       	sbiw	r26, 0x09	; 9
   164b4:	0f b6       	in	r0, 0x3f	; 63
   164b6:	f8 94       	cli
   164b8:	be bf       	out	0x3e, r27	; 62
   164ba:	0f be       	out	0x3f, r0	; 63
   164bc:	ad bf       	out	0x3d, r26	; 61
   164be:	7c 01       	movw	r14, r24
   164c0:	67 e9       	ldi	r22, 0x97	; 151
   164c2:	75 e1       	ldi	r23, 0x15	; 21
   164c4:	80 91 5f 19 	lds	r24, 0x195F	; 0x80195f <AMIGOs>
   164c8:	90 91 60 19 	lds	r25, 0x1960	; 0x801960 <AMIGOs+0x1>
   164cc:	c1 dd       	rcall	.-1150   	; 0x16050 <amigo_chs_to_logical>
   164ce:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   164d2:	25 ff       	sbrs	r18, 5
   164d4:	10 c0       	rjmp	.+32     	; 0x164f6 <amigo_verify+0x5c>
   164d6:	ed b7       	in	r30, 0x3d	; 61
   164d8:	fe b7       	in	r31, 0x3e	; 62
   164da:	e0 86       	std	Z+8, r14	; 0x08
   164dc:	f1 86       	std	Z+9, r15	; 0x09
   164de:	64 83       	std	Z+4, r22	; 0x04
   164e0:	75 83       	std	Z+5, r23	; 0x05
   164e2:	86 83       	std	Z+6, r24	; 0x06
   164e4:	97 83       	std	Z+7, r25	; 0x07
   164e6:	88 e7       	ldi	r24, 0x78	; 120
   164e8:	9d e2       	ldi	r25, 0x2D	; 45
   164ea:	a0 e0       	ldi	r26, 0x00	; 0
   164ec:	81 83       	std	Z+1, r24	; 0x01
   164ee:	92 83       	std	Z+2, r25	; 0x02
   164f0:	a3 83       	std	Z+3, r26	; 0x03
   164f2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   164f6:	e7 01       	movw	r28, r14
   164f8:	20 97       	sbiw	r28, 0x00	; 0
   164fa:	09 f4       	brne	.+2      	; 0x164fe <amigo_verify+0x64>
   164fc:	4b c0       	rjmp	.+150    	; 0x16594 <amigo_verify+0xfa>
   164fe:	64 ea       	ldi	r22, 0xA4	; 164
   16500:	75 e1       	ldi	r23, 0x15	; 21
   16502:	80 91 5f 19 	lds	r24, 0x195F	; 0x80195f <AMIGOs>
   16506:	90 91 60 19 	lds	r25, 0x1960	; 0x801960 <AMIGOs+0x1>
   1650a:	a2 dd       	rcall	.-1212   	; 0x16050 <amigo_chs_to_logical>
   1650c:	4b 01       	movw	r8, r22
   1650e:	5c 01       	movw	r10, r24
   16510:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16514:	86 fd       	sbrc	r24, 6
   16516:	0e 94 4f 84 	call	0x1089e	; 0x1089e <gpib_timer_elapsed_begin>
   1651a:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   1651e:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   16522:	e0 90 5f 19 	lds	r14, 0x195F	; 0x80195f <AMIGOs>
   16526:	f0 90 60 19 	lds	r15, 0x1960	; 0x801960 <AMIGOs+0x1>
   1652a:	87 e0       	ldi	r24, 0x07	; 7
   1652c:	e8 0e       	add	r14, r24
   1652e:	f1 1c       	adc	r15, r1
   16530:	06 81       	ldd	r16, Z+6	; 0x06
   16532:	17 81       	ldd	r17, Z+7	; 0x07
   16534:	27 ee       	ldi	r18, 0xE7	; 231
   16536:	3c e1       	ldi	r19, 0x1C	; 28
   16538:	b5 01       	movw	r22, r10
   1653a:	a4 01       	movw	r20, r8
   1653c:	82 81       	ldd	r24, Z+2	; 0x02
   1653e:	93 81       	ldd	r25, Z+3	; 0x03
   16540:	0e 94 a1 83 	call	0x10742	; 0x10742 <dbf_open_read>
   16544:	7c 01       	movw	r14, r24
   16546:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1654a:	86 ff       	sbrs	r24, 6
   1654c:	04 c0       	rjmp	.+8      	; 0x16556 <amigo_verify+0xbc>
   1654e:	8b ea       	ldi	r24, 0xAB	; 171
   16550:	90 e1       	ldi	r25, 0x10	; 16
   16552:	0e 94 61 84 	call	0x108c2	; 0x108c2 <gpib_timer_elapsed_end>
   16556:	20 91 5f 19 	lds	r18, 0x195F	; 0x80195f <AMIGOs>
   1655a:	30 91 60 19 	lds	r19, 0x1960	; 0x801960 <AMIGOs+0x1>
   1655e:	f9 01       	movw	r30, r18
   16560:	87 81       	ldd	r24, Z+7	; 0x07
   16562:	90 85       	ldd	r25, Z+8	; 0x08
   16564:	89 2b       	or	r24, r25
   16566:	21 f0       	breq	.+8      	; 0x16570 <amigo_verify+0xd6>
   16568:	81 e0       	ldi	r24, 0x01	; 1
   1656a:	f9 01       	movw	r30, r18
   1656c:	86 83       	std	Z+6, r24	; 0x06
   1656e:	15 c0       	rjmp	.+42     	; 0x1659a <amigo_verify+0x100>
   16570:	80 91 61 19 	lds	r24, 0x1961	; 0x801961 <AMIGOp>
   16574:	90 91 62 19 	lds	r25, 0x1962	; 0x801962 <AMIGOp+0x1>
   16578:	fc 01       	movw	r30, r24
   1657a:	86 81       	ldd	r24, Z+6	; 0x06
   1657c:	97 81       	ldd	r25, Z+7	; 0x07
   1657e:	e8 16       	cp	r14, r24
   16580:	f9 06       	cpc	r15, r25
   16582:	91 f7       	brne	.-28     	; 0x16568 <amigo_verify+0xce>
   16584:	8c ea       	ldi	r24, 0xAC	; 172
   16586:	95 e1       	ldi	r25, 0x15	; 21
   16588:	34 df       	rcall	.-408    	; 0x163f2 <amigo_increment>
   1658a:	21 97       	sbiw	r28, 0x01	; 1
   1658c:	89 2b       	or	r24, r25
   1658e:	09 f4       	brne	.+2      	; 0x16592 <amigo_verify+0xf8>
   16590:	b3 cf       	rjmp	.-154    	; 0x164f8 <amigo_verify+0x5e>
   16592:	03 c0       	rjmp	.+6      	; 0x1659a <amigo_verify+0x100>
   16594:	c0 e0       	ldi	r28, 0x00	; 0
   16596:	d0 e0       	ldi	r29, 0x00	; 0
   16598:	02 c0       	rjmp	.+4      	; 0x1659e <amigo_verify+0x104>
   1659a:	c1 e0       	ldi	r28, 0x01	; 1
   1659c:	d0 e0       	ldi	r29, 0x00	; 0
   1659e:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   165a2:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   165a6:	81 81       	ldd	r24, Z+1	; 0x01
   165a8:	90 e0       	ldi	r25, 0x00	; 0
   165aa:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
   165ae:	ce 01       	movw	r24, r28
   165b0:	ad b7       	in	r26, 0x3d	; 61
   165b2:	be b7       	in	r27, 0x3e	; 62
   165b4:	19 96       	adiw	r26, 0x09	; 9
   165b6:	0f b6       	in	r0, 0x3f	; 63
   165b8:	f8 94       	cli
   165ba:	be bf       	out	0x3e, r27	; 62
   165bc:	0f be       	out	0x3f, r0	; 63
   165be:	ad bf       	out	0x3d, r26	; 61
   165c0:	df 91       	pop	r29
   165c2:	cf 91       	pop	r28
   165c4:	1f 91       	pop	r17
   165c6:	0f 91       	pop	r16
   165c8:	ff 90       	pop	r15
   165ca:	ef 90       	pop	r14
   165cc:	bf 90       	pop	r11
   165ce:	af 90       	pop	r10
   165d0:	9f 90       	pop	r9
   165d2:	8f 90       	pop	r8
   165d4:	08 95       	ret

000165d6 <amigo_format>:
   165d6:	ef 92       	push	r14
   165d8:	ff 92       	push	r15
   165da:	0f 93       	push	r16
   165dc:	1f 93       	push	r17
   165de:	cf 93       	push	r28
   165e0:	df 93       	push	r29
   165e2:	00 d0       	rcall	.+0      	; 0x165e4 <amigo_format+0xe>
   165e4:	1f 92       	push	r1
   165e6:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   165ea:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   165ee:	15 82       	std	Z+5, r1	; 0x05
   165f0:	14 82       	std	Z+4, r1	; 0x04
   165f2:	13 82       	std	Z+3, r1	; 0x03
   165f4:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   165f8:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   165fc:	46 81       	ldd	r20, Z+6	; 0x06
   165fe:	57 81       	ldd	r21, Z+7	; 0x07
   16600:	68 2f       	mov	r22, r24
   16602:	70 e0       	ldi	r23, 0x00	; 0
   16604:	87 ee       	ldi	r24, 0xE7	; 231
   16606:	9c e1       	ldi	r25, 0x1C	; 28
   16608:	0e 94 36 e7 	call	0x1ce6c	; 0x1ce6c <memset>
   1660c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16610:	85 ff       	sbrs	r24, 5
   16612:	0a c0       	rjmp	.+20     	; 0x16628 <amigo_format+0x52>
   16614:	8d e3       	ldi	r24, 0x3D	; 61
   16616:	9d e2       	ldi	r25, 0x2D	; 45
   16618:	a0 e0       	ldi	r26, 0x00	; 0
   1661a:	ed b7       	in	r30, 0x3d	; 61
   1661c:	fe b7       	in	r31, 0x3e	; 62
   1661e:	81 83       	std	Z+1, r24	; 0x01
   16620:	92 83       	std	Z+2, r25	; 0x02
   16622:	a3 83       	std	Z+3, r26	; 0x03
   16624:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   16628:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1662c:	86 fd       	sbrc	r24, 6
   1662e:	0e 94 4f 84 	call	0x1089e	; 0x1089e <gpib_timer_elapsed_begin>
   16632:	63 eb       	ldi	r22, 0xB3	; 179
   16634:	75 e1       	ldi	r23, 0x15	; 21
   16636:	80 91 5f 19 	lds	r24, 0x195F	; 0x80195f <AMIGOs>
   1663a:	90 91 60 19 	lds	r25, 0x1960	; 0x801960 <AMIGOs+0x1>
   1663e:	08 dd       	rcall	.-1520   	; 0x16050 <amigo_chs_to_logical>
   16640:	ab 01       	movw	r20, r22
   16642:	bc 01       	movw	r22, r24
   16644:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   16648:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   1664c:	e0 90 5f 19 	lds	r14, 0x195F	; 0x80195f <AMIGOs>
   16650:	f0 90 60 19 	lds	r15, 0x1960	; 0x801960 <AMIGOs+0x1>
   16654:	87 e0       	ldi	r24, 0x07	; 7
   16656:	e8 0e       	add	r14, r24
   16658:	f1 1c       	adc	r15, r1
   1665a:	06 81       	ldd	r16, Z+6	; 0x06
   1665c:	17 81       	ldd	r17, Z+7	; 0x07
   1665e:	27 ee       	ldi	r18, 0xE7	; 231
   16660:	3c e1       	ldi	r19, 0x1C	; 28
   16662:	82 81       	ldd	r24, Z+2	; 0x02
   16664:	93 81       	ldd	r25, Z+3	; 0x03
   16666:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <dbf_open_write>
   1666a:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   1666e:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16672:	27 81       	ldd	r18, Z+7	; 0x07
   16674:	30 85       	ldd	r19, Z+8	; 0x08
   16676:	21 15       	cp	r18, r1
   16678:	31 05       	cpc	r19, r1
   1667a:	49 f4       	brne	.+18     	; 0x1668e <amigo_format+0xb8>
   1667c:	c0 91 61 19 	lds	r28, 0x1961	; 0x801961 <AMIGOp>
   16680:	d0 91 62 19 	lds	r29, 0x1962	; 0x801962 <AMIGOp+0x1>
   16684:	4e 81       	ldd	r20, Y+6	; 0x06
   16686:	5f 81       	ldd	r21, Y+7	; 0x07
   16688:	84 17       	cp	r24, r20
   1668a:	95 07       	cpc	r25, r21
   1668c:	41 f0       	breq	.+16     	; 0x1669e <amigo_format+0xc8>
   1668e:	22 60       	ori	r18, 0x02	; 2
   16690:	30 87       	std	Z+8, r19	; 0x08
   16692:	27 83       	std	Z+7, r18	; 0x07
   16694:	81 e0       	ldi	r24, 0x01	; 1
   16696:	86 83       	std	Z+6, r24	; 0x06
   16698:	c1 e0       	ldi	r28, 0x01	; 1
   1669a:	d0 e0       	ldi	r29, 0x00	; 0
   1669c:	0f c0       	rjmp	.+30     	; 0x166bc <amigo_format+0xe6>
   1669e:	80 e0       	ldi	r24, 0x00	; 0
   166a0:	90 e0       	ldi	r25, 0x00	; 0
   166a2:	a7 de       	rcall	.-690    	; 0x163f2 <amigo_increment>
   166a4:	89 2b       	or	r24, r25
   166a6:	29 f2       	breq	.-118    	; 0x16632 <amigo_format+0x5c>
   166a8:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   166ac:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   166b0:	15 82       	std	Z+5, r1	; 0x05
   166b2:	14 82       	std	Z+4, r1	; 0x04
   166b4:	13 82       	std	Z+3, r1	; 0x03
   166b6:	16 82       	std	Z+6, r1	; 0x06
   166b8:	c0 e0       	ldi	r28, 0x00	; 0
   166ba:	d0 e0       	ldi	r29, 0x00	; 0
   166bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166c0:	86 ff       	sbrs	r24, 6
   166c2:	04 c0       	rjmp	.+8      	; 0x166cc <amigo_format+0xf6>
   166c4:	83 eb       	ldi	r24, 0xB3	; 179
   166c6:	95 e1       	ldi	r25, 0x15	; 21
   166c8:	0e 94 61 84 	call	0x108c2	; 0x108c2 <gpib_timer_elapsed_end>
   166cc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166d0:	85 ff       	sbrs	r24, 5
   166d2:	0a c0       	rjmp	.+20     	; 0x166e8 <amigo_format+0x112>
   166d4:	88 e2       	ldi	r24, 0x28	; 40
   166d6:	9d e2       	ldi	r25, 0x2D	; 45
   166d8:	a0 e0       	ldi	r26, 0x00	; 0
   166da:	ed b7       	in	r30, 0x3d	; 61
   166dc:	fe b7       	in	r31, 0x3e	; 62
   166de:	81 83       	std	Z+1, r24	; 0x01
   166e0:	92 83       	std	Z+2, r25	; 0x02
   166e2:	a3 83       	std	Z+3, r26	; 0x03
   166e4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   166e8:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   166ec:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   166f0:	81 81       	ldd	r24, Z+1	; 0x01
   166f2:	90 e0       	ldi	r25, 0x00	; 0
   166f4:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
   166f8:	ce 01       	movw	r24, r28
   166fa:	cd b7       	in	r28, 0x3d	; 61
   166fc:	de b7       	in	r29, 0x3e	; 62
   166fe:	23 96       	adiw	r28, 0x03	; 3
   16700:	e6 e0       	ldi	r30, 0x06	; 6
   16702:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

00016706 <amigo_buffered_read_command>:
   16706:	8f 92       	push	r8
   16708:	9f 92       	push	r9
   1670a:	af 92       	push	r10
   1670c:	bf 92       	push	r11
   1670e:	ef 92       	push	r14
   16710:	ff 92       	push	r15
   16712:	0f 93       	push	r16
   16714:	1f 93       	push	r17
   16716:	cf 93       	push	r28
   16718:	df 93       	push	r29
   1671a:	00 d0       	rcall	.+0      	; 0x1671c <amigo_buffered_read_command+0x16>
   1671c:	00 d0       	rcall	.+0      	; 0x1671e <amigo_buffered_read_command+0x18>
   1671e:	1f 92       	push	r1
   16720:	6a eb       	ldi	r22, 0xBA	; 186
   16722:	75 e1       	ldi	r23, 0x15	; 21
   16724:	80 91 5f 19 	lds	r24, 0x195F	; 0x80195f <AMIGOs>
   16728:	90 91 60 19 	lds	r25, 0x1960	; 0x801960 <AMIGOs+0x1>
   1672c:	91 dc       	rcall	.-1758   	; 0x16050 <amigo_chs_to_logical>
   1672e:	4b 01       	movw	r8, r22
   16730:	5c 01       	movw	r10, r24
   16732:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16736:	85 ff       	sbrs	r24, 5
   16738:	12 c0       	rjmp	.+36     	; 0x1675e <amigo_buffered_read_command+0x58>
   1673a:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   1673e:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16742:	80 81       	ld	r24, Z
   16744:	90 e0       	ldi	r25, 0x00	; 0
   16746:	ed b7       	in	r30, 0x3d	; 61
   16748:	fe b7       	in	r31, 0x3e	; 62
   1674a:	95 83       	std	Z+5, r25	; 0x05
   1674c:	84 83       	std	Z+4, r24	; 0x04
   1674e:	86 e1       	ldi	r24, 0x16	; 22
   16750:	9d e2       	ldi	r25, 0x2D	; 45
   16752:	a0 e0       	ldi	r26, 0x00	; 0
   16754:	81 83       	std	Z+1, r24	; 0x01
   16756:	92 83       	std	Z+2, r25	; 0x02
   16758:	a3 83       	std	Z+3, r26	; 0x03
   1675a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1675e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16762:	86 fd       	sbrc	r24, 6
   16764:	0e 94 4f 84 	call	0x1089e	; 0x1089e <gpib_timer_elapsed_begin>
   16768:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   1676c:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   16770:	e0 90 5f 19 	lds	r14, 0x195F	; 0x80195f <AMIGOs>
   16774:	f0 90 60 19 	lds	r15, 0x1960	; 0x801960 <AMIGOs+0x1>
   16778:	87 e0       	ldi	r24, 0x07	; 7
   1677a:	e8 0e       	add	r14, r24
   1677c:	f1 1c       	adc	r15, r1
   1677e:	06 81       	ldd	r16, Z+6	; 0x06
   16780:	17 81       	ldd	r17, Z+7	; 0x07
   16782:	27 ee       	ldi	r18, 0xE7	; 231
   16784:	3c e1       	ldi	r19, 0x1C	; 28
   16786:	b5 01       	movw	r22, r10
   16788:	a4 01       	movw	r20, r8
   1678a:	82 81       	ldd	r24, Z+2	; 0x02
   1678c:	93 81       	ldd	r25, Z+3	; 0x03
   1678e:	0e 94 a1 83 	call	0x10742	; 0x10742 <dbf_open_read>
   16792:	7c 01       	movw	r14, r24
   16794:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16798:	86 ff       	sbrs	r24, 6
   1679a:	04 c0       	rjmp	.+8      	; 0x167a4 <amigo_buffered_read_command+0x9e>
   1679c:	8b ea       	ldi	r24, 0xAB	; 171
   1679e:	90 e1       	ldi	r25, 0x10	; 16
   167a0:	0e 94 61 84 	call	0x108c2	; 0x108c2 <gpib_timer_elapsed_end>
   167a4:	c0 91 5f 19 	lds	r28, 0x195F	; 0x80195f <AMIGOs>
   167a8:	d0 91 60 19 	lds	r29, 0x1960	; 0x801960 <AMIGOs+0x1>
   167ac:	8f 81       	ldd	r24, Y+7	; 0x07
   167ae:	98 85       	ldd	r25, Y+8	; 0x08
   167b0:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   167b4:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   167b8:	89 2b       	or	r24, r25
   167ba:	29 f4       	brne	.+10     	; 0x167c6 <amigo_buffered_read_command+0xc0>
   167bc:	86 81       	ldd	r24, Z+6	; 0x06
   167be:	97 81       	ldd	r25, Z+7	; 0x07
   167c0:	e8 16       	cp	r14, r24
   167c2:	f9 06       	cpc	r15, r25
   167c4:	19 f0       	breq	.+6      	; 0x167cc <amigo_buffered_read_command+0xc6>
   167c6:	81 e0       	ldi	r24, 0x01	; 1
   167c8:	8e 83       	std	Y+6, r24	; 0x06
   167ca:	14 c0       	rjmp	.+40     	; 0x167f4 <amigo_buffered_read_command+0xee>
   167cc:	8a eb       	ldi	r24, 0xBA	; 186
   167ce:	95 e1       	ldi	r25, 0x15	; 21
   167d0:	10 de       	rcall	.-992    	; 0x163f2 <amigo_increment>
   167d2:	89 2b       	or	r24, r25
   167d4:	59 f0       	breq	.+22     	; 0x167ec <amigo_buffered_read_command+0xe6>
   167d6:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   167da:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   167de:	81 e0       	ldi	r24, 0x01	; 1
   167e0:	86 83       	std	Z+6, r24	; 0x06
   167e2:	87 81       	ldd	r24, Z+7	; 0x07
   167e4:	90 85       	ldd	r25, Z+8	; 0x08
   167e6:	84 60       	ori	r24, 0x04	; 4
   167e8:	90 87       	std	Z+8, r25	; 0x08
   167ea:	87 83       	std	Z+7, r24	; 0x07
   167ec:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   167f0:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   167f4:	81 81       	ldd	r24, Z+1	; 0x01
   167f6:	90 e0       	ldi	r25, 0x00	; 0
   167f8:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
   167fc:	80 e0       	ldi	r24, 0x00	; 0
   167fe:	90 e0       	ldi	r25, 0x00	; 0
   16800:	0f 90       	pop	r0
   16802:	0f 90       	pop	r0
   16804:	0f 90       	pop	r0
   16806:	0f 90       	pop	r0
   16808:	0f 90       	pop	r0
   1680a:	df 91       	pop	r29
   1680c:	cf 91       	pop	r28
   1680e:	1f 91       	pop	r17
   16810:	0f 91       	pop	r16
   16812:	ff 90       	pop	r15
   16814:	ef 90       	pop	r14
   16816:	bf 90       	pop	r11
   16818:	af 90       	pop	r10
   1681a:	9f 90       	pop	r9
   1681c:	8f 90       	pop	r8
   1681e:	08 95       	ret

00016820 <amigo_buffered_read_execute>:
   16820:	a5 e0       	ldi	r26, 0x05	; 5
   16822:	b0 e0       	ldi	r27, 0x00	; 0
   16824:	e6 e1       	ldi	r30, 0x16	; 22
   16826:	f4 eb       	ldi	r31, 0xB4	; 180
   16828:	0c 94 4c e3 	jmp	0x1c698	; 0x1c698 <__prologue_saves__+0x1c>
   1682c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16830:	87 fd       	sbrc	r24, 7
   16832:	0e 94 4f 84 	call	0x1089e	; 0x1089e <gpib_timer_elapsed_begin>
   16836:	80 e0       	ldi	r24, 0x00	; 0
   16838:	91 e0       	ldi	r25, 0x01	; 1
   1683a:	9d 83       	std	Y+5, r25	; 0x05
   1683c:	8c 83       	std	Y+4, r24	; 0x04
   1683e:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   16842:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   16846:	66 81       	ldd	r22, Z+6	; 0x06
   16848:	77 81       	ldd	r23, Z+7	; 0x07
   1684a:	ae 01       	movw	r20, r28
   1684c:	4c 5f       	subi	r20, 0xFC	; 252
   1684e:	5f 4f       	sbci	r21, 0xFF	; 255
   16850:	87 ee       	ldi	r24, 0xE7	; 231
   16852:	9c e1       	ldi	r25, 0x1C	; 28
   16854:	0e 94 78 8a 	call	0x114f0	; 0x114f0 <gpib_write_str>
   16858:	8c 01       	movw	r16, r24
   1685a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1685e:	87 ff       	sbrs	r24, 7
   16860:	04 c0       	rjmp	.+8      	; 0x1686a <amigo_buffered_read_execute+0x4a>
   16862:	86 eb       	ldi	r24, 0xB6	; 182
   16864:	90 e1       	ldi	r25, 0x10	; 16
   16866:	0e 94 61 84 	call	0x108c2	; 0x108c2 <gpib_timer_elapsed_end>
   1686a:	8c 81       	ldd	r24, Y+4	; 0x04
   1686c:	9d 81       	ldd	r25, Y+5	; 0x05
   1686e:	88 27       	eor	r24, r24
   16870:	90 7d       	andi	r25, 0xD0	; 208
   16872:	89 2b       	or	r24, r25
   16874:	49 f4       	brne	.+18     	; 0x16888 <amigo_buffered_read_execute+0x68>
   16876:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   1687a:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   1687e:	86 81       	ldd	r24, Z+6	; 0x06
   16880:	97 81       	ldd	r25, Z+7	; 0x07
   16882:	08 17       	cp	r16, r24
   16884:	19 07       	cpc	r17, r25
   16886:	c9 f0       	breq	.+50     	; 0x168ba <amigo_buffered_read_execute+0x9a>
   16888:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   1688c:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16890:	81 e0       	ldi	r24, 0x01	; 1
   16892:	86 83       	std	Z+6, r24	; 0x06
   16894:	87 81       	ldd	r24, Z+7	; 0x07
   16896:	90 85       	ldd	r25, Z+8	; 0x08
   16898:	80 62       	ori	r24, 0x20	; 32
   1689a:	90 87       	std	Z+8, r25	; 0x08
   1689c:	87 83       	std	Z+7, r24	; 0x07
   1689e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   168a2:	80 ff       	sbrs	r24, 0
   168a4:	0a c0       	rjmp	.+20     	; 0x168ba <amigo_buffered_read_execute+0x9a>
   168a6:	8c ef       	ldi	r24, 0xFC	; 252
   168a8:	9c e2       	ldi	r25, 0x2C	; 44
   168aa:	a0 e0       	ldi	r26, 0x00	; 0
   168ac:	ed b7       	in	r30, 0x3d	; 61
   168ae:	fe b7       	in	r31, 0x3e	; 62
   168b0:	81 83       	std	Z+1, r24	; 0x01
   168b2:	92 83       	std	Z+2, r25	; 0x02
   168b4:	a3 83       	std	Z+3, r26	; 0x03
   168b6:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   168ba:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   168be:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   168c2:	81 81       	ldd	r24, Z+1	; 0x01
   168c4:	90 e0       	ldi	r25, 0x00	; 0
   168c6:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
   168ca:	8c 81       	ldd	r24, Y+4	; 0x04
   168cc:	9d 81       	ldd	r25, Y+5	; 0x05
   168ce:	25 96       	adiw	r28, 0x05	; 5
   168d0:	e4 e0       	ldi	r30, 0x04	; 4
   168d2:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

000168d6 <amigo_buffered_write>:
   168d6:	8f 92       	push	r8
   168d8:	9f 92       	push	r9
   168da:	af 92       	push	r10
   168dc:	bf 92       	push	r11
   168de:	ef 92       	push	r14
   168e0:	ff 92       	push	r15
   168e2:	0f 93       	push	r16
   168e4:	1f 93       	push	r17
   168e6:	cf 93       	push	r28
   168e8:	df 93       	push	r29
   168ea:	cd b7       	in	r28, 0x3d	; 61
   168ec:	de b7       	in	r29, 0x3e	; 62
   168ee:	27 97       	sbiw	r28, 0x07	; 7
   168f0:	0f b6       	in	r0, 0x3f	; 63
   168f2:	f8 94       	cli
   168f4:	de bf       	out	0x3e, r29	; 62
   168f6:	0f be       	out	0x3f, r0	; 63
   168f8:	cd bf       	out	0x3d, r28	; 61
   168fa:	68 ec       	ldi	r22, 0xC8	; 200
   168fc:	75 e1       	ldi	r23, 0x15	; 21
   168fe:	80 91 5f 19 	lds	r24, 0x195F	; 0x80195f <AMIGOs>
   16902:	90 91 60 19 	lds	r25, 0x1960	; 0x801960 <AMIGOs+0x1>
   16906:	a4 db       	rcall	.-2232   	; 0x16050 <amigo_chs_to_logical>
   16908:	4b 01       	movw	r8, r22
   1690a:	5c 01       	movw	r10, r24
   1690c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16910:	87 fd       	sbrc	r24, 7
   16912:	0e 94 4f 84 	call	0x1089e	; 0x1089e <gpib_timer_elapsed_begin>
   16916:	1f 82       	std	Y+7, r1	; 0x07
   16918:	1e 82       	std	Y+6, r1	; 0x06
   1691a:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   1691e:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   16922:	66 81       	ldd	r22, Z+6	; 0x06
   16924:	77 81       	ldd	r23, Z+7	; 0x07
   16926:	ae 01       	movw	r20, r28
   16928:	4a 5f       	subi	r20, 0xFA	; 250
   1692a:	5f 4f       	sbci	r21, 0xFF	; 255
   1692c:	87 ee       	ldi	r24, 0xE7	; 231
   1692e:	9c e1       	ldi	r25, 0x1C	; 28
   16930:	0e 94 d6 89 	call	0x113ac	; 0x113ac <gpib_read_str>
   16934:	7c 01       	movw	r14, r24
   16936:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1693a:	85 ff       	sbrs	r24, 5
   1693c:	12 c0       	rjmp	.+36     	; 0x16962 <amigo_buffered_write+0x8c>
   1693e:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   16942:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16946:	80 81       	ld	r24, Z
   16948:	90 e0       	ldi	r25, 0x00	; 0
   1694a:	ed b7       	in	r30, 0x3d	; 61
   1694c:	fe b7       	in	r31, 0x3e	; 62
   1694e:	95 83       	std	Z+5, r25	; 0x05
   16950:	84 83       	std	Z+4, r24	; 0x04
   16952:	8a ee       	ldi	r24, 0xEA	; 234
   16954:	9c e2       	ldi	r25, 0x2C	; 44
   16956:	a0 e0       	ldi	r26, 0x00	; 0
   16958:	81 83       	std	Z+1, r24	; 0x01
   1695a:	92 83       	std	Z+2, r25	; 0x02
   1695c:	a3 83       	std	Z+3, r26	; 0x03
   1695e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   16962:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16966:	87 ff       	sbrs	r24, 7
   16968:	04 c0       	rjmp	.+8      	; 0x16972 <amigo_buffered_write+0x9c>
   1696a:	87 ed       	ldi	r24, 0xD7	; 215
   1696c:	95 e1       	ldi	r25, 0x15	; 21
   1696e:	0e 94 61 84 	call	0x108c2	; 0x108c2 <gpib_timer_elapsed_end>
   16972:	8e 81       	ldd	r24, Y+6	; 0x06
   16974:	9f 81       	ldd	r25, Y+7	; 0x07
   16976:	88 27       	eor	r24, r24
   16978:	90 7d       	andi	r25, 0xD0	; 208
   1697a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1697e:	89 2b       	or	r24, r25
   16980:	49 f4       	brne	.+18     	; 0x16994 <amigo_buffered_write+0xbe>
   16982:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   16986:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   1698a:	86 81       	ldd	r24, Z+6	; 0x06
   1698c:	97 81       	ldd	r25, Z+7	; 0x07
   1698e:	e8 16       	cp	r14, r24
   16990:	f9 06       	cpc	r15, r25
   16992:	c1 f0       	breq	.+48     	; 0x169c4 <amigo_buffered_write+0xee>
   16994:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   16998:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   1699c:	81 e0       	ldi	r24, 0x01	; 1
   1699e:	86 83       	std	Z+6, r24	; 0x06
   169a0:	87 81       	ldd	r24, Z+7	; 0x07
   169a2:	90 85       	ldd	r25, Z+8	; 0x08
   169a4:	80 62       	ori	r24, 0x20	; 32
   169a6:	90 87       	std	Z+8, r25	; 0x08
   169a8:	87 83       	std	Z+7, r24	; 0x07
   169aa:	20 ff       	sbrs	r18, 0
   169ac:	5e c0       	rjmp	.+188    	; 0x16a6a <amigo_buffered_write+0x194>
   169ae:	8b ec       	ldi	r24, 0xCB	; 203
   169b0:	9c e2       	ldi	r25, 0x2C	; 44
   169b2:	a0 e0       	ldi	r26, 0x00	; 0
   169b4:	ed b7       	in	r30, 0x3d	; 61
   169b6:	fe b7       	in	r31, 0x3e	; 62
   169b8:	81 83       	std	Z+1, r24	; 0x01
   169ba:	92 83       	std	Z+2, r25	; 0x02
   169bc:	a3 83       	std	Z+3, r26	; 0x03
   169be:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   169c2:	53 c0       	rjmp	.+166    	; 0x16a6a <amigo_buffered_write+0x194>
   169c4:	26 fd       	sbrc	r18, 6
   169c6:	0e 94 4f 84 	call	0x1089e	; 0x1089e <gpib_timer_elapsed_begin>
   169ca:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   169ce:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   169d2:	e0 90 5f 19 	lds	r14, 0x195F	; 0x80195f <AMIGOs>
   169d6:	f0 90 60 19 	lds	r15, 0x1960	; 0x801960 <AMIGOs+0x1>
   169da:	87 e0       	ldi	r24, 0x07	; 7
   169dc:	e8 0e       	add	r14, r24
   169de:	f1 1c       	adc	r15, r1
   169e0:	06 81       	ldd	r16, Z+6	; 0x06
   169e2:	17 81       	ldd	r17, Z+7	; 0x07
   169e4:	27 ee       	ldi	r18, 0xE7	; 231
   169e6:	3c e1       	ldi	r19, 0x1C	; 28
   169e8:	b5 01       	movw	r22, r10
   169ea:	a4 01       	movw	r20, r8
   169ec:	82 81       	ldd	r24, Z+2	; 0x02
   169ee:	93 81       	ldd	r25, Z+3	; 0x03
   169f0:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <dbf_open_write>
   169f4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   169f8:	86 ff       	sbrs	r24, 6
   169fa:	04 c0       	rjmp	.+8      	; 0x16a04 <amigo_buffered_write+0x12e>
   169fc:	80 ea       	ldi	r24, 0xA0	; 160
   169fe:	90 e1       	ldi	r25, 0x10	; 16
   16a00:	0e 94 61 84 	call	0x108c2	; 0x108c2 <gpib_timer_elapsed_end>
   16a04:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   16a08:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16a0c:	87 81       	ldd	r24, Z+7	; 0x07
   16a0e:	90 85       	ldd	r25, Z+8	; 0x08
   16a10:	89 2b       	or	r24, r25
   16a12:	d9 f0       	breq	.+54     	; 0x16a4a <amigo_buffered_write+0x174>
   16a14:	81 e0       	ldi	r24, 0x01	; 1
   16a16:	86 83       	std	Z+6, r24	; 0x06
   16a18:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16a1c:	80 ff       	sbrs	r24, 0
   16a1e:	0a c0       	rjmp	.+20     	; 0x16a34 <amigo_buffered_write+0x15e>
   16a20:	8b ea       	ldi	r24, 0xAB	; 171
   16a22:	9c e2       	ldi	r25, 0x2C	; 44
   16a24:	a0 e0       	ldi	r26, 0x00	; 0
   16a26:	ed b7       	in	r30, 0x3d	; 61
   16a28:	fe b7       	in	r31, 0x3e	; 62
   16a2a:	81 83       	std	Z+1, r24	; 0x01
   16a2c:	92 83       	std	Z+2, r25	; 0x02
   16a2e:	a3 83       	std	Z+3, r26	; 0x03
   16a30:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   16a34:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   16a38:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   16a3c:	81 81       	ldd	r24, Z+1	; 0x01
   16a3e:	90 e0       	ldi	r25, 0x00	; 0
   16a40:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
   16a44:	80 e0       	ldi	r24, 0x00	; 0
   16a46:	90 e0       	ldi	r25, 0x00	; 0
   16a48:	1c c0       	rjmp	.+56     	; 0x16a82 <amigo_buffered_write+0x1ac>
   16a4a:	88 ec       	ldi	r24, 0xC8	; 200
   16a4c:	95 e1       	ldi	r25, 0x15	; 21
   16a4e:	d1 dc       	rcall	.-1630   	; 0x163f2 <amigo_increment>
   16a50:	89 2b       	or	r24, r25
   16a52:	59 f0       	breq	.+22     	; 0x16a6a <amigo_buffered_write+0x194>
   16a54:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   16a58:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16a5c:	81 e0       	ldi	r24, 0x01	; 1
   16a5e:	86 83       	std	Z+6, r24	; 0x06
   16a60:	87 81       	ldd	r24, Z+7	; 0x07
   16a62:	90 85       	ldd	r25, Z+8	; 0x08
   16a64:	84 60       	ori	r24, 0x04	; 4
   16a66:	90 87       	std	Z+8, r25	; 0x08
   16a68:	87 83       	std	Z+7, r24	; 0x07
   16a6a:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   16a6e:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   16a72:	81 81       	ldd	r24, Z+1	; 0x01
   16a74:	90 e0       	ldi	r25, 0x00	; 0
   16a76:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
   16a7a:	8e 81       	ldd	r24, Y+6	; 0x06
   16a7c:	9f 81       	ldd	r25, Y+7	; 0x07
   16a7e:	88 27       	eor	r24, r24
   16a80:	90 7d       	andi	r25, 0xD0	; 208
   16a82:	27 96       	adiw	r28, 0x07	; 7
   16a84:	0f b6       	in	r0, 0x3f	; 63
   16a86:	f8 94       	cli
   16a88:	de bf       	out	0x3e, r29	; 62
   16a8a:	0f be       	out	0x3f, r0	; 63
   16a8c:	cd bf       	out	0x3d, r28	; 61
   16a8e:	df 91       	pop	r29
   16a90:	cf 91       	pop	r28
   16a92:	1f 91       	pop	r17
   16a94:	0f 91       	pop	r16
   16a96:	ff 90       	pop	r15
   16a98:	ef 90       	pop	r14
   16a9a:	bf 90       	pop	r11
   16a9c:	af 90       	pop	r10
   16a9e:	9f 90       	pop	r9
   16aa0:	8f 90       	pop	r8
   16aa2:	08 95       	ret

00016aa4 <amigo_cmd_dsj>:
   16aa4:	a8 e0       	ldi	r26, 0x08	; 8
   16aa6:	b0 e0       	ldi	r27, 0x00	; 0
   16aa8:	e8 e5       	ldi	r30, 0x58	; 88
   16aaa:	f5 eb       	ldi	r31, 0xB5	; 181
   16aac:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
   16ab0:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   16ab4:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16ab8:	86 81       	ldd	r24, Z+6	; 0x06
   16aba:	88 87       	std	Y+8, r24	; 0x08
   16abc:	80 e0       	ldi	r24, 0x00	; 0
   16abe:	91 e0       	ldi	r25, 0x01	; 1
   16ac0:	9f 83       	std	Y+7, r25	; 0x07
   16ac2:	8e 83       	std	Y+6, r24	; 0x06
   16ac4:	ae 01       	movw	r20, r28
   16ac6:	4a 5f       	subi	r20, 0xFA	; 250
   16ac8:	5f 4f       	sbci	r21, 0xFF	; 255
   16aca:	61 e0       	ldi	r22, 0x01	; 1
   16acc:	70 e0       	ldi	r23, 0x00	; 0
   16ace:	ce 01       	movw	r24, r28
   16ad0:	08 96       	adiw	r24, 0x08	; 8
   16ad2:	0e 94 78 8a 	call	0x114f0	; 0x114f0 <gpib_write_str>
   16ad6:	2e 81       	ldd	r18, Y+6	; 0x06
   16ad8:	3f 81       	ldd	r19, Y+7	; 0x07
   16ada:	22 27       	eor	r18, r18
   16adc:	30 7d       	andi	r19, 0xD0	; 208
   16ade:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   16ae2:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16ae6:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   16aea:	23 2b       	or	r18, r19
   16aec:	11 f4       	brne	.+4      	; 0x16af2 <amigo_cmd_dsj+0x4e>
   16aee:	01 97       	sbiw	r24, 0x01	; 1
   16af0:	c1 f0       	breq	.+48     	; 0x16b22 <amigo_cmd_dsj+0x7e>
   16af2:	81 e0       	ldi	r24, 0x01	; 1
   16af4:	86 83       	std	Z+6, r24	; 0x06
   16af6:	87 81       	ldd	r24, Z+7	; 0x07
   16af8:	90 85       	ldd	r25, Z+8	; 0x08
   16afa:	80 62       	ori	r24, 0x20	; 32
   16afc:	90 87       	std	Z+8, r25	; 0x08
   16afe:	87 83       	std	Z+7, r24	; 0x07
   16b00:	40 ff       	sbrs	r20, 0
   16b02:	0a c0       	rjmp	.+20     	; 0x16b18 <amigo_cmd_dsj+0x74>
   16b04:	81 e9       	ldi	r24, 0x91	; 145
   16b06:	9c e2       	ldi	r25, 0x2C	; 44
   16b08:	a0 e0       	ldi	r26, 0x00	; 0
   16b0a:	ed b7       	in	r30, 0x3d	; 61
   16b0c:	fe b7       	in	r31, 0x3e	; 62
   16b0e:	81 83       	std	Z+1, r24	; 0x01
   16b10:	92 83       	std	Z+2, r25	; 0x02
   16b12:	a3 83       	std	Z+3, r26	; 0x03
   16b14:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   16b18:	8e 81       	ldd	r24, Y+6	; 0x06
   16b1a:	9f 81       	ldd	r25, Y+7	; 0x07
   16b1c:	88 27       	eor	r24, r24
   16b1e:	90 7d       	andi	r25, 0xD0	; 208
   16b20:	19 c0       	rjmp	.+50     	; 0x16b54 <amigo_cmd_dsj+0xb0>
   16b22:	45 ff       	sbrs	r20, 5
   16b24:	0e c0       	rjmp	.+28     	; 0x16b42 <amigo_cmd_dsj+0x9e>
   16b26:	86 81       	ldd	r24, Z+6	; 0x06
   16b28:	90 e0       	ldi	r25, 0x00	; 0
   16b2a:	ed b7       	in	r30, 0x3d	; 61
   16b2c:	fe b7       	in	r31, 0x3e	; 62
   16b2e:	95 83       	std	Z+5, r25	; 0x05
   16b30:	84 83       	std	Z+4, r24	; 0x04
   16b32:	84 e8       	ldi	r24, 0x84	; 132
   16b34:	9c e2       	ldi	r25, 0x2C	; 44
   16b36:	a0 e0       	ldi	r26, 0x00	; 0
   16b38:	81 83       	std	Z+1, r24	; 0x01
   16b3a:	92 83       	std	Z+2, r25	; 0x02
   16b3c:	a3 83       	std	Z+3, r26	; 0x03
   16b3e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   16b42:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   16b46:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16b4a:	16 82       	std	Z+6, r1	; 0x06
   16b4c:	10 86       	std	Z+8, r1	; 0x08
   16b4e:	17 82       	std	Z+7, r1	; 0x07
   16b50:	80 e0       	ldi	r24, 0x00	; 0
   16b52:	90 e0       	ldi	r25, 0x00	; 0
   16b54:	28 96       	adiw	r28, 0x08	; 8
   16b56:	e2 e0       	ldi	r30, 0x02	; 2
   16b58:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00016b5c <amigo_cmd_clear>:
/// - Reference: A23.
/// - Select sector 0.
/// @return  0

int amigo_cmd_clear()
{
   16b5c:	00 d0       	rcall	.+0      	; 0x16b5e <amigo_cmd_clear+0x2>
   16b5e:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16b60:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16b64:	85 ff       	sbrs	r24, 5
   16b66:	0a c0       	rjmp	.+20     	; 0x16b7c <amigo_cmd_clear+0x20>
        printf("[AMIGO Clear]\n");
   16b68:	85 e7       	ldi	r24, 0x75	; 117
   16b6a:	9c e2       	ldi	r25, 0x2C	; 44
   16b6c:	a0 e0       	ldi	r26, 0x00	; 0
   16b6e:	ed b7       	in	r30, 0x3d	; 61
   16b70:	fe b7       	in	r31, 0x3e	; 62
   16b72:	81 83       	std	Z+1, r24	; 0x01
   16b74:	92 83       	std	Z+2, r25	; 0x02
   16b76:	a3 83       	std	Z+3, r26	; 0x03
   16b78:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
    AMIGOs->sector = 0;
   16b7c:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   16b80:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16b84:	15 82       	std	Z+5, r1	; 0x05
    AMIGOs->head = 0;
   16b86:	14 82       	std	Z+4, r1	; 0x04
    AMIGOs->cyl = 0;
   16b88:	13 82       	std	Z+3, r1	; 0x03
/// @todo FIXME
///
///  Clear the DSJ byte that might be 2 after powerup
///
    AMIGOs->dsj = 0;
   16b8a:	16 82       	std	Z+6, r1	; 0x06
    AMIGOs->Errors =0;
   16b8c:	10 86       	std	Z+8, r1	; 0x08
   16b8e:	17 82       	std	Z+7, r1	; 0x07

    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16b90:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   16b94:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   16b98:	81 81       	ldd	r24, Z+1	; 0x01
   16b9a:	90 e0       	ldi	r25, 0x00	; 0
   16b9c:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
    return(0);
}
   16ba0:	80 e0       	ldi	r24, 0x00	; 0
   16ba2:	90 e0       	ldi	r25, 0x00	; 0
   16ba4:	0f 90       	pop	r0
   16ba6:	0f 90       	pop	r0
   16ba8:	0f 90       	pop	r0
   16baa:	08 95       	ret

00016bac <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   16bac:	af e0       	ldi	r26, 0x0F	; 15
   16bae:	b0 e0       	ldi	r27, 0x00	; 0
   16bb0:	ec ed       	ldi	r30, 0xDC	; 220
   16bb2:	f5 eb       	ldi	r31, 0xB5	; 181
   16bb4:	0c 94 4a e3 	jmp	0x1c694	; 0x1c694 <__prologue_saves__+0x18>
   16bb8:	c8 2f       	mov	r28, r24
   16bba:	e6 2e       	mov	r14, r22
   16bbc:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   16bbe:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   16bc2:	90 e0       	ldi	r25, 0x00	; 0
   16bc4:	0e 94 ab 8b 	call	0x11756	; 0x11756 <AMIGO_is_MLA>
   16bc8:	20 91 eb 1e 	lds	r18, 0x1EEB	; 0x801eeb <talking>
   16bcc:	f1 2c       	mov	r15, r1
   16bce:	d0 e0       	ldi	r29, 0x00	; 0
   16bd0:	89 2b       	or	r24, r25
   16bd2:	f1 f0       	breq	.+60     	; 0x16c10 <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16bd4:	82 2f       	mov	r24, r18
   16bd6:	90 e0       	ldi	r25, 0x00	; 0
   16bd8:	ed b7       	in	r30, 0x3d	; 61
   16bda:	fe b7       	in	r31, 0x3e	; 62
   16bdc:	97 87       	std	Z+15, r25	; 0x0f
   16bde:	86 87       	std	Z+14, r24	; 0x0e
   16be0:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   16be4:	90 e0       	ldi	r25, 0x00	; 0
   16be6:	95 87       	std	Z+13, r25	; 0x0d
   16be8:	84 87       	std	Z+12, r24	; 0x0c
   16bea:	13 87       	std	Z+11, r17	; 0x0b
   16bec:	02 87       	std	Z+10, r16	; 0x0a
   16bee:	f1 86       	std	Z+9, r15	; 0x09
   16bf0:	e0 86       	std	Z+8, r14	; 0x08
   16bf2:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   16bf6:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16bfa:	80 81       	ld	r24, Z
   16bfc:	90 e0       	ldi	r25, 0x00	; 0
   16bfe:	ed b7       	in	r30, 0x3d	; 61
   16c00:	fe b7       	in	r31, 0x3e	; 62
   16c02:	97 83       	std	Z+7, r25	; 0x07
   16c04:	86 83       	std	Z+6, r24	; 0x06
   16c06:	d5 83       	std	Z+5, r29	; 0x05
   16c08:	c4 83       	std	Z+4, r28	; 0x04
   16c0a:	8e e0       	ldi	r24, 0x0E	; 14
   16c0c:	9c e2       	ldi	r25, 0x2C	; 44
   16c0e:	51 c0       	rjmp	.+162    	; 0x16cb2 <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   16c10:	82 2f       	mov	r24, r18
   16c12:	90 e0       	ldi	r25, 0x00	; 0
   16c14:	0e 94 bc 8b 	call	0x11778	; 0x11778 <AMIGO_is_MTA>
   16c18:	20 91 ed 1e 	lds	r18, 0x1EED	; 0x801eed <listening>
   16c1c:	30 91 eb 1e 	lds	r19, 0x1EEB	; 0x801eeb <talking>
   16c20:	a0 91 5f 19 	lds	r26, 0x195F	; 0x80195f <AMIGOs>
   16c24:	b0 91 60 19 	lds	r27, 0x1960	; 0x801960 <AMIGOs+0x1>
   16c28:	89 2b       	or	r24, r25
   16c2a:	b1 f0       	breq	.+44     	; 0x16c58 <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16c2c:	83 2f       	mov	r24, r19
   16c2e:	90 e0       	ldi	r25, 0x00	; 0
   16c30:	ed b7       	in	r30, 0x3d	; 61
   16c32:	fe b7       	in	r31, 0x3e	; 62
   16c34:	97 87       	std	Z+15, r25	; 0x0f
   16c36:	86 87       	std	Z+14, r24	; 0x0e
   16c38:	30 e0       	ldi	r19, 0x00	; 0
   16c3a:	35 87       	std	Z+13, r19	; 0x0d
   16c3c:	24 87       	std	Z+12, r18	; 0x0c
   16c3e:	13 87       	std	Z+11, r17	; 0x0b
   16c40:	02 87       	std	Z+10, r16	; 0x0a
   16c42:	f1 86       	std	Z+9, r15	; 0x09
   16c44:	e0 86       	std	Z+8, r14	; 0x08
   16c46:	8c 91       	ld	r24, X
   16c48:	90 e0       	ldi	r25, 0x00	; 0
   16c4a:	97 83       	std	Z+7, r25	; 0x07
   16c4c:	86 83       	std	Z+6, r24	; 0x06
   16c4e:	d5 83       	std	Z+5, r29	; 0x05
   16c50:	c4 83       	std	Z+4, r28	; 0x04
   16c52:	87 ea       	ldi	r24, 0xA7	; 167
   16c54:	9b e2       	ldi	r25, 0x2B	; 43
   16c56:	2d c0       	rjmp	.+90     	; 0x16cb2 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   16c58:	3f 35       	cpi	r19, 0x5F	; 95
   16c5a:	b1 f4       	brne	.+44     	; 0x16c88 <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16c5c:	8f e5       	ldi	r24, 0x5F	; 95
   16c5e:	90 e0       	ldi	r25, 0x00	; 0
   16c60:	ed b7       	in	r30, 0x3d	; 61
   16c62:	fe b7       	in	r31, 0x3e	; 62
   16c64:	97 87       	std	Z+15, r25	; 0x0f
   16c66:	86 87       	std	Z+14, r24	; 0x0e
   16c68:	30 e0       	ldi	r19, 0x00	; 0
   16c6a:	35 87       	std	Z+13, r19	; 0x0d
   16c6c:	24 87       	std	Z+12, r18	; 0x0c
   16c6e:	13 87       	std	Z+11, r17	; 0x0b
   16c70:	02 87       	std	Z+10, r16	; 0x0a
   16c72:	f1 86       	std	Z+9, r15	; 0x09
   16c74:	e0 86       	std	Z+8, r14	; 0x08
   16c76:	8c 91       	ld	r24, X
   16c78:	90 e0       	ldi	r25, 0x00	; 0
   16c7a:	97 83       	std	Z+7, r25	; 0x07
   16c7c:	86 83       	std	Z+6, r24	; 0x06
   16c7e:	d5 83       	std	Z+5, r29	; 0x05
   16c80:	c4 83       	std	Z+4, r28	; 0x04
   16c82:	80 e4       	ldi	r24, 0x40	; 64
   16c84:	9b e2       	ldi	r25, 0x2B	; 43
   16c86:	15 c0       	rjmp	.+42     	; 0x16cb2 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16c88:	83 2f       	mov	r24, r19
   16c8a:	90 e0       	ldi	r25, 0x00	; 0
   16c8c:	ed b7       	in	r30, 0x3d	; 61
   16c8e:	fe b7       	in	r31, 0x3e	; 62
   16c90:	97 87       	std	Z+15, r25	; 0x0f
   16c92:	86 87       	std	Z+14, r24	; 0x0e
   16c94:	30 e0       	ldi	r19, 0x00	; 0
   16c96:	35 87       	std	Z+13, r19	; 0x0d
   16c98:	24 87       	std	Z+12, r18	; 0x0c
   16c9a:	13 87       	std	Z+11, r17	; 0x0b
   16c9c:	02 87       	std	Z+10, r16	; 0x0a
   16c9e:	f1 86       	std	Z+9, r15	; 0x09
   16ca0:	e0 86       	std	Z+8, r14	; 0x08
   16ca2:	8c 91       	ld	r24, X
   16ca4:	90 e0       	ldi	r25, 0x00	; 0
   16ca6:	97 83       	std	Z+7, r25	; 0x07
   16ca8:	86 83       	std	Z+6, r24	; 0x06
   16caa:	d5 83       	std	Z+5, r29	; 0x05
   16cac:	c4 83       	std	Z+4, r28	; 0x04
   16cae:	8b ed       	ldi	r24, 0xDB	; 219
   16cb0:	9a e2       	ldi	r25, 0x2A	; 42
   16cb2:	a0 e0       	ldi	r26, 0x00	; 0
   16cb4:	81 83       	std	Z+1, r24	; 0x01
   16cb6:	92 83       	std	Z+2, r25	; 0x02
   16cb8:	a3 83       	std	Z+3, r26	; 0x03
   16cba:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16cbe:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   16cc2:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   16cc6:	81 81       	ldd	r24, Z+1	; 0x01
   16cc8:	90 e0       	ldi	r25, 0x00	; 0
   16cca:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
    return(0);
}
   16cce:	80 e0       	ldi	r24, 0x00	; 0
   16cd0:	90 e0       	ldi	r25, 0x00	; 0
   16cd2:	cd b7       	in	r28, 0x3d	; 61
   16cd4:	de b7       	in	r29, 0x3e	; 62
   16cd6:	2f 96       	adiw	r28, 0x0f	; 15
   16cd8:	e6 e0       	ldi	r30, 0x06	; 6
   16cda:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

00016cde <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   16cde:	ab e0       	ldi	r26, 0x0B	; 11
   16ce0:	b0 e0       	ldi	r27, 0x00	; 0
   16ce2:	e5 e7       	ldi	r30, 0x75	; 117
   16ce4:	f6 eb       	ldi	r31, 0xB6	; 182
   16ce6:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
   16cea:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   16cec:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   16cf0:	90 e0       	ldi	r25, 0x00	; 0
   16cf2:	0e 94 ab 8b 	call	0x11756	; 0x11756 <AMIGO_is_MLA>
   16cf6:	20 91 eb 1e 	lds	r18, 0x1EEB	; 0x801eeb <talking>
   16cfa:	d0 e0       	ldi	r29, 0x00	; 0
   16cfc:	89 2b       	or	r24, r25
   16cfe:	d1 f0       	breq	.+52     	; 0x16d34 <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16d00:	82 2f       	mov	r24, r18
   16d02:	90 e0       	ldi	r25, 0x00	; 0
   16d04:	ed b7       	in	r30, 0x3d	; 61
   16d06:	fe b7       	in	r31, 0x3e	; 62
   16d08:	93 87       	std	Z+11, r25	; 0x0b
   16d0a:	82 87       	std	Z+10, r24	; 0x0a
   16d0c:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   16d10:	90 e0       	ldi	r25, 0x00	; 0
   16d12:	91 87       	std	Z+9, r25	; 0x09
   16d14:	80 87       	std	Z+8, r24	; 0x08
   16d16:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   16d1a:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16d1e:	80 81       	ld	r24, Z
   16d20:	90 e0       	ldi	r25, 0x00	; 0
   16d22:	ed b7       	in	r30, 0x3d	; 61
   16d24:	fe b7       	in	r31, 0x3e	; 62
   16d26:	97 83       	std	Z+7, r25	; 0x07
   16d28:	86 83       	std	Z+6, r24	; 0x06
   16d2a:	d5 83       	std	Z+5, r29	; 0x05
   16d2c:	c4 83       	std	Z+4, r28	; 0x04
   16d2e:	8b e8       	ldi	r24, 0x8B	; 139
   16d30:	9a e2       	ldi	r25, 0x2A	; 42
   16d32:	43 c0       	rjmp	.+134    	; 0x16dba <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   16d34:	82 2f       	mov	r24, r18
   16d36:	90 e0       	ldi	r25, 0x00	; 0
   16d38:	0e 94 bc 8b 	call	0x11778	; 0x11778 <AMIGO_is_MTA>
   16d3c:	20 91 ed 1e 	lds	r18, 0x1EED	; 0x801eed <listening>
   16d40:	40 91 eb 1e 	lds	r20, 0x1EEB	; 0x801eeb <talking>
   16d44:	a0 91 5f 19 	lds	r26, 0x195F	; 0x80195f <AMIGOs>
   16d48:	b0 91 60 19 	lds	r27, 0x1960	; 0x801960 <AMIGOs+0x1>
   16d4c:	89 2b       	or	r24, r25
   16d4e:	89 f0       	breq	.+34     	; 0x16d72 <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16d50:	50 e0       	ldi	r21, 0x00	; 0
   16d52:	ed b7       	in	r30, 0x3d	; 61
   16d54:	fe b7       	in	r31, 0x3e	; 62
   16d56:	53 87       	std	Z+11, r21	; 0x0b
   16d58:	42 87       	std	Z+10, r20	; 0x0a
   16d5a:	30 e0       	ldi	r19, 0x00	; 0
   16d5c:	31 87       	std	Z+9, r19	; 0x09
   16d5e:	20 87       	std	Z+8, r18	; 0x08
   16d60:	8c 91       	ld	r24, X
   16d62:	90 e0       	ldi	r25, 0x00	; 0
   16d64:	97 83       	std	Z+7, r25	; 0x07
   16d66:	86 83       	std	Z+6, r24	; 0x06
   16d68:	d5 83       	std	Z+5, r29	; 0x05
   16d6a:	c4 83       	std	Z+4, r28	; 0x04
   16d6c:	8b e3       	ldi	r24, 0x3B	; 59
   16d6e:	9a e2       	ldi	r25, 0x2A	; 42
   16d70:	24 c0       	rjmp	.+72     	; 0x16dba <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   16d72:	4f 35       	cpi	r20, 0x5F	; 95
   16d74:	91 f4       	brne	.+36     	; 0x16d9a <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16d76:	8f e5       	ldi	r24, 0x5F	; 95
   16d78:	90 e0       	ldi	r25, 0x00	; 0
   16d7a:	ed b7       	in	r30, 0x3d	; 61
   16d7c:	fe b7       	in	r31, 0x3e	; 62
   16d7e:	93 87       	std	Z+11, r25	; 0x0b
   16d80:	82 87       	std	Z+10, r24	; 0x0a
   16d82:	30 e0       	ldi	r19, 0x00	; 0
   16d84:	31 87       	std	Z+9, r19	; 0x09
   16d86:	20 87       	std	Z+8, r18	; 0x08
   16d88:	8c 91       	ld	r24, X
   16d8a:	90 e0       	ldi	r25, 0x00	; 0
   16d8c:	97 83       	std	Z+7, r25	; 0x07
   16d8e:	86 83       	std	Z+6, r24	; 0x06
   16d90:	d5 83       	std	Z+5, r29	; 0x05
   16d92:	c4 83       	std	Z+4, r28	; 0x04
   16d94:	8b ee       	ldi	r24, 0xEB	; 235
   16d96:	99 e2       	ldi	r25, 0x29	; 41
   16d98:	10 c0       	rjmp	.+32     	; 0x16dba <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16d9a:	50 e0       	ldi	r21, 0x00	; 0
   16d9c:	ed b7       	in	r30, 0x3d	; 61
   16d9e:	fe b7       	in	r31, 0x3e	; 62
   16da0:	53 87       	std	Z+11, r21	; 0x0b
   16da2:	42 87       	std	Z+10, r20	; 0x0a
   16da4:	30 e0       	ldi	r19, 0x00	; 0
   16da6:	31 87       	std	Z+9, r19	; 0x09
   16da8:	20 87       	std	Z+8, r18	; 0x08
   16daa:	8c 91       	ld	r24, X
   16dac:	90 e0       	ldi	r25, 0x00	; 0
   16dae:	97 83       	std	Z+7, r25	; 0x07
   16db0:	86 83       	std	Z+6, r24	; 0x06
   16db2:	d5 83       	std	Z+5, r29	; 0x05
   16db4:	c4 83       	std	Z+4, r28	; 0x04
   16db6:	8a e9       	ldi	r24, 0x9A	; 154
   16db8:	99 e2       	ldi	r25, 0x29	; 41
   16dba:	a0 e0       	ldi	r26, 0x00	; 0
   16dbc:	81 83       	std	Z+1, r24	; 0x01
   16dbe:	92 83       	std	Z+2, r25	; 0x02
   16dc0:	a3 83       	std	Z+3, r26	; 0x03
   16dc2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16dc6:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   16dca:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   16dce:	81 81       	ldd	r24, Z+1	; 0x01
   16dd0:	90 e0       	ldi	r25, 0x00	; 0
   16dd2:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
    return(0);
}
   16dd6:	80 e0       	ldi	r24, 0x00	; 0
   16dd8:	90 e0       	ldi	r25, 0x00	; 0
   16dda:	cd b7       	in	r28, 0x3d	; 61
   16ddc:	de b7       	in	r29, 0x3e	; 62
   16dde:	2b 96       	adiw	r28, 0x0b	; 11
   16de0:	e2 e0       	ldi	r30, 0x02	; 2
   16de2:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00016de6 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   16de6:	8f 30       	cpi	r24, 0x0F	; 15
   16de8:	29 f0       	breq	.+10     	; 0x16df4 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   16dea:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   16dee:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16df2:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   16df4:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   16df8:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16dfc:	81 81       	ldd	r24, Z+1	; 0x01
   16dfe:	88 23       	and	r24, r24
   16e00:	29 f0       	breq	.+10     	; 0x16e0c <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   16e02:	87 81       	ldd	r24, Z+7	; 0x07
   16e04:	90 85       	ldd	r25, Z+8	; 0x08
   16e06:	80 64       	ori	r24, 0x40	; 64
   16e08:	90 87       	std	Z+8, r25	; 0x08
   16e0a:	87 83       	std	Z+7, r24	; 0x07
   16e0c:	08 95       	ret

00016e0e <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   16e0e:	ac e1       	ldi	r26, 0x1C	; 28
   16e10:	b0 e0       	ldi	r27, 0x00	; 0
   16e12:	ed e0       	ldi	r30, 0x0D	; 13
   16e14:	f7 eb       	ldi	r31, 0xB7	; 183
   16e16:	0c 94 4a e3 	jmp	0x1c694	; 0x1c694 <__prologue_saves__+0x18>
   16e1a:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16e1c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e20:	85 ff       	sbrs	r24, 5
   16e22:	16 c0       	rjmp	.+44     	; 0x16e50 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   16e24:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   16e28:	90 e0       	ldi	r25, 0x00	; 0
   16e2a:	ed b7       	in	r30, 0x3d	; 61
   16e2c:	fe b7       	in	r31, 0x3e	; 62
   16e2e:	91 87       	std	Z+9, r25	; 0x09
   16e30:	80 87       	std	Z+8, r24	; 0x08
   16e32:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   16e36:	90 e0       	ldi	r25, 0x00	; 0
   16e38:	97 83       	std	Z+7, r25	; 0x07
   16e3a:	86 83       	std	Z+6, r24	; 0x06
   16e3c:	f5 82       	std	Z+5, r15	; 0x05
   16e3e:	e4 82       	std	Z+4, r14	; 0x04
   16e40:	88 e6       	ldi	r24, 0x68	; 104
   16e42:	99 e2       	ldi	r25, 0x29	; 41
   16e44:	a0 e0       	ldi	r26, 0x00	; 0
   16e46:	81 83       	std	Z+1, r24	; 0x01
   16e48:	92 83       	std	Z+2, r25	; 0x02
   16e4a:	a3 83       	std	Z+3, r26	; 0x03
   16e4c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   16e50:	fe e7       	ldi	r31, 0x7E	; 126
   16e52:	ef 16       	cp	r14, r31
   16e54:	f1 04       	cpc	r15, r1
   16e56:	f1 f5       	brne	.+124    	; 0x16ed4 <Amigo_Command+0xc6>
   16e58:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   16e5c:	90 e0       	ldi	r25, 0x00	; 0
   16e5e:	0e 94 bc 8b 	call	0x11778	; 0x11778 <AMIGO_is_MTA>
   16e62:	89 2b       	or	r24, r25
   16e64:	09 f4       	brne	.+2      	; 0x16e68 <Amigo_Command+0x5a>
   16e66:	86 c0       	rjmp	.+268    	; 0x16f74 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16e68:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   16e6c:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   16e70:	81 81       	ldd	r24, Z+1	; 0x01
   16e72:	90 e0       	ldi	r25, 0x00	; 0
   16e74:	0e 94 5f 85 	call	0x10abe	; 0x10abe <gpib_disable_PPR>
        status = EOI_FLAG;
   16e78:	80 e0       	ldi	r24, 0x00	; 0
   16e7a:	91 e0       	ldi	r25, 0x01	; 1
   16e7c:	9c 8f       	std	Y+28, r25	; 0x1c
   16e7e:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16e80:	ae 01       	movw	r20, r28
   16e82:	45 5e       	subi	r20, 0xE5	; 229
   16e84:	5f 4f       	sbci	r21, 0xFF	; 255
   16e86:	60 e0       	ldi	r22, 0x00	; 0
   16e88:	72 e0       	ldi	r23, 0x02	; 2
   16e8a:	87 ee       	ldi	r24, 0xE7	; 231
   16e8c:	9c e1       	ldi	r25, 0x1C	; 28
   16e8e:	0e 94 78 8a 	call	0x114f0	; 0x114f0 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16e92:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   16e96:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   16e9a:	81 81       	ldd	r24, Z+1	; 0x01
   16e9c:	90 e0       	ldi	r25, 0x00	; 0
   16e9e:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16ea2:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16ea4:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16ea6:	88 27       	eor	r24, r24
   16ea8:	90 7d       	andi	r25, 0xD0	; 208
   16eaa:	89 2b       	or	r24, r25
   16eac:	09 f4       	brne	.+2      	; 0x16eb0 <Amigo_Command+0xa2>
   16eae:	89 c2       	rjmp	.+1298   	; 0x173c2 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16eb0:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   16eb4:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16eb8:	81 e0       	ldi	r24, 0x01	; 1
   16eba:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16ebc:	87 81       	ldd	r24, Z+7	; 0x07
   16ebe:	90 85       	ldd	r25, Z+8	; 0x08
   16ec0:	80 62       	ori	r24, 0x20	; 32
   16ec2:	90 87       	std	Z+8, r25	; 0x08
   16ec4:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   16ec6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16eca:	80 ff       	sbrs	r24, 0
   16ecc:	7a c2       	rjmp	.+1268   	; 0x173c2 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   16ece:	86 e4       	ldi	r24, 0x46	; 70
   16ed0:	99 e2       	ldi	r25, 0x29	; 41
   16ed2:	8e c0       	rjmp	.+284    	; 0x16ff0 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   16ed4:	ff e7       	ldi	r31, 0x7F	; 127
   16ed6:	ef 16       	cp	r14, r31
   16ed8:	f1 04       	cpc	r15, r1
   16eda:	09 f0       	breq	.+2      	; 0x16ede <Amigo_Command+0xd0>
   16edc:	4b c0       	rjmp	.+150    	; 0x16f74 <Amigo_Command+0x166>
   16ede:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   16ee2:	90 e0       	ldi	r25, 0x00	; 0
   16ee4:	0e 94 ab 8b 	call	0x11756	; 0x11756 <AMIGO_is_MLA>
   16ee8:	89 2b       	or	r24, r25
   16eea:	09 f4       	brne	.+2      	; 0x16eee <Amigo_Command+0xe0>
   16eec:	43 c0       	rjmp	.+134    	; 0x16f74 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16eee:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   16ef2:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   16ef6:	81 81       	ldd	r24, Z+1	; 0x01
   16ef8:	90 e0       	ldi	r25, 0x00	; 0
   16efa:	0e 94 5f 85 	call	0x10abe	; 0x10abe <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16efe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f02:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   16f04:	0e 94 4f 84 	call	0x1089e	; 0x1089e <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   16f08:	80 e0       	ldi	r24, 0x00	; 0
   16f0a:	91 e0       	ldi	r25, 0x01	; 1
   16f0c:	9c 8f       	std	Y+28, r25	; 0x1c
   16f0e:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16f10:	ae 01       	movw	r20, r28
   16f12:	45 5e       	subi	r20, 0xE5	; 229
   16f14:	5f 4f       	sbci	r21, 0xFF	; 255
   16f16:	60 e0       	ldi	r22, 0x00	; 0
   16f18:	72 e0       	ldi	r23, 0x02	; 2
   16f1a:	87 ee       	ldi	r24, 0xE7	; 231
   16f1c:	9c e1       	ldi	r25, 0x1C	; 28
   16f1e:	0e 94 d6 89 	call	0x113ac	; 0x113ac <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16f22:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f26:	87 ff       	sbrs	r24, 7
   16f28:	04 c0       	rjmp	.+8      	; 0x16f32 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   16f2a:	87 ed       	ldi	r24, 0xD7	; 215
   16f2c:	95 e1       	ldi	r25, 0x15	; 21
   16f2e:	0e 94 61 84 	call	0x108c2	; 0x108c2 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16f32:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   16f36:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   16f3a:	81 81       	ldd	r24, Z+1	; 0x01
   16f3c:	90 e0       	ldi	r25, 0x00	; 0
   16f3e:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16f42:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16f44:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16f46:	88 27       	eor	r24, r24
   16f48:	90 7d       	andi	r25, 0xD0	; 208
   16f4a:	89 2b       	or	r24, r25
   16f4c:	09 f4       	brne	.+2      	; 0x16f50 <Amigo_Command+0x142>
   16f4e:	39 c2       	rjmp	.+1138   	; 0x173c2 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16f50:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   16f54:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16f58:	81 e0       	ldi	r24, 0x01	; 1
   16f5a:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16f5c:	87 81       	ldd	r24, Z+7	; 0x07
   16f5e:	90 85       	ldd	r25, Z+8	; 0x08
   16f60:	80 62       	ori	r24, 0x20	; 32
   16f62:	90 87       	std	Z+8, r25	; 0x08
   16f64:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   16f66:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f6a:	80 ff       	sbrs	r24, 0
   16f6c:	2a c2       	rjmp	.+1108   	; 0x173c2 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   16f6e:	85 e2       	ldi	r24, 0x25	; 37
   16f70:	99 e2       	ldi	r25, 0x29	; 41
   16f72:	3e c0       	rjmp	.+124    	; 0x16ff0 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16f74:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   16f78:	90 e0       	ldi	r25, 0x00	; 0
   16f7a:	0e 94 ab 8b 	call	0x11756	; 0x11756 <AMIGO_is_MLA>
   16f7e:	89 2b       	or	r24, r25
   16f80:	19 f4       	brne	.+6      	; 0x16f88 <Amigo_Command+0x17a>
        return(0);
   16f82:	80 e0       	ldi	r24, 0x00	; 0
   16f84:	90 e0       	ldi	r25, 0x00	; 0
   16f86:	25 c2       	rjmp	.+1098   	; 0x173d2 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16f88:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   16f8c:	90 e0       	ldi	r25, 0x00	; 0
   16f8e:	0e 94 bc 8b 	call	0x11778	; 0x11778 <AMIGO_is_MTA>
   16f92:	89 2b       	or	r24, r25
   16f94:	b1 f7       	brne	.-20     	; 0x16f82 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16f96:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   16f9a:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   16f9e:	81 81       	ldd	r24, Z+1	; 0x01
   16fa0:	90 e0       	ldi	r25, 0x00	; 0
   16fa2:	0e 94 5f 85 	call	0x10abe	; 0x10abe <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   16fa6:	80 e0       	ldi	r24, 0x00	; 0
   16fa8:	91 e0       	ldi	r25, 0x01	; 1
   16faa:	9c 8f       	std	Y+28, r25	; 0x1c
   16fac:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16fae:	ae 01       	movw	r20, r28
   16fb0:	45 5e       	subi	r20, 0xE5	; 229
   16fb2:	5f 4f       	sbci	r21, 0xFF	; 255
   16fb4:	60 e0       	ldi	r22, 0x00	; 0
   16fb6:	72 e0       	ldi	r23, 0x02	; 2
   16fb8:	87 ee       	ldi	r24, 0xE7	; 231
   16fba:	9c e1       	ldi	r25, 0x1C	; 28
   16fbc:	0e 94 d6 89 	call	0x113ac	; 0x113ac <gpib_read_str>
   16fc0:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   16fc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16fc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16fc6:	88 27       	eor	r24, r24
   16fc8:	90 7d       	andi	r25, 0xD0	; 208
   16fca:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16fce:	89 2b       	or	r24, r25
   16fd0:	c1 f0       	breq	.+48     	; 0x17002 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   16fd2:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   16fd6:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   16fda:	81 e0       	ldi	r24, 0x01	; 1
   16fdc:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16fde:	87 81       	ldd	r24, Z+7	; 0x07
   16fe0:	90 85       	ldd	r25, Z+8	; 0x08
   16fe2:	80 62       	ori	r24, 0x20	; 32
   16fe4:	90 87       	std	Z+8, r25	; 0x08
   16fe6:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   16fe8:	20 ff       	sbrs	r18, 0
   16fea:	eb c1       	rjmp	.+982    	; 0x173c2 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   16fec:	84 e0       	ldi	r24, 0x04	; 4
   16fee:	99 e2       	ldi	r25, 0x29	; 41
   16ff0:	a0 e0       	ldi	r26, 0x00	; 0
   16ff2:	ed b7       	in	r30, 0x3d	; 61
   16ff4:	fe b7       	in	r31, 0x3e	; 62
   16ff6:	81 83       	std	Z+1, r24	; 0x01
   16ff8:	92 83       	std	Z+2, r25	; 0x02
   16ffa:	a3 83       	std	Z+3, r26	; 0x03
   16ffc:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   17000:	e0 c1       	rjmp	.+960    	; 0x173c2 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17002:	25 ff       	sbrs	r18, 5
   17004:	0e c0       	rjmp	.+28     	; 0x17022 <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   17006:	ed b7       	in	r30, 0x3d	; 61
   17008:	fe b7       	in	r31, 0x3e	; 62
   1700a:	17 83       	std	Z+7, r17	; 0x07
   1700c:	06 83       	std	Z+6, r16	; 0x06
   1700e:	f5 82       	std	Z+5, r15	; 0x05
   17010:	e4 82       	std	Z+4, r14	; 0x04
   17012:	85 ed       	ldi	r24, 0xD5	; 213
   17014:	98 e2       	ldi	r25, 0x28	; 40
   17016:	a0 e0       	ldi	r26, 0x00	; 0
   17018:	81 83       	std	Z+1, r24	; 0x01
   1701a:	92 83       	std	Z+2, r25	; 0x02
   1701c:	a3 83       	std	Z+3, r26	; 0x03
   1701e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            secondary, len);
#endif
    if(!len)
   17022:	01 15       	cp	r16, r1
   17024:	11 05       	cpc	r17, r1
   17026:	61 f4       	brne	.+24     	; 0x17040 <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   17028:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   1702c:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   17030:	81 e0       	ldi	r24, 0x01	; 1
   17032:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   17034:	87 81       	ldd	r24, Z+7	; 0x07
   17036:	90 85       	ldd	r25, Z+8	; 0x08
   17038:	80 62       	ori	r24, 0x20	; 32
   1703a:	90 87       	std	Z+8, r25	; 0x08
   1703c:	87 83       	std	Z+7, r24	; 0x07
   1703e:	c1 c1       	rjmp	.+898    	; 0x173c2 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   17040:	60 91 e7 1c 	lds	r22, 0x1CE7	; 0x801ce7 <gpib_iobuff>

    if (secondary == 0x68)
   17044:	f8 e6       	ldi	r31, 0x68	; 104
   17046:	ef 16       	cp	r14, r31
   17048:	f1 04       	cpc	r15, r1
   1704a:	09 f0       	breq	.+2      	; 0x1704e <Amigo_Command+0x240>
   1704c:	28 c1       	rjmp	.+592    	; 0x1729e <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   1704e:	61 11       	cpse	r22, r1
   17050:	2e c0       	rjmp	.+92     	; 0x170ae <Amigo_Command+0x2a0>
   17052:	02 30       	cpi	r16, 0x02	; 2
   17054:	11 05       	cpc	r17, r1
   17056:	09 f0       	breq	.+2      	; 0x1705a <Amigo_Command+0x24c>
   17058:	b9 c1       	rjmp	.+882    	; 0x173cc <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1705a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1705e:	85 ff       	sbrs	r24, 5
   17060:	0a c0       	rjmp	.+20     	; 0x17076 <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   17062:	85 eb       	ldi	r24, 0xB5	; 181
   17064:	98 e2       	ldi	r25, 0x28	; 40
   17066:	a0 e0       	ldi	r26, 0x00	; 0
   17068:	ed b7       	in	r30, 0x3d	; 61
   1706a:	fe b7       	in	r31, 0x3e	; 62
   1706c:	81 83       	std	Z+1, r24	; 0x01
   1706e:	92 83       	std	Z+2, r25	; 0x02
   17070:	a3 83       	std	Z+3, r26	; 0x03
   17072:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   17076:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   1707a:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   1707e:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   17080:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   17082:	10 86       	std	Z+8, r1	; 0x08
   17084:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   17086:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   17088:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <gpib_iobuff+0x1>
   1708c:	98 2f       	mov	r25, r24
   1708e:	92 95       	swap	r25
   17090:	96 95       	lsr	r25
   17092:	96 95       	lsr	r25
   17094:	93 70       	andi	r25, 0x03	; 3
   17096:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   17098:	8f 73       	andi	r24, 0x3F	; 63
   1709a:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   1709c:	ce 01       	movw	r24, r28
   1709e:	0a 96       	adiw	r24, 0x0a	; 10
   170a0:	d1 d9       	rcall	.-3166   	; 0x16444 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   170a2:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   170a6:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   170aa:	85 e0       	ldi	r24, 0x05	; 5
   170ac:	19 c1       	rjmp	.+562    	; 0x172e0 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   170ae:	62 30       	cpi	r22, 0x02	; 2
   170b0:	09 f0       	breq	.+2      	; 0x170b4 <Amigo_Command+0x2a6>
   170b2:	3f c0       	rjmp	.+126    	; 0x17132 <Amigo_Command+0x324>
   170b4:	05 30       	cpi	r16, 0x05	; 5
   170b6:	11 05       	cpc	r17, r1
   170b8:	d1 f4       	brne	.+52     	; 0x170ee <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   170ba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   170be:	85 ff       	sbrs	r24, 5
   170c0:	0a c0       	rjmp	.+20     	; 0x170d6 <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   170c2:	81 ea       	ldi	r24, 0xA1	; 161
   170c4:	98 e2       	ldi	r25, 0x28	; 40
   170c6:	a0 e0       	ldi	r26, 0x00	; 0
   170c8:	ed b7       	in	r30, 0x3d	; 61
   170ca:	fe b7       	in	r31, 0x3e	; 62
   170cc:	81 83       	std	Z+1, r24	; 0x01
   170ce:	92 83       	std	Z+2, r25	; 0x02
   170d0:	a3 83       	std	Z+3, r26	; 0x03
   170d2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   170d6:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <gpib_iobuff+0x1>
   170da:	85 de       	rcall	.-758    	; 0x16de6 <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   170dc:	80 91 e9 1c 	lds	r24, 0x1CE9	; 0x801ce9 <gpib_iobuff+0x2>
   170e0:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   170e2:	80 91 ea 1c 	lds	r24, 0x1CEA	; 0x801cea <gpib_iobuff+0x3>
   170e6:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   170e8:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x4>
   170ec:	1d c0       	rjmp	.+58     	; 0x17128 <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   170ee:	06 30       	cpi	r16, 0x06	; 6
   170f0:	11 05       	cpc	r17, r1
   170f2:	09 f0       	breq	.+2      	; 0x170f6 <Amigo_Command+0x2e8>
   170f4:	6b c1       	rjmp	.+726    	; 0x173cc <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   170f6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   170fa:	85 ff       	sbrs	r24, 5
   170fc:	0a c0       	rjmp	.+20     	; 0x17112 <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   170fe:	8d e8       	ldi	r24, 0x8D	; 141
   17100:	98 e2       	ldi	r25, 0x28	; 40
   17102:	a0 e0       	ldi	r26, 0x00	; 0
   17104:	ed b7       	in	r30, 0x3d	; 61
   17106:	fe b7       	in	r31, 0x3e	; 62
   17108:	81 83       	std	Z+1, r24	; 0x01
   1710a:	92 83       	std	Z+2, r25	; 0x02
   1710c:	a3 83       	std	Z+3, r26	; 0x03
   1710e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17112:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <gpib_iobuff+0x1>
   17116:	67 de       	rcall	.-818    	; 0x16de6 <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   17118:	80 91 ea 1c 	lds	r24, 0x1CEA	; 0x801cea <gpib_iobuff+0x3>
   1711c:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   1711e:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x4>
   17122:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   17124:	80 91 ec 1c 	lds	r24, 0x1CEC	; 0x801cec <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   17128:	8f 87       	std	Y+15, r24	; 0x0f
   1712a:	ce 01       	movw	r24, r28
   1712c:	0a 96       	adiw	r24, 0x0a	; 10
   1712e:	8a d9       	rcall	.-3308   	; 0x16444 <amigo_seek>
   17130:	d8 c0       	rjmp	.+432    	; 0x172e2 <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   17132:	63 30       	cpi	r22, 0x03	; 3
   17134:	e9 f4       	brne	.+58     	; 0x17170 <Amigo_Command+0x362>
   17136:	02 30       	cpi	r16, 0x02	; 2
   17138:	11 05       	cpc	r17, r1
   1713a:	09 f0       	breq	.+2      	; 0x1713e <Amigo_Command+0x330>
   1713c:	47 c1       	rjmp	.+654    	; 0x173cc <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1713e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17142:	85 ff       	sbrs	r24, 5
   17144:	0a c0       	rjmp	.+20     	; 0x1715a <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   17146:	84 e6       	ldi	r24, 0x64	; 100
   17148:	98 e2       	ldi	r25, 0x28	; 40
   1714a:	a0 e0       	ldi	r26, 0x00	; 0
   1714c:	ed b7       	in	r30, 0x3d	; 61
   1714e:	fe b7       	in	r31, 0x3e	; 62
   17150:	81 83       	std	Z+1, r24	; 0x01
   17152:	92 83       	std	Z+2, r25	; 0x02
   17154:	a3 83       	std	Z+3, r26	; 0x03
   17156:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1715a:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <gpib_iobuff+0x1>
            amigo_request_status();
   1715e:	43 de       	rcall	.-890    	; 0x16de6 <amigo_check_unit>
   17160:	3d d8       	rcall	.-3974   	; 0x161dc <amigo_request_status>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   17162:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   17166:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   1716a:	83 e0       	ldi	r24, 0x03	; 3
   1716c:	80 83       	st	Z, r24
   1716e:	29 c1       	rjmp	.+594    	; 0x173c2 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   17170:	65 30       	cpi	r22, 0x05	; 5
   17172:	d9 f4       	brne	.+54     	; 0x171aa <Amigo_Command+0x39c>
   17174:	02 30       	cpi	r16, 0x02	; 2
   17176:	11 05       	cpc	r17, r1
   17178:	09 f0       	breq	.+2      	; 0x1717c <Amigo_Command+0x36e>
   1717a:	28 c1       	rjmp	.+592    	; 0x173cc <Amigo_Command+0x5be>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1717c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17180:	85 ff       	sbrs	r24, 5
   17182:	0a c0       	rjmp	.+20     	; 0x17198 <Amigo_Command+0x38a>
                printf("[AMIGO Read Unbuffered Command]\n");
   17184:	83 e4       	ldi	r24, 0x43	; 67
   17186:	98 e2       	ldi	r25, 0x28	; 40
   17188:	a0 e0       	ldi	r26, 0x00	; 0
   1718a:	ed b7       	in	r30, 0x3d	; 61
   1718c:	fe b7       	in	r31, 0x3e	; 62
   1718e:	81 83       	std	Z+1, r24	; 0x01
   17190:	92 83       	std	Z+2, r25	; 0x02
   17192:	a3 83       	std	Z+3, r26	; 0x03
   17194:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17198:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <gpib_iobuff+0x1>
   1719c:	24 de       	rcall	.-952    	; 0x16de6 <amigo_check_unit>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   1719e:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   171a2:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   171a6:	86 e0       	ldi	r24, 0x06	; 6
   171a8:	e7 c0       	rjmp	.+462    	; 0x17378 <Amigo_Command+0x56a>
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   171aa:	67 30       	cpi	r22, 0x07	; 7
   171ac:	f9 f4       	brne	.+62     	; 0x171ec <Amigo_Command+0x3de>
   171ae:	04 30       	cpi	r16, 0x04	; 4
   171b0:	11 05       	cpc	r17, r1
   171b2:	09 f0       	breq	.+2      	; 0x171b6 <Amigo_Command+0x3a8>
   171b4:	0b c1       	rjmp	.+534    	; 0x173cc <Amigo_Command+0x5be>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   171b6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   171ba:	85 ff       	sbrs	r24, 5
   171bc:	0a c0       	rjmp	.+20     	; 0x171d2 <Amigo_Command+0x3c4>
                printf("[AMIGO Verify]\n");
   171be:	83 e3       	ldi	r24, 0x33	; 51
   171c0:	98 e2       	ldi	r25, 0x28	; 40
   171c2:	a0 e0       	ldi	r26, 0x00	; 0
   171c4:	ed b7       	in	r30, 0x3d	; 61
   171c6:	fe b7       	in	r31, 0x3e	; 62
   171c8:	81 83       	std	Z+1, r24	; 0x01
   171ca:	92 83       	std	Z+2, r25	; 0x02
   171cc:	a3 83       	std	Z+3, r26	; 0x03
   171ce:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   171d2:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <gpib_iobuff+0x1>
   171d6:	07 de       	rcall	.-1010   	; 0x16de6 <amigo_check_unit>
            sectors = (0xff & *ptr++) << 8;
   171d8:	80 91 e9 1c 	lds	r24, 0x1CE9	; 0x801ce9 <gpib_iobuff+0x2>
   171dc:	90 e0       	ldi	r25, 0x00	; 0
   171de:	98 2f       	mov	r25, r24
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   171e0:	88 27       	eor	r24, r24
   171e2:	20 91 ea 1c 	lds	r18, 0x1CEA	; 0x801cea <gpib_iobuff+0x3>
   171e6:	82 2b       	or	r24, r18
   171e8:	58 d9       	rcall	.-3408   	; 0x1649a <amigo_verify>
   171ea:	f3 c0       	rjmp	.+486    	; 0x173d2 <Amigo_Command+0x5c4>
        }
        else if(op == 0x08 && len == 2)
   171ec:	68 30       	cpi	r22, 0x08	; 8
   171ee:	d9 f4       	brne	.+54     	; 0x17226 <Amigo_Command+0x418>
   171f0:	02 30       	cpi	r16, 0x02	; 2
   171f2:	11 05       	cpc	r17, r1
   171f4:	09 f0       	breq	.+2      	; 0x171f8 <Amigo_Command+0x3ea>
   171f6:	ea c0       	rjmp	.+468    	; 0x173cc <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   171f8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   171fc:	85 ff       	sbrs	r24, 5
   171fe:	0a c0       	rjmp	.+20     	; 0x17214 <Amigo_Command+0x406>
                printf("[AMIGO Write Unbuffered Command]\n");
   17200:	81 e1       	ldi	r24, 0x11	; 17
   17202:	98 e2       	ldi	r25, 0x28	; 40
   17204:	a0 e0       	ldi	r26, 0x00	; 0
   17206:	ed b7       	in	r30, 0x3d	; 61
   17208:	fe b7       	in	r31, 0x3e	; 62
   1720a:	81 83       	std	Z+1, r24	; 0x01
   1720c:	92 83       	std	Z+2, r25	; 0x02
   1720e:	a3 83       	std	Z+3, r26	; 0x03
   17210:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17214:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <gpib_iobuff+0x1>
   17218:	e6 dd       	rcall	.-1076   	; 0x16de6 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   1721a:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   1721e:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   17222:	88 e0       	ldi	r24, 0x08	; 8
   17224:	5d c0       	rjmp	.+186    	; 0x172e0 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   17226:	86 2f       	mov	r24, r22
   17228:	8f 7d       	andi	r24, 0xDF	; 223
   1722a:	8b 30       	cpi	r24, 0x0B	; 11
   1722c:	d9 f4       	brne	.+54     	; 0x17264 <Amigo_Command+0x456>
   1722e:	02 30       	cpi	r16, 0x02	; 2
   17230:	11 05       	cpc	r17, r1
   17232:	09 f0       	breq	.+2      	; 0x17236 <Amigo_Command+0x428>
   17234:	cb c0       	rjmp	.+406    	; 0x173cc <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17236:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1723a:	85 ff       	sbrs	r24, 5
   1723c:	0a c0       	rjmp	.+20     	; 0x17252 <Amigo_Command+0x444>
                printf("[AMIGO Initialize Command]\n");
   1723e:	85 ef       	ldi	r24, 0xF5	; 245
   17240:	97 e2       	ldi	r25, 0x27	; 39
   17242:	a0 e0       	ldi	r26, 0x00	; 0
   17244:	ed b7       	in	r30, 0x3d	; 61
   17246:	fe b7       	in	r31, 0x3e	; 62
   17248:	81 83       	std	Z+1, r24	; 0x01
   1724a:	92 83       	std	Z+2, r25	; 0x02
   1724c:	a3 83       	std	Z+3, r26	; 0x03
   1724e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17252:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <gpib_iobuff+0x1>
   17256:	c7 dd       	rcall	.-1138   	; 0x16de6 <amigo_check_unit>
            AMIGOs->state = AMIGO_INITIALIZE;
   17258:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   1725c:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   17260:	8a e0       	ldi	r24, 0x0A	; 10
   17262:	3e c0       	rjmp	.+124    	; 0x172e0 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   17264:	64 31       	cpi	r22, 0x14	; 20
   17266:	09 f0       	breq	.+2      	; 0x1726a <Amigo_Command+0x45c>
   17268:	b1 c0       	rjmp	.+354    	; 0x173cc <Amigo_Command+0x5be>
   1726a:	02 30       	cpi	r16, 0x02	; 2
   1726c:	11 05       	cpc	r17, r1
   1726e:	09 f0       	breq	.+2      	; 0x17272 <Amigo_Command+0x464>
   17270:	ad c0       	rjmp	.+346    	; 0x173cc <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17272:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17276:	85 ff       	sbrs	r24, 5
   17278:	0a c0       	rjmp	.+20     	; 0x1728e <Amigo_Command+0x480>
                printf("[AMIGO Request Logical Address Command]\n");
   1727a:	8c ec       	ldi	r24, 0xCC	; 204
   1727c:	97 e2       	ldi	r25, 0x27	; 39
   1727e:	a0 e0       	ldi	r26, 0x00	; 0
   17280:	ed b7       	in	r30, 0x3d	; 61
   17282:	fe b7       	in	r31, 0x3e	; 62
   17284:	81 83       	std	Z+1, r24	; 0x01
   17286:	92 83       	std	Z+2, r25	; 0x02
   17288:	a3 83       	std	Z+3, r26	; 0x03
   1728a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
            amigo_request_logical_address();
   1728e:	0e 94 e0 b0 	call	0x161c0	; 0x161c0 <amigo_request_logical_address>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   17292:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   17296:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   1729a:	84 e0       	ldi	r24, 0x04	; 4
   1729c:	21 c0       	rjmp	.+66     	; 0x172e0 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   1729e:	f9 e6       	ldi	r31, 0x69	; 105
   172a0:	ef 16       	cp	r14, r31
   172a2:	f1 04       	cpc	r15, r1
   172a4:	39 f5       	brne	.+78     	; 0x172f4 <Amigo_Command+0x4e6>
    {
        if(op == 0x08 && len == 2)
   172a6:	68 30       	cpi	r22, 0x08	; 8
   172a8:	09 f0       	breq	.+2      	; 0x172ac <Amigo_Command+0x49e>
   172aa:	90 c0       	rjmp	.+288    	; 0x173cc <Amigo_Command+0x5be>
   172ac:	02 30       	cpi	r16, 0x02	; 2
   172ae:	11 05       	cpc	r17, r1
   172b0:	09 f0       	breq	.+2      	; 0x172b4 <Amigo_Command+0x4a6>
   172b2:	8c c0       	rjmp	.+280    	; 0x173cc <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   172b4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   172b8:	85 ff       	sbrs	r24, 5
   172ba:	0a c0       	rjmp	.+20     	; 0x172d0 <Amigo_Command+0x4c2>
                printf("[AMIGO Write Buffered Command]\n");
   172bc:	8c ea       	ldi	r24, 0xAC	; 172
   172be:	97 e2       	ldi	r25, 0x27	; 39
   172c0:	a0 e0       	ldi	r26, 0x00	; 0
   172c2:	ed b7       	in	r30, 0x3d	; 61
   172c4:	fe b7       	in	r31, 0x3e	; 62
   172c6:	81 83       	std	Z+1, r24	; 0x01
   172c8:	92 83       	std	Z+2, r25	; 0x02
   172ca:	a3 83       	std	Z+3, r26	; 0x03
   172cc:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   172d0:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <gpib_iobuff+0x1>
   172d4:	88 dd       	rcall	.-1264   	; 0x16de6 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   172d6:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   172da:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   172de:	89 e0       	ldi	r24, 0x09	; 9
   172e0:	80 83       	st	Z, r24
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   172e2:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   172e6:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   172ea:	81 81       	ldd	r24, Z+1	; 0x01
   172ec:	90 e0       	ldi	r25, 0x00	; 0
   172ee:	0e 94 29 85 	call	0x10a52	; 0x10a52 <gpib_enable_PPR>
   172f2:	67 c0       	rjmp	.+206    	; 0x173c2 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   172f4:	fa e6       	ldi	r31, 0x6A	; 106
   172f6:	ef 16       	cp	r14, r31
   172f8:	f1 04       	cpc	r15, r1
   172fa:	09 f0       	breq	.+2      	; 0x172fe <Amigo_Command+0x4f0>
   172fc:	40 c0       	rjmp	.+128    	; 0x1737e <Amigo_Command+0x570>
    {
        if(op == 0x08 && len == 2)
   172fe:	68 30       	cpi	r22, 0x08	; 8
   17300:	f1 f4       	brne	.+60     	; 0x1733e <Amigo_Command+0x530>
   17302:	02 30       	cpi	r16, 0x02	; 2
   17304:	11 05       	cpc	r17, r1
   17306:	09 f0       	breq	.+2      	; 0x1730a <Amigo_Command+0x4fc>
   17308:	61 c0       	rjmp	.+194    	; 0x173cc <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1730a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1730e:	85 ff       	sbrs	r24, 5
   17310:	0a c0       	rjmp	.+20     	; 0x17326 <Amigo_Command+0x518>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   17312:	81 e8       	ldi	r24, 0x81	; 129
   17314:	97 e2       	ldi	r25, 0x27	; 39
   17316:	a0 e0       	ldi	r26, 0x00	; 0
   17318:	ed b7       	in	r30, 0x3d	; 61
   1731a:	fe b7       	in	r31, 0x3e	; 62
   1731c:	81 83       	std	Z+1, r24	; 0x01
   1731e:	92 83       	std	Z+2, r25	; 0x02
   17320:	a3 83       	std	Z+3, r26	; 0x03
   17322:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17326:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <gpib_iobuff+0x1>
   1732a:	5d dd       	rcall	.-1350   	; 0x16de6 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   1732c:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   17330:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   17334:	82 e0       	ldi	r24, 0x02	; 2
   17336:	80 83       	st	Z, r24
            amigo_request_status();
   17338:	0e 94 ee b0 	call	0x161dc	; 0x161dc <amigo_request_status>
   1733c:	42 c0       	rjmp	.+132    	; 0x173c2 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   1733e:	65 30       	cpi	r22, 0x05	; 5
   17340:	09 f0       	breq	.+2      	; 0x17344 <Amigo_Command+0x536>
   17342:	44 c0       	rjmp	.+136    	; 0x173cc <Amigo_Command+0x5be>
   17344:	02 30       	cpi	r16, 0x02	; 2
   17346:	11 05       	cpc	r17, r1
   17348:	09 f0       	breq	.+2      	; 0x1734c <Amigo_Command+0x53e>
   1734a:	40 c0       	rjmp	.+128    	; 0x173cc <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1734c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17350:	85 ff       	sbrs	r24, 5
   17352:	0a c0       	rjmp	.+20     	; 0x17368 <Amigo_Command+0x55a>
                printf("[AMIGO Read Buffered Command]\n");
   17354:	82 e6       	ldi	r24, 0x62	; 98
   17356:	97 e2       	ldi	r25, 0x27	; 39
   17358:	a0 e0       	ldi	r26, 0x00	; 0
   1735a:	ed b7       	in	r30, 0x3d	; 61
   1735c:	fe b7       	in	r31, 0x3e	; 62
   1735e:	81 83       	std	Z+1, r24	; 0x01
   17360:	92 83       	std	Z+2, r25	; 0x02
   17362:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17364:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   17368:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   1736c:	3c dd       	rcall	.-1416   	; 0x16de6 <amigo_check_unit>
   1736e:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   17372:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   17376:	87 e0       	ldi	r24, 0x07	; 7

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   17378:	80 83       	st	Z, r24
   1737a:	c5 d9       	rcall	.-3190   	; 0x16706 <amigo_buffered_read_command>
   1737c:	2a c0       	rjmp	.+84     	; 0x173d2 <Amigo_Command+0x5c4>
#endif
        }
    }
    else if (secondary == 0x6C)
   1737e:	fc e6       	ldi	r31, 0x6C	; 108
   17380:	ef 16       	cp	r14, r31
   17382:	f1 04       	cpc	r15, r1
   17384:	d1 f4       	brne	.+52     	; 0x173ba <Amigo_Command+0x5ac>
    {
        if(op == 0x18 && len == 5)
   17386:	68 31       	cpi	r22, 0x18	; 24
   17388:	09 f5       	brne	.+66     	; 0x173cc <Amigo_Command+0x5be>
   1738a:	05 30       	cpi	r16, 0x05	; 5
   1738c:	11 05       	cpc	r17, r1
   1738e:	f1 f4       	brne	.+60     	; 0x173cc <Amigo_Command+0x5be>
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17390:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17394:	85 ff       	sbrs	r24, 5
   17396:	0a c0       	rjmp	.+20     	; 0x173ac <Amigo_Command+0x59e>
                printf("[AMIGO Format]\n");
   17398:	82 e5       	ldi	r24, 0x52	; 82
   1739a:	97 e2       	ldi	r25, 0x27	; 39
   1739c:	a0 e0       	ldi	r26, 0x00	; 0
   1739e:	ed b7       	in	r30, 0x3d	; 61
   173a0:	fe b7       	in	r31, 0x3e	; 62
   173a2:	81 83       	std	Z+1, r24	; 0x01
   173a4:	92 83       	std	Z+2, r25	; 0x02
   173a6:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   173a8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   173ac:	80 91 e8 1c 	lds	r24, 0x1CE8	; 0x801ce8 <gpib_iobuff+0x1>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   173b0:	1a dd       	rcall	.-1484   	; 0x16de6 <amigo_check_unit>
   173b2:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <gpib_iobuff+0x4>
   173b6:	0f d9       	rcall	.-3554   	; 0x165d6 <amigo_format>
   173b8:	04 c0       	rjmp	.+8      	; 0x173c2 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   173ba:	f0 e7       	ldi	r31, 0x70	; 112
   173bc:	ef 16       	cp	r14, r31
   173be:	f1 04       	cpc	r15, r1
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   173c0:	29 f4       	brne	.+10     	; 0x173cc <Amigo_Command+0x5be>
   173c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
   173c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
   173c6:	88 27       	eor	r24, r24
   173c8:	90 7d       	andi	r25, 0xD0	; 208
    }
    return ( amigo_todo_op(secondary, op, len) );
   173ca:	03 c0       	rjmp	.+6      	; 0x173d2 <Amigo_Command+0x5c4>
   173cc:	a8 01       	movw	r20, r16
   173ce:	8e 2d       	mov	r24, r14
   173d0:	ed db       	rcall	.-2086   	; 0x16bac <amigo_todo_op>
}
   173d2:	6c 96       	adiw	r28, 0x1c	; 28
   173d4:	e6 e0       	ldi	r30, 0x06	; 6
   173d6:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

000173da <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   173da:	a9 e0       	ldi	r26, 0x09	; 9
   173dc:	b0 e0       	ldi	r27, 0x00	; 0
   173de:	e3 ef       	ldi	r30, 0xF3	; 243
   173e0:	f9 eb       	ldi	r31, 0xB9	; 185
   173e2:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
   173e6:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173ec:	85 ff       	sbrs	r24, 5
   173ee:	16 c0       	rjmp	.+44     	; 0x1741c <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   173f0:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   173f4:	90 e0       	ldi	r25, 0x00	; 0
   173f6:	ed b7       	in	r30, 0x3d	; 61
   173f8:	fe b7       	in	r31, 0x3e	; 62
   173fa:	91 87       	std	Z+9, r25	; 0x09
   173fc:	80 87       	std	Z+8, r24	; 0x08
   173fe:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   17402:	90 e0       	ldi	r25, 0x00	; 0
   17404:	97 83       	std	Z+7, r25	; 0x07
   17406:	86 83       	std	Z+6, r24	; 0x06
   17408:	d5 83       	std	Z+5, r29	; 0x05
   1740a:	c4 83       	std	Z+4, r28	; 0x04
   1740c:	80 e2       	ldi	r24, 0x20	; 32
   1740e:	97 e2       	ldi	r25, 0x27	; 39
   17410:	a0 e0       	ldi	r26, 0x00	; 0
   17412:	81 83       	std	Z+1, r24	; 0x01
   17414:	92 83       	std	Z+2, r25	; 0x02
   17416:	a3 83       	std	Z+3, r26	; 0x03
   17418:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   1741c:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   17420:	8f 35       	cpi	r24, 0x5F	; 95
   17422:	09 f4       	brne	.+2      	; 0x17426 <Amigo_Execute+0x4c>
   17424:	ad c0       	rjmp	.+346    	; 0x17580 <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17426:	90 e0       	ldi	r25, 0x00	; 0
   17428:	0e 94 bc 8b 	call	0x11778	; 0x11778 <AMIGO_is_MTA>
   1742c:	89 2b       	or	r24, r25
   1742e:	39 f0       	breq	.+14     	; 0x1743e <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   17430:	ce 01       	movw	r24, r28
   17432:	87 7f       	andi	r24, 0xF7	; 247
   17434:	80 36       	cpi	r24, 0x60	; 96
   17436:	91 05       	cpc	r25, r1
   17438:	09 f0       	breq	.+2      	; 0x1743c <Amigo_Execute+0x62>
   1743a:	a2 c0       	rjmp	.+324    	; 0x17580 <Amigo_Execute+0x1a6>
   1743c:	08 c0       	rjmp	.+16     	; 0x1744e <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   1743e:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   17442:	90 e0       	ldi	r25, 0x00	; 0
   17444:	0e 94 ab 8b 	call	0x11756	; 0x11756 <AMIGO_is_MLA>
   17448:	89 2b       	or	r24, r25
   1744a:	91 f7       	brne	.-28     	; 0x17430 <Amigo_Execute+0x56>
   1744c:	99 c0       	rjmp	.+306    	; 0x17580 <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1744e:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   17452:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   17456:	81 81       	ldd	r24, Z+1	; 0x01
   17458:	90 e0       	ldi	r25, 0x00	; 0
   1745a:	0e 94 5f 85 	call	0x10abe	; 0x10abe <gpib_disable_PPR>

    if(secondary == 0x60)
   1745e:	c0 36       	cpi	r28, 0x60	; 96
   17460:	d1 05       	cpc	r29, r1
   17462:	09 f0       	breq	.+2      	; 0x17466 <Amigo_Execute+0x8c>
   17464:	4e c0       	rjmp	.+156    	; 0x17502 <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   17466:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   1746a:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   1746e:	e0 81       	ld	r30, Z
   17470:	8e 2f       	mov	r24, r30
   17472:	90 e0       	ldi	r25, 0x00	; 0
   17474:	8b 30       	cpi	r24, 0x0B	; 11
   17476:	91 05       	cpc	r25, r1
   17478:	08 f0       	brcs	.+2      	; 0x1747c <Amigo_Execute+0xa2>
   1747a:	41 c0       	rjmp	.+130    	; 0x174fe <Amigo_Execute+0x124>
   1747c:	fc 01       	movw	r30, r24
   1747e:	ea 52       	subi	r30, 0x2A	; 42
   17480:	ff 4f       	sbci	r31, 0xFF	; 255
   17482:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17486:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1748a:	85 ff       	sbrs	r24, 5
   1748c:	18 c0       	rjmp	.+48     	; 0x174be <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   1748e:	80 e0       	ldi	r24, 0x00	; 0
   17490:	97 e2       	ldi	r25, 0x27	; 39
   17492:	0d c0       	rjmp	.+26     	; 0x174ae <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17494:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17498:	85 ff       	sbrs	r24, 5
   1749a:	11 c0       	rjmp	.+34     	; 0x174be <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   1749c:	8f ed       	ldi	r24, 0xDF	; 223
   1749e:	96 e2       	ldi	r25, 0x26	; 38
   174a0:	06 c0       	rjmp	.+12     	; 0x174ae <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   174a2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174a6:	85 ff       	sbrs	r24, 5
   174a8:	0a c0       	rjmp	.+20     	; 0x174be <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   174aa:	80 ec       	ldi	r24, 0xC0	; 192
   174ac:	96 e2       	ldi	r25, 0x26	; 38
   174ae:	a0 e0       	ldi	r26, 0x00	; 0
   174b0:	ed b7       	in	r30, 0x3d	; 61
   174b2:	fe b7       	in	r31, 0x3e	; 62
   174b4:	81 83       	std	Z+1, r24	; 0x01
   174b6:	92 83       	std	Z+2, r25	; 0x02
   174b8:	a3 83       	std	Z+3, r26	; 0x03
   174ba:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   174be:	b0 d9       	rcall	.-3232   	; 0x16820 <amigo_buffered_read_execute>
   174c0:	61 c0       	rjmp	.+194    	; 0x17584 <Amigo_Execute+0x1aa>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   174c2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174c6:	85 ff       	sbrs	r24, 5
   174c8:	18 c0       	rjmp	.+48     	; 0x174fa <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Unbuffered]\n");
   174ca:	8e e9       	ldi	r24, 0x9E	; 158
   174cc:	96 e2       	ldi	r25, 0x26	; 38
   174ce:	0d c0       	rjmp	.+26     	; 0x174ea <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   174d0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174d4:	85 ff       	sbrs	r24, 5
   174d6:	11 c0       	rjmp	.+34     	; 0x174fa <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Initialize]\n");
   174d8:	82 e8       	ldi	r24, 0x82	; 130
   174da:	96 e2       	ldi	r25, 0x26	; 38
   174dc:	06 c0       	rjmp	.+12     	; 0x174ea <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   174de:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174e2:	85 ff       	sbrs	r24, 5
   174e4:	0a c0       	rjmp	.+20     	; 0x174fa <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Buffered]\n");
   174e6:	82 e6       	ldi	r24, 0x62	; 98
   174e8:	96 e2       	ldi	r25, 0x26	; 38
   174ea:	a0 e0       	ldi	r26, 0x00	; 0
   174ec:	ed b7       	in	r30, 0x3d	; 61
   174ee:	fe b7       	in	r31, 0x3e	; 62
   174f0:	81 83       	std	Z+1, r24	; 0x01
   174f2:	92 83       	std	Z+2, r25	; 0x02
   174f4:	a3 83       	std	Z+3, r26	; 0x03
   174f6:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
                return ( amigo_buffered_write() );
   174fa:	ed d9       	rcall	.-3110   	; 0x168d6 <amigo_buffered_write>
   174fc:	43 c0       	rjmp	.+134    	; 0x17584 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   174fe:	80 e6       	ldi	r24, 0x60	; 96
   17500:	3d c0       	rjmp	.+122    	; 0x1757c <Amigo_Execute+0x1a2>
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17502:	c8 36       	cpi	r28, 0x68	; 104
   17504:	d1 05       	cpc	r29, r1
   17506:	e1 f5       	brne	.+120    	; 0x17580 <Amigo_Execute+0x1a6>
    {
        switch(AMIGOs->state)
   17508:	e0 91 5f 19 	lds	r30, 0x195F	; 0x80195f <AMIGOs>
   1750c:	f0 91 60 19 	lds	r31, 0x1960	; 0x801960 <AMIGOs+0x1>
   17510:	80 81       	ld	r24, Z
   17512:	82 30       	cpi	r24, 0x02	; 2
   17514:	81 f0       	breq	.+32     	; 0x17536 <Amigo_Execute+0x15c>
   17516:	18 f4       	brcc	.+6      	; 0x1751e <Amigo_Execute+0x144>
   17518:	88 23       	and	r24, r24
   1751a:	91 f1       	breq	.+100    	; 0x17580 <Amigo_Execute+0x1a6>
   1751c:	2e c0       	rjmp	.+92     	; 0x1757a <Amigo_Execute+0x1a0>
   1751e:	83 30       	cpi	r24, 0x03	; 3
   17520:	19 f0       	breq	.+6      	; 0x17528 <Amigo_Execute+0x14e>
   17522:	84 30       	cpi	r24, 0x04	; 4
   17524:	c9 f0       	breq	.+50     	; 0x17558 <Amigo_Execute+0x17e>
   17526:	29 c0       	rjmp	.+82     	; 0x1757a <Amigo_Execute+0x1a0>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17528:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1752c:	85 ff       	sbrs	r24, 5
   1752e:	11 c0       	rjmp	.+34     	; 0x17552 <Amigo_Execute+0x178>
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17530:	89 e3       	ldi	r24, 0x39	; 57
   17532:	96 e2       	ldi	r25, 0x26	; 38
   17534:	06 c0       	rjmp	.+12     	; 0x17542 <Amigo_Execute+0x168>
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17536:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1753a:	85 ff       	sbrs	r24, 5
   1753c:	0a c0       	rjmp	.+20     	; 0x17552 <Amigo_Execute+0x178>
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   1753e:	8e e0       	ldi	r24, 0x0E	; 14
   17540:	96 e2       	ldi	r25, 0x26	; 38
   17542:	a0 e0       	ldi	r26, 0x00	; 0
   17544:	ed b7       	in	r30, 0x3d	; 61
   17546:	fe b7       	in	r31, 0x3e	; 62
   17548:	81 83       	std	Z+1, r24	; 0x01
   1754a:	92 83       	std	Z+2, r25	; 0x02
   1754c:	a3 83       	std	Z+3, r26	; 0x03
   1754e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
                return ( amigo_send_status() );
   17552:	0e 94 a0 b1 	call	0x16340	; 0x16340 <amigo_send_status>
   17556:	16 c0       	rjmp	.+44     	; 0x17584 <Amigo_Execute+0x1aa>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17558:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1755c:	85 ff       	sbrs	r24, 5
   1755e:	0a c0       	rjmp	.+20     	; 0x17574 <Amigo_Execute+0x19a>
                    printf("[AMIGO Execute Request Logical Address]\n");
   17560:	85 ee       	ldi	r24, 0xE5	; 229
   17562:	95 e2       	ldi	r25, 0x25	; 37
   17564:	a0 e0       	ldi	r26, 0x00	; 0
   17566:	ed b7       	in	r30, 0x3d	; 61
   17568:	fe b7       	in	r31, 0x3e	; 62
   1756a:	81 83       	std	Z+1, r24	; 0x01
   1756c:	92 83       	std	Z+2, r25	; 0x02
   1756e:	a3 83       	std	Z+3, r26	; 0x03
   17570:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
                return ( amigo_send_logical_address() );
   17574:	0e 94 4b b1 	call	0x16296	; 0x16296 <amigo_send_logical_address>
   17578:	05 c0       	rjmp	.+10     	; 0x17584 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   1757a:	88 e6       	ldi	r24, 0x68	; 104
   1757c:	b0 db       	rcall	.-2208   	; 0x16cde <amigo_todo>
   1757e:	02 c0       	rjmp	.+4      	; 0x17584 <Amigo_Execute+0x1aa>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17580:	80 e0       	ldi	r24, 0x00	; 0
   17582:	90 e0       	ldi	r25, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17584:	cd b7       	in	r28, 0x3d	; 61
   17586:	de b7       	in	r29, 0x3e	; 62
   17588:	29 96       	adiw	r28, 0x09	; 9
   1758a:	e2 e0       	ldi	r30, 0x02	; 2
   1758c:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00017590 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17590:	cf 93       	push	r28
   17592:	df 93       	push	r29
   17594:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17596:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   1759a:	90 e0       	ldi	r25, 0x00	; 0
   1759c:	0e 94 bc 8b 	call	0x11778	; 0x11778 <AMIGO_is_MTA>
   175a0:	89 2b       	or	r24, r25
   175a2:	51 f0       	breq	.+20     	; 0x175b8 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   175a4:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   175a8:	8f 35       	cpi	r24, 0x5F	; 95
   175aa:	71 f4       	brne	.+28     	; 0x175c8 <AMIGO_COMMANDS+0x38>
   175ac:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   175b0:	90 e0       	ldi	r25, 0x00	; 0
   175b2:	0e 94 ab 8b 	call	0x11756	; 0x11756 <AMIGO_is_MLA>
   175b6:	08 c0       	rjmp	.+16     	; 0x175c8 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   175b8:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   175bc:	90 e0       	ldi	r25, 0x00	; 0
   175be:	0e 94 ab 8b 	call	0x11756	; 0x11756 <AMIGO_is_MLA>
   175c2:	89 2b       	or	r24, r25
   175c4:	79 f7       	brne	.-34     	; 0x175a4 <AMIGO_COMMANDS+0x14>
   175c6:	76 c0       	rjmp	.+236    	; 0x176b4 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   175c8:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   175cc:	81 11       	cpse	r24, r1
   175ce:	05 c0       	rjmp	.+10     	; 0x175da <AMIGO_COMMANDS+0x4a>
   175d0:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   175d4:	90 e0       	ldi	r25, 0x00	; 0
   175d6:	0e 94 bc 8b 	call	0x11778	; 0x11778 <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   175da:	c0 36       	cpi	r28, 0x60	; 96
   175dc:	99 f4       	brne	.+38     	; 0x17604 <AMIGO_COMMANDS+0x74>
   175de:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   175e2:	90 e0       	ldi	r25, 0x00	; 0
   175e4:	0e 94 bc 8b 	call	0x11778	; 0x11778 <AMIGO_is_MTA>
   175e8:	89 2b       	or	r24, r25
   175ea:	19 f0       	breq	.+6      	; 0x175f2 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   175ec:	80 e6       	ldi	r24, 0x60	; 96
   175ee:	90 e0       	ldi	r25, 0x00	; 0
   175f0:	14 c0       	rjmp	.+40     	; 0x1761a <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   175f2:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   175f6:	90 e0       	ldi	r25, 0x00	; 0
   175f8:	0e 94 ab 8b 	call	0x11756	; 0x11756 <AMIGO_is_MLA>
   175fc:	89 2b       	or	r24, r25
   175fe:	09 f4       	brne	.+2      	; 0x17602 <AMIGO_COMMANDS+0x72>
   17600:	59 c0       	rjmp	.+178    	; 0x176b4 <AMIGO_COMMANDS+0x124>
   17602:	f4 cf       	rjmp	.-24     	; 0x175ec <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17604:	c8 36       	cpi	r28, 0x68	; 104
   17606:	c1 f4       	brne	.+48     	; 0x17638 <AMIGO_COMMANDS+0xa8>
   17608:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   1760c:	90 e0       	ldi	r25, 0x00	; 0
   1760e:	0e 94 bc 8b 	call	0x11778	; 0x11778 <AMIGO_is_MTA>
   17612:	89 2b       	or	r24, r25
   17614:	21 f0       	breq	.+8      	; 0x1761e <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17616:	88 e6       	ldi	r24, 0x68	; 104
   17618:	90 e0       	ldi	r25, 0x00	; 0
   1761a:	df de       	rcall	.-578    	; 0x173da <Amigo_Execute>
   1761c:	0b c0       	rjmp	.+22     	; 0x17634 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   1761e:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   17622:	90 e0       	ldi	r25, 0x00	; 0
   17624:	0e 94 ab 8b 	call	0x11756	; 0x11756 <AMIGO_is_MLA>
   17628:	89 2b       	or	r24, r25
   1762a:	09 f4       	brne	.+2      	; 0x1762e <AMIGO_COMMANDS+0x9e>
   1762c:	43 c0       	rjmp	.+134    	; 0x176b4 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   1762e:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   17630:	90 e0       	ldi	r25, 0x00	; 0
   17632:	ed db       	rcall	.-2086   	; 0x16e0e <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   17634:	ec 01       	movw	r28, r24
   17636:	40 c0       	rjmp	.+128    	; 0x176b8 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   17638:	c9 36       	cpi	r28, 0x69	; 105
   1763a:	51 f4       	brne	.+20     	; 0x17650 <AMIGO_COMMANDS+0xc0>
   1763c:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   17640:	90 e0       	ldi	r25, 0x00	; 0
   17642:	0e 94 ab 8b 	call	0x11756	; 0x11756 <AMIGO_is_MLA>
   17646:	89 2b       	or	r24, r25
   17648:	a9 f1       	breq	.+106    	; 0x176b4 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   1764a:	89 e6       	ldi	r24, 0x69	; 105
   1764c:	90 e0       	ldi	r25, 0x00	; 0
   1764e:	f1 cf       	rjmp	.-30     	; 0x17632 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   17650:	ca 36       	cpi	r28, 0x6A	; 106
   17652:	51 f4       	brne	.+20     	; 0x17668 <AMIGO_COMMANDS+0xd8>
   17654:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   17658:	90 e0       	ldi	r25, 0x00	; 0
   1765a:	0e 94 ab 8b 	call	0x11756	; 0x11756 <AMIGO_is_MLA>
   1765e:	89 2b       	or	r24, r25
   17660:	49 f1       	breq	.+82     	; 0x176b4 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17662:	8a e6       	ldi	r24, 0x6A	; 106
   17664:	90 e0       	ldi	r25, 0x00	; 0
   17666:	e5 cf       	rjmp	.-54     	; 0x17632 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   17668:	cc 36       	cpi	r28, 0x6C	; 108
   1766a:	51 f4       	brne	.+20     	; 0x17680 <AMIGO_COMMANDS+0xf0>
   1766c:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   17670:	90 e0       	ldi	r25, 0x00	; 0
   17672:	0e 94 ab 8b 	call	0x11756	; 0x11756 <AMIGO_is_MLA>
   17676:	89 2b       	or	r24, r25
   17678:	e9 f0       	breq	.+58     	; 0x176b4 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   1767a:	8c e6       	ldi	r24, 0x6C	; 108
   1767c:	90 e0       	ldi	r25, 0x00	; 0
   1767e:	d9 cf       	rjmp	.-78     	; 0x17632 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17680:	c0 37       	cpi	r28, 0x70	; 112
   17682:	c1 f4       	brne	.+48     	; 0x176b4 <AMIGO_COMMANDS+0x124>
   17684:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   17688:	90 e0       	ldi	r25, 0x00	; 0
   1768a:	0e 94 bc 8b 	call	0x11778	; 0x11778 <AMIGO_is_MTA>
   1768e:	ec 01       	movw	r28, r24
   17690:	89 2b       	or	r24, r25
   17692:	51 f0       	breq	.+20     	; 0x176a8 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17694:	e0 91 61 19 	lds	r30, 0x1961	; 0x801961 <AMIGOp>
   17698:	f0 91 62 19 	lds	r31, 0x1962	; 0x801962 <AMIGOp+0x1>
   1769c:	81 81       	ldd	r24, Z+1	; 0x01
   1769e:	90 e0       	ldi	r25, 0x00	; 0
   176a0:	0e 94 5f 85 	call	0x10abe	; 0x10abe <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   176a4:	ff d9       	rcall	.-3074   	; 0x16aa4 <amigo_cmd_dsj>
   176a6:	c6 cf       	rjmp	.-116    	; 0x17634 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   176a8:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   176ac:	90 e0       	ldi	r25, 0x00	; 0
   176ae:	0e 94 ab 8b 	call	0x11756	; 0x11756 <AMIGO_is_MLA>
   176b2:	02 c0       	rjmp	.+4      	; 0x176b8 <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   176b4:	c0 e0       	ldi	r28, 0x00	; 0
   176b6:	d0 e0       	ldi	r29, 0x00	; 0
}
   176b8:	ce 01       	movw	r24, r28
   176ba:	df 91       	pop	r29
   176bc:	cf 91       	pop	r28
   176be:	08 95       	ret

000176c0 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   176c0:	ea e9       	ldi	r30, 0x9A	; 154
   176c2:	f9 e1       	ldi	r31, 0x19	; 25
   176c4:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   176c6:	10 82       	st	Z, r1
   176c8:	11 82       	std	Z+1, r1	; 0x01
   176ca:	12 82       	std	Z+2, r1	; 0x02
   176cc:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   176ce:	15 82       	std	Z+5, r1	; 0x05
   176d0:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   176d2:	12 86       	std	Z+10, r1	; 0x0a
   176d4:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   176d6:	14 86       	std	Z+12, r1	; 0x0c
   176d8:	13 86       	std	Z+11, r1	; 0x0b
   176da:	08 95       	ret

000176dc <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   176dc:	cf 93       	push	r28
   176de:	df 93       	push	r29
   176e0:	ad b7       	in	r26, 0x3d	; 61
   176e2:	be b7       	in	r27, 0x3e	; 62
   176e4:	17 97       	sbiw	r26, 0x07	; 7
   176e6:	0f b6       	in	r0, 0x3f	; 63
   176e8:	f8 94       	cli
   176ea:	be bf       	out	0x3e, r27	; 62
   176ec:	0f be       	out	0x3f, r0	; 63
   176ee:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   176f0:	20 91 a3 19 	lds	r18, 0x19A3	; 0x8019a3 <plot+0x9>
   176f4:	30 91 a4 19 	lds	r19, 0x19A4	; 0x8019a4 <plot+0xa>
   176f8:	21 15       	cp	r18, r1
   176fa:	31 05       	cpc	r19, r1
   176fc:	09 f4       	brne	.+2      	; 0x17700 <receive_plot_flush+0x24>
   176fe:	45 c0       	rjmp	.+138    	; 0x1778a <receive_plot_flush+0xae>
   17700:	80 91 9e 19 	lds	r24, 0x199E	; 0x80199e <plot+0x4>
   17704:	90 91 9f 19 	lds	r25, 0x199F	; 0x80199f <plot+0x5>
   17708:	00 97       	sbiw	r24, 0x00	; 0
   1770a:	09 f4       	brne	.+2      	; 0x1770e <receive_plot_flush+0x32>
   1770c:	40 c0       	rjmp	.+128    	; 0x1778e <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   1770e:	ac 01       	movw	r20, r24
   17710:	61 e0       	ldi	r22, 0x01	; 1
   17712:	70 e0       	ldi	r23, 0x00	; 0
   17714:	80 91 a5 19 	lds	r24, 0x19A5	; 0x8019a5 <plot+0xb>
   17718:	90 91 a6 19 	lds	r25, 0x19A6	; 0x8019a6 <plot+0xc>
   1771c:	0e 94 53 7b 	call	0xf6a6	; 0xf6a6 <fwrite>
   17720:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17722:	80 91 9e 19 	lds	r24, 0x199E	; 0x80199e <plot+0x4>
   17726:	90 91 9f 19 	lds	r25, 0x199F	; 0x80199f <plot+0x5>
   1772a:	c8 17       	cp	r28, r24
   1772c:	d9 07       	cpc	r29, r25
   1772e:	09 f1       	breq	.+66     	; 0x17772 <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17730:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17734:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17738:	81 72       	andi	r24, 0x21	; 33
   1773a:	99 27       	eor	r25, r25
   1773c:	89 2b       	or	r24, r25
   1773e:	b1 f0       	breq	.+44     	; 0x1776c <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17740:	81 ee       	ldi	r24, 0xE1	; 225
   17742:	95 e1       	ldi	r25, 0x15	; 21
   17744:	0e 94 5c 77 	call	0xeeb8	; 0xeeb8 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17748:	ed b7       	in	r30, 0x3d	; 61
   1774a:	fe b7       	in	r31, 0x3e	; 62
   1774c:	d7 83       	std	Z+7, r29	; 0x07
   1774e:	c6 83       	std	Z+6, r28	; 0x06
   17750:	80 91 9e 19 	lds	r24, 0x199E	; 0x80199e <plot+0x4>
   17754:	90 91 9f 19 	lds	r25, 0x199F	; 0x80199f <plot+0x5>
   17758:	95 83       	std	Z+5, r25	; 0x05
   1775a:	84 83       	std	Z+4, r24	; 0x04
   1775c:	85 e7       	ldi	r24, 0x75	; 117
   1775e:	9e e2       	ldi	r25, 0x2E	; 46
   17760:	a0 e0       	ldi	r26, 0x00	; 0
   17762:	81 83       	std	Z+1, r24	; 0x01
   17764:	92 83       	std	Z+2, r25	; 0x02
   17766:	a3 83       	std	Z+3, r26	; 0x03
   17768:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        }
        return(-1);
   1776c:	8f ef       	ldi	r24, 0xFF	; 255
   1776e:	9f ef       	ldi	r25, 0xFF	; 255
   17770:	0e c0       	rjmp	.+28     	; 0x1778e <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   17772:	80 91 a3 19 	lds	r24, 0x19A3	; 0x8019a3 <plot+0x9>
   17776:	90 91 a4 19 	lds	r25, 0x19A4	; 0x8019a4 <plot+0xa>
   1777a:	0e 94 a6 75 	call	0xeb4c	; 0xeb4c <fileno>
    if(fno < 0)
   1777e:	97 fd       	sbrc	r25, 7
   17780:	f5 cf       	rjmp	.-22     	; 0x1776c <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   17782:	0e 94 9d 7a 	call	0xf53a	; 0xf53a <syncfs>
    return (ret);
   17786:	ce 01       	movw	r24, r28
   17788:	02 c0       	rjmp	.+4      	; 0x1778e <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   1778a:	80 e0       	ldi	r24, 0x00	; 0
   1778c:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   1778e:	cd b7       	in	r28, 0x3d	; 61
   17790:	de b7       	in	r29, 0x3e	; 62
   17792:	27 96       	adiw	r28, 0x07	; 7
   17794:	e2 e0       	ldi	r30, 0x02	; 2
   17796:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

0001779a <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   1779a:	ad b7       	in	r26, 0x3d	; 61
   1779c:	be b7       	in	r27, 0x3e	; 62
   1779e:	17 97       	sbiw	r26, 0x07	; 7
   177a0:	0f b6       	in	r0, 0x3f	; 63
   177a2:	f8 94       	cli
   177a4:	be bf       	out	0x3e, r27	; 62
   177a6:	0f be       	out	0x3f, r0	; 63
   177a8:	ad bf       	out	0x3d, r26	; 61
    if( receive_plot_flush() < 0 )
   177aa:	98 df       	rcall	.-208    	; 0x176dc <receive_plot_flush>
   177ac:	97 ff       	sbrs	r25, 7
   177ae:	03 c0       	rjmp	.+6      	; 0x177b6 <printer_close+0x1c>
        plot.error = 1;
   177b0:	81 e0       	ldi	r24, 0x01	; 1
   177b2:	80 93 a2 19 	sts	0x19A2, r24	; 0x8019a2 <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   177b6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   177ba:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   177be:	81 72       	andi	r24, 0x21	; 33
   177c0:	99 27       	eor	r25, r25
   177c2:	89 2b       	or	r24, r25
   177c4:	71 f0       	breq	.+28     	; 0x177e2 <printer_close+0x48>
    {
        if(plot.error)
   177c6:	80 91 a2 19 	lds	r24, 0x19A2	; 0x8019a2 <plot+0x8>
   177ca:	88 23       	and	r24, r24
   177cc:	51 f0       	breq	.+20     	; 0x177e2 <printer_close+0x48>
            printf("ERROR durring write\n");
   177ce:	84 ea       	ldi	r24, 0xA4	; 164
   177d0:	9e e2       	ldi	r25, 0x2E	; 46
   177d2:	a0 e0       	ldi	r26, 0x00	; 0
   177d4:	ed b7       	in	r30, 0x3d	; 61
   177d6:	fe b7       	in	r31, 0x3e	; 62
   177d8:	81 83       	std	Z+1, r24	; 0x01
   177da:	92 83       	std	Z+2, r25	; 0x02
   177dc:	a3 83       	std	Z+3, r26	; 0x03
   177de:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    }

    if(plot.fp)
   177e2:	80 91 a3 19 	lds	r24, 0x19A3	; 0x8019a3 <plot+0x9>
   177e6:	90 91 a4 19 	lds	r25, 0x19A4	; 0x8019a4 <plot+0xa>
   177ea:	00 97       	sbiw	r24, 0x00	; 0
   177ec:	e1 f0       	breq	.+56     	; 0x17826 <printer_close+0x8c>
    {
        fclose(plot.fp);
   177ee:	0e 94 d5 7b 	call	0xf7aa	; 0xf7aa <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   177f2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   177f6:	85 ff       	sbrs	r24, 5
   177f8:	16 c0       	rjmp	.+44     	; 0x17826 <printer_close+0x8c>
            printf("\nDONE: %08ld\n",plot.count);
   177fa:	80 91 9a 19 	lds	r24, 0x199A	; 0x80199a <plot>
   177fe:	90 91 9b 19 	lds	r25, 0x199B	; 0x80199b <plot+0x1>
   17802:	a0 91 9c 19 	lds	r26, 0x199C	; 0x80199c <plot+0x2>
   17806:	b0 91 9d 19 	lds	r27, 0x199D	; 0x80199d <plot+0x3>
   1780a:	ed b7       	in	r30, 0x3d	; 61
   1780c:	fe b7       	in	r31, 0x3e	; 62
   1780e:	84 83       	std	Z+4, r24	; 0x04
   17810:	95 83       	std	Z+5, r25	; 0x05
   17812:	a6 83       	std	Z+6, r26	; 0x06
   17814:	b7 83       	std	Z+7, r27	; 0x07
   17816:	86 e9       	ldi	r24, 0x96	; 150
   17818:	9e e2       	ldi	r25, 0x2E	; 46
   1781a:	a0 e0       	ldi	r26, 0x00	; 0
   1781c:	81 83       	std	Z+1, r24	; 0x01
   1781e:	92 83       	std	Z+2, r25	; 0x02
   17820:	a3 83       	std	Z+3, r26	; 0x03
   17822:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    }

    if(plot.buf)
   17826:	80 91 a5 19 	lds	r24, 0x19A5	; 0x8019a5 <plot+0xb>
   1782a:	90 91 a6 19 	lds	r25, 0x19A6	; 0x8019a6 <plot+0xc>
   1782e:	00 97       	sbiw	r24, 0x00	; 0
   17830:	11 f0       	breq	.+4      	; 0x17836 <printer_close+0x9c>
        safefree(plot.buf);
   17832:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <safefree>
    printer_init();
   17836:	44 df       	rcall	.-376    	; 0x176c0 <printer_init>
}
   17838:	ad b7       	in	r26, 0x3d	; 61
   1783a:	be b7       	in	r27, 0x3e	; 62
   1783c:	17 96       	adiw	r26, 0x07	; 7
   1783e:	0f b6       	in	r0, 0x3f	; 63
   17840:	f8 94       	cli
   17842:	be bf       	out	0x3e, r27	; 62
   17844:	0f be       	out	0x3f, r0	; 63
   17846:	ad bf       	out	0x3d, r26	; 61
   17848:	08 95       	ret

0001784a <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   1784a:	ad e5       	ldi	r26, 0x5D	; 93
   1784c:	b0 e0       	ldi	r27, 0x00	; 0
   1784e:	eb e2       	ldi	r30, 0x2B	; 43
   17850:	fc eb       	ldi	r31, 0xBC	; 188
   17852:	0c 94 4a e3 	jmp	0x1c694	; 0x1c694 <__prologue_saves__+0x18>
   17856:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   17858:	89 2b       	or	r24, r25
   1785a:	09 f0       	breq	.+2      	; 0x1785e <printer_open+0x14>
   1785c:	4f c0       	rjmp	.+158    	; 0x178fc <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   1785e:	be 01       	movw	r22, r28
   17860:	6e 5a       	subi	r22, 0xAE	; 174
   17862:	7f 4f       	sbci	r23, 0xFF	; 255
   17864:	80 e0       	ldi	r24, 0x00	; 0
   17866:	90 e0       	ldi	r25, 0x00	; 0
   17868:	0e 94 c1 31 	call	0x6382	; 0x6382 <clock_gettime>
        seconds = ts.tv_sec;
   1786c:	66 96       	adiw	r28, 0x16	; 22
   1786e:	8c ad       	ldd	r24, Y+60	; 0x3c
   17870:	9d ad       	ldd	r25, Y+61	; 0x3d
   17872:	ae ad       	ldd	r26, Y+62	; 0x3e
   17874:	bf ad       	ldd	r27, Y+63	; 0x3f
   17876:	66 97       	sbiw	r28, 0x16	; 22
   17878:	6e 96       	adiw	r28, 0x1e	; 30
   1787a:	8c af       	std	Y+60, r24	; 0x3c
   1787c:	9d af       	std	Y+61, r25	; 0x3d
   1787e:	ae af       	std	Y+62, r26	; 0x3e
   17880:	bf af       	std	Y+63, r27	; 0x3f
   17882:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   17884:	ce 01       	movw	r24, r28
   17886:	86 5a       	subi	r24, 0xA6	; 166
   17888:	9f 4f       	sbci	r25, 0xFF	; 255
   1788a:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <gmtime>
   1788e:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   17890:	fc 01       	movw	r30, r24
   17892:	e6 80       	ldd	r14, Z+6	; 0x06
   17894:	f7 80       	ldd	r15, Z+7	; 0x07
   17896:	80 85       	ldd	r24, Z+8	; 0x08
   17898:	91 85       	ldd	r25, Z+9	; 0x09
   1789a:	0e 94 87 34 	call	0x690e	; 0x690e <tm_mon_to_ascii>
   1789e:	f8 01       	movw	r30, r16
   178a0:	20 81       	ld	r18, Z
   178a2:	31 81       	ldd	r19, Z+1	; 0x01
   178a4:	ed b7       	in	r30, 0x3d	; 61
   178a6:	fe b7       	in	r31, 0x3e	; 62
   178a8:	31 8b       	std	Z+17, r19	; 0x11
   178aa:	20 8b       	std	Z+16, r18	; 0x10
   178ac:	f8 01       	movw	r30, r16
   178ae:	22 81       	ldd	r18, Z+2	; 0x02
   178b0:	33 81       	ldd	r19, Z+3	; 0x03
   178b2:	ed b7       	in	r30, 0x3d	; 61
   178b4:	fe b7       	in	r31, 0x3e	; 62
   178b6:	37 87       	std	Z+15, r19	; 0x0f
   178b8:	26 87       	std	Z+14, r18	; 0x0e
   178ba:	f8 01       	movw	r30, r16
   178bc:	24 81       	ldd	r18, Z+4	; 0x04
   178be:	35 81       	ldd	r19, Z+5	; 0x05
   178c0:	ed b7       	in	r30, 0x3d	; 61
   178c2:	fe b7       	in	r31, 0x3e	; 62
   178c4:	35 87       	std	Z+13, r19	; 0x0d
   178c6:	24 87       	std	Z+12, r18	; 0x0c
   178c8:	f8 01       	movw	r30, r16
   178ca:	22 85       	ldd	r18, Z+10	; 0x0a
   178cc:	33 85       	ldd	r19, Z+11	; 0x0b
   178ce:	24 59       	subi	r18, 0x94	; 148
   178d0:	38 4f       	sbci	r19, 0xF8	; 248
   178d2:	ed b7       	in	r30, 0x3d	; 61
   178d4:	fe b7       	in	r31, 0x3e	; 62
   178d6:	33 87       	std	Z+11, r19	; 0x0b
   178d8:	22 87       	std	Z+10, r18	; 0x0a
   178da:	91 87       	std	Z+9, r25	; 0x09
   178dc:	80 87       	std	Z+8, r24	; 0x08
   178de:	f7 82       	std	Z+7, r15	; 0x07
   178e0:	e6 82       	std	Z+6, r14	; 0x06
   178e2:	8b ed       	ldi	r24, 0xDB	; 219
   178e4:	9e e2       	ldi	r25, 0x2E	; 46
   178e6:	a0 e0       	ldi	r26, 0x00	; 0
   178e8:	83 83       	std	Z+3, r24	; 0x03
   178ea:	94 83       	std	Z+4, r25	; 0x04
   178ec:	a5 83       	std	Z+5, r26	; 0x05
   178ee:	8e 01       	movw	r16, r28
   178f0:	0e 5e       	subi	r16, 0xEE	; 238
   178f2:	1f 4f       	sbci	r17, 0xFF	; 255
   178f4:	12 83       	std	Z+2, r17	; 0x02
   178f6:	01 83       	std	Z+1, r16	; 0x01
   178f8:	0e 94 ef 44 	call	0x89de	; 0x89de <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   178fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17900:	85 ff       	sbrs	r24, 5
   17902:	0c c0       	rjmp	.+24     	; 0x1791c <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   17904:	ed b7       	in	r30, 0x3d	; 61
   17906:	fe b7       	in	r31, 0x3e	; 62
   17908:	15 83       	std	Z+5, r17	; 0x05
   1790a:	04 83       	std	Z+4, r16	; 0x04
   1790c:	85 ec       	ldi	r24, 0xC5	; 197
   1790e:	9e e2       	ldi	r25, 0x2E	; 46
   17910:	a0 e0       	ldi	r26, 0x00	; 0
   17912:	81 83       	std	Z+1, r24	; 0x01
   17914:	92 83       	std	Z+2, r25	; 0x02
   17916:	a3 83       	std	Z+3, r26	; 0x03
   17918:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

    plot.fp = fopen(ptr,"wb");
   1791c:	6c e0       	ldi	r22, 0x0C	; 12
   1791e:	79 e0       	ldi	r23, 0x09	; 9
   17920:	c8 01       	movw	r24, r16
   17922:	0e 94 2b 7d 	call	0xfa56	; 0xfa56 <fopen>
   17926:	90 93 a4 19 	sts	0x19A4, r25	; 0x8019a4 <plot+0xa>
   1792a:	80 93 a3 19 	sts	0x19A3, r24	; 0x8019a3 <plot+0x9>
    if(plot.fp == NULL)
   1792e:	89 2b       	or	r24, r25
   17930:	b9 f4       	brne	.+46     	; 0x17960 <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17932:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17936:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1793a:	81 72       	andi	r24, 0x21	; 33
   1793c:	99 27       	eor	r25, r25
   1793e:	89 2b       	or	r24, r25
   17940:	11 f1       	breq	.+68     	; 0x17986 <printer_open+0x13c>
        {
            perror("open failed");
   17942:	87 ea       	ldi	r24, 0xA7	; 167
   17944:	9d e0       	ldi	r25, 0x0D	; 13
   17946:	0e 94 5c 77 	call	0xeeb8	; 0xeeb8 <perror>
            printf("exiting...\n");
   1794a:	89 eb       	ldi	r24, 0xB9	; 185
   1794c:	9e e2       	ldi	r25, 0x2E	; 46
   1794e:	a0 e0       	ldi	r26, 0x00	; 0
   17950:	ed b7       	in	r30, 0x3d	; 61
   17952:	fe b7       	in	r31, 0x3e	; 62
   17954:	81 83       	std	Z+1, r24	; 0x01
   17956:	92 83       	std	Z+2, r25	; 0x02
   17958:	a3 83       	std	Z+3, r26	; 0x03
   1795a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1795e:	13 c0       	rjmp	.+38     	; 0x17986 <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   17960:	61 e0       	ldi	r22, 0x01	; 1
   17962:	70 e0       	ldi	r23, 0x00	; 0
   17964:	81 e0       	ldi	r24, 0x01	; 1
   17966:	92 e0       	ldi	r25, 0x02	; 2
   17968:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <safecalloc>
   1796c:	90 93 a6 19 	sts	0x19A6, r25	; 0x8019a6 <plot+0xc>
   17970:	80 93 a5 19 	sts	0x19A5, r24	; 0x8019a5 <plot+0xb>
    if(plot.buf == NULL)
   17974:	89 2b       	or	r24, r25
   17976:	09 f4       	brne	.+2      	; 0x1797a <printer_open+0x130>
        printer_close();
   17978:	10 df       	rcall	.-480    	; 0x1779a <printer_close>
    plot.size = 512;
   1797a:	80 e0       	ldi	r24, 0x00	; 0
   1797c:	92 e0       	ldi	r25, 0x02	; 2
   1797e:	90 93 a1 19 	sts	0x19A1, r25	; 0x8019a1 <plot+0x7>
   17982:	80 93 a0 19 	sts	0x19A0, r24	; 0x8019a0 <plot+0x6>
}
   17986:	c3 5a       	subi	r28, 0xA3	; 163
   17988:	df 4f       	sbci	r29, 0xFF	; 255
   1798a:	e6 e0       	ldi	r30, 0x06	; 6
   1798c:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

00017990 <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   17990:	cf 93       	push	r28
   17992:	df 93       	push	r29
   17994:	ad b7       	in	r26, 0x3d	; 61
   17996:	be b7       	in	r27, 0x3e	; 62
   17998:	17 97       	sbiw	r26, 0x07	; 7
   1799a:	0f b6       	in	r0, 0x3f	; 63
   1799c:	f8 94       	cli
   1799e:	be bf       	out	0x3e, r27	; 62
   179a0:	0f be       	out	0x3f, r0	; 63
   179a2:	ad bf       	out	0x3d, r26	; 61
   179a4:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   179a6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   179aa:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   179ae:	81 72       	andi	r24, 0x21	; 33
   179b0:	99 27       	eor	r25, r25
   179b2:	89 2b       	or	r24, r25
   179b4:	c1 f0       	breq	.+48     	; 0x179e6 <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   179b6:	80 91 9a 19 	lds	r24, 0x199A	; 0x80199a <plot>
   179ba:	30 91 9b 19 	lds	r19, 0x199B	; 0x80199b <plot+0x1>
   179be:	20 91 9c 19 	lds	r18, 0x199C	; 0x80199c <plot+0x2>
   179c2:	90 91 9d 19 	lds	r25, 0x199D	; 0x80199d <plot+0x3>
   179c6:	81 11       	cpse	r24, r1
   179c8:	0e c0       	rjmp	.+28     	; 0x179e6 <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   179ca:	ed b7       	in	r30, 0x3d	; 61
   179cc:	fe b7       	in	r31, 0x3e	; 62
   179ce:	84 83       	std	Z+4, r24	; 0x04
   179d0:	35 83       	std	Z+5, r19	; 0x05
   179d2:	26 83       	std	Z+6, r18	; 0x06
   179d4:	97 83       	std	Z+7, r25	; 0x07
   179d6:	8e e6       	ldi	r24, 0x6E	; 110
   179d8:	9e e2       	ldi	r25, 0x2E	; 46
   179da:	a0 e0       	ldi	r26, 0x00	; 0
   179dc:	81 83       	std	Z+1, r24	; 0x01
   179de:	92 83       	std	Z+2, r25	; 0x02
   179e0:	a3 83       	std	Z+3, r26	; 0x03
   179e2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   179e6:	ce 01       	movw	r24, r28
   179e8:	88 27       	eor	r24, r24
   179ea:	97 7f       	andi	r25, 0xF7	; 247
   179ec:	89 2b       	or	r24, r25
   179ee:	41 f0       	breq	.+16     	; 0x17a00 <printer_buffer+0x70>
    {
        if( receive_plot_flush() )
   179f0:	75 de       	rcall	.-790    	; 0x176dc <receive_plot_flush>
   179f2:	89 2b       	or	r24, r25
   179f4:	09 f4       	brne	.+2      	; 0x179f8 <printer_buffer+0x68>
   179f6:	3f c0       	rjmp	.+126    	; 0x17a76 <printer_buffer+0xe6>
            plot.error = 1;
   179f8:	81 e0       	ldi	r24, 0x01	; 1
   179fa:	80 93 a2 19 	sts	0x19A2, r24	; 0x8019a2 <plot+0x8>
   179fe:	3b c0       	rjmp	.+118    	; 0x17a76 <printer_buffer+0xe6>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   17a00:	20 91 a5 19 	lds	r18, 0x19A5	; 0x8019a5 <plot+0xb>
   17a04:	30 91 a6 19 	lds	r19, 0x19A6	; 0x8019a6 <plot+0xc>
   17a08:	80 91 9e 19 	lds	r24, 0x199E	; 0x80199e <plot+0x4>
   17a0c:	90 91 9f 19 	lds	r25, 0x199F	; 0x80199f <plot+0x5>
   17a10:	ac 01       	movw	r20, r24
   17a12:	4f 5f       	subi	r20, 0xFF	; 255
   17a14:	5f 4f       	sbci	r21, 0xFF	; 255
   17a16:	50 93 9f 19 	sts	0x199F, r21	; 0x80199f <plot+0x5>
   17a1a:	40 93 9e 19 	sts	0x199E, r20	; 0x80199e <plot+0x4>
   17a1e:	f9 01       	movw	r30, r18
   17a20:	e8 0f       	add	r30, r24
   17a22:	f9 1f       	adc	r31, r25
   17a24:	c0 83       	st	Z, r28
        plot.count++;
   17a26:	80 91 9a 19 	lds	r24, 0x199A	; 0x80199a <plot>
   17a2a:	90 91 9b 19 	lds	r25, 0x199B	; 0x80199b <plot+0x1>
   17a2e:	a0 91 9c 19 	lds	r26, 0x199C	; 0x80199c <plot+0x2>
   17a32:	b0 91 9d 19 	lds	r27, 0x199D	; 0x80199d <plot+0x3>
   17a36:	01 96       	adiw	r24, 0x01	; 1
   17a38:	a1 1d       	adc	r26, r1
   17a3a:	b1 1d       	adc	r27, r1
   17a3c:	80 93 9a 19 	sts	0x199A, r24	; 0x80199a <plot>
   17a40:	90 93 9b 19 	sts	0x199B, r25	; 0x80199b <plot+0x1>
   17a44:	a0 93 9c 19 	sts	0x199C, r26	; 0x80199c <plot+0x2>
   17a48:	b0 93 9d 19 	sts	0x199D, r27	; 0x80199d <plot+0x3>

        if(plot.ind >= plot.size)
   17a4c:	20 91 9e 19 	lds	r18, 0x199E	; 0x80199e <plot+0x4>
   17a50:	30 91 9f 19 	lds	r19, 0x199F	; 0x80199f <plot+0x5>
   17a54:	80 91 a0 19 	lds	r24, 0x19A0	; 0x8019a0 <plot+0x6>
   17a58:	90 91 a1 19 	lds	r25, 0x19A1	; 0x8019a1 <plot+0x7>
   17a5c:	28 17       	cp	r18, r24
   17a5e:	39 07       	cpc	r19, r25
        {
            if( receive_plot_flush() < 0 )
   17a60:	54 f0       	brlt	.+20     	; 0x17a76 <printer_buffer+0xe6>
   17a62:	3c de       	rcall	.-904    	; 0x176dc <receive_plot_flush>
   17a64:	97 ff       	sbrs	r25, 7
   17a66:	03 c0       	rjmp	.+6      	; 0x17a6e <printer_buffer+0xde>
                plot.error = 1;
   17a68:	81 e0       	ldi	r24, 0x01	; 1
   17a6a:	80 93 a2 19 	sts	0x19A2, r24	; 0x8019a2 <plot+0x8>
            plot.ind  = 0;
   17a6e:	10 92 9f 19 	sts	0x199F, r1	; 0x80199f <plot+0x5>
   17a72:	10 92 9e 19 	sts	0x199E, r1	; 0x80199e <plot+0x4>
        }
    }
}
   17a76:	cd b7       	in	r28, 0x3d	; 61
   17a78:	de b7       	in	r29, 0x3e	; 62
   17a7a:	27 96       	adiw	r28, 0x07	; 7
   17a7c:	e2 e0       	ldi	r30, 0x02	; 2
   17a7e:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00017a82 <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   17a82:	cf 93       	push	r28
   17a84:	00 d0       	rcall	.+0      	; 0x17a86 <PRINTER_COMMANDS+0x4>
   17a86:	00 d0       	rcall	.+0      	; 0x17a88 <PRINTER_COMMANDS+0x6>
   17a88:	1f 92       	push	r1
   17a8a:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   17a8c:	80 91 ed 1e 	lds	r24, 0x1EED	; 0x801eed <listening>
   17a90:	90 e0       	ldi	r25, 0x00	; 0
   17a92:	0e 94 de 8b 	call	0x117bc	; 0x117bc <PRINTER_is_MLA>
   17a96:	89 2b       	or	r24, r25
   17a98:	69 f0       	breq	.+26     	; 0x17ab4 <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a9a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a9e:	85 ff       	sbrs	r24, 5
   17aa0:	22 c0       	rjmp	.+68     	; 0x17ae6 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   17aa2:	8c 2f       	mov	r24, r28
   17aa4:	90 e0       	ldi	r25, 0x00	; 0
   17aa6:	ed b7       	in	r30, 0x3d	; 61
   17aa8:	fe b7       	in	r31, 0x3e	; 62
   17aaa:	95 83       	std	Z+5, r25	; 0x05
   17aac:	84 83       	std	Z+4, r24	; 0x04
   17aae:	82 e5       	ldi	r24, 0x52	; 82
   17ab0:	9e e2       	ldi	r25, 0x2E	; 46
   17ab2:	13 c0       	rjmp	.+38     	; 0x17ada <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   17ab4:	80 91 eb 1e 	lds	r24, 0x1EEB	; 0x801eeb <talking>
   17ab8:	90 e0       	ldi	r25, 0x00	; 0
   17aba:	0e 94 ef 8b 	call	0x117de	; 0x117de <PRINTER_is_MTA>
   17abe:	89 2b       	or	r24, r25
   17ac0:	91 f0       	breq	.+36     	; 0x17ae6 <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17ac2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17ac6:	85 ff       	sbrs	r24, 5
   17ac8:	0e c0       	rjmp	.+28     	; 0x17ae6 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   17aca:	8c 2f       	mov	r24, r28
   17acc:	90 e0       	ldi	r25, 0x00	; 0
   17ace:	ed b7       	in	r30, 0x3d	; 61
   17ad0:	fe b7       	in	r31, 0x3e	; 62
   17ad2:	95 83       	std	Z+5, r25	; 0x05
   17ad4:	84 83       	std	Z+4, r24	; 0x04
   17ad6:	88 e3       	ldi	r24, 0x38	; 56
   17ad8:	9e e2       	ldi	r25, 0x2E	; 46
   17ada:	a0 e0       	ldi	r26, 0x00	; 0
   17adc:	81 83       	std	Z+1, r24	; 0x01
   17ade:	92 83       	std	Z+2, r25	; 0x02
   17ae0:	a3 83       	std	Z+3, r26	; 0x03
   17ae2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
#endif
        return(0);
    }
    return(0);
}
   17ae6:	80 e0       	ldi	r24, 0x00	; 0
   17ae8:	90 e0       	ldi	r25, 0x00	; 0
   17aea:	0f 90       	pop	r0
   17aec:	0f 90       	pop	r0
   17aee:	0f 90       	pop	r0
   17af0:	0f 90       	pop	r0
   17af2:	0f 90       	pop	r0
   17af4:	cf 91       	pop	r28
   17af6:	08 95       	ret

00017af8 <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   17af8:	0f 93       	push	r16
   17afa:	1f 93       	push	r17
   17afc:	da 01       	movw	r26, r20
   17afe:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   17b00:	b7 fd       	sbrc	r27, 7
   17b02:	0b c0       	rjmp	.+22     	; 0x17b1a <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   17b04:	fd 01       	movw	r30, r26
   17b06:	e6 0f       	add	r30, r22
   17b08:	f7 1f       	adc	r31, r23
   17b0a:	e8 0f       	add	r30, r24
   17b0c:	f9 1f       	adc	r31, r25
   17b0e:	00 83       	st	Z, r16
        val >>= 8;
   17b10:	01 2f       	mov	r16, r17
   17b12:	12 2f       	mov	r17, r18
   17b14:	23 2f       	mov	r18, r19
   17b16:	33 27       	eor	r19, r19
   17b18:	f2 cf       	rjmp	.-28     	; 0x17afe <V2B_MSB+0x6>
    }
}
   17b1a:	1f 91       	pop	r17
   17b1c:	0f 91       	pop	r16
   17b1e:	08 95       	ret

00017b20 <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   17b20:	0f 93       	push	r16
   17b22:	1f 93       	push	r17
   17b24:	fc 01       	movw	r30, r24
   17b26:	e6 0f       	add	r30, r22
   17b28:	f7 1f       	adc	r31, r23
   17b2a:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   17b2c:	cf 01       	movw	r24, r30
   17b2e:	86 1b       	sub	r24, r22
   17b30:	97 0b       	sbc	r25, r23
   17b32:	84 17       	cp	r24, r20
   17b34:	95 07       	cpc	r25, r21
   17b36:	34 f4       	brge	.+12     	; 0x17b44 <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   17b38:	01 93       	st	Z+, r16
        val >>= 8;
   17b3a:	01 2f       	mov	r16, r17
   17b3c:	12 2f       	mov	r17, r18
   17b3e:	23 2f       	mov	r18, r19
   17b40:	33 27       	eor	r19, r19
   17b42:	f4 cf       	rjmp	.-24     	; 0x17b2c <V2B_LSB+0xc>
    }
}
   17b44:	1f 91       	pop	r17
   17b46:	0f 91       	pop	r16
   17b48:	08 95       	ret

00017b4a <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   17b4a:	cf 92       	push	r12
   17b4c:	df 92       	push	r13
   17b4e:	ef 92       	push	r14
   17b50:	ff 92       	push	r15
   17b52:	fc 01       	movw	r30, r24
   17b54:	e6 0f       	add	r30, r22
   17b56:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   17b58:	60 e0       	ldi	r22, 0x00	; 0
   17b5a:	70 e0       	ldi	r23, 0x00	; 0
   17b5c:	cb 01       	movw	r24, r22
   17b5e:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   17b60:	9f 01       	movw	r18, r30
   17b62:	2a 1b       	sub	r18, r26
   17b64:	3b 0b       	sbc	r19, r27
   17b66:	24 17       	cp	r18, r20
   17b68:	35 07       	cpc	r19, r21
   17b6a:	4c f4       	brge	.+18     	; 0x17b7e <B2V_MSB+0x34>
    {
        val <<= 8;
   17b6c:	cc 24       	eor	r12, r12
   17b6e:	d6 2e       	mov	r13, r22
   17b70:	e7 2e       	mov	r14, r23
   17b72:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   17b74:	21 91       	ld	r18, Z+
   17b76:	c7 01       	movw	r24, r14
   17b78:	b6 01       	movw	r22, r12
   17b7a:	62 2b       	or	r22, r18
   17b7c:	f1 cf       	rjmp	.-30     	; 0x17b60 <B2V_MSB+0x16>
    }
    return(val);
}
   17b7e:	ff 90       	pop	r15
   17b80:	ef 90       	pop	r14
   17b82:	df 90       	pop	r13
   17b84:	cf 90       	pop	r12
   17b86:	08 95       	ret

00017b88 <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   17b88:	cf 92       	push	r12
   17b8a:	df 92       	push	r13
   17b8c:	ef 92       	push	r14
   17b8e:	ff 92       	push	r15
   17b90:	9c 01       	movw	r18, r24
   17b92:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   17b94:	60 e0       	ldi	r22, 0x00	; 0
   17b96:	70 e0       	ldi	r23, 0x00	; 0
   17b98:	cb 01       	movw	r24, r22
   17b9a:	41 50       	subi	r20, 0x01	; 1
   17b9c:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   17b9e:	57 fd       	sbrc	r21, 7
   17ba0:	0e c0       	rjmp	.+28     	; 0x17bbe <B2V_LSB+0x36>
    {
        val <<= 8;
   17ba2:	cc 24       	eor	r12, r12
   17ba4:	d6 2e       	mov	r13, r22
   17ba6:	e7 2e       	mov	r14, r23
   17ba8:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   17baa:	fa 01       	movw	r30, r20
   17bac:	ea 0f       	add	r30, r26
   17bae:	fb 1f       	adc	r31, r27
   17bb0:	e2 0f       	add	r30, r18
   17bb2:	f3 1f       	adc	r31, r19
   17bb4:	e0 81       	ld	r30, Z
   17bb6:	c7 01       	movw	r24, r14
   17bb8:	b6 01       	movw	r22, r12
   17bba:	6e 2b       	or	r22, r30
   17bbc:	ee cf       	rjmp	.-36     	; 0x17b9a <B2V_LSB+0x12>
    }
    return(val);
}
   17bbe:	ff 90       	pop	r15
   17bc0:	ef 90       	pop	r14
   17bc2:	df 90       	pop	r13
   17bc4:	cf 90       	pop	r12
   17bc6:	08 95       	ret

00017bc8 <lif_help>:
            return( (lifdir_t *) &LIF->DIR );

// Skip purged records
    }
    return( NULL );
}
   17bc8:	cf 93       	push	r28
   17bca:	df 93       	push	r29
   17bcc:	00 d0       	rcall	.+0      	; 0x17bce <lif_help+0x6>
   17bce:	1f 92       	push	r1
   17bd0:	ec 01       	movw	r28, r24
   17bd2:	86 e1       	ldi	r24, 0x16	; 22
   17bd4:	93 e4       	ldi	r25, 0x43	; 67
   17bd6:	a0 e0       	ldi	r26, 0x00	; 0
   17bd8:	ed b7       	in	r30, 0x3d	; 61
   17bda:	fe b7       	in	r31, 0x3e	; 62
   17bdc:	81 83       	std	Z+1, r24	; 0x01
   17bde:	92 83       	std	Z+2, r25	; 0x02
   17be0:	a3 83       	std	Z+3, r26	; 0x03
   17be2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   17be6:	cd 2b       	or	r28, r29
   17be8:	51 f0       	breq	.+20     	; 0x17bfe <lif_help+0x36>
   17bea:	82 e5       	ldi	r24, 0x52	; 82
   17bec:	91 e4       	ldi	r25, 0x41	; 65
   17bee:	a0 e0       	ldi	r26, 0x00	; 0
   17bf0:	ed b7       	in	r30, 0x3d	; 61
   17bf2:	fe b7       	in	r31, 0x3e	; 62
   17bf4:	81 83       	std	Z+1, r24	; 0x01
   17bf6:	92 83       	std	Z+2, r25	; 0x02
   17bf8:	a3 83       	std	Z+3, r26	; 0x03
   17bfa:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   17bfe:	cd b7       	in	r28, 0x3d	; 61
   17c00:	de b7       	in	r29, 0x3e	; 62
   17c02:	23 96       	adiw	r28, 0x03	; 3
   17c04:	e2 e0       	ldi	r30, 0x02	; 2
   17c06:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00017c0a <lif_calloc>:
   17c0a:	cf 92       	push	r12
   17c0c:	df 92       	push	r13
   17c0e:	ef 92       	push	r14
   17c10:	ff 92       	push	r15
   17c12:	cf 93       	push	r28
   17c14:	df 93       	push	r29
   17c16:	ad b7       	in	r26, 0x3d	; 61
   17c18:	be b7       	in	r27, 0x3e	; 62
   17c1a:	17 97       	sbiw	r26, 0x07	; 7
   17c1c:	0f b6       	in	r0, 0x3f	; 63
   17c1e:	f8 94       	cli
   17c20:	be bf       	out	0x3e, r27	; 62
   17c22:	0f be       	out	0x3f, r0	; 63
   17c24:	ad bf       	out	0x3d, r26	; 61
   17c26:	6b 01       	movw	r12, r22
   17c28:	7c 01       	movw	r14, r24
   17c2a:	61 e0       	ldi	r22, 0x01	; 1
   17c2c:	70 e0       	ldi	r23, 0x00	; 0
   17c2e:	c6 01       	movw	r24, r12
   17c30:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <safecalloc>
   17c34:	ec 01       	movw	r28, r24
   17c36:	89 2b       	or	r24, r25
   17c38:	71 f4       	brne	.+28     	; 0x17c56 <lif_calloc+0x4c>
   17c3a:	ed b7       	in	r30, 0x3d	; 61
   17c3c:	fe b7       	in	r31, 0x3e	; 62
   17c3e:	c4 82       	std	Z+4, r12	; 0x04
   17c40:	d5 82       	std	Z+5, r13	; 0x05
   17c42:	e6 82       	std	Z+6, r14	; 0x06
   17c44:	f7 82       	std	Z+7, r15	; 0x07
   17c46:	88 e0       	ldi	r24, 0x08	; 8
   17c48:	91 e4       	ldi	r25, 0x41	; 65
   17c4a:	a0 e0       	ldi	r26, 0x00	; 0
   17c4c:	81 83       	std	Z+1, r24	; 0x01
   17c4e:	92 83       	std	Z+2, r25	; 0x02
   17c50:	a3 83       	std	Z+3, r26	; 0x03
   17c52:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   17c56:	ce 01       	movw	r24, r28
   17c58:	ad b7       	in	r26, 0x3d	; 61
   17c5a:	be b7       	in	r27, 0x3e	; 62
   17c5c:	17 96       	adiw	r26, 0x07	; 7
   17c5e:	0f b6       	in	r0, 0x3f	; 63
   17c60:	f8 94       	cli
   17c62:	be bf       	out	0x3e, r27	; 62
   17c64:	0f be       	out	0x3f, r0	; 63
   17c66:	ad bf       	out	0x3d, r26	; 61
   17c68:	df 91       	pop	r29
   17c6a:	cf 91       	pop	r28
   17c6c:	ff 90       	pop	r15
   17c6e:	ef 90       	pop	r14
   17c70:	df 90       	pop	r13
   17c72:	cf 90       	pop	r12
   17c74:	08 95       	ret

00017c76 <lif_free>:
   17c76:	00 d0       	rcall	.+0      	; 0x17c78 <lif_free+0x2>
   17c78:	1f 92       	push	r1
   17c7a:	00 97       	sbiw	r24, 0x00	; 0
   17c7c:	59 f4       	brne	.+22     	; 0x17c94 <lif_free+0x1e>
   17c7e:	80 ef       	ldi	r24, 0xF0	; 240
   17c80:	90 e4       	ldi	r25, 0x40	; 64
   17c82:	a0 e0       	ldi	r26, 0x00	; 0
   17c84:	ed b7       	in	r30, 0x3d	; 61
   17c86:	fe b7       	in	r31, 0x3e	; 62
   17c88:	81 83       	std	Z+1, r24	; 0x01
   17c8a:	92 83       	std	Z+2, r25	; 0x02
   17c8c:	a3 83       	std	Z+3, r26	; 0x03
   17c8e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   17c92:	02 c0       	rjmp	.+4      	; 0x17c98 <lif_free+0x22>
   17c94:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <safefree>
   17c98:	0f 90       	pop	r0
   17c9a:	0f 90       	pop	r0
   17c9c:	0f 90       	pop	r0
   17c9e:	08 95       	ret

00017ca0 <lif_stralloc>:
   17ca0:	0f 93       	push	r16
   17ca2:	1f 93       	push	r17
   17ca4:	cf 93       	push	r28
   17ca6:	df 93       	push	r29
   17ca8:	ec 01       	movw	r28, r24
   17caa:	fc 01       	movw	r30, r24
   17cac:	01 90       	ld	r0, Z+
   17cae:	00 20       	and	r0, r0
   17cb0:	e9 f7       	brne	.-6      	; 0x17cac <lif_stralloc+0xc>
   17cb2:	bf 01       	movw	r22, r30
   17cb4:	68 1b       	sub	r22, r24
   17cb6:	79 0b       	sbc	r23, r25
   17cb8:	6d 5f       	subi	r22, 0xFD	; 253
   17cba:	7f 4f       	sbci	r23, 0xFF	; 255
   17cbc:	07 2e       	mov	r0, r23
   17cbe:	00 0c       	add	r0, r0
   17cc0:	88 0b       	sbc	r24, r24
   17cc2:	99 0b       	sbc	r25, r25
   17cc4:	a2 df       	rcall	.-188    	; 0x17c0a <lif_calloc>
   17cc6:	8c 01       	movw	r16, r24
   17cc8:	00 97       	sbiw	r24, 0x00	; 0
   17cca:	19 f0       	breq	.+6      	; 0x17cd2 <lif_stralloc+0x32>
   17ccc:	be 01       	movw	r22, r28
   17cce:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <strcpy>
   17cd2:	c8 01       	movw	r24, r16
   17cd4:	df 91       	pop	r29
   17cd6:	cf 91       	pop	r28
   17cd8:	1f 91       	pop	r17
   17cda:	0f 91       	pop	r16
   17cdc:	08 95       	ret

00017cde <lif_open>:
   17cde:	ef 92       	push	r14
   17ce0:	ff 92       	push	r15
   17ce2:	0f 93       	push	r16
   17ce4:	1f 93       	push	r17
   17ce6:	cf 93       	push	r28
   17ce8:	df 93       	push	r29
   17cea:	ad b7       	in	r26, 0x3d	; 61
   17cec:	be b7       	in	r27, 0x3e	; 62
   17cee:	17 97       	sbiw	r26, 0x07	; 7
   17cf0:	0f b6       	in	r0, 0x3f	; 63
   17cf2:	f8 94       	cli
   17cf4:	be bf       	out	0x3e, r27	; 62
   17cf6:	0f be       	out	0x3f, r0	; 63
   17cf8:	ad bf       	out	0x3d, r26	; 61
   17cfa:	8c 01       	movw	r16, r24
   17cfc:	7b 01       	movw	r14, r22
   17cfe:	0e 94 2b 7d 	call	0xfa56	; 0xfa56 <fopen>
   17d02:	ec 01       	movw	r28, r24
   17d04:	89 2b       	or	r24, r25
   17d06:	71 f4       	brne	.+28     	; 0x17d24 <lif_open+0x46>
   17d08:	ed b7       	in	r30, 0x3d	; 61
   17d0a:	fe b7       	in	r31, 0x3e	; 62
   17d0c:	f7 82       	std	Z+7, r15	; 0x07
   17d0e:	e6 82       	std	Z+6, r14	; 0x06
   17d10:	15 83       	std	Z+5, r17	; 0x05
   17d12:	04 83       	std	Z+4, r16	; 0x04
   17d14:	8b ec       	ldi	r24, 0xCB	; 203
   17d16:	90 e4       	ldi	r25, 0x40	; 64
   17d18:	a0 e0       	ldi	r26, 0x00	; 0
   17d1a:	81 83       	std	Z+1, r24	; 0x01
   17d1c:	92 83       	std	Z+2, r25	; 0x02
   17d1e:	a3 83       	std	Z+3, r26	; 0x03
   17d20:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   17d24:	ce 01       	movw	r24, r28
   17d26:	cd b7       	in	r28, 0x3d	; 61
   17d28:	de b7       	in	r29, 0x3e	; 62
   17d2a:	27 96       	adiw	r28, 0x07	; 7
   17d2c:	e6 e0       	ldi	r30, 0x06	; 6
   17d2e:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

00017d32 <lif_stat>:
   17d32:	0f 93       	push	r16
   17d34:	1f 93       	push	r17
   17d36:	cf 93       	push	r28
   17d38:	df 93       	push	r29
   17d3a:	00 d0       	rcall	.+0      	; 0x17d3c <lif_stat+0xa>
   17d3c:	00 d0       	rcall	.+0      	; 0x17d3e <lif_stat+0xc>
   17d3e:	1f 92       	push	r1
   17d40:	8c 01       	movw	r16, r24
   17d42:	d6 2f       	mov	r29, r22
   17d44:	c7 2f       	mov	r28, r23
   17d46:	0e 94 30 78 	call	0xf060	; 0xf060 <stat>
   17d4a:	97 ff       	sbrs	r25, 7
   17d4c:	0f c0       	rjmp	.+30     	; 0x17d6c <lif_stat+0x3a>
   17d4e:	ed b7       	in	r30, 0x3d	; 61
   17d50:	fe b7       	in	r31, 0x3e	; 62
   17d52:	15 83       	std	Z+5, r17	; 0x05
   17d54:	04 83       	std	Z+4, r16	; 0x04
   17d56:	82 eb       	ldi	r24, 0xB2	; 178
   17d58:	90 e4       	ldi	r25, 0x40	; 64
   17d5a:	a0 e0       	ldi	r26, 0x00	; 0
   17d5c:	81 83       	std	Z+1, r24	; 0x01
   17d5e:	92 83       	std	Z+2, r25	; 0x02
   17d60:	a3 83       	std	Z+3, r26	; 0x03
   17d62:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   17d66:	80 e0       	ldi	r24, 0x00	; 0
   17d68:	90 e0       	ldi	r25, 0x00	; 0
   17d6a:	02 c0       	rjmp	.+4      	; 0x17d70 <lif_stat+0x3e>
   17d6c:	8d 2f       	mov	r24, r29
   17d6e:	9c 2f       	mov	r25, r28
   17d70:	cd b7       	in	r28, 0x3d	; 61
   17d72:	de b7       	in	r29, 0x3e	; 62
   17d74:	25 96       	adiw	r28, 0x05	; 5
   17d76:	e4 e0       	ldi	r30, 0x04	; 4
   17d78:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

00017d7c <lif_seek_msg>:
   17d7c:	a9 e0       	ldi	r26, 0x09	; 9
   17d7e:	b0 e0       	ldi	r27, 0x00	; 0
   17d80:	e4 ec       	ldi	r30, 0xC4	; 196
   17d82:	fe eb       	ldi	r31, 0xBE	; 190
   17d84:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
   17d88:	ec 01       	movw	r28, r24
   17d8a:	6a 01       	movw	r12, r20
   17d8c:	7b 01       	movw	r14, r22
   17d8e:	89 01       	movw	r16, r18
   17d90:	0e 94 6a 79 	call	0xf2d4	; 0xf2d4 <ftell>
   17d94:	6c 15       	cp	r22, r12
   17d96:	7d 05       	cpc	r23, r13
   17d98:	8e 05       	cpc	r24, r14
   17d9a:	9f 05       	cpc	r25, r15
   17d9c:	19 f4       	brne	.+6      	; 0x17da4 <lif_seek_msg+0x28>
   17d9e:	81 e0       	ldi	r24, 0x01	; 1
   17da0:	90 e0       	ldi	r25, 0x00	; 0
   17da2:	1b c0       	rjmp	.+54     	; 0x17dda <lif_seek_msg+0x5e>
   17da4:	20 e0       	ldi	r18, 0x00	; 0
   17da6:	30 e0       	ldi	r19, 0x00	; 0
   17da8:	b7 01       	movw	r22, r14
   17daa:	a6 01       	movw	r20, r12
   17dac:	ce 01       	movw	r24, r28
   17dae:	0e 94 ed 79 	call	0xf3da	; 0xf3da <fseek>
   17db2:	97 ff       	sbrs	r25, 7
   17db4:	f4 cf       	rjmp	.-24     	; 0x17d9e <lif_seek_msg+0x22>
   17db6:	ed b7       	in	r30, 0x3d	; 61
   17db8:	fe b7       	in	r31, 0x3e	; 62
   17dba:	c6 82       	std	Z+6, r12	; 0x06
   17dbc:	d7 82       	std	Z+7, r13	; 0x07
   17dbe:	e0 86       	std	Z+8, r14	; 0x08
   17dc0:	f1 86       	std	Z+9, r15	; 0x09
   17dc2:	15 83       	std	Z+5, r17	; 0x05
   17dc4:	04 83       	std	Z+4, r16	; 0x04
   17dc6:	81 e9       	ldi	r24, 0x91	; 145
   17dc8:	90 e4       	ldi	r25, 0x40	; 64
   17dca:	a0 e0       	ldi	r26, 0x00	; 0
   17dcc:	81 83       	std	Z+1, r24	; 0x01
   17dce:	92 83       	std	Z+2, r25	; 0x02
   17dd0:	a3 83       	std	Z+3, r26	; 0x03
   17dd2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   17dd6:	80 e0       	ldi	r24, 0x00	; 0
   17dd8:	90 e0       	ldi	r25, 0x00	; 0
   17dda:	cd b7       	in	r28, 0x3d	; 61
   17ddc:	de b7       	in	r29, 0x3e	; 62
   17dde:	29 96       	adiw	r28, 0x09	; 9
   17de0:	e8 e0       	ldi	r30, 0x08	; 8
   17de2:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

00017de6 <lif_read>:
   17de6:	af e0       	ldi	r26, 0x0F	; 15
   17de8:	b0 e0       	ldi	r27, 0x00	; 0
   17dea:	e9 ef       	ldi	r30, 0xF9	; 249
   17dec:	fe eb       	ldi	r31, 0xBE	; 190
   17dee:	0c 94 44 e3 	jmp	0x1c688	; 0x1c688 <__prologue_saves__+0xc>
   17df2:	ec 01       	movw	r28, r24
   17df4:	7b 01       	movw	r14, r22
   17df6:	49 01       	movw	r8, r18
   17df8:	5a 01       	movw	r10, r20
   17dfa:	28 81       	ld	r18, Y
   17dfc:	39 81       	ldd	r19, Y+1	; 0x01
   17dfe:	b5 01       	movw	r22, r10
   17e00:	a4 01       	movw	r20, r8
   17e02:	8a 81       	ldd	r24, Y+2	; 0x02
   17e04:	9b 81       	ldd	r25, Y+3	; 0x03
   17e06:	ba df       	rcall	.-140    	; 0x17d7c <lif_seek_msg>
   17e08:	89 2b       	or	r24, r25
   17e0a:	a1 f1       	breq	.+104    	; 0x17e74 <lif_read+0x8e>
   17e0c:	2a 81       	ldd	r18, Y+2	; 0x02
   17e0e:	3b 81       	ldd	r19, Y+3	; 0x03
   17e10:	a8 01       	movw	r20, r16
   17e12:	61 e0       	ldi	r22, 0x01	; 1
   17e14:	70 e0       	ldi	r23, 0x00	; 0
   17e16:	c7 01       	movw	r24, r14
   17e18:	0e 94 81 7a 	call	0xf502	; 0xf502 <fread>
   17e1c:	6c 01       	movw	r12, r24
   17e1e:	e1 2c       	mov	r14, r1
   17e20:	f1 2c       	mov	r15, r1
   17e22:	b8 01       	movw	r22, r16
   17e24:	01 2e       	mov	r0, r17
   17e26:	00 0c       	add	r0, r0
   17e28:	88 0b       	sbc	r24, r24
   17e2a:	99 0b       	sbc	r25, r25
   17e2c:	c6 16       	cp	r12, r22
   17e2e:	d7 06       	cpc	r13, r23
   17e30:	e8 06       	cpc	r14, r24
   17e32:	f9 06       	cpc	r15, r25
   17e34:	29 f1       	breq	.+74     	; 0x17e80 <lif_read+0x9a>
   17e36:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17e3a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17e3e:	92 ff       	sbrs	r25, 2
   17e40:	1d c0       	rjmp	.+58     	; 0x17e7c <lif_read+0x96>
   17e42:	ed b7       	in	r30, 0x3d	; 61
   17e44:	fe b7       	in	r31, 0x3e	; 62
   17e46:	17 87       	std	Z+15, r17	; 0x0f
   17e48:	06 87       	std	Z+14, r16	; 0x0e
   17e4a:	c2 86       	std	Z+10, r12	; 0x0a
   17e4c:	d3 86       	std	Z+11, r13	; 0x0b
   17e4e:	e4 86       	std	Z+12, r14	; 0x0c
   17e50:	f5 86       	std	Z+13, r15	; 0x0d
   17e52:	86 82       	std	Z+6, r8	; 0x06
   17e54:	97 82       	std	Z+7, r9	; 0x07
   17e56:	a0 86       	std	Z+8, r10	; 0x08
   17e58:	b1 86       	std	Z+9, r11	; 0x09
   17e5a:	88 81       	ld	r24, Y
   17e5c:	99 81       	ldd	r25, Y+1	; 0x01
   17e5e:	95 83       	std	Z+5, r25	; 0x05
   17e60:	84 83       	std	Z+4, r24	; 0x04
   17e62:	85 e5       	ldi	r24, 0x55	; 85
   17e64:	90 e4       	ldi	r25, 0x40	; 64
   17e66:	a0 e0       	ldi	r26, 0x00	; 0
   17e68:	81 83       	std	Z+1, r24	; 0x01
   17e6a:	92 83       	std	Z+2, r25	; 0x02
   17e6c:	a3 83       	std	Z+3, r26	; 0x03
   17e6e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   17e72:	04 c0       	rjmp	.+8      	; 0x17e7c <lif_read+0x96>
   17e74:	60 e0       	ldi	r22, 0x00	; 0
   17e76:	70 e0       	ldi	r23, 0x00	; 0
   17e78:	cb 01       	movw	r24, r22
   17e7a:	02 c0       	rjmp	.+4      	; 0x17e80 <lif_read+0x9a>
   17e7c:	c7 01       	movw	r24, r14
   17e7e:	b6 01       	movw	r22, r12
   17e80:	cd b7       	in	r28, 0x3d	; 61
   17e82:	de b7       	in	r29, 0x3e	; 62
   17e84:	2f 96       	adiw	r28, 0x0f	; 15
   17e86:	ec e0       	ldi	r30, 0x0C	; 12
   17e88:	0c 94 60 e3 	jmp	0x1c6c0	; 0x1c6c0 <__epilogue_restores__+0xc>

00017e8c <lif_write>:
   17e8c:	8f 92       	push	r8
   17e8e:	9f 92       	push	r9
   17e90:	af 92       	push	r10
   17e92:	bf 92       	push	r11
   17e94:	ef 92       	push	r14
   17e96:	ff 92       	push	r15
   17e98:	0f 93       	push	r16
   17e9a:	1f 93       	push	r17
   17e9c:	cf 93       	push	r28
   17e9e:	df 93       	push	r29
   17ea0:	ad b7       	in	r26, 0x3d	; 61
   17ea2:	be b7       	in	r27, 0x3e	; 62
   17ea4:	1d 97       	sbiw	r26, 0x0d	; 13
   17ea6:	0f b6       	in	r0, 0x3f	; 63
   17ea8:	f8 94       	cli
   17eaa:	be bf       	out	0x3e, r27	; 62
   17eac:	0f be       	out	0x3f, r0	; 63
   17eae:	ad bf       	out	0x3d, r26	; 61
   17eb0:	7c 01       	movw	r14, r24
   17eb2:	eb 01       	movw	r28, r22
   17eb4:	49 01       	movw	r8, r18
   17eb6:	5a 01       	movw	r10, r20
   17eb8:	fc 01       	movw	r30, r24
   17eba:	20 81       	ld	r18, Z
   17ebc:	31 81       	ldd	r19, Z+1	; 0x01
   17ebe:	b5 01       	movw	r22, r10
   17ec0:	a4 01       	movw	r20, r8
   17ec2:	82 81       	ldd	r24, Z+2	; 0x02
   17ec4:	93 81       	ldd	r25, Z+3	; 0x03
   17ec6:	5a df       	rcall	.-332    	; 0x17d7c <lif_seek_msg>
   17ec8:	00 97       	sbiw	r24, 0x00	; 0
   17eca:	81 f1       	breq	.+96     	; 0x17f2c <lif_write+0xa0>
   17ecc:	f7 01       	movw	r30, r14
   17ece:	22 81       	ldd	r18, Z+2	; 0x02
   17ed0:	33 81       	ldd	r19, Z+3	; 0x03
   17ed2:	a8 01       	movw	r20, r16
   17ed4:	61 e0       	ldi	r22, 0x01	; 1
   17ed6:	70 e0       	ldi	r23, 0x00	; 0
   17ed8:	ce 01       	movw	r24, r28
   17eda:	0e 94 53 7b 	call	0xf6a6	; 0xf6a6 <fwrite>
   17ede:	ec 01       	movw	r28, r24
   17ee0:	08 17       	cp	r16, r24
   17ee2:	19 07       	cpc	r17, r25
   17ee4:	01 f1       	breq	.+64     	; 0x17f26 <lif_write+0x9a>
   17ee6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17eea:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17eee:	92 ff       	sbrs	r25, 2
   17ef0:	1c c0       	rjmp	.+56     	; 0x17f2a <lif_write+0x9e>
   17ef2:	ed b7       	in	r30, 0x3d	; 61
   17ef4:	fe b7       	in	r31, 0x3e	; 62
   17ef6:	15 87       	std	Z+13, r17	; 0x0d
   17ef8:	04 87       	std	Z+12, r16	; 0x0c
   17efa:	d3 87       	std	Z+11, r29	; 0x0b
   17efc:	c2 87       	std	Z+10, r28	; 0x0a
   17efe:	86 82       	std	Z+6, r8	; 0x06
   17f00:	97 82       	std	Z+7, r9	; 0x07
   17f02:	a0 86       	std	Z+8, r10	; 0x08
   17f04:	b1 86       	std	Z+9, r11	; 0x09
   17f06:	f7 01       	movw	r30, r14
   17f08:	80 81       	ld	r24, Z
   17f0a:	91 81       	ldd	r25, Z+1	; 0x01
   17f0c:	ed b7       	in	r30, 0x3d	; 61
   17f0e:	fe b7       	in	r31, 0x3e	; 62
   17f10:	95 83       	std	Z+5, r25	; 0x05
   17f12:	84 83       	std	Z+4, r24	; 0x04
   17f14:	88 e1       	ldi	r24, 0x18	; 24
   17f16:	90 e4       	ldi	r25, 0x40	; 64
   17f18:	a0 e0       	ldi	r26, 0x00	; 0
   17f1a:	81 83       	std	Z+1, r24	; 0x01
   17f1c:	92 83       	std	Z+2, r25	; 0x02
   17f1e:	a3 83       	std	Z+3, r26	; 0x03
   17f20:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   17f24:	02 c0       	rjmp	.+4      	; 0x17f2a <lif_write+0x9e>
   17f26:	c8 01       	movw	r24, r16
   17f28:	01 c0       	rjmp	.+2      	; 0x17f2c <lif_write+0xa0>
   17f2a:	ce 01       	movw	r24, r28
   17f2c:	ad b7       	in	r26, 0x3d	; 61
   17f2e:	be b7       	in	r27, 0x3e	; 62
   17f30:	1d 96       	adiw	r26, 0x0d	; 13
   17f32:	0f b6       	in	r0, 0x3f	; 63
   17f34:	f8 94       	cli
   17f36:	be bf       	out	0x3e, r27	; 62
   17f38:	0f be       	out	0x3f, r0	; 63
   17f3a:	ad bf       	out	0x3d, r26	; 61
   17f3c:	df 91       	pop	r29
   17f3e:	cf 91       	pop	r28
   17f40:	1f 91       	pop	r17
   17f42:	0f 91       	pop	r16
   17f44:	ff 90       	pop	r15
   17f46:	ef 90       	pop	r14
   17f48:	bf 90       	pop	r11
   17f4a:	af 90       	pop	r10
   17f4c:	9f 90       	pop	r9
   17f4e:	8f 90       	pop	r8
   17f50:	08 95       	ret

00017f52 <lif_chars>:
   17f52:	80 32       	cpi	r24, 0x20	; 32
   17f54:	91 05       	cpc	r25, r1
   17f56:	e1 f0       	breq	.+56     	; 0x17f90 <lif_chars+0x3e>
   17f58:	9c 01       	movw	r18, r24
   17f5a:	21 56       	subi	r18, 0x61	; 97
   17f5c:	31 09       	sbc	r19, r1
   17f5e:	2a 31       	cpi	r18, 0x1A	; 26
   17f60:	31 05       	cpc	r19, r1
   17f62:	10 f4       	brcc	.+4      	; 0x17f68 <lif_chars+0x16>
   17f64:	80 97       	sbiw	r24, 0x20	; 32
   17f66:	08 95       	ret
   17f68:	9c 01       	movw	r18, r24
   17f6a:	21 54       	subi	r18, 0x41	; 65
   17f6c:	31 09       	sbc	r19, r1
   17f6e:	2a 31       	cpi	r18, 0x1A	; 26
   17f70:	31 05       	cpc	r19, r1
   17f72:	c8 f0       	brcs	.+50     	; 0x17fa6 <lif_chars+0x54>
   17f74:	16 16       	cp	r1, r22
   17f76:	17 06       	cpc	r1, r23
   17f78:	74 f4       	brge	.+28     	; 0x17f96 <lif_chars+0x44>
   17f7a:	2f 5e       	subi	r18, 0xEF	; 239
   17f7c:	3f 4f       	sbci	r19, 0xFF	; 255
   17f7e:	2a 30       	cpi	r18, 0x0A	; 10
   17f80:	31 05       	cpc	r19, r1
   17f82:	88 f0       	brcs	.+34     	; 0x17fa6 <lif_chars+0x54>
   17f84:	8f 35       	cpi	r24, 0x5F	; 95
   17f86:	91 05       	cpc	r25, r1
   17f88:	49 f0       	breq	.+18     	; 0x17f9c <lif_chars+0x4a>
   17f8a:	8d 97       	sbiw	r24, 0x2d	; 45
   17f8c:	21 f4       	brne	.+8      	; 0x17f96 <lif_chars+0x44>
   17f8e:	09 c0       	rjmp	.+18     	; 0x17fa2 <lif_chars+0x50>
   17f90:	80 e2       	ldi	r24, 0x20	; 32
   17f92:	90 e0       	ldi	r25, 0x00	; 0
   17f94:	08 95       	ret
   17f96:	80 e0       	ldi	r24, 0x00	; 0
   17f98:	90 e0       	ldi	r25, 0x00	; 0
   17f9a:	08 95       	ret
   17f9c:	8f e5       	ldi	r24, 0x5F	; 95
   17f9e:	90 e0       	ldi	r25, 0x00	; 0
   17fa0:	08 95       	ret
   17fa2:	8d e2       	ldi	r24, 0x2D	; 45
   17fa4:	90 e0       	ldi	r25, 0x00	; 0
   17fa6:	08 95       	ret

00017fa8 <lif_B2S>:
   17fa8:	a0 e0       	ldi	r26, 0x00	; 0
   17faa:	b0 e0       	ldi	r27, 0x00	; 0
   17fac:	ea ed       	ldi	r30, 0xDA	; 218
   17fae:	ff eb       	ldi	r31, 0xBF	; 191
   17fb0:	0c 94 44 e3 	jmp	0x1c688	; 0x1c688 <__prologue_saves__+0xc>
   17fb4:	5c 01       	movw	r10, r24
   17fb6:	6b 01       	movw	r12, r22
   17fb8:	ea 01       	movw	r28, r20
   17fba:	4c 01       	movw	r8, r24
   17fbc:	ee 24       	eor	r14, r14
   17fbe:	e3 94       	inc	r14
   17fc0:	f1 2c       	mov	r15, r1
   17fc2:	00 e0       	ldi	r16, 0x00	; 0
   17fc4:	10 e0       	ldi	r17, 0x00	; 0
   17fc6:	0c 17       	cp	r16, r28
   17fc8:	1d 07       	cpc	r17, r29
   17fca:	6c f4       	brge	.+26     	; 0x17fe6 <lif_B2S+0x3e>
   17fcc:	f4 01       	movw	r30, r8
   17fce:	81 91       	ld	r24, Z+
   17fd0:	4f 01       	movw	r8, r30
   17fd2:	b8 01       	movw	r22, r16
   17fd4:	90 e0       	ldi	r25, 0x00	; 0
   17fd6:	bd df       	rcall	.-134    	; 0x17f52 <lif_chars>
   17fd8:	89 2b       	or	r24, r25
   17fda:	11 f4       	brne	.+4      	; 0x17fe0 <lif_B2S+0x38>
   17fdc:	e1 2c       	mov	r14, r1
   17fde:	f1 2c       	mov	r15, r1
   17fe0:	0f 5f       	subi	r16, 0xFF	; 255
   17fe2:	1f 4f       	sbci	r17, 0xFF	; 255
   17fe4:	f0 cf       	rjmp	.-32     	; 0x17fc6 <lif_B2S+0x1e>
   17fe6:	d6 01       	movw	r26, r12
   17fe8:	f5 01       	movw	r30, r10
   17fea:	cf 01       	movw	r24, r30
   17fec:	8a 19       	sub	r24, r10
   17fee:	9b 09       	sbc	r25, r11
   17ff0:	8c 17       	cp	r24, r28
   17ff2:	9d 07       	cpc	r25, r29
   17ff4:	1c f4       	brge	.+6      	; 0x17ffc <lif_B2S+0x54>
   17ff6:	81 91       	ld	r24, Z+
   17ff8:	8d 93       	st	X+, r24
   17ffa:	f7 cf       	rjmp	.-18     	; 0x17fea <lif_B2S+0x42>
   17ffc:	d7 ff       	sbrs	r29, 7
   17ffe:	02 c0       	rjmp	.+4      	; 0x18004 <lif_B2S+0x5c>
   18000:	c0 e0       	ldi	r28, 0x00	; 0
   18002:	d0 e0       	ldi	r29, 0x00	; 0
   18004:	cc 0d       	add	r28, r12
   18006:	dd 1d       	adc	r29, r13
   18008:	18 82       	st	Y, r1
   1800a:	c6 01       	movw	r24, r12
   1800c:	0e 94 22 30 	call	0x6044	; 0x6044 <trim_tail>
   18010:	c7 01       	movw	r24, r14
   18012:	cd b7       	in	r28, 0x3d	; 61
   18014:	de b7       	in	r29, 0x3e	; 62
   18016:	ec e0       	ldi	r30, 0x0C	; 12
   18018:	0c 94 60 e3 	jmp	0x1c6c0	; 0x1c6c0 <__epilogue_restores__+0xc>

0001801c <lif_checkname>:
   1801c:	ef 92       	push	r14
   1801e:	ff 92       	push	r15
   18020:	0f 93       	push	r16
   18022:	1f 93       	push	r17
   18024:	cf 93       	push	r28
   18026:	df 93       	push	r29
   18028:	7c 01       	movw	r14, r24
   1802a:	ec 01       	movw	r28, r24
   1802c:	01 e0       	ldi	r16, 0x01	; 1
   1802e:	10 e0       	ldi	r17, 0x00	; 0
   18030:	be 01       	movw	r22, r28
   18032:	6e 19       	sub	r22, r14
   18034:	7f 09       	sbc	r23, r15
   18036:	89 91       	ld	r24, Y+
   18038:	88 23       	and	r24, r24
   1803a:	39 f0       	breq	.+14     	; 0x1804a <lif_checkname+0x2e>
   1803c:	90 e0       	ldi	r25, 0x00	; 0
   1803e:	89 df       	rcall	.-238    	; 0x17f52 <lif_chars>
   18040:	89 2b       	or	r24, r25
   18042:	b1 f7       	brne	.-20     	; 0x18030 <lif_checkname+0x14>
   18044:	00 e0       	ldi	r16, 0x00	; 0
   18046:	10 e0       	ldi	r17, 0x00	; 0
   18048:	f3 cf       	rjmp	.-26     	; 0x18030 <lif_checkname+0x14>
   1804a:	c8 01       	movw	r24, r16
   1804c:	cd b7       	in	r28, 0x3d	; 61
   1804e:	de b7       	in	r29, 0x3e	; 62
   18050:	e6 e0       	ldi	r30, 0x06	; 6
   18052:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

00018056 <lif_S2B>:
   18056:	fb 01       	movw	r30, r22
   18058:	dc 01       	movw	r26, r24
   1805a:	20 e0       	ldi	r18, 0x00	; 0
   1805c:	30 e0       	ldi	r19, 0x00	; 0
   1805e:	61 91       	ld	r22, Z+
   18060:	61 11       	cpse	r22, r1
   18062:	05 c0       	rjmp	.+10     	; 0x1806e <lif_S2B+0x18>
   18064:	fc 01       	movw	r30, r24
   18066:	e2 0f       	add	r30, r18
   18068:	f3 1f       	adc	r31, r19
   1806a:	60 e2       	ldi	r22, 0x20	; 32
   1806c:	08 c0       	rjmp	.+16     	; 0x1807e <lif_S2B+0x28>
   1806e:	24 17       	cp	r18, r20
   18070:	35 07       	cpc	r19, r21
   18072:	24 f4       	brge	.+8      	; 0x1807c <lif_S2B+0x26>
   18074:	6d 93       	st	X+, r22
   18076:	2f 5f       	subi	r18, 0xFF	; 255
   18078:	3f 4f       	sbci	r19, 0xFF	; 255
   1807a:	f1 cf       	rjmp	.-30     	; 0x1805e <lif_S2B+0x8>
   1807c:	08 95       	ret
   1807e:	9f 01       	movw	r18, r30
   18080:	28 1b       	sub	r18, r24
   18082:	39 0b       	sbc	r19, r25
   18084:	24 17       	cp	r18, r20
   18086:	35 07       	cpc	r19, r21
   18088:	14 f4       	brge	.+4      	; 0x1808e <lif_S2B+0x38>
   1808a:	61 93       	st	Z+, r22
   1808c:	f8 cf       	rjmp	.-16     	; 0x1807e <lif_S2B+0x28>
   1808e:	08 95       	ret

00018090 <lif_fixname>:
   18090:	a0 e0       	ldi	r26, 0x00	; 0
   18092:	b0 e0       	ldi	r27, 0x00	; 0
   18094:	ee e4       	ldi	r30, 0x4E	; 78
   18096:	f0 ec       	ldi	r31, 0xC0	; 192
   18098:	0c 94 47 e3 	jmp	0x1c68e	; 0x1c68e <__prologue_saves__+0x12>
   1809c:	8c 01       	movw	r16, r24
   1809e:	cb 01       	movw	r24, r22
   180a0:	7a 01       	movw	r14, r20
   180a2:	0e 94 fc 75 	call	0xebf8	; 0xebf8 <basename>
   180a6:	6c 01       	movw	r12, r24
   180a8:	e8 01       	movw	r28, r16
   180aa:	80 e2       	ldi	r24, 0x20	; 32
   180ac:	b8 2e       	mov	r11, r24
   180ae:	be 01       	movw	r22, r28
   180b0:	60 1b       	sub	r22, r16
   180b2:	71 0b       	sbc	r23, r17
   180b4:	f6 01       	movw	r30, r12
   180b6:	81 91       	ld	r24, Z+
   180b8:	6f 01       	movw	r12, r30
   180ba:	81 11       	cpse	r24, r1
   180bc:	02 c0       	rjmp	.+4      	; 0x180c2 <lif_fixname+0x32>
   180be:	20 e2       	ldi	r18, 0x20	; 32
   180c0:	0e c0       	rjmp	.+28     	; 0x180de <lif_fixname+0x4e>
   180c2:	1e 14       	cp	r1, r14
   180c4:	1f 04       	cpc	r1, r15
   180c6:	dc f7       	brge	.-10     	; 0x180be <lif_fixname+0x2e>
   180c8:	8e 32       	cpi	r24, 0x2E	; 46
   180ca:	c9 f3       	breq	.-14     	; 0x180be <lif_fixname+0x2e>
   180cc:	90 e0       	ldi	r25, 0x00	; 0
   180ce:	41 df       	rcall	.-382    	; 0x17f52 <lif_chars>
   180d0:	88 23       	and	r24, r24
   180d2:	11 f0       	breq	.+4      	; 0x180d8 <lif_fixname+0x48>
   180d4:	88 83       	st	Y, r24
   180d6:	01 c0       	rjmp	.+2      	; 0x180da <lif_fixname+0x4a>
   180d8:	b8 82       	st	Y, r11
   180da:	21 96       	adiw	r28, 0x01	; 1
   180dc:	e8 cf       	rjmp	.-48     	; 0x180ae <lif_fixname+0x1e>
   180de:	ce 01       	movw	r24, r28
   180e0:	80 1b       	sub	r24, r16
   180e2:	91 0b       	sbc	r25, r17
   180e4:	8e 15       	cp	r24, r14
   180e6:	9f 05       	cpc	r25, r15
   180e8:	14 f4       	brge	.+4      	; 0x180ee <lif_fixname+0x5e>
   180ea:	29 93       	st	Y+, r18
   180ec:	f8 cf       	rjmp	.-16     	; 0x180de <lif_fixname+0x4e>
   180ee:	18 82       	st	Y, r1
   180f0:	f8 01       	movw	r30, r16
   180f2:	01 90       	ld	r0, Z+
   180f4:	00 20       	and	r0, r0
   180f6:	e9 f7       	brne	.-6      	; 0x180f2 <lif_fixname+0x62>
   180f8:	cf 01       	movw	r24, r30
   180fa:	01 97       	sbiw	r24, 0x01	; 1
   180fc:	80 1b       	sub	r24, r16
   180fe:	91 0b       	sbc	r25, r17
   18100:	cd b7       	in	r28, 0x3d	; 61
   18102:	de b7       	in	r29, 0x3e	; 62
   18104:	e9 e0       	ldi	r30, 0x09	; 9
   18106:	0c 94 63 e3 	jmp	0x1c6c6	; 0x1c6c6 <__epilogue_restores__+0x12>

0001810a <lif_vol2str>:
   1810a:	ef 92       	push	r14
   1810c:	ff 92       	push	r15
   1810e:	0f 93       	push	r16
   18110:	1f 93       	push	r17
   18112:	cf 93       	push	r28
   18114:	df 93       	push	r29
   18116:	7c 01       	movw	r14, r24
   18118:	eb 01       	movw	r28, r22
   1811a:	fc 01       	movw	r30, r24
   1811c:	04 a1       	ldd	r16, Z+36	; 0x24
   1811e:	15 a1       	ldd	r17, Z+37	; 0x25
   18120:	20 e0       	ldi	r18, 0x00	; 0
   18122:	30 e0       	ldi	r19, 0x00	; 0
   18124:	42 e0       	ldi	r20, 0x02	; 2
   18126:	50 e0       	ldi	r21, 0x00	; 0
   18128:	60 e0       	ldi	r22, 0x00	; 0
   1812a:	70 e0       	ldi	r23, 0x00	; 0
   1812c:	ce 01       	movw	r24, r28
   1812e:	e4 dc       	rcall	.-1592   	; 0x17af8 <V2B_MSB>
   18130:	b7 01       	movw	r22, r14
   18132:	6a 5d       	subi	r22, 0xDA	; 218
   18134:	7f 4f       	sbci	r23, 0xFF	; 255
   18136:	46 e0       	ldi	r20, 0x06	; 6
   18138:	50 e0       	ldi	r21, 0x00	; 0
   1813a:	ce 01       	movw	r24, r28
   1813c:	02 96       	adiw	r24, 0x02	; 2
   1813e:	8b df       	rcall	.-234    	; 0x18056 <lif_S2B>
   18140:	f7 01       	movw	r30, r14
   18142:	05 a5       	ldd	r16, Z+45	; 0x2d
   18144:	16 a5       	ldd	r17, Z+46	; 0x2e
   18146:	27 a5       	ldd	r18, Z+47	; 0x2f
   18148:	30 a9       	ldd	r19, Z+48	; 0x30
   1814a:	44 e0       	ldi	r20, 0x04	; 4
   1814c:	50 e0       	ldi	r21, 0x00	; 0
   1814e:	68 e0       	ldi	r22, 0x08	; 8
   18150:	70 e0       	ldi	r23, 0x00	; 0
   18152:	ce 01       	movw	r24, r28
   18154:	d1 dc       	rcall	.-1630   	; 0x17af8 <V2B_MSB>
   18156:	f7 01       	movw	r30, r14
   18158:	01 a9       	ldd	r16, Z+49	; 0x31
   1815a:	12 a9       	ldd	r17, Z+50	; 0x32
   1815c:	20 e0       	ldi	r18, 0x00	; 0
   1815e:	30 e0       	ldi	r19, 0x00	; 0
   18160:	42 e0       	ldi	r20, 0x02	; 2
   18162:	50 e0       	ldi	r21, 0x00	; 0
   18164:	6c e0       	ldi	r22, 0x0C	; 12
   18166:	70 e0       	ldi	r23, 0x00	; 0
   18168:	ce 01       	movw	r24, r28
   1816a:	c6 dc       	rcall	.-1652   	; 0x17af8 <V2B_MSB>
   1816c:	00 e0       	ldi	r16, 0x00	; 0
   1816e:	10 e0       	ldi	r17, 0x00	; 0
   18170:	98 01       	movw	r18, r16
   18172:	42 e0       	ldi	r20, 0x02	; 2
   18174:	50 e0       	ldi	r21, 0x00	; 0
   18176:	6e e0       	ldi	r22, 0x0E	; 14
   18178:	70 e0       	ldi	r23, 0x00	; 0
   1817a:	ce 01       	movw	r24, r28
   1817c:	bd dc       	rcall	.-1670   	; 0x17af8 <V2B_MSB>
   1817e:	f7 01       	movw	r30, r14
   18180:	05 a9       	ldd	r16, Z+53	; 0x35
   18182:	16 a9       	ldd	r17, Z+54	; 0x36
   18184:	27 a9       	ldd	r18, Z+55	; 0x37
   18186:	30 ad       	ldd	r19, Z+56	; 0x38
   18188:	44 e0       	ldi	r20, 0x04	; 4
   1818a:	50 e0       	ldi	r21, 0x00	; 0
   1818c:	60 e1       	ldi	r22, 0x10	; 16
   1818e:	70 e0       	ldi	r23, 0x00	; 0
   18190:	ce 01       	movw	r24, r28
   18192:	b2 dc       	rcall	.-1692   	; 0x17af8 <V2B_MSB>
   18194:	f7 01       	movw	r30, r14
   18196:	01 ad       	ldd	r16, Z+57	; 0x39
   18198:	12 ad       	ldd	r17, Z+58	; 0x3a
   1819a:	20 e0       	ldi	r18, 0x00	; 0
   1819c:	30 e0       	ldi	r19, 0x00	; 0
   1819e:	42 e0       	ldi	r20, 0x02	; 2
   181a0:	50 e0       	ldi	r21, 0x00	; 0
   181a2:	64 e1       	ldi	r22, 0x14	; 20
   181a4:	70 e0       	ldi	r23, 0x00	; 0
   181a6:	ce 01       	movw	r24, r28
   181a8:	a7 dc       	rcall	.-1714   	; 0x17af8 <V2B_MSB>
   181aa:	00 e0       	ldi	r16, 0x00	; 0
   181ac:	10 e0       	ldi	r17, 0x00	; 0
   181ae:	98 01       	movw	r18, r16
   181b0:	42 e0       	ldi	r20, 0x02	; 2
   181b2:	50 e0       	ldi	r21, 0x00	; 0
   181b4:	66 e1       	ldi	r22, 0x16	; 22
   181b6:	70 e0       	ldi	r23, 0x00	; 0
   181b8:	ce 01       	movw	r24, r28
   181ba:	9e dc       	rcall	.-1732   	; 0x17af8 <V2B_MSB>
   181bc:	f7 01       	movw	r30, r14
   181be:	fd 96       	adiw	r30, 0x3d	; 61
   181c0:	00 81       	ld	r16, Z
   181c2:	11 81       	ldd	r17, Z+1	; 0x01
   181c4:	22 81       	ldd	r18, Z+2	; 0x02
   181c6:	33 81       	ldd	r19, Z+3	; 0x03
   181c8:	44 e0       	ldi	r20, 0x04	; 4
   181ca:	50 e0       	ldi	r21, 0x00	; 0
   181cc:	68 e1       	ldi	r22, 0x18	; 24
   181ce:	70 e0       	ldi	r23, 0x00	; 0
   181d0:	ce 01       	movw	r24, r28
   181d2:	92 dc       	rcall	.-1756   	; 0x17af8 <V2B_MSB>
   181d4:	f7 01       	movw	r30, r14
   181d6:	ef 5b       	subi	r30, 0xBF	; 191
   181d8:	ff 4f       	sbci	r31, 0xFF	; 255
   181da:	00 81       	ld	r16, Z
   181dc:	11 81       	ldd	r17, Z+1	; 0x01
   181de:	22 81       	ldd	r18, Z+2	; 0x02
   181e0:	33 81       	ldd	r19, Z+3	; 0x03
   181e2:	44 e0       	ldi	r20, 0x04	; 4
   181e4:	50 e0       	ldi	r21, 0x00	; 0
   181e6:	6c e1       	ldi	r22, 0x1C	; 28
   181e8:	70 e0       	ldi	r23, 0x00	; 0
   181ea:	ce 01       	movw	r24, r28
   181ec:	85 dc       	rcall	.-1782   	; 0x17af8 <V2B_MSB>
   181ee:	f7 01       	movw	r30, r14
   181f0:	eb 5b       	subi	r30, 0xBB	; 187
   181f2:	ff 4f       	sbci	r31, 0xFF	; 255
   181f4:	00 81       	ld	r16, Z
   181f6:	11 81       	ldd	r17, Z+1	; 0x01
   181f8:	22 81       	ldd	r18, Z+2	; 0x02
   181fa:	33 81       	ldd	r19, Z+3	; 0x03
   181fc:	44 e0       	ldi	r20, 0x04	; 4
   181fe:	50 e0       	ldi	r21, 0x00	; 0
   18200:	60 e2       	ldi	r22, 0x20	; 32
   18202:	70 e0       	ldi	r23, 0x00	; 0
   18204:	ce 01       	movw	r24, r28
   18206:	78 dc       	rcall	.-1808   	; 0x17af8 <V2B_MSB>
   18208:	de 01       	movw	r26, r28
   1820a:	94 96       	adiw	r26, 0x24	; 36
   1820c:	f7 01       	movw	r30, r14
   1820e:	e7 5b       	subi	r30, 0xB7	; 183
   18210:	ff 4f       	sbci	r31, 0xFF	; 255
   18212:	86 e0       	ldi	r24, 0x06	; 6
   18214:	01 90       	ld	r0, Z+
   18216:	0d 92       	st	X+, r0
   18218:	8a 95       	dec	r24
   1821a:	e1 f7       	brne	.-8      	; 0x18214 <lif_vol2str+0x10a>
   1821c:	cd b7       	in	r28, 0x3d	; 61
   1821e:	de b7       	in	r29, 0x3e	; 62
   18220:	e6 e0       	ldi	r30, 0x06	; 6
   18222:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

00018226 <lif_str2vol>:
   18226:	0f 93       	push	r16
   18228:	1f 93       	push	r17
   1822a:	cf 93       	push	r28
   1822c:	df 93       	push	r29
   1822e:	8c 01       	movw	r16, r24
   18230:	eb 01       	movw	r28, r22
   18232:	42 e0       	ldi	r20, 0x02	; 2
   18234:	50 e0       	ldi	r21, 0x00	; 0
   18236:	60 e0       	ldi	r22, 0x00	; 0
   18238:	70 e0       	ldi	r23, 0x00	; 0
   1823a:	87 dc       	rcall	.-1778   	; 0x17b4a <B2V_MSB>
   1823c:	7d a3       	std	Y+37, r23	; 0x25
   1823e:	6c a3       	std	Y+36, r22	; 0x24
   18240:	be 01       	movw	r22, r28
   18242:	6a 5d       	subi	r22, 0xDA	; 218
   18244:	7f 4f       	sbci	r23, 0xFF	; 255
   18246:	46 e0       	ldi	r20, 0x06	; 6
   18248:	50 e0       	ldi	r21, 0x00	; 0
   1824a:	c8 01       	movw	r24, r16
   1824c:	02 96       	adiw	r24, 0x02	; 2
   1824e:	ac de       	rcall	.-680    	; 0x17fa8 <lif_B2S>
   18250:	44 e0       	ldi	r20, 0x04	; 4
   18252:	50 e0       	ldi	r21, 0x00	; 0
   18254:	68 e0       	ldi	r22, 0x08	; 8
   18256:	70 e0       	ldi	r23, 0x00	; 0
   18258:	c8 01       	movw	r24, r16
   1825a:	77 dc       	rcall	.-1810   	; 0x17b4a <B2V_MSB>
   1825c:	6d a7       	std	Y+45, r22	; 0x2d
   1825e:	7e a7       	std	Y+46, r23	; 0x2e
   18260:	8f a7       	std	Y+47, r24	; 0x2f
   18262:	98 ab       	std	Y+48, r25	; 0x30
   18264:	42 e0       	ldi	r20, 0x02	; 2
   18266:	50 e0       	ldi	r21, 0x00	; 0
   18268:	6c e0       	ldi	r22, 0x0C	; 12
   1826a:	70 e0       	ldi	r23, 0x00	; 0
   1826c:	c8 01       	movw	r24, r16
   1826e:	6d dc       	rcall	.-1830   	; 0x17b4a <B2V_MSB>
   18270:	7a ab       	std	Y+50, r23	; 0x32
   18272:	69 ab       	std	Y+49, r22	; 0x31
   18274:	42 e0       	ldi	r20, 0x02	; 2
   18276:	50 e0       	ldi	r21, 0x00	; 0
   18278:	6e e0       	ldi	r22, 0x0E	; 14
   1827a:	70 e0       	ldi	r23, 0x00	; 0
   1827c:	c8 01       	movw	r24, r16
   1827e:	65 dc       	rcall	.-1846   	; 0x17b4a <B2V_MSB>
   18280:	7c ab       	std	Y+52, r23	; 0x34
   18282:	6b ab       	std	Y+51, r22	; 0x33
   18284:	44 e0       	ldi	r20, 0x04	; 4
   18286:	50 e0       	ldi	r21, 0x00	; 0
   18288:	60 e1       	ldi	r22, 0x10	; 16
   1828a:	70 e0       	ldi	r23, 0x00	; 0
   1828c:	c8 01       	movw	r24, r16
   1828e:	5d dc       	rcall	.-1862   	; 0x17b4a <B2V_MSB>
   18290:	6d ab       	std	Y+53, r22	; 0x35
   18292:	7e ab       	std	Y+54, r23	; 0x36
   18294:	8f ab       	std	Y+55, r24	; 0x37
   18296:	98 af       	std	Y+56, r25	; 0x38
   18298:	42 e0       	ldi	r20, 0x02	; 2
   1829a:	50 e0       	ldi	r21, 0x00	; 0
   1829c:	64 e1       	ldi	r22, 0x14	; 20
   1829e:	70 e0       	ldi	r23, 0x00	; 0
   182a0:	c8 01       	movw	r24, r16
   182a2:	53 dc       	rcall	.-1882   	; 0x17b4a <B2V_MSB>
   182a4:	7a af       	std	Y+58, r23	; 0x3a
   182a6:	69 af       	std	Y+57, r22	; 0x39
   182a8:	42 e0       	ldi	r20, 0x02	; 2
   182aa:	50 e0       	ldi	r21, 0x00	; 0
   182ac:	66 e1       	ldi	r22, 0x16	; 22
   182ae:	70 e0       	ldi	r23, 0x00	; 0
   182b0:	c8 01       	movw	r24, r16
   182b2:	4b dc       	rcall	.-1898   	; 0x17b4a <B2V_MSB>
   182b4:	7c af       	std	Y+60, r23	; 0x3c
   182b6:	6b af       	std	Y+59, r22	; 0x3b
   182b8:	44 e0       	ldi	r20, 0x04	; 4
   182ba:	50 e0       	ldi	r21, 0x00	; 0
   182bc:	68 e1       	ldi	r22, 0x18	; 24
   182be:	70 e0       	ldi	r23, 0x00	; 0
   182c0:	c8 01       	movw	r24, r16
   182c2:	43 dc       	rcall	.-1914   	; 0x17b4a <B2V_MSB>
   182c4:	fe 01       	movw	r30, r28
   182c6:	fd 96       	adiw	r30, 0x3d	; 61
   182c8:	60 83       	st	Z, r22
   182ca:	71 83       	std	Z+1, r23	; 0x01
   182cc:	82 83       	std	Z+2, r24	; 0x02
   182ce:	93 83       	std	Z+3, r25	; 0x03
   182d0:	44 e0       	ldi	r20, 0x04	; 4
   182d2:	50 e0       	ldi	r21, 0x00	; 0
   182d4:	6c e1       	ldi	r22, 0x1C	; 28
   182d6:	70 e0       	ldi	r23, 0x00	; 0
   182d8:	c8 01       	movw	r24, r16
   182da:	37 dc       	rcall	.-1938   	; 0x17b4a <B2V_MSB>
   182dc:	fe 01       	movw	r30, r28
   182de:	ef 5b       	subi	r30, 0xBF	; 191
   182e0:	ff 4f       	sbci	r31, 0xFF	; 255
   182e2:	60 83       	st	Z, r22
   182e4:	71 83       	std	Z+1, r23	; 0x01
   182e6:	82 83       	std	Z+2, r24	; 0x02
   182e8:	93 83       	std	Z+3, r25	; 0x03
   182ea:	44 e0       	ldi	r20, 0x04	; 4
   182ec:	50 e0       	ldi	r21, 0x00	; 0
   182ee:	60 e2       	ldi	r22, 0x20	; 32
   182f0:	70 e0       	ldi	r23, 0x00	; 0
   182f2:	c8 01       	movw	r24, r16
   182f4:	2a dc       	rcall	.-1964   	; 0x17b4a <B2V_MSB>
   182f6:	fe 01       	movw	r30, r28
   182f8:	eb 5b       	subi	r30, 0xBB	; 187
   182fa:	ff 4f       	sbci	r31, 0xFF	; 255
   182fc:	60 83       	st	Z, r22
   182fe:	71 83       	std	Z+1, r23	; 0x01
   18300:	82 83       	std	Z+2, r24	; 0x02
   18302:	93 83       	std	Z+3, r25	; 0x03
   18304:	de 01       	movw	r26, r28
   18306:	a7 5b       	subi	r26, 0xB7	; 183
   18308:	bf 4f       	sbci	r27, 0xFF	; 255
   1830a:	f8 01       	movw	r30, r16
   1830c:	b4 96       	adiw	r30, 0x24	; 36
   1830e:	86 e0       	ldi	r24, 0x06	; 6
   18310:	01 90       	ld	r0, Z+
   18312:	0d 92       	st	X+, r0
   18314:	8a 95       	dec	r24
   18316:	e1 f7       	brne	.-8      	; 0x18310 <lif_str2vol+0xea>
   18318:	df 91       	pop	r29
   1831a:	cf 91       	pop	r28
   1831c:	1f 91       	pop	r17
   1831e:	0f 91       	pop	r16
   18320:	08 95       	ret

00018322 <lif_dir2str>:
   18322:	ef 92       	push	r14
   18324:	ff 92       	push	r15
   18326:	0f 93       	push	r16
   18328:	1f 93       	push	r17
   1832a:	cf 93       	push	r28
   1832c:	df 93       	push	r29
   1832e:	ec 01       	movw	r28, r24
   18330:	7b 01       	movw	r14, r22
   18332:	bc 01       	movw	r22, r24
   18334:	61 5b       	subi	r22, 0xB1	; 177
   18336:	7f 4f       	sbci	r23, 0xFF	; 255
   18338:	4a e0       	ldi	r20, 0x0A	; 10
   1833a:	50 e0       	ldi	r21, 0x00	; 0
   1833c:	c7 01       	movw	r24, r14
   1833e:	8b de       	rcall	.-746    	; 0x18056 <lif_S2B>
   18340:	fe 01       	movw	r30, r28
   18342:	e6 5a       	subi	r30, 0xA6	; 166
   18344:	ff 4f       	sbci	r31, 0xFF	; 255
   18346:	00 81       	ld	r16, Z
   18348:	11 81       	ldd	r17, Z+1	; 0x01
   1834a:	20 e0       	ldi	r18, 0x00	; 0
   1834c:	30 e0       	ldi	r19, 0x00	; 0
   1834e:	42 e0       	ldi	r20, 0x02	; 2
   18350:	50 e0       	ldi	r21, 0x00	; 0
   18352:	6a e0       	ldi	r22, 0x0A	; 10
   18354:	70 e0       	ldi	r23, 0x00	; 0
   18356:	c7 01       	movw	r24, r14
   18358:	cf db       	rcall	.-2146   	; 0x17af8 <V2B_MSB>
   1835a:	fe 01       	movw	r30, r28
   1835c:	e4 5a       	subi	r30, 0xA4	; 164
   1835e:	ff 4f       	sbci	r31, 0xFF	; 255
   18360:	00 81       	ld	r16, Z
   18362:	11 81       	ldd	r17, Z+1	; 0x01
   18364:	22 81       	ldd	r18, Z+2	; 0x02
   18366:	33 81       	ldd	r19, Z+3	; 0x03
   18368:	44 e0       	ldi	r20, 0x04	; 4
   1836a:	50 e0       	ldi	r21, 0x00	; 0
   1836c:	6c e0       	ldi	r22, 0x0C	; 12
   1836e:	70 e0       	ldi	r23, 0x00	; 0
   18370:	c7 01       	movw	r24, r14
   18372:	c2 db       	rcall	.-2172   	; 0x17af8 <V2B_MSB>
   18374:	fe 01       	movw	r30, r28
   18376:	e0 5a       	subi	r30, 0xA0	; 160
   18378:	ff 4f       	sbci	r31, 0xFF	; 255
   1837a:	00 81       	ld	r16, Z
   1837c:	11 81       	ldd	r17, Z+1	; 0x01
   1837e:	22 81       	ldd	r18, Z+2	; 0x02
   18380:	33 81       	ldd	r19, Z+3	; 0x03
   18382:	44 e0       	ldi	r20, 0x04	; 4
   18384:	50 e0       	ldi	r21, 0x00	; 0
   18386:	60 e1       	ldi	r22, 0x10	; 16
   18388:	70 e0       	ldi	r23, 0x00	; 0
   1838a:	c7 01       	movw	r24, r14
   1838c:	b5 db       	rcall	.-2198   	; 0x17af8 <V2B_MSB>
   1838e:	d7 01       	movw	r26, r14
   18390:	54 96       	adiw	r26, 0x14	; 20
   18392:	fe 01       	movw	r30, r28
   18394:	ec 59       	subi	r30, 0x9C	; 156
   18396:	ff 4f       	sbci	r31, 0xFF	; 255
   18398:	86 e0       	ldi	r24, 0x06	; 6
   1839a:	01 90       	ld	r0, Z+
   1839c:	0d 92       	st	X+, r0
   1839e:	8a 95       	dec	r24
   183a0:	e1 f7       	brne	.-8      	; 0x1839a <lif_dir2str+0x78>
   183a2:	fe 01       	movw	r30, r28
   183a4:	e6 59       	subi	r30, 0x96	; 150
   183a6:	ff 4f       	sbci	r31, 0xFF	; 255
   183a8:	00 81       	ld	r16, Z
   183aa:	11 81       	ldd	r17, Z+1	; 0x01
   183ac:	20 e0       	ldi	r18, 0x00	; 0
   183ae:	30 e0       	ldi	r19, 0x00	; 0
   183b0:	42 e0       	ldi	r20, 0x02	; 2
   183b2:	50 e0       	ldi	r21, 0x00	; 0
   183b4:	6a e1       	ldi	r22, 0x1A	; 26
   183b6:	70 e0       	ldi	r23, 0x00	; 0
   183b8:	c7 01       	movw	r24, r14
   183ba:	9e db       	rcall	.-2244   	; 0x17af8 <V2B_MSB>
   183bc:	fe 01       	movw	r30, r28
   183be:	e4 59       	subi	r30, 0x94	; 148
   183c0:	ff 4f       	sbci	r31, 0xFF	; 255
   183c2:	00 81       	ld	r16, Z
   183c4:	11 81       	ldd	r17, Z+1	; 0x01
   183c6:	20 e0       	ldi	r18, 0x00	; 0
   183c8:	30 e0       	ldi	r19, 0x00	; 0
   183ca:	42 e0       	ldi	r20, 0x02	; 2
   183cc:	50 e0       	ldi	r21, 0x00	; 0
   183ce:	6c e1       	ldi	r22, 0x1C	; 28
   183d0:	70 e0       	ldi	r23, 0x00	; 0
   183d2:	c7 01       	movw	r24, r14
   183d4:	a5 db       	rcall	.-2230   	; 0x17b20 <V2B_LSB>
   183d6:	c2 59       	subi	r28, 0x92	; 146
   183d8:	df 4f       	sbci	r29, 0xFF	; 255
   183da:	08 81       	ld	r16, Y
   183dc:	19 81       	ldd	r17, Y+1	; 0x01
   183de:	20 e0       	ldi	r18, 0x00	; 0
   183e0:	30 e0       	ldi	r19, 0x00	; 0
   183e2:	42 e0       	ldi	r20, 0x02	; 2
   183e4:	50 e0       	ldi	r21, 0x00	; 0
   183e6:	6e e1       	ldi	r22, 0x1E	; 30
   183e8:	70 e0       	ldi	r23, 0x00	; 0
   183ea:	c7 01       	movw	r24, r14
   183ec:	99 db       	rcall	.-2254   	; 0x17b20 <V2B_LSB>
   183ee:	cd b7       	in	r28, 0x3d	; 61
   183f0:	de b7       	in	r29, 0x3e	; 62
   183f2:	e6 e0       	ldi	r30, 0x06	; 6
   183f4:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

000183f8 <lif_str2dir>:
   183f8:	0f 93       	push	r16
   183fa:	1f 93       	push	r17
   183fc:	cf 93       	push	r28
   183fe:	df 93       	push	r29
   18400:	8c 01       	movw	r16, r24
   18402:	eb 01       	movw	r28, r22
   18404:	61 5b       	subi	r22, 0xB1	; 177
   18406:	7f 4f       	sbci	r23, 0xFF	; 255
   18408:	4a e0       	ldi	r20, 0x0A	; 10
   1840a:	50 e0       	ldi	r21, 0x00	; 0
   1840c:	cd dd       	rcall	.-1126   	; 0x17fa8 <lif_B2S>
   1840e:	42 e0       	ldi	r20, 0x02	; 2
   18410:	50 e0       	ldi	r21, 0x00	; 0
   18412:	6a e0       	ldi	r22, 0x0A	; 10
   18414:	70 e0       	ldi	r23, 0x00	; 0
   18416:	c8 01       	movw	r24, r16
   18418:	98 db       	rcall	.-2256   	; 0x17b4a <B2V_MSB>
   1841a:	fe 01       	movw	r30, r28
   1841c:	e6 5a       	subi	r30, 0xA6	; 166
   1841e:	ff 4f       	sbci	r31, 0xFF	; 255
   18420:	71 83       	std	Z+1, r23	; 0x01
   18422:	60 83       	st	Z, r22
   18424:	44 e0       	ldi	r20, 0x04	; 4
   18426:	50 e0       	ldi	r21, 0x00	; 0
   18428:	6c e0       	ldi	r22, 0x0C	; 12
   1842a:	70 e0       	ldi	r23, 0x00	; 0
   1842c:	c8 01       	movw	r24, r16
   1842e:	8d db       	rcall	.-2278   	; 0x17b4a <B2V_MSB>
   18430:	fe 01       	movw	r30, r28
   18432:	e4 5a       	subi	r30, 0xA4	; 164
   18434:	ff 4f       	sbci	r31, 0xFF	; 255
   18436:	60 83       	st	Z, r22
   18438:	71 83       	std	Z+1, r23	; 0x01
   1843a:	82 83       	std	Z+2, r24	; 0x02
   1843c:	93 83       	std	Z+3, r25	; 0x03
   1843e:	44 e0       	ldi	r20, 0x04	; 4
   18440:	50 e0       	ldi	r21, 0x00	; 0
   18442:	60 e1       	ldi	r22, 0x10	; 16
   18444:	70 e0       	ldi	r23, 0x00	; 0
   18446:	c8 01       	movw	r24, r16
   18448:	80 db       	rcall	.-2304   	; 0x17b4a <B2V_MSB>
   1844a:	fe 01       	movw	r30, r28
   1844c:	e0 5a       	subi	r30, 0xA0	; 160
   1844e:	ff 4f       	sbci	r31, 0xFF	; 255
   18450:	60 83       	st	Z, r22
   18452:	71 83       	std	Z+1, r23	; 0x01
   18454:	82 83       	std	Z+2, r24	; 0x02
   18456:	93 83       	std	Z+3, r25	; 0x03
   18458:	de 01       	movw	r26, r28
   1845a:	ac 59       	subi	r26, 0x9C	; 156
   1845c:	bf 4f       	sbci	r27, 0xFF	; 255
   1845e:	f8 01       	movw	r30, r16
   18460:	74 96       	adiw	r30, 0x14	; 20
   18462:	86 e0       	ldi	r24, 0x06	; 6
   18464:	01 90       	ld	r0, Z+
   18466:	0d 92       	st	X+, r0
   18468:	8a 95       	dec	r24
   1846a:	e1 f7       	brne	.-8      	; 0x18464 <lif_str2dir+0x6c>
   1846c:	42 e0       	ldi	r20, 0x02	; 2
   1846e:	50 e0       	ldi	r21, 0x00	; 0
   18470:	6a e1       	ldi	r22, 0x1A	; 26
   18472:	70 e0       	ldi	r23, 0x00	; 0
   18474:	c8 01       	movw	r24, r16
   18476:	69 db       	rcall	.-2350   	; 0x17b4a <B2V_MSB>
   18478:	fe 01       	movw	r30, r28
   1847a:	e6 59       	subi	r30, 0x96	; 150
   1847c:	ff 4f       	sbci	r31, 0xFF	; 255
   1847e:	71 83       	std	Z+1, r23	; 0x01
   18480:	60 83       	st	Z, r22
   18482:	42 e0       	ldi	r20, 0x02	; 2
   18484:	50 e0       	ldi	r21, 0x00	; 0
   18486:	6c e1       	ldi	r22, 0x1C	; 28
   18488:	70 e0       	ldi	r23, 0x00	; 0
   1848a:	c8 01       	movw	r24, r16
   1848c:	7d db       	rcall	.-2310   	; 0x17b88 <B2V_LSB>
   1848e:	fe 01       	movw	r30, r28
   18490:	e4 59       	subi	r30, 0x94	; 148
   18492:	ff 4f       	sbci	r31, 0xFF	; 255
   18494:	71 83       	std	Z+1, r23	; 0x01
   18496:	60 83       	st	Z, r22
   18498:	42 e0       	ldi	r20, 0x02	; 2
   1849a:	50 e0       	ldi	r21, 0x00	; 0
   1849c:	6e e1       	ldi	r22, 0x1E	; 30
   1849e:	70 e0       	ldi	r23, 0x00	; 0
   184a0:	c8 01       	movw	r24, r16
   184a2:	72 db       	rcall	.-2332   	; 0x17b88 <B2V_LSB>
   184a4:	c2 59       	subi	r28, 0x92	; 146
   184a6:	df 4f       	sbci	r29, 0xFF	; 255
   184a8:	79 83       	std	Y+1, r23	; 0x01
   184aa:	68 83       	st	Y, r22
   184ac:	df 91       	pop	r29
   184ae:	cf 91       	pop	r28
   184b0:	1f 91       	pop	r17
   184b2:	0f 91       	pop	r16
   184b4:	08 95       	ret

000184b6 <lif_BIN2BCD>:
   184b6:	6a e0       	ldi	r22, 0x0A	; 10
   184b8:	0e 94 9e e2 	call	0x1c53c	; 0x1c53c <__udivmodqi4>
   184bc:	82 95       	swap	r24
   184be:	80 7f       	andi	r24, 0xF0	; 240
   184c0:	89 2b       	or	r24, r25
   184c2:	08 95       	ret

000184c4 <lif_BCD2BIN>:
   184c4:	28 2f       	mov	r18, r24
   184c6:	22 95       	swap	r18
   184c8:	2f 70       	andi	r18, 0x0F	; 15
   184ca:	8f 70       	andi	r24, 0x0F	; 15
   184cc:	90 e0       	ldi	r25, 0x00	; 0
   184ce:	3a e0       	ldi	r19, 0x0A	; 10
   184d0:	23 9f       	mul	r18, r19
   184d2:	80 0d       	add	r24, r0
   184d4:	91 1d       	adc	r25, r1
   184d6:	11 24       	eor	r1, r1
   184d8:	08 95       	ret

000184da <lif_time2lifbcd>:
   184da:	aa e1       	ldi	r26, 0x1A	; 26
   184dc:	b0 e0       	ldi	r27, 0x00	; 0
   184de:	e3 e7       	ldi	r30, 0x73	; 115
   184e0:	f2 ec       	ldi	r31, 0xC2	; 194
   184e2:	0c 94 4c e3 	jmp	0x1c698	; 0x1c698 <__prologue_saves__+0x1c>
   184e6:	8b 01       	movw	r16, r22
   184e8:	9c 01       	movw	r18, r24
   184ea:	6f 8b       	std	Y+23, r22	; 0x17
   184ec:	78 8f       	std	Y+24, r23	; 0x18
   184ee:	89 8f       	std	Y+25, r24	; 0x19
   184f0:	9a 8f       	std	Y+26, r25	; 0x1a
   184f2:	67 2b       	or	r22, r23
   184f4:	68 2b       	or	r22, r24
   184f6:	69 2b       	or	r22, r25
   184f8:	41 f4       	brne	.+16     	; 0x1850a <lif_time2lifbcd+0x30>
   184fa:	fa 01       	movw	r30, r20
   184fc:	ca 01       	movw	r24, r20
   184fe:	06 96       	adiw	r24, 0x06	; 6
   18500:	11 92       	st	Z+, r1
   18502:	e8 17       	cp	r30, r24
   18504:	f9 07       	cpc	r31, r25
   18506:	e1 f7       	brne	.-8      	; 0x18500 <lif_time2lifbcd+0x26>
   18508:	26 c0       	rjmp	.+76     	; 0x18556 <lif_time2lifbcd+0x7c>
   1850a:	8a 01       	movw	r16, r20
   1850c:	be 01       	movw	r22, r28
   1850e:	6f 5f       	subi	r22, 0xFF	; 255
   18510:	7f 4f       	sbci	r23, 0xFF	; 255
   18512:	ce 01       	movw	r24, r28
   18514:	47 96       	adiw	r24, 0x17	; 23
   18516:	0e 94 96 35 	call	0x6b2c	; 0x6b2c <gmtime_r>
   1851a:	8b 85       	ldd	r24, Y+11	; 0x0b
   1851c:	9c 85       	ldd	r25, Y+12	; 0x0c
   1851e:	64 e6       	ldi	r22, 0x64	; 100
   18520:	70 e0       	ldi	r23, 0x00	; 0
   18522:	0e 94 be e2 	call	0x1c57c	; 0x1c57c <__divmodhi4>
   18526:	c7 df       	rcall	.-114    	; 0x184b6 <lif_BIN2BCD>
   18528:	f8 01       	movw	r30, r16
   1852a:	80 83       	st	Z, r24
   1852c:	89 85       	ldd	r24, Y+9	; 0x09
   1852e:	8f 5f       	subi	r24, 0xFF	; 255
   18530:	c2 df       	rcall	.-124    	; 0x184b6 <lif_BIN2BCD>
   18532:	f8 01       	movw	r30, r16
   18534:	81 83       	std	Z+1, r24	; 0x01
   18536:	8f 81       	ldd	r24, Y+7	; 0x07
   18538:	be df       	rcall	.-132    	; 0x184b6 <lif_BIN2BCD>
   1853a:	f8 01       	movw	r30, r16
   1853c:	82 83       	std	Z+2, r24	; 0x02
   1853e:	8d 81       	ldd	r24, Y+5	; 0x05
   18540:	ba df       	rcall	.-140    	; 0x184b6 <lif_BIN2BCD>
   18542:	f8 01       	movw	r30, r16
   18544:	83 83       	std	Z+3, r24	; 0x03
   18546:	8b 81       	ldd	r24, Y+3	; 0x03
   18548:	b6 df       	rcall	.-148    	; 0x184b6 <lif_BIN2BCD>
   1854a:	f8 01       	movw	r30, r16
   1854c:	84 83       	std	Z+4, r24	; 0x04
   1854e:	89 81       	ldd	r24, Y+1	; 0x01
   18550:	b2 df       	rcall	.-156    	; 0x184b6 <lif_BIN2BCD>
   18552:	f8 01       	movw	r30, r16
   18554:	85 83       	std	Z+5, r24	; 0x05
   18556:	6a 96       	adiw	r28, 0x1a	; 26
   18558:	e4 e0       	ldi	r30, 0x04	; 4
   1855a:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

0001855e <lif_lifbcd2time>:
   1855e:	a6 e1       	ldi	r26, 0x16	; 22
   18560:	b0 e0       	ldi	r27, 0x00	; 0
   18562:	e5 eb       	ldi	r30, 0xB5	; 181
   18564:	f2 ec       	ldi	r31, 0xC2	; 194
   18566:	0c 94 46 e3 	jmp	0x1c68c	; 0x1c68c <__prologue_saves__+0x10>
   1856a:	8c 01       	movw	r16, r24
   1856c:	7c 01       	movw	r14, r24
   1856e:	5c 01       	movw	r10, r24
   18570:	26 e0       	ldi	r18, 0x06	; 6
   18572:	a2 0e       	add	r10, r18
   18574:	b1 1c       	adc	r11, r1
   18576:	cc 24       	eor	r12, r12
   18578:	c3 94       	inc	r12
   1857a:	d1 2c       	mov	r13, r1
   1857c:	f7 01       	movw	r30, r14
   1857e:	81 91       	ld	r24, Z+
   18580:	7f 01       	movw	r14, r30
   18582:	a0 df       	rcall	.-192    	; 0x184c4 <lif_BCD2BIN>
   18584:	89 2b       	or	r24, r25
   18586:	11 f0       	breq	.+4      	; 0x1858c <lif_lifbcd2time+0x2e>
   18588:	c1 2c       	mov	r12, r1
   1858a:	d1 2c       	mov	r13, r1
   1858c:	ea 14       	cp	r14, r10
   1858e:	fb 04       	cpc	r15, r11
   18590:	a9 f7       	brne	.-22     	; 0x1857c <lif_lifbcd2time+0x1e>
   18592:	c1 14       	cp	r12, r1
   18594:	d1 04       	cpc	r13, r1
   18596:	61 f5       	brne	.+88     	; 0x185f0 <lif_lifbcd2time+0x92>
   18598:	f8 01       	movw	r30, r16
   1859a:	80 81       	ld	r24, Z
   1859c:	93 df       	rcall	.-218    	; 0x184c4 <lif_BCD2BIN>
   1859e:	7c 01       	movw	r14, r24
   185a0:	f8 01       	movw	r30, r16
   185a2:	81 81       	ldd	r24, Z+1	; 0x01
   185a4:	8f df       	rcall	.-226    	; 0x184c4 <lif_BCD2BIN>
   185a6:	01 97       	sbiw	r24, 0x01	; 1
   185a8:	f6 e4       	ldi	r31, 0x46	; 70
   185aa:	ef 16       	cp	r14, r31
   185ac:	f1 04       	cpc	r15, r1
   185ae:	1c f4       	brge	.+6      	; 0x185b6 <lif_lifbcd2time+0x58>
   185b0:	24 e6       	ldi	r18, 0x64	; 100
   185b2:	e2 0e       	add	r14, r18
   185b4:	f1 1c       	adc	r15, r1
   185b6:	fc 86       	std	Y+12, r15	; 0x0c
   185b8:	eb 86       	std	Y+11, r14	; 0x0b
   185ba:	9a 87       	std	Y+10, r25	; 0x0a
   185bc:	89 87       	std	Y+9, r24	; 0x09
   185be:	f8 01       	movw	r30, r16
   185c0:	82 81       	ldd	r24, Z+2	; 0x02
   185c2:	80 df       	rcall	.-256    	; 0x184c4 <lif_BCD2BIN>
   185c4:	98 87       	std	Y+8, r25	; 0x08
   185c6:	8f 83       	std	Y+7, r24	; 0x07
   185c8:	f8 01       	movw	r30, r16
   185ca:	83 81       	ldd	r24, Z+3	; 0x03
   185cc:	7b df       	rcall	.-266    	; 0x184c4 <lif_BCD2BIN>
   185ce:	9e 83       	std	Y+6, r25	; 0x06
   185d0:	8d 83       	std	Y+5, r24	; 0x05
   185d2:	f8 01       	movw	r30, r16
   185d4:	84 81       	ldd	r24, Z+4	; 0x04
   185d6:	76 df       	rcall	.-276    	; 0x184c4 <lif_BCD2BIN>
   185d8:	9c 83       	std	Y+4, r25	; 0x04
   185da:	8b 83       	std	Y+3, r24	; 0x03
   185dc:	f8 01       	movw	r30, r16
   185de:	85 81       	ldd	r24, Z+5	; 0x05
   185e0:	71 df       	rcall	.-286    	; 0x184c4 <lif_BCD2BIN>
   185e2:	9a 83       	std	Y+2, r25	; 0x02
   185e4:	89 83       	std	Y+1, r24	; 0x01
   185e6:	ce 01       	movw	r24, r28
   185e8:	01 96       	adiw	r24, 0x01	; 1
   185ea:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <timegm>
   185ee:	03 c0       	rjmp	.+6      	; 0x185f6 <lif_lifbcd2time+0x98>
   185f0:	60 e0       	ldi	r22, 0x00	; 0
   185f2:	70 e0       	ldi	r23, 0x00	; 0
   185f4:	cb 01       	movw	r24, r22
   185f6:	66 96       	adiw	r28, 0x16	; 22
   185f8:	ea e0       	ldi	r30, 0x0A	; 10
   185fa:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__epilogue_restores__+0x10>

000185fe <lif_ctime_gmt>:
   185fe:	a6 e1       	ldi	r26, 0x16	; 22
   18600:	b0 e0       	ldi	r27, 0x00	; 0
   18602:	e5 e0       	ldi	r30, 0x05	; 5
   18604:	f3 ec       	ldi	r31, 0xC3	; 195
   18606:	0c 94 4c e3 	jmp	0x1c698	; 0x1c698 <__prologue_saves__+0x1c>
   1860a:	20 e2       	ldi	r18, 0x20	; 32
   1860c:	e7 ec       	ldi	r30, 0xC7	; 199
   1860e:	f9 e1       	ldi	r31, 0x19	; 25
   18610:	df 01       	movw	r26, r30
   18612:	1d 92       	st	X+, r1
   18614:	2a 95       	dec	r18
   18616:	e9 f7       	brne	.-6      	; 0x18612 <lif_ctime_gmt+0x14>
   18618:	be 01       	movw	r22, r28
   1861a:	6f 5f       	subi	r22, 0xFF	; 255
   1861c:	7f 4f       	sbci	r23, 0xFF	; 255
   1861e:	0e 94 96 35 	call	0x6b2c	; 0x6b2c <gmtime_r>
   18622:	67 ec       	ldi	r22, 0xC7	; 199
   18624:	79 e1       	ldi	r23, 0x19	; 25
   18626:	0e 94 c6 3a 	call	0x758c	; 0x758c <asctime_r>
   1862a:	8c 01       	movw	r16, r24
   1862c:	0e 94 22 30 	call	0x6044	; 0x6044 <trim_tail>
   18630:	c8 01       	movw	r24, r16
   18632:	66 96       	adiw	r28, 0x16	; 22
   18634:	e4 e0       	ldi	r30, 0x04	; 4
   18636:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

0001863a <lif_lifbcd2timestr>:
   1863a:	a4 e0       	ldi	r26, 0x04	; 4
   1863c:	b0 e0       	ldi	r27, 0x00	; 0
   1863e:	e3 e2       	ldi	r30, 0x23	; 35
   18640:	f3 ec       	ldi	r31, 0xC3	; 195
   18642:	0c 94 4e e3 	jmp	0x1c69c	; 0x1c69c <__prologue_saves__+0x20>
   18646:	20 e2       	ldi	r18, 0x20	; 32
   18648:	e7 ea       	ldi	r30, 0xA7	; 167
   1864a:	f9 e1       	ldi	r31, 0x19	; 25
   1864c:	df 01       	movw	r26, r30
   1864e:	1d 92       	st	X+, r1
   18650:	2a 95       	dec	r18
   18652:	e9 f7       	brne	.-6      	; 0x1864e <lif_lifbcd2timestr+0x14>
   18654:	84 df       	rcall	.-248    	; 0x1855e <lif_lifbcd2time>
   18656:	69 83       	std	Y+1, r22	; 0x01
   18658:	7a 83       	std	Y+2, r23	; 0x02
   1865a:	8b 83       	std	Y+3, r24	; 0x03
   1865c:	9c 83       	std	Y+4, r25	; 0x04
   1865e:	67 2b       	or	r22, r23
   18660:	68 2b       	or	r22, r24
   18662:	69 2b       	or	r22, r25
   18664:	29 f0       	breq	.+10     	; 0x18670 <lif_lifbcd2timestr+0x36>
   18666:	ce 01       	movw	r24, r28
   18668:	01 96       	adiw	r24, 0x01	; 1
   1866a:	c9 df       	rcall	.-110    	; 0x185fe <lif_ctime_gmt>
   1866c:	bc 01       	movw	r22, r24
   1866e:	02 c0       	rjmp	.+4      	; 0x18674 <lif_lifbcd2timestr+0x3a>
   18670:	64 ef       	ldi	r22, 0xF4	; 244
   18672:	75 e1       	ldi	r23, 0x15	; 21
   18674:	87 ea       	ldi	r24, 0xA7	; 167
   18676:	99 e1       	ldi	r25, 0x19	; 25
   18678:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <strcpy>
   1867c:	87 ea       	ldi	r24, 0xA7	; 167
   1867e:	99 e1       	ldi	r25, 0x19	; 25
   18680:	24 96       	adiw	r28, 0x04	; 4
   18682:	e2 e0       	ldi	r30, 0x02	; 2
   18684:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00018688 <lif_image_clear>:
   18688:	20 e7       	ldi	r18, 0x70	; 112
   1868a:	fc 01       	movw	r30, r24
   1868c:	11 92       	st	Z+, r1
   1868e:	2a 95       	dec	r18
   18690:	e9 f7       	brne	.-6      	; 0x1868c <lif_image_clear+0x4>
   18692:	08 95       	ret

00018694 <lif_dir_clear>:
   18694:	81 5b       	subi	r24, 0xB1	; 177
   18696:	9f 4f       	sbci	r25, 0xFF	; 255
   18698:	21 e2       	ldi	r18, 0x21	; 33
   1869a:	fc 01       	movw	r30, r24
   1869c:	11 92       	st	Z+, r1
   1869e:	2a 95       	dec	r18
   186a0:	e9 f7       	brne	.-6      	; 0x1869c <lif_dir_clear+0x8>
   186a2:	08 95       	ret

000186a4 <lif_vol_clear>:
   186a4:	84 96       	adiw	r24, 0x24	; 36
   186a6:	2b e2       	ldi	r18, 0x2B	; 43
   186a8:	fc 01       	movw	r30, r24
   186aa:	11 92       	st	Z+, r1
   186ac:	2a 95       	dec	r18
   186ae:	e9 f7       	brne	.-6      	; 0x186aa <lif_vol_clear+0x6>
   186b0:	08 95       	ret

000186b2 <lif_dump_vol>:
   186b2:	cf 93       	push	r28
   186b4:	df 93       	push	r29
   186b6:	ad b7       	in	r26, 0x3d	; 61
   186b8:	be b7       	in	r27, 0x3e	; 62
   186ba:	17 97       	sbiw	r26, 0x07	; 7
   186bc:	0f b6       	in	r0, 0x3f	; 63
   186be:	f8 94       	cli
   186c0:	be bf       	out	0x3e, r27	; 62
   186c2:	0f be       	out	0x3f, r0	; 63
   186c4:	ad bf       	out	0x3d, r26	; 61
   186c6:	ec 01       	movw	r28, r24
   186c8:	ed b7       	in	r30, 0x3d	; 61
   186ca:	fe b7       	in	r31, 0x3e	; 62
   186cc:	75 83       	std	Z+5, r23	; 0x05
   186ce:	64 83       	std	Z+4, r22	; 0x04
   186d0:	83 e1       	ldi	r24, 0x13	; 19
   186d2:	90 e4       	ldi	r25, 0x40	; 64
   186d4:	a0 e0       	ldi	r26, 0x00	; 0
   186d6:	81 83       	std	Z+1, r24	; 0x01
   186d8:	92 83       	std	Z+2, r25	; 0x02
   186da:	a3 83       	std	Z+3, r26	; 0x03
   186dc:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   186e0:	88 81       	ld	r24, Y
   186e2:	99 81       	ldd	r25, Y+1	; 0x01
   186e4:	ed b7       	in	r30, 0x3d	; 61
   186e6:	fe b7       	in	r31, 0x3e	; 62
   186e8:	95 83       	std	Z+5, r25	; 0x05
   186ea:	84 83       	std	Z+4, r24	; 0x04
   186ec:	89 ef       	ldi	r24, 0xF9	; 249
   186ee:	9f e3       	ldi	r25, 0x3F	; 63
   186f0:	a0 e0       	ldi	r26, 0x00	; 0
   186f2:	81 83       	std	Z+1, r24	; 0x01
   186f4:	92 83       	std	Z+2, r25	; 0x02
   186f6:	a3 83       	std	Z+3, r26	; 0x03
   186f8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   186fc:	8c 81       	ldd	r24, Y+4	; 0x04
   186fe:	9d 81       	ldd	r25, Y+5	; 0x05
   18700:	ae 81       	ldd	r26, Y+6	; 0x06
   18702:	bf 81       	ldd	r27, Y+7	; 0x07
   18704:	ed b7       	in	r30, 0x3d	; 61
   18706:	fe b7       	in	r31, 0x3e	; 62
   18708:	84 83       	std	Z+4, r24	; 0x04
   1870a:	95 83       	std	Z+5, r25	; 0x05
   1870c:	a6 83       	std	Z+6, r26	; 0x06
   1870e:	b7 83       	std	Z+7, r27	; 0x07
   18710:	8c ed       	ldi	r24, 0xDC	; 220
   18712:	9f e3       	ldi	r25, 0x3F	; 63
   18714:	a0 e0       	ldi	r26, 0x00	; 0
   18716:	81 83       	std	Z+1, r24	; 0x01
   18718:	92 83       	std	Z+2, r25	; 0x02
   1871a:	a3 83       	std	Z+3, r26	; 0x03
   1871c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18720:	88 85       	ldd	r24, Y+8	; 0x08
   18722:	99 85       	ldd	r25, Y+9	; 0x09
   18724:	aa 85       	ldd	r26, Y+10	; 0x0a
   18726:	bb 85       	ldd	r27, Y+11	; 0x0b
   18728:	ed b7       	in	r30, 0x3d	; 61
   1872a:	fe b7       	in	r31, 0x3e	; 62
   1872c:	84 83       	std	Z+4, r24	; 0x04
   1872e:	95 83       	std	Z+5, r25	; 0x05
   18730:	a6 83       	std	Z+6, r26	; 0x06
   18732:	b7 83       	std	Z+7, r27	; 0x07
   18734:	8f eb       	ldi	r24, 0xBF	; 191
   18736:	9f e3       	ldi	r25, 0x3F	; 63
   18738:	a0 e0       	ldi	r26, 0x00	; 0
   1873a:	81 83       	std	Z+1, r24	; 0x01
   1873c:	92 83       	std	Z+2, r25	; 0x02
   1873e:	a3 83       	std	Z+3, r26	; 0x03
   18740:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18744:	8c 85       	ldd	r24, Y+12	; 0x0c
   18746:	9d 85       	ldd	r25, Y+13	; 0x0d
   18748:	ae 85       	ldd	r26, Y+14	; 0x0e
   1874a:	bf 85       	ldd	r27, Y+15	; 0x0f
   1874c:	ed b7       	in	r30, 0x3d	; 61
   1874e:	fe b7       	in	r31, 0x3e	; 62
   18750:	84 83       	std	Z+4, r24	; 0x04
   18752:	95 83       	std	Z+5, r25	; 0x05
   18754:	a6 83       	std	Z+6, r26	; 0x06
   18756:	b7 83       	std	Z+7, r27	; 0x07
   18758:	82 ea       	ldi	r24, 0xA2	; 162
   1875a:	9f e3       	ldi	r25, 0x3F	; 63
   1875c:	a0 e0       	ldi	r26, 0x00	; 0
   1875e:	81 83       	std	Z+1, r24	; 0x01
   18760:	92 83       	std	Z+2, r25	; 0x02
   18762:	a3 83       	std	Z+3, r26	; 0x03
   18764:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18768:	88 89       	ldd	r24, Y+16	; 0x10
   1876a:	99 89       	ldd	r25, Y+17	; 0x11
   1876c:	aa 89       	ldd	r26, Y+18	; 0x12
   1876e:	bb 89       	ldd	r27, Y+19	; 0x13
   18770:	ed b7       	in	r30, 0x3d	; 61
   18772:	fe b7       	in	r31, 0x3e	; 62
   18774:	84 83       	std	Z+4, r24	; 0x04
   18776:	95 83       	std	Z+5, r25	; 0x05
   18778:	a6 83       	std	Z+6, r26	; 0x06
   1877a:	b7 83       	std	Z+7, r27	; 0x07
   1877c:	85 e8       	ldi	r24, 0x85	; 133
   1877e:	9f e3       	ldi	r25, 0x3F	; 63
   18780:	a0 e0       	ldi	r26, 0x00	; 0
   18782:	81 83       	std	Z+1, r24	; 0x01
   18784:	92 83       	std	Z+2, r25	; 0x02
   18786:	a3 83       	std	Z+3, r26	; 0x03
   18788:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1878c:	8c 89       	ldd	r24, Y+20	; 0x14
   1878e:	9d 89       	ldd	r25, Y+21	; 0x15
   18790:	ae 89       	ldd	r26, Y+22	; 0x16
   18792:	bf 89       	ldd	r27, Y+23	; 0x17
   18794:	ed b7       	in	r30, 0x3d	; 61
   18796:	fe b7       	in	r31, 0x3e	; 62
   18798:	84 83       	std	Z+4, r24	; 0x04
   1879a:	95 83       	std	Z+5, r25	; 0x05
   1879c:	a6 83       	std	Z+6, r26	; 0x06
   1879e:	b7 83       	std	Z+7, r27	; 0x07
   187a0:	88 e6       	ldi	r24, 0x68	; 104
   187a2:	9f e3       	ldi	r25, 0x3F	; 63
   187a4:	a0 e0       	ldi	r26, 0x00	; 0
   187a6:	81 83       	std	Z+1, r24	; 0x01
   187a8:	92 83       	std	Z+2, r25	; 0x02
   187aa:	a3 83       	std	Z+3, r26	; 0x03
   187ac:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   187b0:	88 8d       	ldd	r24, Y+24	; 0x18
   187b2:	99 8d       	ldd	r25, Y+25	; 0x19
   187b4:	aa 8d       	ldd	r26, Y+26	; 0x1a
   187b6:	bb 8d       	ldd	r27, Y+27	; 0x1b
   187b8:	ed b7       	in	r30, 0x3d	; 61
   187ba:	fe b7       	in	r31, 0x3e	; 62
   187bc:	84 83       	std	Z+4, r24	; 0x04
   187be:	95 83       	std	Z+5, r25	; 0x05
   187c0:	a6 83       	std	Z+6, r26	; 0x06
   187c2:	b7 83       	std	Z+7, r27	; 0x07
   187c4:	8b e4       	ldi	r24, 0x4B	; 75
   187c6:	9f e3       	ldi	r25, 0x3F	; 63
   187c8:	a0 e0       	ldi	r26, 0x00	; 0
   187ca:	81 83       	std	Z+1, r24	; 0x01
   187cc:	92 83       	std	Z+2, r25	; 0x02
   187ce:	a3 83       	std	Z+3, r26	; 0x03
   187d0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   187d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
   187d6:	9d 8d       	ldd	r25, Y+29	; 0x1d
   187d8:	09 2e       	mov	r0, r25
   187da:	00 0c       	add	r0, r0
   187dc:	aa 0b       	sbc	r26, r26
   187de:	bb 0b       	sbc	r27, r27
   187e0:	ed b7       	in	r30, 0x3d	; 61
   187e2:	fe b7       	in	r31, 0x3e	; 62
   187e4:	84 83       	std	Z+4, r24	; 0x04
   187e6:	95 83       	std	Z+5, r25	; 0x05
   187e8:	a6 83       	std	Z+6, r26	; 0x06
   187ea:	b7 83       	std	Z+7, r27	; 0x07
   187ec:	8e e2       	ldi	r24, 0x2E	; 46
   187ee:	9f e3       	ldi	r25, 0x3F	; 63
   187f0:	a0 e0       	ldi	r26, 0x00	; 0
   187f2:	81 83       	std	Z+1, r24	; 0x01
   187f4:	92 83       	std	Z+2, r25	; 0x02
   187f6:	a3 83       	std	Z+3, r26	; 0x03
   187f8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   187fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
   187fe:	9f 8d       	ldd	r25, Y+31	; 0x1f
   18800:	09 2e       	mov	r0, r25
   18802:	00 0c       	add	r0, r0
   18804:	aa 0b       	sbc	r26, r26
   18806:	bb 0b       	sbc	r27, r27
   18808:	ed b7       	in	r30, 0x3d	; 61
   1880a:	fe b7       	in	r31, 0x3e	; 62
   1880c:	84 83       	std	Z+4, r24	; 0x04
   1880e:	95 83       	std	Z+5, r25	; 0x05
   18810:	a6 83       	std	Z+6, r26	; 0x06
   18812:	b7 83       	std	Z+7, r27	; 0x07
   18814:	81 e1       	ldi	r24, 0x11	; 17
   18816:	9f e3       	ldi	r25, 0x3F	; 63
   18818:	a0 e0       	ldi	r26, 0x00	; 0
   1881a:	81 83       	std	Z+1, r24	; 0x01
   1881c:	92 83       	std	Z+2, r25	; 0x02
   1881e:	a3 83       	std	Z+3, r26	; 0x03
   18820:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18824:	ce 01       	movw	r24, r28
   18826:	86 96       	adiw	r24, 0x26	; 38
   18828:	ed b7       	in	r30, 0x3d	; 61
   1882a:	fe b7       	in	r31, 0x3e	; 62
   1882c:	95 83       	std	Z+5, r25	; 0x05
   1882e:	84 83       	std	Z+4, r24	; 0x04
   18830:	87 ef       	ldi	r24, 0xF7	; 247
   18832:	9e e3       	ldi	r25, 0x3E	; 62
   18834:	a0 e0       	ldi	r26, 0x00	; 0
   18836:	81 83       	std	Z+1, r24	; 0x01
   18838:	92 83       	std	Z+2, r25	; 0x02
   1883a:	a3 83       	std	Z+3, r26	; 0x03
   1883c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18840:	8c a1       	ldd	r24, Y+36	; 0x24
   18842:	9d a1       	ldd	r25, Y+37	; 0x25
   18844:	ed b7       	in	r30, 0x3d	; 61
   18846:	fe b7       	in	r31, 0x3e	; 62
   18848:	95 83       	std	Z+5, r25	; 0x05
   1884a:	84 83       	std	Z+4, r24	; 0x04
   1884c:	8b ed       	ldi	r24, 0xDB	; 219
   1884e:	9e e3       	ldi	r25, 0x3E	; 62
   18850:	a0 e0       	ldi	r26, 0x00	; 0
   18852:	81 83       	std	Z+1, r24	; 0x01
   18854:	92 83       	std	Z+2, r25	; 0x02
   18856:	a3 83       	std	Z+3, r26	; 0x03
   18858:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1885c:	8d a5       	ldd	r24, Y+45	; 0x2d
   1885e:	9e a5       	ldd	r25, Y+46	; 0x2e
   18860:	af a5       	ldd	r26, Y+47	; 0x2f
   18862:	b8 a9       	ldd	r27, Y+48	; 0x30
   18864:	ed b7       	in	r30, 0x3d	; 61
   18866:	fe b7       	in	r31, 0x3e	; 62
   18868:	84 83       	std	Z+4, r24	; 0x04
   1886a:	95 83       	std	Z+5, r25	; 0x05
   1886c:	a6 83       	std	Z+6, r26	; 0x06
   1886e:	b7 83       	std	Z+7, r27	; 0x07
   18870:	8e eb       	ldi	r24, 0xBE	; 190
   18872:	9e e3       	ldi	r25, 0x3E	; 62
   18874:	a0 e0       	ldi	r26, 0x00	; 0
   18876:	81 83       	std	Z+1, r24	; 0x01
   18878:	92 83       	std	Z+2, r25	; 0x02
   1887a:	a3 83       	std	Z+3, r26	; 0x03
   1887c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18880:	8d a9       	ldd	r24, Y+53	; 0x35
   18882:	9e a9       	ldd	r25, Y+54	; 0x36
   18884:	af a9       	ldd	r26, Y+55	; 0x37
   18886:	b8 ad       	ldd	r27, Y+56	; 0x38
   18888:	ed b7       	in	r30, 0x3d	; 61
   1888a:	fe b7       	in	r31, 0x3e	; 62
   1888c:	84 83       	std	Z+4, r24	; 0x04
   1888e:	95 83       	std	Z+5, r25	; 0x05
   18890:	a6 83       	std	Z+6, r26	; 0x06
   18892:	b7 83       	std	Z+7, r27	; 0x07
   18894:	81 ea       	ldi	r24, 0xA1	; 161
   18896:	9e e3       	ldi	r25, 0x3E	; 62
   18898:	a0 e0       	ldi	r26, 0x00	; 0
   1889a:	81 83       	std	Z+1, r24	; 0x01
   1889c:	92 83       	std	Z+2, r25	; 0x02
   1889e:	a3 83       	std	Z+3, r26	; 0x03
   188a0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   188a4:	89 a9       	ldd	r24, Y+49	; 0x31
   188a6:	9a a9       	ldd	r25, Y+50	; 0x32
   188a8:	ed b7       	in	r30, 0x3d	; 61
   188aa:	fe b7       	in	r31, 0x3e	; 62
   188ac:	95 83       	std	Z+5, r25	; 0x05
   188ae:	84 83       	std	Z+4, r24	; 0x04
   188b0:	85 e8       	ldi	r24, 0x85	; 133
   188b2:	9e e3       	ldi	r25, 0x3E	; 62
   188b4:	a0 e0       	ldi	r26, 0x00	; 0
   188b6:	81 83       	std	Z+1, r24	; 0x01
   188b8:	92 83       	std	Z+2, r25	; 0x02
   188ba:	a3 83       	std	Z+3, r26	; 0x03
   188bc:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   188c0:	89 ad       	ldd	r24, Y+57	; 0x39
   188c2:	9a ad       	ldd	r25, Y+58	; 0x3a
   188c4:	ed b7       	in	r30, 0x3d	; 61
   188c6:	fe b7       	in	r31, 0x3e	; 62
   188c8:	95 83       	std	Z+5, r25	; 0x05
   188ca:	84 83       	std	Z+4, r24	; 0x04
   188cc:	89 e6       	ldi	r24, 0x69	; 105
   188ce:	9e e3       	ldi	r25, 0x3E	; 62
   188d0:	a0 e0       	ldi	r26, 0x00	; 0
   188d2:	81 83       	std	Z+1, r24	; 0x01
   188d4:	92 83       	std	Z+2, r25	; 0x02
   188d6:	a3 83       	std	Z+3, r26	; 0x03
   188d8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   188dc:	ce 01       	movw	r24, r28
   188de:	87 5b       	subi	r24, 0xB7	; 183
   188e0:	9f 4f       	sbci	r25, 0xFF	; 255
   188e2:	ab de       	rcall	.-682    	; 0x1863a <lif_lifbcd2timestr>
   188e4:	ed b7       	in	r30, 0x3d	; 61
   188e6:	fe b7       	in	r31, 0x3e	; 62
   188e8:	95 83       	std	Z+5, r25	; 0x05
   188ea:	84 83       	std	Z+4, r24	; 0x04
   188ec:	8f e4       	ldi	r24, 0x4F	; 79
   188ee:	9e e3       	ldi	r25, 0x3E	; 62
   188f0:	a0 e0       	ldi	r26, 0x00	; 0
   188f2:	81 83       	std	Z+1, r24	; 0x01
   188f4:	92 83       	std	Z+2, r25	; 0x02
   188f6:	a3 83       	std	Z+3, r26	; 0x03
   188f8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   188fc:	ce 01       	movw	r24, r28
   188fe:	81 5b       	subi	r24, 0xB1	; 177
   18900:	9f 4f       	sbci	r25, 0xFF	; 255
   18902:	ed b7       	in	r30, 0x3d	; 61
   18904:	fe b7       	in	r31, 0x3e	; 62
   18906:	95 83       	std	Z+5, r25	; 0x05
   18908:	84 83       	std	Z+4, r24	; 0x04
   1890a:	85 e3       	ldi	r24, 0x35	; 53
   1890c:	9e e3       	ldi	r25, 0x3E	; 62
   1890e:	a0 e0       	ldi	r26, 0x00	; 0
   18910:	81 83       	std	Z+1, r24	; 0x01
   18912:	92 83       	std	Z+2, r25	; 0x02
   18914:	a3 83       	std	Z+3, r26	; 0x03
   18916:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1891a:	fe 01       	movw	r30, r28
   1891c:	e6 5a       	subi	r30, 0xA6	; 166
   1891e:	ff 4f       	sbci	r31, 0xFF	; 255
   18920:	80 81       	ld	r24, Z
   18922:	91 81       	ldd	r25, Z+1	; 0x01
   18924:	ed b7       	in	r30, 0x3d	; 61
   18926:	fe b7       	in	r31, 0x3e	; 62
   18928:	95 83       	std	Z+5, r25	; 0x05
   1892a:	84 83       	std	Z+4, r24	; 0x04
   1892c:	89 e1       	ldi	r24, 0x19	; 25
   1892e:	9e e3       	ldi	r25, 0x3E	; 62
   18930:	a0 e0       	ldi	r26, 0x00	; 0
   18932:	81 83       	std	Z+1, r24	; 0x01
   18934:	92 83       	std	Z+2, r25	; 0x02
   18936:	a3 83       	std	Z+3, r26	; 0x03
   18938:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1893c:	fe 01       	movw	r30, r28
   1893e:	e6 59       	subi	r30, 0x96	; 150
   18940:	ff 4f       	sbci	r31, 0xFF	; 255
   18942:	80 81       	ld	r24, Z
   18944:	91 81       	ldd	r25, Z+1	; 0x01
   18946:	ed b7       	in	r30, 0x3d	; 61
   18948:	fe b7       	in	r31, 0x3e	; 62
   1894a:	95 83       	std	Z+5, r25	; 0x05
   1894c:	84 83       	std	Z+4, r24	; 0x04
   1894e:	8d ef       	ldi	r24, 0xFD	; 253
   18950:	9d e3       	ldi	r25, 0x3D	; 61
   18952:	a0 e0       	ldi	r26, 0x00	; 0
   18954:	81 83       	std	Z+1, r24	; 0x01
   18956:	92 83       	std	Z+2, r25	; 0x02
   18958:	a3 83       	std	Z+3, r26	; 0x03
   1895a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1895e:	fe 01       	movw	r30, r28
   18960:	e4 5a       	subi	r30, 0xA4	; 164
   18962:	ff 4f       	sbci	r31, 0xFF	; 255
   18964:	80 81       	ld	r24, Z
   18966:	91 81       	ldd	r25, Z+1	; 0x01
   18968:	a2 81       	ldd	r26, Z+2	; 0x02
   1896a:	b3 81       	ldd	r27, Z+3	; 0x03
   1896c:	ed b7       	in	r30, 0x3d	; 61
   1896e:	fe b7       	in	r31, 0x3e	; 62
   18970:	84 83       	std	Z+4, r24	; 0x04
   18972:	95 83       	std	Z+5, r25	; 0x05
   18974:	a6 83       	std	Z+6, r26	; 0x06
   18976:	b7 83       	std	Z+7, r27	; 0x07
   18978:	80 ee       	ldi	r24, 0xE0	; 224
   1897a:	9d e3       	ldi	r25, 0x3D	; 61
   1897c:	a0 e0       	ldi	r26, 0x00	; 0
   1897e:	81 83       	std	Z+1, r24	; 0x01
   18980:	92 83       	std	Z+2, r25	; 0x02
   18982:	a3 83       	std	Z+3, r26	; 0x03
   18984:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18988:	fe 01       	movw	r30, r28
   1898a:	e0 5a       	subi	r30, 0xA0	; 160
   1898c:	ff 4f       	sbci	r31, 0xFF	; 255
   1898e:	80 81       	ld	r24, Z
   18990:	91 81       	ldd	r25, Z+1	; 0x01
   18992:	a2 81       	ldd	r26, Z+2	; 0x02
   18994:	b3 81       	ldd	r27, Z+3	; 0x03
   18996:	ed b7       	in	r30, 0x3d	; 61
   18998:	fe b7       	in	r31, 0x3e	; 62
   1899a:	84 83       	std	Z+4, r24	; 0x04
   1899c:	95 83       	std	Z+5, r25	; 0x05
   1899e:	a6 83       	std	Z+6, r26	; 0x06
   189a0:	b7 83       	std	Z+7, r27	; 0x07
   189a2:	83 ec       	ldi	r24, 0xC3	; 195
   189a4:	9d e3       	ldi	r25, 0x3D	; 61
   189a6:	a0 e0       	ldi	r26, 0x00	; 0
   189a8:	81 83       	std	Z+1, r24	; 0x01
   189aa:	92 83       	std	Z+2, r25	; 0x02
   189ac:	a3 83       	std	Z+3, r26	; 0x03
   189ae:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   189b2:	fe 01       	movw	r30, r28
   189b4:	e4 59       	subi	r30, 0x94	; 148
   189b6:	ff 4f       	sbci	r31, 0xFF	; 255
   189b8:	80 81       	ld	r24, Z
   189ba:	91 81       	ldd	r25, Z+1	; 0x01
   189bc:	a0 e0       	ldi	r26, 0x00	; 0
   189be:	b0 e0       	ldi	r27, 0x00	; 0
   189c0:	ed b7       	in	r30, 0x3d	; 61
   189c2:	fe b7       	in	r31, 0x3e	; 62
   189c4:	84 83       	std	Z+4, r24	; 0x04
   189c6:	95 83       	std	Z+5, r25	; 0x05
   189c8:	a6 83       	std	Z+6, r26	; 0x06
   189ca:	b7 83       	std	Z+7, r27	; 0x07
   189cc:	86 ea       	ldi	r24, 0xA6	; 166
   189ce:	9d e3       	ldi	r25, 0x3D	; 61
   189d0:	a0 e0       	ldi	r26, 0x00	; 0
   189d2:	81 83       	std	Z+1, r24	; 0x01
   189d4:	92 83       	std	Z+2, r25	; 0x02
   189d6:	a3 83       	std	Z+3, r26	; 0x03
   189d8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   189dc:	fe 01       	movw	r30, r28
   189de:	e2 59       	subi	r30, 0x92	; 146
   189e0:	ff 4f       	sbci	r31, 0xFF	; 255
   189e2:	80 81       	ld	r24, Z
   189e4:	91 81       	ldd	r25, Z+1	; 0x01
   189e6:	ed b7       	in	r30, 0x3d	; 61
   189e8:	fe b7       	in	r31, 0x3e	; 62
   189ea:	95 83       	std	Z+5, r25	; 0x05
   189ec:	84 83       	std	Z+4, r24	; 0x04
   189ee:	8a e8       	ldi	r24, 0x8A	; 138
   189f0:	9d e3       	ldi	r25, 0x3D	; 61
   189f2:	a0 e0       	ldi	r26, 0x00	; 0
   189f4:	81 83       	std	Z+1, r24	; 0x01
   189f6:	92 83       	std	Z+2, r25	; 0x02
   189f8:	a3 83       	std	Z+3, r26	; 0x03
   189fa:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   189fe:	ce 01       	movw	r24, r28
   18a00:	8c 59       	subi	r24, 0x9C	; 156
   18a02:	9f 4f       	sbci	r25, 0xFF	; 255
   18a04:	1a de       	rcall	.-972    	; 0x1863a <lif_lifbcd2timestr>
   18a06:	ed b7       	in	r30, 0x3d	; 61
   18a08:	fe b7       	in	r31, 0x3e	; 62
   18a0a:	95 83       	std	Z+5, r25	; 0x05
   18a0c:	84 83       	std	Z+4, r24	; 0x04
   18a0e:	80 e7       	ldi	r24, 0x70	; 112
   18a10:	9d e3       	ldi	r25, 0x3D	; 61
   18a12:	a0 e0       	ldi	r26, 0x00	; 0
   18a14:	81 83       	std	Z+1, r24	; 0x01
   18a16:	92 83       	std	Z+2, r25	; 0x02
   18a18:	a3 83       	std	Z+3, r26	; 0x03
   18a1a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18a1e:	8e e6       	ldi	r24, 0x6E	; 110
   18a20:	9d e3       	ldi	r25, 0x3D	; 61
   18a22:	a0 e0       	ldi	r26, 0x00	; 0
   18a24:	ed b7       	in	r30, 0x3d	; 61
   18a26:	fe b7       	in	r31, 0x3e	; 62
   18a28:	81 83       	std	Z+1, r24	; 0x01
   18a2a:	92 83       	std	Z+2, r25	; 0x02
   18a2c:	a3 83       	std	Z+3, r26	; 0x03
   18a2e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18a32:	cd b7       	in	r28, 0x3d	; 61
   18a34:	de b7       	in	r29, 0x3e	; 62
   18a36:	27 96       	adiw	r28, 0x07	; 7
   18a38:	e2 e0       	ldi	r30, 0x02	; 2
   18a3a:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__epilogue_restores__+0x20>

00018a3e <lif_check_volume>:
   18a3e:	0f 93       	push	r16
   18a40:	1f 93       	push	r17
   18a42:	cf 93       	push	r28
   18a44:	df 93       	push	r29
   18a46:	ad b7       	in	r26, 0x3d	; 61
   18a48:	be b7       	in	r27, 0x3e	; 62
   18a4a:	17 97       	sbiw	r26, 0x07	; 7
   18a4c:	0f b6       	in	r0, 0x3f	; 63
   18a4e:	f8 94       	cli
   18a50:	be bf       	out	0x3e, r27	; 62
   18a52:	0f be       	out	0x3f, r0	; 63
   18a54:	ad bf       	out	0x3d, r26	; 61
   18a56:	ec 01       	movw	r28, r24
   18a58:	86 96       	adiw	r24, 0x26	; 38
   18a5a:	e0 da       	rcall	.-2624   	; 0x1801c <lif_checkname>
   18a5c:	89 2b       	or	r24, r25
   18a5e:	89 f4       	brne	.+34     	; 0x18a82 <lif_check_volume+0x44>
   18a60:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18a64:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18a68:	92 ff       	sbrs	r25, 2
   18a6a:	0e c0       	rjmp	.+28     	; 0x18a88 <lif_check_volume+0x4a>
   18a6c:	8f e4       	ldi	r24, 0x4F	; 79
   18a6e:	9d e3       	ldi	r25, 0x3D	; 61
   18a70:	a0 e0       	ldi	r26, 0x00	; 0
   18a72:	ed b7       	in	r30, 0x3d	; 61
   18a74:	fe b7       	in	r31, 0x3e	; 62
   18a76:	81 83       	std	Z+1, r24	; 0x01
   18a78:	92 83       	std	Z+2, r25	; 0x02
   18a7a:	a3 83       	std	Z+3, r26	; 0x03
   18a7c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18a80:	03 c0       	rjmp	.+6      	; 0x18a88 <lif_check_volume+0x4a>
   18a82:	81 e0       	ldi	r24, 0x01	; 1
   18a84:	90 e0       	ldi	r25, 0x00	; 0
   18a86:	02 c0       	rjmp	.+4      	; 0x18a8c <lif_check_volume+0x4e>
   18a88:	80 e0       	ldi	r24, 0x00	; 0
   18a8a:	90 e0       	ldi	r25, 0x00	; 0
   18a8c:	29 a9       	ldd	r18, Y+49	; 0x31
   18a8e:	3a a9       	ldd	r19, Y+50	; 0x32
   18a90:	21 15       	cp	r18, r1
   18a92:	f0 e1       	ldi	r31, 0x10	; 16
   18a94:	3f 07       	cpc	r19, r31
   18a96:	a1 f0       	breq	.+40     	; 0x18ac0 <lif_check_volume+0x82>
   18a98:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18a9c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18aa0:	92 ff       	sbrs	r25, 2
   18aa2:	0c c0       	rjmp	.+24     	; 0x18abc <lif_check_volume+0x7e>
   18aa4:	ed b7       	in	r30, 0x3d	; 61
   18aa6:	fe b7       	in	r31, 0x3e	; 62
   18aa8:	35 83       	std	Z+5, r19	; 0x05
   18aaa:	24 83       	std	Z+4, r18	; 0x04
   18aac:	86 e1       	ldi	r24, 0x16	; 22
   18aae:	9d e3       	ldi	r25, 0x3D	; 61
   18ab0:	a0 e0       	ldi	r26, 0x00	; 0
   18ab2:	81 83       	std	Z+1, r24	; 0x01
   18ab4:	92 83       	std	Z+2, r25	; 0x02
   18ab6:	a3 83       	std	Z+3, r26	; 0x03
   18ab8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18abc:	80 e0       	ldi	r24, 0x00	; 0
   18abe:	90 e0       	ldi	r25, 0x00	; 0
   18ac0:	29 ad       	ldd	r18, Y+57	; 0x39
   18ac2:	3a ad       	ldd	r19, Y+58	; 0x3a
   18ac4:	22 30       	cpi	r18, 0x02	; 2
   18ac6:	31 05       	cpc	r19, r1
   18ac8:	a0 f0       	brcs	.+40     	; 0x18af2 <lif_check_volume+0xb4>
   18aca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18ace:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18ad2:	92 ff       	sbrs	r25, 2
   18ad4:	0c c0       	rjmp	.+24     	; 0x18aee <lif_check_volume+0xb0>
   18ad6:	ed b7       	in	r30, 0x3d	; 61
   18ad8:	fe b7       	in	r31, 0x3e	; 62
   18ada:	35 83       	std	Z+5, r19	; 0x05
   18adc:	24 83       	std	Z+4, r18	; 0x04
   18ade:	8e ef       	ldi	r24, 0xFE	; 254
   18ae0:	9c e3       	ldi	r25, 0x3C	; 60
   18ae2:	a0 e0       	ldi	r26, 0x00	; 0
   18ae4:	81 83       	std	Z+1, r24	; 0x01
   18ae6:	92 83       	std	Z+2, r25	; 0x02
   18ae8:	a3 83       	std	Z+3, r26	; 0x03
   18aea:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18aee:	80 e0       	ldi	r24, 0x00	; 0
   18af0:	90 e0       	ldi	r25, 0x00	; 0
   18af2:	2b a9       	ldd	r18, Y+51	; 0x33
   18af4:	3c a9       	ldd	r19, Y+52	; 0x34
   18af6:	23 2b       	or	r18, r19
   18af8:	91 f0       	breq	.+36     	; 0x18b1e <lif_check_volume+0xe0>
   18afa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18afe:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18b02:	92 ff       	sbrs	r25, 2
   18b04:	0a c0       	rjmp	.+20     	; 0x18b1a <lif_check_volume+0xdc>
   18b06:	85 ec       	ldi	r24, 0xC5	; 197
   18b08:	9c e3       	ldi	r25, 0x3C	; 60
   18b0a:	a0 e0       	ldi	r26, 0x00	; 0
   18b0c:	ed b7       	in	r30, 0x3d	; 61
   18b0e:	fe b7       	in	r31, 0x3e	; 62
   18b10:	81 83       	std	Z+1, r24	; 0x01
   18b12:	92 83       	std	Z+2, r25	; 0x02
   18b14:	a3 83       	std	Z+3, r26	; 0x03
   18b16:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18b1a:	80 e0       	ldi	r24, 0x00	; 0
   18b1c:	90 e0       	ldi	r25, 0x00	; 0
   18b1e:	2b ad       	ldd	r18, Y+59	; 0x3b
   18b20:	3c ad       	ldd	r19, Y+60	; 0x3c
   18b22:	23 2b       	or	r18, r19
   18b24:	91 f0       	breq	.+36     	; 0x18b4a <lif_check_volume+0x10c>
   18b26:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18b2a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18b2e:	92 ff       	sbrs	r25, 2
   18b30:	0a c0       	rjmp	.+20     	; 0x18b46 <lif_check_volume+0x108>
   18b32:	8c e8       	ldi	r24, 0x8C	; 140
   18b34:	9c e3       	ldi	r25, 0x3C	; 60
   18b36:	a0 e0       	ldi	r26, 0x00	; 0
   18b38:	ed b7       	in	r30, 0x3d	; 61
   18b3a:	fe b7       	in	r31, 0x3e	; 62
   18b3c:	81 83       	std	Z+1, r24	; 0x01
   18b3e:	92 83       	std	Z+2, r25	; 0x02
   18b40:	a3 83       	std	Z+3, r26	; 0x03
   18b42:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18b46:	80 e0       	ldi	r24, 0x00	; 0
   18b48:	90 e0       	ldi	r25, 0x00	; 0
   18b4a:	4d a5       	ldd	r20, Y+45	; 0x2d
   18b4c:	5e a5       	ldd	r21, Y+46	; 0x2e
   18b4e:	6f a5       	ldd	r22, Y+47	; 0x2f
   18b50:	78 a9       	ldd	r23, Y+48	; 0x30
   18b52:	45 2b       	or	r20, r21
   18b54:	46 2b       	or	r20, r22
   18b56:	47 2b       	or	r20, r23
   18b58:	b1 f4       	brne	.+44     	; 0x18b86 <lif_check_volume+0x148>
   18b5a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18b5e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18b62:	92 ff       	sbrs	r25, 2
   18b64:	0e c0       	rjmp	.+28     	; 0x18b82 <lif_check_volume+0x144>
   18b66:	ed b7       	in	r30, 0x3d	; 61
   18b68:	fe b7       	in	r31, 0x3e	; 62
   18b6a:	14 82       	std	Z+4, r1	; 0x04
   18b6c:	15 82       	std	Z+5, r1	; 0x05
   18b6e:	16 82       	std	Z+6, r1	; 0x06
   18b70:	17 82       	std	Z+7, r1	; 0x07
   18b72:	87 e6       	ldi	r24, 0x67	; 103
   18b74:	9c e3       	ldi	r25, 0x3C	; 60
   18b76:	a0 e0       	ldi	r26, 0x00	; 0
   18b78:	81 83       	std	Z+1, r24	; 0x01
   18b7a:	92 83       	std	Z+2, r25	; 0x02
   18b7c:	a3 83       	std	Z+3, r26	; 0x03
   18b7e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18b82:	80 e0       	ldi	r24, 0x00	; 0
   18b84:	90 e0       	ldi	r25, 0x00	; 0
   18b86:	4d a9       	ldd	r20, Y+53	; 0x35
   18b88:	5e a9       	ldd	r21, Y+54	; 0x36
   18b8a:	6f a9       	ldd	r22, Y+55	; 0x37
   18b8c:	78 ad       	ldd	r23, Y+56	; 0x38
   18b8e:	45 2b       	or	r20, r21
   18b90:	46 2b       	or	r20, r22
   18b92:	47 2b       	or	r20, r23
   18b94:	91 f4       	brne	.+36     	; 0x18bba <lif_check_volume+0x17c>
   18b96:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18b9a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18b9e:	92 ff       	sbrs	r25, 2
   18ba0:	0a c0       	rjmp	.+20     	; 0x18bb6 <lif_check_volume+0x178>
   18ba2:	88 e3       	ldi	r24, 0x38	; 56
   18ba4:	9c e3       	ldi	r25, 0x3C	; 60
   18ba6:	a0 e0       	ldi	r26, 0x00	; 0
   18ba8:	ed b7       	in	r30, 0x3d	; 61
   18baa:	fe b7       	in	r31, 0x3e	; 62
   18bac:	81 83       	std	Z+1, r24	; 0x01
   18bae:	92 83       	std	Z+2, r25	; 0x02
   18bb0:	a3 83       	std	Z+3, r26	; 0x03
   18bb2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18bb6:	80 e0       	ldi	r24, 0x00	; 0
   18bb8:	90 e0       	ldi	r25, 0x00	; 0
   18bba:	0d a5       	ldd	r16, Y+45	; 0x2d
   18bbc:	1e a5       	ldd	r17, Y+46	; 0x2e
   18bbe:	2f a5       	ldd	r18, Y+47	; 0x2f
   18bc0:	38 a9       	ldd	r19, Y+48	; 0x30
   18bc2:	4d a9       	ldd	r20, Y+53	; 0x35
   18bc4:	5e a9       	ldd	r21, Y+54	; 0x36
   18bc6:	6f a9       	ldd	r22, Y+55	; 0x37
   18bc8:	78 ad       	ldd	r23, Y+56	; 0x38
   18bca:	40 0f       	add	r20, r16
   18bcc:	51 1f       	adc	r21, r17
   18bce:	62 1f       	adc	r22, r18
   18bd0:	73 1f       	adc	r23, r19
   18bd2:	0c 81       	ldd	r16, Y+4	; 0x04
   18bd4:	1d 81       	ldd	r17, Y+5	; 0x05
   18bd6:	2e 81       	ldd	r18, Y+6	; 0x06
   18bd8:	3f 81       	ldd	r19, Y+7	; 0x07
   18bda:	04 17       	cp	r16, r20
   18bdc:	15 07       	cpc	r17, r21
   18bde:	26 07       	cpc	r18, r22
   18be0:	37 07       	cpc	r19, r23
   18be2:	90 f4       	brcc	.+36     	; 0x18c08 <lif_check_volume+0x1ca>
   18be4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18be8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18bec:	92 ff       	sbrs	r25, 2
   18bee:	0a c0       	rjmp	.+20     	; 0x18c04 <lif_check_volume+0x1c6>
   18bf0:	8c e0       	ldi	r24, 0x0C	; 12
   18bf2:	9c e3       	ldi	r25, 0x3C	; 60
   18bf4:	a0 e0       	ldi	r26, 0x00	; 0
   18bf6:	ed b7       	in	r30, 0x3d	; 61
   18bf8:	fe b7       	in	r31, 0x3e	; 62
   18bfa:	81 83       	std	Z+1, r24	; 0x01
   18bfc:	92 83       	std	Z+2, r25	; 0x02
   18bfe:	a3 83       	std	Z+3, r26	; 0x03
   18c00:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18c04:	80 e0       	ldi	r24, 0x00	; 0
   18c06:	90 e0       	ldi	r25, 0x00	; 0
   18c08:	cd b7       	in	r28, 0x3d	; 61
   18c0a:	de b7       	in	r29, 0x3e	; 62
   18c0c:	27 96       	adiw	r28, 0x07	; 7
   18c0e:	e4 e0       	ldi	r30, 0x04	; 4
   18c10:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__epilogue_restores__+0x1c>

00018c14 <lif_check_dir>:
   18c14:	a5 e1       	ldi	r26, 0x15	; 21
   18c16:	b0 e0       	ldi	r27, 0x00	; 0
   18c18:	e0 e1       	ldi	r30, 0x10	; 16
   18c1a:	f6 ec       	ldi	r31, 0xC6	; 198
   18c1c:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
   18c20:	6c 01       	movw	r12, r24
   18c22:	2a e5       	ldi	r18, 0x5A	; 90
   18c24:	c2 0e       	add	r12, r18
   18c26:	d1 1c       	adc	r13, r1
   18c28:	f6 01       	movw	r30, r12
   18c2a:	20 81       	ld	r18, Z
   18c2c:	31 81       	ldd	r19, Z+1	; 0x01
   18c2e:	21 50       	subi	r18, 0x01	; 1
   18c30:	31 09       	sbc	r19, r1
   18c32:	2e 3f       	cpi	r18, 0xFE	; 254
   18c34:	3f 4f       	sbci	r19, 0xFF	; 255
   18c36:	08 f0       	brcs	.+2      	; 0x18c3a <lif_check_dir+0x26>
   18c38:	9a c1       	rjmp	.+820    	; 0x18f6e <lif_check_dir+0x35a>
   18c3a:	9d 8b       	std	Y+21, r25	; 0x15
   18c3c:	8c 8b       	std	Y+20, r24	; 0x14
   18c3e:	7c 01       	movw	r14, r24
   18c40:	2f e4       	ldi	r18, 0x4F	; 79
   18c42:	e2 0e       	add	r14, r18
   18c44:	f1 1c       	adc	r15, r1
   18c46:	c7 01       	movw	r24, r14
   18c48:	e9 d9       	rcall	.-3118   	; 0x1801c <lif_checkname>
   18c4a:	89 2b       	or	r24, r25
   18c4c:	99 f4       	brne	.+38     	; 0x18c74 <lif_check_dir+0x60>
   18c4e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18c52:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18c56:	92 ff       	sbrs	r25, 2
   18c58:	0f c0       	rjmp	.+30     	; 0x18c78 <lif_check_dir+0x64>
   18c5a:	ed b7       	in	r30, 0x3d	; 61
   18c5c:	fe b7       	in	r31, 0x3e	; 62
   18c5e:	f5 82       	std	Z+5, r15	; 0x05
   18c60:	e4 82       	std	Z+4, r14	; 0x04
   18c62:	8b ee       	ldi	r24, 0xEB	; 235
   18c64:	9b e3       	ldi	r25, 0x3B	; 59
   18c66:	a0 e0       	ldi	r26, 0x00	; 0
   18c68:	81 83       	std	Z+1, r24	; 0x01
   18c6a:	92 83       	std	Z+2, r25	; 0x02
   18c6c:	a3 83       	std	Z+3, r26	; 0x03
   18c6e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18c72:	02 c0       	rjmp	.+4      	; 0x18c78 <lif_check_dir+0x64>
   18c74:	01 e0       	ldi	r16, 0x01	; 1
   18c76:	01 c0       	rjmp	.+2      	; 0x18c7a <lif_check_dir+0x66>
   18c78:	00 e0       	ldi	r16, 0x00	; 0
   18c7a:	10 e0       	ldi	r17, 0x00	; 0
   18c7c:	ec 89       	ldd	r30, Y+20	; 0x14
   18c7e:	fd 89       	ldd	r31, Y+21	; 0x15
   18c80:	84 85       	ldd	r24, Z+12	; 0x0c
   18c82:	95 85       	ldd	r25, Z+13	; 0x0d
   18c84:	a6 85       	ldd	r26, Z+14	; 0x0e
   18c86:	b7 85       	ldd	r27, Z+15	; 0x0f
   18c88:	00 97       	sbiw	r24, 0x00	; 0
   18c8a:	a1 05       	cpc	r26, r1
   18c8c:	b1 05       	cpc	r27, r1
   18c8e:	39 f1       	breq	.+78     	; 0x18cde <lif_check_dir+0xca>
   18c90:	e4 5a       	subi	r30, 0xA4	; 164
   18c92:	ff 4f       	sbci	r31, 0xFF	; 255
   18c94:	40 81       	ld	r20, Z
   18c96:	51 81       	ldd	r21, Z+1	; 0x01
   18c98:	62 81       	ldd	r22, Z+2	; 0x02
   18c9a:	73 81       	ldd	r23, Z+3	; 0x03
   18c9c:	48 17       	cp	r20, r24
   18c9e:	59 07       	cpc	r21, r25
   18ca0:	6a 07       	cpc	r22, r26
   18ca2:	7b 07       	cpc	r23, r27
   18ca4:	e0 f4       	brcc	.+56     	; 0x18cde <lif_check_dir+0xca>
   18ca6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18caa:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18cae:	32 ff       	sbrs	r19, 2
   18cb0:	14 c0       	rjmp	.+40     	; 0x18cda <lif_check_dir+0xc6>
   18cb2:	ed b7       	in	r30, 0x3d	; 61
   18cb4:	fe b7       	in	r31, 0x3e	; 62
   18cb6:	82 87       	std	Z+10, r24	; 0x0a
   18cb8:	93 87       	std	Z+11, r25	; 0x0b
   18cba:	a4 87       	std	Z+12, r26	; 0x0c
   18cbc:	b5 87       	std	Z+13, r27	; 0x0d
   18cbe:	46 83       	std	Z+6, r20	; 0x06
   18cc0:	57 83       	std	Z+7, r21	; 0x07
   18cc2:	60 87       	std	Z+8, r22	; 0x08
   18cc4:	71 87       	std	Z+9, r23	; 0x09
   18cc6:	f5 82       	std	Z+5, r15	; 0x05
   18cc8:	e4 82       	std	Z+4, r14	; 0x04
   18cca:	87 ea       	ldi	r24, 0xA7	; 167
   18ccc:	9b e3       	ldi	r25, 0x3B	; 59
   18cce:	a0 e0       	ldi	r26, 0x00	; 0
   18cd0:	81 83       	std	Z+1, r24	; 0x01
   18cd2:	92 83       	std	Z+2, r25	; 0x02
   18cd4:	a3 83       	std	Z+3, r26	; 0x03
   18cd6:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18cda:	00 e0       	ldi	r16, 0x00	; 0
   18cdc:	10 e0       	ldi	r17, 0x00	; 0
   18cde:	ec 89       	ldd	r30, Y+20	; 0x14
   18ce0:	fd 89       	ldd	r31, Y+21	; 0x15
   18ce2:	44 81       	ldd	r20, Z+4	; 0x04
   18ce4:	55 81       	ldd	r21, Z+5	; 0x05
   18ce6:	66 81       	ldd	r22, Z+6	; 0x06
   18ce8:	77 81       	ldd	r23, Z+7	; 0x07
   18cea:	41 15       	cp	r20, r1
   18cec:	51 05       	cpc	r21, r1
   18cee:	61 05       	cpc	r22, r1
   18cf0:	71 05       	cpc	r23, r1
   18cf2:	99 f1       	breq	.+102    	; 0x18d5a <lif_check_dir+0x146>
   18cf4:	e4 5a       	subi	r30, 0xA4	; 164
   18cf6:	ff 4f       	sbci	r31, 0xFF	; 255
   18cf8:	80 80       	ld	r8, Z
   18cfa:	91 80       	ldd	r9, Z+1	; 0x01
   18cfc:	a2 80       	ldd	r10, Z+2	; 0x02
   18cfe:	b3 80       	ldd	r11, Z+3	; 0x03
   18d00:	ec 89       	ldd	r30, Y+20	; 0x14
   18d02:	fd 89       	ldd	r31, Y+21	; 0x15
   18d04:	e0 5a       	subi	r30, 0xA0	; 160
   18d06:	ff 4f       	sbci	r31, 0xFF	; 255
   18d08:	80 81       	ld	r24, Z
   18d0a:	91 81       	ldd	r25, Z+1	; 0x01
   18d0c:	a2 81       	ldd	r26, Z+2	; 0x02
   18d0e:	b3 81       	ldd	r27, Z+3	; 0x03
   18d10:	88 0d       	add	r24, r8
   18d12:	99 1d       	adc	r25, r9
   18d14:	aa 1d       	adc	r26, r10
   18d16:	bb 1d       	adc	r27, r11
   18d18:	48 17       	cp	r20, r24
   18d1a:	59 07       	cpc	r21, r25
   18d1c:	6a 07       	cpc	r22, r26
   18d1e:	7b 07       	cpc	r23, r27
   18d20:	e0 f4       	brcc	.+56     	; 0x18d5a <lif_check_dir+0x146>
   18d22:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18d26:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18d2a:	32 ff       	sbrs	r19, 2
   18d2c:	14 c0       	rjmp	.+40     	; 0x18d56 <lif_check_dir+0x142>
   18d2e:	ed b7       	in	r30, 0x3d	; 61
   18d30:	fe b7       	in	r31, 0x3e	; 62
   18d32:	42 87       	std	Z+10, r20	; 0x0a
   18d34:	53 87       	std	Z+11, r21	; 0x0b
   18d36:	64 87       	std	Z+12, r22	; 0x0c
   18d38:	75 87       	std	Z+13, r23	; 0x0d
   18d3a:	86 83       	std	Z+6, r24	; 0x06
   18d3c:	97 83       	std	Z+7, r25	; 0x07
   18d3e:	a0 87       	std	Z+8, r26	; 0x08
   18d40:	b1 87       	std	Z+9, r27	; 0x09
   18d42:	f5 82       	std	Z+5, r15	; 0x05
   18d44:	e4 82       	std	Z+4, r14	; 0x04
   18d46:	86 e6       	ldi	r24, 0x66	; 102
   18d48:	9b e3       	ldi	r25, 0x3B	; 59
   18d4a:	a0 e0       	ldi	r26, 0x00	; 0
   18d4c:	81 83       	std	Z+1, r24	; 0x01
   18d4e:	92 83       	std	Z+2, r25	; 0x02
   18d50:	a3 83       	std	Z+3, r26	; 0x03
   18d52:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18d56:	00 e0       	ldi	r16, 0x00	; 0
   18d58:	10 e0       	ldi	r17, 0x00	; 0
   18d5a:	ec 89       	ldd	r30, Y+20	; 0x14
   18d5c:	fd 89       	ldd	r31, Y+21	; 0x15
   18d5e:	e6 59       	subi	r30, 0x96	; 150
   18d60:	ff 4f       	sbci	r31, 0xFF	; 255
   18d62:	80 81       	ld	r24, Z
   18d64:	91 81       	ldd	r25, Z+1	; 0x01
   18d66:	81 30       	cpi	r24, 0x01	; 1
   18d68:	f0 e8       	ldi	r31, 0x80	; 128
   18d6a:	9f 07       	cpc	r25, r31
   18d6c:	b1 f0       	breq	.+44     	; 0x18d9a <lif_check_dir+0x186>
   18d6e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18d72:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18d76:	32 ff       	sbrs	r19, 2
   18d78:	0e c0       	rjmp	.+28     	; 0x18d96 <lif_check_dir+0x182>
   18d7a:	ed b7       	in	r30, 0x3d	; 61
   18d7c:	fe b7       	in	r31, 0x3e	; 62
   18d7e:	97 83       	std	Z+7, r25	; 0x07
   18d80:	86 83       	std	Z+6, r24	; 0x06
   18d82:	f5 82       	std	Z+5, r15	; 0x05
   18d84:	e4 82       	std	Z+4, r14	; 0x04
   18d86:	88 e3       	ldi	r24, 0x38	; 56
   18d88:	9b e3       	ldi	r25, 0x3B	; 59
   18d8a:	a0 e0       	ldi	r26, 0x00	; 0
   18d8c:	81 83       	std	Z+1, r24	; 0x01
   18d8e:	92 83       	std	Z+2, r25	; 0x02
   18d90:	a3 83       	std	Z+3, r26	; 0x03
   18d92:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18d96:	00 e0       	ldi	r16, 0x00	; 0
   18d98:	10 e0       	ldi	r17, 0x00	; 0
   18d9a:	f6 01       	movw	r30, r12
   18d9c:	80 81       	ld	r24, Z
   18d9e:	91 81       	ldd	r25, Z+1	; 0x01
   18da0:	8c 7f       	andi	r24, 0xFC	; 252
   18da2:	80 31       	cpi	r24, 0x10	; 16
   18da4:	90 4e       	sbci	r25, 0xE0	; 224
   18da6:	09 f0       	breq	.+2      	; 0x18daa <lif_check_dir+0x196>
   18da8:	b3 c0       	rjmp	.+358    	; 0x18f10 <lif_check_dir+0x2fc>
   18daa:	cc 88       	ldd	r12, Y+20	; 0x14
   18dac:	dd 88       	ldd	r13, Y+21	; 0x15
   18dae:	2c e6       	ldi	r18, 0x6C	; 108
   18db0:	c2 0e       	add	r12, r18
   18db2:	d1 1c       	adc	r13, r1
   18db4:	f6 01       	movw	r30, r12
   18db6:	80 81       	ld	r24, Z
   18db8:	91 81       	ldd	r25, Z+1	; 0x01
   18dba:	00 97       	sbiw	r24, 0x00	; 0
   18dbc:	09 f4       	brne	.+2      	; 0x18dc0 <lif_check_dir+0x1ac>
   18dbe:	a8 c0       	rjmp	.+336    	; 0x18f10 <lif_check_dir+0x2fc>
   18dc0:	4c 01       	movw	r8, r24
   18dc2:	a1 2c       	mov	r10, r1
   18dc4:	b1 2c       	mov	r11, r1
   18dc6:	77 27       	eor	r23, r23
   18dc8:	6b 2d       	mov	r22, r11
   18dca:	5a 2d       	mov	r21, r10
   18dcc:	49 2d       	mov	r20, r9
   18dce:	9c 01       	movw	r18, r24
   18dd0:	33 27       	eor	r19, r19
   18dd2:	3b 8b       	std	Y+19, r19	; 0x13
   18dd4:	2a 8b       	std	Y+18, r18	; 0x12
   18dd6:	db 01       	movw	r26, r22
   18dd8:	ca 01       	movw	r24, r20
   18dda:	23 2b       	or	r18, r19
   18ddc:	19 f0       	breq	.+6      	; 0x18de4 <lif_check_dir+0x1d0>
   18dde:	01 96       	adiw	r24, 0x01	; 1
   18de0:	a1 1d       	adc	r26, r1
   18de2:	b1 1d       	adc	r27, r1
   18de4:	2c 88       	ldd	r2, Y+20	; 0x14
   18de6:	3d 88       	ldd	r3, Y+21	; 0x15
   18de8:	30 e6       	ldi	r19, 0x60	; 96
   18dea:	23 0e       	add	r2, r19
   18dec:	31 1c       	adc	r3, r1
   18dee:	f1 01       	movw	r30, r2
   18df0:	40 80       	ld	r4, Z
   18df2:	51 80       	ldd	r5, Z+1	; 0x01
   18df4:	62 80       	ldd	r6, Z+2	; 0x02
   18df6:	73 80       	ldd	r7, Z+3	; 0x03
   18df8:	48 16       	cp	r4, r24
   18dfa:	59 06       	cpc	r5, r25
   18dfc:	6a 06       	cpc	r6, r26
   18dfe:	7b 06       	cpc	r7, r27
   18e00:	40 f5       	brcc	.+80     	; 0x18e52 <lif_check_dir+0x23e>
   18e02:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18e06:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18e0a:	32 ff       	sbrs	r19, 2
   18e0c:	20 c0       	rjmp	.+64     	; 0x18e4e <lif_check_dir+0x23a>
   18e0e:	2a 89       	ldd	r18, Y+18	; 0x12
   18e10:	3b 89       	ldd	r19, Y+19	; 0x13
   18e12:	23 2b       	or	r18, r19
   18e14:	21 f0       	breq	.+8      	; 0x18e1e <lif_check_dir+0x20a>
   18e16:	4f 5f       	subi	r20, 0xFF	; 255
   18e18:	5f 4f       	sbci	r21, 0xFF	; 255
   18e1a:	6f 4f       	sbci	r22, 0xFF	; 255
   18e1c:	7f 4f       	sbci	r23, 0xFF	; 255
   18e1e:	ed b7       	in	r30, 0x3d	; 61
   18e20:	fe b7       	in	r31, 0x3e	; 62
   18e22:	46 86       	std	Z+14, r4	; 0x0e
   18e24:	57 86       	std	Z+15, r5	; 0x0f
   18e26:	60 8a       	std	Z+16, r6	; 0x10
   18e28:	71 8a       	std	Z+17, r7	; 0x11
   18e2a:	42 87       	std	Z+10, r20	; 0x0a
   18e2c:	53 87       	std	Z+11, r21	; 0x0b
   18e2e:	64 87       	std	Z+12, r22	; 0x0c
   18e30:	75 87       	std	Z+13, r23	; 0x0d
   18e32:	86 82       	std	Z+6, r8	; 0x06
   18e34:	97 82       	std	Z+7, r9	; 0x07
   18e36:	a0 86       	std	Z+8, r10	; 0x08
   18e38:	b1 86       	std	Z+9, r11	; 0x09
   18e3a:	f5 82       	std	Z+5, r15	; 0x05
   18e3c:	e4 82       	std	Z+4, r14	; 0x04
   18e3e:	8d ee       	ldi	r24, 0xED	; 237
   18e40:	9a e3       	ldi	r25, 0x3A	; 58
   18e42:	a0 e0       	ldi	r26, 0x00	; 0
   18e44:	81 83       	std	Z+1, r24	; 0x01
   18e46:	92 83       	std	Z+2, r25	; 0x02
   18e48:	a3 83       	std	Z+3, r26	; 0x03
   18e4a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18e4e:	00 e0       	ldi	r16, 0x00	; 0
   18e50:	10 e0       	ldi	r17, 0x00	; 0
   18e52:	f6 01       	movw	r30, r12
   18e54:	20 81       	ld	r18, Z
   18e56:	31 81       	ldd	r19, Z+1	; 0x01
   18e58:	a9 01       	movw	r20, r18
   18e5a:	60 e0       	ldi	r22, 0x00	; 0
   18e5c:	70 e0       	ldi	r23, 0x00	; 0
   18e5e:	bb 27       	eor	r27, r27
   18e60:	a7 2f       	mov	r26, r23
   18e62:	96 2f       	mov	r25, r22
   18e64:	85 2f       	mov	r24, r21
   18e66:	f9 01       	movw	r30, r18
   18e68:	ff 27       	eor	r31, r31
   18e6a:	fb 8b       	std	Y+19, r31	; 0x13
   18e6c:	ea 8b       	std	Y+18, r30	; 0x12
   18e6e:	2c 01       	movw	r4, r24
   18e70:	3d 01       	movw	r6, r26
   18e72:	ef 2b       	or	r30, r31
   18e74:	29 f0       	breq	.+10     	; 0x18e80 <lif_check_dir+0x26c>
   18e76:	ff ef       	ldi	r31, 0xFF	; 255
   18e78:	4f 1a       	sub	r4, r31
   18e7a:	5f 0a       	sbc	r5, r31
   18e7c:	6f 0a       	sbc	r6, r31
   18e7e:	7f 0a       	sbc	r7, r31
   18e80:	f1 01       	movw	r30, r2
   18e82:	80 80       	ld	r8, Z
   18e84:	91 80       	ldd	r9, Z+1	; 0x01
   18e86:	a2 80       	ldd	r10, Z+2	; 0x02
   18e88:	b3 80       	ldd	r11, Z+3	; 0x03
   18e8a:	48 14       	cp	r4, r8
   18e8c:	59 04       	cpc	r5, r9
   18e8e:	6a 04       	cpc	r6, r10
   18e90:	7b 04       	cpc	r7, r11
   18e92:	28 f5       	brcc	.+74     	; 0x18ede <lif_check_dir+0x2ca>
   18e94:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18e98:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18e9c:	32 ff       	sbrs	r19, 2
   18e9e:	1f c0       	rjmp	.+62     	; 0x18ede <lif_check_dir+0x2ca>
   18ea0:	2a 89       	ldd	r18, Y+18	; 0x12
   18ea2:	3b 89       	ldd	r19, Y+19	; 0x13
   18ea4:	23 2b       	or	r18, r19
   18ea6:	19 f0       	breq	.+6      	; 0x18eae <lif_check_dir+0x29a>
   18ea8:	01 96       	adiw	r24, 0x01	; 1
   18eaa:	a1 1d       	adc	r26, r1
   18eac:	b1 1d       	adc	r27, r1
   18eae:	ed b7       	in	r30, 0x3d	; 61
   18eb0:	fe b7       	in	r31, 0x3e	; 62
   18eb2:	86 86       	std	Z+14, r8	; 0x0e
   18eb4:	97 86       	std	Z+15, r9	; 0x0f
   18eb6:	a0 8a       	std	Z+16, r10	; 0x10
   18eb8:	b1 8a       	std	Z+17, r11	; 0x11
   18eba:	82 87       	std	Z+10, r24	; 0x0a
   18ebc:	93 87       	std	Z+11, r25	; 0x0b
   18ebe:	a4 87       	std	Z+12, r26	; 0x0c
   18ec0:	b5 87       	std	Z+13, r27	; 0x0d
   18ec2:	46 83       	std	Z+6, r20	; 0x06
   18ec4:	57 83       	std	Z+7, r21	; 0x07
   18ec6:	60 87       	std	Z+8, r22	; 0x08
   18ec8:	71 87       	std	Z+9, r23	; 0x09
   18eca:	f5 82       	std	Z+5, r15	; 0x05
   18ecc:	e4 82       	std	Z+4, r14	; 0x04
   18ece:	82 ea       	ldi	r24, 0xA2	; 162
   18ed0:	9a e3       	ldi	r25, 0x3A	; 58
   18ed2:	a0 e0       	ldi	r26, 0x00	; 0
   18ed4:	81 83       	std	Z+1, r24	; 0x01
   18ed6:	92 83       	std	Z+2, r25	; 0x02
   18ed8:	a3 83       	std	Z+3, r26	; 0x03
   18eda:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18ede:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18ee2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18ee6:	92 ff       	sbrs	r25, 2
   18ee8:	13 c0       	rjmp	.+38     	; 0x18f10 <lif_check_dir+0x2fc>
   18eea:	f6 01       	movw	r30, r12
   18eec:	80 81       	ld	r24, Z
   18eee:	91 81       	ldd	r25, Z+1	; 0x01
   18ef0:	89 2b       	or	r24, r25
   18ef2:	71 f4       	brne	.+28     	; 0x18f10 <lif_check_dir+0x2fc>
   18ef4:	ed b7       	in	r30, 0x3d	; 61
   18ef6:	fe b7       	in	r31, 0x3e	; 62
   18ef8:	f5 82       	std	Z+5, r15	; 0x05
   18efa:	e4 82       	std	Z+4, r14	; 0x04
   18efc:	87 e7       	ldi	r24, 0x77	; 119
   18efe:	9a e3       	ldi	r25, 0x3A	; 58
   18f00:	a0 e0       	ldi	r26, 0x00	; 0
   18f02:	81 83       	std	Z+1, r24	; 0x01
   18f04:	92 83       	std	Z+2, r25	; 0x02
   18f06:	a3 83       	std	Z+3, r26	; 0x03
   18f08:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18f0c:	00 e0       	ldi	r16, 0x00	; 0
   18f0e:	10 e0       	ldi	r17, 0x00	; 0
   18f10:	ec 89       	ldd	r30, Y+20	; 0x14
   18f12:	fd 89       	ldd	r31, Y+21	; 0x15
   18f14:	e2 59       	subi	r30, 0x92	; 146
   18f16:	ff 4f       	sbci	r31, 0xFF	; 255
   18f18:	20 81       	ld	r18, Z
   18f1a:	31 81       	ldd	r19, Z+1	; 0x01
   18f1c:	21 15       	cp	r18, r1
   18f1e:	f1 e0       	ldi	r31, 0x01	; 1
   18f20:	3f 07       	cpc	r19, r31
   18f22:	41 f1       	breq	.+80     	; 0x18f74 <lif_check_dir+0x360>
   18f24:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   18f28:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18f2c:	ca 01       	movw	r24, r20
   18f2e:	88 27       	eor	r24, r24
   18f30:	94 70       	andi	r25, 0x04	; 4
   18f32:	52 ff       	sbrs	r21, 2
   18f34:	20 c0       	rjmp	.+64     	; 0x18f76 <lif_check_dir+0x362>
   18f36:	c9 01       	movw	r24, r18
   18f38:	a0 e0       	ldi	r26, 0x00	; 0
   18f3a:	b0 e0       	ldi	r27, 0x00	; 0
   18f3c:	ed b7       	in	r30, 0x3d	; 61
   18f3e:	fe b7       	in	r31, 0x3e	; 62
   18f40:	86 83       	std	Z+6, r24	; 0x06
   18f42:	97 83       	std	Z+7, r25	; 0x07
   18f44:	a0 87       	std	Z+8, r26	; 0x08
   18f46:	b1 87       	std	Z+9, r27	; 0x09
   18f48:	ec 89       	ldd	r30, Y+20	; 0x14
   18f4a:	fd 89       	ldd	r31, Y+21	; 0x15
   18f4c:	80 81       	ld	r24, Z
   18f4e:	91 81       	ldd	r25, Z+1	; 0x01
   18f50:	ed b7       	in	r30, 0x3d	; 61
   18f52:	fe b7       	in	r31, 0x3e	; 62
   18f54:	95 83       	std	Z+5, r25	; 0x05
   18f56:	84 83       	std	Z+4, r24	; 0x04
   18f58:	8b e4       	ldi	r24, 0x4B	; 75
   18f5a:	9a e3       	ldi	r25, 0x3A	; 58
   18f5c:	a0 e0       	ldi	r26, 0x00	; 0
   18f5e:	81 83       	std	Z+1, r24	; 0x01
   18f60:	92 83       	std	Z+2, r25	; 0x02
   18f62:	a3 83       	std	Z+3, r26	; 0x03
   18f64:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   18f68:	80 e0       	ldi	r24, 0x00	; 0
   18f6a:	90 e0       	ldi	r25, 0x00	; 0
   18f6c:	04 c0       	rjmp	.+8      	; 0x18f76 <lif_check_dir+0x362>
   18f6e:	81 e0       	ldi	r24, 0x01	; 1
   18f70:	90 e0       	ldi	r25, 0x00	; 0
   18f72:	01 c0       	rjmp	.+2      	; 0x18f76 <lif_check_dir+0x362>
   18f74:	c8 01       	movw	r24, r16
   18f76:	65 96       	adiw	r28, 0x15	; 21
   18f78:	e2 e1       	ldi	r30, 0x12	; 18
   18f7a:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

00018f7e <lif_close_volume>:
   18f7e:	cf 93       	push	r28
   18f80:	df 93       	push	r29
   18f82:	00 97       	sbiw	r24, 0x00	; 0
   18f84:	f9 f0       	breq	.+62     	; 0x18fc4 <lif_close_volume+0x46>
   18f86:	ec 01       	movw	r28, r24
   18f88:	8a 81       	ldd	r24, Y+2	; 0x02
   18f8a:	9b 81       	ldd	r25, Y+3	; 0x03
   18f8c:	00 97       	sbiw	r24, 0x00	; 0
   18f8e:	79 f0       	breq	.+30     	; 0x18fae <lif_close_volume+0x30>
   18f90:	22 e0       	ldi	r18, 0x02	; 2
   18f92:	30 e0       	ldi	r19, 0x00	; 0
   18f94:	40 e0       	ldi	r20, 0x00	; 0
   18f96:	50 e0       	ldi	r21, 0x00	; 0
   18f98:	ba 01       	movw	r22, r20
   18f9a:	0e 94 ed 79 	call	0xf3da	; 0xf3da <fseek>
   18f9e:	8a 81       	ldd	r24, Y+2	; 0x02
   18fa0:	9b 81       	ldd	r25, Y+3	; 0x03
   18fa2:	0e 94 d5 7b 	call	0xf7aa	; 0xf7aa <fclose>
   18fa6:	1b 82       	std	Y+3, r1	; 0x03
   18fa8:	1a 82       	std	Y+2, r1	; 0x02
   18faa:	0e 94 d0 7a 	call	0xf5a0	; 0xf5a0 <sync>
   18fae:	88 81       	ld	r24, Y
   18fb0:	99 81       	ldd	r25, Y+1	; 0x01
   18fb2:	00 97       	sbiw	r24, 0x00	; 0
   18fb4:	11 f0       	breq	.+4      	; 0x18fba <lif_close_volume+0x3c>
   18fb6:	0e 94 3b be 	call	0x17c76	; 0x17c76 <lif_free>
   18fba:	ce 01       	movw	r24, r28
   18fbc:	73 db       	rcall	.-2330   	; 0x186a4 <lif_vol_clear>
   18fbe:	ce 01       	movw	r24, r28
   18fc0:	0e 94 3b be 	call	0x17c76	; 0x17c76 <lif_free>
   18fc4:	df 91       	pop	r29
   18fc6:	cf 91       	pop	r28
   18fc8:	08 95       	ret

00018fca <lif_checkdirindex>:
   18fca:	cf 92       	push	r12
   18fcc:	df 92       	push	r13
   18fce:	ef 92       	push	r14
   18fd0:	ff 92       	push	r15
   18fd2:	cf 93       	push	r28
   18fd4:	df 93       	push	r29
   18fd6:	ad b7       	in	r26, 0x3d	; 61
   18fd8:	be b7       	in	r27, 0x3e	; 62
   18fda:	17 97       	sbiw	r26, 0x07	; 7
   18fdc:	0f b6       	in	r0, 0x3f	; 63
   18fde:	f8 94       	cli
   18fe0:	be bf       	out	0x3e, r27	; 62
   18fe2:	0f be       	out	0x3f, r0	; 63
   18fe4:	ad bf       	out	0x3d, r26	; 61
   18fe6:	9b 01       	movw	r18, r22
   18fe8:	77 fd       	sbrc	r23, 7
   18fea:	25 c0       	rjmp	.+74     	; 0x19036 <lif_checkdirindex+0x6c>
   18fec:	ab 01       	movw	r20, r22
   18fee:	77 0f       	add	r23, r23
   18ff0:	66 0b       	sbc	r22, r22
   18ff2:	77 0b       	sbc	r23, r23
   18ff4:	e5 e0       	ldi	r30, 0x05	; 5
   18ff6:	44 0f       	add	r20, r20
   18ff8:	55 1f       	adc	r21, r21
   18ffa:	66 1f       	adc	r22, r22
   18ffc:	77 1f       	adc	r23, r23
   18ffe:	ea 95       	dec	r30
   19000:	d1 f7       	brne	.-12     	; 0x18ff6 <lif_checkdirindex+0x2c>
   19002:	c5 2e       	mov	r12, r21
   19004:	d6 2e       	mov	r13, r22
   19006:	e7 2e       	mov	r14, r23
   19008:	ff 24       	eor	r15, r15
   1900a:	55 27       	eor	r21, r21
   1900c:	66 27       	eor	r22, r22
   1900e:	77 27       	eor	r23, r23
   19010:	45 2b       	or	r20, r21
   19012:	46 2b       	or	r20, r22
   19014:	47 2b       	or	r20, r23
   19016:	29 f0       	breq	.+10     	; 0x19022 <lif_checkdirindex+0x58>
   19018:	4f ef       	ldi	r20, 0xFF	; 255
   1901a:	c4 1a       	sub	r12, r20
   1901c:	d4 0a       	sbc	r13, r20
   1901e:	e4 0a       	sbc	r14, r20
   19020:	f4 0a       	sbc	r15, r20
   19022:	fc 01       	movw	r30, r24
   19024:	45 a9       	ldd	r20, Z+53	; 0x35
   19026:	56 a9       	ldd	r21, Z+54	; 0x36
   19028:	67 a9       	ldd	r22, Z+55	; 0x37
   1902a:	70 ad       	ldd	r23, Z+56	; 0x38
   1902c:	4c 15       	cp	r20, r12
   1902e:	5d 05       	cpc	r21, r13
   19030:	6e 05       	cpc	r22, r14
   19032:	7f 05       	cpc	r23, r15
   19034:	08 f5       	brcc	.+66     	; 0x19078 <lif_checkdirindex+0xae>
   19036:	ec 01       	movw	r28, r24
   19038:	ed b7       	in	r30, 0x3d	; 61
   1903a:	fe b7       	in	r31, 0x3e	; 62
   1903c:	37 83       	std	Z+7, r19	; 0x07
   1903e:	26 83       	std	Z+6, r18	; 0x06
   19040:	88 81       	ld	r24, Y
   19042:	99 81       	ldd	r25, Y+1	; 0x01
   19044:	95 83       	std	Z+5, r25	; 0x05
   19046:	84 83       	std	Z+4, r24	; 0x04
   19048:	88 e8       	ldi	r24, 0x88	; 136
   1904a:	99 e3       	ldi	r25, 0x39	; 57
   1904c:	a0 e0       	ldi	r26, 0x00	; 0
   1904e:	81 83       	std	Z+1, r24	; 0x01
   19050:	92 83       	std	Z+2, r25	; 0x02
   19052:	a3 83       	std	Z+3, r26	; 0x03
   19054:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   19058:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1905c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19060:	c9 01       	movw	r24, r18
   19062:	88 27       	eor	r24, r24
   19064:	94 70       	andi	r25, 0x04	; 4
   19066:	32 ff       	sbrs	r19, 2
   19068:	09 c0       	rjmp	.+18     	; 0x1907c <lif_checkdirindex+0xb2>
   1906a:	6c ef       	ldi	r22, 0xFC	; 252
   1906c:	75 e1       	ldi	r23, 0x15	; 21
   1906e:	ce 01       	movw	r24, r28
   19070:	20 db       	rcall	.-2496   	; 0x186b2 <lif_dump_vol>
   19072:	80 e0       	ldi	r24, 0x00	; 0
   19074:	90 e0       	ldi	r25, 0x00	; 0
   19076:	02 c0       	rjmp	.+4      	; 0x1907c <lif_checkdirindex+0xb2>
   19078:	81 e0       	ldi	r24, 0x01	; 1
   1907a:	90 e0       	ldi	r25, 0x00	; 0
   1907c:	ad b7       	in	r26, 0x3d	; 61
   1907e:	be b7       	in	r27, 0x3e	; 62
   19080:	17 96       	adiw	r26, 0x07	; 7
   19082:	0f b6       	in	r0, 0x3f	; 63
   19084:	f8 94       	cli
   19086:	be bf       	out	0x3e, r27	; 62
   19088:	0f be       	out	0x3f, r0	; 63
   1908a:	ad bf       	out	0x3d, r26	; 61
   1908c:	df 91       	pop	r29
   1908e:	cf 91       	pop	r28
   19090:	ff 90       	pop	r15
   19092:	ef 90       	pop	r14
   19094:	df 90       	pop	r13
   19096:	cf 90       	pop	r12
   19098:	08 95       	ret

0001909a <lif_readdirindex>:
   1909a:	a5 e2       	ldi	r26, 0x25	; 37
   1909c:	b0 e0       	ldi	r27, 0x00	; 0
   1909e:	e3 e5       	ldi	r30, 0x53	; 83
   190a0:	f8 ec       	ldi	r31, 0xC8	; 200
   190a2:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
   190a6:	7c 01       	movw	r14, r24
   190a8:	6b 01       	movw	r12, r22
   190aa:	8f df       	rcall	.-226    	; 0x18fca <lif_checkdirindex>
   190ac:	89 2b       	or	r24, r25
   190ae:	19 f4       	brne	.+6      	; 0x190b6 <lif_readdirindex+0x1c>
   190b0:	00 e0       	ldi	r16, 0x00	; 0
   190b2:	10 e0       	ldi	r17, 0x00	; 0
   190b4:	54 c0       	rjmp	.+168    	; 0x1915e <lif_readdirindex+0xc4>
   190b6:	f7 01       	movw	r30, r14
   190b8:	85 a5       	ldd	r24, Z+45	; 0x2d
   190ba:	96 a5       	ldd	r25, Z+46	; 0x2e
   190bc:	a7 a5       	ldd	r26, Z+47	; 0x2f
   190be:	b0 a9       	ldd	r27, Z+48	; 0x30
   190c0:	44 27       	eor	r20, r20
   190c2:	58 2f       	mov	r21, r24
   190c4:	69 2f       	mov	r22, r25
   190c6:	7a 2f       	mov	r23, r26
   190c8:	c6 01       	movw	r24, r12
   190ca:	0d 2c       	mov	r0, r13
   190cc:	00 0c       	add	r0, r0
   190ce:	aa 0b       	sbc	r26, r26
   190d0:	bb 0b       	sbc	r27, r27
   190d2:	35 e0       	ldi	r19, 0x05	; 5
   190d4:	88 0f       	add	r24, r24
   190d6:	99 1f       	adc	r25, r25
   190d8:	aa 1f       	adc	r26, r26
   190da:	bb 1f       	adc	r27, r27
   190dc:	3a 95       	dec	r19
   190de:	d1 f7       	brne	.-12     	; 0x190d4 <lif_readdirindex+0x3a>
   190e0:	9a 01       	movw	r18, r20
   190e2:	ab 01       	movw	r20, r22
   190e4:	28 0f       	add	r18, r24
   190e6:	39 1f       	adc	r19, r25
   190e8:	4a 1f       	adc	r20, r26
   190ea:	5b 1f       	adc	r21, r27
   190ec:	00 e2       	ldi	r16, 0x20	; 32
   190ee:	10 e0       	ldi	r17, 0x00	; 0
   190f0:	be 01       	movw	r22, r28
   190f2:	6a 5f       	subi	r22, 0xFA	; 250
   190f4:	7f 4f       	sbci	r23, 0xFF	; 255
   190f6:	c7 01       	movw	r24, r14
   190f8:	0e 94 f3 be 	call	0x17de6	; 0x17de6 <lif_read>
   190fc:	60 32       	cpi	r22, 0x20	; 32
   190fe:	71 05       	cpc	r23, r1
   19100:	81 05       	cpc	r24, r1
   19102:	91 05       	cpc	r25, r1
   19104:	a8 f2       	brcs	.-86     	; 0x190b0 <lif_readdirindex+0x16>
   19106:	b7 01       	movw	r22, r14
   19108:	ce 01       	movw	r24, r28
   1910a:	06 96       	adiw	r24, 0x06	; 6
   1910c:	75 d9       	rcall	.-3350   	; 0x183f8 <lif_str2dir>
   1910e:	f7 01       	movw	r30, r14
   19110:	e6 5a       	subi	r30, 0xA6	; 166
   19112:	ff 4f       	sbci	r31, 0xFF	; 255
   19114:	80 81       	ld	r24, Z
   19116:	91 81       	ldd	r25, Z+1	; 0x01
   19118:	01 96       	adiw	r24, 0x01	; 1
   1911a:	19 f4       	brne	.+6      	; 0x19122 <lif_readdirindex+0x88>
   1911c:	f7 01       	movw	r30, r14
   1911e:	d3 a2       	std	Z+35, r13	; 0x23
   19120:	c2 a2       	std	Z+34, r12	; 0x22
   19122:	c7 01       	movw	r24, r14
   19124:	77 dd       	rcall	.-1298   	; 0x18c14 <lif_check_dir>
   19126:	8c 01       	movw	r16, r24
   19128:	89 2b       	or	r24, r25
   1912a:	b9 f4       	brne	.+46     	; 0x1915a <lif_readdirindex+0xc0>
   1912c:	ed b7       	in	r30, 0x3d	; 61
   1912e:	fe b7       	in	r31, 0x3e	; 62
   19130:	d5 82       	std	Z+5, r13	; 0x05
   19132:	c4 82       	std	Z+4, r12	; 0x04
   19134:	88 e6       	ldi	r24, 0x68	; 104
   19136:	99 e3       	ldi	r25, 0x39	; 57
   19138:	a0 e0       	ldi	r26, 0x00	; 0
   1913a:	81 83       	std	Z+1, r24	; 0x01
   1913c:	92 83       	std	Z+2, r25	; 0x02
   1913e:	a3 83       	std	Z+3, r26	; 0x03
   19140:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   19144:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19148:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1914c:	92 ff       	sbrs	r25, 2
   1914e:	b0 cf       	rjmp	.-160    	; 0x190b0 <lif_readdirindex+0x16>
   19150:	6d e0       	ldi	r22, 0x0D	; 13
   19152:	76 e1       	ldi	r23, 0x16	; 22
   19154:	c7 01       	movw	r24, r14
   19156:	ad da       	rcall	.-2726   	; 0x186b2 <lif_dump_vol>
   19158:	02 c0       	rjmp	.+4      	; 0x1915e <lif_readdirindex+0xc4>
   1915a:	01 e0       	ldi	r16, 0x01	; 1
   1915c:	10 e0       	ldi	r17, 0x00	; 0
   1915e:	c8 01       	movw	r24, r16
   19160:	a5 96       	adiw	r28, 0x25	; 37
   19162:	e8 e0       	ldi	r30, 0x08	; 8
   19164:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

00019168 <lif_writedirindex>:
   19168:	a0 e2       	ldi	r26, 0x20	; 32
   1916a:	b0 e0       	ldi	r27, 0x00	; 0
   1916c:	ea eb       	ldi	r30, 0xBA	; 186
   1916e:	f8 ec       	ldi	r31, 0xC8	; 200
   19170:	0c 94 46 e3 	jmp	0x1c68c	; 0x1c68c <__prologue_saves__+0x10>
   19174:	5c 01       	movw	r10, r24
   19176:	6b 01       	movw	r12, r22
   19178:	4d dd       	rcall	.-1382   	; 0x18c14 <lif_check_dir>
   1917a:	7c 01       	movw	r14, r24
   1917c:	89 2b       	or	r24, r25
   1917e:	71 f4       	brne	.+28     	; 0x1919c <lif_writedirindex+0x34>
   19180:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19184:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19188:	92 fd       	sbrc	r25, 2
   1918a:	03 c0       	rjmp	.+6      	; 0x19192 <lif_writedirindex+0x2a>
   1918c:	e1 2c       	mov	r14, r1
   1918e:	f1 2c       	mov	r15, r1
   19190:	42 c0       	rjmp	.+132    	; 0x19216 <lif_writedirindex+0xae>
   19192:	6e e1       	ldi	r22, 0x1E	; 30
   19194:	76 e1       	ldi	r23, 0x16	; 22
   19196:	c5 01       	movw	r24, r10
   19198:	8c da       	rcall	.-2792   	; 0x186b2 <lif_dump_vol>
   1919a:	3d c0       	rjmp	.+122    	; 0x19216 <lif_writedirindex+0xae>
   1919c:	b6 01       	movw	r22, r12
   1919e:	c5 01       	movw	r24, r10
   191a0:	14 df       	rcall	.-472    	; 0x18fca <lif_checkdirindex>
   191a2:	89 2b       	or	r24, r25
   191a4:	99 f3       	breq	.-26     	; 0x1918c <lif_writedirindex+0x24>
   191a6:	f5 01       	movw	r30, r10
   191a8:	e6 5a       	subi	r30, 0xA6	; 166
   191aa:	ff 4f       	sbci	r31, 0xFF	; 255
   191ac:	80 81       	ld	r24, Z
   191ae:	91 81       	ldd	r25, Z+1	; 0x01
   191b0:	01 96       	adiw	r24, 0x01	; 1
   191b2:	19 f4       	brne	.+6      	; 0x191ba <lif_writedirindex+0x52>
   191b4:	f5 01       	movw	r30, r10
   191b6:	d3 a2       	std	Z+35, r13	; 0x23
   191b8:	c2 a2       	std	Z+34, r12	; 0x22
   191ba:	f5 01       	movw	r30, r10
   191bc:	85 a5       	ldd	r24, Z+45	; 0x2d
   191be:	96 a5       	ldd	r25, Z+46	; 0x2e
   191c0:	a7 a5       	ldd	r26, Z+47	; 0x2f
   191c2:	b0 a9       	ldd	r27, Z+48	; 0x30
   191c4:	ba 2f       	mov	r27, r26
   191c6:	a9 2f       	mov	r26, r25
   191c8:	98 2f       	mov	r25, r24
   191ca:	88 27       	eor	r24, r24
   191cc:	0d 2c       	mov	r0, r13
   191ce:	00 0c       	add	r0, r0
   191d0:	ee 08       	sbc	r14, r14
   191d2:	ff 08       	sbc	r15, r15
   191d4:	35 e0       	ldi	r19, 0x05	; 5
   191d6:	cc 0c       	add	r12, r12
   191d8:	dd 1c       	adc	r13, r13
   191da:	ee 1c       	adc	r14, r14
   191dc:	ff 1c       	adc	r15, r15
   191de:	3a 95       	dec	r19
   191e0:	d1 f7       	brne	.-12     	; 0x191d6 <lif_writedirindex+0x6e>
   191e2:	c8 0e       	add	r12, r24
   191e4:	d9 1e       	adc	r13, r25
   191e6:	ea 1e       	adc	r14, r26
   191e8:	fb 1e       	adc	r15, r27
   191ea:	be 01       	movw	r22, r28
   191ec:	6f 5f       	subi	r22, 0xFF	; 255
   191ee:	7f 4f       	sbci	r23, 0xFF	; 255
   191f0:	c5 01       	movw	r24, r10
   191f2:	97 d8       	rcall	.-3794   	; 0x18322 <lif_dir2str>
   191f4:	00 e2       	ldi	r16, 0x20	; 32
   191f6:	10 e0       	ldi	r17, 0x00	; 0
   191f8:	a7 01       	movw	r20, r14
   191fa:	96 01       	movw	r18, r12
   191fc:	be 01       	movw	r22, r28
   191fe:	6f 5f       	subi	r22, 0xFF	; 255
   19200:	7f 4f       	sbci	r23, 0xFF	; 255
   19202:	c5 01       	movw	r24, r10
   19204:	0e 94 46 bf 	call	0x17e8c	; 0x17e8c <lif_write>
   19208:	31 e0       	ldi	r19, 0x01	; 1
   1920a:	20 e0       	ldi	r18, 0x00	; 0
   1920c:	80 97       	sbiw	r24, 0x20	; 32
   1920e:	0c f4       	brge	.+2      	; 0x19212 <lif_writedirindex+0xaa>
   19210:	30 e0       	ldi	r19, 0x00	; 0
   19212:	e3 2e       	mov	r14, r19
   19214:	f2 2e       	mov	r15, r18
   19216:	c7 01       	movw	r24, r14
   19218:	a0 96       	adiw	r28, 0x20	; 32
   1921a:	ea e0       	ldi	r30, 0x0A	; 10
   1921c:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__epilogue_restores__+0x10>

00019220 <lif_writedirEOF>:
   19220:	0f 93       	push	r16
   19222:	1f 93       	push	r17
   19224:	cf 93       	push	r28
   19226:	df 93       	push	r29
   19228:	ec 01       	movw	r28, r24
   1922a:	8b 01       	movw	r16, r22
   1922c:	33 da       	rcall	.-2970   	; 0x18694 <lif_dir_clear>
   1922e:	fe 01       	movw	r30, r28
   19230:	e6 5a       	subi	r30, 0xA6	; 166
   19232:	ff 4f       	sbci	r31, 0xFF	; 255
   19234:	8f ef       	ldi	r24, 0xFF	; 255
   19236:	9f ef       	ldi	r25, 0xFF	; 255
   19238:	91 83       	std	Z+1, r25	; 0x01
   1923a:	80 83       	st	Z, r24
   1923c:	1b a3       	std	Y+35, r17	; 0x23
   1923e:	0a a3       	std	Y+34, r16	; 0x22
   19240:	b8 01       	movw	r22, r16
   19242:	ce 01       	movw	r24, r28
   19244:	91 df       	rcall	.-222    	; 0x19168 <lif_writedirindex>
   19246:	df 91       	pop	r29
   19248:	cf 91       	pop	r28
   1924a:	1f 91       	pop	r17
   1924c:	0f 91       	pop	r16
   1924e:	08 95       	ret

00019250 <lif_updatefree>:
/// @brief Update free space
/// @parameter[in] *LIF: LIF structure
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
   19250:	2f 92       	push	r2
   19252:	3f 92       	push	r3
   19254:	4f 92       	push	r4
   19256:	5f 92       	push	r5
   19258:	6f 92       	push	r6
   1925a:	7f 92       	push	r7
   1925c:	8f 92       	push	r8
   1925e:	af 92       	push	r10
   19260:	bf 92       	push	r11
   19262:	cf 92       	push	r12
   19264:	df 92       	push	r13
   19266:	ef 92       	push	r14
   19268:	ff 92       	push	r15
   1926a:	0f 93       	push	r16
   1926c:	1f 93       	push	r17
   1926e:	cf 93       	push	r28
   19270:	df 93       	push	r29
   19272:	cd b7       	in	r28, 0x3d	; 61
   19274:	de b7       	in	r29, 0x3e	; 62
   19276:	2f 97       	sbiw	r28, 0x0f	; 15
   19278:	0f b6       	in	r0, 0x3f	; 63
   1927a:	f8 94       	cli
   1927c:	de bf       	out	0x3e, r29	; 62
   1927e:	0f be       	out	0x3f, r0	; 63
   19280:	cd bf       	out	0x3d, r28	; 61
   19282:	9f 87       	std	Y+15, r25	; 0x0f
   19284:	8e 87       	std	Y+14, r24	; 0x0e
    int index = 0;
    int purgeindex = -1;

// Start of free space
    uint32_t start = LIF->filestart;
   19286:	fc 01       	movw	r30, r24
   19288:	24 84       	ldd	r2, Z+12	; 0x0c
   1928a:	35 84       	ldd	r3, Z+13	; 0x0d
   1928c:	46 84       	ldd	r4, Z+14	; 0x0e
   1928e:	57 84       	ldd	r5, Z+15	; 0x0f
// Free sectors
    LIF->freesectors = LIF->filesectors;
   19290:	80 89       	ldd	r24, Z+16	; 0x10
   19292:	91 89       	ldd	r25, Z+17	; 0x11
   19294:	a2 89       	ldd	r26, Z+18	; 0x12
   19296:	b3 89       	ldd	r27, Z+19	; 0x13
   19298:	80 8f       	std	Z+24, r24	; 0x18
   1929a:	91 8f       	std	Z+25, r25	; 0x19
   1929c:	a2 8f       	std	Z+26, r26	; 0x1a
   1929e:	b3 8f       	std	Z+27, r27	; 0x1b
// Used sectors
    LIF->usedsectors = 0;
   192a0:	14 8a       	std	Z+20, r1	; 0x14
   192a2:	15 8a       	std	Z+21, r1	; 0x15
   192a4:	16 8a       	std	Z+22, r1	; 0x16
   192a6:	17 8a       	std	Z+23, r1	; 0x17
// Purged files
    LIF->purged= 0;
   192a8:	17 8e       	std	Z+31, r1	; 0x1f
   192aa:	16 8e       	std	Z+30, r1	; 0x1e
// Files
    LIF->files = 0;
   192ac:	15 8e       	std	Z+29, r1	; 0x1d
   192ae:	14 8e       	std	Z+28, r1	; 0x1c
// Director pointer
    LIF->dirindex = 0;
   192b0:	11 a2       	std	Z+33, r1	; 0x21
   192b2:	10 a2       	std	Z+32, r1	; 0x20
// Directory EOF record
    LIF->EOFindex = 0;
   192b4:	13 a2       	std	Z+35, r1	; 0x23
   192b6:	12 a2       	std	Z+34, r1	; 0x22
   192b8:	cc 24       	eor	r12, r12
   192ba:	c3 94       	inc	r12
   192bc:	d1 2c       	mov	r13, r1
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
    int index = 0;
    int purgeindex = -1;
   192be:	0f ef       	ldi	r16, 0xFF	; 255
   192c0:	1f ef       	ldi	r17, 0xFF	; 255
        if( !lif_readdirindex(LIF,index) )
        {
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
   192c2:	e6 5a       	subi	r30, 0xA6	; 166
   192c4:	ff 4f       	sbci	r31, 0xFF	; 255
   192c6:	f9 87       	std	Y+9, r31	; 0x09
   192c8:	e8 87       	std	Y+8, r30	; 0x08
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   192ca:	ae 84       	ldd	r10, Y+14	; 0x0e
   192cc:	bf 84       	ldd	r11, Y+15	; 0x0f
   192ce:	fc e5       	ldi	r31, 0x5C	; 92
   192d0:	af 0e       	add	r10, r31
   192d2:	b1 1c       	adc	r11, r1
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   192d4:	8e 85       	ldd	r24, Y+14	; 0x0e
   192d6:	9f 85       	ldd	r25, Y+15	; 0x0f
   192d8:	80 5a       	subi	r24, 0xA0	; 160
   192da:	9f 4f       	sbci	r25, 0xFF	; 255
   192dc:	9b 87       	std	Y+11, r25	; 0x0b
   192de:	8a 87       	std	Y+10, r24	; 0x0a
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   192e0:	ee 85       	ldd	r30, Y+14	; 0x0e
   192e2:	ff 85       	ldd	r31, Y+15	; 0x0f
   192e4:	e1 5b       	subi	r30, 0xB1	; 177
   192e6:	ff 4f       	sbci	r31, 0xFF	; 255
   192e8:	fd 87       	std	Y+13, r31	; 0x0d
   192ea:	ec 87       	std	Y+12, r30	; 0x0c
   192ec:	8b e1       	ldi	r24, 0x1B	; 27
   192ee:	99 e3       	ldi	r25, 0x39	; 57
   192f0:	3c 01       	movw	r6, r24
   192f2:	81 2c       	mov	r8, r1
   192f4:	76 01       	movw	r14, r12
   192f6:	21 e0       	ldi	r18, 0x01	; 1
   192f8:	e2 1a       	sub	r14, r18
   192fa:	f1 08       	sbc	r15, r1
    LIF->EOFindex = 0;

/// Update free
    while(1)
    {
        if( !lif_readdirindex(LIF,index) )
   192fc:	b7 01       	movw	r22, r14
   192fe:	8e 85       	ldd	r24, Y+14	; 0x0e
   19300:	9f 85       	ldd	r25, Y+15	; 0x0f
   19302:	cb de       	rcall	.-618    	; 0x1909a <lif_readdirindex>
   19304:	89 2b       	or	r24, r25
   19306:	19 f4       	brne	.+6      	; 0x1930e <lif_updatefree+0xbe>
        {
            return(NULL);
   19308:	80 e0       	ldi	r24, 0x00	; 0
   1930a:	90 e0       	ldi	r25, 0x00	; 0
   1930c:	93 c0       	rjmp	.+294    	; 0x19434 <lif_updatefree+0x1e4>
        }

        if(LIF->DIR.FileType == 0xffff)
   1930e:	e8 85       	ldd	r30, Y+8	; 0x08
   19310:	f9 85       	ldd	r31, Y+9	; 0x09
   19312:	80 81       	ld	r24, Z
   19314:	91 81       	ldd	r25, Z+1	; 0x01
   19316:	8f 3f       	cpi	r24, 0xFF	; 255
   19318:	ff ef       	ldi	r31, 0xFF	; 255
   1931a:	9f 07       	cpc	r25, r31
   1931c:	c1 f4       	brne	.+48     	; 0x1934e <lif_updatefree+0xfe>
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
            {
                LIF->EOFindex = purgeindex;
   1931e:	ee 85       	ldd	r30, Y+14	; 0x0e
   19320:	ff 85       	ldd	r31, Y+15	; 0x0f
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
   19322:	0f 3f       	cpi	r16, 0xFF	; 255
   19324:	2f ef       	ldi	r18, 0xFF	; 255
   19326:	12 07       	cpc	r17, r18
   19328:	09 f4       	brne	.+2      	; 0x1932c <lif_updatefree+0xdc>
   1932a:	7a c0       	rjmp	.+244    	; 0x19420 <lif_updatefree+0x1d0>
            {
                LIF->EOFindex = purgeindex;
   1932c:	13 a3       	std	Z+35, r17	; 0x23
   1932e:	02 a3       	std	Z+34, r16	; 0x22

// Adjust purged file count
                LIF->purged -= (index - purgeindex);
   19330:	e0 1a       	sub	r14, r16
   19332:	f1 0a       	sbc	r15, r17
   19334:	86 8d       	ldd	r24, Z+30	; 0x1e
   19336:	97 8d       	ldd	r25, Z+31	; 0x1f
   19338:	8e 19       	sub	r24, r14
   1933a:	9f 09       	sbc	r25, r15
   1933c:	97 8f       	std	Z+31, r25	; 0x1f
   1933e:	86 8f       	std	Z+30, r24	; 0x1e
// update EOF
                if(!lif_writedirEOF(LIF,purgeindex))
   19340:	b8 01       	movw	r22, r16
   19342:	cf 01       	movw	r24, r30
   19344:	6d df       	rcall	.-294    	; 0x19220 <lif_writedirEOF>
   19346:	89 2b       	or	r24, r25
   19348:	09 f0       	breq	.+2      	; 0x1934c <lif_updatefree+0xfc>
   1934a:	6c c0       	rjmp	.+216    	; 0x19424 <lif_updatefree+0x1d4>
   1934c:	dd cf       	rjmp	.-70     	; 0x19308 <lif_updatefree+0xb8>
                    return(NULL);
                }
            }
            break;
        }
        if(LIF->DIR.FileType == 0)
   1934e:	89 2b       	or	r24, r25
   19350:	81 f4       	brne	.+32     	; 0x19372 <lif_updatefree+0x122>
        {
            if(purgeindex == -1)
   19352:	0f 3f       	cpi	r16, 0xFF	; 255
   19354:	ff ef       	ldi	r31, 0xFF	; 255
   19356:	1f 07       	cpc	r17, r31
   19358:	09 f4       	brne	.+2      	; 0x1935c <lif_updatefree+0x10c>
   1935a:	87 01       	movw	r16, r14
                purgeindex = index;
            LIF->purged++;
   1935c:	ee 85       	ldd	r30, Y+14	; 0x0e
   1935e:	ff 85       	ldd	r31, Y+15	; 0x0f
   19360:	86 8d       	ldd	r24, Z+30	; 0x1e
   19362:	97 8d       	ldd	r25, Z+31	; 0x1f
   19364:	01 96       	adiw	r24, 0x01	; 1
   19366:	97 8f       	std	Z+31, r25	; 0x1f
   19368:	86 8f       	std	Z+30, r24	; 0x1e
   1936a:	ff ef       	ldi	r31, 0xFF	; 255
   1936c:	cf 1a       	sub	r12, r31
   1936e:	df 0a       	sbc	r13, r31
   19370:	c1 cf       	rjmp	.-126    	; 0x192f4 <lif_updatefree+0xa4>
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   19372:	f5 01       	movw	r30, r10
   19374:	80 81       	ld	r24, Z
   19376:	91 81       	ldd	r25, Z+1	; 0x01
   19378:	a2 81       	ldd	r26, Z+2	; 0x02
   1937a:	b3 81       	ldd	r27, Z+3	; 0x03
   1937c:	82 15       	cp	r24, r2
   1937e:	93 05       	cpc	r25, r3
   19380:	a4 05       	cpc	r26, r4
   19382:	b5 05       	cpc	r27, r5
   19384:	c8 f4       	brcc	.+50     	; 0x193b8 <lif_updatefree+0x168>
        {
            if(debuglevel & LIF_DEBUG)
   19386:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1938a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1938e:	92 ff       	sbrs	r25, 2
   19390:	13 c0       	rjmp	.+38     	; 0x193b8 <lif_updatefree+0x168>
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   19392:	8c 85       	ldd	r24, Y+12	; 0x0c
   19394:	9d 85       	ldd	r25, Y+13	; 0x0d
   19396:	ed b7       	in	r30, 0x3d	; 61
   19398:	fe b7       	in	r31, 0x3e	; 62
   1939a:	97 83       	std	Z+7, r25	; 0x07
   1939c:	86 83       	std	Z+6, r24	; 0x06
   1939e:	ee 85       	ldd	r30, Y+14	; 0x0e
   193a0:	ff 85       	ldd	r31, Y+15	; 0x0f
   193a2:	80 81       	ld	r24, Z
   193a4:	91 81       	ldd	r25, Z+1	; 0x01
   193a6:	ed b7       	in	r30, 0x3d	; 61
   193a8:	fe b7       	in	r31, 0x3e	; 62
   193aa:	95 83       	std	Z+5, r25	; 0x05
   193ac:	84 83       	std	Z+4, r24	; 0x04
   193ae:	61 82       	std	Z+1, r6	; 0x01
   193b0:	72 82       	std	Z+2, r7	; 0x02
   193b2:	83 82       	std	Z+3, r8	; 0x03
   193b4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   193b8:	ea 85       	ldd	r30, Y+10	; 0x0a
   193ba:	fb 85       	ldd	r31, Y+11	; 0x0b
   193bc:	80 81       	ld	r24, Z
   193be:	91 81       	ldd	r25, Z+1	; 0x01
   193c0:	a2 81       	ldd	r26, Z+2	; 0x02
   193c2:	b3 81       	ldd	r27, Z+3	; 0x03
   193c4:	ee 85       	ldd	r30, Y+14	; 0x0e
   193c6:	ff 85       	ldd	r31, Y+15	; 0x0f
   193c8:	44 89       	ldd	r20, Z+20	; 0x14
   193ca:	55 89       	ldd	r21, Z+21	; 0x15
   193cc:	66 89       	ldd	r22, Z+22	; 0x16
   193ce:	77 89       	ldd	r23, Z+23	; 0x17
   193d0:	48 0f       	add	r20, r24
   193d2:	59 1f       	adc	r21, r25
   193d4:	6a 1f       	adc	r22, r26
   193d6:	7b 1f       	adc	r23, r27
   193d8:	44 8b       	std	Z+20, r20	; 0x14
   193da:	55 8b       	std	Z+21, r21	; 0x15
   193dc:	66 8b       	std	Z+22, r22	; 0x16
   193de:	77 8b       	std	Z+23, r23	; 0x17
        LIF->freesectors -= LIF->DIR.FileSectors;
   193e0:	40 8d       	ldd	r20, Z+24	; 0x18
   193e2:	51 8d       	ldd	r21, Z+25	; 0x19
   193e4:	62 8d       	ldd	r22, Z+26	; 0x1a
   193e6:	73 8d       	ldd	r23, Z+27	; 0x1b
   193e8:	48 1b       	sub	r20, r24
   193ea:	59 0b       	sbc	r21, r25
   193ec:	6a 0b       	sbc	r22, r26
   193ee:	7b 0b       	sbc	r23, r27
   193f0:	40 8f       	std	Z+24, r20	; 0x18
   193f2:	51 8f       	std	Z+25, r21	; 0x19
   193f4:	62 8f       	std	Z+26, r22	; 0x1a
   193f6:	73 8f       	std	Z+27, r23	; 0x1b
        LIF->files++;
   193f8:	24 8d       	ldd	r18, Z+28	; 0x1c
   193fa:	35 8d       	ldd	r19, Z+29	; 0x1d
   193fc:	2f 5f       	subi	r18, 0xFF	; 255
   193fe:	3f 4f       	sbci	r19, 0xFF	; 255
   19400:	35 8f       	std	Z+29, r19	; 0x1d
   19402:	24 8f       	std	Z+28, r18	; 0x1c
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19404:	f5 01       	movw	r30, r10
   19406:	40 81       	ld	r20, Z
   19408:	51 81       	ldd	r21, Z+1	; 0x01
   1940a:	62 81       	ldd	r22, Z+2	; 0x02
   1940c:	73 81       	ldd	r23, Z+3	; 0x03
   1940e:	1c 01       	movw	r2, r24
   19410:	2d 01       	movw	r4, r26
   19412:	24 0e       	add	r2, r20
   19414:	35 1e       	adc	r3, r21
   19416:	46 1e       	adc	r4, r22
   19418:	57 1e       	adc	r5, r23
                purgeindex = index;
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
   1941a:	0f ef       	ldi	r16, 0xFF	; 255
   1941c:	1f ef       	ldi	r17, 0xFF	; 255
   1941e:	a5 cf       	rjmp	.-182    	; 0x1936a <lif_updatefree+0x11a>
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
   19420:	f3 a2       	std	Z+35, r15	; 0x23
   19422:	e2 a2       	std	Z+34, r14	; 0x22
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   19424:	8f ef       	ldi	r24, 0xFF	; 255
   19426:	9f ef       	ldi	r25, 0xFF	; 255
   19428:	ee 85       	ldd	r30, Y+14	; 0x0e
   1942a:	ff 85       	ldd	r31, Y+15	; 0x0f
   1942c:	91 a3       	std	Z+33, r25	; 0x21
   1942e:	80 a3       	std	Z+32, r24	; 0x20
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
    }
// rewind
    lif_rewinddir(LIF);
    return(LIF);
   19430:	8e 85       	ldd	r24, Y+14	; 0x0e
   19432:	9f 85       	ldd	r25, Y+15	; 0x0f
}
   19434:	2f 96       	adiw	r28, 0x0f	; 15
   19436:	0f b6       	in	r0, 0x3f	; 63
   19438:	f8 94       	cli
   1943a:	de bf       	out	0x3e, r29	; 62
   1943c:	0f be       	out	0x3f, r0	; 63
   1943e:	cd bf       	out	0x3d, r28	; 61
   19440:	df 91       	pop	r29
   19442:	cf 91       	pop	r28
   19444:	1f 91       	pop	r17
   19446:	0f 91       	pop	r16
   19448:	ff 90       	pop	r15
   1944a:	ef 90       	pop	r14
   1944c:	df 90       	pop	r13
   1944e:	cf 90       	pop	r12
   19450:	bf 90       	pop	r11
   19452:	af 90       	pop	r10
   19454:	8f 90       	pop	r8
   19456:	7f 90       	pop	r7
   19458:	6f 90       	pop	r6
   1945a:	5f 90       	pop	r5
   1945c:	4f 90       	pop	r4
   1945e:	3f 90       	pop	r3
   19460:	2f 90       	pop	r2
   19462:	08 95       	ret

00019464 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   19464:	a9 e2       	ldi	r26, 0x29	; 41
   19466:	b1 e0       	ldi	r27, 0x01	; 1
   19468:	e8 e3       	ldi	r30, 0x38	; 56
   1946a:	fa ec       	ldi	r31, 0xCA	; 202
   1946c:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
   19470:	4c 01       	movw	r8, r24
   19472:	3b 01       	movw	r6, r22
   19474:	19 01       	movw	r2, r18
   19476:	2a 01       	movw	r4, r20
   19478:	ca 5d       	subi	r28, 0xDA	; 218
   1947a:	de 4f       	sbci	r29, 0xFE	; 254
   1947c:	e8 82       	st	Y, r14
   1947e:	f9 82       	std	Y+1, r15	; 0x01
   19480:	0a 83       	std	Y+2, r16	; 0x02
   19482:	1b 83       	std	Y+3, r17	; 0x03
   19484:	c6 52       	subi	r28, 0x26	; 38
   19486:	d1 40       	sbci	r29, 0x01	; 1
   19488:	c2 5e       	subi	r28, 0xE2	; 226
   1948a:	de 4f       	sbci	r29, 0xFE	; 254
   1948c:	a8 82       	st	Y, r10
   1948e:	b9 82       	std	Y+1, r11	; 0x01
   19490:	ca 82       	std	Y+2, r12	; 0x02
   19492:	db 82       	std	Y+3, r13	; 0x03
   19494:	ce 51       	subi	r28, 0x1E	; 30
   19496:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   19498:	80 e0       	ldi	r24, 0x00	; 0
   1949a:	90 e0       	ldi	r25, 0x00	; 0
   1949c:	0e 94 05 36 	call	0x6c0a	; 0x6c0a <time>
   194a0:	5b 01       	movw	r10, r22
   194a2:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   194a4:	64 e7       	ldi	r22, 0x74	; 116
   194a6:	70 e0       	ldi	r23, 0x00	; 0
   194a8:	80 e0       	ldi	r24, 0x00	; 0
   194aa:	90 e0       	ldi	r25, 0x00	; 0
   194ac:	0e 94 05 be 	call	0x17c0a	; 0x17c0a <lif_calloc>
   194b0:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   194b2:	89 2b       	or	r24, r25
   194b4:	09 f4       	brne	.+2      	; 0x194b8 <lif_create_volume+0x54>
   194b6:	b6 c2       	rjmp	.+1388   	; 0x19a24 <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   194b8:	c2 5e       	subi	r28, 0xE2	; 226
   194ba:	de 4f       	sbci	r29, 0xFE	; 254
   194bc:	28 81       	ld	r18, Y
   194be:	39 81       	ldd	r19, Y+1	; 0x01
   194c0:	4a 81       	ldd	r20, Y+2	; 0x02
   194c2:	5b 81       	ldd	r21, Y+3	; 0x03
   194c4:	ce 51       	subi	r28, 0x1E	; 30
   194c6:	d1 40       	sbci	r29, 0x01	; 1
   194c8:	ed b7       	in	r30, 0x3d	; 61
   194ca:	fe b7       	in	r31, 0x3e	; 62
   194cc:	20 8b       	std	Z+16, r18	; 0x10
   194ce:	31 8b       	std	Z+17, r19	; 0x11
   194d0:	42 8b       	std	Z+18, r20	; 0x12
   194d2:	53 8b       	std	Z+19, r21	; 0x13
   194d4:	ca 5d       	subi	r28, 0xDA	; 218
   194d6:	de 4f       	sbci	r29, 0xFE	; 254
   194d8:	28 81       	ld	r18, Y
   194da:	39 81       	ldd	r19, Y+1	; 0x01
   194dc:	4a 81       	ldd	r20, Y+2	; 0x02
   194de:	5b 81       	ldd	r21, Y+3	; 0x03
   194e0:	c6 52       	subi	r28, 0x26	; 38
   194e2:	d1 40       	sbci	r29, 0x01	; 1
   194e4:	24 87       	std	Z+12, r18	; 0x0c
   194e6:	35 87       	std	Z+13, r19	; 0x0d
   194e8:	46 87       	std	Z+14, r20	; 0x0e
   194ea:	57 87       	std	Z+15, r21	; 0x0f
   194ec:	20 86       	std	Z+8, r2	; 0x08
   194ee:	31 86       	std	Z+9, r3	; 0x09
   194f0:	42 86       	std	Z+10, r4	; 0x0a
   194f2:	53 86       	std	Z+11, r5	; 0x0b
   194f4:	77 82       	std	Z+7, r7	; 0x07
   194f6:	66 82       	std	Z+6, r6	; 0x06
   194f8:	95 82       	std	Z+5, r9	; 0x05
   194fa:	84 82       	std	Z+4, r8	; 0x04
   194fc:	86 ef       	ldi	r24, 0xF6	; 246
   194fe:	99 e3       	ldi	r25, 0x39	; 57
   19500:	a0 e0       	ldi	r26, 0x00	; 0
   19502:	81 83       	std	Z+1, r24	; 0x01
   19504:	92 83       	std	Z+2, r25	; 0x02
   19506:	a3 83       	std	Z+3, r26	; 0x03
   19508:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   1950c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19510:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19514:	92 ff       	sbrs	r25, 2
   19516:	04 c0       	rjmp	.+8      	; 0x19520 <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   19518:	60 e3       	ldi	r22, 0x30	; 48
   1951a:	76 e1       	ldi	r23, 0x16	; 22
   1951c:	c7 01       	movw	r24, r14
   1951e:	c9 d8       	rcall	.-3694   	; 0x186b2 <lif_dump_vol>

    lif_image_clear(LIF);
   19520:	c7 01       	movw	r24, r14
   19522:	b2 d8       	rcall	.-3740   	; 0x18688 <lif_image_clear>

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   19524:	80 e0       	ldi	r24, 0x00	; 0
   19526:	90 e8       	ldi	r25, 0x80	; 128
   19528:	f7 01       	movw	r30, r14
   1952a:	95 a3       	std	Z+37, r25	; 0x25
   1952c:	84 a3       	std	Z+36, r24	; 0x24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   1952e:	46 e0       	ldi	r20, 0x06	; 6
   19530:	50 e0       	ldi	r21, 0x00	; 0
   19532:	b3 01       	movw	r22, r6
   19534:	c7 01       	movw	r24, r14
   19536:	86 96       	adiw	r24, 0x26	; 38
   19538:	0e 94 48 c0 	call	0x18090	; 0x18090 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   1953c:	f7 01       	movw	r30, r14
   1953e:	25 a6       	std	Z+45, r2	; 0x2d
   19540:	36 a6       	std	Z+46, r3	; 0x2e
   19542:	47 a6       	std	Z+47, r4	; 0x2f
   19544:	50 aa       	std	Z+48, r5	; 0x30
    LIF->VOL.DirSectors = dirsectors;
   19546:	ca 5d       	subi	r28, 0xDA	; 218
   19548:	de 4f       	sbci	r29, 0xFE	; 254
   1954a:	28 81       	ld	r18, Y
   1954c:	39 81       	ldd	r19, Y+1	; 0x01
   1954e:	4a 81       	ldd	r20, Y+2	; 0x02
   19550:	5b 81       	ldd	r21, Y+3	; 0x03
   19552:	c6 52       	subi	r28, 0x26	; 38
   19554:	d1 40       	sbci	r29, 0x01	; 1
   19556:	25 ab       	std	Z+53, r18	; 0x35
   19558:	36 ab       	std	Z+54, r19	; 0x36
   1955a:	47 ab       	std	Z+55, r20	; 0x37
   1955c:	50 af       	std	Z+56, r21	; 0x38
    LIF->VOL.System3000LIFid = 0x1000;
   1955e:	80 e0       	ldi	r24, 0x00	; 0
   19560:	90 e1       	ldi	r25, 0x10	; 16
   19562:	92 ab       	std	Z+50, r25	; 0x32
   19564:	81 ab       	std	Z+49, r24	; 0x31
    LIF->VOL.tracks_per_side = 0;
   19566:	fd 96       	adiw	r30, 0x3d	; 61
   19568:	10 82       	st	Z, r1
   1956a:	11 82       	std	Z+1, r1	; 0x01
   1956c:	12 82       	std	Z+2, r1	; 0x02
   1956e:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sides = 0;
   19570:	34 96       	adiw	r30, 0x04	; 4
   19572:	10 82       	st	Z, r1
   19574:	11 82       	std	Z+1, r1	; 0x01
   19576:	12 82       	std	Z+2, r1	; 0x02
   19578:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sectors_per_track = 0;
   1957a:	34 96       	adiw	r30, 0x04	; 4
   1957c:	10 82       	st	Z, r1
   1957e:	11 82       	std	Z+1, r1	; 0x01
   19580:	12 82       	std	Z+2, r1	; 0x02
   19582:	13 82       	std	Z+3, r1	; 0x03
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19584:	a7 01       	movw	r20, r14
   19586:	47 5b       	subi	r20, 0xB7	; 183
   19588:	5f 4f       	sbci	r21, 0xFF	; 255
   1958a:	c6 01       	movw	r24, r12
   1958c:	b5 01       	movw	r22, r10
   1958e:	0e 94 6d c2 	call	0x184da	; 0x184da <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   19592:	c4 01       	movw	r24, r8
   19594:	0e 94 50 be 	call	0x17ca0	; 0x17ca0 <lif_stralloc>
   19598:	d7 01       	movw	r26, r14
   1959a:	8d 93       	st	X+, r24
   1959c:	9c 93       	st	X, r25
    if(LIF->name == NULL)
   1959e:	89 2b       	or	r24, r25
   195a0:	09 f4       	brne	.+2      	; 0x195a4 <lif_create_volume+0x140>
   195a2:	35 c2       	rjmp	.+1130   	; 0x19a0e <lif_create_volume+0x5aa>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   195a4:	c2 5e       	subi	r28, 0xE2	; 226
   195a6:	de 4f       	sbci	r29, 0xFE	; 254
   195a8:	28 81       	ld	r18, Y
   195aa:	39 81       	ldd	r19, Y+1	; 0x01
   195ac:	4a 81       	ldd	r20, Y+2	; 0x02
   195ae:	5b 81       	ldd	r21, Y+3	; 0x03
   195b0:	ce 51       	subi	r28, 0x1E	; 30
   195b2:	d1 40       	sbci	r29, 0x01	; 1
   195b4:	f7 01       	movw	r30, r14
   195b6:	20 8b       	std	Z+16, r18	; 0x10
   195b8:	31 8b       	std	Z+17, r19	; 0x11
   195ba:	42 8b       	std	Z+18, r20	; 0x12
   195bc:	53 8b       	std	Z+19, r21	; 0x13
    LIF->filestart = dirstart + dirsectors;
   195be:	ca 5d       	subi	r28, 0xDA	; 218
   195c0:	de 4f       	sbci	r29, 0xFE	; 254
   195c2:	88 81       	ld	r24, Y
   195c4:	99 81       	ldd	r25, Y+1	; 0x01
   195c6:	aa 81       	ldd	r26, Y+2	; 0x02
   195c8:	bb 81       	ldd	r27, Y+3	; 0x03
   195ca:	c6 52       	subi	r28, 0x26	; 38
   195cc:	d1 40       	sbci	r29, 0x01	; 1
   195ce:	82 0d       	add	r24, r2
   195d0:	93 1d       	adc	r25, r3
   195d2:	a4 1d       	adc	r26, r4
   195d4:	b5 1d       	adc	r27, r5
   195d6:	84 87       	std	Z+12, r24	; 0x0c
   195d8:	95 87       	std	Z+13, r25	; 0x0d
   195da:	a6 87       	std	Z+14, r26	; 0x0e
   195dc:	b7 87       	std	Z+15, r27	; 0x0f
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   195de:	82 0f       	add	r24, r18
   195e0:	93 1f       	adc	r25, r19
   195e2:	a4 1f       	adc	r26, r20
   195e4:	b5 1f       	adc	r27, r21
   195e6:	84 83       	std	Z+4, r24	; 0x04
   195e8:	95 83       	std	Z+5, r25	; 0x05
   195ea:	a6 83       	std	Z+6, r26	; 0x06
   195ec:	b7 83       	std	Z+7, r27	; 0x07
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   195ee:	ba 2f       	mov	r27, r26
   195f0:	a9 2f       	mov	r26, r25
   195f2:	98 2f       	mov	r25, r24
   195f4:	88 27       	eor	r24, r24
   195f6:	80 87       	std	Z+8, r24	; 0x08
   195f8:	91 87       	std	Z+9, r25	; 0x09
   195fa:	a2 87       	std	Z+10, r26	; 0x0a
   195fc:	b3 87       	std	Z+11, r27	; 0x0b
    LIF->freesectors = LIF->filesectors;
   195fe:	20 8f       	std	Z+24, r18	; 0x18
   19600:	31 8f       	std	Z+25, r19	; 0x19
   19602:	42 8f       	std	Z+26, r20	; 0x1a
   19604:	53 8f       	std	Z+27, r21	; 0x1b
    LIF->usedsectors = 0;
   19606:	14 8a       	std	Z+20, r1	; 0x14
   19608:	15 8a       	std	Z+21, r1	; 0x15
   1960a:	16 8a       	std	Z+22, r1	; 0x16
   1960c:	17 8a       	std	Z+23, r1	; 0x17
    LIF->files = 0;
   1960e:	15 8e       	std	Z+29, r1	; 0x1d
   19610:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->purged = 0;
   19612:	17 8e       	std	Z+31, r1	; 0x1f
   19614:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->dirindex = 0;
   19616:	11 a2       	std	Z+33, r1	; 0x21
   19618:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1961a:	13 a2       	std	Z+35, r1	; 0x23
   1961c:	12 a2       	std	Z+34, r1	; 0x22

    memset(buffer,0,LIF_SECTOR_SIZE);
   1961e:	61 2c       	mov	r6, r1
   19620:	77 24       	eor	r7, r7
   19622:	73 94       	inc	r7
   19624:	9e 01       	movw	r18, r28
   19626:	2c 5e       	subi	r18, 0xEC	; 236
   19628:	3f 4f       	sbci	r19, 0xFF	; 255
   1962a:	49 01       	movw	r8, r18
   1962c:	d9 01       	movw	r26, r18
   1962e:	f3 01       	movw	r30, r6
   19630:	1d 92       	st	X+, r1
   19632:	31 97       	sbiw	r30, 0x01	; 1
   19634:	e9 f7       	brne	.-6      	; 0x19630 <lif_create_volume+0x1cc>

    lif_vol2str(LIF,buffer);
   19636:	b9 01       	movw	r22, r18
   19638:	c7 01       	movw	r24, r14
   1963a:	0e 94 85 c0 	call	0x1810a	; 0x1810a <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   1963e:	66 e1       	ldi	r22, 0x16	; 22
   19640:	79 e0       	ldi	r23, 0x09	; 9
   19642:	d7 01       	movw	r26, r14
   19644:	8d 91       	ld	r24, X+
   19646:	9c 91       	ld	r25, X
   19648:	0e 94 6f be 	call	0x17cde	; 0x17cde <lif_open>
   1964c:	f7 01       	movw	r30, r14
   1964e:	93 83       	std	Z+3, r25	; 0x03
   19650:	82 83       	std	Z+2, r24	; 0x02
    if(LIF->fp == NULL)
   19652:	89 2b       	or	r24, r25
   19654:	09 f4       	brne	.+2      	; 0x19658 <lif_create_volume+0x1f4>
   19656:	db c1       	rjmp	.+950    	; 0x19a0e <lif_create_volume+0x5aa>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19658:	00 e0       	ldi	r16, 0x00	; 0
   1965a:	11 e0       	ldi	r17, 0x01	; 1
   1965c:	20 e0       	ldi	r18, 0x00	; 0
   1965e:	30 e0       	ldi	r19, 0x00	; 0
   19660:	a9 01       	movw	r20, r18
   19662:	b4 01       	movw	r22, r8
   19664:	c7 01       	movw	r24, r14
   19666:	0e 94 46 bf 	call	0x17e8c	; 0x17e8c <lif_write>
   1966a:	9c 01       	movw	r18, r24
   1966c:	99 0f       	add	r25, r25
   1966e:	44 0b       	sbc	r20, r20
   19670:	55 0b       	sbc	r21, r21
   19672:	ca 5e       	subi	r28, 0xEA	; 234
   19674:	de 4f       	sbci	r29, 0xFE	; 254
   19676:	28 83       	st	Y, r18
   19678:	39 83       	std	Y+1, r19	; 0x01
   1967a:	4a 83       	std	Y+2, r20	; 0x02
   1967c:	5b 83       	std	Y+3, r21	; 0x03
   1967e:	c6 51       	subi	r28, 0x16	; 22
   19680:	d1 40       	sbci	r29, 0x01	; 1

    if(size < LIF_SECTOR_SIZE)
   19682:	2f 3f       	cpi	r18, 0xFF	; 255
   19684:	31 05       	cpc	r19, r1
   19686:	41 05       	cpc	r20, r1
   19688:	51 05       	cpc	r21, r1
   1968a:	09 f0       	breq	.+2      	; 0x1968e <lif_create_volume+0x22a>
   1968c:	0c f4       	brge	.+2      	; 0x19690 <lif_create_volume+0x22c>
   1968e:	bf c1       	rjmp	.+894    	; 0x19a0e <lif_create_volume+0x5aa>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   19690:	d4 01       	movw	r26, r8
   19692:	f3 01       	movw	r30, r6
   19694:	1d 92       	st	X+, r1
   19696:	31 97       	sbiw	r30, 0x01	; 1
   19698:	e9 f7       	brne	.-6      	; 0x19694 <lif_create_volume+0x230>

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1969a:	21 e0       	ldi	r18, 0x01	; 1
   1969c:	30 e0       	ldi	r19, 0x00	; 0
   1969e:	40 e0       	ldi	r20, 0x00	; 0
   196a0:	50 e0       	ldi	r21, 0x00	; 0
   196a2:	c6 5e       	subi	r28, 0xE6	; 230
   196a4:	de 4f       	sbci	r29, 0xFE	; 254
   196a6:	28 83       	st	Y, r18
   196a8:	39 83       	std	Y+1, r19	; 0x01
   196aa:	4a 83       	std	Y+2, r20	; 0x02
   196ac:	5b 83       	std	Y+3, r21	; 0x03
   196ae:	ca 51       	subi	r28, 0x1A	; 26
   196b0:	d1 40       	sbci	r29, 0x01	; 1
   196b2:	64 01       	movw	r12, r8
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   196b4:	89 ee       	ldi	r24, 0xE9	; 233
   196b6:	99 e3       	ldi	r25, 0x39	; 57
   196b8:	3c 01       	movw	r6, r24
   196ba:	81 2c       	mov	r8, r1
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   196bc:	c6 5e       	subi	r28, 0xE6	; 230
   196be:	de 4f       	sbci	r29, 0xFE	; 254
   196c0:	88 81       	ld	r24, Y
   196c2:	99 81       	ldd	r25, Y+1	; 0x01
   196c4:	aa 81       	ldd	r26, Y+2	; 0x02
   196c6:	bb 81       	ldd	r27, Y+3	; 0x03
   196c8:	ca 51       	subi	r28, 0x1A	; 26
   196ca:	d1 40       	sbci	r29, 0x01	; 1
   196cc:	82 15       	cp	r24, r2
   196ce:	93 05       	cpc	r25, r3
   196d0:	a4 05       	cpc	r26, r4
   196d2:	b5 05       	cpc	r27, r5
   196d4:	0c f0       	brlt	.+2      	; 0x196d8 <lif_create_volume+0x274>
   196d6:	55 c0       	rjmp	.+170    	; 0x19782 <lif_create_volume+0x31e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   196d8:	00 e0       	ldi	r16, 0x00	; 0
   196da:	11 e0       	ldi	r17, 0x01	; 1
   196dc:	ca 5e       	subi	r28, 0xEA	; 234
   196de:	de 4f       	sbci	r29, 0xFE	; 254
   196e0:	28 81       	ld	r18, Y
   196e2:	39 81       	ldd	r19, Y+1	; 0x01
   196e4:	4a 81       	ldd	r20, Y+2	; 0x02
   196e6:	5b 81       	ldd	r21, Y+3	; 0x03
   196e8:	c6 51       	subi	r28, 0x16	; 22
   196ea:	d1 40       	sbci	r29, 0x01	; 1
   196ec:	b6 01       	movw	r22, r12
   196ee:	c7 01       	movw	r24, r14
   196f0:	0e 94 46 bf 	call	0x17e8c	; 0x17e8c <lif_write>
   196f4:	09 2e       	mov	r0, r25
   196f6:	00 0c       	add	r0, r0
   196f8:	aa 0b       	sbc	r26, r26
   196fa:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   196fc:	8f 3f       	cpi	r24, 0xFF	; 255
   196fe:	91 05       	cpc	r25, r1
   19700:	a1 05       	cpc	r26, r1
   19702:	b1 05       	cpc	r27, r1
   19704:	09 f0       	breq	.+2      	; 0x19708 <lif_create_volume+0x2a4>
   19706:	0c f4       	brge	.+2      	; 0x1970a <lif_create_volume+0x2a6>
   19708:	82 c1       	rjmp	.+772    	; 0x19a0e <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1970a:	ca 5e       	subi	r28, 0xEA	; 234
   1970c:	de 4f       	sbci	r29, 0xFE	; 254
   1970e:	28 81       	ld	r18, Y
   19710:	39 81       	ldd	r19, Y+1	; 0x01
   19712:	4a 81       	ldd	r20, Y+2	; 0x02
   19714:	5b 81       	ldd	r21, Y+3	; 0x03
   19716:	c6 51       	subi	r28, 0x16	; 22
   19718:	d1 40       	sbci	r29, 0x01	; 1
   1971a:	28 0f       	add	r18, r24
   1971c:	39 1f       	adc	r19, r25
   1971e:	4a 1f       	adc	r20, r26
   19720:	5b 1f       	adc	r21, r27
   19722:	ca 5e       	subi	r28, 0xEA	; 234
   19724:	de 4f       	sbci	r29, 0xFE	; 254
   19726:	28 83       	st	Y, r18
   19728:	39 83       	std	Y+1, r19	; 0x01
   1972a:	4a 83       	std	Y+2, r20	; 0x02
   1972c:	5b 83       	std	Y+3, r21	; 0x03
   1972e:	c6 51       	subi	r28, 0x16	; 22
   19730:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
   19732:	c6 5e       	subi	r28, 0xE6	; 230
   19734:	de 4f       	sbci	r29, 0xFE	; 254
   19736:	88 81       	ld	r24, Y
   19738:	99 81       	ldd	r25, Y+1	; 0x01
   1973a:	aa 81       	ldd	r26, Y+2	; 0x02
   1973c:	bb 81       	ldd	r27, Y+3	; 0x03
   1973e:	ca 51       	subi	r28, 0x1A	; 26
   19740:	d1 40       	sbci	r29, 0x01	; 1
   19742:	ed b7       	in	r30, 0x3d	; 61
   19744:	fe b7       	in	r31, 0x3e	; 62
   19746:	84 83       	std	Z+4, r24	; 0x04
   19748:	95 83       	std	Z+5, r25	; 0x05
   1974a:	a6 83       	std	Z+6, r26	; 0x06
   1974c:	b7 83       	std	Z+7, r27	; 0x07
   1974e:	61 82       	std	Z+1, r6	; 0x01
   19750:	72 82       	std	Z+2, r7	; 0x02
   19752:	83 82       	std	Z+3, r8	; 0x03
   19754:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19758:	c6 5e       	subi	r28, 0xE6	; 230
   1975a:	de 4f       	sbci	r29, 0xFE	; 254
   1975c:	28 81       	ld	r18, Y
   1975e:	39 81       	ldd	r19, Y+1	; 0x01
   19760:	4a 81       	ldd	r20, Y+2	; 0x02
   19762:	5b 81       	ldd	r21, Y+3	; 0x03
   19764:	ca 51       	subi	r28, 0x1A	; 26
   19766:	d1 40       	sbci	r29, 0x01	; 1
   19768:	2f 5f       	subi	r18, 0xFF	; 255
   1976a:	3f 4f       	sbci	r19, 0xFF	; 255
   1976c:	4f 4f       	sbci	r20, 0xFF	; 255
   1976e:	5f 4f       	sbci	r21, 0xFF	; 255
   19770:	c6 5e       	subi	r28, 0xE6	; 230
   19772:	de 4f       	sbci	r29, 0xFE	; 254
   19774:	28 83       	st	Y, r18
   19776:	39 83       	std	Y+1, r19	; 0x01
   19778:	4a 83       	std	Y+2, r20	; 0x02
   1977a:	5b 83       	std	Y+3, r21	; 0x03
   1977c:	ca 51       	subi	r28, 0x1A	; 26
   1977e:	d1 40       	sbci	r29, 0x01	; 1
   19780:	9d cf       	rjmp	.-198    	; 0x196bc <lif_create_volume+0x258>
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   19782:	c7 01       	movw	r24, r14
   19784:	0e 94 4a c3 	call	0x18694	; 0x18694 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19788:	8f ef       	ldi	r24, 0xFF	; 255
   1978a:	9f ef       	ldi	r25, 0xFF	; 255
   1978c:	f7 01       	movw	r30, r14
   1978e:	e6 5a       	subi	r30, 0xA6	; 166
   19790:	ff 4f       	sbci	r31, 0xFF	; 255
   19792:	91 83       	std	Z+1, r25	; 0x01
   19794:	80 83       	st	Z, r24
   19796:	46 01       	movw	r8, r12
   19798:	6e 01       	movw	r12, r28
   1979a:	9c ee       	ldi	r25, 0xEC	; 236
   1979c:	c9 1a       	sub	r12, r25
   1979e:	9e ef       	ldi	r25, 0xFE	; 254
   197a0:	d9 0a       	sbc	r13, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   197a2:	b4 01       	movw	r22, r8
   197a4:	c7 01       	movw	r24, r14
   197a6:	0e 94 91 c1 	call	0x18322	; 0x18322 <lif_dir2str>
   197aa:	a0 e2       	ldi	r26, 0x20	; 32
   197ac:	8a 0e       	add	r8, r26
   197ae:	91 1c       	adc	r9, r1

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   197b0:	c8 14       	cp	r12, r8
   197b2:	d9 04       	cpc	r13, r9
   197b4:	b1 f7       	brne	.-20     	; 0x197a2 <lif_create_volume+0x33e>
   197b6:	a1 2c       	mov	r10, r1
   197b8:	b1 2c       	mov	r11, r1
   197ba:	65 01       	movw	r12, r10
   197bc:	fe 01       	movw	r30, r28
   197be:	74 96       	adiw	r30, 0x14	; 20
   197c0:	cc 5e       	subi	r28, 0xEC	; 236
   197c2:	de 4f       	sbci	r29, 0xFE	; 254
   197c4:	f9 83       	std	Y+1, r31	; 0x01
   197c6:	e8 83       	st	Y, r30
   197c8:	c4 51       	subi	r28, 0x14	; 20
   197ca:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   197cc:	84 e6       	ldi	r24, 0x64	; 100
   197ce:	28 2e       	mov	r2, r24
   197d0:	31 2c       	mov	r3, r1
   197d2:	41 2c       	mov	r4, r1
   197d4:	51 2c       	mov	r5, r1
            printf("\tWrote: %ld\r", count);
   197d6:	8c ed       	ldi	r24, 0xDC	; 220
   197d8:	99 e3       	ldi	r25, 0x39	; 57
   197da:	3c 01       	movw	r6, r24
   197dc:	81 2c       	mov	r8, r1
   197de:	c6 5e       	subi	r28, 0xE6	; 230
   197e0:	de 4f       	sbci	r29, 0xFE	; 254
   197e2:	28 81       	ld	r18, Y
   197e4:	39 81       	ldd	r19, Y+1	; 0x01
   197e6:	4a 81       	ldd	r20, Y+2	; 0x02
   197e8:	5b 81       	ldd	r21, Y+3	; 0x03
   197ea:	ca 51       	subi	r28, 0x1A	; 26
   197ec:	d1 40       	sbci	r29, 0x01	; 1
   197ee:	2a 0d       	add	r18, r10
   197f0:	3b 1d       	adc	r19, r11
   197f2:	4c 1d       	adc	r20, r12
   197f4:	5d 1d       	adc	r21, r13
   197f6:	ce 5d       	subi	r28, 0xDE	; 222
   197f8:	de 4f       	sbci	r29, 0xFE	; 254
   197fa:	28 83       	st	Y, r18
   197fc:	39 83       	std	Y+1, r19	; 0x01
   197fe:	4a 83       	std	Y+2, r20	; 0x02
   19800:	5b 83       	std	Y+3, r21	; 0x03
   19802:	c2 52       	subi	r28, 0x22	; 34
   19804:	d1 40       	sbci	r29, 0x01	; 1
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19806:	ca 5d       	subi	r28, 0xDA	; 218
   19808:	de 4f       	sbci	r29, 0xFE	; 254
   1980a:	88 81       	ld	r24, Y
   1980c:	99 81       	ldd	r25, Y+1	; 0x01
   1980e:	aa 81       	ldd	r26, Y+2	; 0x02
   19810:	bb 81       	ldd	r27, Y+3	; 0x03
   19812:	c6 52       	subi	r28, 0x26	; 38
   19814:	d1 40       	sbci	r29, 0x01	; 1
   19816:	a8 16       	cp	r10, r24
   19818:	b9 06       	cpc	r11, r25
   1981a:	ca 06       	cpc	r12, r26
   1981c:	db 06       	cpc	r13, r27
   1981e:	0c f0       	brlt	.+2      	; 0x19822 <lif_create_volume+0x3be>
   19820:	58 c0       	rjmp	.+176    	; 0x198d2 <lif_create_volume+0x46e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19822:	00 e0       	ldi	r16, 0x00	; 0
   19824:	11 e0       	ldi	r17, 0x01	; 1
   19826:	ca 5e       	subi	r28, 0xEA	; 234
   19828:	de 4f       	sbci	r29, 0xFE	; 254
   1982a:	28 81       	ld	r18, Y
   1982c:	39 81       	ldd	r19, Y+1	; 0x01
   1982e:	4a 81       	ldd	r20, Y+2	; 0x02
   19830:	5b 81       	ldd	r21, Y+3	; 0x03
   19832:	c6 51       	subi	r28, 0x16	; 22
   19834:	d1 40       	sbci	r29, 0x01	; 1
   19836:	be 01       	movw	r22, r28
   19838:	6c 5e       	subi	r22, 0xEC	; 236
   1983a:	7f 4f       	sbci	r23, 0xFF	; 255
   1983c:	c7 01       	movw	r24, r14
   1983e:	0e 94 46 bf 	call	0x17e8c	; 0x17e8c <lif_write>
   19842:	09 2e       	mov	r0, r25
   19844:	00 0c       	add	r0, r0
   19846:	aa 0b       	sbc	r26, r26
   19848:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   1984a:	8f 3f       	cpi	r24, 0xFF	; 255
   1984c:	91 05       	cpc	r25, r1
   1984e:	a1 05       	cpc	r26, r1
   19850:	b1 05       	cpc	r27, r1
   19852:	09 f0       	breq	.+2      	; 0x19856 <lif_create_volume+0x3f2>
   19854:	0c f4       	brge	.+2      	; 0x19858 <lif_create_volume+0x3f4>
   19856:	db c0       	rjmp	.+438    	; 0x19a0e <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19858:	ca 5e       	subi	r28, 0xEA	; 234
   1985a:	de 4f       	sbci	r29, 0xFE	; 254
   1985c:	28 81       	ld	r18, Y
   1985e:	39 81       	ldd	r19, Y+1	; 0x01
   19860:	4a 81       	ldd	r20, Y+2	; 0x02
   19862:	5b 81       	ldd	r21, Y+3	; 0x03
   19864:	c6 51       	subi	r28, 0x16	; 22
   19866:	d1 40       	sbci	r29, 0x01	; 1
   19868:	28 0f       	add	r18, r24
   1986a:	39 1f       	adc	r19, r25
   1986c:	4a 1f       	adc	r20, r26
   1986e:	5b 1f       	adc	r21, r27
   19870:	ca 5e       	subi	r28, 0xEA	; 234
   19872:	de 4f       	sbci	r29, 0xFE	; 254
   19874:	28 83       	st	Y, r18
   19876:	39 83       	std	Y+1, r19	; 0x01
   19878:	4a 83       	std	Y+2, r20	; 0x02
   1987a:	5b 83       	std	Y+3, r21	; 0x03
   1987c:	c6 51       	subi	r28, 0x16	; 22
   1987e:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19880:	ce 5d       	subi	r28, 0xDE	; 222
   19882:	de 4f       	sbci	r29, 0xFE	; 254
   19884:	68 81       	ld	r22, Y
   19886:	79 81       	ldd	r23, Y+1	; 0x01
   19888:	8a 81       	ldd	r24, Y+2	; 0x02
   1988a:	9b 81       	ldd	r25, Y+3	; 0x03
   1988c:	c2 52       	subi	r28, 0x22	; 34
   1988e:	d1 40       	sbci	r29, 0x01	; 1
   19890:	a2 01       	movw	r20, r4
   19892:	91 01       	movw	r18, r2
   19894:	0e 94 f3 e2 	call	0x1c5e6	; 0x1c5e6 <__divmodsi4>
   19898:	67 2b       	or	r22, r23
   1989a:	68 2b       	or	r22, r24
   1989c:	69 2b       	or	r22, r25
   1989e:	99 f4       	brne	.+38     	; 0x198c6 <lif_create_volume+0x462>
            printf("\tWrote: %ld\r", count);
   198a0:	ce 5d       	subi	r28, 0xDE	; 222
   198a2:	de 4f       	sbci	r29, 0xFE	; 254
   198a4:	88 81       	ld	r24, Y
   198a6:	99 81       	ldd	r25, Y+1	; 0x01
   198a8:	aa 81       	ldd	r26, Y+2	; 0x02
   198aa:	bb 81       	ldd	r27, Y+3	; 0x03
   198ac:	c2 52       	subi	r28, 0x22	; 34
   198ae:	d1 40       	sbci	r29, 0x01	; 1
   198b0:	ed b7       	in	r30, 0x3d	; 61
   198b2:	fe b7       	in	r31, 0x3e	; 62
   198b4:	84 83       	std	Z+4, r24	; 0x04
   198b6:	95 83       	std	Z+5, r25	; 0x05
   198b8:	a6 83       	std	Z+6, r26	; 0x06
   198ba:	b7 83       	std	Z+7, r27	; 0x07
   198bc:	61 82       	std	Z+1, r6	; 0x01
   198be:	72 82       	std	Z+2, r7	; 0x02
   198c0:	83 82       	std	Z+3, r8	; 0x03
   198c2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   198c6:	ff ef       	ldi	r31, 0xFF	; 255
   198c8:	af 1a       	sub	r10, r31
   198ca:	bf 0a       	sbc	r11, r31
   198cc:	cf 0a       	sbc	r12, r31
   198ce:	df 0a       	sbc	r13, r31
   198d0:	86 cf       	rjmp	.-244    	; 0x197de <lif_create_volume+0x37a>
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   198d2:	80 e0       	ldi	r24, 0x00	; 0
   198d4:	91 e0       	ldi	r25, 0x01	; 1
   198d6:	cc 5e       	subi	r28, 0xEC	; 236
   198d8:	de 4f       	sbci	r29, 0xFE	; 254
   198da:	a8 81       	ld	r26, Y
   198dc:	b9 81       	ldd	r27, Y+1	; 0x01
   198de:	c4 51       	subi	r28, 0x14	; 20
   198e0:	d1 40       	sbci	r29, 0x01	; 1
   198e2:	fc 01       	movw	r30, r24
   198e4:	1d 92       	st	X+, r1
   198e6:	31 97       	sbiw	r30, 0x01	; 1
   198e8:	e9 f7       	brne	.-6      	; 0x198e4 <lif_create_volume+0x480>
    for(i=0;i<filesectors;++i)
   198ea:	81 2c       	mov	r8, r1
   198ec:	91 2c       	mov	r9, r1
   198ee:	54 01       	movw	r10, r8
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   198f0:	8f ec       	ldi	r24, 0xCF	; 207
   198f2:	99 e3       	ldi	r25, 0x39	; 57
   198f4:	9c 01       	movw	r18, r24
   198f6:	40 e0       	ldi	r20, 0x00	; 0
   198f8:	c6 5e       	subi	r28, 0xE6	; 230
   198fa:	de 4f       	sbci	r29, 0xFE	; 254
   198fc:	28 83       	st	Y, r18
   198fe:	39 83       	std	Y+1, r19	; 0x01
   19900:	4a 83       	std	Y+2, r20	; 0x02
   19902:	ca 51       	subi	r28, 0x1A	; 26
   19904:	d1 40       	sbci	r29, 0x01	; 1
   19906:	ce 5d       	subi	r28, 0xDE	; 222
   19908:	de 4f       	sbci	r29, 0xFE	; 254
   1990a:	48 80       	ld	r4, Y
   1990c:	59 80       	ldd	r5, Y+1	; 0x01
   1990e:	6a 80       	ldd	r6, Y+2	; 0x02
   19910:	7b 80       	ldd	r7, Y+3	; 0x03
   19912:	c2 52       	subi	r28, 0x22	; 34
   19914:	d1 40       	sbci	r29, 0x01	; 1
   19916:	48 0c       	add	r4, r8
   19918:	59 1c       	adc	r5, r9
   1991a:	6a 1c       	adc	r6, r10
   1991c:	7b 1c       	adc	r7, r11
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1991e:	c2 5e       	subi	r28, 0xE2	; 226
   19920:	de 4f       	sbci	r29, 0xFE	; 254
   19922:	28 81       	ld	r18, Y
   19924:	39 81       	ldd	r19, Y+1	; 0x01
   19926:	4a 81       	ldd	r20, Y+2	; 0x02
   19928:	5b 81       	ldd	r21, Y+3	; 0x03
   1992a:	ce 51       	subi	r28, 0x1E	; 30
   1992c:	d1 40       	sbci	r29, 0x01	; 1
   1992e:	82 16       	cp	r8, r18
   19930:	93 06       	cpc	r9, r19
   19932:	a4 06       	cpc	r10, r20
   19934:	b5 06       	cpc	r11, r21
   19936:	0c f0       	brlt	.+2      	; 0x1993a <lif_create_volume+0x4d6>
   19938:	53 c0       	rjmp	.+166    	; 0x199e0 <lif_create_volume+0x57c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1993a:	00 e0       	ldi	r16, 0x00	; 0
   1993c:	11 e0       	ldi	r17, 0x01	; 1
   1993e:	ca 5e       	subi	r28, 0xEA	; 234
   19940:	de 4f       	sbci	r29, 0xFE	; 254
   19942:	28 81       	ld	r18, Y
   19944:	39 81       	ldd	r19, Y+1	; 0x01
   19946:	4a 81       	ldd	r20, Y+2	; 0x02
   19948:	5b 81       	ldd	r21, Y+3	; 0x03
   1994a:	c6 51       	subi	r28, 0x16	; 22
   1994c:	d1 40       	sbci	r29, 0x01	; 1
   1994e:	be 01       	movw	r22, r28
   19950:	6c 5e       	subi	r22, 0xEC	; 236
   19952:	7f 4f       	sbci	r23, 0xFF	; 255
   19954:	c7 01       	movw	r24, r14
   19956:	0e 94 46 bf 	call	0x17e8c	; 0x17e8c <lif_write>
   1995a:	09 2e       	mov	r0, r25
   1995c:	00 0c       	add	r0, r0
   1995e:	aa 0b       	sbc	r26, r26
   19960:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19962:	8f 3f       	cpi	r24, 0xFF	; 255
   19964:	91 05       	cpc	r25, r1
   19966:	a1 05       	cpc	r26, r1
   19968:	b1 05       	cpc	r27, r1
   1996a:	09 f0       	breq	.+2      	; 0x1996e <lif_create_volume+0x50a>
   1996c:	0c f4       	brge	.+2      	; 0x19970 <lif_create_volume+0x50c>
   1996e:	4f c0       	rjmp	.+158    	; 0x19a0e <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19970:	ca 5e       	subi	r28, 0xEA	; 234
   19972:	de 4f       	sbci	r29, 0xFE	; 254
   19974:	28 81       	ld	r18, Y
   19976:	39 81       	ldd	r19, Y+1	; 0x01
   19978:	4a 81       	ldd	r20, Y+2	; 0x02
   1997a:	5b 81       	ldd	r21, Y+3	; 0x03
   1997c:	c6 51       	subi	r28, 0x16	; 22
   1997e:	d1 40       	sbci	r29, 0x01	; 1
   19980:	28 0f       	add	r18, r24
   19982:	39 1f       	adc	r19, r25
   19984:	4a 1f       	adc	r20, r26
   19986:	5b 1f       	adc	r21, r27
   19988:	ca 5e       	subi	r28, 0xEA	; 234
   1998a:	de 4f       	sbci	r29, 0xFE	; 254
   1998c:	28 83       	st	Y, r18
   1998e:	39 83       	std	Y+1, r19	; 0x01
   19990:	4a 83       	std	Y+2, r20	; 0x02
   19992:	5b 83       	std	Y+3, r21	; 0x03
   19994:	c6 51       	subi	r28, 0x16	; 22
   19996:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19998:	c3 01       	movw	r24, r6
   1999a:	b2 01       	movw	r22, r4
   1999c:	24 e6       	ldi	r18, 0x64	; 100
   1999e:	30 e0       	ldi	r19, 0x00	; 0
   199a0:	40 e0       	ldi	r20, 0x00	; 0
   199a2:	50 e0       	ldi	r21, 0x00	; 0
   199a4:	0e 94 f3 e2 	call	0x1c5e6	; 0x1c5e6 <__divmodsi4>
   199a8:	67 2b       	or	r22, r23
   199aa:	68 2b       	or	r22, r24
   199ac:	69 2b       	or	r22, r25
   199ae:	91 f4       	brne	.+36     	; 0x199d4 <lif_create_volume+0x570>
            printf("\tWrote: %ld\r", count);
   199b0:	ed b7       	in	r30, 0x3d	; 61
   199b2:	fe b7       	in	r31, 0x3e	; 62
   199b4:	44 82       	std	Z+4, r4	; 0x04
   199b6:	55 82       	std	Z+5, r5	; 0x05
   199b8:	66 82       	std	Z+6, r6	; 0x06
   199ba:	77 82       	std	Z+7, r7	; 0x07
   199bc:	c6 5e       	subi	r28, 0xE6	; 230
   199be:	de 4f       	sbci	r29, 0xFE	; 254
   199c0:	28 81       	ld	r18, Y
   199c2:	39 81       	ldd	r19, Y+1	; 0x01
   199c4:	4a 81       	ldd	r20, Y+2	; 0x02
   199c6:	ca 51       	subi	r28, 0x1A	; 26
   199c8:	d1 40       	sbci	r29, 0x01	; 1
   199ca:	21 83       	std	Z+1, r18	; 0x01
   199cc:	32 83       	std	Z+2, r19	; 0x02
   199ce:	43 83       	std	Z+3, r20	; 0x03
   199d0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   199d4:	ff ef       	ldi	r31, 0xFF	; 255
   199d6:	8f 1a       	sub	r8, r31
   199d8:	9f 0a       	sbc	r9, r31
   199da:	af 0a       	sbc	r10, r31
   199dc:	bf 0a       	sbc	r11, r31
   199de:	93 cf       	rjmp	.-218    	; 0x19906 <lif_create_volume+0x4a2>
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   199e0:	ed b7       	in	r30, 0x3d	; 61
   199e2:	fe b7       	in	r31, 0x3e	; 62
   199e4:	44 82       	std	Z+4, r4	; 0x04
   199e6:	55 82       	std	Z+5, r5	; 0x05
   199e8:	66 82       	std	Z+6, r6	; 0x06
   199ea:	77 82       	std	Z+7, r7	; 0x07
   199ec:	82 ec       	ldi	r24, 0xC2	; 194
   199ee:	99 e3       	ldi	r25, 0x39	; 57
   199f0:	a0 e0       	ldi	r26, 0x00	; 0
   199f2:	81 83       	std	Z+1, r24	; 0x01
   199f4:	92 83       	std	Z+2, r25	; 0x02
   199f6:	a3 83       	std	Z+3, r26	; 0x03
   199f8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   199fc:	8f ef       	ldi	r24, 0xFF	; 255
   199fe:	9f ef       	ldi	r25, 0xFF	; 255
   19a00:	f7 01       	movw	r30, r14
   19a02:	91 a3       	std	Z+33, r25	; 0x21
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   19a04:	80 a3       	std	Z+32, r24	; 0x20
   19a06:	c7 01       	movw	r24, r14
   19a08:	1a d8       	rcall	.-4044   	; 0x18a3e <lif_check_volume>
   19a0a:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19a0c:	19 f4       	brne	.+6      	; 0x19a14 <lif_create_volume+0x5b0>
   19a0e:	c7 01       	movw	r24, r14
   19a10:	b6 da       	rcall	.-2708   	; 0x18f7e <lif_close_volume>
   19a12:	08 c0       	rjmp	.+16     	; 0x19a24 <lif_create_volume+0x5c0>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   19a14:	c7 01       	movw	r24, r14
   19a16:	1c dc       	rcall	.-1992   	; 0x19250 <lif_updatefree>
   19a18:	6c 01       	movw	r12, r24
   19a1a:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19a1c:	31 f4       	brne	.+12     	; 0x19a2a <lif_create_volume+0x5c6>
   19a1e:	c7 01       	movw	r24, r14
   19a20:	ae da       	rcall	.-2724   	; 0x18f7e <lif_close_volume>

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   19a22:	04 c0       	rjmp	.+8      	; 0x19a2c <lif_create_volume+0x5c8>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   19a24:	c1 2c       	mov	r12, r1
   19a26:	d1 2c       	mov	r13, r1
   19a28:	01 c0       	rjmp	.+2      	; 0x19a2c <lif_create_volume+0x5c8>
   19a2a:	67 01       	movw	r12, r14
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   19a2c:	c6 01       	movw	r24, r12
   19a2e:	c7 5d       	subi	r28, 0xD7	; 215
   19a30:	de 4f       	sbci	r29, 0xFE	; 254
   19a32:	e2 e1       	ldi	r30, 0x12	; 18
   19a34:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

00019a38 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   19a38:	ad e1       	ldi	r26, 0x1D	; 29
   19a3a:	b0 e0       	ldi	r27, 0x00	; 0
   19a3c:	e2 e2       	ldi	r30, 0x22	; 34
   19a3e:	fd ec       	ldi	r31, 0xCD	; 205
   19a40:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
   19a44:	9d 8f       	std	Y+29, r25	; 0x1d
   19a46:	8c 8f       	std	Y+28, r24	; 0x1c
   19a48:	4a 01       	movw	r8, r20
   19a4a:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   19a4c:	fc 01       	movw	r30, r24
   19a4e:	c4 84       	ldd	r12, Z+12	; 0x0c
   19a50:	d5 84       	ldd	r13, Z+13	; 0x0d
   19a52:	e6 84       	ldd	r14, Z+14	; 0x0e
   19a54:	f7 84       	ldd	r15, Z+15	; 0x0f

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   19a56:	fc db       	rcall	.-2056   	; 0x19250 <lif_updatefree>
   19a58:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19a5a:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19a5c:	40 8d       	ldd	r20, Z+24	; 0x18
   19a5e:	51 8d       	ldd	r21, Z+25	; 0x19
   19a60:	62 8d       	ldd	r22, Z+26	; 0x1a
   19a62:	73 8d       	ldd	r23, Z+27	; 0x1b
   19a64:	89 2b       	or	r24, r25
   19a66:	99 f4       	brne	.+38     	; 0x19a8e <lif_newdir+0x56>
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   19a68:	ed b7       	in	r30, 0x3d	; 61
   19a6a:	fe b7       	in	r31, 0x3e	; 62
   19a6c:	80 86       	std	Z+8, r8	; 0x08
   19a6e:	91 86       	std	Z+9, r9	; 0x09
   19a70:	a2 86       	std	Z+10, r10	; 0x0a
   19a72:	b3 86       	std	Z+11, r11	; 0x0b
   19a74:	44 83       	std	Z+4, r20	; 0x04
   19a76:	55 83       	std	Z+5, r21	; 0x05
   19a78:	66 83       	std	Z+6, r22	; 0x06
   19a7a:	77 83       	std	Z+7, r23	; 0x07
   19a7c:	83 ee       	ldi	r24, 0xE3	; 227
   19a7e:	98 e3       	ldi	r25, 0x38	; 56
   19a80:	a0 e0       	ldi	r26, 0x00	; 0
   19a82:	81 83       	std	Z+1, r24	; 0x01
   19a84:	92 83       	std	Z+2, r25	; 0x02
   19a86:	a3 83       	std	Z+3, r26	; 0x03
   19a88:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   19a8c:	2f c1       	rjmp	.+606    	; 0x19cec <lif_newdir+0x2b4>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   19a8e:	48 15       	cp	r20, r8
   19a90:	59 05       	cpc	r21, r9
   19a92:	6a 05       	cpc	r22, r10
   19a94:	7b 05       	cpc	r23, r11
   19a96:	c4 f0       	brlt	.+48     	; 0x19ac8 <lif_newdir+0x90>
   19a98:	44 24       	eor	r4, r4
   19a9a:	43 94       	inc	r4
   19a9c:	51 2c       	mov	r5, r1
   19a9e:	61 2c       	mov	r6, r1
   19aa0:	71 2c       	mov	r7, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19aa2:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19aa4:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19aa6:	86 5a       	subi	r24, 0xA6	; 166
   19aa8:	9f 4f       	sbci	r25, 0xFF	; 255
   19aaa:	9d 8b       	std	Y+21, r25	; 0x15
   19aac:	8c 8b       	std	Y+20, r24	; 0x14
   19aae:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19ab0:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19ab2:	e4 5a       	subi	r30, 0xA4	; 164
   19ab4:	ff 4f       	sbci	r31, 0xFF	; 255
   19ab6:	fb 8b       	std	Y+19, r31	; 0x13
   19ab8:	ea 8b       	std	Y+18, r30	; 0x12
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19aba:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19abc:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19abe:	80 5a       	subi	r24, 0xA0	; 160
   19ac0:	9f 4f       	sbci	r25, 0xFF	; 255
   19ac2:	9f 8b       	std	Y+23, r25	; 0x17
   19ac4:	8e 8b       	std	Y+22, r24	; 0x16
   19ac6:	21 c0       	rjmp	.+66     	; 0x19b0a <lif_newdir+0xd2>
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   19ac8:	ed b7       	in	r30, 0x3d	; 61
   19aca:	fe b7       	in	r31, 0x3e	; 62
   19acc:	44 83       	std	Z+4, r20	; 0x04
   19ace:	55 83       	std	Z+5, r21	; 0x05
   19ad0:	66 83       	std	Z+6, r22	; 0x06
   19ad2:	77 83       	std	Z+7, r23	; 0x07
   19ad4:	8a eb       	ldi	r24, 0xBA	; 186
   19ad6:	98 e3       	ldi	r25, 0x38	; 56
   19ad8:	a0 e0       	ldi	r26, 0x00	; 0
   19ada:	81 83       	std	Z+1, r24	; 0x01
   19adc:	92 83       	std	Z+2, r25	; 0x02
   19ade:	a3 83       	std	Z+3, r26	; 0x03
   19ae0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   19ae4:	03 c1       	rjmp	.+518    	; 0x19cec <lif_newdir+0x2b4>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19ae6:	ec 89       	ldd	r30, Y+20	; 0x14
   19ae8:	fd 89       	ldd	r31, Y+21	; 0x15
   19aea:	80 81       	ld	r24, Z
   19aec:	91 81       	ldd	r25, Z+1	; 0x01
   19aee:	8f 3f       	cpi	r24, 0xFF	; 255
   19af0:	ff ef       	ldi	r31, 0xFF	; 255
   19af2:	9f 07       	cpc	r25, r31
   19af4:	a1 f0       	breq	.+40     	; 0x19b1e <lif_newdir+0xe6>
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   19af6:	89 2b       	or	r24, r25
   19af8:	09 f0       	breq	.+2      	; 0x19afc <lif_newdir+0xc4>
   19afa:	ce c0       	rjmp	.+412    	; 0x19c98 <lif_newdir+0x260>
        {
            if(freestate == 0)
   19afc:	61 14       	cp	r6, r1
   19afe:	71 04       	cpc	r7, r1
   19b00:	09 f4       	brne	.+2      	; 0x19b04 <lif_newdir+0xcc>
   19b02:	c1 c0       	rjmp	.+386    	; 0x19c86 <lif_newdir+0x24e>
   19b04:	ff ef       	ldi	r31, 0xFF	; 255
   19b06:	4f 1a       	sub	r4, r31
   19b08:	5f 0a       	sbc	r5, r31
   19b0a:	82 01       	movw	r16, r4
   19b0c:	01 50       	subi	r16, 0x01	; 1
   19b0e:	11 09       	sbc	r17, r1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   19b10:	b8 01       	movw	r22, r16
   19b12:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19b14:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19b16:	c1 da       	rcall	.-2686   	; 0x1909a <lif_readdirindex>
   19b18:	89 2b       	or	r24, r25
   19b1a:	29 f7       	brne	.-54     	; 0x19ae6 <lif_newdir+0xae>
   19b1c:	e7 c0       	rjmp	.+462    	; 0x19cec <lif_newdir+0x2b4>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   19b1e:	22 e0       	ldi	r18, 0x02	; 2
   19b20:	62 16       	cp	r6, r18
   19b22:	71 04       	cpc	r7, r1
   19b24:	09 f0       	breq	.+2      	; 0x19b28 <lif_newdir+0xf0>
   19b26:	46 c0       	rjmp	.+140    	; 0x19bb4 <lif_newdir+0x17c>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   19b28:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19b2a:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19b2c:	0e 94 4a c3 	call	0x18694	; 0x18694 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   19b30:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19b32:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19b34:	e4 5a       	subi	r30, 0xA4	; 164
   19b36:	ff 4f       	sbci	r31, 0xFF	; 255
   19b38:	88 8d       	ldd	r24, Y+24	; 0x18
   19b3a:	80 83       	st	Z, r24
   19b3c:	99 8d       	ldd	r25, Y+25	; 0x19
   19b3e:	91 83       	std	Z+1, r25	; 0x01
   19b40:	2a 8d       	ldd	r18, Y+26	; 0x1a
   19b42:	22 83       	std	Z+2, r18	; 0x02
   19b44:	8b 8d       	ldd	r24, Y+27	; 0x1b
   19b46:	83 83       	std	Z+3, r24	; 0x03
                LIF->DIR.FileSectors = sectors;
   19b48:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19b4a:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19b4c:	e0 5a       	subi	r30, 0xA0	; 160
   19b4e:	ff 4f       	sbci	r31, 0xFF	; 255
   19b50:	80 82       	st	Z, r8
   19b52:	91 82       	std	Z+1, r9	; 0x01
   19b54:	a2 82       	std	Z+2, r10	; 0x02
   19b56:	b3 82       	std	Z+3, r11	; 0x03
                LIF->usedsectors += sectors;
   19b58:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19b5a:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19b5c:	84 89       	ldd	r24, Z+20	; 0x14
   19b5e:	95 89       	ldd	r25, Z+21	; 0x15
   19b60:	a6 89       	ldd	r26, Z+22	; 0x16
   19b62:	b7 89       	ldd	r27, Z+23	; 0x17
   19b64:	88 0d       	add	r24, r8
   19b66:	99 1d       	adc	r25, r9
   19b68:	aa 1d       	adc	r26, r10
   19b6a:	bb 1d       	adc	r27, r11
   19b6c:	84 8b       	std	Z+20, r24	; 0x14
   19b6e:	95 8b       	std	Z+21, r25	; 0x15
   19b70:	a6 8b       	std	Z+22, r26	; 0x16
   19b72:	b7 8b       	std	Z+23, r27	; 0x17
                LIF->freesectors -= sectors;
   19b74:	80 8d       	ldd	r24, Z+24	; 0x18
   19b76:	91 8d       	ldd	r25, Z+25	; 0x19
   19b78:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19b7a:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19b7c:	88 19       	sub	r24, r8
   19b7e:	99 09       	sbc	r25, r9
   19b80:	aa 09       	sbc	r26, r10
   19b82:	bb 09       	sbc	r27, r11
   19b84:	80 8f       	std	Z+24, r24	; 0x18
   19b86:	91 8f       	std	Z+25, r25	; 0x19
   19b88:	a2 8f       	std	Z+26, r26	; 0x1a
   19b8a:	b3 8f       	std	Z+27, r27	; 0x1b
                LIF->files++;
   19b8c:	84 8d       	ldd	r24, Z+28	; 0x1c
   19b8e:	95 8d       	ldd	r25, Z+29	; 0x1d
   19b90:	01 96       	adiw	r24, 0x01	; 1
   19b92:	95 8f       	std	Z+29, r25	; 0x1d
   19b94:	84 8f       	std	Z+28, r24	; 0x1c
                LIF->purged--;
   19b96:	86 8d       	ldd	r24, Z+30	; 0x1e
   19b98:	97 8d       	ldd	r25, Z+31	; 0x1f
   19b9a:	01 97       	sbiw	r24, 0x01	; 1
   19b9c:	97 8f       	std	Z+31, r25	; 0x1f
   19b9e:	86 8f       	std	Z+30, r24	; 0x1e
                LIF->dirindex = freeindex;
   19ba0:	20 a2       	std	Z+32, r2	; 0x20
   19ba2:	31 a2       	std	Z+33, r3	; 0x21
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   19ba4:	b1 01       	movw	r22, r2
   19ba6:	cf 01       	movw	r24, r30
   19ba8:	df da       	rcall	.-2626   	; 0x19168 <lif_writedirindex>
   19baa:	89 2b       	or	r24, r25
   19bac:	09 f4       	brne	.+2      	; 0x19bb0 <lif_newdir+0x178>
   19bae:	9e c0       	rjmp	.+316    	; 0x19cec <lif_newdir+0x2b4>
   19bb0:	c1 01       	movw	r24, r2
   19bb2:	9e c0       	rjmp	.+316    	; 0x19cf0 <lif_newdir+0x2b8>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   19bb4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19bb8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19bbc:	92 ff       	sbrs	r25, 2
   19bbe:	1e c0       	rjmp	.+60     	; 0x19bfc <lif_newdir+0x1c4>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   19bc0:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19bc2:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19bc4:	80 8d       	ldd	r24, Z+24	; 0x18
   19bc6:	91 8d       	ldd	r25, Z+25	; 0x19
   19bc8:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19bca:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19bcc:	ed b7       	in	r30, 0x3d	; 61
   19bce:	fe b7       	in	r31, 0x3e	; 62
   19bd0:	86 87       	std	Z+14, r24	; 0x0e
   19bd2:	97 87       	std	Z+15, r25	; 0x0f
   19bd4:	a0 8b       	std	Z+16, r26	; 0x10
   19bd6:	b1 8b       	std	Z+17, r27	; 0x11
   19bd8:	82 86       	std	Z+10, r8	; 0x0a
   19bda:	93 86       	std	Z+11, r9	; 0x0b
   19bdc:	a4 86       	std	Z+12, r10	; 0x0c
   19bde:	b5 86       	std	Z+13, r11	; 0x0d
   19be0:	c6 82       	std	Z+6, r12	; 0x06
   19be2:	d7 82       	std	Z+7, r13	; 0x07
   19be4:	e0 86       	std	Z+8, r14	; 0x08
   19be6:	f1 86       	std	Z+9, r15	; 0x09
   19be8:	15 83       	std	Z+5, r17	; 0x05
   19bea:	04 83       	std	Z+4, r16	; 0x04
   19bec:	89 e6       	ldi	r24, 0x69	; 105
   19bee:	98 e3       	ldi	r25, 0x38	; 56
   19bf0:	a0 e0       	ldi	r26, 0x00	; 0
   19bf2:	81 83       	std	Z+1, r24	; 0x01
   19bf4:	92 83       	std	Z+2, r25	; 0x02
   19bf6:	a3 83       	std	Z+3, r26	; 0x03
   19bf8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   19bfc:	b8 01       	movw	r22, r16
   19bfe:	6f 5f       	subi	r22, 0xFF	; 255
   19c00:	7f 4f       	sbci	r23, 0xFF	; 255
   19c02:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19c04:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19c06:	0c db       	rcall	.-2536   	; 0x19220 <lif_writedirEOF>
   19c08:	89 2b       	or	r24, r25
   19c0a:	09 f4       	brne	.+2      	; 0x19c0e <lif_newdir+0x1d6>
   19c0c:	6f c0       	rjmp	.+222    	; 0x19cec <lif_newdir+0x2b4>
            {
                break;
            }

            lif_dir_clear(LIF);
   19c0e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19c10:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19c12:	0e 94 4a c3 	call	0x18694	; 0x18694 <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   19c16:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19c18:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19c1a:	e4 5a       	subi	r30, 0xA4	; 164
   19c1c:	ff 4f       	sbci	r31, 0xFF	; 255
   19c1e:	c0 82       	st	Z, r12
   19c20:	d1 82       	std	Z+1, r13	; 0x01
   19c22:	e2 82       	std	Z+2, r14	; 0x02
   19c24:	f3 82       	std	Z+3, r15	; 0x03
            LIF->DIR.FileSectors = sectors;
   19c26:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19c28:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19c2a:	e0 5a       	subi	r30, 0xA0	; 160
   19c2c:	ff 4f       	sbci	r31, 0xFF	; 255
   19c2e:	80 82       	st	Z, r8
   19c30:	91 82       	std	Z+1, r9	; 0x01
   19c32:	a2 82       	std	Z+2, r10	; 0x02
   19c34:	b3 82       	std	Z+3, r11	; 0x03
            LIF->usedsectors += sectors;
   19c36:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19c38:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19c3a:	84 89       	ldd	r24, Z+20	; 0x14
   19c3c:	95 89       	ldd	r25, Z+21	; 0x15
   19c3e:	a6 89       	ldd	r26, Z+22	; 0x16
   19c40:	b7 89       	ldd	r27, Z+23	; 0x17
   19c42:	88 0d       	add	r24, r8
   19c44:	99 1d       	adc	r25, r9
   19c46:	aa 1d       	adc	r26, r10
   19c48:	bb 1d       	adc	r27, r11
   19c4a:	84 8b       	std	Z+20, r24	; 0x14
   19c4c:	95 8b       	std	Z+21, r25	; 0x15
   19c4e:	a6 8b       	std	Z+22, r26	; 0x16
   19c50:	b7 8b       	std	Z+23, r27	; 0x17
            LIF->freesectors -= sectors;
   19c52:	80 8d       	ldd	r24, Z+24	; 0x18
   19c54:	91 8d       	ldd	r25, Z+25	; 0x19
   19c56:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19c58:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19c5a:	88 19       	sub	r24, r8
   19c5c:	99 09       	sbc	r25, r9
   19c5e:	aa 09       	sbc	r26, r10
   19c60:	bb 09       	sbc	r27, r11
   19c62:	80 8f       	std	Z+24, r24	; 0x18
   19c64:	91 8f       	std	Z+25, r25	; 0x19
   19c66:	a2 8f       	std	Z+26, r26	; 0x1a
   19c68:	b3 8f       	std	Z+27, r27	; 0x1b
            LIF->files++;
   19c6a:	84 8d       	ldd	r24, Z+28	; 0x1c
   19c6c:	95 8d       	ldd	r25, Z+29	; 0x1d
   19c6e:	01 96       	adiw	r24, 0x01	; 1
   19c70:	95 8f       	std	Z+29, r25	; 0x1d
   19c72:	84 8f       	std	Z+28, r24	; 0x1c
            LIF->dirindex = index;
   19c74:	11 a3       	std	Z+33, r17	; 0x21
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   19c76:	00 a3       	std	Z+32, r16	; 0x20
   19c78:	b8 01       	movw	r22, r16
   19c7a:	cf 01       	movw	r24, r30
   19c7c:	75 da       	rcall	.-2838   	; 0x19168 <lif_writedirindex>
   19c7e:	89 2b       	or	r24, r25
   19c80:	a9 f1       	breq	.+106    	; 0x19cec <lif_newdir+0x2b4>
   19c82:	c8 01       	movw	r24, r16
   19c84:	35 c0       	rjmp	.+106    	; 0x19cf0 <lif_newdir+0x2b8>
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   19c86:	c8 8e       	std	Y+24, r12	; 0x18
   19c88:	d9 8e       	std	Y+25, r13	; 0x19
   19c8a:	ea 8e       	std	Y+26, r14	; 0x1a
   19c8c:	fb 8e       	std	Y+27, r15	; 0x1b
   19c8e:	18 01       	movw	r2, r16
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   19c90:	66 24       	eor	r6, r6
   19c92:	63 94       	inc	r6
   19c94:	71 2c       	mov	r7, r1
            }
            ++index;
            continue;
   19c96:	36 cf       	rjmp	.-404    	; 0x19b04 <lif_newdir+0xcc>
        }

// VALID record
        if(freestate == 1)
   19c98:	f1 e0       	ldi	r31, 0x01	; 1
   19c9a:	6f 16       	cp	r6, r31
   19c9c:	71 04       	cpc	r7, r1
   19c9e:	a9 f4       	brne	.+42     	; 0x19cca <lif_newdir+0x292>
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   19ca0:	ea 89       	ldd	r30, Y+18	; 0x12
   19ca2:	fb 89       	ldd	r31, Y+19	; 0x13
   19ca4:	80 81       	ld	r24, Z
   19ca6:	91 81       	ldd	r25, Z+1	; 0x01
   19ca8:	a2 81       	ldd	r26, Z+2	; 0x02
   19caa:	b3 81       	ldd	r27, Z+3	; 0x03
   19cac:	8c 19       	sub	r24, r12
   19cae:	9d 09       	sbc	r25, r13
   19cb0:	ae 09       	sbc	r26, r14
   19cb2:	bf 09       	sbc	r27, r15
   19cb4:	88 15       	cp	r24, r8
   19cb6:	99 05       	cpc	r25, r9
   19cb8:	aa 05       	cpc	r26, r10
   19cba:	bb 05       	cpc	r27, r11
   19cbc:	1c f4       	brge	.+6      	; 0x19cc4 <lif_newdir+0x28c>
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   19cbe:	61 2c       	mov	r6, r1
   19cc0:	71 2c       	mov	r7, r1
   19cc2:	03 c0       	rjmp	.+6      	; 0x19cca <lif_newdir+0x292>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   19cc4:	82 e0       	ldi	r24, 0x02	; 2
   19cc6:	68 2e       	mov	r6, r24
   19cc8:	71 2c       	mov	r7, r1
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19cca:	ea 89       	ldd	r30, Y+18	; 0x12
   19ccc:	fb 89       	ldd	r31, Y+19	; 0x13
   19cce:	c0 80       	ld	r12, Z
   19cd0:	d1 80       	ldd	r13, Z+1	; 0x01
   19cd2:	e2 80       	ldd	r14, Z+2	; 0x02
   19cd4:	f3 80       	ldd	r15, Z+3	; 0x03
   19cd6:	ee 89       	ldd	r30, Y+22	; 0x16
   19cd8:	ff 89       	ldd	r31, Y+23	; 0x17
   19cda:	80 81       	ld	r24, Z
   19cdc:	91 81       	ldd	r25, Z+1	; 0x01
   19cde:	a2 81       	ldd	r26, Z+2	; 0x02
   19ce0:	b3 81       	ldd	r27, Z+3	; 0x03
   19ce2:	c8 0e       	add	r12, r24
   19ce4:	d9 1e       	adc	r13, r25
   19ce6:	ea 1e       	adc	r14, r26
   19ce8:	fb 1e       	adc	r15, r27
   19cea:	0c cf       	rjmp	.-488    	; 0x19b04 <lif_newdir+0xcc>
        ++index;
    }
// ERROR
    return(-1);
   19cec:	8f ef       	ldi	r24, 0xFF	; 255
   19cee:	9f ef       	ldi	r25, 0xFF	; 255
}
   19cf0:	6d 96       	adiw	r28, 0x1d	; 29
   19cf2:	e2 e1       	ldi	r30, 0x12	; 18
   19cf4:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

00019cf8 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   19cf8:	a9 e3       	ldi	r26, 0x39	; 57
   19cfa:	b1 e0       	ldi	r27, 0x01	; 1
   19cfc:	e2 e8       	ldi	r30, 0x82	; 130
   19cfe:	fe ec       	ldi	r31, 0xCE	; 206
   19d00:	0c 94 44 e3 	jmp	0x1c688	; 0x1c688 <__prologue_saves__+0xc>
   19d04:	6c 01       	movw	r12, r24
   19d06:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   19d08:	be 01       	movw	r22, r28
   19d0a:	66 5f       	subi	r22, 0xF6	; 246
   19d0c:	7e 4f       	sbci	r23, 0xFE	; 254
   19d0e:	0e 94 99 be 	call	0x17d32	; 0x17d32 <lif_stat>
   19d12:	5c 01       	movw	r10, r24
    if(sp == NULL)
   19d14:	00 97       	sbiw	r24, 0x00	; 0
   19d16:	09 f1       	breq	.+66     	; 0x19d5a <lif_open_volume+0x62>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   19d18:	fc 01       	movw	r30, r24
   19d1a:	80 8d       	ldd	r24, Z+24	; 0x18
   19d1c:	91 8d       	ldd	r25, Z+25	; 0x19
   19d1e:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19d20:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19d22:	81 15       	cp	r24, r1
   19d24:	f2 e0       	ldi	r31, 0x02	; 2
   19d26:	9f 07       	cpc	r25, r31
   19d28:	a1 05       	cpc	r26, r1
   19d2a:	b1 05       	cpc	r27, r1
   19d2c:	c8 f4       	brcc	.+50     	; 0x19d60 <lif_open_volume+0x68>
    {
        if(debuglevel & LIF_DEBUG)
   19d2e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19d32:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19d36:	32 ff       	sbrs	r19, 2
   19d38:	10 c0       	rjmp	.+32     	; 0x19d5a <lif_open_volume+0x62>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   19d3a:	ed b7       	in	r30, 0x3d	; 61
   19d3c:	fe b7       	in	r31, 0x3e	; 62
   19d3e:	86 83       	std	Z+6, r24	; 0x06
   19d40:	97 83       	std	Z+7, r25	; 0x07
   19d42:	a0 87       	std	Z+8, r26	; 0x08
   19d44:	b1 87       	std	Z+9, r27	; 0x09
   19d46:	d5 82       	std	Z+5, r13	; 0x05
   19d48:	c4 82       	std	Z+4, r12	; 0x04
   19d4a:	8a e2       	ldi	r24, 0x2A	; 42
   19d4c:	98 e3       	ldi	r25, 0x38	; 56
   19d4e:	a0 e0       	ldi	r26, 0x00	; 0
   19d50:	81 83       	std	Z+1, r24	; 0x01
   19d52:	92 83       	std	Z+2, r25	; 0x02
   19d54:	a3 83       	std	Z+3, r26	; 0x03
   19d56:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        return(NULL);
   19d5a:	00 e0       	ldi	r16, 0x00	; 0
   19d5c:	10 e0       	ldi	r17, 0x00	; 0
   19d5e:	c6 c0       	rjmp	.+396    	; 0x19eec <lif_open_volume+0x1f4>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   19d60:	64 e7       	ldi	r22, 0x74	; 116
   19d62:	70 e0       	ldi	r23, 0x00	; 0
   19d64:	80 e0       	ldi	r24, 0x00	; 0
   19d66:	90 e0       	ldi	r25, 0x00	; 0
   19d68:	0e 94 05 be 	call	0x17c0a	; 0x17c0a <lif_calloc>
   19d6c:	7c 01       	movw	r14, r24
    if(!LIF)
   19d6e:	89 2b       	or	r24, r25
   19d70:	a1 f3       	breq	.-24     	; 0x19d5a <lif_open_volume+0x62>
        return(NULL);

    LIF->name = lif_stralloc(name);
   19d72:	c6 01       	movw	r24, r12
   19d74:	0e 94 50 be 	call	0x17ca0	; 0x17ca0 <lif_stralloc>
   19d78:	f7 01       	movw	r30, r14
   19d7a:	91 83       	std	Z+1, r25	; 0x01
   19d7c:	80 83       	st	Z, r24
    if(!LIF->name)
   19d7e:	00 97       	sbiw	r24, 0x00	; 0
   19d80:	09 f4       	brne	.+2      	; 0x19d84 <lif_open_volume+0x8c>
   19d82:	5e c0       	rjmp	.+188    	; 0x19e40 <lif_open_volume+0x148>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   19d84:	f5 01       	movw	r30, r10
   19d86:	80 8c       	ldd	r8, Z+24	; 0x18
   19d88:	91 8c       	ldd	r9, Z+25	; 0x19
   19d8a:	a2 8c       	ldd	r10, Z+26	; 0x1a
   19d8c:	b3 8c       	ldd	r11, Z+27	; 0x1b
   19d8e:	f7 01       	movw	r30, r14
   19d90:	80 86       	std	Z+8, r8	; 0x08
   19d92:	91 86       	std	Z+9, r9	; 0x09
   19d94:	a2 86       	std	Z+10, r10	; 0x0a
   19d96:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19d98:	77 27       	eor	r23, r23
   19d9a:	6b 2d       	mov	r22, r11
   19d9c:	5a 2d       	mov	r21, r10
   19d9e:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19da0:	88 20       	and	r8, r8
   19da2:	21 f0       	breq	.+8      	; 0x19dac <lif_open_volume+0xb4>
        ++sectors;
   19da4:	4f 5f       	subi	r20, 0xFF	; 255
   19da6:	5f 4f       	sbci	r21, 0xFF	; 255
   19da8:	6f 4f       	sbci	r22, 0xFF	; 255
   19daa:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   19dac:	f7 01       	movw	r30, r14
   19dae:	44 83       	std	Z+4, r20	; 0x04
   19db0:	55 83       	std	Z+5, r21	; 0x05
   19db2:	66 83       	std	Z+6, r22	; 0x06
   19db4:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   19db6:	b8 01       	movw	r22, r16
   19db8:	0e 94 6f be 	call	0x17cde	; 0x17cde <lif_open>
   19dbc:	f7 01       	movw	r30, r14
   19dbe:	93 83       	std	Z+3, r25	; 0x03
   19dc0:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   19dc2:	89 2b       	or	r24, r25
   19dc4:	e9 f1       	breq	.+122    	; 0x19e40 <lif_open_volume+0x148>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   19dc6:	00 e0       	ldi	r16, 0x00	; 0
   19dc8:	11 e0       	ldi	r17, 0x01	; 1
   19dca:	20 e0       	ldi	r18, 0x00	; 0
   19dcc:	30 e0       	ldi	r19, 0x00	; 0
   19dce:	a9 01       	movw	r20, r18
   19dd0:	be 01       	movw	r22, r28
   19dd2:	66 5f       	subi	r22, 0xF6	; 246
   19dd4:	7f 4f       	sbci	r23, 0xFF	; 255
   19dd6:	c7 01       	movw	r24, r14
   19dd8:	0e 94 f3 be 	call	0x17de6	; 0x17de6 <lif_read>
   19ddc:	6f 3f       	cpi	r22, 0xFF	; 255
   19dde:	71 05       	cpc	r23, r1
   19de0:	81 05       	cpc	r24, r1
   19de2:	91 05       	cpc	r25, r1
   19de4:	09 f0       	breq	.+2      	; 0x19de8 <lif_open_volume+0xf0>
   19de6:	6c f4       	brge	.+26     	; 0x19e02 <lif_open_volume+0x10a>
    {
        if(debuglevel & LIF_DEBUG)
   19de8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19dec:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19df0:	92 ff       	sbrs	r25, 2
   19df2:	26 c0       	rjmp	.+76     	; 0x19e40 <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   19df4:	ed b7       	in	r30, 0x3d	; 61
   19df6:	fe b7       	in	r31, 0x3e	; 62
   19df8:	d5 82       	std	Z+5, r13	; 0x05
   19dfa:	c4 82       	std	Z+4, r12	; 0x04
   19dfc:	84 ef       	ldi	r24, 0xF4	; 244
   19dfe:	97 e3       	ldi	r25, 0x37	; 55
   19e00:	19 c0       	rjmp	.+50     	; 0x19e34 <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   19e02:	b7 01       	movw	r22, r14
   19e04:	ce 01       	movw	r24, r28
   19e06:	0a 96       	adiw	r24, 0x0a	; 10
   19e08:	0e 94 13 c1 	call	0x18226	; 0x18226 <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   19e0c:	c7 01       	movw	r24, r14
   19e0e:	0e 94 1f c5 	call	0x18a3e	; 0x18a3e <lif_check_volume>
   19e12:	89 2b       	or	r24, r25
   19e14:	c1 f4       	brne	.+48     	; 0x19e46 <lif_open_volume+0x14e>
    {
        if(debuglevel & LIF_DEBUG)
   19e16:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19e1a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19e1e:	92 ff       	sbrs	r25, 2
   19e20:	0f c0       	rjmp	.+30     	; 0x19e40 <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   19e22:	f7 01       	movw	r30, r14
   19e24:	80 81       	ld	r24, Z
   19e26:	91 81       	ldd	r25, Z+1	; 0x01
   19e28:	ed b7       	in	r30, 0x3d	; 61
   19e2a:	fe b7       	in	r31, 0x3e	; 62
   19e2c:	95 83       	std	Z+5, r25	; 0x05
   19e2e:	84 83       	std	Z+4, r24	; 0x04
   19e30:	81 ec       	ldi	r24, 0xC1	; 193
   19e32:	97 e3       	ldi	r25, 0x37	; 55
   19e34:	a0 e0       	ldi	r26, 0x00	; 0
   19e36:	81 83       	std	Z+1, r24	; 0x01
   19e38:	92 83       	std	Z+2, r25	; 0x02
   19e3a:	a3 83       	std	Z+3, r26	; 0x03
   19e3c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19e40:	c7 01       	movw	r24, r14
   19e42:	9d d8       	rcall	.-3782   	; 0x18f7e <lif_close_volume>
   19e44:	8a cf       	rjmp	.-236    	; 0x19d5a <lif_open_volume+0x62>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   19e46:	f7 01       	movw	r30, r14
   19e48:	45 a5       	ldd	r20, Z+45	; 0x2d
   19e4a:	56 a5       	ldd	r21, Z+46	; 0x2e
   19e4c:	67 a5       	ldd	r22, Z+47	; 0x2f
   19e4e:	70 a9       	ldd	r23, Z+48	; 0x30
   19e50:	85 a9       	ldd	r24, Z+53	; 0x35
   19e52:	96 a9       	ldd	r25, Z+54	; 0x36
   19e54:	a7 a9       	ldd	r26, Z+55	; 0x37
   19e56:	b0 ad       	ldd	r27, Z+56	; 0x38
   19e58:	48 0f       	add	r20, r24
   19e5a:	59 1f       	adc	r21, r25
   19e5c:	6a 1f       	adc	r22, r26
   19e5e:	7b 1f       	adc	r23, r27
   19e60:	44 87       	std	Z+12, r20	; 0x0c
   19e62:	55 87       	std	Z+13, r21	; 0x0d
   19e64:	66 87       	std	Z+14, r22	; 0x0e
   19e66:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   19e68:	84 81       	ldd	r24, Z+4	; 0x04
   19e6a:	95 81       	ldd	r25, Z+5	; 0x05
   19e6c:	a6 81       	ldd	r26, Z+6	; 0x06
   19e6e:	b7 81       	ldd	r27, Z+7	; 0x07
   19e70:	84 1b       	sub	r24, r20
   19e72:	95 0b       	sbc	r25, r21
   19e74:	a6 0b       	sbc	r26, r22
   19e76:	b7 0b       	sbc	r27, r23
   19e78:	80 8b       	std	Z+16, r24	; 0x10
   19e7a:	91 8b       	std	Z+17, r25	; 0x11
   19e7c:	a2 8b       	std	Z+18, r26	; 0x12
   19e7e:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   19e80:	80 8f       	std	Z+24, r24	; 0x18
   19e82:	91 8f       	std	Z+25, r25	; 0x19
   19e84:	a2 8f       	std	Z+26, r26	; 0x1a
   19e86:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   19e88:	14 8a       	std	Z+20, r1	; 0x14
   19e8a:	15 8a       	std	Z+21, r1	; 0x15
   19e8c:	16 8a       	std	Z+22, r1	; 0x16
   19e8e:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   19e90:	17 8e       	std	Z+31, r1	; 0x1f
   19e92:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   19e94:	15 8e       	std	Z+29, r1	; 0x1d
   19e96:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   19e98:	11 a2       	std	Z+33, r1	; 0x21
   19e9a:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19e9c:	13 a2       	std	Z+35, r1	; 0x23
   19e9e:	12 a2       	std	Z+34, r1	; 0x22

    if( lif_updatefree(LIF) == NULL)
   19ea0:	c7 01       	movw	r24, r14
   19ea2:	d6 d9       	rcall	.-3156   	; 0x19250 <lif_updatefree>
   19ea4:	8c 01       	movw	r16, r24
   19ea6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19eaa:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19eae:	01 15       	cp	r16, r1
   19eb0:	11 05       	cpc	r17, r1
   19eb2:	a1 f4       	brne	.+40     	; 0x19edc <lif_open_volume+0x1e4>
    {
        if(debuglevel & LIF_DEBUG)
   19eb4:	92 ff       	sbrs	r25, 2
   19eb6:	0f c0       	rjmp	.+30     	; 0x19ed6 <lif_open_volume+0x1de>
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   19eb8:	f7 01       	movw	r30, r14
   19eba:	80 81       	ld	r24, Z
   19ebc:	91 81       	ldd	r25, Z+1	; 0x01
   19ebe:	ed b7       	in	r30, 0x3d	; 61
   19ec0:	fe b7       	in	r31, 0x3e	; 62
   19ec2:	95 83       	std	Z+5, r25	; 0x05
   19ec4:	84 83       	std	Z+4, r24	; 0x04
   19ec6:	8e e8       	ldi	r24, 0x8E	; 142
   19ec8:	97 e3       	ldi	r25, 0x37	; 55
   19eca:	a0 e0       	ldi	r26, 0x00	; 0
   19ecc:	81 83       	std	Z+1, r24	; 0x01
   19ece:	92 83       	std	Z+2, r25	; 0x02
   19ed0:	a3 83       	std	Z+3, r26	; 0x03
   19ed2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19ed6:	c7 01       	movw	r24, r14
   19ed8:	52 d8       	rcall	.-3932   	; 0x18f7e <lif_close_volume>
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   19eda:	08 c0       	rjmp	.+16     	; 0x19eec <lif_open_volume+0x1f4>
    }

    if(debuglevel &LIF_DEBUG)
   19edc:	92 ff       	sbrs	r25, 2
   19ede:	05 c0       	rjmp	.+10     	; 0x19eea <lif_open_volume+0x1f2>
        lif_dump_vol(LIF, "Volume Listing");
   19ee0:	62 e4       	ldi	r22, 0x42	; 66
   19ee2:	76 e1       	ldi	r23, 0x16	; 22
   19ee4:	c7 01       	movw	r24, r14
   19ee6:	0e 94 59 c3 	call	0x186b2	; 0x186b2 <lif_dump_vol>
   19eea:	87 01       	movw	r16, r14
    return( LIF );
}
   19eec:	c8 01       	movw	r24, r16
   19eee:	c7 5c       	subi	r28, 0xC7	; 199
   19ef0:	de 4f       	sbci	r29, 0xFE	; 254
   19ef2:	ec e0       	ldi	r30, 0x0C	; 12
   19ef4:	0c 94 60 e3 	jmp	0x1c6c0	; 0x1c6c0 <__epilogue_restores__+0xc>

00019ef8 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   19ef8:	2f 92       	push	r2
   19efa:	3f 92       	push	r3
   19efc:	4f 92       	push	r4
   19efe:	5f 92       	push	r5
   19f00:	6f 92       	push	r6
   19f02:	8f 92       	push	r8
   19f04:	9f 92       	push	r9
   19f06:	af 92       	push	r10
   19f08:	bf 92       	push	r11
   19f0a:	cf 92       	push	r12
   19f0c:	df 92       	push	r13
   19f0e:	ef 92       	push	r14
   19f10:	0f 93       	push	r16
   19f12:	1f 93       	push	r17
   19f14:	cf 93       	push	r28
   19f16:	df 93       	push	r29
   19f18:	cd b7       	in	r28, 0x3d	; 61
   19f1a:	de b7       	in	r29, 0x3e	; 62
   19f1c:	af 97       	sbiw	r28, 0x2f	; 47
   19f1e:	0f b6       	in	r0, 0x3f	; 63
   19f20:	f8 94       	cli
   19f22:	de bf       	out	0x3e, r29	; 62
   19f24:	0f be       	out	0x3f, r0	; 63
   19f26:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   19f28:	68 e0       	ldi	r22, 0x08	; 8
   19f2a:	79 e0       	ldi	r23, 0x09	; 9
   19f2c:	e5 de       	rcall	.-566    	; 0x19cf8 <lif_open_volume>
   19f2e:	9f a7       	std	Y+47, r25	; 0x2f
   19f30:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   19f32:	00 97       	sbiw	r24, 0x00	; 0
   19f34:	09 f4       	brne	.+2      	; 0x19f38 <lif_dir+0x40>
   19f36:	9e c1       	rjmp	.+828    	; 0x1a274 <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   19f38:	fc 01       	movw	r30, r24
   19f3a:	86 a1       	ldd	r24, Z+38	; 0x26
   19f3c:	88 23       	and	r24, r24
   19f3e:	21 f0       	breq	.+8      	; 0x19f48 <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   19f40:	8f 01       	movw	r16, r30
   19f42:	0a 5d       	subi	r16, 0xDA	; 218
   19f44:	1f 4f       	sbci	r17, 0xFF	; 255
   19f46:	02 c0       	rjmp	.+4      	; 0x19f4c <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   19f48:	04 ef       	ldi	r16, 0xF4	; 244
   19f4a:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   19f4c:	8e a5       	ldd	r24, Y+46	; 0x2e
   19f4e:	9f a5       	ldd	r25, Y+47	; 0x2f
   19f50:	87 5b       	subi	r24, 0xB7	; 183
   19f52:	9f 4f       	sbci	r25, 0xFF	; 255
   19f54:	0e 94 1d c3 	call	0x1863a	; 0x1863a <lif_lifbcd2timestr>
   19f58:	ed b7       	in	r30, 0x3d	; 61
   19f5a:	fe b7       	in	r31, 0x3e	; 62
   19f5c:	97 83       	std	Z+7, r25	; 0x07
   19f5e:	86 83       	std	Z+6, r24	; 0x06
   19f60:	15 83       	std	Z+5, r17	; 0x05
   19f62:	04 83       	std	Z+4, r16	; 0x04
   19f64:	87 e7       	ldi	r24, 0x77	; 119
   19f66:	97 e3       	ldi	r25, 0x37	; 55
   19f68:	a0 e0       	ldi	r26, 0x00	; 0
   19f6a:	81 83       	std	Z+1, r24	; 0x01
   19f6c:	92 83       	std	Z+2, r25	; 0x02
   19f6e:	a3 83       	std	Z+3, r26	; 0x03
   19f70:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   19f74:	87 e3       	ldi	r24, 0x37	; 55
   19f76:	97 e3       	ldi	r25, 0x37	; 55
   19f78:	a0 e0       	ldi	r26, 0x00	; 0
   19f7a:	ed b7       	in	r30, 0x3d	; 61
   19f7c:	fe b7       	in	r31, 0x3e	; 62
   19f7e:	81 83       	std	Z+1, r24	; 0x01
   19f80:	92 83       	std	Z+2, r25	; 0x02
   19f82:	a3 83       	std	Z+3, r26	; 0x03
   19f84:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   19f88:	00 e2       	ldi	r16, 0x20	; 32
   19f8a:	10 e0       	ldi	r17, 0x00	; 0
   19f8c:	1f 8b       	std	Y+23, r17	; 0x17
   19f8e:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   19f90:	21 2c       	mov	r2, r1
   19f92:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   19f94:	0e a5       	ldd	r16, Y+46	; 0x2e
   19f96:	1f a5       	ldd	r17, Y+47	; 0x2f
   19f98:	06 5a       	subi	r16, 0xA6	; 166
   19f9a:	1f 4f       	sbci	r17, 0xFF	; 255
   19f9c:	1d 8f       	std	Y+29, r17	; 0x1d
   19f9e:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19fa0:	0e a5       	ldd	r16, Y+46	; 0x2e
   19fa2:	1f a5       	ldd	r17, Y+47	; 0x2f
   19fa4:	00 5a       	subi	r16, 0xA0	; 160
   19fa6:	1f 4f       	sbci	r17, 0xFF	; 255
   19fa8:	1d a3       	std	Y+37, r17	; 0x25
   19faa:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19fac:	0e a5       	ldd	r16, Y+46	; 0x2e
   19fae:	1f a5       	ldd	r17, Y+47	; 0x2f
   19fb0:	04 59       	subi	r16, 0x94	; 148
   19fb2:	1f 4f       	sbci	r17, 0xFF	; 255
   19fb4:	1f a3       	std	Y+39, r17	; 0x27
   19fb6:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19fb8:	8b ee       	ldi	r24, 0xEB	; 235
   19fba:	96 e3       	ldi	r25, 0x36	; 54
   19fbc:	6c 01       	movw	r12, r24
   19fbe:	e1 2c       	mov	r14, r1
   19fc0:	0e a5       	ldd	r16, Y+46	; 0x2e
   19fc2:	1f a5       	ldd	r17, Y+47	; 0x2f
   19fc4:	01 5b       	subi	r16, 0xB1	; 177
   19fc6:	1f 4f       	sbci	r17, 0xFF	; 255
   19fc8:	1f 8f       	std	Y+31, r17	; 0x1f
   19fca:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   19fcc:	8b eb       	ldi	r24, 0xBB	; 187
   19fce:	96 e3       	ldi	r25, 0x36	; 54
   19fd0:	2c 01       	movw	r4, r24
   19fd2:	61 2c       	mov	r6, r1
   19fd4:	0e a5       	ldd	r16, Y+46	; 0x2e
   19fd6:	1f a5       	ldd	r17, Y+47	; 0x2f
   19fd8:	04 5a       	subi	r16, 0xA4	; 164
   19fda:	1f 4f       	sbci	r17, 0xFF	; 255
   19fdc:	19 a7       	std	Y+41, r17	; 0x29
   19fde:	08 a7       	std	Y+40, r16	; 0x28
   19fe0:	0e a5       	ldd	r16, Y+46	; 0x2e
   19fe2:	1f a5       	ldd	r17, Y+47	; 0x2f
   19fe4:	02 59       	subi	r16, 0x92	; 146
   19fe6:	1f 4f       	sbci	r17, 0xFF	; 255
   19fe8:	1b a7       	std	Y+43, r17	; 0x2b
   19fea:	0a a7       	std	Y+42, r16	; 0x2a
   19fec:	0e a5       	ldd	r16, Y+46	; 0x2e
   19fee:	1f a5       	ldd	r17, Y+47	; 0x2f
   19ff0:	0c 59       	subi	r16, 0x9C	; 156
   19ff2:	1f 4f       	sbci	r17, 0xFF	; 255
   19ff4:	1d a7       	std	Y+45, r17	; 0x2d
   19ff6:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   19ff8:	b1 01       	movw	r22, r2
   19ffa:	8e a5       	ldd	r24, Y+46	; 0x2e
   19ffc:	9f a5       	ldd	r25, Y+47	; 0x2f
   19ffe:	4d d8       	rcall	.-3942   	; 0x1909a <lif_readdirindex>
   1a000:	89 2b       	or	r24, r25
   1a002:	09 f4       	brne	.+2      	; 0x1a006 <lif_dir+0x10e>
   1a004:	ad c0       	rjmp	.+346    	; 0x1a160 <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a006:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a008:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a00a:	8d 91       	ld	r24, X+
   1a00c:	9c 91       	ld	r25, X
   1a00e:	8f 3f       	cpi	r24, 0xFF	; 255
   1a010:	bf ef       	ldi	r27, 0xFF	; 255
   1a012:	9b 07       	cpc	r25, r27
   1a014:	09 f4       	brne	.+2      	; 0x1a018 <lif_dir+0x120>
   1a016:	a4 c0       	rjmp	.+328    	; 0x1a160 <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a018:	ec a1       	ldd	r30, Y+36	; 0x24
   1a01a:	fd a1       	ldd	r31, Y+37	; 0x25
   1a01c:	40 81       	ld	r20, Z
   1a01e:	51 81       	ldd	r21, Z+1	; 0x01
   1a020:	62 81       	ldd	r22, Z+2	; 0x02
   1a022:	73 81       	ldd	r23, Z+3	; 0x03
   1a024:	00 27       	eor	r16, r16
   1a026:	14 2f       	mov	r17, r20
   1a028:	25 2f       	mov	r18, r21
   1a02a:	36 2f       	mov	r19, r22
   1a02c:	08 8f       	std	Y+24, r16	; 0x18
   1a02e:	19 8f       	std	Y+25, r17	; 0x19
   1a030:	2a 8f       	std	Y+26, r18	; 0x1a
   1a032:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a034:	8c 7f       	andi	r24, 0xFC	; 252
   1a036:	80 31       	cpi	r24, 0x10	; 16
   1a038:	90 4e       	sbci	r25, 0xE0	; 224
   1a03a:	09 f0       	breq	.+2      	; 0x1a03e <lif_dir+0x146>
   1a03c:	4b c0       	rjmp	.+150    	; 0x1a0d4 <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a03e:	ae a1       	ldd	r26, Y+38	; 0x26
   1a040:	bf a1       	ldd	r27, Y+39	; 0x27
   1a042:	8d 91       	ld	r24, X+
   1a044:	9c 91       	ld	r25, X
   1a046:	00 97       	sbiw	r24, 0x00	; 0
   1a048:	b9 f0       	breq	.+46     	; 0x1a078 <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a04a:	4c 01       	movw	r8, r24
   1a04c:	a1 2c       	mov	r10, r1
   1a04e:	b1 2c       	mov	r11, r1
   1a050:	33 27       	eor	r19, r19
   1a052:	2b 2d       	mov	r18, r11
   1a054:	1a 2d       	mov	r17, r10
   1a056:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a058:	88 23       	and	r24, r24
   1a05a:	21 f0       	breq	.+8      	; 0x1a064 <lif_dir+0x16c>
        ++sectors;
   1a05c:	0f 5f       	subi	r16, 0xFF	; 255
   1a05e:	1f 4f       	sbci	r17, 0xFF	; 255
   1a060:	2f 4f       	sbci	r18, 0xFF	; 255
   1a062:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a064:	40 17       	cp	r20, r16
   1a066:	51 07       	cpc	r21, r17
   1a068:	62 07       	cpc	r22, r18
   1a06a:	73 07       	cpc	r23, r19
   1a06c:	29 f4       	brne	.+10     	; 0x1a078 <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   1a06e:	88 8e       	std	Y+24, r8	; 0x18
   1a070:	99 8e       	std	Y+25, r9	; 0x19
   1a072:	aa 8e       	std	Y+26, r10	; 0x1a
   1a074:	bb 8e       	std	Y+27, r11	; 0x1b
   1a076:	2e c0       	rjmp	.+92     	; 0x1a0d4 <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   1a078:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a07c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a080:	32 ff       	sbrs	r19, 2
   1a082:	24 c0       	rjmp	.+72     	; 0x1a0cc <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a084:	4c 01       	movw	r8, r24
   1a086:	a1 2c       	mov	r10, r1
   1a088:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a08a:	33 27       	eor	r19, r19
   1a08c:	2b 2d       	mov	r18, r11
   1a08e:	1a 2d       	mov	r17, r10
   1a090:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a092:	88 23       	and	r24, r24
   1a094:	21 f0       	breq	.+8      	; 0x1a09e <lif_dir+0x1a6>
        ++sectors;
   1a096:	0f 5f       	subi	r16, 0xFF	; 255
   1a098:	1f 4f       	sbci	r17, 0xFF	; 255
   1a09a:	2f 4f       	sbci	r18, 0xFF	; 255
   1a09c:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a09e:	ed b7       	in	r30, 0x3d	; 61
   1a0a0:	fe b7       	in	r31, 0x3e	; 62
   1a0a2:	46 87       	std	Z+14, r20	; 0x0e
   1a0a4:	57 87       	std	Z+15, r21	; 0x0f
   1a0a6:	60 8b       	std	Z+16, r22	; 0x10
   1a0a8:	71 8b       	std	Z+17, r23	; 0x11
   1a0aa:	02 87       	std	Z+10, r16	; 0x0a
   1a0ac:	13 87       	std	Z+11, r17	; 0x0b
   1a0ae:	24 87       	std	Z+12, r18	; 0x0c
   1a0b0:	35 87       	std	Z+13, r19	; 0x0d
   1a0b2:	86 82       	std	Z+6, r8	; 0x06
   1a0b4:	97 82       	std	Z+7, r9	; 0x07
   1a0b6:	a0 86       	std	Z+8, r10	; 0x08
   1a0b8:	b1 86       	std	Z+9, r11	; 0x09
   1a0ba:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a0bc:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a0be:	15 83       	std	Z+5, r17	; 0x05
   1a0c0:	04 83       	std	Z+4, r16	; 0x04
   1a0c2:	c1 82       	std	Z+1, r12	; 0x01
   1a0c4:	d2 82       	std	Z+2, r13	; 0x02
   1a0c6:	e3 82       	std	Z+3, r14	; 0x03
   1a0c8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a0cc:	01 e2       	ldi	r16, 0x21	; 33
   1a0ce:	10 e0       	ldi	r17, 0x00	; 0
   1a0d0:	1f 8b       	std	Y+23, r17	; 0x17
   1a0d2:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a0d4:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a0d6:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a0d8:	8d 90       	ld	r8, X+
   1a0da:	9c 90       	ld	r9, X
   1a0dc:	81 14       	cp	r8, r1
   1a0de:	91 04       	cpc	r9, r1
   1a0e0:	19 f0       	breq	.+6      	; 0x1a0e8 <lif_dir+0x1f0>
   1a0e2:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a0e4:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a0e6:	02 c0       	rjmp	.+4      	; 0x1a0ec <lif_dir+0x1f4>
   1a0e8:	01 e5       	ldi	r16, 0x51	; 81
   1a0ea:	16 e1       	ldi	r17, 0x16	; 22
   1a0ec:	a8 a5       	ldd	r26, Y+40	; 0x28
   1a0ee:	b9 a5       	ldd	r27, Y+41	; 0x29
   1a0f0:	8d 91       	ld	r24, X+
   1a0f2:	9d 91       	ld	r25, X+
   1a0f4:	0d 90       	ld	r0, X+
   1a0f6:	bc 91       	ld	r27, X
   1a0f8:	a0 2d       	mov	r26, r0
   1a0fa:	88 a3       	std	Y+32, r24	; 0x20
   1a0fc:	99 a3       	std	Y+33, r25	; 0x21
   1a0fe:	aa a3       	std	Y+34, r26	; 0x22
   1a100:	bb a3       	std	Y+35, r27	; 0x23
   1a102:	ea a5       	ldd	r30, Y+42	; 0x2a
   1a104:	fb a5       	ldd	r31, Y+43	; 0x2b
   1a106:	a0 80       	ld	r10, Z
   1a108:	b1 80       	ldd	r11, Z+1	; 0x01
   1a10a:	8c a5       	ldd	r24, Y+44	; 0x2c
   1a10c:	9d a5       	ldd	r25, Y+45	; 0x2d
   1a10e:	0e 94 1d c3 	call	0x1863a	; 0x1863a <lif_lifbcd2timestr>
   1a112:	ed b7       	in	r30, 0x3d	; 61
   1a114:	fe b7       	in	r31, 0x3e	; 62
   1a116:	95 8b       	std	Z+21, r25	; 0x15
   1a118:	84 8b       	std	Z+20, r24	; 0x14
   1a11a:	b3 8a       	std	Z+19, r11	; 0x13
   1a11c:	a2 8a       	std	Z+18, r10	; 0x12
   1a11e:	2e 89       	ldd	r18, Y+22	; 0x16
   1a120:	3f 89       	ldd	r19, Y+23	; 0x17
   1a122:	31 8b       	std	Z+17, r19	; 0x11
   1a124:	20 8b       	std	Z+16, r18	; 0x10
   1a126:	88 8d       	ldd	r24, Y+24	; 0x18
   1a128:	99 8d       	ldd	r25, Y+25	; 0x19
   1a12a:	aa 8d       	ldd	r26, Y+26	; 0x1a
   1a12c:	bb 8d       	ldd	r27, Y+27	; 0x1b
   1a12e:	84 87       	std	Z+12, r24	; 0x0c
   1a130:	95 87       	std	Z+13, r25	; 0x0d
   1a132:	a6 87       	std	Z+14, r26	; 0x0e
   1a134:	b7 87       	std	Z+15, r27	; 0x0f
   1a136:	88 a1       	ldd	r24, Y+32	; 0x20
   1a138:	99 a1       	ldd	r25, Y+33	; 0x21
   1a13a:	aa a1       	ldd	r26, Y+34	; 0x22
   1a13c:	bb a1       	ldd	r27, Y+35	; 0x23
   1a13e:	80 87       	std	Z+8, r24	; 0x08
   1a140:	91 87       	std	Z+9, r25	; 0x09
   1a142:	a2 87       	std	Z+10, r26	; 0x0a
   1a144:	b3 87       	std	Z+11, r27	; 0x0b
   1a146:	97 82       	std	Z+7, r9	; 0x07
   1a148:	86 82       	std	Z+6, r8	; 0x06
   1a14a:	15 83       	std	Z+5, r17	; 0x05
   1a14c:	04 83       	std	Z+4, r16	; 0x04
   1a14e:	41 82       	std	Z+1, r4	; 0x01
   1a150:	52 82       	std	Z+2, r5	; 0x02
   1a152:	63 82       	std	Z+3, r6	; 0x03
   1a154:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a158:	ff ef       	ldi	r31, 0xFF	; 255
   1a15a:	2f 1a       	sub	r2, r31
   1a15c:	3f 0a       	sbc	r3, r31
    }
   1a15e:	4c cf       	rjmp	.-360    	; 0x19ff8 <lif_dir+0x100>

    printf("\n");
   1a160:	89 eb       	ldi	r24, 0xB9	; 185
   1a162:	96 e3       	ldi	r25, 0x36	; 54
   1a164:	a0 e0       	ldi	r26, 0x00	; 0
   1a166:	ed b7       	in	r30, 0x3d	; 61
   1a168:	fe b7       	in	r31, 0x3e	; 62
   1a16a:	81 83       	std	Z+1, r24	; 0x01
   1a16c:	92 83       	std	Z+2, r25	; 0x02
   1a16e:	a3 83       	std	Z+3, r26	; 0x03
   1a170:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a174:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a176:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a178:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a17a:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a17c:	09 2e       	mov	r0, r25
   1a17e:	00 0c       	add	r0, r0
   1a180:	aa 0b       	sbc	r26, r26
   1a182:	bb 0b       	sbc	r27, r27
   1a184:	ed b7       	in	r30, 0x3d	; 61
   1a186:	fe b7       	in	r31, 0x3e	; 62
   1a188:	84 83       	std	Z+4, r24	; 0x04
   1a18a:	95 83       	std	Z+5, r25	; 0x05
   1a18c:	a6 83       	std	Z+6, r26	; 0x06
   1a18e:	b7 83       	std	Z+7, r27	; 0x07
   1a190:	8d ea       	ldi	r24, 0xAD	; 173
   1a192:	96 e3       	ldi	r25, 0x36	; 54
   1a194:	a0 e0       	ldi	r26, 0x00	; 0
   1a196:	81 83       	std	Z+1, r24	; 0x01
   1a198:	92 83       	std	Z+2, r25	; 0x02
   1a19a:	a3 83       	std	Z+3, r26	; 0x03
   1a19c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a1a0:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a1a2:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a1a4:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a1a6:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a1a8:	09 2e       	mov	r0, r25
   1a1aa:	00 0c       	add	r0, r0
   1a1ac:	aa 0b       	sbc	r26, r26
   1a1ae:	bb 0b       	sbc	r27, r27
   1a1b0:	ed b7       	in	r30, 0x3d	; 61
   1a1b2:	fe b7       	in	r31, 0x3e	; 62
   1a1b4:	84 83       	std	Z+4, r24	; 0x04
   1a1b6:	95 83       	std	Z+5, r25	; 0x05
   1a1b8:	a6 83       	std	Z+6, r26	; 0x06
   1a1ba:	b7 83       	std	Z+7, r27	; 0x07
   1a1bc:	80 ea       	ldi	r24, 0xA0	; 160
   1a1be:	96 e3       	ldi	r25, 0x36	; 54
   1a1c0:	a0 e0       	ldi	r26, 0x00	; 0
   1a1c2:	81 83       	std	Z+1, r24	; 0x01
   1a1c4:	92 83       	std	Z+2, r25	; 0x02
   1a1c6:	a3 83       	std	Z+3, r26	; 0x03
   1a1c8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a1cc:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a1ce:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a1d0:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a1d2:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a1d4:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a1d6:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a1d8:	ed b7       	in	r30, 0x3d	; 61
   1a1da:	fe b7       	in	r31, 0x3e	; 62
   1a1dc:	84 83       	std	Z+4, r24	; 0x04
   1a1de:	95 83       	std	Z+5, r25	; 0x05
   1a1e0:	a6 83       	std	Z+6, r26	; 0x06
   1a1e2:	b7 83       	std	Z+7, r27	; 0x07
   1a1e4:	8f e8       	ldi	r24, 0x8F	; 143
   1a1e6:	96 e3       	ldi	r25, 0x36	; 54
   1a1e8:	a0 e0       	ldi	r26, 0x00	; 0
   1a1ea:	81 83       	std	Z+1, r24	; 0x01
   1a1ec:	92 83       	std	Z+2, r25	; 0x02
   1a1ee:	a3 83       	std	Z+3, r26	; 0x03
   1a1f0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a1f4:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a1f6:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a1f8:	85 a9       	ldd	r24, Z+53	; 0x35
   1a1fa:	96 a9       	ldd	r25, Z+54	; 0x36
   1a1fc:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a1fe:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a200:	ed b7       	in	r30, 0x3d	; 61
   1a202:	fe b7       	in	r31, 0x3e	; 62
   1a204:	84 83       	std	Z+4, r24	; 0x04
   1a206:	95 83       	std	Z+5, r25	; 0x05
   1a208:	a6 83       	std	Z+6, r26	; 0x06
   1a20a:	b7 83       	std	Z+7, r27	; 0x07
   1a20c:	8c e7       	ldi	r24, 0x7C	; 124
   1a20e:	96 e3       	ldi	r25, 0x36	; 54
   1a210:	a0 e0       	ldi	r26, 0x00	; 0
   1a212:	81 83       	std	Z+1, r24	; 0x01
   1a214:	92 83       	std	Z+2, r25	; 0x02
   1a216:	a3 83       	std	Z+3, r26	; 0x03
   1a218:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a21c:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a21e:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a220:	84 89       	ldd	r24, Z+20	; 0x14
   1a222:	95 89       	ldd	r25, Z+21	; 0x15
   1a224:	a6 89       	ldd	r26, Z+22	; 0x16
   1a226:	b7 89       	ldd	r27, Z+23	; 0x17
   1a228:	ed b7       	in	r30, 0x3d	; 61
   1a22a:	fe b7       	in	r31, 0x3e	; 62
   1a22c:	84 83       	std	Z+4, r24	; 0x04
   1a22e:	95 83       	std	Z+5, r25	; 0x05
   1a230:	a6 83       	std	Z+6, r26	; 0x06
   1a232:	b7 83       	std	Z+7, r27	; 0x07
   1a234:	89 e6       	ldi	r24, 0x69	; 105
   1a236:	96 e3       	ldi	r25, 0x36	; 54
   1a238:	a0 e0       	ldi	r26, 0x00	; 0
   1a23a:	81 83       	std	Z+1, r24	; 0x01
   1a23c:	92 83       	std	Z+2, r25	; 0x02
   1a23e:	a3 83       	std	Z+3, r26	; 0x03
   1a240:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a244:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a246:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a248:	80 8d       	ldd	r24, Z+24	; 0x18
   1a24a:	91 8d       	ldd	r25, Z+25	; 0x19
   1a24c:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a24e:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a250:	ed b7       	in	r30, 0x3d	; 61
   1a252:	fe b7       	in	r31, 0x3e	; 62
   1a254:	84 83       	std	Z+4, r24	; 0x04
   1a256:	95 83       	std	Z+5, r25	; 0x05
   1a258:	a6 83       	std	Z+6, r26	; 0x06
   1a25a:	b7 83       	std	Z+7, r27	; 0x07
   1a25c:	86 e5       	ldi	r24, 0x56	; 86
   1a25e:	96 e3       	ldi	r25, 0x36	; 54
   1a260:	a0 e0       	ldi	r26, 0x00	; 0
   1a262:	81 83       	std	Z+1, r24	; 0x01
   1a264:	92 83       	std	Z+2, r25	; 0x02
   1a266:	a3 83       	std	Z+3, r26	; 0x03
   1a268:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a26c:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a26e:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a270:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a274:	af 96       	adiw	r28, 0x2f	; 47
   1a276:	0f b6       	in	r0, 0x3f	; 63
   1a278:	f8 94       	cli
   1a27a:	de bf       	out	0x3e, r29	; 62
   1a27c:	0f be       	out	0x3f, r0	; 63
   1a27e:	cd bf       	out	0x3d, r28	; 61
   1a280:	df 91       	pop	r29
   1a282:	cf 91       	pop	r28
   1a284:	1f 91       	pop	r17
   1a286:	0f 91       	pop	r16
   1a288:	ef 90       	pop	r14
   1a28a:	df 90       	pop	r13
   1a28c:	cf 90       	pop	r12
   1a28e:	bf 90       	pop	r11
   1a290:	af 90       	pop	r10
   1a292:	9f 90       	pop	r9
   1a294:	8f 90       	pop	r8
   1a296:	6f 90       	pop	r6
   1a298:	5f 90       	pop	r5
   1a29a:	4f 90       	pop	r4
   1a29c:	3f 90       	pop	r3
   1a29e:	2f 90       	pop	r2
   1a2a0:	08 95       	ret

0001a2a2 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a2a2:	a5 e0       	ldi	r26, 0x05	; 5
   1a2a4:	b0 e0       	ldi	r27, 0x00	; 0
   1a2a6:	e7 e5       	ldi	r30, 0x57	; 87
   1a2a8:	f1 ed       	ldi	r31, 0xD1	; 209
   1a2aa:	0c 94 46 e3 	jmp	0x1c68c	; 0x1c68c <__prologue_saves__+0x10>
   1a2ae:	7c 01       	movw	r14, r24
   1a2b0:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a2b2:	cb 01       	movw	r24, r22
   1a2b4:	0e 94 0e c0 	call	0x1801c	; 0x1801c <lif_checkname>
   1a2b8:	89 2b       	or	r24, r25
   1a2ba:	69 f4       	brne	.+26     	; 0x1a2d6 <lif_find_file+0x34>
    {
        if(debuglevel & LIF_DEBUG)
   1a2bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a2c0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a2c4:	92 ff       	sbrs	r25, 2
   1a2c6:	48 c0       	rjmp	.+144    	; 0x1a358 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a2c8:	ed b7       	in	r30, 0x3d	; 61
   1a2ca:	fe b7       	in	r31, 0x3e	; 62
   1a2cc:	d5 83       	std	Z+5, r29	; 0x05
   1a2ce:	c4 83       	std	Z+4, r28	; 0x04
   1a2d0:	8f e2       	ldi	r24, 0x2F	; 47
   1a2d2:	96 e3       	ldi	r25, 0x36	; 54
   1a2d4:	15 c0       	rjmp	.+42     	; 0x1a300 <lif_find_file+0x5e>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a2d6:	fe 01       	movw	r30, r28
   1a2d8:	01 90       	ld	r0, Z+
   1a2da:	00 20       	and	r0, r0
   1a2dc:	e9 f7       	brne	.-6      	; 0x1a2d8 <lif_find_file+0x36>
   1a2de:	31 97       	sbiw	r30, 0x01	; 1
   1a2e0:	ec 1b       	sub	r30, r28
   1a2e2:	fd 0b       	sbc	r31, r29
   1a2e4:	3b 97       	sbiw	r30, 0x0b	; 11
   1a2e6:	98 f0       	brcs	.+38     	; 0x1a30e <lif_find_file+0x6c>
    {
        if(debuglevel & LIF_DEBUG)
   1a2e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a2ec:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a2f0:	92 ff       	sbrs	r25, 2
   1a2f2:	32 c0       	rjmp	.+100    	; 0x1a358 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a2f4:	ed b7       	in	r30, 0x3d	; 61
   1a2f6:	fe b7       	in	r31, 0x3e	; 62
   1a2f8:	d5 83       	std	Z+5, r29	; 0x05
   1a2fa:	c4 83       	std	Z+4, r28	; 0x04
   1a2fc:	8a e0       	ldi	r24, 0x0A	; 10
   1a2fe:	96 e3       	ldi	r25, 0x36	; 54
   1a300:	a0 e0       	ldi	r26, 0x00	; 0
   1a302:	81 83       	std	Z+1, r24	; 0x01
   1a304:	92 83       	std	Z+2, r25	; 0x02
   1a306:	a3 83       	std	Z+3, r26	; 0x03
   1a308:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1a30c:	25 c0       	rjmp	.+74     	; 0x1a358 <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1a30e:	e1 14       	cp	r14, r1
   1a310:	f1 04       	cpc	r15, r1
   1a312:	11 f1       	breq	.+68     	; 0x1a358 <lif_find_file+0xb6>
   1a314:	00 e0       	ldi	r16, 0x00	; 0
   1a316:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a318:	67 01       	movw	r12, r14
   1a31a:	fa e5       	ldi	r31, 0x5A	; 90
   1a31c:	cf 0e       	add	r12, r31
   1a31e:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a320:	57 01       	movw	r10, r14
   1a322:	2f e4       	ldi	r18, 0x4F	; 79
   1a324:	a2 0e       	add	r10, r18
   1a326:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a328:	b8 01       	movw	r22, r16
   1a32a:	c7 01       	movw	r24, r14
   1a32c:	0e 94 4d c8 	call	0x1909a	; 0x1909a <lif_readdirindex>
   1a330:	89 2b       	or	r24, r25
   1a332:	91 f0       	breq	.+36     	; 0x1a358 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a334:	f6 01       	movw	r30, r12
   1a336:	80 81       	ld	r24, Z
   1a338:	91 81       	ldd	r25, Z+1	; 0x01
   1a33a:	8f 3f       	cpi	r24, 0xFF	; 255
   1a33c:	ff ef       	ldi	r31, 0xFF	; 255
   1a33e:	9f 07       	cpc	r25, r31
   1a340:	59 f0       	breq	.+22     	; 0x1a358 <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a342:	89 2b       	or	r24, r25
   1a344:	31 f0       	breq	.+12     	; 0x1a352 <lif_find_file+0xb0>
   1a346:	be 01       	movw	r22, r28
   1a348:	c5 01       	movw	r24, r10
   1a34a:	0e 94 ab 2f 	call	0x5f56	; 0x5f56 <strcasecmp>
   1a34e:	89 2b       	or	r24, r25
   1a350:	31 f0       	breq	.+12     	; 0x1a35e <lif_find_file+0xbc>
            break;
        ++index;
   1a352:	0f 5f       	subi	r16, 0xFF	; 255
   1a354:	1f 4f       	sbci	r17, 0xFF	; 255
   1a356:	e8 cf       	rjmp	.-48     	; 0x1a328 <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a358:	8f ef       	ldi	r24, 0xFF	; 255
   1a35a:	9f ef       	ldi	r25, 0xFF	; 255
   1a35c:	01 c0       	rjmp	.+2      	; 0x1a360 <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a35e:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a360:	cd b7       	in	r28, 0x3d	; 61
   1a362:	de b7       	in	r29, 0x3e	; 62
   1a364:	25 96       	adiw	r28, 0x05	; 5
   1a366:	ea e0       	ldi	r30, 0x0A	; 10
   1a368:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__epilogue_restores__+0x10>

0001a36c <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a36c:	a5 e0       	ldi	r26, 0x05	; 5
   1a36e:	b0 e0       	ldi	r27, 0x00	; 0
   1a370:	ec eb       	ldi	r30, 0xBC	; 188
   1a372:	f1 ed       	ldi	r31, 0xD1	; 209
   1a374:	0c 94 48 e3 	jmp	0x1c690	; 0x1c690 <__prologue_saves__+0x14>
   1a378:	6b 01       	movw	r12, r22
   1a37a:	7c 01       	movw	r14, r24
   1a37c:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a37e:	20 e0       	ldi	r18, 0x00	; 0
   1a380:	31 e0       	ldi	r19, 0x01	; 1
   1a382:	40 e0       	ldi	r20, 0x00	; 0
   1a384:	50 e0       	ldi	r21, 0x00	; 0
   1a386:	0e 94 f3 e2 	call	0x1c5e6	; 0x1c5e6 <__divmodsi4>
    if(!pos)
   1a38a:	61 15       	cp	r22, r1
   1a38c:	71 05       	cpc	r23, r1
   1a38e:	e1 f1       	breq	.+120    	; 0x1a408 <lif_e010_pad_sector+0x9c>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a390:	c0 e0       	ldi	r28, 0x00	; 0
   1a392:	d1 e0       	ldi	r29, 0x01	; 1
   1a394:	c6 1b       	sub	r28, r22
   1a396:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1a398:	f8 01       	movw	r30, r16
   1a39a:	8f ee       	ldi	r24, 0xEF	; 239
   1a39c:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a39e:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a3a0:	cf 01       	movw	r24, r30
   1a3a2:	80 1b       	sub	r24, r16
   1a3a4:	91 0b       	sbc	r25, r17
   1a3a6:	8c 17       	cp	r24, r28
   1a3a8:	9d 07       	cpc	r25, r29
   1a3aa:	14 f4       	brge	.+4      	; 0x1a3b0 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a3ac:	21 93       	st	Z+, r18
   1a3ae:	f8 cf       	rjmp	.-16     	; 0x1a3a0 <lif_e010_pad_sector+0x34>
   1a3b0:	1c 16       	cp	r1, r28
   1a3b2:	1d 06       	cpc	r1, r29
   1a3b4:	14 f0       	brlt	.+4      	; 0x1a3ba <lif_e010_pad_sector+0x4e>
   1a3b6:	c1 e0       	ldi	r28, 0x01	; 1
   1a3b8:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a3ba:	ce 01       	movw	r24, r28
   1a3bc:	0d 2e       	mov	r0, r29
   1a3be:	00 0c       	add	r0, r0
   1a3c0:	aa 0b       	sbc	r26, r26
   1a3c2:	bb 0b       	sbc	r27, r27
   1a3c4:	bc 01       	movw	r22, r24
   1a3c6:	cd 01       	movw	r24, r26
   1a3c8:	6c 0d       	add	r22, r12
   1a3ca:	7d 1d       	adc	r23, r13
   1a3cc:	8e 1d       	adc	r24, r14
   1a3ce:	9f 1d       	adc	r25, r15
   1a3d0:	20 e0       	ldi	r18, 0x00	; 0
   1a3d2:	31 e0       	ldi	r19, 0x01	; 1
   1a3d4:	40 e0       	ldi	r20, 0x00	; 0
   1a3d6:	50 e0       	ldi	r21, 0x00	; 0
   1a3d8:	0e 94 f3 e2 	call	0x1c5e6	; 0x1c5e6 <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1a3dc:	61 15       	cp	r22, r1
   1a3de:	71 05       	cpc	r23, r1
   1a3e0:	b1 f0       	breq	.+44     	; 0x1a40e <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & LIF_DEBUG)
   1a3e2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a3e6:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a3ea:	32 ff       	sbrs	r19, 2
   1a3ec:	12 c0       	rjmp	.+36     	; 0x1a412 <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a3ee:	ed b7       	in	r30, 0x3d	; 61
   1a3f0:	fe b7       	in	r31, 0x3e	; 62
   1a3f2:	75 83       	std	Z+5, r23	; 0x05
   1a3f4:	64 83       	std	Z+4, r22	; 0x04
   1a3f6:	81 ed       	ldi	r24, 0xD1	; 209
   1a3f8:	95 e3       	ldi	r25, 0x35	; 53
   1a3fa:	a0 e0       	ldi	r26, 0x00	; 0
   1a3fc:	81 83       	std	Z+1, r24	; 0x01
   1a3fe:	92 83       	std	Z+2, r25	; 0x02
   1a400:	a3 83       	std	Z+3, r26	; 0x03
   1a402:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1a406:	05 c0       	rjmp	.+10     	; 0x1a412 <lif_e010_pad_sector+0xa6>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a408:	80 e0       	ldi	r24, 0x00	; 0
   1a40a:	90 e0       	ldi	r25, 0x00	; 0
   1a40c:	04 c0       	rjmp	.+8      	; 0x1a416 <lif_e010_pad_sector+0xaa>
   1a40e:	ce 01       	movw	r24, r28
   1a410:	02 c0       	rjmp	.+4      	; 0x1a416 <lif_e010_pad_sector+0xaa>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a412:	8f ef       	ldi	r24, 0xFF	; 255
   1a414:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a416:	cd b7       	in	r28, 0x3d	; 61
   1a418:	de b7       	in	r29, 0x3e	; 62
   1a41a:	25 96       	adiw	r28, 0x05	; 5
   1a41c:	e8 e0       	ldi	r30, 0x08	; 8
   1a41e:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__epilogue_restores__+0x14>

0001a422 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a422:	a5 e0       	ldi	r26, 0x05	; 5
   1a424:	b0 e0       	ldi	r27, 0x00	; 0
   1a426:	e7 e1       	ldi	r30, 0x17	; 23
   1a428:	f2 ed       	ldi	r31, 0xD2	; 210
   1a42a:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
   1a42e:	ec 01       	movw	r28, r24
   1a430:	4a 01       	movw	r8, r20
   1a432:	5b 01       	movw	r10, r22
   1a434:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1a436:	fc 01       	movw	r30, r24
   1a438:	01 90       	ld	r0, Z+
   1a43a:	00 20       	and	r0, r0
   1a43c:	e9 f7       	brne	.-6      	; 0x1a438 <lif_ascii_string_to_e010+0x16>
   1a43e:	31 97       	sbiw	r30, 0x01	; 1
   1a440:	6f 01       	movw	r12, r30
   1a442:	c8 1a       	sub	r12, r24
   1a444:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a446:	41 2c       	mov	r4, r1
   1a448:	51 2c       	mov	r5, r1
   1a44a:	32 01       	movw	r6, r4
   1a44c:	53 94       	inc	r5
   1a44e:	cb 01       	movw	r24, r22
   1a450:	ba 01       	movw	r22, r20
   1a452:	a3 01       	movw	r20, r6
   1a454:	92 01       	movw	r18, r4
   1a456:	0e 94 f3 e2 	call	0x1c5e6	; 0x1c5e6 <__divmodsi4>
   1a45a:	21 2c       	mov	r2, r1
   1a45c:	33 24       	eor	r3, r3
   1a45e:	33 94       	inc	r3
   1a460:	c1 01       	movw	r24, r2
   1a462:	86 1b       	sub	r24, r22
   1a464:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1a466:	86 30       	cpi	r24, 0x06	; 6
   1a468:	91 05       	cpc	r25, r1
   1a46a:	20 f0       	brcs	.+8      	; 0x1a474 <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a46c:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1a46e:	00 e0       	ldi	r16, 0x00	; 0
   1a470:	10 e0       	ldi	r17, 0x00	; 0
   1a472:	17 c0       	rjmp	.+46     	; 0x1a4a2 <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1a474:	a7 01       	movw	r20, r14
   1a476:	c5 01       	movw	r24, r10
   1a478:	b4 01       	movw	r22, r8
   1a47a:	78 df       	rcall	.-272    	; 0x1a36c <lif_e010_pad_sector>
   1a47c:	8c 01       	movw	r16, r24
        if(ind < 0)
   1a47e:	97 fd       	sbrc	r25, 7
   1a480:	83 c0       	rjmp	.+262    	; 0x1a588 <lif_ascii_string_to_e010+0x166>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1a482:	09 2e       	mov	r0, r25
   1a484:	00 0c       	add	r0, r0
   1a486:	aa 0b       	sbc	r26, r26
   1a488:	bb 0b       	sbc	r27, r27
   1a48a:	bc 01       	movw	r22, r24
   1a48c:	cd 01       	movw	r24, r26
   1a48e:	68 0d       	add	r22, r8
   1a490:	79 1d       	adc	r23, r9
   1a492:	8a 1d       	adc	r24, r10
   1a494:	9b 1d       	adc	r25, r11
   1a496:	a3 01       	movw	r20, r6
   1a498:	92 01       	movw	r18, r4
   1a49a:	0e 94 f3 e2 	call	0x1c5e6	; 0x1c5e6 <__divmodsi4>
   1a49e:	26 1a       	sub	r2, r22
   1a4a0:	37 0a       	sbc	r3, r23
   1a4a2:	f7 01       	movw	r30, r14
   1a4a4:	e0 0f       	add	r30, r16
   1a4a6:	f1 1f       	adc	r31, r17
   1a4a8:	0d 5f       	subi	r16, 0xFD	; 253
   1a4aa:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1a4ac:	c6 01       	movw	r24, r12
   1a4ae:	02 96       	adiw	r24, 0x02	; 2
   1a4b0:	82 15       	cp	r24, r2
   1a4b2:	93 05       	cpc	r25, r3
   1a4b4:	84 f4       	brge	.+32     	; 0x1a4d6 <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1a4b6:	8f ed       	ldi	r24, 0xDF	; 223
   1a4b8:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a4ba:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1a4bc:	d2 82       	std	Z+2, r13	; 0x02
   1a4be:	f7 01       	movw	r30, r14
   1a4c0:	e0 0f       	add	r30, r16
   1a4c2:	f1 1f       	adc	r31, r17
   1a4c4:	cf 01       	movw	r24, r30
   1a4c6:	8e 19       	sub	r24, r14
   1a4c8:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a4ca:	29 91       	ld	r18, Y+
   1a4cc:	22 23       	and	r18, r18
   1a4ce:	09 f4       	brne	.+2      	; 0x1a4d2 <lif_ascii_string_to_e010+0xb0>
   1a4d0:	5b c0       	rjmp	.+182    	; 0x1a588 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1a4d2:	21 93       	st	Z+, r18
   1a4d4:	f7 cf       	rjmp	.-18     	; 0x1a4c4 <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1a4d6:	8f ec       	ldi	r24, 0xCF	; 207
   1a4d8:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a4da:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1a4dc:	d2 82       	std	Z+2, r13	; 0x02
   1a4de:	d7 01       	movw	r26, r14
   1a4e0:	a0 0f       	add	r26, r16
   1a4e2:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a4e4:	fe 01       	movw	r30, r28
   1a4e6:	81 91       	ld	r24, Z+
   1a4e8:	81 11       	cpse	r24, r1
   1a4ea:	0e c0       	rjmp	.+28     	; 0x1a508 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1a4ec:	c8 01       	movw	r24, r16
   1a4ee:	01 2e       	mov	r0, r17
   1a4f0:	00 0c       	add	r0, r0
   1a4f2:	aa 0b       	sbc	r26, r26
   1a4f4:	bb 0b       	sbc	r27, r27
   1a4f6:	bc 01       	movw	r22, r24
   1a4f8:	cd 01       	movw	r24, r26
   1a4fa:	68 0d       	add	r22, r8
   1a4fc:	79 1d       	adc	r23, r9
   1a4fe:	8a 1d       	adc	r24, r10
   1a500:	9b 1d       	adc	r25, r11
   1a502:	61 11       	cpse	r22, r1
   1a504:	09 c0       	rjmp	.+18     	; 0x1a518 <lif_ascii_string_to_e010+0xf6>
   1a506:	21 c0       	rjmp	.+66     	; 0x1a54a <lif_ascii_string_to_e010+0x128>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a508:	02 15       	cp	r16, r2
   1a50a:	13 05       	cpc	r17, r3
   1a50c:	7c f7       	brge	.-34     	; 0x1a4ec <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1a50e:	0f 5f       	subi	r16, 0xFF	; 255
   1a510:	1f 4f       	sbci	r17, 0xFF	; 255
   1a512:	8d 93       	st	X+, r24
   1a514:	ef 01       	movw	r28, r30
   1a516:	e6 cf       	rjmp	.-52     	; 0x1a4e4 <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
   1a518:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a51c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a520:	32 ff       	sbrs	r19, 2
   1a522:	30 c0       	rjmp	.+96     	; 0x1a584 <lif_ascii_string_to_e010+0x162>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1a524:	20 e0       	ldi	r18, 0x00	; 0
   1a526:	31 e0       	ldi	r19, 0x01	; 1
   1a528:	40 e0       	ldi	r20, 0x00	; 0
   1a52a:	50 e0       	ldi	r21, 0x00	; 0
   1a52c:	0e 94 f3 e2 	call	0x1c5e6	; 0x1c5e6 <__divmodsi4>
   1a530:	ed b7       	in	r30, 0x3d	; 61
   1a532:	fe b7       	in	r31, 0x3e	; 62
   1a534:	75 83       	std	Z+5, r23	; 0x05
   1a536:	64 83       	std	Z+4, r22	; 0x04
   1a538:	8d ea       	ldi	r24, 0xAD	; 173
   1a53a:	95 e3       	ldi	r25, 0x35	; 53
   1a53c:	a0 e0       	ldi	r26, 0x00	; 0
   1a53e:	81 83       	std	Z+1, r24	; 0x01
   1a540:	92 83       	std	Z+2, r25	; 0x02
   1a542:	a3 83       	std	Z+3, r26	; 0x03
   1a544:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1a548:	1d c0       	rjmp	.+58     	; 0x1a584 <lif_ascii_string_to_e010+0x162>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1a54a:	fe 01       	movw	r30, r28
   1a54c:	01 90       	ld	r0, Z+
   1a54e:	00 20       	and	r0, r0
   1a550:	e9 f7       	brne	.-6      	; 0x1a54c <lif_ascii_string_to_e010+0x12a>
   1a552:	31 97       	sbiw	r30, 0x01	; 1
   1a554:	9f 01       	movw	r18, r30
   1a556:	2c 1b       	sub	r18, r28
   1a558:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1a55a:	d7 01       	movw	r26, r14
   1a55c:	a0 0f       	add	r26, r16
   1a55e:	b1 1f       	adc	r27, r17
   1a560:	8f e6       	ldi	r24, 0x6F	; 111
   1a562:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1a564:	fd 01       	movw	r30, r26
   1a566:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1a568:	32 83       	std	Z+2, r19	; 0x02
   1a56a:	0d 5f       	subi	r16, 0xFD	; 253
   1a56c:	1f 4f       	sbci	r17, 0xFF	; 255
   1a56e:	f7 01       	movw	r30, r14
   1a570:	e0 0f       	add	r30, r16
   1a572:	f1 1f       	adc	r31, r17
   1a574:	cf 01       	movw	r24, r30
   1a576:	8e 19       	sub	r24, r14
   1a578:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a57a:	29 91       	ld	r18, Y+
   1a57c:	22 23       	and	r18, r18
   1a57e:	21 f0       	breq	.+8      	; 0x1a588 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1a580:	21 93       	st	Z+, r18
   1a582:	f8 cf       	rjmp	.-16     	; 0x1a574 <lif_ascii_string_to_e010+0x152>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1a584:	8f ef       	ldi	r24, 0xFF	; 255
   1a586:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1a588:	cd b7       	in	r28, 0x3d	; 61
   1a58a:	de b7       	in	r29, 0x3e	; 62
   1a58c:	25 96       	adiw	r28, 0x05	; 5
   1a58e:	e2 e1       	ldi	r30, 0x12	; 18
   1a590:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

0001a594 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1a594:	ad e0       	ldi	r26, 0x0D	; 13
   1a596:	b3 e0       	ldi	r27, 0x03	; 3
   1a598:	e0 ed       	ldi	r30, 0xD0	; 208
   1a59a:	f2 ed       	ldi	r31, 0xD2	; 210
   1a59c:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
   1a5a0:	5c 01       	movw	r10, r24
   1a5a2:	2a 01       	movw	r4, r20
   1a5a4:	3b 01       	movw	r6, r22
   1a5a6:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1a5a8:	6e ef       	ldi	r22, 0xFE	; 254
   1a5aa:	78 e0       	ldi	r23, 0x08	; 8
   1a5ac:	0e 94 6f be 	call	0x17cde	; 0x17cde <lif_open>
   1a5b0:	c7 5f       	subi	r28, 0xF7	; 247
   1a5b2:	dc 4f       	sbci	r29, 0xFC	; 252
   1a5b4:	99 83       	std	Y+1, r25	; 0x01
   1a5b6:	88 83       	st	Y, r24
   1a5b8:	c9 50       	subi	r28, 0x09	; 9
   1a5ba:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1a5bc:	89 2b       	or	r24, r25
   1a5be:	09 f4       	brne	.+2      	; 0x1a5c2 <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1a5c0:	63 c0       	rjmp	.+198    	; 0x1a688 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1a5c2:	81 2c       	mov	r8, r1
   1a5c4:	91 2c       	mov	r9, r1
   1a5c6:	c1 2c       	mov	r12, r1
   1a5c8:	d1 2c       	mov	r13, r1
   1a5ca:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1a5cc:	8f e9       	ldi	r24, 0x9F	; 159
   1a5ce:	95 e3       	ldi	r25, 0x35	; 53
   1a5d0:	9c 01       	movw	r18, r24
   1a5d2:	40 e0       	ldi	r20, 0x00	; 0
   1a5d4:	c5 5f       	subi	r28, 0xF5	; 245
   1a5d6:	dc 4f       	sbci	r29, 0xFC	; 252
   1a5d8:	28 83       	st	Y, r18
   1a5da:	39 83       	std	Y+1, r19	; 0x01
   1a5dc:	4a 83       	std	Y+2, r20	; 0x02
   1a5de:	cb 50       	subi	r28, 0x0B	; 11
   1a5e0:	d3 40       	sbci	r29, 0x03	; 3
   1a5e2:	14 c0       	rjmp	.+40     	; 0x1a60c <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1a5e4:	c1 01       	movw	r24, r2
   1a5e6:	03 2c       	mov	r0, r3
   1a5e8:	00 0c       	add	r0, r0
   1a5ea:	aa 0b       	sbc	r26, r26
   1a5ec:	bb 0b       	sbc	r27, r27
   1a5ee:	48 0e       	add	r4, r24
   1a5f0:	59 1e       	adc	r5, r25
   1a5f2:	6a 1e       	adc	r6, r26
   1a5f4:	7b 1e       	adc	r7, r27
        bytes += size;
   1a5f6:	c8 0e       	add	r12, r24
   1a5f8:	d9 1e       	adc	r13, r25
   1a5fa:	ea 1e       	adc	r14, r26
   1a5fc:	fb 1e       	adc	r15, r27
        count += size;
   1a5fe:	82 0c       	add	r8, r2
   1a600:	93 1c       	adc	r9, r3

        if(count > 256)
   1a602:	31 e0       	ldi	r19, 0x01	; 1
   1a604:	83 16       	cp	r8, r19
   1a606:	93 06       	cpc	r9, r19
   1a608:	0c f0       	brlt	.+2      	; 0x1a60c <lif_add_ascii_file_as_e010_wrapper+0x78>
   1a60a:	43 c0       	rjmp	.+134    	; 0x1a692 <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1a60c:	c7 5f       	subi	r28, 0xF7	; 247
   1a60e:	dc 4f       	sbci	r29, 0xFC	; 252
   1a610:	48 81       	ld	r20, Y
   1a612:	59 81       	ldd	r21, Y+1	; 0x01
   1a614:	c9 50       	subi	r28, 0x09	; 9
   1a616:	d3 40       	sbci	r29, 0x03	; 3
   1a618:	6d ef       	ldi	r22, 0xFD	; 253
   1a61a:	70 e0       	ldi	r23, 0x00	; 0
   1a61c:	ce 01       	movw	r24, r28
   1a61e:	88 5f       	subi	r24, 0xF8	; 248
   1a620:	9d 4f       	sbci	r25, 0xFD	; 253
   1a622:	0e 94 43 75 	call	0xea86	; 0xea86 <fgets>
   1a626:	89 2b       	or	r24, r25
   1a628:	09 f4       	brne	.+2      	; 0x1a62c <lif_add_ascii_file_as_e010_wrapper+0x98>
   1a62a:	4b c0       	rjmp	.+150    	; 0x1a6c2 <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1a62c:	ce 01       	movw	r24, r28
   1a62e:	88 5f       	subi	r24, 0xF8	; 248
   1a630:	9d 4f       	sbci	r25, 0xFD	; 253
   1a632:	0e 94 22 30 	call	0x6044	; 0x6044 <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1a636:	6a e5       	ldi	r22, 0x5A	; 90
   1a638:	76 e1       	ldi	r23, 0x16	; 22
   1a63a:	ce 01       	movw	r24, r28
   1a63c:	88 5f       	subi	r24, 0xF8	; 248
   1a63e:	9d 4f       	sbci	r25, 0xFD	; 253
   1a640:	0e 94 65 2f 	call	0x5eca	; 0x5eca <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1a644:	9e 01       	movw	r18, r28
   1a646:	28 5f       	subi	r18, 0xF8	; 248
   1a648:	3f 4f       	sbci	r19, 0xFF	; 255
   1a64a:	b3 01       	movw	r22, r6
   1a64c:	a2 01       	movw	r20, r4
   1a64e:	ce 01       	movw	r24, r28
   1a650:	88 5f       	subi	r24, 0xF8	; 248
   1a652:	9d 4f       	sbci	r25, 0xFD	; 253
   1a654:	e6 de       	rcall	.-564    	; 0x1a422 <lif_ascii_string_to_e010>
   1a656:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1a658:	a1 14       	cp	r10, r1
   1a65a:	b1 04       	cpc	r11, r1
   1a65c:	19 f2       	breq	.-122    	; 0x1a5e4 <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1a65e:	8c 01       	movw	r16, r24
   1a660:	a3 01       	movw	r20, r6
   1a662:	92 01       	movw	r18, r4
   1a664:	be 01       	movw	r22, r28
   1a666:	68 5f       	subi	r22, 0xF8	; 248
   1a668:	7f 4f       	sbci	r23, 0xFF	; 255
   1a66a:	c5 01       	movw	r24, r10
   1a66c:	0e 94 46 bf 	call	0x17e8c	; 0x17e8c <lif_write>
            if(len < size)
   1a670:	82 15       	cp	r24, r2
   1a672:	93 05       	cpc	r25, r3
   1a674:	0c f0       	brlt	.+2      	; 0x1a678 <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1a676:	b6 cf       	rjmp	.-148    	; 0x1a5e4 <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1a678:	c7 5f       	subi	r28, 0xF7	; 247
   1a67a:	dc 4f       	sbci	r29, 0xFC	; 252
   1a67c:	88 81       	ld	r24, Y
   1a67e:	99 81       	ldd	r25, Y+1	; 0x01
   1a680:	c9 50       	subi	r28, 0x09	; 9
   1a682:	d3 40       	sbci	r29, 0x03	; 3
   1a684:	0e 94 d5 7b 	call	0xf7aa	; 0xf7aa <fclose>
                return(-1);
   1a688:	6f ef       	ldi	r22, 0xFF	; 255
   1a68a:	7f ef       	ldi	r23, 0xFF	; 255
   1a68c:	8f ef       	ldi	r24, 0xFF	; 255
   1a68e:	9f ef       	ldi	r25, 0xFF	; 255
   1a690:	84 c0       	rjmp	.+264    	; 0x1a79a <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1a692:	a1 14       	cp	r10, r1
   1a694:	b1 04       	cpc	r11, r1
   1a696:	91 f0       	breq	.+36     	; 0x1a6bc <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1a698:	ed b7       	in	r30, 0x3d	; 61
   1a69a:	fe b7       	in	r31, 0x3e	; 62
   1a69c:	c4 82       	std	Z+4, r12	; 0x04
   1a69e:	d5 82       	std	Z+5, r13	; 0x05
   1a6a0:	e6 82       	std	Z+6, r14	; 0x06
   1a6a2:	f7 82       	std	Z+7, r15	; 0x07
   1a6a4:	c5 5f       	subi	r28, 0xF5	; 245
   1a6a6:	dc 4f       	sbci	r29, 0xFC	; 252
   1a6a8:	28 81       	ld	r18, Y
   1a6aa:	39 81       	ldd	r19, Y+1	; 0x01
   1a6ac:	4a 81       	ldd	r20, Y+2	; 0x02
   1a6ae:	cb 50       	subi	r28, 0x0B	; 11
   1a6b0:	d3 40       	sbci	r29, 0x03	; 3
   1a6b2:	21 83       	std	Z+1, r18	; 0x01
   1a6b4:	32 83       	std	Z+2, r19	; 0x02
   1a6b6:	43 83       	std	Z+3, r20	; 0x03
   1a6b8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1a6bc:	81 2c       	mov	r8, r1
   1a6be:	91 2c       	mov	r9, r1
   1a6c0:	a5 cf       	rjmp	.-182    	; 0x1a60c <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1a6c2:	c7 5f       	subi	r28, 0xF7	; 247
   1a6c4:	dc 4f       	sbci	r29, 0xFC	; 252
   1a6c6:	88 81       	ld	r24, Y
   1a6c8:	99 81       	ldd	r25, Y+1	; 0x01
   1a6ca:	c9 50       	subi	r28, 0x09	; 9
   1a6cc:	d3 40       	sbci	r29, 0x03	; 3
   1a6ce:	0e 94 d5 7b 	call	0xf7aa	; 0xf7aa <fclose>

// Write EOF
    str[0] = 0;
   1a6d2:	c8 5f       	subi	r28, 0xF8	; 248
   1a6d4:	dd 4f       	sbci	r29, 0xFD	; 253
   1a6d6:	18 82       	st	Y, r1
   1a6d8:	c8 50       	subi	r28, 0x08	; 8
   1a6da:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1a6dc:	9e 01       	movw	r18, r28
   1a6de:	28 5f       	subi	r18, 0xF8	; 248
   1a6e0:	3f 4f       	sbci	r19, 0xFF	; 255
   1a6e2:	b3 01       	movw	r22, r6
   1a6e4:	a2 01       	movw	r20, r4
   1a6e6:	ce 01       	movw	r24, r28
   1a6e8:	88 5f       	subi	r24, 0xF8	; 248
   1a6ea:	9d 4f       	sbci	r25, 0xFD	; 253
   1a6ec:	9a de       	rcall	.-716    	; 0x1a422 <lif_ascii_string_to_e010>
   1a6ee:	4c 01       	movw	r8, r24

    if(LIF)
   1a6f0:	a1 14       	cp	r10, r1
   1a6f2:	b1 04       	cpc	r11, r1
   1a6f4:	d1 f4       	brne	.+52     	; 0x1a72a <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1a6f6:	c4 01       	movw	r24, r8
   1a6f8:	09 2c       	mov	r0, r9
   1a6fa:	00 0c       	add	r0, r0
   1a6fc:	aa 0b       	sbc	r26, r26
   1a6fe:	bb 0b       	sbc	r27, r27
   1a700:	c8 0e       	add	r12, r24
   1a702:	d9 1e       	adc	r13, r25
   1a704:	ea 1e       	adc	r14, r26
   1a706:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1a708:	12 01       	movw	r2, r4
   1a70a:	23 01       	movw	r4, r6
   1a70c:	28 0e       	add	r2, r24
   1a70e:	39 1e       	adc	r3, r25
   1a710:	4a 1e       	adc	r4, r26
   1a712:	5b 1e       	adc	r5, r27
   1a714:	ae 01       	movw	r20, r28
   1a716:	48 5f       	subi	r20, 0xF8	; 248
   1a718:	5f 4f       	sbci	r21, 0xFF	; 255
   1a71a:	c2 01       	movw	r24, r4
   1a71c:	b1 01       	movw	r22, r2
   1a71e:	26 de       	rcall	.-948    	; 0x1a36c <lif_e010_pad_sector>
   1a720:	3c 01       	movw	r6, r24
    if(LIF)
   1a722:	a1 14       	cp	r10, r1
   1a724:	b1 04       	cpc	r11, r1
   1a726:	e1 f4       	brne	.+56     	; 0x1a760 <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1a728:	36 c0       	rjmp	.+108    	; 0x1a796 <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1a72a:	ed b7       	in	r30, 0x3d	; 61
   1a72c:	fe b7       	in	r31, 0x3e	; 62
   1a72e:	c4 82       	std	Z+4, r12	; 0x04
   1a730:	d5 82       	std	Z+5, r13	; 0x05
   1a732:	e6 82       	std	Z+6, r14	; 0x06
   1a734:	f7 82       	std	Z+7, r15	; 0x07
   1a736:	81 e9       	ldi	r24, 0x91	; 145
   1a738:	95 e3       	ldi	r25, 0x35	; 53
   1a73a:	a0 e0       	ldi	r26, 0x00	; 0
   1a73c:	81 83       	std	Z+1, r24	; 0x01
   1a73e:	92 83       	std	Z+2, r25	; 0x02
   1a740:	a3 83       	std	Z+3, r26	; 0x03
   1a742:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1a746:	84 01       	movw	r16, r8
   1a748:	a3 01       	movw	r20, r6
   1a74a:	92 01       	movw	r18, r4
   1a74c:	be 01       	movw	r22, r28
   1a74e:	68 5f       	subi	r22, 0xF8	; 248
   1a750:	7f 4f       	sbci	r23, 0xFF	; 255
   1a752:	c5 01       	movw	r24, r10
   1a754:	0e 94 46 bf 	call	0x17e8c	; 0x17e8c <lif_write>
        if(len < size)
   1a758:	88 15       	cp	r24, r8
   1a75a:	99 05       	cpc	r25, r9
   1a75c:	64 f6       	brge	.-104    	; 0x1a6f6 <lif_add_ascii_file_as_e010_wrapper+0x162>
   1a75e:	94 cf       	rjmp	.-216    	; 0x1a688 <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1a760:	8c 01       	movw	r16, r24
   1a762:	a2 01       	movw	r20, r4
   1a764:	91 01       	movw	r18, r2
   1a766:	be 01       	movw	r22, r28
   1a768:	68 5f       	subi	r22, 0xF8	; 248
   1a76a:	7f 4f       	sbci	r23, 0xFF	; 255
   1a76c:	c5 01       	movw	r24, r10
   1a76e:	0e 94 46 bf 	call	0x17e8c	; 0x17e8c <lif_write>
        if(len < size)
   1a772:	86 15       	cp	r24, r6
   1a774:	97 05       	cpc	r25, r7
   1a776:	0c f4       	brge	.+2      	; 0x1a77a <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1a778:	87 cf       	rjmp	.-242    	; 0x1a688 <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1a77a:	ed b7       	in	r30, 0x3d	; 61
   1a77c:	fe b7       	in	r31, 0x3e	; 62
   1a77e:	c4 82       	std	Z+4, r12	; 0x04
   1a780:	d5 82       	std	Z+5, r13	; 0x05
   1a782:	e6 82       	std	Z+6, r14	; 0x06
   1a784:	f7 82       	std	Z+7, r15	; 0x07
   1a786:	83 e8       	ldi	r24, 0x83	; 131
   1a788:	95 e3       	ldi	r25, 0x35	; 53
   1a78a:	a0 e0       	ldi	r26, 0x00	; 0
   1a78c:	81 83       	std	Z+1, r24	; 0x01
   1a78e:	92 83       	std	Z+2, r25	; 0x02
   1a790:	a3 83       	std	Z+3, r26	; 0x03
   1a792:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

    return(bytes);
   1a796:	b6 01       	movw	r22, r12
   1a798:	c7 01       	movw	r24, r14
}
   1a79a:	c3 5f       	subi	r28, 0xF3	; 243
   1a79c:	dc 4f       	sbci	r29, 0xFC	; 252
   1a79e:	e2 e1       	ldi	r30, 0x12	; 18
   1a7a0:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

0001a7a4 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1a7a4:	ab e3       	ldi	r26, 0x3B	; 59
   1a7a6:	b0 e0       	ldi	r27, 0x00	; 0
   1a7a8:	e8 ed       	ldi	r30, 0xD8	; 216
   1a7aa:	f3 ed       	ldi	r31, 0xD3	; 211
   1a7ac:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
   1a7b0:	6c 01       	movw	r12, r24
   1a7b2:	1b 01       	movw	r2, r22
   1a7b4:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1a7b6:	fc 01       	movw	r30, r24
   1a7b8:	80 81       	ld	r24, Z
   1a7ba:	81 11       	cpse	r24, r1
   1a7bc:	03 c0       	rjmp	.+6      	; 0x1a7c4 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1a7be:	80 e5       	ldi	r24, 0x50	; 80
   1a7c0:	95 e3       	ldi	r25, 0x35	; 53
   1a7c2:	1a c0       	rjmp	.+52     	; 0x1a7f8 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1a7c4:	fb 01       	movw	r30, r22
   1a7c6:	80 81       	ld	r24, Z
   1a7c8:	81 11       	cpse	r24, r1
   1a7ca:	03 c0       	rjmp	.+6      	; 0x1a7d2 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1a7cc:	82 e2       	ldi	r24, 0x22	; 34
   1a7ce:	95 e3       	ldi	r25, 0x35	; 53
   1a7d0:	13 c0       	rjmp	.+38     	; 0x1a7f8 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1a7d2:	fa 01       	movw	r30, r20
   1a7d4:	80 81       	ld	r24, Z
   1a7d6:	81 11       	cpse	r24, r1
   1a7d8:	03 c0       	rjmp	.+6      	; 0x1a7e0 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1a7da:	83 ef       	ldi	r24, 0xF3	; 243
   1a7dc:	94 e3       	ldi	r25, 0x34	; 52
   1a7de:	0c c0       	rjmp	.+24     	; 0x1a7f8 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1a7e0:	be 01       	movw	r22, r28
   1a7e2:	66 5f       	subi	r22, 0xF6	; 246
   1a7e4:	7f 4f       	sbci	r23, 0xFF	; 255
   1a7e6:	ca 01       	movw	r24, r20
   1a7e8:	0e 94 99 be 	call	0x17d32	; 0x17d32 <lif_stat>
   1a7ec:	9b af       	std	Y+59, r25	; 0x3b
   1a7ee:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1a7f0:	89 2b       	or	r24, r25
   1a7f2:	59 f4       	brne	.+22     	; 0x1a80a <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1a7f4:	83 ec       	ldi	r24, 0xC3	; 195
   1a7f6:	94 e3       	ldi	r25, 0x34	; 52
   1a7f8:	a0 e0       	ldi	r26, 0x00	; 0
   1a7fa:	ed b7       	in	r30, 0x3d	; 61
   1a7fc:	fe b7       	in	r31, 0x3e	; 62
   1a7fe:	81 83       	std	Z+1, r24	; 0x01
   1a800:	92 83       	std	Z+2, r25	; 0x02
   1a802:	a3 83       	std	Z+3, r26	; 0x03
   1a804:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1a808:	01 c1       	rjmp	.+514    	; 0x1aa0c <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1a80a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a80e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a812:	92 ff       	sbrs	r25, 2
   1a814:	10 c0       	rjmp	.+32     	; 0x1a836 <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1a816:	ed b7       	in	r30, 0x3d	; 61
   1a818:	fe b7       	in	r31, 0x3e	; 62
   1a81a:	f1 86       	std	Z+9, r15	; 0x09
   1a81c:	e0 86       	std	Z+8, r14	; 0x08
   1a81e:	37 82       	std	Z+7, r3	; 0x07
   1a820:	26 82       	std	Z+6, r2	; 0x06
   1a822:	d5 82       	std	Z+5, r13	; 0x05
   1a824:	c4 82       	std	Z+4, r12	; 0x04
   1a826:	84 e9       	ldi	r24, 0x94	; 148
   1a828:	94 e3       	ldi	r25, 0x34	; 52
   1a82a:	a0 e0       	ldi	r26, 0x00	; 0
   1a82c:	81 83       	std	Z+1, r24	; 0x01
   1a82e:	92 83       	std	Z+2, r25	; 0x02
   1a830:	a3 83       	std	Z+3, r26	; 0x03
   1a832:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1a836:	97 01       	movw	r18, r14
   1a838:	40 e0       	ldi	r20, 0x00	; 0
   1a83a:	50 e0       	ldi	r21, 0x00	; 0
   1a83c:	ba 01       	movw	r22, r20
   1a83e:	80 e0       	ldi	r24, 0x00	; 0
   1a840:	90 e0       	ldi	r25, 0x00	; 0
   1a842:	a8 de       	rcall	.-688    	; 0x1a594 <lif_add_ascii_file_as_e010_wrapper>
   1a844:	4b 01       	movw	r8, r22
   1a846:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a848:	47 2e       	mov	r4, r23
   1a84a:	58 2e       	mov	r5, r24
   1a84c:	69 2e       	mov	r6, r25
   1a84e:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a850:	66 23       	and	r22, r22
   1a852:	29 f0       	breq	.+10     	; 0x1a85e <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1a854:	ff ef       	ldi	r31, 0xFF	; 255
   1a856:	4f 1a       	sub	r4, r31
   1a858:	5f 0a       	sbc	r5, r31
   1a85a:	6f 0a       	sbc	r6, r31
   1a85c:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1a85e:	61 e0       	ldi	r22, 0x01	; 1
   1a860:	79 e0       	ldi	r23, 0x09	; 9
   1a862:	c6 01       	movw	r24, r12
   1a864:	49 da       	rcall	.-2926   	; 0x19cf8 <lif_open_volume>
   1a866:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1a868:	00 97       	sbiw	r24, 0x00	; 0
   1a86a:	09 f4       	brne	.+2      	; 0x1a86e <lif_add_ascii_file_as_e010+0xca>
   1a86c:	cf c0       	rjmp	.+414    	; 0x1aa0c <lif_add_ascii_file_as_e010+0x268>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1a86e:	b3 01       	movw	r22, r6
   1a870:	a2 01       	movw	r20, r4
   1a872:	e2 d8       	rcall	.-3644   	; 0x19a38 <lif_newdir>
   1a874:	3c 01       	movw	r6, r24
    if(index == -1)
   1a876:	8f ef       	ldi	r24, 0xFF	; 255
   1a878:	68 16       	cp	r6, r24
   1a87a:	78 06       	cpc	r7, r24
   1a87c:	79 f4       	brne	.+30     	; 0x1a89c <lif_add_ascii_file_as_e010+0xf8>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1a87e:	ed b7       	in	r30, 0x3d	; 61
   1a880:	fe b7       	in	r31, 0x3e	; 62
   1a882:	f7 82       	std	Z+7, r15	; 0x07
   1a884:	e6 82       	std	Z+6, r14	; 0x06
   1a886:	d5 82       	std	Z+5, r13	; 0x05
   1a888:	c4 82       	std	Z+4, r12	; 0x04
   1a88a:	84 e6       	ldi	r24, 0x64	; 100
   1a88c:	94 e3       	ldi	r25, 0x34	; 52
   1a88e:	a0 e0       	ldi	r26, 0x00	; 0
   1a890:	81 83       	std	Z+1, r24	; 0x01
   1a892:	92 83       	std	Z+2, r25	; 0x02
   1a894:	a3 83       	std	Z+3, r26	; 0x03
   1a896:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1a89a:	a0 c0       	rjmp	.+320    	; 0x1a9dc <lif_add_ascii_file_as_e010+0x238>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1a89c:	68 01       	movw	r12, r16
   1a89e:	ff e4       	ldi	r31, 0x4F	; 79
   1a8a0:	cf 0e       	add	r12, r31
   1a8a2:	d1 1c       	adc	r13, r1
   1a8a4:	4a e0       	ldi	r20, 0x0A	; 10
   1a8a6:	50 e0       	ldi	r21, 0x00	; 0
   1a8a8:	b1 01       	movw	r22, r2
   1a8aa:	c6 01       	movw	r24, r12
   1a8ac:	0e 94 48 c0 	call	0x18090	; 0x18090 <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1a8b0:	80 e1       	ldi	r24, 0x10	; 16
   1a8b2:	90 ee       	ldi	r25, 0xE0	; 224
   1a8b4:	f8 01       	movw	r30, r16
   1a8b6:	e6 5a       	subi	r30, 0xA6	; 166
   1a8b8:	ff 4f       	sbci	r31, 0xFF	; 255
   1a8ba:	91 83       	std	Z+1, r25	; 0x01
   1a8bc:	80 83       	st	Z, r24
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1a8be:	ea ad       	ldd	r30, Y+58	; 0x3a
   1a8c0:	fb ad       	ldd	r31, Y+59	; 0x3b
   1a8c2:	60 a5       	ldd	r22, Z+40	; 0x28
   1a8c4:	71 a5       	ldd	r23, Z+41	; 0x29
   1a8c6:	82 a5       	ldd	r24, Z+42	; 0x2a
   1a8c8:	93 a5       	ldd	r25, Z+43	; 0x2b
   1a8ca:	a8 01       	movw	r20, r16
   1a8cc:	4c 59       	subi	r20, 0x9C	; 156
   1a8ce:	5f 4f       	sbci	r21, 0xFF	; 255
   1a8d0:	0e 94 6d c2 	call	0x184da	; 0x184da <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1a8d4:	81 e0       	ldi	r24, 0x01	; 1
   1a8d6:	90 e8       	ldi	r25, 0x80	; 128
   1a8d8:	f8 01       	movw	r30, r16
   1a8da:	e6 59       	subi	r30, 0x96	; 150
   1a8dc:	ff 4f       	sbci	r31, 0xFF	; 255
   1a8de:	91 83       	std	Z+1, r25	; 0x01
   1a8e0:	80 83       	st	Z, r24
    LIF->DIR.FileBytes = bytes;                   // 28
   1a8e2:	32 96       	adiw	r30, 0x02	; 2
   1a8e4:	91 82       	std	Z+1, r9	; 0x01
   1a8e6:	80 82       	st	Z, r8
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1a8e8:	80 e0       	ldi	r24, 0x00	; 0
   1a8ea:	91 e0       	ldi	r25, 0x01	; 1
   1a8ec:	32 96       	adiw	r30, 0x02	; 2
   1a8ee:	91 83       	std	Z+1, r25	; 0x01
   1a8f0:	80 83       	st	Z, r24
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1a8f2:	58 01       	movw	r10, r16
   1a8f4:	fc e5       	ldi	r31, 0x5C	; 92
   1a8f6:	af 0e       	add	r10, r31
   1a8f8:	b1 1c       	adc	r11, r1
   1a8fa:	f5 01       	movw	r30, r10
   1a8fc:	80 81       	ld	r24, Z
   1a8fe:	91 81       	ldd	r25, Z+1	; 0x01
   1a900:	a2 81       	ldd	r26, Z+2	; 0x02
   1a902:	b3 81       	ldd	r27, Z+3	; 0x03
   1a904:	22 24       	eor	r2, r2
   1a906:	38 2e       	mov	r3, r24
   1a908:	49 2e       	mov	r4, r25
   1a90a:	5a 2e       	mov	r5, r26

    if(debuglevel & LIF_DEBUG)
   1a90c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a910:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a914:	92 ff       	sbrs	r25, 2
   1a916:	05 c0       	rjmp	.+10     	; 0x1a922 <lif_add_ascii_file_as_e010+0x17e>
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1a918:	6c e5       	ldi	r22, 0x5C	; 92
   1a91a:	76 e1       	ldi	r23, 0x16	; 22
   1a91c:	c8 01       	movw	r24, r16
   1a91e:	0e 94 59 c3 	call	0x186b2	; 0x186b2 <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1a922:	97 01       	movw	r18, r14
   1a924:	b2 01       	movw	r22, r4
   1a926:	a1 01       	movw	r20, r2
   1a928:	c8 01       	movw	r24, r16
   1a92a:	34 de       	rcall	.-920    	; 0x1a594 <lif_add_ascii_file_as_e010_wrapper>
   1a92c:	4b 01       	movw	r8, r22
   1a92e:	7c 01       	movw	r14, r24

    if(debuglevel & LIF_DEBUG)
   1a930:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a934:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a938:	92 ff       	sbrs	r25, 2
   1a93a:	4a c0       	rjmp	.+148    	; 0x1a9d0 <lif_add_ascii_file_as_e010+0x22c>
    {
        printf("New Directory Information AFTER write\n");
   1a93c:	8d e3       	ldi	r24, 0x3D	; 61
   1a93e:	94 e3       	ldi	r25, 0x34	; 52
   1a940:	a0 e0       	ldi	r26, 0x00	; 0
   1a942:	ed b7       	in	r30, 0x3d	; 61
   1a944:	fe b7       	in	r31, 0x3e	; 62
   1a946:	81 83       	std	Z+1, r24	; 0x01
   1a948:	92 83       	std	Z+2, r25	; 0x02
   1a94a:	a3 83       	std	Z+3, r26	; 0x03
   1a94c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1a950:	ed b7       	in	r30, 0x3d	; 61
   1a952:	fe b7       	in	r31, 0x3e	; 62
   1a954:	d5 82       	std	Z+5, r13	; 0x05
   1a956:	c4 82       	std	Z+4, r12	; 0x04
   1a958:	86 e2       	ldi	r24, 0x26	; 38
   1a95a:	94 e3       	ldi	r25, 0x34	; 52
   1a95c:	a0 e0       	ldi	r26, 0x00	; 0
   1a95e:	81 83       	std	Z+1, r24	; 0x01
   1a960:	92 83       	std	Z+2, r25	; 0x02
   1a962:	a3 83       	std	Z+3, r26	; 0x03
   1a964:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1a968:	ed b7       	in	r30, 0x3d	; 61
   1a96a:	fe b7       	in	r31, 0x3e	; 62
   1a96c:	75 82       	std	Z+5, r7	; 0x05
   1a96e:	64 82       	std	Z+4, r6	; 0x04
   1a970:	8f e0       	ldi	r24, 0x0F	; 15
   1a972:	94 e3       	ldi	r25, 0x34	; 52
   1a974:	a0 e0       	ldi	r26, 0x00	; 0
   1a976:	81 83       	std	Z+1, r24	; 0x01
   1a978:	92 83       	std	Z+2, r25	; 0x02
   1a97a:	a3 83       	std	Z+3, r26	; 0x03
   1a97c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1a980:	f5 01       	movw	r30, r10
   1a982:	80 81       	ld	r24, Z
   1a984:	91 81       	ldd	r25, Z+1	; 0x01
   1a986:	a2 81       	ldd	r26, Z+2	; 0x02
   1a988:	b3 81       	ldd	r27, Z+3	; 0x03
   1a98a:	ed b7       	in	r30, 0x3d	; 61
   1a98c:	fe b7       	in	r31, 0x3e	; 62
   1a98e:	84 83       	std	Z+4, r24	; 0x04
   1a990:	95 83       	std	Z+5, r25	; 0x05
   1a992:	a6 83       	std	Z+6, r26	; 0x06
   1a994:	b7 83       	std	Z+7, r27	; 0x07
   1a996:	86 ef       	ldi	r24, 0xF6	; 246
   1a998:	93 e3       	ldi	r25, 0x33	; 51
   1a99a:	a0 e0       	ldi	r26, 0x00	; 0
   1a99c:	81 83       	std	Z+1, r24	; 0x01
   1a99e:	92 83       	std	Z+2, r25	; 0x02
   1a9a0:	a3 83       	std	Z+3, r26	; 0x03
   1a9a2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1a9a6:	f8 01       	movw	r30, r16
   1a9a8:	e0 5a       	subi	r30, 0xA0	; 160
   1a9aa:	ff 4f       	sbci	r31, 0xFF	; 255
   1a9ac:	80 81       	ld	r24, Z
   1a9ae:	91 81       	ldd	r25, Z+1	; 0x01
   1a9b0:	a2 81       	ldd	r26, Z+2	; 0x02
   1a9b2:	b3 81       	ldd	r27, Z+3	; 0x03
   1a9b4:	ed b7       	in	r30, 0x3d	; 61
   1a9b6:	fe b7       	in	r31, 0x3e	; 62
   1a9b8:	84 83       	std	Z+4, r24	; 0x04
   1a9ba:	95 83       	std	Z+5, r25	; 0x05
   1a9bc:	a6 83       	std	Z+6, r26	; 0x06
   1a9be:	b7 83       	std	Z+7, r27	; 0x07
   1a9c0:	8d ed       	ldi	r24, 0xDD	; 221
   1a9c2:	93 e3       	ldi	r25, 0x33	; 51
   1a9c4:	a0 e0       	ldi	r26, 0x00	; 0
   1a9c6:	81 83       	std	Z+1, r24	; 0x01
   1a9c8:	92 83       	std	Z+2, r25	; 0x02
   1a9ca:	a3 83       	std	Z+3, r26	; 0x03
   1a9cc:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1a9d0:	b3 01       	movw	r22, r6
   1a9d2:	c8 01       	movw	r24, r16
   1a9d4:	0e 94 b4 c8 	call	0x19168	; 0x19168 <lif_writedirindex>
   1a9d8:	89 2b       	or	r24, r25
   1a9da:	21 f4       	brne	.+8      	; 0x1a9e4 <lif_add_ascii_file_as_e010+0x240>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a9dc:	c8 01       	movw	r24, r16
   1a9de:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>
   1a9e2:	14 c0       	rjmp	.+40     	; 0x1aa0c <lif_add_ascii_file_as_e010+0x268>
   1a9e4:	c8 01       	movw	r24, r16
   1a9e6:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1a9ea:	ed b7       	in	r30, 0x3d	; 61
   1a9ec:	fe b7       	in	r31, 0x3e	; 62
   1a9ee:	84 82       	std	Z+4, r8	; 0x04
   1a9f0:	95 82       	std	Z+5, r9	; 0x05
   1a9f2:	e6 82       	std	Z+6, r14	; 0x06
   1a9f4:	f7 82       	std	Z+7, r15	; 0x07
   1a9f6:	8f ec       	ldi	r24, 0xCF	; 207
   1a9f8:	93 e3       	ldi	r25, 0x33	; 51
   1a9fa:	a0 e0       	ldi	r26, 0x00	; 0
   1a9fc:	81 83       	std	Z+1, r24	; 0x01
   1a9fe:	92 83       	std	Z+2, r25	; 0x02
   1aa00:	a3 83       	std	Z+3, r26	; 0x03
   1aa02:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

// Return file size
    return(bytes);
   1aa06:	b4 01       	movw	r22, r8
   1aa08:	c7 01       	movw	r24, r14
   1aa0a:	04 c0       	rjmp	.+8      	; 0x1aa14 <lif_add_ascii_file_as_e010+0x270>
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1aa0c:	6f ef       	ldi	r22, 0xFF	; 255
   1aa0e:	7f ef       	ldi	r23, 0xFF	; 255
   1aa10:	8f ef       	ldi	r24, 0xFF	; 255
   1aa12:	9f ef       	ldi	r25, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1aa14:	eb 96       	adiw	r28, 0x3b	; 59
   1aa16:	e2 e1       	ldi	r30, 0x12	; 18
   1aa18:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

0001aa1c <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1aa1c:	a7 e3       	ldi	r26, 0x37	; 55
   1aa1e:	b2 e0       	ldi	r27, 0x02	; 2
   1aa20:	e4 e1       	ldi	r30, 0x14	; 20
   1aa22:	f5 ed       	ldi	r31, 0xD5	; 213
   1aa24:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
   1aa28:	7c 01       	movw	r14, r24
   1aa2a:	8b 01       	movw	r16, r22
   1aa2c:	ca 5d       	subi	r28, 0xDA	; 218
   1aa2e:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa30:	59 83       	std	Y+1, r21	; 0x01
   1aa32:	48 83       	st	Y, r20
   1aa34:	c6 52       	subi	r28, 0x26	; 38
   1aa36:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1aa38:	62 e4       	ldi	r22, 0x42	; 66
   1aa3a:	73 e0       	ldi	r23, 0x03	; 3
   1aa3c:	5d d9       	rcall	.-3398   	; 0x19cf8 <lif_open_volume>
   1aa3e:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1aa40:	00 97       	sbiw	r24, 0x00	; 0
   1aa42:	69 f4       	brne	.+26     	; 0x1aa5e <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1aa44:	ed b7       	in	r30, 0x3d	; 61
   1aa46:	fe b7       	in	r31, 0x3e	; 62
   1aa48:	f5 82       	std	Z+5, r15	; 0x05
   1aa4a:	e4 82       	std	Z+4, r14	; 0x04
   1aa4c:	87 eb       	ldi	r24, 0xB7	; 183
   1aa4e:	93 e3       	ldi	r25, 0x33	; 51
   1aa50:	a0 e0       	ldi	r26, 0x00	; 0
   1aa52:	81 83       	std	Z+1, r24	; 0x01
   1aa54:	92 83       	std	Z+2, r25	; 0x02
   1aa56:	a3 83       	std	Z+3, r26	; 0x03
   1aa58:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1aa5c:	13 c0       	rjmp	.+38     	; 0x1aa84 <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1aa5e:	b8 01       	movw	r22, r16
   1aa60:	20 dc       	rcall	.-1984   	; 0x1a2a2 <lif_find_file>
    if(index == -1)
   1aa62:	01 96       	adiw	r24, 0x01	; 1
   1aa64:	91 f4       	brne	.+36     	; 0x1aa8a <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1aa66:	ed b7       	in	r30, 0x3d	; 61
   1aa68:	fe b7       	in	r31, 0x3e	; 62
   1aa6a:	15 83       	std	Z+5, r17	; 0x05
   1aa6c:	04 83       	std	Z+4, r16	; 0x04
   1aa6e:	80 ea       	ldi	r24, 0xA0	; 160
   1aa70:	93 e3       	ldi	r25, 0x33	; 51
   1aa72:	a0 e0       	ldi	r26, 0x00	; 0
   1aa74:	81 83       	std	Z+1, r24	; 0x01
   1aa76:	92 83       	std	Z+2, r25	; 0x02
   1aa78:	a3 83       	std	Z+3, r26	; 0x03
   1aa7a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1aa7e:	c6 01       	movw	r24, r12
   1aa80:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1aa84:	80 e0       	ldi	r24, 0x00	; 0
   1aa86:	90 e0       	ldi	r25, 0x00	; 0
   1aa88:	73 c2       	rjmp	.+1254   	; 0x1af70 <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1aa8a:	f6 01       	movw	r30, r12
   1aa8c:	e6 5a       	subi	r30, 0xA6	; 166
   1aa8e:	ff 4f       	sbci	r31, 0xFF	; 255
   1aa90:	80 81       	ld	r24, Z
   1aa92:	91 81       	ldd	r25, Z+1	; 0x01
   1aa94:	9c 01       	movw	r18, r24
   1aa96:	2c 7f       	andi	r18, 0xFC	; 252
   1aa98:	20 31       	cpi	r18, 0x10	; 16
   1aa9a:	30 4e       	sbci	r19, 0xE0	; 224
   1aa9c:	a9 f0       	breq	.+42     	; 0x1aac8 <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1aa9e:	ed b7       	in	r30, 0x3d	; 61
   1aaa0:	fe b7       	in	r31, 0x3e	; 62
   1aaa2:	97 83       	std	Z+7, r25	; 0x07
   1aaa4:	86 83       	std	Z+6, r24	; 0x06
   1aaa6:	ca 5d       	subi	r28, 0xDA	; 218
   1aaa8:	dd 4f       	sbci	r29, 0xFD	; 253
   1aaaa:	28 81       	ld	r18, Y
   1aaac:	39 81       	ldd	r19, Y+1	; 0x01
   1aaae:	c6 52       	subi	r28, 0x26	; 38
   1aab0:	d2 40       	sbci	r29, 0x02	; 2
   1aab2:	35 83       	std	Z+5, r19	; 0x05
   1aab4:	24 83       	std	Z+4, r18	; 0x04
   1aab6:	88 e6       	ldi	r24, 0x68	; 104
   1aab8:	93 e3       	ldi	r25, 0x33	; 51
   1aaba:	a0 e0       	ldi	r26, 0x00	; 0
   1aabc:	81 83       	std	Z+1, r24	; 0x01
   1aabe:	92 83       	std	Z+2, r25	; 0x02
   1aac0:	a3 83       	std	Z+3, r26	; 0x03
   1aac2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1aac6:	db cf       	rjmp	.-74     	; 0x1aa7e <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1aac8:	f6 01       	movw	r30, r12
   1aaca:	e4 5a       	subi	r30, 0xA4	; 164
   1aacc:	ff 4f       	sbci	r31, 0xFF	; 255
   1aace:	80 80       	ld	r8, Z
   1aad0:	91 80       	ldd	r9, Z+1	; 0x01
   1aad2:	a2 80       	ldd	r10, Z+2	; 0x02
   1aad4:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1aad6:	34 96       	adiw	r30, 0x04	; 4
   1aad8:	80 81       	ld	r24, Z
   1aada:	91 81       	ldd	r25, Z+1	; 0x01
   1aadc:	a2 81       	ldd	r26, Z+2	; 0x02
   1aade:	b3 81       	ldd	r27, Z+3	; 0x03
   1aae0:	a5 01       	movw	r20, r10
   1aae2:	94 01       	movw	r18, r8
   1aae4:	28 0f       	add	r18, r24
   1aae6:	39 1f       	adc	r19, r25
   1aae8:	4a 1f       	adc	r20, r26
   1aaea:	5b 1f       	adc	r21, r27
   1aaec:	c4 5d       	subi	r28, 0xD4	; 212
   1aaee:	dd 4f       	sbci	r29, 0xFD	; 253
   1aaf0:	28 83       	st	Y, r18
   1aaf2:	39 83       	std	Y+1, r19	; 0x01
   1aaf4:	4a 83       	std	Y+2, r20	; 0x02
   1aaf6:	5b 83       	std	Y+3, r21	; 0x03
   1aaf8:	cc 52       	subi	r28, 0x2C	; 44
   1aafa:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1aafc:	c6 01       	movw	r24, r12
   1aafe:	8c 59       	subi	r24, 0x9C	; 156
   1ab00:	9f 4f       	sbci	r25, 0xFF	; 255
   1ab02:	0e 94 af c2 	call	0x1855e	; 0x1855e <lif_lifbcd2time>
   1ab06:	c8 5d       	subi	r28, 0xD8	; 216
   1ab08:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab0a:	68 83       	st	Y, r22
   1ab0c:	79 83       	std	Y+1, r23	; 0x01
   1ab0e:	8a 83       	std	Y+2, r24	; 0x02
   1ab10:	9b 83       	std	Y+3, r25	; 0x03
   1ab12:	c8 52       	subi	r28, 0x28	; 40
   1ab14:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1ab16:	ba 2d       	mov	r27, r10
   1ab18:	a9 2d       	mov	r26, r9
   1ab1a:	98 2d       	mov	r25, r8
   1ab1c:	88 27       	eor	r24, r24
   1ab1e:	c2 5e       	subi	r28, 0xE2	; 226
   1ab20:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab22:	88 83       	st	Y, r24
   1ab24:	99 83       	std	Y+1, r25	; 0x01
   1ab26:	aa 83       	std	Y+2, r26	; 0x02
   1ab28:	bb 83       	std	Y+3, r27	; 0x03
   1ab2a:	ce 51       	subi	r28, 0x1E	; 30
   1ab2c:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1ab2e:	6c e0       	ldi	r22, 0x0C	; 12
   1ab30:	79 e0       	ldi	r23, 0x09	; 9
   1ab32:	ca 5d       	subi	r28, 0xDA	; 218
   1ab34:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab36:	88 81       	ld	r24, Y
   1ab38:	99 81       	ldd	r25, Y+1	; 0x01
   1ab3a:	c6 52       	subi	r28, 0x26	; 38
   1ab3c:	d2 40       	sbci	r29, 0x02	; 2
   1ab3e:	0e 94 6f be 	call	0x17cde	; 0x17cde <lif_open>
   1ab42:	cc 5d       	subi	r28, 0xDC	; 220
   1ab44:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab46:	99 83       	std	Y+1, r25	; 0x01
   1ab48:	88 83       	st	Y, r24
   1ab4a:	c4 52       	subi	r28, 0x24	; 36
   1ab4c:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1ab4e:	89 2b       	or	r24, r25
   1ab50:	09 f4       	brne	.+2      	; 0x1ab54 <lif_extract_e010_as_ascii+0x138>
   1ab52:	95 cf       	rjmp	.-214    	; 0x1aa7e <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1ab54:	ca 5d       	subi	r28, 0xDA	; 218
   1ab56:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab58:	28 81       	ld	r18, Y
   1ab5a:	39 81       	ldd	r19, Y+1	; 0x01
   1ab5c:	c6 52       	subi	r28, 0x26	; 38
   1ab5e:	d2 40       	sbci	r29, 0x02	; 2
   1ab60:	ed b7       	in	r30, 0x3d	; 61
   1ab62:	fe b7       	in	r31, 0x3e	; 62
   1ab64:	35 83       	std	Z+5, r19	; 0x05
   1ab66:	24 83       	std	Z+4, r18	; 0x04
   1ab68:	88 e5       	ldi	r24, 0x58	; 88
   1ab6a:	93 e3       	ldi	r25, 0x33	; 51
   1ab6c:	a0 e0       	ldi	r26, 0x00	; 0
   1ab6e:	81 83       	std	Z+1, r24	; 0x01
   1ab70:	92 83       	std	Z+2, r25	; 0x02
   1ab72:	a3 83       	std	Z+3, r26	; 0x03
   1ab74:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

    bytes = 0;
    wind = 0;
   1ab78:	21 2c       	mov	r2, r1
   1ab7a:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1ab7c:	ce 5d       	subi	r28, 0xDE	; 222
   1ab7e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab80:	19 82       	std	Y+1, r1	; 0x01
   1ab82:	18 82       	st	Y, r1
   1ab84:	c2 52       	subi	r28, 0x22	; 34
   1ab86:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1ab88:	ee 24       	eor	r14, r14
   1ab8a:	e3 94       	inc	r14
   1ab8c:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1ab8e:	41 2c       	mov	r4, r1
   1ab90:	51 2c       	mov	r5, r1
   1ab92:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1ab94:	87 e9       	ldi	r24, 0x97	; 151
   1ab96:	92 e3       	ldi	r25, 0x32	; 50
   1ab98:	9c 01       	movw	r18, r24
   1ab9a:	40 e0       	ldi	r20, 0x00	; 0
   1ab9c:	ce 5c       	subi	r28, 0xCE	; 206
   1ab9e:	dd 4f       	sbci	r29, 0xFD	; 253
   1aba0:	28 83       	st	Y, r18
   1aba2:	39 83       	std	Y+1, r19	; 0x01
   1aba4:	4a 83       	std	Y+2, r20	; 0x02
   1aba6:	c2 53       	subi	r28, 0x32	; 50
   1aba8:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1abaa:	85 ea       	ldi	r24, 0xA5	; 165
   1abac:	92 e3       	ldi	r25, 0x32	; 50
   1abae:	9c 01       	movw	r18, r24
   1abb0:	40 e0       	ldi	r20, 0x00	; 0
   1abb2:	cb 5c       	subi	r28, 0xCB	; 203
   1abb4:	dd 4f       	sbci	r29, 0xFD	; 253
   1abb6:	28 83       	st	Y, r18
   1abb8:	39 83       	std	Y+1, r19	; 0x01
   1abba:	4a 83       	std	Y+2, r20	; 0x02
   1abbc:	c5 53       	subi	r28, 0x35	; 53
   1abbe:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1abc0:	c2 5e       	subi	r28, 0xE2	; 226
   1abc2:	dd 4f       	sbci	r29, 0xFD	; 253
   1abc4:	28 81       	ld	r18, Y
   1abc6:	39 81       	ldd	r19, Y+1	; 0x01
   1abc8:	4a 81       	ldd	r20, Y+2	; 0x02
   1abca:	5b 81       	ldd	r21, Y+3	; 0x03
   1abcc:	ce 51       	subi	r28, 0x1E	; 30
   1abce:	d2 40       	sbci	r29, 0x02	; 2
   1abd0:	bb 27       	eor	r27, r27
   1abd2:	a5 2f       	mov	r26, r21
   1abd4:	94 2f       	mov	r25, r20
   1abd6:	83 2f       	mov	r24, r19
   1abd8:	c4 5d       	subi	r28, 0xD4	; 212
   1abda:	dd 4f       	sbci	r29, 0xFD	; 253
   1abdc:	28 81       	ld	r18, Y
   1abde:	39 81       	ldd	r19, Y+1	; 0x01
   1abe0:	4a 81       	ldd	r20, Y+2	; 0x02
   1abe2:	5b 81       	ldd	r21, Y+3	; 0x03
   1abe4:	cc 52       	subi	r28, 0x2C	; 44
   1abe6:	d2 40       	sbci	r29, 0x02	; 2
   1abe8:	28 17       	cp	r18, r24
   1abea:	39 07       	cpc	r19, r25
   1abec:	4a 07       	cpc	r20, r26
   1abee:	5b 07       	cpc	r21, r27
   1abf0:	08 f4       	brcc	.+2      	; 0x1abf4 <lif_extract_e010_as_ascii+0x1d8>
   1abf2:	51 c1       	rjmp	.+674    	; 0x1ae96 <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1abf4:	00 e0       	ldi	r16, 0x00	; 0
   1abf6:	11 e0       	ldi	r17, 0x01	; 1
   1abf8:	c2 5e       	subi	r28, 0xE2	; 226
   1abfa:	dd 4f       	sbci	r29, 0xFD	; 253
   1abfc:	28 81       	ld	r18, Y
   1abfe:	39 81       	ldd	r19, Y+1	; 0x01
   1ac00:	4a 81       	ldd	r20, Y+2	; 0x02
   1ac02:	5b 81       	ldd	r21, Y+3	; 0x03
   1ac04:	ce 51       	subi	r28, 0x1E	; 30
   1ac06:	d2 40       	sbci	r29, 0x02	; 2
   1ac08:	be 01       	movw	r22, r28
   1ac0a:	60 5f       	subi	r22, 0xF0	; 240
   1ac0c:	7e 4f       	sbci	r23, 0xFE	; 254
   1ac0e:	c6 01       	movw	r24, r12
   1ac10:	0e 94 f3 be 	call	0x17de6	; 0x17de6 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1ac14:	6f 3f       	cpi	r22, 0xFF	; 255
   1ac16:	71 05       	cpc	r23, r1
   1ac18:	09 f0       	breq	.+2      	; 0x1ac1c <lif_extract_e010_as_ascii+0x200>
   1ac1a:	0c f4       	brge	.+2      	; 0x1ac1e <lif_extract_e010_as_ascii+0x202>
   1ac1c:	3a c1       	rjmp	.+628    	; 0x1ae92 <lif_extract_e010_as_ascii+0x476>
   1ac1e:	00 e0       	ldi	r16, 0x00	; 0
   1ac20:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1ac22:	ce 5d       	subi	r28, 0xDE	; 222
   1ac24:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac26:	88 81       	ld	r24, Y
   1ac28:	99 81       	ldd	r25, Y+1	; 0x01
   1ac2a:	c2 52       	subi	r28, 0x22	; 34
   1ac2c:	d2 40       	sbci	r29, 0x02	; 2
   1ac2e:	89 2b       	or	r24, r25
   1ac30:	09 f0       	breq	.+2      	; 0x1ac34 <lif_extract_e010_as_ascii+0x218>
   1ac32:	1b c1       	rjmp	.+566    	; 0x1ae6a <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1ac34:	e0 e1       	ldi	r30, 0x10	; 16
   1ac36:	f1 e0       	ldi	r31, 0x01	; 1
   1ac38:	ec 0f       	add	r30, r28
   1ac3a:	fd 1f       	adc	r31, r29
   1ac3c:	e0 0f       	add	r30, r16
   1ac3e:	f1 1f       	adc	r31, r17
   1ac40:	80 81       	ld	r24, Z
   1ac42:	98 2f       	mov	r25, r24
   1ac44:	9f 7e       	andi	r25, 0xEF	; 239
   1ac46:	9f 3c       	cpi	r25, 0xCF	; 207
   1ac48:	11 f0       	breq	.+4      	; 0x1ac4e <lif_extract_e010_as_ascii+0x232>
   1ac4a:	8f 36       	cpi	r24, 0x6F	; 111
   1ac4c:	c9 f5       	brne	.+114    	; 0x1acc0 <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1ac4e:	e0 e1       	ldi	r30, 0x10	; 16
   1ac50:	f1 e0       	ldi	r31, 0x01	; 1
   1ac52:	ec 0f       	add	r30, r28
   1ac54:	fd 1f       	adc	r31, r29
   1ac56:	e0 0f       	add	r30, r16
   1ac58:	f1 1f       	adc	r31, r17
   1ac5a:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1ac5c:	f8 01       	movw	r30, r16
   1ac5e:	32 96       	adiw	r30, 0x02	; 2
   1ac60:	40 e1       	ldi	r20, 0x10	; 16
   1ac62:	51 e0       	ldi	r21, 0x01	; 1
   1ac64:	4c 0f       	add	r20, r28
   1ac66:	5d 1f       	adc	r21, r29
   1ac68:	e4 0f       	add	r30, r20
   1ac6a:	f5 1f       	adc	r31, r21
   1ac6c:	0d 5f       	subi	r16, 0xFD	; 253
   1ac6e:	1f 4f       	sbci	r17, 0xFF	; 255
   1ac70:	80 81       	ld	r24, Z
   1ac72:	b1 2c       	mov	r11, r1
   1ac74:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1ac76:	a1 14       	cp	r10, r1
   1ac78:	b1 04       	cpc	r11, r1
   1ac7a:	09 f4       	brne	.+2      	; 0x1ac7e <lif_extract_e010_as_ascii+0x262>
   1ac7c:	ee c0       	rjmp	.+476    	; 0x1ae5a <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1ac7e:	5f ef       	ldi	r21, 0xFF	; 255
   1ac80:	a5 16       	cp	r10, r21
   1ac82:	b1 04       	cpc	r11, r1
   1ac84:	09 f0       	breq	.+2      	; 0x1ac88 <lif_extract_e010_as_ascii+0x26c>
   1ac86:	7c f4       	brge	.+30     	; 0x1aca6 <lif_extract_e010_as_ascii+0x28a>
   1ac88:	c4 5e       	subi	r28, 0xE4	; 228
   1ac8a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac8c:	19 82       	std	Y+1, r1	; 0x01
   1ac8e:	18 82       	st	Y, r1
   1ac90:	cc 51       	subi	r28, 0x1C	; 28
   1ac92:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1ac94:	c5 01       	movw	r24, r10
   1ac96:	01 97       	sbiw	r24, 0x01	; 1
   1ac98:	c0 5d       	subi	r28, 0xD0	; 208
   1ac9a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac9c:	99 83       	std	Y+1, r25	; 0x01
   1ac9e:	88 83       	st	Y, r24
   1aca0:	c0 53       	subi	r28, 0x30	; 48
   1aca2:	d2 40       	sbci	r29, 0x02	; 2
   1aca4:	68 c0       	rjmp	.+208    	; 0x1ad76 <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1aca6:	ed b7       	in	r30, 0x3d	; 61
   1aca8:	fe b7       	in	r31, 0x3e	; 62
   1acaa:	b5 82       	std	Z+5, r11	; 0x05
   1acac:	a4 82       	std	Z+4, r10	; 0x04
   1acae:	83 e2       	ldi	r24, 0x23	; 35
   1acb0:	93 e3       	ldi	r25, 0x33	; 51
   1acb2:	a0 e0       	ldi	r26, 0x00	; 0
   1acb4:	81 83       	std	Z+1, r24	; 0x01
   1acb6:	92 83       	std	Z+2, r25	; 0x02
   1acb8:	a3 83       	std	Z+3, r26	; 0x03
   1acba:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1acbe:	1e c0       	rjmp	.+60     	; 0x1acfc <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1acc0:	8f 3e       	cpi	r24, 0xEF	; 239
   1acc2:	09 f4       	brne	.+2      	; 0x1acc6 <lif_extract_e010_as_ascii+0x2aa>
   1acc4:	d2 c0       	rjmp	.+420    	; 0x1ae6a <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1acc6:	ed b7       	in	r30, 0x3d	; 61
   1acc8:	fe b7       	in	r31, 0x3e	; 62
   1acca:	13 87       	std	Z+11, r17	; 0x0b
   1accc:	02 87       	std	Z+10, r16	; 0x0a
   1acce:	c2 5e       	subi	r28, 0xE2	; 226
   1acd0:	dd 4f       	sbci	r29, 0xFD	; 253
   1acd2:	28 81       	ld	r18, Y
   1acd4:	39 81       	ldd	r19, Y+1	; 0x01
   1acd6:	4a 81       	ldd	r20, Y+2	; 0x02
   1acd8:	5b 81       	ldd	r21, Y+3	; 0x03
   1acda:	ce 51       	subi	r28, 0x1E	; 30
   1acdc:	d2 40       	sbci	r29, 0x02	; 2
   1acde:	26 83       	std	Z+6, r18	; 0x06
   1ace0:	37 83       	std	Z+7, r19	; 0x07
   1ace2:	40 87       	std	Z+8, r20	; 0x08
   1ace4:	51 87       	std	Z+9, r21	; 0x09
   1ace6:	90 e0       	ldi	r25, 0x00	; 0
   1ace8:	95 83       	std	Z+5, r25	; 0x05
   1acea:	84 83       	std	Z+4, r24	; 0x04
   1acec:	8d ec       	ldi	r24, 0xCD	; 205
   1acee:	92 e3       	ldi	r25, 0x32	; 50
   1acf0:	a0 e0       	ldi	r26, 0x00	; 0
   1acf2:	81 83       	std	Z+1, r24	; 0x01
   1acf4:	92 83       	std	Z+2, r25	; 0x02
   1acf6:	a3 83       	std	Z+3, r26	; 0x03
   1acf8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
                status = 0;
                done = 1;
   1acfc:	21 e0       	ldi	r18, 0x01	; 1
   1acfe:	30 e0       	ldi	r19, 0x00	; 0
   1ad00:	ce 5d       	subi	r28, 0xDE	; 222
   1ad02:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad04:	39 83       	std	Y+1, r19	; 0x01
   1ad06:	28 83       	st	Y, r18
   1ad08:	c2 52       	subi	r28, 0x22	; 34
   1ad0a:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1ad0c:	e1 2c       	mov	r14, r1
   1ad0e:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1ad10:	ac c0       	rjmp	.+344    	; 0x1ae6a <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1ad12:	0f 3f       	cpi	r16, 0xFF	; 255
   1ad14:	11 05       	cpc	r17, r1
   1ad16:	11 f0       	breq	.+4      	; 0x1ad1c <lif_extract_e010_as_ascii+0x300>
   1ad18:	0c f0       	brlt	.+2      	; 0x1ad1c <lif_extract_e010_as_ascii+0x300>
   1ad1a:	a7 c0       	rjmp	.+334    	; 0x1ae6a <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1ad1c:	e0 e1       	ldi	r30, 0x10	; 16
   1ad1e:	f1 e0       	ldi	r31, 0x01	; 1
   1ad20:	ec 0f       	add	r30, r28
   1ad22:	fd 1f       	adc	r31, r29
   1ad24:	e0 0f       	add	r30, r16
   1ad26:	f1 1f       	adc	r31, r17
   1ad28:	20 81       	ld	r18, Z
   1ad2a:	a1 01       	movw	r20, r2
   1ad2c:	4f 5f       	subi	r20, 0xFF	; 255
   1ad2e:	5f 4f       	sbci	r21, 0xFF	; 255
   1ad30:	4a 01       	movw	r8, r20
   1ad32:	2d 30       	cpi	r18, 0x0D	; 13
   1ad34:	51 f1       	breq	.+84     	; 0x1ad8a <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1ad36:	98 2d       	mov	r25, r8
   1ad38:	89 2d       	mov	r24, r9
   1ad3a:	0f 5f       	subi	r16, 0xFF	; 255
   1ad3c:	1f 4f       	sbci	r17, 0xFF	; 255
   1ad3e:	ec e0       	ldi	r30, 0x0C	; 12
   1ad40:	f0 e0       	ldi	r31, 0x00	; 0
   1ad42:	ec 0f       	add	r30, r28
   1ad44:	fd 1f       	adc	r31, r29
   1ad46:	e2 0d       	add	r30, r2
   1ad48:	f3 1d       	adc	r31, r3
   1ad4a:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1ad4c:	ef ef       	ldi	r30, 0xFF	; 255
   1ad4e:	8e 16       	cp	r8, r30
   1ad50:	91 04       	cpc	r9, r1
   1ad52:	09 f0       	breq	.+2      	; 0x1ad56 <lif_extract_e010_as_ascii+0x33a>
   1ad54:	ac f5       	brge	.+106    	; 0x1adc0 <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1ad56:	c4 5e       	subi	r28, 0xE4	; 228
   1ad58:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad5a:	28 81       	ld	r18, Y
   1ad5c:	39 81       	ldd	r19, Y+1	; 0x01
   1ad5e:	cc 51       	subi	r28, 0x1C	; 28
   1ad60:	d2 40       	sbci	r29, 0x02	; 2
   1ad62:	2f 5f       	subi	r18, 0xFF	; 255
   1ad64:	3f 4f       	sbci	r19, 0xFF	; 255
   1ad66:	c4 5e       	subi	r28, 0xE4	; 228
   1ad68:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad6a:	39 83       	std	Y+1, r19	; 0x01
   1ad6c:	28 83       	st	Y, r18
   1ad6e:	cc 51       	subi	r28, 0x1C	; 28
   1ad70:	d2 40       	sbci	r29, 0x02	; 2
   1ad72:	29 2e       	mov	r2, r25
   1ad74:	38 2e       	mov	r3, r24
   1ad76:	c4 5e       	subi	r28, 0xE4	; 228
   1ad78:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad7a:	48 81       	ld	r20, Y
   1ad7c:	59 81       	ldd	r21, Y+1	; 0x01
   1ad7e:	cc 51       	subi	r28, 0x1C	; 28
   1ad80:	d2 40       	sbci	r29, 0x02	; 2
   1ad82:	4a 15       	cp	r20, r10
   1ad84:	5b 05       	cpc	r21, r11
   1ad86:	2c f2       	brlt	.-118    	; 0x1ad12 <lif_extract_e010_as_ascii+0x2f6>
   1ad88:	62 c0       	rjmp	.+196    	; 0x1ae4e <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1ad8a:	c4 5e       	subi	r28, 0xE4	; 228
   1ad8c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad8e:	88 81       	ld	r24, Y
   1ad90:	99 81       	ldd	r25, Y+1	; 0x01
   1ad92:	cc 51       	subi	r28, 0x1C	; 28
   1ad94:	d2 40       	sbci	r29, 0x02	; 2
   1ad96:	c0 5d       	subi	r28, 0xD0	; 208
   1ad98:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad9a:	a8 81       	ld	r26, Y
   1ad9c:	b9 81       	ldd	r27, Y+1	; 0x01
   1ad9e:	c0 53       	subi	r28, 0x30	; 48
   1ada0:	d2 40       	sbci	r29, 0x02	; 2
   1ada2:	8a 17       	cp	r24, r26
   1ada4:	9b 07       	cpc	r25, r27
   1ada6:	39 f6       	brne	.-114    	; 0x1ad36 <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1ada8:	ec e0       	ldi	r30, 0x0C	; 12
   1adaa:	f0 e0       	ldi	r31, 0x00	; 0
   1adac:	ec 0f       	add	r30, r28
   1adae:	fd 1f       	adc	r31, r29
   1adb0:	e2 0d       	add	r30, r2
   1adb2:	f3 1d       	adc	r31, r3
   1adb4:	ba e0       	ldi	r27, 0x0A	; 10
   1adb6:	b0 83       	st	Z, r27
                    ++ind;
   1adb8:	0f 5f       	subi	r16, 0xFF	; 255
   1adba:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1adbc:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1adbe:	47 c0       	rjmp	.+142    	; 0x1ae4e <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1adc0:	cc 5d       	subi	r28, 0xDC	; 220
   1adc2:	dd 4f       	sbci	r29, 0xFD	; 253
   1adc4:	28 81       	ld	r18, Y
   1adc6:	39 81       	ldd	r19, Y+1	; 0x01
   1adc8:	c4 52       	subi	r28, 0x24	; 36
   1adca:	d2 40       	sbci	r29, 0x02	; 2
   1adcc:	a4 01       	movw	r20, r8
   1adce:	61 e0       	ldi	r22, 0x01	; 1
   1add0:	70 e0       	ldi	r23, 0x00	; 0
   1add2:	ce 01       	movw	r24, r28
   1add4:	0c 96       	adiw	r24, 0x0c	; 12
   1add6:	0e 94 53 7b 	call	0xf6a6	; 0xf6a6 <fwrite>
                    if(size < wind)
   1adda:	88 15       	cp	r24, r8
   1addc:	99 05       	cpc	r25, r9
   1adde:	d4 f4       	brge	.+52     	; 0x1ae14 <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1ade0:	cb 5c       	subi	r28, 0xCB	; 203
   1ade2:	dd 4f       	sbci	r29, 0xFD	; 253
   1ade4:	28 81       	ld	r18, Y
   1ade6:	39 81       	ldd	r19, Y+1	; 0x01
   1ade8:	4a 81       	ldd	r20, Y+2	; 0x02
   1adea:	c5 53       	subi	r28, 0x35	; 53
   1adec:	d2 40       	sbci	r29, 0x02	; 2
   1adee:	ed b7       	in	r30, 0x3d	; 61
   1adf0:	fe b7       	in	r31, 0x3e	; 62
   1adf2:	21 83       	std	Z+1, r18	; 0x01
   1adf4:	32 83       	std	Z+2, r19	; 0x02
   1adf6:	43 83       	std	Z+3, r20	; 0x03
   1adf8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1adfc:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1adfe:	21 e0       	ldi	r18, 0x01	; 1
   1ae00:	30 e0       	ldi	r19, 0x00	; 0
   1ae02:	ce 5d       	subi	r28, 0xDE	; 222
   1ae04:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae06:	39 83       	std	Y+1, r19	; 0x01
   1ae08:	28 83       	st	Y, r18
   1ae0a:	c2 52       	subi	r28, 0x22	; 34
   1ae0c:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1ae0e:	e1 2c       	mov	r14, r1
   1ae10:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1ae12:	1d c0       	rjmp	.+58     	; 0x1ae4e <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1ae14:	09 2e       	mov	r0, r25
   1ae16:	00 0c       	add	r0, r0
   1ae18:	aa 0b       	sbc	r26, r26
   1ae1a:	bb 0b       	sbc	r27, r27
   1ae1c:	48 0e       	add	r4, r24
   1ae1e:	59 1e       	adc	r5, r25
   1ae20:	6a 1e       	adc	r6, r26
   1ae22:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1ae24:	ed b7       	in	r30, 0x3d	; 61
   1ae26:	fe b7       	in	r31, 0x3e	; 62
   1ae28:	44 82       	std	Z+4, r4	; 0x04
   1ae2a:	55 82       	std	Z+5, r5	; 0x05
   1ae2c:	66 82       	std	Z+6, r6	; 0x06
   1ae2e:	77 82       	std	Z+7, r7	; 0x07
   1ae30:	ce 5c       	subi	r28, 0xCE	; 206
   1ae32:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae34:	28 81       	ld	r18, Y
   1ae36:	39 81       	ldd	r19, Y+1	; 0x01
   1ae38:	4a 81       	ldd	r20, Y+2	; 0x02
   1ae3a:	c2 53       	subi	r28, 0x32	; 50
   1ae3c:	d2 40       	sbci	r29, 0x02	; 2
   1ae3e:	21 83       	std	Z+1, r18	; 0x01
   1ae40:	32 83       	std	Z+2, r19	; 0x02
   1ae42:	43 83       	std	Z+3, r20	; 0x03
   1ae44:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
                    wind = 0;
   1ae48:	90 e0       	ldi	r25, 0x00	; 0
   1ae4a:	80 e0       	ldi	r24, 0x00	; 0
   1ae4c:	84 cf       	rjmp	.-248    	; 0x1ad56 <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1ae4e:	0f 3f       	cpi	r16, 0xFF	; 255
   1ae50:	11 05       	cpc	r17, r1
   1ae52:	09 f0       	breq	.+2      	; 0x1ae56 <lif_extract_e010_as_ascii+0x43a>
   1ae54:	0c f4       	brge	.+2      	; 0x1ae58 <lif_extract_e010_as_ascii+0x43c>
   1ae56:	e5 ce       	rjmp	.-566    	; 0x1ac22 <lif_extract_e010_as_ascii+0x206>
   1ae58:	08 c0       	rjmp	.+16     	; 0x1ae6a <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1ae5a:	a1 e0       	ldi	r26, 0x01	; 1
   1ae5c:	b0 e0       	ldi	r27, 0x00	; 0
   1ae5e:	ce 5d       	subi	r28, 0xDE	; 222
   1ae60:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae62:	b9 83       	std	Y+1, r27	; 0x01
   1ae64:	a8 83       	st	Y, r26
   1ae66:	c2 52       	subi	r28, 0x22	; 34
   1ae68:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1ae6a:	c2 5e       	subi	r28, 0xE2	; 226
   1ae6c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae6e:	28 81       	ld	r18, Y
   1ae70:	39 81       	ldd	r19, Y+1	; 0x01
   1ae72:	4a 81       	ldd	r20, Y+2	; 0x02
   1ae74:	5b 81       	ldd	r21, Y+3	; 0x03
   1ae76:	ce 51       	subi	r28, 0x1E	; 30
   1ae78:	d2 40       	sbci	r29, 0x02	; 2
   1ae7a:	3f 5f       	subi	r19, 0xFF	; 255
   1ae7c:	4f 4f       	sbci	r20, 0xFF	; 255
   1ae7e:	5f 4f       	sbci	r21, 0xFF	; 255
   1ae80:	c2 5e       	subi	r28, 0xE2	; 226
   1ae82:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae84:	28 83       	st	Y, r18
   1ae86:	39 83       	std	Y+1, r19	; 0x01
   1ae88:	4a 83       	std	Y+2, r20	; 0x02
   1ae8a:	5b 83       	std	Y+3, r21	; 0x03
   1ae8c:	ce 51       	subi	r28, 0x1E	; 30
   1ae8e:	d2 40       	sbci	r29, 0x02	; 2
   1ae90:	97 ce       	rjmp	.-722    	; 0x1abc0 <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1ae92:	e1 2c       	mov	r14, r1
   1ae94:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ae96:	c6 01       	movw	r24, r12
   1ae98:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1ae9c:	21 14       	cp	r2, r1
   1ae9e:	31 04       	cpc	r3, r1
   1aea0:	31 f1       	breq	.+76     	; 0x1aeee <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1aea2:	cc 5d       	subi	r28, 0xDC	; 220
   1aea4:	dd 4f       	sbci	r29, 0xFD	; 253
   1aea6:	28 81       	ld	r18, Y
   1aea8:	39 81       	ldd	r19, Y+1	; 0x01
   1aeaa:	c4 52       	subi	r28, 0x24	; 36
   1aeac:	d2 40       	sbci	r29, 0x02	; 2
   1aeae:	a1 01       	movw	r20, r2
   1aeb0:	61 e0       	ldi	r22, 0x01	; 1
   1aeb2:	70 e0       	ldi	r23, 0x00	; 0
   1aeb4:	ce 01       	movw	r24, r28
   1aeb6:	0c 96       	adiw	r24, 0x0c	; 12
   1aeb8:	0e 94 53 7b 	call	0xf6a6	; 0xf6a6 <fwrite>
   1aebc:	8c 01       	movw	r16, r24
        if(size < wind)
   1aebe:	82 15       	cp	r24, r2
   1aec0:	93 05       	cpc	r25, r3
   1aec2:	64 f4       	brge	.+24     	; 0x1aedc <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1aec4:	8f e6       	ldi	r24, 0x6F	; 111
   1aec6:	92 e3       	ldi	r25, 0x32	; 50
   1aec8:	a0 e0       	ldi	r26, 0x00	; 0
   1aeca:	ed b7       	in	r30, 0x3d	; 61
   1aecc:	fe b7       	in	r31, 0x3e	; 62
   1aece:	81 83       	std	Z+1, r24	; 0x01
   1aed0:	92 83       	std	Z+2, r25	; 0x02
   1aed2:	a3 83       	std	Z+3, r26	; 0x03
   1aed4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            status = 0;
   1aed8:	e1 2c       	mov	r14, r1
   1aeda:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1aedc:	c8 01       	movw	r24, r16
   1aede:	01 2e       	mov	r0, r17
   1aee0:	00 0c       	add	r0, r0
   1aee2:	aa 0b       	sbc	r26, r26
   1aee4:	bb 0b       	sbc	r27, r27
   1aee6:	48 0e       	add	r4, r24
   1aee8:	59 1e       	adc	r5, r25
   1aeea:	6a 1e       	adc	r6, r26
   1aeec:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1aeee:	cc 5d       	subi	r28, 0xDC	; 220
   1aef0:	dd 4f       	sbci	r29, 0xFD	; 253
   1aef2:	88 81       	ld	r24, Y
   1aef4:	99 81       	ldd	r25, Y+1	; 0x01
   1aef6:	c4 52       	subi	r28, 0x24	; 36
   1aef8:	d2 40       	sbci	r29, 0x02	; 2
   1aefa:	0e 94 d5 7b 	call	0xf7aa	; 0xf7aa <fclose>
    if(t)
   1aefe:	c8 5d       	subi	r28, 0xD8	; 216
   1af00:	dd 4f       	sbci	r29, 0xFD	; 253
   1af02:	28 81       	ld	r18, Y
   1af04:	39 81       	ldd	r19, Y+1	; 0x01
   1af06:	4a 81       	ldd	r20, Y+2	; 0x02
   1af08:	5b 81       	ldd	r21, Y+3	; 0x03
   1af0a:	c8 52       	subi	r28, 0x28	; 40
   1af0c:	d2 40       	sbci	r29, 0x02	; 2
   1af0e:	21 15       	cp	r18, r1
   1af10:	31 05       	cpc	r19, r1
   1af12:	41 05       	cpc	r20, r1
   1af14:	51 05       	cpc	r21, r1
   1af16:	d9 f0       	breq	.+54     	; 0x1af4e <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1af18:	c8 5e       	subi	r28, 0xE8	; 232
   1af1a:	dd 4f       	sbci	r29, 0xFD	; 253
   1af1c:	28 83       	st	Y, r18
   1af1e:	39 83       	std	Y+1, r19	; 0x01
   1af20:	4a 83       	std	Y+2, r20	; 0x02
   1af22:	5b 83       	std	Y+3, r21	; 0x03
   1af24:	c8 51       	subi	r28, 0x18	; 24
   1af26:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1af28:	cc 5e       	subi	r28, 0xEC	; 236
   1af2a:	dd 4f       	sbci	r29, 0xFD	; 253
   1af2c:	28 83       	st	Y, r18
   1af2e:	39 83       	std	Y+1, r19	; 0x01
   1af30:	4a 83       	std	Y+2, r20	; 0x02
   1af32:	5b 83       	std	Y+3, r21	; 0x03
   1af34:	c4 51       	subi	r28, 0x14	; 20
   1af36:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1af38:	be 01       	movw	r22, r28
   1af3a:	6c 5e       	subi	r22, 0xEC	; 236
   1af3c:	7d 4f       	sbci	r23, 0xFD	; 253
   1af3e:	ca 5d       	subi	r28, 0xDA	; 218
   1af40:	dd 4f       	sbci	r29, 0xFD	; 253
   1af42:	88 81       	ld	r24, Y
   1af44:	99 81       	ldd	r25, Y+1	; 0x01
   1af46:	c6 52       	subi	r28, 0x26	; 38
   1af48:	d2 40       	sbci	r29, 0x02	; 2
   1af4a:	0e 94 12 79 	call	0xf224	; 0xf224 <utime>
    }
    sync();
   1af4e:	0e 94 d0 7a 	call	0xf5a0	; 0xf5a0 <sync>
    printf("\tWrote: %8ld\n", bytes);
   1af52:	ed b7       	in	r30, 0x3d	; 61
   1af54:	fe b7       	in	r31, 0x3e	; 62
   1af56:	44 82       	std	Z+4, r4	; 0x04
   1af58:	55 82       	std	Z+5, r5	; 0x05
   1af5a:	66 82       	std	Z+6, r6	; 0x06
   1af5c:	77 82       	std	Z+7, r7	; 0x07
   1af5e:	81 e6       	ldi	r24, 0x61	; 97
   1af60:	92 e3       	ldi	r25, 0x32	; 50
   1af62:	a0 e0       	ldi	r26, 0x00	; 0
   1af64:	81 83       	std	Z+1, r24	; 0x01
   1af66:	92 83       	std	Z+2, r25	; 0x02
   1af68:	a3 83       	std	Z+3, r26	; 0x03
   1af6a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    return(status);
   1af6e:	c7 01       	movw	r24, r14
}
   1af70:	c9 5c       	subi	r28, 0xC9	; 201
   1af72:	dd 4f       	sbci	r29, 0xFD	; 253
   1af74:	e2 e1       	ldi	r30, 0x12	; 18
   1af76:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

0001af7a <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1af7a:	a4 e1       	ldi	r26, 0x14	; 20
   1af7c:	b1 e0       	ldi	r27, 0x01	; 1
   1af7e:	e3 ec       	ldi	r30, 0xC3	; 195
   1af80:	f7 ed       	ldi	r31, 0xD7	; 215
   1af82:	0c 94 3e e3 	jmp	0x1c67c	; 0x1c67c <__prologue_saves__>
   1af86:	7c 01       	movw	r14, r24
   1af88:	8b 01       	movw	r16, r22
   1af8a:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1af8c:	62 e4       	ldi	r22, 0x42	; 66
   1af8e:	73 e0       	ldi	r23, 0x03	; 3
   1af90:	0e 94 7c ce 	call	0x19cf8	; 0x19cf8 <lif_open_volume>
   1af94:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1af96:	00 97       	sbiw	r24, 0x00	; 0
   1af98:	69 f4       	brne	.+26     	; 0x1afb4 <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1af9a:	ed b7       	in	r30, 0x3d	; 61
   1af9c:	fe b7       	in	r31, 0x3e	; 62
   1af9e:	f5 82       	std	Z+5, r15	; 0x05
   1afa0:	e4 82       	std	Z+4, r14	; 0x04
   1afa2:	89 e4       	ldi	r24, 0x49	; 73
   1afa4:	92 e3       	ldi	r25, 0x32	; 50
   1afa6:	a0 e0       	ldi	r26, 0x00	; 0
   1afa8:	81 83       	std	Z+1, r24	; 0x01
   1afaa:	92 83       	std	Z+2, r25	; 0x02
   1afac:	a3 83       	std	Z+3, r26	; 0x03
   1afae:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1afb2:	13 c0       	rjmp	.+38     	; 0x1afda <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1afb4:	b8 01       	movw	r22, r16
   1afb6:	75 d9       	rcall	.-3350   	; 0x1a2a2 <lif_find_file>
    if(index == -1)
   1afb8:	01 96       	adiw	r24, 0x01	; 1
   1afba:	91 f4       	brne	.+36     	; 0x1afe0 <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1afbc:	ed b7       	in	r30, 0x3d	; 61
   1afbe:	fe b7       	in	r31, 0x3e	; 62
   1afc0:	15 83       	std	Z+5, r17	; 0x05
   1afc2:	04 83       	std	Z+4, r16	; 0x04
   1afc4:	86 e3       	ldi	r24, 0x36	; 54
   1afc6:	92 e3       	ldi	r25, 0x32	; 50
   1afc8:	a0 e0       	ldi	r26, 0x00	; 0
   1afca:	81 83       	std	Z+1, r24	; 0x01
   1afcc:	92 83       	std	Z+2, r25	; 0x02
   1afce:	a3 83       	std	Z+3, r26	; 0x03
   1afd0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1afd4:	c4 01       	movw	r24, r8
   1afd6:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1afda:	00 e0       	ldi	r16, 0x00	; 0
   1afdc:	10 e0       	ldi	r17, 0x00	; 0
   1afde:	ff c0       	rjmp	.+510    	; 0x1b1de <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1afe0:	94 01       	movw	r18, r8
   1afe2:	20 5a       	subi	r18, 0xA0	; 160
   1afe4:	3f 4f       	sbci	r19, 0xFF	; 255
   1afe6:	c0 5f       	subi	r28, 0xF0	; 240
   1afe8:	de 4f       	sbci	r29, 0xFE	; 254
   1afea:	39 83       	std	Y+1, r19	; 0x01
   1afec:	28 83       	st	Y, r18
   1afee:	c0 51       	subi	r28, 0x10	; 16
   1aff0:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1aff2:	f9 01       	movw	r30, r18
   1aff4:	a0 80       	ld	r10, Z
   1aff6:	b1 80       	ldd	r11, Z+1	; 0x01
   1aff8:	0b 2c       	mov	r0, r11
   1affa:	00 0c       	add	r0, r0
   1affc:	cc 08       	sbc	r12, r12
   1affe:	dd 08       	sbc	r13, r13
   1b000:	e1 2c       	mov	r14, r1
   1b002:	f1 2c       	mov	r15, r1
   1b004:	87 01       	movw	r16, r14
   1b006:	e3 94       	inc	r14
   1b008:	21 e0       	ldi	r18, 0x01	; 1
   1b00a:	30 e0       	ldi	r19, 0x00	; 0
   1b00c:	40 e0       	ldi	r20, 0x00	; 0
   1b00e:	50 e0       	ldi	r21, 0x00	; 0
   1b010:	61 e7       	ldi	r22, 0x71	; 113
   1b012:	76 e1       	ldi	r23, 0x16	; 22
   1b014:	c3 01       	movw	r24, r6
   1b016:	0e 94 32 ca 	call	0x19464	; 0x19464 <lif_create_volume>
   1b01a:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1b01c:	89 2b       	or	r24, r25
   1b01e:	d1 f2       	breq	.-76     	; 0x1afd4 <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1b020:	81 e2       	ldi	r24, 0x21	; 33
   1b022:	f4 01       	movw	r30, r8
   1b024:	e1 5b       	subi	r30, 0xB1	; 177
   1b026:	ff 4f       	sbci	r31, 0xFF	; 255
   1b028:	d7 01       	movw	r26, r14
   1b02a:	a1 5b       	subi	r26, 0xB1	; 177
   1b02c:	bf 4f       	sbci	r27, 0xFF	; 255
   1b02e:	01 90       	ld	r0, Z+
   1b030:	0d 92       	st	X+, r0
   1b032:	8a 95       	dec	r24
   1b034:	e1 f7       	brne	.-8      	; 0x1b02e <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1b036:	82 e0       	ldi	r24, 0x02	; 2
   1b038:	90 e0       	ldi	r25, 0x00	; 0
   1b03a:	a0 e0       	ldi	r26, 0x00	; 0
   1b03c:	b0 e0       	ldi	r27, 0x00	; 0
   1b03e:	f7 01       	movw	r30, r14
   1b040:	e4 5a       	subi	r30, 0xA4	; 164
   1b042:	ff 4f       	sbci	r31, 0xFF	; 255
   1b044:	80 83       	st	Z, r24
   1b046:	91 83       	std	Z+1, r25	; 0x01
   1b048:	a2 83       	std	Z+2, r26	; 0x02
   1b04a:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b04c:	c0 5f       	subi	r28, 0xF0	; 240
   1b04e:	de 4f       	sbci	r29, 0xFE	; 254
   1b050:	e8 81       	ld	r30, Y
   1b052:	f9 81       	ldd	r31, Y+1	; 0x01
   1b054:	c0 51       	subi	r28, 0x10	; 16
   1b056:	d1 40       	sbci	r29, 0x01	; 1
   1b058:	80 81       	ld	r24, Z
   1b05a:	91 81       	ldd	r25, Z+1	; 0x01
   1b05c:	a2 81       	ldd	r26, Z+2	; 0x02
   1b05e:	b3 81       	ldd	r27, Z+3	; 0x03
   1b060:	f7 01       	movw	r30, r14
   1b062:	80 8b       	std	Z+16, r24	; 0x10
   1b064:	91 8b       	std	Z+17, r25	; 0x11
   1b066:	a2 8b       	std	Z+18, r26	; 0x12
   1b068:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b06a:	60 e0       	ldi	r22, 0x00	; 0
   1b06c:	70 e0       	ldi	r23, 0x00	; 0
   1b06e:	c7 01       	movw	r24, r14
   1b070:	0e 94 b4 c8 	call	0x19168	; 0x19168 <lif_writedirindex>
   1b074:	8c 01       	movw	r16, r24
   1b076:	89 2b       	or	r24, r25
   1b078:	41 f0       	breq	.+16     	; 0x1b08a <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b07a:	61 e0       	ldi	r22, 0x01	; 1
   1b07c:	70 e0       	ldi	r23, 0x00	; 0
   1b07e:	c7 01       	movw	r24, r14
   1b080:	0e 94 10 c9 	call	0x19220	; 0x19220 <lif_writedirEOF>
   1b084:	8c 01       	movw	r16, r24
   1b086:	89 2b       	or	r24, r25
   1b088:	39 f4       	brne	.+14     	; 0x1b098 <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b08a:	c4 01       	movw	r24, r8
   1b08c:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>
   1b090:	c7 01       	movw	r24, r14
   1b092:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b096:	a3 c0       	rjmp	.+326    	; 0x1b1de <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b098:	f7 01       	movw	r30, r14
   1b09a:	44 84       	ldd	r4, Z+12	; 0x0c
   1b09c:	55 84       	ldd	r5, Z+13	; 0x0d
   1b09e:	66 84       	ldd	r6, Z+14	; 0x0e
   1b0a0:	77 84       	ldd	r7, Z+15	; 0x0f
   1b0a2:	76 2c       	mov	r7, r6
   1b0a4:	65 2c       	mov	r6, r5
   1b0a6:	54 2c       	mov	r5, r4
   1b0a8:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b0aa:	f4 01       	movw	r30, r8
   1b0ac:	e4 5a       	subi	r30, 0xA4	; 164
   1b0ae:	ff 4f       	sbci	r31, 0xFF	; 255
   1b0b0:	80 81       	ld	r24, Z
   1b0b2:	91 81       	ldd	r25, Z+1	; 0x01
   1b0b4:	a2 81       	ldd	r26, Z+2	; 0x02
   1b0b6:	b3 81       	ldd	r27, Z+3	; 0x03
   1b0b8:	22 27       	eor	r18, r18
   1b0ba:	38 2f       	mov	r19, r24
   1b0bc:	49 2f       	mov	r20, r25
   1b0be:	5a 2f       	mov	r21, r26
   1b0c0:	c4 5f       	subi	r28, 0xF4	; 244
   1b0c2:	de 4f       	sbci	r29, 0xFE	; 254
   1b0c4:	28 83       	st	Y, r18
   1b0c6:	39 83       	std	Y+1, r19	; 0x01
   1b0c8:	4a 83       	std	Y+2, r20	; 0x02
   1b0ca:	5b 83       	std	Y+3, r21	; 0x03
   1b0cc:	cc 50       	subi	r28, 0x0C	; 12
   1b0ce:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b0d0:	21 2c       	mov	r2, r1
   1b0d2:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b0d4:	88 e2       	ldi	r24, 0x28	; 40
   1b0d6:	92 e3       	ldi	r25, 0x32	; 50
   1b0d8:	9c 01       	movw	r18, r24
   1b0da:	40 e0       	ldi	r20, 0x00	; 0
   1b0dc:	ce 5e       	subi	r28, 0xEE	; 238
   1b0de:	de 4f       	sbci	r29, 0xFE	; 254
   1b0e0:	28 83       	st	Y, r18
   1b0e2:	39 83       	std	Y+1, r19	; 0x01
   1b0e4:	4a 83       	std	Y+2, r20	; 0x02
   1b0e6:	c2 51       	subi	r28, 0x12	; 18
   1b0e8:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b0ea:	c0 5f       	subi	r28, 0xF0	; 240
   1b0ec:	de 4f       	sbci	r29, 0xFE	; 254
   1b0ee:	e8 81       	ld	r30, Y
   1b0f0:	f9 81       	ldd	r31, Y+1	; 0x01
   1b0f2:	c0 51       	subi	r28, 0x10	; 16
   1b0f4:	d1 40       	sbci	r29, 0x01	; 1
   1b0f6:	80 81       	ld	r24, Z
   1b0f8:	91 81       	ldd	r25, Z+1	; 0x01
   1b0fa:	28 16       	cp	r2, r24
   1b0fc:	39 06       	cpc	r3, r25
   1b0fe:	0c f0       	brlt	.+2      	; 0x1b102 <lif_extract_lif_as_lif+0x188>
   1b100:	58 c0       	rjmp	.+176    	; 0x1b1b2 <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b102:	00 e0       	ldi	r16, 0x00	; 0
   1b104:	11 e0       	ldi	r17, 0x01	; 1
   1b106:	c4 5f       	subi	r28, 0xF4	; 244
   1b108:	de 4f       	sbci	r29, 0xFE	; 254
   1b10a:	28 81       	ld	r18, Y
   1b10c:	39 81       	ldd	r19, Y+1	; 0x01
   1b10e:	4a 81       	ldd	r20, Y+2	; 0x02
   1b110:	5b 81       	ldd	r21, Y+3	; 0x03
   1b112:	cc 50       	subi	r28, 0x0C	; 12
   1b114:	d1 40       	sbci	r29, 0x01	; 1
   1b116:	be 01       	movw	r22, r28
   1b118:	68 5f       	subi	r22, 0xF8	; 248
   1b11a:	7f 4f       	sbci	r23, 0xFF	; 255
   1b11c:	c4 01       	movw	r24, r8
   1b11e:	0e 94 f3 be 	call	0x17de6	; 0x17de6 <lif_read>
   1b122:	5b 01       	movw	r10, r22
   1b124:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1b126:	6f 3f       	cpi	r22, 0xFF	; 255
   1b128:	71 05       	cpc	r23, r1
   1b12a:	09 f0       	breq	.+2      	; 0x1b12e <lif_extract_lif_as_lif+0x1b4>
   1b12c:	2c f4       	brge	.+10     	; 0x1b138 <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b12e:	c4 01       	movw	r24, r8
   1b130:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>
   1b134:	c7 01       	movw	r24, r14
   1b136:	4f cf       	rjmp	.-354    	; 0x1afd6 <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b138:	00 e0       	ldi	r16, 0x00	; 0
   1b13a:	11 e0       	ldi	r17, 0x01	; 1
   1b13c:	a3 01       	movw	r20, r6
   1b13e:	92 01       	movw	r18, r4
   1b140:	be 01       	movw	r22, r28
   1b142:	68 5f       	subi	r22, 0xF8	; 248
   1b144:	7f 4f       	sbci	r23, 0xFF	; 255
   1b146:	c7 01       	movw	r24, r14
   1b148:	0e 94 46 bf 	call	0x17e8c	; 0x17e8c <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b14c:	c5 01       	movw	r24, r10
   1b14e:	0b 2c       	mov	r0, r11
   1b150:	00 0c       	add	r0, r0
   1b152:	aa 0b       	sbc	r26, r26
   1b154:	bb 0b       	sbc	r27, r27
   1b156:	48 0e       	add	r4, r24
   1b158:	59 1e       	adc	r5, r25
   1b15a:	6a 1e       	adc	r6, r26
   1b15c:	7b 1e       	adc	r7, r27
        offset += size;
   1b15e:	c4 5f       	subi	r28, 0xF4	; 244
   1b160:	de 4f       	sbci	r29, 0xFE	; 254
   1b162:	28 81       	ld	r18, Y
   1b164:	39 81       	ldd	r19, Y+1	; 0x01
   1b166:	4a 81       	ldd	r20, Y+2	; 0x02
   1b168:	5b 81       	ldd	r21, Y+3	; 0x03
   1b16a:	cc 50       	subi	r28, 0x0C	; 12
   1b16c:	d1 40       	sbci	r29, 0x01	; 1
   1b16e:	28 0f       	add	r18, r24
   1b170:	39 1f       	adc	r19, r25
   1b172:	4a 1f       	adc	r20, r26
   1b174:	5b 1f       	adc	r21, r27
   1b176:	c4 5f       	subi	r28, 0xF4	; 244
   1b178:	de 4f       	sbci	r29, 0xFE	; 254
   1b17a:	28 83       	st	Y, r18
   1b17c:	39 83       	std	Y+1, r19	; 0x01
   1b17e:	4a 83       	std	Y+2, r20	; 0x02
   1b180:	5b 83       	std	Y+3, r21	; 0x03
   1b182:	cc 50       	subi	r28, 0x0C	; 12
   1b184:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b186:	ed b7       	in	r30, 0x3d	; 61
   1b188:	fe b7       	in	r31, 0x3e	; 62
   1b18a:	44 82       	std	Z+4, r4	; 0x04
   1b18c:	55 82       	std	Z+5, r5	; 0x05
   1b18e:	66 82       	std	Z+6, r6	; 0x06
   1b190:	77 82       	std	Z+7, r7	; 0x07
   1b192:	ce 5e       	subi	r28, 0xEE	; 238
   1b194:	de 4f       	sbci	r29, 0xFE	; 254
   1b196:	28 81       	ld	r18, Y
   1b198:	39 81       	ldd	r19, Y+1	; 0x01
   1b19a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b19c:	c2 51       	subi	r28, 0x12	; 18
   1b19e:	d1 40       	sbci	r29, 0x01	; 1
   1b1a0:	21 83       	std	Z+1, r18	; 0x01
   1b1a2:	32 83       	std	Z+2, r19	; 0x02
   1b1a4:	43 83       	std	Z+3, r20	; 0x03
   1b1a6:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b1aa:	ff ef       	ldi	r31, 0xFF	; 255
   1b1ac:	2f 1a       	sub	r2, r31
   1b1ae:	3f 0a       	sbc	r3, r31
   1b1b0:	9c cf       	rjmp	.-200    	; 0x1b0ea <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b1b2:	c4 01       	movw	r24, r8
   1b1b4:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>
   1b1b8:	c7 01       	movw	r24, r14
   1b1ba:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b1be:	ed b7       	in	r30, 0x3d	; 61
   1b1c0:	fe b7       	in	r31, 0x3e	; 62
   1b1c2:	44 82       	std	Z+4, r4	; 0x04
   1b1c4:	55 82       	std	Z+5, r5	; 0x05
   1b1c6:	66 82       	std	Z+6, r6	; 0x06
   1b1c8:	77 82       	std	Z+7, r7	; 0x07
   1b1ca:	8a e1       	ldi	r24, 0x1A	; 26
   1b1cc:	92 e3       	ldi	r25, 0x32	; 50
   1b1ce:	a0 e0       	ldi	r26, 0x00	; 0
   1b1d0:	81 83       	std	Z+1, r24	; 0x01
   1b1d2:	92 83       	std	Z+2, r25	; 0x02
   1b1d4:	a3 83       	std	Z+3, r26	; 0x03
   1b1d6:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    return(1);
   1b1da:	01 e0       	ldi	r16, 0x01	; 1
   1b1dc:	10 e0       	ldi	r17, 0x00	; 0
}
   1b1de:	c8 01       	movw	r24, r16
   1b1e0:	cc 5e       	subi	r28, 0xEC	; 236
   1b1e2:	de 4f       	sbci	r29, 0xFE	; 254
   1b1e4:	e2 e1       	ldi	r30, 0x12	; 18
   1b1e6:	0c 94 5a e3 	jmp	0x1c6b4	; 0x1c6b4 <__epilogue_restores__>

0001b1ea <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b1ea:	2f 92       	push	r2
   1b1ec:	3f 92       	push	r3
   1b1ee:	4f 92       	push	r4
   1b1f0:	5f 92       	push	r5
   1b1f2:	6f 92       	push	r6
   1b1f4:	8f 92       	push	r8
   1b1f6:	9f 92       	push	r9
   1b1f8:	af 92       	push	r10
   1b1fa:	bf 92       	push	r11
   1b1fc:	cf 92       	push	r12
   1b1fe:	df 92       	push	r13
   1b200:	ef 92       	push	r14
   1b202:	ff 92       	push	r15
   1b204:	0f 93       	push	r16
   1b206:	1f 93       	push	r17
   1b208:	cf 93       	push	r28
   1b20a:	df 93       	push	r29
   1b20c:	cd b7       	in	r28, 0x3d	; 61
   1b20e:	de b7       	in	r29, 0x3e	; 62
   1b210:	cd 51       	subi	r28, 0x1D	; 29
   1b212:	d1 40       	sbci	r29, 0x01	; 1
   1b214:	0f b6       	in	r0, 0x3f	; 63
   1b216:	f8 94       	cli
   1b218:	de bf       	out	0x3e, r29	; 62
   1b21a:	0f be       	out	0x3f, r0	; 63
   1b21c:	cd bf       	out	0x3d, r28	; 61
   1b21e:	5c 01       	movw	r10, r24
   1b220:	7b 01       	movw	r14, r22
   1b222:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b224:	dc 01       	movw	r26, r24
   1b226:	8c 91       	ld	r24, X
   1b228:	81 11       	cpse	r24, r1
   1b22a:	03 c0       	rjmp	.+6      	; 0x1b232 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b22c:	8a ef       	ldi	r24, 0xFA	; 250
   1b22e:	91 e3       	ldi	r25, 0x31	; 49
   1b230:	06 c0       	rjmp	.+12     	; 0x1b23e <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b232:	db 01       	movw	r26, r22
   1b234:	8c 91       	ld	r24, X
   1b236:	81 11       	cpse	r24, r1
   1b238:	0b c0       	rjmp	.+22     	; 0x1b250 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b23a:	8f ed       	ldi	r24, 0xDF	; 223
   1b23c:	91 e3       	ldi	r25, 0x31	; 49
   1b23e:	a0 e0       	ldi	r26, 0x00	; 0
   1b240:	ed b7       	in	r30, 0x3d	; 61
   1b242:	fe b7       	in	r31, 0x3e	; 62
   1b244:	81 83       	std	Z+1, r24	; 0x01
   1b246:	92 83       	std	Z+2, r25	; 0x02
   1b248:	a3 83       	std	Z+3, r26	; 0x03
   1b24a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1b24e:	25 c1       	rjmp	.+586    	; 0x1b49a <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b250:	da 01       	movw	r26, r20
   1b252:	8c 91       	ld	r24, X
   1b254:	81 11       	cpse	r24, r1
   1b256:	03 c0       	rjmp	.+6      	; 0x1b25e <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b258:	83 ec       	ldi	r24, 0xC3	; 195
   1b25a:	91 e3       	ldi	r25, 0x31	; 49
   1b25c:	f0 cf       	rjmp	.-32     	; 0x1b23e <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1b25e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b262:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b266:	92 ff       	sbrs	r25, 2
   1b268:	10 c0       	rjmp	.+32     	; 0x1b28a <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1b26a:	ed b7       	in	r30, 0x3d	; 61
   1b26c:	fe b7       	in	r31, 0x3e	; 62
   1b26e:	51 87       	std	Z+9, r21	; 0x09
   1b270:	40 87       	std	Z+8, r20	; 0x08
   1b272:	77 83       	std	Z+7, r23	; 0x07
   1b274:	66 83       	std	Z+6, r22	; 0x06
   1b276:	b5 82       	std	Z+5, r11	; 0x05
   1b278:	a4 82       	std	Z+4, r10	; 0x04
   1b27a:	84 e9       	ldi	r24, 0x94	; 148
   1b27c:	91 e3       	ldi	r25, 0x31	; 49
   1b27e:	a0 e0       	ldi	r26, 0x00	; 0
   1b280:	81 83       	std	Z+1, r24	; 0x01
   1b282:	92 83       	std	Z+2, r25	; 0x02
   1b284:	a3 83       	std	Z+3, r26	; 0x03
   1b286:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b28a:	68 e0       	ldi	r22, 0x08	; 8
   1b28c:	79 e0       	ldi	r23, 0x09	; 9
   1b28e:	c4 01       	movw	r24, r8
   1b290:	0e 94 7c ce 	call	0x19cf8	; 0x19cf8 <lif_open_volume>
   1b294:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b296:	00 97       	sbiw	r24, 0x00	; 0
   1b298:	09 f4       	brne	.+2      	; 0x1b29c <lif_add_lif_file+0xb2>
   1b29a:	ff c0       	rjmp	.+510    	; 0x1b49a <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b29c:	b7 01       	movw	r22, r14
   1b29e:	01 d8       	rcall	.-4094   	; 0x1a2a2 <lif_find_file>
    if(index == -1)
   1b2a0:	01 96       	adiw	r24, 0x01	; 1
   1b2a2:	a1 f4       	brne	.+40     	; 0x1b2cc <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b2a4:	ed b7       	in	r30, 0x3d	; 61
   1b2a6:	fe b7       	in	r31, 0x3e	; 62
   1b2a8:	f5 82       	std	Z+5, r15	; 0x05
   1b2aa:	e4 82       	std	Z+4, r14	; 0x04
   1b2ac:	81 e8       	ldi	r24, 0x81	; 129
   1b2ae:	91 e3       	ldi	r25, 0x31	; 49
   1b2b0:	a0 e0       	ldi	r26, 0x00	; 0
   1b2b2:	81 83       	std	Z+1, r24	; 0x01
   1b2b4:	92 83       	std	Z+2, r25	; 0x02
   1b2b6:	a3 83       	std	Z+3, r26	; 0x03
   1b2b8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b2bc:	c6 01       	movw	r24, r12
   1b2be:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b2c2:	60 e0       	ldi	r22, 0x00	; 0
   1b2c4:	70 e0       	ldi	r23, 0x00	; 0
   1b2c6:	80 e0       	ldi	r24, 0x00	; 0
   1b2c8:	90 e0       	ldi	r25, 0x00	; 0
   1b2ca:	ff c0       	rjmp	.+510    	; 0x1b4ca <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b2cc:	68 e0       	ldi	r22, 0x08	; 8
   1b2ce:	79 e0       	ldi	r23, 0x09	; 9
   1b2d0:	c5 01       	movw	r24, r10
   1b2d2:	0e 94 7c ce 	call	0x19cf8	; 0x19cf8 <lif_open_volume>
   1b2d6:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b2d8:	00 97       	sbiw	r24, 0x00	; 0
   1b2da:	09 f4       	brne	.+2      	; 0x1b2de <lif_add_lif_file+0xf4>
   1b2dc:	de c0       	rjmp	.+444    	; 0x1b49a <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b2de:	f6 01       	movw	r30, r12
   1b2e0:	e0 5a       	subi	r30, 0xA0	; 160
   1b2e2:	ff 4f       	sbci	r31, 0xFF	; 255
   1b2e4:	40 81       	ld	r20, Z
   1b2e6:	51 81       	ldd	r21, Z+1	; 0x01
   1b2e8:	62 81       	ldd	r22, Z+2	; 0x02
   1b2ea:	73 81       	ldd	r23, Z+3	; 0x03
   1b2ec:	0e 94 1c cd 	call	0x19a38	; 0x19a38 <lif_newdir>
   1b2f0:	ca 5e       	subi	r28, 0xEA	; 234
   1b2f2:	de 4f       	sbci	r29, 0xFE	; 254
   1b2f4:	99 83       	std	Y+1, r25	; 0x01
   1b2f6:	88 83       	st	Y, r24
   1b2f8:	c6 51       	subi	r28, 0x16	; 22
   1b2fa:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b2fc:	01 96       	adiw	r24, 0x01	; 1
   1b2fe:	79 f4       	brne	.+30     	; 0x1b31e <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1b300:	ed b7       	in	r30, 0x3d	; 61
   1b302:	fe b7       	in	r31, 0x3e	; 62
   1b304:	97 82       	std	Z+7, r9	; 0x07
   1b306:	86 82       	std	Z+6, r8	; 0x06
   1b308:	b5 82       	std	Z+5, r11	; 0x05
   1b30a:	a4 82       	std	Z+4, r10	; 0x04
   1b30c:	81 e5       	ldi	r24, 0x51	; 81
   1b30e:	91 e3       	ldi	r25, 0x31	; 49
   1b310:	a0 e0       	ldi	r26, 0x00	; 0
   1b312:	81 83       	std	Z+1, r24	; 0x01
   1b314:	92 83       	std	Z+2, r25	; 0x02
   1b316:	a3 83       	std	Z+3, r26	; 0x03
   1b318:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1b31c:	a8 c0       	rjmp	.+336    	; 0x1b46e <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1b31e:	c7 01       	movw	r24, r14
   1b320:	84 5a       	subi	r24, 0xA4	; 164
   1b322:	9f 4f       	sbci	r25, 0xFF	; 255
   1b324:	dc 01       	movw	r26, r24
   1b326:	4d 91       	ld	r20, X+
   1b328:	5d 91       	ld	r21, X+
   1b32a:	6d 91       	ld	r22, X+
   1b32c:	7c 91       	ld	r23, X
   1b32e:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b330:	21 e2       	ldi	r18, 0x21	; 33
   1b332:	f6 01       	movw	r30, r12
   1b334:	e1 5b       	subi	r30, 0xB1	; 177
   1b336:	ff 4f       	sbci	r31, 0xFF	; 255
   1b338:	1d 97       	sbiw	r26, 0x0d	; 13
   1b33a:	01 90       	ld	r0, Z+
   1b33c:	0d 92       	st	X+, r0
   1b33e:	2a 95       	dec	r18
   1b340:	e1 f7       	brne	.-8      	; 0x1b33a <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b342:	fc 01       	movw	r30, r24
   1b344:	40 83       	st	Z, r20
   1b346:	51 83       	std	Z+1, r21	; 0x01
   1b348:	62 83       	std	Z+2, r22	; 0x02
   1b34a:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b34c:	b6 2f       	mov	r27, r22
   1b34e:	a5 2f       	mov	r26, r21
   1b350:	94 2f       	mov	r25, r20
   1b352:	88 27       	eor	r24, r24
   1b354:	c2 5f       	subi	r28, 0xF2	; 242
   1b356:	de 4f       	sbci	r29, 0xFE	; 254
   1b358:	88 83       	st	Y, r24
   1b35a:	99 83       	std	Y+1, r25	; 0x01
   1b35c:	aa 83       	std	Y+2, r26	; 0x02
   1b35e:	bb 83       	std	Y+3, r27	; 0x03
   1b360:	ce 50       	subi	r28, 0x0E	; 14
   1b362:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b364:	f6 01       	movw	r30, r12
   1b366:	e4 5a       	subi	r30, 0xA4	; 164
   1b368:	ff 4f       	sbci	r31, 0xFF	; 255
   1b36a:	80 81       	ld	r24, Z
   1b36c:	91 81       	ldd	r25, Z+1	; 0x01
   1b36e:	a2 81       	ldd	r26, Z+2	; 0x02
   1b370:	b3 81       	ldd	r27, Z+3	; 0x03
   1b372:	22 27       	eor	r18, r18
   1b374:	38 2f       	mov	r19, r24
   1b376:	49 2f       	mov	r20, r25
   1b378:	5a 2f       	mov	r21, r26
   1b37a:	ce 5e       	subi	r28, 0xEE	; 238
   1b37c:	de 4f       	sbci	r29, 0xFE	; 254
   1b37e:	28 83       	st	Y, r18
   1b380:	39 83       	std	Y+1, r19	; 0x01
   1b382:	4a 83       	std	Y+2, r20	; 0x02
   1b384:	5b 83       	std	Y+3, r21	; 0x03
   1b386:	c2 51       	subi	r28, 0x12	; 18
   1b388:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b38a:	21 2c       	mov	r2, r1
   1b38c:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b38e:	81 2c       	mov	r8, r1
   1b390:	91 2c       	mov	r9, r1
   1b392:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b394:	a7 01       	movw	r20, r14
   1b396:	40 5a       	subi	r20, 0xA0	; 160
   1b398:	5f 4f       	sbci	r21, 0xFF	; 255
   1b39a:	c4 5e       	subi	r28, 0xE4	; 228
   1b39c:	de 4f       	sbci	r29, 0xFE	; 254
   1b39e:	59 83       	std	Y+1, r21	; 0x01
   1b3a0:	48 83       	st	Y, r20
   1b3a2:	cc 51       	subi	r28, 0x1C	; 28
   1b3a4:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b3a6:	83 e4       	ldi	r24, 0x43	; 67
   1b3a8:	91 e3       	ldi	r25, 0x31	; 49
   1b3aa:	2c 01       	movw	r4, r24
   1b3ac:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b3ae:	27 c0       	rjmp	.+78     	; 0x1b3fe <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b3b0:	00 e0       	ldi	r16, 0x00	; 0
   1b3b2:	11 e0       	ldi	r17, 0x01	; 1
   1b3b4:	c8 5e       	subi	r28, 0xE8	; 232
   1b3b6:	de 4f       	sbci	r29, 0xFE	; 254
   1b3b8:	28 81       	ld	r18, Y
   1b3ba:	39 81       	ldd	r19, Y+1	; 0x01
   1b3bc:	4a 81       	ldd	r20, Y+2	; 0x02
   1b3be:	5b 81       	ldd	r21, Y+3	; 0x03
   1b3c0:	c8 51       	subi	r28, 0x18	; 24
   1b3c2:	d1 40       	sbci	r29, 0x01	; 1
   1b3c4:	be 01       	movw	r22, r28
   1b3c6:	66 5f       	subi	r22, 0xF6	; 246
   1b3c8:	7f 4f       	sbci	r23, 0xFF	; 255
   1b3ca:	c7 01       	movw	r24, r14
   1b3cc:	0e 94 46 bf 	call	0x17e8c	; 0x17e8c <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b3d0:	8f 3f       	cpi	r24, 0xFF	; 255
   1b3d2:	91 05       	cpc	r25, r1
   1b3d4:	09 f0       	breq	.+2      	; 0x1b3d8 <lif_add_lif_file+0x1ee>
   1b3d6:	0c f4       	brge	.+2      	; 0x1b3da <lif_add_lif_file+0x1f0>
   1b3d8:	4a c0       	rjmp	.+148    	; 0x1b46e <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b3da:	5f ef       	ldi	r21, 0xFF	; 255
   1b3dc:	95 1a       	sub	r9, r21
   1b3de:	a5 0a       	sbc	r10, r21
   1b3e0:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b3e2:	ed b7       	in	r30, 0x3d	; 61
   1b3e4:	fe b7       	in	r31, 0x3e	; 62
   1b3e6:	84 82       	std	Z+4, r8	; 0x04
   1b3e8:	95 82       	std	Z+5, r9	; 0x05
   1b3ea:	a6 82       	std	Z+6, r10	; 0x06
   1b3ec:	b7 82       	std	Z+7, r11	; 0x07
   1b3ee:	41 82       	std	Z+1, r4	; 0x01
   1b3f0:	52 82       	std	Z+2, r5	; 0x02
   1b3f2:	63 82       	std	Z+3, r6	; 0x03
   1b3f4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b3f8:	ff ef       	ldi	r31, 0xFF	; 255
   1b3fa:	2f 1a       	sub	r2, r31
   1b3fc:	3f 0a       	sbc	r3, r31
   1b3fe:	ce 5e       	subi	r28, 0xEE	; 238
   1b400:	de 4f       	sbci	r29, 0xFE	; 254
   1b402:	28 81       	ld	r18, Y
   1b404:	39 81       	ldd	r19, Y+1	; 0x01
   1b406:	4a 81       	ldd	r20, Y+2	; 0x02
   1b408:	5b 81       	ldd	r21, Y+3	; 0x03
   1b40a:	c2 51       	subi	r28, 0x12	; 18
   1b40c:	d1 40       	sbci	r29, 0x01	; 1
   1b40e:	28 0d       	add	r18, r8
   1b410:	39 1d       	adc	r19, r9
   1b412:	4a 1d       	adc	r20, r10
   1b414:	5b 1d       	adc	r21, r11
   1b416:	c2 5f       	subi	r28, 0xF2	; 242
   1b418:	de 4f       	sbci	r29, 0xFE	; 254
   1b41a:	88 81       	ld	r24, Y
   1b41c:	99 81       	ldd	r25, Y+1	; 0x01
   1b41e:	aa 81       	ldd	r26, Y+2	; 0x02
   1b420:	bb 81       	ldd	r27, Y+3	; 0x03
   1b422:	ce 50       	subi	r28, 0x0E	; 14
   1b424:	d1 40       	sbci	r29, 0x01	; 1
   1b426:	88 0d       	add	r24, r8
   1b428:	99 1d       	adc	r25, r9
   1b42a:	aa 1d       	adc	r26, r10
   1b42c:	bb 1d       	adc	r27, r11
   1b42e:	c8 5e       	subi	r28, 0xE8	; 232
   1b430:	de 4f       	sbci	r29, 0xFE	; 254
   1b432:	88 83       	st	Y, r24
   1b434:	99 83       	std	Y+1, r25	; 0x01
   1b436:	aa 83       	std	Y+2, r26	; 0x02
   1b438:	bb 83       	std	Y+3, r27	; 0x03
   1b43a:	c8 51       	subi	r28, 0x18	; 24
   1b43c:	d1 40       	sbci	r29, 0x01	; 1
   1b43e:	c4 5e       	subi	r28, 0xE4	; 228
   1b440:	de 4f       	sbci	r29, 0xFE	; 254
   1b442:	a8 81       	ld	r26, Y
   1b444:	b9 81       	ldd	r27, Y+1	; 0x01
   1b446:	cc 51       	subi	r28, 0x1C	; 28
   1b448:	d1 40       	sbci	r29, 0x01	; 1
   1b44a:	8d 91       	ld	r24, X+
   1b44c:	9c 91       	ld	r25, X
   1b44e:	28 16       	cp	r2, r24
   1b450:	39 06       	cpc	r3, r25
   1b452:	94 f4       	brge	.+36     	; 0x1b478 <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1b454:	00 e0       	ldi	r16, 0x00	; 0
   1b456:	11 e0       	ldi	r17, 0x01	; 1
   1b458:	be 01       	movw	r22, r28
   1b45a:	66 5f       	subi	r22, 0xF6	; 246
   1b45c:	7f 4f       	sbci	r23, 0xFF	; 255
   1b45e:	c6 01       	movw	r24, r12
   1b460:	0e 94 f3 be 	call	0x17de6	; 0x17de6 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b464:	6f 3f       	cpi	r22, 0xFF	; 255
   1b466:	71 05       	cpc	r23, r1
   1b468:	11 f0       	breq	.+4      	; 0x1b46e <lif_add_lif_file+0x284>
   1b46a:	0c f0       	brlt	.+2      	; 0x1b46e <lif_add_lif_file+0x284>
   1b46c:	a1 cf       	rjmp	.-190    	; 0x1b3b0 <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b46e:	c7 01       	movw	r24, r14
   1b470:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>
   1b474:	c6 01       	movw	r24, r12
   1b476:	0f c0       	rjmp	.+30     	; 0x1b496 <lif_add_lif_file+0x2ac>
   1b478:	c6 01       	movw	r24, r12
   1b47a:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1b47e:	ca 5e       	subi	r28, 0xEA	; 234
   1b480:	de 4f       	sbci	r29, 0xFE	; 254
   1b482:	68 81       	ld	r22, Y
   1b484:	79 81       	ldd	r23, Y+1	; 0x01
   1b486:	c6 51       	subi	r28, 0x16	; 22
   1b488:	d1 40       	sbci	r29, 0x01	; 1
   1b48a:	c7 01       	movw	r24, r14
   1b48c:	0e 94 b4 c8 	call	0x19168	; 0x19168 <lif_writedirindex>
   1b490:	89 2b       	or	r24, r25
   1b492:	41 f4       	brne	.+16     	; 0x1b4a4 <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b494:	c7 01       	movw	r24, r14
   1b496:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1b49a:	6f ef       	ldi	r22, 0xFF	; 255
   1b49c:	7f ef       	ldi	r23, 0xFF	; 255
   1b49e:	8f ef       	ldi	r24, 0xFF	; 255
   1b4a0:	9f ef       	ldi	r25, 0xFF	; 255
   1b4a2:	13 c0       	rjmp	.+38     	; 0x1b4ca <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b4a4:	c7 01       	movw	r24, r14
   1b4a6:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1b4aa:	ed b7       	in	r30, 0x3d	; 61
   1b4ac:	fe b7       	in	r31, 0x3e	; 62
   1b4ae:	84 82       	std	Z+4, r8	; 0x04
   1b4b0:	95 82       	std	Z+5, r9	; 0x05
   1b4b2:	a6 82       	std	Z+6, r10	; 0x06
   1b4b4:	b7 82       	std	Z+7, r11	; 0x07
   1b4b6:	85 e3       	ldi	r24, 0x35	; 53
   1b4b8:	91 e3       	ldi	r25, 0x31	; 49
   1b4ba:	a0 e0       	ldi	r26, 0x00	; 0
   1b4bc:	81 83       	std	Z+1, r24	; 0x01
   1b4be:	92 83       	std	Z+2, r25	; 0x02
   1b4c0:	a3 83       	std	Z+3, r26	; 0x03
   1b4c2:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    return(bytes);
   1b4c6:	b4 01       	movw	r22, r8
   1b4c8:	c5 01       	movw	r24, r10
}
   1b4ca:	c3 5e       	subi	r28, 0xE3	; 227
   1b4cc:	de 4f       	sbci	r29, 0xFE	; 254
   1b4ce:	0f b6       	in	r0, 0x3f	; 63
   1b4d0:	f8 94       	cli
   1b4d2:	de bf       	out	0x3e, r29	; 62
   1b4d4:	0f be       	out	0x3f, r0	; 63
   1b4d6:	cd bf       	out	0x3d, r28	; 61
   1b4d8:	df 91       	pop	r29
   1b4da:	cf 91       	pop	r28
   1b4dc:	1f 91       	pop	r17
   1b4de:	0f 91       	pop	r16
   1b4e0:	ff 90       	pop	r15
   1b4e2:	ef 90       	pop	r14
   1b4e4:	df 90       	pop	r13
   1b4e6:	cf 90       	pop	r12
   1b4e8:	bf 90       	pop	r11
   1b4ea:	af 90       	pop	r10
   1b4ec:	9f 90       	pop	r9
   1b4ee:	8f 90       	pop	r8
   1b4f0:	6f 90       	pop	r6
   1b4f2:	5f 90       	pop	r5
   1b4f4:	4f 90       	pop	r4
   1b4f6:	3f 90       	pop	r3
   1b4f8:	2f 90       	pop	r2
   1b4fa:	08 95       	ret

0001b4fc <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1b4fc:	ef 92       	push	r14
   1b4fe:	ff 92       	push	r15
   1b500:	0f 93       	push	r16
   1b502:	1f 93       	push	r17
   1b504:	cf 93       	push	r28
   1b506:	df 93       	push	r29
   1b508:	ad b7       	in	r26, 0x3d	; 61
   1b50a:	be b7       	in	r27, 0x3e	; 62
   1b50c:	17 97       	sbiw	r26, 0x07	; 7
   1b50e:	0f b6       	in	r0, 0x3f	; 63
   1b510:	f8 94       	cli
   1b512:	be bf       	out	0x3e, r27	; 62
   1b514:	0f be       	out	0x3f, r0	; 63
   1b516:	ad bf       	out	0x3d, r26	; 61
   1b518:	7c 01       	movw	r14, r24
   1b51a:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1b51c:	fc 01       	movw	r30, r24
   1b51e:	80 81       	ld	r24, Z
   1b520:	81 11       	cpse	r24, r1
   1b522:	03 c0       	rjmp	.+6      	; 0x1b52a <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1b524:	80 e1       	ldi	r24, 0x10	; 16
   1b526:	91 e3       	ldi	r25, 0x31	; 49
   1b528:	06 c0       	rjmp	.+12     	; 0x1b536 <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1b52a:	fb 01       	movw	r30, r22
   1b52c:	80 81       	ld	r24, Z
   1b52e:	81 11       	cpse	r24, r1
   1b530:	0b c0       	rjmp	.+22     	; 0x1b548 <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1b532:	80 ef       	ldi	r24, 0xF0	; 240
   1b534:	90 e3       	ldi	r25, 0x30	; 48
   1b536:	a0 e0       	ldi	r26, 0x00	; 0
   1b538:	ed b7       	in	r30, 0x3d	; 61
   1b53a:	fe b7       	in	r31, 0x3e	; 62
   1b53c:	81 83       	std	Z+1, r24	; 0x01
   1b53e:	92 83       	std	Z+2, r25	; 0x02
   1b540:	a3 83       	std	Z+3, r26	; 0x03
   1b542:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1b546:	68 c0       	rjmp	.+208    	; 0x1b618 <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1b548:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b54c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b550:	92 ff       	sbrs	r25, 2
   1b552:	0e c0       	rjmp	.+28     	; 0x1b570 <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1b554:	ed b7       	in	r30, 0x3d	; 61
   1b556:	fe b7       	in	r31, 0x3e	; 62
   1b558:	77 83       	std	Z+7, r23	; 0x07
   1b55a:	66 83       	std	Z+6, r22	; 0x06
   1b55c:	f5 82       	std	Z+5, r15	; 0x05
   1b55e:	e4 82       	std	Z+4, r14	; 0x04
   1b560:	81 ed       	ldi	r24, 0xD1	; 209
   1b562:	90 e3       	ldi	r25, 0x30	; 48
   1b564:	a0 e0       	ldi	r26, 0x00	; 0
   1b566:	81 83       	std	Z+1, r24	; 0x01
   1b568:	92 83       	std	Z+2, r25	; 0x02
   1b56a:	a3 83       	std	Z+3, r26	; 0x03
   1b56c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1b570:	68 e0       	ldi	r22, 0x08	; 8
   1b572:	79 e0       	ldi	r23, 0x09	; 9
   1b574:	c7 01       	movw	r24, r14
   1b576:	0e 94 7c ce 	call	0x19cf8	; 0x19cf8 <lif_open_volume>
   1b57a:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b57c:	00 97       	sbiw	r24, 0x00	; 0
   1b57e:	09 f4       	brne	.+2      	; 0x1b582 <lif_del_file+0x86>
   1b580:	4b c0       	rjmp	.+150    	; 0x1b618 <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1b582:	b8 01       	movw	r22, r16
   1b584:	0e 94 51 d1 	call	0x1a2a2	; 0x1a2a2 <lif_find_file>
    if(index == -1)
   1b588:	8f 3f       	cpi	r24, 0xFF	; 255
   1b58a:	ff ef       	ldi	r31, 0xFF	; 255
   1b58c:	9f 07       	cpc	r25, r31
   1b58e:	a1 f4       	brne	.+40     	; 0x1b5b8 <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b590:	ce 01       	movw	r24, r28
   1b592:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1b596:	ed b7       	in	r30, 0x3d	; 61
   1b598:	fe b7       	in	r31, 0x3e	; 62
   1b59a:	17 83       	std	Z+7, r17	; 0x07
   1b59c:	06 83       	std	Z+6, r16	; 0x06
   1b59e:	f5 82       	std	Z+5, r15	; 0x05
   1b5a0:	e4 82       	std	Z+4, r14	; 0x04
   1b5a2:	89 ea       	ldi	r24, 0xA9	; 169
   1b5a4:	90 e3       	ldi	r25, 0x30	; 48
   1b5a6:	a0 e0       	ldi	r26, 0x00	; 0
   1b5a8:	81 83       	std	Z+1, r24	; 0x01
   1b5aa:	92 83       	std	Z+2, r25	; 0x02
   1b5ac:	a3 83       	std	Z+3, r26	; 0x03
   1b5ae:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        return(0);
   1b5b2:	80 e0       	ldi	r24, 0x00	; 0
   1b5b4:	90 e0       	ldi	r25, 0x00	; 0
   1b5b6:	32 c0       	rjmp	.+100    	; 0x1b61c <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1b5b8:	2a a1       	ldd	r18, Y+34	; 0x22
   1b5ba:	3b a1       	ldd	r19, Y+35	; 0x23
   1b5bc:	21 50       	subi	r18, 0x01	; 1
   1b5be:	31 09       	sbc	r19, r1
   1b5c0:	fe 01       	movw	r30, r28
   1b5c2:	e6 5a       	subi	r30, 0xA6	; 166
   1b5c4:	ff 4f       	sbci	r31, 0xFF	; 255
   1b5c6:	82 17       	cp	r24, r18
   1b5c8:	93 07       	cpc	r25, r19
   1b5ca:	2c f0       	brlt	.+10     	; 0x1b5d6 <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1b5cc:	2f ef       	ldi	r18, 0xFF	; 255
   1b5ce:	3f ef       	ldi	r19, 0xFF	; 255
   1b5d0:	31 83       	std	Z+1, r19	; 0x01
   1b5d2:	20 83       	st	Z, r18
   1b5d4:	02 c0       	rjmp	.+4      	; 0x1b5da <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1b5d6:	11 82       	std	Z+1, r1	; 0x01
   1b5d8:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1b5da:	bc 01       	movw	r22, r24
   1b5dc:	ce 01       	movw	r24, r28
   1b5de:	0e 94 b4 c8 	call	0x19168	; 0x19168 <lif_writedirindex>
   1b5e2:	89 2b       	or	r24, r25
   1b5e4:	21 f4       	brne	.+8      	; 0x1b5ee <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b5e6:	ce 01       	movw	r24, r28
   1b5e8:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>
   1b5ec:	15 c0       	rjmp	.+42     	; 0x1b618 <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1b5ee:	ce 01       	movw	r24, r28
   1b5f0:	0e 94 28 c9 	call	0x19250	; 0x19250 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b5f4:	ce 01       	movw	r24, r28
   1b5f6:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1b5fa:	ed b7       	in	r30, 0x3d	; 61
   1b5fc:	fe b7       	in	r31, 0x3e	; 62
   1b5fe:	15 83       	std	Z+5, r17	; 0x05
   1b600:	04 83       	std	Z+4, r16	; 0x04
   1b602:	8a e9       	ldi	r24, 0x9A	; 154
   1b604:	90 e3       	ldi	r25, 0x30	; 48
   1b606:	a0 e0       	ldi	r26, 0x00	; 0
   1b608:	81 83       	std	Z+1, r24	; 0x01
   1b60a:	92 83       	std	Z+2, r25	; 0x02
   1b60c:	a3 83       	std	Z+3, r26	; 0x03
   1b60e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

    return(1);
   1b612:	81 e0       	ldi	r24, 0x01	; 1
   1b614:	90 e0       	ldi	r25, 0x00	; 0
   1b616:	02 c0       	rjmp	.+4      	; 0x1b61c <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b618:	8f ef       	ldi	r24, 0xFF	; 255
   1b61a:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1b61c:	cd b7       	in	r28, 0x3d	; 61
   1b61e:	de b7       	in	r29, 0x3e	; 62
   1b620:	27 96       	adiw	r28, 0x07	; 7
   1b622:	e6 e0       	ldi	r30, 0x06	; 6
   1b624:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__epilogue_restores__+0x18>

0001b628 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1b628:	a7 e0       	ldi	r26, 0x07	; 7
   1b62a:	b0 e0       	ldi	r27, 0x00	; 0
   1b62c:	ea e1       	ldi	r30, 0x1A	; 26
   1b62e:	fb ed       	ldi	r31, 0xDB	; 219
   1b630:	0c 94 46 e3 	jmp	0x1c68c	; 0x1c68c <__prologue_saves__+0x10>
   1b634:	6c 01       	movw	r12, r24
   1b636:	8b 01       	movw	r16, r22
   1b638:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1b63a:	fc 01       	movw	r30, r24
   1b63c:	80 81       	ld	r24, Z
   1b63e:	81 11       	cpse	r24, r1
   1b640:	03 c0       	rjmp	.+6      	; 0x1b648 <lif_rename_file+0x20>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1b642:	82 e7       	ldi	r24, 0x72	; 114
   1b644:	90 e3       	ldi	r25, 0x30	; 48
   1b646:	06 c0       	rjmp	.+12     	; 0x1b654 <lif_rename_file+0x2c>
        return(-1);
    }
    if(!*oldlifname)
   1b648:	fb 01       	movw	r30, r22
   1b64a:	80 81       	ld	r24, Z
   1b64c:	81 11       	cpse	r24, r1
   1b64e:	0b c0       	rjmp	.+22     	; 0x1b666 <lif_rename_file+0x3e>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1b650:	8b e4       	ldi	r24, 0x4B	; 75
   1b652:	90 e3       	ldi	r25, 0x30	; 48
   1b654:	a0 e0       	ldi	r26, 0x00	; 0
   1b656:	ed b7       	in	r30, 0x3d	; 61
   1b658:	fe b7       	in	r31, 0x3e	; 62
   1b65a:	81 83       	std	Z+1, r24	; 0x01
   1b65c:	92 83       	std	Z+2, r25	; 0x02
   1b65e:	a3 83       	std	Z+3, r26	; 0x03
   1b660:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1b664:	58 c0       	rjmp	.+176    	; 0x1b716 <lif_rename_file+0xee>
        return(-1);
    }
    if(!*newlifname)
   1b666:	fa 01       	movw	r30, r20
   1b668:	80 81       	ld	r24, Z
   1b66a:	81 11       	cpse	r24, r1
   1b66c:	03 c0       	rjmp	.+6      	; 0x1b674 <lif_rename_file+0x4c>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1b66e:	84 e2       	ldi	r24, 0x24	; 36
   1b670:	90 e3       	ldi	r25, 0x30	; 48
   1b672:	f0 cf       	rjmp	.-32     	; 0x1b654 <lif_rename_file+0x2c>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1b674:	ca 01       	movw	r24, r20
   1b676:	0e 94 0e c0 	call	0x1801c	; 0x1801c <lif_checkname>
   1b67a:	89 2b       	or	r24, r25
   1b67c:	19 f4       	brne	.+6      	; 0x1b684 <lif_rename_file+0x5c>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1b67e:	8e ee       	ldi	r24, 0xEE	; 238
   1b680:	9f e2       	ldi	r25, 0x2F	; 47
   1b682:	e8 cf       	rjmp	.-48     	; 0x1b654 <lif_rename_file+0x2c>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b684:	68 e0       	ldi	r22, 0x08	; 8
   1b686:	79 e0       	ldi	r23, 0x09	; 9
   1b688:	c6 01       	movw	r24, r12
   1b68a:	0e 94 7c ce 	call	0x19cf8	; 0x19cf8 <lif_open_volume>
   1b68e:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b690:	00 97       	sbiw	r24, 0x00	; 0
   1b692:	09 f4       	brne	.+2      	; 0x1b696 <lif_rename_file+0x6e>
   1b694:	40 c0       	rjmp	.+128    	; 0x1b716 <lif_rename_file+0xee>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1b696:	b8 01       	movw	r22, r16
   1b698:	0e 94 51 d1 	call	0x1a2a2	; 0x1a2a2 <lif_find_file>
   1b69c:	5c 01       	movw	r10, r24
    if(index == -1)
   1b69e:	01 96       	adiw	r24, 0x01	; 1
   1b6a0:	a1 f4       	brne	.+40     	; 0x1b6ca <lif_rename_file+0xa2>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1b6a2:	ed b7       	in	r30, 0x3d	; 61
   1b6a4:	fe b7       	in	r31, 0x3e	; 62
   1b6a6:	17 83       	std	Z+7, r17	; 0x07
   1b6a8:	06 83       	std	Z+6, r16	; 0x06
   1b6aa:	d5 82       	std	Z+5, r13	; 0x05
   1b6ac:	c4 82       	std	Z+4, r12	; 0x04
   1b6ae:	85 ec       	ldi	r24, 0xC5	; 197
   1b6b0:	9f e2       	ldi	r25, 0x2F	; 47
   1b6b2:	a0 e0       	ldi	r26, 0x00	; 0
   1b6b4:	81 83       	std	Z+1, r24	; 0x01
   1b6b6:	92 83       	std	Z+2, r25	; 0x02
   1b6b8:	a3 83       	std	Z+3, r26	; 0x03
   1b6ba:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b6be:	ce 01       	movw	r24, r28
   1b6c0:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1b6c4:	80 e0       	ldi	r24, 0x00	; 0
   1b6c6:	90 e0       	ldi	r25, 0x00	; 0
   1b6c8:	28 c0       	rjmp	.+80     	; 0x1b71a <lif_rename_file+0xf2>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1b6ca:	4a e0       	ldi	r20, 0x0A	; 10
   1b6cc:	50 e0       	ldi	r21, 0x00	; 0
   1b6ce:	b7 01       	movw	r22, r14
   1b6d0:	ce 01       	movw	r24, r28
   1b6d2:	81 5b       	subi	r24, 0xB1	; 177
   1b6d4:	9f 4f       	sbci	r25, 0xFF	; 255
   1b6d6:	0e 94 48 c0 	call	0x18090	; 0x18090 <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1b6da:	b5 01       	movw	r22, r10
   1b6dc:	ce 01       	movw	r24, r28
   1b6de:	0e 94 b4 c8 	call	0x19168	; 0x19168 <lif_writedirindex>
   1b6e2:	89 2b       	or	r24, r25
   1b6e4:	21 f4       	brne	.+8      	; 0x1b6ee <lif_rename_file+0xc6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b6e6:	ce 01       	movw	r24, r28
   1b6e8:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>
   1b6ec:	14 c0       	rjmp	.+40     	; 0x1b716 <lif_rename_file+0xee>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1b6ee:	ed b7       	in	r30, 0x3d	; 61
   1b6f0:	fe b7       	in	r31, 0x3e	; 62
   1b6f2:	f7 82       	std	Z+7, r15	; 0x07
   1b6f4:	e6 82       	std	Z+6, r14	; 0x06
   1b6f6:	15 83       	std	Z+5, r17	; 0x05
   1b6f8:	04 83       	std	Z+4, r16	; 0x04
   1b6fa:	8e ea       	ldi	r24, 0xAE	; 174
   1b6fc:	9f e2       	ldi	r25, 0x2F	; 47
   1b6fe:	a0 e0       	ldi	r26, 0x00	; 0
   1b700:	81 83       	std	Z+1, r24	; 0x01
   1b702:	92 83       	std	Z+2, r25	; 0x02
   1b704:	a3 83       	std	Z+3, r26	; 0x03
   1b706:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b70a:	ce 01       	movw	r24, r28
   1b70c:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1b710:	81 e0       	ldi	r24, 0x01	; 1
   1b712:	90 e0       	ldi	r25, 0x00	; 0
   1b714:	02 c0       	rjmp	.+4      	; 0x1b71a <lif_rename_file+0xf2>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b716:	8f ef       	ldi	r24, 0xFF	; 255
   1b718:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1b71a:	cd b7       	in	r28, 0x3d	; 61
   1b71c:	de b7       	in	r29, 0x3e	; 62
   1b71e:	27 96       	adiw	r28, 0x07	; 7
   1b720:	ea e0       	ldi	r30, 0x0A	; 10
   1b722:	d0 c7       	rjmp	.+4000   	; 0x1c6c4 <__epilogue_restores__+0x10>

0001b724 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1b724:	4f 92       	push	r4
   1b726:	5f 92       	push	r5
   1b728:	6f 92       	push	r6
   1b72a:	7f 92       	push	r7
   1b72c:	af 92       	push	r10
   1b72e:	bf 92       	push	r11
   1b730:	cf 92       	push	r12
   1b732:	df 92       	push	r13
   1b734:	ef 92       	push	r14
   1b736:	ff 92       	push	r15
   1b738:	0f 93       	push	r16
   1b73a:	1f 93       	push	r17
   1b73c:	cf 93       	push	r28
   1b73e:	df 93       	push	r29
   1b740:	ad b7       	in	r26, 0x3d	; 61
   1b742:	be b7       	in	r27, 0x3e	; 62
   1b744:	17 97       	sbiw	r26, 0x07	; 7
   1b746:	0f b6       	in	r0, 0x3f	; 63
   1b748:	f8 94       	cli
   1b74a:	be bf       	out	0x3e, r27	; 62
   1b74c:	0f be       	out	0x3f, r0	; 63
   1b74e:	ad bf       	out	0x3d, r26	; 61
   1b750:	27 01       	movw	r4, r14
   1b752:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1b754:	dc 01       	movw	r26, r24
   1b756:	ec 91       	ld	r30, X
   1b758:	e1 11       	cpse	r30, r1
   1b75a:	03 c0       	rjmp	.+6      	; 0x1b762 <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1b75c:	85 e8       	ldi	r24, 0x85	; 133
   1b75e:	9f e2       	ldi	r25, 0x2F	; 47
   1b760:	16 c0       	rjmp	.+44     	; 0x1b78e <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1b762:	db 01       	movw	r26, r22
   1b764:	ec 91       	ld	r30, X
   1b766:	e1 11       	cpse	r30, r1
   1b768:	03 c0       	rjmp	.+6      	; 0x1b770 <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1b76a:	80 e6       	ldi	r24, 0x60	; 96
   1b76c:	9f e2       	ldi	r25, 0x2F	; 47
   1b76e:	0f c0       	rjmp	.+30     	; 0x1b78e <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1b770:	21 15       	cp	r18, r1
   1b772:	31 05       	cpc	r19, r1
   1b774:	41 05       	cpc	r20, r1
   1b776:	51 05       	cpc	r21, r1
   1b778:	19 f4       	brne	.+6      	; 0x1b780 <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1b77a:	8d e3       	ldi	r24, 0x3D	; 61
   1b77c:	9f e2       	ldi	r25, 0x2F	; 47
   1b77e:	07 c0       	rjmp	.+14     	; 0x1b78e <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1b780:	e1 14       	cp	r14, r1
   1b782:	f1 04       	cpc	r15, r1
   1b784:	01 05       	cpc	r16, r1
   1b786:	11 05       	cpc	r17, r1
   1b788:	59 f4       	brne	.+22     	; 0x1b7a0 <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1b78a:	8d e1       	ldi	r24, 0x1D	; 29
   1b78c:	9f e2       	ldi	r25, 0x2F	; 47
   1b78e:	a0 e0       	ldi	r26, 0x00	; 0
   1b790:	ed b7       	in	r30, 0x3d	; 61
   1b792:	fe b7       	in	r31, 0x3e	; 62
   1b794:	81 83       	std	Z+1, r24	; 0x01
   1b796:	92 83       	std	Z+2, r25	; 0x02
   1b798:	a3 83       	std	Z+3, r26	; 0x03
   1b79a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1b79e:	2b c0       	rjmp	.+86     	; 0x1b7f6 <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1b7a0:	67 01       	movw	r12, r14
   1b7a2:	78 01       	movw	r14, r16
   1b7a4:	f2 e0       	ldi	r31, 0x02	; 2
   1b7a6:	cf 1a       	sub	r12, r31
   1b7a8:	d1 08       	sbc	r13, r1
   1b7aa:	e1 08       	sbc	r14, r1
   1b7ac:	f1 08       	sbc	r15, r1
   1b7ae:	56 01       	movw	r10, r12
   1b7b0:	67 01       	movw	r12, r14
   1b7b2:	a2 1a       	sub	r10, r18
   1b7b4:	b3 0a       	sbc	r11, r19
   1b7b6:	c4 0a       	sbc	r12, r20
   1b7b8:	d5 0a       	sbc	r13, r21
   1b7ba:	79 01       	movw	r14, r18
   1b7bc:	8a 01       	movw	r16, r20
   1b7be:	22 e0       	ldi	r18, 0x02	; 2
   1b7c0:	30 e0       	ldi	r19, 0x00	; 0
   1b7c2:	40 e0       	ldi	r20, 0x00	; 0
   1b7c4:	50 e0       	ldi	r21, 0x00	; 0
   1b7c6:	0e 94 32 ca 	call	0x19464	; 0x19464 <lif_create_volume>
    if(LIF == NULL)
   1b7ca:	00 97       	sbiw	r24, 0x00	; 0
   1b7cc:	a1 f0       	breq	.+40     	; 0x1b7f6 <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1b7ce:	0e 94 bf c7 	call	0x18f7e	; 0x18f7e <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1b7d2:	82 01       	movw	r16, r4
   1b7d4:	d6 2d       	mov	r29, r6
   1b7d6:	c7 2d       	mov	r28, r7
   1b7d8:	ed b7       	in	r30, 0x3d	; 61
   1b7da:	fe b7       	in	r31, 0x3e	; 62
   1b7dc:	44 82       	std	Z+4, r4	; 0x04
   1b7de:	15 83       	std	Z+5, r17	; 0x05
   1b7e0:	66 82       	std	Z+6, r6	; 0x06
   1b7e2:	77 82       	std	Z+7, r7	; 0x07
   1b7e4:	8d ef       	ldi	r24, 0xFD	; 253
   1b7e6:	9e e2       	ldi	r25, 0x2E	; 46
   1b7e8:	a0 e0       	ldi	r26, 0x00	; 0
   1b7ea:	81 83       	std	Z+1, r24	; 0x01
   1b7ec:	92 83       	std	Z+2, r25	; 0x02
   1b7ee:	a3 83       	std	Z+3, r26	; 0x03
   1b7f0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    return(end);
   1b7f4:	04 c0       	rjmp	.+8      	; 0x1b7fe <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1b7f6:	0f ef       	ldi	r16, 0xFF	; 255
   1b7f8:	1f ef       	ldi	r17, 0xFF	; 255
   1b7fa:	df ef       	ldi	r29, 0xFF	; 255
   1b7fc:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1b7fe:	b8 01       	movw	r22, r16
   1b800:	8d 2f       	mov	r24, r29
   1b802:	9c 2f       	mov	r25, r28
   1b804:	ad b7       	in	r26, 0x3d	; 61
   1b806:	be b7       	in	r27, 0x3e	; 62
   1b808:	17 96       	adiw	r26, 0x07	; 7
   1b80a:	0f b6       	in	r0, 0x3f	; 63
   1b80c:	f8 94       	cli
   1b80e:	be bf       	out	0x3e, r27	; 62
   1b810:	0f be       	out	0x3f, r0	; 63
   1b812:	ad bf       	out	0x3d, r26	; 61
   1b814:	df 91       	pop	r29
   1b816:	cf 91       	pop	r28
   1b818:	1f 91       	pop	r17
   1b81a:	0f 91       	pop	r16
   1b81c:	ff 90       	pop	r15
   1b81e:	ef 90       	pop	r14
   1b820:	df 90       	pop	r13
   1b822:	cf 90       	pop	r12
   1b824:	bf 90       	pop	r11
   1b826:	af 90       	pop	r10
   1b828:	7f 90       	pop	r7
   1b82a:	6f 90       	pop	r6
   1b82c:	5f 90       	pop	r5
   1b82e:	4f 90       	pop	r4
   1b830:	08 95       	ret

0001b832 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1b832:	a5 e0       	ldi	r26, 0x05	; 5
   1b834:	b0 e0       	ldi	r27, 0x00	; 0
   1b836:	ee e1       	ldi	r30, 0x1E	; 30
   1b838:	fc ed       	ldi	r31, 0xDC	; 220
   1b83a:	26 c7       	rjmp	.+3660   	; 0x1c688 <__prologue_saves__+0xc>
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1b83c:	82 30       	cpi	r24, 0x02	; 2
   1b83e:	91 05       	cpc	r25, r1
   1b840:	1c f4       	brge	.+6      	; 0x1b848 <lif_tests+0x16>
        return (0);
   1b842:	80 e0       	ldi	r24, 0x00	; 0
   1b844:	90 e0       	ldi	r25, 0x00	; 0
   1b846:	5b c1       	rjmp	.+694    	; 0x1bafe <lif_tests+0x2cc>

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1b848:	fb 01       	movw	r30, r22
   1b84a:	e2 80       	ldd	r14, Z+2	; 0x02
   1b84c:	f3 80       	ldd	r15, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1b84e:	e1 14       	cp	r14, r1
   1b850:	f1 04       	cpc	r15, r1
   1b852:	09 f4       	brne	.+2      	; 0x1b856 <lif_tests+0x24>
   1b854:	52 c1       	rjmp	.+676    	; 0x1bafa <lif_tests+0x2c8>
   1b856:	f7 01       	movw	r30, r14
   1b858:	20 81       	ld	r18, Z
   1b85a:	22 23       	and	r18, r18
   1b85c:	09 f4       	brne	.+2      	; 0x1b860 <lif_tests+0x2e>
   1b85e:	4d c1       	rjmp	.+666    	; 0x1bafa <lif_tests+0x2c8>
   1b860:	8b 01       	movw	r16, r22
   1b862:	6c 01       	movw	r12, r24
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b864:	69 e7       	ldi	r22, 0x79	; 121
   1b866:	76 e1       	ldi	r23, 0x16	; 22
   1b868:	c7 01       	movw	r24, r14
   1b86a:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
   1b86e:	89 2b       	or	r24, r25
   1b870:	29 f0       	breq	.+10     	; 0x1b87c <lif_tests+0x4a>
    {
        lif_help(1);
   1b872:	81 e0       	ldi	r24, 0x01	; 1
   1b874:	90 e0       	ldi	r25, 0x00	; 0
   1b876:	0e 94 e4 bd 	call	0x17bc8	; 0x17bc8 <lif_help>
   1b87a:	3f c1       	rjmp	.+638    	; 0x1bafa <lif_tests+0x2c8>
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b87c:	68 e7       	ldi	r22, 0x78	; 120
   1b87e:	76 e1       	ldi	r23, 0x16	; 22
   1b880:	c7 01       	movw	r24, r14
   1b882:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
   1b886:	89 2b       	or	r24, r25
   1b888:	a1 f7       	brne	.-24     	; 0x1b872 <lif_tests+0x40>
   1b88a:	6e e7       	ldi	r22, 0x7E	; 126
   1b88c:	76 e1       	ldi	r23, 0x16	; 22
   1b88e:	c7 01       	movw	r24, r14
   1b890:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
   1b894:	89 2b       	or	r24, r25
   1b896:	69 f7       	brne	.-38     	; 0x1b872 <lif_tests+0x40>
        return(1);
    }

// Turn one debugging
// in the future we can add tests for specific messages
	debuglevel &= ~0x400;
   1b898:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b89c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b8a0:	9b 7f       	andi	r25, 0xFB	; 251
   1b8a2:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1b8a6:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1b8aa:	96 01       	movw	r18, r12
   1b8ac:	42 e0       	ldi	r20, 0x02	; 2
   1b8ae:	50 e0       	ldi	r21, 0x00	; 0
   1b8b0:	61 e8       	ldi	r22, 0x81	; 129
   1b8b2:	76 e1       	ldi	r23, 0x16	; 22
   1b8b4:	c7 01       	movw	r24, r14
   1b8b6:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
   1b8ba:	89 2b       	or	r24, r25
   1b8bc:	79 f0       	breq	.+30     	; 0x1b8dc <lif_tests+0xaa>
    {
        debuglevel |= 0x400;
   1b8be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b8c2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b8c6:	94 60       	ori	r25, 0x04	; 4
   1b8c8:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1b8cc:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
        ptr = argv[ind++];
   1b8d0:	f8 01       	movw	r30, r16
   1b8d2:	e4 80       	ldd	r14, Z+4	; 0x04
   1b8d4:	f5 80       	ldd	r15, Z+5	; 0x05
   1b8d6:	c3 e0       	ldi	r28, 0x03	; 3
   1b8d8:	d0 e0       	ldi	r29, 0x00	; 0
   1b8da:	02 c0       	rjmp	.+4      	; 0x1b8e0 <lif_tests+0xae>
    if(argc < 2)
        return (0);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1b8dc:	c2 e0       	ldi	r28, 0x02	; 2
   1b8de:	d0 e0       	ldi	r29, 0x00	; 0
    {
        debuglevel |= 0x400;
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1b8e0:	5e 01       	movw	r10, r28
   1b8e2:	f3 e0       	ldi	r31, 0x03	; 3
   1b8e4:	af 0e       	add	r10, r31
   1b8e6:	b1 1c       	adc	r11, r1
   1b8e8:	96 01       	movw	r18, r12
   1b8ea:	a5 01       	movw	r20, r10
   1b8ec:	64 e8       	ldi	r22, 0x84	; 132
   1b8ee:	76 e1       	ldi	r23, 0x16	; 22
   1b8f0:	c7 01       	movw	r24, r14
   1b8f2:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
   1b8f6:	89 2b       	or	r24, r25
   1b8f8:	61 f0       	breq	.+24     	; 0x1b912 <lif_tests+0xe0>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b8fa:	cc 0f       	add	r28, r28
   1b8fc:	dd 1f       	adc	r29, r29
   1b8fe:	c0 0f       	add	r28, r16
   1b900:	d1 1f       	adc	r29, r17
   1b902:	4c 81       	ldd	r20, Y+4	; 0x04
   1b904:	5d 81       	ldd	r21, Y+5	; 0x05
   1b906:	6a 81       	ldd	r22, Y+2	; 0x02
   1b908:	7b 81       	ldd	r23, Y+3	; 0x03
   1b90a:	88 81       	ld	r24, Y
   1b90c:	99 81       	ldd	r25, Y+1	; 0x01
   1b90e:	6d dc       	rcall	.-1830   	; 0x1b1ea <lif_add_lif_file>
   1b910:	f4 c0       	rjmp	.+488    	; 0x1bafa <lif_tests+0x2c8>

        return(1);
    }

    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1b912:	96 01       	movw	r18, r12
   1b914:	a5 01       	movw	r20, r10
   1b916:	6b e8       	ldi	r22, 0x8B	; 139
   1b918:	76 e1       	ldi	r23, 0x16	; 22
   1b91a:	c7 01       	movw	r24, r14
   1b91c:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
   1b920:	89 2b       	or	r24, r25
   1b922:	69 f0       	breq	.+26     	; 0x1b93e <lif_tests+0x10c>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1b924:	cc 0f       	add	r28, r28
   1b926:	dd 1f       	adc	r29, r29
   1b928:	c0 0f       	add	r28, r16
   1b92a:	d1 1f       	adc	r29, r17
   1b92c:	4c 81       	ldd	r20, Y+4	; 0x04
   1b92e:	5d 81       	ldd	r21, Y+5	; 0x05
   1b930:	6a 81       	ldd	r22, Y+2	; 0x02
   1b932:	7b 81       	ldd	r23, Y+3	; 0x03
   1b934:	88 81       	ld	r24, Y
   1b936:	99 81       	ldd	r25, Y+1	; 0x01
   1b938:	0e 94 d2 d3 	call	0x1a7a4	; 0x1a7a4 <lif_add_ascii_file_as_e010>
   1b93c:	de c0       	rjmp	.+444    	; 0x1bafa <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1b93e:	96 01       	movw	r18, r12
   1b940:	a5 01       	movw	r20, r10
   1b942:	6f e8       	ldi	r22, 0x8F	; 143
   1b944:	76 e1       	ldi	r23, 0x16	; 22
   1b946:	c7 01       	movw	r24, r14
   1b948:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
   1b94c:	89 2b       	or	r24, r25
   1b94e:	09 f4       	brne	.+2      	; 0x1b952 <lif_tests+0x120>
   1b950:	42 c0       	rjmp	.+132    	; 0x1b9d6 <lif_tests+0x1a4>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1b952:	ce 01       	movw	r24, r28
   1b954:	88 0f       	add	r24, r24
   1b956:	99 1f       	adc	r25, r25
   1b958:	e8 01       	movw	r28, r16
   1b95a:	c8 0f       	add	r28, r24
   1b95c:	d9 1f       	adc	r29, r25
   1b95e:	c8 80       	ld	r12, Y
   1b960:	d9 80       	ldd	r13, Y+1	; 0x01
        char *label = argv[ind+1];
   1b962:	aa 80       	ldd	r10, Y+2	; 0x02
   1b964:	bb 80       	ldd	r11, Y+3	; 0x03
        char *model = argv[ind+2];
   1b966:	0c 80       	ldd	r0, Y+4	; 0x04
   1b968:	dd 81       	ldd	r29, Y+5	; 0x05
   1b96a:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1b96c:	6a e9       	ldi	r22, 0x9A	; 154
   1b96e:	76 e1       	ldi	r23, 0x16	; 22
   1b970:	ce 01       	movw	r24, r28
   1b972:	0e 94 8e 30 	call	0x611c	; 0x611c <MATCHI_LEN>
   1b976:	89 2b       	or	r24, r25
   1b978:	09 f0       	breq	.+2      	; 0x1b97c <lif_tests+0x14a>
            model +=2;
   1b97a:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1b97c:	40 e0       	ldi	r20, 0x00	; 0
   1b97e:	50 e0       	ldi	r21, 0x00	; 0
   1b980:	60 e0       	ldi	r22, 0x00	; 0
   1b982:	70 e0       	ldi	r23, 0x00	; 0
   1b984:	ce 01       	movw	r24, r28
   1b986:	0e 94 3b a1 	call	0x14276	; 0x14276 <hpdir_find_drive>
   1b98a:	89 2b       	or	r24, r25
   1b98c:	b9 f0       	breq	.+46     	; 0x1b9bc <lif_tests+0x18a>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1b98e:	60 91 a1 21 	lds	r22, 0x21A1	; 0x8021a1 <hpdir+0xac>
   1b992:	70 91 a2 21 	lds	r23, 0x21A2	; 0x8021a2 <hpdir+0xad>
   1b996:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <hpdir+0xae>
   1b99a:	90 91 a4 21 	lds	r25, 0x21A4	; 0x8021a4 <hpdir+0xaf>
   1b99e:	0e 94 1e a1 	call	0x1423c	; 0x1423c <lif_dir_count>
   1b9a2:	9b 01       	movw	r18, r22
   1b9a4:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
            lif_create_image(name, label, dir, sectors);
   1b9a6:	e0 90 a1 21 	lds	r14, 0x21A1	; 0x8021a1 <hpdir+0xac>
   1b9aa:	f0 90 a2 21 	lds	r15, 0x21A2	; 0x8021a2 <hpdir+0xad>
   1b9ae:	00 91 a3 21 	lds	r16, 0x21A3	; 0x8021a3 <hpdir+0xae>
   1b9b2:	10 91 a4 21 	lds	r17, 0x21A4	; 0x8021a4 <hpdir+0xaf>
   1b9b6:	b5 01       	movw	r22, r10
   1b9b8:	c6 01       	movw	r24, r12
   1b9ba:	2e c0       	rjmp	.+92     	; 0x1ba18 <lif_tests+0x1e6>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1b9bc:	ed b7       	in	r30, 0x3d	; 61
   1b9be:	fe b7       	in	r31, 0x3e	; 62
   1b9c0:	d5 83       	std	Z+5, r29	; 0x05
   1b9c2:	c4 83       	std	Z+4, r28	; 0x04
   1b9c4:	81 e3       	ldi	r24, 0x31	; 49
   1b9c6:	91 e4       	ldi	r25, 0x41	; 65
   1b9c8:	a0 e0       	ldi	r26, 0x00	; 0
   1b9ca:	81 83       	std	Z+1, r24	; 0x01
   1b9cc:	92 83       	std	Z+2, r25	; 0x02
   1b9ce:	a3 83       	std	Z+3, r26	; 0x03
   1b9d0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1b9d4:	92 c0       	rjmp	.+292    	; 0x1bafa <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1b9d6:	96 01       	movw	r18, r12
   1b9d8:	ae 01       	movw	r20, r28
   1b9da:	4c 5f       	subi	r20, 0xFC	; 252
   1b9dc:	5f 4f       	sbci	r21, 0xFF	; 255
   1b9de:	6d e9       	ldi	r22, 0x9D	; 157
   1b9e0:	76 e1       	ldi	r23, 0x16	; 22
   1b9e2:	c7 01       	movw	r24, r14
   1b9e4:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
   1b9e8:	89 2b       	or	r24, r25
   1b9ea:	c1 f0       	breq	.+48     	; 0x1ba1c <lif_tests+0x1ea>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1b9ec:	cc 0f       	add	r28, r28
   1b9ee:	dd 1f       	adc	r29, r29
   1b9f0:	c0 0f       	add	r28, r16
   1b9f2:	d1 1f       	adc	r29, r17
   1b9f4:	8c 81       	ldd	r24, Y+4	; 0x04
   1b9f6:	9d 81       	ldd	r25, Y+5	; 0x05
   1b9f8:	0e 94 a3 45 	call	0x8b46	; 0x8b46 <atol>
   1b9fc:	4b 01       	movw	r8, r22
   1b9fe:	5c 01       	movw	r10, r24
   1ba00:	8e 81       	ldd	r24, Y+6	; 0x06
   1ba02:	9f 81       	ldd	r25, Y+7	; 0x07
   1ba04:	0e 94 a3 45 	call	0x8b46	; 0x8b46 <atol>
   1ba08:	7b 01       	movw	r14, r22
   1ba0a:	8c 01       	movw	r16, r24
   1ba0c:	6a 81       	ldd	r22, Y+2	; 0x02
   1ba0e:	7b 81       	ldd	r23, Y+3	; 0x03
   1ba10:	a5 01       	movw	r20, r10
   1ba12:	94 01       	movw	r18, r8
   1ba14:	88 81       	ld	r24, Y
   1ba16:	99 81       	ldd	r25, Y+1	; 0x01
   1ba18:	85 de       	rcall	.-758    	; 0x1b724 <lif_create_image>
   1ba1a:	6f c0       	rjmp	.+222    	; 0x1bafa <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1ba1c:	96 01       	movw	r18, r12
   1ba1e:	ae 01       	movw	r20, r28
   1ba20:	4e 5f       	subi	r20, 0xFE	; 254
   1ba22:	5f 4f       	sbci	r21, 0xFF	; 255
   1ba24:	64 ea       	ldi	r22, 0xA4	; 164
   1ba26:	76 e1       	ldi	r23, 0x16	; 22
   1ba28:	c7 01       	movw	r24, r14
   1ba2a:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
   1ba2e:	89 2b       	or	r24, r25
   1ba30:	51 f0       	breq	.+20     	; 0x1ba46 <lif_tests+0x214>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1ba32:	cc 0f       	add	r28, r28
   1ba34:	dd 1f       	adc	r29, r29
   1ba36:	c0 0f       	add	r28, r16
   1ba38:	d1 1f       	adc	r29, r17
   1ba3a:	6a 81       	ldd	r22, Y+2	; 0x02
   1ba3c:	7b 81       	ldd	r23, Y+3	; 0x03
   1ba3e:	88 81       	ld	r24, Y
   1ba40:	99 81       	ldd	r25, Y+1	; 0x01
   1ba42:	5c dd       	rcall	.-1352   	; 0x1b4fc <lif_del_file>
   1ba44:	5a c0       	rjmp	.+180    	; 0x1bafa <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1ba46:	96 01       	movw	r18, r12
   1ba48:	ae 01       	movw	r20, r28
   1ba4a:	4f 5f       	subi	r20, 0xFF	; 255
   1ba4c:	5f 4f       	sbci	r21, 0xFF	; 255
   1ba4e:	68 ed       	ldi	r22, 0xD8	; 216
   1ba50:	7b e0       	ldi	r23, 0x0B	; 11
   1ba52:	c7 01       	movw	r24, r14
   1ba54:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
   1ba58:	89 2b       	or	r24, r25
   1ba5a:	49 f0       	breq	.+18     	; 0x1ba6e <lif_tests+0x23c>
    {
        lif_dir(argv[ind]);
   1ba5c:	cc 0f       	add	r28, r28
   1ba5e:	dd 1f       	adc	r29, r29
   1ba60:	c0 0f       	add	r28, r16
   1ba62:	d1 1f       	adc	r29, r17
   1ba64:	88 81       	ld	r24, Y
   1ba66:	99 81       	ldd	r25, Y+1	; 0x01
   1ba68:	0e 94 7c cf 	call	0x19ef8	; 0x19ef8 <lif_dir>
   1ba6c:	46 c0       	rjmp	.+140    	; 0x1bafa <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1ba6e:	96 01       	movw	r18, r12
   1ba70:	a5 01       	movw	r20, r10
   1ba72:	68 ea       	ldi	r22, 0xA8	; 168
   1ba74:	76 e1       	ldi	r23, 0x16	; 22
   1ba76:	c7 01       	movw	r24, r14
   1ba78:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
   1ba7c:	89 2b       	or	r24, r25
   1ba7e:	71 f0       	breq	.+28     	; 0x1ba9c <lif_tests+0x26a>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1ba80:	ce 01       	movw	r24, r28
   1ba82:	88 0f       	add	r24, r24
   1ba84:	99 1f       	adc	r25, r25
   1ba86:	e8 01       	movw	r28, r16
   1ba88:	c8 0f       	add	r28, r24
   1ba8a:	d9 1f       	adc	r29, r25
   1ba8c:	4c 81       	ldd	r20, Y+4	; 0x04
   1ba8e:	5d 81       	ldd	r21, Y+5	; 0x05
   1ba90:	6a 81       	ldd	r22, Y+2	; 0x02
   1ba92:	7b 81       	ldd	r23, Y+3	; 0x03
   1ba94:	88 81       	ld	r24, Y
   1ba96:	99 81       	ldd	r25, Y+1	; 0x01
   1ba98:	70 da       	rcall	.-2848   	; 0x1af7a <lif_extract_lif_as_lif>
   1ba9a:	2f c0       	rjmp	.+94     	; 0x1bafa <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1ba9c:	96 01       	movw	r18, r12
   1ba9e:	a5 01       	movw	r20, r10
   1baa0:	63 eb       	ldi	r22, 0xB3	; 179
   1baa2:	76 e1       	ldi	r23, 0x16	; 22
   1baa4:	c7 01       	movw	r24, r14
   1baa6:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
   1baaa:	89 2b       	or	r24, r25
   1baac:	79 f0       	breq	.+30     	; 0x1bacc <lif_tests+0x29a>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1baae:	ce 01       	movw	r24, r28
   1bab0:	88 0f       	add	r24, r24
   1bab2:	99 1f       	adc	r25, r25
   1bab4:	e8 01       	movw	r28, r16
   1bab6:	c8 0f       	add	r28, r24
   1bab8:	d9 1f       	adc	r29, r25
   1baba:	4c 81       	ldd	r20, Y+4	; 0x04
   1babc:	5d 81       	ldd	r21, Y+5	; 0x05
   1babe:	6a 81       	ldd	r22, Y+2	; 0x02
   1bac0:	7b 81       	ldd	r23, Y+3	; 0x03
   1bac2:	88 81       	ld	r24, Y
   1bac4:	99 81       	ldd	r25, Y+1	; 0x01
   1bac6:	0e 94 0e d5 	call	0x1aa1c	; 0x1aa1c <lif_extract_e010_as_ascii>
   1baca:	17 c0       	rjmp	.+46     	; 0x1bafa <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1bacc:	96 01       	movw	r18, r12
   1bace:	a5 01       	movw	r20, r10
   1bad0:	65 ee       	ldi	r22, 0xE5	; 229
   1bad2:	7b e0       	ldi	r23, 0x0B	; 11
   1bad4:	c7 01       	movw	r24, r14
   1bad6:	0e 94 64 30 	call	0x60c8	; 0x60c8 <MATCHARGS>
   1bada:	89 2b       	or	r24, r25
   1badc:	09 f4       	brne	.+2      	; 0x1bae0 <lif_tests+0x2ae>
   1bade:	b1 ce       	rjmp	.-670    	; 0x1b842 <lif_tests+0x10>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1bae0:	ce 01       	movw	r24, r28
   1bae2:	88 0f       	add	r24, r24
   1bae4:	99 1f       	adc	r25, r25
   1bae6:	e8 01       	movw	r28, r16
   1bae8:	c8 0f       	add	r28, r24
   1baea:	d9 1f       	adc	r29, r25
   1baec:	4c 81       	ldd	r20, Y+4	; 0x04
   1baee:	5d 81       	ldd	r21, Y+5	; 0x05
   1baf0:	6a 81       	ldd	r22, Y+2	; 0x02
   1baf2:	7b 81       	ldd	r23, Y+3	; 0x03
   1baf4:	88 81       	ld	r24, Y
   1baf6:	99 81       	ldd	r25, Y+1	; 0x01
   1baf8:	97 dd       	rcall	.-1234   	; 0x1b628 <lif_rename_file>

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);
   1bafa:	81 e0       	ldi	r24, 0x01	; 1
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1bafc:	90 e0       	ldi	r25, 0x00	; 0
   1bafe:	cd b7       	in	r28, 0x3d	; 61
   1bb00:	de b7       	in	r29, 0x3e	; 62
   1bb02:	25 96       	adiw	r28, 0x05	; 5
   1bb04:	ec e0       	ldi	r30, 0x0C	; 12
   1bb06:	dc c5       	rjmp	.+3000   	; 0x1c6c0 <__epilogue_restores__+0xc>

0001bb08 <lcd_task>:
static int16_t lcd_display_time = 0;

///@brief LCD timer function called at 1000HZ
void lcd_task()
{
	++lcd_display_time;
   1bb08:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <lcd_display_time>
   1bb0c:	90 91 e8 19 	lds	r25, 0x19E8	; 0x8019e8 <lcd_display_time+0x1>
   1bb10:	01 96       	adiw	r24, 0x01	; 1
   1bb12:	90 93 e8 19 	sts	0x19E8, r25	; 0x8019e8 <lcd_display_time+0x1>
   1bb16:	80 93 e7 19 	sts	0x19E7, r24	; 0x8019e7 <lcd_display_time>
   1bb1a:	08 95       	ret

0001bb1c <copyright>:
int8_t debug_input = 0;

///@brief Display Copyright
///@return void
void copyright()
{
   1bb1c:	00 d0       	rcall	.+0      	; 0x1bb1e <copyright+0x2>
   1bb1e:	00 d0       	rcall	.+0      	; 0x1bb20 <copyright+0x4>
   1bb20:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1bb22:	88 ea       	ldi	r24, 0xA8	; 168
   1bb24:	97 e4       	ldi	r25, 0x47	; 71
   1bb26:	a0 e0       	ldi	r26, 0x00	; 0
   1bb28:	ed b7       	in	r30, 0x3d	; 61
   1bb2a:	fe b7       	in	r31, 0x3e	; 62
   1bb2c:	81 83       	std	Z+1, r24	; 0x01
   1bb2e:	92 83       	std	Z+2, r25	; 0x02
   1bb30:	a3 83       	std	Z+3, r26	; 0x03
   1bb32:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1bb36:	89 e8       	ldi	r24, 0x89	; 137
   1bb38:	97 e4       	ldi	r25, 0x47	; 71
   1bb3a:	a0 e0       	ldi	r26, 0x00	; 0
   1bb3c:	ed b7       	in	r30, 0x3d	; 61
   1bb3e:	fe b7       	in	r31, 0x3e	; 62
   1bb40:	81 83       	std	Z+1, r24	; 0x01
   1bb42:	92 83       	std	Z+2, r25	; 0x02
   1bb44:	a3 83       	std	Z+3, r26	; 0x03
   1bb46:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1bb4a:	8c e6       	ldi	r24, 0x6C	; 108
   1bb4c:	97 e4       	ldi	r25, 0x47	; 71
   1bb4e:	a0 e0       	ldi	r26, 0x00	; 0
   1bb50:	ed b7       	in	r30, 0x3d	; 61
   1bb52:	fe b7       	in	r31, 0x3e	; 62
   1bb54:	81 83       	std	Z+1, r24	; 0x01
   1bb56:	92 83       	std	Z+2, r25	; 0x02
   1bb58:	a3 83       	std	Z+3, r26	; 0x03
   1bb5a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf(" GNU version 3\n");
   1bb5e:	8c e5       	ldi	r24, 0x5C	; 92
   1bb60:	97 e4       	ldi	r25, 0x47	; 71
   1bb62:	a0 e0       	ldi	r26, 0x00	; 0
   1bb64:	ed b7       	in	r30, 0x3d	; 61
   1bb66:	fe b7       	in	r31, 0x3e	; 62
   1bb68:	81 83       	std	Z+1, r24	; 0x01
   1bb6a:	92 83       	std	Z+2, r25	; 0x02
   1bb6c:	a3 83       	std	Z+3, r26	; 0x03
   1bb6e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1bb72:	85 e3       	ldi	r24, 0x35	; 53
   1bb74:	97 e4       	ldi	r25, 0x47	; 71
   1bb76:	a0 e0       	ldi	r26, 0x00	; 0
   1bb78:	ed b7       	in	r30, 0x3d	; 61
   1bb7a:	fe b7       	in	r31, 0x3e	; 62
   1bb7c:	81 83       	std	Z+1, r24	; 0x01
   1bb7e:	92 83       	std	Z+2, r25	; 0x02
   1bb80:	a3 83       	std	Z+3, r26	; 0x03
   1bb82:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1bb86:	8b eb       	ldi	r24, 0xBB	; 187
   1bb88:	96 e1       	ldi	r25, 0x16	; 22
   1bb8a:	ed b7       	in	r30, 0x3d	; 61
   1bb8c:	fe b7       	in	r31, 0x3e	; 62
   1bb8e:	95 83       	std	Z+5, r25	; 0x05
   1bb90:	84 83       	std	Z+4, r24	; 0x04
   1bb92:	8b e1       	ldi	r24, 0x1B	; 27
   1bb94:	97 e4       	ldi	r25, 0x47	; 71
   1bb96:	a0 e0       	ldi	r26, 0x00	; 0
   1bb98:	81 83       	std	Z+1, r24	; 0x01
   1bb9a:	92 83       	std	Z+2, r25	; 0x02
   1bb9c:	a3 83       	std	Z+3, r26	; 0x03
   1bb9e:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1bba2:	8f ed       	ldi	r24, 0xDF	; 223
   1bba4:	96 e1       	ldi	r25, 0x16	; 22
   1bba6:	ed b7       	in	r30, 0x3d	; 61
   1bba8:	fe b7       	in	r31, 0x3e	; 62
   1bbaa:	95 83       	std	Z+5, r25	; 0x05
   1bbac:	84 83       	std	Z+4, r24	; 0x04
   1bbae:	81 e0       	ldi	r24, 0x01	; 1
   1bbb0:	97 e4       	ldi	r25, 0x47	; 71
   1bbb2:	a0 e0       	ldi	r26, 0x00	; 0
   1bbb4:	81 83       	std	Z+1, r24	; 0x01
   1bbb6:	92 83       	std	Z+2, r25	; 0x02
   1bbb8:	a3 83       	std	Z+3, r26	; 0x03
   1bbba:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("\n");
   1bbbe:	8f ef       	ldi	r24, 0xFF	; 255
   1bbc0:	96 e4       	ldi	r25, 0x46	; 70
   1bbc2:	a0 e0       	ldi	r26, 0x00	; 0
   1bbc4:	ed b7       	in	r30, 0x3d	; 61
   1bbc6:	fe b7       	in	r31, 0x3e	; 62
   1bbc8:	81 83       	std	Z+1, r24	; 0x01
   1bbca:	92 83       	std	Z+2, r25	; 0x02
   1bbcc:	a3 83       	std	Z+3, r26	; 0x03
   1bbce:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
}
   1bbd2:	0f 90       	pop	r0
   1bbd4:	0f 90       	pop	r0
   1bbd6:	0f 90       	pop	r0
   1bbd8:	0f 90       	pop	r0
   1bbda:	0f 90       	pop	r0
   1bbdc:	08 95       	ret

0001bbde <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1bbde:	a1 e1       	ldi	r26, 0x11	; 17
   1bbe0:	b0 e0       	ldi	r27, 0x00	; 0
   1bbe2:	e4 ef       	ldi	r30, 0xF4	; 244
   1bbe4:	fd ed       	ldi	r31, 0xDD	; 221
   1bbe6:	56 c5       	rjmp	.+2732   	; 0x1c694 <__prologue_saves__+0x18>
   1bbe8:	ec 01       	movw	r28, r24
   1bbea:	7b 01       	movw	r14, r22
   1bbec:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1bbee:	60 e0       	ldi	r22, 0x00	; 0
   1bbf0:	70 e0       	ldi	r23, 0x00	; 0
   1bbf2:	0e 94 a2 36 	call	0x6d44	; 0x6d44 <normalize>
    memset(buf,0,max);
   1bbf6:	a8 01       	movw	r20, r16
   1bbf8:	60 e0       	ldi	r22, 0x00	; 0
   1bbfa:	70 e0       	ldi	r23, 0x00	; 0
   1bbfc:	c7 01       	movw	r24, r14
   1bbfe:	0e 94 36 e7 	call	0x1ce6c	; 0x1ce6c <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1bc02:	88 85       	ldd	r24, Y+8	; 0x08
   1bc04:	99 85       	ldd	r25, Y+9	; 0x09
   1bc06:	0e 94 87 34 	call	0x690e	; 0x690e <tm_mon_to_ascii>
   1bc0a:	28 81       	ld	r18, Y
   1bc0c:	39 81       	ldd	r19, Y+1	; 0x01
   1bc0e:	ed b7       	in	r30, 0x3d	; 61
   1bc10:	fe b7       	in	r31, 0x3e	; 62
   1bc12:	31 8b       	std	Z+17, r19	; 0x11
   1bc14:	20 8b       	std	Z+16, r18	; 0x10
   1bc16:	2a 81       	ldd	r18, Y+2	; 0x02
   1bc18:	3b 81       	ldd	r19, Y+3	; 0x03
   1bc1a:	37 87       	std	Z+15, r19	; 0x0f
   1bc1c:	26 87       	std	Z+14, r18	; 0x0e
   1bc1e:	2c 81       	ldd	r18, Y+4	; 0x04
   1bc20:	3d 81       	ldd	r19, Y+5	; 0x05
   1bc22:	35 87       	std	Z+13, r19	; 0x0d
   1bc24:	24 87       	std	Z+12, r18	; 0x0c
   1bc26:	2e 81       	ldd	r18, Y+6	; 0x06
   1bc28:	3f 81       	ldd	r19, Y+7	; 0x07
   1bc2a:	33 87       	std	Z+11, r19	; 0x0b
   1bc2c:	22 87       	std	Z+10, r18	; 0x0a
   1bc2e:	91 87       	std	Z+9, r25	; 0x09
   1bc30:	80 87       	std	Z+8, r24	; 0x08
   1bc32:	89 ee       	ldi	r24, 0xE9	; 233
   1bc34:	96 e4       	ldi	r25, 0x46	; 70
   1bc36:	a0 e0       	ldi	r26, 0x00	; 0
   1bc38:	85 83       	std	Z+5, r24	; 0x05
   1bc3a:	96 83       	std	Z+6, r25	; 0x06
   1bc3c:	a7 83       	std	Z+7, r26	; 0x07
   1bc3e:	01 50       	subi	r16, 0x01	; 1
   1bc40:	11 09       	sbc	r17, r1
   1bc42:	14 83       	std	Z+4, r17	; 0x04
   1bc44:	03 83       	std	Z+3, r16	; 0x03
   1bc46:	f2 82       	std	Z+2, r15	; 0x02
   1bc48:	e1 82       	std	Z+1, r14	; 0x01
   1bc4a:	0e 94 db 44 	call	0x89b6	; 0x89b6 <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1bc4e:	c7 01       	movw	r24, r14
   1bc50:	cd b7       	in	r28, 0x3d	; 61
   1bc52:	de b7       	in	r29, 0x3e	; 62
   1bc54:	61 96       	adiw	r28, 0x11	; 17
   1bc56:	e6 e0       	ldi	r30, 0x06	; 6
   1bc58:	39 c5       	rjmp	.+2674   	; 0x1c6cc <__epilogue_restores__+0x18>

0001bc5a <lcd_backlight>:

///@brief lcd_backlight LCD Backlight settings
/// @param[in] rgb: hex value 0xRRGGBB, RR,GG,BB values are 0 to 255
uint8_t  _backlight[5] = { 0x7c, '+', 0x80, 0x80, 0x80 };	/* Backlight half bright */
uint8_t lcd_backlight(uint32_t rgb)
{
   1bc5a:	cf 93       	push	r28
   1bc5c:	00 d0       	rcall	.+0      	; 0x1bc5e <lcd_backlight+0x4>
   1bc5e:	1f 92       	push	r1

	_backlight[2] = 0xff & (rgb >> 16);
   1bc60:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_backlight+0x2>
	_backlight[3] = 0xff & (rgb >> 8);
   1bc64:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <_backlight+0x3>
	_backlight[4] = 0xff & (rgb );
   1bc68:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <_backlight+0x4>

	if(! i2c_fn(0x72, TW_WRITE, _backlight, sizeof(_backlight)) )
   1bc6c:	25 e0       	ldi	r18, 0x05	; 5
   1bc6e:	40 ef       	ldi	r20, 0xF0	; 240
   1bc70:	52 e0       	ldi	r21, 0x02	; 2
   1bc72:	60 e0       	ldi	r22, 0x00	; 0
   1bc74:	82 e7       	ldi	r24, 0x72	; 114
   1bc76:	0e 94 1a 2b 	call	0x5634	; 0x5634 <i2c_fn>
   1bc7a:	c8 2f       	mov	r28, r24
   1bc7c:	81 11       	cpse	r24, r1
   1bc7e:	0d c0       	rjmp	.+26     	; 0x1bc9a <lcd_backlight+0x40>
	{
		i2c_display_task_errors();
   1bc80:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1bc84:	8f ec       	ldi	r24, 0xCF	; 207
   1bc86:	96 e4       	ldi	r25, 0x46	; 70
   1bc88:	a0 e0       	ldi	r26, 0x00	; 0
   1bc8a:	ed b7       	in	r30, 0x3d	; 61
   1bc8c:	fe b7       	in	r31, 0x3e	; 62
   1bc8e:	81 83       	std	Z+1, r24	; 0x01
   1bc90:	92 83       	std	Z+2, r25	; 0x02
   1bc92:	a3 83       	std	Z+3, r26	; 0x03
   1bc94:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1bc98:	01 c0       	rjmp	.+2      	; 0x1bc9c <lcd_backlight+0x42>
		return(0);
	}
	return(1);
   1bc9a:	c1 e0       	ldi	r28, 0x01	; 1
}
   1bc9c:	8c 2f       	mov	r24, r28
   1bc9e:	0f 90       	pop	r0
   1bca0:	0f 90       	pop	r0
   1bca2:	0f 90       	pop	r0
   1bca4:	cf 91       	pop	r28
   1bca6:	08 95       	ret

0001bca8 <lcd_setup>:
///@brief LCD setup code
/// For a SparkFun SERLCD 2x16 display
/// Initializes the I2C deiplay update task structure 
/// Passes the structures to the interrupt handler
void lcd_setup()
{
   1bca8:	cf 93       	push	r28
   1bcaa:	ad b7       	in	r26, 0x3d	; 61
   1bcac:	be b7       	in	r27, 0x3e	; 62
   1bcae:	17 97       	sbiw	r26, 0x07	; 7
   1bcb0:	0f b6       	in	r0, 0x3f	; 63
   1bcb2:	f8 94       	cli
   1bcb4:	be bf       	out	0x3e, r27	; 62
   1bcb6:	0f be       	out	0x3f, r0	; 63
   1bcb8:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1bcba:	cf b7       	in	r28, 0x3f	; 63

    printf("I2C LCD initialization start\n");
   1bcbc:	81 eb       	ldi	r24, 0xB1	; 177
   1bcbe:	96 e4       	ldi	r25, 0x46	; 70
   1bcc0:	a0 e0       	ldi	r26, 0x00	; 0
   1bcc2:	ed b7       	in	r30, 0x3d	; 61
   1bcc4:	fe b7       	in	r31, 0x3e	; 62
   1bcc6:	81 83       	std	Z+1, r24	; 0x01
   1bcc8:	92 83       	std	Z+2, r25	; 0x02
   1bcca:	a3 83       	std	Z+3, r26	; 0x03
   1bccc:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1bcd0:	61 e0       	ldi	r22, 0x01	; 1
   1bcd2:	70 e0       	ldi	r23, 0x00	; 0
   1bcd4:	84 e8       	ldi	r24, 0x84	; 132
   1bcd6:	9d ed       	ldi	r25, 0xDD	; 221
   1bcd8:	0e 94 b1 32 	call	0x6562	; 0x6562 <set_timers>
   1bcdc:	01 96       	adiw	r24, 0x01	; 1
   1bcde:	51 f4       	brne	.+20     	; 0x1bcf4 <lcd_setup+0x4c>
        printf("lcd_task init failed\n");
   1bce0:	8b e9       	ldi	r24, 0x9B	; 155
   1bce2:	96 e4       	ldi	r25, 0x46	; 70
   1bce4:	a0 e0       	ldi	r26, 0x00	; 0
   1bce6:	ed b7       	in	r30, 0x3d	; 61
   1bce8:	fe b7       	in	r31, 0x3e	; 62
   1bcea:	81 83       	std	Z+1, r24	; 0x01
   1bcec:	92 83       	std	Z+2, r25	; 0x02
   1bcee:	a3 83       	std	Z+3, r26	; 0x03
   1bcf0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

	i2c_init(100000);
   1bcf4:	60 ea       	ldi	r22, 0xA0	; 160
   1bcf6:	76 e8       	ldi	r23, 0x86	; 134
   1bcf8:	81 e0       	ldi	r24, 0x01	; 1
   1bcfa:	90 e0       	ldi	r25, 0x00	; 0
   1bcfc:	0e 94 21 2a 	call	0x5442	; 0x5442 <i2c_init>

	i2c_task_init();
   1bd00:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <i2c_task_init>

	cli();
   1bd04:	f8 94       	cli

	// Default startup message
    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1bd06:	83 e0       	ldi	r24, 0x03	; 3
   1bd08:	97 e1       	ldi	r25, 0x17	; 23
   1bd0a:	ed b7       	in	r30, 0x3d	; 61
   1bd0c:	fe b7       	in	r31, 0x3e	; 62
   1bd0e:	97 83       	std	Z+7, r25	; 0x07
   1bd10:	86 83       	std	Z+6, r24	; 0x06
   1bd12:	85 e9       	ldi	r24, 0x95	; 149
   1bd14:	96 e4       	ldi	r25, 0x46	; 70
   1bd16:	a0 e0       	ldi	r26, 0x00	; 0
   1bd18:	83 83       	std	Z+3, r24	; 0x03
   1bd1a:	94 83       	std	Z+4, r25	; 0x04
   1bd1c:	a5 83       	std	Z+5, r26	; 0x05
   1bd1e:	8c e0       	ldi	r24, 0x0C	; 12
   1bd20:	93 e0       	ldi	r25, 0x03	; 3
   1bd22:	92 83       	std	Z+2, r25	; 0x02
   1bd24:	81 83       	std	Z+1, r24	; 0x01
   1bd26:	0e 94 ef 44 	call	0x89de	; 0x89de <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1bd2a:	8f e0       	ldi	r24, 0x0F	; 15
   1bd2c:	97 e1       	ldi	r25, 0x17	; 23
   1bd2e:	ed b7       	in	r30, 0x3d	; 61
   1bd30:	fe b7       	in	r31, 0x3e	; 62
   1bd32:	97 83       	std	Z+7, r25	; 0x07
   1bd34:	86 83       	std	Z+6, r24	; 0x06
   1bd36:	8f e8       	ldi	r24, 0x8F	; 143
   1bd38:	96 e4       	ldi	r25, 0x46	; 70
   1bd3a:	a0 e0       	ldi	r26, 0x00	; 0
   1bd3c:	83 83       	std	Z+3, r24	; 0x03
   1bd3e:	94 83       	std	Z+4, r25	; 0x04
   1bd40:	a5 83       	std	Z+5, r26	; 0x05
   1bd42:	85 ef       	ldi	r24, 0xF5	; 245
   1bd44:	92 e0       	ldi	r25, 0x02	; 2
   1bd46:	92 83       	std	Z+2, r25	; 0x02
   1bd48:	81 83       	std	Z+1, r24	; 0x01
   1bd4a:	0e 94 ef 44 	call	0x89de	; 0x89de <sprintf_P>

	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd1, sizeof(_cmd1));
   1bd4e:	22 e0       	ldi	r18, 0x02	; 2
   1bd50:	41 e2       	ldi	r20, 0x21	; 33
   1bd52:	53 e0       	ldi	r21, 0x03	; 3
   1bd54:	60 e0       	ldi	r22, 0x00	; 0
   1bd56:	82 e7       	ldi	r24, 0x72	; 114
   1bd58:	0e 94 f7 29 	call	0x53ee	; 0x53ee <i2c_task_op_add>
   1bd5c:	90 93 55 17 	sts	0x1755, r25	; 0x801755 <i2c_task_op+0x1>
   1bd60:	80 93 54 17 	sts	0x1754, r24	; 0x801754 <i2c_task_op>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line1, 16);
   1bd64:	20 e1       	ldi	r18, 0x10	; 16
   1bd66:	4c e0       	ldi	r20, 0x0C	; 12
   1bd68:	53 e0       	ldi	r21, 0x03	; 3
   1bd6a:	60 e0       	ldi	r22, 0x00	; 0
   1bd6c:	82 e7       	ldi	r24, 0x72	; 114
   1bd6e:	0e 94 f7 29 	call	0x53ee	; 0x53ee <i2c_task_op_add>
   1bd72:	90 93 57 17 	sts	0x1757, r25	; 0x801757 <i2c_task_op+0x3>
   1bd76:	80 93 56 17 	sts	0x1756, r24	; 0x801756 <i2c_task_op+0x2>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd2, sizeof(_cmd2));
   1bd7a:	22 e0       	ldi	r18, 0x02	; 2
   1bd7c:	4a e0       	ldi	r20, 0x0A	; 10
   1bd7e:	53 e0       	ldi	r21, 0x03	; 3
   1bd80:	60 e0       	ldi	r22, 0x00	; 0
   1bd82:	82 e7       	ldi	r24, 0x72	; 114
   1bd84:	0e 94 f7 29 	call	0x53ee	; 0x53ee <i2c_task_op_add>
   1bd88:	90 93 59 17 	sts	0x1759, r25	; 0x801759 <i2c_task_op+0x5>
   1bd8c:	80 93 58 17 	sts	0x1758, r24	; 0x801758 <i2c_task_op+0x4>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line2, 16);
   1bd90:	20 e1       	ldi	r18, 0x10	; 16
   1bd92:	45 ef       	ldi	r20, 0xF5	; 245
   1bd94:	52 e0       	ldi	r21, 0x02	; 2
   1bd96:	60 e0       	ldi	r22, 0x00	; 0
   1bd98:	82 e7       	ldi	r24, 0x72	; 114
   1bd9a:	0e 94 f7 29 	call	0x53ee	; 0x53ee <i2c_task_op_add>
   1bd9e:	90 93 5b 17 	sts	0x175B, r25	; 0x80175b <i2c_task_op+0x7>
   1bda2:	80 93 5a 17 	sts	0x175A, r24	; 0x80175a <i2c_task_op+0x6>

	SREG = sreg;
   1bda6:	cf bf       	out	0x3f, r28	; 63

    i2c_task_run();
   1bda8:	0e 94 b7 2a 	call	0x556e	; 0x556e <i2c_task_run>
	// wait long enough for us to see the startup message
    delayms(1000);
   1bdac:	68 ee       	ldi	r22, 0xE8	; 232
   1bdae:	73 e0       	ldi	r23, 0x03	; 3
   1bdb0:	80 e0       	ldi	r24, 0x00	; 0
   1bdb2:	90 e0       	ldi	r25, 0x00	; 0
   1bdb4:	0e 94 5d 26 	call	0x4cba	; 0x4cba <delayms>
	
	// Verify the task finished - it normally takes < 30mS
    if(!i2c_task_done())
   1bdb8:	0e 94 98 2a 	call	0x5530	; 0x5530 <i2c_task_done>
   1bdbc:	81 11       	cpse	r24, r1
   1bdbe:	0c c0       	rjmp	.+24     	; 0x1bdd8 <lcd_setup+0x130>
	{
		i2c_display_task_errors();
   1bdc0:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1bdc4:	85 e7       	ldi	r24, 0x75	; 117
   1bdc6:	96 e4       	ldi	r25, 0x46	; 70
   1bdc8:	a0 e0       	ldi	r26, 0x00	; 0
   1bdca:	ed b7       	in	r30, 0x3d	; 61
   1bdcc:	fe b7       	in	r31, 0x3e	; 62
   1bdce:	81 83       	std	Z+1, r24	; 0x01
   1bdd0:	92 83       	std	Z+2, r25	; 0x02
   1bdd2:	a3 83       	std	Z+3, r26	; 0x03
   1bdd4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
	}

    sep();
   1bdd8:	0e 94 12 30 	call	0x6024	; 0x6024 <sep>
}
   1bddc:	ad b7       	in	r26, 0x3d	; 61
   1bdde:	be b7       	in	r27, 0x3e	; 62
   1bde0:	17 96       	adiw	r26, 0x07	; 7
   1bde2:	0f b6       	in	r0, 0x3f	; 63
   1bde4:	f8 94       	cli
   1bde6:	be bf       	out	0x3e, r27	; 62
   1bde8:	0f be       	out	0x3f, r0	; 63
   1bdea:	ad bf       	out	0x3d, r26	; 61
   1bdec:	cf 91       	pop	r28
   1bdee:	08 95       	ret

0001bdf0 <i2c_lcd_task>:


///@brief Update the LCD wile the system is running
/// Display SD card fault status and the current time
void i2c_lcd_task()
{
   1bdf0:	af e2       	ldi	r26, 0x2F	; 47
   1bdf2:	b0 e0       	ldi	r27, 0x00	; 0
   1bdf4:	ed ef       	ldi	r30, 0xFD	; 253
   1bdf6:	fe ed       	ldi	r31, 0xDE	; 222
   1bdf8:	50 c4       	rjmp	.+2208   	; 0x1c69a <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1bdfa:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1bdfc:	f8 94       	cli
	if(!mmc_ins_status())
   1bdfe:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <mmc_ins_status>
   1be02:	89 2b       	or	r24, r25
   1be04:	49 f4       	brne	.+18     	; 0x1be18 <i2c_lcd_task+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1be06:	8c e1       	ldi	r24, 0x1C	; 28
   1be08:	97 e1       	ldi	r25, 0x17	; 23
   1be0a:	ed b7       	in	r30, 0x3d	; 61
   1be0c:	fe b7       	in	r31, 0x3e	; 62
   1be0e:	97 83       	std	Z+7, r25	; 0x07
   1be10:	86 83       	std	Z+6, r24	; 0x06
   1be12:	8f e6       	ldi	r24, 0x6F	; 111
   1be14:	96 e4       	ldi	r25, 0x46	; 70
   1be16:	17 c0       	rjmp	.+46     	; 0x1be46 <i2c_lcd_task+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1be18:	be 01       	movw	r22, r28
   1be1a:	68 5d       	subi	r22, 0xD8	; 216
   1be1c:	7f 4f       	sbci	r23, 0xFF	; 255
   1be1e:	80 e0       	ldi	r24, 0x00	; 0
   1be20:	90 e0       	ldi	r25, 0x00	; 0
   1be22:	0e 94 c1 31 	call	0x6382	; 0x6382 <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1be26:	ce 01       	movw	r24, r28
   1be28:	88 96       	adiw	r24, 0x28	; 40
   1be2a:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <gmtime>
   1be2e:	4f e1       	ldi	r20, 0x1F	; 31
   1be30:	50 e0       	ldi	r21, 0x00	; 0
   1be32:	be 01       	movw	r22, r28
   1be34:	68 5f       	subi	r22, 0xF8	; 248
   1be36:	7f 4f       	sbci	r23, 0xFF	; 255
   1be38:	d2 de       	rcall	.-604    	; 0x1bbde <lcd_time>
   1be3a:	ed b7       	in	r30, 0x3d	; 61
   1be3c:	fe b7       	in	r31, 0x3e	; 62
   1be3e:	97 83       	std	Z+7, r25	; 0x07
   1be40:	86 83       	std	Z+6, r24	; 0x06
   1be42:	89 e6       	ldi	r24, 0x69	; 105
   1be44:	96 e4       	ldi	r25, 0x46	; 70
   1be46:	a0 e0       	ldi	r26, 0x00	; 0
   1be48:	83 83       	std	Z+3, r24	; 0x03
   1be4a:	94 83       	std	Z+4, r25	; 0x04
   1be4c:	a5 83       	std	Z+5, r26	; 0x05
   1be4e:	85 ef       	ldi	r24, 0xF5	; 245
   1be50:	92 e0       	ldi	r25, 0x02	; 2
   1be52:	92 83       	std	Z+2, r25	; 0x02
   1be54:	81 83       	std	Z+1, r24	; 0x01
   1be56:	0e 94 ef 44 	call	0x89de	; 0x89de <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1be5a:	1f bf       	out	0x3f, r17	; 63

    i2c_task_run();
   1be5c:	0e 94 b7 2a 	call	0x556e	; 0x556e <i2c_task_run>
}
   1be60:	af 96       	adiw	r28, 0x2f	; 47
   1be62:	e3 e0       	ldi	r30, 0x03	; 3
   1be64:	36 c4       	rjmp	.+2156   	; 0x1c6d2 <__epilogue_restores__+0x1e>

0001be66 <gpib_user_task>:
///@brief GPIB callback from gpib_read_byte()
/// This function gets called evry time trough the read loop
/// This task run in the forground - is not an interrupt task
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1be66:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1be68:	f8 94       	cli
	if(lcd_display_time > 100) // increments at 1000HZ
   1be6a:	20 91 e7 19 	lds	r18, 0x19E7	; 0x8019e7 <lcd_display_time>
   1be6e:	30 91 e8 19 	lds	r19, 0x19E8	; 0x8019e8 <lcd_display_time+0x1>
   1be72:	25 36       	cpi	r18, 0x65	; 101
   1be74:	31 05       	cpc	r19, r1
   1be76:	3c f0       	brlt	.+14     	; 0x1be86 <gpib_user_task+0x20>
	{
		lcd_display_time = 0;
   1be78:	10 92 e8 19 	sts	0x19E8, r1	; 0x8019e8 <lcd_display_time+0x1>
   1be7c:	10 92 e7 19 	sts	0x19E7, r1	; 0x8019e7 <lcd_display_time>
		SREG = sreg;
   1be80:	8f bf       	out	0x3f, r24	; 63
		i2c_lcd_task();
   1be82:	b6 cf       	rjmp	.-148    	; 0x1bdf0 <i2c_lcd_task>
		return;
   1be84:	08 95       	ret
	}
	SREG = sreg;
   1be86:	8f bf       	out	0x3f, r24	; 63
   1be88:	08 95       	ret

0001be8a <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1be8a:	00 d0       	rcall	.+0      	; 0x1be8c <help+0x2>
   1be8c:	1f 92       	push	r1

    copyright();
   1be8e:	46 de       	rcall	.-884    	; 0x1bb1c <copyright>

#ifdef FATFS_TESTS
    fatfs_help(0);
   1be90:	80 e0       	ldi	r24, 0x00	; 0
   1be92:	90 e0       	ldi	r25, 0x00	; 0
   1be94:	0e 94 26 72 	call	0xe44c	; 0xe44c <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1be98:	80 e0       	ldi	r24, 0x00	; 0
   1be9a:	90 e0       	ldi	r25, 0x00	; 0
   1be9c:	0e 94 57 7d 	call	0xfaae	; 0xfaae <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1bea0:	80 e0       	ldi	r24, 0x00	; 0
   1bea2:	90 e0       	ldi	r25, 0x00	; 0
   1bea4:	0e 94 e4 bd 	call	0x17bc8	; 0x17bc8 <lif_help>
#endif

    gpib_help(0);
   1bea8:	80 e0       	ldi	r24, 0x00	; 0
   1beaa:	90 e0       	ldi	r25, 0x00	; 0
   1beac:	0e 94 cb 90 	call	0x12196	; 0x12196 <gpib_help>

    printf(
   1beb0:	81 ec       	ldi	r24, 0xC1	; 193
   1beb2:	95 e4       	ldi	r25, 0x45	; 69
   1beb4:	a0 e0       	ldi	r26, 0x00	; 0
   1beb6:	ed b7       	in	r30, 0x3d	; 61
   1beb8:	fe b7       	in	r31, 0x3e	; 62
   1beba:	81 83       	std	Z+1, r24	; 0x01
   1bebc:	92 83       	std	Z+2, r25	; 0x02
   1bebe:	a3 83       	std	Z+3, r26	; 0x03
   1bec0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
        "   - set date\n"
        "time\n"
        "   - display current time\n"
        "\n"
        );
}
   1bec4:	0f 90       	pop	r0
   1bec6:	0f 90       	pop	r0
   1bec8:	0f 90       	pop	r0
   1beca:	08 95       	ret

0001becc <user_task.part.1>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void user_task(uint8_t gpib)
   1becc:	6f 92       	push	r6
   1bece:	7f 92       	push	r7
   1bed0:	8f 92       	push	r8
   1bed2:	af 92       	push	r10
   1bed4:	bf 92       	push	r11
   1bed6:	cf 92       	push	r12
   1bed8:	df 92       	push	r13
   1beda:	ef 92       	push	r14
   1bedc:	ff 92       	push	r15
   1bede:	0f 93       	push	r16
   1bee0:	1f 93       	push	r17
   1bee2:	cf 93       	push	r28
   1bee4:	df 93       	push	r29
   1bee6:	cd b7       	in	r28, 0x3d	; 61
   1bee8:	de b7       	in	r29, 0x3e	; 62
   1beea:	cb 56       	subi	r28, 0x6B	; 107
   1beec:	d1 40       	sbci	r29, 0x01	; 1
   1beee:	0f b6       	in	r0, 0x3f	; 63
   1bef0:	f8 94       	cli
   1bef2:	de bf       	out	0x3e, r29	; 62
   1bef4:	0f be       	out	0x3f, r0	; 63
   1bef6:	cd bf       	out	0x3d, r28	; 61
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1bef8:	8e eb       	ldi	r24, 0xBE	; 190
   1befa:	95 e4       	ldi	r25, 0x45	; 69
   1befc:	a0 e0       	ldi	r26, 0x00	; 0
   1befe:	ed b7       	in	r30, 0x3d	; 61
   1bf00:	fe b7       	in	r31, 0x3e	; 62
   1bf02:	81 83       	std	Z+1, r24	; 0x01
   1bf04:	92 83       	std	Z+2, r25	; 0x02
   1bf06:	a3 83       	std	Z+3, r26	; 0x03
   1bf08:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

	memset(line,0,sizeof(line)-1);
   1bf0c:	ce 01       	movw	r24, r28
   1bf0e:	06 96       	adiw	r24, 0x06	; 6
   1bf10:	6c 01       	movw	r12, r24
   1bf12:	8f ef       	ldi	r24, 0xFF	; 255
   1bf14:	f6 01       	movw	r30, r12
   1bf16:	11 92       	st	Z+, r1
   1bf18:	8a 95       	dec	r24
   1bf1a:	e9 f7       	brne	.-6      	; 0x1bf16 <user_task.part.1+0x4a>

    fgets(line,sizeof(line)-2,stdin);
   1bf1c:	40 91 bc 1c 	lds	r20, 0x1CBC	; 0x801cbc <__iob>
   1bf20:	50 91 bd 1c 	lds	r21, 0x1CBD	; 0x801cbd <__iob+0x1>
   1bf24:	6e ef       	ldi	r22, 0xFE	; 254
   1bf26:	70 e0       	ldi	r23, 0x00	; 0
   1bf28:	c6 01       	movw	r24, r12
   1bf2a:	0e 94 43 75 	call	0xea86	; 0xea86 <fgets>
    trim_tail(line);
   1bf2e:	c6 01       	movw	r24, r12
   1bf30:	0e 94 22 30 	call	0x6044	; 0x6044 <trim_tail>
    argc = split_args(line,argv,50);
   1bf34:	42 e3       	ldi	r20, 0x32	; 50
   1bf36:	50 e0       	ldi	r21, 0x00	; 0
   1bf38:	be 01       	movw	r22, r28
   1bf3a:	6a 5f       	subi	r22, 0xFA	; 250
   1bf3c:	7e 4f       	sbci	r23, 0xFE	; 254
   1bf3e:	c6 01       	movw	r24, r12
   1bf40:	0e 94 a8 30 	call	0x6150	; 0x6150 <split_args>
   1bf44:	7c 01       	movw	r14, r24

	if(debug_input)
   1bf46:	80 91 e9 19 	lds	r24, 0x19E9	; 0x8019e9 <debug_input>
   1bf4a:	81 11       	cpse	r24, r1
   1bf4c:	0a c0       	rjmp	.+20     	; 0x1bf62 <user_task.part.1+0x96>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1bf4e:	ca 5f       	subi	r28, 0xFA	; 250
   1bf50:	de 4f       	sbci	r29, 0xFE	; 254
   1bf52:	08 81       	ld	r16, Y
   1bf54:	19 81       	ldd	r17, Y+1	; 0x01
   1bf56:	c6 50       	subi	r28, 0x06	; 6
   1bf58:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1bf5a:	01 15       	cp	r16, r1
   1bf5c:	11 05       	cpc	r17, r1
   1bf5e:	a1 f5       	brne	.+104    	; 0x1bfc8 <user_task.part.1+0xfc>
   1bf60:	da c0       	rjmp	.+436    	; 0x1c116 <user_task.part.1+0x24a>
    trim_tail(line);
    argc = split_args(line,argv,50);

	if(debug_input)
	{
		printf("Arguments:\n");
   1bf62:	82 eb       	ldi	r24, 0xB2	; 178
   1bf64:	95 e4       	ldi	r25, 0x45	; 69
   1bf66:	a0 e0       	ldi	r26, 0x00	; 0
   1bf68:	ed b7       	in	r30, 0x3d	; 61
   1bf6a:	fe b7       	in	r31, 0x3e	; 62
   1bf6c:	81 83       	std	Z+1, r24	; 0x01
   1bf6e:	92 83       	std	Z+2, r25	; 0x02
   1bf70:	a3 83       	std	Z+3, r26	; 0x03
   1bf72:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
		printf("   argc = %d\n", argc);
   1bf76:	ed b7       	in	r30, 0x3d	; 61
   1bf78:	fe b7       	in	r31, 0x3e	; 62
   1bf7a:	f5 82       	std	Z+5, r15	; 0x05
   1bf7c:	e4 82       	std	Z+4, r14	; 0x04
   1bf7e:	84 ea       	ldi	r24, 0xA4	; 164
   1bf80:	95 e4       	ldi	r25, 0x45	; 69
   1bf82:	a0 e0       	ldi	r26, 0x00	; 0
   1bf84:	81 83       	std	Z+1, r24	; 0x01
   1bf86:	92 83       	std	Z+2, r25	; 0x02
   1bf88:	a3 83       	std	Z+3, r26	; 0x03
   1bf8a:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1bf8e:	ce 01       	movw	r24, r28
   1bf90:	8a 5f       	subi	r24, 0xFA	; 250
   1bf92:	9e 4f       	sbci	r25, 0xFE	; 254
   1bf94:	5c 01       	movw	r10, r24
		for(i=0;i<argc;++i)
   1bf96:	00 e0       	ldi	r16, 0x00	; 0
   1bf98:	10 e0       	ldi	r17, 0x00	; 0
			printf("   [%s]\n", argv[i]);
   1bf9a:	8b e9       	ldi	r24, 0x9B	; 155
   1bf9c:	95 e4       	ldi	r25, 0x45	; 69
   1bf9e:	3c 01       	movw	r6, r24
   1bfa0:	81 2c       	mov	r8, r1

	if(debug_input)
	{
		printf("Arguments:\n");
		printf("   argc = %d\n", argc);
		for(i=0;i<argc;++i)
   1bfa2:	0e 15       	cp	r16, r14
   1bfa4:	1f 05       	cpc	r17, r15
   1bfa6:	9c f6       	brge	.-90     	; 0x1bf4e <user_task.part.1+0x82>
			printf("   [%s]\n", argv[i]);
   1bfa8:	f5 01       	movw	r30, r10
   1bfaa:	81 91       	ld	r24, Z+
   1bfac:	91 91       	ld	r25, Z+
   1bfae:	5f 01       	movw	r10, r30
   1bfb0:	ed b7       	in	r30, 0x3d	; 61
   1bfb2:	fe b7       	in	r31, 0x3e	; 62
   1bfb4:	95 83       	std	Z+5, r25	; 0x05
   1bfb6:	84 83       	std	Z+4, r24	; 0x04
   1bfb8:	61 82       	std	Z+1, r6	; 0x01
   1bfba:	72 82       	std	Z+2, r7	; 0x02
   1bfbc:	83 82       	std	Z+3, r8	; 0x03
   1bfbe:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

	if(debug_input)
	{
		printf("Arguments:\n");
		printf("   argc = %d\n", argc);
		for(i=0;i<argc;++i)
   1bfc2:	0f 5f       	subi	r16, 0xFF	; 255
   1bfc4:	1f 4f       	sbci	r17, 0xFF	; 255
   1bfc6:	ed cf       	rjmp	.-38     	; 0x1bfa2 <user_task.part.1+0xd6>

    ind = 0;
	result = 0;
    ptr = argv[ind++];

    if(!ptr || argc < 1)
   1bfc8:	1e 14       	cp	r1, r14
   1bfca:	1f 04       	cpc	r1, r15
   1bfcc:	0c f0       	brlt	.+2      	; 0x1bfd0 <user_task.part.1+0x104>
   1bfce:	a3 c0       	rjmp	.+326    	; 0x1c116 <user_task.part.1+0x24a>
    {
        result = 1;
    }
    else if (MATCHI(ptr,"input") )
   1bfd0:	6a e2       	ldi	r22, 0x2A	; 42
   1bfd2:	77 e1       	ldi	r23, 0x17	; 23
   1bfd4:	c8 01       	movw	r24, r16
   1bfd6:	0e 94 50 30 	call	0x60a0	; 0x60a0 <MATCHI>
   1bfda:	89 2b       	or	r24, r25
   1bfdc:	41 f0       	breq	.+16     	; 0x1bfee <user_task.part.1+0x122>
    {
        debug_input = !debug_input;
   1bfde:	81 e0       	ldi	r24, 0x01	; 1
   1bfe0:	90 91 e9 19 	lds	r25, 0x19E9	; 0x8019e9 <debug_input>
   1bfe4:	91 11       	cpse	r25, r1
   1bfe6:	80 e0       	ldi	r24, 0x00	; 0
   1bfe8:	80 93 e9 19 	sts	0x19E9, r24	; 0x8019e9 <debug_input>
   1bfec:	94 c0       	rjmp	.+296    	; 0x1c116 <user_task.part.1+0x24a>

    }
#endif

#ifdef LCD_SUPPORT
    else if (MATCHI(ptr,"backlight") )
   1bfee:	60 e3       	ldi	r22, 0x30	; 48
   1bff0:	77 e1       	ldi	r23, 0x17	; 23
   1bff2:	c8 01       	movw	r24, r16
   1bff4:	0e 94 50 30 	call	0x60a0	; 0x60a0 <MATCHI>
   1bff8:	89 2b       	or	r24, r25
   1bffa:	f9 f0       	breq	.+62     	; 0x1c03a <user_task.part.1+0x16e>
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
   1bffc:	c8 5f       	subi	r28, 0xF8	; 248
   1bffe:	de 4f       	sbci	r29, 0xFE	; 254
   1c000:	e8 81       	ld	r30, Y
   1c002:	f9 81       	ldd	r31, Y+1	; 0x01
   1c004:	c8 50       	subi	r28, 0x08	; 8
   1c006:	d1 40       	sbci	r29, 0x01	; 1
   1c008:	80 81       	ld	r24, Z
   1c00a:	8d 33       	cpi	r24, 0x3D	; 61
   1c00c:	19 f4       	brne	.+6      	; 0x1c014 <user_task.part.1+0x148>
            ++ind;
   1c00e:	82 e0       	ldi	r24, 0x02	; 2
   1c010:	90 e0       	ldi	r25, 0x00	; 0
   1c012:	02 c0       	rjmp	.+4      	; 0x1c018 <user_task.part.1+0x14c>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c014:	81 e0       	ldi	r24, 0x01	; 1
   1c016:	90 e0       	ldi	r25, 0x00	; 0
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
            ++ind;
        rgb = get_value(argv[ind]);
   1c018:	88 0f       	add	r24, r24
   1c01a:	99 1f       	adc	r25, r25
   1c01c:	e6 e0       	ldi	r30, 0x06	; 6
   1c01e:	f1 e0       	ldi	r31, 0x01	; 1
   1c020:	ec 0f       	add	r30, r28
   1c022:	fd 1f       	adc	r31, r29
   1c024:	e8 0f       	add	r30, r24
   1c026:	f9 1f       	adc	r31, r25
   1c028:	80 81       	ld	r24, Z
   1c02a:	91 81       	ldd	r25, Z+1	; 0x01
   1c02c:	0e 94 47 31 	call	0x628e	; 0x628e <get_value>
		result = lcd_backlight(rgb);
   1c030:	14 de       	rcall	.-984    	; 0x1bc5a <lcd_backlight>
    else if(lif_tests(argc,argv))
	{
        result = 1;
	}
#endif
    if(result)
   1c032:	88 23       	and	r24, r24
   1c034:	09 f4       	brne	.+2      	; 0x1c038 <user_task.part.1+0x16c>
   1c036:	62 c0       	rjmp	.+196    	; 0x1c0fc <user_task.part.1+0x230>
   1c038:	6e c0       	rjmp	.+220    	; 0x1c116 <user_task.part.1+0x24a>
        rgb = get_value(argv[ind]);
		result = lcd_backlight(rgb);
    }
#endif

    else if ( MATCH(ptr,"mem") )
   1c03a:	6a e3       	ldi	r22, 0x3A	; 58
   1c03c:	77 e1       	ldi	r23, 0x17	; 23
   1c03e:	c8 01       	movw	r24, r16
   1c040:	0e 94 3c 30 	call	0x6078	; 0x6078 <MATCH>
   1c044:	89 2b       	or	r24, r25
   1c046:	19 f0       	breq	.+6      	; 0x1c04e <user_task.part.1+0x182>
    {
        PrintFree();
   1c048:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <PrintFree>
   1c04c:	64 c0       	rjmp	.+200    	; 0x1c116 <user_task.part.1+0x24a>
        result = 1;

    }
    else if ( MATCHI(ptr,"reset") )
   1c04e:	60 ee       	ldi	r22, 0xE0	; 224
   1c050:	7d e0       	ldi	r23, 0x0D	; 13
   1c052:	c8 01       	movw	r24, r16
   1c054:	0e 94 50 30 	call	0x60a0	; 0x60a0 <MATCHI>
   1c058:	89 2b       	or	r24, r25
   1c05a:	51 f0       	breq	.+20     	; 0x1c070 <user_task.part.1+0x1a4>
    {
        cli();
   1c05c:	f8 94       	cli
        uart_rx_flush(0);
   1c05e:	80 e0       	ldi	r24, 0x00	; 0
   1c060:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <uart_rx_flush>
        cli();
   1c064:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1c066:	82 e0       	ldi	r24, 0x02	; 2
   1c068:	84 bf       	out	0x34, r24	; 52
        RESET();
   1c06a:	e0 e0       	ldi	r30, 0x00	; 0
   1c06c:	fc ef       	ldi	r31, 0xFC	; 252
   1c06e:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1c070:	6e e3       	ldi	r22, 0x3E	; 62
   1c072:	77 e1       	ldi	r23, 0x17	; 23
   1c074:	c8 01       	movw	r24, r16
   1c076:	0e 94 50 30 	call	0x60a0	; 0x60a0 <MATCHI>
   1c07a:	89 2b       	or	r24, r25
   1c07c:	19 f0       	breq	.+6      	; 0x1c084 <user_task.part.1+0x1b8>
    {
        setdate();
   1c07e:	0e 94 8b 39 	call	0x7316	; 0x7316 <setdate>
   1c082:	07 c0       	rjmp	.+14     	; 0x1c092 <user_task.part.1+0x1c6>
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"time") )
   1c084:	66 e4       	ldi	r22, 0x46	; 70
   1c086:	77 e1       	ldi	r23, 0x17	; 23
   1c088:	c8 01       	movw	r24, r16
   1c08a:	0e 94 50 30 	call	0x60a0	; 0x60a0 <MATCHI>
   1c08e:	89 2b       	or	r24, r25
   1c090:	19 f0       	breq	.+6      	; 0x1c098 <user_task.part.1+0x1cc>
    {
        display_clock();
   1c092:	0e 94 a7 3b 	call	0x774e	; 0x774e <display_clock>
   1c096:	3f c0       	rjmp	.+126    	; 0x1c116 <user_task.part.1+0x24a>
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c098:	69 e7       	ldi	r22, 0x79	; 121
   1c09a:	76 e1       	ldi	r23, 0x16	; 22
   1c09c:	c8 01       	movw	r24, r16
   1c09e:	0e 94 50 30 	call	0x60a0	; 0x60a0 <MATCHI>
   1c0a2:	89 2b       	or	r24, r25
    {
        help();
   1c0a4:	11 f0       	breq	.+4      	; 0x1c0aa <user_task.part.1+0x1de>
   1c0a6:	f1 de       	rcall	.-542    	; 0x1be8a <help>
   1c0a8:	36 c0       	rjmp	.+108    	; 0x1c116 <user_task.part.1+0x24a>
    else if ( MATCHI(ptr,"time") )
    {
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c0aa:	6f e7       	ldi	r22, 0x7F	; 127
   1c0ac:	76 e1       	ldi	r23, 0x16	; 22
   1c0ae:	c8 01       	movw	r24, r16
   1c0b0:	0e 94 50 30 	call	0x60a0	; 0x60a0 <MATCHI>
   1c0b4:	89 2b       	or	r24, r25
   1c0b6:	b9 f7       	brne	.-18     	; 0x1c0a6 <user_task.part.1+0x1da>
    {
        help();
        result = 1;
    }

    else if(gpib_tests(argc,argv))
   1c0b8:	be 01       	movw	r22, r28
   1c0ba:	6a 5f       	subi	r22, 0xFA	; 250
   1c0bc:	7e 4f       	sbci	r23, 0xFE	; 254
   1c0be:	c7 01       	movw	r24, r14
   1c0c0:	0e 94 ec 90 	call	0x121d8	; 0x121d8 <gpib_tests>
   1c0c4:	89 2b       	or	r24, r25
   1c0c6:	19 f0       	breq	.+6      	; 0x1c0ce <user_task.part.1+0x202>
    {
// Restore GPIB BUS states
        gpib_init_devices();
   1c0c8:	0e 94 00 8c 	call	0x11800	; 0x11800 <gpib_init_devices>
   1c0cc:	24 c0       	rjmp	.+72     	; 0x1c116 <user_task.part.1+0x24a>
        result = 1;
    }

#ifdef POSIX_TESTS
    else if(posix_tests(argc,argv))
   1c0ce:	be 01       	movw	r22, r28
   1c0d0:	6a 5f       	subi	r22, 0xFA	; 250
   1c0d2:	7e 4f       	sbci	r23, 0xFE	; 254
   1c0d4:	c7 01       	movw	r24, r14
   1c0d6:	0e 94 c9 80 	call	0x10192	; 0x10192 <posix_tests>
   1c0da:	89 2b       	or	r24, r25
   1c0dc:	e1 f4       	brne	.+56     	; 0x1c116 <user_task.part.1+0x24a>
        result = 1;
	}
#endif

#ifdef FATFS_TESTS
    else if(fatfs_tests(argc,argv))
   1c0de:	be 01       	movw	r22, r28
   1c0e0:	6a 5f       	subi	r22, 0xFA	; 250
   1c0e2:	7e 4f       	sbci	r23, 0xFE	; 254
   1c0e4:	c7 01       	movw	r24, r14
   1c0e6:	0e 94 45 73 	call	0xe68a	; 0xe68a <fatfs_tests>
   1c0ea:	89 2b       	or	r24, r25
   1c0ec:	a1 f4       	brne	.+40     	; 0x1c116 <user_task.part.1+0x24a>
        result = 1;
	}
#endif

#ifdef LIF_SUPPORT
    else if(lif_tests(argc,argv))
   1c0ee:	be 01       	movw	r22, r28
   1c0f0:	6a 5f       	subi	r22, 0xFA	; 250
   1c0f2:	7e 4f       	sbci	r23, 0xFE	; 254
   1c0f4:	c7 01       	movw	r24, r14
   1c0f6:	9d db       	rcall	.-2246   	; 0x1b832 <lif_tests>
   1c0f8:	89 2b       	or	r24, r25
   1c0fa:	69 f4       	brne	.+26     	; 0x1c116 <user_task.part.1+0x24a>
	}
#endif
    if(result)
        printf("OK\n");
    else
        printf("Error:[%s]\n",line);
   1c0fc:	ed b7       	in	r30, 0x3d	; 61
   1c0fe:	fe b7       	in	r31, 0x3e	; 62
   1c100:	d5 82       	std	Z+5, r13	; 0x05
   1c102:	c4 82       	std	Z+4, r12	; 0x04
   1c104:	8b e8       	ldi	r24, 0x8B	; 139
   1c106:	95 e4       	ldi	r25, 0x45	; 69
   1c108:	a0 e0       	ldi	r26, 0x00	; 0
   1c10a:	81 83       	std	Z+1, r24	; 0x01
   1c10c:	92 83       	std	Z+2, r25	; 0x02
   1c10e:	a3 83       	std	Z+3, r26	; 0x03
   1c110:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
   1c114:	0a c0       	rjmp	.+20     	; 0x1c12a <user_task.part.1+0x25e>
	{
        result = 1;
	}
#endif
    if(result)
        printf("OK\n");
   1c116:	87 e9       	ldi	r24, 0x97	; 151
   1c118:	95 e4       	ldi	r25, 0x45	; 69
   1c11a:	a0 e0       	ldi	r26, 0x00	; 0
   1c11c:	ed b7       	in	r30, 0x3d	; 61
   1c11e:	fe b7       	in	r31, 0x3e	; 62
   1c120:	81 83       	std	Z+1, r24	; 0x01
   1c122:	92 83       	std	Z+2, r25	; 0x02
   1c124:	a3 83       	std	Z+3, r26	; 0x03
   1c126:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    else
        printf("Error:[%s]\n",line);
}
   1c12a:	c5 59       	subi	r28, 0x95	; 149
   1c12c:	de 4f       	sbci	r29, 0xFE	; 254
   1c12e:	0f b6       	in	r0, 0x3f	; 63
   1c130:	f8 94       	cli
   1c132:	de bf       	out	0x3e, r29	; 62
   1c134:	0f be       	out	0x3f, r0	; 63
   1c136:	cd bf       	out	0x3d, r28	; 61
   1c138:	df 91       	pop	r29
   1c13a:	cf 91       	pop	r28
   1c13c:	1f 91       	pop	r17
   1c13e:	0f 91       	pop	r16
   1c140:	ff 90       	pop	r15
   1c142:	ef 90       	pop	r14
   1c144:	df 90       	pop	r13
   1c146:	cf 90       	pop	r12
   1c148:	bf 90       	pop	r11
   1c14a:	af 90       	pop	r10
   1c14c:	8f 90       	pop	r8
   1c14e:	7f 90       	pop	r7
   1c150:	6f 90       	pop	r6
   1c152:	08 95       	ret

0001c154 <user_task>:
    int result = 0;
    char *argv[51];
    char line[256];


    if(gpib)
   1c154:	81 11       	cpse	r24, r1
        gpib_task();
   1c156:	0e 94 6b 90 	call	0x120d6	; 0x120d6 <gpib_task>

    if(!kbhit(0))
   1c15a:	80 e0       	ldi	r24, 0x00	; 0
   1c15c:	0e 94 e5 27 	call	0x4fca	; 0x4fca <uart_rx_count>
   1c160:	89 2b       	or	r24, r25
   1c162:	09 f0       	breq	.+2      	; 0x1c166 <user_task+0x12>
   1c164:	b3 ce       	rjmp	.-666    	; 0x1becc <user_task.part.1>
   1c166:	08 95       	ret

0001c168 <main>:


/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1c168:	a3 e3       	ldi	r26, 0x33	; 51
   1c16a:	b0 e0       	ldi	r27, 0x00	; 0
   1c16c:	e9 eb       	ldi	r30, 0xB9	; 185
   1c16e:	f0 ee       	ldi	r31, 0xE0	; 224
   1c170:	8f c2       	rjmp	.+1310   	; 0x1c690 <__prologue_saves__+0x14>
    ts_t ts;
    uint32_t actual,baud;
	char tmp[32];

	clear_error();		// Clear error state
   1c172:	0e 94 02 25 	call	0x4a04	; 0x4a04 <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1c176:	46 98       	cbi	0x08, 6	; 8
   1c178:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c17a:	0e 94 94 84 	call	0x10928	; 0x10928 <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1c17e:	40 e0       	ldi	r20, 0x00	; 0
   1c180:	52 ec       	ldi	r21, 0xC2	; 194
   1c182:	61 e0       	ldi	r22, 0x01	; 1
   1c184:	70 e0       	ldi	r23, 0x00	; 0
   1c186:	80 e0       	ldi	r24, 0x00	; 0
   1c188:	0e 94 50 27 	call	0x4ea0	; 0x4ea0 <uart_init>
   1c18c:	6b 01       	movw	r12, r22
   1c18e:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1c190:	68 ec       	ldi	r22, 0xC8	; 200
   1c192:	70 e0       	ldi	r23, 0x00	; 0
   1c194:	80 e0       	ldi	r24, 0x00	; 0
   1c196:	90 e0       	ldi	r25, 0x00	; 0
   1c198:	0e 94 5d 26 	call	0x4cba	; 0x4cba <delayms>

    sep();
   1c19c:	0e 94 12 30 	call	0x6024	; 0x6024 <sep>
    printf("Start\n");
   1c1a0:	84 e8       	ldi	r24, 0x84	; 132
   1c1a2:	95 e4       	ldi	r25, 0x45	; 69
   1c1a4:	a0 e0       	ldi	r26, 0x00	; 0
   1c1a6:	ed b7       	in	r30, 0x3d	; 61
   1c1a8:	fe b7       	in	r31, 0x3e	; 62
   1c1aa:	81 83       	std	Z+1, r24	; 0x01
   1c1ac:	92 83       	std	Z+2, r25	; 0x02
   1c1ae:	a3 83       	std	Z+3, r26	; 0x03
   1c1b0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1c1b4:	80 e0       	ldi	r24, 0x00	; 0
   1c1b6:	9d e2       	ldi	r25, 0x2D	; 45
   1c1b8:	a1 e3       	ldi	r26, 0x31	; 49
   1c1ba:	b1 e0       	ldi	r27, 0x01	; 1
   1c1bc:	ed b7       	in	r30, 0x3d	; 61
   1c1be:	fe b7       	in	r31, 0x3e	; 62
   1c1c0:	84 83       	std	Z+4, r24	; 0x04
   1c1c2:	95 83       	std	Z+5, r25	; 0x05
   1c1c4:	a6 83       	std	Z+6, r26	; 0x06
   1c1c6:	b7 83       	std	Z+7, r27	; 0x07
   1c1c8:	83 e7       	ldi	r24, 0x73	; 115
   1c1ca:	95 e4       	ldi	r25, 0x45	; 69
   1c1cc:	a0 e0       	ldi	r26, 0x00	; 0
   1c1ce:	81 83       	std	Z+1, r24	; 0x01
   1c1d0:	92 83       	std	Z+2, r25	; 0x02
   1c1d2:	a3 83       	std	Z+3, r26	; 0x03
   1c1d4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1c1d8:	ed b7       	in	r30, 0x3d	; 61
   1c1da:	fe b7       	in	r31, 0x3e	; 62
   1c1dc:	c0 86       	std	Z+8, r12	; 0x08
   1c1de:	d1 86       	std	Z+9, r13	; 0x09
   1c1e0:	e2 86       	std	Z+10, r14	; 0x0a
   1c1e2:	f3 86       	std	Z+11, r15	; 0x0b
   1c1e4:	80 e0       	ldi	r24, 0x00	; 0
   1c1e6:	92 ec       	ldi	r25, 0xC2	; 194
   1c1e8:	a1 e0       	ldi	r26, 0x01	; 1
   1c1ea:	b0 e0       	ldi	r27, 0x00	; 0
   1c1ec:	84 83       	std	Z+4, r24	; 0x04
   1c1ee:	95 83       	std	Z+5, r25	; 0x05
   1c1f0:	a6 83       	std	Z+6, r26	; 0x06
   1c1f2:	b7 83       	std	Z+7, r27	; 0x07
   1c1f4:	8c e4       	ldi	r24, 0x4C	; 76
   1c1f6:	95 e4       	ldi	r25, 0x45	; 69
   1c1f8:	a0 e0       	ldi	r26, 0x00	; 0
   1c1fa:	81 83       	std	Z+1, r24	; 0x01
   1c1fc:	92 83       	std	Z+2, r25	; 0x02
   1c1fe:	a3 83       	std	Z+3, r26	; 0x03
   1c200:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

    init_timers();
   1c204:	0e 94 f8 33 	call	0x67f0	; 0x67f0 <init_timers>

    sep();
   1c208:	0e 94 12 30 	call	0x6024	; 0x6024 <sep>
    printf("HP85 Disk and Device Emulator\n");
   1c20c:	8d e2       	ldi	r24, 0x2D	; 45
   1c20e:	95 e4       	ldi	r25, 0x45	; 69
   1c210:	a0 e0       	ldi	r26, 0x00	; 0
   1c212:	ed b7       	in	r30, 0x3d	; 61
   1c214:	fe b7       	in	r31, 0x3e	; 62
   1c216:	81 83       	std	Z+1, r24	; 0x01
   1c218:	92 83       	std	Z+2, r25	; 0x02
   1c21a:	a3 83       	std	Z+3, r26	; 0x03
   1c21c:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1c220:	80 e1       	ldi	r24, 0x10	; 16
   1c222:	95 e4       	ldi	r25, 0x45	; 69
   1c224:	a0 e0       	ldi	r26, 0x00	; 0
   1c226:	ed b7       	in	r30, 0x3d	; 61
   1c228:	fe b7       	in	r31, 0x3e	; 62
   1c22a:	81 83       	std	Z+1, r24	; 0x01
   1c22c:	92 83       	std	Z+2, r25	; 0x02
   1c22e:	a3 83       	std	Z+3, r26	; 0x03
   1c230:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf(" GNU version 3\n");
   1c234:	80 e0       	ldi	r24, 0x00	; 0
   1c236:	95 e4       	ldi	r25, 0x45	; 69
   1c238:	a0 e0       	ldi	r26, 0x00	; 0
   1c23a:	ed b7       	in	r30, 0x3d	; 61
   1c23c:	fe b7       	in	r31, 0x3e	; 62
   1c23e:	81 83       	std	Z+1, r24	; 0x01
   1c240:	92 83       	std	Z+2, r25	; 0x02
   1c242:	a3 83       	std	Z+3, r26	; 0x03
   1c244:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c248:	89 ed       	ldi	r24, 0xD9	; 217
   1c24a:	94 e4       	ldi	r25, 0x44	; 68
   1c24c:	a0 e0       	ldi	r26, 0x00	; 0
   1c24e:	ed b7       	in	r30, 0x3d	; 61
   1c250:	fe b7       	in	r31, 0x3e	; 62
   1c252:	81 83       	std	Z+1, r24	; 0x01
   1c254:	92 83       	std	Z+2, r25	; 0x02
   1c256:	a3 83       	std	Z+3, r26	; 0x03
   1c258:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c25c:	8b eb       	ldi	r24, 0xBB	; 187
   1c25e:	96 e1       	ldi	r25, 0x16	; 22
   1c260:	ed b7       	in	r30, 0x3d	; 61
   1c262:	fe b7       	in	r31, 0x3e	; 62
   1c264:	95 83       	std	Z+5, r25	; 0x05
   1c266:	84 83       	std	Z+4, r24	; 0x04
   1c268:	8f eb       	ldi	r24, 0xBF	; 191
   1c26a:	94 e4       	ldi	r25, 0x44	; 68
   1c26c:	a0 e0       	ldi	r26, 0x00	; 0
   1c26e:	81 83       	std	Z+1, r24	; 0x01
   1c270:	92 83       	std	Z+2, r25	; 0x02
   1c272:	a3 83       	std	Z+3, r26	; 0x03
   1c274:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c278:	8f ed       	ldi	r24, 0xDF	; 223
   1c27a:	96 e1       	ldi	r25, 0x16	; 22
   1c27c:	ed b7       	in	r30, 0x3d	; 61
   1c27e:	fe b7       	in	r31, 0x3e	; 62
   1c280:	95 83       	std	Z+5, r25	; 0x05
   1c282:	84 83       	std	Z+4, r24	; 0x04
   1c284:	85 ea       	ldi	r24, 0xA5	; 165
   1c286:	94 e4       	ldi	r25, 0x44	; 68
   1c288:	a0 e0       	ldi	r26, 0x00	; 0
   1c28a:	81 83       	std	Z+1, r24	; 0x01
   1c28c:	92 83       	std	Z+2, r25	; 0x02
   1c28e:	a3 83       	std	Z+3, r26	; 0x03
   1c290:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

    sep();
   1c294:	0e 94 12 30 	call	0x6024	; 0x6024 <sep>
    PrintFree();
   1c298:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <PrintFree>

    sep();
   1c29c:	0e 94 12 30 	call	0x6024	; 0x6024 <sep>
    // delayms(200);                                 ///@brief Power up delay

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1c2a0:	8f e8       	ldi	r24, 0x8F	; 143
   1c2a2:	94 e4       	ldi	r25, 0x44	; 68
   1c2a4:	a0 e0       	ldi	r26, 0x00	; 0
   1c2a6:	ed b7       	in	r30, 0x3d	; 61
   1c2a8:	fe b7       	in	r31, 0x3e	; 62
   1c2aa:	81 83       	std	Z+1, r24	; 0x01
   1c2ac:	92 83       	std	Z+2, r25	; 0x02
   1c2ae:	a3 83       	std	Z+3, r26	; 0x03
   1c2b0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1c2b4:	4b e0       	ldi	r20, 0x0B	; 11
   1c2b6:	50 e0       	ldi	r21, 0x00	; 0
   1c2b8:	60 e2       	ldi	r22, 0x20	; 32
   1c2ba:	71 ea       	ldi	r23, 0xA1	; 161
   1c2bc:	87 e0       	ldi	r24, 0x07	; 7
   1c2be:	90 e0       	ldi	r25, 0x00	; 0
   1c2c0:	0e 94 84 24 	call	0x4908	; 0x4908 <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1c2c4:	89 e7       	ldi	r24, 0x79	; 121
   1c2c6:	94 e4       	ldi	r25, 0x44	; 68
   1c2c8:	a0 e0       	ldi	r26, 0x00	; 0
   1c2ca:	ed b7       	in	r30, 0x3d	; 61
   1c2cc:	fe b7       	in	r31, 0x3e	; 62
   1c2ce:	81 83       	std	Z+1, r24	; 0x01
   1c2d0:	92 83       	std	Z+2, r25	; 0x02
   1c2d2:	a3 83       	std	Z+3, r26	; 0x03
   1c2d4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
	i2c_init(100000);
   1c2d8:	60 ea       	ldi	r22, 0xA0	; 160
   1c2da:	76 e8       	ldi	r23, 0x86	; 134
   1c2dc:	81 e0       	ldi	r24, 0x01	; 1
   1c2de:	90 e0       	ldi	r25, 0x00	; 0
   1c2e0:	0e 94 21 2a 	call	0x5442	; 0x5442 <i2c_init>
    sep();
   1c2e4:	0e 94 12 30 	call	0x6024	; 0x6024 <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1c2e8:	87 e6       	ldi	r24, 0x67	; 103
   1c2ea:	94 e4       	ldi	r25, 0x44	; 68
   1c2ec:	a0 e0       	ldi	r26, 0x00	; 0
   1c2ee:	ed b7       	in	r30, 0x3d	; 61
   1c2f0:	fe b7       	in	r31, 0x3e	; 62
   1c2f2:	81 83       	std	Z+1, r24	; 0x01
   1c2f4:	92 83       	std	Z+2, r25	; 0x02
   1c2f6:	a3 83       	std	Z+3, r26	; 0x03
   1c2f8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    clock_clear();
   1c2fc:	0e 94 b5 33 	call	0x676a	; 0x676a <clock_clear>
    printf("Clock cleared\n");
   1c300:	88 e5       	ldi	r24, 0x58	; 88
   1c302:	94 e4       	ldi	r25, 0x44	; 68
   1c304:	a0 e0       	ldi	r26, 0x00	; 0
   1c306:	ed b7       	in	r30, 0x3d	; 61
   1c308:	fe b7       	in	r31, 0x3e	; 62
   1c30a:	81 83       	std	Z+1, r24	; 0x01
   1c30c:	92 83       	std	Z+2, r25	; 0x02
   1c30e:	a3 83       	std	Z+3, r26	; 0x03
   1c310:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1c314:	be 01       	movw	r22, r28
   1c316:	64 5d       	subi	r22, 0xD4	; 212
   1c318:	7f 4f       	sbci	r23, 0xFF	; 255
   1c31a:	80 e0       	ldi	r24, 0x00	; 0
   1c31c:	90 e0       	ldi	r25, 0x00	; 0
   1c31e:	0e 94 55 34 	call	0x68aa	; 0x68aa <clock_getres>
    printf("System Task Interrupt Rate: %ld Nano Seconds\n", (long) ts.tv_nsec);
   1c322:	88 a9       	ldd	r24, Y+48	; 0x30
   1c324:	99 a9       	ldd	r25, Y+49	; 0x31
   1c326:	aa a9       	ldd	r26, Y+50	; 0x32
   1c328:	bb a9       	ldd	r27, Y+51	; 0x33
   1c32a:	ed b7       	in	r30, 0x3d	; 61
   1c32c:	fe b7       	in	r31, 0x3e	; 62
   1c32e:	84 83       	std	Z+4, r24	; 0x04
   1c330:	95 83       	std	Z+5, r25	; 0x05
   1c332:	a6 83       	std	Z+6, r26	; 0x06
   1c334:	b7 83       	std	Z+7, r27	; 0x07
   1c336:	8a e2       	ldi	r24, 0x2A	; 42
   1c338:	94 e4       	ldi	r25, 0x44	; 68
   1c33a:	a0 e0       	ldi	r26, 0x00	; 0
   1c33c:	81 83       	std	Z+1, r24	; 0x01
   1c33e:	92 83       	std	Z+2, r25	; 0x02
   1c340:	a3 83       	std	Z+3, r26	; 0x03
   1c342:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

// Timezone offset we just use local time
    initialize_clock(0);
   1c346:	80 e0       	ldi	r24, 0x00	; 0
   1c348:	90 e0       	ldi	r25, 0x00	; 0
   1c34a:	0e 94 30 3b 	call	0x7660	; 0x7660 <initialize_clock>
    display_clock();
   1c34e:	0e 94 a7 3b 	call	0x774e	; 0x774e <display_clock>
    sep();
   1c352:	0e 94 12 30 	call	0x6024	; 0x6024 <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	lcd_setup();
   1c356:	a8 dc       	rcall	.-1712   	; 0x1bca8 <lcd_setup>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1c358:	82 e1       	ldi	r24, 0x12	; 18
   1c35a:	94 e4       	ldi	r25, 0x44	; 68
   1c35c:	a0 e0       	ldi	r26, 0x00	; 0
   1c35e:	ed b7       	in	r30, 0x3d	; 61
   1c360:	fe b7       	in	r31, 0x3e	; 62
   1c362:	81 83       	std	Z+1, r24	; 0x01
   1c364:	92 83       	std	Z+2, r25	; 0x02
   1c366:	a3 83       	std	Z+3, r26	; 0x03
   1c368:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    if ( !mmc_init(1) )
   1c36c:	81 e0       	ldi	r24, 0x01	; 1
   1c36e:	90 e0       	ldi	r25, 0x00	; 0
   1c370:	0e 94 52 6e 	call	0xdca4	; 0xdca4 <mmc_init>
   1c374:	89 2b       	or	r24, r25
   1c376:	51 f4       	brne	.+20     	; 0x1c38c <main+0x224>
		printf("MMC initialized\n");
   1c378:	81 e0       	ldi	r24, 0x01	; 1
   1c37a:	94 e4       	ldi	r25, 0x44	; 68
   1c37c:	a0 e0       	ldi	r26, 0x00	; 0
   1c37e:	ed b7       	in	r30, 0x3d	; 61
   1c380:	fe b7       	in	r31, 0x3e	; 62
   1c382:	81 83       	std	Z+1, r24	; 0x01
   1c384:	92 83       	std	Z+2, r25	; 0x02
   1c386:	a3 83       	std	Z+3, r26	; 0x03
   1c388:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    sep();
   1c38c:	0e 94 12 30 	call	0x6024	; 0x6024 <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c390:	0e 94 94 84 	call	0x10928	; 0x10928 <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1c394:	8b ee       	ldi	r24, 0xEB	; 235
   1c396:	93 e4       	ldi	r25, 0x43	; 67
   1c398:	a0 e0       	ldi	r26, 0x00	; 0
   1c39a:	ed b7       	in	r30, 0x3d	; 61
   1c39c:	fe b7       	in	r31, 0x3e	; 62
   1c39e:	81 83       	std	Z+1, r24	; 0x01
   1c3a0:	92 83       	std	Z+2, r25	; 0x02
   1c3a2:	a3 83       	std	Z+3, r26	; 0x03
   1c3a4:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

///@ initialize Printer Capture
    printer_init();
   1c3a8:	0e 94 60 bb 	call	0x176c0	; 0x176c0 <printer_init>
    printf("Printer initialized\n");
   1c3ac:	86 ed       	ldi	r24, 0xD6	; 214
   1c3ae:	93 e4       	ldi	r25, 0x43	; 67
   1c3b0:	a0 e0       	ldi	r26, 0x00	; 0
   1c3b2:	ed b7       	in	r30, 0x3d	; 61
   1c3b4:	fe b7       	in	r31, 0x3e	; 62
   1c3b6:	81 83       	std	Z+1, r24	; 0x01
   1c3b8:	92 83       	std	Z+2, r25	; 0x02
   1c3ba:	a3 83       	std	Z+3, r26	; 0x03
   1c3bc:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1c3c0:	84 ec       	ldi	r24, 0xC4	; 196
   1c3c2:	93 e4       	ldi	r25, 0x43	; 67
   1c3c4:	a0 e0       	ldi	r26, 0x00	; 0
   1c3c6:	ed b7       	in	r30, 0x3d	; 61
   1c3c8:	fe b7       	in	r31, 0x3e	; 62
   1c3ca:	81 83       	std	Z+1, r24	; 0x01
   1c3cc:	92 83       	std	Z+2, r25	; 0x02
   1c3ce:	a3 83       	std	Z+3, r26	; 0x03
   1c3d0:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    gpib_timer_init();
   1c3d4:	0e 94 a8 82 	call	0x10550	; 0x10550 <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1c3d8:	8c ea       	ldi	r24, 0xAC	; 172
   1c3da:	93 e4       	ldi	r25, 0x43	; 67
   1c3dc:	a0 e0       	ldi	r26, 0x00	; 0
   1c3de:	ed b7       	in	r30, 0x3d	; 61
   1c3e0:	fe b7       	in	r31, 0x3e	; 62
   1c3e2:	81 83       	std	Z+1, r24	; 0x01
   1c3e4:	92 83       	std	Z+2, r25	; 0x02
   1c3e6:	a3 83       	std	Z+3, r26	; 0x03
   1c3e8:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1c3ec:	0e 94 2b 8b 	call	0x11656	; 0x11656 <gpib_file_init>
    printf("GPIB File init done\n");
   1c3f0:	87 e9       	ldi	r24, 0x97	; 151
   1c3f2:	93 e4       	ldi	r25, 0x43	; 67
   1c3f4:	a0 e0       	ldi	r26, 0x00	; 0
   1c3f6:	ed b7       	in	r30, 0x3d	; 61
   1c3f8:	fe b7       	in	r31, 0x3e	; 62
   1c3fa:	81 83       	std	Z+1, r24	; 0x01
   1c3fc:	92 83       	std	Z+2, r25	; 0x02
   1c3fe:	a3 83       	std	Z+3, r26	; 0x03
   1c400:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1c404:	0e 94 fc 84 	call	0x109f8	; 0x109f8 <gpib_state_init>
    printf("GPIB State init done\n");
   1c408:	81 e8       	ldi	r24, 0x81	; 129
   1c40a:	93 e4       	ldi	r25, 0x43	; 67
   1c40c:	a0 e0       	ldi	r26, 0x00	; 0
   1c40e:	ed b7       	in	r30, 0x3d	; 61
   1c410:	fe b7       	in	r31, 0x3e	; 62
   1c412:	81 83       	std	Z+1, r24	; 0x01
   1c414:	92 83       	std	Z+2, r25	; 0x02
   1c416:	a3 83       	std	Z+3, r26	; 0x03
   1c418:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    sep();
   1c41c:	0e 94 12 30 	call	0x6024	; 0x6024 <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1c420:	80 e0       	ldi	r24, 0x00	; 0
   1c422:	90 e0       	ldi	r25, 0x00	; 0
   1c424:	0e 94 bb 92 	call	0x12576	; 0x12576 <display_Addresses>
    sep();
   1c428:	0e 94 12 30 	call	0x6024	; 0x6024 <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1c42c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1c430:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1c434:	ed b7       	in	r30, 0x3d	; 61
   1c436:	fe b7       	in	r31, 0x3e	; 62
   1c438:	95 83       	std	Z+5, r25	; 0x05
   1c43a:	84 83       	std	Z+4, r24	; 0x04
   1c43c:	8b e6       	ldi	r24, 0x6B	; 107
   1c43e:	93 e4       	ldi	r25, 0x43	; 67
   1c440:	a0 e0       	ldi	r26, 0x00	; 0
   1c442:	81 83       	std	Z+1, r24	; 0x01
   1c444:	92 83       	std	Z+2, r25	; 0x02
   1c446:	a3 83       	std	Z+3, r26	; 0x03
   1c448:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
    sep();
   1c44c:	0e 94 12 30 	call	0x6024	; 0x6024 <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1c450:	0e 94 53 9e 	call	0x13ca6	; 0x13ca6 <format_drives>

#ifdef LCD_SUPPORT
	sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1c454:	83 e0       	ldi	r24, 0x03	; 3
   1c456:	0e 94 30 96 	call	0x12c60	; 0x12c60 <count_drive_types>
   1c45a:	8c 01       	movw	r16, r24
   1c45c:	81 e0       	ldi	r24, 0x01	; 1
   1c45e:	0e 94 30 96 	call	0x12c60	; 0x12c60 <count_drive_types>
   1c462:	ed b7       	in	r30, 0x3d	; 61
   1c464:	fe b7       	in	r31, 0x3e	; 62
   1c466:	91 87       	std	Z+9, r25	; 0x09
   1c468:	80 87       	std	Z+8, r24	; 0x08
   1c46a:	17 83       	std	Z+7, r17	; 0x07
   1c46c:	06 83       	std	Z+6, r16	; 0x06
   1c46e:	8a e5       	ldi	r24, 0x5A	; 90
   1c470:	93 e4       	ldi	r25, 0x43	; 67
   1c472:	a0 e0       	ldi	r26, 0x00	; 0
   1c474:	83 83       	std	Z+3, r24	; 0x03
   1c476:	94 83       	std	Z+4, r25	; 0x04
   1c478:	a5 83       	std	Z+5, r26	; 0x05
   1c47a:	8e 01       	movw	r16, r28
   1c47c:	04 5f       	subi	r16, 0xF4	; 244
   1c47e:	1f 4f       	sbci	r17, 0xFF	; 255
   1c480:	12 83       	std	Z+2, r17	; 0x02
   1c482:	01 83       	std	Z+1, r16	; 0x01
   1c484:	0e 94 ef 44 	call	0x89de	; 0x89de <sprintf_P>
		(int) count_drive_types(SS80_TYPE),
		(int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1c488:	ed b7       	in	r30, 0x3d	; 61
   1c48a:	fe b7       	in	r31, 0x3e	; 62
   1c48c:	17 83       	std	Z+7, r17	; 0x07
   1c48e:	06 83       	std	Z+6, r16	; 0x06
   1c490:	84 e5       	ldi	r24, 0x54	; 84
   1c492:	93 e4       	ldi	r25, 0x43	; 67
   1c494:	a0 e0       	ldi	r26, 0x00	; 0
   1c496:	83 83       	std	Z+3, r24	; 0x03
   1c498:	94 83       	std	Z+4, r25	; 0x04
   1c49a:	a5 83       	std	Z+5, r26	; 0x05
   1c49c:	8c e0       	ldi	r24, 0x0C	; 12
   1c49e:	93 e0       	ldi	r25, 0x03	; 3
   1c4a0:	92 83       	std	Z+2, r25	; 0x02
   1c4a2:	81 83       	std	Z+1, r24	; 0x01
   1c4a4:	0e 94 ef 44 	call	0x89de	; 0x89de <sprintf_P>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1c4a8:	8f e0       	ldi	r24, 0x0F	; 15
   1c4aa:	97 e1       	ldi	r25, 0x17	; 23
   1c4ac:	ed b7       	in	r30, 0x3d	; 61
   1c4ae:	fe b7       	in	r31, 0x3e	; 62
   1c4b0:	97 83       	std	Z+7, r25	; 0x07
   1c4b2:	86 83       	std	Z+6, r24	; 0x06
   1c4b4:	8e e4       	ldi	r24, 0x4E	; 78
   1c4b6:	93 e4       	ldi	r25, 0x43	; 67
   1c4b8:	a0 e0       	ldi	r26, 0x00	; 0
   1c4ba:	83 83       	std	Z+3, r24	; 0x03
   1c4bc:	94 83       	std	Z+4, r25	; 0x04
   1c4be:	a5 83       	std	Z+5, r26	; 0x05
   1c4c0:	85 ef       	ldi	r24, 0xF5	; 245
   1c4c2:	92 e0       	ldi	r25, 0x02	; 2
   1c4c4:	92 83       	std	Z+2, r25	; 0x02
   1c4c6:	81 83       	std	Z+1, r24	; 0x01
   1c4c8:	0e 94 ef 44 	call	0x89de	; 0x89de <sprintf_P>

	i2c_task_run();
   1c4cc:	0e 94 b7 2a 	call	0x556e	; 0x556e <i2c_task_run>
	delayms(1000);
   1c4d0:	68 ee       	ldi	r22, 0xE8	; 232
   1c4d2:	73 e0       	ldi	r23, 0x03	; 3
   1c4d4:	80 e0       	ldi	r24, 0x00	; 0
   1c4d6:	90 e0       	ldi	r25, 0x00	; 0
   1c4d8:	0e 94 5d 26 	call	0x4cba	; 0x4cba <delayms>
    if(!i2c_task.done || i2c_task.error )
   1c4dc:	80 91 76 17 	lds	r24, 0x1776	; 0x801776 <i2c_task+0x2>
   1c4e0:	88 23       	and	r24, r24
   1c4e2:	21 f0       	breq	.+8      	; 0x1c4ec <main+0x384>
   1c4e4:	80 91 77 17 	lds	r24, 0x1777	; 0x801777 <i2c_task+0x3>
   1c4e8:	88 23       	and	r24, r24
   1c4ea:	61 f0       	breq	.+24     	; 0x1c504 <main+0x39c>
	{
		i2c_display_task_errors();
   1c4ec:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <i2c_display_task_errors>
		printf("I2C LCD is NOT attached!\n");
   1c4f0:	84 e3       	ldi	r24, 0x34	; 52
   1c4f2:	93 e4       	ldi	r25, 0x43	; 67
   1c4f4:	a0 e0       	ldi	r26, 0x00	; 0
   1c4f6:	ed b7       	in	r30, 0x3d	; 61
   1c4f8:	fe b7       	in	r31, 0x3e	; 62
   1c4fa:	81 83       	std	Z+1, r24	; 0x01
   1c4fc:	92 83       	std	Z+2, r25	; 0x02
   1c4fe:	a3 83       	std	Z+3, r26	; 0x03
   1c500:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
	}
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1c504:	80 e2       	ldi	r24, 0x20	; 32
   1c506:	93 e4       	ldi	r25, 0x43	; 67
   1c508:	a0 e0       	ldi	r26, 0x00	; 0
   1c50a:	ed b7       	in	r30, 0x3d	; 61
   1c50c:	fe b7       	in	r31, 0x3e	; 62
   1c50e:	81 83       	std	Z+1, r24	; 0x01
   1c510:	92 83       	std	Z+2, r25	; 0x02
   1c512:	a3 83       	std	Z+3, r26	; 0x03
   1c514:	0e 94 03 45 	call	0x8a06	; 0x8a06 <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        user_task(1);
   1c518:	81 e0       	ldi	r24, 0x01	; 1
   1c51a:	1c de       	rcall	.-968    	; 0x1c154 <user_task>
   1c51c:	fd cf       	rjmp	.-6      	; 0x1c518 <main+0x3b0>

0001c51e <__mulsi3>:
   1c51e:	db 01       	movw	r26, r22
   1c520:	8f 93       	push	r24
   1c522:	9f 93       	push	r25
   1c524:	8b d0       	rcall	.+278    	; 0x1c63c <__muluhisi3>
   1c526:	bf 91       	pop	r27
   1c528:	af 91       	pop	r26
   1c52a:	a2 9f       	mul	r26, r18
   1c52c:	80 0d       	add	r24, r0
   1c52e:	91 1d       	adc	r25, r1
   1c530:	a3 9f       	mul	r26, r19
   1c532:	90 0d       	add	r25, r0
   1c534:	b2 9f       	mul	r27, r18
   1c536:	90 0d       	add	r25, r0
   1c538:	11 24       	eor	r1, r1
   1c53a:	08 95       	ret

0001c53c <__udivmodqi4>:
   1c53c:	99 1b       	sub	r25, r25
   1c53e:	79 e0       	ldi	r23, 0x09	; 9
   1c540:	04 c0       	rjmp	.+8      	; 0x1c54a <__udivmodqi4_ep>

0001c542 <__udivmodqi4_loop>:
   1c542:	99 1f       	adc	r25, r25
   1c544:	96 17       	cp	r25, r22
   1c546:	08 f0       	brcs	.+2      	; 0x1c54a <__udivmodqi4_ep>
   1c548:	96 1b       	sub	r25, r22

0001c54a <__udivmodqi4_ep>:
   1c54a:	88 1f       	adc	r24, r24
   1c54c:	7a 95       	dec	r23
   1c54e:	c9 f7       	brne	.-14     	; 0x1c542 <__udivmodqi4_loop>
   1c550:	80 95       	com	r24
   1c552:	08 95       	ret

0001c554 <__udivmodhi4>:
   1c554:	aa 1b       	sub	r26, r26
   1c556:	bb 1b       	sub	r27, r27
   1c558:	51 e1       	ldi	r21, 0x11	; 17
   1c55a:	07 c0       	rjmp	.+14     	; 0x1c56a <__udivmodhi4_ep>

0001c55c <__udivmodhi4_loop>:
   1c55c:	aa 1f       	adc	r26, r26
   1c55e:	bb 1f       	adc	r27, r27
   1c560:	a6 17       	cp	r26, r22
   1c562:	b7 07       	cpc	r27, r23
   1c564:	10 f0       	brcs	.+4      	; 0x1c56a <__udivmodhi4_ep>
   1c566:	a6 1b       	sub	r26, r22
   1c568:	b7 0b       	sbc	r27, r23

0001c56a <__udivmodhi4_ep>:
   1c56a:	88 1f       	adc	r24, r24
   1c56c:	99 1f       	adc	r25, r25
   1c56e:	5a 95       	dec	r21
   1c570:	a9 f7       	brne	.-22     	; 0x1c55c <__udivmodhi4_loop>
   1c572:	80 95       	com	r24
   1c574:	90 95       	com	r25
   1c576:	bc 01       	movw	r22, r24
   1c578:	cd 01       	movw	r24, r26
   1c57a:	08 95       	ret

0001c57c <__divmodhi4>:
   1c57c:	97 fb       	bst	r25, 7
   1c57e:	07 2e       	mov	r0, r23
   1c580:	16 f4       	brtc	.+4      	; 0x1c586 <__divmodhi4+0xa>
   1c582:	00 94       	com	r0
   1c584:	06 d0       	rcall	.+12     	; 0x1c592 <__divmodhi4_neg1>
   1c586:	77 fd       	sbrc	r23, 7
   1c588:	08 d0       	rcall	.+16     	; 0x1c59a <__divmodhi4_neg2>
   1c58a:	e4 df       	rcall	.-56     	; 0x1c554 <__udivmodhi4>
   1c58c:	07 fc       	sbrc	r0, 7
   1c58e:	05 d0       	rcall	.+10     	; 0x1c59a <__divmodhi4_neg2>
   1c590:	3e f4       	brtc	.+14     	; 0x1c5a0 <__divmodhi4_exit>

0001c592 <__divmodhi4_neg1>:
   1c592:	90 95       	com	r25
   1c594:	81 95       	neg	r24
   1c596:	9f 4f       	sbci	r25, 0xFF	; 255
   1c598:	08 95       	ret

0001c59a <__divmodhi4_neg2>:
   1c59a:	70 95       	com	r23
   1c59c:	61 95       	neg	r22
   1c59e:	7f 4f       	sbci	r23, 0xFF	; 255

0001c5a0 <__divmodhi4_exit>:
   1c5a0:	08 95       	ret

0001c5a2 <__udivmodsi4>:
   1c5a2:	a1 e2       	ldi	r26, 0x21	; 33
   1c5a4:	1a 2e       	mov	r1, r26
   1c5a6:	aa 1b       	sub	r26, r26
   1c5a8:	bb 1b       	sub	r27, r27
   1c5aa:	fd 01       	movw	r30, r26
   1c5ac:	0d c0       	rjmp	.+26     	; 0x1c5c8 <__udivmodsi4_ep>

0001c5ae <__udivmodsi4_loop>:
   1c5ae:	aa 1f       	adc	r26, r26
   1c5b0:	bb 1f       	adc	r27, r27
   1c5b2:	ee 1f       	adc	r30, r30
   1c5b4:	ff 1f       	adc	r31, r31
   1c5b6:	a2 17       	cp	r26, r18
   1c5b8:	b3 07       	cpc	r27, r19
   1c5ba:	e4 07       	cpc	r30, r20
   1c5bc:	f5 07       	cpc	r31, r21
   1c5be:	20 f0       	brcs	.+8      	; 0x1c5c8 <__udivmodsi4_ep>
   1c5c0:	a2 1b       	sub	r26, r18
   1c5c2:	b3 0b       	sbc	r27, r19
   1c5c4:	e4 0b       	sbc	r30, r20
   1c5c6:	f5 0b       	sbc	r31, r21

0001c5c8 <__udivmodsi4_ep>:
   1c5c8:	66 1f       	adc	r22, r22
   1c5ca:	77 1f       	adc	r23, r23
   1c5cc:	88 1f       	adc	r24, r24
   1c5ce:	99 1f       	adc	r25, r25
   1c5d0:	1a 94       	dec	r1
   1c5d2:	69 f7       	brne	.-38     	; 0x1c5ae <__udivmodsi4_loop>
   1c5d4:	60 95       	com	r22
   1c5d6:	70 95       	com	r23
   1c5d8:	80 95       	com	r24
   1c5da:	90 95       	com	r25
   1c5dc:	9b 01       	movw	r18, r22
   1c5de:	ac 01       	movw	r20, r24
   1c5e0:	bd 01       	movw	r22, r26
   1c5e2:	cf 01       	movw	r24, r30
   1c5e4:	08 95       	ret

0001c5e6 <__divmodsi4>:
   1c5e6:	05 2e       	mov	r0, r21
   1c5e8:	97 fb       	bst	r25, 7
   1c5ea:	16 f4       	brtc	.+4      	; 0x1c5f0 <__divmodsi4+0xa>
   1c5ec:	00 94       	com	r0
   1c5ee:	0f d0       	rcall	.+30     	; 0x1c60e <__negsi2>
   1c5f0:	57 fd       	sbrc	r21, 7
   1c5f2:	05 d0       	rcall	.+10     	; 0x1c5fe <__divmodsi4_neg2>
   1c5f4:	d6 df       	rcall	.-84     	; 0x1c5a2 <__udivmodsi4>
   1c5f6:	07 fc       	sbrc	r0, 7
   1c5f8:	02 d0       	rcall	.+4      	; 0x1c5fe <__divmodsi4_neg2>
   1c5fa:	46 f4       	brtc	.+16     	; 0x1c60c <__divmodsi4_exit>
   1c5fc:	08 c0       	rjmp	.+16     	; 0x1c60e <__negsi2>

0001c5fe <__divmodsi4_neg2>:
   1c5fe:	50 95       	com	r21
   1c600:	40 95       	com	r20
   1c602:	30 95       	com	r19
   1c604:	21 95       	neg	r18
   1c606:	3f 4f       	sbci	r19, 0xFF	; 255
   1c608:	4f 4f       	sbci	r20, 0xFF	; 255
   1c60a:	5f 4f       	sbci	r21, 0xFF	; 255

0001c60c <__divmodsi4_exit>:
   1c60c:	08 95       	ret

0001c60e <__negsi2>:
   1c60e:	90 95       	com	r25
   1c610:	80 95       	com	r24
   1c612:	70 95       	com	r23
   1c614:	61 95       	neg	r22
   1c616:	7f 4f       	sbci	r23, 0xFF	; 255
   1c618:	8f 4f       	sbci	r24, 0xFF	; 255
   1c61a:	9f 4f       	sbci	r25, 0xFF	; 255
   1c61c:	08 95       	ret

0001c61e <__tablejump2__>:
   1c61e:	ee 0f       	add	r30, r30
   1c620:	ff 1f       	adc	r31, r31
   1c622:	00 24       	eor	r0, r0
   1c624:	00 1c       	adc	r0, r0
   1c626:	0b be       	out	0x3b, r0	; 59
   1c628:	07 90       	elpm	r0, Z+
   1c62a:	f6 91       	elpm	r31, Z
   1c62c:	e0 2d       	mov	r30, r0
   1c62e:	09 94       	ijmp

0001c630 <__usmulhisi3>:
   1c630:	6f d0       	rcall	.+222    	; 0x1c710 <__umulhisi3>

0001c632 <__usmulhisi3_tail>:
   1c632:	b7 ff       	sbrs	r27, 7
   1c634:	08 95       	ret
   1c636:	82 1b       	sub	r24, r18
   1c638:	93 0b       	sbc	r25, r19
   1c63a:	08 95       	ret

0001c63c <__muluhisi3>:
   1c63c:	69 d0       	rcall	.+210    	; 0x1c710 <__umulhisi3>
   1c63e:	a5 9f       	mul	r26, r21
   1c640:	90 0d       	add	r25, r0
   1c642:	b4 9f       	mul	r27, r20
   1c644:	90 0d       	add	r25, r0
   1c646:	a4 9f       	mul	r26, r20
   1c648:	80 0d       	add	r24, r0
   1c64a:	91 1d       	adc	r25, r1
   1c64c:	11 24       	eor	r1, r1
   1c64e:	08 95       	ret

0001c650 <__mulshisi3>:
   1c650:	b7 ff       	sbrs	r27, 7
   1c652:	f4 cf       	rjmp	.-24     	; 0x1c63c <__muluhisi3>

0001c654 <__mulohisi3>:
   1c654:	f3 df       	rcall	.-26     	; 0x1c63c <__muluhisi3>
   1c656:	82 1b       	sub	r24, r18
   1c658:	93 0b       	sbc	r25, r19
   1c65a:	08 95       	ret

0001c65c <__negdi2>:
   1c65c:	60 95       	com	r22
   1c65e:	70 95       	com	r23
   1c660:	80 95       	com	r24
   1c662:	90 95       	com	r25
   1c664:	30 95       	com	r19
   1c666:	40 95       	com	r20
   1c668:	50 95       	com	r21
   1c66a:	21 95       	neg	r18
   1c66c:	3f 4f       	sbci	r19, 0xFF	; 255
   1c66e:	4f 4f       	sbci	r20, 0xFF	; 255
   1c670:	5f 4f       	sbci	r21, 0xFF	; 255
   1c672:	6f 4f       	sbci	r22, 0xFF	; 255
   1c674:	7f 4f       	sbci	r23, 0xFF	; 255
   1c676:	8f 4f       	sbci	r24, 0xFF	; 255
   1c678:	9f 4f       	sbci	r25, 0xFF	; 255
   1c67a:	08 95       	ret

0001c67c <__prologue_saves__>:
   1c67c:	2f 92       	push	r2
   1c67e:	3f 92       	push	r3
   1c680:	4f 92       	push	r4
   1c682:	5f 92       	push	r5
   1c684:	6f 92       	push	r6
   1c686:	7f 92       	push	r7
   1c688:	8f 92       	push	r8
   1c68a:	9f 92       	push	r9
   1c68c:	af 92       	push	r10
   1c68e:	bf 92       	push	r11
   1c690:	cf 92       	push	r12
   1c692:	df 92       	push	r13
   1c694:	ef 92       	push	r14
   1c696:	ff 92       	push	r15
   1c698:	0f 93       	push	r16
   1c69a:	1f 93       	push	r17
   1c69c:	cf 93       	push	r28
   1c69e:	df 93       	push	r29
   1c6a0:	cd b7       	in	r28, 0x3d	; 61
   1c6a2:	de b7       	in	r29, 0x3e	; 62
   1c6a4:	ca 1b       	sub	r28, r26
   1c6a6:	db 0b       	sbc	r29, r27
   1c6a8:	0f b6       	in	r0, 0x3f	; 63
   1c6aa:	f8 94       	cli
   1c6ac:	de bf       	out	0x3e, r29	; 62
   1c6ae:	0f be       	out	0x3f, r0	; 63
   1c6b0:	cd bf       	out	0x3d, r28	; 61
   1c6b2:	09 94       	ijmp

0001c6b4 <__epilogue_restores__>:
   1c6b4:	2a 88       	ldd	r2, Y+18	; 0x12
   1c6b6:	39 88       	ldd	r3, Y+17	; 0x11
   1c6b8:	48 88       	ldd	r4, Y+16	; 0x10
   1c6ba:	5f 84       	ldd	r5, Y+15	; 0x0f
   1c6bc:	6e 84       	ldd	r6, Y+14	; 0x0e
   1c6be:	7d 84       	ldd	r7, Y+13	; 0x0d
   1c6c0:	8c 84       	ldd	r8, Y+12	; 0x0c
   1c6c2:	9b 84       	ldd	r9, Y+11	; 0x0b
   1c6c4:	aa 84       	ldd	r10, Y+10	; 0x0a
   1c6c6:	b9 84       	ldd	r11, Y+9	; 0x09
   1c6c8:	c8 84       	ldd	r12, Y+8	; 0x08
   1c6ca:	df 80       	ldd	r13, Y+7	; 0x07
   1c6cc:	ee 80       	ldd	r14, Y+6	; 0x06
   1c6ce:	fd 80       	ldd	r15, Y+5	; 0x05
   1c6d0:	0c 81       	ldd	r16, Y+4	; 0x04
   1c6d2:	1b 81       	ldd	r17, Y+3	; 0x03
   1c6d4:	aa 81       	ldd	r26, Y+2	; 0x02
   1c6d6:	b9 81       	ldd	r27, Y+1	; 0x01
   1c6d8:	ce 0f       	add	r28, r30
   1c6da:	d1 1d       	adc	r29, r1
   1c6dc:	0f b6       	in	r0, 0x3f	; 63
   1c6de:	f8 94       	cli
   1c6e0:	de bf       	out	0x3e, r29	; 62
   1c6e2:	0f be       	out	0x3f, r0	; 63
   1c6e4:	cd bf       	out	0x3d, r28	; 61
   1c6e6:	ed 01       	movw	r28, r26
   1c6e8:	08 95       	ret

0001c6ea <__xload_1>:
   1c6ea:	57 fd       	sbrc	r21, 7
   1c6ec:	03 c0       	rjmp	.+6      	; 0x1c6f4 <__xload_1+0xa>
   1c6ee:	5b bf       	out	0x3b, r21	; 59
   1c6f0:	67 91       	elpm	r22, Z+
   1c6f2:	08 95       	ret
   1c6f4:	60 81       	ld	r22, Z
   1c6f6:	08 95       	ret

0001c6f8 <__cmpdi2_s8>:
   1c6f8:	00 24       	eor	r0, r0
   1c6fa:	a7 fd       	sbrc	r26, 7
   1c6fc:	00 94       	com	r0
   1c6fe:	2a 17       	cp	r18, r26
   1c700:	30 05       	cpc	r19, r0
   1c702:	40 05       	cpc	r20, r0
   1c704:	50 05       	cpc	r21, r0
   1c706:	60 05       	cpc	r22, r0
   1c708:	70 05       	cpc	r23, r0
   1c70a:	80 05       	cpc	r24, r0
   1c70c:	90 05       	cpc	r25, r0
   1c70e:	08 95       	ret

0001c710 <__umulhisi3>:
   1c710:	a2 9f       	mul	r26, r18
   1c712:	b0 01       	movw	r22, r0
   1c714:	b3 9f       	mul	r27, r19
   1c716:	c0 01       	movw	r24, r0
   1c718:	a3 9f       	mul	r26, r19
   1c71a:	70 0d       	add	r23, r0
   1c71c:	81 1d       	adc	r24, r1
   1c71e:	11 24       	eor	r1, r1
   1c720:	91 1d       	adc	r25, r1
   1c722:	b2 9f       	mul	r27, r18
   1c724:	70 0d       	add	r23, r0
   1c726:	81 1d       	adc	r24, r1
   1c728:	11 24       	eor	r1, r1
   1c72a:	91 1d       	adc	r25, r1
   1c72c:	08 95       	ret

0001c72e <__subsf3>:
   1c72e:	50 58       	subi	r21, 0x80	; 128

0001c730 <__addsf3>:
   1c730:	bb 27       	eor	r27, r27
   1c732:	aa 27       	eor	r26, r26
   1c734:	0e d0       	rcall	.+28     	; 0x1c752 <__addsf3x>
   1c736:	75 c1       	rjmp	.+746    	; 0x1ca22 <__fp_round>
   1c738:	66 d1       	rcall	.+716    	; 0x1ca06 <__fp_pscA>
   1c73a:	30 f0       	brcs	.+12     	; 0x1c748 <__addsf3+0x18>
   1c73c:	6b d1       	rcall	.+726    	; 0x1ca14 <__fp_pscB>
   1c73e:	20 f0       	brcs	.+8      	; 0x1c748 <__addsf3+0x18>
   1c740:	31 f4       	brne	.+12     	; 0x1c74e <__addsf3+0x1e>
   1c742:	9f 3f       	cpi	r25, 0xFF	; 255
   1c744:	11 f4       	brne	.+4      	; 0x1c74a <__addsf3+0x1a>
   1c746:	1e f4       	brtc	.+6      	; 0x1c74e <__addsf3+0x1e>
   1c748:	5b c1       	rjmp	.+694    	; 0x1ca00 <__fp_nan>
   1c74a:	0e f4       	brtc	.+2      	; 0x1c74e <__addsf3+0x1e>
   1c74c:	e0 95       	com	r30
   1c74e:	e7 fb       	bst	r30, 7
   1c750:	51 c1       	rjmp	.+674    	; 0x1c9f4 <__fp_inf>

0001c752 <__addsf3x>:
   1c752:	e9 2f       	mov	r30, r25
   1c754:	77 d1       	rcall	.+750    	; 0x1ca44 <__fp_split3>
   1c756:	80 f3       	brcs	.-32     	; 0x1c738 <__addsf3+0x8>
   1c758:	ba 17       	cp	r27, r26
   1c75a:	62 07       	cpc	r22, r18
   1c75c:	73 07       	cpc	r23, r19
   1c75e:	84 07       	cpc	r24, r20
   1c760:	95 07       	cpc	r25, r21
   1c762:	18 f0       	brcs	.+6      	; 0x1c76a <__addsf3x+0x18>
   1c764:	71 f4       	brne	.+28     	; 0x1c782 <__addsf3x+0x30>
   1c766:	9e f5       	brtc	.+102    	; 0x1c7ce <__addsf3x+0x7c>
   1c768:	8f c1       	rjmp	.+798    	; 0x1ca88 <__fp_zero>
   1c76a:	0e f4       	brtc	.+2      	; 0x1c76e <__addsf3x+0x1c>
   1c76c:	e0 95       	com	r30
   1c76e:	0b 2e       	mov	r0, r27
   1c770:	ba 2f       	mov	r27, r26
   1c772:	a0 2d       	mov	r26, r0
   1c774:	0b 01       	movw	r0, r22
   1c776:	b9 01       	movw	r22, r18
   1c778:	90 01       	movw	r18, r0
   1c77a:	0c 01       	movw	r0, r24
   1c77c:	ca 01       	movw	r24, r20
   1c77e:	a0 01       	movw	r20, r0
   1c780:	11 24       	eor	r1, r1
   1c782:	ff 27       	eor	r31, r31
   1c784:	59 1b       	sub	r21, r25
   1c786:	99 f0       	breq	.+38     	; 0x1c7ae <__addsf3x+0x5c>
   1c788:	59 3f       	cpi	r21, 0xF9	; 249
   1c78a:	50 f4       	brcc	.+20     	; 0x1c7a0 <__addsf3x+0x4e>
   1c78c:	50 3e       	cpi	r21, 0xE0	; 224
   1c78e:	68 f1       	brcs	.+90     	; 0x1c7ea <__addsf3x+0x98>
   1c790:	1a 16       	cp	r1, r26
   1c792:	f0 40       	sbci	r31, 0x00	; 0
   1c794:	a2 2f       	mov	r26, r18
   1c796:	23 2f       	mov	r18, r19
   1c798:	34 2f       	mov	r19, r20
   1c79a:	44 27       	eor	r20, r20
   1c79c:	58 5f       	subi	r21, 0xF8	; 248
   1c79e:	f3 cf       	rjmp	.-26     	; 0x1c786 <__addsf3x+0x34>
   1c7a0:	46 95       	lsr	r20
   1c7a2:	37 95       	ror	r19
   1c7a4:	27 95       	ror	r18
   1c7a6:	a7 95       	ror	r26
   1c7a8:	f0 40       	sbci	r31, 0x00	; 0
   1c7aa:	53 95       	inc	r21
   1c7ac:	c9 f7       	brne	.-14     	; 0x1c7a0 <__addsf3x+0x4e>
   1c7ae:	7e f4       	brtc	.+30     	; 0x1c7ce <__addsf3x+0x7c>
   1c7b0:	1f 16       	cp	r1, r31
   1c7b2:	ba 0b       	sbc	r27, r26
   1c7b4:	62 0b       	sbc	r22, r18
   1c7b6:	73 0b       	sbc	r23, r19
   1c7b8:	84 0b       	sbc	r24, r20
   1c7ba:	ba f0       	brmi	.+46     	; 0x1c7ea <__addsf3x+0x98>
   1c7bc:	91 50       	subi	r25, 0x01	; 1
   1c7be:	a1 f0       	breq	.+40     	; 0x1c7e8 <__addsf3x+0x96>
   1c7c0:	ff 0f       	add	r31, r31
   1c7c2:	bb 1f       	adc	r27, r27
   1c7c4:	66 1f       	adc	r22, r22
   1c7c6:	77 1f       	adc	r23, r23
   1c7c8:	88 1f       	adc	r24, r24
   1c7ca:	c2 f7       	brpl	.-16     	; 0x1c7bc <__addsf3x+0x6a>
   1c7cc:	0e c0       	rjmp	.+28     	; 0x1c7ea <__addsf3x+0x98>
   1c7ce:	ba 0f       	add	r27, r26
   1c7d0:	62 1f       	adc	r22, r18
   1c7d2:	73 1f       	adc	r23, r19
   1c7d4:	84 1f       	adc	r24, r20
   1c7d6:	48 f4       	brcc	.+18     	; 0x1c7ea <__addsf3x+0x98>
   1c7d8:	87 95       	ror	r24
   1c7da:	77 95       	ror	r23
   1c7dc:	67 95       	ror	r22
   1c7de:	b7 95       	ror	r27
   1c7e0:	f7 95       	ror	r31
   1c7e2:	9e 3f       	cpi	r25, 0xFE	; 254
   1c7e4:	08 f0       	brcs	.+2      	; 0x1c7e8 <__addsf3x+0x96>
   1c7e6:	b3 cf       	rjmp	.-154    	; 0x1c74e <__addsf3+0x1e>
   1c7e8:	93 95       	inc	r25
   1c7ea:	88 0f       	add	r24, r24
   1c7ec:	08 f0       	brcs	.+2      	; 0x1c7f0 <__addsf3x+0x9e>
   1c7ee:	99 27       	eor	r25, r25
   1c7f0:	ee 0f       	add	r30, r30
   1c7f2:	97 95       	ror	r25
   1c7f4:	87 95       	ror	r24
   1c7f6:	08 95       	ret

0001c7f8 <__cmpsf2>:
   1c7f8:	d9 d0       	rcall	.+434    	; 0x1c9ac <__fp_cmp>
   1c7fa:	08 f4       	brcc	.+2      	; 0x1c7fe <__cmpsf2+0x6>
   1c7fc:	81 e0       	ldi	r24, 0x01	; 1
   1c7fe:	08 95       	ret

0001c800 <__divsf3>:
   1c800:	0c d0       	rcall	.+24     	; 0x1c81a <__divsf3x>
   1c802:	0f c1       	rjmp	.+542    	; 0x1ca22 <__fp_round>
   1c804:	07 d1       	rcall	.+526    	; 0x1ca14 <__fp_pscB>
   1c806:	40 f0       	brcs	.+16     	; 0x1c818 <__divsf3+0x18>
   1c808:	fe d0       	rcall	.+508    	; 0x1ca06 <__fp_pscA>
   1c80a:	30 f0       	brcs	.+12     	; 0x1c818 <__divsf3+0x18>
   1c80c:	21 f4       	brne	.+8      	; 0x1c816 <__divsf3+0x16>
   1c80e:	5f 3f       	cpi	r21, 0xFF	; 255
   1c810:	19 f0       	breq	.+6      	; 0x1c818 <__divsf3+0x18>
   1c812:	f0 c0       	rjmp	.+480    	; 0x1c9f4 <__fp_inf>
   1c814:	51 11       	cpse	r21, r1
   1c816:	39 c1       	rjmp	.+626    	; 0x1ca8a <__fp_szero>
   1c818:	f3 c0       	rjmp	.+486    	; 0x1ca00 <__fp_nan>

0001c81a <__divsf3x>:
   1c81a:	14 d1       	rcall	.+552    	; 0x1ca44 <__fp_split3>
   1c81c:	98 f3       	brcs	.-26     	; 0x1c804 <__divsf3+0x4>

0001c81e <__divsf3_pse>:
   1c81e:	99 23       	and	r25, r25
   1c820:	c9 f3       	breq	.-14     	; 0x1c814 <__divsf3+0x14>
   1c822:	55 23       	and	r21, r21
   1c824:	b1 f3       	breq	.-20     	; 0x1c812 <__divsf3+0x12>
   1c826:	95 1b       	sub	r25, r21
   1c828:	55 0b       	sbc	r21, r21
   1c82a:	bb 27       	eor	r27, r27
   1c82c:	aa 27       	eor	r26, r26
   1c82e:	62 17       	cp	r22, r18
   1c830:	73 07       	cpc	r23, r19
   1c832:	84 07       	cpc	r24, r20
   1c834:	38 f0       	brcs	.+14     	; 0x1c844 <__divsf3_pse+0x26>
   1c836:	9f 5f       	subi	r25, 0xFF	; 255
   1c838:	5f 4f       	sbci	r21, 0xFF	; 255
   1c83a:	22 0f       	add	r18, r18
   1c83c:	33 1f       	adc	r19, r19
   1c83e:	44 1f       	adc	r20, r20
   1c840:	aa 1f       	adc	r26, r26
   1c842:	a9 f3       	breq	.-22     	; 0x1c82e <__divsf3_pse+0x10>
   1c844:	33 d0       	rcall	.+102    	; 0x1c8ac <__divsf3_pse+0x8e>
   1c846:	0e 2e       	mov	r0, r30
   1c848:	3a f0       	brmi	.+14     	; 0x1c858 <__divsf3_pse+0x3a>
   1c84a:	e0 e8       	ldi	r30, 0x80	; 128
   1c84c:	30 d0       	rcall	.+96     	; 0x1c8ae <__divsf3_pse+0x90>
   1c84e:	91 50       	subi	r25, 0x01	; 1
   1c850:	50 40       	sbci	r21, 0x00	; 0
   1c852:	e6 95       	lsr	r30
   1c854:	00 1c       	adc	r0, r0
   1c856:	ca f7       	brpl	.-14     	; 0x1c84a <__divsf3_pse+0x2c>
   1c858:	29 d0       	rcall	.+82     	; 0x1c8ac <__divsf3_pse+0x8e>
   1c85a:	fe 2f       	mov	r31, r30
   1c85c:	27 d0       	rcall	.+78     	; 0x1c8ac <__divsf3_pse+0x8e>
   1c85e:	66 0f       	add	r22, r22
   1c860:	77 1f       	adc	r23, r23
   1c862:	88 1f       	adc	r24, r24
   1c864:	bb 1f       	adc	r27, r27
   1c866:	26 17       	cp	r18, r22
   1c868:	37 07       	cpc	r19, r23
   1c86a:	48 07       	cpc	r20, r24
   1c86c:	ab 07       	cpc	r26, r27
   1c86e:	b0 e8       	ldi	r27, 0x80	; 128
   1c870:	09 f0       	breq	.+2      	; 0x1c874 <__divsf3_pse+0x56>
   1c872:	bb 0b       	sbc	r27, r27
   1c874:	80 2d       	mov	r24, r0
   1c876:	bf 01       	movw	r22, r30
   1c878:	ff 27       	eor	r31, r31
   1c87a:	93 58       	subi	r25, 0x83	; 131
   1c87c:	5f 4f       	sbci	r21, 0xFF	; 255
   1c87e:	2a f0       	brmi	.+10     	; 0x1c88a <__divsf3_pse+0x6c>
   1c880:	9e 3f       	cpi	r25, 0xFE	; 254
   1c882:	51 05       	cpc	r21, r1
   1c884:	68 f0       	brcs	.+26     	; 0x1c8a0 <__divsf3_pse+0x82>
   1c886:	b6 c0       	rjmp	.+364    	; 0x1c9f4 <__fp_inf>
   1c888:	00 c1       	rjmp	.+512    	; 0x1ca8a <__fp_szero>
   1c88a:	5f 3f       	cpi	r21, 0xFF	; 255
   1c88c:	ec f3       	brlt	.-6      	; 0x1c888 <__divsf3_pse+0x6a>
   1c88e:	98 3e       	cpi	r25, 0xE8	; 232
   1c890:	dc f3       	brlt	.-10     	; 0x1c888 <__divsf3_pse+0x6a>
   1c892:	86 95       	lsr	r24
   1c894:	77 95       	ror	r23
   1c896:	67 95       	ror	r22
   1c898:	b7 95       	ror	r27
   1c89a:	f7 95       	ror	r31
   1c89c:	9f 5f       	subi	r25, 0xFF	; 255
   1c89e:	c9 f7       	brne	.-14     	; 0x1c892 <__divsf3_pse+0x74>
   1c8a0:	88 0f       	add	r24, r24
   1c8a2:	91 1d       	adc	r25, r1
   1c8a4:	96 95       	lsr	r25
   1c8a6:	87 95       	ror	r24
   1c8a8:	97 f9       	bld	r25, 7
   1c8aa:	08 95       	ret
   1c8ac:	e1 e0       	ldi	r30, 0x01	; 1
   1c8ae:	66 0f       	add	r22, r22
   1c8b0:	77 1f       	adc	r23, r23
   1c8b2:	88 1f       	adc	r24, r24
   1c8b4:	bb 1f       	adc	r27, r27
   1c8b6:	62 17       	cp	r22, r18
   1c8b8:	73 07       	cpc	r23, r19
   1c8ba:	84 07       	cpc	r24, r20
   1c8bc:	ba 07       	cpc	r27, r26
   1c8be:	20 f0       	brcs	.+8      	; 0x1c8c8 <__divsf3_pse+0xaa>
   1c8c0:	62 1b       	sub	r22, r18
   1c8c2:	73 0b       	sbc	r23, r19
   1c8c4:	84 0b       	sbc	r24, r20
   1c8c6:	ba 0b       	sbc	r27, r26
   1c8c8:	ee 1f       	adc	r30, r30
   1c8ca:	88 f7       	brcc	.-30     	; 0x1c8ae <__divsf3_pse+0x90>
   1c8cc:	e0 95       	com	r30
   1c8ce:	08 95       	ret

0001c8d0 <__fixsfsi>:
   1c8d0:	04 d0       	rcall	.+8      	; 0x1c8da <__fixunssfsi>
   1c8d2:	68 94       	set
   1c8d4:	b1 11       	cpse	r27, r1
   1c8d6:	d9 c0       	rjmp	.+434    	; 0x1ca8a <__fp_szero>
   1c8d8:	08 95       	ret

0001c8da <__fixunssfsi>:
   1c8da:	bc d0       	rcall	.+376    	; 0x1ca54 <__fp_splitA>
   1c8dc:	88 f0       	brcs	.+34     	; 0x1c900 <__fixunssfsi+0x26>
   1c8de:	9f 57       	subi	r25, 0x7F	; 127
   1c8e0:	90 f0       	brcs	.+36     	; 0x1c906 <__fixunssfsi+0x2c>
   1c8e2:	b9 2f       	mov	r27, r25
   1c8e4:	99 27       	eor	r25, r25
   1c8e6:	b7 51       	subi	r27, 0x17	; 23
   1c8e8:	a0 f0       	brcs	.+40     	; 0x1c912 <__fixunssfsi+0x38>
   1c8ea:	d1 f0       	breq	.+52     	; 0x1c920 <__fixunssfsi+0x46>
   1c8ec:	66 0f       	add	r22, r22
   1c8ee:	77 1f       	adc	r23, r23
   1c8f0:	88 1f       	adc	r24, r24
   1c8f2:	99 1f       	adc	r25, r25
   1c8f4:	1a f0       	brmi	.+6      	; 0x1c8fc <__fixunssfsi+0x22>
   1c8f6:	ba 95       	dec	r27
   1c8f8:	c9 f7       	brne	.-14     	; 0x1c8ec <__fixunssfsi+0x12>
   1c8fa:	12 c0       	rjmp	.+36     	; 0x1c920 <__fixunssfsi+0x46>
   1c8fc:	b1 30       	cpi	r27, 0x01	; 1
   1c8fe:	81 f0       	breq	.+32     	; 0x1c920 <__fixunssfsi+0x46>
   1c900:	c3 d0       	rcall	.+390    	; 0x1ca88 <__fp_zero>
   1c902:	b1 e0       	ldi	r27, 0x01	; 1
   1c904:	08 95       	ret
   1c906:	c0 c0       	rjmp	.+384    	; 0x1ca88 <__fp_zero>
   1c908:	67 2f       	mov	r22, r23
   1c90a:	78 2f       	mov	r23, r24
   1c90c:	88 27       	eor	r24, r24
   1c90e:	b8 5f       	subi	r27, 0xF8	; 248
   1c910:	39 f0       	breq	.+14     	; 0x1c920 <__fixunssfsi+0x46>
   1c912:	b9 3f       	cpi	r27, 0xF9	; 249
   1c914:	cc f3       	brlt	.-14     	; 0x1c908 <__fixunssfsi+0x2e>
   1c916:	86 95       	lsr	r24
   1c918:	77 95       	ror	r23
   1c91a:	67 95       	ror	r22
   1c91c:	b3 95       	inc	r27
   1c91e:	d9 f7       	brne	.-10     	; 0x1c916 <__fixunssfsi+0x3c>
   1c920:	3e f4       	brtc	.+14     	; 0x1c930 <__fixunssfsi+0x56>
   1c922:	90 95       	com	r25
   1c924:	80 95       	com	r24
   1c926:	70 95       	com	r23
   1c928:	61 95       	neg	r22
   1c92a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c92c:	8f 4f       	sbci	r24, 0xFF	; 255
   1c92e:	9f 4f       	sbci	r25, 0xFF	; 255
   1c930:	08 95       	ret

0001c932 <__floatunsisf>:
   1c932:	e8 94       	clt
   1c934:	09 c0       	rjmp	.+18     	; 0x1c948 <__floatsisf+0x12>

0001c936 <__floatsisf>:
   1c936:	97 fb       	bst	r25, 7
   1c938:	3e f4       	brtc	.+14     	; 0x1c948 <__floatsisf+0x12>
   1c93a:	90 95       	com	r25
   1c93c:	80 95       	com	r24
   1c93e:	70 95       	com	r23
   1c940:	61 95       	neg	r22
   1c942:	7f 4f       	sbci	r23, 0xFF	; 255
   1c944:	8f 4f       	sbci	r24, 0xFF	; 255
   1c946:	9f 4f       	sbci	r25, 0xFF	; 255
   1c948:	99 23       	and	r25, r25
   1c94a:	a9 f0       	breq	.+42     	; 0x1c976 <__floatsisf+0x40>
   1c94c:	f9 2f       	mov	r31, r25
   1c94e:	96 e9       	ldi	r25, 0x96	; 150
   1c950:	bb 27       	eor	r27, r27
   1c952:	93 95       	inc	r25
   1c954:	f6 95       	lsr	r31
   1c956:	87 95       	ror	r24
   1c958:	77 95       	ror	r23
   1c95a:	67 95       	ror	r22
   1c95c:	b7 95       	ror	r27
   1c95e:	f1 11       	cpse	r31, r1
   1c960:	f8 cf       	rjmp	.-16     	; 0x1c952 <__floatsisf+0x1c>
   1c962:	fa f4       	brpl	.+62     	; 0x1c9a2 <__floatsisf+0x6c>
   1c964:	bb 0f       	add	r27, r27
   1c966:	11 f4       	brne	.+4      	; 0x1c96c <__floatsisf+0x36>
   1c968:	60 ff       	sbrs	r22, 0
   1c96a:	1b c0       	rjmp	.+54     	; 0x1c9a2 <__floatsisf+0x6c>
   1c96c:	6f 5f       	subi	r22, 0xFF	; 255
   1c96e:	7f 4f       	sbci	r23, 0xFF	; 255
   1c970:	8f 4f       	sbci	r24, 0xFF	; 255
   1c972:	9f 4f       	sbci	r25, 0xFF	; 255
   1c974:	16 c0       	rjmp	.+44     	; 0x1c9a2 <__floatsisf+0x6c>
   1c976:	88 23       	and	r24, r24
   1c978:	11 f0       	breq	.+4      	; 0x1c97e <__floatsisf+0x48>
   1c97a:	96 e9       	ldi	r25, 0x96	; 150
   1c97c:	11 c0       	rjmp	.+34     	; 0x1c9a0 <__floatsisf+0x6a>
   1c97e:	77 23       	and	r23, r23
   1c980:	21 f0       	breq	.+8      	; 0x1c98a <__floatsisf+0x54>
   1c982:	9e e8       	ldi	r25, 0x8E	; 142
   1c984:	87 2f       	mov	r24, r23
   1c986:	76 2f       	mov	r23, r22
   1c988:	05 c0       	rjmp	.+10     	; 0x1c994 <__floatsisf+0x5e>
   1c98a:	66 23       	and	r22, r22
   1c98c:	71 f0       	breq	.+28     	; 0x1c9aa <__floatsisf+0x74>
   1c98e:	96 e8       	ldi	r25, 0x86	; 134
   1c990:	86 2f       	mov	r24, r22
   1c992:	70 e0       	ldi	r23, 0x00	; 0
   1c994:	60 e0       	ldi	r22, 0x00	; 0
   1c996:	2a f0       	brmi	.+10     	; 0x1c9a2 <__floatsisf+0x6c>
   1c998:	9a 95       	dec	r25
   1c99a:	66 0f       	add	r22, r22
   1c99c:	77 1f       	adc	r23, r23
   1c99e:	88 1f       	adc	r24, r24
   1c9a0:	da f7       	brpl	.-10     	; 0x1c998 <__floatsisf+0x62>
   1c9a2:	88 0f       	add	r24, r24
   1c9a4:	96 95       	lsr	r25
   1c9a6:	87 95       	ror	r24
   1c9a8:	97 f9       	bld	r25, 7
   1c9aa:	08 95       	ret

0001c9ac <__fp_cmp>:
   1c9ac:	99 0f       	add	r25, r25
   1c9ae:	00 08       	sbc	r0, r0
   1c9b0:	55 0f       	add	r21, r21
   1c9b2:	aa 0b       	sbc	r26, r26
   1c9b4:	e0 e8       	ldi	r30, 0x80	; 128
   1c9b6:	fe ef       	ldi	r31, 0xFE	; 254
   1c9b8:	16 16       	cp	r1, r22
   1c9ba:	17 06       	cpc	r1, r23
   1c9bc:	e8 07       	cpc	r30, r24
   1c9be:	f9 07       	cpc	r31, r25
   1c9c0:	c0 f0       	brcs	.+48     	; 0x1c9f2 <__fp_cmp+0x46>
   1c9c2:	12 16       	cp	r1, r18
   1c9c4:	13 06       	cpc	r1, r19
   1c9c6:	e4 07       	cpc	r30, r20
   1c9c8:	f5 07       	cpc	r31, r21
   1c9ca:	98 f0       	brcs	.+38     	; 0x1c9f2 <__fp_cmp+0x46>
   1c9cc:	62 1b       	sub	r22, r18
   1c9ce:	73 0b       	sbc	r23, r19
   1c9d0:	84 0b       	sbc	r24, r20
   1c9d2:	95 0b       	sbc	r25, r21
   1c9d4:	39 f4       	brne	.+14     	; 0x1c9e4 <__fp_cmp+0x38>
   1c9d6:	0a 26       	eor	r0, r26
   1c9d8:	61 f0       	breq	.+24     	; 0x1c9f2 <__fp_cmp+0x46>
   1c9da:	23 2b       	or	r18, r19
   1c9dc:	24 2b       	or	r18, r20
   1c9de:	25 2b       	or	r18, r21
   1c9e0:	21 f4       	brne	.+8      	; 0x1c9ea <__fp_cmp+0x3e>
   1c9e2:	08 95       	ret
   1c9e4:	0a 26       	eor	r0, r26
   1c9e6:	09 f4       	brne	.+2      	; 0x1c9ea <__fp_cmp+0x3e>
   1c9e8:	a1 40       	sbci	r26, 0x01	; 1
   1c9ea:	a6 95       	lsr	r26
   1c9ec:	8f ef       	ldi	r24, 0xFF	; 255
   1c9ee:	81 1d       	adc	r24, r1
   1c9f0:	81 1d       	adc	r24, r1
   1c9f2:	08 95       	ret

0001c9f4 <__fp_inf>:
   1c9f4:	97 f9       	bld	r25, 7
   1c9f6:	9f 67       	ori	r25, 0x7F	; 127
   1c9f8:	80 e8       	ldi	r24, 0x80	; 128
   1c9fa:	70 e0       	ldi	r23, 0x00	; 0
   1c9fc:	60 e0       	ldi	r22, 0x00	; 0
   1c9fe:	08 95       	ret

0001ca00 <__fp_nan>:
   1ca00:	9f ef       	ldi	r25, 0xFF	; 255
   1ca02:	80 ec       	ldi	r24, 0xC0	; 192
   1ca04:	08 95       	ret

0001ca06 <__fp_pscA>:
   1ca06:	00 24       	eor	r0, r0
   1ca08:	0a 94       	dec	r0
   1ca0a:	16 16       	cp	r1, r22
   1ca0c:	17 06       	cpc	r1, r23
   1ca0e:	18 06       	cpc	r1, r24
   1ca10:	09 06       	cpc	r0, r25
   1ca12:	08 95       	ret

0001ca14 <__fp_pscB>:
   1ca14:	00 24       	eor	r0, r0
   1ca16:	0a 94       	dec	r0
   1ca18:	12 16       	cp	r1, r18
   1ca1a:	13 06       	cpc	r1, r19
   1ca1c:	14 06       	cpc	r1, r20
   1ca1e:	05 06       	cpc	r0, r21
   1ca20:	08 95       	ret

0001ca22 <__fp_round>:
   1ca22:	09 2e       	mov	r0, r25
   1ca24:	03 94       	inc	r0
   1ca26:	00 0c       	add	r0, r0
   1ca28:	11 f4       	brne	.+4      	; 0x1ca2e <__fp_round+0xc>
   1ca2a:	88 23       	and	r24, r24
   1ca2c:	52 f0       	brmi	.+20     	; 0x1ca42 <__fp_round+0x20>
   1ca2e:	bb 0f       	add	r27, r27
   1ca30:	40 f4       	brcc	.+16     	; 0x1ca42 <__fp_round+0x20>
   1ca32:	bf 2b       	or	r27, r31
   1ca34:	11 f4       	brne	.+4      	; 0x1ca3a <__fp_round+0x18>
   1ca36:	60 ff       	sbrs	r22, 0
   1ca38:	04 c0       	rjmp	.+8      	; 0x1ca42 <__fp_round+0x20>
   1ca3a:	6f 5f       	subi	r22, 0xFF	; 255
   1ca3c:	7f 4f       	sbci	r23, 0xFF	; 255
   1ca3e:	8f 4f       	sbci	r24, 0xFF	; 255
   1ca40:	9f 4f       	sbci	r25, 0xFF	; 255
   1ca42:	08 95       	ret

0001ca44 <__fp_split3>:
   1ca44:	57 fd       	sbrc	r21, 7
   1ca46:	90 58       	subi	r25, 0x80	; 128
   1ca48:	44 0f       	add	r20, r20
   1ca4a:	55 1f       	adc	r21, r21
   1ca4c:	59 f0       	breq	.+22     	; 0x1ca64 <__fp_splitA+0x10>
   1ca4e:	5f 3f       	cpi	r21, 0xFF	; 255
   1ca50:	71 f0       	breq	.+28     	; 0x1ca6e <__fp_splitA+0x1a>
   1ca52:	47 95       	ror	r20

0001ca54 <__fp_splitA>:
   1ca54:	88 0f       	add	r24, r24
   1ca56:	97 fb       	bst	r25, 7
   1ca58:	99 1f       	adc	r25, r25
   1ca5a:	61 f0       	breq	.+24     	; 0x1ca74 <__fp_splitA+0x20>
   1ca5c:	9f 3f       	cpi	r25, 0xFF	; 255
   1ca5e:	79 f0       	breq	.+30     	; 0x1ca7e <__fp_splitA+0x2a>
   1ca60:	87 95       	ror	r24
   1ca62:	08 95       	ret
   1ca64:	12 16       	cp	r1, r18
   1ca66:	13 06       	cpc	r1, r19
   1ca68:	14 06       	cpc	r1, r20
   1ca6a:	55 1f       	adc	r21, r21
   1ca6c:	f2 cf       	rjmp	.-28     	; 0x1ca52 <__fp_split3+0xe>
   1ca6e:	46 95       	lsr	r20
   1ca70:	f1 df       	rcall	.-30     	; 0x1ca54 <__fp_splitA>
   1ca72:	08 c0       	rjmp	.+16     	; 0x1ca84 <__fp_splitA+0x30>
   1ca74:	16 16       	cp	r1, r22
   1ca76:	17 06       	cpc	r1, r23
   1ca78:	18 06       	cpc	r1, r24
   1ca7a:	99 1f       	adc	r25, r25
   1ca7c:	f1 cf       	rjmp	.-30     	; 0x1ca60 <__fp_splitA+0xc>
   1ca7e:	86 95       	lsr	r24
   1ca80:	71 05       	cpc	r23, r1
   1ca82:	61 05       	cpc	r22, r1
   1ca84:	08 94       	sec
   1ca86:	08 95       	ret

0001ca88 <__fp_zero>:
   1ca88:	e8 94       	clt

0001ca8a <__fp_szero>:
   1ca8a:	bb 27       	eor	r27, r27
   1ca8c:	66 27       	eor	r22, r22
   1ca8e:	77 27       	eor	r23, r23
   1ca90:	cb 01       	movw	r24, r22
   1ca92:	97 f9       	bld	r25, 7
   1ca94:	08 95       	ret

0001ca96 <__gesf2>:
   1ca96:	8a df       	rcall	.-236    	; 0x1c9ac <__fp_cmp>
   1ca98:	08 f4       	brcc	.+2      	; 0x1ca9c <__gesf2+0x6>
   1ca9a:	8f ef       	ldi	r24, 0xFF	; 255
   1ca9c:	08 95       	ret

0001ca9e <__mulsf3>:
   1ca9e:	0b d0       	rcall	.+22     	; 0x1cab6 <__mulsf3x>
   1caa0:	c0 cf       	rjmp	.-128    	; 0x1ca22 <__fp_round>
   1caa2:	b1 df       	rcall	.-158    	; 0x1ca06 <__fp_pscA>
   1caa4:	28 f0       	brcs	.+10     	; 0x1cab0 <__mulsf3+0x12>
   1caa6:	b6 df       	rcall	.-148    	; 0x1ca14 <__fp_pscB>
   1caa8:	18 f0       	brcs	.+6      	; 0x1cab0 <__mulsf3+0x12>
   1caaa:	95 23       	and	r25, r21
   1caac:	09 f0       	breq	.+2      	; 0x1cab0 <__mulsf3+0x12>
   1caae:	a2 cf       	rjmp	.-188    	; 0x1c9f4 <__fp_inf>
   1cab0:	a7 cf       	rjmp	.-178    	; 0x1ca00 <__fp_nan>
   1cab2:	11 24       	eor	r1, r1
   1cab4:	ea cf       	rjmp	.-44     	; 0x1ca8a <__fp_szero>

0001cab6 <__mulsf3x>:
   1cab6:	c6 df       	rcall	.-116    	; 0x1ca44 <__fp_split3>
   1cab8:	a0 f3       	brcs	.-24     	; 0x1caa2 <__mulsf3+0x4>

0001caba <__mulsf3_pse>:
   1caba:	95 9f       	mul	r25, r21
   1cabc:	d1 f3       	breq	.-12     	; 0x1cab2 <__mulsf3+0x14>
   1cabe:	95 0f       	add	r25, r21
   1cac0:	50 e0       	ldi	r21, 0x00	; 0
   1cac2:	55 1f       	adc	r21, r21
   1cac4:	62 9f       	mul	r22, r18
   1cac6:	f0 01       	movw	r30, r0
   1cac8:	72 9f       	mul	r23, r18
   1caca:	bb 27       	eor	r27, r27
   1cacc:	f0 0d       	add	r31, r0
   1cace:	b1 1d       	adc	r27, r1
   1cad0:	63 9f       	mul	r22, r19
   1cad2:	aa 27       	eor	r26, r26
   1cad4:	f0 0d       	add	r31, r0
   1cad6:	b1 1d       	adc	r27, r1
   1cad8:	aa 1f       	adc	r26, r26
   1cada:	64 9f       	mul	r22, r20
   1cadc:	66 27       	eor	r22, r22
   1cade:	b0 0d       	add	r27, r0
   1cae0:	a1 1d       	adc	r26, r1
   1cae2:	66 1f       	adc	r22, r22
   1cae4:	82 9f       	mul	r24, r18
   1cae6:	22 27       	eor	r18, r18
   1cae8:	b0 0d       	add	r27, r0
   1caea:	a1 1d       	adc	r26, r1
   1caec:	62 1f       	adc	r22, r18
   1caee:	73 9f       	mul	r23, r19
   1caf0:	b0 0d       	add	r27, r0
   1caf2:	a1 1d       	adc	r26, r1
   1caf4:	62 1f       	adc	r22, r18
   1caf6:	83 9f       	mul	r24, r19
   1caf8:	a0 0d       	add	r26, r0
   1cafa:	61 1d       	adc	r22, r1
   1cafc:	22 1f       	adc	r18, r18
   1cafe:	74 9f       	mul	r23, r20
   1cb00:	33 27       	eor	r19, r19
   1cb02:	a0 0d       	add	r26, r0
   1cb04:	61 1d       	adc	r22, r1
   1cb06:	23 1f       	adc	r18, r19
   1cb08:	84 9f       	mul	r24, r20
   1cb0a:	60 0d       	add	r22, r0
   1cb0c:	21 1d       	adc	r18, r1
   1cb0e:	82 2f       	mov	r24, r18
   1cb10:	76 2f       	mov	r23, r22
   1cb12:	6a 2f       	mov	r22, r26
   1cb14:	11 24       	eor	r1, r1
   1cb16:	9f 57       	subi	r25, 0x7F	; 127
   1cb18:	50 40       	sbci	r21, 0x00	; 0
   1cb1a:	8a f0       	brmi	.+34     	; 0x1cb3e <__mulsf3_pse+0x84>
   1cb1c:	e1 f0       	breq	.+56     	; 0x1cb56 <__mulsf3_pse+0x9c>
   1cb1e:	88 23       	and	r24, r24
   1cb20:	4a f0       	brmi	.+18     	; 0x1cb34 <__mulsf3_pse+0x7a>
   1cb22:	ee 0f       	add	r30, r30
   1cb24:	ff 1f       	adc	r31, r31
   1cb26:	bb 1f       	adc	r27, r27
   1cb28:	66 1f       	adc	r22, r22
   1cb2a:	77 1f       	adc	r23, r23
   1cb2c:	88 1f       	adc	r24, r24
   1cb2e:	91 50       	subi	r25, 0x01	; 1
   1cb30:	50 40       	sbci	r21, 0x00	; 0
   1cb32:	a9 f7       	brne	.-22     	; 0x1cb1e <__mulsf3_pse+0x64>
   1cb34:	9e 3f       	cpi	r25, 0xFE	; 254
   1cb36:	51 05       	cpc	r21, r1
   1cb38:	70 f0       	brcs	.+28     	; 0x1cb56 <__mulsf3_pse+0x9c>
   1cb3a:	5c cf       	rjmp	.-328    	; 0x1c9f4 <__fp_inf>
   1cb3c:	a6 cf       	rjmp	.-180    	; 0x1ca8a <__fp_szero>
   1cb3e:	5f 3f       	cpi	r21, 0xFF	; 255
   1cb40:	ec f3       	brlt	.-6      	; 0x1cb3c <__mulsf3_pse+0x82>
   1cb42:	98 3e       	cpi	r25, 0xE8	; 232
   1cb44:	dc f3       	brlt	.-10     	; 0x1cb3c <__mulsf3_pse+0x82>
   1cb46:	86 95       	lsr	r24
   1cb48:	77 95       	ror	r23
   1cb4a:	67 95       	ror	r22
   1cb4c:	b7 95       	ror	r27
   1cb4e:	f7 95       	ror	r31
   1cb50:	e7 95       	ror	r30
   1cb52:	9f 5f       	subi	r25, 0xFF	; 255
   1cb54:	c1 f7       	brne	.-16     	; 0x1cb46 <__mulsf3_pse+0x8c>
   1cb56:	fe 2b       	or	r31, r30
   1cb58:	88 0f       	add	r24, r24
   1cb5a:	91 1d       	adc	r25, r1
   1cb5c:	96 95       	lsr	r25
   1cb5e:	87 95       	ror	r24
   1cb60:	97 f9       	bld	r25, 7
   1cb62:	08 95       	ret

0001cb64 <round>:
   1cb64:	77 df       	rcall	.-274    	; 0x1ca54 <__fp_splitA>
   1cb66:	e0 f0       	brcs	.+56     	; 0x1cba0 <round+0x3c>
   1cb68:	9e 37       	cpi	r25, 0x7E	; 126
   1cb6a:	d8 f0       	brcs	.+54     	; 0x1cba2 <round+0x3e>
   1cb6c:	96 39       	cpi	r25, 0x96	; 150
   1cb6e:	b8 f4       	brcc	.+46     	; 0x1cb9e <round+0x3a>
   1cb70:	9e 38       	cpi	r25, 0x8E	; 142
   1cb72:	48 f4       	brcc	.+18     	; 0x1cb86 <round+0x22>
   1cb74:	67 2f       	mov	r22, r23
   1cb76:	78 2f       	mov	r23, r24
   1cb78:	88 27       	eor	r24, r24
   1cb7a:	98 5f       	subi	r25, 0xF8	; 248
   1cb7c:	f9 cf       	rjmp	.-14     	; 0x1cb70 <round+0xc>
   1cb7e:	86 95       	lsr	r24
   1cb80:	77 95       	ror	r23
   1cb82:	67 95       	ror	r22
   1cb84:	93 95       	inc	r25
   1cb86:	95 39       	cpi	r25, 0x95	; 149
   1cb88:	d0 f3       	brcs	.-12     	; 0x1cb7e <round+0x1a>
   1cb8a:	b6 2f       	mov	r27, r22
   1cb8c:	b1 70       	andi	r27, 0x01	; 1
   1cb8e:	6b 0f       	add	r22, r27
   1cb90:	71 1d       	adc	r23, r1
   1cb92:	81 1d       	adc	r24, r1
   1cb94:	20 f4       	brcc	.+8      	; 0x1cb9e <round+0x3a>
   1cb96:	87 95       	ror	r24
   1cb98:	77 95       	ror	r23
   1cb9a:	67 95       	ror	r22
   1cb9c:	93 95       	inc	r25
   1cb9e:	02 c0       	rjmp	.+4      	; 0x1cba4 <__fp_mintl>
   1cba0:	1c c0       	rjmp	.+56     	; 0x1cbda <__fp_mpack>
   1cba2:	73 cf       	rjmp	.-282    	; 0x1ca8a <__fp_szero>

0001cba4 <__fp_mintl>:
   1cba4:	88 23       	and	r24, r24
   1cba6:	71 f4       	brne	.+28     	; 0x1cbc4 <__fp_mintl+0x20>
   1cba8:	77 23       	and	r23, r23
   1cbaa:	21 f0       	breq	.+8      	; 0x1cbb4 <__fp_mintl+0x10>
   1cbac:	98 50       	subi	r25, 0x08	; 8
   1cbae:	87 2b       	or	r24, r23
   1cbb0:	76 2f       	mov	r23, r22
   1cbb2:	07 c0       	rjmp	.+14     	; 0x1cbc2 <__fp_mintl+0x1e>
   1cbb4:	66 23       	and	r22, r22
   1cbb6:	11 f4       	brne	.+4      	; 0x1cbbc <__fp_mintl+0x18>
   1cbb8:	99 27       	eor	r25, r25
   1cbba:	0d c0       	rjmp	.+26     	; 0x1cbd6 <__fp_mintl+0x32>
   1cbbc:	90 51       	subi	r25, 0x10	; 16
   1cbbe:	86 2b       	or	r24, r22
   1cbc0:	70 e0       	ldi	r23, 0x00	; 0
   1cbc2:	60 e0       	ldi	r22, 0x00	; 0
   1cbc4:	2a f0       	brmi	.+10     	; 0x1cbd0 <__fp_mintl+0x2c>
   1cbc6:	9a 95       	dec	r25
   1cbc8:	66 0f       	add	r22, r22
   1cbca:	77 1f       	adc	r23, r23
   1cbcc:	88 1f       	adc	r24, r24
   1cbce:	da f7       	brpl	.-10     	; 0x1cbc6 <__fp_mintl+0x22>
   1cbd0:	88 0f       	add	r24, r24
   1cbd2:	96 95       	lsr	r25
   1cbd4:	87 95       	ror	r24
   1cbd6:	97 f9       	bld	r25, 7
   1cbd8:	08 95       	ret

0001cbda <__fp_mpack>:
   1cbda:	9f 3f       	cpi	r25, 0xFF	; 255
   1cbdc:	31 f0       	breq	.+12     	; 0x1cbea <__fp_mpack_finite+0xc>

0001cbde <__fp_mpack_finite>:
   1cbde:	91 50       	subi	r25, 0x01	; 1
   1cbe0:	20 f4       	brcc	.+8      	; 0x1cbea <__fp_mpack_finite+0xc>
   1cbe2:	87 95       	ror	r24
   1cbe4:	77 95       	ror	r23
   1cbe6:	67 95       	ror	r22
   1cbe8:	b7 95       	ror	r27
   1cbea:	88 0f       	add	r24, r24
   1cbec:	91 1d       	adc	r25, r1
   1cbee:	96 95       	lsr	r25
   1cbf0:	87 95       	ror	r24
   1cbf2:	97 f9       	bld	r25, 7
   1cbf4:	08 95       	ret

0001cbf6 <calloc>:
   1cbf6:	0f 93       	push	r16
   1cbf8:	1f 93       	push	r17
   1cbfa:	cf 93       	push	r28
   1cbfc:	df 93       	push	r29
   1cbfe:	86 9f       	mul	r24, r22
   1cc00:	80 01       	movw	r16, r0
   1cc02:	87 9f       	mul	r24, r23
   1cc04:	10 0d       	add	r17, r0
   1cc06:	96 9f       	mul	r25, r22
   1cc08:	10 0d       	add	r17, r0
   1cc0a:	11 24       	eor	r1, r1
   1cc0c:	c8 01       	movw	r24, r16
   1cc0e:	0d d0       	rcall	.+26     	; 0x1cc2a <malloc>
   1cc10:	ec 01       	movw	r28, r24
   1cc12:	00 97       	sbiw	r24, 0x00	; 0
   1cc14:	21 f0       	breq	.+8      	; 0x1cc1e <calloc+0x28>
   1cc16:	a8 01       	movw	r20, r16
   1cc18:	60 e0       	ldi	r22, 0x00	; 0
   1cc1a:	70 e0       	ldi	r23, 0x00	; 0
   1cc1c:	27 d1       	rcall	.+590    	; 0x1ce6c <memset>
   1cc1e:	ce 01       	movw	r24, r28
   1cc20:	df 91       	pop	r29
   1cc22:	cf 91       	pop	r28
   1cc24:	1f 91       	pop	r17
   1cc26:	0f 91       	pop	r16
   1cc28:	08 95       	ret

0001cc2a <malloc>:
   1cc2a:	0f 93       	push	r16
   1cc2c:	1f 93       	push	r17
   1cc2e:	cf 93       	push	r28
   1cc30:	df 93       	push	r29
   1cc32:	82 30       	cpi	r24, 0x02	; 2
   1cc34:	91 05       	cpc	r25, r1
   1cc36:	10 f4       	brcc	.+4      	; 0x1cc3c <malloc+0x12>
   1cc38:	82 e0       	ldi	r24, 0x02	; 2
   1cc3a:	90 e0       	ldi	r25, 0x00	; 0
   1cc3c:	e0 91 ab 21 	lds	r30, 0x21AB	; 0x8021ab <__flp>
   1cc40:	f0 91 ac 21 	lds	r31, 0x21AC	; 0x8021ac <__flp+0x1>
   1cc44:	20 e0       	ldi	r18, 0x00	; 0
   1cc46:	30 e0       	ldi	r19, 0x00	; 0
   1cc48:	a0 e0       	ldi	r26, 0x00	; 0
   1cc4a:	b0 e0       	ldi	r27, 0x00	; 0
   1cc4c:	30 97       	sbiw	r30, 0x00	; 0
   1cc4e:	19 f1       	breq	.+70     	; 0x1cc96 <malloc+0x6c>
   1cc50:	40 81       	ld	r20, Z
   1cc52:	51 81       	ldd	r21, Z+1	; 0x01
   1cc54:	02 81       	ldd	r16, Z+2	; 0x02
   1cc56:	13 81       	ldd	r17, Z+3	; 0x03
   1cc58:	48 17       	cp	r20, r24
   1cc5a:	59 07       	cpc	r21, r25
   1cc5c:	c8 f0       	brcs	.+50     	; 0x1cc90 <malloc+0x66>
   1cc5e:	84 17       	cp	r24, r20
   1cc60:	95 07       	cpc	r25, r21
   1cc62:	69 f4       	brne	.+26     	; 0x1cc7e <malloc+0x54>
   1cc64:	10 97       	sbiw	r26, 0x00	; 0
   1cc66:	31 f0       	breq	.+12     	; 0x1cc74 <malloc+0x4a>
   1cc68:	12 96       	adiw	r26, 0x02	; 2
   1cc6a:	0c 93       	st	X, r16
   1cc6c:	12 97       	sbiw	r26, 0x02	; 2
   1cc6e:	13 96       	adiw	r26, 0x03	; 3
   1cc70:	1c 93       	st	X, r17
   1cc72:	27 c0       	rjmp	.+78     	; 0x1ccc2 <malloc+0x98>
   1cc74:	00 93 ab 21 	sts	0x21AB, r16	; 0x8021ab <__flp>
   1cc78:	10 93 ac 21 	sts	0x21AC, r17	; 0x8021ac <__flp+0x1>
   1cc7c:	22 c0       	rjmp	.+68     	; 0x1ccc2 <malloc+0x98>
   1cc7e:	21 15       	cp	r18, r1
   1cc80:	31 05       	cpc	r19, r1
   1cc82:	19 f0       	breq	.+6      	; 0x1cc8a <malloc+0x60>
   1cc84:	42 17       	cp	r20, r18
   1cc86:	53 07       	cpc	r21, r19
   1cc88:	18 f4       	brcc	.+6      	; 0x1cc90 <malloc+0x66>
   1cc8a:	9a 01       	movw	r18, r20
   1cc8c:	bd 01       	movw	r22, r26
   1cc8e:	ef 01       	movw	r28, r30
   1cc90:	df 01       	movw	r26, r30
   1cc92:	f8 01       	movw	r30, r16
   1cc94:	db cf       	rjmp	.-74     	; 0x1cc4c <malloc+0x22>
   1cc96:	21 15       	cp	r18, r1
   1cc98:	31 05       	cpc	r19, r1
   1cc9a:	f9 f0       	breq	.+62     	; 0x1ccda <malloc+0xb0>
   1cc9c:	28 1b       	sub	r18, r24
   1cc9e:	39 0b       	sbc	r19, r25
   1cca0:	24 30       	cpi	r18, 0x04	; 4
   1cca2:	31 05       	cpc	r19, r1
   1cca4:	80 f4       	brcc	.+32     	; 0x1ccc6 <malloc+0x9c>
   1cca6:	8a 81       	ldd	r24, Y+2	; 0x02
   1cca8:	9b 81       	ldd	r25, Y+3	; 0x03
   1ccaa:	61 15       	cp	r22, r1
   1ccac:	71 05       	cpc	r23, r1
   1ccae:	21 f0       	breq	.+8      	; 0x1ccb8 <malloc+0x8e>
   1ccb0:	fb 01       	movw	r30, r22
   1ccb2:	93 83       	std	Z+3, r25	; 0x03
   1ccb4:	82 83       	std	Z+2, r24	; 0x02
   1ccb6:	04 c0       	rjmp	.+8      	; 0x1ccc0 <malloc+0x96>
   1ccb8:	90 93 ac 21 	sts	0x21AC, r25	; 0x8021ac <__flp+0x1>
   1ccbc:	80 93 ab 21 	sts	0x21AB, r24	; 0x8021ab <__flp>
   1ccc0:	fe 01       	movw	r30, r28
   1ccc2:	32 96       	adiw	r30, 0x02	; 2
   1ccc4:	44 c0       	rjmp	.+136    	; 0x1cd4e <malloc+0x124>
   1ccc6:	fe 01       	movw	r30, r28
   1ccc8:	e2 0f       	add	r30, r18
   1ccca:	f3 1f       	adc	r31, r19
   1cccc:	81 93       	st	Z+, r24
   1ccce:	91 93       	st	Z+, r25
   1ccd0:	22 50       	subi	r18, 0x02	; 2
   1ccd2:	31 09       	sbc	r19, r1
   1ccd4:	39 83       	std	Y+1, r19	; 0x01
   1ccd6:	28 83       	st	Y, r18
   1ccd8:	3a c0       	rjmp	.+116    	; 0x1cd4e <malloc+0x124>
   1ccda:	20 91 a9 21 	lds	r18, 0x21A9	; 0x8021a9 <__brkval>
   1ccde:	30 91 aa 21 	lds	r19, 0x21AA	; 0x8021aa <__brkval+0x1>
   1cce2:	23 2b       	or	r18, r19
   1cce4:	41 f4       	brne	.+16     	; 0x1ccf6 <malloc+0xcc>
   1cce6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1ccea:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1ccee:	30 93 aa 21 	sts	0x21AA, r19	; 0x8021aa <__brkval+0x1>
   1ccf2:	20 93 a9 21 	sts	0x21A9, r18	; 0x8021a9 <__brkval>
   1ccf6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1ccfa:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
   1ccfe:	21 15       	cp	r18, r1
   1cd00:	31 05       	cpc	r19, r1
   1cd02:	41 f4       	brne	.+16     	; 0x1cd14 <malloc+0xea>
   1cd04:	2d b7       	in	r18, 0x3d	; 61
   1cd06:	3e b7       	in	r19, 0x3e	; 62
   1cd08:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1cd0c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1cd10:	24 1b       	sub	r18, r20
   1cd12:	35 0b       	sbc	r19, r21
   1cd14:	e0 91 a9 21 	lds	r30, 0x21A9	; 0x8021a9 <__brkval>
   1cd18:	f0 91 aa 21 	lds	r31, 0x21AA	; 0x8021aa <__brkval+0x1>
   1cd1c:	e2 17       	cp	r30, r18
   1cd1e:	f3 07       	cpc	r31, r19
   1cd20:	a0 f4       	brcc	.+40     	; 0x1cd4a <malloc+0x120>
   1cd22:	2e 1b       	sub	r18, r30
   1cd24:	3f 0b       	sbc	r19, r31
   1cd26:	28 17       	cp	r18, r24
   1cd28:	39 07       	cpc	r19, r25
   1cd2a:	78 f0       	brcs	.+30     	; 0x1cd4a <malloc+0x120>
   1cd2c:	ac 01       	movw	r20, r24
   1cd2e:	4e 5f       	subi	r20, 0xFE	; 254
   1cd30:	5f 4f       	sbci	r21, 0xFF	; 255
   1cd32:	24 17       	cp	r18, r20
   1cd34:	35 07       	cpc	r19, r21
   1cd36:	48 f0       	brcs	.+18     	; 0x1cd4a <malloc+0x120>
   1cd38:	4e 0f       	add	r20, r30
   1cd3a:	5f 1f       	adc	r21, r31
   1cd3c:	50 93 aa 21 	sts	0x21AA, r21	; 0x8021aa <__brkval+0x1>
   1cd40:	40 93 a9 21 	sts	0x21A9, r20	; 0x8021a9 <__brkval>
   1cd44:	81 93       	st	Z+, r24
   1cd46:	91 93       	st	Z+, r25
   1cd48:	02 c0       	rjmp	.+4      	; 0x1cd4e <malloc+0x124>
   1cd4a:	e0 e0       	ldi	r30, 0x00	; 0
   1cd4c:	f0 e0       	ldi	r31, 0x00	; 0
   1cd4e:	cf 01       	movw	r24, r30
   1cd50:	df 91       	pop	r29
   1cd52:	cf 91       	pop	r28
   1cd54:	1f 91       	pop	r17
   1cd56:	0f 91       	pop	r16
   1cd58:	08 95       	ret

0001cd5a <free>:
   1cd5a:	cf 93       	push	r28
   1cd5c:	df 93       	push	r29
   1cd5e:	00 97       	sbiw	r24, 0x00	; 0
   1cd60:	09 f4       	brne	.+2      	; 0x1cd64 <free+0xa>
   1cd62:	81 c0       	rjmp	.+258    	; 0x1ce66 <free+0x10c>
   1cd64:	fc 01       	movw	r30, r24
   1cd66:	32 97       	sbiw	r30, 0x02	; 2
   1cd68:	13 82       	std	Z+3, r1	; 0x03
   1cd6a:	12 82       	std	Z+2, r1	; 0x02
   1cd6c:	a0 91 ab 21 	lds	r26, 0x21AB	; 0x8021ab <__flp>
   1cd70:	b0 91 ac 21 	lds	r27, 0x21AC	; 0x8021ac <__flp+0x1>
   1cd74:	10 97       	sbiw	r26, 0x00	; 0
   1cd76:	81 f4       	brne	.+32     	; 0x1cd98 <free+0x3e>
   1cd78:	20 81       	ld	r18, Z
   1cd7a:	31 81       	ldd	r19, Z+1	; 0x01
   1cd7c:	82 0f       	add	r24, r18
   1cd7e:	93 1f       	adc	r25, r19
   1cd80:	20 91 a9 21 	lds	r18, 0x21A9	; 0x8021a9 <__brkval>
   1cd84:	30 91 aa 21 	lds	r19, 0x21AA	; 0x8021aa <__brkval+0x1>
   1cd88:	28 17       	cp	r18, r24
   1cd8a:	39 07       	cpc	r19, r25
   1cd8c:	51 f5       	brne	.+84     	; 0x1cde2 <free+0x88>
   1cd8e:	f0 93 aa 21 	sts	0x21AA, r31	; 0x8021aa <__brkval+0x1>
   1cd92:	e0 93 a9 21 	sts	0x21A9, r30	; 0x8021a9 <__brkval>
   1cd96:	67 c0       	rjmp	.+206    	; 0x1ce66 <free+0x10c>
   1cd98:	ed 01       	movw	r28, r26
   1cd9a:	20 e0       	ldi	r18, 0x00	; 0
   1cd9c:	30 e0       	ldi	r19, 0x00	; 0
   1cd9e:	ce 17       	cp	r28, r30
   1cda0:	df 07       	cpc	r29, r31
   1cda2:	40 f4       	brcc	.+16     	; 0x1cdb4 <free+0x5a>
   1cda4:	4a 81       	ldd	r20, Y+2	; 0x02
   1cda6:	5b 81       	ldd	r21, Y+3	; 0x03
   1cda8:	9e 01       	movw	r18, r28
   1cdaa:	41 15       	cp	r20, r1
   1cdac:	51 05       	cpc	r21, r1
   1cdae:	f1 f0       	breq	.+60     	; 0x1cdec <free+0x92>
   1cdb0:	ea 01       	movw	r28, r20
   1cdb2:	f5 cf       	rjmp	.-22     	; 0x1cd9e <free+0x44>
   1cdb4:	d3 83       	std	Z+3, r29	; 0x03
   1cdb6:	c2 83       	std	Z+2, r28	; 0x02
   1cdb8:	40 81       	ld	r20, Z
   1cdba:	51 81       	ldd	r21, Z+1	; 0x01
   1cdbc:	84 0f       	add	r24, r20
   1cdbe:	95 1f       	adc	r25, r21
   1cdc0:	c8 17       	cp	r28, r24
   1cdc2:	d9 07       	cpc	r29, r25
   1cdc4:	59 f4       	brne	.+22     	; 0x1cddc <free+0x82>
   1cdc6:	88 81       	ld	r24, Y
   1cdc8:	99 81       	ldd	r25, Y+1	; 0x01
   1cdca:	84 0f       	add	r24, r20
   1cdcc:	95 1f       	adc	r25, r21
   1cdce:	02 96       	adiw	r24, 0x02	; 2
   1cdd0:	91 83       	std	Z+1, r25	; 0x01
   1cdd2:	80 83       	st	Z, r24
   1cdd4:	8a 81       	ldd	r24, Y+2	; 0x02
   1cdd6:	9b 81       	ldd	r25, Y+3	; 0x03
   1cdd8:	93 83       	std	Z+3, r25	; 0x03
   1cdda:	82 83       	std	Z+2, r24	; 0x02
   1cddc:	21 15       	cp	r18, r1
   1cdde:	31 05       	cpc	r19, r1
   1cde0:	29 f4       	brne	.+10     	; 0x1cdec <free+0x92>
   1cde2:	f0 93 ac 21 	sts	0x21AC, r31	; 0x8021ac <__flp+0x1>
   1cde6:	e0 93 ab 21 	sts	0x21AB, r30	; 0x8021ab <__flp>
   1cdea:	3d c0       	rjmp	.+122    	; 0x1ce66 <free+0x10c>
   1cdec:	e9 01       	movw	r28, r18
   1cdee:	fb 83       	std	Y+3, r31	; 0x03
   1cdf0:	ea 83       	std	Y+2, r30	; 0x02
   1cdf2:	49 91       	ld	r20, Y+
   1cdf4:	59 91       	ld	r21, Y+
   1cdf6:	c4 0f       	add	r28, r20
   1cdf8:	d5 1f       	adc	r29, r21
   1cdfa:	ec 17       	cp	r30, r28
   1cdfc:	fd 07       	cpc	r31, r29
   1cdfe:	61 f4       	brne	.+24     	; 0x1ce18 <free+0xbe>
   1ce00:	80 81       	ld	r24, Z
   1ce02:	91 81       	ldd	r25, Z+1	; 0x01
   1ce04:	84 0f       	add	r24, r20
   1ce06:	95 1f       	adc	r25, r21
   1ce08:	02 96       	adiw	r24, 0x02	; 2
   1ce0a:	e9 01       	movw	r28, r18
   1ce0c:	99 83       	std	Y+1, r25	; 0x01
   1ce0e:	88 83       	st	Y, r24
   1ce10:	82 81       	ldd	r24, Z+2	; 0x02
   1ce12:	93 81       	ldd	r25, Z+3	; 0x03
   1ce14:	9b 83       	std	Y+3, r25	; 0x03
   1ce16:	8a 83       	std	Y+2, r24	; 0x02
   1ce18:	e0 e0       	ldi	r30, 0x00	; 0
   1ce1a:	f0 e0       	ldi	r31, 0x00	; 0
   1ce1c:	12 96       	adiw	r26, 0x02	; 2
   1ce1e:	8d 91       	ld	r24, X+
   1ce20:	9c 91       	ld	r25, X
   1ce22:	13 97       	sbiw	r26, 0x03	; 3
   1ce24:	00 97       	sbiw	r24, 0x00	; 0
   1ce26:	19 f0       	breq	.+6      	; 0x1ce2e <free+0xd4>
   1ce28:	fd 01       	movw	r30, r26
   1ce2a:	dc 01       	movw	r26, r24
   1ce2c:	f7 cf       	rjmp	.-18     	; 0x1ce1c <free+0xc2>
   1ce2e:	8d 91       	ld	r24, X+
   1ce30:	9c 91       	ld	r25, X
   1ce32:	11 97       	sbiw	r26, 0x01	; 1
   1ce34:	9d 01       	movw	r18, r26
   1ce36:	2e 5f       	subi	r18, 0xFE	; 254
   1ce38:	3f 4f       	sbci	r19, 0xFF	; 255
   1ce3a:	82 0f       	add	r24, r18
   1ce3c:	93 1f       	adc	r25, r19
   1ce3e:	20 91 a9 21 	lds	r18, 0x21A9	; 0x8021a9 <__brkval>
   1ce42:	30 91 aa 21 	lds	r19, 0x21AA	; 0x8021aa <__brkval+0x1>
   1ce46:	28 17       	cp	r18, r24
   1ce48:	39 07       	cpc	r19, r25
   1ce4a:	69 f4       	brne	.+26     	; 0x1ce66 <free+0x10c>
   1ce4c:	30 97       	sbiw	r30, 0x00	; 0
   1ce4e:	29 f4       	brne	.+10     	; 0x1ce5a <free+0x100>
   1ce50:	10 92 ac 21 	sts	0x21AC, r1	; 0x8021ac <__flp+0x1>
   1ce54:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <__flp>
   1ce58:	02 c0       	rjmp	.+4      	; 0x1ce5e <free+0x104>
   1ce5a:	13 82       	std	Z+3, r1	; 0x03
   1ce5c:	12 82       	std	Z+2, r1	; 0x02
   1ce5e:	b0 93 aa 21 	sts	0x21AA, r27	; 0x8021aa <__brkval+0x1>
   1ce62:	a0 93 a9 21 	sts	0x21A9, r26	; 0x8021a9 <__brkval>
   1ce66:	df 91       	pop	r29
   1ce68:	cf 91       	pop	r28
   1ce6a:	08 95       	ret

0001ce6c <memset>:
   1ce6c:	dc 01       	movw	r26, r24
   1ce6e:	01 c0       	rjmp	.+2      	; 0x1ce72 <memset+0x6>
   1ce70:	6d 93       	st	X+, r22
   1ce72:	41 50       	subi	r20, 0x01	; 1
   1ce74:	50 40       	sbci	r21, 0x00	; 0
   1ce76:	e0 f7       	brcc	.-8      	; 0x1ce70 <memset+0x4>
   1ce78:	08 95       	ret

0001ce7a <_exit>:
   1ce7a:	f8 94       	cli

0001ce7c <__stop_program>:
   1ce7c:	ff cf       	rjmp	.-2      	; 0x1ce7c <__stop_program>
