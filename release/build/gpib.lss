
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001650  00800100  0001d038  0001d0cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001d038  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a53  00801750  00801750  0001e71c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001e71c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001e730  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000016c8  00000000  00000000  0001e770  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000284f0  00000000  00000000  0001fe38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006167  00000000  00000000  00048328  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001206a  00000000  00000000  0004e48f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000501c  00000000  00000000  000604fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000048ad  00000000  00000000  00065518  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00023967  00000000  00000000  00069dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000016a0  00000000  00000000  0008d72c  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
00801750 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 malloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000002d8 l     O .text	0000001e __c.3748
000002f6 l     O .text	0000001d __c.3743
00801750 l     O .bss	00000001 error_flag
00000000 l    df *ABS*	00000000 time.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006d4e l     F .text	0000002a IS_Leap
00800377 l     O .data	00000018 __days
008017c5 l     O .bss	00000016 t.3802
008017db l     O .bss	00000002 p.3803
008017a7 l     O .bss	00000008 ts.3881
008017af l     O .bss	00000016 t.3814
0080038f l     O .data	0000001a __days_sum
00000759 l     O .text	00000012 __c.3921
00000748 l     O .text	00000011 __c.3923
00000737 l     O .text	00000011 __c.3925
00000725 l     O .text	00000012 __c.3927
00000714 l     O .text	00000011 __c.3929
000006fd l     O .text	00000017 __c.3931
0000076b l     O .text	00000021 __c.3900
0000078c l     O .text	0000001d __c.3775
008017fd l     O .bss	00000020 buf.3780
008017dd l     O .bss	00000020 buf.3792
000006eb l     O .text	00000012 __c.3977
000006d6 l     O .text	00000015 __c.3979
000006bf l     O .text	00000017 __c.3981
000006a5 l     O .text	0000001a __c.3983
00000681 l     O .text	00000024 __c.3985
0000066f l     O .text	00000012 __c.3992
0000065e l     O .text	00000011 __c.3994
0000064d l     O .text	00000011 __c.3996
0000063b l     O .text	00000012 __c.3998
0000062a l     O .text	00000011 __c.4000
00000000 l    df *ABS*	00000000 mmc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000d4de l     F .text	00000004 xchg_spi
0000d4e2 l     F .text	0000000c deselect
0000d4ee l     F .text	00000046 rcvr_datablock
0000d558 l     F .text	00000044 select
000007a9 l     O .text	00000010 __c.3743
0000d59c l     F .text	00000086 send_cmd
0000d622 l     F .text	0000004e xmit_datablock
00801822 l     O .bss	00000001 CardType
00801824 l     O .bss	00000001 Timer1
00801823 l     O .bss	00000001 Timer2
00000000 l    df *ABS*	00000000 posix.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800b95 l     O .data	00000014 CSWTCH.97
00000c04 l     O .text	00000018 __c.3720
00000bec l     O .text	00000018 __c.3727
0000ed7c l     F .text	0000001a _fprintf_putc
0080192e l     O .bss	0000002e _dp
0080182f l     O .bss	000000ff _de
00000bd8 l     O .text	00000008 __c.4043
00000bd4 l     O .text	00000004 __c.4045
00000be0 l     O .text	0000000c __c.3798
00000000 l    df *ABS*	00000000 posix_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000e86 l     O .text	0000000c __c.3744
00000dc0 l     O .text	000000c6 __c.3746
00000d41 l     O .text	0000000c __c.3807
00000d31 l     O .text	00000010 __c.3809
00000d24 l     O .text	0000000d __c.3811
00000d14 l     O .text	00000010 __c.3813
00000d07 l     O .text	0000000d __c.3815
00000ceb l     O .text	0000000f __c.3820
00000cfa l     O .text	0000000d __c.3817
00000cd8 l     O .text	00000013 __c.3824
00800180 l     O .data	00000002 _pagesize
00000cd1 l     O .text	00000007 __c.3834
00000ccf l     O .text	00000002 __c.3836
00000d5a l     O .text	00000010 __c.3789
00000d58 l     O .text	00000002 __c.3794
00000d4d l     O .text	0000000b __c.3796
00000cbd l     O .text	00000012 __c.3848
00000cb9 l     O .text	00000004 __c.3850
00000c9f l     O .text	0000001a __c.3855
00000c7e l     O .text	00000021 __c.3868
00000c70 l     O .text	0000000e __c.3870
00000c5a l     O .text	00000016 __c.3872
00000c27 l     O .text	00000023 __c.3880
00000c4a l     O .text	00000010 __c.3877
00000c1c l     O .text	0000000b __c.3884
00000daf l     O .text	00000011 __c.3762
00000d9e l     O .text	00000011 __c.3770
00000d9a l     O .text	00000004 __c.3773
00000d89 l     O .text	00000011 __c.3775
00000d7b l     O .text	0000000e __c.3777
00000d6a l     O .text	00000011 __c.3779
00000000 l    df *ABS*	00000000 gpib.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000011d3 l     O .text	00000011 __c.4346
000011c0 l     O .text	00000013 __c.4351
0000119a l     O .text	00000026 __c.4356
0000117f l     O .text	0000001b __c.4358
00001158 l     O .text	00000027 __c.4363
0000113d l     O .text	0000001b __c.4365
00001131 l     O .text	0000000c __c.4383
00001103 l     O .text	0000002e __c.4395
00001033 l     O .text	0000001a __c.4432
0000104d l     O .text	0000001b __c.4428
00001068 l     O .text	0000001b __c.4425
00001083 l     O .text	00000028 __c.4420
000010ab l     O .text	0000001a __c.4416
000010e4 l     O .text	0000001f __c.4410
000010c5 l     O .text	0000001f __c.4413
00001020 l     O .text	00000013 __c.4436
00000fdf l     O .text	00000009 __c.4484
00000fd9 l     O .text	00000006 __c.4486
00000fce l     O .text	0000000b __c.4490
00000fc3 l     O .text	0000000b __c.4492
00000fb8 l     O .text	0000000b __c.4494
00001006 l     O .text	0000001a __c.4452
00000fe8 l     O .text	0000001e __c.4455
00000f9f l     O .text	00000019 __c.4510
00000f72 l     O .text	0000002d __c.4513
00000f4b l     O .text	00000027 __c.4517
00000f31 l     O .text	0000001a __c.4527
00000f09 l     O .text	00000028 __c.4532
00000000 l    df *ABS*	00000000 gpib_task.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001486 l     O .text	00000012 __c.4353
00001475 l     O .text	00000011 __c.4355
0000145c l     O .text	00000019 __c.4357
00001442 l     O .text	0000001a __c.4403
00001417 l     O .text	0000002b __c.4405
00001400 l     O .text	00000017 __c.4407
000013f4 l     O .text	0000000c __c.4409
000013ee l     O .text	00000006 __c.4413
000013dc l     O .text	00000012 __c.4415
000013d5 l     O .text	00000007 __c.4420
000013ca l     O .text	0000000b __c.4422
000013c3 l     O .text	00000007 __c.4424
000013b6 l     O .text	0000000d __c.4426
000013a5 l     O .text	00000011 __c.4428
00001384 l     O .text	00000021 __c.4455
0000136a l     O .text	0000001a __c.4457
00001352 l     O .text	00000018 __c.4462
0000133a l     O .text	00000018 __c.4464
00001333 l     O .text	00000007 __c.4466
0000132c l     O .text	00000007 __c.4468
00001325 l     O .text	00000007 __c.4470
00001319 l     O .text	0000000c __c.4472
0000130c l     O .text	0000000d __c.4474
00001305 l     O .text	00000007 __c.4476
000012e4 l     O .text	00000021 __c.4478
00001291 l     O .text	00000007 __c.4498
00001280 l     O .text	00000011 __c.4500
0000126e l     O .text	00000012 __c.4502
0000125a l     O .text	00000014 __c.4504
0000124a l     O .text	00000010 __c.4506
0000123e l     O .text	0000000c __c.4508
0000122d l     O .text	00000011 __c.4513
0000121b l     O .text	00000012 __c.4515
000011f5 l     O .text	00000026 __c.4517
000011e4 l     O .text	00000011 __c.4522
000012dd l     O .text	00000007 __c.4483
000012db l     O .text	00000002 __c.4485
000012c9 l     O .text	00000012 __c.4487
000012b8 l     O .text	00000011 __c.4489
000012a4 l     O .text	00000014 __c.4491
00001298 l     O .text	0000000c __c.4493
00000000 l    df *ABS*	00000000 drives.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001d01 l     O .text	00000015 __c.4572
00001cf5 l     O .text	0000000c __c.4583
00001cf1 l     O .text	00000004 __c.4593
000019bb l     O .text	00000012 __c.4737
0000199d l     O .text	00000002 __c.4746
0000199f l     O .text	00000009 __c.4744
000019a8 l     O .text	0000000a __c.4742
000019b2 l     O .text	00000009 __c.4740
0000199b l     O .text	00000002 __c.4751
0000197b l     O .text	00000020 __c.4760
00001900 l     O .text	00000002 __c.4775
00001935 l     O .text	0000000a __c.4769
00001916 l     O .text	0000001f __c.4771
00001902 l     O .text	00000014 __c.4773
00001972 l     O .text	00000009 __c.4763
00001953 l     O .text	0000001f __c.4765
0000193f l     O .text	00000014 __c.4767
000018fe l     O .text	00000002 __c.4780
000018d9 l     O .text	00000025 __c.4819
000018a0 l     O .text	00000039 __c.4821
0000186b l     O .text	00000035 __c.4823
00001836 l     O .text	00000035 __c.4825
000017fe l     O .text	00000038 __c.4827
000017d3 l     O .text	0000002b __c.4829
000017af l     O .text	00000024 __c.4842
0000178d l     O .text	00000022 __c.4850
00801974 l     O .bss	00000002 stack_ind
0080196a l     O .bss	0000000a stack_p
0000176e l     O .text	0000001f __c.4886
00001701 l     O .text	00000037 __c.4901
00001738 l     O .text	00000036 __c.4899
00001ce4 l     O .text	0000000d __c.4612
00001a33 l     O .text	00000022 __c.4723
00001a55 l     O .text	00000030 __c.4720
00001a85 l     O .text	0000002f __c.4711
00001ab4 l     O .text	00000030 __c.4708
00001ae4 l     O .text	0000002e __c.4699
00001b12 l     O .text	0000002e __c.4691
00001cc6 l     O .text	0000001e __c.4614
00001ca4 l     O .text	00000022 __c.4617
00001c82 l     O .text	00000022 __c.4628
00001c58 l     O .text	0000002a __c.4632
00001c27 l     O .text	00000031 __c.4635
00001bfa l     O .text	0000002d __c.4645
00001bcc l     O .text	0000002e __c.4653
00001b9e l     O .text	0000002e __c.4656
00001b6c l     O .text	00000032 __c.4664
00001b40 l     O .text	0000002c __c.4681
00001a11 l     O .text	00000022 __c.4727
000019f4 l     O .text	0000001d __c.4729
000019cd l     O .text	00000027 __c.4731
00001681 l     O .text	0000001a __c.4926
00001679 l     O .text	00000008 __c.4928
0000169b l     O .text	00000022 __c.4924
000016c5 l     O .text	0000001a __c.4920
000016bd l     O .text	00000008 __c.4922
000016df l     O .text	00000022 __c.4918
00000000 l    df *ABS*	00000000 ss80.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801996 l     O .bss	00000005 B.4358
00801983 l     O .bss	00000013 B.4362
00801976 l     O .bss	0000000d B.4366
00002387 l     O .text	00000005 __c.4469
0000237c l     O .text	0000000b __c.4471
00002368 l     O .text	00000014 __c.4481
0000234d l     O .text	0000001b __c.4483
0000233c l     O .text	00000011 __c.4491
00002319 l     O .text	00000023 __c.4493
000022fc l     O .text	0000001d __c.4495
000022dd l     O .text	0000001f __c.4497
000022c5 l     O .text	00000018 __c.4502
000022ab l     O .text	0000001a __c.4507
00002285 l     O .text	00000026 __c.4516
0000226c l     O .text	00000019 __c.4518
00002170 l     O .text	00000025 __c.4540
00002195 l     O .text	0000001a __c.4538
000021af l     O .text	00000016 __c.4536
000021c5 l     O .text	0000000e __c.4534
000021d3 l     O .text	0000001c __c.4532
000021ef l     O .text	0000001d __c.4530
00002256 l     O .text	00000016 __c.4520
0000223d l     O .text	00000019 __c.4523
00002225 l     O .text	00000018 __c.4525
0000220c l     O .text	00000019 __c.4528
0000214f l     O .text	00000021 __c.4542
00002139 l     O .text	00000016 __c.4544
0000211c l     O .text	0000001d __c.4546
00002100 l     O .text	0000001c __c.4548
000020ef l     O .text	00000011 __c.4550
000020d1 l     O .text	0000001e __c.4552
000020b2 l     O .text	0000001f __c.4554
00002097 l     O .text	0000001b __c.4556
0000207e l     O .text	00000019 __c.4558
00002067 l     O .text	00000017 __c.4560
00002044 l     O .text	00000023 __c.4562
00002024 l     O .text	00000020 __c.4564
00001fec l     O .text	00000038 __c.4567
00001ea9 l     O .text	00000020 __c.4600
00001e95 l     O .text	00000014 __c.4602
0000242c l     O .text	00000029 __c.4430
000023df l     O .text	00000026 __c.4438
00002405 l     O .text	00000014 __c.4436
00002419 l     O .text	00000013 __c.4432
000023b7 l     O .text	00000028 __c.4442
0000238c l     O .text	0000002b __c.4444
00001e7b l     O .text	0000001a __c.4609
00001e68 l     O .text	00000013 __c.4611
00002535 l     O .text	00000013 __c.4372
00001e5c l     O .text	0000000c __c.4625
00001e49 l     O .text	00000013 __c.4632
00001e3a l     O .text	0000000f __c.4634
00001fd9 l     O .text	00000013 __c.4576
00001fc0 l     O .text	00000019 __c.4578
00001f9b l     O .text	00000025 __c.4581
00001f7e l     O .text	0000001d __c.4584
00001f60 l     O .text	0000001e __c.4586
00001f39 l     O .text	00000027 __c.4588
00001f25 l     O .text	00000014 __c.4590
00001f05 l     O .text	00000020 __c.4592
00001ec9 l     O .text	0000003c __c.4595
00001e17 l     O .text	00000023 __c.4648
000024f1 l     O .text	00000028 __c.4405
000024d3 l     O .text	0000001e __c.4407
000024a2 l     O .text	00000019 __c.4411
000024bb l     O .text	00000018 __c.4409
0000247d l     O .text	00000025 __c.4416
00002455 l     O .text	00000028 __c.4418
00002519 l     O .text	0000001c __c.4388
00001e01 l     O .text	00000016 __c.4653
00001deb l     O .text	00000016 __c.4655
00001dd6 l     O .text	00000015 __c.4657
00001dc7 l     O .text	0000000f __c.4659
00001db3 l     O .text	00000014 __c.4661
00001d7f l     O .text	00000034 __c.4663
00001d4b l     O .text	00000034 __c.4665
00000000 l    df *ABS*	00000000 main.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
008019e8 l     O .bss	00000002 _display_cnt
00004618 l     O .text	00000030 __c.4567
000045f9 l     O .text	0000001f __c.4569
000045dc l     O .text	0000001d __c.4571
000045cc l     O .text	00000010 __c.4573
000045a5 l     O .text	00000027 __c.4575
0000458b l     O .text	0000001a __c.4577
00004571 l     O .text	0000001a __c.4579
0000456f l     O .text	00000002 __c.4581
00004551 l     O .text	0000001e __c.4588
0000453b l     O .text	00000016 __c.4603
00004535 l     O .text	00000006 __c.4610
0000452f l     O .text	00000006 __c.4612
0001bd92 l     F .text	00000170 task.part.0
000044d2 l     O .text	00000003 __c.4642
000044ce l     O .text	00000004 __c.4644
000044c2 l     O .text	0000000c __c.4646
00004511 l     O .text	0000001e __c.4619
000044fb l     O .text	00000016 __c.4621
000044f5 l     O .text	00000006 __c.4623
000044ef l     O .text	00000006 __c.4625
000044d5 l     O .text	0000001a __c.4627
000044bb l     O .text	00000007 __c.4655
000044aa l     O .text	00000011 __c.4657
00004483 l     O .text	00000027 __c.4659
00004464 l     O .text	0000001f __c.4661
00004447 l     O .text	0000001d __c.4663
00004437 l     O .text	00000010 __c.4665
00004410 l     O .text	00000027 __c.4667
000043f6 l     O .text	0000001a __c.4669
000043dc l     O .text	0000001a __c.4671
000043c6 l     O .text	00000016 __c.4673
000043b0 l     O .text	00000016 __c.4675
0000439e l     O .text	00000012 __c.4677
0000438f l     O .text	0000000f __c.4679
00004372 l     O .text	0000001d __c.4681
0000435a l     O .text	00000018 __c.4683
00004349 l     O .text	00000011 __c.4685
00004333 l     O .text	00000016 __c.4687
0000431e l     O .text	00000015 __c.4689
0000430c l     O .text	00000012 __c.4691
000042f4 l     O .text	00000018 __c.4693
000042df l     O .text	00000015 __c.4695
000042c9 l     O .text	00000016 __c.4697
000042b3 l     O .text	00000016 __c.4699
000042a2 l     O .text	00000011 __c.4701
0000429c l     O .text	00000006 __c.4703
00004296 l     O .text	00000006 __c.4705
0000427c l     O .text	0000001a __c.4707
00004268 l     O .text	00000014 __c.4709
00000000 l    df *ABS*	00000000 parsing.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000055e l     O .text	00000020 __c.3712
00000538 l     O .text	00000026 __c.3755
00000000 l    df *ABS*	00000000 printf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00007cc2 l     F .text	00000018 _putc_fn
00000000 l    df *ABS*	00000000 ff.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00008e42 l     F .text	0000002a ld_dword
00008e6c l     F .text	0000000c st_dword
00008e78 l     F .text	00000012 mem_set
00008e8a l     F .text	0000001e mem_cmp
00008ea8 l     F .text	0000010c tchar2uni
00008fb4 l     F .text	00000050 clst2sect
00009004 l     F .text	00000078 clmt_clust
0000907c l     F .text	0000001e sum_sfn
0000909a l     F .text	00000058 get_ldnumber
0080181d l     O .bss	00000001 CurrVol
000090f2 l     F .text	00000058 validate
0000914a l     F .text	00000016 mem_cpy.part.0
00009160 l     F .text	0000015a put_utf
000092ba l     F .text	00000220 get_fileinfo
000094da l     F .text	0000002a ld_clust.isra.4
00009504 l     F .text	0000001a st_clust.isra.5
0000951e l     F .text	000000a6 sync_window.part.6
000095c4 l     F .text	000000e4 sync_fs
000096a8 l     F .text	00000150 dir_clear
000097f8 l     F .text	00000076 move_window
0000986e l     F .text	00000080 check_fs
000098ee l     F .text	000004b4 mount_volume
00801820 l     O .bss	00000002 FatFs
0080181e l     O .bss	00000002 Fsid
00009da2 l     F .text	000001f6 put_fat
00009f98 l     F .text	00000168 get_fat.isra.10
0000a100 l     F .text	00000182 dir_sdi
0000a282 l     F .text	0000024c create_chain
0000a4ce l     F .text	00000122 remove_chain
0000a5f0 l     F .text	000001d0 dir_next
0000a7c0 l     F .text	00000072 dir_alloc
0000a832 l     F .text	00000192 dir_read
008004da l     O .data	0000000d LfnOfs
0000a9c4 l     F .text	00000090 dir_remove
0000aa54 l     F .text	0000021c dir_find
0000ac70 l     F .text	0000031c dir_register
0000af8c l     F .text	00000462 follow_path
0080045a l     O .data	00000080 ExCvt
00000000 l    df *ABS*	00000000 ffunicode.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800795 l     O .data	00000100 uc437
008004e7 l     O .data	000000bc cvt2.1843
008005a3 l     O .data	000001f2 cvt1.1842
00000000 l    df *ABS*	00000000 mmc_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000df4c l     F .text	00000048 mmc_task
00000867 l     O .text	0000001c __c.3720
0000085a l     O .text	0000000d __c.3748
0000084a l     O .text	00000010 __c.3761
00801825 l     O .bss	00000002 mmc_init_flag
0000082a l     O .text	00000020 __c.3763
00000817 l     O .text	00000013 __c.3765
0000080b l     O .text	0000000c __c.3767
000007fa l     O .text	00000011 __c.3769
000007dc l     O .text	0000001e __c.3772
000007c7 l     O .text	00000015 __c.3774
000007b9 l     O .text	0000000e __c.3776
00000000 l    df *ABS*	00000000 fatfs_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000a77 l     O .text	00000007 __c.3722
008008b9 l     O .data	00000008 CSWTCH.25
00000a66 l     O .text	00000011 __c.3758
00000a48 l     O .text	0000001e __c.3760
00000a29 l     O .text	0000001f __c.3762
00000a0b l     O .text	0000001e __c.3764
000009ed l     O .text	0000001e __c.3766
000009ce l     O .text	0000001f __c.3768
000009af l     O .text	0000001f __c.3770
00000990 l     O .text	0000001f __c.3772
00000971 l     O .text	0000001f __c.3774
00000952 l     O .text	0000001f __c.3776
00000934 l     O .text	0000001e __c.3778
0000090f l     O .text	00000025 __c.3780
000008c2 l     O .text	0000004d __c.3782
000008a7 l     O .text	0000001b __c.3788
00000885 l     O .text	00000022 __c.3790
00000883 l     O .text	00000002 __c.3792
00000000 l    df *ABS*	00000000 fatfs_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000bc8 l     O .text	0000000c __c.3713
00000b4c l     O .text	0000007c __c.3715
00000abc l     O .text	0000000e __c.3754
00000a93 l     O .text	00000029 __c.3758
00000a7e l     O .text	00000015 __c.3760
00000b1c l     O .text	00000020 __c.3733
00000b0c l     O .text	00000010 __c.3735
00000af8 l     O .text	00000014 __c.3737
00000aea l     O .text	0000000e __c.3739
00000aca l     O .text	00000020 __c.3741
00000b3c l     O .text	00000010 __c.3725
00000000 l    df *ABS*	00000000 gpib_tests.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000166e l     O .text	0000000b __c.4538
000014a5 l     O .text	000001c9 __c.4540
00001498 l     O .text	0000000d __c.4548
00000000 l    df *ABS*	00000000 drives_sup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00001d27 l     O .text	00000007 __c.3767
00001d2e l     O .text	0000001d __c.3763
00001d16 l     O .text	00000011 __c.3769
00000000 l    df *ABS*	00000000 amigo.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000160e2 l     F .text	000000ac amigo_overflow_check
00002ce3 l     O .text	00000019 __c.4295
0001618e l     F .text	000000e8 amigo_chs_to_logical
00002c90 l     O .text	0000002b __c.4288
00002d63 l     O .text	00000018 __c.4265
00002d45 l     O .text	0000001e __c.4271
00002d2b l     O .text	0000001a __c.4273
00002d16 l     O .text	00000015 __c.4279
00002cfc l     O .text	0000001a __c.4281
00002cbb l     O .text	00000028 __c.4318
00002c80 l     O .text	00000010 __c.4329
00002c6b l     O .text	00000015 __c.4333
00002c59 l     O .text	00000012 __c.4339
00002c3f l     O .text	0000001a __c.4345
00002c2d l     O .text	00000012 __c.4352
00002c0e l     O .text	0000001f __c.4354
00002bf4 l     O .text	0000001a __c.4361
00002be7 l     O .text	0000000d __c.4363
00002bd8 l     O .text	0000000f __c.4376
00002b71 l     O .text	00000067 __c.4383
00002b0a l     O .text	00000067 __c.4385
00002aa3 l     O .text	00000067 __c.4387
00002a3e l     O .text	00000065 __c.4389
000029ee l     O .text	00000050 __c.4394
0000299e l     O .text	00000050 __c.4396
0000294e l     O .text	00000050 __c.4398
000028fd l     O .text	00000051 __c.4400
000028cb l     O .text	00000032 __c.4412
000028a9 l     O .text	00000022 __c.4414
00002888 l     O .text	00000021 __c.4416
00002867 l     O .text	00000021 __c.4418
00002838 l     O .text	0000002f __c.4420
00002818 l     O .text	00000020 __c.4423
00002804 l     O .text	00000014 __c.4426
000027f0 l     O .text	00000014 __c.4429
000027c7 l     O .text	00000029 __c.4431
000027a6 l     O .text	00000021 __c.4433
00002796 l     O .text	00000010 __c.4436
00002774 l     O .text	00000022 __c.4438
00002758 l     O .text	0000001c __c.4440
0000272f l     O .text	00000029 __c.4442
0000270f l     O .text	00000020 __c.4444
000026e4 l     O .text	0000002b __c.4446
000026c5 l     O .text	0000001f __c.4448
000026b5 l     O .text	00000010 __c.4451
00002683 l     O .text	00000032 __c.4456
00002663 l     O .text	00000020 __c.4460
00002642 l     O .text	00000021 __c.4463
00002623 l     O .text	0000001f __c.4466
00002601 l     O .text	00000022 __c.4469
000025e5 l     O .text	0000001c __c.4472
000025c5 l     O .text	00000020 __c.4475
0000259c l     O .text	00000029 __c.4480
00002571 l     O .text	0000002b __c.4483
00002548 l     O .text	00000029 __c.4486
00000000 l    df *ABS*	00000000 printer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00002db8 l     O .text	00000021 __c.4252
00002de7 l     O .text	00000015 __c.4244
00002dd9 l     O .text	0000000e __c.4246
00002e1e l     O .text	00000022 __c.4234
00002e08 l     O .text	00000016 __c.4236
00002dfc l     O .text	0000000c __c.4238
00002db1 l     O .text	00000007 __c.4258
00002d95 l     O .text	0000001c __c.4263
00002d7b l     O .text	0000001a __c.4265
00000000 l    df *ABS*	00000000 lifutils.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000425e l     O .text	0000000a __c.3971
00004095 l     O .text	000001c9 __c.3973
0000404b l     O .text	00000029 __c.3992
00004033 l     O .text	00000018 __c.3997
0000400e l     O .text	00000025 __c.4009
00003ff5 l     O .text	00000019 __c.4015
00003fd4 l     O .text	00000021 __c.4022
00003f98 l     O .text	0000003c __c.4031
00003f5b l     O .text	0000003d __c.4040
008019c8 l     O .bss	00000020 _lif_ctime_buf.4143
008019a8 l     O .bss	00000020 _timestr.4148
00003f56 l     O .text	00000005 __c.4163
00003f3c l     O .text	0000001a __c.4165
00003f1f l     O .text	0000001d __c.4167
00003f02 l     O .text	0000001d __c.4169
00003ee5 l     O .text	0000001d __c.4171
00003ec8 l     O .text	0000001d __c.4173
00003eab l     O .text	0000001d __c.4175
00003e8e l     O .text	0000001d __c.4177
00003e71 l     O .text	0000001d __c.4179
00003e54 l     O .text	0000001d __c.4181
00003e3a l     O .text	0000001a __c.4183
00003e1e l     O .text	0000001c __c.4185
00003e01 l     O .text	0000001d __c.4187
00003de4 l     O .text	0000001d __c.4189
00003dc8 l     O .text	0000001c __c.4191
00003dac l     O .text	0000001c __c.4193
00003d92 l     O .text	0000001a __c.4195
00003d78 l     O .text	0000001a __c.4197
00003d5c l     O .text	0000001c __c.4199
00003d40 l     O .text	0000001c __c.4201
00003d23 l     O .text	0000001d __c.4203
00003d06 l     O .text	0000001d __c.4205
00003ce9 l     O .text	0000001d __c.4207
00003ccd l     O .text	0000001c __c.4209
00003cb3 l     O .text	0000001a __c.4211
00003cb1 l     O .text	00000002 __c.4213
00003c92 l     O .text	0000001f __c.4220
00003c59 l     O .text	00000039 __c.4222
00003c41 l     O .text	00000018 __c.4224
00003c08 l     O .text	00000039 __c.4226
00003bcf l     O .text	00000039 __c.4228
00003baa l     O .text	00000025 __c.4230
00003b7b l     O .text	0000002f __c.4232
00003b4f l     O .text	0000002c __c.4234
00003b2e l     O .text	00000021 __c.4240
00003aea l     O .text	00000044 __c.4242
00003aa9 l     O .text	00000041 __c.4244
00003a7b l     O .text	0000002e __c.4246
00003a30 l     O .text	0000004b __c.4248
000039e5 l     O .text	0000004b __c.4250
000039ba l     O .text	0000002b __c.4252
0000398e l     O .text	0000002c __c.4254
000038cb l     O .text	0000003a __c.4309
000038ab l     O .text	00000020 __c.4318
0000385e l     O .text	0000004d __c.4343
00003939 l     O .text	00000055 __c.4270
0000392c l     O .text	0000000d __c.4272
0000391f l     O .text	0000000d __c.4280
00003912 l     O .text	0000000d __c.4285
00003905 l     O .text	0000000d __c.4290
00003826 l     O .text	00000038 __c.4355
000037fd l     O .text	00000029 __c.4357
000037ac l     O .text	00000051 __c.4360
0000376d l     O .text	0000003f __c.4373
00003737 l     O .text	00000036 __c.4375
00003704 l     O .text	00000033 __c.4377
000036d1 l     O .text	00000033 __c.4379
000036ba l     O .text	00000017 __c.4389
0000367a l     O .text	00000040 __c.4391
0000362e l     O .text	0000004c __c.4394
000035fe l     O .text	00000030 __c.4396
000035fc l     O .text	00000002 __c.4399
000035f0 l     O .text	0000000c __c.4401
000035e3 l     O .text	0000000d __c.4403
000035d2 l     O .text	00000011 __c.4405
000035bf l     O .text	00000013 __c.4407
000035ac l     O .text	00000013 __c.4409
00003599 l     O .text	00000013 __c.4411
00003572 l     O .text	00000027 __c.4418
0000354d l     O .text	00000025 __c.4420
00003514 l     O .text	00000039 __c.4434
000034f0 l     O .text	00000024 __c.4451
000034e2 l     O .text	0000000e __c.4468
000034d4 l     O .text	0000000e __c.4473
000034c6 l     O .text	0000000e __c.4475
00003493 l     O .text	00000033 __c.4489
00003465 l     O .text	0000002e __c.4491
00003436 l     O .text	0000002f __c.4493
00003406 l     O .text	00000030 __c.4495
000033d7 l     O .text	0000002f __c.4497
000033a7 l     O .text	00000030 __c.4499
00003380 l     O .text	00000027 __c.4501
00003369 l     O .text	00000017 __c.4503
00003352 l     O .text	00000017 __c.4505
00003339 l     O .text	00000019 __c.4507
00003320 l     O .text	00000019 __c.4509
00003312 l     O .text	0000000e __c.4511
000032fa l     O .text	00000018 __c.4535
000032e3 l     O .text	00000017 __c.4537
000032ab l     O .text	00000038 __c.4539
0000329b l     O .text	00000010 __c.4541
000031da l     O .text	0000000e __c.4552
000031e8 l     O .text	00000028 __c.4550
00003266 l     O .text	00000035 __c.4545
00003210 l     O .text	00000056 __c.4547
000031b2 l     O .text	00000028 __c.4560
000031a4 l     O .text	0000000e __c.4563
0000318c l     O .text	00000018 __c.4580
00003179 l     O .text	00000013 __c.4582
0000316b l     O .text	0000000e __c.4584
0000315d l     O .text	0000000e __c.4589
0000313d l     O .text	00000020 __c.4606
00003122 l     O .text	0000001b __c.4608
00003106 l     O .text	0000001c __c.4610
000030d7 l     O .text	0000002f __c.4612
000030c4 l     O .text	00000013 __c.4614
00003094 l     O .text	00000030 __c.4616
00003086 l     O .text	0000000e __c.4618
00003078 l     O .text	0000000e __c.4623
00003053 l     O .text	00000025 __c.4631
00003033 l     O .text	00000020 __c.4633
00003014 l     O .text	0000001f __c.4635
00002fec l     O .text	00000028 __c.4637
00002fdd l     O .text	0000000f __c.4639
00002fb5 l     O .text	00000028 __c.4648
00002f8e l     O .text	00000027 __c.4650
00002f67 l     O .text	00000027 __c.4652
00002f31 l     O .text	00000036 __c.4654
00002f08 l     O .text	00000029 __c.4656
00002ef1 l     O .text	00000017 __c.4658
00002ec8 l     O .text	00000029 __c.4671
00002ea3 l     O .text	00000025 __c.4673
00002e80 l     O .text	00000023 __c.4675
00002e60 l     O .text	00000020 __c.4677
00002e40 l     O .text	00000020 __c.4679
00004074 l     O .text	00000021 __c.3986
00000000 l    df *ABS*	00000000 vfprintf.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000001d6 l     O .text	00000004 __c.2334
000001da l     O .text	00000004 __c.2332
00000000 l    df *ABS*	00000000 ram.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000041d l     O .text	0000000d __c.3730
0000040a l     O .text	00000013 __c.3732
000003f7 l     O .text	00000013 __c.3734
000003d9 l     O .text	0000001e __c.3736
000003bb l     O .text	0000001e __c.3738
0000039d l     O .text	0000001e __c.3740
0000037f l     O .text	0000001e __c.3742
0000036b l     O .text	00000014 __c.3744
00000350 l     O .text	0000001b __c.3759
00000338 l     O .text	00000018 __c.3765
00000313 l     O .text	00000025 __c.3774
00000000 l    df *ABS*	00000000 spi.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00801753 l     O .bss	00000004 SPI0_Speed_value
0000042a l     O .text	0000001d __c.3728
00801751 l     O .bss	00000002 SPI0_Mode_value
00000000 l    df *ABS*	00000000 i2c.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000004a8 l     O .text	00000018 __c.3715
0000048f l     O .text	00000019 __c.3717
00000479 l     O .text	00000016 __c.3719
00005bd4 l     F .text	00000054 i2c_next_op
0000045d l     O .text	0000001c __c.3753
00000447 l     O .text	00000016 __c.3758
00000000 l    df *ABS*	00000000 rtc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
0000051d l     O .text	0000001b __c.3728
000004ff l     O .text	0000001e __c.3730
000004d0 l     O .text	00000011 __c.3745
000004e1 l     O .text	0000001e __c.3738
000004c0 l     O .text	00000010 __c.3752
00000000 l    df *ABS*	00000000 timer.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00006950 l     F .text	0000007c clock_settime.part.2
0000060d l     O .text	0000001d __c.3725
00000603 l     O .text	0000000a __c.3745
00801783 l     O .bss	00000020 _ts_to_str
0080177b l     O .bss	00000008 __clock_elapsed
000005f5 l     O .text	0000000e __c.3759
000005ea l     O .text	0000000b __c.3761
008017a3 l     O .bss	00000002 timers_configured
008017a5 l     O .bss	00000002 timers_enabled
000005d6 l     O .text	00000014 __c.3781
000005c3 l     O .text	00000013 __c.3783
000005b7 l     O .text	0000000c __c.3785
0000059f l     O .text	00000018 __c.3787
0000058e l     O .text	00000011 __c.3789
0000057e l     O .text	00000010 __c.3791
00000000 l    df *ABS*	00000000 gpib_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000eec l     O .text	0000001d __c.3873
0080195c l     O .bss	00000001 _ppr_reg
00000ed9 l     O .text	00000013 __c.3891
00000ec8 l     O .text	00000011 __c.3905
00000ebb l     O .text	0000000d __c.3914
00000ead l     O .text	0000000e __c.3923
00000ea0 l     O .text	0000000d __c.3930
00000e92 l     O .text	0000000e __c.3936
00000000 l    df *ABS*	00000000 _clear_bss.o
00004678 l       .text	00000000 .do_clear_bss_start
00004676 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 delay.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 rs232.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 TWI_AVR8.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 stringsup.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 timer_hal.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 mathio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 ffsystem.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 diskio.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 vector.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _udivmodqi4.o
0001c46c l       .text	00000000 __udivmodqi4_ep
0001c464 l       .text	00000000 __udivmodqi4_loop
00000000 l    df *ABS*	00000000 _udivmodhi4.o
0001c48c l       .text	00000000 __udivmodhi4_ep
0001c47e l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _divmodhi4.o
0001c4b4 l       .text	00000000 __divmodhi4_neg1
0001c4bc l       .text	00000000 __divmodhi4_neg2
0001c4c2 l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
0001c4ea l       .text	00000000 __udivmodsi4_ep
0001c4d0 l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodsi4.o
0001c520 l       .text	00000000 __divmodsi4_neg2
0001c52e l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 calloc.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
0000003b l       *ABS*	00000000 __RAMPZ__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00000000 l    df *ABS*	00000000 _exit.o
0001d036 l       .text	00000000 __stop_program
00015818 g     F .text	0000004a SS80_Selected_Device_Clear
0001c552 g       .text	00000002 .hidden __usmulhisi3
0000eda2 g     F .text	0000000c putchar
000119fc g     F .text	00000022 SS80_is_MTA
000067ec g     F .text	000000ea clock_gettime
00006154 g     F .text	00000096 rtc_init
00011d3a g     F .text	000000a8 GPIB_COMMANDS
00004686  w      .text	00000000 __vector_22
00010e54 g     F .text	00000054 gpib_unread
00004fb6 g     F .text	0000000a set_error
00014a08 g     F .text	00000034 SS80_test_extended_status
000062f2  w    F .text	00000016 strcpy
00007aa0 g     F .text	00000008 asctime
00006d78 g     F .text	00000020 tm_mon_to_ascii
00801a73 g     O .bss	00000235 Fatfs
0000eed6 g     F .text	0000004a mctime
00004686  w      .text	00000000 __vector_28
0000deac g     F .text	0000001a mmc_fast
0000609e g     F .text	000000b6 rtc_write
0001590a g     F .text	00000218 SS80_Transparent_State
0080195d g     O .bss	00000001 gpib_unread_f
00004ea0 g     F .text	00000004 spi_RX_buffer
00012480 g     F .text	00000042 gpib_help
00015680 g     F .text	0000009a SS80_Report
0000fa06 g     F .text	0000006a free_file_descriptor
0001bf02 g     F .text	0000014a setup_lcd
0000eb96 g     F .text	00000096 fatfs_putc
0001c632 g       .text	0000001e .hidden __umulhisi3
008001b8 g     O .data	0000000c cfgfile
00004686  w      .text	00000000 __vector_1
00011ea8 g     F .text	00000184 GPIB
0000e73c g     F .text	00000042 fatfs_help
00006a42 g     F .text	00000016 delete_all_timers
000057d0 g     F .text	0000000c SPI0_TXRX_Byte
0001cb00 g       .text	00000000 __fp_mpack_finite
0000f54c g     F .text	00000086 utime
00801a43 g     O .bss	00000008 __clock
0001bca0 g     F .text	0000007c lcd_time
00012f9e g     F .text	00000054 find_device
000078ce g     F .text	00000128 set_dst
0000f26a g     F .text	00000096 fdevopen
00011a1e g     F .text	00000022 SS80_is_MSA
00004e3c g     F .text	00000060 spi_end
00018460 g     F .text	000000d6 lif_dir2str
0001ca86 g     F .text	00000040 round
000132ac g     F .text	0000017e alloc_device
000051b2 g     F .text	0000006a safefree
0001202c g     F .text	00000130 GPIB_TALK
00004686  w      .text	00000000 __vector_32
0000ff00 g       *ABS*	00000000 __DATA_REGION_LENGTH__
0001c722 g     F .text	00000004 __divsf3
0001c5d6 g       .text	00000036 .hidden __epilogue_restores__
00005584 g     F .text	00000018 uart_rx_count
0001437a g     F .text	0000003a lif_dir_count
00801cd2 g     O .bss	00000009 gpib_timer
0001215c g     F .text	000000f6 GPIB_SECONDARY_ADDRESS
000187e2 g     F .text	0000000e lif_vol_clear
000068d6 g     F .text	0000007a clock_task
00005d5e g     F .text	00000098 i2c_post
000112b0 g     F .text	00000284 gpib_trace_display
0001b70c g     F .text	000000fa lif_rename_file
0001373c g     F .text	00000850 Read_Config
00012f1e g     F .text	00000028 find_type
0001c944 g     F .text	00000022 __fp_round
00012f46 g     F .text	0000001e count_drive_types
00006d98 g     F .text	00000042 Days_Per_Month
00006c32 g     F .text	00000028 execute_timers
0001011c g     F .text	00000176 ls_info
00004686  w      .text	00000000 __vector_34
0000de66 g     F .text	0000001a mmc_spi_begin
0001c7f2 g     F .text	0000000a __fixsfsi
00006b4c g     F .text	0000000c clock_elapsed_begin
0000635a  w    F .text	00000032 reverse
0000d7ba g     F .text	00000006 mmc_disk_status
0001c966 g     F .text	00000044 __fp_split3
00010c28 g     F .text	00000014 gpib_timeout_set
0001c476 g       .text	00000028 .hidden __udivmodhi4
00004e38 g     F .text	00000004 chip_select_init
00006ada g     F .text	00000072 ts_to_str
00008e36 g     F .text	0000000c atol
00007e22 g     F .text	000000aa p_ntoa
0000e11c g     F .text	000000d8 tm_to_fat
00004ff8 g     F .text	00000122 PrintFree
00016be0 g     F .text	000000c2 amigo_cmd_dsj
0000d534 g     F .text	00000024 wait_ready
000001d6 g       .text	00000000 __trampolines_start
000134d4 g     F .text	0000011c hpdir_set_device
0001c8ce g     F .text	00000048 __fp_cmp
00011856 g     F .text	000000ea gpib_write_str
00801cb0 g     O .bss	00000002 errno
000158e8 g     F .text	00000022 SS80_Cancel
0001d038 g       .text	00000000 _etext
0000d96a g     F .text	00000488 mmc_disk_ioctl
000064e2 g     F .text	00000028 MATCH
00800125 g     O .data	00000010 __WDay
0001926e g     F .text	000000b8 lif_writedirindex
0000568e g     F .text	000000ce SPI0_Speed
00006b58 g     F .text	0000007c clock_elapsed_end
0000d3ae g     F .text	000000c4 ff_wtoupper
0001c650 g     F .text	0000000a __subsf3
0001b2d0 g     F .text	00000312 lif_add_lif_file
00801cdb g     O .bss	00000002 lastcmd
00004686  w      .text	00000000 __vector_24
000134d2 g     F .text	00000002 set_Config_Defaults
000064ce g     F .text	00000014 skipspaces
0000bf82 g     F .text	0000026c f_getcwd
00004686  w      .text	00000000 __vector_12
00010864 g     F .text	00000032 gpib_timer_init
000108c6 g     F .text	0000002c ppr_init
0000edae g     F .text	00000068 fgets
0001cf78 g     F .text	000000bc __ultoa_invert
0000559c g     F .text	0000004c uart_get_tail
0000516e g     F .text	00000044 safemalloc
0001b5e2 g     F .text	0000012a lif_del_file
00007c90 g     F .text	00000032 _putc_buffer_fn
0001a50c g     F .text	0000016e lif_ascii_string_to_e010
0000df32 g     F .text	0000001a mmc_ins_status
00800305 g     O .data	00000002 _cmd2
00018778 g     F .text	0000004e lif_lifbcd2timestr
00801cdd g     O .bss	00000200 gpib_iobuff
00017c3e g     F .text	00000028 V2B_MSB
00018618 g     F .text	00000084 lif_time2lifbcd
00012f96 g     F .text	00000008 find_free
00005df6 g     F .text	00000012 i2c_done
00018d32 g     F .text	00000352 lif_check_dir
00004686 g       .text	00000000 __bad_interrupt
00005276 g     F .text	00000090 delayms
000157e4 g     F .text	00000018 SS80_Channel_Independent_Clear
00010044 g     F .text	000000d8 cat
00008ca6 g     F .text	00000028 snprintf_P
00016cf2 g     F .text	00000132 amigo_todo_op
00015862 g     F .text	00000086 SS80_Amigo_Clear
0000f1e0 g     F .text	0000008a perror
0001c04c g     F .text	00000024 gpib_user_task
0001e688 g       *ABS*	00000000 __data_load_end
0000d47e g     F .text	0000000c disk_initialize
0080199b g     O .bss	0000000d plot
00010bd6 g     F .text	00000006 gpib_timer_elapsed_end
00017dbc g     F .text	0000002a lif_free
0000ee46 g     F .text	0000002e puts
0000fe18 g     F .text	000001bc copy
00006d3e g     F .text	00000010 clock_settime
00017de6 g     F .text	0000003e lif_stralloc
000062c2  w    F .text	00000016 islower
00004fca g     F .text	0000002e freeRam
000162fe g     F .text	0000001c amigo_request_logical_address
0000ce64 g     F .text	0000022a f_rename
00004686  w      .text	00000000 __vector_6
00010bb8 g     F .text	0000001e gpib_timer_reset
00019566 g     F .text	000005d4 lif_create_volume
0001cb4c g     F .text	00000130 malloc
00004ec4 g     F .text	00000040 spi_init
0000fdd6 g     F .text	00000042 posix_help
00004686  w      .text	00000000 __vector_31
00010928 g     F .text	00000046 dbf_open
0001bb9c g     F .text	000000c2 copyright
0000becc g     F .text	000000b6 f_chdir
0001c71a g       .text	00000000 __lesf2
00004e08 g     F .text	00000030 chip_deselect
00017bc8 g     F .text	00000076 PRINTER_COMMANDS
00006bd4 g     F .text	00000036 clock_clear
00007aca g     F .text	000000ee initialize_clock
0000df30 g     F .text	00000002 mmc_power_off
0000e116 g     F .text	00000006 mmc_wp_status
0000ea90 g     F .text	00000106 fatfs_getc
00801edd g     O .bss	00000001 listening_last
0000d472 g     F .text	0000000c disk_status
00800102 g     O .data	00000002 __malloc_heap_start
000001d6 g       .text	00000000 __trampolines_end
00006d14 g     F .text	0000002a clock_getres
00005b7c g     F .text	00000058 i2c_task
0001a67a g     F .text	00000210 lif_add_ascii_file_as_e010_wrapper
00010e0e g     F .text	00000046 gpib_assert_ifc
00018602 g     F .text	00000016 lif_BCD2BIN
0000598c g     F .text	00000028 TWI_SendByte
00017e24 g     F .text	00000054 lif_open
00007bb8 g     F .text	000000d8 display_clock
000108f2 g     F .text	0000001a ppr_bit_set
00004686  w      .text	00000000 __vector_3
000108be g     F .text	00000008 ppr_reg
0001170a g     F .text	00000008 gpib_decode
00005306 g     F .text	00000022 uart_rx_flush
0000f0ee g     F .text	00000004 rmdir
000069cc g     F .text	00000076 set_timers
00801a67 g     O .bss	0000000c dst
0000f164 g     F .text	0000007c readdir
0001c9aa g     F .text	0000000e __fp_zero
0000c848 g     F .text	0000002a f_closedir
0000d4ca g     F .text	00000014 disk_ioctl
0001b914 g     F .text	00000274 lif_tests
000083b2 g     F .text	00000084 _puts_pad
00004ea4 g     F .text	00000020 spi_TX
000187f0 g     F .text	0000038c lif_dump_vol
00012252 g     F .text	0000004c listen_cleanup
0001869c g     F .text	000000a0 lif_lifbcd2time
00018536 g     F .text	000000be lif_str2dir
0000585e g     F .text	0000002c SPI0_TXRX
00800307 g     O .data	00000015 _line1
0001c71a g       .text	00000000 __nesf2
000135f0 g     F .text	00000020 hpdir_set_parameters
00005fb6 g     F .text	0000000e BINtoBCD
0000f632 g     F .text	000000d0 lseek
00004686  w      .text	00000000 __vector_23
0001d038 g       *ABS*	00000000 __data_load_start
00801829 g     O .bss	00000004 _mmc_clock
00004648 g       .text	00000000 __dtors_end
00011aea g     F .text	00000012 gpib_init_devices
000063fe  w    F .text	00000050 strncasecmp
008021a3 g       .bss	00000000 __bss_end
00018090 g     F .text	00000056 lif_chars
0001c55e g       .text	00000014 .hidden __muluhisi3
000127a6 g     F .text	0000006a print_tok_str
00004686  w      .text	00000000 __vector_30
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
00005e08 g     F .text	00000012 i2c_ok
00013f8c g     F .text	000002f2 format_drives
00004686  w      .text	00000000 __vector_25
0080219f g     O .bss	00000002 __brkval
00006f96 g     F .text	0000002a gmtime_r
0000ef7a g     F .text	00000052 chmod
00006c5a g     F .text	000000ba init_timers
00011a84 g     F .text	00000022 AMIGO_is_MSA
000190d0 g     F .text	000000d0 lif_checkdirindex
0000cb36 g     F .text	0000014e f_unlink
00010eb4 g     F .text	00000020 gpib_control_pin_read
00010a56 g     F .text	000000ae dbf_open_read
0000df2e g     F .text	00000002 mmc_power_on
00008d6c g     F .text	000000bc strtol
00010bb2 g     F .text	00000006 gpib_timer_elapsed_begin
0001cf62 g     F .text	00000016 strnlen
00005328 g     F .text	00000134 uart_ubr
0000d31e g     F .text	00000066 ff_uni2oem
00005ace g     F .text	000000ae i2c_check_op
0001a45a g     F .text	000000b2 lif_e010_pad_sector
00017d0e g     F .text	00000042 lif_help
000065ba g     F .text	000000b8 split_args
0000f072 g     F .text	0000003e rename
00010a1c g     F .text	0000003a dbf_close
00017822 g     F .text	000000be receive_plot_flush
0001c73c g     F .text	000000d4 __divsf3x
00004686  w      .text	00000000 __vector_11
00801ede g     O .bss	00000001 spoll
0000ef20 g     F .text	0000001c basename
00014a3c g     F .text	000000c6 SS80_display_extended_status
000176d6 g     F .text	00000130 AMIGO_COMMANDS
0001cd8e g     F .text	000001b0 __ftoa_engine
000181ce g     F .text	0000007a lif_fixname
0000d882 g     F .text	000000e8 mmc_disk_write
00004648  w      .text	00000000 __init
0001cb18 g     F .text	00000034 calloc
0001b060 g     F .text	00000270 lif_extract_lif_as_lif
00006778 g     F .text	00000026 install_timers_isr
00013610 g     F .text	0000012c Post_Config
00010896 g     F .text	00000014 reverse_8bits
00014c04 g     F .text	000000e0 SS80_describe
00005620 g     F .text	0000002c uart_getchar
00007ecc g     F .text	0000020e p_ftoa
0000f8f2 g     F .text	000000dc write
000180e6 g     F .text	00000074 lif_B2S
0001c9b8 g       .text	00000000 __gtsf2
0000fd96 g     F .text	00000040 fprintf
0001120c g     F .text	000000a4 gpib_decode_header
00011534 g     F .text	000001d6 gpib_read_byte
000126a4 g     F .text	00000044 tok_index
000157fc g     F .text	0000001c SS80_Universal_Device_Clear
0001a88a g     F .text	00000278 lif_add_ascii_file_as_e010
0000679e g     F .text	0000004e __vector_13
00006334  w    F .text	00000026 strcat
008019ec g     O .bss	00000057 uarts
00004fc0 g     F .text	0000000a clear_error
0001c9dc g       .text	00000000 __mulsf3_pse
00004686  w      .text	00000000 __vector_17
00004f94 g     F .text	00000022 spi_TXRX
0001c922 g     F .text	00000006 __fp_nan
00012ff2 g     F .text	000001c6 set_active_device
00004686  w      .text	00000000 __vector_19
000066f8 g     F .text	0000007c get_value
00005836 g     F .text	00000028 SPI0_TX
0001815a g     F .text	0000003a lif_checkname
0000ef3c g     F .text	0000003e chdir
00004686  w      .text	00000000 __vector_7
0001696a g     F .text	000000c8 amigo_buffered_read_execute
0000df94 g     F .text	00000182 mmc_init
0000e77e g     F .text	00000176 fatfs_ls
0001c916 g     F .text	0000000c __fp_inf
00008cce g     F .text	00000028 sprintf_P
0001c61a g       .text	00000018 .hidden __cmpdi2_s8
0000f300 g     F .text	00000088 fat_time_to_unix
0000f702 g     F .text	0000004e fseek
00801ca8 g     O .bss	00000004 AccSize
000187c6 g     F .text	0000000c lif_image_clear
0000ded8 g     F .text	0000000e mmc_set_ms_timeout
00006774 g     F .text	00000004 enable_system_task
0000decc g     F .text	00000006 mmc_spi_RX_buffer
000070b6 g     F .text	00000058 is_dst
0000545c g     F .text	0000008e uart_init
00014740 g     F .text	00000078 SS80ControllerPack
00801ee7 g     O .bss	00000204 Devices
0000466e g       .text	00000010 .hidden __do_clear_bss
0001cf3e g     F .text	00000016 strnlen_P
0000575c g     F .text	00000074 SPI0_Mode
00810000 g       .comment	00000000 __eeprom_end
00019dfa g     F .text	000001f4 lif_open_volume
0000ffd4 g     F .text	00000070 testpage
00017ad6 g     F .text	000000f2 printer_buffer
00005a72 g     F .text	0000005c TWI_WritePacket
0000be9a g     F .text	00000032 f_close
0001c9d8 g     F .text	000000ca __mulsf3x
00017806 g     F .text	0000001c printer_init
0000de88 g     F .text	0000001a mmc_slow
0000648e g     F .text	00000020 sep
00800100 g     O .data	00000002 __malloc_heap_end
000108aa g     F .text	00000014 ppr_set
0001672c g     F .text	0000012a amigo_format
0000f750 g     F .text	000000da read
00019326 g     F .text	00000030 lif_writedirEOF
0000de80 g     F .text	00000008 mmc_spi_end
0001c858 g       .text	00000000 __floatsisf
00016ca2 g     F .text	00000050 amigo_cmd_clear
00000000 g       .text	00000000 __vectors
00019356 g     F .text	00000210 lif_updatefree
0000588a g     F .text	0000002a SPI0_RX
0000b7d6 g     F .text	00000296 f_read
008019ea g     O .bss	00000002 rtc_ok
000119da g     F .text	00000022 SS80_is_MLA
000054ea g     F .text	00000046 uart_rx_interrupt
0000564c g     F .text	00000006 uart0_getchar
00004686  w      .text	00000000 __vector_27
00010da2 g     F .text	0000006c gpib_disable_PPR
0000e244 g     F .text	000000e0 fatfs_scan_files
00004dd6 g     F .text	00000032 chip_select
00801750 g       .data	00000000 __data_end
000109e2 g     F .text	0000003a dbf_lseek
00015f0e g     F .text	000001d4 SS80_COMMANDS
0000644e g     F .text	00000040 stralloc
0000c872 g     F .text	00000088 f_readdir
00801edf g     O .bss	00000002 current
00014d36 g     F .text	0000004e SS80_Check_Volume
0000de2e g     F .text	00000038 mmc_install_timer
00007dec g     F .text	00000036 pch
00008d30 g     F .text	0000003c atodigit
0001c440 g       .text	0000001e .hidden __mulsi3
00006308  w    F .text	0000002c strncpy
0000f0b0 g     F .text	0000003e unlink
0000f8c8 g     F .text	0000002a sync
00015758 g     F .text	0000008c SS80_init
0001c71a g       .text	00000000 __eqsf2
0000fae2 g     F .text	0000008a new_file_descriptor
000063c0  w    F .text	0000003e strcasecmp
0001c57e g       .text	00000020 .hidden __negdi2
00017cce g     F .text	00000040 B2V_LSB
0000e636 g     F .text	00000106 fatfs_filinfo_list
0000d08e g     F .text	0000009a f_chmod
00801a4b g     O .bss	00000018 timer_irq
00012f64 g     F .text	00000032 type_to_str
00000000  w      .text	00000000 __vector_default
0001c49e g       .text	00000026 .hidden __divmodhi4
000147b8 g     F .text	00000198 SS80UnitPack
00010b04 g     F .text	000000ae dbf_open_write
00004686  w      .text	00000000 __vector_5
0000ddf2 g     F .text	0000003c mmc_disk_timerproc
00801777 g     O .bss	00000004 i2c
000077c2 g     F .text	0000010c find_dst
00800182 g     O .data	00000034 gpib_tokens
00004686  w      .text	00000000 __vector_33
000126e8 g     F .text	0000003e tok_name
00011712 g     F .text	00000144 gpib_read_str
00019fee g     F .text	000003aa lif_dir
00016a32 g     F .text	000001ae amigo_buffered_write
0001c070 g     F .text	00000014 task
0001bd1c g     F .text	00000076 i2c_lcd_test
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
00014b02 g     F .text	00000102 SS80_send_status
0001c540 g       .text	00000012 .hidden __tablejump2__
00011afc g     F .text	00000124 gpib_trace_task
00800135 g     O .data	00000001 Stat
0000f4bc g     F .text	00000090 unix_time_to_fat
00004648 g       .text	00000000 __ctors_start
0000d670 g     F .text	0000014a mmc_disk_initialize
00801a63 g     O .bss	00000004 __tzone
0000e1f4 g     F .text	00000026 get_fattime
0080031c g     O .data	00000002 _cmd1
0000f82a g     F .text	00000038 fread
000187d2 g     F .text	00000010 lif_dir_clear
0001654c g     F .text	00000052 amigo_increment
0001229e g     F .text	00000122 GPIB_LISTEN
008001b6 g     O .data	00000002 debuglevel
0080182d g     O .bss	00000002 _mmc_timeout
00004654 g       .text	0000001a .hidden __do_copy_data
0080027c g     O .data	00000074 faults
0000fcaa g     F .text	000000d4 posix_fopen_modes_to_open
00017c90 g     F .text	0000003e B2V_MSB
000185f4 g     F .text	0000000e lif_BIN2BCD
0001cac6 g     F .text	00000036 __fp_mintl
0001c71a g     F .text	00000008 __cmpsf2
0001c60c g       .text	0000000e .hidden __xload_1
00007018 g     F .text	0000005c gettimeofday
0001c936 g     F .text	0000000e __fp_pscB
0001c976 g       .text	00000000 __fp_splitA
0001873c g     F .text	0000003c lif_ctime_gmt
00017f2c g     F .text	000000a2 lif_read
0000fd7e g     F .text	00000018 fopen
00801750 g       .bss	00000000 __bss_start
000079f6 g     F .text	000000aa asctime_r
000071a6 g     F .text	00000008 localtime
0001cf54 g     F .text	0000000e memset
00016e24 g     F .text	00000108 amigo_todo
00013472 g     F .text	00000032 push_state
00007780 g     F .text	00000042 setdate
0001c084 g     F .text	000003bc main
000058b4 g     F .text	00000018 TWI_Init
008002f0 g     O .data	00000015 _line2
0001247e g     F .text	00000002 talk_cleanup
00005fd6 g     F .text	000000c8 rtc_run
0000f5fc g     F .text	00000036 ftell
00801ee1 g     O .bss	00000001 talking
0000bd9a g     F .text	00000100 f_sync
00801960 g     O .bss	00000002 AMIGOs
0001c71a g       .text	00000000 __ltsf2
0000568a g     F .text	00000004 uart_keyhit
0001342a g     F .text	00000048 init_Devices
00004686  w      .text	00000000 __vector_4
00019084 g     F .text	0000004c lif_close_volume
0000dea2 g     F .text	0000000a mmc_spi_init
000191a0 g     F .text	000000ce lif_readdirindex
000058cc g     F .text	000000c0 TWI_StartTransmission
00016f54 g     F .text	000005cc Amigo_Command
0000fad2 g     F .text	00000010 fclose
0000ed96 g     F .text	0000000c getchar
00016490 g     F .text	000000bc amigo_send_status
00016276 g     F .text	00000088 amigo_init
00800136 g     O .data	0000004a sys_errlist
00007074 g     F .text	00000042 time
0000f128 g     F .text	0000003c opendir
0001cafc g     F .text	0000001c __fp_mpack
000131b8 g     F .text	000000f4 SS80_Set_Defaults
00006ff4 g     F .text	00000024 settimezone
0000b3ee g     F .text	00000078 f_mount
0000e342 g     F .text	000002f4 fatfs_status
00011a62 g     F .text	00000022 AMIGO_is_MTA
0001c530 g       .text	00000010 .hidden __negsi2
0000c766 g     F .text	000000e2 f_opendir
0001571a g     F .text	0000003e Clear_Common
0001bc5e g     F .text	00000042 help
00010d36 g     F .text	0000006c gpib_enable_PPR
000165f4 g     F .text	00000138 amigo_verify
0001c9c0 g     F .text	00000004 __mulsf3
00006672 g     F .text	00000086 get_token
0001631a g     F .text	000000ba amigo_request_status
0001285c g     F .text	000001b6 display_Addresses
0000f5d2 g     F .text	0000002a fileno_to_fatfs
0000d384 g     F .text	0000002a ff_oem2uni
000063a6  w    F .text	0000001a strcmp
00010cdc g     F .text	0000005a gpib_state_init
00000000  w      *ABS*	00000000 __heap_end
00010bdc g     F .text	0000004c gpib_timer_task
0000521c g     F .text	0000005a delayus
000134a4 g     F .text	0000002e pop_state
00004686  w      .text	00000000 __vector_9
0000efcc g     F .text	0000004a getcwd
00004686  w      .text	00000000 __vector_2
0000650a g     F .text	00000028 MATCHI
00016f2c g     F .text	00000028 amigo_check_unit
0001c674 g     F .text	000000c6 __addsf3x
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
0000c1ee g     F .text	00000578 f_lseek
0000ec2c g     F .text	000000ac fgetc
00801ee2 g     O .bss	00000001 secondary
00008c5a g     F .text	0000004c vsnprintf_P
00007aa8 g     F .text	00000022 ctime_gm
0001c9b8 g     F .text	00000008 __gesf2
0001427e g     F .text	000000fc hpdir_init
000163d4 g     F .text	000000bc amigo_send_logical_address
00014ce4 g     F .text	00000052 SS80_Check_Unit
00011940 g     F .text	0000009a gpib_file_init
0080010a g     O .data	00000001 _cs_pin
0080195e g     O .bss	00000002 gpib_log_fp
00004686  w      .text	00000000 __vector_21
00004686  w      .text	00000000 __vector_15
000080da g     F .text	000002d8 p_etoa
00012810 g     F .text	0000004c print_tok
00015b96 g     F .text	000002c4 SS80_locate_and_read
00005ca6 g     F .text	000000b8 i2c_init
000124c2 g     F .text	000001e2 gpib_tests
00801cac g     O .bss	00000002 AccDirs
0000d318 g     F .text	00000006 ff_memfree
00801968 g     O .bss	00000002 PRINTERp
0001c928 g     F .text	0000000e __fp_pscA
0001c45e g       .text	00000018 .hidden __udivmodqi4
00801ee3 g     O .bss	00000001 listening
00011c20 g     F .text	0000011a gpib_error_test
00801964 g     O .bss	00000002 SS80s
0000c8fa g     F .text	0000007c f_stat
00010c82 g     F .text	0000005a gpib_bus_init
0000ecd8 g     F .text	000000a4 fputc
00004686  w      .text	00000000 __vector_29
00005676 g     F .text	00000014 uart0_putchar
00008cf6 g     F .text	0000003a printf_P
0001c576 g       .text	00000006 .hidden __mulohisi3
00015e5a g     F .text	000000b4 SS80_Execute_State
0000753e g     F .text	00000008 timegm
00014d84 g     F .text	000004ee SS80_Command_State
00006fd6 g     F .text	0000001e gettimezone
008021a3 g       .comment	00000000 __heap_start
000064ae g     F .text	00000020 trim_tail
00010eec g     F .text	00000320 gpib_write_byte
000178e0 g     F .text	000000b0 printer_close
00018b7c g     F .text	000001b6 lif_check_volume
0000710e g     F .text	00000098 localtime_r
008001c4 g     O .data	000000b8 tokens
00801cae g     O .bss	00000002 AccFiles
000061ea g     F .text	000000d8 rtc_read
00004648 g       .text	00000000 __dtors_start
00801757 g     O .bss	00000020 i2c_op
00010c3c g     F .text	00000046 gpib_bus_read_init
00004648 g       .text	00000000 __ctors_end
0001c508 g       .text	00000028 .hidden __divmodsi4
00010ea8 g     F .text	0000000c gpib_bus_read
0000f388 g     F .text	00000134 stat
000040ff  w      *ABS*	00000000 __stack
0000f862 g     F .text	00000066 syncfs
00017d50 g     F .text	0000006c lif_calloc
0000f9ce g     F .text	00000038 fwrite
00011de2 g     F .text	000000c6 Send_Identify
00801827 g     O .bss	00000002 _mmc_pre
0000ded2 g     F .text	00000006 mmc_spi_TXRX
00801750 g       .data	00000000 _edata
000059f0 g     F .text	00000082 TWI_ReadPacket
0000d128 g     F .text	000000b2 f_utime
00012a12 g     F .text	0000050c display_Config
0001c554 g       .text	00000008 .hidden __usmulhisi3_tail
008021a3 g       .comment	00000000 _end
000059b4 g     F .text	0000003c TWI_ReceiveByte
00017ec2 g     F .text	0000006a lif_seek_msg
00004f04 g     F .text	00000090 spi_begin
00017990 g     F .text	00000146 printer_open
0000ba6c g     F .text	0000032e f_write
00004686  w      .text	00000000 __vector_8
0001a398 g     F .text	000000c2 lif_find_file
00005e1a g     F .text	0000019c __vector_26
00007cda g     F .text	00000112 bin2num
0001c740 g       .text	00000000 __divsf3_pse
00800106 g     O .data	00000004 _spi_clock
00801962 g     O .bss	00000002 AMIGOp
0000dec6 g     F .text	00000006 mmc_spi_TX_buffer
0000b466 g     F .text	00000370 f_open
00018248 g     F .text	0000011c lif_vol2str
0000d4aa g     F .text	00000020 disk_write
00010292 g     F .text	00000228 ls
0001d034  w      .text	00000000 .hidden exit
000123c0 g     F .text	000000be gpib_task
0001c854 g     F .text	0000007a __floatunsisf
00016856 g     F .text	00000114 amigo_buffered_read_command
00006a58 g     F .text	00000082 subtract_timespec
0001c49e g       .text	00000000 .hidden _div
00017520 g     F .text	000001b6 Amigo_Execute
0000638c  w    F .text	0000001a strupper
008021a1 g     O .bss	00000002 __flp
00005c28 g     F .text	0000007e i2c_op_add
00012726 g     F .text	00000080 print_tok_val
0001c4c4 g       .text	00000044 .hidden __udivmodsi4
00011ac8 g     F .text	00000022 PRINTER_is_MTA
00019b3a g     F .text	000002c0 lif_newdir
000143b4 g     F .text	0000038c hpdir_find_drive
00011aa6 g     F .text	00000022 PRINTER_is_MLA
00008e28 g     F .text	0000000e atoi
00006dda g     F .text	000001bc time_to_tm
0000e21a g     F .text	0000002a put_rc
0000ee74 g     F .text	00000038 fileno
0080010b g     O .data	0000001a __Month
000057dc g     F .text	0000005a SPI0_Init
0000cc84 g     F .text	000001e0 f_mkdir
0001c7fc g     F .text	00000058 __fixunssfsi
008020eb g     O .bss	000000b4 hpdir
00007546 g     F .text	0000023a setdate_r
00006532 g     F .text	00000054 MATCHARGS
00004e9c g     F .text	00000004 spi_TX_buffer
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
0001d034 g       .text	00000000 .hidden _exit
00017fce g     F .text	000000c2 lif_write
00018194 g     F .text	0000003a lif_S2B
00801ee4 g     O .bss	00000001 talking_last
0001096e g     F .text	0000003a dbf_read
00005fc4 g     F .text	00000012 BCDtoBIN
000071ae g     F .text	00000390 normalize
00006fc0 g     F .text	00000016 gmtime
00004686  w      .text	00000000 __vector_14
0000e970 g     F .text	00000120 fatfs_tests
0001b806 g     F .text	0000010e lif_create_image
0000d48a g     F .text	00000020 disk_read
0000fb6c g     F .text	0000013e open
000062d8  w    F .text	0000001a toupper
0001535c g     F .text	00000324 SS80_locate_and_write
0001bb88 g     F .text	00000014 lcd_task
00008436 g     F .text	00000824 _printf_fn
00004686  w      .text	00000000 __vector_10
0001090c g     F .text	0000001c ppr_bit_clr
00801cb2 g     O .bss	00000020 __iob
0000d1da g     F .text	00000138 f_getlabel
00018364 g     F .text	000000fc lif_str2vol
0000c976 g     F .text	000001c0 f_getfree
0000ee16 g     F .text	00000030 fputs
00004686  w      .text	00000000 __vector_16
00006586 g     F .text	00000034 MATCHI_LEN
00800100 g       .data	00000000 __data_start
0000511a g     F .text	00000054 safecalloc
0000eeac g     F .text	0000002a fileno_to_stream
00015272 g     F .text	000000ea SS80_cmd_seek
0000f0f2 g     F .text	00000036 closedir
00004686  w      .text	00000000 __vector_18
00000003 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00014950 g     F .text	000000b8 SS80VolumePack
0000d7c0 g     F .text	000000c2 mmc_disk_read
0000e8f4 g     F .text	0000007c mmc_test
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
00017e78 g     F .text	0000004a lif_stat
000055e8 g     F .text	00000006 uart_rx_byte
00015b22 g     F .text	00000074 SS80_error_return
00800104 g     O .data	00000002 __malloc_margin
00005530 g     F .text	00000054 __vector_20
0000f016 g     F .text	0000005c mkdir
00005652 g     F .text	00000024 uart_putchar
000104ba g     F .text	000003aa posix_tests
00801ee5 g     O .bss	00000002 gpib_unread_data
0000fa70 g     F .text	00000062 close
0001c652 g       .text	00000000 __addsf3
0001c59e g       .text	00000038 .hidden __prologue_saves__
00011a40 g     F .text	00000022 AMIGO_is_MLA
0000dee6 g     F .text	00000048 mmc_test_timeout
0001ab02 g     F .text	0000055e lif_extract_e010_as_ascii
0000468a g     F .text	0000074c vfprintf
0001659e g     F .text	00000056 amigo_seek
00010ed4 g     F .text	00000018 gpib_handshake_pin_read
00006c0a g     F .text	00000028 enable_timers
0000e324 g     F .text	0000001e fatfs_fstype
00017c66 g     F .text	0000002a V2B_LSB
000109a8 g     F .text	0000003a dbf_write
00801966 g     O .bss	00000002 SS80p
0000d312 g     F .text	00000006 ff_memalloc
0001cc7c g     F .text	00000112 free
0001c9ac g       .text	00000000 __fp_szero
000055ee g     F .text	00000032 uart_tx_byte
0001c572 g       .text	00000004 .hidden __mulshisi3



Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 23 	jmp	0x4648	; 0x4648 <__ctors_end>
       4:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
       8:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
       c:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      10:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      14:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      18:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      1c:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      20:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      24:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      28:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      2c:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      30:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      34:	0c 94 cf 33 	jmp	0x679e	; 0x679e <__vector_13>
      38:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      3c:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      40:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      44:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      48:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      4c:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      50:	0c 94 98 2a 	jmp	0x5530	; 0x5530 <__vector_20>
      54:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      58:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      5c:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      60:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      64:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      68:	0c 94 0d 2f 	jmp	0x5e1a	; 0x5e1a <__vector_26>
      6c:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      70:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      74:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      78:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      7c:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      80:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      84:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      88:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__bad_interrupt>
      8c:	94 43       	sbci	r25, 0x34	; 52
      8e:	e7 44       	sbci	r30, 0x47	; 71
      90:	c4 43       	sbci	r28, 0x34	; 52
      92:	c0 44       	sbci	r28, 0x40	; 64
      94:	c0 44       	sbci	r28, 0x40	; 64
      96:	e7 44       	sbci	r30, 0x47	; 71
      98:	e7 44       	sbci	r30, 0x47	; 71
      9a:	e7 44       	sbci	r30, 0x47	; 71
      9c:	e7 44       	sbci	r30, 0x47	; 71
      9e:	e7 44       	sbci	r30, 0x47	; 71
      a0:	e7 44       	sbci	r30, 0x47	; 71
      a2:	e7 44       	sbci	r30, 0x47	; 71
      a4:	e7 44       	sbci	r30, 0x47	; 71
      a6:	94 43       	sbci	r25, 0x34	; 52
      a8:	8e 43       	sbci	r24, 0x3E	; 62
      aa:	e7 44       	sbci	r30, 0x47	; 71
      ac:	e7 44       	sbci	r30, 0x47	; 71
      ae:	e7 44       	sbci	r30, 0x47	; 71
      b0:	e7 44       	sbci	r30, 0x47	; 71
      b2:	be 43       	sbci	r27, 0x3E	; 62
      b4:	e7 44       	sbci	r30, 0x47	; 71
      b6:	e7 44       	sbci	r30, 0x47	; 71
      b8:	94 43       	sbci	r25, 0x34	; 52
      ba:	e7 44       	sbci	r30, 0x47	; 71
      bc:	e7 44       	sbci	r30, 0x47	; 71
      be:	e7 44       	sbci	r30, 0x47	; 71
      c0:	e7 44       	sbci	r30, 0x47	; 71
      c2:	e7 44       	sbci	r30, 0x47	; 71
      c4:	e7 44       	sbci	r30, 0x47	; 71
      c6:	e7 44       	sbci	r30, 0x47	; 71
      c8:	e7 44       	sbci	r30, 0x47	; 71
      ca:	e7 44       	sbci	r30, 0x47	; 71
      cc:	94 43       	sbci	r25, 0x34	; 52
      ce:	e2 44       	sbci	r30, 0x42	; 66
      d0:	c4 43       	sbci	r28, 0x34	; 52
      d2:	c0 44       	sbci	r28, 0x40	; 64
      d4:	c0 44       	sbci	r28, 0x40	; 64
      d6:	e7 44       	sbci	r30, 0x47	; 71
      d8:	e7 44       	sbci	r30, 0x47	; 71
      da:	e7 44       	sbci	r30, 0x47	; 71
      dc:	e7 44       	sbci	r30, 0x47	; 71
      de:	e7 44       	sbci	r30, 0x47	; 71
      e0:	e7 44       	sbci	r30, 0x47	; 71
      e2:	e7 44       	sbci	r30, 0x47	; 71
      e4:	e7 44       	sbci	r30, 0x47	; 71
      e6:	94 43       	sbci	r25, 0x34	; 52
      e8:	8e 43       	sbci	r24, 0x3E	; 62
      ea:	e7 44       	sbci	r30, 0x47	; 71
      ec:	e7 44       	sbci	r30, 0x47	; 71
      ee:	dd 44       	sbci	r29, 0x4D	; 77
      f0:	e7 44       	sbci	r30, 0x47	; 71
      f2:	be 43       	sbci	r27, 0x3E	; 62
      f4:	e7 44       	sbci	r30, 0x47	; 71
      f6:	e7 44       	sbci	r30, 0x47	; 71
      f8:	94 43       	sbci	r25, 0x34	; 52
      fa:	09 45       	sbci	r16, 0x59	; 89
      fc:	f0 45       	sbci	r31, 0x50	; 80
      fe:	ff 44       	sbci	r31, 0x4F	; 79
     100:	5d 45       	sbci	r21, 0x5D	; 93
     102:	44 45       	sbci	r20, 0x54	; 84
     104:	f0 45       	sbci	r31, 0x50	; 80
     106:	f0 45       	sbci	r31, 0x50	; 80
     108:	f0 45       	sbci	r31, 0x50	; 80
     10a:	f0 45       	sbci	r31, 0x50	; 80
     10c:	f0 45       	sbci	r31, 0x50	; 80
     10e:	f0 45       	sbci	r31, 0x50	; 80
     110:	f0 45       	sbci	r31, 0x50	; 80
     112:	f0 45       	sbci	r31, 0x50	; 80
     114:	13 45       	sbci	r17, 0x53	; 83
     116:	27 45       	sbci	r18, 0x57	; 87
     118:	f0 45       	sbci	r31, 0x50	; 80
     11a:	f0 45       	sbci	r31, 0x50	; 80
     11c:	f0 45       	sbci	r31, 0x50	; 80
     11e:	f0 45       	sbci	r31, 0x50	; 80
     120:	fb 44       	sbci	r31, 0x4B	; 75
     122:	f0 45       	sbci	r31, 0x50	; 80
     124:	f0 45       	sbci	r31, 0x50	; 80
     126:	27 45       	sbci	r18, 0x57	; 87
     128:	f0 45       	sbci	r31, 0x50	; 80
     12a:	f0 45       	sbci	r31, 0x50	; 80
     12c:	f0 45       	sbci	r31, 0x50	; 80
     12e:	f0 45       	sbci	r31, 0x50	; 80
     130:	f0 45       	sbci	r31, 0x50	; 80
     132:	f0 45       	sbci	r31, 0x50	; 80
     134:	f0 45       	sbci	r31, 0x50	; 80
     136:	f0 45       	sbci	r31, 0x50	; 80
     138:	f0 45       	sbci	r31, 0x50	; 80
     13a:	09 45       	sbci	r16, 0x59	; 89
     13c:	8b 45       	sbci	r24, 0x5B	; 91
     13e:	ff 44       	sbci	r31, 0x4F	; 79
     140:	5d 45       	sbci	r21, 0x5D	; 93
     142:	44 45       	sbci	r20, 0x54	; 84
     144:	f0 45       	sbci	r31, 0x50	; 80
     146:	f0 45       	sbci	r31, 0x50	; 80
     148:	f0 45       	sbci	r31, 0x50	; 80
     14a:	f0 45       	sbci	r31, 0x50	; 80
     14c:	f0 45       	sbci	r31, 0x50	; 80
     14e:	f0 45       	sbci	r31, 0x50	; 80
     150:	f0 45       	sbci	r31, 0x50	; 80
     152:	f0 45       	sbci	r31, 0x50	; 80
     154:	13 45       	sbci	r17, 0x53	; 83
     156:	27 45       	sbci	r18, 0x57	; 87
     158:	f0 45       	sbci	r31, 0x50	; 80
     15a:	f0 45       	sbci	r31, 0x50	; 80
     15c:	8b 45       	sbci	r24, 0x5B	; 91
     15e:	f0 45       	sbci	r31, 0x50	; 80
     160:	fb 44       	sbci	r31, 0x4B	; 75
     162:	f0 45       	sbci	r31, 0x50	; 80
     164:	f0 45       	sbci	r31, 0x50	; 80
     166:	27 45       	sbci	r18, 0x57	; 87
     168:	07 6a       	ori	r16, 0xA7	; 167
     16a:	11 6a       	ori	r17, 0xA1	; 161
     16c:	19 6a       	ori	r17, 0xA9	; 169
     16e:	1c 6a       	ori	r17, 0xAC	; 172
     170:	1f 6a       	ori	r17, 0xAF	; 175
     172:	22 6a       	ori	r18, 0xA2	; 162
     174:	25 6a       	ori	r18, 0xA5	; 165
     176:	28 6a       	ori	r18, 0xA8	; 168
     178:	2b 6a       	ori	r18, 0xAB	; 171
     17a:	ed 87       	std	Y+13, r30	; 0x0d
     17c:	12 88       	ldd	r1, Z+18	; 0x12
     17e:	39 88       	ldd	r3, Y+17	; 0x11
     180:	53 88       	ldd	r5, Z+19	; 0x13
     182:	5c 88       	ldd	r5, Y+20	; 0x14
     184:	7e 88       	ldd	r7, Y+22	; 0x16
     186:	99 88       	ldd	r9, Y+17	; 0x11
     188:	a9 88       	ldd	r10, Y+17	; 0x11
     18a:	f1 88       	ldd	r15, Z+17	; 0x11
     18c:	c5 88       	ldd	r12, Z+21	; 0x15
     18e:	fb 8a       	std	Y+19, r15	; 0x13
     190:	03 8b       	std	Z+19, r16	; 0x13
     192:	07 8b       	std	Z+23, r16	; 0x17
     194:	2b 8b       	std	Y+19, r18	; 0x13
     196:	34 8b       	std	Z+20, r19	; 0x14
     198:	79 8b       	std	Y+17, r23	; 0x11
     19a:	46 8b       	std	Z+22, r20	; 0x16
     19c:	46 8b       	std	Z+22, r20	; 0x16
     19e:	3e 8b       	std	Y+22, r19	; 0x16
     1a0:	92 9c       	mul	r9, r2
     1a2:	64 9d       	mul	r22, r4
     1a4:	a0 9d       	mul	r26, r0
     1a6:	cf 9d       	mul	r28, r15
     1a8:	df 9d       	mul	r29, r15
     1aa:	fc 9d       	mul	r31, r12
     1ac:	5c 9e       	mul	r5, r28
     1ae:	6b 9f       	mul	r22, r27
     1b0:	6b 9f       	mul	r22, r27
     1b2:	6b 9f       	mul	r22, r27
     1b4:	90 9e       	mul	r9, r16
     1b6:	bc 9e       	mul	r11, r28
     1b8:	0a 9f       	mul	r16, r26
     1ba:	26 9f       	mul	r18, r22
     1bc:	2f 9d       	mul	r18, r15
     1be:	42 9d       	mul	r20, r2
     1c0:	63 bb       	out	0x13, r22	; 19
     1c2:	22 bb       	out	0x12, r18	; 18
     1c4:	22 bb       	out	0x12, r18	; 18
     1c6:	22 bb       	out	0x12, r18	; 18
     1c8:	22 bb       	out	0x12, r18	; 18
     1ca:	e6 ba       	out	0x16, r14	; 22
     1cc:	ed ba       	out	0x1d, r14	; 29
     1ce:	f4 ba       	out	0x14, r15	; 20
     1d0:	04 bb       	out	0x14, r16	; 20
     1d2:	12 bb       	out	0x12, r17	; 18
     1d4:	0b bb       	out	0x1b, r16	; 27

000001d6 <__trampolines_end>:
     1d6:	6e 61       	ori	r22, 0x1E	; 30
     1d8:	6e 00       	.word	0x006e	; ????

000001da <__c.2332>:
     1da:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ea:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1fa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     20a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     21a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     22a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     23a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     24a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     25a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     26a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     27a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     28a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     29a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2aa:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2ba:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2ca:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d8 <__c.3748>:
     2d8:	63 73 5f 64 69 73 61 62 6c 65 20 77 61 73 3a 20     cs_disable was: 
     2e8:	25 64 2c 20 77 61 6e 74 3a 20 25 64 0a 00           %d, want: %d..

000002f6 <__c.3743>:
     2f6:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     306:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

00000313 <__c.3774>:
     313:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     323:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     333:	25 75 29 0a 00                                      %u)..

00000338 <__c.3765>:
     338:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     348:	61 69 6c 65 64 21 0a 00                             ailed!..

00000350 <__c.3759>:
     350:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     360:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

0000036b <__c.3744>:
     36b:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     37b:	35 75 0a 00                                         5u..

0000037f <__c.3742>:
     37f:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     38f:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

0000039d <__c.3740>:
     39d:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     3ad:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003bb <__c.3738>:
     3bb:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     3cb:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003d9 <__c.3736>:
     3d9:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     3e9:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003f7 <__c.3734>:
     3f7:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     407:	75 0a 00                                            u..

0000040a <__c.3732>:
     40a:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     41a:	75 0a 00                                            u..

0000041d <__c.3730>:
     41d:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

0000042a <__c.3728>:
     42a:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     43a:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000447 <__c.3758>:
     447:	69 32 63 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     i2c_task init fa
     457:	69 6c 65 64 0a 00                                   iled..

0000045d <__c.3753>:
     45d:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     46d:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

00000479 <__c.3719>:
     479:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     489:	3d 3d 20 30 0a 00                                   == 0..

0000048f <__c.3717>:
     48f:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     49f:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

000004a8 <__c.3715>:
     4a8:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     4b8:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

000004c0 <__c.3752>:
     4c0:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

000004d0 <__c.3745>:
     4d0:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000004e1 <__c.3738>:
     4e1:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     4f1:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

000004ff <__c.3730>:
     4ff:	72 74 63 5f 72 75 6e 20 2d 20 77 72 69 74 65 20     rtc_run - write 
     50f:	73 74 61 74 75 73 20 65 72 72 6f 72 0a 00           status error..

0000051d <__c.3728>:
     51d:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 73 74 61     rtc_run read sta
     52d:	74 75 73 20 65 72 72 6f 72 0a 00                    tus error..

00000538 <__c.3755>:
     538:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     548:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     558:	74 20 25 64 0a 00                                   t %d..

0000055e <__c.3712>:
     55e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     56e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000057e <__c.3791>:
     57e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000058e <__c.3789>:
     58e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000059f <__c.3787>:
     59f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     5af:	66 61 69 6c 65 64 0a 00                             failed..

000005b7 <__c.3785>:
     5b7:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

000005c3 <__c.3783>:
     5c3:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     5d3:	64 0a 00                                            d..

000005d6 <__c.3781>:
     5d6:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     5e6:	65 64 0a 00                                         ed..

000005ea <__c.3761>:
     5ea:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000005f5 <__c.3759>:
     5f5:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

00000603 <__c.3745>:
     603:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

0000060d <__c.3725>:
     60d:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     61d:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

0000062a <__c.4000>:
     62a:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

0000063b <__c.3998>:
     63b:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     64b:	0a 00                                               ..

0000064d <__c.3996>:
     64d:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000065e <__c.3994>:
     65e:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000066f <__c.3992>:
     66f:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     67f:	0a 00                                               ..

00000681 <__c.3985>:
     681:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     691:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     6a1:	6d 65 0a 00                                         me..

000006a5 <__c.3983>:
     6a5:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     6b5:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

000006bf <__c.3981>:
     6bf:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6cf:	61 69 6c 65 64 0a 00                                ailed..

000006d6 <__c.3979>:
     6d6:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     6e6:	6e 69 74 0a 00                                      nit..

000006eb <__c.3977>:
     6eb:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6fb:	0a 00                                               ..

000006fd <__c.3931>:
     6fd:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     70d:	61 69 6c 65 64 0a 00                                ailed..

00000714 <__c.3929>:
     714:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

00000725 <__c.3927>:
     725:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     735:	0a 00                                               ..

00000737 <__c.3925>:
     737:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

00000748 <__c.3923>:
     748:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

00000759 <__c.3921>:
     759:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     769:	0a 00                                               ..

0000076b <__c.3900>:
     76b:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     77b:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000078c <__c.3775>:
     78c:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     79c:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

000007a9 <__c.3743>:
     7a9:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

000007b9 <__c.3776>:
     7b9:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

000007c7 <__c.3774>:
     7c7:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     7d7:	25 6c 64 0a 00                                      %ld..

000007dc <__c.3772>:
     7dc:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ec:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000007fa <__c.3769>:
     7fa:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

0000080b <__c.3767>:
     80b:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

00000817 <__c.3765>:
     817:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     827:	64 0a 00                                            d..

0000082a <__c.3763>:
     82a:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     83a:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

0000084a <__c.3761>:
     84a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000085a <__c.3748>:
     85a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000867 <__c.3720>:
     867:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     877:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000883 <__c.3792>:
     883:	0a 00                                               ..

00000885 <__c.3790>:
     885:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     895:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     8a5:	73 00                                               s.

000008a7 <__c.3788>:
     8a7:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     8b7:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

000008c2 <__c.3782>:
     8c2:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     8d2:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8e2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8f2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     902:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

0000090f <__c.3780>:
     90f:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     91f:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     92f:	30 34 58 0a 00                                      04X..

00000934 <__c.3778>:
     934:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     944:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000952 <__c.3776>:
     952:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     962:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000971 <__c.3774>:
     971:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     981:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000990 <__c.3772>:
     990:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     9a0:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009af <__c.3770>:
     9af:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     9bf:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009ce <__c.3768>:
     9ce:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9de:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009ed <__c.3766>:
     9ed:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     9fd:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a0b <__c.3764>:
     a0b:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     a1b:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a29 <__c.3762>:
     a29:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a39:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a48 <__c.3760>:
     a48:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a58:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a66 <__c.3758>:
     a66:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a77 <__c.3722>:
     a77:	72 63 3d 25 75 0a 00                                rc=%u..

00000a7e <__c.3760>:
     a7e:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a8e:	72 65 65 0a 00                                      ree..

00000a93 <__c.3758>:
     a93:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     aa3:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     ab3:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000abc <__c.3754>:
     abc:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000aca <__c.3741>:
     aca:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     ada:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000aea <__c.3739>:
     aea:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000af8 <__c.3737>:
     af8:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     b08:	73 74 0a 00                                         st..

00000b0c <__c.3735>:
     b0c:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000b1c <__c.3733>:
     b1c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b2c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000b3c <__c.3725>:
     b3c:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000b4c <__c.3715>:
     b4c:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b5c:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b6c:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b7c:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b8c:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b9c:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     bac:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     bbc:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000bc8 <__c.3713>:
     bc8:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000bd4 <__c.4045>:
     bd4:	25 73 0a 00                                         %s..

00000bd8 <__c.4043>:
     bd8:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000be0 <__c.3798>:
     be0:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000bec <__c.3727>:
     bec:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     bfc:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c04 <__c.3720>:
     c04:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     c14:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c1c <__c.3884>:
     c1c:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000c27 <__c.3880>:
     c27:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     c37:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     c47:	68 0a 00                                            h..

00000c4a <__c.3877>:
     c4a:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000c5a <__c.3872>:
     c5a:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     c6a:	5b 25 73 5d 0a 00                                   [%s]..

00000c70 <__c.3870>:
     c70:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000c7e <__c.3868>:
     c7e:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     c8e:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000c9f <__c.3855>:
     c9f:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     caf:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000cb9 <__c.3850>:
     cb9:	25 73 0a 00                                         %s..

00000cbd <__c.3848>:
     cbd:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     ccd:	0a 00                                               ..

00000ccf <__c.3836>:
     ccf:	0d 00                                               ..

00000cd1 <__c.3834>:
     cd1:	4d 6f 72 65 2e 2e 00                                More...

00000cd8 <__c.3824>:
     cd8:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     ce8:	2e 0a 00                                            ...

00000ceb <__c.3820>:
     ceb:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000cfa <__c.3817>:
     cfa:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000d07 <__c.3815>:
     d07:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000d14 <__c.3813>:
     d14:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d24 <__c.3811>:
     d24:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000d31 <__c.3809>:
     d31:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d41 <__c.3807>:
     d41:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000d4d <__c.3796>:
     d4d:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000d58 <__c.3794>:
     d58:	0a 00                                               ..

00000d5a <__c.3789>:
     d5a:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d6a <__c.3779>:
     d6a:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d7b <__c.3777>:
     d7b:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d89 <__c.3775>:
     d89:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000d9a <__c.3773>:
     d9a:	25 73 0a 00                                         %s..

00000d9e <__c.3770>:
     d9e:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000daf <__c.3762>:
     daf:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000dc0 <__c.3746>:
     dc0:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     dd0:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     de0:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     df0:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     e00:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     e10:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     e20:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     e30:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     e40:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     e50:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     e60:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     e70:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     e80:	6e 65 77 0a 0a 00                                   new...

00000e86 <__c.3744>:
     e86:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000e92 <__c.3936>:
     e92:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000ea0 <__c.3930>:
     ea0:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000ead <__c.3923>:
     ead:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000ebb <__c.3914>:
     ebb:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000ec8 <__c.3905>:
     ec8:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000ed9 <__c.3891>:
     ed9:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     ee9:	5d 0a 00                                            ]..

00000eec <__c.3873>:
     eec:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     efc:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000f09 <__c.4532>:
     f09:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     f19:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     f29:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000f31 <__c.4527>:
     f31:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f41:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f4b <__c.4517>:
     f4b:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f5b:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     f6b:	28 25 64 29 5d 0a 00                                (%d)]..

00000f72 <__c.4513>:
     f72:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     f82:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     f92:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000f9f <__c.4510>:
     f9f:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     faf:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000fb8 <__c.4494>:
     fb8:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000fc3 <__c.4492>:
     fc3:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00000fce <__c.4490>:
     fce:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00000fd9 <__c.4486>:
     fd9:	20 20 20 20 20 00                                        .

00000fdf <__c.4484>:
     fdf:	25 30 32 58 20 25 63 20 00                          %02X %c .

00000fe8 <__c.4455>:
     fe8:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
     ff8:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

00001006 <__c.4452>:
    1006:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    1016:	73 74 61 74 65 3d 25 64 0a 00                       state=%d..

00001020 <__c.4436>:
    1020:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
    1030:	3e 0a 00                                            >..

00001033 <__c.4432>:
    1033:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1043:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

0000104d <__c.4428>:
    104d:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    105d:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

00001068 <__c.4425>:
    1068:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1078:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

00001083 <__c.4420>:
    1083:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1093:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
    10a3:	20 3d 3d 20 30 3e 0a 00                              == 0>..

000010ab <__c.4416>:
    10ab:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    10bb:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

000010c5 <__c.4413>:
    10c5:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    10d5:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

000010e4 <__c.4410>:
    10e4:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    10f4:	20 4b 45 59 20 73 74 61 74 65 3d 25 64 0a 00         KEY state=%d..

00001103 <__c.4395>:
    1103:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    1113:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    1123:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

00001131 <__c.4383>:
    1131:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

0000113d <__c.4365>:
    113d:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    114d:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001158 <__c.4363>:
    1158:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    1168:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    1178:	72 61 6e 67 65 0a 00                                range..

0000117f <__c.4358>:
    117f:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    118f:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000119a <__c.4356>:
    119a:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    11aa:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    11ba:	61 6e 67 65 0a 00                                   ange..

000011c0 <__c.4351>:
    11c0:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    11d0:	5d 0a 00                                            ]..

000011d3 <__c.4346>:
    11d3:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000011e4 <__c.4522>:
    11e4:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

000011f5 <__c.4517>:
    11f5:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    1205:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    1215:	32 58 48 5d 0a 00                                   2XH]..

0000121b <__c.4515>:
    121b:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    122b:	0a 00                                               ..

0000122d <__c.4513>:
    122d:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

0000123e <__c.4508>:
    123e:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

0000124a <__c.4506>:
    124a:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

0000125a <__c.4504>:
    125a:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    126a:	52 5d 0a 00                                         R]..

0000126e <__c.4502>:
    126e:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    127e:	0a 00                                               ..

00001280 <__c.4500>:
    1280:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

00001291 <__c.4498>:
    1291:	5b 55 4e 54 5d 0a 00                                [UNT]..

00001298 <__c.4493>:
    1298:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012a4 <__c.4491>:
    12a4:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    12b4:	52 5d 0a 00                                         R]..

000012b8 <__c.4489>:
    12b8:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

000012c9 <__c.4487>:
    12c9:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    12d9:	0a 00                                               ..

000012db <__c.4485>:
    12db:	0a 00                                               ..

000012dd <__c.4483>:
    12dd:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000012e4 <__c.4478>:
    12e4:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    12f4:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

00001305 <__c.4476>:
    1305:	5b 44 43 4c 5d 0a 00                                [DCL]..

0000130c <__c.4474>:
    130c:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

00001319 <__c.4472>:
    1319:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

00001325 <__c.4470>:
    1325:	5b 53 44 43 5d 0a 00                                [SDC]..

0000132c <__c.4468>:
    132c:	5b 53 50 44 5d 0a 00                                [SPD]..

00001333 <__c.4466>:
    1333:	5b 53 50 45 5d 0a 00                                [SPE]..

0000133a <__c.4464>:
    133a:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    134a:	20 54 4f 44 4f 5d 0a 00                              TODO]..

00001352 <__c.4462>:
    1352:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    1362:	20 54 4f 44 4f 5d 0a 00                              TODO]..

0000136a <__c.4457>:
    136a:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    137a:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

00001384 <__c.4455>:
    1384:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1394:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

000013a5 <__c.4428>:
    13a5:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

000013b6 <__c.4426>:
    13b6:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

000013c3 <__c.4424>:
    13c3:	3c 42 55 53 3e 0a 00                                <BUS>..

000013ca <__c.4422>:
    13ca:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

000013d5 <__c.4420>:
    13d5:	3c 49 46 43 3e 0a 00                                <IFC>..

000013dc <__c.4415>:
    13dc:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    13ec:	0a 00                                               ..

000013ee <__c.4413>:
    13ee:	44 6f 6e 65 0a 00                                   Done..

000013f4 <__c.4409>:
    13f4:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00001400 <__c.4407>:
    1400:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1410:	20 65 78 69 74 0a 00                                 exit..

00001417 <__c.4405>:
    1417:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    1427:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    1437:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001442 <__c.4403>:
    1442:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    1452:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

0000145c <__c.4357>:
    145c:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    146c:	6f 74 65 63 74 65 64 0a 00                          otected..

00001475 <__c.4355>:
    1475:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

00001486 <__c.4353>:
    1486:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    1496:	0a 00                                               ..

00001498 <__c.4548>:
    1498:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

000014a5 <__c.4540>:
    14a5:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    14b5:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    14c5:	69 62 20 61 64 64 72 65 73 73 65 73 0a 20 20 20     ib addresses.   
    14d5:	44 69 73 70 6c 61 79 20 61 6c 6c 20 64 65 76 69     Display all devi
    14e5:	63 65 20 47 50 49 42 20 62 75 73 20 61 64 64 72     ce GPIB bus addr
    14f5:	65 73 73 65 73 20 61 6e 64 20 50 50 52 20 76 61     esses and PPR va
    1505:	6c 75 65 73 0a 67 70 69 62 20 63 6f 6e 66 69 67     lues.gpib config
    1515:	20 5b 2d 76 5d 0a 20 20 20 44 69 73 70 6c 61 79      [-v].   Display
    1525:	20 63 75 72 72 65 6e 74 20 64 72 69 76 65 73 20      current drives 
    1535:	63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 0a 20 20     configuration.  
    1545:	20 2d 76 20 56 65 72 62 6f 73 65 20 2d 20 73 68      -v Verbose - sh
    1555:	6f 77 20 66 75 6c 6c 20 64 65 74 61 69 6c 0a 67     ow full detail.g
    1565:	70 69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64     pib debug N.   d
    1575:	65 62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70     ebug message rep
    1585:	6f 72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73     orting see hpdis
    1595:	6b 2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c     k.cfg for detail
    15a5:	73 0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67     s.gpib elapsed.g
    15b5:	70 69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65     pib elapsed_rese
    15c5:	74 0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20     t.gpib ifc.gpib 
    15d5:	70 6c 6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78     plot filename.tx
    15e5:	74 0a 67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f     t.gpib plot_echo
    15f5:	0a 67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20     .gpib task.gpib 
    1605:	74 72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74     trace filename.t
    1615:	78 74 20 5b 42 55 53 5d 0a 20 20 20 44 69 73 70     xt [BUS].   Disp
    1625:	6c 61 79 20 61 63 74 69 76 69 74 79 20 6f 66 20     lay activity of 
    1635:	47 50 49 42 20 62 75 73 20 61 6e 64 20 6c 6f 67     GPIB bus and log
    1645:	20 69 74 0a 20 20 20 42 55 53 20 2d 20 69 6e 63      it.   BUS - inc
    1655:	6c 75 64 65 20 68 61 6e 64 73 68 61 6b 65 20 73     lude handshake s
    1665:	74 61 74 65 73 0a 0a 0a 00                          tates....

0000166e <__c.4538>:
    166e:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

00001679 <__c.4928>:
    1679:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

00001681 <__c.4926>:
    1681:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1691:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

0000169b <__c.4924>:
    169b:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    16ab:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    16bb:	0a 00                                               ..

000016bd <__c.4922>:
    16bd:	53 53 38 30 2d 25 64 00                             SS80-%d.

000016c5 <__c.4920>:
    16c5:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    16d5:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

000016df <__c.4918>:
    16df:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    16ef:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    16ff:	0a 00                                               ..

00001701 <__c.4901>:
    1701:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1711:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    1721:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1731:	6f 20 32 35 36 0a 00                                o 256..

00001738 <__c.4899>:
    1738:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1748:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1758:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1768:	20 32 35 36 0a 00                                    256..

0000176e <__c.4886>:
    176e:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    177e:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

0000178d <__c.4850>:
    178d:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    179d:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    17ad:	0a 00                                               ..

000017af <__c.4842>:
    17af:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    17bf:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    17cf:	6c 6c 0a 00                                         ll..

000017d3 <__c.4829>:
    17d3:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    17e3:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    17f3:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

000017fe <__c.4827>:
    17fe:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    180e:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    181e:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    182e:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001836 <__c.4825>:
    1836:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1846:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1856:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1866:	3a 25 73 0a 00                                      :%s..

0000186b <__c.4823>:
    186b:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    187b:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    188b:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    189b:	55 4c 4c 0a 00                                      ULL..

000018a0 <__c.4821>:
    18a0:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    18b0:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    18c0:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    18d0:	66 20 72 61 6e 67 65 0a 00                          f range..

000018d9 <__c.4819>:
    18d9:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    18e9:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    18f9:	6e 67 65 0a 00                                      nge..

000018fe <__c.4780>:
    18fe:	0a 00                                               ..

00001900 <__c.4775>:
    1900:	0a 00                                               ..

00001902 <__c.4773>:
    1902:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1912:	6c 64 0a 00                                         ld..

00001916 <__c.4771>:
    1916:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1926:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001935 <__c.4769>:
    1935:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

0000193f <__c.4767>:
    193f:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    194f:	6c 64 0a 00                                         ld..

00001953 <__c.4765>:
    1953:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1963:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001972 <__c.4763>:
    1972:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

0000197b <__c.4760>:
    197b:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    198b:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

0000199b <__c.4751>:
    199b:	0a 00                                               ..

0000199d <__c.4746>:
    199d:	0a 00                                               ..

0000199f <__c.4744>:
    199f:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

000019a8 <__c.4742>:
    19a8:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

000019b2 <__c.4740>:
    19b2:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

000019bb <__c.4737>:
    19bb:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    19cb:	0a 00                                               ..

000019cd <__c.4731>:
    19cd:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    19dd:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    19ed:	2a 2a 2a 2a 2a 0a 00                                *****..

000019f4 <__c.4729>:
    19f4:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1a04:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001a11 <__c.4727>:
    1a11:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1a21:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1a31:	0a 00                                               ..

00001a33 <__c.4723>:
    1a33:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1a43:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1a53:	0a 00                                               ..

00001a55 <__c.4720>:
    1a55:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1a65:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1a75:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001a85 <__c.4711>:
    1a85:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1a95:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1aa5:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001ab4 <__c.4708>:
    1ab4:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1ac4:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1ad4:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001ae4 <__c.4699>:
    1ae4:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1af4:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1b04:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001b12 <__c.4691>:
    1b12:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b22:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1b32:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001b40 <__c.4681>:
    1b40:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b50:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1b60:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001b6c <__c.4664>:
    1b6c:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b7c:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1b8c:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1b9c:	0a 00                                               ..

00001b9e <__c.4656>:
    1b9e:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bae:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1bbe:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001bcc <__c.4653>:
    1bcc:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bdc:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1bec:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001bfa <__c.4645>:
    1bfa:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c0a:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1c1a:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001c27 <__c.4635>:
    1c27:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1c37:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1c47:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001c58 <__c.4632>:
    1c58:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1c68:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1c78:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001c82 <__c.4628>:
    1c82:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1c92:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1ca2:	0a 00                                               ..

00001ca4 <__c.4617>:
    1ca4:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1cb4:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1cc4:	0a 00                                               ..

00001cc6 <__c.4614>:
    1cc6:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1cd6:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001ce4 <__c.4612>:
    1ce4:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001cf1 <__c.4593>:
    1cf1:	25 73 0a 00                                         %s..

00001cf5 <__c.4583>:
    1cf5:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

00001d01 <__c.4572>:
    1d01:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    1d11:	6c 64 29 0a 00                                      ld)..

00001d16 <__c.3769>:
    1d16:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001d27 <__c.3767>:
    1d27:	25 73 20 25 73 0a 00                                %s %s..

00001d2e <__c.3763>:
    1d2e:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    1d3e:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00001d4b <__c.4665>:
    1d4b:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1d5b:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1d6b:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1d7b:	48 5d 0a 00                                         H]..

00001d7f <__c.4663>:
    1d7f:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1d8f:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1d9f:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1daf:	48 5d 0a 00                                         H]..

00001db3 <__c.4661>:
    1db3:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1dc3:	74 5d 0a 00                                         t]..

00001dc7 <__c.4659>:
    1dc7:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001dd6 <__c.4657>:
    1dd6:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    1de6:	74 65 5d 0a 00                                      te]..

00001deb <__c.4655>:
    1deb:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    1dfb:	61 74 65 5d 0a 00                                   ate]..

00001e01 <__c.4653>:
    1e01:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    1e11:	61 74 65 5d 0a 00                                   ate]..

00001e17 <__c.4648>:
    1e17:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    1e27:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    1e37:	5d 0a 00                                            ]..

00001e3a <__c.4634>:
    1e3a:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001e49 <__c.4632>:
    1e49:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1e59:	5d 0a 00                                            ]..

00001e5c <__c.4625>:
    1e5c:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00001e68 <__c.4611>:
    1e68:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    1e78:	5d 0a 00                                            ]..

00001e7b <__c.4609>:
    1e7b:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    1e8b:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00001e95 <__c.4602>:
    1e95:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    1ea5:	48 5d 0a 00                                         H]..

00001ea9 <__c.4600>:
    1ea9:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    1eb9:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

00001ec9 <__c.4595>:
    1ec9:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1ed9:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    1ee9:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    1ef9:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00001f05 <__c.4592>:
    1f05:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1f15:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001f25 <__c.4590>:
    1f25:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    1f35:	29 5d 0a 00                                         )]..

00001f39 <__c.4588>:
    1f39:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    1f49:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    1f59:	28 25 64 29 5d 0a 00                                (%d)]..

00001f60 <__c.4586>:
    1f60:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    1f70:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

00001f7e <__c.4584>:
    1f7e:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    1f8e:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00001f9b <__c.4581>:
    1f9b:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    1fab:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    1fbb:	44 4f 5d 0a 00                                      DO]..

00001fc0 <__c.4578>:
    1fc0:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    1fd0:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00001fd9 <__c.4576>:
    1fd9:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    1fe9:	5d 0a 00                                            ]..

00001fec <__c.4567>:
    1fec:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    1ffc:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    200c:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    201c:	43 6f 64 65 73 5d 0a 00                             Codes]..

00002024 <__c.4564>:
    2024:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    2034:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00002044 <__c.4562>:
    2044:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    2054:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    2064:	5d 0a 00                                            ]..

00002067 <__c.4560>:
    2067:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    2077:	61 74 75 73 5d 0a 00                                atus]..

0000207e <__c.4558>:
    207e:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    208e:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00002097 <__c.4556>:
    2097:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    20a7:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

000020b2 <__c.4554>:
    20b2:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    20c2:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

000020d1 <__c.4552>:
    20d1:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    20e1:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

000020ef <__c.4550>:
    20ef:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002100 <__c.4548>:
    2100:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    2110:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

0000211c <__c.4546>:
    211c:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    212c:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

00002139 <__c.4544>:
    2139:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    2149:	2d 4f 50 5d 0a 00                                   -OP]..

0000214f <__c.4542>:
    214f:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    215f:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

00002170 <__c.4540>:
    2170:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    2180:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    2190:	44 4f 5d 0a 00                                      DO]..

00002195 <__c.4538>:
    2195:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    21a5:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

000021af <__c.4536>:
    21af:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    21bf:	2d 4f 50 5d 0a 00                                   -OP]..

000021c5 <__c.4534>:
    21c5:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

000021d3 <__c.4532>:
    21d3:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    21e3:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

000021ef <__c.4530>:
    21ef:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    21ff:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

0000220c <__c.4528>:
    220c:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    221c:	20 57 72 69 74 65 5d 0a 00                           Write]..

00002225 <__c.4525>:
    2225:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2235:	20 52 65 61 64 5d 0a 00                              Read]..

0000223d <__c.4523>:
    223d:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    224d:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

00002256 <__c.4520>:
    2256:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    2266:	25 64 29 5d 0a 00                                   %d)]..

0000226c <__c.4518>:
    226c:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    227c:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002285 <__c.4516>:
    2285:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2295:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    22a5:	52 4f 52 5d 0a 00                                   ROR]..

000022ab <__c.4507>:
    22ab:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    22bb:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

000022c5 <__c.4502>:
    22c5:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    22d5:	76 61 6c 69 64 5d 0a 00                             valid]..

000022dd <__c.4497>:
    22dd:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    22ed:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

000022fc <__c.4495>:
    22fc:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    230c:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

00002319 <__c.4493>:
    2319:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    2329:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    2339:	5d 0a 00                                            ]..

0000233c <__c.4491>:
    233c:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

0000234d <__c.4483>:
    234d:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    235d:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

00002368 <__c.4481>:
    2368:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2378:	73 5d 0a 00                                         s]..

0000237c <__c.4471>:
    237c:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

00002387 <__c.4469>:
    2387:	25 73 3a 0a 00                                      %s:..

0000238c <__c.4444>:
    238c:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    239c:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    23ac:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

000023b7 <__c.4442>:
    23b7:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    23c7:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    23d7:	49 4e 49 53 48 5d 0a 00                             INISH]..

000023df <__c.4438>:
    23df:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    23ef:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    23ff:	58 48 29 5d 0a 00                                   XH)]..

00002405 <__c.4436>:
    2405:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    2415:	72 5d 0a 00                                         r]..

00002419 <__c.4432>:
    2419:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2429:	5d 0a 00                                            ]..

0000242c <__c.4430>:
    242c:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    243c:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    244c:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

00002455 <__c.4418>:
    2455:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2465:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    2475:	62 79 74 65 73 5d 0a 00                             bytes]..

0000247d <__c.4416>:
    247d:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    248d:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    249d:	53 48 5d 0a 00                                      SH]..

000024a2 <__c.4411>:
    24a2:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    24b2:	20 45 72 72 6f 72 5d 0a 00                           Error]..

000024bb <__c.4409>:
    24bb:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    24cb:	45 72 72 6f 72 5d 0a 00                             Error]..

000024d3 <__c.4407>:
    24d3:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    24e3:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

000024f1 <__c.4405>:
    24f1:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2501:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    2511:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

00002519 <__c.4388>:
    2519:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    2529:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

00002535 <__c.4372>:
    2535:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    2545:	5d 0a 00                                            ]..

00002548 <__c.4486>:
    2548:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2558:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    2568:	64 64 72 65 73 73 5d 0a 00                          ddress]..

00002571 <__c.4483>:
    2571:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    2581:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    2591:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

0000259c <__c.4480>:
    259c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    25ac:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    25bc:	66 66 65 72 65 64 5d 0a 00                          ffered]..

000025c5 <__c.4475>:
    25c5:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    25d5:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

000025e5 <__c.4472>:
    25e5:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    25f5:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

00002601 <__c.4469>:
    2601:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2611:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    2621:	0a 00                                               ..

00002623 <__c.4466>:
    2623:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2633:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

00002642 <__c.4463>:
    2642:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2652:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

00002663 <__c.4460>:
    2663:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2673:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002683 <__c.4456>:
    2683:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    2693:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    26a3:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    26b3:	0a 00                                               ..

000026b5 <__c.4451>:
    26b5:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

000026c5 <__c.4448>:
    26c5:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    26d5:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

000026e4 <__c.4446>:
    26e4:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    26f4:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    2704:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

0000270f <__c.4444>:
    270f:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    271f:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

0000272f <__c.4442>:
    272f:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    273f:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    274f:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002758 <__c.4440>:
    2758:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2768:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002774 <__c.4438>:
    2774:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2784:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2794:	0a 00                                               ..

00002796 <__c.4436>:
    2796:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

000027a6 <__c.4433>:
    27a6:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    27b6:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

000027c7 <__c.4431>:
    27c7:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    27d7:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    27e7:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000027f0 <__c.4429>:
    27f0:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2800:	36 5d 0a 00                                         6]..

00002804 <__c.4426>:
    2804:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2814:	35 5d 0a 00                                         5]..

00002818 <__c.4423>:
    2818:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2828:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002838 <__c.4420>:
    2838:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2848:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2858:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002867 <__c.4418>:
    2867:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2877:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002888 <__c.4416>:
    2888:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2898:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

000028a9 <__c.4414>:
    28a9:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    28b9:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    28c9:	0a 00                                               ..

000028cb <__c.4412>:
    28cb:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    28db:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    28eb:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    28fb:	0a 00                                               ..

000028fd <__c.4400>:
    28fd:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    290d:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    291d:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    292d:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    293d:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

0000294e <__c.4398>:
    294e:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    295e:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    296e:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    297e:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    298e:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

0000299e <__c.4396>:
    299e:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    29ae:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    29be:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    29ce:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    29de:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

000029ee <__c.4394>:
    29ee:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    29fe:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a0e:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2a1e:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2a2e:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002a3e <__c.4389>:
    2a3e:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2a4e:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2a5e:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2a6e:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2a7e:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2a8e:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2a9e:	58 48 5d 0a 00                                      XH]..

00002aa3 <__c.4387>:
    2aa3:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2ab3:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2ac3:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2ad3:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2ae3:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2af3:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2b03:	30 32 58 48 5d 0a 00                                02XH]..

00002b0a <__c.4385>:
    2b0a:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2b1a:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2b2a:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2b3a:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2b4a:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2b5a:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2b6a:	30 32 58 48 5d 0a 00                                02XH]..

00002b71 <__c.4383>:
    2b71:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2b81:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2b91:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2ba1:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2bb1:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2bc1:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2bd1:	30 32 58 48 5d 0a 00                                02XH]..

00002bd8 <__c.4376>:
    2bd8:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002be7 <__c.4363>:
    2be7:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002bf4 <__c.4361>:
    2bf4:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2c04:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002c0e <__c.4354>:
    2c0e:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2c1e:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002c2d <__c.4352>:
    2c2d:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2c3d:	0a 00                                               ..

00002c3f <__c.4345>:
    2c3f:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2c4f:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002c59 <__c.4339>:
    2c59:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2c69:	0a 00                                               ..

00002c6b <__c.4333>:
    2c6b:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2c7b:	6e 65 5d 0a 00                                      ne]..

00002c80 <__c.4329>:
    2c80:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002c90 <__c.4288>:
    2c90:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2ca0:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2cb0:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002cbb <__c.4318>:
    2cbb:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2ccb:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2cdb:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002ce3 <__c.4295>:
    2ce3:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2cf3:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002cfc <__c.4281>:
    2cfc:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2d0c:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002d16 <__c.4279>:
    2d16:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2d26:	75 73 5d 0a 00                                      us]..

00002d2b <__c.4273>:
    2d2b:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2d3b:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002d45 <__c.4271>:
    2d45:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2d55:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002d63 <__c.4265>:
    2d63:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2d73:	74 61 74 75 73 5d 0a 00                             tatus]..

00002d7b <__c.4265>:
    2d7b:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    2d8b:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00002d95 <__c.4263>:
    2d95:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2da5:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00002db1 <__c.4258>:
    2db1:	25 30 38 6c 64 0d 00                                %08ld..

00002db8 <__c.4252>:
    2db8:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2dc8:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002dd9 <__c.4246>:
    2dd9:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00002de7 <__c.4244>:
    2de7:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    2df7:	69 74 65 0a 00                                      ite..

00002dfc <__c.4238>:
    2dfc:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00002e08 <__c.4236>:
    2e08:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    2e18:	6f 3a 25 73 0a 00                                   o:%s..

00002e1e <__c.4234>:
    2e1e:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    2e2e:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    2e3e:	74 00                                               t.

00002e40 <__c.4679>:
    2e40:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    2e50:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

00002e60 <__c.4677>:
    2e60:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2e70:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00002e80 <__c.4675>:
    2e80:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2e90:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    2ea0:	30 0a 00                                            0..

00002ea3 <__c.4673>:
    2ea3:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2eb3:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    2ec3:	70 74 79 0a 00                                      pty..

00002ec8 <__c.4671>:
    2ec8:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2ed8:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    2ee8:	73 20 65 6d 70 74 79 0a 00                          s empty..

00002ef1 <__c.4658>:
    2ef1:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    2f01:	20 25 31 30 73 0a 00                                 %10s..

00002f08 <__c.4656>:
    2f08:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    2f18:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    2f28:	74 20 66 6f 75 6e 64 0a 00                          t found..

00002f31 <__c.4654>:
    2f31:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2f41:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    2f51:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    2f61:	74 65 72 73 0a 00                                   ters..

00002f67 <__c.4652>:
    2f67:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2f77:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    2f87:	65 6d 70 74 79 0a 00                                empty..

00002f8e <__c.4650>:
    2f8e:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2f9e:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    2fae:	65 6d 70 74 79 0a 00                                empty..

00002fb5 <__c.4648>:
    2fb5:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2fc5:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    2fd5:	20 65 6d 70 74 79 0a 00                              empty..

00002fdd <__c.4639>:
    2fdd:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

00002fec <__c.4637>:
    2fec:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    2ffc:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    300c:	20 66 6f 75 6e 64 0a 00                              found..

00003014 <__c.4635>:
    3014:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3024:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

00003033 <__c.4633>:
    3033:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3043:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

00003053 <__c.4631>:
    3053:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3063:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    3073:	70 74 79 0a 00                                      pty..

00003078 <__c.4623>:
    3078:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003086 <__c.4618>:
    3086:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003094 <__c.4616>:
    3094:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    30a4:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    30b4:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000030c4 <__c.4614>:
    30c4:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    30d4:	73 0a 00                                            s..

000030d7 <__c.4612>:
    30d7:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    30e7:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    30f7:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00003106 <__c.4610>:
    3106:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    3116:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

00003122 <__c.4608>:
    3122:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    3132:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

0000313d <__c.4606>:
    313d:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    314d:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

0000315d <__c.4589>:
    315d:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000316b <__c.4584>:
    316b:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003179 <__c.4582>:
    3179:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3189:	73 0a 00                                            s..

0000318c <__c.4580>:
    318c:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    319c:	75 6e 64 3a 25 73 0a 00                             und:%s..

000031a4 <__c.4563>:
    31a4:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000031b2 <__c.4560>:
    31b2:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    31c2:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    31d2:	20 65 72 72 6f 72 0a 00                              error..

000031da <__c.4552>:
    31da:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000031e8 <__c.4550>:
    31e8:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    31f8:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3208:	20 65 72 72 6f 72 0a 00                              error..

00003210 <__c.4547>:
    3210:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3220:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    3230:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    3240:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    3250:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    3260:	30 32 58 48 0a 00                                   02XH..

00003266 <__c.4545>:
    3266:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3276:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    3286:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    3296:	20 25 64 0a 00                                       %d..

0000329b <__c.4541>:
    329b:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

000032ab <__c.4539>:
    32ab:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    32bb:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    32cb:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    32db:	30 78 45 30 31 33 0a 00                             0xE013..

000032e3 <__c.4537>:
    32e3:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    32f3:	6e 64 3a 25 73 0a 00                                nd:%s..

000032fa <__c.4535>:
    32fa:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    330a:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003312 <__c.4511>:
    3312:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003320 <__c.4509>:
    3320:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    3330:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003339 <__c.4507>:
    3339:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    3349:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003352 <__c.4505>:
    3352:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    3362:	20 20 25 34 64 0a 00                                  %4d..

00003369 <__c.4503>:
    3369:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3379:	20 20 20 25 73 0a 00                                   %s..

00003380 <__c.4501>:
    3380:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    3390:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    33a0:	77 72 69 74 65 0a 00                                write..

000033a7 <__c.4499>:
    33a7:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    33b7:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    33c7:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000033d7 <__c.4497>:
    33d7:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    33e7:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    33f7:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00003406 <__c.4495>:
    3406:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3416:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3426:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

00003436 <__c.4493>:
    3436:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3446:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3456:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

00003465 <__c.4491>:
    3465:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3475:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    3485:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003493 <__c.4489>:
    3493:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    34a3:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    34b3:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    34c3:	79 0a 00                                            y..

000034c6 <__c.4475>:
    34c6:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000034d4 <__c.4473>:
    34d4:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000034e2 <__c.4468>:
    34e2:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000034f0 <__c.4451>:
    34f0:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    3500:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    3510:	25 64 0a 00                                         %d..

00003514 <__c.4434>:
    3514:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    3524:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    3534:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    3544:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

0000354d <__c.4420>:
    354d:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    355d:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    356d:	62 69 67 0a 00                                      big..

00003572 <__c.4418>:
    3572:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3582:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    3592:	63 74 65 72 73 0a 00                                cters..

00003599 <__c.4411>:
    3599:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    35a9:	73 0a 00                                            s..

000035ac <__c.4409>:
    35ac:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    35bc:	73 0a 00                                            s..

000035bf <__c.4407>:
    35bf:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    35cf:	73 0a 00                                            s..

000035d2 <__c.4405>:
    35d2:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

000035e3 <__c.4403>:
    35e3:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

000035f0 <__c.4401>:
    35f0:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000035fc <__c.4399>:
    35fc:	0a 00                                               ..

000035fe <__c.4396>:
    35fe:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    360e:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    361e:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

0000362e <__c.4394>:
    362e:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    363e:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    364e:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    365e:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    366e:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

0000367a <__c.4391>:
    367a:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    368a:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    369a:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    36aa:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

000036ba <__c.4389>:
    36ba:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    36ca:	3a 5b 25 73 5d 0a 00                                :[%s]..

000036d1 <__c.4379>:
    36d1:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    36e1:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    36f1:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3701:	64 0a 00                                            d..

00003704 <__c.4377>:
    3704:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3714:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3724:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3734:	64 0a 00                                            d..

00003737 <__c.4375>:
    3737:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3747:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3757:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3767:	69 6c 65 64 0a 00                                   iled..

0000376d <__c.4373>:
    376d:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    377d:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    378d:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    379d:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

000037ac <__c.4360>:
    37ac:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    37bc:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    37cc:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    37dc:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    37ec:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

000037fd <__c.4357>:
    37fd:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    380d:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    381d:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003826 <__c.4355>:
    3826:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3836:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3846:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3856:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

0000385e <__c.4343>:
    385e:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    386e:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    387e:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    388e:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    389e:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

000038ab <__c.4318>:
    38ab:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    38bb:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

000038cb <__c.4309>:
    38cb:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    38db:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    38eb:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    38fb:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003905 <__c.4290>:
    3905:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003912 <__c.4285>:
    3912:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

0000391f <__c.4280>:
    391f:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

0000392c <__c.4272>:
    392c:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003939 <__c.4270>:
    3939:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3949:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3959:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3969:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3979:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3989:	25 6c 64 0a 00                                      %ld..

0000398e <__c.4254>:
    398e:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    399e:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    39ae:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

000039ba <__c.4252>:
    39ba:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    39ca:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    39da:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

000039e5 <__c.4250>:
    39e5:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    39f5:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3a05:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3a15:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3a25:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003a30 <__c.4248>:
    3a30:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a40:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3a50:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3a60:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3a70:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003a7b <__c.4246>:
    3a7b:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a8b:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3a9b:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003aa9 <__c.4244>:
    3aa9:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ab9:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3ac9:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3ad9:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003aea <__c.4242>:
    3aea:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3afa:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3b0a:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3b1a:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3b2a:	58 68 0a 00                                         Xh..

00003b2e <__c.4240>:
    3b2e:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b3e:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003b4f <__c.4234>:
    3b4f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3b5f:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3b6f:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003b7b <__c.4232>:
    3b7b:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3b8b:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3b9b:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003baa <__c.4230>:
    3baa:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3bba:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3bca:	25 6c 64 0a 00                                      %ld..

00003bcf <__c.4228>:
    3bcf:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3bdf:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3bef:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3bff:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003c08 <__c.4226>:
    3c08:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c18:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3c28:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3c38:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003c41 <__c.4224>:
    3c41:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3c51:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003c59 <__c.4222>:
    3c59:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c69:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3c79:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3c89:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003c92 <__c.4220>:
    3c92:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3ca2:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003cb1 <__c.4213>:
    3cb1:	0a 00                                               ..

00003cb3 <__c.4211>:
    3cb3:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3cc3:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003ccd <__c.4209>:
    3ccd:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    3cdd:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00003ce9 <__c.4207>:
    3ce9:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    3cf9:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003d06 <__c.4205>:
    3d06:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    3d16:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003d23 <__c.4203>:
    3d23:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    3d33:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003d40 <__c.4201>:
    3d40:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    3d50:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00003d5c <__c.4199>:
    3d5c:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    3d6c:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003d78 <__c.4197>:
    3d78:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    3d88:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003d92 <__c.4195>:
    3d92:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    3da2:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003dac <__c.4193>:
    3dac:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    3dbc:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003dc8 <__c.4191>:
    3dc8:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    3dd8:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003de4 <__c.4189>:
    3de4:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    3df4:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e01 <__c.4187>:
    3e01:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    3e11:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e1e <__c.4185>:
    3e1e:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    3e2e:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e3a <__c.4183>:
    3e3a:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    3e4a:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e54 <__c.4181>:
    3e54:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    3e64:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e71 <__c.4179>:
    3e71:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    3e81:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e8e <__c.4177>:
    3e8e:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    3e9e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003eab <__c.4175>:
    3eab:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    3ebb:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ec8 <__c.4173>:
    3ec8:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    3ed8:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003ee5 <__c.4171>:
    3ee5:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    3ef5:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f02 <__c.4169>:
    3f02:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    3f12:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f1f <__c.4167>:
    3f1f:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    3f2f:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f3c <__c.4165>:
    3f3c:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    3f4c:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003f56 <__c.4163>:
    3f56:	0a 25 73 0a 00                                      .%s..

00003f5b <__c.4040>:
    3f5b:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    3f6b:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    3f7b:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    3f8b:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00003f98 <__c.4031>:
    3f98:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    3fa8:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    3fb8:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    3fc8:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

00003fd4 <__c.4022>:
    3fd4:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    3fe4:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

00003ff5 <__c.4015>:
    3ff5:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    4005:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

0000400e <__c.4009>:
    400e:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    401e:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    402e:	25 73 5d 0a 00                                      %s]..

00004033 <__c.3997>:
    4033:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    4043:	6f 69 6e 74 65 72 0a 00                             ointer..

0000404b <__c.3992>:
    404b:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    405b:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    406b:	20 6d 65 6d 6f 72 79 0a 00                           memory..

00004074 <__c.3986>:
    4074:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    4084:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

00004095 <__c.3973>:
    4095:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    40a5:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    40b5:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    40c5:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    40d5:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    40e5:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    40f5:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    4105:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    4115:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    4125:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    4135:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    4145:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    4155:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    4165:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    4175:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    4185:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    4195:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    41a5:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    41b5:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    41c5:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    41d5:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    41e5:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    41f5:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    4205:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    4215:	6d 65 0a 55 73 65 20 2d 64 20 61 66 74 65 72 20     me.Use -d after 
    4225:	66 69 72 73 74 20 6b 65 79 77 6f 72 64 20 27 6c     first keyword 'l
    4235:	69 66 27 20 61 62 6f 76 65 20 66 6f 72 20 4c 49     if' above for LI
    4245:	46 20 66 69 6c 65 73 79 73 74 65 6d 20 64 65 62     F filesystem deb
    4255:	75 67 67 69 6e 67 0a 0a 00                          ugging...

0000425e <__c.3971>:
    425e:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

00004268 <__c.4709>:
    4268:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    4278:	53 4b 0a 00                                         SK..

0000427c <__c.4707>:
    427c:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    428c:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004296 <__c.4705>:
    4296:	25 2d 31 36 73 00                                   %-16s.

0000429c <__c.4703>:
    429c:	25 2d 31 36 73 00                                   %-16s.

000042a2 <__c.4701>:
    42a2:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

000042b3 <__c.4699>:
    42b3:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    42c3:	30 34 78 48 0a 00                                   04xH..

000042c9 <__c.4697>:
    42c9:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    42d9:	64 6f 6e 65 0a 00                                   done..

000042df <__c.4695>:
    42df:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    42ef:	6f 6e 65 0a 00                                      one..

000042f4 <__c.4693>:
    42f4:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    4304:	61 6c 69 7a 65 64 0a 00                             alized..

0000430c <__c.4691>:
    430c:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    431c:	0a 00                                               ..

0000431e <__c.4689>:
    431e:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    432e:	7a 65 64 0a 00                                      zed..

00004333 <__c.4687>:
    4333:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    4343:	69 7a 65 64 0a 00                                   ized..

00004349 <__c.4685>:
    4349:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

0000435a <__c.4683>:
    435a:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    436a:	20 73 74 61 72 74 0a 00                              start..

00004372 <__c.4681>:
    4372:	53 59 53 54 45 4d 5f 54 41 53 4b 5f 43 4f 55 4e     SYSTEM_TASK_COUN
    4382:	54 45 52 5f 52 45 53 3a 25 6c 64 0a 00              TER_RES:%ld..

0000438f <__c.4679>:
    438f:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

0000439e <__c.4677>:
    439e:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    43ae:	0a 00                                               ..

000043b0 <__c.4675>:
    43b0:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    43c0:	20 62 75 73 0a 00                                    bus..

000043c6 <__c.4673>:
    43c6:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    43d6:	20 62 75 73 0a 00                                    bus..

000043dc <__c.4671>:
    43dc:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    43ec:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000043f6 <__c.4669>:
    43f6:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4406:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004410 <__c.4667>:
    4410:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4420:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4430:	35 64 69 73 6b 0a 00                                5disk..

00004437 <__c.4665>:
    4437:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004447 <__c.4663>:
    4447:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    4457:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004464 <__c.4661>:
    4464:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4474:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004483 <__c.4659>:
    4483:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    4493:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    44a3:	3a 20 25 6c 64 0a 00                                : %ld..

000044aa <__c.4657>:
    44aa:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

000044bb <__c.4655>:
    44bb:	53 74 61 72 74 0a 00                                Start..

000044c2 <__c.4646>:
    44c2:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

000044ce <__c.4644>:
    44ce:	4f 4b 0a 00                                         OK..

000044d2 <__c.4642>:
    44d2:	0a 3e 00                                            .>.

000044d5 <__c.4627>:
    44d5:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    44e5:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

000044ef <__c.4625>:
    44ef:	25 2d 31 36 73 00                                   %-16s.

000044f5 <__c.4623>:
    44f5:	25 2d 31 36 73 00                                   %-16s.

000044fb <__c.4621>:
    44fb:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    450b:	69 6c 65 64 0a 00                                   iled..

00004511 <__c.4619>:
    4511:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4521:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

0000452f <__c.4612>:
    452f:	25 2d 31 36 73 00                                   %-16s.

00004535 <__c.4610>:
    4535:	25 2d 31 36 73 00                                   %-16s.

0000453b <__c.4603>:
    453b:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    454b:	3a 25 30 32 64 00                                   :%02d.

00004551 <__c.4588>:
    4551:	68 65 6c 70 0a 6d 65 6d 0a 73 65 74 64 61 74 65     help.mem.setdate
    4561:	0a 74 69 6d 65 0a 72 65 73 65 74 0a 0a 00           .time.reset...

0000456f <__c.4581>:
    456f:	0a 00                                               ..

00004571 <__c.4579>:
    4571:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4581:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

0000458b <__c.4577>:
    458b:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    459b:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000045a5 <__c.4575>:
    45a5:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    45b5:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    45c5:	35 64 69 73 6b 0a 00                                5disk..

000045cc <__c.4573>:
    45cc:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000045dc <__c.4571>:
    45dc:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    45ec:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

000045f9 <__c.4569>:
    45f9:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4609:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004618 <__c.4567>:
    4618:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    4628:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    4638:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..

00004648 <__ctors_end>:
    4648:	11 24       	eor	r1, r1
    464a:	1f be       	out	0x3f, r1	; 63
    464c:	cf ef       	ldi	r28, 0xFF	; 255
    464e:	d0 e4       	ldi	r29, 0x40	; 64
    4650:	de bf       	out	0x3e, r29	; 62
    4652:	cd bf       	out	0x3d, r28	; 61

00004654 <__do_copy_data>:
    4654:	17 e1       	ldi	r17, 0x17	; 23
    4656:	a0 e0       	ldi	r26, 0x00	; 0
    4658:	b1 e0       	ldi	r27, 0x01	; 1
    465a:	e8 e3       	ldi	r30, 0x38	; 56
    465c:	f0 ed       	ldi	r31, 0xD0	; 208
    465e:	01 e0       	ldi	r16, 0x01	; 1
    4660:	0b bf       	out	0x3b, r16	; 59
    4662:	02 c0       	rjmp	.+4      	; 0x4668 <__do_copy_data+0x14>
    4664:	07 90       	elpm	r0, Z+
    4666:	0d 92       	st	X+, r0
    4668:	a0 35       	cpi	r26, 0x50	; 80
    466a:	b1 07       	cpc	r27, r17
    466c:	d9 f7       	brne	.-10     	; 0x4664 <__do_copy_data+0x10>

0000466e <__do_clear_bss>:
    466e:	21 e2       	ldi	r18, 0x21	; 33
    4670:	a0 e5       	ldi	r26, 0x50	; 80
    4672:	b7 e1       	ldi	r27, 0x17	; 23
    4674:	01 c0       	rjmp	.+2      	; 0x4678 <.do_clear_bss_start>

00004676 <.do_clear_bss_loop>:
    4676:	1d 92       	st	X+, r1

00004678 <.do_clear_bss_start>:
    4678:	a3 3a       	cpi	r26, 0xA3	; 163
    467a:	b2 07       	cpc	r27, r18
    467c:	e1 f7       	brne	.-8      	; 0x4676 <.do_clear_bss_loop>
    467e:	0e 94 42 e0 	call	0x1c084	; 0x1c084 <main>
    4682:	0c 94 1a e8 	jmp	0x1d034	; 0x1d034 <_exit>

00004686 <__bad_interrupt>:
    4686:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000468a <vfprintf>:
    468a:	2f 92       	push	r2
    468c:	3f 92       	push	r3
    468e:	4f 92       	push	r4
    4690:	5f 92       	push	r5
    4692:	6f 92       	push	r6
    4694:	7f 92       	push	r7
    4696:	8f 92       	push	r8
    4698:	9f 92       	push	r9
    469a:	af 92       	push	r10
    469c:	bf 92       	push	r11
    469e:	cf 92       	push	r12
    46a0:	df 92       	push	r13
    46a2:	ef 92       	push	r14
    46a4:	ff 92       	push	r15
    46a6:	0f 93       	push	r16
    46a8:	1f 93       	push	r17
    46aa:	cf 93       	push	r28
    46ac:	df 93       	push	r29
    46ae:	cd b7       	in	r28, 0x3d	; 61
    46b0:	de b7       	in	r29, 0x3e	; 62
    46b2:	60 97       	sbiw	r28, 0x10	; 16
    46b4:	0f b6       	in	r0, 0x3f	; 63
    46b6:	f8 94       	cli
    46b8:	de bf       	out	0x3e, r29	; 62
    46ba:	0f be       	out	0x3f, r0	; 63
    46bc:	cd bf       	out	0x3d, r28	; 61
    46be:	7c 01       	movw	r14, r24
    46c0:	1b 01       	movw	r2, r22
    46c2:	6a 01       	movw	r12, r20
    46c4:	fc 01       	movw	r30, r24
    46c6:	17 82       	std	Z+7, r1	; 0x07
    46c8:	16 82       	std	Z+6, r1	; 0x06
    46ca:	83 81       	ldd	r24, Z+3	; 0x03
    46cc:	81 ff       	sbrs	r24, 1
    46ce:	44 c3       	rjmp	.+1672   	; 0x4d58 <vfprintf+0x6ce>
    46d0:	9e 01       	movw	r18, r28
    46d2:	2f 5f       	subi	r18, 0xFF	; 255
    46d4:	3f 4f       	sbci	r19, 0xFF	; 255
    46d6:	39 01       	movw	r6, r18
    46d8:	f7 01       	movw	r30, r14
    46da:	93 81       	ldd	r25, Z+3	; 0x03
    46dc:	f1 01       	movw	r30, r2
    46de:	93 fd       	sbrc	r25, 3
    46e0:	85 91       	lpm	r24, Z+
    46e2:	93 ff       	sbrs	r25, 3
    46e4:	81 91       	ld	r24, Z+
    46e6:	1f 01       	movw	r2, r30
    46e8:	88 23       	and	r24, r24
    46ea:	09 f4       	brne	.+2      	; 0x46ee <vfprintf+0x64>
    46ec:	31 c3       	rjmp	.+1634   	; 0x4d50 <vfprintf+0x6c6>
    46ee:	85 32       	cpi	r24, 0x25	; 37
    46f0:	39 f4       	brne	.+14     	; 0x4700 <vfprintf+0x76>
    46f2:	93 fd       	sbrc	r25, 3
    46f4:	85 91       	lpm	r24, Z+
    46f6:	93 ff       	sbrs	r25, 3
    46f8:	81 91       	ld	r24, Z+
    46fa:	1f 01       	movw	r2, r30
    46fc:	85 32       	cpi	r24, 0x25	; 37
    46fe:	39 f4       	brne	.+14     	; 0x470e <vfprintf+0x84>
    4700:	b7 01       	movw	r22, r14
    4702:	90 e0       	ldi	r25, 0x00	; 0
    4704:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4708:	56 01       	movw	r10, r12
    470a:	65 01       	movw	r12, r10
    470c:	e5 cf       	rjmp	.-54     	; 0x46d8 <vfprintf+0x4e>
    470e:	10 e0       	ldi	r17, 0x00	; 0
    4710:	51 2c       	mov	r5, r1
    4712:	91 2c       	mov	r9, r1
    4714:	ff e1       	ldi	r31, 0x1F	; 31
    4716:	f9 15       	cp	r31, r9
    4718:	d8 f0       	brcs	.+54     	; 0x4750 <vfprintf+0xc6>
    471a:	8b 32       	cpi	r24, 0x2B	; 43
    471c:	79 f0       	breq	.+30     	; 0x473c <vfprintf+0xb2>
    471e:	38 f4       	brcc	.+14     	; 0x472e <vfprintf+0xa4>
    4720:	80 32       	cpi	r24, 0x20	; 32
    4722:	79 f0       	breq	.+30     	; 0x4742 <vfprintf+0xb8>
    4724:	83 32       	cpi	r24, 0x23	; 35
    4726:	a1 f4       	brne	.+40     	; 0x4750 <vfprintf+0xc6>
    4728:	f9 2d       	mov	r31, r9
    472a:	f0 61       	ori	r31, 0x10	; 16
    472c:	2e c0       	rjmp	.+92     	; 0x478a <vfprintf+0x100>
    472e:	8d 32       	cpi	r24, 0x2D	; 45
    4730:	61 f0       	breq	.+24     	; 0x474a <vfprintf+0xc0>
    4732:	80 33       	cpi	r24, 0x30	; 48
    4734:	69 f4       	brne	.+26     	; 0x4750 <vfprintf+0xc6>
    4736:	29 2d       	mov	r18, r9
    4738:	21 60       	ori	r18, 0x01	; 1
    473a:	2d c0       	rjmp	.+90     	; 0x4796 <vfprintf+0x10c>
    473c:	39 2d       	mov	r19, r9
    473e:	32 60       	ori	r19, 0x02	; 2
    4740:	93 2e       	mov	r9, r19
    4742:	89 2d       	mov	r24, r9
    4744:	84 60       	ori	r24, 0x04	; 4
    4746:	98 2e       	mov	r9, r24
    4748:	2a c0       	rjmp	.+84     	; 0x479e <vfprintf+0x114>
    474a:	e9 2d       	mov	r30, r9
    474c:	e8 60       	ori	r30, 0x08	; 8
    474e:	15 c0       	rjmp	.+42     	; 0x477a <vfprintf+0xf0>
    4750:	97 fc       	sbrc	r9, 7
    4752:	2d c0       	rjmp	.+90     	; 0x47ae <vfprintf+0x124>
    4754:	20 ed       	ldi	r18, 0xD0	; 208
    4756:	28 0f       	add	r18, r24
    4758:	2a 30       	cpi	r18, 0x0A	; 10
    475a:	88 f4       	brcc	.+34     	; 0x477e <vfprintf+0xf4>
    475c:	96 fe       	sbrs	r9, 6
    475e:	06 c0       	rjmp	.+12     	; 0x476c <vfprintf+0xe2>
    4760:	3a e0       	ldi	r19, 0x0A	; 10
    4762:	13 9f       	mul	r17, r19
    4764:	20 0d       	add	r18, r0
    4766:	11 24       	eor	r1, r1
    4768:	12 2f       	mov	r17, r18
    476a:	19 c0       	rjmp	.+50     	; 0x479e <vfprintf+0x114>
    476c:	8a e0       	ldi	r24, 0x0A	; 10
    476e:	58 9e       	mul	r5, r24
    4770:	20 0d       	add	r18, r0
    4772:	11 24       	eor	r1, r1
    4774:	52 2e       	mov	r5, r18
    4776:	e9 2d       	mov	r30, r9
    4778:	e0 62       	ori	r30, 0x20	; 32
    477a:	9e 2e       	mov	r9, r30
    477c:	10 c0       	rjmp	.+32     	; 0x479e <vfprintf+0x114>
    477e:	8e 32       	cpi	r24, 0x2E	; 46
    4780:	31 f4       	brne	.+12     	; 0x478e <vfprintf+0x104>
    4782:	96 fc       	sbrc	r9, 6
    4784:	e5 c2       	rjmp	.+1482   	; 0x4d50 <vfprintf+0x6c6>
    4786:	f9 2d       	mov	r31, r9
    4788:	f0 64       	ori	r31, 0x40	; 64
    478a:	9f 2e       	mov	r9, r31
    478c:	08 c0       	rjmp	.+16     	; 0x479e <vfprintf+0x114>
    478e:	8c 36       	cpi	r24, 0x6C	; 108
    4790:	21 f4       	brne	.+8      	; 0x479a <vfprintf+0x110>
    4792:	29 2d       	mov	r18, r9
    4794:	20 68       	ori	r18, 0x80	; 128
    4796:	92 2e       	mov	r9, r18
    4798:	02 c0       	rjmp	.+4      	; 0x479e <vfprintf+0x114>
    479a:	88 36       	cpi	r24, 0x68	; 104
    479c:	41 f4       	brne	.+16     	; 0x47ae <vfprintf+0x124>
    479e:	f1 01       	movw	r30, r2
    47a0:	93 fd       	sbrc	r25, 3
    47a2:	85 91       	lpm	r24, Z+
    47a4:	93 ff       	sbrs	r25, 3
    47a6:	81 91       	ld	r24, Z+
    47a8:	1f 01       	movw	r2, r30
    47aa:	81 11       	cpse	r24, r1
    47ac:	b3 cf       	rjmp	.-154    	; 0x4714 <vfprintf+0x8a>
    47ae:	9b eb       	ldi	r25, 0xBB	; 187
    47b0:	98 0f       	add	r25, r24
    47b2:	93 30       	cpi	r25, 0x03	; 3
    47b4:	20 f4       	brcc	.+8      	; 0x47be <vfprintf+0x134>
    47b6:	99 2d       	mov	r25, r9
    47b8:	90 61       	ori	r25, 0x10	; 16
    47ba:	80 5e       	subi	r24, 0xE0	; 224
    47bc:	07 c0       	rjmp	.+14     	; 0x47cc <vfprintf+0x142>
    47be:	9b e9       	ldi	r25, 0x9B	; 155
    47c0:	98 0f       	add	r25, r24
    47c2:	93 30       	cpi	r25, 0x03	; 3
    47c4:	08 f0       	brcs	.+2      	; 0x47c8 <vfprintf+0x13e>
    47c6:	66 c1       	rjmp	.+716    	; 0x4a94 <vfprintf+0x40a>
    47c8:	99 2d       	mov	r25, r9
    47ca:	9f 7e       	andi	r25, 0xEF	; 239
    47cc:	96 ff       	sbrs	r25, 6
    47ce:	16 e0       	ldi	r17, 0x06	; 6
    47d0:	9f 73       	andi	r25, 0x3F	; 63
    47d2:	99 2e       	mov	r9, r25
    47d4:	85 36       	cpi	r24, 0x65	; 101
    47d6:	19 f4       	brne	.+6      	; 0x47de <vfprintf+0x154>
    47d8:	90 64       	ori	r25, 0x40	; 64
    47da:	99 2e       	mov	r9, r25
    47dc:	08 c0       	rjmp	.+16     	; 0x47ee <vfprintf+0x164>
    47de:	86 36       	cpi	r24, 0x66	; 102
    47e0:	21 f4       	brne	.+8      	; 0x47ea <vfprintf+0x160>
    47e2:	39 2f       	mov	r19, r25
    47e4:	30 68       	ori	r19, 0x80	; 128
    47e6:	93 2e       	mov	r9, r19
    47e8:	02 c0       	rjmp	.+4      	; 0x47ee <vfprintf+0x164>
    47ea:	11 11       	cpse	r17, r1
    47ec:	11 50       	subi	r17, 0x01	; 1
    47ee:	97 fe       	sbrs	r9, 7
    47f0:	07 c0       	rjmp	.+14     	; 0x4800 <vfprintf+0x176>
    47f2:	1c 33       	cpi	r17, 0x3C	; 60
    47f4:	50 f4       	brcc	.+20     	; 0x480a <vfprintf+0x180>
    47f6:	44 24       	eor	r4, r4
    47f8:	43 94       	inc	r4
    47fa:	41 0e       	add	r4, r17
    47fc:	27 e0       	ldi	r18, 0x07	; 7
    47fe:	0b c0       	rjmp	.+22     	; 0x4816 <vfprintf+0x18c>
    4800:	18 30       	cpi	r17, 0x08	; 8
    4802:	38 f0       	brcs	.+14     	; 0x4812 <vfprintf+0x188>
    4804:	27 e0       	ldi	r18, 0x07	; 7
    4806:	17 e0       	ldi	r17, 0x07	; 7
    4808:	05 c0       	rjmp	.+10     	; 0x4814 <vfprintf+0x18a>
    480a:	27 e0       	ldi	r18, 0x07	; 7
    480c:	9c e3       	ldi	r25, 0x3C	; 60
    480e:	49 2e       	mov	r4, r25
    4810:	02 c0       	rjmp	.+4      	; 0x4816 <vfprintf+0x18c>
    4812:	21 2f       	mov	r18, r17
    4814:	41 2c       	mov	r4, r1
    4816:	56 01       	movw	r10, r12
    4818:	84 e0       	ldi	r24, 0x04	; 4
    481a:	a8 0e       	add	r10, r24
    481c:	b1 1c       	adc	r11, r1
    481e:	f6 01       	movw	r30, r12
    4820:	60 81       	ld	r22, Z
    4822:	71 81       	ldd	r23, Z+1	; 0x01
    4824:	82 81       	ldd	r24, Z+2	; 0x02
    4826:	93 81       	ldd	r25, Z+3	; 0x03
    4828:	04 2d       	mov	r16, r4
    482a:	a3 01       	movw	r20, r6
    482c:	0e 94 c7 e6 	call	0x1cd8e	; 0x1cd8e <__ftoa_engine>
    4830:	6c 01       	movw	r12, r24
    4832:	f9 81       	ldd	r31, Y+1	; 0x01
    4834:	fc 87       	std	Y+12, r31	; 0x0c
    4836:	f0 ff       	sbrs	r31, 0
    4838:	02 c0       	rjmp	.+4      	; 0x483e <vfprintf+0x1b4>
    483a:	f3 ff       	sbrs	r31, 3
    483c:	06 c0       	rjmp	.+12     	; 0x484a <vfprintf+0x1c0>
    483e:	91 fc       	sbrc	r9, 1
    4840:	06 c0       	rjmp	.+12     	; 0x484e <vfprintf+0x1c4>
    4842:	92 fe       	sbrs	r9, 2
    4844:	06 c0       	rjmp	.+12     	; 0x4852 <vfprintf+0x1c8>
    4846:	00 e2       	ldi	r16, 0x20	; 32
    4848:	05 c0       	rjmp	.+10     	; 0x4854 <vfprintf+0x1ca>
    484a:	0d e2       	ldi	r16, 0x2D	; 45
    484c:	03 c0       	rjmp	.+6      	; 0x4854 <vfprintf+0x1ca>
    484e:	0b e2       	ldi	r16, 0x2B	; 43
    4850:	01 c0       	rjmp	.+2      	; 0x4854 <vfprintf+0x1ca>
    4852:	00 e0       	ldi	r16, 0x00	; 0
    4854:	8c 85       	ldd	r24, Y+12	; 0x0c
    4856:	8c 70       	andi	r24, 0x0C	; 12
    4858:	19 f0       	breq	.+6      	; 0x4860 <vfprintf+0x1d6>
    485a:	01 11       	cpse	r16, r1
    485c:	5a c2       	rjmp	.+1204   	; 0x4d12 <vfprintf+0x688>
    485e:	9b c2       	rjmp	.+1334   	; 0x4d96 <vfprintf+0x70c>
    4860:	97 fe       	sbrs	r9, 7
    4862:	10 c0       	rjmp	.+32     	; 0x4884 <vfprintf+0x1fa>
    4864:	4c 0c       	add	r4, r12
    4866:	fc 85       	ldd	r31, Y+12	; 0x0c
    4868:	f4 ff       	sbrs	r31, 4
    486a:	04 c0       	rjmp	.+8      	; 0x4874 <vfprintf+0x1ea>
    486c:	8a 81       	ldd	r24, Y+2	; 0x02
    486e:	81 33       	cpi	r24, 0x31	; 49
    4870:	09 f4       	brne	.+2      	; 0x4874 <vfprintf+0x1ea>
    4872:	4a 94       	dec	r4
    4874:	14 14       	cp	r1, r4
    4876:	74 f5       	brge	.+92     	; 0x48d4 <vfprintf+0x24a>
    4878:	28 e0       	ldi	r18, 0x08	; 8
    487a:	24 15       	cp	r18, r4
    487c:	78 f5       	brcc	.+94     	; 0x48dc <vfprintf+0x252>
    487e:	88 e0       	ldi	r24, 0x08	; 8
    4880:	48 2e       	mov	r4, r24
    4882:	2c c0       	rjmp	.+88     	; 0x48dc <vfprintf+0x252>
    4884:	96 fc       	sbrc	r9, 6
    4886:	2a c0       	rjmp	.+84     	; 0x48dc <vfprintf+0x252>
    4888:	81 2f       	mov	r24, r17
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	8c 15       	cp	r24, r12
    488e:	9d 05       	cpc	r25, r13
    4890:	9c f0       	brlt	.+38     	; 0x48b8 <vfprintf+0x22e>
    4892:	3c ef       	ldi	r19, 0xFC	; 252
    4894:	c3 16       	cp	r12, r19
    4896:	3f ef       	ldi	r19, 0xFF	; 255
    4898:	d3 06       	cpc	r13, r19
    489a:	74 f0       	brlt	.+28     	; 0x48b8 <vfprintf+0x22e>
    489c:	89 2d       	mov	r24, r9
    489e:	80 68       	ori	r24, 0x80	; 128
    48a0:	98 2e       	mov	r9, r24
    48a2:	0a c0       	rjmp	.+20     	; 0x48b8 <vfprintf+0x22e>
    48a4:	e2 e0       	ldi	r30, 0x02	; 2
    48a6:	f0 e0       	ldi	r31, 0x00	; 0
    48a8:	ec 0f       	add	r30, r28
    48aa:	fd 1f       	adc	r31, r29
    48ac:	e1 0f       	add	r30, r17
    48ae:	f1 1d       	adc	r31, r1
    48b0:	80 81       	ld	r24, Z
    48b2:	80 33       	cpi	r24, 0x30	; 48
    48b4:	19 f4       	brne	.+6      	; 0x48bc <vfprintf+0x232>
    48b6:	11 50       	subi	r17, 0x01	; 1
    48b8:	11 11       	cpse	r17, r1
    48ba:	f4 cf       	rjmp	.-24     	; 0x48a4 <vfprintf+0x21a>
    48bc:	97 fe       	sbrs	r9, 7
    48be:	0e c0       	rjmp	.+28     	; 0x48dc <vfprintf+0x252>
    48c0:	44 24       	eor	r4, r4
    48c2:	43 94       	inc	r4
    48c4:	41 0e       	add	r4, r17
    48c6:	81 2f       	mov	r24, r17
    48c8:	90 e0       	ldi	r25, 0x00	; 0
    48ca:	c8 16       	cp	r12, r24
    48cc:	d9 06       	cpc	r13, r25
    48ce:	2c f4       	brge	.+10     	; 0x48da <vfprintf+0x250>
    48d0:	1c 19       	sub	r17, r12
    48d2:	04 c0       	rjmp	.+8      	; 0x48dc <vfprintf+0x252>
    48d4:	44 24       	eor	r4, r4
    48d6:	43 94       	inc	r4
    48d8:	01 c0       	rjmp	.+2      	; 0x48dc <vfprintf+0x252>
    48da:	10 e0       	ldi	r17, 0x00	; 0
    48dc:	97 fe       	sbrs	r9, 7
    48de:	06 c0       	rjmp	.+12     	; 0x48ec <vfprintf+0x262>
    48e0:	1c 14       	cp	r1, r12
    48e2:	1d 04       	cpc	r1, r13
    48e4:	34 f4       	brge	.+12     	; 0x48f2 <vfprintf+0x268>
    48e6:	c6 01       	movw	r24, r12
    48e8:	01 96       	adiw	r24, 0x01	; 1
    48ea:	05 c0       	rjmp	.+10     	; 0x48f6 <vfprintf+0x26c>
    48ec:	85 e0       	ldi	r24, 0x05	; 5
    48ee:	90 e0       	ldi	r25, 0x00	; 0
    48f0:	02 c0       	rjmp	.+4      	; 0x48f6 <vfprintf+0x26c>
    48f2:	81 e0       	ldi	r24, 0x01	; 1
    48f4:	90 e0       	ldi	r25, 0x00	; 0
    48f6:	01 11       	cpse	r16, r1
    48f8:	01 96       	adiw	r24, 0x01	; 1
    48fa:	11 23       	and	r17, r17
    48fc:	31 f0       	breq	.+12     	; 0x490a <vfprintf+0x280>
    48fe:	21 2f       	mov	r18, r17
    4900:	30 e0       	ldi	r19, 0x00	; 0
    4902:	2f 5f       	subi	r18, 0xFF	; 255
    4904:	3f 4f       	sbci	r19, 0xFF	; 255
    4906:	82 0f       	add	r24, r18
    4908:	93 1f       	adc	r25, r19
    490a:	25 2d       	mov	r18, r5
    490c:	30 e0       	ldi	r19, 0x00	; 0
    490e:	82 17       	cp	r24, r18
    4910:	93 07       	cpc	r25, r19
    4912:	14 f4       	brge	.+4      	; 0x4918 <vfprintf+0x28e>
    4914:	58 1a       	sub	r5, r24
    4916:	01 c0       	rjmp	.+2      	; 0x491a <vfprintf+0x290>
    4918:	51 2c       	mov	r5, r1
    491a:	89 2d       	mov	r24, r9
    491c:	89 70       	andi	r24, 0x09	; 9
    491e:	49 f4       	brne	.+18     	; 0x4932 <vfprintf+0x2a8>
    4920:	55 20       	and	r5, r5
    4922:	39 f0       	breq	.+14     	; 0x4932 <vfprintf+0x2a8>
    4924:	b7 01       	movw	r22, r14
    4926:	80 e2       	ldi	r24, 0x20	; 32
    4928:	90 e0       	ldi	r25, 0x00	; 0
    492a:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    492e:	5a 94       	dec	r5
    4930:	f7 cf       	rjmp	.-18     	; 0x4920 <vfprintf+0x296>
    4932:	00 23       	and	r16, r16
    4934:	29 f0       	breq	.+10     	; 0x4940 <vfprintf+0x2b6>
    4936:	b7 01       	movw	r22, r14
    4938:	80 2f       	mov	r24, r16
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4940:	93 fc       	sbrc	r9, 3
    4942:	09 c0       	rjmp	.+18     	; 0x4956 <vfprintf+0x2cc>
    4944:	55 20       	and	r5, r5
    4946:	39 f0       	breq	.+14     	; 0x4956 <vfprintf+0x2cc>
    4948:	b7 01       	movw	r22, r14
    494a:	80 e3       	ldi	r24, 0x30	; 48
    494c:	90 e0       	ldi	r25, 0x00	; 0
    494e:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4952:	5a 94       	dec	r5
    4954:	f7 cf       	rjmp	.-18     	; 0x4944 <vfprintf+0x2ba>
    4956:	97 fe       	sbrs	r9, 7
    4958:	4c c0       	rjmp	.+152    	; 0x49f2 <vfprintf+0x368>
    495a:	46 01       	movw	r8, r12
    495c:	d7 fe       	sbrs	r13, 7
    495e:	02 c0       	rjmp	.+4      	; 0x4964 <vfprintf+0x2da>
    4960:	81 2c       	mov	r8, r1
    4962:	91 2c       	mov	r9, r1
    4964:	c6 01       	movw	r24, r12
    4966:	88 19       	sub	r24, r8
    4968:	99 09       	sbc	r25, r9
    496a:	f3 01       	movw	r30, r6
    496c:	e8 0f       	add	r30, r24
    496e:	f9 1f       	adc	r31, r25
    4970:	fe 87       	std	Y+14, r31	; 0x0e
    4972:	ed 87       	std	Y+13, r30	; 0x0d
    4974:	96 01       	movw	r18, r12
    4976:	24 19       	sub	r18, r4
    4978:	31 09       	sbc	r19, r1
    497a:	38 8b       	std	Y+16, r19	; 0x10
    497c:	2f 87       	std	Y+15, r18	; 0x0f
    497e:	01 2f       	mov	r16, r17
    4980:	10 e0       	ldi	r17, 0x00	; 0
    4982:	11 95       	neg	r17
    4984:	01 95       	neg	r16
    4986:	11 09       	sbc	r17, r1
    4988:	3f ef       	ldi	r19, 0xFF	; 255
    498a:	83 16       	cp	r8, r19
    498c:	93 06       	cpc	r9, r19
    498e:	29 f4       	brne	.+10     	; 0x499a <vfprintf+0x310>
    4990:	b7 01       	movw	r22, r14
    4992:	8e e2       	ldi	r24, 0x2E	; 46
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    499a:	c8 14       	cp	r12, r8
    499c:	d9 04       	cpc	r13, r9
    499e:	4c f0       	brlt	.+18     	; 0x49b2 <vfprintf+0x328>
    49a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    49a2:	98 89       	ldd	r25, Y+16	; 0x10
    49a4:	88 15       	cp	r24, r8
    49a6:	99 05       	cpc	r25, r9
    49a8:	24 f4       	brge	.+8      	; 0x49b2 <vfprintf+0x328>
    49aa:	ed 85       	ldd	r30, Y+13	; 0x0d
    49ac:	fe 85       	ldd	r31, Y+14	; 0x0e
    49ae:	81 81       	ldd	r24, Z+1	; 0x01
    49b0:	01 c0       	rjmp	.+2      	; 0x49b4 <vfprintf+0x32a>
    49b2:	80 e3       	ldi	r24, 0x30	; 48
    49b4:	f1 e0       	ldi	r31, 0x01	; 1
    49b6:	8f 1a       	sub	r8, r31
    49b8:	91 08       	sbc	r9, r1
    49ba:	2d 85       	ldd	r18, Y+13	; 0x0d
    49bc:	3e 85       	ldd	r19, Y+14	; 0x0e
    49be:	2f 5f       	subi	r18, 0xFF	; 255
    49c0:	3f 4f       	sbci	r19, 0xFF	; 255
    49c2:	3e 87       	std	Y+14, r19	; 0x0e
    49c4:	2d 87       	std	Y+13, r18	; 0x0d
    49c6:	80 16       	cp	r8, r16
    49c8:	91 06       	cpc	r9, r17
    49ca:	2c f0       	brlt	.+10     	; 0x49d6 <vfprintf+0x34c>
    49cc:	b7 01       	movw	r22, r14
    49ce:	90 e0       	ldi	r25, 0x00	; 0
    49d0:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    49d4:	d9 cf       	rjmp	.-78     	; 0x4988 <vfprintf+0x2fe>
    49d6:	c8 14       	cp	r12, r8
    49d8:	d9 04       	cpc	r13, r9
    49da:	41 f4       	brne	.+16     	; 0x49ec <vfprintf+0x362>
    49dc:	9a 81       	ldd	r25, Y+2	; 0x02
    49de:	96 33       	cpi	r25, 0x36	; 54
    49e0:	20 f4       	brcc	.+8      	; 0x49ea <vfprintf+0x360>
    49e2:	95 33       	cpi	r25, 0x35	; 53
    49e4:	19 f4       	brne	.+6      	; 0x49ec <vfprintf+0x362>
    49e6:	3c 85       	ldd	r19, Y+12	; 0x0c
    49e8:	34 ff       	sbrs	r19, 4
    49ea:	81 e3       	ldi	r24, 0x31	; 49
    49ec:	b7 01       	movw	r22, r14
    49ee:	90 e0       	ldi	r25, 0x00	; 0
    49f0:	4e c0       	rjmp	.+156    	; 0x4a8e <vfprintf+0x404>
    49f2:	8a 81       	ldd	r24, Y+2	; 0x02
    49f4:	81 33       	cpi	r24, 0x31	; 49
    49f6:	19 f0       	breq	.+6      	; 0x49fe <vfprintf+0x374>
    49f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    49fa:	9f 7e       	andi	r25, 0xEF	; 239
    49fc:	9c 87       	std	Y+12, r25	; 0x0c
    49fe:	b7 01       	movw	r22, r14
    4a00:	90 e0       	ldi	r25, 0x00	; 0
    4a02:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4a06:	11 11       	cpse	r17, r1
    4a08:	05 c0       	rjmp	.+10     	; 0x4a14 <vfprintf+0x38a>
    4a0a:	94 fc       	sbrc	r9, 4
    4a0c:	18 c0       	rjmp	.+48     	; 0x4a3e <vfprintf+0x3b4>
    4a0e:	85 e6       	ldi	r24, 0x65	; 101
    4a10:	90 e0       	ldi	r25, 0x00	; 0
    4a12:	17 c0       	rjmp	.+46     	; 0x4a42 <vfprintf+0x3b8>
    4a14:	b7 01       	movw	r22, r14
    4a16:	8e e2       	ldi	r24, 0x2E	; 46
    4a18:	90 e0       	ldi	r25, 0x00	; 0
    4a1a:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4a1e:	1e 5f       	subi	r17, 0xFE	; 254
    4a20:	82 e0       	ldi	r24, 0x02	; 2
    4a22:	01 e0       	ldi	r16, 0x01	; 1
    4a24:	08 0f       	add	r16, r24
    4a26:	f3 01       	movw	r30, r6
    4a28:	e8 0f       	add	r30, r24
    4a2a:	f1 1d       	adc	r31, r1
    4a2c:	80 81       	ld	r24, Z
    4a2e:	b7 01       	movw	r22, r14
    4a30:	90 e0       	ldi	r25, 0x00	; 0
    4a32:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4a36:	80 2f       	mov	r24, r16
    4a38:	01 13       	cpse	r16, r17
    4a3a:	f3 cf       	rjmp	.-26     	; 0x4a22 <vfprintf+0x398>
    4a3c:	e6 cf       	rjmp	.-52     	; 0x4a0a <vfprintf+0x380>
    4a3e:	85 e4       	ldi	r24, 0x45	; 69
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	b7 01       	movw	r22, r14
    4a44:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4a48:	d7 fc       	sbrc	r13, 7
    4a4a:	06 c0       	rjmp	.+12     	; 0x4a58 <vfprintf+0x3ce>
    4a4c:	c1 14       	cp	r12, r1
    4a4e:	d1 04       	cpc	r13, r1
    4a50:	41 f4       	brne	.+16     	; 0x4a62 <vfprintf+0x3d8>
    4a52:	ec 85       	ldd	r30, Y+12	; 0x0c
    4a54:	e4 ff       	sbrs	r30, 4
    4a56:	05 c0       	rjmp	.+10     	; 0x4a62 <vfprintf+0x3d8>
    4a58:	d1 94       	neg	r13
    4a5a:	c1 94       	neg	r12
    4a5c:	d1 08       	sbc	r13, r1
    4a5e:	8d e2       	ldi	r24, 0x2D	; 45
    4a60:	01 c0       	rjmp	.+2      	; 0x4a64 <vfprintf+0x3da>
    4a62:	8b e2       	ldi	r24, 0x2B	; 43
    4a64:	b7 01       	movw	r22, r14
    4a66:	90 e0       	ldi	r25, 0x00	; 0
    4a68:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4a6c:	80 e3       	ldi	r24, 0x30	; 48
    4a6e:	2a e0       	ldi	r18, 0x0A	; 10
    4a70:	c2 16       	cp	r12, r18
    4a72:	d1 04       	cpc	r13, r1
    4a74:	2c f0       	brlt	.+10     	; 0x4a80 <vfprintf+0x3f6>
    4a76:	8f 5f       	subi	r24, 0xFF	; 255
    4a78:	fa e0       	ldi	r31, 0x0A	; 10
    4a7a:	cf 1a       	sub	r12, r31
    4a7c:	d1 08       	sbc	r13, r1
    4a7e:	f7 cf       	rjmp	.-18     	; 0x4a6e <vfprintf+0x3e4>
    4a80:	b7 01       	movw	r22, r14
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4a88:	b7 01       	movw	r22, r14
    4a8a:	c6 01       	movw	r24, r12
    4a8c:	c0 96       	adiw	r24, 0x30	; 48
    4a8e:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4a92:	54 c1       	rjmp	.+680    	; 0x4d3c <vfprintf+0x6b2>
    4a94:	83 36       	cpi	r24, 0x63	; 99
    4a96:	31 f0       	breq	.+12     	; 0x4aa4 <vfprintf+0x41a>
    4a98:	83 37       	cpi	r24, 0x73	; 115
    4a9a:	79 f0       	breq	.+30     	; 0x4aba <vfprintf+0x430>
    4a9c:	83 35       	cpi	r24, 0x53	; 83
    4a9e:	09 f0       	breq	.+2      	; 0x4aa2 <vfprintf+0x418>
    4aa0:	56 c0       	rjmp	.+172    	; 0x4b4e <vfprintf+0x4c4>
    4aa2:	20 c0       	rjmp	.+64     	; 0x4ae4 <vfprintf+0x45a>
    4aa4:	56 01       	movw	r10, r12
    4aa6:	32 e0       	ldi	r19, 0x02	; 2
    4aa8:	a3 0e       	add	r10, r19
    4aaa:	b1 1c       	adc	r11, r1
    4aac:	f6 01       	movw	r30, r12
    4aae:	80 81       	ld	r24, Z
    4ab0:	89 83       	std	Y+1, r24	; 0x01
    4ab2:	01 e0       	ldi	r16, 0x01	; 1
    4ab4:	10 e0       	ldi	r17, 0x00	; 0
    4ab6:	63 01       	movw	r12, r6
    4ab8:	12 c0       	rjmp	.+36     	; 0x4ade <vfprintf+0x454>
    4aba:	56 01       	movw	r10, r12
    4abc:	f2 e0       	ldi	r31, 0x02	; 2
    4abe:	af 0e       	add	r10, r31
    4ac0:	b1 1c       	adc	r11, r1
    4ac2:	f6 01       	movw	r30, r12
    4ac4:	c0 80       	ld	r12, Z
    4ac6:	d1 80       	ldd	r13, Z+1	; 0x01
    4ac8:	96 fe       	sbrs	r9, 6
    4aca:	03 c0       	rjmp	.+6      	; 0x4ad2 <vfprintf+0x448>
    4acc:	61 2f       	mov	r22, r17
    4ace:	70 e0       	ldi	r23, 0x00	; 0
    4ad0:	02 c0       	rjmp	.+4      	; 0x4ad6 <vfprintf+0x44c>
    4ad2:	6f ef       	ldi	r22, 0xFF	; 255
    4ad4:	7f ef       	ldi	r23, 0xFF	; 255
    4ad6:	c6 01       	movw	r24, r12
    4ad8:	0e 94 b1 e7 	call	0x1cf62	; 0x1cf62 <strnlen>
    4adc:	8c 01       	movw	r16, r24
    4ade:	f9 2d       	mov	r31, r9
    4ae0:	ff 77       	andi	r31, 0x7F	; 127
    4ae2:	14 c0       	rjmp	.+40     	; 0x4b0c <vfprintf+0x482>
    4ae4:	56 01       	movw	r10, r12
    4ae6:	22 e0       	ldi	r18, 0x02	; 2
    4ae8:	a2 0e       	add	r10, r18
    4aea:	b1 1c       	adc	r11, r1
    4aec:	f6 01       	movw	r30, r12
    4aee:	c0 80       	ld	r12, Z
    4af0:	d1 80       	ldd	r13, Z+1	; 0x01
    4af2:	96 fe       	sbrs	r9, 6
    4af4:	03 c0       	rjmp	.+6      	; 0x4afc <vfprintf+0x472>
    4af6:	61 2f       	mov	r22, r17
    4af8:	70 e0       	ldi	r23, 0x00	; 0
    4afa:	02 c0       	rjmp	.+4      	; 0x4b00 <vfprintf+0x476>
    4afc:	6f ef       	ldi	r22, 0xFF	; 255
    4afe:	7f ef       	ldi	r23, 0xFF	; 255
    4b00:	c6 01       	movw	r24, r12
    4b02:	0e 94 9f e7 	call	0x1cf3e	; 0x1cf3e <strnlen_P>
    4b06:	8c 01       	movw	r16, r24
    4b08:	f9 2d       	mov	r31, r9
    4b0a:	f0 68       	ori	r31, 0x80	; 128
    4b0c:	9f 2e       	mov	r9, r31
    4b0e:	f3 fd       	sbrc	r31, 3
    4b10:	1a c0       	rjmp	.+52     	; 0x4b46 <vfprintf+0x4bc>
    4b12:	85 2d       	mov	r24, r5
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	08 17       	cp	r16, r24
    4b18:	19 07       	cpc	r17, r25
    4b1a:	a8 f4       	brcc	.+42     	; 0x4b46 <vfprintf+0x4bc>
    4b1c:	b7 01       	movw	r22, r14
    4b1e:	80 e2       	ldi	r24, 0x20	; 32
    4b20:	90 e0       	ldi	r25, 0x00	; 0
    4b22:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4b26:	5a 94       	dec	r5
    4b28:	f4 cf       	rjmp	.-24     	; 0x4b12 <vfprintf+0x488>
    4b2a:	f6 01       	movw	r30, r12
    4b2c:	97 fc       	sbrc	r9, 7
    4b2e:	85 91       	lpm	r24, Z+
    4b30:	97 fe       	sbrs	r9, 7
    4b32:	81 91       	ld	r24, Z+
    4b34:	6f 01       	movw	r12, r30
    4b36:	b7 01       	movw	r22, r14
    4b38:	90 e0       	ldi	r25, 0x00	; 0
    4b3a:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4b3e:	51 10       	cpse	r5, r1
    4b40:	5a 94       	dec	r5
    4b42:	01 50       	subi	r16, 0x01	; 1
    4b44:	11 09       	sbc	r17, r1
    4b46:	01 15       	cp	r16, r1
    4b48:	11 05       	cpc	r17, r1
    4b4a:	79 f7       	brne	.-34     	; 0x4b2a <vfprintf+0x4a0>
    4b4c:	f7 c0       	rjmp	.+494    	; 0x4d3c <vfprintf+0x6b2>
    4b4e:	84 36       	cpi	r24, 0x64	; 100
    4b50:	11 f0       	breq	.+4      	; 0x4b56 <vfprintf+0x4cc>
    4b52:	89 36       	cpi	r24, 0x69	; 105
    4b54:	61 f5       	brne	.+88     	; 0x4bae <vfprintf+0x524>
    4b56:	56 01       	movw	r10, r12
    4b58:	97 fe       	sbrs	r9, 7
    4b5a:	09 c0       	rjmp	.+18     	; 0x4b6e <vfprintf+0x4e4>
    4b5c:	24 e0       	ldi	r18, 0x04	; 4
    4b5e:	a2 0e       	add	r10, r18
    4b60:	b1 1c       	adc	r11, r1
    4b62:	f6 01       	movw	r30, r12
    4b64:	60 81       	ld	r22, Z
    4b66:	71 81       	ldd	r23, Z+1	; 0x01
    4b68:	82 81       	ldd	r24, Z+2	; 0x02
    4b6a:	93 81       	ldd	r25, Z+3	; 0x03
    4b6c:	0a c0       	rjmp	.+20     	; 0x4b82 <vfprintf+0x4f8>
    4b6e:	f2 e0       	ldi	r31, 0x02	; 2
    4b70:	af 0e       	add	r10, r31
    4b72:	b1 1c       	adc	r11, r1
    4b74:	f6 01       	movw	r30, r12
    4b76:	60 81       	ld	r22, Z
    4b78:	71 81       	ldd	r23, Z+1	; 0x01
    4b7a:	07 2e       	mov	r0, r23
    4b7c:	00 0c       	add	r0, r0
    4b7e:	88 0b       	sbc	r24, r24
    4b80:	99 0b       	sbc	r25, r25
    4b82:	f9 2d       	mov	r31, r9
    4b84:	ff 76       	andi	r31, 0x6F	; 111
    4b86:	9f 2e       	mov	r9, r31
    4b88:	97 ff       	sbrs	r25, 7
    4b8a:	09 c0       	rjmp	.+18     	; 0x4b9e <vfprintf+0x514>
    4b8c:	90 95       	com	r25
    4b8e:	80 95       	com	r24
    4b90:	70 95       	com	r23
    4b92:	61 95       	neg	r22
    4b94:	7f 4f       	sbci	r23, 0xFF	; 255
    4b96:	8f 4f       	sbci	r24, 0xFF	; 255
    4b98:	9f 4f       	sbci	r25, 0xFF	; 255
    4b9a:	f0 68       	ori	r31, 0x80	; 128
    4b9c:	9f 2e       	mov	r9, r31
    4b9e:	2a e0       	ldi	r18, 0x0A	; 10
    4ba0:	30 e0       	ldi	r19, 0x00	; 0
    4ba2:	a3 01       	movw	r20, r6
    4ba4:	0e 94 bc e7 	call	0x1cf78	; 0x1cf78 <__ultoa_invert>
    4ba8:	c8 2e       	mov	r12, r24
    4baa:	c6 18       	sub	r12, r6
    4bac:	3f c0       	rjmp	.+126    	; 0x4c2c <vfprintf+0x5a2>
    4bae:	09 2d       	mov	r16, r9
    4bb0:	85 37       	cpi	r24, 0x75	; 117
    4bb2:	21 f4       	brne	.+8      	; 0x4bbc <vfprintf+0x532>
    4bb4:	0f 7e       	andi	r16, 0xEF	; 239
    4bb6:	2a e0       	ldi	r18, 0x0A	; 10
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	1d c0       	rjmp	.+58     	; 0x4bf6 <vfprintf+0x56c>
    4bbc:	09 7f       	andi	r16, 0xF9	; 249
    4bbe:	8f 36       	cpi	r24, 0x6F	; 111
    4bc0:	91 f0       	breq	.+36     	; 0x4be6 <vfprintf+0x55c>
    4bc2:	18 f4       	brcc	.+6      	; 0x4bca <vfprintf+0x540>
    4bc4:	88 35       	cpi	r24, 0x58	; 88
    4bc6:	59 f0       	breq	.+22     	; 0x4bde <vfprintf+0x554>
    4bc8:	c3 c0       	rjmp	.+390    	; 0x4d50 <vfprintf+0x6c6>
    4bca:	80 37       	cpi	r24, 0x70	; 112
    4bcc:	19 f0       	breq	.+6      	; 0x4bd4 <vfprintf+0x54a>
    4bce:	88 37       	cpi	r24, 0x78	; 120
    4bd0:	11 f0       	breq	.+4      	; 0x4bd6 <vfprintf+0x54c>
    4bd2:	be c0       	rjmp	.+380    	; 0x4d50 <vfprintf+0x6c6>
    4bd4:	00 61       	ori	r16, 0x10	; 16
    4bd6:	04 ff       	sbrs	r16, 4
    4bd8:	09 c0       	rjmp	.+18     	; 0x4bec <vfprintf+0x562>
    4bda:	04 60       	ori	r16, 0x04	; 4
    4bdc:	07 c0       	rjmp	.+14     	; 0x4bec <vfprintf+0x562>
    4bde:	94 fe       	sbrs	r9, 4
    4be0:	08 c0       	rjmp	.+16     	; 0x4bf2 <vfprintf+0x568>
    4be2:	06 60       	ori	r16, 0x06	; 6
    4be4:	06 c0       	rjmp	.+12     	; 0x4bf2 <vfprintf+0x568>
    4be6:	28 e0       	ldi	r18, 0x08	; 8
    4be8:	30 e0       	ldi	r19, 0x00	; 0
    4bea:	05 c0       	rjmp	.+10     	; 0x4bf6 <vfprintf+0x56c>
    4bec:	20 e1       	ldi	r18, 0x10	; 16
    4bee:	30 e0       	ldi	r19, 0x00	; 0
    4bf0:	02 c0       	rjmp	.+4      	; 0x4bf6 <vfprintf+0x56c>
    4bf2:	20 e1       	ldi	r18, 0x10	; 16
    4bf4:	32 e0       	ldi	r19, 0x02	; 2
    4bf6:	56 01       	movw	r10, r12
    4bf8:	07 ff       	sbrs	r16, 7
    4bfa:	09 c0       	rjmp	.+18     	; 0x4c0e <vfprintf+0x584>
    4bfc:	84 e0       	ldi	r24, 0x04	; 4
    4bfe:	a8 0e       	add	r10, r24
    4c00:	b1 1c       	adc	r11, r1
    4c02:	f6 01       	movw	r30, r12
    4c04:	60 81       	ld	r22, Z
    4c06:	71 81       	ldd	r23, Z+1	; 0x01
    4c08:	82 81       	ldd	r24, Z+2	; 0x02
    4c0a:	93 81       	ldd	r25, Z+3	; 0x03
    4c0c:	08 c0       	rjmp	.+16     	; 0x4c1e <vfprintf+0x594>
    4c0e:	f2 e0       	ldi	r31, 0x02	; 2
    4c10:	af 0e       	add	r10, r31
    4c12:	b1 1c       	adc	r11, r1
    4c14:	f6 01       	movw	r30, r12
    4c16:	60 81       	ld	r22, Z
    4c18:	71 81       	ldd	r23, Z+1	; 0x01
    4c1a:	80 e0       	ldi	r24, 0x00	; 0
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	a3 01       	movw	r20, r6
    4c20:	0e 94 bc e7 	call	0x1cf78	; 0x1cf78 <__ultoa_invert>
    4c24:	c8 2e       	mov	r12, r24
    4c26:	c6 18       	sub	r12, r6
    4c28:	0f 77       	andi	r16, 0x7F	; 127
    4c2a:	90 2e       	mov	r9, r16
    4c2c:	96 fe       	sbrs	r9, 6
    4c2e:	0b c0       	rjmp	.+22     	; 0x4c46 <vfprintf+0x5bc>
    4c30:	09 2d       	mov	r16, r9
    4c32:	0e 7f       	andi	r16, 0xFE	; 254
    4c34:	c1 16       	cp	r12, r17
    4c36:	50 f4       	brcc	.+20     	; 0x4c4c <vfprintf+0x5c2>
    4c38:	94 fe       	sbrs	r9, 4
    4c3a:	0a c0       	rjmp	.+20     	; 0x4c50 <vfprintf+0x5c6>
    4c3c:	92 fc       	sbrc	r9, 2
    4c3e:	08 c0       	rjmp	.+16     	; 0x4c50 <vfprintf+0x5c6>
    4c40:	09 2d       	mov	r16, r9
    4c42:	0e 7e       	andi	r16, 0xEE	; 238
    4c44:	05 c0       	rjmp	.+10     	; 0x4c50 <vfprintf+0x5c6>
    4c46:	dc 2c       	mov	r13, r12
    4c48:	09 2d       	mov	r16, r9
    4c4a:	03 c0       	rjmp	.+6      	; 0x4c52 <vfprintf+0x5c8>
    4c4c:	dc 2c       	mov	r13, r12
    4c4e:	01 c0       	rjmp	.+2      	; 0x4c52 <vfprintf+0x5c8>
    4c50:	d1 2e       	mov	r13, r17
    4c52:	04 ff       	sbrs	r16, 4
    4c54:	0d c0       	rjmp	.+26     	; 0x4c70 <vfprintf+0x5e6>
    4c56:	fe 01       	movw	r30, r28
    4c58:	ec 0d       	add	r30, r12
    4c5a:	f1 1d       	adc	r31, r1
    4c5c:	80 81       	ld	r24, Z
    4c5e:	80 33       	cpi	r24, 0x30	; 48
    4c60:	11 f4       	brne	.+4      	; 0x4c66 <vfprintf+0x5dc>
    4c62:	09 7e       	andi	r16, 0xE9	; 233
    4c64:	09 c0       	rjmp	.+18     	; 0x4c78 <vfprintf+0x5ee>
    4c66:	02 ff       	sbrs	r16, 2
    4c68:	06 c0       	rjmp	.+12     	; 0x4c76 <vfprintf+0x5ec>
    4c6a:	d3 94       	inc	r13
    4c6c:	d3 94       	inc	r13
    4c6e:	04 c0       	rjmp	.+8      	; 0x4c78 <vfprintf+0x5ee>
    4c70:	80 2f       	mov	r24, r16
    4c72:	86 78       	andi	r24, 0x86	; 134
    4c74:	09 f0       	breq	.+2      	; 0x4c78 <vfprintf+0x5ee>
    4c76:	d3 94       	inc	r13
    4c78:	03 fd       	sbrc	r16, 3
    4c7a:	11 c0       	rjmp	.+34     	; 0x4c9e <vfprintf+0x614>
    4c7c:	00 ff       	sbrs	r16, 0
    4c7e:	06 c0       	rjmp	.+12     	; 0x4c8c <vfprintf+0x602>
    4c80:	1c 2d       	mov	r17, r12
    4c82:	d5 14       	cp	r13, r5
    4c84:	80 f4       	brcc	.+32     	; 0x4ca6 <vfprintf+0x61c>
    4c86:	15 0d       	add	r17, r5
    4c88:	1d 19       	sub	r17, r13
    4c8a:	0d c0       	rjmp	.+26     	; 0x4ca6 <vfprintf+0x61c>
    4c8c:	d5 14       	cp	r13, r5
    4c8e:	58 f4       	brcc	.+22     	; 0x4ca6 <vfprintf+0x61c>
    4c90:	b7 01       	movw	r22, r14
    4c92:	80 e2       	ldi	r24, 0x20	; 32
    4c94:	90 e0       	ldi	r25, 0x00	; 0
    4c96:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4c9a:	d3 94       	inc	r13
    4c9c:	f7 cf       	rjmp	.-18     	; 0x4c8c <vfprintf+0x602>
    4c9e:	d5 14       	cp	r13, r5
    4ca0:	10 f4       	brcc	.+4      	; 0x4ca6 <vfprintf+0x61c>
    4ca2:	5d 18       	sub	r5, r13
    4ca4:	01 c0       	rjmp	.+2      	; 0x4ca8 <vfprintf+0x61e>
    4ca6:	51 2c       	mov	r5, r1
    4ca8:	04 ff       	sbrs	r16, 4
    4caa:	10 c0       	rjmp	.+32     	; 0x4ccc <vfprintf+0x642>
    4cac:	b7 01       	movw	r22, r14
    4cae:	80 e3       	ldi	r24, 0x30	; 48
    4cb0:	90 e0       	ldi	r25, 0x00	; 0
    4cb2:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4cb6:	02 ff       	sbrs	r16, 2
    4cb8:	17 c0       	rjmp	.+46     	; 0x4ce8 <vfprintf+0x65e>
    4cba:	01 fd       	sbrc	r16, 1
    4cbc:	03 c0       	rjmp	.+6      	; 0x4cc4 <vfprintf+0x63a>
    4cbe:	88 e7       	ldi	r24, 0x78	; 120
    4cc0:	90 e0       	ldi	r25, 0x00	; 0
    4cc2:	02 c0       	rjmp	.+4      	; 0x4cc8 <vfprintf+0x63e>
    4cc4:	88 e5       	ldi	r24, 0x58	; 88
    4cc6:	90 e0       	ldi	r25, 0x00	; 0
    4cc8:	b7 01       	movw	r22, r14
    4cca:	0c c0       	rjmp	.+24     	; 0x4ce4 <vfprintf+0x65a>
    4ccc:	80 2f       	mov	r24, r16
    4cce:	86 78       	andi	r24, 0x86	; 134
    4cd0:	59 f0       	breq	.+22     	; 0x4ce8 <vfprintf+0x65e>
    4cd2:	01 ff       	sbrs	r16, 1
    4cd4:	02 c0       	rjmp	.+4      	; 0x4cda <vfprintf+0x650>
    4cd6:	8b e2       	ldi	r24, 0x2B	; 43
    4cd8:	01 c0       	rjmp	.+2      	; 0x4cdc <vfprintf+0x652>
    4cda:	80 e2       	ldi	r24, 0x20	; 32
    4cdc:	07 fd       	sbrc	r16, 7
    4cde:	8d e2       	ldi	r24, 0x2D	; 45
    4ce0:	b7 01       	movw	r22, r14
    4ce2:	90 e0       	ldi	r25, 0x00	; 0
    4ce4:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4ce8:	c1 16       	cp	r12, r17
    4cea:	38 f4       	brcc	.+14     	; 0x4cfa <vfprintf+0x670>
    4cec:	b7 01       	movw	r22, r14
    4cee:	80 e3       	ldi	r24, 0x30	; 48
    4cf0:	90 e0       	ldi	r25, 0x00	; 0
    4cf2:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4cf6:	11 50       	subi	r17, 0x01	; 1
    4cf8:	f7 cf       	rjmp	.-18     	; 0x4ce8 <vfprintf+0x65e>
    4cfa:	ca 94       	dec	r12
    4cfc:	f3 01       	movw	r30, r6
    4cfe:	ec 0d       	add	r30, r12
    4d00:	f1 1d       	adc	r31, r1
    4d02:	80 81       	ld	r24, Z
    4d04:	b7 01       	movw	r22, r14
    4d06:	90 e0       	ldi	r25, 0x00	; 0
    4d08:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4d0c:	c1 10       	cpse	r12, r1
    4d0e:	f5 cf       	rjmp	.-22     	; 0x4cfa <vfprintf+0x670>
    4d10:	15 c0       	rjmp	.+42     	; 0x4d3c <vfprintf+0x6b2>
    4d12:	f4 e0       	ldi	r31, 0x04	; 4
    4d14:	f5 15       	cp	r31, r5
    4d16:	60 f5       	brcc	.+88     	; 0x4d70 <vfprintf+0x6e6>
    4d18:	84 e0       	ldi	r24, 0x04	; 4
    4d1a:	58 1a       	sub	r5, r24
    4d1c:	93 fe       	sbrs	r9, 3
    4d1e:	1f c0       	rjmp	.+62     	; 0x4d5e <vfprintf+0x6d4>
    4d20:	01 11       	cpse	r16, r1
    4d22:	27 c0       	rjmp	.+78     	; 0x4d72 <vfprintf+0x6e8>
    4d24:	2c 85       	ldd	r18, Y+12	; 0x0c
    4d26:	23 ff       	sbrs	r18, 3
    4d28:	2a c0       	rjmp	.+84     	; 0x4d7e <vfprintf+0x6f4>
    4d2a:	06 ed       	ldi	r16, 0xD6	; 214
    4d2c:	11 e0       	ldi	r17, 0x01	; 1
    4d2e:	39 2d       	mov	r19, r9
    4d30:	30 71       	andi	r19, 0x10	; 16
    4d32:	93 2e       	mov	r9, r19
    4d34:	f8 01       	movw	r30, r16
    4d36:	84 91       	lpm	r24, Z
    4d38:	81 11       	cpse	r24, r1
    4d3a:	24 c0       	rjmp	.+72     	; 0x4d84 <vfprintf+0x6fa>
    4d3c:	55 20       	and	r5, r5
    4d3e:	09 f4       	brne	.+2      	; 0x4d42 <vfprintf+0x6b8>
    4d40:	e4 cc       	rjmp	.-1592   	; 0x470a <vfprintf+0x80>
    4d42:	b7 01       	movw	r22, r14
    4d44:	80 e2       	ldi	r24, 0x20	; 32
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4d4c:	5a 94       	dec	r5
    4d4e:	f6 cf       	rjmp	.-20     	; 0x4d3c <vfprintf+0x6b2>
    4d50:	f7 01       	movw	r30, r14
    4d52:	86 81       	ldd	r24, Z+6	; 0x06
    4d54:	97 81       	ldd	r25, Z+7	; 0x07
    4d56:	26 c0       	rjmp	.+76     	; 0x4da4 <vfprintf+0x71a>
    4d58:	8f ef       	ldi	r24, 0xFF	; 255
    4d5a:	9f ef       	ldi	r25, 0xFF	; 255
    4d5c:	23 c0       	rjmp	.+70     	; 0x4da4 <vfprintf+0x71a>
    4d5e:	b7 01       	movw	r22, r14
    4d60:	80 e2       	ldi	r24, 0x20	; 32
    4d62:	90 e0       	ldi	r25, 0x00	; 0
    4d64:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4d68:	5a 94       	dec	r5
    4d6a:	51 10       	cpse	r5, r1
    4d6c:	f8 cf       	rjmp	.-16     	; 0x4d5e <vfprintf+0x6d4>
    4d6e:	d8 cf       	rjmp	.-80     	; 0x4d20 <vfprintf+0x696>
    4d70:	51 2c       	mov	r5, r1
    4d72:	b7 01       	movw	r22, r14
    4d74:	80 2f       	mov	r24, r16
    4d76:	90 e0       	ldi	r25, 0x00	; 0
    4d78:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4d7c:	d3 cf       	rjmp	.-90     	; 0x4d24 <vfprintf+0x69a>
    4d7e:	0a ed       	ldi	r16, 0xDA	; 218
    4d80:	11 e0       	ldi	r17, 0x01	; 1
    4d82:	d5 cf       	rjmp	.-86     	; 0x4d2e <vfprintf+0x6a4>
    4d84:	91 10       	cpse	r9, r1
    4d86:	80 52       	subi	r24, 0x20	; 32
    4d88:	b7 01       	movw	r22, r14
    4d8a:	90 e0       	ldi	r25, 0x00	; 0
    4d8c:	0e 94 6c 76 	call	0xecd8	; 0xecd8 <fputc>
    4d90:	0f 5f       	subi	r16, 0xFF	; 255
    4d92:	1f 4f       	sbci	r17, 0xFF	; 255
    4d94:	cf cf       	rjmp	.-98     	; 0x4d34 <vfprintf+0x6aa>
    4d96:	23 e0       	ldi	r18, 0x03	; 3
    4d98:	25 15       	cp	r18, r5
    4d9a:	10 f4       	brcc	.+4      	; 0x4da0 <vfprintf+0x716>
    4d9c:	83 e0       	ldi	r24, 0x03	; 3
    4d9e:	bd cf       	rjmp	.-134    	; 0x4d1a <vfprintf+0x690>
    4da0:	51 2c       	mov	r5, r1
    4da2:	c0 cf       	rjmp	.-128    	; 0x4d24 <vfprintf+0x69a>
    4da4:	60 96       	adiw	r28, 0x10	; 16
    4da6:	0f b6       	in	r0, 0x3f	; 63
    4da8:	f8 94       	cli
    4daa:	de bf       	out	0x3e, r29	; 62
    4dac:	0f be       	out	0x3f, r0	; 63
    4dae:	cd bf       	out	0x3d, r28	; 61
    4db0:	df 91       	pop	r29
    4db2:	cf 91       	pop	r28
    4db4:	1f 91       	pop	r17
    4db6:	0f 91       	pop	r16
    4db8:	ff 90       	pop	r15
    4dba:	ef 90       	pop	r14
    4dbc:	df 90       	pop	r13
    4dbe:	cf 90       	pop	r12
    4dc0:	bf 90       	pop	r11
    4dc2:	af 90       	pop	r10
    4dc4:	9f 90       	pop	r9
    4dc6:	8f 90       	pop	r8
    4dc8:	7f 90       	pop	r7
    4dca:	6f 90       	pop	r6
    4dcc:	5f 90       	pop	r5
    4dce:	4f 90       	pop	r4
    4dd0:	3f 90       	pop	r3
    4dd2:	2f 90       	pop	r2
    4dd4:	08 95       	ret

00004dd6 <chip_select>:
/// @brief SPI CS pin status
/// return CS GPIO pin number or 0xff
uint8_t spi_chip_select_status()
{
    return(_cs_pin);
}
    4dd6:	e8 2f       	mov	r30, r24
    4dd8:	e6 95       	lsr	r30
    4dda:	e6 95       	lsr	r30
    4ddc:	e6 95       	lsr	r30
    4dde:	93 e0       	ldi	r25, 0x03	; 3
    4de0:	e9 9f       	mul	r30, r25
    4de2:	f0 01       	movw	r30, r0
    4de4:	11 24       	eor	r1, r1
    4de6:	32 a1       	ldd	r19, Z+34	; 0x22
    4de8:	28 2f       	mov	r18, r24
    4dea:	27 70       	andi	r18, 0x07	; 7
    4dec:	81 e0       	ldi	r24, 0x01	; 1
    4dee:	90 e0       	ldi	r25, 0x00	; 0
    4df0:	01 c0       	rjmp	.+2      	; 0x4df4 <chip_select+0x1e>
    4df2:	88 0f       	add	r24, r24
    4df4:	2a 95       	dec	r18
    4df6:	ea f7       	brpl	.-6      	; 0x4df2 <chip_select+0x1c>
    4df8:	98 2f       	mov	r25, r24
    4dfa:	90 95       	com	r25
    4dfc:	93 23       	and	r25, r19
    4dfe:	92 a3       	std	Z+34, r25	; 0x22
    4e00:	91 a1       	ldd	r25, Z+33	; 0x21
    4e02:	89 2b       	or	r24, r25
    4e04:	81 a3       	std	Z+33, r24	; 0x21
    4e06:	08 95       	ret

00004e08 <chip_deselect>:
    4e08:	e8 2f       	mov	r30, r24
    4e0a:	e6 95       	lsr	r30
    4e0c:	e6 95       	lsr	r30
    4e0e:	e6 95       	lsr	r30
    4e10:	93 e0       	ldi	r25, 0x03	; 3
    4e12:	e9 9f       	mul	r30, r25
    4e14:	f0 01       	movw	r30, r0
    4e16:	11 24       	eor	r1, r1
    4e18:	32 a1       	ldd	r19, Z+34	; 0x22
    4e1a:	28 2f       	mov	r18, r24
    4e1c:	27 70       	andi	r18, 0x07	; 7
    4e1e:	81 e0       	ldi	r24, 0x01	; 1
    4e20:	90 e0       	ldi	r25, 0x00	; 0
    4e22:	01 c0       	rjmp	.+2      	; 0x4e26 <chip_deselect+0x1e>
    4e24:	88 0f       	add	r24, r24
    4e26:	2a 95       	dec	r18
    4e28:	ea f7       	brpl	.-6      	; 0x4e24 <chip_deselect+0x1c>
    4e2a:	93 2f       	mov	r25, r19
    4e2c:	98 2b       	or	r25, r24
    4e2e:	92 a3       	std	Z+34, r25	; 0x22
    4e30:	91 a1       	ldd	r25, Z+33	; 0x21
    4e32:	89 2b       	or	r24, r25
    4e34:	81 a3       	std	Z+33, r24	; 0x21
    4e36:	08 95       	ret

00004e38 <chip_select_init>:
    4e38:	e7 cf       	rjmp	.-50     	; 0x4e08 <chip_deselect>
    4e3a:	08 95       	ret

00004e3c <spi_end>:
    4e3c:	cf 93       	push	r28
    4e3e:	ad b7       	in	r26, 0x3d	; 61
    4e40:	be b7       	in	r27, 0x3e	; 62
    4e42:	17 97       	sbiw	r26, 0x07	; 7
    4e44:	0f b6       	in	r0, 0x3f	; 63
    4e46:	f8 94       	cli
    4e48:	be bf       	out	0x3e, r27	; 62
    4e4a:	0f be       	out	0x3f, r0	; 63
    4e4c:	ad bf       	out	0x3d, r26	; 61
    4e4e:	c8 2f       	mov	r28, r24
    4e50:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4e54:	8c 17       	cp	r24, r28
    4e56:	99 f0       	breq	.+38     	; 0x4e7e <spi_end+0x42>
    4e58:	8f 3f       	cpi	r24, 0xFF	; 255
    4e5a:	89 f0       	breq	.+34     	; 0x4e7e <spi_end+0x42>
    4e5c:	2c 2f       	mov	r18, r28
    4e5e:	30 e0       	ldi	r19, 0x00	; 0
    4e60:	ed b7       	in	r30, 0x3d	; 61
    4e62:	fe b7       	in	r31, 0x3e	; 62
    4e64:	37 83       	std	Z+7, r19	; 0x07
    4e66:	26 83       	std	Z+6, r18	; 0x06
    4e68:	90 e0       	ldi	r25, 0x00	; 0
    4e6a:	95 83       	std	Z+5, r25	; 0x05
    4e6c:	84 83       	std	Z+4, r24	; 0x04
    4e6e:	88 ed       	ldi	r24, 0xD8	; 216
    4e70:	92 e0       	ldi	r25, 0x02	; 2
    4e72:	a0 e0       	ldi	r26, 0x00	; 0
    4e74:	81 83       	std	Z+1, r24	; 0x01
    4e76:	92 83       	std	Z+2, r25	; 0x02
    4e78:	a3 83       	std	Z+3, r26	; 0x03
    4e7a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    4e7e:	8c 2f       	mov	r24, r28
    4e80:	c3 df       	rcall	.-122    	; 0x4e08 <chip_deselect>
    4e82:	8f ef       	ldi	r24, 0xFF	; 255
    4e84:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4e88:	ad b7       	in	r26, 0x3d	; 61
    4e8a:	be b7       	in	r27, 0x3e	; 62
    4e8c:	17 96       	adiw	r26, 0x07	; 7
    4e8e:	0f b6       	in	r0, 0x3f	; 63
    4e90:	f8 94       	cli
    4e92:	be bf       	out	0x3e, r27	; 62
    4e94:	0f be       	out	0x3f, r0	; 63
    4e96:	ad bf       	out	0x3d, r26	; 61
    4e98:	cf 91       	pop	r28
    4e9a:	08 95       	ret

00004e9c <spi_TX_buffer>:
/// @brief SPI write buffer
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void spi_TX_buffer(const uint8_t *data, int count)
{
    4e9c:	cc c4       	rjmp	.+2456   	; 0x5836 <SPI0_TX>
    4e9e:	08 95       	ret

00004ea0 <spi_RX_buffer>:
    4ea0:	f4 c4       	rjmp	.+2536   	; 0x588a <SPI0_RX>
    4ea2:	08 95       	ret

00004ea4 <spi_TX>:
    4ea4:	a1 e0       	ldi	r26, 0x01	; 1
    4ea6:	b0 e0       	ldi	r27, 0x00	; 0
    4ea8:	e8 e5       	ldi	r30, 0x58	; 88
    4eaa:	f7 e2       	ldi	r31, 0x27	; 39
    4eac:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
    4eb0:	89 83       	std	Y+1, r24	; 0x01
    4eb2:	61 e0       	ldi	r22, 0x01	; 1
    4eb4:	70 e0       	ldi	r23, 0x00	; 0
    4eb6:	ce 01       	movw	r24, r28
    4eb8:	01 96       	adiw	r24, 0x01	; 1
    4eba:	bd d4       	rcall	.+2426   	; 0x5836 <SPI0_TX>
    4ebc:	21 96       	adiw	r28, 0x01	; 1
    4ebe:	e2 e0       	ldi	r30, 0x02	; 2
    4ec0:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00004ec4 <spi_init>:
    4ec4:	cf 92       	push	r12
    4ec6:	df 92       	push	r13
    4ec8:	ef 92       	push	r14
    4eca:	ff 92       	push	r15
    4ecc:	6b 01       	movw	r12, r22
    4ece:	7c 01       	movw	r14, r24
    4ed0:	84 2f       	mov	r24, r20
    4ed2:	9a df       	rcall	.-204    	; 0x4e08 <chip_deselect>
    4ed4:	8f ef       	ldi	r24, 0xFF	; 255
    4ed6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4eda:	c7 01       	movw	r24, r14
    4edc:	b6 01       	movw	r22, r12
    4ede:	7e d4       	rcall	.+2300   	; 0x57dc <SPI0_Init>
    4ee0:	80 e0       	ldi	r24, 0x00	; 0
    4ee2:	90 e0       	ldi	r25, 0x00	; 0
    4ee4:	3b d4       	rcall	.+2166   	; 0x575c <SPI0_Mode>
    4ee6:	8f ef       	ldi	r24, 0xFF	; 255
    4ee8:	dd df       	rcall	.-70     	; 0x4ea4 <spi_TX>
    4eea:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    4eee:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    4ef2:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    4ef6:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
    4efa:	ff 90       	pop	r15
    4efc:	ef 90       	pop	r14
    4efe:	df 90       	pop	r13
    4f00:	cf 90       	pop	r12
    4f02:	08 95       	ret

00004f04 <spi_begin>:
    4f04:	cf 92       	push	r12
    4f06:	df 92       	push	r13
    4f08:	ef 92       	push	r14
    4f0a:	ff 92       	push	r15
    4f0c:	cf 93       	push	r28
    4f0e:	df 93       	push	r29
    4f10:	ad b7       	in	r26, 0x3d	; 61
    4f12:	be b7       	in	r27, 0x3e	; 62
    4f14:	17 97       	sbiw	r26, 0x07	; 7
    4f16:	0f b6       	in	r0, 0x3f	; 63
    4f18:	f8 94       	cli
    4f1a:	be bf       	out	0x3e, r27	; 62
    4f1c:	0f be       	out	0x3f, r0	; 63
    4f1e:	ad bf       	out	0x3d, r26	; 61
    4f20:	6b 01       	movw	r12, r22
    4f22:	7c 01       	movw	r14, r24
    4f24:	ea 01       	movw	r28, r20
    4f26:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4f2a:	8f 3f       	cpi	r24, 0xFF	; 255
    4f2c:	79 f0       	breq	.+30     	; 0x4f4c <spi_begin+0x48>
    4f2e:	ed b7       	in	r30, 0x3d	; 61
    4f30:	fe b7       	in	r31, 0x3e	; 62
    4f32:	46 83       	std	Z+6, r20	; 0x06
    4f34:	d7 83       	std	Z+7, r29	; 0x07
    4f36:	90 e0       	ldi	r25, 0x00	; 0
    4f38:	95 83       	std	Z+5, r25	; 0x05
    4f3a:	84 83       	std	Z+4, r24	; 0x04
    4f3c:	86 ef       	ldi	r24, 0xF6	; 246
    4f3e:	92 e0       	ldi	r25, 0x02	; 2
    4f40:	a0 e0       	ldi	r26, 0x00	; 0
    4f42:	81 83       	std	Z+1, r24	; 0x01
    4f44:	92 83       	std	Z+2, r25	; 0x02
    4f46:	a3 83       	std	Z+3, r26	; 0x03
    4f48:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    4f4c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    4f50:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    4f54:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    4f58:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    4f5c:	8c 15       	cp	r24, r12
    4f5e:	9d 05       	cpc	r25, r13
    4f60:	ae 05       	cpc	r26, r14
    4f62:	bf 05       	cpc	r27, r15
    4f64:	21 f0       	breq	.+8      	; 0x4f6e <spi_begin+0x6a>
    4f66:	ae 01       	movw	r20, r28
    4f68:	c7 01       	movw	r24, r14
    4f6a:	b6 01       	movw	r22, r12
    4f6c:	ab df       	rcall	.-170    	; 0x4ec4 <spi_init>
    4f6e:	8c 2f       	mov	r24, r28
    4f70:	32 df       	rcall	.-412    	; 0x4dd6 <chip_select>
    4f72:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
    4f76:	ad b7       	in	r26, 0x3d	; 61
    4f78:	be b7       	in	r27, 0x3e	; 62
    4f7a:	17 96       	adiw	r26, 0x07	; 7
    4f7c:	0f b6       	in	r0, 0x3f	; 63
    4f7e:	f8 94       	cli
    4f80:	be bf       	out	0x3e, r27	; 62
    4f82:	0f be       	out	0x3f, r0	; 63
    4f84:	ad bf       	out	0x3d, r26	; 61
    4f86:	df 91       	pop	r29
    4f88:	cf 91       	pop	r28
    4f8a:	ff 90       	pop	r15
    4f8c:	ef 90       	pop	r14
    4f8e:	df 90       	pop	r13
    4f90:	cf 90       	pop	r12
    4f92:	08 95       	ret

00004f94 <spi_TXRX>:
    4f94:	a1 e0       	ldi	r26, 0x01	; 1
    4f96:	b0 e0       	ldi	r27, 0x00	; 0
    4f98:	e0 ed       	ldi	r30, 0xD0	; 208
    4f9a:	f7 e2       	ldi	r31, 0x27	; 39
    4f9c:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
    4fa0:	89 83       	std	Y+1, r24	; 0x01
    4fa2:	61 e0       	ldi	r22, 0x01	; 1
    4fa4:	70 e0       	ldi	r23, 0x00	; 0
    4fa6:	ce 01       	movw	r24, r28
    4fa8:	01 96       	adiw	r24, 0x01	; 1
    4faa:	59 d4       	rcall	.+2226   	; 0x585e <SPI0_TXRX>
    4fac:	89 81       	ldd	r24, Y+1	; 0x01
    4fae:	21 96       	adiw	r28, 0x01	; 1
    4fb0:	e2 e0       	ldi	r30, 0x02	; 2
    4fb2:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00004fb6 <set_error>:
    4fb6:	80 93 50 17 	sts	0x1750, r24	; 0x801750 <__data_end>
    4fba:	2c 9a       	sbi	0x05, 4	; 5
    4fbc:	24 9a       	sbi	0x04, 4	; 4
    4fbe:	08 95       	ret

00004fc0 <clear_error>:
    4fc0:	10 92 50 17 	sts	0x1750, r1	; 0x801750 <__data_end>
    4fc4:	2c 98       	cbi	0x05, 4	; 5
    4fc6:	24 9a       	sbi	0x04, 4	; 4
    4fc8:	08 95       	ret

00004fca <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    4fca:	a2 e0       	ldi	r26, 0x02	; 2
    4fcc:	b0 e0       	ldi	r27, 0x00	; 0
    4fce:	eb ee       	ldi	r30, 0xEB	; 235
    4fd0:	f7 e2       	ldi	r31, 0x27	; 39
    4fd2:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    4fd6:	20 91 9f 21 	lds	r18, 0x219F	; 0x80219f <__brkval>
    4fda:	30 91 a0 21 	lds	r19, 0x21A0	; 0x8021a0 <__brkval+0x1>
    4fde:	21 15       	cp	r18, r1
    4fe0:	31 05       	cpc	r19, r1
    4fe2:	11 f4       	brne	.+4      	; 0x4fe8 <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4fe4:	23 ea       	ldi	r18, 0xA3	; 163
    4fe6:	31 e2       	ldi	r19, 0x21	; 33

    ret = (uint16_t) &v - top;
    return ( ret );
}
    4fe8:	ce 01       	movw	r24, r28
    4fea:	01 96       	adiw	r24, 0x01	; 1
    4fec:	82 1b       	sub	r24, r18
    4fee:	93 0b       	sbc	r25, r19
    4ff0:	22 96       	adiw	r28, 0x02	; 2
    4ff2:	e2 e0       	ldi	r30, 0x02	; 2
    4ff4:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00004ff8 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4ff8:	a9 e0       	ldi	r26, 0x09	; 9
    4ffa:	b0 e0       	ldi	r27, 0x00	; 0
    4ffc:	e2 e0       	ldi	r30, 0x02	; 2
    4ffe:	f8 e2       	ldi	r31, 0x28	; 40
    5000:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    5004:	e2 df       	rcall	.-60     	; 0x4fca <freeRam>
    5006:	99 87       	std	Y+9, r25	; 0x09

    printf("Free Ram:%u\n", ram);
    5008:	88 87       	std	Y+8, r24	; 0x08
    500a:	ed b7       	in	r30, 0x3d	; 61
    500c:	fe b7       	in	r31, 0x3e	; 62
    500e:	95 83       	std	Z+5, r25	; 0x05
    5010:	84 83       	std	Z+4, r24	; 0x04
    5012:	8d e1       	ldi	r24, 0x1D	; 29
    5014:	94 e0       	ldi	r25, 0x04	; 4
    5016:	a0 e0       	ldi	r26, 0x00	; 0
    5018:	81 83       	std	Z+1, r24	; 0x01
    501a:	92 83       	std	Z+2, r25	; 0x02
    501c:	a3 83       	std	Z+3, r26	; 0x03
    501e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    5022:	8f ef       	ldi	r24, 0xFF	; 255
    5024:	90 e4       	ldi	r25, 0x40	; 64
    5026:	ed b7       	in	r30, 0x3d	; 61
    5028:	fe b7       	in	r31, 0x3e	; 62
    502a:	95 83       	std	Z+5, r25	; 0x05
    502c:	84 83       	std	Z+4, r24	; 0x04
    502e:	8a e0       	ldi	r24, 0x0A	; 10
    5030:	94 e0       	ldi	r25, 0x04	; 4
    5032:	a0 e0       	ldi	r26, 0x00	; 0
    5034:	81 83       	std	Z+1, r24	; 0x01
    5036:	92 83       	std	Z+2, r25	; 0x02
    5038:	a3 83       	std	Z+3, r26	; 0x03
    503a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    503e:	ce 01       	movw	r24, r28
    5040:	08 96       	adiw	r24, 0x08	; 8
    5042:	ed b7       	in	r30, 0x3d	; 61
    5044:	fe b7       	in	r31, 0x3e	; 62
    5046:	95 83       	std	Z+5, r25	; 0x05
    5048:	84 83       	std	Z+4, r24	; 0x04
    504a:	87 ef       	ldi	r24, 0xF7	; 247
    504c:	93 e0       	ldi	r25, 0x03	; 3
    504e:	a0 e0       	ldi	r26, 0x00	; 0
    5050:	81 83       	std	Z+1, r24	; 0x01
    5052:	92 83       	std	Z+2, r25	; 0x02
    5054:	a3 83       	std	Z+3, r26	; 0x03
    5056:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    505a:	83 ea       	ldi	r24, 0xA3	; 163
    505c:	91 e2       	ldi	r25, 0x21	; 33
    505e:	ed b7       	in	r30, 0x3d	; 61
    5060:	fe b7       	in	r31, 0x3e	; 62
    5062:	97 83       	std	Z+7, r25	; 0x07
    5064:	86 83       	std	Z+6, r24	; 0x06
    5066:	80 e5       	ldi	r24, 0x50	; 80
    5068:	97 e1       	ldi	r25, 0x17	; 23
    506a:	95 83       	std	Z+5, r25	; 0x05
    506c:	84 83       	std	Z+4, r24	; 0x04
    506e:	89 ed       	ldi	r24, 0xD9	; 217
    5070:	93 e0       	ldi	r25, 0x03	; 3
    5072:	a0 e0       	ldi	r26, 0x00	; 0
    5074:	81 83       	std	Z+1, r24	; 0x01
    5076:	92 83       	std	Z+2, r25	; 0x02
    5078:	a3 83       	std	Z+3, r26	; 0x03
    507a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    507e:	80 e5       	ldi	r24, 0x50	; 80
    5080:	97 e1       	ldi	r25, 0x17	; 23
    5082:	ed b7       	in	r30, 0x3d	; 61
    5084:	fe b7       	in	r31, 0x3e	; 62
    5086:	97 83       	std	Z+7, r25	; 0x07
    5088:	86 83       	std	Z+6, r24	; 0x06
    508a:	80 e0       	ldi	r24, 0x00	; 0
    508c:	91 e0       	ldi	r25, 0x01	; 1
    508e:	95 83       	std	Z+5, r25	; 0x05
    5090:	84 83       	std	Z+4, r24	; 0x04
    5092:	8b eb       	ldi	r24, 0xBB	; 187
    5094:	93 e0       	ldi	r25, 0x03	; 3
    5096:	a0 e0       	ldi	r26, 0x00	; 0
    5098:	81 83       	std	Z+1, r24	; 0x01
    509a:	92 83       	std	Z+2, r25	; 0x02
    509c:	a3 83       	std	Z+3, r26	; 0x03
    509e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    50a2:	80 e0       	ldi	r24, 0x00	; 0
    50a4:	90 e0       	ldi	r25, 0x00	; 0
    50a6:	ed b7       	in	r30, 0x3d	; 61
    50a8:	fe b7       	in	r31, 0x3e	; 62
    50aa:	97 83       	std	Z+7, r25	; 0x07
    50ac:	86 83       	std	Z+6, r24	; 0x06
    50ae:	83 ea       	ldi	r24, 0xA3	; 163
    50b0:	91 e2       	ldi	r25, 0x21	; 33
    50b2:	95 83       	std	Z+5, r25	; 0x05
    50b4:	84 83       	std	Z+4, r24	; 0x04
    50b6:	8d e9       	ldi	r24, 0x9D	; 157
    50b8:	93 e0       	ldi	r25, 0x03	; 3
    50ba:	a0 e0       	ldi	r26, 0x00	; 0
    50bc:	81 83       	std	Z+1, r24	; 0x01
    50be:	92 83       	std	Z+2, r25	; 0x02
    50c0:	a3 83       	std	Z+3, r26	; 0x03
    50c2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    50c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    50ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    50ce:	ed b7       	in	r30, 0x3d	; 61
    50d0:	fe b7       	in	r31, 0x3e	; 62
    50d2:	97 83       	std	Z+7, r25	; 0x07
    50d4:	86 83       	std	Z+6, r24	; 0x06
    50d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    50da:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    50de:	95 83       	std	Z+5, r25	; 0x05
    50e0:	84 83       	std	Z+4, r24	; 0x04
    50e2:	8f e7       	ldi	r24, 0x7F	; 127
    50e4:	93 e0       	ldi	r25, 0x03	; 3
    50e6:	a0 e0       	ldi	r26, 0x00	; 0
    50e8:	81 83       	std	Z+1, r24	; 0x01
    50ea:	92 83       	std	Z+2, r25	; 0x02
    50ec:	a3 83       	std	Z+3, r26	; 0x03
    50ee:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    50f2:	80 91 9f 21 	lds	r24, 0x219F	; 0x80219f <__brkval>
    50f6:	90 91 a0 21 	lds	r25, 0x21A0	; 0x8021a0 <__brkval+0x1>
    50fa:	ed b7       	in	r30, 0x3d	; 61
    50fc:	fe b7       	in	r31, 0x3e	; 62
    50fe:	95 83       	std	Z+5, r25	; 0x05
    5100:	84 83       	std	Z+4, r24	; 0x04
    5102:	8b e6       	ldi	r24, 0x6B	; 107
    5104:	93 e0       	ldi	r25, 0x03	; 3
    5106:	a0 e0       	ldi	r26, 0x00	; 0
    5108:	81 83       	std	Z+1, r24	; 0x01
    510a:	92 83       	std	Z+2, r25	; 0x02
    510c:	a3 83       	std	Z+3, r26	; 0x03
    510e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

}
    5112:	29 96       	adiw	r28, 0x09	; 9
    5114:	e2 e0       	ldi	r30, 0x02	; 2
    5116:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

0000511a <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    511a:	ef 92       	push	r14
    511c:	ff 92       	push	r15
    511e:	0f 93       	push	r16
    5120:	1f 93       	push	r17
    5122:	cf 93       	push	r28
    5124:	df 93       	push	r29
    5126:	ad b7       	in	r26, 0x3d	; 61
    5128:	be b7       	in	r27, 0x3e	; 62
    512a:	17 97       	sbiw	r26, 0x07	; 7
    512c:	0f b6       	in	r0, 0x3f	; 63
    512e:	f8 94       	cli
    5130:	be bf       	out	0x3e, r27	; 62
    5132:	0f be       	out	0x3f, r0	; 63
    5134:	ad bf       	out	0x3d, r26	; 61
    5136:	8c 01       	movw	r16, r24
    5138:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    513a:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <calloc>
    513e:	ec 01       	movw	r28, r24
    if(!p)
    5140:	89 2b       	or	r24, r25
    5142:	71 f4       	brne	.+28     	; 0x5160 <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    5144:	ed b7       	in	r30, 0x3d	; 61
    5146:	fe b7       	in	r31, 0x3e	; 62
    5148:	f7 82       	std	Z+7, r15	; 0x07
    514a:	e6 82       	std	Z+6, r14	; 0x06
    514c:	15 83       	std	Z+5, r17	; 0x05
    514e:	04 83       	std	Z+4, r16	; 0x04
    5150:	80 e5       	ldi	r24, 0x50	; 80
    5152:	93 e0       	ldi	r25, 0x03	; 3
    5154:	a0 e0       	ldi	r26, 0x00	; 0
    5156:	81 83       	std	Z+1, r24	; 0x01
    5158:	92 83       	std	Z+2, r25	; 0x02
    515a:	a3 83       	std	Z+3, r26	; 0x03
    515c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    }
    return(p);
}
    5160:	ce 01       	movw	r24, r28
    5162:	cd b7       	in	r28, 0x3d	; 61
    5164:	de b7       	in	r29, 0x3e	; 62
    5166:	27 96       	adiw	r28, 0x07	; 7
    5168:	e6 e0       	ldi	r30, 0x06	; 6
    516a:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

0000516e <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    516e:	0f 93       	push	r16
    5170:	1f 93       	push	r17
    5172:	cf 93       	push	r28
    5174:	df 93       	push	r29
    5176:	00 d0       	rcall	.+0      	; 0x5178 <safemalloc+0xa>
    5178:	00 d0       	rcall	.+0      	; 0x517a <safemalloc+0xc>
    517a:	1f 92       	push	r1
    517c:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    517e:	61 e0       	ldi	r22, 0x01	; 1
    5180:	70 e0       	ldi	r23, 0x00	; 0
    5182:	0e 94 8c e5 	call	0x1cb18	; 0x1cb18 <calloc>
    5186:	ec 01       	movw	r28, r24
    if(!p)
    5188:	89 2b       	or	r24, r25
    518a:	61 f4       	brne	.+24     	; 0x51a4 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    518c:	ed b7       	in	r30, 0x3d	; 61
    518e:	fe b7       	in	r31, 0x3e	; 62
    5190:	15 83       	std	Z+5, r17	; 0x05
    5192:	04 83       	std	Z+4, r16	; 0x04
    5194:	88 e3       	ldi	r24, 0x38	; 56
    5196:	93 e0       	ldi	r25, 0x03	; 3
    5198:	a0 e0       	ldi	r26, 0x00	; 0
    519a:	81 83       	std	Z+1, r24	; 0x01
    519c:	92 83       	std	Z+2, r25	; 0x02
    519e:	a3 83       	std	Z+3, r26	; 0x03
    51a0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    }
    return(p);
}
    51a4:	ce 01       	movw	r24, r28
    51a6:	cd b7       	in	r28, 0x3d	; 61
    51a8:	de b7       	in	r29, 0x3e	; 62
    51aa:	25 96       	adiw	r28, 0x05	; 5
    51ac:	e4 e0       	ldi	r30, 0x04	; 4
    51ae:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

000051b2 <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    51b2:	ad b7       	in	r26, 0x3d	; 61
    51b4:	be b7       	in	r27, 0x3e	; 62
    51b6:	17 97       	sbiw	r26, 0x07	; 7
    51b8:	0f b6       	in	r0, 0x3f	; 63
    51ba:	f8 94       	cli
    51bc:	be bf       	out	0x3e, r27	; 62
    51be:	0f be       	out	0x3f, r0	; 63
    51c0:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    51c2:	00 97       	sbiw	r24, 0x00	; 0
    51c4:	11 f1       	breq	.+68     	; 0x520a <safefree+0x58>
        return;

    if(__brkval)
    51c6:	20 91 9f 21 	lds	r18, 0x219F	; 0x80219f <__brkval>
    51ca:	30 91 a0 21 	lds	r19, 0x21A0	; 0x8021a0 <__brkval+0x1>
    51ce:	21 15       	cp	r18, r1
    51d0:	31 05       	cpc	r19, r1
    51d2:	11 f4       	brne	.+4      	; 0x51d8 <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    51d4:	23 ea       	ldi	r18, 0xA3	; 163
    51d6:	31 e2       	ldi	r19, 0x21	; 33

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    51d8:	41 e2       	ldi	r20, 0x21	; 33
    51da:	83 3a       	cpi	r24, 0xA3	; 163
    51dc:	94 07       	cpc	r25, r20
    51de:	30 f0       	brcs	.+12     	; 0x51ec <safefree+0x3a>
    51e0:	28 17       	cp	r18, r24
    51e2:	39 07       	cpc	r19, r25
    51e4:	18 f0       	brcs	.+6      	; 0x51ec <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    51e6:	0e 94 3e e6 	call	0x1cc7c	; 0x1cc7c <free>
        return;
    51ea:	0f c0       	rjmp	.+30     	; 0x520a <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    51ec:	ed b7       	in	r30, 0x3d	; 61
    51ee:	fe b7       	in	r31, 0x3e	; 62
    51f0:	37 83       	std	Z+7, r19	; 0x07
    51f2:	26 83       	std	Z+6, r18	; 0x06
    51f4:	95 83       	std	Z+5, r25	; 0x05
    51f6:	84 83       	std	Z+4, r24	; 0x04
    51f8:	83 e1       	ldi	r24, 0x13	; 19
    51fa:	93 e0       	ldi	r25, 0x03	; 3
    51fc:	a0 e0       	ldi	r26, 0x00	; 0
    51fe:	81 83       	std	Z+1, r24	; 0x01
    5200:	92 83       	std	Z+2, r25	; 0x02
    5202:	a3 83       	std	Z+3, r26	; 0x03
    5204:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    PrintFree();
}
    5208:	f7 de       	rcall	.-530    	; 0x4ff8 <PrintFree>
    520a:	ad b7       	in	r26, 0x3d	; 61
    520c:	be b7       	in	r27, 0x3e	; 62
    520e:	17 96       	adiw	r26, 0x07	; 7
    5210:	0f b6       	in	r0, 0x3f	; 63
    5212:	f8 94       	cli
    5214:	be bf       	out	0x3e, r27	; 62
    5216:	0f be       	out	0x3f, r0	; 63
    5218:	ad bf       	out	0x3d, r26	; 61
    521a:	08 95       	ret

0000521c <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    521c:	64 36       	cpi	r22, 0x64	; 100
    521e:	71 05       	cpc	r23, r1
    5220:	81 05       	cpc	r24, r1
    5222:	91 05       	cpc	r25, r1
    5224:	58 f0       	brcs	.+22     	; 0x523c <delayus+0x20>
    {
        us -= 100U;
    5226:	64 56       	subi	r22, 0x64	; 100
    5228:	71 09       	sbc	r23, r1
    522a:	81 09       	sbc	r24, r1
    522c:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    522e:	e3 ef       	ldi	r30, 0xF3	; 243
    5230:	f1 e0       	ldi	r31, 0x01	; 1
    5232:	31 97       	sbiw	r30, 0x01	; 1
    5234:	f1 f7       	brne	.-4      	; 0x5232 <delayus+0x16>
    5236:	00 c0       	rjmp	.+0      	; 0x5238 <delayus+0x1c>
    5238:	00 00       	nop
    523a:	f0 cf       	rjmp	.-32     	; 0x521c <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    523c:	6a 30       	cpi	r22, 0x0A	; 10
    523e:	71 05       	cpc	r23, r1
    5240:	81 05       	cpc	r24, r1
    5242:	91 05       	cpc	r25, r1
    5244:	48 f0       	brcs	.+18     	; 0x5258 <delayus+0x3c>
    {
        us -= 10U;
    5246:	6a 50       	subi	r22, 0x0A	; 10
    5248:	71 09       	sbc	r23, r1
    524a:	81 09       	sbc	r24, r1
    524c:	91 09       	sbc	r25, r1
    524e:	f2 e4       	ldi	r31, 0x42	; 66
    5250:	fa 95       	dec	r31
    5252:	f1 f7       	brne	.-4      	; 0x5250 <delayus+0x34>
    5254:	00 c0       	rjmp	.+0      	; 0x5256 <delayus+0x3a>
    5256:	f2 cf       	rjmp	.-28     	; 0x523c <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    5258:	61 15       	cp	r22, r1
    525a:	71 05       	cpc	r23, r1
    525c:	81 05       	cpc	r24, r1
    525e:	91 05       	cpc	r25, r1
    5260:	49 f0       	breq	.+18     	; 0x5274 <delayus+0x58>
    {
        --us;
    5262:	61 50       	subi	r22, 0x01	; 1
    5264:	71 09       	sbc	r23, r1
    5266:	81 09       	sbc	r24, r1
    5268:	91 09       	sbc	r25, r1
    526a:	26 e0       	ldi	r18, 0x06	; 6
    526c:	2a 95       	dec	r18
    526e:	f1 f7       	brne	.-4      	; 0x526c <delayus+0x50>
    5270:	00 c0       	rjmp	.+0      	; 0x5272 <delayus+0x56>
    5272:	f2 cf       	rjmp	.-28     	; 0x5258 <delayus+0x3c>
        _delay_us(1);
    }
}
    5274:	08 95       	ret

00005276 <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    5276:	61 15       	cp	r22, r1
    5278:	71 05       	cpc	r23, r1
    527a:	81 05       	cpc	r24, r1
    527c:	91 05       	cpc	r25, r1
    527e:	09 f4       	brne	.+2      	; 0x5282 <delayms+0xc>
    5280:	41 c0       	rjmp	.+130    	; 0x5304 <delayms+0x8e>
    5282:	e3 ef       	ldi	r30, 0xF3	; 243
    5284:	f1 e0       	ldi	r31, 0x01	; 1
    5286:	31 97       	sbiw	r30, 0x01	; 1
    5288:	f1 f7       	brne	.-4      	; 0x5286 <delayms+0x10>
    528a:	00 c0       	rjmp	.+0      	; 0x528c <delayms+0x16>
    528c:	00 00       	nop
    528e:	e3 ef       	ldi	r30, 0xF3	; 243
    5290:	f1 e0       	ldi	r31, 0x01	; 1
    5292:	31 97       	sbiw	r30, 0x01	; 1
    5294:	f1 f7       	brne	.-4      	; 0x5292 <delayms+0x1c>
    5296:	00 c0       	rjmp	.+0      	; 0x5298 <delayms+0x22>
    5298:	00 00       	nop
    529a:	e3 ef       	ldi	r30, 0xF3	; 243
    529c:	f1 e0       	ldi	r31, 0x01	; 1
    529e:	31 97       	sbiw	r30, 0x01	; 1
    52a0:	f1 f7       	brne	.-4      	; 0x529e <delayms+0x28>
    52a2:	00 c0       	rjmp	.+0      	; 0x52a4 <delayms+0x2e>
    52a4:	00 00       	nop
    52a6:	e3 ef       	ldi	r30, 0xF3	; 243
    52a8:	f1 e0       	ldi	r31, 0x01	; 1
    52aa:	31 97       	sbiw	r30, 0x01	; 1
    52ac:	f1 f7       	brne	.-4      	; 0x52aa <delayms+0x34>
    52ae:	00 c0       	rjmp	.+0      	; 0x52b0 <delayms+0x3a>
    52b0:	00 00       	nop
    52b2:	e3 ef       	ldi	r30, 0xF3	; 243
    52b4:	f1 e0       	ldi	r31, 0x01	; 1
    52b6:	31 97       	sbiw	r30, 0x01	; 1
    52b8:	f1 f7       	brne	.-4      	; 0x52b6 <delayms+0x40>
    52ba:	00 c0       	rjmp	.+0      	; 0x52bc <delayms+0x46>
    52bc:	00 00       	nop
    52be:	e3 ef       	ldi	r30, 0xF3	; 243
    52c0:	f1 e0       	ldi	r31, 0x01	; 1
    52c2:	31 97       	sbiw	r30, 0x01	; 1
    52c4:	f1 f7       	brne	.-4      	; 0x52c2 <delayms+0x4c>
    52c6:	00 c0       	rjmp	.+0      	; 0x52c8 <delayms+0x52>
    52c8:	00 00       	nop
    52ca:	e3 ef       	ldi	r30, 0xF3	; 243
    52cc:	f1 e0       	ldi	r31, 0x01	; 1
    52ce:	31 97       	sbiw	r30, 0x01	; 1
    52d0:	f1 f7       	brne	.-4      	; 0x52ce <delayms+0x58>
    52d2:	00 c0       	rjmp	.+0      	; 0x52d4 <delayms+0x5e>
    52d4:	00 00       	nop
    52d6:	e3 ef       	ldi	r30, 0xF3	; 243
    52d8:	f1 e0       	ldi	r31, 0x01	; 1
    52da:	31 97       	sbiw	r30, 0x01	; 1
    52dc:	f1 f7       	brne	.-4      	; 0x52da <delayms+0x64>
    52de:	00 c0       	rjmp	.+0      	; 0x52e0 <delayms+0x6a>
    52e0:	00 00       	nop
    52e2:	e3 ef       	ldi	r30, 0xF3	; 243
    52e4:	f1 e0       	ldi	r31, 0x01	; 1
    52e6:	31 97       	sbiw	r30, 0x01	; 1
    52e8:	f1 f7       	brne	.-4      	; 0x52e6 <delayms+0x70>
    52ea:	00 c0       	rjmp	.+0      	; 0x52ec <delayms+0x76>
    52ec:	00 00       	nop
    52ee:	e3 ef       	ldi	r30, 0xF3	; 243
    52f0:	f1 e0       	ldi	r31, 0x01	; 1
    52f2:	31 97       	sbiw	r30, 0x01	; 1
    52f4:	f1 f7       	brne	.-4      	; 0x52f2 <delayms+0x7c>
    52f6:	00 c0       	rjmp	.+0      	; 0x52f8 <delayms+0x82>
    52f8:	00 00       	nop
    52fa:	61 50       	subi	r22, 0x01	; 1
    52fc:	71 09       	sbc	r23, r1
    52fe:	81 09       	sbc	r24, r1
    5300:	91 09       	sbc	r25, r1
    5302:	b9 cf       	rjmp	.-142    	; 0x5276 <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    5304:	08 95       	ret

00005306 <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    5306:	81 11       	cpse	r24, r1
    5308:	0e c0       	rjmp	.+28     	; 0x5326 <uart_rx_flush+0x20>
    530a:	f8 94       	cli
    530c:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x4>
    5310:	10 92 ef 19 	sts	0x19EF, r1	; 0x8019ef <uarts+0x3>
    5314:	10 92 ec 19 	sts	0x19EC, r1	; 0x8019ec <uarts>
    5318:	10 92 ed 19 	sts	0x19ED, r1	; 0x8019ed <uarts+0x1>
    531c:	10 92 ee 19 	sts	0x19EE, r1	; 0x8019ee <uarts+0x2>
    5320:	10 92 f1 19 	sts	0x19F1, r1	; 0x8019f1 <uarts+0x5>
    5324:	78 94       	sei
    5326:	08 95       	ret

00005328 <uart_ubr>:
    5328:	4f 92       	push	r4
    532a:	5f 92       	push	r5
    532c:	6f 92       	push	r6
    532e:	7f 92       	push	r7
    5330:	8f 92       	push	r8
    5332:	9f 92       	push	r9
    5334:	af 92       	push	r10
    5336:	bf 92       	push	r11
    5338:	cf 92       	push	r12
    533a:	df 92       	push	r13
    533c:	ef 92       	push	r14
    533e:	ff 92       	push	r15
    5340:	cf 93       	push	r28
    5342:	df 93       	push	r29
    5344:	5a 01       	movw	r10, r20
    5346:	e9 01       	movw	r28, r18
    5348:	0e 94 2a e4 	call	0x1c854	; 0x1c854 <__floatunsisf>
    534c:	2b 01       	movw	r4, r22
    534e:	3c 01       	movw	r6, r24
    5350:	20 e0       	ldi	r18, 0x00	; 0
    5352:	30 e0       	ldi	r19, 0x00	; 0
    5354:	40 e0       	ldi	r20, 0x00	; 0
    5356:	51 e4       	ldi	r21, 0x41	; 65
    5358:	0e 94 e0 e4 	call	0x1c9c0	; 0x1c9c0 <__mulsf3>
    535c:	9b 01       	movw	r18, r22
    535e:	ac 01       	movw	r20, r24
    5360:	60 e8       	ldi	r22, 0x80	; 128
    5362:	76 e9       	ldi	r23, 0x96	; 150
    5364:	88 e9       	ldi	r24, 0x98	; 152
    5366:	9b e4       	ldi	r25, 0x4B	; 75
    5368:	0e 94 91 e3 	call	0x1c722	; 0x1c722 <__divsf3>
    536c:	20 e0       	ldi	r18, 0x00	; 0
    536e:	30 e0       	ldi	r19, 0x00	; 0
    5370:	40 e8       	ldi	r20, 0x80	; 128
    5372:	5f e3       	ldi	r21, 0x3F	; 63
    5374:	0e 94 28 e3 	call	0x1c650	; 0x1c650 <__subsf3>
    5378:	0e 94 43 e5 	call	0x1ca86	; 0x1ca86 <round>
    537c:	0e 94 fe e3 	call	0x1c7fc	; 0x1c7fc <__fixunssfsi>
    5380:	6b 01       	movw	r12, r22
    5382:	7c 01       	movw	r14, r24
    5384:	c1 14       	cp	r12, r1
    5386:	80 e1       	ldi	r24, 0x10	; 16
    5388:	d8 06       	cpc	r13, r24
    538a:	e1 04       	cpc	r14, r1
    538c:	f1 04       	cpc	r15, r1
    538e:	58 f4       	brcc	.+22     	; 0x53a6 <uart_ubr+0x7e>
    5390:	81 e0       	ldi	r24, 0x01	; 1
    5392:	90 e0       	ldi	r25, 0x00	; 0
    5394:	f5 01       	movw	r30, r10
    5396:	91 83       	std	Z+1, r25	; 0x01
    5398:	80 83       	st	Z, r24
    539a:	81 2c       	mov	r8, r1
    539c:	91 2c       	mov	r9, r1
    539e:	a1 2c       	mov	r10, r1
    53a0:	21 e4       	ldi	r18, 0x41	; 65
    53a2:	b2 2e       	mov	r11, r18
    53a4:	31 c0       	rjmp	.+98     	; 0x5408 <uart_ubr+0xe0>
    53a6:	f5 01       	movw	r30, r10
    53a8:	11 82       	std	Z+1, r1	; 0x01
    53aa:	10 82       	st	Z, r1
    53ac:	20 e0       	ldi	r18, 0x00	; 0
    53ae:	30 e0       	ldi	r19, 0x00	; 0
    53b0:	40 e8       	ldi	r20, 0x80	; 128
    53b2:	51 e4       	ldi	r21, 0x41	; 65
    53b4:	c3 01       	movw	r24, r6
    53b6:	b2 01       	movw	r22, r4
    53b8:	0e 94 e0 e4 	call	0x1c9c0	; 0x1c9c0 <__mulsf3>
    53bc:	9b 01       	movw	r18, r22
    53be:	ac 01       	movw	r20, r24
    53c0:	60 e8       	ldi	r22, 0x80	; 128
    53c2:	76 e9       	ldi	r23, 0x96	; 150
    53c4:	88 e9       	ldi	r24, 0x98	; 152
    53c6:	9b e4       	ldi	r25, 0x4B	; 75
    53c8:	0e 94 91 e3 	call	0x1c722	; 0x1c722 <__divsf3>
    53cc:	20 e0       	ldi	r18, 0x00	; 0
    53ce:	30 e0       	ldi	r19, 0x00	; 0
    53d0:	40 e8       	ldi	r20, 0x80	; 128
    53d2:	5f e3       	ldi	r21, 0x3F	; 63
    53d4:	0e 94 28 e3 	call	0x1c650	; 0x1c650 <__subsf3>
    53d8:	0e 94 43 e5 	call	0x1ca86	; 0x1ca86 <round>
    53dc:	0e 94 fe e3 	call	0x1c7fc	; 0x1c7fc <__fixunssfsi>
    53e0:	6b 01       	movw	r12, r22
    53e2:	7c 01       	movw	r14, r24
    53e4:	81 2c       	mov	r8, r1
    53e6:	91 2c       	mov	r9, r1
    53e8:	90 e8       	ldi	r25, 0x80	; 128
    53ea:	a9 2e       	mov	r10, r25
    53ec:	91 e4       	ldi	r25, 0x41	; 65
    53ee:	b9 2e       	mov	r11, r25
    53f0:	c1 14       	cp	r12, r1
    53f2:	f0 e1       	ldi	r31, 0x10	; 16
    53f4:	df 06       	cpc	r13, r31
    53f6:	e1 04       	cpc	r14, r1
    53f8:	f1 04       	cpc	r15, r1
    53fa:	30 f0       	brcs	.+12     	; 0x5408 <uart_ubr+0xe0>
    53fc:	cc 24       	eor	r12, r12
    53fe:	ca 94       	dec	r12
    5400:	8f e0       	ldi	r24, 0x0F	; 15
    5402:	d8 2e       	mov	r13, r24
    5404:	e1 2c       	mov	r14, r1
    5406:	f1 2c       	mov	r15, r1
    5408:	c7 01       	movw	r24, r14
    540a:	b6 01       	movw	r22, r12
    540c:	6f 5f       	subi	r22, 0xFF	; 255
    540e:	7f 4f       	sbci	r23, 0xFF	; 255
    5410:	8f 4f       	sbci	r24, 0xFF	; 255
    5412:	9f 4f       	sbci	r25, 0xFF	; 255
    5414:	0e 94 2a e4 	call	0x1c854	; 0x1c854 <__floatunsisf>
    5418:	a5 01       	movw	r20, r10
    541a:	94 01       	movw	r18, r8
    541c:	0e 94 e0 e4 	call	0x1c9c0	; 0x1c9c0 <__mulsf3>
    5420:	9b 01       	movw	r18, r22
    5422:	ac 01       	movw	r20, r24
    5424:	60 e8       	ldi	r22, 0x80	; 128
    5426:	76 e9       	ldi	r23, 0x96	; 150
    5428:	88 e9       	ldi	r24, 0x98	; 152
    542a:	9b e4       	ldi	r25, 0x4B	; 75
    542c:	0e 94 91 e3 	call	0x1c722	; 0x1c722 <__divsf3>
    5430:	0e 94 fe e3 	call	0x1c7fc	; 0x1c7fc <__fixunssfsi>
    5434:	68 83       	st	Y, r22
    5436:	79 83       	std	Y+1, r23	; 0x01
    5438:	8a 83       	std	Y+2, r24	; 0x02
    543a:	9b 83       	std	Y+3, r25	; 0x03
    543c:	c6 01       	movw	r24, r12
    543e:	df 91       	pop	r29
    5440:	cf 91       	pop	r28
    5442:	ff 90       	pop	r15
    5444:	ef 90       	pop	r14
    5446:	df 90       	pop	r13
    5448:	cf 90       	pop	r12
    544a:	bf 90       	pop	r11
    544c:	af 90       	pop	r10
    544e:	9f 90       	pop	r9
    5450:	8f 90       	pop	r8
    5452:	7f 90       	pop	r7
    5454:	6f 90       	pop	r6
    5456:	5f 90       	pop	r5
    5458:	4f 90       	pop	r4
    545a:	08 95       	ret

0000545c <uart_init>:
    545c:	a6 e0       	ldi	r26, 0x06	; 6
    545e:	b0 e0       	ldi	r27, 0x00	; 0
    5460:	e4 e3       	ldi	r30, 0x34	; 52
    5462:	fa e2       	ldi	r31, 0x2A	; 42
    5464:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
    5468:	1e 82       	std	Y+6, r1	; 0x06
    546a:	1d 82       	std	Y+5, r1	; 0x05
    546c:	81 11       	cpse	r24, r1
    546e:	36 c0       	rjmp	.+108    	; 0x54dc <uart_init+0x80>
    5470:	cb 01       	movw	r24, r22
    5472:	ba 01       	movw	r22, r20
    5474:	9e 01       	movw	r18, r28
    5476:	2f 5f       	subi	r18, 0xFF	; 255
    5478:	3f 4f       	sbci	r19, 0xFF	; 255
    547a:	ae 01       	movw	r20, r28
    547c:	4b 5f       	subi	r20, 0xFB	; 251
    547e:	5f 4f       	sbci	r21, 0xFF	; 255
    5480:	53 df       	rcall	.-346    	; 0x5328 <uart_ubr>
    5482:	f8 94       	cli
    5484:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <uarts+0x4>
    5488:	10 92 ef 19 	sts	0x19EF, r1	; 0x8019ef <uarts+0x3>
    548c:	10 92 ec 19 	sts	0x19EC, r1	; 0x8019ec <uarts>
    5490:	10 92 ed 19 	sts	0x19ED, r1	; 0x8019ed <uarts+0x1>
    5494:	10 92 ee 19 	sts	0x19EE, r1	; 0x8019ee <uarts+0x2>
    5498:	10 92 f1 19 	sts	0x19F1, r1	; 0x8019f1 <uarts+0x5>
    549c:	78 94       	sei
    549e:	f8 94       	cli
    54a0:	58 9a       	sbi	0x0b, 0	; 11
    54a2:	59 9a       	sbi	0x0b, 1	; 11
    54a4:	50 98       	cbi	0x0a, 0	; 10
    54a6:	51 9a       	sbi	0x0a, 1	; 10
    54a8:	28 e9       	ldi	r18, 0x98	; 152
    54aa:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    54ae:	2d 81       	ldd	r18, Y+5	; 0x05
    54b0:	3e 81       	ldd	r19, Y+6	; 0x06
    54b2:	23 2b       	or	r18, r19
    54b4:	19 f0       	breq	.+6      	; 0x54bc <uart_init+0x60>
    54b6:	22 e0       	ldi	r18, 0x02	; 2
    54b8:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    54bc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    54c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    54c4:	78 94       	sei
    54c6:	66 e2       	ldi	r22, 0x26	; 38
    54c8:	7b e2       	ldi	r23, 0x2B	; 43
    54ca:	8b e3       	ldi	r24, 0x3B	; 59
    54cc:	9b e2       	ldi	r25, 0x2B	; 43
    54ce:	0e 94 35 79 	call	0xf26a	; 0xf26a <fdevopen>
    54d2:	69 81       	ldd	r22, Y+1	; 0x01
    54d4:	7a 81       	ldd	r23, Y+2	; 0x02
    54d6:	8b 81       	ldd	r24, Y+3	; 0x03
    54d8:	9c 81       	ldd	r25, Y+4	; 0x04
    54da:	03 c0       	rjmp	.+6      	; 0x54e2 <uart_init+0x86>
    54dc:	60 e0       	ldi	r22, 0x00	; 0
    54de:	70 e0       	ldi	r23, 0x00	; 0
    54e0:	cb 01       	movw	r24, r22
    54e2:	26 96       	adiw	r28, 0x06	; 6
    54e4:	e2 e0       	ldi	r30, 0x02	; 2
    54e6:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

000054ea <uart_rx_interrupt>:
    54ea:	cf 93       	push	r28
    54ec:	df 93       	push	r29
    54ee:	27 e5       	ldi	r18, 0x57	; 87
    54f0:	82 9f       	mul	r24, r18
    54f2:	c0 01       	movw	r24, r0
    54f4:	11 24       	eor	r1, r1
    54f6:	fc 01       	movw	r30, r24
    54f8:	e4 51       	subi	r30, 0x14	; 20
    54fa:	f6 4e       	sbci	r31, 0xE6	; 230
    54fc:	83 81       	ldd	r24, Z+3	; 0x03
    54fe:	94 81       	ldd	r25, Z+4	; 0x04
    5500:	80 35       	cpi	r24, 0x50	; 80
    5502:	91 05       	cpc	r25, r1
    5504:	7c f4       	brge	.+30     	; 0x5524 <uart_rx_interrupt+0x3a>
    5506:	30 81       	ld	r19, Z
    5508:	21 e0       	ldi	r18, 0x01	; 1
    550a:	23 0f       	add	r18, r19
    550c:	20 83       	st	Z, r18
    550e:	ef 01       	movw	r28, r30
    5510:	c3 0f       	add	r28, r19
    5512:	d1 1d       	adc	r29, r1
    5514:	6e 83       	std	Y+6, r22	; 0x06
    5516:	01 96       	adiw	r24, 0x01	; 1
    5518:	94 83       	std	Z+4, r25	; 0x04
    551a:	83 83       	std	Z+3, r24	; 0x03
    551c:	20 35       	cpi	r18, 0x50	; 80
    551e:	28 f0       	brcs	.+10     	; 0x552a <uart_rx_interrupt+0x40>
    5520:	10 82       	st	Z, r1
    5522:	03 c0       	rjmp	.+6      	; 0x552a <uart_rx_interrupt+0x40>
    5524:	85 81       	ldd	r24, Z+5	; 0x05
    5526:	81 60       	ori	r24, 0x01	; 1
    5528:	85 83       	std	Z+5, r24	; 0x05
    552a:	df 91       	pop	r29
    552c:	cf 91       	pop	r28
    552e:	08 95       	ret

00005530 <__vector_20>:
    5530:	1f 92       	push	r1
    5532:	0f 92       	push	r0
    5534:	0f b6       	in	r0, 0x3f	; 63
    5536:	0f 92       	push	r0
    5538:	11 24       	eor	r1, r1
    553a:	0b b6       	in	r0, 0x3b	; 59
    553c:	0f 92       	push	r0
    553e:	2f 93       	push	r18
    5540:	3f 93       	push	r19
    5542:	4f 93       	push	r20
    5544:	5f 93       	push	r21
    5546:	6f 93       	push	r22
    5548:	7f 93       	push	r23
    554a:	8f 93       	push	r24
    554c:	9f 93       	push	r25
    554e:	af 93       	push	r26
    5550:	bf 93       	push	r27
    5552:	ef 93       	push	r30
    5554:	ff 93       	push	r31
    5556:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    555a:	80 e0       	ldi	r24, 0x00	; 0
    555c:	c6 df       	rcall	.-116    	; 0x54ea <uart_rx_interrupt>
    555e:	ff 91       	pop	r31
    5560:	ef 91       	pop	r30
    5562:	bf 91       	pop	r27
    5564:	af 91       	pop	r26
    5566:	9f 91       	pop	r25
    5568:	8f 91       	pop	r24
    556a:	7f 91       	pop	r23
    556c:	6f 91       	pop	r22
    556e:	5f 91       	pop	r21
    5570:	4f 91       	pop	r20
    5572:	3f 91       	pop	r19
    5574:	2f 91       	pop	r18
    5576:	0f 90       	pop	r0
    5578:	0b be       	out	0x3b, r0	; 59
    557a:	0f 90       	pop	r0
    557c:	0f be       	out	0x3f, r0	; 63
    557e:	0f 90       	pop	r0
    5580:	1f 90       	pop	r1
    5582:	18 95       	reti

00005584 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    5584:	81 11       	cpse	r24, r1
    5586:	07 c0       	rjmp	.+14     	; 0x5596 <uart_rx_count+0x12>
        return(EOF);

    cli();
    5588:	f8 94       	cli

    count = uarts[uart].rx_count;
    558a:	80 91 ef 19 	lds	r24, 0x19EF	; 0x8019ef <uarts+0x3>
    558e:	90 91 f0 19 	lds	r25, 0x19F0	; 0x8019f0 <uarts+0x4>

    sei();
    5592:	78 94       	sei

    return (count );
    5594:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    5596:	8f ef       	ldi	r24, 0xFF	; 255
    5598:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    559a:	08 95       	ret

0000559c <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    559c:	81 11       	cpse	r24, r1
    559e:	21 c0       	rjmp	.+66     	; 0x55e2 <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    55a0:	80 e0       	ldi	r24, 0x00	; 0
    55a2:	f0 df       	rcall	.-32     	; 0x5584 <uart_rx_count>
    55a4:	18 16       	cp	r1, r24
    55a6:	19 06       	cpc	r1, r25
    55a8:	dc f7       	brge	.-10     	; 0x55a0 <uart_get_tail+0x4>
        ;

    cli();
    55aa:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    55ac:	e0 91 ed 19 	lds	r30, 0x19ED	; 0x8019ed <uarts+0x1>
    55b0:	91 e0       	ldi	r25, 0x01	; 1
    55b2:	9e 0f       	add	r25, r30
    55b4:	90 93 ed 19 	sts	0x19ED, r25	; 0x8019ed <uarts+0x1>
    55b8:	f0 e0       	ldi	r31, 0x00	; 0
    55ba:	e4 51       	subi	r30, 0x14	; 20
    55bc:	f6 4e       	sbci	r31, 0xE6	; 230
    55be:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    55c0:	90 35       	cpi	r25, 0x50	; 80
    55c2:	10 f0       	brcs	.+4      	; 0x55c8 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    55c4:	10 92 ed 19 	sts	0x19ED, r1	; 0x8019ed <uarts+0x1>
    uarts[uart].rx_count--;
    55c8:	20 91 ef 19 	lds	r18, 0x19EF	; 0x8019ef <uarts+0x3>
    55cc:	30 91 f0 19 	lds	r19, 0x19F0	; 0x8019f0 <uarts+0x4>
    55d0:	21 50       	subi	r18, 0x01	; 1
    55d2:	31 09       	sbc	r19, r1
    55d4:	30 93 f0 19 	sts	0x19F0, r19	; 0x8019f0 <uarts+0x4>
    55d8:	20 93 ef 19 	sts	0x19EF, r18	; 0x8019ef <uarts+0x3>
    sei();
    55dc:	78 94       	sei

    return (c & 0xff);
    55de:	90 e0       	ldi	r25, 0x00	; 0
    55e0:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    55e2:	8f ef       	ldi	r24, 0xFF	; 255
    55e4:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    55e6:	08 95       	ret

000055e8 <uart_rx_byte>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    55e8:	d9 df       	rcall	.-78     	; 0x559c <uart_get_tail>
    55ea:	99 27       	eor	r25, r25
    55ec:	08 95       	ret

000055ee <uart_tx_byte>:
    55ee:	61 11       	cpse	r22, r1
    55f0:	09 c0       	rjmp	.+18     	; 0x5604 <uart_tx_byte+0x16>
    55f2:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    55f6:	25 ff       	sbrs	r18, 5
    55f8:	fc cf       	rjmp	.-8      	; 0x55f2 <uart_tx_byte+0x4>
    55fa:	28 2f       	mov	r18, r24
    55fc:	2f 77       	andi	r18, 0x7F	; 127
    55fe:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    5602:	08 95       	ret
    5604:	61 30       	cpi	r22, 0x01	; 1
    5606:	49 f4       	brne	.+18     	; 0x561a <uart_tx_byte+0x2c>
    5608:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    560c:	25 ff       	sbrs	r18, 5
    560e:	fc cf       	rjmp	.-8      	; 0x5608 <uart_tx_byte+0x1a>
    5610:	28 2f       	mov	r18, r24
    5612:	2f 77       	andi	r18, 0x7F	; 127
    5614:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    5618:	08 95       	ret
    561a:	8f ef       	ldi	r24, 0xFF	; 255
    561c:	9f ef       	ldi	r25, 0xFF	; 255
    561e:	08 95       	ret

00005620 <uart_getchar>:
    5620:	cf 93       	push	r28
    5622:	81 11       	cpse	r24, r1
    5624:	0f c0       	rjmp	.+30     	; 0x5644 <uart_getchar+0x24>
    5626:	e0 df       	rcall	.-64     	; 0x55e8 <uart_rx_byte>
    5628:	c8 2f       	mov	r28, r24
    562a:	60 e0       	ldi	r22, 0x00	; 0
    562c:	90 e0       	ldi	r25, 0x00	; 0
    562e:	df df       	rcall	.-66     	; 0x55ee <uart_tx_byte>
    5630:	cd 30       	cpi	r28, 0x0D	; 13
    5632:	29 f4       	brne	.+10     	; 0x563e <uart_getchar+0x1e>
    5634:	60 e0       	ldi	r22, 0x00	; 0
    5636:	8a e0       	ldi	r24, 0x0A	; 10
    5638:	90 e0       	ldi	r25, 0x00	; 0
    563a:	d9 df       	rcall	.-78     	; 0x55ee <uart_tx_byte>
    563c:	ca e0       	ldi	r28, 0x0A	; 10
    563e:	8c 2f       	mov	r24, r28
    5640:	90 e0       	ldi	r25, 0x00	; 0
    5642:	02 c0       	rjmp	.+4      	; 0x5648 <uart_getchar+0x28>
    5644:	8f ef       	ldi	r24, 0xFF	; 255
    5646:	9f ef       	ldi	r25, 0xFF	; 255
    5648:	cf 91       	pop	r28
    564a:	08 95       	ret

0000564c <uart0_getchar>:
    564c:	80 e0       	ldi	r24, 0x00	; 0
    564e:	e8 cf       	rjmp	.-48     	; 0x5620 <uart_getchar>
    5650:	08 95       	ret

00005652 <uart_putchar>:
    5652:	1f 93       	push	r17
    5654:	cf 93       	push	r28
    5656:	df 93       	push	r29
    5658:	ec 01       	movw	r28, r24
    565a:	16 2f       	mov	r17, r22
    565c:	c8 df       	rcall	.-112    	; 0x55ee <uart_tx_byte>
    565e:	ca 30       	cpi	r28, 0x0A	; 10
    5660:	d1 05       	cpc	r29, r1
    5662:	21 f4       	brne	.+8      	; 0x566c <uart_putchar+0x1a>
    5664:	61 2f       	mov	r22, r17
    5666:	8d e0       	ldi	r24, 0x0D	; 13
    5668:	90 e0       	ldi	r25, 0x00	; 0
    566a:	c1 df       	rcall	.-126    	; 0x55ee <uart_tx_byte>
    566c:	ce 01       	movw	r24, r28
    566e:	df 91       	pop	r29
    5670:	cf 91       	pop	r28
    5672:	1f 91       	pop	r17
    5674:	08 95       	ret

00005676 <uart0_putchar>:
    5676:	cf 93       	push	r28
    5678:	df 93       	push	r29
    567a:	ec 01       	movw	r28, r24
    567c:	60 e0       	ldi	r22, 0x00	; 0
    567e:	70 e0       	ldi	r23, 0x00	; 0
    5680:	e8 df       	rcall	.-48     	; 0x5652 <uart_putchar>
    5682:	ce 01       	movw	r24, r28
    5684:	df 91       	pop	r29
    5686:	cf 91       	pop	r28
    5688:	08 95       	ret

0000568a <uart_keyhit>:
    568a:	7c cf       	rjmp	.-264    	; 0x5584 <uart_rx_count>
    568c:	08 95       	ret

0000568e <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    568e:	cf 92       	push	r12
    5690:	df 92       	push	r13
    5692:	ef 92       	push	r14
    5694:	ff 92       	push	r15
    5696:	6b 01       	movw	r12, r22
    5698:	7c 01       	movw	r14, r24
    569a:	80 91 53 17 	lds	r24, 0x1753	; 0x801753 <SPI0_Speed_value>
    569e:	90 91 54 17 	lds	r25, 0x1754	; 0x801754 <SPI0_Speed_value+0x1>
    56a2:	a0 91 55 17 	lds	r26, 0x1755	; 0x801755 <SPI0_Speed_value+0x2>
    56a6:	b0 91 56 17 	lds	r27, 0x1756	; 0x801756 <SPI0_Speed_value+0x3>
    56aa:	8c 15       	cp	r24, r12
    56ac:	9d 05       	cpc	r25, r13
    56ae:	ae 05       	cpc	r26, r14
    56b0:	bf 05       	cpc	r27, r15
    56b2:	09 f4       	brne	.+2      	; 0x56b6 <SPI0_Speed+0x28>
    56b4:	4e c0       	rjmp	.+156    	; 0x5752 <SPI0_Speed+0xc4>
    56b6:	60 e0       	ldi	r22, 0x00	; 0
    56b8:	7d e2       	ldi	r23, 0x2D	; 45
    56ba:	81 e3       	ldi	r24, 0x31	; 49
    56bc:	91 e0       	ldi	r25, 0x01	; 1
    56be:	a7 01       	movw	r20, r14
    56c0:	96 01       	movw	r18, r12
    56c2:	0e 94 62 e2 	call	0x1c4c4	; 0x1c4c4 <__udivmodsi4>
    56c6:	20 38       	cpi	r18, 0x80	; 128
    56c8:	31 05       	cpc	r19, r1
    56ca:	41 05       	cpc	r20, r1
    56cc:	51 05       	cpc	r21, r1
    56ce:	28 f4       	brcc	.+10     	; 0x56da <SPI0_Speed+0x4c>
    56d0:	20 34       	cpi	r18, 0x40	; 64
    56d2:	31 05       	cpc	r19, r1
    56d4:	41 05       	cpc	r20, r1
    56d6:	51 05       	cpc	r21, r1
    56d8:	30 f0       	brcs	.+12     	; 0x56e6 <SPI0_Speed+0x58>
    56da:	8d b5       	in	r24, 0x2d	; 45
    56dc:	8e 7f       	andi	r24, 0xFE	; 254
    56de:	8d bd       	out	0x2d, r24	; 45
    56e0:	8c b5       	in	r24, 0x2c	; 44
    56e2:	82 60       	ori	r24, 0x02	; 2
    56e4:	1b c0       	rjmp	.+54     	; 0x571c <SPI0_Speed+0x8e>
    56e6:	8d b5       	in	r24, 0x2d	; 45
    56e8:	20 32       	cpi	r18, 0x20	; 32
    56ea:	31 05       	cpc	r19, r1
    56ec:	41 05       	cpc	r20, r1
    56ee:	51 05       	cpc	r21, r1
    56f0:	28 f0       	brcs	.+10     	; 0x56fc <SPI0_Speed+0x6e>
    56f2:	81 60       	ori	r24, 0x01	; 1
    56f4:	8d bd       	out	0x2d, r24	; 45
    56f6:	8c b5       	in	r24, 0x2c	; 44
    56f8:	82 60       	ori	r24, 0x02	; 2
    56fa:	1f c0       	rjmp	.+62     	; 0x573a <SPI0_Speed+0xac>
    56fc:	20 31       	cpi	r18, 0x10	; 16
    56fe:	31 05       	cpc	r19, r1
    5700:	41 05       	cpc	r20, r1
    5702:	51 05       	cpc	r21, r1
    5704:	10 f0       	brcs	.+4      	; 0x570a <SPI0_Speed+0x7c>
    5706:	8e 7f       	andi	r24, 0xFE	; 254
    5708:	06 c0       	rjmp	.+12     	; 0x5716 <SPI0_Speed+0x88>
    570a:	28 30       	cpi	r18, 0x08	; 8
    570c:	31 05       	cpc	r19, r1
    570e:	41 05       	cpc	r20, r1
    5710:	51 05       	cpc	r21, r1
    5712:	40 f0       	brcs	.+16     	; 0x5724 <SPI0_Speed+0x96>
    5714:	81 60       	ori	r24, 0x01	; 1
    5716:	8d bd       	out	0x2d, r24	; 45
    5718:	8c b5       	in	r24, 0x2c	; 44
    571a:	8d 7f       	andi	r24, 0xFD	; 253
    571c:	8c bd       	out	0x2c, r24	; 44
    571e:	8c b5       	in	r24, 0x2c	; 44
    5720:	81 60       	ori	r24, 0x01	; 1
    5722:	0e c0       	rjmp	.+28     	; 0x5740 <SPI0_Speed+0xb2>
    5724:	24 30       	cpi	r18, 0x04	; 4
    5726:	31 05       	cpc	r19, r1
    5728:	41 05       	cpc	r20, r1
    572a:	51 05       	cpc	r21, r1
    572c:	10 f0       	brcs	.+4      	; 0x5732 <SPI0_Speed+0xa4>
    572e:	8e 7f       	andi	r24, 0xFE	; 254
    5730:	01 c0       	rjmp	.+2      	; 0x5734 <SPI0_Speed+0xa6>
    5732:	81 60       	ori	r24, 0x01	; 1
    5734:	8d bd       	out	0x2d, r24	; 45
    5736:	8c b5       	in	r24, 0x2c	; 44
    5738:	8d 7f       	andi	r24, 0xFD	; 253
    573a:	8c bd       	out	0x2c, r24	; 44
    573c:	8c b5       	in	r24, 0x2c	; 44
    573e:	8e 7f       	andi	r24, 0xFE	; 254
    5740:	8c bd       	out	0x2c, r24	; 44
    5742:	c0 92 53 17 	sts	0x1753, r12	; 0x801753 <SPI0_Speed_value>
    5746:	d0 92 54 17 	sts	0x1754, r13	; 0x801754 <SPI0_Speed_value+0x1>
    574a:	e0 92 55 17 	sts	0x1755, r14	; 0x801755 <SPI0_Speed_value+0x2>
    574e:	f0 92 56 17 	sts	0x1756, r15	; 0x801756 <SPI0_Speed_value+0x3>
    5752:	ff 90       	pop	r15
    5754:	ef 90       	pop	r14
    5756:	df 90       	pop	r13
    5758:	cf 90       	pop	r12
    575a:	08 95       	ret

0000575c <SPI0_Mode>:
    575c:	cf 93       	push	r28
    575e:	df 93       	push	r29
    5760:	00 d0       	rcall	.+0      	; 0x5762 <SPI0_Mode+0x6>
    5762:	00 d0       	rcall	.+0      	; 0x5764 <SPI0_Mode+0x8>
    5764:	1f 92       	push	r1
    5766:	ec 01       	movw	r28, r24
    5768:	81 30       	cpi	r24, 0x01	; 1
    576a:	91 05       	cpc	r25, r1
    576c:	71 f0       	breq	.+28     	; 0x578a <SPI0_Mode+0x2e>
    576e:	2c f4       	brge	.+10     	; 0x577a <SPI0_Mode+0x1e>
    5770:	89 2b       	or	r24, r25
    5772:	c1 f4       	brne	.+48     	; 0x57a4 <SPI0_Mode+0x48>
    5774:	8c b5       	in	r24, 0x2c	; 44
    5776:	87 7f       	andi	r24, 0xF7	; 247
    5778:	11 c0       	rjmp	.+34     	; 0x579c <SPI0_Mode+0x40>
    577a:	82 30       	cpi	r24, 0x02	; 2
    577c:	91 05       	cpc	r25, r1
    577e:	61 f0       	breq	.+24     	; 0x5798 <SPI0_Mode+0x3c>
    5780:	03 97       	sbiw	r24, 0x03	; 3
    5782:	81 f4       	brne	.+32     	; 0x57a4 <SPI0_Mode+0x48>
    5784:	8c b5       	in	r24, 0x2c	; 44
    5786:	88 60       	ori	r24, 0x08	; 8
    5788:	02 c0       	rjmp	.+4      	; 0x578e <SPI0_Mode+0x32>
    578a:	8c b5       	in	r24, 0x2c	; 44
    578c:	87 7f       	andi	r24, 0xF7	; 247
    578e:	8c bd       	out	0x2c, r24	; 44
    5790:	8c b5       	in	r24, 0x2c	; 44
    5792:	84 60       	ori	r24, 0x04	; 4
    5794:	8c bd       	out	0x2c, r24	; 44
    5796:	12 c0       	rjmp	.+36     	; 0x57bc <SPI0_Mode+0x60>
    5798:	8c b5       	in	r24, 0x2c	; 44
    579a:	88 60       	ori	r24, 0x08	; 8
    579c:	8c bd       	out	0x2c, r24	; 44
    579e:	8c b5       	in	r24, 0x2c	; 44
    57a0:	8b 7f       	andi	r24, 0xFB	; 251
    57a2:	f8 cf       	rjmp	.-16     	; 0x5794 <SPI0_Mode+0x38>
    57a4:	ed b7       	in	r30, 0x3d	; 61
    57a6:	fe b7       	in	r31, 0x3e	; 62
    57a8:	d5 83       	std	Z+5, r29	; 0x05
    57aa:	c4 83       	std	Z+4, r28	; 0x04
    57ac:	8a e2       	ldi	r24, 0x2A	; 42
    57ae:	94 e0       	ldi	r25, 0x04	; 4
    57b0:	a0 e0       	ldi	r26, 0x00	; 0
    57b2:	81 83       	std	Z+1, r24	; 0x01
    57b4:	92 83       	std	Z+2, r25	; 0x02
    57b6:	a3 83       	std	Z+3, r26	; 0x03
    57b8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    57bc:	d0 93 52 17 	sts	0x1752, r29	; 0x801752 <SPI0_Mode_value+0x1>
    57c0:	c0 93 51 17 	sts	0x1751, r28	; 0x801751 <SPI0_Mode_value>
    57c4:	cd b7       	in	r28, 0x3d	; 61
    57c6:	de b7       	in	r29, 0x3e	; 62
    57c8:	25 96       	adiw	r28, 0x05	; 5
    57ca:	e2 e0       	ldi	r30, 0x02	; 2
    57cc:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

000057d0 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    57d0:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    57d2:	0d b4       	in	r0, 0x2d	; 45
    57d4:	07 fe       	sbrs	r0, 7
    57d6:	fd cf       	rjmp	.-6      	; 0x57d2 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    57d8:	8e b5       	in	r24, 0x2e	; 46
}
    57da:	08 95       	ret

000057dc <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    57dc:	cf 92       	push	r12
    57de:	df 92       	push	r13
    57e0:	ef 92       	push	r14
    57e2:	ff 92       	push	r15
    57e4:	cf 93       	push	r28
    57e6:	df 93       	push	r29
    57e8:	1f 92       	push	r1
    57ea:	cd b7       	in	r28, 0x3d	; 61
    57ec:	de b7       	in	r29, 0x3e	; 62
    57ee:	6b 01       	movw	r12, r22
    57f0:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    57f2:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    57f4:	2f 9a       	sbi	0x05, 7	; 5
    57f6:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    57f8:	2d 9a       	sbi	0x05, 5	; 5
    57fa:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    57fc:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    57fe:	2c 98       	cbi	0x05, 4	; 5
    5800:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    5802:	8c b5       	in	r24, 0x2c	; 44
    5804:	80 61       	ori	r24, 0x10	; 16
    5806:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    5808:	8c b5       	in	r24, 0x2c	; 44
    580a:	80 64       	ori	r24, 0x40	; 64
    580c:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    580e:	8d b5       	in	r24, 0x2d	; 45
    5810:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    5812:	8e b5       	in	r24, 0x2e	; 46
    5814:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    5816:	80 e0       	ldi	r24, 0x00	; 0
    5818:	90 e0       	ldi	r25, 0x00	; 0
    581a:	a0 df       	rcall	.-192    	; 0x575c <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    581c:	c7 01       	movw	r24, r14
    581e:	b6 01       	movw	r22, r12

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    5820:	36 df       	rcall	.-404    	; 0x568e <SPI0_Speed>
    5822:	8f ef       	ldi	r24, 0xFF	; 255
    5824:	d5 df       	rcall	.-86     	; 0x57d0 <SPI0_TXRX_Byte>
    SPI0_Init_state = 1;

}
    5826:	0f 90       	pop	r0
    5828:	df 91       	pop	r29
    582a:	cf 91       	pop	r28
    582c:	ff 90       	pop	r15
    582e:	ef 90       	pop	r14
    5830:	df 90       	pop	r13
    5832:	cf 90       	pop	r12
    5834:	08 95       	ret

00005836 <SPI0_TX>:
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    5836:	0f 93       	push	r16
    5838:	1f 93       	push	r17
    583a:	cf 93       	push	r28
    583c:	df 93       	push	r29
    583e:	8c 01       	movw	r16, r24
    5840:	eb 01       	movw	r28, r22

    while(count > 0)
    5842:	1c 16       	cp	r1, r28
    5844:	1d 06       	cpc	r1, r29
    5846:	34 f4       	brge	.+12     	; 0x5854 <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    5848:	f8 01       	movw	r30, r16
    584a:	81 91       	ld	r24, Z+
    584c:	8f 01       	movw	r16, r30
    584e:	c0 df       	rcall	.-128    	; 0x57d0 <SPI0_TXRX_Byte>
        ++data;
        --count;
    5850:	21 97       	sbiw	r28, 0x01	; 1
    5852:	f7 cf       	rjmp	.-18     	; 0x5842 <SPI0_TX+0xc>
    }
}
    5854:	df 91       	pop	r29
    5856:	cf 91       	pop	r28
    5858:	1f 91       	pop	r17
    585a:	0f 91       	pop	r16
    585c:	08 95       	ret

0000585e <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    585e:	0f 93       	push	r16
    5860:	1f 93       	push	r17
    5862:	cf 93       	push	r28
    5864:	df 93       	push	r29
    5866:	8c 01       	movw	r16, r24
    5868:	eb 01       	movw	r28, r22

    while(count > 0)
    586a:	1c 16       	cp	r1, r28
    586c:	1d 06       	cpc	r1, r29
    586e:	44 f4       	brge	.+16     	; 0x5880 <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    5870:	f8 01       	movw	r30, r16
    5872:	80 81       	ld	r24, Z
    5874:	ad df       	rcall	.-166    	; 0x57d0 <SPI0_TXRX_Byte>
    5876:	f8 01       	movw	r30, r16
    5878:	81 93       	st	Z+, r24
    587a:	8f 01       	movw	r16, r30
        ++data;
        --count;
    587c:	21 97       	sbiw	r28, 0x01	; 1
    587e:	f5 cf       	rjmp	.-22     	; 0x586a <SPI0_TXRX+0xc>
    }
}
    5880:	df 91       	pop	r29
    5882:	cf 91       	pop	r28
    5884:	1f 91       	pop	r17
    5886:	0f 91       	pop	r16
    5888:	08 95       	ret

0000588a <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    588a:	0f 93       	push	r16
    588c:	1f 93       	push	r17
    588e:	cf 93       	push	r28
    5890:	df 93       	push	r29
    5892:	8c 01       	movw	r16, r24
    5894:	eb 01       	movw	r28, r22

    while(count > 0)
    5896:	1c 16       	cp	r1, r28
    5898:	1d 06       	cpc	r1, r29
    589a:	3c f4       	brge	.+14     	; 0x58aa <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    589c:	8f ef       	ldi	r24, 0xFF	; 255
    589e:	98 df       	rcall	.-208    	; 0x57d0 <SPI0_TXRX_Byte>
    58a0:	f8 01       	movw	r30, r16
    58a2:	81 93       	st	Z+, r24
    58a4:	8f 01       	movw	r16, r30
        ++data;
        --count;
    58a6:	21 97       	sbiw	r28, 0x01	; 1
    58a8:	f6 cf       	rjmp	.-20     	; 0x5896 <SPI0_RX+0xc>
    }
}
    58aa:	df 91       	pop	r29
    58ac:	cf 91       	pop	r28
    58ae:	1f 91       	pop	r17
    58b0:	0f 91       	pop	r16
    58b2:	08 95       	ret

000058b4 <TWI_Init>:


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    58b4:	40 9a       	sbi	0x08, 0	; 8
    58b6:	41 9a       	sbi	0x08, 1	; 8
    58b8:	ec eb       	ldi	r30, 0xBC	; 188
    58ba:	f0 e0       	ldi	r31, 0x00	; 0
    58bc:	90 81       	ld	r25, Z
    58be:	94 60       	ori	r25, 0x04	; 4
    58c0:	90 83       	st	Z, r25
    58c2:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    58c6:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    58ca:	08 95       	ret

000058cc <TWI_StartTransmission>:
    for (;;)
    {
        bool     BusCaptured = false;
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    58cc:	94 ea       	ldi	r25, 0xA4	; 164
    58ce:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    58d2:	24 e6       	ldi	r18, 0x64	; 100
    58d4:	62 9f       	mul	r22, r18
    58d6:	b0 01       	movw	r22, r0
    58d8:	11 24       	eor	r1, r1
    58da:	61 50       	subi	r22, 0x01	; 1
    58dc:	71 09       	sbc	r23, r1

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    58de:	9b 01       	movw	r18, r22
///@return TWI error value on fail.
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress, const uint8_t TimeoutMS)
{
    for (;;)
    {
        bool     BusCaptured = false;
    58e0:	40 e0       	ldi	r20, 0x00	; 0
    58e2:	50 e0       	ldi	r21, 0x00	; 0
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    58e4:	e4 ea       	ldi	r30, 0xA4	; 164
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    58e6:	2f 3f       	cpi	r18, 0xFF	; 255
    58e8:	9f ef       	ldi	r25, 0xFF	; 255
    58ea:	39 07       	cpc	r19, r25
    58ec:	41 f1       	breq	.+80     	; 0x593e <TWI_StartTransmission+0x72>
    58ee:	41 15       	cp	r20, r1
    58f0:	51 05       	cpc	r21, r1
    58f2:	f1 f4       	brne	.+60     	; 0x5930 <TWI_StartTransmission+0x64>
        {
            if (TWCR & (1 << TWINT))
    58f4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    58f8:	97 ff       	sbrs	r25, 7
    58fa:	13 c0       	rjmp	.+38     	; 0x5922 <TWI_StartTransmission+0x56>
            {
                switch (TWSR & TW_STATUS_MASK)
    58fc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5900:	98 7f       	andi	r25, 0xF8	; 248
    5902:	90 31       	cpi	r25, 0x10	; 16
    5904:	61 f0       	breq	.+24     	; 0x591e <TWI_StartTransmission+0x52>
    5906:	98 33       	cpi	r25, 0x38	; 56
    5908:	39 f0       	breq	.+14     	; 0x5918 <TWI_StartTransmission+0x4c>
    590a:	98 30       	cpi	r25, 0x08	; 8
    590c:	41 f0       	breq	.+16     	; 0x591e <TWI_StartTransmission+0x52>
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
                        continue;
                    default:
                        TWCR = (1 << TWEN);
    590e:	84 e0       	ldi	r24, 0x04	; 4
    5910:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        return TWI_ERROR_BusFault;
    5914:	81 e0       	ldi	r24, 0x01	; 1
    5916:	08 95       	ret
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5918:	e0 93 bc 00 	sts	0x00BC, r30	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        continue;
    591c:	06 c0       	rjmp	.+12     	; 0x592a <TWI_StartTransmission+0x5e>
            {
                switch (TWSR & TW_STATUS_MASK)
                {
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
    591e:	41 e0       	ldi	r20, 0x01	; 1
    5920:	50 e0       	ldi	r21, 0x00	; 0
    5922:	92 e4       	ldi	r25, 0x42	; 66
    5924:	9a 95       	dec	r25
    5926:	f1 f7       	brne	.-4      	; 0x5924 <TWI_StartTransmission+0x58>
    5928:	00 c0       	rjmp	.+0      	; 0x592a <TWI_StartTransmission+0x5e>
    592a:	21 50       	subi	r18, 0x01	; 1
    592c:	31 09       	sbc	r19, r1
    592e:	db cf       	rjmp	.-74     	; 0x58e6 <TWI_StartTransmission+0x1a>
            }

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5930:	23 2b       	or	r18, r19
    5932:	29 f4       	brne	.+10     	; 0x593e <TWI_StartTransmission+0x72>
        {
            TWCR = (1 << TWEN);
    5934:	84 e0       	ldi	r24, 0x04	; 4
    5936:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            return TWI_ERROR_BusCaptureTimeout;
    593a:	82 e0       	ldi	r24, 0x02	; 2
    593c:	08 95       	ret
        }

        TWDR = SlaveAddress;
    593e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = ((1 << TWINT) | (1 << TWEN));
    5942:	84 e8       	ldi	r24, 0x84	; 132
    5944:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining--)
    5948:	6f 3f       	cpi	r22, 0xFF	; 255
    594a:	8f ef       	ldi	r24, 0xFF	; 255
    594c:	78 07       	cpc	r23, r24
    594e:	71 f0       	breq	.+28     	; 0x596c <TWI_StartTransmission+0xa0>
        {
            if (TWCR & (1 << TWINT))
    5950:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5954:	cb 01       	movw	r24, r22
    5956:	01 97       	sbiw	r24, 0x01	; 1
    5958:	27 fd       	sbrc	r18, 7
    595a:	06 c0       	rjmp	.+12     	; 0x5968 <TWI_StartTransmission+0x9c>
    595c:	22 e4       	ldi	r18, 0x42	; 66
    595e:	2a 95       	dec	r18
    5960:	f1 f7       	brne	.-4      	; 0x595e <TWI_StartTransmission+0x92>
    5962:	00 c0       	rjmp	.+0      	; 0x5964 <TWI_StartTransmission+0x98>
    5964:	bc 01       	movw	r22, r24
    5966:	f0 cf       	rjmp	.-32     	; 0x5948 <TWI_StartTransmission+0x7c>
                break;

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5968:	67 2b       	or	r22, r23
    596a:	61 f0       	breq	.+24     	; 0x5984 <TWI_StartTransmission+0xb8>
            return TWI_ERROR_SlaveResponseTimeout;

        switch (TWSR & TW_STATUS_MASK)
    596c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5970:	88 7f       	andi	r24, 0xF8	; 248
    5972:	88 31       	cpi	r24, 0x18	; 24
    5974:	49 f0       	breq	.+18     	; 0x5988 <TWI_StartTransmission+0xbc>
    5976:	80 34       	cpi	r24, 0x40	; 64
    5978:	39 f0       	breq	.+14     	; 0x5988 <TWI_StartTransmission+0xbc>
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    597a:	84 e9       	ldi	r24, 0x94	; 148
    597c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                return TWI_ERROR_SlaveNotReady;
    5980:	84 e0       	ldi	r24, 0x04	; 4
    5982:	08 95       	ret

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
            return TWI_ERROR_SlaveResponseTimeout;
    5984:	83 e0       	ldi	r24, 0x03	; 3
    5986:	08 95       	ret

        switch (TWSR & TW_STATUS_MASK)
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
    5988:	80 e0       	ldi	r24, 0x00	; 0
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
                return TWI_ERROR_SlaveNotReady;
        }
    }
}
    598a:	08 95       	ret

0000598c <TWI_SendByte>:
///
///@return 1 if Acknowledge.
///@return 0 on fail.
bool TWI_SendByte(const uint8_t Byte)
{
    TWDR = Byte;
    598c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = ((1 << TWINT) | (1 << TWEN));
    5990:	84 e8       	ldi	r24, 0x84	; 132
    5992:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!(TWCR & (1 << TWINT)));
    5996:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    599a:	87 ff       	sbrs	r24, 7
    599c:	fc cf       	rjmp	.-8      	; 0x5996 <TWI_SendByte+0xa>

    return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    599e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    59a2:	98 7f       	andi	r25, 0xF8	; 248
    59a4:	21 e0       	ldi	r18, 0x01	; 1
    59a6:	30 e0       	ldi	r19, 0x00	; 0
    59a8:	98 32       	cpi	r25, 0x28	; 40
    59aa:	11 f0       	breq	.+4      	; 0x59b0 <TWI_SendByte+0x24>
    59ac:	20 e0       	ldi	r18, 0x00	; 0
    59ae:	30 e0       	ldi	r19, 0x00	; 0
}
    59b0:	c9 01       	movw	r24, r18
    59b2:	08 95       	ret

000059b4 <TWI_ReceiveByte>:


bool TWI_ReceiveByte(uint8_t* const Byte,
const bool LastByte)
{
    59b4:	fc 01       	movw	r30, r24
    uint8_t TWCRMask;

    if (LastByte)
    59b6:	61 15       	cp	r22, r1
    59b8:	71 05       	cpc	r23, r1
    59ba:	11 f4       	brne	.+4      	; 0x59c0 <TWI_ReceiveByte+0xc>
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    59bc:	94 ec       	ldi	r25, 0xC4	; 196
    59be:	01 c0       	rjmp	.+2      	; 0x59c2 <TWI_ReceiveByte+0xe>
const bool LastByte)
{
    uint8_t TWCRMask;

    if (LastByte)
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    59c0:	94 e8       	ldi	r25, 0x84	; 132
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

    TWCR = TWCRMask;
    59c2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!BIT_TST(TWCR, TWINT))
    59c6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    59ca:	87 ff       	sbrs	r24, 7
    59cc:	fc cf       	rjmp	.-8      	; 0x59c6 <TWI_ReceiveByte+0x12>
        ;
    *Byte = TWDR;
    59ce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    59d2:	80 83       	st	Z, r24

    uint8_t Status = (TWSR & TW_STATUS_MASK);
    59d4:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    59d8:	28 7f       	andi	r18, 0xF8	; 248

    return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    59da:	81 e0       	ldi	r24, 0x01	; 1
    59dc:	90 e0       	ldi	r25, 0x00	; 0
    59de:	67 2b       	or	r22, r23
    59e0:	19 f0       	breq	.+6      	; 0x59e8 <TWI_ReceiveByte+0x34>
    59e2:	28 35       	cpi	r18, 0x58	; 88
    59e4:	19 f4       	brne	.+6      	; 0x59ec <TWI_ReceiveByte+0x38>
    59e6:	03 c0       	rjmp	.+6      	; 0x59ee <TWI_ReceiveByte+0x3a>
    59e8:	20 35       	cpi	r18, 0x50	; 80
    59ea:	09 f0       	breq	.+2      	; 0x59ee <TWI_ReceiveByte+0x3a>
    59ec:	80 e0       	ldi	r24, 0x00	; 0
}
    59ee:	08 95       	ret

000059f0 <TWI_ReadPacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
uint8_t* Buffer,
uint8_t Length)
{
    59f0:	a0 e0       	ldi	r26, 0x00	; 0
    59f2:	b0 e0       	ldi	r27, 0x00	; 0
    59f4:	ee ef       	ldi	r30, 0xFE	; 254
    59f6:	fc e2       	ldi	r31, 0x2C	; 44
    59f8:	0c 94 d6 e2 	jmp	0x1c5ac	; 0x1c5ac <__prologue_saves__+0xe>
    59fc:	f8 2e       	mov	r15, r24
    59fe:	b6 2e       	mov	r11, r22
    5a00:	94 2e       	mov	r9, r20
    5a02:	a5 2e       	mov	r10, r21
    5a04:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5a06:	8e 7f       	andi	r24, 0xFE	; 254
    5a08:	61 df       	rcall	.-318    	; 0x58cc <TWI_StartTransmission>
    5a0a:	d8 2f       	mov	r29, r24
    5a0c:	81 11       	cpse	r24, r1
    5a0e:	2b c0       	rjmp	.+86     	; 0x5a66 <TWI_ReadPacket+0x76>
    5a10:	c9 2c       	mov	r12, r9
    5a12:	da 2c       	mov	r13, r10
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5a14:	cc 23       	and	r28, r28
    5a16:	39 f0       	breq	.+14     	; 0x5a26 <TWI_ReadPacket+0x36>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5a18:	f6 01       	movw	r30, r12
    5a1a:	81 91       	ld	r24, Z+
    5a1c:	6f 01       	movw	r12, r30
    5a1e:	b6 df       	rcall	.-148    	; 0x598c <TWI_SendByte>
    5a20:	c1 50       	subi	r28, 0x01	; 1
    5a22:	89 2b       	or	r24, r25
    5a24:	b9 f7       	brne	.-18     	; 0x5a14 <TWI_ReadPacket+0x24>
                ErrorCode = TWI_ERROR_SlaveNAK;
                break;
            }
        }

        if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    5a26:	6b 2d       	mov	r22, r11
    5a28:	8f 2d       	mov	r24, r15
    5a2a:	81 60       	ori	r24, 0x01	; 1
    5a2c:	4f df       	rcall	.-354    	; 0x58cc <TWI_StartTransmission>
    5a2e:	d8 2f       	mov	r29, r24
    5a30:	81 11       	cpse	r24, r1
    5a32:	19 c0       	rjmp	.+50     	; 0x5a66 <TWI_ReadPacket+0x76>
    5a34:	cf ef       	ldi	r28, 0xFF	; 255
    5a36:	ce 0d       	add	r28, r14
            TimeoutMS)) == TWI_ERROR_NoError)
        {
            while (Length--)
    5a38:	cf 3f       	cpi	r28, 0xFF	; 255
    5a3a:	91 f0       	breq	.+36     	; 0x5a60 <TWI_ReadPacket+0x70>
            {
                if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    5a3c:	78 01       	movw	r14, r16
    5a3e:	ff ef       	ldi	r31, 0xFF	; 255
    5a40:	ef 1a       	sub	r14, r31
    5a42:	ff 0a       	sbc	r15, r31
    5a44:	61 e0       	ldi	r22, 0x01	; 1
    5a46:	70 e0       	ldi	r23, 0x00	; 0
    5a48:	cc 23       	and	r28, r28
    5a4a:	11 f0       	breq	.+4      	; 0x5a50 <TWI_ReadPacket+0x60>
    5a4c:	60 e0       	ldi	r22, 0x00	; 0
    5a4e:	70 e0       	ldi	r23, 0x00	; 0
    5a50:	c8 01       	movw	r24, r16
    5a52:	b0 df       	rcall	.-160    	; 0x59b4 <TWI_ReceiveByte>
    5a54:	c1 50       	subi	r28, 0x01	; 1
    5a56:	89 2b       	or	r24, r25
    5a58:	11 f0       	breq	.+4      	; 0x5a5e <TWI_ReadPacket+0x6e>
    5a5a:	87 01       	movw	r16, r14
    5a5c:	ed cf       	rjmp	.-38     	; 0x5a38 <TWI_ReadPacket+0x48>
                {
                    ErrorCode = TWI_ERROR_SlaveNAK;
    5a5e:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5a60:	84 e9       	ldi	r24, 0x94	; 148
    5a62:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            TWI_StopTransmission();
        }
    }

    return ErrorCode;
}
    5a66:	8d 2f       	mov	r24, r29
    5a68:	cd b7       	in	r28, 0x3d	; 61
    5a6a:	de b7       	in	r29, 0x3e	; 62
    5a6c:	eb e0       	ldi	r30, 0x0B	; 11
    5a6e:	0c 94 f2 e2 	jmp	0x1c5e4	; 0x1c5e4 <__epilogue_restores__+0xe>

00005a72 <TWI_WritePacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
const uint8_t* Buffer,
uint8_t Length)
{
    5a72:	a0 e0       	ldi	r26, 0x00	; 0
    5a74:	b0 e0       	ldi	r27, 0x00	; 0
    5a76:	ef e3       	ldi	r30, 0x3F	; 63
    5a78:	fd e2       	ldi	r31, 0x2D	; 45
    5a7a:	0c 94 d8 e2 	jmp	0x1c5b0	; 0x1c5b0 <__prologue_saves__+0x12>
    5a7e:	b4 2e       	mov	r11, r20
    5a80:	f5 2e       	mov	r15, r21
    5a82:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5a84:	8e 7f       	andi	r24, 0xFE	; 254
    5a86:	22 df       	rcall	.-444    	; 0x58cc <TWI_StartTransmission>
    5a88:	d8 2f       	mov	r29, r24
    5a8a:	81 11       	cpse	r24, r1
    5a8c:	1a c0       	rjmp	.+52     	; 0x5ac2 <TWI_WritePacket+0x50>
    5a8e:	cb 2c       	mov	r12, r11
    5a90:	df 2c       	mov	r13, r15
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5a92:	cc 23       	and	r28, r28
    5a94:	41 f0       	breq	.+16     	; 0x5aa6 <TWI_WritePacket+0x34>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5a96:	f6 01       	movw	r30, r12
    5a98:	81 91       	ld	r24, Z+
    5a9a:	6f 01       	movw	r12, r30
    5a9c:	77 df       	rcall	.-274    	; 0x598c <TWI_SendByte>
    5a9e:	c1 50       	subi	r28, 0x01	; 1
    5aa0:	89 2b       	or	r24, r25
    5aa2:	b9 f7       	brne	.-18     	; 0x5a92 <TWI_WritePacket+0x20>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5aa4:	d5 e0       	ldi	r29, 0x05	; 5
    5aa6:	68 01       	movw	r12, r16
                break;
            }
        }

        while (Length--)
    5aa8:	ee 20       	and	r14, r14
    5aaa:	41 f0       	breq	.+16     	; 0x5abc <TWI_WritePacket+0x4a>
        {
            if (!(TWI_SendByte(*(Buffer++))))
    5aac:	f6 01       	movw	r30, r12
    5aae:	81 91       	ld	r24, Z+
    5ab0:	6f 01       	movw	r12, r30
    5ab2:	6c df       	rcall	.-296    	; 0x598c <TWI_SendByte>
    5ab4:	ea 94       	dec	r14
    5ab6:	89 2b       	or	r24, r25
    5ab8:	b9 f7       	brne	.-18     	; 0x5aa8 <TWI_WritePacket+0x36>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5aba:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5abc:	84 e9       	ldi	r24, 0x94	; 148
    5abe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TWI_StopTransmission();
    }

    return ErrorCode;
}
    5ac2:	8d 2f       	mov	r24, r29
    5ac4:	cd b7       	in	r28, 0x3d	; 61
    5ac6:	de b7       	in	r29, 0x3e	; 62
    5ac8:	e9 e0       	ldi	r30, 0x09	; 9
    5aca:	0c 94 f4 e2 	jmp	0x1c5e8	; 0x1c5e8 <__epilogue_restores__+0x12>

00005ace <i2c_check_op>:

    if(set_timers(i2c_task,1) == -1)
        printf("lcd_task init failed\n");

    SREG = sreg;
}
    5ace:	cf 93       	push	r28
    5ad0:	ad b7       	in	r26, 0x3d	; 61
    5ad2:	be b7       	in	r27, 0x3e	; 62
    5ad4:	17 97       	sbiw	r26, 0x07	; 7
    5ad6:	0f b6       	in	r0, 0x3f	; 63
    5ad8:	f8 94       	cli
    5ada:	be bf       	out	0x3e, r27	; 62
    5adc:	0f be       	out	0x3f, r0	; 63
    5ade:	ad bf       	out	0x3d, r26	; 61
    5ae0:	28 2f       	mov	r18, r24
    5ae2:	30 e0       	ldi	r19, 0x00	; 0
    5ae4:	80 31       	cpi	r24, 0x10	; 16
    5ae6:	88 f0       	brcs	.+34     	; 0x5b0a <i2c_check_op+0x3c>
    5ae8:	80 e1       	ldi	r24, 0x10	; 16
    5aea:	90 e0       	ldi	r25, 0x00	; 0
    5aec:	ed b7       	in	r30, 0x3d	; 61
    5aee:	fe b7       	in	r31, 0x3e	; 62
    5af0:	97 83       	std	Z+7, r25	; 0x07
    5af2:	86 83       	std	Z+6, r24	; 0x06
    5af4:	35 83       	std	Z+5, r19	; 0x05
    5af6:	24 83       	std	Z+4, r18	; 0x04
    5af8:	88 ea       	ldi	r24, 0xA8	; 168
    5afa:	94 e0       	ldi	r25, 0x04	; 4
    5afc:	a0 e0       	ldi	r26, 0x00	; 0
    5afe:	81 83       	std	Z+1, r24	; 0x01
    5b00:	92 83       	std	Z+2, r25	; 0x02
    5b02:	a3 83       	std	Z+3, r26	; 0x03
    5b04:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    5b08:	2b c0       	rjmp	.+86     	; 0x5b60 <i2c_check_op+0x92>
    5b0a:	f9 01       	movw	r30, r18
    5b0c:	ee 0f       	add	r30, r30
    5b0e:	ff 1f       	adc	r31, r31
    5b10:	e9 5a       	subi	r30, 0xA9	; 169
    5b12:	f8 4e       	sbci	r31, 0xE8	; 232
    5b14:	01 90       	ld	r0, Z+
    5b16:	f0 81       	ld	r31, Z
    5b18:	e0 2d       	mov	r30, r0
    5b1a:	30 97       	sbiw	r30, 0x00	; 0
    5b1c:	09 f1       	breq	.+66     	; 0x5b60 <i2c_check_op+0x92>
    5b1e:	80 85       	ldd	r24, Z+8	; 0x08
    5b20:	91 85       	ldd	r25, Z+9	; 0x09
    5b22:	89 2b       	or	r24, r25
    5b24:	69 f4       	brne	.+26     	; 0x5b40 <i2c_check_op+0x72>
    5b26:	ed b7       	in	r30, 0x3d	; 61
    5b28:	fe b7       	in	r31, 0x3e	; 62
    5b2a:	35 83       	std	Z+5, r19	; 0x05
    5b2c:	24 83       	std	Z+4, r18	; 0x04
    5b2e:	8f e8       	ldi	r24, 0x8F	; 143
    5b30:	94 e0       	ldi	r25, 0x04	; 4
    5b32:	a0 e0       	ldi	r26, 0x00	; 0
    5b34:	81 83       	std	Z+1, r24	; 0x01
    5b36:	92 83       	std	Z+2, r25	; 0x02
    5b38:	a3 83       	std	Z+3, r26	; 0x03
    5b3a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    5b3e:	10 c0       	rjmp	.+32     	; 0x5b60 <i2c_check_op+0x92>
    5b40:	c6 81       	ldd	r28, Z+6	; 0x06
    5b42:	c1 11       	cpse	r28, r1
    5b44:	0f c0       	rjmp	.+30     	; 0x5b64 <i2c_check_op+0x96>
    5b46:	ed b7       	in	r30, 0x3d	; 61
    5b48:	fe b7       	in	r31, 0x3e	; 62
    5b4a:	35 83       	std	Z+5, r19	; 0x05
    5b4c:	24 83       	std	Z+4, r18	; 0x04
    5b4e:	89 e7       	ldi	r24, 0x79	; 121
    5b50:	94 e0       	ldi	r25, 0x04	; 4
    5b52:	a0 e0       	ldi	r26, 0x00	; 0
    5b54:	81 83       	std	Z+1, r24	; 0x01
    5b56:	92 83       	std	Z+2, r25	; 0x02
    5b58:	a3 83       	std	Z+3, r26	; 0x03
    5b5a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    5b5e:	03 c0       	rjmp	.+6      	; 0x5b66 <i2c_check_op+0x98>
    5b60:	c0 e0       	ldi	r28, 0x00	; 0
    5b62:	01 c0       	rjmp	.+2      	; 0x5b66 <i2c_check_op+0x98>
    5b64:	c1 e0       	ldi	r28, 0x01	; 1
    5b66:	8c 2f       	mov	r24, r28
    5b68:	ad b7       	in	r26, 0x3d	; 61
    5b6a:	be b7       	in	r27, 0x3e	; 62
    5b6c:	17 96       	adiw	r26, 0x07	; 7
    5b6e:	0f b6       	in	r0, 0x3f	; 63
    5b70:	f8 94       	cli
    5b72:	be bf       	out	0x3e, r27	; 62
    5b74:	0f be       	out	0x3f, r0	; 63
    5b76:	ad bf       	out	0x3d, r26	; 61
    5b78:	cf 91       	pop	r28
    5b7a:	08 95       	ret

00005b7c <i2c_task>:
    5b7c:	cf 93       	push	r28
    5b7e:	cf b7       	in	r28, 0x3f	; 63
    5b80:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <i2c+0x1>
    5b84:	a4 df       	rcall	.-184    	; 0x5ace <i2c_check_op>
    5b86:	88 23       	and	r24, r24
    5b88:	19 f1       	breq	.+70     	; 0x5bd0 <i2c_task+0x54>
    5b8a:	f8 94       	cli
    5b8c:	80 91 77 17 	lds	r24, 0x1777	; 0x801777 <i2c>
    5b90:	88 23       	and	r24, r24
    5b92:	e9 f0       	breq	.+58     	; 0x5bce <i2c_task+0x52>
    5b94:	e0 91 78 17 	lds	r30, 0x1778	; 0x801778 <i2c+0x1>
    5b98:	f0 e0       	ldi	r31, 0x00	; 0
    5b9a:	ee 0f       	add	r30, r30
    5b9c:	ff 1f       	adc	r31, r31
    5b9e:	e9 5a       	subi	r30, 0xA9	; 169
    5ba0:	f8 4e       	sbci	r31, 0xE8	; 232
    5ba2:	01 90       	ld	r0, Z+
    5ba4:	f0 81       	ld	r31, Z
    5ba6:	e0 2d       	mov	r30, r0
    5ba8:	81 81       	ldd	r24, Z+1	; 0x01
    5baa:	88 23       	and	r24, r24
    5bac:	81 f0       	breq	.+32     	; 0x5bce <i2c_task+0x52>
    5bae:	82 81       	ldd	r24, Z+2	; 0x02
    5bb0:	81 11       	cpse	r24, r1
    5bb2:	0d c0       	rjmp	.+26     	; 0x5bce <i2c_task+0x52>
    5bb4:	84 81       	ldd	r24, Z+4	; 0x04
    5bb6:	95 81       	ldd	r25, Z+5	; 0x05
    5bb8:	00 97       	sbiw	r24, 0x00	; 0
    5bba:	31 f4       	brne	.+12     	; 0x5bc8 <i2c_task+0x4c>
    5bbc:	83 81       	ldd	r24, Z+3	; 0x03
    5bbe:	81 60       	ori	r24, 0x01	; 1
    5bc0:	83 83       	std	Z+3, r24	; 0x03
    5bc2:	81 e0       	ldi	r24, 0x01	; 1
    5bc4:	82 83       	std	Z+2, r24	; 0x02
    5bc6:	03 c0       	rjmp	.+6      	; 0x5bce <i2c_task+0x52>
    5bc8:	01 97       	sbiw	r24, 0x01	; 1
    5bca:	95 83       	std	Z+5, r25	; 0x05
    5bcc:	84 83       	std	Z+4, r24	; 0x04
    5bce:	cf bf       	out	0x3f, r28	; 63
    5bd0:	cf 91       	pop	r28
    5bd2:	08 95       	ret

00005bd4 <i2c_next_op>:
    5bd4:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <i2c+0x1>
    5bd8:	28 2f       	mov	r18, r24
    5bda:	30 e0       	ldi	r19, 0x00	; 0
    5bdc:	2f 30       	cpi	r18, 0x0F	; 15
    5bde:	31 05       	cpc	r19, r1
    5be0:	d4 f4       	brge	.+52     	; 0x5c16 <i2c_next_op+0x42>
    5be2:	8f 5f       	subi	r24, 0xFF	; 255
    5be4:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c+0x1>
    5be8:	72 df       	rcall	.-284    	; 0x5ace <i2c_check_op>
    5bea:	88 23       	and	r24, r24
    5bec:	99 f3       	breq	.-26     	; 0x5bd4 <i2c_next_op>
    5bee:	e0 91 78 17 	lds	r30, 0x1778	; 0x801778 <i2c+0x1>
    5bf2:	f0 e0       	ldi	r31, 0x00	; 0
    5bf4:	ee 0f       	add	r30, r30
    5bf6:	ff 1f       	adc	r31, r31
    5bf8:	e9 5a       	subi	r30, 0xA9	; 169
    5bfa:	f8 4e       	sbci	r31, 0xE8	; 232
    5bfc:	01 90       	ld	r0, Z+
    5bfe:	f0 81       	ld	r31, Z
    5c00:	e0 2d       	mov	r30, r0
    5c02:	81 81       	ldd	r24, Z+1	; 0x01
    5c04:	88 23       	and	r24, r24
    5c06:	31 f3       	breq	.-52     	; 0x5bd4 <i2c_next_op>
    5c08:	82 81       	ldd	r24, Z+2	; 0x02
    5c0a:	81 30       	cpi	r24, 0x01	; 1
    5c0c:	19 f3       	breq	.-58     	; 0x5bd4 <i2c_next_op>
    5c0e:	85 ea       	ldi	r24, 0xA5	; 165
    5c10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5c14:	08 95       	ret
    5c16:	84 e9       	ldi	r24, 0x94	; 148
    5c18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5c1c:	81 e0       	ldi	r24, 0x01	; 1
    5c1e:	80 93 79 17 	sts	0x1779, r24	; 0x801779 <i2c+0x2>
    5c22:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <i2c>
    5c26:	08 95       	ret

00005c28 <i2c_op_add>:
/// @param[in] mode: TW_READ or TW_WRITE
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  i2c_op_t * pointer 
i2c_op_t *i2c_op_add(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
    5c28:	a0 e0       	ldi	r26, 0x00	; 0
    5c2a:	b0 e0       	ldi	r27, 0x00	; 0
    5c2c:	ea e1       	ldi	r30, 0x1A	; 26
    5c2e:	fe e2       	ldi	r31, 0x2E	; 46
    5c30:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
	int i;
	uint8_t sreg = SREG;
    5c34:	cf b6       	in	r12, 0x3f	; 63
	
	i2c_op_t *o = NULL;

    cli();
    5c36:	f8 94       	cli
    5c38:	e7 e5       	ldi	r30, 0x57	; 87
    5c3a:	f7 e1       	ldi	r31, 0x17	; 23
	for(i=0;i<I2C_OPS;++i)
    5c3c:	c0 e0       	ldi	r28, 0x00	; 0
    5c3e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(i2c_op[i] == NULL)
    5c40:	a1 91       	ld	r26, Z+
    5c42:	b1 91       	ld	r27, Z+
    5c44:	ab 2b       	or	r26, r27
    5c46:	19 f5       	brne	.+70     	; 0x5c8e <i2c_op_add+0x66>
    5c48:	d2 2e       	mov	r13, r18
    5c4a:	7a 01       	movw	r14, r20
    5c4c:	16 2f       	mov	r17, r22
    5c4e:	08 2f       	mov	r16, r24
		{
			o = safecalloc(1,sizeof(i2c_op_t));
    5c50:	6a e0       	ldi	r22, 0x0A	; 10
    5c52:	70 e0       	ldi	r23, 0x00	; 0
    5c54:	81 e0       	ldi	r24, 0x01	; 1
    5c56:	90 e0       	ldi	r25, 0x00	; 0
    5c58:	60 da       	rcall	.-2880   	; 0x511a <safecalloc>
    5c5a:	fc 01       	movw	r30, r24
			i2c_op[i] = o;
    5c5c:	cc 0f       	add	r28, r28
    5c5e:	dd 1f       	adc	r29, r29
    5c60:	c9 5a       	subi	r28, 0xA9	; 169
    5c62:	d8 4e       	sbci	r29, 0xE8	; 232
    5c64:	f9 83       	std	Y+1, r31	; 0x01
    5c66:	e8 83       	st	Y, r30
			break;
		}
	}
	
	if(o == NULL)
    5c68:	30 97       	sbiw	r30, 0x00	; 0
    5c6a:	b9 f0       	breq	.+46     	; 0x5c9a <i2c_op_add+0x72>
		return(o);

	o->enable = 0; // NOT enabled
    5c6c:	11 82       	std	Z+1, r1	; 0x01
	o->done = 0;
    5c6e:	12 82       	std	Z+2, r1	; 0x02
    o->address = (address << 1) | (mode & 1);
    5c70:	00 0f       	add	r16, r16
    5c72:	11 70       	andi	r17, 0x01	; 1
    5c74:	10 2b       	or	r17, r16
    5c76:	10 83       	st	Z, r17
	o->timeout = I2C_TIMEOUT;
    5c78:	84 e1       	ldi	r24, 0x14	; 20
    5c7a:	90 e0       	ldi	r25, 0x00	; 0
    5c7c:	95 83       	std	Z+5, r25	; 0x05
    5c7e:	84 83       	std	Z+4, r24	; 0x04
	o->flags = 0;
    5c80:	13 82       	std	Z+3, r1	; 0x03
    o->len = len;
    5c82:	d6 82       	std	Z+6, r13	; 0x06
    o->ind = 0;
    5c84:	17 82       	std	Z+7, r1	; 0x07
    o->buf = buf;
    5c86:	f1 86       	std	Z+9, r15	; 0x09
    5c88:	e0 86       	std	Z+8, r14	; 0x08
    // o->buf = bufcalloc(buf,len+1);

	SREG = sreg;
    5c8a:	cf be       	out	0x3f, r12	; 63
	return(o);
    5c8c:	06 c0       	rjmp	.+12     	; 0x5c9a <i2c_op_add+0x72>
	uint8_t sreg = SREG;
	
	i2c_op_t *o = NULL;

    cli();
	for(i=0;i<I2C_OPS;++i)
    5c8e:	21 96       	adiw	r28, 0x01	; 1
    5c90:	c0 31       	cpi	r28, 0x10	; 16
    5c92:	d1 05       	cpc	r29, r1
    5c94:	a9 f6       	brne	.-86     	; 0x5c40 <i2c_op_add+0x18>
i2c_op_t *i2c_op_add(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	int i;
	uint8_t sreg = SREG;
	
	i2c_op_t *o = NULL;
    5c96:	e0 e0       	ldi	r30, 0x00	; 0
    5c98:	f0 e0       	ldi	r31, 0x00	; 0
    o->buf = buf;
    // o->buf = bufcalloc(buf,len+1);

	SREG = sreg;
	return(o);
}
    5c9a:	cf 01       	movw	r24, r30
    5c9c:	cd b7       	in	r28, 0x3d	; 61
    5c9e:	de b7       	in	r29, 0x3e	; 62
    5ca0:	e8 e0       	ldi	r30, 0x08	; 8
    5ca2:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

00005ca6 <i2c_init>:
/// @brief I2C initialize
/// Clear all i2c_op[] pointers and disables I2C tasks
///
/// @return  void
void i2c_init(uint32_t speed)
{
    5ca6:	cf 93       	push	r28
    5ca8:	00 d0       	rcall	.+0      	; 0x5caa <i2c_init+0x4>
    5caa:	1f 92       	push	r1
    5cac:	9b 01       	movw	r18, r22
    5cae:	ac 01       	movw	r20, r24
	int i;
    uint8_t sreg = SREG;
    5cb0:	cf b7       	in	r28, 0x3f	; 63
    uint16_t rate = ((F_CPU / speed) - 16) / 2;
    5cb2:	60 e0       	ldi	r22, 0x00	; 0
    5cb4:	7d e2       	ldi	r23, 0x2D	; 45
    5cb6:	81 e3       	ldi	r24, 0x31	; 49
    5cb8:	91 e0       	ldi	r25, 0x01	; 1
    5cba:	0e 94 62 e2 	call	0x1c4c4	; 0x1c4c4 <__udivmodsi4>
    5cbe:	da 01       	movw	r26, r20
    5cc0:	c9 01       	movw	r24, r18
    5cc2:	40 97       	sbiw	r24, 0x10	; 16
    5cc4:	a1 09       	sbc	r26, r1
    5cc6:	b1 09       	sbc	r27, r1
    5cc8:	ac 01       	movw	r20, r24
    5cca:	bd 01       	movw	r22, r26
    5ccc:	76 95       	lsr	r23
    5cce:	67 95       	ror	r22
    5cd0:	57 95       	ror	r21
    5cd2:	47 95       	ror	r20

    if(rate & 0xff00)
    5cd4:	ca 01       	movw	r24, r20
    5cd6:	88 27       	eor	r24, r24
    5cd8:	89 2b       	or	r24, r25
    5cda:	59 f0       	breq	.+22     	; 0x5cf2 <i2c_init+0x4c>
	{
        printf("i2c_init prescale overflow\n");
    5cdc:	8d e5       	ldi	r24, 0x5D	; 93
    5cde:	94 e0       	ldi	r25, 0x04	; 4
    5ce0:	a0 e0       	ldi	r26, 0x00	; 0
    5ce2:	ed b7       	in	r30, 0x3d	; 61
    5ce4:	fe b7       	in	r31, 0x3e	; 62
    5ce6:	81 83       	std	Z+1, r24	; 0x01
    5ce8:	92 83       	std	Z+2, r25	; 0x02
    5cea:	a3 83       	std	Z+3, r26	; 0x03
    5cec:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
		return;
    5cf0:	31 c0       	rjmp	.+98     	; 0x5d54 <i2c_init+0xae>
	}

    cli();
    5cf2:	f8 94       	cli

    TWBR = rate;
    5cf4:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5cf8:	e7 e5       	ldi	r30, 0x57	; 87
    5cfa:	f7 e1       	ldi	r31, 0x17	; 23

	for(i=0;i<I2C_OPS;++i)
		i2c_op[i] = NULL;
    5cfc:	11 92       	st	Z+, r1
    5cfe:	11 92       	st	Z+, r1

    cli();

    TWBR = rate;

	for(i=0;i<I2C_OPS;++i)
    5d00:	27 e1       	ldi	r18, 0x17	; 23
    5d02:	e7 37       	cpi	r30, 0x77	; 119
    5d04:	f2 07       	cpc	r31, r18
    5d06:	d1 f7       	brne	.-12     	; 0x5cfc <i2c_init+0x56>
		i2c_op[i] = NULL;

	i2c.enable = 0;
    5d08:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <i2c>
	i2c.ind = 0;
    5d0c:	10 92 78 17 	sts	0x1778, r1	; 0x801778 <i2c+0x1>
	i2c.done = 0;
    5d10:	10 92 79 17 	sts	0x1779, r1	; 0x801779 <i2c+0x2>
	i2c.error = 0;
    5d14:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <i2c+0x3>

    GPIO_PIN_LATCH_HI(SCL);                       // Pull Up on
    5d18:	40 9a       	sbi	0x08, 0	; 8
    GPIO_PIN_LATCH_HI(SDA);                       // Pull Up on
    5d1a:	41 9a       	sbi	0x08, 1	; 8

	// TWI Enable
	// TWI Interrupt Disable
	// TWI Interrupt Clear
	TWCR = _BV(TWEN) | _BV(TWINT);
    5d1c:	84 e8       	ldi	r24, 0x84	; 132
    5d1e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// Disable SLAVE
    TWAR = 0;
    5d22:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	// Reset status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5d26:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5d2a:	8c 7f       	andi	r24, 0xFC	; 252
    5d2c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Enable timer task to monitor timeouts
	if(set_timers(i2c_task,1) == -1)
    5d30:	61 e0       	ldi	r22, 0x01	; 1
    5d32:	70 e0       	ldi	r23, 0x00	; 0
    5d34:	8e eb       	ldi	r24, 0xBE	; 190
    5d36:	9d e2       	ldi	r25, 0x2D	; 45
    5d38:	49 d6       	rcall	.+3218   	; 0x69cc <set_timers>
    5d3a:	01 96       	adiw	r24, 0x01	; 1
    5d3c:	51 f4       	brne	.+20     	; 0x5d52 <i2c_init+0xac>
        printf("i2c_task init failed\n");
    5d3e:	87 e4       	ldi	r24, 0x47	; 71
    5d40:	94 e0       	ldi	r25, 0x04	; 4
    5d42:	a0 e0       	ldi	r26, 0x00	; 0
    5d44:	ed b7       	in	r30, 0x3d	; 61
    5d46:	fe b7       	in	r31, 0x3e	; 62
    5d48:	81 83       	std	Z+1, r24	; 0x01
    5d4a:	92 83       	std	Z+2, r25	; 0x02
    5d4c:	a3 83       	std	Z+3, r26	; 0x03
    5d4e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

/* Restore the status register. */
    SREG = sreg;
    5d52:	cf bf       	out	0x3f, r28	; 63
}
    5d54:	0f 90       	pop	r0
    5d56:	0f 90       	pop	r0
    5d58:	0f 90       	pop	r0
    5d5a:	cf 91       	pop	r28
    5d5c:	08 95       	ret

00005d5e <i2c_post>:

/// @brief Run all valid i2c_op[] tasks
///
/// @return  void
void i2c_post()
{
    5d5e:	a0 e0       	ldi	r26, 0x00	; 0
    5d60:	b0 e0       	ldi	r27, 0x00	; 0
    5d62:	e5 eb       	ldi	r30, 0xB5	; 181
    5d64:	fe e2       	ldi	r31, 0x2E	; 46
    5d66:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
	uint8_t sreg = SREG;
    5d6a:	ff b6       	in	r15, 0x3f	; 63
	uint8_t run = 0;
	i2c_op_t *o;
	int i;

	cli();
    5d6c:	f8 94       	cli
    5d6e:	07 e5       	ldi	r16, 0x57	; 87
    5d70:	17 e1       	ldi	r17, 0x17	; 23
    5d72:	c0 e0       	ldi	r28, 0x00	; 0
///
/// @return  void
void i2c_post()
{
	uint8_t sreg = SREG;
	uint8_t run = 0;
    5d74:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=0;i<I2C_OPS;++i)
	{
		if(!i2c_check_op(i))
			continue;
		o = i2c_op[i];
		o->enable = 1;
    5d76:	ee 24       	eor	r14, r14
    5d78:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->timeout = I2C_TIMEOUT;
    5d7a:	84 e1       	ldi	r24, 0x14	; 20
    5d7c:	c8 2e       	mov	r12, r24
    5d7e:	d1 2c       	mov	r13, r1

	cli();

	for(i=0;i<I2C_OPS;++i)
	{
		if(!i2c_check_op(i))
    5d80:	8c 2f       	mov	r24, r28
    5d82:	a5 de       	rcall	.-694    	; 0x5ace <i2c_check_op>
    5d84:	88 23       	and	r24, r24
    5d86:	51 f0       	breq	.+20     	; 0x5d9c <i2c_post+0x3e>
			continue;
		o = i2c_op[i];
    5d88:	d8 01       	movw	r26, r16
    5d8a:	ed 91       	ld	r30, X+
    5d8c:	fc 91       	ld	r31, X
		o->enable = 1;
    5d8e:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    5d90:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    5d92:	13 82       	std	Z+3, r1	; 0x03
		o->timeout = I2C_TIMEOUT;
    5d94:	d5 82       	std	Z+5, r13	; 0x05
    5d96:	c4 82       	std	Z+4, r12	; 0x04
		o->ind = 0;
    5d98:	17 82       	std	Z+7, r1	; 0x07
		run = 1;
    5d9a:	d1 e0       	ldi	r29, 0x01	; 1
    5d9c:	cf 5f       	subi	r28, 0xFF	; 255
    5d9e:	0e 5f       	subi	r16, 0xFE	; 254
    5da0:	1f 4f       	sbci	r17, 0xFF	; 255
	i2c_op_t *o;
	int i;

	cli();

	for(i=0;i<I2C_OPS;++i)
    5da2:	c0 31       	cpi	r28, 0x10	; 16
    5da4:	69 f7       	brne	.-38     	; 0x5d80 <i2c_post+0x22>
		o->flags = 0;
		o->timeout = I2C_TIMEOUT;
		o->ind = 0;
		run = 1;
	}
	i2c.ind = 0;
    5da6:	10 92 78 17 	sts	0x1778, r1	; 0x801778 <i2c+0x1>
	i2c.done = 0;
    5daa:	10 92 79 17 	sts	0x1779, r1	; 0x801779 <i2c+0x2>
	i2c.error = 0;
    5dae:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <i2c+0x3>
	i2c.enable = 1;
    5db2:	81 e0       	ldi	r24, 0x01	; 1
    5db4:	80 93 77 17 	sts	0x1777, r24	; 0x801777 <i2c>

	// Do We have something to do ?
	if(run)
    5db8:	dd 23       	and	r29, r29
    5dba:	49 f0       	breq	.+18     	; 0x5dce <i2c_post+0x70>
	{
		// Reset Status
		TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5dbc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5dc0:	8c 7f       	andi	r24, 0xFC	; 252
    5dc2:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
		// Start a transactions
		// TWI Enable
		// TWI Interrupt Enable
		// TWI Interrupt Clear
		// TWI SEND RESTART
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5dc6:	85 ea       	ldi	r24, 0xA5	; 165
    5dc8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5dcc:	0c c0       	rjmp	.+24     	; 0x5de6 <i2c_post+0x88>
	}
	else
	{
		// FIXME we should notify the user ?
		// Nothing to do
		i2c.done = 1;
    5dce:	80 93 79 17 	sts	0x1779, r24	; 0x801779 <i2c+0x2>
		i2c.enable = 0;
    5dd2:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <i2c>
		// TWI Enable
		// TWI Disable Enable
		// TWI Interrupt Clear
		TWCR = _BV(TWEN) | _BV(TWINT);
    5dd6:	84 e8       	ldi	r24, 0x84	; 132
    5dd8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		// Reset status
		TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5ddc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5de0:	8c 7f       	andi	r24, 0xFC	; 252
    5de2:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
		// Disable Slave Mode
		TWAR = 0;
    5de6:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}

    SREG = sreg;
    5dea:	ff be       	out	0x3f, r15	; 63
}
    5dec:	cd b7       	in	r28, 0x3d	; 61
    5dee:	de b7       	in	r29, 0x3e	; 62
    5df0:	e8 e0       	ldi	r30, 0x08	; 8
    5df2:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

00005df6 <i2c_done>:

///@brief Are all i2c_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int i2c_done()
{
    5df6:	81 e0       	ldi	r24, 0x01	; 1
    5df8:	90 e0       	ldi	r25, 0x00	; 0
    5dfa:	20 91 79 17 	lds	r18, 0x1779	; 0x801779 <i2c+0x2>
    5dfe:	21 11       	cpse	r18, r1
    5e00:	02 c0       	rjmp	.+4      	; 0x5e06 <i2c_done+0x10>
    5e02:	80 e0       	ldi	r24, 0x00	; 0
    5e04:	90 e0       	ldi	r25, 0x00	; 0
	if( i2c.done )
		return(1);
	return(0);
}
    5e06:	08 95       	ret

00005e08 <i2c_ok>:
///@brief check if I2C trasnaction detected an error
///@brief Did we get an error durring any i2c_op[] seand/receive operations
///
/// @return  1 OK, 0 NOT OK
int i2c_ok()
{
    5e08:	81 e0       	ldi	r24, 0x01	; 1
    5e0a:	90 e0       	ldi	r25, 0x00	; 0
    5e0c:	20 91 7a 17 	lds	r18, 0x177A	; 0x80177a <i2c+0x3>
    5e10:	22 23       	and	r18, r18
    5e12:	11 f0       	breq	.+4      	; 0x5e18 <i2c_ok+0x10>
    5e14:	80 e0       	ldi	r24, 0x00	; 0
    5e16:	90 e0       	ldi	r25, 0x00	; 0
	if (i2c.error) 
		return(0);
	return(1);
}
    5e18:	08 95       	ret

00005e1a <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    5e1a:	1f 92       	push	r1
    5e1c:	0f 92       	push	r0
    5e1e:	0f b6       	in	r0, 0x3f	; 63
    5e20:	0f 92       	push	r0
    5e22:	11 24       	eor	r1, r1
    5e24:	0b b6       	in	r0, 0x3b	; 59
    5e26:	0f 92       	push	r0
    5e28:	2f 93       	push	r18
    5e2a:	3f 93       	push	r19
    5e2c:	4f 93       	push	r20
    5e2e:	5f 93       	push	r21
    5e30:	6f 93       	push	r22
    5e32:	7f 93       	push	r23
    5e34:	8f 93       	push	r24
    5e36:	9f 93       	push	r25
    5e38:	af 93       	push	r26
    5e3a:	bf 93       	push	r27
    5e3c:	cf 93       	push	r28
    5e3e:	ef 93       	push	r30
    5e40:	ff 93       	push	r31
	i2c_op_t *o;
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    5e42:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	if(!i2c.enable || i2c.done)
    5e46:	80 91 77 17 	lds	r24, 0x1777	; 0x801777 <i2c>
    5e4a:	88 23       	and	r24, r24
    5e4c:	21 f0       	breq	.+8      	; 0x5e56 <__vector_26+0x3c>
    5e4e:	80 91 79 17 	lds	r24, 0x1779	; 0x801779 <i2c+0x2>
    5e52:	88 23       	and	r24, r24
    5e54:	11 f0       	breq	.+4      	; 0x5e5a <__vector_26+0x40>
	{
		// TWI Enable
		// TWI Interrupt Disable
		// TWI Interrupt Clear
		// TWI SEND STOP
		TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    5e56:	84 e9       	ldi	r24, 0x94	; 148
    5e58:	7c c0       	rjmp	.+248    	; 0x5f52 <__vector_26+0x138>
		return;
	}
	
	// Program error - should NEVER happen
	if(!i2c_check_op(i2c.ind) )
    5e5a:	80 91 78 17 	lds	r24, 0x1778	; 0x801778 <i2c+0x1>
    5e5e:	37 de       	rcall	.-914    	; 0x5ace <i2c_check_op>
    5e60:	81 11       	cpse	r24, r1
    5e62:	08 c0       	rjmp	.+16     	; 0x5e74 <__vector_26+0x5a>
	{
		i2c.done = 1;
    5e64:	81 e0       	ldi	r24, 0x01	; 1
    5e66:	80 93 79 17 	sts	0x1779, r24	; 0x801779 <i2c+0x2>
		i2c.enable = 0;
    5e6a:	10 92 77 17 	sts	0x1777, r1	; 0x801777 <i2c>
		i2c.error = 1;
    5e6e:	80 93 7a 17 	sts	0x177A, r24	; 0x80177a <i2c+0x3>
    5e72:	8c c0       	rjmp	.+280    	; 0x5f8c <__vector_26+0x172>
		i2c_next_op();
		return;
	}

	// Get current Operation
	o = i2c_op[i2c.ind];
    5e74:	e0 91 78 17 	lds	r30, 0x1778	; 0x801778 <i2c+0x1>
    5e78:	f0 e0       	ldi	r31, 0x00	; 0
    5e7a:	ee 0f       	add	r30, r30
    5e7c:	ff 1f       	adc	r31, r31
    5e7e:	e9 5a       	subi	r30, 0xA9	; 169
    5e80:	f8 4e       	sbci	r31, 0xE8	; 232
    5e82:	01 90       	ld	r0, Z+
    5e84:	f0 81       	ld	r31, Z
    5e86:	e0 2d       	mov	r30, r0

	// Program error - these conditions should NEVER happen
	if(!o->enable || o->done)
    5e88:	81 81       	ldd	r24, Z+1	; 0x01
    5e8a:	88 23       	and	r24, r24
    5e8c:	19 f0       	breq	.+6      	; 0x5e94 <__vector_26+0x7a>
    5e8e:	82 81       	ldd	r24, Z+2	; 0x02
    5e90:	88 23       	and	r24, r24
    5e92:	31 f0       	breq	.+12     	; 0x5ea0 <__vector_26+0x86>
	{
		o->done = 1;
    5e94:	91 e0       	ldi	r25, 0x01	; 1
    5e96:	92 83       	std	Z+2, r25	; 0x02
		o->enable = 0;
    5e98:	11 82       	std	Z+1, r1	; 0x01
		o->flags |= I2C_OP_ERROR;
    5e9a:	83 81       	ldd	r24, Z+3	; 0x03
    5e9c:	84 60       	ori	r24, 0x04	; 4
    5e9e:	73 c0       	rjmp	.+230    	; 0x5f86 <__vector_26+0x16c>
		i2c_next_op();
		return;
	}

	// Master Receiver mode
	switch (status)
    5ea0:	8c 2f       	mov	r24, r28
    5ea2:	88 7f       	andi	r24, 0xF8	; 248
    5ea4:	80 33       	cpi	r24, 0x30	; 48
    5ea6:	09 f4       	brne	.+2      	; 0x5eaa <__vector_26+0x90>
    5ea8:	63 c0       	rjmp	.+198    	; 0x5f70 <__vector_26+0x156>
    5eaa:	70 f4       	brcc	.+28     	; 0x5ec8 <__vector_26+0xae>
    5eac:	88 31       	cpi	r24, 0x18	; 24
    5eae:	29 f1       	breq	.+74     	; 0x5efa <__vector_26+0xe0>
    5eb0:	28 f4       	brcc	.+10     	; 0x5ebc <__vector_26+0xa2>
    5eb2:	88 30       	cpi	r24, 0x08	; 8
    5eb4:	01 f1       	breq	.+64     	; 0x5ef6 <__vector_26+0xdc>
    5eb6:	80 31       	cpi	r24, 0x10	; 16
    5eb8:	f1 f0       	breq	.+60     	; 0x5ef6 <__vector_26+0xdc>
    5eba:	60 c0       	rjmp	.+192    	; 0x5f7c <__vector_26+0x162>
    5ebc:	80 32       	cpi	r24, 0x20	; 32
    5ebe:	09 f4       	brne	.+2      	; 0x5ec2 <__vector_26+0xa8>
    5ec0:	4b c0       	rjmp	.+150    	; 0x5f58 <__vector_26+0x13e>
    5ec2:	88 32       	cpi	r24, 0x28	; 40
    5ec4:	d1 f0       	breq	.+52     	; 0x5efa <__vector_26+0xe0>
    5ec6:	5a c0       	rjmp	.+180    	; 0x5f7c <__vector_26+0x162>
    5ec8:	88 34       	cpi	r24, 0x48	; 72
    5eca:	09 f4       	brne	.+2      	; 0x5ece <__vector_26+0xb4>
    5ecc:	4b c0       	rjmp	.+150    	; 0x5f64 <__vector_26+0x14a>
    5ece:	28 f4       	brcc	.+10     	; 0x5eda <__vector_26+0xc0>
    5ed0:	88 33       	cpi	r24, 0x38	; 56
    5ed2:	f1 f1       	breq	.+124    	; 0x5f50 <__vector_26+0x136>
    5ed4:	80 34       	cpi	r24, 0x40	; 64
    5ed6:	61 f1       	breq	.+88     	; 0x5f30 <__vector_26+0x116>
    5ed8:	51 c0       	rjmp	.+162    	; 0x5f7c <__vector_26+0x162>
    5eda:	80 35       	cpi	r24, 0x50	; 80
    5edc:	f1 f0       	breq	.+60     	; 0x5f1a <__vector_26+0x100>
    5ede:	88 35       	cpi	r24, 0x58	; 88
    5ee0:	09 f0       	breq	.+2      	; 0x5ee4 <__vector_26+0xca>
    5ee2:	4c c0       	rjmp	.+152    	; 0x5f7c <__vector_26+0x162>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			o->buf[o->ind] = TWDR;
    5ee4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5ee8:	97 81       	ldd	r25, Z+7	; 0x07
    5eea:	a0 85       	ldd	r26, Z+8	; 0x08
    5eec:	b1 85       	ldd	r27, Z+9	; 0x09
    5eee:	a9 0f       	add	r26, r25
    5ef0:	b1 1d       	adc	r27, r1
    5ef2:	8c 93       	st	X, r24
    5ef4:	29 c0       	rjmp	.+82     	; 0x5f48 <__vector_26+0x12e>
	// Master Receiver mode
	switch (status)
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			o->ind = 0;
    5ef6:	17 82       	std	Z+7, r1	; 0x07
    5ef8:	0c c0       	rjmp	.+24     	; 0x5f12 <__vector_26+0xf8>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (o->ind < o->len)
    5efa:	27 81       	ldd	r18, Z+7	; 0x07
    5efc:	86 81       	ldd	r24, Z+6	; 0x06
    5efe:	28 17       	cp	r18, r24
    5f00:	18 f5       	brcc	.+70     	; 0x5f48 <__vector_26+0x12e>
			{
				TWDR = o->buf[o->ind++];
    5f02:	80 85       	ldd	r24, Z+8	; 0x08
    5f04:	91 85       	ldd	r25, Z+9	; 0x09
    5f06:	31 e0       	ldi	r19, 0x01	; 1
    5f08:	32 0f       	add	r19, r18
    5f0a:	37 83       	std	Z+7, r19	; 0x07
    5f0c:	fc 01       	movw	r30, r24
    5f0e:	e2 0f       	add	r30, r18
    5f10:	f1 1d       	adc	r31, r1
    5f12:	80 81       	ld	r24, Z
    5f14:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5f18:	15 c0       	rjmp	.+42     	; 0x5f44 <__vector_26+0x12a>
				i2c_next_op();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			o->buf[o->ind++] = TWDR;
    5f1a:	a0 85       	ldd	r26, Z+8	; 0x08
    5f1c:	b1 85       	ldd	r27, Z+9	; 0x09
    5f1e:	87 81       	ldd	r24, Z+7	; 0x07
    5f20:	91 e0       	ldi	r25, 0x01	; 1
    5f22:	98 0f       	add	r25, r24
    5f24:	97 83       	std	Z+7, r25	; 0x07
    5f26:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5f2a:	a8 0f       	add	r26, r24
    5f2c:	b1 1d       	adc	r27, r1
    5f2e:	9c 93       	st	X, r25
			// Fall through
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((o->ind+1) < o->len)
    5f30:	87 81       	ldd	r24, Z+7	; 0x07
    5f32:	90 e0       	ldi	r25, 0x00	; 0
    5f34:	01 96       	adiw	r24, 0x01	; 1
    5f36:	26 81       	ldd	r18, Z+6	; 0x06
    5f38:	30 e0       	ldi	r19, 0x00	; 0
    5f3a:	82 17       	cp	r24, r18
    5f3c:	93 07       	cpc	r25, r19
    5f3e:	14 f4       	brge	.+4      	; 0x5f44 <__vector_26+0x12a>
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5f40:	85 ec       	ldi	r24, 0xC5	; 197
    5f42:	07 c0       	rjmp	.+14     	; 0x5f52 <__vector_26+0x138>
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5f44:	85 e8       	ldi	r24, 0x85	; 133
    5f46:	05 c0       	rjmp	.+10     	; 0x5f52 <__vector_26+0x138>
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			o->buf[o->ind] = TWDR;
			o->done = 1;
    5f48:	81 e0       	ldi	r24, 0x01	; 1
    5f4a:	82 83       	std	Z+2, r24	; 0x02
			o->enable = 0;
    5f4c:	11 82       	std	Z+1, r1	; 0x01
    5f4e:	1e c0       	rjmp	.+60     	; 0x5f8c <__vector_26+0x172>
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5f50:	85 ea       	ldi	r24, 0xA5	; 165
    5f52:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
    5f56:	1b c0       	rjmp	.+54     	; 0x5f8e <__vector_26+0x174>

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			o->done = 1;
    5f58:	91 e0       	ldi	r25, 0x01	; 1
    5f5a:	92 83       	std	Z+2, r25	; 0x02
			o->enable = 0;
    5f5c:	11 82       	std	Z+1, r1	; 0x01
			o->flags |= I2C_TW_MT_SLA_NACK;
    5f5e:	83 81       	ldd	r24, Z+3	; 0x03
    5f60:	88 60       	ori	r24, 0x08	; 8
    5f62:	11 c0       	rjmp	.+34     	; 0x5f86 <__vector_26+0x16c>
			i2c.error = 1;
			i2c_next_op();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			o->done = 1;
    5f64:	91 e0       	ldi	r25, 0x01	; 1
    5f66:	92 83       	std	Z+2, r25	; 0x02
			o->enable = 0;
    5f68:	11 82       	std	Z+1, r1	; 0x01
			o->flags |= I2C_TW_MR_SLA_NACK;
    5f6a:	83 81       	ldd	r24, Z+3	; 0x03
    5f6c:	80 61       	ori	r24, 0x10	; 16
    5f6e:	0b c0       	rjmp	.+22     	; 0x5f86 <__vector_26+0x16c>
			i2c.error = 1;
			i2c_next_op();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			o->done = 1;
    5f70:	91 e0       	ldi	r25, 0x01	; 1
    5f72:	92 83       	std	Z+2, r25	; 0x02
			o->enable = 0;
    5f74:	11 82       	std	Z+1, r1	; 0x01
			o->flags |= I2C_TW_MT_DATA_NACK;
    5f76:	83 81       	ldd	r24, Z+3	; 0x03
    5f78:	80 62       	ori	r24, 0x20	; 32
    5f7a:	05 c0       	rjmp	.+10     	; 0x5f86 <__vector_26+0x16c>
			i2c.error = 1;
			i2c_next_op();
			break;

		default:				// Error
			o->done = 1;
    5f7c:	91 e0       	ldi	r25, 0x01	; 1
    5f7e:	92 83       	std	Z+2, r25	; 0x02
			o->enable = 0;
    5f80:	11 82       	std	Z+1, r1	; 0x01
			// ERROR
			o->flags |= I2C_BUS_ERROR;
    5f82:	83 81       	ldd	r24, Z+3	; 0x03
    5f84:	80 64       	ori	r24, 0x40	; 64
    5f86:	83 83       	std	Z+3, r24	; 0x03
			i2c.error = 1;
    5f88:	90 93 7a 17 	sts	0x177A, r25	; 0x80177a <i2c+0x3>
			i2c_next_op();
    5f8c:	23 de       	rcall	.-954    	; 0x5bd4 <i2c_next_op>
			break;
	}
}
    5f8e:	ff 91       	pop	r31
    5f90:	ef 91       	pop	r30
    5f92:	cf 91       	pop	r28
    5f94:	bf 91       	pop	r27
    5f96:	af 91       	pop	r26
    5f98:	9f 91       	pop	r25
    5f9a:	8f 91       	pop	r24
    5f9c:	7f 91       	pop	r23
    5f9e:	6f 91       	pop	r22
    5fa0:	5f 91       	pop	r21
    5fa2:	4f 91       	pop	r20
    5fa4:	3f 91       	pop	r19
    5fa6:	2f 91       	pop	r18
    5fa8:	0f 90       	pop	r0
    5faa:	0b be       	out	0x3b, r0	; 59
    5fac:	0f 90       	pop	r0
    5fae:	0f be       	out	0x3f, r0	; 63
    5fb0:	0f 90       	pop	r0
    5fb2:	1f 90       	pop	r1
    5fb4:	18 95       	reti

00005fb6 <BINtoBCD>:
        return -1;
    }
    if(b & 8)
        return 0;
    return 1;
}
    5fb6:	6a e0       	ldi	r22, 0x0A	; 10
    5fb8:	0e 94 2f e2 	call	0x1c45e	; 0x1c45e <__udivmodqi4>
    5fbc:	82 95       	swap	r24
    5fbe:	80 7f       	andi	r24, 0xF0	; 240
    5fc0:	89 2b       	or	r24, r25
    5fc2:	08 95       	ret

00005fc4 <BCDtoBIN>:
    5fc4:	98 2f       	mov	r25, r24
    5fc6:	92 95       	swap	r25
    5fc8:	9f 70       	andi	r25, 0x0F	; 15
    5fca:	8f 70       	andi	r24, 0x0F	; 15
    5fcc:	2a e0       	ldi	r18, 0x0A	; 10
    5fce:	92 9f       	mul	r25, r18
    5fd0:	80 0d       	add	r24, r0
    5fd2:	11 24       	eor	r1, r1
    5fd4:	08 95       	ret

00005fd6 <rtc_run>:
///  - -1 = check run state.
///
/// @return  run state 0/1 on success.
/// @return -1 on error.
int rtc_run(int run)
{
    5fd6:	cf 92       	push	r12
    5fd8:	df 92       	push	r13
    5fda:	ef 92       	push	r14
    5fdc:	0f 93       	push	r16
    5fde:	1f 93       	push	r17
    5fe0:	cf 93       	push	r28
    5fe2:	df 93       	push	r29
    5fe4:	00 d0       	rcall	.+0      	; 0x5fe6 <rtc_run+0x10>
    5fe6:	00 d0       	rcall	.+0      	; 0x5fe8 <rtc_run+0x12>
    5fe8:	00 d0       	rcall	.+0      	; 0x5fea <rtc_run+0x14>
    5fea:	cd b7       	in	r28, 0x3d	; 61
    5fec:	de b7       	in	r29, 0x3e	; 62
    5fee:	6c 01       	movw	r12, r24
    uint8_t  WriteAddress;
    uint8_t  ReadAddress;
    uint8_t b = 0;
    5ff0:	1c 82       	std	Y+4, r1	; 0x04

    ReadAddress = 0;
    5ff2:	1d 82       	std	Y+5, r1	; 0x05
    if (TWI_ReadPacket(DS1307_R, RTC_TIMEOUT, &ReadAddress, sizeof(ReadAddress),
    5ff4:	ee 24       	eor	r14, r14
    5ff6:	e3 94       	inc	r14
    5ff8:	8e 01       	movw	r16, r28
    5ffa:	0c 5f       	subi	r16, 0xFC	; 252
    5ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    5ffe:	21 e0       	ldi	r18, 0x01	; 1
    6000:	ae 01       	movw	r20, r28
    6002:	4b 5f       	subi	r20, 0xFB	; 251
    6004:	5f 4f       	sbci	r21, 0xFF	; 255
    6006:	62 e3       	ldi	r22, 0x32	; 50
    6008:	81 ed       	ldi	r24, 0xD1	; 209
    600a:	f2 dc       	rcall	.-1564   	; 0x59f0 <TWI_ReadPacket>
    600c:	88 23       	and	r24, r24
    600e:	19 f0       	breq	.+6      	; 0x6016 <rtc_run+0x40>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run read status error\n");
    6010:	8d e1       	ldi	r24, 0x1D	; 29
    6012:	95 e0       	ldi	r25, 0x05	; 5
    6014:	2a c0       	rjmp	.+84     	; 0x606a <rtc_run+0x94>
    6016:	8c 81       	ldd	r24, Y+4	; 0x04
        return -1;
    }

    if(run == -1)
    6018:	ff ef       	ldi	r31, 0xFF	; 255
    601a:	cf 16       	cp	r12, r31
    601c:	df 06       	cpc	r13, r31
    601e:	59 f4       	brne	.+22     	; 0x6036 <rtc_run+0x60>
        return ((b & 0x80) ? 0 : 1);
    6020:	08 2e       	mov	r0, r24
    6022:	00 0c       	add	r0, r0
    6024:	99 0b       	sbc	r25, r25
    6026:	80 95       	com	r24
    6028:	90 95       	com	r25
    602a:	89 2f       	mov	r24, r25
    602c:	88 1f       	adc	r24, r24
    602e:	88 27       	eor	r24, r24
    6030:	88 1f       	adc	r24, r24
    6032:	90 e0       	ldi	r25, 0x00	; 0
    6034:	26 c0       	rjmp	.+76     	; 0x6082 <rtc_run+0xac>

    b = ( b  & 0x7f) | (run ? 0 : 0x80);
    6036:	8f 77       	andi	r24, 0x7F	; 127
    6038:	c1 14       	cp	r12, r1
    603a:	d1 04       	cpc	r13, r1
    603c:	11 f4       	brne	.+4      	; 0x6042 <rtc_run+0x6c>
    603e:	90 e8       	ldi	r25, 0x80	; 128
    6040:	01 c0       	rjmp	.+2      	; 0x6044 <rtc_run+0x6e>
    6042:	90 e0       	ldi	r25, 0x00	; 0
    6044:	89 2b       	or	r24, r25
    6046:	8c 83       	std	Y+4, r24	; 0x04

    WriteAddress = 0;
    6048:	1e 82       	std	Y+6, r1	; 0x06
    if (TWI_WritePacket(DS1307_W, RTC_TIMEOUT, &WriteAddress, sizeof(WriteAddress),
    604a:	ee 24       	eor	r14, r14
    604c:	e3 94       	inc	r14
    604e:	8e 01       	movw	r16, r28
    6050:	0c 5f       	subi	r16, 0xFC	; 252
    6052:	1f 4f       	sbci	r17, 0xFF	; 255
    6054:	21 e0       	ldi	r18, 0x01	; 1
    6056:	ae 01       	movw	r20, r28
    6058:	4a 5f       	subi	r20, 0xFA	; 250
    605a:	5f 4f       	sbci	r21, 0xFF	; 255
    605c:	62 e3       	ldi	r22, 0x32	; 50
    605e:	80 ed       	ldi	r24, 0xD0	; 208
    6060:	08 dd       	rcall	.-1520   	; 0x5a72 <TWI_WritePacket>
    6062:	88 23       	and	r24, r24
    6064:	69 f0       	breq	.+26     	; 0x6080 <rtc_run+0xaa>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run - write status error\n");
    6066:	8f ef       	ldi	r24, 0xFF	; 255
    6068:	94 e0       	ldi	r25, 0x04	; 4
    606a:	a0 e0       	ldi	r26, 0x00	; 0
    606c:	ed b7       	in	r30, 0x3d	; 61
    606e:	fe b7       	in	r31, 0x3e	; 62
    6070:	81 83       	std	Z+1, r24	; 0x01
    6072:	92 83       	std	Z+2, r25	; 0x02
    6074:	a3 83       	std	Z+3, r26	; 0x03
    6076:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        return(-1);
    607a:	8f ef       	ldi	r24, 0xFF	; 255
    607c:	9f ef       	ldi	r25, 0xFF	; 255
    607e:	01 c0       	rjmp	.+2      	; 0x6082 <rtc_run+0xac>
    6080:	c6 01       	movw	r24, r12
    }
    return(run);
}
    6082:	26 96       	adiw	r28, 0x06	; 6
    6084:	0f b6       	in	r0, 0x3f	; 63
    6086:	f8 94       	cli
    6088:	de bf       	out	0x3e, r29	; 62
    608a:	0f be       	out	0x3f, r0	; 63
    608c:	cd bf       	out	0x3d, r28	; 61
    608e:	df 91       	pop	r29
    6090:	cf 91       	pop	r28
    6092:	1f 91       	pop	r17
    6094:	0f 91       	pop	r16
    6096:	ef 90       	pop	r14
    6098:	df 90       	pop	r13
    609a:	cf 90       	pop	r12
    609c:	08 95       	ret

0000609e <rtc_write>:
/// @param[in] t: POSIX struct tm * time to set.
///
/// @return 1 on sucess.
/// @return 0 on fail.
uint8_t rtc_write(tm_t *t)
{
    609e:	ef 92       	push	r14
    60a0:	0f 93       	push	r16
    60a2:	1f 93       	push	r17
    60a4:	cf 93       	push	r28
    60a6:	df 93       	push	r29
    60a8:	cd b7       	in	r28, 0x3d	; 61
    60aa:	de b7       	in	r29, 0x3e	; 62
    60ac:	2c 97       	sbiw	r28, 0x0c	; 12
    60ae:	0f b6       	in	r0, 0x3f	; 63
    60b0:	f8 94       	cli
    60b2:	de bf       	out	0x3e, r29	; 62
    60b4:	0f be       	out	0x3f, r0	; 63
    60b6:	cd bf       	out	0x3d, r28	; 61
    60b8:	8c 01       	movw	r16, r24
    uint8_t buf[8];
    uint8_t WriteAddress;

    buf[0] =  BINtoBCD(t->tm_sec) & 0x7f;
    60ba:	fc 01       	movw	r30, r24
    60bc:	80 81       	ld	r24, Z
    60be:	7b df       	rcall	.-266    	; 0x5fb6 <BINtoBCD>
    60c0:	8f 77       	andi	r24, 0x7F	; 127
    60c2:	8c 83       	std	Y+4, r24	; 0x04
    buf[1] =  BINtoBCD(t->tm_min) & 0x7f;
    60c4:	f8 01       	movw	r30, r16
    60c6:	82 81       	ldd	r24, Z+2	; 0x02
    60c8:	76 df       	rcall	.-276    	; 0x5fb6 <BINtoBCD>
    60ca:	8f 77       	andi	r24, 0x7F	; 127
    buf[2] =  BINtoBCD(t->tm_hour) & 0x3f;
    60cc:	8d 83       	std	Y+5, r24	; 0x05
    60ce:	f8 01       	movw	r30, r16
    60d0:	84 81       	ldd	r24, Z+4	; 0x04
    60d2:	71 df       	rcall	.-286    	; 0x5fb6 <BINtoBCD>
    60d4:	8f 73       	andi	r24, 0x3F	; 63
    buf[3] =  ((t->tm_wday & 7) + 1) & 0x0f;
    60d6:	8e 83       	std	Y+6, r24	; 0x06
    60d8:	f8 01       	movw	r30, r16
    60da:	84 85       	ldd	r24, Z+12	; 0x0c
    60dc:	87 70       	andi	r24, 0x07	; 7
    buf[4] =  BINtoBCD(t->tm_mday ) & 0x3f;
    60de:	8f 5f       	subi	r24, 0xFF	; 255
    60e0:	8f 83       	std	Y+7, r24	; 0x07
    60e2:	86 81       	ldd	r24, Z+6	; 0x06
    60e4:	68 df       	rcall	.-304    	; 0x5fb6 <BINtoBCD>
    buf[5] =  BINtoBCD(t->tm_mon + 1) & 0x1f;
    60e6:	8f 73       	andi	r24, 0x3F	; 63
    60e8:	88 87       	std	Y+8, r24	; 0x08
    60ea:	f8 01       	movw	r30, r16
    60ec:	80 85       	ldd	r24, Z+8	; 0x08
    60ee:	8f 5f       	subi	r24, 0xFF	; 255
    60f0:	62 df       	rcall	.-316    	; 0x5fb6 <BINtoBCD>
    buf[6] =  BINtoBCD(t->tm_year - 100) & 0xff;  // 2000 = 0
    60f2:	8f 71       	andi	r24, 0x1F	; 31
    60f4:	89 87       	std	Y+9, r24	; 0x09
    60f6:	f8 01       	movw	r30, r16
    60f8:	82 85       	ldd	r24, Z+10	; 0x0a
    60fa:	84 56       	subi	r24, 0x64	; 100
    60fc:	5c df       	rcall	.-328    	; 0x5fb6 <BINtoBCD>
    buf[7] = 0x93;                                // 32khz, out square wave
    60fe:	8a 87       	std	Y+10, r24	; 0x0a
    6100:	83 e9       	ldi	r24, 0x93	; 147
    for(i=0;i<7;++i)
        printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    WriteAddress = 0;
    6102:	8b 87       	std	Y+11, r24	; 0x0b
    if (TWI_WritePacket(DS1307_W, RTC_TIMEOUT, &WriteAddress, sizeof(WriteAddress),
    6104:	1c 86       	std	Y+12, r1	; 0x0c
    6106:	88 e0       	ldi	r24, 0x08	; 8
    6108:	e8 2e       	mov	r14, r24
    610a:	8e 01       	movw	r16, r28
    610c:	0c 5f       	subi	r16, 0xFC	; 252
    610e:	1f 4f       	sbci	r17, 0xFF	; 255
    6110:	21 e0       	ldi	r18, 0x01	; 1
    6112:	ae 01       	movw	r20, r28
    6114:	44 5f       	subi	r20, 0xF4	; 244
    6116:	5f 4f       	sbci	r21, 0xFF	; 255
    6118:	62 e3       	ldi	r22, 0x32	; 50
    611a:	80 ed       	ldi	r24, 0xD0	; 208
    611c:	aa dc       	rcall	.-1708   	; 0x5a72 <TWI_WritePacket>
    611e:	88 23       	and	r24, r24
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_write error\n");
    6120:	61 f0       	breq	.+24     	; 0x613a <rtc_write+0x9c>
    6122:	80 ed       	ldi	r24, 0xD0	; 208
    6124:	94 e0       	ldi	r25, 0x04	; 4
    6126:	a0 e0       	ldi	r26, 0x00	; 0
    6128:	ed b7       	in	r30, 0x3d	; 61
    612a:	fe b7       	in	r31, 0x3e	; 62
    612c:	81 83       	std	Z+1, r24	; 0x01
    612e:	92 83       	std	Z+2, r25	; 0x02
    6130:	a3 83       	std	Z+3, r26	; 0x03
    6132:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        return(0);
    6136:	80 e0       	ldi	r24, 0x00	; 0
    }

    return(1);
    6138:	01 c0       	rjmp	.+2      	; 0x613c <rtc_write+0x9e>
}
    613a:	81 e0       	ldi	r24, 0x01	; 1
    613c:	2c 96       	adiw	r28, 0x0c	; 12
    613e:	0f b6       	in	r0, 0x3f	; 63
    6140:	f8 94       	cli
    6142:	de bf       	out	0x3e, r29	; 62
    6144:	0f be       	out	0x3f, r0	; 63
    6146:	cd bf       	out	0x3d, r28	; 61
    6148:	df 91       	pop	r29
    614a:	cf 91       	pop	r28
    614c:	1f 91       	pop	r17
    614e:	0f 91       	pop	r16
    6150:	ef 90       	pop	r14
    6152:	08 95       	ret

00006154 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  1 on success.
/// @return 0 on fail.
uint8_t rtc_init (int force, time_t seconds)
{
    6154:	a7 e0       	ldi	r26, 0x07	; 7
    6156:	b0 e0       	ldi	r27, 0x00	; 0
    6158:	e0 eb       	ldi	r30, 0xB0	; 176
    615a:	f0 e3       	ldi	r31, 0x30	; 48
    615c:	0c 94 dd e2 	jmp	0x1c5ba	; 0x1c5ba <__prologue_saves__+0x1c>
    6160:	8c 01       	movw	r16, r24
    6162:	4c 83       	std	Y+4, r20	; 0x04
    6164:	5d 83       	std	Y+5, r21	; 0x05
    6166:	6e 83       	std	Y+6, r22	; 0x06
    6168:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 100000));
    616a:	61 e1       	ldi	r22, 0x11	; 17
    616c:	81 e0       	ldi	r24, 0x01	; 1
    616e:	a2 db       	rcall	.-2236   	; 0x58b4 <TWI_Init>

    if(!force)
    6170:	01 15       	cp	r16, r1
    6172:	11 05       	cpc	r17, r1
    6174:	d9 f4       	brne	.+54     	; 0x61ac <rtc_init+0x58>
    {
        state = rtc_run(-1);
    6176:	8f ef       	ldi	r24, 0xFF	; 255
    6178:	9f ef       	ldi	r25, 0xFF	; 255
    617a:	2d df       	rcall	.-422    	; 0x5fd6 <rtc_run>
        if(state < 0)
    617c:	87 ff       	sbrs	r24, 7
    617e:	06 c0       	rjmp	.+12     	; 0x618c <rtc_init+0x38>
        {
            rtc_ok = 0;
    6180:	10 92 eb 19 	sts	0x19EB, r1	; 0x8019eb <rtc_ok+0x1>
    6184:	10 92 ea 19 	sts	0x19EA, r1	; 0x8019ea <rtc_ok>
            return 0;
    6188:	10 e0       	ldi	r17, 0x00	; 0
    618a:	2a c0       	rjmp	.+84     	; 0x61e0 <rtc_init+0x8c>
        }
        if(state == 0)                            // stopped
    618c:	88 23       	and	r24, r24
    618e:	71 f0       	breq	.+28     	; 0x61ac <rtc_init+0x58>
                return(0);
            }
        }
#endif

        if(rtc_run(1) < 0)                        // START RTC
    6190:	05 c0       	rjmp	.+10     	; 0x619c <rtc_init+0x48>
    6192:	81 e0       	ldi	r24, 0x01	; 1
    6194:	90 e0       	ldi	r25, 0x00	; 0
    6196:	1f df       	rcall	.-450    	; 0x5fd6 <rtc_run>
    6198:	97 fd       	sbrc	r25, 7
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    619a:	f2 cf       	rjmp	.-28     	; 0x6180 <rtc_init+0x2c>
    619c:	81 e0       	ldi	r24, 0x01	; 1
    619e:	90 e0       	ldi	r25, 0x00	; 0
    61a0:	90 93 eb 19 	sts	0x19EB, r25	; 0x8019eb <rtc_ok+0x1>
    61a4:	80 93 ea 19 	sts	0x19EA, r24	; 0x8019ea <rtc_ok>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    61a8:	11 e0       	ldi	r17, 0x01	; 1
    61aa:	1a c0       	rjmp	.+52     	; 0x61e0 <rtc_init+0x8c>
    61ac:	80 e0       	ldi	r24, 0x00	; 0
    61ae:	90 e0       	ldi	r25, 0x00	; 0
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
        tmp = gmtime(&seconds);
    61b0:	12 df       	rcall	.-476    	; 0x5fd6 <rtc_run>
    61b2:	97 fd       	sbrc	r25, 7
    61b4:	e5 cf       	rjmp	.-54     	; 0x6180 <rtc_init+0x2c>
    61b6:	ce 01       	movw	r24, r28
        if(!rtc_write(tmp))
    61b8:	04 96       	adiw	r24, 0x04	; 4
    61ba:	02 d7       	rcall	.+3588   	; 0x6fc0 <gmtime>
    61bc:	70 df       	rcall	.-288    	; 0x609e <rtc_write>
    61be:	18 2f       	mov	r17, r24
    61c0:	81 11       	cpse	r24, r1
        {
            printf("rtc_init  write epoch failed\n");
    61c2:	e7 cf       	rjmp	.-50     	; 0x6192 <rtc_init+0x3e>
    61c4:	81 ee       	ldi	r24, 0xE1	; 225
    61c6:	94 e0       	ldi	r25, 0x04	; 4
    61c8:	a0 e0       	ldi	r26, 0x00	; 0
    61ca:	ed b7       	in	r30, 0x3d	; 61
    61cc:	fe b7       	in	r31, 0x3e	; 62
    61ce:	81 83       	std	Z+1, r24	; 0x01
    61d0:	92 83       	std	Z+2, r25	; 0x02
    61d2:	a3 83       	std	Z+3, r26	; 0x03
    61d4:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            rtc_ok = 0;
    61d8:	10 92 eb 19 	sts	0x19EB, r1	; 0x8019eb <rtc_ok+0x1>
    61dc:	10 92 ea 19 	sts	0x19EA, r1	; 0x8019ea <rtc_ok>
            return 0;
        }
    }
    rtc_ok = 1;
    return 1;
}
    61e0:	81 2f       	mov	r24, r17
    61e2:	27 96       	adiw	r28, 0x07	; 7
    61e4:	e4 e0       	ldi	r30, 0x04	; 4
    61e6:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

000061ea <rtc_read>:
///
/// @param[out] t: struct tm * POSIX time returned.
/// @return  1 on sucess.
/// @return 0 on fail.
uint8_t rtc_read(tm_t *t)
{
    61ea:	cf 92       	push	r12
    61ec:	df 92       	push	r13
    61ee:	ef 92       	push	r14
    61f0:	0f 93       	push	r16
    61f2:	1f 93       	push	r17
    61f4:	cf 93       	push	r28
    61f6:	df 93       	push	r29
    61f8:	cd b7       	in	r28, 0x3d	; 61
    61fa:	de b7       	in	r29, 0x3e	; 62
    61fc:	2c 97       	sbiw	r28, 0x0c	; 12
    61fe:	0f b6       	in	r0, 0x3f	; 63
    6200:	f8 94       	cli
    6202:	de bf       	out	0x3e, r29	; 62
    6204:	0f be       	out	0x3f, r0	; 63
    6206:	cd bf       	out	0x3d, r28	; 61
    6208:	6c 01       	movw	r12, r24
    uint8_t buf[8];

    uint8_t ReadAddress = 0;
    620a:	1c 86       	std	Y+12, r1	; 0x0c

    ReadAddress = 0;
    if (TWI_ReadPacket(DS1307_R, RTC_TIMEOUT, &ReadAddress, sizeof(ReadAddress),
    620c:	88 e0       	ldi	r24, 0x08	; 8
    620e:	e8 2e       	mov	r14, r24
    6210:	8e 01       	movw	r16, r28
    6212:	0c 5f       	subi	r16, 0xFC	; 252
    6214:	1f 4f       	sbci	r17, 0xFF	; 255
    6216:	21 e0       	ldi	r18, 0x01	; 1
    6218:	ae 01       	movw	r20, r28
    621a:	44 5f       	subi	r20, 0xF4	; 244
    621c:	5f 4f       	sbci	r21, 0xFF	; 255
    621e:	62 e3       	ldi	r22, 0x32	; 50
    6220:	81 ed       	ldi	r24, 0xD1	; 209
    6222:	e6 db       	rcall	.-2100   	; 0x59f0 <TWI_ReadPacket>
    6224:	88 23       	and	r24, r24
    6226:	61 f0       	breq	.+24     	; 0x6240 <rtc_read+0x56>
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_read error\n");
    6228:	80 ec       	ldi	r24, 0xC0	; 192
    622a:	94 e0       	ldi	r25, 0x04	; 4
    622c:	a0 e0       	ldi	r26, 0x00	; 0
    622e:	ed b7       	in	r30, 0x3d	; 61
    6230:	fe b7       	in	r31, 0x3e	; 62
    6232:	81 83       	std	Z+1, r24	; 0x01
    6234:	92 83       	std	Z+2, r25	; 0x02
    6236:	a3 83       	std	Z+3, r26	; 0x03
    6238:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        return 0;
    623c:	80 e0       	ldi	r24, 0x00	; 0
    623e:	33 c0       	rjmp	.+102    	; 0x62a6 <rtc_read+0xbc>
    for(i=0;i<7;++i)
        printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    t->tm_sec =   BCDtoBIN( buf[0] & 0x7f);
    6240:	8c 81       	ldd	r24, Y+4	; 0x04
    6242:	8f 77       	andi	r24, 0x7F	; 127
    6244:	bf de       	rcall	.-642    	; 0x5fc4 <BCDtoBIN>
    6246:	90 e0       	ldi	r25, 0x00	; 0
    6248:	f6 01       	movw	r30, r12
    624a:	91 83       	std	Z+1, r25	; 0x01
    t->tm_min =   BCDtoBIN( buf[1] & 0x7f);
    624c:	80 83       	st	Z, r24
    624e:	8d 81       	ldd	r24, Y+5	; 0x05
    6250:	8f 77       	andi	r24, 0x7F	; 127
    6252:	b8 de       	rcall	.-656    	; 0x5fc4 <BCDtoBIN>
    6254:	90 e0       	ldi	r25, 0x00	; 0
    6256:	f6 01       	movw	r30, r12
    t->tm_hour =  BCDtoBIN( buf[2] & 0x3f);
    6258:	93 83       	std	Z+3, r25	; 0x03
    625a:	82 83       	std	Z+2, r24	; 0x02
    625c:	8e 81       	ldd	r24, Y+6	; 0x06
    625e:	8f 73       	andi	r24, 0x3F	; 63
    6260:	b1 de       	rcall	.-670    	; 0x5fc4 <BCDtoBIN>
    6262:	90 e0       	ldi	r25, 0x00	; 0
    6264:	f6 01       	movw	r30, r12
    6266:	95 83       	std	Z+5, r25	; 0x05
    t->tm_wday =  ( buf[3] & 0x07) - 1;
    6268:	84 83       	std	Z+4, r24	; 0x04
    626a:	8f 81       	ldd	r24, Y+7	; 0x07
    626c:	87 70       	andi	r24, 0x07	; 7
    626e:	90 e0       	ldi	r25, 0x00	; 0
    6270:	01 97       	sbiw	r24, 0x01	; 1
    t->tm_mday =  BCDtoBIN( buf[4] & 0x3f) ;
    6272:	95 87       	std	Z+13, r25	; 0x0d
    6274:	84 87       	std	Z+12, r24	; 0x0c
    6276:	88 85       	ldd	r24, Y+8	; 0x08
    6278:	8f 73       	andi	r24, 0x3F	; 63
    627a:	a4 de       	rcall	.-696    	; 0x5fc4 <BCDtoBIN>
    627c:	90 e0       	ldi	r25, 0x00	; 0
    627e:	f6 01       	movw	r30, r12
    t->tm_mon=    BCDtoBIN( buf[5] & 0x1f) - 1;
    6280:	97 83       	std	Z+7, r25	; 0x07
    6282:	86 83       	std	Z+6, r24	; 0x06
    6284:	89 85       	ldd	r24, Y+9	; 0x09
    6286:	8f 71       	andi	r24, 0x1F	; 31
    6288:	9d de       	rcall	.-710    	; 0x5fc4 <BCDtoBIN>
    628a:	90 e0       	ldi	r25, 0x00	; 0
    628c:	01 97       	sbiw	r24, 0x01	; 1
    628e:	f6 01       	movw	r30, r12
    t->tm_year =  BCDtoBIN( buf[6] & 0xff) + 100;
    6290:	91 87       	std	Z+9, r25	; 0x09
    6292:	80 87       	std	Z+8, r24	; 0x08
    6294:	8a 85       	ldd	r24, Y+10	; 0x0a
    6296:	96 de       	rcall	.-724    	; 0x5fc4 <BCDtoBIN>
    6298:	90 e0       	ldi	r25, 0x00	; 0
    629a:	8c 59       	subi	r24, 0x9C	; 156
    629c:	9f 4f       	sbci	r25, 0xFF	; 255
    629e:	f6 01       	movw	r30, r12
    62a0:	93 87       	std	Z+11, r25	; 0x0b
        t->tm_min,
        t->tm_sec,
        t->tm_wday);
#endif

    return 1;
    62a2:	82 87       	std	Z+10, r24	; 0x0a
}
    62a4:	81 e0       	ldi	r24, 0x01	; 1
    62a6:	2c 96       	adiw	r28, 0x0c	; 12
    62a8:	0f b6       	in	r0, 0x3f	; 63
    62aa:	f8 94       	cli
    62ac:	de bf       	out	0x3e, r29	; 62
    62ae:	0f be       	out	0x3f, r0	; 63
    62b0:	cd bf       	out	0x3d, r28	; 61
    62b2:	df 91       	pop	r29
    62b4:	cf 91       	pop	r28
    62b6:	1f 91       	pop	r17
    62b8:	0f 91       	pop	r16
    62ba:	ef 90       	pop	r14
    62bc:	df 90       	pop	r13
    62be:	cf 90       	pop	r12
    62c0:	08 95       	ret

000062c2 <islower>:
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    62c2:	9c 01       	movw	r18, r24
    62c4:	21 56       	subi	r18, 0x61	; 97
    62c6:	31 09       	sbc	r19, r1
    62c8:	81 e0       	ldi	r24, 0x01	; 1
    62ca:	90 e0       	ldi	r25, 0x00	; 0
    62cc:	2a 31       	cpi	r18, 0x1A	; 26
    62ce:	31 05       	cpc	r19, r1
    62d0:	10 f0       	brcs	.+4      	; 0x62d6 <islower+0x14>
    62d2:	80 e0       	ldi	r24, 0x00	; 0
    62d4:	90 e0       	ldi	r25, 0x00	; 0
    62d6:	08 95       	ret

000062d8 <toupper>:
    62d8:	cf 93       	push	r28
    62da:	df 93       	push	r29
    62dc:	ec 01       	movw	r28, r24
    62de:	f1 df       	rcall	.-30     	; 0x62c2 <islower>
    62e0:	89 2b       	or	r24, r25
    62e2:	19 f0       	breq	.+6      	; 0x62ea <toupper+0x12>
    62e4:	ce 01       	movw	r24, r28
    62e6:	80 97       	sbiw	r24, 0x20	; 32
    62e8:	01 c0       	rjmp	.+2      	; 0x62ec <toupper+0x14>
    62ea:	ce 01       	movw	r24, r28
    62ec:	df 91       	pop	r29
    62ee:	cf 91       	pop	r28
    62f0:	08 95       	ret

000062f2 <strcpy>:
    62f2:	fc 01       	movw	r30, r24
    62f4:	db 01       	movw	r26, r22
    62f6:	2d 91       	ld	r18, X+
    62f8:	bd 01       	movw	r22, r26
    62fa:	01 96       	adiw	r24, 0x01	; 1
    62fc:	22 23       	and	r18, r18
    62fe:	11 f0       	breq	.+4      	; 0x6304 <strcpy+0x12>
    6300:	20 83       	st	Z, r18
    6302:	f7 cf       	rjmp	.-18     	; 0x62f2 <strcpy>
    6304:	10 82       	st	Z, r1
    6306:	08 95       	ret

00006308 <strncpy>:
    6308:	db 01       	movw	r26, r22
    630a:	fc 01       	movw	r30, r24
    630c:	2d 91       	ld	r18, X+
    630e:	21 11       	cpse	r18, r1
    6310:	03 c0       	rjmp	.+6      	; 0x6318 <strncpy+0x10>
    6312:	4e 0f       	add	r20, r30
    6314:	5f 1f       	adc	r21, r31
    6316:	08 c0       	rjmp	.+16     	; 0x6328 <strncpy+0x20>
    6318:	41 15       	cp	r20, r1
    631a:	51 05       	cpc	r21, r1
    631c:	21 f0       	breq	.+8      	; 0x6326 <strncpy+0x1e>
    631e:	21 93       	st	Z+, r18
    6320:	41 50       	subi	r20, 0x01	; 1
    6322:	51 09       	sbc	r21, r1
    6324:	f3 cf       	rjmp	.-26     	; 0x630c <strncpy+0x4>
    6326:	08 95       	ret
    6328:	4e 17       	cp	r20, r30
    632a:	5f 07       	cpc	r21, r31
    632c:	11 f0       	breq	.+4      	; 0x6332 <strncpy+0x2a>
    632e:	11 92       	st	Z+, r1
    6330:	fb cf       	rjmp	.-10     	; 0x6328 <strncpy+0x20>
    6332:	08 95       	ret

00006334 <strcat>:
    6334:	cf 93       	push	r28
    6336:	df 93       	push	r29
    6338:	d8 2f       	mov	r29, r24
    633a:	c9 2f       	mov	r28, r25
    633c:	28 2f       	mov	r18, r24
    633e:	39 2f       	mov	r19, r25
    6340:	c9 01       	movw	r24, r18
    6342:	2f 5f       	subi	r18, 0xFF	; 255
    6344:	3f 4f       	sbci	r19, 0xFF	; 255
    6346:	fc 01       	movw	r30, r24
    6348:	40 81       	ld	r20, Z
    634a:	41 11       	cpse	r20, r1
    634c:	f9 cf       	rjmp	.-14     	; 0x6340 <strcat+0xc>
    634e:	d1 df       	rcall	.-94     	; 0x62f2 <strcpy>
    6350:	8d 2f       	mov	r24, r29
    6352:	9c 2f       	mov	r25, r28
    6354:	df 91       	pop	r29
    6356:	cf 91       	pop	r28
    6358:	08 95       	ret

0000635a <reverse>:
    635a:	fc 01       	movw	r30, r24
    635c:	01 90       	ld	r0, Z+
    635e:	00 20       	and	r0, r0
    6360:	e9 f7       	brne	.-6      	; 0x635c <reverse+0x2>
    6362:	31 97       	sbiw	r30, 0x01	; 1
    6364:	e8 1b       	sub	r30, r24
    6366:	f9 0b       	sbc	r31, r25
    6368:	af 01       	movw	r20, r30
    636a:	55 95       	asr	r21
    636c:	47 95       	ror	r20
    636e:	e8 0f       	add	r30, r24
    6370:	f9 1f       	adc	r31, r25
    6372:	dc 01       	movw	r26, r24
    6374:	9d 01       	movw	r18, r26
    6376:	28 1b       	sub	r18, r24
    6378:	39 0b       	sbc	r19, r25
    637a:	24 17       	cp	r18, r20
    637c:	35 07       	cpc	r19, r21
    637e:	2c f4       	brge	.+10     	; 0x638a <reverse+0x30>
    6380:	22 91       	ld	r18, -Z
    6382:	3c 91       	ld	r19, X
    6384:	30 83       	st	Z, r19
    6386:	2d 93       	st	X+, r18
    6388:	f5 cf       	rjmp	.-22     	; 0x6374 <reverse+0x1a>
    638a:	08 95       	ret

0000638c <strupper>:
    638c:	cf 93       	push	r28
    638e:	df 93       	push	r29
    6390:	ec 01       	movw	r28, r24
    6392:	88 81       	ld	r24, Y
    6394:	88 23       	and	r24, r24
    6396:	21 f0       	breq	.+8      	; 0x63a0 <strupper+0x14>
    6398:	90 e0       	ldi	r25, 0x00	; 0
    639a:	9e df       	rcall	.-196    	; 0x62d8 <toupper>
    639c:	89 93       	st	Y+, r24
    639e:	f9 cf       	rjmp	.-14     	; 0x6392 <strupper+0x6>
    63a0:	df 91       	pop	r29
    63a2:	cf 91       	pop	r28
    63a4:	08 95       	ret

000063a6 <strcmp>:
    63a6:	dc 01       	movw	r26, r24
    63a8:	fb 01       	movw	r30, r22
    63aa:	2d 91       	ld	r18, X+
    63ac:	41 91       	ld	r20, Z+
    63ae:	50 e0       	ldi	r21, 0x00	; 0
    63b0:	30 e0       	ldi	r19, 0x00	; 0
    63b2:	c9 01       	movw	r24, r18
    63b4:	84 1b       	sub	r24, r20
    63b6:	95 0b       	sbc	r25, r21
    63b8:	11 f4       	brne	.+4      	; 0x63be <strcmp+0x18>
    63ba:	45 2b       	or	r20, r21
    63bc:	b1 f7       	brne	.-20     	; 0x63aa <strcmp+0x4>
    63be:	08 95       	ret

000063c0 <strcasecmp>:
    63c0:	ef 92       	push	r14
    63c2:	ff 92       	push	r15
    63c4:	0f 93       	push	r16
    63c6:	1f 93       	push	r17
    63c8:	cf 93       	push	r28
    63ca:	df 93       	push	r29
    63cc:	7c 01       	movw	r14, r24
    63ce:	8b 01       	movw	r16, r22
    63d0:	f7 01       	movw	r30, r14
    63d2:	81 91       	ld	r24, Z+
    63d4:	7f 01       	movw	r14, r30
    63d6:	90 e0       	ldi	r25, 0x00	; 0
    63d8:	7f df       	rcall	.-258    	; 0x62d8 <toupper>
    63da:	ec 01       	movw	r28, r24
    63dc:	f8 01       	movw	r30, r16
    63de:	81 91       	ld	r24, Z+
    63e0:	8f 01       	movw	r16, r30
    63e2:	90 e0       	ldi	r25, 0x00	; 0
    63e4:	79 df       	rcall	.-270    	; 0x62d8 <toupper>
    63e6:	9c 01       	movw	r18, r24
    63e8:	ce 01       	movw	r24, r28
    63ea:	82 1b       	sub	r24, r18
    63ec:	93 0b       	sbc	r25, r19
    63ee:	11 f4       	brne	.+4      	; 0x63f4 <strcasecmp+0x34>
    63f0:	23 2b       	or	r18, r19
    63f2:	71 f7       	brne	.-36     	; 0x63d0 <strcasecmp+0x10>
    63f4:	cd b7       	in	r28, 0x3d	; 61
    63f6:	de b7       	in	r29, 0x3e	; 62
    63f8:	e6 e0       	ldi	r30, 0x06	; 6
    63fa:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

000063fe <strncasecmp>:
    63fe:	a0 e0       	ldi	r26, 0x00	; 0
    6400:	b0 e0       	ldi	r27, 0x00	; 0
    6402:	e5 e0       	ldi	r30, 0x05	; 5
    6404:	f2 e3       	ldi	r31, 0x32	; 50
    6406:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
    640a:	8c 01       	movw	r16, r24
    640c:	7b 01       	movw	r14, r22
    640e:	6c 01       	movw	r12, r24
    6410:	c4 0e       	add	r12, r20
    6412:	d5 1e       	adc	r13, r21
    6414:	0c 15       	cp	r16, r12
    6416:	1d 05       	cpc	r17, r13
    6418:	99 f0       	breq	.+38     	; 0x6440 <strncasecmp+0x42>
    641a:	f8 01       	movw	r30, r16
    641c:	81 91       	ld	r24, Z+
    641e:	8f 01       	movw	r16, r30
    6420:	90 e0       	ldi	r25, 0x00	; 0
    6422:	5a df       	rcall	.-332    	; 0x62d8 <toupper>
    6424:	ec 01       	movw	r28, r24
    6426:	f7 01       	movw	r30, r14
    6428:	81 91       	ld	r24, Z+
    642a:	7f 01       	movw	r14, r30
    642c:	90 e0       	ldi	r25, 0x00	; 0
    642e:	54 df       	rcall	.-344    	; 0x62d8 <toupper>
    6430:	9c 01       	movw	r18, r24
    6432:	ce 01       	movw	r24, r28
    6434:	82 1b       	sub	r24, r18
    6436:	93 0b       	sbc	r25, r19
    6438:	29 f4       	brne	.+10     	; 0x6444 <strncasecmp+0x46>
    643a:	23 2b       	or	r18, r19
    643c:	59 f7       	brne	.-42     	; 0x6414 <strncasecmp+0x16>
    643e:	02 c0       	rjmp	.+4      	; 0x6444 <strncasecmp+0x46>
    6440:	80 e0       	ldi	r24, 0x00	; 0
    6442:	90 e0       	ldi	r25, 0x00	; 0
    6444:	cd b7       	in	r28, 0x3d	; 61
    6446:	de b7       	in	r29, 0x3e	; 62
    6448:	e8 e0       	ldi	r30, 0x08	; 8
    644a:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

0000644e <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    644e:	0f 93       	push	r16
    6450:	1f 93       	push	r17
    6452:	cf 93       	push	r28
    6454:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    6456:	00 97       	sbiw	r24, 0x00	; 0
    6458:	99 f0       	breq	.+38     	; 0x6480 <stralloc+0x32>
    645a:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    645c:	fc 01       	movw	r30, r24
    645e:	01 90       	ld	r0, Z+
    6460:	00 20       	and	r0, r0
    6462:	e9 f7       	brne	.-6      	; 0x645e <stralloc+0x10>
    6464:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    6466:	61 e0       	ldi	r22, 0x01	; 1
    6468:	70 e0       	ldi	r23, 0x00	; 0
    646a:	8c 1b       	sub	r24, r28
    646c:	9d 0b       	sbc	r25, r29
    646e:	0e 94 8d 28 	call	0x511a	; 0x511a <safecalloc>
    6472:	8c 01       	movw	r16, r24
    if(!ptr)
    6474:	00 97       	sbiw	r24, 0x00	; 0
    6476:	21 f0       	breq	.+8      	; 0x6480 <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    6478:	be 01       	movw	r22, r28
    647a:	3b df       	rcall	.-394    	; 0x62f2 <strcpy>
    return(ptr);
    647c:	c8 01       	movw	r24, r16
    647e:	02 c0       	rjmp	.+4      	; 0x6484 <stralloc+0x36>
    6480:	80 e0       	ldi	r24, 0x00	; 0
    6482:	90 e0       	ldi	r25, 0x00	; 0
}
    6484:	df 91       	pop	r29
    6486:	cf 91       	pop	r28
    6488:	1f 91       	pop	r17
    648a:	0f 91       	pop	r16
    648c:	08 95       	ret

0000648e <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    648e:	00 d0       	rcall	.+0      	; 0x6490 <sep+0x2>
    6490:	1f 92       	push	r1
    6492:	8e e5       	ldi	r24, 0x5E	; 94
    6494:	95 e0       	ldi	r25, 0x05	; 5
    6496:	a0 e0       	ldi	r26, 0x00	; 0
    6498:	ed b7       	in	r30, 0x3d	; 61
    649a:	fe b7       	in	r31, 0x3e	; 62
    649c:	81 83       	std	Z+1, r24	; 0x01
    649e:	92 83       	std	Z+2, r25	; 0x02
    64a0:	a3 83       	std	Z+3, r26	; 0x03
    64a2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    64a6:	0f 90       	pop	r0
    64a8:	0f 90       	pop	r0
    64aa:	0f 90       	pop	r0
    64ac:	08 95       	ret

000064ae <trim_tail>:
    64ae:	00 97       	sbiw	r24, 0x00	; 0
    64b0:	69 f0       	breq	.+26     	; 0x64cc <trim_tail+0x1e>
    64b2:	fc 01       	movw	r30, r24
    64b4:	01 90       	ld	r0, Z+
    64b6:	00 20       	and	r0, r0
    64b8:	e9 f7       	brne	.-6      	; 0x64b4 <trim_tail+0x6>
    64ba:	31 97       	sbiw	r30, 0x01	; 1
    64bc:	e8 17       	cp	r30, r24
    64be:	f9 07       	cpc	r31, r25
    64c0:	29 f0       	breq	.+10     	; 0x64cc <trim_tail+0x1e>
    64c2:	22 91       	ld	r18, -Z
    64c4:	21 32       	cpi	r18, 0x21	; 33
    64c6:	10 f4       	brcc	.+4      	; 0x64cc <trim_tail+0x1e>
    64c8:	10 82       	st	Z, r1
    64ca:	f8 cf       	rjmp	.-16     	; 0x64bc <trim_tail+0xe>
    64cc:	08 95       	ret

000064ce <skipspaces>:
    64ce:	00 97       	sbiw	r24, 0x00	; 0
    64d0:	39 f0       	breq	.+14     	; 0x64e0 <skipspaces+0x12>
    64d2:	fc 01       	movw	r30, r24
    64d4:	cf 01       	movw	r24, r30
    64d6:	21 91       	ld	r18, Z+
    64d8:	20 32       	cpi	r18, 0x20	; 32
    64da:	e1 f3       	breq	.-8      	; 0x64d4 <skipspaces+0x6>
    64dc:	29 30       	cpi	r18, 0x09	; 9
    64de:	d1 f3       	breq	.-12     	; 0x64d4 <skipspaces+0x6>
    64e0:	08 95       	ret

000064e2 <MATCH>:
    64e2:	cf 93       	push	r28
    64e4:	df 93       	push	r29
    64e6:	fb 01       	movw	r30, r22
    64e8:	01 90       	ld	r0, Z+
    64ea:	00 20       	and	r0, r0
    64ec:	e9 f7       	brne	.-6      	; 0x64e8 <MATCH+0x6>
    64ee:	31 97       	sbiw	r30, 0x01	; 1
    64f0:	ef 01       	movw	r28, r30
    64f2:	c6 1b       	sub	r28, r22
    64f4:	d7 0b       	sbc	r29, r23
    64f6:	57 df       	rcall	.-338    	; 0x63a6 <strcmp>
    64f8:	89 2b       	or	r24, r25
    64fa:	11 f4       	brne	.+4      	; 0x6500 <MATCH+0x1e>
    64fc:	ce 01       	movw	r24, r28
    64fe:	02 c0       	rjmp	.+4      	; 0x6504 <MATCH+0x22>
    6500:	80 e0       	ldi	r24, 0x00	; 0
    6502:	90 e0       	ldi	r25, 0x00	; 0
    6504:	df 91       	pop	r29
    6506:	cf 91       	pop	r28
    6508:	08 95       	ret

0000650a <MATCHI>:
    650a:	cf 93       	push	r28
    650c:	df 93       	push	r29
    650e:	fb 01       	movw	r30, r22
    6510:	01 90       	ld	r0, Z+
    6512:	00 20       	and	r0, r0
    6514:	e9 f7       	brne	.-6      	; 0x6510 <MATCHI+0x6>
    6516:	31 97       	sbiw	r30, 0x01	; 1
    6518:	ef 01       	movw	r28, r30
    651a:	c6 1b       	sub	r28, r22
    651c:	d7 0b       	sbc	r29, r23
    651e:	50 df       	rcall	.-352    	; 0x63c0 <strcasecmp>
    6520:	89 2b       	or	r24, r25
    6522:	11 f4       	brne	.+4      	; 0x6528 <MATCHI+0x1e>
    6524:	ce 01       	movw	r24, r28
    6526:	02 c0       	rjmp	.+4      	; 0x652c <MATCHI+0x22>
    6528:	80 e0       	ldi	r24, 0x00	; 0
    652a:	90 e0       	ldi	r25, 0x00	; 0
    652c:	df 91       	pop	r29
    652e:	cf 91       	pop	r28
    6530:	08 95       	ret

00006532 <MATCHARGS>:
    6532:	a9 e0       	ldi	r26, 0x09	; 9
    6534:	b0 e0       	ldi	r27, 0x00	; 0
    6536:	ef e9       	ldi	r30, 0x9F	; 159
    6538:	f2 e3       	ldi	r31, 0x32	; 50
    653a:	0c 94 db e2 	jmp	0x1c5b6	; 0x1c5b6 <__prologue_saves__+0x18>
    653e:	eb 01       	movw	r28, r22
    6540:	8a 01       	movw	r16, r20
    6542:	79 01       	movw	r14, r18
    6544:	e2 df       	rcall	.-60     	; 0x650a <MATCHI>
    6546:	00 97       	sbiw	r24, 0x00	; 0
    6548:	c1 f0       	breq	.+48     	; 0x657a <MATCHARGS+0x48>
    654a:	e0 16       	cp	r14, r16
    654c:	f1 06       	cpc	r15, r17
    654e:	9c f4       	brge	.+38     	; 0x6576 <MATCHARGS+0x44>
    6550:	ed b7       	in	r30, 0x3d	; 61
    6552:	fe b7       	in	r31, 0x3e	; 62
    6554:	f1 86       	std	Z+9, r15	; 0x09
    6556:	e0 86       	std	Z+8, r14	; 0x08
    6558:	17 83       	std	Z+7, r17	; 0x07
    655a:	06 83       	std	Z+6, r16	; 0x06
    655c:	d5 83       	std	Z+5, r29	; 0x05
    655e:	c4 83       	std	Z+4, r28	; 0x04
    6560:	88 e3       	ldi	r24, 0x38	; 56
    6562:	95 e0       	ldi	r25, 0x05	; 5
    6564:	a0 e0       	ldi	r26, 0x00	; 0
    6566:	81 83       	std	Z+1, r24	; 0x01
    6568:	92 83       	std	Z+2, r25	; 0x02
    656a:	a3 83       	std	Z+3, r26	; 0x03
    656c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    6570:	80 e0       	ldi	r24, 0x00	; 0
    6572:	90 e0       	ldi	r25, 0x00	; 0
    6574:	02 c0       	rjmp	.+4      	; 0x657a <MATCHARGS+0x48>
    6576:	81 e0       	ldi	r24, 0x01	; 1
    6578:	90 e0       	ldi	r25, 0x00	; 0
    657a:	cd b7       	in	r28, 0x3d	; 61
    657c:	de b7       	in	r29, 0x3e	; 62
    657e:	29 96       	adiw	r28, 0x09	; 9
    6580:	e6 e0       	ldi	r30, 0x06	; 6
    6582:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

00006586 <MATCHI_LEN>:
    6586:	cf 93       	push	r28
    6588:	df 93       	push	r29
    658a:	00 97       	sbiw	r24, 0x00	; 0
    658c:	89 f0       	breq	.+34     	; 0x65b0 <MATCHI_LEN+0x2a>
    658e:	61 15       	cp	r22, r1
    6590:	71 05       	cpc	r23, r1
    6592:	71 f0       	breq	.+28     	; 0x65b0 <MATCHI_LEN+0x2a>
    6594:	eb 01       	movw	r28, r22
    6596:	09 90       	ld	r0, Y+
    6598:	00 20       	and	r0, r0
    659a:	e9 f7       	brne	.-6      	; 0x6596 <MATCHI_LEN+0x10>
    659c:	21 97       	sbiw	r28, 0x01	; 1
    659e:	c6 1b       	sub	r28, r22
    65a0:	d7 0b       	sbc	r29, r23
    65a2:	31 f0       	breq	.+12     	; 0x65b0 <MATCHI_LEN+0x2a>
    65a4:	ae 01       	movw	r20, r28
    65a6:	2b df       	rcall	.-426    	; 0x63fe <strncasecmp>
    65a8:	89 2b       	or	r24, r25
    65aa:	11 f4       	brne	.+4      	; 0x65b0 <MATCHI_LEN+0x2a>
    65ac:	ce 01       	movw	r24, r28
    65ae:	02 c0       	rjmp	.+4      	; 0x65b4 <MATCHI_LEN+0x2e>
    65b0:	80 e0       	ldi	r24, 0x00	; 0
    65b2:	90 e0       	ldi	r25, 0x00	; 0
    65b4:	df 91       	pop	r29
    65b6:	cf 91       	pop	r28
    65b8:	08 95       	ret

000065ba <split_args>:
    65ba:	a0 e0       	ldi	r26, 0x00	; 0
    65bc:	b0 e0       	ldi	r27, 0x00	; 0
    65be:	e3 ee       	ldi	r30, 0xE3	; 227
    65c0:	f2 e3       	ldi	r31, 0x32	; 50
    65c2:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
    65c6:	dc 01       	movw	r26, r24
    65c8:	6a 01       	movw	r12, r20
    65ca:	8b 01       	movw	r16, r22
    65cc:	fb 01       	movw	r30, r22
    65ce:	80 e0       	ldi	r24, 0x00	; 0
    65d0:	90 e0       	ldi	r25, 0x00	; 0
    65d2:	8c 15       	cp	r24, r12
    65d4:	9d 05       	cpc	r25, r13
    65d6:	24 f4       	brge	.+8      	; 0x65e0 <split_args+0x26>
    65d8:	11 92       	st	Z+, r1
    65da:	11 92       	st	Z+, r1
    65dc:	01 96       	adiw	r24, 0x01	; 1
    65de:	f9 cf       	rjmp	.-14     	; 0x65d2 <split_args+0x18>
    65e0:	c1 14       	cp	r12, r1
    65e2:	d1 04       	cpc	r13, r1
    65e4:	d9 f1       	breq	.+118    	; 0x665c <split_args+0xa2>
    65e6:	10 97       	sbiw	r26, 0x00	; 0
    65e8:	c9 f1       	breq	.+114    	; 0x665c <split_args+0xa2>
    65ea:	ee 24       	eor	r14, r14
    65ec:	e3 94       	inc	r14
    65ee:	f1 2c       	mov	r15, r1
    65f0:	c0 e0       	ldi	r28, 0x00	; 0
    65f2:	d0 e0       	ldi	r29, 0x00	; 0
    65f4:	8c 91       	ld	r24, X
    65f6:	88 23       	and	r24, r24
    65f8:	b1 f1       	breq	.+108    	; 0x6666 <split_args+0xac>
    65fa:	cc 15       	cp	r28, r12
    65fc:	dd 05       	cpc	r29, r13
    65fe:	9c f5       	brge	.+102    	; 0x6666 <split_args+0xac>
    6600:	cd 01       	movw	r24, r26
    6602:	65 df       	rcall	.-310    	; 0x64ce <skipspaces>
    6604:	dc 01       	movw	r26, r24
    6606:	2c 91       	ld	r18, X
    6608:	22 23       	and	r18, r18
    660a:	69 f1       	breq	.+90     	; 0x6666 <split_args+0xac>
    660c:	22 32       	cpi	r18, 0x22	; 34
    660e:	79 f4       	brne	.+30     	; 0x662e <split_args+0x74>
    6610:	fc 01       	movw	r30, r24
    6612:	31 96       	adiw	r30, 0x01	; 1
    6614:	d8 01       	movw	r26, r16
    6616:	ed 93       	st	X+, r30
    6618:	fc 93       	st	X, r31
    661a:	df 01       	movw	r26, r30
    661c:	80 81       	ld	r24, Z
    661e:	31 96       	adiw	r30, 0x01	; 1
    6620:	88 23       	and	r24, r24
    6622:	a9 f0       	breq	.+42     	; 0x664e <split_args+0x94>
    6624:	82 32       	cpi	r24, 0x22	; 34
    6626:	c9 f7       	brne	.-14     	; 0x661a <split_args+0x60>
    6628:	1c 92       	st	X, r1
    662a:	df 01       	movw	r26, r30
    662c:	10 c0       	rjmp	.+32     	; 0x664e <split_args+0x94>
    662e:	f8 01       	movw	r30, r16
    6630:	91 83       	std	Z+1, r25	; 0x01
    6632:	80 83       	st	Z, r24
    6634:	fc 01       	movw	r30, r24
    6636:	2e 2f       	mov	r18, r30
    6638:	9f 2f       	mov	r25, r31
    663a:	81 91       	ld	r24, Z+
    663c:	3f ed       	ldi	r19, 0xDF	; 223
    663e:	38 0f       	add	r19, r24
    6640:	3e 35       	cpi	r19, 0x5E	; 94
    6642:	c8 f3       	brcs	.-14     	; 0x6636 <split_args+0x7c>
    6644:	88 23       	and	r24, r24
    6646:	69 f0       	breq	.+26     	; 0x6662 <split_args+0xa8>
    6648:	a2 2f       	mov	r26, r18
    664a:	b9 2f       	mov	r27, r25
    664c:	1d 92       	st	X+, r1
    664e:	21 96       	adiw	r28, 0x01	; 1
    6650:	ff ef       	ldi	r31, 0xFF	; 255
    6652:	ef 1a       	sub	r14, r31
    6654:	ff 0a       	sbc	r15, r31
    6656:	0e 5f       	subi	r16, 0xFE	; 254
    6658:	1f 4f       	sbci	r17, 0xFF	; 255
    665a:	cc cf       	rjmp	.-104    	; 0x65f4 <split_args+0x3a>
    665c:	80 e0       	ldi	r24, 0x00	; 0
    665e:	90 e0       	ldi	r25, 0x00	; 0
    6660:	03 c0       	rjmp	.+6      	; 0x6668 <split_args+0xae>
    6662:	c7 01       	movw	r24, r14
    6664:	01 c0       	rjmp	.+2      	; 0x6668 <split_args+0xae>
    6666:	ce 01       	movw	r24, r28
    6668:	cd b7       	in	r28, 0x3d	; 61
    666a:	de b7       	in	r29, 0x3e	; 62
    666c:	e8 e0       	ldi	r30, 0x08	; 8
    666e:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

00006672 <get_token>:
    6672:	ef 92       	push	r14
    6674:	ff 92       	push	r15
    6676:	0f 93       	push	r16
    6678:	1f 93       	push	r17
    667a:	cf 93       	push	r28
    667c:	df 93       	push	r29
    667e:	eb 01       	movw	r28, r22
    6680:	8a 01       	movw	r16, r20
    6682:	18 82       	st	Y, r1
    6684:	00 97       	sbiw	r24, 0x00	; 0
    6686:	89 f1       	breq	.+98     	; 0x66ea <get_token+0x78>
    6688:	fc 01       	movw	r30, r24
    668a:	20 81       	ld	r18, Z
    668c:	22 23       	and	r18, r18
    668e:	79 f1       	breq	.+94     	; 0x66ee <get_token+0x7c>
    6690:	1e df       	rcall	.-452    	; 0x64ce <skipspaces>
    6692:	7c 01       	movw	r14, r24
    6694:	0c df       	rcall	.-488    	; 0x64ae <trim_tail>
    6696:	f7 01       	movw	r30, r14
    6698:	cf 01       	movw	r24, r30
    669a:	21 91       	ld	r18, Z+
    669c:	21 32       	cpi	r18, 0x21	; 33
    669e:	e0 f0       	brcs	.+56     	; 0x66d8 <get_token+0x66>
    66a0:	10 16       	cp	r1, r16
    66a2:	11 06       	cpc	r1, r17
    66a4:	cc f4       	brge	.+50     	; 0x66d8 <get_token+0x66>
    66a6:	22 32       	cpi	r18, 0x22	; 34
    66a8:	79 f4       	brne	.+30     	; 0x66c8 <get_token+0x56>
    66aa:	fc 01       	movw	r30, r24
    66ac:	31 96       	adiw	r30, 0x01	; 1
    66ae:	0c 0f       	add	r16, r28
    66b0:	1d 1f       	adc	r17, r29
    66b2:	cf 01       	movw	r24, r30
    66b4:	21 91       	ld	r18, Z+
    66b6:	22 23       	and	r18, r18
    66b8:	79 f0       	breq	.+30     	; 0x66d8 <get_token+0x66>
    66ba:	22 32       	cpi	r18, 0x22	; 34
    66bc:	59 f0       	breq	.+22     	; 0x66d4 <get_token+0x62>
    66be:	c0 17       	cp	r28, r16
    66c0:	d1 07       	cpc	r29, r17
    66c2:	51 f0       	breq	.+20     	; 0x66d8 <get_token+0x66>
    66c4:	29 93       	st	Y+, r18
    66c6:	f5 cf       	rjmp	.-22     	; 0x66b2 <get_token+0x40>
    66c8:	2c 32       	cpi	r18, 0x2C	; 44
    66ca:	31 f0       	breq	.+12     	; 0x66d8 <get_token+0x66>
    66cc:	29 93       	st	Y+, r18
    66ce:	01 50       	subi	r16, 0x01	; 1
    66d0:	11 09       	sbc	r17, r1
    66d2:	e2 cf       	rjmp	.-60     	; 0x6698 <get_token+0x26>
    66d4:	cf 01       	movw	r24, r30
    66d6:	18 82       	st	Y, r1
    66d8:	fa de       	rcall	.-524    	; 0x64ce <skipspaces>
    66da:	fc 01       	movw	r30, r24
    66dc:	80 81       	ld	r24, Z
    66de:	8c 32       	cpi	r24, 0x2C	; 44
    66e0:	09 f4       	brne	.+2      	; 0x66e4 <get_token+0x72>
    66e2:	31 96       	adiw	r30, 0x01	; 1
    66e4:	18 82       	st	Y, r1
    66e6:	cf 01       	movw	r24, r30
    66e8:	02 c0       	rjmp	.+4      	; 0x66ee <get_token+0x7c>
    66ea:	80 e0       	ldi	r24, 0x00	; 0
    66ec:	90 e0       	ldi	r25, 0x00	; 0
    66ee:	cd b7       	in	r28, 0x3d	; 61
    66f0:	de b7       	in	r29, 0x3e	; 62
    66f2:	e6 e0       	ldi	r30, 0x06	; 6
    66f4:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

000066f8 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    66f8:	a2 e0       	ldi	r26, 0x02	; 2
    66fa:	b0 e0       	ldi	r27, 0x00	; 0
    66fc:	e2 e8       	ldi	r30, 0x82	; 130
    66fe:	f3 e3       	ldi	r31, 0x33	; 51
    6700:	0c 94 dd e2 	jmp	0x1c5ba	; 0x1c5ba <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    6704:	00 97       	sbiw	r24, 0x00	; 0
    6706:	79 f1       	breq	.+94     	; 0x6766 <get_value+0x6e>
    6708:	fc 01       	movw	r30, r24
    670a:	20 81       	ld	r18, Z
    670c:	22 23       	and	r18, r18
        return(0);

    ptr = skipspaces(str);
    670e:	59 f1       	breq	.+86     	; 0x6766 <get_value+0x6e>
    6710:	de de       	rcall	.-580    	; 0x64ce <skipspaces>
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    6712:	8c 01       	movw	r16, r24
    6714:	6e e1       	ldi	r22, 0x1E	; 30
    6716:	73 e0       	ldi	r23, 0x03	; 3
    6718:	36 df       	rcall	.-404    	; 0x6586 <MATCHI_LEN>
    671a:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 16;
        ptr += ret;
    671c:	29 f0       	breq	.+10     	; 0x6728 <get_value+0x30>
    671e:	08 0f       	add	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    6720:	19 1f       	adc	r17, r25
    6722:	40 e1       	ldi	r20, 0x10	; 16
    6724:	50 e0       	ldi	r21, 0x00	; 0
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    6726:	18 c0       	rjmp	.+48     	; 0x6758 <get_value+0x60>
    6728:	61 e2       	ldi	r22, 0x21	; 33
    672a:	73 e0       	ldi	r23, 0x03	; 3
    672c:	c8 01       	movw	r24, r16
    672e:	2b df       	rcall	.-426    	; 0x6586 <MATCHI_LEN>
    6730:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 8;
        ptr += ret;
    6732:	29 f0       	breq	.+10     	; 0x673e <get_value+0x46>
    6734:	08 0f       	add	r16, r24
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    6736:	19 1f       	adc	r17, r25
    6738:	48 e0       	ldi	r20, 0x08	; 8
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    673a:	50 e0       	ldi	r21, 0x00	; 0
    673c:	0d c0       	rjmp	.+26     	; 0x6758 <get_value+0x60>
    673e:	64 e2       	ldi	r22, 0x24	; 36
    6740:	73 e0       	ldi	r23, 0x03	; 3
    6742:	c8 01       	movw	r24, r16
    6744:	20 df       	rcall	.-448    	; 0x6586 <MATCHI_LEN>
    {
        base = 2;
        ptr += ret;
    6746:	00 97       	sbiw	r24, 0x00	; 0
    6748:	29 f0       	breq	.+10     	; 0x6754 <get_value+0x5c>
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    674a:	08 0f       	add	r16, r24
    674c:	19 1f       	adc	r17, r25
    674e:	42 e0       	ldi	r20, 0x02	; 2

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    6750:	50 e0       	ldi	r21, 0x00	; 0
    6752:	02 c0       	rjmp	.+4      	; 0x6758 <get_value+0x60>
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    6754:	4a e0       	ldi	r20, 0x0A	; 10
    6756:	50 e0       	ldi	r21, 0x00	; 0
    6758:	be 01       	movw	r22, r28
    675a:	6f 5f       	subi	r22, 0xFF	; 255
    675c:	7f 4f       	sbci	r23, 0xFF	; 255
    675e:	c8 01       	movw	r24, r16
    6760:	0e 94 b6 46 	call	0x8d6c	; 0x8d6c <strtol>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    6764:	03 c0       	rjmp	.+6      	; 0x676c <get_value+0x74>
    6766:	60 e0       	ldi	r22, 0x00	; 0
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    6768:	70 e0       	ldi	r23, 0x00	; 0
    676a:	cb 01       	movw	r24, r22
    676c:	22 96       	adiw	r28, 0x02	; 2
    676e:	e4 e0       	ldi	r30, 0x04	; 4
    6770:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

00006774 <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    6774:	78 94       	sei
    6776:	08 95       	ret

00006778 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    6778:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    677a:	89 e0       	ldi	r24, 0x09	; 9
    677c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    6780:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    6784:	8f e1       	ldi	r24, 0x1F	; 31
    6786:	9e e4       	ldi	r25, 0x4E	; 78
    6788:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    678c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    6790:	ef e6       	ldi	r30, 0x6F	; 111
    6792:	f0 e0       	ldi	r31, 0x00	; 0
    6794:	80 81       	ld	r24, Z
    6796:	82 60       	ori	r24, 0x02	; 2
    6798:	80 83       	st	Z, r24
    sei();
    679a:	78 94       	sei
    679c:	08 95       	ret

0000679e <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    679e:	1f 92       	push	r1
    67a0:	0f 92       	push	r0
    67a2:	0f b6       	in	r0, 0x3f	; 63
    67a4:	0f 92       	push	r0
    67a6:	11 24       	eor	r1, r1
    67a8:	0b b6       	in	r0, 0x3b	; 59
    67aa:	0f 92       	push	r0
    67ac:	2f 93       	push	r18
    67ae:	3f 93       	push	r19
    67b0:	4f 93       	push	r20
    67b2:	5f 93       	push	r21
    67b4:	6f 93       	push	r22
    67b6:	7f 93       	push	r23
    67b8:	8f 93       	push	r24
    67ba:	9f 93       	push	r25
    67bc:	af 93       	push	r26
    67be:	bf 93       	push	r27
    67c0:	ef 93       	push	r30
    execute_timers();
    67c2:	ff 93       	push	r31
}
    67c4:	36 d2       	rcall	.+1132   	; 0x6c32 <execute_timers>
    67c6:	ff 91       	pop	r31
    67c8:	ef 91       	pop	r30
    67ca:	bf 91       	pop	r27
    67cc:	af 91       	pop	r26
    67ce:	9f 91       	pop	r25
    67d0:	8f 91       	pop	r24
    67d2:	7f 91       	pop	r23
    67d4:	6f 91       	pop	r22
    67d6:	5f 91       	pop	r21
    67d8:	4f 91       	pop	r20
    67da:	3f 91       	pop	r19
    67dc:	2f 91       	pop	r18
    67de:	0f 90       	pop	r0
    67e0:	0b be       	out	0x3b, r0	; 59
    67e2:	0f 90       	pop	r0
    67e4:	0f be       	out	0x3f, r0	; 63
    67e6:	0f 90       	pop	r0
    67e8:	1f 90       	pop	r1
    67ea:	18 95       	reti

000067ec <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    67ec:	0f 93       	push	r16
    67ee:	1f 93       	push	r17
    67f0:	cf 93       	push	r28
    67f2:	df 93       	push	r29
    67f4:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    67f6:	f8 94       	cli

    count1 = TCNT1;
    67f8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    67fc:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6800:	80 91 43 1a 	lds	r24, 0x1A43	; 0x801a43 <__clock>
    6804:	90 91 44 1a 	lds	r25, 0x1A44	; 0x801a44 <__clock+0x1>
    6808:	a0 91 45 1a 	lds	r26, 0x1A45	; 0x801a45 <__clock+0x2>
    680c:	b0 91 46 1a 	lds	r27, 0x1A46	; 0x801a46 <__clock+0x3>
    6810:	80 83       	st	Z, r24
    6812:	91 83       	std	Z+1, r25	; 0x01
    6814:	a2 83       	std	Z+2, r26	; 0x02
    6816:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    6818:	80 91 47 1a 	lds	r24, 0x1A47	; 0x801a47 <__clock+0x4>
    681c:	90 91 48 1a 	lds	r25, 0x1A48	; 0x801a48 <__clock+0x5>
    6820:	a0 91 49 1a 	lds	r26, 0x1A49	; 0x801a49 <__clock+0x6>
    6824:	b0 91 4a 1a 	lds	r27, 0x1A4A	; 0x801a4a <__clock+0x7>
    6828:	84 83       	std	Z+4, r24	; 0x04
    682a:	95 83       	std	Z+5, r25	; 0x05
    682c:	a6 83       	std	Z+6, r26	; 0x06
    682e:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    6830:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6834:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    6838:	b1 9b       	sbis	0x16, 1	; 22
    683a:	03 c0       	rjmp	.+6      	; 0x6842 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    683c:	c0 e0       	ldi	r28, 0x00	; 0
    683e:	d0 e0       	ldi	r29, 0x00	; 0
    6840:	3f c0       	rjmp	.+126    	; 0x68c0 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    6842:	82 17       	cp	r24, r18
    6844:	93 07       	cpc	r25, r19
    6846:	d0 f1       	brcs	.+116    	; 0x68bc <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6848:	c0 e0       	ldi	r28, 0x00	; 0
    684a:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    684c:	40 e0       	ldi	r20, 0x00	; 0
    684e:	50 e0       	ldi	r21, 0x00	; 0
    6850:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    6852:	9a 01       	movw	r18, r20
    6854:	ab 01       	movw	r20, r22
    6856:	28 0f       	add	r18, r24
    6858:	39 1f       	adc	r19, r25
    685a:	41 1d       	adc	r20, r1
    685c:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    685e:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6860:	a2 e3       	ldi	r26, 0x32	; 50
    6862:	b0 e0       	ldi	r27, 0x00	; 0
    6864:	0e 94 af e2 	call	0x1c55e	; 0x1c55e <__muluhisi3>
    6868:	04 81       	ldd	r16, Z+4	; 0x04
    686a:	15 81       	ldd	r17, Z+5	; 0x05
    686c:	26 81       	ldd	r18, Z+6	; 0x06
    686e:	37 81       	ldd	r19, Z+7	; 0x07
    6870:	dc 01       	movw	r26, r24
    6872:	cb 01       	movw	r24, r22
    6874:	80 0f       	add	r24, r16
    6876:	91 1f       	adc	r25, r17
    6878:	a2 1f       	adc	r26, r18
    687a:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    687c:	81 15       	cp	r24, r1
    687e:	2a ec       	ldi	r18, 0xCA	; 202
    6880:	92 07       	cpc	r25, r18
    6882:	2a e9       	ldi	r18, 0x9A	; 154
    6884:	a2 07       	cpc	r26, r18
    6886:	2b e3       	ldi	r18, 0x3B	; 59
    6888:	b2 07       	cpc	r27, r18
    688a:	2c f4       	brge	.+10     	; 0x6896 <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    688c:	84 83       	std	Z+4, r24	; 0x04
    688e:	95 83       	std	Z+5, r25	; 0x05
    6890:	a6 83       	std	Z+6, r26	; 0x06
    6892:	b7 83       	std	Z+7, r27	; 0x07
    6894:	1a c0       	rjmp	.+52     	; 0x68ca <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6896:	9a 5c       	subi	r25, 0xCA	; 202
    6898:	aa 49       	sbci	r26, 0x9A	; 154
    689a:	bb 43       	sbci	r27, 0x3B	; 59
    689c:	84 83       	std	Z+4, r24	; 0x04
    689e:	95 83       	std	Z+5, r25	; 0x05
    68a0:	a6 83       	std	Z+6, r26	; 0x06
    68a2:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    68a4:	80 81       	ld	r24, Z
    68a6:	91 81       	ldd	r25, Z+1	; 0x01
    68a8:	a2 81       	ldd	r26, Z+2	; 0x02
    68aa:	b3 81       	ldd	r27, Z+3	; 0x03
    68ac:	01 96       	adiw	r24, 0x01	; 1
    68ae:	a1 1d       	adc	r26, r1
    68b0:	b1 1d       	adc	r27, r1
    68b2:	80 83       	st	Z, r24
    68b4:	91 83       	std	Z+1, r25	; 0x01
    68b6:	a2 83       	std	Z+2, r26	; 0x02
    68b8:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    68ba:	07 c0       	rjmp	.+14     	; 0x68ca <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    68bc:	cf ef       	ldi	r28, 0xFF	; 255
    68be:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    68c0:	40 e2       	ldi	r20, 0x20	; 32
    68c2:	5e e4       	ldi	r21, 0x4E	; 78
    68c4:	60 e0       	ldi	r22, 0x00	; 0
    68c6:	70 e0       	ldi	r23, 0x00	; 0
    68c8:	c4 cf       	rjmp	.-120    	; 0x6852 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    68ca:	ce 01       	movw	r24, r28
    68cc:	df 91       	pop	r29
    68ce:	cf 91       	pop	r28
    68d0:	1f 91       	pop	r17
    68d2:	0f 91       	pop	r16
    68d4:	08 95       	ret

000068d6 <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    68d6:	80 91 47 1a 	lds	r24, 0x1A47	; 0x801a47 <__clock+0x4>
    68da:	90 91 48 1a 	lds	r25, 0x1A48	; 0x801a48 <__clock+0x5>
    68de:	a0 91 49 1a 	lds	r26, 0x1A49	; 0x801a49 <__clock+0x6>
    68e2:	b0 91 4a 1a 	lds	r27, 0x1A4A	; 0x801a4a <__clock+0x7>
    68e6:	80 5c       	subi	r24, 0xC0	; 192
    68e8:	9d 4b       	sbci	r25, 0xBD	; 189
    68ea:	a0 4f       	sbci	r26, 0xF0	; 240
    68ec:	bf 4f       	sbci	r27, 0xFF	; 255
    68ee:	80 93 47 1a 	sts	0x1A47, r24	; 0x801a47 <__clock+0x4>
    68f2:	90 93 48 1a 	sts	0x1A48, r25	; 0x801a48 <__clock+0x5>
    68f6:	a0 93 49 1a 	sts	0x1A49, r26	; 0x801a49 <__clock+0x6>
    68fa:	b0 93 4a 1a 	sts	0x1A4A, r27	; 0x801a4a <__clock+0x7>
    68fe:	80 91 47 1a 	lds	r24, 0x1A47	; 0x801a47 <__clock+0x4>
    6902:	90 91 48 1a 	lds	r25, 0x1A48	; 0x801a48 <__clock+0x5>
    6906:	a0 91 49 1a 	lds	r26, 0x1A49	; 0x801a49 <__clock+0x6>
    690a:	b0 91 4a 1a 	lds	r27, 0x1A4A	; 0x801a4a <__clock+0x7>
    690e:	81 15       	cp	r24, r1
    6910:	9a 4c       	sbci	r25, 0xCA	; 202
    6912:	aa 49       	sbci	r26, 0x9A	; 154
    6914:	bb 43       	sbci	r27, 0x3B	; 59
    6916:	dc f0       	brlt	.+54     	; 0x694e <clock_task+0x78>
    6918:	80 91 43 1a 	lds	r24, 0x1A43	; 0x801a43 <__clock>
    691c:	90 91 44 1a 	lds	r25, 0x1A44	; 0x801a44 <__clock+0x1>
    6920:	a0 91 45 1a 	lds	r26, 0x1A45	; 0x801a45 <__clock+0x2>
    6924:	b0 91 46 1a 	lds	r27, 0x1A46	; 0x801a46 <__clock+0x3>
    6928:	01 96       	adiw	r24, 0x01	; 1
    692a:	a1 1d       	adc	r26, r1
    692c:	b1 1d       	adc	r27, r1
    692e:	80 93 43 1a 	sts	0x1A43, r24	; 0x801a43 <__clock>
    6932:	90 93 44 1a 	sts	0x1A44, r25	; 0x801a44 <__clock+0x1>
    6936:	a0 93 45 1a 	sts	0x1A45, r26	; 0x801a45 <__clock+0x2>
    693a:	b0 93 46 1a 	sts	0x1A46, r27	; 0x801a46 <__clock+0x3>
    693e:	10 92 47 1a 	sts	0x1A47, r1	; 0x801a47 <__clock+0x4>
    6942:	10 92 48 1a 	sts	0x1A48, r1	; 0x801a48 <__clock+0x5>
    6946:	10 92 49 1a 	sts	0x1A49, r1	; 0x801a49 <__clock+0x6>
    694a:	10 92 4a 1a 	sts	0x1A4A, r1	; 0x801a4a <__clock+0x7>
    694e:	08 95       	ret

00006950 <clock_settime.part.2>:
    6950:	fc 01       	movw	r30, r24
    6952:	84 81       	ldd	r24, Z+4	; 0x04
    6954:	95 81       	ldd	r25, Z+5	; 0x05
    6956:	a6 81       	ldd	r26, Z+6	; 0x06
    6958:	b7 81       	ldd	r27, Z+7	; 0x07
    695a:	80 93 47 1a 	sts	0x1A47, r24	; 0x801a47 <__clock+0x4>
    695e:	90 93 48 1a 	sts	0x1A48, r25	; 0x801a48 <__clock+0x5>
    6962:	a0 93 49 1a 	sts	0x1A49, r26	; 0x801a49 <__clock+0x6>
    6966:	b0 93 4a 1a 	sts	0x1A4A, r27	; 0x801a4a <__clock+0x7>
    696a:	80 81       	ld	r24, Z
    696c:	91 81       	ldd	r25, Z+1	; 0x01
    696e:	a2 81       	ldd	r26, Z+2	; 0x02
    6970:	b3 81       	ldd	r27, Z+3	; 0x03
    6972:	80 93 43 1a 	sts	0x1A43, r24	; 0x801a43 <__clock>
    6976:	90 93 44 1a 	sts	0x1A44, r25	; 0x801a44 <__clock+0x1>
    697a:	a0 93 45 1a 	sts	0x1A45, r26	; 0x801a45 <__clock+0x2>
    697e:	b0 93 46 1a 	sts	0x1A46, r27	; 0x801a46 <__clock+0x3>
    6982:	80 91 47 1a 	lds	r24, 0x1A47	; 0x801a47 <__clock+0x4>
    6986:	90 91 48 1a 	lds	r25, 0x1A48	; 0x801a48 <__clock+0x5>
    698a:	a0 91 49 1a 	lds	r26, 0x1A49	; 0x801a49 <__clock+0x6>
    698e:	b0 91 4a 1a 	lds	r27, 0x1A4A	; 0x801a4a <__clock+0x7>
    6992:	44 81       	ldd	r20, Z+4	; 0x04
    6994:	55 81       	ldd	r21, Z+5	; 0x05
    6996:	66 81       	ldd	r22, Z+6	; 0x06
    6998:	77 81       	ldd	r23, Z+7	; 0x07
    699a:	48 17       	cp	r20, r24
    699c:	59 07       	cpc	r21, r25
    699e:	6a 07       	cpc	r22, r26
    69a0:	7b 07       	cpc	r23, r27
    69a2:	b9 f6       	brne	.-82     	; 0x6952 <clock_settime.part.2+0x2>
    69a4:	80 91 43 1a 	lds	r24, 0x1A43	; 0x801a43 <__clock>
    69a8:	90 91 44 1a 	lds	r25, 0x1A44	; 0x801a44 <__clock+0x1>
    69ac:	a0 91 45 1a 	lds	r26, 0x1A45	; 0x801a45 <__clock+0x2>
    69b0:	b0 91 46 1a 	lds	r27, 0x1A46	; 0x801a46 <__clock+0x3>
    69b4:	40 81       	ld	r20, Z
    69b6:	51 81       	ldd	r21, Z+1	; 0x01
    69b8:	62 81       	ldd	r22, Z+2	; 0x02
    69ba:	73 81       	ldd	r23, Z+3	; 0x03
    69bc:	48 17       	cp	r20, r24
    69be:	59 07       	cpc	r21, r25
    69c0:	6a 07       	cpc	r22, r26
    69c2:	7b 07       	cpc	r23, r27
    69c4:	31 f6       	brne	.-116    	; 0x6952 <clock_settime.part.2+0x2>
    69c6:	80 e0       	ldi	r24, 0x00	; 0
    69c8:	90 e0       	ldi	r25, 0x00	; 0
    69ca:	08 95       	ret

000069cc <set_timers>:
    69cc:	00 d0       	rcall	.+0      	; 0x69ce <set_timers+0x2>
    69ce:	1f 92       	push	r1
    69d0:	00 97       	sbiw	r24, 0x00	; 0
    69d2:	79 f1       	breq	.+94     	; 0x6a32 <set_timers+0x66>
    69d4:	eb e4       	ldi	r30, 0x4B	; 75
    69d6:	fa e1       	ldi	r31, 0x1A	; 26
    69d8:	4f ef       	ldi	r20, 0xFF	; 255
    69da:	5f ef       	ldi	r21, 0xFF	; 255
    69dc:	20 e0       	ldi	r18, 0x00	; 0
    69de:	30 e0       	ldi	r19, 0x00	; 0
    69e0:	60 81       	ld	r22, Z
    69e2:	71 81       	ldd	r23, Z+1	; 0x01
    69e4:	86 17       	cp	r24, r22
    69e6:	97 07       	cpc	r25, r23
    69e8:	79 f0       	breq	.+30     	; 0x6a08 <set_timers+0x3c>
    69ea:	67 2b       	or	r22, r23
    69ec:	71 f4       	brne	.+28     	; 0x6a0a <set_timers+0x3e>
    69ee:	f9 01       	movw	r30, r18
    69f0:	ee 0f       	add	r30, r30
    69f2:	ff 1f       	adc	r31, r31
    69f4:	e2 0f       	add	r30, r18
    69f6:	f3 1f       	adc	r31, r19
    69f8:	e5 5b       	subi	r30, 0xB5	; 181
    69fa:	f5 4e       	sbci	r31, 0xE5	; 229
    69fc:	91 83       	std	Z+1, r25	; 0x01
    69fe:	80 83       	st	Z, r24
    6a00:	81 e0       	ldi	r24, 0x01	; 1
    6a02:	82 83       	std	Z+2, r24	; 0x02
    6a04:	c9 01       	movw	r24, r18
    6a06:	19 c0       	rjmp	.+50     	; 0x6a3a <set_timers+0x6e>
    6a08:	a9 01       	movw	r20, r18
    6a0a:	2f 5f       	subi	r18, 0xFF	; 255
    6a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    6a0e:	33 96       	adiw	r30, 0x03	; 3
    6a10:	28 30       	cpi	r18, 0x08	; 8
    6a12:	31 05       	cpc	r19, r1
    6a14:	29 f7       	brne	.-54     	; 0x69e0 <set_timers+0x14>
    6a16:	4f 3f       	cpi	r20, 0xFF	; 255
    6a18:	8f ef       	ldi	r24, 0xFF	; 255
    6a1a:	58 07       	cpc	r21, r24
    6a1c:	69 f4       	brne	.+26     	; 0x6a38 <set_timers+0x6c>
    6a1e:	8d e0       	ldi	r24, 0x0D	; 13
    6a20:	96 e0       	ldi	r25, 0x06	; 6
    6a22:	a0 e0       	ldi	r26, 0x00	; 0
    6a24:	ed b7       	in	r30, 0x3d	; 61
    6a26:	fe b7       	in	r31, 0x3e	; 62
    6a28:	81 83       	std	Z+1, r24	; 0x01
    6a2a:	92 83       	std	Z+2, r25	; 0x02
    6a2c:	a3 83       	std	Z+3, r26	; 0x03
    6a2e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    6a32:	8f ef       	ldi	r24, 0xFF	; 255
    6a34:	9f ef       	ldi	r25, 0xFF	; 255
    6a36:	01 c0       	rjmp	.+2      	; 0x6a3a <set_timers+0x6e>
    6a38:	ca 01       	movw	r24, r20
    6a3a:	0f 90       	pop	r0
    6a3c:	0f 90       	pop	r0
    6a3e:	0f 90       	pop	r0
    6a40:	08 95       	ret

00006a42 <delete_all_timers>:
    6a42:	eb e4       	ldi	r30, 0x4B	; 75
    6a44:	fa e1       	ldi	r31, 0x1A	; 26
    6a46:	12 82       	std	Z+2, r1	; 0x02
    6a48:	11 82       	std	Z+1, r1	; 0x01
    6a4a:	10 82       	st	Z, r1
    6a4c:	33 96       	adiw	r30, 0x03	; 3
    6a4e:	8a e1       	ldi	r24, 0x1A	; 26
    6a50:	e3 36       	cpi	r30, 0x63	; 99
    6a52:	f8 07       	cpc	r31, r24
    6a54:	c1 f7       	brne	.-16     	; 0x6a46 <delete_all_timers+0x4>
    6a56:	08 95       	ret

00006a58 <subtract_timespec>:
    6a58:	0f 93       	push	r16
    6a5a:	1f 93       	push	r17
    6a5c:	cf 93       	push	r28
    6a5e:	df 93       	push	r29
    6a60:	fc 01       	movw	r30, r24
    6a62:	84 81       	ldd	r24, Z+4	; 0x04
    6a64:	95 81       	ldd	r25, Z+5	; 0x05
    6a66:	a6 81       	ldd	r26, Z+6	; 0x06
    6a68:	b7 81       	ldd	r27, Z+7	; 0x07
    6a6a:	eb 01       	movw	r28, r22
    6a6c:	0c 81       	ldd	r16, Y+4	; 0x04
    6a6e:	1d 81       	ldd	r17, Y+5	; 0x05
    6a70:	2e 81       	ldd	r18, Y+6	; 0x06
    6a72:	3f 81       	ldd	r19, Y+7	; 0x07
    6a74:	80 1b       	sub	r24, r16
    6a76:	91 0b       	sbc	r25, r17
    6a78:	a2 0b       	sbc	r26, r18
    6a7a:	b3 0b       	sbc	r27, r19
    6a7c:	b7 fd       	sbrc	r27, 7
    6a7e:	05 c0       	rjmp	.+10     	; 0x6a8a <subtract_timespec+0x32>
    6a80:	84 83       	std	Z+4, r24	; 0x04
    6a82:	95 83       	std	Z+5, r25	; 0x05
    6a84:	a6 83       	std	Z+6, r26	; 0x06
    6a86:	b7 83       	std	Z+7, r27	; 0x07
    6a88:	12 c0       	rjmp	.+36     	; 0x6aae <subtract_timespec+0x56>
    6a8a:	96 53       	subi	r25, 0x36	; 54
    6a8c:	a5 46       	sbci	r26, 0x65	; 101
    6a8e:	b4 4c       	sbci	r27, 0xC4	; 196
    6a90:	84 83       	std	Z+4, r24	; 0x04
    6a92:	95 83       	std	Z+5, r25	; 0x05
    6a94:	a6 83       	std	Z+6, r26	; 0x06
    6a96:	b7 83       	std	Z+7, r27	; 0x07
    6a98:	80 81       	ld	r24, Z
    6a9a:	91 81       	ldd	r25, Z+1	; 0x01
    6a9c:	a2 81       	ldd	r26, Z+2	; 0x02
    6a9e:	b3 81       	ldd	r27, Z+3	; 0x03
    6aa0:	01 97       	sbiw	r24, 0x01	; 1
    6aa2:	a1 09       	sbc	r26, r1
    6aa4:	b1 09       	sbc	r27, r1
    6aa6:	80 83       	st	Z, r24
    6aa8:	91 83       	std	Z+1, r25	; 0x01
    6aaa:	a2 83       	std	Z+2, r26	; 0x02
    6aac:	b3 83       	std	Z+3, r27	; 0x03
    6aae:	80 81       	ld	r24, Z
    6ab0:	91 81       	ldd	r25, Z+1	; 0x01
    6ab2:	a2 81       	ldd	r26, Z+2	; 0x02
    6ab4:	b3 81       	ldd	r27, Z+3	; 0x03
    6ab6:	eb 01       	movw	r28, r22
    6ab8:	48 81       	ld	r20, Y
    6aba:	59 81       	ldd	r21, Y+1	; 0x01
    6abc:	6a 81       	ldd	r22, Y+2	; 0x02
    6abe:	7b 81       	ldd	r23, Y+3	; 0x03
    6ac0:	84 1b       	sub	r24, r20
    6ac2:	95 0b       	sbc	r25, r21
    6ac4:	a6 0b       	sbc	r26, r22
    6ac6:	b7 0b       	sbc	r27, r23
    6ac8:	80 83       	st	Z, r24
    6aca:	91 83       	std	Z+1, r25	; 0x01
    6acc:	a2 83       	std	Z+2, r26	; 0x02
    6ace:	b3 83       	std	Z+3, r27	; 0x03
    6ad0:	df 91       	pop	r29
    6ad2:	cf 91       	pop	r28
    6ad4:	1f 91       	pop	r17
    6ad6:	0f 91       	pop	r16
    6ad8:	08 95       	ret

00006ada <ts_to_str>:
    6ada:	ad b7       	in	r26, 0x3d	; 61
    6adc:	be b7       	in	r27, 0x3e	; 62
    6ade:	1f 97       	sbiw	r26, 0x0f	; 15
    6ae0:	0f b6       	in	r0, 0x3f	; 63
    6ae2:	f8 94       	cli
    6ae4:	be bf       	out	0x3e, r27	; 62
    6ae6:	0f be       	out	0x3f, r0	; 63
    6ae8:	ad bf       	out	0x3d, r26	; 61
    6aea:	fc 01       	movw	r30, r24
    6aec:	44 81       	ldd	r20, Z+4	; 0x04
    6aee:	55 81       	ldd	r21, Z+5	; 0x05
    6af0:	66 81       	ldd	r22, Z+6	; 0x06
    6af2:	77 81       	ldd	r23, Z+7	; 0x07
    6af4:	ed b7       	in	r30, 0x3d	; 61
    6af6:	fe b7       	in	r31, 0x3e	; 62
    6af8:	44 87       	std	Z+12, r20	; 0x0c
    6afa:	55 87       	std	Z+13, r21	; 0x0d
    6afc:	66 87       	std	Z+14, r22	; 0x0e
    6afe:	77 87       	std	Z+15, r23	; 0x0f
    6b00:	fc 01       	movw	r30, r24
    6b02:	80 81       	ld	r24, Z
    6b04:	91 81       	ldd	r25, Z+1	; 0x01
    6b06:	a2 81       	ldd	r26, Z+2	; 0x02
    6b08:	b3 81       	ldd	r27, Z+3	; 0x03
    6b0a:	ed b7       	in	r30, 0x3d	; 61
    6b0c:	fe b7       	in	r31, 0x3e	; 62
    6b0e:	80 87       	std	Z+8, r24	; 0x08
    6b10:	91 87       	std	Z+9, r25	; 0x09
    6b12:	a2 87       	std	Z+10, r26	; 0x0a
    6b14:	b3 87       	std	Z+11, r27	; 0x0b
    6b16:	83 e0       	ldi	r24, 0x03	; 3
    6b18:	96 e0       	ldi	r25, 0x06	; 6
    6b1a:	a0 e0       	ldi	r26, 0x00	; 0
    6b1c:	85 83       	std	Z+5, r24	; 0x05
    6b1e:	96 83       	std	Z+6, r25	; 0x06
    6b20:	a7 83       	std	Z+7, r26	; 0x07
    6b22:	8f e1       	ldi	r24, 0x1F	; 31
    6b24:	90 e0       	ldi	r25, 0x00	; 0
    6b26:	94 83       	std	Z+4, r25	; 0x04
    6b28:	83 83       	std	Z+3, r24	; 0x03
    6b2a:	83 e8       	ldi	r24, 0x83	; 131
    6b2c:	97 e1       	ldi	r25, 0x17	; 23
    6b2e:	92 83       	std	Z+2, r25	; 0x02
    6b30:	81 83       	std	Z+1, r24	; 0x01
    6b32:	0e 94 53 46 	call	0x8ca6	; 0x8ca6 <snprintf_P>
    6b36:	83 e8       	ldi	r24, 0x83	; 131
    6b38:	97 e1       	ldi	r25, 0x17	; 23
    6b3a:	ad b7       	in	r26, 0x3d	; 61
    6b3c:	be b7       	in	r27, 0x3e	; 62
    6b3e:	1f 96       	adiw	r26, 0x0f	; 15
    6b40:	0f b6       	in	r0, 0x3f	; 63
    6b42:	f8 94       	cli
    6b44:	be bf       	out	0x3e, r27	; 62
    6b46:	0f be       	out	0x3f, r0	; 63
    6b48:	ad bf       	out	0x3d, r26	; 61
    6b4a:	08 95       	ret

00006b4c <clock_elapsed_begin>:
    6b4c:	6b e7       	ldi	r22, 0x7B	; 123
    6b4e:	77 e1       	ldi	r23, 0x17	; 23
    6b50:	80 e0       	ldi	r24, 0x00	; 0
    6b52:	90 e0       	ldi	r25, 0x00	; 0
    6b54:	4b ce       	rjmp	.-874    	; 0x67ec <clock_gettime>
    6b56:	08 95       	ret

00006b58 <clock_elapsed_end>:
    6b58:	af e0       	ldi	r26, 0x0F	; 15
    6b5a:	b0 e0       	ldi	r27, 0x00	; 0
    6b5c:	e2 eb       	ldi	r30, 0xB2	; 178
    6b5e:	f5 e3       	ldi	r31, 0x35	; 53
    6b60:	0c 94 dd e2 	jmp	0x1c5ba	; 0x1c5ba <__prologue_saves__+0x1c>
    6b64:	8c 01       	movw	r16, r24
    6b66:	be 01       	movw	r22, r28
    6b68:	68 5f       	subi	r22, 0xF8	; 248
    6b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    6b6c:	80 e0       	ldi	r24, 0x00	; 0
    6b6e:	90 e0       	ldi	r25, 0x00	; 0
    6b70:	3d de       	rcall	.-902    	; 0x67ec <clock_gettime>
    6b72:	6b e7       	ldi	r22, 0x7B	; 123
    6b74:	77 e1       	ldi	r23, 0x17	; 23
    6b76:	ce 01       	movw	r24, r28
    6b78:	08 96       	adiw	r24, 0x08	; 8
    6b7a:	6e df       	rcall	.-292    	; 0x6a58 <subtract_timespec>
    6b7c:	01 15       	cp	r16, r1
    6b7e:	11 05       	cpc	r17, r1
    6b80:	b1 f0       	breq	.+44     	; 0x6bae <clock_elapsed_end+0x56>
    6b82:	f8 01       	movw	r30, r16
    6b84:	80 81       	ld	r24, Z
    6b86:	88 23       	and	r24, r24
    6b88:	91 f0       	breq	.+36     	; 0x6bae <clock_elapsed_end+0x56>
    6b8a:	ce 01       	movw	r24, r28
    6b8c:	08 96       	adiw	r24, 0x08	; 8
    6b8e:	a5 df       	rcall	.-182    	; 0x6ada <ts_to_str>
    6b90:	ed b7       	in	r30, 0x3d	; 61
    6b92:	fe b7       	in	r31, 0x3e	; 62
    6b94:	97 83       	std	Z+7, r25	; 0x07
    6b96:	86 83       	std	Z+6, r24	; 0x06
    6b98:	15 83       	std	Z+5, r17	; 0x05
    6b9a:	04 83       	std	Z+4, r16	; 0x04
    6b9c:	85 ef       	ldi	r24, 0xF5	; 245
    6b9e:	95 e0       	ldi	r25, 0x05	; 5
    6ba0:	a0 e0       	ldi	r26, 0x00	; 0
    6ba2:	81 83       	std	Z+1, r24	; 0x01
    6ba4:	92 83       	std	Z+2, r25	; 0x02
    6ba6:	a3 83       	std	Z+3, r26	; 0x03
    6ba8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    6bac:	0f c0       	rjmp	.+30     	; 0x6bcc <clock_elapsed_end+0x74>
    6bae:	ce 01       	movw	r24, r28
    6bb0:	08 96       	adiw	r24, 0x08	; 8
    6bb2:	93 df       	rcall	.-218    	; 0x6ada <ts_to_str>
    6bb4:	ed b7       	in	r30, 0x3d	; 61
    6bb6:	fe b7       	in	r31, 0x3e	; 62
    6bb8:	95 83       	std	Z+5, r25	; 0x05
    6bba:	84 83       	std	Z+4, r24	; 0x04
    6bbc:	8a ee       	ldi	r24, 0xEA	; 234
    6bbe:	95 e0       	ldi	r25, 0x05	; 5
    6bc0:	a0 e0       	ldi	r26, 0x00	; 0
    6bc2:	81 83       	std	Z+1, r24	; 0x01
    6bc4:	92 83       	std	Z+2, r25	; 0x02
    6bc6:	a3 83       	std	Z+3, r26	; 0x03
    6bc8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    6bcc:	2f 96       	adiw	r28, 0x0f	; 15
    6bce:	e4 e0       	ldi	r30, 0x04	; 4
    6bd0:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

00006bd4 <clock_clear>:
    6bd4:	a8 e0       	ldi	r26, 0x08	; 8
    6bd6:	b0 e0       	ldi	r27, 0x00	; 0
    6bd8:	e0 ef       	ldi	r30, 0xF0	; 240
    6bda:	f5 e3       	ldi	r31, 0x35	; 53
    6bdc:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
    6be0:	1d 82       	std	Y+5, r1	; 0x05
    6be2:	1e 82       	std	Y+6, r1	; 0x06
    6be4:	1f 82       	std	Y+7, r1	; 0x07
    6be6:	18 86       	std	Y+8, r1	; 0x08
    6be8:	19 82       	std	Y+1, r1	; 0x01
    6bea:	1a 82       	std	Y+2, r1	; 0x02
    6bec:	1b 82       	std	Y+3, r1	; 0x03
    6bee:	1c 82       	std	Y+4, r1	; 0x04
    6bf0:	ce 01       	movw	r24, r28
    6bf2:	01 96       	adiw	r24, 0x01	; 1
    6bf4:	ad de       	rcall	.-678    	; 0x6950 <clock_settime.part.2>
    6bf6:	e3 e6       	ldi	r30, 0x63	; 99
    6bf8:	fa e1       	ldi	r31, 0x1A	; 26
    6bfa:	11 82       	std	Z+1, r1	; 0x01
    6bfc:	10 82       	st	Z, r1
    6bfe:	13 82       	std	Z+3, r1	; 0x03
    6c00:	12 82       	std	Z+2, r1	; 0x02
    6c02:	28 96       	adiw	r28, 0x08	; 8
    6c04:	e2 e0       	ldi	r30, 0x02	; 2
    6c06:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00006c0a <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6c0a:	80 91 a3 17 	lds	r24, 0x17A3	; 0x8017a3 <timers_configured>
    6c0e:	90 91 a4 17 	lds	r25, 0x17A4	; 0x8017a4 <timers_configured+0x1>
    6c12:	89 2b       	or	r24, r25
    6c14:	69 f0       	breq	.+26     	; 0x6c30 <enable_timers+0x26>
    6c16:	80 91 a5 17 	lds	r24, 0x17A5	; 0x8017a5 <timers_enabled>
    6c1a:	90 91 a6 17 	lds	r25, 0x17A6	; 0x8017a6 <timers_enabled+0x1>
    6c1e:	89 2b       	or	r24, r25
    {
        enable_system_task();
    6c20:	39 f4       	brne	.+14     	; 0x6c30 <enable_timers+0x26>
        timers_enabled = 1;
    6c22:	a8 dd       	rcall	.-1200   	; 0x6774 <enable_system_task>
    6c24:	81 e0       	ldi	r24, 0x01	; 1
    6c26:	90 e0       	ldi	r25, 0x00	; 0
    6c28:	90 93 a6 17 	sts	0x17A6, r25	; 0x8017a6 <timers_enabled+0x1>
    6c2c:	80 93 a5 17 	sts	0x17A5, r24	; 0x8017a5 <timers_enabled>
    6c30:	08 95       	ret

00006c32 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6c32:	cf 93       	push	r28
    6c34:	df 93       	push	r29
    6c36:	cb e4       	ldi	r28, 0x4B	; 75
    6c38:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    6c3c:	88 23       	and	r24, r24
    6c3e:	29 f0       	breq	.+10     	; 0x6c4a <execute_timers+0x18>
    6c40:	e8 81       	ld	r30, Y
    6c42:	f9 81       	ldd	r31, Y+1	; 0x01
    6c44:	30 97       	sbiw	r30, 0x00	; 0
    6c46:	09 f0       	breq	.+2      	; 0x6c4a <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6c48:	09 95       	icall
    6c4a:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6c4c:	8a e1       	ldi	r24, 0x1A	; 26
    6c4e:	c3 36       	cpi	r28, 0x63	; 99
    6c50:	d8 07       	cpc	r29, r24
    6c52:	99 f7       	brne	.-26     	; 0x6c3a <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6c54:	df 91       	pop	r29
    6c56:	cf 91       	pop	r28
    6c58:	08 95       	ret

00006c5a <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6c5a:	00 d0       	rcall	.+0      	; 0x6c5c <init_timers+0x2>
    6c5c:	1f 92       	push	r1
    printf("Timers init called\n");
    6c5e:	86 ed       	ldi	r24, 0xD6	; 214
    6c60:	95 e0       	ldi	r25, 0x05	; 5
    6c62:	a0 e0       	ldi	r26, 0x00	; 0
    6c64:	ed b7       	in	r30, 0x3d	; 61
    6c66:	fe b7       	in	r31, 0x3e	; 62
    6c68:	81 83       	std	Z+1, r24	; 0x01
    6c6a:	92 83       	std	Z+2, r25	; 0x02
    6c6c:	a3 83       	std	Z+3, r26	; 0x03
    6c6e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

    if(!timers_configured)
    6c72:	80 91 a3 17 	lds	r24, 0x17A3	; 0x8017a3 <timers_configured>
    6c76:	90 91 a4 17 	lds	r25, 0x17A4	; 0x8017a4 <timers_configured+0x1>
    6c7a:	89 2b       	or	r24, r25
    {
        install_timers_isr();
    6c7c:	a9 f4       	brne	.+42     	; 0x6ca8 <init_timers+0x4e>
        timers_configured = 1;
    6c7e:	7c dd       	rcall	.-1288   	; 0x6778 <install_timers_isr>
    6c80:	81 e0       	ldi	r24, 0x01	; 1
    6c82:	90 e0       	ldi	r25, 0x00	; 0
    6c84:	90 93 a4 17 	sts	0x17A4, r25	; 0x8017a4 <timers_configured+0x1>
    6c88:	80 93 a3 17 	sts	0x17A3, r24	; 0x8017a3 <timers_configured>
        timers_enabled = 0;
    6c8c:	10 92 a6 17 	sts	0x17A6, r1	; 0x8017a6 <timers_enabled+0x1>
    6c90:	10 92 a5 17 	sts	0x17A5, r1	; 0x8017a5 <timers_enabled>
        printf("Timers configured\n");
    6c94:	83 ec       	ldi	r24, 0xC3	; 195
    6c96:	95 e0       	ldi	r25, 0x05	; 5
    6c98:	a0 e0       	ldi	r26, 0x00	; 0
    6c9a:	ed b7       	in	r30, 0x3d	; 61
    6c9c:	fe b7       	in	r31, 0x3e	; 62
    6c9e:	81 83       	std	Z+1, r24	; 0x01
    6ca0:	92 83       	std	Z+2, r25	; 0x02
    }

    delete_all_timers();
    6ca2:	a3 83       	std	Z+3, r26	; 0x03

    clock_clear();
    6ca4:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("Clock Init\n");
    6ca8:	cc de       	rcall	.-616    	; 0x6a42 <delete_all_timers>
    6caa:	94 df       	rcall	.-216    	; 0x6bd4 <clock_clear>
    6cac:	87 eb       	ldi	r24, 0xB7	; 183
    6cae:	95 e0       	ldi	r25, 0x05	; 5
    6cb0:	a0 e0       	ldi	r26, 0x00	; 0
    6cb2:	ed b7       	in	r30, 0x3d	; 61
    6cb4:	fe b7       	in	r31, 0x3e	; 62
    6cb6:	81 83       	std	Z+1, r24	; 0x01
    6cb8:	92 83       	std	Z+2, r25	; 0x02
    6cba:	a3 83       	std	Z+3, r26	; 0x03

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6cbc:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    6cc0:	61 e0       	ldi	r22, 0x01	; 1
    6cc2:	70 e0       	ldi	r23, 0x00	; 0
    6cc4:	8b e6       	ldi	r24, 0x6B	; 107
    6cc6:	94 e3       	ldi	r25, 0x34	; 52
    6cc8:	81 de       	rcall	.-766    	; 0x69cc <set_timers>
        printf("Clock task init failed\n");
    6cca:	01 96       	adiw	r24, 0x01	; 1
    6ccc:	51 f4       	brne	.+20     	; 0x6ce2 <init_timers+0x88>
    6cce:	8f e9       	ldi	r24, 0x9F	; 159
    6cd0:	95 e0       	ldi	r25, 0x05	; 5
    6cd2:	a0 e0       	ldi	r26, 0x00	; 0
    6cd4:	ed b7       	in	r30, 0x3d	; 61
    6cd6:	fe b7       	in	r31, 0x3e	; 62
    6cd8:	81 83       	std	Z+1, r24	; 0x01
    6cda:	92 83       	std	Z+2, r25	; 0x02
    6cdc:	a3 83       	std	Z+3, r26	; 0x03
    printf("Clock Installed\n");
    6cde:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    6ce2:	8e e8       	ldi	r24, 0x8E	; 142
    6ce4:	95 e0       	ldi	r25, 0x05	; 5
    6ce6:	a0 e0       	ldi	r26, 0x00	; 0
    6ce8:	ed b7       	in	r30, 0x3d	; 61
    6cea:	fe b7       	in	r31, 0x3e	; 62
    6cec:	81 83       	std	Z+1, r24	; 0x01
    6cee:	92 83       	std	Z+2, r25	; 0x02

    enable_timers();
    6cf0:	a3 83       	std	Z+3, r26	; 0x03
    6cf2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

    printf("Timers enabled\n");
    6cf6:	89 df       	rcall	.-238    	; 0x6c0a <enable_timers>
    6cf8:	8e e7       	ldi	r24, 0x7E	; 126
    6cfa:	95 e0       	ldi	r25, 0x05	; 5
    6cfc:	a0 e0       	ldi	r26, 0x00	; 0
    6cfe:	ed b7       	in	r30, 0x3d	; 61
    6d00:	fe b7       	in	r31, 0x3e	; 62
    6d02:	81 83       	std	Z+1, r24	; 0x01
    6d04:	92 83       	std	Z+2, r25	; 0x02
    6d06:	a3 83       	std	Z+3, r26	; 0x03
}
    6d08:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    6d0c:	0f 90       	pop	r0
    6d0e:	0f 90       	pop	r0
    6d10:	0f 90       	pop	r0
    6d12:	08 95       	ret

00006d14 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    6d14:	89 2b       	or	r24, r25
    6d16:	81 f4       	brne	.+32     	; 0x6d38 <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    6d18:	fb 01       	movw	r30, r22
    6d1a:	10 82       	st	Z, r1
    6d1c:	11 82       	std	Z+1, r1	; 0x01
    6d1e:	12 82       	std	Z+2, r1	; 0x02
    6d20:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6d22:	80 e4       	ldi	r24, 0x40	; 64
    6d24:	92 e4       	ldi	r25, 0x42	; 66
    6d26:	af e0       	ldi	r26, 0x0F	; 15
    6d28:	b0 e0       	ldi	r27, 0x00	; 0
    6d2a:	84 83       	std	Z+4, r24	; 0x04
    6d2c:	95 83       	std	Z+5, r25	; 0x05
    6d2e:	a6 83       	std	Z+6, r26	; 0x06
    6d30:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    6d32:	80 e0       	ldi	r24, 0x00	; 0
    6d34:	90 e0       	ldi	r25, 0x00	; 0
    6d36:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    6d38:	8f ef       	ldi	r24, 0xFF	; 255
    6d3a:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    6d3c:	08 95       	ret

00006d3e <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    6d3e:	89 2b       	or	r24, r25
    6d40:	19 f4       	brne	.+6      	; 0x6d48 <clock_settime+0xa>
    6d42:	cb 01       	movw	r24, r22
    6d44:	05 ce       	rjmp	.-1014   	; 0x6950 <clock_settime.part.2>
    6d46:	08 95       	ret
        return(-1);
    6d48:	8f ef       	ldi	r24, 0xFF	; 255
    6d4a:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6d4c:	08 95       	ret

00006d4e <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6d4e:	9c 01       	movw	r18, r24
    6d50:	83 70       	andi	r24, 0x03	; 3
    6d52:	99 27       	eor	r25, r25
    6d54:	00 97       	sbiw	r24, 0x00	; 0
    6d56:	69 f4       	brne	.+26     	; 0x6d72 <IS_Leap+0x24>
    6d58:	2c 36       	cpi	r18, 0x6C	; 108
    6d5a:	47 e0       	ldi	r20, 0x07	; 7
    6d5c:	34 07       	cpc	r19, r20
    6d5e:	59 f0       	breq	.+22     	; 0x6d76 <IS_Leap+0x28>
    6d60:	51 e0       	ldi	r21, 0x01	; 1
    6d62:	40 e0       	ldi	r20, 0x00	; 0
    6d64:	24 33       	cpi	r18, 0x34	; 52
    6d66:	38 40       	sbci	r19, 0x08	; 8
    6d68:	09 f4       	brne	.+2      	; 0x6d6c <IS_Leap+0x1e>
    6d6a:	50 e0       	ldi	r21, 0x00	; 0
    6d6c:	85 2f       	mov	r24, r21
    6d6e:	94 2f       	mov	r25, r20
    6d70:	08 95       	ret
    6d72:	80 e0       	ldi	r24, 0x00	; 0
    6d74:	90 e0       	ldi	r25, 0x00	; 0
    6d76:	08 95       	ret

00006d78 <tm_mon_to_ascii>:
    6d78:	8c 30       	cpi	r24, 0x0C	; 12
    6d7a:	91 05       	cpc	r25, r1
    6d7c:	40 f4       	brcc	.+16     	; 0x6d8e <tm_mon_to_ascii+0x16>
    6d7e:	88 0f       	add	r24, r24
    6d80:	99 1f       	adc	r25, r25
    6d82:	fc 01       	movw	r30, r24
    6d84:	e5 5f       	subi	r30, 0xF5	; 245
    6d86:	fe 4f       	sbci	r31, 0xFE	; 254
    6d88:	80 81       	ld	r24, Z
    6d8a:	91 81       	ldd	r25, Z+1	; 0x01
    6d8c:	08 95       	ret
    6d8e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    6d92:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    6d96:	08 95       	ret

00006d98 <Days_Per_Month>:
    6d98:	cf 93       	push	r28
    6d9a:	df 93       	push	r29
    6d9c:	8c 30       	cpi	r24, 0x0C	; 12
    6d9e:	91 05       	cpc	r25, r1
    6da0:	24 f0       	brlt	.+8      	; 0x6daa <Days_Per_Month+0x12>
    6da2:	6f 5f       	subi	r22, 0xFF	; 255
    6da4:	7f 4f       	sbci	r23, 0xFF	; 255
    6da6:	0c 97       	sbiw	r24, 0x0c	; 12
    6da8:	f9 cf       	rjmp	.-14     	; 0x6d9c <Days_Per_Month+0x4>
    6daa:	97 ff       	sbrs	r25, 7
    6dac:	04 c0       	rjmp	.+8      	; 0x6db6 <Days_Per_Month+0x1e>
    6dae:	61 50       	subi	r22, 0x01	; 1
    6db0:	71 09       	sbc	r23, r1
    6db2:	0c 96       	adiw	r24, 0x0c	; 12
    6db4:	fa cf       	rjmp	.-12     	; 0x6daa <Days_Per_Month+0x12>
    6db6:	fc 01       	movw	r30, r24
    6db8:	ee 0f       	add	r30, r30
    6dba:	ff 1f       	adc	r31, r31
    6dbc:	e9 58       	subi	r30, 0x89	; 137
    6dbe:	fc 4f       	sbci	r31, 0xFC	; 252
    6dc0:	c0 81       	ld	r28, Z
    6dc2:	d1 81       	ldd	r29, Z+1	; 0x01
    6dc4:	01 97       	sbiw	r24, 0x01	; 1
    6dc6:	29 f4       	brne	.+10     	; 0x6dd2 <Days_Per_Month+0x3a>
    6dc8:	cb 01       	movw	r24, r22
    6dca:	c1 df       	rcall	.-126    	; 0x6d4e <IS_Leap>
    6dcc:	89 2b       	or	r24, r25
    6dce:	09 f0       	breq	.+2      	; 0x6dd2 <Days_Per_Month+0x3a>
    6dd0:	21 96       	adiw	r28, 0x01	; 1
    6dd2:	ce 01       	movw	r24, r28
    6dd4:	df 91       	pop	r29
    6dd6:	cf 91       	pop	r28
    6dd8:	08 95       	ret

00006dda <time_to_tm>:
    6dda:	a0 e0       	ldi	r26, 0x00	; 0
    6ddc:	b0 e0       	ldi	r27, 0x00	; 0
    6dde:	e3 ef       	ldi	r30, 0xF3	; 243
    6de0:	f6 e3       	ldi	r31, 0x36	; 54
    6de2:	0c 94 d1 e2 	jmp	0x1c5a2	; 0x1c5a2 <__prologue_saves__+0x4>
    6de6:	e8 01       	movw	r28, r16
    6de8:	e6 e1       	ldi	r30, 0x16	; 22
    6dea:	d8 01       	movw	r26, r16
    6dec:	1d 92       	st	X+, r1
    6dee:	ea 95       	dec	r30
    6df0:	e9 f7       	brne	.-6      	; 0x6dec <time_to_tm+0x12>
    6df2:	61 15       	cp	r22, r1
    6df4:	bd e5       	ldi	r27, 0x5D	; 93
    6df6:	7b 07       	cpc	r23, r27
    6df8:	bd ef       	ldi	r27, 0xFD	; 253
    6dfa:	8b 07       	cpc	r24, r27
    6dfc:	bf ef       	ldi	r27, 0xFF	; 255
    6dfe:	9b 07       	cpc	r25, r27
    6e00:	08 f0       	brcs	.+2      	; 0x6e04 <time_to_tm+0x2a>
    6e02:	c0 c0       	rjmp	.+384    	; 0x6f84 <time_to_tm+0x1aa>
    6e04:	6b 01       	movw	r12, r22
    6e06:	7c 01       	movw	r14, r24
    6e08:	c2 1a       	sub	r12, r18
    6e0a:	d3 0a       	sbc	r13, r19
    6e0c:	e4 0a       	sbc	r14, r20
    6e0e:	f5 0a       	sbc	r15, r21
    6e10:	46 01       	movw	r8, r12
    6e12:	57 01       	movw	r10, r14
    6e14:	e0 e8       	ldi	r30, 0x80	; 128
    6e16:	ce 16       	cp	r12, r30
    6e18:	ee ea       	ldi	r30, 0xAE	; 174
    6e1a:	de 06       	cpc	r13, r30
    6e1c:	ee ef       	ldi	r30, 0xFE	; 254
    6e1e:	ee 06       	cpc	r14, r30
    6e20:	ef ef       	ldi	r30, 0xFF	; 255
    6e22:	fe 06       	cpc	r15, r30
    6e24:	50 f0       	brcs	.+20     	; 0x6e3a <time_to_tm+0x60>
    6e26:	80 e8       	ldi	r24, 0x80	; 128
    6e28:	88 0e       	add	r8, r24
    6e2a:	81 e5       	ldi	r24, 0x51	; 81
    6e2c:	98 1e       	adc	r9, r24
    6e2e:	81 e0       	ldi	r24, 0x01	; 1
    6e30:	a8 1e       	adc	r10, r24
    6e32:	b1 1c       	adc	r11, r1
    6e34:	01 e0       	ldi	r16, 0x01	; 1
    6e36:	10 e0       	ldi	r17, 0x00	; 0
    6e38:	02 c0       	rjmp	.+4      	; 0x6e3e <time_to_tm+0x64>
    6e3a:	00 e0       	ldi	r16, 0x00	; 0
    6e3c:	10 e0       	ldi	r17, 0x00	; 0
    6e3e:	8c e3       	ldi	r24, 0x3C	; 60
    6e40:	48 2e       	mov	r4, r24
    6e42:	51 2c       	mov	r5, r1
    6e44:	61 2c       	mov	r6, r1
    6e46:	71 2c       	mov	r7, r1
    6e48:	c5 01       	movw	r24, r10
    6e4a:	b4 01       	movw	r22, r8
    6e4c:	a3 01       	movw	r20, r6
    6e4e:	92 01       	movw	r18, r4
    6e50:	0e 94 62 e2 	call	0x1c4c4	; 0x1c4c4 <__udivmodsi4>
    6e54:	79 83       	std	Y+1, r23	; 0x01
    6e56:	68 83       	st	Y, r22
    6e58:	ca 01       	movw	r24, r20
    6e5a:	b9 01       	movw	r22, r18
    6e5c:	a3 01       	movw	r20, r6
    6e5e:	92 01       	movw	r18, r4
    6e60:	0e 94 62 e2 	call	0x1c4c4	; 0x1c4c4 <__udivmodsi4>
    6e64:	7b 83       	std	Y+3, r23	; 0x03
    6e66:	6a 83       	std	Y+2, r22	; 0x02
    6e68:	c5 01       	movw	r24, r10
    6e6a:	b4 01       	movw	r22, r8
    6e6c:	20 e1       	ldi	r18, 0x10	; 16
    6e6e:	3e e0       	ldi	r19, 0x0E	; 14
    6e70:	40 e0       	ldi	r20, 0x00	; 0
    6e72:	50 e0       	ldi	r21, 0x00	; 0
    6e74:	0e 94 62 e2 	call	0x1c4c4	; 0x1c4c4 <__udivmodsi4>
    6e78:	ca 01       	movw	r24, r20
    6e7a:	b9 01       	movw	r22, r18
    6e7c:	28 e1       	ldi	r18, 0x18	; 24
    6e7e:	30 e0       	ldi	r19, 0x00	; 0
    6e80:	40 e0       	ldi	r20, 0x00	; 0
    6e82:	50 e0       	ldi	r21, 0x00	; 0
    6e84:	0e 94 62 e2 	call	0x1c4c4	; 0x1c4c4 <__udivmodsi4>
    6e88:	7d 83       	std	Y+5, r23	; 0x05
    6e8a:	6c 83       	std	Y+4, r22	; 0x04
    6e8c:	01 15       	cp	r16, r1
    6e8e:	11 05       	cpc	r17, r1
    6e90:	89 f0       	breq	.+34     	; 0x6eb4 <time_to_tm+0xda>
    6e92:	85 e4       	ldi	r24, 0x45	; 69
    6e94:	90 e0       	ldi	r25, 0x00	; 0
    6e96:	9b 87       	std	Y+11, r25	; 0x0b
    6e98:	8a 87       	std	Y+10, r24	; 0x0a
    6e9a:	8b e0       	ldi	r24, 0x0B	; 11
    6e9c:	90 e0       	ldi	r25, 0x00	; 0
    6e9e:	99 87       	std	Y+9, r25	; 0x09
    6ea0:	88 87       	std	Y+8, r24	; 0x08
    6ea2:	8f e1       	ldi	r24, 0x1F	; 31
    6ea4:	90 e0       	ldi	r25, 0x00	; 0
    6ea6:	9f 83       	std	Y+7, r25	; 0x07
    6ea8:	8e 83       	std	Y+6, r24	; 0x06
    6eaa:	83 e0       	ldi	r24, 0x03	; 3
    6eac:	90 e0       	ldi	r25, 0x00	; 0
    6eae:	9d 87       	std	Y+13, r25	; 0x0d
    6eb0:	8c 87       	std	Y+12, r24	; 0x0c
    6eb2:	65 c0       	rjmp	.+202    	; 0x6f7e <time_to_tm+0x1a4>
    6eb4:	c5 01       	movw	r24, r10
    6eb6:	b4 01       	movw	r22, r8
    6eb8:	20 e8       	ldi	r18, 0x80	; 128
    6eba:	31 e5       	ldi	r19, 0x51	; 81
    6ebc:	41 e0       	ldi	r20, 0x01	; 1
    6ebe:	50 e0       	ldi	r21, 0x00	; 0
    6ec0:	0e 94 62 e2 	call	0x1c4c4	; 0x1c4c4 <__udivmodsi4>
    6ec4:	49 01       	movw	r8, r18
    6ec6:	5a 01       	movw	r10, r20
    6ec8:	ca 01       	movw	r24, r20
    6eca:	b9 01       	movw	r22, r18
    6ecc:	6c 5f       	subi	r22, 0xFC	; 252
    6ece:	7f 4f       	sbci	r23, 0xFF	; 255
    6ed0:	8f 4f       	sbci	r24, 0xFF	; 255
    6ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ed4:	27 e0       	ldi	r18, 0x07	; 7
    6ed6:	30 e0       	ldi	r19, 0x00	; 0
    6ed8:	40 e0       	ldi	r20, 0x00	; 0
    6eda:	50 e0       	ldi	r21, 0x00	; 0
    6edc:	0e 94 84 e2 	call	0x1c508	; 0x1c508 <__divmodsi4>
    6ee0:	7d 87       	std	Y+13, r23	; 0x0d
    6ee2:	6c 87       	std	Y+12, r22	; 0x0c
    6ee4:	02 eb       	ldi	r16, 0xB2	; 178
    6ee6:	17 e0       	ldi	r17, 0x07	; 7
    6ee8:	c8 01       	movw	r24, r16
    6eea:	31 df       	rcall	.-414    	; 0x6d4e <IS_Leap>
    6eec:	00 97       	sbiw	r24, 0x00	; 0
    6eee:	19 f4       	brne	.+6      	; 0x6ef6 <time_to_tm+0x11c>
    6ef0:	4d e6       	ldi	r20, 0x6D	; 109
    6ef2:	51 e0       	ldi	r21, 0x01	; 1
    6ef4:	02 c0       	rjmp	.+4      	; 0x6efa <time_to_tm+0x120>
    6ef6:	4e e6       	ldi	r20, 0x6E	; 110
    6ef8:	51 e0       	ldi	r21, 0x01	; 1
    6efa:	05 2e       	mov	r0, r21
    6efc:	00 0c       	add	r0, r0
    6efe:	66 0b       	sbc	r22, r22
    6f00:	77 0b       	sbc	r23, r23
    6f02:	84 16       	cp	r8, r20
    6f04:	95 06       	cpc	r9, r21
    6f06:	a6 06       	cpc	r10, r22
    6f08:	b7 06       	cpc	r11, r23
    6f0a:	3c f0       	brlt	.+14     	; 0x6f1a <time_to_tm+0x140>
    6f0c:	0f 5f       	subi	r16, 0xFF	; 255
    6f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    6f10:	84 1a       	sub	r8, r20
    6f12:	95 0a       	sbc	r9, r21
    6f14:	a6 0a       	sbc	r10, r22
    6f16:	b7 0a       	sbc	r11, r23
    6f18:	e7 cf       	rjmp	.-50     	; 0x6ee8 <time_to_tm+0x10e>
    6f1a:	0c 56       	subi	r16, 0x6C	; 108
    6f1c:	17 40       	sbci	r17, 0x07	; 7
    6f1e:	1b 87       	std	Y+11, r17	; 0x0b
    6f20:	0a 87       	std	Y+10, r16	; 0x0a
    6f22:	9f 86       	std	Y+15, r9	; 0x0f
    6f24:	8e 86       	std	Y+14, r8	; 0x0e
    6f26:	e7 e7       	ldi	r30, 0x77	; 119
    6f28:	f3 e0       	ldi	r31, 0x03	; 3
    6f2a:	20 e0       	ldi	r18, 0x00	; 0
    6f2c:	30 e0       	ldi	r19, 0x00	; 0
    6f2e:	18 14       	cp	r1, r8
    6f30:	19 04       	cpc	r1, r9
    6f32:	1a 04       	cpc	r1, r10
    6f34:	1b 04       	cpc	r1, r11
    6f36:	e4 f4       	brge	.+56     	; 0x6f70 <time_to_tm+0x196>
    6f38:	2c 30       	cpi	r18, 0x0C	; 12
    6f3a:	31 05       	cpc	r19, r1
    6f3c:	c9 f0       	breq	.+50     	; 0x6f70 <time_to_tm+0x196>
    6f3e:	41 91       	ld	r20, Z+
    6f40:	51 91       	ld	r21, Z+
    6f42:	21 30       	cpi	r18, 0x01	; 1
    6f44:	31 05       	cpc	r19, r1
    6f46:	21 f4       	brne	.+8      	; 0x6f50 <time_to_tm+0x176>
    6f48:	00 97       	sbiw	r24, 0x00	; 0
    6f4a:	11 f0       	breq	.+4      	; 0x6f50 <time_to_tm+0x176>
    6f4c:	4f 5f       	subi	r20, 0xFF	; 255
    6f4e:	5f 4f       	sbci	r21, 0xFF	; 255
    6f50:	05 2e       	mov	r0, r21
    6f52:	00 0c       	add	r0, r0
    6f54:	66 0b       	sbc	r22, r22
    6f56:	77 0b       	sbc	r23, r23
    6f58:	84 16       	cp	r8, r20
    6f5a:	95 06       	cpc	r9, r21
    6f5c:	a6 06       	cpc	r10, r22
    6f5e:	b7 06       	cpc	r11, r23
    6f60:	3c f0       	brlt	.+14     	; 0x6f70 <time_to_tm+0x196>
    6f62:	84 1a       	sub	r8, r20
    6f64:	95 0a       	sbc	r9, r21
    6f66:	a6 0a       	sbc	r10, r22
    6f68:	b7 0a       	sbc	r11, r23
    6f6a:	2f 5f       	subi	r18, 0xFF	; 255
    6f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    6f6e:	df cf       	rjmp	.-66     	; 0x6f2e <time_to_tm+0x154>
    6f70:	39 87       	std	Y+9, r19	; 0x09
    6f72:	28 87       	std	Y+8, r18	; 0x08
    6f74:	af ef       	ldi	r26, 0xFF	; 255
    6f76:	8a 1a       	sub	r8, r26
    6f78:	9a 0a       	sbc	r9, r26
    6f7a:	9f 82       	std	Y+7, r9	; 0x07
    6f7c:	8e 82       	std	Y+6, r8	; 0x06
    6f7e:	b6 01       	movw	r22, r12
    6f80:	c7 01       	movw	r24, r14
    6f82:	04 c0       	rjmp	.+8      	; 0x6f8c <time_to_tm+0x1b2>
    6f84:	6f ef       	ldi	r22, 0xFF	; 255
    6f86:	7f ef       	ldi	r23, 0xFF	; 255
    6f88:	8f ef       	ldi	r24, 0xFF	; 255
    6f8a:	9f ef       	ldi	r25, 0xFF	; 255
    6f8c:	cd b7       	in	r28, 0x3d	; 61
    6f8e:	de b7       	in	r29, 0x3e	; 62
    6f90:	e0 e1       	ldi	r30, 0x10	; 16
    6f92:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__epilogue_restores__+0x4>

00006f96 <gmtime_r>:
    6f96:	0f 93       	push	r16
    6f98:	1f 93       	push	r17
    6f9a:	cf 93       	push	r28
    6f9c:	df 93       	push	r29
    6f9e:	eb 01       	movw	r28, r22
    6fa0:	fc 01       	movw	r30, r24
    6fa2:	60 81       	ld	r22, Z
    6fa4:	71 81       	ldd	r23, Z+1	; 0x01
    6fa6:	82 81       	ldd	r24, Z+2	; 0x02
    6fa8:	93 81       	ldd	r25, Z+3	; 0x03
    6faa:	8e 01       	movw	r16, r28
    6fac:	20 e0       	ldi	r18, 0x00	; 0
    6fae:	30 e0       	ldi	r19, 0x00	; 0
    6fb0:	a9 01       	movw	r20, r18
    6fb2:	13 df       	rcall	.-474    	; 0x6dda <time_to_tm>
    6fb4:	ce 01       	movw	r24, r28
    6fb6:	df 91       	pop	r29
    6fb8:	cf 91       	pop	r28
    6fba:	1f 91       	pop	r17
    6fbc:	0f 91       	pop	r16
    6fbe:	08 95       	ret

00006fc0 <gmtime>:
    6fc0:	25 ec       	ldi	r18, 0xC5	; 197
    6fc2:	37 e1       	ldi	r19, 0x17	; 23
    6fc4:	30 93 dc 17 	sts	0x17DC, r19	; 0x8017dc <p.3803+0x1>
    6fc8:	20 93 db 17 	sts	0x17DB, r18	; 0x8017db <p.3803>
    6fcc:	b9 01       	movw	r22, r18
    6fce:	e3 df       	rcall	.-58     	; 0x6f96 <gmtime_r>
    6fd0:	85 ec       	ldi	r24, 0xC5	; 197
    6fd2:	97 e1       	ldi	r25, 0x17	; 23
    6fd4:	08 95       	ret

00006fd6 <gettimezone>:
    6fd6:	e3 e6       	ldi	r30, 0x63	; 99
    6fd8:	fa e1       	ldi	r31, 0x1A	; 26
    6fda:	20 81       	ld	r18, Z
    6fdc:	31 81       	ldd	r19, Z+1	; 0x01
    6fde:	dc 01       	movw	r26, r24
    6fe0:	2d 93       	st	X+, r18
    6fe2:	3c 93       	st	X, r19
    6fe4:	22 81       	ldd	r18, Z+2	; 0x02
    6fe6:	33 81       	ldd	r19, Z+3	; 0x03
    6fe8:	fc 01       	movw	r30, r24
    6fea:	33 83       	std	Z+3, r19	; 0x03
    6fec:	22 83       	std	Z+2, r18	; 0x02
    6fee:	80 e0       	ldi	r24, 0x00	; 0
    6ff0:	90 e0       	ldi	r25, 0x00	; 0
    6ff2:	08 95       	ret

00006ff4 <settimezone>:
    6ff4:	cf 93       	push	r28
    6ff6:	df 93       	push	r29
    6ff8:	ec 01       	movw	r28, r24
    6ffa:	28 81       	ld	r18, Y
    6ffc:	39 81       	ldd	r19, Y+1	; 0x01
    6ffe:	e3 e6       	ldi	r30, 0x63	; 99
    7000:	fa e1       	ldi	r31, 0x1A	; 26
    7002:	31 83       	std	Z+1, r19	; 0x01
    7004:	20 83       	st	Z, r18
    7006:	8a 81       	ldd	r24, Y+2	; 0x02
    7008:	9b 81       	ldd	r25, Y+3	; 0x03
    700a:	93 83       	std	Z+3, r25	; 0x03
    700c:	82 83       	std	Z+2, r24	; 0x02
    700e:	80 e0       	ldi	r24, 0x00	; 0
    7010:	90 e0       	ldi	r25, 0x00	; 0
    7012:	df 91       	pop	r29
    7014:	cf 91       	pop	r28
    7016:	08 95       	ret

00007018 <gettimeofday>:
    7018:	a8 e0       	ldi	r26, 0x08	; 8
    701a:	b0 e0       	ldi	r27, 0x00	; 0
    701c:	e2 e1       	ldi	r30, 0x12	; 18
    701e:	f8 e3       	ldi	r31, 0x38	; 56
    7020:	0c 94 db e2 	jmp	0x1c5b6	; 0x1c5b6 <__prologue_saves__+0x18>
    7024:	8c 01       	movw	r16, r24
    7026:	7b 01       	movw	r14, r22
    7028:	be 01       	movw	r22, r28
    702a:	6f 5f       	subi	r22, 0xFF	; 255
    702c:	7f 4f       	sbci	r23, 0xFF	; 255
    702e:	80 e0       	ldi	r24, 0x00	; 0
    7030:	90 e0       	ldi	r25, 0x00	; 0
    7032:	dc db       	rcall	.-2120   	; 0x67ec <clock_gettime>
    7034:	89 81       	ldd	r24, Y+1	; 0x01
    7036:	9a 81       	ldd	r25, Y+2	; 0x02
    7038:	ab 81       	ldd	r26, Y+3	; 0x03
    703a:	bc 81       	ldd	r27, Y+4	; 0x04
    703c:	f8 01       	movw	r30, r16
    703e:	80 83       	st	Z, r24
    7040:	91 83       	std	Z+1, r25	; 0x01
    7042:	a2 83       	std	Z+2, r26	; 0x02
    7044:	b3 83       	std	Z+3, r27	; 0x03
    7046:	6d 81       	ldd	r22, Y+5	; 0x05
    7048:	7e 81       	ldd	r23, Y+6	; 0x06
    704a:	8f 81       	ldd	r24, Y+7	; 0x07
    704c:	98 85       	ldd	r25, Y+8	; 0x08
    704e:	28 ee       	ldi	r18, 0xE8	; 232
    7050:	33 e0       	ldi	r19, 0x03	; 3
    7052:	40 e0       	ldi	r20, 0x00	; 0
    7054:	50 e0       	ldi	r21, 0x00	; 0
    7056:	0e 94 84 e2 	call	0x1c508	; 0x1c508 <__divmodsi4>
    705a:	f8 01       	movw	r30, r16
    705c:	24 83       	std	Z+4, r18	; 0x04
    705e:	35 83       	std	Z+5, r19	; 0x05
    7060:	46 83       	std	Z+6, r20	; 0x06
    7062:	57 83       	std	Z+7, r21	; 0x07
    7064:	c7 01       	movw	r24, r14
    7066:	b7 df       	rcall	.-146    	; 0x6fd6 <gettimezone>
    7068:	80 e0       	ldi	r24, 0x00	; 0
    706a:	90 e0       	ldi	r25, 0x00	; 0
    706c:	28 96       	adiw	r28, 0x08	; 8
    706e:	e6 e0       	ldi	r30, 0x06	; 6
    7070:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

00007074 <time>:
    7074:	cf 93       	push	r28
    7076:	df 93       	push	r29
    7078:	ec 01       	movw	r28, r24
    707a:	67 ea       	ldi	r22, 0xA7	; 167
    707c:	77 e1       	ldi	r23, 0x17	; 23
    707e:	80 e0       	ldi	r24, 0x00	; 0
    7080:	90 e0       	ldi	r25, 0x00	; 0
    7082:	b4 db       	rcall	.-2200   	; 0x67ec <clock_gettime>
    7084:	20 97       	sbiw	r28, 0x00	; 0
    7086:	61 f0       	breq	.+24     	; 0x70a0 <time+0x2c>
    7088:	80 91 a7 17 	lds	r24, 0x17A7	; 0x8017a7 <ts.3881>
    708c:	90 91 a8 17 	lds	r25, 0x17A8	; 0x8017a8 <ts.3881+0x1>
    7090:	a0 91 a9 17 	lds	r26, 0x17A9	; 0x8017a9 <ts.3881+0x2>
    7094:	b0 91 aa 17 	lds	r27, 0x17AA	; 0x8017aa <ts.3881+0x3>
    7098:	88 83       	st	Y, r24
    709a:	99 83       	std	Y+1, r25	; 0x01
    709c:	aa 83       	std	Y+2, r26	; 0x02
    709e:	bb 83       	std	Y+3, r27	; 0x03
    70a0:	60 91 a7 17 	lds	r22, 0x17A7	; 0x8017a7 <ts.3881>
    70a4:	70 91 a8 17 	lds	r23, 0x17A8	; 0x8017a8 <ts.3881+0x1>
    70a8:	80 91 a9 17 	lds	r24, 0x17A9	; 0x8017a9 <ts.3881+0x2>
    70ac:	90 91 aa 17 	lds	r25, 0x17AA	; 0x8017aa <ts.3881+0x3>
    70b0:	df 91       	pop	r29
    70b2:	cf 91       	pop	r28
    70b4:	08 95       	ret

000070b6 <is_dst>:
    70b6:	cf 92       	push	r12
    70b8:	df 92       	push	r13
    70ba:	ef 92       	push	r14
    70bc:	ff 92       	push	r15
    70be:	6b 01       	movw	r12, r22
    70c0:	7c 01       	movw	r14, r24
    70c2:	05 d4       	rcall	.+2058   	; 0x78ce <set_dst>
    70c4:	80 91 67 1a 	lds	r24, 0x1A67	; 0x801a67 <dst>
    70c8:	90 91 68 1a 	lds	r25, 0x1A68	; 0x801a68 <dst+0x1>
    70cc:	a0 91 69 1a 	lds	r26, 0x1A69	; 0x801a69 <dst+0x2>
    70d0:	b0 91 6a 1a 	lds	r27, 0x1A6A	; 0x801a6a <dst+0x3>
    70d4:	c8 16       	cp	r12, r24
    70d6:	d9 06       	cpc	r13, r25
    70d8:	ea 06       	cpc	r14, r26
    70da:	fb 06       	cpc	r15, r27
    70dc:	88 f0       	brcs	.+34     	; 0x7100 <is_dst+0x4a>
    70de:	81 e0       	ldi	r24, 0x01	; 1
    70e0:	90 e0       	ldi	r25, 0x00	; 0
    70e2:	40 91 6b 1a 	lds	r20, 0x1A6B	; 0x801a6b <dst+0x4>
    70e6:	50 91 6c 1a 	lds	r21, 0x1A6C	; 0x801a6c <dst+0x5>
    70ea:	60 91 6d 1a 	lds	r22, 0x1A6D	; 0x801a6d <dst+0x6>
    70ee:	70 91 6e 1a 	lds	r23, 0x1A6E	; 0x801a6e <dst+0x7>
    70f2:	4c 15       	cp	r20, r12
    70f4:	5d 05       	cpc	r21, r13
    70f6:	6e 05       	cpc	r22, r14
    70f8:	7f 05       	cpc	r23, r15
    70fa:	20 f4       	brcc	.+8      	; 0x7104 <is_dst+0x4e>
    70fc:	80 e0       	ldi	r24, 0x00	; 0
    70fe:	02 c0       	rjmp	.+4      	; 0x7104 <is_dst+0x4e>
    7100:	80 e0       	ldi	r24, 0x00	; 0
    7102:	90 e0       	ldi	r25, 0x00	; 0
    7104:	ff 90       	pop	r15
    7106:	ef 90       	pop	r14
    7108:	df 90       	pop	r13
    710a:	cf 90       	pop	r12
    710c:	08 95       	ret

0000710e <localtime_r>:
    710e:	4f 92       	push	r4
    7110:	5f 92       	push	r5
    7112:	6f 92       	push	r6
    7114:	7f 92       	push	r7
    7116:	af 92       	push	r10
    7118:	bf 92       	push	r11
    711a:	cf 92       	push	r12
    711c:	df 92       	push	r13
    711e:	ef 92       	push	r14
    7120:	ff 92       	push	r15
    7122:	0f 93       	push	r16
    7124:	1f 93       	push	r17
    7126:	cf 93       	push	r28
    7128:	df 93       	push	r29
    712a:	00 d0       	rcall	.+0      	; 0x712c <localtime_r+0x1e>
    712c:	00 d0       	rcall	.+0      	; 0x712e <localtime_r+0x20>
    712e:	cd b7       	in	r28, 0x3d	; 61
    7130:	de b7       	in	r29, 0x3e	; 62
    7132:	5b 01       	movw	r10, r22
    7134:	fc 01       	movw	r30, r24
    7136:	40 80       	ld	r4, Z
    7138:	51 80       	ldd	r5, Z+1	; 0x01
    713a:	62 80       	ldd	r6, Z+2	; 0x02
    713c:	73 80       	ldd	r7, Z+3	; 0x03
    713e:	ce 01       	movw	r24, r28
    7140:	01 96       	adiw	r24, 0x01	; 1
    7142:	49 df       	rcall	.-366    	; 0x6fd6 <gettimezone>
    7144:	a9 81       	ldd	r26, Y+1	; 0x01
    7146:	ba 81       	ldd	r27, Y+2	; 0x02
    7148:	2c e3       	ldi	r18, 0x3C	; 60
    714a:	30 e0       	ldi	r19, 0x00	; 0
    714c:	0e 94 a9 e2 	call	0x1c552	; 0x1c552 <__usmulhisi3>
    7150:	6b 01       	movw	r12, r22
    7152:	7c 01       	movw	r14, r24
    7154:	c3 01       	movw	r24, r6
    7156:	b2 01       	movw	r22, r4
    7158:	6c 19       	sub	r22, r12
    715a:	7d 09       	sbc	r23, r13
    715c:	8e 09       	sbc	r24, r14
    715e:	9f 09       	sbc	r25, r15
    7160:	aa df       	rcall	.-172    	; 0x70b6 <is_dst>
    7162:	89 2b       	or	r24, r25
    7164:	31 f0       	breq	.+12     	; 0x7172 <localtime_r+0x64>
    7166:	f0 e1       	ldi	r31, 0x10	; 16
    7168:	cf 1a       	sub	r12, r31
    716a:	fe e0       	ldi	r31, 0x0E	; 14
    716c:	df 0a       	sbc	r13, r31
    716e:	e1 08       	sbc	r14, r1
    7170:	f1 08       	sbc	r15, r1
    7172:	85 01       	movw	r16, r10
    7174:	a7 01       	movw	r20, r14
    7176:	96 01       	movw	r18, r12
    7178:	c3 01       	movw	r24, r6
    717a:	b2 01       	movw	r22, r4
    717c:	2e de       	rcall	.-932    	; 0x6dda <time_to_tm>
    717e:	c5 01       	movw	r24, r10
    7180:	0f 90       	pop	r0
    7182:	0f 90       	pop	r0
    7184:	0f 90       	pop	r0
    7186:	0f 90       	pop	r0
    7188:	df 91       	pop	r29
    718a:	cf 91       	pop	r28
    718c:	1f 91       	pop	r17
    718e:	0f 91       	pop	r16
    7190:	ff 90       	pop	r15
    7192:	ef 90       	pop	r14
    7194:	df 90       	pop	r13
    7196:	cf 90       	pop	r12
    7198:	bf 90       	pop	r11
    719a:	af 90       	pop	r10
    719c:	7f 90       	pop	r7
    719e:	6f 90       	pop	r6
    71a0:	5f 90       	pop	r5
    71a2:	4f 90       	pop	r4
    71a4:	08 95       	ret

000071a6 <localtime>:
    71a6:	6f ea       	ldi	r22, 0xAF	; 175
    71a8:	77 e1       	ldi	r23, 0x17	; 23
    71aa:	b1 cf       	rjmp	.-158    	; 0x710e <localtime_r>
    71ac:	08 95       	ret

000071ae <normalize>:
    71ae:	aa e0       	ldi	r26, 0x0A	; 10
    71b0:	b0 e0       	ldi	r27, 0x00	; 0
    71b2:	ed ed       	ldi	r30, 0xDD	; 221
    71b4:	f8 e3       	ldi	r31, 0x38	; 56
    71b6:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
    71ba:	7c 01       	movw	r14, r24
    71bc:	7a 87       	std	Y+10, r23	; 0x0a
    71be:	69 87       	std	Y+9, r22	; 0x09
    71c0:	f7 01       	movw	r30, r14
    71c2:	80 81       	ld	r24, Z
    71c4:	91 81       	ldd	r25, Z+1	; 0x01
    71c6:	8c 33       	cpi	r24, 0x3C	; 60
    71c8:	91 05       	cpc	r25, r1
    71ca:	5c f0       	brlt	.+22     	; 0x71e2 <normalize+0x34>
    71cc:	f7 01       	movw	r30, r14
    71ce:	22 81       	ldd	r18, Z+2	; 0x02
    71d0:	33 81       	ldd	r19, Z+3	; 0x03
    71d2:	2f 5f       	subi	r18, 0xFF	; 255
    71d4:	3f 4f       	sbci	r19, 0xFF	; 255
    71d6:	33 83       	std	Z+3, r19	; 0x03
    71d8:	22 83       	std	Z+2, r18	; 0x02
    71da:	cc 97       	sbiw	r24, 0x3c	; 60
    71dc:	91 83       	std	Z+1, r25	; 0x01
    71de:	80 83       	st	Z, r24
    71e0:	ef cf       	rjmp	.-34     	; 0x71c0 <normalize+0x12>
    71e2:	f7 01       	movw	r30, r14
    71e4:	01 90       	ld	r0, Z+
    71e6:	f0 81       	ld	r31, Z
    71e8:	e0 2d       	mov	r30, r0
    71ea:	fe 83       	std	Y+6, r31	; 0x06
    71ec:	ed 83       	std	Y+5, r30	; 0x05
    71ee:	f7 ff       	sbrs	r31, 7
    71f0:	0d c0       	rjmp	.+26     	; 0x720c <normalize+0x5e>
    71f2:	f7 01       	movw	r30, r14
    71f4:	82 81       	ldd	r24, Z+2	; 0x02
    71f6:	93 81       	ldd	r25, Z+3	; 0x03
    71f8:	01 97       	sbiw	r24, 0x01	; 1
    71fa:	93 83       	std	Z+3, r25	; 0x03
    71fc:	82 83       	std	Z+2, r24	; 0x02
    71fe:	6d 81       	ldd	r22, Y+5	; 0x05
    7200:	7e 81       	ldd	r23, Y+6	; 0x06
    7202:	64 5c       	subi	r22, 0xC4	; 196
    7204:	7f 4f       	sbci	r23, 0xFF	; 255
    7206:	71 83       	std	Z+1, r23	; 0x01
    7208:	60 83       	st	Z, r22
    720a:	eb cf       	rjmp	.-42     	; 0x71e2 <normalize+0x34>
    720c:	f7 01       	movw	r30, r14
    720e:	82 81       	ldd	r24, Z+2	; 0x02
    7210:	93 81       	ldd	r25, Z+3	; 0x03
    7212:	8c 33       	cpi	r24, 0x3C	; 60
    7214:	91 05       	cpc	r25, r1
    7216:	5c f0       	brlt	.+22     	; 0x722e <normalize+0x80>
    7218:	f7 01       	movw	r30, r14
    721a:	24 81       	ldd	r18, Z+4	; 0x04
    721c:	35 81       	ldd	r19, Z+5	; 0x05
    721e:	2f 5f       	subi	r18, 0xFF	; 255
    7220:	3f 4f       	sbci	r19, 0xFF	; 255
    7222:	35 83       	std	Z+5, r19	; 0x05
    7224:	24 83       	std	Z+4, r18	; 0x04
    7226:	cc 97       	sbiw	r24, 0x3c	; 60
    7228:	93 83       	std	Z+3, r25	; 0x03
    722a:	82 83       	std	Z+2, r24	; 0x02
    722c:	ef cf       	rjmp	.-34     	; 0x720c <normalize+0x5e>
    722e:	f7 01       	movw	r30, r14
    7230:	22 80       	ldd	r2, Z+2	; 0x02
    7232:	33 80       	ldd	r3, Z+3	; 0x03
    7234:	37 fe       	sbrs	r3, 7
    7236:	0d c0       	rjmp	.+26     	; 0x7252 <normalize+0xa4>
    7238:	f7 01       	movw	r30, r14
    723a:	84 81       	ldd	r24, Z+4	; 0x04
    723c:	95 81       	ldd	r25, Z+5	; 0x05
    723e:	01 97       	sbiw	r24, 0x01	; 1
    7240:	95 83       	std	Z+5, r25	; 0x05
    7242:	84 83       	std	Z+4, r24	; 0x04
    7244:	fc e3       	ldi	r31, 0x3C	; 60
    7246:	2f 0e       	add	r2, r31
    7248:	31 1c       	adc	r3, r1
    724a:	f7 01       	movw	r30, r14
    724c:	33 82       	std	Z+3, r3	; 0x03
    724e:	22 82       	std	Z+2, r2	; 0x02
    7250:	ee cf       	rjmp	.-36     	; 0x722e <normalize+0x80>
    7252:	f7 01       	movw	r30, r14
    7254:	84 81       	ldd	r24, Z+4	; 0x04
    7256:	95 81       	ldd	r25, Z+5	; 0x05
    7258:	88 31       	cpi	r24, 0x18	; 24
    725a:	91 05       	cpc	r25, r1
    725c:	5c f0       	brlt	.+22     	; 0x7274 <normalize+0xc6>
    725e:	f7 01       	movw	r30, r14
    7260:	26 81       	ldd	r18, Z+6	; 0x06
    7262:	37 81       	ldd	r19, Z+7	; 0x07
    7264:	2f 5f       	subi	r18, 0xFF	; 255
    7266:	3f 4f       	sbci	r19, 0xFF	; 255
    7268:	37 83       	std	Z+7, r19	; 0x07
    726a:	26 83       	std	Z+6, r18	; 0x06
    726c:	48 97       	sbiw	r24, 0x18	; 24
    726e:	95 83       	std	Z+5, r25	; 0x05
    7270:	84 83       	std	Z+4, r24	; 0x04
    7272:	ef cf       	rjmp	.-34     	; 0x7252 <normalize+0xa4>
    7274:	f7 01       	movw	r30, r14
    7276:	04 81       	ldd	r16, Z+4	; 0x04
    7278:	15 81       	ldd	r17, Z+5	; 0x05
    727a:	17 ff       	sbrs	r17, 7
    727c:	0b c0       	rjmp	.+22     	; 0x7294 <normalize+0xe6>
    727e:	f7 01       	movw	r30, r14
    7280:	86 81       	ldd	r24, Z+6	; 0x06
    7282:	97 81       	ldd	r25, Z+7	; 0x07
    7284:	01 97       	sbiw	r24, 0x01	; 1
    7286:	97 83       	std	Z+7, r25	; 0x07
    7288:	86 83       	std	Z+6, r24	; 0x06
    728a:	08 5e       	subi	r16, 0xE8	; 232
    728c:	1f 4f       	sbci	r17, 0xFF	; 255
    728e:	15 83       	std	Z+5, r17	; 0x05
    7290:	04 83       	std	Z+4, r16	; 0x04
    7292:	f0 cf       	rjmp	.-32     	; 0x7274 <normalize+0xc6>
    7294:	f7 01       	movw	r30, r14
    7296:	80 85       	ldd	r24, Z+8	; 0x08
    7298:	91 85       	ldd	r25, Z+9	; 0x09
    729a:	8c 30       	cpi	r24, 0x0C	; 12
    729c:	91 05       	cpc	r25, r1
    729e:	5c f0       	brlt	.+22     	; 0x72b6 <normalize+0x108>
    72a0:	f7 01       	movw	r30, r14
    72a2:	22 85       	ldd	r18, Z+10	; 0x0a
    72a4:	33 85       	ldd	r19, Z+11	; 0x0b
    72a6:	2f 5f       	subi	r18, 0xFF	; 255
    72a8:	3f 4f       	sbci	r19, 0xFF	; 255
    72aa:	33 87       	std	Z+11, r19	; 0x0b
    72ac:	22 87       	std	Z+10, r18	; 0x0a
    72ae:	0c 97       	sbiw	r24, 0x0c	; 12
    72b0:	91 87       	std	Z+9, r25	; 0x09
    72b2:	80 87       	std	Z+8, r24	; 0x08
    72b4:	ef cf       	rjmp	.-34     	; 0x7294 <normalize+0xe6>
    72b6:	f7 01       	movw	r30, r14
    72b8:	80 85       	ldd	r24, Z+8	; 0x08
    72ba:	91 85       	ldd	r25, Z+9	; 0x09
    72bc:	97 ff       	sbrs	r25, 7
    72be:	2d c0       	rjmp	.+90     	; 0x731a <normalize+0x16c>
    72c0:	f7 01       	movw	r30, r14
    72c2:	22 85       	ldd	r18, Z+10	; 0x0a
    72c4:	33 85       	ldd	r19, Z+11	; 0x0b
    72c6:	21 50       	subi	r18, 0x01	; 1
    72c8:	31 09       	sbc	r19, r1
    72ca:	33 87       	std	Z+11, r19	; 0x0b
    72cc:	22 87       	std	Z+10, r18	; 0x0a
    72ce:	0c 96       	adiw	r24, 0x0c	; 12
    72d0:	91 87       	std	Z+9, r25	; 0x09
    72d2:	80 87       	std	Z+8, r24	; 0x08
    72d4:	f0 cf       	rjmp	.-32     	; 0x72b6 <normalize+0x108>
    72d6:	f7 01       	movw	r30, r14
    72d8:	c6 80       	ldd	r12, Z+6	; 0x06
    72da:	d7 80       	ldd	r13, Z+7	; 0x07
    72dc:	a0 84       	ldd	r10, Z+8	; 0x08
    72de:	b1 84       	ldd	r11, Z+9	; 0x09
    72e0:	b4 01       	movw	r22, r8
    72e2:	c5 01       	movw	r24, r10
    72e4:	59 dd       	rcall	.-1358   	; 0x6d98 <Days_Per_Month>
    72e6:	8c 15       	cp	r24, r12
    72e8:	9d 05       	cpc	r25, r13
    72ea:	84 f5       	brge	.+96     	; 0x734c <normalize+0x19e>
    72ec:	c8 1a       	sub	r12, r24
    72ee:	d9 0a       	sbc	r13, r25
    72f0:	f7 01       	movw	r30, r14
    72f2:	d7 82       	std	Z+7, r13	; 0x07
    72f4:	c6 82       	std	Z+6, r12	; 0x06
    72f6:	c5 01       	movw	r24, r10
    72f8:	01 96       	adiw	r24, 0x01	; 1
    72fa:	91 87       	std	Z+9, r25	; 0x09
    72fc:	80 87       	std	Z+8, r24	; 0x08
    72fe:	0c 97       	sbiw	r24, 0x0c	; 12
    7300:	54 f3       	brlt	.-44     	; 0x72d6 <normalize+0x128>
    7302:	fb e0       	ldi	r31, 0x0B	; 11
    7304:	af 1a       	sub	r10, r31
    7306:	b1 08       	sbc	r11, r1
    7308:	f7 01       	movw	r30, r14
    730a:	b1 86       	std	Z+9, r11	; 0x09
    730c:	a0 86       	std	Z+8, r10	; 0x08
    730e:	ff ef       	ldi	r31, 0xFF	; 255
    7310:	8f 1a       	sub	r8, r31
    7312:	9f 0a       	sbc	r9, r31
    7314:	f7 01       	movw	r30, r14
    7316:	93 86       	std	Z+11, r9	; 0x0b
    7318:	82 86       	std	Z+10, r8	; 0x0a
    731a:	f7 01       	movw	r30, r14
    731c:	82 84       	ldd	r8, Z+10	; 0x0a
    731e:	93 84       	ldd	r9, Z+11	; 0x0b
    7320:	da cf       	rjmp	.-76     	; 0x72d6 <normalize+0x128>
    7322:	f7 01       	movw	r30, r14
    7324:	80 85       	ldd	r24, Z+8	; 0x08
    7326:	91 85       	ldd	r25, Z+9	; 0x09
    7328:	9c 01       	movw	r18, r24
    732a:	21 50       	subi	r18, 0x01	; 1
    732c:	31 09       	sbc	r19, r1
    732e:	37 fd       	sbrc	r19, 7
    7330:	16 c0       	rjmp	.+44     	; 0x735e <normalize+0x1b0>
    7332:	31 87       	std	Z+9, r19	; 0x09
    7334:	20 87       	std	Z+8, r18	; 0x08
    7336:	f7 01       	movw	r30, r14
    7338:	62 85       	ldd	r22, Z+10	; 0x0a
    733a:	73 85       	ldd	r23, Z+11	; 0x0b
    733c:	80 85       	ldd	r24, Z+8	; 0x08
    733e:	91 85       	ldd	r25, Z+9	; 0x09
    7340:	2b dd       	rcall	.-1450   	; 0x6d98 <Days_Per_Month>
    7342:	88 0d       	add	r24, r8
    7344:	99 1d       	adc	r25, r9
    7346:	f7 01       	movw	r30, r14
    7348:	97 83       	std	Z+7, r25	; 0x07
    734a:	86 83       	std	Z+6, r24	; 0x06
    734c:	f7 01       	movw	r30, r14
    734e:	86 80       	ldd	r8, Z+6	; 0x06
    7350:	97 80       	ldd	r9, Z+7	; 0x07
    7352:	a2 84       	ldd	r10, Z+10	; 0x0a
    7354:	b3 84       	ldd	r11, Z+11	; 0x0b
    7356:	18 14       	cp	r1, r8
    7358:	19 04       	cpc	r1, r9
    735a:	1c f7       	brge	.-58     	; 0x7322 <normalize+0x174>
    735c:	0b c0       	rjmp	.+22     	; 0x7374 <normalize+0x1c6>
    735e:	0b 96       	adiw	r24, 0x0b	; 11
    7360:	f7 01       	movw	r30, r14
    7362:	91 87       	std	Z+9, r25	; 0x09
    7364:	80 87       	std	Z+8, r24	; 0x08
    7366:	f1 e0       	ldi	r31, 0x01	; 1
    7368:	af 1a       	sub	r10, r31
    736a:	b1 08       	sbc	r11, r1
    736c:	f7 01       	movw	r30, r14
    736e:	b3 86       	std	Z+11, r11	; 0x0b
    7370:	a2 86       	std	Z+10, r10	; 0x0a
    7372:	e1 cf       	rjmp	.-62     	; 0x7336 <normalize+0x188>
    7374:	a5 01       	movw	r20, r10
    7376:	44 59       	subi	r20, 0x94	; 148
    7378:	58 4f       	sbci	r21, 0xF8	; 248
    737a:	58 87       	std	Y+8, r21	; 0x08
    737c:	4f 83       	std	Y+7, r20	; 0x07
    737e:	35 01       	movw	r6, r10
    7380:	56 e4       	ldi	r21, 0x46	; 70
    7382:	65 1a       	sub	r6, r21
    7384:	71 08       	sbc	r7, r1
    7386:	89 e8       	ldi	r24, 0x89	; 137
    7388:	68 16       	cp	r6, r24
    738a:	71 04       	cpc	r7, r1
    738c:	08 f0       	brcs	.+2      	; 0x7390 <normalize+0x1e2>
    738e:	9b c0       	rjmp	.+310    	; 0x74c6 <normalize+0x318>
    7390:	c0 84       	ldd	r12, Z+8	; 0x08
    7392:	d1 84       	ldd	r13, Z+9	; 0x09
    7394:	9c e0       	ldi	r25, 0x0C	; 12
    7396:	c9 16       	cp	r12, r25
    7398:	d1 04       	cpc	r13, r1
    739a:	08 f0       	brcs	.+2      	; 0x739e <normalize+0x1f0>
    739c:	94 c0       	rjmp	.+296    	; 0x74c6 <normalize+0x318>
    739e:	24 01       	movw	r4, r8
    73a0:	e1 e0       	ldi	r30, 0x01	; 1
    73a2:	4e 1a       	sub	r4, r30
    73a4:	51 08       	sbc	r5, r1
    73a6:	6f 81       	ldd	r22, Y+7	; 0x07
    73a8:	78 85       	ldd	r23, Y+8	; 0x08
    73aa:	c6 01       	movw	r24, r12
    73ac:	f5 dc       	rcall	.-1558   	; 0x6d98 <Days_Per_Month>
    73ae:	48 16       	cp	r4, r24
    73b0:	59 06       	cpc	r5, r25
    73b2:	0c f0       	brlt	.+2      	; 0x73b6 <normalize+0x208>
    73b4:	88 c0       	rjmp	.+272    	; 0x74c6 <normalize+0x318>
    73b6:	08 31       	cpi	r16, 0x18	; 24
    73b8:	11 05       	cpc	r17, r1
    73ba:	0c f0       	brlt	.+2      	; 0x73be <normalize+0x210>
    73bc:	84 c0       	rjmp	.+264    	; 0x74c6 <normalize+0x318>
    73be:	fc e3       	ldi	r31, 0x3C	; 60
    73c0:	2f 16       	cp	r2, r31
    73c2:	31 04       	cpc	r3, r1
    73c4:	0c f0       	brlt	.+2      	; 0x73c8 <normalize+0x21a>
    73c6:	7f c0       	rjmp	.+254    	; 0x74c6 <normalize+0x318>
    73c8:	4d 81       	ldd	r20, Y+5	; 0x05
    73ca:	5e 81       	ldd	r21, Y+6	; 0x06
    73cc:	4c 33       	cpi	r20, 0x3C	; 60
    73ce:	51 05       	cpc	r21, r1
    73d0:	0c f0       	brlt	.+2      	; 0x73d4 <normalize+0x226>
    73d2:	79 c0       	rjmp	.+242    	; 0x74c6 <normalize+0x318>
    73d4:	2d e6       	ldi	r18, 0x6D	; 109
    73d6:	31 e0       	ldi	r19, 0x01	; 1
    73d8:	d3 01       	movw	r26, r6
    73da:	0e 94 a9 e2 	call	0x1c552	; 0x1c552 <__usmulhisi3>
    73de:	f6 01       	movw	r30, r12
    73e0:	ee 0f       	add	r30, r30
    73e2:	ff 1f       	adc	r31, r31
    73e4:	e1 57       	subi	r30, 0x71	; 113
    73e6:	fc 4f       	sbci	r31, 0xFC	; 252
    73e8:	20 81       	ld	r18, Z
    73ea:	31 81       	ldd	r19, Z+1	; 0x01
    73ec:	dc 01       	movw	r26, r24
    73ee:	cb 01       	movw	r24, r22
    73f0:	82 0f       	add	r24, r18
    73f2:	93 1f       	adc	r25, r19
    73f4:	a1 1d       	adc	r26, r1
    73f6:	b1 1d       	adc	r27, r1
    73f8:	05 2c       	mov	r0, r5
    73fa:	00 0c       	add	r0, r0
    73fc:	66 08       	sbc	r6, r6
    73fe:	77 08       	sbc	r7, r7
    7400:	48 0e       	add	r4, r24
    7402:	59 1e       	adc	r5, r25
    7404:	6a 1e       	adc	r6, r26
    7406:	7b 1e       	adc	r7, r27
    7408:	1a 14       	cp	r1, r10
    740a:	1b 04       	cpc	r1, r11
    740c:	1c f4       	brge	.+6      	; 0x7414 <normalize+0x266>
    740e:	51 e0       	ldi	r21, 0x01	; 1
    7410:	a5 1a       	sub	r10, r21
    7412:	b1 08       	sbc	r11, r1
    7414:	45 01       	movw	r8, r10
    7416:	95 94       	asr	r9
    7418:	87 94       	ror	r8
    741a:	95 94       	asr	r9
    741c:	87 94       	ror	r8
    741e:	88 ec       	ldi	r24, 0xC8	; 200
    7420:	a8 16       	cp	r10, r24
    7422:	b1 04       	cpc	r11, r1
    7424:	1c f0       	brlt	.+6      	; 0x742c <normalize+0x27e>
    7426:	91 e0       	ldi	r25, 0x01	; 1
    7428:	89 1a       	sub	r8, r25
    742a:	91 08       	sbc	r9, r1
    742c:	09 2c       	mov	r0, r9
    742e:	00 0c       	add	r0, r0
    7430:	aa 08       	sbc	r10, r10
    7432:	bb 08       	sbc	r11, r11
    7434:	84 0c       	add	r8, r4
    7436:	95 1c       	adc	r9, r5
    7438:	a6 1c       	adc	r10, r6
    743a:	b7 1c       	adc	r11, r7
    743c:	24 01       	movw	r4, r8
    743e:	35 01       	movw	r6, r10
    7440:	e1 e1       	ldi	r30, 0x11	; 17
    7442:	4e 1a       	sub	r4, r30
    7444:	51 08       	sbc	r5, r1
    7446:	61 08       	sbc	r6, r1
    7448:	71 08       	sbc	r7, r1
    744a:	f2 e0       	ldi	r31, 0x02	; 2
    744c:	cf 16       	cp	r12, r31
    744e:	d1 04       	cpc	r13, r1
    7450:	64 f0       	brlt	.+24     	; 0x746a <normalize+0x2bc>
    7452:	8f 81       	ldd	r24, Y+7	; 0x07
    7454:	98 85       	ldd	r25, Y+8	; 0x08
    7456:	7b dc       	rcall	.-1802   	; 0x6d4e <IS_Leap>
    7458:	89 2b       	or	r24, r25
    745a:	39 f0       	breq	.+14     	; 0x746a <normalize+0x2bc>
    745c:	24 01       	movw	r4, r8
    745e:	35 01       	movw	r6, r10
    7460:	40 e1       	ldi	r20, 0x10	; 16
    7462:	44 1a       	sub	r4, r20
    7464:	51 08       	sbc	r5, r1
    7466:	61 08       	sbc	r6, r1
    7468:	71 08       	sbc	r7, r1
    746a:	a8 e1       	ldi	r26, 0x18	; 24
    746c:	b0 e0       	ldi	r27, 0x00	; 0
    746e:	a3 01       	movw	r20, r6
    7470:	92 01       	movw	r18, r4
    7472:	0e 94 af e2 	call	0x1c55e	; 0x1c55e <__muluhisi3>
    7476:	01 2e       	mov	r0, r17
    7478:	00 0c       	add	r0, r0
    747a:	22 0b       	sbc	r18, r18
    747c:	33 0b       	sbc	r19, r19
    747e:	a9 01       	movw	r20, r18
    7480:	98 01       	movw	r18, r16
    7482:	26 0f       	add	r18, r22
    7484:	37 1f       	adc	r19, r23
    7486:	48 1f       	adc	r20, r24
    7488:	59 1f       	adc	r21, r25
    748a:	ac e3       	ldi	r26, 0x3C	; 60
    748c:	b0 e0       	ldi	r27, 0x00	; 0
    748e:	0e 94 af e2 	call	0x1c55e	; 0x1c55e <__muluhisi3>
    7492:	81 01       	movw	r16, r2
    7494:	03 2c       	mov	r0, r3
    7496:	00 0c       	add	r0, r0
    7498:	22 0b       	sbc	r18, r18
    749a:	33 0b       	sbc	r19, r19
    749c:	a9 01       	movw	r20, r18
    749e:	98 01       	movw	r18, r16
    74a0:	26 0f       	add	r18, r22
    74a2:	37 1f       	adc	r19, r23
    74a4:	48 1f       	adc	r20, r24
    74a6:	59 1f       	adc	r21, r25
    74a8:	0e 94 af e2 	call	0x1c55e	; 0x1c55e <__muluhisi3>
    74ac:	ed 81       	ldd	r30, Y+5	; 0x05
    74ae:	fe 81       	ldd	r31, Y+6	; 0x06
    74b0:	8f 01       	movw	r16, r30
    74b2:	ff 0f       	add	r31, r31
    74b4:	22 0b       	sbc	r18, r18
    74b6:	33 0b       	sbc	r19, r19
    74b8:	48 01       	movw	r8, r16
    74ba:	59 01       	movw	r10, r18
    74bc:	86 0e       	add	r8, r22
    74be:	97 1e       	adc	r9, r23
    74c0:	a8 1e       	adc	r10, r24
    74c2:	b9 1e       	adc	r11, r25
    74c4:	04 c0       	rjmp	.+8      	; 0x74ce <normalize+0x320>
    74c6:	88 24       	eor	r8, r8
    74c8:	8a 94       	dec	r8
    74ca:	98 2c       	mov	r9, r8
    74cc:	54 01       	movw	r10, r8
    74ce:	49 85       	ldd	r20, Y+9	; 0x09
    74d0:	5a 85       	ldd	r21, Y+10	; 0x0a
    74d2:	45 2b       	or	r20, r21
    74d4:	e9 f0       	breq	.+58     	; 0x7510 <normalize+0x362>
    74d6:	ce 01       	movw	r24, r28
    74d8:	01 96       	adiw	r24, 0x01	; 1
    74da:	7d dd       	rcall	.-1286   	; 0x6fd6 <gettimezone>
    74dc:	a9 81       	ldd	r26, Y+1	; 0x01
    74de:	ba 81       	ldd	r27, Y+2	; 0x02
    74e0:	2c e3       	ldi	r18, 0x3C	; 60
    74e2:	30 e0       	ldi	r19, 0x00	; 0
    74e4:	0e 94 a9 e2 	call	0x1c552	; 0x1c552 <__usmulhisi3>
    74e8:	2b 01       	movw	r4, r22
    74ea:	3c 01       	movw	r6, r24
    74ec:	c5 01       	movw	r24, r10
    74ee:	b4 01       	movw	r22, r8
    74f0:	e2 dd       	rcall	.-1084   	; 0x70b6 <is_dst>
    74f2:	89 2b       	or	r24, r25
    74f4:	51 f0       	breq	.+20     	; 0x750a <normalize+0x35c>
    74f6:	50 e1       	ldi	r21, 0x10	; 16
    74f8:	45 1a       	sub	r4, r21
    74fa:	5e e0       	ldi	r21, 0x0E	; 14
    74fc:	55 0a       	sbc	r5, r21
    74fe:	61 08       	sbc	r6, r1
    7500:	71 08       	sbc	r7, r1
    7502:	cc 24       	eor	r12, r12
    7504:	c3 94       	inc	r12
    7506:	d1 2c       	mov	r13, r1
    7508:	08 c0       	rjmp	.+16     	; 0x751a <normalize+0x36c>
    750a:	c1 2c       	mov	r12, r1
    750c:	d1 2c       	mov	r13, r1
    750e:	05 c0       	rjmp	.+10     	; 0x751a <normalize+0x36c>
    7510:	c1 2c       	mov	r12, r1
    7512:	d1 2c       	mov	r13, r1
    7514:	41 2c       	mov	r4, r1
    7516:	51 2c       	mov	r5, r1
    7518:	32 01       	movw	r6, r4
    751a:	87 01       	movw	r16, r14
    751c:	a3 01       	movw	r20, r6
    751e:	92 01       	movw	r18, r4
    7520:	c5 01       	movw	r24, r10
    7522:	b4 01       	movw	r22, r8
    7524:	5a dc       	rcall	.-1868   	; 0x6dda <time_to_tm>
    7526:	c1 14       	cp	r12, r1
    7528:	d1 04       	cpc	r13, r1
    752a:	29 f0       	breq	.+10     	; 0x7536 <normalize+0x388>
    752c:	21 e0       	ldi	r18, 0x01	; 1
    752e:	30 e0       	ldi	r19, 0x00	; 0
    7530:	f7 01       	movw	r30, r14
    7532:	31 8b       	std	Z+17, r19	; 0x11
    7534:	20 8b       	std	Z+16, r18	; 0x10
    7536:	2a 96       	adiw	r28, 0x0a	; 10
    7538:	e2 e1       	ldi	r30, 0x12	; 18
    753a:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

0000753e <timegm>:
    753e:	60 e0       	ldi	r22, 0x00	; 0
    7540:	70 e0       	ldi	r23, 0x00	; 0
    7542:	35 ce       	rjmp	.-918    	; 0x71ae <normalize>
    7544:	08 95       	ret

00007546 <setdate_r>:
    7546:	cf 92       	push	r12
    7548:	df 92       	push	r13
    754a:	ef 92       	push	r14
    754c:	ff 92       	push	r15
    754e:	cf 93       	push	r28
    7550:	df 93       	push	r29
    7552:	cd b7       	in	r28, 0x3d	; 61
    7554:	de b7       	in	r29, 0x3e	; 62
    7556:	a5 97       	sbiw	r28, 0x25	; 37
    7558:	0f b6       	in	r0, 0x3f	; 63
    755a:	f8 94       	cli
    755c:	de bf       	out	0x3e, r29	; 62
    755e:	0f be       	out	0x3f, r0	; 63
    7560:	cd bf       	out	0x3d, r28	; 61
    7562:	9d a3       	std	Y+37, r25	; 0x25
    7564:	8c a3       	std	Y+36, r24	; 0x24
    7566:	1f 82       	std	Y+7, r1	; 0x07
    7568:	1e 82       	std	Y+6, r1	; 0x06
    756a:	19 86       	std	Y+9, r1	; 0x09
    756c:	18 86       	std	Y+8, r1	; 0x08
    756e:	1b 86       	std	Y+11, r1	; 0x0b
    7570:	1a 86       	std	Y+10, r1	; 0x0a
    7572:	1d 86       	std	Y+13, r1	; 0x0d
    7574:	1c 86       	std	Y+12, r1	; 0x0c
    7576:	1f 86       	std	Y+15, r1	; 0x0f
    7578:	1e 86       	std	Y+14, r1	; 0x0e
    757a:	19 8a       	std	Y+17, r1	; 0x11
    757c:	18 8a       	std	Y+16, r1	; 0x10
    757e:	8c a1       	ldd	r24, Y+36	; 0x24
    7580:	9d a1       	ldd	r25, Y+37	; 0x25
    7582:	fc 01       	movw	r30, r24
    7584:	20 81       	ld	r18, Z
    7586:	20 32       	cpi	r18, 0x20	; 32
    7588:	21 f4       	brne	.+8      	; 0x7592 <setdate_r+0x4c>
    758a:	01 96       	adiw	r24, 0x01	; 1
    758c:	9d a3       	std	Y+37, r25	; 0x25
    758e:	8c a3       	std	Y+36, r24	; 0x24
    7590:	f6 cf       	rjmp	.-20     	; 0x757e <setdate_r+0x38>
    7592:	4a e0       	ldi	r20, 0x0A	; 10
    7594:	50 e0       	ldi	r21, 0x00	; 0
    7596:	be 01       	movw	r22, r28
    7598:	6c 5d       	subi	r22, 0xDC	; 220
    759a:	7f 4f       	sbci	r23, 0xFF	; 255
    759c:	0e 94 b6 46 	call	0x8d6c	; 0x8d6c <strtol>
    75a0:	79 8b       	std	Y+17, r23	; 0x11
    75a2:	68 8b       	std	Y+16, r22	; 0x10
    75a4:	8c a1       	ldd	r24, Y+36	; 0x24
    75a6:	9d a1       	ldd	r25, Y+37	; 0x25
    75a8:	fc 01       	movw	r30, r24
    75aa:	20 81       	ld	r18, Z
    75ac:	20 32       	cpi	r18, 0x20	; 32
    75ae:	21 f4       	brne	.+8      	; 0x75b8 <setdate_r+0x72>
    75b0:	01 96       	adiw	r24, 0x01	; 1
    75b2:	9d a3       	std	Y+37, r25	; 0x25
    75b4:	8c a3       	std	Y+36, r24	; 0x24
    75b6:	f6 cf       	rjmp	.-20     	; 0x75a4 <setdate_r+0x5e>
    75b8:	4a e0       	ldi	r20, 0x0A	; 10
    75ba:	50 e0       	ldi	r21, 0x00	; 0
    75bc:	be 01       	movw	r22, r28
    75be:	6c 5d       	subi	r22, 0xDC	; 220
    75c0:	7f 4f       	sbci	r23, 0xFF	; 255
    75c2:	0e 94 b6 46 	call	0x8d6c	; 0x8d6c <strtol>
    75c6:	7f 87       	std	Y+15, r23	; 0x0f
    75c8:	6e 87       	std	Y+14, r22	; 0x0e
    75ca:	8c a1       	ldd	r24, Y+36	; 0x24
    75cc:	9d a1       	ldd	r25, Y+37	; 0x25
    75ce:	fc 01       	movw	r30, r24
    75d0:	20 81       	ld	r18, Z
    75d2:	20 32       	cpi	r18, 0x20	; 32
    75d4:	21 f4       	brne	.+8      	; 0x75de <setdate_r+0x98>
    75d6:	01 96       	adiw	r24, 0x01	; 1
    75d8:	9d a3       	std	Y+37, r25	; 0x25
    75da:	8c a3       	std	Y+36, r24	; 0x24
    75dc:	f6 cf       	rjmp	.-20     	; 0x75ca <setdate_r+0x84>
    75de:	4a e0       	ldi	r20, 0x0A	; 10
    75e0:	50 e0       	ldi	r21, 0x00	; 0
    75e2:	be 01       	movw	r22, r28
    75e4:	6c 5d       	subi	r22, 0xDC	; 220
    75e6:	7f 4f       	sbci	r23, 0xFF	; 255
    75e8:	0e 94 b6 46 	call	0x8d6c	; 0x8d6c <strtol>
    75ec:	7d 87       	std	Y+13, r23	; 0x0d
    75ee:	6c 87       	std	Y+12, r22	; 0x0c
    75f0:	8c a1       	ldd	r24, Y+36	; 0x24
    75f2:	9d a1       	ldd	r25, Y+37	; 0x25
    75f4:	fc 01       	movw	r30, r24
    75f6:	20 81       	ld	r18, Z
    75f8:	20 32       	cpi	r18, 0x20	; 32
    75fa:	21 f4       	brne	.+8      	; 0x7604 <setdate_r+0xbe>
    75fc:	01 96       	adiw	r24, 0x01	; 1
    75fe:	9d a3       	std	Y+37, r25	; 0x25
    7600:	8c a3       	std	Y+36, r24	; 0x24
    7602:	f6 cf       	rjmp	.-20     	; 0x75f0 <setdate_r+0xaa>
    7604:	4a e0       	ldi	r20, 0x0A	; 10
    7606:	50 e0       	ldi	r21, 0x00	; 0
    7608:	be 01       	movw	r22, r28
    760a:	6c 5d       	subi	r22, 0xDC	; 220
    760c:	7f 4f       	sbci	r23, 0xFF	; 255
    760e:	0e 94 b6 46 	call	0x8d6c	; 0x8d6c <strtol>
    7612:	7b 87       	std	Y+11, r23	; 0x0b
    7614:	6a 87       	std	Y+10, r22	; 0x0a
    7616:	ec a1       	ldd	r30, Y+36	; 0x24
    7618:	fd a1       	ldd	r31, Y+37	; 0x25
    761a:	80 81       	ld	r24, Z
    761c:	88 23       	and	r24, r24
    761e:	39 f0       	breq	.+14     	; 0x762e <setdate_r+0xe8>
    7620:	80 32       	cpi	r24, 0x20	; 32
    7622:	11 f0       	breq	.+4      	; 0x7628 <setdate_r+0xe2>
    7624:	8a 33       	cpi	r24, 0x3A	; 58
    7626:	19 f4       	brne	.+6      	; 0x762e <setdate_r+0xe8>
    7628:	31 96       	adiw	r30, 0x01	; 1
    762a:	fd a3       	std	Y+37, r31	; 0x25
    762c:	ec a3       	std	Y+36, r30	; 0x24
    762e:	4a e0       	ldi	r20, 0x0A	; 10
    7630:	50 e0       	ldi	r21, 0x00	; 0
    7632:	be 01       	movw	r22, r28
    7634:	6c 5d       	subi	r22, 0xDC	; 220
    7636:	7f 4f       	sbci	r23, 0xFF	; 255
    7638:	8c a1       	ldd	r24, Y+36	; 0x24
    763a:	9d a1       	ldd	r25, Y+37	; 0x25
    763c:	0e 94 b6 46 	call	0x8d6c	; 0x8d6c <strtol>
    7640:	79 87       	std	Y+9, r23	; 0x09
    7642:	68 87       	std	Y+8, r22	; 0x08
    7644:	ec a1       	ldd	r30, Y+36	; 0x24
    7646:	fd a1       	ldd	r31, Y+37	; 0x25
    7648:	80 81       	ld	r24, Z
    764a:	88 23       	and	r24, r24
    764c:	39 f0       	breq	.+14     	; 0x765c <setdate_r+0x116>
    764e:	80 32       	cpi	r24, 0x20	; 32
    7650:	11 f0       	breq	.+4      	; 0x7656 <setdate_r+0x110>
    7652:	8a 33       	cpi	r24, 0x3A	; 58
    7654:	19 f4       	brne	.+6      	; 0x765c <setdate_r+0x116>
    7656:	31 96       	adiw	r30, 0x01	; 1
    7658:	fd a3       	std	Y+37, r31	; 0x25
    765a:	ec a3       	std	Y+36, r30	; 0x24
    765c:	4a e0       	ldi	r20, 0x0A	; 10
    765e:	50 e0       	ldi	r21, 0x00	; 0
    7660:	be 01       	movw	r22, r28
    7662:	6c 5d       	subi	r22, 0xDC	; 220
    7664:	7f 4f       	sbci	r23, 0xFF	; 255
    7666:	8c a1       	ldd	r24, Y+36	; 0x24
    7668:	9d a1       	ldd	r25, Y+37	; 0x25
    766a:	0e 94 b6 46 	call	0x8d6c	; 0x8d6c <strtol>
    766e:	7f 83       	std	Y+7, r23	; 0x07
    7670:	6e 83       	std	Y+6, r22	; 0x06
    7672:	2e 85       	ldd	r18, Y+14	; 0x0e
    7674:	3f 85       	ldd	r19, Y+15	; 0x0f
    7676:	21 50       	subi	r18, 0x01	; 1
    7678:	31 09       	sbc	r19, r1
    767a:	3f 87       	std	Y+15, r19	; 0x0f
    767c:	2e 87       	std	Y+14, r18	; 0x0e
    767e:	88 89       	ldd	r24, Y+16	; 0x10
    7680:	99 89       	ldd	r25, Y+17	; 0x11
    7682:	ac 01       	movw	r20, r24
    7684:	42 5b       	subi	r20, 0xB2	; 178
    7686:	57 40       	sbci	r21, 0x07	; 7
    7688:	45 34       	cpi	r20, 0x45	; 69
    768a:	51 05       	cpc	r21, r1
    768c:	38 f0       	brcs	.+14     	; 0x769c <setdate_r+0x156>
    768e:	ed b7       	in	r30, 0x3d	; 61
    7690:	fe b7       	in	r31, 0x3e	; 62
    7692:	95 83       	std	Z+5, r25	; 0x05
    7694:	84 83       	std	Z+4, r24	; 0x04
    7696:	89 e5       	ldi	r24, 0x59	; 89
    7698:	97 e0       	ldi	r25, 0x07	; 7
    769a:	34 c0       	rjmp	.+104    	; 0x7704 <setdate_r+0x1be>
    769c:	8c 56       	subi	r24, 0x6C	; 108
    769e:	97 40       	sbci	r25, 0x07	; 7
    76a0:	99 8b       	std	Y+17, r25	; 0x11
    76a2:	88 8b       	std	Y+16, r24	; 0x10
    76a4:	2c 30       	cpi	r18, 0x0C	; 12
    76a6:	31 05       	cpc	r19, r1
    76a8:	38 f0       	brcs	.+14     	; 0x76b8 <setdate_r+0x172>
    76aa:	ed b7       	in	r30, 0x3d	; 61
    76ac:	fe b7       	in	r31, 0x3e	; 62
    76ae:	95 83       	std	Z+5, r25	; 0x05
    76b0:	84 83       	std	Z+4, r24	; 0x04
    76b2:	88 e4       	ldi	r24, 0x48	; 72
    76b4:	97 e0       	ldi	r25, 0x07	; 7
    76b6:	26 c0       	rjmp	.+76     	; 0x7704 <setdate_r+0x1be>
    76b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    76ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    76bc:	9c 01       	movw	r18, r24
    76be:	21 50       	subi	r18, 0x01	; 1
    76c0:	31 09       	sbc	r19, r1
    76c2:	2f 31       	cpi	r18, 0x1F	; 31
    76c4:	31 05       	cpc	r19, r1
    76c6:	38 f0       	brcs	.+14     	; 0x76d6 <setdate_r+0x190>
    76c8:	ed b7       	in	r30, 0x3d	; 61
    76ca:	fe b7       	in	r31, 0x3e	; 62
    76cc:	95 83       	std	Z+5, r25	; 0x05
    76ce:	84 83       	std	Z+4, r24	; 0x04
    76d0:	87 e3       	ldi	r24, 0x37	; 55
    76d2:	97 e0       	ldi	r25, 0x07	; 7
    76d4:	17 c0       	rjmp	.+46     	; 0x7704 <setdate_r+0x1be>
    76d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    76d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    76da:	88 31       	cpi	r24, 0x18	; 24
    76dc:	91 05       	cpc	r25, r1
    76de:	38 f0       	brcs	.+14     	; 0x76ee <setdate_r+0x1a8>
    76e0:	ed b7       	in	r30, 0x3d	; 61
    76e2:	fe b7       	in	r31, 0x3e	; 62
    76e4:	95 83       	std	Z+5, r25	; 0x05
    76e6:	84 83       	std	Z+4, r24	; 0x04
    76e8:	85 e2       	ldi	r24, 0x25	; 37
    76ea:	97 e0       	ldi	r25, 0x07	; 7
    76ec:	0b c0       	rjmp	.+22     	; 0x7704 <setdate_r+0x1be>
    76ee:	88 85       	ldd	r24, Y+8	; 0x08
    76f0:	99 85       	ldd	r25, Y+9	; 0x09
    76f2:	8c 33       	cpi	r24, 0x3C	; 60
    76f4:	91 05       	cpc	r25, r1
    76f6:	68 f0       	brcs	.+26     	; 0x7712 <setdate_r+0x1cc>
    76f8:	ed b7       	in	r30, 0x3d	; 61
    76fa:	fe b7       	in	r31, 0x3e	; 62
    76fc:	95 83       	std	Z+5, r25	; 0x05
    76fe:	84 83       	std	Z+4, r24	; 0x04
    7700:	84 e1       	ldi	r24, 0x14	; 20
    7702:	97 e0       	ldi	r25, 0x07	; 7
    7704:	a0 e0       	ldi	r26, 0x00	; 0
    7706:	81 83       	std	Z+1, r24	; 0x01
    7708:	92 83       	std	Z+2, r25	; 0x02
    770a:	a3 83       	std	Z+3, r26	; 0x03
    770c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    7710:	25 c0       	rjmp	.+74     	; 0x775c <setdate_r+0x216>
    7712:	ce 01       	movw	r24, r28
    7714:	06 96       	adiw	r24, 0x06	; 6
    7716:	13 df       	rcall	.-474    	; 0x753e <timegm>
    7718:	6b 01       	movw	r12, r22
    771a:	7c 01       	movw	r14, r24
    771c:	6c 8f       	std	Y+28, r22	; 0x1c
    771e:	7d 8f       	std	Y+29, r23	; 0x1d
    7720:	8e 8f       	std	Y+30, r24	; 0x1e
    7722:	9f 8f       	std	Y+31, r25	; 0x1f
    7724:	18 a2       	std	Y+32, r1	; 0x20
    7726:	19 a2       	std	Y+33, r1	; 0x21
    7728:	1a a2       	std	Y+34, r1	; 0x22
    772a:	1b a2       	std	Y+35, r1	; 0x23
    772c:	be 01       	movw	r22, r28
    772e:	64 5e       	subi	r22, 0xE4	; 228
    7730:	7f 4f       	sbci	r23, 0xFF	; 255
    7732:	80 e0       	ldi	r24, 0x00	; 0
    7734:	90 e0       	ldi	r25, 0x00	; 0
    7736:	03 db       	rcall	.-2554   	; 0x6d3e <clock_settime>
    7738:	b7 01       	movw	r22, r14
    773a:	a6 01       	movw	r20, r12
    773c:	81 e0       	ldi	r24, 0x01	; 1
    773e:	90 e0       	ldi	r25, 0x00	; 0
    7740:	0e 94 aa 30 	call	0x6154	; 0x6154 <rtc_init>
    7744:	81 11       	cpse	r24, r1
    7746:	0d c0       	rjmp	.+26     	; 0x7762 <setdate_r+0x21c>
    7748:	8d ef       	ldi	r24, 0xFD	; 253
    774a:	96 e0       	ldi	r25, 0x06	; 6
    774c:	a0 e0       	ldi	r26, 0x00	; 0
    774e:	ed b7       	in	r30, 0x3d	; 61
    7750:	fe b7       	in	r31, 0x3e	; 62
    7752:	81 83       	std	Z+1, r24	; 0x01
    7754:	92 83       	std	Z+2, r25	; 0x02
    7756:	a3 83       	std	Z+3, r26	; 0x03
    7758:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    775c:	8f ef       	ldi	r24, 0xFF	; 255
    775e:	9f ef       	ldi	r25, 0xFF	; 255
    7760:	02 c0       	rjmp	.+4      	; 0x7766 <setdate_r+0x220>
    7762:	80 e0       	ldi	r24, 0x00	; 0
    7764:	90 e0       	ldi	r25, 0x00	; 0
    7766:	a5 96       	adiw	r28, 0x25	; 37
    7768:	0f b6       	in	r0, 0x3f	; 63
    776a:	f8 94       	cli
    776c:	de bf       	out	0x3e, r29	; 62
    776e:	0f be       	out	0x3f, r0	; 63
    7770:	cd bf       	out	0x3d, r28	; 61
    7772:	df 91       	pop	r29
    7774:	cf 91       	pop	r28
    7776:	ff 90       	pop	r15
    7778:	ef 90       	pop	r14
    777a:	df 90       	pop	r13
    777c:	cf 90       	pop	r12
    777e:	08 95       	ret

00007780 <setdate>:
    7780:	ab e2       	ldi	r26, 0x2B	; 43
    7782:	b0 e0       	ldi	r27, 0x00	; 0
    7784:	e6 ec       	ldi	r30, 0xC6	; 198
    7786:	fb e3       	ldi	r31, 0x3B	; 59
    7788:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
    778c:	8b e6       	ldi	r24, 0x6B	; 107
    778e:	97 e0       	ldi	r25, 0x07	; 7
    7790:	a0 e0       	ldi	r26, 0x00	; 0
    7792:	ed b7       	in	r30, 0x3d	; 61
    7794:	fe b7       	in	r31, 0x3e	; 62
    7796:	81 83       	std	Z+1, r24	; 0x01
    7798:	92 83       	std	Z+2, r25	; 0x02
    779a:	a3 83       	std	Z+3, r26	; 0x03
    779c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    77a0:	40 91 b2 1c 	lds	r20, 0x1CB2	; 0x801cb2 <__iob>
    77a4:	50 91 b3 1c 	lds	r21, 0x1CB3	; 0x801cb3 <__iob+0x1>
    77a8:	67 e2       	ldi	r22, 0x27	; 39
    77aa:	70 e0       	ldi	r23, 0x00	; 0
    77ac:	ce 01       	movw	r24, r28
    77ae:	04 96       	adiw	r24, 0x04	; 4
    77b0:	0e 94 d7 76 	call	0xedae	; 0xedae <fgets>
    77b4:	ce 01       	movw	r24, r28
    77b6:	04 96       	adiw	r24, 0x04	; 4
    77b8:	c6 de       	rcall	.-628    	; 0x7546 <setdate_r>
    77ba:	ab 96       	adiw	r28, 0x2b	; 43
    77bc:	e2 e0       	ldi	r30, 0x02	; 2
    77be:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

000077c2 <find_dst>:
    77c2:	a8 e2       	ldi	r26, 0x28	; 40
    77c4:	b0 e0       	ldi	r27, 0x00	; 0
    77c6:	e7 ee       	ldi	r30, 0xE7	; 231
    77c8:	fb e3       	ldi	r31, 0x3B	; 59
    77ca:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
    77ce:	3c 01       	movw	r6, r24
    77d0:	1a 01       	movw	r2, r20
    77d2:	2b 01       	movw	r4, r22
    77d4:	49 01       	movw	r8, r18
    77d6:	1c a3       	std	Y+36, r17	; 0x24
    77d8:	0b a3       	std	Y+35, r16	; 0x23
    77da:	de a2       	std	Y+38, r13	; 0x26
    77dc:	cd a2       	std	Y+37, r12	; 0x25
    77de:	b8 a6       	std	Y+40, r11	; 0x28
    77e0:	af a2       	std	Y+39, r10	; 0x27
    77e2:	be 01       	movw	r22, r28
    77e4:	61 5e       	subi	r22, 0xE1	; 225
    77e6:	7f 4f       	sbci	r23, 0xFF	; 255
    77e8:	ce 01       	movw	r24, r28
    77ea:	47 96       	adiw	r24, 0x17	; 23
    77ec:	15 dc       	rcall	.-2006   	; 0x7018 <gettimeofday>
    77ee:	af 8d       	ldd	r26, Y+31	; 0x1f
    77f0:	b8 a1       	ldd	r27, Y+32	; 0x20
    77f2:	2c e3       	ldi	r18, 0x3C	; 60
    77f4:	30 e0       	ldi	r19, 0x00	; 0
    77f6:	0e 94 a9 e2 	call	0x1c552	; 0x1c552 <__usmulhisi3>
    77fa:	5b 01       	movw	r10, r22
    77fc:	6c 01       	movw	r12, r24
    77fe:	61 14       	cp	r6, r1
    7800:	71 04       	cpc	r7, r1
    7802:	31 f0       	breq	.+12     	; 0x7810 <find_dst+0x4e>
    7804:	20 e1       	ldi	r18, 0x10	; 16
    7806:	a2 1a       	sub	r10, r18
    7808:	2e e0       	ldi	r18, 0x0E	; 14
    780a:	b2 0a       	sbc	r11, r18
    780c:	c1 08       	sbc	r12, r1
    780e:	d1 08       	sbc	r13, r1
    7810:	81 14       	cp	r8, r1
    7812:	91 04       	cpc	r9, r1
    7814:	39 f0       	breq	.+14     	; 0x7824 <find_dst+0x62>
    7816:	4c e6       	ldi	r20, 0x6C	; 108
    7818:	84 1a       	sub	r8, r20
    781a:	47 e0       	ldi	r20, 0x07	; 7
    781c:	94 0a       	sbc	r9, r20
    781e:	9c 86       	std	Y+12, r9	; 0x0c
    7820:	8b 86       	std	Y+11, r8	; 0x0b
    7822:	11 c0       	rjmp	.+34     	; 0x7846 <find_dst+0x84>
    7824:	21 14       	cp	r2, r1
    7826:	31 04       	cpc	r3, r1
    7828:	41 04       	cpc	r4, r1
    782a:	51 04       	cpc	r5, r1
    782c:	21 f4       	brne	.+8      	; 0x7836 <find_dst+0x74>
    782e:	2f 88       	ldd	r2, Y+23	; 0x17
    7830:	38 8c       	ldd	r3, Y+24	; 0x18
    7832:	49 8c       	ldd	r4, Y+25	; 0x19
    7834:	5a 8c       	ldd	r5, Y+26	; 0x1a
    7836:	8e 01       	movw	r16, r28
    7838:	0f 5f       	subi	r16, 0xFF	; 255
    783a:	1f 4f       	sbci	r17, 0xFF	; 255
    783c:	a6 01       	movw	r20, r12
    783e:	95 01       	movw	r18, r10
    7840:	c2 01       	movw	r24, r4
    7842:	b1 01       	movw	r22, r2
    7844:	ca da       	rcall	.-2668   	; 0x6dda <time_to_tm>
    7846:	8b a1       	ldd	r24, Y+35	; 0x23
    7848:	9c a1       	ldd	r25, Y+36	; 0x24
    784a:	01 97       	sbiw	r24, 0x01	; 1
    784c:	9a 87       	std	Y+10, r25	; 0x0a
    784e:	89 87       	std	Y+9, r24	; 0x09
    7850:	81 e0       	ldi	r24, 0x01	; 1
    7852:	90 e0       	ldi	r25, 0x00	; 0
    7854:	98 87       	std	Y+8, r25	; 0x08
    7856:	8f 83       	std	Y+7, r24	; 0x07
    7858:	8f a1       	ldd	r24, Y+39	; 0x27
    785a:	98 a5       	ldd	r25, Y+40	; 0x28
    785c:	9e 83       	std	Y+6, r25	; 0x06
    785e:	8d 83       	std	Y+5, r24	; 0x05
    7860:	1c 82       	std	Y+4, r1	; 0x04
    7862:	1b 82       	std	Y+3, r1	; 0x03
    7864:	1a 82       	std	Y+2, r1	; 0x02
    7866:	19 82       	std	Y+1, r1	; 0x01
    7868:	ce 01       	movw	r24, r28
    786a:	01 96       	adiw	r24, 0x01	; 1
    786c:	68 de       	rcall	.-816    	; 0x753e <timegm>
    786e:	45 01       	movw	r8, r10
    7870:	56 01       	movw	r10, r12
    7872:	86 0e       	add	r8, r22
    7874:	97 1e       	adc	r9, r23
    7876:	a8 1e       	adc	r10, r24
    7878:	b9 1e       	adc	r11, r25
    787a:	8e 01       	movw	r16, r28
    787c:	0f 5f       	subi	r16, 0xFF	; 255
    787e:	1f 4f       	sbci	r17, 0xFF	; 255
    7880:	20 e0       	ldi	r18, 0x00	; 0
    7882:	30 e0       	ldi	r19, 0x00	; 0
    7884:	a9 01       	movw	r20, r18
    7886:	c5 01       	movw	r24, r10
    7888:	b4 01       	movw	r22, r8
    788a:	a7 da       	rcall	.-2738   	; 0x6dda <time_to_tm>
    788c:	2d 85       	ldd	r18, Y+13	; 0x0d
    788e:	3e 85       	ldd	r19, Y+14	; 0x0e
    7890:	e7 e0       	ldi	r30, 0x07	; 7
    7892:	f0 e0       	ldi	r31, 0x00	; 0
    7894:	c9 01       	movw	r24, r18
    7896:	bf 01       	movw	r22, r30
    7898:	0e 94 4f e2 	call	0x1c49e	; 0x1c49e <__divmodhi4>
    789c:	4d a1       	ldd	r20, Y+37	; 0x25
    789e:	5e a1       	ldd	r21, Y+38	; 0x26
    78a0:	48 17       	cp	r20, r24
    78a2:	59 07       	cpc	r21, r25
    78a4:	21 f4       	brne	.+8      	; 0x78ae <find_dst+0xec>
    78a6:	51 e0       	ldi	r21, 0x01	; 1
    78a8:	e5 1a       	sub	r14, r21
    78aa:	f1 08       	sbc	r15, r1
    78ac:	51 f0       	breq	.+20     	; 0x78c2 <find_dst+0x100>
    78ae:	80 e8       	ldi	r24, 0x80	; 128
    78b0:	88 0e       	add	r8, r24
    78b2:	81 e5       	ldi	r24, 0x51	; 81
    78b4:	98 1e       	adc	r9, r24
    78b6:	81 e0       	ldi	r24, 0x01	; 1
    78b8:	a8 1e       	adc	r10, r24
    78ba:	b1 1c       	adc	r11, r1
    78bc:	2f 5f       	subi	r18, 0xFF	; 255
    78be:	3f 4f       	sbci	r19, 0xFF	; 255
    78c0:	e9 cf       	rjmp	.-46     	; 0x7894 <find_dst+0xd2>
    78c2:	c5 01       	movw	r24, r10
    78c4:	b4 01       	movw	r22, r8
    78c6:	a8 96       	adiw	r28, 0x28	; 40
    78c8:	e2 e1       	ldi	r30, 0x12	; 18
    78ca:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

000078ce <set_dst>:
    78ce:	4f 92       	push	r4
    78d0:	5f 92       	push	r5
    78d2:	6f 92       	push	r6
    78d4:	7f 92       	push	r7
    78d6:	af 92       	push	r10
    78d8:	bf 92       	push	r11
    78da:	cf 92       	push	r12
    78dc:	df 92       	push	r13
    78de:	ef 92       	push	r14
    78e0:	ff 92       	push	r15
    78e2:	0f 93       	push	r16
    78e4:	1f 93       	push	r17
    78e6:	cf 93       	push	r28
    78e8:	df 93       	push	r29
    78ea:	cd b7       	in	r28, 0x3d	; 61
    78ec:	de b7       	in	r29, 0x3e	; 62
    78ee:	2c 97       	sbiw	r28, 0x0c	; 12
    78f0:	0f b6       	in	r0, 0x3f	; 63
    78f2:	f8 94       	cli
    78f4:	de bf       	out	0x3e, r29	; 62
    78f6:	0f be       	out	0x3f, r0	; 63
    78f8:	cd bf       	out	0x3d, r28	; 61
    78fa:	2b 01       	movw	r4, r22
    78fc:	3c 01       	movw	r6, r24
    78fe:	67 2b       	or	r22, r23
    7900:	68 2b       	or	r22, r24
    7902:	69 2b       	or	r22, r25
    7904:	51 f4       	brne	.+20     	; 0x791a <set_dst+0x4c>
    7906:	be 01       	movw	r22, r28
    7908:	67 5f       	subi	r22, 0xF7	; 247
    790a:	7f 4f       	sbci	r23, 0xFF	; 255
    790c:	ce 01       	movw	r24, r28
    790e:	01 96       	adiw	r24, 0x01	; 1
    7910:	83 db       	rcall	.-2298   	; 0x7018 <gettimeofday>
    7912:	49 80       	ldd	r4, Y+1	; 0x01
    7914:	5a 80       	ldd	r5, Y+2	; 0x02
    7916:	6b 80       	ldd	r6, Y+3	; 0x03
    7918:	7c 80       	ldd	r7, Y+4	; 0x04
    791a:	80 91 6f 1a 	lds	r24, 0x1A6F	; 0x801a6f <dst+0x8>
    791e:	90 91 70 1a 	lds	r25, 0x1A70	; 0x801a70 <dst+0x9>
    7922:	a0 91 71 1a 	lds	r26, 0x1A71	; 0x801a71 <dst+0xa>
    7926:	b0 91 72 1a 	lds	r27, 0x1A72	; 0x801a72 <dst+0xb>
    792a:	84 15       	cp	r24, r4
    792c:	95 05       	cpc	r25, r5
    792e:	a6 05       	cpc	r26, r6
    7930:	b7 05       	cpc	r27, r7
    7932:	50 f0       	brcs	.+20     	; 0x7948 <set_dst+0x7a>
    7934:	84 19       	sub	r24, r4
    7936:	95 09       	sbc	r25, r5
    7938:	a6 09       	sbc	r26, r6
    793a:	b7 09       	sbc	r27, r7
    793c:	80 38       	cpi	r24, 0x80	; 128
    793e:	91 45       	sbci	r25, 0x51	; 81
    7940:	a1 40       	sbci	r26, 0x01	; 1
    7942:	b1 05       	cpc	r27, r1
    7944:	70 f4       	brcc	.+28     	; 0x7962 <set_dst+0x94>
    7946:	42 c0       	rjmp	.+132    	; 0x79cc <set_dst+0xfe>
    7948:	a3 01       	movw	r20, r6
    794a:	92 01       	movw	r18, r4
    794c:	28 1b       	sub	r18, r24
    794e:	39 0b       	sbc	r19, r25
    7950:	4a 0b       	sbc	r20, r26
    7952:	5b 0b       	sbc	r21, r27
    7954:	da 01       	movw	r26, r20
    7956:	c9 01       	movw	r24, r18
    7958:	80 38       	cpi	r24, 0x80	; 128
    795a:	91 45       	sbci	r25, 0x51	; 81
    795c:	a1 40       	sbci	r26, 0x01	; 1
    795e:	b1 05       	cpc	r27, r1
    7960:	a8 f1       	brcs	.+106    	; 0x79cc <set_dst+0xfe>
    7962:	40 92 6f 1a 	sts	0x1A6F, r4	; 0x801a6f <dst+0x8>
    7966:	50 92 70 1a 	sts	0x1A70, r5	; 0x801a70 <dst+0x9>
    796a:	60 92 71 1a 	sts	0x1A71, r6	; 0x801a71 <dst+0xa>
    796e:	70 92 72 1a 	sts	0x1A72, r7	; 0x801a72 <dst+0xb>
    7972:	82 e0       	ldi	r24, 0x02	; 2
    7974:	a8 2e       	mov	r10, r24
    7976:	b1 2c       	mov	r11, r1
    7978:	c1 2c       	mov	r12, r1
    797a:	d1 2c       	mov	r13, r1
    797c:	92 e0       	ldi	r25, 0x02	; 2
    797e:	e9 2e       	mov	r14, r25
    7980:	f1 2c       	mov	r15, r1
    7982:	03 e0       	ldi	r16, 0x03	; 3
    7984:	10 e0       	ldi	r17, 0x00	; 0
    7986:	20 e0       	ldi	r18, 0x00	; 0
    7988:	30 e0       	ldi	r19, 0x00	; 0
    798a:	b3 01       	movw	r22, r6
    798c:	a2 01       	movw	r20, r4
    798e:	80 e0       	ldi	r24, 0x00	; 0
    7990:	90 e0       	ldi	r25, 0x00	; 0
    7992:	17 df       	rcall	.-466    	; 0x77c2 <find_dst>
    7994:	60 93 67 1a 	sts	0x1A67, r22	; 0x801a67 <dst>
    7998:	70 93 68 1a 	sts	0x1A68, r23	; 0x801a68 <dst+0x1>
    799c:	80 93 69 1a 	sts	0x1A69, r24	; 0x801a69 <dst+0x2>
    79a0:	90 93 6a 1a 	sts	0x1A6A, r25	; 0x801a6a <dst+0x3>
    79a4:	ee 24       	eor	r14, r14
    79a6:	e3 94       	inc	r14
    79a8:	f1 2c       	mov	r15, r1
    79aa:	0b e0       	ldi	r16, 0x0B	; 11
    79ac:	10 e0       	ldi	r17, 0x00	; 0
    79ae:	20 e0       	ldi	r18, 0x00	; 0
    79b0:	30 e0       	ldi	r19, 0x00	; 0
    79b2:	b3 01       	movw	r22, r6
    79b4:	a2 01       	movw	r20, r4
    79b6:	81 e0       	ldi	r24, 0x01	; 1
    79b8:	90 e0       	ldi	r25, 0x00	; 0
    79ba:	03 df       	rcall	.-506    	; 0x77c2 <find_dst>
    79bc:	60 93 6b 1a 	sts	0x1A6B, r22	; 0x801a6b <dst+0x4>
    79c0:	70 93 6c 1a 	sts	0x1A6C, r23	; 0x801a6c <dst+0x5>
    79c4:	80 93 6d 1a 	sts	0x1A6D, r24	; 0x801a6d <dst+0x6>
    79c8:	90 93 6e 1a 	sts	0x1A6E, r25	; 0x801a6e <dst+0x7>
    79cc:	2c 96       	adiw	r28, 0x0c	; 12
    79ce:	0f b6       	in	r0, 0x3f	; 63
    79d0:	f8 94       	cli
    79d2:	de bf       	out	0x3e, r29	; 62
    79d4:	0f be       	out	0x3f, r0	; 63
    79d6:	cd bf       	out	0x3d, r28	; 61
    79d8:	df 91       	pop	r29
    79da:	cf 91       	pop	r28
    79dc:	1f 91       	pop	r17
    79de:	0f 91       	pop	r16
    79e0:	ff 90       	pop	r15
    79e2:	ef 90       	pop	r14
    79e4:	df 90       	pop	r13
    79e6:	cf 90       	pop	r12
    79e8:	bf 90       	pop	r11
    79ea:	af 90       	pop	r10
    79ec:	7f 90       	pop	r7
    79ee:	6f 90       	pop	r6
    79f0:	5f 90       	pop	r5
    79f2:	4f 90       	pop	r4
    79f4:	08 95       	ret

000079f6 <asctime_r>:
    79f6:	a5 e1       	ldi	r26, 0x15	; 21
    79f8:	b0 e0       	ldi	r27, 0x00	; 0
    79fa:	e1 e0       	ldi	r30, 0x01	; 1
    79fc:	fd e3       	ldi	r31, 0x3D	; 61
    79fe:	0c 94 dd e2 	jmp	0x1c5ba	; 0x1c5ba <__prologue_saves__+0x1c>
    7a02:	ec 01       	movw	r28, r24
    7a04:	8b 01       	movw	r16, r22
    7a06:	60 e0       	ldi	r22, 0x00	; 0
    7a08:	70 e0       	ldi	r23, 0x00	; 0
    7a0a:	d1 db       	rcall	.-2142   	; 0x71ae <normalize>
    7a0c:	80 e2       	ldi	r24, 0x20	; 32
    7a0e:	f8 01       	movw	r30, r16
    7a10:	11 92       	st	Z+, r1
    7a12:	8a 95       	dec	r24
    7a14:	e9 f7       	brne	.-6      	; 0x7a10 <asctime_r+0x1a>
    7a16:	8a 85       	ldd	r24, Y+10	; 0x0a
    7a18:	9b 85       	ldd	r25, Y+11	; 0x0b
    7a1a:	84 59       	subi	r24, 0x94	; 148
    7a1c:	98 4f       	sbci	r25, 0xF8	; 248
    7a1e:	ed b7       	in	r30, 0x3d	; 61
    7a20:	fe b7       	in	r31, 0x3e	; 62
    7a22:	95 8b       	std	Z+21, r25	; 0x15
    7a24:	84 8b       	std	Z+20, r24	; 0x14
    7a26:	88 81       	ld	r24, Y
    7a28:	99 81       	ldd	r25, Y+1	; 0x01
    7a2a:	93 8b       	std	Z+19, r25	; 0x13
    7a2c:	82 8b       	std	Z+18, r24	; 0x12
    7a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    7a30:	9b 81       	ldd	r25, Y+3	; 0x03
    7a32:	91 8b       	std	Z+17, r25	; 0x11
    7a34:	80 8b       	std	Z+16, r24	; 0x10
    7a36:	8c 81       	ldd	r24, Y+4	; 0x04
    7a38:	9d 81       	ldd	r25, Y+5	; 0x05
    7a3a:	97 87       	std	Z+15, r25	; 0x0f
    7a3c:	86 87       	std	Z+14, r24	; 0x0e
    7a3e:	8e 81       	ldd	r24, Y+6	; 0x06
    7a40:	9f 81       	ldd	r25, Y+7	; 0x07
    7a42:	95 87       	std	Z+13, r25	; 0x0d
    7a44:	84 87       	std	Z+12, r24	; 0x0c
    7a46:	e8 85       	ldd	r30, Y+8	; 0x08
    7a48:	f9 85       	ldd	r31, Y+9	; 0x09
    7a4a:	ee 0f       	add	r30, r30
    7a4c:	ff 1f       	adc	r31, r31
    7a4e:	e5 5f       	subi	r30, 0xF5	; 245
    7a50:	fe 4f       	sbci	r31, 0xFE	; 254
    7a52:	80 81       	ld	r24, Z
    7a54:	91 81       	ldd	r25, Z+1	; 0x01
    7a56:	ed b7       	in	r30, 0x3d	; 61
    7a58:	fe b7       	in	r31, 0x3e	; 62
    7a5a:	93 87       	std	Z+11, r25	; 0x0b
    7a5c:	82 87       	std	Z+10, r24	; 0x0a
    7a5e:	ec 85       	ldd	r30, Y+12	; 0x0c
    7a60:	fd 85       	ldd	r31, Y+13	; 0x0d
    7a62:	ee 0f       	add	r30, r30
    7a64:	ff 1f       	adc	r31, r31
    7a66:	eb 5d       	subi	r30, 0xDB	; 219
    7a68:	fe 4f       	sbci	r31, 0xFE	; 254
    7a6a:	80 81       	ld	r24, Z
    7a6c:	91 81       	ldd	r25, Z+1	; 0x01
    7a6e:	ed b7       	in	r30, 0x3d	; 61
    7a70:	fe b7       	in	r31, 0x3e	; 62
    7a72:	91 87       	std	Z+9, r25	; 0x09
    7a74:	80 87       	std	Z+8, r24	; 0x08
    7a76:	8c e8       	ldi	r24, 0x8C	; 140
    7a78:	97 e0       	ldi	r25, 0x07	; 7
    7a7a:	a0 e0       	ldi	r26, 0x00	; 0
    7a7c:	85 83       	std	Z+5, r24	; 0x05
    7a7e:	96 83       	std	Z+6, r25	; 0x06
    7a80:	a7 83       	std	Z+7, r26	; 0x07
    7a82:	80 e2       	ldi	r24, 0x20	; 32
    7a84:	90 e0       	ldi	r25, 0x00	; 0
    7a86:	94 83       	std	Z+4, r25	; 0x04
    7a88:	83 83       	std	Z+3, r24	; 0x03
    7a8a:	12 83       	std	Z+2, r17	; 0x02
    7a8c:	01 83       	std	Z+1, r16	; 0x01
    7a8e:	0e 94 53 46 	call	0x8ca6	; 0x8ca6 <snprintf_P>
    7a92:	c8 01       	movw	r24, r16
    7a94:	cd b7       	in	r28, 0x3d	; 61
    7a96:	de b7       	in	r29, 0x3e	; 62
    7a98:	65 96       	adiw	r28, 0x15	; 21
    7a9a:	e4 e0       	ldi	r30, 0x04	; 4
    7a9c:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

00007aa0 <asctime>:
    7aa0:	6d ef       	ldi	r22, 0xFD	; 253
    7aa2:	77 e1       	ldi	r23, 0x17	; 23
    7aa4:	a8 cf       	rjmp	.-176    	; 0x79f6 <asctime_r>
    7aa6:	08 95       	ret

00007aa8 <ctime_gm>:
    7aa8:	a6 e1       	ldi	r26, 0x16	; 22
    7aaa:	b0 e0       	ldi	r27, 0x00	; 0
    7aac:	ea e5       	ldi	r30, 0x5A	; 90
    7aae:	fd e3       	ldi	r31, 0x3D	; 61
    7ab0:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
    7ab4:	be 01       	movw	r22, r28
    7ab6:	6f 5f       	subi	r22, 0xFF	; 255
    7ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    7aba:	6d da       	rcall	.-2854   	; 0x6f96 <gmtime_r>
    7abc:	6d ed       	ldi	r22, 0xDD	; 221
    7abe:	77 e1       	ldi	r23, 0x17	; 23
    7ac0:	9a df       	rcall	.-204    	; 0x79f6 <asctime_r>
    7ac2:	66 96       	adiw	r28, 0x16	; 22
    7ac4:	e2 e0       	ldi	r30, 0x02	; 2
    7ac6:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00007aca <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7aca:	a5 e2       	ldi	r26, 0x25	; 37
    7acc:	b0 e0       	ldi	r27, 0x00	; 0
    7ace:	eb e6       	ldi	r30, 0x6B	; 107
    7ad0:	fd e3       	ldi	r31, 0x3D	; 61
    7ad2:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
    7ad6:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7ad8:	40 e0       	ldi	r20, 0x00	; 0
    7ada:	50 e0       	ldi	r21, 0x00	; 0
    7adc:	ba 01       	movw	r22, r20
    7ade:	80 e0       	ldi	r24, 0x00	; 0
    7ae0:	90 e0       	ldi	r25, 0x00	; 0
    7ae2:	0e 94 aa 30 	call	0x6154	; 0x6154 <rtc_init>
    7ae6:	81 11       	cpse	r24, r1
    7ae8:	27 c0       	rjmp	.+78     	; 0x7b38 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7aea:	8b ee       	ldi	r24, 0xEB	; 235
    7aec:	96 e0       	ldi	r25, 0x06	; 6
    7aee:	a0 e0       	ldi	r26, 0x00	; 0
    7af0:	ed b7       	in	r30, 0x3d	; 61
    7af2:	fe b7       	in	r31, 0x3e	; 62
    7af4:	81 83       	std	Z+1, r24	; 0x01
    7af6:	92 83       	std	Z+2, r25	; 0x02
    7af8:	a3 83       	std	Z+3, r26	; 0x03
    7afa:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        printf("attempting rtc init\n");
    7afe:	86 ed       	ldi	r24, 0xD6	; 214
    7b00:	96 e0       	ldi	r25, 0x06	; 6
    7b02:	a0 e0       	ldi	r26, 0x00	; 0
    7b04:	ed b7       	in	r30, 0x3d	; 61
    7b06:	fe b7       	in	r31, 0x3e	; 62
    7b08:	81 83       	std	Z+1, r24	; 0x01
    7b0a:	92 83       	std	Z+2, r25	; 0x02
    7b0c:	a3 83       	std	Z+3, r26	; 0x03
    7b0e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7b12:	40 e0       	ldi	r20, 0x00	; 0
    7b14:	50 e0       	ldi	r21, 0x00	; 0
    7b16:	ba 01       	movw	r22, r20
    7b18:	81 e0       	ldi	r24, 0x01	; 1
    7b1a:	90 e0       	ldi	r25, 0x00	; 0
    7b1c:	0e 94 aa 30 	call	0x6154	; 0x6154 <rtc_init>
    7b20:	81 11       	cpse	r24, r1
    7b22:	0a c0       	rjmp	.+20     	; 0x7b38 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7b24:	8f eb       	ldi	r24, 0xBF	; 191
    7b26:	96 e0       	ldi	r25, 0x06	; 6
    7b28:	a0 e0       	ldi	r26, 0x00	; 0
    7b2a:	ed b7       	in	r30, 0x3d	; 61
    7b2c:	fe b7       	in	r31, 0x3e	; 62
    7b2e:	81 83       	std	Z+1, r24	; 0x01
    7b30:	92 83       	std	Z+2, r25	; 0x02
    7b32:	a3 83       	std	Z+3, r26	; 0x03
    7b34:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        }
    }

    if(rtc_read(&tc))
    7b38:	ce 01       	movw	r24, r28
    7b3a:	04 96       	adiw	r24, 0x04	; 4
    7b3c:	0e 94 f5 30 	call	0x61ea	; 0x61ea <rtc_read>
    7b40:	88 23       	and	r24, r24
    7b42:	51 f0       	breq	.+20     	; 0x7b58 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7b44:	ce 01       	movw	r24, r28
    7b46:	04 96       	adiw	r24, 0x04	; 4
    7b48:	fa dc       	rcall	.-1548   	; 0x753e <timegm>
    7b4a:	6b 01       	movw	r12, r22
    7b4c:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    7b4e:	67 2b       	or	r22, r23
    7b50:	68 2b       	or	r22, r24
    7b52:	69 2b       	or	r22, r25
    7b54:	c1 f4       	brne	.+48     	; 0x7b86 <initialize_clock+0xbc>
    7b56:	0a c0       	rjmp	.+20     	; 0x7b6c <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7b58:	85 ea       	ldi	r24, 0xA5	; 165
    7b5a:	96 e0       	ldi	r25, 0x06	; 6
    7b5c:	a0 e0       	ldi	r26, 0x00	; 0
    7b5e:	ed b7       	in	r30, 0x3d	; 61
    7b60:	fe b7       	in	r31, 0x3e	; 62
    7b62:	81 83       	std	Z+1, r24	; 0x01
    7b64:	92 83       	std	Z+2, r25	; 0x02
    7b66:	a3 83       	std	Z+3, r26	; 0x03
    7b68:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7b6c:	81 e8       	ldi	r24, 0x81	; 129
    7b6e:	96 e0       	ldi	r25, 0x06	; 6
    7b70:	a0 e0       	ldi	r26, 0x00	; 0
    7b72:	ed b7       	in	r30, 0x3d	; 61
    7b74:	fe b7       	in	r31, 0x3e	; 62
    7b76:	81 83       	std	Z+1, r24	; 0x01
    7b78:	92 83       	std	Z+2, r25	; 0x02
    7b7a:	a3 83       	std	Z+3, r26	; 0x03
    7b7c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    7b80:	c1 2c       	mov	r12, r1
    7b82:	d1 2c       	mov	r13, r1
    7b84:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7b86:	1b a3       	std	Y+35, r17	; 0x23
    7b88:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    7b8a:	1d a2       	std	Y+37, r1	; 0x25
    7b8c:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    7b8e:	ce 01       	movw	r24, r28
    7b90:	82 96       	adiw	r24, 0x22	; 34
    7b92:	30 da       	rcall	.-2976   	; 0x6ff4 <settimezone>

    ts.tv_sec = seconds;
    7b94:	ca 8e       	std	Y+26, r12	; 0x1a
    7b96:	db 8e       	std	Y+27, r13	; 0x1b
    7b98:	ec 8e       	std	Y+28, r14	; 0x1c
    7b9a:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    7b9c:	1e 8e       	std	Y+30, r1	; 0x1e
    7b9e:	1f 8e       	std	Y+31, r1	; 0x1f
    7ba0:	18 a2       	std	Y+32, r1	; 0x20
    7ba2:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    7ba4:	be 01       	movw	r22, r28
    7ba6:	66 5e       	subi	r22, 0xE6	; 230
    7ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    7baa:	80 e0       	ldi	r24, 0x00	; 0
    7bac:	90 e0       	ldi	r25, 0x00	; 0
    7bae:	c7 d8       	rcall	.-3698   	; 0x6d3e <clock_settime>
}
    7bb0:	a5 96       	adiw	r28, 0x25	; 37
    7bb2:	e8 e0       	ldi	r30, 0x08	; 8
    7bb4:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

00007bb8 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7bb8:	a9 e2       	ldi	r26, 0x29	; 41
    7bba:	b0 e0       	ldi	r27, 0x00	; 0
    7bbc:	e2 ee       	ldi	r30, 0xE2	; 226
    7bbe:	fd e3       	ldi	r31, 0x3D	; 61
    7bc0:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7bc4:	ce 01       	movw	r24, r28
    7bc6:	08 96       	adiw	r24, 0x08	; 8
    7bc8:	0e 94 f5 30 	call	0x61ea	; 0x61ea <rtc_read>
    7bcc:	88 23       	and	r24, r24
    7bce:	29 f1       	breq	.+74     	; 0x7c1a <display_clock+0x62>
    {
        seconds = timegm(&tc);
    7bd0:	ce 01       	movw	r24, r28
    7bd2:	08 96       	adiw	r24, 0x08	; 8
    7bd4:	b4 dc       	rcall	.-1688   	; 0x753e <timegm>
    7bd6:	6e a3       	std	Y+38, r22	; 0x26
    7bd8:	7f a3       	std	Y+39, r23	; 0x27
    7bda:	88 a7       	std	Y+40, r24	; 0x28
    7bdc:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    7bde:	ed b7       	in	r30, 0x3d	; 61
    7be0:	fe b7       	in	r31, 0x3e	; 62
    7be2:	64 83       	std	Z+4, r22	; 0x04
    7be4:	75 83       	std	Z+5, r23	; 0x05
    7be6:	86 83       	std	Z+6, r24	; 0x06
    7be8:	97 83       	std	Z+7, r25	; 0x07
    7bea:	8f e6       	ldi	r24, 0x6F	; 111
    7bec:	96 e0       	ldi	r25, 0x06	; 6
    7bee:	a0 e0       	ldi	r26, 0x00	; 0
    7bf0:	81 83       	std	Z+1, r24	; 0x01
    7bf2:	92 83       	std	Z+2, r25	; 0x02
    7bf4:	a3 83       	std	Z+3, r26	; 0x03
    7bf6:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7bfa:	ce 01       	movw	r24, r28
    7bfc:	08 96       	adiw	r24, 0x08	; 8
    7bfe:	50 df       	rcall	.-352    	; 0x7aa0 <asctime>
    7c00:	ed b7       	in	r30, 0x3d	; 61
    7c02:	fe b7       	in	r31, 0x3e	; 62
    7c04:	95 83       	std	Z+5, r25	; 0x05
    7c06:	84 83       	std	Z+4, r24	; 0x04
    7c08:	8e e5       	ldi	r24, 0x5E	; 94
    7c0a:	96 e0       	ldi	r25, 0x06	; 6
    7c0c:	a0 e0       	ldi	r26, 0x00	; 0
    7c0e:	81 83       	std	Z+1, r24	; 0x01
    7c10:	92 83       	std	Z+2, r25	; 0x02
    7c12:	a3 83       	std	Z+3, r26	; 0x03
    7c14:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    7c18:	0a c0       	rjmp	.+20     	; 0x7c2e <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7c1a:	8d e4       	ldi	r24, 0x4D	; 77
    7c1c:	96 e0       	ldi	r25, 0x06	; 6
    7c1e:	a0 e0       	ldi	r26, 0x00	; 0
    7c20:	ed b7       	in	r30, 0x3d	; 61
    7c22:	fe b7       	in	r31, 0x3e	; 62
    7c24:	81 83       	std	Z+1, r24	; 0x01
    7c26:	92 83       	std	Z+2, r25	; 0x02
    7c28:	a3 83       	std	Z+3, r26	; 0x03
    7c2a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7c2e:	be 01       	movw	r22, r28
    7c30:	62 5e       	subi	r22, 0xE2	; 226
    7c32:	7f 4f       	sbci	r23, 0xFF	; 255
    7c34:	80 e0       	ldi	r24, 0x00	; 0
    7c36:	90 e0       	ldi	r25, 0x00	; 0
    7c38:	0e 94 f6 33 	call	0x67ec	; 0x67ec <clock_gettime>
    seconds = ts.tv_sec;
    7c3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7c3e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7c40:	a8 a1       	ldd	r26, Y+32	; 0x20
    7c42:	b9 a1       	ldd	r27, Y+33	; 0x21
    7c44:	8e a3       	std	Y+38, r24	; 0x26
    7c46:	9f a3       	std	Y+39, r25	; 0x27
    7c48:	a8 a7       	std	Y+40, r26	; 0x28
    7c4a:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    7c4c:	ed b7       	in	r30, 0x3d	; 61
    7c4e:	fe b7       	in	r31, 0x3e	; 62
    7c50:	84 83       	std	Z+4, r24	; 0x04
    7c52:	95 83       	std	Z+5, r25	; 0x05
    7c54:	a6 83       	std	Z+6, r26	; 0x06
    7c56:	b7 83       	std	Z+7, r27	; 0x07
    7c58:	8b e3       	ldi	r24, 0x3B	; 59
    7c5a:	96 e0       	ldi	r25, 0x06	; 6
    7c5c:	a0 e0       	ldi	r26, 0x00	; 0
    7c5e:	81 83       	std	Z+1, r24	; 0x01
    7c60:	92 83       	std	Z+2, r25	; 0x02
    7c62:	a3 83       	std	Z+3, r26	; 0x03
    7c64:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7c68:	ce 01       	movw	r24, r28
    7c6a:	86 96       	adiw	r24, 0x26	; 38
    7c6c:	a9 d9       	rcall	.-3246   	; 0x6fc0 <gmtime>
    7c6e:	18 df       	rcall	.-464    	; 0x7aa0 <asctime>
    7c70:	ed b7       	in	r30, 0x3d	; 61
    7c72:	fe b7       	in	r31, 0x3e	; 62
    7c74:	95 83       	std	Z+5, r25	; 0x05
    7c76:	84 83       	std	Z+4, r24	; 0x04
    7c78:	8a e2       	ldi	r24, 0x2A	; 42
    7c7a:	96 e0       	ldi	r25, 0x06	; 6
    7c7c:	a0 e0       	ldi	r26, 0x00	; 0
    7c7e:	81 83       	std	Z+1, r24	; 0x01
    7c80:	92 83       	std	Z+2, r25	; 0x02
    7c82:	a3 83       	std	Z+3, r26	; 0x03
    7c84:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
}
    7c88:	a9 96       	adiw	r28, 0x29	; 41
    7c8a:	e2 e0       	ldi	r30, 0x02	; 2
    7c8c:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00007c90 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7c90:	fc 01       	movw	r30, r24
    7c92:	84 81       	ldd	r24, Z+4	; 0x04
    7c94:	95 81       	ldd	r25, Z+5	; 0x05
    7c96:	00 97       	sbiw	r24, 0x00	; 0
    7c98:	79 f0       	breq	.+30     	; 0x7cb8 <_putc_buffer_fn+0x28>
    7c9a:	66 23       	and	r22, r22
    7c9c:	69 f0       	breq	.+26     	; 0x7cb8 <_putc_buffer_fn+0x28>
    7c9e:	01 97       	sbiw	r24, 0x01	; 1
    7ca0:	95 83       	std	Z+5, r25	; 0x05
    7ca2:	84 83       	std	Z+4, r24	; 0x04
    7ca4:	86 81       	ldd	r24, Z+6	; 0x06
    7ca6:	97 81       	ldd	r25, Z+7	; 0x07
    7ca8:	01 96       	adiw	r24, 0x01	; 1
    7caa:	97 83       	std	Z+7, r25	; 0x07
    7cac:	86 83       	std	Z+6, r24	; 0x06
    7cae:	a2 81       	ldd	r26, Z+2	; 0x02
    7cb0:	b3 81       	ldd	r27, Z+3	; 0x03
    7cb2:	6d 93       	st	X+, r22
    7cb4:	b3 83       	std	Z+3, r27	; 0x03
    7cb6:	a2 83       	std	Z+2, r26	; 0x02
    7cb8:	02 80       	ldd	r0, Z+2	; 0x02
    7cba:	f3 81       	ldd	r31, Z+3	; 0x03
    7cbc:	e0 2d       	mov	r30, r0
    7cbe:	10 82       	st	Z, r1
    7cc0:	08 95       	ret

00007cc2 <_putc_fn>:
    7cc2:	fc 01       	movw	r30, r24
    7cc4:	26 81       	ldd	r18, Z+6	; 0x06
    7cc6:	37 81       	ldd	r19, Z+7	; 0x07
    7cc8:	2f 5f       	subi	r18, 0xFF	; 255
    7cca:	3f 4f       	sbci	r19, 0xFF	; 255
    7ccc:	37 83       	std	Z+7, r19	; 0x07
    7cce:	26 83       	std	Z+6, r18	; 0x06
    7cd0:	86 2f       	mov	r24, r22
    7cd2:	90 e0       	ldi	r25, 0x00	; 0
    7cd4:	0c 94 d1 76 	jmp	0xeda2	; 0xeda2 <putchar>
    7cd8:	08 95       	ret

00007cda <bin2num>:
    7cda:	a0 e0       	ldi	r26, 0x00	; 0
    7cdc:	b0 e0       	ldi	r27, 0x00	; 0
    7cde:	e3 e7       	ldi	r30, 0x73	; 115
    7ce0:	fe e3       	ldi	r31, 0x3E	; 62
    7ce2:	0c 94 d6 e2 	jmp	0x1c5ac	; 0x1c5ac <__prologue_saves__+0xe>
    7ce6:	ea 01       	movw	r28, r20
    7ce8:	53 e0       	ldi	r21, 0x03	; 3
    7cea:	ee 0c       	add	r14, r14
    7cec:	ff 1c       	adc	r15, r15
    7cee:	5a 95       	dec	r21
    7cf0:	e1 f7       	brne	.-8      	; 0x7cea <bin2num+0x10>
    7cf2:	fc 01       	movw	r30, r24
    7cf4:	af 01       	movw	r20, r30
    7cf6:	48 1b       	sub	r20, r24
    7cf8:	59 0b       	sbc	r21, r25
    7cfa:	c4 17       	cp	r28, r20
    7cfc:	d5 07       	cpc	r29, r21
    7cfe:	14 f0       	brlt	.+4      	; 0x7d04 <bin2num+0x2a>
    7d00:	11 92       	st	Z+, r1
    7d02:	f8 cf       	rjmp	.-16     	; 0x7cf4 <bin2num+0x1a>
    7d04:	41 e0       	ldi	r20, 0x01	; 1
    7d06:	e4 1a       	sub	r14, r20
    7d08:	f1 08       	sbc	r15, r1
    7d0a:	5b 01       	movw	r10, r22
    7d0c:	42 e0       	ldi	r20, 0x02	; 2
    7d0e:	a4 1a       	sub	r10, r20
    7d10:	b1 08       	sbc	r11, r1
    7d12:	f7 fc       	sbrc	r15, 7
    7d14:	3b c0       	rjmp	.+118    	; 0x7d8c <bin2num+0xb2>
    7d16:	f7 01       	movw	r30, r14
    7d18:	43 e0       	ldi	r20, 0x03	; 3
    7d1a:	f5 95       	asr	r31
    7d1c:	e7 95       	ror	r30
    7d1e:	4a 95       	dec	r20
    7d20:	e1 f7       	brne	.-8      	; 0x7d1a <bin2num+0x40>
    7d22:	e0 0f       	add	r30, r16
    7d24:	f1 1f       	adc	r31, r17
    7d26:	40 81       	ld	r20, Z
    7d28:	50 e0       	ldi	r21, 0x00	; 0
    7d2a:	f7 01       	movw	r30, r14
    7d2c:	e7 70       	andi	r30, 0x07	; 7
    7d2e:	ff 27       	eor	r31, r31
    7d30:	02 c0       	rjmp	.+4      	; 0x7d36 <bin2num+0x5c>
    7d32:	55 95       	asr	r21
    7d34:	47 95       	ror	r20
    7d36:	ea 95       	dec	r30
    7d38:	e2 f7       	brpl	.-8      	; 0x7d32 <bin2num+0x58>
    7d3a:	41 70       	andi	r20, 0x01	; 1
    7d3c:	55 27       	eor	r21, r21
    7d3e:	dc 01       	movw	r26, r24
    7d40:	e0 e0       	ldi	r30, 0x00	; 0
    7d42:	f0 e0       	ldi	r31, 0x00	; 0
    7d44:	ec 17       	cp	r30, r28
    7d46:	fd 07       	cpc	r31, r29
    7d48:	ec f4       	brge	.+58     	; 0x7d84 <bin2num+0xaa>
    7d4a:	ea 15       	cp	r30, r10
    7d4c:	fb 05       	cpc	r31, r11
    7d4e:	4c f0       	brlt	.+18     	; 0x7d62 <bin2num+0x88>
    7d50:	dc 01       	movw	r26, r24
    7d52:	ae 0f       	add	r26, r30
    7d54:	bf 1f       	adc	r27, r31
    7d56:	1c 92       	st	X, r1
    7d58:	41 e0       	ldi	r20, 0x01	; 1
    7d5a:	e4 1a       	sub	r14, r20
    7d5c:	f1 08       	sbc	r15, r1
    7d5e:	ef 01       	movw	r28, r30
    7d60:	d8 cf       	rjmp	.-80     	; 0x7d12 <bin2num+0x38>
    7d62:	9c 90       	ld	r9, X
    7d64:	99 0c       	add	r9, r9
    7d66:	94 2a       	or	r9, r20
    7d68:	49 2d       	mov	r20, r9
    7d6a:	50 e0       	ldi	r21, 0x00	; 0
    7d6c:	42 17       	cp	r20, r18
    7d6e:	53 07       	cpc	r21, r19
    7d70:	24 f0       	brlt	.+8      	; 0x7d7a <bin2num+0xa0>
    7d72:	92 1a       	sub	r9, r18
    7d74:	41 e0       	ldi	r20, 0x01	; 1
    7d76:	50 e0       	ldi	r21, 0x00	; 0
    7d78:	02 c0       	rjmp	.+4      	; 0x7d7e <bin2num+0xa4>
    7d7a:	40 e0       	ldi	r20, 0x00	; 0
    7d7c:	50 e0       	ldi	r21, 0x00	; 0
    7d7e:	9d 92       	st	X+, r9
    7d80:	31 96       	adiw	r30, 0x01	; 1
    7d82:	e0 cf       	rjmp	.-64     	; 0x7d44 <bin2num+0x6a>
    7d84:	41 15       	cp	r20, r1
    7d86:	51 05       	cpc	r21, r1
    7d88:	01 f7       	brne	.-64     	; 0x7d4a <bin2num+0x70>
    7d8a:	e2 cf       	rjmp	.-60     	; 0x7d50 <bin2num+0x76>
    7d8c:	fc 01       	movw	r30, r24
    7d8e:	9f 01       	movw	r18, r30
    7d90:	28 1b       	sub	r18, r24
    7d92:	39 0b       	sbc	r19, r25
    7d94:	2c 17       	cp	r18, r28
    7d96:	3d 07       	cpc	r19, r29
    7d98:	4c f4       	brge	.+18     	; 0x7dac <bin2num+0xd2>
    7d9a:	20 81       	ld	r18, Z
    7d9c:	2a 30       	cpi	r18, 0x0A	; 10
    7d9e:	10 f4       	brcc	.+4      	; 0x7da4 <bin2num+0xca>
    7da0:	20 5d       	subi	r18, 0xD0	; 208
    7da2:	01 c0       	rjmp	.+2      	; 0x7da6 <bin2num+0xcc>
    7da4:	29 5a       	subi	r18, 0xA9	; 169
    7da6:	20 83       	st	Z, r18
    7da8:	31 96       	adiw	r30, 0x01	; 1
    7daa:	f1 cf       	rjmp	.-30     	; 0x7d8e <bin2num+0xb4>
    7dac:	9e 01       	movw	r18, r28
    7dae:	d7 ff       	sbrs	r29, 7
    7db0:	02 c0       	rjmp	.+4      	; 0x7db6 <bin2num+0xdc>
    7db2:	20 e0       	ldi	r18, 0x00	; 0
    7db4:	30 e0       	ldi	r19, 0x00	; 0
    7db6:	c1 14       	cp	r12, r1
    7db8:	d1 04       	cpc	r13, r1
    7dba:	61 f0       	breq	.+24     	; 0x7dd4 <bin2num+0xfa>
    7dbc:	61 50       	subi	r22, 0x01	; 1
    7dbe:	71 09       	sbc	r23, r1
    7dc0:	26 17       	cp	r18, r22
    7dc2:	37 07       	cpc	r19, r23
    7dc4:	3c f4       	brge	.+14     	; 0x7dd4 <bin2num+0xfa>
    7dc6:	fc 01       	movw	r30, r24
    7dc8:	e2 0f       	add	r30, r18
    7dca:	f3 1f       	adc	r31, r19
    7dcc:	c0 82       	st	Z, r12
    7dce:	21 96       	adiw	r28, 0x01	; 1
    7dd0:	2f 5f       	subi	r18, 0xFF	; 255
    7dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    7dd4:	fc 01       	movw	r30, r24
    7dd6:	e2 0f       	add	r30, r18
    7dd8:	f3 1f       	adc	r31, r19
    7dda:	10 82       	st	Z, r1
    7ddc:	0e 94 ad 31 	call	0x635a	; 0x635a <reverse>
    7de0:	ce 01       	movw	r24, r28
    7de2:	cd b7       	in	r28, 0x3d	; 61
    7de4:	de b7       	in	r29, 0x3e	; 62
    7de6:	eb e0       	ldi	r30, 0x0B	; 11
    7de8:	0c 94 f2 e2 	jmp	0x1c5e4	; 0x1c5e4 <__epilogue_restores__+0xe>

00007dec <pch>:
    7dec:	fc 01       	movw	r30, r24
    7dee:	22 81       	ldd	r18, Z+2	; 0x02
    7df0:	33 81       	ldd	r19, Z+3	; 0x03
    7df2:	44 81       	ldd	r20, Z+4	; 0x04
    7df4:	55 81       	ldd	r21, Z+5	; 0x05
    7df6:	80 81       	ld	r24, Z
    7df8:	91 81       	ldd	r25, Z+1	; 0x01
    7dfa:	24 17       	cp	r18, r20
    7dfc:	35 07       	cpc	r19, r21
    7dfe:	54 f4       	brge	.+20     	; 0x7e14 <pch+0x28>
    7e00:	a9 01       	movw	r20, r18
    7e02:	4f 5f       	subi	r20, 0xFF	; 255
    7e04:	5f 4f       	sbci	r21, 0xFF	; 255
    7e06:	53 83       	std	Z+3, r21	; 0x03
    7e08:	42 83       	std	Z+2, r20	; 0x02
    7e0a:	dc 01       	movw	r26, r24
    7e0c:	a2 0f       	add	r26, r18
    7e0e:	b3 1f       	adc	r27, r19
    7e10:	6c 93       	st	X, r22
    7e12:	04 c0       	rjmp	.+8      	; 0x7e1c <pch+0x30>
    7e14:	dc 01       	movw	r26, r24
    7e16:	a2 0f       	add	r26, r18
    7e18:	b3 1f       	adc	r27, r19
    7e1a:	1c 92       	st	X, r1
    7e1c:	82 81       	ldd	r24, Z+2	; 0x02
    7e1e:	93 81       	ldd	r25, Z+3	; 0x03
    7e20:	08 95       	ret

00007e22 <p_ntoa>:
    7e22:	af 92       	push	r10
    7e24:	cf 92       	push	r12
    7e26:	df 92       	push	r13
    7e28:	ef 92       	push	r14
    7e2a:	ff 92       	push	r15
    7e2c:	0f 93       	push	r16
    7e2e:	1f 93       	push	r17
    7e30:	cf 93       	push	r28
    7e32:	df 93       	push	r29
    7e34:	dc 01       	movw	r26, r24
    7e36:	eb 01       	movw	r28, r22
    7e38:	fa 01       	movw	r30, r20
    7e3a:	b9 01       	movw	r22, r18
    7e3c:	98 01       	movw	r18, r16
    7e3e:	a6 01       	movw	r20, r12
    7e40:	9a 2d       	mov	r25, r10
    7e42:	a5 fa       	bst	r10, 5
    7e44:	cc 24       	eor	r12, r12
    7e46:	c0 f8       	bld	r12, 0
    7e48:	a6 fc       	sbrc	r10, 6
    7e4a:	07 c0       	rjmp	.+14     	; 0x7e5a <p_ntoa+0x38>
    7e4c:	a2 fc       	sbrc	r10, 2
    7e4e:	08 c0       	rjmp	.+16     	; 0x7e60 <p_ntoa+0x3e>
    7e50:	a4 fe       	sbrs	r10, 4
    7e52:	09 c0       	rjmp	.+18     	; 0x7e66 <p_ntoa+0x44>
    7e54:	00 e2       	ldi	r16, 0x20	; 32
    7e56:	10 e0       	ldi	r17, 0x00	; 0
    7e58:	08 c0       	rjmp	.+16     	; 0x7e6a <p_ntoa+0x48>
    7e5a:	0d e2       	ldi	r16, 0x2D	; 45
    7e5c:	10 e0       	ldi	r17, 0x00	; 0
    7e5e:	05 c0       	rjmp	.+10     	; 0x7e6a <p_ntoa+0x48>
    7e60:	0b e2       	ldi	r16, 0x2B	; 43
    7e62:	10 e0       	ldi	r17, 0x00	; 0
    7e64:	02 c0       	rjmp	.+4      	; 0x7e6a <p_ntoa+0x48>
    7e66:	00 e0       	ldi	r16, 0x00	; 0
    7e68:	10 e0       	ldi	r17, 0x00	; 0
    7e6a:	95 ff       	sbrs	r25, 5
    7e6c:	04 c0       	rjmp	.+8      	; 0x7e76 <p_ntoa+0x54>
    7e6e:	89 2f       	mov	r24, r25
    7e70:	8a 70       	andi	r24, 0x0A	; 10
    7e72:	09 f0       	breq	.+2      	; 0x7e76 <p_ntoa+0x54>
    7e74:	c1 2c       	mov	r12, r1
    7e76:	c0 fa       	bst	r12, 0
    7e78:	95 f9       	bld	r25, 5
    7e7a:	89 2f       	mov	r24, r25
    7e7c:	82 70       	andi	r24, 0x02	; 2
    7e7e:	c8 2e       	mov	r12, r24
    7e80:	91 fd       	sbrc	r25, 1
    7e82:	02 c0       	rjmp	.+4      	; 0x7e88 <p_ntoa+0x66>
    7e84:	40 e0       	ldi	r20, 0x00	; 0
    7e86:	50 e0       	ldi	r21, 0x00	; 0
    7e88:	89 2f       	mov	r24, r25
    7e8a:	83 70       	andi	r24, 0x03	; 3
    7e8c:	11 f4       	brne	.+4      	; 0x7e92 <p_ntoa+0x70>
    7e8e:	41 e0       	ldi	r20, 0x01	; 1
    7e90:	50 e0       	ldi	r21, 0x00	; 0
    7e92:	90 ff       	sbrs	r25, 0
    7e94:	0c c0       	rjmp	.+24     	; 0x7eae <p_ntoa+0x8c>
    7e96:	95 fd       	sbrc	r25, 5
    7e98:	05 c0       	rjmp	.+10     	; 0x7ea4 <p_ntoa+0x82>
    7e9a:	c1 10       	cpse	r12, r1
    7e9c:	08 c0       	rjmp	.+16     	; 0x7eae <p_ntoa+0x8c>
    7e9e:	41 e0       	ldi	r20, 0x01	; 1
    7ea0:	50 e0       	ldi	r21, 0x00	; 0
    7ea2:	05 c0       	rjmp	.+10     	; 0x7eae <p_ntoa+0x8c>
    7ea4:	94 75       	andi	r25, 0x54	; 84
    7ea6:	a7 01       	movw	r20, r14
    7ea8:	11 f0       	breq	.+4      	; 0x7eae <p_ntoa+0x8c>
    7eaa:	41 50       	subi	r20, 0x01	; 1
    7eac:	51 09       	sbc	r21, r1
    7eae:	68 01       	movw	r12, r16
    7eb0:	7e 01       	movw	r14, r28
    7eb2:	8d 01       	movw	r16, r26
    7eb4:	cf 01       	movw	r24, r30
    7eb6:	11 df       	rcall	.-478    	; 0x7cda <bin2num>
    7eb8:	df 91       	pop	r29
    7eba:	cf 91       	pop	r28
    7ebc:	1f 91       	pop	r17
    7ebe:	0f 91       	pop	r16
    7ec0:	ff 90       	pop	r15
    7ec2:	ef 90       	pop	r14
    7ec4:	df 90       	pop	r13
    7ec6:	cf 90       	pop	r12
    7ec8:	af 90       	pop	r10
    7eca:	08 95       	ret

00007ecc <p_ftoa>:
    7ecc:	aa e0       	ldi	r26, 0x0A	; 10
    7ece:	b0 e0       	ldi	r27, 0x00	; 0
    7ed0:	ec e6       	ldi	r30, 0x6C	; 108
    7ed2:	ff e3       	ldi	r31, 0x3F	; 63
    7ed4:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
    7ed8:	4b 01       	movw	r8, r22
    7eda:	5c 01       	movw	r10, r24
    7edc:	1a 01       	movw	r2, r20
    7ede:	28 01       	movw	r4, r16
    7ee0:	c6 fa       	bst	r12, 6
    7ee2:	11 27       	eor	r17, r17
    7ee4:	10 f9       	bld	r17, 0
    7ee6:	5a 83       	std	Y+2, r21	; 0x02
    7ee8:	49 83       	std	Y+1, r20	; 0x01
    7eea:	1c 82       	std	Y+4, r1	; 0x04
    7eec:	1b 82       	std	Y+3, r1	; 0x03
    7eee:	21 50       	subi	r18, 0x01	; 1
    7ef0:	31 09       	sbc	r19, r1
    7ef2:	3e 83       	std	Y+6, r19	; 0x06
    7ef4:	2d 83       	std	Y+5, r18	; 0x05
    7ef6:	fa 01       	movw	r30, r20
    7ef8:	10 82       	st	Z, r1
    7efa:	20 e0       	ldi	r18, 0x00	; 0
    7efc:	30 e0       	ldi	r19, 0x00	; 0
    7efe:	a9 01       	movw	r20, r18
    7f00:	0e 94 8d e3 	call	0x1c71a	; 0x1c71a <__cmpsf2>
    7f04:	87 ff       	sbrs	r24, 7
    7f06:	05 c0       	rjmp	.+10     	; 0x7f12 <p_ftoa+0x46>
    7f08:	b7 fa       	bst	r11, 7
    7f0a:	b0 94       	com	r11
    7f0c:	b7 f8       	bld	r11, 7
    7f0e:	b0 94       	com	r11
    7f10:	11 e0       	ldi	r17, 0x01	; 1
    7f12:	10 fb       	bst	r17, 0
    7f14:	c6 f8       	bld	r12, 6
    7f16:	c6 fe       	sbrs	r12, 6
    7f18:	02 c0       	rjmp	.+4      	; 0x7f1e <p_ftoa+0x52>
    7f1a:	6d e2       	ldi	r22, 0x2D	; 45
    7f1c:	07 c0       	rjmp	.+14     	; 0x7f2c <p_ftoa+0x60>
    7f1e:	c2 fe       	sbrs	r12, 2
    7f20:	02 c0       	rjmp	.+4      	; 0x7f26 <p_ftoa+0x5a>
    7f22:	6b e2       	ldi	r22, 0x2B	; 43
    7f24:	03 c0       	rjmp	.+6      	; 0x7f2c <p_ftoa+0x60>
    7f26:	c4 fe       	sbrs	r12, 4
    7f28:	04 c0       	rjmp	.+8      	; 0x7f32 <p_ftoa+0x66>
    7f2a:	60 e2       	ldi	r22, 0x20	; 32
    7f2c:	ce 01       	movw	r24, r28
    7f2e:	01 96       	adiw	r24, 0x01	; 1
    7f30:	5d df       	rcall	.-326    	; 0x7dec <pch>
    7f32:	37 01       	movw	r6, r14
    7f34:	f7 fe       	sbrs	r15, 7
    7f36:	02 c0       	rjmp	.+4      	; 0x7f3c <p_ftoa+0x70>
    7f38:	61 2c       	mov	r6, r1
    7f3a:	71 2c       	mov	r7, r1
    7f3c:	20 e0       	ldi	r18, 0x00	; 0
    7f3e:	30 e0       	ldi	r19, 0x00	; 0
    7f40:	a9 01       	movw	r20, r18
    7f42:	c5 01       	movw	r24, r10
    7f44:	b4 01       	movw	r22, r8
    7f46:	0e 94 8d e3 	call	0x1c71a	; 0x1c71a <__cmpsf2>
    7f4a:	88 23       	and	r24, r24
    7f4c:	d1 f1       	breq	.+116    	; 0x7fc2 <p_ftoa+0xf6>
    7f4e:	c1 fe       	sbrs	r12, 1
    7f50:	11 c0       	rjmp	.+34     	; 0x7f74 <p_ftoa+0xa8>
    7f52:	83 01       	movw	r16, r6
    7f54:	60 e0       	ldi	r22, 0x00	; 0
    7f56:	70 e0       	ldi	r23, 0x00	; 0
    7f58:	80 e0       	ldi	r24, 0x00	; 0
    7f5a:	9f e3       	ldi	r25, 0x3F	; 63
    7f5c:	01 15       	cp	r16, r1
    7f5e:	11 05       	cpc	r17, r1
    7f60:	69 f0       	breq	.+26     	; 0x7f7c <p_ftoa+0xb0>
    7f62:	20 e0       	ldi	r18, 0x00	; 0
    7f64:	30 e0       	ldi	r19, 0x00	; 0
    7f66:	40 e2       	ldi	r20, 0x20	; 32
    7f68:	51 e4       	ldi	r21, 0x41	; 65
    7f6a:	0e 94 91 e3 	call	0x1c722	; 0x1c722 <__divsf3>
    7f6e:	01 50       	subi	r16, 0x01	; 1
    7f70:	11 09       	sbc	r17, r1
    7f72:	f4 cf       	rjmp	.-24     	; 0x7f5c <p_ftoa+0x90>
    7f74:	60 e0       	ldi	r22, 0x00	; 0
    7f76:	70 e0       	ldi	r23, 0x00	; 0
    7f78:	80 e0       	ldi	r24, 0x00	; 0
    7f7a:	9f e3       	ldi	r25, 0x3F	; 63
    7f7c:	9b 01       	movw	r18, r22
    7f7e:	ac 01       	movw	r20, r24
    7f80:	c5 01       	movw	r24, r10
    7f82:	b4 01       	movw	r22, r8
    7f84:	0e 94 29 e3 	call	0x1c652	; 0x1c652 <__addsf3>
    7f88:	4b 01       	movw	r8, r22
    7f8a:	5c 01       	movw	r10, r24
    7f8c:	ee 24       	eor	r14, r14
    7f8e:	e3 94       	inc	r14
    7f90:	f1 2c       	mov	r15, r1
    7f92:	20 e0       	ldi	r18, 0x00	; 0
    7f94:	30 e0       	ldi	r19, 0x00	; 0
    7f96:	40 e2       	ldi	r20, 0x20	; 32
    7f98:	51 e4       	ldi	r21, 0x41	; 65
    7f9a:	c5 01       	movw	r24, r10
    7f9c:	b4 01       	movw	r22, r8
    7f9e:	0e 94 dc e4 	call	0x1c9b8	; 0x1c9b8 <__gesf2>
    7fa2:	87 fd       	sbrc	r24, 7
    7fa4:	11 c0       	rjmp	.+34     	; 0x7fc8 <p_ftoa+0xfc>
    7fa6:	ff ef       	ldi	r31, 0xFF	; 255
    7fa8:	ef 1a       	sub	r14, r31
    7faa:	ff 0a       	sbc	r15, r31
    7fac:	20 e0       	ldi	r18, 0x00	; 0
    7fae:	30 e0       	ldi	r19, 0x00	; 0
    7fb0:	40 e2       	ldi	r20, 0x20	; 32
    7fb2:	51 e4       	ldi	r21, 0x41	; 65
    7fb4:	c5 01       	movw	r24, r10
    7fb6:	b4 01       	movw	r22, r8
    7fb8:	0e 94 91 e3 	call	0x1c722	; 0x1c722 <__divsf3>
    7fbc:	4b 01       	movw	r8, r22
    7fbe:	5c 01       	movw	r10, r24
    7fc0:	e8 cf       	rjmp	.-48     	; 0x7f92 <p_ftoa+0xc6>
    7fc2:	ee 24       	eor	r14, r14
    7fc4:	e3 94       	inc	r14
    7fc6:	f1 2c       	mov	r15, r1
    7fc8:	8c 2d       	mov	r24, r12
    7fca:	88 72       	andi	r24, 0x28	; 40
    7fcc:	80 32       	cpi	r24, 0x20	; 32
    7fce:	c1 f4       	brne	.+48     	; 0x8000 <p_ftoa+0x134>
    7fd0:	82 01       	movw	r16, r4
    7fd2:	0e 19       	sub	r16, r14
    7fd4:	1f 09       	sbc	r17, r15
    7fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    7fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    7fda:	08 1b       	sub	r16, r24
    7fdc:	19 0b       	sbc	r17, r25
    7fde:	c1 fe       	sbrs	r12, 1
    7fe0:	07 c0       	rjmp	.+14     	; 0x7ff0 <p_ftoa+0x124>
    7fe2:	61 14       	cp	r6, r1
    7fe4:	71 04       	cpc	r7, r1
    7fe6:	21 f0       	breq	.+8      	; 0x7ff0 <p_ftoa+0x124>
    7fe8:	06 19       	sub	r16, r6
    7fea:	17 09       	sbc	r17, r7
    7fec:	01 50       	subi	r16, 0x01	; 1
    7fee:	11 09       	sbc	r17, r1
    7ff0:	10 16       	cp	r1, r16
    7ff2:	11 06       	cpc	r1, r17
    7ff4:	2c f4       	brge	.+10     	; 0x8000 <p_ftoa+0x134>
    7ff6:	60 e3       	ldi	r22, 0x30	; 48
    7ff8:	ce 01       	movw	r24, r28
    7ffa:	01 96       	adiw	r24, 0x01	; 1
    7ffc:	f7 de       	rcall	.-530    	; 0x7dec <pch>
    7ffe:	f6 cf       	rjmp	.-20     	; 0x7fec <p_ftoa+0x120>
    8000:	c5 01       	movw	r24, r10
    8002:	b4 01       	movw	r22, r8
    8004:	0e 94 f9 e3 	call	0x1c7f2	; 0x1c7f2 <__fixsfsi>
    8008:	6f 83       	std	Y+7, r22	; 0x07
    800a:	78 87       	std	Y+8, r23	; 0x08
    800c:	89 87       	std	Y+9, r24	; 0x09
    800e:	9a 87       	std	Y+10, r25	; 0x0a
    8010:	6f 81       	ldd	r22, Y+7	; 0x07
    8012:	60 5d       	subi	r22, 0xD0	; 208
    8014:	ce 01       	movw	r24, r28
    8016:	01 96       	adiw	r24, 0x01	; 1
    8018:	e9 de       	rcall	.-558    	; 0x7dec <pch>
    801a:	2f 81       	ldd	r18, Y+7	; 0x07
    801c:	38 85       	ldd	r19, Y+8	; 0x08
    801e:	b9 01       	movw	r22, r18
    8020:	33 0f       	add	r19, r19
    8022:	88 0b       	sbc	r24, r24
    8024:	99 0b       	sbc	r25, r25
    8026:	0e 94 2c e4 	call	0x1c858	; 0x1c858 <__floatsisf>
    802a:	9b 01       	movw	r18, r22
    802c:	ac 01       	movw	r20, r24
    802e:	c5 01       	movw	r24, r10
    8030:	b4 01       	movw	r22, r8
    8032:	0e 94 28 e3 	call	0x1c650	; 0x1c650 <__subsf3>
    8036:	31 e0       	ldi	r19, 0x01	; 1
    8038:	e3 1a       	sub	r14, r19
    803a:	f1 08       	sbc	r15, r1
    803c:	20 e0       	ldi	r18, 0x00	; 0
    803e:	30 e0       	ldi	r19, 0x00	; 0
    8040:	40 e2       	ldi	r20, 0x20	; 32
    8042:	51 e4       	ldi	r21, 0x41	; 65
    8044:	0e 94 e0 e4 	call	0x1c9c0	; 0x1c9c0 <__mulsf3>
    8048:	4b 01       	movw	r8, r22
    804a:	5c 01       	movw	r10, r24
    804c:	e1 14       	cp	r14, r1
    804e:	f1 04       	cpc	r15, r1
    8050:	b9 f6       	brne	.-82     	; 0x8000 <p_ftoa+0x134>
    8052:	c1 fc       	sbrc	r12, 1
    8054:	10 c0       	rjmp	.+32     	; 0x8076 <p_ftoa+0x1aa>
    8056:	60 e0       	ldi	r22, 0x00	; 0
    8058:	ce 01       	movw	r24, r28
    805a:	01 96       	adiw	r24, 0x01	; 1
    805c:	c7 de       	rcall	.-626    	; 0x7dec <pch>
    805e:	f1 01       	movw	r30, r2
    8060:	01 90       	ld	r0, Z+
    8062:	00 20       	and	r0, r0
    8064:	e9 f7       	brne	.-6      	; 0x8060 <p_ftoa+0x194>
    8066:	31 97       	sbiw	r30, 0x01	; 1
    8068:	cf 01       	movw	r24, r30
    806a:	82 19       	sub	r24, r2
    806c:	93 09       	sbc	r25, r3
    806e:	2a 96       	adiw	r28, 0x0a	; 10
    8070:	e2 e1       	ldi	r30, 0x12	; 18
    8072:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>
    8076:	61 14       	cp	r6, r1
    8078:	71 04       	cpc	r7, r1
    807a:	69 f3       	breq	.-38     	; 0x8056 <p_ftoa+0x18a>
    807c:	6e e2       	ldi	r22, 0x2E	; 46
    807e:	ce 01       	movw	r24, r28
    8080:	01 96       	adiw	r24, 0x01	; 1
    8082:	b4 de       	rcall	.-664    	; 0x7dec <pch>
    8084:	c5 01       	movw	r24, r10
    8086:	b4 01       	movw	r22, r8
    8088:	0e 94 f9 e3 	call	0x1c7f2	; 0x1c7f2 <__fixsfsi>
    808c:	6b 01       	movw	r12, r22
    808e:	7c 01       	movw	r14, r24
    8090:	07 2e       	mov	r0, r23
    8092:	00 0c       	add	r0, r0
    8094:	88 0b       	sbc	r24, r24
    8096:	99 0b       	sbc	r25, r25
    8098:	0e 94 2c e4 	call	0x1c858	; 0x1c858 <__floatsisf>
    809c:	9b 01       	movw	r18, r22
    809e:	ac 01       	movw	r20, r24
    80a0:	c5 01       	movw	r24, r10
    80a2:	b4 01       	movw	r22, r8
    80a4:	0e 94 28 e3 	call	0x1c650	; 0x1c650 <__subsf3>
    80a8:	4b 01       	movw	r8, r22
    80aa:	5c 01       	movw	r10, r24
    80ac:	b6 01       	movw	r22, r12
    80ae:	60 5d       	subi	r22, 0xD0	; 208
    80b0:	7f 4f       	sbci	r23, 0xFF	; 255
    80b2:	ce 01       	movw	r24, r28
    80b4:	01 96       	adiw	r24, 0x01	; 1
    80b6:	9a de       	rcall	.-716    	; 0x7dec <pch>
    80b8:	81 e0       	ldi	r24, 0x01	; 1
    80ba:	68 1a       	sub	r6, r24
    80bc:	71 08       	sbc	r7, r1
    80be:	20 e0       	ldi	r18, 0x00	; 0
    80c0:	30 e0       	ldi	r19, 0x00	; 0
    80c2:	40 e2       	ldi	r20, 0x20	; 32
    80c4:	51 e4       	ldi	r21, 0x41	; 65
    80c6:	c5 01       	movw	r24, r10
    80c8:	b4 01       	movw	r22, r8
    80ca:	0e 94 e0 e4 	call	0x1c9c0	; 0x1c9c0 <__mulsf3>
    80ce:	4b 01       	movw	r8, r22
    80d0:	5c 01       	movw	r10, r24
    80d2:	61 14       	cp	r6, r1
    80d4:	71 04       	cpc	r7, r1
    80d6:	b1 f6       	brne	.-84     	; 0x8084 <p_ftoa+0x1b8>
    80d8:	be cf       	rjmp	.-132    	; 0x8056 <p_ftoa+0x18a>

000080da <p_etoa>:
    80da:	a3 e1       	ldi	r26, 0x13	; 19
    80dc:	b0 e0       	ldi	r27, 0x00	; 0
    80de:	e3 e7       	ldi	r30, 0x73	; 115
    80e0:	f0 e4       	ldi	r31, 0x40	; 64
    80e2:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
    80e6:	4b 01       	movw	r8, r22
    80e8:	5c 01       	movw	r10, r24
    80ea:	59 8b       	std	Y+17, r21	; 0x11
    80ec:	48 8b       	std	Y+16, r20	; 0x10
    80ee:	1b 8b       	std	Y+19, r17	; 0x13
    80f0:	0a 8b       	std	Y+18, r16	; 0x12
    80f2:	3c 2c       	mov	r3, r12
    80f4:	c6 fa       	bst	r12, 6
    80f6:	11 27       	eor	r17, r17
    80f8:	10 f9       	bld	r17, 0
    80fa:	59 87       	std	Y+9, r21	; 0x09
    80fc:	48 87       	std	Y+8, r20	; 0x08
    80fe:	1b 86       	std	Y+11, r1	; 0x0b
    8100:	1a 86       	std	Y+10, r1	; 0x0a
    8102:	21 50       	subi	r18, 0x01	; 1
    8104:	31 09       	sbc	r19, r1
    8106:	3d 87       	std	Y+13, r19	; 0x0d
    8108:	2c 87       	std	Y+12, r18	; 0x0c
    810a:	fa 01       	movw	r30, r20
    810c:	10 82       	st	Z, r1
    810e:	20 e0       	ldi	r18, 0x00	; 0
    8110:	30 e0       	ldi	r19, 0x00	; 0
    8112:	a9 01       	movw	r20, r18
    8114:	0e 94 8d e3 	call	0x1c71a	; 0x1c71a <__cmpsf2>
    8118:	87 ff       	sbrs	r24, 7
    811a:	05 c0       	rjmp	.+10     	; 0x8126 <p_etoa+0x4c>
    811c:	b7 fa       	bst	r11, 7
    811e:	b0 94       	com	r11
    8120:	b7 f8       	bld	r11, 7
    8122:	b0 94       	com	r11
    8124:	11 e0       	ldi	r17, 0x01	; 1
    8126:	10 fb       	bst	r17, 0
    8128:	36 f8       	bld	r3, 6
    812a:	36 fe       	sbrs	r3, 6
    812c:	02 c0       	rjmp	.+4      	; 0x8132 <p_etoa+0x58>
    812e:	6d e2       	ldi	r22, 0x2D	; 45
    8130:	07 c0       	rjmp	.+14     	; 0x8140 <p_etoa+0x66>
    8132:	32 fe       	sbrs	r3, 2
    8134:	02 c0       	rjmp	.+4      	; 0x813a <p_etoa+0x60>
    8136:	6b e2       	ldi	r22, 0x2B	; 43
    8138:	03 c0       	rjmp	.+6      	; 0x8140 <p_etoa+0x66>
    813a:	34 fe       	sbrs	r3, 4
    813c:	04 c0       	rjmp	.+8      	; 0x8146 <p_etoa+0x6c>
    813e:	60 e2       	ldi	r22, 0x20	; 32
    8140:	ce 01       	movw	r24, r28
    8142:	08 96       	adiw	r24, 0x08	; 8
    8144:	53 de       	rcall	.-858    	; 0x7dec <pch>
    8146:	37 01       	movw	r6, r14
    8148:	f7 fe       	sbrs	r15, 7
    814a:	02 c0       	rjmp	.+4      	; 0x8150 <p_etoa+0x76>
    814c:	61 2c       	mov	r6, r1
    814e:	71 2c       	mov	r7, r1
    8150:	1f 86       	std	Y+15, r1	; 0x0f
    8152:	1e 86       	std	Y+14, r1	; 0x0e
    8154:	20 e0       	ldi	r18, 0x00	; 0
    8156:	30 e0       	ldi	r19, 0x00	; 0
    8158:	a9 01       	movw	r20, r18
    815a:	c5 01       	movw	r24, r10
    815c:	b4 01       	movw	r22, r8
    815e:	0e 94 8d e3 	call	0x1c71a	; 0x1c71a <__cmpsf2>
    8162:	f3 2d       	mov	r31, r3
    8164:	f2 70       	andi	r31, 0x02	; 2
    8166:	2f 2e       	mov	r2, r31
    8168:	88 23       	and	r24, r24
    816a:	09 f4       	brne	.+2      	; 0x816e <p_etoa+0x94>
    816c:	70 c0       	rjmp	.+224    	; 0x824e <p_etoa+0x174>
    816e:	ff 23       	and	r31, r31
    8170:	b1 f0       	breq	.+44     	; 0x819e <p_etoa+0xc4>
    8172:	83 01       	movw	r16, r6
    8174:	c1 2c       	mov	r12, r1
    8176:	d1 2c       	mov	r13, r1
    8178:	e1 2c       	mov	r14, r1
    817a:	2f e3       	ldi	r18, 0x3F	; 63
    817c:	f2 2e       	mov	r15, r18
    817e:	01 15       	cp	r16, r1
    8180:	11 05       	cpc	r17, r1
    8182:	91 f0       	breq	.+36     	; 0x81a8 <p_etoa+0xce>
    8184:	20 e0       	ldi	r18, 0x00	; 0
    8186:	30 e0       	ldi	r19, 0x00	; 0
    8188:	40 e2       	ldi	r20, 0x20	; 32
    818a:	51 e4       	ldi	r21, 0x41	; 65
    818c:	c7 01       	movw	r24, r14
    818e:	b6 01       	movw	r22, r12
    8190:	0e 94 91 e3 	call	0x1c722	; 0x1c722 <__divsf3>
    8194:	6b 01       	movw	r12, r22
    8196:	7c 01       	movw	r14, r24
    8198:	01 50       	subi	r16, 0x01	; 1
    819a:	11 09       	sbc	r17, r1
    819c:	f0 cf       	rjmp	.-32     	; 0x817e <p_etoa+0xa4>
    819e:	c1 2c       	mov	r12, r1
    81a0:	d1 2c       	mov	r13, r1
    81a2:	e1 2c       	mov	r14, r1
    81a4:	9f e3       	ldi	r25, 0x3F	; 63
    81a6:	f9 2e       	mov	r15, r25
    81a8:	41 2c       	mov	r4, r1
    81aa:	51 2c       	mov	r5, r1
    81ac:	82 01       	movw	r16, r4
    81ae:	01 50       	subi	r16, 0x01	; 1
    81b0:	11 09       	sbc	r17, r1
    81b2:	20 e0       	ldi	r18, 0x00	; 0
    81b4:	30 e0       	ldi	r19, 0x00	; 0
    81b6:	40 e8       	ldi	r20, 0x80	; 128
    81b8:	5f e3       	ldi	r21, 0x3F	; 63
    81ba:	c5 01       	movw	r24, r10
    81bc:	b4 01       	movw	r22, r8
    81be:	0e 94 8d e3 	call	0x1c71a	; 0x1c71a <__cmpsf2>
    81c2:	87 ff       	sbrs	r24, 7
    81c4:	0c c0       	rjmp	.+24     	; 0x81de <p_etoa+0x104>
    81c6:	20 e0       	ldi	r18, 0x00	; 0
    81c8:	30 e0       	ldi	r19, 0x00	; 0
    81ca:	40 e2       	ldi	r20, 0x20	; 32
    81cc:	51 e4       	ldi	r21, 0x41	; 65
    81ce:	c5 01       	movw	r24, r10
    81d0:	b4 01       	movw	r22, r8
    81d2:	0e 94 e0 e4 	call	0x1c9c0	; 0x1c9c0 <__mulsf3>
    81d6:	4b 01       	movw	r8, r22
    81d8:	5c 01       	movw	r10, r24
    81da:	28 01       	movw	r4, r16
    81dc:	e7 cf       	rjmp	.-50     	; 0x81ac <p_etoa+0xd2>
    81de:	82 01       	movw	r16, r4
    81e0:	0f 5f       	subi	r16, 0xFF	; 255
    81e2:	1f 4f       	sbci	r17, 0xFF	; 255
    81e4:	20 e0       	ldi	r18, 0x00	; 0
    81e6:	30 e0       	ldi	r19, 0x00	; 0
    81e8:	40 e2       	ldi	r20, 0x20	; 32
    81ea:	51 e4       	ldi	r21, 0x41	; 65
    81ec:	c5 01       	movw	r24, r10
    81ee:	b4 01       	movw	r22, r8
    81f0:	0e 94 dc e4 	call	0x1c9b8	; 0x1c9b8 <__gesf2>
    81f4:	87 fd       	sbrc	r24, 7
    81f6:	0c c0       	rjmp	.+24     	; 0x8210 <p_etoa+0x136>
    81f8:	20 e0       	ldi	r18, 0x00	; 0
    81fa:	30 e0       	ldi	r19, 0x00	; 0
    81fc:	40 e2       	ldi	r20, 0x20	; 32
    81fe:	51 e4       	ldi	r21, 0x41	; 65
    8200:	c5 01       	movw	r24, r10
    8202:	b4 01       	movw	r22, r8
    8204:	0e 94 91 e3 	call	0x1c722	; 0x1c722 <__divsf3>
    8208:	4b 01       	movw	r8, r22
    820a:	5c 01       	movw	r10, r24
    820c:	28 01       	movw	r4, r16
    820e:	e7 cf       	rjmp	.-50     	; 0x81de <p_etoa+0x104>
    8210:	a7 01       	movw	r20, r14
    8212:	96 01       	movw	r18, r12
    8214:	c5 01       	movw	r24, r10
    8216:	b4 01       	movw	r22, r8
    8218:	0e 94 29 e3 	call	0x1c652	; 0x1c652 <__addsf3>
    821c:	4b 01       	movw	r8, r22
    821e:	5c 01       	movw	r10, r24
    8220:	82 01       	movw	r16, r4
    8222:	2f ef       	ldi	r18, 0xFF	; 255
    8224:	42 1a       	sub	r4, r18
    8226:	52 0a       	sbc	r5, r18
    8228:	20 e0       	ldi	r18, 0x00	; 0
    822a:	30 e0       	ldi	r19, 0x00	; 0
    822c:	40 e2       	ldi	r20, 0x20	; 32
    822e:	51 e4       	ldi	r21, 0x41	; 65
    8230:	0e 94 dc e4 	call	0x1c9b8	; 0x1c9b8 <__gesf2>
    8234:	87 fd       	sbrc	r24, 7
    8236:	09 c0       	rjmp	.+18     	; 0x824a <p_etoa+0x170>
    8238:	20 e0       	ldi	r18, 0x00	; 0
    823a:	30 e0       	ldi	r19, 0x00	; 0
    823c:	40 e2       	ldi	r20, 0x20	; 32
    823e:	51 e4       	ldi	r21, 0x41	; 65
    8240:	c5 01       	movw	r24, r10
    8242:	b4 01       	movw	r22, r8
    8244:	0e 94 91 e3 	call	0x1c722	; 0x1c722 <__divsf3>
    8248:	e9 cf       	rjmp	.-46     	; 0x821c <p_etoa+0x142>
    824a:	0e 87       	std	Y+14, r16	; 0x0e
    824c:	1f 87       	std	Y+15, r17	; 0x0f
    824e:	85 e6       	ldi	r24, 0x65	; 101
    8250:	89 83       	std	Y+1, r24	; 0x01
    8252:	8e 85       	ldd	r24, Y+14	; 0x0e
    8254:	9f 85       	ldd	r25, Y+15	; 0x0f
    8256:	97 ff       	sbrs	r25, 7
    8258:	08 c0       	rjmp	.+16     	; 0x826a <p_etoa+0x190>
    825a:	91 95       	neg	r25
    825c:	81 95       	neg	r24
    825e:	91 09       	sbc	r25, r1
    8260:	9f 87       	std	Y+15, r25	; 0x0f
    8262:	8e 87       	std	Y+14, r24	; 0x0e
    8264:	8d e2       	ldi	r24, 0x2D	; 45
    8266:	90 e0       	ldi	r25, 0x00	; 0
    8268:	02 c0       	rjmp	.+4      	; 0x826e <p_etoa+0x194>
    826a:	8b e2       	ldi	r24, 0x2B	; 43
    826c:	90 e0       	ldi	r25, 0x00	; 0
    826e:	6c 01       	movw	r12, r24
    8270:	82 e0       	ldi	r24, 0x02	; 2
    8272:	e8 2e       	mov	r14, r24
    8274:	f1 2c       	mov	r15, r1
    8276:	8e 01       	movw	r16, r28
    8278:	02 5f       	subi	r16, 0xF2	; 242
    827a:	1f 4f       	sbci	r17, 0xFF	; 255
    827c:	2a e0       	ldi	r18, 0x0A	; 10
    827e:	30 e0       	ldi	r19, 0x00	; 0
    8280:	42 e0       	ldi	r20, 0x02	; 2
    8282:	50 e0       	ldi	r21, 0x00	; 0
    8284:	65 e0       	ldi	r22, 0x05	; 5
    8286:	70 e0       	ldi	r23, 0x00	; 0
    8288:	ce 01       	movw	r24, r28
    828a:	02 96       	adiw	r24, 0x02	; 2
    828c:	26 dd       	rcall	.-1460   	; 0x7cda <bin2num>
    828e:	9c 01       	movw	r18, r24
    8290:	93 2d       	mov	r25, r3
    8292:	98 72       	andi	r25, 0x28	; 40
    8294:	90 32       	cpi	r25, 0x20	; 32
    8296:	71 f0       	breq	.+28     	; 0x82b4 <p_etoa+0x1da>
    8298:	c5 01       	movw	r24, r10
    829a:	b4 01       	movw	r22, r8
    829c:	0e 94 f9 e3 	call	0x1c7f2	; 0x1c7f2 <__fixsfsi>
    82a0:	6b 01       	movw	r12, r22
    82a2:	7c 01       	movw	r14, r24
    82a4:	60 e3       	ldi	r22, 0x30	; 48
    82a6:	6c 0d       	add	r22, r12
    82a8:	ce 01       	movw	r24, r28
    82aa:	08 96       	adiw	r24, 0x08	; 8
    82ac:	9f dd       	rcall	.-1218   	; 0x7dec <pch>
    82ae:	21 10       	cpse	r2, r1
    82b0:	20 c0       	rjmp	.+64     	; 0x82f2 <p_etoa+0x218>
    82b2:	63 c0       	rjmp	.+198    	; 0x837a <p_etoa+0x2a0>
    82b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    82b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    82b8:	0a 89       	ldd	r16, Y+18	; 0x12
    82ba:	1b 89       	ldd	r17, Y+19	; 0x13
    82bc:	08 1b       	sub	r16, r24
    82be:	19 0b       	sbc	r17, r25
    82c0:	22 20       	and	r2, r2
    82c2:	41 f0       	breq	.+16     	; 0x82d4 <p_etoa+0x1fa>
    82c4:	61 14       	cp	r6, r1
    82c6:	71 04       	cpc	r7, r1
    82c8:	29 f0       	breq	.+10     	; 0x82d4 <p_etoa+0x1fa>
    82ca:	06 19       	sub	r16, r6
    82cc:	17 09       	sbc	r17, r7
    82ce:	06 50       	subi	r16, 0x06	; 6
    82d0:	11 09       	sbc	r17, r1
    82d2:	02 c0       	rjmp	.+4      	; 0x82d8 <p_etoa+0x1fe>
    82d4:	05 50       	subi	r16, 0x05	; 5
    82d6:	11 09       	sbc	r17, r1
    82d8:	24 30       	cpi	r18, 0x04	; 4
    82da:	31 05       	cpc	r19, r1
    82dc:	14 f0       	brlt	.+4      	; 0x82e2 <p_etoa+0x208>
    82de:	01 50       	subi	r16, 0x01	; 1
    82e0:	11 09       	sbc	r17, r1
    82e2:	10 16       	cp	r1, r16
    82e4:	11 06       	cpc	r1, r17
    82e6:	c4 f6       	brge	.-80     	; 0x8298 <p_etoa+0x1be>
    82e8:	60 e3       	ldi	r22, 0x30	; 48
    82ea:	ce 01       	movw	r24, r28
    82ec:	08 96       	adiw	r24, 0x08	; 8
    82ee:	7e dd       	rcall	.-1284   	; 0x7dec <pch>
    82f0:	f6 cf       	rjmp	.-20     	; 0x82de <p_etoa+0x204>
    82f2:	61 14       	cp	r6, r1
    82f4:	71 04       	cpc	r7, r1
    82f6:	09 f4       	brne	.+2      	; 0x82fa <p_etoa+0x220>
    82f8:	40 c0       	rjmp	.+128    	; 0x837a <p_etoa+0x2a0>
    82fa:	b6 01       	movw	r22, r12
    82fc:	dd 0c       	add	r13, r13
    82fe:	88 0b       	sbc	r24, r24
    8300:	99 0b       	sbc	r25, r25
    8302:	0e 94 2c e4 	call	0x1c858	; 0x1c858 <__floatsisf>
    8306:	9b 01       	movw	r18, r22
    8308:	ac 01       	movw	r20, r24
    830a:	c5 01       	movw	r24, r10
    830c:	b4 01       	movw	r22, r8
    830e:	0e 94 28 e3 	call	0x1c650	; 0x1c650 <__subsf3>
    8312:	20 e0       	ldi	r18, 0x00	; 0
    8314:	30 e0       	ldi	r19, 0x00	; 0
    8316:	40 e2       	ldi	r20, 0x20	; 32
    8318:	51 e4       	ldi	r21, 0x41	; 65
    831a:	0e 94 e0 e4 	call	0x1c9c0	; 0x1c9c0 <__mulsf3>
    831e:	4b 01       	movw	r8, r22
    8320:	5c 01       	movw	r10, r24
    8322:	6e e2       	ldi	r22, 0x2E	; 46
    8324:	ce 01       	movw	r24, r28
    8326:	08 96       	adiw	r24, 0x08	; 8
    8328:	61 dd       	rcall	.-1342   	; 0x7dec <pch>
    832a:	c5 01       	movw	r24, r10
    832c:	b4 01       	movw	r22, r8
    832e:	0e 94 f9 e3 	call	0x1c7f2	; 0x1c7f2 <__fixsfsi>
    8332:	6b 01       	movw	r12, r22
    8334:	7c 01       	movw	r14, r24
    8336:	07 2e       	mov	r0, r23
    8338:	00 0c       	add	r0, r0
    833a:	88 0b       	sbc	r24, r24
    833c:	99 0b       	sbc	r25, r25
    833e:	0e 94 2c e4 	call	0x1c858	; 0x1c858 <__floatsisf>
    8342:	9b 01       	movw	r18, r22
    8344:	ac 01       	movw	r20, r24
    8346:	c5 01       	movw	r24, r10
    8348:	b4 01       	movw	r22, r8
    834a:	0e 94 28 e3 	call	0x1c650	; 0x1c650 <__subsf3>
    834e:	4b 01       	movw	r8, r22
    8350:	5c 01       	movw	r10, r24
    8352:	b6 01       	movw	r22, r12
    8354:	60 5d       	subi	r22, 0xD0	; 208
    8356:	7f 4f       	sbci	r23, 0xFF	; 255
    8358:	ce 01       	movw	r24, r28
    835a:	08 96       	adiw	r24, 0x08	; 8
    835c:	47 dd       	rcall	.-1394   	; 0x7dec <pch>
    835e:	20 e0       	ldi	r18, 0x00	; 0
    8360:	30 e0       	ldi	r19, 0x00	; 0
    8362:	40 e2       	ldi	r20, 0x20	; 32
    8364:	51 e4       	ldi	r21, 0x41	; 65
    8366:	c5 01       	movw	r24, r10
    8368:	b4 01       	movw	r22, r8
    836a:	0e 94 e0 e4 	call	0x1c9c0	; 0x1c9c0 <__mulsf3>
    836e:	4b 01       	movw	r8, r22
    8370:	5c 01       	movw	r10, r24
    8372:	31 e0       	ldi	r19, 0x01	; 1
    8374:	63 1a       	sub	r6, r19
    8376:	71 08       	sbc	r7, r1
    8378:	c1 f6       	brne	.-80     	; 0x832a <p_etoa+0x250>
    837a:	8e 01       	movw	r16, r28
    837c:	0f 5f       	subi	r16, 0xFF	; 255
    837e:	1f 4f       	sbci	r17, 0xFF	; 255
    8380:	f8 01       	movw	r30, r16
    8382:	61 91       	ld	r22, Z+
    8384:	8f 01       	movw	r16, r30
    8386:	ce 01       	movw	r24, r28
    8388:	08 96       	adiw	r24, 0x08	; 8
    838a:	66 23       	and	r22, r22
    838c:	11 f0       	breq	.+4      	; 0x8392 <p_etoa+0x2b8>
    838e:	2e dd       	rcall	.-1444   	; 0x7dec <pch>
    8390:	f7 cf       	rjmp	.-18     	; 0x8380 <p_etoa+0x2a6>
    8392:	2c dd       	rcall	.-1448   	; 0x7dec <pch>
    8394:	e8 89       	ldd	r30, Y+16	; 0x10
    8396:	f9 89       	ldd	r31, Y+17	; 0x11
    8398:	01 90       	ld	r0, Z+
    839a:	00 20       	and	r0, r0
    839c:	e9 f7       	brne	.-6      	; 0x8398 <p_etoa+0x2be>
    839e:	cf 01       	movw	r24, r30
    83a0:	01 97       	sbiw	r24, 0x01	; 1
    83a2:	28 89       	ldd	r18, Y+16	; 0x10
    83a4:	39 89       	ldd	r19, Y+17	; 0x11
    83a6:	82 1b       	sub	r24, r18
    83a8:	93 0b       	sbc	r25, r19
    83aa:	63 96       	adiw	r28, 0x13	; 19
    83ac:	e2 e1       	ldi	r30, 0x12	; 18
    83ae:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

000083b2 <_puts_pad>:
    83b2:	a0 e0       	ldi	r26, 0x00	; 0
    83b4:	b0 e0       	ldi	r27, 0x00	; 0
    83b6:	ef ed       	ldi	r30, 0xDF	; 223
    83b8:	f1 e4       	ldi	r31, 0x41	; 65
    83ba:	0c 94 d5 e2 	jmp	0x1c5aa	; 0x1c5aa <__prologue_saves__+0xc>
    83be:	6c 01       	movw	r12, r24
    83c0:	4b 01       	movw	r8, r22
    83c2:	79 01       	movw	r14, r18
    83c4:	24 17       	cp	r18, r20
    83c6:	35 07       	cpc	r19, r21
    83c8:	24 f4       	brge	.+8      	; 0x83d2 <_puts_pad+0x20>
    83ca:	ea 01       	movw	r28, r20
    83cc:	c2 1b       	sub	r28, r18
    83ce:	d3 0b       	sbc	r29, r19
    83d0:	02 c0       	rjmp	.+4      	; 0x83d6 <_puts_pad+0x24>
    83d2:	c0 e0       	ldi	r28, 0x00	; 0
    83d4:	d0 e0       	ldi	r29, 0x00	; 0
    83d6:	01 15       	cp	r16, r1
    83d8:	11 05       	cpc	r17, r1
    83da:	49 f4       	brne	.+18     	; 0x83ee <_puts_pad+0x3c>
    83dc:	21 97       	sbiw	r28, 0x01	; 1
    83de:	38 f0       	brcs	.+14     	; 0x83ee <_puts_pad+0x3c>
    83e0:	d6 01       	movw	r26, r12
    83e2:	ed 91       	ld	r30, X+
    83e4:	fc 91       	ld	r31, X
    83e6:	60 e2       	ldi	r22, 0x20	; 32
    83e8:	c6 01       	movw	r24, r12
    83ea:	09 95       	icall
    83ec:	f7 cf       	rjmp	.-18     	; 0x83dc <_puts_pad+0x2a>
    83ee:	54 01       	movw	r10, r8
    83f0:	f5 01       	movw	r30, r10
    83f2:	61 91       	ld	r22, Z+
    83f4:	5f 01       	movw	r10, r30
    83f6:	66 23       	and	r22, r22
    83f8:	61 f0       	breq	.+24     	; 0x8412 <_puts_pad+0x60>
    83fa:	e1 14       	cp	r14, r1
    83fc:	f1 04       	cpc	r15, r1
    83fe:	49 f0       	breq	.+18     	; 0x8412 <_puts_pad+0x60>
    8400:	d6 01       	movw	r26, r12
    8402:	ed 91       	ld	r30, X+
    8404:	fc 91       	ld	r31, X
    8406:	c6 01       	movw	r24, r12
    8408:	09 95       	icall
    840a:	b1 e0       	ldi	r27, 0x01	; 1
    840c:	eb 1a       	sub	r14, r27
    840e:	f1 08       	sbc	r15, r1
    8410:	ef cf       	rjmp	.-34     	; 0x83f0 <_puts_pad+0x3e>
    8412:	01 15       	cp	r16, r1
    8414:	11 05       	cpc	r17, r1
    8416:	51 f0       	breq	.+20     	; 0x842c <_puts_pad+0x7a>
    8418:	20 97       	sbiw	r28, 0x00	; 0
    841a:	41 f0       	breq	.+16     	; 0x842c <_puts_pad+0x7a>
    841c:	d6 01       	movw	r26, r12
    841e:	ed 91       	ld	r30, X+
    8420:	fc 91       	ld	r31, X
    8422:	60 e2       	ldi	r22, 0x20	; 32
    8424:	c6 01       	movw	r24, r12
    8426:	09 95       	icall
    8428:	21 97       	sbiw	r28, 0x01	; 1
    842a:	f6 cf       	rjmp	.-20     	; 0x8418 <_puts_pad+0x66>
    842c:	cd b7       	in	r28, 0x3d	; 61
    842e:	de b7       	in	r29, 0x3e	; 62
    8430:	ec e0       	ldi	r30, 0x0C	; 12
    8432:	0c 94 f1 e2 	jmp	0x1c5e2	; 0x1c5e2 <__epilogue_restores__+0xc>

00008436 <_printf_fn>:
    8436:	ab e6       	ldi	r26, 0x6B	; 107
    8438:	b0 e0       	ldi	r27, 0x00	; 0
    843a:	e1 e2       	ldi	r30, 0x21	; 33
    843c:	f2 e4       	ldi	r31, 0x42	; 66
    843e:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
    8442:	a5 96       	adiw	r28, 0x25	; 37
    8444:	9f af       	std	Y+63, r25	; 0x3f
    8446:	8e af       	std	Y+62, r24	; 0x3e
    8448:	a5 97       	sbiw	r28, 0x25	; 37
    844a:	6a 01       	movw	r12, r20
    844c:	e6 2e       	mov	r14, r22
    844e:	19 01       	movw	r2, r18
    8450:	a9 96       	adiw	r28, 0x29	; 41
    8452:	1c ae       	std	Y+60, r1	; 0x3c
    8454:	1d ae       	std	Y+61, r1	; 0x3d
    8456:	1e ae       	std	Y+62, r1	; 0x3e
    8458:	1f ae       	std	Y+63, r1	; 0x3f
    845a:	a9 97       	sbiw	r28, 0x29	; 41
    845c:	9e 01       	movw	r18, r28
    845e:	2f 5a       	subi	r18, 0xAF	; 175
    8460:	3f 4f       	sbci	r19, 0xFF	; 255
    8462:	67 96       	adiw	r28, 0x17	; 23
    8464:	3f af       	std	Y+63, r19	; 0x3f
    8466:	2e af       	std	Y+62, r18	; 0x3e
    8468:	67 97       	sbiw	r28, 0x17	; 23
    846a:	ae 01       	movw	r20, r28
    846c:	4d 5b       	subi	r20, 0xBD	; 189
    846e:	5f 4f       	sbci	r21, 0xFF	; 255
    8470:	69 96       	adiw	r28, 0x19	; 25
    8472:	5f af       	std	Y+63, r21	; 0x3f
    8474:	4e af       	std	Y+62, r20	; 0x3e
    8476:	69 97       	sbiw	r28, 0x19	; 25
    8478:	ce 01       	movw	r24, r28
    847a:	85 5b       	subi	r24, 0xB5	; 181
    847c:	9f 4f       	sbci	r25, 0xFF	; 255
    847e:	6b 96       	adiw	r28, 0x1b	; 27
    8480:	9f af       	std	Y+63, r25	; 0x3f
    8482:	8e af       	std	Y+62, r24	; 0x3e
    8484:	6b 97       	sbiw	r28, 0x1b	; 27
    8486:	de 01       	movw	r26, r28
    8488:	ad 5a       	subi	r26, 0xAD	; 173
    848a:	bf 4f       	sbci	r27, 0xFF	; 255
    848c:	6d 96       	adiw	r28, 0x1d	; 29
    848e:	bf af       	std	Y+63, r27	; 0x3f
    8490:	ae af       	std	Y+62, r26	; 0x3e
    8492:	6d 97       	sbiw	r28, 0x1d	; 29
    8494:	f6 01       	movw	r30, r12
    8496:	5e 2d       	mov	r21, r14
    8498:	0e 94 06 e3 	call	0x1c60c	; 0x1c60c <__xload_1>
    849c:	66 23       	and	r22, r22
    849e:	09 f4       	brne	.+2      	; 0x84a2 <_printf_fn+0x6c>
    84a0:	d7 c3       	rjmp	.+1966   	; 0x8c50 <_printf_fn+0x81a>
    84a2:	ae 2d       	mov	r26, r14
    84a4:	c6 01       	movw	r24, r12
    84a6:	01 96       	adiw	r24, 0x01	; 1
    84a8:	a1 1d       	adc	r26, r1
    84aa:	3c 01       	movw	r6, r24
    84ac:	8a 2e       	mov	r8, r26
    84ae:	65 32       	cpi	r22, 0x25	; 37
    84b0:	51 f0       	breq	.+20     	; 0x84c6 <_printf_fn+0x90>
    84b2:	a5 96       	adiw	r28, 0x25	; 37
    84b4:	ae ad       	ldd	r26, Y+62	; 0x3e
    84b6:	bf ad       	ldd	r27, Y+63	; 0x3f
    84b8:	a5 97       	sbiw	r28, 0x25	; 37
    84ba:	ed 91       	ld	r30, X+
    84bc:	fc 91       	ld	r31, X
    84be:	11 97       	sbiw	r26, 0x01	; 1
    84c0:	cd 01       	movw	r24, r26
    84c2:	09 95       	icall
    84c4:	91 c3       	rjmp	.+1826   	; 0x8be8 <_printf_fn+0x7b2>
    84c6:	91 2c       	mov	r9, r1
    84c8:	f3 01       	movw	r30, r6
    84ca:	58 2d       	mov	r21, r8
    84cc:	0e 94 06 e3 	call	0x1c60c	; 0x1c60c <__xload_1>
    84d0:	63 32       	cpi	r22, 0x23	; 35
    84d2:	19 f4       	brne	.+6      	; 0x84da <_printf_fn+0xa4>
    84d4:	68 94       	set
    84d6:	97 f8       	bld	r9, 7
    84d8:	04 c0       	rjmp	.+8      	; 0x84e2 <_printf_fn+0xac>
    84da:	6b 32       	cpi	r22, 0x2B	; 43
    84dc:	39 f4       	brne	.+14     	; 0x84ec <_printf_fn+0xb6>
    84de:	68 94       	set
    84e0:	92 f8       	bld	r9, 2
    84e2:	bf ef       	ldi	r27, 0xFF	; 255
    84e4:	6b 1a       	sub	r6, r27
    84e6:	7b 0a       	sbc	r7, r27
    84e8:	8b 0a       	sbc	r8, r27
    84ea:	ee cf       	rjmp	.-36     	; 0x84c8 <_printf_fn+0x92>
    84ec:	6d 32       	cpi	r22, 0x2D	; 45
    84ee:	a9 f4       	brne	.+42     	; 0x851a <_printf_fn+0xe4>
    84f0:	93 fc       	sbrc	r9, 3
    84f2:	05 c0       	rjmp	.+10     	; 0x84fe <_printf_fn+0xc8>
    84f4:	6d 32       	cpi	r22, 0x2D	; 45
    84f6:	19 f4       	brne	.+6      	; 0x84fe <_printf_fn+0xc8>
    84f8:	68 94       	set
    84fa:	93 f8       	bld	r9, 3
    84fc:	f2 cf       	rjmp	.-28     	; 0x84e2 <_printf_fn+0xac>
    84fe:	94 fc       	sbrc	r9, 4
    8500:	05 c0       	rjmp	.+10     	; 0x850c <_printf_fn+0xd6>
    8502:	60 32       	cpi	r22, 0x20	; 32
    8504:	19 f4       	brne	.+6      	; 0x850c <_printf_fn+0xd6>
    8506:	68 94       	set
    8508:	94 f8       	bld	r9, 4
    850a:	eb cf       	rjmp	.-42     	; 0x84e2 <_printf_fn+0xac>
    850c:	95 fc       	sbrc	r9, 5
    850e:	e9 cf       	rjmp	.-46     	; 0x84e2 <_printf_fn+0xac>
    8510:	60 33       	cpi	r22, 0x30	; 48
    8512:	39 f7       	brne	.-50     	; 0x84e2 <_printf_fn+0xac>
    8514:	68 94       	set
    8516:	95 f8       	bld	r9, 5
    8518:	e4 cf       	rjmp	.-56     	; 0x84e2 <_printf_fn+0xac>
    851a:	86 2f       	mov	r24, r22
    851c:	8f 7e       	andi	r24, 0xEF	; 239
    851e:	80 32       	cpi	r24, 0x20	; 32
    8520:	39 f3       	breq	.-50     	; 0x84f0 <_printf_fn+0xba>
    8522:	70 e0       	ldi	r23, 0x00	; 0
    8524:	60 53       	subi	r22, 0x30	; 48
    8526:	71 09       	sbc	r23, r1
    8528:	41 2c       	mov	r4, r1
    852a:	51 2c       	mov	r5, r1
    852c:	6a 30       	cpi	r22, 0x0A	; 10
    852e:	71 05       	cpc	r23, r1
    8530:	e0 f4       	brcc	.+56     	; 0x856a <_printf_fn+0x134>
    8532:	2a e0       	ldi	r18, 0x0A	; 10
    8534:	f3 01       	movw	r30, r6
    8536:	58 2d       	mov	r21, r8
    8538:	0e 94 06 e3 	call	0x1c60c	; 0x1c60c <__xload_1>
    853c:	70 e0       	ldi	r23, 0x00	; 0
    853e:	cb 01       	movw	r24, r22
    8540:	c0 97       	sbiw	r24, 0x30	; 48
    8542:	0a 97       	sbiw	r24, 0x0a	; 10
    8544:	80 f4       	brcc	.+32     	; 0x8566 <_printf_fn+0x130>
    8546:	ef ef       	ldi	r30, 0xFF	; 255
    8548:	6e 1a       	sub	r6, r30
    854a:	7e 0a       	sbc	r7, r30
    854c:	8e 0a       	sbc	r8, r30
    854e:	24 9d       	mul	r18, r4
    8550:	c0 01       	movw	r24, r0
    8552:	25 9d       	mul	r18, r5
    8554:	90 0d       	add	r25, r0
    8556:	11 24       	eor	r1, r1
    8558:	68 0f       	add	r22, r24
    855a:	79 1f       	adc	r23, r25
    855c:	2b 01       	movw	r4, r22
    855e:	f0 e3       	ldi	r31, 0x30	; 48
    8560:	4f 1a       	sub	r4, r31
    8562:	51 08       	sbc	r5, r1
    8564:	e7 cf       	rjmp	.-50     	; 0x8534 <_printf_fn+0xfe>
    8566:	68 94       	set
    8568:	90 f8       	bld	r9, 0
    856a:	f3 01       	movw	r30, r6
    856c:	58 2d       	mov	r21, r8
    856e:	0e 94 06 e3 	call	0x1c60c	; 0x1c60c <__xload_1>
    8572:	6e 32       	cpi	r22, 0x2E	; 46
    8574:	59 f5       	brne	.+86     	; 0x85cc <_printf_fn+0x196>
    8576:	2f ef       	ldi	r18, 0xFF	; 255
    8578:	62 1a       	sub	r6, r18
    857a:	72 0a       	sbc	r7, r18
    857c:	82 0a       	sbc	r8, r18
    857e:	a1 96       	adiw	r28, 0x21	; 33
    8580:	1f ae       	std	Y+63, r1	; 0x3f
    8582:	1e ae       	std	Y+62, r1	; 0x3e
    8584:	a1 97       	sbiw	r28, 0x21	; 33
    8586:	2a e0       	ldi	r18, 0x0A	; 10
    8588:	f3 01       	movw	r30, r6
    858a:	58 2d       	mov	r21, r8
    858c:	0e 94 06 e3 	call	0x1c60c	; 0x1c60c <__xload_1>
    8590:	70 e0       	ldi	r23, 0x00	; 0
    8592:	cb 01       	movw	r24, r22
    8594:	c0 97       	sbiw	r24, 0x30	; 48
    8596:	0a 97       	sbiw	r24, 0x0a	; 10
    8598:	b0 f4       	brcc	.+44     	; 0x85c6 <_printf_fn+0x190>
    859a:	3f ef       	ldi	r19, 0xFF	; 255
    859c:	63 1a       	sub	r6, r19
    859e:	73 0a       	sbc	r7, r19
    85a0:	83 0a       	sbc	r8, r19
    85a2:	a1 96       	adiw	r28, 0x21	; 33
    85a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    85a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    85a8:	a1 97       	sbiw	r28, 0x21	; 33
    85aa:	24 9f       	mul	r18, r20
    85ac:	c0 01       	movw	r24, r0
    85ae:	25 9f       	mul	r18, r21
    85b0:	90 0d       	add	r25, r0
    85b2:	11 24       	eor	r1, r1
    85b4:	68 0f       	add	r22, r24
    85b6:	79 1f       	adc	r23, r25
    85b8:	cb 01       	movw	r24, r22
    85ba:	c0 97       	sbiw	r24, 0x30	; 48
    85bc:	a1 96       	adiw	r28, 0x21	; 33
    85be:	9f af       	std	Y+63, r25	; 0x3f
    85c0:	8e af       	std	Y+62, r24	; 0x3e
    85c2:	a1 97       	sbiw	r28, 0x21	; 33
    85c4:	e1 cf       	rjmp	.-62     	; 0x8588 <_printf_fn+0x152>
    85c6:	68 94       	set
    85c8:	91 f8       	bld	r9, 1
    85ca:	04 c0       	rjmp	.+8      	; 0x85d4 <_printf_fn+0x19e>
    85cc:	a1 96       	adiw	r28, 0x21	; 33
    85ce:	1f ae       	std	Y+63, r1	; 0x3f
    85d0:	1e ae       	std	Y+62, r1	; 0x3e
    85d2:	a1 97       	sbiw	r28, 0x21	; 33
    85d4:	f3 01       	movw	r30, r6
    85d6:	58 2d       	mov	r21, r8
    85d8:	0e 94 06 e3 	call	0x1c60c	; 0x1c60c <__xload_1>
    85dc:	69 34       	cpi	r22, 0x49	; 73
    85de:	09 f0       	breq	.+2      	; 0x85e2 <_printf_fn+0x1ac>
    85e0:	45 c0       	rjmp	.+138    	; 0x866c <_printf_fn+0x236>
    85e2:	9f ef       	ldi	r25, 0xFF	; 255
    85e4:	69 1a       	sub	r6, r25
    85e6:	79 0a       	sbc	r7, r25
    85e8:	89 0a       	sbc	r8, r25
    85ea:	6f 96       	adiw	r28, 0x1f	; 31
    85ec:	1f ae       	std	Y+63, r1	; 0x3f
    85ee:	1e ae       	std	Y+62, r1	; 0x3e
    85f0:	6f 97       	sbiw	r28, 0x1f	; 31
    85f2:	2a e0       	ldi	r18, 0x0A	; 10
    85f4:	f3 01       	movw	r30, r6
    85f6:	58 2d       	mov	r21, r8
    85f8:	0e 94 06 e3 	call	0x1c60c	; 0x1c60c <__xload_1>
    85fc:	70 e0       	ldi	r23, 0x00	; 0
    85fe:	cb 01       	movw	r24, r22
    8600:	c0 97       	sbiw	r24, 0x30	; 48
    8602:	0a 97       	sbiw	r24, 0x0a	; 10
    8604:	b8 f4       	brcc	.+46     	; 0x8634 <_printf_fn+0x1fe>
    8606:	af ef       	ldi	r26, 0xFF	; 255
    8608:	6a 1a       	sub	r6, r26
    860a:	7a 0a       	sbc	r7, r26
    860c:	8a 0a       	sbc	r8, r26
    860e:	6f 96       	adiw	r28, 0x1f	; 31
    8610:	ee ad       	ldd	r30, Y+62	; 0x3e
    8612:	ff ad       	ldd	r31, Y+63	; 0x3f
    8614:	6f 97       	sbiw	r28, 0x1f	; 31
    8616:	2e 9f       	mul	r18, r30
    8618:	c0 01       	movw	r24, r0
    861a:	2f 9f       	mul	r18, r31
    861c:	90 0d       	add	r25, r0
    861e:	11 24       	eor	r1, r1
    8620:	68 0f       	add	r22, r24
    8622:	79 1f       	adc	r23, r25
    8624:	ab 01       	movw	r20, r22
    8626:	40 53       	subi	r20, 0x30	; 48
    8628:	51 09       	sbc	r21, r1
    862a:	6f 96       	adiw	r28, 0x1f	; 31
    862c:	5f af       	std	Y+63, r21	; 0x3f
    862e:	4e af       	std	Y+62, r20	; 0x3e
    8630:	6f 97       	sbiw	r28, 0x1f	; 31
    8632:	e0 cf       	rjmp	.-64     	; 0x85f4 <_printf_fn+0x1be>
    8634:	6f 96       	adiw	r28, 0x1f	; 31
    8636:	8e ad       	ldd	r24, Y+62	; 0x3e
    8638:	9f ad       	ldd	r25, Y+63	; 0x3f
    863a:	6f 97       	sbiw	r28, 0x1f	; 31
    863c:	00 97       	sbiw	r24, 0x00	; 0
    863e:	09 f4       	brne	.+2      	; 0x8642 <_printf_fn+0x20c>
    8640:	4f c0       	rjmp	.+158    	; 0x86e0 <_printf_fn+0x2aa>
    8642:	87 70       	andi	r24, 0x07	; 7
    8644:	99 27       	eor	r25, r25
    8646:	89 2b       	or	r24, r25
    8648:	09 f0       	breq	.+2      	; 0x864c <_printf_fn+0x216>
    864a:	46 c0       	rjmp	.+140    	; 0x86d8 <_printf_fn+0x2a2>
    864c:	6f 96       	adiw	r28, 0x1f	; 31
    864e:	ae ad       	ldd	r26, Y+62	; 0x3e
    8650:	bf ad       	ldd	r27, Y+63	; 0x3f
    8652:	6f 97       	sbiw	r28, 0x1f	; 31
    8654:	83 e0       	ldi	r24, 0x03	; 3
    8656:	b5 95       	asr	r27
    8658:	a7 95       	ror	r26
    865a:	8a 95       	dec	r24
    865c:	e1 f7       	brne	.-8      	; 0x8656 <_printf_fn+0x220>
    865e:	6f 96       	adiw	r28, 0x1f	; 31
    8660:	bf af       	std	Y+63, r27	; 0x3f
    8662:	ae af       	std	Y+62, r26	; 0x3e
    8664:	6f 97       	sbiw	r28, 0x1f	; 31
    8666:	ab 2b       	or	r26, r27
    8668:	d9 f1       	breq	.+118    	; 0x86e0 <_printf_fn+0x2aa>
    866a:	27 c0       	rjmp	.+78     	; 0x86ba <_printf_fn+0x284>
    866c:	68 36       	cpi	r22, 0x68	; 104
    866e:	29 f4       	brne	.+10     	; 0x867a <_printf_fn+0x244>
    8670:	bf ef       	ldi	r27, 0xFF	; 255
    8672:	6b 1a       	sub	r6, r27
    8674:	7b 0a       	sbc	r7, r27
    8676:	8b 0a       	sbc	r8, r27
    8678:	ba c2       	rjmp	.+1396   	; 0x8bee <_printf_fn+0x7b8>
    867a:	6c 36       	cpi	r22, 0x6C	; 108
    867c:	09 f0       	breq	.+2      	; 0x8680 <_printf_fn+0x24a>
    867e:	b7 c2       	rjmp	.+1390   	; 0x8bee <_printf_fn+0x7b8>
    8680:	a8 2d       	mov	r26, r8
    8682:	c3 01       	movw	r24, r6
    8684:	01 96       	adiw	r24, 0x01	; 1
    8686:	a1 1d       	adc	r26, r1
    8688:	fc 01       	movw	r30, r24
    868a:	5a 2f       	mov	r21, r26
    868c:	0e 94 06 e3 	call	0x1c60c	; 0x1c60c <__xload_1>
    8690:	6c 36       	cpi	r22, 0x6C	; 108
    8692:	49 f0       	breq	.+18     	; 0x86a6 <_printf_fn+0x270>
    8694:	3c 01       	movw	r6, r24
    8696:	8a 2e       	mov	r8, r26
    8698:	24 e0       	ldi	r18, 0x04	; 4
    869a:	30 e0       	ldi	r19, 0x00	; 0
    869c:	6f 96       	adiw	r28, 0x1f	; 31
    869e:	3f af       	std	Y+63, r19	; 0x3f
    86a0:	2e af       	std	Y+62, r18	; 0x3e
    86a2:	6f 97       	sbiw	r28, 0x1f	; 31
    86a4:	0a c0       	rjmp	.+20     	; 0x86ba <_printf_fn+0x284>
    86a6:	32 e0       	ldi	r19, 0x02	; 2
    86a8:	63 0e       	add	r6, r19
    86aa:	71 1c       	adc	r7, r1
    86ac:	81 1c       	adc	r8, r1
    86ae:	48 e0       	ldi	r20, 0x08	; 8
    86b0:	50 e0       	ldi	r21, 0x00	; 0
    86b2:	6f 96       	adiw	r28, 0x1f	; 31
    86b4:	5f af       	std	Y+63, r21	; 0x3f
    86b6:	4e af       	std	Y+62, r20	; 0x3e
    86b8:	6f 97       	sbiw	r28, 0x1f	; 31
    86ba:	f3 01       	movw	r30, r6
    86bc:	58 2d       	mov	r21, r8
    86be:	0e 94 06 e3 	call	0x1c60c	; 0x1c60c <__xload_1>
    86c2:	86 2f       	mov	r24, r22
    86c4:	90 e0       	ldi	r25, 0x00	; 0
    86c6:	a3 96       	adiw	r28, 0x23	; 35
    86c8:	9f af       	std	Y+63, r25	; 0x3f
    86ca:	8e af       	std	Y+62, r24	; 0x3e
    86cc:	a3 97       	sbiw	r28, 0x23	; 35
    86ce:	84 36       	cpi	r24, 0x64	; 100
    86d0:	91 05       	cpc	r25, r1
    86d2:	09 f4       	brne	.+2      	; 0x86d6 <_printf_fn+0x2a0>
    86d4:	93 c2       	rjmp	.+1318   	; 0x8bfc <_printf_fn+0x7c6>
    86d6:	08 c0       	rjmp	.+16     	; 0x86e8 <_printf_fn+0x2b2>
    86d8:	6f 96       	adiw	r28, 0x1f	; 31
    86da:	1f ae       	std	Y+63, r1	; 0x3f
    86dc:	1e ae       	std	Y+62, r1	; 0x3e
    86de:	6f 97       	sbiw	r28, 0x1f	; 31
    86e0:	a3 96       	adiw	r28, 0x23	; 35
    86e2:	1f ae       	std	Y+63, r1	; 0x3f
    86e4:	1e ae       	std	Y+62, r1	; 0x3e
    86e6:	a3 97       	sbiw	r28, 0x23	; 35
    86e8:	31 e0       	ldi	r19, 0x01	; 1
    86ea:	20 e0       	ldi	r18, 0x00	; 0
    86ec:	a3 96       	adiw	r28, 0x23	; 35
    86ee:	ae ad       	ldd	r26, Y+62	; 0x3e
    86f0:	bf ad       	ldd	r27, Y+63	; 0x3f
    86f2:	a3 97       	sbiw	r28, 0x23	; 35
    86f4:	a4 34       	cpi	r26, 0x44	; 68
    86f6:	b1 05       	cpc	r27, r1
    86f8:	09 f0       	breq	.+2      	; 0x86fc <_printf_fn+0x2c6>
    86fa:	30 e0       	ldi	r19, 0x00	; 0
    86fc:	83 2f       	mov	r24, r19
    86fe:	92 2f       	mov	r25, r18
    8700:	a3 96       	adiw	r28, 0x23	; 35
    8702:	ee ad       	ldd	r30, Y+62	; 0x3e
    8704:	ff ad       	ldd	r31, Y+63	; 0x3f
    8706:	a3 97       	sbiw	r28, 0x23	; 35
    8708:	e2 54       	subi	r30, 0x42	; 66
    870a:	f1 09       	sbc	r31, r1
    870c:	e7 33       	cpi	r30, 0x37	; 55
    870e:	f1 05       	cpc	r31, r1
    8710:	08 f0       	brcs	.+2      	; 0x8714 <_printf_fn+0x2de>
    8712:	5d c1       	rjmp	.+698    	; 0x89ce <_printf_fn+0x598>
    8714:	ea 5b       	subi	r30, 0xBA	; 186
    8716:	ff 4f       	sbci	r31, 0xFF	; 255
    8718:	0c 94 a0 e2 	jmp	0x1c540	; 0x1c540 <__tablejump2__>
    871c:	e2 e0       	ldi	r30, 0x02	; 2
    871e:	f0 e0       	ldi	r31, 0x00	; 0
    8720:	6f 96       	adiw	r28, 0x1f	; 31
    8722:	ff af       	std	Y+63, r31	; 0x3f
    8724:	ee af       	std	Y+62, r30	; 0x3e
    8726:	6f 97       	sbiw	r28, 0x1f	; 31
    8728:	29 2d       	mov	r18, r9
    872a:	28 72       	andi	r18, 0x28	; 40
    872c:	28 32       	cpi	r18, 0x28	; 40
    872e:	11 f4       	brne	.+4      	; 0x8734 <_printf_fn+0x2fe>
    8730:	e8 94       	clt
    8732:	95 f8       	bld	r9, 5
    8734:	29 2d       	mov	r18, r9
    8736:	22 72       	andi	r18, 0x22	; 34
    8738:	22 32       	cpi	r18, 0x22	; 34
    873a:	11 f4       	brne	.+4      	; 0x8740 <_printf_fn+0x30a>
    873c:	e8 94       	clt
    873e:	95 f8       	bld	r9, 5
    8740:	29 2d       	mov	r18, r9
    8742:	21 72       	andi	r18, 0x21	; 33
    8744:	21 32       	cpi	r18, 0x21	; 33
    8746:	59 f4       	brne	.+22     	; 0x875e <_printf_fn+0x328>
    8748:	a1 96       	adiw	r28, 0x21	; 33
    874a:	2e ad       	ldd	r18, Y+62	; 0x3e
    874c:	3f ad       	ldd	r19, Y+63	; 0x3f
    874e:	a1 97       	sbiw	r28, 0x21	; 33
    8750:	24 15       	cp	r18, r4
    8752:	35 05       	cpc	r19, r5
    8754:	24 f4       	brge	.+8      	; 0x875e <_printf_fn+0x328>
    8756:	a1 96       	adiw	r28, 0x21	; 33
    8758:	5f ae       	std	Y+63, r5	; 0x3f
    875a:	4e ae       	std	Y+62, r4	; 0x3e
    875c:	a1 97       	sbiw	r28, 0x21	; 33
    875e:	29 2d       	mov	r18, r9
    8760:	23 72       	andi	r18, 0x23	; 35
    8762:	23 32       	cpi	r18, 0x23	; 35
    8764:	59 f4       	brne	.+22     	; 0x877c <_printf_fn+0x346>
    8766:	a1 96       	adiw	r28, 0x21	; 33
    8768:	4e ad       	ldd	r20, Y+62	; 0x3e
    876a:	5f ad       	ldd	r21, Y+63	; 0x3f
    876c:	a1 97       	sbiw	r28, 0x21	; 33
    876e:	44 15       	cp	r20, r4
    8770:	55 05       	cpc	r21, r5
    8772:	24 f4       	brge	.+8      	; 0x877c <_printf_fn+0x346>
    8774:	a1 96       	adiw	r28, 0x21	; 33
    8776:	5f ae       	std	Y+63, r5	; 0x3f
    8778:	4e ae       	std	Y+62, r4	; 0x3e
    877a:	a1 97       	sbiw	r28, 0x21	; 33
    877c:	e8 94       	clt
    877e:	94 f8       	bld	r9, 4
    8780:	e8 94       	clt
    8782:	92 f8       	bld	r9, 2
    8784:	e8 94       	clt
    8786:	96 f8       	bld	r9, 6
    8788:	6f 96       	adiw	r28, 0x1f	; 31
    878a:	ae ad       	ldd	r26, Y+62	; 0x3e
    878c:	bf ad       	ldd	r27, Y+63	; 0x3f
    878e:	6f 97       	sbiw	r28, 0x1f	; 31
    8790:	12 97       	sbiw	r26, 0x02	; 2
    8792:	29 f5       	brne	.+74     	; 0x87de <_printf_fn+0x3a8>
    8794:	51 01       	movw	r10, r2
    8796:	b2 e0       	ldi	r27, 0x02	; 2
    8798:	ab 0e       	add	r10, r27
    879a:	b1 1c       	adc	r11, r1
    879c:	f1 01       	movw	r30, r2
    879e:	80 81       	ld	r24, Z
    87a0:	91 81       	ldd	r25, Z+1	; 0x01
    87a2:	65 96       	adiw	r28, 0x15	; 21
    87a4:	9f af       	std	Y+63, r25	; 0x3f
    87a6:	8e af       	std	Y+62, r24	; 0x3e
    87a8:	65 97       	sbiw	r28, 0x15	; 21
    87aa:	a3 96       	adiw	r28, 0x23	; 35
    87ac:	2e ad       	ldd	r18, Y+62	; 0x3e
    87ae:	3f ad       	ldd	r19, Y+63	; 0x3f
    87b0:	a3 97       	sbiw	r28, 0x23	; 35
    87b2:	24 34       	cpi	r18, 0x44	; 68
    87b4:	31 05       	cpc	r19, r1
    87b6:	09 f0       	breq	.+2      	; 0x87ba <_printf_fn+0x384>
    87b8:	b8 c0       	rjmp	.+368    	; 0x892a <_printf_fn+0x4f4>
    87ba:	97 ff       	sbrs	r25, 7
    87bc:	b0 c0       	rjmp	.+352    	; 0x891e <_printf_fn+0x4e8>
    87be:	68 94       	set
    87c0:	96 f8       	bld	r9, 6
    87c2:	91 95       	neg	r25
    87c4:	81 95       	neg	r24
    87c6:	91 09       	sbc	r25, r1
    87c8:	65 96       	adiw	r28, 0x15	; 21
    87ca:	9f af       	std	Y+63, r25	; 0x3f
    87cc:	8e af       	std	Y+62, r24	; 0x3e
    87ce:	65 97       	sbiw	r28, 0x15	; 21
    87d0:	42 e0       	ldi	r20, 0x02	; 2
    87d2:	50 e0       	ldi	r21, 0x00	; 0
    87d4:	6f 96       	adiw	r28, 0x1f	; 31
    87d6:	5f af       	std	Y+63, r21	; 0x3f
    87d8:	4e af       	std	Y+62, r20	; 0x3e
    87da:	6f 97       	sbiw	r28, 0x1f	; 31
    87dc:	a6 c0       	rjmp	.+332    	; 0x892a <_printf_fn+0x4f4>
    87de:	6f 96       	adiw	r28, 0x1f	; 31
    87e0:	ae ad       	ldd	r26, Y+62	; 0x3e
    87e2:	bf ad       	ldd	r27, Y+63	; 0x3f
    87e4:	6f 97       	sbiw	r28, 0x1f	; 31
    87e6:	14 97       	sbiw	r26, 0x04	; 4
    87e8:	59 f5       	brne	.+86     	; 0x8840 <_printf_fn+0x40a>
    87ea:	51 01       	movw	r10, r2
    87ec:	b4 e0       	ldi	r27, 0x04	; 4
    87ee:	ab 0e       	add	r10, r27
    87f0:	b1 1c       	adc	r11, r1
    87f2:	f1 01       	movw	r30, r2
    87f4:	80 81       	ld	r24, Z
    87f6:	91 81       	ldd	r25, Z+1	; 0x01
    87f8:	a2 81       	ldd	r26, Z+2	; 0x02
    87fa:	b3 81       	ldd	r27, Z+3	; 0x03
    87fc:	2f 96       	adiw	r28, 0x0f	; 15
    87fe:	8c af       	std	Y+60, r24	; 0x3c
    8800:	9d af       	std	Y+61, r25	; 0x3d
    8802:	ae af       	std	Y+62, r26	; 0x3e
    8804:	bf af       	std	Y+63, r27	; 0x3f
    8806:	2f 97       	sbiw	r28, 0x0f	; 15
    8808:	a3 96       	adiw	r28, 0x23	; 35
    880a:	2e ad       	ldd	r18, Y+62	; 0x3e
    880c:	3f ad       	ldd	r19, Y+63	; 0x3f
    880e:	a3 97       	sbiw	r28, 0x23	; 35
    8810:	24 34       	cpi	r18, 0x44	; 68
    8812:	31 05       	cpc	r19, r1
    8814:	09 f0       	breq	.+2      	; 0x8818 <_printf_fn+0x3e2>
    8816:	96 c0       	rjmp	.+300    	; 0x8944 <_printf_fn+0x50e>
    8818:	b7 ff       	sbrs	r27, 7
    881a:	8e c0       	rjmp	.+284    	; 0x8938 <_printf_fn+0x502>
    881c:	68 94       	set
    881e:	96 f8       	bld	r9, 6
    8820:	b0 95       	com	r27
    8822:	a0 95       	com	r26
    8824:	90 95       	com	r25
    8826:	81 95       	neg	r24
    8828:	9f 4f       	sbci	r25, 0xFF	; 255
    882a:	af 4f       	sbci	r26, 0xFF	; 255
    882c:	bf 4f       	sbci	r27, 0xFF	; 255
    882e:	2f 96       	adiw	r28, 0x0f	; 15
    8830:	8c af       	std	Y+60, r24	; 0x3c
    8832:	9d af       	std	Y+61, r25	; 0x3d
    8834:	ae af       	std	Y+62, r26	; 0x3e
    8836:	bf af       	std	Y+63, r27	; 0x3f
    8838:	2f 97       	sbiw	r28, 0x0f	; 15
    883a:	7e c0       	rjmp	.+252    	; 0x8938 <_printf_fn+0x502>
    883c:	81 e0       	ldi	r24, 0x01	; 1
    883e:	90 e0       	ldi	r25, 0x00	; 0
    8840:	6f 96       	adiw	r28, 0x1f	; 31
    8842:	ae ad       	ldd	r26, Y+62	; 0x3e
    8844:	bf ad       	ldd	r27, Y+63	; 0x3f
    8846:	6f 97       	sbiw	r28, 0x1f	; 31
    8848:	51 01       	movw	r10, r2
    884a:	18 97       	sbiw	r26, 0x08	; 8
    884c:	09 f0       	breq	.+2      	; 0x8850 <_printf_fn+0x41a>
    884e:	81 c0       	rjmp	.+258    	; 0x8952 <_printf_fn+0x51c>
    8850:	b8 e0       	ldi	r27, 0x08	; 8
    8852:	ab 0e       	add	r10, r27
    8854:	b1 1c       	adc	r11, r1
    8856:	f1 01       	movw	r30, r2
    8858:	f0 81       	ld	r31, Z
    885a:	aa 96       	adiw	r28, 0x2a	; 42
    885c:	ff af       	std	Y+63, r31	; 0x3f
    885e:	aa 97       	sbiw	r28, 0x2a	; 42
    8860:	f1 01       	movw	r30, r2
    8862:	f1 80       	ldd	r15, Z+1	; 0x01
    8864:	02 81       	ldd	r16, Z+2	; 0x02
    8866:	13 81       	ldd	r17, Z+3	; 0x03
    8868:	b4 81       	ldd	r27, Z+4	; 0x04
    886a:	f5 81       	ldd	r31, Z+5	; 0x05
    886c:	ab 96       	adiw	r28, 0x2b	; 43
    886e:	ff af       	std	Y+63, r31	; 0x3f
    8870:	ab 97       	sbiw	r28, 0x2b	; 43
    8872:	f1 01       	movw	r30, r2
    8874:	f6 81       	ldd	r31, Z+6	; 0x06
    8876:	ac 96       	adiw	r28, 0x2c	; 44
    8878:	ff af       	std	Y+63, r31	; 0x3f
    887a:	ac 97       	sbiw	r28, 0x2c	; 44
    887c:	f1 01       	movw	r30, r2
    887e:	37 80       	ldd	r3, Z+7	; 0x07
    8880:	aa 96       	adiw	r28, 0x2a	; 42
    8882:	ff ad       	ldd	r31, Y+63	; 0x3f
    8884:	aa 97       	sbiw	r28, 0x2a	; 42
    8886:	24 96       	adiw	r28, 0x04	; 4
    8888:	ff af       	std	Y+63, r31	; 0x3f
    888a:	24 97       	sbiw	r28, 0x04	; 4
    888c:	25 96       	adiw	r28, 0x05	; 5
    888e:	ff ae       	std	Y+63, r15	; 0x3f
    8890:	25 97       	sbiw	r28, 0x05	; 5
    8892:	26 96       	adiw	r28, 0x06	; 6
    8894:	0f af       	std	Y+63, r16	; 0x3f
    8896:	26 97       	sbiw	r28, 0x06	; 6
    8898:	27 96       	adiw	r28, 0x07	; 7
    889a:	1f af       	std	Y+63, r17	; 0x3f
    889c:	27 97       	sbiw	r28, 0x07	; 7
    889e:	28 96       	adiw	r28, 0x08	; 8
    88a0:	bf af       	std	Y+63, r27	; 0x3f
    88a2:	28 97       	sbiw	r28, 0x08	; 8
    88a4:	ab 96       	adiw	r28, 0x2b	; 43
    88a6:	ef ad       	ldd	r30, Y+63	; 0x3f
    88a8:	ab 97       	sbiw	r28, 0x2b	; 43
    88aa:	29 96       	adiw	r28, 0x09	; 9
    88ac:	ef af       	std	Y+63, r30	; 0x3f
    88ae:	29 97       	sbiw	r28, 0x09	; 9
    88b0:	ac 96       	adiw	r28, 0x2c	; 44
    88b2:	ff ad       	ldd	r31, Y+63	; 0x3f
    88b4:	ac 97       	sbiw	r28, 0x2c	; 44
    88b6:	2a 96       	adiw	r28, 0x0a	; 10
    88b8:	ff af       	std	Y+63, r31	; 0x3f
    88ba:	2a 97       	sbiw	r28, 0x0a	; 10
    88bc:	2b 96       	adiw	r28, 0x0b	; 11
    88be:	3f ae       	std	Y+63, r3	; 0x3f
    88c0:	2b 97       	sbiw	r28, 0x0b	; 11
    88c2:	89 2b       	or	r24, r25
    88c4:	09 f4       	brne	.+2      	; 0x88c8 <_printf_fn+0x492>
    88c6:	50 c0       	rjmp	.+160    	; 0x8968 <_printf_fn+0x532>
    88c8:	aa 96       	adiw	r28, 0x2a	; 42
    88ca:	2f ad       	ldd	r18, Y+63	; 0x3f
    88cc:	aa 97       	sbiw	r28, 0x2a	; 42
    88ce:	3f 2d       	mov	r19, r15
    88d0:	a8 01       	movw	r20, r16
    88d2:	6b 2f       	mov	r22, r27
    88d4:	7e 2f       	mov	r23, r30
    88d6:	8f 2f       	mov	r24, r31
    88d8:	93 2d       	mov	r25, r3
    88da:	a0 e0       	ldi	r26, 0x00	; 0
    88dc:	0e 94 0d e3 	call	0x1c61a	; 0x1c61a <__cmpdi2_s8>
    88e0:	0c f0       	brlt	.+2      	; 0x88e4 <_printf_fn+0x4ae>
    88e2:	42 c0       	rjmp	.+132    	; 0x8968 <_printf_fn+0x532>
    88e4:	68 94       	set
    88e6:	96 f8       	bld	r9, 6
    88e8:	0e 94 bf e2 	call	0x1c57e	; 0x1c57e <__negdi2>
    88ec:	24 96       	adiw	r28, 0x04	; 4
    88ee:	2f af       	std	Y+63, r18	; 0x3f
    88f0:	24 97       	sbiw	r28, 0x04	; 4
    88f2:	25 96       	adiw	r28, 0x05	; 5
    88f4:	3f af       	std	Y+63, r19	; 0x3f
    88f6:	25 97       	sbiw	r28, 0x05	; 5
    88f8:	26 96       	adiw	r28, 0x06	; 6
    88fa:	4f af       	std	Y+63, r20	; 0x3f
    88fc:	26 97       	sbiw	r28, 0x06	; 6
    88fe:	27 96       	adiw	r28, 0x07	; 7
    8900:	5f af       	std	Y+63, r21	; 0x3f
    8902:	27 97       	sbiw	r28, 0x07	; 7
    8904:	28 96       	adiw	r28, 0x08	; 8
    8906:	6f af       	std	Y+63, r22	; 0x3f
    8908:	28 97       	sbiw	r28, 0x08	; 8
    890a:	29 96       	adiw	r28, 0x09	; 9
    890c:	7f af       	std	Y+63, r23	; 0x3f
    890e:	29 97       	sbiw	r28, 0x09	; 9
    8910:	2a 96       	adiw	r28, 0x0a	; 10
    8912:	8f af       	std	Y+63, r24	; 0x3f
    8914:	2a 97       	sbiw	r28, 0x0a	; 10
    8916:	2b 96       	adiw	r28, 0x0b	; 11
    8918:	9f af       	std	Y+63, r25	; 0x3f
    891a:	2b 97       	sbiw	r28, 0x0b	; 11
    891c:	25 c0       	rjmp	.+74     	; 0x8968 <_printf_fn+0x532>
    891e:	22 e0       	ldi	r18, 0x02	; 2
    8920:	30 e0       	ldi	r19, 0x00	; 0
    8922:	6f 96       	adiw	r28, 0x1f	; 31
    8924:	3f af       	std	Y+63, r19	; 0x3f
    8926:	2e af       	std	Y+62, r18	; 0x3e
    8928:	6f 97       	sbiw	r28, 0x1f	; 31
    892a:	6c 96       	adiw	r28, 0x1c	; 28
    892c:	8f ad       	ldd	r24, Y+63	; 0x3f
    892e:	6c 97       	sbiw	r28, 0x1c	; 28
    8930:	6d 96       	adiw	r28, 0x1d	; 29
    8932:	9f ad       	ldd	r25, Y+63	; 0x3f
    8934:	6d 97       	sbiw	r28, 0x1d	; 29
    8936:	1e c0       	rjmp	.+60     	; 0x8974 <_printf_fn+0x53e>
    8938:	44 e0       	ldi	r20, 0x04	; 4
    893a:	50 e0       	ldi	r21, 0x00	; 0
    893c:	6f 96       	adiw	r28, 0x1f	; 31
    893e:	5f af       	std	Y+63, r21	; 0x3f
    8940:	4e af       	std	Y+62, r20	; 0x3e
    8942:	6f 97       	sbiw	r28, 0x1f	; 31
    8944:	6a 96       	adiw	r28, 0x1a	; 26
    8946:	8f ad       	ldd	r24, Y+63	; 0x3f
    8948:	6a 97       	sbiw	r28, 0x1a	; 26
    894a:	6b 96       	adiw	r28, 0x1b	; 27
    894c:	9f ad       	ldd	r25, Y+63	; 0x3f
    894e:	6b 97       	sbiw	r28, 0x1b	; 27
    8950:	11 c0       	rjmp	.+34     	; 0x8974 <_printf_fn+0x53e>
    8952:	66 96       	adiw	r28, 0x16	; 22
    8954:	8f ad       	ldd	r24, Y+63	; 0x3f
    8956:	66 97       	sbiw	r28, 0x16	; 22
    8958:	67 96       	adiw	r28, 0x17	; 23
    895a:	9f ad       	ldd	r25, Y+63	; 0x3f
    895c:	67 97       	sbiw	r28, 0x17	; 23
    895e:	a3 96       	adiw	r28, 0x23	; 35
    8960:	1f ae       	std	Y+63, r1	; 0x3f
    8962:	1e ae       	std	Y+62, r1	; 0x3e
    8964:	a3 97       	sbiw	r28, 0x23	; 35
    8966:	06 c0       	rjmp	.+12     	; 0x8974 <_printf_fn+0x53e>
    8968:	68 96       	adiw	r28, 0x18	; 24
    896a:	8f ad       	ldd	r24, Y+63	; 0x3f
    896c:	68 97       	sbiw	r28, 0x18	; 24
    896e:	69 96       	adiw	r28, 0x19	; 25
    8970:	9f ad       	ldd	r25, Y+63	; 0x3f
    8972:	69 97       	sbiw	r28, 0x19	; 25
    8974:	5f ef       	ldi	r21, 0xFF	; 255
    8976:	65 1a       	sub	r6, r21
    8978:	75 0a       	sbc	r7, r21
    897a:	85 0a       	sbc	r8, r21
    897c:	15 01       	movw	r2, r10
    897e:	2d c0       	rjmp	.+90     	; 0x89da <_printf_fn+0x5a4>
    8980:	91 fc       	sbrc	r9, 1
    8982:	08 c0       	rjmp	.+16     	; 0x8994 <_printf_fn+0x55e>
    8984:	68 94       	set
    8986:	91 f8       	bld	r9, 1
    8988:	86 e0       	ldi	r24, 0x06	; 6
    898a:	90 e0       	ldi	r25, 0x00	; 0
    898c:	a1 96       	adiw	r28, 0x21	; 33
    898e:	9f af       	std	Y+63, r25	; 0x3f
    8990:	8e af       	std	Y+62, r24	; 0x3e
    8992:	a1 97       	sbiw	r28, 0x21	; 33
    8994:	d1 01       	movw	r26, r2
    8996:	2d 91       	ld	r18, X+
    8998:	3d 91       	ld	r19, X+
    899a:	4d 91       	ld	r20, X+
    899c:	5c 91       	ld	r21, X
    899e:	a9 96       	adiw	r28, 0x29	; 41
    89a0:	2c af       	std	Y+60, r18	; 0x3c
    89a2:	3d af       	std	Y+61, r19	; 0x3d
    89a4:	4e af       	std	Y+62, r20	; 0x3e
    89a6:	5f af       	std	Y+63, r21	; 0x3f
    89a8:	a9 97       	sbiw	r28, 0x29	; 41
    89aa:	bf ef       	ldi	r27, 0xFF	; 255
    89ac:	6b 1a       	sub	r6, r27
    89ae:	7b 0a       	sbc	r7, r27
    89b0:	8b 0a       	sbc	r8, r27
    89b2:	f1 01       	movw	r30, r2
    89b4:	34 96       	adiw	r30, 0x04	; 4
    89b6:	1f 01       	movw	r2, r30
    89b8:	0a c0       	rjmp	.+20     	; 0x89ce <_printf_fn+0x598>
    89ba:	ff ef       	ldi	r31, 0xFF	; 255
    89bc:	6f 1a       	sub	r6, r31
    89be:	7f 0a       	sbc	r7, r31
    89c0:	8f 0a       	sbc	r8, r31
    89c2:	b0 c0       	rjmp	.+352    	; 0x8b24 <_printf_fn+0x6ee>
    89c4:	2f ef       	ldi	r18, 0xFF	; 255
    89c6:	62 1a       	sub	r6, r18
    89c8:	72 0a       	sbc	r7, r18
    89ca:	82 0a       	sbc	r8, r18
    89cc:	b8 c0       	rjmp	.+368    	; 0x8b3e <_printf_fn+0x708>
    89ce:	66 96       	adiw	r28, 0x16	; 22
    89d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    89d2:	66 97       	sbiw	r28, 0x16	; 22
    89d4:	67 96       	adiw	r28, 0x17	; 23
    89d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    89d8:	67 97       	sbiw	r28, 0x17	; 23
    89da:	a3 96       	adiw	r28, 0x23	; 35
    89dc:	ee ad       	ldd	r30, Y+62	; 0x3e
    89de:	ff ad       	ldd	r31, Y+63	; 0x3f
    89e0:	a3 97       	sbiw	r28, 0x23	; 35
    89e2:	e2 54       	subi	r30, 0x42	; 66
    89e4:	f1 09       	sbc	r31, r1
    89e6:	e7 33       	cpi	r30, 0x37	; 55
    89e8:	f1 05       	cpc	r31, r1
    89ea:	08 f0       	brcs	.+2      	; 0x89ee <_printf_fn+0x5b8>
    89ec:	f9 c0       	rjmp	.+498    	; 0x8be0 <_printf_fn+0x7aa>
    89ee:	e3 58       	subi	r30, 0x83	; 131
    89f0:	ff 4f       	sbci	r31, 0xFF	; 255
    89f2:	0c 94 a0 e2 	jmp	0x1c540	; 0x1c540 <__tablejump2__>
    89f6:	e8 94       	clt
    89f8:	94 f8       	bld	r9, 4
    89fa:	e8 94       	clt
    89fc:	92 f8       	bld	r9, 2
    89fe:	a9 2c       	mov	r10, r9
    8a00:	b1 2c       	mov	r11, r1
    8a02:	a1 96       	adiw	r28, 0x21	; 33
    8a04:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a06:	df ac       	ldd	r13, Y+63	; 0x3f
    8a08:	a1 97       	sbiw	r28, 0x21	; 33
    8a0a:	72 01       	movw	r14, r4
    8a0c:	0a e0       	ldi	r16, 0x0A	; 10
    8a0e:	10 e0       	ldi	r17, 0x00	; 0
    8a10:	13 c0       	rjmp	.+38     	; 0x8a38 <_printf_fn+0x602>
    8a12:	a9 2c       	mov	r10, r9
    8a14:	b1 2c       	mov	r11, r1
    8a16:	a1 96       	adiw	r28, 0x21	; 33
    8a18:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a1a:	df ac       	ldd	r13, Y+63	; 0x3f
    8a1c:	a1 97       	sbiw	r28, 0x21	; 33
    8a1e:	72 01       	movw	r14, r4
    8a20:	02 e0       	ldi	r16, 0x02	; 2
    8a22:	10 e0       	ldi	r17, 0x00	; 0
    8a24:	09 c0       	rjmp	.+18     	; 0x8a38 <_printf_fn+0x602>
    8a26:	a9 2c       	mov	r10, r9
    8a28:	b1 2c       	mov	r11, r1
    8a2a:	a1 96       	adiw	r28, 0x21	; 33
    8a2c:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a2e:	df ac       	ldd	r13, Y+63	; 0x3f
    8a30:	a1 97       	sbiw	r28, 0x21	; 33
    8a32:	72 01       	movw	r14, r4
    8a34:	08 e0       	ldi	r16, 0x08	; 8
    8a36:	10 e0       	ldi	r17, 0x00	; 0
    8a38:	22 e4       	ldi	r18, 0x42	; 66
    8a3a:	30 e0       	ldi	r19, 0x00	; 0
    8a3c:	ae 01       	movw	r20, r28
    8a3e:	4f 5f       	subi	r20, 0xFF	; 255
    8a40:	5f 4f       	sbci	r21, 0xFF	; 255
    8a42:	6f 96       	adiw	r28, 0x1f	; 31
    8a44:	6e ad       	ldd	r22, Y+62	; 0x3e
    8a46:	7f ad       	ldd	r23, Y+63	; 0x3f
    8a48:	6f 97       	sbiw	r28, 0x1f	; 31
    8a4a:	eb d9       	rcall	.-3114   	; 0x7e22 <p_ntoa>
    8a4c:	30 c0       	rjmp	.+96     	; 0x8aae <_printf_fn+0x678>
    8a4e:	a9 2c       	mov	r10, r9
    8a50:	b1 2c       	mov	r11, r1
    8a52:	a1 96       	adiw	r28, 0x21	; 33
    8a54:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a56:	df ac       	ldd	r13, Y+63	; 0x3f
    8a58:	a1 97       	sbiw	r28, 0x21	; 33
    8a5a:	72 01       	movw	r14, r4
    8a5c:	00 e1       	ldi	r16, 0x10	; 16
    8a5e:	10 e0       	ldi	r17, 0x00	; 0
    8a60:	22 e4       	ldi	r18, 0x42	; 66
    8a62:	30 e0       	ldi	r19, 0x00	; 0
    8a64:	ae 01       	movw	r20, r28
    8a66:	4f 5f       	subi	r20, 0xFF	; 255
    8a68:	5f 4f       	sbci	r21, 0xFF	; 255
    8a6a:	6f 96       	adiw	r28, 0x1f	; 31
    8a6c:	6e ad       	ldd	r22, Y+62	; 0x3e
    8a6e:	7f ad       	ldd	r23, Y+63	; 0x3f
    8a70:	6f 97       	sbiw	r28, 0x1f	; 31
    8a72:	d7 d9       	rcall	.-3154   	; 0x7e22 <p_ntoa>
    8a74:	7c 01       	movw	r14, r24
    8a76:	a3 96       	adiw	r28, 0x23	; 35
    8a78:	6e ad       	ldd	r22, Y+62	; 0x3e
    8a7a:	7f ad       	ldd	r23, Y+63	; 0x3f
    8a7c:	a3 97       	sbiw	r28, 0x23	; 35
    8a7e:	67 7f       	andi	r22, 0xF7	; 247
    8a80:	60 35       	cpi	r22, 0x50	; 80
    8a82:	71 05       	cpc	r23, r1
    8a84:	c9 f5       	brne	.+114    	; 0x8af8 <_printf_fn+0x6c2>
    8a86:	34 c0       	rjmp	.+104    	; 0x8af0 <_printf_fn+0x6ba>
    8a88:	c9 2c       	mov	r12, r9
    8a8a:	d1 2c       	mov	r13, r1
    8a8c:	a1 96       	adiw	r28, 0x21	; 33
    8a8e:	ee ac       	ldd	r14, Y+62	; 0x3e
    8a90:	ff ac       	ldd	r15, Y+63	; 0x3f
    8a92:	a1 97       	sbiw	r28, 0x21	; 33
    8a94:	82 01       	movw	r16, r4
    8a96:	22 e4       	ldi	r18, 0x42	; 66
    8a98:	30 e0       	ldi	r19, 0x00	; 0
    8a9a:	ae 01       	movw	r20, r28
    8a9c:	4f 5f       	subi	r20, 0xFF	; 255
    8a9e:	5f 4f       	sbci	r21, 0xFF	; 255
    8aa0:	a9 96       	adiw	r28, 0x29	; 41
    8aa2:	6c ad       	ldd	r22, Y+60	; 0x3c
    8aa4:	7d ad       	ldd	r23, Y+61	; 0x3d
    8aa6:	8e ad       	ldd	r24, Y+62	; 0x3e
    8aa8:	9f ad       	ldd	r25, Y+63	; 0x3f
    8aaa:	a9 97       	sbiw	r28, 0x29	; 41
    8aac:	0f da       	rcall	.-3042   	; 0x7ecc <p_ftoa>
    8aae:	93 fa       	bst	r9, 3
    8ab0:	00 27       	eor	r16, r16
    8ab2:	00 f9       	bld	r16, 0
    8ab4:	10 e0       	ldi	r17, 0x00	; 0
    8ab6:	9c 01       	movw	r18, r24
    8ab8:	24 c0       	rjmp	.+72     	; 0x8b02 <_printf_fn+0x6cc>
    8aba:	c9 2c       	mov	r12, r9
    8abc:	d1 2c       	mov	r13, r1
    8abe:	a1 96       	adiw	r28, 0x21	; 33
    8ac0:	ee ac       	ldd	r14, Y+62	; 0x3e
    8ac2:	ff ac       	ldd	r15, Y+63	; 0x3f
    8ac4:	a1 97       	sbiw	r28, 0x21	; 33
    8ac6:	82 01       	movw	r16, r4
    8ac8:	22 e4       	ldi	r18, 0x42	; 66
    8aca:	30 e0       	ldi	r19, 0x00	; 0
    8acc:	ae 01       	movw	r20, r28
    8ace:	4f 5f       	subi	r20, 0xFF	; 255
    8ad0:	5f 4f       	sbci	r21, 0xFF	; 255
    8ad2:	a9 96       	adiw	r28, 0x29	; 41
    8ad4:	6c ad       	ldd	r22, Y+60	; 0x3c
    8ad6:	7d ad       	ldd	r23, Y+61	; 0x3d
    8ad8:	8e ad       	ldd	r24, Y+62	; 0x3e
    8ada:	9f ad       	ldd	r25, Y+63	; 0x3f
    8adc:	a9 97       	sbiw	r28, 0x29	; 41
    8ade:	fd da       	rcall	.-2566   	; 0x80da <p_etoa>
    8ae0:	7c 01       	movw	r14, r24
    8ae2:	a3 96       	adiw	r28, 0x23	; 35
    8ae4:	4e ad       	ldd	r20, Y+62	; 0x3e
    8ae6:	5f ad       	ldd	r21, Y+63	; 0x3f
    8ae8:	a3 97       	sbiw	r28, 0x23	; 35
    8aea:	45 34       	cpi	r20, 0x45	; 69
    8aec:	51 05       	cpc	r21, r1
    8aee:	21 f4       	brne	.+8      	; 0x8af8 <_printf_fn+0x6c2>
    8af0:	ce 01       	movw	r24, r28
    8af2:	01 96       	adiw	r24, 0x01	; 1
    8af4:	0e 94 c6 31 	call	0x638c	; 0x638c <strupper>
    8af8:	93 fa       	bst	r9, 3
    8afa:	00 27       	eor	r16, r16
    8afc:	00 f9       	bld	r16, 0
    8afe:	10 e0       	ldi	r17, 0x00	; 0
    8b00:	97 01       	movw	r18, r14
    8b02:	a2 01       	movw	r20, r4
    8b04:	be 01       	movw	r22, r28
    8b06:	6f 5f       	subi	r22, 0xFF	; 255
    8b08:	7f 4f       	sbci	r23, 0xFF	; 255
    8b0a:	a5 96       	adiw	r28, 0x25	; 37
    8b0c:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b0e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b10:	a5 97       	sbiw	r28, 0x25	; 37
    8b12:	4f dc       	rcall	.-1890   	; 0x83b2 <_puts_pad>
    8b14:	69 c0       	rjmp	.+210    	; 0x8be8 <_printf_fn+0x7b2>
    8b16:	a3 96       	adiw	r28, 0x23	; 35
    8b18:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b1a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b1c:	a3 97       	sbiw	r28, 0x23	; 35
    8b1e:	83 37       	cpi	r24, 0x73	; 115
    8b20:	91 05       	cpc	r25, r1
    8b22:	69 f4       	brne	.+26     	; 0x8b3e <_printf_fn+0x708>
    8b24:	71 01       	movw	r14, r2
    8b26:	92 e0       	ldi	r25, 0x02	; 2
    8b28:	e9 0e       	add	r14, r25
    8b2a:	f1 1c       	adc	r15, r1
    8b2c:	d1 01       	movw	r26, r2
    8b2e:	6d 91       	ld	r22, X+
    8b30:	7c 91       	ld	r23, X
    8b32:	61 15       	cp	r22, r1
    8b34:	71 05       	cpc	r23, r1
    8b36:	91 f4       	brne	.+36     	; 0x8b5c <_printf_fn+0x726>
    8b38:	69 e0       	ldi	r22, 0x09	; 9
    8b3a:	74 e0       	ldi	r23, 0x04	; 4
    8b3c:	0f c0       	rjmp	.+30     	; 0x8b5c <_printf_fn+0x726>
    8b3e:	71 01       	movw	r14, r2
    8b40:	b2 e0       	ldi	r27, 0x02	; 2
    8b42:	eb 0e       	add	r14, r27
    8b44:	f1 1c       	adc	r15, r1
    8b46:	f1 01       	movw	r30, r2
    8b48:	80 81       	ld	r24, Z
    8b4a:	60 96       	adiw	r28, 0x10	; 16
    8b4c:	8f af       	std	Y+63, r24	; 0x3f
    8b4e:	60 97       	sbiw	r28, 0x10	; 16
    8b50:	61 96       	adiw	r28, 0x11	; 17
    8b52:	1f ae       	std	Y+63, r1	; 0x3f
    8b54:	61 97       	sbiw	r28, 0x11	; 17
    8b56:	be 01       	movw	r22, r28
    8b58:	61 5b       	subi	r22, 0xB1	; 177
    8b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    8b5c:	fb 01       	movw	r30, r22
    8b5e:	01 90       	ld	r0, Z+
    8b60:	00 20       	and	r0, r0
    8b62:	e9 f7       	brne	.-6      	; 0x8b5e <_printf_fn+0x728>
    8b64:	31 97       	sbiw	r30, 0x01	; 1
    8b66:	e6 1b       	sub	r30, r22
    8b68:	f7 0b       	sbc	r31, r23
    8b6a:	a1 96       	adiw	r28, 0x21	; 33
    8b6c:	2e ad       	ldd	r18, Y+62	; 0x3e
    8b6e:	3f ad       	ldd	r19, Y+63	; 0x3f
    8b70:	a1 97       	sbiw	r28, 0x21	; 33
    8b72:	23 2b       	or	r18, r19
    8b74:	21 f4       	brne	.+8      	; 0x8b7e <_printf_fn+0x748>
    8b76:	a1 96       	adiw	r28, 0x21	; 33
    8b78:	ff af       	std	Y+63, r31	; 0x3f
    8b7a:	ee af       	std	Y+62, r30	; 0x3e
    8b7c:	a1 97       	sbiw	r28, 0x21	; 33
    8b7e:	a1 96       	adiw	r28, 0x21	; 33
    8b80:	4e ad       	ldd	r20, Y+62	; 0x3e
    8b82:	5f ad       	ldd	r21, Y+63	; 0x3f
    8b84:	a1 97       	sbiw	r28, 0x21	; 33
    8b86:	44 16       	cp	r4, r20
    8b88:	55 06       	cpc	r5, r21
    8b8a:	3c f4       	brge	.+14     	; 0x8b9a <_printf_fn+0x764>
    8b8c:	41 14       	cp	r4, r1
    8b8e:	51 04       	cpc	r5, r1
    8b90:	21 f0       	breq	.+8      	; 0x8b9a <_printf_fn+0x764>
    8b92:	a1 96       	adiw	r28, 0x21	; 33
    8b94:	5f ae       	std	Y+63, r5	; 0x3f
    8b96:	4e ae       	std	Y+62, r4	; 0x3e
    8b98:	a1 97       	sbiw	r28, 0x21	; 33
    8b9a:	93 fa       	bst	r9, 3
    8b9c:	00 27       	eor	r16, r16
    8b9e:	00 f9       	bld	r16, 0
    8ba0:	10 e0       	ldi	r17, 0x00	; 0
    8ba2:	a1 96       	adiw	r28, 0x21	; 33
    8ba4:	2e ad       	ldd	r18, Y+62	; 0x3e
    8ba6:	3f ad       	ldd	r19, Y+63	; 0x3f
    8ba8:	a1 97       	sbiw	r28, 0x21	; 33
    8baa:	a2 01       	movw	r20, r4
    8bac:	a5 96       	adiw	r28, 0x25	; 37
    8bae:	8e ad       	ldd	r24, Y+62	; 0x3e
    8bb0:	9f ad       	ldd	r25, Y+63	; 0x3f
    8bb2:	a5 97       	sbiw	r28, 0x25	; 37
    8bb4:	fe db       	rcall	.-2052   	; 0x83b2 <_puts_pad>
    8bb6:	17 01       	movw	r2, r14
    8bb8:	17 c0       	rjmp	.+46     	; 0x8be8 <_printf_fn+0x7b2>
    8bba:	f6 01       	movw	r30, r12
    8bbc:	5e 2d       	mov	r21, r14
    8bbe:	0e 94 06 e3 	call	0x1c60c	; 0x1c60c <__xload_1>
    8bc2:	66 23       	and	r22, r22
    8bc4:	89 f0       	breq	.+34     	; 0x8be8 <_printf_fn+0x7b2>
    8bc6:	5f ef       	ldi	r21, 0xFF	; 255
    8bc8:	c5 1a       	sub	r12, r21
    8bca:	d5 0a       	sbc	r13, r21
    8bcc:	e5 0a       	sbc	r14, r21
    8bce:	a5 96       	adiw	r28, 0x25	; 37
    8bd0:	ae ad       	ldd	r26, Y+62	; 0x3e
    8bd2:	bf ad       	ldd	r27, Y+63	; 0x3f
    8bd4:	a5 97       	sbiw	r28, 0x25	; 37
    8bd6:	ed 91       	ld	r30, X+
    8bd8:	fc 91       	ld	r31, X
    8bda:	11 97       	sbiw	r26, 0x01	; 1
    8bdc:	cd 01       	movw	r24, r26
    8bde:	09 95       	icall
    8be0:	6c 14       	cp	r6, r12
    8be2:	7d 04       	cpc	r7, r13
    8be4:	8e 04       	cpc	r8, r14
    8be6:	48 f7       	brcc	.-46     	; 0x8bba <_printf_fn+0x784>
    8be8:	e8 2c       	mov	r14, r8
    8bea:	63 01       	movw	r12, r6
    8bec:	53 cc       	rjmp	.-1882   	; 0x8494 <_printf_fn+0x5e>
    8bee:	e2 e0       	ldi	r30, 0x02	; 2
    8bf0:	f0 e0       	ldi	r31, 0x00	; 0
    8bf2:	6f 96       	adiw	r28, 0x1f	; 31
    8bf4:	ff af       	std	Y+63, r31	; 0x3f
    8bf6:	ee af       	std	Y+62, r30	; 0x3e
    8bf8:	6f 97       	sbiw	r28, 0x1f	; 31
    8bfa:	5f cd       	rjmp	.-1346   	; 0x86ba <_printf_fn+0x284>
    8bfc:	6f 96       	adiw	r28, 0x1f	; 31
    8bfe:	ee ad       	ldd	r30, Y+62	; 0x3e
    8c00:	ff ad       	ldd	r31, Y+63	; 0x3f
    8c02:	6f 97       	sbiw	r28, 0x1f	; 31
    8c04:	32 97       	sbiw	r30, 0x02	; 2
    8c06:	61 f4       	brne	.+24     	; 0x8c20 <_printf_fn+0x7ea>
    8c08:	51 01       	movw	r10, r2
    8c0a:	f2 e0       	ldi	r31, 0x02	; 2
    8c0c:	af 0e       	add	r10, r31
    8c0e:	b1 1c       	adc	r11, r1
    8c10:	d1 01       	movw	r26, r2
    8c12:	8d 91       	ld	r24, X+
    8c14:	9c 91       	ld	r25, X
    8c16:	65 96       	adiw	r28, 0x15	; 21
    8c18:	9f af       	std	Y+63, r25	; 0x3f
    8c1a:	8e af       	std	Y+62, r24	; 0x3e
    8c1c:	65 97       	sbiw	r28, 0x15	; 21
    8c1e:	cd cd       	rjmp	.-1126   	; 0x87ba <_printf_fn+0x384>
    8c20:	6f 96       	adiw	r28, 0x1f	; 31
    8c22:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c24:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c26:	6f 97       	sbiw	r28, 0x1f	; 31
    8c28:	24 30       	cpi	r18, 0x04	; 4
    8c2a:	31 05       	cpc	r19, r1
    8c2c:	09 f0       	breq	.+2      	; 0x8c30 <_printf_fn+0x7fa>
    8c2e:	06 ce       	rjmp	.-1012   	; 0x883c <_printf_fn+0x406>
    8c30:	51 01       	movw	r10, r2
    8c32:	f4 e0       	ldi	r31, 0x04	; 4
    8c34:	af 0e       	add	r10, r31
    8c36:	b1 1c       	adc	r11, r1
    8c38:	f1 01       	movw	r30, r2
    8c3a:	80 81       	ld	r24, Z
    8c3c:	91 81       	ldd	r25, Z+1	; 0x01
    8c3e:	a2 81       	ldd	r26, Z+2	; 0x02
    8c40:	b3 81       	ldd	r27, Z+3	; 0x03
    8c42:	2f 96       	adiw	r28, 0x0f	; 15
    8c44:	8c af       	std	Y+60, r24	; 0x3c
    8c46:	9d af       	std	Y+61, r25	; 0x3d
    8c48:	ae af       	std	Y+62, r26	; 0x3e
    8c4a:	bf af       	std	Y+63, r27	; 0x3f
    8c4c:	2f 97       	sbiw	r28, 0x0f	; 15
    8c4e:	e4 cd       	rjmp	.-1080   	; 0x8818 <_printf_fn+0x3e2>
    8c50:	c5 59       	subi	r28, 0x95	; 149
    8c52:	df 4f       	sbci	r29, 0xFF	; 255
    8c54:	e2 e1       	ldi	r30, 0x12	; 18
    8c56:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

00008c5a <vsnprintf_P>:
    8c5a:	a8 e0       	ldi	r26, 0x08	; 8
    8c5c:	b0 e0       	ldi	r27, 0x00	; 0
    8c5e:	e3 e3       	ldi	r30, 0x33	; 51
    8c60:	f6 e4       	ldi	r31, 0x46	; 70
    8c62:	0c 94 db e2 	jmp	0x1c5b6	; 0x1c5b6 <__prologue_saves__+0x18>
    8c66:	7c 01       	movw	r14, r24
    8c68:	cb 01       	movw	r24, r22
    8c6a:	64 2f       	mov	r22, r20
    8c6c:	a9 01       	movw	r20, r18
    8c6e:	98 01       	movw	r18, r16
    8c70:	f7 01       	movw	r30, r14
    8c72:	10 82       	st	Z, r1
    8c74:	e8 e4       	ldi	r30, 0x48	; 72
    8c76:	fe e3       	ldi	r31, 0x3E	; 62
    8c78:	fa 83       	std	Y+2, r31	; 0x02
    8c7a:	e9 83       	std	Y+1, r30	; 0x01
    8c7c:	9e 83       	std	Y+6, r25	; 0x06
    8c7e:	8d 83       	std	Y+5, r24	; 0x05
    8c80:	18 86       	std	Y+8, r1	; 0x08
    8c82:	1f 82       	std	Y+7, r1	; 0x07
    8c84:	fc 82       	std	Y+4, r15	; 0x04
    8c86:	eb 82       	std	Y+3, r14	; 0x03
    8c88:	ce 01       	movw	r24, r28
    8c8a:	01 96       	adiw	r24, 0x01	; 1
    8c8c:	d4 db       	rcall	.-2136   	; 0x8436 <_printf_fn>
    8c8e:	f7 01       	movw	r30, r14
    8c90:	01 90       	ld	r0, Z+
    8c92:	00 20       	and	r0, r0
    8c94:	e9 f7       	brne	.-6      	; 0x8c90 <vsnprintf_P+0x36>
    8c96:	cf 01       	movw	r24, r30
    8c98:	01 97       	sbiw	r24, 0x01	; 1
    8c9a:	8e 19       	sub	r24, r14
    8c9c:	9f 09       	sbc	r25, r15
    8c9e:	28 96       	adiw	r28, 0x08	; 8
    8ca0:	e6 e0       	ldi	r30, 0x06	; 6
    8ca2:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

00008ca6 <snprintf_P>:
    8ca6:	a0 e0       	ldi	r26, 0x00	; 0
    8ca8:	b0 e0       	ldi	r27, 0x00	; 0
    8caa:	e9 e5       	ldi	r30, 0x59	; 89
    8cac:	f6 e4       	ldi	r31, 0x46	; 70
    8cae:	0c 94 dd e2 	jmp	0x1c5ba	; 0x1c5ba <__prologue_saves__+0x1c>
    8cb2:	8e 01       	movw	r16, r28
    8cb4:	02 5f       	subi	r16, 0xF2	; 242
    8cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    8cb8:	2b 85       	ldd	r18, Y+11	; 0x0b
    8cba:	3c 85       	ldd	r19, Y+12	; 0x0c
    8cbc:	4d 85       	ldd	r20, Y+13	; 0x0d
    8cbe:	69 85       	ldd	r22, Y+9	; 0x09
    8cc0:	7a 85       	ldd	r23, Y+10	; 0x0a
    8cc2:	8f 81       	ldd	r24, Y+7	; 0x07
    8cc4:	98 85       	ldd	r25, Y+8	; 0x08
    8cc6:	c9 df       	rcall	.-110    	; 0x8c5a <vsnprintf_P>
    8cc8:	e4 e0       	ldi	r30, 0x04	; 4
    8cca:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

00008cce <sprintf_P>:
    8cce:	a0 e0       	ldi	r26, 0x00	; 0
    8cd0:	b0 e0       	ldi	r27, 0x00	; 0
    8cd2:	ed e6       	ldi	r30, 0x6D	; 109
    8cd4:	f6 e4       	ldi	r31, 0x46	; 70
    8cd6:	0c 94 dd e2 	jmp	0x1c5ba	; 0x1c5ba <__prologue_saves__+0x1c>
    8cda:	8e 01       	movw	r16, r28
    8cdc:	04 5f       	subi	r16, 0xF4	; 244
    8cde:	1f 4f       	sbci	r17, 0xFF	; 255
    8ce0:	29 85       	ldd	r18, Y+9	; 0x09
    8ce2:	3a 85       	ldd	r19, Y+10	; 0x0a
    8ce4:	4b 85       	ldd	r20, Y+11	; 0x0b
    8ce6:	60 e0       	ldi	r22, 0x00	; 0
    8ce8:	74 e0       	ldi	r23, 0x04	; 4
    8cea:	8f 81       	ldd	r24, Y+7	; 0x07
    8cec:	98 85       	ldd	r25, Y+8	; 0x08
    8cee:	b5 df       	rcall	.-150    	; 0x8c5a <vsnprintf_P>
    8cf0:	e4 e0       	ldi	r30, 0x04	; 4
    8cf2:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

00008cf6 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    8cf6:	a8 e0       	ldi	r26, 0x08	; 8
    8cf8:	b0 e0       	ldi	r27, 0x00	; 0
    8cfa:	e1 e8       	ldi	r30, 0x81	; 129
    8cfc:	f6 e4       	ldi	r31, 0x46	; 70
    8cfe:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
    8d02:	9e 01       	movw	r18, r28
    8d04:	23 5f       	subi	r18, 0xF3	; 243
    8d06:	3f 4f       	sbci	r19, 0xFF	; 255
    8d08:	f9 01       	movw	r30, r18
    8d0a:	41 91       	ld	r20, Z+
    8d0c:	51 91       	ld	r21, Z+
    8d0e:	61 91       	ld	r22, Z+
    8d10:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8d12:	81 e6       	ldi	r24, 0x61	; 97
    8d14:	9e e3       	ldi	r25, 0x3E	; 62
    8d16:	9a 83       	std	Y+2, r25	; 0x02
    8d18:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8d1a:	18 86       	std	Y+8, r1	; 0x08
    8d1c:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8d1e:	ce 01       	movw	r24, r28
    8d20:	01 96       	adiw	r24, 0x01	; 1
    8d22:	89 db       	rcall	.-2286   	; 0x8436 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8d24:	8f 81       	ldd	r24, Y+7	; 0x07
    8d26:	98 85       	ldd	r25, Y+8	; 0x08
    8d28:	28 96       	adiw	r28, 0x08	; 8
    8d2a:	e2 e0       	ldi	r30, 0x02	; 2
    8d2c:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00008d30 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8d30:	9c 01       	movw	r18, r24
    8d32:	20 53       	subi	r18, 0x30	; 48
    8d34:	31 09       	sbc	r19, r1
    8d36:	2a 30       	cpi	r18, 0x0A	; 10
    8d38:	31 05       	cpc	r19, r1
    8d3a:	10 f4       	brcc	.+4      	; 0x8d40 <atodigit+0x10>
    8d3c:	c9 01       	movw	r24, r18
    8d3e:	10 c0       	rjmp	.+32     	; 0x8d60 <atodigit+0x30>
    8d40:	9c 01       	movw	r18, r24
    8d42:	21 54       	subi	r18, 0x41	; 65
    8d44:	31 09       	sbc	r19, r1
    8d46:	26 30       	cpi	r18, 0x06	; 6
    8d48:	31 05       	cpc	r19, r1
    8d4a:	10 f4       	brcc	.+4      	; 0x8d50 <atodigit+0x20>
    8d4c:	c7 97       	sbiw	r24, 0x37	; 55
    8d4e:	08 c0       	rjmp	.+16     	; 0x8d60 <atodigit+0x30>
    8d50:	9c 01       	movw	r18, r24
    8d52:	21 56       	subi	r18, 0x61	; 97
    8d54:	31 09       	sbc	r19, r1
    8d56:	26 30       	cpi	r18, 0x06	; 6
    8d58:	31 05       	cpc	r19, r1
    8d5a:	28 f4       	brcc	.+10     	; 0x8d66 <atodigit+0x36>
    8d5c:	87 55       	subi	r24, 0x57	; 87
    8d5e:	91 09       	sbc	r25, r1
    8d60:	86 17       	cp	r24, r22
    8d62:	97 07       	cpc	r25, r23
    8d64:	14 f0       	brlt	.+4      	; 0x8d6a <atodigit+0x3a>
    8d66:	8f ef       	ldi	r24, 0xFF	; 255
    8d68:	9f ef       	ldi	r25, 0xFF	; 255
    8d6a:	08 95       	ret

00008d6c <strtol>:
    8d6c:	a0 e0       	ldi	r26, 0x00	; 0
    8d6e:	b0 e0       	ldi	r27, 0x00	; 0
    8d70:	ec eb       	ldi	r30, 0xBC	; 188
    8d72:	f6 e4       	ldi	r31, 0x46	; 70
    8d74:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
    8d78:	2b 01       	movw	r4, r22
    8d7a:	8a 01       	movw	r16, r20
    8d7c:	ec 01       	movw	r28, r24
    8d7e:	28 81       	ld	r18, Y
    8d80:	01 96       	adiw	r24, 0x01	; 1
    8d82:	20 32       	cpi	r18, 0x20	; 32
    8d84:	d9 f3       	breq	.-10     	; 0x8d7c <strtol+0x10>
    8d86:	29 30       	cpi	r18, 0x09	; 9
    8d88:	c9 f3       	breq	.-14     	; 0x8d7c <strtol+0x10>
    8d8a:	2d 32       	cpi	r18, 0x2D	; 45
    8d8c:	29 f4       	brne	.+10     	; 0x8d98 <strtol+0x2c>
    8d8e:	ec 01       	movw	r28, r24
    8d90:	66 24       	eor	r6, r6
    8d92:	63 94       	inc	r6
    8d94:	71 2c       	mov	r7, r1
    8d96:	05 c0       	rjmp	.+10     	; 0x8da2 <strtol+0x36>
    8d98:	2b 32       	cpi	r18, 0x2B	; 43
    8d9a:	09 f4       	brne	.+2      	; 0x8d9e <strtol+0x32>
    8d9c:	ec 01       	movw	r28, r24
    8d9e:	61 2c       	mov	r6, r1
    8da0:	71 2c       	mov	r7, r1
    8da2:	9e 01       	movw	r18, r28
    8da4:	2f 5f       	subi	r18, 0xFF	; 255
    8da6:	3f 4f       	sbci	r19, 0xFF	; 255
    8da8:	88 81       	ld	r24, Y
    8daa:	80 33       	cpi	r24, 0x30	; 48
    8dac:	11 f4       	brne	.+4      	; 0x8db2 <strtol+0x46>
    8dae:	e9 01       	movw	r28, r18
    8db0:	f8 cf       	rjmp	.-16     	; 0x8da2 <strtol+0x36>
    8db2:	c1 2c       	mov	r12, r1
    8db4:	d1 2c       	mov	r13, r1
    8db6:	76 01       	movw	r14, r12
    8db8:	48 01       	movw	r8, r16
    8dba:	01 2e       	mov	r0, r17
    8dbc:	00 0c       	add	r0, r0
    8dbe:	aa 08       	sbc	r10, r10
    8dc0:	bb 08       	sbc	r11, r11
    8dc2:	3c 2e       	mov	r3, r28
    8dc4:	2d 2e       	mov	r2, r29
    8dc6:	89 91       	ld	r24, Y+
    8dc8:	88 23       	and	r24, r24
    8dca:	31 f0       	breq	.+12     	; 0x8dd8 <strtol+0x6c>
    8dcc:	b8 01       	movw	r22, r16
    8dce:	90 e0       	ldi	r25, 0x00	; 0
    8dd0:	af df       	rcall	.-162    	; 0x8d30 <atodigit>
    8dd2:	fc 01       	movw	r30, r24
    8dd4:	97 ff       	sbrs	r25, 7
    8dd6:	0c c0       	rjmp	.+24     	; 0x8df0 <strtol+0x84>
    8dd8:	61 14       	cp	r6, r1
    8dda:	71 04       	cpc	r7, r1
    8ddc:	c1 f0       	breq	.+48     	; 0x8e0e <strtol+0xa2>
    8dde:	f0 94       	com	r15
    8de0:	e0 94       	com	r14
    8de2:	d0 94       	com	r13
    8de4:	c0 94       	com	r12
    8de6:	c1 1c       	adc	r12, r1
    8de8:	d1 1c       	adc	r13, r1
    8dea:	e1 1c       	adc	r14, r1
    8dec:	f1 1c       	adc	r15, r1
    8dee:	0f c0       	rjmp	.+30     	; 0x8e0e <strtol+0xa2>
    8df0:	a5 01       	movw	r20, r10
    8df2:	94 01       	movw	r18, r8
    8df4:	c7 01       	movw	r24, r14
    8df6:	b6 01       	movw	r22, r12
    8df8:	0e 94 20 e2 	call	0x1c440	; 0x1c440 <__mulsi3>
    8dfc:	6f 01       	movw	r12, r30
    8dfe:	ff 0f       	add	r31, r31
    8e00:	ee 08       	sbc	r14, r14
    8e02:	ff 08       	sbc	r15, r15
    8e04:	c6 0e       	add	r12, r22
    8e06:	d7 1e       	adc	r13, r23
    8e08:	e8 1e       	adc	r14, r24
    8e0a:	f9 1e       	adc	r15, r25
    8e0c:	da cf       	rjmp	.-76     	; 0x8dc2 <strtol+0x56>
    8e0e:	41 14       	cp	r4, r1
    8e10:	51 04       	cpc	r5, r1
    8e12:	19 f0       	breq	.+6      	; 0x8e1a <strtol+0xae>
    8e14:	f2 01       	movw	r30, r4
    8e16:	30 82       	st	Z, r3
    8e18:	21 82       	std	Z+1, r2	; 0x01
    8e1a:	c7 01       	movw	r24, r14
    8e1c:	b6 01       	movw	r22, r12
    8e1e:	cd b7       	in	r28, 0x3d	; 61
    8e20:	de b7       	in	r29, 0x3e	; 62
    8e22:	e2 e1       	ldi	r30, 0x12	; 18
    8e24:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

00008e28 <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8e28:	4a e0       	ldi	r20, 0x0A	; 10
    8e2a:	50 e0       	ldi	r21, 0x00	; 0
    8e2c:	60 e0       	ldi	r22, 0x00	; 0
    8e2e:	70 e0       	ldi	r23, 0x00	; 0
    8e30:	9d df       	rcall	.-198    	; 0x8d6c <strtol>
    return((int)num);
}
    8e32:	cb 01       	movw	r24, r22
    8e34:	08 95       	ret

00008e36 <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8e36:	4a e0       	ldi	r20, 0x0A	; 10
    8e38:	50 e0       	ldi	r21, 0x00	; 0
    8e3a:	60 e0       	ldi	r22, 0x00	; 0
    8e3c:	70 e0       	ldi	r23, 0x00	; 0
    8e3e:	96 cf       	rjmp	.-212    	; 0x8d6c <strtol>
    return(num);
}
    8e40:	08 95       	ret

00008e42 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8e42:	fc 01       	movw	r30, r24
    8e44:	62 81       	ldd	r22, Z+2	; 0x02
    8e46:	73 81       	ldd	r23, Z+3	; 0x03
    8e48:	cb 01       	movw	r24, r22
    8e4a:	a0 e0       	ldi	r26, 0x00	; 0
    8e4c:	b0 e0       	ldi	r27, 0x00	; 0
    8e4e:	ba 2f       	mov	r27, r26
    8e50:	a9 2f       	mov	r26, r25
    8e52:	98 2f       	mov	r25, r24
    8e54:	88 27       	eor	r24, r24
    8e56:	21 81       	ldd	r18, Z+1	; 0x01
    8e58:	82 2b       	or	r24, r18
    8e5a:	ba 2f       	mov	r27, r26
    8e5c:	a9 2f       	mov	r26, r25
    8e5e:	98 2f       	mov	r25, r24
    8e60:	88 27       	eor	r24, r24
    8e62:	20 81       	ld	r18, Z
    8e64:	bc 01       	movw	r22, r24
    8e66:	cd 01       	movw	r24, r26
    8e68:	62 2b       	or	r22, r18
    8e6a:	08 95       	ret

00008e6c <st_dword>:
    8e6c:	fc 01       	movw	r30, r24
    8e6e:	40 83       	st	Z, r20
    8e70:	51 83       	std	Z+1, r21	; 0x01
    8e72:	62 83       	std	Z+2, r22	; 0x02
    8e74:	73 83       	std	Z+3, r23	; 0x03
    8e76:	08 95       	ret

00008e78 <mem_set>:
    8e78:	48 0f       	add	r20, r24
    8e7a:	59 1f       	adc	r21, r25
    8e7c:	fc 01       	movw	r30, r24
    8e7e:	61 93       	st	Z+, r22
    8e80:	cf 01       	movw	r24, r30
    8e82:	e4 17       	cp	r30, r20
    8e84:	f5 07       	cpc	r31, r21
    8e86:	d1 f7       	brne	.-12     	; 0x8e7c <mem_set+0x4>
    8e88:	08 95       	ret

00008e8a <mem_cmp>:
    8e8a:	dc 01       	movw	r26, r24
    8e8c:	fb 01       	movw	r30, r22
    8e8e:	2d 91       	ld	r18, X+
    8e90:	81 91       	ld	r24, Z+
    8e92:	30 e0       	ldi	r19, 0x00	; 0
    8e94:	b9 01       	movw	r22, r18
    8e96:	68 1b       	sub	r22, r24
    8e98:	71 09       	sbc	r23, r1
    8e9a:	cb 01       	movw	r24, r22
    8e9c:	41 50       	subi	r20, 0x01	; 1
    8e9e:	51 09       	sbc	r21, r1
    8ea0:	11 f0       	breq	.+4      	; 0x8ea6 <mem_cmp+0x1c>
    8ea2:	00 97       	sbiw	r24, 0x00	; 0
    8ea4:	a1 f3       	breq	.-24     	; 0x8e8e <mem_cmp+0x4>
    8ea6:	08 95       	ret

00008ea8 <tchar2uni>:
    8ea8:	0f 93       	push	r16
    8eaa:	1f 93       	push	r17
    8eac:	fc 01       	movw	r30, r24
    8eae:	a0 81       	ld	r26, Z
    8eb0:	b1 81       	ldd	r27, Z+1	; 0x01
    8eb2:	fd 01       	movw	r30, r26
    8eb4:	31 96       	adiw	r30, 0x01	; 1
    8eb6:	4c 91       	ld	r20, X
    8eb8:	47 fd       	sbrc	r20, 7
    8eba:	04 c0       	rjmp	.+8      	; 0x8ec4 <tchar2uni+0x1c>
    8ebc:	50 e0       	ldi	r21, 0x00	; 0
    8ebe:	60 e0       	ldi	r22, 0x00	; 0
    8ec0:	70 e0       	ldi	r23, 0x00	; 0
    8ec2:	68 c0       	rjmp	.+208    	; 0x8f94 <tchar2uni+0xec>
    8ec4:	24 2f       	mov	r18, r20
    8ec6:	20 7e       	andi	r18, 0xE0	; 224
    8ec8:	20 3c       	cpi	r18, 0xC0	; 192
    8eca:	39 f4       	brne	.+14     	; 0x8eda <tchar2uni+0x32>
    8ecc:	4f 71       	andi	r20, 0x1F	; 31
    8ece:	50 e0       	ldi	r21, 0x00	; 0
    8ed0:	60 e0       	ldi	r22, 0x00	; 0
    8ed2:	70 e0       	ldi	r23, 0x00	; 0
    8ed4:	21 e0       	ldi	r18, 0x01	; 1
    8ed6:	30 e0       	ldi	r19, 0x00	; 0
    8ed8:	16 c0       	rjmp	.+44     	; 0x8f06 <tchar2uni+0x5e>
    8eda:	24 2f       	mov	r18, r20
    8edc:	20 7f       	andi	r18, 0xF0	; 240
    8ede:	20 3e       	cpi	r18, 0xE0	; 224
    8ee0:	39 f4       	brne	.+14     	; 0x8ef0 <tchar2uni+0x48>
    8ee2:	4f 70       	andi	r20, 0x0F	; 15
    8ee4:	50 e0       	ldi	r21, 0x00	; 0
    8ee6:	60 e0       	ldi	r22, 0x00	; 0
    8ee8:	70 e0       	ldi	r23, 0x00	; 0
    8eea:	22 e0       	ldi	r18, 0x02	; 2
    8eec:	30 e0       	ldi	r19, 0x00	; 0
    8eee:	0b c0       	rjmp	.+22     	; 0x8f06 <tchar2uni+0x5e>
    8ef0:	24 2f       	mov	r18, r20
    8ef2:	28 7f       	andi	r18, 0xF8	; 248
    8ef4:	20 3f       	cpi	r18, 0xF0	; 240
    8ef6:	09 f0       	breq	.+2      	; 0x8efa <tchar2uni+0x52>
    8ef8:	54 c0       	rjmp	.+168    	; 0x8fa2 <tchar2uni+0xfa>
    8efa:	47 70       	andi	r20, 0x07	; 7
    8efc:	50 e0       	ldi	r21, 0x00	; 0
    8efe:	60 e0       	ldi	r22, 0x00	; 0
    8f00:	70 e0       	ldi	r23, 0x00	; 0
    8f02:	23 e0       	ldi	r18, 0x03	; 3
    8f04:	30 e0       	ldi	r19, 0x00	; 0
    8f06:	31 96       	adiw	r30, 0x01	; 1
    8f08:	df 01       	movw	r26, r30
    8f0a:	11 97       	sbiw	r26, 0x01	; 1
    8f0c:	ac 91       	ld	r26, X
    8f0e:	ba 2f       	mov	r27, r26
    8f10:	b0 7c       	andi	r27, 0xC0	; 192
    8f12:	b0 38       	cpi	r27, 0x80	; 128
    8f14:	09 f0       	breq	.+2      	; 0x8f18 <tchar2uni+0x70>
    8f16:	45 c0       	rjmp	.+138    	; 0x8fa2 <tchar2uni+0xfa>
    8f18:	b6 e0       	ldi	r27, 0x06	; 6
    8f1a:	44 0f       	add	r20, r20
    8f1c:	55 1f       	adc	r21, r21
    8f1e:	66 1f       	adc	r22, r22
    8f20:	77 1f       	adc	r23, r23
    8f22:	ba 95       	dec	r27
    8f24:	d1 f7       	brne	.-12     	; 0x8f1a <tchar2uni+0x72>
    8f26:	af 73       	andi	r26, 0x3F	; 63
    8f28:	4a 2b       	or	r20, r26
    8f2a:	21 50       	subi	r18, 0x01	; 1
    8f2c:	31 09       	sbc	r19, r1
    8f2e:	59 f7       	brne	.-42     	; 0x8f06 <tchar2uni+0x5e>
    8f30:	8a 01       	movw	r16, r20
    8f32:	9b 01       	movw	r18, r22
    8f34:	00 58       	subi	r16, 0x80	; 128
    8f36:	11 09       	sbc	r17, r1
    8f38:	21 09       	sbc	r18, r1
    8f3a:	31 09       	sbc	r19, r1
    8f3c:	00 38       	cpi	r16, 0x80	; 128
    8f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    8f40:	20 41       	sbci	r18, 0x10	; 16
    8f42:	31 05       	cpc	r19, r1
    8f44:	70 f5       	brcc	.+92     	; 0x8fa2 <tchar2uni+0xfa>
    8f46:	8a 01       	movw	r16, r20
    8f48:	9b 01       	movw	r18, r22
    8f4a:	18 5d       	subi	r17, 0xD8	; 216
    8f4c:	21 09       	sbc	r18, r1
    8f4e:	31 09       	sbc	r19, r1
    8f50:	01 15       	cp	r16, r1
    8f52:	18 40       	sbci	r17, 0x08	; 8
    8f54:	21 05       	cpc	r18, r1
    8f56:	31 05       	cpc	r19, r1
    8f58:	20 f1       	brcs	.+72     	; 0x8fa2 <tchar2uni+0xfa>
    8f5a:	41 15       	cp	r20, r1
    8f5c:	51 05       	cpc	r21, r1
    8f5e:	21 e0       	ldi	r18, 0x01	; 1
    8f60:	62 07       	cpc	r22, r18
    8f62:	71 05       	cpc	r23, r1
    8f64:	b8 f0       	brcs	.+46     	; 0x8f94 <tchar2uni+0xec>
    8f66:	8a 01       	movw	r16, r20
    8f68:	9b 01       	movw	r18, r22
    8f6a:	21 50       	subi	r18, 0x01	; 1
    8f6c:	31 09       	sbc	r19, r1
    8f6e:	a6 e0       	ldi	r26, 0x06	; 6
    8f70:	00 0f       	add	r16, r16
    8f72:	11 1f       	adc	r17, r17
    8f74:	22 1f       	adc	r18, r18
    8f76:	33 1f       	adc	r19, r19
    8f78:	aa 95       	dec	r26
    8f7a:	d1 f7       	brne	.-12     	; 0x8f70 <tchar2uni+0xc8>
    8f7c:	00 27       	eor	r16, r16
    8f7e:	11 27       	eor	r17, r17
    8f80:	33 70       	andi	r19, 0x03	; 3
    8f82:	53 70       	andi	r21, 0x03	; 3
    8f84:	66 27       	eor	r22, r22
    8f86:	77 27       	eor	r23, r23
    8f88:	5c 6d       	ori	r21, 0xDC	; 220
    8f8a:	78 6d       	ori	r23, 0xD8	; 216
    8f8c:	40 2b       	or	r20, r16
    8f8e:	51 2b       	or	r21, r17
    8f90:	62 2b       	or	r22, r18
    8f92:	73 2b       	or	r23, r19
    8f94:	dc 01       	movw	r26, r24
    8f96:	ed 93       	st	X+, r30
    8f98:	fc 93       	st	X, r31
    8f9a:	34 2f       	mov	r19, r20
    8f9c:	25 2f       	mov	r18, r21
    8f9e:	cb 01       	movw	r24, r22
    8fa0:	04 c0       	rjmp	.+8      	; 0x8faa <tchar2uni+0x102>
    8fa2:	3f ef       	ldi	r19, 0xFF	; 255
    8fa4:	2f ef       	ldi	r18, 0xFF	; 255
    8fa6:	8f ef       	ldi	r24, 0xFF	; 255
    8fa8:	9f ef       	ldi	r25, 0xFF	; 255
    8faa:	63 2f       	mov	r22, r19
    8fac:	72 2f       	mov	r23, r18
    8fae:	1f 91       	pop	r17
    8fb0:	0f 91       	pop	r16
    8fb2:	08 95       	ret

00008fb4 <clst2sect>:
    8fb4:	0f 93       	push	r16
    8fb6:	1f 93       	push	r17
    8fb8:	fc 01       	movw	r30, r24
    8fba:	9a 01       	movw	r18, r20
    8fbc:	ab 01       	movw	r20, r22
    8fbe:	22 50       	subi	r18, 0x02	; 2
    8fc0:	31 09       	sbc	r19, r1
    8fc2:	41 09       	sbc	r20, r1
    8fc4:	51 09       	sbc	r21, r1
    8fc6:	81 8d       	ldd	r24, Z+25	; 0x19
    8fc8:	92 8d       	ldd	r25, Z+26	; 0x1a
    8fca:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8fcc:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8fce:	02 97       	sbiw	r24, 0x02	; 2
    8fd0:	a1 09       	sbc	r26, r1
    8fd2:	b1 09       	sbc	r27, r1
    8fd4:	28 17       	cp	r18, r24
    8fd6:	39 07       	cpc	r19, r25
    8fd8:	4a 07       	cpc	r20, r26
    8fda:	5b 07       	cpc	r21, r27
    8fdc:	68 f4       	brcc	.+26     	; 0x8ff8 <clst2sect+0x44>
    8fde:	a1 85       	ldd	r26, Z+9	; 0x09
    8fe0:	b2 85       	ldd	r27, Z+10	; 0x0a
    8fe2:	0e 94 af e2 	call	0x1c55e	; 0x1c55e <__muluhisi3>
    8fe6:	05 a5       	ldd	r16, Z+45	; 0x2d
    8fe8:	16 a5       	ldd	r17, Z+46	; 0x2e
    8fea:	27 a5       	ldd	r18, Z+47	; 0x2f
    8fec:	30 a9       	ldd	r19, Z+48	; 0x30
    8fee:	60 0f       	add	r22, r16
    8ff0:	71 1f       	adc	r23, r17
    8ff2:	82 1f       	adc	r24, r18
    8ff4:	93 1f       	adc	r25, r19
    8ff6:	03 c0       	rjmp	.+6      	; 0x8ffe <clst2sect+0x4a>
    8ff8:	60 e0       	ldi	r22, 0x00	; 0
    8ffa:	70 e0       	ldi	r23, 0x00	; 0
    8ffc:	cb 01       	movw	r24, r22
    8ffe:	1f 91       	pop	r17
    9000:	0f 91       	pop	r16
    9002:	08 95       	ret

00009004 <clmt_clust>:
    9004:	cf 93       	push	r28
    9006:	df 93       	push	r29
    9008:	fc 01       	movw	r30, r24
    900a:	c2 a1       	ldd	r28, Z+34	; 0x22
    900c:	d3 a1       	ldd	r29, Z+35	; 0x23
    900e:	24 96       	adiw	r28, 0x04	; 4
    9010:	cb 01       	movw	r24, r22
    9012:	ba 01       	movw	r22, r20
    9014:	29 e0       	ldi	r18, 0x09	; 9
    9016:	96 95       	lsr	r25
    9018:	87 95       	ror	r24
    901a:	77 95       	ror	r23
    901c:	67 95       	ror	r22
    901e:	2a 95       	dec	r18
    9020:	d1 f7       	brne	.-12     	; 0x9016 <clmt_clust+0x12>
    9022:	01 90       	ld	r0, Z+
    9024:	f0 81       	ld	r31, Z
    9026:	e0 2d       	mov	r30, r0
    9028:	21 85       	ldd	r18, Z+9	; 0x09
    902a:	32 85       	ldd	r19, Z+10	; 0x0a
    902c:	40 e0       	ldi	r20, 0x00	; 0
    902e:	50 e0       	ldi	r21, 0x00	; 0
    9030:	0e 94 62 e2 	call	0x1c4c4	; 0x1c4c4 <__udivmodsi4>
    9034:	88 81       	ld	r24, Y
    9036:	99 81       	ldd	r25, Y+1	; 0x01
    9038:	aa 81       	ldd	r26, Y+2	; 0x02
    903a:	bb 81       	ldd	r27, Y+3	; 0x03
    903c:	00 97       	sbiw	r24, 0x00	; 0
    903e:	a1 05       	cpc	r26, r1
    9040:	b1 05       	cpc	r27, r1
    9042:	b1 f0       	breq	.+44     	; 0x9070 <clmt_clust+0x6c>
    9044:	28 17       	cp	r18, r24
    9046:	39 07       	cpc	r19, r25
    9048:	4a 07       	cpc	r20, r26
    904a:	5b 07       	cpc	r21, r27
    904c:	30 f0       	brcs	.+12     	; 0x905a <clmt_clust+0x56>
    904e:	28 1b       	sub	r18, r24
    9050:	39 0b       	sbc	r19, r25
    9052:	4a 0b       	sbc	r20, r26
    9054:	5b 0b       	sbc	r21, r27
    9056:	28 96       	adiw	r28, 0x08	; 8
    9058:	ed cf       	rjmp	.-38     	; 0x9034 <clmt_clust+0x30>
    905a:	8c 81       	ldd	r24, Y+4	; 0x04
    905c:	9d 81       	ldd	r25, Y+5	; 0x05
    905e:	ae 81       	ldd	r26, Y+6	; 0x06
    9060:	bf 81       	ldd	r27, Y+7	; 0x07
    9062:	bc 01       	movw	r22, r24
    9064:	cd 01       	movw	r24, r26
    9066:	62 0f       	add	r22, r18
    9068:	73 1f       	adc	r23, r19
    906a:	84 1f       	adc	r24, r20
    906c:	95 1f       	adc	r25, r21
    906e:	03 c0       	rjmp	.+6      	; 0x9076 <clmt_clust+0x72>
    9070:	60 e0       	ldi	r22, 0x00	; 0
    9072:	70 e0       	ldi	r23, 0x00	; 0
    9074:	cb 01       	movw	r24, r22
    9076:	df 91       	pop	r29
    9078:	cf 91       	pop	r28
    907a:	08 95       	ret

0000907c <sum_sfn>:
    907c:	fc 01       	movw	r30, r24
    907e:	9c 01       	movw	r18, r24
    9080:	25 5f       	subi	r18, 0xF5	; 245
    9082:	3f 4f       	sbci	r19, 0xFF	; 255
    9084:	80 e0       	ldi	r24, 0x00	; 0
    9086:	98 2f       	mov	r25, r24
    9088:	90 fb       	bst	r25, 0
    908a:	97 95       	ror	r25
    908c:	97 f9       	bld	r25, 7
    908e:	81 91       	ld	r24, Z+
    9090:	89 0f       	add	r24, r25
    9092:	e2 17       	cp	r30, r18
    9094:	f3 07       	cpc	r31, r19
    9096:	b9 f7       	brne	.-18     	; 0x9086 <sum_sfn+0xa>
    9098:	08 95       	ret

0000909a <get_ldnumber>:
    909a:	cf 93       	push	r28
    909c:	df 93       	push	r29
    909e:	dc 01       	movw	r26, r24
    90a0:	ed 91       	ld	r30, X+
    90a2:	fc 91       	ld	r31, X
    90a4:	11 97       	sbiw	r26, 0x01	; 1
    90a6:	30 97       	sbiw	r30, 0x00	; 0
    90a8:	f9 f0       	breq	.+62     	; 0x90e8 <get_ldnumber+0x4e>
    90aa:	9f 01       	movw	r18, r30
    90ac:	2f 5f       	subi	r18, 0xFF	; 255
    90ae:	3f 4f       	sbci	r19, 0xFF	; 255
    90b0:	e9 01       	movw	r28, r18
    90b2:	21 97       	sbiw	r28, 0x01	; 1
    90b4:	88 81       	ld	r24, Y
    90b6:	80 32       	cpi	r24, 0x20	; 32
    90b8:	18 f0       	brcs	.+6      	; 0x90c0 <get_ldnumber+0x26>
    90ba:	8a 33       	cpi	r24, 0x3A	; 58
    90bc:	b9 f7       	brne	.-18     	; 0x90ac <get_ldnumber+0x12>
    90be:	04 c0       	rjmp	.+8      	; 0x90c8 <get_ldnumber+0x2e>
    90c0:	80 91 1d 18 	lds	r24, 0x181D	; 0x80181d <CurrVol>
    90c4:	90 e0       	ldi	r25, 0x00	; 0
    90c6:	12 c0       	rjmp	.+36     	; 0x90ec <get_ldnumber+0x52>
    90c8:	90 81       	ld	r25, Z
    90ca:	80 ed       	ldi	r24, 0xD0	; 208
    90cc:	89 0f       	add	r24, r25
    90ce:	8a 30       	cpi	r24, 0x0A	; 10
    90d0:	58 f4       	brcc	.+22     	; 0x90e8 <get_ldnumber+0x4e>
    90d2:	32 96       	adiw	r30, 0x02	; 2
    90d4:	2e 17       	cp	r18, r30
    90d6:	3f 07       	cpc	r19, r31
    90d8:	39 f4       	brne	.+14     	; 0x90e8 <get_ldnumber+0x4e>
    90da:	90 33       	cpi	r25, 0x30	; 48
    90dc:	29 f4       	brne	.+10     	; 0x90e8 <get_ldnumber+0x4e>
    90de:	2d 93       	st	X+, r18
    90e0:	3c 93       	st	X, r19
    90e2:	80 e0       	ldi	r24, 0x00	; 0
    90e4:	90 e0       	ldi	r25, 0x00	; 0
    90e6:	02 c0       	rjmp	.+4      	; 0x90ec <get_ldnumber+0x52>
    90e8:	8f ef       	ldi	r24, 0xFF	; 255
    90ea:	9f ef       	ldi	r25, 0xFF	; 255
    90ec:	df 91       	pop	r29
    90ee:	cf 91       	pop	r28
    90f0:	08 95       	ret

000090f2 <validate>:
    90f2:	0f 93       	push	r16
    90f4:	1f 93       	push	r17
    90f6:	cf 93       	push	r28
    90f8:	df 93       	push	r29
    90fa:	ec 01       	movw	r28, r24
    90fc:	8b 01       	movw	r16, r22
    90fe:	89 2b       	or	r24, r25
    9100:	f9 f0       	breq	.+62     	; 0x9140 <validate+0x4e>
    9102:	e8 81       	ld	r30, Y
    9104:	f9 81       	ldd	r31, Y+1	; 0x01
    9106:	30 97       	sbiw	r30, 0x00	; 0
    9108:	d9 f0       	breq	.+54     	; 0x9140 <validate+0x4e>
    910a:	80 81       	ld	r24, Z
    910c:	88 23       	and	r24, r24
    910e:	c1 f0       	breq	.+48     	; 0x9140 <validate+0x4e>
    9110:	2a 81       	ldd	r18, Y+2	; 0x02
    9112:	3b 81       	ldd	r19, Y+3	; 0x03
    9114:	85 81       	ldd	r24, Z+5	; 0x05
    9116:	96 81       	ldd	r25, Z+6	; 0x06
    9118:	28 17       	cp	r18, r24
    911a:	39 07       	cpc	r19, r25
    911c:	89 f4       	brne	.+34     	; 0x9140 <validate+0x4e>
    911e:	81 81       	ldd	r24, Z+1	; 0x01
    9120:	0e 94 39 6a 	call	0xd472	; 0xd472 <disk_status>
    9124:	80 fd       	sbrc	r24, 0
    9126:	0c c0       	rjmp	.+24     	; 0x9140 <validate+0x4e>
    9128:	28 81       	ld	r18, Y
    912a:	39 81       	ldd	r19, Y+1	; 0x01
    912c:	80 e0       	ldi	r24, 0x00	; 0
    912e:	90 e0       	ldi	r25, 0x00	; 0
    9130:	f8 01       	movw	r30, r16
    9132:	31 83       	std	Z+1, r19	; 0x01
    9134:	20 83       	st	Z, r18
    9136:	df 91       	pop	r29
    9138:	cf 91       	pop	r28
    913a:	1f 91       	pop	r17
    913c:	0f 91       	pop	r16
    913e:	08 95       	ret
    9140:	89 e0       	ldi	r24, 0x09	; 9
    9142:	90 e0       	ldi	r25, 0x00	; 0
    9144:	20 e0       	ldi	r18, 0x00	; 0
    9146:	30 e0       	ldi	r19, 0x00	; 0
    9148:	f3 cf       	rjmp	.-26     	; 0x9130 <validate+0x3e>

0000914a <mem_cpy.part.0>:
    914a:	fb 01       	movw	r30, r22
    914c:	48 0f       	add	r20, r24
    914e:	59 1f       	adc	r21, r25
    9150:	21 91       	ld	r18, Z+
    9152:	dc 01       	movw	r26, r24
    9154:	2d 93       	st	X+, r18
    9156:	cd 01       	movw	r24, r26
    9158:	a4 17       	cp	r26, r20
    915a:	b5 07       	cpc	r27, r21
    915c:	c9 f7       	brne	.-14     	; 0x9150 <mem_cpy.part.0+0x6>
    915e:	08 95       	ret

00009160 <put_utf>:
    9160:	0f 93       	push	r16
    9162:	1f 93       	push	r17
    9164:	fa 01       	movw	r30, r20
    9166:	60 38       	cpi	r22, 0x80	; 128
    9168:	71 05       	cpc	r23, r1
    916a:	81 05       	cpc	r24, r1
    916c:	91 05       	cpc	r25, r1
    916e:	30 f4       	brcc	.+12     	; 0x917c <put_utf+0x1c>
    9170:	23 2b       	or	r18, r19
    9172:	09 f4       	brne	.+2      	; 0x9176 <put_utf+0x16>
    9174:	9e c0       	rjmp	.+316    	; 0x92b2 <put_utf+0x152>
    9176:	60 83       	st	Z, r22
    9178:	81 e0       	ldi	r24, 0x01	; 1
    917a:	9c c0       	rjmp	.+312    	; 0x92b4 <put_utf+0x154>
    917c:	61 15       	cp	r22, r1
    917e:	48 e0       	ldi	r20, 0x08	; 8
    9180:	74 07       	cpc	r23, r20
    9182:	81 05       	cpc	r24, r1
    9184:	91 05       	cpc	r25, r1
    9186:	a0 f4       	brcc	.+40     	; 0x91b0 <put_utf+0x50>
    9188:	22 30       	cpi	r18, 0x02	; 2
    918a:	31 05       	cpc	r19, r1
    918c:	08 f4       	brcc	.+2      	; 0x9190 <put_utf+0x30>
    918e:	91 c0       	rjmp	.+290    	; 0x92b2 <put_utf+0x152>
    9190:	8b 01       	movw	r16, r22
    9192:	9c 01       	movw	r18, r24
    9194:	76 e0       	ldi	r23, 0x06	; 6
    9196:	36 95       	lsr	r19
    9198:	27 95       	ror	r18
    919a:	17 95       	ror	r17
    919c:	07 95       	ror	r16
    919e:	7a 95       	dec	r23
    91a0:	d1 f7       	brne	.-12     	; 0x9196 <put_utf+0x36>
    91a2:	00 6c       	ori	r16, 0xC0	; 192
    91a4:	00 83       	st	Z, r16
    91a6:	6f 73       	andi	r22, 0x3F	; 63
    91a8:	60 68       	ori	r22, 0x80	; 128
    91aa:	61 83       	std	Z+1, r22	; 0x01
    91ac:	82 e0       	ldi	r24, 0x02	; 2
    91ae:	82 c0       	rjmp	.+260    	; 0x92b4 <put_utf+0x154>
    91b0:	61 15       	cp	r22, r1
    91b2:	71 05       	cpc	r23, r1
    91b4:	41 e0       	ldi	r20, 0x01	; 1
    91b6:	84 07       	cpc	r24, r20
    91b8:	91 05       	cpc	r25, r1
    91ba:	58 f5       	brcc	.+86     	; 0x9212 <put_utf+0xb2>
    91bc:	23 30       	cpi	r18, 0x03	; 3
    91be:	31 05       	cpc	r19, r1
    91c0:	08 f4       	brcc	.+2      	; 0x91c4 <put_utf+0x64>
    91c2:	77 c0       	rjmp	.+238    	; 0x92b2 <put_utf+0x152>
    91c4:	8b 01       	movw	r16, r22
    91c6:	9c 01       	movw	r18, r24
    91c8:	18 5d       	subi	r17, 0xD8	; 216
    91ca:	21 09       	sbc	r18, r1
    91cc:	31 09       	sbc	r19, r1
    91ce:	01 15       	cp	r16, r1
    91d0:	18 40       	sbci	r17, 0x08	; 8
    91d2:	21 05       	cpc	r18, r1
    91d4:	31 05       	cpc	r19, r1
    91d6:	08 f4       	brcc	.+2      	; 0x91da <put_utf+0x7a>
    91d8:	6c c0       	rjmp	.+216    	; 0x92b2 <put_utf+0x152>
    91da:	8b 01       	movw	r16, r22
    91dc:	9c 01       	movw	r18, r24
    91de:	4c e0       	ldi	r20, 0x0C	; 12
    91e0:	36 95       	lsr	r19
    91e2:	27 95       	ror	r18
    91e4:	17 95       	ror	r17
    91e6:	07 95       	ror	r16
    91e8:	4a 95       	dec	r20
    91ea:	d1 f7       	brne	.-12     	; 0x91e0 <put_utf+0x80>
    91ec:	00 6e       	ori	r16, 0xE0	; 224
    91ee:	00 83       	st	Z, r16
    91f0:	8b 01       	movw	r16, r22
    91f2:	9c 01       	movw	r18, r24
    91f4:	56 e0       	ldi	r21, 0x06	; 6
    91f6:	36 95       	lsr	r19
    91f8:	27 95       	ror	r18
    91fa:	17 95       	ror	r17
    91fc:	07 95       	ror	r16
    91fe:	5a 95       	dec	r21
    9200:	d1 f7       	brne	.-12     	; 0x91f6 <put_utf+0x96>
    9202:	0f 73       	andi	r16, 0x3F	; 63
    9204:	00 68       	ori	r16, 0x80	; 128
    9206:	01 83       	std	Z+1, r16	; 0x01
    9208:	6f 73       	andi	r22, 0x3F	; 63
    920a:	60 68       	ori	r22, 0x80	; 128
    920c:	62 83       	std	Z+2, r22	; 0x02
    920e:	83 e0       	ldi	r24, 0x03	; 3
    9210:	51 c0       	rjmp	.+162    	; 0x92b4 <put_utf+0x154>
    9212:	24 30       	cpi	r18, 0x04	; 4
    9214:	31 05       	cpc	r19, r1
    9216:	08 f4       	brcc	.+2      	; 0x921a <put_utf+0xba>
    9218:	4c c0       	rjmp	.+152    	; 0x92b2 <put_utf+0x152>
    921a:	8b 01       	movw	r16, r22
    921c:	9c 01       	movw	r18, r24
    921e:	00 27       	eor	r16, r16
    9220:	11 27       	eor	r17, r17
    9222:	38 5d       	subi	r19, 0xD8	; 216
    9224:	b6 e0       	ldi	r27, 0x06	; 6
    9226:	36 95       	lsr	r19
    9228:	27 95       	ror	r18
    922a:	17 95       	ror	r17
    922c:	07 95       	ror	r16
    922e:	ba 95       	dec	r27
    9230:	d1 f7       	brne	.-12     	; 0x9226 <put_utf+0xc6>
    9232:	01 15       	cp	r16, r1
    9234:	11 05       	cpc	r17, r1
    9236:	40 e1       	ldi	r20, 0x10	; 16
    9238:	24 07       	cpc	r18, r20
    923a:	31 05       	cpc	r19, r1
    923c:	d0 f5       	brcc	.+116    	; 0x92b2 <put_utf+0x152>
    923e:	dc 01       	movw	r26, r24
    9240:	cb 01       	movw	r24, r22
    9242:	aa 27       	eor	r26, r26
    9244:	bb 27       	eor	r27, r27
    9246:	9c 5d       	subi	r25, 0xDC	; 220
    9248:	a1 09       	sbc	r26, r1
    924a:	b1 09       	sbc	r27, r1
    924c:	81 15       	cp	r24, r1
    924e:	44 e0       	ldi	r20, 0x04	; 4
    9250:	94 07       	cpc	r25, r20
    9252:	a1 05       	cpc	r26, r1
    9254:	b1 05       	cpc	r27, r1
    9256:	68 f5       	brcc	.+90     	; 0x92b2 <put_utf+0x152>
    9258:	80 2b       	or	r24, r16
    925a:	91 2b       	or	r25, r17
    925c:	a2 2b       	or	r26, r18
    925e:	b3 2b       	or	r27, r19
    9260:	11 96       	adiw	r26, 0x01	; 1
    9262:	ac 01       	movw	r20, r24
    9264:	bd 01       	movw	r22, r26
    9266:	22 e1       	ldi	r18, 0x12	; 18
    9268:	76 95       	lsr	r23
    926a:	67 95       	ror	r22
    926c:	57 95       	ror	r21
    926e:	47 95       	ror	r20
    9270:	2a 95       	dec	r18
    9272:	d1 f7       	brne	.-12     	; 0x9268 <put_utf+0x108>
    9274:	40 6f       	ori	r20, 0xF0	; 240
    9276:	40 83       	st	Z, r20
    9278:	ac 01       	movw	r20, r24
    927a:	bd 01       	movw	r22, r26
    927c:	3c e0       	ldi	r19, 0x0C	; 12
    927e:	76 95       	lsr	r23
    9280:	67 95       	ror	r22
    9282:	57 95       	ror	r21
    9284:	47 95       	ror	r20
    9286:	3a 95       	dec	r19
    9288:	d1 f7       	brne	.-12     	; 0x927e <put_utf+0x11e>
    928a:	4f 73       	andi	r20, 0x3F	; 63
    928c:	40 68       	ori	r20, 0x80	; 128
    928e:	41 83       	std	Z+1, r20	; 0x01
    9290:	ac 01       	movw	r20, r24
    9292:	bd 01       	movw	r22, r26
    9294:	a6 e0       	ldi	r26, 0x06	; 6
    9296:	76 95       	lsr	r23
    9298:	67 95       	ror	r22
    929a:	57 95       	ror	r21
    929c:	47 95       	ror	r20
    929e:	aa 95       	dec	r26
    92a0:	d1 f7       	brne	.-12     	; 0x9296 <put_utf+0x136>
    92a2:	4f 73       	andi	r20, 0x3F	; 63
    92a4:	40 68       	ori	r20, 0x80	; 128
    92a6:	42 83       	std	Z+2, r20	; 0x02
    92a8:	8f 73       	andi	r24, 0x3F	; 63
    92aa:	80 68       	ori	r24, 0x80	; 128
    92ac:	83 83       	std	Z+3, r24	; 0x03
    92ae:	84 e0       	ldi	r24, 0x04	; 4
    92b0:	01 c0       	rjmp	.+2      	; 0x92b4 <put_utf+0x154>
    92b2:	80 e0       	ldi	r24, 0x00	; 0
    92b4:	1f 91       	pop	r17
    92b6:	0f 91       	pop	r16
    92b8:	08 95       	ret

000092ba <get_fileinfo>:
    92ba:	a0 e0       	ldi	r26, 0x00	; 0
    92bc:	b0 e0       	ldi	r27, 0x00	; 0
    92be:	e3 e6       	ldi	r30, 0x63	; 99
    92c0:	f9 e4       	ldi	r31, 0x49	; 73
    92c2:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
    92c6:	fc 01       	movw	r30, r24
    92c8:	60 80       	ld	r6, Z
    92ca:	71 80       	ldd	r7, Z+1	; 0x01
    92cc:	fb 01       	movw	r30, r22
    92ce:	16 8a       	std	Z+22, r1	; 0x16
    92d0:	fc 01       	movw	r30, r24
    92d2:	06 89       	ldd	r16, Z+22	; 0x16
    92d4:	17 89       	ldd	r17, Z+23	; 0x17
    92d6:	20 8d       	ldd	r18, Z+24	; 0x18
    92d8:	31 8d       	ldd	r19, Z+25	; 0x19
    92da:	01 15       	cp	r16, r1
    92dc:	11 05       	cpc	r17, r1
    92de:	21 05       	cpc	r18, r1
    92e0:	31 05       	cpc	r19, r1
    92e2:	09 f4       	brne	.+2      	; 0x92e6 <get_fileinfo+0x2c>
    92e4:	f5 c0       	rjmp	.+490    	; 0x94d0 <get_fileinfo+0x216>
    92e6:	eb 01       	movw	r28, r22
    92e8:	8c 01       	movw	r16, r24
    92ea:	80 a5       	ldd	r24, Z+40	; 0x28
    92ec:	91 a5       	ldd	r25, Z+41	; 0x29
    92ee:	a2 a5       	ldd	r26, Z+42	; 0x2a
    92f0:	b3 a5       	ldd	r27, Z+43	; 0x2b
    92f2:	8f 3f       	cpi	r24, 0xFF	; 255
    92f4:	9f 4f       	sbci	r25, 0xFF	; 255
    92f6:	af 4f       	sbci	r26, 0xFF	; 255
    92f8:	bf 4f       	sbci	r27, 0xFF	; 255
    92fa:	09 f4       	brne	.+2      	; 0x92fe <get_fileinfo+0x44>
    92fc:	48 c0       	rjmp	.+144    	; 0x938e <get_fileinfo+0xd4>
    92fe:	a1 2c       	mov	r10, r1
    9300:	b1 2c       	mov	r11, r1
    9302:	c1 2c       	mov	r12, r1
    9304:	d1 2c       	mov	r13, r1
    9306:	e1 2c       	mov	r14, r1
    9308:	f1 2c       	mov	r15, r1
    930a:	88 24       	eor	r8, r8
    930c:	8a 94       	dec	r8
    930e:	91 2c       	mov	r9, r1
    9310:	f3 01       	movw	r30, r6
    9312:	83 85       	ldd	r24, Z+11	; 0x0b
    9314:	94 85       	ldd	r25, Z+12	; 0x0c
    9316:	fc 01       	movw	r30, r24
    9318:	ea 0d       	add	r30, r10
    931a:	fb 1d       	adc	r31, r11
    931c:	80 81       	ld	r24, Z
    931e:	91 81       	ldd	r25, Z+1	; 0x01
    9320:	00 97       	sbiw	r24, 0x00	; 0
    9322:	69 f1       	breq	.+90     	; 0x937e <get_fileinfo+0xc4>
    9324:	c1 14       	cp	r12, r1
    9326:	d1 04       	cpc	r13, r1
    9328:	29 f4       	brne	.+10     	; 0x9334 <get_fileinfo+0x7a>
    932a:	9c 01       	movw	r18, r24
    932c:	38 5d       	subi	r19, 0xD8	; 216
    932e:	21 15       	cp	r18, r1
    9330:	38 40       	sbci	r19, 0x08	; 8
    9332:	f0 f0       	brcs	.+60     	; 0x9370 <get_fileinfo+0xb6>
    9334:	a7 01       	movw	r20, r14
    9336:	4a 5e       	subi	r20, 0xEA	; 234
    9338:	5f 4f       	sbci	r21, 0xFF	; 255
    933a:	4c 0f       	add	r20, r28
    933c:	5d 1f       	adc	r21, r29
    933e:	16 01       	movw	r2, r12
    9340:	41 2c       	mov	r4, r1
    9342:	51 2c       	mov	r5, r1
    9344:	21 01       	movw	r4, r2
    9346:	33 24       	eor	r3, r3
    9348:	22 24       	eor	r2, r2
    934a:	a0 e0       	ldi	r26, 0x00	; 0
    934c:	b0 e0       	ldi	r27, 0x00	; 0
    934e:	bc 01       	movw	r22, r24
    9350:	cd 01       	movw	r24, r26
    9352:	62 29       	or	r22, r2
    9354:	73 29       	or	r23, r3
    9356:	84 29       	or	r24, r4
    9358:	95 29       	or	r25, r5
    935a:	94 01       	movw	r18, r8
    935c:	2e 19       	sub	r18, r14
    935e:	3f 09       	sbc	r19, r15
    9360:	ff de       	rcall	.-514    	; 0x9160 <put_utf>
    9362:	90 e0       	ldi	r25, 0x00	; 0
    9364:	00 97       	sbiw	r24, 0x00	; 0
    9366:	49 f0       	breq	.+18     	; 0x937a <get_fileinfo+0xc0>
    9368:	e8 0e       	add	r14, r24
    936a:	f9 1e       	adc	r15, r25
    936c:	80 e0       	ldi	r24, 0x00	; 0
    936e:	90 e0       	ldi	r25, 0x00	; 0
    9370:	e2 e0       	ldi	r30, 0x02	; 2
    9372:	ae 0e       	add	r10, r30
    9374:	b1 1c       	adc	r11, r1
    9376:	6c 01       	movw	r12, r24
    9378:	cb cf       	rjmp	.-106    	; 0x9310 <get_fileinfo+0x56>
    937a:	e1 2c       	mov	r14, r1
    937c:	f1 2c       	mov	r15, r1
    937e:	cd 28       	or	r12, r13
    9380:	11 f0       	breq	.+4      	; 0x9386 <get_fileinfo+0xcc>
    9382:	e1 2c       	mov	r14, r1
    9384:	f1 2c       	mov	r15, r1
    9386:	fe 01       	movw	r30, r28
    9388:	ee 0d       	add	r30, r14
    938a:	ff 1d       	adc	r31, r15
    938c:	16 8a       	std	Z+22, r1	; 0x16
    938e:	e1 2c       	mov	r14, r1
    9390:	f1 2c       	mov	r15, r1
    9392:	80 e0       	ldi	r24, 0x00	; 0
    9394:	90 e0       	ldi	r25, 0x00	; 0
    9396:	2c e0       	ldi	r18, 0x0C	; 12
    9398:	a2 2e       	mov	r10, r18
    939a:	b1 2c       	mov	r11, r1
    939c:	3e e2       	ldi	r19, 0x2E	; 46
    939e:	93 2e       	mov	r9, r19
    93a0:	6c 01       	movw	r12, r24
    93a2:	ff ef       	ldi	r31, 0xFF	; 255
    93a4:	cf 1a       	sub	r12, r31
    93a6:	df 0a       	sbc	r13, r31
    93a8:	f8 01       	movw	r30, r16
    93aa:	22 8d       	ldd	r18, Z+26	; 0x1a
    93ac:	33 8d       	ldd	r19, Z+27	; 0x1b
    93ae:	f9 01       	movw	r30, r18
    93b0:	e8 0f       	add	r30, r24
    93b2:	f9 1f       	adc	r31, r25
    93b4:	80 81       	ld	r24, Z
    93b6:	90 e0       	ldi	r25, 0x00	; 0
    93b8:	80 32       	cpi	r24, 0x20	; 32
    93ba:	91 05       	cpc	r25, r1
    93bc:	71 f1       	breq	.+92     	; 0x941a <get_fileinfo+0x160>
    93be:	85 30       	cpi	r24, 0x05	; 5
    93c0:	91 05       	cpc	r25, r1
    93c2:	11 f4       	brne	.+4      	; 0x93c8 <get_fileinfo+0x10e>
    93c4:	85 ee       	ldi	r24, 0xE5	; 229
    93c6:	90 e0       	ldi	r25, 0x00	; 0
    93c8:	f9 e0       	ldi	r31, 0x09	; 9
    93ca:	cf 16       	cp	r12, r31
    93cc:	d1 04       	cpc	r13, r1
    93ce:	59 f4       	brne	.+22     	; 0x93e6 <get_fileinfo+0x12c>
    93d0:	2c e0       	ldi	r18, 0x0C	; 12
    93d2:	e2 16       	cp	r14, r18
    93d4:	f1 04       	cpc	r15, r1
    93d6:	38 f4       	brcc	.+14     	; 0x93e6 <get_fileinfo+0x12c>
    93d8:	fe 01       	movw	r30, r28
    93da:	ee 0d       	add	r30, r14
    93dc:	ff 1d       	adc	r31, r15
    93de:	91 86       	std	Z+9, r9	; 0x09
    93e0:	f7 01       	movw	r30, r14
    93e2:	31 96       	adiw	r30, 0x01	; 1
    93e4:	7f 01       	movw	r14, r30
    93e6:	65 eb       	ldi	r22, 0xB5	; 181
    93e8:	71 e0       	ldi	r23, 0x01	; 1
    93ea:	0e 94 c2 69 	call	0xd384	; 0xd384 <ff_oem2uni>
    93ee:	00 97       	sbiw	r24, 0x00	; 0
    93f0:	19 f4       	brne	.+6      	; 0x93f8 <get_fileinfo+0x13e>
    93f2:	e1 2c       	mov	r14, r1
    93f4:	f1 2c       	mov	r15, r1
    93f6:	16 c0       	rjmp	.+44     	; 0x9424 <get_fileinfo+0x16a>
    93f8:	a7 01       	movw	r20, r14
    93fa:	47 5f       	subi	r20, 0xF7	; 247
    93fc:	5f 4f       	sbci	r21, 0xFF	; 255
    93fe:	4c 0f       	add	r20, r28
    9400:	5d 1f       	adc	r21, r29
    9402:	bc 01       	movw	r22, r24
    9404:	80 e0       	ldi	r24, 0x00	; 0
    9406:	90 e0       	ldi	r25, 0x00	; 0
    9408:	95 01       	movw	r18, r10
    940a:	2e 19       	sub	r18, r14
    940c:	3f 09       	sbc	r19, r15
    940e:	a8 de       	rcall	.-688    	; 0x9160 <put_utf>
    9410:	90 e0       	ldi	r25, 0x00	; 0
    9412:	00 97       	sbiw	r24, 0x00	; 0
    9414:	71 f3       	breq	.-36     	; 0x93f2 <get_fileinfo+0x138>
    9416:	e8 0e       	add	r14, r24
    9418:	f9 1e       	adc	r15, r25
    941a:	c6 01       	movw	r24, r12
    941c:	8b 30       	cpi	r24, 0x0B	; 11
    941e:	91 05       	cpc	r25, r1
    9420:	09 f0       	breq	.+2      	; 0x9424 <get_fileinfo+0x16a>
    9422:	be cf       	rjmp	.-132    	; 0x93a0 <get_fileinfo+0xe6>
    9424:	fe 01       	movw	r30, r28
    9426:	ee 0d       	add	r30, r14
    9428:	ff 1d       	adc	r31, r15
    942a:	11 86       	std	Z+9, r1	; 0x09
    942c:	8e 89       	ldd	r24, Y+22	; 0x16
    942e:	81 11       	cpse	r24, r1
    9430:	36 c0       	rjmp	.+108    	; 0x949e <get_fileinfo+0x1e4>
    9432:	e1 14       	cp	r14, r1
    9434:	f1 04       	cpc	r15, r1
    9436:	31 f0       	breq	.+12     	; 0x9444 <get_fileinfo+0x18a>
    9438:	de 01       	movw	r26, r28
    943a:	19 96       	adiw	r26, 0x09	; 9
    943c:	58 e0       	ldi	r21, 0x08	; 8
    943e:	20 e0       	ldi	r18, 0x00	; 0
    9440:	30 e0       	ldi	r19, 0x00	; 0
    9442:	14 c0       	rjmp	.+40     	; 0x946c <get_fileinfo+0x1b2>
    9444:	8f e3       	ldi	r24, 0x3F	; 63
    9446:	8e 8b       	std	Y+22, r24	; 0x16
    9448:	21 e0       	ldi	r18, 0x01	; 1
    944a:	30 e0       	ldi	r19, 0x00	; 0
    944c:	1c c0       	rjmp	.+56     	; 0x9486 <get_fileinfo+0x1cc>
    944e:	90 e0       	ldi	r25, 0x00	; 0
    9450:	8e 32       	cpi	r24, 0x2E	; 46
    9452:	91 05       	cpc	r25, r1
    9454:	09 f4       	brne	.+2      	; 0x9458 <get_fileinfo+0x19e>
    9456:	50 e1       	ldi	r21, 0x10	; 16
    9458:	bc 01       	movw	r22, r24
    945a:	61 54       	subi	r22, 0x41	; 65
    945c:	71 09       	sbc	r23, r1
    945e:	6a 31       	cpi	r22, 0x1A	; 26
    9460:	71 05       	cpc	r23, r1
    9462:	40 f0       	brcs	.+16     	; 0x9474 <get_fileinfo+0x1ba>
    9464:	fd 01       	movw	r30, r26
    9466:	84 87       	std	Z+12, r24	; 0x0c
    9468:	2f 5f       	subi	r18, 0xFF	; 255
    946a:	3f 4f       	sbci	r19, 0xFF	; 255
    946c:	8d 91       	ld	r24, X+
    946e:	81 11       	cpse	r24, r1
    9470:	ee cf       	rjmp	.-36     	; 0x944e <get_fileinfo+0x194>
    9472:	09 c0       	rjmp	.+18     	; 0x9486 <get_fileinfo+0x1cc>
    9474:	f8 01       	movw	r30, r16
    9476:	62 8d       	ldd	r22, Z+26	; 0x1a
    9478:	73 8d       	ldd	r23, Z+27	; 0x1b
    947a:	fb 01       	movw	r30, r22
    947c:	44 85       	ldd	r20, Z+12	; 0x0c
    947e:	45 23       	and	r20, r21
    9480:	89 f3       	breq	.-30     	; 0x9464 <get_fileinfo+0x1aa>
    9482:	80 96       	adiw	r24, 0x20	; 32
    9484:	ef cf       	rjmp	.-34     	; 0x9464 <get_fileinfo+0x1aa>
    9486:	fe 01       	movw	r30, r28
    9488:	e2 0f       	add	r30, r18
    948a:	f3 1f       	adc	r31, r19
    948c:	16 8a       	std	Z+22, r1	; 0x16
    948e:	f8 01       	movw	r30, r16
    9490:	82 8d       	ldd	r24, Z+26	; 0x1a
    9492:	93 8d       	ldd	r25, Z+27	; 0x1b
    9494:	fc 01       	movw	r30, r24
    9496:	84 85       	ldd	r24, Z+12	; 0x0c
    9498:	81 11       	cpse	r24, r1
    949a:	01 c0       	rjmp	.+2      	; 0x949e <get_fileinfo+0x1e4>
    949c:	19 86       	std	Y+9, r1	; 0x09
    949e:	f8 01       	movw	r30, r16
    94a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    94a2:	93 8d       	ldd	r25, Z+27	; 0x1b
    94a4:	fc 01       	movw	r30, r24
    94a6:	83 85       	ldd	r24, Z+11	; 0x0b
    94a8:	88 87       	std	Y+8, r24	; 0x08
    94aa:	f8 01       	movw	r30, r16
    94ac:	02 8d       	ldd	r16, Z+26	; 0x1a
    94ae:	13 8d       	ldd	r17, Z+27	; 0x1b
    94b0:	c8 01       	movw	r24, r16
    94b2:	4c 96       	adiw	r24, 0x1c	; 28
    94b4:	c6 dc       	rcall	.-1652   	; 0x8e42 <ld_dword>
    94b6:	68 83       	st	Y, r22
    94b8:	79 83       	std	Y+1, r23	; 0x01
    94ba:	8a 83       	std	Y+2, r24	; 0x02
    94bc:	9b 83       	std	Y+3, r25	; 0x03
    94be:	f8 01       	movw	r30, r16
    94c0:	86 89       	ldd	r24, Z+22	; 0x16
    94c2:	97 89       	ldd	r25, Z+23	; 0x17
    94c4:	9f 83       	std	Y+7, r25	; 0x07
    94c6:	8e 83       	std	Y+6, r24	; 0x06
    94c8:	80 8d       	ldd	r24, Z+24	; 0x18
    94ca:	91 8d       	ldd	r25, Z+25	; 0x19
    94cc:	9d 83       	std	Y+5, r25	; 0x05
    94ce:	8c 83       	std	Y+4, r24	; 0x04
    94d0:	cd b7       	in	r28, 0x3d	; 61
    94d2:	de b7       	in	r29, 0x3e	; 62
    94d4:	e2 e1       	ldi	r30, 0x12	; 18
    94d6:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

000094da <ld_clust.isra.4>:
    94da:	fb 01       	movw	r30, r22
    94dc:	42 8d       	ldd	r20, Z+26	; 0x1a
    94de:	53 8d       	ldd	r21, Z+27	; 0x1b
    94e0:	60 e0       	ldi	r22, 0x00	; 0
    94e2:	70 e0       	ldi	r23, 0x00	; 0
    94e4:	83 30       	cpi	r24, 0x03	; 3
    94e6:	59 f4       	brne	.+22     	; 0x94fe <ld_clust.isra.4+0x24>
    94e8:	84 89       	ldd	r24, Z+20	; 0x14
    94ea:	95 89       	ldd	r25, Z+21	; 0x15
    94ec:	a0 e0       	ldi	r26, 0x00	; 0
    94ee:	b0 e0       	ldi	r27, 0x00	; 0
    94f0:	dc 01       	movw	r26, r24
    94f2:	99 27       	eor	r25, r25
    94f4:	88 27       	eor	r24, r24
    94f6:	48 2b       	or	r20, r24
    94f8:	59 2b       	or	r21, r25
    94fa:	6a 2b       	or	r22, r26
    94fc:	7b 2b       	or	r23, r27
    94fe:	cb 01       	movw	r24, r22
    9500:	ba 01       	movw	r22, r20
    9502:	08 95       	ret

00009504 <st_clust.isra.5>:
    9504:	fb 01       	movw	r30, r22
    9506:	22 8f       	std	Z+26, r18	; 0x1a
    9508:	33 8f       	std	Z+27, r19	; 0x1b
    950a:	dc 01       	movw	r26, r24
    950c:	8c 91       	ld	r24, X
    950e:	83 30       	cpi	r24, 0x03	; 3
    9510:	29 f4       	brne	.+10     	; 0x951c <st_clust.isra.5+0x18>
    9512:	ca 01       	movw	r24, r20
    9514:	aa 27       	eor	r26, r26
    9516:	bb 27       	eor	r27, r27
    9518:	84 8b       	std	Z+20, r24	; 0x14
    951a:	95 8b       	std	Z+21, r25	; 0x15
    951c:	08 95       	ret

0000951e <sync_window.part.6>:
    951e:	8f 92       	push	r8
    9520:	9f 92       	push	r9
    9522:	af 92       	push	r10
    9524:	bf 92       	push	r11
    9526:	ef 92       	push	r14
    9528:	ff 92       	push	r15
    952a:	0f 93       	push	r16
    952c:	1f 93       	push	r17
    952e:	cf 93       	push	r28
    9530:	df 93       	push	r29
    9532:	ec 01       	movw	r28, r24
    9534:	7c 01       	movw	r14, r24
    9536:	45 e3       	ldi	r20, 0x35	; 53
    9538:	e4 0e       	add	r14, r20
    953a:	f1 1c       	adc	r15, r1
    953c:	29 a9       	ldd	r18, Y+49	; 0x31
    953e:	3a a9       	ldd	r19, Y+50	; 0x32
    9540:	4b a9       	ldd	r20, Y+51	; 0x33
    9542:	5c a9       	ldd	r21, Y+52	; 0x34
    9544:	01 e0       	ldi	r16, 0x01	; 1
    9546:	10 e0       	ldi	r17, 0x00	; 0
    9548:	b7 01       	movw	r22, r14
    954a:	89 81       	ldd	r24, Y+1	; 0x01
    954c:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <disk_write>
    9550:	89 2b       	or	r24, r25
    9552:	41 f5       	brne	.+80     	; 0x95a4 <sync_window.part.6+0x86>
    9554:	1b 82       	std	Y+3, r1	; 0x03
    9556:	09 a9       	ldd	r16, Y+49	; 0x31
    9558:	1a a9       	ldd	r17, Y+50	; 0x32
    955a:	2b a9       	ldd	r18, Y+51	; 0x33
    955c:	3c a9       	ldd	r19, Y+52	; 0x34
    955e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9560:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9562:	af 8d       	ldd	r26, Y+31	; 0x1f
    9564:	b8 a1       	ldd	r27, Y+32	; 0x20
    9566:	8d a0       	ldd	r8, Y+37	; 0x25
    9568:	9e a0       	ldd	r9, Y+38	; 0x26
    956a:	af a0       	ldd	r10, Y+39	; 0x27
    956c:	b8 a4       	ldd	r11, Y+40	; 0x28
    956e:	b9 01       	movw	r22, r18
    9570:	a8 01       	movw	r20, r16
    9572:	48 19       	sub	r20, r8
    9574:	59 09       	sbc	r21, r9
    9576:	6a 09       	sbc	r22, r10
    9578:	7b 09       	sbc	r23, r11
    957a:	48 17       	cp	r20, r24
    957c:	59 07       	cpc	r21, r25
    957e:	6a 07       	cpc	r22, r26
    9580:	7b 07       	cpc	r23, r27
    9582:	98 f4       	brcc	.+38     	; 0x95aa <sync_window.part.6+0x8c>
    9584:	6a 81       	ldd	r22, Y+2	; 0x02
    9586:	62 30       	cpi	r22, 0x02	; 2
    9588:	81 f4       	brne	.+32     	; 0x95aa <sync_window.part.6+0x8c>
    958a:	a9 01       	movw	r20, r18
    958c:	98 01       	movw	r18, r16
    958e:	28 0f       	add	r18, r24
    9590:	39 1f       	adc	r19, r25
    9592:	4a 1f       	adc	r20, r26
    9594:	5b 1f       	adc	r21, r27
    9596:	01 e0       	ldi	r16, 0x01	; 1
    9598:	10 e0       	ldi	r17, 0x00	; 0
    959a:	b7 01       	movw	r22, r14
    959c:	89 81       	ldd	r24, Y+1	; 0x01
    959e:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <disk_write>
    95a2:	03 c0       	rjmp	.+6      	; 0x95aa <sync_window.part.6+0x8c>
    95a4:	81 e0       	ldi	r24, 0x01	; 1
    95a6:	90 e0       	ldi	r25, 0x00	; 0
    95a8:	02 c0       	rjmp	.+4      	; 0x95ae <sync_window.part.6+0x90>
    95aa:	80 e0       	ldi	r24, 0x00	; 0
    95ac:	90 e0       	ldi	r25, 0x00	; 0
    95ae:	df 91       	pop	r29
    95b0:	cf 91       	pop	r28
    95b2:	1f 91       	pop	r17
    95b4:	0f 91       	pop	r16
    95b6:	ff 90       	pop	r15
    95b8:	ef 90       	pop	r14
    95ba:	bf 90       	pop	r11
    95bc:	af 90       	pop	r10
    95be:	9f 90       	pop	r9
    95c0:	8f 90       	pop	r8
    95c2:	08 95       	ret

000095c4 <sync_fs>:
    95c4:	ef 92       	push	r14
    95c6:	ff 92       	push	r15
    95c8:	0f 93       	push	r16
    95ca:	1f 93       	push	r17
    95cc:	cf 93       	push	r28
    95ce:	df 93       	push	r29
    95d0:	ec 01       	movw	r28, r24
    95d2:	8b 81       	ldd	r24, Y+3	; 0x03
    95d4:	81 11       	cpse	r24, r1
    95d6:	05 c0       	rjmp	.+10     	; 0x95e2 <sync_fs+0x1e>
    95d8:	88 81       	ld	r24, Y
    95da:	83 30       	cpi	r24, 0x03	; 3
    95dc:	09 f0       	breq	.+2      	; 0x95e0 <sync_fs+0x1c>
    95de:	52 c0       	rjmp	.+164    	; 0x9684 <sync_fs+0xc0>
    95e0:	06 c0       	rjmp	.+12     	; 0x95ee <sync_fs+0x2a>
    95e2:	ce 01       	movw	r24, r28
    95e4:	9c df       	rcall	.-200    	; 0x951e <sync_window.part.6>
    95e6:	00 97       	sbiw	r24, 0x00	; 0
    95e8:	09 f0       	breq	.+2      	; 0x95ec <sync_fs+0x28>
    95ea:	59 c0       	rjmp	.+178    	; 0x969e <sync_fs+0xda>
    95ec:	f5 cf       	rjmp	.-22     	; 0x95d8 <sync_fs+0x14>
    95ee:	8c 81       	ldd	r24, Y+4	; 0x04
    95f0:	81 30       	cpi	r24, 0x01	; 1
    95f2:	09 f0       	breq	.+2      	; 0x95f6 <sync_fs+0x32>
    95f4:	47 c0       	rjmp	.+142    	; 0x9684 <sync_fs+0xc0>
    95f6:	40 e0       	ldi	r20, 0x00	; 0
    95f8:	52 e0       	ldi	r21, 0x02	; 2
    95fa:	60 e0       	ldi	r22, 0x00	; 0
    95fc:	70 e0       	ldi	r23, 0x00	; 0
    95fe:	7e 01       	movw	r14, r28
    9600:	85 e3       	ldi	r24, 0x35	; 53
    9602:	e8 0e       	add	r14, r24
    9604:	f1 1c       	adc	r15, r1
    9606:	c7 01       	movw	r24, r14
    9608:	37 dc       	rcall	.-1938   	; 0x8e78 <mem_set>
    960a:	85 e5       	ldi	r24, 0x55	; 85
    960c:	fe 01       	movw	r30, r28
    960e:	ed 5c       	subi	r30, 0xCD	; 205
    9610:	fd 4f       	sbci	r31, 0xFD	; 253
    9612:	80 83       	st	Z, r24
    9614:	8a ea       	ldi	r24, 0xAA	; 170
    9616:	31 96       	adiw	r30, 0x01	; 1
    9618:	80 83       	st	Z, r24
    961a:	82 e5       	ldi	r24, 0x52	; 82
    961c:	8d ab       	std	Y+53, r24	; 0x35
    961e:	8e ab       	std	Y+54, r24	; 0x36
    9620:	81 e6       	ldi	r24, 0x61	; 97
    9622:	8f ab       	std	Y+55, r24	; 0x37
    9624:	91 e4       	ldi	r25, 0x41	; 65
    9626:	98 af       	std	Y+56, r25	; 0x38
    9628:	22 e7       	ldi	r18, 0x72	; 114
    962a:	7b 97       	sbiw	r30, 0x1b	; 27
    962c:	20 83       	st	Z, r18
    962e:	31 96       	adiw	r30, 0x01	; 1
    9630:	20 83       	st	Z, r18
    9632:	31 96       	adiw	r30, 0x01	; 1
    9634:	90 83       	st	Z, r25
    9636:	31 96       	adiw	r30, 0x01	; 1
    9638:	80 83       	st	Z, r24
    963a:	49 89       	ldd	r20, Y+17	; 0x11
    963c:	5a 89       	ldd	r21, Y+18	; 0x12
    963e:	6b 89       	ldd	r22, Y+19	; 0x13
    9640:	7c 89       	ldd	r23, Y+20	; 0x14
    9642:	ce 01       	movw	r24, r28
    9644:	83 5e       	subi	r24, 0xE3	; 227
    9646:	9d 4f       	sbci	r25, 0xFD	; 253
    9648:	11 dc       	rcall	.-2014   	; 0x8e6c <st_dword>
    964a:	4d 85       	ldd	r20, Y+13	; 0x0d
    964c:	5e 85       	ldd	r21, Y+14	; 0x0e
    964e:	6f 85       	ldd	r22, Y+15	; 0x0f
    9650:	78 89       	ldd	r23, Y+16	; 0x10
    9652:	ce 01       	movw	r24, r28
    9654:	8f 5d       	subi	r24, 0xDF	; 223
    9656:	9d 4f       	sbci	r25, 0xFD	; 253
    9658:	09 dc       	rcall	.-2030   	; 0x8e6c <st_dword>
    965a:	89 a1       	ldd	r24, Y+33	; 0x21
    965c:	9a a1       	ldd	r25, Y+34	; 0x22
    965e:	ab a1       	ldd	r26, Y+35	; 0x23
    9660:	bc a1       	ldd	r27, Y+36	; 0x24
    9662:	9c 01       	movw	r18, r24
    9664:	ad 01       	movw	r20, r26
    9666:	2f 5f       	subi	r18, 0xFF	; 255
    9668:	3f 4f       	sbci	r19, 0xFF	; 255
    966a:	4f 4f       	sbci	r20, 0xFF	; 255
    966c:	5f 4f       	sbci	r21, 0xFF	; 255
    966e:	29 ab       	std	Y+49, r18	; 0x31
    9670:	3a ab       	std	Y+50, r19	; 0x32
    9672:	4b ab       	std	Y+51, r20	; 0x33
    9674:	5c ab       	std	Y+52, r21	; 0x34
    9676:	01 e0       	ldi	r16, 0x01	; 1
    9678:	10 e0       	ldi	r17, 0x00	; 0
    967a:	b7 01       	movw	r22, r14
    967c:	89 81       	ldd	r24, Y+1	; 0x01
    967e:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <disk_write>
    9682:	1c 82       	std	Y+4, r1	; 0x04
    9684:	40 e0       	ldi	r20, 0x00	; 0
    9686:	50 e0       	ldi	r21, 0x00	; 0
    9688:	60 e0       	ldi	r22, 0x00	; 0
    968a:	89 81       	ldd	r24, Y+1	; 0x01
    968c:	0e 94 65 6a 	call	0xd4ca	; 0xd4ca <disk_ioctl>
    9690:	31 e0       	ldi	r19, 0x01	; 1
    9692:	20 e0       	ldi	r18, 0x00	; 0
    9694:	89 2b       	or	r24, r25
    9696:	09 f4       	brne	.+2      	; 0x969a <sync_fs+0xd6>
    9698:	30 e0       	ldi	r19, 0x00	; 0
    969a:	83 2f       	mov	r24, r19
    969c:	92 2f       	mov	r25, r18
    969e:	cd b7       	in	r28, 0x3d	; 61
    96a0:	de b7       	in	r29, 0x3e	; 62
    96a2:	e6 e0       	ldi	r30, 0x06	; 6
    96a4:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

000096a8 <dir_clear>:
    96a8:	4f 92       	push	r4
    96aa:	5f 92       	push	r5
    96ac:	6f 92       	push	r6
    96ae:	7f 92       	push	r7
    96b0:	af 92       	push	r10
    96b2:	bf 92       	push	r11
    96b4:	cf 92       	push	r12
    96b6:	df 92       	push	r13
    96b8:	ef 92       	push	r14
    96ba:	ff 92       	push	r15
    96bc:	0f 93       	push	r16
    96be:	1f 93       	push	r17
    96c0:	cf 93       	push	r28
    96c2:	df 93       	push	r29
    96c4:	ec 01       	movw	r28, r24
    96c6:	6a 01       	movw	r12, r20
    96c8:	7b 01       	movw	r14, r22
    96ca:	8b 81       	ldd	r24, Y+3	; 0x03
    96cc:	81 11       	cpse	r24, r1
    96ce:	28 c0       	rjmp	.+80     	; 0x9720 <dir_clear+0x78>
    96d0:	b7 01       	movw	r22, r14
    96d2:	a6 01       	movw	r20, r12
    96d4:	ce 01       	movw	r24, r28
    96d6:	6e dc       	rcall	.-1828   	; 0x8fb4 <clst2sect>
    96d8:	2b 01       	movw	r4, r22
    96da:	3c 01       	movw	r6, r24
    96dc:	69 ab       	std	Y+49, r22	; 0x31
    96de:	7a ab       	std	Y+50, r23	; 0x32
    96e0:	8b ab       	std	Y+51, r24	; 0x33
    96e2:	9c ab       	std	Y+52, r25	; 0x34
    96e4:	5e 01       	movw	r10, r28
    96e6:	25 e3       	ldi	r18, 0x35	; 53
    96e8:	a2 0e       	add	r10, r18
    96ea:	b1 1c       	adc	r11, r1
    96ec:	40 e0       	ldi	r20, 0x00	; 0
    96ee:	52 e0       	ldi	r21, 0x02	; 2
    96f0:	60 e0       	ldi	r22, 0x00	; 0
    96f2:	70 e0       	ldi	r23, 0x00	; 0
    96f4:	c5 01       	movw	r24, r10
    96f6:	c0 db       	rcall	.-2176   	; 0x8e78 <mem_set>
    96f8:	09 85       	ldd	r16, Y+9	; 0x09
    96fa:	1a 85       	ldd	r17, Y+10	; 0x0a
    96fc:	c8 01       	movw	r24, r16
    96fe:	a0 e0       	ldi	r26, 0x00	; 0
    9700:	b0 e0       	ldi	r27, 0x00	; 0
    9702:	39 e0       	ldi	r19, 0x09	; 9
    9704:	88 0f       	add	r24, r24
    9706:	99 1f       	adc	r25, r25
    9708:	aa 1f       	adc	r26, r26
    970a:	bb 1f       	adc	r27, r27
    970c:	3a 95       	dec	r19
    970e:	d1 f7       	brne	.-12     	; 0x9704 <dir_clear+0x5c>
    9710:	81 15       	cp	r24, r1
    9712:	90 48       	sbci	r25, 0x80	; 128
    9714:	a1 05       	cpc	r26, r1
    9716:	b1 05       	cpc	r27, r1
    9718:	50 f0       	brcs	.+20     	; 0x972e <dir_clear+0x86>
    971a:	00 e0       	ldi	r16, 0x00	; 0
    971c:	10 e8       	ldi	r17, 0x80	; 128
    971e:	14 c0       	rjmp	.+40     	; 0x9748 <dir_clear+0xa0>
    9720:	ce 01       	movw	r24, r28
    9722:	fd de       	rcall	.-518    	; 0x951e <sync_window.part.6>
    9724:	89 2b       	or	r24, r25
    9726:	a1 f2       	breq	.-88     	; 0x96d0 <dir_clear+0x28>
    9728:	81 e0       	ldi	r24, 0x01	; 1
    972a:	90 e0       	ldi	r25, 0x00	; 0
    972c:	56 c0       	rjmp	.+172    	; 0x97da <dir_clear+0x132>
    972e:	10 2f       	mov	r17, r16
    9730:	00 27       	eor	r16, r16
    9732:	11 0f       	add	r17, r17
    9734:	09 c0       	rjmp	.+18     	; 0x9748 <dir_clear+0xa0>
    9736:	c8 01       	movw	r24, r16
    9738:	0e 94 89 69 	call	0xd312	; 0xd312 <ff_memalloc>
    973c:	6c 01       	movw	r12, r24
    973e:	00 97       	sbiw	r24, 0x00	; 0
    9740:	09 f0       	breq	.+2      	; 0x9744 <dir_clear+0x9c>
    9742:	40 c0       	rjmp	.+128    	; 0x97c4 <dir_clear+0x11c>
    9744:	16 95       	lsr	r17
    9746:	07 95       	ror	r16
    9748:	01 30       	cpi	r16, 0x01	; 1
    974a:	82 e0       	ldi	r24, 0x02	; 2
    974c:	18 07       	cpc	r17, r24
    974e:	98 f7       	brcc	.-26     	; 0x9736 <dir_clear+0x8e>
    9750:	e1 2c       	mov	r14, r1
    9752:	f1 2c       	mov	r15, r1
    9754:	11 c0       	rjmp	.+34     	; 0x9778 <dir_clear+0xd0>
    9756:	01 e0       	ldi	r16, 0x01	; 1
    9758:	10 e0       	ldi	r17, 0x00	; 0
    975a:	a3 01       	movw	r20, r6
    975c:	92 01       	movw	r18, r4
    975e:	2e 0d       	add	r18, r14
    9760:	3f 1d       	adc	r19, r15
    9762:	41 1d       	adc	r20, r1
    9764:	51 1d       	adc	r21, r1
    9766:	b5 01       	movw	r22, r10
    9768:	89 81       	ldd	r24, Y+1	; 0x01
    976a:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <disk_write>
    976e:	89 2b       	or	r24, r25
    9770:	01 f5       	brne	.+64     	; 0x97b2 <dir_clear+0x10a>
    9772:	2f ef       	ldi	r18, 0xFF	; 255
    9774:	e2 1a       	sub	r14, r18
    9776:	f2 0a       	sbc	r15, r18
    9778:	89 85       	ldd	r24, Y+9	; 0x09
    977a:	9a 85       	ldd	r25, Y+10	; 0x0a
    977c:	e8 16       	cp	r14, r24
    977e:	f9 06       	cpc	r15, r25
    9780:	50 f3       	brcs	.-44     	; 0x9756 <dir_clear+0xae>
    9782:	17 c0       	rjmp	.+46     	; 0x97b2 <dir_clear+0x10a>
    9784:	85 01       	movw	r16, r10
    9786:	a3 01       	movw	r20, r6
    9788:	92 01       	movw	r18, r4
    978a:	2e 0d       	add	r18, r14
    978c:	3f 1d       	adc	r19, r15
    978e:	41 1d       	adc	r20, r1
    9790:	51 1d       	adc	r21, r1
    9792:	b6 01       	movw	r22, r12
    9794:	89 81       	ldd	r24, Y+1	; 0x01
    9796:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <disk_write>
    979a:	89 2b       	or	r24, r25
    979c:	39 f4       	brne	.+14     	; 0x97ac <dir_clear+0x104>
    979e:	ea 0c       	add	r14, r10
    97a0:	fb 1c       	adc	r15, r11
    97a2:	89 85       	ldd	r24, Y+9	; 0x09
    97a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    97a6:	e8 16       	cp	r14, r24
    97a8:	f9 06       	cpc	r15, r25
    97aa:	60 f3       	brcs	.-40     	; 0x9784 <dir_clear+0xdc>
    97ac:	c6 01       	movw	r24, r12
    97ae:	0e 94 8c 69 	call	0xd318	; 0xd318 <ff_memfree>
    97b2:	81 e0       	ldi	r24, 0x01	; 1
    97b4:	90 e0       	ldi	r25, 0x00	; 0
    97b6:	29 85       	ldd	r18, Y+9	; 0x09
    97b8:	3a 85       	ldd	r19, Y+10	; 0x0a
    97ba:	2e 15       	cp	r18, r14
    97bc:	3f 05       	cpc	r19, r15
    97be:	69 f4       	brne	.+26     	; 0x97da <dir_clear+0x132>
    97c0:	80 e0       	ldi	r24, 0x00	; 0
    97c2:	0b c0       	rjmp	.+22     	; 0x97da <dir_clear+0x132>
    97c4:	a8 01       	movw	r20, r16
    97c6:	60 e0       	ldi	r22, 0x00	; 0
    97c8:	70 e0       	ldi	r23, 0x00	; 0
    97ca:	56 db       	rcall	.-2388   	; 0x8e78 <mem_set>
    97cc:	58 01       	movw	r10, r16
    97ce:	ab 2c       	mov	r10, r11
    97d0:	bb 24       	eor	r11, r11
    97d2:	a6 94       	lsr	r10
    97d4:	e1 2c       	mov	r14, r1
    97d6:	f1 2c       	mov	r15, r1
    97d8:	e4 cf       	rjmp	.-56     	; 0x97a2 <dir_clear+0xfa>
    97da:	df 91       	pop	r29
    97dc:	cf 91       	pop	r28
    97de:	1f 91       	pop	r17
    97e0:	0f 91       	pop	r16
    97e2:	ff 90       	pop	r15
    97e4:	ef 90       	pop	r14
    97e6:	df 90       	pop	r13
    97e8:	cf 90       	pop	r12
    97ea:	bf 90       	pop	r11
    97ec:	af 90       	pop	r10
    97ee:	7f 90       	pop	r7
    97f0:	6f 90       	pop	r6
    97f2:	5f 90       	pop	r5
    97f4:	4f 90       	pop	r4
    97f6:	08 95       	ret

000097f8 <move_window>:
    97f8:	a0 e0       	ldi	r26, 0x00	; 0
    97fa:	b0 e0       	ldi	r27, 0x00	; 0
    97fc:	e2 e0       	ldi	r30, 0x02	; 2
    97fe:	fc e4       	ldi	r31, 0x4C	; 76
    9800:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
    9804:	ec 01       	movw	r28, r24
    9806:	6a 01       	movw	r12, r20
    9808:	7b 01       	movw	r14, r22
    980a:	89 a9       	ldd	r24, Y+49	; 0x31
    980c:	9a a9       	ldd	r25, Y+50	; 0x32
    980e:	ab a9       	ldd	r26, Y+51	; 0x33
    9810:	bc a9       	ldd	r27, Y+52	; 0x34
    9812:	84 17       	cp	r24, r20
    9814:	95 07       	cpc	r25, r21
    9816:	a6 07       	cpc	r26, r22
    9818:	b7 07       	cpc	r27, r23
    981a:	11 f1       	breq	.+68     	; 0x9860 <move_window+0x68>
    981c:	8b 81       	ldd	r24, Y+3	; 0x03
    981e:	81 11       	cpse	r24, r1
    9820:	13 c0       	rjmp	.+38     	; 0x9848 <move_window+0x50>
    9822:	01 e0       	ldi	r16, 0x01	; 1
    9824:	10 e0       	ldi	r17, 0x00	; 0
    9826:	a7 01       	movw	r20, r14
    9828:	96 01       	movw	r18, r12
    982a:	be 01       	movw	r22, r28
    982c:	6b 5c       	subi	r22, 0xCB	; 203
    982e:	7f 4f       	sbci	r23, 0xFF	; 255
    9830:	89 81       	ldd	r24, Y+1	; 0x01
    9832:	0e 94 45 6a 	call	0xd48a	; 0xd48a <disk_read>
    9836:	89 2b       	or	r24, r25
    9838:	61 f0       	breq	.+24     	; 0x9852 <move_window+0x5a>
    983a:	81 e0       	ldi	r24, 0x01	; 1
    983c:	90 e0       	ldi	r25, 0x00	; 0
    983e:	cc 24       	eor	r12, r12
    9840:	ca 94       	dec	r12
    9842:	dc 2c       	mov	r13, r12
    9844:	76 01       	movw	r14, r12
    9846:	07 c0       	rjmp	.+14     	; 0x9856 <move_window+0x5e>
    9848:	ce 01       	movw	r24, r28
    984a:	69 de       	rcall	.-814    	; 0x951e <sync_window.part.6>
    984c:	00 97       	sbiw	r24, 0x00	; 0
    984e:	51 f4       	brne	.+20     	; 0x9864 <move_window+0x6c>
    9850:	e8 cf       	rjmp	.-48     	; 0x9822 <move_window+0x2a>
    9852:	80 e0       	ldi	r24, 0x00	; 0
    9854:	90 e0       	ldi	r25, 0x00	; 0
    9856:	c9 aa       	std	Y+49, r12	; 0x31
    9858:	da aa       	std	Y+50, r13	; 0x32
    985a:	eb aa       	std	Y+51, r14	; 0x33
    985c:	fc aa       	std	Y+52, r15	; 0x34
    985e:	02 c0       	rjmp	.+4      	; 0x9864 <move_window+0x6c>
    9860:	80 e0       	ldi	r24, 0x00	; 0
    9862:	90 e0       	ldi	r25, 0x00	; 0
    9864:	cd b7       	in	r28, 0x3d	; 61
    9866:	de b7       	in	r29, 0x3e	; 62
    9868:	e8 e0       	ldi	r30, 0x08	; 8
    986a:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

0000986e <check_fs>:
    986e:	cf 93       	push	r28
    9870:	df 93       	push	r29
    9872:	ec 01       	movw	r28, r24
    9874:	1b 82       	std	Y+3, r1	; 0x03
    9876:	8f ef       	ldi	r24, 0xFF	; 255
    9878:	9f ef       	ldi	r25, 0xFF	; 255
    987a:	dc 01       	movw	r26, r24
    987c:	89 ab       	std	Y+49, r24	; 0x31
    987e:	9a ab       	std	Y+50, r25	; 0x32
    9880:	ab ab       	std	Y+51, r26	; 0x33
    9882:	bc ab       	std	Y+52, r27	; 0x34
    9884:	ce 01       	movw	r24, r28
    9886:	b8 df       	rcall	.-144    	; 0x97f8 <move_window>
    9888:	89 2b       	or	r24, r25
    988a:	19 f5       	brne	.+70     	; 0x98d2 <check_fs+0x64>
    988c:	fe 01       	movw	r30, r28
    988e:	ed 5c       	subi	r30, 0xCD	; 205
    9890:	fd 4f       	sbci	r31, 0xFD	; 253
    9892:	80 81       	ld	r24, Z
    9894:	91 81       	ldd	r25, Z+1	; 0x01
    9896:	85 35       	cpi	r24, 0x55	; 85
    9898:	9a 4a       	sbci	r25, 0xAA	; 170
    989a:	f1 f4       	brne	.+60     	; 0x98d8 <check_fs+0x6a>
    989c:	8d a9       	ldd	r24, Y+53	; 0x35
    989e:	8b 3e       	cpi	r24, 0xEB	; 235
    98a0:	19 f0       	breq	.+6      	; 0x98a8 <check_fs+0x3a>
    98a2:	88 5e       	subi	r24, 0xE8	; 232
    98a4:	82 30       	cpi	r24, 0x02	; 2
    98a6:	f0 f4       	brcc	.+60     	; 0x98e4 <check_fs+0x76>
    98a8:	43 e0       	ldi	r20, 0x03	; 3
    98aa:	50 e0       	ldi	r21, 0x00	; 0
    98ac:	65 eb       	ldi	r22, 0xB5	; 181
    98ae:	78 e0       	ldi	r23, 0x08	; 8
    98b0:	ce 01       	movw	r24, r28
    98b2:	85 59       	subi	r24, 0x95	; 149
    98b4:	9f 4f       	sbci	r25, 0xFF	; 255
    98b6:	e9 da       	rcall	.-2606   	; 0x8e8a <mem_cmp>
    98b8:	89 2b       	or	r24, r25
    98ba:	89 f0       	breq	.+34     	; 0x98de <check_fs+0x70>
    98bc:	45 e0       	ldi	r20, 0x05	; 5
    98be:	50 e0       	ldi	r21, 0x00	; 0
    98c0:	60 e1       	ldi	r22, 0x10	; 16
    98c2:	74 e0       	ldi	r23, 0x04	; 4
    98c4:	ce 01       	movw	r24, r28
    98c6:	89 57       	subi	r24, 0x79	; 121
    98c8:	9f 4f       	sbci	r25, 0xFF	; 255
    98ca:	df da       	rcall	.-2626   	; 0x8e8a <mem_cmp>
    98cc:	89 2b       	or	r24, r25
    98ce:	51 f4       	brne	.+20     	; 0x98e4 <check_fs+0x76>
    98d0:	06 c0       	rjmp	.+12     	; 0x98de <check_fs+0x70>
    98d2:	84 e0       	ldi	r24, 0x04	; 4
    98d4:	90 e0       	ldi	r25, 0x00	; 0
    98d6:	08 c0       	rjmp	.+16     	; 0x98e8 <check_fs+0x7a>
    98d8:	83 e0       	ldi	r24, 0x03	; 3
    98da:	90 e0       	ldi	r25, 0x00	; 0
    98dc:	05 c0       	rjmp	.+10     	; 0x98e8 <check_fs+0x7a>
    98de:	80 e0       	ldi	r24, 0x00	; 0
    98e0:	90 e0       	ldi	r25, 0x00	; 0
    98e2:	02 c0       	rjmp	.+4      	; 0x98e8 <check_fs+0x7a>
    98e4:	82 e0       	ldi	r24, 0x02	; 2
    98e6:	90 e0       	ldi	r25, 0x00	; 0
    98e8:	df 91       	pop	r29
    98ea:	cf 91       	pop	r28
    98ec:	08 95       	ret

000098ee <mount_volume>:
    98ee:	a0 e2       	ldi	r26, 0x20	; 32
    98f0:	b0 e0       	ldi	r27, 0x00	; 0
    98f2:	ed e7       	ldi	r30, 0x7D	; 125
    98f4:	fc e4       	ldi	r31, 0x4C	; 76
    98f6:	0c 94 d1 e2 	jmp	0x1c5a2	; 0x1c5a2 <__prologue_saves__+0x4>
    98fa:	5b 01       	movw	r10, r22
    98fc:	f4 2e       	mov	r15, r20
    98fe:	db 01       	movw	r26, r22
    9900:	1d 92       	st	X+, r1
    9902:	1c 92       	st	X, r1
    9904:	ca db       	rcall	.-2156   	; 0x909a <get_ldnumber>
    9906:	6c 01       	movw	r12, r24
    9908:	97 fd       	sbrc	r25, 7
    990a:	39 c2       	rjmp	.+1138   	; 0x9d7e <mount_volume+0x490>
    990c:	fc 01       	movw	r30, r24
    990e:	ee 0f       	add	r30, r30
    9910:	ff 1f       	adc	r31, r31
    9912:	e0 5e       	subi	r30, 0xE0	; 224
    9914:	f7 4e       	sbci	r31, 0xE7	; 231
    9916:	00 81       	ld	r16, Z
    9918:	11 81       	ldd	r17, Z+1	; 0x01
    991a:	01 15       	cp	r16, r1
    991c:	11 05       	cpc	r17, r1
    991e:	09 f4       	brne	.+2      	; 0x9922 <mount_volume+0x34>
    9920:	31 c2       	rjmp	.+1122   	; 0x9d84 <mount_volume+0x496>
    9922:	f5 01       	movw	r30, r10
    9924:	11 83       	std	Z+1, r17	; 0x01
    9926:	00 83       	st	Z, r16
    9928:	ff 2d       	mov	r31, r15
    992a:	fe 7f       	andi	r31, 0xFE	; 254
    992c:	ff 2e       	mov	r15, r31
    992e:	d8 01       	movw	r26, r16
    9930:	8c 91       	ld	r24, X
    9932:	88 23       	and	r24, r24
    9934:	71 f0       	breq	.+28     	; 0x9952 <mount_volume+0x64>
    9936:	f8 01       	movw	r30, r16
    9938:	81 81       	ldd	r24, Z+1	; 0x01
    993a:	0e 94 39 6a 	call	0xd472	; 0xd472 <disk_status>
    993e:	80 fd       	sbrc	r24, 0
    9940:	08 c0       	rjmp	.+16     	; 0x9952 <mount_volume+0x64>
    9942:	ff 20       	and	r15, r15
    9944:	09 f4       	brne	.+2      	; 0x9948 <mount_volume+0x5a>
    9946:	21 c2       	rjmp	.+1090   	; 0x9d8a <mount_volume+0x49c>
    9948:	82 ff       	sbrs	r24, 2
    994a:	1f c2       	rjmp	.+1086   	; 0x9d8a <mount_volume+0x49c>
    994c:	8a e0       	ldi	r24, 0x0A	; 10
    994e:	90 e0       	ldi	r25, 0x00	; 0
    9950:	24 c2       	rjmp	.+1096   	; 0x9d9a <mount_volume+0x4ac>
    9952:	d8 01       	movw	r26, r16
    9954:	1c 92       	st	X, r1
    9956:	f8 01       	movw	r30, r16
    9958:	c1 82       	std	Z+1, r12	; 0x01
    995a:	8c 2d       	mov	r24, r12
    995c:	0e 94 3f 6a 	call	0xd47e	; 0xd47e <disk_initialize>
    9960:	80 fd       	sbrc	r24, 0
    9962:	16 c2       	rjmp	.+1068   	; 0x9d90 <mount_volume+0x4a2>
    9964:	ff 20       	and	r15, r15
    9966:	11 f0       	breq	.+4      	; 0x996c <mount_volume+0x7e>
    9968:	82 fd       	sbrc	r24, 2
    996a:	f0 cf       	rjmp	.-32     	; 0x994c <mount_volume+0x5e>
    996c:	40 e0       	ldi	r20, 0x00	; 0
    996e:	50 e0       	ldi	r21, 0x00	; 0
    9970:	ba 01       	movw	r22, r20
    9972:	c8 01       	movw	r24, r16
    9974:	7c df       	rcall	.-264    	; 0x986e <check_fs>
    9976:	82 30       	cpi	r24, 0x02	; 2
    9978:	91 05       	cpc	r25, r1
    997a:	b9 f5       	brne	.+110    	; 0x99ea <mount_volume+0xfc>
    997c:	68 01       	movw	r12, r16
    997e:	f5 e0       	ldi	r31, 0x05	; 5
    9980:	cf 1a       	sub	r12, r31
    9982:	fe ef       	ldi	r31, 0xFE	; 254
    9984:	df 0a       	sbc	r13, r31
    9986:	9e 01       	movw	r18, r28
    9988:	2f 5f       	subi	r18, 0xFF	; 255
    998a:	3f 4f       	sbci	r19, 0xFF	; 255
    998c:	79 01       	movw	r14, r18
    998e:	48 01       	movw	r8, r16
    9990:	35 ec       	ldi	r19, 0xC5	; 197
    9992:	83 1a       	sub	r8, r19
    9994:	3d ef       	ldi	r19, 0xFD	; 253
    9996:	93 0a       	sbc	r9, r19
    9998:	57 01       	movw	r10, r14
    999a:	c6 01       	movw	r24, r12
    999c:	52 da       	rcall	.-2908   	; 0x8e42 <ld_dword>
    999e:	d5 01       	movw	r26, r10
    99a0:	6d 93       	st	X+, r22
    99a2:	7d 93       	st	X+, r23
    99a4:	8d 93       	st	X+, r24
    99a6:	9d 93       	st	X+, r25
    99a8:	5d 01       	movw	r10, r26
    99aa:	b0 e1       	ldi	r27, 0x10	; 16
    99ac:	cb 0e       	add	r12, r27
    99ae:	d1 1c       	adc	r13, r1
    99b0:	c8 14       	cp	r12, r8
    99b2:	d9 04       	cpc	r13, r9
    99b4:	91 f7       	brne	.-28     	; 0x999a <mount_volume+0xac>
    99b6:	6e 01       	movw	r12, r28
    99b8:	e1 e1       	ldi	r30, 0x11	; 17
    99ba:	ce 0e       	add	r12, r30
    99bc:	d1 1c       	adc	r13, r1
    99be:	d7 01       	movw	r26, r14
    99c0:	4d 91       	ld	r20, X+
    99c2:	5d 91       	ld	r21, X+
    99c4:	6d 91       	ld	r22, X+
    99c6:	7d 91       	ld	r23, X+
    99c8:	7d 01       	movw	r14, r26
    99ca:	41 15       	cp	r20, r1
    99cc:	51 05       	cpc	r21, r1
    99ce:	61 05       	cpc	r22, r1
    99d0:	71 05       	cpc	r23, r1
    99d2:	31 f0       	breq	.+12     	; 0x99e0 <mount_volume+0xf2>
    99d4:	c8 01       	movw	r24, r16
    99d6:	4b df       	rcall	.-362    	; 0x986e <check_fs>
    99d8:	82 30       	cpi	r24, 0x02	; 2
    99da:	91 05       	cpc	r25, r1
    99dc:	18 f4       	brcc	.+6      	; 0x99e4 <mount_volume+0xf6>
    99de:	05 c0       	rjmp	.+10     	; 0x99ea <mount_volume+0xfc>
    99e0:	83 e0       	ldi	r24, 0x03	; 3
    99e2:	90 e0       	ldi	r25, 0x00	; 0
    99e4:	ce 14       	cp	r12, r14
    99e6:	df 04       	cpc	r13, r15
    99e8:	51 f7       	brne	.-44     	; 0x99be <mount_volume+0xd0>
    99ea:	84 30       	cpi	r24, 0x04	; 4
    99ec:	91 05       	cpc	r25, r1
    99ee:	09 f4       	brne	.+2      	; 0x99f2 <mount_volume+0x104>
    99f0:	d2 c1       	rjmp	.+932    	; 0x9d96 <mount_volume+0x4a8>
    99f2:	02 97       	sbiw	r24, 0x02	; 2
    99f4:	18 f0       	brcs	.+6      	; 0x99fc <mount_volume+0x10e>
    99f6:	8d e0       	ldi	r24, 0x0D	; 13
    99f8:	90 e0       	ldi	r25, 0x00	; 0
    99fa:	cf c1       	rjmp	.+926    	; 0x9d9a <mount_volume+0x4ac>
    99fc:	f8 01       	movw	r30, r16
    99fe:	e0 5c       	subi	r30, 0xC0	; 192
    9a00:	ff 4f       	sbci	r31, 0xFF	; 255
    9a02:	80 81       	ld	r24, Z
    9a04:	91 81       	ldd	r25, Z+1	; 0x01
    9a06:	81 15       	cp	r24, r1
    9a08:	92 40       	sbci	r25, 0x02	; 2
    9a0a:	a9 f7       	brne	.-22     	; 0x99f6 <mount_volume+0x108>
    9a0c:	3b 96       	adiw	r30, 0x0b	; 11
    9a0e:	40 80       	ld	r4, Z
    9a10:	51 80       	ldd	r5, Z+1	; 0x01
    9a12:	41 14       	cp	r4, r1
    9a14:	51 04       	cpc	r5, r1
    9a16:	19 f0       	breq	.+6      	; 0x9a1e <mount_volume+0x130>
    9a18:	61 2c       	mov	r6, r1
    9a1a:	71 2c       	mov	r7, r1
    9a1c:	06 c0       	rjmp	.+12     	; 0x9a2a <mount_volume+0x13c>
    9a1e:	c8 01       	movw	r24, r16
    9a20:	87 5a       	subi	r24, 0xA7	; 167
    9a22:	9f 4f       	sbci	r25, 0xFF	; 255
    9a24:	0e da       	rcall	.-3044   	; 0x8e42 <ld_dword>
    9a26:	2b 01       	movw	r4, r22
    9a28:	3c 01       	movw	r6, r24
    9a2a:	f8 01       	movw	r30, r16
    9a2c:	21 a9       	ldd	r18, Z+49	; 0x31
    9a2e:	32 a9       	ldd	r19, Z+50	; 0x32
    9a30:	43 a9       	ldd	r20, Z+51	; 0x33
    9a32:	54 a9       	ldd	r21, Z+52	; 0x34
    9a34:	29 8b       	std	Y+17, r18	; 0x11
    9a36:	3a 8b       	std	Y+18, r19	; 0x12
    9a38:	4b 8b       	std	Y+19, r20	; 0x13
    9a3a:	5c 8b       	std	Y+20, r21	; 0x14
    9a3c:	45 8e       	std	Z+29, r4	; 0x1d
    9a3e:	56 8e       	std	Z+30, r5	; 0x1e
    9a40:	67 8e       	std	Z+31, r6	; 0x1f
    9a42:	70 a2       	std	Z+32, r7	; 0x20
    9a44:	eb 5b       	subi	r30, 0xBB	; 187
    9a46:	ff 4f       	sbci	r31, 0xFF	; 255
    9a48:	a0 80       	ld	r10, Z
    9a4a:	f8 01       	movw	r30, r16
    9a4c:	a2 82       	std	Z+2, r10	; 0x02
    9a4e:	8f ef       	ldi	r24, 0xFF	; 255
    9a50:	8a 0d       	add	r24, r10
    9a52:	82 30       	cpi	r24, 0x02	; 2
    9a54:	80 f6       	brcc	.-96     	; 0x99f6 <mount_volume+0x108>
    9a56:	ee 5b       	subi	r30, 0xBE	; 190
    9a58:	ff 4f       	sbci	r31, 0xFF	; 255
    9a5a:	b0 80       	ld	r11, Z
    9a5c:	8b 2d       	mov	r24, r11
    9a5e:	90 e0       	ldi	r25, 0x00	; 0
    9a60:	f8 01       	movw	r30, r16
    9a62:	92 87       	std	Z+10, r25	; 0x0a
    9a64:	81 87       	std	Z+9, r24	; 0x09
    9a66:	00 97       	sbiw	r24, 0x00	; 0
    9a68:	31 f2       	breq	.-116    	; 0x99f6 <mount_volume+0x108>
    9a6a:	9c 01       	movw	r18, r24
    9a6c:	21 50       	subi	r18, 0x01	; 1
    9a6e:	31 09       	sbc	r19, r1
    9a70:	82 23       	and	r24, r18
    9a72:	93 23       	and	r25, r19
    9a74:	89 2b       	or	r24, r25
    9a76:	09 f0       	breq	.+2      	; 0x9a7a <mount_volume+0x18c>
    9a78:	be cf       	rjmp	.-132    	; 0x99f6 <mount_volume+0x108>
    9a7a:	ea 5b       	subi	r30, 0xBA	; 186
    9a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    9a7e:	80 80       	ld	r8, Z
    9a80:	91 80       	ldd	r9, Z+1	; 0x01
    9a82:	f8 01       	movw	r30, r16
    9a84:	90 86       	std	Z+8, r9	; 0x08
    9a86:	87 82       	std	Z+7, r8	; 0x07
    9a88:	c4 01       	movw	r24, r8
    9a8a:	8f 70       	andi	r24, 0x0F	; 15
    9a8c:	99 27       	eor	r25, r25
    9a8e:	89 2b       	or	r24, r25
    9a90:	09 f0       	breq	.+2      	; 0x9a94 <mount_volume+0x1a6>
    9a92:	b1 cf       	rjmp	.-158    	; 0x99f6 <mount_volume+0x108>
    9a94:	e8 5b       	subi	r30, 0xB8	; 184
    9a96:	ff 4f       	sbci	r31, 0xFF	; 255
    9a98:	80 81       	ld	r24, Z
    9a9a:	91 81       	ldd	r25, Z+1	; 0x01
    9a9c:	6c 01       	movw	r12, r24
    9a9e:	e1 2c       	mov	r14, r1
    9aa0:	f1 2c       	mov	r15, r1
    9aa2:	89 2b       	or	r24, r25
    9aa4:	31 f4       	brne	.+12     	; 0x9ab2 <mount_volume+0x1c4>
    9aa6:	c8 01       	movw	r24, r16
    9aa8:	8b 5a       	subi	r24, 0xAB	; 171
    9aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    9aac:	ca d9       	rcall	.-3180   	; 0x8e42 <ld_dword>
    9aae:	6b 01       	movw	r12, r22
    9ab0:	7c 01       	movw	r14, r24
    9ab2:	f8 01       	movw	r30, r16
    9ab4:	ed 5b       	subi	r30, 0xBD	; 189
    9ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    9ab8:	01 90       	ld	r0, Z+
    9aba:	f0 81       	ld	r31, Z
    9abc:	e0 2d       	mov	r30, r0
    9abe:	30 97       	sbiw	r30, 0x00	; 0
    9ac0:	09 f4       	brne	.+2      	; 0x9ac4 <mount_volume+0x1d6>
    9ac2:	99 cf       	rjmp	.-206    	; 0x99f6 <mount_volume+0x108>
    9ac4:	aa 2d       	mov	r26, r10
    9ac6:	b0 e0       	ldi	r27, 0x00	; 0
    9ac8:	a3 01       	movw	r20, r6
    9aca:	92 01       	movw	r18, r4
    9acc:	0e 94 af e2 	call	0x1c55e	; 0x1c55e <__muluhisi3>
    9ad0:	69 8f       	std	Y+25, r22	; 0x19
    9ad2:	7a 8f       	std	Y+26, r23	; 0x1a
    9ad4:	8b 8f       	std	Y+27, r24	; 0x1b
    9ad6:	9c 8f       	std	Y+28, r25	; 0x1c
    9ad8:	9f 01       	movw	r18, r30
    9ada:	40 e0       	ldi	r20, 0x00	; 0
    9adc:	50 e0       	ldi	r21, 0x00	; 0
    9ade:	2d 8f       	std	Y+29, r18	; 0x1d
    9ae0:	3e 8f       	std	Y+30, r19	; 0x1e
    9ae2:	4f 8f       	std	Y+31, r20	; 0x1f
    9ae4:	58 a3       	std	Y+32, r21	; 0x20
    9ae6:	c4 01       	movw	r24, r8
    9ae8:	f4 e0       	ldi	r31, 0x04	; 4
    9aea:	96 95       	lsr	r25
    9aec:	87 95       	ror	r24
    9aee:	fa 95       	dec	r31
    9af0:	e1 f7       	brne	.-8      	; 0x9aea <mount_volume+0x1fc>
    9af2:	28 0f       	add	r18, r24
    9af4:	39 1f       	adc	r19, r25
    9af6:	41 1d       	adc	r20, r1
    9af8:	51 1d       	adc	r21, r1
    9afa:	da 01       	movw	r26, r20
    9afc:	c9 01       	movw	r24, r18
    9afe:	29 8d       	ldd	r18, Y+25	; 0x19
    9b00:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9b02:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9b04:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9b06:	28 0f       	add	r18, r24
    9b08:	39 1f       	adc	r19, r25
    9b0a:	4a 1f       	adc	r20, r26
    9b0c:	5b 1f       	adc	r21, r27
    9b0e:	2d 8b       	std	Y+21, r18	; 0x15
    9b10:	3e 8b       	std	Y+22, r19	; 0x16
    9b12:	4f 8b       	std	Y+23, r20	; 0x17
    9b14:	58 8f       	std	Y+24, r21	; 0x18
    9b16:	c2 16       	cp	r12, r18
    9b18:	d3 06       	cpc	r13, r19
    9b1a:	e4 06       	cpc	r14, r20
    9b1c:	f5 06       	cpc	r15, r21
    9b1e:	08 f4       	brcc	.+2      	; 0x9b22 <mount_volume+0x234>
    9b20:	6a cf       	rjmp	.-300    	; 0x99f6 <mount_volume+0x108>
    9b22:	c7 01       	movw	r24, r14
    9b24:	b6 01       	movw	r22, r12
    9b26:	62 1b       	sub	r22, r18
    9b28:	73 0b       	sbc	r23, r19
    9b2a:	84 0b       	sbc	r24, r20
    9b2c:	95 0b       	sbc	r25, r21
    9b2e:	2b 2d       	mov	r18, r11
    9b30:	30 e0       	ldi	r19, 0x00	; 0
    9b32:	40 e0       	ldi	r20, 0x00	; 0
    9b34:	50 e0       	ldi	r21, 0x00	; 0
    9b36:	0e 94 62 e2 	call	0x1c4c4	; 0x1c4c4 <__udivmodsi4>
    9b3a:	da 01       	movw	r26, r20
    9b3c:	c9 01       	movw	r24, r18
    9b3e:	01 97       	sbiw	r24, 0x01	; 1
    9b40:	a1 09       	sbc	r26, r1
    9b42:	b1 09       	sbc	r27, r1
    9b44:	85 3f       	cpi	r24, 0xF5	; 245
    9b46:	9f 4f       	sbci	r25, 0xFF	; 255
    9b48:	af 4f       	sbci	r26, 0xFF	; 255
    9b4a:	bf 40       	sbci	r27, 0x0F	; 15
    9b4c:	08 f0       	brcs	.+2      	; 0x9b50 <mount_volume+0x262>
    9b4e:	53 cf       	rjmp	.-346    	; 0x99f6 <mount_volume+0x108>
    9b50:	26 3f       	cpi	r18, 0xF6	; 246
    9b52:	8f ef       	ldi	r24, 0xFF	; 255
    9b54:	38 07       	cpc	r19, r24
    9b56:	41 05       	cpc	r20, r1
    9b58:	51 05       	cpc	r21, r1
    9b5a:	50 f4       	brcc	.+20     	; 0x9b70 <mount_volume+0x282>
    9b5c:	26 3f       	cpi	r18, 0xF6	; 246
    9b5e:	9f e0       	ldi	r25, 0x0F	; 15
    9b60:	39 07       	cpc	r19, r25
    9b62:	41 05       	cpc	r20, r1
    9b64:	51 05       	cpc	r21, r1
    9b66:	40 f4       	brcc	.+16     	; 0x9b78 <mount_volume+0x28a>
    9b68:	aa 24       	eor	r10, r10
    9b6a:	a3 94       	inc	r10
    9b6c:	b1 2c       	mov	r11, r1
    9b6e:	07 c0       	rjmp	.+14     	; 0x9b7e <mount_volume+0x290>
    9b70:	73 e0       	ldi	r23, 0x03	; 3
    9b72:	a7 2e       	mov	r10, r23
    9b74:	b1 2c       	mov	r11, r1
    9b76:	03 c0       	rjmp	.+6      	; 0x9b7e <mount_volume+0x290>
    9b78:	62 e0       	ldi	r22, 0x02	; 2
    9b7a:	a6 2e       	mov	r10, r22
    9b7c:	b1 2c       	mov	r11, r1
    9b7e:	69 01       	movw	r12, r18
    9b80:	7a 01       	movw	r14, r20
    9b82:	a2 e0       	ldi	r26, 0x02	; 2
    9b84:	ca 0e       	add	r12, r26
    9b86:	d1 1c       	adc	r13, r1
    9b88:	e1 1c       	adc	r14, r1
    9b8a:	f1 1c       	adc	r15, r1
    9b8c:	f8 01       	movw	r30, r16
    9b8e:	c1 8e       	std	Z+25, r12	; 0x19
    9b90:	d2 8e       	std	Z+26, r13	; 0x1a
    9b92:	e3 8e       	std	Z+27, r14	; 0x1b
    9b94:	f4 8e       	std	Z+28, r15	; 0x1c
    9b96:	29 89       	ldd	r18, Y+17	; 0x11
    9b98:	3a 89       	ldd	r19, Y+18	; 0x12
    9b9a:	4b 89       	ldd	r20, Y+19	; 0x13
    9b9c:	5c 89       	ldd	r21, Y+20	; 0x14
    9b9e:	21 a3       	std	Z+33, r18	; 0x21
    9ba0:	32 a3       	std	Z+34, r19	; 0x22
    9ba2:	43 a3       	std	Z+35, r20	; 0x23
    9ba4:	54 a3       	std	Z+36, r21	; 0x24
    9ba6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9ba8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9baa:	af 8d       	ldd	r26, Y+31	; 0x1f
    9bac:	b8 a1       	ldd	r27, Y+32	; 0x20
    9bae:	28 0f       	add	r18, r24
    9bb0:	39 1f       	adc	r19, r25
    9bb2:	4a 1f       	adc	r20, r26
    9bb4:	5b 1f       	adc	r21, r27
    9bb6:	2d 8f       	std	Y+29, r18	; 0x1d
    9bb8:	3e 8f       	std	Y+30, r19	; 0x1e
    9bba:	4f 8f       	std	Y+31, r20	; 0x1f
    9bbc:	58 a3       	std	Y+32, r21	; 0x20
    9bbe:	25 a3       	std	Z+37, r18	; 0x25
    9bc0:	36 a3       	std	Z+38, r19	; 0x26
    9bc2:	47 a3       	std	Z+39, r20	; 0x27
    9bc4:	50 a7       	std	Z+40, r21	; 0x28
    9bc6:	49 89       	ldd	r20, Y+17	; 0x11
    9bc8:	5a 89       	ldd	r21, Y+18	; 0x12
    9bca:	6b 89       	ldd	r22, Y+19	; 0x13
    9bcc:	7c 89       	ldd	r23, Y+20	; 0x14
    9bce:	8d 89       	ldd	r24, Y+21	; 0x15
    9bd0:	9e 89       	ldd	r25, Y+22	; 0x16
    9bd2:	af 89       	ldd	r26, Y+23	; 0x17
    9bd4:	b8 8d       	ldd	r27, Y+24	; 0x18
    9bd6:	48 0f       	add	r20, r24
    9bd8:	59 1f       	adc	r21, r25
    9bda:	6a 1f       	adc	r22, r26
    9bdc:	7b 1f       	adc	r23, r27
    9bde:	45 a7       	std	Z+45, r20	; 0x2d
    9be0:	56 a7       	std	Z+46, r21	; 0x2e
    9be2:	67 a7       	std	Z+47, r22	; 0x2f
    9be4:	70 ab       	std	Z+48, r23	; 0x30
    9be6:	f3 e0       	ldi	r31, 0x03	; 3
    9be8:	af 16       	cp	r10, r31
    9bea:	b1 04       	cpc	r11, r1
    9bec:	e9 f4       	brne	.+58     	; 0x9c28 <mount_volume+0x33a>
    9bee:	f8 01       	movw	r30, r16
    9bf0:	e1 5a       	subi	r30, 0xA1	; 161
    9bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    9bf4:	80 81       	ld	r24, Z
    9bf6:	91 81       	ldd	r25, Z+1	; 0x01
    9bf8:	89 2b       	or	r24, r25
    9bfa:	09 f0       	breq	.+2      	; 0x9bfe <mount_volume+0x310>
    9bfc:	fc ce       	rjmp	.-520    	; 0x99f6 <mount_volume+0x108>
    9bfe:	81 14       	cp	r8, r1
    9c00:	91 04       	cpc	r9, r1
    9c02:	09 f0       	breq	.+2      	; 0x9c06 <mount_volume+0x318>
    9c04:	f8 ce       	rjmp	.-528    	; 0x99f6 <mount_volume+0x108>
    9c06:	c8 01       	movw	r24, r16
    9c08:	8f 59       	subi	r24, 0x9F	; 159
    9c0a:	9f 4f       	sbci	r25, 0xFF	; 255
    9c0c:	1a d9       	rcall	.-3532   	; 0x8e42 <ld_dword>
    9c0e:	f8 01       	movw	r30, r16
    9c10:	61 a7       	std	Z+41, r22	; 0x29
    9c12:	72 a7       	std	Z+42, r23	; 0x2a
    9c14:	83 a7       	std	Z+43, r24	; 0x2b
    9c16:	94 a7       	std	Z+44, r25	; 0x2c
    9c18:	42 e0       	ldi	r20, 0x02	; 2
    9c1a:	cc 0c       	add	r12, r12
    9c1c:	dd 1c       	adc	r13, r13
    9c1e:	ee 1c       	adc	r14, r14
    9c20:	ff 1c       	adc	r15, r15
    9c22:	4a 95       	dec	r20
    9c24:	d1 f7       	brne	.-12     	; 0x9c1a <mount_volume+0x32c>
    9c26:	33 c0       	rjmp	.+102    	; 0x9c8e <mount_volume+0x3a0>
    9c28:	81 14       	cp	r8, r1
    9c2a:	91 04       	cpc	r9, r1
    9c2c:	09 f4       	brne	.+2      	; 0x9c30 <mount_volume+0x342>
    9c2e:	e3 ce       	rjmp	.-570    	; 0x99f6 <mount_volume+0x108>
    9c30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9c32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9c34:	af 8d       	ldd	r26, Y+31	; 0x1f
    9c36:	b8 a1       	ldd	r27, Y+32	; 0x20
    9c38:	29 8d       	ldd	r18, Y+25	; 0x19
    9c3a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9c3c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9c3e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9c40:	82 0f       	add	r24, r18
    9c42:	93 1f       	adc	r25, r19
    9c44:	a4 1f       	adc	r26, r20
    9c46:	b5 1f       	adc	r27, r21
    9c48:	f8 01       	movw	r30, r16
    9c4a:	81 a7       	std	Z+41, r24	; 0x29
    9c4c:	92 a7       	std	Z+42, r25	; 0x2a
    9c4e:	a3 a7       	std	Z+43, r26	; 0x2b
    9c50:	b4 a7       	std	Z+44, r27	; 0x2c
    9c52:	f2 e0       	ldi	r31, 0x02	; 2
    9c54:	af 16       	cp	r10, r31
    9c56:	b1 04       	cpc	r11, r1
    9c58:	29 f4       	brne	.+10     	; 0x9c64 <mount_volume+0x376>
    9c5a:	cc 0c       	add	r12, r12
    9c5c:	dd 1c       	adc	r13, r13
    9c5e:	ee 1c       	adc	r14, r14
    9c60:	ff 1c       	adc	r15, r15
    9c62:	15 c0       	rjmp	.+42     	; 0x9c8e <mount_volume+0x3a0>
    9c64:	a3 e0       	ldi	r26, 0x03	; 3
    9c66:	b0 e0       	ldi	r27, 0x00	; 0
    9c68:	a7 01       	movw	r20, r14
    9c6a:	96 01       	movw	r18, r12
    9c6c:	0e 94 af e2 	call	0x1c55e	; 0x1c55e <__muluhisi3>
    9c70:	dc 01       	movw	r26, r24
    9c72:	cb 01       	movw	r24, r22
    9c74:	b6 95       	lsr	r27
    9c76:	a7 95       	ror	r26
    9c78:	97 95       	ror	r25
    9c7a:	87 95       	ror	r24
    9c7c:	21 e0       	ldi	r18, 0x01	; 1
    9c7e:	c2 22       	and	r12, r18
    9c80:	dd 24       	eor	r13, r13
    9c82:	ee 24       	eor	r14, r14
    9c84:	ff 24       	eor	r15, r15
    9c86:	c8 0e       	add	r12, r24
    9c88:	d9 1e       	adc	r13, r25
    9c8a:	ea 1e       	adc	r14, r26
    9c8c:	fb 1e       	adc	r15, r27
    9c8e:	3f ef       	ldi	r19, 0xFF	; 255
    9c90:	c3 0e       	add	r12, r19
    9c92:	31 e0       	ldi	r19, 0x01	; 1
    9c94:	d3 1e       	adc	r13, r19
    9c96:	e1 1c       	adc	r14, r1
    9c98:	f1 1c       	adc	r15, r1
    9c9a:	89 e0       	ldi	r24, 0x09	; 9
    9c9c:	f6 94       	lsr	r15
    9c9e:	e7 94       	ror	r14
    9ca0:	d7 94       	ror	r13
    9ca2:	c7 94       	ror	r12
    9ca4:	8a 95       	dec	r24
    9ca6:	d1 f7       	brne	.-12     	; 0x9c9c <mount_volume+0x3ae>
    9ca8:	4c 14       	cp	r4, r12
    9caa:	5d 04       	cpc	r5, r13
    9cac:	6e 04       	cpc	r6, r14
    9cae:	7f 04       	cpc	r7, r15
    9cb0:	08 f4       	brcc	.+2      	; 0x9cb4 <mount_volume+0x3c6>
    9cb2:	a1 ce       	rjmp	.-702    	; 0x99f6 <mount_volume+0x108>
    9cb4:	8f ef       	ldi	r24, 0xFF	; 255
    9cb6:	9f ef       	ldi	r25, 0xFF	; 255
    9cb8:	dc 01       	movw	r26, r24
    9cba:	f8 01       	movw	r30, r16
    9cbc:	81 8b       	std	Z+17, r24	; 0x11
    9cbe:	92 8b       	std	Z+18, r25	; 0x12
    9cc0:	a3 8b       	std	Z+19, r26	; 0x13
    9cc2:	b4 8b       	std	Z+20, r27	; 0x14
    9cc4:	85 87       	std	Z+13, r24	; 0x0d
    9cc6:	96 87       	std	Z+14, r25	; 0x0e
    9cc8:	a7 87       	std	Z+15, r26	; 0x0f
    9cca:	b0 8b       	std	Z+16, r27	; 0x10
    9ccc:	80 e8       	ldi	r24, 0x80	; 128
    9cce:	84 83       	std	Z+4, r24	; 0x04
    9cd0:	f3 e0       	ldi	r31, 0x03	; 3
    9cd2:	af 16       	cp	r10, r31
    9cd4:	b1 04       	cpc	r11, r1
    9cd6:	09 f0       	breq	.+2      	; 0x9cda <mount_volume+0x3ec>
    9cd8:	3f c0       	rjmp	.+126    	; 0x9d58 <mount_volume+0x46a>
    9cda:	f8 01       	movw	r30, r16
    9cdc:	eb 59       	subi	r30, 0x9B	; 155
    9cde:	ff 4f       	sbci	r31, 0xFF	; 255
    9ce0:	80 81       	ld	r24, Z
    9ce2:	91 81       	ldd	r25, Z+1	; 0x01
    9ce4:	01 97       	sbiw	r24, 0x01	; 1
    9ce6:	c1 f5       	brne	.+112    	; 0x9d58 <mount_volume+0x46a>
    9ce8:	49 89       	ldd	r20, Y+17	; 0x11
    9cea:	5a 89       	ldd	r21, Y+18	; 0x12
    9cec:	6b 89       	ldd	r22, Y+19	; 0x13
    9cee:	7c 89       	ldd	r23, Y+20	; 0x14
    9cf0:	4f 5f       	subi	r20, 0xFF	; 255
    9cf2:	5f 4f       	sbci	r21, 0xFF	; 255
    9cf4:	6f 4f       	sbci	r22, 0xFF	; 255
    9cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    9cf8:	c8 01       	movw	r24, r16
    9cfa:	7e dd       	rcall	.-1284   	; 0x97f8 <move_window>
    9cfc:	89 2b       	or	r24, r25
    9cfe:	61 f5       	brne	.+88     	; 0x9d58 <mount_volume+0x46a>
    9d00:	f8 01       	movw	r30, r16
    9d02:	14 82       	std	Z+4, r1	; 0x04
    9d04:	ed 5c       	subi	r30, 0xCD	; 205
    9d06:	fd 4f       	sbci	r31, 0xFD	; 253
    9d08:	80 81       	ld	r24, Z
    9d0a:	91 81       	ldd	r25, Z+1	; 0x01
    9d0c:	85 35       	cpi	r24, 0x55	; 85
    9d0e:	9a 4a       	sbci	r25, 0xAA	; 170
    9d10:	19 f5       	brne	.+70     	; 0x9d58 <mount_volume+0x46a>
    9d12:	c8 01       	movw	r24, r16
    9d14:	c5 96       	adiw	r24, 0x35	; 53
    9d16:	95 d8       	rcall	.-3798   	; 0x8e42 <ld_dword>
    9d18:	62 35       	cpi	r22, 0x52	; 82
    9d1a:	72 45       	sbci	r23, 0x52	; 82
    9d1c:	81 46       	sbci	r24, 0x61	; 97
    9d1e:	91 44       	sbci	r25, 0x41	; 65
    9d20:	d9 f4       	brne	.+54     	; 0x9d58 <mount_volume+0x46a>
    9d22:	c8 01       	movw	r24, r16
    9d24:	87 5e       	subi	r24, 0xE7	; 231
    9d26:	9d 4f       	sbci	r25, 0xFD	; 253
    9d28:	8c d8       	rcall	.-3816   	; 0x8e42 <ld_dword>
    9d2a:	62 37       	cpi	r22, 0x72	; 114
    9d2c:	72 47       	sbci	r23, 0x72	; 114
    9d2e:	81 44       	sbci	r24, 0x41	; 65
    9d30:	91 46       	sbci	r25, 0x61	; 97
    9d32:	91 f4       	brne	.+36     	; 0x9d58 <mount_volume+0x46a>
    9d34:	c8 01       	movw	r24, r16
    9d36:	83 5e       	subi	r24, 0xE3	; 227
    9d38:	9d 4f       	sbci	r25, 0xFD	; 253
    9d3a:	83 d8       	rcall	.-3834   	; 0x8e42 <ld_dword>
    9d3c:	f8 01       	movw	r30, r16
    9d3e:	61 8b       	std	Z+17, r22	; 0x11
    9d40:	72 8b       	std	Z+18, r23	; 0x12
    9d42:	83 8b       	std	Z+19, r24	; 0x13
    9d44:	94 8b       	std	Z+20, r25	; 0x14
    9d46:	c8 01       	movw	r24, r16
    9d48:	8f 5d       	subi	r24, 0xDF	; 223
    9d4a:	9d 4f       	sbci	r25, 0xFD	; 253
    9d4c:	7a d8       	rcall	.-3852   	; 0x8e42 <ld_dword>
    9d4e:	f8 01       	movw	r30, r16
    9d50:	65 87       	std	Z+13, r22	; 0x0d
    9d52:	76 87       	std	Z+14, r23	; 0x0e
    9d54:	87 87       	std	Z+15, r24	; 0x0f
    9d56:	90 8b       	std	Z+16, r25	; 0x10
    9d58:	d8 01       	movw	r26, r16
    9d5a:	ac 92       	st	X, r10
    9d5c:	80 91 1e 18 	lds	r24, 0x181E	; 0x80181e <Fsid>
    9d60:	90 91 1f 18 	lds	r25, 0x181F	; 0x80181f <Fsid+0x1>
    9d64:	01 96       	adiw	r24, 0x01	; 1
    9d66:	90 93 1f 18 	sts	0x181F, r25	; 0x80181f <Fsid+0x1>
    9d6a:	80 93 1e 18 	sts	0x181E, r24	; 0x80181e <Fsid>
    9d6e:	f8 01       	movw	r30, r16
    9d70:	96 83       	std	Z+6, r25	; 0x06
    9d72:	85 83       	std	Z+5, r24	; 0x05
    9d74:	15 8a       	std	Z+21, r1	; 0x15
    9d76:	16 8a       	std	Z+22, r1	; 0x16
    9d78:	17 8a       	std	Z+23, r1	; 0x17
    9d7a:	10 8e       	std	Z+24, r1	; 0x18
    9d7c:	06 c0       	rjmp	.+12     	; 0x9d8a <mount_volume+0x49c>
    9d7e:	8b e0       	ldi	r24, 0x0B	; 11
    9d80:	90 e0       	ldi	r25, 0x00	; 0
    9d82:	0b c0       	rjmp	.+22     	; 0x9d9a <mount_volume+0x4ac>
    9d84:	8c e0       	ldi	r24, 0x0C	; 12
    9d86:	90 e0       	ldi	r25, 0x00	; 0
    9d88:	08 c0       	rjmp	.+16     	; 0x9d9a <mount_volume+0x4ac>
    9d8a:	80 e0       	ldi	r24, 0x00	; 0
    9d8c:	90 e0       	ldi	r25, 0x00	; 0
    9d8e:	05 c0       	rjmp	.+10     	; 0x9d9a <mount_volume+0x4ac>
    9d90:	83 e0       	ldi	r24, 0x03	; 3
    9d92:	90 e0       	ldi	r25, 0x00	; 0
    9d94:	02 c0       	rjmp	.+4      	; 0x9d9a <mount_volume+0x4ac>
    9d96:	81 e0       	ldi	r24, 0x01	; 1
    9d98:	90 e0       	ldi	r25, 0x00	; 0
    9d9a:	a0 96       	adiw	r28, 0x20	; 32
    9d9c:	e0 e1       	ldi	r30, 0x10	; 16
    9d9e:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__epilogue_restores__+0x4>

00009da2 <put_fat>:
    9da2:	a6 e0       	ldi	r26, 0x06	; 6
    9da4:	b0 e0       	ldi	r27, 0x00	; 0
    9da6:	e7 ed       	ldi	r30, 0xD7	; 215
    9da8:	fe e4       	ldi	r31, 0x4E	; 78
    9daa:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
    9dae:	42 30       	cpi	r20, 0x02	; 2
    9db0:	51 05       	cpc	r21, r1
    9db2:	61 05       	cpc	r22, r1
    9db4:	71 05       	cpc	r23, r1
    9db6:	08 f4       	brcc	.+2      	; 0x9dba <put_fat+0x18>
    9db8:	e7 c0       	rjmp	.+462    	; 0x9f88 <put_fat+0x1e6>
    9dba:	fc 01       	movw	r30, r24
    9dbc:	c1 8c       	ldd	r12, Z+25	; 0x19
    9dbe:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9dc0:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9dc2:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9dc4:	4c 15       	cp	r20, r12
    9dc6:	5d 05       	cpc	r21, r13
    9dc8:	6e 05       	cpc	r22, r14
    9dca:	7f 05       	cpc	r23, r15
    9dcc:	08 f0       	brcs	.+2      	; 0x9dd0 <put_fat+0x2e>
    9dce:	dc c0       	rjmp	.+440    	; 0x9f88 <put_fat+0x1e6>
    9dd0:	28 01       	movw	r4, r16
    9dd2:	39 01       	movw	r6, r18
    9dd4:	6a 01       	movw	r12, r20
    9dd6:	7b 01       	movw	r14, r22
    9dd8:	9e 83       	std	Y+6, r25	; 0x06
    9dda:	8d 83       	std	Y+5, r24	; 0x05
    9ddc:	80 81       	ld	r24, Z
    9dde:	82 30       	cpi	r24, 0x02	; 2
    9de0:	09 f4       	brne	.+2      	; 0x9de4 <put_fat+0x42>
    9de2:	73 c0       	rjmp	.+230    	; 0x9eca <put_fat+0x128>
    9de4:	83 30       	cpi	r24, 0x03	; 3
    9de6:	09 f4       	brne	.+2      	; 0x9dea <put_fat+0x48>
    9de8:	92 c0       	rjmp	.+292    	; 0x9f0e <put_fat+0x16c>
    9dea:	81 30       	cpi	r24, 0x01	; 1
    9dec:	09 f0       	breq	.+2      	; 0x9df0 <put_fat+0x4e>
    9dee:	cc c0       	rjmp	.+408    	; 0x9f88 <put_fat+0x1e6>
    9df0:	4a 01       	movw	r8, r20
    9df2:	96 94       	lsr	r9
    9df4:	87 94       	ror	r8
    9df6:	84 0e       	add	r8, r20
    9df8:	95 1e       	adc	r9, r21
    9dfa:	c4 01       	movw	r24, r8
    9dfc:	89 2f       	mov	r24, r25
    9dfe:	99 27       	eor	r25, r25
    9e00:	86 95       	lsr	r24
    9e02:	45 a1       	ldd	r20, Z+37	; 0x25
    9e04:	56 a1       	ldd	r21, Z+38	; 0x26
    9e06:	67 a1       	ldd	r22, Z+39	; 0x27
    9e08:	70 a5       	ldd	r23, Z+40	; 0x28
    9e0a:	48 0f       	add	r20, r24
    9e0c:	59 1f       	adc	r21, r25
    9e0e:	61 1d       	adc	r22, r1
    9e10:	71 1d       	adc	r23, r1
    9e12:	cf 01       	movw	r24, r30
    9e14:	f1 dc       	rcall	.-1566   	; 0x97f8 <move_window>
    9e16:	5c 01       	movw	r10, r24
    9e18:	89 2b       	or	r24, r25
    9e1a:	09 f0       	breq	.+2      	; 0x9e1e <put_fat+0x7c>
    9e1c:	b8 c0       	rjmp	.+368    	; 0x9f8e <put_fat+0x1ec>
    9e1e:	2d 80       	ldd	r2, Y+5	; 0x05
    9e20:	3e 80       	ldd	r3, Y+6	; 0x06
    9e22:	f5 e3       	ldi	r31, 0x35	; 53
    9e24:	2f 0e       	add	r2, r31
    9e26:	31 1c       	adc	r3, r1
    9e28:	84 01       	movw	r16, r8
    9e2a:	0f 5f       	subi	r16, 0xFF	; 255
    9e2c:	1f 4f       	sbci	r17, 0xFF	; 255
    9e2e:	21 e0       	ldi	r18, 0x01	; 1
    9e30:	92 22       	and	r9, r18
    9e32:	f1 01       	movw	r30, r2
    9e34:	e8 0d       	add	r30, r8
    9e36:	f9 1d       	adc	r31, r9
    9e38:	d7 01       	movw	r26, r14
    9e3a:	c6 01       	movw	r24, r12
    9e3c:	81 70       	andi	r24, 0x01	; 1
    9e3e:	99 27       	eor	r25, r25
    9e40:	aa 27       	eor	r26, r26
    9e42:	bb 27       	eor	r27, r27
    9e44:	89 83       	std	Y+1, r24	; 0x01
    9e46:	9a 83       	std	Y+2, r25	; 0x02
    9e48:	ab 83       	std	Y+3, r26	; 0x03
    9e4a:	bc 83       	std	Y+4, r27	; 0x04
    9e4c:	c0 fe       	sbrs	r12, 0
    9e4e:	09 c0       	rjmp	.+18     	; 0x9e62 <put_fat+0xc0>
    9e50:	80 81       	ld	r24, Z
    9e52:	28 2f       	mov	r18, r24
    9e54:	2f 70       	andi	r18, 0x0F	; 15
    9e56:	a0 e1       	ldi	r26, 0x10	; 16
    9e58:	4a 9e       	mul	r4, r26
    9e5a:	c0 01       	movw	r24, r0
    9e5c:	11 24       	eor	r1, r1
    9e5e:	82 2b       	or	r24, r18
    9e60:	01 c0       	rjmp	.+2      	; 0x9e64 <put_fat+0xc2>
    9e62:	84 2d       	mov	r24, r4
    9e64:	80 83       	st	Z, r24
    9e66:	81 e0       	ldi	r24, 0x01	; 1
    9e68:	ed 81       	ldd	r30, Y+5	; 0x05
    9e6a:	fe 81       	ldd	r31, Y+6	; 0x06
    9e6c:	83 83       	std	Z+3, r24	; 0x03
    9e6e:	45 a1       	ldd	r20, Z+37	; 0x25
    9e70:	56 a1       	ldd	r21, Z+38	; 0x26
    9e72:	67 a1       	ldd	r22, Z+39	; 0x27
    9e74:	70 a5       	ldd	r23, Z+40	; 0x28
    9e76:	c8 01       	movw	r24, r16
    9e78:	89 2f       	mov	r24, r25
    9e7a:	99 27       	eor	r25, r25
    9e7c:	86 95       	lsr	r24
    9e7e:	48 0f       	add	r20, r24
    9e80:	59 1f       	adc	r21, r25
    9e82:	61 1d       	adc	r22, r1
    9e84:	71 1d       	adc	r23, r1
    9e86:	cf 01       	movw	r24, r30
    9e88:	b7 dc       	rcall	.-1682   	; 0x97f8 <move_window>
    9e8a:	5c 01       	movw	r10, r24
    9e8c:	89 2b       	or	r24, r25
    9e8e:	09 f0       	breq	.+2      	; 0x9e92 <put_fat+0xf0>
    9e90:	7e c0       	rjmp	.+252    	; 0x9f8e <put_fat+0x1ec>
    9e92:	11 70       	andi	r17, 0x01	; 1
    9e94:	f1 01       	movw	r30, r2
    9e96:	e0 0f       	add	r30, r16
    9e98:	f1 1f       	adc	r31, r17
    9e9a:	89 81       	ldd	r24, Y+1	; 0x01
    9e9c:	9a 81       	ldd	r25, Y+2	; 0x02
    9e9e:	ab 81       	ldd	r26, Y+3	; 0x03
    9ea0:	bc 81       	ldd	r27, Y+4	; 0x04
    9ea2:	89 2b       	or	r24, r25
    9ea4:	8a 2b       	or	r24, r26
    9ea6:	8b 2b       	or	r24, r27
    9ea8:	41 f0       	breq	.+16     	; 0x9eba <put_fat+0x118>
    9eaa:	54 e0       	ldi	r21, 0x04	; 4
    9eac:	76 94       	lsr	r7
    9eae:	67 94       	ror	r6
    9eb0:	57 94       	ror	r5
    9eb2:	47 94       	ror	r4
    9eb4:	5a 95       	dec	r21
    9eb6:	d1 f7       	brne	.-12     	; 0x9eac <put_fat+0x10a>
    9eb8:	06 c0       	rjmp	.+12     	; 0x9ec6 <put_fat+0x124>
    9eba:	00 81       	ld	r16, Z
    9ebc:	00 7f       	andi	r16, 0xF0	; 240
    9ebe:	85 2d       	mov	r24, r5
    9ec0:	8f 70       	andi	r24, 0x0F	; 15
    9ec2:	40 2e       	mov	r4, r16
    9ec4:	48 2a       	or	r4, r24
    9ec6:	40 82       	st	Z, r4
    9ec8:	5a c0       	rjmp	.+180    	; 0x9f7e <put_fat+0x1dc>
    9eca:	77 27       	eor	r23, r23
    9ecc:	6f 2d       	mov	r22, r15
    9ece:	5e 2d       	mov	r21, r14
    9ed0:	4d 2d       	mov	r20, r13
    9ed2:	ed 81       	ldd	r30, Y+5	; 0x05
    9ed4:	fe 81       	ldd	r31, Y+6	; 0x06
    9ed6:	85 a1       	ldd	r24, Z+37	; 0x25
    9ed8:	96 a1       	ldd	r25, Z+38	; 0x26
    9eda:	a7 a1       	ldd	r26, Z+39	; 0x27
    9edc:	b0 a5       	ldd	r27, Z+40	; 0x28
    9ede:	48 0f       	add	r20, r24
    9ee0:	59 1f       	adc	r21, r25
    9ee2:	6a 1f       	adc	r22, r26
    9ee4:	7b 1f       	adc	r23, r27
    9ee6:	cf 01       	movw	r24, r30
    9ee8:	87 dc       	rcall	.-1778   	; 0x97f8 <move_window>
    9eea:	5c 01       	movw	r10, r24
    9eec:	89 2b       	or	r24, r25
    9eee:	09 f0       	breq	.+2      	; 0x9ef2 <put_fat+0x150>
    9ef0:	4e c0       	rjmp	.+156    	; 0x9f8e <put_fat+0x1ec>
    9ef2:	ed 81       	ldd	r30, Y+5	; 0x05
    9ef4:	fe 81       	ldd	r31, Y+6	; 0x06
    9ef6:	f5 96       	adiw	r30, 0x35	; 53
    9ef8:	cc 0c       	add	r12, r12
    9efa:	dd 1c       	adc	r13, r13
    9efc:	e8 94       	clt
    9efe:	c0 f8       	bld	r12, 0
    9f00:	21 e0       	ldi	r18, 0x01	; 1
    9f02:	d2 22       	and	r13, r18
    9f04:	ec 0d       	add	r30, r12
    9f06:	fd 1d       	adc	r31, r13
    9f08:	40 82       	st	Z, r4
    9f0a:	51 82       	std	Z+1, r5	; 0x01
    9f0c:	38 c0       	rjmp	.+112    	; 0x9f7e <put_fat+0x1dc>
    9f0e:	ed 81       	ldd	r30, Y+5	; 0x05
    9f10:	fe 81       	ldd	r31, Y+6	; 0x06
    9f12:	85 a1       	ldd	r24, Z+37	; 0x25
    9f14:	96 a1       	ldd	r25, Z+38	; 0x26
    9f16:	a7 a1       	ldd	r26, Z+39	; 0x27
    9f18:	b0 a5       	ldd	r27, Z+40	; 0x28
    9f1a:	27 e0       	ldi	r18, 0x07	; 7
    9f1c:	76 95       	lsr	r23
    9f1e:	67 95       	ror	r22
    9f20:	57 95       	ror	r21
    9f22:	47 95       	ror	r20
    9f24:	2a 95       	dec	r18
    9f26:	d1 f7       	brne	.-12     	; 0x9f1c <put_fat+0x17a>
    9f28:	48 0f       	add	r20, r24
    9f2a:	59 1f       	adc	r21, r25
    9f2c:	6a 1f       	adc	r22, r26
    9f2e:	7b 1f       	adc	r23, r27
    9f30:	cf 01       	movw	r24, r30
    9f32:	62 dc       	rcall	.-1852   	; 0x97f8 <move_window>
    9f34:	5c 01       	movw	r10, r24
    9f36:	89 2b       	or	r24, r25
    9f38:	51 f5       	brne	.+84     	; 0x9f8e <put_fat+0x1ec>
    9f3a:	4d 81       	ldd	r20, Y+5	; 0x05
    9f3c:	5e 81       	ldd	r21, Y+6	; 0x06
    9f3e:	4b 5c       	subi	r20, 0xCB	; 203
    9f40:	5f 4f       	sbci	r21, 0xFF	; 255
    9f42:	cc 0c       	add	r12, r12
    9f44:	dd 1c       	adc	r13, r13
    9f46:	cc 0c       	add	r12, r12
    9f48:	dd 1c       	adc	r13, r13
    9f4a:	fc ef       	ldi	r31, 0xFC	; 252
    9f4c:	cf 22       	and	r12, r31
    9f4e:	f1 e0       	ldi	r31, 0x01	; 1
    9f50:	df 22       	and	r13, r31
    9f52:	c4 0e       	add	r12, r20
    9f54:	d5 1e       	adc	r13, r21
    9f56:	c6 01       	movw	r24, r12
    9f58:	0e 94 21 47 	call	0x8e42	; 0x8e42 <ld_dword>
    9f5c:	2f e0       	ldi	r18, 0x0F	; 15
    9f5e:	72 22       	and	r7, r18
    9f60:	dc 01       	movw	r26, r24
    9f62:	cb 01       	movw	r24, r22
    9f64:	88 27       	eor	r24, r24
    9f66:	99 27       	eor	r25, r25
    9f68:	aa 27       	eor	r26, r26
    9f6a:	b0 7f       	andi	r27, 0xF0	; 240
    9f6c:	b3 01       	movw	r22, r6
    9f6e:	a2 01       	movw	r20, r4
    9f70:	48 2b       	or	r20, r24
    9f72:	59 2b       	or	r21, r25
    9f74:	6a 2b       	or	r22, r26
    9f76:	7b 2b       	or	r23, r27
    9f78:	c6 01       	movw	r24, r12
    9f7a:	0e 94 36 47 	call	0x8e6c	; 0x8e6c <st_dword>
    9f7e:	81 e0       	ldi	r24, 0x01	; 1
    9f80:	ed 81       	ldd	r30, Y+5	; 0x05
    9f82:	fe 81       	ldd	r31, Y+6	; 0x06
    9f84:	83 83       	std	Z+3, r24	; 0x03
    9f86:	03 c0       	rjmp	.+6      	; 0x9f8e <put_fat+0x1ec>
    9f88:	82 e0       	ldi	r24, 0x02	; 2
    9f8a:	a8 2e       	mov	r10, r24
    9f8c:	b1 2c       	mov	r11, r1
    9f8e:	c5 01       	movw	r24, r10
    9f90:	26 96       	adiw	r28, 0x06	; 6
    9f92:	e2 e1       	ldi	r30, 0x12	; 18
    9f94:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

00009f98 <get_fat.isra.10>:
    9f98:	a0 e0       	ldi	r26, 0x00	; 0
    9f9a:	b0 e0       	ldi	r27, 0x00	; 0
    9f9c:	e2 ed       	ldi	r30, 0xD2	; 210
    9f9e:	ff e4       	ldi	r31, 0x4F	; 79
    9fa0:	0c 94 d7 e2 	jmp	0x1c5ae	; 0x1c5ae <__prologue_saves__+0x10>
    9fa4:	42 30       	cpi	r20, 0x02	; 2
    9fa6:	51 05       	cpc	r21, r1
    9fa8:	61 05       	cpc	r22, r1
    9faa:	71 05       	cpc	r23, r1
    9fac:	08 f4       	brcc	.+2      	; 0x9fb0 <get_fat.isra.10+0x18>
    9fae:	9f c0       	rjmp	.+318    	; 0xa0ee <get_fat.isra.10+0x156>
    9fb0:	fc 01       	movw	r30, r24
    9fb2:	01 8d       	ldd	r16, Z+25	; 0x19
    9fb4:	12 8d       	ldd	r17, Z+26	; 0x1a
    9fb6:	23 8d       	ldd	r18, Z+27	; 0x1b
    9fb8:	34 8d       	ldd	r19, Z+28	; 0x1c
    9fba:	40 17       	cp	r20, r16
    9fbc:	51 07       	cpc	r21, r17
    9fbe:	62 07       	cpc	r22, r18
    9fc0:	73 07       	cpc	r23, r19
    9fc2:	08 f0       	brcs	.+2      	; 0x9fc6 <get_fat.isra.10+0x2e>
    9fc4:	94 c0       	rjmp	.+296    	; 0xa0ee <get_fat.isra.10+0x156>
    9fc6:	6a 01       	movw	r12, r20
    9fc8:	7b 01       	movw	r14, r22
    9fca:	8c 01       	movw	r16, r24
    9fcc:	80 81       	ld	r24, Z
    9fce:	82 30       	cpi	r24, 0x02	; 2
    9fd0:	09 f4       	brne	.+2      	; 0x9fd4 <get_fat.isra.10+0x3c>
    9fd2:	4b c0       	rjmp	.+150    	; 0xa06a <get_fat.isra.10+0xd2>
    9fd4:	83 30       	cpi	r24, 0x03	; 3
    9fd6:	09 f4       	brne	.+2      	; 0x9fda <get_fat.isra.10+0x42>
    9fd8:	67 c0       	rjmp	.+206    	; 0xa0a8 <get_fat.isra.10+0x110>
    9fda:	81 30       	cpi	r24, 0x01	; 1
    9fdc:	09 f0       	breq	.+2      	; 0x9fe0 <get_fat.isra.10+0x48>
    9fde:	87 c0       	rjmp	.+270    	; 0xa0ee <get_fat.isra.10+0x156>
    9fe0:	ea 01       	movw	r28, r20
    9fe2:	d6 95       	lsr	r29
    9fe4:	c7 95       	ror	r28
    9fe6:	cc 0d       	add	r28, r12
    9fe8:	dd 1d       	adc	r29, r13
    9fea:	ce 01       	movw	r24, r28
    9fec:	89 2f       	mov	r24, r25
    9fee:	99 27       	eor	r25, r25
    9ff0:	86 95       	lsr	r24
    9ff2:	45 a1       	ldd	r20, Z+37	; 0x25
    9ff4:	56 a1       	ldd	r21, Z+38	; 0x26
    9ff6:	67 a1       	ldd	r22, Z+39	; 0x27
    9ff8:	70 a5       	ldd	r23, Z+40	; 0x28
    9ffa:	48 0f       	add	r20, r24
    9ffc:	59 1f       	adc	r21, r25
    9ffe:	61 1d       	adc	r22, r1
    a000:	71 1d       	adc	r23, r1
    a002:	cf 01       	movw	r24, r30
    a004:	f9 db       	rcall	.-2062   	; 0x97f8 <move_window>
    a006:	89 2b       	or	r24, r25
    a008:	21 f0       	breq	.+8      	; 0xa012 <get_fat.isra.10+0x7a>
    a00a:	6f ef       	ldi	r22, 0xFF	; 255
    a00c:	7f ef       	ldi	r23, 0xFF	; 255
    a00e:	cb 01       	movw	r24, r22
    a010:	72 c0       	rjmp	.+228    	; 0xa0f6 <get_fat.isra.10+0x15e>
    a012:	5e 01       	movw	r10, r28
    a014:	ff ef       	ldi	r31, 0xFF	; 255
    a016:	af 1a       	sub	r10, r31
    a018:	bf 0a       	sbc	r11, r31
    a01a:	d1 70       	andi	r29, 0x01	; 1
    a01c:	c0 0f       	add	r28, r16
    a01e:	d1 1f       	adc	r29, r17
    a020:	cd a9       	ldd	r28, Y+53	; 0x35
    a022:	c5 01       	movw	r24, r10
    a024:	89 2f       	mov	r24, r25
    a026:	99 27       	eor	r25, r25
    a028:	86 95       	lsr	r24
    a02a:	f8 01       	movw	r30, r16
    a02c:	45 a1       	ldd	r20, Z+37	; 0x25
    a02e:	56 a1       	ldd	r21, Z+38	; 0x26
    a030:	67 a1       	ldd	r22, Z+39	; 0x27
    a032:	70 a5       	ldd	r23, Z+40	; 0x28
    a034:	48 0f       	add	r20, r24
    a036:	59 1f       	adc	r21, r25
    a038:	61 1d       	adc	r22, r1
    a03a:	71 1d       	adc	r23, r1
    a03c:	c8 01       	movw	r24, r16
    a03e:	dc db       	rcall	.-2120   	; 0x97f8 <move_window>
    a040:	89 2b       	or	r24, r25
    a042:	19 f7       	brne	.-58     	; 0xa00a <get_fat.isra.10+0x72>
    a044:	f1 e0       	ldi	r31, 0x01	; 1
    a046:	bf 22       	and	r11, r31
    a048:	f8 01       	movw	r30, r16
    a04a:	ea 0d       	add	r30, r10
    a04c:	fb 1d       	adc	r31, r11
    a04e:	85 a9       	ldd	r24, Z+53	; 0x35
    a050:	6c 2f       	mov	r22, r28
    a052:	70 e0       	ldi	r23, 0x00	; 0
    a054:	78 2b       	or	r23, r24
    a056:	c0 fe       	sbrs	r12, 0
    a058:	06 c0       	rjmp	.+12     	; 0xa066 <get_fat.isra.10+0xce>
    a05a:	54 e0       	ldi	r21, 0x04	; 4
    a05c:	76 95       	lsr	r23
    a05e:	67 95       	ror	r22
    a060:	5a 95       	dec	r21
    a062:	e1 f7       	brne	.-8      	; 0xa05c <get_fat.isra.10+0xc4>
    a064:	1e c0       	rjmp	.+60     	; 0xa0a2 <get_fat.isra.10+0x10a>
    a066:	7f 70       	andi	r23, 0x0F	; 15
    a068:	1c c0       	rjmp	.+56     	; 0xa0a2 <get_fat.isra.10+0x10a>
    a06a:	77 27       	eor	r23, r23
    a06c:	6f 2d       	mov	r22, r15
    a06e:	5e 2d       	mov	r21, r14
    a070:	4d 2d       	mov	r20, r13
    a072:	85 a1       	ldd	r24, Z+37	; 0x25
    a074:	96 a1       	ldd	r25, Z+38	; 0x26
    a076:	a7 a1       	ldd	r26, Z+39	; 0x27
    a078:	b0 a5       	ldd	r27, Z+40	; 0x28
    a07a:	48 0f       	add	r20, r24
    a07c:	59 1f       	adc	r21, r25
    a07e:	6a 1f       	adc	r22, r26
    a080:	7b 1f       	adc	r23, r27
    a082:	cf 01       	movw	r24, r30
    a084:	b9 db       	rcall	.-2190   	; 0x97f8 <move_window>
    a086:	89 2b       	or	r24, r25
    a088:	09 f0       	breq	.+2      	; 0xa08c <get_fat.isra.10+0xf4>
    a08a:	bf cf       	rjmp	.-130    	; 0xa00a <get_fat.isra.10+0x72>
    a08c:	cc 0c       	add	r12, r12
    a08e:	dd 1c       	adc	r13, r13
    a090:	e8 94       	clt
    a092:	c0 f8       	bld	r12, 0
    a094:	f1 e0       	ldi	r31, 0x01	; 1
    a096:	df 22       	and	r13, r31
    a098:	f8 01       	movw	r30, r16
    a09a:	ec 0d       	add	r30, r12
    a09c:	fd 1d       	adc	r31, r13
    a09e:	65 a9       	ldd	r22, Z+53	; 0x35
    a0a0:	76 a9       	ldd	r23, Z+54	; 0x36
    a0a2:	80 e0       	ldi	r24, 0x00	; 0
    a0a4:	90 e0       	ldi	r25, 0x00	; 0
    a0a6:	27 c0       	rjmp	.+78     	; 0xa0f6 <get_fat.isra.10+0x15e>
    a0a8:	85 a1       	ldd	r24, Z+37	; 0x25
    a0aa:	96 a1       	ldd	r25, Z+38	; 0x26
    a0ac:	a7 a1       	ldd	r26, Z+39	; 0x27
    a0ae:	b0 a5       	ldd	r27, Z+40	; 0x28
    a0b0:	27 e0       	ldi	r18, 0x07	; 7
    a0b2:	76 95       	lsr	r23
    a0b4:	67 95       	ror	r22
    a0b6:	57 95       	ror	r21
    a0b8:	47 95       	ror	r20
    a0ba:	2a 95       	dec	r18
    a0bc:	d1 f7       	brne	.-12     	; 0xa0b2 <get_fat.isra.10+0x11a>
    a0be:	48 0f       	add	r20, r24
    a0c0:	59 1f       	adc	r21, r25
    a0c2:	6a 1f       	adc	r22, r26
    a0c4:	7b 1f       	adc	r23, r27
    a0c6:	cf 01       	movw	r24, r30
    a0c8:	97 db       	rcall	.-2258   	; 0x97f8 <move_window>
    a0ca:	89 2b       	or	r24, r25
    a0cc:	09 f0       	breq	.+2      	; 0xa0d0 <get_fat.isra.10+0x138>
    a0ce:	9d cf       	rjmp	.-198    	; 0xa00a <get_fat.isra.10+0x72>
    a0d0:	0b 5c       	subi	r16, 0xCB	; 203
    a0d2:	1f 4f       	sbci	r17, 0xFF	; 255
    a0d4:	cc 0c       	add	r12, r12
    a0d6:	dd 1c       	adc	r13, r13
    a0d8:	cc 0c       	add	r12, r12
    a0da:	dd 1c       	adc	r13, r13
    a0dc:	c6 01       	movw	r24, r12
    a0de:	8c 7f       	andi	r24, 0xFC	; 252
    a0e0:	91 70       	andi	r25, 0x01	; 1
    a0e2:	80 0f       	add	r24, r16
    a0e4:	91 1f       	adc	r25, r17
    a0e6:	0e 94 21 47 	call	0x8e42	; 0x8e42 <ld_dword>
    a0ea:	9f 70       	andi	r25, 0x0F	; 15
    a0ec:	04 c0       	rjmp	.+8      	; 0xa0f6 <get_fat.isra.10+0x15e>
    a0ee:	61 e0       	ldi	r22, 0x01	; 1
    a0f0:	70 e0       	ldi	r23, 0x00	; 0
    a0f2:	80 e0       	ldi	r24, 0x00	; 0
    a0f4:	90 e0       	ldi	r25, 0x00	; 0
    a0f6:	cd b7       	in	r28, 0x3d	; 61
    a0f8:	de b7       	in	r29, 0x3e	; 62
    a0fa:	ea e0       	ldi	r30, 0x0A	; 10
    a0fc:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__epilogue_restores__+0x10>

0000a100 <dir_sdi>:
    a100:	a0 e0       	ldi	r26, 0x00	; 0
    a102:	b0 e0       	ldi	r27, 0x00	; 0
    a104:	e6 e8       	ldi	r30, 0x86	; 134
    a106:	f0 e5       	ldi	r31, 0x50	; 80
    a108:	0c 94 d1 e2 	jmp	0x1c5a2	; 0x1c5a2 <__prologue_saves__+0x4>
    a10c:	ec 01       	movw	r28, r24
    a10e:	6a 01       	movw	r12, r20
    a110:	7b 01       	movw	r14, r22
    a112:	41 15       	cp	r20, r1
    a114:	51 05       	cpc	r21, r1
    a116:	80 e2       	ldi	r24, 0x20	; 32
    a118:	68 07       	cpc	r22, r24
    a11a:	71 05       	cpc	r23, r1
    a11c:	18 f0       	brcs	.+6      	; 0xa124 <dir_sdi+0x24>
    a11e:	82 e0       	ldi	r24, 0x02	; 2
    a120:	90 e0       	ldi	r25, 0x00	; 0
    a122:	aa c0       	rjmp	.+340    	; 0xa278 <dir_sdi+0x178>
    a124:	db 01       	movw	r26, r22
    a126:	ca 01       	movw	r24, r20
    a128:	8f 71       	andi	r24, 0x1F	; 31
    a12a:	99 27       	eor	r25, r25
    a12c:	aa 27       	eor	r26, r26
    a12e:	bb 27       	eor	r27, r27
    a130:	89 2b       	or	r24, r25
    a132:	8a 2b       	or	r24, r26
    a134:	8b 2b       	or	r24, r27
    a136:	99 f7       	brne	.-26     	; 0xa11e <dir_sdi+0x1e>
    a138:	08 81       	ld	r16, Y
    a13a:	19 81       	ldd	r17, Y+1	; 0x01
    a13c:	4e 87       	std	Y+14, r20	; 0x0e
    a13e:	5f 87       	std	Y+15, r21	; 0x0f
    a140:	68 8b       	std	Y+16, r22	; 0x10
    a142:	79 8b       	std	Y+17, r23	; 0x11
    a144:	8e 80       	ldd	r8, Y+6	; 0x06
    a146:	9f 80       	ldd	r9, Y+7	; 0x07
    a148:	a8 84       	ldd	r10, Y+8	; 0x08
    a14a:	b9 84       	ldd	r11, Y+9	; 0x09
    a14c:	81 14       	cp	r8, r1
    a14e:	91 04       	cpc	r9, r1
    a150:	a1 04       	cpc	r10, r1
    a152:	b1 04       	cpc	r11, r1
    a154:	51 f5       	brne	.+84     	; 0xa1aa <dir_sdi+0xaa>
    a156:	f8 01       	movw	r30, r16
    a158:	80 81       	ld	r24, Z
    a15a:	83 30       	cpi	r24, 0x03	; 3
    a15c:	40 f0       	brcs	.+16     	; 0xa16e <dir_sdi+0x6e>
    a15e:	81 a5       	ldd	r24, Z+41	; 0x29
    a160:	92 a5       	ldd	r25, Z+42	; 0x2a
    a162:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a164:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a166:	00 97       	sbiw	r24, 0x00	; 0
    a168:	a1 05       	cpc	r26, r1
    a16a:	b1 05       	cpc	r27, r1
    a16c:	e1 f4       	brne	.+56     	; 0xa1a6 <dir_sdi+0xa6>
    a16e:	f8 01       	movw	r30, r16
    a170:	87 81       	ldd	r24, Z+7	; 0x07
    a172:	90 85       	ldd	r25, Z+8	; 0x08
    a174:	a0 e0       	ldi	r26, 0x00	; 0
    a176:	b0 e0       	ldi	r27, 0x00	; 0
    a178:	b7 01       	movw	r22, r14
    a17a:	a6 01       	movw	r20, r12
    a17c:	25 e0       	ldi	r18, 0x05	; 5
    a17e:	76 95       	lsr	r23
    a180:	67 95       	ror	r22
    a182:	57 95       	ror	r21
    a184:	47 95       	ror	r20
    a186:	2a 95       	dec	r18
    a188:	d1 f7       	brne	.-12     	; 0xa17e <dir_sdi+0x7e>
    a18a:	48 17       	cp	r20, r24
    a18c:	59 07       	cpc	r21, r25
    a18e:	6a 07       	cpc	r22, r26
    a190:	7b 07       	cpc	r23, r27
    a192:	28 f6       	brcc	.-118    	; 0xa11e <dir_sdi+0x1e>
    a194:	81 a5       	ldd	r24, Z+41	; 0x29
    a196:	92 a5       	ldd	r25, Z+42	; 0x2a
    a198:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a19a:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a19c:	8e 8b       	std	Y+22, r24	; 0x16
    a19e:	9f 8b       	std	Y+23, r25	; 0x17
    a1a0:	a8 8f       	std	Y+24, r26	; 0x18
    a1a2:	b9 8f       	std	Y+25, r27	; 0x19
    a1a4:	3e c0       	rjmp	.+124    	; 0xa222 <dir_sdi+0x122>
    a1a6:	4c 01       	movw	r8, r24
    a1a8:	5d 01       	movw	r10, r26
    a1aa:	f8 01       	movw	r30, r16
    a1ac:	41 84       	ldd	r4, Z+9	; 0x09
    a1ae:	52 84       	ldd	r5, Z+10	; 0x0a
    a1b0:	61 2c       	mov	r6, r1
    a1b2:	71 2c       	mov	r7, r1
    a1b4:	39 e0       	ldi	r19, 0x09	; 9
    a1b6:	44 0c       	add	r4, r4
    a1b8:	55 1c       	adc	r5, r5
    a1ba:	66 1c       	adc	r6, r6
    a1bc:	77 1c       	adc	r7, r7
    a1be:	3a 95       	dec	r19
    a1c0:	d1 f7       	brne	.-12     	; 0xa1b6 <dir_sdi+0xb6>
    a1c2:	b5 01       	movw	r22, r10
    a1c4:	a4 01       	movw	r20, r8
    a1c6:	c4 14       	cp	r12, r4
    a1c8:	d5 04       	cpc	r13, r5
    a1ca:	e6 04       	cpc	r14, r6
    a1cc:	f7 04       	cpc	r15, r7
    a1ce:	10 f1       	brcs	.+68     	; 0xa214 <dir_sdi+0x114>
    a1d0:	88 81       	ld	r24, Y
    a1d2:	99 81       	ldd	r25, Y+1	; 0x01
    a1d4:	e1 de       	rcall	.-574    	; 0x9f98 <get_fat.isra.10>
    a1d6:	4b 01       	movw	r8, r22
    a1d8:	5c 01       	movw	r10, r24
    a1da:	6f 3f       	cpi	r22, 0xFF	; 255
    a1dc:	7f 4f       	sbci	r23, 0xFF	; 255
    a1de:	8f 4f       	sbci	r24, 0xFF	; 255
    a1e0:	9f 4f       	sbci	r25, 0xFF	; 255
    a1e2:	09 f4       	brne	.+2      	; 0xa1e6 <dir_sdi+0xe6>
    a1e4:	47 c0       	rjmp	.+142    	; 0xa274 <dir_sdi+0x174>
    a1e6:	82 e0       	ldi	r24, 0x02	; 2
    a1e8:	88 16       	cp	r8, r24
    a1ea:	91 04       	cpc	r9, r1
    a1ec:	a1 04       	cpc	r10, r1
    a1ee:	b1 04       	cpc	r11, r1
    a1f0:	08 f4       	brcc	.+2      	; 0xa1f4 <dir_sdi+0xf4>
    a1f2:	95 cf       	rjmp	.-214    	; 0xa11e <dir_sdi+0x1e>
    a1f4:	f8 01       	movw	r30, r16
    a1f6:	81 8d       	ldd	r24, Z+25	; 0x19
    a1f8:	92 8d       	ldd	r25, Z+26	; 0x1a
    a1fa:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a1fc:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a1fe:	88 16       	cp	r8, r24
    a200:	99 06       	cpc	r9, r25
    a202:	aa 06       	cpc	r10, r26
    a204:	bb 06       	cpc	r11, r27
    a206:	08 f0       	brcs	.+2      	; 0xa20a <dir_sdi+0x10a>
    a208:	8a cf       	rjmp	.-236    	; 0xa11e <dir_sdi+0x1e>
    a20a:	c4 18       	sub	r12, r4
    a20c:	d5 08       	sbc	r13, r5
    a20e:	e6 08       	sbc	r14, r6
    a210:	f7 08       	sbc	r15, r7
    a212:	d7 cf       	rjmp	.-82     	; 0xa1c2 <dir_sdi+0xc2>
    a214:	c8 01       	movw	r24, r16
    a216:	0e 94 da 47 	call	0x8fb4	; 0x8fb4 <clst2sect>
    a21a:	6e 8b       	std	Y+22, r22	; 0x16
    a21c:	7f 8b       	std	Y+23, r23	; 0x17
    a21e:	88 8f       	std	Y+24, r24	; 0x18
    a220:	99 8f       	std	Y+25, r25	; 0x19
    a222:	8a 8a       	std	Y+18, r8	; 0x12
    a224:	9b 8a       	std	Y+19, r9	; 0x13
    a226:	ac 8a       	std	Y+20, r10	; 0x14
    a228:	bd 8a       	std	Y+21, r11	; 0x15
    a22a:	8e 89       	ldd	r24, Y+22	; 0x16
    a22c:	9f 89       	ldd	r25, Y+23	; 0x17
    a22e:	a8 8d       	ldd	r26, Y+24	; 0x18
    a230:	b9 8d       	ldd	r27, Y+25	; 0x19
    a232:	00 97       	sbiw	r24, 0x00	; 0
    a234:	a1 05       	cpc	r26, r1
    a236:	b1 05       	cpc	r27, r1
    a238:	09 f4       	brne	.+2      	; 0xa23c <dir_sdi+0x13c>
    a23a:	71 cf       	rjmp	.-286    	; 0xa11e <dir_sdi+0x1e>
    a23c:	b7 01       	movw	r22, r14
    a23e:	a6 01       	movw	r20, r12
    a240:	29 e0       	ldi	r18, 0x09	; 9
    a242:	76 95       	lsr	r23
    a244:	67 95       	ror	r22
    a246:	57 95       	ror	r21
    a248:	47 95       	ror	r20
    a24a:	2a 95       	dec	r18
    a24c:	d1 f7       	brne	.-12     	; 0xa242 <dir_sdi+0x142>
    a24e:	84 0f       	add	r24, r20
    a250:	95 1f       	adc	r25, r21
    a252:	a6 1f       	adc	r26, r22
    a254:	b7 1f       	adc	r27, r23
    a256:	8e 8b       	std	Y+22, r24	; 0x16
    a258:	9f 8b       	std	Y+23, r25	; 0x17
    a25a:	a8 8f       	std	Y+24, r26	; 0x18
    a25c:	b9 8f       	std	Y+25, r27	; 0x19
    a25e:	0b 5c       	subi	r16, 0xCB	; 203
    a260:	1f 4f       	sbci	r17, 0xFF	; 255
    a262:	f1 e0       	ldi	r31, 0x01	; 1
    a264:	df 22       	and	r13, r31
    a266:	c0 0e       	add	r12, r16
    a268:	d1 1e       	adc	r13, r17
    a26a:	db 8e       	std	Y+27, r13	; 0x1b
    a26c:	ca 8e       	std	Y+26, r12	; 0x1a
    a26e:	80 e0       	ldi	r24, 0x00	; 0
    a270:	90 e0       	ldi	r25, 0x00	; 0
    a272:	02 c0       	rjmp	.+4      	; 0xa278 <dir_sdi+0x178>
    a274:	81 e0       	ldi	r24, 0x01	; 1
    a276:	90 e0       	ldi	r25, 0x00	; 0
    a278:	cd b7       	in	r28, 0x3d	; 61
    a27a:	de b7       	in	r29, 0x3e	; 62
    a27c:	e0 e1       	ldi	r30, 0x10	; 16
    a27e:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__epilogue_restores__+0x4>

0000a282 <create_chain>:
    a282:	a0 e0       	ldi	r26, 0x00	; 0
    a284:	b0 e0       	ldi	r27, 0x00	; 0
    a286:	e7 e4       	ldi	r30, 0x47	; 71
    a288:	f1 e5       	ldi	r31, 0x51	; 81
    a28a:	0c 94 d1 e2 	jmp	0x1c5a2	; 0x1c5a2 <__prologue_saves__+0x4>
    a28e:	8c 01       	movw	r16, r24
    a290:	2a 01       	movw	r4, r20
    a292:	3b 01       	movw	r6, r22
    a294:	fc 01       	movw	r30, r24
    a296:	c0 81       	ld	r28, Z
    a298:	d1 81       	ldd	r29, Z+1	; 0x01
    a29a:	41 15       	cp	r20, r1
    a29c:	51 05       	cpc	r21, r1
    a29e:	61 05       	cpc	r22, r1
    a2a0:	71 05       	cpc	r23, r1
    a2a2:	99 f4       	brne	.+38     	; 0xa2ca <create_chain+0x48>
    a2a4:	8d 84       	ldd	r8, Y+13	; 0x0d
    a2a6:	9e 84       	ldd	r9, Y+14	; 0x0e
    a2a8:	af 84       	ldd	r10, Y+15	; 0x0f
    a2aa:	b8 88       	ldd	r11, Y+16	; 0x10
    a2ac:	81 14       	cp	r8, r1
    a2ae:	91 04       	cpc	r9, r1
    a2b0:	a1 04       	cpc	r10, r1
    a2b2:	b1 04       	cpc	r11, r1
    a2b4:	51 f1       	breq	.+84     	; 0xa30a <create_chain+0x88>
    a2b6:	89 8d       	ldd	r24, Y+25	; 0x19
    a2b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a2ba:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a2bc:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a2be:	88 16       	cp	r8, r24
    a2c0:	99 06       	cpc	r9, r25
    a2c2:	aa 06       	cpc	r10, r26
    a2c4:	bb 06       	cpc	r11, r27
    a2c6:	28 f1       	brcs	.+74     	; 0xa312 <create_chain+0x90>
    a2c8:	20 c0       	rjmp	.+64     	; 0xa30a <create_chain+0x88>
    a2ca:	ce 01       	movw	r24, r28
    a2cc:	65 de       	rcall	.-822    	; 0x9f98 <get_fat.isra.10>
    a2ce:	62 30       	cpi	r22, 0x02	; 2
    a2d0:	71 05       	cpc	r23, r1
    a2d2:	81 05       	cpc	r24, r1
    a2d4:	91 05       	cpc	r25, r1
    a2d6:	08 f4       	brcc	.+2      	; 0xa2da <create_chain+0x58>
    a2d8:	ea c0       	rjmp	.+468    	; 0xa4ae <create_chain+0x22c>
    a2da:	6f 3f       	cpi	r22, 0xFF	; 255
    a2dc:	ff ef       	ldi	r31, 0xFF	; 255
    a2de:	7f 07       	cpc	r23, r31
    a2e0:	8f 07       	cpc	r24, r31
    a2e2:	9f 07       	cpc	r25, r31
    a2e4:	29 f4       	brne	.+10     	; 0xa2f0 <create_chain+0x6e>
    a2e6:	4f ef       	ldi	r20, 0xFF	; 255
    a2e8:	3f ef       	ldi	r19, 0xFF	; 255
    a2ea:	2f ef       	ldi	r18, 0xFF	; 255
    a2ec:	9f ef       	ldi	r25, 0xFF	; 255
    a2ee:	e7 c0       	rjmp	.+462    	; 0xa4be <create_chain+0x23c>
    a2f0:	c9 8c       	ldd	r12, Y+25	; 0x19
    a2f2:	da 8c       	ldd	r13, Y+26	; 0x1a
    a2f4:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a2f6:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a2f8:	6c 15       	cp	r22, r12
    a2fa:	7d 05       	cpc	r23, r13
    a2fc:	8e 05       	cpc	r24, r14
    a2fe:	9f 05       	cpc	r25, r15
    a300:	08 f4       	brcc	.+2      	; 0xa304 <create_chain+0x82>
    a302:	da c0       	rjmp	.+436    	; 0xa4b8 <create_chain+0x236>
    a304:	53 01       	movw	r10, r6
    a306:	42 01       	movw	r8, r4
    a308:	04 c0       	rjmp	.+8      	; 0xa312 <create_chain+0x90>
    a30a:	81 2c       	mov	r8, r1
    a30c:	91 2c       	mov	r9, r1
    a30e:	54 01       	movw	r10, r8
    a310:	83 94       	inc	r8
    a312:	89 89       	ldd	r24, Y+17	; 0x11
    a314:	9a 89       	ldd	r25, Y+18	; 0x12
    a316:	ab 89       	ldd	r26, Y+19	; 0x13
    a318:	bc 89       	ldd	r27, Y+20	; 0x14
    a31a:	89 2b       	or	r24, r25
    a31c:	8a 2b       	or	r24, r26
    a31e:	8b 2b       	or	r24, r27
    a320:	11 f4       	brne	.+4      	; 0xa326 <create_chain+0xa4>
    a322:	40 e0       	ldi	r20, 0x00	; 0
    a324:	c5 c0       	rjmp	.+394    	; 0xa4b0 <create_chain+0x22e>
    a326:	84 14       	cp	r8, r4
    a328:	95 04       	cpc	r9, r5
    a32a:	a6 04       	cpc	r10, r6
    a32c:	b7 04       	cpc	r11, r7
    a32e:	09 f0       	breq	.+2      	; 0xa332 <create_chain+0xb0>
    a330:	46 c0       	rjmp	.+140    	; 0xa3be <create_chain+0x13c>
    a332:	75 01       	movw	r14, r10
    a334:	64 01       	movw	r12, r8
    a336:	2f ef       	ldi	r18, 0xFF	; 255
    a338:	c2 1a       	sub	r12, r18
    a33a:	d2 0a       	sbc	r13, r18
    a33c:	e2 0a       	sbc	r14, r18
    a33e:	f2 0a       	sbc	r15, r18
    a340:	89 8d       	ldd	r24, Y+25	; 0x19
    a342:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a344:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a346:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a348:	c8 16       	cp	r12, r24
    a34a:	d9 06       	cpc	r13, r25
    a34c:	ea 06       	cpc	r14, r26
    a34e:	fb 06       	cpc	r15, r27
    a350:	28 f0       	brcs	.+10     	; 0xa35c <create_chain+0xda>
    a352:	92 e0       	ldi	r25, 0x02	; 2
    a354:	c9 2e       	mov	r12, r25
    a356:	d1 2c       	mov	r13, r1
    a358:	e1 2c       	mov	r14, r1
    a35a:	f1 2c       	mov	r15, r1
    a35c:	b7 01       	movw	r22, r14
    a35e:	a6 01       	movw	r20, r12
    a360:	f8 01       	movw	r30, r16
    a362:	80 81       	ld	r24, Z
    a364:	91 81       	ldd	r25, Z+1	; 0x01
    a366:	18 de       	rcall	.-976    	; 0x9f98 <get_fat.isra.10>
    a368:	61 30       	cpi	r22, 0x01	; 1
    a36a:	71 05       	cpc	r23, r1
    a36c:	81 05       	cpc	r24, r1
    a36e:	91 05       	cpc	r25, r1
    a370:	09 f4       	brne	.+2      	; 0xa374 <create_chain+0xf2>
    a372:	9d c0       	rjmp	.+314    	; 0xa4ae <create_chain+0x22c>
    a374:	6f 3f       	cpi	r22, 0xFF	; 255
    a376:	ff ef       	ldi	r31, 0xFF	; 255
    a378:	7f 07       	cpc	r23, r31
    a37a:	8f 07       	cpc	r24, r31
    a37c:	9f 07       	cpc	r25, r31
    a37e:	09 f4       	brne	.+2      	; 0xa382 <create_chain+0x100>
    a380:	b2 cf       	rjmp	.-156    	; 0xa2e6 <create_chain+0x64>
    a382:	67 2b       	or	r22, r23
    a384:	68 2b       	or	r22, r24
    a386:	69 2b       	or	r22, r25
    a388:	a9 f0       	breq	.+42     	; 0xa3b4 <create_chain+0x132>
    a38a:	8d 85       	ldd	r24, Y+13	; 0x0d
    a38c:	9e 85       	ldd	r25, Y+14	; 0x0e
    a38e:	af 85       	ldd	r26, Y+15	; 0x0f
    a390:	b8 89       	ldd	r27, Y+16	; 0x10
    a392:	82 30       	cpi	r24, 0x02	; 2
    a394:	91 05       	cpc	r25, r1
    a396:	a1 05       	cpc	r26, r1
    a398:	b1 05       	cpc	r27, r1
    a39a:	88 f0       	brcs	.+34     	; 0xa3be <create_chain+0x13c>
    a39c:	49 8d       	ldd	r20, Y+25	; 0x19
    a39e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a3a0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a3a2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a3a4:	84 17       	cp	r24, r20
    a3a6:	95 07       	cpc	r25, r21
    a3a8:	a6 07       	cpc	r26, r22
    a3aa:	b7 07       	cpc	r27, r23
    a3ac:	40 f4       	brcc	.+16     	; 0xa3be <create_chain+0x13c>
    a3ae:	4c 01       	movw	r8, r24
    a3b0:	5d 01       	movw	r10, r26
    a3b2:	05 c0       	rjmp	.+10     	; 0xa3be <create_chain+0x13c>
    a3b4:	c1 14       	cp	r12, r1
    a3b6:	d1 04       	cpc	r13, r1
    a3b8:	e1 04       	cpc	r14, r1
    a3ba:	f1 04       	cpc	r15, r1
    a3bc:	c9 f5       	brne	.+114    	; 0xa430 <create_chain+0x1ae>
    a3be:	75 01       	movw	r14, r10
    a3c0:	64 01       	movw	r12, r8
    a3c2:	2f ef       	ldi	r18, 0xFF	; 255
    a3c4:	c2 1a       	sub	r12, r18
    a3c6:	d2 0a       	sbc	r13, r18
    a3c8:	e2 0a       	sbc	r14, r18
    a3ca:	f2 0a       	sbc	r15, r18
    a3cc:	89 8d       	ldd	r24, Y+25	; 0x19
    a3ce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a3d0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a3d2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a3d4:	c8 16       	cp	r12, r24
    a3d6:	d9 06       	cpc	r13, r25
    a3d8:	ea 06       	cpc	r14, r26
    a3da:	fb 06       	cpc	r15, r27
    a3dc:	60 f0       	brcs	.+24     	; 0xa3f6 <create_chain+0x174>
    a3de:	82 e0       	ldi	r24, 0x02	; 2
    a3e0:	88 16       	cp	r8, r24
    a3e2:	91 04       	cpc	r9, r1
    a3e4:	a1 04       	cpc	r10, r1
    a3e6:	b1 04       	cpc	r11, r1
    a3e8:	08 f4       	brcc	.+2      	; 0xa3ec <create_chain+0x16a>
    a3ea:	9b cf       	rjmp	.-202    	; 0xa322 <create_chain+0xa0>
    a3ec:	82 e0       	ldi	r24, 0x02	; 2
    a3ee:	c8 2e       	mov	r12, r24
    a3f0:	d1 2c       	mov	r13, r1
    a3f2:	e1 2c       	mov	r14, r1
    a3f4:	f1 2c       	mov	r15, r1
    a3f6:	b7 01       	movw	r22, r14
    a3f8:	a6 01       	movw	r20, r12
    a3fa:	f8 01       	movw	r30, r16
    a3fc:	80 81       	ld	r24, Z
    a3fe:	91 81       	ldd	r25, Z+1	; 0x01
    a400:	cb dd       	rcall	.-1130   	; 0x9f98 <get_fat.isra.10>
    a402:	61 15       	cp	r22, r1
    a404:	71 05       	cpc	r23, r1
    a406:	81 05       	cpc	r24, r1
    a408:	91 05       	cpc	r25, r1
    a40a:	91 f0       	breq	.+36     	; 0xa430 <create_chain+0x1ae>
    a40c:	61 30       	cpi	r22, 0x01	; 1
    a40e:	71 05       	cpc	r23, r1
    a410:	81 05       	cpc	r24, r1
    a412:	91 05       	cpc	r25, r1
    a414:	09 f4       	brne	.+2      	; 0xa418 <create_chain+0x196>
    a416:	4b c0       	rjmp	.+150    	; 0xa4ae <create_chain+0x22c>
    a418:	6f 3f       	cpi	r22, 0xFF	; 255
    a41a:	7f 4f       	sbci	r23, 0xFF	; 255
    a41c:	8f 4f       	sbci	r24, 0xFF	; 255
    a41e:	9f 4f       	sbci	r25, 0xFF	; 255
    a420:	09 f4       	brne	.+2      	; 0xa424 <create_chain+0x1a2>
    a422:	61 cf       	rjmp	.-318    	; 0xa2e6 <create_chain+0x64>
    a424:	c8 14       	cp	r12, r8
    a426:	d9 04       	cpc	r13, r9
    a428:	ea 04       	cpc	r14, r10
    a42a:	fb 04       	cpc	r15, r11
    a42c:	51 f6       	brne	.-108    	; 0xa3c2 <create_chain+0x140>
    a42e:	79 cf       	rjmp	.-270    	; 0xa322 <create_chain+0xa0>
    a430:	0f ef       	ldi	r16, 0xFF	; 255
    a432:	1f ef       	ldi	r17, 0xFF	; 255
    a434:	98 01       	movw	r18, r16
    a436:	b7 01       	movw	r22, r14
    a438:	a6 01       	movw	r20, r12
    a43a:	ce 01       	movw	r24, r28
    a43c:	b2 dc       	rcall	.-1692   	; 0x9da2 <put_fat>
    a43e:	00 97       	sbiw	r24, 0x00	; 0
    a440:	99 f5       	brne	.+102    	; 0xa4a8 <create_chain+0x226>
    a442:	41 14       	cp	r4, r1
    a444:	51 04       	cpc	r5, r1
    a446:	61 04       	cpc	r6, r1
    a448:	71 04       	cpc	r7, r1
    a44a:	e9 f4       	brne	.+58     	; 0xa486 <create_chain+0x204>
    a44c:	cd 86       	std	Y+13, r12	; 0x0d
    a44e:	de 86       	std	Y+14, r13	; 0x0e
    a450:	ef 86       	std	Y+15, r14	; 0x0f
    a452:	f8 8a       	std	Y+16, r15	; 0x10
    a454:	89 89       	ldd	r24, Y+17	; 0x11
    a456:	9a 89       	ldd	r25, Y+18	; 0x12
    a458:	ab 89       	ldd	r26, Y+19	; 0x13
    a45a:	bc 89       	ldd	r27, Y+20	; 0x14
    a45c:	49 8d       	ldd	r20, Y+25	; 0x19
    a45e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a460:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a462:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a464:	42 50       	subi	r20, 0x02	; 2
    a466:	51 09       	sbc	r21, r1
    a468:	61 09       	sbc	r22, r1
    a46a:	71 09       	sbc	r23, r1
    a46c:	48 17       	cp	r20, r24
    a46e:	59 07       	cpc	r21, r25
    a470:	6a 07       	cpc	r22, r26
    a472:	7b 07       	cpc	r23, r27
    a474:	88 f0       	brcs	.+34     	; 0xa498 <create_chain+0x216>
    a476:	01 97       	sbiw	r24, 0x01	; 1
    a478:	a1 09       	sbc	r26, r1
    a47a:	b1 09       	sbc	r27, r1
    a47c:	89 8b       	std	Y+17, r24	; 0x11
    a47e:	9a 8b       	std	Y+18, r25	; 0x12
    a480:	ab 8b       	std	Y+19, r26	; 0x13
    a482:	bc 8b       	std	Y+20, r27	; 0x14
    a484:	09 c0       	rjmp	.+18     	; 0xa498 <create_chain+0x216>
    a486:	97 01       	movw	r18, r14
    a488:	86 01       	movw	r16, r12
    a48a:	b3 01       	movw	r22, r6
    a48c:	a2 01       	movw	r20, r4
    a48e:	ce 01       	movw	r24, r28
    a490:	88 dc       	rcall	.-1776   	; 0x9da2 <put_fat>
    a492:	00 97       	sbiw	r24, 0x00	; 0
    a494:	d9 f2       	breq	.-74     	; 0xa44c <create_chain+0x1ca>
    a496:	08 c0       	rjmp	.+16     	; 0xa4a8 <create_chain+0x226>
    a498:	8c 81       	ldd	r24, Y+4	; 0x04
    a49a:	81 60       	ori	r24, 0x01	; 1
    a49c:	8c 83       	std	Y+4, r24	; 0x04
    a49e:	4c 2d       	mov	r20, r12
    a4a0:	3d 2d       	mov	r19, r13
    a4a2:	2e 2d       	mov	r18, r14
    a4a4:	9f 2d       	mov	r25, r15
    a4a6:	0b c0       	rjmp	.+22     	; 0xa4be <create_chain+0x23c>
    a4a8:	01 97       	sbiw	r24, 0x01	; 1
    a4aa:	09 f4       	brne	.+2      	; 0xa4ae <create_chain+0x22c>
    a4ac:	1c cf       	rjmp	.-456    	; 0xa2e6 <create_chain+0x64>
    a4ae:	41 e0       	ldi	r20, 0x01	; 1
    a4b0:	30 e0       	ldi	r19, 0x00	; 0
    a4b2:	20 e0       	ldi	r18, 0x00	; 0
    a4b4:	90 e0       	ldi	r25, 0x00	; 0
    a4b6:	03 c0       	rjmp	.+6      	; 0xa4be <create_chain+0x23c>
    a4b8:	46 2f       	mov	r20, r22
    a4ba:	37 2f       	mov	r19, r23
    a4bc:	28 2f       	mov	r18, r24
    a4be:	64 2f       	mov	r22, r20
    a4c0:	73 2f       	mov	r23, r19
    a4c2:	82 2f       	mov	r24, r18
    a4c4:	cd b7       	in	r28, 0x3d	; 61
    a4c6:	de b7       	in	r29, 0x3e	; 62
    a4c8:	e0 e1       	ldi	r30, 0x10	; 16
    a4ca:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__epilogue_restores__+0x4>

0000a4ce <remove_chain>:
    a4ce:	4f 92       	push	r4
    a4d0:	5f 92       	push	r5
    a4d2:	6f 92       	push	r6
    a4d4:	7f 92       	push	r7
    a4d6:	af 92       	push	r10
    a4d8:	bf 92       	push	r11
    a4da:	cf 92       	push	r12
    a4dc:	df 92       	push	r13
    a4de:	ef 92       	push	r14
    a4e0:	ff 92       	push	r15
    a4e2:	0f 93       	push	r16
    a4e4:	1f 93       	push	r17
    a4e6:	cf 93       	push	r28
    a4e8:	df 93       	push	r29
    a4ea:	5c 01       	movw	r10, r24
    a4ec:	6a 01       	movw	r12, r20
    a4ee:	7b 01       	movw	r14, r22
    a4f0:	b9 01       	movw	r22, r18
    a4f2:	a8 01       	movw	r20, r16
    a4f4:	22 e0       	ldi	r18, 0x02	; 2
    a4f6:	c2 16       	cp	r12, r18
    a4f8:	d1 04       	cpc	r13, r1
    a4fa:	e1 04       	cpc	r14, r1
    a4fc:	f1 04       	cpc	r15, r1
    a4fe:	10 f4       	brcc	.+4      	; 0xa504 <remove_chain+0x36>
    a500:	22 e0       	ldi	r18, 0x02	; 2
    a502:	27 c0       	rjmp	.+78     	; 0xa552 <remove_chain+0x84>
    a504:	fc 01       	movw	r30, r24
    a506:	c0 81       	ld	r28, Z
    a508:	d1 81       	ldd	r29, Z+1	; 0x01
    a50a:	89 8d       	ldd	r24, Y+25	; 0x19
    a50c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a50e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a510:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a512:	c8 16       	cp	r12, r24
    a514:	d9 06       	cpc	r13, r25
    a516:	ea 06       	cpc	r14, r26
    a518:	fb 06       	cpc	r15, r27
    a51a:	90 f7       	brcc	.-28     	; 0xa500 <remove_chain+0x32>
    a51c:	41 15       	cp	r20, r1
    a51e:	51 05       	cpc	r21, r1
    a520:	61 05       	cpc	r22, r1
    a522:	71 05       	cpc	r23, r1
    a524:	41 f0       	breq	.+16     	; 0xa536 <remove_chain+0x68>
    a526:	0f ef       	ldi	r16, 0xFF	; 255
    a528:	1f ef       	ldi	r17, 0xFF	; 255
    a52a:	98 01       	movw	r18, r16
    a52c:	ce 01       	movw	r24, r28
    a52e:	39 dc       	rcall	.-1934   	; 0x9da2 <put_fat>
    a530:	00 97       	sbiw	r24, 0x00	; 0
    a532:	09 f0       	breq	.+2      	; 0xa536 <remove_chain+0x68>
    a534:	4c c0       	rjmp	.+152    	; 0xa5ce <remove_chain+0x100>
    a536:	b7 01       	movw	r22, r14
    a538:	a6 01       	movw	r20, r12
    a53a:	f5 01       	movw	r30, r10
    a53c:	80 81       	ld	r24, Z
    a53e:	91 81       	ldd	r25, Z+1	; 0x01
    a540:	2b dd       	rcall	.-1450   	; 0x9f98 <get_fat.isra.10>
    a542:	2b 01       	movw	r4, r22
    a544:	3c 01       	movw	r6, r24
    a546:	61 15       	cp	r22, r1
    a548:	71 05       	cpc	r23, r1
    a54a:	81 05       	cpc	r24, r1
    a54c:	91 05       	cpc	r25, r1
    a54e:	19 f4       	brne	.+6      	; 0xa556 <remove_chain+0x88>
    a550:	20 e0       	ldi	r18, 0x00	; 0
    a552:	90 e0       	ldi	r25, 0x00	; 0
    a554:	3d c0       	rjmp	.+122    	; 0xa5d0 <remove_chain+0x102>
    a556:	61 30       	cpi	r22, 0x01	; 1
    a558:	71 05       	cpc	r23, r1
    a55a:	81 05       	cpc	r24, r1
    a55c:	91 05       	cpc	r25, r1
    a55e:	81 f2       	breq	.-96     	; 0xa500 <remove_chain+0x32>
    a560:	6f 3f       	cpi	r22, 0xFF	; 255
    a562:	7f 4f       	sbci	r23, 0xFF	; 255
    a564:	8f 4f       	sbci	r24, 0xFF	; 255
    a566:	9f 4f       	sbci	r25, 0xFF	; 255
    a568:	81 f1       	breq	.+96     	; 0xa5ca <remove_chain+0xfc>
    a56a:	00 e0       	ldi	r16, 0x00	; 0
    a56c:	10 e0       	ldi	r17, 0x00	; 0
    a56e:	98 01       	movw	r18, r16
    a570:	b7 01       	movw	r22, r14
    a572:	a6 01       	movw	r20, r12
    a574:	ce 01       	movw	r24, r28
    a576:	15 dc       	rcall	.-2006   	; 0x9da2 <put_fat>
    a578:	00 97       	sbiw	r24, 0x00	; 0
    a57a:	49 f5       	brne	.+82     	; 0xa5ce <remove_chain+0x100>
    a57c:	89 89       	ldd	r24, Y+17	; 0x11
    a57e:	9a 89       	ldd	r25, Y+18	; 0x12
    a580:	ab 89       	ldd	r26, Y+19	; 0x13
    a582:	bc 89       	ldd	r27, Y+20	; 0x14
    a584:	49 8d       	ldd	r20, Y+25	; 0x19
    a586:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a588:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a58a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a58c:	6a 01       	movw	r12, r20
    a58e:	7b 01       	movw	r14, r22
    a590:	e2 e0       	ldi	r30, 0x02	; 2
    a592:	ce 1a       	sub	r12, r30
    a594:	d1 08       	sbc	r13, r1
    a596:	e1 08       	sbc	r14, r1
    a598:	f1 08       	sbc	r15, r1
    a59a:	8c 15       	cp	r24, r12
    a59c:	9d 05       	cpc	r25, r13
    a59e:	ae 05       	cpc	r26, r14
    a5a0:	bf 05       	cpc	r27, r15
    a5a2:	50 f4       	brcc	.+20     	; 0xa5b8 <remove_chain+0xea>
    a5a4:	01 96       	adiw	r24, 0x01	; 1
    a5a6:	a1 1d       	adc	r26, r1
    a5a8:	b1 1d       	adc	r27, r1
    a5aa:	89 8b       	std	Y+17, r24	; 0x11
    a5ac:	9a 8b       	std	Y+18, r25	; 0x12
    a5ae:	ab 8b       	std	Y+19, r26	; 0x13
    a5b0:	bc 8b       	std	Y+20, r27	; 0x14
    a5b2:	8c 81       	ldd	r24, Y+4	; 0x04
    a5b4:	81 60       	ori	r24, 0x01	; 1
    a5b6:	8c 83       	std	Y+4, r24	; 0x04
    a5b8:	73 01       	movw	r14, r6
    a5ba:	62 01       	movw	r12, r4
    a5bc:	44 16       	cp	r4, r20
    a5be:	55 06       	cpc	r5, r21
    a5c0:	66 06       	cpc	r6, r22
    a5c2:	77 06       	cpc	r7, r23
    a5c4:	08 f4       	brcc	.+2      	; 0xa5c8 <remove_chain+0xfa>
    a5c6:	b7 cf       	rjmp	.-146    	; 0xa536 <remove_chain+0x68>
    a5c8:	c3 cf       	rjmp	.-122    	; 0xa550 <remove_chain+0x82>
    a5ca:	21 e0       	ldi	r18, 0x01	; 1
    a5cc:	c2 cf       	rjmp	.-124    	; 0xa552 <remove_chain+0x84>
    a5ce:	28 2f       	mov	r18, r24
    a5d0:	82 2f       	mov	r24, r18
    a5d2:	df 91       	pop	r29
    a5d4:	cf 91       	pop	r28
    a5d6:	1f 91       	pop	r17
    a5d8:	0f 91       	pop	r16
    a5da:	ff 90       	pop	r15
    a5dc:	ef 90       	pop	r14
    a5de:	df 90       	pop	r13
    a5e0:	cf 90       	pop	r12
    a5e2:	bf 90       	pop	r11
    a5e4:	af 90       	pop	r10
    a5e6:	7f 90       	pop	r7
    a5e8:	6f 90       	pop	r6
    a5ea:	5f 90       	pop	r5
    a5ec:	4f 90       	pop	r4
    a5ee:	08 95       	ret

0000a5f0 <dir_next>:
    a5f0:	4f 92       	push	r4
    a5f2:	5f 92       	push	r5
    a5f4:	6f 92       	push	r6
    a5f6:	7f 92       	push	r7
    a5f8:	af 92       	push	r10
    a5fa:	bf 92       	push	r11
    a5fc:	cf 92       	push	r12
    a5fe:	df 92       	push	r13
    a600:	ef 92       	push	r14
    a602:	ff 92       	push	r15
    a604:	0f 93       	push	r16
    a606:	1f 93       	push	r17
    a608:	cf 93       	push	r28
    a60a:	df 93       	push	r29
    a60c:	ec 01       	movw	r28, r24
    a60e:	08 81       	ld	r16, Y
    a610:	19 81       	ldd	r17, Y+1	; 0x01
    a612:	ce 84       	ldd	r12, Y+14	; 0x0e
    a614:	df 84       	ldd	r13, Y+15	; 0x0f
    a616:	e8 88       	ldd	r14, Y+16	; 0x10
    a618:	f9 88       	ldd	r15, Y+17	; 0x11
    a61a:	80 e2       	ldi	r24, 0x20	; 32
    a61c:	c8 0e       	add	r12, r24
    a61e:	d1 1c       	adc	r13, r1
    a620:	e1 1c       	adc	r14, r1
    a622:	f1 1c       	adc	r15, r1
    a624:	c1 14       	cp	r12, r1
    a626:	d1 04       	cpc	r13, r1
    a628:	e0 e2       	ldi	r30, 0x20	; 32
    a62a:	ee 06       	cpc	r14, r30
    a62c:	f1 04       	cpc	r15, r1
    a62e:	20 f0       	brcs	.+8      	; 0xa638 <dir_next+0x48>
    a630:	1e 8a       	std	Y+22, r1	; 0x16
    a632:	1f 8a       	std	Y+23, r1	; 0x17
    a634:	18 8e       	std	Y+24, r1	; 0x18
    a636:	19 8e       	std	Y+25, r1	; 0x19
    a638:	8e 89       	ldd	r24, Y+22	; 0x16
    a63a:	9f 89       	ldd	r25, Y+23	; 0x17
    a63c:	a8 8d       	ldd	r26, Y+24	; 0x18
    a63e:	b9 8d       	ldd	r27, Y+25	; 0x19
    a640:	00 97       	sbiw	r24, 0x00	; 0
    a642:	a1 05       	cpc	r26, r1
    a644:	b1 05       	cpc	r27, r1
    a646:	09 f4       	brne	.+2      	; 0xa64a <dir_next+0x5a>
    a648:	a7 c0       	rjmp	.+334    	; 0xa798 <dir_next+0x1a8>
    a64a:	5b 01       	movw	r10, r22
    a64c:	b7 01       	movw	r22, r14
    a64e:	a6 01       	movw	r20, r12
    a650:	51 70       	andi	r21, 0x01	; 1
    a652:	66 27       	eor	r22, r22
    a654:	77 27       	eor	r23, r23
    a656:	45 2b       	or	r20, r21
    a658:	46 2b       	or	r20, r22
    a65a:	47 2b       	or	r20, r23
    a65c:	09 f0       	breq	.+2      	; 0xa660 <dir_next+0x70>
    a65e:	8d c0       	rjmp	.+282    	; 0xa77a <dir_next+0x18a>
    a660:	01 96       	adiw	r24, 0x01	; 1
    a662:	a1 1d       	adc	r26, r1
    a664:	b1 1d       	adc	r27, r1
    a666:	8e 8b       	std	Y+22, r24	; 0x16
    a668:	9f 8b       	std	Y+23, r25	; 0x17
    a66a:	a8 8f       	std	Y+24, r26	; 0x18
    a66c:	b9 8f       	std	Y+25, r27	; 0x19
    a66e:	4a 89       	ldd	r20, Y+18	; 0x12
    a670:	5b 89       	ldd	r21, Y+19	; 0x13
    a672:	6c 89       	ldd	r22, Y+20	; 0x14
    a674:	7d 89       	ldd	r23, Y+21	; 0x15
    a676:	f8 01       	movw	r30, r16
    a678:	41 15       	cp	r20, r1
    a67a:	51 05       	cpc	r21, r1
    a67c:	61 05       	cpc	r22, r1
    a67e:	71 05       	cpc	r23, r1
    a680:	c1 f4       	brne	.+48     	; 0xa6b2 <dir_next+0xc2>
    a682:	87 81       	ldd	r24, Z+7	; 0x07
    a684:	90 85       	ldd	r25, Z+8	; 0x08
    a686:	a0 e0       	ldi	r26, 0x00	; 0
    a688:	b0 e0       	ldi	r27, 0x00	; 0
    a68a:	b7 01       	movw	r22, r14
    a68c:	a6 01       	movw	r20, r12
    a68e:	35 e0       	ldi	r19, 0x05	; 5
    a690:	76 95       	lsr	r23
    a692:	67 95       	ror	r22
    a694:	57 95       	ror	r21
    a696:	47 95       	ror	r20
    a698:	3a 95       	dec	r19
    a69a:	d1 f7       	brne	.-12     	; 0xa690 <dir_next+0xa0>
    a69c:	48 17       	cp	r20, r24
    a69e:	59 07       	cpc	r21, r25
    a6a0:	6a 07       	cpc	r22, r26
    a6a2:	7b 07       	cpc	r23, r27
    a6a4:	08 f4       	brcc	.+2      	; 0xa6a8 <dir_next+0xb8>
    a6a6:	69 c0       	rjmp	.+210    	; 0xa77a <dir_next+0x18a>
    a6a8:	1e 8a       	std	Y+22, r1	; 0x16
    a6aa:	1f 8a       	std	Y+23, r1	; 0x17
    a6ac:	18 8e       	std	Y+24, r1	; 0x18
    a6ae:	19 8e       	std	Y+25, r1	; 0x19
    a6b0:	73 c0       	rjmp	.+230    	; 0xa798 <dir_next+0x1a8>
    a6b2:	81 85       	ldd	r24, Z+9	; 0x09
    a6b4:	92 85       	ldd	r25, Z+10	; 0x0a
    a6b6:	01 97       	sbiw	r24, 0x01	; 1
    a6b8:	a0 e0       	ldi	r26, 0x00	; 0
    a6ba:	b0 e0       	ldi	r27, 0x00	; 0
    a6bc:	26 01       	movw	r4, r12
    a6be:	37 01       	movw	r6, r14
    a6c0:	29 e0       	ldi	r18, 0x09	; 9
    a6c2:	76 94       	lsr	r7
    a6c4:	67 94       	ror	r6
    a6c6:	57 94       	ror	r5
    a6c8:	47 94       	ror	r4
    a6ca:	2a 95       	dec	r18
    a6cc:	d1 f7       	brne	.-12     	; 0xa6c2 <dir_next+0xd2>
    a6ce:	84 21       	and	r24, r4
    a6d0:	95 21       	and	r25, r5
    a6d2:	a6 21       	and	r26, r6
    a6d4:	b7 21       	and	r27, r7
    a6d6:	89 2b       	or	r24, r25
    a6d8:	8a 2b       	or	r24, r26
    a6da:	8b 2b       	or	r24, r27
    a6dc:	09 f0       	breq	.+2      	; 0xa6e0 <dir_next+0xf0>
    a6de:	4d c0       	rjmp	.+154    	; 0xa77a <dir_next+0x18a>
    a6e0:	c8 01       	movw	r24, r16
    a6e2:	5a dc       	rcall	.-1868   	; 0x9f98 <get_fat.isra.10>
    a6e4:	2b 01       	movw	r4, r22
    a6e6:	3c 01       	movw	r6, r24
    a6e8:	62 30       	cpi	r22, 0x02	; 2
    a6ea:	71 05       	cpc	r23, r1
    a6ec:	81 05       	cpc	r24, r1
    a6ee:	91 05       	cpc	r25, r1
    a6f0:	18 f4       	brcc	.+6      	; 0xa6f8 <dir_next+0x108>
    a6f2:	82 e0       	ldi	r24, 0x02	; 2
    a6f4:	90 e0       	ldi	r25, 0x00	; 0
    a6f6:	55 c0       	rjmp	.+170    	; 0xa7a2 <dir_next+0x1b2>
    a6f8:	8f ef       	ldi	r24, 0xFF	; 255
    a6fa:	48 16       	cp	r4, r24
    a6fc:	58 06       	cpc	r5, r24
    a6fe:	68 06       	cpc	r6, r24
    a700:	78 06       	cpc	r7, r24
    a702:	19 f4       	brne	.+6      	; 0xa70a <dir_next+0x11a>
    a704:	81 e0       	ldi	r24, 0x01	; 1
    a706:	90 e0       	ldi	r25, 0x00	; 0
    a708:	4c c0       	rjmp	.+152    	; 0xa7a2 <dir_next+0x1b2>
    a70a:	f8 01       	movw	r30, r16
    a70c:	81 8d       	ldd	r24, Z+25	; 0x19
    a70e:	92 8d       	ldd	r25, Z+26	; 0x1a
    a710:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a712:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a714:	48 16       	cp	r4, r24
    a716:	59 06       	cpc	r5, r25
    a718:	6a 06       	cpc	r6, r26
    a71a:	7b 06       	cpc	r7, r27
    a71c:	08 f1       	brcs	.+66     	; 0xa760 <dir_next+0x170>
    a71e:	ab 28       	or	r10, r11
    a720:	19 f2       	breq	.-122    	; 0xa6a8 <dir_next+0xb8>
    a722:	4a 89       	ldd	r20, Y+18	; 0x12
    a724:	5b 89       	ldd	r21, Y+19	; 0x13
    a726:	6c 89       	ldd	r22, Y+20	; 0x14
    a728:	7d 89       	ldd	r23, Y+21	; 0x15
    a72a:	ce 01       	movw	r24, r28
    a72c:	aa dd       	rcall	.-1196   	; 0xa282 <create_chain>
    a72e:	2b 01       	movw	r4, r22
    a730:	3c 01       	movw	r6, r24
    a732:	61 15       	cp	r22, r1
    a734:	71 05       	cpc	r23, r1
    a736:	81 05       	cpc	r24, r1
    a738:	91 05       	cpc	r25, r1
    a73a:	89 f1       	breq	.+98     	; 0xa79e <dir_next+0x1ae>
    a73c:	61 30       	cpi	r22, 0x01	; 1
    a73e:	71 05       	cpc	r23, r1
    a740:	81 05       	cpc	r24, r1
    a742:	91 05       	cpc	r25, r1
    a744:	b1 f2       	breq	.-84     	; 0xa6f2 <dir_next+0x102>
    a746:	8f ef       	ldi	r24, 0xFF	; 255
    a748:	48 16       	cp	r4, r24
    a74a:	58 06       	cpc	r5, r24
    a74c:	68 06       	cpc	r6, r24
    a74e:	78 06       	cpc	r7, r24
    a750:	c9 f2       	breq	.-78     	; 0xa704 <dir_next+0x114>
    a752:	b3 01       	movw	r22, r6
    a754:	a2 01       	movw	r20, r4
    a756:	c8 01       	movw	r24, r16
    a758:	0e 94 54 4b 	call	0x96a8	; 0x96a8 <dir_clear>
    a75c:	89 2b       	or	r24, r25
    a75e:	91 f6       	brne	.-92     	; 0xa704 <dir_next+0x114>
    a760:	4a 8a       	std	Y+18, r4	; 0x12
    a762:	5b 8a       	std	Y+19, r5	; 0x13
    a764:	6c 8a       	std	Y+20, r6	; 0x14
    a766:	7d 8a       	std	Y+21, r7	; 0x15
    a768:	b3 01       	movw	r22, r6
    a76a:	a2 01       	movw	r20, r4
    a76c:	c8 01       	movw	r24, r16
    a76e:	0e 94 da 47 	call	0x8fb4	; 0x8fb4 <clst2sect>
    a772:	6e 8b       	std	Y+22, r22	; 0x16
    a774:	7f 8b       	std	Y+23, r23	; 0x17
    a776:	88 8f       	std	Y+24, r24	; 0x18
    a778:	99 8f       	std	Y+25, r25	; 0x19
    a77a:	ce 86       	std	Y+14, r12	; 0x0e
    a77c:	df 86       	std	Y+15, r13	; 0x0f
    a77e:	e8 8a       	std	Y+16, r14	; 0x10
    a780:	f9 8a       	std	Y+17, r15	; 0x11
    a782:	0b 5c       	subi	r16, 0xCB	; 203
    a784:	1f 4f       	sbci	r17, 0xFF	; 255
    a786:	e1 e0       	ldi	r30, 0x01	; 1
    a788:	de 22       	and	r13, r30
    a78a:	c0 0e       	add	r12, r16
    a78c:	d1 1e       	adc	r13, r17
    a78e:	db 8e       	std	Y+27, r13	; 0x1b
    a790:	ca 8e       	std	Y+26, r12	; 0x1a
    a792:	80 e0       	ldi	r24, 0x00	; 0
    a794:	90 e0       	ldi	r25, 0x00	; 0
    a796:	05 c0       	rjmp	.+10     	; 0xa7a2 <dir_next+0x1b2>
    a798:	84 e0       	ldi	r24, 0x04	; 4
    a79a:	90 e0       	ldi	r25, 0x00	; 0
    a79c:	02 c0       	rjmp	.+4      	; 0xa7a2 <dir_next+0x1b2>
    a79e:	87 e0       	ldi	r24, 0x07	; 7
    a7a0:	90 e0       	ldi	r25, 0x00	; 0
    a7a2:	df 91       	pop	r29
    a7a4:	cf 91       	pop	r28
    a7a6:	1f 91       	pop	r17
    a7a8:	0f 91       	pop	r16
    a7aa:	ff 90       	pop	r15
    a7ac:	ef 90       	pop	r14
    a7ae:	df 90       	pop	r13
    a7b0:	cf 90       	pop	r12
    a7b2:	bf 90       	pop	r11
    a7b4:	af 90       	pop	r10
    a7b6:	7f 90       	pop	r7
    a7b8:	6f 90       	pop	r6
    a7ba:	5f 90       	pop	r5
    a7bc:	4f 90       	pop	r4
    a7be:	08 95       	ret

0000a7c0 <dir_alloc>:
    a7c0:	a0 e0       	ldi	r26, 0x00	; 0
    a7c2:	b0 e0       	ldi	r27, 0x00	; 0
    a7c4:	e6 ee       	ldi	r30, 0xE6	; 230
    a7c6:	f3 e5       	ldi	r31, 0x53	; 83
    a7c8:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
    a7cc:	ec 01       	movw	r28, r24
    a7ce:	6b 01       	movw	r12, r22
    a7d0:	e8 80       	ld	r14, Y
    a7d2:	f9 80       	ldd	r15, Y+1	; 0x01
    a7d4:	40 e0       	ldi	r20, 0x00	; 0
    a7d6:	50 e0       	ldi	r21, 0x00	; 0
    a7d8:	ba 01       	movw	r22, r20
    a7da:	92 dc       	rcall	.-1756   	; 0xa100 <dir_sdi>
    a7dc:	00 97       	sbiw	r24, 0x00	; 0
    a7de:	f9 f4       	brne	.+62     	; 0xa81e <dir_alloc+0x5e>
    a7e0:	00 e0       	ldi	r16, 0x00	; 0
    a7e2:	10 e0       	ldi	r17, 0x00	; 0
    a7e4:	4e 89       	ldd	r20, Y+22	; 0x16
    a7e6:	5f 89       	ldd	r21, Y+23	; 0x17
    a7e8:	68 8d       	ldd	r22, Y+24	; 0x18
    a7ea:	79 8d       	ldd	r23, Y+25	; 0x19
    a7ec:	c7 01       	movw	r24, r14
    a7ee:	04 d8       	rcall	.-4088   	; 0x97f8 <move_window>
    a7f0:	00 97       	sbiw	r24, 0x00	; 0
    a7f2:	a9 f4       	brne	.+42     	; 0xa81e <dir_alloc+0x5e>
    a7f4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a7f6:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a7f8:	20 81       	ld	r18, Z
    a7fa:	25 3e       	cpi	r18, 0xE5	; 229
    a7fc:	11 f0       	breq	.+4      	; 0xa802 <dir_alloc+0x42>
    a7fe:	21 11       	cpse	r18, r1
    a800:	06 c0       	rjmp	.+12     	; 0xa80e <dir_alloc+0x4e>
    a802:	0f 5f       	subi	r16, 0xFF	; 255
    a804:	1f 4f       	sbci	r17, 0xFF	; 255
    a806:	0c 15       	cp	r16, r12
    a808:	1d 05       	cpc	r17, r13
    a80a:	19 f4       	brne	.+6      	; 0xa812 <dir_alloc+0x52>
    a80c:	0d c0       	rjmp	.+26     	; 0xa828 <dir_alloc+0x68>
    a80e:	00 e0       	ldi	r16, 0x00	; 0
    a810:	10 e0       	ldi	r17, 0x00	; 0
    a812:	61 e0       	ldi	r22, 0x01	; 1
    a814:	70 e0       	ldi	r23, 0x00	; 0
    a816:	ce 01       	movw	r24, r28
    a818:	eb de       	rcall	.-554    	; 0xa5f0 <dir_next>
    a81a:	00 97       	sbiw	r24, 0x00	; 0
    a81c:	19 f3       	breq	.-58     	; 0xa7e4 <dir_alloc+0x24>
    a81e:	84 30       	cpi	r24, 0x04	; 4
    a820:	91 05       	cpc	r25, r1
    a822:	11 f4       	brne	.+4      	; 0xa828 <dir_alloc+0x68>
    a824:	87 e0       	ldi	r24, 0x07	; 7
    a826:	90 e0       	ldi	r25, 0x00	; 0
    a828:	cd b7       	in	r28, 0x3d	; 61
    a82a:	de b7       	in	r29, 0x3e	; 62
    a82c:	e8 e0       	ldi	r30, 0x08	; 8
    a82e:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

0000a832 <dir_read>:
    a832:	a0 e0       	ldi	r26, 0x00	; 0
    a834:	b0 e0       	ldi	r27, 0x00	; 0
    a836:	ef e1       	ldi	r30, 0x1F	; 31
    a838:	f4 e5       	ldi	r31, 0x54	; 84
    a83a:	0c 94 d5 e2 	jmp	0x1c5aa	; 0x1c5aa <__prologue_saves__+0xc>
    a83e:	ec 01       	movw	r28, r24
    a840:	7b 01       	movw	r14, r22
    a842:	a8 80       	ld	r10, Y
    a844:	b9 80       	ldd	r11, Y+1	; 0x01
    a846:	dd 24       	eor	r13, r13
    a848:	da 94       	dec	r13
    a84a:	1f ef       	ldi	r17, 0xFF	; 255
    a84c:	84 e0       	ldi	r24, 0x04	; 4
    a84e:	90 e0       	ldi	r25, 0x00	; 0
    a850:	fd e0       	ldi	r31, 0x0D	; 13
    a852:	cf 2e       	mov	r12, r31
    a854:	4e 89       	ldd	r20, Y+22	; 0x16
    a856:	5f 89       	ldd	r21, Y+23	; 0x17
    a858:	68 8d       	ldd	r22, Y+24	; 0x18
    a85a:	79 8d       	ldd	r23, Y+25	; 0x19
    a85c:	41 15       	cp	r20, r1
    a85e:	51 05       	cpc	r21, r1
    a860:	61 05       	cpc	r22, r1
    a862:	71 05       	cpc	r23, r1
    a864:	09 f4       	brne	.+2      	; 0xa868 <dir_read+0x36>
    a866:	9a c0       	rjmp	.+308    	; 0xa99c <dir_read+0x16a>
    a868:	c5 01       	movw	r24, r10
    a86a:	0e 94 fc 4b 	call	0x97f8	; 0x97f8 <move_window>
    a86e:	00 97       	sbiw	r24, 0x00	; 0
    a870:	09 f0       	breq	.+2      	; 0xa874 <dir_read+0x42>
    a872:	96 c0       	rjmp	.+300    	; 0xa9a0 <dir_read+0x16e>
    a874:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a876:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a878:	f4 01       	movw	r30, r8
    a87a:	00 81       	ld	r16, Z
    a87c:	00 23       	and	r16, r16
    a87e:	09 f4       	brne	.+2      	; 0xa882 <dir_read+0x50>
    a880:	97 c0       	rjmp	.+302    	; 0xa9b0 <dir_read+0x17e>
    a882:	83 85       	ldd	r24, Z+11	; 0x0b
    a884:	8f 73       	andi	r24, 0x3F	; 63
    a886:	8c 83       	std	Y+4, r24	; 0x04
    a888:	05 3e       	cpi	r16, 0xE5	; 229
    a88a:	09 f4       	brne	.+2      	; 0xa88e <dir_read+0x5c>
    a88c:	7e c0       	rjmp	.+252    	; 0xa98a <dir_read+0x158>
    a88e:	0e 32       	cpi	r16, 0x2E	; 46
    a890:	09 f4       	brne	.+2      	; 0xa894 <dir_read+0x62>
    a892:	7b c0       	rjmp	.+246    	; 0xa98a <dir_read+0x158>
    a894:	21 e0       	ldi	r18, 0x01	; 1
    a896:	30 e0       	ldi	r19, 0x00	; 0
    a898:	98 2f       	mov	r25, r24
    a89a:	9f 71       	andi	r25, 0x1F	; 31
    a89c:	98 30       	cpi	r25, 0x08	; 8
    a89e:	11 f0       	breq	.+4      	; 0xa8a4 <dir_read+0x72>
    a8a0:	20 e0       	ldi	r18, 0x00	; 0
    a8a2:	30 e0       	ldi	r19, 0x00	; 0
    a8a4:	2e 15       	cp	r18, r14
    a8a6:	3f 05       	cpc	r19, r15
    a8a8:	09 f0       	breq	.+2      	; 0xa8ac <dir_read+0x7a>
    a8aa:	6f c0       	rjmp	.+222    	; 0xa98a <dir_read+0x158>
    a8ac:	8f 30       	cpi	r24, 0x0F	; 15
    a8ae:	09 f0       	breq	.+2      	; 0xa8b2 <dir_read+0x80>
    a8b0:	5c c0       	rjmp	.+184    	; 0xa96a <dir_read+0x138>
    a8b2:	06 ff       	sbrs	r16, 6
    a8b4:	0c c0       	rjmp	.+24     	; 0xa8ce <dir_read+0x9c>
    a8b6:	f4 01       	movw	r30, r8
    a8b8:	85 85       	ldd	r24, Z+13	; 0x0d
    a8ba:	0f 7b       	andi	r16, 0xBF	; 191
    a8bc:	4e 85       	ldd	r20, Y+14	; 0x0e
    a8be:	5f 85       	ldd	r21, Y+15	; 0x0f
    a8c0:	68 89       	ldd	r22, Y+16	; 0x10
    a8c2:	79 89       	ldd	r23, Y+17	; 0x11
    a8c4:	48 a7       	std	Y+40, r20	; 0x28
    a8c6:	59 a7       	std	Y+41, r21	; 0x29
    a8c8:	6a a7       	std	Y+42, r22	; 0x2a
    a8ca:	7b a7       	std	Y+43, r23	; 0x2b
    a8cc:	03 c0       	rjmp	.+6      	; 0xa8d4 <dir_read+0xa2>
    a8ce:	10 13       	cpse	r17, r16
    a8d0:	5c c0       	rjmp	.+184    	; 0xa98a <dir_read+0x158>
    a8d2:	8d 2d       	mov	r24, r13
    a8d4:	f4 01       	movw	r30, r8
    a8d6:	d5 84       	ldd	r13, Z+13	; 0x0d
    a8d8:	d8 12       	cpse	r13, r24
    a8da:	56 c0       	rjmp	.+172    	; 0xa988 <dir_read+0x156>
    a8dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    a8de:	93 8d       	ldd	r25, Z+27	; 0x1b
    a8e0:	89 2b       	or	r24, r25
    a8e2:	09 f0       	breq	.+2      	; 0xa8e6 <dir_read+0xb4>
    a8e4:	52 c0       	rjmp	.+164    	; 0xa98a <dir_read+0x158>
    a8e6:	f5 01       	movw	r30, r10
    a8e8:	63 85       	ldd	r22, Z+11	; 0x0b
    a8ea:	74 85       	ldd	r23, Z+12	; 0x0c
    a8ec:	f4 01       	movw	r30, r8
    a8ee:	80 81       	ld	r24, Z
    a8f0:	90 e0       	ldi	r25, 0x00	; 0
    a8f2:	8f 7b       	andi	r24, 0xBF	; 191
    a8f4:	01 97       	sbiw	r24, 0x01	; 1
    a8f6:	c8 9e       	mul	r12, r24
    a8f8:	90 01       	movw	r18, r0
    a8fa:	c9 9e       	mul	r12, r25
    a8fc:	30 0d       	add	r19, r0
    a8fe:	11 24       	eor	r1, r1
    a900:	aa ed       	ldi	r26, 0xDA	; 218
    a902:	b4 e0       	ldi	r27, 0x04	; 4
    a904:	81 e0       	ldi	r24, 0x01	; 1
    a906:	90 e0       	ldi	r25, 0x00	; 0
    a908:	4d 91       	ld	r20, X+
    a90a:	f4 01       	movw	r30, r8
    a90c:	e4 0f       	add	r30, r20
    a90e:	f1 1d       	adc	r31, r1
    a910:	40 81       	ld	r20, Z
    a912:	51 81       	ldd	r21, Z+1	; 0x01
    a914:	00 97       	sbiw	r24, 0x00	; 0
    a916:	81 f0       	breq	.+32     	; 0xa938 <dir_read+0x106>
    a918:	2f 3f       	cpi	r18, 0xFF	; 255
    a91a:	31 05       	cpc	r19, r1
    a91c:	09 f0       	breq	.+2      	; 0xa920 <dir_read+0xee>
    a91e:	a8 f5       	brcc	.+106    	; 0xa98a <dir_read+0x158>
    a920:	c9 01       	movw	r24, r18
    a922:	88 0f       	add	r24, r24
    a924:	99 1f       	adc	r25, r25
    a926:	86 0f       	add	r24, r22
    a928:	97 1f       	adc	r25, r23
    a92a:	fc 01       	movw	r30, r24
    a92c:	51 83       	std	Z+1, r21	; 0x01
    a92e:	40 83       	st	Z, r20
    a930:	ca 01       	movw	r24, r20
    a932:	2f 5f       	subi	r18, 0xFF	; 255
    a934:	3f 4f       	sbci	r19, 0xFF	; 255
    a936:	03 c0       	rjmp	.+6      	; 0xa93e <dir_read+0x10c>
    a938:	4f 3f       	cpi	r20, 0xFF	; 255
    a93a:	5f 4f       	sbci	r21, 0xFF	; 255
    a93c:	31 f5       	brne	.+76     	; 0xa98a <dir_read+0x158>
    a93e:	44 e0       	ldi	r20, 0x04	; 4
    a940:	a7 3e       	cpi	r26, 0xE7	; 231
    a942:	b4 07       	cpc	r27, r20
    a944:	09 f7       	brne	.-62     	; 0xa908 <dir_read+0xd6>
    a946:	f4 01       	movw	r30, r8
    a948:	40 81       	ld	r20, Z
    a94a:	46 ff       	sbrs	r20, 6
    a94c:	2e c0       	rjmp	.+92     	; 0xa9aa <dir_read+0x178>
    a94e:	89 2b       	or	r24, r25
    a950:	61 f1       	breq	.+88     	; 0xa9aa <dir_read+0x178>
    a952:	2f 3f       	cpi	r18, 0xFF	; 255
    a954:	31 05       	cpc	r19, r1
    a956:	09 f0       	breq	.+2      	; 0xa95a <dir_read+0x128>
    a958:	c0 f4       	brcc	.+48     	; 0xa98a <dir_read+0x158>
    a95a:	22 0f       	add	r18, r18
    a95c:	33 1f       	adc	r19, r19
    a95e:	fb 01       	movw	r30, r22
    a960:	e2 0f       	add	r30, r18
    a962:	f3 1f       	adc	r31, r19
    a964:	11 82       	std	Z+1, r1	; 0x01
    a966:	10 82       	st	Z, r1
    a968:	20 c0       	rjmp	.+64     	; 0xa9aa <dir_read+0x178>
    a96a:	11 11       	cpse	r17, r1
    a96c:	05 c0       	rjmp	.+10     	; 0xa978 <dir_read+0x146>
    a96e:	c4 01       	movw	r24, r8
    a970:	0e 94 3e 48 	call	0x907c	; 0x907c <sum_sfn>
    a974:	d8 16       	cp	r13, r24
    a976:	f9 f0       	breq	.+62     	; 0xa9b6 <dir_read+0x184>
    a978:	8f ef       	ldi	r24, 0xFF	; 255
    a97a:	9f ef       	ldi	r25, 0xFF	; 255
    a97c:	dc 01       	movw	r26, r24
    a97e:	88 a7       	std	Y+40, r24	; 0x28
    a980:	99 a7       	std	Y+41, r25	; 0x29
    a982:	aa a7       	std	Y+42, r26	; 0x2a
    a984:	bb a7       	std	Y+43, r27	; 0x2b
    a986:	17 c0       	rjmp	.+46     	; 0xa9b6 <dir_read+0x184>
    a988:	d8 2e       	mov	r13, r24
    a98a:	1f ef       	ldi	r17, 0xFF	; 255
    a98c:	60 e0       	ldi	r22, 0x00	; 0
    a98e:	70 e0       	ldi	r23, 0x00	; 0
    a990:	ce 01       	movw	r24, r28
    a992:	2e de       	rcall	.-932    	; 0xa5f0 <dir_next>
    a994:	00 97       	sbiw	r24, 0x00	; 0
    a996:	09 f4       	brne	.+2      	; 0xa99a <dir_read+0x168>
    a998:	5d cf       	rjmp	.-326    	; 0xa854 <dir_read+0x22>
    a99a:	02 c0       	rjmp	.+4      	; 0xa9a0 <dir_read+0x16e>
    a99c:	00 97       	sbiw	r24, 0x00	; 0
    a99e:	59 f0       	breq	.+22     	; 0xa9b6 <dir_read+0x184>
    a9a0:	1e 8a       	std	Y+22, r1	; 0x16
    a9a2:	1f 8a       	std	Y+23, r1	; 0x17
    a9a4:	18 8e       	std	Y+24, r1	; 0x18
    a9a6:	19 8e       	std	Y+25, r1	; 0x19
    a9a8:	08 c0       	rjmp	.+16     	; 0xa9ba <dir_read+0x188>
    a9aa:	1f ef       	ldi	r17, 0xFF	; 255
    a9ac:	10 0f       	add	r17, r16
    a9ae:	ee cf       	rjmp	.-36     	; 0xa98c <dir_read+0x15a>
    a9b0:	84 e0       	ldi	r24, 0x04	; 4
    a9b2:	90 e0       	ldi	r25, 0x00	; 0
    a9b4:	f5 cf       	rjmp	.-22     	; 0xa9a0 <dir_read+0x16e>
    a9b6:	80 e0       	ldi	r24, 0x00	; 0
    a9b8:	90 e0       	ldi	r25, 0x00	; 0
    a9ba:	cd b7       	in	r28, 0x3d	; 61
    a9bc:	de b7       	in	r29, 0x3e	; 62
    a9be:	ec e0       	ldi	r30, 0x0C	; 12
    a9c0:	0c 94 f1 e2 	jmp	0x1c5e2	; 0x1c5e2 <__epilogue_restores__+0xc>

0000a9c4 <dir_remove>:
    a9c4:	a0 e0       	ldi	r26, 0x00	; 0
    a9c6:	b0 e0       	ldi	r27, 0x00	; 0
    a9c8:	e8 ee       	ldi	r30, 0xE8	; 232
    a9ca:	f4 e5       	ldi	r31, 0x54	; 84
    a9cc:	0c 94 d7 e2 	jmp	0x1c5ae	; 0x1c5ae <__prologue_saves__+0x10>
    a9d0:	ec 01       	movw	r28, r24
    a9d2:	08 81       	ld	r16, Y
    a9d4:	19 81       	ldd	r17, Y+1	; 0x01
    a9d6:	ce 84       	ldd	r12, Y+14	; 0x0e
    a9d8:	df 84       	ldd	r13, Y+15	; 0x0f
    a9da:	e8 88       	ldd	r14, Y+16	; 0x10
    a9dc:	f9 88       	ldd	r15, Y+17	; 0x11
    a9de:	48 a5       	ldd	r20, Y+40	; 0x28
    a9e0:	59 a5       	ldd	r21, Y+41	; 0x29
    a9e2:	6a a5       	ldd	r22, Y+42	; 0x2a
    a9e4:	7b a5       	ldd	r23, Y+43	; 0x2b
    a9e6:	4f 3f       	cpi	r20, 0xFF	; 255
    a9e8:	8f ef       	ldi	r24, 0xFF	; 255
    a9ea:	58 07       	cpc	r21, r24
    a9ec:	68 07       	cpc	r22, r24
    a9ee:	78 07       	cpc	r23, r24
    a9f0:	29 f4       	brne	.+10     	; 0xa9fc <dir_remove+0x38>
    a9f2:	85 ee       	ldi	r24, 0xE5	; 229
    a9f4:	b8 2e       	mov	r11, r24
    a9f6:	aa 24       	eor	r10, r10
    a9f8:	a3 94       	inc	r10
    a9fa:	19 c0       	rjmp	.+50     	; 0xaa2e <dir_remove+0x6a>
    a9fc:	ce 01       	movw	r24, r28
    a9fe:	80 db       	rcall	.-2304   	; 0xa100 <dir_sdi>
    aa00:	00 97       	sbiw	r24, 0x00	; 0
    aa02:	19 f5       	brne	.+70     	; 0xaa4a <dir_remove+0x86>
    aa04:	f6 cf       	rjmp	.-20     	; 0xa9f2 <dir_remove+0x2e>
    aa06:	ea 8d       	ldd	r30, Y+26	; 0x1a
    aa08:	fb 8d       	ldd	r31, Y+27	; 0x1b
    aa0a:	b0 82       	st	Z, r11
    aa0c:	f8 01       	movw	r30, r16
    aa0e:	a3 82       	std	Z+3, r10	; 0x03
    aa10:	4e 85       	ldd	r20, Y+14	; 0x0e
    aa12:	5f 85       	ldd	r21, Y+15	; 0x0f
    aa14:	68 89       	ldd	r22, Y+16	; 0x10
    aa16:	79 89       	ldd	r23, Y+17	; 0x11
    aa18:	4c 15       	cp	r20, r12
    aa1a:	5d 05       	cpc	r21, r13
    aa1c:	6e 05       	cpc	r22, r14
    aa1e:	7f 05       	cpc	r23, r15
    aa20:	a0 f4       	brcc	.+40     	; 0xaa4a <dir_remove+0x86>
    aa22:	60 e0       	ldi	r22, 0x00	; 0
    aa24:	70 e0       	ldi	r23, 0x00	; 0
    aa26:	ce 01       	movw	r24, r28
    aa28:	e3 dd       	rcall	.-1082   	; 0xa5f0 <dir_next>
    aa2a:	00 97       	sbiw	r24, 0x00	; 0
    aa2c:	49 f4       	brne	.+18     	; 0xaa40 <dir_remove+0x7c>
    aa2e:	4e 89       	ldd	r20, Y+22	; 0x16
    aa30:	5f 89       	ldd	r21, Y+23	; 0x17
    aa32:	68 8d       	ldd	r22, Y+24	; 0x18
    aa34:	79 8d       	ldd	r23, Y+25	; 0x19
    aa36:	c8 01       	movw	r24, r16
    aa38:	0e 94 fc 4b 	call	0x97f8	; 0x97f8 <move_window>
    aa3c:	00 97       	sbiw	r24, 0x00	; 0
    aa3e:	19 f3       	breq	.-58     	; 0xaa06 <dir_remove+0x42>
    aa40:	84 30       	cpi	r24, 0x04	; 4
    aa42:	91 05       	cpc	r25, r1
    aa44:	11 f4       	brne	.+4      	; 0xaa4a <dir_remove+0x86>
    aa46:	82 e0       	ldi	r24, 0x02	; 2
    aa48:	90 e0       	ldi	r25, 0x00	; 0
    aa4a:	cd b7       	in	r28, 0x3d	; 61
    aa4c:	de b7       	in	r29, 0x3e	; 62
    aa4e:	ea e0       	ldi	r30, 0x0A	; 10
    aa50:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__epilogue_restores__+0x10>

0000aa54 <dir_find>:
    aa54:	ac e0       	ldi	r26, 0x0C	; 12
    aa56:	b0 e0       	ldi	r27, 0x00	; 0
    aa58:	e0 e3       	ldi	r30, 0x30	; 48
    aa5a:	f5 e5       	ldi	r31, 0x55	; 85
    aa5c:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
    aa60:	9c 87       	std	Y+12, r25	; 0x0c
    aa62:	8b 87       	std	Y+11, r24	; 0x0b
    aa64:	fc 01       	movw	r30, r24
    aa66:	01 90       	ld	r0, Z+
    aa68:	f0 81       	ld	r31, Z
    aa6a:	e0 2d       	mov	r30, r0
    aa6c:	fc 83       	std	Y+4, r31	; 0x04
    aa6e:	eb 83       	std	Y+3, r30	; 0x03
    aa70:	40 e0       	ldi	r20, 0x00	; 0
    aa72:	50 e0       	ldi	r21, 0x00	; 0
    aa74:	ba 01       	movw	r22, r20
    aa76:	44 db       	rcall	.-2424   	; 0xa100 <dir_sdi>
    aa78:	00 97       	sbiw	r24, 0x00	; 0
    aa7a:	09 f0       	breq	.+2      	; 0xaa7e <dir_find+0x2a>
    aa7c:	e7 c0       	rjmp	.+462    	; 0xac4c <dir_find+0x1f8>
    aa7e:	8f ef       	ldi	r24, 0xFF	; 255
    aa80:	9f ef       	ldi	r25, 0xFF	; 255
    aa82:	dc 01       	movw	r26, r24
    aa84:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa86:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa88:	80 a7       	std	Z+40, r24	; 0x28
    aa8a:	91 a7       	std	Z+41, r25	; 0x29
    aa8c:	a2 a7       	std	Z+42, r26	; 0x2a
    aa8e:	b3 a7       	std	Z+43, r27	; 0x2b
    aa90:	0f ef       	ldi	r16, 0xFF	; 255
    aa92:	1f ef       	ldi	r17, 0xFF	; 255
    aa94:	44 24       	eor	r4, r4
    aa96:	4a 94       	dec	r4
    aa98:	54 2c       	mov	r5, r4
    aa9a:	32 01       	movw	r6, r4
    aa9c:	7c 96       	adiw	r30, 0x1c	; 28
    aa9e:	fa 87       	std	Y+10, r31	; 0x0a
    aaa0:	e9 87       	std	Y+9, r30	; 0x09
    aaa2:	eb 85       	ldd	r30, Y+11	; 0x0b
    aaa4:	fc 85       	ldd	r31, Y+12	; 0x0c
    aaa6:	46 89       	ldd	r20, Z+22	; 0x16
    aaa8:	57 89       	ldd	r21, Z+23	; 0x17
    aaaa:	60 8d       	ldd	r22, Z+24	; 0x18
    aaac:	71 8d       	ldd	r23, Z+25	; 0x19
    aaae:	8b 81       	ldd	r24, Y+3	; 0x03
    aab0:	9c 81       	ldd	r25, Y+4	; 0x04
    aab2:	0e 94 fc 4b 	call	0x97f8	; 0x97f8 <move_window>
    aab6:	00 97       	sbiw	r24, 0x00	; 0
    aab8:	09 f0       	breq	.+2      	; 0xaabc <dir_find+0x68>
    aaba:	c8 c0       	rjmp	.+400    	; 0xac4c <dir_find+0x1f8>
    aabc:	eb 85       	ldd	r30, Y+11	; 0x0b
    aabe:	fc 85       	ldd	r31, Y+12	; 0x0c
    aac0:	e2 8c       	ldd	r14, Z+26	; 0x1a
    aac2:	f3 8c       	ldd	r15, Z+27	; 0x1b
    aac4:	f7 01       	movw	r30, r14
    aac6:	d0 80       	ld	r13, Z
    aac8:	dd 20       	and	r13, r13
    aaca:	09 f4       	brne	.+2      	; 0xaace <dir_find+0x7a>
    aacc:	c1 c0       	rjmp	.+386    	; 0xac50 <dir_find+0x1fc>
    aace:	93 85       	ldd	r25, Z+11	; 0x0b
    aad0:	89 2f       	mov	r24, r25
    aad2:	8f 73       	andi	r24, 0x3F	; 63
    aad4:	eb 85       	ldd	r30, Y+11	; 0x0b
    aad6:	fc 85       	ldd	r31, Y+12	; 0x0c
    aad8:	84 83       	std	Z+4, r24	; 0x04
    aada:	f5 ee       	ldi	r31, 0xE5	; 229
    aadc:	df 16       	cp	r13, r31
    aade:	09 f4       	brne	.+2      	; 0xaae2 <dir_find+0x8e>
    aae0:	a6 c0       	rjmp	.+332    	; 0xac2e <dir_find+0x1da>
    aae2:	93 ff       	sbrs	r25, 3
    aae4:	04 c0       	rjmp	.+8      	; 0xaaee <dir_find+0x9a>
    aae6:	8f 30       	cpi	r24, 0x0F	; 15
    aae8:	09 f0       	breq	.+2      	; 0xaaec <dir_find+0x98>
    aaea:	a1 c0       	rjmp	.+322    	; 0xac2e <dir_find+0x1da>
    aaec:	03 c0       	rjmp	.+6      	; 0xaaf4 <dir_find+0xa0>
    aaee:	8f 30       	cpi	r24, 0x0F	; 15
    aaf0:	09 f0       	breq	.+2      	; 0xaaf4 <dir_find+0xa0>
    aaf2:	88 c0       	rjmp	.+272    	; 0xac04 <dir_find+0x1b0>
    aaf4:	eb 85       	ldd	r30, Y+11	; 0x0b
    aaf6:	fc 85       	ldd	r31, Y+12	; 0x0c
    aaf8:	87 a1       	ldd	r24, Z+39	; 0x27
    aafa:	86 fd       	sbrc	r24, 6
    aafc:	9f c0       	rjmp	.+318    	; 0xac3c <dir_find+0x1e8>
    aafe:	d6 fe       	sbrs	r13, 6
    ab00:	10 c0       	rjmp	.+32     	; 0xab22 <dir_find+0xce>
    ab02:	f7 01       	movw	r30, r14
    ab04:	05 85       	ldd	r16, Z+13	; 0x0d
    ab06:	fd 2d       	mov	r31, r13
    ab08:	ff 7b       	andi	r31, 0xBF	; 191
    ab0a:	df 2e       	mov	r13, r31
    ab0c:	eb 85       	ldd	r30, Y+11	; 0x0b
    ab0e:	fc 85       	ldd	r31, Y+12	; 0x0c
    ab10:	86 85       	ldd	r24, Z+14	; 0x0e
    ab12:	97 85       	ldd	r25, Z+15	; 0x0f
    ab14:	a0 89       	ldd	r26, Z+16	; 0x10
    ab16:	b1 89       	ldd	r27, Z+17	; 0x11
    ab18:	80 a7       	std	Z+40, r24	; 0x28
    ab1a:	91 a7       	std	Z+41, r25	; 0x29
    ab1c:	a2 a7       	std	Z+42, r26	; 0x2a
    ab1e:	b3 a7       	std	Z+43, r27	; 0x2b
    ab20:	02 c0       	rjmp	.+4      	; 0xab26 <dir_find+0xd2>
    ab22:	1d 11       	cpse	r17, r13
    ab24:	8a c0       	rjmp	.+276    	; 0xac3a <dir_find+0x1e6>
    ab26:	f7 01       	movw	r30, r14
    ab28:	c5 84       	ldd	r12, Z+13	; 0x0d
    ab2a:	c0 12       	cpse	r12, r16
    ab2c:	86 c0       	rjmp	.+268    	; 0xac3a <dir_find+0x1e6>
    ab2e:	82 8d       	ldd	r24, Z+26	; 0x1a
    ab30:	93 8d       	ldd	r25, Z+27	; 0x1b
    ab32:	89 2b       	or	r24, r25
    ab34:	09 f0       	breq	.+2      	; 0xab38 <dir_find+0xe4>
    ab36:	91 c0       	rjmp	.+290    	; 0xac5a <dir_find+0x206>
    ab38:	eb 81       	ldd	r30, Y+3	; 0x03
    ab3a:	fc 81       	ldd	r31, Y+4	; 0x04
    ab3c:	03 84       	ldd	r0, Z+11	; 0x0b
    ab3e:	f4 85       	ldd	r31, Z+12	; 0x0c
    ab40:	e0 2d       	mov	r30, r0
    ab42:	fe 83       	std	Y+6, r31	; 0x06
    ab44:	ed 83       	std	Y+5, r30	; 0x05
    ab46:	f7 01       	movw	r30, r14
    ab48:	80 81       	ld	r24, Z
    ab4a:	8f 73       	andi	r24, 0x3F	; 63
    ab4c:	90 e0       	ldi	r25, 0x00	; 0
    ab4e:	01 97       	sbiw	r24, 0x01	; 1
    ab50:	fd e0       	ldi	r31, 0x0D	; 13
    ab52:	f8 9f       	mul	r31, r24
    ab54:	80 01       	movw	r16, r0
    ab56:	f9 9f       	mul	r31, r25
    ab58:	10 0d       	add	r17, r0
    ab5a:	11 24       	eor	r1, r1
    ab5c:	2a ed       	ldi	r18, 0xDA	; 218
    ab5e:	34 e0       	ldi	r19, 0x04	; 4
    ab60:	3a 83       	std	Y+2, r19	; 0x02
    ab62:	29 83       	std	Y+1, r18	; 0x01
    ab64:	81 e0       	ldi	r24, 0x01	; 1
    ab66:	90 e0       	ldi	r25, 0x00	; 0
    ab68:	e9 81       	ldd	r30, Y+1	; 0x01
    ab6a:	fa 81       	ldd	r31, Y+2	; 0x02
    ab6c:	21 91       	ld	r18, Z+
    ab6e:	fa 83       	std	Y+2, r31	; 0x02
    ab70:	e9 83       	std	Y+1, r30	; 0x01
    ab72:	f7 01       	movw	r30, r14
    ab74:	e2 0f       	add	r30, r18
    ab76:	f1 1d       	adc	r31, r1
    ab78:	20 80       	ld	r2, Z
    ab7a:	31 80       	ldd	r3, Z+1	; 0x01
    ab7c:	00 97       	sbiw	r24, 0x00	; 0
    ab7e:	39 f1       	breq	.+78     	; 0xabce <dir_find+0x17a>
    ab80:	0f 3f       	cpi	r16, 0xFF	; 255
    ab82:	11 05       	cpc	r17, r1
    ab84:	11 f0       	breq	.+4      	; 0xab8a <dir_find+0x136>
    ab86:	08 f0       	brcs	.+2      	; 0xab8a <dir_find+0x136>
    ab88:	68 c0       	rjmp	.+208    	; 0xac5a <dir_find+0x206>
    ab8a:	b1 01       	movw	r22, r2
    ab8c:	80 e0       	ldi	r24, 0x00	; 0
    ab8e:	90 e0       	ldi	r25, 0x00	; 0
    ab90:	0e 94 d7 69 	call	0xd3ae	; 0xd3ae <ff_wtoupper>
    ab94:	4b 01       	movw	r8, r22
    ab96:	5c 01       	movw	r10, r24
    ab98:	98 01       	movw	r18, r16
    ab9a:	2f 5f       	subi	r18, 0xFF	; 255
    ab9c:	3f 4f       	sbci	r19, 0xFF	; 255
    ab9e:	38 87       	std	Y+8, r19	; 0x08
    aba0:	2f 83       	std	Y+7, r18	; 0x07
    aba2:	00 0f       	add	r16, r16
    aba4:	11 1f       	adc	r17, r17
    aba6:	ed 81       	ldd	r30, Y+5	; 0x05
    aba8:	fe 81       	ldd	r31, Y+6	; 0x06
    abaa:	e0 0f       	add	r30, r16
    abac:	f1 1f       	adc	r31, r17
    abae:	60 81       	ld	r22, Z
    abb0:	71 81       	ldd	r23, Z+1	; 0x01
    abb2:	80 e0       	ldi	r24, 0x00	; 0
    abb4:	90 e0       	ldi	r25, 0x00	; 0
    abb6:	0e 94 d7 69 	call	0xd3ae	; 0xd3ae <ff_wtoupper>
    abba:	86 16       	cp	r8, r22
    abbc:	97 06       	cpc	r9, r23
    abbe:	a8 06       	cpc	r10, r24
    abc0:	b9 06       	cpc	r11, r25
    abc2:	09 f0       	breq	.+2      	; 0xabc6 <dir_find+0x172>
    abc4:	4a c0       	rjmp	.+148    	; 0xac5a <dir_find+0x206>
    abc6:	c1 01       	movw	r24, r2
    abc8:	0f 81       	ldd	r16, Y+7	; 0x07
    abca:	18 85       	ldd	r17, Y+8	; 0x08
    abcc:	05 c0       	rjmp	.+10     	; 0xabd8 <dir_find+0x184>
    abce:	3f ef       	ldi	r19, 0xFF	; 255
    abd0:	23 16       	cp	r2, r19
    abd2:	33 06       	cpc	r3, r19
    abd4:	09 f0       	breq	.+2      	; 0xabd8 <dir_find+0x184>
    abd6:	41 c0       	rjmp	.+130    	; 0xac5a <dir_find+0x206>
    abd8:	e9 81       	ldd	r30, Y+1	; 0x01
    abda:	fa 81       	ldd	r31, Y+2	; 0x02
    abdc:	e7 5e       	subi	r30, 0xE7	; 231
    abde:	f4 40       	sbci	r31, 0x04	; 4
    abe0:	19 f6       	brne	.-122    	; 0xab68 <dir_find+0x114>
    abe2:	f7 01       	movw	r30, r14
    abe4:	20 81       	ld	r18, Z
    abe6:	26 ff       	sbrs	r18, 6
    abe8:	3a c0       	rjmp	.+116    	; 0xac5e <dir_find+0x20a>
    abea:	89 2b       	or	r24, r25
    abec:	c1 f1       	breq	.+112    	; 0xac5e <dir_find+0x20a>
    abee:	00 0f       	add	r16, r16
    abf0:	11 1f       	adc	r17, r17
    abf2:	ed 81       	ldd	r30, Y+5	; 0x05
    abf4:	fe 81       	ldd	r31, Y+6	; 0x06
    abf6:	e0 0f       	add	r30, r16
    abf8:	f1 1f       	adc	r31, r17
    abfa:	80 81       	ld	r24, Z
    abfc:	91 81       	ldd	r25, Z+1	; 0x01
    abfe:	89 2b       	or	r24, r25
    ac00:	71 f1       	breq	.+92     	; 0xac5e <dir_find+0x20a>
    ac02:	2b c0       	rjmp	.+86     	; 0xac5a <dir_find+0x206>
    ac04:	11 11       	cpse	r17, r1
    ac06:	05 c0       	rjmp	.+10     	; 0xac12 <dir_find+0x1be>
    ac08:	c7 01       	movw	r24, r14
    ac0a:	0e 94 3e 48 	call	0x907c	; 0x907c <sum_sfn>
    ac0e:	08 17       	cp	r16, r24
    ac10:	09 f1       	breq	.+66     	; 0xac54 <dir_find+0x200>
    ac12:	eb 85       	ldd	r30, Y+11	; 0x0b
    ac14:	fc 85       	ldd	r31, Y+12	; 0x0c
    ac16:	87 a1       	ldd	r24, Z+39	; 0x27
    ac18:	80 fd       	sbrc	r24, 0
    ac1a:	09 c0       	rjmp	.+18     	; 0xac2e <dir_find+0x1da>
    ac1c:	4b e0       	ldi	r20, 0x0B	; 11
    ac1e:	50 e0       	ldi	r21, 0x00	; 0
    ac20:	69 85       	ldd	r22, Y+9	; 0x09
    ac22:	7a 85       	ldd	r23, Y+10	; 0x0a
    ac24:	c7 01       	movw	r24, r14
    ac26:	0e 94 45 47 	call	0x8e8a	; 0x8e8a <mem_cmp>
    ac2a:	89 2b       	or	r24, r25
    ac2c:	99 f0       	breq	.+38     	; 0xac54 <dir_find+0x200>
    ac2e:	eb 85       	ldd	r30, Y+11	; 0x0b
    ac30:	fc 85       	ldd	r31, Y+12	; 0x0c
    ac32:	40 a6       	std	Z+40, r4	; 0x28
    ac34:	51 a6       	std	Z+41, r5	; 0x29
    ac36:	62 a6       	std	Z+42, r6	; 0x2a
    ac38:	73 a6       	std	Z+43, r7	; 0x2b
    ac3a:	1f ef       	ldi	r17, 0xFF	; 255
    ac3c:	60 e0       	ldi	r22, 0x00	; 0
    ac3e:	70 e0       	ldi	r23, 0x00	; 0
    ac40:	8b 85       	ldd	r24, Y+11	; 0x0b
    ac42:	9c 85       	ldd	r25, Y+12	; 0x0c
    ac44:	d5 dc       	rcall	.-1622   	; 0xa5f0 <dir_next>
    ac46:	00 97       	sbiw	r24, 0x00	; 0
    ac48:	09 f4       	brne	.+2      	; 0xac4c <dir_find+0x1f8>
    ac4a:	2b cf       	rjmp	.-426    	; 0xaaa2 <dir_find+0x4e>
    ac4c:	28 2f       	mov	r18, r24
    ac4e:	0b c0       	rjmp	.+22     	; 0xac66 <dir_find+0x212>
    ac50:	24 e0       	ldi	r18, 0x04	; 4
    ac52:	01 c0       	rjmp	.+2      	; 0xac56 <dir_find+0x202>
    ac54:	20 e0       	ldi	r18, 0x00	; 0
    ac56:	90 e0       	ldi	r25, 0x00	; 0
    ac58:	06 c0       	rjmp	.+12     	; 0xac66 <dir_find+0x212>
    ac5a:	0c 2d       	mov	r16, r12
    ac5c:	ee cf       	rjmp	.-36     	; 0xac3a <dir_find+0x1e6>
    ac5e:	1f ef       	ldi	r17, 0xFF	; 255
    ac60:	1d 0d       	add	r17, r13
    ac62:	0c 2d       	mov	r16, r12
    ac64:	eb cf       	rjmp	.-42     	; 0xac3c <dir_find+0x1e8>
    ac66:	82 2f       	mov	r24, r18
    ac68:	2c 96       	adiw	r28, 0x0c	; 12
    ac6a:	e2 e1       	ldi	r30, 0x12	; 18
    ac6c:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

0000ac70 <dir_register>:
    ac70:	a6 e1       	ldi	r26, 0x16	; 22
    ac72:	b0 e0       	ldi	r27, 0x00	; 0
    ac74:	ee e3       	ldi	r30, 0x3E	; 62
    ac76:	f6 e5       	ldi	r31, 0x56	; 86
    ac78:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
    ac7c:	fc 01       	movw	r30, r24
    ac7e:	27 a1       	ldd	r18, Z+39	; 0x27
    ac80:	20 7a       	andi	r18, 0xA0	; 160
    ac82:	09 f0       	breq	.+2      	; 0xac86 <dir_register+0x16>
    ac84:	53 c1       	rjmp	.+678    	; 0xaf2c <dir_register+0x2bc>
    ac86:	c0 80       	ld	r12, Z
    ac88:	d1 80       	ldd	r13, Z+1	; 0x01
    ac8a:	f6 01       	movw	r30, r12
    ac8c:	a3 85       	ldd	r26, Z+11	; 0x0b
    ac8e:	b4 85       	ldd	r27, Z+12	; 0x0c
    ac90:	81 2c       	mov	r8, r1
    ac92:	91 2c       	mov	r9, r1
    ac94:	2d 91       	ld	r18, X+
    ac96:	3d 91       	ld	r19, X+
    ac98:	23 2b       	or	r18, r19
    ac9a:	21 f0       	breq	.+8      	; 0xaca4 <dir_register+0x34>
    ac9c:	ff ef       	ldi	r31, 0xFF	; 255
    ac9e:	8f 1a       	sub	r8, r31
    aca0:	9f 0a       	sbc	r9, r31
    aca2:	f8 cf       	rjmp	.-16     	; 0xac94 <dir_register+0x24>
    aca4:	8c 01       	movw	r16, r24
    aca6:	5c 01       	movw	r10, r24
    aca8:	2c e1       	ldi	r18, 0x1C	; 28
    acaa:	a2 0e       	add	r10, r18
    acac:	b1 1c       	adc	r11, r1
    acae:	4c e0       	ldi	r20, 0x0C	; 12
    acb0:	50 e0       	ldi	r21, 0x00	; 0
    acb2:	b5 01       	movw	r22, r10
    acb4:	ce 01       	movw	r24, r28
    acb6:	01 96       	adiw	r24, 0x01	; 1
    acb8:	0e 94 a5 48 	call	0x914a	; 0x914a <mem_cpy.part.0>
    acbc:	8c 85       	ldd	r24, Y+12	; 0x0c
    acbe:	80 ff       	sbrs	r24, 0
    acc0:	94 c0       	rjmp	.+296    	; 0xadea <dir_register+0x17a>
    acc2:	80 e4       	ldi	r24, 0x40	; 64
    acc4:	f8 01       	movw	r30, r16
    acc6:	87 a3       	std	Z+39, r24	; 0x27
    acc8:	41 2c       	mov	r4, r1
    acca:	51 2c       	mov	r5, r1
    accc:	32 01       	movw	r6, r4
    acce:	43 94       	inc	r4
    acd0:	72 01       	movw	r14, r4
    acd2:	f6 01       	movw	r30, r12
    acd4:	23 84       	ldd	r2, Z+11	; 0x0b
    acd6:	34 84       	ldd	r3, Z+12	; 0x0c
    acd8:	4b e0       	ldi	r20, 0x0B	; 11
    acda:	50 e0       	ldi	r21, 0x00	; 0
    acdc:	be 01       	movw	r22, r28
    acde:	6f 5f       	subi	r22, 0xFF	; 255
    ace0:	7f 4f       	sbci	r23, 0xFF	; 255
    ace2:	c5 01       	movw	r24, r10
    ace4:	0e 94 a5 48 	call	0x914a	; 0x914a <mem_cpy.part.0>
    ace8:	f6 e0       	ldi	r31, 0x06	; 6
    acea:	4f 16       	cp	r4, r31
    acec:	51 04       	cpc	r5, r1
    acee:	18 f1       	brcs	.+70     	; 0xad36 <dir_register+0xc6>
    acf0:	f1 01       	movw	r30, r2
    acf2:	b3 01       	movw	r22, r6
    acf4:	a2 01       	movw	r20, r4
    acf6:	81 91       	ld	r24, Z+
    acf8:	91 91       	ld	r25, Z+
    acfa:	00 97       	sbiw	r24, 0x00	; 0
    acfc:	d9 f0       	breq	.+54     	; 0xad34 <dir_register+0xc4>
    acfe:	20 e1       	ldi	r18, 0x10	; 16
    ad00:	30 e0       	ldi	r19, 0x00	; 0
    ad02:	44 0f       	add	r20, r20
    ad04:	55 1f       	adc	r21, r21
    ad06:	66 1f       	adc	r22, r22
    ad08:	77 1f       	adc	r23, r23
    ad0a:	dc 01       	movw	r26, r24
    ad0c:	a1 70       	andi	r26, 0x01	; 1
    ad0e:	bb 27       	eor	r27, r27
    ad10:	4a 0f       	add	r20, r26
    ad12:	5b 1f       	adc	r21, r27
    ad14:	61 1d       	adc	r22, r1
    ad16:	71 1d       	adc	r23, r1
    ad18:	96 95       	lsr	r25
    ad1a:	87 95       	ror	r24
    ad1c:	60 ff       	sbrs	r22, 0
    ad1e:	06 c0       	rjmp	.+12     	; 0xad2c <dir_register+0xbc>
    ad20:	a1 e2       	ldi	r26, 0x21	; 33
    ad22:	4a 27       	eor	r20, r26
    ad24:	a0 e1       	ldi	r26, 0x10	; 16
    ad26:	5a 27       	eor	r21, r26
    ad28:	a1 e0       	ldi	r26, 0x01	; 1
    ad2a:	6a 27       	eor	r22, r26
    ad2c:	21 50       	subi	r18, 0x01	; 1
    ad2e:	31 09       	sbc	r19, r1
    ad30:	41 f7       	brne	.-48     	; 0xad02 <dir_register+0x92>
    ad32:	e1 cf       	rjmp	.-62     	; 0xacf6 <dir_register+0x86>
    ad34:	7a 01       	movw	r14, r20
    ad36:	fe 01       	movw	r30, r28
    ad38:	75 96       	adiw	r30, 0x15	; 21
    ad3a:	27 e0       	ldi	r18, 0x07	; 7
    ad3c:	30 e0       	ldi	r19, 0x00	; 0
    ad3e:	9e 2d       	mov	r25, r14
    ad40:	9f 70       	andi	r25, 0x0F	; 15
    ad42:	80 e3       	ldi	r24, 0x30	; 48
    ad44:	89 0f       	add	r24, r25
    ad46:	8a 33       	cpi	r24, 0x3A	; 58
    ad48:	10 f0       	brcs	.+4      	; 0xad4e <dir_register+0xde>
    ad4a:	87 e3       	ldi	r24, 0x37	; 55
    ad4c:	89 0f       	add	r24, r25
    ad4e:	21 50       	subi	r18, 0x01	; 1
    ad50:	31 09       	sbc	r19, r1
    ad52:	82 93       	st	-Z, r24
    ad54:	a4 e0       	ldi	r26, 0x04	; 4
    ad56:	f6 94       	lsr	r15
    ad58:	e7 94       	ror	r14
    ad5a:	aa 95       	dec	r26
    ad5c:	e1 f7       	brne	.-8      	; 0xad56 <dir_register+0xe6>
    ad5e:	e1 14       	cp	r14, r1
    ad60:	f1 04       	cpc	r15, r1
    ad62:	69 f7       	brne	.-38     	; 0xad3e <dir_register+0xce>
    ad64:	ed e0       	ldi	r30, 0x0D	; 13
    ad66:	f0 e0       	ldi	r31, 0x00	; 0
    ad68:	ec 0f       	add	r30, r28
    ad6a:	fd 1f       	adc	r31, r29
    ad6c:	e2 0f       	add	r30, r18
    ad6e:	f3 1f       	adc	r31, r19
    ad70:	4e e7       	ldi	r20, 0x7E	; 126
    ad72:	40 83       	st	Z, r20
    ad74:	f5 01       	movw	r30, r10
    ad76:	80 e0       	ldi	r24, 0x00	; 0
    ad78:	90 e0       	ldi	r25, 0x00	; 0
    ad7a:	28 17       	cp	r18, r24
    ad7c:	39 07       	cpc	r19, r25
    ad7e:	29 f0       	breq	.+10     	; 0xad8a <dir_register+0x11a>
    ad80:	41 91       	ld	r20, Z+
    ad82:	40 32       	cpi	r20, 0x20	; 32
    ad84:	11 f0       	breq	.+4      	; 0xad8a <dir_register+0x11a>
    ad86:	01 96       	adiw	r24, 0x01	; 1
    ad88:	f8 cf       	rjmp	.-16     	; 0xad7a <dir_register+0x10a>
    ad8a:	f5 01       	movw	r30, r10
    ad8c:	e8 0f       	add	r30, r24
    ad8e:	f9 1f       	adc	r31, r25
    ad90:	28 30       	cpi	r18, 0x08	; 8
    ad92:	31 05       	cpc	r19, r1
    ad94:	50 f4       	brcc	.+20     	; 0xadaa <dir_register+0x13a>
    ad96:	ad e0       	ldi	r26, 0x0D	; 13
    ad98:	b0 e0       	ldi	r27, 0x00	; 0
    ad9a:	ac 0f       	add	r26, r28
    ad9c:	bd 1f       	adc	r27, r29
    ad9e:	a2 0f       	add	r26, r18
    ada0:	b3 1f       	adc	r27, r19
    ada2:	8c 91       	ld	r24, X
    ada4:	2f 5f       	subi	r18, 0xFF	; 255
    ada6:	3f 4f       	sbci	r19, 0xFF	; 255
    ada8:	01 c0       	rjmp	.+2      	; 0xadac <dir_register+0x13c>
    adaa:	80 e2       	ldi	r24, 0x20	; 32
    adac:	81 93       	st	Z+, r24
    adae:	cf 01       	movw	r24, r30
    adb0:	8a 19       	sub	r24, r10
    adb2:	9b 09       	sbc	r25, r11
    adb4:	08 97       	sbiw	r24, 0x08	; 8
    adb6:	60 f3       	brcs	.-40     	; 0xad90 <dir_register+0x120>
    adb8:	c8 01       	movw	r24, r16
    adba:	4c de       	rcall	.-872    	; 0xaa54 <dir_find>
    adbc:	00 97       	sbiw	r24, 0x00	; 0
    adbe:	71 f4       	brne	.+28     	; 0xaddc <dir_register+0x16c>
    adc0:	8f ef       	ldi	r24, 0xFF	; 255
    adc2:	48 1a       	sub	r4, r24
    adc4:	58 0a       	sbc	r5, r24
    adc6:	68 0a       	sbc	r6, r24
    adc8:	78 0a       	sbc	r7, r24
    adca:	94 e6       	ldi	r25, 0x64	; 100
    adcc:	49 16       	cp	r4, r25
    adce:	51 04       	cpc	r5, r1
    add0:	61 04       	cpc	r6, r1
    add2:	71 04       	cpc	r7, r1
    add4:	09 f0       	breq	.+2      	; 0xadd8 <dir_register+0x168>
    add6:	7c cf       	rjmp	.-264    	; 0xacd0 <dir_register+0x60>
    add8:	27 e0       	ldi	r18, 0x07	; 7
    adda:	a9 c0       	rjmp	.+338    	; 0xaf2e <dir_register+0x2be>
    addc:	84 30       	cpi	r24, 0x04	; 4
    adde:	91 05       	cpc	r25, r1
    ade0:	09 f0       	breq	.+2      	; 0xade4 <dir_register+0x174>
    ade2:	ce c0       	rjmp	.+412    	; 0xaf80 <dir_register+0x310>
    ade4:	8c 85       	ldd	r24, Y+12	; 0x0c
    ade6:	f8 01       	movw	r30, r16
    ade8:	87 a3       	std	Z+39, r24	; 0x27
    adea:	8c 85       	ldd	r24, Y+12	; 0x0c
    adec:	81 ff       	sbrs	r24, 1
    adee:	0b c0       	rjmp	.+22     	; 0xae06 <dir_register+0x196>
    adf0:	c4 01       	movw	r24, r8
    adf2:	0c 96       	adiw	r24, 0x0c	; 12
    adf4:	6d e0       	ldi	r22, 0x0D	; 13
    adf6:	70 e0       	ldi	r23, 0x00	; 0
    adf8:	0e 94 3b e2 	call	0x1c476	; 0x1c476 <__udivmodhi4>
    adfc:	7b 01       	movw	r14, r22
    adfe:	ff ef       	ldi	r31, 0xFF	; 255
    ae00:	ef 1a       	sub	r14, r31
    ae02:	ff 0a       	sbc	r15, r31
    ae04:	03 c0       	rjmp	.+6      	; 0xae0c <dir_register+0x19c>
    ae06:	ee 24       	eor	r14, r14
    ae08:	e3 94       	inc	r14
    ae0a:	f1 2c       	mov	r15, r1
    ae0c:	b7 01       	movw	r22, r14
    ae0e:	c8 01       	movw	r24, r16
    ae10:	d7 dc       	rcall	.-1618   	; 0xa7c0 <dir_alloc>
    ae12:	00 97       	sbiw	r24, 0x00	; 0
    ae14:	09 f0       	breq	.+2      	; 0xae18 <dir_register+0x1a8>
    ae16:	b4 c0       	rjmp	.+360    	; 0xaf80 <dir_register+0x310>
    ae18:	21 e0       	ldi	r18, 0x01	; 1
    ae1a:	e2 1a       	sub	r14, r18
    ae1c:	f1 08       	sbc	r15, r1
    ae1e:	09 f4       	brne	.+2      	; 0xae22 <dir_register+0x1b2>
    ae20:	88 c0       	rjmp	.+272    	; 0xaf32 <dir_register+0x2c2>
    ae22:	f8 01       	movw	r30, r16
    ae24:	46 85       	ldd	r20, Z+14	; 0x0e
    ae26:	57 85       	ldd	r21, Z+15	; 0x0f
    ae28:	60 89       	ldd	r22, Z+16	; 0x10
    ae2a:	71 89       	ldd	r23, Z+17	; 0x11
    ae2c:	c7 01       	movw	r24, r14
    ae2e:	e5 e0       	ldi	r30, 0x05	; 5
    ae30:	88 0f       	add	r24, r24
    ae32:	99 1f       	adc	r25, r25
    ae34:	ea 95       	dec	r30
    ae36:	e1 f7       	brne	.-8      	; 0xae30 <dir_register+0x1c0>
    ae38:	48 1b       	sub	r20, r24
    ae3a:	59 0b       	sbc	r21, r25
    ae3c:	61 09       	sbc	r22, r1
    ae3e:	71 09       	sbc	r23, r1
    ae40:	c8 01       	movw	r24, r16
    ae42:	5e d9       	rcall	.-3396   	; 0xa100 <dir_sdi>
    ae44:	00 97       	sbiw	r24, 0x00	; 0
    ae46:	09 f0       	breq	.+2      	; 0xae4a <dir_register+0x1da>
    ae48:	9b c0       	rjmp	.+310    	; 0xaf80 <dir_register+0x310>
    ae4a:	c5 01       	movw	r24, r10
    ae4c:	0e 94 3e 48 	call	0x907c	; 0x907c <sum_sfn>
    ae50:	68 2e       	mov	r6, r24
    ae52:	5f e0       	ldi	r21, 0x0F	; 15
    ae54:	35 2e       	mov	r3, r21
    ae56:	6d e0       	ldi	r22, 0x0D	; 13
    ae58:	46 2e       	mov	r4, r22
    ae5a:	77 ee       	ldi	r23, 0xE7	; 231
    ae5c:	87 2e       	mov	r8, r23
    ae5e:	74 e0       	ldi	r23, 0x04	; 4
    ae60:	97 2e       	mov	r9, r23
    ae62:	55 24       	eor	r5, r5
    ae64:	53 94       	inc	r5
    ae66:	f8 01       	movw	r30, r16
    ae68:	46 89       	ldd	r20, Z+22	; 0x16
    ae6a:	57 89       	ldd	r21, Z+23	; 0x17
    ae6c:	60 8d       	ldd	r22, Z+24	; 0x18
    ae6e:	71 8d       	ldd	r23, Z+25	; 0x19
    ae70:	c6 01       	movw	r24, r12
    ae72:	0e 94 fc 4b 	call	0x97f8	; 0x97f8 <move_window>
    ae76:	00 97       	sbiw	r24, 0x00	; 0
    ae78:	09 f0       	breq	.+2      	; 0xae7c <dir_register+0x20c>
    ae7a:	82 c0       	rjmp	.+260    	; 0xaf80 <dir_register+0x310>
    ae7c:	f6 01       	movw	r30, r12
    ae7e:	63 85       	ldd	r22, Z+11	; 0x0b
    ae80:	74 85       	ldd	r23, Z+12	; 0x0c
    ae82:	f8 01       	movw	r30, r16
    ae84:	02 8c       	ldd	r0, Z+26	; 0x1a
    ae86:	f3 8d       	ldd	r31, Z+27	; 0x1b
    ae88:	e0 2d       	mov	r30, r0
    ae8a:	fe 8b       	std	Y+22, r31	; 0x16
    ae8c:	ed 8b       	std	Y+21, r30	; 0x15
    ae8e:	7e 2c       	mov	r7, r14
    ae90:	65 86       	std	Z+13, r6	; 0x0d
    ae92:	33 86       	std	Z+11, r3	; 0x0b
    ae94:	14 86       	std	Z+12, r1	; 0x0c
    ae96:	12 8e       	std	Z+26, r1	; 0x1a
    ae98:	13 8e       	std	Z+27, r1	; 0x1b
    ae9a:	97 01       	movw	r18, r14
    ae9c:	33 27       	eor	r19, r19
    ae9e:	21 50       	subi	r18, 0x01	; 1
    aea0:	31 09       	sbc	r19, r1
    aea2:	42 9e       	mul	r4, r18
    aea4:	c0 01       	movw	r24, r0
    aea6:	43 9e       	mul	r4, r19
    aea8:	90 0d       	add	r25, r0
    aeaa:	11 24       	eor	r1, r1
    aeac:	aa ed       	ldi	r26, 0xDA	; 218
    aeae:	b4 e0       	ldi	r27, 0x04	; 4
    aeb0:	20 e0       	ldi	r18, 0x00	; 0
    aeb2:	30 e0       	ldi	r19, 0x00	; 0
    aeb4:	2f 3f       	cpi	r18, 0xFF	; 255
    aeb6:	ff ef       	ldi	r31, 0xFF	; 255
    aeb8:	3f 07       	cpc	r19, r31
    aeba:	49 f0       	breq	.+18     	; 0xaece <dir_register+0x25e>
    aebc:	9c 01       	movw	r18, r24
    aebe:	22 0f       	add	r18, r18
    aec0:	33 1f       	adc	r19, r19
    aec2:	26 0f       	add	r18, r22
    aec4:	37 1f       	adc	r19, r23
    aec6:	f9 01       	movw	r30, r18
    aec8:	20 81       	ld	r18, Z
    aeca:	31 81       	ldd	r19, Z+1	; 0x01
    aecc:	01 96       	adiw	r24, 0x01	; 1
    aece:	4d 91       	ld	r20, X+
    aed0:	ed 89       	ldd	r30, Y+21	; 0x15
    aed2:	fe 89       	ldd	r31, Y+22	; 0x16
    aed4:	e4 0f       	add	r30, r20
    aed6:	f1 1d       	adc	r31, r1
    aed8:	20 83       	st	Z, r18
    aeda:	31 83       	std	Z+1, r19	; 0x01
    aedc:	21 15       	cp	r18, r1
    aede:	31 05       	cpc	r19, r1
    aee0:	11 f4       	brne	.+4      	; 0xaee6 <dir_register+0x276>
    aee2:	2f ef       	ldi	r18, 0xFF	; 255
    aee4:	3f ef       	ldi	r19, 0xFF	; 255
    aee6:	8a 16       	cp	r8, r26
    aee8:	9b 06       	cpc	r9, r27
    aeea:	21 f7       	brne	.-56     	; 0xaeb4 <dir_register+0x244>
    aeec:	2f 3f       	cpi	r18, 0xFF	; 255
    aeee:	3f 4f       	sbci	r19, 0xFF	; 255
    aef0:	49 f0       	breq	.+18     	; 0xaf04 <dir_register+0x294>
    aef2:	88 0f       	add	r24, r24
    aef4:	99 1f       	adc	r25, r25
    aef6:	db 01       	movw	r26, r22
    aef8:	a8 0f       	add	r26, r24
    aefa:	b9 1f       	adc	r27, r25
    aefc:	8d 91       	ld	r24, X+
    aefe:	9c 91       	ld	r25, X
    af00:	89 2b       	or	r24, r25
    af02:	19 f4       	brne	.+6      	; 0xaf0a <dir_register+0x29a>
    af04:	27 2d       	mov	r18, r7
    af06:	20 64       	ori	r18, 0x40	; 64
    af08:	72 2e       	mov	r7, r18
    af0a:	ed 89       	ldd	r30, Y+21	; 0x15
    af0c:	fe 89       	ldd	r31, Y+22	; 0x16
    af0e:	70 82       	st	Z, r7
    af10:	f6 01       	movw	r30, r12
    af12:	53 82       	std	Z+3, r5	; 0x03
    af14:	60 e0       	ldi	r22, 0x00	; 0
    af16:	70 e0       	ldi	r23, 0x00	; 0
    af18:	c8 01       	movw	r24, r16
    af1a:	6a db       	rcall	.-2348   	; 0xa5f0 <dir_next>
    af1c:	00 97       	sbiw	r24, 0x00	; 0
    af1e:	81 f5       	brne	.+96     	; 0xaf80 <dir_register+0x310>
    af20:	f1 e0       	ldi	r31, 0x01	; 1
    af22:	ef 1a       	sub	r14, r31
    af24:	f1 08       	sbc	r15, r1
    af26:	09 f0       	breq	.+2      	; 0xaf2a <dir_register+0x2ba>
    af28:	9e cf       	rjmp	.-196    	; 0xae66 <dir_register+0x1f6>
    af2a:	03 c0       	rjmp	.+6      	; 0xaf32 <dir_register+0x2c2>
    af2c:	26 e0       	ldi	r18, 0x06	; 6
    af2e:	90 e0       	ldi	r25, 0x00	; 0
    af30:	28 c0       	rjmp	.+80     	; 0xaf82 <dir_register+0x312>
    af32:	f8 01       	movw	r30, r16
    af34:	46 89       	ldd	r20, Z+22	; 0x16
    af36:	57 89       	ldd	r21, Z+23	; 0x17
    af38:	60 8d       	ldd	r22, Z+24	; 0x18
    af3a:	71 8d       	ldd	r23, Z+25	; 0x19
    af3c:	c6 01       	movw	r24, r12
    af3e:	0e 94 fc 4b 	call	0x97f8	; 0x97f8 <move_window>
    af42:	00 97       	sbiw	r24, 0x00	; 0
    af44:	e9 f4       	brne	.+58     	; 0xaf80 <dir_register+0x310>
    af46:	40 e2       	ldi	r20, 0x20	; 32
    af48:	50 e0       	ldi	r21, 0x00	; 0
    af4a:	60 e0       	ldi	r22, 0x00	; 0
    af4c:	70 e0       	ldi	r23, 0x00	; 0
    af4e:	f8 01       	movw	r30, r16
    af50:	82 8d       	ldd	r24, Z+26	; 0x1a
    af52:	93 8d       	ldd	r25, Z+27	; 0x1b
    af54:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <mem_set>
    af58:	4b e0       	ldi	r20, 0x0B	; 11
    af5a:	50 e0       	ldi	r21, 0x00	; 0
    af5c:	b5 01       	movw	r22, r10
    af5e:	f8 01       	movw	r30, r16
    af60:	82 8d       	ldd	r24, Z+26	; 0x1a
    af62:	93 8d       	ldd	r25, Z+27	; 0x1b
    af64:	0e 94 a5 48 	call	0x914a	; 0x914a <mem_cpy.part.0>
    af68:	f8 01       	movw	r30, r16
    af6a:	22 8d       	ldd	r18, Z+26	; 0x1a
    af6c:	33 8d       	ldd	r19, Z+27	; 0x1b
    af6e:	87 a1       	ldd	r24, Z+39	; 0x27
    af70:	88 71       	andi	r24, 0x18	; 24
    af72:	f9 01       	movw	r30, r18
    af74:	84 87       	std	Z+12, r24	; 0x0c
    af76:	81 e0       	ldi	r24, 0x01	; 1
    af78:	f6 01       	movw	r30, r12
    af7a:	83 83       	std	Z+3, r24	; 0x03
    af7c:	20 e0       	ldi	r18, 0x00	; 0
    af7e:	d7 cf       	rjmp	.-82     	; 0xaf2e <dir_register+0x2be>
    af80:	28 2f       	mov	r18, r24
    af82:	82 2f       	mov	r24, r18
    af84:	66 96       	adiw	r28, 0x16	; 22
    af86:	e2 e1       	ldi	r30, 0x12	; 18
    af88:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

0000af8c <follow_path>:
    af8c:	aa e0       	ldi	r26, 0x0A	; 10
    af8e:	b0 e0       	ldi	r27, 0x00	; 0
    af90:	ec ec       	ldi	r30, 0xCC	; 204
    af92:	f7 e5       	ldi	r31, 0x57	; 87
    af94:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
    af98:	7c 01       	movw	r14, r24
    af9a:	3b 01       	movw	r6, r22
    af9c:	dc 01       	movw	r26, r24
    af9e:	0d 90       	ld	r0, X+
    afa0:	bc 91       	ld	r27, X
    afa2:	a0 2d       	mov	r26, r0
    afa4:	be 83       	std	Y+6, r27	; 0x06
    afa6:	ad 83       	std	Y+5, r26	; 0x05
    afa8:	fb 01       	movw	r30, r22
    afaa:	80 81       	ld	r24, Z
    afac:	8f 32       	cpi	r24, 0x2F	; 47
    afae:	11 f0       	breq	.+4      	; 0xafb4 <follow_path+0x28>
    afb0:	8c 35       	cpi	r24, 0x5C	; 92
    afb2:	11 f4       	brne	.+4      	; 0xafb8 <follow_path+0x2c>
    afb4:	93 01       	movw	r18, r6
    afb6:	0c c0       	rjmp	.+24     	; 0xafd0 <follow_path+0x44>
    afb8:	ed 81       	ldd	r30, Y+5	; 0x05
    afba:	fe 81       	ldd	r31, Y+6	; 0x06
    afbc:	85 89       	ldd	r24, Z+21	; 0x15
    afbe:	96 89       	ldd	r25, Z+22	; 0x16
    afc0:	a7 89       	ldd	r26, Z+23	; 0x17
    afc2:	b0 8d       	ldd	r27, Z+24	; 0x18
    afc4:	f7 01       	movw	r30, r14
    afc6:	86 83       	std	Z+6, r24	; 0x06
    afc8:	97 83       	std	Z+7, r25	; 0x07
    afca:	a0 87       	std	Z+8, r26	; 0x08
    afcc:	b1 87       	std	Z+9, r27	; 0x09
    afce:	0e c0       	rjmp	.+28     	; 0xafec <follow_path+0x60>
    afd0:	39 01       	movw	r6, r18
    afd2:	d9 01       	movw	r26, r18
    afd4:	8c 91       	ld	r24, X
    afd6:	2f 5f       	subi	r18, 0xFF	; 255
    afd8:	3f 4f       	sbci	r19, 0xFF	; 255
    afda:	8f 32       	cpi	r24, 0x2F	; 47
    afdc:	c9 f3       	breq	.-14     	; 0xafd0 <follow_path+0x44>
    afde:	8c 35       	cpi	r24, 0x5C	; 92
    afe0:	b9 f3       	breq	.-18     	; 0xafd0 <follow_path+0x44>
    afe2:	f7 01       	movw	r30, r14
    afe4:	16 82       	std	Z+6, r1	; 0x06
    afe6:	17 82       	std	Z+7, r1	; 0x07
    afe8:	10 86       	std	Z+8, r1	; 0x08
    afea:	11 86       	std	Z+9, r1	; 0x09
    afec:	d3 01       	movw	r26, r6
    afee:	8c 91       	ld	r24, X
    aff0:	80 32       	cpi	r24, 0x20	; 32
    aff2:	58 f0       	brcs	.+22     	; 0xb00a <follow_path+0x7e>
    aff4:	f7 01       	movw	r30, r14
    aff6:	7c 96       	adiw	r30, 0x1c	; 28
    aff8:	f8 87       	std	Y+8, r31	; 0x08
    affa:	ef 83       	std	Y+7, r30	; 0x07
    affc:	2d 81       	ldd	r18, Y+5	; 0x05
    affe:	3e 81       	ldd	r19, Y+6	; 0x06
    b000:	2b 5c       	subi	r18, 0xCB	; 203
    b002:	3f 4f       	sbci	r19, 0xFF	; 255
    b004:	3a 87       	std	Y+10, r19	; 0x0a
    b006:	29 87       	std	Y+9, r18	; 0x09
    b008:	96 c0       	rjmp	.+300    	; 0xb136 <follow_path+0x1aa>
    b00a:	80 e8       	ldi	r24, 0x80	; 128
    b00c:	f7 01       	movw	r30, r14
    b00e:	87 a3       	std	Z+39, r24	; 0x27
    b010:	40 e0       	ldi	r20, 0x00	; 0
    b012:	50 e0       	ldi	r21, 0x00	; 0
    b014:	ba 01       	movw	r22, r20
    b016:	c7 01       	movw	r24, r14
    b018:	73 d8       	rcall	.-3866   	; 0xa100 <dir_sdi>
    b01a:	e5 c1       	rjmp	.+970    	; 0xb3e6 <follow_path+0x45a>
    b01c:	6c 35       	cpi	r22, 0x5C	; 92
    b01e:	71 05       	cpc	r23, r1
    b020:	b9 f1       	breq	.+110    	; 0xb090 <follow_path+0x104>
    b022:	60 38       	cpi	r22, 0x80	; 128
    b024:	71 05       	cpc	r23, r1
    b026:	28 f4       	brcc	.+10     	; 0xb032 <follow_path+0xa6>
    b028:	e6 e1       	ldi	r30, 0x16	; 22
    b02a:	f4 e0       	ldi	r31, 0x04	; 4
    b02c:	41 91       	ld	r20, Z+
    b02e:	41 11       	cpse	r20, r1
    b030:	8c c0       	rjmp	.+280    	; 0xb14a <follow_path+0x1be>
    b032:	0f 3f       	cpi	r16, 0xFF	; 255
    b034:	11 05       	cpc	r17, r1
    b036:	08 f0       	brcs	.+2      	; 0xb03a <follow_path+0xae>
    b038:	b9 c1       	rjmp	.+882    	; 0xb3ac <follow_path+0x420>
    b03a:	f8 01       	movw	r30, r16
    b03c:	ee 0f       	add	r30, r30
    b03e:	ff 1f       	adc	r31, r31
    b040:	ea 0d       	add	r30, r10
    b042:	fb 1d       	adc	r31, r11
    b044:	71 83       	std	Z+1, r23	; 0x01
    b046:	60 83       	st	Z, r22
    b048:	0f 5f       	subi	r16, 0xFF	; 255
    b04a:	1f 4f       	sbci	r17, 0xFF	; 255
    b04c:	ce 01       	movw	r24, r28
    b04e:	01 96       	adiw	r24, 0x01	; 1
    b050:	0e 94 54 47 	call	0x8ea8	; 0x8ea8 <tchar2uni>
    b054:	6f 3f       	cpi	r22, 0xFF	; 255
    b056:	bf ef       	ldi	r27, 0xFF	; 255
    b058:	7b 07       	cpc	r23, r27
    b05a:	8b 07       	cpc	r24, r27
    b05c:	9b 07       	cpc	r25, r27
    b05e:	09 f4       	brne	.+2      	; 0xb062 <follow_path+0xd6>
    b060:	a5 c1       	rjmp	.+842    	; 0xb3ac <follow_path+0x420>
    b062:	61 15       	cp	r22, r1
    b064:	71 05       	cpc	r23, r1
    b066:	e1 e0       	ldi	r30, 0x01	; 1
    b068:	8e 07       	cpc	r24, r30
    b06a:	91 05       	cpc	r25, r1
    b06c:	48 f0       	brcs	.+18     	; 0xb080 <follow_path+0xf4>
    b06e:	f8 01       	movw	r30, r16
    b070:	ee 0f       	add	r30, r30
    b072:	ff 1f       	adc	r31, r31
    b074:	ea 0d       	add	r30, r10
    b076:	fb 1d       	adc	r31, r11
    b078:	91 83       	std	Z+1, r25	; 0x01
    b07a:	80 83       	st	Z, r24
    b07c:	0f 5f       	subi	r16, 0xFF	; 255
    b07e:	1f 4f       	sbci	r17, 0xFF	; 255
    b080:	9b 01       	movw	r18, r22
    b082:	60 32       	cpi	r22, 0x20	; 32
    b084:	71 05       	cpc	r23, r1
    b086:	08 f4       	brcc	.+2      	; 0xb08a <follow_path+0xfe>
    b088:	6a c0       	rjmp	.+212    	; 0xb15e <follow_path+0x1d2>
    b08a:	6f 32       	cpi	r22, 0x2F	; 47
    b08c:	71 05       	cpc	r23, r1
    b08e:	31 f6       	brne	.-116    	; 0xb01c <follow_path+0x90>
    b090:	e9 81       	ldd	r30, Y+1	; 0x01
    b092:	fa 81       	ldd	r31, Y+2	; 0x02
    b094:	80 81       	ld	r24, Z
    b096:	8f 32       	cpi	r24, 0x2F	; 47
    b098:	09 f4       	brne	.+2      	; 0xb09c <follow_path+0x110>
    b09a:	5d c0       	rjmp	.+186    	; 0xb156 <follow_path+0x1ca>
    b09c:	8c 35       	cpi	r24, 0x5C	; 92
    b09e:	09 f4       	brne	.+2      	; 0xb0a2 <follow_path+0x116>
    b0a0:	5a c0       	rjmp	.+180    	; 0xb156 <follow_path+0x1ca>
    b0a2:	1b 82       	std	Y+3, r1	; 0x03
    b0a4:	69 80       	ldd	r6, Y+1	; 0x01
    b0a6:	7a 80       	ldd	r7, Y+2	; 0x02
    b0a8:	98 01       	movw	r18, r16
    b0aa:	22 0f       	add	r18, r18
    b0ac:	33 1f       	adc	r19, r19
    b0ae:	01 30       	cpi	r16, 0x01	; 1
    b0b0:	11 05       	cpc	r17, r1
    b0b2:	09 f0       	breq	.+2      	; 0xb0b6 <follow_path+0x12a>
    b0b4:	57 c0       	rjmp	.+174    	; 0xb164 <follow_path+0x1d8>
    b0b6:	d5 01       	movw	r26, r10
    b0b8:	8d 91       	ld	r24, X+
    b0ba:	9c 91       	ld	r25, X
    b0bc:	8e 97       	sbiw	r24, 0x2e	; 46
    b0be:	09 f0       	breq	.+2      	; 0xb0c2 <follow_path+0x136>
    b0c0:	5c c0       	rjmp	.+184    	; 0xb17a <follow_path+0x1ee>
    b0c2:	f9 01       	movw	r30, r18
    b0c4:	ea 0d       	add	r30, r10
    b0c6:	fb 1d       	adc	r31, r11
    b0c8:	11 82       	std	Z+1, r1	; 0x01
    b0ca:	10 82       	st	Z, r1
    b0cc:	f7 01       	movw	r30, r14
    b0ce:	7c 96       	adiw	r30, 0x1c	; 28
    b0d0:	80 e0       	ldi	r24, 0x00	; 0
    b0d2:	90 e0       	ldi	r25, 0x00	; 0
    b0d4:	80 17       	cp	r24, r16
    b0d6:	91 07       	cpc	r25, r17
    b0d8:	08 f0       	brcs	.+2      	; 0xb0dc <follow_path+0x150>
    b0da:	53 c0       	rjmp	.+166    	; 0xb182 <follow_path+0x1f6>
    b0dc:	2e e2       	ldi	r18, 0x2E	; 46
    b0de:	21 93       	st	Z+, r18
    b0e0:	01 96       	adiw	r24, 0x01	; 1
    b0e2:	8b 30       	cpi	r24, 0x0B	; 11
    b0e4:	91 05       	cpc	r25, r1
    b0e6:	b1 f7       	brne	.-20     	; 0xb0d4 <follow_path+0x148>
    b0e8:	8b 81       	ldd	r24, Y+3	; 0x03
    b0ea:	80 62       	ori	r24, 0x20	; 32
    b0ec:	f7 01       	movw	r30, r14
    b0ee:	87 a3       	std	Z+39, r24	; 0x27
    b0f0:	80 e0       	ldi	r24, 0x00	; 0
    b0f2:	90 e0       	ldi	r25, 0x00	; 0
    b0f4:	00 97       	sbiw	r24, 0x00	; 0
    b0f6:	09 f0       	breq	.+2      	; 0xb0fa <follow_path+0x16e>
    b0f8:	76 c1       	rjmp	.+748    	; 0xb3e6 <follow_path+0x45a>
    b0fa:	c7 01       	movw	r24, r14
    b0fc:	ab dc       	rcall	.-1706   	; 0xaa54 <dir_find>
    b0fe:	f7 01       	movw	r30, r14
    b100:	27 a1       	ldd	r18, Z+39	; 0x27
    b102:	00 97       	sbiw	r24, 0x00	; 0
    b104:	09 f0       	breq	.+2      	; 0xb108 <follow_path+0x17c>
    b106:	55 c1       	rjmp	.+682    	; 0xb3b2 <follow_path+0x426>
    b108:	22 fd       	sbrc	r18, 2
    b10a:	6d c1       	rjmp	.+730    	; 0xb3e6 <follow_path+0x45a>
    b10c:	f7 01       	movw	r30, r14
    b10e:	84 81       	ldd	r24, Z+4	; 0x04
    b110:	84 ff       	sbrs	r24, 4
    b112:	60 c1       	rjmp	.+704    	; 0xb3d4 <follow_path+0x448>
    b114:	66 85       	ldd	r22, Z+14	; 0x0e
    b116:	77 85       	ldd	r23, Z+15	; 0x0f
    b118:	71 70       	andi	r23, 0x01	; 1
    b11a:	29 85       	ldd	r18, Y+9	; 0x09
    b11c:	3a 85       	ldd	r19, Y+10	; 0x0a
    b11e:	62 0f       	add	r22, r18
    b120:	73 1f       	adc	r23, r19
    b122:	ad 81       	ldd	r26, Y+5	; 0x05
    b124:	be 81       	ldd	r27, Y+6	; 0x06
    b126:	8c 91       	ld	r24, X
    b128:	0e 94 6d 4a 	call	0x94da	; 0x94da <ld_clust.isra.4>
    b12c:	f7 01       	movw	r30, r14
    b12e:	66 83       	std	Z+6, r22	; 0x06
    b130:	77 83       	std	Z+7, r23	; 0x07
    b132:	80 87       	std	Z+8, r24	; 0x08
    b134:	91 87       	std	Z+9, r25	; 0x09
    b136:	7a 82       	std	Y+2, r7	; 0x02
    b138:	69 82       	std	Y+1, r6	; 0x01
    b13a:	d7 01       	movw	r26, r14
    b13c:	ed 91       	ld	r30, X+
    b13e:	fc 91       	ld	r31, X
    b140:	a3 84       	ldd	r10, Z+11	; 0x0b
    b142:	b4 84       	ldd	r11, Z+12	; 0x0c
    b144:	00 e0       	ldi	r16, 0x00	; 0
    b146:	10 e0       	ldi	r17, 0x00	; 0
    b148:	81 cf       	rjmp	.-254    	; 0xb04c <follow_path+0xc0>
    b14a:	50 e0       	ldi	r21, 0x00	; 0
    b14c:	24 17       	cp	r18, r20
    b14e:	35 07       	cpc	r19, r21
    b150:	09 f0       	breq	.+2      	; 0xb154 <follow_path+0x1c8>
    b152:	6c cf       	rjmp	.-296    	; 0xb02c <follow_path+0xa0>
    b154:	2b c1       	rjmp	.+598    	; 0xb3ac <follow_path+0x420>
    b156:	31 96       	adiw	r30, 0x01	; 1
    b158:	fa 83       	std	Y+2, r31	; 0x02
    b15a:	e9 83       	std	Y+1, r30	; 0x01
    b15c:	99 cf       	rjmp	.-206    	; 0xb090 <follow_path+0x104>
    b15e:	f4 e0       	ldi	r31, 0x04	; 4
    b160:	fb 83       	std	Y+3, r31	; 0x03
    b162:	a0 cf       	rjmp	.-192    	; 0xb0a4 <follow_path+0x118>
    b164:	02 30       	cpi	r16, 0x02	; 2
    b166:	11 05       	cpc	r17, r1
    b168:	41 f4       	brne	.+16     	; 0xb17a <follow_path+0x1ee>
    b16a:	f5 01       	movw	r30, r10
    b16c:	82 81       	ldd	r24, Z+2	; 0x02
    b16e:	93 81       	ldd	r25, Z+3	; 0x03
    b170:	8e 97       	sbiw	r24, 0x2e	; 46
    b172:	19 f4       	brne	.+6      	; 0xb17a <follow_path+0x1ee>
    b174:	80 81       	ld	r24, Z
    b176:	91 81       	ldd	r25, Z+1	; 0x01
    b178:	a1 cf       	rjmp	.-190    	; 0xb0bc <follow_path+0x130>
    b17a:	f9 01       	movw	r30, r18
    b17c:	ea 0d       	add	r30, r10
    b17e:	fb 1d       	adc	r31, r11
    b180:	09 c0       	rjmp	.+18     	; 0xb194 <follow_path+0x208>
    b182:	20 e2       	ldi	r18, 0x20	; 32
    b184:	ac cf       	rjmp	.-168    	; 0xb0de <follow_path+0x152>
    b186:	92 91       	ld	r25, -Z
    b188:	82 91       	ld	r24, -Z
    b18a:	80 32       	cpi	r24, 0x20	; 32
    b18c:	91 05       	cpc	r25, r1
    b18e:	31 f4       	brne	.+12     	; 0xb19c <follow_path+0x210>
    b190:	01 50       	subi	r16, 0x01	; 1
    b192:	11 09       	sbc	r17, r1
    b194:	01 15       	cp	r16, r1
    b196:	11 05       	cpc	r17, r1
    b198:	b1 f7       	brne	.-20     	; 0xb186 <follow_path+0x1fa>
    b19a:	02 c0       	rjmp	.+4      	; 0xb1a0 <follow_path+0x214>
    b19c:	8e 97       	sbiw	r24, 0x2e	; 46
    b19e:	c1 f3       	breq	.-16     	; 0xb190 <follow_path+0x204>
    b1a0:	f8 01       	movw	r30, r16
    b1a2:	ee 0f       	add	r30, r30
    b1a4:	ff 1f       	adc	r31, r31
    b1a6:	ea 0d       	add	r30, r10
    b1a8:	fb 1d       	adc	r31, r11
    b1aa:	11 82       	std	Z+1, r1	; 0x01
    b1ac:	10 82       	st	Z, r1
    b1ae:	01 15       	cp	r16, r1
    b1b0:	11 05       	cpc	r17, r1
    b1b2:	09 f4       	brne	.+2      	; 0xb1b6 <follow_path+0x22a>
    b1b4:	fb c0       	rjmp	.+502    	; 0xb3ac <follow_path+0x420>
    b1b6:	d5 01       	movw	r26, r10
    b1b8:	41 2c       	mov	r4, r1
    b1ba:	51 2c       	mov	r5, r1
    b1bc:	8d 91       	ld	r24, X+
    b1be:	9d 91       	ld	r25, X+
    b1c0:	80 32       	cpi	r24, 0x20	; 32
    b1c2:	91 05       	cpc	r25, r1
    b1c4:	21 f4       	brne	.+8      	; 0xb1ce <follow_path+0x242>
    b1c6:	2f ef       	ldi	r18, 0xFF	; 255
    b1c8:	42 1a       	sub	r4, r18
    b1ca:	52 0a       	sbc	r5, r18
    b1cc:	f7 cf       	rjmp	.-18     	; 0xb1bc <follow_path+0x230>
    b1ce:	41 14       	cp	r4, r1
    b1d0:	51 04       	cpc	r5, r1
    b1d2:	11 f4       	brne	.+4      	; 0xb1d8 <follow_path+0x24c>
    b1d4:	8e 97       	sbiw	r24, 0x2e	; 46
    b1d6:	39 f4       	brne	.+14     	; 0xb1e6 <follow_path+0x25a>
    b1d8:	3b 81       	ldd	r19, Y+3	; 0x03
    b1da:	33 60       	ori	r19, 0x03	; 3
    b1dc:	3b 83       	std	Y+3, r19	; 0x03
    b1de:	03 c0       	rjmp	.+6      	; 0xb1e6 <follow_path+0x25a>
    b1e0:	01 50       	subi	r16, 0x01	; 1
    b1e2:	11 09       	sbc	r17, r1
    b1e4:	21 f0       	breq	.+8      	; 0xb1ee <follow_path+0x262>
    b1e6:	92 91       	ld	r25, -Z
    b1e8:	82 91       	ld	r24, -Z
    b1ea:	8e 97       	sbiw	r24, 0x2e	; 46
    b1ec:	c9 f7       	brne	.-14     	; 0xb1e0 <follow_path+0x254>
    b1ee:	4b e0       	ldi	r20, 0x0B	; 11
    b1f0:	50 e0       	ldi	r21, 0x00	; 0
    b1f2:	60 e2       	ldi	r22, 0x20	; 32
    b1f4:	70 e0       	ldi	r23, 0x00	; 0
    b1f6:	8f 81       	ldd	r24, Y+7	; 0x07
    b1f8:	98 85       	ldd	r25, Y+8	; 0x08
    b1fa:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <mem_set>
    b1fe:	48 e0       	ldi	r20, 0x08	; 8
    b200:	84 2e       	mov	r8, r20
    b202:	91 2c       	mov	r9, r1
    b204:	c1 2c       	mov	r12, r1
    b206:	d1 2c       	mov	r13, r1
    b208:	1c 82       	std	Y+4, r1	; 0x04
    b20a:	12 01       	movw	r2, r4
    b20c:	8f ef       	ldi	r24, 0xFF	; 255
    b20e:	28 1a       	sub	r2, r24
    b210:	38 0a       	sbc	r3, r24
    b212:	44 0c       	add	r4, r4
    b214:	55 1c       	adc	r5, r5
    b216:	f5 01       	movw	r30, r10
    b218:	e4 0d       	add	r30, r4
    b21a:	f5 1d       	adc	r31, r5
    b21c:	80 81       	ld	r24, Z
    b21e:	91 81       	ldd	r25, Z+1	; 0x01
    b220:	00 97       	sbiw	r24, 0x00	; 0
    b222:	09 f4       	brne	.+2      	; 0xb226 <follow_path+0x29a>
    b224:	98 c0       	rjmp	.+304    	; 0xb356 <follow_path+0x3ca>
    b226:	80 32       	cpi	r24, 0x20	; 32
    b228:	91 05       	cpc	r25, r1
    b22a:	31 f0       	breq	.+12     	; 0xb238 <follow_path+0x2ac>
    b22c:	8e 32       	cpi	r24, 0x2E	; 46
    b22e:	91 05       	cpc	r25, r1
    b230:	41 f4       	brne	.+16     	; 0xb242 <follow_path+0x2b6>
    b232:	20 16       	cp	r2, r16
    b234:	31 06       	cpc	r3, r17
    b236:	61 f0       	breq	.+24     	; 0xb250 <follow_path+0x2c4>
    b238:	9b 81       	ldd	r25, Y+3	; 0x03
    b23a:	93 60       	ori	r25, 0x03	; 3
    b23c:	9b 83       	std	Y+3, r25	; 0x03
    b23e:	21 01       	movw	r4, r2
    b240:	e4 cf       	rjmp	.-56     	; 0xb20a <follow_path+0x27e>
    b242:	c8 14       	cp	r12, r8
    b244:	d9 04       	cpc	r13, r9
    b246:	40 f4       	brcc	.+16     	; 0xb258 <follow_path+0x2cc>
    b248:	20 16       	cp	r2, r16
    b24a:	31 06       	cpc	r3, r17
    b24c:	31 f5       	brne	.+76     	; 0xb29a <follow_path+0x30e>
    b24e:	c5 c0       	rjmp	.+394    	; 0xb3da <follow_path+0x44e>
    b250:	c8 14       	cp	r12, r8
    b252:	d9 04       	cpc	r13, r9
    b254:	08 f4       	brcc	.+2      	; 0xb258 <follow_path+0x2cc>
    b256:	c1 c0       	rjmp	.+386    	; 0xb3da <follow_path+0x44e>
    b258:	ab e0       	ldi	r26, 0x0B	; 11
    b25a:	8a 16       	cp	r8, r26
    b25c:	91 04       	cpc	r9, r1
    b25e:	39 f4       	brne	.+14     	; 0xb26e <follow_path+0x2e2>
    b260:	bb 81       	ldd	r27, Y+3	; 0x03
    b262:	b3 60       	ori	r27, 0x03	; 3
    b264:	bb 83       	std	Y+3, r27	; 0x03
    b266:	2b e0       	ldi	r18, 0x0B	; 11
    b268:	82 2e       	mov	r8, r18
    b26a:	91 2c       	mov	r9, r1
    b26c:	74 c0       	rjmp	.+232    	; 0xb356 <follow_path+0x3ca>
    b26e:	20 16       	cp	r2, r16
    b270:	31 06       	cpc	r3, r17
    b272:	39 f0       	breq	.+14     	; 0xb282 <follow_path+0x2f6>
    b274:	eb 81       	ldd	r30, Y+3	; 0x03
    b276:	e3 60       	ori	r30, 0x03	; 3
    b278:	eb 83       	std	Y+3, r30	; 0x03
    b27a:	02 15       	cp	r16, r2
    b27c:	13 05       	cpc	r17, r3
    b27e:	08 f4       	brcc	.+2      	; 0xb282 <follow_path+0x2f6>
    b280:	6a c0       	rjmp	.+212    	; 0xb356 <follow_path+0x3ca>
    b282:	fc 81       	ldd	r31, Y+4	; 0x04
    b284:	ff 0f       	add	r31, r31
    b286:	ff 0f       	add	r31, r31
    b288:	fc 83       	std	Y+4, r31	; 0x04
    b28a:	18 01       	movw	r2, r16
    b28c:	8b e0       	ldi	r24, 0x0B	; 11
    b28e:	88 2e       	mov	r8, r24
    b290:	91 2c       	mov	r9, r1
    b292:	98 e0       	ldi	r25, 0x08	; 8
    b294:	c9 2e       	mov	r12, r25
    b296:	d1 2c       	mov	r13, r1
    b298:	d2 cf       	rjmp	.-92     	; 0xb23e <follow_path+0x2b2>
    b29a:	80 38       	cpi	r24, 0x80	; 128
    b29c:	91 05       	cpc	r25, r1
    b29e:	78 f1       	brcs	.+94     	; 0xb2fe <follow_path+0x372>
    b2a0:	2b 81       	ldd	r18, Y+3	; 0x03
    b2a2:	22 60       	ori	r18, 0x02	; 2
    b2a4:	52 2e       	mov	r5, r18
    b2a6:	bc 01       	movw	r22, r24
    b2a8:	80 e0       	ldi	r24, 0x00	; 0
    b2aa:	90 e0       	ldi	r25, 0x00	; 0
    b2ac:	45 eb       	ldi	r20, 0xB5	; 181
    b2ae:	51 e0       	ldi	r21, 0x01	; 1
    b2b0:	0e 94 8f 69 	call	0xd31e	; 0xd31e <ff_uni2oem>
    b2b4:	87 ff       	sbrs	r24, 7
    b2b6:	08 c0       	rjmp	.+16     	; 0xb2c8 <follow_path+0x33c>
    b2b8:	8f 77       	andi	r24, 0x7F	; 127
    b2ba:	99 27       	eor	r25, r25
    b2bc:	fc 01       	movw	r30, r24
    b2be:	e6 5a       	subi	r30, 0xA6	; 166
    b2c0:	fb 4f       	sbci	r31, 0xFB	; 251
    b2c2:	80 81       	ld	r24, Z
    b2c4:	90 e0       	ldi	r25, 0x00	; 0
    b2c6:	18 c0       	rjmp	.+48     	; 0xb2f8 <follow_path+0x36c>
    b2c8:	8f 3f       	cpi	r24, 0xFF	; 255
    b2ca:	91 05       	cpc	r25, r1
    b2cc:	a9 f0       	breq	.+42     	; 0xb2f8 <follow_path+0x36c>
    b2ce:	a0 f0       	brcs	.+40     	; 0xb2f8 <follow_path+0x36c>
    b2d0:	94 01       	movw	r18, r8
    b2d2:	21 50       	subi	r18, 0x01	; 1
    b2d4:	31 09       	sbc	r19, r1
    b2d6:	c2 16       	cp	r12, r18
    b2d8:	d3 06       	cpc	r13, r19
    b2da:	28 f0       	brcs	.+10     	; 0xb2e6 <follow_path+0x35a>
    b2dc:	3b 81       	ldd	r19, Y+3	; 0x03
    b2de:	33 60       	ori	r19, 0x03	; 3
    b2e0:	3b 83       	std	Y+3, r19	; 0x03
    b2e2:	64 01       	movw	r12, r8
    b2e4:	ac cf       	rjmp	.-168    	; 0xb23e <follow_path+0x2b2>
    b2e6:	f7 01       	movw	r30, r14
    b2e8:	ec 0d       	add	r30, r12
    b2ea:	fd 1d       	adc	r31, r13
    b2ec:	94 8f       	std	Z+28, r25	; 0x1c
    b2ee:	d6 01       	movw	r26, r12
    b2f0:	11 96       	adiw	r26, 0x01	; 1
    b2f2:	6d 01       	movw	r12, r26
    b2f4:	5b 82       	std	Y+3, r5	; 0x03
    b2f6:	26 c0       	rjmp	.+76     	; 0xb344 <follow_path+0x3b8>
    b2f8:	00 97       	sbiw	r24, 0x00	; 0
    b2fa:	59 f0       	breq	.+22     	; 0xb312 <follow_path+0x386>
    b2fc:	5b 82       	std	Y+3, r5	; 0x03
    b2fe:	ef e1       	ldi	r30, 0x1F	; 31
    b300:	f4 e0       	ldi	r31, 0x04	; 4
    b302:	21 91       	ld	r18, Z+
    b304:	22 23       	and	r18, r18
    b306:	59 f0       	breq	.+22     	; 0xb31e <follow_path+0x392>
    b308:	30 e0       	ldi	r19, 0x00	; 0
    b30a:	82 17       	cp	r24, r18
    b30c:	93 07       	cpc	r25, r19
    b30e:	c9 f7       	brne	.-14     	; 0xb302 <follow_path+0x376>
    b310:	5b 80       	ldd	r5, Y+3	; 0x03
    b312:	b5 2d       	mov	r27, r5
    b314:	b3 60       	ori	r27, 0x03	; 3
    b316:	bb 83       	std	Y+3, r27	; 0x03
    b318:	8f e5       	ldi	r24, 0x5F	; 95
    b31a:	90 e0       	ldi	r25, 0x00	; 0
    b31c:	13 c0       	rjmp	.+38     	; 0xb344 <follow_path+0x3b8>
    b31e:	9c 01       	movw	r18, r24
    b320:	21 54       	subi	r18, 0x41	; 65
    b322:	31 09       	sbc	r19, r1
    b324:	2a 31       	cpi	r18, 0x1A	; 26
    b326:	31 05       	cpc	r19, r1
    b328:	18 f4       	brcc	.+6      	; 0xb330 <follow_path+0x3a4>
    b32a:	ec 81       	ldd	r30, Y+4	; 0x04
    b32c:	e2 60       	ori	r30, 0x02	; 2
    b32e:	ec 83       	std	Y+4, r30	; 0x04
    b330:	9c 01       	movw	r18, r24
    b332:	21 56       	subi	r18, 0x61	; 97
    b334:	31 09       	sbc	r19, r1
    b336:	2a 31       	cpi	r18, 0x1A	; 26
    b338:	31 05       	cpc	r19, r1
    b33a:	20 f4       	brcc	.+8      	; 0xb344 <follow_path+0x3b8>
    b33c:	fc 81       	ldd	r31, Y+4	; 0x04
    b33e:	f1 60       	ori	r31, 0x01	; 1
    b340:	fc 83       	std	Y+4, r31	; 0x04
    b342:	80 97       	sbiw	r24, 0x20	; 32
    b344:	f7 01       	movw	r30, r14
    b346:	ec 0d       	add	r30, r12
    b348:	fd 1d       	adc	r31, r13
    b34a:	84 8f       	std	Z+28, r24	; 0x1c
    b34c:	96 01       	movw	r18, r12
    b34e:	2f 5f       	subi	r18, 0xFF	; 255
    b350:	3f 4f       	sbci	r19, 0xFF	; 255
    b352:	69 01       	movw	r12, r18
    b354:	74 cf       	rjmp	.-280    	; 0xb23e <follow_path+0x2b2>
    b356:	f7 01       	movw	r30, r14
    b358:	84 8d       	ldd	r24, Z+28	; 0x1c
    b35a:	85 3e       	cpi	r24, 0xE5	; 229
    b35c:	11 f4       	brne	.+4      	; 0xb362 <follow_path+0x3d6>
    b35e:	25 e0       	ldi	r18, 0x05	; 5
    b360:	24 8f       	std	Z+28, r18	; 0x1c
    b362:	38 e0       	ldi	r19, 0x08	; 8
    b364:	83 16       	cp	r8, r19
    b366:	91 04       	cpc	r9, r1
    b368:	21 f4       	brne	.+8      	; 0xb372 <follow_path+0x3e6>
    b36a:	8c 81       	ldd	r24, Y+4	; 0x04
    b36c:	88 0f       	add	r24, r24
    b36e:	88 0f       	add	r24, r24
    b370:	8c 83       	std	Y+4, r24	; 0x04
    b372:	8c 81       	ldd	r24, Y+4	; 0x04
    b374:	8c 70       	andi	r24, 0x0C	; 12
    b376:	8c 30       	cpi	r24, 0x0C	; 12
    b378:	21 f0       	breq	.+8      	; 0xb382 <follow_path+0x3f6>
    b37a:	8c 81       	ldd	r24, Y+4	; 0x04
    b37c:	83 70       	andi	r24, 0x03	; 3
    b37e:	83 30       	cpi	r24, 0x03	; 3
    b380:	19 f4       	brne	.+6      	; 0xb388 <follow_path+0x3fc>
    b382:	9b 81       	ldd	r25, Y+3	; 0x03
    b384:	92 60       	ori	r25, 0x02	; 2
    b386:	9b 83       	std	Y+3, r25	; 0x03
    b388:	ab 81       	ldd	r26, Y+3	; 0x03
    b38a:	a1 fd       	sbrc	r26, 1
    b38c:	0b c0       	rjmp	.+22     	; 0xb3a4 <follow_path+0x418>
    b38e:	bc 81       	ldd	r27, Y+4	; 0x04
    b390:	b0 ff       	sbrs	r27, 0
    b392:	02 c0       	rjmp	.+4      	; 0xb398 <follow_path+0x40c>
    b394:	a0 61       	ori	r26, 0x10	; 16
    b396:	ab 83       	std	Y+3, r26	; 0x03
    b398:	ec 81       	ldd	r30, Y+4	; 0x04
    b39a:	e2 ff       	sbrs	r30, 2
    b39c:	03 c0       	rjmp	.+6      	; 0xb3a4 <follow_path+0x418>
    b39e:	fb 81       	ldd	r31, Y+3	; 0x03
    b3a0:	f8 60       	ori	r31, 0x08	; 8
    b3a2:	fb 83       	std	Y+3, r31	; 0x03
    b3a4:	2b 81       	ldd	r18, Y+3	; 0x03
    b3a6:	f7 01       	movw	r30, r14
    b3a8:	27 a3       	std	Z+39, r18	; 0x27
    b3aa:	a2 ce       	rjmp	.-700    	; 0xb0f0 <follow_path+0x164>
    b3ac:	86 e0       	ldi	r24, 0x06	; 6
    b3ae:	90 e0       	ldi	r25, 0x00	; 0
    b3b0:	a1 ce       	rjmp	.-702    	; 0xb0f4 <follow_path+0x168>
    b3b2:	84 30       	cpi	r24, 0x04	; 4
    b3b4:	91 05       	cpc	r25, r1
    b3b6:	b9 f4       	brne	.+46     	; 0xb3e6 <follow_path+0x45a>
    b3b8:	32 2f       	mov	r19, r18
    b3ba:	34 70       	andi	r19, 0x04	; 4
    b3bc:	25 ff       	sbrs	r18, 5
    b3be:	08 c0       	rjmp	.+16     	; 0xb3d0 <follow_path+0x444>
    b3c0:	33 23       	and	r19, r19
    b3c2:	09 f4       	brne	.+2      	; 0xb3c6 <follow_path+0x43a>
    b3c4:	b8 ce       	rjmp	.-656    	; 0xb136 <follow_path+0x1aa>
    b3c6:	80 e8       	ldi	r24, 0x80	; 128
    b3c8:	87 a3       	std	Z+39, r24	; 0x27
    b3ca:	80 e0       	ldi	r24, 0x00	; 0
    b3cc:	90 e0       	ldi	r25, 0x00	; 0
    b3ce:	0b c0       	rjmp	.+22     	; 0xb3e6 <follow_path+0x45a>
    b3d0:	31 11       	cpse	r19, r1
    b3d2:	09 c0       	rjmp	.+18     	; 0xb3e6 <follow_path+0x45a>
    b3d4:	85 e0       	ldi	r24, 0x05	; 5
    b3d6:	90 e0       	ldi	r25, 0x00	; 0
    b3d8:	06 c0       	rjmp	.+12     	; 0xb3e6 <follow_path+0x45a>
    b3da:	fb e0       	ldi	r31, 0x0B	; 11
    b3dc:	8f 16       	cp	r8, r31
    b3de:	91 04       	cpc	r9, r1
    b3e0:	09 f0       	breq	.+2      	; 0xb3e4 <follow_path+0x458>
    b3e2:	4f cf       	rjmp	.-354    	; 0xb282 <follow_path+0x2f6>
    b3e4:	3d cf       	rjmp	.-390    	; 0xb260 <follow_path+0x2d4>
    b3e6:	2a 96       	adiw	r28, 0x0a	; 10
    b3e8:	e2 e1       	ldi	r30, 0x12	; 18
    b3ea:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

0000b3ee <f_mount>:
    b3ee:	a6 e0       	ldi	r26, 0x06	; 6
    b3f0:	b0 e0       	ldi	r27, 0x00	; 0
    b3f2:	ed ef       	ldi	r30, 0xFD	; 253
    b3f4:	f9 e5       	ldi	r31, 0x59	; 89
    b3f6:	0c 94 de e2 	jmp	0x1c5bc	; 0x1c5bc <__prologue_saves__+0x1e>
    b3fa:	9c 83       	std	Y+4, r25	; 0x04
    b3fc:	8b 83       	std	Y+3, r24	; 0x03
    b3fe:	7e 83       	std	Y+6, r23	; 0x06
    b400:	6d 83       	std	Y+5, r22	; 0x05
    b402:	14 2f       	mov	r17, r20
    b404:	7a 83       	std	Y+2, r23	; 0x02
    b406:	69 83       	std	Y+1, r22	; 0x01
    b408:	ce 01       	movw	r24, r28
    b40a:	01 96       	adiw	r24, 0x01	; 1
    b40c:	0e 94 4d 48 	call	0x909a	; 0x909a <get_ldnumber>
    b410:	97 fd       	sbrc	r25, 7
    b412:	20 c0       	rjmp	.+64     	; 0xb454 <f_mount+0x66>
    b414:	88 0f       	add	r24, r24
    b416:	99 1f       	adc	r25, r25
    b418:	fc 01       	movw	r30, r24
    b41a:	e0 5e       	subi	r30, 0xE0	; 224
    b41c:	f7 4e       	sbci	r31, 0xE7	; 231
    b41e:	01 90       	ld	r0, Z+
    b420:	f0 81       	ld	r31, Z
    b422:	e0 2d       	mov	r30, r0
    b424:	30 97       	sbiw	r30, 0x00	; 0
    b426:	09 f0       	breq	.+2      	; 0xb42a <f_mount+0x3c>
    b428:	10 82       	st	Z, r1
    b42a:	eb 81       	ldd	r30, Y+3	; 0x03
    b42c:	fc 81       	ldd	r31, Y+4	; 0x04
    b42e:	30 97       	sbiw	r30, 0x00	; 0
    b430:	09 f0       	breq	.+2      	; 0xb434 <f_mount+0x46>
    b432:	10 82       	st	Z, r1
    b434:	dc 01       	movw	r26, r24
    b436:	a0 5e       	subi	r26, 0xE0	; 224
    b438:	b7 4e       	sbci	r27, 0xE7	; 231
    b43a:	ed 93       	st	X+, r30
    b43c:	fc 93       	st	X, r31
    b43e:	11 23       	and	r17, r17
    b440:	61 f0       	breq	.+24     	; 0xb45a <f_mount+0x6c>
    b442:	40 e0       	ldi	r20, 0x00	; 0
    b444:	be 01       	movw	r22, r28
    b446:	6d 5f       	subi	r22, 0xFD	; 253
    b448:	7f 4f       	sbci	r23, 0xFF	; 255
    b44a:	ce 01       	movw	r24, r28
    b44c:	05 96       	adiw	r24, 0x05	; 5
    b44e:	0e 94 77 4c 	call	0x98ee	; 0x98ee <mount_volume>
    b452:	05 c0       	rjmp	.+10     	; 0xb45e <f_mount+0x70>
    b454:	8b e0       	ldi	r24, 0x0B	; 11
    b456:	90 e0       	ldi	r25, 0x00	; 0
    b458:	02 c0       	rjmp	.+4      	; 0xb45e <f_mount+0x70>
    b45a:	80 e0       	ldi	r24, 0x00	; 0
    b45c:	90 e0       	ldi	r25, 0x00	; 0
    b45e:	26 96       	adiw	r28, 0x06	; 6
    b460:	e3 e0       	ldi	r30, 0x03	; 3
    b462:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__epilogue_restores__+0x1e>

0000b466 <f_open>:
    b466:	a6 e3       	ldi	r26, 0x36	; 54
    b468:	b0 e0       	ldi	r27, 0x00	; 0
    b46a:	e9 e3       	ldi	r30, 0x39	; 57
    b46c:	fa e5       	ldi	r31, 0x5A	; 90
    b46e:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
    b472:	7a ab       	std	Y+50, r23	; 0x32
    b474:	69 ab       	std	Y+49, r22	; 0x31
    b476:	00 97       	sbiw	r24, 0x00	; 0
    b478:	09 f4       	brne	.+2      	; 0xb47c <f_open+0x16>
    b47a:	93 c1       	rjmp	.+806    	; 0xb7a2 <f_open+0x33c>
    b47c:	74 2e       	mov	r7, r20
    b47e:	7c 01       	movw	r14, r24
    b480:	24 2f       	mov	r18, r20
    b482:	2f 73       	andi	r18, 0x3F	; 63
    b484:	32 2e       	mov	r3, r18
    b486:	42 2f       	mov	r20, r18
    b488:	be 01       	movw	r22, r28
    b48a:	61 5d       	subi	r22, 0xD1	; 209
    b48c:	7f 4f       	sbci	r23, 0xFF	; 255
    b48e:	ce 01       	movw	r24, r28
    b490:	c1 96       	adiw	r24, 0x31	; 49
    b492:	0e 94 77 4c 	call	0x98ee	; 0x98ee <mount_volume>
    b496:	00 97       	sbiw	r24, 0x00	; 0
    b498:	09 f0       	breq	.+2      	; 0xb49c <f_open+0x36>
    b49a:	7d c1       	rjmp	.+762    	; 0xb796 <f_open+0x330>
    b49c:	8f a5       	ldd	r24, Y+47	; 0x2f
    b49e:	98 a9       	ldd	r25, Y+48	; 0x30
    b4a0:	9a 83       	std	Y+2, r25	; 0x02
    b4a2:	89 83       	std	Y+1, r24	; 0x01
    b4a4:	80 e0       	ldi	r24, 0x00	; 0
    b4a6:	92 e0       	ldi	r25, 0x02	; 2
    b4a8:	0e 94 89 69 	call	0xd312	; 0xd312 <ff_memalloc>
    b4ac:	5c 01       	movw	r10, r24
    b4ae:	00 97       	sbiw	r24, 0x00	; 0
    b4b0:	09 f4       	brne	.+2      	; 0xb4b4 <f_open+0x4e>
    b4b2:	79 c1       	rjmp	.+754    	; 0xb7a6 <f_open+0x340>
    b4b4:	ef a5       	ldd	r30, Y+47	; 0x2f
    b4b6:	f8 a9       	ldd	r31, Y+48	; 0x30
    b4b8:	94 87       	std	Z+12, r25	; 0x0c
    b4ba:	83 87       	std	Z+11, r24	; 0x0b
    b4bc:	69 a9       	ldd	r22, Y+49	; 0x31
    b4be:	7a a9       	ldd	r23, Y+50	; 0x32
    b4c0:	ce 01       	movw	r24, r28
    b4c2:	01 96       	adiw	r24, 0x01	; 1
    b4c4:	63 dd       	rcall	.-1338   	; 0xaf8c <follow_path>
    b4c6:	8c 01       	movw	r16, r24
    b4c8:	89 2b       	or	r24, r25
    b4ca:	29 f4       	brne	.+10     	; 0xb4d6 <f_open+0x70>
    b4cc:	88 a5       	ldd	r24, Y+40	; 0x28
    b4ce:	87 ff       	sbrs	r24, 7
    b4d0:	02 c0       	rjmp	.+4      	; 0xb4d6 <f_open+0x70>
    b4d2:	06 e0       	ldi	r16, 0x06	; 6
    b4d4:	10 e0       	ldi	r17, 0x00	; 0
    b4d6:	87 2d       	mov	r24, r7
    b4d8:	8c 71       	andi	r24, 0x1C	; 28
    b4da:	09 f4       	brne	.+2      	; 0xb4de <f_open+0x78>
    b4dc:	75 c0       	rjmp	.+234    	; 0xb5c8 <f_open+0x162>
    b4de:	01 15       	cp	r16, r1
    b4e0:	11 05       	cpc	r17, r1
    b4e2:	79 f0       	breq	.+30     	; 0xb502 <f_open+0x9c>
    b4e4:	04 30       	cpi	r16, 0x04	; 4
    b4e6:	11 05       	cpc	r17, r1
    b4e8:	09 f0       	breq	.+2      	; 0xb4ec <f_open+0x86>
    b4ea:	6d c1       	rjmp	.+730    	; 0xb7c6 <f_open+0x360>
    b4ec:	ce 01       	movw	r24, r28
    b4ee:	01 96       	adiw	r24, 0x01	; 1
    b4f0:	bf db       	rcall	.-2178   	; 0xac70 <dir_register>
    b4f2:	8c 01       	movw	r16, r24
    b4f4:	89 2b       	or	r24, r25
    b4f6:	09 f0       	breq	.+2      	; 0xb4fa <f_open+0x94>
    b4f8:	66 c1       	rjmp	.+716    	; 0xb7c6 <f_open+0x360>
    b4fa:	33 2d       	mov	r19, r3
    b4fc:	38 60       	ori	r19, 0x08	; 8
    b4fe:	33 2e       	mov	r3, r19
    b500:	06 c0       	rjmp	.+12     	; 0xb50e <f_open+0xa8>
    b502:	8d 81       	ldd	r24, Y+5	; 0x05
    b504:	81 71       	andi	r24, 0x11	; 17
    b506:	09 f0       	breq	.+2      	; 0xb50a <f_open+0xa4>
    b508:	5c c1       	rjmp	.+696    	; 0xb7c2 <f_open+0x35c>
    b50a:	72 fc       	sbrc	r7, 2
    b50c:	51 c1       	rjmp	.+674    	; 0xb7b0 <f_open+0x34a>
    b50e:	33 fe       	sbrs	r3, 3
    b510:	6b c0       	rjmp	.+214    	; 0xb5e8 <f_open+0x182>
    b512:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b514:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b516:	ef a5       	ldd	r30, Y+47	; 0x2f
    b518:	f8 a9       	ldd	r31, Y+48	; 0x30
    b51a:	b8 01       	movw	r22, r16
    b51c:	80 81       	ld	r24, Z
    b51e:	0e 94 6d 4a 	call	0x94da	; 0x94da <ld_clust.isra.4>
    b522:	2b 01       	movw	r4, r22
    b524:	3c 01       	movw	r6, r24
    b526:	0e 94 fa 70 	call	0xe1f4	; 0xe1f4 <get_fattime>
    b52a:	ab 01       	movw	r20, r22
    b52c:	bc 01       	movw	r22, r24
    b52e:	c8 01       	movw	r24, r16
    b530:	0e 96       	adiw	r24, 0x0e	; 14
    b532:	0e 94 36 47 	call	0x8e6c	; 0x8e6c <st_dword>
    b536:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b538:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b53a:	80 e2       	ldi	r24, 0x20	; 32
    b53c:	83 87       	std	Z+11, r24	; 0x0b
    b53e:	af a5       	ldd	r26, Y+47	; 0x2f
    b540:	b8 a9       	ldd	r27, Y+48	; 0x30
    b542:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b544:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b546:	12 8e       	std	Z+26, r1	; 0x1a
    b548:	13 8e       	std	Z+27, r1	; 0x1b
    b54a:	8c 91       	ld	r24, X
    b54c:	83 30       	cpi	r24, 0x03	; 3
    b54e:	11 f4       	brne	.+4      	; 0xb554 <f_open+0xee>
    b550:	14 8a       	std	Z+20, r1	; 0x14
    b552:	15 8a       	std	Z+21, r1	; 0x15
    b554:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b556:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b558:	14 8e       	std	Z+28, r1	; 0x1c
    b55a:	15 8e       	std	Z+29, r1	; 0x1d
    b55c:	16 8e       	std	Z+30, r1	; 0x1e
    b55e:	17 8e       	std	Z+31, r1	; 0x1f
    b560:	81 e0       	ldi	r24, 0x01	; 1
    b562:	fd 01       	movw	r30, r26
    b564:	83 83       	std	Z+3, r24	; 0x03
    b566:	41 14       	cp	r4, r1
    b568:	51 04       	cpc	r5, r1
    b56a:	61 04       	cpc	r6, r1
    b56c:	71 04       	cpc	r7, r1
    b56e:	c9 f1       	breq	.+114    	; 0xb5e2 <f_open+0x17c>
    b570:	21 a9       	ldd	r18, Z+49	; 0x31
    b572:	32 a9       	ldd	r19, Z+50	; 0x32
    b574:	43 a9       	ldd	r20, Z+51	; 0x33
    b576:	54 a9       	ldd	r21, Z+52	; 0x34
    b578:	2b ab       	std	Y+51, r18	; 0x33
    b57a:	3c ab       	std	Y+52, r19	; 0x34
    b57c:	4d ab       	std	Y+53, r20	; 0x35
    b57e:	5e ab       	std	Y+54, r21	; 0x36
    b580:	00 e0       	ldi	r16, 0x00	; 0
    b582:	10 e0       	ldi	r17, 0x00	; 0
    b584:	98 01       	movw	r18, r16
    b586:	b3 01       	movw	r22, r6
    b588:	a2 01       	movw	r20, r4
    b58a:	ce 01       	movw	r24, r28
    b58c:	01 96       	adiw	r24, 0x01	; 1
    b58e:	0e 94 67 52 	call	0xa4ce	; 0xa4ce <remove_chain>
    b592:	8c 01       	movw	r16, r24
    b594:	89 2b       	or	r24, r25
    b596:	09 f0       	breq	.+2      	; 0xb59a <f_open+0x134>
    b598:	16 c1       	rjmp	.+556    	; 0xb7c6 <f_open+0x360>
    b59a:	4b a9       	ldd	r20, Y+51	; 0x33
    b59c:	5c a9       	ldd	r21, Y+52	; 0x34
    b59e:	6d a9       	ldd	r22, Y+53	; 0x35
    b5a0:	7e a9       	ldd	r23, Y+54	; 0x36
    b5a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    b5a4:	98 a9       	ldd	r25, Y+48	; 0x30
    b5a6:	0e 94 fc 4b 	call	0x97f8	; 0x97f8 <move_window>
    b5aa:	8c 01       	movw	r16, r24
    b5ac:	ef a5       	ldd	r30, Y+47	; 0x2f
    b5ae:	f8 a9       	ldd	r31, Y+48	; 0x30
    b5b0:	21 e0       	ldi	r18, 0x01	; 1
    b5b2:	42 1a       	sub	r4, r18
    b5b4:	51 08       	sbc	r5, r1
    b5b6:	61 08       	sbc	r6, r1
    b5b8:	71 08       	sbc	r7, r1
    b5ba:	45 86       	std	Z+13, r4	; 0x0d
    b5bc:	56 86       	std	Z+14, r5	; 0x0e
    b5be:	67 86       	std	Z+15, r6	; 0x0f
    b5c0:	70 8a       	std	Z+16, r7	; 0x10
    b5c2:	89 2b       	or	r24, r25
    b5c4:	61 f0       	breq	.+24     	; 0xb5de <f_open+0x178>
    b5c6:	ff c0       	rjmp	.+510    	; 0xb7c6 <f_open+0x360>
    b5c8:	01 15       	cp	r16, r1
    b5ca:	11 05       	cpc	r17, r1
    b5cc:	09 f0       	breq	.+2      	; 0xb5d0 <f_open+0x16a>
    b5ce:	fb c0       	rjmp	.+502    	; 0xb7c6 <f_open+0x360>
    b5d0:	8d 81       	ldd	r24, Y+5	; 0x05
    b5d2:	84 fd       	sbrc	r24, 4
    b5d4:	f3 c0       	rjmp	.+486    	; 0xb7bc <f_open+0x356>
    b5d6:	71 fe       	sbrs	r7, 1
    b5d8:	02 c0       	rjmp	.+4      	; 0xb5de <f_open+0x178>
    b5da:	80 fd       	sbrc	r24, 0
    b5dc:	f2 c0       	rjmp	.+484    	; 0xb7c2 <f_open+0x35c>
    b5de:	33 fe       	sbrs	r3, 3
    b5e0:	03 c0       	rjmp	.+6      	; 0xb5e8 <f_open+0x182>
    b5e2:	33 2d       	mov	r19, r3
    b5e4:	30 64       	ori	r19, 0x40	; 64
    b5e6:	33 2e       	mov	r3, r19
    b5e8:	0f a5       	ldd	r16, Y+47	; 0x2f
    b5ea:	18 a9       	ldd	r17, Y+48	; 0x30
    b5ec:	f8 01       	movw	r30, r16
    b5ee:	81 a9       	ldd	r24, Z+49	; 0x31
    b5f0:	92 a9       	ldd	r25, Z+50	; 0x32
    b5f2:	a3 a9       	ldd	r26, Z+51	; 0x33
    b5f4:	b4 a9       	ldd	r27, Z+52	; 0x34
    b5f6:	f7 01       	movw	r30, r14
    b5f8:	84 8f       	std	Z+28, r24	; 0x1c
    b5fa:	95 8f       	std	Z+29, r25	; 0x1d
    b5fc:	a6 8f       	std	Z+30, r26	; 0x1e
    b5fe:	b7 8f       	std	Z+31, r27	; 0x1f
    b600:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b602:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b604:	71 a2       	std	Z+33, r7	; 0x21
    b606:	60 a2       	std	Z+32, r6	; 0x20
    b608:	b3 01       	movw	r22, r6
    b60a:	f8 01       	movw	r30, r16
    b60c:	80 81       	ld	r24, Z
    b60e:	0e 94 6d 4a 	call	0x94da	; 0x94da <ld_clust.isra.4>
    b612:	f7 01       	movw	r30, r14
    b614:	66 83       	std	Z+6, r22	; 0x06
    b616:	77 83       	std	Z+7, r23	; 0x07
    b618:	80 87       	std	Z+8, r24	; 0x08
    b61a:	91 87       	std	Z+9, r25	; 0x09
    b61c:	c3 01       	movw	r24, r6
    b61e:	4c 96       	adiw	r24, 0x1c	; 28
    b620:	0e 94 21 47 	call	0x8e42	; 0x8e42 <ld_dword>
    b624:	f7 01       	movw	r30, r14
    b626:	62 87       	std	Z+10, r22	; 0x0a
    b628:	73 87       	std	Z+11, r23	; 0x0b
    b62a:	84 87       	std	Z+12, r24	; 0x0c
    b62c:	95 87       	std	Z+13, r25	; 0x0d
    b62e:	13 a2       	std	Z+35, r1	; 0x23
    b630:	12 a2       	std	Z+34, r1	; 0x22
    b632:	11 83       	std	Z+1, r17	; 0x01
    b634:	00 83       	st	Z, r16
    b636:	f8 01       	movw	r30, r16
    b638:	85 81       	ldd	r24, Z+5	; 0x05
    b63a:	96 81       	ldd	r25, Z+6	; 0x06
    b63c:	f7 01       	movw	r30, r14
    b63e:	93 83       	std	Z+3, r25	; 0x03
    b640:	82 83       	std	Z+2, r24	; 0x02
    b642:	36 86       	std	Z+14, r3	; 0x0e
    b644:	17 86       	std	Z+15, r1	; 0x0f
    b646:	10 8e       	std	Z+24, r1	; 0x18
    b648:	11 8e       	std	Z+25, r1	; 0x19
    b64a:	12 8e       	std	Z+26, r1	; 0x1a
    b64c:	13 8e       	std	Z+27, r1	; 0x1b
    b64e:	10 8a       	std	Z+16, r1	; 0x10
    b650:	11 8a       	std	Z+17, r1	; 0x11
    b652:	12 8a       	std	Z+18, r1	; 0x12
    b654:	13 8a       	std	Z+19, r1	; 0x13
    b656:	67 01       	movw	r12, r14
    b658:	f4 e2       	ldi	r31, 0x24	; 36
    b65a:	cf 0e       	add	r12, r31
    b65c:	d1 1c       	adc	r13, r1
    b65e:	40 e0       	ldi	r20, 0x00	; 0
    b660:	52 e0       	ldi	r21, 0x02	; 2
    b662:	60 e0       	ldi	r22, 0x00	; 0
    b664:	70 e0       	ldi	r23, 0x00	; 0
    b666:	c6 01       	movw	r24, r12
    b668:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <mem_set>
    b66c:	35 fc       	sbrc	r3, 5
    b66e:	03 c0       	rjmp	.+6      	; 0xb676 <f_open+0x210>
    b670:	00 e0       	ldi	r16, 0x00	; 0
    b672:	10 e0       	ldi	r17, 0x00	; 0
    b674:	89 c0       	rjmp	.+274    	; 0xb788 <f_open+0x322>
    b676:	f7 01       	movw	r30, r14
    b678:	62 84       	ldd	r6, Z+10	; 0x0a
    b67a:	73 84       	ldd	r7, Z+11	; 0x0b
    b67c:	84 84       	ldd	r8, Z+12	; 0x0c
    b67e:	95 84       	ldd	r9, Z+13	; 0x0d
    b680:	61 14       	cp	r6, r1
    b682:	71 04       	cpc	r7, r1
    b684:	81 04       	cpc	r8, r1
    b686:	91 04       	cpc	r9, r1
    b688:	99 f3       	breq	.-26     	; 0xb670 <f_open+0x20a>
    b68a:	60 8a       	std	Z+16, r6	; 0x10
    b68c:	71 8a       	std	Z+17, r7	; 0x11
    b68e:	82 8a       	std	Z+18, r8	; 0x12
    b690:	93 8a       	std	Z+19, r9	; 0x13
    b692:	ef a5       	ldd	r30, Y+47	; 0x2f
    b694:	f8 a9       	ldd	r31, Y+48	; 0x30
    b696:	21 84       	ldd	r2, Z+9	; 0x09
    b698:	32 84       	ldd	r3, Z+10	; 0x0a
    b69a:	c1 01       	movw	r24, r2
    b69c:	a0 e0       	ldi	r26, 0x00	; 0
    b69e:	b0 e0       	ldi	r27, 0x00	; 0
    b6a0:	1c 01       	movw	r2, r24
    b6a2:	2d 01       	movw	r4, r26
    b6a4:	59 e0       	ldi	r21, 0x09	; 9
    b6a6:	22 0c       	add	r2, r2
    b6a8:	33 1c       	adc	r3, r3
    b6aa:	44 1c       	adc	r4, r4
    b6ac:	55 1c       	adc	r5, r5
    b6ae:	5a 95       	dec	r21
    b6b0:	d1 f7       	brne	.-12     	; 0xb6a6 <f_open+0x240>
    b6b2:	f7 01       	movw	r30, r14
    b6b4:	46 81       	ldd	r20, Z+6	; 0x06
    b6b6:	57 81       	ldd	r21, Z+7	; 0x07
    b6b8:	60 85       	ldd	r22, Z+8	; 0x08
    b6ba:	71 85       	ldd	r23, Z+9	; 0x09
    b6bc:	26 14       	cp	r2, r6
    b6be:	37 04       	cpc	r3, r7
    b6c0:	48 04       	cpc	r4, r8
    b6c2:	59 04       	cpc	r5, r9
    b6c4:	f0 f4       	brcc	.+60     	; 0xb702 <f_open+0x29c>
    b6c6:	f7 01       	movw	r30, r14
    b6c8:	80 81       	ld	r24, Z
    b6ca:	91 81       	ldd	r25, Z+1	; 0x01
    b6cc:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <get_fat.isra.10>
    b6d0:	ab 01       	movw	r20, r22
    b6d2:	bc 01       	movw	r22, r24
    b6d4:	d4 01       	movw	r26, r8
    b6d6:	c3 01       	movw	r24, r6
    b6d8:	82 19       	sub	r24, r2
    b6da:	93 09       	sbc	r25, r3
    b6dc:	a4 09       	sbc	r26, r4
    b6de:	b5 09       	sbc	r27, r5
    b6e0:	3c 01       	movw	r6, r24
    b6e2:	4d 01       	movw	r8, r26
    b6e4:	42 30       	cpi	r20, 0x02	; 2
    b6e6:	51 05       	cpc	r21, r1
    b6e8:	61 05       	cpc	r22, r1
    b6ea:	71 05       	cpc	r23, r1
    b6ec:	08 f4       	brcc	.+2      	; 0xb6f0 <f_open+0x28a>
    b6ee:	63 c0       	rjmp	.+198    	; 0xb7b6 <f_open+0x350>
    b6f0:	4f 3f       	cpi	r20, 0xFF	; 255
    b6f2:	ff ef       	ldi	r31, 0xFF	; 255
    b6f4:	5f 07       	cpc	r21, r31
    b6f6:	6f 07       	cpc	r22, r31
    b6f8:	7f 07       	cpc	r23, r31
    b6fa:	01 f7       	brne	.-64     	; 0xb6bc <f_open+0x256>
    b6fc:	01 e0       	ldi	r16, 0x01	; 1
    b6fe:	10 e0       	ldi	r17, 0x00	; 0
    b700:	02 c0       	rjmp	.+4      	; 0xb706 <f_open+0x2a0>
    b702:	00 e0       	ldi	r16, 0x00	; 0
    b704:	10 e0       	ldi	r17, 0x00	; 0
    b706:	f7 01       	movw	r30, r14
    b708:	44 8b       	std	Z+20, r20	; 0x14
    b70a:	55 8b       	std	Z+21, r21	; 0x15
    b70c:	66 8b       	std	Z+22, r22	; 0x16
    b70e:	77 8b       	std	Z+23, r23	; 0x17
    b710:	01 15       	cp	r16, r1
    b712:	11 05       	cpc	r17, r1
    b714:	c9 f5       	brne	.+114    	; 0xb788 <f_open+0x322>
    b716:	d4 01       	movw	r26, r8
    b718:	c3 01       	movw	r24, r6
    b71a:	91 70       	andi	r25, 0x01	; 1
    b71c:	aa 27       	eor	r26, r26
    b71e:	bb 27       	eor	r27, r27
    b720:	89 2b       	or	r24, r25
    b722:	8a 2b       	or	r24, r26
    b724:	8b 2b       	or	r24, r27
    b726:	09 f4       	brne	.+2      	; 0xb72a <f_open+0x2c4>
    b728:	a3 cf       	rjmp	.-186    	; 0xb670 <f_open+0x20a>
    b72a:	4f a4       	ldd	r4, Y+47	; 0x2f
    b72c:	58 a8       	ldd	r5, Y+48	; 0x30
    b72e:	c2 01       	movw	r24, r4
    b730:	0e 94 da 47 	call	0x8fb4	; 0x8fb4 <clst2sect>
    b734:	61 15       	cp	r22, r1
    b736:	71 05       	cpc	r23, r1
    b738:	81 05       	cpc	r24, r1
    b73a:	91 05       	cpc	r25, r1
    b73c:	19 f1       	breq	.+70     	; 0xb784 <f_open+0x31e>
    b73e:	94 01       	movw	r18, r8
    b740:	83 01       	movw	r16, r6
    b742:	49 e0       	ldi	r20, 0x09	; 9
    b744:	36 95       	lsr	r19
    b746:	27 95       	ror	r18
    b748:	17 95       	ror	r17
    b74a:	07 95       	ror	r16
    b74c:	4a 95       	dec	r20
    b74e:	d1 f7       	brne	.-12     	; 0xb744 <f_open+0x2de>
    b750:	a9 01       	movw	r20, r18
    b752:	98 01       	movw	r18, r16
    b754:	26 0f       	add	r18, r22
    b756:	37 1f       	adc	r19, r23
    b758:	48 1f       	adc	r20, r24
    b75a:	59 1f       	adc	r21, r25
    b75c:	f7 01       	movw	r30, r14
    b75e:	20 8f       	std	Z+24, r18	; 0x18
    b760:	31 8f       	std	Z+25, r19	; 0x19
    b762:	42 8f       	std	Z+26, r20	; 0x1a
    b764:	53 8f       	std	Z+27, r21	; 0x1b
    b766:	01 e0       	ldi	r16, 0x01	; 1
    b768:	10 e0       	ldi	r17, 0x00	; 0
    b76a:	b6 01       	movw	r22, r12
    b76c:	f2 01       	movw	r30, r4
    b76e:	81 81       	ldd	r24, Z+1	; 0x01
    b770:	0e 94 45 6a 	call	0xd48a	; 0xd48a <disk_read>
    b774:	31 e0       	ldi	r19, 0x01	; 1
    b776:	20 e0       	ldi	r18, 0x00	; 0
    b778:	89 2b       	or	r24, r25
    b77a:	09 f4       	brne	.+2      	; 0xb77e <f_open+0x318>
    b77c:	30 e0       	ldi	r19, 0x00	; 0
    b77e:	03 2f       	mov	r16, r19
    b780:	12 2f       	mov	r17, r18
    b782:	02 c0       	rjmp	.+4      	; 0xb788 <f_open+0x322>
    b784:	02 e0       	ldi	r16, 0x02	; 2
    b786:	10 e0       	ldi	r17, 0x00	; 0
    b788:	c5 01       	movw	r24, r10
    b78a:	0e 94 8c 69 	call	0xd318	; 0xd318 <ff_memfree>
    b78e:	01 15       	cp	r16, r1
    b790:	11 05       	cpc	r17, r1
    b792:	59 f0       	breq	.+22     	; 0xb7aa <f_open+0x344>
    b794:	01 c0       	rjmp	.+2      	; 0xb798 <f_open+0x332>
    b796:	8c 01       	movw	r16, r24
    b798:	f7 01       	movw	r30, r14
    b79a:	11 82       	std	Z+1, r1	; 0x01
    b79c:	10 82       	st	Z, r1
    b79e:	c8 01       	movw	r24, r16
    b7a0:	16 c0       	rjmp	.+44     	; 0xb7ce <f_open+0x368>
    b7a2:	89 e0       	ldi	r24, 0x09	; 9
    b7a4:	03 c0       	rjmp	.+6      	; 0xb7ac <f_open+0x346>
    b7a6:	81 e1       	ldi	r24, 0x11	; 17
    b7a8:	01 c0       	rjmp	.+2      	; 0xb7ac <f_open+0x346>
    b7aa:	80 e0       	ldi	r24, 0x00	; 0
    b7ac:	90 e0       	ldi	r25, 0x00	; 0
    b7ae:	0f c0       	rjmp	.+30     	; 0xb7ce <f_open+0x368>
    b7b0:	08 e0       	ldi	r16, 0x08	; 8
    b7b2:	10 e0       	ldi	r17, 0x00	; 0
    b7b4:	08 c0       	rjmp	.+16     	; 0xb7c6 <f_open+0x360>
    b7b6:	02 e0       	ldi	r16, 0x02	; 2
    b7b8:	10 e0       	ldi	r17, 0x00	; 0
    b7ba:	a5 cf       	rjmp	.-182    	; 0xb706 <f_open+0x2a0>
    b7bc:	04 e0       	ldi	r16, 0x04	; 4
    b7be:	10 e0       	ldi	r17, 0x00	; 0
    b7c0:	02 c0       	rjmp	.+4      	; 0xb7c6 <f_open+0x360>
    b7c2:	07 e0       	ldi	r16, 0x07	; 7
    b7c4:	10 e0       	ldi	r17, 0x00	; 0
    b7c6:	c5 01       	movw	r24, r10
    b7c8:	0e 94 8c 69 	call	0xd318	; 0xd318 <ff_memfree>
    b7cc:	e5 cf       	rjmp	.-54     	; 0xb798 <f_open+0x332>
    b7ce:	e6 96       	adiw	r28, 0x36	; 54
    b7d0:	e2 e1       	ldi	r30, 0x12	; 18
    b7d2:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

0000b7d6 <f_read>:
    b7d6:	a6 e0       	ldi	r26, 0x06	; 6
    b7d8:	b0 e0       	ldi	r27, 0x00	; 0
    b7da:	e1 ef       	ldi	r30, 0xF1	; 241
    b7dc:	fb e5       	ldi	r31, 0x5B	; 91
    b7de:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
    b7e2:	7c 01       	movw	r14, r24
    b7e4:	4b 01       	movw	r8, r22
    b7e6:	5a 01       	movw	r10, r20
    b7e8:	3e 83       	std	Y+6, r19	; 0x06
    b7ea:	2d 83       	std	Y+5, r18	; 0x05
    b7ec:	f9 01       	movw	r30, r18
    b7ee:	11 82       	std	Z+1, r1	; 0x01
    b7f0:	10 82       	st	Z, r1
    b7f2:	be 01       	movw	r22, r28
    b7f4:	6f 5f       	subi	r22, 0xFF	; 255
    b7f6:	7f 4f       	sbci	r23, 0xFF	; 255
    b7f8:	0e 94 79 48 	call	0x90f2	; 0x90f2 <validate>
    b7fc:	00 97       	sbiw	r24, 0x00	; 0
    b7fe:	09 f0       	breq	.+2      	; 0xb802 <f_read+0x2c>
    b800:	31 c1       	rjmp	.+610    	; 0xba64 <f_read+0x28e>
    b802:	f7 01       	movw	r30, r14
    b804:	87 85       	ldd	r24, Z+15	; 0x0f
    b806:	90 e0       	ldi	r25, 0x00	; 0
    b808:	00 97       	sbiw	r24, 0x00	; 0
    b80a:	09 f0       	breq	.+2      	; 0xb80e <f_read+0x38>
    b80c:	2b c1       	rjmp	.+598    	; 0xba64 <f_read+0x28e>
    b80e:	86 85       	ldd	r24, Z+14	; 0x0e
    b810:	80 ff       	sbrs	r24, 0
    b812:	26 c1       	rjmp	.+588    	; 0xba60 <f_read+0x28a>
    b814:	82 85       	ldd	r24, Z+10	; 0x0a
    b816:	93 85       	ldd	r25, Z+11	; 0x0b
    b818:	a4 85       	ldd	r26, Z+12	; 0x0c
    b81a:	b5 85       	ldd	r27, Z+13	; 0x0d
    b81c:	40 89       	ldd	r20, Z+16	; 0x10
    b81e:	51 89       	ldd	r21, Z+17	; 0x11
    b820:	62 89       	ldd	r22, Z+18	; 0x12
    b822:	73 89       	ldd	r23, Z+19	; 0x13
    b824:	84 1b       	sub	r24, r20
    b826:	95 0b       	sbc	r25, r21
    b828:	a6 0b       	sbc	r26, r22
    b82a:	b7 0b       	sbc	r27, r23
    b82c:	a5 01       	movw	r20, r10
    b82e:	60 e0       	ldi	r22, 0x00	; 0
    b830:	70 e0       	ldi	r23, 0x00	; 0
    b832:	84 17       	cp	r24, r20
    b834:	95 07       	cpc	r25, r21
    b836:	a6 07       	cpc	r26, r22
    b838:	b7 07       	cpc	r27, r23
    b83a:	08 f4       	brcc	.+2      	; 0xb83e <f_read+0x68>
    b83c:	5c 01       	movw	r10, r24
    b83e:	17 01       	movw	r2, r14
    b840:	f4 e2       	ldi	r31, 0x24	; 36
    b842:	2f 0e       	add	r2, r31
    b844:	31 1c       	adc	r3, r1
    b846:	a1 14       	cp	r10, r1
    b848:	b1 04       	cpc	r11, r1
    b84a:	09 f4       	brne	.+2      	; 0xb84e <f_read+0x78>
    b84c:	07 c1       	rjmp	.+526    	; 0xba5c <f_read+0x286>
    b84e:	f7 01       	movw	r30, r14
    b850:	40 89       	ldd	r20, Z+16	; 0x10
    b852:	51 89       	ldd	r21, Z+17	; 0x11
    b854:	62 89       	ldd	r22, Z+18	; 0x12
    b856:	73 89       	ldd	r23, Z+19	; 0x13
    b858:	db 01       	movw	r26, r22
    b85a:	ca 01       	movw	r24, r20
    b85c:	91 70       	andi	r25, 0x01	; 1
    b85e:	aa 27       	eor	r26, r26
    b860:	bb 27       	eor	r27, r27
    b862:	89 2b       	or	r24, r25
    b864:	8a 2b       	or	r24, r26
    b866:	8b 2b       	or	r24, r27
    b868:	09 f0       	breq	.+2      	; 0xb86c <f_read+0x96>
    b86a:	cb c0       	rjmp	.+406    	; 0xba02 <f_read+0x22c>
    b86c:	e9 81       	ldd	r30, Y+1	; 0x01
    b86e:	fa 81       	ldd	r31, Y+2	; 0x02
    b870:	01 85       	ldd	r16, Z+9	; 0x09
    b872:	12 85       	ldd	r17, Z+10	; 0x0a
    b874:	01 50       	subi	r16, 0x01	; 1
    b876:	11 09       	sbc	r17, r1
    b878:	db 01       	movw	r26, r22
    b87a:	ca 01       	movw	r24, r20
    b87c:	e9 e0       	ldi	r30, 0x09	; 9
    b87e:	b6 95       	lsr	r27
    b880:	a7 95       	ror	r26
    b882:	97 95       	ror	r25
    b884:	87 95       	ror	r24
    b886:	ea 95       	dec	r30
    b888:	d1 f7       	brne	.-12     	; 0xb87e <f_read+0xa8>
    b88a:	08 23       	and	r16, r24
    b88c:	19 23       	and	r17, r25
    b88e:	01 15       	cp	r16, r1
    b890:	11 05       	cpc	r17, r1
    b892:	91 f5       	brne	.+100    	; 0xb8f8 <f_read+0x122>
    b894:	f7 01       	movw	r30, r14
    b896:	41 15       	cp	r20, r1
    b898:	51 05       	cpc	r21, r1
    b89a:	61 05       	cpc	r22, r1
    b89c:	71 05       	cpc	r23, r1
    b89e:	29 f4       	brne	.+10     	; 0xb8aa <f_read+0xd4>
    b8a0:	66 81       	ldd	r22, Z+6	; 0x06
    b8a2:	77 81       	ldd	r23, Z+7	; 0x07
    b8a4:	80 85       	ldd	r24, Z+8	; 0x08
    b8a6:	91 85       	ldd	r25, Z+9	; 0x09
    b8a8:	11 c0       	rjmp	.+34     	; 0xb8cc <f_read+0xf6>
    b8aa:	82 a1       	ldd	r24, Z+34	; 0x22
    b8ac:	93 a1       	ldd	r25, Z+35	; 0x23
    b8ae:	89 2b       	or	r24, r25
    b8b0:	21 f0       	breq	.+8      	; 0xb8ba <f_read+0xe4>
    b8b2:	c7 01       	movw	r24, r14
    b8b4:	0e 94 02 48 	call	0x9004	; 0x9004 <clmt_clust>
    b8b8:	09 c0       	rjmp	.+18     	; 0xb8cc <f_read+0xf6>
    b8ba:	f7 01       	movw	r30, r14
    b8bc:	44 89       	ldd	r20, Z+20	; 0x14
    b8be:	55 89       	ldd	r21, Z+21	; 0x15
    b8c0:	66 89       	ldd	r22, Z+22	; 0x16
    b8c2:	77 89       	ldd	r23, Z+23	; 0x17
    b8c4:	80 81       	ld	r24, Z
    b8c6:	91 81       	ldd	r25, Z+1	; 0x01
    b8c8:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <get_fat.isra.10>
    b8cc:	62 30       	cpi	r22, 0x02	; 2
    b8ce:	71 05       	cpc	r23, r1
    b8d0:	81 05       	cpc	r24, r1
    b8d2:	91 05       	cpc	r25, r1
    b8d4:	10 f4       	brcc	.+4      	; 0xb8da <f_read+0x104>
    b8d6:	82 e0       	ldi	r24, 0x02	; 2
    b8d8:	07 c0       	rjmp	.+14     	; 0xb8e8 <f_read+0x112>
    b8da:	6f 3f       	cpi	r22, 0xFF	; 255
    b8dc:	ff ef       	ldi	r31, 0xFF	; 255
    b8de:	7f 07       	cpc	r23, r31
    b8e0:	8f 07       	cpc	r24, r31
    b8e2:	9f 07       	cpc	r25, r31
    b8e4:	21 f4       	brne	.+8      	; 0xb8ee <f_read+0x118>
    b8e6:	81 e0       	ldi	r24, 0x01	; 1
    b8e8:	f7 01       	movw	r30, r14
    b8ea:	87 87       	std	Z+15, r24	; 0x0f
    b8ec:	ba c0       	rjmp	.+372    	; 0xba62 <f_read+0x28c>
    b8ee:	f7 01       	movw	r30, r14
    b8f0:	64 8b       	std	Z+20, r22	; 0x14
    b8f2:	75 8b       	std	Z+21, r23	; 0x15
    b8f4:	86 8b       	std	Z+22, r24	; 0x16
    b8f6:	97 8b       	std	Z+23, r25	; 0x17
    b8f8:	89 81       	ldd	r24, Y+1	; 0x01
    b8fa:	9a 81       	ldd	r25, Y+2	; 0x02
    b8fc:	9c 83       	std	Y+4, r25	; 0x04
    b8fe:	8b 83       	std	Y+3, r24	; 0x03
    b900:	f7 01       	movw	r30, r14
    b902:	44 89       	ldd	r20, Z+20	; 0x14
    b904:	55 89       	ldd	r21, Z+21	; 0x15
    b906:	66 89       	ldd	r22, Z+22	; 0x16
    b908:	77 89       	ldd	r23, Z+23	; 0x17
    b90a:	0e 94 da 47 	call	0x8fb4	; 0x8fb4 <clst2sect>
    b90e:	61 15       	cp	r22, r1
    b910:	71 05       	cpc	r23, r1
    b912:	81 05       	cpc	r24, r1
    b914:	91 05       	cpc	r25, r1
    b916:	f9 f2       	breq	.-66     	; 0xb8d6 <f_read+0x100>
    b918:	2b 01       	movw	r4, r22
    b91a:	3c 01       	movw	r6, r24
    b91c:	40 0e       	add	r4, r16
    b91e:	51 1e       	adc	r5, r17
    b920:	61 1c       	adc	r6, r1
    b922:	71 1c       	adc	r7, r1
    b924:	65 01       	movw	r12, r10
    b926:	cd 2c       	mov	r12, r13
    b928:	dd 24       	eor	r13, r13
    b92a:	c6 94       	lsr	r12
    b92c:	c1 14       	cp	r12, r1
    b92e:	d1 04       	cpc	r13, r1
    b930:	d1 f1       	breq	.+116    	; 0xb9a6 <f_read+0x1d0>
    b932:	eb 81       	ldd	r30, Y+3	; 0x03
    b934:	fc 81       	ldd	r31, Y+4	; 0x04
    b936:	81 85       	ldd	r24, Z+9	; 0x09
    b938:	92 85       	ldd	r25, Z+10	; 0x0a
    b93a:	98 01       	movw	r18, r16
    b93c:	2c 0d       	add	r18, r12
    b93e:	3d 1d       	adc	r19, r13
    b940:	82 17       	cp	r24, r18
    b942:	93 07       	cpc	r25, r19
    b944:	18 f4       	brcc	.+6      	; 0xb94c <f_read+0x176>
    b946:	6c 01       	movw	r12, r24
    b948:	c0 1a       	sub	r12, r16
    b94a:	d1 0a       	sbc	r13, r17
    b94c:	86 01       	movw	r16, r12
    b94e:	a3 01       	movw	r20, r6
    b950:	92 01       	movw	r18, r4
    b952:	b4 01       	movw	r22, r8
    b954:	eb 81       	ldd	r30, Y+3	; 0x03
    b956:	fc 81       	ldd	r31, Y+4	; 0x04
    b958:	81 81       	ldd	r24, Z+1	; 0x01
    b95a:	0e 94 45 6a 	call	0xd48a	; 0xd48a <disk_read>
    b95e:	89 2b       	or	r24, r25
    b960:	11 f6       	brne	.-124    	; 0xb8e6 <f_read+0x110>
    b962:	f7 01       	movw	r30, r14
    b964:	86 85       	ldd	r24, Z+14	; 0x0e
    b966:	87 ff       	sbrs	r24, 7
    b968:	1a c0       	rjmp	.+52     	; 0xb99e <f_read+0x1c8>
    b96a:	80 8d       	ldd	r24, Z+24	; 0x18
    b96c:	91 8d       	ldd	r25, Z+25	; 0x19
    b96e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b970:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b972:	84 19       	sub	r24, r4
    b974:	95 09       	sbc	r25, r5
    b976:	a6 09       	sbc	r26, r6
    b978:	b7 09       	sbc	r27, r7
    b97a:	a6 01       	movw	r20, r12
    b97c:	60 e0       	ldi	r22, 0x00	; 0
    b97e:	70 e0       	ldi	r23, 0x00	; 0
    b980:	84 17       	cp	r24, r20
    b982:	95 07       	cpc	r25, r21
    b984:	a6 07       	cpc	r26, r22
    b986:	b7 07       	cpc	r27, r23
    b988:	50 f4       	brcc	.+20     	; 0xb99e <f_read+0x1c8>
    b98a:	98 2f       	mov	r25, r24
    b98c:	88 27       	eor	r24, r24
    b98e:	99 0f       	add	r25, r25
    b990:	40 e0       	ldi	r20, 0x00	; 0
    b992:	52 e0       	ldi	r21, 0x02	; 2
    b994:	b1 01       	movw	r22, r2
    b996:	88 0d       	add	r24, r8
    b998:	99 1d       	adc	r25, r9
    b99a:	0e 94 a5 48 	call	0x914a	; 0x914a <mem_cpy.part.0>
    b99e:	dc 2c       	mov	r13, r12
    b9a0:	cc 24       	eor	r12, r12
    b9a2:	dd 0c       	add	r13, r13
    b9a4:	41 c0       	rjmp	.+130    	; 0xba28 <f_read+0x252>
    b9a6:	f7 01       	movw	r30, r14
    b9a8:	20 8d       	ldd	r18, Z+24	; 0x18
    b9aa:	31 8d       	ldd	r19, Z+25	; 0x19
    b9ac:	42 8d       	ldd	r20, Z+26	; 0x1a
    b9ae:	53 8d       	ldd	r21, Z+27	; 0x1b
    b9b0:	42 16       	cp	r4, r18
    b9b2:	53 06       	cpc	r5, r19
    b9b4:	64 06       	cpc	r6, r20
    b9b6:	75 06       	cpc	r7, r21
    b9b8:	f9 f0       	breq	.+62     	; 0xb9f8 <f_read+0x222>
    b9ba:	86 85       	ldd	r24, Z+14	; 0x0e
    b9bc:	87 ff       	sbrs	r24, 7
    b9be:	0f c0       	rjmp	.+30     	; 0xb9de <f_read+0x208>
    b9c0:	01 e0       	ldi	r16, 0x01	; 1
    b9c2:	10 e0       	ldi	r17, 0x00	; 0
    b9c4:	b1 01       	movw	r22, r2
    b9c6:	eb 81       	ldd	r30, Y+3	; 0x03
    b9c8:	fc 81       	ldd	r31, Y+4	; 0x04
    b9ca:	81 81       	ldd	r24, Z+1	; 0x01
    b9cc:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <disk_write>
    b9d0:	89 2b       	or	r24, r25
    b9d2:	09 f0       	breq	.+2      	; 0xb9d6 <f_read+0x200>
    b9d4:	88 cf       	rjmp	.-240    	; 0xb8e6 <f_read+0x110>
    b9d6:	f7 01       	movw	r30, r14
    b9d8:	86 85       	ldd	r24, Z+14	; 0x0e
    b9da:	8f 77       	andi	r24, 0x7F	; 127
    b9dc:	86 87       	std	Z+14, r24	; 0x0e
    b9de:	e9 81       	ldd	r30, Y+1	; 0x01
    b9e0:	fa 81       	ldd	r31, Y+2	; 0x02
    b9e2:	01 e0       	ldi	r16, 0x01	; 1
    b9e4:	10 e0       	ldi	r17, 0x00	; 0
    b9e6:	a3 01       	movw	r20, r6
    b9e8:	92 01       	movw	r18, r4
    b9ea:	b1 01       	movw	r22, r2
    b9ec:	81 81       	ldd	r24, Z+1	; 0x01
    b9ee:	0e 94 45 6a 	call	0xd48a	; 0xd48a <disk_read>
    b9f2:	89 2b       	or	r24, r25
    b9f4:	09 f0       	breq	.+2      	; 0xb9f8 <f_read+0x222>
    b9f6:	77 cf       	rjmp	.-274    	; 0xb8e6 <f_read+0x110>
    b9f8:	f7 01       	movw	r30, r14
    b9fa:	40 8e       	std	Z+24, r4	; 0x18
    b9fc:	51 8e       	std	Z+25, r5	; 0x19
    b9fe:	62 8e       	std	Z+26, r6	; 0x1a
    ba00:	73 8e       	std	Z+27, r7	; 0x1b
    ba02:	f7 01       	movw	r30, r14
    ba04:	60 89       	ldd	r22, Z+16	; 0x10
    ba06:	71 89       	ldd	r23, Z+17	; 0x11
    ba08:	71 70       	andi	r23, 0x01	; 1
    ba0a:	80 e0       	ldi	r24, 0x00	; 0
    ba0c:	92 e0       	ldi	r25, 0x02	; 2
    ba0e:	86 1b       	sub	r24, r22
    ba10:	97 0b       	sbc	r25, r23
    ba12:	65 01       	movw	r12, r10
    ba14:	8a 15       	cp	r24, r10
    ba16:	9b 05       	cpc	r25, r11
    ba18:	08 f4       	brcc	.+2      	; 0xba1c <f_read+0x246>
    ba1a:	6c 01       	movw	r12, r24
    ba1c:	62 0d       	add	r22, r2
    ba1e:	73 1d       	adc	r23, r3
    ba20:	a6 01       	movw	r20, r12
    ba22:	c4 01       	movw	r24, r8
    ba24:	0e 94 a5 48 	call	0x914a	; 0x914a <mem_cpy.part.0>
    ba28:	ac 18       	sub	r10, r12
    ba2a:	bd 08       	sbc	r11, r13
    ba2c:	ed 81       	ldd	r30, Y+5	; 0x05
    ba2e:	fe 81       	ldd	r31, Y+6	; 0x06
    ba30:	80 81       	ld	r24, Z
    ba32:	91 81       	ldd	r25, Z+1	; 0x01
    ba34:	8c 0d       	add	r24, r12
    ba36:	9d 1d       	adc	r25, r13
    ba38:	91 83       	std	Z+1, r25	; 0x01
    ba3a:	80 83       	st	Z, r24
    ba3c:	8c 0c       	add	r8, r12
    ba3e:	9d 1c       	adc	r9, r13
    ba40:	f7 01       	movw	r30, r14
    ba42:	80 89       	ldd	r24, Z+16	; 0x10
    ba44:	91 89       	ldd	r25, Z+17	; 0x11
    ba46:	a2 89       	ldd	r26, Z+18	; 0x12
    ba48:	b3 89       	ldd	r27, Z+19	; 0x13
    ba4a:	8c 0d       	add	r24, r12
    ba4c:	9d 1d       	adc	r25, r13
    ba4e:	a1 1d       	adc	r26, r1
    ba50:	b1 1d       	adc	r27, r1
    ba52:	80 8b       	std	Z+16, r24	; 0x10
    ba54:	91 8b       	std	Z+17, r25	; 0x11
    ba56:	a2 8b       	std	Z+18, r26	; 0x12
    ba58:	b3 8b       	std	Z+19, r27	; 0x13
    ba5a:	f5 ce       	rjmp	.-534    	; 0xb846 <f_read+0x70>
    ba5c:	80 e0       	ldi	r24, 0x00	; 0
    ba5e:	01 c0       	rjmp	.+2      	; 0xba62 <f_read+0x28c>
    ba60:	87 e0       	ldi	r24, 0x07	; 7
    ba62:	90 e0       	ldi	r25, 0x00	; 0
    ba64:	26 96       	adiw	r28, 0x06	; 6
    ba66:	e2 e1       	ldi	r30, 0x12	; 18
    ba68:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

0000ba6c <f_write>:
    ba6c:	a8 e0       	ldi	r26, 0x08	; 8
    ba6e:	b0 e0       	ldi	r27, 0x00	; 0
    ba70:	ec e3       	ldi	r30, 0x3C	; 60
    ba72:	fd e5       	ldi	r31, 0x5D	; 93
    ba74:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
    ba78:	7c 01       	movw	r14, r24
    ba7a:	3b 01       	movw	r6, r22
    ba7c:	5a 01       	movw	r10, r20
    ba7e:	38 87       	std	Y+8, r19	; 0x08
    ba80:	2f 83       	std	Y+7, r18	; 0x07
    ba82:	f9 01       	movw	r30, r18
    ba84:	11 82       	std	Z+1, r1	; 0x01
    ba86:	10 82       	st	Z, r1
    ba88:	be 01       	movw	r22, r28
    ba8a:	6f 5f       	subi	r22, 0xFF	; 255
    ba8c:	7f 4f       	sbci	r23, 0xFF	; 255
    ba8e:	0e 94 79 48 	call	0x90f2	; 0x90f2 <validate>
    ba92:	00 97       	sbiw	r24, 0x00	; 0
    ba94:	09 f0       	breq	.+2      	; 0xba98 <f_write+0x2c>
    ba96:	7d c1       	rjmp	.+762    	; 0xbd92 <f_write+0x326>
    ba98:	f7 01       	movw	r30, r14
    ba9a:	87 85       	ldd	r24, Z+15	; 0x0f
    ba9c:	90 e0       	ldi	r25, 0x00	; 0
    ba9e:	00 97       	sbiw	r24, 0x00	; 0
    baa0:	09 f0       	breq	.+2      	; 0xbaa4 <f_write+0x38>
    baa2:	77 c1       	rjmp	.+750    	; 0xbd92 <f_write+0x326>
    baa4:	86 85       	ldd	r24, Z+14	; 0x0e
    baa6:	81 ff       	sbrs	r24, 1
    baa8:	72 c1       	rjmp	.+740    	; 0xbd8e <f_write+0x322>
    baaa:	80 89       	ldd	r24, Z+16	; 0x10
    baac:	91 89       	ldd	r25, Z+17	; 0x11
    baae:	a2 89       	ldd	r26, Z+18	; 0x12
    bab0:	b3 89       	ldd	r27, Z+19	; 0x13
    bab2:	ac 01       	movw	r20, r24
    bab4:	bd 01       	movw	r22, r26
    bab6:	4a 0d       	add	r20, r10
    bab8:	5b 1d       	adc	r21, r11
    baba:	61 1d       	adc	r22, r1
    babc:	71 1d       	adc	r23, r1
    babe:	48 17       	cp	r20, r24
    bac0:	59 07       	cpc	r21, r25
    bac2:	6a 07       	cpc	r22, r26
    bac4:	7b 07       	cpc	r23, r27
    bac6:	18 f4       	brcc	.+6      	; 0xbace <f_write+0x62>
    bac8:	5c 01       	movw	r10, r24
    baca:	a0 94       	com	r10
    bacc:	b0 94       	com	r11
    bace:	97 01       	movw	r18, r14
    bad0:	2c 5d       	subi	r18, 0xDC	; 220
    bad2:	3f 4f       	sbci	r19, 0xFF	; 255
    bad4:	3e 83       	std	Y+6, r19	; 0x06
    bad6:	2d 83       	std	Y+5, r18	; 0x05
    bad8:	a1 14       	cp	r10, r1
    bada:	b1 04       	cpc	r11, r1
    badc:	09 f4       	brne	.+2      	; 0xbae0 <f_write+0x74>
    bade:	4d c0       	rjmp	.+154    	; 0xbb7a <f_write+0x10e>
    bae0:	f7 01       	movw	r30, r14
    bae2:	40 89       	ldd	r20, Z+16	; 0x10
    bae4:	51 89       	ldd	r21, Z+17	; 0x11
    bae6:	62 89       	ldd	r22, Z+18	; 0x12
    bae8:	73 89       	ldd	r23, Z+19	; 0x13
    baea:	db 01       	movw	r26, r22
    baec:	ca 01       	movw	r24, r20
    baee:	91 70       	andi	r25, 0x01	; 1
    baf0:	aa 27       	eor	r26, r26
    baf2:	bb 27       	eor	r27, r27
    baf4:	89 2b       	or	r24, r25
    baf6:	8a 2b       	or	r24, r26
    baf8:	8b 2b       	or	r24, r27
    bafa:	09 f0       	breq	.+2      	; 0xbafe <f_write+0x92>
    bafc:	05 c1       	rjmp	.+522    	; 0xbd08 <f_write+0x29c>
    bafe:	e9 81       	ldd	r30, Y+1	; 0x01
    bb00:	fa 81       	ldd	r31, Y+2	; 0x02
    bb02:	81 84       	ldd	r8, Z+9	; 0x09
    bb04:	92 84       	ldd	r9, Z+10	; 0x0a
    bb06:	f1 e0       	ldi	r31, 0x01	; 1
    bb08:	8f 1a       	sub	r8, r31
    bb0a:	91 08       	sbc	r9, r1
    bb0c:	db 01       	movw	r26, r22
    bb0e:	ca 01       	movw	r24, r20
    bb10:	e9 e0       	ldi	r30, 0x09	; 9
    bb12:	b6 95       	lsr	r27
    bb14:	a7 95       	ror	r26
    bb16:	97 95       	ror	r25
    bb18:	87 95       	ror	r24
    bb1a:	ea 95       	dec	r30
    bb1c:	d1 f7       	brne	.-12     	; 0xbb12 <f_write+0xa6>
    bb1e:	88 22       	and	r8, r24
    bb20:	99 22       	and	r9, r25
    bb22:	81 14       	cp	r8, r1
    bb24:	91 04       	cpc	r9, r1
    bb26:	09 f0       	breq	.+2      	; 0xbb2a <f_write+0xbe>
    bb28:	51 c0       	rjmp	.+162    	; 0xbbcc <f_write+0x160>
    bb2a:	f7 01       	movw	r30, r14
    bb2c:	41 15       	cp	r20, r1
    bb2e:	51 05       	cpc	r21, r1
    bb30:	61 05       	cpc	r22, r1
    bb32:	71 05       	cpc	r23, r1
    bb34:	69 f4       	brne	.+26     	; 0xbb50 <f_write+0xe4>
    bb36:	66 81       	ldd	r22, Z+6	; 0x06
    bb38:	77 81       	ldd	r23, Z+7	; 0x07
    bb3a:	80 85       	ldd	r24, Z+8	; 0x08
    bb3c:	91 85       	ldd	r25, Z+9	; 0x09
    bb3e:	61 15       	cp	r22, r1
    bb40:	71 05       	cpc	r23, r1
    bb42:	81 05       	cpc	r24, r1
    bb44:	91 05       	cpc	r25, r1
    bb46:	f9 f4       	brne	.+62     	; 0xbb86 <f_write+0x11a>
    bb48:	40 e0       	ldi	r20, 0x00	; 0
    bb4a:	50 e0       	ldi	r21, 0x00	; 0
    bb4c:	ba 01       	movw	r22, r20
    bb4e:	0d c0       	rjmp	.+26     	; 0xbb6a <f_write+0xfe>
    bb50:	82 a1       	ldd	r24, Z+34	; 0x22
    bb52:	93 a1       	ldd	r25, Z+35	; 0x23
    bb54:	89 2b       	or	r24, r25
    bb56:	21 f0       	breq	.+8      	; 0xbb60 <f_write+0xf4>
    bb58:	c7 01       	movw	r24, r14
    bb5a:	0e 94 02 48 	call	0x9004	; 0x9004 <clmt_clust>
    bb5e:	08 c0       	rjmp	.+16     	; 0xbb70 <f_write+0x104>
    bb60:	f7 01       	movw	r30, r14
    bb62:	44 89       	ldd	r20, Z+20	; 0x14
    bb64:	55 89       	ldd	r21, Z+21	; 0x15
    bb66:	66 89       	ldd	r22, Z+22	; 0x16
    bb68:	77 89       	ldd	r23, Z+23	; 0x17
    bb6a:	c7 01       	movw	r24, r14
    bb6c:	0e 94 41 51 	call	0xa282	; 0xa282 <create_chain>
    bb70:	61 15       	cp	r22, r1
    bb72:	71 05       	cpc	r23, r1
    bb74:	81 05       	cpc	r24, r1
    bb76:	91 05       	cpc	r25, r1
    bb78:	31 f4       	brne	.+12     	; 0xbb86 <f_write+0x11a>
    bb7a:	f7 01       	movw	r30, r14
    bb7c:	86 85       	ldd	r24, Z+14	; 0x0e
    bb7e:	80 64       	ori	r24, 0x40	; 64
    bb80:	86 87       	std	Z+14, r24	; 0x0e
    bb82:	80 e0       	ldi	r24, 0x00	; 0
    bb84:	05 c1       	rjmp	.+522    	; 0xbd90 <f_write+0x324>
    bb86:	61 30       	cpi	r22, 0x01	; 1
    bb88:	71 05       	cpc	r23, r1
    bb8a:	81 05       	cpc	r24, r1
    bb8c:	91 05       	cpc	r25, r1
    bb8e:	11 f4       	brne	.+4      	; 0xbb94 <f_write+0x128>
    bb90:	82 e0       	ldi	r24, 0x02	; 2
    bb92:	07 c0       	rjmp	.+14     	; 0xbba2 <f_write+0x136>
    bb94:	6f 3f       	cpi	r22, 0xFF	; 255
    bb96:	ff ef       	ldi	r31, 0xFF	; 255
    bb98:	7f 07       	cpc	r23, r31
    bb9a:	8f 07       	cpc	r24, r31
    bb9c:	9f 07       	cpc	r25, r31
    bb9e:	21 f4       	brne	.+8      	; 0xbba8 <f_write+0x13c>
    bba0:	81 e0       	ldi	r24, 0x01	; 1
    bba2:	f7 01       	movw	r30, r14
    bba4:	87 87       	std	Z+15, r24	; 0x0f
    bba6:	f4 c0       	rjmp	.+488    	; 0xbd90 <f_write+0x324>
    bba8:	f7 01       	movw	r30, r14
    bbaa:	64 8b       	std	Z+20, r22	; 0x14
    bbac:	75 8b       	std	Z+21, r23	; 0x15
    bbae:	86 8b       	std	Z+22, r24	; 0x16
    bbb0:	97 8b       	std	Z+23, r25	; 0x17
    bbb2:	06 81       	ldd	r16, Z+6	; 0x06
    bbb4:	17 81       	ldd	r17, Z+7	; 0x07
    bbb6:	20 85       	ldd	r18, Z+8	; 0x08
    bbb8:	31 85       	ldd	r19, Z+9	; 0x09
    bbba:	01 15       	cp	r16, r1
    bbbc:	11 05       	cpc	r17, r1
    bbbe:	21 05       	cpc	r18, r1
    bbc0:	31 05       	cpc	r19, r1
    bbc2:	21 f4       	brne	.+8      	; 0xbbcc <f_write+0x160>
    bbc4:	66 83       	std	Z+6, r22	; 0x06
    bbc6:	77 83       	std	Z+7, r23	; 0x07
    bbc8:	80 87       	std	Z+8, r24	; 0x08
    bbca:	91 87       	std	Z+9, r25	; 0x09
    bbcc:	f7 01       	movw	r30, r14
    bbce:	86 85       	ldd	r24, Z+14	; 0x0e
    bbd0:	87 ff       	sbrs	r24, 7
    bbd2:	13 c0       	rjmp	.+38     	; 0xbbfa <f_write+0x18e>
    bbd4:	20 8d       	ldd	r18, Z+24	; 0x18
    bbd6:	31 8d       	ldd	r19, Z+25	; 0x19
    bbd8:	42 8d       	ldd	r20, Z+26	; 0x1a
    bbda:	53 8d       	ldd	r21, Z+27	; 0x1b
    bbdc:	e9 81       	ldd	r30, Y+1	; 0x01
    bbde:	fa 81       	ldd	r31, Y+2	; 0x02
    bbe0:	01 e0       	ldi	r16, 0x01	; 1
    bbe2:	10 e0       	ldi	r17, 0x00	; 0
    bbe4:	6d 81       	ldd	r22, Y+5	; 0x05
    bbe6:	7e 81       	ldd	r23, Y+6	; 0x06
    bbe8:	81 81       	ldd	r24, Z+1	; 0x01
    bbea:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <disk_write>
    bbee:	89 2b       	or	r24, r25
    bbf0:	b9 f6       	brne	.-82     	; 0xbba0 <f_write+0x134>
    bbf2:	f7 01       	movw	r30, r14
    bbf4:	86 85       	ldd	r24, Z+14	; 0x0e
    bbf6:	8f 77       	andi	r24, 0x7F	; 127
    bbf8:	86 87       	std	Z+14, r24	; 0x0e
    bbfa:	29 81       	ldd	r18, Y+1	; 0x01
    bbfc:	3a 81       	ldd	r19, Y+2	; 0x02
    bbfe:	3c 83       	std	Y+4, r19	; 0x04
    bc00:	2b 83       	std	Y+3, r18	; 0x03
    bc02:	f7 01       	movw	r30, r14
    bc04:	44 89       	ldd	r20, Z+20	; 0x14
    bc06:	55 89       	ldd	r21, Z+21	; 0x15
    bc08:	66 89       	ldd	r22, Z+22	; 0x16
    bc0a:	77 89       	ldd	r23, Z+23	; 0x17
    bc0c:	c9 01       	movw	r24, r18
    bc0e:	0e 94 da 47 	call	0x8fb4	; 0x8fb4 <clst2sect>
    bc12:	61 15       	cp	r22, r1
    bc14:	71 05       	cpc	r23, r1
    bc16:	81 05       	cpc	r24, r1
    bc18:	91 05       	cpc	r25, r1
    bc1a:	09 f4       	brne	.+2      	; 0xbc1e <f_write+0x1b2>
    bc1c:	b9 cf       	rjmp	.-142    	; 0xbb90 <f_write+0x124>
    bc1e:	1b 01       	movw	r2, r22
    bc20:	2c 01       	movw	r4, r24
    bc22:	28 0c       	add	r2, r8
    bc24:	39 1c       	adc	r3, r9
    bc26:	41 1c       	adc	r4, r1
    bc28:	51 1c       	adc	r5, r1
    bc2a:	65 01       	movw	r12, r10
    bc2c:	cd 2c       	mov	r12, r13
    bc2e:	dd 24       	eor	r13, r13
    bc30:	c6 94       	lsr	r12
    bc32:	c1 14       	cp	r12, r1
    bc34:	d1 04       	cpc	r13, r1
    bc36:	f1 f1       	breq	.+124    	; 0xbcb4 <f_write+0x248>
    bc38:	eb 81       	ldd	r30, Y+3	; 0x03
    bc3a:	fc 81       	ldd	r31, Y+4	; 0x04
    bc3c:	81 85       	ldd	r24, Z+9	; 0x09
    bc3e:	92 85       	ldd	r25, Z+10	; 0x0a
    bc40:	94 01       	movw	r18, r8
    bc42:	2c 0d       	add	r18, r12
    bc44:	3d 1d       	adc	r19, r13
    bc46:	82 17       	cp	r24, r18
    bc48:	93 07       	cpc	r25, r19
    bc4a:	18 f4       	brcc	.+6      	; 0xbc52 <f_write+0x1e6>
    bc4c:	6c 01       	movw	r12, r24
    bc4e:	c8 18       	sub	r12, r8
    bc50:	d9 08       	sbc	r13, r9
    bc52:	86 01       	movw	r16, r12
    bc54:	a2 01       	movw	r20, r4
    bc56:	91 01       	movw	r18, r2
    bc58:	b3 01       	movw	r22, r6
    bc5a:	eb 81       	ldd	r30, Y+3	; 0x03
    bc5c:	fc 81       	ldd	r31, Y+4	; 0x04
    bc5e:	81 81       	ldd	r24, Z+1	; 0x01
    bc60:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <disk_write>
    bc64:	89 2b       	or	r24, r25
    bc66:	09 f0       	breq	.+2      	; 0xbc6a <f_write+0x1fe>
    bc68:	9b cf       	rjmp	.-202    	; 0xbba0 <f_write+0x134>
    bc6a:	f7 01       	movw	r30, r14
    bc6c:	80 8d       	ldd	r24, Z+24	; 0x18
    bc6e:	91 8d       	ldd	r25, Z+25	; 0x19
    bc70:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bc72:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bc74:	82 19       	sub	r24, r2
    bc76:	93 09       	sbc	r25, r3
    bc78:	a4 09       	sbc	r26, r4
    bc7a:	b5 09       	sbc	r27, r5
    bc7c:	a6 01       	movw	r20, r12
    bc7e:	60 e0       	ldi	r22, 0x00	; 0
    bc80:	70 e0       	ldi	r23, 0x00	; 0
    bc82:	84 17       	cp	r24, r20
    bc84:	95 07       	cpc	r25, r21
    bc86:	a6 07       	cpc	r26, r22
    bc88:	b7 07       	cpc	r27, r23
    bc8a:	80 f4       	brcc	.+32     	; 0xbcac <f_write+0x240>
    bc8c:	98 2f       	mov	r25, r24
    bc8e:	88 27       	eor	r24, r24
    bc90:	99 0f       	add	r25, r25
    bc92:	b3 01       	movw	r22, r6
    bc94:	68 0f       	add	r22, r24
    bc96:	79 1f       	adc	r23, r25
    bc98:	40 e0       	ldi	r20, 0x00	; 0
    bc9a:	52 e0       	ldi	r21, 0x02	; 2
    bc9c:	8d 81       	ldd	r24, Y+5	; 0x05
    bc9e:	9e 81       	ldd	r25, Y+6	; 0x06
    bca0:	0e 94 a5 48 	call	0x914a	; 0x914a <mem_cpy.part.0>
    bca4:	f7 01       	movw	r30, r14
    bca6:	86 85       	ldd	r24, Z+14	; 0x0e
    bca8:	8f 77       	andi	r24, 0x7F	; 127
    bcaa:	86 87       	std	Z+14, r24	; 0x0e
    bcac:	dc 2c       	mov	r13, r12
    bcae:	cc 24       	eor	r12, r12
    bcb0:	dd 0c       	add	r13, r13
    bcb2:	43 c0       	rjmp	.+134    	; 0xbd3a <f_write+0x2ce>
    bcb4:	f7 01       	movw	r30, r14
    bcb6:	80 8d       	ldd	r24, Z+24	; 0x18
    bcb8:	91 8d       	ldd	r25, Z+25	; 0x19
    bcba:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bcbc:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bcbe:	28 16       	cp	r2, r24
    bcc0:	39 06       	cpc	r3, r25
    bcc2:	4a 06       	cpc	r4, r26
    bcc4:	5b 06       	cpc	r5, r27
    bcc6:	d9 f0       	breq	.+54     	; 0xbcfe <f_write+0x292>
    bcc8:	40 89       	ldd	r20, Z+16	; 0x10
    bcca:	51 89       	ldd	r21, Z+17	; 0x11
    bccc:	62 89       	ldd	r22, Z+18	; 0x12
    bcce:	73 89       	ldd	r23, Z+19	; 0x13
    bcd0:	82 85       	ldd	r24, Z+10	; 0x0a
    bcd2:	93 85       	ldd	r25, Z+11	; 0x0b
    bcd4:	a4 85       	ldd	r26, Z+12	; 0x0c
    bcd6:	b5 85       	ldd	r27, Z+13	; 0x0d
    bcd8:	48 17       	cp	r20, r24
    bcda:	59 07       	cpc	r21, r25
    bcdc:	6a 07       	cpc	r22, r26
    bcde:	7b 07       	cpc	r23, r27
    bce0:	70 f4       	brcc	.+28     	; 0xbcfe <f_write+0x292>
    bce2:	01 e0       	ldi	r16, 0x01	; 1
    bce4:	10 e0       	ldi	r17, 0x00	; 0
    bce6:	a2 01       	movw	r20, r4
    bce8:	91 01       	movw	r18, r2
    bcea:	6d 81       	ldd	r22, Y+5	; 0x05
    bcec:	7e 81       	ldd	r23, Y+6	; 0x06
    bcee:	eb 81       	ldd	r30, Y+3	; 0x03
    bcf0:	fc 81       	ldd	r31, Y+4	; 0x04
    bcf2:	81 81       	ldd	r24, Z+1	; 0x01
    bcf4:	0e 94 45 6a 	call	0xd48a	; 0xd48a <disk_read>
    bcf8:	89 2b       	or	r24, r25
    bcfa:	09 f0       	breq	.+2      	; 0xbcfe <f_write+0x292>
    bcfc:	51 cf       	rjmp	.-350    	; 0xbba0 <f_write+0x134>
    bcfe:	f7 01       	movw	r30, r14
    bd00:	20 8e       	std	Z+24, r2	; 0x18
    bd02:	31 8e       	std	Z+25, r3	; 0x19
    bd04:	42 8e       	std	Z+26, r4	; 0x1a
    bd06:	53 8e       	std	Z+27, r5	; 0x1b
    bd08:	f7 01       	movw	r30, r14
    bd0a:	80 89       	ldd	r24, Z+16	; 0x10
    bd0c:	91 89       	ldd	r25, Z+17	; 0x11
    bd0e:	91 70       	andi	r25, 0x01	; 1
    bd10:	20 e0       	ldi	r18, 0x00	; 0
    bd12:	32 e0       	ldi	r19, 0x02	; 2
    bd14:	28 1b       	sub	r18, r24
    bd16:	39 0b       	sbc	r19, r25
    bd18:	65 01       	movw	r12, r10
    bd1a:	2a 15       	cp	r18, r10
    bd1c:	3b 05       	cpc	r19, r11
    bd1e:	08 f4       	brcc	.+2      	; 0xbd22 <f_write+0x2b6>
    bd20:	69 01       	movw	r12, r18
    bd22:	a6 01       	movw	r20, r12
    bd24:	b3 01       	movw	r22, r6
    bd26:	2d 81       	ldd	r18, Y+5	; 0x05
    bd28:	3e 81       	ldd	r19, Y+6	; 0x06
    bd2a:	82 0f       	add	r24, r18
    bd2c:	93 1f       	adc	r25, r19
    bd2e:	0e 94 a5 48 	call	0x914a	; 0x914a <mem_cpy.part.0>
    bd32:	f7 01       	movw	r30, r14
    bd34:	86 85       	ldd	r24, Z+14	; 0x0e
    bd36:	80 68       	ori	r24, 0x80	; 128
    bd38:	86 87       	std	Z+14, r24	; 0x0e
    bd3a:	ac 18       	sub	r10, r12
    bd3c:	bd 08       	sbc	r11, r13
    bd3e:	ef 81       	ldd	r30, Y+7	; 0x07
    bd40:	f8 85       	ldd	r31, Y+8	; 0x08
    bd42:	80 81       	ld	r24, Z
    bd44:	91 81       	ldd	r25, Z+1	; 0x01
    bd46:	8c 0d       	add	r24, r12
    bd48:	9d 1d       	adc	r25, r13
    bd4a:	91 83       	std	Z+1, r25	; 0x01
    bd4c:	80 83       	st	Z, r24
    bd4e:	6c 0c       	add	r6, r12
    bd50:	7d 1c       	adc	r7, r13
    bd52:	f7 01       	movw	r30, r14
    bd54:	80 89       	ldd	r24, Z+16	; 0x10
    bd56:	91 89       	ldd	r25, Z+17	; 0x11
    bd58:	a2 89       	ldd	r26, Z+18	; 0x12
    bd5a:	b3 89       	ldd	r27, Z+19	; 0x13
    bd5c:	8c 0d       	add	r24, r12
    bd5e:	9d 1d       	adc	r25, r13
    bd60:	a1 1d       	adc	r26, r1
    bd62:	b1 1d       	adc	r27, r1
    bd64:	80 8b       	std	Z+16, r24	; 0x10
    bd66:	91 8b       	std	Z+17, r25	; 0x11
    bd68:	a2 8b       	std	Z+18, r26	; 0x12
    bd6a:	b3 8b       	std	Z+19, r27	; 0x13
    bd6c:	42 85       	ldd	r20, Z+10	; 0x0a
    bd6e:	53 85       	ldd	r21, Z+11	; 0x0b
    bd70:	64 85       	ldd	r22, Z+12	; 0x0c
    bd72:	75 85       	ldd	r23, Z+13	; 0x0d
    bd74:	48 17       	cp	r20, r24
    bd76:	59 07       	cpc	r21, r25
    bd78:	6a 07       	cpc	r22, r26
    bd7a:	7b 07       	cpc	r23, r27
    bd7c:	10 f4       	brcc	.+4      	; 0xbd82 <f_write+0x316>
    bd7e:	ac 01       	movw	r20, r24
    bd80:	bd 01       	movw	r22, r26
    bd82:	f7 01       	movw	r30, r14
    bd84:	42 87       	std	Z+10, r20	; 0x0a
    bd86:	53 87       	std	Z+11, r21	; 0x0b
    bd88:	64 87       	std	Z+12, r22	; 0x0c
    bd8a:	75 87       	std	Z+13, r23	; 0x0d
    bd8c:	a5 ce       	rjmp	.-694    	; 0xbad8 <f_write+0x6c>
    bd8e:	87 e0       	ldi	r24, 0x07	; 7
    bd90:	90 e0       	ldi	r25, 0x00	; 0
    bd92:	28 96       	adiw	r28, 0x08	; 8
    bd94:	e2 e1       	ldi	r30, 0x12	; 18
    bd96:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

0000bd9a <f_sync>:
    bd9a:	8f 92       	push	r8
    bd9c:	9f 92       	push	r9
    bd9e:	af 92       	push	r10
    bda0:	bf 92       	push	r11
    bda2:	ef 92       	push	r14
    bda4:	ff 92       	push	r15
    bda6:	0f 93       	push	r16
    bda8:	1f 93       	push	r17
    bdaa:	cf 93       	push	r28
    bdac:	df 93       	push	r29
    bdae:	00 d0       	rcall	.+0      	; 0xbdb0 <f_sync+0x16>
    bdb0:	cd b7       	in	r28, 0x3d	; 61
    bdb2:	de b7       	in	r29, 0x3e	; 62
    bdb4:	7c 01       	movw	r14, r24
    bdb6:	be 01       	movw	r22, r28
    bdb8:	6f 5f       	subi	r22, 0xFF	; 255
    bdba:	7f 4f       	sbci	r23, 0xFF	; 255
    bdbc:	0e 94 79 48 	call	0x90f2	; 0x90f2 <validate>
    bdc0:	00 97       	sbiw	r24, 0x00	; 0
    bdc2:	09 f0       	breq	.+2      	; 0xbdc6 <f_sync+0x2c>
    bdc4:	5d c0       	rjmp	.+186    	; 0xbe80 <f_sync+0xe6>
    bdc6:	f7 01       	movw	r30, r14
    bdc8:	86 85       	ldd	r24, Z+14	; 0x0e
    bdca:	86 ff       	sbrs	r24, 6
    bdcc:	55 c0       	rjmp	.+170    	; 0xbe78 <f_sync+0xde>
    bdce:	87 ff       	sbrs	r24, 7
    bdd0:	15 c0       	rjmp	.+42     	; 0xbdfc <f_sync+0x62>
    bdd2:	20 8d       	ldd	r18, Z+24	; 0x18
    bdd4:	31 8d       	ldd	r19, Z+25	; 0x19
    bdd6:	42 8d       	ldd	r20, Z+26	; 0x1a
    bdd8:	53 8d       	ldd	r21, Z+27	; 0x1b
    bdda:	e9 81       	ldd	r30, Y+1	; 0x01
    bddc:	fa 81       	ldd	r31, Y+2	; 0x02
    bdde:	01 e0       	ldi	r16, 0x01	; 1
    bde0:	10 e0       	ldi	r17, 0x00	; 0
    bde2:	b7 01       	movw	r22, r14
    bde4:	6c 5d       	subi	r22, 0xDC	; 220
    bde6:	7f 4f       	sbci	r23, 0xFF	; 255
    bde8:	81 81       	ldd	r24, Z+1	; 0x01
    bdea:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <disk_write>
    bdee:	89 2b       	or	r24, r25
    bdf0:	09 f0       	breq	.+2      	; 0xbdf4 <f_sync+0x5a>
    bdf2:	44 c0       	rjmp	.+136    	; 0xbe7c <f_sync+0xe2>
    bdf4:	f7 01       	movw	r30, r14
    bdf6:	86 85       	ldd	r24, Z+14	; 0x0e
    bdf8:	8f 77       	andi	r24, 0x7F	; 127
    bdfa:	86 87       	std	Z+14, r24	; 0x0e
    bdfc:	0e 94 fa 70 	call	0xe1f4	; 0xe1f4 <get_fattime>
    be00:	4b 01       	movw	r8, r22
    be02:	5c 01       	movw	r10, r24
    be04:	f7 01       	movw	r30, r14
    be06:	44 8d       	ldd	r20, Z+28	; 0x1c
    be08:	55 8d       	ldd	r21, Z+29	; 0x1d
    be0a:	66 8d       	ldd	r22, Z+30	; 0x1e
    be0c:	77 8d       	ldd	r23, Z+31	; 0x1f
    be0e:	89 81       	ldd	r24, Y+1	; 0x01
    be10:	9a 81       	ldd	r25, Y+2	; 0x02
    be12:	0e 94 fc 4b 	call	0x97f8	; 0x97f8 <move_window>
    be16:	00 97       	sbiw	r24, 0x00	; 0
    be18:	99 f5       	brne	.+102    	; 0xbe80 <f_sync+0xe6>
    be1a:	f7 01       	movw	r30, r14
    be1c:	00 a1       	ldd	r16, Z+32	; 0x20
    be1e:	11 a1       	ldd	r17, Z+33	; 0x21
    be20:	f8 01       	movw	r30, r16
    be22:	83 85       	ldd	r24, Z+11	; 0x0b
    be24:	80 62       	ori	r24, 0x20	; 32
    be26:	83 87       	std	Z+11, r24	; 0x0b
    be28:	f7 01       	movw	r30, r14
    be2a:	26 81       	ldd	r18, Z+6	; 0x06
    be2c:	37 81       	ldd	r19, Z+7	; 0x07
    be2e:	40 85       	ldd	r20, Z+8	; 0x08
    be30:	51 85       	ldd	r21, Z+9	; 0x09
    be32:	b8 01       	movw	r22, r16
    be34:	80 81       	ld	r24, Z
    be36:	91 81       	ldd	r25, Z+1	; 0x01
    be38:	0e 94 82 4a 	call	0x9504	; 0x9504 <st_clust.isra.5>
    be3c:	f7 01       	movw	r30, r14
    be3e:	42 85       	ldd	r20, Z+10	; 0x0a
    be40:	53 85       	ldd	r21, Z+11	; 0x0b
    be42:	64 85       	ldd	r22, Z+12	; 0x0c
    be44:	75 85       	ldd	r23, Z+13	; 0x0d
    be46:	c8 01       	movw	r24, r16
    be48:	4c 96       	adiw	r24, 0x1c	; 28
    be4a:	0e 94 36 47 	call	0x8e6c	; 0x8e6c <st_dword>
    be4e:	b5 01       	movw	r22, r10
    be50:	a4 01       	movw	r20, r8
    be52:	c8 01       	movw	r24, r16
    be54:	46 96       	adiw	r24, 0x16	; 22
    be56:	0e 94 36 47 	call	0x8e6c	; 0x8e6c <st_dword>
    be5a:	f8 01       	movw	r30, r16
    be5c:	12 8a       	std	Z+18, r1	; 0x12
    be5e:	13 8a       	std	Z+19, r1	; 0x13
    be60:	89 81       	ldd	r24, Y+1	; 0x01
    be62:	9a 81       	ldd	r25, Y+2	; 0x02
    be64:	21 e0       	ldi	r18, 0x01	; 1
    be66:	fc 01       	movw	r30, r24
    be68:	23 83       	std	Z+3, r18	; 0x03
    be6a:	0e 94 e2 4a 	call	0x95c4	; 0x95c4 <sync_fs>
    be6e:	f7 01       	movw	r30, r14
    be70:	26 85       	ldd	r18, Z+14	; 0x0e
    be72:	2f 7b       	andi	r18, 0xBF	; 191
    be74:	26 87       	std	Z+14, r18	; 0x0e
    be76:	04 c0       	rjmp	.+8      	; 0xbe80 <f_sync+0xe6>
    be78:	80 e0       	ldi	r24, 0x00	; 0
    be7a:	01 c0       	rjmp	.+2      	; 0xbe7e <f_sync+0xe4>
    be7c:	81 e0       	ldi	r24, 0x01	; 1
    be7e:	90 e0       	ldi	r25, 0x00	; 0
    be80:	0f 90       	pop	r0
    be82:	0f 90       	pop	r0
    be84:	df 91       	pop	r29
    be86:	cf 91       	pop	r28
    be88:	1f 91       	pop	r17
    be8a:	0f 91       	pop	r16
    be8c:	ff 90       	pop	r15
    be8e:	ef 90       	pop	r14
    be90:	bf 90       	pop	r11
    be92:	af 90       	pop	r10
    be94:	9f 90       	pop	r9
    be96:	8f 90       	pop	r8
    be98:	08 95       	ret

0000be9a <f_close>:
    be9a:	a2 e0       	ldi	r26, 0x02	; 2
    be9c:	b0 e0       	ldi	r27, 0x00	; 0
    be9e:	e3 e5       	ldi	r30, 0x53	; 83
    bea0:	ff e5       	ldi	r31, 0x5F	; 95
    bea2:	0c 94 dd e2 	jmp	0x1c5ba	; 0x1c5ba <__prologue_saves__+0x1c>
    bea6:	8c 01       	movw	r16, r24
    bea8:	78 df       	rcall	.-272    	; 0xbd9a <f_sync>
    beaa:	00 97       	sbiw	r24, 0x00	; 0
    beac:	59 f4       	brne	.+22     	; 0xbec4 <f_close+0x2a>
    beae:	be 01       	movw	r22, r28
    beb0:	6f 5f       	subi	r22, 0xFF	; 255
    beb2:	7f 4f       	sbci	r23, 0xFF	; 255
    beb4:	c8 01       	movw	r24, r16
    beb6:	0e 94 79 48 	call	0x90f2	; 0x90f2 <validate>
    beba:	00 97       	sbiw	r24, 0x00	; 0
    bebc:	19 f4       	brne	.+6      	; 0xbec4 <f_close+0x2a>
    bebe:	f8 01       	movw	r30, r16
    bec0:	11 82       	std	Z+1, r1	; 0x01
    bec2:	10 82       	st	Z, r1
    bec4:	22 96       	adiw	r28, 0x02	; 2
    bec6:	e4 e0       	ldi	r30, 0x04	; 4
    bec8:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

0000becc <f_chdir>:
    becc:	a2 e3       	ldi	r26, 0x32	; 50
    bece:	b0 e0       	ldi	r27, 0x00	; 0
    bed0:	ec e6       	ldi	r30, 0x6C	; 108
    bed2:	ff e5       	ldi	r31, 0x5F	; 95
    bed4:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
    bed8:	9a ab       	std	Y+50, r25	; 0x32
    beda:	89 ab       	std	Y+49, r24	; 0x31
    bedc:	40 e0       	ldi	r20, 0x00	; 0
    bede:	be 01       	movw	r22, r28
    bee0:	61 5d       	subi	r22, 0xD1	; 209
    bee2:	7f 4f       	sbci	r23, 0xFF	; 255
    bee4:	ce 01       	movw	r24, r28
    bee6:	c1 96       	adiw	r24, 0x31	; 49
    bee8:	0e 94 77 4c 	call	0x98ee	; 0x98ee <mount_volume>
    beec:	00 97       	sbiw	r24, 0x00	; 0
    beee:	09 f0       	breq	.+2      	; 0xbef2 <f_chdir+0x26>
    bef0:	44 c0       	rjmp	.+136    	; 0xbf7a <f_chdir+0xae>
    bef2:	8f a5       	ldd	r24, Y+47	; 0x2f
    bef4:	98 a9       	ldd	r25, Y+48	; 0x30
    bef6:	9a 83       	std	Y+2, r25	; 0x02
    bef8:	89 83       	std	Y+1, r24	; 0x01
    befa:	80 e0       	ldi	r24, 0x00	; 0
    befc:	92 e0       	ldi	r25, 0x02	; 2
    befe:	0e 94 89 69 	call	0xd312	; 0xd312 <ff_memalloc>
    bf02:	7c 01       	movw	r14, r24
    bf04:	00 97       	sbiw	r24, 0x00	; 0
    bf06:	a9 f1       	breq	.+106    	; 0xbf72 <f_chdir+0xa6>
    bf08:	ef a5       	ldd	r30, Y+47	; 0x2f
    bf0a:	f8 a9       	ldd	r31, Y+48	; 0x30
    bf0c:	94 87       	std	Z+12, r25	; 0x0c
    bf0e:	83 87       	std	Z+11, r24	; 0x0b
    bf10:	69 a9       	ldd	r22, Y+49	; 0x31
    bf12:	7a a9       	ldd	r23, Y+50	; 0x32
    bf14:	ce 01       	movw	r24, r28
    bf16:	01 96       	adiw	r24, 0x01	; 1
    bf18:	39 d8       	rcall	.-3982   	; 0xaf8c <follow_path>
    bf1a:	8c 01       	movw	r16, r24
    bf1c:	89 2b       	or	r24, r25
    bf1e:	09 f5       	brne	.+66     	; 0xbf62 <f_chdir+0x96>
    bf20:	88 a5       	ldd	r24, Y+40	; 0x28
    bf22:	87 ff       	sbrs	r24, 7
    bf24:	0b c0       	rjmp	.+22     	; 0xbf3c <f_chdir+0x70>
    bf26:	ef a5       	ldd	r30, Y+47	; 0x2f
    bf28:	f8 a9       	ldd	r31, Y+48	; 0x30
    bf2a:	8f 81       	ldd	r24, Y+7	; 0x07
    bf2c:	98 85       	ldd	r25, Y+8	; 0x08
    bf2e:	a9 85       	ldd	r26, Y+9	; 0x09
    bf30:	ba 85       	ldd	r27, Y+10	; 0x0a
    bf32:	85 8b       	std	Z+21, r24	; 0x15
    bf34:	96 8b       	std	Z+22, r25	; 0x16
    bf36:	a7 8b       	std	Z+23, r26	; 0x17
    bf38:	b0 8f       	std	Z+24, r27	; 0x18
    bf3a:	13 c0       	rjmp	.+38     	; 0xbf62 <f_chdir+0x96>
    bf3c:	8d 81       	ldd	r24, Y+5	; 0x05
    bf3e:	84 ff       	sbrs	r24, 4
    bf40:	0e c0       	rjmp	.+28     	; 0xbf5e <f_chdir+0x92>
    bf42:	cf a4       	ldd	r12, Y+47	; 0x2f
    bf44:	d8 a8       	ldd	r13, Y+48	; 0x30
    bf46:	6b 8d       	ldd	r22, Y+27	; 0x1b
    bf48:	7c 8d       	ldd	r23, Y+28	; 0x1c
    bf4a:	f6 01       	movw	r30, r12
    bf4c:	80 81       	ld	r24, Z
    bf4e:	0e 94 6d 4a 	call	0x94da	; 0x94da <ld_clust.isra.4>
    bf52:	f6 01       	movw	r30, r12
    bf54:	65 8b       	std	Z+21, r22	; 0x15
    bf56:	76 8b       	std	Z+22, r23	; 0x16
    bf58:	87 8b       	std	Z+23, r24	; 0x17
    bf5a:	90 8f       	std	Z+24, r25	; 0x18
    bf5c:	02 c0       	rjmp	.+4      	; 0xbf62 <f_chdir+0x96>
    bf5e:	05 e0       	ldi	r16, 0x05	; 5
    bf60:	10 e0       	ldi	r17, 0x00	; 0
    bf62:	c7 01       	movw	r24, r14
    bf64:	0e 94 8c 69 	call	0xd318	; 0xd318 <ff_memfree>
    bf68:	04 30       	cpi	r16, 0x04	; 4
    bf6a:	11 05       	cpc	r17, r1
    bf6c:	29 f4       	brne	.+10     	; 0xbf78 <f_chdir+0xac>
    bf6e:	85 e0       	ldi	r24, 0x05	; 5
    bf70:	01 c0       	rjmp	.+2      	; 0xbf74 <f_chdir+0xa8>
    bf72:	81 e1       	ldi	r24, 0x11	; 17
    bf74:	90 e0       	ldi	r25, 0x00	; 0
    bf76:	01 c0       	rjmp	.+2      	; 0xbf7a <f_chdir+0xae>
    bf78:	c8 01       	movw	r24, r16
    bf7a:	e2 96       	adiw	r28, 0x32	; 50
    bf7c:	e8 e0       	ldi	r30, 0x08	; 8
    bf7e:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

0000bf82 <f_getcwd>:
    bf82:	a8 e4       	ldi	r26, 0x48	; 72
    bf84:	b1 e0       	ldi	r27, 0x01	; 1
    bf86:	e7 ec       	ldi	r30, 0xC7	; 199
    bf88:	ff e5       	ldi	r31, 0x5F	; 95
    bf8a:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
    bf8e:	c9 5b       	subi	r28, 0xB9	; 185
    bf90:	de 4f       	sbci	r29, 0xFE	; 254
    bf92:	99 83       	std	Y+1, r25	; 0x01
    bf94:	88 83       	st	Y, r24
    bf96:	c7 54       	subi	r28, 0x47	; 71
    bf98:	d1 40       	sbci	r29, 0x01	; 1
    bf9a:	4b 01       	movw	r8, r22
    bf9c:	7c 01       	movw	r14, r24
    bf9e:	fc 01       	movw	r30, r24
    bfa0:	10 82       	st	Z, r1
    bfa2:	40 e0       	ldi	r20, 0x00	; 0
    bfa4:	be 01       	movw	r22, r28
    bfa6:	6b 5b       	subi	r22, 0xBB	; 187
    bfa8:	7e 4f       	sbci	r23, 0xFE	; 254
    bfaa:	ce 01       	movw	r24, r28
    bfac:	89 5b       	subi	r24, 0xB9	; 185
    bfae:	9e 4f       	sbci	r25, 0xFE	; 254
    bfb0:	0e 94 77 4c 	call	0x98ee	; 0x98ee <mount_volume>
    bfb4:	1c 01       	movw	r2, r24
    bfb6:	89 2b       	or	r24, r25
    bfb8:	09 f0       	breq	.+2      	; 0xbfbc <f_getcwd+0x3a>
    bfba:	03 c1       	rjmp	.+518    	; 0xc1c2 <f_getcwd+0x240>
    bfbc:	cb 5b       	subi	r28, 0xBB	; 187
    bfbe:	de 4f       	sbci	r29, 0xFE	; 254
    bfc0:	88 81       	ld	r24, Y
    bfc2:	99 81       	ldd	r25, Y+1	; 0x01
    bfc4:	c5 54       	subi	r28, 0x45	; 69
    bfc6:	d1 40       	sbci	r29, 0x01	; 1
    bfc8:	c9 5e       	subi	r28, 0xE9	; 233
    bfca:	de 4f       	sbci	r29, 0xFE	; 254
    bfcc:	99 83       	std	Y+1, r25	; 0x01
    bfce:	88 83       	st	Y, r24
    bfd0:	c7 51       	subi	r28, 0x17	; 23
    bfd2:	d1 40       	sbci	r29, 0x01	; 1
    bfd4:	80 e0       	ldi	r24, 0x00	; 0
    bfd6:	92 e0       	ldi	r25, 0x02	; 2
    bfd8:	0e 94 89 69 	call	0xd312	; 0xd312 <ff_memalloc>
    bfdc:	5c 01       	movw	r10, r24
    bfde:	00 97       	sbiw	r24, 0x00	; 0
    bfe0:	09 f4       	brne	.+2      	; 0xbfe4 <f_getcwd+0x62>
    bfe2:	f3 c0       	rjmp	.+486    	; 0xc1ca <f_getcwd+0x248>
    bfe4:	cb 5b       	subi	r28, 0xBB	; 187
    bfe6:	de 4f       	sbci	r29, 0xFE	; 254
    bfe8:	e8 81       	ld	r30, Y
    bfea:	f9 81       	ldd	r31, Y+1	; 0x01
    bfec:	c5 54       	subi	r28, 0x45	; 69
    bfee:	d1 40       	sbci	r29, 0x01	; 1
    bff0:	94 87       	std	Z+12, r25	; 0x0c
    bff2:	83 87       	std	Z+11, r24	; 0x0b
    bff4:	85 89       	ldd	r24, Z+21	; 0x15
    bff6:	96 89       	ldd	r25, Z+22	; 0x16
    bff8:	a7 89       	ldd	r26, Z+23	; 0x17
    bffa:	b0 8d       	ldd	r27, Z+24	; 0x18
    bffc:	c3 5e       	subi	r28, 0xE3	; 227
    bffe:	de 4f       	sbci	r29, 0xFE	; 254
    c000:	88 83       	st	Y, r24
    c002:	99 83       	std	Y+1, r25	; 0x01
    c004:	aa 83       	std	Y+2, r26	; 0x02
    c006:	bb 83       	std	Y+3, r27	; 0x03
    c008:	cd 51       	subi	r28, 0x1D	; 29
    c00a:	d1 40       	sbci	r29, 0x01	; 1
    c00c:	84 01       	movw	r16, r8
    c00e:	ce 01       	movw	r24, r28
    c010:	01 96       	adiw	r24, 0x01	; 1
    c012:	6c 01       	movw	r12, r24
    c014:	c3 5e       	subi	r28, 0xE3	; 227
    c016:	de 4f       	sbci	r29, 0xFE	; 254
    c018:	48 80       	ld	r4, Y
    c01a:	59 80       	ldd	r5, Y+1	; 0x01
    c01c:	6a 80       	ldd	r6, Y+2	; 0x02
    c01e:	7b 80       	ldd	r7, Y+3	; 0x03
    c020:	cd 51       	subi	r28, 0x1D	; 29
    c022:	d1 40       	sbci	r29, 0x01	; 1
    c024:	41 14       	cp	r4, r1
    c026:	51 04       	cpc	r5, r1
    c028:	61 04       	cpc	r6, r1
    c02a:	71 04       	cpc	r7, r1
    c02c:	09 f4       	brne	.+2      	; 0xc030 <f_getcwd+0xae>
    c02e:	a3 c0       	rjmp	.+326    	; 0xc176 <f_getcwd+0x1f4>
    c030:	40 e2       	ldi	r20, 0x20	; 32
    c032:	50 e0       	ldi	r21, 0x00	; 0
    c034:	60 e0       	ldi	r22, 0x00	; 0
    c036:	70 e0       	ldi	r23, 0x00	; 0
    c038:	ce 01       	movw	r24, r28
    c03a:	89 5e       	subi	r24, 0xE9	; 233
    c03c:	9e 4f       	sbci	r25, 0xFE	; 254
    c03e:	0e 94 80 50 	call	0xa100	; 0xa100 <dir_sdi>
    c042:	00 97       	sbiw	r24, 0x00	; 0
    c044:	09 f0       	breq	.+2      	; 0xc048 <f_getcwd+0xc6>
    c046:	c6 c0       	rjmp	.+396    	; 0xc1d4 <f_getcwd+0x252>
    c048:	c3 5d       	subi	r28, 0xD3	; 211
    c04a:	de 4f       	sbci	r29, 0xFE	; 254
    c04c:	48 81       	ld	r20, Y
    c04e:	59 81       	ldd	r21, Y+1	; 0x01
    c050:	6a 81       	ldd	r22, Y+2	; 0x02
    c052:	7b 81       	ldd	r23, Y+3	; 0x03
    c054:	cd 52       	subi	r28, 0x2D	; 45
    c056:	d1 40       	sbci	r29, 0x01	; 1
    c058:	cb 5b       	subi	r28, 0xBB	; 187
    c05a:	de 4f       	sbci	r29, 0xFE	; 254
    c05c:	88 81       	ld	r24, Y
    c05e:	99 81       	ldd	r25, Y+1	; 0x01
    c060:	c5 54       	subi	r28, 0x45	; 69
    c062:	d1 40       	sbci	r29, 0x01	; 1
    c064:	0e 94 fc 4b 	call	0x97f8	; 0x97f8 <move_window>
    c068:	00 97       	sbiw	r24, 0x00	; 0
    c06a:	09 f0       	breq	.+2      	; 0xc06e <f_getcwd+0xec>
    c06c:	b3 c0       	rjmp	.+358    	; 0xc1d4 <f_getcwd+0x252>
    c06e:	cf 5c       	subi	r28, 0xCF	; 207
    c070:	de 4f       	sbci	r29, 0xFE	; 254
    c072:	68 81       	ld	r22, Y
    c074:	79 81       	ldd	r23, Y+1	; 0x01
    c076:	c1 53       	subi	r28, 0x31	; 49
    c078:	d1 40       	sbci	r29, 0x01	; 1
    c07a:	cb 5b       	subi	r28, 0xBB	; 187
    c07c:	de 4f       	sbci	r29, 0xFE	; 254
    c07e:	e8 81       	ld	r30, Y
    c080:	f9 81       	ldd	r31, Y+1	; 0x01
    c082:	c5 54       	subi	r28, 0x45	; 69
    c084:	d1 40       	sbci	r29, 0x01	; 1
    c086:	80 81       	ld	r24, Z
    c088:	0e 94 6d 4a 	call	0x94da	; 0x94da <ld_clust.isra.4>
    c08c:	c3 5e       	subi	r28, 0xE3	; 227
    c08e:	de 4f       	sbci	r29, 0xFE	; 254
    c090:	68 83       	st	Y, r22
    c092:	79 83       	std	Y+1, r23	; 0x01
    c094:	8a 83       	std	Y+2, r24	; 0x02
    c096:	9b 83       	std	Y+3, r25	; 0x03
    c098:	cd 51       	subi	r28, 0x1D	; 29
    c09a:	d1 40       	sbci	r29, 0x01	; 1
    c09c:	40 e0       	ldi	r20, 0x00	; 0
    c09e:	50 e0       	ldi	r21, 0x00	; 0
    c0a0:	ba 01       	movw	r22, r20
    c0a2:	ce 01       	movw	r24, r28
    c0a4:	89 5e       	subi	r24, 0xE9	; 233
    c0a6:	9e 4f       	sbci	r25, 0xFE	; 254
    c0a8:	0e 94 80 50 	call	0xa100	; 0xa100 <dir_sdi>
    c0ac:	00 97       	sbiw	r24, 0x00	; 0
    c0ae:	09 f0       	breq	.+2      	; 0xc0b2 <f_getcwd+0x130>
    c0b0:	91 c0       	rjmp	.+290    	; 0xc1d4 <f_getcwd+0x252>
    c0b2:	60 e0       	ldi	r22, 0x00	; 0
    c0b4:	70 e0       	ldi	r23, 0x00	; 0
    c0b6:	ce 01       	movw	r24, r28
    c0b8:	89 5e       	subi	r24, 0xE9	; 233
    c0ba:	9e 4f       	sbci	r25, 0xFE	; 254
    c0bc:	0e 94 19 54 	call	0xa832	; 0xa832 <dir_read>
    c0c0:	00 97       	sbiw	r24, 0x00	; 0
    c0c2:	09 f0       	breq	.+2      	; 0xc0c6 <f_getcwd+0x144>
    c0c4:	89 c0       	rjmp	.+274    	; 0xc1d8 <f_getcwd+0x256>
    c0c6:	cf 5c       	subi	r28, 0xCF	; 207
    c0c8:	de 4f       	sbci	r29, 0xFE	; 254
    c0ca:	68 81       	ld	r22, Y
    c0cc:	79 81       	ldd	r23, Y+1	; 0x01
    c0ce:	c1 53       	subi	r28, 0x31	; 49
    c0d0:	d1 40       	sbci	r29, 0x01	; 1
    c0d2:	cb 5b       	subi	r28, 0xBB	; 187
    c0d4:	de 4f       	sbci	r29, 0xFE	; 254
    c0d6:	e8 81       	ld	r30, Y
    c0d8:	f9 81       	ldd	r31, Y+1	; 0x01
    c0da:	c5 54       	subi	r28, 0x45	; 69
    c0dc:	d1 40       	sbci	r29, 0x01	; 1
    c0de:	80 81       	ld	r24, Z
    c0e0:	0e 94 6d 4a 	call	0x94da	; 0x94da <ld_clust.isra.4>
    c0e4:	46 16       	cp	r4, r22
    c0e6:	57 06       	cpc	r5, r23
    c0e8:	68 06       	cpc	r6, r24
    c0ea:	79 06       	cpc	r7, r25
    c0ec:	41 f4       	brne	.+16     	; 0xc0fe <f_getcwd+0x17c>
    c0ee:	b6 01       	movw	r22, r12
    c0f0:	ce 01       	movw	r24, r28
    c0f2:	89 5e       	subi	r24, 0xE9	; 233
    c0f4:	9e 4f       	sbci	r25, 0xFE	; 254
    c0f6:	0e 94 5d 49 	call	0x92ba	; 0x92ba <get_fileinfo>
    c0fa:	f6 01       	movw	r30, r12
    c0fc:	0a c0       	rjmp	.+20     	; 0xc112 <f_getcwd+0x190>
    c0fe:	60 e0       	ldi	r22, 0x00	; 0
    c100:	70 e0       	ldi	r23, 0x00	; 0
    c102:	ce 01       	movw	r24, r28
    c104:	89 5e       	subi	r24, 0xE9	; 233
    c106:	9e 4f       	sbci	r25, 0xFE	; 254
    c108:	0e 94 f8 52 	call	0xa5f0	; 0xa5f0 <dir_next>
    c10c:	00 97       	sbiw	r24, 0x00	; 0
    c10e:	89 f2       	breq	.-94     	; 0xc0b2 <f_getcwd+0x130>
    c110:	63 c0       	rjmp	.+198    	; 0xc1d8 <f_getcwd+0x256>
    c112:	cf 01       	movw	r24, r30
    c114:	8c 19       	sub	r24, r12
    c116:	9d 09       	sbc	r25, r13
    c118:	31 96       	adiw	r30, 0x01	; 1
    c11a:	25 89       	ldd	r18, Z+21	; 0x15
    c11c:	21 11       	cpse	r18, r1
    c11e:	f9 cf       	rjmp	.-14     	; 0xc112 <f_getcwd+0x190>
    c120:	9c 01       	movw	r18, r24
    c122:	2f 5f       	subi	r18, 0xFF	; 255
    c124:	3f 4f       	sbci	r19, 0xFF	; 255
    c126:	02 17       	cp	r16, r18
    c128:	13 07       	cpc	r17, r19
    c12a:	08 f4       	brcc	.+2      	; 0xc12e <f_getcwd+0x1ac>
    c12c:	51 c0       	rjmp	.+162    	; 0xc1d0 <f_getcwd+0x24e>
    c12e:	f6 01       	movw	r30, r12
    c130:	e8 0f       	add	r30, r24
    c132:	f9 1f       	adc	r31, r25
    c134:	98 01       	movw	r18, r16
    c136:	ce 16       	cp	r12, r30
    c138:	df 06       	cpc	r13, r31
    c13a:	71 f0       	breq	.+28     	; 0xc158 <f_getcwd+0x1d6>
    c13c:	21 50       	subi	r18, 0x01	; 1
    c13e:	31 09       	sbc	r19, r1
    c140:	45 89       	ldd	r20, Z+21	; 0x15
    c142:	c9 5b       	subi	r28, 0xB9	; 185
    c144:	de 4f       	sbci	r29, 0xFE	; 254
    c146:	a8 81       	ld	r26, Y
    c148:	b9 81       	ldd	r27, Y+1	; 0x01
    c14a:	c7 54       	subi	r28, 0x47	; 71
    c14c:	d1 40       	sbci	r29, 0x01	; 1
    c14e:	a2 0f       	add	r26, r18
    c150:	b3 1f       	adc	r27, r19
    c152:	4c 93       	st	X, r20
    c154:	31 97       	sbiw	r30, 0x01	; 1
    c156:	ef cf       	rjmp	.-34     	; 0xc136 <f_getcwd+0x1b4>
    c158:	80 95       	com	r24
    c15a:	90 95       	com	r25
    c15c:	08 0f       	add	r16, r24
    c15e:	19 1f       	adc	r17, r25
    c160:	c9 5b       	subi	r28, 0xB9	; 185
    c162:	de 4f       	sbci	r29, 0xFE	; 254
    c164:	e8 81       	ld	r30, Y
    c166:	f9 81       	ldd	r31, Y+1	; 0x01
    c168:	c7 54       	subi	r28, 0x47	; 71
    c16a:	d1 40       	sbci	r29, 0x01	; 1
    c16c:	e0 0f       	add	r30, r16
    c16e:	f1 1f       	adc	r31, r17
    c170:	9f e2       	ldi	r25, 0x2F	; 47
    c172:	90 83       	st	Z, r25
    c174:	4f cf       	rjmp	.-354    	; 0xc014 <f_getcwd+0x92>
    c176:	08 15       	cp	r16, r8
    c178:	19 05       	cpc	r17, r9
    c17a:	61 f4       	brne	.+24     	; 0xc194 <f_getcwd+0x212>
    c17c:	01 50       	subi	r16, 0x01	; 1
    c17e:	11 09       	sbc	r17, r1
    c180:	c9 5b       	subi	r28, 0xB9	; 185
    c182:	de 4f       	sbci	r29, 0xFE	; 254
    c184:	e8 81       	ld	r30, Y
    c186:	f9 81       	ldd	r31, Y+1	; 0x01
    c188:	c7 54       	subi	r28, 0x47	; 71
    c18a:	d1 40       	sbci	r29, 0x01	; 1
    c18c:	e0 0f       	add	r30, r16
    c18e:	f1 1f       	adc	r31, r17
    c190:	8f e2       	ldi	r24, 0x2F	; 47
    c192:	80 83       	st	Z, r24
    c194:	ef ef       	ldi	r30, 0xFF	; 255
    c196:	ee 1a       	sub	r14, r30
    c198:	fe 0a       	sbc	r15, r30
    c19a:	c9 5b       	subi	r28, 0xB9	; 185
    c19c:	de 4f       	sbci	r29, 0xFE	; 254
    c19e:	e8 81       	ld	r30, Y
    c1a0:	f9 81       	ldd	r31, Y+1	; 0x01
    c1a2:	c7 54       	subi	r28, 0x47	; 71
    c1a4:	d1 40       	sbci	r29, 0x01	; 1
    c1a6:	e0 0f       	add	r30, r16
    c1a8:	f1 1f       	adc	r31, r17
    c1aa:	80 81       	ld	r24, Z
    c1ac:	f7 01       	movw	r30, r14
    c1ae:	31 97       	sbiw	r30, 0x01	; 1
    c1b0:	80 83       	st	Z, r24
    c1b2:	0f 5f       	subi	r16, 0xFF	; 255
    c1b4:	1f 4f       	sbci	r17, 0xFF	; 255
    c1b6:	08 15       	cp	r16, r8
    c1b8:	19 05       	cpc	r17, r9
    c1ba:	60 f3       	brcs	.-40     	; 0xc194 <f_getcwd+0x212>
    c1bc:	c5 01       	movw	r24, r10
    c1be:	0e 94 8c 69 	call	0xd318	; 0xd318 <ff_memfree>
    c1c2:	f7 01       	movw	r30, r14
    c1c4:	10 82       	st	Z, r1
    c1c6:	c1 01       	movw	r24, r2
    c1c8:	0d c0       	rjmp	.+26     	; 0xc1e4 <f_getcwd+0x262>
    c1ca:	81 e1       	ldi	r24, 0x11	; 17
    c1cc:	90 e0       	ldi	r25, 0x00	; 0
    c1ce:	0a c0       	rjmp	.+20     	; 0xc1e4 <f_getcwd+0x262>
    c1d0:	81 e1       	ldi	r24, 0x11	; 17
    c1d2:	90 e0       	ldi	r25, 0x00	; 0
    c1d4:	1c 01       	movw	r2, r24
    c1d6:	f2 cf       	rjmp	.-28     	; 0xc1bc <f_getcwd+0x23a>
    c1d8:	84 30       	cpi	r24, 0x04	; 4
    c1da:	91 05       	cpc	r25, r1
    c1dc:	d9 f7       	brne	.-10     	; 0xc1d4 <f_getcwd+0x252>
    c1de:	82 e0       	ldi	r24, 0x02	; 2
    c1e0:	90 e0       	ldi	r25, 0x00	; 0
    c1e2:	f8 cf       	rjmp	.-16     	; 0xc1d4 <f_getcwd+0x252>
    c1e4:	c8 5b       	subi	r28, 0xB8	; 184
    c1e6:	de 4f       	sbci	r29, 0xFE	; 254
    c1e8:	e2 e1       	ldi	r30, 0x12	; 18
    c1ea:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

0000c1ee <f_lseek>:
    c1ee:	aa e0       	ldi	r26, 0x0A	; 10
    c1f0:	b0 e0       	ldi	r27, 0x00	; 0
    c1f2:	ed ef       	ldi	r30, 0xFD	; 253
    c1f4:	f0 e6       	ldi	r31, 0x60	; 96
    c1f6:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
    c1fa:	1c 01       	movw	r2, r24
    c1fc:	6a 01       	movw	r12, r20
    c1fe:	7b 01       	movw	r14, r22
    c200:	be 01       	movw	r22, r28
    c202:	6f 5f       	subi	r22, 0xFF	; 255
    c204:	7f 4f       	sbci	r23, 0xFF	; 255
    c206:	0e 94 79 48 	call	0x90f2	; 0x90f2 <validate>
    c20a:	00 97       	sbiw	r24, 0x00	; 0
    c20c:	09 f0       	breq	.+2      	; 0xc210 <f_lseek+0x22>
    c20e:	a7 c2       	rjmp	.+1358   	; 0xc75e <f_lseek+0x570>
    c210:	f1 01       	movw	r30, r2
    c212:	87 85       	ldd	r24, Z+15	; 0x0f
    c214:	90 e0       	ldi	r25, 0x00	; 0
    c216:	00 97       	sbiw	r24, 0x00	; 0
    c218:	09 f0       	breq	.+2      	; 0xc21c <f_lseek+0x2e>
    c21a:	a1 c2       	rjmp	.+1346   	; 0xc75e <f_lseek+0x570>
    c21c:	22 a1       	ldd	r18, Z+34	; 0x22
    c21e:	33 a1       	ldd	r19, Z+35	; 0x23
    c220:	21 15       	cp	r18, r1
    c222:	31 05       	cpc	r19, r1
    c224:	09 f4       	brne	.+2      	; 0xc228 <f_lseek+0x3a>
    c226:	2e c1       	rjmp	.+604    	; 0xc484 <f_lseek+0x296>
    c228:	ff ef       	ldi	r31, 0xFF	; 255
    c22a:	cf 16       	cp	r12, r31
    c22c:	df 06       	cpc	r13, r31
    c22e:	ef 06       	cpc	r14, r31
    c230:	ff 06       	cpc	r15, r31
    c232:	09 f0       	breq	.+2      	; 0xc236 <f_lseek+0x48>
    c234:	9a c0       	rjmp	.+308    	; 0xc36a <f_lseek+0x17c>
    c236:	89 01       	movw	r16, r18
    c238:	0c 5f       	subi	r16, 0xFC	; 252
    c23a:	1f 4f       	sbci	r17, 0xFF	; 255
    c23c:	d9 01       	movw	r26, r18
    c23e:	4d 91       	ld	r20, X+
    c240:	5d 91       	ld	r21, X+
    c242:	6d 91       	ld	r22, X+
    c244:	7c 91       	ld	r23, X
    c246:	4f 83       	std	Y+7, r20	; 0x07
    c248:	58 87       	std	Y+8, r21	; 0x08
    c24a:	69 87       	std	Y+9, r22	; 0x09
    c24c:	7a 87       	std	Y+10, r23	; 0x0a
    c24e:	f1 01       	movw	r30, r2
    c250:	86 80       	ldd	r8, Z+6	; 0x06
    c252:	97 80       	ldd	r9, Z+7	; 0x07
    c254:	a0 84       	ldd	r10, Z+8	; 0x08
    c256:	b1 84       	ldd	r11, Z+9	; 0x09
    c258:	52 e0       	ldi	r21, 0x02	; 2
    c25a:	c5 2e       	mov	r12, r21
    c25c:	d1 2c       	mov	r13, r1
    c25e:	e1 2c       	mov	r14, r1
    c260:	f1 2c       	mov	r15, r1
    c262:	81 14       	cp	r8, r1
    c264:	91 04       	cpc	r9, r1
    c266:	a1 04       	cpc	r10, r1
    c268:	b1 04       	cpc	r11, r1
    c26a:	09 f4       	brne	.+2      	; 0xc26e <f_lseek+0x80>
    c26c:	65 c0       	rjmp	.+202    	; 0xc338 <f_lseek+0x14a>
    c26e:	24 01       	movw	r4, r8
    c270:	35 01       	movw	r6, r10
    c272:	1b 82       	std	Y+3, r1	; 0x03
    c274:	1c 82       	std	Y+4, r1	; 0x04
    c276:	1d 82       	std	Y+5, r1	; 0x05
    c278:	1e 82       	std	Y+6, r1	; 0x06
    c27a:	2b 81       	ldd	r18, Y+3	; 0x03
    c27c:	3c 81       	ldd	r19, Y+4	; 0x04
    c27e:	4d 81       	ldd	r20, Y+5	; 0x05
    c280:	5e 81       	ldd	r21, Y+6	; 0x06
    c282:	2f 5f       	subi	r18, 0xFF	; 255
    c284:	3f 4f       	sbci	r19, 0xFF	; 255
    c286:	4f 4f       	sbci	r20, 0xFF	; 255
    c288:	5f 4f       	sbci	r21, 0xFF	; 255
    c28a:	2b 83       	std	Y+3, r18	; 0x03
    c28c:	3c 83       	std	Y+4, r19	; 0x04
    c28e:	4d 83       	std	Y+5, r20	; 0x05
    c290:	5e 83       	std	Y+6, r21	; 0x06
    c292:	b3 01       	movw	r22, r6
    c294:	a2 01       	movw	r20, r4
    c296:	d1 01       	movw	r26, r2
    c298:	8d 91       	ld	r24, X+
    c29a:	9c 91       	ld	r25, X
    c29c:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <get_fat.isra.10>
    c2a0:	62 30       	cpi	r22, 0x02	; 2
    c2a2:	71 05       	cpc	r23, r1
    c2a4:	81 05       	cpc	r24, r1
    c2a6:	91 05       	cpc	r25, r1
    c2a8:	10 f4       	brcc	.+4      	; 0xc2ae <f_lseek+0xc0>
    c2aa:	82 e0       	ldi	r24, 0x02	; 2
    c2ac:	07 c0       	rjmp	.+14     	; 0xc2bc <f_lseek+0xce>
    c2ae:	6f 3f       	cpi	r22, 0xFF	; 255
    c2b0:	ff ef       	ldi	r31, 0xFF	; 255
    c2b2:	7f 07       	cpc	r23, r31
    c2b4:	8f 07       	cpc	r24, r31
    c2b6:	9f 07       	cpc	r25, r31
    c2b8:	29 f4       	brne	.+10     	; 0xc2c4 <f_lseek+0xd6>
    c2ba:	81 e0       	ldi	r24, 0x01	; 1
    c2bc:	f1 01       	movw	r30, r2
    c2be:	87 87       	std	Z+15, r24	; 0x0f
    c2c0:	90 e0       	ldi	r25, 0x00	; 0
    c2c2:	4d c2       	rjmp	.+1178   	; 0xc75e <f_lseek+0x570>
    c2c4:	a3 01       	movw	r20, r6
    c2c6:	92 01       	movw	r18, r4
    c2c8:	2f 5f       	subi	r18, 0xFF	; 255
    c2ca:	3f 4f       	sbci	r19, 0xFF	; 255
    c2cc:	4f 4f       	sbci	r20, 0xFF	; 255
    c2ce:	5f 4f       	sbci	r21, 0xFF	; 255
    c2d0:	2b 01       	movw	r4, r22
    c2d2:	3c 01       	movw	r6, r24
    c2d4:	62 17       	cp	r22, r18
    c2d6:	73 07       	cpc	r23, r19
    c2d8:	84 07       	cpc	r24, r20
    c2da:	95 07       	cpc	r25, r21
    c2dc:	71 f2       	breq	.-100    	; 0xc27a <f_lseek+0x8c>
    c2de:	f2 e0       	ldi	r31, 0x02	; 2
    c2e0:	cf 0e       	add	r12, r31
    c2e2:	d1 1c       	adc	r13, r1
    c2e4:	e1 1c       	adc	r14, r1
    c2e6:	f1 1c       	adc	r15, r1
    c2e8:	2f 81       	ldd	r18, Y+7	; 0x07
    c2ea:	38 85       	ldd	r19, Y+8	; 0x08
    c2ec:	49 85       	ldd	r20, Y+9	; 0x09
    c2ee:	5a 85       	ldd	r21, Y+10	; 0x0a
    c2f0:	2c 15       	cp	r18, r12
    c2f2:	3d 05       	cpc	r19, r13
    c2f4:	4e 05       	cpc	r20, r14
    c2f6:	5f 05       	cpc	r21, r15
    c2f8:	88 f0       	brcs	.+34     	; 0xc31c <f_lseek+0x12e>
    c2fa:	2b 81       	ldd	r18, Y+3	; 0x03
    c2fc:	3c 81       	ldd	r19, Y+4	; 0x04
    c2fe:	4d 81       	ldd	r20, Y+5	; 0x05
    c300:	5e 81       	ldd	r21, Y+6	; 0x06
    c302:	d8 01       	movw	r26, r16
    c304:	2d 93       	st	X+, r18
    c306:	3d 93       	st	X+, r19
    c308:	4d 93       	st	X+, r20
    c30a:	5c 93       	st	X, r21
    c30c:	13 97       	sbiw	r26, 0x03	; 3
    c30e:	f8 01       	movw	r30, r16
    c310:	84 82       	std	Z+4, r8	; 0x04
    c312:	95 82       	std	Z+5, r9	; 0x05
    c314:	a6 82       	std	Z+6, r10	; 0x06
    c316:	b7 82       	std	Z+7, r11	; 0x07
    c318:	08 5f       	subi	r16, 0xF8	; 248
    c31a:	1f 4f       	sbci	r17, 0xFF	; 255
    c31c:	e9 81       	ldd	r30, Y+1	; 0x01
    c31e:	fa 81       	ldd	r31, Y+2	; 0x02
    c320:	81 8c       	ldd	r8, Z+25	; 0x19
    c322:	92 8c       	ldd	r9, Z+26	; 0x1a
    c324:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c326:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c328:	68 15       	cp	r22, r8
    c32a:	79 05       	cpc	r23, r9
    c32c:	8a 05       	cpc	r24, r10
    c32e:	9b 05       	cpc	r25, r11
    c330:	18 f4       	brcc	.+6      	; 0xc338 <f_lseek+0x14a>
    c332:	4b 01       	movw	r8, r22
    c334:	5c 01       	movw	r10, r24
    c336:	9b cf       	rjmp	.-202    	; 0xc26e <f_lseek+0x80>
    c338:	f1 01       	movw	r30, r2
    c33a:	a2 a1       	ldd	r26, Z+34	; 0x22
    c33c:	b3 a1       	ldd	r27, Z+35	; 0x23
    c33e:	cd 92       	st	X+, r12
    c340:	dd 92       	st	X+, r13
    c342:	ed 92       	st	X+, r14
    c344:	fc 92       	st	X, r15
    c346:	13 97       	sbiw	r26, 0x03	; 3
    c348:	2f 81       	ldd	r18, Y+7	; 0x07
    c34a:	38 85       	ldd	r19, Y+8	; 0x08
    c34c:	49 85       	ldd	r20, Y+9	; 0x09
    c34e:	5a 85       	ldd	r21, Y+10	; 0x0a
    c350:	2c 15       	cp	r18, r12
    c352:	3d 05       	cpc	r19, r13
    c354:	4e 05       	cpc	r20, r14
    c356:	5f 05       	cpc	r21, r15
    c358:	08 f4       	brcc	.+2      	; 0xc35c <f_lseek+0x16e>
    c35a:	f8 c1       	rjmp	.+1008   	; 0xc74c <f_lseek+0x55e>
    c35c:	d8 01       	movw	r26, r16
    c35e:	1d 92       	st	X+, r1
    c360:	1d 92       	st	X+, r1
    c362:	1d 92       	st	X+, r1
    c364:	1c 92       	st	X, r1
    c366:	13 97       	sbiw	r26, 0x03	; 3
    c368:	ef c1       	rjmp	.+990    	; 0xc748 <f_lseek+0x55a>
    c36a:	f1 01       	movw	r30, r2
    c36c:	82 85       	ldd	r24, Z+10	; 0x0a
    c36e:	93 85       	ldd	r25, Z+11	; 0x0b
    c370:	a4 85       	ldd	r26, Z+12	; 0x0c
    c372:	b5 85       	ldd	r27, Z+13	; 0x0d
    c374:	46 01       	movw	r8, r12
    c376:	57 01       	movw	r10, r14
    c378:	8c 15       	cp	r24, r12
    c37a:	9d 05       	cpc	r25, r13
    c37c:	ae 05       	cpc	r26, r14
    c37e:	bf 05       	cpc	r27, r15
    c380:	10 f4       	brcc	.+4      	; 0xc386 <f_lseek+0x198>
    c382:	4c 01       	movw	r8, r24
    c384:	5d 01       	movw	r10, r26
    c386:	f1 01       	movw	r30, r2
    c388:	80 8a       	std	Z+16, r8	; 0x10
    c38a:	91 8a       	std	Z+17, r9	; 0x11
    c38c:	a2 8a       	std	Z+18, r10	; 0x12
    c38e:	b3 8a       	std	Z+19, r11	; 0x13
    c390:	81 14       	cp	r8, r1
    c392:	91 04       	cpc	r9, r1
    c394:	a1 04       	cpc	r10, r1
    c396:	b1 04       	cpc	r11, r1
    c398:	09 f4       	brne	.+2      	; 0xc39c <f_lseek+0x1ae>
    c39a:	d6 c1       	rjmp	.+940    	; 0xc748 <f_lseek+0x55a>
    c39c:	24 01       	movw	r4, r8
    c39e:	35 01       	movw	r6, r10
    c3a0:	f1 e0       	ldi	r31, 0x01	; 1
    c3a2:	4f 1a       	sub	r4, r31
    c3a4:	51 08       	sbc	r5, r1
    c3a6:	61 08       	sbc	r6, r1
    c3a8:	71 08       	sbc	r7, r1
    c3aa:	b3 01       	movw	r22, r6
    c3ac:	a2 01       	movw	r20, r4
    c3ae:	c1 01       	movw	r24, r2
    c3b0:	0e 94 02 48 	call	0x9004	; 0x9004 <clmt_clust>
    c3b4:	ab 01       	movw	r20, r22
    c3b6:	bc 01       	movw	r22, r24
    c3b8:	f1 01       	movw	r30, r2
    c3ba:	44 8b       	std	Z+20, r20	; 0x14
    c3bc:	55 8b       	std	Z+21, r21	; 0x15
    c3be:	66 8b       	std	Z+22, r22	; 0x16
    c3c0:	77 8b       	std	Z+23, r23	; 0x17
    c3c2:	e9 80       	ldd	r14, Y+1	; 0x01
    c3c4:	fa 80       	ldd	r15, Y+2	; 0x02
    c3c6:	c7 01       	movw	r24, r14
    c3c8:	0e 94 da 47 	call	0x8fb4	; 0x8fb4 <clst2sect>
    c3cc:	61 15       	cp	r22, r1
    c3ce:	71 05       	cpc	r23, r1
    c3d0:	81 05       	cpc	r24, r1
    c3d2:	91 05       	cpc	r25, r1
    c3d4:	09 f4       	brne	.+2      	; 0xc3d8 <f_lseek+0x1ea>
    c3d6:	69 cf       	rjmp	.-302    	; 0xc2aa <f_lseek+0xbc>
    c3d8:	95 01       	movw	r18, r10
    c3da:	84 01       	movw	r16, r8
    c3dc:	11 70       	andi	r17, 0x01	; 1
    c3de:	22 27       	eor	r18, r18
    c3e0:	33 27       	eor	r19, r19
    c3e2:	01 15       	cp	r16, r1
    c3e4:	11 05       	cpc	r17, r1
    c3e6:	21 05       	cpc	r18, r1
    c3e8:	31 05       	cpc	r19, r1
    c3ea:	09 f4       	brne	.+2      	; 0xc3ee <f_lseek+0x200>
    c3ec:	ad c1       	rjmp	.+858    	; 0xc748 <f_lseek+0x55a>
    c3ee:	f7 01       	movw	r30, r14
    c3f0:	81 84       	ldd	r8, Z+9	; 0x09
    c3f2:	92 84       	ldd	r9, Z+10	; 0x0a
    c3f4:	f1 e0       	ldi	r31, 0x01	; 1
    c3f6:	8f 1a       	sub	r8, r31
    c3f8:	91 08       	sbc	r9, r1
    c3fa:	a1 2c       	mov	r10, r1
    c3fc:	b1 2c       	mov	r11, r1
    c3fe:	49 e0       	ldi	r20, 0x09	; 9
    c400:	76 94       	lsr	r7
    c402:	67 94       	ror	r6
    c404:	57 94       	ror	r5
    c406:	47 94       	ror	r4
    c408:	4a 95       	dec	r20
    c40a:	d1 f7       	brne	.-12     	; 0xc400 <f_lseek+0x212>
    c40c:	48 20       	and	r4, r8
    c40e:	59 20       	and	r5, r9
    c410:	6a 20       	and	r6, r10
    c412:	7b 20       	and	r7, r11
    c414:	53 01       	movw	r10, r6
    c416:	42 01       	movw	r8, r4
    c418:	86 0e       	add	r8, r22
    c41a:	97 1e       	adc	r9, r23
    c41c:	a8 1e       	adc	r10, r24
    c41e:	b9 1e       	adc	r11, r25
    c420:	f1 01       	movw	r30, r2
    c422:	20 8d       	ldd	r18, Z+24	; 0x18
    c424:	31 8d       	ldd	r19, Z+25	; 0x19
    c426:	42 8d       	ldd	r20, Z+26	; 0x1a
    c428:	53 8d       	ldd	r21, Z+27	; 0x1b
    c42a:	82 16       	cp	r8, r18
    c42c:	93 06       	cpc	r9, r19
    c42e:	a4 06       	cpc	r10, r20
    c430:	b5 06       	cpc	r11, r21
    c432:	09 f4       	brne	.+2      	; 0xc436 <f_lseek+0x248>
    c434:	89 c1       	rjmp	.+786    	; 0xc748 <f_lseek+0x55a>
    c436:	86 85       	ldd	r24, Z+14	; 0x0e
    c438:	b1 01       	movw	r22, r2
    c43a:	6c 5d       	subi	r22, 0xDC	; 220
    c43c:	7f 4f       	sbci	r23, 0xFF	; 255
    c43e:	6b 01       	movw	r12, r22
    c440:	87 ff       	sbrs	r24, 7
    c442:	0d c0       	rjmp	.+26     	; 0xc45e <f_lseek+0x270>
    c444:	01 e0       	ldi	r16, 0x01	; 1
    c446:	10 e0       	ldi	r17, 0x00	; 0
    c448:	f7 01       	movw	r30, r14
    c44a:	81 81       	ldd	r24, Z+1	; 0x01
    c44c:	0e 94 55 6a 	call	0xd4aa	; 0xd4aa <disk_write>
    c450:	89 2b       	or	r24, r25
    c452:	09 f0       	breq	.+2      	; 0xc456 <f_lseek+0x268>
    c454:	32 cf       	rjmp	.-412    	; 0xc2ba <f_lseek+0xcc>
    c456:	f1 01       	movw	r30, r2
    c458:	86 85       	ldd	r24, Z+14	; 0x0e
    c45a:	8f 77       	andi	r24, 0x7F	; 127
    c45c:	86 87       	std	Z+14, r24	; 0x0e
    c45e:	e9 81       	ldd	r30, Y+1	; 0x01
    c460:	fa 81       	ldd	r31, Y+2	; 0x02
    c462:	01 e0       	ldi	r16, 0x01	; 1
    c464:	10 e0       	ldi	r17, 0x00	; 0
    c466:	a5 01       	movw	r20, r10
    c468:	94 01       	movw	r18, r8
    c46a:	b6 01       	movw	r22, r12
    c46c:	81 81       	ldd	r24, Z+1	; 0x01
    c46e:	0e 94 45 6a 	call	0xd48a	; 0xd48a <disk_read>
    c472:	89 2b       	or	r24, r25
    c474:	09 f0       	breq	.+2      	; 0xc478 <f_lseek+0x28a>
    c476:	21 cf       	rjmp	.-446    	; 0xc2ba <f_lseek+0xcc>
    c478:	f1 01       	movw	r30, r2
    c47a:	80 8e       	std	Z+24, r8	; 0x18
    c47c:	91 8e       	std	Z+25, r9	; 0x19
    c47e:	a2 8e       	std	Z+26, r10	; 0x1a
    c480:	b3 8e       	std	Z+27, r11	; 0x1b
    c482:	62 c1       	rjmp	.+708    	; 0xc748 <f_lseek+0x55a>
    c484:	f1 01       	movw	r30, r2
    c486:	82 85       	ldd	r24, Z+10	; 0x0a
    c488:	93 85       	ldd	r25, Z+11	; 0x0b
    c48a:	a4 85       	ldd	r26, Z+12	; 0x0c
    c48c:	b5 85       	ldd	r27, Z+13	; 0x0d
    c48e:	8c 15       	cp	r24, r12
    c490:	9d 05       	cpc	r25, r13
    c492:	ae 05       	cpc	r26, r14
    c494:	bf 05       	cpc	r27, r15
    c496:	28 f4       	brcc	.+10     	; 0xc4a2 <f_lseek+0x2b4>
    c498:	26 85       	ldd	r18, Z+14	; 0x0e
    c49a:	21 fd       	sbrc	r18, 1
    c49c:	02 c0       	rjmp	.+4      	; 0xc4a2 <f_lseek+0x2b4>
    c49e:	6c 01       	movw	r12, r24
    c4a0:	7d 01       	movw	r14, r26
    c4a2:	f1 01       	movw	r30, r2
    c4a4:	40 88       	ldd	r4, Z+16	; 0x10
    c4a6:	51 88       	ldd	r5, Z+17	; 0x11
    c4a8:	62 88       	ldd	r6, Z+18	; 0x12
    c4aa:	73 88       	ldd	r7, Z+19	; 0x13
    c4ac:	10 8a       	std	Z+16, r1	; 0x10
    c4ae:	11 8a       	std	Z+17, r1	; 0x11
    c4b0:	12 8a       	std	Z+18, r1	; 0x12
    c4b2:	13 8a       	std	Z+19, r1	; 0x13
    c4b4:	c1 14       	cp	r12, r1
    c4b6:	d1 04       	cpc	r13, r1
    c4b8:	e1 04       	cpc	r14, r1
    c4ba:	f1 04       	cpc	r15, r1
    c4bc:	09 f4       	brne	.+2      	; 0xc4c0 <f_lseek+0x2d2>
    c4be:	48 c1       	rjmp	.+656    	; 0xc750 <f_lseek+0x562>
    c4c0:	e9 81       	ldd	r30, Y+1	; 0x01
    c4c2:	fa 81       	ldd	r31, Y+2	; 0x02
    c4c4:	81 84       	ldd	r8, Z+9	; 0x09
    c4c6:	92 84       	ldd	r9, Z+10	; 0x0a
    c4c8:	a1 2c       	mov	r10, r1
    c4ca:	b1 2c       	mov	r11, r1
    c4cc:	39 e0       	ldi	r19, 0x09	; 9
    c4ce:	88 0c       	add	r8, r8
    c4d0:	99 1c       	adc	r9, r9
    c4d2:	aa 1c       	adc	r10, r10
    c4d4:	bb 1c       	adc	r11, r11
    c4d6:	3a 95       	dec	r19
    c4d8:	d1 f7       	brne	.-12     	; 0xc4ce <f_lseek+0x2e0>
    c4da:	41 14       	cp	r4, r1
    c4dc:	51 04       	cpc	r5, r1
    c4de:	61 04       	cpc	r6, r1
    c4e0:	71 04       	cpc	r7, r1
    c4e2:	d9 f1       	breq	.+118    	; 0xc55a <f_lseek+0x36c>
    c4e4:	f1 e0       	ldi	r31, 0x01	; 1
    c4e6:	4f 1a       	sub	r4, r31
    c4e8:	51 08       	sbc	r5, r1
    c4ea:	61 08       	sbc	r6, r1
    c4ec:	71 08       	sbc	r7, r1
    c4ee:	c7 01       	movw	r24, r14
    c4f0:	b6 01       	movw	r22, r12
    c4f2:	61 50       	subi	r22, 0x01	; 1
    c4f4:	71 09       	sbc	r23, r1
    c4f6:	81 09       	sbc	r24, r1
    c4f8:	91 09       	sbc	r25, r1
    c4fa:	a5 01       	movw	r20, r10
    c4fc:	94 01       	movw	r18, r8
    c4fe:	0e 94 62 e2 	call	0x1c4c4	; 0x1c4c4 <__udivmodsi4>
    c502:	2b 83       	std	Y+3, r18	; 0x03
    c504:	3c 83       	std	Y+4, r19	; 0x04
    c506:	4d 83       	std	Y+5, r20	; 0x05
    c508:	5e 83       	std	Y+6, r21	; 0x06
    c50a:	c3 01       	movw	r24, r6
    c50c:	b2 01       	movw	r22, r4
    c50e:	a5 01       	movw	r20, r10
    c510:	94 01       	movw	r18, r8
    c512:	0e 94 62 e2 	call	0x1c4c4	; 0x1c4c4 <__udivmodsi4>
    c516:	6b 81       	ldd	r22, Y+3	; 0x03
    c518:	7c 81       	ldd	r23, Y+4	; 0x04
    c51a:	8d 81       	ldd	r24, Y+5	; 0x05
    c51c:	9e 81       	ldd	r25, Y+6	; 0x06
    c51e:	62 17       	cp	r22, r18
    c520:	73 07       	cpc	r23, r19
    c522:	84 07       	cpc	r24, r20
    c524:	95 07       	cpc	r25, r21
    c526:	c8 f0       	brcs	.+50     	; 0xc55a <f_lseek+0x36c>
    c528:	88 27       	eor	r24, r24
    c52a:	99 27       	eor	r25, r25
    c52c:	dc 01       	movw	r26, r24
    c52e:	88 19       	sub	r24, r8
    c530:	99 09       	sbc	r25, r9
    c532:	aa 09       	sbc	r26, r10
    c534:	bb 09       	sbc	r27, r11
    c536:	48 22       	and	r4, r24
    c538:	59 22       	and	r5, r25
    c53a:	6a 22       	and	r6, r26
    c53c:	7b 22       	and	r7, r27
    c53e:	f1 01       	movw	r30, r2
    c540:	40 8a       	std	Z+16, r4	; 0x10
    c542:	51 8a       	std	Z+17, r5	; 0x11
    c544:	62 8a       	std	Z+18, r6	; 0x12
    c546:	73 8a       	std	Z+19, r7	; 0x13
    c548:	c4 18       	sub	r12, r4
    c54a:	d5 08       	sbc	r13, r5
    c54c:	e6 08       	sbc	r14, r6
    c54e:	f7 08       	sbc	r15, r7
    c550:	44 89       	ldd	r20, Z+20	; 0x14
    c552:	55 89       	ldd	r21, Z+21	; 0x15
    c554:	66 89       	ldd	r22, Z+22	; 0x16
    c556:	77 89       	ldd	r23, Z+23	; 0x17
    c558:	29 c0       	rjmp	.+82     	; 0xc5ac <f_lseek+0x3be>
    c55a:	f1 01       	movw	r30, r2
    c55c:	46 81       	ldd	r20, Z+6	; 0x06
    c55e:	57 81       	ldd	r21, Z+7	; 0x07
    c560:	60 85       	ldd	r22, Z+8	; 0x08
    c562:	71 85       	ldd	r23, Z+9	; 0x09
    c564:	41 15       	cp	r20, r1
    c566:	51 05       	cpc	r21, r1
    c568:	61 05       	cpc	r22, r1
    c56a:	71 05       	cpc	r23, r1
    c56c:	d1 f4       	brne	.+52     	; 0xc5a2 <f_lseek+0x3b4>
    c56e:	40 e0       	ldi	r20, 0x00	; 0
    c570:	50 e0       	ldi	r21, 0x00	; 0
    c572:	ba 01       	movw	r22, r20
    c574:	c1 01       	movw	r24, r2
    c576:	0e 94 41 51 	call	0xa282	; 0xa282 <create_chain>
    c57a:	ab 01       	movw	r20, r22
    c57c:	bc 01       	movw	r22, r24
    c57e:	41 30       	cpi	r20, 0x01	; 1
    c580:	51 05       	cpc	r21, r1
    c582:	61 05       	cpc	r22, r1
    c584:	71 05       	cpc	r23, r1
    c586:	09 f4       	brne	.+2      	; 0xc58a <f_lseek+0x39c>
    c588:	90 ce       	rjmp	.-736    	; 0xc2aa <f_lseek+0xbc>
    c58a:	4f 3f       	cpi	r20, 0xFF	; 255
    c58c:	ff ef       	ldi	r31, 0xFF	; 255
    c58e:	5f 07       	cpc	r21, r31
    c590:	6f 07       	cpc	r22, r31
    c592:	7f 07       	cpc	r23, r31
    c594:	09 f4       	brne	.+2      	; 0xc598 <f_lseek+0x3aa>
    c596:	91 ce       	rjmp	.-734    	; 0xc2ba <f_lseek+0xcc>
    c598:	f1 01       	movw	r30, r2
    c59a:	46 83       	std	Z+6, r20	; 0x06
    c59c:	57 83       	std	Z+7, r21	; 0x07
    c59e:	60 87       	std	Z+8, r22	; 0x08
    c5a0:	71 87       	std	Z+9, r23	; 0x09
    c5a2:	f1 01       	movw	r30, r2
    c5a4:	44 8b       	std	Z+20, r20	; 0x14
    c5a6:	55 8b       	std	Z+21, r21	; 0x15
    c5a8:	66 8b       	std	Z+22, r22	; 0x16
    c5aa:	77 8b       	std	Z+23, r23	; 0x17
    c5ac:	41 15       	cp	r20, r1
    c5ae:	51 05       	cpc	r21, r1
    c5b0:	61 05       	cpc	r22, r1
    c5b2:	71 05       	cpc	r23, r1
    c5b4:	09 f0       	breq	.+2      	; 0xc5b8 <f_lseek+0x3ca>
    c5b6:	40 c0       	rjmp	.+128    	; 0xc638 <f_lseek+0x44a>
    c5b8:	c1 2c       	mov	r12, r1
    c5ba:	d1 2c       	mov	r13, r1
    c5bc:	76 01       	movw	r14, r12
    c5be:	79 c0       	rjmp	.+242    	; 0xc6b2 <f_lseek+0x4c4>
    c5c0:	c8 18       	sub	r12, r8
    c5c2:	d9 08       	sbc	r13, r9
    c5c4:	ea 08       	sbc	r14, r10
    c5c6:	fb 08       	sbc	r15, r11
    c5c8:	f1 01       	movw	r30, r2
    c5ca:	80 89       	ldd	r24, Z+16	; 0x10
    c5cc:	91 89       	ldd	r25, Z+17	; 0x11
    c5ce:	a2 89       	ldd	r26, Z+18	; 0x12
    c5d0:	b3 89       	ldd	r27, Z+19	; 0x13
    c5d2:	88 0d       	add	r24, r8
    c5d4:	99 1d       	adc	r25, r9
    c5d6:	aa 1d       	adc	r26, r10
    c5d8:	bb 1d       	adc	r27, r11
    c5da:	80 8b       	std	Z+16, r24	; 0x10
    c5dc:	91 8b       	std	Z+17, r25	; 0x11
    c5de:	a2 8b       	std	Z+18, r26	; 0x12
    c5e0:	b3 8b       	std	Z+19, r27	; 0x13
    c5e2:	86 85       	ldd	r24, Z+14	; 0x0e
    c5e4:	81 ff       	sbrs	r24, 1
    c5e6:	2f c0       	rjmp	.+94     	; 0xc646 <f_lseek+0x458>
    c5e8:	c1 01       	movw	r24, r2
    c5ea:	0e 94 41 51 	call	0xa282	; 0xa282 <create_chain>
    c5ee:	ab 01       	movw	r20, r22
    c5f0:	bc 01       	movw	r22, r24
    c5f2:	41 15       	cp	r20, r1
    c5f4:	51 05       	cpc	r21, r1
    c5f6:	61 05       	cpc	r22, r1
    c5f8:	71 05       	cpc	r23, r1
    c5fa:	61 f1       	breq	.+88     	; 0xc654 <f_lseek+0x466>
    c5fc:	4f 3f       	cpi	r20, 0xFF	; 255
    c5fe:	bf ef       	ldi	r27, 0xFF	; 255
    c600:	5b 07       	cpc	r21, r27
    c602:	6b 07       	cpc	r22, r27
    c604:	7b 07       	cpc	r23, r27
    c606:	09 f4       	brne	.+2      	; 0xc60a <f_lseek+0x41c>
    c608:	58 ce       	rjmp	.-848    	; 0xc2ba <f_lseek+0xcc>
    c60a:	42 30       	cpi	r20, 0x02	; 2
    c60c:	51 05       	cpc	r21, r1
    c60e:	61 05       	cpc	r22, r1
    c610:	71 05       	cpc	r23, r1
    c612:	08 f4       	brcc	.+2      	; 0xc616 <f_lseek+0x428>
    c614:	4a ce       	rjmp	.-876    	; 0xc2aa <f_lseek+0xbc>
    c616:	e9 81       	ldd	r30, Y+1	; 0x01
    c618:	fa 81       	ldd	r31, Y+2	; 0x02
    c61a:	81 8d       	ldd	r24, Z+25	; 0x19
    c61c:	92 8d       	ldd	r25, Z+26	; 0x1a
    c61e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c620:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c622:	48 17       	cp	r20, r24
    c624:	59 07       	cpc	r21, r25
    c626:	6a 07       	cpc	r22, r26
    c628:	7b 07       	cpc	r23, r27
    c62a:	08 f0       	brcs	.+2      	; 0xc62e <f_lseek+0x440>
    c62c:	3e ce       	rjmp	.-900    	; 0xc2aa <f_lseek+0xbc>
    c62e:	f1 01       	movw	r30, r2
    c630:	44 8b       	std	Z+20, r20	; 0x14
    c632:	55 8b       	std	Z+21, r21	; 0x15
    c634:	66 8b       	std	Z+22, r22	; 0x16
    c636:	77 8b       	std	Z+23, r23	; 0x17
    c638:	8c 14       	cp	r8, r12
    c63a:	9d 04       	cpc	r9, r13
    c63c:	ae 04       	cpc	r10, r14
    c63e:	bf 04       	cpc	r11, r15
    c640:	08 f4       	brcc	.+2      	; 0xc644 <f_lseek+0x456>
    c642:	be cf       	rjmp	.-132    	; 0xc5c0 <f_lseek+0x3d2>
    c644:	0a c0       	rjmp	.+20     	; 0xc65a <f_lseek+0x46c>
    c646:	80 81       	ld	r24, Z
    c648:	91 81       	ldd	r25, Z+1	; 0x01
    c64a:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <get_fat.isra.10>
    c64e:	ab 01       	movw	r20, r22
    c650:	bc 01       	movw	r22, r24
    c652:	d4 cf       	rjmp	.-88     	; 0xc5fc <f_lseek+0x40e>
    c654:	c1 2c       	mov	r12, r1
    c656:	d1 2c       	mov	r13, r1
    c658:	76 01       	movw	r14, r12
    c65a:	f1 01       	movw	r30, r2
    c65c:	80 89       	ldd	r24, Z+16	; 0x10
    c65e:	91 89       	ldd	r25, Z+17	; 0x11
    c660:	a2 89       	ldd	r26, Z+18	; 0x12
    c662:	b3 89       	ldd	r27, Z+19	; 0x13
    c664:	8c 0d       	add	r24, r12
    c666:	9d 1d       	adc	r25, r13
    c668:	ae 1d       	adc	r26, r14
    c66a:	bf 1d       	adc	r27, r15
    c66c:	80 8b       	std	Z+16, r24	; 0x10
    c66e:	91 8b       	std	Z+17, r25	; 0x11
    c670:	a2 8b       	std	Z+18, r26	; 0x12
    c672:	b3 8b       	std	Z+19, r27	; 0x13
    c674:	d7 01       	movw	r26, r14
    c676:	c6 01       	movw	r24, r12
    c678:	91 70       	andi	r25, 0x01	; 1
    c67a:	aa 27       	eor	r26, r26
    c67c:	bb 27       	eor	r27, r27
    c67e:	89 2b       	or	r24, r25
    c680:	8a 2b       	or	r24, r26
    c682:	8b 2b       	or	r24, r27
    c684:	09 f4       	brne	.+2      	; 0xc688 <f_lseek+0x49a>
    c686:	98 cf       	rjmp	.-208    	; 0xc5b8 <f_lseek+0x3ca>
    c688:	89 81       	ldd	r24, Y+1	; 0x01
    c68a:	9a 81       	ldd	r25, Y+2	; 0x02
    c68c:	0e 94 da 47 	call	0x8fb4	; 0x8fb4 <clst2sect>
    c690:	61 15       	cp	r22, r1
    c692:	71 05       	cpc	r23, r1
    c694:	81 05       	cpc	r24, r1
    c696:	91 05       	cpc	r25, r1
    c698:	09 f4       	brne	.+2      	; 0xc69c <f_lseek+0x4ae>
    c69a:	07 ce       	rjmp	.-1010   	; 0xc2aa <f_lseek+0xbc>
    c69c:	29 e0       	ldi	r18, 0x09	; 9
    c69e:	f6 94       	lsr	r15
    c6a0:	e7 94       	ror	r14
    c6a2:	d7 94       	ror	r13
    c6a4:	c7 94       	ror	r12
    c6a6:	2a 95       	dec	r18
    c6a8:	d1 f7       	brne	.-12     	; 0xc69e <f_lseek+0x4b0>
    c6aa:	c6 0e       	add	r12, r22
    c6ac:	d7 1e       	adc	r13, r23
    c6ae:	e8 1e       	adc	r14, r24
    c6b0:	f9 1e       	adc	r15, r25
    c6b2:	f1 01       	movw	r30, r2
    c6b4:	80 89       	ldd	r24, Z+16	; 0x10
    c6b6:	91 89       	ldd	r25, Z+17	; 0x11
    c6b8:	a2 89       	ldd	r26, Z+18	; 0x12
    c6ba:	b3 89       	ldd	r27, Z+19	; 0x13
    c6bc:	42 85       	ldd	r20, Z+10	; 0x0a
    c6be:	53 85       	ldd	r21, Z+11	; 0x0b
    c6c0:	64 85       	ldd	r22, Z+12	; 0x0c
    c6c2:	75 85       	ldd	r23, Z+13	; 0x0d
    c6c4:	48 17       	cp	r20, r24
    c6c6:	59 07       	cpc	r21, r25
    c6c8:	6a 07       	cpc	r22, r26
    c6ca:	7b 07       	cpc	r23, r27
    c6cc:	38 f4       	brcc	.+14     	; 0xc6dc <f_lseek+0x4ee>
    c6ce:	82 87       	std	Z+10, r24	; 0x0a
    c6d0:	93 87       	std	Z+11, r25	; 0x0b
    c6d2:	a4 87       	std	Z+12, r26	; 0x0c
    c6d4:	b5 87       	std	Z+13, r27	; 0x0d
    c6d6:	26 85       	ldd	r18, Z+14	; 0x0e
    c6d8:	20 64       	ori	r18, 0x40	; 64
    c6da:	26 87       	std	Z+14, r18	; 0x0e
    c6dc:	91 70       	andi	r25, 0x01	; 1
    c6de:	aa 27       	eor	r26, r26
    c6e0:	bb 27       	eor	r27, r27
    c6e2:	89 2b       	or	r24, r25
    c6e4:	8a 2b       	or	r24, r26
    c6e6:	8b 2b       	or	r24, r27
    c6e8:	79 f1       	breq	.+94     	; 0xc748 <f_lseek+0x55a>
    c6ea:	f1 01       	movw	r30, r2
    c6ec:	20 8d       	ldd	r18, Z+24	; 0x18
    c6ee:	31 8d       	ldd	r19, Z+25	; 0x19
    c6f0:	42 8d       	ldd	r20, Z+26	; 0x1a
    c6f2:	53 8d       	ldd	r21, Z+27	; 0x1b
    c6f4:	2c 15       	cp	r18, r12
    c6f6:	3d 05       	cpc	r19, r13
    c6f8:	4e 05       	cpc	r20, r14
    c6fa:	5f 05       	cpc	r21, r15
    c6fc:	29 f1       	breq	.+74     	; 0xc748 <f_lseek+0x55a>
    c6fe:	86 85       	ldd	r24, Z+14	; 0x0e
    c700:	b1 01       	movw	r22, r2
    c702:	6c 5d       	subi	r22, 0xDC	; 220
    c704:	7f 4f       	sbci	r23, 0xFF	; 255
    c706:	5b 01       	movw	r10, r22
    c708:	87 ff       	sbrs	r24, 7
    c70a:	0d c0       	rjmp	.+26     	; 0xc726 <f_lseek+0x538>
    c70c:	e9 81       	ldd	r30, Y+1	; 0x01
    c70e:	fa 81       	ldd	r31, Y+2	; 0x02
    c710:	01 e0       	ldi	r16, 0x01	; 1
    c712:	10 e0       	ldi	r17, 0x00	; 0
    c714:	81 81       	ldd	r24, Z+1	; 0x01
    c716:	c9 d6       	rcall	.+3474   	; 0xd4aa <disk_write>
    c718:	89 2b       	or	r24, r25
    c71a:	09 f0       	breq	.+2      	; 0xc71e <f_lseek+0x530>
    c71c:	ce cd       	rjmp	.-1124   	; 0xc2ba <f_lseek+0xcc>
    c71e:	f1 01       	movw	r30, r2
    c720:	86 85       	ldd	r24, Z+14	; 0x0e
    c722:	8f 77       	andi	r24, 0x7F	; 127
    c724:	86 87       	std	Z+14, r24	; 0x0e
    c726:	e9 81       	ldd	r30, Y+1	; 0x01
    c728:	fa 81       	ldd	r31, Y+2	; 0x02
    c72a:	01 e0       	ldi	r16, 0x01	; 1
    c72c:	10 e0       	ldi	r17, 0x00	; 0
    c72e:	a7 01       	movw	r20, r14
    c730:	96 01       	movw	r18, r12
    c732:	b5 01       	movw	r22, r10
    c734:	81 81       	ldd	r24, Z+1	; 0x01
    c736:	a9 d6       	rcall	.+3410   	; 0xd48a <disk_read>
    c738:	89 2b       	or	r24, r25
    c73a:	09 f0       	breq	.+2      	; 0xc73e <f_lseek+0x550>
    c73c:	be cd       	rjmp	.-1156   	; 0xc2ba <f_lseek+0xcc>
    c73e:	f1 01       	movw	r30, r2
    c740:	c0 8e       	std	Z+24, r12	; 0x18
    c742:	d1 8e       	std	Z+25, r13	; 0x19
    c744:	e2 8e       	std	Z+26, r14	; 0x1a
    c746:	f3 8e       	std	Z+27, r15	; 0x1b
    c748:	80 e0       	ldi	r24, 0x00	; 0
    c74a:	ba cd       	rjmp	.-1164   	; 0xc2c0 <f_lseek+0xd2>
    c74c:	81 e1       	ldi	r24, 0x11	; 17
    c74e:	b8 cd       	rjmp	.-1168   	; 0xc2c0 <f_lseek+0xd2>
    c750:	80 e0       	ldi	r24, 0x00	; 0
    c752:	90 e0       	ldi	r25, 0x00	; 0
    c754:	dc 01       	movw	r26, r24
    c756:	c1 2c       	mov	r12, r1
    c758:	d1 2c       	mov	r13, r1
    c75a:	76 01       	movw	r14, r12
    c75c:	bf cf       	rjmp	.-130    	; 0xc6dc <f_lseek+0x4ee>
    c75e:	2a 96       	adiw	r28, 0x0a	; 10
    c760:	e2 e1       	ldi	r30, 0x12	; 18
    c762:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

0000c766 <f_opendir>:
    c766:	a4 e0       	ldi	r26, 0x04	; 4
    c768:	b0 e0       	ldi	r27, 0x00	; 0
    c76a:	e9 eb       	ldi	r30, 0xB9	; 185
    c76c:	f3 e6       	ldi	r31, 0x63	; 99
    c76e:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
    c772:	7c 83       	std	Y+4, r23	; 0x04
    c774:	6b 83       	std	Y+3, r22	; 0x03
    c776:	00 97       	sbiw	r24, 0x00	; 0
    c778:	09 f4       	brne	.+2      	; 0xc77c <f_opendir+0x16>
    c77a:	48 c0       	rjmp	.+144    	; 0xc80c <f_opendir+0xa6>
    c77c:	8c 01       	movw	r16, r24
    c77e:	40 e0       	ldi	r20, 0x00	; 0
    c780:	be 01       	movw	r22, r28
    c782:	6f 5f       	subi	r22, 0xFF	; 255
    c784:	7f 4f       	sbci	r23, 0xFF	; 255
    c786:	ce 01       	movw	r24, r28
    c788:	03 96       	adiw	r24, 0x03	; 3
    c78a:	0e 94 77 4c 	call	0x98ee	; 0x98ee <mount_volume>
    c78e:	7c 01       	movw	r14, r24
    c790:	89 2b       	or	r24, r25
    c792:	b9 f5       	brne	.+110    	; 0xc802 <f_opendir+0x9c>
    c794:	89 81       	ldd	r24, Y+1	; 0x01
    c796:	9a 81       	ldd	r25, Y+2	; 0x02
    c798:	f8 01       	movw	r30, r16
    c79a:	91 83       	std	Z+1, r25	; 0x01
    c79c:	80 83       	st	Z, r24
    c79e:	80 e0       	ldi	r24, 0x00	; 0
    c7a0:	92 e0       	ldi	r25, 0x02	; 2
    c7a2:	b7 d5       	rcall	.+2926   	; 0xd312 <ff_memalloc>
    c7a4:	6c 01       	movw	r12, r24
    c7a6:	00 97       	sbiw	r24, 0x00	; 0
    c7a8:	99 f1       	breq	.+102    	; 0xc810 <f_opendir+0xaa>
    c7aa:	e9 81       	ldd	r30, Y+1	; 0x01
    c7ac:	fa 81       	ldd	r31, Y+2	; 0x02
    c7ae:	94 87       	std	Z+12, r25	; 0x0c
    c7b0:	83 87       	std	Z+11, r24	; 0x0b
    c7b2:	6b 81       	ldd	r22, Y+3	; 0x03
    c7b4:	7c 81       	ldd	r23, Y+4	; 0x04
    c7b6:	c8 01       	movw	r24, r16
    c7b8:	0e 94 c6 57 	call	0xaf8c	; 0xaf8c <follow_path>
    c7bc:	7c 01       	movw	r14, r24
    c7be:	89 2b       	or	r24, r25
    c7c0:	b9 f4       	brne	.+46     	; 0xc7f0 <f_opendir+0x8a>
    c7c2:	f8 01       	movw	r30, r16
    c7c4:	87 a1       	ldd	r24, Z+39	; 0x27
    c7c6:	87 fd       	sbrc	r24, 7
    c7c8:	28 c0       	rjmp	.+80     	; 0xc81a <f_opendir+0xb4>
    c7ca:	84 81       	ldd	r24, Z+4	; 0x04
    c7cc:	84 ff       	sbrs	r24, 4
    c7ce:	0d c0       	rjmp	.+26     	; 0xc7ea <f_opendir+0x84>
    c7d0:	62 8d       	ldd	r22, Z+26	; 0x1a
    c7d2:	73 8d       	ldd	r23, Z+27	; 0x1b
    c7d4:	e9 81       	ldd	r30, Y+1	; 0x01
    c7d6:	fa 81       	ldd	r31, Y+2	; 0x02
    c7d8:	80 81       	ld	r24, Z
    c7da:	0e 94 6d 4a 	call	0x94da	; 0x94da <ld_clust.isra.4>
    c7de:	f8 01       	movw	r30, r16
    c7e0:	66 83       	std	Z+6, r22	; 0x06
    c7e2:	77 83       	std	Z+7, r23	; 0x07
    c7e4:	80 87       	std	Z+8, r24	; 0x08
    c7e6:	91 87       	std	Z+9, r25	; 0x09
    c7e8:	18 c0       	rjmp	.+48     	; 0xc81a <f_opendir+0xb4>
    c7ea:	95 e0       	ldi	r25, 0x05	; 5
    c7ec:	e9 2e       	mov	r14, r25
    c7ee:	f1 2c       	mov	r15, r1
    c7f0:	c6 01       	movw	r24, r12
    c7f2:	92 d5       	rcall	.+2852   	; 0xd318 <ff_memfree>
    c7f4:	f4 e0       	ldi	r31, 0x04	; 4
    c7f6:	ef 16       	cp	r14, r31
    c7f8:	f1 04       	cpc	r15, r1
    c7fa:	f1 f0       	breq	.+60     	; 0xc838 <f_opendir+0xd2>
    c7fc:	e1 14       	cp	r14, r1
    c7fe:	f1 04       	cpc	r15, r1
    c800:	49 f0       	breq	.+18     	; 0xc814 <f_opendir+0xae>
    c802:	f8 01       	movw	r30, r16
    c804:	11 82       	std	Z+1, r1	; 0x01
    c806:	10 82       	st	Z, r1
    c808:	c7 01       	movw	r24, r14
    c80a:	1a c0       	rjmp	.+52     	; 0xc840 <f_opendir+0xda>
    c80c:	89 e0       	ldi	r24, 0x09	; 9
    c80e:	03 c0       	rjmp	.+6      	; 0xc816 <f_opendir+0xb0>
    c810:	81 e1       	ldi	r24, 0x11	; 17
    c812:	01 c0       	rjmp	.+2      	; 0xc816 <f_opendir+0xb0>
    c814:	80 e0       	ldi	r24, 0x00	; 0
    c816:	90 e0       	ldi	r25, 0x00	; 0
    c818:	13 c0       	rjmp	.+38     	; 0xc840 <f_opendir+0xda>
    c81a:	e9 81       	ldd	r30, Y+1	; 0x01
    c81c:	fa 81       	ldd	r31, Y+2	; 0x02
    c81e:	85 81       	ldd	r24, Z+5	; 0x05
    c820:	96 81       	ldd	r25, Z+6	; 0x06
    c822:	f8 01       	movw	r30, r16
    c824:	93 83       	std	Z+3, r25	; 0x03
    c826:	82 83       	std	Z+2, r24	; 0x02
    c828:	40 e0       	ldi	r20, 0x00	; 0
    c82a:	50 e0       	ldi	r21, 0x00	; 0
    c82c:	ba 01       	movw	r22, r20
    c82e:	c8 01       	movw	r24, r16
    c830:	0e 94 80 50 	call	0xa100	; 0xa100 <dir_sdi>
    c834:	7c 01       	movw	r14, r24
    c836:	dc cf       	rjmp	.-72     	; 0xc7f0 <f_opendir+0x8a>
    c838:	85 e0       	ldi	r24, 0x05	; 5
    c83a:	e8 2e       	mov	r14, r24
    c83c:	f1 2c       	mov	r15, r1
    c83e:	e1 cf       	rjmp	.-62     	; 0xc802 <f_opendir+0x9c>
    c840:	24 96       	adiw	r28, 0x04	; 4
    c842:	e8 e0       	ldi	r30, 0x08	; 8
    c844:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

0000c848 <f_closedir>:
    c848:	a2 e0       	ldi	r26, 0x02	; 2
    c84a:	b0 e0       	ldi	r27, 0x00	; 0
    c84c:	ea e2       	ldi	r30, 0x2A	; 42
    c84e:	f4 e6       	ldi	r31, 0x64	; 100
    c850:	0c 94 dd e2 	jmp	0x1c5ba	; 0x1c5ba <__prologue_saves__+0x1c>
    c854:	8c 01       	movw	r16, r24
    c856:	be 01       	movw	r22, r28
    c858:	6f 5f       	subi	r22, 0xFF	; 255
    c85a:	7f 4f       	sbci	r23, 0xFF	; 255
    c85c:	0e 94 79 48 	call	0x90f2	; 0x90f2 <validate>
    c860:	00 97       	sbiw	r24, 0x00	; 0
    c862:	19 f4       	brne	.+6      	; 0xc86a <f_closedir+0x22>
    c864:	f8 01       	movw	r30, r16
    c866:	11 82       	std	Z+1, r1	; 0x01
    c868:	10 82       	st	Z, r1
    c86a:	22 96       	adiw	r28, 0x02	; 2
    c86c:	e4 e0       	ldi	r30, 0x04	; 4
    c86e:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

0000c872 <f_readdir>:
    c872:	a2 e0       	ldi	r26, 0x02	; 2
    c874:	b0 e0       	ldi	r27, 0x00	; 0
    c876:	ef e3       	ldi	r30, 0x3F	; 63
    c878:	f4 e6       	ldi	r31, 0x64	; 100
    c87a:	0c 94 d7 e2 	jmp	0x1c5ae	; 0x1c5ae <__prologue_saves__+0x10>
    c87e:	7c 01       	movw	r14, r24
    c880:	5b 01       	movw	r10, r22
    c882:	be 01       	movw	r22, r28
    c884:	6f 5f       	subi	r22, 0xFF	; 255
    c886:	7f 4f       	sbci	r23, 0xFF	; 255
    c888:	0e 94 79 48 	call	0x90f2	; 0x90f2 <validate>
    c88c:	00 97       	sbiw	r24, 0x00	; 0
    c88e:	89 f5       	brne	.+98     	; 0xc8f2 <f_readdir+0x80>
    c890:	a1 14       	cp	r10, r1
    c892:	b1 04       	cpc	r11, r1
    c894:	39 f4       	brne	.+14     	; 0xc8a4 <f_readdir+0x32>
    c896:	40 e0       	ldi	r20, 0x00	; 0
    c898:	50 e0       	ldi	r21, 0x00	; 0
    c89a:	ba 01       	movw	r22, r20
    c89c:	c7 01       	movw	r24, r14
    c89e:	0e 94 80 50 	call	0xa100	; 0xa100 <dir_sdi>
    c8a2:	27 c0       	rjmp	.+78     	; 0xc8f2 <f_readdir+0x80>
    c8a4:	80 e0       	ldi	r24, 0x00	; 0
    c8a6:	92 e0       	ldi	r25, 0x02	; 2
    c8a8:	34 d5       	rcall	.+2664   	; 0xd312 <ff_memalloc>
    c8aa:	6c 01       	movw	r12, r24
    c8ac:	00 97       	sbiw	r24, 0x00	; 0
    c8ae:	f9 f0       	breq	.+62     	; 0xc8ee <f_readdir+0x7c>
    c8b0:	e9 81       	ldd	r30, Y+1	; 0x01
    c8b2:	fa 81       	ldd	r31, Y+2	; 0x02
    c8b4:	94 87       	std	Z+12, r25	; 0x0c
    c8b6:	83 87       	std	Z+11, r24	; 0x0b
    c8b8:	60 e0       	ldi	r22, 0x00	; 0
    c8ba:	70 e0       	ldi	r23, 0x00	; 0
    c8bc:	c7 01       	movw	r24, r14
    c8be:	0e 94 19 54 	call	0xa832	; 0xa832 <dir_read>
    c8c2:	8c 01       	movw	r16, r24
    c8c4:	8b 7f       	andi	r24, 0xFB	; 251
    c8c6:	89 2b       	or	r24, r25
    c8c8:	71 f4       	brne	.+28     	; 0xc8e6 <f_readdir+0x74>
    c8ca:	b5 01       	movw	r22, r10
    c8cc:	c7 01       	movw	r24, r14
    c8ce:	0e 94 5d 49 	call	0x92ba	; 0x92ba <get_fileinfo>
    c8d2:	60 e0       	ldi	r22, 0x00	; 0
    c8d4:	70 e0       	ldi	r23, 0x00	; 0
    c8d6:	c7 01       	movw	r24, r14
    c8d8:	0e 94 f8 52 	call	0xa5f0	; 0xa5f0 <dir_next>
    c8dc:	8c 01       	movw	r16, r24
    c8de:	04 97       	sbiw	r24, 0x04	; 4
    c8e0:	11 f4       	brne	.+4      	; 0xc8e6 <f_readdir+0x74>
    c8e2:	00 e0       	ldi	r16, 0x00	; 0
    c8e4:	10 e0       	ldi	r17, 0x00	; 0
    c8e6:	c6 01       	movw	r24, r12
    c8e8:	17 d5       	rcall	.+2606   	; 0xd318 <ff_memfree>
    c8ea:	c8 01       	movw	r24, r16
    c8ec:	02 c0       	rjmp	.+4      	; 0xc8f2 <f_readdir+0x80>
    c8ee:	81 e1       	ldi	r24, 0x11	; 17
    c8f0:	90 e0       	ldi	r25, 0x00	; 0
    c8f2:	22 96       	adiw	r28, 0x02	; 2
    c8f4:	ea e0       	ldi	r30, 0x0A	; 10
    c8f6:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__epilogue_restores__+0x10>

0000c8fa <f_stat>:
    c8fa:	a0 e3       	ldi	r26, 0x30	; 48
    c8fc:	b0 e0       	ldi	r27, 0x00	; 0
    c8fe:	e3 e8       	ldi	r30, 0x83	; 131
    c900:	f4 e6       	ldi	r31, 0x64	; 100
    c902:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
    c906:	98 ab       	std	Y+48, r25	; 0x30
    c908:	8f a7       	std	Y+47, r24	; 0x2f
    c90a:	6b 01       	movw	r12, r22
    c90c:	40 e0       	ldi	r20, 0x00	; 0
    c90e:	be 01       	movw	r22, r28
    c910:	6f 5f       	subi	r22, 0xFF	; 255
    c912:	7f 4f       	sbci	r23, 0xFF	; 255
    c914:	ce 01       	movw	r24, r28
    c916:	8f 96       	adiw	r24, 0x2f	; 47
    c918:	0e 94 77 4c 	call	0x98ee	; 0x98ee <mount_volume>
    c91c:	00 97       	sbiw	r24, 0x00	; 0
    c91e:	39 f5       	brne	.+78     	; 0xc96e <f_stat+0x74>
    c920:	80 e0       	ldi	r24, 0x00	; 0
    c922:	92 e0       	ldi	r25, 0x02	; 2
    c924:	f6 d4       	rcall	.+2540   	; 0xd312 <ff_memalloc>
    c926:	7c 01       	movw	r14, r24
    c928:	00 97       	sbiw	r24, 0x00	; 0
    c92a:	f9 f0       	breq	.+62     	; 0xc96a <f_stat+0x70>
    c92c:	e9 81       	ldd	r30, Y+1	; 0x01
    c92e:	fa 81       	ldd	r31, Y+2	; 0x02
    c930:	94 87       	std	Z+12, r25	; 0x0c
    c932:	83 87       	std	Z+11, r24	; 0x0b
    c934:	6f a5       	ldd	r22, Y+47	; 0x2f
    c936:	78 a9       	ldd	r23, Y+48	; 0x30
    c938:	ce 01       	movw	r24, r28
    c93a:	01 96       	adiw	r24, 0x01	; 1
    c93c:	0e 94 c6 57 	call	0xaf8c	; 0xaf8c <follow_path>
    c940:	8c 01       	movw	r16, r24
    c942:	89 2b       	or	r24, r25
    c944:	71 f4       	brne	.+28     	; 0xc962 <f_stat+0x68>
    c946:	88 a5       	ldd	r24, Y+40	; 0x28
    c948:	87 fd       	sbrc	r24, 7
    c94a:	09 c0       	rjmp	.+18     	; 0xc95e <f_stat+0x64>
    c94c:	c1 14       	cp	r12, r1
    c94e:	d1 04       	cpc	r13, r1
    c950:	41 f0       	breq	.+16     	; 0xc962 <f_stat+0x68>
    c952:	b6 01       	movw	r22, r12
    c954:	ce 01       	movw	r24, r28
    c956:	01 96       	adiw	r24, 0x01	; 1
    c958:	0e 94 5d 49 	call	0x92ba	; 0x92ba <get_fileinfo>
    c95c:	02 c0       	rjmp	.+4      	; 0xc962 <f_stat+0x68>
    c95e:	06 e0       	ldi	r16, 0x06	; 6
    c960:	10 e0       	ldi	r17, 0x00	; 0
    c962:	c7 01       	movw	r24, r14
    c964:	d9 d4       	rcall	.+2482   	; 0xd318 <ff_memfree>
    c966:	c8 01       	movw	r24, r16
    c968:	02 c0       	rjmp	.+4      	; 0xc96e <f_stat+0x74>
    c96a:	81 e1       	ldi	r24, 0x11	; 17
    c96c:	90 e0       	ldi	r25, 0x00	; 0
    c96e:	e0 96       	adiw	r28, 0x30	; 48
    c970:	e8 e0       	ldi	r30, 0x08	; 8
    c972:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

0000c976 <f_getfree>:
    c976:	aa e0       	ldi	r26, 0x0A	; 10
    c978:	b0 e0       	ldi	r27, 0x00	; 0
    c97a:	e1 ec       	ldi	r30, 0xC1	; 193
    c97c:	f4 e6       	ldi	r31, 0x64	; 100
    c97e:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
    c982:	9c 83       	std	Y+4, r25	; 0x04
    c984:	8b 83       	std	Y+3, r24	; 0x03
    c986:	7e 83       	std	Y+6, r23	; 0x06
    c988:	6d 83       	std	Y+5, r22	; 0x05
    c98a:	7a 01       	movw	r14, r20
    c98c:	40 e0       	ldi	r20, 0x00	; 0
    c98e:	be 01       	movw	r22, r28
    c990:	6f 5f       	subi	r22, 0xFF	; 255
    c992:	7f 4f       	sbci	r23, 0xFF	; 255
    c994:	ce 01       	movw	r24, r28
    c996:	03 96       	adiw	r24, 0x03	; 3
    c998:	0e 94 77 4c 	call	0x98ee	; 0x98ee <mount_volume>
    c99c:	8c 01       	movw	r16, r24
    c99e:	89 2b       	or	r24, r25
    c9a0:	09 f0       	breq	.+2      	; 0xc9a4 <f_getfree+0x2e>
    c9a2:	c4 c0       	rjmp	.+392    	; 0xcb2c <f_getfree+0x1b6>
    c9a4:	69 80       	ldd	r6, Y+1	; 0x01
    c9a6:	7a 80       	ldd	r7, Y+2	; 0x02
    c9a8:	d7 01       	movw	r26, r14
    c9aa:	6d 92       	st	X+, r6
    c9ac:	7c 92       	st	X, r7
    c9ae:	f3 01       	movw	r30, r6
    c9b0:	81 89       	ldd	r24, Z+17	; 0x11
    c9b2:	92 89       	ldd	r25, Z+18	; 0x12
    c9b4:	a3 89       	ldd	r26, Z+19	; 0x13
    c9b6:	b4 89       	ldd	r27, Z+20	; 0x14
    c9b8:	81 8c       	ldd	r8, Z+25	; 0x19
    c9ba:	92 8c       	ldd	r9, Z+26	; 0x1a
    c9bc:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c9be:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c9c0:	b5 01       	movw	r22, r10
    c9c2:	a4 01       	movw	r20, r8
    c9c4:	42 50       	subi	r20, 0x02	; 2
    c9c6:	51 09       	sbc	r21, r1
    c9c8:	61 09       	sbc	r22, r1
    c9ca:	71 09       	sbc	r23, r1
    c9cc:	48 17       	cp	r20, r24
    c9ce:	59 07       	cpc	r21, r25
    c9d0:	6a 07       	cpc	r22, r26
    c9d2:	7b 07       	cpc	r23, r27
    c9d4:	38 f0       	brcs	.+14     	; 0xc9e4 <f_getfree+0x6e>
    c9d6:	ed 81       	ldd	r30, Y+5	; 0x05
    c9d8:	fe 81       	ldd	r31, Y+6	; 0x06
    c9da:	80 83       	st	Z, r24
    c9dc:	91 83       	std	Z+1, r25	; 0x01
    c9de:	a2 83       	std	Z+2, r26	; 0x02
    c9e0:	b3 83       	std	Z+3, r27	; 0x03
    c9e2:	a4 c0       	rjmp	.+328    	; 0xcb2c <f_getfree+0x1b6>
    c9e4:	80 81       	ld	r24, Z
    c9e6:	81 30       	cpi	r24, 0x01	; 1
    c9e8:	a1 f5       	brne	.+104    	; 0xca52 <f_getfree+0xdc>
    c9ea:	82 e0       	ldi	r24, 0x02	; 2
    c9ec:	88 2e       	mov	r8, r24
    c9ee:	91 2c       	mov	r9, r1
    c9f0:	a1 2c       	mov	r10, r1
    c9f2:	b1 2c       	mov	r11, r1
    c9f4:	c1 2c       	mov	r12, r1
    c9f6:	d1 2c       	mov	r13, r1
    c9f8:	76 01       	movw	r14, r12
    c9fa:	b5 01       	movw	r22, r10
    c9fc:	a4 01       	movw	r20, r8
    c9fe:	c3 01       	movw	r24, r6
    ca00:	0e 94 cc 4f 	call	0x9f98	; 0x9f98 <get_fat.isra.10>
    ca04:	6f 3f       	cpi	r22, 0xFF	; 255
    ca06:	bf ef       	ldi	r27, 0xFF	; 255
    ca08:	7b 07       	cpc	r23, r27
    ca0a:	8b 07       	cpc	r24, r27
    ca0c:	9b 07       	cpc	r25, r27
    ca0e:	09 f4       	brne	.+2      	; 0xca12 <f_getfree+0x9c>
    ca10:	76 c0       	rjmp	.+236    	; 0xcafe <f_getfree+0x188>
    ca12:	61 30       	cpi	r22, 0x01	; 1
    ca14:	71 05       	cpc	r23, r1
    ca16:	81 05       	cpc	r24, r1
    ca18:	91 05       	cpc	r25, r1
    ca1a:	09 f4       	brne	.+2      	; 0xca1e <f_getfree+0xa8>
    ca1c:	73 c0       	rjmp	.+230    	; 0xcb04 <f_getfree+0x18e>
    ca1e:	67 2b       	or	r22, r23
    ca20:	68 2b       	or	r22, r24
    ca22:	69 2b       	or	r22, r25
    ca24:	29 f4       	brne	.+10     	; 0xca30 <f_getfree+0xba>
    ca26:	ef ef       	ldi	r30, 0xFF	; 255
    ca28:	ce 1a       	sub	r12, r30
    ca2a:	de 0a       	sbc	r13, r30
    ca2c:	ee 0a       	sbc	r14, r30
    ca2e:	fe 0a       	sbc	r15, r30
    ca30:	ff ef       	ldi	r31, 0xFF	; 255
    ca32:	8f 1a       	sub	r8, r31
    ca34:	9f 0a       	sbc	r9, r31
    ca36:	af 0a       	sbc	r10, r31
    ca38:	bf 0a       	sbc	r11, r31
    ca3a:	e9 81       	ldd	r30, Y+1	; 0x01
    ca3c:	fa 81       	ldd	r31, Y+2	; 0x02
    ca3e:	81 8d       	ldd	r24, Z+25	; 0x19
    ca40:	92 8d       	ldd	r25, Z+26	; 0x1a
    ca42:	a3 8d       	ldd	r26, Z+27	; 0x1b
    ca44:	b4 8d       	ldd	r27, Z+28	; 0x1c
    ca46:	88 16       	cp	r8, r24
    ca48:	99 06       	cpc	r9, r25
    ca4a:	aa 06       	cpc	r10, r26
    ca4c:	bb 06       	cpc	r11, r27
    ca4e:	a8 f2       	brcs	.-86     	; 0xc9fa <f_getfree+0x84>
    ca50:	5d c0       	rjmp	.+186    	; 0xcb0c <f_getfree+0x196>
    ca52:	f3 01       	movw	r30, r6
    ca54:	45 a0       	ldd	r4, Z+37	; 0x25
    ca56:	56 a0       	ldd	r5, Z+38	; 0x26
    ca58:	67 a0       	ldd	r6, Z+39	; 0x27
    ca5a:	70 a4       	ldd	r7, Z+40	; 0x28
    ca5c:	21 2c       	mov	r2, r1
    ca5e:	31 2c       	mov	r3, r1
    ca60:	c1 2c       	mov	r12, r1
    ca62:	d1 2c       	mov	r13, r1
    ca64:	76 01       	movw	r14, r12
    ca66:	21 14       	cp	r2, r1
    ca68:	31 04       	cpc	r3, r1
    ca6a:	b1 f4       	brne	.+44     	; 0xca98 <f_getfree+0x122>
    ca6c:	d3 01       	movw	r26, r6
    ca6e:	c2 01       	movw	r24, r4
    ca70:	01 96       	adiw	r24, 0x01	; 1
    ca72:	a1 1d       	adc	r26, r1
    ca74:	b1 1d       	adc	r27, r1
    ca76:	8f 83       	std	Y+7, r24	; 0x07
    ca78:	98 87       	std	Y+8, r25	; 0x08
    ca7a:	a9 87       	std	Y+9, r26	; 0x09
    ca7c:	ba 87       	std	Y+10, r27	; 0x0a
    ca7e:	b3 01       	movw	r22, r6
    ca80:	a2 01       	movw	r20, r4
    ca82:	89 81       	ldd	r24, Y+1	; 0x01
    ca84:	9a 81       	ldd	r25, Y+2	; 0x02
    ca86:	0e 94 fc 4b 	call	0x97f8	; 0x97f8 <move_window>
    ca8a:	00 97       	sbiw	r24, 0x00	; 0
    ca8c:	09 f0       	breq	.+2      	; 0xca90 <f_getfree+0x11a>
    ca8e:	3d c0       	rjmp	.+122    	; 0xcb0a <f_getfree+0x194>
    ca90:	4f 80       	ldd	r4, Y+7	; 0x07
    ca92:	58 84       	ldd	r5, Y+8	; 0x08
    ca94:	69 84       	ldd	r6, Y+9	; 0x09
    ca96:	7a 84       	ldd	r7, Y+10	; 0x0a
    ca98:	e9 81       	ldd	r30, Y+1	; 0x01
    ca9a:	fa 81       	ldd	r31, Y+2	; 0x02
    ca9c:	80 81       	ld	r24, Z
    ca9e:	82 30       	cpi	r24, 0x02	; 2
    caa0:	79 f4       	brne	.+30     	; 0xcac0 <f_getfree+0x14a>
    caa2:	e2 0d       	add	r30, r2
    caa4:	f3 1d       	adc	r31, r3
    caa6:	85 a9       	ldd	r24, Z+53	; 0x35
    caa8:	96 a9       	ldd	r25, Z+54	; 0x36
    caaa:	89 2b       	or	r24, r25
    caac:	29 f4       	brne	.+10     	; 0xcab8 <f_getfree+0x142>
    caae:	9f ef       	ldi	r25, 0xFF	; 255
    cab0:	c9 1a       	sub	r12, r25
    cab2:	d9 0a       	sbc	r13, r25
    cab4:	e9 0a       	sbc	r14, r25
    cab6:	f9 0a       	sbc	r15, r25
    cab8:	a2 e0       	ldi	r26, 0x02	; 2
    caba:	2a 0e       	add	r2, r26
    cabc:	31 1c       	adc	r3, r1
    cabe:	15 c0       	rjmp	.+42     	; 0xcaea <f_getfree+0x174>
    cac0:	cf 01       	movw	r24, r30
    cac2:	c5 96       	adiw	r24, 0x35	; 53
    cac4:	82 0d       	add	r24, r2
    cac6:	93 1d       	adc	r25, r3
    cac8:	0e 94 21 47 	call	0x8e42	; 0x8e42 <ld_dword>
    cacc:	dc 01       	movw	r26, r24
    cace:	cb 01       	movw	r24, r22
    cad0:	bf 70       	andi	r27, 0x0F	; 15
    cad2:	89 2b       	or	r24, r25
    cad4:	8a 2b       	or	r24, r26
    cad6:	8b 2b       	or	r24, r27
    cad8:	29 f4       	brne	.+10     	; 0xcae4 <f_getfree+0x16e>
    cada:	bf ef       	ldi	r27, 0xFF	; 255
    cadc:	cb 1a       	sub	r12, r27
    cade:	db 0a       	sbc	r13, r27
    cae0:	eb 0a       	sbc	r14, r27
    cae2:	fb 0a       	sbc	r15, r27
    cae4:	e4 e0       	ldi	r30, 0x04	; 4
    cae6:	2e 0e       	add	r2, r30
    cae8:	31 1c       	adc	r3, r1
    caea:	f1 e0       	ldi	r31, 0x01	; 1
    caec:	3f 22       	and	r3, r31
    caee:	21 e0       	ldi	r18, 0x01	; 1
    caf0:	82 1a       	sub	r8, r18
    caf2:	91 08       	sbc	r9, r1
    caf4:	a1 08       	sbc	r10, r1
    caf6:	b1 08       	sbc	r11, r1
    caf8:	09 f0       	breq	.+2      	; 0xcafc <f_getfree+0x186>
    cafa:	b5 cf       	rjmp	.-150    	; 0xca66 <f_getfree+0xf0>
    cafc:	07 c0       	rjmp	.+14     	; 0xcb0c <f_getfree+0x196>
    cafe:	01 e0       	ldi	r16, 0x01	; 1
    cb00:	10 e0       	ldi	r17, 0x00	; 0
    cb02:	04 c0       	rjmp	.+8      	; 0xcb0c <f_getfree+0x196>
    cb04:	02 e0       	ldi	r16, 0x02	; 2
    cb06:	10 e0       	ldi	r17, 0x00	; 0
    cb08:	01 c0       	rjmp	.+2      	; 0xcb0c <f_getfree+0x196>
    cb0a:	8c 01       	movw	r16, r24
    cb0c:	ad 81       	ldd	r26, Y+5	; 0x05
    cb0e:	be 81       	ldd	r27, Y+6	; 0x06
    cb10:	cd 92       	st	X+, r12
    cb12:	dd 92       	st	X+, r13
    cb14:	ed 92       	st	X+, r14
    cb16:	fc 92       	st	X, r15
    cb18:	13 97       	sbiw	r26, 0x03	; 3
    cb1a:	e9 81       	ldd	r30, Y+1	; 0x01
    cb1c:	fa 81       	ldd	r31, Y+2	; 0x02
    cb1e:	c1 8a       	std	Z+17, r12	; 0x11
    cb20:	d2 8a       	std	Z+18, r13	; 0x12
    cb22:	e3 8a       	std	Z+19, r14	; 0x13
    cb24:	f4 8a       	std	Z+20, r15	; 0x14
    cb26:	84 81       	ldd	r24, Z+4	; 0x04
    cb28:	81 60       	ori	r24, 0x01	; 1
    cb2a:	84 83       	std	Z+4, r24	; 0x04
    cb2c:	c8 01       	movw	r24, r16
    cb2e:	2a 96       	adiw	r28, 0x0a	; 10
    cb30:	e2 e1       	ldi	r30, 0x12	; 18
    cb32:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

0000cb36 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    cb36:	a0 e6       	ldi	r26, 0x60	; 96
    cb38:	b0 e0       	ldi	r27, 0x00	; 0
    cb3a:	e1 ea       	ldi	r30, 0xA1	; 161
    cb3c:	f5 e6       	ldi	r31, 0x65	; 101
    cb3e:	0c 94 d6 e2 	jmp	0x1c5ac	; 0x1c5ac <__prologue_saves__+0xe>
    cb42:	a1 96       	adiw	r28, 0x21	; 33
    cb44:	9f af       	std	Y+63, r25	; 0x3f
    cb46:	8e af       	std	Y+62, r24	; 0x3e
    cb48:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    cb4a:	42 e0       	ldi	r20, 0x02	; 2
    cb4c:	be 01       	movw	r22, r28
    cb4e:	63 5a       	subi	r22, 0xA3	; 163
    cb50:	7f 4f       	sbci	r23, 0xFF	; 255
    cb52:	ce 01       	movw	r24, r28
    cb54:	81 5a       	subi	r24, 0xA1	; 161
    cb56:	9f 4f       	sbci	r25, 0xFF	; 255
    cb58:	0e 94 77 4c 	call	0x98ee	; 0x98ee <mount_volume>
	if (res == FR_OK) {
    cb5c:	00 97       	sbiw	r24, 0x00	; 0
    cb5e:	09 f0       	breq	.+2      	; 0xcb62 <f_unlink+0x2c>
    cb60:	8c c0       	rjmp	.+280    	; 0xcc7a <f_unlink+0x144>
		dj.obj.fs = fs;
    cb62:	6f 96       	adiw	r28, 0x1f	; 31
    cb64:	8e ad       	ldd	r24, Y+62	; 0x3e
    cb66:	9f ad       	ldd	r25, Y+63	; 0x3f
    cb68:	6f 97       	sbiw	r28, 0x1f	; 31
    cb6a:	98 ab       	std	Y+48, r25	; 0x30
    cb6c:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cb6e:	80 e0       	ldi	r24, 0x00	; 0
    cb70:	92 e0       	ldi	r25, 0x02	; 2
    cb72:	cf d3       	rcall	.+1950   	; 0xd312 <ff_memalloc>
    cb74:	5c 01       	movw	r10, r24
    cb76:	00 97       	sbiw	r24, 0x00	; 0
    cb78:	09 f4       	brne	.+2      	; 0xcb7c <f_unlink+0x46>
    cb7a:	49 c0       	rjmp	.+146    	; 0xcc0e <f_unlink+0xd8>
    cb7c:	6f 96       	adiw	r28, 0x1f	; 31
    cb7e:	ee ad       	ldd	r30, Y+62	; 0x3e
    cb80:	ff ad       	ldd	r31, Y+63	; 0x3f
    cb82:	6f 97       	sbiw	r28, 0x1f	; 31
    cb84:	94 87       	std	Z+12, r25	; 0x0c
    cb86:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    cb88:	a1 96       	adiw	r28, 0x21	; 33
    cb8a:	6e ad       	ldd	r22, Y+62	; 0x3e
    cb8c:	7f ad       	ldd	r23, Y+63	; 0x3f
    cb8e:	a1 97       	sbiw	r28, 0x21	; 33
    cb90:	ce 01       	movw	r24, r28
    cb92:	8f 96       	adiw	r24, 0x2f	; 47
    cb94:	0e 94 c6 57 	call	0xaf8c	; 0xaf8c <follow_path>
    cb98:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    cb9a:	89 2b       	or	r24, r25
    cb9c:	a1 f5       	brne	.+104    	; 0xcc06 <f_unlink+0xd0>
    cb9e:	67 96       	adiw	r28, 0x17	; 23
    cba0:	8f ad       	ldd	r24, Y+63	; 0x3f
    cba2:	67 97       	sbiw	r28, 0x17	; 23
    cba4:	85 fd       	sbrc	r24, 5
    cba6:	36 c0       	rjmp	.+108    	; 0xcc14 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    cba8:	87 fd       	sbrc	r24, 7
    cbaa:	34 c0       	rjmp	.+104    	; 0xcc14 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    cbac:	9b a8       	ldd	r9, Y+51	; 0x33
    cbae:	90 fc       	sbrc	r9, 0
    cbb0:	40 c0       	rjmp	.+128    	; 0xcc32 <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    cbb2:	6f 96       	adiw	r28, 0x1f	; 31
    cbb4:	0e ad       	ldd	r16, Y+62	; 0x3e
    cbb6:	1f ad       	ldd	r17, Y+63	; 0x3f
    cbb8:	6f 97       	sbiw	r28, 0x1f	; 31
    cbba:	2b 96       	adiw	r28, 0x0b	; 11
    cbbc:	6e ad       	ldd	r22, Y+62	; 0x3e
    cbbe:	7f ad       	ldd	r23, Y+63	; 0x3f
    cbc0:	2b 97       	sbiw	r28, 0x0b	; 11
    cbc2:	f8 01       	movw	r30, r16
    cbc4:	80 81       	ld	r24, Z
    cbc6:	0e 94 6d 4a 	call	0x94da	; 0x94da <ld_clust.isra.4>
    cbca:	6b 01       	movw	r12, r22
    cbcc:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    cbce:	94 fe       	sbrs	r9, 4
    cbd0:	33 c0       	rjmp	.+102    	; 0xcc38 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    cbd2:	f8 01       	movw	r30, r16
    cbd4:	85 89       	ldd	r24, Z+21	; 0x15
    cbd6:	96 89       	ldd	r25, Z+22	; 0x16
    cbd8:	a7 89       	ldd	r26, Z+23	; 0x17
    cbda:	b0 8d       	ldd	r27, Z+24	; 0x18
    cbdc:	c8 16       	cp	r12, r24
    cbde:	d9 06       	cpc	r13, r25
    cbe0:	ea 06       	cpc	r14, r26
    cbe2:	fb 06       	cpc	r15, r27
    cbe4:	31 f1       	breq	.+76     	; 0xcc32 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    cbe6:	1a 83       	std	Y+2, r17	; 0x02
    cbe8:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    cbea:	cf 82       	std	Y+7, r12	; 0x07
    cbec:	d8 86       	std	Y+8, r13	; 0x08
    cbee:	e9 86       	std	Y+9, r14	; 0x09
    cbf0:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    cbf2:	40 e0       	ldi	r20, 0x00	; 0
    cbf4:	50 e0       	ldi	r21, 0x00	; 0
    cbf6:	ba 01       	movw	r22, r20
    cbf8:	ce 01       	movw	r24, r28
    cbfa:	01 96       	adiw	r24, 0x01	; 1
    cbfc:	0e 94 80 50 	call	0xa100	; 0xa100 <dir_sdi>
    cc00:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    cc02:	89 2b       	or	r24, r25
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cc04:	51 f0       	breq	.+20     	; 0xcc1a <f_unlink+0xe4>
    cc06:	c5 01       	movw	r24, r10
    cc08:	87 d3       	rcall	.+1806   	; 0xd318 <ff_memfree>
    cc0a:	c8 01       	movw	r24, r16

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cc0c:	36 c0       	rjmp	.+108    	; 0xcc7a <f_unlink+0x144>
    cc0e:	81 e1       	ldi	r24, 0x11	; 17
    cc10:	90 e0       	ldi	r25, 0x00	; 0
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    cc12:	33 c0       	rjmp	.+102    	; 0xcc7a <f_unlink+0x144>
    cc14:	06 e0       	ldi	r16, 0x06	; 6
    cc16:	10 e0       	ldi	r17, 0x00	; 0
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    cc18:	f6 cf       	rjmp	.-20     	; 0xcc06 <f_unlink+0xd0>
    cc1a:	60 e0       	ldi	r22, 0x00	; 0
    cc1c:	70 e0       	ldi	r23, 0x00	; 0
    cc1e:	ce 01       	movw	r24, r28
    cc20:	01 96       	adiw	r24, 0x01	; 1
    cc22:	0e 94 19 54 	call	0xa832	; 0xa832 <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    cc26:	8c 01       	movw	r16, r24
    cc28:	00 97       	sbiw	r24, 0x00	; 0
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    cc2a:	19 f0       	breq	.+6      	; 0xcc32 <f_unlink+0xfc>
    cc2c:	04 97       	sbiw	r24, 0x04	; 4
    cc2e:	21 f0       	breq	.+8      	; 0xcc38 <f_unlink+0x102>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    cc30:	ea cf       	rjmp	.-44     	; 0xcc06 <f_unlink+0xd0>
    cc32:	07 e0       	ldi	r16, 0x07	; 7
    cc34:	10 e0       	ldi	r17, 0x00	; 0
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    cc36:	e7 cf       	rjmp	.-50     	; 0xcc06 <f_unlink+0xd0>
    cc38:	ce 01       	movw	r24, r28
    cc3a:	8f 96       	adiw	r24, 0x2f	; 47
    cc3c:	0e 94 e2 54 	call	0xa9c4	; 0xa9c4 <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    cc40:	8c 01       	movw	r16, r24
    cc42:	89 2b       	or	r24, r25
    cc44:	01 f7       	brne	.-64     	; 0xcc06 <f_unlink+0xd0>
    cc46:	c1 14       	cp	r12, r1
    cc48:	d1 04       	cpc	r13, r1
    cc4a:	e1 04       	cpc	r14, r1
    cc4c:	f1 04       	cpc	r15, r1
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cc4e:	41 f4       	brne	.+16     	; 0xcc60 <f_unlink+0x12a>
    cc50:	6f 96       	adiw	r28, 0x1f	; 31
    cc52:	8e ad       	ldd	r24, Y+62	; 0x3e
    cc54:	9f ad       	ldd	r25, Y+63	; 0x3f
    cc56:	6f 97       	sbiw	r28, 0x1f	; 31
    cc58:	0e 94 e2 4a 	call	0x95c4	; 0x95c4 <sync_fs>
    cc5c:	8c 01       	movw	r16, r24
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    cc5e:	d3 cf       	rjmp	.-90     	; 0xcc06 <f_unlink+0xd0>
    cc60:	00 e0       	ldi	r16, 0x00	; 0
    cc62:	10 e0       	ldi	r17, 0x00	; 0
    cc64:	98 01       	movw	r18, r16
    cc66:	b7 01       	movw	r22, r14
    cc68:	a6 01       	movw	r20, r12
    cc6a:	ce 01       	movw	r24, r28
    cc6c:	8f 96       	adiw	r24, 0x2f	; 47
    cc6e:	0e 94 67 52 	call	0xa4ce	; 0xa4ce <remove_chain>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cc72:	8c 01       	movw	r16, r24
    cc74:	89 2b       	or	r24, r25
    cc76:	39 f6       	brne	.-114    	; 0xcc06 <f_unlink+0xd0>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cc78:	eb cf       	rjmp	.-42     	; 0xcc50 <f_unlink+0x11a>
    cc7a:	c0 5a       	subi	r28, 0xA0	; 160
    cc7c:	df 4f       	sbci	r29, 0xFF	; 255
    cc7e:	eb e0       	ldi	r30, 0x0B	; 11
    cc80:	0c 94 f2 e2 	jmp	0x1c5e4	; 0x1c5e4 <__epilogue_restores__+0xe>

0000cc84 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    cc84:	a0 e4       	ldi	r26, 0x40	; 64
    cc86:	b0 e0       	ldi	r27, 0x00	; 0
    cc88:	e8 e4       	ldi	r30, 0x48	; 72
    cc8a:	f6 e6       	ldi	r31, 0x66	; 102
    cc8c:	0c 94 d1 e2 	jmp	0x1c5a2	; 0x1c5a2 <__prologue_saves__+0x4>
    cc90:	21 96       	adiw	r28, 0x01	; 1
    cc92:	9f af       	std	Y+63, r25	; 0x3f
    cc94:	8e af       	std	Y+62, r24	; 0x3e
    cc96:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cc98:	42 e0       	ldi	r20, 0x02	; 2
    cc9a:	be 01       	movw	r22, r28
    cc9c:	63 5c       	subi	r22, 0xC3	; 195
    cc9e:	7f 4f       	sbci	r23, 0xFF	; 255
    cca0:	ce 01       	movw	r24, r28
    cca2:	cf 96       	adiw	r24, 0x3f	; 63
    cca4:	0e 94 77 4c 	call	0x98ee	; 0x98ee <mount_volume>
	if (res == FR_OK) {
    cca8:	00 97       	sbiw	r24, 0x00	; 0
    ccaa:	09 f0       	breq	.+2      	; 0xccae <f_mkdir+0x2a>
    ccac:	d6 c0       	rjmp	.+428    	; 0xce5a <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    ccae:	8d ad       	ldd	r24, Y+61	; 0x3d
    ccb0:	9e ad       	ldd	r25, Y+62	; 0x3e
    ccb2:	9a 83       	std	Y+2, r25	; 0x02
    ccb4:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    ccb6:	80 e0       	ldi	r24, 0x00	; 0
    ccb8:	92 e0       	ldi	r25, 0x02	; 2
    ccba:	2b d3       	rcall	.+1622   	; 0xd312 <ff_memalloc>
    ccbc:	6c 01       	movw	r12, r24
    ccbe:	00 97       	sbiw	r24, 0x00	; 0
    ccc0:	e9 f0       	breq	.+58     	; 0xccfc <f_mkdir+0x78>
    ccc2:	ed ad       	ldd	r30, Y+61	; 0x3d
    ccc4:	fe ad       	ldd	r31, Y+62	; 0x3e
    ccc6:	94 87       	std	Z+12, r25	; 0x0c
    ccc8:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    ccca:	21 96       	adiw	r28, 0x01	; 1
    cccc:	6e ad       	ldd	r22, Y+62	; 0x3e
    ccce:	7f ad       	ldd	r23, Y+63	; 0x3f
    ccd0:	21 97       	sbiw	r28, 0x01	; 1
    ccd2:	ce 01       	movw	r24, r28
    ccd4:	01 96       	adiw	r24, 0x01	; 1
    ccd6:	0e 94 c6 57 	call	0xaf8c	; 0xaf8c <follow_path>
    ccda:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    ccdc:	89 2b       	or	r24, r25
    ccde:	89 f0       	breq	.+34     	; 0xcd02 <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    cce0:	84 e0       	ldi	r24, 0x04	; 4
    cce2:	e8 16       	cp	r14, r24
    cce4:	f1 04       	cpc	r15, r1
    cce6:	31 f4       	brne	.+12     	; 0xccf4 <f_mkdir+0x70>
    cce8:	88 a5       	ldd	r24, Y+40	; 0x28
    ccea:	85 ff       	sbrs	r24, 5
    ccec:	0e c0       	rjmp	.+28     	; 0xcd0a <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    ccee:	26 e0       	ldi	r18, 0x06	; 6
    ccf0:	e2 2e       	mov	r14, r18
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    ccf2:	f1 2c       	mov	r15, r1
    ccf4:	c6 01       	movw	r24, r12
    ccf6:	10 d3       	rcall	.+1568   	; 0xd318 <ff_memfree>
    ccf8:	c7 01       	movw	r24, r14


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    ccfa:	af c0       	rjmp	.+350    	; 0xce5a <f_mkdir+0x1d6>
    ccfc:	81 e1       	ldi	r24, 0x11	; 17
    ccfe:	90 e0       	ldi	r25, 0x00	; 0
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cd00:	ac c0       	rjmp	.+344    	; 0xce5a <f_mkdir+0x1d6>
    cd02:	38 e0       	ldi	r19, 0x08	; 8
    cd04:	e3 2e       	mov	r14, r19
    cd06:	f1 2c       	mov	r15, r1
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    cd08:	f5 cf       	rjmp	.-22     	; 0xccf4 <f_mkdir+0x70>
    cd0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd0e:	98 ab       	std	Y+48, r25	; 0x30
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    cd10:	8f a7       	std	Y+47, r24	; 0x2f
    cd12:	40 e0       	ldi	r20, 0x00	; 0
    cd14:	50 e0       	ldi	r21, 0x00	; 0
    cd16:	ba 01       	movw	r22, r20
    cd18:	ce 01       	movw	r24, r28
    cd1a:	8f 96       	adiw	r24, 0x2f	; 47
    cd1c:	0e 94 41 51 	call	0xa282	; 0xa282 <create_chain>
    cd20:	4b 01       	movw	r8, r22
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cd22:	5c 01       	movw	r10, r24
    cd24:	67 2b       	or	r22, r23
    cd26:	68 2b       	or	r22, r24
    cd28:	69 2b       	or	r22, r25
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cd2a:	09 f1       	breq	.+66     	; 0xcd6e <f_mkdir+0xea>
    cd2c:	e1 e0       	ldi	r30, 0x01	; 1
    cd2e:	8e 16       	cp	r8, r30
    cd30:	91 04       	cpc	r9, r1
    cd32:	a1 04       	cpc	r10, r1
    cd34:	b1 04       	cpc	r11, r1
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    cd36:	61 f0       	breq	.+24     	; 0xcd50 <f_mkdir+0xcc>
    cd38:	ff ef       	ldi	r31, 0xFF	; 255
    cd3a:	8f 16       	cp	r8, r31
    cd3c:	9f 06       	cpc	r9, r31
    cd3e:	af 06       	cpc	r10, r31
    cd40:	bf 06       	cpc	r11, r31
			tm = GET_FATTIME();
    cd42:	d9 f4       	brne	.+54     	; 0xcd7a <f_mkdir+0xf6>
    cd44:	0e 94 fa 70 	call	0xe1f4	; 0xe1f4 <get_fattime>
    cd48:	ee 24       	eor	r14, r14
    cd4a:	e3 94       	inc	r14
    cd4c:	f1 2c       	mov	r15, r1
    cd4e:	05 c0       	rjmp	.+10     	; 0xcd5a <f_mkdir+0xd6>
    cd50:	0e 94 fa 70 	call	0xe1f4	; 0xe1f4 <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cd54:	92 e0       	ldi	r25, 0x02	; 2
    cd56:	e9 2e       	mov	r14, r25
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    cd58:	f1 2c       	mov	r15, r1
    cd5a:	00 e0       	ldi	r16, 0x00	; 0
    cd5c:	10 e0       	ldi	r17, 0x00	; 0
    cd5e:	98 01       	movw	r18, r16
    cd60:	b5 01       	movw	r22, r10
    cd62:	a4 01       	movw	r20, r8
    cd64:	ce 01       	movw	r24, r28
    cd66:	8f 96       	adiw	r24, 0x2f	; 47
    cd68:	0e 94 67 52 	call	0xa4ce	; 0xa4ce <remove_chain>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cd6c:	c3 cf       	rjmp	.-122    	; 0xccf4 <f_mkdir+0x70>
    cd6e:	0e 94 fa 70 	call	0xe1f4	; 0xe1f4 <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cd72:	87 e0       	ldi	r24, 0x07	; 7
    cd74:	e8 2e       	mov	r14, r24
    cd76:	f1 2c       	mov	r15, r1
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cd78:	f0 cf       	rjmp	.-32     	; 0xcd5a <f_mkdir+0xd6>
    cd7a:	0e 94 fa 70 	call	0xe1f4	; 0xe1f4 <get_fattime>
    cd7e:	2b 01       	movw	r4, r22
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    cd80:	3c 01       	movw	r6, r24
    cd82:	b5 01       	movw	r22, r10
    cd84:	a4 01       	movw	r20, r8
    cd86:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd88:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd8a:	0e 94 54 4b 	call	0x96a8	; 0x96a8 <dir_clear>
				if (res == FR_OK) {
    cd8e:	7c 01       	movw	r14, r24
    cd90:	89 2b       	or	r24, r25
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    cd92:	19 f7       	brne	.-58     	; 0xcd5a <f_mkdir+0xd6>
    cd94:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd96:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd98:	4b e0       	ldi	r20, 0x0B	; 11
    cd9a:	50 e0       	ldi	r21, 0x00	; 0
    cd9c:	60 e2       	ldi	r22, 0x20	; 32
    cd9e:	70 e0       	ldi	r23, 0x00	; 0
    cda0:	c5 96       	adiw	r24, 0x35	; 53
    cda2:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <mem_set>
						fs->win[DIR_Name] = '.';
    cda6:	8d ad       	ldd	r24, Y+61	; 0x3d
    cda8:	9e ad       	ldd	r25, Y+62	; 0x3e
    cdaa:	1e e2       	ldi	r17, 0x2E	; 46
    cdac:	fc 01       	movw	r30, r24
						fs->win[DIR_Attr] = AM_DIR;
    cdae:	15 ab       	std	Z+53, r17	; 0x35
    cdb0:	e0 5c       	subi	r30, 0xC0	; 192
    cdb2:	ff 4f       	sbci	r31, 0xFF	; 255
    cdb4:	20 e1       	ldi	r18, 0x10	; 16
						st_dword(fs->win + DIR_ModTime, tm);
    cdb6:	20 83       	st	Z, r18
    cdb8:	b3 01       	movw	r22, r6
    cdba:	a2 01       	movw	r20, r4
    cdbc:	85 5b       	subi	r24, 0xB5	; 181
    cdbe:	9f 4f       	sbci	r25, 0xFF	; 255
    cdc0:	0e 94 36 47 	call	0x8e6c	; 0x8e6c <st_dword>
						st_clust(fs, fs->win, dcl);
    cdc4:	8d ad       	ldd	r24, Y+61	; 0x3d
    cdc6:	9e ad       	ldd	r25, Y+62	; 0x3e
    cdc8:	bc 01       	movw	r22, r24
    cdca:	6b 5c       	subi	r22, 0xCB	; 203
    cdcc:	7f 4f       	sbci	r23, 0xFF	; 255
    cdce:	a5 01       	movw	r20, r10
    cdd0:	94 01       	movw	r18, r8
    cdd2:	0e 94 82 4a 	call	0x9504	; 0x9504 <st_clust.isra.5>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    cdd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    cdd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    cdda:	bc 01       	movw	r22, r24
    cddc:	6b 5c       	subi	r22, 0xCB	; 203
    cdde:	7f 4f       	sbci	r23, 0xFF	; 255
    cde0:	40 e2       	ldi	r20, 0x20	; 32
    cde2:	50 e0       	ldi	r21, 0x00	; 0
    cde4:	8b 5a       	subi	r24, 0xAB	; 171
    cde6:	9f 4f       	sbci	r25, 0xFF	; 255
    cde8:	0e 94 a5 48 	call	0x914a	; 0x914a <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    cdec:	8d ad       	ldd	r24, Y+61	; 0x3d
    cdee:	9e ad       	ldd	r25, Y+62	; 0x3e
    cdf0:	fc 01       	movw	r30, r24
    cdf2:	ea 5a       	subi	r30, 0xAA	; 170
    cdf4:	ff 4f       	sbci	r31, 0xFF	; 255
						st_clust(fs, fs->win + SZDIRE, pcl);
    cdf6:	10 83       	st	Z, r17
    cdf8:	2f 81       	ldd	r18, Y+7	; 0x07
    cdfa:	38 85       	ldd	r19, Y+8	; 0x08
    cdfc:	49 85       	ldd	r20, Y+9	; 0x09
    cdfe:	5a 85       	ldd	r21, Y+10	; 0x0a
    ce00:	bc 01       	movw	r22, r24
    ce02:	6b 5a       	subi	r22, 0xAB	; 171
    ce04:	7f 4f       	sbci	r23, 0xFF	; 255
    ce06:	0e 94 82 4a 	call	0x9504	; 0x9504 <st_clust.isra.5>
						fs->wflag = 1;
    ce0a:	ed ad       	ldd	r30, Y+61	; 0x3d
    ce0c:	fe ad       	ldd	r31, Y+62	; 0x3e
    ce0e:	81 e0       	ldi	r24, 0x01	; 1
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    ce10:	83 83       	std	Z+3, r24	; 0x03
    ce12:	ce 01       	movw	r24, r28
    ce14:	01 96       	adiw	r24, 0x01	; 1
    ce16:	0e 94 38 56 	call	0xac70	; 0xac70 <dir_register>
				}
			}
			if (res == FR_OK) {
    ce1a:	7c 01       	movw	r14, r24
    ce1c:	89 2b       	or	r24, r25
    ce1e:	09 f0       	breq	.+2      	; 0xce22 <f_mkdir+0x19e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    ce20:	9c cf       	rjmp	.-200    	; 0xcd5a <f_mkdir+0xd6>
    ce22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ce24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ce26:	b3 01       	movw	r22, r6
    ce28:	a2 01       	movw	r20, r4
    ce2a:	46 96       	adiw	r24, 0x16	; 22
    ce2c:	0e 94 36 47 	call	0x8e6c	; 0x8e6c <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    ce30:	6b 8d       	ldd	r22, Y+27	; 0x1b
    ce32:	7c 8d       	ldd	r23, Y+28	; 0x1c
    ce34:	a5 01       	movw	r20, r10
    ce36:	94 01       	movw	r18, r8
    ce38:	8d ad       	ldd	r24, Y+61	; 0x3d
    ce3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    ce3c:	0e 94 82 4a 	call	0x9504	; 0x9504 <st_clust.isra.5>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    ce40:	eb 8d       	ldd	r30, Y+27	; 0x1b
    ce42:	fc 8d       	ldd	r31, Y+28	; 0x1c
    ce44:	80 e1       	ldi	r24, 0x10	; 16
					fs->wflag = 1;
    ce46:	83 87       	std	Z+11, r24	; 0x0b
    ce48:	8d ad       	ldd	r24, Y+61	; 0x3d
    ce4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    ce4c:	21 e0       	ldi	r18, 0x01	; 1
    ce4e:	fc 01       	movw	r30, r24
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    ce50:	23 83       	std	Z+3, r18	; 0x03
    ce52:	0e 94 e2 4a 	call	0x95c4	; 0x95c4 <sync_fs>
    ce56:	7c 01       	movw	r14, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    ce58:	4d cf       	rjmp	.-358    	; 0xccf4 <f_mkdir+0x70>
    ce5a:	c0 5c       	subi	r28, 0xC0	; 192
    ce5c:	df 4f       	sbci	r29, 0xFF	; 255
    ce5e:	e0 e1       	ldi	r30, 0x10	; 16
    ce60:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__epilogue_restores__+0x4>

0000ce64 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    ce64:	a2 e8       	ldi	r26, 0x82	; 130
    ce66:	b0 e0       	ldi	r27, 0x00	; 0
    ce68:	e8 e3       	ldi	r30, 0x38	; 56
    ce6a:	f7 e6       	ldi	r31, 0x67	; 103
    ce6c:	0c 94 d8 e2 	jmp	0x1c5b0	; 0x1c5b0 <__prologue_saves__+0x12>
    ce70:	c1 58       	subi	r28, 0x81	; 129
    ce72:	df 4f       	sbci	r29, 0xFF	; 255
    ce74:	99 83       	std	Y+1, r25	; 0x01
    ce76:	88 83       	st	Y, r24
    ce78:	cf 57       	subi	r28, 0x7F	; 127
    ce7a:	d0 40       	sbci	r29, 0x00	; 0
    ce7c:	cf 57       	subi	r28, 0x7F	; 127
    ce7e:	df 4f       	sbci	r29, 0xFF	; 255
    ce80:	79 83       	std	Y+1, r23	; 0x01
    ce82:	68 83       	st	Y, r22
    ce84:	c1 58       	subi	r28, 0x81	; 129
    ce86:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    ce88:	ce 01       	movw	r24, r28
    ce8a:	8f 57       	subi	r24, 0x7F	; 127
    ce8c:	9f 4f       	sbci	r25, 0xFF	; 255
    ce8e:	0e 94 4d 48 	call	0x909a	; 0x909a <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    ce92:	42 e0       	ldi	r20, 0x02	; 2
    ce94:	be 01       	movw	r22, r28
    ce96:	63 58       	subi	r22, 0x83	; 131
    ce98:	7f 4f       	sbci	r23, 0xFF	; 255
    ce9a:	ce 01       	movw	r24, r28
    ce9c:	81 58       	subi	r24, 0x81	; 129
    ce9e:	9f 4f       	sbci	r25, 0xFF	; 255
    cea0:	0e 94 77 4c 	call	0x98ee	; 0x98ee <mount_volume>
	if (res == FR_OK) {
    cea4:	00 97       	sbiw	r24, 0x00	; 0
    cea6:	09 f0       	breq	.+2      	; 0xceaa <f_rename+0x46>
    cea8:	ed c0       	rjmp	.+474    	; 0xd084 <f_rename+0x220>
		djo.obj.fs = fs;
    ceaa:	ef 96       	adiw	r28, 0x3f	; 63
    ceac:	8e ad       	ldd	r24, Y+62	; 0x3e
    ceae:	9f ad       	ldd	r25, Y+63	; 0x3f
    ceb0:	ef 97       	sbiw	r28, 0x3f	; 63
    ceb2:	98 ab       	std	Y+48, r25	; 0x30
    ceb4:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    ceb6:	80 e0       	ldi	r24, 0x00	; 0
    ceb8:	92 e0       	ldi	r25, 0x02	; 2
    ceba:	2b d2       	rcall	.+1110   	; 0xd312 <ff_memalloc>
    cebc:	6c 01       	movw	r12, r24
    cebe:	00 97       	sbiw	r24, 0x00	; 0
    cec0:	f1 f0       	breq	.+60     	; 0xcefe <f_rename+0x9a>
    cec2:	ef 96       	adiw	r28, 0x3f	; 63
    cec4:	ee ad       	ldd	r30, Y+62	; 0x3e
    cec6:	ff ad       	ldd	r31, Y+63	; 0x3f
    cec8:	ef 97       	sbiw	r28, 0x3f	; 63
    ceca:	94 87       	std	Z+12, r25	; 0x0c
    cecc:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    cece:	c1 58       	subi	r28, 0x81	; 129
    ced0:	df 4f       	sbci	r29, 0xFF	; 255
    ced2:	68 81       	ld	r22, Y
    ced4:	79 81       	ldd	r23, Y+1	; 0x01
    ced6:	cf 57       	subi	r28, 0x7F	; 127
    ced8:	d0 40       	sbci	r29, 0x00	; 0
    ceda:	ce 01       	movw	r24, r28
    cedc:	8f 96       	adiw	r24, 0x2f	; 47
    cede:	0e 94 c6 57 	call	0xaf8c	; 0xaf8c <follow_path>
    cee2:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    cee4:	89 2b       	or	r24, r25
    cee6:	39 f4       	brne	.+14     	; 0xcef6 <f_rename+0x92>
    cee8:	67 96       	adiw	r28, 0x17	; 23
    ceea:	8f ad       	ldd	r24, Y+63	; 0x3f
    ceec:	67 97       	sbiw	r28, 0x17	; 23
    ceee:	80 7a       	andi	r24, 0xA0	; 160
    cef0:	49 f0       	breq	.+18     	; 0xcf04 <f_rename+0xa0>
    cef2:	06 e0       	ldi	r16, 0x06	; 6
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    cef4:	10 e0       	ldi	r17, 0x00	; 0
    cef6:	c6 01       	movw	r24, r12
    cef8:	0f d2       	rcall	.+1054   	; 0xd318 <ff_memfree>
    cefa:	c8 01       	movw	r24, r16

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    cefc:	c3 c0       	rjmp	.+390    	; 0xd084 <f_rename+0x220>
    cefe:	81 e1       	ldi	r24, 0x11	; 17
    cf00:	90 e0       	ldi	r25, 0x00	; 0
    cf02:	c0 c0       	rjmp	.+384    	; 0xd084 <f_rename+0x220>
    cf04:	2b 96       	adiw	r28, 0x0b	; 11
    cf06:	6e ad       	ldd	r22, Y+62	; 0x3e
    cf08:	7f ad       	ldd	r23, Y+63	; 0x3f
    cf0a:	2b 97       	sbiw	r28, 0x0b	; 11
    cf0c:	40 e2       	ldi	r20, 0x20	; 32
    cf0e:	50 e0       	ldi	r21, 0x00	; 0
    cf10:	ce 01       	movw	r24, r28
    cf12:	83 5a       	subi	r24, 0xA3	; 163
    cf14:	9f 4f       	sbci	r25, 0xFF	; 255
    cf16:	0e 94 a5 48 	call	0x914a	; 0x914a <mem_cpy.part.0>
    cf1a:	4e e2       	ldi	r20, 0x2E	; 46
    cf1c:	50 e0       	ldi	r21, 0x00	; 0
    cf1e:	be 01       	movw	r22, r28
    cf20:	61 5d       	subi	r22, 0xD1	; 209
    cf22:	7f 4f       	sbci	r23, 0xFF	; 255
    cf24:	ce 01       	movw	r24, r28
    cf26:	01 96       	adiw	r24, 0x01	; 1
    cf28:	0e 94 a5 48 	call	0x914a	; 0x914a <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    cf2c:	cf 57       	subi	r28, 0x7F	; 127
    cf2e:	df 4f       	sbci	r29, 0xFF	; 255
    cf30:	68 81       	ld	r22, Y
    cf32:	79 81       	ldd	r23, Y+1	; 0x01
    cf34:	c1 58       	subi	r28, 0x81	; 129
    cf36:	d0 40       	sbci	r29, 0x00	; 0
    cf38:	ce 01       	movw	r24, r28
    cf3a:	01 96       	adiw	r24, 0x01	; 1
    cf3c:	0e 94 c6 57 	call	0xaf8c	; 0xaf8c <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    cf40:	8c 01       	movw	r16, r24
    cf42:	89 2b       	or	r24, r25
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    cf44:	f9 f4       	brne	.+62     	; 0xcf84 <f_rename+0x120>
    cf46:	4f 81       	ldd	r20, Y+7	; 0x07
    cf48:	58 85       	ldd	r21, Y+8	; 0x08
    cf4a:	69 85       	ldd	r22, Y+9	; 0x09
    cf4c:	7a 85       	ldd	r23, Y+10	; 0x0a
    cf4e:	8d a9       	ldd	r24, Y+53	; 0x35
    cf50:	9e a9       	ldd	r25, Y+54	; 0x36
    cf52:	af a9       	ldd	r26, Y+55	; 0x37
    cf54:	b8 ad       	ldd	r27, Y+56	; 0x38
    cf56:	48 17       	cp	r20, r24
    cf58:	59 07       	cpc	r21, r25
    cf5a:	6a 07       	cpc	r22, r26
    cf5c:	7b 07       	cpc	r23, r27
    cf5e:	09 f0       	breq	.+2      	; 0xcf62 <f_rename+0xfe>
    cf60:	8b c0       	rjmp	.+278    	; 0xd078 <f_rename+0x214>
    cf62:	4f 85       	ldd	r20, Y+15	; 0x0f
    cf64:	58 89       	ldd	r21, Y+16	; 0x10
    cf66:	69 89       	ldd	r22, Y+17	; 0x11
    cf68:	7a 89       	ldd	r23, Y+18	; 0x12
    cf6a:	21 96       	adiw	r28, 0x01	; 1
    cf6c:	8c ad       	ldd	r24, Y+60	; 0x3c
    cf6e:	9d ad       	ldd	r25, Y+61	; 0x3d
    cf70:	ae ad       	ldd	r26, Y+62	; 0x3e
    cf72:	bf ad       	ldd	r27, Y+63	; 0x3f
    cf74:	21 97       	sbiw	r28, 0x01	; 1
    cf76:	48 17       	cp	r20, r24
    cf78:	59 07       	cpc	r21, r25
    cf7a:	6a 07       	cpc	r22, r26
    cf7c:	7b 07       	cpc	r23, r27
    cf7e:	09 f0       	breq	.+2      	; 0xcf82 <f_rename+0x11e>
    cf80:	7b c0       	rjmp	.+246    	; 0xd078 <f_rename+0x214>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    cf82:	04 c0       	rjmp	.+8      	; 0xcf8c <f_rename+0x128>
    cf84:	04 30       	cpi	r16, 0x04	; 4
    cf86:	11 05       	cpc	r17, r1
    cf88:	09 f0       	breq	.+2      	; 0xcf8c <f_rename+0x128>
					res = dir_register(&djn);			/* Register the new entry */
    cf8a:	b5 cf       	rjmp	.-150    	; 0xcef6 <f_rename+0x92>
    cf8c:	ce 01       	movw	r24, r28
    cf8e:	01 96       	adiw	r24, 0x01	; 1
    cf90:	0e 94 38 56 	call	0xac70	; 0xac70 <dir_register>
					if (res == FR_OK) {
    cf94:	8c 01       	movw	r16, r24
    cf96:	89 2b       	or	r24, r25
    cf98:	09 f0       	breq	.+2      	; 0xcf9c <f_rename+0x138>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    cf9a:	ad cf       	rjmp	.-166    	; 0xcef6 <f_rename+0x92>
    cf9c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    cf9e:	1c 8d       	ldd	r17, Y+28	; 0x1c
    cfa0:	6d e5       	ldi	r22, 0x5D	; 93
    cfa2:	70 e0       	ldi	r23, 0x00	; 0
    cfa4:	6c 0f       	add	r22, r28
    cfa6:	7d 1f       	adc	r23, r29
    cfa8:	63 5f       	subi	r22, 0xF3	; 243
    cfaa:	7f 4f       	sbci	r23, 0xFF	; 255
    cfac:	43 e1       	ldi	r20, 0x13	; 19
    cfae:	50 e0       	ldi	r21, 0x00	; 0
    cfb0:	c8 01       	movw	r24, r16
    cfb2:	0d 96       	adiw	r24, 0x0d	; 13
    cfb4:	0e 94 a5 48 	call	0x914a	; 0x914a <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    cfb8:	a9 96       	adiw	r28, 0x29	; 41
    cfba:	8f ad       	ldd	r24, Y+63	; 0x3f
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    cfbc:	a9 97       	sbiw	r28, 0x29	; 41
    cfbe:	84 ff       	sbrs	r24, 4
    cfc0:	80 62       	ori	r24, 0x20	; 32
    cfc2:	f8 01       	movw	r30, r16
						fs->wflag = 1;
    cfc4:	83 87       	std	Z+11, r24	; 0x0b
    cfc6:	ef 96       	adiw	r28, 0x3f	; 63
    cfc8:	ee ac       	ldd	r14, Y+62	; 0x3e
    cfca:	ff ac       	ldd	r15, Y+63	; 0x3f
    cfcc:	ef 97       	sbiw	r28, 0x3f	; 63
    cfce:	bb 24       	eor	r11, r11
    cfd0:	b3 94       	inc	r11
    cfd2:	f7 01       	movw	r30, r14
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    cfd4:	b3 82       	std	Z+3, r11	; 0x03
    cfd6:	f8 01       	movw	r30, r16
    cfd8:	83 85       	ldd	r24, Z+11	; 0x0b
    cfda:	84 ff       	sbrs	r24, 4
    cfdc:	3d c0       	rjmp	.+122    	; 0xd058 <f_rename+0x1f4>
    cfde:	4d a9       	ldd	r20, Y+53	; 0x35
    cfe0:	5e a9       	ldd	r21, Y+54	; 0x36
    cfe2:	6f a9       	ldd	r22, Y+55	; 0x37
    cfe4:	78 ad       	ldd	r23, Y+56	; 0x38
    cfe6:	8f 81       	ldd	r24, Y+7	; 0x07
    cfe8:	98 85       	ldd	r25, Y+8	; 0x08
    cfea:	a9 85       	ldd	r26, Y+9	; 0x09
    cfec:	ba 85       	ldd	r27, Y+10	; 0x0a
    cfee:	48 17       	cp	r20, r24
    cff0:	59 07       	cpc	r21, r25
    cff2:	6a 07       	cpc	r22, r26
    cff4:	7b 07       	cpc	r23, r27
							sect = clst2sect(fs, ld_clust(fs, dir));
    cff6:	81 f1       	breq	.+96     	; 0xd058 <f_rename+0x1f4>
    cff8:	b8 01       	movw	r22, r16
    cffa:	f7 01       	movw	r30, r14
    cffc:	80 81       	ld	r24, Z
    cffe:	0e 94 6d 4a 	call	0x94da	; 0x94da <ld_clust.isra.4>
    d002:	ab 01       	movw	r20, r22
    d004:	bc 01       	movw	r22, r24
    d006:	c7 01       	movw	r24, r14
    d008:	0e 94 da 47 	call	0x8fb4	; 0x8fb4 <clst2sect>
    d00c:	ab 01       	movw	r20, r22
							if (sect == 0) {
    d00e:	bc 01       	movw	r22, r24
    d010:	41 15       	cp	r20, r1
    d012:	51 05       	cpc	r21, r1
    d014:	61 05       	cpc	r22, r1
    d016:	71 05       	cpc	r23, r1
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    d018:	91 f1       	breq	.+100    	; 0xd07e <f_rename+0x21a>
    d01a:	c7 01       	movw	r24, r14
    d01c:	0e 94 fc 4b 	call	0x97f8	; 0x97f8 <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    d020:	8c 01       	movw	r16, r24
    d022:	89 2b       	or	r24, r25
    d024:	09 f0       	breq	.+2      	; 0xd028 <f_rename+0x1c4>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d026:	67 cf       	rjmp	.-306    	; 0xcef6 <f_rename+0x92>
    d028:	ef 96       	adiw	r28, 0x3f	; 63
    d02a:	8e ad       	ldd	r24, Y+62	; 0x3e
    d02c:	9f ad       	ldd	r25, Y+63	; 0x3f
								if (res == FR_OK && dir[1] == '.') {
    d02e:	ef 97       	sbiw	r28, 0x3f	; 63
    d030:	fc 01       	movw	r30, r24
    d032:	ea 5a       	subi	r30, 0xAA	; 170
    d034:	ff 4f       	sbci	r31, 0xFF	; 255
    d036:	20 81       	ld	r18, Z
    d038:	2e 32       	cpi	r18, 0x2E	; 46
									st_clust(fs, dir, djn.obj.sclust);
    d03a:	71 f4       	brne	.+28     	; 0xd058 <f_rename+0x1f4>
    d03c:	2f 81       	ldd	r18, Y+7	; 0x07
    d03e:	38 85       	ldd	r19, Y+8	; 0x08
    d040:	49 85       	ldd	r20, Y+9	; 0x09
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d042:	5a 85       	ldd	r21, Y+10	; 0x0a
    d044:	bc 01       	movw	r22, r24
    d046:	6b 5a       	subi	r22, 0xAB	; 171
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    d048:	7f 4f       	sbci	r23, 0xFF	; 255
    d04a:	0e 94 82 4a 	call	0x9504	; 0x9504 <st_clust.isra.5>
									fs->wflag = 1;
    d04e:	ef 96       	adiw	r28, 0x3f	; 63
    d050:	ee ad       	ldd	r30, Y+62	; 0x3e
    d052:	ff ad       	ldd	r31, Y+63	; 0x3f
    d054:	ef 97       	sbiw	r28, 0x3f	; 63
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    d056:	b3 82       	std	Z+3, r11	; 0x03
    d058:	ce 01       	movw	r24, r28
    d05a:	8f 96       	adiw	r24, 0x2f	; 47
    d05c:	0e 94 e2 54 	call	0xa9c4	; 0xa9c4 <dir_remove>
				if (res == FR_OK) {
    d060:	8c 01       	movw	r16, r24
    d062:	89 2b       	or	r24, r25
    d064:	09 f0       	breq	.+2      	; 0xd068 <f_rename+0x204>
					res = sync_fs(fs);
    d066:	47 cf       	rjmp	.-370    	; 0xcef6 <f_rename+0x92>
    d068:	ef 96       	adiw	r28, 0x3f	; 63
    d06a:	8e ad       	ldd	r24, Y+62	; 0x3e
    d06c:	9f ad       	ldd	r25, Y+63	; 0x3f
    d06e:	ef 97       	sbiw	r28, 0x3f	; 63
    d070:	0e 94 e2 4a 	call	0x95c4	; 0x95c4 <sync_fs>
    d074:	8c 01       	movw	r16, r24
    d076:	3f cf       	rjmp	.-386    	; 0xcef6 <f_rename+0x92>
    d078:	08 e0       	ldi	r16, 0x08	; 8
    d07a:	10 e0       	ldi	r17, 0x00	; 0
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    d07c:	3c cf       	rjmp	.-392    	; 0xcef6 <f_rename+0x92>
    d07e:	02 e0       	ldi	r16, 0x02	; 2
    d080:	10 e0       	ldi	r17, 0x00	; 0
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d082:	39 cf       	rjmp	.-398    	; 0xcef6 <f_rename+0x92>
    d084:	ce 57       	subi	r28, 0x7E	; 126
    d086:	df 4f       	sbci	r29, 0xFF	; 255
    d088:	e9 e0       	ldi	r30, 0x09	; 9
    d08a:	0c 94 f4 e2 	jmp	0x1c5e8	; 0x1c5e8 <__epilogue_restores__+0x12>

0000d08e <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    d08e:	a2 e3       	ldi	r26, 0x32	; 50
    d090:	b0 e0       	ldi	r27, 0x00	; 0
    d092:	ed e4       	ldi	r30, 0x4D	; 77
    d094:	f8 e6       	ldi	r31, 0x68	; 104
    d096:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
    d09a:	9a ab       	std	Y+50, r25	; 0x32
    d09c:	89 ab       	std	Y+49, r24	; 0x31
    d09e:	e6 2e       	mov	r14, r22
    d0a0:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d0a2:	42 e0       	ldi	r20, 0x02	; 2
    d0a4:	be 01       	movw	r22, r28
    d0a6:	61 5d       	subi	r22, 0xD1	; 209
    d0a8:	7f 4f       	sbci	r23, 0xFF	; 255
    d0aa:	ce 01       	movw	r24, r28
    d0ac:	c1 96       	adiw	r24, 0x31	; 49
    d0ae:	0e 94 77 4c 	call	0x98ee	; 0x98ee <mount_volume>
	if (res == FR_OK) {
    d0b2:	00 97       	sbiw	r24, 0x00	; 0
    d0b4:	a9 f5       	brne	.+106    	; 0xd120 <f_chmod+0x92>
		dj.obj.fs = fs;
    d0b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    d0b8:	98 a9       	ldd	r25, Y+48	; 0x30
    d0ba:	9a 83       	std	Y+2, r25	; 0x02
    d0bc:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d0be:	80 e0       	ldi	r24, 0x00	; 0
    d0c0:	92 e0       	ldi	r25, 0x02	; 2
    d0c2:	27 d1       	rcall	.+590    	; 0xd312 <ff_memalloc>
    d0c4:	6c 01       	movw	r12, r24
    d0c6:	00 97       	sbiw	r24, 0x00	; 0
    d0c8:	b1 f0       	breq	.+44     	; 0xd0f6 <f_chmod+0x68>
    d0ca:	ef a5       	ldd	r30, Y+47	; 0x2f
    d0cc:	f8 a9       	ldd	r31, Y+48	; 0x30
    d0ce:	94 87       	std	Z+12, r25	; 0x0c
    d0d0:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d0d2:	69 a9       	ldd	r22, Y+49	; 0x31
    d0d4:	7a a9       	ldd	r23, Y+50	; 0x32
    d0d6:	ce 01       	movw	r24, r28
    d0d8:	01 96       	adiw	r24, 0x01	; 1
    d0da:	0e 94 c6 57 	call	0xaf8c	; 0xaf8c <follow_path>
    d0de:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d0e0:	89 2b       	or	r24, r25
    d0e2:	29 f4       	brne	.+10     	; 0xd0ee <f_chmod+0x60>
    d0e4:	88 a5       	ldd	r24, Y+40	; 0x28
    d0e6:	80 7a       	andi	r24, 0xA0	; 160
    d0e8:	49 f0       	breq	.+18     	; 0xd0fc <f_chmod+0x6e>
    d0ea:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d0ec:	10 e0       	ldi	r17, 0x00	; 0
    d0ee:	c6 01       	movw	r24, r12
    d0f0:	13 d1       	rcall	.+550    	; 0xd318 <ff_memfree>
    d0f2:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d0f4:	15 c0       	rjmp	.+42     	; 0xd120 <f_chmod+0x92>
    d0f6:	81 e1       	ldi	r24, 0x11	; 17
    d0f8:	90 e0       	ldi	r25, 0x00	; 0
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    d0fa:	12 c0       	rjmp	.+36     	; 0xd120 <f_chmod+0x92>
    d0fc:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d0fe:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d100:	83 85       	ldd	r24, Z+11	; 0x0b
    d102:	6e 2d       	mov	r22, r14
    d104:	68 27       	eor	r22, r24
    d106:	6f 21       	and	r22, r15
    d108:	67 72       	andi	r22, 0x27	; 39
    d10a:	68 27       	eor	r22, r24
				fs->wflag = 1;
    d10c:	63 87       	std	Z+11, r22	; 0x0b
    d10e:	8f a5       	ldd	r24, Y+47	; 0x2f
    d110:	98 a9       	ldd	r25, Y+48	; 0x30
    d112:	21 e0       	ldi	r18, 0x01	; 1
    d114:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d116:	23 83       	std	Z+3, r18	; 0x03
    d118:	0e 94 e2 4a 	call	0x95c4	; 0x95c4 <sync_fs>
    d11c:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d11e:	e7 cf       	rjmp	.-50     	; 0xd0ee <f_chmod+0x60>
    d120:	e2 96       	adiw	r28, 0x32	; 50
    d122:	e8 e0       	ldi	r30, 0x08	; 8
    d124:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

0000d128 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    d128:	a2 e3       	ldi	r26, 0x32	; 50
    d12a:	b0 e0       	ldi	r27, 0x00	; 0
    d12c:	ea e9       	ldi	r30, 0x9A	; 154
    d12e:	f8 e6       	ldi	r31, 0x68	; 104
    d130:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
    d134:	9a ab       	std	Y+50, r25	; 0x32
    d136:	89 ab       	std	Y+49, r24	; 0x31
    d138:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d13a:	42 e0       	ldi	r20, 0x02	; 2
    d13c:	be 01       	movw	r22, r28
    d13e:	61 5d       	subi	r22, 0xD1	; 209
    d140:	7f 4f       	sbci	r23, 0xFF	; 255
    d142:	ce 01       	movw	r24, r28
    d144:	c1 96       	adiw	r24, 0x31	; 49
    d146:	0e 94 77 4c 	call	0x98ee	; 0x98ee <mount_volume>
	if (res == FR_OK) {
    d14a:	00 97       	sbiw	r24, 0x00	; 0
    d14c:	09 f0       	breq	.+2      	; 0xd150 <f_utime+0x28>
    d14e:	41 c0       	rjmp	.+130    	; 0xd1d2 <f_utime+0xaa>
		dj.obj.fs = fs;
    d150:	8f a5       	ldd	r24, Y+47	; 0x2f
    d152:	98 a9       	ldd	r25, Y+48	; 0x30
    d154:	9a 83       	std	Y+2, r25	; 0x02
    d156:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d158:	80 e0       	ldi	r24, 0x00	; 0
    d15a:	92 e0       	ldi	r25, 0x02	; 2
    d15c:	da d0       	rcall	.+436    	; 0xd312 <ff_memalloc>
    d15e:	7c 01       	movw	r14, r24
    d160:	00 97       	sbiw	r24, 0x00	; 0
    d162:	b1 f0       	breq	.+44     	; 0xd190 <f_utime+0x68>
    d164:	ef a5       	ldd	r30, Y+47	; 0x2f
    d166:	f8 a9       	ldd	r31, Y+48	; 0x30
    d168:	94 87       	std	Z+12, r25	; 0x0c
    d16a:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d16c:	69 a9       	ldd	r22, Y+49	; 0x31
    d16e:	7a a9       	ldd	r23, Y+50	; 0x32
    d170:	ce 01       	movw	r24, r28
    d172:	01 96       	adiw	r24, 0x01	; 1
    d174:	0e 94 c6 57 	call	0xaf8c	; 0xaf8c <follow_path>
    d178:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d17a:	89 2b       	or	r24, r25
    d17c:	29 f4       	brne	.+10     	; 0xd188 <f_utime+0x60>
    d17e:	88 a5       	ldd	r24, Y+40	; 0x28
    d180:	80 7a       	andi	r24, 0xA0	; 160
    d182:	49 f0       	breq	.+18     	; 0xd196 <f_utime+0x6e>
    d184:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d186:	10 e0       	ldi	r17, 0x00	; 0
    d188:	c7 01       	movw	r24, r14
    d18a:	c6 d0       	rcall	.+396    	; 0xd318 <ff_memfree>
    d18c:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d18e:	21 c0       	rjmp	.+66     	; 0xd1d2 <f_utime+0xaa>
    d190:	81 e1       	ldi	r24, 0x11	; 17
    d192:	90 e0       	ldi	r25, 0x00	; 0
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    d194:	1e c0       	rjmp	.+60     	; 0xd1d2 <f_utime+0xaa>
    d196:	f6 01       	movw	r30, r12
    d198:	44 81       	ldd	r20, Z+4	; 0x04
    d19a:	55 81       	ldd	r21, Z+5	; 0x05
    d19c:	60 e0       	ldi	r22, 0x00	; 0
    d19e:	70 e0       	ldi	r23, 0x00	; 0
    d1a0:	ba 01       	movw	r22, r20
    d1a2:	55 27       	eor	r21, r21
    d1a4:	44 27       	eor	r20, r20
    d1a6:	86 81       	ldd	r24, Z+6	; 0x06
    d1a8:	97 81       	ldd	r25, Z+7	; 0x07
    d1aa:	a0 e0       	ldi	r26, 0x00	; 0
    d1ac:	b0 e0       	ldi	r27, 0x00	; 0
    d1ae:	48 2b       	or	r20, r24
    d1b0:	59 2b       	or	r21, r25
    d1b2:	6a 2b       	or	r22, r26
    d1b4:	7b 2b       	or	r23, r27
    d1b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d1b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d1ba:	46 96       	adiw	r24, 0x16	; 22
    d1bc:	0e 94 36 47 	call	0x8e6c	; 0x8e6c <st_dword>
				fs->wflag = 1;
    d1c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    d1c2:	98 a9       	ldd	r25, Y+48	; 0x30
    d1c4:	21 e0       	ldi	r18, 0x01	; 1
    d1c6:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d1c8:	23 83       	std	Z+3, r18	; 0x03
    d1ca:	0e 94 e2 4a 	call	0x95c4	; 0x95c4 <sync_fs>
    d1ce:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d1d0:	db cf       	rjmp	.-74     	; 0xd188 <f_utime+0x60>
    d1d2:	e2 96       	adiw	r28, 0x32	; 50
    d1d4:	e8 e0       	ldi	r30, 0x08	; 8
    d1d6:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

0000d1da <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d1da:	a2 e3       	ldi	r26, 0x32	; 50
    d1dc:	b0 e0       	ldi	r27, 0x00	; 0
    d1de:	e3 ef       	ldi	r30, 0xF3	; 243
    d1e0:	f8 e6       	ldi	r31, 0x68	; 104
    d1e2:	0c 94 d5 e2 	jmp	0x1c5aa	; 0x1c5aa <__prologue_saves__+0xc>
    d1e6:	9a ab       	std	Y+50, r25	; 0x32
    d1e8:	89 ab       	std	Y+49, r24	; 0x31
    d1ea:	6b 01       	movw	r12, r22
    d1ec:	5a 01       	movw	r10, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d1ee:	40 e0       	ldi	r20, 0x00	; 0
    d1f0:	be 01       	movw	r22, r28
    d1f2:	61 5d       	subi	r22, 0xD1	; 209
    d1f4:	7f 4f       	sbci	r23, 0xFF	; 255
    d1f6:	ce 01       	movw	r24, r28
    d1f8:	c1 96       	adiw	r24, 0x31	; 49
    d1fa:	0e 94 77 4c 	call	0x98ee	; 0x98ee <mount_volume>
    d1fe:	7c 01       	movw	r14, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d200:	89 2b       	or	r24, r25
    d202:	09 f0       	breq	.+2      	; 0xd206 <f_getlabel+0x2c>
    d204:	81 c0       	rjmp	.+258    	; 0xd308 <f_getlabel+0x12e>
    d206:	c1 14       	cp	r12, r1
    d208:	d1 04       	cpc	r13, r1
    d20a:	09 f4       	brne	.+2      	; 0xd20e <f_getlabel+0x34>
    d20c:	53 c0       	rjmp	.+166    	; 0xd2b4 <f_getlabel+0xda>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d20e:	8f a5       	ldd	r24, Y+47	; 0x2f
    d210:	98 a9       	ldd	r25, Y+48	; 0x30
    d212:	9a 83       	std	Y+2, r25	; 0x02
    d214:	89 83       	std	Y+1, r24	; 0x01
    d216:	1f 82       	std	Y+7, r1	; 0x07
    d218:	18 86       	std	Y+8, r1	; 0x08
    d21a:	19 86       	std	Y+9, r1	; 0x09
    d21c:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d21e:	40 e0       	ldi	r20, 0x00	; 0
    d220:	50 e0       	ldi	r21, 0x00	; 0
    d222:	ba 01       	movw	r22, r20
    d224:	ce 01       	movw	r24, r28
    d226:	01 96       	adiw	r24, 0x01	; 1
    d228:	0e 94 80 50 	call	0xa100	; 0xa100 <dir_sdi>
		if (res == FR_OK) {
    d22c:	00 97       	sbiw	r24, 0x00	; 0
    d22e:	e9 f5       	brne	.+122    	; 0xd2aa <f_getlabel+0xd0>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d230:	61 e0       	ldi	r22, 0x01	; 1
    d232:	70 e0       	ldi	r23, 0x00	; 0
    d234:	ce 01       	movw	r24, r28
    d236:	01 96       	adiw	r24, 0x01	; 1
    d238:	0e 94 19 54 	call	0xa832	; 0xa832 <dir_read>
		 	if (res == FR_OK) {
    d23c:	00 97       	sbiw	r24, 0x00	; 0
    d23e:	a9 f5       	brne	.+106    	; 0xd2aa <f_getlabel+0xd0>
    d240:	00 e0       	ldi	r16, 0x00	; 0
    d242:	10 e0       	ldi	r17, 0x00	; 0
    d244:	80 e0       	ldi	r24, 0x00	; 0
    d246:	90 e0       	ldi	r25, 0x00	; 0
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d248:	4c 01       	movw	r8, r24
    d24a:	2f ef       	ldi	r18, 0xFF	; 255
    d24c:	82 1a       	sub	r8, r18
    d24e:	92 0a       	sbc	r9, r18
    d250:	2b 8d       	ldd	r18, Y+27	; 0x1b
    d252:	3c 8d       	ldd	r19, Y+28	; 0x1c
    d254:	f9 01       	movw	r30, r18
    d256:	e8 0f       	add	r30, r24
    d258:	f9 1f       	adc	r31, r25
    d25a:	80 81       	ld	r24, Z
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
    d25c:	65 eb       	ldi	r22, 0xB5	; 181
    d25e:	71 e0       	ldi	r23, 0x01	; 1
    d260:	90 e0       	ldi	r25, 0x00	; 0
    d262:	90 d0       	rcall	.+288    	; 0xd384 <ff_oem2uni>
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d264:	00 97       	sbiw	r24, 0x00	; 0
    d266:	19 f4       	brne	.+6      	; 0xd26e <f_getlabel+0x94>
						if (wc == 0) { di = 0; break; }
    d268:	00 e0       	ldi	r16, 0x00	; 0
    d26a:	10 e0       	ldi	r17, 0x00	; 0
    d26c:	13 c0       	rjmp	.+38     	; 0xd294 <f_getlabel+0xba>
					while (si < 11) {
						wc = dj.dir[si++];
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d26e:	bc 01       	movw	r22, r24
    d270:	80 e0       	ldi	r24, 0x00	; 0
    d272:	90 e0       	ldi	r25, 0x00	; 0
    d274:	24 e0       	ldi	r18, 0x04	; 4
    d276:	30 e0       	ldi	r19, 0x00	; 0
    d278:	a6 01       	movw	r20, r12
    d27a:	40 0f       	add	r20, r16
    d27c:	51 1f       	adc	r21, r17
    d27e:	0e 94 b0 48 	call	0x9160	; 0x9160 <put_utf>
    d282:	90 e0       	ldi	r25, 0x00	; 0
						if (wc == 0) { di = 0; break; }
    d284:	00 97       	sbiw	r24, 0x00	; 0
    d286:	81 f3       	breq	.-32     	; 0xd268 <f_getlabel+0x8e>
						di += wc;
    d288:	08 0f       	add	r16, r24
    d28a:	19 1f       	adc	r17, r25
    d28c:	c4 01       	movw	r24, r8
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d28e:	8b 30       	cpi	r24, 0x0B	; 11
    d290:	91 05       	cpc	r25, r1
    d292:	d1 f6       	brne	.-76     	; 0xd248 <f_getlabel+0x6e>
    d294:	f6 01       	movw	r30, r12
    d296:	e0 0f       	add	r30, r16
    d298:	f1 1f       	adc	r31, r17
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d29a:	10 82       	st	Z, r1
						if (di == 0) break;
    d29c:	ce 16       	cp	r12, r30
    d29e:	df 06       	cpc	r13, r31
    d2a0:	49 f0       	breq	.+18     	; 0xd2b4 <f_getlabel+0xda>
					} while (label[--di] == ' ');
    d2a2:	82 91       	ld	r24, -Z
    d2a4:	80 32       	cpi	r24, 0x20	; 32
    d2a6:	c9 f3       	breq	.-14     	; 0xd29a <f_getlabel+0xc0>
    d2a8:	05 c0       	rjmp	.+10     	; 0xd2b4 <f_getlabel+0xda>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d2aa:	84 30       	cpi	r24, 0x04	; 4
    d2ac:	91 05       	cpc	r25, r1
    d2ae:	59 f5       	brne	.+86     	; 0xd306 <f_getlabel+0x12c>
			label[0] = 0;
    d2b0:	f6 01       	movw	r30, r12
    d2b2:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d2b4:	a1 14       	cp	r10, r1
    d2b6:	b1 04       	cpc	r11, r1
    d2b8:	39 f1       	breq	.+78     	; 0xd308 <f_getlabel+0x12e>
		res = move_window(fs, fs->volbase);
    d2ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    d2bc:	98 a9       	ldd	r25, Y+48	; 0x30
    d2be:	fc 01       	movw	r30, r24
    d2c0:	41 a1       	ldd	r20, Z+33	; 0x21
    d2c2:	52 a1       	ldd	r21, Z+34	; 0x22
    d2c4:	63 a1       	ldd	r22, Z+35	; 0x23
    d2c6:	74 a1       	ldd	r23, Z+36	; 0x24
    d2c8:	0e 94 fc 4b 	call	0x97f8	; 0x97f8 <move_window>
    d2cc:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    d2ce:	89 2b       	or	r24, r25
    d2d0:	d9 f4       	brne	.+54     	; 0xd308 <f_getlabel+0x12e>
			switch (fs->fs_type) {
    d2d2:	ef a5       	ldd	r30, Y+47	; 0x2f
    d2d4:	f8 a9       	ldd	r31, Y+48	; 0x30
    d2d6:	80 81       	ld	r24, Z
    d2d8:	83 30       	cpi	r24, 0x03	; 3
    d2da:	29 f0       	breq	.+10     	; 0xd2e6 <f_getlabel+0x10c>
    d2dc:	84 30       	cpi	r24, 0x04	; 4
    d2de:	31 f0       	breq	.+12     	; 0xd2ec <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d2e0:	87 e2       	ldi	r24, 0x27	; 39
    d2e2:	90 e0       	ldi	r25, 0x00	; 0
    d2e4:	05 c0       	rjmp	.+10     	; 0xd2f0 <f_getlabel+0x116>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d2e6:	83 e4       	ldi	r24, 0x43	; 67
    d2e8:	90 e0       	ldi	r25, 0x00	; 0
    d2ea:	02 c0       	rjmp	.+4      	; 0xd2f0 <f_getlabel+0x116>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d2ec:	84 e6       	ldi	r24, 0x64	; 100
    d2ee:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d2f0:	f5 96       	adiw	r30, 0x35	; 53
    d2f2:	8e 0f       	add	r24, r30
    d2f4:	9f 1f       	adc	r25, r31
    d2f6:	0e 94 21 47 	call	0x8e42	; 0x8e42 <ld_dword>
    d2fa:	f5 01       	movw	r30, r10
    d2fc:	60 83       	st	Z, r22
    d2fe:	71 83       	std	Z+1, r23	; 0x01
    d300:	82 83       	std	Z+2, r24	; 0x02
    d302:	93 83       	std	Z+3, r25	; 0x03
    d304:	01 c0       	rjmp	.+2      	; 0xd308 <f_getlabel+0x12e>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d306:	7c 01       	movw	r14, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d308:	c7 01       	movw	r24, r14
    d30a:	e2 96       	adiw	r28, 0x32	; 50
    d30c:	ec e0       	ldi	r30, 0x0C	; 12
    d30e:	0c 94 f1 e2 	jmp	0x1c5e2	; 0x1c5e2 <__epilogue_restores__+0xc>

0000d312 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d312:	0c 94 b7 28 	jmp	0x516e	; 0x516e <safemalloc>
}
    d316:	08 95       	ret

0000d318 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d318:	0c 94 d9 28 	jmp	0x51b2	; 0x51b2 <safefree>
    d31c:	08 95       	ret

0000d31e <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d31e:	cf 92       	push	r12
    d320:	df 92       	push	r13
    d322:	ef 92       	push	r14
    d324:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d326:	60 38       	cpi	r22, 0x80	; 128
    d328:	71 05       	cpc	r23, r1
    d32a:	81 05       	cpc	r24, r1
    d32c:	91 05       	cpc	r25, r1
    d32e:	10 f4       	brcc	.+4      	; 0xd334 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d330:	cb 01       	movw	r24, r22
    d332:	23 c0       	rjmp	.+70     	; 0xd37a <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d334:	61 15       	cp	r22, r1
    d336:	71 05       	cpc	r23, r1
    d338:	21 e0       	ldi	r18, 0x01	; 1
    d33a:	82 07       	cpc	r24, r18
    d33c:	91 05       	cpc	r25, r1
    d33e:	d8 f4       	brcc	.+54     	; 0xd376 <ff_uni2oem+0x58>
    d340:	45 3b       	cpi	r20, 0xB5	; 181
    d342:	51 40       	sbci	r21, 0x01	; 1
    d344:	c1 f4       	brne	.+48     	; 0xd376 <ff_uni2oem+0x58>
    d346:	e5 e9       	ldi	r30, 0x95	; 149
    d348:	f7 e0       	ldi	r31, 0x07	; 7
    d34a:	20 e0       	ldi	r18, 0x00	; 0
    d34c:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d34e:	c1 90       	ld	r12, Z+
    d350:	d1 90       	ld	r13, Z+
    d352:	e1 2c       	mov	r14, r1
    d354:	f1 2c       	mov	r15, r1
    d356:	6c 15       	cp	r22, r12
    d358:	7d 05       	cpc	r23, r13
    d35a:	8e 05       	cpc	r24, r14
    d35c:	9f 05       	cpc	r25, r15
    d35e:	29 f0       	breq	.+10     	; 0xd36a <ff_uni2oem+0x4c>
    d360:	2f 5f       	subi	r18, 0xFF	; 255
    d362:	3f 4f       	sbci	r19, 0xFF	; 255
    d364:	20 38       	cpi	r18, 0x80	; 128
    d366:	31 05       	cpc	r19, r1
    d368:	91 f7       	brne	.-28     	; 0xd34e <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d36a:	b9 01       	movw	r22, r18
    d36c:	60 58       	subi	r22, 0x80	; 128
    d36e:	7f 4f       	sbci	r23, 0xFF	; 255
    d370:	cb 01       	movw	r24, r22
    d372:	99 27       	eor	r25, r25
    d374:	02 c0       	rjmp	.+4      	; 0xd37a <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d376:	80 e0       	ldi	r24, 0x00	; 0
    d378:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d37a:	ff 90       	pop	r15
    d37c:	ef 90       	pop	r14
    d37e:	df 90       	pop	r13
    d380:	cf 90       	pop	r12
    d382:	08 95       	ret

0000d384 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d384:	80 38       	cpi	r24, 0x80	; 128
    d386:	91 05       	cpc	r25, r1
    d388:	88 f0       	brcs	.+34     	; 0xd3ac <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d38a:	65 3b       	cpi	r22, 0xB5	; 181
    d38c:	71 40       	sbci	r23, 0x01	; 1
    d38e:	61 f4       	brne	.+24     	; 0xd3a8 <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d390:	8f 3f       	cpi	r24, 0xFF	; 255
    d392:	91 05       	cpc	r25, r1
    d394:	09 f0       	breq	.+2      	; 0xd398 <ff_oem2uni+0x14>
    d396:	40 f4       	brcc	.+16     	; 0xd3a8 <ff_oem2uni+0x24>
    d398:	88 0f       	add	r24, r24
    d39a:	99 1f       	adc	r25, r25
    d39c:	fc 01       	movw	r30, r24
    d39e:	eb 56       	subi	r30, 0x6B	; 107
    d3a0:	f9 4f       	sbci	r31, 0xF9	; 249
    d3a2:	80 81       	ld	r24, Z
    d3a4:	91 81       	ldd	r25, Z+1	; 0x01
    d3a6:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d3a8:	80 e0       	ldi	r24, 0x00	; 0
    d3aa:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d3ac:	08 95       	ret

0000d3ae <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d3ae:	61 15       	cp	r22, r1
    d3b0:	71 05       	cpc	r23, r1
    d3b2:	21 e0       	ldi	r18, 0x01	; 1
    d3b4:	82 07       	cpc	r24, r18
    d3b6:	91 05       	cpc	r25, r1
    d3b8:	08 f0       	brcs	.+2      	; 0xd3bc <ff_wtoupper+0xe>
    d3ba:	5a c0       	rjmp	.+180    	; 0xd470 <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d3bc:	61 15       	cp	r22, r1
    d3be:	80 e1       	ldi	r24, 0x10	; 16
    d3c0:	78 07       	cpc	r23, r24
    d3c2:	18 f0       	brcs	.+6      	; 0xd3ca <ff_wtoupper+0x1c>
    d3c4:	a7 ee       	ldi	r26, 0xE7	; 231
    d3c6:	b4 e0       	ldi	r27, 0x04	; 4
    d3c8:	02 c0       	rjmp	.+4      	; 0xd3ce <ff_wtoupper+0x20>
    d3ca:	a3 ea       	ldi	r26, 0xA3	; 163
    d3cc:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    d3ce:	2d 91       	ld	r18, X+
    d3d0:	3c 91       	ld	r19, X
    d3d2:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d3d4:	21 15       	cp	r18, r1
    d3d6:	31 05       	cpc	r19, r1
    d3d8:	09 f4       	brne	.+2      	; 0xd3dc <ff_wtoupper+0x2e>
    d3da:	48 c0       	rjmp	.+144    	; 0xd46c <ff_wtoupper+0xbe>
    d3dc:	62 17       	cp	r22, r18
    d3de:	73 07       	cpc	r23, r19
    d3e0:	08 f4       	brcc	.+2      	; 0xd3e4 <ff_wtoupper+0x36>
    d3e2:	44 c0       	rjmp	.+136    	; 0xd46c <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d3e4:	14 96       	adiw	r26, 0x04	; 4
    d3e6:	fd 01       	movw	r30, r26
    d3e8:	32 97       	sbiw	r30, 0x02	; 2
    d3ea:	80 81       	ld	r24, Z
    d3ec:	91 81       	ldd	r25, Z+1	; 0x01
    d3ee:	e9 2f       	mov	r30, r25
    d3f0:	ff 27       	eor	r31, r31
    d3f2:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d3f4:	a9 01       	movw	r20, r18
    d3f6:	48 0f       	add	r20, r24
    d3f8:	59 1f       	adc	r21, r25
    d3fa:	64 17       	cp	r22, r20
    d3fc:	75 07       	cpc	r23, r21
    d3fe:	70 f5       	brcc	.+92     	; 0xd45c <ff_wtoupper+0xae>
				switch (cmd) {
    d400:	e9 30       	cpi	r30, 0x09	; 9
    d402:	f1 05       	cpc	r31, r1
    d404:	98 f5       	brcc	.+102    	; 0xd46c <ff_wtoupper+0xbe>
    d406:	ec 54       	subi	r30, 0x4C	; 76
    d408:	ff 4f       	sbci	r31, 0xFF	; 255
    d40a:	0c 94 a0 e2 	jmp	0x1c540	; 0x1c540 <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d40e:	62 1b       	sub	r22, r18
    d410:	73 0b       	sbc	r23, r19
    d412:	fb 01       	movw	r30, r22
    d414:	ee 0f       	add	r30, r30
    d416:	ff 1f       	adc	r31, r31
    d418:	ea 0f       	add	r30, r26
    d41a:	fb 1f       	adc	r31, r27
    d41c:	60 81       	ld	r22, Z
    d41e:	71 81       	ldd	r23, Z+1	; 0x01
    d420:	25 c0       	rjmp	.+74     	; 0xd46c <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d422:	cb 01       	movw	r24, r22
    d424:	82 1b       	sub	r24, r18
    d426:	93 0b       	sbc	r25, r19
    d428:	81 70       	andi	r24, 0x01	; 1
    d42a:	99 27       	eor	r25, r25
    d42c:	68 1b       	sub	r22, r24
    d42e:	79 0b       	sbc	r23, r25
    d430:	1d c0       	rjmp	.+58     	; 0xd46c <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d432:	60 51       	subi	r22, 0x10	; 16
    d434:	71 09       	sbc	r23, r1
    d436:	1a c0       	rjmp	.+52     	; 0xd46c <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d438:	60 52       	subi	r22, 0x20	; 32
    d43a:	71 09       	sbc	r23, r1
    d43c:	17 c0       	rjmp	.+46     	; 0xd46c <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d43e:	60 53       	subi	r22, 0x30	; 48
    d440:	71 09       	sbc	r23, r1
    d442:	14 c0       	rjmp	.+40     	; 0xd46c <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d444:	6a 51       	subi	r22, 0x1A	; 26
    d446:	71 09       	sbc	r23, r1
    d448:	11 c0       	rjmp	.+34     	; 0xd46c <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d44a:	68 5f       	subi	r22, 0xF8	; 248
    d44c:	7f 4f       	sbci	r23, 0xFF	; 255
    d44e:	0e c0       	rjmp	.+28     	; 0xd46c <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d450:	60 55       	subi	r22, 0x50	; 80
    d452:	71 09       	sbc	r23, r1
    d454:	0b c0       	rjmp	.+22     	; 0xd46c <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d456:	60 56       	subi	r22, 0x60	; 96
    d458:	7c 41       	sbci	r23, 0x1C	; 28
    d45a:	08 c0       	rjmp	.+16     	; 0xd46c <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d45c:	ef 2b       	or	r30, r31
    d45e:	09 f0       	breq	.+2      	; 0xd462 <ff_wtoupper+0xb4>
    d460:	b6 cf       	rjmp	.-148    	; 0xd3ce <ff_wtoupper+0x20>
    d462:	88 0f       	add	r24, r24
    d464:	99 1f       	adc	r25, r25
    d466:	a8 0f       	add	r26, r24
    d468:	b9 1f       	adc	r27, r25
    d46a:	b1 cf       	rjmp	.-158    	; 0xd3ce <ff_wtoupper+0x20>
		}
		uni = uc;
    d46c:	80 e0       	ldi	r24, 0x00	; 0
    d46e:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d470:	08 95       	ret

0000d472 <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    d472:	81 11       	cpse	r24, r1
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    d474:	02 c0       	rjmp	.+4      	; 0xd47a <disk_status+0x8>
    d476:	a1 c1       	rjmp	.+834    	; 0xd7ba <mmc_disk_status>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    d478:	08 95       	ret
}
    d47a:	81 e0       	ldi	r24, 0x01	; 1
    d47c:	08 95       	ret

0000d47e <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    d47e:	81 11       	cpse	r24, r1
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    d480:	02 c0       	rjmp	.+4      	; 0xd486 <disk_initialize+0x8>
    d482:	f6 c0       	rjmp	.+492    	; 0xd670 <mmc_disk_initialize>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    d484:	08 95       	ret
}
    d486:	81 e0       	ldi	r24, 0x01	; 1
    d488:	08 95       	ret

0000d48a <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    d48a:	0f 93       	push	r16
    d48c:	1f 93       	push	r17
    d48e:	fb 01       	movw	r30, r22
    switch (pdrv)
    d490:	81 11       	cpse	r24, r1
    d492:	06 c0       	rjmp	.+12     	; 0xd4a0 <disk_read+0x16>
    d494:	ba 01       	movw	r22, r20
    d496:	a9 01       	movw	r20, r18
    d498:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    d49a:	98 01       	movw	r18, r16
    d49c:	91 d1       	rcall	.+802    	; 0xd7c0 <mmc_disk_read>
    d49e:	02 c0       	rjmp	.+4      	; 0xd4a4 <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    d4a0:	84 e0       	ldi	r24, 0x04	; 4
    d4a2:	90 e0       	ldi	r25, 0x00	; 0
}
    d4a4:	1f 91       	pop	r17
    d4a6:	0f 91       	pop	r16
    d4a8:	08 95       	ret

0000d4aa <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    d4aa:	0f 93       	push	r16
    d4ac:	1f 93       	push	r17
    d4ae:	fb 01       	movw	r30, r22
    switch (pdrv)
    d4b0:	81 11       	cpse	r24, r1
    d4b2:	06 c0       	rjmp	.+12     	; 0xd4c0 <disk_write+0x16>
    d4b4:	ba 01       	movw	r22, r20
    d4b6:	a9 01       	movw	r20, r18
    d4b8:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    d4ba:	98 01       	movw	r18, r16
    d4bc:	e2 d1       	rcall	.+964    	; 0xd882 <mmc_disk_write>
    d4be:	02 c0       	rjmp	.+4      	; 0xd4c4 <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    d4c0:	84 e0       	ldi	r24, 0x04	; 4
    d4c2:	90 e0       	ldi	r25, 0x00	; 0
}
    d4c4:	1f 91       	pop	r17
    d4c6:	0f 91       	pop	r16
    d4c8:	08 95       	ret

0000d4ca <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d4ca:	96 2f       	mov	r25, r22
    switch (pdrv)
    d4cc:	81 11       	cpse	r24, r1
    d4ce:	04 c0       	rjmp	.+8      	; 0xd4d8 <disk_ioctl+0xe>
    d4d0:	ba 01       	movw	r22, r20
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    d4d2:	89 2f       	mov	r24, r25
    d4d4:	4a c2       	rjmp	.+1172   	; 0xd96a <mmc_disk_ioctl>
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d4d6:	08 95       	ret
    d4d8:	84 e0       	ldi	r24, 0x04	; 4
}
    d4da:	90 e0       	ldi	r25, 0x00	; 0
    d4dc:	08 95       	ret

0000d4de <xchg_spi>:
///@return Data read
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    d4de:	f9 c4       	rjmp	.+2546   	; 0xded2 <mmc_spi_TXRX>
    d4e0:	08 95       	ret

0000d4e2 <deselect>:
    d4e2:	ce d4       	rcall	.+2460   	; 0xde80 <mmc_spi_end>
    d4e4:	8f ef       	ldi	r24, 0xFF	; 255
    d4e6:	fb df       	rcall	.-10     	; 0xd4de <xchg_spi>
    d4e8:	8f ef       	ldi	r24, 0xFF	; 255
    d4ea:	f9 cf       	rjmp	.-14     	; 0xd4de <xchg_spi>
    d4ec:	08 95       	ret

0000d4ee <rcvr_datablock>:
    d4ee:	0f 93       	push	r16
    d4f0:	1f 93       	push	r17
    d4f2:	cf 93       	push	r28
    d4f4:	df 93       	push	r29
    d4f6:	ec 01       	movw	r28, r24
    d4f8:	8b 01       	movw	r16, r22
    d4fa:	88 ee       	ldi	r24, 0xE8	; 232
    d4fc:	93 e0       	ldi	r25, 0x03	; 3
    d4fe:	ec d4       	rcall	.+2520   	; 0xded8 <mmc_set_ms_timeout>
    d500:	8f ef       	ldi	r24, 0xFF	; 255
    d502:	e7 d4       	rcall	.+2510   	; 0xded2 <mmc_spi_TXRX>
    d504:	8f 3f       	cpi	r24, 0xFF	; 255
    d506:	31 f4       	brne	.+12     	; 0xd514 <rcvr_datablock+0x26>
    d508:	ee d4       	rcall	.+2524   	; 0xdee6 <mmc_test_timeout>
    d50a:	89 2b       	or	r24, r25
    d50c:	c9 f3       	breq	.-14     	; 0xd500 <rcvr_datablock+0x12>
    d50e:	80 e0       	ldi	r24, 0x00	; 0
    d510:	90 e0       	ldi	r25, 0x00	; 0
    d512:	0b c0       	rjmp	.+22     	; 0xd52a <rcvr_datablock+0x3c>
    d514:	8e 3f       	cpi	r24, 0xFE	; 254
    d516:	d9 f7       	brne	.-10     	; 0xd50e <rcvr_datablock+0x20>
    d518:	b8 01       	movw	r22, r16
    d51a:	ce 01       	movw	r24, r28
    d51c:	d7 d4       	rcall	.+2478   	; 0xdecc <mmc_spi_RX_buffer>
    d51e:	8f ef       	ldi	r24, 0xFF	; 255
    d520:	de df       	rcall	.-68     	; 0xd4de <xchg_spi>
    d522:	8f ef       	ldi	r24, 0xFF	; 255
    d524:	dc df       	rcall	.-72     	; 0xd4de <xchg_spi>
    d526:	81 e0       	ldi	r24, 0x01	; 1
    d528:	90 e0       	ldi	r25, 0x00	; 0
    d52a:	df 91       	pop	r29
    d52c:	cf 91       	pop	r28
    d52e:	1f 91       	pop	r17
    d530:	0f 91       	pop	r16
    d532:	08 95       	ret

0000d534 <wait_ready>:
    d534:	cf 93       	push	r28
    d536:	d0 d4       	rcall	.+2464   	; 0xded8 <mmc_set_ms_timeout>
    d538:	8f ef       	ldi	r24, 0xFF	; 255
    d53a:	cb d4       	rcall	.+2454   	; 0xded2 <mmc_spi_TXRX>
    d53c:	c8 2f       	mov	r28, r24
    d53e:	8f 3f       	cpi	r24, 0xFF	; 255
    d540:	19 f0       	breq	.+6      	; 0xd548 <wait_ready+0x14>
    d542:	d1 d4       	rcall	.+2466   	; 0xdee6 <mmc_test_timeout>
    d544:	89 2b       	or	r24, r25
    d546:	c1 f3       	breq	.-16     	; 0xd538 <wait_ready+0x4>
    d548:	81 e0       	ldi	r24, 0x01	; 1
    d54a:	90 e0       	ldi	r25, 0x00	; 0
    d54c:	cf 3f       	cpi	r28, 0xFF	; 255
    d54e:	11 f0       	breq	.+4      	; 0xd554 <wait_ready+0x20>
    d550:	80 e0       	ldi	r24, 0x00	; 0
    d552:	90 e0       	ldi	r25, 0x00	; 0
    d554:	cf 91       	pop	r28
    d556:	08 95       	ret

0000d558 <select>:
    d558:	cf 93       	push	r28
    d55a:	df 93       	push	r29
    d55c:	00 d0       	rcall	.+0      	; 0xd55e <select+0x6>
    d55e:	1f 92       	push	r1
    d560:	82 d4       	rcall	.+2308   	; 0xde66 <mmc_spi_begin>
    d562:	8f ef       	ldi	r24, 0xFF	; 255
    d564:	bc df       	rcall	.-136    	; 0xd4de <xchg_spi>
    d566:	88 ee       	ldi	r24, 0xE8	; 232
    d568:	93 e0       	ldi	r25, 0x03	; 3
    d56a:	e4 df       	rcall	.-56     	; 0xd534 <wait_ready>
    d56c:	ec 01       	movw	r28, r24
    d56e:	89 2b       	or	r24, r25
    d570:	61 f4       	brne	.+24     	; 0xd58a <select+0x32>
    d572:	89 ea       	ldi	r24, 0xA9	; 169
    d574:	97 e0       	ldi	r25, 0x07	; 7
    d576:	a0 e0       	ldi	r26, 0x00	; 0
    d578:	ed b7       	in	r30, 0x3d	; 61
    d57a:	fe b7       	in	r31, 0x3e	; 62
    d57c:	81 83       	std	Z+1, r24	; 0x01
    d57e:	92 83       	std	Z+2, r25	; 0x02
    d580:	a3 83       	std	Z+3, r26	; 0x03
    d582:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    d586:	ad df       	rcall	.-166    	; 0xd4e2 <deselect>
    d588:	02 c0       	rjmp	.+4      	; 0xd58e <select+0x36>
    d58a:	c1 e0       	ldi	r28, 0x01	; 1
    d58c:	d0 e0       	ldi	r29, 0x00	; 0
    d58e:	ce 01       	movw	r24, r28
    d590:	cd b7       	in	r28, 0x3d	; 61
    d592:	de b7       	in	r29, 0x3e	; 62
    d594:	23 96       	adiw	r28, 0x03	; 3
    d596:	e2 e0       	ldi	r30, 0x02	; 2
    d598:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

0000d59c <send_cmd>:
    d59c:	ff 92       	push	r15
    d59e:	0f 93       	push	r16
    d5a0:	1f 93       	push	r17
    d5a2:	cf 93       	push	r28
    d5a4:	df 93       	push	r29
    d5a6:	c8 2f       	mov	r28, r24
    d5a8:	d4 2f       	mov	r29, r20
    d5aa:	15 2f       	mov	r17, r21
    d5ac:	06 2f       	mov	r16, r22
    d5ae:	f7 2e       	mov	r15, r23
    d5b0:	87 ff       	sbrs	r24, 7
    d5b2:	08 c0       	rjmp	.+16     	; 0xd5c4 <send_cmd+0x28>
    d5b4:	40 e0       	ldi	r20, 0x00	; 0
    d5b6:	50 e0       	ldi	r21, 0x00	; 0
    d5b8:	ba 01       	movw	r22, r20
    d5ba:	87 e3       	ldi	r24, 0x37	; 55
    d5bc:	ef df       	rcall	.-34     	; 0xd59c <send_cmd>
    d5be:	82 30       	cpi	r24, 0x02	; 2
    d5c0:	58 f5       	brcc	.+86     	; 0xd618 <send_cmd+0x7c>
    d5c2:	cf 77       	andi	r28, 0x7F	; 127
    d5c4:	cc 30       	cpi	r28, 0x0C	; 12
    d5c6:	71 f4       	brne	.+28     	; 0xd5e4 <send_cmd+0x48>
    d5c8:	8c 2f       	mov	r24, r28
    d5ca:	80 64       	ori	r24, 0x40	; 64
    d5cc:	88 df       	rcall	.-240    	; 0xd4de <xchg_spi>
    d5ce:	8f 2d       	mov	r24, r15
    d5d0:	86 df       	rcall	.-244    	; 0xd4de <xchg_spi>
    d5d2:	80 2f       	mov	r24, r16
    d5d4:	84 df       	rcall	.-248    	; 0xd4de <xchg_spi>
    d5d6:	81 2f       	mov	r24, r17
    d5d8:	82 df       	rcall	.-252    	; 0xd4de <xchg_spi>
    d5da:	8d 2f       	mov	r24, r29
    d5dc:	80 df       	rcall	.-256    	; 0xd4de <xchg_spi>
    d5de:	cc 23       	and	r28, r28
    d5e0:	c9 f0       	breq	.+50     	; 0xd614 <send_cmd+0x78>
    d5e2:	06 c0       	rjmp	.+12     	; 0xd5f0 <send_cmd+0x54>
    d5e4:	7e df       	rcall	.-260    	; 0xd4e2 <deselect>
    d5e6:	b8 df       	rcall	.-144    	; 0xd558 <select>
    d5e8:	89 2b       	or	r24, r25
    d5ea:	71 f7       	brne	.-36     	; 0xd5c8 <send_cmd+0x2c>
    d5ec:	8f ef       	ldi	r24, 0xFF	; 255
    d5ee:	14 c0       	rjmp	.+40     	; 0xd618 <send_cmd+0x7c>
    d5f0:	c8 30       	cpi	r28, 0x08	; 8
    d5f2:	11 f4       	brne	.+4      	; 0xd5f8 <send_cmd+0x5c>
    d5f4:	87 e8       	ldi	r24, 0x87	; 135
    d5f6:	01 c0       	rjmp	.+2      	; 0xd5fa <send_cmd+0x5e>
    d5f8:	81 e0       	ldi	r24, 0x01	; 1
    d5fa:	71 df       	rcall	.-286    	; 0xd4de <xchg_spi>
    d5fc:	cc 30       	cpi	r28, 0x0C	; 12
    d5fe:	11 f4       	brne	.+4      	; 0xd604 <send_cmd+0x68>
    d600:	8f ef       	ldi	r24, 0xFF	; 255
    d602:	6d df       	rcall	.-294    	; 0xd4de <xchg_spi>
    d604:	ca e0       	ldi	r28, 0x0A	; 10
    d606:	8f ef       	ldi	r24, 0xFF	; 255
    d608:	64 d4       	rcall	.+2248   	; 0xded2 <mmc_spi_TXRX>
    d60a:	87 ff       	sbrs	r24, 7
    d60c:	05 c0       	rjmp	.+10     	; 0xd618 <send_cmd+0x7c>
    d60e:	c1 50       	subi	r28, 0x01	; 1
    d610:	d1 f7       	brne	.-12     	; 0xd606 <send_cmd+0x6a>
    d612:	02 c0       	rjmp	.+4      	; 0xd618 <send_cmd+0x7c>
    d614:	85 e9       	ldi	r24, 0x95	; 149
    d616:	f5 cf       	rjmp	.-22     	; 0xd602 <send_cmd+0x66>
    d618:	cd b7       	in	r28, 0x3d	; 61
    d61a:	de b7       	in	r29, 0x3e	; 62
    d61c:	e5 e0       	ldi	r30, 0x05	; 5
    d61e:	0c 94 f8 e2 	jmp	0x1c5f0	; 0x1c5f0 <__epilogue_restores__+0x1a>

0000d622 <xmit_datablock>:
    d622:	0f 93       	push	r16
    d624:	1f 93       	push	r17
    d626:	cf 93       	push	r28
    d628:	8c 01       	movw	r16, r24
    d62a:	c6 2f       	mov	r28, r22
    d62c:	88 ee       	ldi	r24, 0xE8	; 232
    d62e:	93 e0       	ldi	r25, 0x03	; 3
    d630:	81 df       	rcall	.-254    	; 0xd534 <wait_ready>
    d632:	00 97       	sbiw	r24, 0x00	; 0
    d634:	c9 f0       	breq	.+50     	; 0xd668 <xmit_datablock+0x46>
    d636:	8c 2f       	mov	r24, r28
    d638:	52 df       	rcall	.-348    	; 0xd4de <xchg_spi>
    d63a:	cd 3f       	cpi	r28, 0xFD	; 253
    d63c:	99 f0       	breq	.+38     	; 0xd664 <xmit_datablock+0x42>
    d63e:	60 e0       	ldi	r22, 0x00	; 0
    d640:	72 e0       	ldi	r23, 0x02	; 2
    d642:	c8 01       	movw	r24, r16
    d644:	40 d4       	rcall	.+2176   	; 0xdec6 <mmc_spi_TX_buffer>
    d646:	8f ef       	ldi	r24, 0xFF	; 255
    d648:	4a df       	rcall	.-364    	; 0xd4de <xchg_spi>
    d64a:	8f ef       	ldi	r24, 0xFF	; 255
    d64c:	48 df       	rcall	.-368    	; 0xd4de <xchg_spi>
    d64e:	8f ef       	ldi	r24, 0xFF	; 255
    d650:	40 d4       	rcall	.+2176   	; 0xded2 <mmc_spi_TXRX>
    d652:	8f 71       	andi	r24, 0x1F	; 31
    d654:	31 e0       	ldi	r19, 0x01	; 1
    d656:	20 e0       	ldi	r18, 0x00	; 0
    d658:	85 30       	cpi	r24, 0x05	; 5
    d65a:	09 f0       	breq	.+2      	; 0xd65e <xmit_datablock+0x3c>
    d65c:	30 e0       	ldi	r19, 0x00	; 0
    d65e:	83 2f       	mov	r24, r19
    d660:	92 2f       	mov	r25, r18
    d662:	02 c0       	rjmp	.+4      	; 0xd668 <xmit_datablock+0x46>
    d664:	81 e0       	ldi	r24, 0x01	; 1
    d666:	90 e0       	ldi	r25, 0x00	; 0
    d668:	cf 91       	pop	r28
    d66a:	1f 91       	pop	r17
    d66c:	0f 91       	pop	r16
    d66e:	08 95       	ret

0000d670 <mmc_disk_initialize>:
    d670:	a4 e0       	ldi	r26, 0x04	; 4
    d672:	b0 e0       	ldi	r27, 0x00	; 0
    d674:	ee e3       	ldi	r30, 0x3E	; 62
    d676:	fb e6       	ldi	r31, 0x6B	; 107
    d678:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
    d67c:	59 d4       	rcall	.+2226   	; 0xdf30 <mmc_power_off>
    d67e:	64 e6       	ldi	r22, 0x64	; 100
    d680:	70 e0       	ldi	r23, 0x00	; 0
    d682:	80 e0       	ldi	r24, 0x00	; 0
    d684:	90 e0       	ldi	r25, 0x00	; 0
    d686:	0e 94 3b 29 	call	0x5276	; 0x5276 <delayms>
    d68a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d68e:	81 fd       	sbrc	r24, 1
    d690:	8e c0       	rjmp	.+284    	; 0xd7ae <mmc_disk_initialize+0x13e>
    d692:	4d d4       	rcall	.+2202   	; 0xdf2e <mmc_power_on>
    d694:	f9 d3       	rcall	.+2034   	; 0xde88 <mmc_slow>
    d696:	1a e0       	ldi	r17, 0x0A	; 10
    d698:	8f ef       	ldi	r24, 0xFF	; 255
    d69a:	21 df       	rcall	.-446    	; 0xd4de <xchg_spi>
    d69c:	11 50       	subi	r17, 0x01	; 1
    d69e:	e1 f7       	brne	.-8      	; 0xd698 <mmc_disk_initialize+0x28>
    d6a0:	40 e0       	ldi	r20, 0x00	; 0
    d6a2:	50 e0       	ldi	r21, 0x00	; 0
    d6a4:	ba 01       	movw	r22, r20
    d6a6:	80 e0       	ldi	r24, 0x00	; 0
    d6a8:	79 df       	rcall	.-270    	; 0xd59c <send_cmd>
    d6aa:	81 30       	cpi	r24, 0x01	; 1
    d6ac:	09 f0       	breq	.+2      	; 0xd6b0 <mmc_disk_initialize+0x40>
    d6ae:	6f c0       	rjmp	.+222    	; 0xd78e <mmc_disk_initialize+0x11e>
    d6b0:	80 ed       	ldi	r24, 0xD0	; 208
    d6b2:	97 e0       	ldi	r25, 0x07	; 7
    d6b4:	11 d4       	rcall	.+2082   	; 0xded8 <mmc_set_ms_timeout>
    d6b6:	4a ea       	ldi	r20, 0xAA	; 170
    d6b8:	51 e0       	ldi	r21, 0x01	; 1
    d6ba:	60 e0       	ldi	r22, 0x00	; 0
    d6bc:	70 e0       	ldi	r23, 0x00	; 0
    d6be:	88 e0       	ldi	r24, 0x08	; 8
    d6c0:	6d df       	rcall	.-294    	; 0xd59c <send_cmd>
    d6c2:	81 30       	cpi	r24, 0x01	; 1
    d6c4:	09 f0       	breq	.+2      	; 0xd6c8 <mmc_disk_initialize+0x58>
    d6c6:	3d c0       	rjmp	.+122    	; 0xd742 <mmc_disk_initialize+0xd2>
    d6c8:	8e 01       	movw	r16, r28
    d6ca:	0f 5f       	subi	r16, 0xFF	; 255
    d6cc:	1f 4f       	sbci	r17, 0xFF	; 255
    d6ce:	6e 01       	movw	r12, r28
    d6d0:	85 e0       	ldi	r24, 0x05	; 5
    d6d2:	c8 0e       	add	r12, r24
    d6d4:	d1 1c       	adc	r13, r1
    d6d6:	78 01       	movw	r14, r16
    d6d8:	8f ef       	ldi	r24, 0xFF	; 255
    d6da:	fb d3       	rcall	.+2038   	; 0xded2 <mmc_spi_TXRX>
    d6dc:	f7 01       	movw	r30, r14
    d6de:	81 93       	st	Z+, r24
    d6e0:	7f 01       	movw	r14, r30
    d6e2:	ce 16       	cp	r12, r30
    d6e4:	df 06       	cpc	r13, r31
    d6e6:	c1 f7       	brne	.-16     	; 0xd6d8 <mmc_disk_initialize+0x68>
    d6e8:	8b 81       	ldd	r24, Y+3	; 0x03
    d6ea:	81 30       	cpi	r24, 0x01	; 1
    d6ec:	09 f0       	breq	.+2      	; 0xd6f0 <mmc_disk_initialize+0x80>
    d6ee:	4f c0       	rjmp	.+158    	; 0xd78e <mmc_disk_initialize+0x11e>
    d6f0:	8c 81       	ldd	r24, Y+4	; 0x04
    d6f2:	8a 3a       	cpi	r24, 0xAA	; 170
    d6f4:	09 f0       	breq	.+2      	; 0xd6f8 <mmc_disk_initialize+0x88>
    d6f6:	4b c0       	rjmp	.+150    	; 0xd78e <mmc_disk_initialize+0x11e>
    d6f8:	f6 d3       	rcall	.+2028   	; 0xdee6 <mmc_test_timeout>
    d6fa:	89 2b       	or	r24, r25
    d6fc:	29 f0       	breq	.+10     	; 0xd708 <mmc_disk_initialize+0x98>
    d6fe:	f3 d3       	rcall	.+2022   	; 0xdee6 <mmc_test_timeout>
    d700:	89 2b       	or	r24, r25
    d702:	09 f0       	breq	.+2      	; 0xd706 <mmc_disk_initialize+0x96>
    d704:	44 c0       	rjmp	.+136    	; 0xd78e <mmc_disk_initialize+0x11e>
    d706:	09 c0       	rjmp	.+18     	; 0xd71a <mmc_disk_initialize+0xaa>
    d708:	40 e0       	ldi	r20, 0x00	; 0
    d70a:	50 e0       	ldi	r21, 0x00	; 0
    d70c:	60 e0       	ldi	r22, 0x00	; 0
    d70e:	70 e4       	ldi	r23, 0x40	; 64
    d710:	89 ea       	ldi	r24, 0xA9	; 169
    d712:	44 df       	rcall	.-376    	; 0xd59c <send_cmd>
    d714:	81 11       	cpse	r24, r1
    d716:	f0 cf       	rjmp	.-32     	; 0xd6f8 <mmc_disk_initialize+0x88>
    d718:	f2 cf       	rjmp	.-28     	; 0xd6fe <mmc_disk_initialize+0x8e>
    d71a:	40 e0       	ldi	r20, 0x00	; 0
    d71c:	50 e0       	ldi	r21, 0x00	; 0
    d71e:	ba 01       	movw	r22, r20
    d720:	8a e3       	ldi	r24, 0x3A	; 58
    d722:	3c df       	rcall	.-392    	; 0xd59c <send_cmd>
    d724:	81 11       	cpse	r24, r1
    d726:	33 c0       	rjmp	.+102    	; 0xd78e <mmc_disk_initialize+0x11e>
    d728:	8f ef       	ldi	r24, 0xFF	; 255
    d72a:	d3 d3       	rcall	.+1958   	; 0xded2 <mmc_spi_TXRX>
    d72c:	f8 01       	movw	r30, r16
    d72e:	81 93       	st	Z+, r24
    d730:	8f 01       	movw	r16, r30
    d732:	ce 16       	cp	r12, r30
    d734:	df 06       	cpc	r13, r31
    d736:	c1 f7       	brne	.-16     	; 0xd728 <mmc_disk_initialize+0xb8>
    d738:	89 81       	ldd	r24, Y+1	; 0x01
    d73a:	86 fd       	sbrc	r24, 6
    d73c:	2a c0       	rjmp	.+84     	; 0xd792 <mmc_disk_initialize+0x122>
    d73e:	14 e0       	ldi	r17, 0x04	; 4
    d740:	29 c0       	rjmp	.+82     	; 0xd794 <mmc_disk_initialize+0x124>
    d742:	80 ed       	ldi	r24, 0xD0	; 208
    d744:	97 e0       	ldi	r25, 0x07	; 7
    d746:	c8 d3       	rcall	.+1936   	; 0xded8 <mmc_set_ms_timeout>
    d748:	40 e0       	ldi	r20, 0x00	; 0
    d74a:	50 e0       	ldi	r21, 0x00	; 0
    d74c:	ba 01       	movw	r22, r20
    d74e:	89 ea       	ldi	r24, 0xA9	; 169
    d750:	25 df       	rcall	.-438    	; 0xd59c <send_cmd>
    d752:	82 30       	cpi	r24, 0x02	; 2
    d754:	18 f0       	brcs	.+6      	; 0xd75c <mmc_disk_initialize+0xec>
    d756:	11 e0       	ldi	r17, 0x01	; 1
    d758:	01 e0       	ldi	r16, 0x01	; 1
    d75a:	02 c0       	rjmp	.+4      	; 0xd760 <mmc_disk_initialize+0xf0>
    d75c:	12 e0       	ldi	r17, 0x02	; 2
    d75e:	09 ea       	ldi	r16, 0xA9	; 169
    d760:	c2 d3       	rcall	.+1924   	; 0xdee6 <mmc_test_timeout>
    d762:	89 2b       	or	r24, r25
    d764:	21 f0       	breq	.+8      	; 0xd76e <mmc_disk_initialize+0xfe>
    d766:	bf d3       	rcall	.+1918   	; 0xdee6 <mmc_test_timeout>
    d768:	89 2b       	or	r24, r25
    d76a:	89 f4       	brne	.+34     	; 0xd78e <mmc_disk_initialize+0x11e>
    d76c:	08 c0       	rjmp	.+16     	; 0xd77e <mmc_disk_initialize+0x10e>
    d76e:	40 e0       	ldi	r20, 0x00	; 0
    d770:	50 e0       	ldi	r21, 0x00	; 0
    d772:	ba 01       	movw	r22, r20
    d774:	80 2f       	mov	r24, r16
    d776:	12 df       	rcall	.-476    	; 0xd59c <send_cmd>
    d778:	81 11       	cpse	r24, r1
    d77a:	f2 cf       	rjmp	.-28     	; 0xd760 <mmc_disk_initialize+0xf0>
    d77c:	f4 cf       	rjmp	.-24     	; 0xd766 <mmc_disk_initialize+0xf6>
    d77e:	40 e0       	ldi	r20, 0x00	; 0
    d780:	52 e0       	ldi	r21, 0x02	; 2
    d782:	60 e0       	ldi	r22, 0x00	; 0
    d784:	70 e0       	ldi	r23, 0x00	; 0
    d786:	80 e1       	ldi	r24, 0x10	; 16
    d788:	09 df       	rcall	.-494    	; 0xd59c <send_cmd>
    d78a:	88 23       	and	r24, r24
    d78c:	19 f0       	breq	.+6      	; 0xd794 <mmc_disk_initialize+0x124>
    d78e:	10 e0       	ldi	r17, 0x00	; 0
    d790:	01 c0       	rjmp	.+2      	; 0xd794 <mmc_disk_initialize+0x124>
    d792:	1c e0       	ldi	r17, 0x0C	; 12
    d794:	10 93 22 18 	sts	0x1822, r17	; 0x801822 <CardType>
    d798:	a4 de       	rcall	.-696    	; 0xd4e2 <deselect>
    d79a:	11 23       	and	r17, r17
    d79c:	39 f0       	breq	.+14     	; 0xd7ac <mmc_disk_initialize+0x13c>
    d79e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d7a2:	8e 7f       	andi	r24, 0xFE	; 254
    d7a4:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    d7a8:	81 d3       	rcall	.+1794   	; 0xdeac <mmc_fast>
    d7aa:	01 c0       	rjmp	.+2      	; 0xd7ae <mmc_disk_initialize+0x13e>
    d7ac:	c1 d3       	rcall	.+1922   	; 0xdf30 <mmc_power_off>
    d7ae:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d7b2:	24 96       	adiw	r28, 0x04	; 4
    d7b4:	e8 e0       	ldi	r30, 0x08	; 8
    d7b6:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

0000d7ba <mmc_disk_status>:
    d7ba:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d7be:	08 95       	ret

0000d7c0 <mmc_disk_read>:
    d7c0:	8f 92       	push	r8
    d7c2:	9f 92       	push	r9
    d7c4:	af 92       	push	r10
    d7c6:	bf 92       	push	r11
    d7c8:	ef 92       	push	r14
    d7ca:	ff 92       	push	r15
    d7cc:	1f 93       	push	r17
    d7ce:	cf 93       	push	r28
    d7d0:	df 93       	push	r29
    d7d2:	7c 01       	movw	r14, r24
    d7d4:	4a 01       	movw	r8, r20
    d7d6:	5b 01       	movw	r10, r22
    d7d8:	e9 01       	movw	r28, r18
    d7da:	20 97       	sbiw	r28, 0x00	; 0
    d7dc:	19 f4       	brne	.+6      	; 0xd7e4 <mmc_disk_read+0x24>
    d7de:	81 de       	rcall	.-766    	; 0xd4e2 <deselect>
    d7e0:	84 e0       	ldi	r24, 0x04	; 4
    d7e2:	0d c0       	rjmp	.+26     	; 0xd7fe <mmc_disk_read+0x3e>
    d7e4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d7e8:	88 23       	and	r24, r24
    d7ea:	19 f0       	breq	.+6      	; 0xd7f2 <mmc_disk_read+0x32>
    d7ec:	81 e0       	ldi	r24, 0x01	; 1
    d7ee:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <set_error>
    d7f2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d7f6:	80 ff       	sbrs	r24, 0
    d7f8:	04 c0       	rjmp	.+8      	; 0xd802 <mmc_disk_read+0x42>
    d7fa:	73 de       	rcall	.-794    	; 0xd4e2 <deselect>
    d7fc:	83 e0       	ldi	r24, 0x03	; 3
    d7fe:	90 e0       	ldi	r25, 0x00	; 0
    d800:	36 c0       	rjmp	.+108    	; 0xd86e <mmc_disk_read+0xae>
    d802:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d806:	81 fd       	sbrc	r24, 1
    d808:	f8 cf       	rjmp	.-16     	; 0xd7fa <mmc_disk_read+0x3a>
    d80a:	46 9a       	sbi	0x08, 6	; 8
    d80c:	3e 9a       	sbi	0x07, 6	; 7
    d80e:	80 91 22 18 	lds	r24, 0x1822	; 0x801822 <CardType>
    d812:	83 fd       	sbrc	r24, 3
    d814:	07 c0       	rjmp	.+14     	; 0xd824 <mmc_disk_read+0x64>
    d816:	89 e0       	ldi	r24, 0x09	; 9
    d818:	88 0c       	add	r8, r8
    d81a:	99 1c       	adc	r9, r9
    d81c:	aa 1c       	adc	r10, r10
    d81e:	bb 1c       	adc	r11, r11
    d820:	8a 95       	dec	r24
    d822:	d1 f7       	brne	.-12     	; 0xd818 <mmc_disk_read+0x58>
    d824:	c2 30       	cpi	r28, 0x02	; 2
    d826:	d1 05       	cpc	r29, r1
    d828:	10 f4       	brcc	.+4      	; 0xd82e <mmc_disk_read+0x6e>
    d82a:	11 e1       	ldi	r17, 0x11	; 17
    d82c:	01 c0       	rjmp	.+2      	; 0xd830 <mmc_disk_read+0x70>
    d82e:	12 e1       	ldi	r17, 0x12	; 18
    d830:	b5 01       	movw	r22, r10
    d832:	a4 01       	movw	r20, r8
    d834:	81 2f       	mov	r24, r17
    d836:	b2 de       	rcall	.-668    	; 0xd59c <send_cmd>
    d838:	81 11       	cpse	r24, r1
    d83a:	11 c0       	rjmp	.+34     	; 0xd85e <mmc_disk_read+0x9e>
    d83c:	60 e0       	ldi	r22, 0x00	; 0
    d83e:	72 e0       	ldi	r23, 0x02	; 2
    d840:	c7 01       	movw	r24, r14
    d842:	55 de       	rcall	.-854    	; 0xd4ee <rcvr_datablock>
    d844:	89 2b       	or	r24, r25
    d846:	21 f0       	breq	.+8      	; 0xd850 <mmc_disk_read+0x90>
    d848:	8e ef       	ldi	r24, 0xFE	; 254
    d84a:	f8 1a       	sub	r15, r24
    d84c:	21 97       	sbiw	r28, 0x01	; 1
    d84e:	b1 f7       	brne	.-20     	; 0xd83c <mmc_disk_read+0x7c>
    d850:	12 31       	cpi	r17, 0x12	; 18
    d852:	29 f4       	brne	.+10     	; 0xd85e <mmc_disk_read+0x9e>
    d854:	40 e0       	ldi	r20, 0x00	; 0
    d856:	50 e0       	ldi	r21, 0x00	; 0
    d858:	ba 01       	movw	r22, r20
    d85a:	8c e0       	ldi	r24, 0x0C	; 12
    d85c:	9f de       	rcall	.-706    	; 0xd59c <send_cmd>
    d85e:	41 de       	rcall	.-894    	; 0xd4e2 <deselect>
    d860:	46 98       	cbi	0x08, 6	; 8
    d862:	3e 9a       	sbi	0x07, 6	; 7
    d864:	81 e0       	ldi	r24, 0x01	; 1
    d866:	90 e0       	ldi	r25, 0x00	; 0
    d868:	cd 2b       	or	r28, r29
    d86a:	09 f4       	brne	.+2      	; 0xd86e <mmc_disk_read+0xae>
    d86c:	80 e0       	ldi	r24, 0x00	; 0
    d86e:	df 91       	pop	r29
    d870:	cf 91       	pop	r28
    d872:	1f 91       	pop	r17
    d874:	ff 90       	pop	r15
    d876:	ef 90       	pop	r14
    d878:	bf 90       	pop	r11
    d87a:	af 90       	pop	r10
    d87c:	9f 90       	pop	r9
    d87e:	8f 90       	pop	r8
    d880:	08 95       	ret

0000d882 <mmc_disk_write>:
    d882:	a0 e0       	ldi	r26, 0x00	; 0
    d884:	b0 e0       	ldi	r27, 0x00	; 0
    d886:	e7 e4       	ldi	r30, 0x47	; 71
    d888:	fc e6       	ldi	r31, 0x6C	; 108
    d88a:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
    d88e:	8c 01       	movw	r16, r24
    d890:	6a 01       	movw	r12, r20
    d892:	7b 01       	movw	r14, r22
    d894:	e9 01       	movw	r28, r18
    d896:	20 97       	sbiw	r28, 0x00	; 0
    d898:	19 f4       	brne	.+6      	; 0xd8a0 <mmc_disk_write+0x1e>
    d89a:	23 de       	rcall	.-954    	; 0xd4e2 <deselect>
    d89c:	84 e0       	ldi	r24, 0x04	; 4
    d89e:	18 c0       	rjmp	.+48     	; 0xd8d0 <mmc_disk_write+0x4e>
    d8a0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d8a4:	88 23       	and	r24, r24
    d8a6:	19 f0       	breq	.+6      	; 0xd8ae <mmc_disk_write+0x2c>
    d8a8:	81 e0       	ldi	r24, 0x01	; 1
    d8aa:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <set_error>
    d8ae:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d8b2:	80 ff       	sbrs	r24, 0
    d8b4:	03 c0       	rjmp	.+6      	; 0xd8bc <mmc_disk_write+0x3a>
    d8b6:	15 de       	rcall	.-982    	; 0xd4e2 <deselect>
    d8b8:	83 e0       	ldi	r24, 0x03	; 3
    d8ba:	0a c0       	rjmp	.+20     	; 0xd8d0 <mmc_disk_write+0x4e>
    d8bc:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d8c0:	81 fd       	sbrc	r24, 1
    d8c2:	f9 cf       	rjmp	.-14     	; 0xd8b6 <mmc_disk_write+0x34>
    d8c4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d8c8:	82 ff       	sbrs	r24, 2
    d8ca:	04 c0       	rjmp	.+8      	; 0xd8d4 <mmc_disk_write+0x52>
    d8cc:	0a de       	rcall	.-1004   	; 0xd4e2 <deselect>
    d8ce:	82 e0       	ldi	r24, 0x02	; 2
    d8d0:	90 e0       	ldi	r25, 0x00	; 0
    d8d2:	46 c0       	rjmp	.+140    	; 0xd960 <mmc_disk_write+0xde>
    d8d4:	46 9a       	sbi	0x08, 6	; 8
    d8d6:	3e 9a       	sbi	0x07, 6	; 7
    d8d8:	80 91 22 18 	lds	r24, 0x1822	; 0x801822 <CardType>
    d8dc:	83 fd       	sbrc	r24, 3
    d8de:	07 c0       	rjmp	.+14     	; 0xd8ee <mmc_disk_write+0x6c>
    d8e0:	99 e0       	ldi	r25, 0x09	; 9
    d8e2:	cc 0c       	add	r12, r12
    d8e4:	dd 1c       	adc	r13, r13
    d8e6:	ee 1c       	adc	r14, r14
    d8e8:	ff 1c       	adc	r15, r15
    d8ea:	9a 95       	dec	r25
    d8ec:	d1 f7       	brne	.-12     	; 0xd8e2 <mmc_disk_write+0x60>
    d8ee:	c1 30       	cpi	r28, 0x01	; 1
    d8f0:	d1 05       	cpc	r29, r1
    d8f2:	89 f4       	brne	.+34     	; 0xd916 <mmc_disk_write+0x94>
    d8f4:	b7 01       	movw	r22, r14
    d8f6:	a6 01       	movw	r20, r12
    d8f8:	88 e1       	ldi	r24, 0x18	; 24
    d8fa:	50 de       	rcall	.-864    	; 0xd59c <send_cmd>
    d8fc:	81 11       	cpse	r24, r1
    d8fe:	26 c0       	rjmp	.+76     	; 0xd94c <mmc_disk_write+0xca>
    d900:	6e ef       	ldi	r22, 0xFE	; 254
    d902:	c8 01       	movw	r24, r16
    d904:	8e de       	rcall	.-740    	; 0xd622 <xmit_datablock>
    d906:	31 e0       	ldi	r19, 0x01	; 1
    d908:	20 e0       	ldi	r18, 0x00	; 0
    d90a:	89 2b       	or	r24, r25
    d90c:	09 f0       	breq	.+2      	; 0xd910 <mmc_disk_write+0x8e>
    d90e:	30 e0       	ldi	r19, 0x00	; 0
    d910:	c3 2f       	mov	r28, r19
    d912:	d2 2f       	mov	r29, r18
    d914:	1d c0       	rjmp	.+58     	; 0xd950 <mmc_disk_write+0xce>
    d916:	86 70       	andi	r24, 0x06	; 6
    d918:	29 f0       	breq	.+10     	; 0xd924 <mmc_disk_write+0xa2>
    d91a:	ae 01       	movw	r20, r28
    d91c:	60 e0       	ldi	r22, 0x00	; 0
    d91e:	70 e0       	ldi	r23, 0x00	; 0
    d920:	87 e9       	ldi	r24, 0x97	; 151
    d922:	3c de       	rcall	.-904    	; 0xd59c <send_cmd>
    d924:	b7 01       	movw	r22, r14
    d926:	a6 01       	movw	r20, r12
    d928:	89 e1       	ldi	r24, 0x19	; 25
    d92a:	38 de       	rcall	.-912    	; 0xd59c <send_cmd>
    d92c:	81 11       	cpse	r24, r1
    d92e:	10 c0       	rjmp	.+32     	; 0xd950 <mmc_disk_write+0xce>
    d930:	6c ef       	ldi	r22, 0xFC	; 252
    d932:	c8 01       	movw	r24, r16
    d934:	76 de       	rcall	.-788    	; 0xd622 <xmit_datablock>
    d936:	89 2b       	or	r24, r25
    d938:	19 f0       	breq	.+6      	; 0xd940 <mmc_disk_write+0xbe>
    d93a:	1e 5f       	subi	r17, 0xFE	; 254
    d93c:	21 97       	sbiw	r28, 0x01	; 1
    d93e:	c1 f7       	brne	.-16     	; 0xd930 <mmc_disk_write+0xae>
    d940:	6d ef       	ldi	r22, 0xFD	; 253
    d942:	80 e0       	ldi	r24, 0x00	; 0
    d944:	90 e0       	ldi	r25, 0x00	; 0
    d946:	6d de       	rcall	.-806    	; 0xd622 <xmit_datablock>
    d948:	89 2b       	or	r24, r25
    d94a:	11 f4       	brne	.+4      	; 0xd950 <mmc_disk_write+0xce>
    d94c:	c1 e0       	ldi	r28, 0x01	; 1
    d94e:	d0 e0       	ldi	r29, 0x00	; 0
    d950:	c8 dd       	rcall	.-1136   	; 0xd4e2 <deselect>
    d952:	46 98       	cbi	0x08, 6	; 8
    d954:	3e 9a       	sbi	0x07, 6	; 7
    d956:	81 e0       	ldi	r24, 0x01	; 1
    d958:	90 e0       	ldi	r25, 0x00	; 0
    d95a:	cd 2b       	or	r28, r29
    d95c:	09 f4       	brne	.+2      	; 0xd960 <mmc_disk_write+0xde>
    d95e:	80 e0       	ldi	r24, 0x00	; 0
    d960:	cd b7       	in	r28, 0x3d	; 61
    d962:	de b7       	in	r29, 0x3e	; 62
    d964:	e8 e0       	ldi	r30, 0x08	; 8
    d966:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

0000d96a <mmc_disk_ioctl>:
    d96a:	a0 e1       	ldi	r26, 0x10	; 16
    d96c:	b0 e0       	ldi	r27, 0x00	; 0
    d96e:	eb eb       	ldi	r30, 0xBB	; 187
    d970:	fc e6       	ldi	r31, 0x6C	; 108
    d972:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
    d976:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d97a:	90 fd       	sbrc	r25, 0
    d97c:	31 c2       	rjmp	.+1122   	; 0xdde0 <mmc_disk_ioctl+0x476>
    d97e:	8b 01       	movw	r16, r22
    d980:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d984:	91 ff       	sbrs	r25, 1
    d986:	02 c0       	rjmp	.+4      	; 0xd98c <mmc_disk_ioctl+0x22>
    d988:	ac dd       	rcall	.-1192   	; 0xd4e2 <deselect>
    d98a:	2a c2       	rjmp	.+1108   	; 0xdde0 <mmc_disk_ioctl+0x476>
    d98c:	83 33       	cpi	r24, 0x33	; 51
    d98e:	09 f4       	brne	.+2      	; 0xd992 <mmc_disk_ioctl+0x28>
    d990:	01 c1       	rjmp	.+514    	; 0xdb94 <mmc_disk_ioctl+0x22a>
    d992:	a0 f4       	brcc	.+40     	; 0xd9bc <mmc_disk_ioctl+0x52>
    d994:	83 30       	cpi	r24, 0x03	; 3
    d996:	09 f4       	brne	.+2      	; 0xd99a <mmc_disk_ioctl+0x30>
    d998:	85 c0       	rjmp	.+266    	; 0xdaa4 <mmc_disk_ioctl+0x13a>
    d99a:	28 f4       	brcc	.+10     	; 0xd9a6 <mmc_disk_ioctl+0x3c>
    d99c:	88 23       	and	r24, r24
    d99e:	11 f1       	breq	.+68     	; 0xd9e4 <mmc_disk_ioctl+0x7a>
    d9a0:	81 30       	cpi	r24, 0x01	; 1
    d9a2:	11 f1       	breq	.+68     	; 0xd9e8 <mmc_disk_ioctl+0x7e>
    d9a4:	1f c2       	rjmp	.+1086   	; 0xdde4 <mmc_disk_ioctl+0x47a>
    d9a6:	87 30       	cpi	r24, 0x07	; 7
    d9a8:	09 f4       	brne	.+2      	; 0xd9ac <mmc_disk_ioctl+0x42>
    d9aa:	2a c1       	rjmp	.+596    	; 0xdc00 <mmc_disk_ioctl+0x296>
    d9ac:	82 33       	cpi	r24, 0x32	; 50
    d9ae:	09 f0       	breq	.+2      	; 0xd9b2 <mmc_disk_ioctl+0x48>
    d9b0:	19 c2       	rjmp	.+1074   	; 0xdde4 <mmc_disk_ioctl+0x47a>
    d9b2:	80 91 22 18 	lds	r24, 0x1822	; 0x801822 <CardType>
    d9b6:	fb 01       	movw	r30, r22
    d9b8:	80 83       	st	Z, r24
    d9ba:	28 c1       	rjmp	.+592    	; 0xdc0c <mmc_disk_ioctl+0x2a2>
    d9bc:	86 33       	cpi	r24, 0x36	; 54
    d9be:	09 f4       	brne	.+2      	; 0xd9c2 <mmc_disk_ioctl+0x58>
    d9c0:	0c c1       	rjmp	.+536    	; 0xdbda <mmc_disk_ioctl+0x270>
    d9c2:	38 f4       	brcc	.+14     	; 0xd9d2 <mmc_disk_ioctl+0x68>
    d9c4:	84 33       	cpi	r24, 0x34	; 52
    d9c6:	09 f4       	brne	.+2      	; 0xd9ca <mmc_disk_ioctl+0x60>
    d9c8:	ea c0       	rjmp	.+468    	; 0xdb9e <mmc_disk_ioctl+0x234>
    d9ca:	85 33       	cpi	r24, 0x35	; 53
    d9cc:	09 f4       	brne	.+2      	; 0xd9d0 <mmc_disk_ioctl+0x66>
    d9ce:	f1 c0       	rjmp	.+482    	; 0xdbb2 <mmc_disk_ioctl+0x248>
    d9d0:	09 c2       	rjmp	.+1042   	; 0xdde4 <mmc_disk_ioctl+0x47a>
    d9d2:	88 33       	cpi	r24, 0x38	; 56
    d9d4:	09 f4       	brne	.+2      	; 0xd9d8 <mmc_disk_ioctl+0x6e>
    d9d6:	74 c1       	rjmp	.+744    	; 0xdcc0 <mmc_disk_ioctl+0x356>
    d9d8:	08 f4       	brcc	.+2      	; 0xd9dc <mmc_disk_ioctl+0x72>
    d9da:	1a c1       	rjmp	.+564    	; 0xdc10 <mmc_disk_ioctl+0x2a6>
    d9dc:	89 33       	cpi	r24, 0x39	; 57
    d9de:	09 f4       	brne	.+2      	; 0xd9e2 <mmc_disk_ioctl+0x78>
    d9e0:	bc c1       	rjmp	.+888    	; 0xdd5a <mmc_disk_ioctl+0x3f0>
    d9e2:	00 c2       	rjmp	.+1024   	; 0xdde4 <mmc_disk_ioctl+0x47a>
    d9e4:	b9 dd       	rcall	.-1166   	; 0xd558 <select>
    d9e6:	06 c1       	rjmp	.+524    	; 0xdbf4 <mmc_disk_ioctl+0x28a>
    d9e8:	40 e0       	ldi	r20, 0x00	; 0
    d9ea:	50 e0       	ldi	r21, 0x00	; 0
    d9ec:	ba 01       	movw	r22, r20
    d9ee:	89 e0       	ldi	r24, 0x09	; 9
    d9f0:	d5 dd       	rcall	.-1110   	; 0xd59c <send_cmd>
    d9f2:	81 11       	cpse	r24, r1
    d9f4:	f1 c1       	rjmp	.+994    	; 0xddd8 <mmc_disk_ioctl+0x46e>
    d9f6:	60 e1       	ldi	r22, 0x10	; 16
    d9f8:	70 e0       	ldi	r23, 0x00	; 0
    d9fa:	ce 01       	movw	r24, r28
    d9fc:	01 96       	adiw	r24, 0x01	; 1
    d9fe:	77 dd       	rcall	.-1298   	; 0xd4ee <rcvr_datablock>
    da00:	89 2b       	or	r24, r25
    da02:	09 f4       	brne	.+2      	; 0xda06 <mmc_disk_ioctl+0x9c>
    da04:	e9 c1       	rjmp	.+978    	; 0xddd8 <mmc_disk_ioctl+0x46e>
    da06:	99 81       	ldd	r25, Y+1	; 0x01
    da08:	92 95       	swap	r25
    da0a:	96 95       	lsr	r25
    da0c:	96 95       	lsr	r25
    da0e:	93 70       	andi	r25, 0x03	; 3
    da10:	29 85       	ldd	r18, Y+9	; 0x09
    da12:	4a 85       	ldd	r20, Y+10	; 0x0a
    da14:	88 85       	ldd	r24, Y+8	; 0x08
    da16:	91 30       	cpi	r25, 0x01	; 1
    da18:	d9 f4       	brne	.+54     	; 0xda50 <mmc_disk_ioctl+0xe6>
    da1a:	30 e0       	ldi	r19, 0x00	; 0
    da1c:	32 2f       	mov	r19, r18
    da1e:	22 27       	eor	r18, r18
    da20:	24 0f       	add	r18, r20
    da22:	31 1d       	adc	r19, r1
    da24:	8f 73       	andi	r24, 0x3F	; 63
    da26:	90 e0       	ldi	r25, 0x00	; 0
    da28:	a0 e0       	ldi	r26, 0x00	; 0
    da2a:	b0 e0       	ldi	r27, 0x00	; 0
    da2c:	dc 01       	movw	r26, r24
    da2e:	99 27       	eor	r25, r25
    da30:	88 27       	eor	r24, r24
    da32:	01 96       	adiw	r24, 0x01	; 1
    da34:	a1 1d       	adc	r26, r1
    da36:	b1 1d       	adc	r27, r1
    da38:	82 0f       	add	r24, r18
    da3a:	93 1f       	adc	r25, r19
    da3c:	a1 1d       	adc	r26, r1
    da3e:	b1 1d       	adc	r27, r1
    da40:	fa e0       	ldi	r31, 0x0A	; 10
    da42:	88 0f       	add	r24, r24
    da44:	99 1f       	adc	r25, r25
    da46:	aa 1f       	adc	r26, r26
    da48:	bb 1f       	adc	r27, r27
    da4a:	fa 95       	dec	r31
    da4c:	d1 f7       	brne	.-12     	; 0xda42 <mmc_disk_ioctl+0xd8>
    da4e:	9b c0       	rjmp	.+310    	; 0xdb86 <mmc_disk_ioctl+0x21c>
    da50:	22 95       	swap	r18
    da52:	26 95       	lsr	r18
    da54:	26 95       	lsr	r18
    da56:	23 70       	andi	r18, 0x03	; 3
    da58:	f4 e0       	ldi	r31, 0x04	; 4
    da5a:	8f 9f       	mul	r24, r31
    da5c:	c0 01       	movw	r24, r0
    da5e:	11 24       	eor	r1, r1
    da60:	82 0f       	add	r24, r18
    da62:	91 1d       	adc	r25, r1
    da64:	01 96       	adiw	r24, 0x01	; 1
    da66:	2f 81       	ldd	r18, Y+7	; 0x07
    da68:	23 70       	andi	r18, 0x03	; 3
    da6a:	30 e0       	ldi	r19, 0x00	; 0
    da6c:	32 2f       	mov	r19, r18
    da6e:	22 27       	eor	r18, r18
    da70:	33 0f       	add	r19, r19
    da72:	33 0f       	add	r19, r19
    da74:	82 0f       	add	r24, r18
    da76:	93 1f       	adc	r25, r19
    da78:	a0 e0       	ldi	r26, 0x00	; 0
    da7a:	b0 e0       	ldi	r27, 0x00	; 0
    da7c:	2e 81       	ldd	r18, Y+6	; 0x06
    da7e:	32 2f       	mov	r19, r18
    da80:	3f 70       	andi	r19, 0x0F	; 15
    da82:	2b 85       	ldd	r18, Y+11	; 0x0b
    da84:	22 1f       	adc	r18, r18
    da86:	22 27       	eor	r18, r18
    da88:	22 1f       	adc	r18, r18
    da8a:	23 0f       	add	r18, r19
    da8c:	43 70       	andi	r20, 0x03	; 3
    da8e:	44 0f       	add	r20, r20
    da90:	42 0f       	add	r20, r18
    da92:	47 50       	subi	r20, 0x07	; 7
    da94:	04 c0       	rjmp	.+8      	; 0xda9e <mmc_disk_ioctl+0x134>
    da96:	88 0f       	add	r24, r24
    da98:	99 1f       	adc	r25, r25
    da9a:	aa 1f       	adc	r26, r26
    da9c:	bb 1f       	adc	r27, r27
    da9e:	4a 95       	dec	r20
    daa0:	d2 f7       	brpl	.-12     	; 0xda96 <mmc_disk_ioctl+0x12c>
    daa2:	71 c0       	rjmp	.+226    	; 0xdb86 <mmc_disk_ioctl+0x21c>
    daa4:	80 91 22 18 	lds	r24, 0x1822	; 0x801822 <CardType>
    daa8:	40 e0       	ldi	r20, 0x00	; 0
    daaa:	50 e0       	ldi	r21, 0x00	; 0
    daac:	ba 01       	movw	r22, r20
    daae:	82 ff       	sbrs	r24, 2
    dab0:	24 c0       	rjmp	.+72     	; 0xdafa <mmc_disk_ioctl+0x190>
    dab2:	8d e8       	ldi	r24, 0x8D	; 141
    dab4:	73 dd       	rcall	.-1306   	; 0xd59c <send_cmd>
    dab6:	81 11       	cpse	r24, r1
    dab8:	8f c1       	rjmp	.+798    	; 0xddd8 <mmc_disk_ioctl+0x46e>
    daba:	8f ef       	ldi	r24, 0xFF	; 255
    dabc:	10 dd       	rcall	.-1504   	; 0xd4de <xchg_spi>
    dabe:	60 e1       	ldi	r22, 0x10	; 16
    dac0:	70 e0       	ldi	r23, 0x00	; 0
    dac2:	ce 01       	movw	r24, r28
    dac4:	01 96       	adiw	r24, 0x01	; 1
    dac6:	13 dd       	rcall	.-1498   	; 0xd4ee <rcvr_datablock>
    dac8:	89 2b       	or	r24, r25
    daca:	09 f4       	brne	.+2      	; 0xdace <mmc_disk_ioctl+0x164>
    dacc:	85 c1       	rjmp	.+778    	; 0xddd8 <mmc_disk_ioctl+0x46e>
    dace:	50 e3       	ldi	r21, 0x30	; 48
    dad0:	f5 2e       	mov	r15, r21
    dad2:	8f ef       	ldi	r24, 0xFF	; 255
    dad4:	04 dd       	rcall	.-1528   	; 0xd4de <xchg_spi>
    dad6:	fa 94       	dec	r15
    dad8:	f1 10       	cpse	r15, r1
    dada:	fb cf       	rjmp	.-10     	; 0xdad2 <mmc_disk_ioctl+0x168>
    dadc:	2b 85       	ldd	r18, Y+11	; 0x0b
    dade:	22 95       	swap	r18
    dae0:	2f 70       	andi	r18, 0x0F	; 15
    dae2:	80 e1       	ldi	r24, 0x10	; 16
    dae4:	90 e0       	ldi	r25, 0x00	; 0
    dae6:	a0 e0       	ldi	r26, 0x00	; 0
    dae8:	b0 e0       	ldi	r27, 0x00	; 0
    daea:	04 c0       	rjmp	.+8      	; 0xdaf4 <mmc_disk_ioctl+0x18a>
    daec:	88 0f       	add	r24, r24
    daee:	99 1f       	adc	r25, r25
    daf0:	aa 1f       	adc	r26, r26
    daf2:	bb 1f       	adc	r27, r27
    daf4:	2a 95       	dec	r18
    daf6:	d2 f7       	brpl	.-12     	; 0xdaec <mmc_disk_ioctl+0x182>
    daf8:	46 c0       	rjmp	.+140    	; 0xdb86 <mmc_disk_ioctl+0x21c>
    dafa:	89 e0       	ldi	r24, 0x09	; 9
    dafc:	4f dd       	rcall	.-1378   	; 0xd59c <send_cmd>
    dafe:	81 11       	cpse	r24, r1
    db00:	6b c1       	rjmp	.+726    	; 0xddd8 <mmc_disk_ioctl+0x46e>
    db02:	60 e1       	ldi	r22, 0x10	; 16
    db04:	70 e0       	ldi	r23, 0x00	; 0
    db06:	ce 01       	movw	r24, r28
    db08:	01 96       	adiw	r24, 0x01	; 1
    db0a:	f1 dc       	rcall	.-1566   	; 0xd4ee <rcvr_datablock>
    db0c:	89 2b       	or	r24, r25
    db0e:	09 f4       	brne	.+2      	; 0xdb12 <mmc_disk_ioctl+0x1a8>
    db10:	63 c1       	rjmp	.+710    	; 0xddd8 <mmc_disk_ioctl+0x46e>
    db12:	90 91 22 18 	lds	r25, 0x1822	; 0x801822 <CardType>
    db16:	2b 85       	ldd	r18, Y+11	; 0x0b
    db18:	8c 85       	ldd	r24, Y+12	; 0x0c
    db1a:	91 ff       	sbrs	r25, 1
    db1c:	16 c0       	rjmp	.+44     	; 0xdb4a <mmc_disk_ioctl+0x1e0>
    db1e:	2f 73       	andi	r18, 0x3F	; 63
    db20:	88 1f       	adc	r24, r24
    db22:	88 27       	eor	r24, r24
    db24:	88 1f       	adc	r24, r24
    db26:	90 e0       	ldi	r25, 0x00	; 0
    db28:	01 96       	adiw	r24, 0x01	; 1
    db2a:	82 0f       	add	r24, r18
    db2c:	91 1d       	adc	r25, r1
    db2e:	82 0f       	add	r24, r18
    db30:	91 1d       	adc	r25, r1
    db32:	2e 85       	ldd	r18, Y+14	; 0x0e
    db34:	22 95       	swap	r18
    db36:	26 95       	lsr	r18
    db38:	26 95       	lsr	r18
    db3a:	23 70       	andi	r18, 0x03	; 3
    db3c:	21 50       	subi	r18, 0x01	; 1
    db3e:	02 c0       	rjmp	.+4      	; 0xdb44 <mmc_disk_ioctl+0x1da>
    db40:	88 0f       	add	r24, r24
    db42:	99 1f       	adc	r25, r25
    db44:	2a 95       	dec	r18
    db46:	e2 f7       	brpl	.-8      	; 0xdb40 <mmc_disk_ioctl+0x1d6>
    db48:	1c c0       	rjmp	.+56     	; 0xdb82 <mmc_disk_ioctl+0x218>
    db4a:	38 2f       	mov	r19, r24
    db4c:	33 70       	andi	r19, 0x03	; 3
    db4e:	82 95       	swap	r24
    db50:	86 95       	lsr	r24
    db52:	87 70       	andi	r24, 0x07	; 7
    db54:	90 e0       	ldi	r25, 0x00	; 0
    db56:	f8 e0       	ldi	r31, 0x08	; 8
    db58:	3f 9f       	mul	r19, r31
    db5a:	80 0d       	add	r24, r0
    db5c:	91 1d       	adc	r25, r1
    db5e:	11 24       	eor	r1, r1
    db60:	01 96       	adiw	r24, 0x01	; 1
    db62:	2c 77       	andi	r18, 0x7C	; 124
    db64:	30 e0       	ldi	r19, 0x00	; 0
    db66:	35 95       	asr	r19
    db68:	27 95       	ror	r18
    db6a:	35 95       	asr	r19
    db6c:	27 95       	ror	r18
    db6e:	2f 5f       	subi	r18, 0xFF	; 255
    db70:	3f 4f       	sbci	r19, 0xFF	; 255
    db72:	82 9f       	mul	r24, r18
    db74:	a0 01       	movw	r20, r0
    db76:	83 9f       	mul	r24, r19
    db78:	50 0d       	add	r21, r0
    db7a:	92 9f       	mul	r25, r18
    db7c:	50 0d       	add	r21, r0
    db7e:	11 24       	eor	r1, r1
    db80:	ca 01       	movw	r24, r20
    db82:	a0 e0       	ldi	r26, 0x00	; 0
    db84:	b0 e0       	ldi	r27, 0x00	; 0
    db86:	f8 01       	movw	r30, r16
    db88:	80 83       	st	Z, r24
    db8a:	91 83       	std	Z+1, r25	; 0x01
    db8c:	a2 83       	std	Z+2, r26	; 0x02
    db8e:	b3 83       	std	Z+3, r27	; 0x03
    db90:	00 e0       	ldi	r16, 0x00	; 0
    db92:	23 c1       	rjmp	.+582    	; 0xddda <mmc_disk_ioctl+0x470>
    db94:	40 e0       	ldi	r20, 0x00	; 0
    db96:	50 e0       	ldi	r21, 0x00	; 0
    db98:	ba 01       	movw	r22, r20
    db9a:	89 e0       	ldi	r24, 0x09	; 9
    db9c:	04 c0       	rjmp	.+8      	; 0xdba6 <mmc_disk_ioctl+0x23c>
    db9e:	40 e0       	ldi	r20, 0x00	; 0
    dba0:	50 e0       	ldi	r21, 0x00	; 0
    dba2:	ba 01       	movw	r22, r20
    dba4:	8a e0       	ldi	r24, 0x0A	; 10
    dba6:	fa dc       	rcall	.-1548   	; 0xd59c <send_cmd>
    dba8:	81 11       	cpse	r24, r1
    dbaa:	16 c1       	rjmp	.+556    	; 0xddd8 <mmc_disk_ioctl+0x46e>
    dbac:	60 e1       	ldi	r22, 0x10	; 16
    dbae:	70 e0       	ldi	r23, 0x00	; 0
    dbb0:	1f c0       	rjmp	.+62     	; 0xdbf0 <mmc_disk_ioctl+0x286>
    dbb2:	40 e0       	ldi	r20, 0x00	; 0
    dbb4:	50 e0       	ldi	r21, 0x00	; 0
    dbb6:	ba 01       	movw	r22, r20
    dbb8:	8a e3       	ldi	r24, 0x3A	; 58
    dbba:	f0 dc       	rcall	.-1568   	; 0xd59c <send_cmd>
    dbbc:	81 11       	cpse	r24, r1
    dbbe:	0c c1       	rjmp	.+536    	; 0xddd8 <mmc_disk_ioctl+0x46e>
    dbc0:	78 01       	movw	r14, r16
    dbc2:	f4 e0       	ldi	r31, 0x04	; 4
    dbc4:	ef 0e       	add	r14, r31
    dbc6:	f1 1c       	adc	r15, r1
    dbc8:	8f ef       	ldi	r24, 0xFF	; 255
    dbca:	83 d1       	rcall	.+774    	; 0xded2 <mmc_spi_TXRX>
    dbcc:	f8 01       	movw	r30, r16
    dbce:	81 93       	st	Z+, r24
    dbd0:	8f 01       	movw	r16, r30
    dbd2:	ee 15       	cp	r30, r14
    dbd4:	ff 05       	cpc	r31, r15
    dbd6:	c1 f7       	brne	.-16     	; 0xdbc8 <mmc_disk_ioctl+0x25e>
    dbd8:	db cf       	rjmp	.-74     	; 0xdb90 <mmc_disk_ioctl+0x226>
    dbda:	40 e0       	ldi	r20, 0x00	; 0
    dbdc:	50 e0       	ldi	r21, 0x00	; 0
    dbde:	ba 01       	movw	r22, r20
    dbe0:	8d e8       	ldi	r24, 0x8D	; 141
    dbe2:	dc dc       	rcall	.-1608   	; 0xd59c <send_cmd>
    dbe4:	81 11       	cpse	r24, r1
    dbe6:	f8 c0       	rjmp	.+496    	; 0xddd8 <mmc_disk_ioctl+0x46e>
    dbe8:	8f ef       	ldi	r24, 0xFF	; 255
    dbea:	79 dc       	rcall	.-1806   	; 0xd4de <xchg_spi>
    dbec:	60 e4       	ldi	r22, 0x40	; 64
    dbee:	70 e0       	ldi	r23, 0x00	; 0
    dbf0:	c8 01       	movw	r24, r16
    dbf2:	7d dc       	rcall	.-1798   	; 0xd4ee <rcvr_datablock>
    dbf4:	01 e0       	ldi	r16, 0x01	; 1
    dbf6:	10 e0       	ldi	r17, 0x00	; 0
    dbf8:	89 2b       	or	r24, r25
    dbfa:	09 f4       	brne	.+2      	; 0xdbfe <mmc_disk_ioctl+0x294>
    dbfc:	ef c0       	rjmp	.+478    	; 0xdddc <mmc_disk_ioctl+0x472>
    dbfe:	ea c0       	rjmp	.+468    	; 0xddd4 <mmc_disk_ioctl+0x46a>
    dc00:	97 d1       	rcall	.+814    	; 0xdf30 <mmc_power_off>
    dc02:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    dc06:	81 60       	ori	r24, 0x01	; 1
    dc08:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    dc0c:	00 e0       	ldi	r16, 0x00	; 0
    dc0e:	eb c0       	rjmp	.+470    	; 0xdde6 <mmc_disk_ioctl+0x47c>
    dc10:	fb 01       	movw	r30, r22
    dc12:	43 81       	ldd	r20, Z+3	; 0x03
    dc14:	54 81       	ldd	r21, Z+4	; 0x04
    dc16:	65 81       	ldd	r22, Z+5	; 0x05
    dc18:	76 81       	ldd	r23, Z+6	; 0x06
    dc1a:	39 e0       	ldi	r19, 0x09	; 9
    dc1c:	44 0f       	add	r20, r20
    dc1e:	55 1f       	adc	r21, r21
    dc20:	66 1f       	adc	r22, r22
    dc22:	77 1f       	adc	r23, r23
    dc24:	3a 95       	dec	r19
    dc26:	d1 f7       	brne	.-12     	; 0xdc1c <mmc_disk_ioctl+0x2b2>
    dc28:	70 68       	ori	r23, 0x80	; 128
    dc2a:	80 81       	ld	r24, Z
    dc2c:	90 e0       	ldi	r25, 0x00	; 0
    dc2e:	a0 e0       	ldi	r26, 0x00	; 0
    dc30:	b0 e0       	ldi	r27, 0x00	; 0
    dc32:	2c e1       	ldi	r18, 0x1C	; 28
    dc34:	88 0f       	add	r24, r24
    dc36:	99 1f       	adc	r25, r25
    dc38:	aa 1f       	adc	r26, r26
    dc3a:	bb 1f       	adc	r27, r27
    dc3c:	2a 95       	dec	r18
    dc3e:	d1 f7       	brne	.-12     	; 0xdc34 <mmc_disk_ioctl+0x2ca>
    dc40:	48 2b       	or	r20, r24
    dc42:	59 2b       	or	r21, r25
    dc44:	6a 2b       	or	r22, r26
    dc46:	7b 2b       	or	r23, r27
    dc48:	81 81       	ldd	r24, Z+1	; 0x01
    dc4a:	92 81       	ldd	r25, Z+2	; 0x02
    dc4c:	01 97       	sbiw	r24, 0x01	; 1
    dc4e:	91 70       	andi	r25, 0x01	; 1
    dc50:	a0 e0       	ldi	r26, 0x00	; 0
    dc52:	b0 e0       	ldi	r27, 0x00	; 0
    dc54:	48 2b       	or	r20, r24
    dc56:	59 2b       	or	r21, r25
    dc58:	6a 2b       	or	r22, r26
    dc5a:	7b 2b       	or	r23, r27
    dc5c:	80 e3       	ldi	r24, 0x30	; 48
    dc5e:	9e dc       	rcall	.-1732   	; 0xd59c <send_cmd>
    dc60:	81 11       	cpse	r24, r1
    dc62:	ba c0       	rjmp	.+372    	; 0xddd8 <mmc_disk_ioctl+0x46e>
    dc64:	88 ee       	ldi	r24, 0xE8	; 232
    dc66:	93 e0       	ldi	r25, 0x03	; 3
    dc68:	37 d1       	rcall	.+622    	; 0xded8 <mmc_set_ms_timeout>
    dc6a:	8f ef       	ldi	r24, 0xFF	; 255
    dc6c:	32 d1       	rcall	.+612    	; 0xded2 <mmc_spi_TXRX>
    dc6e:	8f 3f       	cpi	r24, 0xFF	; 255
    dc70:	21 f4       	brne	.+8      	; 0xdc7a <mmc_disk_ioctl+0x310>
    dc72:	39 d1       	rcall	.+626    	; 0xdee6 <mmc_test_timeout>
    dc74:	89 2b       	or	r24, r25
    dc76:	c9 f3       	breq	.-14     	; 0xdc6a <mmc_disk_ioctl+0x300>
    dc78:	af c0       	rjmp	.+350    	; 0xddd8 <mmc_disk_ioctl+0x46e>
    dc7a:	8e 3f       	cpi	r24, 0xFE	; 254
    dc7c:	09 f0       	breq	.+2      	; 0xdc80 <mmc_disk_ioctl+0x316>
    dc7e:	ac c0       	rjmp	.+344    	; 0xddd8 <mmc_disk_ioctl+0x46e>
    dc80:	f8 01       	movw	r30, r16
    dc82:	e7 80       	ldd	r14, Z+7	; 0x07
    dc84:	f0 84       	ldd	r15, Z+8	; 0x08
    dc86:	c1 80       	ldd	r12, Z+1	; 0x01
    dc88:	d2 80       	ldd	r13, Z+2	; 0x02
    dc8a:	ce 0c       	add	r12, r14
    dc8c:	df 1c       	adc	r13, r15
    dc8e:	ce 14       	cp	r12, r14
    dc90:	df 04       	cpc	r13, r15
    dc92:	31 f0       	breq	.+12     	; 0xdca0 <mmc_disk_ioctl+0x336>
    dc94:	8f ef       	ldi	r24, 0xFF	; 255
    dc96:	1d d1       	rcall	.+570    	; 0xded2 <mmc_spi_TXRX>
    dc98:	f7 01       	movw	r30, r14
    dc9a:	81 93       	st	Z+, r24
    dc9c:	7f 01       	movw	r14, r30
    dc9e:	f7 cf       	rjmp	.-18     	; 0xdc8e <mmc_disk_ioctl+0x324>
    dca0:	f8 01       	movw	r30, r16
    dca2:	81 81       	ldd	r24, Z+1	; 0x01
    dca4:	92 81       	ldd	r25, Z+2	; 0x02
    dca6:	02 e0       	ldi	r16, 0x02	; 2
    dca8:	12 e0       	ldi	r17, 0x02	; 2
    dcaa:	08 1b       	sub	r16, r24
    dcac:	19 0b       	sbc	r17, r25
    dcae:	01 15       	cp	r16, r1
    dcb0:	11 05       	cpc	r17, r1
    dcb2:	09 f4       	brne	.+2      	; 0xdcb6 <mmc_disk_ioctl+0x34c>
    dcb4:	6d cf       	rjmp	.-294    	; 0xdb90 <mmc_disk_ioctl+0x226>
    dcb6:	8f ef       	ldi	r24, 0xFF	; 255
    dcb8:	12 dc       	rcall	.-2012   	; 0xd4de <xchg_spi>
    dcba:	01 50       	subi	r16, 0x01	; 1
    dcbc:	11 09       	sbc	r17, r1
    dcbe:	f7 cf       	rjmp	.-18     	; 0xdcae <mmc_disk_ioctl+0x344>
    dcc0:	fb 01       	movw	r30, r22
    dcc2:	43 81       	ldd	r20, Z+3	; 0x03
    dcc4:	54 81       	ldd	r21, Z+4	; 0x04
    dcc6:	65 81       	ldd	r22, Z+5	; 0x05
    dcc8:	76 81       	ldd	r23, Z+6	; 0x06
    dcca:	39 e0       	ldi	r19, 0x09	; 9
    dccc:	44 0f       	add	r20, r20
    dcce:	55 1f       	adc	r21, r21
    dcd0:	66 1f       	adc	r22, r22
    dcd2:	77 1f       	adc	r23, r23
    dcd4:	3a 95       	dec	r19
    dcd6:	d1 f7       	brne	.-12     	; 0xdccc <mmc_disk_ioctl+0x362>
    dcd8:	70 68       	ori	r23, 0x80	; 128
    dcda:	80 81       	ld	r24, Z
    dcdc:	90 e0       	ldi	r25, 0x00	; 0
    dcde:	a0 e0       	ldi	r26, 0x00	; 0
    dce0:	b0 e0       	ldi	r27, 0x00	; 0
    dce2:	2c e1       	ldi	r18, 0x1C	; 28
    dce4:	88 0f       	add	r24, r24
    dce6:	99 1f       	adc	r25, r25
    dce8:	aa 1f       	adc	r26, r26
    dcea:	bb 1f       	adc	r27, r27
    dcec:	2a 95       	dec	r18
    dcee:	d1 f7       	brne	.-12     	; 0xdce4 <mmc_disk_ioctl+0x37a>
    dcf0:	48 2b       	or	r20, r24
    dcf2:	59 2b       	or	r21, r25
    dcf4:	6a 2b       	or	r22, r26
    dcf6:	7b 2b       	or	r23, r27
    dcf8:	81 81       	ldd	r24, Z+1	; 0x01
    dcfa:	92 81       	ldd	r25, Z+2	; 0x02
    dcfc:	01 97       	sbiw	r24, 0x01	; 1
    dcfe:	91 70       	andi	r25, 0x01	; 1
    dd00:	a0 e0       	ldi	r26, 0x00	; 0
    dd02:	b0 e0       	ldi	r27, 0x00	; 0
    dd04:	48 2b       	or	r20, r24
    dd06:	59 2b       	or	r21, r25
    dd08:	6a 2b       	or	r22, r26
    dd0a:	7b 2b       	or	r23, r27
    dd0c:	81 e3       	ldi	r24, 0x31	; 49
    dd0e:	46 dc       	rcall	.-1908   	; 0xd59c <send_cmd>
    dd10:	81 11       	cpse	r24, r1
    dd12:	62 c0       	rjmp	.+196    	; 0xddd8 <mmc_disk_ioctl+0x46e>
    dd14:	8f ef       	ldi	r24, 0xFF	; 255
    dd16:	e3 db       	rcall	.-2106   	; 0xd4de <xchg_spi>
    dd18:	8e ef       	ldi	r24, 0xFE	; 254
    dd1a:	e1 db       	rcall	.-2110   	; 0xd4de <xchg_spi>
    dd1c:	f8 01       	movw	r30, r16
    dd1e:	e7 80       	ldd	r14, Z+7	; 0x07
    dd20:	f0 84       	ldd	r15, Z+8	; 0x08
    dd22:	c1 80       	ldd	r12, Z+1	; 0x01
    dd24:	d2 80       	ldd	r13, Z+2	; 0x02
    dd26:	ce 0c       	add	r12, r14
    dd28:	df 1c       	adc	r13, r15
    dd2a:	ec 14       	cp	r14, r12
    dd2c:	fd 04       	cpc	r15, r13
    dd2e:	29 f0       	breq	.+10     	; 0xdd3a <mmc_disk_ioctl+0x3d0>
    dd30:	f7 01       	movw	r30, r14
    dd32:	81 91       	ld	r24, Z+
    dd34:	7f 01       	movw	r14, r30
    dd36:	d3 db       	rcall	.-2138   	; 0xd4de <xchg_spi>
    dd38:	f8 cf       	rjmp	.-16     	; 0xdd2a <mmc_disk_ioctl+0x3c0>
    dd3a:	f8 01       	movw	r30, r16
    dd3c:	81 81       	ldd	r24, Z+1	; 0x01
    dd3e:	92 81       	ldd	r25, Z+2	; 0x02
    dd40:	02 e0       	ldi	r16, 0x02	; 2
    dd42:	12 e0       	ldi	r17, 0x02	; 2
    dd44:	08 1b       	sub	r16, r24
    dd46:	19 0b       	sbc	r17, r25
    dd48:	8f ef       	ldi	r24, 0xFF	; 255
    dd4a:	01 15       	cp	r16, r1
    dd4c:	11 05       	cpc	r17, r1
    dd4e:	09 f4       	brne	.+2      	; 0xdd52 <mmc_disk_ioctl+0x3e8>
    dd50:	3b c0       	rjmp	.+118    	; 0xddc8 <mmc_disk_ioctl+0x45e>
    dd52:	c5 db       	rcall	.-2166   	; 0xd4de <xchg_spi>
    dd54:	01 50       	subi	r16, 0x01	; 1
    dd56:	11 09       	sbc	r17, r1
    dd58:	f7 cf       	rjmp	.-18     	; 0xdd48 <mmc_disk_ioctl+0x3de>
    dd5a:	fb 01       	movw	r30, r22
    dd5c:	43 81       	ldd	r20, Z+3	; 0x03
    dd5e:	54 81       	ldd	r21, Z+4	; 0x04
    dd60:	65 81       	ldd	r22, Z+5	; 0x05
    dd62:	76 81       	ldd	r23, Z+6	; 0x06
    dd64:	89 e0       	ldi	r24, 0x09	; 9
    dd66:	44 0f       	add	r20, r20
    dd68:	55 1f       	adc	r21, r21
    dd6a:	66 1f       	adc	r22, r22
    dd6c:	77 1f       	adc	r23, r23
    dd6e:	8a 95       	dec	r24
    dd70:	d1 f7       	brne	.-12     	; 0xdd66 <mmc_disk_ioctl+0x3fc>
    dd72:	74 68       	ori	r23, 0x84	; 132
    dd74:	80 81       	ld	r24, Z
    dd76:	90 e0       	ldi	r25, 0x00	; 0
    dd78:	a0 e0       	ldi	r26, 0x00	; 0
    dd7a:	b0 e0       	ldi	r27, 0x00	; 0
    dd7c:	2c e1       	ldi	r18, 0x1C	; 28
    dd7e:	88 0f       	add	r24, r24
    dd80:	99 1f       	adc	r25, r25
    dd82:	aa 1f       	adc	r26, r26
    dd84:	bb 1f       	adc	r27, r27
    dd86:	2a 95       	dec	r18
    dd88:	d1 f7       	brne	.-12     	; 0xdd7e <mmc_disk_ioctl+0x414>
    dd8a:	48 2b       	or	r20, r24
    dd8c:	59 2b       	or	r21, r25
    dd8e:	6a 2b       	or	r22, r26
    dd90:	7b 2b       	or	r23, r27
    dd92:	82 81       	ldd	r24, Z+2	; 0x02
    dd94:	90 e0       	ldi	r25, 0x00	; 0
    dd96:	a0 e0       	ldi	r26, 0x00	; 0
    dd98:	b0 e0       	ldi	r27, 0x00	; 0
    dd9a:	48 2b       	or	r20, r24
    dd9c:	59 2b       	or	r21, r25
    dd9e:	6a 2b       	or	r22, r26
    dda0:	7b 2b       	or	r23, r27
    dda2:	81 e3       	ldi	r24, 0x31	; 49
    dda4:	fb db       	rcall	.-2058   	; 0xd59c <send_cmd>
    dda6:	81 11       	cpse	r24, r1
    dda8:	17 c0       	rjmp	.+46     	; 0xddd8 <mmc_disk_ioctl+0x46e>
    ddaa:	8f ef       	ldi	r24, 0xFF	; 255
    ddac:	98 db       	rcall	.-2256   	; 0xd4de <xchg_spi>
    ddae:	8e ef       	ldi	r24, 0xFE	; 254
    ddb0:	96 db       	rcall	.-2260   	; 0xd4de <xchg_spi>
    ddb2:	f8 01       	movw	r30, r16
    ddb4:	81 81       	ldd	r24, Z+1	; 0x01
    ddb6:	93 db       	rcall	.-2266   	; 0xd4de <xchg_spi>
    ddb8:	01 e0       	ldi	r16, 0x01	; 1
    ddba:	12 e0       	ldi	r17, 0x02	; 2
    ddbc:	8f ef       	ldi	r24, 0xFF	; 255
    ddbe:	8f db       	rcall	.-2274   	; 0xd4de <xchg_spi>
    ddc0:	01 50       	subi	r16, 0x01	; 1
    ddc2:	11 09       	sbc	r17, r1
    ddc4:	d9 f7       	brne	.-10     	; 0xddbc <mmc_disk_ioctl+0x452>
    ddc6:	8f ef       	ldi	r24, 0xFF	; 255
    ddc8:	84 d0       	rcall	.+264    	; 0xded2 <mmc_spi_TXRX>
    ddca:	8f 71       	andi	r24, 0x1F	; 31
    ddcc:	01 e0       	ldi	r16, 0x01	; 1
    ddce:	10 e0       	ldi	r17, 0x00	; 0
    ddd0:	85 30       	cpi	r24, 0x05	; 5
    ddd2:	21 f4       	brne	.+8      	; 0xdddc <mmc_disk_ioctl+0x472>
    ddd4:	00 e0       	ldi	r16, 0x00	; 0
    ddd6:	02 c0       	rjmp	.+4      	; 0xdddc <mmc_disk_ioctl+0x472>
    ddd8:	01 e0       	ldi	r16, 0x01	; 1
    ddda:	10 e0       	ldi	r17, 0x00	; 0
    dddc:	82 db       	rcall	.-2300   	; 0xd4e2 <deselect>
    ddde:	04 c0       	rjmp	.+8      	; 0xdde8 <mmc_disk_ioctl+0x47e>
    dde0:	03 e0       	ldi	r16, 0x03	; 3
    dde2:	01 c0       	rjmp	.+2      	; 0xdde6 <mmc_disk_ioctl+0x47c>
    dde4:	04 e0       	ldi	r16, 0x04	; 4
    dde6:	10 e0       	ldi	r17, 0x00	; 0
    dde8:	c8 01       	movw	r24, r16
    ddea:	60 96       	adiw	r28, 0x10	; 16
    ddec:	e8 e0       	ldi	r30, 0x08	; 8
    ddee:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

0000ddf2 <mmc_disk_timerproc>:
    ddf2:	cf 93       	push	r28
    ddf4:	80 91 24 18 	lds	r24, 0x1824	; 0x801824 <Timer1>
    ddf8:	88 23       	and	r24, r24
    ddfa:	19 f0       	breq	.+6      	; 0xde02 <mmc_disk_timerproc+0x10>
    ddfc:	81 50       	subi	r24, 0x01	; 1
    ddfe:	80 93 24 18 	sts	0x1824, r24	; 0x801824 <Timer1>
    de02:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <Timer2>
    de06:	88 23       	and	r24, r24
    de08:	19 f0       	breq	.+6      	; 0xde10 <mmc_disk_timerproc+0x1e>
    de0a:	81 50       	subi	r24, 0x01	; 1
    de0c:	80 93 23 18 	sts	0x1823, r24	; 0x801823 <Timer2>
    de10:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
    de14:	8e d0       	rcall	.+284    	; 0xdf32 <mmc_ins_status>
    de16:	89 2b       	or	r24, r25
    de18:	11 f0       	breq	.+4      	; 0xde1e <mmc_disk_timerproc+0x2c>
    de1a:	cd 7f       	andi	r28, 0xFD	; 253
    de1c:	04 c0       	rjmp	.+8      	; 0xde26 <mmc_disk_timerproc+0x34>
    de1e:	c3 60       	ori	r28, 0x03	; 3
    de20:	81 e0       	ldi	r24, 0x01	; 1
    de22:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <set_error>
    de26:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
    de2a:	cf 91       	pop	r28
    de2c:	08 95       	ret

0000de2e <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    de2e:	00 d0       	rcall	.+0      	; 0xde30 <mmc_install_timer+0x2>
    de30:	1f 92       	push	r1
    de32:	10 92 2e 18 	sts	0x182E, r1	; 0x80182e <_mmc_timeout+0x1>
    de36:	10 92 2d 18 	sts	0x182D, r1	; 0x80182d <_mmc_timeout>
    de3a:	61 e0       	ldi	r22, 0x01	; 1
    de3c:	70 e0       	ldi	r23, 0x00	; 0
    de3e:	86 ea       	ldi	r24, 0xA6	; 166
    de40:	9f e6       	ldi	r25, 0x6F	; 111
    de42:	0e 94 e6 34 	call	0x69cc	; 0x69cc <set_timers>
    de46:	01 96       	adiw	r24, 0x01	; 1
    de48:	51 f4       	brne	.+20     	; 0xde5e <mmc_install_timer+0x30>
    de4a:	87 e6       	ldi	r24, 0x67	; 103
    de4c:	98 e0       	ldi	r25, 0x08	; 8
    de4e:	a0 e0       	ldi	r26, 0x00	; 0
    de50:	ed b7       	in	r30, 0x3d	; 61
    de52:	fe b7       	in	r31, 0x3e	; 62
    de54:	81 83       	std	Z+1, r24	; 0x01
    de56:	92 83       	std	Z+2, r25	; 0x02
    de58:	a3 83       	std	Z+3, r26	; 0x03
    de5a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    de5e:	0f 90       	pop	r0
    de60:	0f 90       	pop	r0
    de62:	0f 90       	pop	r0
    de64:	08 95       	ret

0000de66 <mmc_spi_begin>:
    de66:	60 91 29 18 	lds	r22, 0x1829	; 0x801829 <_mmc_clock>
    de6a:	70 91 2a 18 	lds	r23, 0x182A	; 0x80182a <_mmc_clock+0x1>
    de6e:	80 91 2b 18 	lds	r24, 0x182B	; 0x80182b <_mmc_clock+0x2>
    de72:	90 91 2c 18 	lds	r25, 0x182C	; 0x80182c <_mmc_clock+0x3>
    de76:	4b e0       	ldi	r20, 0x0B	; 11
    de78:	50 e0       	ldi	r21, 0x00	; 0
    de7a:	0c 94 82 27 	jmp	0x4f04	; 0x4f04 <spi_begin>
    de7e:	08 95       	ret

0000de80 <mmc_spi_end>:
    de80:	8b e0       	ldi	r24, 0x0B	; 11
    de82:	0c 94 1e 27 	jmp	0x4e3c	; 0x4e3c <spi_end>
    de86:	08 95       	ret

0000de88 <mmc_slow>:
    de88:	80 e2       	ldi	r24, 0x20	; 32
    de8a:	91 ea       	ldi	r25, 0xA1	; 161
    de8c:	a7 e0       	ldi	r26, 0x07	; 7
    de8e:	b0 e0       	ldi	r27, 0x00	; 0
    de90:	80 93 29 18 	sts	0x1829, r24	; 0x801829 <_mmc_clock>
    de94:	90 93 2a 18 	sts	0x182A, r25	; 0x80182a <_mmc_clock+0x1>
    de98:	a0 93 2b 18 	sts	0x182B, r26	; 0x80182b <_mmc_clock+0x2>
    de9c:	b0 93 2c 18 	sts	0x182C, r27	; 0x80182c <_mmc_clock+0x3>
    dea0:	08 95       	ret

0000dea2 <mmc_spi_init>:
    dea2:	8b e0       	ldi	r24, 0x0B	; 11
    dea4:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <chip_select_init>
    dea8:	ef cf       	rjmp	.-34     	; 0xde88 <mmc_slow>
    deaa:	08 95       	ret

0000deac <mmc_fast>:
    deac:	80 ea       	ldi	r24, 0xA0	; 160
    deae:	95 e2       	ldi	r25, 0x25	; 37
    deb0:	a6 e2       	ldi	r26, 0x26	; 38
    deb2:	b0 e0       	ldi	r27, 0x00	; 0
    deb4:	80 93 29 18 	sts	0x1829, r24	; 0x801829 <_mmc_clock>
    deb8:	90 93 2a 18 	sts	0x182A, r25	; 0x80182a <_mmc_clock+0x1>
    debc:	a0 93 2b 18 	sts	0x182B, r26	; 0x80182b <_mmc_clock+0x2>
    dec0:	b0 93 2c 18 	sts	0x182C, r27	; 0x80182c <_mmc_clock+0x3>
    dec4:	08 95       	ret

0000dec6 <mmc_spi_TX_buffer>:
    dec6:	0c 94 4e 27 	jmp	0x4e9c	; 0x4e9c <spi_TX_buffer>
    deca:	08 95       	ret

0000decc <mmc_spi_RX_buffer>:
    decc:	0c 94 50 27 	jmp	0x4ea0	; 0x4ea0 <spi_RX_buffer>
    ded0:	08 95       	ret

0000ded2 <mmc_spi_TXRX>:
    ded2:	0c 94 ca 27 	jmp	0x4f94	; 0x4f94 <spi_TXRX>
    ded6:	08 95       	ret

0000ded8 <mmc_set_ms_timeout>:
    ded8:	f8 94       	cli
    deda:	90 93 2e 18 	sts	0x182E, r25	; 0x80182e <_mmc_timeout+0x1>
    dede:	80 93 2d 18 	sts	0x182D, r24	; 0x80182d <_mmc_timeout>
    dee2:	78 94       	sei
    dee4:	08 95       	ret

0000dee6 <mmc_test_timeout>:
    dee6:	00 d0       	rcall	.+0      	; 0xdee8 <mmc_test_timeout+0x2>
    dee8:	1f 92       	push	r1
    deea:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    deee:	81 fd       	sbrc	r24, 1
    def0:	15 c0       	rjmp	.+42     	; 0xdf1c <mmc_test_timeout+0x36>
    def2:	80 91 2d 18 	lds	r24, 0x182D	; 0x80182d <_mmc_timeout>
    def6:	90 91 2e 18 	lds	r25, 0x182E	; 0x80182e <_mmc_timeout+0x1>
    defa:	89 2b       	or	r24, r25
    defc:	91 f4       	brne	.+36     	; 0xdf22 <mmc_test_timeout+0x3c>
    defe:	8a e5       	ldi	r24, 0x5A	; 90
    df00:	98 e0       	ldi	r25, 0x08	; 8
    df02:	a0 e0       	ldi	r26, 0x00	; 0
    df04:	ed b7       	in	r30, 0x3d	; 61
    df06:	fe b7       	in	r31, 0x3e	; 62
    df08:	81 83       	std	Z+1, r24	; 0x01
    df0a:	92 83       	std	Z+2, r25	; 0x02
    df0c:	a3 83       	std	Z+3, r26	; 0x03
    df0e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    df12:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    df16:	83 60       	ori	r24, 0x03	; 3
    df18:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    df1c:	81 e0       	ldi	r24, 0x01	; 1
    df1e:	90 e0       	ldi	r25, 0x00	; 0
    df20:	02 c0       	rjmp	.+4      	; 0xdf26 <mmc_test_timeout+0x40>
    df22:	80 e0       	ldi	r24, 0x00	; 0
    df24:	90 e0       	ldi	r25, 0x00	; 0
    df26:	0f 90       	pop	r0
    df28:	0f 90       	pop	r0
    df2a:	0f 90       	pop	r0
    df2c:	08 95       	ret

0000df2e <mmc_power_on>:
    df2e:	08 95       	ret

0000df30 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    df30:	08 95       	ret

0000df32 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    df32:	3f 98       	cbi	0x07, 7	; 7
    df34:	86 b1       	in	r24, 0x06	; 6
    df36:	08 2e       	mov	r0, r24
    df38:	00 0c       	add	r0, r0
    df3a:	99 0b       	sbc	r25, r25
    df3c:	80 95       	com	r24
    df3e:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    df40:	89 2f       	mov	r24, r25
    df42:	88 1f       	adc	r24, r24
    df44:	88 27       	eor	r24, r24
    df46:	88 1f       	adc	r24, r24
    df48:	90 e0       	ldi	r25, 0x00	; 0
    df4a:	08 95       	ret

0000df4c <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    df4c:	80 91 2d 18 	lds	r24, 0x182D	; 0x80182d <_mmc_timeout>
    df50:	90 91 2e 18 	lds	r25, 0x182E	; 0x80182e <_mmc_timeout+0x1>
    df54:	00 97       	sbiw	r24, 0x00	; 0
    df56:	29 f0       	breq	.+10     	; 0xdf62 <mmc_task+0x16>
        _mmc_timeout--;
    df58:	01 97       	sbiw	r24, 0x01	; 1
    df5a:	90 93 2e 18 	sts	0x182E, r25	; 0x80182e <_mmc_timeout+0x1>
    df5e:	80 93 2d 18 	sts	0x182D, r24	; 0x80182d <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    df62:	80 91 27 18 	lds	r24, 0x1827	; 0x801827 <_mmc_pre>
    df66:	90 91 28 18 	lds	r25, 0x1828	; 0x801828 <_mmc_pre+0x1>
    df6a:	8a 30       	cpi	r24, 0x0A	; 10
    df6c:	91 05       	cpc	r25, r1
    df6e:	30 f4       	brcc	.+12     	; 0xdf7c <mmc_task+0x30>
    df70:	01 96       	adiw	r24, 0x01	; 1
    df72:	90 93 28 18 	sts	0x1828, r25	; 0x801828 <_mmc_pre+0x1>
    df76:	80 93 27 18 	sts	0x1827, r24	; 0x801827 <_mmc_pre>
    df7a:	08 95       	ret
        return;

    _mmc_pre = 0;
    df7c:	10 92 28 18 	sts	0x1828, r1	; 0x801828 <_mmc_pre+0x1>
    df80:	10 92 27 18 	sts	0x1827, r1	; 0x801827 <_mmc_pre>

	if(!mmc_ins_status())
    df84:	d6 df       	rcall	.-84     	; 0xdf32 <mmc_ins_status>
    df86:	89 2b       	or	r24, r25
		set_error(1);
    df88:	19 f4       	brne	.+6      	; 0xdf90 <mmc_task+0x44>
    df8a:	81 e0       	ldi	r24, 0x01	; 1

    mmc_disk_timerproc();
    df8c:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <set_error>
    df90:	30 cf       	rjmp	.-416    	; 0xddf2 <mmc_disk_timerproc>
    df92:	08 95       	ret

0000df94 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    df94:	ab e0       	ldi	r26, 0x0B	; 11
    df96:	b0 e0       	ldi	r27, 0x00	; 0
    df98:	e0 ed       	ldi	r30, 0xD0	; 208
    df9a:	ff e6       	ldi	r31, 0x6F	; 111
    df9c:	0c 94 db e2 	jmp	0x1c5b6	; 0x1c5b6 <__prologue_saves__+0x18>
    dfa0:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    dfa2:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    dfa6:	0e 94 e0 27 	call	0x4fc0	; 0x4fc0 <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    dfaa:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);

    mmc_spi_init();
    dfac:	3f 98       	cbi	0x07, 7	; 7

    if( verbose)
    dfae:	79 df       	rcall	.-270    	; 0xdea2 <mmc_spi_init>
    dfb0:	e1 14       	cp	r14, r1
    dfb2:	f1 04       	cpc	r15, r1
    {
        printf("START MMC INIT\n");
    dfb4:	51 f0       	breq	.+20     	; 0xdfca <mmc_init+0x36>
    dfb6:	8a e4       	ldi	r24, 0x4A	; 74
    dfb8:	98 e0       	ldi	r25, 0x08	; 8
    dfba:	a0 e0       	ldi	r26, 0x00	; 0
    dfbc:	ed b7       	in	r30, 0x3d	; 61
    dfbe:	fe b7       	in	r31, 0x3e	; 62
    dfc0:	81 83       	std	Z+1, r24	; 0x01
    dfc2:	92 83       	std	Z+2, r25	; 0x02
    dfc4:	a3 83       	std	Z+3, r26	; 0x03
    dfc6:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    dfca:	80 91 25 18 	lds	r24, 0x1825	; 0x801825 <mmc_init_flag>
    dfce:	90 91 26 18 	lds	r25, 0x1826	; 0x801826 <mmc_init_flag+0x1>
        mmc_install_timer();

	if(!mmc_ins_status())
    dfd2:	89 2b       	or	r24, r25
    dfd4:	09 f4       	brne	.+2      	; 0xdfd8 <mmc_init+0x44>
    dfd6:	2b df       	rcall	.-426    	; 0xde2e <mmc_install_timer>
    dfd8:	ac df       	rcall	.-168    	; 0xdf32 <mmc_ins_status>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    dfda:	89 2b       	or	r24, r25
    dfdc:	61 f4       	brne	.+24     	; 0xdff6 <mmc_init+0x62>
    dfde:	8a e2       	ldi	r24, 0x2A	; 42
    dfe0:	98 e0       	ldi	r25, 0x08	; 8
    dfe2:	a0 e0       	ldi	r26, 0x00	; 0
    dfe4:	ed b7       	in	r30, 0x3d	; 61
    dfe6:	fe b7       	in	r31, 0x3e	; 62
    dfe8:	81 83       	std	Z+1, r24	; 0x01
    dfea:	92 83       	std	Z+2, r25	; 0x02
    dfec:	a3 83       	std	Z+3, r26	; 0x03
		return(RES_NOTRDY);	
    dfee:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
	}


    if( verbose)
    dff2:	83 e0       	ldi	r24, 0x03	; 3
    dff4:	8b c0       	rjmp	.+278    	; 0xe10c <mmc_init+0x178>
    dff6:	e1 14       	cp	r14, r1
    {
		printf("MMC Card Inserted\n");
    dff8:	f1 04       	cpc	r15, r1
    dffa:	11 f1       	breq	.+68     	; 0xe040 <mmc_init+0xac>
    dffc:	87 e1       	ldi	r24, 0x17	; 23
    dffe:	98 e0       	ldi	r25, 0x08	; 8
    e000:	a0 e0       	ldi	r26, 0x00	; 0
    e002:	ed b7       	in	r30, 0x3d	; 61
    e004:	fe b7       	in	r31, 0x3e	; 62
    e006:	81 83       	std	Z+1, r24	; 0x01
    e008:	92 83       	std	Z+2, r25	; 0x02
    e00a:	a3 83       	std	Z+3, r26	; 0x03

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    e00c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    e010:	8b e0       	ldi	r24, 0x0B	; 11
    e012:	98 e0       	ldi	r25, 0x08	; 8
    e014:	a0 e0       	ldi	r26, 0x00	; 0
    e016:	ed b7       	in	r30, 0x3d	; 61
    e018:	fe b7       	in	r31, 0x3e	; 62
    e01a:	81 83       	std	Z+1, r24	; 0x01
    e01c:	92 83       	std	Z+2, r25	; 0x02
    e01e:	a3 83       	std	Z+3, r26	; 0x03
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    e020:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    e024:	85 eb       	ldi	r24, 0xB5	; 181
    e026:	91 e0       	ldi	r25, 0x01	; 1
    e028:	ed b7       	in	r30, 0x3d	; 61
    e02a:	fe b7       	in	r31, 0x3e	; 62
    e02c:	95 83       	std	Z+5, r25	; 0x05
    e02e:	84 83       	std	Z+4, r24	; 0x04
    e030:	8a ef       	ldi	r24, 0xFA	; 250
    e032:	97 e0       	ldi	r25, 0x07	; 7
    e034:	a0 e0       	ldi	r26, 0x00	; 0
    e036:	81 83       	std	Z+1, r24	; 0x01
    e038:	92 83       	std	Z+2, r25	; 0x02
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    e03a:	a3 83       	std	Z+3, r26	; 0x03
    e03c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    e040:	80 e0       	ldi	r24, 0x00	; 0

    if( rc != RES_OK  )
    e042:	1d da       	rcall	.-3014   	; 0xd47e <disk_initialize>
    e044:	08 2f       	mov	r16, r24
        put_rc(rc);
    e046:	10 e0       	ldi	r17, 0x00	; 0
    e048:	01 15       	cp	r16, r1
    e04a:	11 05       	cpc	r17, r1
    e04c:	19 f0       	breq	.+6      	; 0xe054 <mmc_init+0xc0>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    e04e:	c8 01       	movw	r24, r16
    e050:	e4 d0       	rcall	.+456    	; 0xe21a <put_rc>
    e052:	0e c0       	rjmp	.+28     	; 0xe070 <mmc_init+0xdc>
    e054:	40 e0       	ldi	r20, 0x00	; 0
    e056:	65 e9       	ldi	r22, 0x95	; 149
    e058:	78 e0       	ldi	r23, 0x08	; 8
    e05a:	83 e7       	ldi	r24, 0x73	; 115
    e05c:	9a e1       	ldi	r25, 0x1A	; 26

    if( rc != RES_OK || verbose)
    e05e:	0e 94 f7 59 	call	0xb3ee	; 0xb3ee <f_mount>
    e062:	8c 01       	movw	r16, r24
    e064:	89 2b       	or	r24, r25
        put_rc( rc );
    e066:	21 f4       	brne	.+8      	; 0xe070 <mmc_init+0xdc>
    e068:	e1 14       	cp	r14, r1
    e06a:	f1 04       	cpc	r15, r1

    if (verbose )
    e06c:	09 f4       	brne	.+2      	; 0xe070 <mmc_init+0xdc>
    e06e:	40 c0       	rjmp	.+128    	; 0xe0f0 <mmc_init+0x15c>
    e070:	c8 01       	movw	r24, r16
    {
        DWORD blksize = 0;
    e072:	d3 d0       	rcall	.+422    	; 0xe21a <put_rc>
    e074:	e1 14       	cp	r14, r1
    e076:	f1 04       	cpc	r15, r1
    e078:	d9 f1       	breq	.+118    	; 0xe0f0 <mmc_init+0x15c>
        if(rc == RES_OK)
    e07a:	18 86       	std	Y+8, r1	; 0x08
    e07c:	19 86       	std	Y+9, r1	; 0x09
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    e07e:	1a 86       	std	Y+10, r1	; 0x0a
    e080:	1b 86       	std	Y+11, r1	; 0x0b
    e082:	01 15       	cp	r16, r1
    e084:	11 05       	cpc	r17, r1
    e086:	51 f5       	brne	.+84     	; 0xe0dc <mmc_init+0x148>
    e088:	ae 01       	movw	r20, r28
    e08a:	48 5f       	subi	r20, 0xF8	; 248
            if( rc != RES_OK)
    e08c:	5f 4f       	sbci	r21, 0xFF	; 255
    e08e:	63 e0       	ldi	r22, 0x03	; 3
            {
                put_rc( rc );
    e090:	80 e0       	ldi	r24, 0x00	; 0
    e092:	1b da       	rcall	.-3018   	; 0xd4ca <disk_ioctl>
                printf("MMC Block Size - read failed\n");
    e094:	8c 01       	movw	r16, r24
    e096:	00 97       	sbiw	r24, 0x00	; 0
    e098:	61 f0       	breq	.+24     	; 0xe0b2 <mmc_init+0x11e>
    e09a:	bf d0       	rcall	.+382    	; 0xe21a <put_rc>
    e09c:	8c ed       	ldi	r24, 0xDC	; 220
    e09e:	97 e0       	ldi	r25, 0x07	; 7
    e0a0:	a0 e0       	ldi	r26, 0x00	; 0
    e0a2:	ed b7       	in	r30, 0x3d	; 61
    e0a4:	fe b7       	in	r31, 0x3e	; 62
    e0a6:	81 83       	std	Z+1, r24	; 0x01
    e0a8:	92 83       	std	Z+2, r25	; 0x02
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    e0aa:	a3 83       	std	Z+3, r26	; 0x03
    e0ac:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    e0b0:	15 c0       	rjmp	.+42     	; 0xe0dc <mmc_init+0x148>
    e0b2:	88 85       	ldd	r24, Y+8	; 0x08
    e0b4:	99 85       	ldd	r25, Y+9	; 0x09
    e0b6:	aa 85       	ldd	r26, Y+10	; 0x0a
    e0b8:	bb 85       	ldd	r27, Y+11	; 0x0b
    e0ba:	ed b7       	in	r30, 0x3d	; 61
    e0bc:	fe b7       	in	r31, 0x3e	; 62
    e0be:	84 83       	std	Z+4, r24	; 0x04
    e0c0:	95 83       	std	Z+5, r25	; 0x05
    e0c2:	a6 83       	std	Z+6, r26	; 0x06
    e0c4:	b7 83       	std	Z+7, r27	; 0x07
    e0c6:	87 ec       	ldi	r24, 0xC7	; 199
    e0c8:	97 e0       	ldi	r25, 0x07	; 7
    e0ca:	a0 e0       	ldi	r26, 0x00	; 0
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    e0cc:	81 83       	std	Z+1, r24	; 0x01
    e0ce:	92 83       	std	Z+2, r25	; 0x02
    e0d0:	a3 83       	std	Z+3, r26	; 0x03
    e0d2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            }
        }
        printf("END MMC INIT\n");
    e0d6:	85 e9       	ldi	r24, 0x95	; 149
    e0d8:	98 e0       	ldi	r25, 0x08	; 8
    e0da:	33 d1       	rcall	.+614    	; 0xe342 <fatfs_status>
    e0dc:	89 eb       	ldi	r24, 0xB9	; 185
    e0de:	97 e0       	ldi	r25, 0x07	; 7
    e0e0:	a0 e0       	ldi	r26, 0x00	; 0
    e0e2:	ed b7       	in	r30, 0x3d	; 61
    e0e4:	fe b7       	in	r31, 0x3e	; 62
    e0e6:	81 83       	std	Z+1, r24	; 0x01
    }
    mmc_init_flag = 1;
    e0e8:	92 83       	std	Z+2, r25	; 0x02
    e0ea:	a3 83       	std	Z+3, r26	; 0x03
    e0ec:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    e0f0:	81 e0       	ldi	r24, 0x01	; 1
    e0f2:	90 e0       	ldi	r25, 0x00	; 0

	if(rc != RES_OK)
    e0f4:	90 93 26 18 	sts	0x1826, r25	; 0x801826 <mmc_init_flag+0x1>
    e0f8:	80 93 25 18 	sts	0x1825, r24	; 0x801825 <mmc_init_flag>
		set_error(1);
    e0fc:	01 15       	cp	r16, r1
    e0fe:	11 05       	cpc	r17, r1
    e100:	21 f0       	breq	.+8      	; 0xe10a <mmc_init+0x176>
    e102:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <set_error>

    return( rc ) ;
}
    e106:	c8 01       	movw	r24, r16
    e108:	02 c0       	rjmp	.+4      	; 0xe10e <mmc_init+0x17a>
    e10a:	80 e0       	ldi	r24, 0x00	; 0
    e10c:	90 e0       	ldi	r25, 0x00	; 0
    e10e:	2b 96       	adiw	r28, 0x0b	; 11
    e110:	e6 e0       	ldi	r30, 0x06	; 6
    e112:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

0000e116 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e116:	80 e0       	ldi	r24, 0x00	; 0
    e118:	90 e0       	ldi	r25, 0x00	; 0
    e11a:	08 95       	ret

0000e11c <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e11c:	0f 93       	push	r16
    e11e:	1f 93       	push	r17
    e120:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e122:	46 81       	ldd	r20, Z+6	; 0x06
    e124:	57 81       	ldd	r21, Z+7	; 0x07
    e126:	05 2e       	mov	r0, r21
    e128:	00 0c       	add	r0, r0
    e12a:	66 0b       	sbc	r22, r22
    e12c:	77 0b       	sbc	r23, r23
    e12e:	ba 01       	movw	r22, r20
    e130:	55 27       	eor	r21, r21
    e132:	44 27       	eor	r20, r20
    e134:	84 81       	ldd	r24, Z+4	; 0x04
    e136:	95 81       	ldd	r25, Z+5	; 0x05
    e138:	09 2e       	mov	r0, r25
    e13a:	00 0c       	add	r0, r0
    e13c:	aa 0b       	sbc	r26, r26
    e13e:	bb 0b       	sbc	r27, r27
    e140:	2b e0       	ldi	r18, 0x0B	; 11
    e142:	88 0f       	add	r24, r24
    e144:	99 1f       	adc	r25, r25
    e146:	aa 1f       	adc	r26, r26
    e148:	bb 1f       	adc	r27, r27
    e14a:	2a 95       	dec	r18
    e14c:	d1 f7       	brne	.-12     	; 0xe142 <tm_to_fat+0x26>
    e14e:	48 2b       	or	r20, r24
    e150:	59 2b       	or	r21, r25
    e152:	6a 2b       	or	r22, r26
    e154:	7b 2b       	or	r23, r27
    e156:	82 81       	ldd	r24, Z+2	; 0x02
    e158:	93 81       	ldd	r25, Z+3	; 0x03
    e15a:	09 2e       	mov	r0, r25
    e15c:	00 0c       	add	r0, r0
    e15e:	aa 0b       	sbc	r26, r26
    e160:	bb 0b       	sbc	r27, r27
    e162:	35 e0       	ldi	r19, 0x05	; 5
    e164:	88 0f       	add	r24, r24
    e166:	99 1f       	adc	r25, r25
    e168:	aa 1f       	adc	r26, r26
    e16a:	bb 1f       	adc	r27, r27
    e16c:	3a 95       	dec	r19
    e16e:	d1 f7       	brne	.-12     	; 0xe164 <tm_to_fat+0x48>
    e170:	48 2b       	or	r20, r24
    e172:	59 2b       	or	r21, r25
    e174:	6a 2b       	or	r22, r26
    e176:	7b 2b       	or	r23, r27
    e178:	80 81       	ld	r24, Z
    e17a:	91 81       	ldd	r25, Z+1	; 0x01
    e17c:	09 2e       	mov	r0, r25
    e17e:	00 0c       	add	r0, r0
    e180:	aa 0b       	sbc	r26, r26
    e182:	bb 0b       	sbc	r27, r27
    e184:	b6 95       	lsr	r27
    e186:	a7 95       	ror	r26
    e188:	97 95       	ror	r25
    e18a:	87 95       	ror	r24
    e18c:	84 2b       	or	r24, r20
    e18e:	95 2b       	or	r25, r21
    e190:	a6 2b       	or	r26, r22
    e192:	b7 2b       	or	r27, r23
    e194:	02 85       	ldd	r16, Z+10	; 0x0a
    e196:	13 85       	ldd	r17, Z+11	; 0x0b
    e198:	00 55       	subi	r16, 0x50	; 80
    e19a:	11 09       	sbc	r17, r1
    e19c:	01 2e       	mov	r0, r17
    e19e:	00 0c       	add	r0, r0
    e1a0:	22 0b       	sbc	r18, r18
    e1a2:	33 0b       	sbc	r19, r19
    e1a4:	49 e1       	ldi	r20, 0x19	; 25
    e1a6:	00 0f       	add	r16, r16
    e1a8:	11 1f       	adc	r17, r17
    e1aa:	22 1f       	adc	r18, r18
    e1ac:	33 1f       	adc	r19, r19
    e1ae:	4a 95       	dec	r20
    e1b0:	d1 f7       	brne	.-12     	; 0xe1a6 <tm_to_fat+0x8a>
    e1b2:	ac 01       	movw	r20, r24
    e1b4:	bd 01       	movw	r22, r26
    e1b6:	40 2b       	or	r20, r16
    e1b8:	51 2b       	or	r21, r17
    e1ba:	62 2b       	or	r22, r18
    e1bc:	73 2b       	or	r23, r19
    e1be:	80 85       	ldd	r24, Z+8	; 0x08
    e1c0:	91 85       	ldd	r25, Z+9	; 0x09
    e1c2:	09 2e       	mov	r0, r25
    e1c4:	00 0c       	add	r0, r0
    e1c6:	aa 0b       	sbc	r26, r26
    e1c8:	bb 0b       	sbc	r27, r27
    e1ca:	01 96       	adiw	r24, 0x01	; 1
    e1cc:	a1 1d       	adc	r26, r1
    e1ce:	b1 1d       	adc	r27, r1
    e1d0:	e5 e1       	ldi	r30, 0x15	; 21
    e1d2:	88 0f       	add	r24, r24
    e1d4:	99 1f       	adc	r25, r25
    e1d6:	aa 1f       	adc	r26, r26
    e1d8:	bb 1f       	adc	r27, r27
    e1da:	ea 95       	dec	r30
    e1dc:	d1 f7       	brne	.-12     	; 0xe1d2 <tm_to_fat+0xb6>
    e1de:	8a 01       	movw	r16, r20
    e1e0:	9b 01       	movw	r18, r22
    e1e2:	08 2b       	or	r16, r24
    e1e4:	19 2b       	or	r17, r25
    e1e6:	2a 2b       	or	r18, r26
    e1e8:	3b 2b       	or	r19, r27
    e1ea:	c9 01       	movw	r24, r18
    e1ec:	b8 01       	movw	r22, r16
}
    e1ee:	1f 91       	pop	r17
    e1f0:	0f 91       	pop	r16
    e1f2:	08 95       	ret

0000e1f4 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e1f4:	a4 e0       	ldi	r26, 0x04	; 4
    e1f6:	b0 e0       	ldi	r27, 0x00	; 0
    e1f8:	e0 e0       	ldi	r30, 0x00	; 0
    e1fa:	f1 e7       	ldi	r31, 0x71	; 113
    e1fc:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e200:	ce 01       	movw	r24, r28
    e202:	01 96       	adiw	r24, 0x01	; 1
    e204:	0e 94 3a 38 	call	0x7074	; 0x7074 <time>
    return( tm_to_fat(localtime(&t)));
    e208:	ce 01       	movw	r24, r28
    e20a:	01 96       	adiw	r24, 0x01	; 1
    e20c:	0e 94 d3 38 	call	0x71a6	; 0x71a6 <localtime>
    e210:	85 df       	rcall	.-246    	; 0xe11c <tm_to_fat>
}
    e212:	24 96       	adiw	r28, 0x04	; 4
    e214:	e2 e0       	ldi	r30, 0x02	; 2
    e216:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

0000e21a <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    e21a:	00 d0       	rcall	.+0      	; 0xe21c <put_rc+0x2>
    e21c:	00 d0       	rcall	.+0      	; 0xe21e <put_rc+0x4>
    e21e:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e220:	ed b7       	in	r30, 0x3d	; 61
    e222:	fe b7       	in	r31, 0x3e	; 62
    e224:	95 83       	std	Z+5, r25	; 0x05
    e226:	84 83       	std	Z+4, r24	; 0x04
    e228:	87 e7       	ldi	r24, 0x77	; 119
    e22a:	9a e0       	ldi	r25, 0x0A	; 10
    e22c:	a0 e0       	ldi	r26, 0x00	; 0
    e22e:	81 83       	std	Z+1, r24	; 0x01
    e230:	92 83       	std	Z+2, r25	; 0x02
    e232:	a3 83       	std	Z+3, r26	; 0x03
    e234:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif
}
    e238:	0f 90       	pop	r0
    e23a:	0f 90       	pop	r0
    e23c:	0f 90       	pop	r0
    e23e:	0f 90       	pop	r0
    e240:	0f 90       	pop	r0
    e242:	08 95       	ret

0000e244 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e244:	a4 e4       	ldi	r26, 0x44	; 68
    e246:	b1 e0       	ldi	r27, 0x01	; 1
    e248:	e8 e2       	ldi	r30, 0x28	; 40
    e24a:	f1 e7       	ldi	r31, 0x71	; 113
    e24c:	0c 94 da e2 	jmp	0x1c5b4	; 0x1c5b4 <__prologue_saves__+0x16>
    e250:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e252:	bc 01       	movw	r22, r24
    e254:	ce 01       	movw	r24, r28
    e256:	89 5e       	subi	r24, 0xE9	; 233
    e258:	9e 4f       	sbci	r25, 0xFE	; 254
    e25a:	0e 94 b3 63 	call	0xc766	; 0xc766 <f_opendir>
    if (fr == FR_OK)
    e25e:	00 97       	sbiw	r24, 0x00	; 0
    e260:	09 f0       	breq	.+2      	; 0xe264 <fatfs_scan_files+0x20>
    e262:	5b c0       	rjmp	.+182    	; 0xe31a <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e264:	8f e2       	ldi	r24, 0x2F	; 47
    e266:	d8 2e       	mov	r13, r24
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    e268:	be 01       	movw	r22, r28
    e26a:	6f 5f       	subi	r22, 0xFF	; 255
    e26c:	7f 4f       	sbci	r23, 0xFF	; 255
    e26e:	ce 01       	movw	r24, r28
    e270:	89 5e       	subi	r24, 0xE9	; 233
    e272:	9e 4f       	sbci	r25, 0xFE	; 254
    e274:	0e 94 39 64 	call	0xc872	; 0xc872 <f_readdir>
    e278:	00 97       	sbiw	r24, 0x00	; 0
    e27a:	09 f0       	breq	.+2      	; 0xe27e <fatfs_scan_files+0x3a>
    e27c:	4e c0       	rjmp	.+156    	; 0xe31a <fatfs_scan_files+0xd6>
    e27e:	2f 89       	ldd	r18, Y+23	; 0x17
    e280:	22 23       	and	r18, r18
    e282:	09 f4       	brne	.+2      	; 0xe286 <fatfs_scan_files+0x42>
    e284:	4a c0       	rjmp	.+148    	; 0xe31a <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    e286:	89 85       	ldd	r24, Y+9	; 0x09
    e288:	84 ff       	sbrs	r24, 4
    e28a:	25 c0       	rjmp	.+74     	; 0xe2d6 <fatfs_scan_files+0x92>
            {
                AccDirs++;
    e28c:	80 91 ac 1c 	lds	r24, 0x1CAC	; 0x801cac <AccDirs>
    e290:	90 91 ad 1c 	lds	r25, 0x1CAD	; 0x801cad <AccDirs+0x1>
    e294:	01 96       	adiw	r24, 0x01	; 1
    e296:	90 93 ad 1c 	sts	0x1CAD, r25	; 0x801cad <AccDirs+0x1>
    e29a:	80 93 ac 1c 	sts	0x1CAC, r24	; 0x801cac <AccDirs>
                i = strlen(path);
    e29e:	f8 01       	movw	r30, r16
    e2a0:	01 90       	ld	r0, Z+
    e2a2:	00 20       	and	r0, r0
    e2a4:	e9 f7       	brne	.-6      	; 0xe2a0 <fatfs_scan_files+0x5c>
    e2a6:	31 97       	sbiw	r30, 0x01	; 1
    e2a8:	e0 1b       	sub	r30, r16
    e2aa:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e2ac:	78 01       	movw	r14, r16
    e2ae:	ee 0e       	add	r14, r30
    e2b0:	ff 1e       	adc	r15, r31
    e2b2:	d7 01       	movw	r26, r14
    e2b4:	dc 92       	st	X, r13
    e2b6:	cf 01       	movw	r24, r30
    e2b8:	01 96       	adiw	r24, 0x01	; 1
    e2ba:	be 01       	movw	r22, r28
    e2bc:	69 5e       	subi	r22, 0xE9	; 233
    e2be:	7f 4f       	sbci	r23, 0xFF	; 255
    e2c0:	80 0f       	add	r24, r16
    e2c2:	91 1f       	adc	r25, r17
    e2c4:	0e 94 79 31 	call	0x62f2	; 0x62f2 <strcpy>
                fr = fatfs_scan_files(path);
    e2c8:	c8 01       	movw	r24, r16
    e2ca:	bc df       	rcall	.-136    	; 0xe244 <fatfs_scan_files>
                path[i] = 0;
    e2cc:	f7 01       	movw	r30, r14
    e2ce:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e2d0:	00 97       	sbiw	r24, 0x00	; 0
    e2d2:	51 f2       	breq	.-108    	; 0xe268 <fatfs_scan_files+0x24>
    e2d4:	22 c0       	rjmp	.+68     	; 0xe31a <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e2d6:	80 91 ae 1c 	lds	r24, 0x1CAE	; 0x801cae <AccFiles>
    e2da:	90 91 af 1c 	lds	r25, 0x1CAF	; 0x801caf <AccFiles+0x1>
    e2de:	01 96       	adiw	r24, 0x01	; 1
    e2e0:	90 93 af 1c 	sts	0x1CAF, r25	; 0x801caf <AccFiles+0x1>
    e2e4:	80 93 ae 1c 	sts	0x1CAE, r24	; 0x801cae <AccFiles>
                AccSize += info.fsize;
    e2e8:	40 91 a8 1c 	lds	r20, 0x1CA8	; 0x801ca8 <AccSize>
    e2ec:	50 91 a9 1c 	lds	r21, 0x1CA9	; 0x801ca9 <AccSize+0x1>
    e2f0:	60 91 aa 1c 	lds	r22, 0x1CAA	; 0x801caa <AccSize+0x2>
    e2f4:	70 91 ab 1c 	lds	r23, 0x1CAB	; 0x801cab <AccSize+0x3>
    e2f8:	89 81       	ldd	r24, Y+1	; 0x01
    e2fa:	9a 81       	ldd	r25, Y+2	; 0x02
    e2fc:	ab 81       	ldd	r26, Y+3	; 0x03
    e2fe:	bc 81       	ldd	r27, Y+4	; 0x04
    e300:	84 0f       	add	r24, r20
    e302:	95 1f       	adc	r25, r21
    e304:	a6 1f       	adc	r26, r22
    e306:	b7 1f       	adc	r27, r23
    e308:	80 93 a8 1c 	sts	0x1CA8, r24	; 0x801ca8 <AccSize>
    e30c:	90 93 a9 1c 	sts	0x1CA9, r25	; 0x801ca9 <AccSize+0x1>
    e310:	a0 93 aa 1c 	sts	0x1CAA, r26	; 0x801caa <AccSize+0x2>
    e314:	b0 93 ab 1c 	sts	0x1CAB, r27	; 0x801cab <AccSize+0x3>
    e318:	a7 cf       	rjmp	.-178    	; 0xe268 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e31a:	cc 5b       	subi	r28, 0xBC	; 188
    e31c:	de 4f       	sbci	r29, 0xFE	; 254
    e31e:	e7 e0       	ldi	r30, 0x07	; 7
    e320:	0c 94 f6 e2 	jmp	0x1c5ec	; 0x1c5ec <__epilogue_restores__+0x16>

0000e324 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e324:	01 97       	sbiw	r24, 0x01	; 1
    e326:	84 30       	cpi	r24, 0x04	; 4
    e328:	91 05       	cpc	r25, r1
    e32a:	40 f4       	brcc	.+16     	; 0xe33c <fatfs_fstype+0x18>
    e32c:	88 0f       	add	r24, r24
    e32e:	99 1f       	adc	r25, r25
    e330:	fc 01       	movw	r30, r24
    e332:	e7 54       	subi	r30, 0x47	; 71
    e334:	f7 4f       	sbci	r31, 0xF7	; 247
    e336:	80 81       	ld	r24, Z
    e338:	91 81       	ldd	r25, Z+1	; 0x01
    e33a:	08 95       	ret
    char *ptr;
    switch(type)
    e33c:	87 e9       	ldi	r24, 0x97	; 151
    e33e:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e340:	08 95       	ret

0000e342 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    e342:	a7 e3       	ldi	r26, 0x37	; 55
    e344:	b0 e0       	ldi	r27, 0x00	; 0
    e346:	e7 ea       	ldi	r30, 0xA7	; 167
    e348:	f1 e7       	ldi	r31, 0x71	; 113
    e34a:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
    e34e:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e350:	fc 01       	movw	r30, r24
    e352:	21 91       	ld	r18, Z+
    e354:	cf 01       	movw	r24, r30
    e356:	20 32       	cpi	r18, 0x20	; 32
    e358:	d1 f3       	breq	.-12     	; 0xe34e <fatfs_status+0xc>
    e35a:	29 30       	cpi	r18, 0x09	; 9
    e35c:	c1 f3       	breq	.-16     	; 0xe34e <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    e35e:	ed b7       	in	r30, 0x3d	; 61
    e360:	fe b7       	in	r31, 0x3e	; 62
    e362:	e4 82       	std	Z+4, r14	; 0x04
    e364:	f5 82       	std	Z+5, r15	; 0x05
    e366:	86 e6       	ldi	r24, 0x66	; 102
    e368:	9a e0       	ldi	r25, 0x0A	; 10
    e36a:	a0 e0       	ldi	r26, 0x00	; 0
    e36c:	81 83       	std	Z+1, r24	; 0x01
    e36e:	92 83       	std	Z+2, r25	; 0x02
    e370:	a3 83       	std	Z+3, r26	; 0x03
    e372:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e376:	ae 01       	movw	r20, r28
    e378:	4a 5c       	subi	r20, 0xCA	; 202
    e37a:	5f 4f       	sbci	r21, 0xFF	; 255
    e37c:	be 01       	movw	r22, r28
    e37e:	6e 5c       	subi	r22, 0xCE	; 206
    e380:	7f 4f       	sbci	r23, 0xFF	; 255
    e382:	c7 01       	movw	r24, r14
    e384:	0e 94 bb 64 	call	0xc976	; 0xc976 <f_getfree>
    if (res)
    e388:	00 97       	sbiw	r24, 0x00	; 0
    e38a:	09 f0       	breq	.+2      	; 0xe38e <fatfs_status+0x4c>
    e38c:	f8 c0       	rjmp	.+496    	; 0xe57e <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e38e:	ee a9       	ldd	r30, Y+54	; 0x36
    e390:	ff a9       	ldd	r31, Y+55	; 0x37
    e392:	80 81       	ld	r24, Z
    e394:	90 e0       	ldi	r25, 0x00	; 0
    e396:	c6 df       	rcall	.-116    	; 0xe324 <fatfs_fstype>
    e398:	ed b7       	in	r30, 0x3d	; 61
    e39a:	fe b7       	in	r31, 0x3e	; 62
    e39c:	95 83       	std	Z+5, r25	; 0x05
    e39e:	84 83       	std	Z+4, r24	; 0x04
    e3a0:	88 e4       	ldi	r24, 0x48	; 72
    e3a2:	9a e0       	ldi	r25, 0x0A	; 10
    e3a4:	a0 e0       	ldi	r26, 0x00	; 0
    e3a6:	81 83       	std	Z+1, r24	; 0x01
    e3a8:	92 83       	std	Z+2, r25	; 0x02
    e3aa:	a3 83       	std	Z+3, r26	; 0x03
    e3ac:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e3b0:	ee a9       	ldd	r30, Y+54	; 0x36
    e3b2:	ff a9       	ldd	r31, Y+55	; 0x37
    e3b4:	81 85       	ldd	r24, Z+9	; 0x09
    e3b6:	92 85       	ldd	r25, Z+10	; 0x0a
    e3b8:	a0 e0       	ldi	r26, 0x00	; 0
    e3ba:	b0 e0       	ldi	r27, 0x00	; 0
    e3bc:	39 e0       	ldi	r19, 0x09	; 9
    e3be:	88 0f       	add	r24, r24
    e3c0:	99 1f       	adc	r25, r25
    e3c2:	aa 1f       	adc	r26, r26
    e3c4:	bb 1f       	adc	r27, r27
    e3c6:	3a 95       	dec	r19
    e3c8:	d1 f7       	brne	.-12     	; 0xe3be <fatfs_status+0x7c>
    e3ca:	ed b7       	in	r30, 0x3d	; 61
    e3cc:	fe b7       	in	r31, 0x3e	; 62
    e3ce:	84 83       	std	Z+4, r24	; 0x04
    e3d0:	95 83       	std	Z+5, r25	; 0x05
    e3d2:	a6 83       	std	Z+6, r26	; 0x06
    e3d4:	b7 83       	std	Z+7, r27	; 0x07
    e3d6:	89 e2       	ldi	r24, 0x29	; 41
    e3d8:	9a e0       	ldi	r25, 0x0A	; 10
    e3da:	a0 e0       	ldi	r26, 0x00	; 0
    e3dc:	81 83       	std	Z+1, r24	; 0x01
    e3de:	92 83       	std	Z+2, r25	; 0x02
    e3e0:	a3 83       	std	Z+3, r26	; 0x03
    e3e2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e3e6:	ee a9       	ldd	r30, Y+54	; 0x36
    e3e8:	ff a9       	ldd	r31, Y+55	; 0x37
    e3ea:	82 81       	ldd	r24, Z+2	; 0x02
    e3ec:	90 e0       	ldi	r25, 0x00	; 0
    e3ee:	ed b7       	in	r30, 0x3d	; 61
    e3f0:	fe b7       	in	r31, 0x3e	; 62
    e3f2:	95 83       	std	Z+5, r25	; 0x05
    e3f4:	84 83       	std	Z+4, r24	; 0x04
    e3f6:	8b e0       	ldi	r24, 0x0B	; 11
    e3f8:	9a e0       	ldi	r25, 0x0A	; 10
    e3fa:	a0 e0       	ldi	r26, 0x00	; 0
    e3fc:	81 83       	std	Z+1, r24	; 0x01
    e3fe:	92 83       	std	Z+2, r25	; 0x02
    e400:	a3 83       	std	Z+3, r26	; 0x03
    e402:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e406:	ee a9       	ldd	r30, Y+54	; 0x36
    e408:	ff a9       	ldd	r31, Y+55	; 0x37
    e40a:	87 81       	ldd	r24, Z+7	; 0x07
    e40c:	90 85       	ldd	r25, Z+8	; 0x08
    e40e:	ed b7       	in	r30, 0x3d	; 61
    e410:	fe b7       	in	r31, 0x3e	; 62
    e412:	95 83       	std	Z+5, r25	; 0x05
    e414:	84 83       	std	Z+4, r24	; 0x04
    e416:	8d ee       	ldi	r24, 0xED	; 237
    e418:	99 e0       	ldi	r25, 0x09	; 9
    e41a:	a0 e0       	ldi	r26, 0x00	; 0
    e41c:	81 83       	std	Z+1, r24	; 0x01
    e41e:	92 83       	std	Z+2, r25	; 0x02
    e420:	a3 83       	std	Z+3, r26	; 0x03
    e422:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e426:	ee a9       	ldd	r30, Y+54	; 0x36
    e428:	ff a9       	ldd	r31, Y+55	; 0x37
    e42a:	85 8d       	ldd	r24, Z+29	; 0x1d
    e42c:	96 8d       	ldd	r25, Z+30	; 0x1e
    e42e:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e430:	b0 a1       	ldd	r27, Z+32	; 0x20
    e432:	ed b7       	in	r30, 0x3d	; 61
    e434:	fe b7       	in	r31, 0x3e	; 62
    e436:	84 83       	std	Z+4, r24	; 0x04
    e438:	95 83       	std	Z+5, r25	; 0x05
    e43a:	a6 83       	std	Z+6, r26	; 0x06
    e43c:	b7 83       	std	Z+7, r27	; 0x07
    e43e:	8e ec       	ldi	r24, 0xCE	; 206
    e440:	99 e0       	ldi	r25, 0x09	; 9
    e442:	a0 e0       	ldi	r26, 0x00	; 0
    e444:	81 83       	std	Z+1, r24	; 0x01
    e446:	92 83       	std	Z+2, r25	; 0x02
    e448:	a3 83       	std	Z+3, r26	; 0x03
    e44a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e44e:	ee a9       	ldd	r30, Y+54	; 0x36
    e450:	ff a9       	ldd	r31, Y+55	; 0x37
    e452:	81 8d       	ldd	r24, Z+25	; 0x19
    e454:	92 8d       	ldd	r25, Z+26	; 0x1a
    e456:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e458:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e45a:	02 97       	sbiw	r24, 0x02	; 2
    e45c:	a1 09       	sbc	r26, r1
    e45e:	b1 09       	sbc	r27, r1
    e460:	ed b7       	in	r30, 0x3d	; 61
    e462:	fe b7       	in	r31, 0x3e	; 62
    e464:	84 83       	std	Z+4, r24	; 0x04
    e466:	95 83       	std	Z+5, r25	; 0x05
    e468:	a6 83       	std	Z+6, r26	; 0x06
    e46a:	b7 83       	std	Z+7, r27	; 0x07
    e46c:	8f ea       	ldi	r24, 0xAF	; 175
    e46e:	99 e0       	ldi	r25, 0x09	; 9
    e470:	a0 e0       	ldi	r26, 0x00	; 0
    e472:	81 83       	std	Z+1, r24	; 0x01
    e474:	92 83       	std	Z+2, r25	; 0x02
    e476:	a3 83       	std	Z+3, r26	; 0x03
    e478:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e47c:	ee a9       	ldd	r30, Y+54	; 0x36
    e47e:	ff a9       	ldd	r31, Y+55	; 0x37
    e480:	85 a1       	ldd	r24, Z+37	; 0x25
    e482:	96 a1       	ldd	r25, Z+38	; 0x26
    e484:	a7 a1       	ldd	r26, Z+39	; 0x27
    e486:	b0 a5       	ldd	r27, Z+40	; 0x28
    e488:	ed b7       	in	r30, 0x3d	; 61
    e48a:	fe b7       	in	r31, 0x3e	; 62
    e48c:	84 83       	std	Z+4, r24	; 0x04
    e48e:	95 83       	std	Z+5, r25	; 0x05
    e490:	a6 83       	std	Z+6, r26	; 0x06
    e492:	b7 83       	std	Z+7, r27	; 0x07
    e494:	80 e9       	ldi	r24, 0x90	; 144
    e496:	99 e0       	ldi	r25, 0x09	; 9
    e498:	a0 e0       	ldi	r26, 0x00	; 0
    e49a:	81 83       	std	Z+1, r24	; 0x01
    e49c:	92 83       	std	Z+2, r25	; 0x02
    e49e:	a3 83       	std	Z+3, r26	; 0x03
    e4a0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e4a4:	ee a9       	ldd	r30, Y+54	; 0x36
    e4a6:	ff a9       	ldd	r31, Y+55	; 0x37
    e4a8:	81 a5       	ldd	r24, Z+41	; 0x29
    e4aa:	92 a5       	ldd	r25, Z+42	; 0x2a
    e4ac:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e4ae:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e4b0:	ed b7       	in	r30, 0x3d	; 61
    e4b2:	fe b7       	in	r31, 0x3e	; 62
    e4b4:	84 83       	std	Z+4, r24	; 0x04
    e4b6:	95 83       	std	Z+5, r25	; 0x05
    e4b8:	a6 83       	std	Z+6, r26	; 0x06
    e4ba:	b7 83       	std	Z+7, r27	; 0x07
    e4bc:	81 e7       	ldi	r24, 0x71	; 113
    e4be:	99 e0       	ldi	r25, 0x09	; 9
    e4c0:	a0 e0       	ldi	r26, 0x00	; 0
    e4c2:	81 83       	std	Z+1, r24	; 0x01
    e4c4:	92 83       	std	Z+2, r25	; 0x02
    e4c6:	a3 83       	std	Z+3, r26	; 0x03
    e4c8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e4cc:	ee a9       	ldd	r30, Y+54	; 0x36
    e4ce:	ff a9       	ldd	r31, Y+55	; 0x37
    e4d0:	85 a5       	ldd	r24, Z+45	; 0x2d
    e4d2:	96 a5       	ldd	r25, Z+46	; 0x2e
    e4d4:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e4d6:	b0 a9       	ldd	r27, Z+48	; 0x30
    e4d8:	ed b7       	in	r30, 0x3d	; 61
    e4da:	fe b7       	in	r31, 0x3e	; 62
    e4dc:	84 83       	std	Z+4, r24	; 0x04
    e4de:	95 83       	std	Z+5, r25	; 0x05
    e4e0:	a6 83       	std	Z+6, r26	; 0x06
    e4e2:	b7 83       	std	Z+7, r27	; 0x07
    e4e4:	82 e5       	ldi	r24, 0x52	; 82
    e4e6:	99 e0       	ldi	r25, 0x09	; 9
    e4e8:	a0 e0       	ldi	r26, 0x00	; 0
    e4ea:	81 83       	std	Z+1, r24	; 0x01
    e4ec:	92 83       	std	Z+2, r25	; 0x02
    e4ee:	a3 83       	std	Z+3, r26	; 0x03
    e4f0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e4f4:	ae 01       	movw	r20, r28
    e4f6:	42 5d       	subi	r20, 0xD2	; 210
    e4f8:	5f 4f       	sbci	r21, 0xFF	; 255
    e4fa:	be 01       	movw	r22, r28
    e4fc:	6c 5e       	subi	r22, 0xEC	; 236
    e4fe:	7f 4f       	sbci	r23, 0xFF	; 255
    e500:	c7 01       	movw	r24, r14
    e502:	0e 94 ed 68 	call	0xd1da	; 0xd1da <f_getlabel>
    if (res)
    e506:	00 97       	sbiw	r24, 0x00	; 0
    e508:	d1 f5       	brne	.+116    	; 0xe57e <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e50a:	8c 89       	ldd	r24, Y+20	; 0x14
    e50c:	81 11       	cpse	r24, r1
    e50e:	03 c0       	rjmp	.+6      	; 0xe516 <fatfs_status+0x1d4>
    e510:	8f e9       	ldi	r24, 0x9F	; 159
    e512:	98 e0       	ldi	r25, 0x08	; 8
    e514:	02 c0       	rjmp	.+4      	; 0xe51a <fatfs_status+0x1d8>
    e516:	ce 01       	movw	r24, r28
    e518:	44 96       	adiw	r24, 0x14	; 20
    e51a:	ed b7       	in	r30, 0x3d	; 61
    e51c:	fe b7       	in	r31, 0x3e	; 62
    e51e:	95 83       	std	Z+5, r25	; 0x05
    e520:	84 83       	std	Z+4, r24	; 0x04
    e522:	84 e3       	ldi	r24, 0x34	; 52
    e524:	99 e0       	ldi	r25, 0x09	; 9
    e526:	a0 e0       	ldi	r26, 0x00	; 0
    e528:	81 83       	std	Z+1, r24	; 0x01
    e52a:	92 83       	std	Z+2, r25	; 0x02
    e52c:	a3 83       	std	Z+3, r26	; 0x03
    e52e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e532:	8e a5       	ldd	r24, Y+46	; 0x2e
    e534:	9f a5       	ldd	r25, Y+47	; 0x2f
    e536:	a8 a9       	ldd	r26, Y+48	; 0x30
    e538:	b9 a9       	ldd	r27, Y+49	; 0x31
    e53a:	ed b7       	in	r30, 0x3d	; 61
    e53c:	fe b7       	in	r31, 0x3e	; 62
    e53e:	97 83       	std	Z+7, r25	; 0x07
    e540:	86 83       	std	Z+6, r24	; 0x06
    e542:	b5 83       	std	Z+5, r27	; 0x05
    e544:	a4 83       	std	Z+4, r26	; 0x04
    e546:	8f e0       	ldi	r24, 0x0F	; 15
    e548:	99 e0       	ldi	r25, 0x09	; 9
    e54a:	a0 e0       	ldi	r26, 0x00	; 0
    e54c:	81 83       	std	Z+1, r24	; 0x01
    e54e:	92 83       	std	Z+2, r25	; 0x02
    e550:	a3 83       	std	Z+3, r26	; 0x03
    e552:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e556:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <AccDirs+0x1>
    e55a:	10 92 ac 1c 	sts	0x1CAC, r1	; 0x801cac <AccDirs>
    e55e:	10 92 af 1c 	sts	0x1CAF, r1	; 0x801caf <AccFiles+0x1>
    e562:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <AccFiles>
    e566:	10 92 a8 1c 	sts	0x1CA8, r1	; 0x801ca8 <AccSize>
    e56a:	10 92 a9 1c 	sts	0x1CA9, r1	; 0x801ca9 <AccSize+0x1>
    e56e:	10 92 aa 1c 	sts	0x1CAA, r1	; 0x801caa <AccSize+0x2>
    e572:	10 92 ab 1c 	sts	0x1CAB, r1	; 0x801cab <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    if (res)
    e576:	c7 01       	movw	r24, r14
    {
        put_rc(res);
    e578:	65 de       	rcall	.-822    	; 0xe244 <fatfs_scan_files>
    e57a:	00 97       	sbiw	r24, 0x00	; 0
        return;
    e57c:	11 f0       	breq	.+4      	; 0xe582 <fatfs_status+0x240>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e57e:	4d de       	rcall	.-870    	; 0xe21a <put_rc>
    e580:	56 c0       	rjmp	.+172    	; 0xe62e <fatfs_status+0x2ec>
    e582:	0e a9       	ldd	r16, Y+54	; 0x36
    e584:	1f a9       	ldd	r17, Y+55	; 0x37
    e586:	f8 01       	movw	r30, r16
    e588:	c1 84       	ldd	r12, Z+9	; 0x09
    e58a:	d2 84       	ldd	r13, Z+10	; 0x0a
    e58c:	e1 2c       	mov	r14, r1
    e58e:	f1 2c       	mov	r15, r1
    e590:	6a a9       	ldd	r22, Y+50	; 0x32
    e592:	7b a9       	ldd	r23, Y+51	; 0x33
    e594:	8c a9       	ldd	r24, Y+52	; 0x34
    e596:	9d a9       	ldd	r25, Y+53	; 0x35
    e598:	a7 01       	movw	r20, r14
    e59a:	96 01       	movw	r18, r12
    e59c:	0e 94 20 e2 	call	0x1c440	; 0x1c440 <__mulsi3>
    e5a0:	22 e0       	ldi	r18, 0x02	; 2
    e5a2:	30 e0       	ldi	r19, 0x00	; 0
    e5a4:	40 e0       	ldi	r20, 0x00	; 0
    e5a6:	50 e0       	ldi	r21, 0x00	; 0
    e5a8:	0e 94 84 e2 	call	0x1c508	; 0x1c508 <__divmodsi4>
    e5ac:	ed b7       	in	r30, 0x3d	; 61
    e5ae:	fe b7       	in	r31, 0x3e	; 62
    e5b0:	20 8b       	std	Z+16, r18	; 0x10
    e5b2:	31 8b       	std	Z+17, r19	; 0x11
    e5b4:	42 8b       	std	Z+18, r20	; 0x12
    e5b6:	53 8b       	std	Z+19, r21	; 0x13
    e5b8:	f8 01       	movw	r30, r16
    e5ba:	81 8d       	ldd	r24, Z+25	; 0x19
    e5bc:	92 8d       	ldd	r25, Z+26	; 0x1a
    e5be:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e5c0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e5c2:	9c 01       	movw	r18, r24
    e5c4:	ad 01       	movw	r20, r26
    e5c6:	22 50       	subi	r18, 0x02	; 2
    e5c8:	31 09       	sbc	r19, r1
    e5ca:	41 09       	sbc	r20, r1
    e5cc:	51 09       	sbc	r21, r1
    e5ce:	c7 01       	movw	r24, r14
    e5d0:	b6 01       	movw	r22, r12
    e5d2:	0e 94 20 e2 	call	0x1c440	; 0x1c440 <__mulsi3>
    e5d6:	dc 01       	movw	r26, r24
    e5d8:	cb 01       	movw	r24, r22
    e5da:	b6 95       	lsr	r27
    e5dc:	a7 95       	ror	r26
    e5de:	97 95       	ror	r25
    e5e0:	87 95       	ror	r24
    e5e2:	ed b7       	in	r30, 0x3d	; 61
    e5e4:	fe b7       	in	r31, 0x3e	; 62
    e5e6:	84 87       	std	Z+12, r24	; 0x0c
    e5e8:	95 87       	std	Z+13, r25	; 0x0d
    e5ea:	a6 87       	std	Z+14, r26	; 0x0e
    e5ec:	b7 87       	std	Z+15, r27	; 0x0f
    e5ee:	80 91 ac 1c 	lds	r24, 0x1CAC	; 0x801cac <AccDirs>
    e5f2:	90 91 ad 1c 	lds	r25, 0x1CAD	; 0x801cad <AccDirs+0x1>
    e5f6:	93 87       	std	Z+11, r25	; 0x0b
    e5f8:	82 87       	std	Z+10, r24	; 0x0a
    e5fa:	80 91 a8 1c 	lds	r24, 0x1CA8	; 0x801ca8 <AccSize>
    e5fe:	90 91 a9 1c 	lds	r25, 0x1CA9	; 0x801ca9 <AccSize+0x1>
    e602:	a0 91 aa 1c 	lds	r26, 0x1CAA	; 0x801caa <AccSize+0x2>
    e606:	b0 91 ab 1c 	lds	r27, 0x1CAB	; 0x801cab <AccSize+0x3>
    e60a:	86 83       	std	Z+6, r24	; 0x06
    e60c:	97 83       	std	Z+7, r25	; 0x07
    e60e:	a0 87       	std	Z+8, r26	; 0x08
    e610:	b1 87       	std	Z+9, r27	; 0x09
    e612:	80 91 ae 1c 	lds	r24, 0x1CAE	; 0x801cae <AccFiles>
    e616:	90 91 af 1c 	lds	r25, 0x1CAF	; 0x801caf <AccFiles+0x1>
    e61a:	95 83       	std	Z+5, r25	; 0x05
    e61c:	84 83       	std	Z+4, r24	; 0x04
    e61e:	82 ec       	ldi	r24, 0xC2	; 194
    e620:	98 e0       	ldi	r25, 0x08	; 8
    e622:	a0 e0       	ldi	r26, 0x00	; 0
    e624:	81 83       	std	Z+1, r24	; 0x01
    e626:	92 83       	std	Z+2, r25	; 0x02
    e628:	a3 83       	std	Z+3, r26	; 0x03
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );

}
    e62a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    e62e:	e7 96       	adiw	r28, 0x37	; 55
    e630:	e8 e0       	ldi	r30, 0x08	; 8
    e632:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

0000e636 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e636:	ab e1       	ldi	r26, 0x1B	; 27
    e638:	b0 e0       	ldi	r27, 0x00	; 0
    e63a:	e1 e2       	ldi	r30, 0x21	; 33
    e63c:	f3 e7       	ldi	r31, 0x73	; 115
    e63e:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
    e642:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e644:	fc 01       	movw	r30, r24
    e646:	86 89       	ldd	r24, Z+22	; 0x16
    e648:	81 11       	cpse	r24, r1
    e64a:	03 c0       	rjmp	.+6      	; 0xe652 <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e64c:	87 ea       	ldi	r24, 0xA7	; 167
    e64e:	98 e0       	ldi	r25, 0x08	; 8
    e650:	69 c0       	rjmp	.+210    	; 0xe724 <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e652:	fd 01       	movw	r30, r26
    e654:	80 85       	ldd	r24, Z+8	; 0x08
    e656:	84 fd       	sbrc	r24, 4
    e658:	02 c0       	rjmp	.+4      	; 0xe65e <fatfs_filinfo_list+0x28>
    e65a:	9d e2       	ldi	r25, 0x2D	; 45
    e65c:	01 c0       	rjmp	.+2      	; 0xe660 <fatfs_filinfo_list+0x2a>
    e65e:	94 e4       	ldi	r25, 0x44	; 68
    e660:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e662:	80 fd       	sbrc	r24, 0
    e664:	02 c0       	rjmp	.+4      	; 0xe66a <fatfs_filinfo_list+0x34>
    e666:	9d e2       	ldi	r25, 0x2D	; 45
    e668:	01 c0       	rjmp	.+2      	; 0xe66c <fatfs_filinfo_list+0x36>
    e66a:	92 e5       	ldi	r25, 0x52	; 82
    e66c:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e66e:	81 fd       	sbrc	r24, 1
    e670:	02 c0       	rjmp	.+4      	; 0xe676 <fatfs_filinfo_list+0x40>
    e672:	9d e2       	ldi	r25, 0x2D	; 45
    e674:	01 c0       	rjmp	.+2      	; 0xe678 <fatfs_filinfo_list+0x42>
    e676:	98 e4       	ldi	r25, 0x48	; 72
    e678:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e67a:	82 fd       	sbrc	r24, 2
    e67c:	02 c0       	rjmp	.+4      	; 0xe682 <fatfs_filinfo_list+0x4c>
    e67e:	9d e2       	ldi	r25, 0x2D	; 45
    e680:	01 c0       	rjmp	.+2      	; 0xe684 <fatfs_filinfo_list+0x4e>
    e682:	93 e5       	ldi	r25, 0x53	; 83
    e684:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e686:	85 fd       	sbrc	r24, 5
    e688:	02 c0       	rjmp	.+4      	; 0xe68e <fatfs_filinfo_list+0x58>
    e68a:	8d e2       	ldi	r24, 0x2D	; 45
    e68c:	01 c0       	rjmp	.+2      	; 0xe690 <fatfs_filinfo_list+0x5a>
    e68e:	81 e4       	ldi	r24, 0x41	; 65
    e690:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e692:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e694:	fd 01       	movw	r30, r26
    e696:	24 81       	ldd	r18, Z+4	; 0x04
    e698:	35 81       	ldd	r19, Z+5	; 0x05
    e69a:	46 81       	ldd	r20, Z+6	; 0x06
    e69c:	57 81       	ldd	r21, Z+7	; 0x07
    e69e:	cd 01       	movw	r24, r26
    e6a0:	46 96       	adiw	r24, 0x16	; 22
    e6a2:	ed b7       	in	r30, 0x3d	; 61
    e6a4:	fe b7       	in	r31, 0x3e	; 62
    e6a6:	95 8b       	std	Z+21, r25	; 0x15
    e6a8:	84 8b       	std	Z+20, r24	; 0x14
    e6aa:	8d 91       	ld	r24, X+
    e6ac:	9d 91       	ld	r25, X+
    e6ae:	0d 90       	ld	r0, X+
    e6b0:	bc 91       	ld	r27, X
    e6b2:	a0 2d       	mov	r26, r0
    e6b4:	80 8b       	std	Z+16, r24	; 0x10
    e6b6:	91 8b       	std	Z+17, r25	; 0x11
    e6b8:	a2 8b       	std	Z+18, r26	; 0x12
    e6ba:	b3 8b       	std	Z+19, r27	; 0x13
    e6bc:	ca 01       	movw	r24, r20
    e6be:	45 e0       	ldi	r20, 0x05	; 5
    e6c0:	96 95       	lsr	r25
    e6c2:	87 95       	ror	r24
    e6c4:	4a 95       	dec	r20
    e6c6:	e1 f7       	brne	.-8      	; 0xe6c0 <fatfs_filinfo_list+0x8a>
    e6c8:	8f 73       	andi	r24, 0x3F	; 63
    e6ca:	99 27       	eor	r25, r25
    e6cc:	97 87       	std	Z+15, r25	; 0x0f
    e6ce:	86 87       	std	Z+14, r24	; 0x0e
    e6d0:	85 2f       	mov	r24, r21
    e6d2:	86 95       	lsr	r24
    e6d4:	86 95       	lsr	r24
    e6d6:	86 95       	lsr	r24
    e6d8:	84 87       	std	Z+12, r24	; 0x0c
    e6da:	15 86       	std	Z+13, r1	; 0x0d
    e6dc:	c9 01       	movw	r24, r18
    e6de:	8f 71       	andi	r24, 0x1F	; 31
    e6e0:	99 27       	eor	r25, r25
    e6e2:	93 87       	std	Z+11, r25	; 0x0b
    e6e4:	82 87       	std	Z+10, r24	; 0x0a
    e6e6:	c9 01       	movw	r24, r18
    e6e8:	55 e0       	ldi	r21, 0x05	; 5
    e6ea:	96 95       	lsr	r25
    e6ec:	87 95       	ror	r24
    e6ee:	5a 95       	dec	r21
    e6f0:	e1 f7       	brne	.-8      	; 0xe6ea <fatfs_filinfo_list+0xb4>
    e6f2:	8f 70       	andi	r24, 0x0F	; 15
    e6f4:	99 27       	eor	r25, r25
    e6f6:	91 87       	std	Z+9, r25	; 0x09
    e6f8:	80 87       	std	Z+8, r24	; 0x08
    e6fa:	23 2f       	mov	r18, r19
    e6fc:	33 27       	eor	r19, r19
    e6fe:	26 95       	lsr	r18
    e700:	24 54       	subi	r18, 0x44	; 68
    e702:	38 4f       	sbci	r19, 0xF8	; 248
    e704:	37 83       	std	Z+7, r19	; 0x07
    e706:	26 83       	std	Z+6, r18	; 0x06
    e708:	ce 01       	movw	r24, r28
    e70a:	46 96       	adiw	r24, 0x16	; 22
    e70c:	95 83       	std	Z+5, r25	; 0x05
    e70e:	84 83       	std	Z+4, r24	; 0x04
    e710:	85 e8       	ldi	r24, 0x85	; 133
    e712:	98 e0       	ldi	r25, 0x08	; 8
    e714:	a0 e0       	ldi	r26, 0x00	; 0
    e716:	81 83       	std	Z+1, r24	; 0x01
    e718:	92 83       	std	Z+2, r25	; 0x02
    e71a:	a3 83       	std	Z+3, r26	; 0x03
    e71c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e720:	83 e8       	ldi	r24, 0x83	; 131
    e722:	98 e0       	ldi	r25, 0x08	; 8
    e724:	a0 e0       	ldi	r26, 0x00	; 0
    e726:	ed b7       	in	r30, 0x3d	; 61
    e728:	fe b7       	in	r31, 0x3e	; 62
    e72a:	81 83       	std	Z+1, r24	; 0x01
    e72c:	92 83       	std	Z+2, r25	; 0x02
    e72e:	a3 83       	std	Z+3, r26	; 0x03
    e730:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
}
    e734:	6b 96       	adiw	r28, 0x1b	; 27
    e736:	e2 e0       	ldi	r30, 0x02	; 2
    e738:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

0000e73c <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e73c:	cf 93       	push	r28
    e73e:	df 93       	push	r29
    e740:	00 d0       	rcall	.+0      	; 0xe742 <fatfs_help+0x6>
    e742:	1f 92       	push	r1
    e744:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e746:	88 ec       	ldi	r24, 0xC8	; 200
    e748:	9b e0       	ldi	r25, 0x0B	; 11
    e74a:	a0 e0       	ldi	r26, 0x00	; 0
    e74c:	ed b7       	in	r30, 0x3d	; 61
    e74e:	fe b7       	in	r31, 0x3e	; 62
    e750:	81 83       	std	Z+1, r24	; 0x01
    e752:	92 83       	std	Z+2, r25	; 0x02
    e754:	a3 83       	std	Z+3, r26	; 0x03
    e756:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

    if(full)
    e75a:	cd 2b       	or	r28, r29
    e75c:	51 f0       	breq	.+20     	; 0xe772 <fatfs_help+0x36>
    {
        printf(
    e75e:	8c e4       	ldi	r24, 0x4C	; 76
    e760:	9b e0       	ldi	r25, 0x0B	; 11
    e762:	a0 e0       	ldi	r26, 0x00	; 0
    e764:	ed b7       	in	r30, 0x3d	; 61
    e766:	fe b7       	in	r31, 0x3e	; 62
    e768:	81 83       	std	Z+1, r24	; 0x01
    e76a:	92 83       	std	Z+2, r25	; 0x02
    e76c:	a3 83       	std	Z+3, r26	; 0x03
    e76e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    #endif
            "\n"
            );
    }

}
    e772:	cd b7       	in	r28, 0x3d	; 61
    e774:	de b7       	in	r29, 0x3e	; 62
    e776:	23 96       	adiw	r28, 0x03	; 3
    e778:	e2 e0       	ldi	r30, 0x02	; 2
    e77a:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

0000e77e <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    e77e:	a5 e5       	ldi	r26, 0x55	; 85
    e780:	b2 e0       	ldi	r27, 0x02	; 2
    e782:	e5 ec       	ldi	r30, 0xC5	; 197
    e784:	f3 e7       	ldi	r31, 0x73	; 115
    e786:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
    e78a:	8e 01       	movw	r16, r28
    e78c:	0e 5d       	subi	r16, 0xDE	; 222
    e78e:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256];

    if(!name || !*name)
    e790:	00 97       	sbiw	r24, 0x00	; 0
    e792:	21 f0       	breq	.+8      	; 0xe79c <fatfs_ls+0x1e>
    e794:	fc 01       	movw	r30, r24
    e796:	20 81       	ld	r18, Z
    e798:	21 11       	cpse	r18, r1
    e79a:	03 c0       	rjmp	.+6      	; 0xe7a2 <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    e79c:	67 ee       	ldi	r22, 0xE7	; 231
    e79e:	72 e1       	ldi	r23, 0x12	; 18
    e7a0:	01 c0       	rjmp	.+2      	; 0xe7a4 <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    e7a2:	bc 01       	movw	r22, r24
    e7a4:	c8 01       	movw	r24, r16
    e7a6:	0e 94 79 31 	call	0x62f2	; 0x62f2 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e7aa:	ed b7       	in	r30, 0x3d	; 61
    e7ac:	fe b7       	in	r31, 0x3e	; 62
    e7ae:	15 83       	std	Z+5, r17	; 0x05
    e7b0:	04 83       	std	Z+4, r16	; 0x04
    e7b2:	8c eb       	ldi	r24, 0xBC	; 188
    e7b4:	9a e0       	ldi	r25, 0x0A	; 10
    e7b6:	a0 e0       	ldi	r26, 0x00	; 0
    e7b8:	81 83       	std	Z+1, r24	; 0x01
    e7ba:	92 83       	std	Z+2, r25	; 0x02
    e7bc:	a3 83       	std	Z+3, r26	; 0x03
    e7be:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

    res = f_opendir(&dirs, buff);
    e7c2:	b8 01       	movw	r22, r16
    e7c4:	ce 01       	movw	r24, r28
    e7c6:	8e 5d       	subi	r24, 0xDE	; 222
    e7c8:	9d 4f       	sbci	r25, 0xFD	; 253
    e7ca:	0e 94 b3 63 	call	0xc766	; 0xc766 <f_opendir>
    if (res) { put_rc(res); return; }
    e7ce:	00 97       	sbiw	r24, 0x00	; 0
    e7d0:	11 f0       	breq	.+4      	; 0xe7d6 <fatfs_ls+0x58>
    e7d2:	23 dd       	rcall	.-1466   	; 0xe21a <put_rc>
    p1 = s1 = s2 = 0;
    e7d4:	8a c0       	rjmp	.+276    	; 0xe8ea <fatfs_ls+0x16c>
    e7d6:	c0 5b       	subi	r28, 0xB0	; 176
    e7d8:	dd 4f       	sbci	r29, 0xFD	; 253
    e7da:	18 82       	st	Y, r1
    e7dc:	19 82       	std	Y+1, r1	; 0x01
    e7de:	1a 82       	std	Y+2, r1	; 0x02
    e7e0:	1b 82       	std	Y+3, r1	; 0x03
    e7e2:	c0 55       	subi	r28, 0x50	; 80
    e7e4:	d2 40       	sbci	r29, 0x02	; 2
    e7e6:	c1 2c       	mov	r12, r1
    e7e8:	d1 2c       	mov	r13, r1
    e7ea:	e1 2c       	mov	r14, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e7ec:	f1 2c       	mov	r15, r1
    e7ee:	be 01       	movw	r22, r28
    e7f0:	64 5f       	subi	r22, 0xF4	; 244
    e7f2:	7f 4f       	sbci	r23, 0xFF	; 255
    e7f4:	ce 01       	movw	r24, r28
    e7f6:	8e 5d       	subi	r24, 0xDE	; 222
    e7f8:	9d 4f       	sbci	r25, 0xFD	; 253
    e7fa:	0e 94 39 64 	call	0xc872	; 0xc872 <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    e7fe:	89 2b       	or	r24, r25
    e800:	49 f5       	brne	.+82     	; 0xe854 <fatfs_ls+0xd6>
    e802:	8a a1       	ldd	r24, Y+34	; 0x22
    e804:	88 23       	and	r24, r24
        if (fno.fattrib & AM_DIR)
    e806:	31 f1       	breq	.+76     	; 0xe854 <fatfs_ls+0xd6>
    e808:	8c 89       	ldd	r24, Y+20	; 0x14
    e80a:	84 ff       	sbrs	r24, 4
        {
            s2++;
    e80c:	04 c0       	rjmp	.+8      	; 0xe816 <fatfs_ls+0x98>
    e80e:	ff ef       	ldi	r31, 0xFF	; 255
    e810:	cf 1a       	sub	r12, r31
    e812:	df 0a       	sbc	r13, r31
        }
        else
        {
            s1++; p1 += fno.fsize;
    e814:	1b c0       	rjmp	.+54     	; 0xe84c <fatfs_ls+0xce>
    e816:	8f ef       	ldi	r24, 0xFF	; 255
    e818:	e8 1a       	sub	r14, r24
    e81a:	f8 0a       	sbc	r15, r24
    e81c:	4c 85       	ldd	r20, Y+12	; 0x0c
    e81e:	5d 85       	ldd	r21, Y+13	; 0x0d
    e820:	6e 85       	ldd	r22, Y+14	; 0x0e
    e822:	7f 85       	ldd	r23, Y+15	; 0x0f
    e824:	c0 5b       	subi	r28, 0xB0	; 176
    e826:	dd 4f       	sbci	r29, 0xFD	; 253
    e828:	88 81       	ld	r24, Y
    e82a:	99 81       	ldd	r25, Y+1	; 0x01
    e82c:	aa 81       	ldd	r26, Y+2	; 0x02
    e82e:	bb 81       	ldd	r27, Y+3	; 0x03
    e830:	c0 55       	subi	r28, 0x50	; 80
    e832:	d2 40       	sbci	r29, 0x02	; 2
    e834:	84 0f       	add	r24, r20
    e836:	95 1f       	adc	r25, r21
    e838:	a6 1f       	adc	r26, r22
    e83a:	b7 1f       	adc	r27, r23
    e83c:	c0 5b       	subi	r28, 0xB0	; 176
    e83e:	dd 4f       	sbci	r29, 0xFD	; 253
    e840:	88 83       	st	Y, r24
    e842:	99 83       	std	Y+1, r25	; 0x01
    e844:	aa 83       	std	Y+2, r26	; 0x02
    e846:	bb 83       	std	Y+3, r27	; 0x03
    e848:	c0 55       	subi	r28, 0x50	; 80
        }
        fatfs_filinfo_list(&fno);
    e84a:	d2 40       	sbci	r29, 0x02	; 2
    e84c:	ce 01       	movw	r24, r28
    e84e:	0c 96       	adiw	r24, 0x0c	; 12
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e850:	f2 de       	rcall	.-540    	; 0xe636 <fatfs_filinfo_list>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e852:	cd cf       	rjmp	.-102    	; 0xe7ee <fatfs_ls+0x70>
    e854:	ed b7       	in	r30, 0x3d	; 61
    e856:	fe b7       	in	r31, 0x3e	; 62
    e858:	d3 86       	std	Z+11, r13	; 0x0b
    e85a:	c2 86       	std	Z+10, r12	; 0x0a
    e85c:	c0 5b       	subi	r28, 0xB0	; 176
    e85e:	dd 4f       	sbci	r29, 0xFD	; 253
    e860:	88 81       	ld	r24, Y
    e862:	99 81       	ldd	r25, Y+1	; 0x01
    e864:	aa 81       	ldd	r26, Y+2	; 0x02
    e866:	bb 81       	ldd	r27, Y+3	; 0x03
    e868:	c0 55       	subi	r28, 0x50	; 80
    e86a:	d2 40       	sbci	r29, 0x02	; 2
    e86c:	86 83       	std	Z+6, r24	; 0x06
    e86e:	97 83       	std	Z+7, r25	; 0x07
    e870:	a0 87       	std	Z+8, r26	; 0x08
    e872:	b1 87       	std	Z+9, r27	; 0x09
    e874:	f5 82       	std	Z+5, r15	; 0x05
    e876:	e4 82       	std	Z+4, r14	; 0x04
    e878:	83 e9       	ldi	r24, 0x93	; 147
    e87a:	9a e0       	ldi	r25, 0x0A	; 10
    e87c:	a0 e0       	ldi	r26, 0x00	; 0
    e87e:	81 83       	std	Z+1, r24	; 0x01
    e880:	92 83       	std	Z+2, r25	; 0x02
    e882:	a3 83       	std	Z+3, r26	; 0x03
    e884:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e888:	ae 01       	movw	r20, r28
    e88a:	4c 5a       	subi	r20, 0xAC	; 172
    e88c:	5d 4f       	sbci	r21, 0xFD	; 253
    e88e:	be 01       	movw	r22, r28
    e890:	60 5b       	subi	r22, 0xB0	; 176
    e892:	7d 4f       	sbci	r23, 0xFD	; 253
    e894:	c8 01       	movw	r24, r16
    e896:	0e 94 bb 64 	call	0xc976	; 0xc976 <f_getfree>
    e89a:	89 2b       	or	r24, r25
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e89c:	31 f5       	brne	.+76     	; 0xe8ea <fatfs_ls+0x16c>
    e89e:	cc 5a       	subi	r28, 0xAC	; 172
    e8a0:	dd 4f       	sbci	r29, 0xFD	; 253
    e8a2:	e8 81       	ld	r30, Y
    e8a4:	f9 81       	ldd	r31, Y+1	; 0x01
    e8a6:	c4 55       	subi	r28, 0x54	; 84
    e8a8:	d2 40       	sbci	r29, 0x02	; 2
    e8aa:	a1 85       	ldd	r26, Z+9	; 0x09
    e8ac:	b2 85       	ldd	r27, Z+10	; 0x0a
    e8ae:	c0 5b       	subi	r28, 0xB0	; 176
    e8b0:	dd 4f       	sbci	r29, 0xFD	; 253
    e8b2:	28 81       	ld	r18, Y
    e8b4:	39 81       	ldd	r19, Y+1	; 0x01
    e8b6:	4a 81       	ldd	r20, Y+2	; 0x02
    e8b8:	5b 81       	ldd	r21, Y+3	; 0x03
    e8ba:	c0 55       	subi	r28, 0x50	; 80
    e8bc:	d2 40       	sbci	r29, 0x02	; 2
    e8be:	0e 94 af e2 	call	0x1c55e	; 0x1c55e <__muluhisi3>
    e8c2:	22 e0       	ldi	r18, 0x02	; 2
    e8c4:	30 e0       	ldi	r19, 0x00	; 0
    e8c6:	40 e0       	ldi	r20, 0x00	; 0
    e8c8:	50 e0       	ldi	r21, 0x00	; 0
    e8ca:	0e 94 84 e2 	call	0x1c508	; 0x1c508 <__divmodsi4>
    e8ce:	ed b7       	in	r30, 0x3d	; 61
    e8d0:	fe b7       	in	r31, 0x3e	; 62
    e8d2:	24 83       	std	Z+4, r18	; 0x04
    e8d4:	35 83       	std	Z+5, r19	; 0x05
    e8d6:	46 83       	std	Z+6, r20	; 0x06
    e8d8:	57 83       	std	Z+7, r21	; 0x07
    e8da:	8e e7       	ldi	r24, 0x7E	; 126
    e8dc:	9a e0       	ldi	r25, 0x0A	; 10
    e8de:	a0 e0       	ldi	r26, 0x00	; 0
    e8e0:	81 83       	std	Z+1, r24	; 0x01
    e8e2:	92 83       	std	Z+2, r25	; 0x02
    e8e4:	a3 83       	std	Z+3, r26	; 0x03
    e8e6:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
}
    e8ea:	cb 5a       	subi	r28, 0xAB	; 171
    e8ec:	dd 4f       	sbci	r29, 0xFD	; 253
    e8ee:	e8 e0       	ldi	r30, 0x08	; 8
    e8f0:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

0000e8f4 <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e8f4:	00 d0       	rcall	.+0      	; 0xe8f6 <mmc_test+0x2>
    e8f6:	1f 92       	push	r1
    printf("==============================\n");
    e8f8:	8c e1       	ldi	r24, 0x1C	; 28
    e8fa:	9b e0       	ldi	r25, 0x0B	; 11
    e8fc:	a0 e0       	ldi	r26, 0x00	; 0
    e8fe:	ed b7       	in	r30, 0x3d	; 61
    e900:	fe b7       	in	r31, 0x3e	; 62
    e902:	81 83       	std	Z+1, r24	; 0x01
    e904:	92 83       	std	Z+2, r25	; 0x02
    e906:	a3 83       	std	Z+3, r26	; 0x03
    e908:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("START MMC TEST\n");
    e90c:	8c e0       	ldi	r24, 0x0C	; 12
    e90e:	9b e0       	ldi	r25, 0x0B	; 11
    e910:	a0 e0       	ldi	r26, 0x00	; 0
    e912:	ed b7       	in	r30, 0x3d	; 61
    e914:	fe b7       	in	r31, 0x3e	; 62
    e916:	81 83       	std	Z+1, r24	; 0x01
    e918:	92 83       	std	Z+2, r25	; 0x02
    e91a:	a3 83       	std	Z+3, r26	; 0x03
    e91c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    fatfs_status("/");
    e920:	85 e9       	ldi	r24, 0x95	; 149
    e922:	98 e0       	ldi	r25, 0x08	; 8
    e924:	0e dd       	rcall	.-1508   	; 0xe342 <fatfs_status>
    printf("MMC Directory List\n");
    e926:	88 ef       	ldi	r24, 0xF8	; 248
    e928:	9a e0       	ldi	r25, 0x0A	; 10
    e92a:	a0 e0       	ldi	r26, 0x00	; 0
    e92c:	ed b7       	in	r30, 0x3d	; 61
    e92e:	fe b7       	in	r31, 0x3e	; 62
    e930:	81 83       	std	Z+1, r24	; 0x01
    e932:	92 83       	std	Z+2, r25	; 0x02
    e934:	a3 83       	std	Z+3, r26	; 0x03
    e936:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    fatfs_ls("/");
    e93a:	85 e9       	ldi	r24, 0x95	; 149
    e93c:	98 e0       	ldi	r25, 0x08	; 8
    e93e:	1f df       	rcall	.-450    	; 0xe77e <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e940:	8a ee       	ldi	r24, 0xEA	; 234
    e942:	9a e0       	ldi	r25, 0x0A	; 10
    e944:	a0 e0       	ldi	r26, 0x00	; 0
    e946:	ed b7       	in	r30, 0x3d	; 61
    e948:	fe b7       	in	r31, 0x3e	; 62
    e94a:	81 83       	std	Z+1, r24	; 0x01
    e94c:	92 83       	std	Z+2, r25	; 0x02
    e94e:	a3 83       	std	Z+3, r26	; 0x03
    e950:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("==============================\n");
    e954:	8a ec       	ldi	r24, 0xCA	; 202
    e956:	9a e0       	ldi	r25, 0x0A	; 10
    e958:	a0 e0       	ldi	r26, 0x00	; 0
    e95a:	ed b7       	in	r30, 0x3d	; 61
    e95c:	fe b7       	in	r31, 0x3e	; 62
    e95e:	81 83       	std	Z+1, r24	; 0x01
    e960:	92 83       	std	Z+2, r25	; 0x02
    e962:	a3 83       	std	Z+3, r26	; 0x03
    e964:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
}
    e968:	0f 90       	pop	r0
    e96a:	0f 90       	pop	r0
    e96c:	0f 90       	pop	r0
    e96e:	08 95       	ret

0000e970 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e970:	ef 92       	push	r14
    e972:	ff 92       	push	r15
    e974:	0f 93       	push	r16
    e976:	1f 93       	push	r17
    e978:	cf 93       	push	r28
    e97a:	df 93       	push	r29
    e97c:	ad b7       	in	r26, 0x3d	; 61
    e97e:	be b7       	in	r27, 0x3e	; 62
    e980:	17 97       	sbiw	r26, 0x07	; 7
    e982:	0f b6       	in	r0, 0x3f	; 63
    e984:	f8 94       	cli
    e986:	be bf       	out	0x3e, r27	; 62
    e988:	0f be       	out	0x3f, r0	; 63
    e98a:	ad bf       	out	0x3d, r26	; 61
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
    e98c:	fb 01       	movw	r30, r22
    e98e:	20 81       	ld	r18, Z
    e990:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    e992:	21 15       	cp	r18, r1
    e994:	31 05       	cpc	r19, r1
    e996:	19 f4       	brne	.+6      	; 0xe99e <fatfs_tests+0x2e>
        return(0);
    e998:	80 e0       	ldi	r24, 0x00	; 0
    e99a:	90 e0       	ldi	r25, 0x00	; 0
    e99c:	73 c0       	rjmp	.+230    	; 0xea84 <fatfs_tests+0x114>
    e99e:	eb 01       	movw	r28, r22
    e9a0:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    e9a2:	61 ec       	ldi	r22, 0xC1	; 193
    e9a4:	78 e0       	ldi	r23, 0x08	; 8
    e9a6:	c9 01       	movw	r24, r18
    e9a8:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
    e9ac:	89 2b       	or	r24, r25
    e9ae:	a1 f3       	breq	.-24     	; 0xe998 <fatfs_tests+0x28>
    {
        ptr = argv[ind++];
    e9b0:	ea 80       	ldd	r14, Y+2	; 0x02
    e9b2:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    e9b4:	e1 14       	cp	r14, r1
    e9b6:	f1 04       	cpc	r15, r1
    e9b8:	21 f4       	brne	.+8      	; 0xe9c2 <fatfs_tests+0x52>
        {
            fatfs_help(1);
    e9ba:	81 e0       	ldi	r24, 0x01	; 1
    e9bc:	90 e0       	ldi	r25, 0x00	; 0
    e9be:	be de       	rcall	.-644    	; 0xe73c <fatfs_help>
    e9c0:	5f c0       	rjmp	.+190    	; 0xea80 <fatfs_tests+0x110>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    e9c2:	69 e8       	ldi	r22, 0x89	; 137
    e9c4:	76 e1       	ldi	r23, 0x16	; 22
    e9c6:	c7 01       	movw	r24, r14
    e9c8:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
    e9cc:	89 2b       	or	r24, r25
    e9ce:	a9 f7       	brne	.-22     	; 0xe9ba <fatfs_tests+0x4a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    e9d0:	98 01       	movw	r18, r16
    e9d2:	42 e0       	ldi	r20, 0x02	; 2
    e9d4:	50 e0       	ldi	r21, 0x00	; 0
    e9d6:	67 ec       	ldi	r22, 0xC7	; 199
    e9d8:	78 e0       	ldi	r23, 0x08	; 8
    e9da:	c7 01       	movw	r24, r14
    e9dc:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
    e9e0:	89 2b       	or	r24, r25
    e9e2:	31 f1       	breq	.+76     	; 0xea30 <fatfs_tests+0xc0>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    e9e4:	ed b7       	in	r30, 0x3d	; 61
    e9e6:	fe b7       	in	r31, 0x3e	; 62
    e9e8:	17 83       	std	Z+7, r17	; 0x07
    e9ea:	06 83       	std	Z+6, r16	; 0x06
    e9ec:	82 e0       	ldi	r24, 0x02	; 2
    e9ee:	90 e0       	ldi	r25, 0x00	; 0
    e9f0:	95 83       	std	Z+5, r25	; 0x05
    e9f2:	84 83       	std	Z+4, r24	; 0x04
    e9f4:	8c e3       	ldi	r24, 0x3C	; 60
    e9f6:	9b e0       	ldi	r25, 0x0B	; 11
    e9f8:	a0 e0       	ldi	r26, 0x00	; 0
    e9fa:	81 83       	std	Z+1, r24	; 0x01
    e9fc:	92 83       	std	Z+2, r25	; 0x02
    e9fe:	a3 83       	std	Z+3, r26	; 0x03
    ea00:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    ea04:	7e 01       	movw	r14, r28
    ea06:	f4 e0       	ldi	r31, 0x04	; 4
    ea08:	ef 0e       	add	r14, r31
    ea0a:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    ea0c:	c2 e0       	ldi	r28, 0x02	; 2
    ea0e:	d0 e0       	ldi	r29, 0x00	; 0
    ea10:	c0 17       	cp	r28, r16
    ea12:	d1 07       	cpc	r29, r17
    ea14:	3c f4       	brge	.+14     	; 0xea24 <fatfs_tests+0xb4>
        {
//printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    ea16:	f7 01       	movw	r30, r14
    ea18:	81 91       	ld	r24, Z+
    ea1a:	91 91       	ld	r25, Z+
    ea1c:	7f 01       	movw	r14, r30
    ea1e:	af de       	rcall	.-674    	; 0xe77e <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    ea20:	21 96       	adiw	r28, 0x01	; 1
    ea22:	f6 cf       	rjmp	.-20     	; 0xea10 <fatfs_tests+0xa0>
        {
//printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    ea24:	22 97       	sbiw	r28, 0x02	; 2
        {
            fatfs_ls("");
    ea26:	61 f5       	brne	.+88     	; 0xea80 <fatfs_tests+0x110>
    ea28:	89 e1       	ldi	r24, 0x19	; 25
    ea2a:	9c e0       	ldi	r25, 0x0C	; 12
    ea2c:	a8 de       	rcall	.-688    	; 0xe77e <fatfs_ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    ea2e:	28 c0       	rjmp	.+80     	; 0xea80 <fatfs_tests+0x110>
    ea30:	98 01       	movw	r18, r16
    ea32:	42 e0       	ldi	r20, 0x02	; 2
    ea34:	50 e0       	ldi	r21, 0x00	; 0
    ea36:	6a ec       	ldi	r22, 0xCA	; 202
    ea38:	78 e0       	ldi	r23, 0x08	; 8
    ea3a:	c7 01       	movw	r24, r14
    ea3c:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
    {
        mmc_test();
    ea40:	89 2b       	or	r24, r25
    ea42:	11 f0       	breq	.+4      	; 0xea48 <fatfs_tests+0xd8>
    ea44:	57 df       	rcall	.-338    	; 0xe8f4 <mmc_test>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    ea46:	1c c0       	rjmp	.+56     	; 0xea80 <fatfs_tests+0x110>
    ea48:	98 01       	movw	r18, r16
    ea4a:	42 e0       	ldi	r20, 0x02	; 2
    ea4c:	50 e0       	ldi	r21, 0x00	; 0
    ea4e:	63 ed       	ldi	r22, 0xD3	; 211
    ea50:	78 e0       	ldi	r23, 0x08	; 8
    ea52:	c7 01       	movw	r24, r14
    ea54:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
    {
        mmc_init(1);
    ea58:	89 2b       	or	r24, r25
    ea5a:	21 f0       	breq	.+8      	; 0xea64 <fatfs_tests+0xf4>
    ea5c:	81 e0       	ldi	r24, 0x01	; 1
    ea5e:	90 e0       	ldi	r25, 0x00	; 0
    ea60:	99 da       	rcall	.-2766   	; 0xdf94 <mmc_init>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    ea62:	0e c0       	rjmp	.+28     	; 0xea80 <fatfs_tests+0x110>
    ea64:	98 01       	movw	r18, r16
    ea66:	43 e0       	ldi	r20, 0x03	; 3
    ea68:	50 e0       	ldi	r21, 0x00	; 0
    ea6a:	6c ed       	ldi	r22, 0xDC	; 220
    ea6c:	78 e0       	ldi	r23, 0x08	; 8
    ea6e:	c7 01       	movw	r24, r14
    ea70:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
    ea74:	89 2b       	or	r24, r25
    {
        fatfs_status(argv[ind]);
    ea76:	09 f4       	brne	.+2      	; 0xea7a <fatfs_tests+0x10a>
    ea78:	8f cf       	rjmp	.-226    	; 0xe998 <fatfs_tests+0x28>
    ea7a:	8c 81       	ldd	r24, Y+4	; 0x04
    ea7c:	9d 81       	ldd	r25, Y+5	; 0x05
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    ea7e:	61 dc       	rcall	.-1854   	; 0xe342 <fatfs_status>
    ea80:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
    ea82:	90 e0       	ldi	r25, 0x00	; 0
    ea84:	cd b7       	in	r28, 0x3d	; 61
    ea86:	de b7       	in	r29, 0x3e	; 62
    ea88:	27 96       	adiw	r28, 0x07	; 7
    ea8a:	e6 e0       	ldi	r30, 0x06	; 6
    ea8c:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

0000ea90 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    ea90:	8f 92       	push	r8
    ea92:	9f 92       	push	r9
    ea94:	af 92       	push	r10
    ea96:	bf 92       	push	r11
    ea98:	ef 92       	push	r14
    ea9a:	ff 92       	push	r15
    ea9c:	0f 93       	push	r16
    ea9e:	1f 93       	push	r17
    eaa0:	cf 93       	push	r28
    eaa2:	df 93       	push	r29
    eaa4:	00 d0       	rcall	.+0      	; 0xeaa6 <fatfs_getc+0x16>
    eaa6:	1f 92       	push	r1
    eaa8:	cd b7       	in	r28, 0x3d	; 61
    eaaa:	de b7       	in	r29, 0x3e	; 62
    eaac:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <errno+0x1>
    eab0:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <errno>
    eab4:	00 97       	sbiw	r24, 0x00	; 0
    eab6:	39 f4       	brne	.+14     	; 0xeac6 <fatfs_getc+0x36>
    eab8:	89 e0       	ldi	r24, 0x09	; 9
    eaba:	90 e0       	ldi	r25, 0x00	; 0
    eabc:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    eac0:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    eac4:	2f c0       	rjmp	.+94     	; 0xeb24 <fatfs_getc+0x94>
    eac6:	fc 01       	movw	r30, r24
    eac8:	e4 84       	ldd	r14, Z+12	; 0x0c
    eaca:	f5 84       	ldd	r15, Z+13	; 0x0d
    eacc:	e1 14       	cp	r14, r1
    eace:	f1 04       	cpc	r15, r1
    ead0:	99 f3       	breq	.-26     	; 0xeab8 <fatfs_getc+0x28>
    ead2:	8c 01       	movw	r16, r24
    ead4:	9e 01       	movw	r18, r28
    ead6:	2f 5f       	subi	r18, 0xFF	; 255
    ead8:	3f 4f       	sbci	r19, 0xFF	; 255
    eada:	41 e0       	ldi	r20, 0x01	; 1
    eadc:	50 e0       	ldi	r21, 0x00	; 0
    eade:	be 01       	movw	r22, r28
    eae0:	6d 5f       	subi	r22, 0xFD	; 253
    eae2:	7f 4f       	sbci	r23, 0xFF	; 255
    eae4:	c7 01       	movw	r24, r14
    eae6:	0e 94 eb 5b 	call	0xb7d6	; 0xb7d6 <f_read>
    eaea:	00 97       	sbiw	r24, 0x00	; 0
    eaec:	31 f4       	brne	.+12     	; 0xeafa <fatfs_getc+0x6a>
    eaee:	29 81       	ldd	r18, Y+1	; 0x01
    eaf0:	3a 81       	ldd	r19, Y+2	; 0x02
    eaf2:	21 30       	cpi	r18, 0x01	; 1
    eaf4:	31 05       	cpc	r19, r1
    eaf6:	c9 f0       	breq	.+50     	; 0xeb2a <fatfs_getc+0x9a>
    eaf8:	03 c0       	rjmp	.+6      	; 0xeb00 <fatfs_getc+0x70>
    eafa:	84 31       	cpi	r24, 0x14	; 20
    eafc:	91 05       	cpc	r25, r1
    eafe:	40 f4       	brcc	.+16     	; 0xeb10 <fatfs_getc+0x80>
    eb00:	fc 01       	movw	r30, r24
    eb02:	eb 56       	subi	r30, 0x6B	; 107
    eb04:	f4 4f       	sbci	r31, 0xF4	; 244
    eb06:	80 81       	ld	r24, Z
    eb08:	08 2e       	mov	r0, r24
    eb0a:	00 0c       	add	r0, r0
    eb0c:	99 0b       	sbc	r25, r25
    eb0e:	02 c0       	rjmp	.+4      	; 0xeb14 <fatfs_getc+0x84>
    eb10:	83 e2       	ldi	r24, 0x23	; 35
    eb12:	90 e0       	ldi	r25, 0x00	; 0
    eb14:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    eb18:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    eb1c:	f8 01       	movw	r30, r16
    eb1e:	83 81       	ldd	r24, Z+3	; 0x03
    eb20:	80 62       	ori	r24, 0x20	; 32
    eb22:	83 83       	std	Z+3, r24	; 0x03
    eb24:	8f ef       	ldi	r24, 0xFF	; 255
    eb26:	9f ef       	ldi	r25, 0xFF	; 255
    eb28:	28 c0       	rjmp	.+80     	; 0xeb7a <fatfs_getc+0xea>
    eb2a:	8b 81       	ldd	r24, Y+3	; 0x03
    eb2c:	8d 30       	cpi	r24, 0x0D	; 13
    eb2e:	01 f5       	brne	.+64     	; 0xeb70 <fatfs_getc+0xe0>
    eb30:	f7 01       	movw	r30, r14
    eb32:	80 88       	ldd	r8, Z+16	; 0x10
    eb34:	91 88       	ldd	r9, Z+17	; 0x11
    eb36:	a2 88       	ldd	r10, Z+18	; 0x12
    eb38:	b3 88       	ldd	r11, Z+19	; 0x13
    eb3a:	9e 01       	movw	r18, r28
    eb3c:	2f 5f       	subi	r18, 0xFF	; 255
    eb3e:	3f 4f       	sbci	r19, 0xFF	; 255
    eb40:	41 e0       	ldi	r20, 0x01	; 1
    eb42:	50 e0       	ldi	r21, 0x00	; 0
    eb44:	be 01       	movw	r22, r28
    eb46:	6d 5f       	subi	r22, 0xFD	; 253
    eb48:	7f 4f       	sbci	r23, 0xFF	; 255
    eb4a:	c7 01       	movw	r24, r14
    eb4c:	0e 94 eb 5b 	call	0xb7d6	; 0xb7d6 <f_read>
    eb50:	89 2b       	or	r24, r25
    eb52:	89 f4       	brne	.+34     	; 0xeb76 <fatfs_getc+0xe6>
    eb54:	89 81       	ldd	r24, Y+1	; 0x01
    eb56:	9a 81       	ldd	r25, Y+2	; 0x02
    eb58:	01 97       	sbiw	r24, 0x01	; 1
    eb5a:	69 f4       	brne	.+26     	; 0xeb76 <fatfs_getc+0xe6>
    eb5c:	8b 81       	ldd	r24, Y+3	; 0x03
    eb5e:	8a 30       	cpi	r24, 0x0A	; 10
    eb60:	31 f0       	breq	.+12     	; 0xeb6e <fatfs_getc+0xde>
    eb62:	b5 01       	movw	r22, r10
    eb64:	a4 01       	movw	r20, r8
    eb66:	c7 01       	movw	r24, r14
    eb68:	0e 94 f7 60 	call	0xc1ee	; 0xc1ee <f_lseek>
    eb6c:	04 c0       	rjmp	.+8      	; 0xeb76 <fatfs_getc+0xe6>
    eb6e:	8b 83       	std	Y+3, r24	; 0x03
    eb70:	8b 81       	ldd	r24, Y+3	; 0x03
    eb72:	90 e0       	ldi	r25, 0x00	; 0
    eb74:	02 c0       	rjmp	.+4      	; 0xeb7a <fatfs_getc+0xea>
    eb76:	8a e0       	ldi	r24, 0x0A	; 10
    eb78:	90 e0       	ldi	r25, 0x00	; 0
    eb7a:	0f 90       	pop	r0
    eb7c:	0f 90       	pop	r0
    eb7e:	0f 90       	pop	r0
    eb80:	df 91       	pop	r29
    eb82:	cf 91       	pop	r28
    eb84:	1f 91       	pop	r17
    eb86:	0f 91       	pop	r16
    eb88:	ff 90       	pop	r15
    eb8a:	ef 90       	pop	r14
    eb8c:	bf 90       	pop	r11
    eb8e:	af 90       	pop	r10
    eb90:	9f 90       	pop	r9
    eb92:	8f 90       	pop	r8
    eb94:	08 95       	ret

0000eb96 <fatfs_putc>:
    eb96:	a3 e0       	ldi	r26, 0x03	; 3
    eb98:	b0 e0       	ldi	r27, 0x00	; 0
    eb9a:	e1 ed       	ldi	r30, 0xD1	; 209
    eb9c:	f5 e7       	ldi	r31, 0x75	; 117
    eb9e:	0c 94 dd e2 	jmp	0x1c5ba	; 0x1c5ba <__prologue_saves__+0x1c>
    eba2:	8b 83       	std	Y+3, r24	; 0x03
    eba4:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <errno+0x1>
    eba8:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <errno>
    ebac:	61 15       	cp	r22, r1
    ebae:	71 05       	cpc	r23, r1
    ebb0:	39 f4       	brne	.+14     	; 0xebc0 <fatfs_putc+0x2a>
    ebb2:	89 e0       	ldi	r24, 0x09	; 9
    ebb4:	90 e0       	ldi	r25, 0x00	; 0
    ebb6:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    ebba:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    ebbe:	2d c0       	rjmp	.+90     	; 0xec1a <fatfs_putc+0x84>
    ebc0:	fb 01       	movw	r30, r22
    ebc2:	84 85       	ldd	r24, Z+12	; 0x0c
    ebc4:	95 85       	ldd	r25, Z+13	; 0x0d
    ebc6:	00 97       	sbiw	r24, 0x00	; 0
    ebc8:	a1 f3       	breq	.-24     	; 0xebb2 <fatfs_putc+0x1c>
    ebca:	8b 01       	movw	r16, r22
    ebcc:	9e 01       	movw	r18, r28
    ebce:	2f 5f       	subi	r18, 0xFF	; 255
    ebd0:	3f 4f       	sbci	r19, 0xFF	; 255
    ebd2:	41 e0       	ldi	r20, 0x01	; 1
    ebd4:	50 e0       	ldi	r21, 0x00	; 0
    ebd6:	be 01       	movw	r22, r28
    ebd8:	6d 5f       	subi	r22, 0xFD	; 253
    ebda:	7f 4f       	sbci	r23, 0xFF	; 255
    ebdc:	0e 94 36 5d 	call	0xba6c	; 0xba6c <f_write>
    ebe0:	00 97       	sbiw	r24, 0x00	; 0
    ebe2:	31 f4       	brne	.+12     	; 0xebf0 <fatfs_putc+0x5a>
    ebe4:	29 81       	ldd	r18, Y+1	; 0x01
    ebe6:	3a 81       	ldd	r19, Y+2	; 0x02
    ebe8:	21 30       	cpi	r18, 0x01	; 1
    ebea:	31 05       	cpc	r19, r1
    ebec:	c9 f0       	breq	.+50     	; 0xec20 <fatfs_putc+0x8a>
    ebee:	03 c0       	rjmp	.+6      	; 0xebf6 <fatfs_putc+0x60>
    ebf0:	84 31       	cpi	r24, 0x14	; 20
    ebf2:	91 05       	cpc	r25, r1
    ebf4:	40 f4       	brcc	.+16     	; 0xec06 <fatfs_putc+0x70>
    ebf6:	fc 01       	movw	r30, r24
    ebf8:	eb 56       	subi	r30, 0x6B	; 107
    ebfa:	f4 4f       	sbci	r31, 0xF4	; 244
    ebfc:	80 81       	ld	r24, Z
    ebfe:	08 2e       	mov	r0, r24
    ec00:	00 0c       	add	r0, r0
    ec02:	99 0b       	sbc	r25, r25
    ec04:	02 c0       	rjmp	.+4      	; 0xec0a <fatfs_putc+0x74>
    ec06:	83 e2       	ldi	r24, 0x23	; 35
    ec08:	90 e0       	ldi	r25, 0x00	; 0
    ec0a:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    ec0e:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    ec12:	f8 01       	movw	r30, r16
    ec14:	83 81       	ldd	r24, Z+3	; 0x03
    ec16:	80 62       	ori	r24, 0x20	; 32
    ec18:	83 83       	std	Z+3, r24	; 0x03
    ec1a:	8f ef       	ldi	r24, 0xFF	; 255
    ec1c:	9f ef       	ldi	r25, 0xFF	; 255
    ec1e:	02 c0       	rjmp	.+4      	; 0xec24 <fatfs_putc+0x8e>
    ec20:	8b 81       	ldd	r24, Y+3	; 0x03
    ec22:	90 e0       	ldi	r25, 0x00	; 0
    ec24:	23 96       	adiw	r28, 0x03	; 3
    ec26:	e4 e0       	ldi	r30, 0x04	; 4
    ec28:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

0000ec2c <fgetc>:
    ec2c:	cf 93       	push	r28
    ec2e:	df 93       	push	r29
    ec30:	00 d0       	rcall	.+0      	; 0xec32 <fgetc+0x6>
    ec32:	1f 92       	push	r1
    ec34:	ec 01       	movw	r28, r24
    ec36:	00 97       	sbiw	r24, 0x00	; 0
    ec38:	39 f4       	brne	.+14     	; 0xec48 <fgetc+0x1c>
    ec3a:	89 e0       	ldi	r24, 0x09	; 9
    ec3c:	90 e0       	ldi	r25, 0x00	; 0
    ec3e:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    ec42:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    ec46:	40 c0       	rjmp	.+128    	; 0xecc8 <fgetc+0x9c>
    ec48:	2b 81       	ldd	r18, Y+3	; 0x03
    ec4a:	20 ff       	sbrs	r18, 0
    ec4c:	3d c0       	rjmp	.+122    	; 0xecc8 <fgetc+0x9c>
    ec4e:	26 ff       	sbrs	r18, 6
    ec50:	0a c0       	rjmp	.+20     	; 0xec66 <fgetc+0x3a>
    ec52:	2f 7b       	andi	r18, 0xBF	; 191
    ec54:	2b 83       	std	Y+3, r18	; 0x03
    ec56:	8e 81       	ldd	r24, Y+6	; 0x06
    ec58:	9f 81       	ldd	r25, Y+7	; 0x07
    ec5a:	01 96       	adiw	r24, 0x01	; 1
    ec5c:	9f 83       	std	Y+7, r25	; 0x07
    ec5e:	8e 83       	std	Y+6, r24	; 0x06
    ec60:	8a 81       	ldd	r24, Y+2	; 0x02
    ec62:	90 e0       	ldi	r25, 0x00	; 0
    ec64:	33 c0       	rjmp	.+102    	; 0xeccc <fgetc+0xa0>
    ec66:	22 ff       	sbrs	r18, 2
    ec68:	0d c0       	rjmp	.+26     	; 0xec84 <fgetc+0x58>
    ec6a:	e8 81       	ld	r30, Y
    ec6c:	f9 81       	ldd	r31, Y+1	; 0x01
    ec6e:	80 81       	ld	r24, Z
    ec70:	90 e0       	ldi	r25, 0x00	; 0
    ec72:	00 97       	sbiw	r24, 0x00	; 0
    ec74:	19 f4       	brne	.+6      	; 0xec7c <fgetc+0x50>
    ec76:	20 62       	ori	r18, 0x20	; 32
    ec78:	2b 83       	std	Y+3, r18	; 0x03
    ec7a:	26 c0       	rjmp	.+76     	; 0xecc8 <fgetc+0x9c>
    ec7c:	31 96       	adiw	r30, 0x01	; 1
    ec7e:	f9 83       	std	Y+1, r31	; 0x01
    ec80:	e8 83       	st	Y, r30
    ec82:	1b c0       	rjmp	.+54     	; 0xecba <fgetc+0x8e>
    ec84:	ea 85       	ldd	r30, Y+10	; 0x0a
    ec86:	fb 85       	ldd	r31, Y+11	; 0x0b
    ec88:	30 97       	sbiw	r30, 0x00	; 0
    ec8a:	59 f4       	brne	.+22     	; 0xeca2 <fgetc+0x76>
    ec8c:	84 e0       	ldi	r24, 0x04	; 4
    ec8e:	9c e0       	ldi	r25, 0x0C	; 12
    ec90:	a0 e0       	ldi	r26, 0x00	; 0
    ec92:	ed b7       	in	r30, 0x3d	; 61
    ec94:	fe b7       	in	r31, 0x3e	; 62
    ec96:	81 83       	std	Z+1, r24	; 0x01
    ec98:	92 83       	std	Z+2, r25	; 0x02
    ec9a:	a3 83       	std	Z+3, r26	; 0x03
    ec9c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    eca0:	13 c0       	rjmp	.+38     	; 0xecc8 <fgetc+0x9c>
    eca2:	09 95       	icall
    eca4:	97 ff       	sbrs	r25, 7
    eca6:	09 c0       	rjmp	.+18     	; 0xecba <fgetc+0x8e>
    eca8:	2b 81       	ldd	r18, Y+3	; 0x03
    ecaa:	02 96       	adiw	r24, 0x02	; 2
    ecac:	11 f0       	breq	.+4      	; 0xecb2 <fgetc+0x86>
    ecae:	80 e2       	ldi	r24, 0x20	; 32
    ecb0:	01 c0       	rjmp	.+2      	; 0xecb4 <fgetc+0x88>
    ecb2:	80 e1       	ldi	r24, 0x10	; 16
    ecb4:	82 2b       	or	r24, r18
    ecb6:	8b 83       	std	Y+3, r24	; 0x03
    ecb8:	07 c0       	rjmp	.+14     	; 0xecc8 <fgetc+0x9c>
    ecba:	2e 81       	ldd	r18, Y+6	; 0x06
    ecbc:	3f 81       	ldd	r19, Y+7	; 0x07
    ecbe:	2f 5f       	subi	r18, 0xFF	; 255
    ecc0:	3f 4f       	sbci	r19, 0xFF	; 255
    ecc2:	3f 83       	std	Y+7, r19	; 0x07
    ecc4:	2e 83       	std	Y+6, r18	; 0x06
    ecc6:	02 c0       	rjmp	.+4      	; 0xeccc <fgetc+0xa0>
    ecc8:	8f ef       	ldi	r24, 0xFF	; 255
    ecca:	9f ef       	ldi	r25, 0xFF	; 255
    eccc:	cd b7       	in	r28, 0x3d	; 61
    ecce:	de b7       	in	r29, 0x3e	; 62
    ecd0:	23 96       	adiw	r28, 0x03	; 3
    ecd2:	e2 e0       	ldi	r30, 0x02	; 2
    ecd4:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

0000ecd8 <fputc>:
    ecd8:	cf 93       	push	r28
    ecda:	df 93       	push	r29
    ecdc:	00 d0       	rcall	.+0      	; 0xecde <fputc+0x6>
    ecde:	1f 92       	push	r1
    ece0:	eb 01       	movw	r28, r22
    ece2:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <errno+0x1>
    ece6:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <errno>
    ecea:	20 91 b4 1c 	lds	r18, 0x1CB4	; 0x801cb4 <__iob+0x2>
    ecee:	30 91 b5 1c 	lds	r19, 0x1CB5	; 0x801cb5 <__iob+0x3>
    ecf2:	62 17       	cp	r22, r18
    ecf4:	73 07       	cpc	r23, r19
    ecf6:	49 f0       	breq	.+18     	; 0xed0a <fputc+0x32>
    ecf8:	20 91 b6 1c 	lds	r18, 0x1CB6	; 0x801cb6 <__iob+0x4>
    ecfc:	30 91 b7 1c 	lds	r19, 0x1CB7	; 0x801cb7 <__iob+0x5>
    ed00:	62 17       	cp	r22, r18
    ed02:	73 07       	cpc	r23, r19
    ed04:	11 f0       	breq	.+4      	; 0xed0a <fputc+0x32>
    ed06:	47 df       	rcall	.-370    	; 0xeb96 <fatfs_putc>
    ed08:	33 c0       	rjmp	.+102    	; 0xed70 <fputc+0x98>
    ed0a:	2b 81       	ldd	r18, Y+3	; 0x03
    ed0c:	21 ff       	sbrs	r18, 1
    ed0e:	2e c0       	rjmp	.+92     	; 0xed6c <fputc+0x94>
    ed10:	22 ff       	sbrs	r18, 2
    ed12:	10 c0       	rjmp	.+32     	; 0xed34 <fputc+0x5c>
    ed14:	4e 81       	ldd	r20, Y+6	; 0x06
    ed16:	5f 81       	ldd	r21, Y+7	; 0x07
    ed18:	2c 81       	ldd	r18, Y+4	; 0x04
    ed1a:	3d 81       	ldd	r19, Y+5	; 0x05
    ed1c:	42 17       	cp	r20, r18
    ed1e:	53 07       	cpc	r21, r19
    ed20:	f4 f4       	brge	.+60     	; 0xed5e <fputc+0x86>
    ed22:	e8 81       	ld	r30, Y
    ed24:	f9 81       	ldd	r31, Y+1	; 0x01
    ed26:	9f 01       	movw	r18, r30
    ed28:	2f 5f       	subi	r18, 0xFF	; 255
    ed2a:	3f 4f       	sbci	r19, 0xFF	; 255
    ed2c:	39 83       	std	Y+1, r19	; 0x01
    ed2e:	28 83       	st	Y, r18
    ed30:	80 83       	st	Z, r24
    ed32:	15 c0       	rjmp	.+42     	; 0xed5e <fputc+0x86>
    ed34:	e8 85       	ldd	r30, Y+8	; 0x08
    ed36:	f9 85       	ldd	r31, Y+9	; 0x09
    ed38:	30 97       	sbiw	r30, 0x00	; 0
    ed3a:	59 f4       	brne	.+22     	; 0xed52 <fputc+0x7a>
    ed3c:	8c ee       	ldi	r24, 0xEC	; 236
    ed3e:	9b e0       	ldi	r25, 0x0B	; 11
    ed40:	a0 e0       	ldi	r26, 0x00	; 0
    ed42:	ed b7       	in	r30, 0x3d	; 61
    ed44:	fe b7       	in	r31, 0x3e	; 62
    ed46:	81 83       	std	Z+1, r24	; 0x01
    ed48:	92 83       	std	Z+2, r25	; 0x02
    ed4a:	a3 83       	std	Z+3, r26	; 0x03
    ed4c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    ed50:	0d c0       	rjmp	.+26     	; 0xed6c <fputc+0x94>
    ed52:	be 01       	movw	r22, r28
    ed54:	09 95       	icall
    ed56:	8f 3f       	cpi	r24, 0xFF	; 255
    ed58:	ff ef       	ldi	r31, 0xFF	; 255
    ed5a:	9f 07       	cpc	r25, r31
    ed5c:	39 f0       	breq	.+14     	; 0xed6c <fputc+0x94>
    ed5e:	2e 81       	ldd	r18, Y+6	; 0x06
    ed60:	3f 81       	ldd	r19, Y+7	; 0x07
    ed62:	2f 5f       	subi	r18, 0xFF	; 255
    ed64:	3f 4f       	sbci	r19, 0xFF	; 255
    ed66:	3f 83       	std	Y+7, r19	; 0x07
    ed68:	2e 83       	std	Y+6, r18	; 0x06
    ed6a:	02 c0       	rjmp	.+4      	; 0xed70 <fputc+0x98>
    ed6c:	8f ef       	ldi	r24, 0xFF	; 255
    ed6e:	9f ef       	ldi	r25, 0xFF	; 255
    ed70:	cd b7       	in	r28, 0x3d	; 61
    ed72:	de b7       	in	r29, 0x3e	; 62
    ed74:	23 96       	adiw	r28, 0x03	; 3
    ed76:	e2 e0       	ldi	r30, 0x02	; 2
    ed78:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

0000ed7c <_fprintf_putc>:
    ed7c:	fc 01       	movw	r30, r24
    ed7e:	86 2f       	mov	r24, r22
    ed80:	26 81       	ldd	r18, Z+6	; 0x06
    ed82:	37 81       	ldd	r19, Z+7	; 0x07
    ed84:	2f 5f       	subi	r18, 0xFF	; 255
    ed86:	3f 4f       	sbci	r19, 0xFF	; 255
    ed88:	37 83       	std	Z+7, r19	; 0x07
    ed8a:	26 83       	std	Z+6, r18	; 0x06
    ed8c:	62 81       	ldd	r22, Z+2	; 0x02
    ed8e:	73 81       	ldd	r23, Z+3	; 0x03
    ed90:	90 e0       	ldi	r25, 0x00	; 0
    ed92:	a2 cf       	rjmp	.-188    	; 0xecd8 <fputc>
    ed94:	08 95       	ret

0000ed96 <getchar>:
    ed96:	80 91 b2 1c 	lds	r24, 0x1CB2	; 0x801cb2 <__iob>
    ed9a:	90 91 b3 1c 	lds	r25, 0x1CB3	; 0x801cb3 <__iob+0x1>
    ed9e:	46 cf       	rjmp	.-372    	; 0xec2c <fgetc>
    eda0:	08 95       	ret

0000eda2 <putchar>:
    eda2:	60 91 b4 1c 	lds	r22, 0x1CB4	; 0x801cb4 <__iob+0x2>
    eda6:	70 91 b5 1c 	lds	r23, 0x1CB5	; 0x801cb5 <__iob+0x3>
    edaa:	96 cf       	rjmp	.-212    	; 0xecd8 <fputc>
    edac:	08 95       	ret

0000edae <fgets>:
    edae:	a0 e0       	ldi	r26, 0x00	; 0
    edb0:	b0 e0       	ldi	r27, 0x00	; 0
    edb2:	ed ed       	ldi	r30, 0xDD	; 221
    edb4:	f6 e7       	ldi	r31, 0x76	; 118
    edb6:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
    edba:	7c 01       	movw	r14, r24
    edbc:	6a 01       	movw	r12, r20
    edbe:	8b 01       	movw	r16, r22
    edc0:	c0 e0       	ldi	r28, 0x00	; 0
    edc2:	d0 e0       	ldi	r29, 0x00	; 0
    edc4:	01 15       	cp	r16, r1
    edc6:	11 05       	cpc	r17, r1
    edc8:	41 f0       	breq	.+16     	; 0xedda <fgets+0x2c>
    edca:	c6 01       	movw	r24, r12
    edcc:	2f df       	rcall	.-418    	; 0xec2c <fgetc>
    edce:	8f 3f       	cpi	r24, 0xFF	; 255
    edd0:	2f ef       	ldi	r18, 0xFF	; 255
    edd2:	92 07       	cpc	r25, r18
    edd4:	39 f4       	brne	.+14     	; 0xede4 <fgets+0x36>
    edd6:	20 97       	sbiw	r28, 0x00	; 0
    edd8:	b9 f0       	breq	.+46     	; 0xee08 <fgets+0x5a>
    edda:	ce 0d       	add	r28, r14
    eddc:	df 1d       	adc	r29, r15
    edde:	18 82       	st	Y, r1
    ede0:	c7 01       	movw	r24, r14
    ede2:	14 c0       	rjmp	.+40     	; 0xee0c <fgets+0x5e>
    ede4:	8a 30       	cpi	r24, 0x0A	; 10
    ede6:	91 05       	cpc	r25, r1
    ede8:	c1 f3       	breq	.-16     	; 0xedda <fgets+0x2c>
    edea:	88 30       	cpi	r24, 0x08	; 8
    edec:	91 05       	cpc	r25, r1
    edee:	21 f4       	brne	.+8      	; 0xedf8 <fgets+0x4a>
    edf0:	20 97       	sbiw	r28, 0x00	; 0
    edf2:	39 f0       	breq	.+14     	; 0xee02 <fgets+0x54>
    edf4:	21 97       	sbiw	r28, 0x01	; 1
    edf6:	05 c0       	rjmp	.+10     	; 0xee02 <fgets+0x54>
    edf8:	f7 01       	movw	r30, r14
    edfa:	ec 0f       	add	r30, r28
    edfc:	fd 1f       	adc	r31, r29
    edfe:	80 83       	st	Z, r24
    ee00:	21 96       	adiw	r28, 0x01	; 1
    ee02:	01 50       	subi	r16, 0x01	; 1
    ee04:	11 09       	sbc	r17, r1
    ee06:	de cf       	rjmp	.-68     	; 0xedc4 <fgets+0x16>
    ee08:	80 e0       	ldi	r24, 0x00	; 0
    ee0a:	90 e0       	ldi	r25, 0x00	; 0
    ee0c:	cd b7       	in	r28, 0x3d	; 61
    ee0e:	de b7       	in	r29, 0x3e	; 62
    ee10:	e8 e0       	ldi	r30, 0x08	; 8
    ee12:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

0000ee16 <fputs>:
    ee16:	0f 93       	push	r16
    ee18:	1f 93       	push	r17
    ee1a:	cf 93       	push	r28
    ee1c:	df 93       	push	r29
    ee1e:	8b 01       	movw	r16, r22
    ee20:	ec 01       	movw	r28, r24
    ee22:	89 91       	ld	r24, Y+
    ee24:	88 23       	and	r24, r24
    ee26:	41 f0       	breq	.+16     	; 0xee38 <fputs+0x22>
    ee28:	b8 01       	movw	r22, r16
    ee2a:	90 e0       	ldi	r25, 0x00	; 0
    ee2c:	55 df       	rcall	.-342    	; 0xecd8 <fputc>
    ee2e:	8f 3f       	cpi	r24, 0xFF	; 255
    ee30:	2f ef       	ldi	r18, 0xFF	; 255
    ee32:	92 07       	cpc	r25, r18
    ee34:	b1 f7       	brne	.-20     	; 0xee22 <fputs+0xc>
    ee36:	02 c0       	rjmp	.+4      	; 0xee3c <fputs+0x26>
    ee38:	80 e0       	ldi	r24, 0x00	; 0
    ee3a:	90 e0       	ldi	r25, 0x00	; 0
    ee3c:	df 91       	pop	r29
    ee3e:	cf 91       	pop	r28
    ee40:	1f 91       	pop	r17
    ee42:	0f 91       	pop	r16
    ee44:	08 95       	ret

0000ee46 <puts>:
    ee46:	cf 93       	push	r28
    ee48:	df 93       	push	r29
    ee4a:	ec 01       	movw	r28, r24
    ee4c:	89 91       	ld	r24, Y+
    ee4e:	60 91 b4 1c 	lds	r22, 0x1CB4	; 0x801cb4 <__iob+0x2>
    ee52:	70 91 b5 1c 	lds	r23, 0x1CB5	; 0x801cb5 <__iob+0x3>
    ee56:	88 23       	and	r24, r24
    ee58:	39 f0       	breq	.+14     	; 0xee68 <puts+0x22>
    ee5a:	90 e0       	ldi	r25, 0x00	; 0
    ee5c:	3d df       	rcall	.-390    	; 0xecd8 <fputc>
    ee5e:	8f 3f       	cpi	r24, 0xFF	; 255
    ee60:	2f ef       	ldi	r18, 0xFF	; 255
    ee62:	92 07       	cpc	r25, r18
    ee64:	99 f7       	brne	.-26     	; 0xee4c <puts+0x6>
    ee66:	03 c0       	rjmp	.+6      	; 0xee6e <puts+0x28>
    ee68:	8a e0       	ldi	r24, 0x0A	; 10
    ee6a:	90 e0       	ldi	r25, 0x00	; 0
    ee6c:	35 df       	rcall	.-406    	; 0xecd8 <fputc>
    ee6e:	df 91       	pop	r29
    ee70:	cf 91       	pop	r28
    ee72:	08 95       	ret

0000ee74 <fileno>:
    ee74:	00 97       	sbiw	r24, 0x00	; 0
    ee76:	39 f4       	brne	.+14     	; 0xee86 <fileno+0x12>
    ee78:	89 e0       	ldi	r24, 0x09	; 9
    ee7a:	90 e0       	ldi	r25, 0x00	; 0
    ee7c:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    ee80:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    ee84:	0e c0       	rjmp	.+28     	; 0xeea2 <fileno+0x2e>
    ee86:	e2 eb       	ldi	r30, 0xB2	; 178
    ee88:	fc e1       	ldi	r31, 0x1C	; 28
    ee8a:	20 e0       	ldi	r18, 0x00	; 0
    ee8c:	30 e0       	ldi	r19, 0x00	; 0
    ee8e:	41 91       	ld	r20, Z+
    ee90:	51 91       	ld	r21, Z+
    ee92:	84 17       	cp	r24, r20
    ee94:	95 07       	cpc	r25, r21
    ee96:	41 f0       	breq	.+16     	; 0xeea8 <fileno+0x34>
    ee98:	2f 5f       	subi	r18, 0xFF	; 255
    ee9a:	3f 4f       	sbci	r19, 0xFF	; 255
    ee9c:	20 31       	cpi	r18, 0x10	; 16
    ee9e:	31 05       	cpc	r19, r1
    eea0:	b1 f7       	brne	.-20     	; 0xee8e <fileno+0x1a>
    eea2:	8f ef       	ldi	r24, 0xFF	; 255
    eea4:	9f ef       	ldi	r25, 0xFF	; 255
    eea6:	08 95       	ret
    eea8:	c9 01       	movw	r24, r18
    eeaa:	08 95       	ret

0000eeac <fileno_to_stream>:
    eeac:	80 31       	cpi	r24, 0x10	; 16
    eeae:	91 05       	cpc	r25, r1
    eeb0:	48 f4       	brcc	.+18     	; 0xeec4 <fileno_to_stream+0x18>
    eeb2:	88 0f       	add	r24, r24
    eeb4:	99 1f       	adc	r25, r25
    eeb6:	fc 01       	movw	r30, r24
    eeb8:	ee 54       	subi	r30, 0x4E	; 78
    eeba:	f3 4e       	sbci	r31, 0xE3	; 227
    eebc:	80 81       	ld	r24, Z
    eebe:	91 81       	ldd	r25, Z+1	; 0x01
    eec0:	00 97       	sbiw	r24, 0x00	; 0
    eec2:	41 f4       	brne	.+16     	; 0xeed4 <fileno_to_stream+0x28>
    eec4:	89 e0       	ldi	r24, 0x09	; 9
    eec6:	90 e0       	ldi	r25, 0x00	; 0
    eec8:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    eecc:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    eed0:	80 e0       	ldi	r24, 0x00	; 0
    eed2:	90 e0       	ldi	r25, 0x00	; 0
    eed4:	08 95       	ret

0000eed6 <mctime>:
    eed6:	a4 e0       	ldi	r26, 0x04	; 4
    eed8:	b0 e0       	ldi	r27, 0x00	; 0
    eeda:	e1 e7       	ldi	r30, 0x71	; 113
    eedc:	f7 e7       	ldi	r31, 0x77	; 119
    eede:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
    eee2:	69 83       	std	Y+1, r22	; 0x01
    eee4:	7a 83       	std	Y+2, r23	; 0x02
    eee6:	8b 83       	std	Y+3, r24	; 0x03
    eee8:	9c 83       	std	Y+4, r25	; 0x04
    eeea:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <errno+0x1>
    eeee:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <errno>
    eef2:	ce 01       	movw	r24, r28
    eef4:	01 96       	adiw	r24, 0x01	; 1
    eef6:	0e 94 54 3d 	call	0x7aa8	; 0x7aa8 <ctime_gm>
    eefa:	fc 01       	movw	r30, r24
    eefc:	01 90       	ld	r0, Z+
    eefe:	00 20       	and	r0, r0
    ef00:	e9 f7       	brne	.-6      	; 0xeefc <mctime+0x26>
    ef02:	31 97       	sbiw	r30, 0x01	; 1
    ef04:	e8 1b       	sub	r30, r24
    ef06:	f9 0b       	sbc	r31, r25
    ef08:	39 f0       	breq	.+14     	; 0xef18 <mctime+0x42>
    ef0a:	31 97       	sbiw	r30, 0x01	; 1
    ef0c:	e8 0f       	add	r30, r24
    ef0e:	f9 1f       	adc	r31, r25
    ef10:	20 81       	ld	r18, Z
    ef12:	2a 30       	cpi	r18, 0x0A	; 10
    ef14:	09 f4       	brne	.+2      	; 0xef18 <mctime+0x42>
    ef16:	10 82       	st	Z, r1
    ef18:	24 96       	adiw	r28, 0x04	; 4
    ef1a:	e2 e0       	ldi	r30, 0x02	; 2
    ef1c:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

0000ef20 <basename>:
    ef20:	00 97       	sbiw	r24, 0x00	; 0
    ef22:	49 f0       	breq	.+18     	; 0xef36 <basename+0x16>
    ef24:	fc 01       	movw	r30, r24
    ef26:	21 91       	ld	r18, Z+
    ef28:	22 23       	and	r18, r18
    ef2a:	21 f0       	breq	.+8      	; 0xef34 <basename+0x14>
    ef2c:	2f 32       	cpi	r18, 0x2F	; 47
    ef2e:	d9 f7       	brne	.-10     	; 0xef26 <basename+0x6>
    ef30:	cf 01       	movw	r24, r30
    ef32:	f9 cf       	rjmp	.-14     	; 0xef26 <basename+0x6>
    ef34:	08 95       	ret
    ef36:	89 e1       	ldi	r24, 0x19	; 25
    ef38:	9c e0       	ldi	r25, 0x0C	; 12
    ef3a:	08 95       	ret

0000ef3c <chdir>:
    ef3c:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <errno+0x1>
    ef40:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <errno>
    ef44:	0e 94 66 5f 	call	0xbecc	; 0xbecc <f_chdir>
    ef48:	00 97       	sbiw	r24, 0x00	; 0
    ef4a:	a1 f0       	breq	.+40     	; 0xef74 <chdir+0x38>
    ef4c:	84 31       	cpi	r24, 0x14	; 20
    ef4e:	91 05       	cpc	r25, r1
    ef50:	40 f4       	brcc	.+16     	; 0xef62 <chdir+0x26>
    ef52:	fc 01       	movw	r30, r24
    ef54:	eb 56       	subi	r30, 0x6B	; 107
    ef56:	f4 4f       	sbci	r31, 0xF4	; 244
    ef58:	80 81       	ld	r24, Z
    ef5a:	08 2e       	mov	r0, r24
    ef5c:	00 0c       	add	r0, r0
    ef5e:	99 0b       	sbc	r25, r25
    ef60:	02 c0       	rjmp	.+4      	; 0xef66 <chdir+0x2a>
    ef62:	83 e2       	ldi	r24, 0x23	; 35
    ef64:	90 e0       	ldi	r25, 0x00	; 0
    ef66:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    ef6a:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    ef6e:	8f ef       	ldi	r24, 0xFF	; 255
    ef70:	9f ef       	ldi	r25, 0xFF	; 255
    ef72:	08 95       	ret
    ef74:	80 e0       	ldi	r24, 0x00	; 0
    ef76:	90 e0       	ldi	r25, 0x00	; 0
    ef78:	08 95       	ret

0000ef7a <chmod>:
    ef7a:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <errno+0x1>
    ef7e:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <errno>
    ef82:	42 79       	andi	r20, 0x92	; 146
    ef84:	55 27       	eor	r21, r21
    ef86:	66 27       	eor	r22, r22
    ef88:	77 27       	eor	r23, r23
    ef8a:	45 2b       	or	r20, r21
    ef8c:	46 2b       	or	r20, r22
    ef8e:	47 2b       	or	r20, r23
    ef90:	19 f0       	breq	.+6      	; 0xef98 <chmod+0x1e>
    ef92:	80 e0       	ldi	r24, 0x00	; 0
    ef94:	90 e0       	ldi	r25, 0x00	; 0
    ef96:	08 95       	ret
    ef98:	41 e0       	ldi	r20, 0x01	; 1
    ef9a:	61 e0       	ldi	r22, 0x01	; 1
    ef9c:	0e 94 47 68 	call	0xd08e	; 0xd08e <f_chmod>
    efa0:	00 97       	sbiw	r24, 0x00	; 0
    efa2:	b9 f3       	breq	.-18     	; 0xef92 <chmod+0x18>
    efa4:	84 31       	cpi	r24, 0x14	; 20
    efa6:	91 05       	cpc	r25, r1
    efa8:	40 f4       	brcc	.+16     	; 0xefba <chmod+0x40>
    efaa:	fc 01       	movw	r30, r24
    efac:	eb 56       	subi	r30, 0x6B	; 107
    efae:	f4 4f       	sbci	r31, 0xF4	; 244
    efb0:	80 81       	ld	r24, Z
    efb2:	08 2e       	mov	r0, r24
    efb4:	00 0c       	add	r0, r0
    efb6:	99 0b       	sbc	r25, r25
    efb8:	02 c0       	rjmp	.+4      	; 0xefbe <chmod+0x44>
    efba:	83 e2       	ldi	r24, 0x23	; 35
    efbc:	90 e0       	ldi	r25, 0x00	; 0
    efbe:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    efc2:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    efc6:	8f ef       	ldi	r24, 0xFF	; 255
    efc8:	9f ef       	ldi	r25, 0xFF	; 255
    efca:	08 95       	ret

0000efcc <getcwd>:
    efcc:	cf 93       	push	r28
    efce:	df 93       	push	r29
    efd0:	d8 2f       	mov	r29, r24
    efd2:	c9 2f       	mov	r28, r25
    efd4:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <errno+0x1>
    efd8:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <errno>
    efdc:	0e 94 c1 5f 	call	0xbf82	; 0xbf82 <f_getcwd>
    efe0:	00 97       	sbiw	r24, 0x00	; 0
    efe2:	a1 f0       	breq	.+40     	; 0xf00c <getcwd+0x40>
    efe4:	84 31       	cpi	r24, 0x14	; 20
    efe6:	91 05       	cpc	r25, r1
    efe8:	40 f4       	brcc	.+16     	; 0xeffa <getcwd+0x2e>
    efea:	fc 01       	movw	r30, r24
    efec:	eb 56       	subi	r30, 0x6B	; 107
    efee:	f4 4f       	sbci	r31, 0xF4	; 244
    eff0:	80 81       	ld	r24, Z
    eff2:	08 2e       	mov	r0, r24
    eff4:	00 0c       	add	r0, r0
    eff6:	99 0b       	sbc	r25, r25
    eff8:	02 c0       	rjmp	.+4      	; 0xeffe <getcwd+0x32>
    effa:	83 e2       	ldi	r24, 0x23	; 35
    effc:	90 e0       	ldi	r25, 0x00	; 0
    effe:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    f002:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    f006:	80 e0       	ldi	r24, 0x00	; 0
    f008:	90 e0       	ldi	r25, 0x00	; 0
    f00a:	02 c0       	rjmp	.+4      	; 0xf010 <getcwd+0x44>
    f00c:	8d 2f       	mov	r24, r29
    f00e:	9c 2f       	mov	r25, r28
    f010:	df 91       	pop	r29
    f012:	cf 91       	pop	r28
    f014:	08 95       	ret

0000f016 <mkdir>:
    f016:	cf 93       	push	r28
    f018:	df 93       	push	r29
    f01a:	ec 01       	movw	r28, r24
    f01c:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <errno+0x1>
    f020:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <errno>
    f024:	41 15       	cp	r20, r1
    f026:	51 05       	cpc	r21, r1
    f028:	61 05       	cpc	r22, r1
    f02a:	71 05       	cpc	r23, r1
    f02c:	41 f4       	brne	.+16     	; 0xf03e <mkdir+0x28>
    f02e:	ce 01       	movw	r24, r28
    f030:	0e 94 42 66 	call	0xcc84	; 0xcc84 <f_mkdir>
    f034:	00 97       	sbiw	r24, 0x00	; 0
    f036:	39 f4       	brne	.+14     	; 0xf046 <mkdir+0x30>
    f038:	80 e0       	ldi	r24, 0x00	; 0
    f03a:	90 e0       	ldi	r25, 0x00	; 0
    f03c:	17 c0       	rjmp	.+46     	; 0xf06c <mkdir+0x56>
    f03e:	9d df       	rcall	.-198    	; 0xef7a <chmod>
    f040:	89 2b       	or	r24, r25
    f042:	a9 f3       	breq	.-22     	; 0xf02e <mkdir+0x18>
    f044:	11 c0       	rjmp	.+34     	; 0xf068 <mkdir+0x52>
    f046:	84 31       	cpi	r24, 0x14	; 20
    f048:	91 05       	cpc	r25, r1
    f04a:	40 f4       	brcc	.+16     	; 0xf05c <mkdir+0x46>
    f04c:	fc 01       	movw	r30, r24
    f04e:	eb 56       	subi	r30, 0x6B	; 107
    f050:	f4 4f       	sbci	r31, 0xF4	; 244
    f052:	80 81       	ld	r24, Z
    f054:	08 2e       	mov	r0, r24
    f056:	00 0c       	add	r0, r0
    f058:	99 0b       	sbc	r25, r25
    f05a:	02 c0       	rjmp	.+4      	; 0xf060 <mkdir+0x4a>
    f05c:	83 e2       	ldi	r24, 0x23	; 35
    f05e:	90 e0       	ldi	r25, 0x00	; 0
    f060:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    f064:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    f068:	8f ef       	ldi	r24, 0xFF	; 255
    f06a:	9f ef       	ldi	r25, 0xFF	; 255
    f06c:	df 91       	pop	r29
    f06e:	cf 91       	pop	r28
    f070:	08 95       	ret

0000f072 <rename>:
    f072:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <errno+0x1>
    f076:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <errno>
    f07a:	0e 94 32 67 	call	0xce64	; 0xce64 <f_rename>
    f07e:	00 97       	sbiw	r24, 0x00	; 0
    f080:	a1 f0       	breq	.+40     	; 0xf0aa <rename+0x38>
    f082:	84 31       	cpi	r24, 0x14	; 20
    f084:	91 05       	cpc	r25, r1
    f086:	40 f4       	brcc	.+16     	; 0xf098 <rename+0x26>
    f088:	fc 01       	movw	r30, r24
    f08a:	eb 56       	subi	r30, 0x6B	; 107
    f08c:	f4 4f       	sbci	r31, 0xF4	; 244
    f08e:	80 81       	ld	r24, Z
    f090:	08 2e       	mov	r0, r24
    f092:	00 0c       	add	r0, r0
    f094:	99 0b       	sbc	r25, r25
    f096:	02 c0       	rjmp	.+4      	; 0xf09c <rename+0x2a>
    f098:	83 e2       	ldi	r24, 0x23	; 35
    f09a:	90 e0       	ldi	r25, 0x00	; 0
    f09c:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    f0a0:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    f0a4:	8f ef       	ldi	r24, 0xFF	; 255
    f0a6:	9f ef       	ldi	r25, 0xFF	; 255
    f0a8:	08 95       	ret
    f0aa:	80 e0       	ldi	r24, 0x00	; 0
    f0ac:	90 e0       	ldi	r25, 0x00	; 0
    f0ae:	08 95       	ret

0000f0b0 <unlink>:
    f0b0:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <errno+0x1>
    f0b4:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <errno>
    f0b8:	0e 94 9b 65 	call	0xcb36	; 0xcb36 <f_unlink>
    f0bc:	00 97       	sbiw	r24, 0x00	; 0
    f0be:	a1 f0       	breq	.+40     	; 0xf0e8 <unlink+0x38>
    f0c0:	84 31       	cpi	r24, 0x14	; 20
    f0c2:	91 05       	cpc	r25, r1
    f0c4:	40 f4       	brcc	.+16     	; 0xf0d6 <unlink+0x26>
    f0c6:	fc 01       	movw	r30, r24
    f0c8:	eb 56       	subi	r30, 0x6B	; 107
    f0ca:	f4 4f       	sbci	r31, 0xF4	; 244
    f0cc:	80 81       	ld	r24, Z
    f0ce:	08 2e       	mov	r0, r24
    f0d0:	00 0c       	add	r0, r0
    f0d2:	99 0b       	sbc	r25, r25
    f0d4:	02 c0       	rjmp	.+4      	; 0xf0da <unlink+0x2a>
    f0d6:	83 e2       	ldi	r24, 0x23	; 35
    f0d8:	90 e0       	ldi	r25, 0x00	; 0
    f0da:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    f0de:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    f0e2:	8f ef       	ldi	r24, 0xFF	; 255
    f0e4:	9f ef       	ldi	r25, 0xFF	; 255
    f0e6:	08 95       	ret
    f0e8:	80 e0       	ldi	r24, 0x00	; 0
    f0ea:	90 e0       	ldi	r25, 0x00	; 0
    f0ec:	08 95       	ret

0000f0ee <rmdir>:
    f0ee:	e0 cf       	rjmp	.-64     	; 0xf0b0 <unlink>
    f0f0:	08 95       	ret

0000f0f2 <closedir>:
    f0f2:	0e 94 24 64 	call	0xc848	; 0xc848 <f_closedir>
    f0f6:	00 97       	sbiw	r24, 0x00	; 0
    f0f8:	a1 f0       	breq	.+40     	; 0xf122 <closedir+0x30>
    f0fa:	84 31       	cpi	r24, 0x14	; 20
    f0fc:	91 05       	cpc	r25, r1
    f0fe:	40 f4       	brcc	.+16     	; 0xf110 <closedir+0x1e>
    f100:	fc 01       	movw	r30, r24
    f102:	eb 56       	subi	r30, 0x6B	; 107
    f104:	f4 4f       	sbci	r31, 0xF4	; 244
    f106:	80 81       	ld	r24, Z
    f108:	08 2e       	mov	r0, r24
    f10a:	00 0c       	add	r0, r0
    f10c:	99 0b       	sbc	r25, r25
    f10e:	02 c0       	rjmp	.+4      	; 0xf114 <closedir+0x22>
    f110:	83 e2       	ldi	r24, 0x23	; 35
    f112:	90 e0       	ldi	r25, 0x00	; 0
    f114:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    f118:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    f11c:	8f ef       	ldi	r24, 0xFF	; 255
    f11e:	9f ef       	ldi	r25, 0xFF	; 255
    f120:	08 95       	ret
    f122:	80 e0       	ldi	r24, 0x00	; 0
    f124:	90 e0       	ldi	r25, 0x00	; 0
    f126:	08 95       	ret

0000f128 <opendir>:
    f128:	bc 01       	movw	r22, r24
    f12a:	8e e2       	ldi	r24, 0x2E	; 46
    f12c:	99 e1       	ldi	r25, 0x19	; 25
    f12e:	0e 94 b3 63 	call	0xc766	; 0xc766 <f_opendir>
    f132:	00 97       	sbiw	r24, 0x00	; 0
    f134:	a1 f0       	breq	.+40     	; 0xf15e <opendir+0x36>
    f136:	84 31       	cpi	r24, 0x14	; 20
    f138:	91 05       	cpc	r25, r1
    f13a:	40 f4       	brcc	.+16     	; 0xf14c <opendir+0x24>
    f13c:	fc 01       	movw	r30, r24
    f13e:	eb 56       	subi	r30, 0x6B	; 107
    f140:	f4 4f       	sbci	r31, 0xF4	; 244
    f142:	80 81       	ld	r24, Z
    f144:	08 2e       	mov	r0, r24
    f146:	00 0c       	add	r0, r0
    f148:	99 0b       	sbc	r25, r25
    f14a:	02 c0       	rjmp	.+4      	; 0xf150 <opendir+0x28>
    f14c:	83 e2       	ldi	r24, 0x23	; 35
    f14e:	90 e0       	ldi	r25, 0x00	; 0
    f150:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    f154:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    f158:	80 e0       	ldi	r24, 0x00	; 0
    f15a:	90 e0       	ldi	r25, 0x00	; 0
    f15c:	08 95       	ret
    f15e:	8e e2       	ldi	r24, 0x2E	; 46
    f160:	99 e1       	ldi	r25, 0x19	; 25
    f162:	08 95       	ret

0000f164 <readdir>:
    f164:	a6 e1       	ldi	r26, 0x16	; 22
    f166:	b1 e0       	ldi	r27, 0x01	; 1
    f168:	e8 eb       	ldi	r30, 0xB8	; 184
    f16a:	f8 e7       	ldi	r31, 0x78	; 120
    f16c:	0c 94 dd e2 	jmp	0x1c5ba	; 0x1c5ba <__prologue_saves__+0x1c>
    f170:	10 92 2f 18 	sts	0x182F, r1	; 0x80182f <_de>
    f174:	be 01       	movw	r22, r28
    f176:	6f 5f       	subi	r22, 0xFF	; 255
    f178:	7f 4f       	sbci	r23, 0xFF	; 255
    f17a:	0e 94 39 64 	call	0xc872	; 0xc872 <f_readdir>
    f17e:	00 97       	sbiw	r24, 0x00	; 0
    f180:	a1 f0       	breq	.+40     	; 0xf1aa <readdir+0x46>
    f182:	84 31       	cpi	r24, 0x14	; 20
    f184:	91 05       	cpc	r25, r1
    f186:	40 f4       	brcc	.+16     	; 0xf198 <readdir+0x34>
    f188:	fc 01       	movw	r30, r24
    f18a:	eb 56       	subi	r30, 0x6B	; 107
    f18c:	f4 4f       	sbci	r31, 0xF4	; 244
    f18e:	80 81       	ld	r24, Z
    f190:	08 2e       	mov	r0, r24
    f192:	00 0c       	add	r0, r0
    f194:	99 0b       	sbc	r25, r25
    f196:	02 c0       	rjmp	.+4      	; 0xf19c <readdir+0x38>
    f198:	83 e2       	ldi	r24, 0x23	; 35
    f19a:	90 e0       	ldi	r25, 0x00	; 0
    f19c:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    f1a0:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    f1a4:	80 e0       	ldi	r24, 0x00	; 0
    f1a6:	90 e0       	ldi	r25, 0x00	; 0
    f1a8:	16 c0       	rjmp	.+44     	; 0xf1d6 <readdir+0x72>
    f1aa:	be 01       	movw	r22, r28
    f1ac:	69 5e       	subi	r22, 0xE9	; 233
    f1ae:	7f 4f       	sbci	r23, 0xFF	; 255
    f1b0:	fb 01       	movw	r30, r22
    f1b2:	01 90       	ld	r0, Z+
    f1b4:	00 20       	and	r0, r0
    f1b6:	e9 f7       	brne	.-6      	; 0xf1b2 <readdir+0x4e>
    f1b8:	31 97       	sbiw	r30, 0x01	; 1
    f1ba:	8f 01       	movw	r16, r30
    f1bc:	06 1b       	sub	r16, r22
    f1be:	17 0b       	sbc	r17, r23
    f1c0:	a8 01       	movw	r20, r16
    f1c2:	8f e2       	ldi	r24, 0x2F	; 47
    f1c4:	98 e1       	ldi	r25, 0x18	; 24
    f1c6:	0e 94 84 31 	call	0x6308	; 0x6308 <strncpy>
    f1ca:	f8 01       	movw	r30, r16
    f1cc:	e1 5d       	subi	r30, 0xD1	; 209
    f1ce:	f7 4e       	sbci	r31, 0xE7	; 231
    f1d0:	10 82       	st	Z, r1
    f1d2:	8f e2       	ldi	r24, 0x2F	; 47
    f1d4:	98 e1       	ldi	r25, 0x18	; 24
    f1d6:	ca 5e       	subi	r28, 0xEA	; 234
    f1d8:	de 4f       	sbci	r29, 0xFE	; 254
    f1da:	e4 e0       	ldi	r30, 0x04	; 4
    f1dc:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

0000f1e0 <perror>:
    f1e0:	ad b7       	in	r26, 0x3d	; 61
    f1e2:	be b7       	in	r27, 0x3e	; 62
    f1e4:	17 97       	sbiw	r26, 0x07	; 7
    f1e6:	0f b6       	in	r0, 0x3f	; 63
    f1e8:	f8 94       	cli
    f1ea:	be bf       	out	0x3e, r27	; 62
    f1ec:	0f be       	out	0x3f, r0	; 63
    f1ee:	ad bf       	out	0x3d, r26	; 61
    f1f0:	20 91 b0 1c 	lds	r18, 0x1CB0	; 0x801cb0 <errno>
    f1f4:	30 91 b1 1c 	lds	r19, 0x1CB1	; 0x801cb1 <errno+0x1>
    f1f8:	23 32       	cpi	r18, 0x23	; 35
    f1fa:	31 05       	cpc	r19, r1
    f1fc:	40 f4       	brcc	.+16     	; 0xf20e <perror+0x2e>
    f1fe:	22 0f       	add	r18, r18
    f200:	33 1f       	adc	r19, r19
    f202:	f9 01       	movw	r30, r18
    f204:	ea 5c       	subi	r30, 0xCA	; 202
    f206:	fe 4f       	sbci	r31, 0xFE	; 254
    f208:	20 81       	ld	r18, Z
    f20a:	31 81       	ldd	r19, Z+1	; 0x01
    f20c:	04 c0       	rjmp	.+8      	; 0xf216 <perror+0x36>
    f20e:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    f212:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    f216:	00 97       	sbiw	r24, 0x00	; 0
    f218:	99 f0       	breq	.+38     	; 0xf240 <perror+0x60>
    f21a:	fc 01       	movw	r30, r24
    f21c:	40 81       	ld	r20, Z
    f21e:	44 23       	and	r20, r20
    f220:	79 f0       	breq	.+30     	; 0xf240 <perror+0x60>
    f222:	ed b7       	in	r30, 0x3d	; 61
    f224:	fe b7       	in	r31, 0x3e	; 62
    f226:	37 83       	std	Z+7, r19	; 0x07
    f228:	26 83       	std	Z+6, r18	; 0x06
    f22a:	95 83       	std	Z+5, r25	; 0x05
    f22c:	84 83       	std	Z+4, r24	; 0x04
    f22e:	88 ed       	ldi	r24, 0xD8	; 216
    f230:	9b e0       	ldi	r25, 0x0B	; 11
    f232:	a0 e0       	ldi	r26, 0x00	; 0
    f234:	81 83       	std	Z+1, r24	; 0x01
    f236:	92 83       	std	Z+2, r25	; 0x02
    f238:	a3 83       	std	Z+3, r26	; 0x03
    f23a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    f23e:	0c c0       	rjmp	.+24     	; 0xf258 <perror+0x78>
    f240:	ed b7       	in	r30, 0x3d	; 61
    f242:	fe b7       	in	r31, 0x3e	; 62
    f244:	35 83       	std	Z+5, r19	; 0x05
    f246:	24 83       	std	Z+4, r18	; 0x04
    f248:	84 ed       	ldi	r24, 0xD4	; 212
    f24a:	9b e0       	ldi	r25, 0x0B	; 11
    f24c:	a0 e0       	ldi	r26, 0x00	; 0
    f24e:	81 83       	std	Z+1, r24	; 0x01
    f250:	92 83       	std	Z+2, r25	; 0x02
    f252:	a3 83       	std	Z+3, r26	; 0x03
    f254:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    f258:	ad b7       	in	r26, 0x3d	; 61
    f25a:	be b7       	in	r27, 0x3e	; 62
    f25c:	17 96       	adiw	r26, 0x07	; 7
    f25e:	0f b6       	in	r0, 0x3f	; 63
    f260:	f8 94       	cli
    f262:	be bf       	out	0x3e, r27	; 62
    f264:	0f be       	out	0x3f, r0	; 63
    f266:	ad bf       	out	0x3d, r26	; 61
    f268:	08 95       	ret

0000f26a <fdevopen>:
    f26a:	0f 93       	push	r16
    f26c:	1f 93       	push	r17
    f26e:	cf 93       	push	r28
    f270:	df 93       	push	r29
    f272:	00 97       	sbiw	r24, 0x00	; 0
    f274:	31 f4       	brne	.+12     	; 0xf282 <fdevopen+0x18>
    f276:	61 15       	cp	r22, r1
    f278:	71 05       	cpc	r23, r1
    f27a:	19 f4       	brne	.+6      	; 0xf282 <fdevopen+0x18>
    f27c:	80 e0       	ldi	r24, 0x00	; 0
    f27e:	90 e0       	ldi	r25, 0x00	; 0
    f280:	3a c0       	rjmp	.+116    	; 0xf2f6 <fdevopen+0x8c>
    f282:	8b 01       	movw	r16, r22
    f284:	ec 01       	movw	r28, r24
    f286:	6e e0       	ldi	r22, 0x0E	; 14
    f288:	70 e0       	ldi	r23, 0x00	; 0
    f28a:	81 e0       	ldi	r24, 0x01	; 1
    f28c:	90 e0       	ldi	r25, 0x00	; 0
    f28e:	0e 94 8d 28 	call	0x511a	; 0x511a <safecalloc>
    f292:	fc 01       	movw	r30, r24
    f294:	89 2b       	or	r24, r25
    f296:	91 f3       	breq	.-28     	; 0xf27c <fdevopen+0x12>
    f298:	80 e8       	ldi	r24, 0x80	; 128
    f29a:	83 83       	std	Z+3, r24	; 0x03
    f29c:	01 15       	cp	r16, r1
    f29e:	11 05       	cpc	r17, r1
    f2a0:	71 f0       	breq	.+28     	; 0xf2be <fdevopen+0x54>
    f2a2:	13 87       	std	Z+11, r17	; 0x0b
    f2a4:	02 87       	std	Z+10, r16	; 0x0a
    f2a6:	81 e8       	ldi	r24, 0x81	; 129
    f2a8:	83 83       	std	Z+3, r24	; 0x03
    f2aa:	80 91 b2 1c 	lds	r24, 0x1CB2	; 0x801cb2 <__iob>
    f2ae:	90 91 b3 1c 	lds	r25, 0x1CB3	; 0x801cb3 <__iob+0x1>
    f2b2:	89 2b       	or	r24, r25
    f2b4:	21 f4       	brne	.+8      	; 0xf2be <fdevopen+0x54>
    f2b6:	f0 93 b3 1c 	sts	0x1CB3, r31	; 0x801cb3 <__iob+0x1>
    f2ba:	e0 93 b2 1c 	sts	0x1CB2, r30	; 0x801cb2 <__iob>
    f2be:	20 97       	sbiw	r28, 0x00	; 0
    f2c0:	c9 f0       	breq	.+50     	; 0xf2f4 <fdevopen+0x8a>
    f2c2:	d1 87       	std	Z+9, r29	; 0x09
    f2c4:	c0 87       	std	Z+8, r28	; 0x08
    f2c6:	83 81       	ldd	r24, Z+3	; 0x03
    f2c8:	82 60       	ori	r24, 0x02	; 2
    f2ca:	83 83       	std	Z+3, r24	; 0x03
    f2cc:	80 91 b4 1c 	lds	r24, 0x1CB4	; 0x801cb4 <__iob+0x2>
    f2d0:	90 91 b5 1c 	lds	r25, 0x1CB5	; 0x801cb5 <__iob+0x3>
    f2d4:	89 2b       	or	r24, r25
    f2d6:	21 f4       	brne	.+8      	; 0xf2e0 <fdevopen+0x76>
    f2d8:	f0 93 b5 1c 	sts	0x1CB5, r31	; 0x801cb5 <__iob+0x3>
    f2dc:	e0 93 b4 1c 	sts	0x1CB4, r30	; 0x801cb4 <__iob+0x2>
    f2e0:	80 91 b6 1c 	lds	r24, 0x1CB6	; 0x801cb6 <__iob+0x4>
    f2e4:	90 91 b7 1c 	lds	r25, 0x1CB7	; 0x801cb7 <__iob+0x5>
    f2e8:	89 2b       	or	r24, r25
    f2ea:	21 f4       	brne	.+8      	; 0xf2f4 <fdevopen+0x8a>
    f2ec:	f0 93 b7 1c 	sts	0x1CB7, r31	; 0x801cb7 <__iob+0x5>
    f2f0:	e0 93 b6 1c 	sts	0x1CB6, r30	; 0x801cb6 <__iob+0x4>
    f2f4:	cf 01       	movw	r24, r30
    f2f6:	df 91       	pop	r29
    f2f8:	cf 91       	pop	r28
    f2fa:	1f 91       	pop	r17
    f2fc:	0f 91       	pop	r16
    f2fe:	08 95       	ret

0000f300 <fat_time_to_unix>:
    f300:	a6 e1       	ldi	r26, 0x16	; 22
    f302:	b0 e0       	ldi	r27, 0x00	; 0
    f304:	e6 e8       	ldi	r30, 0x86	; 134
    f306:	f9 e7       	ldi	r31, 0x79	; 121
    f308:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
    f30c:	fe 01       	movw	r30, r28
    f30e:	31 96       	adiw	r30, 0x01	; 1
    f310:	26 e1       	ldi	r18, 0x16	; 22
    f312:	df 01       	movw	r26, r30
    f314:	1d 92       	st	X+, r1
    f316:	2a 95       	dec	r18
    f318:	e9 f7       	brne	.-6      	; 0xf314 <fat_time_to_unix+0x14>
    f31a:	9b 01       	movw	r18, r22
    f31c:	22 0f       	add	r18, r18
    f31e:	33 1f       	adc	r19, r19
    f320:	2e 73       	andi	r18, 0x3E	; 62
    f322:	33 27       	eor	r19, r19
    f324:	3a 83       	std	Y+2, r19	; 0x02
    f326:	29 83       	std	Y+1, r18	; 0x01
    f328:	9b 01       	movw	r18, r22
    f32a:	55 e0       	ldi	r21, 0x05	; 5
    f32c:	36 95       	lsr	r19
    f32e:	27 95       	ror	r18
    f330:	5a 95       	dec	r21
    f332:	e1 f7       	brne	.-8      	; 0xf32c <fat_time_to_unix+0x2c>
    f334:	2f 73       	andi	r18, 0x3F	; 63
    f336:	33 27       	eor	r19, r19
    f338:	3c 83       	std	Y+4, r19	; 0x04
    f33a:	2b 83       	std	Y+3, r18	; 0x03
    f33c:	27 2f       	mov	r18, r23
    f33e:	26 95       	lsr	r18
    f340:	26 95       	lsr	r18
    f342:	26 95       	lsr	r18
    f344:	2d 83       	std	Y+5, r18	; 0x05
    f346:	1e 82       	std	Y+6, r1	; 0x06
    f348:	9c 01       	movw	r18, r24
    f34a:	2f 71       	andi	r18, 0x1F	; 31
    f34c:	33 27       	eor	r19, r19
    f34e:	38 87       	std	Y+8, r19	; 0x08
    f350:	2f 83       	std	Y+7, r18	; 0x07
    f352:	9c 01       	movw	r18, r24
    f354:	65 e0       	ldi	r22, 0x05	; 5
    f356:	36 95       	lsr	r19
    f358:	27 95       	ror	r18
    f35a:	6a 95       	dec	r22
    f35c:	e1 f7       	brne	.-8      	; 0xf356 <fat_time_to_unix+0x56>
    f35e:	2f 70       	andi	r18, 0x0F	; 15
    f360:	33 27       	eor	r19, r19
    f362:	21 50       	subi	r18, 0x01	; 1
    f364:	31 09       	sbc	r19, r1
    f366:	3a 87       	std	Y+10, r19	; 0x0a
    f368:	29 87       	std	Y+9, r18	; 0x09
    f36a:	9c 01       	movw	r18, r24
    f36c:	23 2f       	mov	r18, r19
    f36e:	33 27       	eor	r19, r19
    f370:	26 95       	lsr	r18
    f372:	20 5b       	subi	r18, 0xB0	; 176
    f374:	3f 4f       	sbci	r19, 0xFF	; 255
    f376:	3c 87       	std	Y+12, r19	; 0x0c
    f378:	2b 87       	std	Y+11, r18	; 0x0b
    f37a:	cf 01       	movw	r24, r30
    f37c:	0e 94 9f 3a 	call	0x753e	; 0x753e <timegm>
    f380:	66 96       	adiw	r28, 0x16	; 22
    f382:	e2 e0       	ldi	r30, 0x02	; 2
    f384:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

0000f388 <stat>:
    f388:	a6 e1       	ldi	r26, 0x16	; 22
    f38a:	b1 e0       	ldi	r27, 0x01	; 1
    f38c:	ea ec       	ldi	r30, 0xCA	; 202
    f38e:	f9 e7       	ldi	r31, 0x79	; 121
    f390:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
    f394:	6c 01       	movw	r12, r24
    f396:	8b 01       	movw	r16, r22
    f398:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <errno+0x1>
    f39c:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <errno>
    f3a0:	6b ee       	ldi	r22, 0xEB	; 235
    f3a2:	78 e0       	ldi	r23, 0x08	; 8
    f3a4:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
    f3a8:	89 2b       	or	r24, r25
    f3aa:	01 f1       	breq	.+64     	; 0xf3ec <stat+0x64>
    f3ac:	f8 01       	movw	r30, r16
    f3ae:	14 a2       	std	Z+36, r1	; 0x24
    f3b0:	15 a2       	std	Z+37, r1	; 0x25
    f3b2:	16 a2       	std	Z+38, r1	; 0x26
    f3b4:	17 a2       	std	Z+39, r1	; 0x27
    f3b6:	10 a6       	std	Z+40, r1	; 0x28
    f3b8:	11 a6       	std	Z+41, r1	; 0x29
    f3ba:	12 a6       	std	Z+42, r1	; 0x2a
    f3bc:	13 a6       	std	Z+43, r1	; 0x2b
    f3be:	14 a6       	std	Z+44, r1	; 0x2c
    f3c0:	15 a6       	std	Z+45, r1	; 0x2d
    f3c2:	16 a6       	std	Z+46, r1	; 0x2e
    f3c4:	17 a6       	std	Z+47, r1	; 0x2f
    f3c6:	11 8a       	std	Z+17, r1	; 0x11
    f3c8:	10 8a       	std	Z+16, r1	; 0x10
    f3ca:	13 8a       	std	Z+19, r1	; 0x13
    f3cc:	12 8a       	std	Z+18, r1	; 0x12
    f3ce:	10 8e       	std	Z+24, r1	; 0x18
    f3d0:	11 8e       	std	Z+25, r1	; 0x19
    f3d2:	12 8e       	std	Z+26, r1	; 0x1a
    f3d4:	13 8e       	std	Z+27, r1	; 0x1b
    f3d6:	80 e0       	ldi	r24, 0x00	; 0
    f3d8:	90 e4       	ldi	r25, 0x40	; 64
    f3da:	a0 e0       	ldi	r26, 0x00	; 0
    f3dc:	b0 e0       	ldi	r27, 0x00	; 0
    f3de:	80 87       	std	Z+8, r24	; 0x08
    f3e0:	91 87       	std	Z+9, r25	; 0x09
    f3e2:	a2 87       	std	Z+10, r26	; 0x0a
    f3e4:	b3 87       	std	Z+11, r27	; 0x0b
    f3e6:	e1 2c       	mov	r14, r1
    f3e8:	f1 2c       	mov	r15, r1
    f3ea:	62 c0       	rjmp	.+196    	; 0xf4b0 <stat+0x128>
    f3ec:	65 e9       	ldi	r22, 0x95	; 149
    f3ee:	78 e0       	ldi	r23, 0x08	; 8
    f3f0:	c6 01       	movw	r24, r12
    f3f2:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
    f3f6:	89 2b       	or	r24, r25
    f3f8:	c9 f6       	brne	.-78     	; 0xf3ac <stat+0x24>
    f3fa:	67 ee       	ldi	r22, 0xE7	; 231
    f3fc:	72 e1       	ldi	r23, 0x12	; 18
    f3fe:	c6 01       	movw	r24, r12
    f400:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
    f404:	7c 01       	movw	r14, r24
    f406:	89 2b       	or	r24, r25
    f408:	89 f6       	brne	.-94     	; 0xf3ac <stat+0x24>
    f40a:	be 01       	movw	r22, r28
    f40c:	6f 5f       	subi	r22, 0xFF	; 255
    f40e:	7f 4f       	sbci	r23, 0xFF	; 255
    f410:	c6 01       	movw	r24, r12
    f412:	0e 94 7d 64 	call	0xc8fa	; 0xc8fa <f_stat>
    f416:	00 97       	sbiw	r24, 0x00	; 0
    f418:	a9 f0       	breq	.+42     	; 0xf444 <stat+0xbc>
    f41a:	84 31       	cpi	r24, 0x14	; 20
    f41c:	91 05       	cpc	r25, r1
    f41e:	40 f4       	brcc	.+16     	; 0xf430 <stat+0xa8>
    f420:	fc 01       	movw	r30, r24
    f422:	eb 56       	subi	r30, 0x6B	; 107
    f424:	f4 4f       	sbci	r31, 0xF4	; 244
    f426:	80 81       	ld	r24, Z
    f428:	08 2e       	mov	r0, r24
    f42a:	00 0c       	add	r0, r0
    f42c:	99 0b       	sbc	r25, r25
    f42e:	02 c0       	rjmp	.+4      	; 0xf434 <stat+0xac>
    f430:	83 e2       	ldi	r24, 0x23	; 35
    f432:	90 e0       	ldi	r25, 0x00	; 0
    f434:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    f438:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    f43c:	ee 24       	eor	r14, r14
    f43e:	ea 94       	dec	r14
    f440:	fe 2c       	mov	r15, r14
    f442:	36 c0       	rjmp	.+108    	; 0xf4b0 <stat+0x128>
    f444:	89 81       	ldd	r24, Y+1	; 0x01
    f446:	9a 81       	ldd	r25, Y+2	; 0x02
    f448:	ab 81       	ldd	r26, Y+3	; 0x03
    f44a:	bc 81       	ldd	r27, Y+4	; 0x04
    f44c:	f8 01       	movw	r30, r16
    f44e:	80 8f       	std	Z+24, r24	; 0x18
    f450:	91 8f       	std	Z+25, r25	; 0x19
    f452:	a2 8f       	std	Z+26, r26	; 0x1a
    f454:	b3 8f       	std	Z+27, r27	; 0x1b
    f456:	6f 81       	ldd	r22, Y+7	; 0x07
    f458:	78 85       	ldd	r23, Y+8	; 0x08
    f45a:	8d 81       	ldd	r24, Y+5	; 0x05
    f45c:	9e 81       	ldd	r25, Y+6	; 0x06
    f45e:	50 df       	rcall	.-352    	; 0xf300 <fat_time_to_unix>
    f460:	f8 01       	movw	r30, r16
    f462:	64 a3       	std	Z+36, r22	; 0x24
    f464:	75 a3       	std	Z+37, r23	; 0x25
    f466:	86 a3       	std	Z+38, r24	; 0x26
    f468:	97 a3       	std	Z+39, r25	; 0x27
    f46a:	60 a7       	std	Z+40, r22	; 0x28
    f46c:	71 a7       	std	Z+41, r23	; 0x29
    f46e:	82 a7       	std	Z+42, r24	; 0x2a
    f470:	93 a7       	std	Z+43, r25	; 0x2b
    f472:	64 a7       	std	Z+44, r22	; 0x2c
    f474:	75 a7       	std	Z+45, r23	; 0x2d
    f476:	86 a7       	std	Z+46, r24	; 0x2e
    f478:	97 a7       	std	Z+47, r25	; 0x2f
    f47a:	29 85       	ldd	r18, Y+9	; 0x09
    f47c:	20 fd       	sbrc	r18, 0
    f47e:	03 c0       	rjmp	.+6      	; 0xf486 <stat+0xfe>
    f480:	8f ef       	ldi	r24, 0xFF	; 255
    f482:	91 e0       	ldi	r25, 0x01	; 1
    f484:	02 c0       	rjmp	.+4      	; 0xf48a <stat+0x102>
    f486:	8d e6       	ldi	r24, 0x6D	; 109
    f488:	91 e0       	ldi	r25, 0x01	; 1
    f48a:	48 ee       	ldi	r20, 0xE8	; 232
    f48c:	53 e0       	ldi	r21, 0x03	; 3
    f48e:	f8 01       	movw	r30, r16
    f490:	51 8b       	std	Z+17, r21	; 0x11
    f492:	40 8b       	std	Z+16, r20	; 0x10
    f494:	53 8b       	std	Z+19, r21	; 0x13
    f496:	42 8b       	std	Z+18, r20	; 0x12
    f498:	24 ff       	sbrs	r18, 4
    f49a:	02 c0       	rjmp	.+4      	; 0xf4a0 <stat+0x118>
    f49c:	90 64       	ori	r25, 0x40	; 64
    f49e:	01 c0       	rjmp	.+2      	; 0xf4a2 <stat+0x11a>
    f4a0:	90 68       	ori	r25, 0x80	; 128
    f4a2:	a0 e0       	ldi	r26, 0x00	; 0
    f4a4:	b0 e0       	ldi	r27, 0x00	; 0
    f4a6:	f8 01       	movw	r30, r16
    f4a8:	80 87       	std	Z+8, r24	; 0x08
    f4aa:	91 87       	std	Z+9, r25	; 0x09
    f4ac:	a2 87       	std	Z+10, r26	; 0x0a
    f4ae:	b3 87       	std	Z+11, r27	; 0x0b
    f4b0:	c7 01       	movw	r24, r14
    f4b2:	ca 5e       	subi	r28, 0xEA	; 234
    f4b4:	de 4f       	sbci	r29, 0xFE	; 254
    f4b6:	e8 e0       	ldi	r30, 0x08	; 8
    f4b8:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

0000f4bc <unix_time_to_fat>:
    f4bc:	a4 e0       	ldi	r26, 0x04	; 4
    f4be:	b0 e0       	ldi	r27, 0x00	; 0
    f4c0:	e4 e6       	ldi	r30, 0x64	; 100
    f4c2:	fa e7       	ldi	r31, 0x7A	; 122
    f4c4:	0c 94 db e2 	jmp	0x1c5b6	; 0x1c5b6 <__prologue_saves__+0x18>
    f4c8:	69 83       	std	Y+1, r22	; 0x01
    f4ca:	7a 83       	std	Y+2, r23	; 0x02
    f4cc:	8b 83       	std	Y+3, r24	; 0x03
    f4ce:	9c 83       	std	Y+4, r25	; 0x04
    f4d0:	7a 01       	movw	r14, r20
    f4d2:	89 01       	movw	r16, r18
    f4d4:	ce 01       	movw	r24, r28
    f4d6:	01 96       	adiw	r24, 0x01	; 1
    f4d8:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <gmtime>
    f4dc:	fc 01       	movw	r30, r24
    f4de:	22 85       	ldd	r18, Z+10	; 0x0a
    f4e0:	33 85       	ldd	r19, Z+11	; 0x0b
    f4e2:	20 55       	subi	r18, 0x50	; 80
    f4e4:	31 09       	sbc	r19, r1
    f4e6:	c9 01       	movw	r24, r18
    f4e8:	98 2f       	mov	r25, r24
    f4ea:	88 27       	eor	r24, r24
    f4ec:	99 0f       	add	r25, r25
    f4ee:	20 85       	ldd	r18, Z+8	; 0x08
    f4f0:	31 85       	ldd	r19, Z+9	; 0x09
    f4f2:	2f 5f       	subi	r18, 0xFF	; 255
    f4f4:	3f 4f       	sbci	r19, 0xFF	; 255
    f4f6:	45 e0       	ldi	r20, 0x05	; 5
    f4f8:	22 0f       	add	r18, r18
    f4fa:	33 1f       	adc	r19, r19
    f4fc:	4a 95       	dec	r20
    f4fe:	e1 f7       	brne	.-8      	; 0xf4f8 <unix_time_to_fat+0x3c>
    f500:	28 2b       	or	r18, r24
    f502:	39 2b       	or	r19, r25
    f504:	86 81       	ldd	r24, Z+6	; 0x06
    f506:	97 81       	ldd	r25, Z+7	; 0x07
    f508:	28 2b       	or	r18, r24
    f50a:	39 2b       	or	r19, r25
    f50c:	d7 01       	movw	r26, r14
    f50e:	2d 93       	st	X+, r18
    f510:	3c 93       	st	X, r19
    f512:	84 81       	ldd	r24, Z+4	; 0x04
    f514:	20 e0       	ldi	r18, 0x00	; 0
    f516:	30 e0       	ldi	r19, 0x00	; 0
    f518:	38 2f       	mov	r19, r24
    f51a:	33 0f       	add	r19, r19
    f51c:	33 0f       	add	r19, r19
    f51e:	33 0f       	add	r19, r19
    f520:	82 81       	ldd	r24, Z+2	; 0x02
    f522:	93 81       	ldd	r25, Z+3	; 0x03
    f524:	55 e0       	ldi	r21, 0x05	; 5
    f526:	88 0f       	add	r24, r24
    f528:	99 1f       	adc	r25, r25
    f52a:	5a 95       	dec	r21
    f52c:	e1 f7       	brne	.-8      	; 0xf526 <unix_time_to_fat+0x6a>
    f52e:	82 2b       	or	r24, r18
    f530:	93 2b       	or	r25, r19
    f532:	20 81       	ld	r18, Z
    f534:	31 81       	ldd	r19, Z+1	; 0x01
    f536:	36 95       	lsr	r19
    f538:	27 95       	ror	r18
    f53a:	82 2b       	or	r24, r18
    f53c:	93 2b       	or	r25, r19
    f53e:	f8 01       	movw	r30, r16
    f540:	91 83       	std	Z+1, r25	; 0x01
    f542:	80 83       	st	Z, r24
    f544:	24 96       	adiw	r28, 0x04	; 4
    f546:	e6 e0       	ldi	r30, 0x06	; 6
    f548:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

0000f54c <utime>:
    f54c:	aa e1       	ldi	r26, 0x1A	; 26
    f54e:	b1 e0       	ldi	r27, 0x01	; 1
    f550:	ec ea       	ldi	r30, 0xAC	; 172
    f552:	fa e7       	ldi	r31, 0x7A	; 122
    f554:	0c 94 dd e2 	jmp	0x1c5ba	; 0x1c5ba <__prologue_saves__+0x1c>
    f558:	8c 01       	movw	r16, r24
    f55a:	61 15       	cp	r22, r1
    f55c:	71 05       	cpc	r23, r1
    f55e:	31 f0       	breq	.+12     	; 0xf56c <utime+0x20>
    f560:	fb 01       	movw	r30, r22
    f562:	64 81       	ldd	r22, Z+4	; 0x04
    f564:	75 81       	ldd	r23, Z+5	; 0x05
    f566:	86 81       	ldd	r24, Z+6	; 0x06
    f568:	97 81       	ldd	r25, Z+7	; 0x07
    f56a:	04 c0       	rjmp	.+8      	; 0xf574 <utime+0x28>
    f56c:	80 e0       	ldi	r24, 0x00	; 0
    f56e:	90 e0       	ldi	r25, 0x00	; 0
    f570:	0e 94 3a 38 	call	0x7074	; 0x7074 <time>
    f574:	9e 01       	movw	r18, r28
    f576:	29 5e       	subi	r18, 0xE9	; 233
    f578:	3e 4f       	sbci	r19, 0xFE	; 254
    f57a:	ae 01       	movw	r20, r28
    f57c:	47 5e       	subi	r20, 0xE7	; 231
    f57e:	5e 4f       	sbci	r21, 0xFE	; 254
    f580:	9d df       	rcall	.-198    	; 0xf4bc <unix_time_to_fat>
    f582:	c7 5e       	subi	r28, 0xE7	; 231
    f584:	de 4f       	sbci	r29, 0xFE	; 254
    f586:	88 81       	ld	r24, Y
    f588:	99 81       	ldd	r25, Y+1	; 0x01
    f58a:	c9 51       	subi	r28, 0x19	; 25
    f58c:	d1 40       	sbci	r29, 0x01	; 1
    f58e:	9e 83       	std	Y+6, r25	; 0x06
    f590:	8d 83       	std	Y+5, r24	; 0x05
    f592:	c9 5e       	subi	r28, 0xE9	; 233
    f594:	de 4f       	sbci	r29, 0xFE	; 254
    f596:	88 81       	ld	r24, Y
    f598:	99 81       	ldd	r25, Y+1	; 0x01
    f59a:	c7 51       	subi	r28, 0x17	; 23
    f59c:	d1 40       	sbci	r29, 0x01	; 1
    f59e:	98 87       	std	Y+8, r25	; 0x08
    f5a0:	8f 83       	std	Y+7, r24	; 0x07
    f5a2:	be 01       	movw	r22, r28
    f5a4:	6f 5f       	subi	r22, 0xFF	; 255
    f5a6:	7f 4f       	sbci	r23, 0xFF	; 255
    f5a8:	c8 01       	movw	r24, r16
    f5aa:	0e 94 94 68 	call	0xd128	; 0xd128 <f_utime>
    f5ae:	84 31       	cpi	r24, 0x14	; 20
    f5b0:	91 05       	cpc	r25, r1
    f5b2:	40 f4       	brcc	.+16     	; 0xf5c4 <utime+0x78>
    f5b4:	fc 01       	movw	r30, r24
    f5b6:	eb 56       	subi	r30, 0x6B	; 107
    f5b8:	f4 4f       	sbci	r31, 0xF4	; 244
    f5ba:	80 81       	ld	r24, Z
    f5bc:	08 2e       	mov	r0, r24
    f5be:	00 0c       	add	r0, r0
    f5c0:	99 0b       	sbc	r25, r25
    f5c2:	02 c0       	rjmp	.+4      	; 0xf5c8 <utime+0x7c>
    f5c4:	83 e2       	ldi	r24, 0x23	; 35
    f5c6:	90 e0       	ldi	r25, 0x00	; 0
    f5c8:	c6 5e       	subi	r28, 0xE6	; 230
    f5ca:	de 4f       	sbci	r29, 0xFE	; 254
    f5cc:	e4 e0       	ldi	r30, 0x04	; 4
    f5ce:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

0000f5d2 <fileno_to_fatfs>:
    f5d2:	83 30       	cpi	r24, 0x03	; 3
    f5d4:	91 05       	cpc	r25, r1
    f5d6:	48 f4       	brcc	.+18     	; 0xf5ea <fileno_to_fatfs+0x18>
    f5d8:	89 e0       	ldi	r24, 0x09	; 9
    f5da:	90 e0       	ldi	r25, 0x00	; 0
    f5dc:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    f5e0:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    f5e4:	80 e0       	ldi	r24, 0x00	; 0
    f5e6:	90 e0       	ldi	r25, 0x00	; 0
    f5e8:	08 95       	ret
    f5ea:	60 dc       	rcall	.-1856   	; 0xeeac <fileno_to_stream>
    f5ec:	00 97       	sbiw	r24, 0x00	; 0
    f5ee:	d1 f3       	breq	.-12     	; 0xf5e4 <fileno_to_fatfs+0x12>
    f5f0:	fc 01       	movw	r30, r24
    f5f2:	84 85       	ldd	r24, Z+12	; 0x0c
    f5f4:	95 85       	ldd	r25, Z+13	; 0x0d
    f5f6:	00 97       	sbiw	r24, 0x00	; 0
    f5f8:	79 f3       	breq	.-34     	; 0xf5d8 <fileno_to_fatfs+0x6>
    f5fa:	08 95       	ret

0000f5fc <ftell>:
    f5fc:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <errno+0x1>
    f600:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <errno>
    f604:	37 dc       	rcall	.-1938   	; 0xee74 <fileno>
    f606:	83 30       	cpi	r24, 0x03	; 3
    f608:	91 05       	cpc	r25, r1
    f60a:	48 f0       	brcs	.+18     	; 0xf61e <ftell+0x22>
    f60c:	e2 df       	rcall	.-60     	; 0xf5d2 <fileno_to_fatfs>
    f60e:	00 97       	sbiw	r24, 0x00	; 0
    f610:	51 f4       	brne	.+20     	; 0xf626 <ftell+0x2a>
    f612:	89 e0       	ldi	r24, 0x09	; 9
    f614:	90 e0       	ldi	r25, 0x00	; 0
    f616:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    f61a:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    f61e:	6f ef       	ldi	r22, 0xFF	; 255
    f620:	7f ef       	ldi	r23, 0xFF	; 255
    f622:	cb 01       	movw	r24, r22
    f624:	08 95       	ret
    f626:	fc 01       	movw	r30, r24
    f628:	60 89       	ldd	r22, Z+16	; 0x10
    f62a:	71 89       	ldd	r23, Z+17	; 0x11
    f62c:	82 89       	ldd	r24, Z+18	; 0x12
    f62e:	93 89       	ldd	r25, Z+19	; 0x13
    f630:	08 95       	ret

0000f632 <lseek>:
    f632:	a3 e0       	ldi	r26, 0x03	; 3
    f634:	b0 e0       	ldi	r27, 0x00	; 0
    f636:	ef e1       	ldi	r30, 0x1F	; 31
    f638:	fb e7       	ldi	r31, 0x7B	; 123
    f63a:	0c 94 d7 e2 	jmp	0x1c5ae	; 0x1c5ae <__prologue_saves__+0x10>
    f63e:	5c 01       	movw	r10, r24
    f640:	6a 01       	movw	r12, r20
    f642:	7b 01       	movw	r14, r22
    f644:	89 01       	movw	r16, r18
    f646:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <errno+0x1>
    f64a:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <errno>
    f64e:	c1 df       	rcall	.-126    	; 0xf5d2 <fileno_to_fatfs>
    f650:	ec 01       	movw	r28, r24
    f652:	89 2b       	or	r24, r25
    f654:	19 f4       	brne	.+6      	; 0xf65c <lseek+0x2a>
    f656:	88 e1       	ldi	r24, 0x18	; 24
    f658:	90 e0       	ldi	r25, 0x00	; 0
    f65a:	26 c0       	rjmp	.+76     	; 0xf6a8 <lseek+0x76>
    f65c:	83 e0       	ldi	r24, 0x03	; 3
    f65e:	a8 16       	cp	r10, r24
    f660:	b1 04       	cpc	r11, r1
    f662:	d0 f1       	brcs	.+116    	; 0xf6d8 <lseek+0xa6>
    f664:	c5 01       	movw	r24, r10
    f666:	22 dc       	rcall	.-1980   	; 0xeeac <fileno_to_stream>
    f668:	fc 01       	movw	r30, r24
    f66a:	93 81       	ldd	r25, Z+3	; 0x03
    f66c:	90 64       	ori	r25, 0x40	; 64
    f66e:	93 83       	std	Z+3, r25	; 0x03
    f670:	02 30       	cpi	r16, 0x02	; 2
    f672:	11 05       	cpc	r17, r1
    f674:	a9 f5       	brne	.+106    	; 0xf6e0 <lseek+0xae>
    f676:	8a 85       	ldd	r24, Y+10	; 0x0a
    f678:	9b 85       	ldd	r25, Y+11	; 0x0b
    f67a:	ac 85       	ldd	r26, Y+12	; 0x0c
    f67c:	bd 85       	ldd	r27, Y+13	; 0x0d
    f67e:	c8 0e       	add	r12, r24
    f680:	d9 1e       	adc	r13, r25
    f682:	ea 1e       	adc	r14, r26
    f684:	fb 1e       	adc	r15, r27
    f686:	b7 01       	movw	r22, r14
    f688:	a6 01       	movw	r20, r12
    f68a:	ce 01       	movw	r24, r28
    f68c:	0e 94 f7 60 	call	0xc1ee	; 0xc1ee <f_lseek>
    f690:	00 97       	sbiw	r24, 0x00	; 0
    f692:	79 f0       	breq	.+30     	; 0xf6b2 <lseek+0x80>
    f694:	84 31       	cpi	r24, 0x14	; 20
    f696:	91 05       	cpc	r25, r1
    f698:	58 f5       	brcc	.+86     	; 0xf6f0 <lseek+0xbe>
    f69a:	fc 01       	movw	r30, r24
    f69c:	eb 56       	subi	r30, 0x6B	; 107
    f69e:	f4 4f       	sbci	r31, 0xF4	; 244
    f6a0:	80 81       	ld	r24, Z
    f6a2:	08 2e       	mov	r0, r24
    f6a4:	00 0c       	add	r0, r0
    f6a6:	99 0b       	sbc	r25, r25
    f6a8:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    f6ac:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    f6b0:	13 c0       	rjmp	.+38     	; 0xf6d8 <lseek+0xa6>
    f6b2:	68 89       	ldd	r22, Y+16	; 0x10
    f6b4:	79 89       	ldd	r23, Y+17	; 0x11
    f6b6:	8a 89       	ldd	r24, Y+18	; 0x12
    f6b8:	9b 89       	ldd	r25, Y+19	; 0x13
    f6ba:	c6 16       	cp	r12, r22
    f6bc:	d7 06       	cpc	r13, r23
    f6be:	e8 06       	cpc	r14, r24
    f6c0:	f9 06       	cpc	r15, r25
    f6c2:	c9 f0       	breq	.+50     	; 0xf6f6 <lseek+0xc4>
    f6c4:	80 ee       	ldi	r24, 0xE0	; 224
    f6c6:	9b e0       	ldi	r25, 0x0B	; 11
    f6c8:	a0 e0       	ldi	r26, 0x00	; 0
    f6ca:	ed b7       	in	r30, 0x3d	; 61
    f6cc:	fe b7       	in	r31, 0x3e	; 62
    f6ce:	81 83       	std	Z+1, r24	; 0x01
    f6d0:	92 83       	std	Z+2, r25	; 0x02
    f6d2:	a3 83       	std	Z+3, r26	; 0x03
    f6d4:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    f6d8:	6f ef       	ldi	r22, 0xFF	; 255
    f6da:	7f ef       	ldi	r23, 0xFF	; 255
    f6dc:	cb 01       	movw	r24, r22
    f6de:	0b c0       	rjmp	.+22     	; 0xf6f6 <lseek+0xc4>
    f6e0:	01 30       	cpi	r16, 0x01	; 1
    f6e2:	11 05       	cpc	r17, r1
    f6e4:	81 f6       	brne	.-96     	; 0xf686 <lseek+0x54>
    f6e6:	88 89       	ldd	r24, Y+16	; 0x10
    f6e8:	99 89       	ldd	r25, Y+17	; 0x11
    f6ea:	aa 89       	ldd	r26, Y+18	; 0x12
    f6ec:	bb 89       	ldd	r27, Y+19	; 0x13
    f6ee:	c7 cf       	rjmp	.-114    	; 0xf67e <lseek+0x4c>
    f6f0:	83 e2       	ldi	r24, 0x23	; 35
    f6f2:	90 e0       	ldi	r25, 0x00	; 0
    f6f4:	d9 cf       	rjmp	.-78     	; 0xf6a8 <lseek+0x76>
    f6f6:	cd b7       	in	r28, 0x3d	; 61
    f6f8:	de b7       	in	r29, 0x3e	; 62
    f6fa:	23 96       	adiw	r28, 0x03	; 3
    f6fc:	ea e0       	ldi	r30, 0x0A	; 10
    f6fe:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__epilogue_restores__+0x10>

0000f702 <fseek>:
    f702:	cf 92       	push	r12
    f704:	df 92       	push	r13
    f706:	ef 92       	push	r14
    f708:	ff 92       	push	r15
    f70a:	cf 93       	push	r28
    f70c:	df 93       	push	r29
    f70e:	6a 01       	movw	r12, r20
    f710:	7b 01       	movw	r14, r22
    f712:	e9 01       	movw	r28, r18
    f714:	af db       	rcall	.-2210   	; 0xee74 <fileno>
    f716:	97 fd       	sbrc	r25, 7
    f718:	12 c0       	rjmp	.+36     	; 0xf73e <fseek+0x3c>
    f71a:	9e 01       	movw	r18, r28
    f71c:	b7 01       	movw	r22, r14
    f71e:	a6 01       	movw	r20, r12
    f720:	88 df       	rcall	.-240    	; 0xf632 <lseek>
    f722:	21 e0       	ldi	r18, 0x01	; 1
    f724:	30 e0       	ldi	r19, 0x00	; 0
    f726:	6f 3f       	cpi	r22, 0xFF	; 255
    f728:	7f 4f       	sbci	r23, 0xFF	; 255
    f72a:	8f 4f       	sbci	r24, 0xFF	; 255
    f72c:	9f 4f       	sbci	r25, 0xFF	; 255
    f72e:	11 f0       	breq	.+4      	; 0xf734 <fseek+0x32>
    f730:	20 e0       	ldi	r18, 0x00	; 0
    f732:	30 e0       	ldi	r19, 0x00	; 0
    f734:	88 27       	eor	r24, r24
    f736:	99 27       	eor	r25, r25
    f738:	82 1b       	sub	r24, r18
    f73a:	93 0b       	sbc	r25, r19
    f73c:	02 c0       	rjmp	.+4      	; 0xf742 <fseek+0x40>
    f73e:	8f ef       	ldi	r24, 0xFF	; 255
    f740:	9f ef       	ldi	r25, 0xFF	; 255
    f742:	df 91       	pop	r29
    f744:	cf 91       	pop	r28
    f746:	ff 90       	pop	r15
    f748:	ef 90       	pop	r14
    f74a:	df 90       	pop	r13
    f74c:	cf 90       	pop	r12
    f74e:	08 95       	ret

0000f750 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f750:	a2 e0       	ldi	r26, 0x02	; 2
    f752:	b0 e0       	ldi	r27, 0x00	; 0
    f754:	ee ea       	ldi	r30, 0xAE	; 174
    f756:	fb e7       	ldi	r31, 0x7B	; 123
    f758:	0c 94 d7 e2 	jmp	0x1c5ae	; 0x1c5ae <__prologue_saves__+0x10>
    f75c:	5c 01       	movw	r10, r24
    f75e:	8b 01       	movw	r16, r22
    f760:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f762:	fb 01       	movw	r30, r22
    f764:	10 82       	st	Z, r1

    errno = 0;
    f766:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <errno+0x1>
    f76a:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f76e:	9e db       	rcall	.-2244   	; 0xeeac <fileno_to_stream>
    if(stream == stdin)
    f770:	7c 01       	movw	r14, r24
    f772:	80 91 b2 1c 	lds	r24, 0x1CB2	; 0x801cb2 <__iob>
    f776:	90 91 b3 1c 	lds	r25, 0x1CB3	; 0x801cb3 <__iob+0x1>
    f77a:	e8 16       	cp	r14, r24
    f77c:	f9 06       	cpc	r15, r25
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f77e:	c9 f4       	brne	.+50     	; 0xf7b2 <read+0x62>
    f780:	f7 01       	movw	r30, r14
    f782:	83 81       	ldd	r24, Z+3	; 0x03
    f784:	80 64       	ori	r24, 0x40	; 64
        size = 0;
    f786:	83 83       	std	Z+3, r24	; 0x03
    f788:	1a 82       	std	Y+2, r1	; 0x02
    f78a:	19 82       	std	Y+1, r1	; 0x01
    f78c:	c0 0e       	add	r12, r16
        while(count--)
    f78e:	d1 1e       	adc	r13, r17
    f790:	0c 15       	cp	r16, r12
    f792:	1d 05       	cpc	r17, r13
        {
            ret = fgetc(stream);
    f794:	09 f4       	brne	.+2      	; 0xf798 <read+0x48>
    f796:	3d c0       	rjmp	.+122    	; 0xf812 <read+0xc2>
            if(ret < 0)
    f798:	c7 01       	movw	r24, r14
    f79a:	48 da       	rcall	.-2928   	; 0xec2c <fgetc>
                break;

            *ptr++ = ret;
    f79c:	97 fd       	sbrc	r25, 7
    f79e:	39 c0       	rjmp	.+114    	; 0xf812 <read+0xc2>
    f7a0:	f8 01       	movw	r30, r16
            ++size;
    f7a2:	81 93       	st	Z+, r24
    f7a4:	8f 01       	movw	r16, r30
    f7a6:	89 81       	ldd	r24, Y+1	; 0x01
    f7a8:	9a 81       	ldd	r25, Y+2	; 0x02
    f7aa:	01 96       	adiw	r24, 0x01	; 1
    f7ac:	9a 83       	std	Y+2, r25	; 0x02
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f7ae:	89 83       	std	Y+1, r24	; 0x01
    f7b0:	ef cf       	rjmp	.-34     	; 0xf790 <read+0x40>
    f7b2:	80 91 b4 1c 	lds	r24, 0x1CB4	; 0x801cb4 <__iob+0x2>
    f7b6:	90 91 b5 1c 	lds	r25, 0x1CB5	; 0x801cb5 <__iob+0x3>
    f7ba:	e8 16       	cp	r14, r24
    f7bc:	f9 06       	cpc	r15, r25
    f7be:	71 f1       	breq	.+92     	; 0xf81c <read+0xcc>
    f7c0:	80 91 b6 1c 	lds	r24, 0x1CB6	; 0x801cb6 <__iob+0x4>
    f7c4:	90 91 b7 1c 	lds	r25, 0x1CB7	; 0x801cb7 <__iob+0x5>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f7c8:	e8 16       	cp	r14, r24
    f7ca:	f9 06       	cpc	r15, r25
    f7cc:	39 f1       	breq	.+78     	; 0xf81c <read+0xcc>
    if ( fh == NULL )
    f7ce:	c5 01       	movw	r24, r10
    f7d0:	00 df       	rcall	.-512    	; 0xf5d2 <fileno_to_fatfs>
    {
        errno = EBADF;
    f7d2:	00 97       	sbiw	r24, 0x00	; 0
    f7d4:	19 f4       	brne	.+6      	; 0xf7dc <read+0x8c>
    f7d6:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f7d8:	90 e0       	ldi	r25, 0x00	; 0
    f7da:	16 c0       	rjmp	.+44     	; 0xf808 <read+0xb8>
    f7dc:	9e 01       	movw	r18, r28
    f7de:	2f 5f       	subi	r18, 0xFF	; 255
    f7e0:	3f 4f       	sbci	r19, 0xFF	; 255
    f7e2:	a6 01       	movw	r20, r12
    f7e4:	b8 01       	movw	r22, r16
    if(res != FR_OK)
    f7e6:	0e 94 eb 5b 	call	0xb7d6	; 0xb7d6 <f_read>
    f7ea:	00 97       	sbiw	r24, 0x00	; 0
    f7ec:	91 f0       	breq	.+36     	; 0xf812 <read+0xc2>
    f7ee:	84 31       	cpi	r24, 0x14	; 20
    f7f0:	91 05       	cpc	r25, r1
    f7f2:	40 f4       	brcc	.+16     	; 0xf804 <read+0xb4>
    f7f4:	fc 01       	movw	r30, r24
    f7f6:	eb 56       	subi	r30, 0x6B	; 107
    f7f8:	f4 4f       	sbci	r31, 0xF4	; 244
    f7fa:	80 81       	ld	r24, Z
    f7fc:	08 2e       	mov	r0, r24
    f7fe:	00 0c       	add	r0, r0
    f800:	99 0b       	sbc	r25, r25
    f802:	02 c0       	rjmp	.+4      	; 0xf808 <read+0xb8>
    {
        errno = fatfs_to_errno(res);
    f804:	83 e2       	ldi	r24, 0x23	; 35
    f806:	90 e0       	ldi	r25, 0x00	; 0
    f808:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    f80c:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
        return(-1);
    }
    return ((ssize_t) size);
    f810:	05 c0       	rjmp	.+10     	; 0xf81c <read+0xcc>
    f812:	69 81       	ldd	r22, Y+1	; 0x01
    f814:	7a 81       	ldd	r23, Y+2	; 0x02
    f816:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f818:	90 e0       	ldi	r25, 0x00	; 0
    f81a:	03 c0       	rjmp	.+6      	; 0xf822 <read+0xd2>
    f81c:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f81e:	7f ef       	ldi	r23, 0xFF	; 255
    f820:	cb 01       	movw	r24, r22
    f822:	22 96       	adiw	r28, 0x02	; 2
    f824:	ea e0       	ldi	r30, 0x0A	; 10
    f826:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__epilogue_restores__+0x10>

0000f82a <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f82a:	0f 93       	push	r16
    f82c:	1f 93       	push	r17
    f82e:	cf 93       	push	r28
    f830:	df 93       	push	r29
    f832:	ec 01       	movw	r28, r24
    f834:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f836:	64 9f       	mul	r22, r20
    f838:	80 01       	movw	r16, r0
    f83a:	65 9f       	mul	r22, r21
    f83c:	10 0d       	add	r17, r0
    f83e:	74 9f       	mul	r23, r20
    f840:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    f842:	11 24       	eor	r1, r1
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f844:	17 db       	rcall	.-2514   	; 0xee74 <fileno>
    f846:	a8 01       	movw	r20, r16
    f848:	be 01       	movw	r22, r28
    if(ret < 0)
    f84a:	82 df       	rcall	.-252    	; 0xf750 <read>
    f84c:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    f84e:	02 c0       	rjmp	.+4      	; 0xf854 <fread+0x2a>
    f850:	cb 01       	movw	r24, r22
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f852:	02 c0       	rjmp	.+4      	; 0xf858 <fread+0x2e>
    f854:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    f856:	90 e0       	ldi	r25, 0x00	; 0
    f858:	df 91       	pop	r29
    f85a:	cf 91       	pop	r28
    f85c:	1f 91       	pop	r17
    f85e:	0f 91       	pop	r16
    f860:	08 95       	ret

0000f862 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f862:	cf 93       	push	r28
    f864:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f866:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <errno+0x1>
    f86a:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f86e:	83 30       	cpi	r24, 0x03	; 3
    f870:	91 05       	cpc	r25, r1
    f872:	18 f4       	brcc	.+6      	; 0xf87a <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f874:	89 e0       	ldi	r24, 0x09	; 9
    f876:	90 e0       	ldi	r25, 0x00	; 0
    f878:	18 c0       	rjmp	.+48     	; 0xf8aa <syncfs+0x48>
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f87a:	ec 01       	movw	r28, r24
    f87c:	17 db       	rcall	.-2514   	; 0xeeac <fileno_to_stream>
// reset unget on sync
    stream->flags |= __SUNGET;
    f87e:	fc 01       	movw	r30, r24
    f880:	93 81       	ldd	r25, Z+3	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f882:	90 64       	ori	r25, 0x40	; 64
    f884:	93 83       	std	Z+3, r25	; 0x03
    if(fh == NULL)
    f886:	ce 01       	movw	r24, r28
    f888:	a4 de       	rcall	.-696    	; 0xf5d2 <fileno_to_fatfs>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f88a:	00 97       	sbiw	r24, 0x00	; 0
    f88c:	99 f3       	breq	.-26     	; 0xf874 <syncfs+0x12>
    if (res != FR_OK)
    f88e:	0e 94 cd 5e 	call	0xbd9a	; 0xbd9a <f_sync>
    f892:	00 97       	sbiw	r24, 0x00	; 0
    f894:	a1 f0       	breq	.+40     	; 0xf8be <syncfs+0x5c>
    f896:	84 31       	cpi	r24, 0x14	; 20
    f898:	91 05       	cpc	r25, r1
    f89a:	70 f4       	brcc	.+28     	; 0xf8b8 <syncfs+0x56>
    f89c:	fc 01       	movw	r30, r24
    f89e:	eb 56       	subi	r30, 0x6B	; 107
    f8a0:	f4 4f       	sbci	r31, 0xF4	; 244
    f8a2:	80 81       	ld	r24, Z
    f8a4:	08 2e       	mov	r0, r24
    {
        errno = fatfs_to_errno(res);
    f8a6:	00 0c       	add	r0, r0
    f8a8:	99 0b       	sbc	r25, r25
    f8aa:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
        return(-1);
    f8ae:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    f8b2:	8f ef       	ldi	r24, 0xFF	; 255
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f8b4:	9f ef       	ldi	r25, 0xFF	; 255
    f8b6:	05 c0       	rjmp	.+10     	; 0xf8c2 <syncfs+0x60>
    f8b8:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f8ba:	90 e0       	ldi	r25, 0x00	; 0
    f8bc:	f6 cf       	rjmp	.-20     	; 0xf8aa <syncfs+0x48>
}
    f8be:	80 e0       	ldi	r24, 0x00	; 0
    f8c0:	90 e0       	ldi	r25, 0x00	; 0
    f8c2:	df 91       	pop	r29
    f8c4:	cf 91       	pop	r28
    f8c6:	08 95       	ret

0000f8c8 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f8c8:	cf 93       	push	r28
    f8ca:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f8cc:	c0 e0       	ldi	r28, 0x00	; 0
    f8ce:	d0 e0       	ldi	r29, 0x00	; 0
    f8d0:	21 96       	adiw	r28, 0x01	; 1
    f8d2:	c0 31       	cpi	r28, 0x10	; 16
    f8d4:	d1 05       	cpc	r29, r1
    f8d6:	51 f0       	breq	.+20     	; 0xf8ec <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f8d8:	c3 30       	cpi	r28, 0x03	; 3
    f8da:	d1 05       	cpc	r29, r1
    f8dc:	cc f3       	brlt	.-14     	; 0xf8d0 <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f8de:	ce 01       	movw	r24, r28
    f8e0:	78 de       	rcall	.-784    	; 0xf5d2 <fileno_to_fatfs>
        if(fh == NULL)
    f8e2:	89 2b       	or	r24, r25
            continue;

        (void ) syncfs(i);
    f8e4:	a9 f3       	breq	.-22     	; 0xf8d0 <sync+0x8>
    f8e6:	ce 01       	movw	r24, r28
    f8e8:	bc df       	rcall	.-136    	; 0xf862 <syncfs>
    }
}
    f8ea:	f2 cf       	rjmp	.-28     	; 0xf8d0 <sync+0x8>
    f8ec:	df 91       	pop	r29
    f8ee:	cf 91       	pop	r28
    f8f0:	08 95       	ret

0000f8f2 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f8f2:	a2 e0       	ldi	r26, 0x02	; 2
    f8f4:	b0 e0       	ldi	r27, 0x00	; 0
    f8f6:	ef e7       	ldi	r30, 0x7F	; 127
    f8f8:	fc e7       	ldi	r31, 0x7C	; 124
    f8fa:	0c 94 d5 e2 	jmp	0x1c5aa	; 0x1c5aa <__prologue_saves__+0xc>
    f8fe:	8c 01       	movw	r16, r24
    f900:	b6 2e       	mov	r11, r22
    f902:	f7 2e       	mov	r15, r23
    f904:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f906:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <errno+0x1>
    f90a:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    f90e:	ce da       	rcall	.-2660   	; 0xeeac <fileno_to_stream>
    if(stream == stdout || stream == stderr)
    f910:	6c 01       	movw	r12, r24
    f912:	80 91 b4 1c 	lds	r24, 0x1CB4	; 0x801cb4 <__iob+0x2>
    f916:	90 91 b5 1c 	lds	r25, 0x1CB5	; 0x801cb5 <__iob+0x3>
    f91a:	c8 16       	cp	r12, r24
    f91c:	d9 06       	cpc	r13, r25
    f91e:	39 f0       	breq	.+14     	; 0xf92e <write+0x3c>
    f920:	80 91 b6 1c 	lds	r24, 0x1CB6	; 0x801cb6 <__iob+0x4>
    f924:	90 91 b7 1c 	lds	r25, 0x1CB7	; 0x801cb7 <__iob+0x5>
    f928:	c8 16       	cp	r12, r24
    f92a:	d9 06       	cpc	r13, r25
    {
        char *ptr = (char *) buf;
        size = 0;
    f92c:	d1 f4       	brne	.+52     	; 0xf962 <write+0x70>
    f92e:	1a 82       	std	Y+2, r1	; 0x02
    f930:	19 82       	std	Y+1, r1	; 0x01
    f932:	0b 2d       	mov	r16, r11
    f934:	1f 2d       	mov	r17, r15
    f936:	78 01       	movw	r14, r16
    f938:	e8 0c       	add	r14, r8
        while(count--)
    f93a:	f9 1c       	adc	r15, r9
    f93c:	0e 15       	cp	r16, r14
    f93e:	1f 05       	cpc	r17, r15
        {
            int c,ret;
            c = *ptr++;
    f940:	d1 f1       	breq	.+116    	; 0xf9b6 <write+0xc4>
    f942:	f8 01       	movw	r30, r16
    f944:	a1 90       	ld	r10, Z+
    f946:	8f 01       	movw	r16, r30
            ret = fputc(c, stream);
    f948:	b1 2c       	mov	r11, r1
    f94a:	b6 01       	movw	r22, r12
    f94c:	c5 01       	movw	r24, r10
            if(c != ret)
    f94e:	c4 d9       	rcall	.-3192   	; 0xecd8 <fputc>
    f950:	a8 16       	cp	r10, r24
    f952:	b9 06       	cpc	r11, r25
                break;

            ++size;
    f954:	81 f5       	brne	.+96     	; 0xf9b6 <write+0xc4>
    f956:	89 81       	ldd	r24, Y+1	; 0x01
    f958:	9a 81       	ldd	r25, Y+2	; 0x02
    f95a:	01 96       	adiw	r24, 0x01	; 1
    f95c:	9a 83       	std	Y+2, r25	; 0x02
    f95e:	89 83       	std	Y+1, r24	; 0x01
        }
        return(size);
    }
    if(stream == stdin)
    f960:	ed cf       	rjmp	.-38     	; 0xf93c <write+0x4a>
    f962:	80 91 b2 1c 	lds	r24, 0x1CB2	; 0x801cb2 <__iob>
    f966:	90 91 b3 1c 	lds	r25, 0x1CB3	; 0x801cb3 <__iob+0x1>
    f96a:	c8 16       	cp	r12, r24
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f96c:	d9 06       	cpc	r13, r25
    f96e:	41 f1       	breq	.+80     	; 0xf9c0 <write+0xce>
    f970:	c8 01       	movw	r24, r16
    if ( fh == NULL )
    f972:	2f de       	rcall	.-930    	; 0xf5d2 <fileno_to_fatfs>
    f974:	00 97       	sbiw	r24, 0x00	; 0
    {
        errno = EBADF;
    f976:	19 f4       	brne	.+6      	; 0xf97e <write+0x8c>
    f978:	89 e0       	ldi	r24, 0x09	; 9
    f97a:	90 e0       	ldi	r25, 0x00	; 0
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f97c:	17 c0       	rjmp	.+46     	; 0xf9ac <write+0xba>
    f97e:	9e 01       	movw	r18, r28
    f980:	2f 5f       	subi	r18, 0xFF	; 255
    f982:	3f 4f       	sbci	r19, 0xFF	; 255
    f984:	a4 01       	movw	r20, r8
    f986:	6b 2d       	mov	r22, r11
    f988:	7f 2d       	mov	r23, r15
    f98a:	0e 94 36 5d 	call	0xba6c	; 0xba6c <f_write>
    if(res != FR_OK)
    f98e:	00 97       	sbiw	r24, 0x00	; 0
    f990:	91 f0       	breq	.+36     	; 0xf9b6 <write+0xc4>
    f992:	84 31       	cpi	r24, 0x14	; 20
    f994:	91 05       	cpc	r25, r1
    f996:	40 f4       	brcc	.+16     	; 0xf9a8 <write+0xb6>
    f998:	fc 01       	movw	r30, r24
    f99a:	eb 56       	subi	r30, 0x6B	; 107
    f99c:	f4 4f       	sbci	r31, 0xF4	; 244
    f99e:	80 81       	ld	r24, Z
    f9a0:	08 2e       	mov	r0, r24
    f9a2:	00 0c       	add	r0, r0
    f9a4:	99 0b       	sbc	r25, r25
    f9a6:	02 c0       	rjmp	.+4      	; 0xf9ac <write+0xba>
    f9a8:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
    f9aa:	90 e0       	ldi	r25, 0x00	; 0
    f9ac:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    f9b0:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
        return(-1);
    }
    return ((ssize_t) size);
    f9b4:	05 c0       	rjmp	.+10     	; 0xf9c0 <write+0xce>
    f9b6:	69 81       	ldd	r22, Y+1	; 0x01
    f9b8:	7a 81       	ldd	r23, Y+2	; 0x02
    f9ba:	80 e0       	ldi	r24, 0x00	; 0
    f9bc:	90 e0       	ldi	r25, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f9be:	03 c0       	rjmp	.+6      	; 0xf9c6 <write+0xd4>
    f9c0:	6f ef       	ldi	r22, 0xFF	; 255
    f9c2:	7f ef       	ldi	r23, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f9c4:	cb 01       	movw	r24, r22
    f9c6:	22 96       	adiw	r28, 0x02	; 2
    f9c8:	ec e0       	ldi	r30, 0x0C	; 12
    f9ca:	0c 94 f1 e2 	jmp	0x1c5e2	; 0x1c5e2 <__epilogue_restores__+0xc>

0000f9ce <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f9ce:	0f 93       	push	r16
    f9d0:	1f 93       	push	r17
    f9d2:	cf 93       	push	r28
    f9d4:	df 93       	push	r29
    f9d6:	ec 01       	movw	r28, r24
    f9d8:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f9da:	64 9f       	mul	r22, r20
    f9dc:	80 01       	movw	r16, r0
    f9de:	65 9f       	mul	r22, r21
    f9e0:	10 0d       	add	r17, r0
    f9e2:	74 9f       	mul	r23, r20
    f9e4:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    f9e6:	11 24       	eor	r1, r1
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f9e8:	45 da       	rcall	.-2934   	; 0xee74 <fileno>
    f9ea:	a8 01       	movw	r20, r16
    f9ec:	be 01       	movw	r22, r28

    if(ret < 0)
    f9ee:	81 df       	rcall	.-254    	; 0xf8f2 <write>
    f9f0:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    f9f2:	02 c0       	rjmp	.+4      	; 0xf9f8 <fwrite+0x2a>
    f9f4:	cb 01       	movw	r24, r22

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f9f6:	02 c0       	rjmp	.+4      	; 0xf9fc <fwrite+0x2e>
    f9f8:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    f9fa:	90 e0       	ldi	r25, 0x00	; 0
    f9fc:	df 91       	pop	r29
    f9fe:	cf 91       	pop	r28
    fa00:	1f 91       	pop	r17
    fa02:	0f 91       	pop	r16
    fa04:	08 95       	ret

0000fa06 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    fa06:	0f 93       	push	r16
    fa08:	1f 93       	push	r17
    fa0a:	cf 93       	push	r28
    fa0c:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fa0e:	83 30       	cpi	r24, 0x03	; 3
    fa10:	91 05       	cpc	r25, r1
    fa12:	48 f4       	brcc	.+18     	; 0xfa26 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    fa14:	89 e0       	ldi	r24, 0x09	; 9
    fa16:	90 e0       	ldi	r25, 0x00	; 0
    fa18:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    fa1c:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
        return(-1);
    fa20:	8f ef       	ldi	r24, 0xFF	; 255
    fa22:	9f ef       	ldi	r25, 0xFF	; 255
    fa24:	20 c0       	rjmp	.+64     	; 0xfa66 <free_file_descriptor+0x60>
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    fa26:	ec 01       	movw	r28, r24
    fa28:	41 da       	rcall	.-2942   	; 0xeeac <fileno_to_stream>
    if(stream == NULL)
    fa2a:	8c 01       	movw	r16, r24
    fa2c:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    fa2e:	c1 f3       	breq	.-16     	; 0xfa20 <free_file_descriptor+0x1a>
    fa30:	f8 01       	movw	r30, r16
    fa32:	84 85       	ldd	r24, Z+12	; 0x0c

    if(fh != NULL)
    fa34:	95 85       	ldd	r25, Z+13	; 0x0d
    fa36:	00 97       	sbiw	r24, 0x00	; 0
    {
        safefree(fh);
    fa38:	11 f0       	breq	.+4      	; 0xfa3e <free_file_descriptor+0x38>
    fa3a:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    fa3e:	f8 01       	movw	r30, r16
    fa40:	80 81       	ld	r24, Z
    fa42:	91 81       	ldd	r25, Z+1	; 0x01
    fa44:	00 97       	sbiw	r24, 0x00	; 0
    fa46:	21 f0       	breq	.+8      	; 0xfa50 <free_file_descriptor+0x4a>
    fa48:	23 81       	ldd	r18, Z+3	; 0x03
    {
        safefree(stream->buf);
    fa4a:	27 fd       	sbrc	r18, 7
    fa4c:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <safefree>
    }

    __iob[fileno]  = NULL;
    fa50:	fe 01       	movw	r30, r28
    fa52:	ee 0f       	add	r30, r30
    fa54:	ff 1f       	adc	r31, r31
    fa56:	ee 54       	subi	r30, 0x4E	; 78
    fa58:	f3 4e       	sbci	r31, 0xE3	; 227
    fa5a:	11 82       	std	Z+1, r1	; 0x01
    safefree(stream);
    fa5c:	10 82       	st	Z, r1
    fa5e:	c8 01       	movw	r24, r16
    fa60:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <safefree>
    return(fileno);
}
    fa64:	ce 01       	movw	r24, r28
    fa66:	df 91       	pop	r29
    fa68:	cf 91       	pop	r28
    fa6a:	1f 91       	pop	r17
    fa6c:	0f 91       	pop	r16
    fa6e:	08 95       	ret

0000fa70 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    fa70:	0f 93       	push	r16
    fa72:	1f 93       	push	r17
    fa74:	cf 93       	push	r28
    fa76:	df 93       	push	r29
    fa78:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    fa7a:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <errno+0x1>
    fa7e:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    fa82:	14 da       	rcall	.-3032   	; 0xeeac <fileno_to_stream>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    fa84:	89 2b       	or	r24, r25
    fa86:	d9 f0       	breq	.+54     	; 0xfabe <close+0x4e>
    if(fh == NULL)
    fa88:	c8 01       	movw	r24, r16
    fa8a:	a3 dd       	rcall	.-1210   	; 0xf5d2 <fileno_to_fatfs>
    {
        return(-1);
    }
    res = f_close(fh);
    fa8c:	00 97       	sbiw	r24, 0x00	; 0
    fa8e:	b9 f0       	breq	.+46     	; 0xfabe <close+0x4e>
    free_file_descriptor(fileno);
    fa90:	0e 94 4d 5f 	call	0xbe9a	; 0xbe9a <f_close>
    fa94:	ec 01       	movw	r28, r24
    if (res != FR_OK)
    fa96:	c8 01       	movw	r24, r16
    fa98:	b6 df       	rcall	.-148    	; 0xfa06 <free_file_descriptor>
    fa9a:	20 97       	sbiw	r28, 0x00	; 0
    fa9c:	99 f0       	breq	.+38     	; 0xfac4 <close+0x54>
    fa9e:	c4 31       	cpi	r28, 0x14	; 20
    faa0:	d1 05       	cpc	r29, r1
    faa2:	38 f4       	brcc	.+14     	; 0xfab2 <close+0x42>
    faa4:	cb 56       	subi	r28, 0x6B	; 107
    faa6:	d4 4f       	sbci	r29, 0xF4	; 244
    faa8:	88 81       	ld	r24, Y
    faaa:	08 2e       	mov	r0, r24
    faac:	00 0c       	add	r0, r0
    faae:	99 0b       	sbc	r25, r25
    fab0:	02 c0       	rjmp	.+4      	; 0xfab6 <close+0x46>
    {
        errno = fatfs_to_errno(res);
    fab2:	83 e2       	ldi	r24, 0x23	; 35
    fab4:	90 e0       	ldi	r25, 0x00	; 0
    fab6:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
        return(-1);
    faba:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    fabe:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return(0);
    fac0:	9f ef       	ldi	r25, 0xFF	; 255
    fac2:	02 c0       	rjmp	.+4      	; 0xfac8 <close+0x58>
}
    fac4:	80 e0       	ldi	r24, 0x00	; 0
    fac6:	90 e0       	ldi	r25, 0x00	; 0
    fac8:	df 91       	pop	r29
    faca:	cf 91       	pop	r28
    facc:	1f 91       	pop	r17
    face:	0f 91       	pop	r16
    fad0:	08 95       	ret

0000fad2 <fclose>:
    fad2:	d0 d9       	rcall	.-3168   	; 0xee74 <fileno>
    fad4:	97 fd       	sbrc	r25, 7
    fad6:	02 c0       	rjmp	.+4      	; 0xfadc <fclose+0xa>
    fad8:	cb cf       	rjmp	.-106    	; 0xfa70 <close>
    fada:	08 95       	ret
    fadc:	8f ef       	ldi	r24, 0xFF	; 255
    fade:	9f ef       	ldi	r25, 0xFF	; 255
    fae0:	08 95       	ret

0000fae2 <new_file_descriptor>:
    fae2:	0f 93       	push	r16
    fae4:	1f 93       	push	r17
    fae6:	cf 93       	push	r28
    fae8:	df 93       	push	r29
    faea:	e2 eb       	ldi	r30, 0xB2	; 178
    faec:	fc e1       	ldi	r31, 0x1C	; 28
    faee:	c0 e0       	ldi	r28, 0x00	; 0
    faf0:	d0 e0       	ldi	r29, 0x00	; 0
    faf2:	21 96       	adiw	r28, 0x01	; 1
    faf4:	c0 31       	cpi	r28, 0x10	; 16
    faf6:	d1 05       	cpc	r29, r1
    faf8:	49 f0       	breq	.+18     	; 0xfb0c <new_file_descriptor+0x2a>
    fafa:	c3 30       	cpi	r28, 0x03	; 3
    fafc:	d1 05       	cpc	r29, r1
    fafe:	24 f0       	brlt	.+8      	; 0xfb08 <new_file_descriptor+0x26>
    fb00:	82 81       	ldd	r24, Z+2	; 0x02
    fb02:	93 81       	ldd	r25, Z+3	; 0x03
    fb04:	89 2b       	or	r24, r25
    fb06:	59 f0       	breq	.+22     	; 0xfb1e <new_file_descriptor+0x3c>
    fb08:	32 96       	adiw	r30, 0x02	; 2
    fb0a:	f3 cf       	rjmp	.-26     	; 0xfaf2 <new_file_descriptor+0x10>
    fb0c:	87 e1       	ldi	r24, 0x17	; 23
    fb0e:	90 e0       	ldi	r25, 0x00	; 0
    fb10:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    fb14:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    fb18:	8f ef       	ldi	r24, 0xFF	; 255
    fb1a:	9f ef       	ldi	r25, 0xFF	; 255
    fb1c:	22 c0       	rjmp	.+68     	; 0xfb62 <new_file_descriptor+0x80>
    fb1e:	61 e0       	ldi	r22, 0x01	; 1
    fb20:	70 e0       	ldi	r23, 0x00	; 0
    fb22:	8e e0       	ldi	r24, 0x0E	; 14
    fb24:	90 e0       	ldi	r25, 0x00	; 0
    fb26:	0e 94 8d 28 	call	0x511a	; 0x511a <safecalloc>
    fb2a:	8c 01       	movw	r16, r24
    fb2c:	89 2b       	or	r24, r25
    fb2e:	59 f0       	breq	.+22     	; 0xfb46 <new_file_descriptor+0x64>
    fb30:	61 e0       	ldi	r22, 0x01	; 1
    fb32:	70 e0       	ldi	r23, 0x00	; 0
    fb34:	84 e2       	ldi	r24, 0x24	; 36
    fb36:	92 e0       	ldi	r25, 0x02	; 2
    fb38:	0e 94 8d 28 	call	0x511a	; 0x511a <safecalloc>
    fb3c:	00 97       	sbiw	r24, 0x00	; 0
    fb3e:	31 f4       	brne	.+12     	; 0xfb4c <new_file_descriptor+0x6a>
    fb40:	c8 01       	movw	r24, r16
    fb42:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <safefree>
    fb46:	8c e0       	ldi	r24, 0x0C	; 12
    fb48:	90 e0       	ldi	r25, 0x00	; 0
    fb4a:	e2 cf       	rjmp	.-60     	; 0xfb10 <new_file_descriptor+0x2e>
    fb4c:	fe 01       	movw	r30, r28
    fb4e:	ee 0f       	add	r30, r30
    fb50:	ff 1f       	adc	r31, r31
    fb52:	ee 54       	subi	r30, 0x4E	; 78
    fb54:	f3 4e       	sbci	r31, 0xE3	; 227
    fb56:	11 83       	std	Z+1, r17	; 0x01
    fb58:	00 83       	st	Z, r16
    fb5a:	f8 01       	movw	r30, r16
    fb5c:	95 87       	std	Z+13, r25	; 0x0d
    fb5e:	84 87       	std	Z+12, r24	; 0x0c
    fb60:	ce 01       	movw	r24, r28
    fb62:	df 91       	pop	r29
    fb64:	cf 91       	pop	r28
    fb66:	1f 91       	pop	r17
    fb68:	0f 91       	pop	r16
    fb6a:	08 95       	ret

0000fb6c <open>:
    fb6c:	a0 e0       	ldi	r26, 0x00	; 0
    fb6e:	b0 e0       	ldi	r27, 0x00	; 0
    fb70:	ec eb       	ldi	r30, 0xBC	; 188
    fb72:	fd e7       	ldi	r31, 0x7D	; 125
    fb74:	0c 94 d3 e2 	jmp	0x1c5a6	; 0x1c5a6 <__prologue_saves__+0x8>
    fb78:	5c 01       	movw	r10, r24
    fb7a:	6b 01       	movw	r12, r22
    fb7c:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <errno+0x1>
    fb80:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <errno>
    fb84:	7b 01       	movw	r14, r22
    fb86:	83 e0       	ldi	r24, 0x03	; 3
    fb88:	e8 22       	and	r14, r24
    fb8a:	ff 24       	eor	r15, r15
    fb8c:	e2 e0       	ldi	r30, 0x02	; 2
    fb8e:	ee 16       	cp	r14, r30
    fb90:	f1 04       	cpc	r15, r1
    fb92:	31 f0       	breq	.+12     	; 0xfba0 <open+0x34>
    fb94:	e1 14       	cp	r14, r1
    fb96:	f1 04       	cpc	r15, r1
    fb98:	31 f0       	breq	.+12     	; 0xfba6 <open+0x3a>
    fb9a:	02 e0       	ldi	r16, 0x02	; 2
    fb9c:	10 e0       	ldi	r17, 0x00	; 0
    fb9e:	05 c0       	rjmp	.+10     	; 0xfbaa <open+0x3e>
    fba0:	03 e0       	ldi	r16, 0x03	; 3
    fba2:	10 e0       	ldi	r17, 0x00	; 0
    fba4:	02 c0       	rjmp	.+4      	; 0xfbaa <open+0x3e>
    fba6:	01 e0       	ldi	r16, 0x01	; 1
    fba8:	10 e0       	ldi	r17, 0x00	; 0
    fbaa:	c6 fe       	sbrs	r12, 6
    fbac:	05 c0       	rjmp	.+10     	; 0xfbb8 <open+0x4c>
    fbae:	d1 fe       	sbrs	r13, 1
    fbb0:	02 c0       	rjmp	.+4      	; 0xfbb6 <open+0x4a>
    fbb2:	08 60       	ori	r16, 0x08	; 8
    fbb4:	01 c0       	rjmp	.+2      	; 0xfbb8 <open+0x4c>
    fbb6:	00 61       	ori	r16, 0x10	; 16
    fbb8:	94 df       	rcall	.-216    	; 0xfae2 <new_file_descriptor>
    fbba:	3c 01       	movw	r6, r24
    fbbc:	77 d9       	rcall	.-3346   	; 0xeeac <fileno_to_stream>
    fbbe:	ec 01       	movw	r28, r24
    fbc0:	c3 01       	movw	r24, r6
    fbc2:	20 97       	sbiw	r28, 0x00	; 0
    fbc4:	09 f4       	brne	.+2      	; 0xfbc8 <open+0x5c>
    fbc6:	48 c0       	rjmp	.+144    	; 0xfc58 <open+0xec>
    fbc8:	04 dd       	rcall	.-1528   	; 0xf5d2 <fileno_to_fatfs>
    fbca:	4c 01       	movw	r8, r24
    fbcc:	00 97       	sbiw	r24, 0x00	; 0
    fbce:	59 f4       	brne	.+22     	; 0xfbe6 <open+0x7a>
    fbd0:	c3 01       	movw	r24, r6
    fbd2:	19 df       	rcall	.-462    	; 0xfa06 <free_file_descriptor>
    fbd4:	89 e0       	ldi	r24, 0x09	; 9
    fbd6:	90 e0       	ldi	r25, 0x00	; 0
    fbd8:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    fbdc:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    fbe0:	8f ef       	ldi	r24, 0xFF	; 255
    fbe2:	9f ef       	ldi	r25, 0xFF	; 255
    fbe4:	5d c0       	rjmp	.+186    	; 0xfca0 <open+0x134>
    fbe6:	40 2f       	mov	r20, r16
    fbe8:	b5 01       	movw	r22, r10
    fbea:	0e 94 33 5a 	call	0xb466	; 0xb466 <f_open>
    fbee:	00 97       	sbiw	r24, 0x00	; 0
    fbf0:	91 f0       	breq	.+36     	; 0xfc16 <open+0xaa>
    fbf2:	84 31       	cpi	r24, 0x14	; 20
    fbf4:	91 05       	cpc	r25, r1
    fbf6:	40 f4       	brcc	.+16     	; 0xfc08 <open+0x9c>
    fbf8:	fc 01       	movw	r30, r24
    fbfa:	eb 56       	subi	r30, 0x6B	; 107
    fbfc:	f4 4f       	sbci	r31, 0xF4	; 244
    fbfe:	80 81       	ld	r24, Z
    fc00:	08 2e       	mov	r0, r24
    fc02:	00 0c       	add	r0, r0
    fc04:	99 0b       	sbc	r25, r25
    fc06:	02 c0       	rjmp	.+4      	; 0xfc0c <open+0xa0>
    fc08:	83 e2       	ldi	r24, 0x23	; 35
    fc0a:	90 e0       	ldi	r25, 0x00	; 0
    fc0c:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    fc10:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    fc14:	20 c0       	rjmp	.+64     	; 0xfc56 <open+0xea>
    fc16:	d2 fe       	sbrs	r13, 2
    fc18:	21 c0       	rjmp	.+66     	; 0xfc5c <open+0xf0>
    fc1a:	f4 01       	movw	r30, r8
    fc1c:	42 85       	ldd	r20, Z+10	; 0x0a
    fc1e:	53 85       	ldd	r21, Z+11	; 0x0b
    fc20:	64 85       	ldd	r22, Z+12	; 0x0c
    fc22:	75 85       	ldd	r23, Z+13	; 0x0d
    fc24:	c4 01       	movw	r24, r8
    fc26:	0e 94 f7 60 	call	0xc1ee	; 0xc1ee <f_lseek>
    fc2a:	00 97       	sbiw	r24, 0x00	; 0
    fc2c:	b9 f0       	breq	.+46     	; 0xfc5c <open+0xf0>
    fc2e:	84 31       	cpi	r24, 0x14	; 20
    fc30:	91 05       	cpc	r25, r1
    fc32:	40 f4       	brcc	.+16     	; 0xfc44 <open+0xd8>
    fc34:	fc 01       	movw	r30, r24
    fc36:	eb 56       	subi	r30, 0x6B	; 107
    fc38:	f4 4f       	sbci	r31, 0xF4	; 244
    fc3a:	80 81       	ld	r24, Z
    fc3c:	08 2e       	mov	r0, r24
    fc3e:	00 0c       	add	r0, r0
    fc40:	99 0b       	sbc	r25, r25
    fc42:	02 c0       	rjmp	.+4      	; 0xfc48 <open+0xdc>
    fc44:	83 e2       	ldi	r24, 0x23	; 35
    fc46:	90 e0       	ldi	r25, 0x00	; 0
    fc48:	90 93 b1 1c 	sts	0x1CB1, r25	; 0x801cb1 <errno+0x1>
    fc4c:	80 93 b0 1c 	sts	0x1CB0, r24	; 0x801cb0 <errno>
    fc50:	c4 01       	movw	r24, r8
    fc52:	0e 94 4d 5f 	call	0xbe9a	; 0xbe9a <f_close>
    fc56:	c3 01       	movw	r24, r6
    fc58:	d6 de       	rcall	.-596    	; 0xfa06 <free_file_descriptor>
    fc5a:	c2 cf       	rjmp	.-124    	; 0xfbe0 <open+0x74>
    fc5c:	f2 e0       	ldi	r31, 0x02	; 2
    fc5e:	ef 16       	cp	r14, r31
    fc60:	f1 04       	cpc	r15, r1
    fc62:	51 f4       	brne	.+20     	; 0xfc78 <open+0x10c>
    fc64:	8b ec       	ldi	r24, 0xCB	; 203
    fc66:	95 e7       	ldi	r25, 0x75	; 117
    fc68:	99 87       	std	Y+9, r25	; 0x09
    fc6a:	88 87       	std	Y+8, r24	; 0x08
    fc6c:	88 e4       	ldi	r24, 0x48	; 72
    fc6e:	95 e7       	ldi	r25, 0x75	; 117
    fc70:	9b 87       	std	Y+11, r25	; 0x0b
    fc72:	8a 87       	std	Y+10, r24	; 0x0a
    fc74:	83 e0       	ldi	r24, 0x03	; 3
    fc76:	12 c0       	rjmp	.+36     	; 0xfc9c <open+0x130>
    fc78:	e1 14       	cp	r14, r1
    fc7a:	f1 04       	cpc	r15, r1
    fc7c:	41 f4       	brne	.+16     	; 0xfc8e <open+0x122>
    fc7e:	19 86       	std	Y+9, r1	; 0x09
    fc80:	18 86       	std	Y+8, r1	; 0x08
    fc82:	88 e4       	ldi	r24, 0x48	; 72
    fc84:	95 e7       	ldi	r25, 0x75	; 117
    fc86:	9b 87       	std	Y+11, r25	; 0x0b
    fc88:	8a 87       	std	Y+10, r24	; 0x0a
    fc8a:	81 e0       	ldi	r24, 0x01	; 1
    fc8c:	07 c0       	rjmp	.+14     	; 0xfc9c <open+0x130>
    fc8e:	8b ec       	ldi	r24, 0xCB	; 203
    fc90:	95 e7       	ldi	r25, 0x75	; 117
    fc92:	99 87       	std	Y+9, r25	; 0x09
    fc94:	88 87       	std	Y+8, r24	; 0x08
    fc96:	1b 86       	std	Y+11, r1	; 0x0b
    fc98:	1a 86       	std	Y+10, r1	; 0x0a
    fc9a:	82 e0       	ldi	r24, 0x02	; 2
    fc9c:	8b 83       	std	Y+3, r24	; 0x03
    fc9e:	c3 01       	movw	r24, r6
    fca0:	cd b7       	in	r28, 0x3d	; 61
    fca2:	de b7       	in	r29, 0x3e	; 62
    fca4:	ee e0       	ldi	r30, 0x0E	; 14
    fca6:	0c 94 ef e2 	jmp	0x1c5de	; 0x1c5de <__epilogue_restores__+0x8>

0000fcaa <posix_fopen_modes_to_open>:
    fcaa:	cf 93       	push	r28
    fcac:	df 93       	push	r29
    fcae:	ec 01       	movw	r28, r24
    fcb0:	61 e3       	ldi	r22, 0x31	; 49
    fcb2:	73 e0       	ldi	r23, 0x03	; 3
    fcb4:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <strcmp>
    fcb8:	00 97       	sbiw	r24, 0x00	; 0
    fcba:	09 f4       	brne	.+2      	; 0xfcbe <posix_fopen_modes_to_open+0x14>
    fcbc:	5d c0       	rjmp	.+186    	; 0xfd78 <posix_fopen_modes_to_open+0xce>
    fcbe:	6d ee       	ldi	r22, 0xED	; 237
    fcc0:	78 e0       	ldi	r23, 0x08	; 8
    fcc2:	ce 01       	movw	r24, r28
    fcc4:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <strcmp>
    fcc8:	00 97       	sbiw	r24, 0x00	; 0
    fcca:	09 f4       	brne	.+2      	; 0xfcce <posix_fopen_modes_to_open+0x24>
    fccc:	55 c0       	rjmp	.+170    	; 0xfd78 <posix_fopen_modes_to_open+0xce>
    fcce:	60 ef       	ldi	r22, 0xF0	; 240
    fcd0:	78 e0       	ldi	r23, 0x08	; 8
    fcd2:	ce 01       	movw	r24, r28
    fcd4:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <strcmp>
    fcd8:	89 2b       	or	r24, r25
    fcda:	09 f4       	brne	.+2      	; 0xfcde <posix_fopen_modes_to_open+0x34>
    fcdc:	42 c0       	rjmp	.+132    	; 0xfd62 <posix_fopen_modes_to_open+0xb8>
    fcde:	63 ef       	ldi	r22, 0xF3	; 243
    fce0:	78 e0       	ldi	r23, 0x08	; 8
    fce2:	ce 01       	movw	r24, r28
    fce4:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <strcmp>
    fce8:	89 2b       	or	r24, r25
    fcea:	d9 f1       	breq	.+118    	; 0xfd62 <posix_fopen_modes_to_open+0xb8>
    fcec:	67 ef       	ldi	r22, 0xF7	; 247
    fcee:	78 e0       	ldi	r23, 0x08	; 8
    fcf0:	ce 01       	movw	r24, r28
    fcf2:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <strcmp>
    fcf6:	89 2b       	or	r24, r25
    fcf8:	a1 f1       	breq	.+104    	; 0xfd62 <posix_fopen_modes_to_open+0xb8>
    fcfa:	6c ea       	ldi	r22, 0xAC	; 172
    fcfc:	7a e0       	ldi	r23, 0x0A	; 10
    fcfe:	ce 01       	movw	r24, r28
    fd00:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <strcmp>
    fd04:	89 2b       	or	r24, r25
    fd06:	81 f1       	breq	.+96     	; 0xfd68 <posix_fopen_modes_to_open+0xbe>
    fd08:	6b ef       	ldi	r22, 0xFB	; 251
    fd0a:	78 e0       	ldi	r23, 0x08	; 8
    fd0c:	ce 01       	movw	r24, r28
    fd0e:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <strcmp>
    fd12:	89 2b       	or	r24, r25
    fd14:	49 f1       	breq	.+82     	; 0xfd68 <posix_fopen_modes_to_open+0xbe>
    fd16:	6e ef       	ldi	r22, 0xFE	; 254
    fd18:	78 e0       	ldi	r23, 0x08	; 8
    fd1a:	ce 01       	movw	r24, r28
    fd1c:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <strcmp>
    fd20:	89 2b       	or	r24, r25
    fd22:	29 f1       	breq	.+74     	; 0xfd6e <posix_fopen_modes_to_open+0xc4>
    fd24:	61 e0       	ldi	r22, 0x01	; 1
    fd26:	79 e0       	ldi	r23, 0x09	; 9
    fd28:	ce 01       	movw	r24, r28
    fd2a:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <strcmp>
    fd2e:	89 2b       	or	r24, r25
    fd30:	f1 f0       	breq	.+60     	; 0xfd6e <posix_fopen_modes_to_open+0xc4>
    fd32:	65 e0       	ldi	r22, 0x05	; 5
    fd34:	79 e0       	ldi	r23, 0x09	; 9
    fd36:	ce 01       	movw	r24, r28
    fd38:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <strcmp>
    fd3c:	89 2b       	or	r24, r25
    fd3e:	b9 f0       	breq	.+46     	; 0xfd6e <posix_fopen_modes_to_open+0xc4>
    fd40:	68 e1       	ldi	r22, 0x18	; 24
    fd42:	73 e1       	ldi	r23, 0x13	; 19
    fd44:	ce 01       	movw	r24, r28
    fd46:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <strcmp>
    fd4a:	89 2b       	or	r24, r25
    fd4c:	99 f0       	breq	.+38     	; 0xfd74 <posix_fopen_modes_to_open+0xca>
    fd4e:	69 e0       	ldi	r22, 0x09	; 9
    fd50:	79 e0       	ldi	r23, 0x09	; 9
    fd52:	ce 01       	movw	r24, r28
    fd54:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <strcmp>
    fd58:	89 2b       	or	r24, r25
    fd5a:	61 f0       	breq	.+24     	; 0xfd74 <posix_fopen_modes_to_open+0xca>
    fd5c:	8f ef       	ldi	r24, 0xFF	; 255
    fd5e:	9f ef       	ldi	r25, 0xFF	; 255
    fd60:	0b c0       	rjmp	.+22     	; 0xfd78 <posix_fopen_modes_to_open+0xce>
    fd62:	82 e0       	ldi	r24, 0x02	; 2
    fd64:	92 e0       	ldi	r25, 0x02	; 2
    fd66:	08 c0       	rjmp	.+16     	; 0xfd78 <posix_fopen_modes_to_open+0xce>
    fd68:	81 e4       	ldi	r24, 0x41	; 65
    fd6a:	92 e0       	ldi	r25, 0x02	; 2
    fd6c:	05 c0       	rjmp	.+10     	; 0xfd78 <posix_fopen_modes_to_open+0xce>
    fd6e:	82 e4       	ldi	r24, 0x42	; 66
    fd70:	92 e0       	ldi	r25, 0x02	; 2
    fd72:	02 c0       	rjmp	.+4      	; 0xfd78 <posix_fopen_modes_to_open+0xce>
    fd74:	81 e4       	ldi	r24, 0x41	; 65
    fd76:	94 e0       	ldi	r25, 0x04	; 4
    fd78:	df 91       	pop	r29
    fd7a:	cf 91       	pop	r28
    fd7c:	08 95       	ret

0000fd7e <fopen>:
    fd7e:	cf 93       	push	r28
    fd80:	df 93       	push	r29
    fd82:	ec 01       	movw	r28, r24
    fd84:	cb 01       	movw	r24, r22
    fd86:	91 df       	rcall	.-222    	; 0xfcaa <posix_fopen_modes_to_open>
    fd88:	bc 01       	movw	r22, r24
    fd8a:	ce 01       	movw	r24, r28
    fd8c:	ef de       	rcall	.-546    	; 0xfb6c <open>
    fd8e:	8e d8       	rcall	.-3812   	; 0xeeac <fileno_to_stream>
    fd90:	df 91       	pop	r29
    fd92:	cf 91       	pop	r28
    fd94:	08 95       	ret

0000fd96 <fprintf>:
    fd96:	a8 e0       	ldi	r26, 0x08	; 8
    fd98:	b0 e0       	ldi	r27, 0x00	; 0
    fd9a:	e1 ed       	ldi	r30, 0xD1	; 209
    fd9c:	fe e7       	ldi	r31, 0x7E	; 126
    fd9e:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
    fda2:	8e eb       	ldi	r24, 0xBE	; 190
    fda4:	96 e7       	ldi	r25, 0x76	; 118
    fda6:	9a 83       	std	Y+2, r25	; 0x02
    fda8:	89 83       	std	Y+1, r24	; 0x01
    fdaa:	18 86       	std	Y+8, r1	; 0x08
    fdac:	1f 82       	std	Y+7, r1	; 0x07
    fdae:	8d 85       	ldd	r24, Y+13	; 0x0d
    fdb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    fdb2:	9c 83       	std	Y+4, r25	; 0x04
    fdb4:	8b 83       	std	Y+3, r24	; 0x03
    fdb6:	4f 85       	ldd	r20, Y+15	; 0x0f
    fdb8:	58 89       	ldd	r21, Y+16	; 0x10
    fdba:	60 e8       	ldi	r22, 0x80	; 128
    fdbc:	9e 01       	movw	r18, r28
    fdbe:	2f 5e       	subi	r18, 0xEF	; 239
    fdc0:	3f 4f       	sbci	r19, 0xFF	; 255
    fdc2:	ce 01       	movw	r24, r28
    fdc4:	01 96       	adiw	r24, 0x01	; 1
    fdc6:	0e 94 1b 42 	call	0x8436	; 0x8436 <_printf_fn>
    fdca:	8f 81       	ldd	r24, Y+7	; 0x07
    fdcc:	98 85       	ldd	r25, Y+8	; 0x08
    fdce:	28 96       	adiw	r28, 0x08	; 8
    fdd0:	e2 e0       	ldi	r30, 0x02	; 2
    fdd2:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

0000fdd6 <posix_help>:
    fdd6:	cf 93       	push	r28
    fdd8:	df 93       	push	r29
    fdda:	00 d0       	rcall	.+0      	; 0xfddc <posix_help+0x6>
    fddc:	1f 92       	push	r1
    fdde:	ec 01       	movw	r28, r24
    fde0:	86 e8       	ldi	r24, 0x86	; 134
    fde2:	9e e0       	ldi	r25, 0x0E	; 14
    fde4:	a0 e0       	ldi	r26, 0x00	; 0
    fde6:	ed b7       	in	r30, 0x3d	; 61
    fde8:	fe b7       	in	r31, 0x3e	; 62
    fdea:	81 83       	std	Z+1, r24	; 0x01
    fdec:	92 83       	std	Z+2, r25	; 0x02
    fdee:	a3 83       	std	Z+3, r26	; 0x03
    fdf0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    fdf4:	cd 2b       	or	r28, r29
    fdf6:	51 f0       	breq	.+20     	; 0xfe0c <posix_help+0x36>
    fdf8:	80 ec       	ldi	r24, 0xC0	; 192
    fdfa:	9d e0       	ldi	r25, 0x0D	; 13
    fdfc:	a0 e0       	ldi	r26, 0x00	; 0
    fdfe:	ed b7       	in	r30, 0x3d	; 61
    fe00:	fe b7       	in	r31, 0x3e	; 62
    fe02:	81 83       	std	Z+1, r24	; 0x01
    fe04:	92 83       	std	Z+2, r25	; 0x02
    fe06:	a3 83       	std	Z+3, r26	; 0x03
    fe08:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    fe0c:	cd b7       	in	r28, 0x3d	; 61
    fe0e:	de b7       	in	r29, 0x3e	; 62
    fe10:	23 96       	adiw	r28, 0x03	; 3
    fe12:	e2 e0       	ldi	r30, 0x02	; 2
    fe14:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

0000fe18 <copy>:
    fe18:	4f 92       	push	r4
    fe1a:	5f 92       	push	r5
    fe1c:	6f 92       	push	r6
    fe1e:	8f 92       	push	r8
    fe20:	9f 92       	push	r9
    fe22:	af 92       	push	r10
    fe24:	bf 92       	push	r11
    fe26:	cf 92       	push	r12
    fe28:	df 92       	push	r13
    fe2a:	ef 92       	push	r14
    fe2c:	ff 92       	push	r15
    fe2e:	0f 93       	push	r16
    fe30:	1f 93       	push	r17
    fe32:	cf 93       	push	r28
    fe34:	df 93       	push	r29
    fe36:	ad b7       	in	r26, 0x3d	; 61
    fe38:	be b7       	in	r27, 0x3e	; 62
    fe3a:	17 97       	sbiw	r26, 0x07	; 7
    fe3c:	0f b6       	in	r0, 0x3f	; 63
    fe3e:	f8 94       	cli
    fe40:	be bf       	out	0x3e, r27	; 62
    fe42:	0f be       	out	0x3f, r0	; 63
    fe44:	ad bf       	out	0x3d, r26	; 61
    fe46:	8c 01       	movw	r16, r24
    fe48:	eb 01       	movw	r28, r22
    fe4a:	ed b7       	in	r30, 0x3d	; 61
    fe4c:	fe b7       	in	r31, 0x3e	; 62
    fe4e:	95 83       	std	Z+5, r25	; 0x05
    fe50:	84 83       	std	Z+4, r24	; 0x04
    fe52:	81 e4       	ldi	r24, 0x41	; 65
    fe54:	9d e0       	ldi	r25, 0x0D	; 13
    fe56:	a0 e0       	ldi	r26, 0x00	; 0
    fe58:	81 83       	std	Z+1, r24	; 0x01
    fe5a:	92 83       	std	Z+2, r25	; 0x02
    fe5c:	a3 83       	std	Z+3, r26	; 0x03
    fe5e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    fe62:	6d ee       	ldi	r22, 0xED	; 237
    fe64:	78 e0       	ldi	r23, 0x08	; 8
    fe66:	c8 01       	movw	r24, r16
    fe68:	8a df       	rcall	.-236    	; 0xfd7e <fopen>
    fe6a:	7c 01       	movw	r14, r24
    fe6c:	ed b7       	in	r30, 0x3d	; 61
    fe6e:	fe b7       	in	r31, 0x3e	; 62
    fe70:	89 2b       	or	r24, r25
    fe72:	59 f4       	brne	.+22     	; 0xfe8a <copy+0x72>
    fe74:	15 83       	std	Z+5, r17	; 0x05
    fe76:	04 83       	std	Z+4, r16	; 0x04
    fe78:	81 e3       	ldi	r24, 0x31	; 49
    fe7a:	9d e0       	ldi	r25, 0x0D	; 13
    fe7c:	a0 e0       	ldi	r26, 0x00	; 0
    fe7e:	81 83       	std	Z+1, r24	; 0x01
    fe80:	92 83       	std	Z+2, r25	; 0x02
    fe82:	a3 83       	std	Z+3, r26	; 0x03
    fe84:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    fe88:	20 c0       	rjmp	.+64     	; 0xfeca <copy+0xb2>
    fe8a:	d5 83       	std	Z+5, r29	; 0x05
    fe8c:	c4 83       	std	Z+4, r28	; 0x04
    fe8e:	84 e2       	ldi	r24, 0x24	; 36
    fe90:	9d e0       	ldi	r25, 0x0D	; 13
    fe92:	a0 e0       	ldi	r26, 0x00	; 0
    fe94:	81 83       	std	Z+1, r24	; 0x01
    fe96:	92 83       	std	Z+2, r25	; 0x02
    fe98:	a3 83       	std	Z+3, r26	; 0x03
    fe9a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    fe9e:	6b ef       	ldi	r22, 0xFB	; 251
    fea0:	78 e0       	ldi	r23, 0x08	; 8
    fea2:	ce 01       	movw	r24, r28
    fea4:	6c df       	rcall	.-296    	; 0xfd7e <fopen>
    fea6:	8c 01       	movw	r16, r24
    fea8:	89 2b       	or	r24, r25
    feaa:	a1 f4       	brne	.+40     	; 0xfed4 <copy+0xbc>
    feac:	ed b7       	in	r30, 0x3d	; 61
    feae:	fe b7       	in	r31, 0x3e	; 62
    feb0:	d5 83       	std	Z+5, r29	; 0x05
    feb2:	c4 83       	std	Z+4, r28	; 0x04
    feb4:	84 e1       	ldi	r24, 0x14	; 20
    feb6:	9d e0       	ldi	r25, 0x0D	; 13
    feb8:	a0 e0       	ldi	r26, 0x00	; 0
    feba:	81 83       	std	Z+1, r24	; 0x01
    febc:	92 83       	std	Z+2, r25	; 0x02
    febe:	a3 83       	std	Z+3, r26	; 0x03
    fec0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    fec4:	80 e0       	ldi	r24, 0x00	; 0
    fec6:	90 e0       	ldi	r25, 0x00	; 0
    fec8:	04 de       	rcall	.-1016   	; 0xfad2 <fclose>
    feca:	60 e0       	ldi	r22, 0x00	; 0
    fecc:	70 e0       	ldi	r23, 0x00	; 0
    fece:	80 e0       	ldi	r24, 0x00	; 0
    fed0:	90 e0       	ldi	r25, 0x00	; 0
    fed2:	68 c0       	rjmp	.+208    	; 0xffa4 <__DATA_REGION_LENGTH__+0xa4>
    fed4:	61 e0       	ldi	r22, 0x01	; 1
    fed6:	70 e0       	ldi	r23, 0x00	; 0
    fed8:	80 e0       	ldi	r24, 0x00	; 0
    feda:	92 e0       	ldi	r25, 0x02	; 2
    fedc:	0e 94 8d 28 	call	0x511a	; 0x511a <safecalloc>
    fee0:	6c 01       	movw	r12, r24
    fee2:	89 2b       	or	r24, r25
    fee4:	21 f4       	brne	.+8      	; 0xfeee <copy+0xd6>
    fee6:	c7 01       	movw	r24, r14
    fee8:	f4 dd       	rcall	.-1048   	; 0xfad2 <fclose>
    feea:	c8 01       	movw	r24, r16
    feec:	ed cf       	rjmp	.-38     	; 0xfec8 <copy+0xb0>
    feee:	87 e0       	ldi	r24, 0x07	; 7
    fef0:	9d e0       	ldi	r25, 0x0D	; 13
    fef2:	a0 e0       	ldi	r26, 0x00	; 0
    fef4:	ed b7       	in	r30, 0x3d	; 61
    fef6:	fe b7       	in	r31, 0x3e	; 62
    fef8:	81 83       	std	Z+1, r24	; 0x01
    fefa:	92 83       	std	Z+2, r25	; 0x02
    fefc:	a3 83       	std	Z+3, r26	; 0x03
    fefe:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    ff02:	81 2c       	mov	r8, r1
    ff04:	91 2c       	mov	r9, r1
    ff06:	54 01       	movw	r10, r8
    ff08:	8b ee       	ldi	r24, 0xEB	; 235
    ff0a:	9c e0       	ldi	r25, 0x0C	; 12
    ff0c:	2c 01       	movw	r4, r24
    ff0e:	61 2c       	mov	r6, r1
    ff10:	97 01       	movw	r18, r14
    ff12:	40 e0       	ldi	r20, 0x00	; 0
    ff14:	52 e0       	ldi	r21, 0x02	; 2
    ff16:	61 e0       	ldi	r22, 0x01	; 1
    ff18:	70 e0       	ldi	r23, 0x00	; 0
    ff1a:	c6 01       	movw	r24, r12
    ff1c:	86 dc       	rcall	.-1780   	; 0xf82a <fread>
    ff1e:	ec 01       	movw	r28, r24
    ff20:	18 16       	cp	r1, r24
    ff22:	19 06       	cpc	r1, r25
    ff24:	44 f5       	brge	.+80     	; 0xff76 <__DATA_REGION_LENGTH__+0x76>
    ff26:	98 01       	movw	r18, r16
    ff28:	ae 01       	movw	r20, r28
    ff2a:	61 e0       	ldi	r22, 0x01	; 1
    ff2c:	70 e0       	ldi	r23, 0x00	; 0
    ff2e:	c6 01       	movw	r24, r12
    ff30:	4e dd       	rcall	.-1380   	; 0xf9ce <fwrite>
    ff32:	8c 17       	cp	r24, r28
    ff34:	9d 07       	cpc	r25, r29
    ff36:	5c f4       	brge	.+22     	; 0xff4e <__DATA_REGION_LENGTH__+0x4e>
    ff38:	8a ef       	ldi	r24, 0xFA	; 250
    ff3a:	9c e0       	ldi	r25, 0x0C	; 12
    ff3c:	a0 e0       	ldi	r26, 0x00	; 0
    ff3e:	ed b7       	in	r30, 0x3d	; 61
    ff40:	fe b7       	in	r31, 0x3e	; 62
    ff42:	81 83       	std	Z+1, r24	; 0x01
    ff44:	92 83       	std	Z+2, r25	; 0x02
    ff46:	a3 83       	std	Z+3, r26	; 0x03
    ff48:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    ff4c:	14 c0       	rjmp	.+40     	; 0xff76 <__DATA_REGION_LENGTH__+0x76>
    ff4e:	ce 01       	movw	r24, r28
    ff50:	dd 0f       	add	r29, r29
    ff52:	aa 0b       	sbc	r26, r26
    ff54:	bb 0b       	sbc	r27, r27
    ff56:	88 0e       	add	r8, r24
    ff58:	99 1e       	adc	r9, r25
    ff5a:	aa 1e       	adc	r10, r26
    ff5c:	bb 1e       	adc	r11, r27
    ff5e:	ed b7       	in	r30, 0x3d	; 61
    ff60:	fe b7       	in	r31, 0x3e	; 62
    ff62:	84 82       	std	Z+4, r8	; 0x04
    ff64:	95 82       	std	Z+5, r9	; 0x05
    ff66:	a6 82       	std	Z+6, r10	; 0x06
    ff68:	b7 82       	std	Z+7, r11	; 0x07
    ff6a:	41 82       	std	Z+1, r4	; 0x01
    ff6c:	52 82       	std	Z+2, r5	; 0x02
    ff6e:	63 82       	std	Z+3, r6	; 0x03
    ff70:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    ff74:	cd cf       	rjmp	.-102    	; 0xff10 <__DATA_REGION_LENGTH__+0x10>
    ff76:	ed b7       	in	r30, 0x3d	; 61
    ff78:	fe b7       	in	r31, 0x3e	; 62
    ff7a:	84 82       	std	Z+4, r8	; 0x04
    ff7c:	95 82       	std	Z+5, r9	; 0x05
    ff7e:	a6 82       	std	Z+6, r10	; 0x06
    ff80:	b7 82       	std	Z+7, r11	; 0x07
    ff82:	88 ed       	ldi	r24, 0xD8	; 216
    ff84:	9c e0       	ldi	r25, 0x0C	; 12
    ff86:	a0 e0       	ldi	r26, 0x00	; 0
    ff88:	81 83       	std	Z+1, r24	; 0x01
    ff8a:	92 83       	std	Z+2, r25	; 0x02
    ff8c:	a3 83       	std	Z+3, r26	; 0x03
    ff8e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    ff92:	c6 01       	movw	r24, r12
    ff94:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <safefree>
    ff98:	c7 01       	movw	r24, r14
    ff9a:	9b dd       	rcall	.-1226   	; 0xfad2 <fclose>
    ff9c:	c8 01       	movw	r24, r16
    ff9e:	99 dd       	rcall	.-1230   	; 0xfad2 <fclose>
    ffa0:	b4 01       	movw	r22, r8
    ffa2:	c5 01       	movw	r24, r10
    ffa4:	ad b7       	in	r26, 0x3d	; 61
    ffa6:	be b7       	in	r27, 0x3e	; 62
    ffa8:	17 96       	adiw	r26, 0x07	; 7
    ffaa:	0f b6       	in	r0, 0x3f	; 63
    ffac:	f8 94       	cli
    ffae:	be bf       	out	0x3e, r27	; 62
    ffb0:	0f be       	out	0x3f, r0	; 63
    ffb2:	ad bf       	out	0x3d, r26	; 61
    ffb4:	df 91       	pop	r29
    ffb6:	cf 91       	pop	r28
    ffb8:	1f 91       	pop	r17
    ffba:	0f 91       	pop	r16
    ffbc:	ff 90       	pop	r15
    ffbe:	ef 90       	pop	r14
    ffc0:	df 90       	pop	r13
    ffc2:	cf 90       	pop	r12
    ffc4:	bf 90       	pop	r11
    ffc6:	af 90       	pop	r10
    ffc8:	9f 90       	pop	r9
    ffca:	8f 90       	pop	r8
    ffcc:	6f 90       	pop	r6
    ffce:	5f 90       	pop	r5
    ffd0:	4f 90       	pop	r4
    ffd2:	08 95       	ret

0000ffd4 <testpage>:
    ffd4:	cf 93       	push	r28
    ffd6:	df 93       	push	r29
    ffd8:	00 d0       	rcall	.+0      	; 0xffda <testpage+0x6>
    ffda:	1f 92       	push	r1
    ffdc:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
    ffe0:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
    ffe4:	82 17       	cp	r24, r18
    ffe6:	93 07       	cpc	r25, r19
    ffe8:	3c f1       	brlt	.+78     	; 0x10038 <__EEPROM_REGION_LENGTH__+0x38>
    ffea:	81 ed       	ldi	r24, 0xD1	; 209
    ffec:	9c e0       	ldi	r25, 0x0C	; 12
    ffee:	a0 e0       	ldi	r26, 0x00	; 0
    fff0:	ed b7       	in	r30, 0x3d	; 61
    fff2:	fe b7       	in	r31, 0x3e	; 62
    fff4:	81 83       	std	Z+1, r24	; 0x01
    fff6:	92 83       	std	Z+2, r25	; 0x02
    fff8:	a3 83       	std	Z+3, r26	; 0x03
    fffa:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    fffe:	0e 94 cb 76 	call	0xed96	; 0xed96 <getchar>
   10002:	ec 01       	movw	r28, r24
   10004:	8f ec       	ldi	r24, 0xCF	; 207
   10006:	9c e0       	ldi	r25, 0x0C	; 12
   10008:	a0 e0       	ldi	r26, 0x00	; 0
   1000a:	ed b7       	in	r30, 0x3d	; 61
   1000c:	fe b7       	in	r31, 0x3e	; 62
   1000e:	81 83       	std	Z+1, r24	; 0x01
   10010:	92 83       	std	Z+2, r25	; 0x02
   10012:	a3 83       	std	Z+3, r26	; 0x03
   10014:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   10018:	c1 37       	cpi	r28, 0x71	; 113
   1001a:	d1 05       	cpc	r29, r1
   1001c:	41 f0       	breq	.+16     	; 0x1002e <__EEPROM_REGION_LENGTH__+0x2e>
   1001e:	2a 97       	sbiw	r28, 0x0a	; 10
   10020:	49 f4       	brne	.+18     	; 0x10034 <__EEPROM_REGION_LENGTH__+0x34>
   10022:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
   10026:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
   1002a:	01 97       	sbiw	r24, 0x01	; 1
   1002c:	05 c0       	rjmp	.+10     	; 0x10038 <__EEPROM_REGION_LENGTH__+0x38>
   1002e:	8f ef       	ldi	r24, 0xFF	; 255
   10030:	9f ef       	ldi	r25, 0xFF	; 255
   10032:	02 c0       	rjmp	.+4      	; 0x10038 <__EEPROM_REGION_LENGTH__+0x38>
   10034:	80 e0       	ldi	r24, 0x00	; 0
   10036:	90 e0       	ldi	r25, 0x00	; 0
   10038:	cd b7       	in	r28, 0x3d	; 61
   1003a:	de b7       	in	r29, 0x3e	; 62
   1003c:	23 96       	adiw	r28, 0x03	; 3
   1003e:	e2 e0       	ldi	r30, 0x02	; 2
   10040:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00010044 <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
   10044:	a7 e0       	ldi	r26, 0x07	; 7
   10046:	b1 e0       	ldi	r27, 0x01	; 1
   10048:	e8 e2       	ldi	r30, 0x28	; 40
   1004a:	f0 e8       	ldi	r31, 0x80	; 128
   1004c:	0c 94 d5 e2 	jmp	0x1c5aa	; 0x1c5aa <__prologue_saves__+0xc>
   10050:	8c 01       	movw	r16, r24
   10052:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
   10054:	6d ee       	ldi	r22, 0xED	; 237
   10056:	78 e0       	ldi	r23, 0x08	; 8
   10058:	92 de       	rcall	.-732    	; 0xfd7e <fopen>
   1005a:	7c 01       	movw	r14, r24
    if (!fp)
   1005c:	89 2b       	or	r24, r25
   1005e:	41 f0       	breq	.+16     	; 0x10070 <cat+0x2c>
   10060:	c1 2c       	mov	r12, r1
   10062:	d1 2c       	mov	r13, r1
   10064:	a1 2c       	mov	r10, r1
   10066:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   10068:	8e 01       	movw	r16, r28
   1006a:	08 5f       	subi	r16, 0xF8	; 248
   1006c:	1f 4f       	sbci	r17, 0xFF	; 255
   1006e:	22 c0       	rjmp	.+68     	; 0x100b4 <cat+0x70>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
   10070:	ed b7       	in	r30, 0x3d	; 61
   10072:	fe b7       	in	r31, 0x3e	; 62
   10074:	15 83       	std	Z+5, r17	; 0x05
   10076:	04 83       	std	Z+4, r16	; 0x04
   10078:	8a e5       	ldi	r24, 0x5A	; 90
   1007a:	9d e0       	ldi	r25, 0x0D	; 13
   1007c:	a0 e0       	ldi	r26, 0x00	; 0
   1007e:	81 83       	std	Z+1, r24	; 0x01
   10080:	92 83       	std	Z+2, r25	; 0x02
   10082:	a3 83       	std	Z+3, r26	; 0x03
   10084:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        return(0);
   10088:	c1 2c       	mov	r12, r1
   1008a:	d1 2c       	mov	r13, r1
   1008c:	76 01       	movw	r14, r12
   1008e:	3f c0       	rjmp	.+126    	; 0x1010e <cat+0xca>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
   10090:	c8 01       	movw	r24, r16
   10092:	0e 94 57 32 	call	0x64ae	; 0x64ae <trim_tail>
        size += strlen(line);
   10096:	f8 01       	movw	r30, r16
   10098:	01 90       	ld	r0, Z+
   1009a:	00 20       	and	r0, r0
   1009c:	e9 f7       	brne	.-6      	; 0x10098 <cat+0x54>
   1009e:	31 97       	sbiw	r30, 0x01	; 1
   100a0:	e0 1b       	sub	r30, r16
   100a2:	f1 0b       	sbc	r31, r17
   100a4:	ce 0e       	add	r12, r30
   100a6:	df 1e       	adc	r13, r31
        puts(line);
   100a8:	c8 01       	movw	r24, r16
   100aa:	0e 94 23 77 	call	0xee46	; 0xee46 <puts>
        if(dopage)
   100ae:	81 14       	cp	r8, r1
   100b0:	91 04       	cpc	r9, r1
   100b2:	49 f4       	brne	.+18     	; 0x100c6 <cat+0x82>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   100b4:	a7 01       	movw	r20, r14
   100b6:	6e ef       	ldi	r22, 0xFE	; 254
   100b8:	70 e0       	ldi	r23, 0x00	; 0
   100ba:	c8 01       	movw	r24, r16
   100bc:	0e 94 d7 76 	call	0xedae	; 0xedae <fgets>
   100c0:	89 2b       	or	r24, r25
   100c2:	31 f7       	brne	.-52     	; 0x10090 <cat+0x4c>
   100c4:	06 c0       	rjmp	.+12     	; 0x100d2 <cat+0x8e>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   100c6:	c5 01       	movw	r24, r10
   100c8:	01 96       	adiw	r24, 0x01	; 1
   100ca:	84 df       	rcall	.-248    	; 0xffd4 <testpage>
   100cc:	5c 01       	movw	r10, r24
            if(count < 0)
   100ce:	97 ff       	sbrs	r25, 7
   100d0:	f1 cf       	rjmp	.-30     	; 0x100b4 <cat+0x70>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   100d2:	88 e5       	ldi	r24, 0x58	; 88
   100d4:	9d e0       	ldi	r25, 0x0D	; 13
   100d6:	a0 e0       	ldi	r26, 0x00	; 0
   100d8:	ed b7       	in	r30, 0x3d	; 61
   100da:	fe b7       	in	r31, 0x3e	; 62
   100dc:	81 83       	std	Z+1, r24	; 0x01
   100de:	92 83       	std	Z+2, r25	; 0x02
   100e0:	a3 83       	std	Z+3, r26	; 0x03
   100e2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    fclose(fp);
   100e6:	c7 01       	movw	r24, r14
   100e8:	f4 dc       	rcall	.-1560   	; 0xfad2 <fclose>
    printf("%ld bytes\n", (long)size);
   100ea:	0d 2c       	mov	r0, r13
   100ec:	00 0c       	add	r0, r0
   100ee:	ee 08       	sbc	r14, r14
   100f0:	ff 08       	sbc	r15, r15
   100f2:	ed b7       	in	r30, 0x3d	; 61
   100f4:	fe b7       	in	r31, 0x3e	; 62
   100f6:	c4 82       	std	Z+4, r12	; 0x04
   100f8:	d5 82       	std	Z+5, r13	; 0x05
   100fa:	e6 82       	std	Z+6, r14	; 0x06
   100fc:	f7 82       	std	Z+7, r15	; 0x07
   100fe:	8d e4       	ldi	r24, 0x4D	; 77
   10100:	9d e0       	ldi	r25, 0x0D	; 13
   10102:	a0 e0       	ldi	r26, 0x00	; 0
   10104:	81 83       	std	Z+1, r24	; 0x01
   10106:	92 83       	std	Z+2, r25	; 0x02
   10108:	a3 83       	std	Z+3, r26	; 0x03
   1010a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    return(size);
}
   1010e:	c7 01       	movw	r24, r14
   10110:	b6 01       	movw	r22, r12
   10112:	c9 5f       	subi	r28, 0xF9	; 249
   10114:	de 4f       	sbci	r29, 0xFE	; 254
   10116:	ec e0       	ldi	r30, 0x0C	; 12
   10118:	0c 94 f1 e2 	jmp	0x1c5e2	; 0x1c5e2 <__epilogue_restores__+0xc>

0001011c <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   1011c:	4f 92       	push	r4
   1011e:	5f 92       	push	r5
   10120:	6f 92       	push	r6
   10122:	7f 92       	push	r7
   10124:	af 92       	push	r10
   10126:	bf 92       	push	r11
   10128:	cf 92       	push	r12
   1012a:	df 92       	push	r13
   1012c:	ef 92       	push	r14
   1012e:	ff 92       	push	r15
   10130:	0f 93       	push	r16
   10132:	1f 93       	push	r17
   10134:	cf 93       	push	r28
   10136:	df 93       	push	r29
   10138:	cd b7       	in	r28, 0x3d	; 61
   1013a:	de b7       	in	r29, 0x3e	; 62
   1013c:	c9 54       	subi	r28, 0x49	; 73
   1013e:	d1 09       	sbc	r29, r1
   10140:	0f b6       	in	r0, 0x3f	; 63
   10142:	f8 94       	cli
   10144:	de bf       	out	0x3e, r29	; 62
   10146:	0f be       	out	0x3f, r0	; 63
   10148:	cd bf       	out	0x3d, r28	; 61
   1014a:	8c 01       	movw	r16, r24
   1014c:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
   1014e:	be 01       	movw	r22, r28
   10150:	62 5f       	subi	r22, 0xF2	; 242
   10152:	7f 4f       	sbci	r23, 0xFF	; 255
   10154:	19 d9       	rcall	.-3534   	; 0xf388 <stat>
   10156:	01 96       	adiw	r24, 0x01	; 1
   10158:	79 f4       	brne	.+30     	; 0x10178 <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
   1015a:	ed b7       	in	r30, 0x3d	; 61
   1015c:	fe b7       	in	r31, 0x3e	; 62
   1015e:	15 83       	std	Z+5, r17	; 0x05
   10160:	04 83       	std	Z+4, r16	; 0x04
   10162:	8d eb       	ldi	r24, 0xBD	; 189
   10164:	9c e0       	ldi	r25, 0x0C	; 12
   10166:	a0 e0       	ldi	r26, 0x00	; 0
   10168:	81 83       	std	Z+1, r24	; 0x01
   1016a:	92 83       	std	Z+2, r25	; 0x02
   1016c:	a3 83       	std	Z+3, r26	; 0x03
   1016e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        return(0);
   10172:	80 e0       	ldi	r24, 0x00	; 0
   10174:	90 e0       	ldi	r25, 0x00	; 0
   10176:	77 c0       	rjmp	.+238    	; 0x10266 <ls_info+0x14a>
    }

    if(!verbose)
   10178:	ef 28       	or	r14, r15
   1017a:	81 f4       	brne	.+32     	; 0x1019c <ls_info+0x80>
    {
        printf("%s\n",basename(name));
   1017c:	c8 01       	movw	r24, r16
   1017e:	0e 94 90 77 	call	0xef20	; 0xef20 <basename>
   10182:	ed b7       	in	r30, 0x3d	; 61
   10184:	fe b7       	in	r31, 0x3e	; 62
   10186:	95 83       	std	Z+5, r25	; 0x05
   10188:	84 83       	std	Z+4, r24	; 0x04
   1018a:	89 eb       	ldi	r24, 0xB9	; 185
   1018c:	9c e0       	ldi	r25, 0x0C	; 12
   1018e:	a0 e0       	ldi	r26, 0x00	; 0
   10190:	81 83       	std	Z+1, r24	; 0x01
   10192:	92 83       	std	Z+2, r25	; 0x02
   10194:	a3 83       	std	Z+3, r26	; 0x03
   10196:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1019a:	63 c0       	rjmp	.+198    	; 0x10262 <ls_info+0x146>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   1019c:	4e 88       	ldd	r4, Y+22	; 0x16
   1019e:	5f 88       	ldd	r5, Y+23	; 0x17
   101a0:	68 8c       	ldd	r6, Y+24	; 0x18
   101a2:	79 8c       	ldd	r7, Y+25	; 0x19
   101a4:	d3 01       	movw	r26, r6
   101a6:	c2 01       	movw	r24, r4
   101a8:	88 27       	eor	r24, r24
   101aa:	90 7f       	andi	r25, 0xF0	; 240
   101ac:	aa 27       	eor	r26, r26
   101ae:	bb 27       	eor	r27, r27
   101b0:	81 15       	cp	r24, r1
   101b2:	90 44       	sbci	r25, 0x40	; 64
   101b4:	a1 05       	cpc	r26, r1
   101b6:	b1 05       	cpc	r27, r1
   101b8:	11 f4       	brne	.+4      	; 0x101be <ls_info+0xa2>
        *p++ = 'd';
   101ba:	84 e6       	ldi	r24, 0x64	; 100
   101bc:	01 c0       	rjmp	.+2      	; 0x101c0 <ls_info+0xa4>
    else
        *p++ = '-';
   101be:	8d e2       	ldi	r24, 0x2D	; 45
   101c0:	8e af       	std	Y+62, r24	; 0x3e
   101c2:	fe 01       	movw	r30, r28
   101c4:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   101c6:	e1 2c       	mov	r14, r1
   101c8:	ff 24       	eor	r15, r15
   101ca:	f3 94       	inc	r15
   101cc:	20 e0       	ldi	r18, 0x00	; 0
   101ce:	30 e0       	ldi	r19, 0x00	; 0
   101d0:	be 2e       	mov	r11, r30
   101d2:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   101d4:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   101d6:	53 e0       	ldi	r21, 0x03	; 3
   101d8:	c5 2e       	mov	r12, r21
   101da:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
   101dc:	c7 01       	movw	r24, r14
   101de:	a0 e0       	ldi	r26, 0x00	; 0
   101e0:	b0 e0       	ldi	r27, 0x00	; 0
   101e2:	84 21       	and	r24, r4
   101e4:	95 21       	and	r25, r5
   101e6:	a6 21       	and	r26, r6
   101e8:	b7 21       	and	r27, r7
   101ea:	89 2b       	or	r24, r25
   101ec:	8a 2b       	or	r24, r26
   101ee:	8b 2b       	or	r24, r27
   101f0:	51 f0       	breq	.+20     	; 0x10206 <ls_info+0xea>
            *p++ = cm[ i % 3];
   101f2:	c9 01       	movw	r24, r18
   101f4:	b6 01       	movw	r22, r12
   101f6:	0e 94 4f e2 	call	0x1c49e	; 0x1c49e <__divmodhi4>
   101fa:	dc 01       	movw	r26, r24
   101fc:	a7 55       	subi	r26, 0x57	; 87
   101fe:	b4 4f       	sbci	r27, 0xF4	; 244
   10200:	8c 91       	ld	r24, X
   10202:	81 83       	std	Z+1, r24	; 0x01
   10204:	01 c0       	rjmp	.+2      	; 0x10208 <ls_info+0xec>
        else
            *p++ = '-';
   10206:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   10208:	f6 94       	lsr	r15
   1020a:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   1020c:	2f 5f       	subi	r18, 0xFF	; 255
   1020e:	3f 4f       	sbci	r19, 0xFF	; 255
   10210:	31 96       	adiw	r30, 0x01	; 1
   10212:	29 30       	cpi	r18, 0x09	; 9
   10214:	31 05       	cpc	r19, r1
   10216:	11 f7       	brne	.-60     	; 0x101dc <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   10218:	29 96       	adiw	r28, 0x09	; 9
   1021a:	1f ae       	std	Y+63, r1	; 0x3f
   1021c:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
   1021e:	4e a0       	ldd	r4, Y+38	; 0x26
   10220:	5f a0       	ldd	r5, Y+39	; 0x27
   10222:	68 a4       	ldd	r6, Y+40	; 0x28
   10224:	79 a4       	ldd	r7, Y+41	; 0x29
   10226:	6e a9       	ldd	r22, Y+54	; 0x36
   10228:	7f a9       	ldd	r23, Y+55	; 0x37
   1022a:	88 ad       	ldd	r24, Y+56	; 0x38
   1022c:	99 ad       	ldd	r25, Y+57	; 0x39
   1022e:	0e 94 6b 77 	call	0xeed6	; 0xeed6 <mctime>
   10232:	7c 01       	movw	r14, r24
   10234:	c8 01       	movw	r24, r16
   10236:	0e 94 90 77 	call	0xef20	; 0xef20 <basename>
   1023a:	ed b7       	in	r30, 0x3d	; 61
   1023c:	fe b7       	in	r31, 0x3e	; 62
   1023e:	95 87       	std	Z+13, r25	; 0x0d
   10240:	84 87       	std	Z+12, r24	; 0x0c
   10242:	f3 86       	std	Z+11, r15	; 0x0b
   10244:	e2 86       	std	Z+10, r14	; 0x0a
   10246:	46 82       	std	Z+6, r4	; 0x06
   10248:	57 82       	std	Z+7, r5	; 0x07
   1024a:	60 86       	std	Z+8, r6	; 0x08
   1024c:	71 86       	std	Z+9, r7	; 0x09
   1024e:	b4 82       	std	Z+4, r11	; 0x04
   10250:	a5 82       	std	Z+5, r10	; 0x05
   10252:	8f e9       	ldi	r24, 0x9F	; 159
   10254:	9c e0       	ldi	r25, 0x0C	; 12
   10256:	a0 e0       	ldi	r26, 0x00	; 0
   10258:	81 83       	std	Z+1, r24	; 0x01
   1025a:	92 83       	std	Z+2, r25	; 0x02
   1025c:	a3 83       	std	Z+3, r26	; 0x03
   1025e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   10262:	81 e0       	ldi	r24, 0x01	; 1
   10264:	90 e0       	ldi	r25, 0x00	; 0
}
   10266:	c7 5b       	subi	r28, 0xB7	; 183
   10268:	df 4f       	sbci	r29, 0xFF	; 255
   1026a:	0f b6       	in	r0, 0x3f	; 63
   1026c:	f8 94       	cli
   1026e:	de bf       	out	0x3e, r29	; 62
   10270:	0f be       	out	0x3f, r0	; 63
   10272:	cd bf       	out	0x3d, r28	; 61
   10274:	df 91       	pop	r29
   10276:	cf 91       	pop	r28
   10278:	1f 91       	pop	r17
   1027a:	0f 91       	pop	r16
   1027c:	ff 90       	pop	r15
   1027e:	ef 90       	pop	r14
   10280:	df 90       	pop	r13
   10282:	cf 90       	pop	r12
   10284:	bf 90       	pop	r11
   10286:	af 90       	pop	r10
   10288:	7f 90       	pop	r7
   1028a:	6f 90       	pop	r6
   1028c:	5f 90       	pop	r5
   1028e:	4f 90       	pop	r4
   10290:	08 95       	ret

00010292 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
   10292:	2f 92       	push	r2
   10294:	3f 92       	push	r3
   10296:	4f 92       	push	r4
   10298:	5f 92       	push	r5
   1029a:	6f 92       	push	r6
   1029c:	8f 92       	push	r8
   1029e:	9f 92       	push	r9
   102a0:	af 92       	push	r10
   102a2:	bf 92       	push	r11
   102a4:	cf 92       	push	r12
   102a6:	df 92       	push	r13
   102a8:	ef 92       	push	r14
   102aa:	ff 92       	push	r15
   102ac:	0f 93       	push	r16
   102ae:	1f 93       	push	r17
   102b0:	cf 93       	push	r28
   102b2:	df 93       	push	r29
   102b4:	cd b7       	in	r28, 0x3d	; 61
   102b6:	de b7       	in	r29, 0x3e	; 62
   102b8:	c7 53       	subi	r28, 0x37	; 55
   102ba:	d1 40       	sbci	r29, 0x01	; 1
   102bc:	0f b6       	in	r0, 0x3f	; 63
   102be:	f8 94       	cli
   102c0:	de bf       	out	0x3e, r29	; 62
   102c2:	0f be       	out	0x3f, r0	; 63
   102c4:	cd bf       	out	0x3d, r28	; 61
   102c6:	7c 01       	movw	r14, r24
   102c8:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   102ca:	1e 82       	std	Y+6, r1	; 0x06
   102cc:	8e 01       	movw	r16, r28
   102ce:	0a 5f       	subi	r16, 0xFA	; 250
   102d0:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   102d2:	00 97       	sbiw	r24, 0x00	; 0
   102d4:	91 f4       	brne	.+36     	; 0x102fa <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   102d6:	6e ef       	ldi	r22, 0xFE	; 254
   102d8:	70 e0       	ldi	r23, 0x00	; 0
   102da:	c8 01       	movw	r24, r16
   102dc:	0e 94 e6 77 	call	0xefcc	; 0xefcc <getcwd>
   102e0:	89 2b       	or	r24, r25
   102e2:	d1 f4       	brne	.+52     	; 0x10318 <ls+0x86>
        {
            printf("ls: Can't get current directory\n");
   102e4:	8e e7       	ldi	r24, 0x7E	; 126
   102e6:	9c e0       	ldi	r25, 0x0C	; 12
   102e8:	a0 e0       	ldi	r26, 0x00	; 0
   102ea:	ed b7       	in	r30, 0x3d	; 61
   102ec:	fe b7       	in	r31, 0x3e	; 62
   102ee:	81 83       	std	Z+1, r24	; 0x01
   102f0:	92 83       	std	Z+2, r25	; 0x02
   102f2:	a3 83       	std	Z+3, r26	; 0x03
   102f4:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   102f8:	37 c0       	rjmp	.+110    	; 0x10368 <ls+0xd6>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   102fa:	fc 01       	movw	r30, r24
   102fc:	80 81       	ld	r24, Z
   102fe:	88 23       	and	r24, r24
   10300:	51 f3       	breq	.-44     	; 0x102d6 <ls+0x44>
   10302:	67 ee       	ldi	r22, 0xE7	; 231
   10304:	72 e1       	ldi	r23, 0x12	; 18
   10306:	c7 01       	movw	r24, r14
   10308:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
   1030c:	89 2b       	or	r24, r25
   1030e:	19 f7       	brne	.-58     	; 0x102d6 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   10310:	b7 01       	movw	r22, r14
   10312:	c8 01       	movw	r24, r16
   10314:	0e 94 79 31 	call	0x62f2	; 0x62f2 <strcpy>
    }
    len = strlen(fullpath);
   10318:	f8 01       	movw	r30, r16
   1031a:	01 90       	ld	r0, Z+
   1031c:	00 20       	and	r0, r0
   1031e:	e9 f7       	brne	.-6      	; 0x1031a <ls+0x88>
   10320:	31 97       	sbiw	r30, 0x01	; 1
   10322:	1f 01       	movw	r2, r30
   10324:	20 1a       	sub	r2, r16
   10326:	31 0a       	sbc	r3, r17

    printf("Listing:[%s]\n",fullpath);
   10328:	ed b7       	in	r30, 0x3d	; 61
   1032a:	fe b7       	in	r31, 0x3e	; 62
   1032c:	15 83       	std	Z+5, r17	; 0x05
   1032e:	04 83       	std	Z+4, r16	; 0x04
   10330:	80 e7       	ldi	r24, 0x70	; 112
   10332:	9c e0       	ldi	r25, 0x0C	; 12
   10334:	a0 e0       	ldi	r26, 0x00	; 0
   10336:	81 83       	std	Z+1, r24	; 0x01
   10338:	92 83       	std	Z+2, r25	; 0x02
   1033a:	a3 83       	std	Z+3, r26	; 0x03
   1033c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

    if (stat(fullpath, &st))
   10340:	be 01       	movw	r22, r28
   10342:	6a 5f       	subi	r22, 0xFA	; 250
   10344:	7e 4f       	sbci	r23, 0xFE	; 254
   10346:	c8 01       	movw	r24, r16
   10348:	1f d8       	rcall	.-4034   	; 0xf388 <stat>
   1034a:	7c 01       	movw	r14, r24
   1034c:	89 2b       	or	r24, r25
   1034e:	79 f0       	breq	.+30     	; 0x1036e <ls+0xdc>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   10350:	ed b7       	in	r30, 0x3d	; 61
   10352:	fe b7       	in	r31, 0x3e	; 62
   10354:	15 83       	std	Z+5, r17	; 0x05
   10356:	04 83       	std	Z+4, r16	; 0x04
   10358:	8a e5       	ldi	r24, 0x5A	; 90
   1035a:	9c e0       	ldi	r25, 0x0C	; 12
   1035c:	a0 e0       	ldi	r26, 0x00	; 0
   1035e:	81 83       	std	Z+1, r24	; 0x01
   10360:	92 83       	std	Z+2, r25	; 0x02
   10362:	a3 83       	std	Z+3, r26	; 0x03
   10364:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        return(0);
   10368:	e1 2c       	mov	r14, r1
   1036a:	f1 2c       	mov	r15, r1
   1036c:	8c c0       	rjmp	.+280    	; 0x10486 <ls+0x1f4>
    }

    switch (st.st_mode & S_IFMT)
   1036e:	c2 5f       	subi	r28, 0xF2	; 242
   10370:	de 4f       	sbci	r29, 0xFE	; 254
   10372:	88 81       	ld	r24, Y
   10374:	99 81       	ldd	r25, Y+1	; 0x01
   10376:	aa 81       	ldd	r26, Y+2	; 0x02
   10378:	bb 81       	ldd	r27, Y+3	; 0x03
   1037a:	ce 50       	subi	r28, 0x0E	; 14
   1037c:	d1 40       	sbci	r29, 0x01	; 1
   1037e:	88 27       	eor	r24, r24
   10380:	90 7f       	andi	r25, 0xF0	; 240
   10382:	aa 27       	eor	r26, r26
   10384:	bb 27       	eor	r27, r27
   10386:	81 15       	cp	r24, r1
   10388:	f0 e4       	ldi	r31, 0x40	; 64
   1038a:	9f 07       	cpc	r25, r31
   1038c:	a1 05       	cpc	r26, r1
   1038e:	b1 05       	cpc	r27, r1
   10390:	59 f0       	breq	.+22     	; 0x103a8 <ls+0x116>
   10392:	81 15       	cp	r24, r1
   10394:	90 48       	sbci	r25, 0x80	; 128
   10396:	a1 05       	cpc	r26, r1
   10398:	b1 05       	cpc	r27, r1
   1039a:	09 f0       	breq	.+2      	; 0x1039e <ls+0x10c>
   1039c:	66 c0       	rjmp	.+204    	; 0x1046a <ls+0x1d8>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
   1039e:	b4 01       	movw	r22, r8
   103a0:	c8 01       	movw	r24, r16
   103a2:	bc de       	rcall	.-648    	; 0x1011c <ls_info>
   103a4:	7c 01       	movw	r14, r24
            break;
   103a6:	63 c0       	rjmp	.+198    	; 0x1046e <ls+0x1dc>
        case S_IFDIR:
            dirp = opendir(fullpath);
   103a8:	c8 01       	movw	r24, r16
   103aa:	0e 94 94 78 	call	0xf128	; 0xf128 <opendir>
   103ae:	5c 01       	movw	r10, r24
            if(!dirp)
   103b0:	89 2b       	or	r24, r25
   103b2:	81 f0       	breq	.+32     	; 0x103d4 <ls+0x142>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   103b4:	e1 2c       	mov	r14, r1
   103b6:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
   103b8:	c8 01       	movw	r24, r16
   103ba:	82 0d       	add	r24, r2
   103bc:	93 1d       	adc	r25, r3
   103be:	ca 5c       	subi	r28, 0xCA	; 202
   103c0:	de 4f       	sbci	r29, 0xFE	; 254
   103c2:	99 83       	std	Y+1, r25	; 0x01
   103c4:	88 83       	st	Y, r24
   103c6:	c6 53       	subi	r28, 0x36	; 54
   103c8:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   103ca:	87 e2       	ldi	r24, 0x27	; 39
   103cc:	9c e0       	ldi	r25, 0x0C	; 12
   103ce:	2c 01       	movw	r4, r24
   103d0:	61 2c       	mov	r6, r1
   103d2:	24 c0       	rjmp	.+72     	; 0x1041c <ls+0x18a>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
   103d4:	8a e4       	ldi	r24, 0x4A	; 74
   103d6:	9c e0       	ldi	r25, 0x0C	; 12
   103d8:	a0 e0       	ldi	r26, 0x00	; 0
   103da:	ed b7       	in	r30, 0x3d	; 61
   103dc:	fe b7       	in	r31, 0x3e	; 62
   103de:	81 83       	std	Z+1, r24	; 0x01
   103e0:	92 83       	std	Z+2, r25	; 0x02
   103e2:	a3 83       	std	Z+3, r26	; 0x03
   103e4:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
                return(0);
   103e8:	4e c0       	rjmp	.+156    	; 0x10486 <ls+0x1f4>
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
   103ea:	f6 01       	movw	r30, r12
   103ec:	80 81       	ld	r24, Z
   103ee:	88 23       	and	r24, r24
   103f0:	d9 f0       	breq	.+54     	; 0x10428 <ls+0x196>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
   103f2:	f6 01       	movw	r30, r12
   103f4:	01 90       	ld	r0, Z+
   103f6:	00 20       	and	r0, r0
   103f8:	e9 f7       	brne	.-6      	; 0x103f4 <ls+0x162>
   103fa:	31 97       	sbiw	r30, 0x01	; 1
   103fc:	ec 19       	sub	r30, r12
   103fe:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
   10400:	e2 0d       	add	r30, r2
   10402:	f3 1d       	adc	r31, r3
   10404:	ef 3f       	cpi	r30, 0xFF	; 255
   10406:	f1 05       	cpc	r31, r1
   10408:	9c f0       	brlt	.+38     	; 0x10430 <ls+0x19e>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   1040a:	ed b7       	in	r30, 0x3d	; 61
   1040c:	fe b7       	in	r31, 0x3e	; 62
   1040e:	d5 82       	std	Z+5, r13	; 0x05
   10410:	c4 82       	std	Z+4, r12	; 0x04
   10412:	41 82       	std	Z+1, r4	; 0x01
   10414:	52 82       	std	Z+2, r5	; 0x02
   10416:	63 82       	std	Z+3, r6	; 0x03
   10418:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(0);
            }
            while ( (de = readdir(dirp)) )
   1041c:	c5 01       	movw	r24, r10
   1041e:	0e 94 b2 78 	call	0xf164	; 0xf164 <readdir>
   10422:	6c 01       	movw	r12, r24
   10424:	89 2b       	or	r24, r25
   10426:	09 f7       	brne	.-62     	; 0x103ea <ls+0x158>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
   10428:	c5 01       	movw	r24, r10
   1042a:	0e 94 79 78 	call	0xf0f2	; 0xf0f2 <closedir>
            break;
   1042e:	1f c0       	rjmp	.+62     	; 0x1046e <ls+0x1dc>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
   10430:	65 e9       	ldi	r22, 0x95	; 149
   10432:	78 e0       	ldi	r23, 0x08	; 8
   10434:	c8 01       	movw	r24, r16
   10436:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
   1043a:	89 2b       	or	r24, r25
   1043c:	29 f4       	brne	.+10     	; 0x10448 <ls+0x1b6>
                {
                    strcat(fullpath,"/");
   1043e:	65 e9       	ldi	r22, 0x95	; 149
   10440:	78 e0       	ldi	r23, 0x08	; 8
   10442:	c8 01       	movw	r24, r16
   10444:	0e 94 9a 31 	call	0x6334	; 0x6334 <strcat>
                }
                strcat(fullpath,de->d_name);
   10448:	b6 01       	movw	r22, r12
   1044a:	c8 01       	movw	r24, r16
   1044c:	0e 94 9a 31 	call	0x6334	; 0x6334 <strcat>
                files +=ls_info(fullpath,verbose);
   10450:	b4 01       	movw	r22, r8
   10452:	c8 01       	movw	r24, r16
   10454:	63 de       	rcall	.-826    	; 0x1011c <ls_info>
   10456:	e8 0e       	add	r14, r24
   10458:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
   1045a:	ca 5c       	subi	r28, 0xCA	; 202
   1045c:	de 4f       	sbci	r29, 0xFE	; 254
   1045e:	e8 81       	ld	r30, Y
   10460:	f9 81       	ldd	r31, Y+1	; 0x01
   10462:	c6 53       	subi	r28, 0x36	; 54
   10464:	d1 40       	sbci	r29, 0x01	; 1
   10466:	10 82       	st	Z, r1
   10468:	d9 cf       	rjmp	.-78     	; 0x1041c <ls+0x18a>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   1046a:	e1 2c       	mov	r14, r1
   1046c:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
   1046e:	ed b7       	in	r30, 0x3d	; 61
   10470:	fe b7       	in	r31, 0x3e	; 62
   10472:	f5 82       	std	Z+5, r15	; 0x05
   10474:	e4 82       	std	Z+4, r14	; 0x04
   10476:	8c e1       	ldi	r24, 0x1C	; 28
   10478:	9c e0       	ldi	r25, 0x0C	; 12
   1047a:	a0 e0       	ldi	r26, 0x00	; 0
   1047c:	81 83       	std	Z+1, r24	; 0x01
   1047e:	92 83       	std	Z+2, r25	; 0x02
   10480:	a3 83       	std	Z+3, r26	; 0x03
   10482:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    return(files);
}
   10486:	c7 01       	movw	r24, r14
   10488:	c9 5c       	subi	r28, 0xC9	; 201
   1048a:	de 4f       	sbci	r29, 0xFE	; 254
   1048c:	0f b6       	in	r0, 0x3f	; 63
   1048e:	f8 94       	cli
   10490:	de bf       	out	0x3e, r29	; 62
   10492:	0f be       	out	0x3f, r0	; 63
   10494:	cd bf       	out	0x3d, r28	; 61
   10496:	df 91       	pop	r29
   10498:	cf 91       	pop	r28
   1049a:	1f 91       	pop	r17
   1049c:	0f 91       	pop	r16
   1049e:	ff 90       	pop	r15
   104a0:	ef 90       	pop	r14
   104a2:	df 90       	pop	r13
   104a4:	cf 90       	pop	r12
   104a6:	bf 90       	pop	r11
   104a8:	af 90       	pop	r10
   104aa:	9f 90       	pop	r9
   104ac:	8f 90       	pop	r8
   104ae:	6f 90       	pop	r6
   104b0:	5f 90       	pop	r5
   104b2:	4f 90       	pop	r4
   104b4:	3f 90       	pop	r3
   104b6:	2f 90       	pop	r2
   104b8:	08 95       	ret

000104ba <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   104ba:	a7 e0       	ldi	r26, 0x07	; 7
   104bc:	b1 e0       	ldi	r27, 0x01	; 1
   104be:	e3 e6       	ldi	r30, 0x63	; 99
   104c0:	f2 e8       	ldi	r31, 0x82	; 130
   104c2:	0c 94 d1 e2 	jmp	0x1c5a2	; 0x1c5a2 <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   104c6:	fb 01       	movw	r30, r22
   104c8:	c0 80       	ld	r12, Z
   104ca:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   104cc:	c1 14       	cp	r12, r1
   104ce:	d1 04       	cpc	r13, r1
   104d0:	09 f4       	brne	.+2      	; 0x104d4 <posix_tests+0x1a>
   104d2:	9a c1       	rjmp	.+820    	; 0x10808 <posix_tests+0x34e>
   104d4:	2b 01       	movw	r4, r22
   104d6:	8c 01       	movw	r16, r24
        return(0);

    if( MATCH(ptr,"posix") )
   104d8:	6d ea       	ldi	r22, 0xAD	; 173
   104da:	7b e0       	ldi	r23, 0x0B	; 11
   104dc:	c6 01       	movw	r24, r12
   104de:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
   104e2:	89 2b       	or	r24, r25
   104e4:	a9 f0       	breq	.+42     	; 0x10510 <posix_tests+0x56>
    {
        ptr = argv[ind++];
   104e6:	f2 01       	movw	r30, r4
   104e8:	c2 80       	ldd	r12, Z+2	; 0x02
   104ea:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   104ec:	c1 14       	cp	r12, r1
   104ee:	d1 04       	cpc	r13, r1
   104f0:	21 f4       	brne	.+8      	; 0x104fa <posix_tests+0x40>
        {
            posix_help(1);
   104f2:	81 e0       	ldi	r24, 0x01	; 1
   104f4:	90 e0       	ldi	r25, 0x00	; 0
   104f6:	6f dc       	rcall	.-1826   	; 0xfdd6 <posix_help>
   104f8:	28 c1       	rjmp	.+592    	; 0x1074a <posix_tests+0x290>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   104fa:	69 e8       	ldi	r22, 0x89	; 137
   104fc:	76 e1       	ldi	r23, 0x16	; 22
   104fe:	c6 01       	movw	r24, r12
   10500:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
   10504:	89 2b       	or	r24, r25
   10506:	a9 f7       	brne	.-22     	; 0x104f2 <posix_tests+0x38>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   10508:	22 e0       	ldi	r18, 0x02	; 2
   1050a:	62 2e       	mov	r6, r18
   1050c:	71 2c       	mov	r7, r1
   1050e:	03 c0       	rjmp	.+6      	; 0x10516 <posix_tests+0x5c>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   10510:	66 24       	eor	r6, r6
   10512:	63 94       	inc	r6
   10514:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   10516:	73 01       	movw	r14, r6
   10518:	ff ef       	ldi	r31, 0xFF	; 255
   1051a:	ef 1a       	sub	r14, r31
   1051c:	ff 0a       	sbc	r15, r31
   1051e:	98 01       	movw	r18, r16
   10520:	a7 01       	movw	r20, r14
   10522:	63 eb       	ldi	r22, 0xB3	; 179
   10524:	7b e0       	ldi	r23, 0x0B	; 11
   10526:	c6 01       	movw	r24, r12
   10528:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1052c:	89 2b       	or	r24, r25
   1052e:	a1 f1       	breq	.+104    	; 0x10598 <posix_tests+0xde>
   10530:	73 01       	movw	r14, r6
   10532:	ee 0c       	add	r14, r14
   10534:	ff 1c       	adc	r15, r15
   10536:	e4 0c       	add	r14, r4
   10538:	f5 1c       	adc	r15, r5
   1053a:	57 01       	movw	r10, r14
   1053c:	47 01       	movw	r8, r14
   1053e:	63 01       	movw	r12, r6
   10540:	41 2c       	mov	r4, r1
   10542:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   10544:	c0 16       	cp	r12, r16
   10546:	d1 06       	cpc	r13, r17
   10548:	1c f5       	brge	.+70     	; 0x10590 <posix_tests+0xd6>
        {
            if(MATCH(argv[i],"-p"))
   1054a:	67 eb       	ldi	r22, 0xB7	; 183
   1054c:	7b e0       	ldi	r23, 0x0B	; 11
   1054e:	f4 01       	movw	r30, r8
   10550:	81 91       	ld	r24, Z+
   10552:	91 91       	ld	r25, Z+
   10554:	4f 01       	movw	r8, r30
   10556:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
   1055a:	89 2b       	or	r24, r25
   1055c:	19 f0       	breq	.+6      	; 0x10564 <posix_tests+0xaa>
                page = 1;
   1055e:	44 24       	eor	r4, r4
   10560:	43 94       	inc	r4
   10562:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   10564:	ff ef       	ldi	r31, 0xFF	; 255
   10566:	cf 1a       	sub	r12, r31
   10568:	df 0a       	sbc	r13, r31
   1056a:	ec cf       	rjmp	.-40     	; 0x10544 <posix_tests+0x8a>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   1056c:	67 eb       	ldi	r22, 0xB7	; 183
   1056e:	7b e0       	ldi	r23, 0x0B	; 11
   10570:	f5 01       	movw	r30, r10
   10572:	81 91       	ld	r24, Z+
   10574:	91 91       	ld	r25, Z+
   10576:	5f 01       	movw	r10, r30
   10578:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
   1057c:	89 2b       	or	r24, r25
   1057e:	29 f4       	brne	.+10     	; 0x1058a <posix_tests+0xd0>
                cat(argv[ind], page);
   10580:	b2 01       	movw	r22, r4
   10582:	f7 01       	movw	r30, r14
   10584:	80 81       	ld	r24, Z
   10586:	91 81       	ldd	r25, Z+1	; 0x01
   10588:	5d dd       	rcall	.-1350   	; 0x10044 <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   1058a:	ff ef       	ldi	r31, 0xFF	; 255
   1058c:	6f 1a       	sub	r6, r31
   1058e:	7f 0a       	sbc	r7, r31
   10590:	60 16       	cp	r6, r16
   10592:	71 06       	cpc	r7, r17
   10594:	5c f3       	brlt	.-42     	; 0x1056c <posix_tests+0xb2>
   10596:	d9 c0       	rjmp	.+434    	; 0x1074a <posix_tests+0x290>
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   10598:	53 01       	movw	r10, r6
   1059a:	82 e0       	ldi	r24, 0x02	; 2
   1059c:	a8 0e       	add	r10, r24
   1059e:	b1 1c       	adc	r11, r1
   105a0:	98 01       	movw	r18, r16
   105a2:	a5 01       	movw	r20, r10
   105a4:	6a eb       	ldi	r22, 0xBA	; 186
   105a6:	7b e0       	ldi	r23, 0x0B	; 11
   105a8:	c6 01       	movw	r24, r12
   105aa:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   105ae:	89 2b       	or	r24, r25
   105b0:	59 f0       	breq	.+22     	; 0x105c8 <posix_tests+0x10e>
    {
        copy(argv[ind],argv[ind+1]);
   105b2:	f3 01       	movw	r30, r6
   105b4:	ee 0f       	add	r30, r30
   105b6:	ff 1f       	adc	r31, r31
   105b8:	e4 0d       	add	r30, r4
   105ba:	f5 1d       	adc	r31, r5
   105bc:	62 81       	ldd	r22, Z+2	; 0x02
   105be:	73 81       	ldd	r23, Z+3	; 0x03
   105c0:	80 81       	ld	r24, Z
   105c2:	91 81       	ldd	r25, Z+1	; 0x01
   105c4:	29 dc       	rcall	.-1966   	; 0xfe18 <copy>
   105c6:	c1 c0       	rjmp	.+386    	; 0x1074a <posix_tests+0x290>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   105c8:	98 01       	movw	r18, r16
   105ca:	a7 01       	movw	r20, r14
   105cc:	67 e2       	ldi	r22, 0x27	; 39
   105ce:	77 e1       	ldi	r23, 0x17	; 23
   105d0:	c6 01       	movw	r24, r12
   105d2:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   105d6:	89 2b       	or	r24, r25
   105d8:	b9 f0       	breq	.+46     	; 0x10608 <posix_tests+0x14e>
    {
        if ( chdir(argv[ind]) != 0)
   105da:	73 01       	movw	r14, r6
   105dc:	ee 0c       	add	r14, r14
   105de:	ff 1c       	adc	r15, r15
   105e0:	e4 0c       	add	r14, r4
   105e2:	f5 1c       	adc	r15, r5
   105e4:	f7 01       	movw	r30, r14
   105e6:	80 81       	ld	r24, Z
   105e8:	91 81       	ldd	r25, Z+1	; 0x01
   105ea:	0e 94 9e 77 	call	0xef3c	; 0xef3c <chdir>
   105ee:	89 2b       	or	r24, r25
   105f0:	09 f4       	brne	.+2      	; 0x105f4 <posix_tests+0x13a>
   105f2:	ab c0       	rjmp	.+342    	; 0x1074a <posix_tests+0x290>
            printf("chdir %s failed\n", argv[ind]);
   105f4:	f7 01       	movw	r30, r14
   105f6:	80 81       	ld	r24, Z
   105f8:	91 81       	ldd	r25, Z+1	; 0x01
   105fa:	ed b7       	in	r30, 0x3d	; 61
   105fc:	fe b7       	in	r31, 0x3e	; 62
   105fe:	95 83       	std	Z+5, r25	; 0x05
   10600:	84 83       	std	Z+4, r24	; 0x04
   10602:	8f ea       	ldi	r24, 0xAF	; 175
   10604:	9d e0       	ldi	r25, 0x0D	; 13
   10606:	9b c0       	rjmp	.+310    	; 0x1073e <posix_tests+0x284>
        logfile(argv[ind],argv[ind+1]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   10608:	98 01       	movw	r18, r16
   1060a:	a3 01       	movw	r20, r6
   1060c:	67 ec       	ldi	r22, 0xC7	; 199
   1060e:	78 e0       	ldi	r23, 0x08	; 8
   10610:	c6 01       	movw	r24, r12
   10612:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   10616:	4c 01       	movw	r8, r24
   10618:	89 2b       	or	r24, r25
   1061a:	69 f1       	breq	.+90     	; 0x10676 <posix_tests+0x1bc>
   1061c:	73 01       	movw	r14, r6
   1061e:	ee 0c       	add	r14, r14
   10620:	ff 1c       	adc	r15, r15
   10622:	e4 0c       	add	r14, r4
   10624:	f5 1c       	adc	r15, r5
   10626:	c1 2c       	mov	r12, r1
   10628:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   1062a:	c6 01       	movw	r24, r12
   1062c:	86 0d       	add	r24, r6
   1062e:	97 1d       	adc	r25, r7
   10630:	80 17       	cp	r24, r16
   10632:	91 07       	cpc	r25, r17
   10634:	b4 f4       	brge	.+44     	; 0x10662 <posix_tests+0x1a8>
        {
            if(!MATCH(argv[i],"-l"))
   10636:	6f eb       	ldi	r22, 0xBF	; 191
   10638:	7b e0       	ldi	r23, 0x0B	; 11
   1063a:	f7 01       	movw	r30, r14
   1063c:	80 81       	ld	r24, Z
   1063e:	91 81       	ldd	r25, Z+1	; 0x01
   10640:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
   10644:	89 2b       	or	r24, r25
   10646:	31 f4       	brne	.+12     	; 0x10654 <posix_tests+0x19a>
                ls(argv[i],1);
   10648:	61 e0       	ldi	r22, 0x01	; 1
   1064a:	70 e0       	ldi	r23, 0x00	; 0
   1064c:	f7 01       	movw	r30, r14
   1064e:	80 81       	ld	r24, Z
   10650:	91 81       	ldd	r25, Z+1	; 0x01
   10652:	1f de       	rcall	.-962    	; 0x10292 <ls>
            ++args;
   10654:	ff ef       	ldi	r31, 0xFF	; 255
   10656:	cf 1a       	sub	r12, r31
   10658:	df 0a       	sbc	r13, r31
   1065a:	82 e0       	ldi	r24, 0x02	; 2
   1065c:	e8 0e       	add	r14, r24
   1065e:	f1 1c       	adc	r15, r1
   10660:	e4 cf       	rjmp	.-56     	; 0x1062a <posix_tests+0x170>
        }
        if(!args)
   10662:	c1 14       	cp	r12, r1
   10664:	d1 04       	cpc	r13, r1
   10666:	09 f0       	breq	.+2      	; 0x1066a <posix_tests+0x1b0>
        {
            ls("",1);
   10668:	70 c0       	rjmp	.+224    	; 0x1074a <posix_tests+0x290>
   1066a:	61 e0       	ldi	r22, 0x01	; 1
   1066c:	70 e0       	ldi	r23, 0x00	; 0
   1066e:	89 e1       	ldi	r24, 0x19	; 25
   10670:	9c e0       	ldi	r25, 0x0C	; 12
   10672:	0f de       	rcall	.-994    	; 0x10292 <ls>
        mkfs(argv[ind++]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   10674:	6a c0       	rjmp	.+212    	; 0x1074a <posix_tests+0x290>
   10676:	98 01       	movw	r18, r16
   10678:	a7 01       	movw	r20, r14
   1067a:	62 ec       	ldi	r22, 0xC2	; 194
   1067c:	7b e0       	ldi	r23, 0x0B	; 11
   1067e:	c6 01       	movw	r24, r12
   10680:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   10684:	89 2b       	or	r24, r25
    {
        int mode = 0777;
        if((ind+2) <= argc)
   10686:	71 f1       	breq	.+92     	; 0x106e4 <posix_tests+0x22a>
   10688:	e0 16       	cp	r14, r16
   1068a:	f1 06       	cpc	r15, r17
        {
            mode = strtol(argv[ind+1],NULL,8);
   1068c:	7c f4       	brge	.+30     	; 0x106ac <posix_tests+0x1f2>
   1068e:	ee 0c       	add	r14, r14
   10690:	ff 1c       	adc	r15, r15
   10692:	f2 01       	movw	r30, r4
   10694:	ee 0d       	add	r30, r14
   10696:	ff 1d       	adc	r31, r15
   10698:	48 e0       	ldi	r20, 0x08	; 8
   1069a:	50 e0       	ldi	r21, 0x00	; 0
   1069c:	60 e0       	ldi	r22, 0x00	; 0
   1069e:	70 e0       	ldi	r23, 0x00	; 0
   106a0:	80 81       	ld	r24, Z
   106a2:	91 81       	ldd	r25, Z+1	; 0x01
   106a4:	0e 94 b6 46 	call	0x8d6c	; 0x8d6c <strtol>
   106a8:	ab 01       	movw	r20, r22
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   106aa:	02 c0       	rjmp	.+4      	; 0x106b0 <posix_tests+0x1f6>
   106ac:	4f ef       	ldi	r20, 0xFF	; 255
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   106ae:	51 e0       	ldi	r21, 0x01	; 1
   106b0:	73 01       	movw	r14, r6
   106b2:	ee 0c       	add	r14, r14
   106b4:	ff 1c       	adc	r15, r15
   106b6:	e4 0c       	add	r14, r4
   106b8:	f5 1c       	adc	r15, r5
   106ba:	05 2e       	mov	r0, r21
   106bc:	00 0c       	add	r0, r0
   106be:	66 0b       	sbc	r22, r22
   106c0:	77 0b       	sbc	r23, r23
   106c2:	f7 01       	movw	r30, r14
   106c4:	80 81       	ld	r24, Z
   106c6:	91 81       	ldd	r25, Z+1	; 0x01
   106c8:	0e 94 0b 78 	call	0xf016	; 0xf016 <mkdir>
   106cc:	89 2b       	or	r24, r25
        {
            printf("mkdir %s failed\n", argv[ind]);
   106ce:	e9 f1       	breq	.+122    	; 0x1074a <posix_tests+0x290>
   106d0:	f7 01       	movw	r30, r14
   106d2:	80 81       	ld	r24, Z
   106d4:	91 81       	ldd	r25, Z+1	; 0x01
   106d6:	ed b7       	in	r30, 0x3d	; 61
   106d8:	fe b7       	in	r31, 0x3e	; 62
   106da:	95 83       	std	Z+5, r25	; 0x05
   106dc:	84 83       	std	Z+4, r24	; 0x04
   106de:	8e e9       	ldi	r24, 0x9E	; 158
   106e0:	9d e0       	ldi	r25, 0x0D	; 13
            return(0);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   106e2:	b4 c0       	rjmp	.+360    	; 0x1084c <posix_tests+0x392>
   106e4:	98 01       	movw	r18, r16
   106e6:	a7 01       	movw	r20, r14
   106e8:	68 ec       	ldi	r22, 0xC8	; 200
   106ea:	7b e0       	ldi	r23, 0x0B	; 11
   106ec:	c6 01       	movw	r24, r12
   106ee:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   106f2:	89 2b       	or	r24, r25
    {
        setpage(atoi(argv[ind]));
   106f4:	71 f0       	breq	.+28     	; 0x10712 <posix_tests+0x258>
   106f6:	66 0c       	add	r6, r6
   106f8:	77 1c       	adc	r7, r7
   106fa:	f2 01       	movw	r30, r4
   106fc:	e6 0d       	add	r30, r6
   106fe:	f7 1d       	adc	r31, r7
   10700:	80 81       	ld	r24, Z
   10702:	91 81       	ldd	r25, Z+1	; 0x01
   10704:	0e 94 14 47 	call	0x8e28	; 0x8e28 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   10708:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   1070c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   10710:	1c c0       	rjmp	.+56     	; 0x1074a <posix_tests+0x290>
   10712:	98 01       	movw	r18, r16
   10714:	a3 01       	movw	r20, r6
   10716:	6d ec       	ldi	r22, 0xCD	; 205
   10718:	7b e0       	ldi	r23, 0x0B	; 11
   1071a:	c6 01       	movw	r24, r12
   1071c:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   10720:	4c 01       	movw	r8, r24
   10722:	89 2b       	or	r24, r25
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   10724:	b1 f0       	breq	.+44     	; 0x10752 <posix_tests+0x298>
   10726:	6e ef       	ldi	r22, 0xFE	; 254
   10728:	70 e0       	ldi	r23, 0x00	; 0
   1072a:	ce 01       	movw	r24, r28
   1072c:	08 96       	adiw	r24, 0x08	; 8
   1072e:	0e 94 e6 77 	call	0xefcc	; 0xefcc <getcwd>
   10732:	ed b7       	in	r30, 0x3d	; 61
   10734:	fe b7       	in	r31, 0x3e	; 62
   10736:	95 83       	std	Z+5, r25	; 0x05
   10738:	84 83       	std	Z+4, r24	; 0x04
   1073a:	8a e9       	ldi	r24, 0x9A	; 154
   1073c:	9d e0       	ldi	r25, 0x0D	; 13
   1073e:	a0 e0       	ldi	r26, 0x00	; 0
   10740:	81 83       	std	Z+1, r24	; 0x01
   10742:	92 83       	std	Z+2, r25	; 0x02
   10744:	a3 83       	std	Z+3, r26	; 0x03
   10746:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        return(1);
   1074a:	88 24       	eor	r8, r8
   1074c:	83 94       	inc	r8
   1074e:	91 2c       	mov	r9, r1
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   10750:	83 c0       	rjmp	.+262    	; 0x10858 <posix_tests+0x39e>
   10752:	98 01       	movw	r18, r16
   10754:	a5 01       	movw	r20, r10
   10756:	61 ed       	ldi	r22, 0xD1	; 209
   10758:	7b e0       	ldi	r23, 0x0B	; 11
   1075a:	c6 01       	movw	r24, r12
   1075c:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   10760:	89 2b       	or	r24, r25
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   10762:	61 f1       	breq	.+88     	; 0x107bc <posix_tests+0x302>
   10764:	66 0c       	add	r6, r6
   10766:	77 1c       	adc	r7, r7
   10768:	82 01       	movw	r16, r4
   1076a:	06 0d       	add	r16, r6
   1076c:	17 1d       	adc	r17, r7
   1076e:	f2 e0       	ldi	r31, 0x02	; 2
   10770:	6f 0e       	add	r6, r31
   10772:	71 1c       	adc	r7, r1
   10774:	72 01       	movw	r14, r4
   10776:	e6 0c       	add	r14, r6
   10778:	f7 1c       	adc	r15, r7
   1077a:	f7 01       	movw	r30, r14
   1077c:	60 81       	ld	r22, Z
   1077e:	71 81       	ldd	r23, Z+1	; 0x01
   10780:	f8 01       	movw	r30, r16
   10782:	80 81       	ld	r24, Z
   10784:	91 81       	ldd	r25, Z+1	; 0x01
   10786:	0e 94 39 78 	call	0xf072	; 0xf072 <rename>
   1078a:	89 2b       	or	r24, r25
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   1078c:	f1 f2       	breq	.-68     	; 0x1074a <posix_tests+0x290>
   1078e:	f7 01       	movw	r30, r14
   10790:	80 81       	ld	r24, Z
   10792:	91 81       	ldd	r25, Z+1	; 0x01
   10794:	ed b7       	in	r30, 0x3d	; 61
   10796:	fe b7       	in	r31, 0x3e	; 62
   10798:	97 83       	std	Z+7, r25	; 0x07
   1079a:	86 83       	std	Z+6, r24	; 0x06
   1079c:	f8 01       	movw	r30, r16
   1079e:	80 81       	ld	r24, Z
   107a0:	91 81       	ldd	r25, Z+1	; 0x01
   107a2:	ed b7       	in	r30, 0x3d	; 61
   107a4:	fe b7       	in	r31, 0x3e	; 62
   107a6:	95 83       	std	Z+5, r25	; 0x05
   107a8:	84 83       	std	Z+4, r24	; 0x04
   107aa:	89 e8       	ldi	r24, 0x89	; 137
   107ac:	9d e0       	ldi	r25, 0x0D	; 13
   107ae:	a0 e0       	ldi	r26, 0x00	; 0
   107b0:	81 83       	std	Z+1, r24	; 0x01
   107b2:	92 83       	std	Z+2, r25	; 0x02
   107b4:	a3 83       	std	Z+3, r26	; 0x03
   107b6:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            return(0);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   107ba:	4e c0       	rjmp	.+156    	; 0x10858 <posix_tests+0x39e>
   107bc:	98 01       	movw	r18, r16
   107be:	a7 01       	movw	r20, r14
   107c0:	68 ed       	ldi	r22, 0xD8	; 216
   107c2:	7b e0       	ldi	r23, 0x0B	; 11
   107c4:	c6 01       	movw	r24, r12
   107c6:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   107ca:	4c 01       	movw	r8, r24
   107cc:	89 2b       	or	r24, r25
    {
        if ( unlink(argv[ind]) != 0)
   107ce:	f9 f0       	breq	.+62     	; 0x1080e <posix_tests+0x354>
   107d0:	73 01       	movw	r14, r6
   107d2:	ee 0c       	add	r14, r14
   107d4:	ff 1c       	adc	r15, r15
   107d6:	e4 0c       	add	r14, r4
   107d8:	f5 1c       	adc	r15, r5
   107da:	f7 01       	movw	r30, r14
   107dc:	80 81       	ld	r24, Z
   107de:	91 81       	ldd	r25, Z+1	; 0x01
   107e0:	0e 94 58 78 	call	0xf0b0	; 0xf0b0 <unlink>
   107e4:	89 2b       	or	r24, r25
   107e6:	09 f4       	brne	.+2      	; 0x107ea <posix_tests+0x330>
        {
            printf("rm %s failed\n", argv[ind]);
   107e8:	b0 cf       	rjmp	.-160    	; 0x1074a <posix_tests+0x290>
   107ea:	f7 01       	movw	r30, r14
   107ec:	80 81       	ld	r24, Z
   107ee:	91 81       	ldd	r25, Z+1	; 0x01
   107f0:	ed b7       	in	r30, 0x3d	; 61
   107f2:	fe b7       	in	r31, 0x3e	; 62
   107f4:	95 83       	std	Z+5, r25	; 0x05
   107f6:	84 83       	std	Z+4, r24	; 0x04
   107f8:	8b e7       	ldi	r24, 0x7B	; 123
   107fa:	9d e0       	ldi	r25, 0x0D	; 13
   107fc:	a0 e0       	ldi	r26, 0x00	; 0
   107fe:	81 83       	std	Z+1, r24	; 0x01
   10800:	92 83       	std	Z+2, r25	; 0x02
   10802:	a3 83       	std	Z+3, r26	; 0x03
   10804:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            return(0);
   10808:	81 2c       	mov	r8, r1
   1080a:	91 2c       	mov	r9, r1
        dump_stat(&p);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   1080c:	25 c0       	rjmp	.+74     	; 0x10858 <posix_tests+0x39e>
   1080e:	98 01       	movw	r18, r16
   10810:	a7 01       	movw	r20, r14
   10812:	6b ed       	ldi	r22, 0xDB	; 219
   10814:	7b e0       	ldi	r23, 0x0B	; 11
   10816:	c6 01       	movw	r24, r12
   10818:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1081c:	89 2b       	or	r24, r25
    {
        if ( rmdir(argv[ind]) != 0)
   1081e:	a1 f3       	breq	.-24     	; 0x10808 <posix_tests+0x34e>
   10820:	73 01       	movw	r14, r6
   10822:	ee 0c       	add	r14, r14
   10824:	ff 1c       	adc	r15, r15
   10826:	e4 0c       	add	r14, r4
   10828:	f5 1c       	adc	r15, r5
   1082a:	f7 01       	movw	r30, r14
   1082c:	80 81       	ld	r24, Z
   1082e:	91 81       	ldd	r25, Z+1	; 0x01
   10830:	0e 94 77 78 	call	0xf0ee	; 0xf0ee <rmdir>
   10834:	89 2b       	or	r24, r25
   10836:	09 f4       	brne	.+2      	; 0x1083a <posix_tests+0x380>
        {
            printf("rmdir %s failed\n", argv[ind]);
   10838:	88 cf       	rjmp	.-240    	; 0x1074a <posix_tests+0x290>
   1083a:	f7 01       	movw	r30, r14
   1083c:	80 81       	ld	r24, Z
   1083e:	91 81       	ldd	r25, Z+1	; 0x01
   10840:	ed b7       	in	r30, 0x3d	; 61
   10842:	fe b7       	in	r31, 0x3e	; 62
   10844:	95 83       	std	Z+5, r25	; 0x05
   10846:	84 83       	std	Z+4, r24	; 0x04
   10848:	8a e6       	ldi	r24, 0x6A	; 106
   1084a:	9d e0       	ldi	r25, 0x0D	; 13
   1084c:	a0 e0       	ldi	r26, 0x00	; 0
   1084e:	81 83       	std	Z+1, r24	; 0x01
   10850:	92 83       	std	Z+2, r25	; 0x02
   10852:	a3 83       	std	Z+3, r26	; 0x03
   10854:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        return(1);
    }
#endif

    return(0);
}
   10858:	c4 01       	movw	r24, r8
   1085a:	c9 5f       	subi	r28, 0xF9	; 249
   1085c:	de 4f       	sbci	r29, 0xFE	; 254
   1085e:	e0 e1       	ldi	r30, 0x10	; 16
   10860:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__epilogue_restores__+0x4>

00010864 <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   10864:	00 d0       	rcall	.+0      	; 0x10866 <gpib_timer_init+0x2>
   10866:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   10868:	61 e0       	ldi	r22, 0x01	; 1
   1086a:	70 e0       	ldi	r23, 0x00	; 0
   1086c:	8e ee       	ldi	r24, 0xEE	; 238
   1086e:	95 e8       	ldi	r25, 0x85	; 133
   10870:	0e 94 e6 34 	call	0x69cc	; 0x69cc <set_timers>
   10874:	01 96       	adiw	r24, 0x01	; 1
   10876:	51 f4       	brne	.+20     	; 0x1088c <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   10878:	8c ee       	ldi	r24, 0xEC	; 236
   1087a:	9e e0       	ldi	r25, 0x0E	; 14
   1087c:	a0 e0       	ldi	r26, 0x00	; 0
   1087e:	ed b7       	in	r30, 0x3d	; 61
   10880:	fe b7       	in	r31, 0x3e	; 62
   10882:	81 83       	std	Z+1, r24	; 0x01
   10884:	92 83       	std	Z+2, r25	; 0x02
   10886:	a3 83       	std	Z+3, r26	; 0x03
   10888:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

    gpib_timer_reset();
}
   1088c:	95 d1       	rcall	.+810    	; 0x10bb8 <gpib_timer_reset>
   1088e:	0f 90       	pop	r0
   10890:	0f 90       	pop	r0
   10892:	0f 90       	pop	r0
   10894:	08 95       	ret

00010896 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   10896:	28 2f       	mov	r18, r24
   10898:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   1089a:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   1089c:	88 0f       	add	r24, r24
        if(mask & 1)
   1089e:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   108a0:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   108a2:	26 95       	lsr	r18
   108a4:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   108a6:	d1 f7       	brne	.-12     	; 0x1089c <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   108a8:	08 95       	ret

000108aa <ppr_set>:
   108aa:	f5 df       	rcall	.-22     	; 0x10896 <reverse_8bits>
   108ac:	80 93 5c 19 	sts	0x195C, r24	; 0x80195c <_ppr_reg>
   108b0:	0e 94 e8 2b 	call	0x57d0	; 0x57d0 <SPI0_TXRX_Byte>
   108b4:	2a 9a       	sbi	0x05, 2	; 5
   108b6:	22 9a       	sbi	0x04, 2	; 4
   108b8:	2a 98       	cbi	0x05, 2	; 5
   108ba:	22 9a       	sbi	0x04, 2	; 4
   108bc:	08 95       	ret

000108be <ppr_reg>:
   108be:	80 91 5c 19 	lds	r24, 0x195C	; 0x80195c <_ppr_reg>
   108c2:	e9 cf       	rjmp	.-46     	; 0x10896 <reverse_8bits>
   108c4:	08 95       	ret

000108c6 <ppr_init>:
   108c6:	00 d0       	rcall	.+0      	; 0x108c8 <ppr_init+0x2>
   108c8:	1f 92       	push	r1
   108ca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   108ce:	81 ff       	sbrs	r24, 1
   108d0:	0a c0       	rjmp	.+20     	; 0x108e6 <ppr_init+0x20>
   108d2:	89 ed       	ldi	r24, 0xD9	; 217
   108d4:	9e e0       	ldi	r25, 0x0E	; 14
   108d6:	a0 e0       	ldi	r26, 0x00	; 0
   108d8:	ed b7       	in	r30, 0x3d	; 61
   108da:	fe b7       	in	r31, 0x3e	; 62
   108dc:	81 83       	std	Z+1, r24	; 0x01
   108de:	92 83       	std	Z+2, r25	; 0x02
   108e0:	a3 83       	std	Z+3, r26	; 0x03
   108e2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   108e6:	80 e0       	ldi	r24, 0x00	; 0
   108e8:	e0 df       	rcall	.-64     	; 0x108aa <ppr_set>
   108ea:	0f 90       	pop	r0
   108ec:	0f 90       	pop	r0
   108ee:	0f 90       	pop	r0
   108f0:	08 95       	ret

000108f2 <ppr_bit_set>:
   108f2:	21 e0       	ldi	r18, 0x01	; 1
   108f4:	30 e0       	ldi	r19, 0x00	; 0
   108f6:	01 c0       	rjmp	.+2      	; 0x108fa <ppr_bit_set+0x8>
   108f8:	22 0f       	add	r18, r18
   108fa:	8a 95       	dec	r24
   108fc:	ea f7       	brpl	.-6      	; 0x108f8 <ppr_bit_set+0x6>
   108fe:	80 91 5c 19 	lds	r24, 0x195C	; 0x80195c <_ppr_reg>
   10902:	82 2b       	or	r24, r18
   10904:	80 93 5c 19 	sts	0x195C, r24	; 0x80195c <_ppr_reg>
   10908:	d0 cf       	rjmp	.-96     	; 0x108aa <ppr_set>
   1090a:	08 95       	ret

0001090c <ppr_bit_clr>:
   1090c:	21 e0       	ldi	r18, 0x01	; 1
   1090e:	30 e0       	ldi	r19, 0x00	; 0
   10910:	01 c0       	rjmp	.+2      	; 0x10914 <ppr_bit_clr+0x8>
   10912:	22 0f       	add	r18, r18
   10914:	8a 95       	dec	r24
   10916:	ea f7       	brpl	.-6      	; 0x10912 <ppr_bit_clr+0x6>
   10918:	20 95       	com	r18
   1091a:	80 91 5c 19 	lds	r24, 0x195C	; 0x80195c <_ppr_reg>
   1091e:	82 23       	and	r24, r18
   10920:	80 93 5c 19 	sts	0x195C, r24	; 0x80195c <_ppr_reg>
   10924:	c2 cf       	rjmp	.-124    	; 0x108aa <ppr_set>
   10926:	08 95       	ret

00010928 <dbf_open>:
   10928:	0f 93       	push	r16
   1092a:	1f 93       	push	r17
   1092c:	cf 93       	push	r28
   1092e:	df 93       	push	r29
   10930:	00 d0       	rcall	.+0      	; 0x10932 <dbf_open+0xa>
   10932:	00 d0       	rcall	.+0      	; 0x10934 <dbf_open+0xc>
   10934:	1f 92       	push	r1
   10936:	8b 01       	movw	r16, r22
   10938:	0e 94 33 5a 	call	0xb466	; 0xb466 <f_open>
   1093c:	ec 01       	movw	r28, r24
   1093e:	89 2b       	or	r24, r25
   10940:	79 f0       	breq	.+30     	; 0x10960 <dbf_open+0x38>
   10942:	ed b7       	in	r30, 0x3d	; 61
   10944:	fe b7       	in	r31, 0x3e	; 62
   10946:	15 83       	std	Z+5, r17	; 0x05
   10948:	04 83       	std	Z+4, r16	; 0x04
   1094a:	88 ec       	ldi	r24, 0xC8	; 200
   1094c:	9e e0       	ldi	r25, 0x0E	; 14
   1094e:	a0 e0       	ldi	r26, 0x00	; 0
   10950:	81 83       	std	Z+1, r24	; 0x01
   10952:	92 83       	std	Z+2, r25	; 0x02
   10954:	a3 83       	std	Z+3, r26	; 0x03
   10956:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1095a:	ce 01       	movw	r24, r28
   1095c:	0e 94 0d 71 	call	0xe21a	; 0xe21a <put_rc>
   10960:	ce 01       	movw	r24, r28
   10962:	cd b7       	in	r28, 0x3d	; 61
   10964:	de b7       	in	r29, 0x3e	; 62
   10966:	25 96       	adiw	r28, 0x05	; 5
   10968:	e4 e0       	ldi	r30, 0x04	; 4
   1096a:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

0001096e <dbf_read>:
   1096e:	cf 93       	push	r28
   10970:	df 93       	push	r29
   10972:	00 d0       	rcall	.+0      	; 0x10974 <dbf_read+0x6>
   10974:	1f 92       	push	r1
   10976:	0e 94 eb 5b 	call	0xb7d6	; 0xb7d6 <f_read>
   1097a:	ec 01       	movw	r28, r24
   1097c:	89 2b       	or	r24, r25
   1097e:	69 f0       	breq	.+26     	; 0x1099a <dbf_read+0x2c>
   10980:	8b eb       	ldi	r24, 0xBB	; 187
   10982:	9e e0       	ldi	r25, 0x0E	; 14
   10984:	a0 e0       	ldi	r26, 0x00	; 0
   10986:	ed b7       	in	r30, 0x3d	; 61
   10988:	fe b7       	in	r31, 0x3e	; 62
   1098a:	81 83       	std	Z+1, r24	; 0x01
   1098c:	92 83       	std	Z+2, r25	; 0x02
   1098e:	a3 83       	std	Z+3, r26	; 0x03
   10990:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   10994:	ce 01       	movw	r24, r28
   10996:	0e 94 0d 71 	call	0xe21a	; 0xe21a <put_rc>
   1099a:	ce 01       	movw	r24, r28
   1099c:	cd b7       	in	r28, 0x3d	; 61
   1099e:	de b7       	in	r29, 0x3e	; 62
   109a0:	23 96       	adiw	r28, 0x03	; 3
   109a2:	e2 e0       	ldi	r30, 0x02	; 2
   109a4:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

000109a8 <dbf_write>:
   109a8:	cf 93       	push	r28
   109aa:	df 93       	push	r29
   109ac:	00 d0       	rcall	.+0      	; 0x109ae <dbf_write+0x6>
   109ae:	1f 92       	push	r1
   109b0:	0e 94 36 5d 	call	0xba6c	; 0xba6c <f_write>
   109b4:	ec 01       	movw	r28, r24
   109b6:	89 2b       	or	r24, r25
   109b8:	69 f0       	breq	.+26     	; 0x109d4 <dbf_write+0x2c>
   109ba:	8d ea       	ldi	r24, 0xAD	; 173
   109bc:	9e e0       	ldi	r25, 0x0E	; 14
   109be:	a0 e0       	ldi	r26, 0x00	; 0
   109c0:	ed b7       	in	r30, 0x3d	; 61
   109c2:	fe b7       	in	r31, 0x3e	; 62
   109c4:	81 83       	std	Z+1, r24	; 0x01
   109c6:	92 83       	std	Z+2, r25	; 0x02
   109c8:	a3 83       	std	Z+3, r26	; 0x03
   109ca:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   109ce:	ce 01       	movw	r24, r28
   109d0:	0e 94 0d 71 	call	0xe21a	; 0xe21a <put_rc>
   109d4:	ce 01       	movw	r24, r28
   109d6:	cd b7       	in	r28, 0x3d	; 61
   109d8:	de b7       	in	r29, 0x3e	; 62
   109da:	23 96       	adiw	r28, 0x03	; 3
   109dc:	e2 e0       	ldi	r30, 0x02	; 2
   109de:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

000109e2 <dbf_lseek>:
   109e2:	cf 93       	push	r28
   109e4:	df 93       	push	r29
   109e6:	00 d0       	rcall	.+0      	; 0x109e8 <dbf_lseek+0x6>
   109e8:	1f 92       	push	r1
   109ea:	0e 94 f7 60 	call	0xc1ee	; 0xc1ee <f_lseek>
   109ee:	ec 01       	movw	r28, r24
   109f0:	89 2b       	or	r24, r25
   109f2:	69 f0       	breq	.+26     	; 0x10a0e <dbf_lseek+0x2c>
   109f4:	80 ea       	ldi	r24, 0xA0	; 160
   109f6:	9e e0       	ldi	r25, 0x0E	; 14
   109f8:	a0 e0       	ldi	r26, 0x00	; 0
   109fa:	ed b7       	in	r30, 0x3d	; 61
   109fc:	fe b7       	in	r31, 0x3e	; 62
   109fe:	81 83       	std	Z+1, r24	; 0x01
   10a00:	92 83       	std	Z+2, r25	; 0x02
   10a02:	a3 83       	std	Z+3, r26	; 0x03
   10a04:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   10a08:	ce 01       	movw	r24, r28
   10a0a:	0e 94 0d 71 	call	0xe21a	; 0xe21a <put_rc>
   10a0e:	ce 01       	movw	r24, r28
   10a10:	cd b7       	in	r28, 0x3d	; 61
   10a12:	de b7       	in	r29, 0x3e	; 62
   10a14:	23 96       	adiw	r28, 0x03	; 3
   10a16:	e2 e0       	ldi	r30, 0x02	; 2
   10a18:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00010a1c <dbf_close>:
   10a1c:	cf 93       	push	r28
   10a1e:	df 93       	push	r29
   10a20:	00 d0       	rcall	.+0      	; 0x10a22 <dbf_close+0x6>
   10a22:	1f 92       	push	r1
   10a24:	0e 94 4d 5f 	call	0xbe9a	; 0xbe9a <f_close>
   10a28:	ec 01       	movw	r28, r24
   10a2a:	89 2b       	or	r24, r25
   10a2c:	69 f0       	breq	.+26     	; 0x10a48 <dbf_close+0x2c>
   10a2e:	82 e9       	ldi	r24, 0x92	; 146
   10a30:	9e e0       	ldi	r25, 0x0E	; 14
   10a32:	a0 e0       	ldi	r26, 0x00	; 0
   10a34:	ed b7       	in	r30, 0x3d	; 61
   10a36:	fe b7       	in	r31, 0x3e	; 62
   10a38:	81 83       	std	Z+1, r24	; 0x01
   10a3a:	92 83       	std	Z+2, r25	; 0x02
   10a3c:	a3 83       	std	Z+3, r26	; 0x03
   10a3e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   10a42:	ce 01       	movw	r24, r28
   10a44:	0e 94 0d 71 	call	0xe21a	; 0xe21a <put_rc>
   10a48:	ce 01       	movw	r24, r28
   10a4a:	cd b7       	in	r28, 0x3d	; 61
   10a4c:	de b7       	in	r29, 0x3e	; 62
   10a4e:	23 96       	adiw	r28, 0x03	; 3
   10a50:	e2 e0       	ldi	r30, 0x02	; 2
   10a52:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00010a56 <dbf_open_read>:
   10a56:	a6 e2       	ldi	r26, 0x26	; 38
   10a58:	b2 e0       	ldi	r27, 0x02	; 2
   10a5a:	e1 e3       	ldi	r30, 0x31	; 49
   10a5c:	f5 e8       	ldi	r31, 0x85	; 133
   10a5e:	0c 94 d5 e2 	jmp	0x1c5aa	; 0x1c5aa <__prologue_saves__+0xc>
   10a62:	4a 01       	movw	r8, r20
   10a64:	5b 01       	movw	r10, r22
   10a66:	69 01       	movw	r12, r18
   10a68:	cb 5d       	subi	r28, 0xDB	; 219
   10a6a:	dd 4f       	sbci	r29, 0xFD	; 253
   10a6c:	19 82       	std	Y+1, r1	; 0x01
   10a6e:	18 82       	st	Y, r1
   10a70:	c5 52       	subi	r28, 0x25	; 37
   10a72:	d2 40       	sbci	r29, 0x02	; 2
   10a74:	43 e0       	ldi	r20, 0x03	; 3
   10a76:	bc 01       	movw	r22, r24
   10a78:	ce 01       	movw	r24, r28
   10a7a:	01 96       	adiw	r24, 0x01	; 1
   10a7c:	55 df       	rcall	.-342    	; 0x10928 <dbf_open>
   10a7e:	89 2b       	or	r24, r25
   10a80:	19 f0       	breq	.+6      	; 0x10a88 <dbf_open_read+0x32>
   10a82:	81 e1       	ldi	r24, 0x11	; 17
   10a84:	90 e0       	ldi	r25, 0x00	; 0
   10a86:	2f c0       	rjmp	.+94     	; 0x10ae6 <dbf_open_read+0x90>
   10a88:	b5 01       	movw	r22, r10
   10a8a:	a4 01       	movw	r20, r8
   10a8c:	ce 01       	movw	r24, r28
   10a8e:	01 96       	adiw	r24, 0x01	; 1
   10a90:	a8 df       	rcall	.-176    	; 0x109e2 <dbf_lseek>
   10a92:	89 2b       	or	r24, r25
   10a94:	59 f0       	breq	.+22     	; 0x10aac <dbf_open_read+0x56>
   10a96:	85 e0       	ldi	r24, 0x05	; 5
   10a98:	90 e0       	ldi	r25, 0x00	; 0
   10a9a:	f7 01       	movw	r30, r14
   10a9c:	91 83       	std	Z+1, r25	; 0x01
   10a9e:	80 83       	st	Z, r24
   10aa0:	ce 01       	movw	r24, r28
   10aa2:	01 96       	adiw	r24, 0x01	; 1
   10aa4:	bb df       	rcall	.-138    	; 0x10a1c <dbf_close>
   10aa6:	8f ef       	ldi	r24, 0xFF	; 255
   10aa8:	9f ef       	ldi	r25, 0xFF	; 255
   10aaa:	27 c0       	rjmp	.+78     	; 0x10afa <dbf_open_read+0xa4>
   10aac:	9e 01       	movw	r18, r28
   10aae:	2b 5d       	subi	r18, 0xDB	; 219
   10ab0:	3d 4f       	sbci	r19, 0xFD	; 253
   10ab2:	a8 01       	movw	r20, r16
   10ab4:	b6 01       	movw	r22, r12
   10ab6:	ce 01       	movw	r24, r28
   10ab8:	01 96       	adiw	r24, 0x01	; 1
   10aba:	59 df       	rcall	.-334    	; 0x1096e <dbf_read>
   10abc:	89 2b       	or	r24, r25
   10abe:	49 f4       	brne	.+18     	; 0x10ad2 <dbf_open_read+0x7c>
   10ac0:	cb 5d       	subi	r28, 0xDB	; 219
   10ac2:	dd 4f       	sbci	r29, 0xFD	; 253
   10ac4:	88 81       	ld	r24, Y
   10ac6:	99 81       	ldd	r25, Y+1	; 0x01
   10ac8:	c5 52       	subi	r28, 0x25	; 37
   10aca:	d2 40       	sbci	r29, 0x02	; 2
   10acc:	08 17       	cp	r16, r24
   10ace:	19 07       	cpc	r17, r25
   10ad0:	19 f0       	breq	.+6      	; 0x10ad8 <dbf_open_read+0x82>
   10ad2:	81 e0       	ldi	r24, 0x01	; 1
   10ad4:	90 e0       	ldi	r25, 0x00	; 0
   10ad6:	e1 cf       	rjmp	.-62     	; 0x10a9a <dbf_open_read+0x44>
   10ad8:	ce 01       	movw	r24, r28
   10ada:	01 96       	adiw	r24, 0x01	; 1
   10adc:	9f df       	rcall	.-194    	; 0x10a1c <dbf_close>
   10ade:	89 2b       	or	r24, r25
   10ae0:	31 f0       	breq	.+12     	; 0x10aee <dbf_open_read+0x98>
   10ae2:	80 e1       	ldi	r24, 0x10	; 16
   10ae4:	90 e0       	ldi	r25, 0x00	; 0
   10ae6:	f7 01       	movw	r30, r14
   10ae8:	91 83       	std	Z+1, r25	; 0x01
   10aea:	80 83       	st	Z, r24
   10aec:	dc cf       	rjmp	.-72     	; 0x10aa6 <dbf_open_read+0x50>
   10aee:	cb 5d       	subi	r28, 0xDB	; 219
   10af0:	dd 4f       	sbci	r29, 0xFD	; 253
   10af2:	88 81       	ld	r24, Y
   10af4:	99 81       	ldd	r25, Y+1	; 0x01
   10af6:	c5 52       	subi	r28, 0x25	; 37
   10af8:	d2 40       	sbci	r29, 0x02	; 2
   10afa:	ca 5d       	subi	r28, 0xDA	; 218
   10afc:	dd 4f       	sbci	r29, 0xFD	; 253
   10afe:	ec e0       	ldi	r30, 0x0C	; 12
   10b00:	0c 94 f1 e2 	jmp	0x1c5e2	; 0x1c5e2 <__epilogue_restores__+0xc>

00010b04 <dbf_open_write>:
   10b04:	a6 e2       	ldi	r26, 0x26	; 38
   10b06:	b2 e0       	ldi	r27, 0x02	; 2
   10b08:	e8 e8       	ldi	r30, 0x88	; 136
   10b0a:	f5 e8       	ldi	r31, 0x85	; 133
   10b0c:	0c 94 d5 e2 	jmp	0x1c5aa	; 0x1c5aa <__prologue_saves__+0xc>
   10b10:	4a 01       	movw	r8, r20
   10b12:	5b 01       	movw	r10, r22
   10b14:	69 01       	movw	r12, r18
   10b16:	cb 5d       	subi	r28, 0xDB	; 219
   10b18:	dd 4f       	sbci	r29, 0xFD	; 253
   10b1a:	19 82       	std	Y+1, r1	; 0x01
   10b1c:	18 82       	st	Y, r1
   10b1e:	c5 52       	subi	r28, 0x25	; 37
   10b20:	d2 40       	sbci	r29, 0x02	; 2
   10b22:	43 e0       	ldi	r20, 0x03	; 3
   10b24:	bc 01       	movw	r22, r24
   10b26:	ce 01       	movw	r24, r28
   10b28:	01 96       	adiw	r24, 0x01	; 1
   10b2a:	fe de       	rcall	.-516    	; 0x10928 <dbf_open>
   10b2c:	89 2b       	or	r24, r25
   10b2e:	19 f0       	breq	.+6      	; 0x10b36 <dbf_open_write+0x32>
   10b30:	81 e1       	ldi	r24, 0x11	; 17
   10b32:	90 e0       	ldi	r25, 0x00	; 0
   10b34:	2f c0       	rjmp	.+94     	; 0x10b94 <dbf_open_write+0x90>
   10b36:	b5 01       	movw	r22, r10
   10b38:	a4 01       	movw	r20, r8
   10b3a:	ce 01       	movw	r24, r28
   10b3c:	01 96       	adiw	r24, 0x01	; 1
   10b3e:	51 df       	rcall	.-350    	; 0x109e2 <dbf_lseek>
   10b40:	89 2b       	or	r24, r25
   10b42:	59 f0       	breq	.+22     	; 0x10b5a <dbf_open_write+0x56>
   10b44:	85 e0       	ldi	r24, 0x05	; 5
   10b46:	90 e0       	ldi	r25, 0x00	; 0
   10b48:	f7 01       	movw	r30, r14
   10b4a:	91 83       	std	Z+1, r25	; 0x01
   10b4c:	80 83       	st	Z, r24
   10b4e:	ce 01       	movw	r24, r28
   10b50:	01 96       	adiw	r24, 0x01	; 1
   10b52:	64 df       	rcall	.-312    	; 0x10a1c <dbf_close>
   10b54:	8f ef       	ldi	r24, 0xFF	; 255
   10b56:	9f ef       	ldi	r25, 0xFF	; 255
   10b58:	27 c0       	rjmp	.+78     	; 0x10ba8 <dbf_open_write+0xa4>
   10b5a:	9e 01       	movw	r18, r28
   10b5c:	2b 5d       	subi	r18, 0xDB	; 219
   10b5e:	3d 4f       	sbci	r19, 0xFD	; 253
   10b60:	a8 01       	movw	r20, r16
   10b62:	b6 01       	movw	r22, r12
   10b64:	ce 01       	movw	r24, r28
   10b66:	01 96       	adiw	r24, 0x01	; 1
   10b68:	1f df       	rcall	.-450    	; 0x109a8 <dbf_write>
   10b6a:	89 2b       	or	r24, r25
   10b6c:	49 f4       	brne	.+18     	; 0x10b80 <dbf_open_write+0x7c>
   10b6e:	cb 5d       	subi	r28, 0xDB	; 219
   10b70:	dd 4f       	sbci	r29, 0xFD	; 253
   10b72:	88 81       	ld	r24, Y
   10b74:	99 81       	ldd	r25, Y+1	; 0x01
   10b76:	c5 52       	subi	r28, 0x25	; 37
   10b78:	d2 40       	sbci	r29, 0x02	; 2
   10b7a:	08 17       	cp	r16, r24
   10b7c:	19 07       	cpc	r17, r25
   10b7e:	19 f0       	breq	.+6      	; 0x10b86 <dbf_open_write+0x82>
   10b80:	81 e0       	ldi	r24, 0x01	; 1
   10b82:	90 e0       	ldi	r25, 0x00	; 0
   10b84:	e1 cf       	rjmp	.-62     	; 0x10b48 <dbf_open_write+0x44>
   10b86:	ce 01       	movw	r24, r28
   10b88:	01 96       	adiw	r24, 0x01	; 1
   10b8a:	48 df       	rcall	.-368    	; 0x10a1c <dbf_close>
   10b8c:	89 2b       	or	r24, r25
   10b8e:	31 f0       	breq	.+12     	; 0x10b9c <dbf_open_write+0x98>
   10b90:	80 e1       	ldi	r24, 0x10	; 16
   10b92:	90 e0       	ldi	r25, 0x00	; 0
   10b94:	f7 01       	movw	r30, r14
   10b96:	91 83       	std	Z+1, r25	; 0x01
   10b98:	80 83       	st	Z, r24
   10b9a:	dc cf       	rjmp	.-72     	; 0x10b54 <dbf_open_write+0x50>
   10b9c:	cb 5d       	subi	r28, 0xDB	; 219
   10b9e:	dd 4f       	sbci	r29, 0xFD	; 253
   10ba0:	88 81       	ld	r24, Y
   10ba2:	99 81       	ldd	r25, Y+1	; 0x01
   10ba4:	c5 52       	subi	r28, 0x25	; 37
   10ba6:	d2 40       	sbci	r29, 0x02	; 2
   10ba8:	ca 5d       	subi	r28, 0xDA	; 218
   10baa:	dd 4f       	sbci	r29, 0xFD	; 253
   10bac:	ec e0       	ldi	r30, 0x0C	; 12
   10bae:	0c 94 f1 e2 	jmp	0x1c5e2	; 0x1c5e2 <__epilogue_restores__+0xc>

00010bb2 <gpib_timer_elapsed_begin>:
   10bb2:	0c 94 a6 35 	jmp	0x6b4c	; 0x6b4c <clock_elapsed_begin>
   10bb6:	08 95       	ret

00010bb8 <gpib_timer_reset>:
   10bb8:	f8 94       	cli
   10bba:	e2 ed       	ldi	r30, 0xD2	; 210
   10bbc:	fc e1       	ldi	r31, 0x1C	; 28
   10bbe:	10 82       	st	Z, r1
   10bc0:	11 82       	std	Z+1, r1	; 0x01
   10bc2:	12 82       	std	Z+2, r1	; 0x02
   10bc4:	13 82       	std	Z+3, r1	; 0x03
   10bc6:	14 82       	std	Z+4, r1	; 0x04
   10bc8:	15 82       	std	Z+5, r1	; 0x05
   10bca:	16 82       	std	Z+6, r1	; 0x06
   10bcc:	17 82       	std	Z+7, r1	; 0x07
   10bce:	81 e0       	ldi	r24, 0x01	; 1
   10bd0:	80 87       	std	Z+8, r24	; 0x08
   10bd2:	78 94       	sei
   10bd4:	08 95       	ret

00010bd6 <gpib_timer_elapsed_end>:
   10bd6:	0c 94 ac 35 	jmp	0x6b58	; 0x6b58 <clock_elapsed_end>
   10bda:	08 95       	ret

00010bdc <gpib_timer_task>:
   10bdc:	f8 94       	cli
   10bde:	80 91 d6 1c 	lds	r24, 0x1CD6	; 0x801cd6 <gpib_timer+0x4>
   10be2:	90 91 d7 1c 	lds	r25, 0x1CD7	; 0x801cd7 <gpib_timer+0x5>
   10be6:	a0 91 d8 1c 	lds	r26, 0x1CD8	; 0x801cd8 <gpib_timer+0x6>
   10bea:	b0 91 d9 1c 	lds	r27, 0x1CD9	; 0x801cd9 <gpib_timer+0x7>
   10bee:	89 2b       	or	r24, r25
   10bf0:	8a 2b       	or	r24, r26
   10bf2:	8b 2b       	or	r24, r27
   10bf4:	a1 f0       	breq	.+40     	; 0x10c1e <gpib_timer_task+0x42>
   10bf6:	80 91 d6 1c 	lds	r24, 0x1CD6	; 0x801cd6 <gpib_timer+0x4>
   10bfa:	90 91 d7 1c 	lds	r25, 0x1CD7	; 0x801cd7 <gpib_timer+0x5>
   10bfe:	a0 91 d8 1c 	lds	r26, 0x1CD8	; 0x801cd8 <gpib_timer+0x6>
   10c02:	b0 91 d9 1c 	lds	r27, 0x1CD9	; 0x801cd9 <gpib_timer+0x7>
   10c06:	01 97       	sbiw	r24, 0x01	; 1
   10c08:	a1 09       	sbc	r26, r1
   10c0a:	b1 09       	sbc	r27, r1
   10c0c:	80 93 d6 1c 	sts	0x1CD6, r24	; 0x801cd6 <gpib_timer+0x4>
   10c10:	90 93 d7 1c 	sts	0x1CD7, r25	; 0x801cd7 <gpib_timer+0x5>
   10c14:	a0 93 d8 1c 	sts	0x1CD8, r26	; 0x801cd8 <gpib_timer+0x6>
   10c18:	b0 93 d9 1c 	sts	0x1CD9, r27	; 0x801cd9 <gpib_timer+0x7>
   10c1c:	03 c0       	rjmp	.+6      	; 0x10c24 <gpib_timer_task+0x48>
   10c1e:	81 e0       	ldi	r24, 0x01	; 1
   10c20:	80 93 da 1c 	sts	0x1CDA, r24	; 0x801cda <gpib_timer+0x8>
   10c24:	78 94       	sei
   10c26:	08 95       	ret

00010c28 <gpib_timeout_set>:
   10c28:	f8 94       	cli
   10c2a:	e2 ed       	ldi	r30, 0xD2	; 210
   10c2c:	fc e1       	ldi	r31, 0x1C	; 28
   10c2e:	64 83       	std	Z+4, r22	; 0x04
   10c30:	75 83       	std	Z+5, r23	; 0x05
   10c32:	86 83       	std	Z+6, r24	; 0x06
   10c34:	97 83       	std	Z+7, r25	; 0x07
   10c36:	10 86       	std	Z+8, r1	; 0x08
   10c38:	78 94       	sei
   10c3a:	08 95       	ret

00010c3c <gpib_bus_read_init>:
   10c3c:	54 98       	cbi	0x0a, 4	; 10
   10c3e:	57 98       	cbi	0x0a, 7	; 10
   10c40:	45 98       	cbi	0x08, 5	; 8
   10c42:	3d 9a       	sbi	0x07, 5	; 7
   10c44:	11 b8       	out	0x01, r1	; 1
   10c46:	2f ef       	ldi	r18, 0xFF	; 255
   10c48:	22 b9       	out	0x02, r18	; 2
   10c4a:	43 98       	cbi	0x08, 3	; 8
   10c4c:	3b 9a       	sbi	0x07, 3	; 7
   10c4e:	21 98       	cbi	0x04, 1	; 4
   10c50:	56 98       	cbi	0x0a, 6	; 10
   10c52:	20 98       	cbi	0x04, 0	; 4
   10c54:	55 98       	cbi	0x0a, 5	; 10
   10c56:	89 2b       	or	r24, r25
   10c58:	39 f4       	brne	.+14     	; 0x10c68 <gpib_bus_read_init+0x2c>
   10c5a:	52 98       	cbi	0x0a, 2	; 10
   10c5c:	53 98       	cbi	0x0a, 3	; 10
   10c5e:	8d e0       	ldi	r24, 0x0D	; 13
   10c60:	8a 95       	dec	r24
   10c62:	f1 f7       	brne	.-4      	; 0x10c60 <gpib_bus_read_init+0x24>
   10c64:	00 00       	nop
   10c66:	04 c0       	rjmp	.+8      	; 0x10c70 <gpib_bus_read_init+0x34>
   10c68:	5b 98       	cbi	0x0b, 3	; 11
   10c6a:	53 9a       	sbi	0x0a, 3	; 10
   10c6c:	5a 98       	cbi	0x0b, 2	; 11
   10c6e:	52 9a       	sbi	0x0a, 2	; 10
   10c70:	42 98       	cbi	0x08, 2	; 8
   10c72:	3a 9a       	sbi	0x07, 2	; 7
   10c74:	44 9a       	sbi	0x08, 4	; 8
   10c76:	3c 9a       	sbi	0x07, 4	; 7
   10c78:	8d e0       	ldi	r24, 0x0D	; 13
   10c7a:	8a 95       	dec	r24
   10c7c:	f1 f7       	brne	.-4      	; 0x10c7a <gpib_bus_read_init+0x3e>
   10c7e:	00 00       	nop
   10c80:	08 95       	ret

00010c82 <gpib_bus_init>:
   10c82:	00 d0       	rcall	.+0      	; 0x10c84 <gpib_bus_init+0x2>
   10c84:	1f 92       	push	r1
   10c86:	10 92 5d 19 	sts	0x195D, r1	; 0x80195d <gpib_unread_f>
   10c8a:	11 b8       	out	0x01, r1	; 1
   10c8c:	8f ef       	ldi	r24, 0xFF	; 255
   10c8e:	82 b9       	out	0x02, r24	; 2
   10c90:	21 98       	cbi	0x04, 1	; 4
   10c92:	52 98       	cbi	0x0a, 2	; 10
   10c94:	53 98       	cbi	0x0a, 3	; 10
   10c96:	54 98       	cbi	0x0a, 4	; 10
   10c98:	57 98       	cbi	0x0a, 7	; 10
   10c9a:	56 98       	cbi	0x0a, 6	; 10
   10c9c:	20 98       	cbi	0x04, 0	; 4
   10c9e:	55 98       	cbi	0x0a, 5	; 10
   10ca0:	45 98       	cbi	0x08, 5	; 8
   10ca2:	3d 9a       	sbi	0x07, 5	; 7
   10ca4:	43 98       	cbi	0x08, 3	; 8
   10ca6:	3b 9a       	sbi	0x07, 3	; 7
   10ca8:	42 98       	cbi	0x08, 2	; 8
   10caa:	3a 9a       	sbi	0x07, 2	; 7
   10cac:	44 9a       	sbi	0x08, 4	; 8
   10cae:	3c 9a       	sbi	0x07, 4	; 7
   10cb0:	8d e0       	ldi	r24, 0x0D	; 13
   10cb2:	8a 95       	dec	r24
   10cb4:	f1 f7       	brne	.-4      	; 0x10cb2 <gpib_bus_init+0x30>
   10cb6:	00 00       	nop
   10cb8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10cbc:	82 ff       	sbrs	r24, 2
   10cbe:	0a c0       	rjmp	.+20     	; 0x10cd4 <gpib_bus_init+0x52>
   10cc0:	83 ed       	ldi	r24, 0xD3	; 211
   10cc2:	91 e1       	ldi	r25, 0x11	; 17
   10cc4:	a0 e0       	ldi	r26, 0x00	; 0
   10cc6:	ed b7       	in	r30, 0x3d	; 61
   10cc8:	fe b7       	in	r31, 0x3e	; 62
   10cca:	81 83       	std	Z+1, r24	; 0x01
   10ccc:	92 83       	std	Z+2, r25	; 0x02
   10cce:	a3 83       	std	Z+3, r26	; 0x03
   10cd0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   10cd4:	0f 90       	pop	r0
   10cd6:	0f 90       	pop	r0
   10cd8:	0f 90       	pop	r0
   10cda:	08 95       	ret

00010cdc <gpib_state_init>:
   10cdc:	00 d0       	rcall	.+0      	; 0x10cde <gpib_state_init+0x2>
   10cde:	1f 92       	push	r1
   10ce0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10ce4:	82 ff       	sbrs	r24, 2
   10ce6:	0a c0       	rjmp	.+20     	; 0x10cfc <gpib_state_init+0x20>
   10ce8:	80 ec       	ldi	r24, 0xC0	; 192
   10cea:	91 e1       	ldi	r25, 0x11	; 17
   10cec:	a0 e0       	ldi	r26, 0x00	; 0
   10cee:	ed b7       	in	r30, 0x3d	; 61
   10cf0:	fe b7       	in	r31, 0x3e	; 62
   10cf2:	81 83       	std	Z+1, r24	; 0x01
   10cf4:	92 83       	std	Z+2, r25	; 0x02
   10cf6:	a3 83       	std	Z+3, r26	; 0x03
   10cf8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   10cfc:	e4 dd       	rcall	.-1080   	; 0x108c6 <ppr_init>
   10cfe:	0e 94 29 91 	call	0x12252	; 0x12252 <listen_cleanup>
   10d02:	0e 94 3f 92 	call	0x1247e	; 0x1247e <talk_cleanup>
   10d06:	10 92 de 1e 	sts	0x1EDE, r1	; 0x801ede <spoll>
   10d0a:	10 92 e1 1e 	sts	0x1EE1, r1	; 0x801ee1 <talking>
   10d0e:	10 92 e4 1e 	sts	0x1EE4, r1	; 0x801ee4 <talking_last>
   10d12:	10 92 e3 1e 	sts	0x1EE3, r1	; 0x801ee3 <listening>
   10d16:	10 92 dd 1e 	sts	0x1EDD, r1	; 0x801edd <listening_last>
   10d1a:	10 92 dc 1c 	sts	0x1CDC, r1	; 0x801cdc <lastcmd+0x1>
   10d1e:	10 92 db 1c 	sts	0x1CDB, r1	; 0x801cdb <lastcmd>
   10d22:	10 92 e0 1e 	sts	0x1EE0, r1	; 0x801ee0 <current+0x1>
   10d26:	10 92 df 1e 	sts	0x1EDF, r1	; 0x801edf <current>
   10d2a:	10 92 e2 1e 	sts	0x1EE2, r1	; 0x801ee2 <secondary>
   10d2e:	0f 90       	pop	r0
   10d30:	0f 90       	pop	r0
   10d32:	0f 90       	pop	r0
   10d34:	08 95       	ret

00010d36 <gpib_enable_PPR>:
   10d36:	cf 93       	push	r28
   10d38:	df 93       	push	r29
   10d3a:	ad b7       	in	r26, 0x3d	; 61
   10d3c:	be b7       	in	r27, 0x3e	; 62
   10d3e:	17 97       	sbiw	r26, 0x07	; 7
   10d40:	0f b6       	in	r0, 0x3f	; 63
   10d42:	f8 94       	cli
   10d44:	be bf       	out	0x3e, r27	; 62
   10d46:	0f be       	out	0x3f, r0	; 63
   10d48:	ad bf       	out	0x3d, r26	; 61
   10d4a:	ec 01       	movw	r28, r24
   10d4c:	88 30       	cpi	r24, 0x08	; 8
   10d4e:	91 05       	cpc	r25, r1
   10d50:	68 f0       	brcs	.+26     	; 0x10d6c <gpib_enable_PPR+0x36>
   10d52:	ed b7       	in	r30, 0x3d	; 61
   10d54:	fe b7       	in	r31, 0x3e	; 62
   10d56:	95 83       	std	Z+5, r25	; 0x05
   10d58:	84 83       	std	Z+4, r24	; 0x04
   10d5a:	8a e9       	ldi	r24, 0x9A	; 154
   10d5c:	91 e1       	ldi	r25, 0x11	; 17
   10d5e:	a0 e0       	ldi	r26, 0x00	; 0
   10d60:	81 83       	std	Z+1, r24	; 0x01
   10d62:	92 83       	std	Z+2, r25	; 0x02
   10d64:	a3 83       	std	Z+3, r26	; 0x03
   10d66:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   10d6a:	15 c0       	rjmp	.+42     	; 0x10d96 <gpib_enable_PPR+0x60>
   10d6c:	c2 dd       	rcall	.-1148   	; 0x108f2 <ppr_bit_set>
   10d6e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d72:	81 ff       	sbrs	r24, 1
   10d74:	10 c0       	rjmp	.+32     	; 0x10d96 <gpib_enable_PPR+0x60>
   10d76:	a3 dd       	rcall	.-1210   	; 0x108be <ppr_reg>
   10d78:	90 e0       	ldi	r25, 0x00	; 0
   10d7a:	ed b7       	in	r30, 0x3d	; 61
   10d7c:	fe b7       	in	r31, 0x3e	; 62
   10d7e:	97 83       	std	Z+7, r25	; 0x07
   10d80:	86 83       	std	Z+6, r24	; 0x06
   10d82:	d5 83       	std	Z+5, r29	; 0x05
   10d84:	c4 83       	std	Z+4, r28	; 0x04
   10d86:	8f e7       	ldi	r24, 0x7F	; 127
   10d88:	91 e1       	ldi	r25, 0x11	; 17
   10d8a:	a0 e0       	ldi	r26, 0x00	; 0
   10d8c:	81 83       	std	Z+1, r24	; 0x01
   10d8e:	92 83       	std	Z+2, r25	; 0x02
   10d90:	a3 83       	std	Z+3, r26	; 0x03
   10d92:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   10d96:	cd b7       	in	r28, 0x3d	; 61
   10d98:	de b7       	in	r29, 0x3e	; 62
   10d9a:	27 96       	adiw	r28, 0x07	; 7
   10d9c:	e2 e0       	ldi	r30, 0x02	; 2
   10d9e:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00010da2 <gpib_disable_PPR>:
   10da2:	cf 93       	push	r28
   10da4:	df 93       	push	r29
   10da6:	ad b7       	in	r26, 0x3d	; 61
   10da8:	be b7       	in	r27, 0x3e	; 62
   10daa:	17 97       	sbiw	r26, 0x07	; 7
   10dac:	0f b6       	in	r0, 0x3f	; 63
   10dae:	f8 94       	cli
   10db0:	be bf       	out	0x3e, r27	; 62
   10db2:	0f be       	out	0x3f, r0	; 63
   10db4:	ad bf       	out	0x3d, r26	; 61
   10db6:	ec 01       	movw	r28, r24
   10db8:	88 30       	cpi	r24, 0x08	; 8
   10dba:	91 05       	cpc	r25, r1
   10dbc:	68 f0       	brcs	.+26     	; 0x10dd8 <gpib_disable_PPR+0x36>
   10dbe:	ed b7       	in	r30, 0x3d	; 61
   10dc0:	fe b7       	in	r31, 0x3e	; 62
   10dc2:	95 83       	std	Z+5, r25	; 0x05
   10dc4:	84 83       	std	Z+4, r24	; 0x04
   10dc6:	88 e5       	ldi	r24, 0x58	; 88
   10dc8:	91 e1       	ldi	r25, 0x11	; 17
   10dca:	a0 e0       	ldi	r26, 0x00	; 0
   10dcc:	81 83       	std	Z+1, r24	; 0x01
   10dce:	92 83       	std	Z+2, r25	; 0x02
   10dd0:	a3 83       	std	Z+3, r26	; 0x03
   10dd2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   10dd6:	15 c0       	rjmp	.+42     	; 0x10e02 <gpib_disable_PPR+0x60>
   10dd8:	99 dd       	rcall	.-1230   	; 0x1090c <ppr_bit_clr>
   10dda:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10dde:	81 ff       	sbrs	r24, 1
   10de0:	10 c0       	rjmp	.+32     	; 0x10e02 <gpib_disable_PPR+0x60>
   10de2:	6d dd       	rcall	.-1318   	; 0x108be <ppr_reg>
   10de4:	90 e0       	ldi	r25, 0x00	; 0
   10de6:	ed b7       	in	r30, 0x3d	; 61
   10de8:	fe b7       	in	r31, 0x3e	; 62
   10dea:	97 83       	std	Z+7, r25	; 0x07
   10dec:	86 83       	std	Z+6, r24	; 0x06
   10dee:	d5 83       	std	Z+5, r29	; 0x05
   10df0:	c4 83       	std	Z+4, r28	; 0x04
   10df2:	8d e3       	ldi	r24, 0x3D	; 61
   10df4:	91 e1       	ldi	r25, 0x11	; 17
   10df6:	a0 e0       	ldi	r26, 0x00	; 0
   10df8:	81 83       	std	Z+1, r24	; 0x01
   10dfa:	92 83       	std	Z+2, r25	; 0x02
   10dfc:	a3 83       	std	Z+3, r26	; 0x03
   10dfe:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   10e02:	cd b7       	in	r28, 0x3d	; 61
   10e04:	de b7       	in	r29, 0x3e	; 62
   10e06:	27 96       	adiw	r28, 0x07	; 7
   10e08:	e2 e0       	ldi	r30, 0x02	; 2
   10e0a:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00010e0e <gpib_assert_ifc>:
   10e0e:	00 d0       	rcall	.+0      	; 0x10e10 <gpib_assert_ifc+0x2>
   10e10:	1f 92       	push	r1
   10e12:	5c 98       	cbi	0x0b, 4	; 11
   10e14:	54 9a       	sbi	0x0a, 4	; 10
   10e16:	6a ef       	ldi	r22, 0xFA	; 250
   10e18:	70 e0       	ldi	r23, 0x00	; 0
   10e1a:	80 e0       	ldi	r24, 0x00	; 0
   10e1c:	90 e0       	ldi	r25, 0x00	; 0
   10e1e:	0e 94 0e 29 	call	0x521c	; 0x521c <delayus>
   10e22:	54 98       	cbi	0x0a, 4	; 10
   10e24:	6a ef       	ldi	r22, 0xFA	; 250
   10e26:	70 e0       	ldi	r23, 0x00	; 0
   10e28:	80 e0       	ldi	r24, 0x00	; 0
   10e2a:	90 e0       	ldi	r25, 0x00	; 0
   10e2c:	0e 94 0e 29 	call	0x521c	; 0x521c <delayus>
   10e30:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10e34:	82 ff       	sbrs	r24, 2
   10e36:	0a c0       	rjmp	.+20     	; 0x10e4c <gpib_assert_ifc+0x3e>
   10e38:	81 e3       	ldi	r24, 0x31	; 49
   10e3a:	91 e1       	ldi	r25, 0x11	; 17
   10e3c:	a0 e0       	ldi	r26, 0x00	; 0
   10e3e:	ed b7       	in	r30, 0x3d	; 61
   10e40:	fe b7       	in	r31, 0x3e	; 62
   10e42:	81 83       	std	Z+1, r24	; 0x01
   10e44:	92 83       	std	Z+2, r25	; 0x02
   10e46:	a3 83       	std	Z+3, r26	; 0x03
   10e48:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   10e4c:	0f 90       	pop	r0
   10e4e:	0f 90       	pop	r0
   10e50:	0f 90       	pop	r0
   10e52:	08 95       	ret

00010e54 <gpib_unread>:
   10e54:	cf 93       	push	r28
   10e56:	df 93       	push	r29
   10e58:	00 d0       	rcall	.+0      	; 0x10e5a <gpib_unread+0x6>
   10e5a:	1f 92       	push	r1
   10e5c:	ec 01       	movw	r28, r24
   10e5e:	80 91 5d 19 	lds	r24, 0x195D	; 0x80195d <gpib_unread_f>
   10e62:	81 11       	cpse	r24, r1
   10e64:	08 c0       	rjmp	.+16     	; 0x10e76 <gpib_unread+0x22>
   10e66:	d0 93 e6 1e 	sts	0x1EE6, r29	; 0x801ee6 <gpib_unread_data+0x1>
   10e6a:	c0 93 e5 1e 	sts	0x1EE5, r28	; 0x801ee5 <gpib_unread_data>
   10e6e:	81 e0       	ldi	r24, 0x01	; 1
   10e70:	80 93 5d 19 	sts	0x195D, r24	; 0x80195d <gpib_unread_f>
   10e74:	12 c0       	rjmp	.+36     	; 0x10e9a <gpib_unread+0x46>
   10e76:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10e7a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10e7e:	85 70       	andi	r24, 0x05	; 5
   10e80:	99 27       	eor	r25, r25
   10e82:	89 2b       	or	r24, r25
   10e84:	51 f0       	breq	.+20     	; 0x10e9a <gpib_unread+0x46>
   10e86:	83 e0       	ldi	r24, 0x03	; 3
   10e88:	91 e1       	ldi	r25, 0x11	; 17
   10e8a:	a0 e0       	ldi	r26, 0x00	; 0
   10e8c:	ed b7       	in	r30, 0x3d	; 61
   10e8e:	fe b7       	in	r31, 0x3e	; 62
   10e90:	81 83       	std	Z+1, r24	; 0x01
   10e92:	92 83       	std	Z+2, r25	; 0x02
   10e94:	a3 83       	std	Z+3, r26	; 0x03
   10e96:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   10e9a:	ce 01       	movw	r24, r28
   10e9c:	cd b7       	in	r28, 0x3d	; 61
   10e9e:	de b7       	in	r29, 0x3e	; 62
   10ea0:	23 96       	adiw	r28, 0x03	; 3
   10ea2:	e2 e0       	ldi	r30, 0x02	; 2
   10ea4:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00010ea8 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10ea8:	11 b8       	out	0x01, r1	; 1
   10eaa:	80 b1       	in	r24, 0x00	; 0
   10eac:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10eae:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10eb0:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10eb2:	08 95       	ret

00010eb4 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10eb4:	4e 99       	sbic	0x09, 6	; 9
   10eb6:	03 c0       	rjmp	.+6      	; 0x10ebe <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10eb8:	80 e0       	ldi	r24, 0x00	; 0
   10eba:	94 e0       	ldi	r25, 0x04	; 4
   10ebc:	02 c0       	rjmp	.+4      	; 0x10ec2 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10ebe:	80 e0       	ldi	r24, 0x00	; 0
   10ec0:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10ec2:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10ec4:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10ec6:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10ec8:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10eca:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10ecc:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10ece:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10ed0:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10ed2:	08 95       	ret

00010ed4 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10ed4:	19 99       	sbic	0x03, 1	; 3
   10ed6:	03 c0       	rjmp	.+6      	; 0x10ede <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10ed8:	80 e0       	ldi	r24, 0x00	; 0
   10eda:	90 e2       	ldi	r25, 0x20	; 32
   10edc:	02 c0       	rjmp	.+4      	; 0x10ee2 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10ede:	80 e0       	ldi	r24, 0x00	; 0
   10ee0:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10ee2:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10ee4:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10ee6:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10ee8:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10eea:	08 95       	ret

00010eec <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10eec:	2f 92       	push	r2
   10eee:	3f 92       	push	r3
   10ef0:	4f 92       	push	r4
   10ef2:	6f 92       	push	r6
   10ef4:	7f 92       	push	r7
   10ef6:	8f 92       	push	r8
   10ef8:	cf 92       	push	r12
   10efa:	df 92       	push	r13
   10efc:	ef 92       	push	r14
   10efe:	1f 93       	push	r17
   10f00:	cf 93       	push	r28
   10f02:	df 93       	push	r29
   10f04:	cd b7       	in	r28, 0x3d	; 61
   10f06:	de b7       	in	r29, 0x3e	; 62
   10f08:	2f 97       	sbiw	r28, 0x0f	; 15
   10f0a:	0f b6       	in	r0, 0x3f	; 63
   10f0c:	f8 94       	cli
   10f0e:	de bf       	out	0x3e, r29	; 62
   10f10:	0f be       	out	0x3f, r0	; 63
   10f12:	cd bf       	out	0x3d, r28	; 61
   10f14:	9f 87       	std	Y+15, r25	; 0x0f
   10f16:	8e 87       	std	Y+14, r24	; 0x0e
    uint8_t tx_state;

// Wait for DAV to be released before starting
// Read state for DAV
///@brief NRFD,NDAC SRQ are outputs
    gpib_bus_read_init(0);
   10f18:	80 e0       	ldi	r24, 0x00	; 0
   10f1a:	90 e0       	ldi	r25, 0x00	; 0
   10f1c:	8f de       	rcall	.-738    	; 0x10c3c <gpib_bus_read_init>
// Bus read init sets the following states
// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10f1e:	64 ef       	ldi	r22, 0xF4	; 244
   10f20:	71 e0       	ldi	r23, 0x01	; 1
   10f22:	80 e0       	ldi	r24, 0x00	; 0
   10f24:	90 e0       	ldi	r25, 0x00	; 0
   10f26:	80 de       	rcall	.-768    	; 0x10c28 <gpib_timeout_set>

// Bus read init sets the following states
// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   10f28:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for DAV==1>\n");
   10f2a:	83 e3       	ldi	r24, 0x33	; 51
   10f2c:	90 e1       	ldi	r25, 0x10	; 16
   10f2e:	6c 01       	movw	r12, r24
   10f30:	e1 2c       	mov	r14, r1
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for NDAC==1>\n");
   10f32:	8d e4       	ldi	r24, 0x4D	; 77
   10f34:	90 e1       	ldi	r25, 0x10	; 16
   10f36:	3c 01       	movw	r6, r24
   10f38:	81 2c       	mov	r8, r1
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for NRFD==0>\n");
   10f3a:	88 e6       	ldi	r24, 0x68	; 104
   10f3c:	90 e1       	ldi	r25, 0x10	; 16
   10f3e:	1c 01       	movw	r2, r24
   10f40:	41 2c       	mov	r4, r1
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10f42:	83 e8       	ldi	r24, 0x83	; 131
   10f44:	90 e1       	ldi	r25, 0x10	; 16
   10f46:	9c 01       	movw	r18, r24
   10f48:	40 e0       	ldi	r20, 0x00	; 0
   10f4a:	28 87       	std	Y+8, r18	; 0x08
   10f4c:	39 87       	std	Y+9, r19	; 0x09
   10f4e:	4a 87       	std	Y+10, r20	; 0x0a
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for DAV==1>\n");
   10f50:	8b ea       	ldi	r24, 0xAB	; 171
   10f52:	90 e1       	ldi	r25, 0x10	; 16
   10f54:	9c 01       	movw	r18, r24
   10f56:	40 e0       	ldi	r20, 0x00	; 0
   10f58:	2b 87       	std	Y+11, r18	; 0x0b
   10f5a:	3c 87       	std	Y+12, r19	; 0x0c
   10f5c:	4d 87       	std	Y+13, r20	; 0x0d
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
		if(uart_keyhit(0))
   10f5e:	80 e0       	ldi	r24, 0x00	; 0
   10f60:	0e 94 45 2b 	call	0x568a	; 0x568a <uart_keyhit>
   10f64:	89 2b       	or	r24, r25
   10f66:	99 f0       	breq	.+38     	; 0x10f8e <gpib_write_byte+0xa2>
		{
			if(debuglevel & GPIB_ERR)
   10f68:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10f6c:	80 ff       	sbrs	r24, 0
   10f6e:	39 c1       	rjmp	.+626    	; 0x111e2 <gpib_write_byte+0x2f6>
				printf("gpib_write_byte: KEY state=%d\n", tx_state);
   10f70:	81 2f       	mov	r24, r17
   10f72:	90 e0       	ldi	r25, 0x00	; 0
   10f74:	ed b7       	in	r30, 0x3d	; 61
   10f76:	fe b7       	in	r31, 0x3e	; 62
   10f78:	95 83       	std	Z+5, r25	; 0x05
   10f7a:	84 83       	std	Z+4, r24	; 0x04
   10f7c:	84 ee       	ldi	r24, 0xE4	; 228
   10f7e:	90 e1       	ldi	r25, 0x10	; 16
   10f80:	a0 e0       	ldi	r26, 0x00	; 0
   10f82:	81 83       	std	Z+1, r24	; 0x01
   10f84:	92 83       	std	Z+2, r25	; 0x02
   10f86:	a3 83       	std	Z+3, r26	; 0x03
   10f88:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   10f8c:	2a c1       	rjmp	.+596    	; 0x111e2 <gpib_write_byte+0x2f6>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10f8e:	4c 99       	sbic	0x09, 4	; 9
   10f90:	19 c0       	rjmp	.+50     	; 0x10fc4 <gpib_write_byte+0xd8>
        {
            ch |= IFC_FLAG;
   10f92:	2e 85       	ldd	r18, Y+14	; 0x0e
   10f94:	3f 85       	ldd	r19, Y+15	; 0x0f
   10f96:	30 61       	ori	r19, 0x10	; 16
   10f98:	3f 87       	std	Y+15, r19	; 0x0f
   10f9a:	2e 87       	std	Y+14, r18	; 0x0e
			if(debuglevel & GPIB_ERR)
   10f9c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10fa0:	80 ff       	sbrs	r24, 0
   10fa2:	0e c0       	rjmp	.+28     	; 0x10fc0 <gpib_write_byte+0xd4>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   10fa4:	81 2f       	mov	r24, r17
   10fa6:	90 e0       	ldi	r25, 0x00	; 0
   10fa8:	ed b7       	in	r30, 0x3d	; 61
   10faa:	fe b7       	in	r31, 0x3e	; 62
   10fac:	95 83       	std	Z+5, r25	; 0x05
   10fae:	84 83       	std	Z+4, r24	; 0x04
   10fb0:	85 ec       	ldi	r24, 0xC5	; 197
   10fb2:	90 e1       	ldi	r25, 0x10	; 16
   10fb4:	a0 e0       	ldi	r26, 0x00	; 0
   10fb6:	81 83       	std	Z+1, r24	; 0x01
   10fb8:	92 83       	std	Z+2, r25	; 0x02
   10fba:	a3 83       	std	Z+3, r26	; 0x03
   10fbc:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            gpib_bus_init();
   10fc0:	60 de       	rcall	.-832    	; 0x10c82 <gpib_bus_init>
            break;
   10fc2:	0f c1       	rjmp	.+542    	; 0x111e2 <gpib_write_byte+0x2f6>
        }

        switch(tx_state)
   10fc4:	81 2f       	mov	r24, r17
   10fc6:	90 e0       	ldi	r25, 0x00	; 0
   10fc8:	8a 30       	cpi	r24, 0x0A	; 10
   10fca:	91 05       	cpc	r25, r1
   10fcc:	08 f0       	brcs	.+2      	; 0x10fd0 <gpib_write_byte+0xe4>
   10fce:	ff c0       	rjmp	.+510    	; 0x111ce <gpib_write_byte+0x2e2>
   10fd0:	fc 01       	movw	r30, r24
   10fd2:	e3 54       	subi	r30, 0x43	; 67
   10fd4:	ff 4f       	sbci	r31, 0xFF	; 255
   10fd6:	0c 94 a0 e2 	jmp	0x1c540	; 0x1c540 <__tablejump2__>
        {
            case GPIB_TX_START:
// Wait for release of DAV and EOI before starting
// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   10fda:	19 9b       	sbis	0x03, 1	; 3
   10fdc:	12 c0       	rjmp	.+36     	; 0x11002 <gpib_write_byte+0x116>
// We arrive here in Read Mode - see gpib_bus_read_init(0);

// Switch GBIB driver direction to Write
// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
                    GPIB_IO_HI(TE);               // BUS OUT, DAV OUT, NRFD and NDAC IN
   10fde:	42 9a       	sbi	0x08, 2	; 8
   10fe0:	3a 9a       	sbi	0x07, 2	; 7
                    GPIB_IO_LOW(DC);              // ATN OUT, EOI OUT, SRQ IN
   10fe2:	44 98       	cbi	0x08, 4	; 8
   10fe4:	3c 9a       	sbi	0x07, 4	; 7
#endif
// My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   10fe6:	2e 85       	ldd	r18, Y+14	; 0x0e
   10fe8:	3f 85       	ldd	r19, Y+15	; 0x0f
   10fea:	32 ff       	sbrs	r19, 2
   10fec:	02 c0       	rjmp	.+4      	; 0x10ff2 <gpib_write_byte+0x106>
                        GPIB_IO_LOW(ATN);         // FYI: SS80 never sends ATN from a device
   10fee:	5e 98       	cbi	0x0b, 6	; 11
   10ff0:	01 c0       	rjmp	.+2      	; 0x10ff4 <gpib_write_byte+0x108>
                    else
#if BOARD == 2
                        GPIB_IO_HI(ATN); 
   10ff2:	5e 9a       	sbi	0x0b, 6	; 11
   10ff4:	56 9a       	sbi	0x0a, 6	; 10
#else
                        GPIB_PIN_FLOAT_UP(ATN);
#endif

                    gpib_timeout_set(HTIMEOUT);
   10ff6:	64 ef       	ldi	r22, 0xF4	; 244
   10ff8:	71 e0       	ldi	r23, 0x01	; 1
   10ffa:	80 e0       	ldi	r24, 0x00	; 0
   10ffc:	90 e0       	ldi	r25, 0x00	; 0
   10ffe:	14 de       	rcall	.-984    	; 0x10c28 <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   11000:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11002:	80 91 da 1c 	lds	r24, 0x1CDA	; 0x801cda <gpib_timer+0x8>
#endif

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   11006:	88 23       	and	r24, r24
   11008:	09 f4       	brne	.+2      	; 0x1100c <gpib_write_byte+0x120>
   1100a:	a9 cf       	rjmp	.-174    	; 0x10f5e <gpib_write_byte+0x72>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   1100c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11010:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11014:	85 70       	andi	r24, 0x05	; 5
   11016:	99 27       	eor	r25, r25
   11018:	89 2b       	or	r24, r25
   1101a:	29 f1       	breq	.+74     	; 0x11066 <gpib_write_byte+0x17a>
                        printf("<BUS waiting for DAV==1>\n");
   1101c:	8b 85       	ldd	r24, Y+11	; 0x0b
   1101e:	9c 85       	ldd	r25, Y+12	; 0x0c
   11020:	ad 85       	ldd	r26, Y+13	; 0x0d
   11022:	1a c0       	rjmp	.+52     	; 0x11058 <gpib_write_byte+0x16c>
                }
                break;

            case GPIB_TX_WAIT_READY:
// Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   11024:	4a 9b       	sbis	0x09, 2	; 9
   11026:	08 c0       	rjmp	.+16     	; 0x11038 <gpib_write_byte+0x14c>
   11028:	4b 99       	sbic	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   1102a:	06 c0       	rjmp	.+12     	; 0x11038 <gpib_write_byte+0x14c>
   1102c:	64 ef       	ldi	r22, 0xF4	; 244
   1102e:	71 e0       	ldi	r23, 0x01	; 1
   11030:	80 e0       	ldi	r24, 0x00	; 0
   11032:	90 e0       	ldi	r25, 0x00	; 0
                    tx_state = GPIB_TX_PUT_DATA;
   11034:	f9 dd       	rcall	.-1038   	; 0x10c28 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11036:	12 e0       	ldi	r17, 0x02	; 2
   11038:	80 91 da 1c 	lds	r24, 0x1CDA	; 0x801cda <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   1103c:	88 23       	and	r24, r24
   1103e:	09 f4       	brne	.+2      	; 0x11042 <gpib_write_byte+0x156>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11040:	8e cf       	rjmp	.-228    	; 0x10f5e <gpib_write_byte+0x72>
   11042:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11046:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1104a:	85 70       	andi	r24, 0x05	; 5
   1104c:	99 27       	eor	r25, r25
   1104e:	89 2b       	or	r24, r25
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   11050:	51 f0       	breq	.+20     	; 0x11066 <gpib_write_byte+0x17a>
   11052:	88 85       	ldd	r24, Y+8	; 0x08
   11054:	99 85       	ldd	r25, Y+9	; 0x09
   11056:	aa 85       	ldd	r26, Y+10	; 0x0a
   11058:	ed b7       	in	r30, 0x3d	; 61
   1105a:	fe b7       	in	r31, 0x3e	; 62
   1105c:	81 83       	std	Z+1, r24	; 0x01
   1105e:	92 83       	std	Z+2, r25	; 0x02
   11060:	a3 83       	std	Z+3, r26	; 0x03
   11062:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
                    ch |= TIMEOUT_FLAG;
   11066:	2e 85       	ldd	r18, Y+14	; 0x0e
   11068:	3f 85       	ldd	r19, Y+15	; 0x0f
   1106a:	30 64       	ori	r19, 0x40	; 64
   1106c:	3f 87       	std	Y+15, r19	; 0x0f
   1106e:	2e 87       	std	Y+14, r18	; 0x0e
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   11070:	b6 c0       	rjmp	.+364    	; 0x111de <gpib_write_byte+0x2f2>
   11072:	8e 85       	ldd	r24, Y+14	; 0x0e
   11074:	9f 85       	ldd	r25, Y+15	; 0x0f
   11076:	90 ff       	sbrs	r25, 0
                    GPIB_IO_LOW(EOI);
   11078:	02 c0       	rjmp	.+4      	; 0x1107e <gpib_write_byte+0x192>
   1107a:	28 98       	cbi	0x05, 0	; 5
                else
#if BOARD == 2
                    GPIB_IO_HI(EOI);
   1107c:	01 c0       	rjmp	.+2      	; 0x11080 <gpib_write_byte+0x194>
   1107e:	28 9a       	sbi	0x05, 0	; 5
#else
                    GPIB_PIN_FLOAT_UP(EOI);
#endif

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   11080:	20 9a       	sbi	0x04, 0	; 4
   11082:	8f ef       	ldi	r24, 0xFF	; 255
   11084:	81 b9       	out	0x01, r24	; 1
   11086:	8e 85       	ldd	r24, Y+14	; 0x0e
   11088:	80 95       	com	r24
#if BOARD == 2
// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE);
   1108a:	82 b9       	out	0x02, r24	; 2
   1108c:	43 9a       	sbi	0x08, 3	; 8
   1108e:	3b 9a       	sbi	0x07, 3	; 7
   11090:	9d e0       	ldi	r25, 0x0D	; 13
   11092:	9a 95       	dec	r25
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   11094:	f1 f7       	brne	.-4      	; 0x11092 <gpib_write_byte+0x1a6>
   11096:	00 00       	nop
   11098:	64 ef       	ldi	r22, 0xF4	; 244
   1109a:	71 e0       	ldi	r23, 0x01	; 1
   1109c:	80 e0       	ldi	r24, 0x00	; 0
   1109e:	90 e0       	ldi	r25, 0x00	; 0
                tx_state = GPIB_TX_SET_DAV_LOW;
   110a0:	c3 dd       	rcall	.-1146   	; 0x10c28 <gpib_timeout_set>
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   110a2:	13 e0       	ldi	r17, 0x03	; 3
                gpib_timeout_set(HTIMEOUT);
   110a4:	5c cf       	rjmp	.-328    	; 0x10f5e <gpib_write_byte+0x72>
   110a6:	29 98       	cbi	0x05, 1	; 5
   110a8:	21 9a       	sbi	0x04, 1	; 4
   110aa:	64 ef       	ldi	r22, 0xF4	; 244
   110ac:	71 e0       	ldi	r23, 0x01	; 1
   110ae:	80 e0       	ldi	r24, 0x00	; 0
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
                break;

///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   110b0:	90 e0       	ldi	r25, 0x00	; 0
   110b2:	ba dd       	rcall	.-1164   	; 0x10c28 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   110b4:	14 e0       	ldi	r17, 0x04	; 4
   110b6:	53 cf       	rjmp	.-346    	; 0x10f5e <gpib_write_byte+0x72>
   110b8:	4a 99       	sbic	0x09, 2	; 9
   110ba:	07 c0       	rjmp	.+14     	; 0x110ca <gpib_write_byte+0x1de>
   110bc:	64 ef       	ldi	r22, 0xF4	; 244
   110be:	71 e0       	ldi	r23, 0x01	; 1
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   110c0:	80 e0       	ldi	r24, 0x00	; 0
                    break;
   110c2:	90 e0       	ldi	r25, 0x00	; 0
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   110c4:	b1 dd       	rcall	.-1182   	; 0x10c28 <gpib_timeout_set>
   110c6:	15 e0       	ldi	r17, 0x05	; 5
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   110c8:	4a cf       	rjmp	.-364    	; 0x10f5e <gpib_write_byte+0x72>
   110ca:	80 91 da 1c 	lds	r24, 0x1CDA	; 0x801cda <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   110ce:	88 23       	and	r24, r24
   110d0:	09 f4       	brne	.+2      	; 0x110d4 <gpib_write_byte+0x1e8>
   110d2:	45 cf       	rjmp	.-374    	; 0x10f5e <gpib_write_byte+0x72>
   110d4:	ee 85       	ldd	r30, Y+14	; 0x0e
   110d6:	ff 85       	ldd	r31, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   110d8:	f0 64       	ori	r31, 0x40	; 64
   110da:	ff 87       	std	Y+15, r31	; 0x0f
   110dc:	ee 87       	std	Y+14, r30	; 0x0e
   110de:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   110e2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   110e6:	85 70       	andi	r24, 0x05	; 5
   110e8:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NRFD==0>\n");
   110ea:	89 2b       	or	r24, r25
   110ec:	09 f4       	brne	.+2      	; 0x110f0 <gpib_write_byte+0x204>
   110ee:	77 c0       	rjmp	.+238    	; 0x111de <gpib_write_byte+0x2f2>
   110f0:	ed b7       	in	r30, 0x3d	; 61
   110f2:	fe b7       	in	r31, 0x3e	; 62
   110f4:	21 82       	std	Z+1, r2	; 0x01
                }
                break;

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   110f6:	32 82       	std	Z+2, r3	; 0x02
   110f8:	43 82       	std	Z+3, r4	; 0x03
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   110fa:	44 c0       	rjmp	.+136    	; 0x11184 <gpib_write_byte+0x298>
   110fc:	4b 99       	sbic	0x09, 3	; 9
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   110fe:	6b c0       	rjmp	.+214    	; 0x111d6 <gpib_write_byte+0x2ea>
   11100:	80 91 da 1c 	lds	r24, 0x1CDA	; 0x801cda <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11104:	88 23       	and	r24, r24
   11106:	09 f4       	brne	.+2      	; 0x1110a <gpib_write_byte+0x21e>
   11108:	2a cf       	rjmp	.-428    	; 0x10f5e <gpib_write_byte+0x72>
   1110a:	2e 85       	ldd	r18, Y+14	; 0x0e
   1110c:	3f 85       	ldd	r19, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   1110e:	30 64       	ori	r19, 0x40	; 64
   11110:	3f 87       	std	Y+15, r19	; 0x0f
   11112:	2e 87       	std	Y+14, r18	; 0x0e
   11114:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11118:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1111c:	85 70       	andi	r24, 0x05	; 5
   1111e:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NDAC==1>\n");
   11120:	89 2b       	or	r24, r25
   11122:	09 f4       	brne	.+2      	; 0x11126 <gpib_write_byte+0x23a>
   11124:	5c c0       	rjmp	.+184    	; 0x111de <gpib_write_byte+0x2f2>
   11126:	ed b7       	in	r30, 0x3d	; 61
   11128:	fe b7       	in	r31, 0x3e	; 62
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
#if BOARD == 2
                GPIB_IO_HI(DAV);
   1112a:	61 82       	std	Z+1, r6	; 0x01
   1112c:	72 82       	std	Z+2, r7	; 0x02
   1112e:	83 82       	std	Z+3, r8	; 0x03
   11130:	29 c0       	rjmp	.+82     	; 0x11184 <gpib_write_byte+0x298>
#else
                GPIB_PIN_FLOAT_UP(DAV);
#endif
                GPIB_BUS_SETTLE();                // give some time

                gpib_bus_read_init(0);            // Free BUS, NOT busy
   11132:	29 9a       	sbi	0x05, 1	; 5
   11134:	21 9a       	sbi	0x04, 1	; 4
   11136:	fd e0       	ldi	r31, 0x0D	; 13
   11138:	fa 95       	dec	r31

                gpib_timeout_set(HTIMEOUT);
   1113a:	f1 f7       	brne	.-4      	; 0x11138 <gpib_write_byte+0x24c>
   1113c:	00 00       	nop
   1113e:	80 e0       	ldi	r24, 0x00	; 0
   11140:	90 e0       	ldi	r25, 0x00	; 0
   11142:	7c dd       	rcall	.-1288   	; 0x10c3c <gpib_bus_read_init>
   11144:	64 ef       	ldi	r22, 0xF4	; 244
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   11146:	71 e0       	ldi	r23, 0x01	; 1
                break;
   11148:	80 e0       	ldi	r24, 0x00	; 0

/// We are in read mode now
///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   1114a:	90 e0       	ldi	r25, 0x00	; 0
   1114c:	6d dd       	rcall	.-1318   	; 0x10c28 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1114e:	17 e0       	ldi	r17, 0x07	; 7
   11150:	06 cf       	rjmp	.-500    	; 0x10f5e <gpib_write_byte+0x72>
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   11152:	19 99       	sbic	0x03, 1	; 3
   11154:	42 c0       	rjmp	.+132    	; 0x111da <gpib_write_byte+0x2ee>
   11156:	80 91 da 1c 	lds	r24, 0x1CDA	; 0x801cda <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   1115a:	88 23       	and	r24, r24
   1115c:	09 f4       	brne	.+2      	; 0x11160 <gpib_write_byte+0x274>
   1115e:	ff ce       	rjmp	.-514    	; 0x10f5e <gpib_write_byte+0x72>
   11160:	2e 85       	ldd	r18, Y+14	; 0x0e
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11162:	3f 85       	ldd	r19, Y+15	; 0x0f
   11164:	30 64       	ori	r19, 0x40	; 64
   11166:	3f 87       	std	Y+15, r19	; 0x0f
   11168:	2e 87       	std	Y+14, r18	; 0x0e
   1116a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1116e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
                        printf("<BUS waiting for DAV==1>\n");
   11172:	85 70       	andi	r24, 0x05	; 5
   11174:	99 27       	eor	r25, r25
   11176:	89 2b       	or	r24, r25
   11178:	91 f1       	breq	.+100    	; 0x111de <gpib_write_byte+0x2f2>
   1117a:	ed b7       	in	r30, 0x3d	; 61
   1117c:	fe b7       	in	r31, 0x3e	; 62
   1117e:	c1 82       	std	Z+1, r12	; 0x01
   11180:	d2 82       	std	Z+2, r13	; 0x02
            case GPIB_TX_FINISH:
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11182:	e3 82       	std	Z+3, r14	; 0x03
   11184:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   11188:	2a c0       	rjmp	.+84     	; 0x111de <gpib_write_byte+0x2f2>
   1118a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1118e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   11192:	85 70       	andi	r24, 0x05	; 5
   11194:	99 27       	eor	r25, r25
   11196:	89 2b       	or	r24, r25
   11198:	b1 f0       	breq	.+44     	; 0x111c6 <gpib_write_byte+0x2da>
   1119a:	89 b1       	in	r24, 0x09	; 9
   1119c:	99 b1       	in	r25, 0x09	; 9
   1119e:	93 fb       	bst	r25, 3
   111a0:	99 27       	eor	r25, r25
   111a2:	90 f9       	bld	r25, 0
   111a4:	ed b7       	in	r30, 0x3d	; 61
   111a6:	fe b7       	in	r31, 0x3e	; 62
   111a8:	96 83       	std	Z+6, r25	; 0x06
   111aa:	17 82       	std	Z+7, r1	; 0x07
   111ac:	82 fb       	bst	r24, 2
   111ae:	88 27       	eor	r24, r24
   111b0:	80 f9       	bld	r24, 0
   111b2:	84 83       	std	Z+4, r24	; 0x04
   111b4:	15 82       	std	Z+5, r1	; 0x05
   111b6:	80 e2       	ldi	r24, 0x20	; 32
   111b8:	90 e1       	ldi	r25, 0x10	; 16
   111ba:	a0 e0       	ldi	r26, 0x00	; 0
// Free BUS, BUSY on error
                gpib_bus_read_init(1);
   111bc:	81 83       	std	Z+1, r24	; 0x01
   111be:	92 83       	std	Z+2, r25	; 0x02
   111c0:	a3 83       	std	Z+3, r26	; 0x03
   111c2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   111c6:	81 e0       	ldi	r24, 0x01	; 1
   111c8:	90 e0       	ldi	r25, 0x00	; 0
   111ca:	38 dd       	rcall	.-1424   	; 0x10c3c <gpib_bus_read_init>
   111cc:	0a c0       	rjmp	.+20     	; 0x111e2 <gpib_write_byte+0x2f6>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   111ce:	1a 30       	cpi	r17, 0x0A	; 10
   111d0:	09 f0       	breq	.+2      	; 0x111d4 <gpib_write_byte+0x2e8>
/// We are in read mode now
///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   111d2:	c5 ce       	rjmp	.-630    	; 0x10f5e <gpib_write_byte+0x72>
   111d4:	06 c0       	rjmp	.+12     	; 0x111e2 <gpib_write_byte+0x2f6>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   111d6:	16 e0       	ldi	r17, 0x06	; 6
   111d8:	c2 ce       	rjmp	.-636    	; 0x10f5e <gpib_write_byte+0x72>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   111da:	18 e0       	ldi	r17, 0x08	; 8
   111dc:	c0 ce       	rjmp	.-640    	; 0x10f5e <gpib_write_byte+0x72>
   111de:	19 e0       	ldi	r17, 0x09	; 9
   111e0:	be ce       	rjmp	.-644    	; 0x10f5e <gpib_write_byte+0x72>
   111e2:	8e 85       	ldd	r24, Y+14	; 0x0e
   111e4:	9f 85       	ldd	r25, Y+15	; 0x0f
   111e6:	2f 96       	adiw	r28, 0x0f	; 15
   111e8:	0f b6       	in	r0, 0x3f	; 63
   111ea:	f8 94       	cli
   111ec:	de bf       	out	0x3e, r29	; 62
   111ee:	0f be       	out	0x3f, r0	; 63
   111f0:	cd bf       	out	0x3d, r28	; 61
   111f2:	df 91       	pop	r29
   111f4:	cf 91       	pop	r28
   111f6:	1f 91       	pop	r17
   111f8:	ef 90       	pop	r14
   111fa:	df 90       	pop	r13
   111fc:	cf 90       	pop	r12
   111fe:	8f 90       	pop	r8
   11200:	7f 90       	pop	r7
   11202:	6f 90       	pop	r6
   11204:	4f 90       	pop	r4
   11206:	3f 90       	pop	r3
   11208:	2f 90       	pop	r2
   1120a:	08 95       	ret

0001120c <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   1120c:	cf 93       	push	r28
   1120e:	df 93       	push	r29
   11210:	ec 01       	movw	r28, r24
    if(fo == NULL)
   11212:	89 2b       	or	r24, r25
   11214:	21 f4       	brne	.+8      	; 0x1121e <gpib_decode_header+0x12>
        fo = stdout;
   11216:	c0 91 b4 1c 	lds	r28, 0x1CB4	; 0x801cb4 <__iob+0x2>
   1121a:	d0 91 b5 1c 	lds	r29, 0x1CB5	; 0x801cb5 <__iob+0x3>

    fprintf(fo,"===========================================\n");
   1121e:	be 01       	movw	r22, r28
   11220:	8d ee       	ldi	r24, 0xED	; 237
   11222:	9b e0       	ldi	r25, 0x0B	; 11
   11224:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputs>
    fprintf(fo,"GPIB bus state\n");
   11228:	be 01       	movw	r22, r28
   1122a:	8a e1       	ldi	r24, 0x1A	; 26
   1122c:	9c e0       	ldi	r25, 0x0C	; 12
   1122e:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   11232:	be 01       	movw	r22, r28
   11234:	8a e2       	ldi	r24, 0x2A	; 42
   11236:	9c e0       	ldi	r25, 0x0C	; 12
   11238:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   1123c:	be 01       	movw	r22, r28
   1123e:	8e e3       	ldi	r24, 0x3E	; 62
   11240:	9c e0       	ldi	r25, 0x0C	; 12
   11242:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   11246:	be 01       	movw	r22, r28
   11248:	81 e6       	ldi	r24, 0x61	; 97
   1124a:	9c e0       	ldi	r25, 0x0C	; 12
   1124c:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputs>
    fprintf(fo,"     A = ATN\n");
   11250:	be 01       	movw	r22, r28
   11252:	8b e8       	ldi	r24, 0x8B	; 139
   11254:	9c e0       	ldi	r25, 0x0C	; 12
   11256:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputs>
    fprintf(fo,"      E = EOI\n");
   1125a:	be 01       	movw	r22, r28
   1125c:	89 e9       	ldi	r24, 0x99	; 153
   1125e:	9c e0       	ldi	r25, 0x0C	; 12
   11260:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputs>
    fprintf(fo,"       S = SRQ\n");
   11264:	be 01       	movw	r22, r28
   11266:	88 ea       	ldi	r24, 0xA8	; 168
   11268:	9c e0       	ldi	r25, 0x0C	; 12
   1126a:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputs>
    fprintf(fo,"        R = REN\n");
   1126e:	be 01       	movw	r22, r28
   11270:	88 eb       	ldi	r24, 0xB8	; 184
   11272:	9c e0       	ldi	r25, 0x0C	; 12
   11274:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputs>
    fprintf(fo,"         I = IFC\n");
   11278:	be 01       	movw	r22, r28
   1127a:	89 ec       	ldi	r24, 0xC9	; 201
   1127c:	9c e0       	ldi	r25, 0x0C	; 12
   1127e:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   11282:	be 01       	movw	r22, r28
   11284:	8b ed       	ldi	r24, 0xDB	; 219
   11286:	9c e0       	ldi	r25, 0x0C	; 12
   11288:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   1128c:	be 01       	movw	r22, r28
   1128e:	8d ef       	ldi	r24, 0xFD	; 253
   11290:	9c e0       	ldi	r25, 0x0C	; 12
   11292:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   11296:	be 01       	movw	r22, r28
   11298:	85 e1       	ldi	r24, 0x15	; 21
   1129a:	9d e0       	ldi	r25, 0x0D	; 13
   1129c:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputs>
    fprintf(fo,"              GPIB commands\n");
   112a0:	be 01       	movw	r22, r28
   112a2:	80 e3       	ldi	r24, 0x30	; 48
   112a4:	9d e0       	ldi	r25, 0x0D	; 13
   112a6:	0e 94 0b 77 	call	0xee16	; 0xee16 <fputs>
}
   112aa:	df 91       	pop	r29
   112ac:	cf 91       	pop	r28
   112ae:	08 95       	ret

000112b0 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   112b0:	a9 e8       	ldi	r26, 0x89	; 137
   112b2:	b0 e0       	ldi	r27, 0x00	; 0
   112b4:	ee e5       	ldi	r30, 0x5E	; 94
   112b6:	f9 e8       	ldi	r31, 0x89	; 137
   112b8:	0c 94 d5 e2 	jmp	0x1c5aa	; 0x1c5aa <__prologue_saves__+0xc>
   112bc:	8c 01       	movw	r16, r24
   112be:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   112c0:	1a 86       	std	Y+10, r1	; 0x0a
   112c2:	4c 01       	movw	r8, r24
   112c4:	88 24       	eor	r8, r8
   112c6:	44 e0       	ldi	r20, 0x04	; 4
   112c8:	94 22       	and	r9, r20
   112ca:	ce 01       	movw	r24, r28
   112cc:	0a 96       	adiw	r24, 0x0a	; 10
   112ce:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   112d0:	62 30       	cpi	r22, 0x02	; 2
   112d2:	71 05       	cpc	r23, r1
   112d4:	e8 f4       	brcc	.+58     	; 0x11310 <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   112d6:	81 14       	cp	r8, r1
   112d8:	91 04       	cpc	r9, r1
   112da:	29 f4       	brne	.+10     	; 0x112e6 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   112dc:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   112de:	90 ee       	ldi	r25, 0xE0	; 224
   112e0:	90 0f       	add	r25, r16
   112e2:	9f 35       	cpi	r25, 0x5F	; 95
   112e4:	08 f0       	brcs	.+2      	; 0x112e8 <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   112e6:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   112e8:	90 e0       	ldi	r25, 0x00	; 0
   112ea:	ed b7       	in	r30, 0x3d	; 61
   112ec:	fe b7       	in	r31, 0x3e	; 62
   112ee:	91 87       	std	Z+9, r25	; 0x09
   112f0:	80 87       	std	Z+8, r24	; 0x08
   112f2:	c8 01       	movw	r24, r16
   112f4:	99 27       	eor	r25, r25
   112f6:	97 83       	std	Z+7, r25	; 0x07
   112f8:	86 83       	std	Z+6, r24	; 0x06
   112fa:	8f ed       	ldi	r24, 0xDF	; 223
   112fc:	9f e0       	ldi	r25, 0x0F	; 15
   112fe:	a0 e0       	ldi	r26, 0x00	; 0
   11300:	83 83       	std	Z+3, r24	; 0x03
   11302:	94 83       	std	Z+4, r25	; 0x04
   11304:	a5 83       	std	Z+5, r26	; 0x05
   11306:	f2 82       	std	Z+2, r15	; 0x02
   11308:	e1 82       	std	Z+1, r14	; 0x01
   1130a:	0e 94 67 46 	call	0x8cce	; 0x8cce <sprintf_P>
   1130e:	0c c0       	rjmp	.+24     	; 0x11328 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   11310:	89 ed       	ldi	r24, 0xD9	; 217
   11312:	9f e0       	ldi	r25, 0x0F	; 15
   11314:	a0 e0       	ldi	r26, 0x00	; 0
   11316:	ed b7       	in	r30, 0x3d	; 61
   11318:	fe b7       	in	r31, 0x3e	; 62
   1131a:	83 83       	std	Z+3, r24	; 0x03
   1131c:	94 83       	std	Z+4, r25	; 0x04
   1131e:	a5 83       	std	Z+5, r26	; 0x05
   11320:	f2 82       	std	Z+2, r15	; 0x02
   11322:	e1 82       	std	Z+1, r14	; 0x01
   11324:	0e 94 67 46 	call	0x8cce	; 0x8cce <sprintf_P>
    }

    tmp = str + strlen(str);
   11328:	f7 01       	movw	r30, r14
   1132a:	01 90       	ld	r0, Z+
   1132c:	00 20       	and	r0, r0
   1132e:	e9 f7       	brne	.-6      	; 0x1132a <gpib_trace_display+0x7a>
   11330:	31 97       	sbiw	r30, 0x01	; 1
   11332:	cf 01       	movw	r24, r30
   11334:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   11336:	81 14       	cp	r8, r1
   11338:	91 04       	cpc	r9, r1
   1133a:	11 f0       	breq	.+4      	; 0x11340 <gpib_trace_display+0x90>
        *tmp++ = 'A';
   1133c:	21 e4       	ldi	r18, 0x41	; 65
   1133e:	01 c0       	rjmp	.+2      	; 0x11342 <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   11340:	2d e2       	ldi	r18, 0x2D	; 45
   11342:	20 83       	st	Z, r18
   11344:	dc 01       	movw	r26, r24
   11346:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   11348:	10 ff       	sbrs	r17, 0
   1134a:	02 c0       	rjmp	.+4      	; 0x11350 <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   1134c:	25 e4       	ldi	r18, 0x45	; 69
   1134e:	01 c0       	rjmp	.+2      	; 0x11352 <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   11350:	2d e2       	ldi	r18, 0x2D	; 45
   11352:	fc 01       	movw	r30, r24
   11354:	20 83       	st	Z, r18
   11356:	fd 01       	movw	r30, r26
   11358:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   1135a:	11 ff       	sbrs	r17, 1
   1135c:	02 c0       	rjmp	.+4      	; 0x11362 <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   1135e:	83 e5       	ldi	r24, 0x53	; 83
   11360:	01 c0       	rjmp	.+2      	; 0x11364 <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   11362:	8d e2       	ldi	r24, 0x2D	; 45
   11364:	8c 93       	st	X, r24
   11366:	df 01       	movw	r26, r30
   11368:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   1136a:	13 ff       	sbrs	r17, 3
   1136c:	02 c0       	rjmp	.+4      	; 0x11372 <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   1136e:	82 e5       	ldi	r24, 0x52	; 82
   11370:	01 c0       	rjmp	.+2      	; 0x11374 <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   11372:	8d e2       	ldi	r24, 0x2D	; 45
   11374:	80 83       	st	Z, r24
   11376:	fd 01       	movw	r30, r26
   11378:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   1137a:	14 ff       	sbrs	r17, 4
   1137c:	02 c0       	rjmp	.+4      	; 0x11382 <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   1137e:	89 e4       	ldi	r24, 0x49	; 73
   11380:	01 c0       	rjmp	.+2      	; 0x11384 <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   11382:	8d e2       	ldi	r24, 0x2D	; 45
   11384:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   11386:	a1 14       	cp	r10, r1
   11388:	b1 04       	cpc	r11, r1
   1138a:	d1 f4       	brne	.+52     	; 0x113c0 <gpib_trace_display+0x110>
   1138c:	df 01       	movw	r26, r30
   1138e:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   11390:	15 ff       	sbrs	r17, 5
   11392:	02 c0       	rjmp	.+4      	; 0x11398 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   11394:	80 e5       	ldi	r24, 0x50	; 80
   11396:	01 c0       	rjmp	.+2      	; 0x1139a <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   11398:	8d e2       	ldi	r24, 0x2D	; 45
   1139a:	80 83       	st	Z, r24
   1139c:	fd 01       	movw	r30, r26
   1139e:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   113a0:	16 ff       	sbrs	r17, 6
   113a2:	02 c0       	rjmp	.+4      	; 0x113a8 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   113a4:	84 e5       	ldi	r24, 0x54	; 84
   113a6:	01 c0       	rjmp	.+2      	; 0x113aa <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   113a8:	8d e2       	ldi	r24, 0x2D	; 45
   113aa:	8c 93       	st	X, r24
   113ac:	cf 01       	movw	r24, r30
   113ae:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   113b0:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   113b2:	17 ff       	sbrs	r17, 7
   113b4:	02 c0       	rjmp	.+4      	; 0x113ba <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   113b6:	82 e4       	ldi	r24, 0x42	; 66
   113b8:	01 c0       	rjmp	.+2      	; 0x113bc <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   113ba:	8d e2       	ldi	r24, 0x2D	; 45
   113bc:	80 83       	st	Z, r24
   113be:	08 c0       	rjmp	.+16     	; 0x113d0 <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   113c0:	8d e2       	ldi	r24, 0x2D	; 45
   113c2:	80 83       	st	Z, r24
        *tmp++ = '-';
   113c4:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   113c6:	6f 01       	movw	r12, r30
   113c8:	43 e0       	ldi	r20, 0x03	; 3
   113ca:	c4 0e       	add	r12, r20
   113cc:	d1 1c       	adc	r13, r1
   113ce:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   113d0:	f6 01       	movw	r30, r12
   113d2:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   113d4:	f1 e0       	ldi	r31, 0x01	; 1
   113d6:	af 1a       	sub	r10, r31
   113d8:	b1 08       	sbc	r11, r1
   113da:	42 e0       	ldi	r20, 0x02	; 2
   113dc:	a4 16       	cp	r10, r20
   113de:	b1 04       	cpc	r11, r1
   113e0:	f0 f4       	brcc	.+60     	; 0x1141e <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   113e2:	15 ff       	sbrs	r17, 5
   113e4:	03 c0       	rjmp	.+6      	; 0x113ec <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   113e6:	6d e4       	ldi	r22, 0x4D	; 77
   113e8:	7d e0       	ldi	r23, 0x0D	; 13
   113ea:	02 c0       	rjmp	.+4      	; 0x113f0 <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   113ec:	64 e5       	ldi	r22, 0x54	; 84
   113ee:	74 e0       	ldi	r23, 0x04	; 4
   113f0:	c7 01       	movw	r24, r14
   113f2:	0e 94 9a 31 	call	0x6334	; 0x6334 <strcat>
        if(status & NRFD_FLAG)
   113f6:	16 ff       	sbrs	r17, 6
   113f8:	03 c0       	rjmp	.+6      	; 0x11400 <gpib_trace_display+0x150>
            strcat(str," NRFD");
   113fa:	63 e5       	ldi	r22, 0x53	; 83
   113fc:	7d e0       	ldi	r23, 0x0D	; 13
   113fe:	02 c0       	rjmp	.+4      	; 0x11404 <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   11400:	64 e5       	ldi	r22, 0x54	; 84
   11402:	74 e0       	ldi	r23, 0x04	; 4
   11404:	c7 01       	movw	r24, r14
   11406:	0e 94 9a 31 	call	0x6334	; 0x6334 <strcat>
        if(status & NDAC_FLAG)
   1140a:	17 ff       	sbrs	r17, 7
   1140c:	03 c0       	rjmp	.+6      	; 0x11414 <gpib_trace_display+0x164>
            strcat(str," NDAC");
   1140e:	69 e5       	ldi	r22, 0x59	; 89
   11410:	7d e0       	ldi	r23, 0x0D	; 13
   11412:	02 c0       	rjmp	.+4      	; 0x11418 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   11414:	64 e5       	ldi	r22, 0x54	; 84
   11416:	74 e0       	ldi	r23, 0x04	; 4
   11418:	c7 01       	movw	r24, r14
   1141a:	0e 94 9a 31 	call	0x6334	; 0x6334 <strcat>
    }

    if( (status & ATN_FLAG) )
   1141e:	81 14       	cp	r8, r1
   11420:	91 04       	cpc	r9, r1
   11422:	09 f4       	brne	.+2      	; 0x11426 <gpib_trace_display+0x176>
   11424:	5a c0       	rjmp	.+180    	; 0x114da <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   11426:	c8 01       	movw	r24, r16
   11428:	8f 77       	andi	r24, 0x7F	; 127
   1142a:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   1142c:	9c 01       	movw	r18, r24
   1142e:	20 52       	subi	r18, 0x20	; 32
   11430:	31 09       	sbc	r19, r1
   11432:	2f 31       	cpi	r18, 0x1F	; 31
   11434:	31 05       	cpc	r19, r1
   11436:	48 f4       	brcc	.+18     	; 0x1144a <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   11438:	0f 71       	andi	r16, 0x1F	; 31
   1143a:	11 27       	eor	r17, r17
   1143c:	ed b7       	in	r30, 0x3d	; 61
   1143e:	fe b7       	in	r31, 0x3e	; 62
   11440:	17 83       	std	Z+7, r17	; 0x07
   11442:	06 83       	std	Z+6, r16	; 0x06
   11444:	8e ec       	ldi	r24, 0xCE	; 206
   11446:	9f e0       	ldi	r25, 0x0F	; 15
   11448:	0e c0       	rjmp	.+28     	; 0x11466 <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   1144a:	9c 01       	movw	r18, r24
   1144c:	20 54       	subi	r18, 0x40	; 64
   1144e:	31 09       	sbc	r19, r1
   11450:	2f 30       	cpi	r18, 0x0F	; 15
   11452:	31 05       	cpc	r19, r1
   11454:	88 f4       	brcc	.+34     	; 0x11478 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   11456:	0f 71       	andi	r16, 0x1F	; 31
   11458:	11 27       	eor	r17, r17
   1145a:	ed b7       	in	r30, 0x3d	; 61
   1145c:	fe b7       	in	r31, 0x3e	; 62
   1145e:	17 83       	std	Z+7, r17	; 0x07
   11460:	06 83       	std	Z+6, r16	; 0x06
   11462:	83 ec       	ldi	r24, 0xC3	; 195
   11464:	9f e0       	ldi	r25, 0x0F	; 15
   11466:	a0 e0       	ldi	r26, 0x00	; 0
   11468:	83 83       	std	Z+3, r24	; 0x03
   1146a:	94 83       	std	Z+4, r25	; 0x04
   1146c:	a5 83       	std	Z+5, r26	; 0x05
   1146e:	d2 82       	std	Z+2, r13	; 0x02
   11470:	c1 82       	std	Z+1, r12	; 0x01
   11472:	0e 94 67 46 	call	0x8cce	; 0x8cce <sprintf_P>
   11476:	31 c0       	rjmp	.+98     	; 0x114da <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   11478:	9c 01       	movw	r18, r24
   1147a:	20 56       	subi	r18, 0x60	; 96
   1147c:	31 09       	sbc	r19, r1
   1147e:	20 31       	cpi	r18, 0x10	; 16
   11480:	31 05       	cpc	r19, r1
   11482:	28 f0       	brcs	.+10     	; 0x1148e <gpib_trace_display+0x1de>
   11484:	e2 e8       	ldi	r30, 0x82	; 130
   11486:	f1 e0       	ldi	r31, 0x01	; 1
   11488:	00 e0       	ldi	r16, 0x00	; 0
   1148a:	10 e0       	ldi	r17, 0x00	; 0
   1148c:	0b c0       	rjmp	.+22     	; 0x114a4 <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   1148e:	0f 71       	andi	r16, 0x1F	; 31
   11490:	11 27       	eor	r17, r17
   11492:	ed b7       	in	r30, 0x3d	; 61
   11494:	fe b7       	in	r31, 0x3e	; 62
   11496:	17 83       	std	Z+7, r17	; 0x07
   11498:	06 83       	std	Z+6, r16	; 0x06
   1149a:	88 eb       	ldi	r24, 0xB8	; 184
   1149c:	9f e0       	ldi	r25, 0x0F	; 15
   1149e:	e3 cf       	rjmp	.-58     	; 0x11466 <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   114a0:	0f 5f       	subi	r16, 0xFF	; 255
   114a2:	1f 4f       	sbci	r17, 0xFF	; 255
   114a4:	20 81       	ld	r18, Z
   114a6:	31 81       	ldd	r19, Z+1	; 0x01
   114a8:	2f 3f       	cpi	r18, 0xFF	; 255
   114aa:	4f ef       	ldi	r20, 0xFF	; 255
   114ac:	34 07       	cpc	r19, r20
   114ae:	a9 f0       	breq	.+42     	; 0x114da <gpib_trace_display+0x22a>
   114b0:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   114b2:	82 17       	cp	r24, r18
   114b4:	93 07       	cpc	r25, r19
   114b6:	a1 f7       	brne	.-24     	; 0x114a0 <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   114b8:	68 e5       	ldi	r22, 0x58	; 88
   114ba:	74 e0       	ldi	r23, 0x04	; 4
   114bc:	c6 01       	movw	r24, r12
   114be:	0e 94 9a 31 	call	0x6334	; 0x6334 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   114c2:	f8 01       	movw	r30, r16
   114c4:	ee 0f       	add	r30, r30
   114c6:	ff 1f       	adc	r31, r31
   114c8:	ee 0f       	add	r30, r30
   114ca:	ff 1f       	adc	r31, r31
   114cc:	ee 57       	subi	r30, 0x7E	; 126
   114ce:	fe 4f       	sbci	r31, 0xFE	; 254
   114d0:	62 81       	ldd	r22, Z+2	; 0x02
   114d2:	73 81       	ldd	r23, Z+3	; 0x03
   114d4:	c6 01       	movw	r24, r12
   114d6:	0e 94 9a 31 	call	0x6334	; 0x6334 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   114da:	20 91 5e 19 	lds	r18, 0x195E	; 0x80195e <gpib_log_fp>
   114de:	30 91 5f 19 	lds	r19, 0x195F	; 0x80195f <gpib_log_fp+0x1>
   114e2:	80 91 b4 1c 	lds	r24, 0x1CB4	; 0x801cb4 <__iob+0x2>
   114e6:	90 91 b5 1c 	lds	r25, 0x1CB5	; 0x801cb5 <__iob+0x3>
   114ea:	23 2b       	or	r18, r19
   114ec:	21 f4       	brne	.+8      	; 0x114f6 <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   114ee:	90 93 5f 19 	sts	0x195F, r25	; 0x80195f <gpib_log_fp+0x1>
   114f2:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   114f6:	20 91 5e 19 	lds	r18, 0x195E	; 0x80195e <gpib_log_fp>
   114fa:	30 91 5f 19 	lds	r19, 0x195F	; 0x80195f <gpib_log_fp+0x1>
   114fe:	82 17       	cp	r24, r18
   11500:	93 07       	cpc	r25, r19
   11502:	19 f0       	breq	.+6      	; 0x1150a <gpib_trace_display+0x25a>
        puts(str);
   11504:	c7 01       	movw	r24, r14
   11506:	0e 94 23 77 	call	0xee46	; 0xee46 <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   1150a:	ed b7       	in	r30, 0x3d	; 61
   1150c:	fe b7       	in	r31, 0x3e	; 62
   1150e:	f6 82       	std	Z+6, r15	; 0x06
   11510:	e5 82       	std	Z+5, r14	; 0x05
   11512:	8f e5       	ldi	r24, 0x5F	; 95
   11514:	9d e0       	ldi	r25, 0x0D	; 13
   11516:	94 83       	std	Z+4, r25	; 0x04
   11518:	83 83       	std	Z+3, r24	; 0x03
   1151a:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <gpib_log_fp>
   1151e:	90 91 5f 19 	lds	r25, 0x195F	; 0x80195f <gpib_log_fp+0x1>
   11522:	92 83       	std	Z+2, r25	; 0x02
   11524:	81 83       	std	Z+1, r24	; 0x01
   11526:	0e 94 cb 7e 	call	0xfd96	; 0xfd96 <fprintf>
}
   1152a:	c7 57       	subi	r28, 0x77	; 119
   1152c:	df 4f       	sbci	r29, 0xFF	; 255
   1152e:	ec e0       	ldi	r30, 0x0C	; 12
   11530:	0c 94 f1 e2 	jmp	0x1c5e2	; 0x1c5e2 <__epilogue_restores__+0xc>

00011534 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   11534:	a5 e0       	ldi	r26, 0x05	; 5
   11536:	b0 e0       	ldi	r27, 0x00	; 0
   11538:	e0 ea       	ldi	r30, 0xA0	; 160
   1153a:	fa e8       	ldi	r31, 0x8A	; 138
   1153c:	0c 94 d7 e2 	jmp	0x1c5ae	; 0x1c5ae <__prologue_saves__+0x10>
    ch = 0;
    control_last = 0;


// If we have an unread state it has already been traced!
    if(gpib_unread_f)
   11540:	20 91 5d 19 	lds	r18, 0x195D	; 0x80195d <gpib_unread_f>
   11544:	22 23       	and	r18, r18
   11546:	39 f0       	breq	.+14     	; 0x11556 <gpib_read_byte+0x22>
    {
        gpib_unread_f = 0;
   11548:	10 92 5d 19 	sts	0x195D, r1	; 0x80195d <gpib_unread_f>
        return(gpib_unread_data);
   1154c:	80 91 e5 1e 	lds	r24, 0x1EE5	; 0x801ee5 <gpib_unread_data>
   11550:	90 91 e6 1e 	lds	r25, 0x1EE6	; 0x801ee6 <gpib_unread_data+0x1>
   11554:	d4 c0       	rjmp	.+424    	; 0x116fe <gpib_read_byte+0x1ca>
   11556:	5c 01       	movw	r10, r24
    }

    gpib_bus_read_init(1);                        // Busy until we are ready
   11558:	81 e0       	ldi	r24, 0x01	; 1
   1155a:	90 e0       	ldi	r25, 0x00	; 0
   1155c:	6f db       	rcall	.-2338   	; 0x10c3c <gpib_bus_read_init>

///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs

    if(trace)
   1155e:	a1 14       	cp	r10, r1
   11560:	b1 04       	cpc	r11, r1
    {
        control_last = gpib_control_pin_read();
   11562:	51 f0       	breq	.+20     	; 0x11578 <gpib_read_byte+0x44>
   11564:	a7 dc       	rcall	.-1714   	; 0x10eb4 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   11566:	7c 01       	movw	r14, r24
   11568:	b5 dc       	rcall	.-1686   	; 0x10ed4 <gpib_handshake_pin_read>
   1156a:	e8 2a       	or	r14, r24
        gpib_trace_display(control_last, TRACE_BUS);
   1156c:	f9 2a       	or	r15, r25
   1156e:	62 e0       	ldi	r22, 0x02	; 2
   11570:	70 e0       	ldi	r23, 0x00	; 0
   11572:	c7 01       	movw	r24, r14
   11574:	9d de       	rcall	.-710    	; 0x112b0 <gpib_trace_display>
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;
	extern void gpib_user_task();

    ch = 0;
    control_last = 0;
   11576:	02 c0       	rjmp	.+4      	; 0x1157c <gpib_read_byte+0x48>
   11578:	e1 2c       	mov	r14, r1
            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
                break;
        }

        if(trace)
   1157a:	f1 2c       	mov	r15, r1
   1157c:	00 e0       	ldi	r16, 0x00	; 0
   1157e:	10 e0       	ldi	r17, 0x00	; 0
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
    {
gpib_user_task();
   11580:	c0 e0       	ldi	r28, 0x00	; 0
   11582:	0e 94 26 e0 	call	0x1c04c	; 0x1c04c <gpib_user_task>

        if(uart_keyhit(0))
   11586:	80 e0       	ldi	r24, 0x00	; 0
   11588:	0e 94 45 2b 	call	0x568a	; 0x568a <uart_keyhit>
   1158c:	89 2b       	or	r24, r25
		{
			if(debuglevel & GPIB_ERR)
   1158e:	91 f0       	breq	.+36     	; 0x115b4 <gpib_read_byte+0x80>
   11590:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11594:	80 ff       	sbrs	r24, 0
				printf("gpib_read_byte: state=%d\n", rx_state);
   11596:	90 c0       	rjmp	.+288    	; 0x116b8 <gpib_read_byte+0x184>
   11598:	d0 e0       	ldi	r29, 0x00	; 0
   1159a:	ed b7       	in	r30, 0x3d	; 61
   1159c:	fe b7       	in	r31, 0x3e	; 62
   1159e:	d5 83       	std	Z+5, r29	; 0x05
   115a0:	c4 83       	std	Z+4, r28	; 0x04
   115a2:	86 e0       	ldi	r24, 0x06	; 6
   115a4:	90 e1       	ldi	r25, 0x10	; 16
   115a6:	a0 e0       	ldi	r26, 0x00	; 0
   115a8:	81 83       	std	Z+1, r24	; 0x01
   115aa:	92 83       	std	Z+2, r25	; 0x02
   115ac:	a3 83       	std	Z+3, r26	; 0x03
   115ae:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   115b2:	82 c0       	rjmp	.+260    	; 0x116b8 <gpib_read_byte+0x184>
   115b4:	4c 99       	sbic	0x09, 4	; 9
        {
            ch |= IFC_FLAG;
   115b6:	14 c0       	rjmp	.+40     	; 0x115e0 <gpib_read_byte+0xac>
			if(debuglevel & GPIB_ERR)
   115b8:	10 61       	ori	r17, 0x10	; 16
   115ba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   115be:	80 ff       	sbrs	r24, 0
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   115c0:	0d c0       	rjmp	.+26     	; 0x115dc <gpib_read_byte+0xa8>
   115c2:	d0 e0       	ldi	r29, 0x00	; 0
   115c4:	ed b7       	in	r30, 0x3d	; 61
   115c6:	fe b7       	in	r31, 0x3e	; 62
   115c8:	d5 83       	std	Z+5, r29	; 0x05
   115ca:	c4 83       	std	Z+4, r28	; 0x04
   115cc:	88 ee       	ldi	r24, 0xE8	; 232
   115ce:	9f e0       	ldi	r25, 0x0F	; 15
   115d0:	a0 e0       	ldi	r26, 0x00	; 0
   115d2:	81 83       	std	Z+1, r24	; 0x01
   115d4:	92 83       	std	Z+2, r25	; 0x02
   115d6:	a3 83       	std	Z+3, r26	; 0x03
            gpib_bus_init();
   115d8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   115dc:	52 db       	rcall	.-2396   	; 0x10c82 <gpib_bus_init>
            break;
        }

        switch(rx_state)
   115de:	6c c0       	rjmp	.+216    	; 0x116b8 <gpib_read_byte+0x184>
   115e0:	8c 2f       	mov	r24, r28
   115e2:	90 e0       	ldi	r25, 0x00	; 0
   115e4:	89 30       	cpi	r24, 0x09	; 9
   115e6:	91 05       	cpc	r25, r1
   115e8:	08 f0       	brcs	.+2      	; 0x115ec <gpib_read_byte+0xb8>
   115ea:	4c c0       	rjmp	.+152    	; 0x11684 <gpib_read_byte+0x150>
   115ec:	fc 01       	movw	r30, r24
   115ee:	e9 53       	subi	r30, 0x39	; 57
   115f0:	ff 4f       	sbci	r31, 0xFF	; 255
   115f2:	0c 94 a0 e2 	jmp	0x1c540	; 0x1c540 <__tablejump2__>
        {
            case GPIB_RX_START:
///@brief Signal that we are ready to ready
#if BOARD == 2
                GPIB_IO_HI(NRFD);
   115f6:	5a 9a       	sbi	0x0b, 2	; 11
   115f8:	52 9a       	sbi	0x0a, 2	; 10
   115fa:	fd e0       	ldi	r31, 0x0D	; 13
   115fc:	fa 95       	dec	r31
   115fe:	f1 f7       	brne	.-4      	; 0x115fc <gpib_read_byte+0xc8>
#else
                GPIB_PIN_FLOAT_UP(NRFD);
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   11600:	00 00       	nop
   11602:	c1 e0       	ldi	r28, 0x01	; 1
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   11604:	77 c0       	rjmp	.+238    	; 0x116f4 <gpib_read_byte+0x1c0>
                    rx_state = GPIB_RX_DAV_IS_LOW;
   11606:	19 99       	sbic	0x03, 1	; 3
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   11608:	75 c0       	rjmp	.+234    	; 0x116f4 <gpib_read_byte+0x1c0>

///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   1160a:	c2 e0       	ldi	r28, 0x02	; 2
   1160c:	73 c0       	rjmp	.+230    	; 0x116f4 <gpib_read_byte+0x1c0>
   1160e:	5a 98       	cbi	0x0b, 2	; 11
   11610:	52 9a       	sbi	0x0a, 2	; 10
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   11612:	4a dc       	rcall	.-1900   	; 0x10ea8 <gpib_bus_read>
   11614:	c8 2e       	mov	r12, r24
   11616:	d1 2c       	mov	r13, r1
   11618:	4d dc       	rcall	.-1894   	; 0x10eb4 <gpib_control_pin_read>
                ch |= control_last;
   1161a:	7c 01       	movw	r14, r24
   1161c:	08 2b       	or	r16, r24

                if(trace)
   1161e:	19 2b       	or	r17, r25
   11620:	0c 29       	or	r16, r12
   11622:	1d 29       	or	r17, r13
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   11624:	a1 14       	cp	r10, r1
   11626:	b1 04       	cpc	r11, r1
   11628:	49 f0       	breq	.+18     	; 0x1163c <gpib_read_byte+0x108>
                    gpib_trace_display(bus | control_last, TRACE_READ);
   1162a:	54 dc       	rcall	.-1880   	; 0x10ed4 <gpib_handshake_pin_read>
   1162c:	e8 2a       	or	r14, r24
   1162e:	f9 2a       	or	r15, r25
   11630:	61 e0       	ldi	r22, 0x01	; 1
   11632:	70 e0       	ldi	r23, 0x00	; 0
   11634:	c6 01       	movw	r24, r12
   11636:	8e 29       	or	r24, r14
                }

#if BOARD == 2
                GPIB_IO_HI(NDAC);
   11638:	9f 29       	or	r25, r15
   1163a:	3a de       	rcall	.-908    	; 0x112b0 <gpib_trace_display>
   1163c:	5b 9a       	sbi	0x0b, 3	; 11
   1163e:	53 9a       	sbi	0x0a, 3	; 10
   11640:	8d e0       	ldi	r24, 0x0D	; 13
#else
                GPIB_PIN_FLOAT_UP(NDAC);
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   11642:	8a 95       	dec	r24
   11644:	f1 f7       	brne	.-4      	; 0x11642 <gpib_read_byte+0x10e>
   11646:	00 00       	nop
   11648:	64 ef       	ldi	r22, 0xF4	; 244
   1164a:	71 e0       	ldi	r23, 0x01	; 1
#if BOARD == 3
/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
#else
                rx_state = GPIB_RX_WAIT_FOR_NDAC_HI;
   1164c:	80 e0       	ldi	r24, 0x00	; 0
   1164e:	90 e0       	ldi	r25, 0x00	; 0
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   11650:	eb da       	rcall	.-2602   	; 0x10c28 <gpib_timeout_set>
   11652:	c3 e0       	ldi	r28, 0x03	; 3
                {
                    gpib_timeout_set(HTIMEOUT);
   11654:	4f c0       	rjmp	.+158    	; 0x116f4 <gpib_read_byte+0x1c0>
   11656:	4b 9b       	sbis	0x09, 3	; 9
   11658:	09 c0       	rjmp	.+18     	; 0x1166c <gpib_read_byte+0x138>
   1165a:	64 ef       	ldi	r22, 0xF4	; 244
   1165c:	71 e0       	ldi	r23, 0x01	; 1
   1165e:	80 e0       	ldi	r24, 0x00	; 0
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   11660:	90 e0       	ldi	r25, 0x00	; 0
   11662:	e2 da       	rcall	.-2620   	; 0x10c28 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11664:	c4 e0       	ldi	r28, 0x04	; 4
   11666:	02 c0       	rjmp	.+4      	; 0x1166c <gpib_read_byte+0x138>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
                {
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   11668:	19 99       	sbic	0x03, 1	; 3
   1166a:	c5 e0       	ldi	r28, 0x05	; 5
   1166c:	80 91 da 1c 	lds	r24, 0x1CDA	; 0x801cda <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
                    rx_state = GPIB_RX_ERROR;
   11670:	88 23       	and	r24, r24
   11672:	09 f4       	brne	.+2      	; 0x11676 <gpib_read_byte+0x142>
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
   11674:	3f c0       	rjmp	.+126    	; 0x116f4 <gpib_read_byte+0x1c0>
   11676:	10 64       	ori	r17, 0x40	; 64
   11678:	c7 e0       	ldi	r28, 0x07	; 7
                break;
        }

        if(trace)
   1167a:	3c c0       	rjmp	.+120    	; 0x116f4 <gpib_read_byte+0x1c0>
   1167c:	81 e0       	ldi	r24, 0x01	; 1
   1167e:	90 e0       	ldi	r25, 0x00	; 0
   11680:	dd da       	rcall	.-2630   	; 0x10c3c <gpib_bus_read_init>
   11682:	04 c0       	rjmp	.+8      	; 0x1168c <gpib_read_byte+0x158>
   11684:	a1 14       	cp	r10, r1
   11686:	b1 04       	cpc	r11, r1
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   11688:	91 f0       	breq	.+36     	; 0x116ae <gpib_read_byte+0x17a>
   1168a:	04 c0       	rjmp	.+8      	; 0x11694 <gpib_read_byte+0x160>
   1168c:	a1 14       	cp	r10, r1
            control |= gpib_handshake_pin_read();
   1168e:	b1 04       	cpc	r11, r1
   11690:	99 f0       	breq	.+38     	; 0x116b8 <gpib_read_byte+0x184>
   11692:	c8 e0       	ldi	r28, 0x08	; 8
   11694:	0f dc       	rcall	.-2018   	; 0x10eb4 <gpib_control_pin_read>
            if(control_last != control)
   11696:	6c 01       	movw	r12, r24
   11698:	1d dc       	rcall	.-1990   	; 0x10ed4 <gpib_handshake_pin_read>
   1169a:	c8 2a       	or	r12, r24
            {
                gpib_trace_display(control, TRACE_BUS);
   1169c:	d9 2a       	or	r13, r25
   1169e:	ce 14       	cp	r12, r14
   116a0:	df 04       	cpc	r13, r15
   116a2:	31 f0       	breq	.+12     	; 0x116b0 <gpib_read_byte+0x17c>
   116a4:	62 e0       	ldi	r22, 0x02	; 2
   116a6:	70 e0       	ldi	r23, 0x00	; 0
            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
                break;
        }

        if(trace)
   116a8:	c6 01       	movw	r24, r12
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   116aa:	02 de       	rcall	.-1020   	; 0x112b0 <gpib_trace_display>
   116ac:	01 c0       	rjmp	.+2      	; 0x116b0 <gpib_read_byte+0x17c>
            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
                break;
        }

        if(trace)
   116ae:	67 01       	movw	r12, r14
   116b0:	c8 30       	cpi	r28, 0x08	; 8
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   116b2:	11 f0       	breq	.+4      	; 0x116b8 <gpib_read_byte+0x184>
   116b4:	76 01       	movw	r14, r12
   116b6:	65 cf       	rjmp	.-310    	; 0x11582 <gpib_read_byte+0x4e>
   116b8:	80 91 df 1e 	lds	r24, 0x1EDF	; 0x801edf <current>
   116bc:	90 91 e0 1e 	lds	r25, 0x1EE0	; 0x801ee0 <current+0x1>
   116c0:	90 93 dc 1c 	sts	0x1CDC, r25	; 0x801cdc <lastcmd+0x1>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   116c4:	80 93 db 1c 	sts	0x1CDB, r24	; 0x801cdb <lastcmd>
   116c8:	c8 01       	movw	r24, r16
   116ca:	88 27       	eor	r24, r24
   116cc:	90 7d       	andi	r25, 0xD0	; 208
   116ce:	89 2b       	or	r24, r25
        current = 0;
   116d0:	11 f4       	brne	.+4      	; 0x116d6 <gpib_read_byte+0x1a2>
   116d2:	12 fd       	sbrc	r17, 2
   116d4:	05 c0       	rjmp	.+10     	; 0x116e0 <gpib_read_byte+0x1ac>
   116d6:	10 92 e0 1e 	sts	0x1EE0, r1	; 0x801ee0 <current+0x1>
    else
        current = ch & CMD_MASK;
   116da:	10 92 df 1e 	sts	0x1EDF, r1	; 0x801edf <current>
   116de:	07 c0       	rjmp	.+14     	; 0x116ee <gpib_read_byte+0x1ba>
   116e0:	c8 01       	movw	r24, r16
   116e2:	8f 77       	andi	r24, 0x7F	; 127
   116e4:	99 27       	eor	r25, r25
   116e6:	90 93 e0 1e 	sts	0x1EE0, r25	; 0x801ee0 <current+0x1>
   116ea:	80 93 df 1e 	sts	0x1EDF, r24	; 0x801edf <current>
            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
                break;
        }

        if(trace)
   116ee:	c8 01       	movw	r24, r16
   116f0:	06 c0       	rjmp	.+12     	; 0x116fe <gpib_read_byte+0x1ca>
   116f2:	c6 e0       	ldi	r28, 0x06	; 6
   116f4:	a1 14       	cp	r10, r1
   116f6:	b1 04       	cpc	r11, r1
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   116f8:	69 f6       	brne	.-102    	; 0x11694 <gpib_read_byte+0x160>
   116fa:	67 01       	movw	r12, r14
   116fc:	db cf       	rjmp	.-74     	; 0x116b4 <gpib_read_byte+0x180>
   116fe:	cd b7       	in	r28, 0x3d	; 61
   11700:	de b7       	in	r29, 0x3e	; 62
   11702:	25 96       	adiw	r28, 0x05	; 5
   11704:	ea e0       	ldi	r30, 0x0A	; 10
   11706:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__epilogue_restores__+0x10>

0001170a <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   1170a:	60 e0       	ldi	r22, 0x00	; 0
   1170c:	70 e0       	ldi	r23, 0x00	; 0
   1170e:	d0 cd       	rjmp	.-1120   	; 0x112b0 <gpib_trace_display>
   11710:	08 95       	ret

00011712 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   11712:	a7 e0       	ldi	r26, 0x07	; 7
   11714:	b0 e0       	ldi	r27, 0x00	; 0
   11716:	ef e8       	ldi	r30, 0x8F	; 143
   11718:	fb e8       	ldi	r31, 0x8B	; 139
   1171a:	0c 94 d7 e2 	jmp	0x1c5ae	; 0x1c5ae <__prologue_saves__+0x10>
   1171e:	5b 01       	movw	r10, r22
   11720:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   11722:	fa 01       	movw	r30, r20
   11724:	20 81       	ld	r18, Z
   11726:	31 81       	ldd	r19, Z+1	; 0x01
   11728:	22 27       	eor	r18, r18
   1172a:	31 83       	std	Z+1, r19	; 0x01
   1172c:	20 83       	st	Z, r18

    if(!size)
   1172e:	67 2b       	or	r22, r23
   11730:	21 f0       	breq	.+8      	; 0x1173a <gpib_read_str+0x28>
   11732:	7c 01       	movw	r14, r24
   11734:	00 e0       	ldi	r16, 0x00	; 0
   11736:	10 e0       	ldi	r17, 0x00	; 0
   11738:	28 c0       	rjmp	.+80     	; 0x1178a <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1173a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1173e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11742:	81 72       	andi	r24, 0x21	; 33
   11744:	91 70       	andi	r25, 0x01	; 1
   11746:	89 2b       	or	r24, r25
   11748:	09 f4       	brne	.+2      	; 0x1174c <gpib_read_str+0x3a>
   1174a:	7c c0       	rjmp	.+248    	; 0x11844 <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   1174c:	8f e9       	ldi	r24, 0x9F	; 159
   1174e:	9f e0       	ldi	r25, 0x0F	; 15
   11750:	a0 e0       	ldi	r26, 0x00	; 0
   11752:	ed b7       	in	r30, 0x3d	; 61
   11754:	fe b7       	in	r31, 0x3e	; 62
   11756:	81 83       	std	Z+1, r24	; 0x01
   11758:	92 83       	std	Z+2, r25	; 0x02
   1175a:	a3 83       	std	Z+3, r26	; 0x03
   1175c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   11760:	71 c0       	rjmp	.+226    	; 0x11844 <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11762:	8c 27       	eor	r24, r28
   11764:	9d 27       	eor	r25, r29
   11766:	92 fd       	sbrc	r25, 2
   11768:	2e c0       	rjmp	.+92     	; 0x117c6 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   1176a:	ce 01       	movw	r24, r28
   1176c:	88 27       	eor	r24, r24
   1176e:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   11770:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11772:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   11774:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   11776:	f7 01       	movw	r30, r14
   11778:	20 83       	st	Z, r18
        ++ind;
   1177a:	0f 5f       	subi	r16, 0xFF	; 255
   1177c:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1177e:	89 2b       	or	r24, r25
   11780:	09 f4       	brne	.+2      	; 0x11784 <gpib_read_str+0x72>
   11782:	3c c0       	rjmp	.+120    	; 0x117fc <gpib_read_str+0xea>
   11784:	ff ef       	ldi	r31, 0xFF	; 255
   11786:	ef 1a       	sub	r14, r31
   11788:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   1178a:	0a 15       	cp	r16, r10
   1178c:	1b 05       	cpc	r17, r11
   1178e:	0c f0       	brlt	.+2      	; 0x11792 <gpib_read_str+0x80>
   11790:	3f c0       	rjmp	.+126    	; 0x11810 <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   11792:	80 e0       	ldi	r24, 0x00	; 0
   11794:	90 e0       	ldi	r25, 0x00	; 0
   11796:	ce de       	rcall	.-612    	; 0x11534 <gpib_read_byte>
   11798:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   1179a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1179e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   117a2:	90 ff       	sbrs	r25, 0
            gpib_decode(val);
   117a4:	02 c0       	rjmp	.+4      	; 0x117aa <gpib_read_str+0x98>
   117a6:	ce 01       	movw	r24, r28
#endif
        if(val & ERROR_MASK)
   117a8:	b0 df       	rcall	.-160    	; 0x1170a <gpib_decode>
   117aa:	9e 01       	movw	r18, r28
   117ac:	22 27       	eor	r18, r18
   117ae:	30 7d       	andi	r19, 0xD0	; 208
   117b0:	f6 01       	movw	r30, r12
   117b2:	80 81       	ld	r24, Z
   117b4:	91 81       	ldd	r25, Z+1	; 0x01
   117b6:	21 15       	cp	r18, r1
   117b8:	31 05       	cpc	r19, r1
        {
            *status |= (val & ERROR_MASK);
   117ba:	99 f2       	breq	.-90     	; 0x11762 <gpib_read_str+0x50>
   117bc:	82 2b       	or	r24, r18
   117be:	93 2b       	or	r25, r19
   117c0:	91 83       	std	Z+1, r25	; 0x01
            break;
   117c2:	80 83       	st	Z, r24
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   117c4:	28 c0       	rjmp	.+80     	; 0x11816 <gpib_read_str+0x104>
   117c6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   117ca:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   117ce:	81 72       	andi	r24, 0x21	; 33
   117d0:	91 70       	andi	r25, 0x01	; 1
   117d2:	89 2b       	or	r24, r25
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   117d4:	81 f0       	breq	.+32     	; 0x117f6 <gpib_read_str+0xe4>
   117d6:	ce 01       	movw	r24, r28
   117d8:	99 27       	eor	r25, r25
   117da:	ed b7       	in	r30, 0x3d	; 61
   117dc:	fe b7       	in	r31, 0x3e	; 62
   117de:	97 83       	std	Z+7, r25	; 0x07
   117e0:	86 83       	std	Z+6, r24	; 0x06
   117e2:	15 83       	std	Z+5, r17	; 0x05
   117e4:	04 83       	std	Z+4, r16	; 0x04
   117e6:	82 e7       	ldi	r24, 0x72	; 114
   117e8:	9f e0       	ldi	r25, 0x0F	; 15
   117ea:	a0 e0       	ldi	r26, 0x00	; 0
   117ec:	81 83       	std	Z+1, r24	; 0x01
   117ee:	92 83       	std	Z+2, r25	; 0x02
   117f0:	a3 83       	std	Z+3, r26	; 0x03
            gpib_unread(val);
   117f2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   117f6:	ce 01       	movw	r24, r28
            break;
   117f8:	2d db       	rcall	.-2470   	; 0x10e54 <gpib_unread>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   117fa:	0d c0       	rjmp	.+26     	; 0x11816 <gpib_read_str+0x104>
   117fc:	d0 ff       	sbrs	r29, 0
        {

            if(*status & EOI_FLAG)
   117fe:	c2 cf       	rjmp	.-124    	; 0x11784 <gpib_read_str+0x72>
   11800:	f6 01       	movw	r30, r12
   11802:	80 81       	ld	r24, Z
   11804:	91 81       	ldd	r25, Z+1	; 0x01
   11806:	90 fd       	sbrc	r25, 0
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   11808:	1f c0       	rjmp	.+62     	; 0x11848 <gpib_read_str+0x136>
   1180a:	91 60       	ori	r25, 0x01	; 1
   1180c:	91 83       	std	Z+1, r25	; 0x01
            break;
        }
    }
    if ( ind != size )
   1180e:	80 83       	st	Z, r24
   11810:	0a 15       	cp	r16, r10
   11812:	1b 05       	cpc	r17, r11
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   11814:	c9 f0       	breq	.+50     	; 0x11848 <gpib_read_str+0x136>
   11816:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1181a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1181e:	81 72       	andi	r24, 0x21	; 33
   11820:	99 27       	eor	r25, r25
   11822:	89 2b       	or	r24, r25
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   11824:	89 f0       	breq	.+34     	; 0x11848 <gpib_read_str+0x136>
   11826:	ed b7       	in	r30, 0x3d	; 61
   11828:	fe b7       	in	r31, 0x3e	; 62
   1182a:	b7 82       	std	Z+7, r11	; 0x07
   1182c:	a6 82       	std	Z+6, r10	; 0x06
   1182e:	15 83       	std	Z+5, r17	; 0x05
   11830:	04 83       	std	Z+4, r16	; 0x04
   11832:	8b e4       	ldi	r24, 0x4B	; 75
   11834:	9f e0       	ldi	r25, 0x0F	; 15
   11836:	a0 e0       	ldi	r26, 0x00	; 0
   11838:	81 83       	std	Z+1, r24	; 0x01
   1183a:	92 83       	std	Z+2, r25	; 0x02
   1183c:	a3 83       	std	Z+3, r26	; 0x03
   1183e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   11842:	02 c0       	rjmp	.+4      	; 0x11848 <gpib_read_str+0x136>
   11844:	00 e0       	ldi	r16, 0x00	; 0
    }
    return(ind);
}
   11846:	10 e0       	ldi	r17, 0x00	; 0
   11848:	c8 01       	movw	r24, r16
   1184a:	cd b7       	in	r28, 0x3d	; 61
   1184c:	de b7       	in	r29, 0x3e	; 62
   1184e:	27 96       	adiw	r28, 0x07	; 7
   11850:	ea e0       	ldi	r30, 0x0A	; 10
   11852:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__epilogue_restores__+0x10>

00011856 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   11856:	a7 e0       	ldi	r26, 0x07	; 7
   11858:	b0 e0       	ldi	r27, 0x00	; 0
   1185a:	e1 e3       	ldi	r30, 0x31	; 49
   1185c:	fc e8       	ldi	r31, 0x8C	; 140
   1185e:	0c 94 d7 e2 	jmp	0x1c5ae	; 0x1c5ae <__prologue_saves__+0x10>
   11862:	8b 01       	movw	r16, r22
   11864:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   11866:	fa 01       	movw	r30, r20
   11868:	20 81       	ld	r18, Z
   1186a:	31 81       	ldd	r19, Z+1	; 0x01
   1186c:	22 27       	eor	r18, r18
   1186e:	31 83       	std	Z+1, r19	; 0x01
   11870:	20 83       	st	Z, r18

    if(!size)
   11872:	67 2b       	or	r22, r23
   11874:	21 f0       	breq	.+8      	; 0x1187e <gpib_write_str+0x28>
   11876:	6c 01       	movw	r12, r24
   11878:	c0 e0       	ldi	r28, 0x00	; 0
   1187a:	d0 e0       	ldi	r29, 0x00	; 0
   1187c:	35 c0       	rjmp	.+106    	; 0x118e8 <gpib_write_str+0x92>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1187e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11882:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11886:	81 72       	andi	r24, 0x21	; 33
   11888:	91 70       	andi	r25, 0x01	; 1
   1188a:	89 2b       	or	r24, r25
   1188c:	09 f4       	brne	.+2      	; 0x11890 <gpib_write_str+0x3a>
   1188e:	4f c0       	rjmp	.+158    	; 0x1192e <gpib_write_str+0xd8>
            printf("gpib_write_str: size = 0\n");
   11890:	81 e3       	ldi	r24, 0x31	; 49
   11892:	9f e0       	ldi	r25, 0x0F	; 15
   11894:	a0 e0       	ldi	r26, 0x00	; 0
   11896:	ed b7       	in	r30, 0x3d	; 61
   11898:	fe b7       	in	r31, 0x3e	; 62
   1189a:	81 83       	std	Z+1, r24	; 0x01
   1189c:	92 83       	std	Z+2, r25	; 0x02
   1189e:	a3 83       	std	Z+3, r26	; 0x03
   118a0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   118a4:	44 c0       	rjmp	.+136    	; 0x1192e <gpib_write_str+0xd8>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   118a6:	21 96       	adiw	r28, 0x01	; 1
   118a8:	f6 01       	movw	r30, r12
   118aa:	81 91       	ld	r24, Z+
   118ac:	6f 01       	movw	r12, r30
   118ae:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   118b0:	f7 01       	movw	r30, r14
   118b2:	20 81       	ld	r18, Z
   118b4:	31 81       	ldd	r19, Z+1	; 0x01
   118b6:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   118b8:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   118ba:	30 fd       	sbrc	r19, 0
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   118bc:	19 c0       	rjmp	.+50     	; 0x118f0 <gpib_write_str+0x9a>
        *status |= (val & ERROR_MASK);
   118be:	16 db       	rcall	.-2516   	; 0x10eec <gpib_write_byte>
   118c0:	5c 01       	movw	r10, r24
   118c2:	aa 24       	eor	r10, r10
   118c4:	f0 ed       	ldi	r31, 0xD0	; 208
   118c6:	bf 22       	and	r11, r31
   118c8:	f7 01       	movw	r30, r14
   118ca:	20 81       	ld	r18, Z
   118cc:	31 81       	ldd	r19, Z+1	; 0x01
   118ce:	2a 29       	or	r18, r10
   118d0:	3b 29       	or	r19, r11
   118d2:	31 83       	std	Z+1, r19	; 0x01

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   118d4:	20 83       	st	Z, r18
   118d6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   118da:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   118de:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   118e0:	14 df       	rcall	.-472    	; 0x1170a <gpib_decode>
   118e2:	a1 14       	cp	r10, r1
   118e4:	b1 04       	cpc	r11, r1
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   118e6:	49 f4       	brne	.+18     	; 0x118fa <gpib_write_str+0xa4>
   118e8:	c0 17       	cp	r28, r16
   118ea:	d1 07       	cpc	r29, r17
   118ec:	e4 f2       	brlt	.-72     	; 0x118a6 <gpib_write_str+0x50>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   118ee:	05 c0       	rjmp	.+10     	; 0x118fa <gpib_write_str+0xa4>
   118f0:	0c 17       	cp	r16, r28
   118f2:	1d 07       	cpc	r17, r29
            ch |= EOI_FLAG;
   118f4:	21 f7       	brne	.-56     	; 0x118be <gpib_write_str+0x68>
   118f6:	91 60       	ori	r25, 0x01	; 1
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   118f8:	e2 cf       	rjmp	.-60     	; 0x118be <gpib_write_str+0x68>
   118fa:	c0 17       	cp	r28, r16
   118fc:	d1 07       	cpc	r29, r17
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   118fe:	c9 f0       	breq	.+50     	; 0x11932 <gpib_write_str+0xdc>
   11900:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11904:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11908:	81 72       	andi	r24, 0x21	; 33
   1190a:	91 70       	andi	r25, 0x01	; 1
   1190c:	89 2b       	or	r24, r25
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   1190e:	89 f0       	breq	.+34     	; 0x11932 <gpib_write_str+0xdc>
   11910:	ed b7       	in	r30, 0x3d	; 61
   11912:	fe b7       	in	r31, 0x3e	; 62
   11914:	17 83       	std	Z+7, r17	; 0x07
   11916:	06 83       	std	Z+6, r16	; 0x06
   11918:	d5 83       	std	Z+5, r29	; 0x05
   1191a:	c4 83       	std	Z+4, r28	; 0x04
   1191c:	89 e0       	ldi	r24, 0x09	; 9
   1191e:	9f e0       	ldi	r25, 0x0F	; 15
   11920:	a0 e0       	ldi	r26, 0x00	; 0
   11922:	81 83       	std	Z+1, r24	; 0x01
   11924:	92 83       	std	Z+2, r25	; 0x02
   11926:	a3 83       	std	Z+3, r26	; 0x03
   11928:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   1192c:	02 c0       	rjmp	.+4      	; 0x11932 <gpib_write_str+0xdc>
   1192e:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   11930:	d0 e0       	ldi	r29, 0x00	; 0
   11932:	ce 01       	movw	r24, r28
   11934:	cd b7       	in	r28, 0x3d	; 61
   11936:	de b7       	in	r29, 0x3e	; 62
   11938:	27 96       	adiw	r28, 0x07	; 7
   1193a:	ea e0       	ldi	r30, 0x0A	; 10
   1193c:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__epilogue_restores__+0x10>

00011940 <gpib_file_init>:
   11940:	ad b7       	in	r26, 0x3d	; 61
   11942:	be b7       	in	r27, 0x3e	; 62
   11944:	17 97       	sbiw	r26, 0x07	; 7
   11946:	0f b6       	in	r0, 0x3f	; 63
   11948:	f8 94       	cli
   1194a:	be bf       	out	0x3e, r27	; 62
   1194c:	0f be       	out	0x3f, r0	; 63
   1194e:	ad bf       	out	0x3d, r26	; 61
   11950:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   11954:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   11958:	88 eb       	ldi	r24, 0xB8	; 184
   1195a:	91 e0       	ldi	r25, 0x01	; 1
   1195c:	0e 94 9e 9b 	call	0x1373c	; 0x1373c <Read_Config>
   11960:	18 16       	cp	r1, r24
   11962:	19 06       	cpc	r1, r25
   11964:	8c f4       	brge	.+34     	; 0x11988 <gpib_file_init+0x48>
   11966:	ed b7       	in	r30, 0x3d	; 61
   11968:	fe b7       	in	r31, 0x3e	; 62
   1196a:	97 83       	std	Z+7, r25	; 0x07
   1196c:	86 83       	std	Z+6, r24	; 0x06
   1196e:	88 eb       	ldi	r24, 0xB8	; 184
   11970:	91 e0       	ldi	r25, 0x01	; 1
   11972:	95 83       	std	Z+5, r25	; 0x05
   11974:	84 83       	std	Z+4, r24	; 0x04
   11976:	86 e8       	ldi	r24, 0x86	; 134
   11978:	94 e1       	ldi	r25, 0x14	; 20
   1197a:	a0 e0       	ldi	r26, 0x00	; 0
   1197c:	81 83       	std	Z+1, r24	; 0x01
   1197e:	92 83       	std	Z+2, r25	; 0x02
   11980:	a3 83       	std	Z+3, r26	; 0x03
   11982:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   11986:	10 c0       	rjmp	.+32     	; 0x119a8 <gpib_file_init+0x68>
   11988:	89 2b       	or	r24, r25
   1198a:	71 f0       	breq	.+28     	; 0x119a8 <gpib_file_init+0x68>
   1198c:	88 eb       	ldi	r24, 0xB8	; 184
   1198e:	91 e0       	ldi	r25, 0x01	; 1
   11990:	ed b7       	in	r30, 0x3d	; 61
   11992:	fe b7       	in	r31, 0x3e	; 62
   11994:	95 83       	std	Z+5, r25	; 0x05
   11996:	84 83       	std	Z+4, r24	; 0x04
   11998:	85 e7       	ldi	r24, 0x75	; 117
   1199a:	94 e1       	ldi	r25, 0x14	; 20
   1199c:	a0 e0       	ldi	r26, 0x00	; 0
   1199e:	81 83       	std	Z+1, r24	; 0x01
   119a0:	92 83       	std	Z+2, r25	; 0x02
   119a2:	a3 83       	std	Z+3, r26	; 0x03
   119a4:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   119a8:	0e 94 69 9a 	call	0x134d2	; 0x134d2 <set_Config_Defaults>
   119ac:	0e 94 8b 70 	call	0xe116	; 0xe116 <mmc_wp_status>
   119b0:	89 2b       	or	r24, r25
   119b2:	51 f0       	breq	.+20     	; 0x119c8 <gpib_file_init+0x88>
   119b4:	8c e5       	ldi	r24, 0x5C	; 92
   119b6:	94 e1       	ldi	r25, 0x14	; 20
   119b8:	a0 e0       	ldi	r26, 0x00	; 0
   119ba:	ed b7       	in	r30, 0x3d	; 61
   119bc:	fe b7       	in	r31, 0x3e	; 62
   119be:	81 83       	std	Z+1, r24	; 0x01
   119c0:	92 83       	std	Z+2, r25	; 0x02
   119c2:	a3 83       	std	Z+3, r26	; 0x03
   119c4:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   119c8:	ad b7       	in	r26, 0x3d	; 61
   119ca:	be b7       	in	r27, 0x3e	; 62
   119cc:	17 96       	adiw	r26, 0x07	; 7
   119ce:	0f b6       	in	r0, 0x3f	; 63
   119d0:	f8 94       	cli
   119d2:	be bf       	out	0x3e, r27	; 62
   119d4:	0f be       	out	0x3f, r0	; 63
   119d6:	ad bf       	out	0x3d, r26	; 61
   119d8:	08 95       	ret

000119da <SS80_is_MLA>:
   119da:	40 e2       	ldi	r20, 0x20	; 32
   119dc:	50 e0       	ldi	r21, 0x00	; 0
   119de:	bc 01       	movw	r22, r24
   119e0:	83 e0       	ldi	r24, 0x03	; 3
   119e2:	90 e0       	ldi	r25, 0x00	; 0
   119e4:	0e 94 cf 97 	call	0x12f9e	; 0x12f9e <find_device>
   119e8:	8f 3f       	cpi	r24, 0xFF	; 255
   119ea:	2f ef       	ldi	r18, 0xFF	; 255
   119ec:	92 07       	cpc	r25, r18
   119ee:	19 f0       	breq	.+6      	; 0x119f6 <SS80_is_MLA+0x1c>
   119f0:	0c 94 f9 97 	jmp	0x12ff2	; 0x12ff2 <set_active_device>
   119f4:	08 95       	ret
   119f6:	80 e0       	ldi	r24, 0x00	; 0
   119f8:	90 e0       	ldi	r25, 0x00	; 0
   119fa:	08 95       	ret

000119fc <SS80_is_MTA>:
   119fc:	40 e4       	ldi	r20, 0x40	; 64
   119fe:	50 e0       	ldi	r21, 0x00	; 0
   11a00:	bc 01       	movw	r22, r24
   11a02:	83 e0       	ldi	r24, 0x03	; 3
   11a04:	90 e0       	ldi	r25, 0x00	; 0
   11a06:	0e 94 cf 97 	call	0x12f9e	; 0x12f9e <find_device>
   11a0a:	8f 3f       	cpi	r24, 0xFF	; 255
   11a0c:	2f ef       	ldi	r18, 0xFF	; 255
   11a0e:	92 07       	cpc	r25, r18
   11a10:	19 f0       	breq	.+6      	; 0x11a18 <SS80_is_MTA+0x1c>
   11a12:	0c 94 f9 97 	jmp	0x12ff2	; 0x12ff2 <set_active_device>
   11a16:	08 95       	ret
   11a18:	80 e0       	ldi	r24, 0x00	; 0
   11a1a:	90 e0       	ldi	r25, 0x00	; 0
   11a1c:	08 95       	ret

00011a1e <SS80_is_MSA>:
   11a1e:	40 e6       	ldi	r20, 0x60	; 96
   11a20:	50 e0       	ldi	r21, 0x00	; 0
   11a22:	bc 01       	movw	r22, r24
   11a24:	83 e0       	ldi	r24, 0x03	; 3
   11a26:	90 e0       	ldi	r25, 0x00	; 0
   11a28:	0e 94 cf 97 	call	0x12f9e	; 0x12f9e <find_device>
   11a2c:	8f 3f       	cpi	r24, 0xFF	; 255
   11a2e:	2f ef       	ldi	r18, 0xFF	; 255
   11a30:	92 07       	cpc	r25, r18
   11a32:	19 f0       	breq	.+6      	; 0x11a3a <SS80_is_MSA+0x1c>
   11a34:	0c 94 f9 97 	jmp	0x12ff2	; 0x12ff2 <set_active_device>
   11a38:	08 95       	ret
   11a3a:	80 e0       	ldi	r24, 0x00	; 0
   11a3c:	90 e0       	ldi	r25, 0x00	; 0
   11a3e:	08 95       	ret

00011a40 <AMIGO_is_MLA>:
   11a40:	40 e2       	ldi	r20, 0x20	; 32
   11a42:	50 e0       	ldi	r21, 0x00	; 0
   11a44:	bc 01       	movw	r22, r24
   11a46:	81 e0       	ldi	r24, 0x01	; 1
   11a48:	90 e0       	ldi	r25, 0x00	; 0
   11a4a:	0e 94 cf 97 	call	0x12f9e	; 0x12f9e <find_device>
   11a4e:	8f 3f       	cpi	r24, 0xFF	; 255
   11a50:	2f ef       	ldi	r18, 0xFF	; 255
   11a52:	92 07       	cpc	r25, r18
   11a54:	19 f0       	breq	.+6      	; 0x11a5c <AMIGO_is_MLA+0x1c>
   11a56:	0c 94 f9 97 	jmp	0x12ff2	; 0x12ff2 <set_active_device>
   11a5a:	08 95       	ret
   11a5c:	80 e0       	ldi	r24, 0x00	; 0
   11a5e:	90 e0       	ldi	r25, 0x00	; 0
   11a60:	08 95       	ret

00011a62 <AMIGO_is_MTA>:
   11a62:	40 e4       	ldi	r20, 0x40	; 64
   11a64:	50 e0       	ldi	r21, 0x00	; 0
   11a66:	bc 01       	movw	r22, r24
   11a68:	81 e0       	ldi	r24, 0x01	; 1
   11a6a:	90 e0       	ldi	r25, 0x00	; 0
   11a6c:	0e 94 cf 97 	call	0x12f9e	; 0x12f9e <find_device>
   11a70:	8f 3f       	cpi	r24, 0xFF	; 255
   11a72:	2f ef       	ldi	r18, 0xFF	; 255
   11a74:	92 07       	cpc	r25, r18
   11a76:	19 f0       	breq	.+6      	; 0x11a7e <AMIGO_is_MTA+0x1c>
   11a78:	0c 94 f9 97 	jmp	0x12ff2	; 0x12ff2 <set_active_device>
   11a7c:	08 95       	ret
   11a7e:	80 e0       	ldi	r24, 0x00	; 0
   11a80:	90 e0       	ldi	r25, 0x00	; 0
   11a82:	08 95       	ret

00011a84 <AMIGO_is_MSA>:
   11a84:	40 e6       	ldi	r20, 0x60	; 96
   11a86:	50 e0       	ldi	r21, 0x00	; 0
   11a88:	bc 01       	movw	r22, r24
   11a8a:	81 e0       	ldi	r24, 0x01	; 1
   11a8c:	90 e0       	ldi	r25, 0x00	; 0
   11a8e:	0e 94 cf 97 	call	0x12f9e	; 0x12f9e <find_device>
   11a92:	8f 3f       	cpi	r24, 0xFF	; 255
   11a94:	2f ef       	ldi	r18, 0xFF	; 255
   11a96:	92 07       	cpc	r25, r18
   11a98:	19 f0       	breq	.+6      	; 0x11aa0 <AMIGO_is_MSA+0x1c>
   11a9a:	0c 94 f9 97 	jmp	0x12ff2	; 0x12ff2 <set_active_device>
   11a9e:	08 95       	ret
   11aa0:	80 e0       	ldi	r24, 0x00	; 0
   11aa2:	90 e0       	ldi	r25, 0x00	; 0
   11aa4:	08 95       	ret

00011aa6 <PRINTER_is_MLA>:
   11aa6:	40 e2       	ldi	r20, 0x20	; 32
   11aa8:	50 e0       	ldi	r21, 0x00	; 0
   11aaa:	bc 01       	movw	r22, r24
   11aac:	84 e0       	ldi	r24, 0x04	; 4
   11aae:	90 e0       	ldi	r25, 0x00	; 0
   11ab0:	0e 94 cf 97 	call	0x12f9e	; 0x12f9e <find_device>
   11ab4:	8f 3f       	cpi	r24, 0xFF	; 255
   11ab6:	2f ef       	ldi	r18, 0xFF	; 255
   11ab8:	92 07       	cpc	r25, r18
   11aba:	19 f0       	breq	.+6      	; 0x11ac2 <PRINTER_is_MLA+0x1c>
   11abc:	0c 94 f9 97 	jmp	0x12ff2	; 0x12ff2 <set_active_device>
   11ac0:	08 95       	ret
   11ac2:	80 e0       	ldi	r24, 0x00	; 0
   11ac4:	90 e0       	ldi	r25, 0x00	; 0
   11ac6:	08 95       	ret

00011ac8 <PRINTER_is_MTA>:
   11ac8:	40 e4       	ldi	r20, 0x40	; 64
   11aca:	50 e0       	ldi	r21, 0x00	; 0
   11acc:	bc 01       	movw	r22, r24
   11ace:	84 e0       	ldi	r24, 0x04	; 4
   11ad0:	90 e0       	ldi	r25, 0x00	; 0
   11ad2:	0e 94 cf 97 	call	0x12f9e	; 0x12f9e <find_device>
   11ad6:	8f 3f       	cpi	r24, 0xFF	; 255
   11ad8:	2f ef       	ldi	r18, 0xFF	; 255
   11ada:	92 07       	cpc	r25, r18
   11adc:	19 f0       	breq	.+6      	; 0x11ae4 <PRINTER_is_MTA+0x1c>
   11ade:	0c 94 f9 97 	jmp	0x12ff2	; 0x12ff2 <set_active_device>
   11ae2:	08 95       	ret
   11ae4:	80 e0       	ldi	r24, 0x00	; 0
   11ae6:	90 e0       	ldi	r25, 0x00	; 0
   11ae8:	08 95       	ret

00011aea <gpib_init_devices>:
   11aea:	cb d8       	rcall	.-3690   	; 0x10c82 <gpib_bus_init>
   11aec:	f7 d8       	rcall	.-3602   	; 0x10cdc <gpib_state_init>
   11aee:	0e 94 ac ab 	call	0x15758	; 0x15758 <SS80_init>
   11af2:	0e 94 3b b1 	call	0x16276	; 0x16276 <amigo_init>
   11af6:	0c 94 70 bc 	jmp	0x178e0	; 0x178e0 <printer_close>
   11afa:	08 95       	ret

00011afc <gpib_trace_task>:
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   11afc:	0f 93       	push	r16
   11afe:	1f 93       	push	r17
   11b00:	cf 93       	push	r28
   11b02:	df 93       	push	r29
   11b04:	00 d0       	rcall	.+0      	; 0x11b06 <gpib_trace_task+0xa>
   11b06:	00 d0       	rcall	.+0      	; 0x11b08 <gpib_trace_task+0xc>
   11b08:	1f 92       	push	r1
   11b0a:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   11b0c:	00 97       	sbiw	r24, 0x00	; 0
   11b0e:	09 f4       	brne	.+2      	; 0x11b12 <gpib_trace_task+0x16>
   11b10:	44 c0       	rjmp	.+136    	; 0x11b9a <gpib_trace_task+0x9e>
   11b12:	fc 01       	movw	r30, r24
   11b14:	20 81       	ld	r18, Z
   11b16:	22 23       	and	r18, r18
   11b18:	09 f4       	brne	.+2      	; 0x11b1c <gpib_trace_task+0x20>
   11b1a:	3f c0       	rjmp	.+126    	; 0x11b9a <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   11b1c:	0e 94 67 32 	call	0x64ce	; 0x64ce <skipspaces>
   11b20:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   11b22:	ed b7       	in	r30, 0x3d	; 61
   11b24:	fe b7       	in	r31, 0x3e	; 62
   11b26:	95 83       	std	Z+5, r25	; 0x05
   11b28:	84 83       	std	Z+4, r24	; 0x04
   11b2a:	82 e4       	ldi	r24, 0x42	; 66
   11b2c:	94 e1       	ldi	r25, 0x14	; 20
   11b2e:	a0 e0       	ldi	r26, 0x00	; 0
   11b30:	81 83       	std	Z+1, r24	; 0x01
   11b32:	92 83       	std	Z+2, r25	; 0x02
   11b34:	a3 83       	std	Z+3, r26	; 0x03
   11b36:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        if(detail)
   11b3a:	20 97       	sbiw	r28, 0x00	; 0
   11b3c:	51 f0       	breq	.+20     	; 0x11b52 <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   11b3e:	87 e1       	ldi	r24, 0x17	; 23
   11b40:	94 e1       	ldi	r25, 0x14	; 20
   11b42:	a0 e0       	ldi	r26, 0x00	; 0
   11b44:	ed b7       	in	r30, 0x3d	; 61
   11b46:	fe b7       	in	r31, 0x3e	; 62
   11b48:	81 83       	std	Z+1, r24	; 0x01
   11b4a:	92 83       	std	Z+2, r25	; 0x02
   11b4c:	a3 83       	std	Z+3, r26	; 0x03
   11b4e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        printf("Press ANY key to exit\n");
   11b52:	80 e0       	ldi	r24, 0x00	; 0
   11b54:	94 e1       	ldi	r25, 0x14	; 20
   11b56:	a0 e0       	ldi	r26, 0x00	; 0
   11b58:	ed b7       	in	r30, 0x3d	; 61
   11b5a:	fe b7       	in	r31, 0x3e	; 62
   11b5c:	81 83       	std	Z+1, r24	; 0x01
   11b5e:	92 83       	std	Z+2, r25	; 0x02
   11b60:	a3 83       	std	Z+3, r26	; 0x03
   11b62:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

        gpib_log_fp = fopen(name,"wb");
   11b66:	6b ef       	ldi	r22, 0xFB	; 251
   11b68:	78 e0       	ldi	r23, 0x08	; 8
   11b6a:	c8 01       	movw	r24, r16
   11b6c:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <fopen>
   11b70:	90 93 5f 19 	sts	0x195F, r25	; 0x80195f <gpib_log_fp+0x1>
   11b74:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <gpib_log_fp>
        if(gpib_log_fp == NULL)
   11b78:	89 2b       	or	r24, r25
   11b7a:	b9 f4       	brne	.+46     	; 0x11baa <gpib_trace_task+0xae>
        {
            perror("open failed");
   11b7c:	83 e9       	ldi	r24, 0x93	; 147
   11b7e:	9d e0       	ldi	r25, 0x0D	; 13
   11b80:	0e 94 f0 78 	call	0xf1e0	; 0xf1e0 <perror>
            printf("exiting...\n");
   11b84:	84 ef       	ldi	r24, 0xF4	; 244
   11b86:	93 e1       	ldi	r25, 0x13	; 19
   11b88:	a0 e0       	ldi	r26, 0x00	; 0
   11b8a:	ed b7       	in	r30, 0x3d	; 61
   11b8c:	fe b7       	in	r31, 0x3e	; 62
   11b8e:	81 83       	std	Z+1, r24	; 0x01
   11b90:	92 83       	std	Z+2, r25	; 0x02
   11b92:	a3 83       	std	Z+3, r26	; 0x03
   11b94:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            return;
   11b98:	3d c0       	rjmp	.+122    	; 0x11c14 <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   11b9a:	80 91 b4 1c 	lds	r24, 0x1CB4	; 0x801cb4 <__iob+0x2>
   11b9e:	90 91 b5 1c 	lds	r25, 0x1CB5	; 0x801cb5 <__iob+0x3>
   11ba2:	90 93 5f 19 	sts	0x195F, r25	; 0x80195f <gpib_log_fp+0x1>
   11ba6:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <gpib_log_fp>

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();

    gpib_decode_header(gpib_log_fp);
   11baa:	9f df       	rcall	.-194    	; 0x11aea <gpib_init_devices>
   11bac:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <gpib_log_fp>
   11bb0:	90 91 5f 19 	lds	r25, 0x195F	; 0x80195f <gpib_log_fp+0x1>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   11bb4:	2b db       	rcall	.-2474   	; 0x1120c <gpib_decode_header>
   11bb6:	80 e0       	ldi	r24, 0x00	; 0
   11bb8:	0e 94 45 2b 	call	0x568a	; 0x568a <uart_keyhit>
            break;

        ch = gpib_read_byte(detail);
   11bbc:	89 2b       	or	r24, r25
   11bbe:	31 f4       	brne	.+12     	; 0x11bcc <gpib_trace_task+0xd0>
        if(!detail)
   11bc0:	ce 01       	movw	r24, r28
   11bc2:	b8 dc       	rcall	.-1680   	; 0x11534 <gpib_read_byte>
            gpib_decode(ch);
   11bc4:	20 97       	sbiw	r28, 0x00	; 0
   11bc6:	b9 f7       	brne	.-18     	; 0x11bb6 <gpib_trace_task+0xba>
   11bc8:	a0 dd       	rcall	.-1216   	; 0x1170a <gpib_decode>
    }

    printf("Done\n");
   11bca:	f5 cf       	rjmp	.-22     	; 0x11bb6 <gpib_trace_task+0xba>
   11bcc:	8e ee       	ldi	r24, 0xEE	; 238
   11bce:	93 e1       	ldi	r25, 0x13	; 19
   11bd0:	a0 e0       	ldi	r26, 0x00	; 0
   11bd2:	ed b7       	in	r30, 0x3d	; 61
   11bd4:	fe b7       	in	r31, 0x3e	; 62
   11bd6:	81 83       	std	Z+1, r24	; 0x01
   11bd8:	92 83       	std	Z+2, r25	; 0x02
   11bda:	a3 83       	std	Z+3, r26	; 0x03
   11bdc:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    if(gpib_log_fp)
   11be0:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <gpib_log_fp>
   11be4:	90 91 5f 19 	lds	r25, 0x195F	; 0x80195f <gpib_log_fp+0x1>
   11be8:	00 97       	sbiw	r24, 0x00	; 0
    {
        fclose(gpib_log_fp);
   11bea:	a1 f0       	breq	.+40     	; 0x11c14 <gpib_trace_task+0x118>
   11bec:	0e 94 69 7d 	call	0xfad2	; 0xfad2 <fclose>
        printf("Capturing Closed\n");
   11bf0:	8c ed       	ldi	r24, 0xDC	; 220
   11bf2:	93 e1       	ldi	r25, 0x13	; 19
   11bf4:	a0 e0       	ldi	r26, 0x00	; 0
   11bf6:	ed b7       	in	r30, 0x3d	; 61
   11bf8:	fe b7       	in	r31, 0x3e	; 62
   11bfa:	81 83       	std	Z+1, r24	; 0x01
   11bfc:	92 83       	std	Z+2, r25	; 0x02
   11bfe:	a3 83       	std	Z+3, r26	; 0x03
   11c00:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        gpib_log_fp = stdout;
   11c04:	80 91 b4 1c 	lds	r24, 0x1CB4	; 0x801cb4 <__iob+0x2>
   11c08:	90 91 b5 1c 	lds	r25, 0x1CB5	; 0x801cb5 <__iob+0x3>
   11c0c:	90 93 5f 19 	sts	0x195F, r25	; 0x80195f <gpib_log_fp+0x1>
   11c10:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <gpib_log_fp>
    }
}
   11c14:	cd b7       	in	r28, 0x3d	; 61
   11c16:	de b7       	in	r29, 0x3e	; 62
   11c18:	25 96       	adiw	r28, 0x05	; 5
   11c1a:	e4 e0       	ldi	r30, 0x04	; 4
   11c1c:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

00011c20 <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   11c20:	ef 92       	push	r14
   11c22:	ff 92       	push	r15
   11c24:	0f 93       	push	r16
   11c26:	1f 93       	push	r17
   11c28:	cf 93       	push	r28
   11c2a:	df 93       	push	r29
   11c2c:	00 d0       	rcall	.+0      	; 0x11c2e <gpib_error_test+0xe>
   11c2e:	1f 92       	push	r1
   11c30:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11c32:	ec 01       	movw	r28, r24
   11c34:	cc 27       	eor	r28, r28
   11c36:	d0 7d       	andi	r29, 0xD0	; 208
   11c38:	20 97       	sbiw	r28, 0x00	; 0
   11c3a:	61 f0       	breq	.+24     	; 0x11c54 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11c3c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c40:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c44:	8d 72       	andi	r24, 0x2D	; 45
   11c46:	99 27       	eor	r25, r25
   11c48:	87 01       	movw	r16, r14
   11c4a:	00 27       	eor	r16, r16
   11c4c:	10 71       	andi	r17, 0x10	; 16
   11c4e:	89 2b       	or	r24, r25
   11c50:	59 f4       	brne	.+22     	; 0x11c68 <gpib_error_test+0x48>
   11c52:	17 c0       	rjmp	.+46     	; 0x11c82 <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11c54:	80 e0       	ldi	r24, 0x00	; 0
   11c56:	0e 94 45 2b 	call	0x568a	; 0x568a <uart_keyhit>
   11c5a:	89 2b       	or	r24, r25
   11c5c:	79 f7       	brne	.-34     	; 0x11c3c <gpib_error_test+0x1c>
   11c5e:	0e 94 99 6f 	call	0xdf32	; 0xdf32 <mmc_ins_status>
   11c62:	01 97       	sbiw	r24, 0x01	; 1
   11c64:	59 f7       	brne	.-42     	; 0x11c3c <gpib_error_test+0x1c>
   11c66:	62 c0       	rjmp	.+196    	; 0x11d2c <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   11c68:	01 15       	cp	r16, r1
   11c6a:	11 05       	cpc	r17, r1
   11c6c:	51 f0       	breq	.+20     	; 0x11c82 <gpib_error_test+0x62>
                printf("<IFC>\n");
   11c6e:	85 ed       	ldi	r24, 0xD5	; 213
   11c70:	93 e1       	ldi	r25, 0x13	; 19
   11c72:	a0 e0       	ldi	r26, 0x00	; 0
   11c74:	ed b7       	in	r30, 0x3d	; 61
   11c76:	fe b7       	in	r31, 0x3e	; 62
   11c78:	81 83       	std	Z+1, r24	; 0x01
   11c7a:	92 83       	std	Z+2, r25	; 0x02
   11c7c:	a3 83       	std	Z+3, r26	; 0x03
   11c7e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11c82:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c86:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c8a:	8d 72       	andi	r24, 0x2D	; 45
   11c8c:	99 27       	eor	r25, r25
   11c8e:	89 2b       	or	r24, r25
   11c90:	c1 f0       	breq	.+48     	; 0x11cc2 <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   11c92:	f6 fe       	sbrs	r15, 6
   11c94:	0a c0       	rjmp	.+20     	; 0x11caa <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   11c96:	8a ec       	ldi	r24, 0xCA	; 202
   11c98:	93 e1       	ldi	r25, 0x13	; 19
   11c9a:	a0 e0       	ldi	r26, 0x00	; 0
   11c9c:	ed b7       	in	r30, 0x3d	; 61
   11c9e:	fe b7       	in	r31, 0x3e	; 62
   11ca0:	81 83       	std	Z+1, r24	; 0x01
   11ca2:	92 83       	std	Z+2, r25	; 0x02
   11ca4:	a3 83       	std	Z+3, r26	; 0x03
   11ca6:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            if(val & BUS_ERROR_FLAG)
   11caa:	d7 ff       	sbrs	r29, 7
   11cac:	0a c0       	rjmp	.+20     	; 0x11cc2 <gpib_error_test+0xa2>
                printf("<BUS>\n");
   11cae:	83 ec       	ldi	r24, 0xC3	; 195
   11cb0:	93 e1       	ldi	r25, 0x13	; 19
   11cb2:	a0 e0       	ldi	r26, 0x00	; 0
   11cb4:	ed b7       	in	r30, 0x3d	; 61
   11cb6:	fe b7       	in	r31, 0x3e	; 62
   11cb8:	81 83       	std	Z+1, r24	; 0x01
   11cba:	92 83       	std	Z+2, r25	; 0x02
   11cbc:	a3 83       	std	Z+3, r26	; 0x03
   11cbe:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        }

        if(uart_keyhit(0))
   11cc2:	80 e0       	ldi	r24, 0x00	; 0
   11cc4:	0e 94 45 2b 	call	0x568a	; 0x568a <uart_keyhit>
   11cc8:	89 2b       	or	r24, r25
   11cca:	51 f0       	breq	.+20     	; 0x11ce0 <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   11ccc:	86 eb       	ldi	r24, 0xB6	; 182
   11cce:	93 e1       	ldi	r25, 0x13	; 19
   11cd0:	a0 e0       	ldi	r26, 0x00	; 0
   11cd2:	ed b7       	in	r30, 0x3d	; 61
   11cd4:	fe b7       	in	r31, 0x3e	; 62
   11cd6:	81 83       	std	Z+1, r24	; 0x01
   11cd8:	92 83       	std	Z+2, r25	; 0x02
   11cda:	a3 83       	std	Z+3, r26	; 0x03
   11cdc:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

        if( mmc_ins_status() != 1 )
   11ce0:	0e 94 99 6f 	call	0xdf32	; 0xdf32 <mmc_ins_status>
   11ce4:	01 97       	sbiw	r24, 0x01	; 1
   11ce6:	51 f0       	breq	.+20     	; 0x11cfc <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   11ce8:	85 ea       	ldi	r24, 0xA5	; 165
   11cea:	93 e1       	ldi	r25, 0x13	; 19
   11cec:	a0 e0       	ldi	r26, 0x00	; 0
   11cee:	ed b7       	in	r30, 0x3d	; 61
   11cf0:	fe b7       	in	r31, 0x3e	; 62
   11cf2:	81 83       	std	Z+1, r24	; 0x01
   11cf4:	92 83       	std	Z+2, r25	; 0x02
   11cf6:	a3 83       	std	Z+3, r26	; 0x03
   11cf8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

        if(val & IFC_FLAG)
   11cfc:	01 15       	cp	r16, r1
   11cfe:	11 05       	cpc	r17, r1
        {
            gpib_init_devices();
   11d00:	09 f0       	breq	.+2      	; 0x11d04 <gpib_error_test+0xe4>
        }

        if(uart_keyhit(0))
   11d02:	f3 de       	rcall	.-538    	; 0x11aea <gpib_init_devices>
   11d04:	80 e0       	ldi	r24, 0x00	; 0
   11d06:	0e 94 45 2b 	call	0x568a	; 0x568a <uart_keyhit>
        {
            gpib_init_devices();
   11d0a:	89 2b       	or	r24, r25
   11d0c:	11 f0       	breq	.+4      	; 0x11d12 <gpib_error_test+0xf2>
   11d0e:	ed de       	rcall	.-550    	; 0x11aea <gpib_init_devices>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   11d10:	0b c0       	rjmp	.+22     	; 0x11d28 <gpib_error_test+0x108>
   11d12:	0e 94 99 6f 	call	0xdf32	; 0xdf32 <mmc_ins_status>
   11d16:	01 97       	sbiw	r24, 0x01	; 1
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   11d18:	39 f4       	brne	.+14     	; 0x11d28 <gpib_error_test+0x108>
   11d1a:	01 15       	cp	r16, r1
   11d1c:	11 05       	cpc	r17, r1
        {
            while(GPIB_IO_RD(IFC) == 0)
   11d1e:	31 f0       	breq	.+12     	; 0x11d2c <gpib_error_test+0x10c>
   11d20:	54 98       	cbi	0x0a, 4	; 10
   11d22:	4c 9b       	sbis	0x09, 4	; 9
   11d24:	fd cf       	rjmp	.-6      	; 0x11d20 <gpib_error_test+0x100>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   11d26:	02 c0       	rjmp	.+4      	; 0x11d2c <gpib_error_test+0x10c>
   11d28:	c1 e0       	ldi	r28, 0x01	; 1
                ;
        }
        return(val);
    }
    return(0);
}
   11d2a:	d0 e0       	ldi	r29, 0x00	; 0
   11d2c:	ce 01       	movw	r24, r28
   11d2e:	cd b7       	in	r28, 0x3d	; 61
   11d30:	de b7       	in	r29, 0x3e	; 62
   11d32:	23 96       	adiw	r28, 0x03	; 3
   11d34:	e6 e0       	ldi	r30, 0x06	; 6
   11d36:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

00011d3a <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   11d3a:	1f 93       	push	r17
   11d3c:	cf 93       	push	r28
   11d3e:	df 93       	push	r29
   11d40:	ec 01       	movw	r28, r24
   11d42:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   11d44:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   11d48:	8f 35       	cpi	r24, 0x5F	; 95
   11d4a:	91 f0       	breq	.+36     	; 0x11d70 <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   11d4c:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   11d50:	90 e0       	ldi	r25, 0x00	; 0
   11d52:	76 de       	rcall	.-788    	; 0x11a40 <AMIGO_is_MLA>
   11d54:	89 2b       	or	r24, r25
   11d56:	c9 f4       	brne	.+50     	; 0x11d8a <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   11d58:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   11d5c:	90 e0       	ldi	r25, 0x00	; 0
   11d5e:	3d de       	rcall	.-902    	; 0x119da <SS80_is_MLA>
   11d60:	89 2b       	or	r24, r25
   11d62:	11 f5       	brne	.+68     	; 0x11da8 <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11d64:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   11d68:	90 e0       	ldi	r25, 0x00	; 0
   11d6a:	9d de       	rcall	.-710    	; 0x11aa6 <PRINTER_is_MLA>
   11d6c:	89 2b       	or	r24, r25
   11d6e:	59 f5       	brne	.+86     	; 0x11dc6 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   11d70:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   11d74:	8f 33       	cpi	r24, 0x3F	; 63
   11d76:	19 f4       	brne	.+6      	; 0x11d7e <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11d78:	80 e0       	ldi	r24, 0x00	; 0
   11d7a:	90 e0       	ldi	r25, 0x00	; 0

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   11d7c:	2e c0       	rjmp	.+92     	; 0x11dda <GPIB_COMMANDS+0xa0>
   11d7e:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   11d82:	90 e0       	ldi	r25, 0x00	; 0
   11d84:	6e de       	rcall	.-804    	; 0x11a62 <AMIGO_is_MTA>
        {
            if(unread)
   11d86:	89 2b       	or	r24, r25
   11d88:	49 f0       	breq	.+18     	; 0x11d9c <GPIB_COMMANDS+0x62>
                gpib_unread(val);
   11d8a:	11 23       	and	r17, r17
   11d8c:	11 f0       	breq	.+4      	; 0x11d92 <GPIB_COMMANDS+0x58>
   11d8e:	ce 01       	movw	r24, r28
            status = AMIGO_COMMANDS(secondary);
   11d90:	61 d8       	rcall	.-3902   	; 0x10e54 <gpib_unread>
   11d92:	80 91 e2 1e 	lds	r24, 0x1EE2	; 0x801ee2 <secondary>
   11d96:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <AMIGO_COMMANDS>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   11d9a:	1d c0       	rjmp	.+58     	; 0x11dd6 <GPIB_COMMANDS+0x9c>
   11d9c:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   11da0:	90 e0       	ldi	r25, 0x00	; 0
   11da2:	2c de       	rcall	.-936    	; 0x119fc <SS80_is_MTA>
        {
            if(unread)
   11da4:	89 2b       	or	r24, r25
   11da6:	49 f0       	breq	.+18     	; 0x11dba <GPIB_COMMANDS+0x80>
                gpib_unread(val);
   11da8:	11 23       	and	r17, r17
   11daa:	11 f0       	breq	.+4      	; 0x11db0 <GPIB_COMMANDS+0x76>
   11dac:	ce 01       	movw	r24, r28
            status = SS80_COMMANDS(secondary);
   11dae:	52 d8       	rcall	.-3932   	; 0x10e54 <gpib_unread>
   11db0:	80 91 e2 1e 	lds	r24, 0x1EE2	; 0x801ee2 <secondary>
   11db4:	0e 94 87 af 	call	0x15f0e	; 0x15f0e <SS80_COMMANDS>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11db8:	0e c0       	rjmp	.+28     	; 0x11dd6 <GPIB_COMMANDS+0x9c>
   11dba:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   11dbe:	90 e0       	ldi	r25, 0x00	; 0
   11dc0:	83 de       	rcall	.-762    	; 0x11ac8 <PRINTER_is_MTA>
        {
            if(unread)
   11dc2:	89 2b       	or	r24, r25
   11dc4:	c9 f2       	breq	.-78     	; 0x11d78 <GPIB_COMMANDS+0x3e>
                gpib_unread(val);
   11dc6:	11 23       	and	r17, r17
   11dc8:	11 f0       	breq	.+4      	; 0x11dce <GPIB_COMMANDS+0x94>
   11dca:	ce 01       	movw	r24, r28
            status = PRINTER_COMMANDS(secondary);
   11dcc:	43 d8       	rcall	.-3962   	; 0x10e54 <gpib_unread>
   11dce:	80 91 e2 1e 	lds	r24, 0x1EE2	; 0x801ee2 <secondary>
   11dd2:	0e 94 e4 bd 	call	0x17bc8	; 0x17bc8 <PRINTER_COMMANDS>
            secondary = 0;
   11dd6:	10 92 e2 1e 	sts	0x1EE2, r1	; 0x801ee2 <secondary>
            return(status);
        }
    }
    return(0);
}
   11dda:	df 91       	pop	r29
   11ddc:	cf 91       	pop	r28
   11dde:	1f 91       	pop	r17
   11de0:	08 95       	ret

00011de2 <Send_Identify>:
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11de2:	cf 92       	push	r12
   11de4:	df 92       	push	r13
   11de6:	ff 92       	push	r15
   11de8:	0f 93       	push	r16
   11dea:	1f 93       	push	r17
   11dec:	cf 93       	push	r28
   11dee:	df 93       	push	r29
   11df0:	cd b7       	in	r28, 0x3d	; 61
   11df2:	de b7       	in	r29, 0x3e	; 62
   11df4:	2b 97       	sbiw	r28, 0x0b	; 11
   11df6:	0f b6       	in	r0, 0x3f	; 63
   11df8:	f8 94       	cli
   11dfa:	de bf       	out	0x3e, r29	; 62
   11dfc:	0f be       	out	0x3f, r0	; 63
   11dfe:	cd bf       	out	0x3d, r28	; 61
   11e00:	f8 2e       	mov	r15, r24
   11e02:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   11e04:	80 e0       	ldi	r24, 0x00	; 0
   11e06:	91 e0       	ldi	r25, 0x01	; 1
   11e08:	9b 87       	std	Y+11, r25	; 0x0b
   11e0a:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   11e0c:	8b 01       	movw	r16, r22
   11e0e:	20 e0       	ldi	r18, 0x00	; 0
   11e10:	30 e0       	ldi	r19, 0x00	; 0
   11e12:	42 e0       	ldi	r20, 0x02	; 2
   11e14:	50 e0       	ldi	r21, 0x00	; 0
   11e16:	60 e0       	ldi	r22, 0x00	; 0
   11e18:	70 e0       	ldi	r23, 0x00	; 0
   11e1a:	ce 01       	movw	r24, r28
   11e1c:	08 96       	adiw	r24, 0x08	; 8
   11e1e:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   11e22:	ae 01       	movw	r20, r28
   11e24:	46 5f       	subi	r20, 0xF6	; 246
   11e26:	5f 4f       	sbci	r21, 0xFF	; 255
   11e28:	62 e0       	ldi	r22, 0x02	; 2
   11e2a:	70 e0       	ldi	r23, 0x00	; 0
   11e2c:	ce 01       	movw	r24, r28
   11e2e:	08 96       	adiw	r24, 0x08	; 8
   11e30:	12 dd       	rcall	.-1500   	; 0x11856 <gpib_write_str>
   11e32:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11e36:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e3a:	02 97       	sbiw	r24, 0x02	; 2
   11e3c:	79 f0       	breq	.+30     	; 0x11e5c <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e3e:	25 72       	andi	r18, 0x25	; 37
   11e40:	33 27       	eor	r19, r19
   11e42:	23 2b       	or	r18, r19
   11e44:	f9 f0       	breq	.+62     	; 0x11e84 <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   11e46:	ed b7       	in	r30, 0x3d	; 61
   11e48:	fe b7       	in	r31, 0x3e	; 62
   11e4a:	d7 82       	std	Z+7, r13	; 0x07
   11e4c:	c6 82       	std	Z+6, r12	; 0x06
   11e4e:	8f 2d       	mov	r24, r15
   11e50:	90 e0       	ldi	r25, 0x00	; 0
   11e52:	95 83       	std	Z+5, r25	; 0x05
   11e54:	84 83       	std	Z+4, r24	; 0x04
   11e56:	84 e8       	ldi	r24, 0x84	; 132
   11e58:	93 e1       	ldi	r25, 0x13	; 19
   11e5a:	0e c0       	rjmp	.+28     	; 0x11e78 <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e5c:	24 72       	andi	r18, 0x24	; 36
   11e5e:	33 27       	eor	r19, r19
   11e60:	23 2b       	or	r18, r19
   11e62:	81 f0       	breq	.+32     	; 0x11e84 <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11e64:	ed b7       	in	r30, 0x3d	; 61
   11e66:	fe b7       	in	r31, 0x3e	; 62
   11e68:	d7 82       	std	Z+7, r13	; 0x07
   11e6a:	c6 82       	std	Z+6, r12	; 0x06
   11e6c:	8f 2d       	mov	r24, r15
   11e6e:	90 e0       	ldi	r25, 0x00	; 0
   11e70:	95 83       	std	Z+5, r25	; 0x05
   11e72:	84 83       	std	Z+4, r24	; 0x04
   11e74:	8a e6       	ldi	r24, 0x6A	; 106
   11e76:	93 e1       	ldi	r25, 0x13	; 19
   11e78:	a0 e0       	ldi	r26, 0x00	; 0
   11e7a:	81 83       	std	Z+1, r24	; 0x01
   11e7c:	92 83       	std	Z+2, r25	; 0x02
   11e7e:	a3 83       	std	Z+3, r26	; 0x03
   11e80:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif
    return (status & ERROR_MASK);
   11e84:	8a 85       	ldd	r24, Y+10	; 0x0a
   11e86:	9b 85       	ldd	r25, Y+11	; 0x0b
   11e88:	88 27       	eor	r24, r24
   11e8a:	90 7d       	andi	r25, 0xD0	; 208
}
   11e8c:	2b 96       	adiw	r28, 0x0b	; 11
   11e8e:	0f b6       	in	r0, 0x3f	; 63
   11e90:	f8 94       	cli
   11e92:	de bf       	out	0x3e, r29	; 62
   11e94:	0f be       	out	0x3f, r0	; 63
   11e96:	cd bf       	out	0x3d, r28	; 61
   11e98:	df 91       	pop	r29
   11e9a:	cf 91       	pop	r28
   11e9c:	1f 91       	pop	r17
   11e9e:	0f 91       	pop	r16
   11ea0:	ff 90       	pop	r15
   11ea2:	df 90       	pop	r13
   11ea4:	cf 90       	pop	r12
   11ea6:	08 95       	ret

00011ea8 <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11ea8:	00 d0       	rcall	.+0      	; 0x11eaa <GPIB+0x2>
   11eaa:	00 d0       	rcall	.+0      	; 0x11eac <GPIB+0x4>
   11eac:	1f 92       	push	r1
   11eae:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11eb2:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   11eb6:	85 30       	cpi	r24, 0x05	; 5
   11eb8:	89 f4       	brne	.+34     	; 0x11edc <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11eba:	27 71       	andi	r18, 0x17	; 23
   11ebc:	33 27       	eor	r19, r19
   11ebe:	23 2b       	or	r18, r19
   11ec0:	51 f0       	breq	.+20     	; 0x11ed6 <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   11ec2:	82 e5       	ldi	r24, 0x52	; 82
   11ec4:	93 e1       	ldi	r25, 0x13	; 19
   11ec6:	a0 e0       	ldi	r26, 0x00	; 0
   11ec8:	ed b7       	in	r30, 0x3d	; 61
   11eca:	fe b7       	in	r31, 0x3e	; 62
   11ecc:	81 83       	std	Z+1, r24	; 0x01
   11ece:	92 83       	std	Z+2, r25	; 0x02
   11ed0:	a3 83       	std	Z+3, r26	; 0x03
   11ed2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        spoll = 0;
   11ed6:	10 92 de 1e 	sts	0x1EDE, r1	; 0x801ede <spoll>
   11eda:	a0 c0       	rjmp	.+320    	; 0x1201c <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   11edc:	85 31       	cpi	r24, 0x15	; 21
   11ede:	39 f4       	brne	.+14     	; 0x11eee <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11ee0:	27 71       	andi	r18, 0x17	; 23
   11ee2:	33 27       	eor	r19, r19
   11ee4:	23 2b       	or	r18, r19
   11ee6:	b9 f3       	breq	.-18     	; 0x11ed6 <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   11ee8:	8a e3       	ldi	r24, 0x3A	; 58
   11eea:	93 e1       	ldi	r25, 0x13	; 19
   11eec:	ec cf       	rjmp	.-40     	; 0x11ec6 <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   11eee:	88 31       	cpi	r24, 0x18	; 24
   11ef0:	d9 f4       	brne	.+54     	; 0x11f28 <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11ef2:	26 70       	andi	r18, 0x06	; 6
   11ef4:	33 27       	eor	r19, r19
   11ef6:	23 2b       	or	r18, r19
   11ef8:	51 f0       	breq	.+20     	; 0x11f0e <GPIB+0x66>
            printf("[SPE]\n");
   11efa:	83 e3       	ldi	r24, 0x33	; 51
   11efc:	93 e1       	ldi	r25, 0x13	; 19
   11efe:	a0 e0       	ldi	r26, 0x00	; 0
   11f00:	ed b7       	in	r30, 0x3d	; 61
   11f02:	fe b7       	in	r31, 0x3e	; 62
   11f04:	81 83       	std	Z+1, r24	; 0x01
   11f06:	92 83       	std	Z+2, r25	; 0x02
   11f08:	a3 83       	std	Z+3, r26	; 0x03
   11f0a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif
        spoll = 1;
   11f0e:	81 e0       	ldi	r24, 0x01	; 1
   11f10:	80 93 de 1e 	sts	0x1EDE, r24	; 0x801ede <spoll>
        if(SS80_is_MTA(talking))
   11f14:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   11f18:	90 e0       	ldi	r25, 0x00	; 0
   11f1a:	70 dd       	rcall	.-1312   	; 0x119fc <SS80_is_MTA>
   11f1c:	89 2b       	or	r24, r25
   11f1e:	09 f4       	brne	.+2      	; 0x11f22 <GPIB+0x7a>
   11f20:	7d c0       	rjmp	.+250    	; 0x1201c <GPIB+0x174>
        {
            return( SS80_Report() );
   11f22:	0e 94 40 ab 	call	0x15680	; 0x15680 <SS80_Report>
   11f26:	7c c0       	rjmp	.+248    	; 0x12020 <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   11f28:	89 31       	cpi	r24, 0x19	; 25
   11f2a:	39 f4       	brne	.+14     	; 0x11f3a <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11f2c:	26 70       	andi	r18, 0x06	; 6
   11f2e:	33 27       	eor	r19, r19
   11f30:	23 2b       	or	r18, r19
   11f32:	89 f2       	breq	.-94     	; 0x11ed6 <GPIB+0x2e>
            printf("[SPD]\n");
   11f34:	8c e2       	ldi	r24, 0x2C	; 44
   11f36:	93 e1       	ldi	r25, 0x13	; 19
   11f38:	c6 cf       	rjmp	.-116    	; 0x11ec6 <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   11f3a:	84 30       	cpi	r24, 0x04	; 4
   11f3c:	09 f0       	breq	.+2      	; 0x11f40 <GPIB+0x98>
   11f3e:	48 c0       	rjmp	.+144    	; 0x11fd0 <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11f40:	22 ff       	sbrs	r18, 2
   11f42:	0a c0       	rjmp	.+20     	; 0x11f58 <GPIB+0xb0>
            printf("[SDC]\n");
   11f44:	85 e2       	ldi	r24, 0x25	; 37
   11f46:	93 e1       	ldi	r25, 0x13	; 19
   11f48:	a0 e0       	ldi	r26, 0x00	; 0
   11f4a:	ed b7       	in	r30, 0x3d	; 61
   11f4c:	fe b7       	in	r31, 0x3e	; 62
   11f4e:	81 83       	std	Z+1, r24	; 0x01
   11f50:	92 83       	std	Z+2, r25	; 0x02
   11f52:	a3 83       	std	Z+3, r26	; 0x03
   11f54:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11f58:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   11f5c:	90 e0       	ldi	r25, 0x00	; 0
   11f5e:	3d dd       	rcall	.-1414   	; 0x119da <SS80_is_MLA>
   11f60:	89 2b       	or	r24, r25
   11f62:	d9 f0       	breq	.+54     	; 0x11f9a <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f64:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f68:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11f6c:	84 72       	andi	r24, 0x24	; 36
   11f6e:	99 27       	eor	r25, r25
   11f70:	89 2b       	or	r24, r25
   11f72:	51 f0       	breq	.+20     	; 0x11f88 <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11f74:	89 e1       	ldi	r24, 0x19	; 25
   11f76:	93 e1       	ldi	r25, 0x13	; 19
   11f78:	a0 e0       	ldi	r26, 0x00	; 0
   11f7a:	ed b7       	in	r30, 0x3d	; 61
   11f7c:	fe b7       	in	r31, 0x3e	; 62
   11f7e:	81 83       	std	Z+1, r24	; 0x01
   11f80:	92 83       	std	Z+2, r25	; 0x02
   11f82:	a3 83       	std	Z+3, r26	; 0x03
   11f84:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11f88:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   11f8c:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   11f90:	85 81       	ldd	r24, Z+5	; 0x05
   11f92:	90 e0       	ldi	r25, 0x00	; 0
   11f94:	0e 94 0c ac 	call	0x15818	; 0x15818 <SS80_Selected_Device_Clear>
   11f98:	43 c0       	rjmp	.+134    	; 0x12020 <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11f9a:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   11f9e:	90 e0       	ldi	r25, 0x00	; 0
   11fa0:	4f dd       	rcall	.-1378   	; 0x11a40 <AMIGO_is_MLA>
   11fa2:	89 2b       	or	r24, r25
   11fa4:	d9 f1       	breq	.+118    	; 0x1201c <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11fa6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11faa:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11fae:	84 72       	andi	r24, 0x24	; 36
   11fb0:	99 27       	eor	r25, r25
   11fb2:	89 2b       	or	r24, r25
   11fb4:	51 f0       	breq	.+20     	; 0x11fca <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   11fb6:	8c e0       	ldi	r24, 0x0C	; 12
   11fb8:	93 e1       	ldi	r25, 0x13	; 19
   11fba:	a0 e0       	ldi	r26, 0x00	; 0
   11fbc:	ed b7       	in	r30, 0x3d	; 61
   11fbe:	fe b7       	in	r31, 0x3e	; 62
   11fc0:	81 83       	std	Z+1, r24	; 0x01
   11fc2:	92 83       	std	Z+2, r25	; 0x02
   11fc4:	a3 83       	std	Z+3, r26	; 0x03
   11fc6:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif
            return( amigo_cmd_clear() );
   11fca:	0e 94 51 b6 	call	0x16ca2	; 0x16ca2 <amigo_cmd_clear>
   11fce:	28 c0       	rjmp	.+80     	; 0x12020 <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   11fd0:	84 31       	cpi	r24, 0x14	; 20
   11fd2:	99 f4       	brne	.+38     	; 0x11ffa <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11fd4:	22 ff       	sbrs	r18, 2
   11fd6:	0a c0       	rjmp	.+20     	; 0x11fec <GPIB+0x144>
            printf("[DCL]\n");
   11fd8:	85 e0       	ldi	r24, 0x05	; 5
   11fda:	93 e1       	ldi	r25, 0x13	; 19
   11fdc:	a0 e0       	ldi	r26, 0x00	; 0
   11fde:	ed b7       	in	r30, 0x3d	; 61
   11fe0:	fe b7       	in	r31, 0x3e	; 62
   11fe2:	81 83       	std	Z+1, r24	; 0x01
   11fe4:	92 83       	std	Z+2, r25	; 0x02
   11fe6:	a3 83       	std	Z+3, r26	; 0x03
   11fe8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif
        SS80_Universal_Device_Clear();
   11fec:	0e 94 fe ab 	call	0x157fc	; 0x157fc <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   11ff0:	0e 94 51 b6 	call	0x16ca2	; 0x16ca2 <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   11ff4:	0e 94 70 bc 	call	0x178e0	; 0x178e0 <printer_close>
   11ff8:	11 c0       	rjmp	.+34     	; 0x1201c <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11ffa:	25 71       	andi	r18, 0x15	; 21
   11ffc:	33 27       	eor	r19, r19
   11ffe:	23 2b       	or	r18, r19
   12000:	69 f0       	breq	.+26     	; 0x1201c <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   12002:	90 e0       	ldi	r25, 0x00	; 0
   12004:	ed b7       	in	r30, 0x3d	; 61
   12006:	fe b7       	in	r31, 0x3e	; 62
   12008:	95 83       	std	Z+5, r25	; 0x05
   1200a:	84 83       	std	Z+4, r24	; 0x04
   1200c:	84 ee       	ldi	r24, 0xE4	; 228
   1200e:	92 e1       	ldi	r25, 0x12	; 18
   12010:	a0 e0       	ldi	r26, 0x00	; 0
   12012:	81 83       	std	Z+1, r24	; 0x01
   12014:	92 83       	std	Z+2, r25	; 0x02
   12016:	a3 83       	std	Z+3, r26	; 0x03
   12018:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    return(0);
   1201c:	80 e0       	ldi	r24, 0x00	; 0
   1201e:	90 e0       	ldi	r25, 0x00	; 0
}
   12020:	0f 90       	pop	r0
   12022:	0f 90       	pop	r0
   12024:	0f 90       	pop	r0
   12026:	0f 90       	pop	r0
   12028:	0f 90       	pop	r0
   1202a:	08 95       	ret

0001202c <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   1202c:	cf 93       	push	r28
   1202e:	df 93       	push	r29
   12030:	00 d0       	rcall	.+0      	; 0x12032 <GPIB_TALK+0x6>
   12032:	00 d0       	rcall	.+0      	; 0x12034 <GPIB_TALK+0x8>
   12034:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   12036:	90 91 e1 1e 	lds	r25, 0x1EE1	; 0x801ee1 <talking>
   1203a:	90 93 e4 1e 	sts	0x1EE4, r25	; 0x801ee4 <talking_last>
    talking = ch;
   1203e:	80 93 e1 1e 	sts	0x1EE1, r24	; 0x801ee1 <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   12042:	8f 35       	cpi	r24, 0x5F	; 95
   12044:	79 f4       	brne	.+30     	; 0x12064 <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12046:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1204a:	82 ff       	sbrs	r24, 2
   1204c:	7f c0       	rjmp	.+254    	; 0x1214c <GPIB_TALK+0x120>
            printf("[UNT]\n");
   1204e:	81 e9       	ldi	r24, 0x91	; 145
   12050:	92 e1       	ldi	r25, 0x12	; 18
   12052:	a0 e0       	ldi	r26, 0x00	; 0
   12054:	ed b7       	in	r30, 0x3d	; 61
   12056:	fe b7       	in	r31, 0x3e	; 62
   12058:	81 83       	std	Z+1, r24	; 0x01
   1205a:	92 83       	std	Z+2, r25	; 0x02
   1205c:	a3 83       	std	Z+3, r26	; 0x03
   1205e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   12062:	74 c0       	rjmp	.+232    	; 0x1214c <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   12064:	c8 2f       	mov	r28, r24
   12066:	d0 e0       	ldi	r29, 0x00	; 0
   12068:	ce 01       	movw	r24, r28
   1206a:	c8 dc       	rcall	.-1648   	; 0x119fc <SS80_is_MTA>
   1206c:	89 2b       	or	r24, r25
   1206e:	e1 f0       	breq	.+56     	; 0x120a8 <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12070:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12074:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12078:	84 72       	andi	r24, 0x24	; 36
   1207a:	99 27       	eor	r25, r25
   1207c:	89 2b       	or	r24, r25
   1207e:	61 f0       	breq	.+24     	; 0x12098 <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   12080:	ed b7       	in	r30, 0x3d	; 61
   12082:	fe b7       	in	r31, 0x3e	; 62
   12084:	d5 83       	std	Z+5, r29	; 0x05
   12086:	c4 83       	std	Z+4, r28	; 0x04
   12088:	80 e8       	ldi	r24, 0x80	; 128
   1208a:	92 e1       	ldi	r25, 0x12	; 18
   1208c:	a0 e0       	ldi	r26, 0x00	; 0
   1208e:	81 83       	std	Z+1, r24	; 0x01
   12090:	92 83       	std	Z+2, r25	; 0x02
   12092:	a3 83       	std	Z+3, r26	; 0x03
   12094:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif

        if (spoll)
   12098:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <spoll>
   1209c:	88 23       	and	r24, r24
   1209e:	09 f4       	brne	.+2      	; 0x120a2 <GPIB_TALK+0x76>
   120a0:	55 c0       	rjmp	.+170    	; 0x1214c <GPIB_TALK+0x120>
        {
            SS80_Report();
   120a2:	0e 94 40 ab 	call	0x15680	; 0x15680 <SS80_Report>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   120a6:	52 c0       	rjmp	.+164    	; 0x1214c <GPIB_TALK+0x120>
   120a8:	ce 01       	movw	r24, r28
   120aa:	db dc       	rcall	.-1610   	; 0x11a62 <AMIGO_is_MTA>
   120ac:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   120ae:	81 f0       	breq	.+32     	; 0x120d0 <GPIB_TALK+0xa4>
   120b0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   120b4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   120b8:	84 72       	andi	r24, 0x24	; 36
   120ba:	99 27       	eor	r25, r25
   120bc:	89 2b       	or	r24, r25
   120be:	09 f4       	brne	.+2      	; 0x120c2 <GPIB_TALK+0x96>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   120c0:	45 c0       	rjmp	.+138    	; 0x1214c <GPIB_TALK+0x120>
   120c2:	ed b7       	in	r30, 0x3d	; 61
   120c4:	fe b7       	in	r31, 0x3e	; 62
   120c6:	d5 83       	std	Z+5, r29	; 0x05
   120c8:	c4 83       	std	Z+4, r28	; 0x04
   120ca:	8e e6       	ldi	r24, 0x6E	; 110
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   120cc:	92 e1       	ldi	r25, 0x12	; 18
   120ce:	38 c0       	rjmp	.+112    	; 0x12140 <GPIB_TALK+0x114>
   120d0:	ce 01       	movw	r24, r28
   120d2:	fa dc       	rcall	.-1548   	; 0x11ac8 <PRINTER_is_MTA>
   120d4:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   120d6:	79 f0       	breq	.+30     	; 0x120f6 <GPIB_TALK+0xca>
   120d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   120dc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   120e0:	84 72       	andi	r24, 0x24	; 36
   120e2:	99 27       	eor	r25, r25
   120e4:	89 2b       	or	r24, r25
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   120e6:	91 f1       	breq	.+100    	; 0x1214c <GPIB_TALK+0x120>
   120e8:	ed b7       	in	r30, 0x3d	; 61
   120ea:	fe b7       	in	r31, 0x3e	; 62
   120ec:	d5 83       	std	Z+5, r29	; 0x05
   120ee:	c4 83       	std	Z+4, r28	; 0x04
   120f0:	8a e5       	ldi	r24, 0x5A	; 90
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   120f2:	92 e1       	ldi	r25, 0x12	; 18
   120f4:	25 c0       	rjmp	.+74     	; 0x12140 <GPIB_TALK+0x114>
   120f6:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   120fa:	90 e0       	ldi	r25, 0x00	; 0
   120fc:	d4 dc       	rcall	.-1624   	; 0x11aa6 <PRINTER_is_MLA>
   120fe:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12102:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12106:	89 2b       	or	r24, r25
   12108:	99 f0       	breq	.+38     	; 0x12130 <GPIB_TALK+0x104>
   1210a:	24 72       	andi	r18, 0x24	; 36
   1210c:	33 27       	eor	r19, r19
            printf("[PRINTER OPEN]\n");
   1210e:	23 2b       	or	r18, r19
   12110:	51 f0       	breq	.+20     	; 0x12126 <GPIB_TALK+0xfa>
   12112:	8a e4       	ldi	r24, 0x4A	; 74
   12114:	92 e1       	ldi	r25, 0x12	; 18
   12116:	a0 e0       	ldi	r26, 0x00	; 0
   12118:	ed b7       	in	r30, 0x3d	; 61
   1211a:	fe b7       	in	r31, 0x3e	; 62
   1211c:	81 83       	std	Z+1, r24	; 0x01
   1211e:	92 83       	std	Z+2, r25	; 0x02
   12120:	a3 83       	std	Z+3, r26	; 0x03
        printer_open(NULL);
   12122:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   12126:	80 e0       	ldi	r24, 0x00	; 0
   12128:	90 e0       	ldi	r25, 0x00	; 0
   1212a:	0e 94 c8 bc 	call	0x17990	; 0x17990 <printer_open>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   1212e:	0e c0       	rjmp	.+28     	; 0x1214c <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   12130:	22 ff       	sbrs	r18, 2
   12132:	0c c0       	rjmp	.+24     	; 0x1214c <GPIB_TALK+0x120>
   12134:	ed b7       	in	r30, 0x3d	; 61
   12136:	fe b7       	in	r31, 0x3e	; 62
   12138:	d5 83       	std	Z+5, r29	; 0x05
   1213a:	c4 83       	std	Z+4, r28	; 0x04
   1213c:	8e e3       	ldi	r24, 0x3E	; 62
   1213e:	92 e1       	ldi	r25, 0x12	; 18
   12140:	a0 e0       	ldi	r26, 0x00	; 0
   12142:	81 83       	std	Z+1, r24	; 0x01
   12144:	92 83       	std	Z+2, r25	; 0x02
   12146:	a3 83       	std	Z+3, r26	; 0x03
#endif
    return(0);
}                                                 // Talk Address primary address group
   12148:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1214c:	80 e0       	ldi	r24, 0x00	; 0
   1214e:	90 e0       	ldi	r25, 0x00	; 0
   12150:	cd b7       	in	r28, 0x3d	; 61
   12152:	de b7       	in	r29, 0x3e	; 62
   12154:	25 96       	adiw	r28, 0x05	; 5
   12156:	e2 e0       	ldi	r30, 0x02	; 2
   12158:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

0001215c <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   1215c:	a9 e0       	ldi	r26, 0x09	; 9
   1215e:	b0 e0       	ldi	r27, 0x00	; 0
   12160:	e4 eb       	ldi	r30, 0xB4	; 180
   12162:	f0 e9       	ldi	r31, 0x90	; 144
   12164:	0c 94 de e2 	jmp	0x1c5bc	; 0x1c5bc <__prologue_saves__+0x1e>
   12168:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   1216a:	c8 2f       	mov	r28, r24
   1216c:	d0 e0       	ldi	r29, 0x00	; 0
   1216e:	ce 01       	movw	r24, r28
   12170:	56 dc       	rcall	.-1876   	; 0x11a1e <SS80_is_MSA>
   12172:	89 2b       	or	r24, r25
   12174:	09 f1       	breq	.+66     	; 0x121b8 <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12176:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1217a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1217e:	84 72       	andi	r24, 0x24	; 36
   12180:	99 27       	eor	r25, r25
   12182:	89 2b       	or	r24, r25
   12184:	61 f0       	breq	.+24     	; 0x1219e <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   12186:	ed b7       	in	r30, 0x3d	; 61
   12188:	fe b7       	in	r31, 0x3e	; 62
   1218a:	d5 83       	std	Z+5, r29	; 0x05
   1218c:	c4 83       	std	Z+4, r28	; 0x04
   1218e:	8d e2       	ldi	r24, 0x2D	; 45
   12190:	92 e1       	ldi	r25, 0x12	; 18
   12192:	a0 e0       	ldi	r26, 0x00	; 0
   12194:	81 83       	std	Z+1, r24	; 0x01
   12196:	92 83       	std	Z+2, r25	; 0x02
   12198:	a3 83       	std	Z+3, r26	; 0x03
   1219a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   1219e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   121a2:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   121a6:	81 81       	ldd	r24, Z+1	; 0x01
   121a8:	90 e0       	ldi	r25, 0x00	; 0
   121aa:	0e 94 d1 86 	call	0x10da2	; 0x10da2 <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   121ae:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   121b2:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   121b6:	25 c0       	rjmp	.+74     	; 0x12202 <GPIB_SECONDARY_ADDRESS+0xa6>
   121b8:	ce 01       	movw	r24, r28
   121ba:	64 dc       	rcall	.-1848   	; 0x11a84 <AMIGO_is_MSA>
   121bc:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   121c0:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   121c4:	89 2b       	or	r24, r25
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   121c6:	11 f1       	breq	.+68     	; 0x1220c <GPIB_SECONDARY_ADDRESS+0xb0>
   121c8:	c9 01       	movw	r24, r18
   121ca:	84 72       	andi	r24, 0x24	; 36
   121cc:	99 27       	eor	r25, r25
   121ce:	89 2b       	or	r24, r25
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   121d0:	61 f0       	breq	.+24     	; 0x121ea <GPIB_SECONDARY_ADDRESS+0x8e>
   121d2:	ed b7       	in	r30, 0x3d	; 61
   121d4:	fe b7       	in	r31, 0x3e	; 62
   121d6:	d5 83       	std	Z+5, r29	; 0x05
   121d8:	c4 83       	std	Z+4, r28	; 0x04
   121da:	8b e1       	ldi	r24, 0x1B	; 27
   121dc:	92 e1       	ldi	r25, 0x12	; 18
   121de:	a0 e0       	ldi	r26, 0x00	; 0
   121e0:	81 83       	std	Z+1, r24	; 0x01
   121e2:	92 83       	std	Z+2, r25	; 0x02
   121e4:	a3 83       	std	Z+3, r26	; 0x03
   121e6:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   121ea:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   121ee:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   121f2:	81 81       	ldd	r24, Z+1	; 0x01
   121f4:	90 e0       	ldi	r25, 0x00	; 0
   121f6:	0e 94 d1 86 	call	0x10da2	; 0x10da2 <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   121fa:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   121fe:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   12202:	64 81       	ldd	r22, Z+4	; 0x04
   12204:	75 81       	ldd	r23, Z+5	; 0x05
   12206:	81 2f       	mov	r24, r17
   12208:	ec dd       	rcall	.-1064   	; 0x11de2 <Send_Identify>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1220a:	1d c0       	rjmp	.+58     	; 0x12246 <GPIB_SECONDARY_ADDRESS+0xea>
   1220c:	c9 01       	movw	r24, r18
   1220e:	84 72       	andi	r24, 0x24	; 36
   12210:	99 27       	eor	r25, r25
   12212:	00 97       	sbiw	r24, 0x00	; 0
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   12214:	c1 f0       	breq	.+48     	; 0x12246 <GPIB_SECONDARY_ADDRESS+0xea>
   12216:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   1221a:	90 e0       	ldi	r25, 0x00	; 0
   1221c:	ed b7       	in	r30, 0x3d	; 61
   1221e:	fe b7       	in	r31, 0x3e	; 62
   12220:	91 87       	std	Z+9, r25	; 0x09
   12222:	80 87       	std	Z+8, r24	; 0x08
   12224:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   12228:	90 e0       	ldi	r25, 0x00	; 0
   1222a:	97 83       	std	Z+7, r25	; 0x07
   1222c:	86 83       	std	Z+6, r24	; 0x06
   1222e:	d5 83       	std	Z+5, r29	; 0x05
   12230:	c4 83       	std	Z+4, r28	; 0x04
   12232:	85 ef       	ldi	r24, 0xF5	; 245
   12234:	91 e1       	ldi	r25, 0x11	; 17
   12236:	a0 e0       	ldi	r26, 0x00	; 0
   12238:	81 83       	std	Z+1, r24	; 0x01
   1223a:	92 83       	std	Z+2, r25	; 0x02
   1223c:	a3 83       	std	Z+3, r26	; 0x03
   1223e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   12242:	80 e0       	ldi	r24, 0x00	; 0
}
   12244:	90 e0       	ldi	r25, 0x00	; 0
   12246:	cd b7       	in	r28, 0x3d	; 61
   12248:	de b7       	in	r29, 0x3e	; 62
   1224a:	29 96       	adiw	r28, 0x09	; 9
   1224c:	e3 e0       	ldi	r30, 0x03	; 3
   1224e:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__epilogue_restores__+0x1e>

00012252 <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   12252:	00 d0       	rcall	.+0      	; 0x12254 <listen_cleanup+0x2>
   12254:	1f 92       	push	r1
    if(listening_last)
   12256:	60 91 dd 1e 	lds	r22, 0x1EDD	; 0x801edd <listening_last>
   1225a:	66 23       	and	r22, r22
   1225c:	e1 f0       	breq	.+56     	; 0x12296 <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   1225e:	70 e0       	ldi	r23, 0x00	; 0
   12260:	40 e2       	ldi	r20, 0x20	; 32
   12262:	50 e0       	ldi	r21, 0x00	; 0
   12264:	84 e0       	ldi	r24, 0x04	; 4
   12266:	90 e0       	ldi	r25, 0x00	; 0
   12268:	9a d6       	rcall	.+3380   	; 0x12f9e <find_device>
        if(index == -1)
   1226a:	01 96       	adiw	r24, 0x01	; 1
   1226c:	a1 f0       	breq	.+40     	; 0x12296 <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1226e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12272:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12276:	84 72       	andi	r24, 0x24	; 36
   12278:	99 27       	eor	r25, r25
   1227a:	89 2b       	or	r24, r25
   1227c:	51 f0       	breq	.+20     	; 0x12292 <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   1227e:	84 ee       	ldi	r24, 0xE4	; 228
   12280:	91 e1       	ldi	r25, 0x11	; 17
   12282:	a0 e0       	ldi	r26, 0x00	; 0
   12284:	ed b7       	in	r30, 0x3d	; 61
   12286:	fe b7       	in	r31, 0x3e	; 62
   12288:	81 83       	std	Z+1, r24	; 0x01
   1228a:	92 83       	std	Z+2, r25	; 0x02
   1228c:	a3 83       	std	Z+3, r26	; 0x03
   1228e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        printer_close();
   12292:	0e 94 70 bc 	call	0x178e0	; 0x178e0 <printer_close>
    }
}
   12296:	0f 90       	pop	r0
   12298:	0f 90       	pop	r0
   1229a:	0f 90       	pop	r0
   1229c:	08 95       	ret

0001229e <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   1229e:	cf 93       	push	r28
   122a0:	df 93       	push	r29
   122a2:	00 d0       	rcall	.+0      	; 0x122a4 <GPIB_LISTEN+0x6>
   122a4:	00 d0       	rcall	.+0      	; 0x122a6 <GPIB_LISTEN+0x8>
   122a6:	1f 92       	push	r1
   122a8:	c8 2f       	mov	r28, r24
    listening_last = listening;
   122aa:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   122ae:	80 93 dd 1e 	sts	0x1EDD, r24	; 0x801edd <listening_last>
    listening = ch;
   122b2:	c0 93 e3 1e 	sts	0x1EE3, r28	; 0x801ee3 <listening>
    listen_cleanup();

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   122b6:	cd df       	rcall	.-102    	; 0x12252 <listen_cleanup>
   122b8:	cf 33       	cpi	r28, 0x3F	; 63
    {
        listening = 0;
   122ba:	19 f5       	brne	.+70     	; 0x12302 <GPIB_LISTEN+0x64>
   122bc:	10 92 e3 1e 	sts	0x1EE3, r1	; 0x801ee3 <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   122c0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   122c4:	82 ff       	sbrs	r24, 2
        {
            printf("[UNL]\n");
   122c6:	74 c0       	rjmp	.+232    	; 0x123b0 <GPIB_LISTEN+0x112>
   122c8:	8d ed       	ldi	r24, 0xDD	; 221
   122ca:	92 e1       	ldi	r25, 0x12	; 18
   122cc:	a0 e0       	ldi	r26, 0x00	; 0
   122ce:	ed b7       	in	r30, 0x3d	; 61
   122d0:	fe b7       	in	r31, 0x3e	; 62
   122d2:	81 83       	std	Z+1, r24	; 0x01
   122d4:	92 83       	std	Z+2, r25	; 0x02
   122d6:	a3 83       	std	Z+3, r26	; 0x03
   122d8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   122dc:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <lastcmd>
   122e0:	90 91 dc 1c 	lds	r25, 0x1CDC	; 0x801cdc <lastcmd+0x1>
   122e4:	8f 35       	cpi	r24, 0x5F	; 95
   122e6:	91 05       	cpc	r25, r1
   122e8:	09 f0       	breq	.+2      	; 0x122ec <GPIB_LISTEN+0x4e>
                printf("\n");
   122ea:	62 c0       	rjmp	.+196    	; 0x123b0 <GPIB_LISTEN+0x112>
   122ec:	8b ed       	ldi	r24, 0xDB	; 219
   122ee:	92 e1       	ldi	r25, 0x12	; 18
   122f0:	a0 e0       	ldi	r26, 0x00	; 0
   122f2:	ed b7       	in	r30, 0x3d	; 61
   122f4:	fe b7       	in	r31, 0x3e	; 62
   122f6:	81 83       	std	Z+1, r24	; 0x01
   122f8:	92 83       	std	Z+2, r25	; 0x02
   122fa:	a3 83       	std	Z+3, r26	; 0x03
   122fc:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   12300:	57 c0       	rjmp	.+174    	; 0x123b0 <GPIB_LISTEN+0x112>
   12302:	d0 e0       	ldi	r29, 0x00	; 0
   12304:	ce 01       	movw	r24, r28
   12306:	9c db       	rcall	.-2248   	; 0x11a40 <AMIGO_is_MLA>
   12308:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1230a:	81 f0       	breq	.+32     	; 0x1232c <GPIB_LISTEN+0x8e>
   1230c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12310:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12314:	84 72       	andi	r24, 0x24	; 36
   12316:	99 27       	eor	r25, r25
   12318:	89 2b       	or	r24, r25
   1231a:	09 f4       	brne	.+2      	; 0x1231e <GPIB_LISTEN+0x80>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   1231c:	49 c0       	rjmp	.+146    	; 0x123b0 <GPIB_LISTEN+0x112>
   1231e:	ed b7       	in	r30, 0x3d	; 61
   12320:	fe b7       	in	r31, 0x3e	; 62
   12322:	d5 83       	std	Z+5, r29	; 0x05
   12324:	c4 83       	std	Z+4, r28	; 0x04
   12326:	89 ec       	ldi	r24, 0xC9	; 201
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   12328:	92 e1       	ldi	r25, 0x12	; 18
   1232a:	3c c0       	rjmp	.+120    	; 0x123a4 <GPIB_LISTEN+0x106>
   1232c:	ce 01       	movw	r24, r28
   1232e:	55 db       	rcall	.-2390   	; 0x119da <SS80_is_MLA>
   12330:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12332:	79 f0       	breq	.+30     	; 0x12352 <GPIB_LISTEN+0xb4>
   12334:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12338:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1233c:	84 72       	andi	r24, 0x24	; 36
   1233e:	99 27       	eor	r25, r25
   12340:	89 2b       	or	r24, r25
            printf("[LA %02XH SS80]\n", 0xff & ch);
   12342:	b1 f1       	breq	.+108    	; 0x123b0 <GPIB_LISTEN+0x112>
   12344:	ed b7       	in	r30, 0x3d	; 61
   12346:	fe b7       	in	r31, 0x3e	; 62
   12348:	d5 83       	std	Z+5, r29	; 0x05
   1234a:	c4 83       	std	Z+4, r28	; 0x04
   1234c:	88 eb       	ldi	r24, 0xB8	; 184
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   1234e:	92 e1       	ldi	r25, 0x12	; 18
   12350:	29 c0       	rjmp	.+82     	; 0x123a4 <GPIB_LISTEN+0x106>
   12352:	ce 01       	movw	r24, r28
   12354:	a8 db       	rcall	.-2224   	; 0x11aa6 <PRINTER_is_MLA>
   12356:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1235a:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1235e:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12360:	c9 f0       	breq	.+50     	; 0x12394 <GPIB_LISTEN+0xf6>
   12362:	24 72       	andi	r18, 0x24	; 36
   12364:	33 27       	eor	r19, r19
   12366:	23 2b       	or	r18, r19
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   12368:	61 f0       	breq	.+24     	; 0x12382 <GPIB_LISTEN+0xe4>
   1236a:	ed b7       	in	r30, 0x3d	; 61
   1236c:	fe b7       	in	r31, 0x3e	; 62
   1236e:	d5 83       	std	Z+5, r29	; 0x05
   12370:	c4 83       	std	Z+4, r28	; 0x04
   12372:	84 ea       	ldi	r24, 0xA4	; 164
   12374:	92 e1       	ldi	r25, 0x12	; 18
   12376:	a0 e0       	ldi	r26, 0x00	; 0
   12378:	81 83       	std	Z+1, r24	; 0x01
   1237a:	92 83       	std	Z+2, r25	; 0x02
   1237c:	a3 83       	std	Z+3, r26	; 0x03
   1237e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif
        if(talking != UNT)
   12382:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   12386:	8f 35       	cpi	r24, 0x5F	; 95
        {
///@brief NULL creates a file named based on date and time
            printer_open(NULL);
   12388:	99 f0       	breq	.+38     	; 0x123b0 <GPIB_LISTEN+0x112>
   1238a:	80 e0       	ldi	r24, 0x00	; 0
   1238c:	90 e0       	ldi	r25, 0x00	; 0
   1238e:	0e 94 c8 bc 	call	0x17990	; 0x17990 <printer_open>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12392:	0e c0       	rjmp	.+28     	; 0x123b0 <GPIB_LISTEN+0x112>
   12394:	22 ff       	sbrs	r18, 2
        printf("[LA %02XH]\n", 0xff & ch);
   12396:	0c c0       	rjmp	.+24     	; 0x123b0 <GPIB_LISTEN+0x112>
   12398:	ed b7       	in	r30, 0x3d	; 61
   1239a:	fe b7       	in	r31, 0x3e	; 62
   1239c:	d5 83       	std	Z+5, r29	; 0x05
   1239e:	c4 83       	std	Z+4, r28	; 0x04
   123a0:	88 e9       	ldi	r24, 0x98	; 152
   123a2:	92 e1       	ldi	r25, 0x12	; 18
   123a4:	a0 e0       	ldi	r26, 0x00	; 0
   123a6:	81 83       	std	Z+1, r24	; 0x01
   123a8:	92 83       	std	Z+2, r25	; 0x02
   123aa:	a3 83       	std	Z+3, r26	; 0x03
   123ac:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   123b0:	80 e0       	ldi	r24, 0x00	; 0
   123b2:	90 e0       	ldi	r25, 0x00	; 0
   123b4:	cd b7       	in	r28, 0x3d	; 61
   123b6:	de b7       	in	r29, 0x3e	; 62
   123b8:	25 96       	adiw	r28, 0x05	; 5
   123ba:	e2 e0       	ldi	r30, 0x02	; 2
   123bc:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

000123c0 <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   123c0:	cf 93       	push	r28
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   123c2:	df 93       	push	r29
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   123c4:	92 db       	rcall	.-2268   	; 0x11aea <gpib_init_devices>
   123c6:	10 92 5f 19 	sts	0x195F, r1	; 0x80195f <gpib_log_fp+0x1>
   123ca:	10 92 5e 19 	sts	0x195E, r1	; 0x80195e <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   123ce:	80 e0       	ldi	r24, 0x00	; 0
   123d0:	90 e0       	ldi	r25, 0x00	; 0
   123d2:	b0 d8       	rcall	.-3744   	; 0x11534 <gpib_read_byte>

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   123d4:	ec 01       	movw	r28, r24
   123d6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
            gpib_decode(val);
   123da:	83 ff       	sbrs	r24, 3
   123dc:	02 c0       	rjmp	.+4      	; 0x123e2 <gpib_task+0x22>
#endif
        status = gpib_error_test(val);
   123de:	ce 01       	movw	r24, r28
   123e0:	94 d9       	rcall	.-3288   	; 0x1170a <gpib_decode>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   123e2:	ce 01       	movw	r24, r28
   123e4:	1d dc       	rcall	.-1990   	; 0x11c20 <gpib_error_test>
   123e6:	9c 01       	movw	r18, r24
   123e8:	23 70       	andi	r18, 0x03	; 3
   123ea:	33 27       	eor	r19, r19
   123ec:	23 2b       	or	r18, r19
        {
            return;
        }
        else if(status)
   123ee:	09 f0       	breq	.+2      	; 0x123f2 <gpib_task+0x32>
   123f0:	43 c0       	rjmp	.+134    	; 0x12478 <gpib_task+0xb8>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   123f2:	89 2b       	or	r24, r25
   123f4:	61 f7       	brne	.-40     	; 0x123ce <gpib_task+0xe>
        {
            ch = val & CMD_MASK;
   123f6:	d2 ff       	sbrs	r29, 2
            if(ch <= 0x1f)
   123f8:	26 c0       	rjmp	.+76     	; 0x12446 <gpib_task+0x86>
            {
                GPIB(ch);
   123fa:	8c 2f       	mov	r24, r28
   123fc:	8f 77       	andi	r24, 0x7F	; 127
                continue;
   123fe:	80 32       	cpi	r24, 0x20	; 32
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   12400:	10 f4       	brcc	.+4      	; 0x12406 <gpib_task+0x46>
   12402:	52 dd       	rcall	.-1372   	; 0x11ea8 <GPIB>
   12404:	e4 cf       	rjmp	.-56     	; 0x123ce <gpib_task+0xe>
            {
                GPIB_LISTEN(ch);
   12406:	90 ee       	ldi	r25, 0xE0	; 224
   12408:	98 0f       	add	r25, r24
                continue;
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   1240a:	90 32       	cpi	r25, 0x20	; 32
   1240c:	10 f4       	brcc	.+4      	; 0x12412 <gpib_task+0x52>
   1240e:	47 df       	rcall	.-370    	; 0x1229e <GPIB_LISTEN>
            {
                GPIB_TALK(ch);
   12410:	de cf       	rjmp	.-68     	; 0x123ce <gpib_task+0xe>
   12412:	90 ec       	ldi	r25, 0xC0	; 192
                continue;
   12414:	98 0f       	add	r25, r24
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   12416:	90 32       	cpi	r25, 0x20	; 32
   12418:	10 f4       	brcc	.+4      	; 0x1241e <gpib_task+0x5e>
   1241a:	08 de       	rcall	.-1008   	; 0x1202c <GPIB_TALK>
   1241c:	d8 cf       	rjmp	.-80     	; 0x123ce <gpib_task+0xe>
   1241e:	90 91 e3 1e 	lds	r25, 0x1EE3	; 0x801ee3 <listening>
   12422:	99 23       	and	r25, r25
   12424:	59 f0       	breq	.+22     	; 0x1243c <gpib_task+0x7c>
   12426:	20 91 db 1c 	lds	r18, 0x1CDB	; 0x801cdb <lastcmd>
            {
                secondary = 0;
   1242a:	30 91 dc 1c 	lds	r19, 0x1CDC	; 0x801cdc <lastcmd+0x1>
                GPIB_SECONDARY_ADDRESS(ch);
   1242e:	2f 35       	cpi	r18, 0x5F	; 95
   12430:	31 05       	cpc	r19, r1
                continue;
   12432:	21 f4       	brne	.+8      	; 0x1243c <gpib_task+0x7c>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   12434:	10 92 e2 1e 	sts	0x1EE2, r1	; 0x801ee2 <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   12438:	91 de       	rcall	.-734    	; 0x1215c <GPIB_SECONDARY_ADDRESS>
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   1243a:	c9 cf       	rjmp	.-110    	; 0x123ce <gpib_task+0xe>
   1243c:	80 93 e2 1e 	sts	0x1EE2, r24	; 0x801ee2 <secondary>
   12440:	60 e0       	ldi	r22, 0x00	; 0
   12442:	90 e0       	ldi	r25, 0x00	; 0
   12444:	12 c0       	rjmp	.+36     	; 0x1246a <gpib_task+0xaa>
   12446:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
            {
                printer_buffer( 0xff & val );
   1244a:	90 e0       	ldi	r25, 0x00	; 0
   1244c:	2c db       	rcall	.-2472   	; 0x11aa6 <PRINTER_is_MLA>
   1244e:	89 2b       	or	r24, r25
                continue;
            }

            if(!secondary)
   12450:	29 f0       	breq	.+10     	; 0x1245c <gpib_task+0x9c>
   12452:	ce 01       	movw	r24, r28
   12454:	99 27       	eor	r25, r25
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   12456:	0e 94 6b bd 	call	0x17ad6	; 0x17ad6 <printer_buffer>
   1245a:	b9 cf       	rjmp	.-142    	; 0x123ce <gpib_task+0xe>
   1245c:	80 91 e2 1e 	lds	r24, 0x1EE2	; 0x801ee2 <secondary>
            status = gpib_error_test(status);
   12460:	88 23       	and	r24, r24

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   12462:	09 f4       	brne	.+2      	; 0x12466 <gpib_task+0xa6>
   12464:	b4 cf       	rjmp	.-152    	; 0x123ce <gpib_task+0xe>
   12466:	61 e0       	ldi	r22, 0x01	; 1
   12468:	ce 01       	movw	r24, r28
   1246a:	67 dc       	rcall	.-1842   	; 0x11d3a <GPIB_COMMANDS>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   1246c:	d9 db       	rcall	.-2126   	; 0x11c20 <gpib_error_test>
   1246e:	83 70       	andi	r24, 0x03	; 3
   12470:	99 27       	eor	r25, r25
   12472:	89 2b       	or	r24, r25
   12474:	09 f4       	brne	.+2      	; 0x12478 <gpib_task+0xb8>
   12476:	ab cf       	rjmp	.-170    	; 0x123ce <gpib_task+0xe>
   12478:	df 91       	pop	r29
   1247a:	cf 91       	pop	r28
   1247c:	08 95       	ret

0001247e <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   1247e:	08 95       	ret

00012480 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   12480:	cf 93       	push	r28
   12482:	df 93       	push	r29
   12484:	00 d0       	rcall	.+0      	; 0x12486 <gpib_help+0x6>
   12486:	1f 92       	push	r1
   12488:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   1248a:	8e e6       	ldi	r24, 0x6E	; 110
   1248c:	96 e1       	ldi	r25, 0x16	; 22
   1248e:	a0 e0       	ldi	r26, 0x00	; 0
   12490:	ed b7       	in	r30, 0x3d	; 61
   12492:	fe b7       	in	r31, 0x3e	; 62
   12494:	81 83       	std	Z+1, r24	; 0x01
   12496:	92 83       	std	Z+2, r25	; 0x02
   12498:	a3 83       	std	Z+3, r26	; 0x03
   1249a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    if(full)
   1249e:	cd 2b       	or	r28, r29
   124a0:	51 f0       	breq	.+20     	; 0x124b6 <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   124a2:	85 ea       	ldi	r24, 0xA5	; 165
   124a4:	94 e1       	ldi	r25, 0x14	; 20
   124a6:	a0 e0       	ldi	r26, 0x00	; 0
   124a8:	ed b7       	in	r30, 0x3d	; 61
   124aa:	fe b7       	in	r31, 0x3e	; 62
   124ac:	81 83       	std	Z+1, r24	; 0x01
   124ae:	92 83       	std	Z+2, r25	; 0x02
   124b0:	a3 83       	std	Z+3, r26	; 0x03
   124b2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            "gpib ppr_set XX\n"
    #endif
            "\n"
            );
    }
}
   124b6:	cd b7       	in	r28, 0x3d	; 61
   124b8:	de b7       	in	r29, 0x3e	; 62
   124ba:	23 96       	adiw	r28, 0x03	; 3
   124bc:	e2 e0       	ldi	r30, 0x02	; 2
   124be:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

000124c2 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   124c2:	a5 e0       	ldi	r26, 0x05	; 5
   124c4:	b0 e0       	ldi	r27, 0x00	; 0
   124c6:	e7 e6       	ldi	r30, 0x67	; 103
   124c8:	f2 e9       	ldi	r31, 0x92	; 146
   124ca:	0c 94 d7 e2 	jmp	0x1c5ae	; 0x1c5ae <__prologue_saves__+0x10>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   124ce:	fb 01       	movw	r30, r22
   124d0:	e0 80       	ld	r14, Z
   124d2:	f1 80       	ldd	r15, Z+1	; 0x01

    if(!ptr)
   124d4:	e1 14       	cp	r14, r1
   124d6:	f1 04       	cpc	r15, r1
   124d8:	19 f4       	brne	.+6      	; 0x124e0 <gpib_tests+0x1e>
        return(0);
   124da:	80 e0       	ldi	r24, 0x00	; 0
   124dc:	90 e0       	ldi	r25, 0x00	; 0
   124de:	dc c0       	rjmp	.+440    	; 0x12698 <gpib_tests+0x1d6>
   124e0:	6b 01       	movw	r12, r22
   124e2:	5c 01       	movw	r10, r24

    if( MATCH(ptr,"gpib") )
   124e4:	6f e9       	ldi	r22, 0x9F	; 159
   124e6:	7d e0       	ldi	r23, 0x0D	; 13
   124e8:	c7 01       	movw	r24, r14
   124ea:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
   124ee:	89 2b       	or	r24, r25
   124f0:	a1 f0       	breq	.+40     	; 0x1251a <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   124f2:	f6 01       	movw	r30, r12
   124f4:	e2 80       	ldd	r14, Z+2	; 0x02
   124f6:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   124f8:	e1 14       	cp	r14, r1
   124fa:	f1 04       	cpc	r15, r1
   124fc:	21 f4       	brne	.+8      	; 0x12506 <gpib_tests+0x44>
        {
            gpib_help(1);
   124fe:	81 e0       	ldi	r24, 0x01	; 1
   12500:	90 e0       	ldi	r25, 0x00	; 0
   12502:	be df       	rcall	.-132    	; 0x12480 <gpib_help>
   12504:	c7 c0       	rjmp	.+398    	; 0x12694 <gpib_tests+0x1d2>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   12506:	69 e8       	ldi	r22, 0x89	; 137
   12508:	76 e1       	ldi	r23, 0x16	; 22
   1250a:	c7 01       	movw	r24, r14
   1250c:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
   12510:	89 2b       	or	r24, r25
   12512:	a9 f7       	brne	.-22     	; 0x124fe <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   12514:	c2 e0       	ldi	r28, 0x02	; 2
   12516:	d0 e0       	ldi	r29, 0x00	; 0
   12518:	02 c0       	rjmp	.+4      	; 0x1251e <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1251a:	c1 e0       	ldi	r28, 0x01	; 1
   1251c:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   1251e:	64 ea       	ldi	r22, 0xA4	; 164
   12520:	7d e0       	ldi	r23, 0x0D	; 13
   12522:	c7 01       	movw	r24, r14
   12524:	0e 94 85 32 	call	0x650a	; 0x650a <MATCHI>
   12528:	89 2b       	or	r24, r25
   1252a:	29 f1       	breq	.+74     	; 0x12576 <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   1252c:	fe 01       	movw	r30, r28
   1252e:	ee 0f       	add	r30, r30
   12530:	ff 1f       	adc	r31, r31
   12532:	ec 0d       	add	r30, r12
   12534:	fd 1d       	adc	r31, r13
        if(*ptr == '=')
   12536:	01 90       	ld	r0, Z+
   12538:	f0 81       	ld	r31, Z
   1253a:	e0 2d       	mov	r30, r0
   1253c:	80 81       	ld	r24, Z
   1253e:	8d 33       	cpi	r24, 0x3D	; 61
   12540:	09 f4       	brne	.+2      	; 0x12544 <gpib_tests+0x82>
            ++ind;
   12542:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   12544:	cc 0f       	add	r28, r28
   12546:	dd 1f       	adc	r29, r29
   12548:	cc 0d       	add	r28, r12
   1254a:	dd 1d       	adc	r29, r13
   1254c:	88 81       	ld	r24, Y
   1254e:	99 81       	ldd	r25, Y+1	; 0x01
   12550:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <get_value>
   12554:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   12558:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   1255c:	ed b7       	in	r30, 0x3d	; 61
   1255e:	fe b7       	in	r31, 0x3e	; 62
   12560:	75 83       	std	Z+5, r23	; 0x05
   12562:	64 83       	std	Z+4, r22	; 0x04
   12564:	88 e9       	ldi	r24, 0x98	; 152
   12566:	94 e1       	ldi	r25, 0x14	; 20
   12568:	a0 e0       	ldi	r26, 0x00	; 0
   1256a:	81 83       	std	Z+1, r24	; 0x01
   1256c:	92 83       	std	Z+2, r25	; 0x02
   1256e:	a3 83       	std	Z+3, r26	; 0x03
   12570:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   12574:	8f c0       	rjmp	.+286    	; 0x12694 <gpib_tests+0x1d2>
        return(1);
    }

    if (MATCHI(ptr,"addresses") )
   12576:	6a ea       	ldi	r22, 0xAA	; 170
   12578:	7d e0       	ldi	r23, 0x0D	; 13
   1257a:	c7 01       	movw	r24, r14
   1257c:	0e 94 85 32 	call	0x650a	; 0x650a <MATCHI>
   12580:	89 2b       	or	r24, r25
   12582:	c9 f0       	breq	.+50     	; 0x125b6 <gpib_tests+0xf4>
    {
        ptr = argv[ind];
   12584:	cc 0f       	add	r28, r28
   12586:	dd 1f       	adc	r29, r29
   12588:	cc 0d       	add	r28, r12
   1258a:	dd 1d       	adc	r29, r13
   1258c:	88 81       	ld	r24, Y
   1258e:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   12590:	00 97       	sbiw	r24, 0x00	; 0
   12592:	69 f0       	breq	.+26     	; 0x125ae <gpib_tests+0xec>
   12594:	fc 01       	movw	r30, r24
   12596:	20 81       	ld	r18, Z
   12598:	22 23       	and	r18, r18
   1259a:	49 f0       	breq	.+18     	; 0x125ae <gpib_tests+0xec>
   1259c:	64 eb       	ldi	r22, 0xB4	; 180
   1259e:	7d e0       	ldi	r23, 0x0D	; 13
   125a0:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
   125a4:	89 2b       	or	r24, r25
   125a6:	19 f0       	breq	.+6      	; 0x125ae <gpib_tests+0xec>
            display_Addresses(1);
   125a8:	81 e0       	ldi	r24, 0x01	; 1
   125aa:	90 e0       	ldi	r25, 0x00	; 0
   125ac:	02 c0       	rjmp	.+4      	; 0x125b2 <gpib_tests+0xf0>
        else
            display_Addresses(0);
   125ae:	80 e0       	ldi	r24, 0x00	; 0
   125b0:	90 e0       	ldi	r25, 0x00	; 0
   125b2:	54 d1       	rcall	.+680    	; 0x1285c <display_Addresses>
   125b4:	6f c0       	rjmp	.+222    	; 0x12694 <gpib_tests+0x1d2>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   125b6:	67 eb       	ldi	r22, 0xB7	; 183
   125b8:	7d e0       	ldi	r23, 0x0D	; 13
   125ba:	c7 01       	movw	r24, r14
   125bc:	0e 94 85 32 	call	0x650a	; 0x650a <MATCHI>
   125c0:	89 2b       	or	r24, r25
   125c2:	c9 f0       	breq	.+50     	; 0x125f6 <gpib_tests+0x134>
    {
        ptr = argv[ind];
   125c4:	cc 0f       	add	r28, r28
   125c6:	dd 1f       	adc	r29, r29
   125c8:	cc 0d       	add	r28, r12
   125ca:	dd 1d       	adc	r29, r13
   125cc:	88 81       	ld	r24, Y
   125ce:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   125d0:	00 97       	sbiw	r24, 0x00	; 0
   125d2:	69 f0       	breq	.+26     	; 0x125ee <gpib_tests+0x12c>
   125d4:	fc 01       	movw	r30, r24
   125d6:	20 81       	ld	r18, Z
   125d8:	22 23       	and	r18, r18
   125da:	49 f0       	breq	.+18     	; 0x125ee <gpib_tests+0x12c>
   125dc:	64 eb       	ldi	r22, 0xB4	; 180
   125de:	7d e0       	ldi	r23, 0x0D	; 13
   125e0:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
   125e4:	89 2b       	or	r24, r25
   125e6:	19 f0       	breq	.+6      	; 0x125ee <gpib_tests+0x12c>
            display_Config(1);
   125e8:	81 e0       	ldi	r24, 0x01	; 1
   125ea:	90 e0       	ldi	r25, 0x00	; 0
        else
            display_Config(0);
   125ec:	02 c0       	rjmp	.+4      	; 0x125f2 <gpib_tests+0x130>
   125ee:	80 e0       	ldi	r24, 0x00	; 0
   125f0:	90 e0       	ldi	r25, 0x00	; 0
   125f2:	0f d2       	rcall	.+1054   	; 0x12a12 <display_Config>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   125f4:	4f c0       	rjmp	.+158    	; 0x12694 <gpib_tests+0x1d2>
   125f6:	6e eb       	ldi	r22, 0xBE	; 190
   125f8:	7d e0       	ldi	r23, 0x0D	; 13
   125fa:	c7 01       	movw	r24, r14
   125fc:	0e 94 85 32 	call	0x650a	; 0x650a <MATCHI>
   12600:	89 2b       	or	r24, r25
    {
        gpib_timer_elapsed_begin();
   12602:	19 f0       	breq	.+6      	; 0x1260a <gpib_tests+0x148>
   12604:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   12608:	45 c0       	rjmp	.+138    	; 0x12694 <gpib_tests+0x1d2>
   1260a:	6c ec       	ldi	r22, 0xCC	; 204
   1260c:	7d e0       	ldi	r23, 0x0D	; 13
   1260e:	c7 01       	movw	r24, r14
   12610:	0e 94 85 32 	call	0x650a	; 0x650a <MATCHI>
   12614:	89 2b       	or	r24, r25
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   12616:	29 f0       	breq	.+10     	; 0x12622 <gpib_tests+0x160>
   12618:	84 ed       	ldi	r24, 0xD4	; 212
   1261a:	9d e0       	ldi	r25, 0x0D	; 13
   1261c:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
        return(1);
    }

    if ( MATCHI(ptr, "ifc") )
   12620:	39 c0       	rjmp	.+114    	; 0x12694 <gpib_tests+0x1d2>
   12622:	62 ee       	ldi	r22, 0xE2	; 226
   12624:	7d e0       	ldi	r23, 0x0D	; 13
   12626:	c7 01       	movw	r24, r14
   12628:	0e 94 85 32 	call	0x650a	; 0x650a <MATCHI>
   1262c:	89 2b       	or	r24, r25
    {
        gpib_assert_ifc();
   1262e:	19 f0       	breq	.+6      	; 0x12636 <gpib_tests+0x174>
   12630:	0e 94 07 87 	call	0x10e0e	; 0x10e0e <gpib_assert_ifc>
        return(1);

    }

    if (MATCHI(ptr,"task") )
   12634:	2f c0       	rjmp	.+94     	; 0x12694 <gpib_tests+0x1d2>
   12636:	66 ee       	ldi	r22, 0xE6	; 230
   12638:	7d e0       	ldi	r23, 0x0D	; 13
   1263a:	c7 01       	movw	r24, r14
   1263c:	0e 94 85 32 	call	0x650a	; 0x650a <MATCHI>
    {
        gpib_task();
   12640:	89 2b       	or	r24, r25
   12642:	11 f0       	breq	.+4      	; 0x12648 <gpib_tests+0x186>
   12644:	bd de       	rcall	.-646    	; 0x123c0 <gpib_task>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   12646:	26 c0       	rjmp	.+76     	; 0x12694 <gpib_tests+0x1d2>
   12648:	8e 01       	movw	r16, r28
   1264a:	0f 5f       	subi	r16, 0xFF	; 255
   1264c:	1f 4f       	sbci	r17, 0xFF	; 255
   1264e:	95 01       	movw	r18, r10
   12650:	a8 01       	movw	r20, r16
   12652:	6b ee       	ldi	r22, 0xEB	; 235
   12654:	7d e0       	ldi	r23, 0x0D	; 13
   12656:	c7 01       	movw	r24, r14
   12658:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1265c:	89 2b       	or	r24, r25
   1265e:	09 f4       	brne	.+2      	; 0x12662 <gpib_tests+0x1a0>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   12660:	3c cf       	rjmp	.-392    	; 0x124da <gpib_tests+0x18>
   12662:	00 0f       	add	r16, r16
   12664:	11 1f       	adc	r17, r17
   12666:	e6 01       	movw	r28, r12
   12668:	c0 0f       	add	r28, r16
   1266a:	d1 1f       	adc	r29, r17
   1266c:	88 81       	ld	r24, Y
   1266e:	99 81       	ldd	r25, Y+1	; 0x01
   12670:	00 97       	sbiw	r24, 0x00	; 0
   12672:	51 f0       	breq	.+20     	; 0x12688 <gpib_tests+0x1c6>
   12674:	61 ef       	ldi	r22, 0xF1	; 241
   12676:	7d e0       	ldi	r23, 0x0D	; 13
   12678:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   1267c:	61 e0       	ldi	r22, 0x01	; 1
   1267e:	70 e0       	ldi	r23, 0x00	; 0
   12680:	89 2b       	or	r24, r25
   12682:	21 f4       	brne	.+8      	; 0x1268c <gpib_tests+0x1ca>
   12684:	60 e0       	ldi	r22, 0x00	; 0
   12686:	02 c0       	rjmp	.+4      	; 0x1268c <gpib_tests+0x1ca>
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   12688:	60 e0       	ldi	r22, 0x00	; 0
   1268a:	70 e0       	ldi	r23, 0x00	; 0
   1268c:	22 97       	sbiw	r28, 0x02	; 2
   1268e:	88 81       	ld	r24, Y
   12690:	99 81       	ldd	r25, Y+1	; 0x01
        return(1);
   12692:	34 da       	rcall	.-2968   	; 0x11afc <gpib_trace_task>
   12694:	81 e0       	ldi	r24, 0x01	; 1

    }                                             // port write
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   12696:	90 e0       	ldi	r25, 0x00	; 0
   12698:	cd b7       	in	r28, 0x3d	; 61
   1269a:	de b7       	in	r29, 0x3e	; 62
   1269c:	25 96       	adiw	r28, 0x05	; 5
   1269e:	ea e0       	ldi	r30, 0x0A	; 10
   126a0:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__epilogue_restores__+0x10>

000126a4 <tok_index>:
   126a4:	ef 92       	push	r14
   126a6:	ff 92       	push	r15
   126a8:	0f 93       	push	r16
   126aa:	1f 93       	push	r17
   126ac:	cf 93       	push	r28
   126ae:	df 93       	push	r29
   126b0:	7c 01       	movw	r14, r24
   126b2:	c4 ec       	ldi	r28, 0xC4	; 196
   126b4:	d1 e0       	ldi	r29, 0x01	; 1
   126b6:	00 e0       	ldi	r16, 0x00	; 0
   126b8:	10 e0       	ldi	r17, 0x00	; 0
   126ba:	8a 81       	ldd	r24, Y+2	; 0x02
   126bc:	9b 81       	ldd	r25, Y+3	; 0x03
   126be:	8f 3f       	cpi	r24, 0xFF	; 255
   126c0:	2f ef       	ldi	r18, 0xFF	; 255
   126c2:	92 07       	cpc	r25, r18
   126c4:	61 f0       	breq	.+24     	; 0x126de <tok_index+0x3a>
   126c6:	68 81       	ld	r22, Y
   126c8:	79 81       	ldd	r23, Y+1	; 0x01
   126ca:	c7 01       	movw	r24, r14
   126cc:	0e 94 85 32 	call	0x650a	; 0x650a <MATCHI>
   126d0:	24 96       	adiw	r28, 0x04	; 4
   126d2:	89 2b       	or	r24, r25
   126d4:	19 f4       	brne	.+6      	; 0x126dc <tok_index+0x38>
   126d6:	0f 5f       	subi	r16, 0xFF	; 255
   126d8:	1f 4f       	sbci	r17, 0xFF	; 255
   126da:	ef cf       	rjmp	.-34     	; 0x126ba <tok_index+0x16>
   126dc:	c8 01       	movw	r24, r16
   126de:	cd b7       	in	r28, 0x3d	; 61
   126e0:	de b7       	in	r29, 0x3e	; 62
   126e2:	e6 e0       	ldi	r30, 0x06	; 6
   126e4:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

000126e8 <tok_name>:
   126e8:	e4 ec       	ldi	r30, 0xC4	; 196
   126ea:	f1 e0       	ldi	r31, 0x01	; 1
   126ec:	20 e0       	ldi	r18, 0x00	; 0
   126ee:	30 e0       	ldi	r19, 0x00	; 0
   126f0:	90 e0       	ldi	r25, 0x00	; 0
   126f2:	42 81       	ldd	r20, Z+2	; 0x02
   126f4:	53 81       	ldd	r21, Z+3	; 0x03
   126f6:	4f 3f       	cpi	r20, 0xFF	; 255
   126f8:	6f ef       	ldi	r22, 0xFF	; 255
   126fa:	56 07       	cpc	r21, r22
   126fc:	89 f0       	breq	.+34     	; 0x12720 <tok_name+0x38>
   126fe:	34 96       	adiw	r30, 0x04	; 4
   12700:	48 17       	cp	r20, r24
   12702:	59 07       	cpc	r21, r25
   12704:	51 f4       	brne	.+20     	; 0x1271a <tok_name+0x32>
   12706:	22 0f       	add	r18, r18
   12708:	33 1f       	adc	r19, r19
   1270a:	22 0f       	add	r18, r18
   1270c:	33 1f       	adc	r19, r19
   1270e:	f9 01       	movw	r30, r18
   12710:	ec 53       	subi	r30, 0x3C	; 60
   12712:	fe 4f       	sbci	r31, 0xFE	; 254
   12714:	80 81       	ld	r24, Z
   12716:	91 81       	ldd	r25, Z+1	; 0x01
   12718:	08 95       	ret
   1271a:	2f 5f       	subi	r18, 0xFF	; 255
   1271c:	3f 4f       	sbci	r19, 0xFF	; 255
   1271e:	e9 cf       	rjmp	.-46     	; 0x126f2 <tok_name+0xa>
   12720:	89 e1       	ldi	r24, 0x19	; 25
   12722:	9c e0       	ldi	r25, 0x0C	; 12
   12724:	08 95       	ret

00012726 <print_tok_val>:
   12726:	cf 92       	push	r12
   12728:	df 92       	push	r13
   1272a:	ef 92       	push	r14
   1272c:	ff 92       	push	r15
   1272e:	0f 93       	push	r16
   12730:	1f 93       	push	r17
   12732:	cf 93       	push	r28
   12734:	ad b7       	in	r26, 0x3d	; 61
   12736:	be b7       	in	r27, 0x3e	; 62
   12738:	1d 97       	sbiw	r26, 0x0d	; 13
   1273a:	0f b6       	in	r0, 0x3f	; 63
   1273c:	f8 94       	cli
   1273e:	be bf       	out	0x3e, r27	; 62
   12740:	0f be       	out	0x3f, r0	; 63
   12742:	ad bf       	out	0x3d, r26	; 61
   12744:	c6 2f       	mov	r28, r22
   12746:	69 01       	movw	r12, r18
   12748:	7a 01       	movw	r14, r20
   1274a:	ce df       	rcall	.-100    	; 0x126e8 <tok_name>
   1274c:	8c 01       	movw	r16, r24
   1274e:	cc 23       	and	r28, r28
   12750:	31 f0       	breq	.+12     	; 0x1275e <print_tok_val+0x38>
   12752:	80 e2       	ldi	r24, 0x20	; 32
   12754:	90 e0       	ldi	r25, 0x00	; 0
   12756:	0e 94 d1 76 	call	0xeda2	; 0xeda2 <putchar>
   1275a:	c1 50       	subi	r28, 0x01	; 1
   1275c:	f8 cf       	rjmp	.-16     	; 0x1274e <print_tok_val+0x28>
   1275e:	ed b7       	in	r30, 0x3d	; 61
   12760:	fe b7       	in	r31, 0x3e	; 62
   12762:	c2 86       	std	Z+10, r12	; 0x0a
   12764:	d3 86       	std	Z+11, r13	; 0x0b
   12766:	e4 86       	std	Z+12, r14	; 0x0c
   12768:	f5 86       	std	Z+13, r15	; 0x0d
   1276a:	c6 82       	std	Z+6, r12	; 0x06
   1276c:	d7 82       	std	Z+7, r13	; 0x07
   1276e:	e0 86       	std	Z+8, r14	; 0x08
   12770:	f1 86       	std	Z+9, r15	; 0x09
   12772:	15 83       	std	Z+5, r17	; 0x05
   12774:	04 83       	std	Z+4, r16	; 0x04
   12776:	81 e0       	ldi	r24, 0x01	; 1
   12778:	9d e1       	ldi	r25, 0x1D	; 29
   1277a:	a0 e0       	ldi	r26, 0x00	; 0
   1277c:	81 83       	std	Z+1, r24	; 0x01
   1277e:	92 83       	std	Z+2, r25	; 0x02
   12780:	a3 83       	std	Z+3, r26	; 0x03
   12782:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   12786:	ad b7       	in	r26, 0x3d	; 61
   12788:	be b7       	in	r27, 0x3e	; 62
   1278a:	1d 96       	adiw	r26, 0x0d	; 13
   1278c:	0f b6       	in	r0, 0x3f	; 63
   1278e:	f8 94       	cli
   12790:	be bf       	out	0x3e, r27	; 62
   12792:	0f be       	out	0x3f, r0	; 63
   12794:	ad bf       	out	0x3d, r26	; 61
   12796:	cf 91       	pop	r28
   12798:	1f 91       	pop	r17
   1279a:	0f 91       	pop	r16
   1279c:	ff 90       	pop	r15
   1279e:	ef 90       	pop	r14
   127a0:	df 90       	pop	r13
   127a2:	cf 90       	pop	r12
   127a4:	08 95       	ret

000127a6 <print_tok_str>:
   127a6:	ef 92       	push	r14
   127a8:	ff 92       	push	r15
   127aa:	0f 93       	push	r16
   127ac:	1f 93       	push	r17
   127ae:	cf 93       	push	r28
   127b0:	ad b7       	in	r26, 0x3d	; 61
   127b2:	be b7       	in	r27, 0x3e	; 62
   127b4:	17 97       	sbiw	r26, 0x07	; 7
   127b6:	0f b6       	in	r0, 0x3f	; 63
   127b8:	f8 94       	cli
   127ba:	be bf       	out	0x3e, r27	; 62
   127bc:	0f be       	out	0x3f, r0	; 63
   127be:	ad bf       	out	0x3d, r26	; 61
   127c0:	c6 2f       	mov	r28, r22
   127c2:	7a 01       	movw	r14, r20
   127c4:	91 df       	rcall	.-222    	; 0x126e8 <tok_name>
   127c6:	8c 01       	movw	r16, r24
   127c8:	cc 23       	and	r28, r28
   127ca:	31 f0       	breq	.+12     	; 0x127d8 <print_tok_str+0x32>
   127cc:	80 e2       	ldi	r24, 0x20	; 32
   127ce:	90 e0       	ldi	r25, 0x00	; 0
   127d0:	0e 94 d1 76 	call	0xeda2	; 0xeda2 <putchar>
   127d4:	c1 50       	subi	r28, 0x01	; 1
   127d6:	f8 cf       	rjmp	.-16     	; 0x127c8 <print_tok_str+0x22>
   127d8:	ed b7       	in	r30, 0x3d	; 61
   127da:	fe b7       	in	r31, 0x3e	; 62
   127dc:	f7 82       	std	Z+7, r15	; 0x07
   127de:	e6 82       	std	Z+6, r14	; 0x06
   127e0:	15 83       	std	Z+5, r17	; 0x05
   127e2:	04 83       	std	Z+4, r16	; 0x04
   127e4:	85 ef       	ldi	r24, 0xF5	; 245
   127e6:	9c e1       	ldi	r25, 0x1C	; 28
   127e8:	a0 e0       	ldi	r26, 0x00	; 0
   127ea:	81 83       	std	Z+1, r24	; 0x01
   127ec:	92 83       	std	Z+2, r25	; 0x02
   127ee:	a3 83       	std	Z+3, r26	; 0x03
   127f0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   127f4:	ad b7       	in	r26, 0x3d	; 61
   127f6:	be b7       	in	r27, 0x3e	; 62
   127f8:	17 96       	adiw	r26, 0x07	; 7
   127fa:	0f b6       	in	r0, 0x3f	; 63
   127fc:	f8 94       	cli
   127fe:	be bf       	out	0x3e, r27	; 62
   12800:	0f be       	out	0x3f, r0	; 63
   12802:	ad bf       	out	0x3d, r26	; 61
   12804:	cf 91       	pop	r28
   12806:	1f 91       	pop	r17
   12808:	0f 91       	pop	r16
   1280a:	ff 90       	pop	r15
   1280c:	ef 90       	pop	r14
   1280e:	08 95       	ret

00012810 <print_tok>:
   12810:	0f 93       	push	r16
   12812:	1f 93       	push	r17
   12814:	cf 93       	push	r28
   12816:	00 d0       	rcall	.+0      	; 0x12818 <print_tok+0x8>
   12818:	00 d0       	rcall	.+0      	; 0x1281a <print_tok+0xa>
   1281a:	1f 92       	push	r1
   1281c:	c6 2f       	mov	r28, r22
   1281e:	64 df       	rcall	.-312    	; 0x126e8 <tok_name>
   12820:	8c 01       	movw	r16, r24
   12822:	cc 23       	and	r28, r28
   12824:	31 f0       	breq	.+12     	; 0x12832 <print_tok+0x22>
   12826:	80 e2       	ldi	r24, 0x20	; 32
   12828:	90 e0       	ldi	r25, 0x00	; 0
   1282a:	0e 94 d1 76 	call	0xeda2	; 0xeda2 <putchar>
   1282e:	c1 50       	subi	r28, 0x01	; 1
   12830:	f8 cf       	rjmp	.-16     	; 0x12822 <print_tok+0x12>
   12832:	ed b7       	in	r30, 0x3d	; 61
   12834:	fe b7       	in	r31, 0x3e	; 62
   12836:	15 83       	std	Z+5, r17	; 0x05
   12838:	04 83       	std	Z+4, r16	; 0x04
   1283a:	81 ef       	ldi	r24, 0xF1	; 241
   1283c:	9c e1       	ldi	r25, 0x1C	; 28
   1283e:	a0 e0       	ldi	r26, 0x00	; 0
   12840:	81 83       	std	Z+1, r24	; 0x01
   12842:	92 83       	std	Z+2, r25	; 0x02
   12844:	a3 83       	std	Z+3, r26	; 0x03
   12846:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1284a:	0f 90       	pop	r0
   1284c:	0f 90       	pop	r0
   1284e:	0f 90       	pop	r0
   12850:	0f 90       	pop	r0
   12852:	0f 90       	pop	r0
   12854:	cf 91       	pop	r28
   12856:	1f 91       	pop	r17
   12858:	0f 91       	pop	r16
   1285a:	08 95       	ret

0001285c <display_Addresses>:
   1285c:	2f 92       	push	r2
   1285e:	3f 92       	push	r3
   12860:	4f 92       	push	r4
   12862:	6f 92       	push	r6
   12864:	7f 92       	push	r7
   12866:	8f 92       	push	r8
   12868:	cf 92       	push	r12
   1286a:	df 92       	push	r13
   1286c:	ef 92       	push	r14
   1286e:	cf 93       	push	r28
   12870:	df 93       	push	r29
   12872:	cd b7       	in	r28, 0x3d	; 61
   12874:	de b7       	in	r29, 0x3e	; 62
   12876:	2a 97       	sbiw	r28, 0x0a	; 10
   12878:	0f b6       	in	r0, 0x3f	; 63
   1287a:	f8 94       	cli
   1287c:	de bf       	out	0x3e, r29	; 62
   1287e:	0f be       	out	0x3f, r0	; 63
   12880:	cd bf       	out	0x3d, r28	; 61
   12882:	8b eb       	ldi	r24, 0xBB	; 187
   12884:	99 e1       	ldi	r25, 0x19	; 25
   12886:	a0 e0       	ldi	r26, 0x00	; 0
   12888:	ed b7       	in	r30, 0x3d	; 61
   1288a:	fe b7       	in	r31, 0x3e	; 62
   1288c:	81 83       	std	Z+1, r24	; 0x01
   1288e:	92 83       	std	Z+2, r25	; 0x02
   12890:	a3 83       	std	Z+3, r26	; 0x03
   12892:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   12896:	27 ee       	ldi	r18, 0xE7	; 231
   12898:	3e e1       	ldi	r19, 0x1E	; 30
   1289a:	3a 87       	std	Y+10, r19	; 0x0a
   1289c:	29 87       	std	Y+9, r18	; 0x09
   1289e:	8d e9       	ldi	r24, 0x9D	; 157
   128a0:	99 e1       	ldi	r25, 0x19	; 25
   128a2:	6c 01       	movw	r12, r24
   128a4:	e1 2c       	mov	r14, r1
   128a6:	8f e9       	ldi	r24, 0x9F	; 159
   128a8:	99 e1       	ldi	r25, 0x19	; 25
   128aa:	3c 01       	movw	r6, r24
   128ac:	81 2c       	mov	r8, r1
   128ae:	88 ea       	ldi	r24, 0xA8	; 168
   128b0:	99 e1       	ldi	r25, 0x19	; 25
   128b2:	1c 01       	movw	r2, r24
   128b4:	41 2c       	mov	r4, r1
   128b6:	82 eb       	ldi	r24, 0xB2	; 178
   128b8:	99 e1       	ldi	r25, 0x19	; 25
   128ba:	9c 01       	movw	r18, r24
   128bc:	40 e0       	ldi	r20, 0x00	; 0
   128be:	2e 83       	std	Y+6, r18	; 0x06
   128c0:	3f 83       	std	Y+7, r19	; 0x07
   128c2:	48 87       	std	Y+8, r20	; 0x08
   128c4:	e9 85       	ldd	r30, Y+9	; 0x09
   128c6:	fa 85       	ldd	r31, Y+10	; 0x0a
   128c8:	80 81       	ld	r24, Z
   128ca:	88 23       	and	r24, r24
   128cc:	09 f4       	brne	.+2      	; 0x128d0 <display_Addresses+0x74>
   128ce:	7b c0       	rjmp	.+246    	; 0x129c6 <display_Addresses+0x16a>
   128d0:	83 30       	cpi	r24, 0x03	; 3
   128d2:	21 f0       	breq	.+8      	; 0x128dc <display_Addresses+0x80>
   128d4:	81 30       	cpi	r24, 0x01	; 1
   128d6:	09 f0       	breq	.+2      	; 0x128da <display_Addresses+0x7e>
   128d8:	5a c0       	rjmp	.+180    	; 0x1298e <display_Addresses+0x132>
   128da:	1f c0       	rjmp	.+62     	; 0x1291a <display_Addresses+0xbe>
   128dc:	e9 85       	ldd	r30, Y+9	; 0x09
   128de:	fa 85       	ldd	r31, Y+10	; 0x0a
   128e0:	87 a1       	ldd	r24, Z+39	; 0x27
   128e2:	90 a5       	ldd	r25, Z+40	; 0x28
   128e4:	90 93 67 19 	sts	0x1967, r25	; 0x801967 <SS80p+0x1>
   128e8:	80 93 66 19 	sts	0x1966, r24	; 0x801966 <SS80p>
   128ec:	cf 01       	movw	r24, r30
   128ee:	07 96       	adiw	r24, 0x07	; 7
   128f0:	ed b7       	in	r30, 0x3d	; 61
   128f2:	fe b7       	in	r31, 0x3e	; 62
   128f4:	95 83       	std	Z+5, r25	; 0x05
   128f6:	84 83       	std	Z+4, r24	; 0x04
   128f8:	2e 81       	ldd	r18, Y+6	; 0x06
   128fa:	3f 81       	ldd	r19, Y+7	; 0x07
   128fc:	48 85       	ldd	r20, Y+8	; 0x08
   128fe:	21 83       	std	Z+1, r18	; 0x01
   12900:	32 83       	std	Z+2, r19	; 0x02
   12902:	43 83       	std	Z+3, r20	; 0x03
   12904:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   12908:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   1290c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   12910:	42 81       	ldd	r20, Z+2	; 0x02
   12912:	53 81       	ldd	r21, Z+3	; 0x03
   12914:	64 e0       	ldi	r22, 0x04	; 4
   12916:	82 e1       	ldi	r24, 0x12	; 18
   12918:	46 df       	rcall	.-372    	; 0x127a6 <print_tok_str>
   1291a:	e9 85       	ldd	r30, Y+9	; 0x09
   1291c:	fa 85       	ldd	r31, Y+10	; 0x0a
   1291e:	80 81       	ld	r24, Z
   12920:	81 30       	cpi	r24, 0x01	; 1
   12922:	d1 f4       	brne	.+52     	; 0x12958 <display_Addresses+0xfc>
   12924:	87 a1       	ldd	r24, Z+39	; 0x27
   12926:	90 a5       	ldd	r25, Z+40	; 0x28
   12928:	90 93 63 19 	sts	0x1963, r25	; 0x801963 <AMIGOp+0x1>
   1292c:	80 93 62 19 	sts	0x1962, r24	; 0x801962 <AMIGOp>
   12930:	cf 01       	movw	r24, r30
   12932:	07 96       	adiw	r24, 0x07	; 7
   12934:	ed b7       	in	r30, 0x3d	; 61
   12936:	fe b7       	in	r31, 0x3e	; 62
   12938:	95 83       	std	Z+5, r25	; 0x05
   1293a:	84 83       	std	Z+4, r24	; 0x04
   1293c:	21 82       	std	Z+1, r2	; 0x01
   1293e:	32 82       	std	Z+2, r3	; 0x02
   12940:	43 82       	std	Z+3, r4	; 0x03
   12942:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   12946:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   1294a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   1294e:	42 81       	ldd	r20, Z+2	; 0x02
   12950:	53 81       	ldd	r21, Z+3	; 0x03
   12952:	64 e0       	ldi	r22, 0x04	; 4
   12954:	82 e1       	ldi	r24, 0x12	; 18
   12956:	27 df       	rcall	.-434    	; 0x127a6 <print_tok_str>
   12958:	e9 85       	ldd	r30, Y+9	; 0x09
   1295a:	fa 85       	ldd	r31, Y+10	; 0x0a
   1295c:	21 81       	ldd	r18, Z+1	; 0x01
   1295e:	30 e0       	ldi	r19, 0x00	; 0
   12960:	40 e0       	ldi	r20, 0x00	; 0
   12962:	50 e0       	ldi	r21, 0x00	; 0
   12964:	64 e0       	ldi	r22, 0x04	; 4
   12966:	81 e0       	ldi	r24, 0x01	; 1
   12968:	de de       	rcall	.-580    	; 0x12726 <print_tok_val>
   1296a:	e9 85       	ldd	r30, Y+9	; 0x09
   1296c:	fa 85       	ldd	r31, Y+10	; 0x0a
   1296e:	22 81       	ldd	r18, Z+2	; 0x02
   12970:	30 e0       	ldi	r19, 0x00	; 0
   12972:	40 e0       	ldi	r20, 0x00	; 0
   12974:	50 e0       	ldi	r21, 0x00	; 0
   12976:	64 e0       	ldi	r22, 0x04	; 4
   12978:	8f e1       	ldi	r24, 0x1F	; 31
   1297a:	d5 de       	rcall	.-598    	; 0x12726 <print_tok_val>
   1297c:	e9 85       	ldd	r30, Y+9	; 0x09
   1297e:	fa 85       	ldd	r31, Y+10	; 0x0a
   12980:	23 81       	ldd	r18, Z+3	; 0x03
   12982:	34 81       	ldd	r19, Z+4	; 0x04
   12984:	45 81       	ldd	r20, Z+5	; 0x05
   12986:	56 81       	ldd	r21, Z+6	; 0x06
   12988:	64 e0       	ldi	r22, 0x04	; 4
   1298a:	83 e0       	ldi	r24, 0x03	; 3
   1298c:	cc de       	rcall	.-616    	; 0x12726 <print_tok_val>
   1298e:	e9 85       	ldd	r30, Y+9	; 0x09
   12990:	fa 85       	ldd	r31, Y+10	; 0x0a
   12992:	80 81       	ld	r24, Z
   12994:	84 30       	cpi	r24, 0x04	; 4
   12996:	81 f4       	brne	.+32     	; 0x129b8 <display_Addresses+0x15c>
   12998:	ed b7       	in	r30, 0x3d	; 61
   1299a:	fe b7       	in	r31, 0x3e	; 62
   1299c:	61 82       	std	Z+1, r6	; 0x01
   1299e:	72 82       	std	Z+2, r7	; 0x02
   129a0:	83 82       	std	Z+3, r8	; 0x03
   129a2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   129a6:	e9 85       	ldd	r30, Y+9	; 0x09
   129a8:	fa 85       	ldd	r31, Y+10	; 0x0a
   129aa:	21 81       	ldd	r18, Z+1	; 0x01
   129ac:	30 e0       	ldi	r19, 0x00	; 0
   129ae:	40 e0       	ldi	r20, 0x00	; 0
   129b0:	50 e0       	ldi	r21, 0x00	; 0
   129b2:	64 e0       	ldi	r22, 0x04	; 4
   129b4:	81 e0       	ldi	r24, 0x01	; 1
   129b6:	b7 de       	rcall	.-658    	; 0x12726 <print_tok_val>
   129b8:	ed b7       	in	r30, 0x3d	; 61
   129ba:	fe b7       	in	r31, 0x3e	; 62
   129bc:	c1 82       	std	Z+1, r12	; 0x01
   129be:	d2 82       	std	Z+2, r13	; 0x02
   129c0:	e3 82       	std	Z+3, r14	; 0x03
   129c2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   129c6:	29 85       	ldd	r18, Y+9	; 0x09
   129c8:	3a 85       	ldd	r19, Y+10	; 0x0a
   129ca:	25 5d       	subi	r18, 0xD5	; 213
   129cc:	3f 4f       	sbci	r19, 0xFF	; 255
   129ce:	3a 87       	std	Y+10, r19	; 0x0a
   129d0:	29 87       	std	Y+9, r18	; 0x09
   129d2:	2b 5e       	subi	r18, 0xEB	; 235
   129d4:	30 42       	sbci	r19, 0x20	; 32
   129d6:	09 f0       	breq	.+2      	; 0x129da <display_Addresses+0x17e>
   129d8:	75 cf       	rjmp	.-278    	; 0x128c4 <display_Addresses+0x68>
   129da:	8b e9       	ldi	r24, 0x9B	; 155
   129dc:	99 e1       	ldi	r25, 0x19	; 25
   129de:	a0 e0       	ldi	r26, 0x00	; 0
   129e0:	ed b7       	in	r30, 0x3d	; 61
   129e2:	fe b7       	in	r31, 0x3e	; 62
   129e4:	81 83       	std	Z+1, r24	; 0x01
   129e6:	92 83       	std	Z+2, r25	; 0x02
   129e8:	a3 83       	std	Z+3, r26	; 0x03
   129ea:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   129ee:	2a 96       	adiw	r28, 0x0a	; 10
   129f0:	0f b6       	in	r0, 0x3f	; 63
   129f2:	f8 94       	cli
   129f4:	de bf       	out	0x3e, r29	; 62
   129f6:	0f be       	out	0x3f, r0	; 63
   129f8:	cd bf       	out	0x3d, r28	; 61
   129fa:	df 91       	pop	r29
   129fc:	cf 91       	pop	r28
   129fe:	ef 90       	pop	r14
   12a00:	df 90       	pop	r13
   12a02:	cf 90       	pop	r12
   12a04:	8f 90       	pop	r8
   12a06:	7f 90       	pop	r7
   12a08:	6f 90       	pop	r6
   12a0a:	4f 90       	pop	r4
   12a0c:	3f 90       	pop	r3
   12a0e:	2f 90       	pop	r2
   12a10:	08 95       	ret

00012a12 <display_Config>:
   12a12:	2f 92       	push	r2
   12a14:	3f 92       	push	r3
   12a16:	4f 92       	push	r4
   12a18:	6f 92       	push	r6
   12a1a:	7f 92       	push	r7
   12a1c:	8f 92       	push	r8
   12a1e:	af 92       	push	r10
   12a20:	bf 92       	push	r11
   12a22:	cf 92       	push	r12
   12a24:	df 92       	push	r13
   12a26:	ef 92       	push	r14
   12a28:	0f 93       	push	r16
   12a2a:	1f 93       	push	r17
   12a2c:	cf 93       	push	r28
   12a2e:	df 93       	push	r29
   12a30:	cd b7       	in	r28, 0x3d	; 61
   12a32:	de b7       	in	r29, 0x3e	; 62
   12a34:	62 97       	sbiw	r28, 0x12	; 18
   12a36:	0f b6       	in	r0, 0x3f	; 63
   12a38:	f8 94       	cli
   12a3a:	de bf       	out	0x3e, r29	; 62
   12a3c:	0f be       	out	0x3f, r0	; 63
   12a3e:	cd bf       	out	0x3d, r28	; 61
   12a40:	5c 01       	movw	r10, r24
   12a42:	8b e7       	ldi	r24, 0x7B	; 123
   12a44:	99 e1       	ldi	r25, 0x19	; 25
   12a46:	a0 e0       	ldi	r26, 0x00	; 0
   12a48:	ed b7       	in	r30, 0x3d	; 61
   12a4a:	fe b7       	in	r31, 0x3e	; 62
   12a4c:	81 83       	std	Z+1, r24	; 0x01
   12a4e:	92 83       	std	Z+2, r25	; 0x02
   12a50:	a3 83       	std	Z+3, r26	; 0x03
   12a52:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   12a56:	07 ee       	ldi	r16, 0xE7	; 231
   12a58:	1e e1       	ldi	r17, 0x1E	; 30
   12a5a:	80 e0       	ldi	r24, 0x00	; 0
   12a5c:	99 e1       	ldi	r25, 0x19	; 25
   12a5e:	9c 01       	movw	r18, r24
   12a60:	40 e0       	ldi	r20, 0x00	; 0
   12a62:	28 87       	std	Y+8, r18	; 0x08
   12a64:	39 87       	std	Y+9, r19	; 0x09
   12a66:	4a 87       	std	Y+10, r20	; 0x0a
   12a68:	85 e3       	ldi	r24, 0x35	; 53
   12a6a:	99 e1       	ldi	r25, 0x19	; 25
   12a6c:	9c 01       	movw	r18, r24
   12a6e:	40 e0       	ldi	r20, 0x00	; 0
   12a70:	2b 87       	std	Y+11, r18	; 0x0b
   12a72:	3c 87       	std	Y+12, r19	; 0x0c
   12a74:	4d 87       	std	Y+13, r20	; 0x0d
   12a76:	86 e1       	ldi	r24, 0x16	; 22
   12a78:	99 e1       	ldi	r25, 0x19	; 25
   12a7a:	9c 01       	movw	r18, r24
   12a7c:	40 e0       	ldi	r20, 0x00	; 0
   12a7e:	2e 87       	std	Y+14, r18	; 0x0e
   12a80:	3f 87       	std	Y+15, r19	; 0x0f
   12a82:	48 8b       	std	Y+16, r20	; 0x10
   12a84:	82 e0       	ldi	r24, 0x02	; 2
   12a86:	99 e1       	ldi	r25, 0x19	; 25
   12a88:	1c 01       	movw	r2, r24
   12a8a:	41 2c       	mov	r4, r1
   12a8c:	82 e7       	ldi	r24, 0x72	; 114
   12a8e:	99 e1       	ldi	r25, 0x19	; 25
   12a90:	6c 01       	movw	r12, r24
   12a92:	e1 2c       	mov	r14, r1
   12a94:	83 e5       	ldi	r24, 0x53	; 83
   12a96:	99 e1       	ldi	r25, 0x19	; 25
   12a98:	3c 01       	movw	r6, r24
   12a9a:	81 2c       	mov	r8, r1
   12a9c:	f8 01       	movw	r30, r16
   12a9e:	80 81       	ld	r24, Z
   12aa0:	88 23       	and	r24, r24
   12aa2:	09 f4       	brne	.+2      	; 0x12aa6 <display_Config+0x94>
   12aa4:	14 c2       	rjmp	.+1064   	; 0x12ece <display_Config+0x4bc>
   12aa6:	83 30       	cpi	r24, 0x03	; 3
   12aa8:	09 f0       	breq	.+2      	; 0x12aac <display_Config+0x9a>
   12aaa:	38 c1       	rjmp	.+624    	; 0x12d1c <display_Config+0x30a>
   12aac:	27 a1       	ldd	r18, Z+39	; 0x27
   12aae:	30 a5       	ldd	r19, Z+40	; 0x28
   12ab0:	3a 8b       	std	Y+18, r19	; 0x12
   12ab2:	29 8b       	std	Y+17, r18	; 0x11
   12ab4:	c8 01       	movw	r24, r16
   12ab6:	07 96       	adiw	r24, 0x07	; 7
   12ab8:	ed b7       	in	r30, 0x3d	; 61
   12aba:	fe b7       	in	r31, 0x3e	; 62
   12abc:	95 83       	std	Z+5, r25	; 0x05
   12abe:	84 83       	std	Z+4, r24	; 0x04
   12ac0:	c1 82       	std	Z+1, r12	; 0x01
   12ac2:	d2 82       	std	Z+2, r13	; 0x02
   12ac4:	e3 82       	std	Z+3, r14	; 0x03
   12ac6:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   12aca:	e9 89       	ldd	r30, Y+17	; 0x11
   12acc:	fa 89       	ldd	r31, Y+18	; 0x12
   12ace:	80 81       	ld	r24, Z
   12ad0:	90 e0       	ldi	r25, 0x00	; 0
   12ad2:	ed b7       	in	r30, 0x3d	; 61
   12ad4:	fe b7       	in	r31, 0x3e	; 62
   12ad6:	95 83       	std	Z+5, r25	; 0x05
   12ad8:	84 83       	std	Z+4, r24	; 0x04
   12ada:	61 82       	std	Z+1, r6	; 0x01
   12adc:	72 82       	std	Z+2, r7	; 0x02
   12ade:	83 82       	std	Z+3, r8	; 0x03
   12ae0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   12ae4:	64 e0       	ldi	r22, 0x04	; 4
   12ae6:	89 e0       	ldi	r24, 0x09	; 9
   12ae8:	93 de       	rcall	.-730    	; 0x12810 <print_tok>
   12aea:	e9 89       	ldd	r30, Y+17	; 0x11
   12aec:	fa 89       	ldd	r31, Y+18	; 0x12
   12aee:	20 81       	ld	r18, Z
   12af0:	30 e0       	ldi	r19, 0x00	; 0
   12af2:	40 e0       	ldi	r20, 0x00	; 0
   12af4:	50 e0       	ldi	r21, 0x00	; 0
   12af6:	68 e0       	ldi	r22, 0x08	; 8
   12af8:	81 e0       	ldi	r24, 0x01	; 1
   12afa:	15 de       	rcall	.-982    	; 0x12726 <print_tok_val>
   12afc:	e9 89       	ldd	r30, Y+17	; 0x11
   12afe:	fa 89       	ldd	r31, Y+18	; 0x12
   12b00:	21 81       	ldd	r18, Z+1	; 0x01
   12b02:	30 e0       	ldi	r19, 0x00	; 0
   12b04:	40 e0       	ldi	r20, 0x00	; 0
   12b06:	50 e0       	ldi	r21, 0x00	; 0
   12b08:	68 e0       	ldi	r22, 0x08	; 8
   12b0a:	8f e1       	ldi	r24, 0x1F	; 31
   12b0c:	0c de       	rcall	.-1000   	; 0x12726 <print_tok_val>
   12b0e:	e9 89       	ldd	r30, Y+17	; 0x11
   12b10:	fa 89       	ldd	r31, Y+18	; 0x12
   12b12:	42 81       	ldd	r20, Z+2	; 0x02
   12b14:	53 81       	ldd	r21, Z+3	; 0x03
   12b16:	68 e0       	ldi	r22, 0x08	; 8
   12b18:	82 e1       	ldi	r24, 0x12	; 18
   12b1a:	45 de       	rcall	.-886    	; 0x127a6 <print_tok_str>
   12b1c:	64 e0       	ldi	r22, 0x04	; 4
   12b1e:	81 e1       	ldi	r24, 0x11	; 17
   12b20:	77 de       	rcall	.-786    	; 0x12810 <print_tok>
   12b22:	64 e0       	ldi	r22, 0x04	; 4
   12b24:	85 e1       	ldi	r24, 0x15	; 21
   12b26:	74 de       	rcall	.-792    	; 0x12810 <print_tok>
   12b28:	e9 89       	ldd	r30, Y+17	; 0x11
   12b2a:	fa 89       	ldd	r31, Y+18	; 0x12
   12b2c:	24 81       	ldd	r18, Z+4	; 0x04
   12b2e:	35 81       	ldd	r19, Z+5	; 0x05
   12b30:	40 e0       	ldi	r20, 0x00	; 0
   12b32:	50 e0       	ldi	r21, 0x00	; 0
   12b34:	68 e0       	ldi	r22, 0x08	; 8
   12b36:	87 e1       	ldi	r24, 0x17	; 23
   12b38:	f6 dd       	rcall	.-1044   	; 0x12726 <print_tok_val>
   12b3a:	64 e0       	ldi	r22, 0x04	; 4
   12b3c:	81 e1       	ldi	r24, 0x11	; 17
   12b3e:	68 de       	rcall	.-816    	; 0x12810 <print_tok>
   12b40:	a1 14       	cp	r10, r1
   12b42:	b1 04       	cpc	r11, r1
   12b44:	09 f1       	breq	.+66     	; 0x12b88 <display_Config+0x176>
   12b46:	64 e0       	ldi	r22, 0x04	; 4
   12b48:	8b e0       	ldi	r24, 0x0B	; 11
   12b4a:	62 de       	rcall	.-828    	; 0x12810 <print_tok>
   12b4c:	e9 89       	ldd	r30, Y+17	; 0x11
   12b4e:	fa 89       	ldd	r31, Y+18	; 0x12
   12b50:	26 81       	ldd	r18, Z+6	; 0x06
   12b52:	37 81       	ldd	r19, Z+7	; 0x07
   12b54:	40 e0       	ldi	r20, 0x00	; 0
   12b56:	50 e0       	ldi	r21, 0x00	; 0
   12b58:	68 e0       	ldi	r22, 0x08	; 8
   12b5a:	88 e2       	ldi	r24, 0x28	; 40
   12b5c:	e4 dd       	rcall	.-1080   	; 0x12726 <print_tok_val>
   12b5e:	e9 89       	ldd	r30, Y+17	; 0x11
   12b60:	fa 89       	ldd	r31, Y+18	; 0x12
   12b62:	20 85       	ldd	r18, Z+8	; 0x08
   12b64:	31 85       	ldd	r19, Z+9	; 0x09
   12b66:	40 e0       	ldi	r20, 0x00	; 0
   12b68:	50 e0       	ldi	r21, 0x00	; 0
   12b6a:	68 e0       	ldi	r22, 0x08	; 8
   12b6c:	85 e2       	ldi	r24, 0x25	; 37
   12b6e:	db dd       	rcall	.-1098   	; 0x12726 <print_tok_val>
   12b70:	e9 89       	ldd	r30, Y+17	; 0x11
   12b72:	fa 89       	ldd	r31, Y+18	; 0x12
   12b74:	22 85       	ldd	r18, Z+10	; 0x0a
   12b76:	30 e0       	ldi	r19, 0x00	; 0
   12b78:	40 e0       	ldi	r20, 0x00	; 0
   12b7a:	50 e0       	ldi	r21, 0x00	; 0
   12b7c:	68 e0       	ldi	r22, 0x08	; 8
   12b7e:	86 e2       	ldi	r24, 0x26	; 38
   12b80:	d2 dd       	rcall	.-1116   	; 0x12726 <print_tok_val>
   12b82:	64 e0       	ldi	r22, 0x04	; 4
   12b84:	81 e1       	ldi	r24, 0x11	; 17
   12b86:	44 de       	rcall	.-888    	; 0x12810 <print_tok>
   12b88:	64 e0       	ldi	r22, 0x04	; 4
   12b8a:	87 e2       	ldi	r24, 0x27	; 39
   12b8c:	41 de       	rcall	.-894    	; 0x12810 <print_tok>
   12b8e:	a1 14       	cp	r10, r1
   12b90:	b1 04       	cpc	r11, r1
   12b92:	49 f0       	breq	.+18     	; 0x12ba6 <display_Config+0x194>
   12b94:	e9 89       	ldd	r30, Y+17	; 0x11
   12b96:	fa 89       	ldd	r31, Y+18	; 0x12
   12b98:	23 85       	ldd	r18, Z+11	; 0x0b
   12b9a:	30 e0       	ldi	r19, 0x00	; 0
   12b9c:	40 e0       	ldi	r20, 0x00	; 0
   12b9e:	50 e0       	ldi	r21, 0x00	; 0
   12ba0:	68 e0       	ldi	r22, 0x08	; 8
   12ba2:	89 e2       	ldi	r24, 0x29	; 41
   12ba4:	c0 dd       	rcall	.-1152   	; 0x12726 <print_tok_val>
   12ba6:	e9 89       	ldd	r30, Y+17	; 0x11
   12ba8:	fa 89       	ldd	r31, Y+18	; 0x12
   12baa:	24 85       	ldd	r18, Z+12	; 0x0c
   12bac:	35 85       	ldd	r19, Z+13	; 0x0d
   12bae:	46 85       	ldd	r20, Z+14	; 0x0e
   12bb0:	57 85       	ldd	r21, Z+15	; 0x0f
   12bb2:	68 e0       	ldi	r22, 0x08	; 8
   12bb4:	8f e0       	ldi	r24, 0x0F	; 15
   12bb6:	b7 dd       	rcall	.-1170   	; 0x12726 <print_tok_val>
   12bb8:	a1 14       	cp	r10, r1
   12bba:	b1 04       	cpc	r11, r1
   12bbc:	09 f4       	brne	.+2      	; 0x12bc0 <display_Config+0x1ae>
   12bbe:	5a c0       	rjmp	.+180    	; 0x12c74 <display_Config+0x262>
   12bc0:	e9 89       	ldd	r30, Y+17	; 0x11
   12bc2:	fa 89       	ldd	r31, Y+18	; 0x12
   12bc4:	20 89       	ldd	r18, Z+16	; 0x10
   12bc6:	31 89       	ldd	r19, Z+17	; 0x11
   12bc8:	40 e0       	ldi	r20, 0x00	; 0
   12bca:	50 e0       	ldi	r21, 0x00	; 0
   12bcc:	68 e0       	ldi	r22, 0x08	; 8
   12bce:	87 e0       	ldi	r24, 0x07	; 7
   12bd0:	aa dd       	rcall	.-1196   	; 0x12726 <print_tok_val>
   12bd2:	e9 89       	ldd	r30, Y+17	; 0x11
   12bd4:	fa 89       	ldd	r31, Y+18	; 0x12
   12bd6:	22 89       	ldd	r18, Z+18	; 0x12
   12bd8:	30 e0       	ldi	r19, 0x00	; 0
   12bda:	40 e0       	ldi	r20, 0x00	; 0
   12bdc:	50 e0       	ldi	r21, 0x00	; 0
   12bde:	68 e0       	ldi	r22, 0x08	; 8
   12be0:	85 e0       	ldi	r24, 0x05	; 5
   12be2:	a1 dd       	rcall	.-1214   	; 0x12726 <print_tok_val>
   12be4:	e9 89       	ldd	r30, Y+17	; 0x11
   12be6:	fa 89       	ldd	r31, Y+18	; 0x12
   12be8:	23 89       	ldd	r18, Z+19	; 0x13
   12bea:	30 e0       	ldi	r19, 0x00	; 0
   12bec:	40 e0       	ldi	r20, 0x00	; 0
   12bee:	50 e0       	ldi	r21, 0x00	; 0
   12bf0:	68 e0       	ldi	r22, 0x08	; 8
   12bf2:	86 e0       	ldi	r24, 0x06	; 6
   12bf4:	98 dd       	rcall	.-1232   	; 0x12726 <print_tok_val>
   12bf6:	e9 89       	ldd	r30, Y+17	; 0x11
   12bf8:	fa 89       	ldd	r31, Y+18	; 0x12
   12bfa:	24 89       	ldd	r18, Z+20	; 0x14
   12bfc:	35 89       	ldd	r19, Z+21	; 0x15
   12bfe:	40 e0       	ldi	r20, 0x00	; 0
   12c00:	50 e0       	ldi	r21, 0x00	; 0
   12c02:	68 e0       	ldi	r22, 0x08	; 8
   12c04:	84 e0       	ldi	r24, 0x04	; 4
   12c06:	8f dd       	rcall	.-1250   	; 0x12726 <print_tok_val>
   12c08:	e9 89       	ldd	r30, Y+17	; 0x11
   12c0a:	fa 89       	ldd	r31, Y+18	; 0x12
   12c0c:	26 89       	ldd	r18, Z+22	; 0x16
   12c0e:	37 89       	ldd	r19, Z+23	; 0x17
   12c10:	40 e0       	ldi	r20, 0x00	; 0
   12c12:	50 e0       	ldi	r21, 0x00	; 0
   12c14:	68 e0       	ldi	r22, 0x08	; 8
   12c16:	8a e0       	ldi	r24, 0x0A	; 10
   12c18:	86 dd       	rcall	.-1268   	; 0x12726 <print_tok_val>
   12c1a:	e9 89       	ldd	r30, Y+17	; 0x11
   12c1c:	fa 89       	ldd	r31, Y+18	; 0x12
   12c1e:	20 8d       	ldd	r18, Z+24	; 0x18
   12c20:	31 8d       	ldd	r19, Z+25	; 0x19
   12c22:	40 e0       	ldi	r20, 0x00	; 0
   12c24:	50 e0       	ldi	r21, 0x00	; 0
   12c26:	68 e0       	ldi	r22, 0x08	; 8
   12c28:	8e e1       	ldi	r24, 0x1E	; 30
   12c2a:	7d dd       	rcall	.-1286   	; 0x12726 <print_tok_val>
   12c2c:	e9 89       	ldd	r30, Y+17	; 0x11
   12c2e:	fa 89       	ldd	r31, Y+18	; 0x12
   12c30:	22 8d       	ldd	r18, Z+26	; 0x1a
   12c32:	33 8d       	ldd	r19, Z+27	; 0x1b
   12c34:	40 e0       	ldi	r20, 0x00	; 0
   12c36:	50 e0       	ldi	r21, 0x00	; 0
   12c38:	68 e0       	ldi	r22, 0x08	; 8
   12c3a:	80 e0       	ldi	r24, 0x00	; 0
   12c3c:	74 dd       	rcall	.-1304   	; 0x12726 <print_tok_val>
   12c3e:	e9 89       	ldd	r30, Y+17	; 0x11
   12c40:	fa 89       	ldd	r31, Y+18	; 0x12
   12c42:	24 8d       	ldd	r18, Z+28	; 0x1c
   12c44:	30 e0       	ldi	r19, 0x00	; 0
   12c46:	40 e0       	ldi	r20, 0x00	; 0
   12c48:	50 e0       	ldi	r21, 0x00	; 0
   12c4a:	68 e0       	ldi	r22, 0x08	; 8
   12c4c:	8c e1       	ldi	r24, 0x1C	; 28
   12c4e:	6b dd       	rcall	.-1322   	; 0x12726 <print_tok_val>
   12c50:	e9 89       	ldd	r30, Y+17	; 0x11
   12c52:	fa 89       	ldd	r31, Y+18	; 0x12
   12c54:	25 8d       	ldd	r18, Z+29	; 0x1d
   12c56:	30 e0       	ldi	r19, 0x00	; 0
   12c58:	40 e0       	ldi	r20, 0x00	; 0
   12c5a:	50 e0       	ldi	r21, 0x00	; 0
   12c5c:	68 e0       	ldi	r22, 0x08	; 8
   12c5e:	83 e1       	ldi	r24, 0x13	; 19
   12c60:	62 dd       	rcall	.-1340   	; 0x12726 <print_tok_val>
   12c62:	e9 89       	ldd	r30, Y+17	; 0x11
   12c64:	fa 89       	ldd	r31, Y+18	; 0x12
   12c66:	26 8d       	ldd	r18, Z+30	; 0x1e
   12c68:	30 e0       	ldi	r19, 0x00	; 0
   12c6a:	40 e0       	ldi	r20, 0x00	; 0
   12c6c:	50 e0       	ldi	r21, 0x00	; 0
   12c6e:	68 e0       	ldi	r22, 0x08	; 8
   12c70:	81 e2       	ldi	r24, 0x21	; 33
   12c72:	59 dd       	rcall	.-1358   	; 0x12726 <print_tok_val>
   12c74:	64 e0       	ldi	r22, 0x04	; 4
   12c76:	81 e1       	ldi	r24, 0x11	; 17
   12c78:	cb dd       	rcall	.-1130   	; 0x12810 <print_tok>
   12c7a:	a1 14       	cp	r10, r1
   12c7c:	b1 04       	cpc	r11, r1
   12c7e:	99 f1       	breq	.+102    	; 0x12ce6 <display_Config+0x2d4>
   12c80:	64 e0       	ldi	r22, 0x04	; 4
   12c82:	8a e2       	ldi	r24, 0x2A	; 42
   12c84:	c5 dd       	rcall	.-1142   	; 0x12810 <print_tok>
   12c86:	e9 89       	ldd	r30, Y+17	; 0x11
   12c88:	fa 89       	ldd	r31, Y+18	; 0x12
   12c8a:	27 8d       	ldd	r18, Z+31	; 0x1f
   12c8c:	30 a1       	ldd	r19, Z+32	; 0x20
   12c8e:	41 a1       	ldd	r20, Z+33	; 0x21
   12c90:	52 a1       	ldd	r21, Z+34	; 0x22
   12c92:	68 e0       	ldi	r22, 0x08	; 8
   12c94:	8a e1       	ldi	r24, 0x1A	; 26
   12c96:	47 dd       	rcall	.-1394   	; 0x12726 <print_tok_val>
   12c98:	e9 89       	ldd	r30, Y+17	; 0x11
   12c9a:	fa 89       	ldd	r31, Y+18	; 0x12
   12c9c:	23 a1       	ldd	r18, Z+35	; 0x23
   12c9e:	30 e0       	ldi	r19, 0x00	; 0
   12ca0:	40 e0       	ldi	r20, 0x00	; 0
   12ca2:	50 e0       	ldi	r21, 0x00	; 0
   12ca4:	68 e0       	ldi	r22, 0x08	; 8
   12ca6:	8b e1       	ldi	r24, 0x1B	; 27
   12ca8:	3e dd       	rcall	.-1412   	; 0x12726 <print_tok_val>
   12caa:	e9 89       	ldd	r30, Y+17	; 0x11
   12cac:	fa 89       	ldd	r31, Y+18	; 0x12
   12cae:	24 a1       	ldd	r18, Z+36	; 0x24
   12cb0:	35 a1       	ldd	r19, Z+37	; 0x25
   12cb2:	40 e0       	ldi	r20, 0x00	; 0
   12cb4:	50 e0       	ldi	r21, 0x00	; 0
   12cb6:	68 e0       	ldi	r22, 0x08	; 8
   12cb8:	8d e1       	ldi	r24, 0x1D	; 29
   12cba:	35 dd       	rcall	.-1430   	; 0x12726 <print_tok_val>
   12cbc:	e9 89       	ldd	r30, Y+17	; 0x11
   12cbe:	fa 89       	ldd	r31, Y+18	; 0x12
   12cc0:	26 a1       	ldd	r18, Z+38	; 0x26
   12cc2:	37 a1       	ldd	r19, Z+39	; 0x27
   12cc4:	40 a5       	ldd	r20, Z+40	; 0x28
   12cc6:	51 a5       	ldd	r21, Z+41	; 0x29
   12cc8:	68 e0       	ldi	r22, 0x08	; 8
   12cca:	89 e1       	ldi	r24, 0x19	; 25
   12ccc:	2c dd       	rcall	.-1448   	; 0x12726 <print_tok_val>
   12cce:	e9 89       	ldd	r30, Y+17	; 0x11
   12cd0:	fa 89       	ldd	r31, Y+18	; 0x12
   12cd2:	22 a5       	ldd	r18, Z+42	; 0x2a
   12cd4:	30 e0       	ldi	r19, 0x00	; 0
   12cd6:	40 e0       	ldi	r20, 0x00	; 0
   12cd8:	50 e0       	ldi	r21, 0x00	; 0
   12cda:	68 e0       	ldi	r22, 0x08	; 8
   12cdc:	88 e1       	ldi	r24, 0x18	; 24
   12cde:	23 dd       	rcall	.-1466   	; 0x12726 <print_tok_val>
   12ce0:	64 e0       	ldi	r22, 0x04	; 4
   12ce2:	81 e1       	ldi	r24, 0x11	; 17
   12ce4:	95 dd       	rcall	.-1238   	; 0x12810 <print_tok>
   12ce6:	e9 89       	ldd	r30, Y+17	; 0x11
   12ce8:	fa 89       	ldd	r31, Y+18	; 0x12
   12cea:	86 a1       	ldd	r24, Z+38	; 0x26
   12cec:	97 a1       	ldd	r25, Z+39	; 0x27
   12cee:	a0 a5       	ldd	r26, Z+40	; 0x28
   12cf0:	b1 a5       	ldd	r27, Z+41	; 0x29
   12cf2:	01 96       	adiw	r24, 0x01	; 1
   12cf4:	a1 1d       	adc	r26, r1
   12cf6:	b1 1d       	adc	r27, r1
   12cf8:	ed b7       	in	r30, 0x3d	; 61
   12cfa:	fe b7       	in	r31, 0x3e	; 62
   12cfc:	84 83       	std	Z+4, r24	; 0x04
   12cfe:	95 83       	std	Z+5, r25	; 0x05
   12d00:	a6 83       	std	Z+6, r26	; 0x06
   12d02:	b7 83       	std	Z+7, r27	; 0x07
   12d04:	2f e3       	ldi	r18, 0x3F	; 63
   12d06:	39 e1       	ldi	r19, 0x19	; 25
   12d08:	c9 01       	movw	r24, r18
   12d0a:	a0 e0       	ldi	r26, 0x00	; 0
   12d0c:	81 83       	std	Z+1, r24	; 0x01
   12d0e:	92 83       	std	Z+2, r25	; 0x02
   12d10:	a3 83       	std	Z+3, r26	; 0x03
   12d12:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   12d16:	60 e0       	ldi	r22, 0x00	; 0
   12d18:	81 e1       	ldi	r24, 0x11	; 17
   12d1a:	7a dd       	rcall	.-1292   	; 0x12810 <print_tok>
   12d1c:	f8 01       	movw	r30, r16
   12d1e:	80 81       	ld	r24, Z
   12d20:	81 30       	cpi	r24, 0x01	; 1
   12d22:	09 f0       	breq	.+2      	; 0x12d26 <display_Config+0x314>
   12d24:	ad c0       	rjmp	.+346    	; 0x12e80 <display_Config+0x46e>
   12d26:	27 a1       	ldd	r18, Z+39	; 0x27
   12d28:	30 a5       	ldd	r19, Z+40	; 0x28
   12d2a:	3a 8b       	std	Y+18, r19	; 0x12
   12d2c:	29 8b       	std	Y+17, r18	; 0x11
   12d2e:	c8 01       	movw	r24, r16
   12d30:	07 96       	adiw	r24, 0x07	; 7
   12d32:	ed b7       	in	r30, 0x3d	; 61
   12d34:	fe b7       	in	r31, 0x3e	; 62
   12d36:	95 83       	std	Z+5, r25	; 0x05
   12d38:	84 83       	std	Z+4, r24	; 0x04
   12d3a:	2b 85       	ldd	r18, Y+11	; 0x0b
   12d3c:	3c 85       	ldd	r19, Y+12	; 0x0c
   12d3e:	4d 85       	ldd	r20, Y+13	; 0x0d
   12d40:	21 83       	std	Z+1, r18	; 0x01
   12d42:	32 83       	std	Z+2, r19	; 0x02
   12d44:	43 83       	std	Z+3, r20	; 0x03
   12d46:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   12d4a:	e9 89       	ldd	r30, Y+17	; 0x11
   12d4c:	fa 89       	ldd	r31, Y+18	; 0x12
   12d4e:	80 81       	ld	r24, Z
   12d50:	90 e0       	ldi	r25, 0x00	; 0
   12d52:	ed b7       	in	r30, 0x3d	; 61
   12d54:	fe b7       	in	r31, 0x3e	; 62
   12d56:	95 83       	std	Z+5, r25	; 0x05
   12d58:	84 83       	std	Z+4, r24	; 0x04
   12d5a:	2e 85       	ldd	r18, Y+14	; 0x0e
   12d5c:	3f 85       	ldd	r19, Y+15	; 0x0f
   12d5e:	48 89       	ldd	r20, Y+16	; 0x10
   12d60:	21 83       	std	Z+1, r18	; 0x01
   12d62:	32 83       	std	Z+2, r19	; 0x02
   12d64:	43 83       	std	Z+3, r20	; 0x03
   12d66:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   12d6a:	64 e0       	ldi	r22, 0x04	; 4
   12d6c:	85 e1       	ldi	r24, 0x15	; 21
   12d6e:	50 dd       	rcall	.-1376   	; 0x12810 <print_tok>
   12d70:	e9 89       	ldd	r30, Y+17	; 0x11
   12d72:	fa 89       	ldd	r31, Y+18	; 0x12
   12d74:	20 81       	ld	r18, Z
   12d76:	30 e0       	ldi	r19, 0x00	; 0
   12d78:	40 e0       	ldi	r20, 0x00	; 0
   12d7a:	50 e0       	ldi	r21, 0x00	; 0
   12d7c:	68 e0       	ldi	r22, 0x08	; 8
   12d7e:	81 e0       	ldi	r24, 0x01	; 1
   12d80:	d2 dc       	rcall	.-1628   	; 0x12726 <print_tok_val>
   12d82:	e9 89       	ldd	r30, Y+17	; 0x11
   12d84:	fa 89       	ldd	r31, Y+18	; 0x12
   12d86:	21 81       	ldd	r18, Z+1	; 0x01
   12d88:	30 e0       	ldi	r19, 0x00	; 0
   12d8a:	40 e0       	ldi	r20, 0x00	; 0
   12d8c:	50 e0       	ldi	r21, 0x00	; 0
   12d8e:	68 e0       	ldi	r22, 0x08	; 8
   12d90:	8f e1       	ldi	r24, 0x1F	; 31
   12d92:	c9 dc       	rcall	.-1646   	; 0x12726 <print_tok_val>
   12d94:	e9 89       	ldd	r30, Y+17	; 0x11
   12d96:	fa 89       	ldd	r31, Y+18	; 0x12
   12d98:	42 81       	ldd	r20, Z+2	; 0x02
   12d9a:	53 81       	ldd	r21, Z+3	; 0x03
   12d9c:	68 e0       	ldi	r22, 0x08	; 8
   12d9e:	82 e1       	ldi	r24, 0x12	; 18
   12da0:	02 dd       	rcall	.-1532   	; 0x127a6 <print_tok_str>
   12da2:	64 e0       	ldi	r22, 0x04	; 4
   12da4:	81 e1       	ldi	r24, 0x11	; 17
   12da6:	34 dd       	rcall	.-1432   	; 0x12810 <print_tok>
   12da8:	64 e0       	ldi	r22, 0x04	; 4
   12daa:	89 e0       	ldi	r24, 0x09	; 9
   12dac:	31 dd       	rcall	.-1438   	; 0x12810 <print_tok>
   12dae:	e9 89       	ldd	r30, Y+17	; 0x11
   12db0:	fa 89       	ldd	r31, Y+18	; 0x12
   12db2:	24 81       	ldd	r18, Z+4	; 0x04
   12db4:	35 81       	ldd	r19, Z+5	; 0x05
   12db6:	40 e0       	ldi	r20, 0x00	; 0
   12db8:	50 e0       	ldi	r21, 0x00	; 0
   12dba:	68 e0       	ldi	r22, 0x08	; 8
   12dbc:	87 e1       	ldi	r24, 0x17	; 23
   12dbe:	b3 dc       	rcall	.-1690   	; 0x12726 <print_tok_val>
   12dc0:	64 e0       	ldi	r22, 0x04	; 4
   12dc2:	81 e1       	ldi	r24, 0x11	; 17
   12dc4:	25 dd       	rcall	.-1462   	; 0x12810 <print_tok>
   12dc6:	a1 14       	cp	r10, r1
   12dc8:	b1 04       	cpc	r11, r1
   12dca:	91 f1       	breq	.+100    	; 0x12e30 <display_Config+0x41e>
   12dcc:	64 e0       	ldi	r22, 0x04	; 4
   12dce:	84 e1       	ldi	r24, 0x14	; 20
   12dd0:	1f dd       	rcall	.-1474   	; 0x12810 <print_tok>
   12dd2:	e9 89       	ldd	r30, Y+17	; 0x11
   12dd4:	fa 89       	ldd	r31, Y+18	; 0x12
   12dd6:	26 81       	ldd	r18, Z+6	; 0x06
   12dd8:	37 81       	ldd	r19, Z+7	; 0x07
   12dda:	03 2e       	mov	r0, r19
   12ddc:	00 0c       	add	r0, r0
   12dde:	44 0b       	sbc	r20, r20
   12de0:	55 0b       	sbc	r21, r21
   12de2:	68 e0       	ldi	r22, 0x08	; 8
   12de4:	88 e0       	ldi	r24, 0x08	; 8
   12de6:	9f dc       	rcall	.-1730   	; 0x12726 <print_tok_val>
   12de8:	e9 89       	ldd	r30, Y+17	; 0x11
   12dea:	fa 89       	ldd	r31, Y+18	; 0x12
   12dec:	20 85       	ldd	r18, Z+8	; 0x08
   12dee:	31 85       	ldd	r19, Z+9	; 0x09
   12df0:	03 2e       	mov	r0, r19
   12df2:	00 0c       	add	r0, r0
   12df4:	44 0b       	sbc	r20, r20
   12df6:	55 0b       	sbc	r21, r21
   12df8:	68 e0       	ldi	r22, 0x08	; 8
   12dfa:	82 e2       	ldi	r24, 0x22	; 34
   12dfc:	94 dc       	rcall	.-1752   	; 0x12726 <print_tok_val>
   12dfe:	e9 89       	ldd	r30, Y+17	; 0x11
   12e00:	fa 89       	ldd	r31, Y+18	; 0x12
   12e02:	22 85       	ldd	r18, Z+10	; 0x0a
   12e04:	33 85       	ldd	r19, Z+11	; 0x0b
   12e06:	03 2e       	mov	r0, r19
   12e08:	00 0c       	add	r0, r0
   12e0a:	44 0b       	sbc	r20, r20
   12e0c:	55 0b       	sbc	r21, r21
   12e0e:	68 e0       	ldi	r22, 0x08	; 8
   12e10:	86 e1       	ldi	r24, 0x16	; 22
   12e12:	89 dc       	rcall	.-1774   	; 0x12726 <print_tok_val>
   12e14:	e9 89       	ldd	r30, Y+17	; 0x11
   12e16:	fa 89       	ldd	r31, Y+18	; 0x12
   12e18:	24 85       	ldd	r18, Z+12	; 0x0c
   12e1a:	35 85       	ldd	r19, Z+13	; 0x0d
   12e1c:	03 2e       	mov	r0, r19
   12e1e:	00 0c       	add	r0, r0
   12e20:	44 0b       	sbc	r20, r20
   12e22:	55 0b       	sbc	r21, r21
   12e24:	68 e0       	ldi	r22, 0x08	; 8
   12e26:	8d e0       	ldi	r24, 0x0D	; 13
   12e28:	7e dc       	rcall	.-1796   	; 0x12726 <print_tok_val>
   12e2a:	64 e0       	ldi	r22, 0x04	; 4
   12e2c:	81 e1       	ldi	r24, 0x11	; 17
   12e2e:	f0 dc       	rcall	.-1568   	; 0x12810 <print_tok>
   12e30:	e9 89       	ldd	r30, Y+17	; 0x11
   12e32:	fa 89       	ldd	r31, Y+18	; 0x12
   12e34:	44 85       	ldd	r20, Z+12	; 0x0c
   12e36:	55 85       	ldd	r21, Z+13	; 0x0d
   12e38:	20 85       	ldd	r18, Z+8	; 0x08
   12e3a:	31 85       	ldd	r19, Z+9	; 0x09
   12e3c:	42 9f       	mul	r20, r18
   12e3e:	c0 01       	movw	r24, r0
   12e40:	43 9f       	mul	r20, r19
   12e42:	90 0d       	add	r25, r0
   12e44:	52 9f       	mul	r21, r18
   12e46:	90 0d       	add	r25, r0
   12e48:	11 24       	eor	r1, r1
   12e4a:	42 85       	ldd	r20, Z+10	; 0x0a
   12e4c:	53 85       	ldd	r21, Z+11	; 0x0b
   12e4e:	84 9f       	mul	r24, r20
   12e50:	90 01       	movw	r18, r0
   12e52:	85 9f       	mul	r24, r21
   12e54:	30 0d       	add	r19, r0
   12e56:	94 9f       	mul	r25, r20
   12e58:	30 0d       	add	r19, r0
   12e5a:	11 24       	eor	r1, r1
   12e5c:	c9 01       	movw	r24, r18
   12e5e:	33 0f       	add	r19, r19
   12e60:	aa 0b       	sbc	r26, r26
   12e62:	bb 0b       	sbc	r27, r27
   12e64:	ed b7       	in	r30, 0x3d	; 61
   12e66:	fe b7       	in	r31, 0x3e	; 62
   12e68:	84 83       	std	Z+4, r24	; 0x04
   12e6a:	95 83       	std	Z+5, r25	; 0x05
   12e6c:	a6 83       	std	Z+6, r26	; 0x06
   12e6e:	b7 83       	std	Z+7, r27	; 0x07
   12e70:	21 82       	std	Z+1, r2	; 0x01
   12e72:	32 82       	std	Z+2, r3	; 0x02
   12e74:	43 82       	std	Z+3, r4	; 0x03
   12e76:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   12e7a:	60 e0       	ldi	r22, 0x00	; 0
   12e7c:	81 e1       	ldi	r24, 0x11	; 17
   12e7e:	c8 dc       	rcall	.-1648   	; 0x12810 <print_tok>
   12e80:	f8 01       	movw	r30, r16
   12e82:	80 81       	ld	r24, Z
   12e84:	84 30       	cpi	r24, 0x04	; 4
   12e86:	c9 f4       	brne	.+50     	; 0x12eba <display_Config+0x4a8>
   12e88:	27 a1       	ldd	r18, Z+39	; 0x27
   12e8a:	30 a5       	ldd	r19, Z+40	; 0x28
   12e8c:	3a 8b       	std	Y+18, r19	; 0x12
   12e8e:	29 8b       	std	Y+17, r18	; 0x11
   12e90:	60 e0       	ldi	r22, 0x00	; 0
   12e92:	80 e2       	ldi	r24, 0x20	; 32
   12e94:	bd dc       	rcall	.-1670   	; 0x12810 <print_tok>
   12e96:	64 e0       	ldi	r22, 0x04	; 4
   12e98:	89 e0       	ldi	r24, 0x09	; 9
   12e9a:	ba dc       	rcall	.-1676   	; 0x12810 <print_tok>
   12e9c:	e9 89       	ldd	r30, Y+17	; 0x11
   12e9e:	fa 89       	ldd	r31, Y+18	; 0x12
   12ea0:	20 81       	ld	r18, Z
   12ea2:	30 e0       	ldi	r19, 0x00	; 0
   12ea4:	40 e0       	ldi	r20, 0x00	; 0
   12ea6:	50 e0       	ldi	r21, 0x00	; 0
   12ea8:	68 e0       	ldi	r22, 0x08	; 8
   12eaa:	81 e0       	ldi	r24, 0x01	; 1
   12eac:	3c dc       	rcall	.-1928   	; 0x12726 <print_tok_val>
   12eae:	64 e0       	ldi	r22, 0x04	; 4
   12eb0:	81 e1       	ldi	r24, 0x11	; 17
   12eb2:	ae dc       	rcall	.-1700   	; 0x12810 <print_tok>
   12eb4:	60 e0       	ldi	r22, 0x00	; 0
   12eb6:	81 e1       	ldi	r24, 0x11	; 17
   12eb8:	ab dc       	rcall	.-1706   	; 0x12810 <print_tok>
   12eba:	28 85       	ldd	r18, Y+8	; 0x08
   12ebc:	39 85       	ldd	r19, Y+9	; 0x09
   12ebe:	4a 85       	ldd	r20, Y+10	; 0x0a
   12ec0:	ed b7       	in	r30, 0x3d	; 61
   12ec2:	fe b7       	in	r31, 0x3e	; 62
   12ec4:	21 83       	std	Z+1, r18	; 0x01
   12ec6:	32 83       	std	Z+2, r19	; 0x02
   12ec8:	43 83       	std	Z+3, r20	; 0x03
   12eca:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   12ece:	05 5d       	subi	r16, 0xD5	; 213
   12ed0:	1f 4f       	sbci	r17, 0xFF	; 255
   12ed2:	2b ee       	ldi	r18, 0xEB	; 235
   12ed4:	30 e2       	ldi	r19, 0x20	; 32
   12ed6:	20 17       	cp	r18, r16
   12ed8:	31 07       	cpc	r19, r17
   12eda:	09 f0       	breq	.+2      	; 0x12ede <display_Config+0x4cc>
   12edc:	df cd       	rjmp	.-1090   	; 0x12a9c <display_Config+0x8a>
   12ede:	8e ef       	ldi	r24, 0xFE	; 254
   12ee0:	98 e1       	ldi	r25, 0x18	; 24
   12ee2:	a0 e0       	ldi	r26, 0x00	; 0
   12ee4:	ed b7       	in	r30, 0x3d	; 61
   12ee6:	fe b7       	in	r31, 0x3e	; 62
   12ee8:	81 83       	std	Z+1, r24	; 0x01
   12eea:	92 83       	std	Z+2, r25	; 0x02
   12eec:	a3 83       	std	Z+3, r26	; 0x03
   12eee:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   12ef2:	62 96       	adiw	r28, 0x12	; 18
   12ef4:	0f b6       	in	r0, 0x3f	; 63
   12ef6:	f8 94       	cli
   12ef8:	de bf       	out	0x3e, r29	; 62
   12efa:	0f be       	out	0x3f, r0	; 63
   12efc:	cd bf       	out	0x3d, r28	; 61
   12efe:	df 91       	pop	r29
   12f00:	cf 91       	pop	r28
   12f02:	1f 91       	pop	r17
   12f04:	0f 91       	pop	r16
   12f06:	ef 90       	pop	r14
   12f08:	df 90       	pop	r13
   12f0a:	cf 90       	pop	r12
   12f0c:	bf 90       	pop	r11
   12f0e:	af 90       	pop	r10
   12f10:	8f 90       	pop	r8
   12f12:	7f 90       	pop	r7
   12f14:	6f 90       	pop	r6
   12f16:	4f 90       	pop	r4
   12f18:	3f 90       	pop	r3
   12f1a:	2f 90       	pop	r2
   12f1c:	08 95       	ret

00012f1e <find_type>:
   12f1e:	e7 ee       	ldi	r30, 0xE7	; 231
   12f20:	fe e1       	ldi	r31, 0x1E	; 30
   12f22:	20 e0       	ldi	r18, 0x00	; 0
   12f24:	30 e0       	ldi	r19, 0x00	; 0
   12f26:	40 81       	ld	r20, Z
   12f28:	50 e0       	ldi	r21, 0x00	; 0
   12f2a:	48 17       	cp	r20, r24
   12f2c:	59 07       	cpc	r21, r25
   12f2e:	49 f0       	breq	.+18     	; 0x12f42 <find_type+0x24>
   12f30:	2f 5f       	subi	r18, 0xFF	; 255
   12f32:	3f 4f       	sbci	r19, 0xFF	; 255
   12f34:	bb 96       	adiw	r30, 0x2b	; 43
   12f36:	2c 30       	cpi	r18, 0x0C	; 12
   12f38:	31 05       	cpc	r19, r1
   12f3a:	a9 f7       	brne	.-22     	; 0x12f26 <find_type+0x8>
   12f3c:	8f ef       	ldi	r24, 0xFF	; 255
   12f3e:	9f ef       	ldi	r25, 0xFF	; 255
   12f40:	08 95       	ret
   12f42:	c9 01       	movw	r24, r18
   12f44:	08 95       	ret

00012f46 <count_drive_types>:
   12f46:	28 2f       	mov	r18, r24
   12f48:	e7 ee       	ldi	r30, 0xE7	; 231
   12f4a:	fe e1       	ldi	r31, 0x1E	; 30
   12f4c:	80 e0       	ldi	r24, 0x00	; 0
   12f4e:	90 e0       	ldi	r25, 0x00	; 0
   12f50:	30 81       	ld	r19, Z
   12f52:	32 13       	cpse	r19, r18
   12f54:	01 c0       	rjmp	.+2      	; 0x12f58 <count_drive_types+0x12>
   12f56:	01 96       	adiw	r24, 0x01	; 1
   12f58:	bb 96       	adiw	r30, 0x2b	; 43
   12f5a:	30 e2       	ldi	r19, 0x20	; 32
   12f5c:	eb 3e       	cpi	r30, 0xEB	; 235
   12f5e:	f3 07       	cpc	r31, r19
   12f60:	b9 f7       	brne	.-18     	; 0x12f50 <count_drive_types+0xa>
   12f62:	08 95       	ret

00012f64 <type_to_str>:
   12f64:	00 97       	sbiw	r24, 0x00	; 0
   12f66:	59 f0       	breq	.+22     	; 0x12f7e <type_to_str+0x1a>
   12f68:	81 30       	cpi	r24, 0x01	; 1
   12f6a:	91 05       	cpc	r25, r1
   12f6c:	59 f0       	breq	.+22     	; 0x12f84 <type_to_str+0x20>
   12f6e:	83 30       	cpi	r24, 0x03	; 3
   12f70:	91 05       	cpc	r25, r1
   12f72:	59 f0       	breq	.+22     	; 0x12f8a <type_to_str+0x26>
   12f74:	04 97       	sbiw	r24, 0x04	; 4
   12f76:	61 f0       	breq	.+24     	; 0x12f90 <type_to_str+0x2c>
   12f78:	8f e1       	ldi	r24, 0x1F	; 31
   12f7a:	9e e0       	ldi	r25, 0x0E	; 14
   12f7c:	08 95       	ret
   12f7e:	85 ef       	ldi	r24, 0xF5	; 245
   12f80:	9d e0       	ldi	r25, 0x0D	; 13
   12f82:	08 95       	ret
   12f84:	8d ef       	ldi	r24, 0xFD	; 253
   12f86:	9d e0       	ldi	r25, 0x0D	; 13
   12f88:	08 95       	ret
   12f8a:	85 e1       	ldi	r24, 0x15	; 21
   12f8c:	9e e0       	ldi	r25, 0x0E	; 14
   12f8e:	08 95       	ret
   12f90:	88 e0       	ldi	r24, 0x08	; 8
   12f92:	9e e0       	ldi	r25, 0x0E	; 14
   12f94:	08 95       	ret

00012f96 <find_free>:
   12f96:	80 e0       	ldi	r24, 0x00	; 0
   12f98:	90 e0       	ldi	r25, 0x00	; 0
   12f9a:	c1 cf       	rjmp	.-126    	; 0x12f1e <find_type>
   12f9c:	08 95       	ret

00012f9e <find_device>:
   12f9e:	9b 01       	movw	r18, r22
   12fa0:	20 52       	subi	r18, 0x20	; 32
   12fa2:	31 09       	sbc	r19, r1
   12fa4:	2f 35       	cpi	r18, 0x5F	; 95
   12fa6:	31 05       	cpc	r19, r1
   12fa8:	f8 f4       	brcc	.+62     	; 0x12fe8 <find_device+0x4a>
   12faa:	64 17       	cp	r22, r20
   12fac:	75 07       	cpc	r23, r21
   12fae:	e4 f0       	brlt	.+56     	; 0x12fe8 <find_device+0x4a>
   12fb0:	9a 01       	movw	r18, r20
   12fb2:	22 5e       	subi	r18, 0xE2	; 226
   12fb4:	3f 4f       	sbci	r19, 0xFF	; 255
   12fb6:	26 17       	cp	r18, r22
   12fb8:	37 07       	cpc	r19, r23
   12fba:	b4 f0       	brlt	.+44     	; 0x12fe8 <find_device+0x4a>
   12fbc:	64 1b       	sub	r22, r20
   12fbe:	75 0b       	sbc	r23, r21
   12fc0:	e7 ee       	ldi	r30, 0xE7	; 231
   12fc2:	fe e1       	ldi	r31, 0x1E	; 30
   12fc4:	20 e0       	ldi	r18, 0x00	; 0
   12fc6:	30 e0       	ldi	r19, 0x00	; 0
   12fc8:	40 81       	ld	r20, Z
   12fca:	50 e0       	ldi	r21, 0x00	; 0
   12fcc:	48 17       	cp	r20, r24
   12fce:	59 07       	cpc	r21, r25
   12fd0:	29 f4       	brne	.+10     	; 0x12fdc <find_device+0x3e>
   12fd2:	41 81       	ldd	r20, Z+1	; 0x01
   12fd4:	50 e0       	ldi	r21, 0x00	; 0
   12fd6:	64 17       	cp	r22, r20
   12fd8:	75 07       	cpc	r23, r21
   12fda:	49 f0       	breq	.+18     	; 0x12fee <find_device+0x50>
   12fdc:	2f 5f       	subi	r18, 0xFF	; 255
   12fde:	3f 4f       	sbci	r19, 0xFF	; 255
   12fe0:	bb 96       	adiw	r30, 0x2b	; 43
   12fe2:	2c 30       	cpi	r18, 0x0C	; 12
   12fe4:	31 05       	cpc	r19, r1
   12fe6:	81 f7       	brne	.-32     	; 0x12fc8 <find_device+0x2a>
   12fe8:	8f ef       	ldi	r24, 0xFF	; 255
   12fea:	9f ef       	ldi	r25, 0xFF	; 255
   12fec:	08 95       	ret
   12fee:	c9 01       	movw	r24, r18
   12ff0:	08 95       	ret

00012ff2 <set_active_device>:
   12ff2:	a9 e0       	ldi	r26, 0x09	; 9
   12ff4:	b0 e0       	ldi	r27, 0x00	; 0
   12ff6:	ef ef       	ldi	r30, 0xFF	; 255
   12ff8:	f7 e9       	ldi	r31, 0x97	; 151
   12ffa:	0c 94 dd e2 	jmp	0x1c5ba	; 0x1c5ba <__prologue_saves__+0x1c>
   12ffe:	8f 3f       	cpi	r24, 0xFF	; 255
   13000:	2f ef       	ldi	r18, 0xFF	; 255
   13002:	92 07       	cpc	r25, r18
   13004:	09 f4       	brne	.+2      	; 0x13008 <set_active_device+0x16>
   13006:	d0 c0       	rjmp	.+416    	; 0x131a8 <set_active_device+0x1b6>
   13008:	ec 01       	movw	r28, r24
   1300a:	0c 97       	sbiw	r24, 0x0c	; 12
   1300c:	b0 f0       	brcs	.+44     	; 0x1303a <set_active_device+0x48>
   1300e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   13012:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   13016:	c9 01       	movw	r24, r18
   13018:	81 70       	andi	r24, 0x01	; 1
   1301a:	99 27       	eor	r25, r25
   1301c:	20 ff       	sbrs	r18, 0
   1301e:	c6 c0       	rjmp	.+396    	; 0x131ac <set_active_device+0x1ba>
   13020:	ed b7       	in	r30, 0x3d	; 61
   13022:	fe b7       	in	r31, 0x3e	; 62
   13024:	d5 83       	std	Z+5, r29	; 0x05
   13026:	c4 83       	std	Z+4, r28	; 0x04
   13028:	89 ed       	ldi	r24, 0xD9	; 217
   1302a:	98 e1       	ldi	r25, 0x18	; 24
   1302c:	a0 e0       	ldi	r26, 0x00	; 0
   1302e:	81 83       	std	Z+1, r24	; 0x01
   13030:	92 83       	std	Z+2, r25	; 0x02
   13032:	a3 83       	std	Z+3, r26	; 0x03
   13034:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   13038:	b7 c0       	rjmp	.+366    	; 0x131a8 <set_active_device+0x1b6>
   1303a:	8b e2       	ldi	r24, 0x2B	; 43
   1303c:	8c 9f       	mul	r24, r28
   1303e:	f0 01       	movw	r30, r0
   13040:	8d 9f       	mul	r24, r29
   13042:	f0 0d       	add	r31, r0
   13044:	11 24       	eor	r1, r1
   13046:	e9 51       	subi	r30, 0x19	; 25
   13048:	f1 4e       	sbci	r31, 0xE1	; 225
   1304a:	21 81       	ldd	r18, Z+1	; 0x01
   1304c:	2f 31       	cpi	r18, 0x1F	; 31
   1304e:	d0 f0       	brcs	.+52     	; 0x13084 <set_active_device+0x92>
   13050:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   13054:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   13058:	ca 01       	movw	r24, r20
   1305a:	81 70       	andi	r24, 0x01	; 1
   1305c:	99 27       	eor	r25, r25
   1305e:	40 ff       	sbrs	r20, 0
   13060:	a5 c0       	rjmp	.+330    	; 0x131ac <set_active_device+0x1ba>
   13062:	82 2f       	mov	r24, r18
   13064:	90 e0       	ldi	r25, 0x00	; 0
   13066:	ed b7       	in	r30, 0x3d	; 61
   13068:	fe b7       	in	r31, 0x3e	; 62
   1306a:	97 83       	std	Z+7, r25	; 0x07
   1306c:	86 83       	std	Z+6, r24	; 0x06
   1306e:	d5 83       	std	Z+5, r29	; 0x05
   13070:	c4 83       	std	Z+4, r28	; 0x04
   13072:	80 ea       	ldi	r24, 0xA0	; 160
   13074:	98 e1       	ldi	r25, 0x18	; 24
   13076:	a0 e0       	ldi	r26, 0x00	; 0
   13078:	81 83       	std	Z+1, r24	; 0x01
   1307a:	92 83       	std	Z+2, r25	; 0x02
   1307c:	a3 83       	std	Z+3, r26	; 0x03
   1307e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   13082:	92 c0       	rjmp	.+292    	; 0x131a8 <set_active_device+0x1b6>
   13084:	20 81       	ld	r18, Z
   13086:	02 2f       	mov	r16, r18
   13088:	10 e0       	ldi	r17, 0x00	; 0
   1308a:	87 a1       	ldd	r24, Z+39	; 0x27
   1308c:	90 a5       	ldd	r25, Z+40	; 0x28
   1308e:	00 97       	sbiw	r24, 0x00	; 0
   13090:	b1 f4       	brne	.+44     	; 0x130be <set_active_device+0xcc>
   13092:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   13096:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1309a:	c9 01       	movw	r24, r18
   1309c:	81 70       	andi	r24, 0x01	; 1
   1309e:	99 27       	eor	r25, r25
   130a0:	20 ff       	sbrs	r18, 0
   130a2:	84 c0       	rjmp	.+264    	; 0x131ac <set_active_device+0x1ba>
   130a4:	c8 01       	movw	r24, r16
   130a6:	5e df       	rcall	.-324    	; 0x12f64 <type_to_str>
   130a8:	ed b7       	in	r30, 0x3d	; 61
   130aa:	fe b7       	in	r31, 0x3e	; 62
   130ac:	91 87       	std	Z+9, r25	; 0x09
   130ae:	80 87       	std	Z+8, r24	; 0x08
   130b0:	17 83       	std	Z+7, r17	; 0x07
   130b2:	06 83       	std	Z+6, r16	; 0x06
   130b4:	d5 83       	std	Z+5, r29	; 0x05
   130b6:	c4 83       	std	Z+4, r28	; 0x04
   130b8:	8b e6       	ldi	r24, 0x6B	; 107
   130ba:	98 e1       	ldi	r25, 0x18	; 24
   130bc:	6f c0       	rjmp	.+222    	; 0x1319c <set_active_device+0x1aa>
   130be:	01 15       	cp	r16, r1
   130c0:	11 05       	cpc	r17, r1
   130c2:	b9 f4       	brne	.+46     	; 0x130f2 <set_active_device+0x100>
   130c4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   130c8:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   130cc:	c9 01       	movw	r24, r18
   130ce:	81 70       	andi	r24, 0x01	; 1
   130d0:	99 27       	eor	r25, r25
   130d2:	20 ff       	sbrs	r18, 0
   130d4:	6b c0       	rjmp	.+214    	; 0x131ac <set_active_device+0x1ba>
   130d6:	80 e0       	ldi	r24, 0x00	; 0
   130d8:	90 e0       	ldi	r25, 0x00	; 0
   130da:	44 df       	rcall	.-376    	; 0x12f64 <type_to_str>
   130dc:	ed b7       	in	r30, 0x3d	; 61
   130de:	fe b7       	in	r31, 0x3e	; 62
   130e0:	91 87       	std	Z+9, r25	; 0x09
   130e2:	80 87       	std	Z+8, r24	; 0x08
   130e4:	17 82       	std	Z+7, r1	; 0x07
   130e6:	16 82       	std	Z+6, r1	; 0x06
   130e8:	d5 83       	std	Z+5, r29	; 0x05
   130ea:	c4 83       	std	Z+4, r28	; 0x04
   130ec:	86 e3       	ldi	r24, 0x36	; 54
   130ee:	98 e1       	ldi	r25, 0x18	; 24
   130f0:	55 c0       	rjmp	.+170    	; 0x1319c <set_active_device+0x1aa>
   130f2:	04 30       	cpi	r16, 0x04	; 4
   130f4:	11 05       	cpc	r17, r1
   130f6:	29 f4       	brne	.+10     	; 0x13102 <set_active_device+0x110>
   130f8:	90 93 69 19 	sts	0x1969, r25	; 0x801969 <PRINTERp+0x1>
   130fc:	80 93 68 19 	sts	0x1968, r24	; 0x801968 <PRINTERp>
   13100:	35 c0       	rjmp	.+106    	; 0x1316c <set_active_device+0x17a>
   13102:	2d 7f       	andi	r18, 0xFD	; 253
   13104:	21 30       	cpi	r18, 0x01	; 1
   13106:	a9 f5       	brne	.+106    	; 0x13172 <set_active_device+0x180>
   13108:	21 a5       	ldd	r18, Z+41	; 0x29
   1310a:	32 a5       	ldd	r19, Z+42	; 0x2a
   1310c:	21 15       	cp	r18, r1
   1310e:	31 05       	cpc	r19, r1
   13110:	b1 f4       	brne	.+44     	; 0x1313e <set_active_device+0x14c>
   13112:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   13116:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1311a:	c9 01       	movw	r24, r18
   1311c:	81 70       	andi	r24, 0x01	; 1
   1311e:	99 27       	eor	r25, r25
   13120:	20 ff       	sbrs	r18, 0
   13122:	44 c0       	rjmp	.+136    	; 0x131ac <set_active_device+0x1ba>
   13124:	c8 01       	movw	r24, r16
   13126:	1e df       	rcall	.-452    	; 0x12f64 <type_to_str>
   13128:	ed b7       	in	r30, 0x3d	; 61
   1312a:	fe b7       	in	r31, 0x3e	; 62
   1312c:	91 87       	std	Z+9, r25	; 0x09
   1312e:	80 87       	std	Z+8, r24	; 0x08
   13130:	17 83       	std	Z+7, r17	; 0x07
   13132:	06 83       	std	Z+6, r16	; 0x06
   13134:	d5 83       	std	Z+5, r29	; 0x05
   13136:	c4 83       	std	Z+4, r28	; 0x04
   13138:	8e ef       	ldi	r24, 0xFE	; 254
   1313a:	97 e1       	ldi	r25, 0x17	; 23
   1313c:	2f c0       	rjmp	.+94     	; 0x1319c <set_active_device+0x1aa>
   1313e:	01 30       	cpi	r16, 0x01	; 1
   13140:	11 05       	cpc	r17, r1
   13142:	49 f4       	brne	.+18     	; 0x13156 <set_active_device+0x164>
   13144:	90 93 63 19 	sts	0x1963, r25	; 0x801963 <AMIGOp+0x1>
   13148:	80 93 62 19 	sts	0x1962, r24	; 0x801962 <AMIGOp>
   1314c:	30 93 61 19 	sts	0x1961, r19	; 0x801961 <AMIGOs+0x1>
   13150:	20 93 60 19 	sts	0x1960, r18	; 0x801960 <AMIGOs>
   13154:	0b c0       	rjmp	.+22     	; 0x1316c <set_active_device+0x17a>
   13156:	03 30       	cpi	r16, 0x03	; 3
   13158:	11 05       	cpc	r17, r1
   1315a:	59 f4       	brne	.+22     	; 0x13172 <set_active_device+0x180>
   1315c:	90 93 67 19 	sts	0x1967, r25	; 0x801967 <SS80p+0x1>
   13160:	80 93 66 19 	sts	0x1966, r24	; 0x801966 <SS80p>
   13164:	30 93 65 19 	sts	0x1965, r19	; 0x801965 <SS80s+0x1>
   13168:	20 93 64 19 	sts	0x1964, r18	; 0x801964 <SS80s>
   1316c:	81 e0       	ldi	r24, 0x01	; 1
   1316e:	90 e0       	ldi	r25, 0x00	; 0
   13170:	1d c0       	rjmp	.+58     	; 0x131ac <set_active_device+0x1ba>
   13172:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   13176:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1317a:	c9 01       	movw	r24, r18
   1317c:	81 70       	andi	r24, 0x01	; 1
   1317e:	99 27       	eor	r25, r25
   13180:	20 ff       	sbrs	r18, 0
   13182:	14 c0       	rjmp	.+40     	; 0x131ac <set_active_device+0x1ba>
   13184:	c8 01       	movw	r24, r16
   13186:	ee de       	rcall	.-548    	; 0x12f64 <type_to_str>
   13188:	ed b7       	in	r30, 0x3d	; 61
   1318a:	fe b7       	in	r31, 0x3e	; 62
   1318c:	91 87       	std	Z+9, r25	; 0x09
   1318e:	80 87       	std	Z+8, r24	; 0x08
   13190:	17 83       	std	Z+7, r17	; 0x07
   13192:	06 83       	std	Z+6, r16	; 0x06
   13194:	d5 83       	std	Z+5, r29	; 0x05
   13196:	c4 83       	std	Z+4, r28	; 0x04
   13198:	83 ed       	ldi	r24, 0xD3	; 211
   1319a:	97 e1       	ldi	r25, 0x17	; 23
   1319c:	a0 e0       	ldi	r26, 0x00	; 0
   1319e:	81 83       	std	Z+1, r24	; 0x01
   131a0:	92 83       	std	Z+2, r25	; 0x02
   131a2:	a3 83       	std	Z+3, r26	; 0x03
   131a4:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   131a8:	80 e0       	ldi	r24, 0x00	; 0
   131aa:	90 e0       	ldi	r25, 0x00	; 0
   131ac:	cd b7       	in	r28, 0x3d	; 61
   131ae:	de b7       	in	r29, 0x3e	; 62
   131b0:	29 96       	adiw	r28, 0x09	; 9
   131b2:	e4 e0       	ldi	r30, 0x04	; 4
   131b4:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

000131b8 <SS80_Set_Defaults>:
   131b8:	0f 93       	push	r16
   131ba:	1f 93       	push	r17
   131bc:	cf 93       	push	r28
   131be:	df 93       	push	r29
   131c0:	ec 01       	movw	r28, r24
   131c2:	82 e0       	ldi	r24, 0x02	; 2
   131c4:	90 e0       	ldi	r25, 0x00	; 0
   131c6:	ab de       	rcall	.-682    	; 0x12f1e <find_type>
   131c8:	97 fd       	sbrc	r25, 7
   131ca:	6b c0       	rjmp	.+214    	; 0x132a2 <SS80_Set_Defaults+0xea>
   131cc:	2b e2       	ldi	r18, 0x2B	; 43
   131ce:	2c 9f       	mul	r18, r28
   131d0:	f0 01       	movw	r30, r0
   131d2:	2d 9f       	mul	r18, r29
   131d4:	f0 0d       	add	r31, r0
   131d6:	11 24       	eor	r1, r1
   131d8:	e9 51       	subi	r30, 0x19	; 25
   131da:	f1 4e       	sbci	r31, 0xE1	; 225
   131dc:	c7 a1       	ldd	r28, Z+39	; 0x27
   131de:	d0 a5       	ldd	r29, Z+40	; 0x28
   131e0:	28 9f       	mul	r18, r24
   131e2:	f0 01       	movw	r30, r0
   131e4:	29 9f       	mul	r18, r25
   131e6:	f0 0d       	add	r31, r0
   131e8:	11 24       	eor	r1, r1
   131ea:	e9 51       	subi	r30, 0x19	; 25
   131ec:	f1 4e       	sbci	r31, 0xE1	; 225
   131ee:	07 a1       	ldd	r16, Z+39	; 0x27
   131f0:	10 a5       	ldd	r17, Z+40	; 0x28
   131f2:	f8 01       	movw	r30, r16
   131f4:	80 81       	ld	r24, Z
   131f6:	88 83       	st	Y, r24
   131f8:	81 81       	ldd	r24, Z+1	; 0x01
   131fa:	89 83       	std	Y+1, r24	; 0x01
   131fc:	82 81       	ldd	r24, Z+2	; 0x02
   131fe:	93 81       	ldd	r25, Z+3	; 0x03
   13200:	0e 94 27 32 	call	0x644e	; 0x644e <stralloc>
   13204:	9b 83       	std	Y+3, r25	; 0x03
   13206:	8a 83       	std	Y+2, r24	; 0x02
   13208:	f8 01       	movw	r30, r16
   1320a:	84 81       	ldd	r24, Z+4	; 0x04
   1320c:	95 81       	ldd	r25, Z+5	; 0x05
   1320e:	9d 83       	std	Y+5, r25	; 0x05
   13210:	8c 83       	std	Y+4, r24	; 0x04
   13212:	86 81       	ldd	r24, Z+6	; 0x06
   13214:	97 81       	ldd	r25, Z+7	; 0x07
   13216:	9f 83       	std	Y+7, r25	; 0x07
   13218:	8e 83       	std	Y+6, r24	; 0x06
   1321a:	80 85       	ldd	r24, Z+8	; 0x08
   1321c:	91 85       	ldd	r25, Z+9	; 0x09
   1321e:	99 87       	std	Y+9, r25	; 0x09
   13220:	88 87       	std	Y+8, r24	; 0x08
   13222:	82 85       	ldd	r24, Z+10	; 0x0a
   13224:	8a 87       	std	Y+10, r24	; 0x0a
   13226:	83 85       	ldd	r24, Z+11	; 0x0b
   13228:	8b 87       	std	Y+11, r24	; 0x0b
   1322a:	84 85       	ldd	r24, Z+12	; 0x0c
   1322c:	95 85       	ldd	r25, Z+13	; 0x0d
   1322e:	a6 85       	ldd	r26, Z+14	; 0x0e
   13230:	b7 85       	ldd	r27, Z+15	; 0x0f
   13232:	8c 87       	std	Y+12, r24	; 0x0c
   13234:	9d 87       	std	Y+13, r25	; 0x0d
   13236:	ae 87       	std	Y+14, r26	; 0x0e
   13238:	bf 87       	std	Y+15, r27	; 0x0f
   1323a:	80 89       	ldd	r24, Z+16	; 0x10
   1323c:	91 89       	ldd	r25, Z+17	; 0x11
   1323e:	99 8b       	std	Y+17, r25	; 0x11
   13240:	88 8b       	std	Y+16, r24	; 0x10
   13242:	82 89       	ldd	r24, Z+18	; 0x12
   13244:	8a 8b       	std	Y+18, r24	; 0x12
   13246:	83 89       	ldd	r24, Z+19	; 0x13
   13248:	8b 8b       	std	Y+19, r24	; 0x13
   1324a:	84 89       	ldd	r24, Z+20	; 0x14
   1324c:	95 89       	ldd	r25, Z+21	; 0x15
   1324e:	9d 8b       	std	Y+21, r25	; 0x15
   13250:	8c 8b       	std	Y+20, r24	; 0x14
   13252:	86 89       	ldd	r24, Z+22	; 0x16
   13254:	97 89       	ldd	r25, Z+23	; 0x17
   13256:	9f 8b       	std	Y+23, r25	; 0x17
   13258:	8e 8b       	std	Y+22, r24	; 0x16
   1325a:	80 8d       	ldd	r24, Z+24	; 0x18
   1325c:	91 8d       	ldd	r25, Z+25	; 0x19
   1325e:	99 8f       	std	Y+25, r25	; 0x19
   13260:	88 8f       	std	Y+24, r24	; 0x18
   13262:	82 8d       	ldd	r24, Z+26	; 0x1a
   13264:	93 8d       	ldd	r25, Z+27	; 0x1b
   13266:	9b 8f       	std	Y+27, r25	; 0x1b
   13268:	8a 8f       	std	Y+26, r24	; 0x1a
   1326a:	84 8d       	ldd	r24, Z+28	; 0x1c
   1326c:	8c 8f       	std	Y+28, r24	; 0x1c
   1326e:	85 8d       	ldd	r24, Z+29	; 0x1d
   13270:	8d 8f       	std	Y+29, r24	; 0x1d
   13272:	87 8d       	ldd	r24, Z+31	; 0x1f
   13274:	90 a1       	ldd	r25, Z+32	; 0x20
   13276:	a1 a1       	ldd	r26, Z+33	; 0x21
   13278:	b2 a1       	ldd	r27, Z+34	; 0x22
   1327a:	8f 8f       	std	Y+31, r24	; 0x1f
   1327c:	98 a3       	std	Y+32, r25	; 0x20
   1327e:	a9 a3       	std	Y+33, r26	; 0x21
   13280:	ba a3       	std	Y+34, r27	; 0x22
   13282:	83 a1       	ldd	r24, Z+35	; 0x23
   13284:	8b a3       	std	Y+35, r24	; 0x23
   13286:	84 a1       	ldd	r24, Z+36	; 0x24
   13288:	95 a1       	ldd	r25, Z+37	; 0x25
   1328a:	9d a3       	std	Y+37, r25	; 0x25
   1328c:	8c a3       	std	Y+36, r24	; 0x24
   1328e:	86 a1       	ldd	r24, Z+38	; 0x26
   13290:	97 a1       	ldd	r25, Z+39	; 0x27
   13292:	a0 a5       	ldd	r26, Z+40	; 0x28
   13294:	b1 a5       	ldd	r27, Z+41	; 0x29
   13296:	8e a3       	std	Y+38, r24	; 0x26
   13298:	9f a3       	std	Y+39, r25	; 0x27
   1329a:	a8 a7       	std	Y+40, r26	; 0x28
   1329c:	b9 a7       	std	Y+41, r27	; 0x29
   1329e:	82 a5       	ldd	r24, Z+42	; 0x2a
   132a0:	8a a7       	std	Y+42, r24	; 0x2a
   132a2:	df 91       	pop	r29
   132a4:	cf 91       	pop	r28
   132a6:	1f 91       	pop	r17
   132a8:	0f 91       	pop	r16
   132aa:	08 95       	ret

000132ac <alloc_device>:
   132ac:	0f 93       	push	r16
   132ae:	1f 93       	push	r17
   132b0:	cf 93       	push	r28
   132b2:	df 93       	push	r29
   132b4:	ad b7       	in	r26, 0x3d	; 61
   132b6:	be b7       	in	r27, 0x3e	; 62
   132b8:	17 97       	sbiw	r26, 0x07	; 7
   132ba:	0f b6       	in	r0, 0x3f	; 63
   132bc:	f8 94       	cli
   132be:	be bf       	out	0x3e, r27	; 62
   132c0:	0f be       	out	0x3f, r0	; 63
   132c2:	ad bf       	out	0x3d, r26	; 61
   132c4:	8c 01       	movw	r16, r24
   132c6:	67 de       	rcall	.-818    	; 0x12f96 <find_free>
   132c8:	ec 01       	movw	r28, r24
   132ca:	cf 3f       	cpi	r28, 0xFF	; 255
   132cc:	8f ef       	ldi	r24, 0xFF	; 255
   132ce:	d8 07       	cpc	r29, r24
   132d0:	89 f4       	brne	.+34     	; 0x132f4 <alloc_device+0x48>
   132d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   132d6:	80 ff       	sbrs	r24, 0
   132d8:	a1 c0       	rjmp	.+322    	; 0x1341c <alloc_device+0x170>
   132da:	ed b7       	in	r30, 0x3d	; 61
   132dc:	fe b7       	in	r31, 0x3e	; 62
   132de:	15 83       	std	Z+5, r17	; 0x05
   132e0:	04 83       	std	Z+4, r16	; 0x04
   132e2:	8f ea       	ldi	r24, 0xAF	; 175
   132e4:	97 e1       	ldi	r25, 0x17	; 23
   132e6:	a0 e0       	ldi	r26, 0x00	; 0
   132e8:	81 83       	std	Z+1, r24	; 0x01
   132ea:	92 83       	std	Z+2, r25	; 0x02
   132ec:	a3 83       	std	Z+3, r26	; 0x03
   132ee:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   132f2:	94 c0       	rjmp	.+296    	; 0x1341c <alloc_device+0x170>
   132f4:	02 30       	cpi	r16, 0x02	; 2
   132f6:	11 05       	cpc	r17, r1
   132f8:	e1 f1       	breq	.+120    	; 0x13372 <alloc_device+0xc6>
   132fa:	ec f4       	brge	.+58     	; 0x13336 <alloc_device+0x8a>
   132fc:	01 30       	cpi	r16, 0x01	; 1
   132fe:	11 05       	cpc	r17, r1
   13300:	09 f0       	breq	.+2      	; 0x13304 <alloc_device+0x58>
   13302:	76 c0       	rjmp	.+236    	; 0x133f0 <alloc_device+0x144>
   13304:	8b e2       	ldi	r24, 0x2B	; 43
   13306:	8c 9f       	mul	r24, r28
   13308:	80 01       	movw	r16, r0
   1330a:	8d 9f       	mul	r24, r29
   1330c:	10 0d       	add	r17, r0
   1330e:	11 24       	eor	r1, r1
   13310:	09 51       	subi	r16, 0x19	; 25
   13312:	11 4e       	sbci	r17, 0xE1	; 225
   13314:	81 e0       	ldi	r24, 0x01	; 1
   13316:	f8 01       	movw	r30, r16
   13318:	80 83       	st	Z, r24
   1331a:	61 e0       	ldi	r22, 0x01	; 1
   1331c:	70 e0       	ldi	r23, 0x00	; 0
   1331e:	85 e1       	ldi	r24, 0x15	; 21
   13320:	90 e0       	ldi	r25, 0x00	; 0
   13322:	0e 94 8d 28 	call	0x511a	; 0x511a <safecalloc>
   13326:	f8 01       	movw	r30, r16
   13328:	90 a7       	std	Z+40, r25	; 0x28
   1332a:	87 a3       	std	Z+39, r24	; 0x27
   1332c:	61 e0       	ldi	r22, 0x01	; 1
   1332e:	70 e0       	ldi	r23, 0x00	; 0
   13330:	88 e1       	ldi	r24, 0x18	; 24
   13332:	90 e0       	ldi	r25, 0x00	; 0
   13334:	57 c0       	rjmp	.+174    	; 0x133e4 <alloc_device+0x138>
   13336:	03 30       	cpi	r16, 0x03	; 3
   13338:	11 05       	cpc	r17, r1
   1333a:	a1 f1       	breq	.+104    	; 0x133a4 <alloc_device+0xf8>
   1333c:	04 30       	cpi	r16, 0x04	; 4
   1333e:	11 05       	cpc	r17, r1
   13340:	09 f0       	breq	.+2      	; 0x13344 <alloc_device+0x98>
   13342:	56 c0       	rjmp	.+172    	; 0x133f0 <alloc_device+0x144>
   13344:	8b e2       	ldi	r24, 0x2B	; 43
   13346:	8c 9f       	mul	r24, r28
   13348:	80 01       	movw	r16, r0
   1334a:	8d 9f       	mul	r24, r29
   1334c:	10 0d       	add	r17, r0
   1334e:	11 24       	eor	r1, r1
   13350:	09 51       	subi	r16, 0x19	; 25
   13352:	11 4e       	sbci	r17, 0xE1	; 225
   13354:	84 e0       	ldi	r24, 0x04	; 4
   13356:	f8 01       	movw	r30, r16
   13358:	80 83       	st	Z, r24
   1335a:	61 e0       	ldi	r22, 0x01	; 1
   1335c:	70 e0       	ldi	r23, 0x00	; 0
   1335e:	8b e0       	ldi	r24, 0x0B	; 11
   13360:	90 e0       	ldi	r25, 0x00	; 0
   13362:	0e 94 8d 28 	call	0x511a	; 0x511a <safecalloc>
   13366:	f8 01       	movw	r30, r16
   13368:	90 a7       	std	Z+40, r25	; 0x28
   1336a:	87 a3       	std	Z+39, r24	; 0x27
   1336c:	12 a6       	std	Z+42, r1	; 0x2a
   1336e:	11 a6       	std	Z+41, r1	; 0x29
   13370:	55 c0       	rjmp	.+170    	; 0x1341c <alloc_device+0x170>
   13372:	8b e2       	ldi	r24, 0x2B	; 43
   13374:	8c 9f       	mul	r24, r28
   13376:	80 01       	movw	r16, r0
   13378:	8d 9f       	mul	r24, r29
   1337a:	10 0d       	add	r17, r0
   1337c:	11 24       	eor	r1, r1
   1337e:	09 51       	subi	r16, 0x19	; 25
   13380:	11 4e       	sbci	r17, 0xE1	; 225
   13382:	82 e0       	ldi	r24, 0x02	; 2
   13384:	f8 01       	movw	r30, r16
   13386:	80 83       	st	Z, r24
   13388:	61 e0       	ldi	r22, 0x01	; 1
   1338a:	70 e0       	ldi	r23, 0x00	; 0
   1338c:	82 e3       	ldi	r24, 0x32	; 50
   1338e:	90 e0       	ldi	r25, 0x00	; 0
   13390:	0e 94 8d 28 	call	0x511a	; 0x511a <safecalloc>
   13394:	f8 01       	movw	r30, r16
   13396:	90 a7       	std	Z+40, r25	; 0x28
   13398:	87 a3       	std	Z+39, r24	; 0x27
   1339a:	61 e0       	ldi	r22, 0x01	; 1
   1339c:	70 e0       	ldi	r23, 0x00	; 0
   1339e:	86 e1       	ldi	r24, 0x16	; 22
   133a0:	90 e0       	ldi	r25, 0x00	; 0
   133a2:	20 c0       	rjmp	.+64     	; 0x133e4 <alloc_device+0x138>
   133a4:	8b e2       	ldi	r24, 0x2B	; 43
   133a6:	8c 9f       	mul	r24, r28
   133a8:	80 01       	movw	r16, r0
   133aa:	8d 9f       	mul	r24, r29
   133ac:	10 0d       	add	r17, r0
   133ae:	11 24       	eor	r1, r1
   133b0:	09 51       	subi	r16, 0x19	; 25
   133b2:	11 4e       	sbci	r17, 0xE1	; 225
   133b4:	83 e0       	ldi	r24, 0x03	; 3
   133b6:	f8 01       	movw	r30, r16
   133b8:	80 83       	st	Z, r24
   133ba:	61 e0       	ldi	r22, 0x01	; 1
   133bc:	70 e0       	ldi	r23, 0x00	; 0
   133be:	82 e3       	ldi	r24, 0x32	; 50
   133c0:	90 e0       	ldi	r25, 0x00	; 0
   133c2:	0e 94 8d 28 	call	0x511a	; 0x511a <safecalloc>
   133c6:	f8 01       	movw	r30, r16
   133c8:	90 a7       	std	Z+40, r25	; 0x28
   133ca:	87 a3       	std	Z+39, r24	; 0x27
   133cc:	61 e0       	ldi	r22, 0x01	; 1
   133ce:	70 e0       	ldi	r23, 0x00	; 0
   133d0:	86 e1       	ldi	r24, 0x16	; 22
   133d2:	90 e0       	ldi	r25, 0x00	; 0
   133d4:	0e 94 8d 28 	call	0x511a	; 0x511a <safecalloc>
   133d8:	f8 01       	movw	r30, r16
   133da:	92 a7       	std	Z+42, r25	; 0x2a
   133dc:	81 a7       	std	Z+41, r24	; 0x29
   133de:	ce 01       	movw	r24, r28
   133e0:	eb de       	rcall	.-554    	; 0x131b8 <SS80_Set_Defaults>
   133e2:	1c c0       	rjmp	.+56     	; 0x1341c <alloc_device+0x170>
   133e4:	0e 94 8d 28 	call	0x511a	; 0x511a <safecalloc>
   133e8:	f8 01       	movw	r30, r16
   133ea:	92 a7       	std	Z+42, r25	; 0x2a
   133ec:	81 a7       	std	Z+41, r24	; 0x29
   133ee:	16 c0       	rjmp	.+44     	; 0x1341c <alloc_device+0x170>
   133f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   133f4:	80 ff       	sbrs	r24, 0
   133f6:	10 c0       	rjmp	.+32     	; 0x13418 <alloc_device+0x16c>
   133f8:	c8 01       	movw	r24, r16
   133fa:	b4 dd       	rcall	.-1176   	; 0x12f64 <type_to_str>
   133fc:	ed b7       	in	r30, 0x3d	; 61
   133fe:	fe b7       	in	r31, 0x3e	; 62
   13400:	97 83       	std	Z+7, r25	; 0x07
   13402:	86 83       	std	Z+6, r24	; 0x06
   13404:	15 83       	std	Z+5, r17	; 0x05
   13406:	04 83       	std	Z+4, r16	; 0x04
   13408:	8d e8       	ldi	r24, 0x8D	; 141
   1340a:	97 e1       	ldi	r25, 0x17	; 23
   1340c:	a0 e0       	ldi	r26, 0x00	; 0
   1340e:	81 83       	std	Z+1, r24	; 0x01
   13410:	92 83       	std	Z+2, r25	; 0x02
   13412:	a3 83       	std	Z+3, r26	; 0x03
   13414:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   13418:	cf ef       	ldi	r28, 0xFF	; 255
   1341a:	df ef       	ldi	r29, 0xFF	; 255
   1341c:	ce 01       	movw	r24, r28
   1341e:	cd b7       	in	r28, 0x3d	; 61
   13420:	de b7       	in	r29, 0x3e	; 62
   13422:	27 96       	adiw	r28, 0x07	; 7
   13424:	e4 e0       	ldi	r30, 0x04	; 4
   13426:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

0001342a <init_Devices>:
   1342a:	cf 93       	push	r28
   1342c:	df 93       	push	r29
   1342e:	10 92 75 19 	sts	0x1975, r1	; 0x801975 <stack_ind+0x1>
   13432:	10 92 74 19 	sts	0x1974, r1	; 0x801974 <stack_ind>
   13436:	e7 ee       	ldi	r30, 0xE7	; 231
   13438:	fe e1       	ldi	r31, 0x1E	; 30
   1343a:	9f ef       	ldi	r25, 0xFF	; 255
   1343c:	80 e2       	ldi	r24, 0x20	; 32
   1343e:	10 82       	st	Z, r1
   13440:	11 82       	std	Z+1, r1	; 0x01
   13442:	92 83       	std	Z+2, r25	; 0x02
   13444:	13 82       	std	Z+3, r1	; 0x03
   13446:	14 82       	std	Z+4, r1	; 0x04
   13448:	15 82       	std	Z+5, r1	; 0x05
   1344a:	16 82       	std	Z+6, r1	; 0x06
   1344c:	df 01       	movw	r26, r30
   1344e:	17 96       	adiw	r26, 0x07	; 7
   13450:	ed 01       	movw	r28, r26
   13452:	28 2f       	mov	r18, r24
   13454:	19 92       	st	Y+, r1
   13456:	2a 95       	dec	r18
   13458:	e9 f7       	brne	.-6      	; 0x13454 <init_Devices+0x2a>
   1345a:	10 a6       	std	Z+40, r1	; 0x28
   1345c:	17 a2       	std	Z+39, r1	; 0x27
   1345e:	12 a6       	std	Z+42, r1	; 0x2a
   13460:	11 a6       	std	Z+41, r1	; 0x29
   13462:	bb 96       	adiw	r30, 0x2b	; 43
   13464:	c0 e2       	ldi	r28, 0x20	; 32
   13466:	eb 3e       	cpi	r30, 0xEB	; 235
   13468:	fc 07       	cpc	r31, r28
   1346a:	49 f7       	brne	.-46     	; 0x1343e <init_Devices+0x14>
   1346c:	df 91       	pop	r29
   1346e:	cf 91       	pop	r28
   13470:	08 95       	ret

00013472 <push_state>:
   13472:	20 91 74 19 	lds	r18, 0x1974	; 0x801974 <stack_ind>
   13476:	30 91 75 19 	lds	r19, 0x1975	; 0x801975 <stack_ind+0x1>
   1347a:	25 30       	cpi	r18, 0x05	; 5
   1347c:	31 05       	cpc	r19, r1
   1347e:	7c f4       	brge	.+30     	; 0x1349e <push_state+0x2c>
   13480:	a9 01       	movw	r20, r18
   13482:	4f 5f       	subi	r20, 0xFF	; 255
   13484:	5f 4f       	sbci	r21, 0xFF	; 255
   13486:	50 93 75 19 	sts	0x1975, r21	; 0x801975 <stack_ind+0x1>
   1348a:	40 93 74 19 	sts	0x1974, r20	; 0x801974 <stack_ind>
   1348e:	22 0f       	add	r18, r18
   13490:	33 1f       	adc	r19, r19
   13492:	f9 01       	movw	r30, r18
   13494:	e6 59       	subi	r30, 0x96	; 150
   13496:	f6 4e       	sbci	r31, 0xE6	; 230
   13498:	80 83       	st	Z, r24
   1349a:	91 83       	std	Z+1, r25	; 0x01
   1349c:	08 95       	ret
   1349e:	80 e0       	ldi	r24, 0x00	; 0
   134a0:	90 e0       	ldi	r25, 0x00	; 0
   134a2:	08 95       	ret

000134a4 <pop_state>:
   134a4:	80 91 74 19 	lds	r24, 0x1974	; 0x801974 <stack_ind>
   134a8:	90 91 75 19 	lds	r25, 0x1975	; 0x801975 <stack_ind+0x1>
   134ac:	18 16       	cp	r1, r24
   134ae:	19 06       	cpc	r1, r25
   134b0:	6c f4       	brge	.+26     	; 0x134cc <pop_state+0x28>
   134b2:	01 97       	sbiw	r24, 0x01	; 1
   134b4:	90 93 75 19 	sts	0x1975, r25	; 0x801975 <stack_ind+0x1>
   134b8:	80 93 74 19 	sts	0x1974, r24	; 0x801974 <stack_ind>
   134bc:	88 0f       	add	r24, r24
   134be:	99 1f       	adc	r25, r25
   134c0:	fc 01       	movw	r30, r24
   134c2:	e6 59       	subi	r30, 0x96	; 150
   134c4:	f6 4e       	sbci	r31, 0xE6	; 230
   134c6:	80 81       	ld	r24, Z
   134c8:	91 81       	ldd	r25, Z+1	; 0x01
   134ca:	08 95       	ret
   134cc:	80 e0       	ldi	r24, 0x00	; 0
   134ce:	90 e0       	ldi	r25, 0x00	; 0
   134d0:	08 95       	ret

000134d2 <set_Config_Defaults>:
   134d2:	08 95       	ret

000134d4 <hpdir_set_device>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
   134d4:	0f 93       	push	r16
   134d6:	1f 93       	push	r17
   134d8:	cf 93       	push	r28
   134da:	df 93       	push	r29
   134dc:	00 d0       	rcall	.+0      	; 0x134de <hpdir_set_device+0xa>
   134de:	1f 92       	push	r1
    if(Devices[index].TYPE == SS80_TYPE)
   134e0:	2b e2       	ldi	r18, 0x2B	; 43
   134e2:	ac 01       	movw	r20, r24
   134e4:	24 9f       	mul	r18, r20
   134e6:	c0 01       	movw	r24, r0
   134e8:	25 9f       	mul	r18, r21
   134ea:	90 0d       	add	r25, r0
   134ec:	11 24       	eor	r1, r1
   134ee:	ec 01       	movw	r28, r24
   134f0:	c9 51       	subi	r28, 0x19	; 25
   134f2:	d1 4e       	sbci	r29, 0xE1	; 225
   134f4:	28 81       	ld	r18, Y
   134f6:	23 30       	cpi	r18, 0x03	; 3
   134f8:	a1 f5       	brne	.+104    	; 0x13562 <hpdir_set_device+0x8e>
    {
        SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
   134fa:	ef a1       	ldd	r30, Y+39	; 0x27
   134fc:	f8 a5       	ldd	r31, Y+40	; 0x28
        SS80p->CONFIG.ID                = hpdir.ID;
   134fe:	20 91 6b 21 	lds	r18, 0x216B	; 0x80216b <hpdir+0x80>
   13502:	30 91 6c 21 	lds	r19, 0x216C	; 0x80216c <hpdir+0x81>
   13506:	35 83       	std	Z+5, r19	; 0x05
   13508:	24 83       	std	Z+4, r18	; 0x04
        SS80p->UNIT.DEVICE_NUMBER       = hpdir.DEVICE_NUMBER;
   1350a:	40 91 77 21 	lds	r20, 0x2177	; 0x802177 <hpdir+0x8c>
   1350e:	50 91 78 21 	lds	r21, 0x2178	; 0x802178 <hpdir+0x8d>
   13512:	60 91 79 21 	lds	r22, 0x2179	; 0x802179 <hpdir+0x8e>
   13516:	70 91 7a 21 	lds	r23, 0x217A	; 0x80217a <hpdir+0x8f>
   1351a:	44 87       	std	Z+12, r20	; 0x0c
   1351c:	55 87       	std	Z+13, r21	; 0x0d
   1351e:	66 87       	std	Z+14, r22	; 0x0e
   13520:	77 87       	std	Z+15, r23	; 0x0f
        SS80p->UNIT.BYTES_PER_BLOCK     = hpdir.BYTES_PER_SECTOR;
   13522:	20 91 8b 21 	lds	r18, 0x218B	; 0x80218b <hpdir+0xa0>
   13526:	30 91 8c 21 	lds	r19, 0x218C	; 0x80218c <hpdir+0xa1>
   1352a:	31 8b       	std	Z+17, r19	; 0x11
   1352c:	20 8b       	std	Z+16, r18	; 0x10

// CHS NOT used in this emulator!
        SS80p->VOLUME.MAX_CYLINDER      = 0;      // hpdir.CYLINDERS-1;
   1352e:	17 8e       	std	Z+31, r1	; 0x1f
   13530:	10 a2       	std	Z+32, r1	; 0x20
   13532:	11 a2       	std	Z+33, r1	; 0x21
   13534:	12 a2       	std	Z+34, r1	; 0x22
        SS80p->VOLUME.MAX_HEAD          = 0;      // hpdir.HEADS-1;
   13536:	13 a2       	std	Z+35, r1	; 0x23
        SS80p->VOLUME.MAX_SECTOR        = 0;      // hpdir.SECTORS-1;
   13538:	15 a2       	std	Z+37, r1	; 0x25
   1353a:	14 a2       	std	Z+36, r1	; 0x24

        SS80p->VOLUME.MAX_BLOCK_NUMBER  = hpdir.BLOCKS-1;
   1353c:	40 91 97 21 	lds	r20, 0x2197	; 0x802197 <hpdir+0xac>
   13540:	50 91 98 21 	lds	r21, 0x2198	; 0x802198 <hpdir+0xad>
   13544:	60 91 99 21 	lds	r22, 0x2199	; 0x802199 <hpdir+0xae>
   13548:	70 91 9a 21 	lds	r23, 0x219A	; 0x80219a <hpdir+0xaf>
   1354c:	8a 01       	movw	r16, r20
   1354e:	9b 01       	movw	r18, r22
   13550:	01 50       	subi	r16, 0x01	; 1
   13552:	11 09       	sbc	r17, r1
   13554:	21 09       	sbc	r18, r1
   13556:	31 09       	sbc	r19, r1
   13558:	06 a3       	std	Z+38, r16	; 0x26
   1355a:	17 a3       	std	Z+39, r17	; 0x27
   1355c:	20 a7       	std	Z+40, r18	; 0x28
   1355e:	31 a7       	std	Z+41, r19	; 0x29
   13560:	2a c0       	rjmp	.+84     	; 0x135b6 <hpdir_set_device+0xe2>
        Devices[index].BLOCKS = hpdir.BLOCKS;
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
    }

#ifdef AMIGO
    else if(Devices[index].TYPE == AMIGO_TYPE)
   13562:	21 30       	cpi	r18, 0x01	; 1
   13564:	a9 f5       	brne	.+106    	; 0x135d0 <hpdir_set_device+0xfc>
    {
        AMIGODiskType *AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13566:	ef a1       	ldd	r30, Y+39	; 0x27
   13568:	f8 a5       	ldd	r31, Y+40	; 0x28
        AMIGOp->CONFIG.ID = hpdir.ID;
   1356a:	20 91 6b 21 	lds	r18, 0x216B	; 0x80216b <hpdir+0x80>
   1356e:	30 91 6c 21 	lds	r19, 0x216C	; 0x80216c <hpdir+0x81>
   13572:	35 83       	std	Z+5, r19	; 0x05
   13574:	24 83       	std	Z+4, r18	; 0x04
        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   13576:	20 91 8b 21 	lds	r18, 0x218B	; 0x80218b <hpdir+0xa0>
   1357a:	30 91 8c 21 	lds	r19, 0x218C	; 0x80218c <hpdir+0xa1>
   1357e:	37 83       	std	Z+7, r19	; 0x07
   13580:	26 83       	std	Z+6, r18	; 0x06
        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   13582:	20 91 87 21 	lds	r18, 0x2187	; 0x802187 <hpdir+0x9c>
   13586:	30 91 88 21 	lds	r19, 0x2188	; 0x802188 <hpdir+0x9d>
   1358a:	31 87       	std	Z+9, r19	; 0x09
   1358c:	20 87       	std	Z+8, r18	; 0x08
        AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   1358e:	20 91 83 21 	lds	r18, 0x2183	; 0x802183 <hpdir+0x98>
   13592:	30 91 84 21 	lds	r19, 0x2184	; 0x802184 <hpdir+0x99>
   13596:	33 87       	std	Z+11, r19	; 0x0b
   13598:	22 87       	std	Z+10, r18	; 0x0a
        AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   1359a:	20 91 7f 21 	lds	r18, 0x217F	; 0x80217f <hpdir+0x94>
   1359e:	30 91 80 21 	lds	r19, 0x2180	; 0x802180 <hpdir+0x95>
   135a2:	35 87       	std	Z+13, r19	; 0x0d
   135a4:	24 87       	std	Z+12, r18	; 0x0c
        Devices[index].BLOCKS = hpdir.BLOCKS;
   135a6:	40 91 97 21 	lds	r20, 0x2197	; 0x802197 <hpdir+0xac>
   135aa:	50 91 98 21 	lds	r21, 0x2198	; 0x802198 <hpdir+0xad>
   135ae:	60 91 99 21 	lds	r22, 0x2199	; 0x802199 <hpdir+0xae>
   135b2:	70 91 9a 21 	lds	r23, 0x219A	; 0x80219a <hpdir+0xaf>
   135b6:	4b 83       	std	Y+3, r20	; 0x03
   135b8:	5c 83       	std	Y+4, r21	; 0x04
   135ba:	6d 83       	std	Y+5, r22	; 0x05
   135bc:	7e 83       	std	Y+6, r23	; 0x06
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   135be:	4e e1       	ldi	r20, 0x1E	; 30
   135c0:	50 e0       	ldi	r21, 0x00	; 0
   135c2:	6b ee       	ldi	r22, 0xEB	; 235
   135c4:	70 e2       	ldi	r23, 0x20	; 32
   135c6:	82 51       	subi	r24, 0x12	; 18
   135c8:	91 4e       	sbci	r25, 0xE1	; 225
   135ca:	0e 94 84 31 	call	0x6308	; 0x6308 <strncpy>
   135ce:	0a c0       	rjmp	.+20     	; 0x135e4 <hpdir_set_device+0x110>
    }
#endif
    else
    {
        printf("hpdir_parameters invalid TYPE\n");
   135d0:	8e e6       	ldi	r24, 0x6E	; 110
   135d2:	97 e1       	ldi	r25, 0x17	; 23
   135d4:	a0 e0       	ldi	r26, 0x00	; 0
   135d6:	ed b7       	in	r30, 0x3d	; 61
   135d8:	fe b7       	in	r31, 0x3e	; 62
   135da:	81 83       	std	Z+1, r24	; 0x01
   135dc:	92 83       	std	Z+2, r25	; 0x02
   135de:	a3 83       	std	Z+3, r26	; 0x03
   135e0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    }

}
   135e4:	cd b7       	in	r28, 0x3d	; 61
   135e6:	de b7       	in	r29, 0x3e	; 62
   135e8:	23 96       	adiw	r28, 0x03	; 3
   135ea:	e4 e0       	ldi	r30, 0x04	; 4
   135ec:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

000135f0 <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   135f0:	cf 93       	push	r28
   135f2:	df 93       	push	r29
   135f4:	ec 01       	movw	r28, r24
   135f6:	cb 01       	movw	r24, r22
    if ( hpdir_find_drive( model, 0 ,1) )
   135f8:	41 e0       	ldi	r20, 0x01	; 1
   135fa:	50 e0       	ldi	r21, 0x00	; 0
   135fc:	60 e0       	ldi	r22, 0x00	; 0
   135fe:	70 e0       	ldi	r23, 0x00	; 0
   13600:	d9 d6       	rcall	.+3506   	; 0x143b4 <hpdir_find_drive>
   13602:	89 2b       	or	r24, r25
        hpdir_set_device(index);
   13604:	11 f0       	breq	.+4      	; 0x1360a <hpdir_set_parameters+0x1a>
   13606:	ce 01       	movw	r24, r28
}
   13608:	65 df       	rcall	.-310    	; 0x134d4 <hpdir_set_device>
   1360a:	df 91       	pop	r29
   1360c:	cf 91       	pop	r28
   1360e:	08 95       	ret

00013610 <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   13610:	4f 92       	push	r4
   13612:	5f 92       	push	r5
   13614:	6f 92       	push	r6
   13616:	7f 92       	push	r7
   13618:	8f 92       	push	r8
   1361a:	af 92       	push	r10
   1361c:	bf 92       	push	r11
   1361e:	cf 92       	push	r12
   13620:	df 92       	push	r13
   13622:	ef 92       	push	r14
   13624:	0f 93       	push	r16
   13626:	1f 93       	push	r17
   13628:	cf 93       	push	r28
   1362a:	df 93       	push	r29
   1362c:	00 d0       	rcall	.+0      	; 0x1362e <Post_Config+0x1e>
   1362e:	00 d0       	rcall	.+0      	; 0x13630 <Post_Config+0x20>
   13630:	1f 92       	push	r1
   13632:	c7 ee       	ldi	r28, 0xE7	; 231
   13634:	de e1       	ldi	r29, 0x1E	; 30
   13636:	8b ee       	ldi	r24, 0xEB	; 235
   13638:	48 2e       	mov	r4, r24
   1363a:	80 e2       	ldi	r24, 0x20	; 32
   1363c:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   1363e:	a1 2c       	mov	r10, r1
   13640:	bb 24       	eor	r11, r11
   13642:	b3 94       	inc	r11
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   13644:	81 e0       	ldi	r24, 0x01	; 1
   13646:	97 e1       	ldi	r25, 0x17	; 23
   13648:	6c 01       	movw	r12, r24
   1364a:	e1 2c       	mov	r14, r1
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   1364c:	88 e3       	ldi	r24, 0x38	; 56
   1364e:	97 e1       	ldi	r25, 0x17	; 23
   13650:	3c 01       	movw	r6, r24
   13652:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13654:	88 81       	ld	r24, Y
   13656:	88 23       	and	r24, r24
   13658:	09 f4       	brne	.+2      	; 0x1365c <Post_Config+0x4c>
   1365a:	57 c0       	rjmp	.+174    	; 0x1370a <Post_Config+0xfa>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   1365c:	83 30       	cpi	r24, 0x03	; 3
   1365e:	f9 f4       	brne	.+62     	; 0x1369e <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13660:	0f a1       	ldd	r16, Y+39	; 0x27
   13662:	18 a5       	ldd	r17, Y+40	; 0x28
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13664:	f8 01       	movw	r30, r16
   13666:	80 89       	ldd	r24, Z+16	; 0x10
   13668:	91 89       	ldd	r25, Z+17	; 0x11
   1366a:	81 15       	cp	r24, r1
   1366c:	91 40       	sbci	r25, 0x01	; 1
   1366e:	59 f0       	breq	.+22     	; 0x13686 <Post_Config+0x76>
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   13670:	ce 01       	movw	r24, r28
   13672:	07 96       	adiw	r24, 0x07	; 7
   13674:	ed b7       	in	r30, 0x3d	; 61
   13676:	fe b7       	in	r31, 0x3e	; 62
   13678:	95 83       	std	Z+5, r25	; 0x05
   1367a:	84 83       	std	Z+4, r24	; 0x04
   1367c:	61 82       	std	Z+1, r6	; 0x01
   1367e:	72 82       	std	Z+2, r7	; 0x02
   13680:	83 82       	std	Z+3, r8	; 0x03
   13682:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            }
            sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
            Devices[i].BLOCKS = sectors;
   13686:	f8 01       	movw	r30, r16
   13688:	86 a1       	ldd	r24, Z+38	; 0x26
   1368a:	97 a1       	ldd	r25, Z+39	; 0x27
   1368c:	a0 a5       	ldd	r26, Z+40	; 0x28
   1368e:	b1 a5       	ldd	r27, Z+41	; 0x29
   13690:	01 96       	adiw	r24, 0x01	; 1
   13692:	a1 1d       	adc	r26, r1
   13694:	b1 1d       	adc	r27, r1
   13696:	8b 83       	std	Y+3, r24	; 0x03
   13698:	9c 83       	std	Y+4, r25	; 0x04
   1369a:	ad 83       	std	Y+5, r26	; 0x05
   1369c:	be 83       	std	Y+6, r27	; 0x06
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   1369e:	88 81       	ld	r24, Y
   136a0:	81 30       	cpi	r24, 0x01	; 1
   136a2:	99 f5       	brne	.+102    	; 0x1370a <Post_Config+0xfa>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   136a4:	0f a1       	ldd	r16, Y+39	; 0x27
   136a6:	18 a5       	ldd	r17, Y+40	; 0x28
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   136a8:	f8 01       	movw	r30, r16
   136aa:	86 81       	ldd	r24, Z+6	; 0x06
   136ac:	97 81       	ldd	r25, Z+7	; 0x07
   136ae:	81 15       	cp	r24, r1
   136b0:	91 40       	sbci	r25, 0x01	; 1
   136b2:	71 f0       	breq	.+28     	; 0x136d0 <Post_Config+0xc0>
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   136b4:	f8 01       	movw	r30, r16
   136b6:	b7 82       	std	Z+7, r11	; 0x07
   136b8:	a6 82       	std	Z+6, r10	; 0x06
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   136ba:	ce 01       	movw	r24, r28
   136bc:	07 96       	adiw	r24, 0x07	; 7
   136be:	ed b7       	in	r30, 0x3d	; 61
   136c0:	fe b7       	in	r31, 0x3e	; 62
   136c2:	95 83       	std	Z+5, r25	; 0x05
   136c4:	84 83       	std	Z+4, r24	; 0x04
   136c6:	c1 82       	std	Z+1, r12	; 0x01
   136c8:	d2 82       	std	Z+2, r13	; 0x02
   136ca:	e3 82       	std	Z+3, r14	; 0x03
   136cc:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            }
            sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                * AMIGOp->GEOMETRY.HEADS
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
   136d0:	f8 01       	movw	r30, r16
   136d2:	20 85       	ldd	r18, Z+8	; 0x08
   136d4:	31 85       	ldd	r19, Z+9	; 0x09
   136d6:	82 85       	ldd	r24, Z+10	; 0x0a
   136d8:	93 85       	ldd	r25, Z+11	; 0x0b
   136da:	28 9f       	mul	r18, r24
   136dc:	a0 01       	movw	r20, r0
   136de:	29 9f       	mul	r18, r25
   136e0:	50 0d       	add	r21, r0
   136e2:	38 9f       	mul	r19, r24
   136e4:	50 0d       	add	r21, r0
   136e6:	11 24       	eor	r1, r1
   136e8:	24 85       	ldd	r18, Z+12	; 0x0c
   136ea:	35 85       	ldd	r19, Z+13	; 0x0d
   136ec:	42 9f       	mul	r20, r18
   136ee:	c0 01       	movw	r24, r0
   136f0:	43 9f       	mul	r20, r19
   136f2:	90 0d       	add	r25, r0
   136f4:	52 9f       	mul	r21, r18
   136f6:	90 0d       	add	r25, r0
   136f8:	11 24       	eor	r1, r1
   136fa:	09 2e       	mov	r0, r25
   136fc:	00 0c       	add	r0, r0
   136fe:	aa 0b       	sbc	r26, r26
   13700:	bb 0b       	sbc	r27, r27
   13702:	8b 83       	std	Y+3, r24	; 0x03
   13704:	9c 83       	std	Y+4, r25	; 0x04
   13706:	ad 83       	std	Y+5, r26	; 0x05
   13708:	be 83       	std	Y+6, r27	; 0x06
   1370a:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   1370c:	4c 16       	cp	r4, r28
   1370e:	5d 06       	cpc	r5, r29
   13710:	09 f0       	breq	.+2      	; 0x13714 <Post_Config+0x104>
   13712:	a0 cf       	rjmp	.-192    	; 0x13654 <Post_Config+0x44>
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
        }
#endif                                    // #ifdef AMIGO
    }
}
   13714:	0f 90       	pop	r0
   13716:	0f 90       	pop	r0
   13718:	0f 90       	pop	r0
   1371a:	0f 90       	pop	r0
   1371c:	0f 90       	pop	r0
   1371e:	df 91       	pop	r29
   13720:	cf 91       	pop	r28
   13722:	1f 91       	pop	r17
   13724:	0f 91       	pop	r16
   13726:	ef 90       	pop	r14
   13728:	df 90       	pop	r13
   1372a:	cf 90       	pop	r12
   1372c:	bf 90       	pop	r11
   1372e:	af 90       	pop	r10
   13730:	8f 90       	pop	r8
   13732:	7f 90       	pop	r7
   13734:	6f 90       	pop	r6
   13736:	5f 90       	pop	r5
   13738:	4f 90       	pop	r4
   1373a:	08 95       	ret

0001373c <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   1373c:	af e1       	ldi	r26, 0x1F	; 31
   1373e:	b1 e0       	ldi	r27, 0x01	; 1
   13740:	e4 ea       	ldi	r30, 0xA4	; 164
   13742:	fb e9       	ldi	r31, 0x9B	; 155
   13744:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
    int lines = 0;

    char str[128];
    char token[128];

    init_Devices();
   13748:	8c 01       	movw	r16, r24

    printf("Reading: %s\n", name);
   1374a:	6f de       	rcall	.-802    	; 0x1342a <init_Devices>
   1374c:	ed b7       	in	r30, 0x3d	; 61
   1374e:	fe b7       	in	r31, 0x3e	; 62
   13750:	15 83       	std	Z+5, r17	; 0x05
   13752:	04 83       	std	Z+4, r16	; 0x04
   13754:	84 ee       	ldi	r24, 0xE4	; 228
   13756:	9c e1       	ldi	r25, 0x1C	; 28
   13758:	a0 e0       	ldi	r26, 0x00	; 0
   1375a:	81 83       	std	Z+1, r24	; 0x01
   1375c:	92 83       	std	Z+2, r25	; 0x02
   1375e:	a3 83       	std	Z+3, r26	; 0x03
   13760:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    cfg = fopen(name, "rb");
   13764:	6d ee       	ldi	r22, 0xED	; 237
   13766:	78 e0       	ldi	r23, 0x08	; 8
   13768:	c8 01       	movw	r24, r16
   1376a:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <fopen>
   1376e:	c4 5f       	subi	r28, 0xF4	; 244
   13770:	de 4f       	sbci	r29, 0xFE	; 254
   13772:	99 83       	std	Y+1, r25	; 0x01
   13774:	88 83       	st	Y, r24
   13776:	cc 50       	subi	r28, 0x0C	; 12
    if(cfg == NULL)
   13778:	d1 40       	sbci	r29, 0x01	; 1
   1377a:	89 2b       	or	r24, r25
   1377c:	09 f4       	brne	.+2      	; 0x13780 <Read_Config+0x44>
   1377e:	59 c0       	rjmp	.+178    	; 0x13832 <Read_Config+0xf6>
   13780:	41 2c       	mov	r4, r1
   13782:	51 2c       	mov	r5, r1
   13784:	c1 2c       	mov	r12, r1
   13786:	d1 2c       	mov	r13, r1
   13788:	c8 5f       	subi	r28, 0xF8	; 248
   1378a:	de 4f       	sbci	r29, 0xFE	; 254
   1378c:	19 82       	std	Y+1, r1	; 0x01
   1378e:	18 82       	st	Y, r1
   13790:	c8 50       	subi	r28, 0x08	; 8
   13792:	d1 40       	sbci	r29, 0x01	; 1
   13794:	61 2c       	mov	r6, r1
   13796:	71 2c       	mov	r7, r1
   13798:	c6 5f       	subi	r28, 0xF6	; 246
   1379a:	de 4f       	sbci	r29, 0xFE	; 254
   1379c:	19 82       	std	Y+1, r1	; 0x01
   1379e:	18 82       	st	Y, r1
   137a0:	ca 50       	subi	r28, 0x0A	; 10
   137a2:	d1 40       	sbci	r29, 0x01	; 1
   137a4:	e1 2c       	mov	r14, r1
   137a6:	f1 2c       	mov	r15, r1
   137a8:	21 2c       	mov	r2, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   137aa:	31 2c       	mov	r3, r1
   137ac:	83 e3       	ldi	r24, 0x33	; 51
   137ae:	9a e1       	ldi	r25, 0x1A	; 26
   137b0:	9c 01       	movw	r18, r24
   137b2:	40 e0       	ldi	r20, 0x00	; 0
   137b4:	c2 5f       	subi	r28, 0xF2	; 242
   137b6:	de 4f       	sbci	r29, 0xFE	; 254
   137b8:	28 83       	st	Y, r18
   137ba:	39 83       	std	Y+1, r19	; 0x01
   137bc:	4a 83       	std	Y+2, r20	; 0x02
   137be:	ce 50       	subi	r28, 0x0E	; 14
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   137c0:	d1 40       	sbci	r29, 0x01	; 1
   137c2:	85 e5       	ldi	r24, 0x55	; 85
   137c4:	9a e1       	ldi	r25, 0x1A	; 26
   137c6:	9c 01       	movw	r18, r24
   137c8:	40 e0       	ldi	r20, 0x00	; 0
   137ca:	cf 5e       	subi	r28, 0xEF	; 239
   137cc:	de 4f       	sbci	r29, 0xFE	; 254
   137ce:	28 83       	st	Y, r18
   137d0:	39 83       	std	Y+1, r19	; 0x01
   137d2:	4a 83       	std	Y+2, r20	; 0x02
   137d4:	c1 51       	subi	r28, 0x11	; 17
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   137d6:	d1 40       	sbci	r29, 0x01	; 1
   137d8:	85 e8       	ldi	r24, 0x85	; 133
   137da:	9a e1       	ldi	r25, 0x1A	; 26
   137dc:	9c 01       	movw	r18, r24
   137de:	40 e0       	ldi	r20, 0x00	; 0
   137e0:	cc 5e       	subi	r28, 0xEC	; 236
   137e2:	de 4f       	sbci	r29, 0xFE	; 254
   137e4:	28 83       	st	Y, r18
   137e6:	39 83       	std	Y+1, r19	; 0x01
   137e8:	4a 83       	std	Y+2, r20	; 0x02
   137ea:	c4 51       	subi	r28, 0x14	; 20
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   137ec:	d1 40       	sbci	r29, 0x01	; 1
   137ee:	84 eb       	ldi	r24, 0xB4	; 180
   137f0:	9a e1       	ldi	r25, 0x1A	; 26
   137f2:	9c 01       	movw	r18, r24
   137f4:	40 e0       	ldi	r20, 0x00	; 0
   137f6:	c9 5e       	subi	r28, 0xE9	; 233
   137f8:	de 4f       	sbci	r29, 0xFE	; 254
   137fa:	28 83       	st	Y, r18
   137fc:	39 83       	std	Y+1, r19	; 0x01
   137fe:	4a 83       	std	Y+2, r20	; 0x02
   13800:	c7 51       	subi	r28, 0x17	; 23
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13802:	d1 40       	sbci	r29, 0x01	; 1
   13804:	84 ee       	ldi	r24, 0xE4	; 228
   13806:	9a e1       	ldi	r25, 0x1A	; 26
   13808:	9c 01       	movw	r18, r24
   1380a:	40 e0       	ldi	r20, 0x00	; 0
   1380c:	c6 5e       	subi	r28, 0xE6	; 230
   1380e:	de 4f       	sbci	r29, 0xFE	; 254
   13810:	28 83       	st	Y, r18
   13812:	39 83       	std	Y+1, r19	; 0x01
   13814:	4a 83       	std	Y+2, r20	; 0x02
   13816:	ca 51       	subi	r28, 0x1A	; 26
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13818:	d1 40       	sbci	r29, 0x01	; 1
   1381a:	82 e1       	ldi	r24, 0x12	; 18
   1381c:	9b e1       	ldi	r25, 0x1B	; 27
   1381e:	9c 01       	movw	r18, r24
   13820:	40 e0       	ldi	r20, 0x00	; 0
   13822:	c3 5e       	subi	r28, 0xE3	; 227
   13824:	de 4f       	sbci	r29, 0xFE	; 254
   13826:	28 83       	st	Y, r18
   13828:	39 83       	std	Y+1, r19	; 0x01
   1382a:	4a 83       	std	Y+2, r20	; 0x02
   1382c:	cd 51       	subi	r28, 0x1D	; 29
   1382e:	d1 40       	sbci	r29, 0x01	; 1
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   13830:	26 c0       	rjmp	.+76     	; 0x1387e <Read_Config+0x142>
   13832:	87 e4       	ldi	r24, 0x47	; 71
   13834:	9e e0       	ldi	r25, 0x0E	; 14
   13836:	0e 94 f0 78 	call	0xf1e0	; 0xf1e0 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   1383a:	ed b7       	in	r30, 0x3d	; 61
   1383c:	fe b7       	in	r31, 0x3e	; 62
   1383e:	15 83       	std	Z+5, r17	; 0x05
   13840:	04 83       	std	Z+4, r16	; 0x04
   13842:	86 ec       	ldi	r24, 0xC6	; 198
   13844:	9c e1       	ldi	r25, 0x1C	; 28
   13846:	a0 e0       	ldi	r26, 0x00	; 0
   13848:	81 83       	std	Z+1, r24	; 0x01
   1384a:	92 83       	std	Z+2, r25	; 0x02
   1384c:	a3 83       	std	Z+3, r26	; 0x03
   1384e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        set_Config_Defaults();
        return(errors);
   13852:	81 e0       	ldi	r24, 0x01	; 1
   13854:	90 e0       	ldi	r25, 0x00	; 0
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   13856:	95 c3       	rjmp	.+1834   	; 0x13f82 <Read_Config+0x846>
   13858:	ff ef       	ldi	r31, 0xFF	; 255
   1385a:	4f 1a       	sub	r4, r31

        ptr = get_token(str, token, sizeof(token)-2);
   1385c:	5f 0a       	sbc	r5, r31
   1385e:	4e e7       	ldi	r20, 0x7E	; 126
   13860:	50 e0       	ldi	r21, 0x00	; 0
   13862:	9e 01       	movw	r18, r28
   13864:	28 5f       	subi	r18, 0xF8	; 248
   13866:	3f 4f       	sbci	r19, 0xFF	; 255
   13868:	49 01       	movw	r8, r18
   1386a:	b9 01       	movw	r22, r18
   1386c:	ce 01       	movw	r24, r28
   1386e:	88 57       	subi	r24, 0x78	; 120
   13870:	9f 4f       	sbci	r25, 0xFF	; 255
   13872:	0e 94 39 33 	call	0x6672	; 0x6672 <get_token>

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13876:	5c 01       	movw	r10, r24
   13878:	88 85       	ldd	r24, Y+8	; 0x08
   1387a:	81 11       	cpse	r24, r1
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   1387c:	10 c0       	rjmp	.+32     	; 0x1389e <Read_Config+0x162>
   1387e:	c4 5f       	subi	r28, 0xF4	; 244
   13880:	de 4f       	sbci	r29, 0xFE	; 254
   13882:	48 81       	ld	r20, Y
   13884:	59 81       	ldd	r21, Y+1	; 0x01
   13886:	cc 50       	subi	r28, 0x0C	; 12
   13888:	d1 40       	sbci	r29, 0x01	; 1
   1388a:	6e e7       	ldi	r22, 0x7E	; 126
   1388c:	70 e0       	ldi	r23, 0x00	; 0
   1388e:	ce 01       	movw	r24, r28
   13890:	88 57       	subi	r24, 0x78	; 120
   13892:	9f 4f       	sbci	r25, 0xFF	; 255
   13894:	0e 94 d7 76 	call	0xedae	; 0xedae <fgets>
   13898:	89 2b       	or	r24, r25
   1389a:	f1 f6       	brne	.-68     	; 0x13858 <Read_Config+0x11c>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   1389c:	32 c3       	rjmp	.+1636   	; 0x13f02 <Read_Config+0x7c6>
   1389e:	83 32       	cpi	r24, 0x23	; 35
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   138a0:	71 f3       	breq	.-36     	; 0x1387e <Read_Config+0x142>
   138a2:	c4 01       	movw	r24, r8
   138a4:	0e 94 52 93 	call	0x126a4	; 0x126a4 <tok_index>
   138a8:	8f 3f       	cpi	r24, 0xFF	; 255
   138aa:	3f ef       	ldi	r19, 0xFF	; 255
   138ac:	93 07       	cpc	r25, r19
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   138ae:	49 f4       	brne	.+18     	; 0x138c2 <Read_Config+0x186>
   138b0:	ed b7       	in	r30, 0x3d	; 61
   138b2:	fe b7       	in	r31, 0x3e	; 62
   138b4:	57 82       	std	Z+7, r5	; 0x07
   138b6:	46 82       	std	Z+6, r4	; 0x06
   138b8:	95 82       	std	Z+5, r9	; 0x05
   138ba:	84 82       	std	Z+4, r8	; 0x04
   138bc:	84 ea       	ldi	r24, 0xA4	; 164
   138be:	9c e1       	ldi	r25, 0x1C	; 28
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   138c0:	c9 c0       	rjmp	.+402    	; 0x13a54 <Read_Config+0x318>
   138c2:	88 0f       	add	r24, r24
   138c4:	99 1f       	adc	r25, r25
   138c6:	88 0f       	add	r24, r24
   138c8:	99 1f       	adc	r25, r25
   138ca:	fc 01       	movw	r30, r24
   138cc:	ec 53       	subi	r30, 0x3C	; 60
   138ce:	fe 4f       	sbci	r31, 0xFE	; 254
   138d0:	02 81       	ldd	r16, Z+2	; 0x02

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   138d2:	13 81       	ldd	r17, Z+3	; 0x03
   138d4:	4e e7       	ldi	r20, 0x7E	; 126
   138d6:	50 e0       	ldi	r21, 0x00	; 0
   138d8:	b4 01       	movw	r22, r8
   138da:	c5 01       	movw	r24, r10
   138dc:	0e 94 39 33 	call	0x6672	; 0x6672 <get_token>
        if(MATCH(token,"="))
   138e0:	5c 01       	movw	r10, r24
   138e2:	6a e5       	ldi	r22, 0x5A	; 90
   138e4:	7e e0       	ldi	r23, 0x0E	; 14
   138e6:	c4 01       	movw	r24, r8
   138e8:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
   138ec:	89 2b       	or	r24, r25
            ptr = get_token(ptr, token, sizeof(token)-2);
   138ee:	39 f0       	breq	.+14     	; 0x138fe <Read_Config+0x1c2>
   138f0:	4e e7       	ldi	r20, 0x7E	; 126
   138f2:	50 e0       	ldi	r21, 0x00	; 0
   138f4:	b4 01       	movw	r22, r8
   138f6:	c5 01       	movw	r24, r10
   138f8:	0e 94 39 33 	call	0x6672	; 0x6672 <get_token>
        val.l = get_value(token);
   138fc:	5c 01       	movw	r10, r24
   138fe:	c4 01       	movw	r24, r8
   13900:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   13904:	01 31       	cpi	r16, 0x11	; 17
        {
            state = pop_state();
   13906:	11 05       	cpc	r17, r1
   13908:	19 f4       	brne	.+6      	; 0x13910 <Read_Config+0x1d4>
   1390a:	cc dd       	rcall	.-1128   	; 0x134a4 <pop_state>
            continue;
   1390c:	1c 01       	movw	r2, r24
        }

        switch(state)
   1390e:	b7 cf       	rjmp	.-146    	; 0x1387e <Read_Config+0x142>
   13910:	30 e1       	ldi	r19, 0x10	; 16
   13912:	23 16       	cp	r2, r19
   13914:	31 04       	cpc	r3, r1
   13916:	08 f0       	brcs	.+2      	; 0x1391a <Read_Config+0x1de>
   13918:	de c2       	rjmp	.+1468   	; 0x13ed6 <Read_Config+0x79a>
   1391a:	f1 01       	movw	r30, r2
   1391c:	e0 53       	subi	r30, 0x30	; 48
   1391e:	ff 4f       	sbci	r31, 0xFF	; 255
   13920:	0c 94 a0 e2 	jmp	0x1c540	; 0x1c540 <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   13924:	0e 30       	cpi	r16, 0x0E	; 14
   13926:	11 05       	cpc	r17, r1
   13928:	09 f4       	brne	.+2      	; 0x1392c <Read_Config+0x1f0>
   1392a:	87 c0       	rjmp	.+270    	; 0x13a3a <Read_Config+0x2fe>
   1392c:	44 f4       	brge	.+16     	; 0x1393e <Read_Config+0x202>
   1392e:	02 30       	cpi	r16, 0x02	; 2
   13930:	11 05       	cpc	r17, r1
   13932:	09 f4       	brne	.+2      	; 0x13936 <Read_Config+0x1fa>
   13934:	41 c0       	rjmp	.+130    	; 0x139b8 <Read_Config+0x27c>
   13936:	0c 30       	cpi	r16, 0x0C	; 12
   13938:	11 05       	cpc	r17, r1
   1393a:	09 f1       	breq	.+66     	; 0x1397e <Read_Config+0x242>
   1393c:	83 c0       	rjmp	.+262    	; 0x13a44 <Read_Config+0x308>
   1393e:	03 32       	cpi	r16, 0x23	; 35
   13940:	11 05       	cpc	r17, r1
   13942:	e9 f0       	breq	.+58     	; 0x1397e <Read_Config+0x242>
   13944:	04 32       	cpi	r16, 0x24	; 36
   13946:	11 05       	cpc	r17, r1
   13948:	29 f0       	breq	.+10     	; 0x13954 <Read_Config+0x218>
   1394a:	00 32       	cpi	r16, 0x20	; 32
   1394c:	11 05       	cpc	r17, r1
   1394e:	09 f0       	breq	.+2      	; 0x13952 <Read_Config+0x216>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   13950:	79 c0       	rjmp	.+242    	; 0x13a44 <Read_Config+0x308>
   13952:	55 c0       	rjmp	.+170    	; 0x139fe <Read_Config+0x2c2>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   13954:	80 e0       	ldi	r24, 0x00	; 0
   13956:	90 e0       	ldi	r25, 0x00	; 0
   13958:	8c dd       	rcall	.-1256   	; 0x13472 <push_state>
   1395a:	82 e0       	ldi	r24, 0x02	; 2
   1395c:	90 e0       	ldi	r25, 0x00	; 0
                        if(index == -1)
   1395e:	a6 dc       	rcall	.-1716   	; 0x132ac <alloc_device>
   13960:	6c 01       	movw	r12, r24
   13962:	01 96       	adiw	r24, 0x01	; 1
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13964:	09 f4       	brne	.+2      	; 0x13968 <Read_Config+0x22c>
   13966:	8b cf       	rjmp	.-234    	; 0x1387e <Read_Config+0x142>
   13968:	8b e2       	ldi	r24, 0x2B	; 43
   1396a:	8c 9d       	mul	r24, r12
   1396c:	f0 01       	movw	r30, r0
   1396e:	8d 9d       	mul	r24, r13
   13970:	f0 0d       	add	r31, r0
   13972:	11 24       	eor	r1, r1
   13974:	e9 51       	subi	r30, 0x19	; 25
   13976:	f1 4e       	sbci	r31, 0xE1	; 225
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   13978:	67 a0       	ldd	r6, Z+39	; 0x27
   1397a:	70 a4       	ldd	r7, Z+40	; 0x28
   1397c:	19 c0       	rjmp	.+50     	; 0x139b0 <Read_Config+0x274>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   1397e:	80 e0       	ldi	r24, 0x00	; 0
   13980:	90 e0       	ldi	r25, 0x00	; 0
   13982:	77 dd       	rcall	.-1298   	; 0x13472 <push_state>
   13984:	83 e0       	ldi	r24, 0x03	; 3
   13986:	90 e0       	ldi	r25, 0x00	; 0
                        if(index == -1)
   13988:	91 dc       	rcall	.-1758   	; 0x132ac <alloc_device>
   1398a:	6c 01       	movw	r12, r24
   1398c:	8f ef       	ldi	r24, 0xFF	; 255
   1398e:	c8 16       	cp	r12, r24
   13990:	d8 06       	cpc	r13, r24
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13992:	09 f4       	brne	.+2      	; 0x13996 <Read_Config+0x25a>
   13994:	74 cf       	rjmp	.-280    	; 0x1387e <Read_Config+0x142>
   13996:	8b e2       	ldi	r24, 0x2B	; 43
   13998:	8c 9d       	mul	r24, r12
   1399a:	f0 01       	movw	r30, r0
   1399c:	8d 9d       	mul	r24, r13
   1399e:	f0 0d       	add	r31, r0
   139a0:	11 24       	eor	r1, r1
   139a2:	e9 51       	subi	r30, 0x19	; 25
// Also sets Devices[index].model
                            hpdir_set_parameters(index,token);
   139a4:	f1 4e       	sbci	r31, 0xE1	; 225
   139a6:	67 a0       	ldd	r6, Z+39	; 0x27
   139a8:	70 a4       	ldd	r7, Z+40	; 0x28
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   139aa:	b4 01       	movw	r22, r8
   139ac:	c6 01       	movw	r24, r12
   139ae:	20 de       	rcall	.-960    	; 0x135f0 <hpdir_set_parameters>
                            hpdir_set_parameters(index,token);
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   139b0:	22 24       	eor	r2, r2
   139b2:	23 94       	inc	r2
   139b4:	31 2c       	mov	r3, r1
   139b6:	63 cf       	rjmp	.-314    	; 0x1387e <Read_Config+0x142>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   139b8:	80 e0       	ldi	r24, 0x00	; 0
   139ba:	90 e0       	ldi	r25, 0x00	; 0
   139bc:	5a dd       	rcall	.-1356   	; 0x13472 <push_state>
   139be:	81 e0       	ldi	r24, 0x01	; 1
   139c0:	90 e0       	ldi	r25, 0x00	; 0
                        if(index == -1)
   139c2:	74 dc       	rcall	.-1816   	; 0x132ac <alloc_device>
   139c4:	6c 01       	movw	r12, r24
   139c6:	9f ef       	ldi	r25, 0xFF	; 255
   139c8:	c9 16       	cp	r12, r25
   139ca:	d9 06       	cpc	r13, r25
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   139cc:	09 f4       	brne	.+2      	; 0x139d0 <Read_Config+0x294>
   139ce:	57 cf       	rjmp	.-338    	; 0x1387e <Read_Config+0x142>
   139d0:	8b e2       	ldi	r24, 0x2B	; 43
   139d2:	8c 9d       	mul	r24, r12
   139d4:	f0 01       	movw	r30, r0
   139d6:	8d 9d       	mul	r24, r13
   139d8:	f0 0d       	add	r31, r0
   139da:	11 24       	eor	r1, r1
   139dc:	e9 51       	subi	r30, 0x19	; 25
   139de:	f1 4e       	sbci	r31, 0xE1	; 225
   139e0:	a7 a1       	ldd	r26, Z+39	; 0x27
   139e2:	b0 a5       	ldd	r27, Z+40	; 0x28
   139e4:	c8 5f       	subi	r28, 0xF8	; 248
   139e6:	de 4f       	sbci	r29, 0xFE	; 254
// Also sets Devices[index.model
                            hpdir_set_parameters(index,token);
   139e8:	b9 83       	std	Y+1, r27	; 0x01
   139ea:	a8 83       	st	Y, r26
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   139ec:	c8 50       	subi	r28, 0x08	; 8
   139ee:	d1 40       	sbci	r29, 0x01	; 1
   139f0:	b4 01       	movw	r22, r8
   139f2:	c6 01       	movw	r24, r12
                            hpdir_set_parameters(index,token);
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   139f4:	fd dd       	rcall	.-1030   	; 0x135f0 <hpdir_set_parameters>
   139f6:	aa e0       	ldi	r26, 0x0A	; 10
   139f8:	2a 2e       	mov	r2, r26
   139fa:	31 2c       	mov	r3, r1
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   139fc:	40 cf       	rjmp	.-384    	; 0x1387e <Read_Config+0x142>
   139fe:	80 e0       	ldi	r24, 0x00	; 0
   13a00:	90 e0       	ldi	r25, 0x00	; 0
   13a02:	37 dd       	rcall	.-1426   	; 0x13472 <push_state>
   13a04:	84 e0       	ldi	r24, 0x04	; 4
                        if(index == -1)
   13a06:	90 e0       	ldi	r25, 0x00	; 0
   13a08:	51 dc       	rcall	.-1886   	; 0x132ac <alloc_device>
   13a0a:	6c 01       	movw	r12, r24
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13a0c:	01 96       	adiw	r24, 0x01	; 1
   13a0e:	09 f4       	brne	.+2      	; 0x13a12 <Read_Config+0x2d6>
   13a10:	36 cf       	rjmp	.-404    	; 0x1387e <Read_Config+0x142>
   13a12:	8b e2       	ldi	r24, 0x2B	; 43
   13a14:	8c 9d       	mul	r24, r12
   13a16:	f0 01       	movw	r30, r0
   13a18:	8d 9d       	mul	r24, r13
   13a1a:	f0 0d       	add	r31, r0
   13a1c:	11 24       	eor	r1, r1
   13a1e:	e9 51       	subi	r30, 0x19	; 25
   13a20:	f1 4e       	sbci	r31, 0xE1	; 225
   13a22:	27 a1       	ldd	r18, Z+39	; 0x27
   13a24:	30 a5       	ldd	r19, Z+40	; 0x28
   13a26:	c6 5f       	subi	r28, 0xF6	; 246
   13a28:	de 4f       	sbci	r29, 0xFE	; 254
   13a2a:	39 83       	std	Y+1, r19	; 0x01
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   13a2c:	28 83       	st	Y, r18
   13a2e:	ca 50       	subi	r28, 0x0A	; 10
   13a30:	d1 40       	sbci	r29, 0x01	; 1
   13a32:	fe e0       	ldi	r31, 0x0E	; 14
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   13a34:	2f 2e       	mov	r2, r31
   13a36:	31 2c       	mov	r3, r1
   13a38:	22 cf       	rjmp	.-444    	; 0x1387e <Read_Config+0x142>
   13a3a:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                        break;
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   13a3e:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   13a42:	1d cf       	rjmp	.-454    	; 0x1387e <Read_Config+0x142>
   13a44:	ed b7       	in	r30, 0x3d	; 61
   13a46:	fe b7       	in	r31, 0x3e	; 62
   13a48:	57 82       	std	Z+7, r5	; 0x07
   13a4a:	46 82       	std	Z+6, r4	; 0x06
   13a4c:	b5 82       	std	Z+5, r11	; 0x05
   13a4e:	a4 82       	std	Z+4, r10	; 0x04
   13a50:	82 e8       	ldi	r24, 0x82	; 130
   13a52:	9c e1       	ldi	r25, 0x1C	; 28
   13a54:	a0 e0       	ldi	r26, 0x00	; 0
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   13a56:	81 83       	std	Z+1, r24	; 0x01
   13a58:	92 83       	std	Z+2, r25	; 0x02
   13a5a:	a3 83       	std	Z+3, r26	; 0x03
                {
                    push_state(state);
   13a5c:	4c c2       	rjmp	.+1176   	; 0x13ef6 <Read_Config+0x7ba>
   13a5e:	09 30       	cpi	r16, 0x09	; 9
   13a60:	11 05       	cpc	r17, r1
   13a62:	39 f4       	brne	.+14     	; 0x13a72 <Read_Config+0x336>
                    state = PRINTER_CONFIG;
   13a64:	8e e0       	ldi	r24, 0x0E	; 14
   13a66:	90 e0       	ldi	r25, 0x00	; 0
   13a68:	04 dd       	rcall	.-1528   	; 0x13472 <push_state>
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   13a6a:	ef e0       	ldi	r30, 0x0F	; 15
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   13a6c:	2e 2e       	mov	r2, r30
   13a6e:	31 2c       	mov	r3, r1
   13a70:	06 cf       	rjmp	.-500    	; 0x1387e <Read_Config+0x142>
   13a72:	ed b7       	in	r30, 0x3d	; 61
   13a74:	fe b7       	in	r31, 0x3e	; 62
   13a76:	57 82       	std	Z+7, r5	; 0x07
   13a78:	46 82       	std	Z+6, r4	; 0x06
   13a7a:	b5 82       	std	Z+5, r11	; 0x05
   13a7c:	a4 82       	std	Z+4, r10	; 0x04
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   13a7e:	88 e5       	ldi	r24, 0x58	; 88
   13a80:	9c e1       	ldi	r25, 0x1C	; 28
   13a82:	e8 cf       	rjmp	.-48     	; 0x13a54 <Read_Config+0x318>
                {
                    Devices[index].ADDRESS = 0x1f & val.b;
   13a84:	01 30       	cpi	r16, 0x01	; 1
   13a86:	11 05       	cpc	r17, r1
   13a88:	b1 f4       	brne	.+44     	; 0x13ab6 <Read_Config+0x37a>
   13a8a:	6f 71       	andi	r22, 0x1F	; 31
   13a8c:	8b e2       	ldi	r24, 0x2B	; 43
   13a8e:	8c 9d       	mul	r24, r12
   13a90:	f0 01       	movw	r30, r0
   13a92:	8d 9d       	mul	r24, r13
   13a94:	f0 0d       	add	r31, r0
   13a96:	11 24       	eor	r1, r1
                    PRINTERp->HEADER.ADDRESS  = 0x1f & val.b;
   13a98:	e9 51       	subi	r30, 0x19	; 25
   13a9a:	f1 4e       	sbci	r31, 0xE1	; 225
   13a9c:	61 83       	std	Z+1, r22	; 0x01
   13a9e:	c6 5f       	subi	r28, 0xF6	; 246
   13aa0:	de 4f       	sbci	r29, 0xFE	; 254
   13aa2:	a8 81       	ld	r26, Y
   13aa4:	b9 81       	ldd	r27, Y+1	; 0x01
// NO PPR
                    Devices[index].PPR = 0xff;
   13aa6:	ca 50       	subi	r28, 0x0A	; 10
   13aa8:	d1 40       	sbci	r29, 0x01	; 1
                    PRINTERp->HEADER.PPR = 0xff;
   13aaa:	6c 93       	st	X, r22
   13aac:	8f ef       	ldi	r24, 0xFF	; 255
   13aae:	82 83       	std	Z+2, r24	; 0x02
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   13ab0:	fd 01       	movw	r30, r26
   13ab2:	81 83       	std	Z+1, r24	; 0x01
   13ab4:	e4 ce       	rjmp	.-568    	; 0x1387e <Read_Config+0x142>
   13ab6:	ed b7       	in	r30, 0x3d	; 61
   13ab8:	fe b7       	in	r31, 0x3e	; 62
   13aba:	57 82       	std	Z+7, r5	; 0x07
   13abc:	46 82       	std	Z+6, r4	; 0x06
   13abe:	b5 82       	std	Z+5, r11	; 0x05
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   13ac0:	a4 82       	std	Z+4, r10	; 0x04
   13ac2:	87 e2       	ldi	r24, 0x27	; 39
   13ac4:	9c e1       	ldi	r25, 0x1C	; 28
   13ac6:	c6 cf       	rjmp	.-116    	; 0x13a54 <Read_Config+0x318>
   13ac8:	05 31       	cpi	r16, 0x15	; 21
   13aca:	11 05       	cpc	r17, r1
   13acc:	d9 f0       	breq	.+54     	; 0x13b04 <Read_Config+0x3c8>
   13ace:	6c f4       	brge	.+26     	; 0x13aea <Read_Config+0x3ae>
   13ad0:	09 30       	cpi	r16, 0x09	; 9
   13ad2:	11 05       	cpc	r17, r1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   13ad4:	f1 f0       	breq	.+60     	; 0x13b12 <Read_Config+0x3d6>
   13ad6:	0b 30       	cpi	r16, 0x0B	; 11
   13ad8:	11 05       	cpc	r17, r1
                        state = SS80_CONTROLLER;
   13ada:	49 f5       	brne	.+82     	; 0x13b2e <Read_Config+0x3f2>
   13adc:	81 e0       	ldi	r24, 0x01	; 1
   13ade:	90 e0       	ldi	r25, 0x00	; 0
                        break;
   13ae0:	c8 dc       	rcall	.-1648   	; 0x13472 <push_state>
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   13ae2:	54 e0       	ldi	r21, 0x04	; 4
   13ae4:	25 2e       	mov	r2, r21
   13ae6:	31 2c       	mov	r3, r1
   13ae8:	ca ce       	rjmp	.-620    	; 0x1387e <Read_Config+0x142>
   13aea:	07 32       	cpi	r16, 0x27	; 39
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   13aec:	11 05       	cpc	r17, r1
   13aee:	c1 f0       	breq	.+48     	; 0x13b20 <Read_Config+0x3e4>
   13af0:	0a 32       	cpi	r16, 0x2A	; 42
                        state = SS80_VOLUME;
   13af2:	11 05       	cpc	r17, r1
   13af4:	e1 f4       	brne	.+56     	; 0x13b2e <Read_Config+0x3f2>
   13af6:	81 e0       	ldi	r24, 0x01	; 1
                        break;
   13af8:	90 e0       	ldi	r25, 0x00	; 0

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   13afa:	bb dc       	rcall	.-1674   	; 0x13472 <push_state>
   13afc:	36 e0       	ldi	r19, 0x06	; 6
   13afe:	23 2e       	mov	r2, r19
                        state = SS80_HEADER;
   13b00:	31 2c       	mov	r3, r1
   13b02:	bd ce       	rjmp	.-646    	; 0x1387e <Read_Config+0x142>
   13b04:	81 e0       	ldi	r24, 0x01	; 1
                        break;
   13b06:	90 e0       	ldi	r25, 0x00	; 0
                    case TOK_CONFIG:
                        push_state(state);
   13b08:	b4 dc       	rcall	.-1688   	; 0x13472 <push_state>
   13b0a:	72 e0       	ldi	r23, 0x02	; 2
   13b0c:	27 2e       	mov	r2, r23
   13b0e:	31 2c       	mov	r3, r1
                        state = SS80_CONFIG;
   13b10:	b6 ce       	rjmp	.-660    	; 0x1387e <Read_Config+0x142>
   13b12:	81 e0       	ldi	r24, 0x01	; 1
   13b14:	90 e0       	ldi	r25, 0x00	; 0
                        break;
   13b16:	ad dc       	rcall	.-1702   	; 0x13472 <push_state>
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   13b18:	63 e0       	ldi	r22, 0x03	; 3
   13b1a:	26 2e       	mov	r2, r22
   13b1c:	31 2c       	mov	r3, r1
   13b1e:	af ce       	rjmp	.-674    	; 0x1387e <Read_Config+0x142>
                        state = SS80_UNIT;
   13b20:	81 e0       	ldi	r24, 0x01	; 1
   13b22:	90 e0       	ldi	r25, 0x00	; 0
   13b24:	a6 dc       	rcall	.-1716   	; 0x13472 <push_state>
                        break;
   13b26:	45 e0       	ldi	r20, 0x05	; 5
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   13b28:	24 2e       	mov	r2, r20
   13b2a:	31 2c       	mov	r3, r1
   13b2c:	a8 ce       	rjmp	.-688    	; 0x1387e <Read_Config+0x142>
   13b2e:	ed b7       	in	r30, 0x3d	; 61
   13b30:	fe b7       	in	r31, 0x3e	; 62
   13b32:	57 82       	std	Z+7, r5	; 0x07
   13b34:	46 82       	std	Z+6, r4	; 0x06
   13b36:	b5 82       	std	Z+5, r11	; 0x05
   13b38:	a4 82       	std	Z+4, r10	; 0x04
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   13b3a:	8a ef       	ldi	r24, 0xFA	; 250
   13b3c:	9b e1       	ldi	r25, 0x1B	; 27
   13b3e:	8a cf       	rjmp	.-236    	; 0x13a54 <Read_Config+0x318>
   13b40:	02 31       	cpi	r16, 0x12	; 18
   13b42:	11 05       	cpc	r17, r1
   13b44:	f1 f0       	breq	.+60     	; 0x13b82 <Read_Config+0x446>
   13b46:	0f 31       	cpi	r16, 0x1F	; 31
   13b48:	11 05       	cpc	r17, r1
   13b4a:	79 f0       	breq	.+30     	; 0x13b6a <Read_Config+0x42e>
                {
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   13b4c:	01 30       	cpi	r16, 0x01	; 1
   13b4e:	11 05       	cpc	r17, r1
   13b50:	e9 f4       	brne	.+58     	; 0x13b8c <Read_Config+0x450>
   13b52:	6f 71       	andi	r22, 0x1F	; 31
   13b54:	8b e2       	ldi	r24, 0x2B	; 43
   13b56:	8c 9d       	mul	r24, r12
   13b58:	f0 01       	movw	r30, r0
   13b5a:	8d 9d       	mul	r24, r13
   13b5c:	f0 0d       	add	r31, r0
   13b5e:	11 24       	eor	r1, r1
                        SS80p->HEADER.ADDRESS  = 0x1f & val.b;
   13b60:	e9 51       	subi	r30, 0x19	; 25
   13b62:	f1 4e       	sbci	r31, 0xE1	; 225
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   13b64:	61 83       	std	Z+1, r22	; 0x01
   13b66:	d3 01       	movw	r26, r6
   13b68:	37 c1       	rjmp	.+622    	; 0x13dd8 <Read_Config+0x69c>
   13b6a:	67 70       	andi	r22, 0x07	; 7
   13b6c:	8b e2       	ldi	r24, 0x2B	; 43
   13b6e:	8c 9d       	mul	r24, r12
   13b70:	f0 01       	movw	r30, r0
   13b72:	8d 9d       	mul	r24, r13
   13b74:	f0 0d       	add	r31, r0
   13b76:	11 24       	eor	r1, r1
                        SS80p->HEADER.PPR = 0x07 & val.b;
   13b78:	e9 51       	subi	r30, 0x19	; 25
   13b7a:	f1 4e       	sbci	r31, 0xE1	; 225
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   13b7c:	62 83       	std	Z+2, r22	; 0x02
   13b7e:	f3 01       	movw	r30, r6
   13b80:	2d c1       	rjmp	.+602    	; 0x13ddc <Read_Config+0x6a0>
   13b82:	c4 01       	movw	r24, r8
   13b84:	0e 94 27 32 	call	0x644e	; 0x644e <stralloc>
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13b88:	f3 01       	movw	r30, r6
   13b8a:	33 c1       	rjmp	.+614    	; 0x13df2 <Read_Config+0x6b6>
   13b8c:	ed b7       	in	r30, 0x3d	; 61
   13b8e:	fe b7       	in	r31, 0x3e	; 62
   13b90:	57 82       	std	Z+7, r5	; 0x07
   13b92:	46 82       	std	Z+6, r4	; 0x06
   13b94:	b5 82       	std	Z+5, r11	; 0x05
   13b96:	a4 82       	std	Z+4, r10	; 0x04
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   13b98:	8c ec       	ldi	r24, 0xCC	; 204
   13b9a:	9b e1       	ldi	r25, 0x1B	; 27
   13b9c:	5b cf       	rjmp	.-330    	; 0x13a54 <Read_Config+0x318>
                {
                    SS80p->CONFIG.ID = val.w;
   13b9e:	07 31       	cpi	r16, 0x17	; 23
   13ba0:	11 05       	cpc	r17, r1
   13ba2:	21 f4       	brne	.+8      	; 0x13bac <Read_Config+0x470>
   13ba4:	96 2f       	mov	r25, r22
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13ba6:	87 2f       	mov	r24, r23
   13ba8:	f3 01       	movw	r30, r6
   13baa:	3f c1       	rjmp	.+638    	; 0x13e2a <Read_Config+0x6ee>
   13bac:	ed b7       	in	r30, 0x3d	; 61
   13bae:	fe b7       	in	r31, 0x3e	; 62
   13bb0:	57 82       	std	Z+7, r5	; 0x07
   13bb2:	46 82       	std	Z+6, r4	; 0x06
   13bb4:	b5 82       	std	Z+5, r11	; 0x05
   13bb6:	a4 82       	std	Z+4, r10	; 0x04
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   13bb8:	8e e9       	ldi	r24, 0x9E	; 158
   13bba:	9b e1       	ldi	r25, 0x1B	; 27
   13bbc:	4b cf       	rjmp	.-362    	; 0x13a54 <Read_Config+0x318>
   13bbe:	06 32       	cpi	r16, 0x26	; 38
   13bc0:	11 05       	cpc	r17, r1
   13bc2:	71 f0       	breq	.+28     	; 0x13be0 <Read_Config+0x4a4>
   13bc4:	08 32       	cpi	r16, 0x28	; 40
   13bc6:	11 05       	cpc	r17, r1
   13bc8:	39 f0       	breq	.+14     	; 0x13bd8 <Read_Config+0x49c>
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   13bca:	05 32       	cpi	r16, 0x25	; 37
   13bcc:	11 05       	cpc	r17, r1
   13bce:	59 f4       	brne	.+22     	; 0x13be6 <Read_Config+0x4aa>
   13bd0:	96 2f       	mov	r25, r22

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   13bd2:	87 2f       	mov	r24, r23
   13bd4:	f3 01       	movw	r30, r6
   13bd6:	5c c1       	rjmp	.+696    	; 0x13e90 <Read_Config+0x754>
   13bd8:	96 2f       	mov	r25, r22
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   13bda:	87 2f       	mov	r24, r23
   13bdc:	f3 01       	movw	r30, r6
                        break;
   13bde:	55 c1       	rjmp	.+682    	; 0x13e8a <Read_Config+0x74e>
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   13be0:	f3 01       	movw	r30, r6
   13be2:	62 87       	std	Z+10, r22	; 0x0a
   13be4:	4c ce       	rjmp	.-872    	; 0x1387e <Read_Config+0x142>
   13be6:	ed b7       	in	r30, 0x3d	; 61
   13be8:	fe b7       	in	r31, 0x3e	; 62
   13bea:	57 82       	std	Z+7, r5	; 0x07
   13bec:	46 82       	std	Z+6, r4	; 0x06
   13bee:	b5 82       	std	Z+5, r11	; 0x05
   13bf0:	a4 82       	std	Z+4, r10	; 0x04
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13bf2:	8c e6       	ldi	r24, 0x6C	; 108
   13bf4:	9b e1       	ldi	r25, 0x1B	; 27
   13bf6:	2e cf       	rjmp	.-420    	; 0x13a54 <Read_Config+0x318>
   13bf8:	0a 30       	cpi	r16, 0x0A	; 10
   13bfa:	11 05       	cpc	r17, r1
   13bfc:	09 f4       	brne	.+2      	; 0x13c00 <Read_Config+0x4c4>
   13bfe:	45 c0       	rjmp	.+138    	; 0x13c8a <Read_Config+0x54e>
   13c00:	d4 f4       	brge	.+52     	; 0x13c36 <Read_Config+0x4fa>
   13c02:	05 30       	cpi	r16, 0x05	; 5
   13c04:	11 05       	cpc	r17, r1
   13c06:	d1 f1       	breq	.+116    	; 0x13c7c <Read_Config+0x540>
   13c08:	64 f4       	brge	.+24     	; 0x13c22 <Read_Config+0x4e6>
   13c0a:	01 15       	cp	r16, r1
   13c0c:	11 05       	cpc	r17, r1
   13c0e:	09 f4       	brne	.+2      	; 0x13c12 <Read_Config+0x4d6>
   13c10:	40 c0       	rjmp	.+128    	; 0x13c92 <Read_Config+0x556>
   13c12:	04 30       	cpi	r16, 0x04	; 4
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   13c14:	11 05       	cpc	r17, r1
   13c16:	09 f0       	breq	.+2      	; 0x13c1a <Read_Config+0x4de>
   13c18:	46 c0       	rjmp	.+140    	; 0x13ca6 <Read_Config+0x56a>
                        break;
   13c1a:	f3 01       	movw	r30, r6
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13c1c:	64 8b       	std	Z+20, r22	; 0x14
   13c1e:	75 8b       	std	Z+21, r23	; 0x15
   13c20:	2e ce       	rjmp	.-932    	; 0x1387e <Read_Config+0x142>
   13c22:	06 30       	cpi	r16, 0x06	; 6
   13c24:	11 05       	cpc	r17, r1
   13c26:	71 f1       	breq	.+92     	; 0x13c84 <Read_Config+0x548>
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   13c28:	07 30       	cpi	r16, 0x07	; 7
   13c2a:	11 05       	cpc	r17, r1
   13c2c:	e1 f5       	brne	.+120    	; 0x13ca6 <Read_Config+0x56a>
                        break;
   13c2e:	f3 01       	movw	r30, r6
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13c30:	60 8b       	std	Z+16, r22	; 0x10
   13c32:	71 8b       	std	Z+17, r23	; 0x11
   13c34:	24 ce       	rjmp	.-952    	; 0x1387e <Read_Config+0x142>
   13c36:	0c 31       	cpi	r16, 0x1C	; 28
   13c38:	11 05       	cpc	r17, r1
   13c3a:	79 f1       	breq	.+94     	; 0x13c9a <Read_Config+0x55e>
   13c3c:	4c f4       	brge	.+18     	; 0x13c50 <Read_Config+0x514>
   13c3e:	0f 30       	cpi	r16, 0x0F	; 15
   13c40:	11 05       	cpc	r17, r1
   13c42:	b1 f0       	breq	.+44     	; 0x13c70 <Read_Config+0x534>
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   13c44:	03 31       	cpi	r16, 0x13	; 19
   13c46:	11 05       	cpc	r17, r1
                        break;
   13c48:	71 f5       	brne	.+92     	; 0x13ca6 <Read_Config+0x56a>
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13c4a:	f3 01       	movw	r30, r6
   13c4c:	65 8f       	std	Z+29, r22	; 0x1d
   13c4e:	17 ce       	rjmp	.-978    	; 0x1387e <Read_Config+0x142>
   13c50:	01 32       	cpi	r16, 0x21	; 33
   13c52:	11 05       	cpc	r17, r1
   13c54:	29 f1       	breq	.+74     	; 0x13ca0 <Read_Config+0x564>
   13c56:	09 32       	cpi	r16, 0x29	; 41
   13c58:	11 05       	cpc	r17, r1
   13c5a:	39 f0       	breq	.+14     	; 0x13c6a <Read_Config+0x52e>
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   13c5c:	0e 31       	cpi	r16, 0x1E	; 30
   13c5e:	11 05       	cpc	r17, r1
   13c60:	11 f5       	brne	.+68     	; 0x13ca6 <Read_Config+0x56a>
                        break;
   13c62:	f3 01       	movw	r30, r6

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   13c64:	60 8f       	std	Z+24, r22	; 0x18
   13c66:	71 8f       	std	Z+25, r23	; 0x19
                        break;
   13c68:	0a ce       	rjmp	.-1004   	; 0x1387e <Read_Config+0x142>
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   13c6a:	f3 01       	movw	r30, r6
   13c6c:	63 87       	std	Z+11, r22	; 0x0b
   13c6e:	07 ce       	rjmp	.-1010   	; 0x1387e <Read_Config+0x142>
   13c70:	f3 01       	movw	r30, r6
   13c72:	64 87       	std	Z+12, r22	; 0x0c
                        break;
   13c74:	75 87       	std	Z+13, r23	; 0x0d
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   13c76:	86 87       	std	Z+14, r24	; 0x0e
   13c78:	97 87       	std	Z+15, r25	; 0x0f
   13c7a:	01 ce       	rjmp	.-1022   	; 0x1387e <Read_Config+0x142>
                        break;
   13c7c:	61 70       	andi	r22, 0x01	; 1
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   13c7e:	f3 01       	movw	r30, r6
   13c80:	62 8b       	std	Z+18, r22	; 0x12
                        break;
   13c82:	fd cd       	rjmp	.-1030   	; 0x1387e <Read_Config+0x142>
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   13c84:	f3 01       	movw	r30, r6
   13c86:	63 8b       	std	Z+19, r22	; 0x13
   13c88:	fa cd       	rjmp	.-1036   	; 0x1387e <Read_Config+0x142>
                        break;
   13c8a:	f3 01       	movw	r30, r6
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   13c8c:	66 8b       	std	Z+22, r22	; 0x16
   13c8e:	77 8b       	std	Z+23, r23	; 0x17
   13c90:	f6 cd       	rjmp	.-1044   	; 0x1387e <Read_Config+0x142>
                        break;
   13c92:	f3 01       	movw	r30, r6
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   13c94:	62 8f       	std	Z+26, r22	; 0x1a
   13c96:	73 8f       	std	Z+27, r23	; 0x1b
                        break;
   13c98:	f2 cd       	rjmp	.-1052   	; 0x1387e <Read_Config+0x142>
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   13c9a:	f3 01       	movw	r30, r6
   13c9c:	64 8f       	std	Z+28, r22	; 0x1c
                        break;
   13c9e:	ef cd       	rjmp	.-1058   	; 0x1387e <Read_Config+0x142>
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   13ca0:	f3 01       	movw	r30, r6
   13ca2:	66 8f       	std	Z+30, r22	; 0x1e
   13ca4:	ec cd       	rjmp	.-1064   	; 0x1387e <Read_Config+0x142>
   13ca6:	ed b7       	in	r30, 0x3d	; 61
   13ca8:	fe b7       	in	r31, 0x3e	; 62
   13caa:	57 82       	std	Z+7, r5	; 0x07
   13cac:	46 82       	std	Z+6, r4	; 0x06
   13cae:	b5 82       	std	Z+5, r11	; 0x05
   13cb0:	a4 82       	std	Z+4, r10	; 0x04
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   13cb2:	80 e4       	ldi	r24, 0x40	; 64
   13cb4:	9b e1       	ldi	r25, 0x1B	; 27
   13cb6:	ce ce       	rjmp	.-612    	; 0x13a54 <Read_Config+0x318>
   13cb8:	0a 31       	cpi	r16, 0x1A	; 26
   13cba:	11 05       	cpc	r17, r1
   13cbc:	b9 f0       	breq	.+46     	; 0x13cec <Read_Config+0x5b0>
   13cbe:	64 f4       	brge	.+24     	; 0x13cd8 <Read_Config+0x59c>
   13cc0:	08 31       	cpi	r16, 0x18	; 24
   13cc2:	11 05       	cpc	r17, r1
   13cc4:	e1 f0       	breq	.+56     	; 0x13cfe <Read_Config+0x5c2>
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   13cc6:	09 31       	cpi	r16, 0x19	; 25
   13cc8:	11 05       	cpc	r17, r1
   13cca:	e1 f4       	brne	.+56     	; 0x13d04 <Read_Config+0x5c8>
   13ccc:	f3 01       	movw	r30, r6
   13cce:	66 a3       	std	Z+38, r22	; 0x26
                        break;
   13cd0:	77 a3       	std	Z+39, r23	; 0x27
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   13cd2:	80 a7       	std	Z+40, r24	; 0x28
   13cd4:	91 a7       	std	Z+41, r25	; 0x29
   13cd6:	d3 cd       	rjmp	.-1114   	; 0x1387e <Read_Config+0x142>
   13cd8:	0b 31       	cpi	r16, 0x1B	; 27
   13cda:	11 05       	cpc	r17, r1
   13cdc:	69 f0       	breq	.+26     	; 0x13cf8 <Read_Config+0x5bc>
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   13cde:	0d 31       	cpi	r16, 0x1D	; 29
   13ce0:	11 05       	cpc	r17, r1
   13ce2:	81 f4       	brne	.+32     	; 0x13d04 <Read_Config+0x5c8>
                        break;
   13ce4:	f3 01       	movw	r30, r6

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   13ce6:	64 a3       	std	Z+36, r22	; 0x24
   13ce8:	75 a3       	std	Z+37, r23	; 0x25
   13cea:	c9 cd       	rjmp	.-1134   	; 0x1387e <Read_Config+0x142>
   13cec:	f3 01       	movw	r30, r6
   13cee:	67 8f       	std	Z+31, r22	; 0x1f
                        break;
   13cf0:	70 a3       	std	Z+32, r23	; 0x20
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   13cf2:	81 a3       	std	Z+33, r24	; 0x21
   13cf4:	92 a3       	std	Z+34, r25	; 0x22
                        break;
   13cf6:	c3 cd       	rjmp	.-1146   	; 0x1387e <Read_Config+0x142>
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   13cf8:	f3 01       	movw	r30, r6
   13cfa:	63 a3       	std	Z+35, r22	; 0x23
                        break;
   13cfc:	c0 cd       	rjmp	.-1152   	; 0x1387e <Read_Config+0x142>
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13cfe:	f3 01       	movw	r30, r6
   13d00:	62 a7       	std	Z+42, r22	; 0x2a
   13d02:	bd cd       	rjmp	.-1158   	; 0x1387e <Read_Config+0x142>
   13d04:	ed b7       	in	r30, 0x3d	; 61
   13d06:	fe b7       	in	r31, 0x3e	; 62
   13d08:	57 82       	std	Z+7, r5	; 0x07
   13d0a:	46 82       	std	Z+6, r4	; 0x06
   13d0c:	b5 82       	std	Z+5, r11	; 0x05
   13d0e:	a4 82       	std	Z+4, r10	; 0x04
   13d10:	c3 5e       	subi	r28, 0xE3	; 227
   13d12:	de 4f       	sbci	r29, 0xFE	; 254
   13d14:	28 81       	ld	r18, Y
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   13d16:	39 81       	ldd	r19, Y+1	; 0x01
   13d18:	4a 81       	ldd	r20, Y+2	; 0x02
   13d1a:	cd 51       	subi	r28, 0x1D	; 29
   13d1c:	d1 40       	sbci	r29, 0x01	; 1
   13d1e:	e8 c0       	rjmp	.+464    	; 0x13ef0 <Read_Config+0x7b4>
   13d20:	04 31       	cpi	r16, 0x14	; 20
   13d22:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   13d24:	a1 f0       	breq	.+40     	; 0x13d4e <Read_Config+0x612>
   13d26:	05 31       	cpi	r16, 0x15	; 21
   13d28:	11 05       	cpc	r17, r1
   13d2a:	51 f0       	breq	.+20     	; 0x13d40 <Read_Config+0x604>
                        state = AMIGO_CONFIG;
   13d2c:	09 30       	cpi	r16, 0x09	; 9
   13d2e:	11 05       	cpc	r17, r1
   13d30:	a9 f4       	brne	.+42     	; 0x13d5c <Read_Config+0x620>
                        break;
   13d32:	8a e0       	ldi	r24, 0x0A	; 10
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   13d34:	90 e0       	ldi	r25, 0x00	; 0
   13d36:	9d db       	rcall	.-2246   	; 0x13472 <push_state>
   13d38:	9c e0       	ldi	r25, 0x0C	; 12
   13d3a:	29 2e       	mov	r2, r25
                        state = AMIGO_HEADER;
   13d3c:	31 2c       	mov	r3, r1
   13d3e:	9f cd       	rjmp	.-1218   	; 0x1387e <Read_Config+0x142>
   13d40:	8a e0       	ldi	r24, 0x0A	; 10
                        break;
   13d42:	90 e0       	ldi	r25, 0x00	; 0
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   13d44:	96 db       	rcall	.-2260   	; 0x13472 <push_state>
   13d46:	2b e0       	ldi	r18, 0x0B	; 11
   13d48:	22 2e       	mov	r2, r18
   13d4a:	31 2c       	mov	r3, r1
                        state = AMIGO_GEOMETRY;
   13d4c:	98 cd       	rjmp	.-1232   	; 0x1387e <Read_Config+0x142>
   13d4e:	8a e0       	ldi	r24, 0x0A	; 10
   13d50:	90 e0       	ldi	r25, 0x00	; 0
                        break;
   13d52:	8f db       	rcall	.-2274   	; 0x13472 <push_state>
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13d54:	8d e0       	ldi	r24, 0x0D	; 13
   13d56:	28 2e       	mov	r2, r24
   13d58:	31 2c       	mov	r3, r1
   13d5a:	91 cd       	rjmp	.-1246   	; 0x1387e <Read_Config+0x142>
   13d5c:	ed b7       	in	r30, 0x3d	; 61
   13d5e:	fe b7       	in	r31, 0x3e	; 62
   13d60:	57 82       	std	Z+7, r5	; 0x07
   13d62:	46 82       	std	Z+6, r4	; 0x06
   13d64:	b5 82       	std	Z+5, r11	; 0x05
   13d66:	a4 82       	std	Z+4, r10	; 0x04
   13d68:	c6 5e       	subi	r28, 0xE6	; 230
   13d6a:	de 4f       	sbci	r29, 0xFE	; 254
   13d6c:	28 81       	ld	r18, Y
   13d6e:	39 81       	ldd	r19, Y+1	; 0x01
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   13d70:	4a 81       	ldd	r20, Y+2	; 0x02
   13d72:	ca 51       	subi	r28, 0x1A	; 26
   13d74:	d1 40       	sbci	r29, 0x01	; 1
   13d76:	bc c0       	rjmp	.+376    	; 0x13ef0 <Read_Config+0x7b4>
   13d78:	00 31       	cpi	r16, 0x10	; 16
   13d7a:	11 05       	cpc	r17, r1
   13d7c:	09 f4       	brne	.+2      	; 0x13d80 <Read_Config+0x644>
   13d7e:	7f cd       	rjmp	.-1282   	; 0x1387e <Read_Config+0x142>
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   13d80:	a4 f4       	brge	.+40     	; 0x13daa <Read_Config+0x66e>
   13d82:	01 30       	cpi	r16, 0x01	; 1
   13d84:	11 05       	cpc	r17, r1
   13d86:	c1 f5       	brne	.+112    	; 0x13df8 <Read_Config+0x6bc>
   13d88:	6f 71       	andi	r22, 0x1F	; 31
   13d8a:	8b e2       	ldi	r24, 0x2B	; 43
   13d8c:	8c 9d       	mul	r24, r12
   13d8e:	f0 01       	movw	r30, r0
   13d90:	8d 9d       	mul	r24, r13
   13d92:	f0 0d       	add	r31, r0
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13d94:	11 24       	eor	r1, r1
   13d96:	e9 51       	subi	r30, 0x19	; 25
   13d98:	f1 4e       	sbci	r31, 0xE1	; 225
   13d9a:	61 83       	std	Z+1, r22	; 0x01
   13d9c:	c8 5f       	subi	r28, 0xF8	; 248
   13d9e:	de 4f       	sbci	r29, 0xFE	; 254
   13da0:	a8 81       	ld	r26, Y
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   13da2:	b9 81       	ldd	r27, Y+1	; 0x01
   13da4:	c8 50       	subi	r28, 0x08	; 8
   13da6:	d1 40       	sbci	r29, 0x01	; 1
   13da8:	17 c0       	rjmp	.+46     	; 0x13dd8 <Read_Config+0x69c>
   13daa:	02 31       	cpi	r16, 0x12	; 18
   13dac:	11 05       	cpc	r17, r1
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   13dae:	c1 f0       	breq	.+48     	; 0x13de0 <Read_Config+0x6a4>
   13db0:	0f 31       	cpi	r16, 0x1F	; 31
   13db2:	11 05       	cpc	r17, r1
   13db4:	09 f5       	brne	.+66     	; 0x13df8 <Read_Config+0x6bc>
   13db6:	67 70       	andi	r22, 0x07	; 7
   13db8:	8b e2       	ldi	r24, 0x2B	; 43
   13dba:	8c 9d       	mul	r24, r12
   13dbc:	f0 01       	movw	r30, r0
   13dbe:	8d 9d       	mul	r24, r13
   13dc0:	f0 0d       	add	r31, r0
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   13dc2:	11 24       	eor	r1, r1
   13dc4:	e9 51       	subi	r30, 0x19	; 25
   13dc6:	f1 4e       	sbci	r31, 0xE1	; 225
   13dc8:	62 83       	std	Z+2, r22	; 0x02
   13dca:	c8 5f       	subi	r28, 0xF8	; 248
   13dcc:	de 4f       	sbci	r29, 0xFE	; 254
   13dce:	e8 81       	ld	r30, Y
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13dd0:	f9 81       	ldd	r31, Y+1	; 0x01
                        break;
   13dd2:	c8 50       	subi	r28, 0x08	; 8
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   13dd4:	d1 40       	sbci	r29, 0x01	; 1
                        break;
   13dd6:	02 c0       	rjmp	.+4      	; 0x13ddc <Read_Config+0x6a0>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   13dd8:	6c 93       	st	X, r22
   13dda:	51 cd       	rjmp	.-1374   	; 0x1387e <Read_Config+0x142>
   13ddc:	61 83       	std	Z+1, r22	; 0x01
   13dde:	4f cd       	rjmp	.-1378   	; 0x1387e <Read_Config+0x142>
   13de0:	c4 01       	movw	r24, r8
   13de2:	0e 94 27 32 	call	0x644e	; 0x644e <stralloc>
   13de6:	c8 5f       	subi	r28, 0xF8	; 248
   13de8:	de 4f       	sbci	r29, 0xFE	; 254
   13dea:	e8 81       	ld	r30, Y
   13dec:	f9 81       	ldd	r31, Y+1	; 0x01
                        break;
   13dee:	c8 50       	subi	r28, 0x08	; 8
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13df0:	d1 40       	sbci	r29, 0x01	; 1
   13df2:	93 83       	std	Z+3, r25	; 0x03
   13df4:	82 83       	std	Z+2, r24	; 0x02
   13df6:	43 cd       	rjmp	.-1402   	; 0x1387e <Read_Config+0x142>
   13df8:	ed b7       	in	r30, 0x3d	; 61
   13dfa:	fe b7       	in	r31, 0x3e	; 62
   13dfc:	57 82       	std	Z+7, r5	; 0x07
   13dfe:	46 82       	std	Z+6, r4	; 0x06
   13e00:	b5 82       	std	Z+5, r11	; 0x05
   13e02:	a4 82       	std	Z+4, r10	; 0x04
   13e04:	c9 5e       	subi	r28, 0xE9	; 233
   13e06:	de 4f       	sbci	r29, 0xFE	; 254
   13e08:	28 81       	ld	r18, Y
   13e0a:	39 81       	ldd	r19, Y+1	; 0x01
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   13e0c:	4a 81       	ldd	r20, Y+2	; 0x02
   13e0e:	c7 51       	subi	r28, 0x17	; 23
   13e10:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
   13e12:	6e c0       	rjmp	.+220    	; 0x13ef0 <Read_Config+0x7b4>
   13e14:	07 31       	cpi	r16, 0x17	; 23
   13e16:	11 05       	cpc	r17, r1
   13e18:	59 f4       	brne	.+22     	; 0x13e30 <Read_Config+0x6f4>
   13e1a:	96 2f       	mov	r25, r22
   13e1c:	87 2f       	mov	r24, r23
   13e1e:	c8 5f       	subi	r28, 0xF8	; 248
   13e20:	de 4f       	sbci	r29, 0xFE	; 254
   13e22:	e8 81       	ld	r30, Y
   13e24:	f9 81       	ldd	r31, Y+1	; 0x01
   13e26:	c8 50       	subi	r28, 0x08	; 8
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13e28:	d1 40       	sbci	r29, 0x01	; 1
   13e2a:	94 83       	std	Z+4, r25	; 0x04
   13e2c:	85 83       	std	Z+5, r24	; 0x05
   13e2e:	27 cd       	rjmp	.-1458   	; 0x1387e <Read_Config+0x142>
   13e30:	ed b7       	in	r30, 0x3d	; 61
   13e32:	fe b7       	in	r31, 0x3e	; 62
   13e34:	57 82       	std	Z+7, r5	; 0x07
   13e36:	46 82       	std	Z+6, r4	; 0x06
   13e38:	b5 82       	std	Z+5, r11	; 0x05
   13e3a:	a4 82       	std	Z+4, r10	; 0x04
   13e3c:	cc 5e       	subi	r28, 0xEC	; 236
   13e3e:	de 4f       	sbci	r29, 0xFE	; 254
   13e40:	28 81       	ld	r18, Y
   13e42:	39 81       	ldd	r19, Y+1	; 0x01
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   13e44:	4a 81       	ldd	r20, Y+2	; 0x02
   13e46:	c4 51       	subi	r28, 0x14	; 20
   13e48:	d1 40       	sbci	r29, 0x01	; 1
   13e4a:	52 c0       	rjmp	.+164    	; 0x13ef0 <Read_Config+0x7b4>
   13e4c:	0d 30       	cpi	r16, 0x0D	; 13
   13e4e:	11 05       	cpc	r17, r1
   13e50:	59 f1       	breq	.+86     	; 0x13ea8 <Read_Config+0x76c>
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13e52:	64 f4       	brge	.+24     	; 0x13e6c <Read_Config+0x730>
   13e54:	08 30       	cpi	r16, 0x08	; 8
   13e56:	11 05       	cpc	r17, r1
   13e58:	81 f5       	brne	.+96     	; 0x13eba <Read_Config+0x77e>
   13e5a:	96 2f       	mov	r25, r22
   13e5c:	87 2f       	mov	r24, r23
   13e5e:	c8 5f       	subi	r28, 0xF8	; 248
   13e60:	de 4f       	sbci	r29, 0xFE	; 254
   13e62:	e8 81       	ld	r30, Y
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   13e64:	f9 81       	ldd	r31, Y+1	; 0x01
   13e66:	c8 50       	subi	r28, 0x08	; 8
   13e68:	d1 40       	sbci	r29, 0x01	; 1
   13e6a:	0f c0       	rjmp	.+30     	; 0x13e8a <Read_Config+0x74e>
   13e6c:	06 31       	cpi	r16, 0x16	; 22
   13e6e:	11 05       	cpc	r17, r1
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13e70:	91 f0       	breq	.+36     	; 0x13e96 <Read_Config+0x75a>
   13e72:	02 32       	cpi	r16, 0x22	; 34
   13e74:	11 05       	cpc	r17, r1
   13e76:	09 f5       	brne	.+66     	; 0x13eba <Read_Config+0x77e>
   13e78:	96 2f       	mov	r25, r22
   13e7a:	87 2f       	mov	r24, r23
   13e7c:	c8 5f       	subi	r28, 0xF8	; 248
   13e7e:	de 4f       	sbci	r29, 0xFE	; 254
   13e80:	e8 81       	ld	r30, Y

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13e82:	f9 81       	ldd	r31, Y+1	; 0x01
   13e84:	c8 50       	subi	r28, 0x08	; 8
                        break;
   13e86:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13e88:	03 c0       	rjmp	.+6      	; 0x13e90 <Read_Config+0x754>
   13e8a:	96 83       	std	Z+6, r25	; 0x06
                        break;
   13e8c:	87 83       	std	Z+7, r24	; 0x07
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   13e8e:	f7 cc       	rjmp	.-1554   	; 0x1387e <Read_Config+0x142>
   13e90:	90 87       	std	Z+8, r25	; 0x08
   13e92:	81 87       	std	Z+9, r24	; 0x09
   13e94:	f4 cc       	rjmp	.-1560   	; 0x1387e <Read_Config+0x142>
   13e96:	c8 5f       	subi	r28, 0xF8	; 248
   13e98:	de 4f       	sbci	r29, 0xFE	; 254
   13e9a:	e8 81       	ld	r30, Y
   13e9c:	f9 81       	ldd	r31, Y+1	; 0x01
                        break;
   13e9e:	c8 50       	subi	r28, 0x08	; 8
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   13ea0:	d1 40       	sbci	r29, 0x01	; 1
   13ea2:	62 87       	std	Z+10, r22	; 0x0a
   13ea4:	73 87       	std	Z+11, r23	; 0x0b
   13ea6:	eb cc       	rjmp	.-1578   	; 0x1387e <Read_Config+0x142>
   13ea8:	c8 5f       	subi	r28, 0xF8	; 248
   13eaa:	de 4f       	sbci	r29, 0xFE	; 254
   13eac:	e8 81       	ld	r30, Y
   13eae:	f9 81       	ldd	r31, Y+1	; 0x01
                        break;
   13eb0:	c8 50       	subi	r28, 0x08	; 8
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13eb2:	d1 40       	sbci	r29, 0x01	; 1
   13eb4:	64 87       	std	Z+12, r22	; 0x0c
   13eb6:	75 87       	std	Z+13, r23	; 0x0d
   13eb8:	e2 cc       	rjmp	.-1596   	; 0x1387e <Read_Config+0x142>
   13eba:	ed b7       	in	r30, 0x3d	; 61
   13ebc:	fe b7       	in	r31, 0x3e	; 62
   13ebe:	57 82       	std	Z+7, r5	; 0x07
   13ec0:	46 82       	std	Z+6, r4	; 0x06
   13ec2:	b5 82       	std	Z+5, r11	; 0x05
   13ec4:	a4 82       	std	Z+4, r10	; 0x04
   13ec6:	cf 5e       	subi	r28, 0xEF	; 239
   13ec8:	de 4f       	sbci	r29, 0xFE	; 254
   13eca:	28 81       	ld	r18, Y
   13ecc:	39 81       	ldd	r19, Y+1	; 0x01
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13ece:	4a 81       	ldd	r20, Y+2	; 0x02
   13ed0:	c1 51       	subi	r28, 0x11	; 17
   13ed2:	d1 40       	sbci	r29, 0x01	; 1
   13ed4:	0d c0       	rjmp	.+26     	; 0x13ef0 <Read_Config+0x7b4>
   13ed6:	ed b7       	in	r30, 0x3d	; 61
   13ed8:	fe b7       	in	r31, 0x3e	; 62
   13eda:	57 82       	std	Z+7, r5	; 0x07
   13edc:	46 82       	std	Z+6, r4	; 0x06
   13ede:	b5 82       	std	Z+5, r11	; 0x05
   13ee0:	a4 82       	std	Z+4, r10	; 0x04
   13ee2:	c2 5f       	subi	r28, 0xF2	; 242
   13ee4:	de 4f       	sbci	r29, 0xFE	; 254
   13ee6:	28 81       	ld	r18, Y
   13ee8:	39 81       	ldd	r19, Y+1	; 0x01
   13eea:	4a 81       	ldd	r20, Y+2	; 0x02
   13eec:	ce 50       	subi	r28, 0x0E	; 14
   13eee:	d1 40       	sbci	r29, 0x01	; 1
   13ef0:	21 83       	std	Z+1, r18	; 0x01
                ++errors;
   13ef2:	32 83       	std	Z+2, r19	; 0x02
   13ef4:	43 83       	std	Z+3, r20	; 0x03
   13ef6:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
                break;

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   13efa:	ff ef       	ldi	r31, 0xFF	; 255
   13efc:	ef 1a       	sub	r14, r31
   13efe:	ff 0a       	sbc	r15, r31
    {
        printf("Missing END statement at line:%d\n", lines);
   13f00:	be cc       	rjmp	.-1668   	; 0x1387e <Read_Config+0x142>
   13f02:	21 14       	cp	r2, r1
   13f04:	31 04       	cpc	r3, r1
   13f06:	79 f0       	breq	.+30     	; 0x13f26 <Read_Config+0x7ea>
   13f08:	ed b7       	in	r30, 0x3d	; 61
   13f0a:	fe b7       	in	r31, 0x3e	; 62
   13f0c:	55 82       	std	Z+5, r5	; 0x05
   13f0e:	44 82       	std	Z+4, r4	; 0x04
   13f10:	81 e1       	ldi	r24, 0x11	; 17
   13f12:	9a e1       	ldi	r25, 0x1A	; 26
   13f14:	a0 e0       	ldi	r26, 0x00	; 0
   13f16:	81 83       	std	Z+1, r24	; 0x01
        ++errors;
   13f18:	92 83       	std	Z+2, r25	; 0x02
   13f1a:	a3 83       	std	Z+3, r26	; 0x03
   13f1c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    }
    printf("Read_Config: read(%d) lines\n", lines);
   13f20:	ff ef       	ldi	r31, 0xFF	; 255
   13f22:	ef 1a       	sub	r14, r31
   13f24:	ff 0a       	sbc	r15, r31
   13f26:	ed b7       	in	r30, 0x3d	; 61
   13f28:	fe b7       	in	r31, 0x3e	; 62
   13f2a:	55 82       	std	Z+5, r5	; 0x05
   13f2c:	44 82       	std	Z+4, r4	; 0x04
   13f2e:	84 ef       	ldi	r24, 0xF4	; 244
   13f30:	99 e1       	ldi	r25, 0x19	; 25
   13f32:	a0 e0       	ldi	r26, 0x00	; 0
   13f34:	81 83       	std	Z+1, r24	; 0x01
    if(errors)
   13f36:	92 83       	std	Z+2, r25	; 0x02
   13f38:	a3 83       	std	Z+3, r26	; 0x03
   13f3a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   13f3e:	e1 14       	cp	r14, r1
   13f40:	f1 04       	cpc	r15, r1
   13f42:	61 f0       	breq	.+24     	; 0x13f5c <Read_Config+0x820>
   13f44:	ed b7       	in	r30, 0x3d	; 61
   13f46:	fe b7       	in	r31, 0x3e	; 62
   13f48:	f5 82       	std	Z+5, r15	; 0x05
   13f4a:	e4 82       	std	Z+4, r14	; 0x04
   13f4c:	8d ec       	ldi	r24, 0xCD	; 205
   13f4e:	99 e1       	ldi	r25, 0x19	; 25
   13f50:	a0 e0       	ldi	r26, 0x00	; 0

    if(fclose(cfg) == EOF)
   13f52:	81 83       	std	Z+1, r24	; 0x01
   13f54:	92 83       	std	Z+2, r25	; 0x02
   13f56:	a3 83       	std	Z+3, r26	; 0x03
   13f58:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   13f5c:	c4 5f       	subi	r28, 0xF4	; 244
   13f5e:	de 4f       	sbci	r29, 0xFE	; 254
   13f60:	88 81       	ld	r24, Y
   13f62:	99 81       	ldd	r25, Y+1	; 0x01
   13f64:	cc 50       	subi	r28, 0x0C	; 12
    {
        perror("Read_Config - close error");
   13f66:	d1 40       	sbci	r29, 0x01	; 1
   13f68:	0e 94 69 7d 	call	0xfad2	; 0xfad2 <fclose>
   13f6c:	01 96       	adiw	r24, 0x01	; 1
        ++errors;
   13f6e:	39 f4       	brne	.+14     	; 0x13f7e <Read_Config+0x842>
   13f70:	8c e5       	ldi	r24, 0x5C	; 92
   13f72:	9e e0       	ldi	r25, 0x0E	; 14
    }

// Post process device values
    Post_Config();
   13f74:	0e 94 f0 78 	call	0xf1e0	; 0xf1e0 <perror>

    return(errors);
   13f78:	2f ef       	ldi	r18, 0xFF	; 255
}
   13f7a:	e2 1a       	sub	r14, r18
   13f7c:	f2 0a       	sbc	r15, r18
   13f7e:	48 db       	rcall	.-2416   	; 0x13610 <Post_Config>
   13f80:	c7 01       	movw	r24, r14
   13f82:	c1 5e       	subi	r28, 0xE1	; 225
   13f84:	de 4f       	sbci	r29, 0xFE	; 254
   13f86:	e2 e1       	ldi	r30, 0x12	; 18
   13f88:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

00013f8c <format_drives>:

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   13f8c:	2f 92       	push	r2
   13f8e:	3f 92       	push	r3
   13f90:	4f 92       	push	r4
   13f92:	5f 92       	push	r5
   13f94:	6f 92       	push	r6
   13f96:	7f 92       	push	r7
   13f98:	8f 92       	push	r8
   13f9a:	af 92       	push	r10
   13f9c:	bf 92       	push	r11
   13f9e:	cf 92       	push	r12
   13fa0:	df 92       	push	r13
   13fa2:	ef 92       	push	r14
   13fa4:	ff 92       	push	r15
   13fa6:	0f 93       	push	r16
   13fa8:	1f 93       	push	r17
   13faa:	cf 93       	push	r28
   13fac:	df 93       	push	r29
   13fae:	cd b7       	in	r28, 0x3d	; 61
   13fb0:	de b7       	in	r29, 0x3e	; 62
   13fb2:	ce 56       	subi	r28, 0x6E	; 110
   13fb4:	d1 09       	sbc	r29, r1
   13fb6:	0f b6       	in	r0, 0x3f	; 63
   13fb8:	f8 94       	cli
   13fba:	de bf       	out	0x3e, r29	; 62
   13fbc:	0f be       	out	0x3f, r0	; 63
   13fbe:	cd bf       	out	0x3d, r28	; 61
   13fc0:	87 ee       	ldi	r24, 0xE7	; 231
   13fc2:	c8 2e       	mov	r12, r24
   13fc4:	8e e1       	ldi	r24, 0x1E	; 30
   13fc6:	d8 2e       	mov	r13, r24
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
    int amigo = 0;
   13fc8:	a0 96       	adiw	r28, 0x20	; 32
   13fca:	1f ae       	std	Y+63, r1	; 0x3f
   13fcc:	1e ae       	std	Y+62, r1	; 0x3e
   13fce:	a0 97       	sbiw	r28, 0x20	; 32
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
   13fd0:	6e 96       	adiw	r28, 0x1e	; 30
   13fd2:	1f ae       	std	Y+63, r1	; 0x3f
   13fd4:	1e ae       	std	Y+62, r1	; 0x3e
   13fd6:	6e 97       	sbiw	r28, 0x1e	; 30
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
   13fd8:	6c 96       	adiw	r28, 0x1c	; 28
   13fda:	1f ae       	std	Y+63, r1	; 0x3f
   13fdc:	1e ae       	std	Y+62, r1	; 0x3e
   13fde:	6c 97       	sbiw	r28, 0x1c	; 28
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13fe0:	81 e8       	ldi	r24, 0x81	; 129
   13fe2:	96 e1       	ldi	r25, 0x16	; 22
   13fe4:	9c 01       	movw	r18, r24
   13fe6:	40 e0       	ldi	r20, 0x00	; 0
   13fe8:	a3 96       	adiw	r28, 0x23	; 35
   13fea:	2d af       	std	Y+61, r18	; 0x3d
   13fec:	3e af       	std	Y+62, r19	; 0x3e
   13fee:	4f af       	std	Y+63, r20	; 0x3f
   13ff0:	a3 97       	sbiw	r28, 0x23	; 35
                sprintf(label,"AMIGO%d", amigo);
   13ff2:	89 e7       	ldi	r24, 0x79	; 121
   13ff4:	96 e1       	ldi	r25, 0x16	; 22
   13ff6:	9c 01       	movw	r18, r24
   13ff8:	40 e0       	ldi	r20, 0x00	; 0
   13ffa:	a6 96       	adiw	r28, 0x26	; 38
   13ffc:	2d af       	std	Y+61, r18	; 0x3d
   13ffe:	3e af       	std	Y+62, r19	; 0x3e
   14000:	4f af       	std	Y+63, r20	; 0x3f
   14002:	a6 97       	sbiw	r28, 0x26	; 38
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   14004:	8b e9       	ldi	r24, 0x9B	; 155
   14006:	96 e1       	ldi	r25, 0x16	; 22
   14008:	9c 01       	movw	r18, r24
   1400a:	40 e0       	ldi	r20, 0x00	; 0
   1400c:	a9 96       	adiw	r28, 0x29	; 41
   1400e:	2d af       	std	Y+61, r18	; 0x3d
   14010:	3e af       	std	Y+62, r19	; 0x3e
   14012:	4f af       	std	Y+63, r20	; 0x3f
   14014:	a9 97       	sbiw	r28, 0x29	; 41
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   14016:	85 ec       	ldi	r24, 0xC5	; 197
   14018:	96 e1       	ldi	r25, 0x16	; 22
   1401a:	9c 01       	movw	r18, r24
   1401c:	40 e0       	ldi	r20, 0x00	; 0
   1401e:	ac 96       	adiw	r28, 0x2c	; 44
   14020:	2d af       	std	Y+61, r18	; 0x3d
   14022:	3e af       	std	Y+62, r19	; 0x3e
   14024:	4f af       	std	Y+63, r20	; 0x3f
   14026:	ac 97       	sbiw	r28, 0x2c	; 44
                sprintf(label,"SS80-%d", ss80);
   14028:	8d eb       	ldi	r24, 0xBD	; 189
   1402a:	96 e1       	ldi	r25, 0x16	; 22
   1402c:	9c 01       	movw	r18, r24
   1402e:	40 e0       	ldi	r20, 0x00	; 0
   14030:	af 96       	adiw	r28, 0x2f	; 47
   14032:	2d af       	std	Y+61, r18	; 0x3d
   14034:	3e af       	std	Y+62, r19	; 0x3e
   14036:	4f af       	std	Y+63, r20	; 0x3f
   14038:	af 97       	sbiw	r28, 0x2f	; 47

            if(stat(SS80p->HEADER.NAME, &st) == -1)
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   1403a:	8f ed       	ldi	r24, 0xDF	; 223
   1403c:	96 e1       	ldi	r25, 0x16	; 22
   1403e:	3c 01       	movw	r6, r24
   14040:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   14042:	f6 01       	movw	r30, r12
   14044:	80 81       	ld	r24, Z
   14046:	88 23       	and	r24, r24
   14048:	09 f4       	brne	.+2      	; 0x1404c <format_drives+0xc0>
   1404a:	ef c0       	rjmp	.+478    	; 0x1422a <format_drives+0x29e>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   1404c:	83 30       	cpi	r24, 0x03	; 3
   1404e:	09 f0       	breq	.+2      	; 0x14052 <format_drives+0xc6>
   14050:	70 c0       	rjmp	.+224    	; 0x14132 <format_drives+0x1a6>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   14052:	a7 a0       	ldd	r10, Z+39	; 0x27
   14054:	b0 a4       	ldd	r11, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1)
   14056:	be 01       	movw	r22, r28
   14058:	66 5f       	subi	r22, 0xF6	; 246
   1405a:	7f 4f       	sbci	r23, 0xFF	; 255
   1405c:	f5 01       	movw	r30, r10
   1405e:	82 81       	ldd	r24, Z+2	; 0x02
   14060:	93 81       	ldd	r25, Z+3	; 0x03
   14062:	0e 94 c4 79 	call	0xf388	; 0xf388 <stat>
   14066:	01 96       	adiw	r24, 0x01	; 1
   14068:	09 f0       	breq	.+2      	; 0x1406c <format_drives+0xe0>
   1406a:	63 c0       	rjmp	.+198    	; 0x14132 <format_drives+0x1a6>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   1406c:	f5 01       	movw	r30, r10
   1406e:	80 89       	ldd	r24, Z+16	; 0x10
   14070:	91 89       	ldd	r25, Z+17	; 0x11
   14072:	81 15       	cp	r24, r1
   14074:	91 40       	sbci	r25, 0x01	; 1
   14076:	31 f0       	breq	.+12     	; 0x14084 <format_drives+0xf8>
                {
                    printf("Can not use non 256 byte sectors\n");
   14078:	ed b7       	in	r30, 0x3d	; 61
   1407a:	fe b7       	in	r31, 0x3e	; 62
   1407c:	61 82       	std	Z+1, r6	; 0x01
   1407e:	72 82       	std	Z+2, r7	; 0x02
   14080:	83 82       	std	Z+3, r8	; 0x03
   14082:	79 c0       	rjmp	.+242    	; 0x14176 <format_drives+0x1ea>
                    continue;
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   14084:	f6 01       	movw	r30, r12
   14086:	23 80       	ldd	r2, Z+3	; 0x03
   14088:	34 80       	ldd	r3, Z+4	; 0x04
   1408a:	45 80       	ldd	r4, Z+5	; 0x05
   1408c:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   1408e:	ed b7       	in	r30, 0x3d	; 61
   14090:	fe b7       	in	r31, 0x3e	; 62
   14092:	26 82       	std	Z+6, r2	; 0x06
   14094:	37 82       	std	Z+7, r3	; 0x07
   14096:	40 86       	std	Z+8, r4	; 0x08
   14098:	51 86       	std	Z+9, r5	; 0x09
   1409a:	f5 01       	movw	r30, r10
   1409c:	82 81       	ldd	r24, Z+2	; 0x02
   1409e:	93 81       	ldd	r25, Z+3	; 0x03
   140a0:	ed b7       	in	r30, 0x3d	; 61
   140a2:	fe b7       	in	r31, 0x3e	; 62
   140a4:	95 83       	std	Z+5, r25	; 0x05
   140a6:	84 83       	std	Z+4, r24	; 0x04
   140a8:	ac 96       	adiw	r28, 0x2c	; 44
   140aa:	2d ad       	ldd	r18, Y+61	; 0x3d
   140ac:	3e ad       	ldd	r19, Y+62	; 0x3e
   140ae:	4f ad       	ldd	r20, Y+63	; 0x3f
   140b0:	ac 97       	sbiw	r28, 0x2c	; 44
   140b2:	21 83       	std	Z+1, r18	; 0x01
   140b4:	32 83       	std	Z+2, r19	; 0x02
   140b6:	43 83       	std	Z+3, r20	; 0x03
   140b8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
                sprintf(label,"SS80-%d", ss80);
   140bc:	6e 96       	adiw	r28, 0x1e	; 30
   140be:	2e ad       	ldd	r18, Y+62	; 0x3e
   140c0:	3f ad       	ldd	r19, Y+63	; 0x3f
   140c2:	6e 97       	sbiw	r28, 0x1e	; 30
   140c4:	ed b7       	in	r30, 0x3d	; 61
   140c6:	fe b7       	in	r31, 0x3e	; 62
   140c8:	37 83       	std	Z+7, r19	; 0x07
   140ca:	26 83       	std	Z+6, r18	; 0x06
   140cc:	af 96       	adiw	r28, 0x2f	; 47
   140ce:	8d ad       	ldd	r24, Y+61	; 0x3d
   140d0:	9e ad       	ldd	r25, Y+62	; 0x3e
   140d2:	af ad       	ldd	r26, Y+63	; 0x3f
   140d4:	af 97       	sbiw	r28, 0x2f	; 47
   140d6:	83 83       	std	Z+3, r24	; 0x03
   140d8:	94 83       	std	Z+4, r25	; 0x04
   140da:	a5 83       	std	Z+5, r26	; 0x05
   140dc:	2a e3       	ldi	r18, 0x3A	; 58
   140de:	30 e0       	ldi	r19, 0x00	; 0
   140e0:	2c 0f       	add	r18, r28
   140e2:	3d 1f       	adc	r19, r29
   140e4:	32 83       	std	Z+2, r19	; 0x02
   140e6:	21 83       	std	Z+1, r18	; 0x01
   140e8:	0e 94 67 46 	call	0x8cce	; 0x8cce <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   140ec:	f5 01       	movw	r30, r10
   140ee:	a2 80       	ldd	r10, Z+2	; 0x02
   140f0:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   140f2:	c2 01       	movw	r24, r4
   140f4:	b1 01       	movw	r22, r2
   140f6:	41 d1       	rcall	.+642    	; 0x1437a <lif_dir_count>
   140f8:	9b 01       	movw	r18, r22
   140fa:	ac 01       	movw	r20, r24
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   140fc:	82 01       	movw	r16, r4
   140fe:	71 01       	movw	r14, r2
   14100:	be 01       	movw	r22, r28
   14102:	66 5c       	subi	r22, 0xC6	; 198
   14104:	7f 4f       	sbci	r23, 0xFF	; 255
   14106:	c5 01       	movw	r24, r10
   14108:	0e 94 03 dc 	call	0x1b806	; 0x1b806 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif
                ++count;
   1410c:	6c 96       	adiw	r28, 0x1c	; 28
   1410e:	2e ad       	ldd	r18, Y+62	; 0x3e
   14110:	3f ad       	ldd	r19, Y+63	; 0x3f
   14112:	6c 97       	sbiw	r28, 0x1c	; 28
   14114:	2f 5f       	subi	r18, 0xFF	; 255
   14116:	3f 4f       	sbci	r19, 0xFF	; 255
   14118:	6c 96       	adiw	r28, 0x1c	; 28
   1411a:	3f af       	std	Y+63, r19	; 0x3f
   1411c:	2e af       	std	Y+62, r18	; 0x3e
   1411e:	6c 97       	sbiw	r28, 0x1c	; 28
                ++ss80;
   14120:	6e 96       	adiw	r28, 0x1e	; 30
   14122:	8e ad       	ldd	r24, Y+62	; 0x3e
   14124:	9f ad       	ldd	r25, Y+63	; 0x3f
   14126:	6e 97       	sbiw	r28, 0x1e	; 30
   14128:	01 96       	adiw	r24, 0x01	; 1
   1412a:	6e 96       	adiw	r28, 0x1e	; 30
   1412c:	9f af       	std	Y+63, r25	; 0x3f
   1412e:	8e af       	std	Y+62, r24	; 0x3e
   14130:	6e 97       	sbiw	r28, 0x1e	; 30

            }
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   14132:	f6 01       	movw	r30, r12
   14134:	80 81       	ld	r24, Z
   14136:	81 30       	cpi	r24, 0x01	; 1
   14138:	09 f0       	breq	.+2      	; 0x1413c <format_drives+0x1b0>
   1413a:	77 c0       	rjmp	.+238    	; 0x1422a <format_drives+0x29e>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   1413c:	a7 a0       	ldd	r10, Z+39	; 0x27
   1413e:	b0 a4       	ldd	r11, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
   14140:	be 01       	movw	r22, r28
   14142:	66 5f       	subi	r22, 0xF6	; 246
   14144:	7f 4f       	sbci	r23, 0xFF	; 255
   14146:	f5 01       	movw	r30, r10
   14148:	82 81       	ldd	r24, Z+2	; 0x02
   1414a:	93 81       	ldd	r25, Z+3	; 0x03
   1414c:	0e 94 c4 79 	call	0xf388	; 0xf388 <stat>
   14150:	01 96       	adiw	r24, 0x01	; 1
   14152:	09 f0       	breq	.+2      	; 0x14156 <format_drives+0x1ca>
   14154:	6a c0       	rjmp	.+212    	; 0x1422a <format_drives+0x29e>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   14156:	f5 01       	movw	r30, r10
   14158:	86 81       	ldd	r24, Z+6	; 0x06
   1415a:	97 81       	ldd	r25, Z+7	; 0x07
   1415c:	81 15       	cp	r24, r1
   1415e:	91 40       	sbci	r25, 0x01	; 1
   14160:	69 f0       	breq	.+26     	; 0x1417c <format_drives+0x1f0>
                {
                    printf("Can not use non 256 byte sectors\n");
   14162:	a9 96       	adiw	r28, 0x29	; 41
   14164:	2d ad       	ldd	r18, Y+61	; 0x3d
   14166:	3e ad       	ldd	r19, Y+62	; 0x3e
   14168:	4f ad       	ldd	r20, Y+63	; 0x3f
   1416a:	a9 97       	sbiw	r28, 0x29	; 41
   1416c:	ed b7       	in	r30, 0x3d	; 61
   1416e:	fe b7       	in	r31, 0x3e	; 62
   14170:	21 83       	std	Z+1, r18	; 0x01
   14172:	32 83       	std	Z+2, r19	; 0x02
   14174:	43 83       	std	Z+3, r20	; 0x03
   14176:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
                    continue;
   1417a:	57 c0       	rjmp	.+174    	; 0x1422a <format_drives+0x29e>
                }
                sectors = Devices[i].BLOCKS;
   1417c:	f6 01       	movw	r30, r12
   1417e:	23 80       	ldd	r2, Z+3	; 0x03
   14180:	34 80       	ldd	r3, Z+4	; 0x04
   14182:	45 80       	ldd	r4, Z+5	; 0x05
   14184:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   14186:	ed b7       	in	r30, 0x3d	; 61
   14188:	fe b7       	in	r31, 0x3e	; 62
   1418a:	26 82       	std	Z+6, r2	; 0x06
   1418c:	37 82       	std	Z+7, r3	; 0x07
   1418e:	40 86       	std	Z+8, r4	; 0x08
   14190:	51 86       	std	Z+9, r5	; 0x09
   14192:	f5 01       	movw	r30, r10
   14194:	82 81       	ldd	r24, Z+2	; 0x02
   14196:	93 81       	ldd	r25, Z+3	; 0x03
   14198:	ed b7       	in	r30, 0x3d	; 61
   1419a:	fe b7       	in	r31, 0x3e	; 62
   1419c:	95 83       	std	Z+5, r25	; 0x05
   1419e:	84 83       	std	Z+4, r24	; 0x04
   141a0:	a3 96       	adiw	r28, 0x23	; 35
   141a2:	2d ad       	ldd	r18, Y+61	; 0x3d
   141a4:	3e ad       	ldd	r19, Y+62	; 0x3e
   141a6:	4f ad       	ldd	r20, Y+63	; 0x3f
   141a8:	a3 97       	sbiw	r28, 0x23	; 35
   141aa:	21 83       	std	Z+1, r18	; 0x01
   141ac:	32 83       	std	Z+2, r19	; 0x02
   141ae:	43 83       	std	Z+3, r20	; 0x03
   141b0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
                sprintf(label,"AMIGO%d", amigo);
   141b4:	a0 96       	adiw	r28, 0x20	; 32
   141b6:	2e ad       	ldd	r18, Y+62	; 0x3e
   141b8:	3f ad       	ldd	r19, Y+63	; 0x3f
   141ba:	a0 97       	sbiw	r28, 0x20	; 32
   141bc:	ed b7       	in	r30, 0x3d	; 61
   141be:	fe b7       	in	r31, 0x3e	; 62
   141c0:	37 83       	std	Z+7, r19	; 0x07
   141c2:	26 83       	std	Z+6, r18	; 0x06
   141c4:	a6 96       	adiw	r28, 0x26	; 38
   141c6:	8d ad       	ldd	r24, Y+61	; 0x3d
   141c8:	9e ad       	ldd	r25, Y+62	; 0x3e
   141ca:	af ad       	ldd	r26, Y+63	; 0x3f
   141cc:	a6 97       	sbiw	r28, 0x26	; 38
   141ce:	83 83       	std	Z+3, r24	; 0x03
   141d0:	94 83       	std	Z+4, r25	; 0x04
   141d2:	a5 83       	std	Z+5, r26	; 0x05
   141d4:	2a e3       	ldi	r18, 0x3A	; 58
   141d6:	30 e0       	ldi	r19, 0x00	; 0
   141d8:	2c 0f       	add	r18, r28
   141da:	3d 1f       	adc	r19, r29
   141dc:	32 83       	std	Z+2, r19	; 0x02
   141de:	21 83       	std	Z+1, r18	; 0x01
   141e0:	0e 94 67 46 	call	0x8cce	; 0x8cce <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   141e4:	f5 01       	movw	r30, r10
   141e6:	a2 80       	ldd	r10, Z+2	; 0x02
   141e8:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   141ea:	c2 01       	movw	r24, r4
   141ec:	b1 01       	movw	r22, r2
   141ee:	c5 d0       	rcall	.+394    	; 0x1437a <lif_dir_count>
   141f0:	9b 01       	movw	r18, r22
   141f2:	ac 01       	movw	r20, r24
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   141f4:	82 01       	movw	r16, r4
   141f6:	71 01       	movw	r14, r2
   141f8:	be 01       	movw	r22, r28
   141fa:	66 5c       	subi	r22, 0xC6	; 198
   141fc:	7f 4f       	sbci	r23, 0xFF	; 255
   141fe:	c5 01       	movw	r24, r10
   14200:	0e 94 03 dc 	call	0x1b806	; 0x1b806 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
                ++count;
   14204:	6c 96       	adiw	r28, 0x1c	; 28
   14206:	2e ad       	ldd	r18, Y+62	; 0x3e
   14208:	3f ad       	ldd	r19, Y+63	; 0x3f
   1420a:	6c 97       	sbiw	r28, 0x1c	; 28
   1420c:	2f 5f       	subi	r18, 0xFF	; 255
   1420e:	3f 4f       	sbci	r19, 0xFF	; 255
   14210:	6c 96       	adiw	r28, 0x1c	; 28
   14212:	3f af       	std	Y+63, r19	; 0x3f
   14214:	2e af       	std	Y+62, r18	; 0x3e
   14216:	6c 97       	sbiw	r28, 0x1c	; 28
                ++amigo;
   14218:	a0 96       	adiw	r28, 0x20	; 32
   1421a:	8e ad       	ldd	r24, Y+62	; 0x3e
   1421c:	9f ad       	ldd	r25, Y+63	; 0x3f
   1421e:	a0 97       	sbiw	r28, 0x20	; 32
   14220:	01 96       	adiw	r24, 0x01	; 1
   14222:	a0 96       	adiw	r28, 0x20	; 32
   14224:	9f af       	std	Y+63, r25	; 0x3f
   14226:	8e af       	std	Y+62, r24	; 0x3e
   14228:	a0 97       	sbiw	r28, 0x20	; 32
   1422a:	9b e2       	ldi	r25, 0x2B	; 43
   1422c:	c9 0e       	add	r12, r25
   1422e:	d1 1c       	adc	r13, r1
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   14230:	ab ee       	ldi	r26, 0xEB	; 235
   14232:	ca 16       	cp	r12, r26
   14234:	a0 e2       	ldi	r26, 0x20	; 32
   14236:	da 06       	cpc	r13, r26
   14238:	09 f0       	breq	.+2      	; 0x1423c <format_drives+0x2b0>
   1423a:	03 cf       	rjmp	.-506    	; 0x14042 <format_drives+0xb6>
                ++amigo;
            }
        }
#endif                                    // #ifdef AMIGO
    }
    if(count)
   1423c:	6c 96       	adiw	r28, 0x1c	; 28
   1423e:	ee ad       	ldd	r30, Y+62	; 0x3e
   14240:	ff ad       	ldd	r31, Y+63	; 0x3f
   14242:	6c 97       	sbiw	r28, 0x1c	; 28
   14244:	ef 2b       	or	r30, r31
   14246:	11 f0       	breq	.+4      	; 0x1424c <format_drives+0x2c0>
        sep();
   14248:	0e 94 47 32 	call	0x648e	; 0x648e <sep>
}
   1424c:	c2 59       	subi	r28, 0x92	; 146
   1424e:	df 4f       	sbci	r29, 0xFF	; 255
   14250:	0f b6       	in	r0, 0x3f	; 63
   14252:	f8 94       	cli
   14254:	de bf       	out	0x3e, r29	; 62
   14256:	0f be       	out	0x3f, r0	; 63
   14258:	cd bf       	out	0x3d, r28	; 61
   1425a:	df 91       	pop	r29
   1425c:	cf 91       	pop	r28
   1425e:	1f 91       	pop	r17
   14260:	0f 91       	pop	r16
   14262:	ff 90       	pop	r15
   14264:	ef 90       	pop	r14
   14266:	df 90       	pop	r13
   14268:	cf 90       	pop	r12
   1426a:	bf 90       	pop	r11
   1426c:	af 90       	pop	r10
   1426e:	8f 90       	pop	r8
   14270:	7f 90       	pop	r7
   14272:	6f 90       	pop	r6
   14274:	5f 90       	pop	r5
   14276:	4f 90       	pop	r4
   14278:	3f 90       	pop	r3
   1427a:	2f 90       	pop	r2
   1427c:	08 95       	ret

0001427e <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   1427e:	8f e1       	ldi	r24, 0x1F	; 31
   14280:	eb ee       	ldi	r30, 0xEB	; 235
   14282:	f0 e2       	ldi	r31, 0x20	; 32
   14284:	df 01       	movw	r26, r30
   14286:	98 2f       	mov	r25, r24
   14288:	1d 92       	st	X+, r1
   1428a:	9a 95       	dec	r25
   1428c:	e9 f7       	brne	.-6      	; 0x14288 <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   1428e:	9f e3       	ldi	r25, 0x3F	; 63
   14290:	eb e0       	ldi	r30, 0x0B	; 11
   14292:	f1 e2       	ldi	r31, 0x21	; 33
   14294:	df 01       	movw	r26, r30
   14296:	1d 92       	st	X+, r1
   14298:	9a 95       	dec	r25
   1429a:	e9 f7       	brne	.-6      	; 0x14296 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   1429c:	eb e4       	ldi	r30, 0x4B	; 75
   1429e:	f1 e2       	ldi	r31, 0x21	; 33
   142a0:	df 01       	movw	r26, r30
   142a2:	1d 92       	st	X+, r1
   142a4:	8a 95       	dec	r24
   142a6:	e9 f7       	brne	.-6      	; 0x142a2 <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   142a8:	10 92 6b 21 	sts	0x216B, r1	; 0x80216b <hpdir+0x80>
   142ac:	10 92 6c 21 	sts	0x216C, r1	; 0x80216c <hpdir+0x81>
   142b0:	10 92 6d 21 	sts	0x216D, r1	; 0x80216d <hpdir+0x82>
   142b4:	10 92 6e 21 	sts	0x216E, r1	; 0x80216e <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   142b8:	10 92 6f 21 	sts	0x216F, r1	; 0x80216f <hpdir+0x84>
   142bc:	10 92 70 21 	sts	0x2170, r1	; 0x802170 <hpdir+0x85>
   142c0:	10 92 71 21 	sts	0x2171, r1	; 0x802171 <hpdir+0x86>
   142c4:	10 92 72 21 	sts	0x2172, r1	; 0x802172 <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   142c8:	10 92 73 21 	sts	0x2173, r1	; 0x802173 <hpdir+0x88>
   142cc:	10 92 74 21 	sts	0x2174, r1	; 0x802174 <hpdir+0x89>
   142d0:	10 92 75 21 	sts	0x2175, r1	; 0x802175 <hpdir+0x8a>
   142d4:	10 92 76 21 	sts	0x2176, r1	; 0x802176 <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   142d8:	10 92 77 21 	sts	0x2177, r1	; 0x802177 <hpdir+0x8c>
   142dc:	10 92 78 21 	sts	0x2178, r1	; 0x802178 <hpdir+0x8d>
   142e0:	10 92 79 21 	sts	0x2179, r1	; 0x802179 <hpdir+0x8e>
   142e4:	10 92 7a 21 	sts	0x217A, r1	; 0x80217a <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   142e8:	81 e0       	ldi	r24, 0x01	; 1
   142ea:	90 e8       	ldi	r25, 0x80	; 128
   142ec:	a0 e0       	ldi	r26, 0x00	; 0
   142ee:	b0 e0       	ldi	r27, 0x00	; 0
   142f0:	80 93 7b 21 	sts	0x217B, r24	; 0x80217b <hpdir+0x90>
   142f4:	90 93 7c 21 	sts	0x217C, r25	; 0x80217c <hpdir+0x91>
   142f8:	a0 93 7d 21 	sts	0x217D, r26	; 0x80217d <hpdir+0x92>
   142fc:	b0 93 7e 21 	sts	0x217E, r27	; 0x80217e <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   14300:	10 92 7f 21 	sts	0x217F, r1	; 0x80217f <hpdir+0x94>
   14304:	10 92 80 21 	sts	0x2180, r1	; 0x802180 <hpdir+0x95>
   14308:	10 92 81 21 	sts	0x2181, r1	; 0x802181 <hpdir+0x96>
   1430c:	10 92 82 21 	sts	0x2182, r1	; 0x802182 <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   14310:	10 92 83 21 	sts	0x2183, r1	; 0x802183 <hpdir+0x98>
   14314:	10 92 84 21 	sts	0x2184, r1	; 0x802184 <hpdir+0x99>
   14318:	10 92 85 21 	sts	0x2185, r1	; 0x802185 <hpdir+0x9a>
   1431c:	10 92 86 21 	sts	0x2186, r1	; 0x802186 <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   14320:	10 92 87 21 	sts	0x2187, r1	; 0x802187 <hpdir+0x9c>
   14324:	10 92 88 21 	sts	0x2188, r1	; 0x802188 <hpdir+0x9d>
   14328:	10 92 89 21 	sts	0x2189, r1	; 0x802189 <hpdir+0x9e>
   1432c:	10 92 8a 21 	sts	0x218A, r1	; 0x80218a <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   14330:	10 92 8b 21 	sts	0x218B, r1	; 0x80218b <hpdir+0xa0>
   14334:	10 92 8c 21 	sts	0x218C, r1	; 0x80218c <hpdir+0xa1>
   14338:	10 92 8d 21 	sts	0x218D, r1	; 0x80218d <hpdir+0xa2>
   1433c:	10 92 8e 21 	sts	0x218E, r1	; 0x80218e <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   14340:	10 92 8f 21 	sts	0x218F, r1	; 0x80218f <hpdir+0xa4>
   14344:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <hpdir+0xa5>
   14348:	10 92 91 21 	sts	0x2191, r1	; 0x802191 <hpdir+0xa6>
   1434c:	10 92 92 21 	sts	0x2192, r1	; 0x802192 <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   14350:	81 e0       	ldi	r24, 0x01	; 1
   14352:	90 e0       	ldi	r25, 0x00	; 0
   14354:	a0 e0       	ldi	r26, 0x00	; 0
   14356:	b0 e0       	ldi	r27, 0x00	; 0
   14358:	80 93 93 21 	sts	0x2193, r24	; 0x802193 <hpdir+0xa8>
   1435c:	90 93 94 21 	sts	0x2194, r25	; 0x802194 <hpdir+0xa9>
   14360:	a0 93 95 21 	sts	0x2195, r26	; 0x802195 <hpdir+0xaa>
   14364:	b0 93 96 21 	sts	0x2196, r27	; 0x802196 <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   14368:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <hpdir+0xac>
   1436c:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <hpdir+0xad>
   14370:	10 92 99 21 	sts	0x2199, r1	; 0x802199 <hpdir+0xae>
   14374:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <hpdir+0xaf>
   14378:	08 95       	ret

0001437a <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   1437a:	20 e0       	ldi	r18, 0x00	; 0
   1437c:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   1437e:	61 15       	cp	r22, r1
   14380:	71 05       	cpc	r23, r1
   14382:	81 05       	cpc	r24, r1
   14384:	91 05       	cpc	r25, r1
   14386:	39 f0       	breq	.+14     	; 0x14396 <lif_dir_count+0x1c>
    {
        scale++;
   14388:	2f 5f       	subi	r18, 0xFF	; 255
   1438a:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   1438c:	95 95       	asr	r25
   1438e:	87 95       	ror	r24
   14390:	77 95       	ror	r23
   14392:	67 95       	ror	r22
   14394:	f4 cf       	rjmp	.-24     	; 0x1437e <lif_dir_count+0x4>
    }
    scale>>=1;
   14396:	35 95       	asr	r19
   14398:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   1439a:	61 e0       	ldi	r22, 0x01	; 1
   1439c:	70 e0       	ldi	r23, 0x00	; 0
   1439e:	80 e0       	ldi	r24, 0x00	; 0
   143a0:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   143a2:	21 50       	subi	r18, 0x01	; 1
   143a4:	31 09       	sbc	r19, r1
   143a6:	28 f0       	brcs	.+10     	; 0x143b2 <lif_dir_count+0x38>
        num <<=1;
   143a8:	66 0f       	add	r22, r22
   143aa:	77 1f       	adc	r23, r23
   143ac:	88 1f       	adc	r24, r24
   143ae:	99 1f       	adc	r25, r25
   143b0:	f8 cf       	rjmp	.-16     	; 0x143a2 <lif_dir_count+0x28>
    return(num);
}
   143b2:	08 95       	ret

000143b4 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   143b4:	2f 92       	push	r2
   143b6:	3f 92       	push	r3
   143b8:	4f 92       	push	r4
   143ba:	5f 92       	push	r5
   143bc:	6f 92       	push	r6
   143be:	8f 92       	push	r8
   143c0:	9f 92       	push	r9
   143c2:	af 92       	push	r10
   143c4:	bf 92       	push	r11
   143c6:	cf 92       	push	r12
   143c8:	df 92       	push	r13
   143ca:	ef 92       	push	r14
   143cc:	ff 92       	push	r15
   143ce:	0f 93       	push	r16
   143d0:	1f 93       	push	r17
   143d2:	cf 93       	push	r28
   143d4:	df 93       	push	r29
   143d6:	cd b7       	in	r28, 0x3d	; 61
   143d8:	de b7       	in	r29, 0x3e	; 62
   143da:	c9 58       	subi	r28, 0x89	; 137
   143dc:	d1 40       	sbci	r29, 0x01	; 1
   143de:	0f b6       	in	r0, 0x3f	; 63
   143e0:	f8 94       	cli
   143e2:	de bf       	out	0x3e, r29	; 62
   143e4:	0f be       	out	0x3f, r0	; 63
   143e6:	cd bf       	out	0x3d, r28	; 61
   143e8:	6c 01       	movw	r12, r24
   143ea:	c8 57       	subi	r28, 0x78	; 120
   143ec:	de 4f       	sbci	r29, 0xFE	; 254
   143ee:	79 83       	std	Y+1, r23	; 0x01
   143f0:	68 83       	st	Y, r22
   143f2:	c8 58       	subi	r28, 0x88	; 136
   143f4:	d1 40       	sbci	r29, 0x01	; 1
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   143f6:	5a 01       	movw	r10, r20

    cfg = fopen("hpdir.ini","rb");
   143f8:	42 df       	rcall	.-380    	; 0x1427e <hpdir_init>
   143fa:	6d ee       	ldi	r22, 0xED	; 237
   143fc:	78 e0       	ldi	r23, 0x08	; 8
   143fe:	8d e4       	ldi	r24, 0x4D	; 77
   14400:	90 e1       	ldi	r25, 0x10	; 16
   14402:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <fopen>

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   14406:	7c 01       	movw	r14, r24
   14408:	89 2b       	or	r24, r25
        cfg = fopen("/hpdir.ini","rb");
   1440a:	49 f4       	brne	.+18     	; 0x1441e <hpdir_find_drive+0x6a>
   1440c:	6d ee       	ldi	r22, 0xED	; 237
   1440e:	78 e0       	ldi	r23, 0x08	; 8
   14410:	8c e4       	ldi	r24, 0x4C	; 76
   14412:	90 e1       	ldi	r25, 0x10	; 16
   14414:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <fopen>
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   14418:	7c 01       	movw	r14, r24
   1441a:	89 2b       	or	r24, r25
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   1441c:	51 f0       	breq	.+20     	; 0x14432 <hpdir_find_drive+0x7e>
   1441e:	21 2c       	mov	r2, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14420:	31 2c       	mov	r3, r1
   14422:	8e 01       	movw	r16, r28
   14424:	08 5f       	subi	r16, 0xF8	; 248
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   14426:	1e 4f       	sbci	r17, 0xFE	; 254
   14428:	87 e2       	ldi	r24, 0x27	; 39
   1442a:	9d e1       	ldi	r25, 0x1D	; 29
   1442c:	2c 01       	movw	r4, r24
   1442e:	61 2c       	mov	r6, r1
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   14430:	1e c0       	rjmp	.+60     	; 0x1446e <hpdir_find_drive+0xba>
   14432:	ab 28       	or	r10, r11
   14434:	09 f4       	brne	.+2      	; 0x14438 <hpdir_find_drive+0x84>
            printf("Error: hpdir.ini not found!\n");
   14436:	69 c1       	rjmp	.+722    	; 0x1470a <hpdir_find_drive+0x356>
   14438:	8e e2       	ldi	r24, 0x2E	; 46
   1443a:	9d e1       	ldi	r25, 0x1D	; 29
   1443c:	a0 e0       	ldi	r26, 0x00	; 0
   1443e:	ed b7       	in	r30, 0x3d	; 61
   14440:	fe b7       	in	r31, 0x3e	; 62
   14442:	81 83       	std	Z+1, r24	; 0x01
   14444:	92 83       	std	Z+2, r25	; 0x02
   14446:	a3 83       	std	Z+3, r26	; 0x03
   14448:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   1444c:	5e c1       	rjmp	.+700    	; 0x1470a <hpdir_find_drive+0x356>
   1444e:	ce 01       	movw	r24, r28
   14450:	08 96       	adiw	r24, 0x08	; 8
   14452:	0e 94 57 32 	call	0x64ae	; 0x64ae <trim_tail>
        ptr = skipspaces(ptr);
   14456:	ce 01       	movw	r24, r28
   14458:	08 96       	adiw	r24, 0x08	; 8
   1445a:	0e 94 67 32 	call	0x64ce	; 0x64ce <skipspaces>

        len = strlen(ptr);
   1445e:	fc 01       	movw	r30, r24
   14460:	01 90       	ld	r0, Z+
   14462:	00 20       	and	r0, r0
   14464:	e9 f7       	brne	.-6      	; 0x14460 <hpdir_find_drive+0xac>
        if(!len)
   14466:	31 97       	sbiw	r30, 0x01	; 1
   14468:	8e 17       	cp	r24, r30
   1446a:	9f 07       	cpc	r25, r31
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   1446c:	51 f4       	brne	.+20     	; 0x14482 <hpdir_find_drive+0xce>
   1446e:	a7 01       	movw	r20, r14
   14470:	6e ef       	ldi	r22, 0xFE	; 254
   14472:	70 e0       	ldi	r23, 0x00	; 0
   14474:	ce 01       	movw	r24, r28
   14476:	08 96       	adiw	r24, 0x08	; 8
   14478:	0e 94 d7 76 	call	0xedae	; 0xedae <fgets>
   1447c:	89 2b       	or	r24, r25
   1447e:	39 f7       	brne	.-50     	; 0x1444e <hpdir_find_drive+0x9a>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   14480:	0c c0       	rjmp	.+24     	; 0x1449a <hpdir_find_drive+0xe6>
   14482:	fc 01       	movw	r30, r24
   14484:	20 81       	ld	r18, Z
   14486:	2b 33       	cpi	r18, 0x3B	; 59
   14488:	91 f3       	breq	.-28     	; 0x1446e <hpdir_find_drive+0xba>
   1448a:	23 32       	cpi	r18, 0x23	; 35
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   1448c:	81 f3       	breq	.-32     	; 0x1446e <hpdir_find_drive+0xba>
   1448e:	2b 35       	cpi	r18, 0x5B	; 91
   14490:	31 f4       	brne	.+12     	; 0x1449e <hpdir_find_drive+0xea>
   14492:	f1 e0       	ldi	r31, 0x01	; 1
   14494:	2f 16       	cp	r2, r31
   14496:	31 04       	cpc	r3, r1
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   14498:	11 f4       	brne	.+4      	; 0x1449e <hpdir_find_drive+0xea>
   1449a:	00 e0       	ldi	r16, 0x00	; 0

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   1449c:	30 c1       	rjmp	.+608    	; 0x146fe <hpdir_find_drive+0x34a>
   1449e:	4e e7       	ldi	r20, 0x7E	; 126
   144a0:	50 e0       	ldi	r21, 0x00	; 0
   144a2:	b8 01       	movw	r22, r16
   144a4:	0e 94 39 33 	call	0x6672	; 0x6672 <get_token>

        if(MATCHI(token,"[driveinfo]"))
   144a8:	4c 01       	movw	r8, r24
   144aa:	67 e5       	ldi	r22, 0x57	; 87
   144ac:	70 e1       	ldi	r23, 0x10	; 16
   144ae:	c8 01       	movw	r24, r16
   144b0:	0e 94 85 32 	call	0x650a	; 0x650a <MATCHI>
   144b4:	89 2b       	or	r24, r25
        {
            driveinfo = 1;
   144b6:	21 f0       	breq	.+8      	; 0x144c0 <hpdir_find_drive+0x10c>
   144b8:	22 24       	eor	r2, r2
   144ba:	23 94       	inc	r2
   144bc:	31 2c       	mov	r3, r1
            continue;
        }

        if( driveinfo != 1)
   144be:	d7 cf       	rjmp	.-82     	; 0x1446e <hpdir_find_drive+0xba>
   144c0:	21 e0       	ldi	r18, 0x01	; 1
   144c2:	22 16       	cp	r2, r18
   144c4:	31 04       	cpc	r3, r1
            continue;

        if(list)
   144c6:	99 f6       	brne	.-90     	; 0x1446e <hpdir_find_drive+0xba>
   144c8:	c8 57       	subi	r28, 0x78	; 120
   144ca:	de 4f       	sbci	r29, 0xFE	; 254
   144cc:	88 81       	ld	r24, Y
   144ce:	99 81       	ldd	r25, Y+1	; 0x01
   144d0:	c8 58       	subi	r28, 0x88	; 136
   144d2:	d1 40       	sbci	r29, 0x01	; 1
   144d4:	89 2b       	or	r24, r25
        {
            printf("%s %s\n", token, ptr);
   144d6:	61 f0       	breq	.+24     	; 0x144f0 <hpdir_find_drive+0x13c>
   144d8:	ed b7       	in	r30, 0x3d	; 61
   144da:	fe b7       	in	r31, 0x3e	; 62
   144dc:	97 82       	std	Z+7, r9	; 0x07
   144de:	86 82       	std	Z+6, r8	; 0x06
   144e0:	15 83       	std	Z+5, r17	; 0x05
   144e2:	04 83       	std	Z+4, r16	; 0x04
   144e4:	41 82       	std	Z+1, r4	; 0x01
   144e6:	52 82       	std	Z+2, r5	; 0x02
   144e8:	63 82       	std	Z+3, r6	; 0x03
   144ea:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            continue;
        }

        if ( ! MATCHI(model,token) )
   144ee:	bf cf       	rjmp	.-130    	; 0x1446e <hpdir_find_drive+0xba>
   144f0:	b8 01       	movw	r22, r16
   144f2:	c6 01       	movw	r24, r12
   144f4:	0e 94 85 32 	call	0x650a	; 0x650a <MATCHI>
            continue;

        hpdir_init();
   144f8:	89 2b       	or	r24, r25
   144fa:	f1 f2       	breq	.-68     	; 0x144b8 <hpdir_find_drive+0x104>

        if(verbose)
   144fc:	c0 de       	rcall	.-640    	; 0x1427e <hpdir_init>
   144fe:	ab 28       	or	r10, r11
            printf("Found Model: %s\n", model);
   14500:	61 f0       	breq	.+24     	; 0x1451a <hpdir_find_drive+0x166>
   14502:	ed b7       	in	r30, 0x3d	; 61
   14504:	fe b7       	in	r31, 0x3e	; 62
   14506:	d5 82       	std	Z+5, r13	; 0x05
   14508:	c4 82       	std	Z+4, r12	; 0x04
   1450a:	86 e1       	ldi	r24, 0x16	; 22
   1450c:	9d e1       	ldi	r25, 0x1D	; 29
   1450e:	a0 e0       	ldi	r26, 0x00	; 0
   14510:	81 83       	std	Z+1, r24	; 0x01
   14512:	92 83       	std	Z+2, r25	; 0x02
   14514:	a3 83       	std	Z+3, r26	; 0x03
   14516:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   1451a:	4e e1       	ldi	r20, 0x1E	; 30
   1451c:	50 e0       	ldi	r21, 0x00	; 0
   1451e:	b8 01       	movw	r22, r16
   14520:	8b ee       	ldi	r24, 0xEB	; 235
   14522:	90 e2       	ldi	r25, 0x20	; 32
   14524:	0e 94 84 31 	call	0x6308	; 0x6308 <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14528:	4e e7       	ldi	r20, 0x7E	; 126
   1452a:	50 e0       	ldi	r21, 0x00	; 0
   1452c:	b8 01       	movw	r22, r16
   1452e:	c4 01       	movw	r24, r8
   14530:	0e 94 39 33 	call	0x6672	; 0x6672 <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   14534:	4e e3       	ldi	r20, 0x3E	; 62
   14536:	50 e0       	ldi	r21, 0x00	; 0
   14538:	6b e0       	ldi	r22, 0x0B	; 11
   1453a:	71 e2       	ldi	r23, 0x21	; 33
   1453c:	0e 94 39 33 	call	0x6672	; 0x6672 <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   14540:	4e e1       	ldi	r20, 0x1E	; 30
   14542:	50 e0       	ldi	r21, 0x00	; 0
   14544:	6b e4       	ldi	r22, 0x4B	; 75
   14546:	71 e2       	ldi	r23, 0x21	; 33
   14548:	0e 94 39 33 	call	0x6672	; 0x6672 <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1454c:	4e e7       	ldi	r20, 0x7E	; 126
   1454e:	50 e0       	ldi	r21, 0x00	; 0
   14550:	b8 01       	movw	r22, r16
   14552:	0e 94 39 33 	call	0x6672	; 0x6672 <get_token>
        hpdir.ID = get_value(token);
   14556:	6c 01       	movw	r12, r24
   14558:	c8 01       	movw	r24, r16
   1455a:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <get_value>
   1455e:	60 93 6b 21 	sts	0x216B, r22	; 0x80216b <hpdir+0x80>
   14562:	70 93 6c 21 	sts	0x216C, r23	; 0x80216c <hpdir+0x81>
   14566:	80 93 6d 21 	sts	0x216D, r24	; 0x80216d <hpdir+0x82>
   1456a:	90 93 6e 21 	sts	0x216E, r25	; 0x80216e <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1456e:	4e e7       	ldi	r20, 0x7E	; 126
   14570:	50 e0       	ldi	r21, 0x00	; 0
   14572:	b8 01       	movw	r22, r16
   14574:	c6 01       	movw	r24, r12
   14576:	0e 94 39 33 	call	0x6672	; 0x6672 <get_token>
        hpdir.mask_stat2 = get_value(token);
   1457a:	6c 01       	movw	r12, r24
   1457c:	c8 01       	movw	r24, r16
   1457e:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <get_value>
   14582:	60 93 6f 21 	sts	0x216F, r22	; 0x80216f <hpdir+0x84>
   14586:	70 93 70 21 	sts	0x2170, r23	; 0x802170 <hpdir+0x85>
   1458a:	80 93 71 21 	sts	0x2171, r24	; 0x802171 <hpdir+0x86>
   1458e:	90 93 72 21 	sts	0x2172, r25	; 0x802172 <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14592:	4e e7       	ldi	r20, 0x7E	; 126
   14594:	50 e0       	ldi	r21, 0x00	; 0
   14596:	b8 01       	movw	r22, r16
   14598:	c6 01       	movw	r24, r12
   1459a:	0e 94 39 33 	call	0x6672	; 0x6672 <get_token>
        hpdir.id_stat2 = get_value(token);
   1459e:	6c 01       	movw	r12, r24
   145a0:	c8 01       	movw	r24, r16
   145a2:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <get_value>
   145a6:	60 93 73 21 	sts	0x2173, r22	; 0x802173 <hpdir+0x88>
   145aa:	70 93 74 21 	sts	0x2174, r23	; 0x802174 <hpdir+0x89>
   145ae:	80 93 75 21 	sts	0x2175, r24	; 0x802175 <hpdir+0x8a>
   145b2:	90 93 76 21 	sts	0x2176, r25	; 0x802176 <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   145b6:	4e e7       	ldi	r20, 0x7E	; 126
   145b8:	50 e0       	ldi	r21, 0x00	; 0
   145ba:	b8 01       	movw	r22, r16
   145bc:	c6 01       	movw	r24, r12
   145be:	0e 94 39 33 	call	0x6672	; 0x6672 <get_token>
        hpdir.DEVICE_NUMBER = get_value(token);
   145c2:	6c 01       	movw	r12, r24
   145c4:	c8 01       	movw	r24, r16
   145c6:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <get_value>
   145ca:	60 93 77 21 	sts	0x2177, r22	; 0x802177 <hpdir+0x8c>
   145ce:	70 93 78 21 	sts	0x2178, r23	; 0x802178 <hpdir+0x8d>
   145d2:	80 93 79 21 	sts	0x2179, r24	; 0x802179 <hpdir+0x8e>
   145d6:	90 93 7a 21 	sts	0x217A, r25	; 0x80217a <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   145da:	4e e7       	ldi	r20, 0x7E	; 126
   145dc:	50 e0       	ldi	r21, 0x00	; 0
   145de:	b8 01       	movw	r22, r16
   145e0:	c6 01       	movw	r24, r12
   145e2:	0e 94 39 33 	call	0x6672	; 0x6672 <get_token>
        hpdir.UNITS_INSTALLED = get_value(token);
   145e6:	6c 01       	movw	r12, r24
   145e8:	c8 01       	movw	r24, r16
   145ea:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <get_value>
   145ee:	60 93 7b 21 	sts	0x217B, r22	; 0x80217b <hpdir+0x90>
   145f2:	70 93 7c 21 	sts	0x217C, r23	; 0x80217c <hpdir+0x91>
   145f6:	80 93 7d 21 	sts	0x217D, r24	; 0x80217d <hpdir+0x92>
   145fa:	90 93 7e 21 	sts	0x217E, r25	; 0x80217e <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   145fe:	4e e7       	ldi	r20, 0x7E	; 126
   14600:	50 e0       	ldi	r21, 0x00	; 0
   14602:	b8 01       	movw	r22, r16
   14604:	c6 01       	movw	r24, r12
   14606:	0e 94 39 33 	call	0x6672	; 0x6672 <get_token>
        hpdir.CYLINDERS = get_value(token);
   1460a:	6c 01       	movw	r12, r24
   1460c:	c8 01       	movw	r24, r16
   1460e:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <get_value>
   14612:	60 93 7f 21 	sts	0x217F, r22	; 0x80217f <hpdir+0x94>
   14616:	70 93 80 21 	sts	0x2180, r23	; 0x802180 <hpdir+0x95>
   1461a:	80 93 81 21 	sts	0x2181, r24	; 0x802181 <hpdir+0x96>
   1461e:	90 93 82 21 	sts	0x2182, r25	; 0x802182 <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14622:	4e e7       	ldi	r20, 0x7E	; 126
   14624:	50 e0       	ldi	r21, 0x00	; 0
   14626:	b8 01       	movw	r22, r16
   14628:	c6 01       	movw	r24, r12
   1462a:	0e 94 39 33 	call	0x6672	; 0x6672 <get_token>
        hpdir.HEADS = get_value(token);
   1462e:	6c 01       	movw	r12, r24
   14630:	c8 01       	movw	r24, r16
   14632:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <get_value>
   14636:	60 93 83 21 	sts	0x2183, r22	; 0x802183 <hpdir+0x98>
   1463a:	70 93 84 21 	sts	0x2184, r23	; 0x802184 <hpdir+0x99>
   1463e:	80 93 85 21 	sts	0x2185, r24	; 0x802185 <hpdir+0x9a>
   14642:	90 93 86 21 	sts	0x2186, r25	; 0x802186 <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14646:	4e e7       	ldi	r20, 0x7E	; 126
   14648:	50 e0       	ldi	r21, 0x00	; 0
   1464a:	b8 01       	movw	r22, r16
   1464c:	c6 01       	movw	r24, r12
   1464e:	0e 94 39 33 	call	0x6672	; 0x6672 <get_token>
        hpdir.SECTORS = get_value(token);
   14652:	6c 01       	movw	r12, r24
   14654:	c8 01       	movw	r24, r16
   14656:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <get_value>
   1465a:	60 93 87 21 	sts	0x2187, r22	; 0x802187 <hpdir+0x9c>
   1465e:	70 93 88 21 	sts	0x2188, r23	; 0x802188 <hpdir+0x9d>
   14662:	80 93 89 21 	sts	0x2189, r24	; 0x802189 <hpdir+0x9e>
   14666:	90 93 8a 21 	sts	0x218A, r25	; 0x80218a <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1466a:	4e e7       	ldi	r20, 0x7E	; 126
   1466c:	50 e0       	ldi	r21, 0x00	; 0
   1466e:	b8 01       	movw	r22, r16
   14670:	c6 01       	movw	r24, r12
   14672:	0e 94 39 33 	call	0x6672	; 0x6672 <get_token>
        hpdir.BYTES_PER_SECTOR = get_value(token);
   14676:	6c 01       	movw	r12, r24
   14678:	c8 01       	movw	r24, r16
   1467a:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <get_value>
   1467e:	60 93 8b 21 	sts	0x218B, r22	; 0x80218b <hpdir+0xa0>
   14682:	70 93 8c 21 	sts	0x218C, r23	; 0x80218c <hpdir+0xa1>
   14686:	80 93 8d 21 	sts	0x218D, r24	; 0x80218d <hpdir+0xa2>
   1468a:	90 93 8e 21 	sts	0x218E, r25	; 0x80218e <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1468e:	4e e7       	ldi	r20, 0x7E	; 126
   14690:	50 e0       	ldi	r21, 0x00	; 0
   14692:	b8 01       	movw	r22, r16
   14694:	c6 01       	movw	r24, r12
   14696:	0e 94 39 33 	call	0x6672	; 0x6672 <get_token>
        hpdir.INTERLEAVE = get_value(token);
   1469a:	c8 01       	movw	r24, r16
   1469c:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <get_value>
   146a0:	60 93 8f 21 	sts	0x218F, r22	; 0x80218f <hpdir+0xa4>
   146a4:	70 93 90 21 	sts	0x2190, r23	; 0x802190 <hpdir+0xa5>
   146a8:	80 93 91 21 	sts	0x2191, r24	; 0x802191 <hpdir+0xa6>
   146ac:	90 93 92 21 	sts	0x2192, r25	; 0x802192 <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   146b0:	20 91 7f 21 	lds	r18, 0x217F	; 0x80217f <hpdir+0x94>
   146b4:	30 91 80 21 	lds	r19, 0x2180	; 0x802180 <hpdir+0x95>
   146b8:	40 91 81 21 	lds	r20, 0x2181	; 0x802181 <hpdir+0x96>
   146bc:	50 91 82 21 	lds	r21, 0x2182	; 0x802182 <hpdir+0x97>
   146c0:	60 91 83 21 	lds	r22, 0x2183	; 0x802183 <hpdir+0x98>
   146c4:	70 91 84 21 	lds	r23, 0x2184	; 0x802184 <hpdir+0x99>
   146c8:	80 91 85 21 	lds	r24, 0x2185	; 0x802185 <hpdir+0x9a>
   146cc:	90 91 86 21 	lds	r25, 0x2186	; 0x802186 <hpdir+0x9b>
   146d0:	0e 94 20 e2 	call	0x1c440	; 0x1c440 <__mulsi3>
   146d4:	9b 01       	movw	r18, r22
   146d6:	ac 01       	movw	r20, r24
   146d8:	60 91 87 21 	lds	r22, 0x2187	; 0x802187 <hpdir+0x9c>
   146dc:	70 91 88 21 	lds	r23, 0x2188	; 0x802188 <hpdir+0x9d>
   146e0:	80 91 89 21 	lds	r24, 0x2189	; 0x802189 <hpdir+0x9e>
   146e4:	90 91 8a 21 	lds	r25, 0x218A	; 0x80218a <hpdir+0x9f>
   146e8:	0e 94 20 e2 	call	0x1c440	; 0x1c440 <__mulsi3>
   146ec:	60 93 97 21 	sts	0x2197, r22	; 0x802197 <hpdir+0xac>
   146f0:	70 93 98 21 	sts	0x2198, r23	; 0x802198 <hpdir+0xad>
   146f4:	80 93 99 21 	sts	0x2199, r24	; 0x802199 <hpdir+0xae>
   146f8:	90 93 9a 21 	sts	0x219A, r25	; 0x80219a <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   146fc:	01 e0       	ldi	r16, 0x01	; 1
        break;

    }                                             // while
    fclose(cfg);
   146fe:	10 e0       	ldi	r17, 0x00	; 0
   14700:	c7 01       	movw	r24, r14
   14702:	0e 94 69 7d 	call	0xfad2	; 0xfad2 <fclose>
    return(found);
   14706:	c8 01       	movw	r24, r16

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   14708:	02 c0       	rjmp	.+4      	; 0x1470e <hpdir_find_drive+0x35a>
   1470a:	80 e0       	ldi	r24, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
    return(found);
}
   1470c:	90 e0       	ldi	r25, 0x00	; 0
   1470e:	c7 57       	subi	r28, 0x77	; 119
   14710:	de 4f       	sbci	r29, 0xFE	; 254
   14712:	0f b6       	in	r0, 0x3f	; 63
   14714:	f8 94       	cli
   14716:	de bf       	out	0x3e, r29	; 62
   14718:	0f be       	out	0x3f, r0	; 63
   1471a:	cd bf       	out	0x3d, r28	; 61
   1471c:	df 91       	pop	r29
   1471e:	cf 91       	pop	r28
   14720:	1f 91       	pop	r17
   14722:	0f 91       	pop	r16
   14724:	ff 90       	pop	r15
   14726:	ef 90       	pop	r14
   14728:	df 90       	pop	r13
   1472a:	cf 90       	pop	r12
   1472c:	bf 90       	pop	r11
   1472e:	af 90       	pop	r10
   14730:	9f 90       	pop	r9
   14732:	8f 90       	pop	r8
   14734:	6f 90       	pop	r6
   14736:	5f 90       	pop	r5
   14738:	4f 90       	pop	r4
   1473a:	3f 90       	pop	r3
   1473c:	2f 90       	pop	r2
   1473e:	08 95       	ret

00014740 <SS80ControllerPack>:
   14740:	0f 93       	push	r16
   14742:	1f 93       	push	r17
   14744:	25 e0       	ldi	r18, 0x05	; 5
   14746:	30 e0       	ldi	r19, 0x00	; 0
   14748:	fc 01       	movw	r30, r24
   1474a:	31 83       	std	Z+1, r19	; 0x01
   1474c:	20 83       	st	Z, r18
   1474e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   14752:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   14756:	06 81       	ldd	r16, Z+6	; 0x06
   14758:	17 81       	ldd	r17, Z+7	; 0x07
   1475a:	20 e0       	ldi	r18, 0x00	; 0
   1475c:	30 e0       	ldi	r19, 0x00	; 0
   1475e:	42 e0       	ldi	r20, 0x02	; 2
   14760:	50 e0       	ldi	r21, 0x00	; 0
   14762:	60 e0       	ldi	r22, 0x00	; 0
   14764:	70 e0       	ldi	r23, 0x00	; 0
   14766:	86 e9       	ldi	r24, 0x96	; 150
   14768:	99 e1       	ldi	r25, 0x19	; 25
   1476a:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   1476e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   14772:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   14776:	00 85       	ldd	r16, Z+8	; 0x08
   14778:	11 85       	ldd	r17, Z+9	; 0x09
   1477a:	20 e0       	ldi	r18, 0x00	; 0
   1477c:	30 e0       	ldi	r19, 0x00	; 0
   1477e:	42 e0       	ldi	r20, 0x02	; 2
   14780:	50 e0       	ldi	r21, 0x00	; 0
   14782:	61 e0       	ldi	r22, 0x01	; 1
   14784:	70 e0       	ldi	r23, 0x00	; 0
   14786:	86 e9       	ldi	r24, 0x96	; 150
   14788:	99 e1       	ldi	r25, 0x19	; 25
   1478a:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   1478e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   14792:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   14796:	02 85       	ldd	r16, Z+10	; 0x0a
   14798:	10 e0       	ldi	r17, 0x00	; 0
   1479a:	20 e0       	ldi	r18, 0x00	; 0
   1479c:	30 e0       	ldi	r19, 0x00	; 0
   1479e:	41 e0       	ldi	r20, 0x01	; 1
   147a0:	50 e0       	ldi	r21, 0x00	; 0
   147a2:	64 e0       	ldi	r22, 0x04	; 4
   147a4:	70 e0       	ldi	r23, 0x00	; 0
   147a6:	86 e9       	ldi	r24, 0x96	; 150
   147a8:	99 e1       	ldi	r25, 0x19	; 25
   147aa:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   147ae:	86 e9       	ldi	r24, 0x96	; 150
   147b0:	99 e1       	ldi	r25, 0x19	; 25
   147b2:	1f 91       	pop	r17
   147b4:	0f 91       	pop	r16
   147b6:	08 95       	ret

000147b8 <SS80UnitPack>:
   147b8:	0f 93       	push	r16
   147ba:	1f 93       	push	r17
   147bc:	23 e1       	ldi	r18, 0x13	; 19
   147be:	30 e0       	ldi	r19, 0x00	; 0
   147c0:	fc 01       	movw	r30, r24
   147c2:	31 83       	std	Z+1, r19	; 0x01
   147c4:	20 83       	st	Z, r18
   147c6:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   147ca:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   147ce:	03 85       	ldd	r16, Z+11	; 0x0b
   147d0:	10 e0       	ldi	r17, 0x00	; 0
   147d2:	20 e0       	ldi	r18, 0x00	; 0
   147d4:	30 e0       	ldi	r19, 0x00	; 0
   147d6:	41 e0       	ldi	r20, 0x01	; 1
   147d8:	50 e0       	ldi	r21, 0x00	; 0
   147da:	60 e0       	ldi	r22, 0x00	; 0
   147dc:	70 e0       	ldi	r23, 0x00	; 0
   147de:	83 e8       	ldi	r24, 0x83	; 131
   147e0:	99 e1       	ldi	r25, 0x19	; 25
   147e2:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   147e6:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   147ea:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   147ee:	04 85       	ldd	r16, Z+12	; 0x0c
   147f0:	15 85       	ldd	r17, Z+13	; 0x0d
   147f2:	26 85       	ldd	r18, Z+14	; 0x0e
   147f4:	37 85       	ldd	r19, Z+15	; 0x0f
   147f6:	43 e0       	ldi	r20, 0x03	; 3
   147f8:	50 e0       	ldi	r21, 0x00	; 0
   147fa:	61 e0       	ldi	r22, 0x01	; 1
   147fc:	70 e0       	ldi	r23, 0x00	; 0
   147fe:	83 e8       	ldi	r24, 0x83	; 131
   14800:	99 e1       	ldi	r25, 0x19	; 25
   14802:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   14806:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   1480a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   1480e:	00 89       	ldd	r16, Z+16	; 0x10
   14810:	11 89       	ldd	r17, Z+17	; 0x11
   14812:	20 e0       	ldi	r18, 0x00	; 0
   14814:	30 e0       	ldi	r19, 0x00	; 0
   14816:	42 e0       	ldi	r20, 0x02	; 2
   14818:	50 e0       	ldi	r21, 0x00	; 0
   1481a:	64 e0       	ldi	r22, 0x04	; 4
   1481c:	70 e0       	ldi	r23, 0x00	; 0
   1481e:	83 e8       	ldi	r24, 0x83	; 131
   14820:	99 e1       	ldi	r25, 0x19	; 25
   14822:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   14826:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   1482a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   1482e:	02 89       	ldd	r16, Z+18	; 0x12
   14830:	10 e0       	ldi	r17, 0x00	; 0
   14832:	20 e0       	ldi	r18, 0x00	; 0
   14834:	30 e0       	ldi	r19, 0x00	; 0
   14836:	41 e0       	ldi	r20, 0x01	; 1
   14838:	50 e0       	ldi	r21, 0x00	; 0
   1483a:	66 e0       	ldi	r22, 0x06	; 6
   1483c:	70 e0       	ldi	r23, 0x00	; 0
   1483e:	83 e8       	ldi	r24, 0x83	; 131
   14840:	99 e1       	ldi	r25, 0x19	; 25
   14842:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   14846:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   1484a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   1484e:	03 89       	ldd	r16, Z+19	; 0x13
   14850:	10 e0       	ldi	r17, 0x00	; 0
   14852:	20 e0       	ldi	r18, 0x00	; 0
   14854:	30 e0       	ldi	r19, 0x00	; 0
   14856:	41 e0       	ldi	r20, 0x01	; 1
   14858:	50 e0       	ldi	r21, 0x00	; 0
   1485a:	67 e0       	ldi	r22, 0x07	; 7
   1485c:	70 e0       	ldi	r23, 0x00	; 0
   1485e:	83 e8       	ldi	r24, 0x83	; 131
   14860:	99 e1       	ldi	r25, 0x19	; 25
   14862:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   14866:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   1486a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   1486e:	04 89       	ldd	r16, Z+20	; 0x14
   14870:	15 89       	ldd	r17, Z+21	; 0x15
   14872:	20 e0       	ldi	r18, 0x00	; 0
   14874:	30 e0       	ldi	r19, 0x00	; 0
   14876:	42 e0       	ldi	r20, 0x02	; 2
   14878:	50 e0       	ldi	r21, 0x00	; 0
   1487a:	68 e0       	ldi	r22, 0x08	; 8
   1487c:	70 e0       	ldi	r23, 0x00	; 0
   1487e:	83 e8       	ldi	r24, 0x83	; 131
   14880:	99 e1       	ldi	r25, 0x19	; 25
   14882:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   14886:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   1488a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   1488e:	06 89       	ldd	r16, Z+22	; 0x16
   14890:	17 89       	ldd	r17, Z+23	; 0x17
   14892:	20 e0       	ldi	r18, 0x00	; 0
   14894:	30 e0       	ldi	r19, 0x00	; 0
   14896:	42 e0       	ldi	r20, 0x02	; 2
   14898:	50 e0       	ldi	r21, 0x00	; 0
   1489a:	6a e0       	ldi	r22, 0x0A	; 10
   1489c:	70 e0       	ldi	r23, 0x00	; 0
   1489e:	83 e8       	ldi	r24, 0x83	; 131
   148a0:	99 e1       	ldi	r25, 0x19	; 25
   148a2:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   148a6:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   148aa:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   148ae:	00 8d       	ldd	r16, Z+24	; 0x18
   148b0:	11 8d       	ldd	r17, Z+25	; 0x19
   148b2:	20 e0       	ldi	r18, 0x00	; 0
   148b4:	30 e0       	ldi	r19, 0x00	; 0
   148b6:	42 e0       	ldi	r20, 0x02	; 2
   148b8:	50 e0       	ldi	r21, 0x00	; 0
   148ba:	6c e0       	ldi	r22, 0x0C	; 12
   148bc:	70 e0       	ldi	r23, 0x00	; 0
   148be:	83 e8       	ldi	r24, 0x83	; 131
   148c0:	99 e1       	ldi	r25, 0x19	; 25
   148c2:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   148c6:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   148ca:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   148ce:	02 8d       	ldd	r16, Z+26	; 0x1a
   148d0:	13 8d       	ldd	r17, Z+27	; 0x1b
   148d2:	20 e0       	ldi	r18, 0x00	; 0
   148d4:	30 e0       	ldi	r19, 0x00	; 0
   148d6:	42 e0       	ldi	r20, 0x02	; 2
   148d8:	50 e0       	ldi	r21, 0x00	; 0
   148da:	6e e0       	ldi	r22, 0x0E	; 14
   148dc:	70 e0       	ldi	r23, 0x00	; 0
   148de:	83 e8       	ldi	r24, 0x83	; 131
   148e0:	99 e1       	ldi	r25, 0x19	; 25
   148e2:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   148e6:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   148ea:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   148ee:	04 8d       	ldd	r16, Z+28	; 0x1c
   148f0:	10 e0       	ldi	r17, 0x00	; 0
   148f2:	20 e0       	ldi	r18, 0x00	; 0
   148f4:	30 e0       	ldi	r19, 0x00	; 0
   148f6:	41 e0       	ldi	r20, 0x01	; 1
   148f8:	50 e0       	ldi	r21, 0x00	; 0
   148fa:	60 e1       	ldi	r22, 0x10	; 16
   148fc:	70 e0       	ldi	r23, 0x00	; 0
   148fe:	83 e8       	ldi	r24, 0x83	; 131
   14900:	99 e1       	ldi	r25, 0x19	; 25
   14902:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   14906:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   1490a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   1490e:	05 8d       	ldd	r16, Z+29	; 0x1d
   14910:	10 e0       	ldi	r17, 0x00	; 0
   14912:	20 e0       	ldi	r18, 0x00	; 0
   14914:	30 e0       	ldi	r19, 0x00	; 0
   14916:	41 e0       	ldi	r20, 0x01	; 1
   14918:	50 e0       	ldi	r21, 0x00	; 0
   1491a:	61 e1       	ldi	r22, 0x11	; 17
   1491c:	70 e0       	ldi	r23, 0x00	; 0
   1491e:	83 e8       	ldi	r24, 0x83	; 131
   14920:	99 e1       	ldi	r25, 0x19	; 25
   14922:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   14926:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   1492a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   1492e:	06 8d       	ldd	r16, Z+30	; 0x1e
   14930:	10 e0       	ldi	r17, 0x00	; 0
   14932:	20 e0       	ldi	r18, 0x00	; 0
   14934:	30 e0       	ldi	r19, 0x00	; 0
   14936:	41 e0       	ldi	r20, 0x01	; 1
   14938:	50 e0       	ldi	r21, 0x00	; 0
   1493a:	62 e1       	ldi	r22, 0x12	; 18
   1493c:	70 e0       	ldi	r23, 0x00	; 0
   1493e:	83 e8       	ldi	r24, 0x83	; 131
   14940:	99 e1       	ldi	r25, 0x19	; 25
   14942:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   14946:	83 e8       	ldi	r24, 0x83	; 131
   14948:	99 e1       	ldi	r25, 0x19	; 25
   1494a:	1f 91       	pop	r17
   1494c:	0f 91       	pop	r16
   1494e:	08 95       	ret

00014950 <SS80VolumePack>:
   14950:	0f 93       	push	r16
   14952:	1f 93       	push	r17
   14954:	2d e0       	ldi	r18, 0x0D	; 13
   14956:	30 e0       	ldi	r19, 0x00	; 0
   14958:	fc 01       	movw	r30, r24
   1495a:	31 83       	std	Z+1, r19	; 0x01
   1495c:	20 83       	st	Z, r18
   1495e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   14962:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   14966:	07 8d       	ldd	r16, Z+31	; 0x1f
   14968:	10 a1       	ldd	r17, Z+32	; 0x20
   1496a:	21 a1       	ldd	r18, Z+33	; 0x21
   1496c:	32 a1       	ldd	r19, Z+34	; 0x22
   1496e:	43 e0       	ldi	r20, 0x03	; 3
   14970:	50 e0       	ldi	r21, 0x00	; 0
   14972:	60 e0       	ldi	r22, 0x00	; 0
   14974:	70 e0       	ldi	r23, 0x00	; 0
   14976:	86 e7       	ldi	r24, 0x76	; 118
   14978:	99 e1       	ldi	r25, 0x19	; 25
   1497a:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   1497e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   14982:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   14986:	03 a1       	ldd	r16, Z+35	; 0x23
   14988:	10 e0       	ldi	r17, 0x00	; 0
   1498a:	20 e0       	ldi	r18, 0x00	; 0
   1498c:	30 e0       	ldi	r19, 0x00	; 0
   1498e:	41 e0       	ldi	r20, 0x01	; 1
   14990:	50 e0       	ldi	r21, 0x00	; 0
   14992:	63 e0       	ldi	r22, 0x03	; 3
   14994:	70 e0       	ldi	r23, 0x00	; 0
   14996:	86 e7       	ldi	r24, 0x76	; 118
   14998:	99 e1       	ldi	r25, 0x19	; 25
   1499a:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   1499e:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   149a2:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   149a6:	04 a1       	ldd	r16, Z+36	; 0x24
   149a8:	15 a1       	ldd	r17, Z+37	; 0x25
   149aa:	20 e0       	ldi	r18, 0x00	; 0
   149ac:	30 e0       	ldi	r19, 0x00	; 0
   149ae:	42 e0       	ldi	r20, 0x02	; 2
   149b0:	50 e0       	ldi	r21, 0x00	; 0
   149b2:	64 e0       	ldi	r22, 0x04	; 4
   149b4:	70 e0       	ldi	r23, 0x00	; 0
   149b6:	86 e7       	ldi	r24, 0x76	; 118
   149b8:	99 e1       	ldi	r25, 0x19	; 25
   149ba:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   149be:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   149c2:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   149c6:	06 a1       	ldd	r16, Z+38	; 0x26
   149c8:	17 a1       	ldd	r17, Z+39	; 0x27
   149ca:	20 a5       	ldd	r18, Z+40	; 0x28
   149cc:	31 a5       	ldd	r19, Z+41	; 0x29
   149ce:	46 e0       	ldi	r20, 0x06	; 6
   149d0:	50 e0       	ldi	r21, 0x00	; 0
   149d2:	66 e0       	ldi	r22, 0x06	; 6
   149d4:	70 e0       	ldi	r23, 0x00	; 0
   149d6:	86 e7       	ldi	r24, 0x76	; 118
   149d8:	99 e1       	ldi	r25, 0x19	; 25
   149da:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   149de:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   149e2:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   149e6:	02 a5       	ldd	r16, Z+42	; 0x2a
   149e8:	10 e0       	ldi	r17, 0x00	; 0
   149ea:	20 e0       	ldi	r18, 0x00	; 0
   149ec:	30 e0       	ldi	r19, 0x00	; 0
   149ee:	41 e0       	ldi	r20, 0x01	; 1
   149f0:	50 e0       	ldi	r21, 0x00	; 0
   149f2:	6c e0       	ldi	r22, 0x0C	; 12
   149f4:	70 e0       	ldi	r23, 0x00	; 0
   149f6:	86 e7       	ldi	r24, 0x76	; 118
   149f8:	99 e1       	ldi	r25, 0x19	; 25
   149fa:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   149fe:	86 e7       	ldi	r24, 0x76	; 118
   14a00:	99 e1       	ldi	r25, 0x19	; 25
   14a02:	1f 91       	pop	r17
   14a04:	0f 91       	pop	r16
   14a06:	08 95       	ret

00014a08 <SS80_test_extended_status>:
   14a08:	9b 01       	movw	r18, r22
   14a0a:	43 e0       	ldi	r20, 0x03	; 3
   14a0c:	35 95       	asr	r19
   14a0e:	27 95       	ror	r18
   14a10:	4a 95       	dec	r20
   14a12:	e1 f7       	brne	.-8      	; 0x14a0c <SS80_test_extended_status+0x4>
   14a14:	82 0f       	add	r24, r18
   14a16:	93 1f       	adc	r25, r19
   14a18:	67 70       	andi	r22, 0x07	; 7
   14a1a:	77 27       	eor	r23, r23
   14a1c:	20 e8       	ldi	r18, 0x80	; 128
   14a1e:	30 e0       	ldi	r19, 0x00	; 0
   14a20:	02 c0       	rjmp	.+4      	; 0x14a26 <SS80_test_extended_status+0x1e>
   14a22:	35 95       	asr	r19
   14a24:	27 95       	ror	r18
   14a26:	6a 95       	dec	r22
   14a28:	e2 f7       	brpl	.-8      	; 0x14a22 <SS80_test_extended_status+0x1a>
   14a2a:	fc 01       	movw	r30, r24
   14a2c:	80 81       	ld	r24, Z
   14a2e:	28 23       	and	r18, r24
   14a30:	81 e0       	ldi	r24, 0x01	; 1
   14a32:	90 e0       	ldi	r25, 0x00	; 0
   14a34:	11 f4       	brne	.+4      	; 0x14a3a <SS80_test_extended_status+0x32>
   14a36:	80 e0       	ldi	r24, 0x00	; 0
   14a38:	90 e0       	ldi	r25, 0x00	; 0
   14a3a:	08 95       	ret

00014a3c <SS80_display_extended_status>:
   14a3c:	6f 92       	push	r6
   14a3e:	7f 92       	push	r7
   14a40:	8f 92       	push	r8
   14a42:	ef 92       	push	r14
   14a44:	ff 92       	push	r15
   14a46:	0f 93       	push	r16
   14a48:	1f 93       	push	r17
   14a4a:	cf 93       	push	r28
   14a4c:	df 93       	push	r29
   14a4e:	ad b7       	in	r26, 0x3d	; 61
   14a50:	be b7       	in	r27, 0x3e	; 62
   14a52:	17 97       	sbiw	r26, 0x07	; 7
   14a54:	0f b6       	in	r0, 0x3f	; 63
   14a56:	f8 94       	cli
   14a58:	be bf       	out	0x3e, r27	; 62
   14a5a:	0f be       	out	0x3f, r0	; 63
   14a5c:	ad bf       	out	0x3d, r26	; 61
   14a5e:	fc 01       	movw	r30, r24
   14a60:	ac 01       	movw	r20, r24
   14a62:	48 5f       	subi	r20, 0xF8	; 248
   14a64:	5f 4f       	sbci	r21, 0xFF	; 255
   14a66:	20 e0       	ldi	r18, 0x00	; 0
   14a68:	30 e0       	ldi	r19, 0x00	; 0
   14a6a:	a1 91       	ld	r26, Z+
   14a6c:	aa 23       	and	r26, r26
   14a6e:	11 f0       	breq	.+4      	; 0x14a74 <SS80_display_extended_status+0x38>
   14a70:	21 e0       	ldi	r18, 0x01	; 1
   14a72:	30 e0       	ldi	r19, 0x00	; 0
   14a74:	e4 17       	cp	r30, r20
   14a76:	f5 07       	cpc	r31, r21
   14a78:	c1 f7       	brne	.-16     	; 0x14a6a <SS80_display_extended_status+0x2e>
   14a7a:	23 2b       	or	r18, r19
   14a7c:	81 f1       	breq	.+96     	; 0x14ade <SS80_display_extended_status+0xa2>
   14a7e:	ec 01       	movw	r28, r24
   14a80:	ed b7       	in	r30, 0x3d	; 61
   14a82:	fe b7       	in	r31, 0x3e	; 62
   14a84:	75 83       	std	Z+5, r23	; 0x05
   14a86:	64 83       	std	Z+4, r22	; 0x04
   14a88:	87 e8       	ldi	r24, 0x87	; 135
   14a8a:	93 e2       	ldi	r25, 0x23	; 35
   14a8c:	a0 e0       	ldi	r26, 0x00	; 0
   14a8e:	81 83       	std	Z+1, r24	; 0x01
   14a90:	92 83       	std	Z+2, r25	; 0x02
   14a92:	a3 83       	std	Z+3, r26	; 0x03
   14a94:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   14a98:	0c e7       	ldi	r16, 0x7C	; 124
   14a9a:	12 e0       	ldi	r17, 0x02	; 2
   14a9c:	8c e7       	ldi	r24, 0x7C	; 124
   14a9e:	93 e2       	ldi	r25, 0x23	; 35
   14aa0:	3c 01       	movw	r6, r24
   14aa2:	81 2c       	mov	r8, r1
   14aa4:	f8 01       	movw	r30, r16
   14aa6:	e0 80       	ld	r14, Z
   14aa8:	f1 80       	ldd	r15, Z+1	; 0x01
   14aaa:	ff ef       	ldi	r31, 0xFF	; 255
   14aac:	ef 16       	cp	r14, r31
   14aae:	ff 06       	cpc	r15, r31
   14ab0:	b1 f0       	breq	.+44     	; 0x14ade <SS80_display_extended_status+0xa2>
   14ab2:	b7 01       	movw	r22, r14
   14ab4:	ce 01       	movw	r24, r28
   14ab6:	a8 df       	rcall	.-176    	; 0x14a08 <SS80_test_extended_status>
   14ab8:	89 2b       	or	r24, r25
   14aba:	71 f0       	breq	.+28     	; 0x14ad8 <SS80_display_extended_status+0x9c>
   14abc:	f8 01       	movw	r30, r16
   14abe:	82 81       	ldd	r24, Z+2	; 0x02
   14ac0:	93 81       	ldd	r25, Z+3	; 0x03
   14ac2:	ed b7       	in	r30, 0x3d	; 61
   14ac4:	fe b7       	in	r31, 0x3e	; 62
   14ac6:	97 83       	std	Z+7, r25	; 0x07
   14ac8:	86 83       	std	Z+6, r24	; 0x06
   14aca:	f5 82       	std	Z+5, r15	; 0x05
   14acc:	e4 82       	std	Z+4, r14	; 0x04
   14ace:	61 82       	std	Z+1, r6	; 0x01
   14ad0:	72 82       	std	Z+2, r7	; 0x02
   14ad2:	83 82       	std	Z+3, r8	; 0x03
   14ad4:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   14ad8:	0c 5f       	subi	r16, 0xFC	; 252
   14ada:	1f 4f       	sbci	r17, 0xFF	; 255
   14adc:	e3 cf       	rjmp	.-58     	; 0x14aa4 <SS80_display_extended_status+0x68>
   14ade:	ad b7       	in	r26, 0x3d	; 61
   14ae0:	be b7       	in	r27, 0x3e	; 62
   14ae2:	17 96       	adiw	r26, 0x07	; 7
   14ae4:	0f b6       	in	r0, 0x3f	; 63
   14ae6:	f8 94       	cli
   14ae8:	be bf       	out	0x3e, r27	; 62
   14aea:	0f be       	out	0x3f, r0	; 63
   14aec:	ad bf       	out	0x3d, r26	; 61
   14aee:	df 91       	pop	r29
   14af0:	cf 91       	pop	r28
   14af2:	1f 91       	pop	r17
   14af4:	0f 91       	pop	r16
   14af6:	ff 90       	pop	r15
   14af8:	ef 90       	pop	r14
   14afa:	8f 90       	pop	r8
   14afc:	7f 90       	pop	r7
   14afe:	6f 90       	pop	r6
   14b00:	08 95       	ret

00014b02 <SS80_send_status>:
   14b02:	a9 e1       	ldi	r26, 0x19	; 25
   14b04:	b0 e0       	ldi	r27, 0x00	; 0
   14b06:	e7 e8       	ldi	r30, 0x87	; 135
   14b08:	f5 ea       	ldi	r31, 0xA5	; 165
   14b0a:	0c 94 db e2 	jmp	0x1c5b6	; 0x1c5b6 <__prologue_saves__+0x18>
   14b0e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b12:	85 ff       	sbrs	r24, 5
   14b14:	0a c0       	rjmp	.+20     	; 0x14b2a <SS80_send_status+0x28>
   14b16:	88 e6       	ldi	r24, 0x68	; 104
   14b18:	93 e2       	ldi	r25, 0x23	; 35
   14b1a:	a0 e0       	ldi	r26, 0x00	; 0
   14b1c:	ed b7       	in	r30, 0x3d	; 61
   14b1e:	fe b7       	in	r31, 0x3e	; 62
   14b20:	81 83       	std	Z+1, r24	; 0x01
   14b22:	92 83       	std	Z+2, r25	; 0x02
   14b24:	a3 83       	std	Z+3, r26	; 0x03
   14b26:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   14b2a:	ce 01       	movw	r24, r28
   14b2c:	04 96       	adiw	r24, 0x04	; 4
   14b2e:	7c 01       	movw	r14, r24
   14b30:	84 e1       	ldi	r24, 0x14	; 20
   14b32:	f7 01       	movw	r30, r14
   14b34:	11 92       	st	Z+, r1
   14b36:	8a 95       	dec	r24
   14b38:	e9 f7       	brne	.-6      	; 0x14b34 <SS80_send_status+0x32>
   14b3a:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   14b3e:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   14b42:	86 81       	ldd	r24, Z+6	; 0x06
   14b44:	20 e1       	ldi	r18, 0x10	; 16
   14b46:	82 9f       	mul	r24, r18
   14b48:	c0 01       	movw	r24, r0
   14b4a:	11 24       	eor	r1, r1
   14b4c:	95 81       	ldd	r25, Z+5	; 0x05
   14b4e:	9f 70       	andi	r25, 0x0F	; 15
   14b50:	89 2b       	or	r24, r25
   14b52:	8c 83       	std	Y+4, r24	; 0x04
   14b54:	8f ef       	ldi	r24, 0xFF	; 255
   14b56:	8d 83       	std	Y+5, r24	; 0x05
   14b58:	83 81       	ldd	r24, Z+3	; 0x03
   14b5a:	86 ff       	sbrs	r24, 6
   14b5c:	02 c0       	rjmp	.+4      	; 0x14b62 <SS80_send_status+0x60>
   14b5e:	92 e0       	ldi	r25, 0x02	; 2
   14b60:	9e 83       	std	Y+6, r25	; 0x06
   14b62:	82 ff       	sbrs	r24, 2
   14b64:	03 c0       	rjmp	.+6      	; 0x14b6c <SS80_send_status+0x6a>
   14b66:	9e 81       	ldd	r25, Y+6	; 0x06
   14b68:	91 60       	ori	r25, 0x01	; 1
   14b6a:	9e 83       	std	Y+6, r25	; 0x06
   14b6c:	80 ff       	sbrs	r24, 0
   14b6e:	02 c0       	rjmp	.+4      	; 0x14b74 <SS80_send_status+0x72>
   14b70:	82 e0       	ldi	r24, 0x02	; 2
   14b72:	88 87       	std	Y+8, r24	; 0x08
   14b74:	83 81       	ldd	r24, Z+3	; 0x03
   14b76:	81 ff       	sbrs	r24, 1
   14b78:	03 c0       	rjmp	.+6      	; 0x14b80 <SS80_send_status+0x7e>
   14b7a:	88 85       	ldd	r24, Y+8	; 0x08
   14b7c:	82 60       	ori	r24, 0x02	; 2
   14b7e:	88 87       	std	Y+8, r24	; 0x08
   14b80:	83 81       	ldd	r24, Z+3	; 0x03
   14b82:	83 ff       	sbrs	r24, 3
   14b84:	02 c0       	rjmp	.+4      	; 0x14b8a <SS80_send_status+0x88>
   14b86:	88 e0       	ldi	r24, 0x08	; 8
   14b88:	8a 87       	std	Y+10, r24	; 0x0a
   14b8a:	83 81       	ldd	r24, Z+3	; 0x03
   14b8c:	94 81       	ldd	r25, Z+4	; 0x04
   14b8e:	89 2b       	or	r24, r25
   14b90:	59 f4       	brne	.+22     	; 0x14ba8 <SS80_send_status+0xa6>
   14b92:	07 81       	ldd	r16, Z+7	; 0x07
   14b94:	10 85       	ldd	r17, Z+8	; 0x08
   14b96:	21 85       	ldd	r18, Z+9	; 0x09
   14b98:	32 85       	ldd	r19, Z+10	; 0x0a
   14b9a:	46 e0       	ldi	r20, 0x06	; 6
   14b9c:	50 e0       	ldi	r21, 0x00	; 0
   14b9e:	6a e0       	ldi	r22, 0x0A	; 10
   14ba0:	70 e0       	ldi	r23, 0x00	; 0
   14ba2:	c7 01       	movw	r24, r14
   14ba4:	0e 94 1f be 	call	0x17c3e	; 0x17c3e <V2B_MSB>
   14ba8:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   14bac:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   14bb0:	83 81       	ldd	r24, Z+3	; 0x03
   14bb2:	94 81       	ldd	r25, Z+4	; 0x04
   14bb4:	89 2b       	or	r24, r25
   14bb6:	11 f0       	breq	.+4      	; 0x14bbc <SS80_send_status+0xba>
   14bb8:	81 e0       	ldi	r24, 0x01	; 1
   14bba:	82 83       	std	Z+2, r24	; 0x02
   14bbc:	80 e0       	ldi	r24, 0x00	; 0
   14bbe:	91 e0       	ldi	r25, 0x01	; 1
   14bc0:	99 8f       	std	Y+25, r25	; 0x19
   14bc2:	88 8f       	std	Y+24, r24	; 0x18
   14bc4:	ae 01       	movw	r20, r28
   14bc6:	48 5e       	subi	r20, 0xE8	; 232
   14bc8:	5f 4f       	sbci	r21, 0xFF	; 255
   14bca:	64 e1       	ldi	r22, 0x14	; 20
   14bcc:	70 e0       	ldi	r23, 0x00	; 0
   14bce:	c7 01       	movw	r24, r14
   14bd0:	0e 94 2b 8c 	call	0x11856	; 0x11856 <gpib_write_str>
   14bd4:	44 97       	sbiw	r24, 0x14	; 20
   14bd6:	71 f0       	breq	.+28     	; 0x14bf4 <SS80_send_status+0xf2>
   14bd8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14bdc:	80 ff       	sbrs	r24, 0
   14bde:	0a c0       	rjmp	.+20     	; 0x14bf4 <SS80_send_status+0xf2>
   14be0:	8d e4       	ldi	r24, 0x4D	; 77
   14be2:	93 e2       	ldi	r25, 0x23	; 35
   14be4:	a0 e0       	ldi	r26, 0x00	; 0
   14be6:	ed b7       	in	r30, 0x3d	; 61
   14be8:	fe b7       	in	r31, 0x3e	; 62
   14bea:	81 83       	std	Z+1, r24	; 0x01
   14bec:	92 83       	std	Z+2, r25	; 0x02
   14bee:	a3 83       	std	Z+3, r26	; 0x03
   14bf0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   14bf4:	88 8d       	ldd	r24, Y+24	; 0x18
   14bf6:	99 8d       	ldd	r25, Y+25	; 0x19
   14bf8:	88 27       	eor	r24, r24
   14bfa:	90 7d       	andi	r25, 0xD0	; 208
   14bfc:	69 96       	adiw	r28, 0x19	; 25
   14bfe:	e6 e0       	ldi	r30, 0x06	; 6
   14c00:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

00014c04 <SS80_describe>:
   14c04:	a7 e0       	ldi	r26, 0x07	; 7
   14c06:	b0 e0       	ldi	r27, 0x00	; 0
   14c08:	e8 e0       	ldi	r30, 0x08	; 8
   14c0a:	f6 ea       	ldi	r31, 0xA6	; 166
   14c0c:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
   14c10:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14c14:	85 ff       	sbrs	r24, 5
   14c16:	0a c0       	rjmp	.+20     	; 0x14c2c <SS80_describe+0x28>
   14c18:	8c e3       	ldi	r24, 0x3C	; 60
   14c1a:	93 e2       	ldi	r25, 0x23	; 35
   14c1c:	a0 e0       	ldi	r26, 0x00	; 0
   14c1e:	ed b7       	in	r30, 0x3d	; 61
   14c20:	fe b7       	in	r31, 0x3e	; 62
   14c22:	81 83       	std	Z+1, r24	; 0x01
   14c24:	92 83       	std	Z+2, r25	; 0x02
   14c26:	a3 83       	std	Z+3, r26	; 0x03
   14c28:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   14c2c:	1f 82       	std	Y+7, r1	; 0x07
   14c2e:	1e 82       	std	Y+6, r1	; 0x06
   14c30:	ce 01       	movw	r24, r28
   14c32:	04 96       	adiw	r24, 0x04	; 4
   14c34:	85 dd       	rcall	.-1270   	; 0x14740 <SS80ControllerPack>
   14c36:	6c 81       	ldd	r22, Y+4	; 0x04
   14c38:	7d 81       	ldd	r23, Y+5	; 0x05
   14c3a:	ae 01       	movw	r20, r28
   14c3c:	4a 5f       	subi	r20, 0xFA	; 250
   14c3e:	5f 4f       	sbci	r21, 0xFF	; 255
   14c40:	0e 94 2b 8c 	call	0x11856	; 0x11856 <gpib_write_str>
   14c44:	2c 81       	ldd	r18, Y+4	; 0x04
   14c46:	3d 81       	ldd	r19, Y+5	; 0x05
   14c48:	82 17       	cp	r24, r18
   14c4a:	93 07       	cpc	r25, r19
   14c4c:	39 f0       	breq	.+14     	; 0x14c5c <SS80_describe+0x58>
   14c4e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14c52:	80 ff       	sbrs	r24, 0
   14c54:	3c c0       	rjmp	.+120    	; 0x14cce <SS80_describe+0xca>
   14c56:	89 e1       	ldi	r24, 0x19	; 25
   14c58:	93 e2       	ldi	r25, 0x23	; 35
   14c5a:	31 c0       	rjmp	.+98     	; 0x14cbe <SS80_describe+0xba>
   14c5c:	1f 82       	std	Y+7, r1	; 0x07
   14c5e:	1e 82       	std	Y+6, r1	; 0x06
   14c60:	ce 01       	movw	r24, r28
   14c62:	04 96       	adiw	r24, 0x04	; 4
   14c64:	a9 dd       	rcall	.-1198   	; 0x147b8 <SS80UnitPack>
   14c66:	6c 81       	ldd	r22, Y+4	; 0x04
   14c68:	7d 81       	ldd	r23, Y+5	; 0x05
   14c6a:	ae 01       	movw	r20, r28
   14c6c:	4a 5f       	subi	r20, 0xFA	; 250
   14c6e:	5f 4f       	sbci	r21, 0xFF	; 255
   14c70:	0e 94 2b 8c 	call	0x11856	; 0x11856 <gpib_write_str>
   14c74:	2c 81       	ldd	r18, Y+4	; 0x04
   14c76:	3d 81       	ldd	r19, Y+5	; 0x05
   14c78:	82 17       	cp	r24, r18
   14c7a:	93 07       	cpc	r25, r19
   14c7c:	39 f0       	breq	.+14     	; 0x14c8c <SS80_describe+0x88>
   14c7e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14c82:	80 ff       	sbrs	r24, 0
   14c84:	24 c0       	rjmp	.+72     	; 0x14cce <SS80_describe+0xca>
   14c86:	8c ef       	ldi	r24, 0xFC	; 252
   14c88:	92 e2       	ldi	r25, 0x22	; 34
   14c8a:	19 c0       	rjmp	.+50     	; 0x14cbe <SS80_describe+0xba>
   14c8c:	80 e0       	ldi	r24, 0x00	; 0
   14c8e:	91 e0       	ldi	r25, 0x01	; 1
   14c90:	9f 83       	std	Y+7, r25	; 0x07
   14c92:	8e 83       	std	Y+6, r24	; 0x06
   14c94:	ce 01       	movw	r24, r28
   14c96:	04 96       	adiw	r24, 0x04	; 4
   14c98:	5b de       	rcall	.-842    	; 0x14950 <SS80VolumePack>
   14c9a:	6c 81       	ldd	r22, Y+4	; 0x04
   14c9c:	7d 81       	ldd	r23, Y+5	; 0x05
   14c9e:	ae 01       	movw	r20, r28
   14ca0:	4a 5f       	subi	r20, 0xFA	; 250
   14ca2:	5f 4f       	sbci	r21, 0xFF	; 255
   14ca4:	0e 94 2b 8c 	call	0x11856	; 0x11856 <gpib_write_str>
   14ca8:	2c 81       	ldd	r18, Y+4	; 0x04
   14caa:	3d 81       	ldd	r19, Y+5	; 0x05
   14cac:	82 17       	cp	r24, r18
   14cae:	93 07       	cpc	r25, r19
   14cb0:	99 f0       	breq	.+38     	; 0x14cd8 <SS80_describe+0xd4>
   14cb2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14cb6:	80 ff       	sbrs	r24, 0
   14cb8:	0a c0       	rjmp	.+20     	; 0x14cce <SS80_describe+0xca>
   14cba:	8d ed       	ldi	r24, 0xDD	; 221
   14cbc:	92 e2       	ldi	r25, 0x22	; 34
   14cbe:	a0 e0       	ldi	r26, 0x00	; 0
   14cc0:	ed b7       	in	r30, 0x3d	; 61
   14cc2:	fe b7       	in	r31, 0x3e	; 62
   14cc4:	81 83       	std	Z+1, r24	; 0x01
   14cc6:	92 83       	std	Z+2, r25	; 0x02
   14cc8:	a3 83       	std	Z+3, r26	; 0x03
   14cca:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   14cce:	8e 81       	ldd	r24, Y+6	; 0x06
   14cd0:	9f 81       	ldd	r25, Y+7	; 0x07
   14cd2:	88 27       	eor	r24, r24
   14cd4:	90 7d       	andi	r25, 0xD0	; 208
   14cd6:	02 c0       	rjmp	.+4      	; 0x14cdc <SS80_describe+0xd8>
   14cd8:	80 e0       	ldi	r24, 0x00	; 0
   14cda:	90 e0       	ldi	r25, 0x00	; 0
   14cdc:	27 96       	adiw	r28, 0x07	; 7
   14cde:	e2 e0       	ldi	r30, 0x02	; 2
   14ce0:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00014ce4 <SS80_Check_Unit>:
   14ce4:	00 d0       	rcall	.+0      	; 0x14ce6 <SS80_Check_Unit+0x2>
   14ce6:	00 d0       	rcall	.+0      	; 0x14ce8 <SS80_Check_Unit+0x4>
   14ce8:	1f 92       	push	r1
   14cea:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   14cee:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   14cf2:	88 23       	and	r24, r24
   14cf4:	c9 f0       	breq	.+50     	; 0x14d28 <SS80_Check_Unit+0x44>
   14cf6:	8f 30       	cpi	r24, 0x0F	; 15
   14cf8:	b9 f0       	breq	.+46     	; 0x14d28 <SS80_Check_Unit+0x44>
   14cfa:	23 81       	ldd	r18, Z+3	; 0x03
   14cfc:	34 81       	ldd	r19, Z+4	; 0x04
   14cfe:	20 64       	ori	r18, 0x40	; 64
   14d00:	34 83       	std	Z+4, r19	; 0x04
   14d02:	23 83       	std	Z+3, r18	; 0x03
   14d04:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14d08:	90 ff       	sbrs	r25, 0
   14d0a:	0f c0       	rjmp	.+30     	; 0x14d2a <SS80_Check_Unit+0x46>
   14d0c:	90 e0       	ldi	r25, 0x00	; 0
   14d0e:	ed b7       	in	r30, 0x3d	; 61
   14d10:	fe b7       	in	r31, 0x3e	; 62
   14d12:	95 83       	std	Z+5, r25	; 0x05
   14d14:	84 83       	std	Z+4, r24	; 0x04
   14d16:	85 ec       	ldi	r24, 0xC5	; 197
   14d18:	92 e2       	ldi	r25, 0x22	; 34
   14d1a:	a0 e0       	ldi	r26, 0x00	; 0
   14d1c:	81 83       	std	Z+1, r24	; 0x01
   14d1e:	92 83       	std	Z+2, r25	; 0x02
   14d20:	a3 83       	std	Z+3, r26	; 0x03
   14d22:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   14d26:	01 c0       	rjmp	.+2      	; 0x14d2a <SS80_Check_Unit+0x46>
   14d28:	85 83       	std	Z+5, r24	; 0x05
   14d2a:	0f 90       	pop	r0
   14d2c:	0f 90       	pop	r0
   14d2e:	0f 90       	pop	r0
   14d30:	0f 90       	pop	r0
   14d32:	0f 90       	pop	r0
   14d34:	08 95       	ret

00014d36 <SS80_Check_Volume>:
   14d36:	00 d0       	rcall	.+0      	; 0x14d38 <SS80_Check_Volume+0x2>
   14d38:	00 d0       	rcall	.+0      	; 0x14d3a <SS80_Check_Volume+0x4>
   14d3a:	1f 92       	push	r1
   14d3c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   14d40:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   14d44:	88 23       	and	r24, r24
   14d46:	b9 f0       	breq	.+46     	; 0x14d76 <SS80_Check_Volume+0x40>
   14d48:	23 81       	ldd	r18, Z+3	; 0x03
   14d4a:	34 81       	ldd	r19, Z+4	; 0x04
   14d4c:	20 64       	ori	r18, 0x40	; 64
   14d4e:	34 83       	std	Z+4, r19	; 0x04
   14d50:	23 83       	std	Z+3, r18	; 0x03
   14d52:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14d56:	90 ff       	sbrs	r25, 0
   14d58:	0f c0       	rjmp	.+30     	; 0x14d78 <SS80_Check_Volume+0x42>
   14d5a:	90 e0       	ldi	r25, 0x00	; 0
   14d5c:	ed b7       	in	r30, 0x3d	; 61
   14d5e:	fe b7       	in	r31, 0x3e	; 62
   14d60:	95 83       	std	Z+5, r25	; 0x05
   14d62:	84 83       	std	Z+4, r24	; 0x04
   14d64:	8b ea       	ldi	r24, 0xAB	; 171
   14d66:	92 e2       	ldi	r25, 0x22	; 34
   14d68:	a0 e0       	ldi	r26, 0x00	; 0
   14d6a:	81 83       	std	Z+1, r24	; 0x01
   14d6c:	92 83       	std	Z+2, r25	; 0x02
   14d6e:	a3 83       	std	Z+3, r26	; 0x03
   14d70:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   14d74:	01 c0       	rjmp	.+2      	; 0x14d78 <SS80_Check_Volume+0x42>
   14d76:	16 82       	std	Z+6, r1	; 0x06
   14d78:	0f 90       	pop	r0
   14d7a:	0f 90       	pop	r0
   14d7c:	0f 90       	pop	r0
   14d7e:	0f 90       	pop	r0
   14d80:	0f 90       	pop	r0
   14d82:	08 95       	ret

00014d84 <SS80_Command_State>:
   14d84:	2f 92       	push	r2
   14d86:	3f 92       	push	r3
   14d88:	4f 92       	push	r4
   14d8a:	6f 92       	push	r6
   14d8c:	7f 92       	push	r7
   14d8e:	8f 92       	push	r8
   14d90:	af 92       	push	r10
   14d92:	bf 92       	push	r11
   14d94:	cf 92       	push	r12
   14d96:	ef 92       	push	r14
   14d98:	ff 92       	push	r15
   14d9a:	0f 93       	push	r16
   14d9c:	1f 93       	push	r17
   14d9e:	cf 93       	push	r28
   14da0:	df 93       	push	r29
   14da2:	cd b7       	in	r28, 0x3d	; 61
   14da4:	de b7       	in	r29, 0x3e	; 62
   14da6:	66 97       	sbiw	r28, 0x16	; 22
   14da8:	0f b6       	in	r0, 0x3f	; 63
   14daa:	f8 94       	cli
   14dac:	de bf       	out	0x3e, r29	; 62
   14dae:	0f be       	out	0x3f, r0	; 63
   14db0:	cd bf       	out	0x3d, r28	; 61
   14db2:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   14db6:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   14dba:	81 81       	ldd	r24, Z+1	; 0x01
   14dbc:	90 e0       	ldi	r25, 0x00	; 0
   14dbe:	0e 94 d1 86 	call	0x10da2	; 0x10da2 <gpib_disable_PPR>
   14dc2:	80 e0       	ldi	r24, 0x00	; 0
   14dc4:	91 e0       	ldi	r25, 0x01	; 1
   14dc6:	99 87       	std	Y+9, r25	; 0x09
   14dc8:	88 87       	std	Y+8, r24	; 0x08
   14dca:	ae 01       	movw	r20, r28
   14dcc:	48 5f       	subi	r20, 0xF8	; 248
   14dce:	5f 4f       	sbci	r21, 0xFF	; 255
   14dd0:	60 e0       	ldi	r22, 0x00	; 0
   14dd2:	72 e0       	ldi	r23, 0x02	; 2
   14dd4:	8d ed       	ldi	r24, 0xDD	; 221
   14dd6:	9c e1       	ldi	r25, 0x1C	; 28
   14dd8:	0e 94 89 8b 	call	0x11712	; 0x11712 <gpib_read_str>
   14ddc:	9b 87       	std	Y+11, r25	; 0x0b
   14dde:	8a 87       	std	Y+10, r24	; 0x0a
   14de0:	88 85       	ldd	r24, Y+8	; 0x08
   14de2:	99 85       	ldd	r25, Y+9	; 0x09
   14de4:	9c 01       	movw	r18, r24
   14de6:	22 27       	eor	r18, r18
   14de8:	30 7d       	andi	r19, 0xD0	; 208
   14dea:	23 2b       	or	r18, r19
   14dec:	79 f0       	breq	.+30     	; 0x14e0c <SS80_Command_State+0x88>
   14dee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14df2:	80 ff       	sbrs	r24, 0
   14df4:	21 c2       	rjmp	.+1090   	; 0x15238 <SS80_Command_State+0x4b4>
   14df6:	85 e8       	ldi	r24, 0x85	; 133
   14df8:	92 e2       	ldi	r25, 0x22	; 34
   14dfa:	a0 e0       	ldi	r26, 0x00	; 0
   14dfc:	ed b7       	in	r30, 0x3d	; 61
   14dfe:	fe b7       	in	r31, 0x3e	; 62
   14e00:	81 83       	std	Z+1, r24	; 0x01
   14e02:	92 83       	std	Z+2, r25	; 0x02
   14e04:	a3 83       	std	Z+3, r26	; 0x03
   14e06:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   14e0a:	16 c2       	rjmp	.+1068   	; 0x15238 <SS80_Command_State+0x4b4>
   14e0c:	2a 85       	ldd	r18, Y+10	; 0x0a
   14e0e:	3b 85       	ldd	r19, Y+11	; 0x0b
   14e10:	23 2b       	or	r18, r19
   14e12:	09 f4       	brne	.+2      	; 0x14e16 <SS80_Command_State+0x92>
   14e14:	16 c2       	rjmp	.+1068   	; 0x15242 <SS80_Command_State+0x4be>
   14e16:	90 fd       	sbrc	r25, 0
   14e18:	0e c0       	rjmp	.+28     	; 0x14e36 <SS80_Command_State+0xb2>
   14e1a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14e1e:	80 ff       	sbrs	r24, 0
   14e20:	0a c0       	rjmp	.+20     	; 0x14e36 <SS80_Command_State+0xb2>
   14e22:	8c e6       	ldi	r24, 0x6C	; 108
   14e24:	92 e2       	ldi	r25, 0x22	; 34
   14e26:	a0 e0       	ldi	r26, 0x00	; 0
   14e28:	ed b7       	in	r30, 0x3d	; 61
   14e2a:	fe b7       	in	r31, 0x3e	; 62
   14e2c:	81 83       	std	Z+1, r24	; 0x01
   14e2e:	92 83       	std	Z+2, r25	; 0x02
   14e30:	a3 83       	std	Z+3, r26	; 0x03
   14e32:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   14e36:	e1 2c       	mov	r14, r1
   14e38:	f1 2c       	mov	r15, r1
   14e3a:	80 e7       	ldi	r24, 0x70	; 112
   14e3c:	91 e2       	ldi	r25, 0x21	; 33
   14e3e:	9c 01       	movw	r18, r24
   14e40:	40 e0       	ldi	r20, 0x00	; 0
   14e42:	2e 87       	std	Y+14, r18	; 0x0e
   14e44:	3f 87       	std	Y+15, r19	; 0x0f
   14e46:	48 8b       	std	Y+16, r20	; 0x10
   14e48:	85 e9       	ldi	r24, 0x95	; 149
   14e4a:	91 e2       	ldi	r25, 0x21	; 33
   14e4c:	9c 01       	movw	r18, r24
   14e4e:	40 e0       	ldi	r20, 0x00	; 0
   14e50:	29 8b       	std	Y+17, r18	; 0x11
   14e52:	3a 8b       	std	Y+18, r19	; 0x12
   14e54:	4b 8b       	std	Y+19, r20	; 0x13
   14e56:	8f ea       	ldi	r24, 0xAF	; 175
   14e58:	91 e2       	ldi	r25, 0x21	; 33
   14e5a:	9c 01       	movw	r18, r24
   14e5c:	40 e0       	ldi	r20, 0x00	; 0
   14e5e:	2c 8b       	std	Y+20, r18	; 0x14
   14e60:	3d 8b       	std	Y+21, r19	; 0x15
   14e62:	4e 8b       	std	Y+22, r20	; 0x16
   14e64:	85 ec       	ldi	r24, 0xC5	; 197
   14e66:	91 e2       	ldi	r25, 0x21	; 33
   14e68:	3c 01       	movw	r6, r24
   14e6a:	81 2c       	mov	r8, r1
   14e6c:	83 ed       	ldi	r24, 0xD3	; 211
   14e6e:	91 e2       	ldi	r25, 0x21	; 33
   14e70:	5c 01       	movw	r10, r24
   14e72:	c1 2c       	mov	r12, r1
   14e74:	8f ee       	ldi	r24, 0xEF	; 239
   14e76:	91 e2       	ldi	r25, 0x21	; 33
   14e78:	1c 01       	movw	r2, r24
   14e7a:	41 2c       	mov	r4, r1
   14e7c:	2a 85       	ldd	r18, Y+10	; 0x0a
   14e7e:	3b 85       	ldd	r19, Y+11	; 0x0b
   14e80:	87 01       	movw	r16, r14
   14e82:	e2 16       	cp	r14, r18
   14e84:	f3 06       	cpc	r15, r19
   14e86:	0c f0       	brlt	.+2      	; 0x14e8a <SS80_Command_State+0x106>
   14e88:	b6 c1       	rjmp	.+876    	; 0x151f6 <SS80_Command_State+0x472>
   14e8a:	0f 5f       	subi	r16, 0xFF	; 255
   14e8c:	1f 4f       	sbci	r17, 0xFF	; 255
   14e8e:	f7 01       	movw	r30, r14
   14e90:	e3 52       	subi	r30, 0x23	; 35
   14e92:	f3 4e       	sbci	r31, 0xE3	; 227
   14e94:	80 81       	ld	r24, Z
   14e96:	28 2f       	mov	r18, r24
   14e98:	30 e0       	ldi	r19, 0x00	; 0
   14e9a:	a9 01       	movw	r20, r18
   14e9c:	40 52       	subi	r20, 0x20	; 32
{
#ifdef ESP8266
    hspi_RX((uint8_t *) data,count);
#endif
#ifdef AVR
    SPI0_RX((uint8_t *)data,count);
   14e9e:	51 09       	sbc	r21, r1
   14ea0:	40 31       	cpi	r20, 0x10	; 16
   14ea2:	51 05       	cpc	r21, r1
   14ea4:	98 f4       	brcc	.+38     	; 0x14ecc <SS80_Command_State+0x148>
   14ea6:	80 52       	subi	r24, 0x20	; 32
   14ea8:	1d df       	rcall	.-454    	; 0x14ce4 <SS80_Check_Unit>
   14eaa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14eae:	85 ff       	sbrs	r24, 5
   14eb0:	a0 c1       	rjmp	.+832    	; 0x151f2 <SS80_Command_State+0x46e>
   14eb2:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   14eb6:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   14eba:	85 81       	ldd	r24, Z+5	; 0x05
   14ebc:	90 e0       	ldi	r25, 0x00	; 0
   14ebe:	ed b7       	in	r30, 0x3d	; 61
   14ec0:	fe b7       	in	r31, 0x3e	; 62
   14ec2:	95 83       	std	Z+5, r25	; 0x05
   14ec4:	84 83       	std	Z+4, r24	; 0x04
   14ec6:	86 e5       	ldi	r24, 0x56	; 86
   14ec8:	92 e2       	ldi	r25, 0x22	; 34
   14eca:	19 c0       	rjmp	.+50     	; 0x14efe <SS80_Command_State+0x17a>
   14ecc:	a9 01       	movw	r20, r18
   14ece:	40 54       	subi	r20, 0x40	; 64
   14ed0:	51 09       	sbc	r21, r1
   14ed2:	40 31       	cpi	r20, 0x10	; 16
   14ed4:	51 05       	cpc	r21, r1
   14ed6:	d0 f4       	brcc	.+52     	; 0x14f0c <SS80_Command_State+0x188>
   14ed8:	80 54       	subi	r24, 0x40	; 64
   14eda:	2d df       	rcall	.-422    	; 0x14d36 <SS80_Check_Volume>
   14edc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14ee0:	85 ff       	sbrs	r24, 5
   14ee2:	87 c1       	rjmp	.+782    	; 0x151f2 <SS80_Command_State+0x46e>
   14ee4:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   14ee8:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   14eec:	86 81       	ldd	r24, Z+6	; 0x06
   14eee:	90 e0       	ldi	r25, 0x00	; 0
   14ef0:	ed b7       	in	r30, 0x3d	; 61
   14ef2:	fe b7       	in	r31, 0x3e	; 62
   14ef4:	95 83       	std	Z+5, r25	; 0x05
   14ef6:	84 83       	std	Z+4, r24	; 0x04
   14ef8:	2d e3       	ldi	r18, 0x3D	; 61
   14efa:	32 e2       	ldi	r19, 0x22	; 34
   14efc:	c9 01       	movw	r24, r18
   14efe:	a0 e0       	ldi	r26, 0x00	; 0
   14f00:	81 83       	std	Z+1, r24	; 0x01
   14f02:	92 83       	std	Z+2, r25	; 0x02
   14f04:	a3 83       	std	Z+3, r26	; 0x03
   14f06:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   14f0a:	73 c1       	rjmp	.+742    	; 0x151f2 <SS80_Command_State+0x46e>
   14f0c:	21 15       	cp	r18, r1
   14f0e:	31 05       	cpc	r19, r1
   14f10:	79 f4       	brne	.+30     	; 0x14f30 <SS80_Command_State+0x1ac>
   14f12:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   14f16:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   14f1a:	81 e0       	ldi	r24, 0x01	; 1
   14f1c:	90 e0       	ldi	r25, 0x00	; 0
   14f1e:	91 83       	std	Z+1, r25	; 0x01
   14f20:	80 83       	st	Z, r24
   14f22:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14f26:	85 ff       	sbrs	r24, 5
   14f28:	66 c1       	rjmp	.+716    	; 0x151f6 <SS80_Command_State+0x472>
   14f2a:	85 e2       	ldi	r24, 0x25	; 37
   14f2c:	92 e2       	ldi	r25, 0x22	; 34
   14f2e:	0f c0       	rjmp	.+30     	; 0x14f4e <SS80_Command_State+0x1ca>
   14f30:	22 30       	cpi	r18, 0x02	; 2
   14f32:	31 05       	cpc	r19, r1
   14f34:	a9 f4       	brne	.+42     	; 0x14f60 <SS80_Command_State+0x1dc>
   14f36:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   14f3a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   14f3e:	31 83       	std	Z+1, r19	; 0x01
   14f40:	20 83       	st	Z, r18
   14f42:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14f46:	85 ff       	sbrs	r24, 5
   14f48:	56 c1       	rjmp	.+684    	; 0x151f6 <SS80_Command_State+0x472>
   14f4a:	8c e0       	ldi	r24, 0x0C	; 12
   14f4c:	92 e2       	ldi	r25, 0x22	; 34
   14f4e:	a0 e0       	ldi	r26, 0x00	; 0
   14f50:	ed b7       	in	r30, 0x3d	; 61
   14f52:	fe b7       	in	r31, 0x3e	; 62
   14f54:	81 83       	std	Z+1, r24	; 0x01
   14f56:	92 83       	std	Z+2, r25	; 0x02
   14f58:	a3 83       	std	Z+3, r26	; 0x03
   14f5a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   14f5e:	4b c1       	rjmp	.+662    	; 0x151f6 <SS80_Command_State+0x472>
   14f60:	20 31       	cpi	r18, 0x10	; 16
   14f62:	31 05       	cpc	r19, r1
   14f64:	b1 f5       	brne	.+108    	; 0x14fd2 <SS80_Command_State+0x24e>
   14f66:	20 91 64 19 	lds	r18, 0x1964	; 0x801964 <SS80s>
   14f6a:	30 91 65 19 	lds	r19, 0x1965	; 0x801965 <SS80s+0x1>
   14f6e:	3d 87       	std	Y+13, r19	; 0x0d
   14f70:	2c 87       	std	Y+12, r18	; 0x0c
   14f72:	46 e0       	ldi	r20, 0x06	; 6
   14f74:	50 e0       	ldi	r21, 0x00	; 0
   14f76:	b8 01       	movw	r22, r16
   14f78:	8d ed       	ldi	r24, 0xDD	; 221
   14f7a:	9c e1       	ldi	r25, 0x1C	; 28
   14f7c:	0e 94 48 be 	call	0x17c90	; 0x17c90 <B2V_MSB>
   14f80:	ec 85       	ldd	r30, Y+12	; 0x0c
   14f82:	fd 85       	ldd	r31, Y+13	; 0x0d
   14f84:	67 83       	std	Z+7, r22	; 0x07
   14f86:	70 87       	std	Z+8, r23	; 0x08
   14f88:	81 87       	std	Z+9, r24	; 0x09
   14f8a:	92 87       	std	Z+10, r25	; 0x0a
   14f8c:	87 01       	movw	r16, r14
   14f8e:	09 5f       	subi	r16, 0xF9	; 249
   14f90:	1f 4f       	sbci	r17, 0xFF	; 255
   14f92:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14f96:	85 ff       	sbrs	r24, 5
   14f98:	2c c1       	rjmp	.+600    	; 0x151f2 <SS80_Command_State+0x46e>
   14f9a:	20 91 64 19 	lds	r18, 0x1964	; 0x801964 <SS80s>
   14f9e:	30 91 65 19 	lds	r19, 0x1965	; 0x801965 <SS80s+0x1>
   14fa2:	80 91 66 19 	lds	r24, 0x1966	; 0x801966 <SS80p>
   14fa6:	90 91 67 19 	lds	r25, 0x1967	; 0x801967 <SS80p+0x1>
   14faa:	fc 01       	movw	r30, r24
   14fac:	a0 89       	ldd	r26, Z+16	; 0x10
   14fae:	b1 89       	ldd	r27, Z+17	; 0x11
   14fb0:	f9 01       	movw	r30, r18
   14fb2:	27 81       	ldd	r18, Z+7	; 0x07
   14fb4:	30 85       	ldd	r19, Z+8	; 0x08
   14fb6:	41 85       	ldd	r20, Z+9	; 0x09
   14fb8:	52 85       	ldd	r21, Z+10	; 0x0a
   14fba:	0e 94 af e2 	call	0x1c55e	; 0x1c55e <__muluhisi3>
   14fbe:	ed b7       	in	r30, 0x3d	; 61
   14fc0:	fe b7       	in	r31, 0x3e	; 62
   14fc2:	64 83       	std	Z+4, r22	; 0x04
   14fc4:	75 83       	std	Z+5, r23	; 0x05
   14fc6:	86 83       	std	Z+6, r24	; 0x06
   14fc8:	97 83       	std	Z+7, r25	; 0x07
   14fca:	21 82       	std	Z+1, r2	; 0x01
   14fcc:	32 82       	std	Z+2, r3	; 0x02
   14fce:	43 82       	std	Z+3, r4	; 0x03
   14fd0:	2e c0       	rjmp	.+92     	; 0x1502e <SS80_Command_State+0x2aa>
   14fd2:	28 31       	cpi	r18, 0x18	; 24
   14fd4:	31 05       	cpc	r19, r1
   14fd6:	71 f5       	brne	.+92     	; 0x15034 <SS80_Command_State+0x2b0>
   14fd8:	20 91 64 19 	lds	r18, 0x1964	; 0x801964 <SS80s>
   14fdc:	30 91 65 19 	lds	r19, 0x1965	; 0x801965 <SS80s+0x1>
   14fe0:	3d 87       	std	Y+13, r19	; 0x0d
   14fe2:	2c 87       	std	Y+12, r18	; 0x0c
   14fe4:	44 e0       	ldi	r20, 0x04	; 4
   14fe6:	50 e0       	ldi	r21, 0x00	; 0
   14fe8:	b8 01       	movw	r22, r16
   14fea:	8d ed       	ldi	r24, 0xDD	; 221
   14fec:	9c e1       	ldi	r25, 0x1C	; 28
   14fee:	0e 94 48 be 	call	0x17c90	; 0x17c90 <B2V_MSB>
   14ff2:	ec 85       	ldd	r30, Y+12	; 0x0c
   14ff4:	fd 85       	ldd	r31, Y+13	; 0x0d
   14ff6:	63 87       	std	Z+11, r22	; 0x0b
   14ff8:	74 87       	std	Z+12, r23	; 0x0c
   14ffa:	85 87       	std	Z+13, r24	; 0x0d
   14ffc:	96 87       	std	Z+14, r25	; 0x0e
   14ffe:	87 01       	movw	r16, r14
   15000:	0b 5f       	subi	r16, 0xFB	; 251
   15002:	1f 4f       	sbci	r17, 0xFF	; 255
   15004:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15008:	85 ff       	sbrs	r24, 5
   1500a:	f3 c0       	rjmp	.+486    	; 0x151f2 <SS80_Command_State+0x46e>
   1500c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   15010:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   15014:	83 85       	ldd	r24, Z+11	; 0x0b
   15016:	94 85       	ldd	r25, Z+12	; 0x0c
   15018:	a5 85       	ldd	r26, Z+13	; 0x0d
   1501a:	b6 85       	ldd	r27, Z+14	; 0x0e
   1501c:	ed b7       	in	r30, 0x3d	; 61
   1501e:	fe b7       	in	r31, 0x3e	; 62
   15020:	84 83       	std	Z+4, r24	; 0x04
   15022:	95 83       	std	Z+5, r25	; 0x05
   15024:	a6 83       	std	Z+6, r26	; 0x06
   15026:	b7 83       	std	Z+7, r27	; 0x07
   15028:	a1 82       	std	Z+1, r10	; 0x01
   1502a:	b2 82       	std	Z+2, r11	; 0x02
   1502c:	c3 82       	std	Z+3, r12	; 0x03
   1502e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15032:	df c0       	rjmp	.+446    	; 0x151f2 <SS80_Command_State+0x46e>
   15034:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15038:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1503c:	24 33       	cpi	r18, 0x34	; 52
   1503e:	31 05       	cpc	r19, r1
   15040:	41 f4       	brne	.+16     	; 0x15052 <SS80_Command_State+0x2ce>
   15042:	85 ff       	sbrs	r24, 5
   15044:	d6 c0       	rjmp	.+428    	; 0x151f2 <SS80_Command_State+0x46e>
   15046:	ed b7       	in	r30, 0x3d	; 61
   15048:	fe b7       	in	r31, 0x3e	; 62
   1504a:	61 82       	std	Z+1, r6	; 0x01
   1504c:	72 82       	std	Z+2, r7	; 0x02
   1504e:	83 82       	std	Z+3, r8	; 0x03
   15050:	2b c0       	rjmp	.+86     	; 0x150a8 <SS80_Command_State+0x324>
   15052:	29 33       	cpi	r18, 0x39	; 57
   15054:	31 05       	cpc	r19, r1
   15056:	49 f4       	brne	.+18     	; 0x1506a <SS80_Command_State+0x2e6>
   15058:	87 01       	movw	r16, r14
   1505a:	0d 5f       	subi	r16, 0xFD	; 253
   1505c:	1f 4f       	sbci	r17, 0xFF	; 255
   1505e:	85 ff       	sbrs	r24, 5
   15060:	c8 c0       	rjmp	.+400    	; 0x151f2 <SS80_Command_State+0x46e>
   15062:	2c 89       	ldd	r18, Y+20	; 0x14
   15064:	3d 89       	ldd	r19, Y+21	; 0x15
   15066:	4e 89       	ldd	r20, Y+22	; 0x16
   15068:	1a c0       	rjmp	.+52     	; 0x1509e <SS80_Command_State+0x31a>
   1506a:	2b 33       	cpi	r18, 0x3B	; 59
   1506c:	31 05       	cpc	r19, r1
   1506e:	49 f4       	brne	.+18     	; 0x15082 <SS80_Command_State+0x2fe>
   15070:	87 01       	movw	r16, r14
   15072:	0e 5f       	subi	r16, 0xFE	; 254
   15074:	1f 4f       	sbci	r17, 0xFF	; 255
   15076:	85 ff       	sbrs	r24, 5
   15078:	bc c0       	rjmp	.+376    	; 0x151f2 <SS80_Command_State+0x46e>
   1507a:	29 89       	ldd	r18, Y+17	; 0x11
   1507c:	3a 89       	ldd	r19, Y+18	; 0x12
   1507e:	4b 89       	ldd	r20, Y+19	; 0x13
   15080:	0e c0       	rjmp	.+28     	; 0x1509e <SS80_Command_State+0x31a>
   15082:	28 34       	cpi	r18, 0x48	; 72
   15084:	31 05       	cpc	r19, r1
   15086:	99 f4       	brne	.+38     	; 0x150ae <SS80_Command_State+0x32a>
   15088:	87 01       	movw	r16, r14
   1508a:	0e 5f       	subi	r16, 0xFE	; 254
   1508c:	1f 4f       	sbci	r17, 0xFF	; 255
   1508e:	80 73       	andi	r24, 0x30	; 48
   15090:	99 27       	eor	r25, r25
   15092:	89 2b       	or	r24, r25
   15094:	09 f4       	brne	.+2      	; 0x15098 <SS80_Command_State+0x314>
   15096:	ad c0       	rjmp	.+346    	; 0x151f2 <SS80_Command_State+0x46e>
   15098:	2e 85       	ldd	r18, Y+14	; 0x0e
   1509a:	3f 85       	ldd	r19, Y+15	; 0x0f
   1509c:	48 89       	ldd	r20, Y+16	; 0x10
   1509e:	ed b7       	in	r30, 0x3d	; 61
   150a0:	fe b7       	in	r31, 0x3e	; 62
   150a2:	21 83       	std	Z+1, r18	; 0x01
   150a4:	32 83       	std	Z+2, r19	; 0x02
   150a6:	43 83       	std	Z+3, r20	; 0x03
   150a8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   150ac:	a2 c0       	rjmp	.+324    	; 0x151f2 <SS80_Command_State+0x46e>
   150ae:	24 30       	cpi	r18, 0x04	; 4
   150b0:	31 05       	cpc	r19, r1
   150b2:	41 f4       	brne	.+16     	; 0x150c4 <SS80_Command_State+0x340>
   150b4:	80 73       	andi	r24, 0x30	; 48
   150b6:	99 27       	eor	r25, r25
   150b8:	89 2b       	or	r24, r25
   150ba:	09 f4       	brne	.+2      	; 0x150be <SS80_Command_State+0x33a>
   150bc:	9c c0       	rjmp	.+312    	; 0x151f6 <SS80_Command_State+0x472>
   150be:	8f e4       	ldi	r24, 0x4F	; 79
   150c0:	91 e2       	ldi	r25, 0x21	; 33
   150c2:	45 cf       	rjmp	.-374    	; 0x14f4e <SS80_Command_State+0x1ca>
   150c4:	2e 30       	cpi	r18, 0x0E	; 14
   150c6:	31 05       	cpc	r19, r1
   150c8:	29 f4       	brne	.+10     	; 0x150d4 <SS80_Command_State+0x350>
   150ca:	85 ff       	sbrs	r24, 5
   150cc:	94 c0       	rjmp	.+296    	; 0x151f6 <SS80_Command_State+0x472>
   150ce:	89 e3       	ldi	r24, 0x39	; 57
   150d0:	91 e2       	ldi	r25, 0x21	; 33
   150d2:	3d cf       	rjmp	.-390    	; 0x14f4e <SS80_Command_State+0x1ca>
   150d4:	2f 30       	cpi	r18, 0x0F	; 15
   150d6:	31 05       	cpc	r19, r1
   150d8:	29 f4       	brne	.+10     	; 0x150e4 <SS80_Command_State+0x360>
   150da:	85 ff       	sbrs	r24, 5
   150dc:	8c c0       	rjmp	.+280    	; 0x151f6 <SS80_Command_State+0x472>
   150de:	8c e1       	ldi	r24, 0x1C	; 28
   150e0:	91 e2       	ldi	r25, 0x21	; 33
   150e2:	35 cf       	rjmp	.-406    	; 0x14f4e <SS80_Command_State+0x1ca>
   150e4:	21 33       	cpi	r18, 0x31	; 49
   150e6:	31 05       	cpc	r19, r1
   150e8:	59 f4       	brne	.+22     	; 0x15100 <SS80_Command_State+0x37c>
   150ea:	87 01       	movw	r16, r14
   150ec:	0d 5f       	subi	r16, 0xFD	; 253
   150ee:	1f 4f       	sbci	r17, 0xFF	; 255
   150f0:	80 73       	andi	r24, 0x30	; 48
   150f2:	99 27       	eor	r25, r25
   150f4:	89 2b       	or	r24, r25
   150f6:	09 f4       	brne	.+2      	; 0x150fa <SS80_Command_State+0x376>
   150f8:	7e c0       	rjmp	.+252    	; 0x151f6 <SS80_Command_State+0x472>
   150fa:	80 e0       	ldi	r24, 0x00	; 0
   150fc:	91 e2       	ldi	r25, 0x21	; 33
   150fe:	27 cf       	rjmp	.-434    	; 0x14f4e <SS80_Command_State+0x1ca>
   15100:	25 33       	cpi	r18, 0x35	; 53
   15102:	31 05       	cpc	r19, r1
   15104:	69 f4       	brne	.+26     	; 0x15120 <SS80_Command_State+0x39c>
   15106:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   1510a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   1510e:	24 e0       	ldi	r18, 0x04	; 4
   15110:	30 e0       	ldi	r19, 0x00	; 0
   15112:	31 83       	std	Z+1, r19	; 0x01
   15114:	20 83       	st	Z, r18
   15116:	85 ff       	sbrs	r24, 5
   15118:	6e c0       	rjmp	.+220    	; 0x151f6 <SS80_Command_State+0x472>
   1511a:	8f ee       	ldi	r24, 0xEF	; 239
   1511c:	90 e2       	ldi	r25, 0x20	; 32
   1511e:	17 cf       	rjmp	.-466    	; 0x14f4e <SS80_Command_State+0x1ca>
   15120:	27 33       	cpi	r18, 0x37	; 55
   15122:	31 05       	cpc	r19, r1
   15124:	59 f4       	brne	.+22     	; 0x1513c <SS80_Command_State+0x3b8>
   15126:	87 01       	movw	r16, r14
   15128:	0d 5f       	subi	r16, 0xFD	; 253
   1512a:	1f 4f       	sbci	r17, 0xFF	; 255
   1512c:	80 73       	andi	r24, 0x30	; 48
   1512e:	99 27       	eor	r25, r25
   15130:	89 2b       	or	r24, r25
   15132:	09 f4       	brne	.+2      	; 0x15136 <SS80_Command_State+0x3b2>
   15134:	60 c0       	rjmp	.+192    	; 0x151f6 <SS80_Command_State+0x472>
   15136:	81 ed       	ldi	r24, 0xD1	; 209
   15138:	90 e2       	ldi	r25, 0x20	; 32
   1513a:	09 cf       	rjmp	.-494    	; 0x14f4e <SS80_Command_State+0x1ca>
   1513c:	2e 33       	cpi	r18, 0x3E	; 62
   1513e:	31 05       	cpc	r19, r1
   15140:	c1 f4       	brne	.+48     	; 0x15172 <SS80_Command_State+0x3ee>
   15142:	80 73       	andi	r24, 0x30	; 48
   15144:	99 27       	eor	r25, r25
   15146:	89 2b       	or	r24, r25
   15148:	81 f0       	breq	.+32     	; 0x1516a <SS80_Command_State+0x3e6>
   1514a:	82 eb       	ldi	r24, 0xB2	; 178
   1514c:	90 e2       	ldi	r25, 0x20	; 32
   1514e:	a0 e0       	ldi	r26, 0x00	; 0
   15150:	ed b7       	in	r30, 0x3d	; 61
   15152:	fe b7       	in	r31, 0x3e	; 62
   15154:	81 83       	std	Z+1, r24	; 0x01
   15156:	92 83       	std	Z+2, r25	; 0x02
   15158:	a3 83       	std	Z+3, r26	; 0x03
   1515a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1515e:	63 e6       	ldi	r22, 0x63	; 99
   15160:	70 e1       	ldi	r23, 0x10	; 16
   15162:	c8 01       	movw	r24, r16
   15164:	83 52       	subi	r24, 0x23	; 35
   15166:	93 4e       	sbci	r25, 0xE3	; 227
   15168:	69 dc       	rcall	.-1838   	; 0x14a3c <SS80_display_extended_status>
   1516a:	87 01       	movw	r16, r14
   1516c:	07 5f       	subi	r16, 0xF7	; 247
   1516e:	1f 4f       	sbci	r17, 0xFF	; 255
   15170:	42 c0       	rjmp	.+132    	; 0x151f6 <SS80_Command_State+0x472>
   15172:	2c 34       	cpi	r18, 0x4C	; 76
   15174:	31 05       	cpc	r19, r1
   15176:	39 f4       	brne	.+14     	; 0x15186 <SS80_Command_State+0x402>
   15178:	80 73       	andi	r24, 0x30	; 48
   1517a:	99 27       	eor	r25, r25
   1517c:	89 2b       	or	r24, r25
   1517e:	d9 f1       	breq	.+118    	; 0x151f6 <SS80_Command_State+0x472>
   15180:	87 e9       	ldi	r24, 0x97	; 151
   15182:	90 e2       	ldi	r25, 0x20	; 32
   15184:	e4 ce       	rjmp	.-568    	; 0x14f4e <SS80_Command_State+0x1ca>
   15186:	2d 34       	cpi	r18, 0x4D	; 77
   15188:	31 05       	cpc	r19, r1
   1518a:	39 f4       	brne	.+14     	; 0x1519a <SS80_Command_State+0x416>
   1518c:	80 73       	andi	r24, 0x30	; 48
   1518e:	99 27       	eor	r25, r25
   15190:	89 2b       	or	r24, r25
   15192:	89 f1       	breq	.+98     	; 0x151f6 <SS80_Command_State+0x472>
   15194:	8e e7       	ldi	r24, 0x7E	; 126
   15196:	90 e2       	ldi	r25, 0x20	; 32
   15198:	da ce       	rjmp	.-588    	; 0x14f4e <SS80_Command_State+0x1ca>
   1519a:	2d 30       	cpi	r18, 0x0D	; 13
   1519c:	31 05       	cpc	r19, r1
   1519e:	69 f4       	brne	.+26     	; 0x151ba <SS80_Command_State+0x436>
   151a0:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   151a4:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   151a8:	23 e0       	ldi	r18, 0x03	; 3
   151aa:	30 e0       	ldi	r19, 0x00	; 0
   151ac:	31 83       	std	Z+1, r19	; 0x01
   151ae:	20 83       	st	Z, r18
   151b0:	85 ff       	sbrs	r24, 5
   151b2:	21 c0       	rjmp	.+66     	; 0x151f6 <SS80_Command_State+0x472>
   151b4:	87 e6       	ldi	r24, 0x67	; 103
   151b6:	90 e2       	ldi	r25, 0x20	; 32
   151b8:	ca ce       	rjmp	.-620    	; 0x14f4e <SS80_Command_State+0x1ca>
   151ba:	23 33       	cpi	r18, 0x33	; 51
   151bc:	31 05       	cpc	r19, r1
   151be:	51 f4       	brne	.+20     	; 0x151d4 <SS80_Command_State+0x450>
   151c0:	87 01       	movw	r16, r14
   151c2:	0c 5f       	subi	r16, 0xFC	; 252
   151c4:	1f 4f       	sbci	r17, 0xFF	; 255
   151c6:	80 73       	andi	r24, 0x30	; 48
   151c8:	99 27       	eor	r25, r25
   151ca:	89 2b       	or	r24, r25
   151cc:	a1 f0       	breq	.+40     	; 0x151f6 <SS80_Command_State+0x472>
   151ce:	84 e4       	ldi	r24, 0x44	; 68
   151d0:	90 e2       	ldi	r25, 0x20	; 32
   151d2:	bd ce       	rjmp	.-646    	; 0x14f4e <SS80_Command_State+0x1ca>
   151d4:	80 ff       	sbrs	r24, 0
   151d6:	28 c0       	rjmp	.+80     	; 0x15228 <SS80_Command_State+0x4a4>
   151d8:	ed b7       	in	r30, 0x3d	; 61
   151da:	fe b7       	in	r31, 0x3e	; 62
   151dc:	35 83       	std	Z+5, r19	; 0x05
   151de:	24 83       	std	Z+4, r18	; 0x04
   151e0:	84 e2       	ldi	r24, 0x24	; 36
   151e2:	90 e2       	ldi	r25, 0x20	; 32
   151e4:	a0 e0       	ldi	r26, 0x00	; 0
   151e6:	81 83       	std	Z+1, r24	; 0x01
   151e8:	92 83       	std	Z+2, r25	; 0x02
   151ea:	a3 83       	std	Z+3, r26	; 0x03
   151ec:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   151f0:	02 c0       	rjmp	.+4      	; 0x151f6 <SS80_Command_State+0x472>
   151f2:	78 01       	movw	r14, r16
   151f4:	43 ce       	rjmp	.-890    	; 0x14e7c <SS80_Command_State+0xf8>
   151f6:	8a 85       	ldd	r24, Y+10	; 0x0a
   151f8:	9b 85       	ldd	r25, Y+11	; 0x0b
   151fa:	08 17       	cp	r16, r24
   151fc:	19 07       	cpc	r17, r25
   151fe:	a1 f0       	breq	.+40     	; 0x15228 <SS80_Command_State+0x4a4>
   15200:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15204:	80 ff       	sbrs	r24, 0
   15206:	10 c0       	rjmp	.+32     	; 0x15228 <SS80_Command_State+0x4a4>
   15208:	2a 85       	ldd	r18, Y+10	; 0x0a
   1520a:	3b 85       	ldd	r19, Y+11	; 0x0b
   1520c:	ed b7       	in	r30, 0x3d	; 61
   1520e:	fe b7       	in	r31, 0x3e	; 62
   15210:	37 83       	std	Z+7, r19	; 0x07
   15212:	26 83       	std	Z+6, r18	; 0x06
   15214:	15 83       	std	Z+5, r17	; 0x05
   15216:	04 83       	std	Z+4, r16	; 0x04
   15218:	8c ee       	ldi	r24, 0xEC	; 236
   1521a:	9f e1       	ldi	r25, 0x1F	; 31
   1521c:	a0 e0       	ldi	r26, 0x00	; 0
   1521e:	81 83       	std	Z+1, r24	; 0x01
   15220:	92 83       	std	Z+2, r25	; 0x02
   15222:	a3 83       	std	Z+3, r26	; 0x03
   15224:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15228:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   1522c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   15230:	81 81       	ldd	r24, Z+1	; 0x01
   15232:	90 e0       	ldi	r25, 0x00	; 0
   15234:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
   15238:	88 85       	ldd	r24, Y+8	; 0x08
   1523a:	99 85       	ldd	r25, Y+9	; 0x09
   1523c:	88 27       	eor	r24, r24
   1523e:	90 7d       	andi	r25, 0xD0	; 208
   15240:	02 c0       	rjmp	.+4      	; 0x15246 <SS80_Command_State+0x4c2>
   15242:	80 e0       	ldi	r24, 0x00	; 0
   15244:	90 e0       	ldi	r25, 0x00	; 0
   15246:	66 96       	adiw	r28, 0x16	; 22
   15248:	0f b6       	in	r0, 0x3f	; 63
   1524a:	f8 94       	cli
   1524c:	de bf       	out	0x3e, r29	; 62
   1524e:	0f be       	out	0x3f, r0	; 63
   15250:	cd bf       	out	0x3d, r28	; 61
   15252:	df 91       	pop	r29
   15254:	cf 91       	pop	r28
   15256:	1f 91       	pop	r17
   15258:	0f 91       	pop	r16
   1525a:	ff 90       	pop	r15
   1525c:	ef 90       	pop	r14
   1525e:	cf 90       	pop	r12
   15260:	bf 90       	pop	r11
   15262:	af 90       	pop	r10
   15264:	8f 90       	pop	r8
   15266:	7f 90       	pop	r7
   15268:	6f 90       	pop	r6
   1526a:	4f 90       	pop	r4
   1526c:	3f 90       	pop	r3
   1526e:	2f 90       	pop	r2
   15270:	08 95       	ret

00015272 <SS80_cmd_seek>:
   15272:	a7 e0       	ldi	r26, 0x07	; 7
   15274:	b0 e0       	ldi	r27, 0x00	; 0
   15276:	ef e3       	ldi	r30, 0x3F	; 63
   15278:	f9 ea       	ldi	r31, 0xA9	; 169
   1527a:	0c 94 d1 e2 	jmp	0x1c5a2	; 0x1c5a2 <__prologue_saves__+0x4>
   1527e:	c0 91 64 19 	lds	r28, 0x1964	; 0x801964 <SS80s>
   15282:	d0 91 65 19 	lds	r29, 0x1965	; 0x801965 <SS80s+0x1>
   15286:	8f 80       	ldd	r8, Y+7	; 0x07
   15288:	98 84       	ldd	r9, Y+8	; 0x08
   1528a:	a9 84       	ldd	r10, Y+9	; 0x09
   1528c:	ba 84       	ldd	r11, Y+10	; 0x0a
   1528e:	00 91 66 19 	lds	r16, 0x1966	; 0x801966 <SS80p>
   15292:	10 91 67 19 	lds	r17, 0x1967	; 0x801967 <SS80p+0x1>
   15296:	f8 01       	movw	r30, r16
   15298:	c0 88       	ldd	r12, Z+16	; 0x10
   1529a:	d1 88       	ldd	r13, Z+17	; 0x11
   1529c:	e1 2c       	mov	r14, r1
   1529e:	f1 2c       	mov	r15, r1
   152a0:	6b 85       	ldd	r22, Y+11	; 0x0b
   152a2:	7c 85       	ldd	r23, Y+12	; 0x0c
   152a4:	8d 85       	ldd	r24, Y+13	; 0x0d
   152a6:	9e 85       	ldd	r25, Y+14	; 0x0e
   152a8:	a7 01       	movw	r20, r14
   152aa:	96 01       	movw	r18, r12
   152ac:	0e 94 62 e2 	call	0x1c4c4	; 0x1c4c4 <__udivmodsi4>
   152b0:	da 01       	movw	r26, r20
   152b2:	c9 01       	movw	r24, r18
   152b4:	88 0d       	add	r24, r8
   152b6:	99 1d       	adc	r25, r9
   152b8:	aa 1d       	adc	r26, r10
   152ba:	bb 1d       	adc	r27, r11
   152bc:	f8 01       	movw	r30, r16
   152be:	46 a0       	ldd	r4, Z+38	; 0x26
   152c0:	57 a0       	ldd	r5, Z+39	; 0x27
   152c2:	60 a4       	ldd	r6, Z+40	; 0x28
   152c4:	71 a4       	ldd	r7, Z+41	; 0x29
   152c6:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   152ca:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   152ce:	48 16       	cp	r4, r24
   152d0:	59 06       	cpc	r5, r25
   152d2:	6a 06       	cpc	r6, r26
   152d4:	7b 06       	cpc	r7, r27
   152d6:	f0 f4       	brcc	.+60     	; 0x15314 <SS80_cmd_seek+0xa2>
   152d8:	81 e0       	ldi	r24, 0x01	; 1
   152da:	8a 83       	std	Y+2, r24	; 0x02
   152dc:	8b 81       	ldd	r24, Y+3	; 0x03
   152de:	9c 81       	ldd	r25, Y+4	; 0x04
   152e0:	84 60       	ori	r24, 0x04	; 4
   152e2:	9c 83       	std	Y+4, r25	; 0x04
   152e4:	8b 83       	std	Y+3, r24	; 0x03
   152e6:	40 ff       	sbrs	r20, 0
   152e8:	31 c0       	rjmp	.+98     	; 0x1534c <SS80_cmd_seek+0xda>
   152ea:	a0 89       	ldd	r26, Z+16	; 0x10
   152ec:	b1 89       	ldd	r27, Z+17	; 0x11
   152ee:	a5 01       	movw	r20, r10
   152f0:	94 01       	movw	r18, r8
   152f2:	0e 94 af e2 	call	0x1c55e	; 0x1c55e <__muluhisi3>
   152f6:	ed b7       	in	r30, 0x3d	; 61
   152f8:	fe b7       	in	r31, 0x3e	; 62
   152fa:	64 83       	std	Z+4, r22	; 0x04
   152fc:	75 83       	std	Z+5, r23	; 0x05
   152fe:	86 83       	std	Z+6, r24	; 0x06
   15300:	97 83       	std	Z+7, r25	; 0x07
   15302:	89 ea       	ldi	r24, 0xA9	; 169
   15304:	9e e1       	ldi	r25, 0x1E	; 30
   15306:	a0 e0       	ldi	r26, 0x00	; 0
   15308:	81 83       	std	Z+1, r24	; 0x01
   1530a:	92 83       	std	Z+2, r25	; 0x02
   1530c:	a3 83       	std	Z+3, r26	; 0x03
   1530e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15312:	1c c0       	rjmp	.+56     	; 0x1534c <SS80_cmd_seek+0xda>
   15314:	ca 01       	movw	r24, r20
   15316:	80 72       	andi	r24, 0x20	; 32
   15318:	99 27       	eor	r25, r25
   1531a:	45 ff       	sbrs	r20, 5
   1531c:	19 c0       	rjmp	.+50     	; 0x15350 <SS80_cmd_seek+0xde>
   1531e:	a5 01       	movw	r20, r10
   15320:	94 01       	movw	r18, r8
   15322:	c7 01       	movw	r24, r14
   15324:	b6 01       	movw	r22, r12
   15326:	0e 94 20 e2 	call	0x1c440	; 0x1c440 <__mulsi3>
   1532a:	ed b7       	in	r30, 0x3d	; 61
   1532c:	fe b7       	in	r31, 0x3e	; 62
   1532e:	64 83       	std	Z+4, r22	; 0x04
   15330:	75 83       	std	Z+5, r23	; 0x05
   15332:	86 83       	std	Z+6, r24	; 0x06
   15334:	97 83       	std	Z+7, r25	; 0x07
   15336:	85 e9       	ldi	r24, 0x95	; 149
   15338:	9e e1       	ldi	r25, 0x1E	; 30
   1533a:	a0 e0       	ldi	r26, 0x00	; 0
   1533c:	81 83       	std	Z+1, r24	; 0x01
   1533e:	92 83       	std	Z+2, r25	; 0x02
   15340:	a3 83       	std	Z+3, r26	; 0x03
   15342:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15346:	80 e0       	ldi	r24, 0x00	; 0
   15348:	90 e0       	ldi	r25, 0x00	; 0
   1534a:	02 c0       	rjmp	.+4      	; 0x15350 <SS80_cmd_seek+0xde>
   1534c:	81 e0       	ldi	r24, 0x01	; 1
   1534e:	90 e0       	ldi	r25, 0x00	; 0
   15350:	cd b7       	in	r28, 0x3d	; 61
   15352:	de b7       	in	r29, 0x3e	; 62
   15354:	27 96       	adiw	r28, 0x07	; 7
   15356:	e0 e1       	ldi	r30, 0x10	; 16
   15358:	0c 94 ed e2 	jmp	0x1c5da	; 0x1c5da <__epilogue_restores__+0x4>

0001535c <SS80_locate_and_write>:
   1535c:	a3 e1       	ldi	r26, 0x13	; 19
   1535e:	b0 e0       	ldi	r27, 0x00	; 0
   15360:	e4 eb       	ldi	r30, 0xB4	; 180
   15362:	f9 ea       	ldi	r31, 0xA9	; 169
   15364:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
   15368:	00 91 64 19 	lds	r16, 0x1964	; 0x801964 <SS80s>
   1536c:	10 91 65 19 	lds	r17, 0x1965	; 0x801965 <SS80s+0x1>
   15370:	80 91 66 19 	lds	r24, 0x1966	; 0x801966 <SS80p>
   15374:	90 91 67 19 	lds	r25, 0x1967	; 0x801967 <SS80p+0x1>
   15378:	fc 01       	movw	r30, r24
   1537a:	a0 89       	ldd	r26, Z+16	; 0x10
   1537c:	b1 89       	ldd	r27, Z+17	; 0x11
   1537e:	f8 01       	movw	r30, r16
   15380:	27 81       	ldd	r18, Z+7	; 0x07
   15382:	30 85       	ldd	r19, Z+8	; 0x08
   15384:	41 85       	ldd	r20, Z+9	; 0x09
   15386:	52 85       	ldd	r21, Z+10	; 0x0a
   15388:	0e 94 af e2 	call	0x1c55e	; 0x1c55e <__muluhisi3>
   1538c:	4b 01       	movw	r8, r22
   1538e:	5c 01       	movw	r10, r24
   15390:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15394:	85 ff       	sbrs	r24, 5
   15396:	16 c0       	rjmp	.+44     	; 0x153c4 <SS80_locate_and_write+0x68>
   15398:	83 85       	ldd	r24, Z+11	; 0x0b
   1539a:	94 85       	ldd	r25, Z+12	; 0x0c
   1539c:	a5 85       	ldd	r26, Z+13	; 0x0d
   1539e:	b6 85       	ldd	r27, Z+14	; 0x0e
   153a0:	ed b7       	in	r30, 0x3d	; 61
   153a2:	fe b7       	in	r31, 0x3e	; 62
   153a4:	80 87       	std	Z+8, r24	; 0x08
   153a6:	91 87       	std	Z+9, r25	; 0x09
   153a8:	a2 87       	std	Z+10, r26	; 0x0a
   153aa:	b3 87       	std	Z+11, r27	; 0x0b
   153ac:	84 82       	std	Z+4, r8	; 0x04
   153ae:	95 82       	std	Z+5, r9	; 0x05
   153b0:	a6 82       	std	Z+6, r10	; 0x06
   153b2:	b7 82       	std	Z+7, r11	; 0x07
   153b4:	8c e2       	ldi	r24, 0x2C	; 44
   153b6:	94 e2       	ldi	r25, 0x24	; 36
   153b8:	a0 e0       	ldi	r26, 0x00	; 0
   153ba:	81 83       	std	Z+1, r24	; 0x01
   153bc:	92 83       	std	Z+2, r25	; 0x02
   153be:	a3 83       	std	Z+3, r26	; 0x03
   153c0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   153c4:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   153c8:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   153cc:	12 82       	std	Z+2, r1	; 0x02
   153ce:	54 98       	cbi	0x0a, 4	; 10
   153d0:	4c 99       	sbic	0x09, 4	; 9
   153d2:	03 c0       	rjmp	.+6      	; 0x153da <SS80_locate_and_write+0x7e>
   153d4:	80 e0       	ldi	r24, 0x00	; 0
   153d6:	90 e1       	ldi	r25, 0x10	; 16
   153d8:	4f c1       	rjmp	.+670    	; 0x15678 <SS80_locate_and_write+0x31c>
   153da:	4b df       	rcall	.-362    	; 0x15272 <SS80_cmd_seek>
   153dc:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   153e0:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   153e4:	89 2b       	or	r24, r25
   153e6:	41 f0       	breq	.+16     	; 0x153f8 <SS80_locate_and_write+0x9c>
   153e8:	83 81       	ldd	r24, Z+3	; 0x03
   153ea:	94 81       	ldd	r25, Z+4	; 0x04
   153ec:	82 60       	ori	r24, 0x02	; 2
   153ee:	94 83       	std	Z+4, r25	; 0x04
   153f0:	83 83       	std	Z+3, r24	; 0x03
   153f2:	01 e0       	ldi	r16, 0x01	; 1
   153f4:	10 e0       	ldi	r17, 0x00	; 0
   153f6:	02 c0       	rjmp	.+4      	; 0x153fc <SS80_locate_and_write+0xa0>
   153f8:	00 e0       	ldi	r16, 0x00	; 0
   153fa:	10 e0       	ldi	r17, 0x00	; 0
   153fc:	23 84       	ldd	r2, Z+11	; 0x0b
   153fe:	34 84       	ldd	r3, Z+12	; 0x0c
   15400:	1d 86       	std	Y+13, r1	; 0x0d
   15402:	1c 86       	std	Y+12, r1	; 0x0c
   15404:	41 2c       	mov	r4, r1
   15406:	51 2c       	mov	r5, r1
   15408:	32 01       	movw	r6, r4
   1540a:	8f ed       	ldi	r24, 0xDF	; 223
   1540c:	93 e2       	ldi	r25, 0x23	; 35
   1540e:	9c 01       	movw	r18, r24
   15410:	40 e0       	ldi	r20, 0x00	; 0
   15412:	2e 87       	std	Y+14, r18	; 0x0e
   15414:	3f 87       	std	Y+15, r19	; 0x0f
   15416:	48 8b       	std	Y+16, r20	; 0x10
   15418:	85 e0       	ldi	r24, 0x05	; 5
   1541a:	94 e2       	ldi	r25, 0x24	; 36
   1541c:	9c 01       	movw	r18, r24
   1541e:	40 e0       	ldi	r20, 0x00	; 0
   15420:	29 8b       	std	Y+17, r18	; 0x11
   15422:	3a 8b       	std	Y+18, r19	; 0x12
   15424:	4b 8b       	std	Y+19, r20	; 0x13
   15426:	12 14       	cp	r1, r2
   15428:	13 04       	cpc	r1, r3
   1542a:	0c f0       	brlt	.+2      	; 0x1542e <SS80_locate_and_write+0xd2>
   1542c:	f5 c0       	rjmp	.+490    	; 0x15618 <SS80_locate_and_write+0x2bc>
   1542e:	54 98       	cbi	0x0a, 4	; 10
   15430:	4c 9b       	sbis	0x09, 4	; 9
   15432:	d0 cf       	rjmp	.-96     	; 0x153d4 <SS80_locate_and_write+0x78>
   15434:	71 01       	movw	r14, r2
   15436:	31 e0       	ldi	r19, 0x01	; 1
   15438:	23 16       	cp	r2, r19
   1543a:	33 06       	cpc	r3, r19
   1543c:	1c f0       	brlt	.+6      	; 0x15444 <SS80_locate_and_write+0xe8>
   1543e:	e1 2c       	mov	r14, r1
   15440:	ff 24       	eor	r15, r15
   15442:	f3 94       	inc	r15
   15444:	ed ed       	ldi	r30, 0xDD	; 221
   15446:	fc e1       	ldi	r31, 0x1C	; 28
   15448:	20 e0       	ldi	r18, 0x00	; 0
   1544a:	32 e0       	ldi	r19, 0x02	; 2
   1544c:	11 92       	st	Z+, r1
   1544e:	21 50       	subi	r18, 0x01	; 1
   15450:	30 40       	sbci	r19, 0x00	; 0
   15452:	e1 f7       	brne	.-8      	; 0x1544c <SS80_locate_and_write+0xf0>
   15454:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15458:	87 fd       	sbrc	r24, 7
   1545a:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   1545e:	ae 01       	movw	r20, r28
   15460:	44 5f       	subi	r20, 0xF4	; 244
   15462:	5f 4f       	sbci	r21, 0xFF	; 255
   15464:	b7 01       	movw	r22, r14
   15466:	8d ed       	ldi	r24, 0xDD	; 221
   15468:	9c e1       	ldi	r25, 0x1C	; 28
   1546a:	0e 94 89 8b 	call	0x11712	; 0x11712 <gpib_read_str>
   1546e:	6c 01       	movw	r12, r24
   15470:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15474:	87 ff       	sbrs	r24, 7
   15476:	04 c0       	rjmp	.+8      	; 0x15480 <SS80_locate_and_write+0x124>
   15478:	8f e7       	ldi	r24, 0x7F	; 127
   1547a:	90 e1       	ldi	r25, 0x10	; 16
   1547c:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   15480:	ce 14       	cp	r12, r14
   15482:	df 04       	cpc	r13, r15
   15484:	39 f1       	breq	.+78     	; 0x154d4 <SS80_locate_and_write+0x178>
   15486:	8c 85       	ldd	r24, Y+12	; 0x0c
   15488:	9d 85       	ldd	r25, Y+13	; 0x0d
   1548a:	9c 01       	movw	r18, r24
   1548c:	22 27       	eor	r18, r18
   1548e:	30 7d       	andi	r19, 0xD0	; 208
   15490:	23 2b       	or	r18, r19
   15492:	d1 f0       	breq	.+52     	; 0x154c8 <SS80_locate_and_write+0x16c>
   15494:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15498:	80 ff       	sbrs	r24, 0
   1549a:	0a c0       	rjmp	.+20     	; 0x154b0 <SS80_locate_and_write+0x154>
   1549c:	89 e1       	ldi	r24, 0x19	; 25
   1549e:	94 e2       	ldi	r25, 0x24	; 36
   154a0:	a0 e0       	ldi	r26, 0x00	; 0
   154a2:	ed b7       	in	r30, 0x3d	; 61
   154a4:	fe b7       	in	r31, 0x3e	; 62
   154a6:	81 83       	std	Z+1, r24	; 0x01
   154a8:	92 83       	std	Z+2, r25	; 0x02
   154aa:	a3 83       	std	Z+3, r26	; 0x03
   154ac:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   154b0:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   154b4:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   154b8:	83 81       	ldd	r24, Z+3	; 0x03
   154ba:	94 81       	ldd	r25, Z+4	; 0x04
   154bc:	82 60       	ori	r24, 0x02	; 2
   154be:	94 83       	std	Z+4, r25	; 0x04
   154c0:	83 83       	std	Z+3, r24	; 0x03
   154c2:	81 e0       	ldi	r24, 0x01	; 1
   154c4:	82 83       	std	Z+2, r24	; 0x02
   154c6:	99 c0       	rjmp	.+306    	; 0x155fa <SS80_locate_and_write+0x29e>
   154c8:	c1 14       	cp	r12, r1
   154ca:	d1 04       	cpc	r13, r1
   154cc:	09 f0       	breq	.+2      	; 0x154d0 <SS80_locate_and_write+0x174>
   154ce:	d0 c0       	rjmp	.+416    	; 0x15670 <SS80_locate_and_write+0x314>
   154d0:	90 fd       	sbrc	r25, 0
   154d2:	93 c0       	rjmp	.+294    	; 0x155fa <SS80_locate_and_write+0x29e>
   154d4:	01 15       	cp	r16, r1
   154d6:	11 05       	cpc	r17, r1
   154d8:	09 f0       	breq	.+2      	; 0x154dc <SS80_locate_and_write+0x180>
   154da:	84 c0       	rjmp	.+264    	; 0x155e4 <SS80_locate_and_write+0x288>
   154dc:	c1 14       	cp	r12, r1
   154de:	d1 04       	cpc	r13, r1
   154e0:	09 f4       	brne	.+2      	; 0x154e4 <SS80_locate_and_write+0x188>
   154e2:	82 c0       	rjmp	.+260    	; 0x155e8 <SS80_locate_and_write+0x28c>
   154e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   154e8:	86 fd       	sbrc	r24, 6
   154ea:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   154ee:	e0 90 64 19 	lds	r14, 0x1964	; 0x801964 <SS80s>
   154f2:	f0 90 65 19 	lds	r15, 0x1965	; 0x801965 <SS80s+0x1>
   154f6:	f3 e0       	ldi	r31, 0x03	; 3
   154f8:	ef 0e       	add	r14, r31
   154fa:	f1 1c       	adc	r15, r1
   154fc:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   15500:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   15504:	86 01       	movw	r16, r12
   15506:	2d ed       	ldi	r18, 0xDD	; 221
   15508:	3c e1       	ldi	r19, 0x1C	; 28
   1550a:	b5 01       	movw	r22, r10
   1550c:	a4 01       	movw	r20, r8
   1550e:	82 81       	ldd	r24, Z+2	; 0x02
   15510:	93 81       	ldd	r25, Z+3	; 0x03
   15512:	0e 94 82 85 	call	0x10b04	; 0x10b04 <dbf_open_write>
   15516:	7c 01       	movw	r14, r24
   15518:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1551c:	86 ff       	sbrs	r24, 6
   1551e:	04 c0       	rjmp	.+8      	; 0x15528 <SS80_locate_and_write+0x1cc>
   15520:	8a e8       	ldi	r24, 0x8A	; 138
   15522:	90 e1       	ldi	r25, 0x10	; 16
   15524:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   15528:	ce 14       	cp	r12, r14
   1552a:	df 04       	cpc	r13, r15
   1552c:	39 f1       	breq	.+78     	; 0x1557c <SS80_locate_and_write+0x220>
   1552e:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   15532:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   15536:	83 81       	ldd	r24, Z+3	; 0x03
   15538:	94 81       	ldd	r25, Z+4	; 0x04
   1553a:	82 60       	ori	r24, 0x02	; 2
   1553c:	94 83       	std	Z+4, r25	; 0x04
   1553e:	83 83       	std	Z+3, r24	; 0x03
   15540:	0e 94 8b 70 	call	0xe116	; 0xe116 <mmc_wp_status>
   15544:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   15548:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   1554c:	89 2b       	or	r24, r25
   1554e:	29 f0       	breq	.+10     	; 0x1555a <SS80_locate_and_write+0x1fe>
   15550:	83 81       	ldd	r24, Z+3	; 0x03
   15552:	94 81       	ldd	r25, Z+4	; 0x04
   15554:	88 60       	ori	r24, 0x08	; 8
   15556:	94 83       	std	Z+4, r25	; 0x04
   15558:	83 83       	std	Z+3, r24	; 0x03
   1555a:	21 e0       	ldi	r18, 0x01	; 1
   1555c:	22 83       	std	Z+2, r18	; 0x02
   1555e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15562:	80 ff       	sbrs	r24, 0
   15564:	27 c0       	rjmp	.+78     	; 0x155b4 <SS80_locate_and_write+0x258>
   15566:	89 89       	ldd	r24, Y+17	; 0x11
   15568:	9a 89       	ldd	r25, Y+18	; 0x12
   1556a:	ab 89       	ldd	r26, Y+19	; 0x13
   1556c:	ed b7       	in	r30, 0x3d	; 61
   1556e:	fe b7       	in	r31, 0x3e	; 62
   15570:	81 83       	std	Z+1, r24	; 0x01
   15572:	92 83       	std	Z+2, r25	; 0x02
   15574:	a3 83       	std	Z+3, r26	; 0x03
   15576:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1557a:	1c c0       	rjmp	.+56     	; 0x155b4 <SS80_locate_and_write+0x258>
   1557c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15580:	85 ff       	sbrs	r24, 5
   15582:	0c c0       	rjmp	.+24     	; 0x1559c <SS80_locate_and_write+0x240>
   15584:	ed b7       	in	r30, 0x3d	; 61
   15586:	fe b7       	in	r31, 0x3e	; 62
   15588:	d5 82       	std	Z+5, r13	; 0x05
   1558a:	c4 82       	std	Z+4, r12	; 0x04
   1558c:	2e 85       	ldd	r18, Y+14	; 0x0e
   1558e:	3f 85       	ldd	r19, Y+15	; 0x0f
   15590:	48 89       	ldd	r20, Y+16	; 0x10
   15592:	21 83       	std	Z+1, r18	; 0x01
   15594:	32 83       	std	Z+2, r19	; 0x02
   15596:	43 83       	std	Z+3, r20	; 0x03
   15598:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1559c:	c6 01       	movw	r24, r12
   1559e:	0d 2c       	mov	r0, r13
   155a0:	00 0c       	add	r0, r0
   155a2:	aa 0b       	sbc	r26, r26
   155a4:	bb 0b       	sbc	r27, r27
   155a6:	88 0e       	add	r8, r24
   155a8:	99 1e       	adc	r9, r25
   155aa:	aa 1e       	adc	r10, r26
   155ac:	bb 1e       	adc	r11, r27
   155ae:	00 e0       	ldi	r16, 0x00	; 0
   155b0:	10 e0       	ldi	r17, 0x00	; 0
   155b2:	05 c0       	rjmp	.+10     	; 0x155be <SS80_locate_and_write+0x262>
   155b4:	ec 14       	cp	r14, r12
   155b6:	fd 04       	cpc	r15, r13
   155b8:	64 f0       	brlt	.+24     	; 0x155d2 <SS80_locate_and_write+0x276>
   155ba:	01 e0       	ldi	r16, 0x01	; 1
   155bc:	10 e0       	ldi	r17, 0x00	; 0
   155be:	c7 01       	movw	r24, r14
   155c0:	0f 2c       	mov	r0, r15
   155c2:	00 0c       	add	r0, r0
   155c4:	aa 0b       	sbc	r26, r26
   155c6:	bb 0b       	sbc	r27, r27
   155c8:	48 0e       	add	r4, r24
   155ca:	59 1e       	adc	r5, r25
   155cc:	6a 1e       	adc	r6, r26
   155ce:	7b 1e       	adc	r7, r27
   155d0:	0b c0       	rjmp	.+22     	; 0x155e8 <SS80_locate_and_write+0x28c>
   155d2:	c6 01       	movw	r24, r12
   155d4:	0d 2c       	mov	r0, r13
   155d6:	00 0c       	add	r0, r0
   155d8:	aa 0b       	sbc	r26, r26
   155da:	bb 0b       	sbc	r27, r27
   155dc:	48 0e       	add	r4, r24
   155de:	59 1e       	adc	r5, r25
   155e0:	6a 1e       	adc	r6, r26
   155e2:	7b 1e       	adc	r7, r27
   155e4:	01 e0       	ldi	r16, 0x01	; 1
   155e6:	10 e0       	ldi	r17, 0x00	; 0
   155e8:	2c 18       	sub	r2, r12
   155ea:	3d 08       	sbc	r3, r13
///
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
   155ec:	8c 85       	ldd	r24, Y+12	; 0x0c
   155ee:	9d 85       	ldd	r25, Y+13	; 0x0d
   155f0:	90 ff       	sbrs	r25, 0
   155f2:	19 cf       	rjmp	.-462    	; 0x15426 <SS80_locate_and_write+0xca>
   155f4:	12 14       	cp	r1, r2
   155f6:	13 04       	cpc	r1, r3
   155f8:	7c f4       	brge	.+30     	; 0x15618 <SS80_locate_and_write+0x2bc>
   155fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   155fe:	80 ff       	sbrs	r24, 0
   15600:	1d c0       	rjmp	.+58     	; 0x1563c <SS80_locate_and_write+0x2e0>
   15602:	87 eb       	ldi	r24, 0xB7	; 183
   15604:	93 e2       	ldi	r25, 0x23	; 35
   15606:	a0 e0       	ldi	r26, 0x00	; 0
   15608:	ed b7       	in	r30, 0x3d	; 61
   1560a:	fe b7       	in	r31, 0x3e	; 62
   1560c:	81 83       	std	Z+1, r24	; 0x01
   1560e:	92 83       	std	Z+2, r25	; 0x02
   15610:	a3 83       	std	Z+3, r26	; 0x03
   15612:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15616:	12 c0       	rjmp	.+36     	; 0x1563c <SS80_locate_and_write+0x2e0>
   15618:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1561c:	85 ff       	sbrs	r24, 5
   1561e:	0e c0       	rjmp	.+28     	; 0x1563c <SS80_locate_and_write+0x2e0>
   15620:	ed b7       	in	r30, 0x3d	; 61
   15622:	fe b7       	in	r31, 0x3e	; 62
   15624:	44 82       	std	Z+4, r4	; 0x04
   15626:	55 82       	std	Z+5, r5	; 0x05
   15628:	66 82       	std	Z+6, r6	; 0x06
   1562a:	77 82       	std	Z+7, r7	; 0x07
   1562c:	8c e8       	ldi	r24, 0x8C	; 140
   1562e:	93 e2       	ldi	r25, 0x23	; 35
   15630:	a0 e0       	ldi	r26, 0x00	; 0
   15632:	81 83       	std	Z+1, r24	; 0x01
   15634:	92 83       	std	Z+2, r25	; 0x02
   15636:	a3 83       	std	Z+3, r26	; 0x03
   15638:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1563c:	00 91 64 19 	lds	r16, 0x1964	; 0x801964 <SS80s>
   15640:	10 91 65 19 	lds	r17, 0x1965	; 0x801965 <SS80s+0x1>
   15644:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   15648:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   1564c:	20 89       	ldd	r18, Z+16	; 0x10
   1564e:	31 89       	ldd	r19, Z+17	; 0x11
   15650:	40 e0       	ldi	r20, 0x00	; 0
   15652:	50 e0       	ldi	r21, 0x00	; 0
   15654:	c5 01       	movw	r24, r10
   15656:	b4 01       	movw	r22, r8
   15658:	0e 94 62 e2 	call	0x1c4c4	; 0x1c4c4 <__udivmodsi4>
   1565c:	f8 01       	movw	r30, r16
   1565e:	27 83       	std	Z+7, r18	; 0x07
   15660:	30 87       	std	Z+8, r19	; 0x08
   15662:	41 87       	std	Z+9, r20	; 0x09
   15664:	52 87       	std	Z+10, r21	; 0x0a
   15666:	8c 85       	ldd	r24, Y+12	; 0x0c
   15668:	9d 85       	ldd	r25, Y+13	; 0x0d
   1566a:	88 27       	eor	r24, r24
   1566c:	90 7d       	andi	r25, 0xD0	; 208
   1566e:	04 c0       	rjmp	.+8      	; 0x15678 <SS80_locate_and_write+0x31c>
   15670:	01 2b       	or	r16, r17
   15672:	09 f4       	brne	.+2      	; 0x15676 <SS80_locate_and_write+0x31a>
   15674:	37 cf       	rjmp	.-402    	; 0x154e4 <SS80_locate_and_write+0x188>
   15676:	b6 cf       	rjmp	.-148    	; 0x155e4 <SS80_locate_and_write+0x288>
   15678:	63 96       	adiw	r28, 0x13	; 19
   1567a:	e2 e1       	ldi	r30, 0x12	; 18
   1567c:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

00015680 <SS80_Report>:
   15680:	a8 e0       	ldi	r26, 0x08	; 8
   15682:	b0 e0       	ldi	r27, 0x00	; 0
   15684:	e6 e4       	ldi	r30, 0x46	; 70
   15686:	fb ea       	ldi	r31, 0xAB	; 171
    return ( uart_rx_count( uart ) );
   15688:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
   1568c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   15690:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   15694:	82 81       	ldd	r24, Z+2	; 0x02
   15696:	88 87       	std	Y+8, r24	; 0x08
   15698:	80 e0       	ldi	r24, 0x00	; 0
   1569a:	91 e0       	ldi	r25, 0x01	; 1
   1569c:	9f 83       	std	Y+7, r25	; 0x07
   1569e:	8e 83       	std	Y+6, r24	; 0x06
   156a0:	ae 01       	movw	r20, r28
   156a2:	4a 5f       	subi	r20, 0xFA	; 250
   156a4:	5f 4f       	sbci	r21, 0xFF	; 255
   156a6:	61 e0       	ldi	r22, 0x01	; 1
   156a8:	70 e0       	ldi	r23, 0x00	; 0
   156aa:	ce 01       	movw	r24, r28
   156ac:	08 96       	adiw	r24, 0x08	; 8
   156ae:	0e 94 2b 8c 	call	0x11856	; 0x11856 <gpib_write_str>
   156b2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   156b6:	01 97       	sbiw	r24, 0x01	; 1
   156b8:	89 f0       	breq	.+34     	; 0x156dc <SS80_Report+0x5c>
   156ba:	20 ff       	sbrs	r18, 0
   156bc:	0a c0       	rjmp	.+20     	; 0x156d2 <SS80_Report+0x52>
   156be:	8b e7       	ldi	r24, 0x7B	; 123
   156c0:	9e e1       	ldi	r25, 0x1E	; 30
   156c2:	a0 e0       	ldi	r26, 0x00	; 0
   156c4:	ed b7       	in	r30, 0x3d	; 61
   156c6:	fe b7       	in	r31, 0x3e	; 62
   156c8:	81 83       	std	Z+1, r24	; 0x01
   156ca:	92 83       	std	Z+2, r25	; 0x02
   156cc:	a3 83       	std	Z+3, r26	; 0x03
   156ce:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   156d2:	8e 81       	ldd	r24, Y+6	; 0x06
   156d4:	9f 81       	ldd	r25, Y+7	; 0x07
   156d6:	88 27       	eor	r24, r24
   156d8:	90 7d       	andi	r25, 0xD0	; 208
   156da:	1b c0       	rjmp	.+54     	; 0x15712 <SS80_Report+0x92>
   156dc:	25 ff       	sbrs	r18, 5
   156de:	12 c0       	rjmp	.+36     	; 0x15704 <SS80_Report+0x84>
   156e0:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   156e4:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   156e8:	82 81       	ldd	r24, Z+2	; 0x02
   156ea:	90 e0       	ldi	r25, 0x00	; 0
   156ec:	ed b7       	in	r30, 0x3d	; 61
   156ee:	fe b7       	in	r31, 0x3e	; 62
   156f0:	95 83       	std	Z+5, r25	; 0x05
   156f2:	84 83       	std	Z+4, r24	; 0x04
   156f4:	88 e6       	ldi	r24, 0x68	; 104
   156f6:	9e e1       	ldi	r25, 0x1E	; 30
   156f8:	a0 e0       	ldi	r26, 0x00	; 0
   156fa:	81 83       	std	Z+1, r24	; 0x01
   156fc:	92 83       	std	Z+2, r25	; 0x02
   156fe:	a3 83       	std	Z+3, r26	; 0x03
   15700:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15704:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   15708:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   1570c:	12 82       	std	Z+2, r1	; 0x02
   1570e:	80 e0       	ldi	r24, 0x00	; 0
   15710:	90 e0       	ldi	r25, 0x00	; 0
   15712:	28 96       	adiw	r28, 0x08	; 8
   15714:	e2 e0       	ldi	r30, 0x02	; 2
   15716:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

0001571a <Clear_Common>:
   1571a:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   1571e:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   15722:	25 81       	ldd	r18, Z+5	; 0x05
   15724:	30 e0       	ldi	r19, 0x00	; 0
   15726:	28 17       	cp	r18, r24
   15728:	39 07       	cpc	r19, r25
   1572a:	19 f0       	breq	.+6      	; 0x15732 <Clear_Common+0x18>
   1572c:	0f 97       	sbiw	r24, 0x0f	; 15
   1572e:	99 f4       	brne	.+38     	; 0x15756 <Clear_Common+0x3c>
   15730:	03 c0       	rjmp	.+6      	; 0x15738 <Clear_Common+0x1e>
   15732:	2f 30       	cpi	r18, 0x0F	; 15
   15734:	31 05       	cpc	r19, r1
   15736:	09 f4       	brne	.+2      	; 0x1573a <Clear_Common+0x20>
   15738:	15 82       	std	Z+5, r1	; 0x05
   1573a:	16 82       	std	Z+6, r1	; 0x06
   1573c:	17 82       	std	Z+7, r1	; 0x07
   1573e:	10 86       	std	Z+8, r1	; 0x08
   15740:	11 86       	std	Z+9, r1	; 0x09
   15742:	12 86       	std	Z+10, r1	; 0x0a
   15744:	13 86       	std	Z+11, r1	; 0x0b
   15746:	14 86       	std	Z+12, r1	; 0x0c
   15748:	15 86       	std	Z+13, r1	; 0x0d
   1574a:	16 86       	std	Z+14, r1	; 0x0e
   1574c:	11 82       	std	Z+1, r1	; 0x01
   1574e:	10 82       	st	Z, r1
   15750:	14 82       	std	Z+4, r1	; 0x04
   15752:	13 82       	std	Z+3, r1	; 0x03
   15754:	12 82       	std	Z+2, r1	; 0x02
   15756:	08 95       	ret

00015758 <SS80_init>:
   15758:	a5 e0       	ldi	r26, 0x05	; 5
   1575a:	b0 e0       	ldi	r27, 0x00	; 0
   1575c:	e2 eb       	ldi	r30, 0xB2	; 178
   1575e:	fb ea       	ldi	r31, 0xAB	; 171
   15760:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
   15764:	00 ec       	ldi	r16, 0xC0	; 192
   15766:	10 e2       	ldi	r17, 0x20	; 32
   15768:	cb e0       	ldi	r28, 0x0B	; 11
   1576a:	d0 e0       	ldi	r29, 0x00	; 0
   1576c:	82 e0       	ldi	r24, 0x02	; 2
   1576e:	f8 2e       	mov	r15, r24
   15770:	85 e3       	ldi	r24, 0x35	; 53
   15772:	95 e2       	ldi	r25, 0x25	; 37
   15774:	6c 01       	movw	r12, r24
   15776:	e1 2c       	mov	r14, r1
   15778:	f8 01       	movw	r30, r16
   1577a:	80 81       	ld	r24, Z
   1577c:	83 30       	cpi	r24, 0x03	; 3
   1577e:	29 f5       	brne	.+74     	; 0x157ca <SS80_init+0x72>
   15780:	ce 01       	movw	r24, r28
   15782:	0e 94 f9 97 	call	0x12ff2	; 0x12ff2 <set_active_device>
   15786:	89 2b       	or	r24, r25
   15788:	01 f1       	breq	.+64     	; 0x157ca <SS80_init+0x72>
   1578a:	8f e0       	ldi	r24, 0x0F	; 15
   1578c:	90 e0       	ldi	r25, 0x00	; 0
   1578e:	c5 df       	rcall	.-118    	; 0x1571a <Clear_Common>
   15790:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   15794:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   15798:	f2 82       	std	Z+2, r15	; 0x02
   1579a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1579e:	85 ff       	sbrs	r24, 5
   157a0:	0c c0       	rjmp	.+24     	; 0x157ba <SS80_init+0x62>
   157a2:	f8 01       	movw	r30, r16
   157a4:	81 81       	ldd	r24, Z+1	; 0x01
   157a6:	90 e0       	ldi	r25, 0x00	; 0
   157a8:	ed b7       	in	r30, 0x3d	; 61
   157aa:	fe b7       	in	r31, 0x3e	; 62
   157ac:	95 83       	std	Z+5, r25	; 0x05
   157ae:	84 83       	std	Z+4, r24	; 0x04
   157b0:	c1 82       	std	Z+1, r12	; 0x01
   157b2:	d2 82       	std	Z+2, r13	; 0x02
   157b4:	e3 82       	std	Z+3, r14	; 0x03
   157b6:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   157ba:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   157be:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   157c2:	81 81       	ldd	r24, Z+1	; 0x01
   157c4:	90 e0       	ldi	r25, 0x00	; 0
   157c6:	0e 94 d1 86 	call	0x10da2	; 0x10da2 <gpib_disable_PPR>
   157ca:	21 97       	sbiw	r28, 0x01	; 1
   157cc:	0b 52       	subi	r16, 0x2B	; 43
   157ce:	11 09       	sbc	r17, r1
   157d0:	cf 3f       	cpi	r28, 0xFF	; 255
   157d2:	ff ef       	ldi	r31, 0xFF	; 255
   157d4:	df 07       	cpc	r29, r31
   157d6:	81 f6       	brne	.-96     	; 0x15778 <SS80_init+0x20>
   157d8:	cd b7       	in	r28, 0x3d	; 61
   157da:	de b7       	in	r29, 0x3e	; 62
   157dc:	25 96       	adiw	r28, 0x05	; 5
   157de:	e8 e0       	ldi	r30, 0x08	; 8
   157e0:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

000157e4 <SS80_Channel_Independent_Clear>:
   157e4:	9a df       	rcall	.-204    	; 0x1571a <Clear_Common>
   157e6:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   157ea:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   157ee:	81 81       	ldd	r24, Z+1	; 0x01
   157f0:	90 e0       	ldi	r25, 0x00	; 0
   157f2:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
   157f6:	80 e0       	ldi	r24, 0x00	; 0
   157f8:	90 e0       	ldi	r25, 0x00	; 0
   157fa:	08 95       	ret

000157fc <SS80_Universal_Device_Clear>:
   157fc:	8f e0       	ldi	r24, 0x0F	; 15
   157fe:	90 e0       	ldi	r25, 0x00	; 0
   15800:	8c df       	rcall	.-232    	; 0x1571a <Clear_Common>
   15802:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   15806:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   1580a:	81 81       	ldd	r24, Z+1	; 0x01
   1580c:	90 e0       	ldi	r25, 0x00	; 0
   1580e:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
   15812:	80 e0       	ldi	r24, 0x00	; 0
   15814:	90 e0       	ldi	r25, 0x00	; 0
   15816:	08 95       	ret

00015818 <SS80_Selected_Device_Clear>:
   15818:	cf 93       	push	r28
   1581a:	df 93       	push	r29
   1581c:	00 d0       	rcall	.+0      	; 0x1581e <SS80_Selected_Device_Clear+0x6>
   1581e:	1f 92       	push	r1
   15820:	ec 01       	movw	r28, r24
   15822:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15826:	85 ff       	sbrs	r24, 5
   15828:	0a c0       	rjmp	.+20     	; 0x1583e <SS80_Selected_Device_Clear+0x26>
   1582a:	8c e5       	ldi	r24, 0x5C	; 92
   1582c:	9e e1       	ldi	r25, 0x1E	; 30
   1582e:	a0 e0       	ldi	r26, 0x00	; 0
   15830:	ed b7       	in	r30, 0x3d	; 61
   15832:	fe b7       	in	r31, 0x3e	; 62
   15834:	81 83       	std	Z+1, r24	; 0x01
   15836:	92 83       	std	Z+2, r25	; 0x02
   15838:	a3 83       	std	Z+3, r26	; 0x03
   1583a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1583e:	ce 01       	movw	r24, r28
   15840:	6c df       	rcall	.-296    	; 0x1571a <Clear_Common>
   15842:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   15846:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   1584a:	81 81       	ldd	r24, Z+1	; 0x01
   1584c:	90 e0       	ldi	r25, 0x00	; 0
   1584e:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
   15852:	80 e0       	ldi	r24, 0x00	; 0
   15854:	90 e0       	ldi	r25, 0x00	; 0
   15856:	cd b7       	in	r28, 0x3d	; 61
   15858:	de b7       	in	r29, 0x3e	; 62
   1585a:	23 96       	adiw	r28, 0x03	; 3
   1585c:	e2 e0       	ldi	r30, 0x02	; 2
   1585e:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00015862 <SS80_Amigo_Clear>:
   15862:	a6 e0       	ldi	r26, 0x06	; 6
   15864:	b0 e0       	ldi	r27, 0x00	; 0
   15866:	e7 e3       	ldi	r30, 0x37	; 55
   15868:	fc ea       	ldi	r31, 0xAC	; 172
   1586a:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
   1586e:	1d 82       	std	Y+5, r1	; 0x05
   15870:	1c 82       	std	Y+4, r1	; 0x04
   15872:	ae 01       	movw	r20, r28
   15874:	4c 5f       	subi	r20, 0xFC	; 252
   15876:	5f 4f       	sbci	r21, 0xFF	; 255
   15878:	61 e0       	ldi	r22, 0x01	; 1
   1587a:	70 e0       	ldi	r23, 0x00	; 0
   1587c:	ce 01       	movw	r24, r28
   1587e:	06 96       	adiw	r24, 0x06	; 6
   15880:	0e 94 89 8b 	call	0x11712	; 0x11712 <gpib_read_str>
   15884:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15888:	01 97       	sbiw	r24, 0x01	; 1
   1588a:	89 f0       	breq	.+34     	; 0x158ae <SS80_Amigo_Clear+0x4c>
   1588c:	20 ff       	sbrs	r18, 0
   1588e:	0a c0       	rjmp	.+20     	; 0x158a4 <SS80_Amigo_Clear+0x42>
   15890:	89 e4       	ldi	r24, 0x49	; 73
   15892:	9e e1       	ldi	r25, 0x1E	; 30
   15894:	a0 e0       	ldi	r26, 0x00	; 0
   15896:	ed b7       	in	r30, 0x3d	; 61
   15898:	fe b7       	in	r31, 0x3e	; 62
   1589a:	81 83       	std	Z+1, r24	; 0x01
   1589c:	92 83       	std	Z+2, r25	; 0x02
   1589e:	a3 83       	std	Z+3, r26	; 0x03
   158a0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   158a4:	8c 81       	ldd	r24, Y+4	; 0x04
   158a6:	9d 81       	ldd	r25, Y+5	; 0x05
   158a8:	88 27       	eor	r24, r24
   158aa:	90 7d       	andi	r25, 0xD0	; 208
   158ac:	19 c0       	rjmp	.+50     	; 0x158e0 <SS80_Amigo_Clear+0x7e>
   158ae:	25 ff       	sbrs	r18, 5
   158b0:	0a c0       	rjmp	.+20     	; 0x158c6 <SS80_Amigo_Clear+0x64>
   158b2:	8a e3       	ldi	r24, 0x3A	; 58
   158b4:	9e e1       	ldi	r25, 0x1E	; 30
   158b6:	a0 e0       	ldi	r26, 0x00	; 0
   158b8:	ed b7       	in	r30, 0x3d	; 61
   158ba:	fe b7       	in	r31, 0x3e	; 62
   158bc:	81 83       	std	Z+1, r24	; 0x01
   158be:	92 83       	std	Z+2, r25	; 0x02
   158c0:	a3 83       	std	Z+3, r26	; 0x03
   158c2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   158c6:	8f e0       	ldi	r24, 0x0F	; 15
   158c8:	90 e0       	ldi	r25, 0x00	; 0
   158ca:	27 df       	rcall	.-434    	; 0x1571a <Clear_Common>
   158cc:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   158d0:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   158d4:	81 81       	ldd	r24, Z+1	; 0x01
   158d6:	90 e0       	ldi	r25, 0x00	; 0
   158d8:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
   158dc:	80 e0       	ldi	r24, 0x00	; 0
   158de:	90 e0       	ldi	r25, 0x00	; 0
   158e0:	26 96       	adiw	r28, 0x06	; 6
   158e2:	e2 e0       	ldi	r30, 0x02	; 2
   158e4:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

000158e8 <SS80_Cancel>:
   158e8:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   158ec:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   158f0:	11 82       	std	Z+1, r1	; 0x01
   158f2:	10 82       	st	Z, r1
   158f4:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   158f8:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   158fc:	81 81       	ldd	r24, Z+1	; 0x01
   158fe:	90 e0       	ldi	r25, 0x00	; 0
   15900:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
   15904:	80 e0       	ldi	r24, 0x00	; 0
   15906:	90 e0       	ldi	r25, 0x00	; 0
   15908:	08 95       	ret

0001590a <SS80_Transparent_State>:
   1590a:	a9 e0       	ldi	r26, 0x09	; 9
   1590c:	b0 e0       	ldi	r27, 0x00	; 0
   1590e:	eb e8       	ldi	r30, 0x8B	; 139
   15910:	fc ea       	ldi	r31, 0xAC	; 172
   15912:	0c 94 d7 e2 	jmp	0x1c5ae	; 0x1c5ae <__prologue_saves__+0x10>
   15916:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   1591a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   1591e:	81 81       	ldd	r24, Z+1	; 0x01
   15920:	90 e0       	ldi	r25, 0x00	; 0
   15922:	0e 94 d1 86 	call	0x10da2	; 0x10da2 <gpib_disable_PPR>
   15926:	80 e0       	ldi	r24, 0x00	; 0
   15928:	91 e0       	ldi	r25, 0x01	; 1
   1592a:	99 87       	std	Y+9, r25	; 0x09
   1592c:	88 87       	std	Y+8, r24	; 0x08
   1592e:	ae 01       	movw	r20, r28
   15930:	48 5f       	subi	r20, 0xF8	; 248
   15932:	5f 4f       	sbci	r21, 0xFF	; 255
   15934:	60 e0       	ldi	r22, 0x00	; 0
   15936:	72 e0       	ldi	r23, 0x02	; 2
   15938:	8d ed       	ldi	r24, 0xDD	; 221
   1593a:	9c e1       	ldi	r25, 0x1C	; 28
   1593c:	0e 94 89 8b 	call	0x11712	; 0x11712 <gpib_read_str>
   15940:	7c 01       	movw	r14, r24
   15942:	88 85       	ldd	r24, Y+8	; 0x08
   15944:	99 85       	ldd	r25, Y+9	; 0x09
   15946:	9c 01       	movw	r18, r24
   15948:	22 27       	eor	r18, r18
   1594a:	30 7d       	andi	r19, 0xD0	; 208
   1594c:	23 2b       	or	r18, r19
   1594e:	79 f0       	breq	.+30     	; 0x1596e <SS80_Transparent_State+0x64>
   15950:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15954:	80 ff       	sbrs	r24, 0
   15956:	da c0       	rjmp	.+436    	; 0x15b0c <SS80_Transparent_State+0x202>
   15958:	89 ed       	ldi	r24, 0xD9	; 217
   1595a:	9f e1       	ldi	r25, 0x1F	; 31
   1595c:	a0 e0       	ldi	r26, 0x00	; 0
   1595e:	ed b7       	in	r30, 0x3d	; 61
   15960:	fe b7       	in	r31, 0x3e	; 62
   15962:	81 83       	std	Z+1, r24	; 0x01
   15964:	92 83       	std	Z+2, r25	; 0x02
   15966:	a3 83       	std	Z+3, r26	; 0x03
   15968:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1596c:	cf c0       	rjmp	.+414    	; 0x15b0c <SS80_Transparent_State+0x202>
   1596e:	e1 14       	cp	r14, r1
   15970:	f1 04       	cpc	r15, r1
   15972:	09 f4       	brne	.+2      	; 0x15976 <SS80_Transparent_State+0x6c>
   15974:	d0 c0       	rjmp	.+416    	; 0x15b16 <SS80_Transparent_State+0x20c>
   15976:	90 fd       	sbrc	r25, 0
   15978:	0e c0       	rjmp	.+28     	; 0x15996 <SS80_Transparent_State+0x8c>
   1597a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1597e:	80 ff       	sbrs	r24, 0
   15980:	0a c0       	rjmp	.+20     	; 0x15996 <SS80_Transparent_State+0x8c>
   15982:	80 ec       	ldi	r24, 0xC0	; 192
   15984:	9f e1       	ldi	r25, 0x1F	; 31
   15986:	a0 e0       	ldi	r26, 0x00	; 0
   15988:	ed b7       	in	r30, 0x3d	; 61
   1598a:	fe b7       	in	r31, 0x3e	; 62
   1598c:	81 83       	std	Z+1, r24	; 0x01
   1598e:	92 83       	std	Z+2, r25	; 0x02
   15990:	a3 83       	std	Z+3, r26	; 0x03
   15992:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15996:	8d ed       	ldi	r24, 0xDD	; 221
   15998:	a8 2e       	mov	r10, r24
   1599a:	8c e1       	ldi	r24, 0x1C	; 28
   1599c:	b8 2e       	mov	r11, r24
   1599e:	00 e0       	ldi	r16, 0x00	; 0
   159a0:	10 e0       	ldi	r17, 0x00	; 0
   159a2:	0e 15       	cp	r16, r14
   159a4:	1f 05       	cpc	r17, r15
   159a6:	0c f0       	brlt	.+2      	; 0x159aa <SS80_Transparent_State+0xa0>
   159a8:	9c c0       	rjmp	.+312    	; 0x15ae2 <SS80_Transparent_State+0x1d8>
   159aa:	68 01       	movw	r12, r16
   159ac:	ff ef       	ldi	r31, 0xFF	; 255
   159ae:	cf 1a       	sub	r12, r31
   159b0:	df 0a       	sbc	r13, r31
   159b2:	f5 01       	movw	r30, r10
   159b4:	81 91       	ld	r24, Z+
   159b6:	5f 01       	movw	r10, r30
   159b8:	28 2f       	mov	r18, r24
   159ba:	30 e0       	ldi	r19, 0x00	; 0
   159bc:	a9 01       	movw	r20, r18
   159be:	40 52       	subi	r20, 0x20	; 32
   159c0:	51 09       	sbc	r21, r1
   159c2:	40 31       	cpi	r20, 0x10	; 16
   159c4:	51 05       	cpc	r21, r1
   159c6:	20 f4       	brcc	.+8      	; 0x159d0 <SS80_Transparent_State+0xc6>
   159c8:	80 52       	subi	r24, 0x20	; 32
   159ca:	8c d9       	rcall	.-3304   	; 0x14ce4 <SS80_Check_Unit>
   159cc:	86 01       	movw	r16, r12
   159ce:	e9 cf       	rjmp	.-46     	; 0x159a2 <SS80_Transparent_State+0x98>
   159d0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159d4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   159d8:	21 30       	cpi	r18, 0x01	; 1
   159da:	31 05       	cpc	r19, r1
   159dc:	c9 f4       	brne	.+50     	; 0x15a10 <SS80_Transparent_State+0x106>
   159de:	0e 5f       	subi	r16, 0xFE	; 254
   159e0:	1f 4f       	sbci	r17, 0xFF	; 255
   159e2:	80 73       	andi	r24, 0x30	; 48
   159e4:	99 27       	eor	r25, r25
   159e6:	89 2b       	or	r24, r25
   159e8:	51 f0       	breq	.+20     	; 0x159fe <SS80_Transparent_State+0xf4>
   159ea:	8b e9       	ldi	r24, 0x9B	; 155
   159ec:	9f e1       	ldi	r25, 0x1F	; 31
   159ee:	a0 e0       	ldi	r26, 0x00	; 0
   159f0:	ed b7       	in	r30, 0x3d	; 61
   159f2:	fe b7       	in	r31, 0x3e	; 62
   159f4:	81 83       	std	Z+1, r24	; 0x01
   159f6:	92 83       	std	Z+2, r25	; 0x02
   159f8:	a3 83       	std	Z+3, r26	; 0x03
   159fa:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   159fe:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   15a02:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   15a06:	81 81       	ldd	r24, Z+1	; 0x01
   15a08:	90 e0       	ldi	r25, 0x00	; 0
   15a0a:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
   15a0e:	69 c0       	rjmp	.+210    	; 0x15ae2 <SS80_Transparent_State+0x1d8>
   15a10:	22 30       	cpi	r18, 0x02	; 2
   15a12:	31 05       	cpc	r19, r1
   15a14:	51 f4       	brne	.+20     	; 0x15a2a <SS80_Transparent_State+0x120>
   15a16:	0b 5f       	subi	r16, 0xFB	; 251
   15a18:	1f 4f       	sbci	r17, 0xFF	; 255
   15a1a:	80 73       	andi	r24, 0x30	; 48
   15a1c:	99 27       	eor	r25, r25
   15a1e:	89 2b       	or	r24, r25
   15a20:	09 f4       	brne	.+2      	; 0x15a24 <SS80_Transparent_State+0x11a>
   15a22:	5f c0       	rjmp	.+190    	; 0x15ae2 <SS80_Transparent_State+0x1d8>
   15a24:	8e e7       	ldi	r24, 0x7E	; 126
   15a26:	9f e1       	ldi	r25, 0x1F	; 31
   15a28:	0c c0       	rjmp	.+24     	; 0x15a42 <SS80_Transparent_State+0x138>
   15a2a:	23 30       	cpi	r18, 0x03	; 3
   15a2c:	31 05       	cpc	r19, r1
   15a2e:	91 f4       	brne	.+36     	; 0x15a54 <SS80_Transparent_State+0x14a>
   15a30:	0b 5f       	subi	r16, 0xFB	; 251
   15a32:	1f 4f       	sbci	r17, 0xFF	; 255
   15a34:	80 73       	andi	r24, 0x30	; 48
   15a36:	99 27       	eor	r25, r25
   15a38:	89 2b       	or	r24, r25
   15a3a:	09 f4       	brne	.+2      	; 0x15a3e <SS80_Transparent_State+0x134>
   15a3c:	52 c0       	rjmp	.+164    	; 0x15ae2 <SS80_Transparent_State+0x1d8>
   15a3e:	80 e6       	ldi	r24, 0x60	; 96
   15a40:	9f e1       	ldi	r25, 0x1F	; 31
   15a42:	a0 e0       	ldi	r26, 0x00	; 0
   15a44:	ed b7       	in	r30, 0x3d	; 61
   15a46:	fe b7       	in	r31, 0x3e	; 62
   15a48:	81 83       	std	Z+1, r24	; 0x01
   15a4a:	92 83       	std	Z+2, r25	; 0x02
   15a4c:	a3 83       	std	Z+3, r26	; 0x03
   15a4e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15a52:	47 c0       	rjmp	.+142    	; 0x15ae2 <SS80_Transparent_State+0x1d8>
   15a54:	28 30       	cpi	r18, 0x08	; 8
   15a56:	31 05       	cpc	r19, r1
   15a58:	e1 f4       	brne	.+56     	; 0x15a92 <SS80_Transparent_State+0x188>
   15a5a:	85 ff       	sbrs	r24, 5
   15a5c:	12 c0       	rjmp	.+36     	; 0x15a82 <SS80_Transparent_State+0x178>
   15a5e:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   15a62:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   15a66:	85 81       	ldd	r24, Z+5	; 0x05
   15a68:	90 e0       	ldi	r25, 0x00	; 0
   15a6a:	ed b7       	in	r30, 0x3d	; 61
   15a6c:	fe b7       	in	r31, 0x3e	; 62
   15a6e:	95 83       	std	Z+5, r25	; 0x05
   15a70:	84 83       	std	Z+4, r24	; 0x04
   15a72:	89 e3       	ldi	r24, 0x39	; 57
   15a74:	9f e1       	ldi	r25, 0x1F	; 31
   15a76:	a0 e0       	ldi	r26, 0x00	; 0
   15a78:	81 83       	std	Z+1, r24	; 0x01
   15a7a:	92 83       	std	Z+2, r25	; 0x02
   15a7c:	a3 83       	std	Z+3, r26	; 0x03
   15a7e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15a82:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   15a86:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   15a8a:	85 81       	ldd	r24, Z+5	; 0x05
   15a8c:	90 e0       	ldi	r25, 0x00	; 0
   15a8e:	aa de       	rcall	.-684    	; 0x157e4 <SS80_Channel_Independent_Clear>
   15a90:	44 c0       	rjmp	.+136    	; 0x15b1a <SS80_Transparent_State+0x210>
   15a92:	29 30       	cpi	r18, 0x09	; 9
   15a94:	31 05       	cpc	r19, r1
   15a96:	b1 f4       	brne	.+44     	; 0x15ac4 <SS80_Transparent_State+0x1ba>
   15a98:	85 ff       	sbrs	r24, 5
   15a9a:	12 c0       	rjmp	.+36     	; 0x15ac0 <SS80_Transparent_State+0x1b6>
   15a9c:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   15aa0:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   15aa4:	85 81       	ldd	r24, Z+5	; 0x05
   15aa6:	90 e0       	ldi	r25, 0x00	; 0
   15aa8:	ed b7       	in	r30, 0x3d	; 61
   15aaa:	fe b7       	in	r31, 0x3e	; 62
   15aac:	95 83       	std	Z+5, r25	; 0x05
   15aae:	84 83       	std	Z+4, r24	; 0x04
   15ab0:	85 e2       	ldi	r24, 0x25	; 37
   15ab2:	9f e1       	ldi	r25, 0x1F	; 31
   15ab4:	a0 e0       	ldi	r26, 0x00	; 0
   15ab6:	81 83       	std	Z+1, r24	; 0x01
   15ab8:	92 83       	std	Z+2, r25	; 0x02
   15aba:	a3 83       	std	Z+3, r26	; 0x03
   15abc:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15ac0:	13 df       	rcall	.-474    	; 0x158e8 <SS80_Cancel>
   15ac2:	2b c0       	rjmp	.+86     	; 0x15b1a <SS80_Transparent_State+0x210>
   15ac4:	80 ff       	sbrs	r24, 0
   15ac6:	22 c0       	rjmp	.+68     	; 0x15b0c <SS80_Transparent_State+0x202>
   15ac8:	ed b7       	in	r30, 0x3d	; 61
   15aca:	fe b7       	in	r31, 0x3e	; 62
   15acc:	35 83       	std	Z+5, r19	; 0x05
   15ace:	24 83       	std	Z+4, r18	; 0x04
   15ad0:	85 e0       	ldi	r24, 0x05	; 5
   15ad2:	9f e1       	ldi	r25, 0x1F	; 31
   15ad4:	a0 e0       	ldi	r26, 0x00	; 0
   15ad6:	81 83       	std	Z+1, r24	; 0x01
   15ad8:	92 83       	std	Z+2, r25	; 0x02
   15ada:	a3 83       	std	Z+3, r26	; 0x03
   15adc:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15ae0:	86 01       	movw	r16, r12
   15ae2:	0e 15       	cp	r16, r14
   15ae4:	1f 05       	cpc	r17, r15
   15ae6:	91 f0       	breq	.+36     	; 0x15b0c <SS80_Transparent_State+0x202>
   15ae8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15aec:	80 ff       	sbrs	r24, 0
   15aee:	0e c0       	rjmp	.+28     	; 0x15b0c <SS80_Transparent_State+0x202>
   15af0:	ed b7       	in	r30, 0x3d	; 61
   15af2:	fe b7       	in	r31, 0x3e	; 62
   15af4:	f7 82       	std	Z+7, r15	; 0x07
   15af6:	e6 82       	std	Z+6, r14	; 0x06
   15af8:	15 83       	std	Z+5, r17	; 0x05
   15afa:	04 83       	std	Z+4, r16	; 0x04
   15afc:	89 ec       	ldi	r24, 0xC9	; 201
   15afe:	9e e1       	ldi	r25, 0x1E	; 30
   15b00:	a0 e0       	ldi	r26, 0x00	; 0
   15b02:	81 83       	std	Z+1, r24	; 0x01
   15b04:	92 83       	std	Z+2, r25	; 0x02
   15b06:	a3 83       	std	Z+3, r26	; 0x03
   15b08:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15b0c:	88 85       	ldd	r24, Y+8	; 0x08
   15b0e:	99 85       	ldd	r25, Y+9	; 0x09
   15b10:	88 27       	eor	r24, r24
   15b12:	90 7d       	andi	r25, 0xD0	; 208
   15b14:	02 c0       	rjmp	.+4      	; 0x15b1a <SS80_Transparent_State+0x210>
   15b16:	80 e0       	ldi	r24, 0x00	; 0
   15b18:	90 e0       	ldi	r25, 0x00	; 0
   15b1a:	29 96       	adiw	r28, 0x09	; 9
   15b1c:	ea e0       	ldi	r30, 0x0A	; 10
   15b1e:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__epilogue_restores__+0x10>

00015b22 <SS80_error_return>:
   15b22:	a6 e0       	ldi	r26, 0x06	; 6
   15b24:	b0 e0       	ldi	r27, 0x00	; 0
   15b26:	e7 e9       	ldi	r30, 0x97	; 151
   15b28:	fd ea       	ldi	r31, 0xAD	; 173
   15b2a:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
   15b2e:	80 e0       	ldi	r24, 0x00	; 0
   15b30:	91 e0       	ldi	r25, 0x01	; 1
   15b32:	9d 83       	std	Y+5, r25	; 0x05
   15b34:	8c 83       	std	Y+4, r24	; 0x04
   15b36:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   15b3a:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   15b3e:	81 e0       	ldi	r24, 0x01	; 1
   15b40:	82 83       	std	Z+2, r24	; 0x02
   15b42:	8e 83       	std	Y+6, r24	; 0x06
   15b44:	ae 01       	movw	r20, r28
   15b46:	4c 5f       	subi	r20, 0xFC	; 252
   15b48:	5f 4f       	sbci	r21, 0xFF	; 255
   15b4a:	61 e0       	ldi	r22, 0x01	; 1
   15b4c:	70 e0       	ldi	r23, 0x00	; 0
   15b4e:	ce 01       	movw	r24, r28
   15b50:	06 96       	adiw	r24, 0x06	; 6
   15b52:	0e 94 2b 8c 	call	0x11856	; 0x11856 <gpib_write_str>
   15b56:	01 97       	sbiw	r24, 0x01	; 1
   15b58:	99 f0       	breq	.+38     	; 0x15b80 <SS80_error_return+0x5e>
   15b5a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b5e:	80 ff       	sbrs	r24, 0
   15b60:	0a c0       	rjmp	.+20     	; 0x15b76 <SS80_error_return+0x54>
   15b62:	87 e1       	ldi	r24, 0x17	; 23
   15b64:	9e e1       	ldi	r25, 0x1E	; 30
   15b66:	a0 e0       	ldi	r26, 0x00	; 0
   15b68:	ed b7       	in	r30, 0x3d	; 61
   15b6a:	fe b7       	in	r31, 0x3e	; 62
   15b6c:	81 83       	std	Z+1, r24	; 0x01
   15b6e:	92 83       	std	Z+2, r25	; 0x02
   15b70:	a3 83       	std	Z+3, r26	; 0x03
   15b72:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15b76:	8c 81       	ldd	r24, Y+4	; 0x04
   15b78:	9d 81       	ldd	r25, Y+5	; 0x05
   15b7a:	88 27       	eor	r24, r24
   15b7c:	90 7d       	andi	r25, 0xD0	; 208
   15b7e:	07 c0       	rjmp	.+14     	; 0x15b8e <SS80_error_return+0x6c>
   15b80:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   15b84:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   15b88:	12 82       	std	Z+2, r1	; 0x02
   15b8a:	80 e0       	ldi	r24, 0x00	; 0
   15b8c:	90 e0       	ldi	r25, 0x00	; 0
   15b8e:	26 96       	adiw	r28, 0x06	; 6
   15b90:	e2 e0       	ldi	r30, 0x02	; 2
   15b92:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00015b96 <SS80_locate_and_read>:
/// - Phases: Command, Report
/// @param[in] u: Unit
/// @return  0

int SS80_Channel_Independent_Clear( int u )
{
   15b96:	a7 e1       	ldi	r26, 0x17	; 23
   15b98:	b0 e0       	ldi	r27, 0x00	; 0
   15b9a:	e1 ed       	ldi	r30, 0xD1	; 209
   15b9c:	fd ea       	ldi	r31, 0xAD	; 173
   15b9e:	0c 94 d0 e2 	jmp	0x1c5a0	; 0x1c5a0 <__prologue_saves__+0x2>
   15ba2:	60 91 64 19 	lds	r22, 0x1964	; 0x801964 <SS80s>
   15ba6:	70 91 65 19 	lds	r23, 0x1965	; 0x801965 <SS80s+0x1>
   15baa:	fb 01       	movw	r30, r22
   15bac:	27 81       	ldd	r18, Z+7	; 0x07
   15bae:	30 85       	ldd	r19, Z+8	; 0x08
   15bb0:	41 85       	ldd	r20, Z+9	; 0x09
   15bb2:	52 85       	ldd	r21, Z+10	; 0x0a
   15bb4:	80 91 66 19 	lds	r24, 0x1966	; 0x801966 <SS80p>
   15bb8:	90 91 67 19 	lds	r25, 0x1967	; 0x801967 <SS80p+0x1>
   15bbc:	fc 01       	movw	r30, r24
   15bbe:	a0 89       	ldd	r26, Z+16	; 0x10
   15bc0:	b1 89       	ldd	r27, Z+17	; 0x11
   15bc2:	fb 01       	movw	r30, r22
   15bc4:	12 82       	std	Z+2, r1	; 0x02
   15bc6:	1d 86       	std	Y+13, r1	; 0x0d
   15bc8:	1c 86       	std	Y+12, r1	; 0x0c
   15bca:	54 98       	cbi	0x0a, 4	; 10
   15bcc:	4c 99       	sbic	0x09, 4	; 9
   15bce:	03 c0       	rjmp	.+6      	; 0x15bd6 <SS80_locate_and_read+0x40>
   15bd0:	80 e0       	ldi	r24, 0x00	; 0
   15bd2:	90 e1       	ldi	r25, 0x10	; 16
   15bd4:	3e c1       	rjmp	.+636    	; 0x15e52 <SS80_locate_and_read+0x2bc>
   15bd6:	0e 94 af e2 	call	0x1c55e	; 0x1c55e <__muluhisi3>
   15bda:	4b 01       	movw	r8, r22
   15bdc:	5c 01       	movw	r10, r24
   15bde:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15be2:	85 ff       	sbrs	r24, 5
   15be4:	1a c0       	rjmp	.+52     	; 0x15c1a <SS80_locate_and_read+0x84>
   15be6:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   15bea:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   15bee:	83 85       	ldd	r24, Z+11	; 0x0b
   15bf0:	94 85       	ldd	r25, Z+12	; 0x0c
   15bf2:	a5 85       	ldd	r26, Z+13	; 0x0d
   15bf4:	b6 85       	ldd	r27, Z+14	; 0x0e
   15bf6:	ed b7       	in	r30, 0x3d	; 61
   15bf8:	fe b7       	in	r31, 0x3e	; 62
   15bfa:	80 87       	std	Z+8, r24	; 0x08
   15bfc:	91 87       	std	Z+9, r25	; 0x09
   15bfe:	a2 87       	std	Z+10, r26	; 0x0a
   15c00:	b3 87       	std	Z+11, r27	; 0x0b
   15c02:	84 82       	std	Z+4, r8	; 0x04
   15c04:	95 82       	std	Z+5, r9	; 0x05
   15c06:	a6 82       	std	Z+6, r10	; 0x06
   15c08:	b7 82       	std	Z+7, r11	; 0x07
   15c0a:	81 ef       	ldi	r24, 0xF1	; 241
   15c0c:	94 e2       	ldi	r25, 0x24	; 36
   15c0e:	a0 e0       	ldi	r26, 0x00	; 0
   15c10:	81 83       	std	Z+1, r24	; 0x01
   15c12:	92 83       	std	Z+2, r25	; 0x02
   15c14:	a3 83       	std	Z+3, r26	; 0x03
   15c16:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15c1a:	2b db       	rcall	.-2474   	; 0x15272 <SS80_cmd_seek>
   15c1c:	89 2b       	or	r24, r25
   15c1e:	09 f0       	breq	.+2      	; 0x15c22 <SS80_locate_and_read+0x8c>
   15c20:	ae c0       	rjmp	.+348    	; 0x15d7e <SS80_locate_and_read+0x1e8>
   15c22:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   15c26:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   15c2a:	43 84       	ldd	r4, Z+11	; 0x0b
   15c2c:	54 84       	ldd	r5, Z+12	; 0x0c
   15c2e:	65 84       	ldd	r6, Z+13	; 0x0d
   15c30:	76 84       	ldd	r7, Z+14	; 0x0e
   15c32:	1e 86       	std	Y+14, r1	; 0x0e
   15c34:	1f 86       	std	Y+15, r1	; 0x0f
   15c36:	18 8a       	std	Y+16, r1	; 0x10
   15c38:	19 8a       	std	Y+17, r1	; 0x11
   15c3a:	83 ed       	ldi	r24, 0xD3	; 211
   15c3c:	94 e2       	ldi	r25, 0x24	; 36
   15c3e:	9c 01       	movw	r18, r24
   15c40:	40 e0       	ldi	r20, 0x00	; 0
   15c42:	2a 8b       	std	Y+18, r18	; 0x12
   15c44:	3b 8b       	std	Y+19, r19	; 0x13
   15c46:	4c 8b       	std	Y+20, r20	; 0x14
   15c48:	33 24       	eor	r3, r3
   15c4a:	33 94       	inc	r3
   15c4c:	82 ea       	ldi	r24, 0xA2	; 162
   15c4e:	94 e2       	ldi	r25, 0x24	; 36
   15c50:	9c 01       	movw	r18, r24
   15c52:	40 e0       	ldi	r20, 0x00	; 0
   15c54:	2d 8b       	std	Y+21, r18	; 0x15
   15c56:	3e 8b       	std	Y+22, r19	; 0x16
   15c58:	4f 8b       	std	Y+23, r20	; 0x17
   15c5a:	34 c0       	rjmp	.+104    	; 0x15cc4 <SS80_locate_and_read+0x12e>
   15c5c:	87 fd       	sbrc	r24, 7
   15c5e:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   15c62:	ae 01       	movw	r20, r28
   15c64:	44 5f       	subi	r20, 0xF4	; 244
   15c66:	5f 4f       	sbci	r21, 0xFF	; 255
   15c68:	b6 01       	movw	r22, r12
   15c6a:	8d ed       	ldi	r24, 0xDD	; 221
   15c6c:	9c e1       	ldi	r25, 0x1C	; 28
   15c6e:	0e 94 2b 8c 	call	0x11856	; 0x11856 <gpib_write_str>
   15c72:	8c 01       	movw	r16, r24
   15c74:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c78:	87 ff       	sbrs	r24, 7
   15c7a:	04 c0       	rjmp	.+8      	; 0x15c84 <SS80_locate_and_read+0xee>
   15c7c:	80 ea       	ldi	r24, 0xA0	; 160
   15c7e:	90 e1       	ldi	r25, 0x10	; 16
   15c80:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   15c84:	c0 16       	cp	r12, r16
   15c86:	d1 06       	cpc	r13, r17
   15c88:	09 f0       	breq	.+2      	; 0x15c8c <SS80_locate_and_read+0xf6>
   15c8a:	82 c0       	rjmp	.+260    	; 0x15d90 <SS80_locate_and_read+0x1fa>
   15c8c:	0d 2c       	mov	r0, r13
   15c8e:	00 0c       	add	r0, r0
   15c90:	ee 08       	sbc	r14, r14
   15c92:	ff 08       	sbc	r15, r15
   15c94:	8c 0c       	add	r8, r12
   15c96:	9d 1c       	adc	r9, r13
   15c98:	ae 1c       	adc	r10, r14
   15c9a:	bf 1c       	adc	r11, r15
   15c9c:	01 2e       	mov	r0, r17
   15c9e:	00 0c       	add	r0, r0
   15ca0:	22 0b       	sbc	r18, r18
   15ca2:	33 0b       	sbc	r19, r19
   15ca4:	8e 85       	ldd	r24, Y+14	; 0x0e
   15ca6:	9f 85       	ldd	r25, Y+15	; 0x0f
   15ca8:	a8 89       	ldd	r26, Y+16	; 0x10
   15caa:	b9 89       	ldd	r27, Y+17	; 0x11
   15cac:	80 0f       	add	r24, r16
   15cae:	91 1f       	adc	r25, r17
   15cb0:	a2 1f       	adc	r26, r18
   15cb2:	b3 1f       	adc	r27, r19
   15cb4:	8e 87       	std	Y+14, r24	; 0x0e
   15cb6:	9f 87       	std	Y+15, r25	; 0x0f
   15cb8:	a8 8b       	std	Y+16, r26	; 0x10
   15cba:	b9 8b       	std	Y+17, r27	; 0x11
   15cbc:	40 1a       	sub	r4, r16
   15cbe:	51 0a       	sbc	r5, r17
   15cc0:	62 0a       	sbc	r6, r18
   15cc2:	73 0a       	sbc	r7, r19
   15cc4:	41 14       	cp	r4, r1
   15cc6:	51 04       	cpc	r5, r1
   15cc8:	61 04       	cpc	r6, r1
   15cca:	71 04       	cpc	r7, r1
   15ccc:	09 f4       	brne	.+2      	; 0x15cd0 <SS80_locate_and_read+0x13a>
   15cce:	92 c0       	rjmp	.+292    	; 0x15df4 <SS80_locate_and_read+0x25e>
   15cd0:	54 98       	cbi	0x0a, 4	; 10
   15cd2:	4c 9b       	sbis	0x09, 4	; 9
   15cd4:	7d cf       	rjmp	.-262    	; 0x15bd0 <SS80_locate_and_read+0x3a>
   15cd6:	31 e0       	ldi	r19, 0x01	; 1
   15cd8:	43 16       	cp	r4, r19
   15cda:	53 06       	cpc	r5, r19
   15cdc:	61 04       	cpc	r6, r1
   15cde:	71 04       	cpc	r7, r1
   15ce0:	08 f4       	brcc	.+2      	; 0x15ce4 <SS80_locate_and_read+0x14e>
   15ce2:	4f c0       	rjmp	.+158    	; 0x15d82 <SS80_locate_and_read+0x1ec>
   15ce4:	1d 86       	std	Y+13, r1	; 0x0d
   15ce6:	1c 86       	std	Y+12, r1	; 0x0c
   15ce8:	c1 2c       	mov	r12, r1
   15cea:	dd 24       	eor	r13, r13
   15cec:	d3 94       	inc	r13
   15cee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15cf2:	86 fd       	sbrc	r24, 6
   15cf4:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   15cf8:	e0 90 64 19 	lds	r14, 0x1964	; 0x801964 <SS80s>
   15cfc:	f0 90 65 19 	lds	r15, 0x1965	; 0x801965 <SS80s+0x1>
   15d00:	43 e0       	ldi	r20, 0x03	; 3
   15d02:	e4 0e       	add	r14, r20
   15d04:	f1 1c       	adc	r15, r1
   15d06:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   15d0a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   15d0e:	86 01       	movw	r16, r12
   15d10:	2d ed       	ldi	r18, 0xDD	; 221
   15d12:	3c e1       	ldi	r19, 0x1C	; 28
   15d14:	b5 01       	movw	r22, r10
   15d16:	a4 01       	movw	r20, r8
   15d18:	82 81       	ldd	r24, Z+2	; 0x02
   15d1a:	93 81       	ldd	r25, Z+3	; 0x03
   15d1c:	0e 94 2b 85 	call	0x10a56	; 0x10a56 <dbf_open_read>
   15d20:	8c 01       	movw	r16, r24
   15d22:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d26:	86 ff       	sbrs	r24, 6
   15d28:	04 c0       	rjmp	.+8      	; 0x15d32 <SS80_locate_and_read+0x19c>
   15d2a:	85 e9       	ldi	r24, 0x95	; 149
   15d2c:	90 e1       	ldi	r25, 0x10	; 16
   15d2e:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   15d32:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d36:	85 ff       	sbrs	r24, 5
   15d38:	0c c0       	rjmp	.+24     	; 0x15d52 <SS80_locate_and_read+0x1bc>
   15d3a:	ed b7       	in	r30, 0x3d	; 61
   15d3c:	fe b7       	in	r31, 0x3e	; 62
   15d3e:	15 83       	std	Z+5, r17	; 0x05
   15d40:	04 83       	std	Z+4, r16	; 0x04
   15d42:	2a 89       	ldd	r18, Y+18	; 0x12
   15d44:	3b 89       	ldd	r19, Y+19	; 0x13
   15d46:	4c 89       	ldd	r20, Y+20	; 0x14
   15d48:	21 83       	std	Z+1, r18	; 0x01
   15d4a:	32 83       	std	Z+2, r19	; 0x02
   15d4c:	43 83       	std	Z+3, r20	; 0x03
   15d4e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15d52:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d56:	17 ff       	sbrs	r17, 7
   15d58:	81 cf       	rjmp	.-254    	; 0x15c5c <SS80_locate_and_read+0xc6>
   15d5a:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   15d5e:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   15d62:	91 e0       	ldi	r25, 0x01	; 1
   15d64:	92 83       	std	Z+2, r25	; 0x02
   15d66:	80 ff       	sbrs	r24, 0
   15d68:	0a c0       	rjmp	.+20     	; 0x15d7e <SS80_locate_and_read+0x1e8>
   15d6a:	8b eb       	ldi	r24, 0xBB	; 187
   15d6c:	94 e2       	ldi	r25, 0x24	; 36
   15d6e:	a0 e0       	ldi	r26, 0x00	; 0
   15d70:	ed b7       	in	r30, 0x3d	; 61
   15d72:	fe b7       	in	r31, 0x3e	; 62
   15d74:	81 83       	std	Z+1, r24	; 0x01
   15d76:	92 83       	std	Z+2, r25	; 0x02
   15d78:	a3 83       	std	Z+3, r26	; 0x03
   15d7a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15d7e:	d1 de       	rcall	.-606    	; 0x15b22 <SS80_error_return>
   15d80:	68 c0       	rjmp	.+208    	; 0x15e52 <SS80_locate_and_read+0x2bc>
   15d82:	62 01       	movw	r12, r4
   15d84:	8c 85       	ldd	r24, Y+12	; 0x0c
   15d86:	9d 85       	ldd	r25, Y+13	; 0x0d
   15d88:	91 60       	ori	r25, 0x01	; 1
   15d8a:	9d 87       	std	Y+13, r25	; 0x0d
   15d8c:	8c 87       	std	Y+12, r24	; 0x0c
   15d8e:	af cf       	rjmp	.-162    	; 0x15cee <SS80_locate_and_read+0x158>
   15d90:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   15d94:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   15d98:	32 82       	std	Z+2, r3	; 0x02
   15d9a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d9e:	80 ff       	sbrs	r24, 0
   15da0:	0a c0       	rjmp	.+20     	; 0x15db6 <SS80_locate_and_read+0x220>
   15da2:	2d 89       	ldd	r18, Y+21	; 0x15
   15da4:	3e 89       	ldd	r19, Y+22	; 0x16
   15da6:	4f 89       	ldd	r20, Y+23	; 0x17
   15da8:	ed b7       	in	r30, 0x3d	; 61
   15daa:	fe b7       	in	r31, 0x3e	; 62
   15dac:	21 83       	std	Z+1, r18	; 0x01
   15dae:	32 83       	std	Z+2, r19	; 0x02
   15db0:	43 83       	std	Z+3, r20	; 0x03
   15db2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15db6:	8c 85       	ldd	r24, Y+12	; 0x0c
   15db8:	9d 85       	ldd	r25, Y+13	; 0x0d
   15dba:	88 27       	eor	r24, r24
   15dbc:	90 7d       	andi	r25, 0xD0	; 208
   15dbe:	89 2b       	or	r24, r25
   15dc0:	09 f4       	brne	.+2      	; 0x15dc4 <SS80_locate_and_read+0x22e>
   15dc2:	64 cf       	rjmp	.-312    	; 0x15c8c <SS80_locate_and_read+0xf6>
   15dc4:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   15dc8:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   15dcc:	83 81       	ldd	r24, Z+3	; 0x03
   15dce:	94 81       	ldd	r25, Z+4	; 0x04
   15dd0:	80 62       	ori	r24, 0x20	; 32
   15dd2:	94 83       	std	Z+4, r25	; 0x04
   15dd4:	83 83       	std	Z+3, r24	; 0x03
   15dd6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15dda:	80 ff       	sbrs	r24, 0
   15ddc:	21 c0       	rjmp	.+66     	; 0x15e20 <SS80_locate_and_read+0x28a>
   15dde:	8d e7       	ldi	r24, 0x7D	; 125
   15de0:	94 e2       	ldi	r25, 0x24	; 36
   15de2:	a0 e0       	ldi	r26, 0x00	; 0
   15de4:	ed b7       	in	r30, 0x3d	; 61
   15de6:	fe b7       	in	r31, 0x3e	; 62
   15de8:	81 83       	std	Z+1, r24	; 0x01
   15dea:	92 83       	std	Z+2, r25	; 0x02
   15dec:	a3 83       	std	Z+3, r26	; 0x03
   15dee:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15df2:	16 c0       	rjmp	.+44     	; 0x15e20 <SS80_locate_and_read+0x28a>
   15df4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15df8:	85 ff       	sbrs	r24, 5
   15dfa:	12 c0       	rjmp	.+36     	; 0x15e20 <SS80_locate_and_read+0x28a>
   15dfc:	8e 85       	ldd	r24, Y+14	; 0x0e
   15dfe:	9f 85       	ldd	r25, Y+15	; 0x0f
   15e00:	a8 89       	ldd	r26, Y+16	; 0x10
   15e02:	b9 89       	ldd	r27, Y+17	; 0x11
   15e04:	ed b7       	in	r30, 0x3d	; 61
   15e06:	fe b7       	in	r31, 0x3e	; 62
   15e08:	84 83       	std	Z+4, r24	; 0x04
   15e0a:	95 83       	std	Z+5, r25	; 0x05
   15e0c:	a6 83       	std	Z+6, r26	; 0x06
   15e0e:	b7 83       	std	Z+7, r27	; 0x07
   15e10:	85 e5       	ldi	r24, 0x55	; 85
   15e12:	94 e2       	ldi	r25, 0x24	; 36
   15e14:	a0 e0       	ldi	r26, 0x00	; 0
   15e16:	81 83       	std	Z+1, r24	; 0x01
   15e18:	92 83       	std	Z+2, r25	; 0x02
   15e1a:	a3 83       	std	Z+3, r26	; 0x03
   15e1c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15e20:	00 91 64 19 	lds	r16, 0x1964	; 0x801964 <SS80s>
   15e24:	10 91 65 19 	lds	r17, 0x1965	; 0x801965 <SS80s+0x1>
   15e28:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   15e2c:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   15e30:	20 89       	ldd	r18, Z+16	; 0x10
   15e32:	31 89       	ldd	r19, Z+17	; 0x11
   15e34:	40 e0       	ldi	r20, 0x00	; 0
   15e36:	50 e0       	ldi	r21, 0x00	; 0
   15e38:	c5 01       	movw	r24, r10
   15e3a:	b4 01       	movw	r22, r8
   15e3c:	0e 94 62 e2 	call	0x1c4c4	; 0x1c4c4 <__udivmodsi4>
   15e40:	f8 01       	movw	r30, r16
   15e42:	27 83       	std	Z+7, r18	; 0x07
   15e44:	30 87       	std	Z+8, r19	; 0x08
   15e46:	41 87       	std	Z+9, r20	; 0x09
   15e48:	52 87       	std	Z+10, r21	; 0x0a
   15e4a:	8c 85       	ldd	r24, Y+12	; 0x0c
   15e4c:	9d 85       	ldd	r25, Y+13	; 0x0d
   15e4e:	88 27       	eor	r24, r24
   15e50:	90 7d       	andi	r25, 0xD0	; 208
   15e52:	67 96       	adiw	r28, 0x17	; 23
   15e54:	e1 e1       	ldi	r30, 0x11	; 17
   15e56:	0c 94 ec e2 	jmp	0x1c5d8	; 0x1c5d8 <__epilogue_restores__+0x2>

00015e5a <SS80_Execute_State>:
   15e5a:	cf 93       	push	r28
   15e5c:	df 93       	push	r29
   15e5e:	00 d0       	rcall	.+0      	; 0x15e60 <SS80_Execute_State+0x6>
   15e60:	00 d0       	rcall	.+0      	; 0x15e62 <SS80_Execute_State+0x8>
   15e62:	1f 92       	push	r1
   15e64:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   15e68:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   15e6c:	81 81       	ldd	r24, Z+1	; 0x01
   15e6e:	90 e0       	ldi	r25, 0x00	; 0
   15e70:	0e 94 d1 86 	call	0x10da2	; 0x10da2 <gpib_disable_PPR>
   15e74:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   15e78:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   15e7c:	80 81       	ld	r24, Z
   15e7e:	91 81       	ldd	r25, Z+1	; 0x01
   15e80:	82 30       	cpi	r24, 0x02	; 2
   15e82:	91 05       	cpc	r25, r1
   15e84:	89 f0       	breq	.+34     	; 0x15ea8 <SS80_Execute_State+0x4e>
   15e86:	3c f4       	brge	.+14     	; 0x15e96 <SS80_Execute_State+0x3c>
   15e88:	00 97       	sbiw	r24, 0x00	; 0
   15e8a:	81 f1       	breq	.+96     	; 0x15eec <SS80_Execute_State+0x92>
   15e8c:	81 30       	cpi	r24, 0x01	; 1
   15e8e:	91 05       	cpc	r25, r1
   15e90:	b9 f4       	brne	.+46     	; 0x15ec0 <SS80_Execute_State+0x66>
   15e92:	81 de       	rcall	.-766    	; 0x15b96 <SS80_locate_and_read>
   15e94:	0d c0       	rjmp	.+26     	; 0x15eb0 <SS80_Execute_State+0x56>
   15e96:	83 30       	cpi	r24, 0x03	; 3
   15e98:	91 05       	cpc	r25, r1
   15e9a:	41 f0       	breq	.+16     	; 0x15eac <SS80_Execute_State+0x52>
   15e9c:	84 30       	cpi	r24, 0x04	; 4
   15e9e:	91 05       	cpc	r25, r1
   15ea0:	79 f4       	brne	.+30     	; 0x15ec0 <SS80_Execute_State+0x66>
   15ea2:	0e 94 02 a6 	call	0x14c04	; 0x14c04 <SS80_describe>
   15ea6:	04 c0       	rjmp	.+8      	; 0x15eb0 <SS80_Execute_State+0x56>
   15ea8:	59 da       	rcall	.-2894   	; 0x1535c <SS80_locate_and_write>
   15eaa:	02 c0       	rjmp	.+4      	; 0x15eb0 <SS80_Execute_State+0x56>
   15eac:	0e 94 81 a5 	call	0x14b02	; 0x14b02 <SS80_send_status>
   15eb0:	ec 01       	movw	r28, r24
   15eb2:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   15eb6:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   15eba:	11 82       	std	Z+1, r1	; 0x01
   15ebc:	10 82       	st	Z, r1
   15ebe:	18 c0       	rjmp	.+48     	; 0x15ef0 <SS80_Execute_State+0x96>
   15ec0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15ec4:	20 ff       	sbrs	r18, 0
   15ec6:	0c c0       	rjmp	.+24     	; 0x15ee0 <SS80_Execute_State+0x86>
   15ec8:	ed b7       	in	r30, 0x3d	; 61
   15eca:	fe b7       	in	r31, 0x3e	; 62
   15ecc:	95 83       	std	Z+5, r25	; 0x05
   15ece:	84 83       	std	Z+4, r24	; 0x04
   15ed0:	89 e1       	ldi	r24, 0x19	; 25
   15ed2:	95 e2       	ldi	r25, 0x25	; 37
   15ed4:	a0 e0       	ldi	r26, 0x00	; 0
   15ed6:	81 83       	std	Z+1, r24	; 0x01
   15ed8:	92 83       	std	Z+2, r25	; 0x02
   15eda:	a3 83       	std	Z+3, r26	; 0x03
   15edc:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15ee0:	e0 91 64 19 	lds	r30, 0x1964	; 0x801964 <SS80s>
   15ee4:	f0 91 65 19 	lds	r31, 0x1965	; 0x801965 <SS80s+0x1>
   15ee8:	11 82       	std	Z+1, r1	; 0x01
   15eea:	10 82       	st	Z, r1
   15eec:	c0 e0       	ldi	r28, 0x00	; 0
   15eee:	d0 e0       	ldi	r29, 0x00	; 0
   15ef0:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   15ef4:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   15ef8:	81 81       	ldd	r24, Z+1	; 0x01
   15efa:	90 e0       	ldi	r25, 0x00	; 0
   15efc:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
   15f00:	ce 01       	movw	r24, r28
   15f02:	cd b7       	in	r28, 0x3d	; 61
   15f04:	de b7       	in	r29, 0x3e	; 62
   15f06:	25 96       	adiw	r28, 0x05	; 5
   15f08:	e2 e0       	ldi	r30, 0x02	; 2
   15f0a:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00015f0e <SS80_COMMANDS>:
   15f0e:	a9 e0       	ldi	r26, 0x09	; 9
   15f10:	b0 e0       	ldi	r27, 0x00	; 0
   15f12:	ed e8       	ldi	r30, 0x8D	; 141
   15f14:	ff ea       	ldi	r31, 0xAF	; 175
   15f16:	0c 94 de e2 	jmp	0x1c5bc	; 0x1c5bc <__prologue_saves__+0x1e>
   15f1a:	18 2f       	mov	r17, r24
   15f1c:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   15f20:	90 e0       	ldi	r25, 0x00	; 0
   15f22:	0e 94 fe 8c 	call	0x119fc	; 0x119fc <SS80_is_MTA>
   15f26:	89 2b       	or	r24, r25
   15f28:	19 f0       	breq	.+6      	; 0x15f30 <SS80_COMMANDS+0x22>
   15f2a:	15 36       	cpi	r17, 0x65	; 101
   15f2c:	19 f5       	brne	.+70     	; 0x15f74 <SS80_COMMANDS+0x66>
   15f2e:	09 c0       	rjmp	.+18     	; 0x15f42 <SS80_COMMANDS+0x34>
   15f30:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   15f34:	90 e0       	ldi	r25, 0x00	; 0
   15f36:	0e 94 ed 8c 	call	0x119da	; 0x119da <SS80_is_MLA>
   15f3a:	ec 01       	movw	r28, r24
   15f3c:	89 2b       	or	r24, r25
   15f3e:	a9 f7       	brne	.-22     	; 0x15f2a <SS80_COMMANDS+0x1c>
   15f40:	ad c0       	rjmp	.+346    	; 0x1609c <SS80_COMMANDS+0x18e>
   15f42:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   15f46:	90 e0       	ldi	r25, 0x00	; 0
   15f48:	0e 94 ed 8c 	call	0x119da	; 0x119da <SS80_is_MLA>
   15f4c:	89 2b       	or	r24, r25
   15f4e:	09 f4       	brne	.+2      	; 0x15f52 <SS80_COMMANDS+0x44>
   15f50:	a2 c0       	rjmp	.+324    	; 0x16096 <SS80_COMMANDS+0x188>
   15f52:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f56:	85 ff       	sbrs	r24, 5
   15f58:	0a c0       	rjmp	.+20     	; 0x15f6e <SS80_COMMANDS+0x60>
   15f5a:	81 e0       	ldi	r24, 0x01	; 1
   15f5c:	9e e1       	ldi	r25, 0x1E	; 30
   15f5e:	a0 e0       	ldi	r26, 0x00	; 0
   15f60:	ed b7       	in	r30, 0x3d	; 61
   15f62:	fe b7       	in	r31, 0x3e	; 62
   15f64:	81 83       	std	Z+1, r24	; 0x01
   15f66:	92 83       	std	Z+2, r25	; 0x02
   15f68:	a3 83       	std	Z+3, r26	; 0x03
   15f6a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15f6e:	0e 94 c2 a6 	call	0x14d84	; 0x14d84 <SS80_Command_State>
   15f72:	73 c0       	rjmp	.+230    	; 0x1605a <SS80_COMMANDS+0x14c>
   15f74:	1e 36       	cpi	r17, 0x6E	; 110
   15f76:	01 f5       	brne	.+64     	; 0x15fb8 <SS80_COMMANDS+0xaa>
   15f78:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   15f7c:	90 e0       	ldi	r25, 0x00	; 0
   15f7e:	0e 94 ed 8c 	call	0x119da	; 0x119da <SS80_is_MLA>
   15f82:	89 2b       	or	r24, r25
   15f84:	79 f0       	breq	.+30     	; 0x15fa4 <SS80_COMMANDS+0x96>
   15f86:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f8a:	85 ff       	sbrs	r24, 5
   15f8c:	13 c0       	rjmp	.+38     	; 0x15fb4 <SS80_COMMANDS+0xa6>
   15f8e:	8b ee       	ldi	r24, 0xEB	; 235
   15f90:	9d e1       	ldi	r25, 0x1D	; 29
   15f92:	a0 e0       	ldi	r26, 0x00	; 0
   15f94:	ed b7       	in	r30, 0x3d	; 61
   15f96:	fe b7       	in	r31, 0x3e	; 62
   15f98:	81 83       	std	Z+1, r24	; 0x01
   15f9a:	92 83       	std	Z+2, r25	; 0x02
   15f9c:	a3 83       	std	Z+3, r26	; 0x03
   15f9e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15fa2:	08 c0       	rjmp	.+16     	; 0x15fb4 <SS80_COMMANDS+0xa6>
   15fa4:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   15fa8:	90 e0       	ldi	r25, 0x00	; 0
   15faa:	0e 94 fe 8c 	call	0x119fc	; 0x119fc <SS80_is_MTA>
   15fae:	89 2b       	or	r24, r25
   15fb0:	51 f7       	brne	.-44     	; 0x15f86 <SS80_COMMANDS+0x78>
   15fb2:	71 c0       	rjmp	.+226    	; 0x16096 <SS80_COMMANDS+0x188>
   15fb4:	52 df       	rcall	.-348    	; 0x15e5a <SS80_Execute_State>
   15fb6:	51 c0       	rjmp	.+162    	; 0x1605a <SS80_COMMANDS+0x14c>
   15fb8:	10 37       	cpi	r17, 0x70	; 112
   15fba:	b9 f5       	brne	.+110    	; 0x1602a <SS80_COMMANDS+0x11c>
   15fbc:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   15fc0:	90 e0       	ldi	r25, 0x00	; 0
   15fc2:	0e 94 fe 8c 	call	0x119fc	; 0x119fc <SS80_is_MTA>
   15fc6:	89 2b       	or	r24, r25
   15fc8:	81 f0       	breq	.+32     	; 0x15fea <SS80_COMMANDS+0xdc>
   15fca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15fce:	85 ff       	sbrs	r24, 5
   15fd0:	0a c0       	rjmp	.+20     	; 0x15fe6 <SS80_COMMANDS+0xd8>
   15fd2:	86 ed       	ldi	r24, 0xD6	; 214
   15fd4:	9d e1       	ldi	r25, 0x1D	; 29
   15fd6:	a0 e0       	ldi	r26, 0x00	; 0
   15fd8:	ed b7       	in	r30, 0x3d	; 61
   15fda:	fe b7       	in	r31, 0x3e	; 62
   15fdc:	81 83       	std	Z+1, r24	; 0x01
   15fde:	92 83       	std	Z+2, r25	; 0x02
   15fe0:	a3 83       	std	Z+3, r26	; 0x03
   15fe2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   15fe6:	4c db       	rcall	.-2408   	; 0x15680 <SS80_Report>
   15fe8:	38 c0       	rjmp	.+112    	; 0x1605a <SS80_COMMANDS+0x14c>
   15fea:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   15fee:	90 e0       	ldi	r25, 0x00	; 0
   15ff0:	0e 94 ed 8c 	call	0x119da	; 0x119da <SS80_is_MLA>
   15ff4:	89 2b       	or	r24, r25
   15ff6:	09 f4       	brne	.+2      	; 0x15ffa <SS80_COMMANDS+0xec>
   15ff8:	4e c0       	rjmp	.+156    	; 0x16096 <SS80_COMMANDS+0x188>
   15ffa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ffe:	85 ff       	sbrs	r24, 5
   16000:	0a c0       	rjmp	.+20     	; 0x16016 <SS80_COMMANDS+0x108>
   16002:	87 ec       	ldi	r24, 0xC7	; 199
   16004:	9d e1       	ldi	r25, 0x1D	; 29
   16006:	a0 e0       	ldi	r26, 0x00	; 0
   16008:	ed b7       	in	r30, 0x3d	; 61
   1600a:	fe b7       	in	r31, 0x3e	; 62
   1600c:	81 83       	std	Z+1, r24	; 0x01
   1600e:	92 83       	std	Z+2, r25	; 0x02
   16010:	a3 83       	std	Z+3, r26	; 0x03
   16012:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   16016:	e0 91 66 19 	lds	r30, 0x1966	; 0x801966 <SS80p>
   1601a:	f0 91 67 19 	lds	r31, 0x1967	; 0x801967 <SS80p+0x1>
   1601e:	81 81       	ldd	r24, Z+1	; 0x01
   16020:	90 e0       	ldi	r25, 0x00	; 0
   16022:	0e 94 d1 86 	call	0x10da2	; 0x10da2 <gpib_disable_PPR>
   16026:	1d dc       	rcall	.-1990   	; 0x15862 <SS80_Amigo_Clear>
   16028:	18 c0       	rjmp	.+48     	; 0x1605a <SS80_COMMANDS+0x14c>
   1602a:	12 37       	cpi	r17, 0x72	; 114
   1602c:	c1 f4       	brne	.+48     	; 0x1605e <SS80_COMMANDS+0x150>
   1602e:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   16032:	90 e0       	ldi	r25, 0x00	; 0
   16034:	0e 94 ed 8c 	call	0x119da	; 0x119da <SS80_is_MLA>
   16038:	89 2b       	or	r24, r25
   1603a:	89 f0       	breq	.+34     	; 0x1605e <SS80_COMMANDS+0x150>
   1603c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16040:	85 ff       	sbrs	r24, 5
   16042:	0a c0       	rjmp	.+20     	; 0x16058 <SS80_COMMANDS+0x14a>
   16044:	83 eb       	ldi	r24, 0xB3	; 179
   16046:	9d e1       	ldi	r25, 0x1D	; 29
   16048:	a0 e0       	ldi	r26, 0x00	; 0
   1604a:	ed b7       	in	r30, 0x3d	; 61
   1604c:	fe b7       	in	r31, 0x3e	; 62
   1604e:	81 83       	std	Z+1, r24	; 0x01
   16050:	92 83       	std	Z+2, r25	; 0x02
   16052:	a3 83       	std	Z+3, r26	; 0x03
   16054:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   16058:	58 dc       	rcall	.-1872   	; 0x1590a <SS80_Transparent_State>
   1605a:	ec 01       	movw	r28, r24
   1605c:	3b c0       	rjmp	.+118    	; 0x160d4 <SS80_COMMANDS+0x1c6>
   1605e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16062:	80 ff       	sbrs	r24, 0
   16064:	18 c0       	rjmp	.+48     	; 0x16096 <SS80_COMMANDS+0x188>
   16066:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   1606a:	90 e0       	ldi	r25, 0x00	; 0
   1606c:	ed b7       	in	r30, 0x3d	; 61
   1606e:	fe b7       	in	r31, 0x3e	; 62
   16070:	91 87       	std	Z+9, r25	; 0x09
   16072:	80 87       	std	Z+8, r24	; 0x08
   16074:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   16078:	90 e0       	ldi	r25, 0x00	; 0
   1607a:	97 83       	std	Z+7, r25	; 0x07
   1607c:	86 83       	std	Z+6, r24	; 0x06
   1607e:	81 2f       	mov	r24, r17
   16080:	90 e0       	ldi	r25, 0x00	; 0
   16082:	95 83       	std	Z+5, r25	; 0x05
   16084:	84 83       	std	Z+4, r24	; 0x04
   16086:	8f e7       	ldi	r24, 0x7F	; 127
   16088:	9d e1       	ldi	r25, 0x1D	; 29
   1608a:	a0 e0       	ldi	r26, 0x00	; 0
   1608c:	81 83       	std	Z+1, r24	; 0x01
   1608e:	92 83       	std	Z+2, r25	; 0x02
   16090:	a3 83       	std	Z+3, r26	; 0x03
   16092:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   16096:	c0 e0       	ldi	r28, 0x00	; 0
   16098:	d0 e0       	ldi	r29, 0x00	; 0
   1609a:	1c c0       	rjmp	.+56     	; 0x160d4 <SS80_COMMANDS+0x1c6>
   1609c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   160a0:	80 ff       	sbrs	r24, 0
   160a2:	f9 cf       	rjmp	.-14     	; 0x16096 <SS80_COMMANDS+0x188>
   160a4:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   160a8:	90 e0       	ldi	r25, 0x00	; 0
   160aa:	ed b7       	in	r30, 0x3d	; 61
   160ac:	fe b7       	in	r31, 0x3e	; 62
   160ae:	91 87       	std	Z+9, r25	; 0x09
   160b0:	80 87       	std	Z+8, r24	; 0x08
   160b2:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   160b6:	90 e0       	ldi	r25, 0x00	; 0
   160b8:	97 83       	std	Z+7, r25	; 0x07
   160ba:	86 83       	std	Z+6, r24	; 0x06
   160bc:	81 2f       	mov	r24, r17
   160be:	90 e0       	ldi	r25, 0x00	; 0
   160c0:	95 83       	std	Z+5, r25	; 0x05
   160c2:	84 83       	std	Z+4, r24	; 0x04
   160c4:	8b e4       	ldi	r24, 0x4B	; 75
   160c6:	9d e1       	ldi	r25, 0x1D	; 29
   160c8:	a0 e0       	ldi	r26, 0x00	; 0
   160ca:	81 83       	std	Z+1, r24	; 0x01
   160cc:	92 83       	std	Z+2, r25	; 0x02
   160ce:	a3 83       	std	Z+3, r26	; 0x03
   160d0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   160d4:	ce 01       	movw	r24, r28
   160d6:	cd b7       	in	r28, 0x3d	; 61
   160d8:	de b7       	in	r29, 0x3e	; 62
   160da:	29 96       	adiw	r28, 0x09	; 9
   160dc:	e3 e0       	ldi	r30, 0x03	; 3
   160de:	0c 94 fa e2 	jmp	0x1c5f4	; 0x1c5f4 <__epilogue_restores__+0x1e>

000160e2 <amigo_overflow_check>:
   160e2:	cf 92       	push	r12
   160e4:	df 92       	push	r13
   160e6:	ef 92       	push	r14
   160e8:	0f 93       	push	r16
   160ea:	1f 93       	push	r17
   160ec:	cf 93       	push	r28
   160ee:	df 93       	push	r29
   160f0:	00 d0       	rcall	.+0      	; 0x160f2 <amigo_overflow_check+0x10>
   160f2:	00 d0       	rcall	.+0      	; 0x160f4 <amigo_overflow_check+0x12>
   160f4:	1f 92       	push	r1
   160f6:	ec 01       	movw	r28, r24
   160f8:	8b 01       	movw	r16, r22
   160fa:	80 e0       	ldi	r24, 0x00	; 0
   160fc:	90 e0       	ldi	r25, 0x00	; 0
   160fe:	23 ee       	ldi	r18, 0xE3	; 227
   16100:	3c e2       	ldi	r19, 0x2C	; 44
   16102:	69 01       	movw	r12, r18
   16104:	e1 2c       	mov	r14, r1
   16106:	2d 81       	ldd	r18, Y+5	; 0x05
   16108:	30 e0       	ldi	r19, 0x00	; 0
   1610a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   1610e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   16112:	40 85       	ldd	r20, Z+8	; 0x08
   16114:	51 85       	ldd	r21, Z+9	; 0x09
   16116:	24 17       	cp	r18, r20
   16118:	35 07       	cpc	r19, r21
   1611a:	64 f1       	brlt	.+88     	; 0x16174 <amigo_overflow_check+0x92>
   1611c:	1d 82       	std	Y+5, r1	; 0x05
   1611e:	2c 81       	ldd	r18, Y+4	; 0x04
   16120:	2f 5f       	subi	r18, 0xFF	; 255
   16122:	2c 83       	std	Y+4, r18	; 0x04
   16124:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   16128:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   1612c:	2c 81       	ldd	r18, Y+4	; 0x04
   1612e:	30 e0       	ldi	r19, 0x00	; 0
   16130:	42 85       	ldd	r20, Z+10	; 0x0a
   16132:	53 85       	ldd	r21, Z+11	; 0x0b
   16134:	24 17       	cp	r18, r20
   16136:	35 07       	cpc	r19, r21
   16138:	34 f3       	brlt	.-52     	; 0x16106 <amigo_overflow_check+0x24>
   1613a:	1c 82       	std	Y+4, r1	; 0x04
   1613c:	2b 81       	ldd	r18, Y+3	; 0x03
   1613e:	2f 5f       	subi	r18, 0xFF	; 255
   16140:	2b 83       	std	Y+3, r18	; 0x03
   16142:	30 e0       	ldi	r19, 0x00	; 0
   16144:	44 85       	ldd	r20, Z+12	; 0x0c
   16146:	55 85       	ldd	r21, Z+13	; 0x0d
   16148:	24 17       	cp	r18, r20
   1614a:	35 07       	cpc	r19, r21
   1614c:	5c f3       	brlt	.-42     	; 0x16124 <amigo_overflow_check+0x42>
   1614e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16152:	80 ff       	sbrs	r24, 0
   16154:	0c c0       	rjmp	.+24     	; 0x1616e <amigo_overflow_check+0x8c>
   16156:	01 15       	cp	r16, r1
   16158:	11 05       	cpc	r17, r1
   1615a:	49 f0       	breq	.+18     	; 0x1616e <amigo_overflow_check+0x8c>
   1615c:	ed b7       	in	r30, 0x3d	; 61
   1615e:	fe b7       	in	r31, 0x3e	; 62
   16160:	15 83       	std	Z+5, r17	; 0x05
   16162:	04 83       	std	Z+4, r16	; 0x04
   16164:	c1 82       	std	Z+1, r12	; 0x01
   16166:	d2 82       	std	Z+2, r13	; 0x02
   16168:	e3 82       	std	Z+3, r14	; 0x03
   1616a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1616e:	81 e0       	ldi	r24, 0x01	; 1
   16170:	90 e0       	ldi	r25, 0x00	; 0
   16172:	d8 cf       	rjmp	.-80     	; 0x16124 <amigo_overflow_check+0x42>
   16174:	0f 90       	pop	r0
   16176:	0f 90       	pop	r0
   16178:	0f 90       	pop	r0
   1617a:	0f 90       	pop	r0
   1617c:	0f 90       	pop	r0
   1617e:	df 91       	pop	r29
   16180:	cf 91       	pop	r28
   16182:	1f 91       	pop	r17
   16184:	0f 91       	pop	r16
   16186:	ef 90       	pop	r14
   16188:	df 90       	pop	r13
   1618a:	cf 90       	pop	r12
   1618c:	08 95       	ret

0001618e <amigo_chs_to_logical>:
   1618e:	a1 e1       	ldi	r26, 0x11	; 17
   16190:	b0 e0       	ldi	r27, 0x00	; 0
   16192:	ed ec       	ldi	r30, 0xCD	; 205
   16194:	f0 eb       	ldi	r31, 0xB0	; 176
   16196:	0c 94 d3 e2 	jmp	0x1c5a6	; 0x1c5a6 <__prologue_saves__+0x8>
   1619a:	8b 01       	movw	r16, r22
   1619c:	60 91 62 19 	lds	r22, 0x1962	; 0x801962 <AMIGOp>
   161a0:	70 91 63 19 	lds	r23, 0x1963	; 0x801963 <AMIGOp+0x1>
   161a4:	fb 01       	movw	r30, r22
   161a6:	40 85       	ldd	r20, Z+8	; 0x08
   161a8:	51 85       	ldd	r21, Z+9	; 0x09
   161aa:	fc 01       	movw	r30, r24
   161ac:	c4 81       	ldd	r28, Z+4	; 0x04
   161ae:	d0 e0       	ldi	r29, 0x00	; 0
   161b0:	4c 9f       	mul	r20, r28
   161b2:	90 01       	movw	r18, r0
   161b4:	4d 9f       	mul	r20, r29
   161b6:	30 0d       	add	r19, r0
   161b8:	5c 9f       	mul	r21, r28
   161ba:	30 0d       	add	r19, r0
   161bc:	11 24       	eor	r1, r1
   161be:	49 01       	movw	r8, r18
   161c0:	33 0f       	add	r19, r19
   161c2:	aa 08       	sbc	r10, r10
   161c4:	bb 08       	sbc	r11, r11
   161c6:	63 80       	ldd	r6, Z+3	; 0x03
   161c8:	71 2c       	mov	r7, r1
   161ca:	fb 01       	movw	r30, r22
   161cc:	e2 84       	ldd	r14, Z+10	; 0x0a
   161ce:	f3 84       	ldd	r15, Z+11	; 0x0b
   161d0:	4e 9d       	mul	r20, r14
   161d2:	d0 01       	movw	r26, r0
   161d4:	4f 9d       	mul	r20, r15
   161d6:	b0 0d       	add	r27, r0
   161d8:	5e 9d       	mul	r21, r14
   161da:	b0 0d       	add	r27, r0
   161dc:	11 24       	eor	r1, r1
   161de:	a6 9d       	mul	r26, r6
   161e0:	90 01       	movw	r18, r0
   161e2:	a7 9d       	mul	r26, r7
   161e4:	30 0d       	add	r19, r0
   161e6:	b6 9d       	mul	r27, r6
   161e8:	30 0d       	add	r19, r0
   161ea:	11 24       	eor	r1, r1
   161ec:	69 01       	movw	r12, r18
   161ee:	33 0f       	add	r19, r19
   161f0:	ee 08       	sbc	r14, r14
   161f2:	ff 08       	sbc	r15, r15
   161f4:	8c 0c       	add	r8, r12
   161f6:	9d 1c       	adc	r9, r13
   161f8:	ae 1c       	adc	r10, r14
   161fa:	bf 1c       	adc	r11, r15
   161fc:	fc 01       	movw	r30, r24
   161fe:	f5 80       	ldd	r15, Z+5	; 0x05
   16200:	a5 01       	movw	r20, r10
   16202:	94 01       	movw	r18, r8
   16204:	2f 0d       	add	r18, r15
   16206:	31 1d       	adc	r19, r1
   16208:	41 1d       	adc	r20, r1
   1620a:	51 1d       	adc	r21, r1
   1620c:	fb 01       	movw	r30, r22
   1620e:	a6 81       	ldd	r26, Z+6	; 0x06
   16210:	b7 81       	ldd	r27, Z+7	; 0x07
   16212:	0e 94 b9 e2 	call	0x1c572	; 0x1c572 <__mulshisi3>
   16216:	4b 01       	movw	r8, r22
   16218:	5c 01       	movw	r10, r24
   1621a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1621e:	85 ff       	sbrs	r24, 5
   16220:	22 c0       	rjmp	.+68     	; 0x16266 <amigo_chs_to_logical+0xd8>
   16222:	8f 2d       	mov	r24, r15
   16224:	90 e0       	ldi	r25, 0x00	; 0
   16226:	ed b7       	in	r30, 0x3d	; 61
   16228:	fe b7       	in	r31, 0x3e	; 62
   1622a:	91 8b       	std	Z+17, r25	; 0x11
   1622c:	80 8b       	std	Z+16, r24	; 0x10
   1622e:	d7 87       	std	Z+15, r29	; 0x0f
   16230:	c6 87       	std	Z+14, r28	; 0x0e
   16232:	75 86       	std	Z+13, r7	; 0x0d
   16234:	64 86       	std	Z+12, r6	; 0x0c
   16236:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   1623a:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   1623e:	81 81       	ldd	r24, Z+1	; 0x01
   16240:	90 e0       	ldi	r25, 0x00	; 0
   16242:	ed b7       	in	r30, 0x3d	; 61
   16244:	fe b7       	in	r31, 0x3e	; 62
   16246:	93 87       	std	Z+11, r25	; 0x0b
   16248:	82 87       	std	Z+10, r24	; 0x0a
   1624a:	86 82       	std	Z+6, r8	; 0x06
   1624c:	97 82       	std	Z+7, r9	; 0x07
   1624e:	a0 86       	std	Z+8, r10	; 0x08
   16250:	b1 86       	std	Z+9, r11	; 0x09
   16252:	15 83       	std	Z+5, r17	; 0x05
   16254:	04 83       	std	Z+4, r16	; 0x04
   16256:	80 e9       	ldi	r24, 0x90	; 144
   16258:	9c e2       	ldi	r25, 0x2C	; 44
   1625a:	a0 e0       	ldi	r26, 0x00	; 0
   1625c:	81 83       	std	Z+1, r24	; 0x01
   1625e:	92 83       	std	Z+2, r25	; 0x02
   16260:	a3 83       	std	Z+3, r26	; 0x03
   16262:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   16266:	c5 01       	movw	r24, r10
   16268:	b4 01       	movw	r22, r8
   1626a:	cd b7       	in	r28, 0x3d	; 61
   1626c:	de b7       	in	r29, 0x3e	; 62
   1626e:	61 96       	adiw	r28, 0x11	; 17
   16270:	ee e0       	ldi	r30, 0x0E	; 14
   16272:	0c 94 ef e2 	jmp	0x1c5de	; 0x1c5de <__epilogue_restores__+0x8>

00016276 <amigo_init>:
   16276:	ef 92       	push	r14
   16278:	ff 92       	push	r15
   1627a:	0f 93       	push	r16
   1627c:	1f 93       	push	r17
   1627e:	cf 93       	push	r28
   16280:	df 93       	push	r29
   16282:	00 ec       	ldi	r16, 0xC0	; 192
   16284:	10 e2       	ldi	r17, 0x20	; 32
   16286:	cb e0       	ldi	r28, 0x0B	; 11
   16288:	d0 e0       	ldi	r29, 0x00	; 0
   1628a:	84 e0       	ldi	r24, 0x04	; 4
   1628c:	f8 2e       	mov	r15, r24
   1628e:	92 e0       	ldi	r25, 0x02	; 2
   16290:	e9 2e       	mov	r14, r25
   16292:	d8 01       	movw	r26, r16
   16294:	8c 91       	ld	r24, X
   16296:	81 30       	cpi	r24, 0x01	; 1
   16298:	31 f5       	brne	.+76     	; 0x162e6 <amigo_init+0x70>
   1629a:	ce 01       	movw	r24, r28
   1629c:	0e 94 f9 97 	call	0x12ff2	; 0x12ff2 <set_active_device>
   162a0:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   162a4:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   162a8:	10 82       	st	Z, r1
   162aa:	9f 01       	movw	r18, r30
   162ac:	27 5f       	subi	r18, 0xF7	; 247
   162ae:	3f 4f       	sbci	r19, 0xFF	; 255
   162b0:	d9 01       	movw	r26, r18
   162b2:	8f 2d       	mov	r24, r15
   162b4:	1d 92       	st	X+, r1
   162b6:	8a 95       	dec	r24
   162b8:	e9 f7       	brne	.-6      	; 0x162b4 <amigo_init+0x3e>
   162ba:	2c 5f       	subi	r18, 0xFC	; 252
   162bc:	3f 4f       	sbci	r19, 0xFF	; 255
   162be:	d9 01       	movw	r26, r18
   162c0:	8f 2d       	mov	r24, r15
   162c2:	1d 92       	st	X+, r1
   162c4:	8a 95       	dec	r24
   162c6:	e9 f7       	brne	.-6      	; 0x162c2 <amigo_init+0x4c>
   162c8:	11 82       	std	Z+1, r1	; 0x01
   162ca:	15 82       	std	Z+5, r1	; 0x05
   162cc:	14 82       	std	Z+4, r1	; 0x04
   162ce:	13 82       	std	Z+3, r1	; 0x03
   162d0:	e6 82       	std	Z+6, r14	; 0x06
   162d2:	10 86       	std	Z+8, r1	; 0x08
   162d4:	17 82       	std	Z+7, r1	; 0x07
   162d6:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   162da:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   162de:	81 81       	ldd	r24, Z+1	; 0x01
   162e0:	90 e0       	ldi	r25, 0x00	; 0
   162e2:	0e 94 d1 86 	call	0x10da2	; 0x10da2 <gpib_disable_PPR>
   162e6:	21 97       	sbiw	r28, 0x01	; 1
   162e8:	0b 52       	subi	r16, 0x2B	; 43
   162ea:	11 09       	sbc	r17, r1
   162ec:	cf 3f       	cpi	r28, 0xFF	; 255
   162ee:	af ef       	ldi	r26, 0xFF	; 255
   162f0:	da 07       	cpc	r29, r26
   162f2:	79 f6       	brne	.-98     	; 0x16292 <amigo_init+0x1c>
   162f4:	cd b7       	in	r28, 0x3d	; 61
   162f6:	de b7       	in	r29, 0x3e	; 62
   162f8:	e6 e0       	ldi	r30, 0x06	; 6
   162fa:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

000162fe <amigo_request_logical_address>:
   162fe:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   16302:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   16306:	15 86       	std	Z+13, r1	; 0x0d
   16308:	83 81       	ldd	r24, Z+3	; 0x03
   1630a:	86 87       	std	Z+14, r24	; 0x0e
   1630c:	84 81       	ldd	r24, Z+4	; 0x04
   1630e:	87 87       	std	Z+15, r24	; 0x0f
   16310:	85 81       	ldd	r24, Z+5	; 0x05
   16312:	80 8b       	std	Z+16, r24	; 0x10
   16314:	80 e0       	ldi	r24, 0x00	; 0
   16316:	90 e0       	ldi	r25, 0x00	; 0
   16318:	08 95       	ret

0001631a <amigo_request_status>:
   1631a:	00 d0       	rcall	.+0      	; 0x1631c <amigo_request_status+0x2>
   1631c:	1f 92       	push	r1
   1631e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16322:	85 ff       	sbrs	r24, 5
   16324:	0a c0       	rjmp	.+20     	; 0x1633a <amigo_request_status+0x20>
   16326:	83 e6       	ldi	r24, 0x63	; 99
   16328:	9d e2       	ldi	r25, 0x2D	; 45
   1632a:	a0 e0       	ldi	r26, 0x00	; 0
   1632c:	ed b7       	in	r30, 0x3d	; 61
   1632e:	fe b7       	in	r31, 0x3e	; 62
   16330:	81 83       	std	Z+1, r24	; 0x01
   16332:	92 83       	std	Z+2, r25	; 0x02
   16334:	a3 83       	std	Z+3, r26	; 0x03
   16336:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1633a:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   1633e:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   16342:	11 86       	std	Z+9, r1	; 0x09
   16344:	81 81       	ldd	r24, Z+1	; 0x01
   16346:	82 87       	std	Z+10, r24	; 0x0a
   16348:	8d e0       	ldi	r24, 0x0D	; 13
   1634a:	83 87       	std	Z+11, r24	; 0x0b
   1634c:	14 86       	std	Z+12, r1	; 0x0c
   1634e:	0e 94 8b 70 	call	0xe116	; 0xe116 <mmc_wp_status>
   16352:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   16356:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   1635a:	89 2b       	or	r24, r25
   1635c:	19 f0       	breq	.+6      	; 0x16364 <amigo_request_status+0x4a>
   1635e:	84 85       	ldd	r24, Z+12	; 0x0c
   16360:	80 66       	ori	r24, 0x60	; 96
   16362:	84 87       	std	Z+12, r24	; 0x0c
   16364:	86 81       	ldd	r24, Z+6	; 0x06
   16366:	82 30       	cpi	r24, 0x02	; 2
   16368:	31 f4       	brne	.+12     	; 0x16376 <amigo_request_status+0x5c>
   1636a:	83 e1       	ldi	r24, 0x13	; 19
   1636c:	81 87       	std	Z+9, r24	; 0x09
   1636e:	84 85       	ldd	r24, Z+12	; 0x0c
   16370:	88 60       	ori	r24, 0x08	; 8
   16372:	84 87       	std	Z+12, r24	; 0x0c
   16374:	21 c0       	rjmp	.+66     	; 0x163b8 <amigo_request_status+0x9e>
   16376:	27 81       	ldd	r18, Z+7	; 0x07
   16378:	30 85       	ldd	r19, Z+8	; 0x08
   1637a:	21 15       	cp	r18, r1
   1637c:	31 05       	cpc	r19, r1
   1637e:	11 f4       	brne	.+4      	; 0x16384 <amigo_request_status+0x6a>
   16380:	81 30       	cpi	r24, 0x01	; 1
   16382:	d1 f4       	brne	.+52     	; 0x163b8 <amigo_request_status+0x9e>
   16384:	26 fd       	sbrc	r18, 6
   16386:	0c c0       	rjmp	.+24     	; 0x163a0 <amigo_request_status+0x86>
   16388:	25 ff       	sbrs	r18, 5
   1638a:	03 c0       	rjmp	.+6      	; 0x16392 <amigo_request_status+0x78>
   1638c:	8a e0       	ldi	r24, 0x0A	; 10
   1638e:	81 87       	std	Z+9, r24	; 0x09
   16390:	0d c0       	rjmp	.+26     	; 0x163ac <amigo_request_status+0x92>
   16392:	84 85       	ldd	r24, Z+12	; 0x0c
   16394:	24 ff       	sbrs	r18, 4
   16396:	02 c0       	rjmp	.+4      	; 0x1639c <amigo_request_status+0x82>
   16398:	83 60       	ori	r24, 0x03	; 3
   1639a:	07 c0       	rjmp	.+14     	; 0x163aa <amigo_request_status+0x90>
   1639c:	21 ff       	sbrs	r18, 1
   1639e:	02 c0       	rjmp	.+4      	; 0x163a4 <amigo_request_status+0x8a>
   163a0:	83 e1       	ldi	r24, 0x13	; 19
   163a2:	f5 cf       	rjmp	.-22     	; 0x1638e <amigo_request_status+0x74>
   163a4:	22 ff       	sbrs	r18, 2
   163a6:	02 c0       	rjmp	.+4      	; 0x163ac <amigo_request_status+0x92>
   163a8:	84 60       	ori	r24, 0x04	; 4
   163aa:	84 87       	std	Z+12, r24	; 0x0c
   163ac:	84 85       	ldd	r24, Z+12	; 0x0c
   163ae:	80 61       	ori	r24, 0x10	; 16
   163b0:	84 87       	std	Z+12, r24	; 0x0c
   163b2:	83 85       	ldd	r24, Z+11	; 0x0b
   163b4:	80 68       	ori	r24, 0x80	; 128
   163b6:	83 87       	std	Z+11, r24	; 0x0b
   163b8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   163bc:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   163c0:	81 81       	ldd	r24, Z+1	; 0x01
   163c2:	90 e0       	ldi	r25, 0x00	; 0
   163c4:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
   163c8:	80 e0       	ldi	r24, 0x00	; 0
   163ca:	90 e0       	ldi	r25, 0x00	; 0
   163cc:	0f 90       	pop	r0
   163ce:	0f 90       	pop	r0
   163d0:	0f 90       	pop	r0
   163d2:	08 95       	ret

000163d4 <amigo_send_logical_address>:
   163d4:	a5 e0       	ldi	r26, 0x05	; 5
   163d6:	b0 e0       	ldi	r27, 0x00	; 0
   163d8:	e0 ef       	ldi	r30, 0xF0	; 240
   163da:	f1 eb       	ldi	r31, 0xB1	; 177
   163dc:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
   163e0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   163e4:	85 ff       	sbrs	r24, 5
   163e6:	0a c0       	rjmp	.+20     	; 0x163fc <amigo_send_logical_address+0x28>
   163e8:	85 e4       	ldi	r24, 0x45	; 69
   163ea:	9d e2       	ldi	r25, 0x2D	; 45
   163ec:	a0 e0       	ldi	r26, 0x00	; 0
   163ee:	ed b7       	in	r30, 0x3d	; 61
   163f0:	fe b7       	in	r31, 0x3e	; 62
   163f2:	81 83       	std	Z+1, r24	; 0x01
   163f4:	92 83       	std	Z+2, r25	; 0x02
   163f6:	a3 83       	std	Z+3, r26	; 0x03
   163f8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   163fc:	80 e0       	ldi	r24, 0x00	; 0
   163fe:	91 e0       	ldi	r25, 0x01	; 1
   16400:	9d 83       	std	Y+5, r25	; 0x05
   16402:	8c 83       	std	Y+4, r24	; 0x04
   16404:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <AMIGOs>
   16408:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <AMIGOs+0x1>
   1640c:	ae 01       	movw	r20, r28
   1640e:	4c 5f       	subi	r20, 0xFC	; 252
   16410:	5f 4f       	sbci	r21, 0xFF	; 255
   16412:	64 e0       	ldi	r22, 0x04	; 4
   16414:	70 e0       	ldi	r23, 0x00	; 0
   16416:	0d 96       	adiw	r24, 0x0d	; 13
   16418:	0e 94 2b 8c 	call	0x11856	; 0x11856 <gpib_write_str>
   1641c:	2c 81       	ldd	r18, Y+4	; 0x04
   1641e:	3d 81       	ldd	r19, Y+5	; 0x05
   16420:	22 27       	eor	r18, r18
   16422:	30 7d       	andi	r19, 0xD0	; 208
   16424:	23 2b       	or	r18, r19
   16426:	49 f0       	breq	.+18     	; 0x1643a <amigo_send_logical_address+0x66>
   16428:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   1642c:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   16430:	27 81       	ldd	r18, Z+7	; 0x07
   16432:	30 85       	ldd	r19, Z+8	; 0x08
   16434:	20 62       	ori	r18, 0x20	; 32
   16436:	30 87       	std	Z+8, r19	; 0x08
   16438:	27 83       	std	Z+7, r18	; 0x07
   1643a:	04 97       	sbiw	r24, 0x04	; 4
   1643c:	c9 f0       	breq	.+50     	; 0x16470 <amigo_send_logical_address+0x9c>
   1643e:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   16442:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   16446:	87 81       	ldd	r24, Z+7	; 0x07
   16448:	90 85       	ldd	r25, Z+8	; 0x08
   1644a:	80 62       	ori	r24, 0x20	; 32
   1644c:	90 87       	std	Z+8, r25	; 0x08
   1644e:	87 83       	std	Z+7, r24	; 0x07
   16450:	81 e0       	ldi	r24, 0x01	; 1
   16452:	86 83       	std	Z+6, r24	; 0x06
   16454:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16458:	80 ff       	sbrs	r24, 0
   1645a:	0a c0       	rjmp	.+20     	; 0x16470 <amigo_send_logical_address+0x9c>
   1645c:	8b e2       	ldi	r24, 0x2B	; 43
   1645e:	9d e2       	ldi	r25, 0x2D	; 45
   16460:	a0 e0       	ldi	r26, 0x00	; 0
   16462:	ed b7       	in	r30, 0x3d	; 61
   16464:	fe b7       	in	r31, 0x3e	; 62
   16466:	81 83       	std	Z+1, r24	; 0x01
   16468:	92 83       	std	Z+2, r25	; 0x02
   1646a:	a3 83       	std	Z+3, r26	; 0x03
   1646c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   16470:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   16474:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   16478:	81 81       	ldd	r24, Z+1	; 0x01
   1647a:	90 e0       	ldi	r25, 0x00	; 0
   1647c:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
   16480:	8c 81       	ldd	r24, Y+4	; 0x04
   16482:	9d 81       	ldd	r25, Y+5	; 0x05
   16484:	88 27       	eor	r24, r24
   16486:	90 7d       	andi	r25, 0xD0	; 208
   16488:	25 96       	adiw	r28, 0x05	; 5
   1648a:	e2 e0       	ldi	r30, 0x02	; 2
   1648c:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00016490 <amigo_send_status>:
   16490:	a5 e0       	ldi	r26, 0x05	; 5
   16492:	b0 e0       	ldi	r27, 0x00	; 0
   16494:	ee e4       	ldi	r30, 0x4E	; 78
   16496:	f2 eb       	ldi	r31, 0xB2	; 178
   16498:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
   1649c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   164a0:	85 ff       	sbrs	r24, 5
   164a2:	0a c0       	rjmp	.+20     	; 0x164b8 <amigo_send_status+0x28>
   164a4:	86 e1       	ldi	r24, 0x16	; 22
   164a6:	9d e2       	ldi	r25, 0x2D	; 45
   164a8:	a0 e0       	ldi	r26, 0x00	; 0
   164aa:	ed b7       	in	r30, 0x3d	; 61
   164ac:	fe b7       	in	r31, 0x3e	; 62
   164ae:	81 83       	std	Z+1, r24	; 0x01
   164b0:	92 83       	std	Z+2, r25	; 0x02
   164b2:	a3 83       	std	Z+3, r26	; 0x03
   164b4:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   164b8:	80 e0       	ldi	r24, 0x00	; 0
   164ba:	91 e0       	ldi	r25, 0x01	; 1
   164bc:	9d 83       	std	Y+5, r25	; 0x05
   164be:	8c 83       	std	Y+4, r24	; 0x04
   164c0:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <AMIGOs>
   164c4:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <AMIGOs+0x1>
   164c8:	ae 01       	movw	r20, r28
   164ca:	4c 5f       	subi	r20, 0xFC	; 252
   164cc:	5f 4f       	sbci	r21, 0xFF	; 255
   164ce:	64 e0       	ldi	r22, 0x04	; 4
   164d0:	70 e0       	ldi	r23, 0x00	; 0
   164d2:	09 96       	adiw	r24, 0x09	; 9
   164d4:	0e 94 2b 8c 	call	0x11856	; 0x11856 <gpib_write_str>
   164d8:	2c 81       	ldd	r18, Y+4	; 0x04
   164da:	3d 81       	ldd	r19, Y+5	; 0x05
   164dc:	22 27       	eor	r18, r18
   164de:	30 7d       	andi	r19, 0xD0	; 208
   164e0:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   164e4:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   164e8:	23 2b       	or	r18, r19
   164ea:	29 f0       	breq	.+10     	; 0x164f6 <amigo_send_status+0x66>
   164ec:	27 81       	ldd	r18, Z+7	; 0x07
   164ee:	30 85       	ldd	r19, Z+8	; 0x08
   164f0:	20 62       	ori	r18, 0x20	; 32
   164f2:	30 87       	std	Z+8, r19	; 0x08
   164f4:	27 83       	std	Z+7, r18	; 0x07
   164f6:	04 97       	sbiw	r24, 0x04	; 4
   164f8:	b1 f0       	breq	.+44     	; 0x16526 <amigo_send_status+0x96>
   164fa:	87 81       	ldd	r24, Z+7	; 0x07
   164fc:	90 85       	ldd	r25, Z+8	; 0x08
   164fe:	80 62       	ori	r24, 0x20	; 32
   16500:	90 87       	std	Z+8, r25	; 0x08
   16502:	87 83       	std	Z+7, r24	; 0x07
   16504:	81 e0       	ldi	r24, 0x01	; 1
   16506:	86 83       	std	Z+6, r24	; 0x06
   16508:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1650c:	80 ff       	sbrs	r24, 0
   1650e:	0e c0       	rjmp	.+28     	; 0x1652c <amigo_send_status+0x9c>
   16510:	8c ef       	ldi	r24, 0xFC	; 252
   16512:	9c e2       	ldi	r25, 0x2C	; 44
   16514:	a0 e0       	ldi	r26, 0x00	; 0
   16516:	ed b7       	in	r30, 0x3d	; 61
   16518:	fe b7       	in	r31, 0x3e	; 62
   1651a:	81 83       	std	Z+1, r24	; 0x01
   1651c:	92 83       	std	Z+2, r25	; 0x02
   1651e:	a3 83       	std	Z+3, r26	; 0x03
   16520:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   16524:	03 c0       	rjmp	.+6      	; 0x1652c <amigo_send_status+0x9c>
   16526:	10 86       	std	Z+8, r1	; 0x08
   16528:	17 82       	std	Z+7, r1	; 0x07
   1652a:	16 82       	std	Z+6, r1	; 0x06
   1652c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   16530:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   16534:	81 81       	ldd	r24, Z+1	; 0x01
   16536:	90 e0       	ldi	r25, 0x00	; 0
   16538:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
   1653c:	8c 81       	ldd	r24, Y+4	; 0x04
   1653e:	9d 81       	ldd	r25, Y+5	; 0x05
   16540:	88 27       	eor	r24, r24
   16542:	90 7d       	andi	r25, 0xD0	; 208
   16544:	25 96       	adiw	r28, 0x05	; 5
   16546:	e2 e0       	ldi	r30, 0x02	; 2
   16548:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

0001654c <amigo_increment>:
   1654c:	a1 e1       	ldi	r26, 0x11	; 17
   1654e:	b0 e0       	ldi	r27, 0x00	; 0
   16550:	ec ea       	ldi	r30, 0xAC	; 172
   16552:	f2 eb       	ldi	r31, 0xB2	; 178
   16554:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
   16558:	bc 01       	movw	r22, r24
   1655a:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   1655e:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   16562:	91 e1       	ldi	r25, 0x11	; 17
   16564:	de 01       	movw	r26, r28
   16566:	11 96       	adiw	r26, 0x01	; 1
   16568:	01 90       	ld	r0, Z+
   1656a:	0d 92       	st	X+, r0
   1656c:	9a 95       	dec	r25
   1656e:	e1 f7       	brne	.-8      	; 0x16568 <amigo_increment+0x1c>
   16570:	9e 81       	ldd	r25, Y+6	; 0x06
   16572:	9f 5f       	subi	r25, 0xFF	; 255
   16574:	9e 83       	std	Y+6, r25	; 0x06
   16576:	ce 01       	movw	r24, r28
   16578:	01 96       	adiw	r24, 0x01	; 1
   1657a:	b3 dd       	rcall	.-1178   	; 0x160e2 <amigo_overflow_check>
   1657c:	00 97       	sbiw	r24, 0x00	; 0
   1657e:	59 f4       	brne	.+22     	; 0x16596 <amigo_increment+0x4a>
   16580:	a0 91 60 19 	lds	r26, 0x1960	; 0x801960 <AMIGOs>
   16584:	b0 91 61 19 	lds	r27, 0x1961	; 0x801961 <AMIGOs+0x1>
   16588:	21 e1       	ldi	r18, 0x11	; 17
   1658a:	fe 01       	movw	r30, r28
   1658c:	31 96       	adiw	r30, 0x01	; 1
   1658e:	01 90       	ld	r0, Z+
   16590:	0d 92       	st	X+, r0
   16592:	2a 95       	dec	r18
   16594:	e1 f7       	brne	.-8      	; 0x1658e <amigo_increment+0x42>
   16596:	61 96       	adiw	r28, 0x11	; 17
   16598:	e2 e0       	ldi	r30, 0x02	; 2
   1659a:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

0001659e <amigo_seek>:
   1659e:	0f 93       	push	r16
   165a0:	1f 93       	push	r17
   165a2:	cf 93       	push	r28
   165a4:	df 93       	push	r29
   165a6:	ec 01       	movw	r28, r24
   165a8:	6c e7       	ldi	r22, 0x7C	; 124
   165aa:	75 e1       	ldi	r23, 0x15	; 21
   165ac:	9a dd       	rcall	.-1228   	; 0x160e2 <amigo_overflow_check>
   165ae:	8c 01       	movw	r16, r24
   165b0:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   165b4:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   165b8:	89 2b       	or	r24, r25
   165ba:	41 f0       	breq	.+16     	; 0x165cc <amigo_seek+0x2e>
   165bc:	81 e0       	ldi	r24, 0x01	; 1
   165be:	86 83       	std	Z+6, r24	; 0x06
   165c0:	87 81       	ldd	r24, Z+7	; 0x07
   165c2:	90 85       	ldd	r25, Z+8	; 0x08
   165c4:	84 60       	ori	r24, 0x04	; 4
   165c6:	90 87       	std	Z+8, r25	; 0x08
   165c8:	87 83       	std	Z+7, r24	; 0x07
   165ca:	06 c0       	rjmp	.+12     	; 0x165d8 <amigo_seek+0x3a>
   165cc:	8d 81       	ldd	r24, Y+5	; 0x05
   165ce:	85 83       	std	Z+5, r24	; 0x05
   165d0:	8c 81       	ldd	r24, Y+4	; 0x04
   165d2:	84 83       	std	Z+4, r24	; 0x04
   165d4:	8b 81       	ldd	r24, Y+3	; 0x03
   165d6:	83 83       	std	Z+3, r24	; 0x03
   165d8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   165dc:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   165e0:	81 81       	ldd	r24, Z+1	; 0x01
   165e2:	90 e0       	ldi	r25, 0x00	; 0
   165e4:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
   165e8:	c8 01       	movw	r24, r16
   165ea:	df 91       	pop	r29
   165ec:	cf 91       	pop	r28
   165ee:	1f 91       	pop	r17
   165f0:	0f 91       	pop	r16
   165f2:	08 95       	ret

000165f4 <amigo_verify>:
   165f4:	8f 92       	push	r8
   165f6:	9f 92       	push	r9
   165f8:	af 92       	push	r10
   165fa:	bf 92       	push	r11
   165fc:	ef 92       	push	r14
   165fe:	ff 92       	push	r15
   16600:	0f 93       	push	r16
   16602:	1f 93       	push	r17
   16604:	cf 93       	push	r28
   16606:	df 93       	push	r29
   16608:	ad b7       	in	r26, 0x3d	; 61
   1660a:	be b7       	in	r27, 0x3e	; 62
   1660c:	19 97       	sbiw	r26, 0x09	; 9
   1660e:	0f b6       	in	r0, 0x3f	; 63
   16610:	f8 94       	cli
   16612:	be bf       	out	0x3e, r27	; 62
   16614:	0f be       	out	0x3f, r0	; 63
   16616:	ad bf       	out	0x3d, r26	; 61
   16618:	7c 01       	movw	r14, r24
   1661a:	61 e8       	ldi	r22, 0x81	; 129
   1661c:	75 e1       	ldi	r23, 0x15	; 21
   1661e:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <AMIGOs>
   16622:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <AMIGOs+0x1>
   16626:	b3 dd       	rcall	.-1178   	; 0x1618e <amigo_chs_to_logical>
   16628:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1662c:	25 ff       	sbrs	r18, 5
   1662e:	10 c0       	rjmp	.+32     	; 0x16650 <amigo_verify+0x5c>
   16630:	ed b7       	in	r30, 0x3d	; 61
   16632:	fe b7       	in	r31, 0x3e	; 62
   16634:	e0 86       	std	Z+8, r14	; 0x08
   16636:	f1 86       	std	Z+9, r15	; 0x09
   16638:	64 83       	std	Z+4, r22	; 0x04
   1663a:	75 83       	std	Z+5, r23	; 0x05
   1663c:	86 83       	std	Z+6, r24	; 0x06
   1663e:	97 83       	std	Z+7, r25	; 0x07
   16640:	8b eb       	ldi	r24, 0xBB	; 187
   16642:	9c e2       	ldi	r25, 0x2C	; 44
   16644:	a0 e0       	ldi	r26, 0x00	; 0
   16646:	81 83       	std	Z+1, r24	; 0x01
   16648:	92 83       	std	Z+2, r25	; 0x02
   1664a:	a3 83       	std	Z+3, r26	; 0x03
   1664c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   16650:	e7 01       	movw	r28, r14
   16652:	20 97       	sbiw	r28, 0x00	; 0
   16654:	09 f4       	brne	.+2      	; 0x16658 <amigo_verify+0x64>
   16656:	49 c0       	rjmp	.+146    	; 0x166ea <amigo_verify+0xf6>
   16658:	6e e8       	ldi	r22, 0x8E	; 142
   1665a:	75 e1       	ldi	r23, 0x15	; 21
   1665c:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <AMIGOs>
   16660:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <AMIGOs+0x1>
   16664:	94 dd       	rcall	.-1240   	; 0x1618e <amigo_chs_to_logical>
   16666:	4b 01       	movw	r8, r22
   16668:	5c 01       	movw	r10, r24
   1666a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1666e:	86 fd       	sbrc	r24, 6
   16670:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   16674:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   16678:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   1667c:	e0 90 60 19 	lds	r14, 0x1960	; 0x801960 <AMIGOs>
   16680:	f0 90 61 19 	lds	r15, 0x1961	; 0x801961 <AMIGOs+0x1>
   16684:	87 e0       	ldi	r24, 0x07	; 7
   16686:	e8 0e       	add	r14, r24
   16688:	f1 1c       	adc	r15, r1
   1668a:	06 81       	ldd	r16, Z+6	; 0x06
   1668c:	17 81       	ldd	r17, Z+7	; 0x07
   1668e:	2d ed       	ldi	r18, 0xDD	; 221
   16690:	3c e1       	ldi	r19, 0x1C	; 28
   16692:	b5 01       	movw	r22, r10
   16694:	a4 01       	movw	r20, r8
   16696:	82 81       	ldd	r24, Z+2	; 0x02
   16698:	93 81       	ldd	r25, Z+3	; 0x03
   1669a:	0e 94 2b 85 	call	0x10a56	; 0x10a56 <dbf_open_read>
   1669e:	7c 01       	movw	r14, r24
   166a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166a4:	86 ff       	sbrs	r24, 6
   166a6:	04 c0       	rjmp	.+8      	; 0x166b0 <amigo_verify+0xbc>
   166a8:	85 e9       	ldi	r24, 0x95	; 149
   166aa:	90 e1       	ldi	r25, 0x10	; 16
   166ac:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   166b0:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   166b4:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   166b8:	86 81       	ldd	r24, Z+6	; 0x06
   166ba:	97 81       	ldd	r25, Z+7	; 0x07
   166bc:	e8 16       	cp	r14, r24
   166be:	f9 06       	cpc	r15, r25
   166c0:	61 f0       	breq	.+24     	; 0x166da <amigo_verify+0xe6>
   166c2:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   166c6:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   166ca:	81 e0       	ldi	r24, 0x01	; 1
   166cc:	86 83       	std	Z+6, r24	; 0x06
   166ce:	87 81       	ldd	r24, Z+7	; 0x07
   166d0:	90 85       	ldd	r25, Z+8	; 0x08
   166d2:	81 60       	ori	r24, 0x01	; 1
   166d4:	90 87       	std	Z+8, r25	; 0x08
   166d6:	87 83       	std	Z+7, r24	; 0x07
   166d8:	0b c0       	rjmp	.+22     	; 0x166f0 <amigo_verify+0xfc>
   166da:	86 e9       	ldi	r24, 0x96	; 150
   166dc:	95 e1       	ldi	r25, 0x15	; 21
   166de:	36 df       	rcall	.-404    	; 0x1654c <amigo_increment>
   166e0:	21 97       	sbiw	r28, 0x01	; 1
   166e2:	89 2b       	or	r24, r25
   166e4:	09 f4       	brne	.+2      	; 0x166e8 <amigo_verify+0xf4>
   166e6:	b5 cf       	rjmp	.-150    	; 0x16652 <amigo_verify+0x5e>
   166e8:	03 c0       	rjmp	.+6      	; 0x166f0 <amigo_verify+0xfc>
   166ea:	c0 e0       	ldi	r28, 0x00	; 0
   166ec:	d0 e0       	ldi	r29, 0x00	; 0
   166ee:	02 c0       	rjmp	.+4      	; 0x166f4 <amigo_verify+0x100>
   166f0:	c1 e0       	ldi	r28, 0x01	; 1
   166f2:	d0 e0       	ldi	r29, 0x00	; 0
   166f4:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   166f8:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   166fc:	81 81       	ldd	r24, Z+1	; 0x01
   166fe:	90 e0       	ldi	r25, 0x00	; 0
   16700:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
   16704:	ce 01       	movw	r24, r28
   16706:	ad b7       	in	r26, 0x3d	; 61
   16708:	be b7       	in	r27, 0x3e	; 62
   1670a:	19 96       	adiw	r26, 0x09	; 9
   1670c:	0f b6       	in	r0, 0x3f	; 63
   1670e:	f8 94       	cli
   16710:	be bf       	out	0x3e, r27	; 62
   16712:	0f be       	out	0x3f, r0	; 63
   16714:	ad bf       	out	0x3d, r26	; 61
   16716:	df 91       	pop	r29
   16718:	cf 91       	pop	r28
   1671a:	1f 91       	pop	r17
   1671c:	0f 91       	pop	r16
   1671e:	ff 90       	pop	r15
   16720:	ef 90       	pop	r14
   16722:	bf 90       	pop	r11
   16724:	af 90       	pop	r10
   16726:	9f 90       	pop	r9
   16728:	8f 90       	pop	r8
   1672a:	08 95       	ret

0001672c <amigo_format>:
   1672c:	ef 92       	push	r14
   1672e:	ff 92       	push	r15
   16730:	0f 93       	push	r16
   16732:	1f 93       	push	r17
   16734:	cf 93       	push	r28
   16736:	df 93       	push	r29
   16738:	00 d0       	rcall	.+0      	; 0x1673a <amigo_format+0xe>
   1673a:	1f 92       	push	r1
   1673c:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   16740:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   16744:	15 82       	std	Z+5, r1	; 0x05
   16746:	14 82       	std	Z+4, r1	; 0x04
   16748:	13 82       	std	Z+3, r1	; 0x03
   1674a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   1674e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   16752:	46 81       	ldd	r20, Z+6	; 0x06
   16754:	57 81       	ldd	r21, Z+7	; 0x07
   16756:	68 2f       	mov	r22, r24
   16758:	70 e0       	ldi	r23, 0x00	; 0
   1675a:	8d ed       	ldi	r24, 0xDD	; 221
   1675c:	9c e1       	ldi	r25, 0x1C	; 28
   1675e:	0e 94 aa e7 	call	0x1cf54	; 0x1cf54 <memset>
   16762:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16766:	85 ff       	sbrs	r24, 5
   16768:	0a c0       	rjmp	.+20     	; 0x1677e <amigo_format+0x52>
   1676a:	80 e8       	ldi	r24, 0x80	; 128
   1676c:	9c e2       	ldi	r25, 0x2C	; 44
   1676e:	a0 e0       	ldi	r26, 0x00	; 0
   16770:	ed b7       	in	r30, 0x3d	; 61
   16772:	fe b7       	in	r31, 0x3e	; 62
   16774:	81 83       	std	Z+1, r24	; 0x01
   16776:	92 83       	std	Z+2, r25	; 0x02
   16778:	a3 83       	std	Z+3, r26	; 0x03
   1677a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1677e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16782:	86 fd       	sbrc	r24, 6
   16784:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   16788:	6d e9       	ldi	r22, 0x9D	; 157
   1678a:	75 e1       	ldi	r23, 0x15	; 21
   1678c:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <AMIGOs>
   16790:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <AMIGOs+0x1>
   16794:	fc dc       	rcall	.-1544   	; 0x1618e <amigo_chs_to_logical>
   16796:	ab 01       	movw	r20, r22
   16798:	bc 01       	movw	r22, r24
   1679a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   1679e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   167a2:	e0 90 60 19 	lds	r14, 0x1960	; 0x801960 <AMIGOs>
   167a6:	f0 90 61 19 	lds	r15, 0x1961	; 0x801961 <AMIGOs+0x1>
   167aa:	87 e0       	ldi	r24, 0x07	; 7
   167ac:	e8 0e       	add	r14, r24
   167ae:	f1 1c       	adc	r15, r1
   167b0:	06 81       	ldd	r16, Z+6	; 0x06
   167b2:	17 81       	ldd	r17, Z+7	; 0x07
   167b4:	2d ed       	ldi	r18, 0xDD	; 221
   167b6:	3c e1       	ldi	r19, 0x1C	; 28
   167b8:	82 81       	ldd	r24, Z+2	; 0x02
   167ba:	93 81       	ldd	r25, Z+3	; 0x03
   167bc:	0e 94 82 85 	call	0x10b04	; 0x10b04 <dbf_open_write>
   167c0:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   167c4:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   167c8:	26 81       	ldd	r18, Z+6	; 0x06
   167ca:	37 81       	ldd	r19, Z+7	; 0x07
   167cc:	82 17       	cp	r24, r18
   167ce:	93 07       	cpc	r25, r19
   167d0:	71 f0       	breq	.+28     	; 0x167ee <amigo_format+0xc2>
   167d2:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   167d6:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   167da:	87 81       	ldd	r24, Z+7	; 0x07
   167dc:	90 85       	ldd	r25, Z+8	; 0x08
   167de:	82 60       	ori	r24, 0x02	; 2
   167e0:	90 87       	std	Z+8, r25	; 0x08
   167e2:	87 83       	std	Z+7, r24	; 0x07
   167e4:	81 e0       	ldi	r24, 0x01	; 1
   167e6:	86 83       	std	Z+6, r24	; 0x06
   167e8:	c1 e0       	ldi	r28, 0x01	; 1
   167ea:	d0 e0       	ldi	r29, 0x00	; 0
   167ec:	0f c0       	rjmp	.+30     	; 0x1680c <amigo_format+0xe0>
   167ee:	80 e0       	ldi	r24, 0x00	; 0
   167f0:	90 e0       	ldi	r25, 0x00	; 0
   167f2:	ac de       	rcall	.-680    	; 0x1654c <amigo_increment>
   167f4:	89 2b       	or	r24, r25
   167f6:	41 f2       	breq	.-112    	; 0x16788 <amigo_format+0x5c>
   167f8:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   167fc:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   16800:	15 82       	std	Z+5, r1	; 0x05
   16802:	14 82       	std	Z+4, r1	; 0x04
   16804:	13 82       	std	Z+3, r1	; 0x03
   16806:	16 82       	std	Z+6, r1	; 0x06
   16808:	c0 e0       	ldi	r28, 0x00	; 0
   1680a:	d0 e0       	ldi	r29, 0x00	; 0
   1680c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16810:	86 ff       	sbrs	r24, 6
   16812:	04 c0       	rjmp	.+8      	; 0x1681c <amigo_format+0xf0>
   16814:	8d e9       	ldi	r24, 0x9D	; 157
   16816:	95 e1       	ldi	r25, 0x15	; 21
   16818:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   1681c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16820:	85 ff       	sbrs	r24, 5
   16822:	0a c0       	rjmp	.+20     	; 0x16838 <amigo_format+0x10c>
   16824:	8b e6       	ldi	r24, 0x6B	; 107
   16826:	9c e2       	ldi	r25, 0x2C	; 44
   16828:	a0 e0       	ldi	r26, 0x00	; 0
   1682a:	ed b7       	in	r30, 0x3d	; 61
   1682c:	fe b7       	in	r31, 0x3e	; 62
   1682e:	81 83       	std	Z+1, r24	; 0x01
   16830:	92 83       	std	Z+2, r25	; 0x02
   16832:	a3 83       	std	Z+3, r26	; 0x03
   16834:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   16838:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   1683c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   16840:	81 81       	ldd	r24, Z+1	; 0x01
   16842:	90 e0       	ldi	r25, 0x00	; 0
   16844:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
   16848:	ce 01       	movw	r24, r28
   1684a:	cd b7       	in	r28, 0x3d	; 61
   1684c:	de b7       	in	r29, 0x3e	; 62
   1684e:	23 96       	adiw	r28, 0x03	; 3
   16850:	e6 e0       	ldi	r30, 0x06	; 6
   16852:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

00016856 <amigo_buffered_read_command>:
   16856:	8f 92       	push	r8
   16858:	9f 92       	push	r9
   1685a:	af 92       	push	r10
   1685c:	bf 92       	push	r11
   1685e:	ef 92       	push	r14
   16860:	ff 92       	push	r15
   16862:	0f 93       	push	r16
   16864:	1f 93       	push	r17
   16866:	00 d0       	rcall	.+0      	; 0x16868 <amigo_buffered_read_command+0x12>
   16868:	00 d0       	rcall	.+0      	; 0x1686a <amigo_buffered_read_command+0x14>
   1686a:	1f 92       	push	r1
   1686c:	64 ea       	ldi	r22, 0xA4	; 164
   1686e:	75 e1       	ldi	r23, 0x15	; 21
   16870:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <AMIGOs>
   16874:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <AMIGOs+0x1>
   16878:	8a dc       	rcall	.-1772   	; 0x1618e <amigo_chs_to_logical>
   1687a:	4b 01       	movw	r8, r22
   1687c:	5c 01       	movw	r10, r24
   1687e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16882:	85 ff       	sbrs	r24, 5
   16884:	12 c0       	rjmp	.+36     	; 0x168aa <amigo_buffered_read_command+0x54>
   16886:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   1688a:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   1688e:	80 81       	ld	r24, Z
   16890:	90 e0       	ldi	r25, 0x00	; 0
   16892:	ed b7       	in	r30, 0x3d	; 61
   16894:	fe b7       	in	r31, 0x3e	; 62
   16896:	95 83       	std	Z+5, r25	; 0x05
   16898:	84 83       	std	Z+4, r24	; 0x04
   1689a:	89 e5       	ldi	r24, 0x59	; 89
   1689c:	9c e2       	ldi	r25, 0x2C	; 44
   1689e:	a0 e0       	ldi	r26, 0x00	; 0
   168a0:	81 83       	std	Z+1, r24	; 0x01
   168a2:	92 83       	std	Z+2, r25	; 0x02
   168a4:	a3 83       	std	Z+3, r26	; 0x03
   168a6:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   168aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   168ae:	86 fd       	sbrc	r24, 6
   168b0:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   168b4:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   168b8:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   168bc:	e0 90 60 19 	lds	r14, 0x1960	; 0x801960 <AMIGOs>
   168c0:	f0 90 61 19 	lds	r15, 0x1961	; 0x801961 <AMIGOs+0x1>
   168c4:	87 e0       	ldi	r24, 0x07	; 7
   168c6:	e8 0e       	add	r14, r24
   168c8:	f1 1c       	adc	r15, r1
   168ca:	06 81       	ldd	r16, Z+6	; 0x06
   168cc:	17 81       	ldd	r17, Z+7	; 0x07
   168ce:	2d ed       	ldi	r18, 0xDD	; 221
   168d0:	3c e1       	ldi	r19, 0x1C	; 28
   168d2:	b5 01       	movw	r22, r10
   168d4:	a4 01       	movw	r20, r8
   168d6:	82 81       	ldd	r24, Z+2	; 0x02
   168d8:	93 81       	ldd	r25, Z+3	; 0x03
   168da:	0e 94 2b 85 	call	0x10a56	; 0x10a56 <dbf_open_read>
   168de:	7c 01       	movw	r14, r24
   168e0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   168e4:	86 ff       	sbrs	r24, 6
   168e6:	04 c0       	rjmp	.+8      	; 0x168f0 <amigo_buffered_read_command+0x9a>
   168e8:	85 e9       	ldi	r24, 0x95	; 149
   168ea:	90 e1       	ldi	r25, 0x10	; 16
   168ec:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   168f0:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   168f4:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   168f8:	86 81       	ldd	r24, Z+6	; 0x06
   168fa:	97 81       	ldd	r25, Z+7	; 0x07
   168fc:	e8 16       	cp	r14, r24
   168fe:	f9 06       	cpc	r15, r25
   16900:	61 f0       	breq	.+24     	; 0x1691a <amigo_buffered_read_command+0xc4>
   16902:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   16906:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   1690a:	81 e0       	ldi	r24, 0x01	; 1
   1690c:	86 83       	std	Z+6, r24	; 0x06
   1690e:	87 81       	ldd	r24, Z+7	; 0x07
   16910:	90 85       	ldd	r25, Z+8	; 0x08
   16912:	81 60       	ori	r24, 0x01	; 1
   16914:	90 87       	std	Z+8, r25	; 0x08
   16916:	87 83       	std	Z+7, r24	; 0x07
   16918:	18 c0       	rjmp	.+48     	; 0x1694a <amigo_buffered_read_command+0xf4>
   1691a:	84 ea       	ldi	r24, 0xA4	; 164
   1691c:	95 e1       	ldi	r25, 0x15	; 21
   1691e:	16 de       	rcall	.-980    	; 0x1654c <amigo_increment>
   16920:	89 2b       	or	r24, r25
   16922:	59 f0       	breq	.+22     	; 0x1693a <amigo_buffered_read_command+0xe4>
   16924:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   16928:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   1692c:	81 e0       	ldi	r24, 0x01	; 1
   1692e:	86 83       	std	Z+6, r24	; 0x06
   16930:	87 81       	ldd	r24, Z+7	; 0x07
   16932:	90 85       	ldd	r25, Z+8	; 0x08
   16934:	84 60       	ori	r24, 0x04	; 4
   16936:	90 87       	std	Z+8, r25	; 0x08
   16938:	87 83       	std	Z+7, r24	; 0x07
   1693a:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   1693e:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   16942:	81 81       	ldd	r24, Z+1	; 0x01
   16944:	90 e0       	ldi	r25, 0x00	; 0
   16946:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
   1694a:	80 e0       	ldi	r24, 0x00	; 0
   1694c:	90 e0       	ldi	r25, 0x00	; 0
   1694e:	0f 90       	pop	r0
   16950:	0f 90       	pop	r0
   16952:	0f 90       	pop	r0
   16954:	0f 90       	pop	r0
   16956:	0f 90       	pop	r0
   16958:	1f 91       	pop	r17
   1695a:	0f 91       	pop	r16
   1695c:	ff 90       	pop	r15
   1695e:	ef 90       	pop	r14
   16960:	bf 90       	pop	r11
   16962:	af 90       	pop	r10
   16964:	9f 90       	pop	r9
   16966:	8f 90       	pop	r8
   16968:	08 95       	ret

0001696a <amigo_buffered_read_execute>:
   1696a:	a5 e0       	ldi	r26, 0x05	; 5
   1696c:	b0 e0       	ldi	r27, 0x00	; 0
   1696e:	eb eb       	ldi	r30, 0xBB	; 187
   16970:	f4 eb       	ldi	r31, 0xB4	; 180
   16972:	0c 94 dd e2 	jmp	0x1c5ba	; 0x1c5ba <__prologue_saves__+0x1c>
   16976:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1697a:	87 fd       	sbrc	r24, 7
   1697c:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   16980:	80 e0       	ldi	r24, 0x00	; 0
   16982:	91 e0       	ldi	r25, 0x01	; 1
   16984:	9d 83       	std	Y+5, r25	; 0x05
   16986:	8c 83       	std	Y+4, r24	; 0x04
   16988:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   1698c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   16990:	66 81       	ldd	r22, Z+6	; 0x06
   16992:	77 81       	ldd	r23, Z+7	; 0x07
   16994:	ae 01       	movw	r20, r28
   16996:	4c 5f       	subi	r20, 0xFC	; 252
   16998:	5f 4f       	sbci	r21, 0xFF	; 255
   1699a:	8d ed       	ldi	r24, 0xDD	; 221
   1699c:	9c e1       	ldi	r25, 0x1C	; 28
   1699e:	0e 94 2b 8c 	call	0x11856	; 0x11856 <gpib_write_str>
   169a2:	8c 01       	movw	r16, r24
   169a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   169a8:	87 ff       	sbrs	r24, 7
   169aa:	04 c0       	rjmp	.+8      	; 0x169b4 <amigo_buffered_read_execute+0x4a>
   169ac:	80 ea       	ldi	r24, 0xA0	; 160
   169ae:	90 e1       	ldi	r25, 0x10	; 16
   169b0:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   169b4:	8c 81       	ldd	r24, Y+4	; 0x04
   169b6:	9d 81       	ldd	r25, Y+5	; 0x05
   169b8:	88 27       	eor	r24, r24
   169ba:	90 7d       	andi	r25, 0xD0	; 208
   169bc:	89 2b       	or	r24, r25
   169be:	49 f4       	brne	.+18     	; 0x169d2 <amigo_buffered_read_execute+0x68>
   169c0:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   169c4:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   169c8:	86 81       	ldd	r24, Z+6	; 0x06
   169ca:	97 81       	ldd	r25, Z+7	; 0x07
   169cc:	08 17       	cp	r16, r24
   169ce:	19 07       	cpc	r17, r25
   169d0:	31 f1       	breq	.+76     	; 0x16a1e <amigo_buffered_read_execute+0xb4>
   169d2:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   169d6:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   169da:	81 e0       	ldi	r24, 0x01	; 1
   169dc:	86 83       	std	Z+6, r24	; 0x06
   169de:	87 81       	ldd	r24, Z+7	; 0x07
   169e0:	90 85       	ldd	r25, Z+8	; 0x08
   169e2:	80 62       	ori	r24, 0x20	; 32
   169e4:	90 87       	std	Z+8, r25	; 0x08
   169e6:	87 83       	std	Z+7, r24	; 0x07
   169e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   169ec:	80 ff       	sbrs	r24, 0
   169ee:	0a c0       	rjmp	.+20     	; 0x16a04 <amigo_buffered_read_execute+0x9a>
   169f0:	8f e3       	ldi	r24, 0x3F	; 63
   169f2:	9c e2       	ldi	r25, 0x2C	; 44
   169f4:	a0 e0       	ldi	r26, 0x00	; 0
   169f6:	ed b7       	in	r30, 0x3d	; 61
   169f8:	fe b7       	in	r31, 0x3e	; 62
   169fa:	81 83       	std	Z+1, r24	; 0x01
   169fc:	92 83       	std	Z+2, r25	; 0x02
   169fe:	a3 83       	std	Z+3, r26	; 0x03
   16a00:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   16a04:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   16a08:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   16a0c:	81 81       	ldd	r24, Z+1	; 0x01
   16a0e:	90 e0       	ldi	r25, 0x00	; 0
   16a10:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
   16a14:	8c 81       	ldd	r24, Y+4	; 0x04
   16a16:	9d 81       	ldd	r25, Y+5	; 0x05
   16a18:	88 27       	eor	r24, r24
   16a1a:	90 7d       	andi	r25, 0xD0	; 208
   16a1c:	06 c0       	rjmp	.+12     	; 0x16a2a <amigo_buffered_read_execute+0xc0>
   16a1e:	81 81       	ldd	r24, Z+1	; 0x01
   16a20:	90 e0       	ldi	r25, 0x00	; 0
   16a22:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
   16a26:	80 e0       	ldi	r24, 0x00	; 0
   16a28:	90 e0       	ldi	r25, 0x00	; 0
   16a2a:	25 96       	adiw	r28, 0x05	; 5
   16a2c:	e4 e0       	ldi	r30, 0x04	; 4
   16a2e:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

00016a32 <amigo_buffered_write>:
   16a32:	8f 92       	push	r8
   16a34:	9f 92       	push	r9
   16a36:	af 92       	push	r10
   16a38:	bf 92       	push	r11
   16a3a:	ef 92       	push	r14
   16a3c:	ff 92       	push	r15
   16a3e:	0f 93       	push	r16
   16a40:	1f 93       	push	r17
   16a42:	cf 93       	push	r28
   16a44:	df 93       	push	r29
   16a46:	cd b7       	in	r28, 0x3d	; 61
   16a48:	de b7       	in	r29, 0x3e	; 62
   16a4a:	27 97       	sbiw	r28, 0x07	; 7
   16a4c:	0f b6       	in	r0, 0x3f	; 63
   16a4e:	f8 94       	cli
   16a50:	de bf       	out	0x3e, r29	; 62
   16a52:	0f be       	out	0x3f, r0	; 63
   16a54:	cd bf       	out	0x3d, r28	; 61
   16a56:	62 eb       	ldi	r22, 0xB2	; 178
   16a58:	75 e1       	ldi	r23, 0x15	; 21
   16a5a:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <AMIGOs>
   16a5e:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <AMIGOs+0x1>
   16a62:	95 db       	rcall	.-2262   	; 0x1618e <amigo_chs_to_logical>
   16a64:	4b 01       	movw	r8, r22
   16a66:	5c 01       	movw	r10, r24
   16a68:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16a6c:	87 fd       	sbrc	r24, 7
   16a6e:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   16a72:	1f 82       	std	Y+7, r1	; 0x07
   16a74:	1e 82       	std	Y+6, r1	; 0x06
   16a76:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   16a7a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   16a7e:	66 81       	ldd	r22, Z+6	; 0x06
   16a80:	77 81       	ldd	r23, Z+7	; 0x07
   16a82:	ae 01       	movw	r20, r28
   16a84:	4a 5f       	subi	r20, 0xFA	; 250
   16a86:	5f 4f       	sbci	r21, 0xFF	; 255
   16a88:	8d ed       	ldi	r24, 0xDD	; 221
   16a8a:	9c e1       	ldi	r25, 0x1C	; 28
   16a8c:	0e 94 89 8b 	call	0x11712	; 0x11712 <gpib_read_str>
   16a90:	7c 01       	movw	r14, r24
   16a92:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16a96:	85 ff       	sbrs	r24, 5
   16a98:	12 c0       	rjmp	.+36     	; 0x16abe <amigo_buffered_write+0x8c>
   16a9a:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   16a9e:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   16aa2:	80 81       	ld	r24, Z
   16aa4:	90 e0       	ldi	r25, 0x00	; 0
   16aa6:	ed b7       	in	r30, 0x3d	; 61
   16aa8:	fe b7       	in	r31, 0x3e	; 62
   16aaa:	95 83       	std	Z+5, r25	; 0x05
   16aac:	84 83       	std	Z+4, r24	; 0x04
   16aae:	8d e2       	ldi	r24, 0x2D	; 45
   16ab0:	9c e2       	ldi	r25, 0x2C	; 44
   16ab2:	a0 e0       	ldi	r26, 0x00	; 0
   16ab4:	81 83       	std	Z+1, r24	; 0x01
   16ab6:	92 83       	std	Z+2, r25	; 0x02
   16ab8:	a3 83       	std	Z+3, r26	; 0x03
   16aba:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   16abe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ac2:	87 ff       	sbrs	r24, 7
   16ac4:	04 c0       	rjmp	.+8      	; 0x16ace <amigo_buffered_write+0x9c>
   16ac6:	81 ec       	ldi	r24, 0xC1	; 193
   16ac8:	95 e1       	ldi	r25, 0x15	; 21
   16aca:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   16ace:	8e 81       	ldd	r24, Y+6	; 0x06
   16ad0:	9f 81       	ldd	r25, Y+7	; 0x07
   16ad2:	88 27       	eor	r24, r24
   16ad4:	90 7d       	andi	r25, 0xD0	; 208
   16ad6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16ada:	89 2b       	or	r24, r25
   16adc:	49 f4       	brne	.+18     	; 0x16af0 <amigo_buffered_write+0xbe>
   16ade:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   16ae2:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   16ae6:	86 81       	ldd	r24, Z+6	; 0x06
   16ae8:	97 81       	ldd	r25, Z+7	; 0x07
   16aea:	e8 16       	cp	r14, r24
   16aec:	f9 06       	cpc	r15, r25
   16aee:	c1 f0       	breq	.+48     	; 0x16b20 <amigo_buffered_write+0xee>
   16af0:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   16af4:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   16af8:	81 e0       	ldi	r24, 0x01	; 1
   16afa:	86 83       	std	Z+6, r24	; 0x06
   16afc:	87 81       	ldd	r24, Z+7	; 0x07
   16afe:	90 85       	ldd	r25, Z+8	; 0x08
   16b00:	80 62       	ori	r24, 0x20	; 32
   16b02:	90 87       	std	Z+8, r25	; 0x08
   16b04:	87 83       	std	Z+7, r24	; 0x07
   16b06:	20 ff       	sbrs	r18, 0
   16b08:	4e c0       	rjmp	.+156    	; 0x16ba6 <amigo_buffered_write+0x174>
   16b0a:	8e e0       	ldi	r24, 0x0E	; 14
   16b0c:	9c e2       	ldi	r25, 0x2C	; 44
   16b0e:	a0 e0       	ldi	r26, 0x00	; 0
   16b10:	ed b7       	in	r30, 0x3d	; 61
   16b12:	fe b7       	in	r31, 0x3e	; 62
   16b14:	81 83       	std	Z+1, r24	; 0x01
   16b16:	92 83       	std	Z+2, r25	; 0x02
   16b18:	a3 83       	std	Z+3, r26	; 0x03
   16b1a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   16b1e:	43 c0       	rjmp	.+134    	; 0x16ba6 <amigo_buffered_write+0x174>
   16b20:	26 fd       	sbrc	r18, 6
   16b22:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
   16b26:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   16b2a:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   16b2e:	e0 90 60 19 	lds	r14, 0x1960	; 0x801960 <AMIGOs>
   16b32:	f0 90 61 19 	lds	r15, 0x1961	; 0x801961 <AMIGOs+0x1>
   16b36:	87 e0       	ldi	r24, 0x07	; 7
   16b38:	e8 0e       	add	r14, r24
   16b3a:	f1 1c       	adc	r15, r1
   16b3c:	06 81       	ldd	r16, Z+6	; 0x06
   16b3e:	17 81       	ldd	r17, Z+7	; 0x07
   16b40:	2d ed       	ldi	r18, 0xDD	; 221
   16b42:	3c e1       	ldi	r19, 0x1C	; 28
   16b44:	b5 01       	movw	r22, r10
   16b46:	a4 01       	movw	r20, r8
   16b48:	82 81       	ldd	r24, Z+2	; 0x02
   16b4a:	93 81       	ldd	r25, Z+3	; 0x03
   16b4c:	0e 94 82 85 	call	0x10b04	; 0x10b04 <dbf_open_write>
   16b50:	7c 01       	movw	r14, r24
   16b52:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16b56:	86 ff       	sbrs	r24, 6
   16b58:	04 c0       	rjmp	.+8      	; 0x16b62 <amigo_buffered_write+0x130>
   16b5a:	8a e8       	ldi	r24, 0x8A	; 138
   16b5c:	90 e1       	ldi	r25, 0x10	; 16
   16b5e:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
   16b62:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   16b66:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   16b6a:	86 81       	ldd	r24, Z+6	; 0x06
   16b6c:	97 81       	ldd	r25, Z+7	; 0x07
   16b6e:	e8 16       	cp	r14, r24
   16b70:	f9 06       	cpc	r15, r25
   16b72:	49 f0       	breq	.+18     	; 0x16b86 <amigo_buffered_write+0x154>
   16b74:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   16b78:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   16b7c:	81 e0       	ldi	r24, 0x01	; 1
   16b7e:	86 83       	std	Z+6, r24	; 0x06
   16b80:	80 e0       	ldi	r24, 0x00	; 0
   16b82:	90 e0       	ldi	r25, 0x00	; 0
   16b84:	1c c0       	rjmp	.+56     	; 0x16bbe <amigo_buffered_write+0x18c>
   16b86:	82 eb       	ldi	r24, 0xB2	; 178
   16b88:	95 e1       	ldi	r25, 0x15	; 21
   16b8a:	e0 dc       	rcall	.-1600   	; 0x1654c <amigo_increment>
   16b8c:	89 2b       	or	r24, r25
   16b8e:	59 f0       	breq	.+22     	; 0x16ba6 <amigo_buffered_write+0x174>
   16b90:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   16b94:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   16b98:	81 e0       	ldi	r24, 0x01	; 1
   16b9a:	86 83       	std	Z+6, r24	; 0x06
   16b9c:	87 81       	ldd	r24, Z+7	; 0x07
   16b9e:	90 85       	ldd	r25, Z+8	; 0x08
   16ba0:	84 60       	ori	r24, 0x04	; 4
   16ba2:	90 87       	std	Z+8, r25	; 0x08
   16ba4:	87 83       	std	Z+7, r24	; 0x07
   16ba6:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   16baa:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   16bae:	81 81       	ldd	r24, Z+1	; 0x01
   16bb0:	90 e0       	ldi	r25, 0x00	; 0
   16bb2:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
   16bb6:	8e 81       	ldd	r24, Y+6	; 0x06
   16bb8:	9f 81       	ldd	r25, Y+7	; 0x07
   16bba:	88 27       	eor	r24, r24
   16bbc:	90 7d       	andi	r25, 0xD0	; 208
   16bbe:	27 96       	adiw	r28, 0x07	; 7
   16bc0:	0f b6       	in	r0, 0x3f	; 63
   16bc2:	f8 94       	cli
   16bc4:	de bf       	out	0x3e, r29	; 62
   16bc6:	0f be       	out	0x3f, r0	; 63
   16bc8:	cd bf       	out	0x3d, r28	; 61
   16bca:	df 91       	pop	r29
   16bcc:	cf 91       	pop	r28
   16bce:	1f 91       	pop	r17
   16bd0:	0f 91       	pop	r16
   16bd2:	ff 90       	pop	r15
   16bd4:	ef 90       	pop	r14
   16bd6:	bf 90       	pop	r11
   16bd8:	af 90       	pop	r10
   16bda:	9f 90       	pop	r9
   16bdc:	8f 90       	pop	r8
   16bde:	08 95       	ret

00016be0 <amigo_cmd_dsj>:
   16be0:	a8 e0       	ldi	r26, 0x08	; 8
   16be2:	b0 e0       	ldi	r27, 0x00	; 0
   16be4:	e6 ef       	ldi	r30, 0xF6	; 246
   16be6:	f5 eb       	ldi	r31, 0xB5	; 181
   16be8:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
   16bec:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   16bf0:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   16bf4:	86 81       	ldd	r24, Z+6	; 0x06
   16bf6:	88 87       	std	Y+8, r24	; 0x08
   16bf8:	80 e0       	ldi	r24, 0x00	; 0
   16bfa:	91 e0       	ldi	r25, 0x01	; 1
   16bfc:	9f 83       	std	Y+7, r25	; 0x07
   16bfe:	8e 83       	std	Y+6, r24	; 0x06
   16c00:	ae 01       	movw	r20, r28
   16c02:	4a 5f       	subi	r20, 0xFA	; 250
   16c04:	5f 4f       	sbci	r21, 0xFF	; 255
   16c06:	61 e0       	ldi	r22, 0x01	; 1
   16c08:	70 e0       	ldi	r23, 0x00	; 0
   16c0a:	ce 01       	movw	r24, r28
   16c0c:	08 96       	adiw	r24, 0x08	; 8
   16c0e:	0e 94 2b 8c 	call	0x11856	; 0x11856 <gpib_write_str>
   16c12:	2e 81       	ldd	r18, Y+6	; 0x06
   16c14:	3f 81       	ldd	r19, Y+7	; 0x07
   16c16:	22 27       	eor	r18, r18
   16c18:	30 7d       	andi	r19, 0xD0	; 208
   16c1a:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   16c1e:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   16c22:	23 2b       	or	r18, r19
   16c24:	29 f0       	breq	.+10     	; 0x16c30 <amigo_cmd_dsj+0x50>
   16c26:	27 81       	ldd	r18, Z+7	; 0x07
   16c28:	30 85       	ldd	r19, Z+8	; 0x08
   16c2a:	20 62       	ori	r18, 0x20	; 32
   16c2c:	30 87       	std	Z+8, r19	; 0x08
   16c2e:	27 83       	std	Z+7, r18	; 0x07
   16c30:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16c34:	01 97       	sbiw	r24, 0x01	; 1
   16c36:	c1 f0       	breq	.+48     	; 0x16c68 <amigo_cmd_dsj+0x88>
   16c38:	81 e0       	ldi	r24, 0x01	; 1
   16c3a:	86 83       	std	Z+6, r24	; 0x06
   16c3c:	87 81       	ldd	r24, Z+7	; 0x07
   16c3e:	90 85       	ldd	r25, Z+8	; 0x08
   16c40:	80 62       	ori	r24, 0x20	; 32
   16c42:	90 87       	std	Z+8, r25	; 0x08
   16c44:	87 83       	std	Z+7, r24	; 0x07
   16c46:	20 ff       	sbrs	r18, 0
   16c48:	0a c0       	rjmp	.+20     	; 0x16c5e <amigo_cmd_dsj+0x7e>
   16c4a:	84 ef       	ldi	r24, 0xF4	; 244
   16c4c:	9b e2       	ldi	r25, 0x2B	; 43
   16c4e:	a0 e0       	ldi	r26, 0x00	; 0
   16c50:	ed b7       	in	r30, 0x3d	; 61
   16c52:	fe b7       	in	r31, 0x3e	; 62
   16c54:	81 83       	std	Z+1, r24	; 0x01
   16c56:	92 83       	std	Z+2, r25	; 0x02
   16c58:	a3 83       	std	Z+3, r26	; 0x03
   16c5a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   16c5e:	8e 81       	ldd	r24, Y+6	; 0x06
   16c60:	9f 81       	ldd	r25, Y+7	; 0x07
   16c62:	88 27       	eor	r24, r24
   16c64:	90 7d       	andi	r25, 0xD0	; 208
   16c66:	19 c0       	rjmp	.+50     	; 0x16c9a <amigo_cmd_dsj+0xba>
   16c68:	25 ff       	sbrs	r18, 5
   16c6a:	0e c0       	rjmp	.+28     	; 0x16c88 <amigo_cmd_dsj+0xa8>
   16c6c:	86 81       	ldd	r24, Z+6	; 0x06
   16c6e:	90 e0       	ldi	r25, 0x00	; 0
   16c70:	ed b7       	in	r30, 0x3d	; 61
   16c72:	fe b7       	in	r31, 0x3e	; 62
   16c74:	95 83       	std	Z+5, r25	; 0x05
   16c76:	84 83       	std	Z+4, r24	; 0x04
   16c78:	87 ee       	ldi	r24, 0xE7	; 231
   16c7a:	9b e2       	ldi	r25, 0x2B	; 43
   16c7c:	a0 e0       	ldi	r26, 0x00	; 0
   16c7e:	81 83       	std	Z+1, r24	; 0x01
   16c80:	92 83       	std	Z+2, r25	; 0x02
   16c82:	a3 83       	std	Z+3, r26	; 0x03
   16c84:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   16c88:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   16c8c:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   16c90:	16 82       	std	Z+6, r1	; 0x06
   16c92:	10 86       	std	Z+8, r1	; 0x08
   16c94:	17 82       	std	Z+7, r1	; 0x07
   16c96:	80 e0       	ldi	r24, 0x00	; 0
   16c98:	90 e0       	ldi	r25, 0x00	; 0
   16c9a:	28 96       	adiw	r28, 0x08	; 8
   16c9c:	e2 e0       	ldi	r30, 0x02	; 2
   16c9e:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00016ca2 <amigo_cmd_clear>:
   16ca2:	00 d0       	rcall	.+0      	; 0x16ca4 <amigo_cmd_clear+0x2>
   16ca4:	1f 92       	push	r1
   16ca6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16caa:	85 ff       	sbrs	r24, 5
   16cac:	0a c0       	rjmp	.+20     	; 0x16cc2 <amigo_cmd_clear+0x20>
   16cae:	88 ed       	ldi	r24, 0xD8	; 216
   16cb0:	9b e2       	ldi	r25, 0x2B	; 43
   16cb2:	a0 e0       	ldi	r26, 0x00	; 0
   16cb4:	ed b7       	in	r30, 0x3d	; 61
   16cb6:	fe b7       	in	r31, 0x3e	; 62
   16cb8:	81 83       	std	Z+1, r24	; 0x01
   16cba:	92 83       	std	Z+2, r25	; 0x02
   16cbc:	a3 83       	std	Z+3, r26	; 0x03
   16cbe:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   16cc2:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   16cc6:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   16cca:	15 82       	std	Z+5, r1	; 0x05
   16ccc:	14 82       	std	Z+4, r1	; 0x04
   16cce:	13 82       	std	Z+3, r1	; 0x03
   16cd0:	16 82       	std	Z+6, r1	; 0x06
   16cd2:	10 86       	std	Z+8, r1	; 0x08
   16cd4:	17 82       	std	Z+7, r1	; 0x07
   16cd6:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   16cda:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   16cde:	81 81       	ldd	r24, Z+1	; 0x01
   16ce0:	90 e0       	ldi	r25, 0x00	; 0
   16ce2:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
   16ce6:	80 e0       	ldi	r24, 0x00	; 0
   16ce8:	90 e0       	ldi	r25, 0x00	; 0
   16cea:	0f 90       	pop	r0
   16cec:	0f 90       	pop	r0
   16cee:	0f 90       	pop	r0
   16cf0:	08 95       	ret

00016cf2 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   16cf2:	af e0       	ldi	r26, 0x0F	; 15
   16cf4:	b0 e0       	ldi	r27, 0x00	; 0
   16cf6:	ef e7       	ldi	r30, 0x7F	; 127
   16cf8:	f6 eb       	ldi	r31, 0xB6	; 182
   16cfa:	0c 94 db e2 	jmp	0x1c5b6	; 0x1c5b6 <__prologue_saves__+0x18>
   16cfe:	c8 2f       	mov	r28, r24
   16d00:	e6 2e       	mov	r14, r22
   16d02:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   16d04:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   16d08:	90 e0       	ldi	r25, 0x00	; 0
   16d0a:	0e 94 20 8d 	call	0x11a40	; 0x11a40 <AMIGO_is_MLA>
   16d0e:	20 91 e1 1e 	lds	r18, 0x1EE1	; 0x801ee1 <talking>
   16d12:	f1 2c       	mov	r15, r1
   16d14:	d0 e0       	ldi	r29, 0x00	; 0
   16d16:	89 2b       	or	r24, r25
   16d18:	f1 f0       	breq	.+60     	; 0x16d56 <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16d1a:	82 2f       	mov	r24, r18
   16d1c:	90 e0       	ldi	r25, 0x00	; 0
   16d1e:	ed b7       	in	r30, 0x3d	; 61
   16d20:	fe b7       	in	r31, 0x3e	; 62
   16d22:	97 87       	std	Z+15, r25	; 0x0f
   16d24:	86 87       	std	Z+14, r24	; 0x0e
   16d26:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   16d2a:	90 e0       	ldi	r25, 0x00	; 0
   16d2c:	95 87       	std	Z+13, r25	; 0x0d
   16d2e:	84 87       	std	Z+12, r24	; 0x0c
   16d30:	13 87       	std	Z+11, r17	; 0x0b
   16d32:	02 87       	std	Z+10, r16	; 0x0a
   16d34:	f1 86       	std	Z+9, r15	; 0x09
   16d36:	e0 86       	std	Z+8, r14	; 0x08
   16d38:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   16d3c:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   16d40:	80 81       	ld	r24, Z
   16d42:	90 e0       	ldi	r25, 0x00	; 0
   16d44:	ed b7       	in	r30, 0x3d	; 61
   16d46:	fe b7       	in	r31, 0x3e	; 62
   16d48:	97 83       	std	Z+7, r25	; 0x07
   16d4a:	86 83       	std	Z+6, r24	; 0x06
   16d4c:	d5 83       	std	Z+5, r29	; 0x05
   16d4e:	c4 83       	std	Z+4, r28	; 0x04
   16d50:	81 e7       	ldi	r24, 0x71	; 113
   16d52:	9b e2       	ldi	r25, 0x2B	; 43
   16d54:	51 c0       	rjmp	.+162    	; 0x16df8 <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   16d56:	82 2f       	mov	r24, r18
   16d58:	90 e0       	ldi	r25, 0x00	; 0
   16d5a:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MTA>
   16d5e:	20 91 e3 1e 	lds	r18, 0x1EE3	; 0x801ee3 <listening>
   16d62:	30 91 e1 1e 	lds	r19, 0x1EE1	; 0x801ee1 <talking>
   16d66:	a0 91 60 19 	lds	r26, 0x1960	; 0x801960 <AMIGOs>
   16d6a:	b0 91 61 19 	lds	r27, 0x1961	; 0x801961 <AMIGOs+0x1>
   16d6e:	89 2b       	or	r24, r25
   16d70:	b1 f0       	breq	.+44     	; 0x16d9e <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16d72:	83 2f       	mov	r24, r19
   16d74:	90 e0       	ldi	r25, 0x00	; 0
   16d76:	ed b7       	in	r30, 0x3d	; 61
   16d78:	fe b7       	in	r31, 0x3e	; 62
   16d7a:	97 87       	std	Z+15, r25	; 0x0f
   16d7c:	86 87       	std	Z+14, r24	; 0x0e
   16d7e:	30 e0       	ldi	r19, 0x00	; 0
   16d80:	35 87       	std	Z+13, r19	; 0x0d
   16d82:	24 87       	std	Z+12, r18	; 0x0c
   16d84:	13 87       	std	Z+11, r17	; 0x0b
   16d86:	02 87       	std	Z+10, r16	; 0x0a
   16d88:	f1 86       	std	Z+9, r15	; 0x09
   16d8a:	e0 86       	std	Z+8, r14	; 0x08
   16d8c:	8c 91       	ld	r24, X
   16d8e:	90 e0       	ldi	r25, 0x00	; 0
   16d90:	97 83       	std	Z+7, r25	; 0x07
   16d92:	86 83       	std	Z+6, r24	; 0x06
   16d94:	d5 83       	std	Z+5, r29	; 0x05
   16d96:	c4 83       	std	Z+4, r28	; 0x04
   16d98:	8a e0       	ldi	r24, 0x0A	; 10
   16d9a:	9b e2       	ldi	r25, 0x2B	; 43
   16d9c:	2d c0       	rjmp	.+90     	; 0x16df8 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   16d9e:	3f 35       	cpi	r19, 0x5F	; 95
   16da0:	b1 f4       	brne	.+44     	; 0x16dce <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16da2:	8f e5       	ldi	r24, 0x5F	; 95
   16da4:	90 e0       	ldi	r25, 0x00	; 0
   16da6:	ed b7       	in	r30, 0x3d	; 61
   16da8:	fe b7       	in	r31, 0x3e	; 62
   16daa:	97 87       	std	Z+15, r25	; 0x0f
   16dac:	86 87       	std	Z+14, r24	; 0x0e
   16dae:	30 e0       	ldi	r19, 0x00	; 0
   16db0:	35 87       	std	Z+13, r19	; 0x0d
   16db2:	24 87       	std	Z+12, r18	; 0x0c
   16db4:	13 87       	std	Z+11, r17	; 0x0b
   16db6:	02 87       	std	Z+10, r16	; 0x0a
   16db8:	f1 86       	std	Z+9, r15	; 0x09
   16dba:	e0 86       	std	Z+8, r14	; 0x08
   16dbc:	8c 91       	ld	r24, X
   16dbe:	90 e0       	ldi	r25, 0x00	; 0
   16dc0:	97 83       	std	Z+7, r25	; 0x07
   16dc2:	86 83       	std	Z+6, r24	; 0x06
   16dc4:	d5 83       	std	Z+5, r29	; 0x05
   16dc6:	c4 83       	std	Z+4, r28	; 0x04
   16dc8:	83 ea       	ldi	r24, 0xA3	; 163
   16dca:	9a e2       	ldi	r25, 0x2A	; 42
   16dcc:	15 c0       	rjmp	.+42     	; 0x16df8 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16dce:	83 2f       	mov	r24, r19
   16dd0:	90 e0       	ldi	r25, 0x00	; 0
   16dd2:	ed b7       	in	r30, 0x3d	; 61
   16dd4:	fe b7       	in	r31, 0x3e	; 62
   16dd6:	97 87       	std	Z+15, r25	; 0x0f
   16dd8:	86 87       	std	Z+14, r24	; 0x0e
   16dda:	30 e0       	ldi	r19, 0x00	; 0
   16ddc:	35 87       	std	Z+13, r19	; 0x0d
   16dde:	24 87       	std	Z+12, r18	; 0x0c
   16de0:	13 87       	std	Z+11, r17	; 0x0b
   16de2:	02 87       	std	Z+10, r16	; 0x0a
   16de4:	f1 86       	std	Z+9, r15	; 0x09
   16de6:	e0 86       	std	Z+8, r14	; 0x08
   16de8:	8c 91       	ld	r24, X
   16dea:	90 e0       	ldi	r25, 0x00	; 0
   16dec:	97 83       	std	Z+7, r25	; 0x07
   16dee:	86 83       	std	Z+6, r24	; 0x06
   16df0:	d5 83       	std	Z+5, r29	; 0x05
   16df2:	c4 83       	std	Z+4, r28	; 0x04
   16df4:	8e e3       	ldi	r24, 0x3E	; 62
   16df6:	9a e2       	ldi	r25, 0x2A	; 42
   16df8:	a0 e0       	ldi	r26, 0x00	; 0
   16dfa:	81 83       	std	Z+1, r24	; 0x01
   16dfc:	92 83       	std	Z+2, r25	; 0x02
   16dfe:	a3 83       	std	Z+3, r26	; 0x03
   16e00:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16e04:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   16e08:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   16e0c:	81 81       	ldd	r24, Z+1	; 0x01
   16e0e:	90 e0       	ldi	r25, 0x00	; 0
   16e10:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
    return(0);
}
   16e14:	80 e0       	ldi	r24, 0x00	; 0
   16e16:	90 e0       	ldi	r25, 0x00	; 0
   16e18:	cd b7       	in	r28, 0x3d	; 61
   16e1a:	de b7       	in	r29, 0x3e	; 62
   16e1c:	2f 96       	adiw	r28, 0x0f	; 15
   16e1e:	e6 e0       	ldi	r30, 0x06	; 6
   16e20:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

00016e24 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   16e24:	ab e0       	ldi	r26, 0x0B	; 11
   16e26:	b0 e0       	ldi	r27, 0x00	; 0
   16e28:	e8 e1       	ldi	r30, 0x18	; 24
   16e2a:	f7 eb       	ldi	r31, 0xB7	; 183
   16e2c:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
   16e30:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   16e32:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   16e36:	90 e0       	ldi	r25, 0x00	; 0
   16e38:	0e 94 20 8d 	call	0x11a40	; 0x11a40 <AMIGO_is_MLA>
   16e3c:	20 91 e1 1e 	lds	r18, 0x1EE1	; 0x801ee1 <talking>
   16e40:	d0 e0       	ldi	r29, 0x00	; 0
   16e42:	89 2b       	or	r24, r25
   16e44:	d1 f0       	breq	.+52     	; 0x16e7a <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16e46:	82 2f       	mov	r24, r18
   16e48:	90 e0       	ldi	r25, 0x00	; 0
   16e4a:	ed b7       	in	r30, 0x3d	; 61
   16e4c:	fe b7       	in	r31, 0x3e	; 62
   16e4e:	93 87       	std	Z+11, r25	; 0x0b
   16e50:	82 87       	std	Z+10, r24	; 0x0a
   16e52:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   16e56:	90 e0       	ldi	r25, 0x00	; 0
   16e58:	91 87       	std	Z+9, r25	; 0x09
   16e5a:	80 87       	std	Z+8, r24	; 0x08
   16e5c:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   16e60:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   16e64:	80 81       	ld	r24, Z
   16e66:	90 e0       	ldi	r25, 0x00	; 0
   16e68:	ed b7       	in	r30, 0x3d	; 61
   16e6a:	fe b7       	in	r31, 0x3e	; 62
   16e6c:	97 83       	std	Z+7, r25	; 0x07
   16e6e:	86 83       	std	Z+6, r24	; 0x06
   16e70:	d5 83       	std	Z+5, r29	; 0x05
   16e72:	c4 83       	std	Z+4, r28	; 0x04
   16e74:	8e ee       	ldi	r24, 0xEE	; 238
   16e76:	99 e2       	ldi	r25, 0x29	; 41
   16e78:	43 c0       	rjmp	.+134    	; 0x16f00 <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   16e7a:	82 2f       	mov	r24, r18
   16e7c:	90 e0       	ldi	r25, 0x00	; 0
   16e7e:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MTA>
   16e82:	20 91 e3 1e 	lds	r18, 0x1EE3	; 0x801ee3 <listening>
   16e86:	40 91 e1 1e 	lds	r20, 0x1EE1	; 0x801ee1 <talking>
   16e8a:	a0 91 60 19 	lds	r26, 0x1960	; 0x801960 <AMIGOs>
   16e8e:	b0 91 61 19 	lds	r27, 0x1961	; 0x801961 <AMIGOs+0x1>
   16e92:	89 2b       	or	r24, r25
   16e94:	89 f0       	breq	.+34     	; 0x16eb8 <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16e96:	50 e0       	ldi	r21, 0x00	; 0
   16e98:	ed b7       	in	r30, 0x3d	; 61
   16e9a:	fe b7       	in	r31, 0x3e	; 62
   16e9c:	53 87       	std	Z+11, r21	; 0x0b
   16e9e:	42 87       	std	Z+10, r20	; 0x0a
   16ea0:	30 e0       	ldi	r19, 0x00	; 0
   16ea2:	31 87       	std	Z+9, r19	; 0x09
   16ea4:	20 87       	std	Z+8, r18	; 0x08
   16ea6:	8c 91       	ld	r24, X
   16ea8:	90 e0       	ldi	r25, 0x00	; 0
   16eaa:	97 83       	std	Z+7, r25	; 0x07
   16eac:	86 83       	std	Z+6, r24	; 0x06
   16eae:	d5 83       	std	Z+5, r29	; 0x05
   16eb0:	c4 83       	std	Z+4, r28	; 0x04
   16eb2:	8e e9       	ldi	r24, 0x9E	; 158
   16eb4:	99 e2       	ldi	r25, 0x29	; 41
   16eb6:	24 c0       	rjmp	.+72     	; 0x16f00 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   16eb8:	4f 35       	cpi	r20, 0x5F	; 95
   16eba:	91 f4       	brne	.+36     	; 0x16ee0 <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16ebc:	8f e5       	ldi	r24, 0x5F	; 95
   16ebe:	90 e0       	ldi	r25, 0x00	; 0
   16ec0:	ed b7       	in	r30, 0x3d	; 61
   16ec2:	fe b7       	in	r31, 0x3e	; 62
   16ec4:	93 87       	std	Z+11, r25	; 0x0b
   16ec6:	82 87       	std	Z+10, r24	; 0x0a
   16ec8:	30 e0       	ldi	r19, 0x00	; 0
   16eca:	31 87       	std	Z+9, r19	; 0x09
   16ecc:	20 87       	std	Z+8, r18	; 0x08
   16ece:	8c 91       	ld	r24, X
   16ed0:	90 e0       	ldi	r25, 0x00	; 0
   16ed2:	97 83       	std	Z+7, r25	; 0x07
   16ed4:	86 83       	std	Z+6, r24	; 0x06
   16ed6:	d5 83       	std	Z+5, r29	; 0x05
   16ed8:	c4 83       	std	Z+4, r28	; 0x04
   16eda:	8e e4       	ldi	r24, 0x4E	; 78
   16edc:	99 e2       	ldi	r25, 0x29	; 41
   16ede:	10 c0       	rjmp	.+32     	; 0x16f00 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16ee0:	50 e0       	ldi	r21, 0x00	; 0
   16ee2:	ed b7       	in	r30, 0x3d	; 61
   16ee4:	fe b7       	in	r31, 0x3e	; 62
   16ee6:	53 87       	std	Z+11, r21	; 0x0b
   16ee8:	42 87       	std	Z+10, r20	; 0x0a
   16eea:	30 e0       	ldi	r19, 0x00	; 0
   16eec:	31 87       	std	Z+9, r19	; 0x09
   16eee:	20 87       	std	Z+8, r18	; 0x08
   16ef0:	8c 91       	ld	r24, X
   16ef2:	90 e0       	ldi	r25, 0x00	; 0
   16ef4:	97 83       	std	Z+7, r25	; 0x07
   16ef6:	86 83       	std	Z+6, r24	; 0x06
   16ef8:	d5 83       	std	Z+5, r29	; 0x05
   16efa:	c4 83       	std	Z+4, r28	; 0x04
   16efc:	8d ef       	ldi	r24, 0xFD	; 253
   16efe:	98 e2       	ldi	r25, 0x28	; 40
   16f00:	a0 e0       	ldi	r26, 0x00	; 0
   16f02:	81 83       	std	Z+1, r24	; 0x01
   16f04:	92 83       	std	Z+2, r25	; 0x02
   16f06:	a3 83       	std	Z+3, r26	; 0x03
   16f08:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16f0c:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   16f10:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   16f14:	81 81       	ldd	r24, Z+1	; 0x01
   16f16:	90 e0       	ldi	r25, 0x00	; 0
   16f18:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
    return(0);
}
   16f1c:	80 e0       	ldi	r24, 0x00	; 0
   16f1e:	90 e0       	ldi	r25, 0x00	; 0
   16f20:	cd b7       	in	r28, 0x3d	; 61
   16f22:	de b7       	in	r29, 0x3e	; 62
   16f24:	2b 96       	adiw	r28, 0x0b	; 11
   16f26:	e2 e0       	ldi	r30, 0x02	; 2
   16f28:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00016f2c <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   16f2c:	8f 30       	cpi	r24, 0x0F	; 15
   16f2e:	29 f0       	breq	.+10     	; 0x16f3a <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   16f30:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   16f34:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   16f38:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   16f3a:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   16f3e:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   16f42:	81 81       	ldd	r24, Z+1	; 0x01
   16f44:	88 23       	and	r24, r24
   16f46:	29 f0       	breq	.+10     	; 0x16f52 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   16f48:	87 81       	ldd	r24, Z+7	; 0x07
   16f4a:	90 85       	ldd	r25, Z+8	; 0x08
   16f4c:	80 64       	ori	r24, 0x40	; 64
   16f4e:	90 87       	std	Z+8, r25	; 0x08
   16f50:	87 83       	std	Z+7, r24	; 0x07
   16f52:	08 95       	ret

00016f54 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   16f54:	ac e1       	ldi	r26, 0x1C	; 28
   16f56:	b0 e0       	ldi	r27, 0x00	; 0
   16f58:	e0 eb       	ldi	r30, 0xB0	; 176
   16f5a:	f7 eb       	ldi	r31, 0xB7	; 183
   16f5c:	0c 94 db e2 	jmp	0x1c5b6	; 0x1c5b6 <__prologue_saves__+0x18>
   16f60:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f62:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f66:	85 ff       	sbrs	r24, 5
   16f68:	16 c0       	rjmp	.+44     	; 0x16f96 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   16f6a:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   16f6e:	90 e0       	ldi	r25, 0x00	; 0
   16f70:	ed b7       	in	r30, 0x3d	; 61
   16f72:	fe b7       	in	r31, 0x3e	; 62
   16f74:	91 87       	std	Z+9, r25	; 0x09
   16f76:	80 87       	std	Z+8, r24	; 0x08
   16f78:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   16f7c:	90 e0       	ldi	r25, 0x00	; 0
   16f7e:	97 83       	std	Z+7, r25	; 0x07
   16f80:	86 83       	std	Z+6, r24	; 0x06
   16f82:	f5 82       	std	Z+5, r15	; 0x05
   16f84:	e4 82       	std	Z+4, r14	; 0x04
   16f86:	8b ec       	ldi	r24, 0xCB	; 203
   16f88:	98 e2       	ldi	r25, 0x28	; 40
   16f8a:	a0 e0       	ldi	r26, 0x00	; 0
   16f8c:	81 83       	std	Z+1, r24	; 0x01
   16f8e:	92 83       	std	Z+2, r25	; 0x02
   16f90:	a3 83       	std	Z+3, r26	; 0x03
   16f92:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   16f96:	fe e7       	ldi	r31, 0x7E	; 126
   16f98:	ef 16       	cp	r14, r31
   16f9a:	f1 04       	cpc	r15, r1
   16f9c:	f1 f5       	brne	.+124    	; 0x1701a <Amigo_Command+0xc6>
   16f9e:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   16fa2:	90 e0       	ldi	r25, 0x00	; 0
   16fa4:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MTA>
   16fa8:	89 2b       	or	r24, r25
   16faa:	09 f4       	brne	.+2      	; 0x16fae <Amigo_Command+0x5a>
   16fac:	86 c0       	rjmp	.+268    	; 0x170ba <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16fae:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   16fb2:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   16fb6:	81 81       	ldd	r24, Z+1	; 0x01
   16fb8:	90 e0       	ldi	r25, 0x00	; 0
   16fba:	0e 94 d1 86 	call	0x10da2	; 0x10da2 <gpib_disable_PPR>
        status = EOI_FLAG;
   16fbe:	80 e0       	ldi	r24, 0x00	; 0
   16fc0:	91 e0       	ldi	r25, 0x01	; 1
   16fc2:	9c 8f       	std	Y+28, r25	; 0x1c
   16fc4:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16fc6:	ae 01       	movw	r20, r28
   16fc8:	45 5e       	subi	r20, 0xE5	; 229
   16fca:	5f 4f       	sbci	r21, 0xFF	; 255
   16fcc:	60 e0       	ldi	r22, 0x00	; 0
   16fce:	72 e0       	ldi	r23, 0x02	; 2
   16fd0:	8d ed       	ldi	r24, 0xDD	; 221
   16fd2:	9c e1       	ldi	r25, 0x1C	; 28
   16fd4:	0e 94 2b 8c 	call	0x11856	; 0x11856 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16fd8:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   16fdc:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   16fe0:	81 81       	ldd	r24, Z+1	; 0x01
   16fe2:	90 e0       	ldi	r25, 0x00	; 0
   16fe4:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16fe8:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16fea:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16fec:	88 27       	eor	r24, r24
   16fee:	90 7d       	andi	r25, 0xD0	; 208
   16ff0:	89 2b       	or	r24, r25
   16ff2:	09 f4       	brne	.+2      	; 0x16ff6 <Amigo_Command+0xa2>
   16ff4:	89 c2       	rjmp	.+1298   	; 0x17508 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16ff6:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   16ffa:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   16ffe:	81 e0       	ldi	r24, 0x01	; 1
   17000:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   17002:	87 81       	ldd	r24, Z+7	; 0x07
   17004:	90 85       	ldd	r25, Z+8	; 0x08
   17006:	80 62       	ori	r24, 0x20	; 32
   17008:	90 87       	std	Z+8, r25	; 0x08
   1700a:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   1700c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17010:	80 ff       	sbrs	r24, 0
   17012:	7a c2       	rjmp	.+1268   	; 0x17508 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   17014:	89 ea       	ldi	r24, 0xA9	; 169
   17016:	98 e2       	ldi	r25, 0x28	; 40
   17018:	8e c0       	rjmp	.+284    	; 0x17136 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   1701a:	ff e7       	ldi	r31, 0x7F	; 127
   1701c:	ef 16       	cp	r14, r31
   1701e:	f1 04       	cpc	r15, r1
   17020:	09 f0       	breq	.+2      	; 0x17024 <Amigo_Command+0xd0>
   17022:	4b c0       	rjmp	.+150    	; 0x170ba <Amigo_Command+0x166>
   17024:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   17028:	90 e0       	ldi	r25, 0x00	; 0
   1702a:	0e 94 20 8d 	call	0x11a40	; 0x11a40 <AMIGO_is_MLA>
   1702e:	89 2b       	or	r24, r25
   17030:	09 f4       	brne	.+2      	; 0x17034 <Amigo_Command+0xe0>
   17032:	43 c0       	rjmp	.+134    	; 0x170ba <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17034:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   17038:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   1703c:	81 81       	ldd	r24, Z+1	; 0x01
   1703e:	90 e0       	ldi	r25, 0x00	; 0
   17040:	0e 94 d1 86 	call	0x10da2	; 0x10da2 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   17044:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17048:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   1704a:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   1704e:	80 e0       	ldi	r24, 0x00	; 0
   17050:	91 e0       	ldi	r25, 0x01	; 1
   17052:	9c 8f       	std	Y+28, r25	; 0x1c
   17054:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17056:	ae 01       	movw	r20, r28
   17058:	45 5e       	subi	r20, 0xE5	; 229
   1705a:	5f 4f       	sbci	r21, 0xFF	; 255
   1705c:	60 e0       	ldi	r22, 0x00	; 0
   1705e:	72 e0       	ldi	r23, 0x02	; 2
   17060:	8d ed       	ldi	r24, 0xDD	; 221
   17062:	9c e1       	ldi	r25, 0x1C	; 28
   17064:	0e 94 89 8b 	call	0x11712	; 0x11712 <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   17068:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1706c:	87 ff       	sbrs	r24, 7
   1706e:	04 c0       	rjmp	.+8      	; 0x17078 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   17070:	81 ec       	ldi	r24, 0xC1	; 193
   17072:	95 e1       	ldi	r25, 0x15	; 21
   17074:	0e 94 eb 85 	call	0x10bd6	; 0x10bd6 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17078:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   1707c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   17080:	81 81       	ldd	r24, Z+1	; 0x01
   17082:	90 e0       	ldi	r25, 0x00	; 0
   17084:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   17088:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1708a:	9c 8d       	ldd	r25, Y+28	; 0x1c
   1708c:	88 27       	eor	r24, r24
   1708e:	90 7d       	andi	r25, 0xD0	; 208
   17090:	89 2b       	or	r24, r25
   17092:	09 f4       	brne	.+2      	; 0x17096 <Amigo_Command+0x142>
   17094:	39 c2       	rjmp	.+1138   	; 0x17508 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   17096:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   1709a:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   1709e:	81 e0       	ldi	r24, 0x01	; 1
   170a0:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   170a2:	87 81       	ldd	r24, Z+7	; 0x07
   170a4:	90 85       	ldd	r25, Z+8	; 0x08
   170a6:	80 62       	ori	r24, 0x20	; 32
   170a8:	90 87       	std	Z+8, r25	; 0x08
   170aa:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   170ac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   170b0:	80 ff       	sbrs	r24, 0
   170b2:	2a c2       	rjmp	.+1108   	; 0x17508 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   170b4:	88 e8       	ldi	r24, 0x88	; 136
   170b6:	98 e2       	ldi	r25, 0x28	; 40
   170b8:	3e c0       	rjmp	.+124    	; 0x17136 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   170ba:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   170be:	90 e0       	ldi	r25, 0x00	; 0
   170c0:	0e 94 20 8d 	call	0x11a40	; 0x11a40 <AMIGO_is_MLA>
   170c4:	89 2b       	or	r24, r25
   170c6:	19 f4       	brne	.+6      	; 0x170ce <Amigo_Command+0x17a>
        return(0);
   170c8:	80 e0       	ldi	r24, 0x00	; 0
   170ca:	90 e0       	ldi	r25, 0x00	; 0
   170cc:	25 c2       	rjmp	.+1098   	; 0x17518 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   170ce:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   170d2:	90 e0       	ldi	r25, 0x00	; 0
   170d4:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MTA>
   170d8:	89 2b       	or	r24, r25
   170da:	b1 f7       	brne	.-20     	; 0x170c8 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   170dc:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   170e0:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   170e4:	81 81       	ldd	r24, Z+1	; 0x01
   170e6:	90 e0       	ldi	r25, 0x00	; 0
   170e8:	0e 94 d1 86 	call	0x10da2	; 0x10da2 <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   170ec:	80 e0       	ldi	r24, 0x00	; 0
   170ee:	91 e0       	ldi	r25, 0x01	; 1
   170f0:	9c 8f       	std	Y+28, r25	; 0x1c
   170f2:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   170f4:	ae 01       	movw	r20, r28
   170f6:	45 5e       	subi	r20, 0xE5	; 229
   170f8:	5f 4f       	sbci	r21, 0xFF	; 255
   170fa:	60 e0       	ldi	r22, 0x00	; 0
   170fc:	72 e0       	ldi	r23, 0x02	; 2
   170fe:	8d ed       	ldi	r24, 0xDD	; 221
   17100:	9c e1       	ldi	r25, 0x1C	; 28
   17102:	0e 94 89 8b 	call	0x11712	; 0x11712 <gpib_read_str>
   17106:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   17108:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1710a:	9c 8d       	ldd	r25, Y+28	; 0x1c
   1710c:	88 27       	eor	r24, r24
   1710e:	90 7d       	andi	r25, 0xD0	; 208
   17110:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   17114:	89 2b       	or	r24, r25
   17116:	c1 f0       	breq	.+48     	; 0x17148 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   17118:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   1711c:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   17120:	81 e0       	ldi	r24, 0x01	; 1
   17122:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   17124:	87 81       	ldd	r24, Z+7	; 0x07
   17126:	90 85       	ldd	r25, Z+8	; 0x08
   17128:	80 62       	ori	r24, 0x20	; 32
   1712a:	90 87       	std	Z+8, r25	; 0x08
   1712c:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   1712e:	20 ff       	sbrs	r18, 0
   17130:	eb c1       	rjmp	.+982    	; 0x17508 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   17132:	87 e6       	ldi	r24, 0x67	; 103
   17134:	98 e2       	ldi	r25, 0x28	; 40
   17136:	a0 e0       	ldi	r26, 0x00	; 0
   17138:	ed b7       	in	r30, 0x3d	; 61
   1713a:	fe b7       	in	r31, 0x3e	; 62
   1713c:	81 83       	std	Z+1, r24	; 0x01
   1713e:	92 83       	std	Z+2, r25	; 0x02
   17140:	a3 83       	std	Z+3, r26	; 0x03
   17142:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   17146:	e0 c1       	rjmp	.+960    	; 0x17508 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17148:	25 ff       	sbrs	r18, 5
   1714a:	0e c0       	rjmp	.+28     	; 0x17168 <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   1714c:	ed b7       	in	r30, 0x3d	; 61
   1714e:	fe b7       	in	r31, 0x3e	; 62
   17150:	17 83       	std	Z+7, r17	; 0x07
   17152:	06 83       	std	Z+6, r16	; 0x06
   17154:	f5 82       	std	Z+5, r15	; 0x05
   17156:	e4 82       	std	Z+4, r14	; 0x04
   17158:	88 e3       	ldi	r24, 0x38	; 56
   1715a:	98 e2       	ldi	r25, 0x28	; 40
   1715c:	a0 e0       	ldi	r26, 0x00	; 0
   1715e:	81 83       	std	Z+1, r24	; 0x01
   17160:	92 83       	std	Z+2, r25	; 0x02
   17162:	a3 83       	std	Z+3, r26	; 0x03
   17164:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            secondary, len);
#endif
    if(!len)
   17168:	01 15       	cp	r16, r1
   1716a:	11 05       	cpc	r17, r1
   1716c:	61 f4       	brne	.+24     	; 0x17186 <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   1716e:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   17172:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   17176:	81 e0       	ldi	r24, 0x01	; 1
   17178:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   1717a:	87 81       	ldd	r24, Z+7	; 0x07
   1717c:	90 85       	ldd	r25, Z+8	; 0x08
   1717e:	80 62       	ori	r24, 0x20	; 32
   17180:	90 87       	std	Z+8, r25	; 0x08
   17182:	87 83       	std	Z+7, r24	; 0x07
   17184:	c1 c1       	rjmp	.+898    	; 0x17508 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   17186:	60 91 dd 1c 	lds	r22, 0x1CDD	; 0x801cdd <gpib_iobuff>

    if (secondary == 0x68)
   1718a:	f8 e6       	ldi	r31, 0x68	; 104
   1718c:	ef 16       	cp	r14, r31
   1718e:	f1 04       	cpc	r15, r1
   17190:	09 f0       	breq	.+2      	; 0x17194 <Amigo_Command+0x240>
   17192:	28 c1       	rjmp	.+592    	; 0x173e4 <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   17194:	61 11       	cpse	r22, r1
   17196:	2e c0       	rjmp	.+92     	; 0x171f4 <Amigo_Command+0x2a0>
   17198:	02 30       	cpi	r16, 0x02	; 2
   1719a:	11 05       	cpc	r17, r1
   1719c:	09 f0       	breq	.+2      	; 0x171a0 <Amigo_Command+0x24c>
   1719e:	b9 c1       	rjmp	.+882    	; 0x17512 <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   171a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   171a4:	85 ff       	sbrs	r24, 5
   171a6:	0a c0       	rjmp	.+20     	; 0x171bc <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   171a8:	88 e1       	ldi	r24, 0x18	; 24
   171aa:	98 e2       	ldi	r25, 0x28	; 40
   171ac:	a0 e0       	ldi	r26, 0x00	; 0
   171ae:	ed b7       	in	r30, 0x3d	; 61
   171b0:	fe b7       	in	r31, 0x3e	; 62
   171b2:	81 83       	std	Z+1, r24	; 0x01
   171b4:	92 83       	std	Z+2, r25	; 0x02
   171b6:	a3 83       	std	Z+3, r26	; 0x03
   171b8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   171bc:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   171c0:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   171c4:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   171c6:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   171c8:	10 86       	std	Z+8, r1	; 0x08
   171ca:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   171cc:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   171ce:	80 91 de 1c 	lds	r24, 0x1CDE	; 0x801cde <gpib_iobuff+0x1>
   171d2:	98 2f       	mov	r25, r24
   171d4:	92 95       	swap	r25
   171d6:	96 95       	lsr	r25
   171d8:	96 95       	lsr	r25
   171da:	93 70       	andi	r25, 0x03	; 3
   171dc:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   171de:	8f 73       	andi	r24, 0x3F	; 63
   171e0:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   171e2:	ce 01       	movw	r24, r28
   171e4:	0a 96       	adiw	r24, 0x0a	; 10
   171e6:	db d9       	rcall	.-3146   	; 0x1659e <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   171e8:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   171ec:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   171f0:	85 e0       	ldi	r24, 0x05	; 5
   171f2:	19 c1       	rjmp	.+562    	; 0x17426 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   171f4:	62 30       	cpi	r22, 0x02	; 2
   171f6:	09 f0       	breq	.+2      	; 0x171fa <Amigo_Command+0x2a6>
   171f8:	3f c0       	rjmp	.+126    	; 0x17278 <Amigo_Command+0x324>
   171fa:	05 30       	cpi	r16, 0x05	; 5
   171fc:	11 05       	cpc	r17, r1
   171fe:	d1 f4       	brne	.+52     	; 0x17234 <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17200:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17204:	85 ff       	sbrs	r24, 5
   17206:	0a c0       	rjmp	.+20     	; 0x1721c <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   17208:	84 e0       	ldi	r24, 0x04	; 4
   1720a:	98 e2       	ldi	r25, 0x28	; 40
   1720c:	a0 e0       	ldi	r26, 0x00	; 0
   1720e:	ed b7       	in	r30, 0x3d	; 61
   17210:	fe b7       	in	r31, 0x3e	; 62
   17212:	81 83       	std	Z+1, r24	; 0x01
   17214:	92 83       	std	Z+2, r25	; 0x02
   17216:	a3 83       	std	Z+3, r26	; 0x03
   17218:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1721c:	80 91 de 1c 	lds	r24, 0x1CDE	; 0x801cde <gpib_iobuff+0x1>
   17220:	85 de       	rcall	.-758    	; 0x16f2c <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   17222:	80 91 df 1c 	lds	r24, 0x1CDF	; 0x801cdf <gpib_iobuff+0x2>
   17226:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   17228:	80 91 e0 1c 	lds	r24, 0x1CE0	; 0x801ce0 <gpib_iobuff+0x3>
   1722c:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   1722e:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x4>
   17232:	1d c0       	rjmp	.+58     	; 0x1726e <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   17234:	06 30       	cpi	r16, 0x06	; 6
   17236:	11 05       	cpc	r17, r1
   17238:	09 f0       	breq	.+2      	; 0x1723c <Amigo_Command+0x2e8>
   1723a:	6b c1       	rjmp	.+726    	; 0x17512 <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1723c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17240:	85 ff       	sbrs	r24, 5
   17242:	0a c0       	rjmp	.+20     	; 0x17258 <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   17244:	80 ef       	ldi	r24, 0xF0	; 240
   17246:	97 e2       	ldi	r25, 0x27	; 39
   17248:	a0 e0       	ldi	r26, 0x00	; 0
   1724a:	ed b7       	in	r30, 0x3d	; 61
   1724c:	fe b7       	in	r31, 0x3e	; 62
   1724e:	81 83       	std	Z+1, r24	; 0x01
   17250:	92 83       	std	Z+2, r25	; 0x02
   17252:	a3 83       	std	Z+3, r26	; 0x03
   17254:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17258:	80 91 de 1c 	lds	r24, 0x1CDE	; 0x801cde <gpib_iobuff+0x1>
   1725c:	67 de       	rcall	.-818    	; 0x16f2c <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   1725e:	80 91 e0 1c 	lds	r24, 0x1CE0	; 0x801ce0 <gpib_iobuff+0x3>
   17262:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   17264:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x4>
   17268:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   1726a:	80 91 e2 1c 	lds	r24, 0x1CE2	; 0x801ce2 <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   1726e:	8f 87       	std	Y+15, r24	; 0x0f
   17270:	ce 01       	movw	r24, r28
   17272:	0a 96       	adiw	r24, 0x0a	; 10
   17274:	94 d9       	rcall	.-3288   	; 0x1659e <amigo_seek>
   17276:	d8 c0       	rjmp	.+432    	; 0x17428 <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   17278:	63 30       	cpi	r22, 0x03	; 3
   1727a:	e9 f4       	brne	.+58     	; 0x172b6 <Amigo_Command+0x362>
   1727c:	02 30       	cpi	r16, 0x02	; 2
   1727e:	11 05       	cpc	r17, r1
   17280:	09 f0       	breq	.+2      	; 0x17284 <Amigo_Command+0x330>
   17282:	47 c1       	rjmp	.+654    	; 0x17512 <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17284:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17288:	85 ff       	sbrs	r24, 5
   1728a:	0a c0       	rjmp	.+20     	; 0x172a0 <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   1728c:	87 ec       	ldi	r24, 0xC7	; 199
   1728e:	97 e2       	ldi	r25, 0x27	; 39
   17290:	a0 e0       	ldi	r26, 0x00	; 0
   17292:	ed b7       	in	r30, 0x3d	; 61
   17294:	fe b7       	in	r31, 0x3e	; 62
   17296:	81 83       	std	Z+1, r24	; 0x01
   17298:	92 83       	std	Z+2, r25	; 0x02
   1729a:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1729c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   172a0:	80 91 de 1c 	lds	r24, 0x1CDE	; 0x801cde <gpib_iobuff+0x1>
            amigo_request_status();
   172a4:	43 de       	rcall	.-890    	; 0x16f2c <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   172a6:	39 d8       	rcall	.-3982   	; 0x1631a <amigo_request_status>
   172a8:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   172ac:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   172b0:	83 e0       	ldi	r24, 0x03	; 3
   172b2:	80 83       	st	Z, r24
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   172b4:	29 c1       	rjmp	.+594    	; 0x17508 <Amigo_Command+0x5b4>
   172b6:	65 30       	cpi	r22, 0x05	; 5
   172b8:	d9 f4       	brne	.+54     	; 0x172f0 <Amigo_Command+0x39c>
   172ba:	02 30       	cpi	r16, 0x02	; 2
   172bc:	11 05       	cpc	r17, r1
   172be:	09 f0       	breq	.+2      	; 0x172c2 <Amigo_Command+0x36e>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   172c0:	28 c1       	rjmp	.+592    	; 0x17512 <Amigo_Command+0x5be>
   172c2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   172c6:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Read Unbuffered Command]\n");
   172c8:	0a c0       	rjmp	.+20     	; 0x172de <Amigo_Command+0x38a>
   172ca:	86 ea       	ldi	r24, 0xA6	; 166
   172cc:	97 e2       	ldi	r25, 0x27	; 39
   172ce:	a0 e0       	ldi	r26, 0x00	; 0
   172d0:	ed b7       	in	r30, 0x3d	; 61
   172d2:	fe b7       	in	r31, 0x3e	; 62
   172d4:	81 83       	std	Z+1, r24	; 0x01
   172d6:	92 83       	std	Z+2, r25	; 0x02
   172d8:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   172da:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   172de:	80 91 de 1c 	lds	r24, 0x1CDE	; 0x801cde <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   172e2:	24 de       	rcall	.-952    	; 0x16f2c <amigo_check_unit>
   172e4:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   172e8:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   172ec:	86 e0       	ldi	r24, 0x06	; 6
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   172ee:	e7 c0       	rjmp	.+462    	; 0x174be <Amigo_Command+0x56a>
   172f0:	67 30       	cpi	r22, 0x07	; 7
   172f2:	f9 f4       	brne	.+62     	; 0x17332 <Amigo_Command+0x3de>
   172f4:	04 30       	cpi	r16, 0x04	; 4
   172f6:	11 05       	cpc	r17, r1
   172f8:	09 f0       	breq	.+2      	; 0x172fc <Amigo_Command+0x3a8>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   172fa:	0b c1       	rjmp	.+534    	; 0x17512 <Amigo_Command+0x5be>
   172fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17300:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Verify]\n");
   17302:	0a c0       	rjmp	.+20     	; 0x17318 <Amigo_Command+0x3c4>
   17304:	86 e9       	ldi	r24, 0x96	; 150
   17306:	97 e2       	ldi	r25, 0x27	; 39
   17308:	a0 e0       	ldi	r26, 0x00	; 0
   1730a:	ed b7       	in	r30, 0x3d	; 61
   1730c:	fe b7       	in	r31, 0x3e	; 62
   1730e:	81 83       	std	Z+1, r24	; 0x01
   17310:	92 83       	std	Z+2, r25	; 0x02
   17312:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17314:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   17318:	80 91 de 1c 	lds	r24, 0x1CDE	; 0x801cde <gpib_iobuff+0x1>
            sectors = (0xff & *ptr++) << 8;
   1731c:	07 de       	rcall	.-1010   	; 0x16f2c <amigo_check_unit>
   1731e:	80 91 df 1c 	lds	r24, 0x1CDF	; 0x801cdf <gpib_iobuff+0x2>
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   17322:	90 e0       	ldi	r25, 0x00	; 0
   17324:	98 2f       	mov	r25, r24
   17326:	88 27       	eor	r24, r24
   17328:	20 91 e0 1c 	lds	r18, 0x1CE0	; 0x801ce0 <gpib_iobuff+0x3>
   1732c:	82 2b       	or	r24, r18
        }
        else if(op == 0x08 && len == 2)
   1732e:	62 d9       	rcall	.-3388   	; 0x165f4 <amigo_verify>
   17330:	f3 c0       	rjmp	.+486    	; 0x17518 <Amigo_Command+0x5c4>
   17332:	68 30       	cpi	r22, 0x08	; 8
   17334:	d9 f4       	brne	.+54     	; 0x1736c <Amigo_Command+0x418>
   17336:	02 30       	cpi	r16, 0x02	; 2
   17338:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1733a:	09 f0       	breq	.+2      	; 0x1733e <Amigo_Command+0x3ea>
   1733c:	ea c0       	rjmp	.+468    	; 0x17512 <Amigo_Command+0x5be>
   1733e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Write Unbuffered Command]\n");
   17342:	85 ff       	sbrs	r24, 5
   17344:	0a c0       	rjmp	.+20     	; 0x1735a <Amigo_Command+0x406>
   17346:	84 e7       	ldi	r24, 0x74	; 116
   17348:	97 e2       	ldi	r25, 0x27	; 39
   1734a:	a0 e0       	ldi	r26, 0x00	; 0
   1734c:	ed b7       	in	r30, 0x3d	; 61
   1734e:	fe b7       	in	r31, 0x3e	; 62
   17350:	81 83       	std	Z+1, r24	; 0x01
   17352:	92 83       	std	Z+2, r25	; 0x02
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17354:	a3 83       	std	Z+3, r26	; 0x03
   17356:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1735a:	80 91 de 1c 	lds	r24, 0x1CDE	; 0x801cde <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   1735e:	e6 dd       	rcall	.-1076   	; 0x16f2c <amigo_check_unit>
   17360:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   17364:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   17368:	88 e0       	ldi	r24, 0x08	; 8
   1736a:	5d c0       	rjmp	.+186    	; 0x17426 <Amigo_Command+0x4d2>
   1736c:	86 2f       	mov	r24, r22
   1736e:	8f 7d       	andi	r24, 0xDF	; 223
   17370:	8b 30       	cpi	r24, 0x0B	; 11
   17372:	d9 f4       	brne	.+54     	; 0x173aa <Amigo_Command+0x456>
   17374:	02 30       	cpi	r16, 0x02	; 2
   17376:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17378:	09 f0       	breq	.+2      	; 0x1737c <Amigo_Command+0x428>
   1737a:	cb c0       	rjmp	.+406    	; 0x17512 <Amigo_Command+0x5be>
   1737c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Initialize Command]\n");
   17380:	85 ff       	sbrs	r24, 5
   17382:	0a c0       	rjmp	.+20     	; 0x17398 <Amigo_Command+0x444>
   17384:	88 e5       	ldi	r24, 0x58	; 88
   17386:	97 e2       	ldi	r25, 0x27	; 39
   17388:	a0 e0       	ldi	r26, 0x00	; 0
   1738a:	ed b7       	in	r30, 0x3d	; 61
   1738c:	fe b7       	in	r31, 0x3e	; 62
   1738e:	81 83       	std	Z+1, r24	; 0x01
   17390:	92 83       	std	Z+2, r25	; 0x02
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17392:	a3 83       	std	Z+3, r26	; 0x03
   17394:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   17398:	80 91 de 1c 	lds	r24, 0x1CDE	; 0x801cde <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_INITIALIZE;
   1739c:	c7 dd       	rcall	.-1138   	; 0x16f2c <amigo_check_unit>
   1739e:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   173a2:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   173a6:	8a e0       	ldi	r24, 0x0A	; 10
   173a8:	3e c0       	rjmp	.+124    	; 0x17426 <Amigo_Command+0x4d2>
   173aa:	64 31       	cpi	r22, 0x14	; 20
   173ac:	09 f0       	breq	.+2      	; 0x173b0 <Amigo_Command+0x45c>
   173ae:	b1 c0       	rjmp	.+354    	; 0x17512 <Amigo_Command+0x5be>
   173b0:	02 30       	cpi	r16, 0x02	; 2
   173b2:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173b4:	09 f0       	breq	.+2      	; 0x173b8 <Amigo_Command+0x464>
   173b6:	ad c0       	rjmp	.+346    	; 0x17512 <Amigo_Command+0x5be>
   173b8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Request Logical Address Command]\n");
   173bc:	85 ff       	sbrs	r24, 5
   173be:	0a c0       	rjmp	.+20     	; 0x173d4 <Amigo_Command+0x480>
   173c0:	8f e2       	ldi	r24, 0x2F	; 47
   173c2:	97 e2       	ldi	r25, 0x27	; 39
   173c4:	a0 e0       	ldi	r26, 0x00	; 0
   173c6:	ed b7       	in	r30, 0x3d	; 61
   173c8:	fe b7       	in	r31, 0x3e	; 62
   173ca:	81 83       	std	Z+1, r24	; 0x01
   173cc:	92 83       	std	Z+2, r25	; 0x02
   173ce:	a3 83       	std	Z+3, r26	; 0x03
#endif
            amigo_request_logical_address();
   173d0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   173d4:	0e 94 7f b1 	call	0x162fe	; 0x162fe <amigo_request_logical_address>
   173d8:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   173dc:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   173e0:	84 e0       	ldi	r24, 0x04	; 4
   173e2:	21 c0       	rjmp	.+66     	; 0x17426 <Amigo_Command+0x4d2>
   173e4:	f9 e6       	ldi	r31, 0x69	; 105
   173e6:	ef 16       	cp	r14, r31
    {
        if(op == 0x08 && len == 2)
   173e8:	f1 04       	cpc	r15, r1
   173ea:	39 f5       	brne	.+78     	; 0x1743a <Amigo_Command+0x4e6>
   173ec:	68 30       	cpi	r22, 0x08	; 8
   173ee:	09 f0       	breq	.+2      	; 0x173f2 <Amigo_Command+0x49e>
   173f0:	90 c0       	rjmp	.+288    	; 0x17512 <Amigo_Command+0x5be>
   173f2:	02 30       	cpi	r16, 0x02	; 2
   173f4:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173f6:	09 f0       	breq	.+2      	; 0x173fa <Amigo_Command+0x4a6>
   173f8:	8c c0       	rjmp	.+280    	; 0x17512 <Amigo_Command+0x5be>
   173fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Write Buffered Command]\n");
   173fe:	85 ff       	sbrs	r24, 5
   17400:	0a c0       	rjmp	.+20     	; 0x17416 <Amigo_Command+0x4c2>
   17402:	8f e0       	ldi	r24, 0x0F	; 15
   17404:	97 e2       	ldi	r25, 0x27	; 39
   17406:	a0 e0       	ldi	r26, 0x00	; 0
   17408:	ed b7       	in	r30, 0x3d	; 61
   1740a:	fe b7       	in	r31, 0x3e	; 62
   1740c:	81 83       	std	Z+1, r24	; 0x01
   1740e:	92 83       	std	Z+2, r25	; 0x02
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17410:	a3 83       	std	Z+3, r26	; 0x03
   17412:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   17416:	80 91 de 1c 	lds	r24, 0x1CDE	; 0x801cde <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   1741a:	88 dd       	rcall	.-1264   	; 0x16f2c <amigo_check_unit>
   1741c:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   17420:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17424:	89 e0       	ldi	r24, 0x09	; 9
   17426:	80 83       	st	Z, r24
   17428:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   1742c:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   17430:	81 81       	ldd	r24, Z+1	; 0x01
   17432:	90 e0       	ldi	r25, 0x00	; 0
   17434:	0e 94 9b 86 	call	0x10d36	; 0x10d36 <gpib_enable_PPR>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   17438:	67 c0       	rjmp	.+206    	; 0x17508 <Amigo_Command+0x5b4>
   1743a:	fa e6       	ldi	r31, 0x6A	; 106
   1743c:	ef 16       	cp	r14, r31
   1743e:	f1 04       	cpc	r15, r1
    {
        if(op == 0x08 && len == 2)
   17440:	09 f0       	breq	.+2      	; 0x17444 <Amigo_Command+0x4f0>
   17442:	40 c0       	rjmp	.+128    	; 0x174c4 <Amigo_Command+0x570>
   17444:	68 30       	cpi	r22, 0x08	; 8
   17446:	f1 f4       	brne	.+60     	; 0x17484 <Amigo_Command+0x530>
   17448:	02 30       	cpi	r16, 0x02	; 2
   1744a:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1744c:	09 f0       	breq	.+2      	; 0x17450 <Amigo_Command+0x4fc>
   1744e:	61 c0       	rjmp	.+194    	; 0x17512 <Amigo_Command+0x5be>
   17450:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   17454:	85 ff       	sbrs	r24, 5
   17456:	0a c0       	rjmp	.+20     	; 0x1746c <Amigo_Command+0x518>
   17458:	84 ee       	ldi	r24, 0xE4	; 228
   1745a:	96 e2       	ldi	r25, 0x26	; 38
   1745c:	a0 e0       	ldi	r26, 0x00	; 0
   1745e:	ed b7       	in	r30, 0x3d	; 61
   17460:	fe b7       	in	r31, 0x3e	; 62
   17462:	81 83       	std	Z+1, r24	; 0x01
   17464:	92 83       	std	Z+2, r25	; 0x02
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17466:	a3 83       	std	Z+3, r26	; 0x03
   17468:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1746c:	80 91 de 1c 	lds	r24, 0x1CDE	; 0x801cde <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   17470:	5d dd       	rcall	.-1350   	; 0x16f2c <amigo_check_unit>
   17472:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   17476:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
            amigo_request_status();
   1747a:	82 e0       	ldi	r24, 0x02	; 2
   1747c:	80 83       	st	Z, r24
   1747e:	0e 94 8d b1 	call	0x1631a	; 0x1631a <amigo_request_status>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   17482:	42 c0       	rjmp	.+132    	; 0x17508 <Amigo_Command+0x5b4>
   17484:	65 30       	cpi	r22, 0x05	; 5
   17486:	09 f0       	breq	.+2      	; 0x1748a <Amigo_Command+0x536>
   17488:	44 c0       	rjmp	.+136    	; 0x17512 <Amigo_Command+0x5be>
   1748a:	02 30       	cpi	r16, 0x02	; 2
   1748c:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1748e:	09 f0       	breq	.+2      	; 0x17492 <Amigo_Command+0x53e>
   17490:	40 c0       	rjmp	.+128    	; 0x17512 <Amigo_Command+0x5be>
   17492:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Read Buffered Command]\n");
   17496:	85 ff       	sbrs	r24, 5
   17498:	0a c0       	rjmp	.+20     	; 0x174ae <Amigo_Command+0x55a>
   1749a:	85 ec       	ldi	r24, 0xC5	; 197
   1749c:	96 e2       	ldi	r25, 0x26	; 38
   1749e:	a0 e0       	ldi	r26, 0x00	; 0
   174a0:	ed b7       	in	r30, 0x3d	; 61
   174a2:	fe b7       	in	r31, 0x3e	; 62
   174a4:	81 83       	std	Z+1, r24	; 0x01
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   174a6:	92 83       	std	Z+2, r25	; 0x02
   174a8:	a3 83       	std	Z+3, r26	; 0x03
   174aa:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   174ae:	80 91 de 1c 	lds	r24, 0x1CDE	; 0x801cde <gpib_iobuff+0x1>
   174b2:	3c dd       	rcall	.-1416   	; 0x16f2c <amigo_check_unit>
   174b4:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   174b8:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   174bc:	87 e0       	ldi	r24, 0x07	; 7
   174be:	80 83       	st	Z, r24
#endif
        }
    }
    else if (secondary == 0x6C)
   174c0:	ca d9       	rcall	.-3180   	; 0x16856 <amigo_buffered_read_command>
   174c2:	2a c0       	rjmp	.+84     	; 0x17518 <Amigo_Command+0x5c4>
   174c4:	fc e6       	ldi	r31, 0x6C	; 108
   174c6:	ef 16       	cp	r14, r31
    {
        if(op == 0x18 && len == 5)
   174c8:	f1 04       	cpc	r15, r1
   174ca:	d1 f4       	brne	.+52     	; 0x17500 <Amigo_Command+0x5ac>
   174cc:	68 31       	cpi	r22, 0x18	; 24
   174ce:	09 f5       	brne	.+66     	; 0x17512 <Amigo_Command+0x5be>
   174d0:	05 30       	cpi	r16, 0x05	; 5
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   174d2:	11 05       	cpc	r17, r1
   174d4:	f1 f4       	brne	.+60     	; 0x17512 <Amigo_Command+0x5be>
   174d6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
                printf("[AMIGO Format]\n");
   174da:	85 ff       	sbrs	r24, 5
   174dc:	0a c0       	rjmp	.+20     	; 0x174f2 <Amigo_Command+0x59e>
   174de:	85 eb       	ldi	r24, 0xB5	; 181
   174e0:	96 e2       	ldi	r25, 0x26	; 38
   174e2:	a0 e0       	ldi	r26, 0x00	; 0
   174e4:	ed b7       	in	r30, 0x3d	; 61
   174e6:	fe b7       	in	r31, 0x3e	; 62
   174e8:	81 83       	std	Z+1, r24	; 0x01
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   174ea:	92 83       	std	Z+2, r25	; 0x02
   174ec:	a3 83       	std	Z+3, r26	; 0x03
   174ee:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   174f2:	80 91 de 1c 	lds	r24, 0x1CDE	; 0x801cde <gpib_iobuff+0x1>
   174f6:	1a dd       	rcall	.-1484   	; 0x16f2c <amigo_check_unit>
   174f8:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   174fc:	17 d9       	rcall	.-3538   	; 0x1672c <amigo_format>
   174fe:	04 c0       	rjmp	.+8      	; 0x17508 <Amigo_Command+0x5b4>
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   17500:	f0 e7       	ldi	r31, 0x70	; 112
   17502:	ef 16       	cp	r14, r31
   17504:	f1 04       	cpc	r15, r1
   17506:	29 f4       	brne	.+10     	; 0x17512 <Amigo_Command+0x5be>
   17508:	8b 8d       	ldd	r24, Y+27	; 0x1b
    }
    return ( amigo_todo_op(secondary, op, len) );
   1750a:	9c 8d       	ldd	r25, Y+28	; 0x1c
   1750c:	88 27       	eor	r24, r24
   1750e:	90 7d       	andi	r25, 0xD0	; 208
   17510:	03 c0       	rjmp	.+6      	; 0x17518 <Amigo_Command+0x5c4>
}
   17512:	a8 01       	movw	r20, r16
   17514:	8e 2d       	mov	r24, r14
   17516:	ed db       	rcall	.-2086   	; 0x16cf2 <amigo_todo_op>
   17518:	6c 96       	adiw	r28, 0x1c	; 28
   1751a:	e6 e0       	ldi	r30, 0x06	; 6
   1751c:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

00017520 <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   17520:	a9 e0       	ldi	r26, 0x09	; 9
   17522:	b0 e0       	ldi	r27, 0x00	; 0
   17524:	e6 e9       	ldi	r30, 0x96	; 150
   17526:	fa eb       	ldi	r31, 0xBA	; 186
   17528:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
   1752c:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1752e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17532:	85 ff       	sbrs	r24, 5
   17534:	16 c0       	rjmp	.+44     	; 0x17562 <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   17536:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   1753a:	90 e0       	ldi	r25, 0x00	; 0
   1753c:	ed b7       	in	r30, 0x3d	; 61
   1753e:	fe b7       	in	r31, 0x3e	; 62
   17540:	91 87       	std	Z+9, r25	; 0x09
   17542:	80 87       	std	Z+8, r24	; 0x08
   17544:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   17548:	90 e0       	ldi	r25, 0x00	; 0
   1754a:	97 83       	std	Z+7, r25	; 0x07
   1754c:	86 83       	std	Z+6, r24	; 0x06
   1754e:	d5 83       	std	Z+5, r29	; 0x05
   17550:	c4 83       	std	Z+4, r28	; 0x04
   17552:	83 e8       	ldi	r24, 0x83	; 131
   17554:	96 e2       	ldi	r25, 0x26	; 38
   17556:	a0 e0       	ldi	r26, 0x00	; 0
   17558:	81 83       	std	Z+1, r24	; 0x01
   1755a:	92 83       	std	Z+2, r25	; 0x02
   1755c:	a3 83       	std	Z+3, r26	; 0x03
   1755e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   17562:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   17566:	8f 35       	cpi	r24, 0x5F	; 95
   17568:	09 f4       	brne	.+2      	; 0x1756c <Amigo_Execute+0x4c>
   1756a:	ad c0       	rjmp	.+346    	; 0x176c6 <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   1756c:	90 e0       	ldi	r25, 0x00	; 0
   1756e:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MTA>
   17572:	89 2b       	or	r24, r25
   17574:	39 f0       	breq	.+14     	; 0x17584 <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   17576:	ce 01       	movw	r24, r28
   17578:	87 7f       	andi	r24, 0xF7	; 247
   1757a:	80 36       	cpi	r24, 0x60	; 96
   1757c:	91 05       	cpc	r25, r1
   1757e:	09 f0       	breq	.+2      	; 0x17582 <Amigo_Execute+0x62>
   17580:	a2 c0       	rjmp	.+324    	; 0x176c6 <Amigo_Execute+0x1a6>
   17582:	08 c0       	rjmp	.+16     	; 0x17594 <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17584:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   17588:	90 e0       	ldi	r25, 0x00	; 0
   1758a:	0e 94 20 8d 	call	0x11a40	; 0x11a40 <AMIGO_is_MLA>
   1758e:	89 2b       	or	r24, r25
   17590:	91 f7       	brne	.-28     	; 0x17576 <Amigo_Execute+0x56>
   17592:	99 c0       	rjmp	.+306    	; 0x176c6 <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17594:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   17598:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   1759c:	81 81       	ldd	r24, Z+1	; 0x01
   1759e:	90 e0       	ldi	r25, 0x00	; 0
   175a0:	0e 94 d1 86 	call	0x10da2	; 0x10da2 <gpib_disable_PPR>

    if(secondary == 0x60)
   175a4:	c0 36       	cpi	r28, 0x60	; 96
   175a6:	d1 05       	cpc	r29, r1
   175a8:	09 f0       	breq	.+2      	; 0x175ac <Amigo_Execute+0x8c>
   175aa:	4e c0       	rjmp	.+156    	; 0x17648 <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   175ac:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   175b0:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   175b4:	e0 81       	ld	r30, Z
   175b6:	8e 2f       	mov	r24, r30
   175b8:	90 e0       	ldi	r25, 0x00	; 0
   175ba:	8b 30       	cpi	r24, 0x0B	; 11
   175bc:	91 05       	cpc	r25, r1
   175be:	08 f0       	brcs	.+2      	; 0x175c2 <Amigo_Execute+0xa2>
   175c0:	41 c0       	rjmp	.+130    	; 0x17644 <Amigo_Execute+0x124>
   175c2:	fc 01       	movw	r30, r24
   175c4:	e0 52       	subi	r30, 0x20	; 32
   175c6:	ff 4f       	sbci	r31, 0xFF	; 255
   175c8:	0c 94 a0 e2 	jmp	0x1c540	; 0x1c540 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   175cc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   175d0:	85 ff       	sbrs	r24, 5
   175d2:	18 c0       	rjmp	.+48     	; 0x17604 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   175d4:	83 e6       	ldi	r24, 0x63	; 99
   175d6:	96 e2       	ldi	r25, 0x26	; 38
   175d8:	0d c0       	rjmp	.+26     	; 0x175f4 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   175da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   175de:	85 ff       	sbrs	r24, 5
   175e0:	11 c0       	rjmp	.+34     	; 0x17604 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   175e2:	82 e4       	ldi	r24, 0x42	; 66
   175e4:	96 e2       	ldi	r25, 0x26	; 38
   175e6:	06 c0       	rjmp	.+12     	; 0x175f4 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   175e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   175ec:	85 ff       	sbrs	r24, 5
   175ee:	0a c0       	rjmp	.+20     	; 0x17604 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   175f0:	83 e2       	ldi	r24, 0x23	; 35
   175f2:	96 e2       	ldi	r25, 0x26	; 38
   175f4:	a0 e0       	ldi	r26, 0x00	; 0
   175f6:	ed b7       	in	r30, 0x3d	; 61
   175f8:	fe b7       	in	r31, 0x3e	; 62
   175fa:	81 83       	std	Z+1, r24	; 0x01
   175fc:	92 83       	std	Z+2, r25	; 0x02
   175fe:	a3 83       	std	Z+3, r26	; 0x03
   17600:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   17604:	b2 d9       	rcall	.-3228   	; 0x1696a <amigo_buffered_read_execute>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17606:	61 c0       	rjmp	.+194    	; 0x176ca <Amigo_Execute+0x1aa>
   17608:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1760c:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Unbuffered]\n");
   1760e:	18 c0       	rjmp	.+48     	; 0x17640 <Amigo_Execute+0x120>
   17610:	81 e0       	ldi	r24, 0x01	; 1
   17612:	96 e2       	ldi	r25, 0x26	; 38
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17614:	0d c0       	rjmp	.+26     	; 0x17630 <Amigo_Execute+0x110>
   17616:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1761a:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Initialize]\n");
   1761c:	11 c0       	rjmp	.+34     	; 0x17640 <Amigo_Execute+0x120>
   1761e:	85 ee       	ldi	r24, 0xE5	; 229
   17620:	95 e2       	ldi	r25, 0x25	; 37
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17622:	06 c0       	rjmp	.+12     	; 0x17630 <Amigo_Execute+0x110>
   17624:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17628:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Buffered]\n");
   1762a:	0a c0       	rjmp	.+20     	; 0x17640 <Amigo_Execute+0x120>
   1762c:	85 ec       	ldi	r24, 0xC5	; 197
   1762e:	95 e2       	ldi	r25, 0x25	; 37
   17630:	a0 e0       	ldi	r26, 0x00	; 0
   17632:	ed b7       	in	r30, 0x3d	; 61
   17634:	fe b7       	in	r31, 0x3e	; 62
   17636:	81 83       	std	Z+1, r24	; 0x01
   17638:	92 83       	std	Z+2, r25	; 0x02
   1763a:	a3 83       	std	Z+3, r26	; 0x03
#endif
                return ( amigo_buffered_write() );
   1763c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   17640:	f8 d9       	rcall	.-3088   	; 0x16a32 <amigo_buffered_write>
            default:
                return ( amigo_todo(secondary) );
   17642:	43 c0       	rjmp	.+134    	; 0x176ca <Amigo_Execute+0x1aa>
   17644:	80 e6       	ldi	r24, 0x60	; 96
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17646:	3d c0       	rjmp	.+122    	; 0x176c2 <Amigo_Execute+0x1a2>
   17648:	c8 36       	cpi	r28, 0x68	; 104
   1764a:	d1 05       	cpc	r29, r1
    {
        switch(AMIGOs->state)
   1764c:	e1 f5       	brne	.+120    	; 0x176c6 <Amigo_Execute+0x1a6>
   1764e:	e0 91 60 19 	lds	r30, 0x1960	; 0x801960 <AMIGOs>
   17652:	f0 91 61 19 	lds	r31, 0x1961	; 0x801961 <AMIGOs+0x1>
   17656:	80 81       	ld	r24, Z
   17658:	82 30       	cpi	r24, 0x02	; 2
   1765a:	81 f0       	breq	.+32     	; 0x1767c <Amigo_Execute+0x15c>
   1765c:	18 f4       	brcc	.+6      	; 0x17664 <Amigo_Execute+0x144>
   1765e:	88 23       	and	r24, r24
   17660:	91 f1       	breq	.+100    	; 0x176c6 <Amigo_Execute+0x1a6>
   17662:	2e c0       	rjmp	.+92     	; 0x176c0 <Amigo_Execute+0x1a0>
   17664:	83 30       	cpi	r24, 0x03	; 3
   17666:	19 f0       	breq	.+6      	; 0x1766e <Amigo_Execute+0x14e>
   17668:	84 30       	cpi	r24, 0x04	; 4
   1766a:	c9 f0       	breq	.+50     	; 0x1769e <Amigo_Execute+0x17e>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1766c:	29 c0       	rjmp	.+82     	; 0x176c0 <Amigo_Execute+0x1a0>
   1766e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17672:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17674:	11 c0       	rjmp	.+34     	; 0x17698 <Amigo_Execute+0x178>
   17676:	8c e9       	ldi	r24, 0x9C	; 156
   17678:	95 e2       	ldi	r25, 0x25	; 37
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1767a:	06 c0       	rjmp	.+12     	; 0x17688 <Amigo_Execute+0x168>
   1767c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17680:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17682:	0a c0       	rjmp	.+20     	; 0x17698 <Amigo_Execute+0x178>
   17684:	81 e7       	ldi	r24, 0x71	; 113
   17686:	95 e2       	ldi	r25, 0x25	; 37
   17688:	a0 e0       	ldi	r26, 0x00	; 0
   1768a:	ed b7       	in	r30, 0x3d	; 61
   1768c:	fe b7       	in	r31, 0x3e	; 62
   1768e:	81 83       	std	Z+1, r24	; 0x01
   17690:	92 83       	std	Z+2, r25	; 0x02
   17692:	a3 83       	std	Z+3, r26	; 0x03
   17694:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif
                return ( amigo_send_status() );
   17698:	0e 94 48 b2 	call	0x16490	; 0x16490 <amigo_send_status>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1769c:	16 c0       	rjmp	.+44     	; 0x176ca <Amigo_Execute+0x1aa>
   1769e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   176a2:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Logical Address]\n");
   176a4:	0a c0       	rjmp	.+20     	; 0x176ba <Amigo_Execute+0x19a>
   176a6:	88 e4       	ldi	r24, 0x48	; 72
   176a8:	95 e2       	ldi	r25, 0x25	; 37
   176aa:	a0 e0       	ldi	r26, 0x00	; 0
   176ac:	ed b7       	in	r30, 0x3d	; 61
   176ae:	fe b7       	in	r31, 0x3e	; 62
   176b0:	81 83       	std	Z+1, r24	; 0x01
   176b2:	92 83       	std	Z+2, r25	; 0x02
   176b4:	a3 83       	std	Z+3, r26	; 0x03
   176b6:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif
                return ( amigo_send_logical_address() );
   176ba:	0e 94 ea b1 	call	0x163d4	; 0x163d4 <amigo_send_logical_address>
            default:
                return ( amigo_todo(secondary) );
   176be:	05 c0       	rjmp	.+10     	; 0x176ca <Amigo_Execute+0x1aa>
   176c0:	88 e6       	ldi	r24, 0x68	; 104
   176c2:	b0 db       	rcall	.-2208   	; 0x16e24 <amigo_todo>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   176c4:	02 c0       	rjmp	.+4      	; 0x176ca <Amigo_Execute+0x1aa>
   176c6:	80 e0       	ldi	r24, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   176c8:	90 e0       	ldi	r25, 0x00	; 0
   176ca:	cd b7       	in	r28, 0x3d	; 61
   176cc:	de b7       	in	r29, 0x3e	; 62
   176ce:	29 96       	adiw	r28, 0x09	; 9
   176d0:	e2 e0       	ldi	r30, 0x02	; 2
   176d2:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

000176d6 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   176d6:	cf 93       	push	r28
   176d8:	df 93       	push	r29
   176da:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   176dc:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   176e0:	90 e0       	ldi	r25, 0x00	; 0
   176e2:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MTA>
   176e6:	89 2b       	or	r24, r25
   176e8:	51 f0       	breq	.+20     	; 0x176fe <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   176ea:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   176ee:	8f 35       	cpi	r24, 0x5F	; 95
   176f0:	71 f4       	brne	.+28     	; 0x1770e <AMIGO_COMMANDS+0x38>
   176f2:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   176f6:	90 e0       	ldi	r25, 0x00	; 0
   176f8:	0e 94 20 8d 	call	0x11a40	; 0x11a40 <AMIGO_is_MLA>
   176fc:	08 c0       	rjmp	.+16     	; 0x1770e <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   176fe:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   17702:	90 e0       	ldi	r25, 0x00	; 0
   17704:	0e 94 20 8d 	call	0x11a40	; 0x11a40 <AMIGO_is_MLA>
   17708:	89 2b       	or	r24, r25
   1770a:	79 f7       	brne	.-34     	; 0x176ea <AMIGO_COMMANDS+0x14>
   1770c:	76 c0       	rjmp	.+236    	; 0x177fa <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   1770e:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   17712:	81 11       	cpse	r24, r1
   17714:	05 c0       	rjmp	.+10     	; 0x17720 <AMIGO_COMMANDS+0x4a>
   17716:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   1771a:	90 e0       	ldi	r25, 0x00	; 0
   1771c:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17720:	c0 36       	cpi	r28, 0x60	; 96
   17722:	99 f4       	brne	.+38     	; 0x1774a <AMIGO_COMMANDS+0x74>
   17724:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   17728:	90 e0       	ldi	r25, 0x00	; 0
   1772a:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MTA>
   1772e:	89 2b       	or	r24, r25
   17730:	19 f0       	breq	.+6      	; 0x17738 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17732:	80 e6       	ldi	r24, 0x60	; 96
   17734:	90 e0       	ldi	r25, 0x00	; 0
   17736:	14 c0       	rjmp	.+40     	; 0x17760 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17738:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   1773c:	90 e0       	ldi	r25, 0x00	; 0
   1773e:	0e 94 20 8d 	call	0x11a40	; 0x11a40 <AMIGO_is_MLA>
   17742:	89 2b       	or	r24, r25
   17744:	09 f4       	brne	.+2      	; 0x17748 <AMIGO_COMMANDS+0x72>
   17746:	59 c0       	rjmp	.+178    	; 0x177fa <AMIGO_COMMANDS+0x124>
   17748:	f4 cf       	rjmp	.-24     	; 0x17732 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   1774a:	c8 36       	cpi	r28, 0x68	; 104
   1774c:	c1 f4       	brne	.+48     	; 0x1777e <AMIGO_COMMANDS+0xa8>
   1774e:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   17752:	90 e0       	ldi	r25, 0x00	; 0
   17754:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MTA>
   17758:	89 2b       	or	r24, r25
   1775a:	21 f0       	breq	.+8      	; 0x17764 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   1775c:	88 e6       	ldi	r24, 0x68	; 104
   1775e:	90 e0       	ldi	r25, 0x00	; 0
   17760:	df de       	rcall	.-578    	; 0x17520 <Amigo_Execute>
   17762:	0b c0       	rjmp	.+22     	; 0x1777a <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   17764:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   17768:	90 e0       	ldi	r25, 0x00	; 0
   1776a:	0e 94 20 8d 	call	0x11a40	; 0x11a40 <AMIGO_is_MLA>
   1776e:	89 2b       	or	r24, r25
   17770:	09 f4       	brne	.+2      	; 0x17774 <AMIGO_COMMANDS+0x9e>
   17772:	43 c0       	rjmp	.+134    	; 0x177fa <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17774:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   17776:	90 e0       	ldi	r25, 0x00	; 0
   17778:	ed db       	rcall	.-2086   	; 0x16f54 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   1777a:	ec 01       	movw	r28, r24
   1777c:	40 c0       	rjmp	.+128    	; 0x177fe <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   1777e:	c9 36       	cpi	r28, 0x69	; 105
   17780:	51 f4       	brne	.+20     	; 0x17796 <AMIGO_COMMANDS+0xc0>
   17782:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   17786:	90 e0       	ldi	r25, 0x00	; 0
   17788:	0e 94 20 8d 	call	0x11a40	; 0x11a40 <AMIGO_is_MLA>
   1778c:	89 2b       	or	r24, r25
   1778e:	a9 f1       	breq	.+106    	; 0x177fa <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17790:	89 e6       	ldi	r24, 0x69	; 105
   17792:	90 e0       	ldi	r25, 0x00	; 0
   17794:	f1 cf       	rjmp	.-30     	; 0x17778 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   17796:	ca 36       	cpi	r28, 0x6A	; 106
   17798:	51 f4       	brne	.+20     	; 0x177ae <AMIGO_COMMANDS+0xd8>
   1779a:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   1779e:	90 e0       	ldi	r25, 0x00	; 0
   177a0:	0e 94 20 8d 	call	0x11a40	; 0x11a40 <AMIGO_is_MLA>
   177a4:	89 2b       	or	r24, r25
   177a6:	49 f1       	breq	.+82     	; 0x177fa <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   177a8:	8a e6       	ldi	r24, 0x6A	; 106
   177aa:	90 e0       	ldi	r25, 0x00	; 0
   177ac:	e5 cf       	rjmp	.-54     	; 0x17778 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   177ae:	cc 36       	cpi	r28, 0x6C	; 108
   177b0:	51 f4       	brne	.+20     	; 0x177c6 <AMIGO_COMMANDS+0xf0>
   177b2:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   177b6:	90 e0       	ldi	r25, 0x00	; 0
   177b8:	0e 94 20 8d 	call	0x11a40	; 0x11a40 <AMIGO_is_MLA>
   177bc:	89 2b       	or	r24, r25
   177be:	e9 f0       	breq	.+58     	; 0x177fa <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   177c0:	8c e6       	ldi	r24, 0x6C	; 108
   177c2:	90 e0       	ldi	r25, 0x00	; 0
   177c4:	d9 cf       	rjmp	.-78     	; 0x17778 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   177c6:	c0 37       	cpi	r28, 0x70	; 112
   177c8:	c1 f4       	brne	.+48     	; 0x177fa <AMIGO_COMMANDS+0x124>
   177ca:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   177ce:	90 e0       	ldi	r25, 0x00	; 0
   177d0:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MTA>
   177d4:	ec 01       	movw	r28, r24
   177d6:	89 2b       	or	r24, r25
   177d8:	51 f0       	breq	.+20     	; 0x177ee <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   177da:	e0 91 62 19 	lds	r30, 0x1962	; 0x801962 <AMIGOp>
   177de:	f0 91 63 19 	lds	r31, 0x1963	; 0x801963 <AMIGOp+0x1>
   177e2:	81 81       	ldd	r24, Z+1	; 0x01
   177e4:	90 e0       	ldi	r25, 0x00	; 0
   177e6:	0e 94 d1 86 	call	0x10da2	; 0x10da2 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   177ea:	fa d9       	rcall	.-3084   	; 0x16be0 <amigo_cmd_dsj>
   177ec:	c6 cf       	rjmp	.-116    	; 0x1777a <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   177ee:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   177f2:	90 e0       	ldi	r25, 0x00	; 0
   177f4:	0e 94 20 8d 	call	0x11a40	; 0x11a40 <AMIGO_is_MLA>
   177f8:	02 c0       	rjmp	.+4      	; 0x177fe <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   177fa:	c0 e0       	ldi	r28, 0x00	; 0
   177fc:	d0 e0       	ldi	r29, 0x00	; 0
}
   177fe:	ce 01       	movw	r24, r28
   17800:	df 91       	pop	r29
   17802:	cf 91       	pop	r28
   17804:	08 95       	ret

00017806 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   17806:	eb e9       	ldi	r30, 0x9B	; 155
   17808:	f9 e1       	ldi	r31, 0x19	; 25
   1780a:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   1780c:	10 82       	st	Z, r1
   1780e:	11 82       	std	Z+1, r1	; 0x01
   17810:	12 82       	std	Z+2, r1	; 0x02
   17812:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17814:	15 82       	std	Z+5, r1	; 0x05
   17816:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   17818:	12 86       	std	Z+10, r1	; 0x0a
   1781a:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   1781c:	14 86       	std	Z+12, r1	; 0x0c
   1781e:	13 86       	std	Z+11, r1	; 0x0b
   17820:	08 95       	ret

00017822 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17822:	cf 93       	push	r28
   17824:	df 93       	push	r29
   17826:	ad b7       	in	r26, 0x3d	; 61
   17828:	be b7       	in	r27, 0x3e	; 62
   1782a:	17 97       	sbiw	r26, 0x07	; 7
   1782c:	0f b6       	in	r0, 0x3f	; 63
   1782e:	f8 94       	cli
   17830:	be bf       	out	0x3e, r27	; 62
   17832:	0f be       	out	0x3f, r0	; 63
   17834:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   17836:	20 91 a4 19 	lds	r18, 0x19A4	; 0x8019a4 <plot+0x9>
   1783a:	30 91 a5 19 	lds	r19, 0x19A5	; 0x8019a5 <plot+0xa>
   1783e:	21 15       	cp	r18, r1
   17840:	31 05       	cpc	r19, r1
   17842:	09 f4       	brne	.+2      	; 0x17846 <receive_plot_flush+0x24>
   17844:	45 c0       	rjmp	.+138    	; 0x178d0 <receive_plot_flush+0xae>
   17846:	80 91 9f 19 	lds	r24, 0x199F	; 0x80199f <plot+0x4>
   1784a:	90 91 a0 19 	lds	r25, 0x19A0	; 0x8019a0 <plot+0x5>
   1784e:	00 97       	sbiw	r24, 0x00	; 0
   17850:	09 f4       	brne	.+2      	; 0x17854 <receive_plot_flush+0x32>
   17852:	40 c0       	rjmp	.+128    	; 0x178d4 <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17854:	ac 01       	movw	r20, r24
   17856:	61 e0       	ldi	r22, 0x01	; 1
   17858:	70 e0       	ldi	r23, 0x00	; 0
   1785a:	80 91 a6 19 	lds	r24, 0x19A6	; 0x8019a6 <plot+0xb>
   1785e:	90 91 a7 19 	lds	r25, 0x19A7	; 0x8019a7 <plot+0xc>
   17862:	0e 94 e7 7c 	call	0xf9ce	; 0xf9ce <fwrite>
   17866:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17868:	80 91 9f 19 	lds	r24, 0x199F	; 0x80199f <plot+0x4>
   1786c:	90 91 a0 19 	lds	r25, 0x19A0	; 0x8019a0 <plot+0x5>
   17870:	c8 17       	cp	r28, r24
   17872:	d9 07       	cpc	r29, r25
   17874:	09 f1       	breq	.+66     	; 0x178b8 <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17876:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1787a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1787e:	81 72       	andi	r24, 0x21	; 33
   17880:	99 27       	eor	r25, r25
   17882:	89 2b       	or	r24, r25
   17884:	b1 f0       	breq	.+44     	; 0x178b2 <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17886:	8b ec       	ldi	r24, 0xCB	; 203
   17888:	95 e1       	ldi	r25, 0x15	; 21
   1788a:	0e 94 f0 78 	call	0xf1e0	; 0xf1e0 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   1788e:	ed b7       	in	r30, 0x3d	; 61
   17890:	fe b7       	in	r31, 0x3e	; 62
   17892:	d7 83       	std	Z+7, r29	; 0x07
   17894:	c6 83       	std	Z+6, r28	; 0x06
   17896:	80 91 9f 19 	lds	r24, 0x199F	; 0x80199f <plot+0x4>
   1789a:	90 91 a0 19 	lds	r25, 0x19A0	; 0x8019a0 <plot+0x5>
   1789e:	95 83       	std	Z+5, r25	; 0x05
   178a0:	84 83       	std	Z+4, r24	; 0x04
   178a2:	88 eb       	ldi	r24, 0xB8	; 184
   178a4:	9d e2       	ldi	r25, 0x2D	; 45
   178a6:	a0 e0       	ldi	r26, 0x00	; 0
   178a8:	81 83       	std	Z+1, r24	; 0x01
   178aa:	92 83       	std	Z+2, r25	; 0x02
   178ac:	a3 83       	std	Z+3, r26	; 0x03
   178ae:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        }
        return(-1);
   178b2:	8f ef       	ldi	r24, 0xFF	; 255
   178b4:	9f ef       	ldi	r25, 0xFF	; 255
   178b6:	0e c0       	rjmp	.+28     	; 0x178d4 <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   178b8:	80 91 a4 19 	lds	r24, 0x19A4	; 0x8019a4 <plot+0x9>
   178bc:	90 91 a5 19 	lds	r25, 0x19A5	; 0x8019a5 <plot+0xa>
   178c0:	0e 94 3a 77 	call	0xee74	; 0xee74 <fileno>
    if(fno < 0)
   178c4:	97 fd       	sbrc	r25, 7
   178c6:	f5 cf       	rjmp	.-22     	; 0x178b2 <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   178c8:	0e 94 31 7c 	call	0xf862	; 0xf862 <syncfs>
    return (ret);
   178cc:	ce 01       	movw	r24, r28
   178ce:	02 c0       	rjmp	.+4      	; 0x178d4 <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   178d0:	80 e0       	ldi	r24, 0x00	; 0
   178d2:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   178d4:	cd b7       	in	r28, 0x3d	; 61
   178d6:	de b7       	in	r29, 0x3e	; 62
   178d8:	27 96       	adiw	r28, 0x07	; 7
   178da:	e2 e0       	ldi	r30, 0x02	; 2
   178dc:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

000178e0 <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   178e0:	ad b7       	in	r26, 0x3d	; 61
   178e2:	be b7       	in	r27, 0x3e	; 62
   178e4:	17 97       	sbiw	r26, 0x07	; 7
   178e6:	0f b6       	in	r0, 0x3f	; 63
   178e8:	f8 94       	cli
   178ea:	be bf       	out	0x3e, r27	; 62
   178ec:	0f be       	out	0x3f, r0	; 63
    if( receive_plot_flush() < 0 )
   178ee:	ad bf       	out	0x3d, r26	; 61
   178f0:	98 df       	rcall	.-208    	; 0x17822 <receive_plot_flush>
   178f2:	97 ff       	sbrs	r25, 7
        plot.error = 1;
   178f4:	03 c0       	rjmp	.+6      	; 0x178fc <printer_close+0x1c>
   178f6:	81 e0       	ldi	r24, 0x01	; 1
   178f8:	80 93 a3 19 	sts	0x19A3, r24	; 0x8019a3 <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   178fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17900:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17904:	81 72       	andi	r24, 0x21	; 33
   17906:	99 27       	eor	r25, r25
   17908:	89 2b       	or	r24, r25
    {
        if(plot.error)
   1790a:	71 f0       	breq	.+28     	; 0x17928 <printer_close+0x48>
   1790c:	80 91 a3 19 	lds	r24, 0x19A3	; 0x8019a3 <plot+0x8>
   17910:	88 23       	and	r24, r24
            printf("ERROR durring write\n");
   17912:	51 f0       	breq	.+20     	; 0x17928 <printer_close+0x48>
   17914:	87 ee       	ldi	r24, 0xE7	; 231
   17916:	9d e2       	ldi	r25, 0x2D	; 45
   17918:	a0 e0       	ldi	r26, 0x00	; 0
   1791a:	ed b7       	in	r30, 0x3d	; 61
   1791c:	fe b7       	in	r31, 0x3e	; 62
   1791e:	81 83       	std	Z+1, r24	; 0x01
   17920:	92 83       	std	Z+2, r25	; 0x02
   17922:	a3 83       	std	Z+3, r26	; 0x03
   17924:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    }

    if(plot.fp)
   17928:	80 91 a4 19 	lds	r24, 0x19A4	; 0x8019a4 <plot+0x9>
   1792c:	90 91 a5 19 	lds	r25, 0x19A5	; 0x8019a5 <plot+0xa>
   17930:	00 97       	sbiw	r24, 0x00	; 0
    {
        fclose(plot.fp);
   17932:	e1 f0       	breq	.+56     	; 0x1796c <printer_close+0x8c>
   17934:	0e 94 69 7d 	call	0xfad2	; 0xfad2 <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17938:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1793c:	85 ff       	sbrs	r24, 5
            printf("\nDONE: %08ld\n",plot.count);
   1793e:	16 c0       	rjmp	.+44     	; 0x1796c <printer_close+0x8c>
   17940:	80 91 9b 19 	lds	r24, 0x199B	; 0x80199b <plot>
   17944:	90 91 9c 19 	lds	r25, 0x199C	; 0x80199c <plot+0x1>
   17948:	a0 91 9d 19 	lds	r26, 0x199D	; 0x80199d <plot+0x2>
   1794c:	b0 91 9e 19 	lds	r27, 0x199E	; 0x80199e <plot+0x3>
   17950:	ed b7       	in	r30, 0x3d	; 61
   17952:	fe b7       	in	r31, 0x3e	; 62
   17954:	84 83       	std	Z+4, r24	; 0x04
   17956:	95 83       	std	Z+5, r25	; 0x05
   17958:	a6 83       	std	Z+6, r26	; 0x06
   1795a:	b7 83       	std	Z+7, r27	; 0x07
   1795c:	89 ed       	ldi	r24, 0xD9	; 217
   1795e:	9d e2       	ldi	r25, 0x2D	; 45
   17960:	a0 e0       	ldi	r26, 0x00	; 0
   17962:	81 83       	std	Z+1, r24	; 0x01
   17964:	92 83       	std	Z+2, r25	; 0x02
   17966:	a3 83       	std	Z+3, r26	; 0x03
   17968:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    }

    if(plot.buf)
   1796c:	80 91 a6 19 	lds	r24, 0x19A6	; 0x8019a6 <plot+0xb>
   17970:	90 91 a7 19 	lds	r25, 0x19A7	; 0x8019a7 <plot+0xc>
   17974:	00 97       	sbiw	r24, 0x00	; 0
        safefree(plot.buf);
   17976:	11 f0       	breq	.+4      	; 0x1797c <printer_close+0x9c>
    printer_init();
   17978:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <safefree>
}
   1797c:	44 df       	rcall	.-376    	; 0x17806 <printer_init>
   1797e:	ad b7       	in	r26, 0x3d	; 61
   17980:	be b7       	in	r27, 0x3e	; 62
   17982:	17 96       	adiw	r26, 0x07	; 7
   17984:	0f b6       	in	r0, 0x3f	; 63
   17986:	f8 94       	cli
   17988:	be bf       	out	0x3e, r27	; 62
   1798a:	0f be       	out	0x3f, r0	; 63
   1798c:	ad bf       	out	0x3d, r26	; 61
   1798e:	08 95       	ret

00017990 <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   17990:	ad e5       	ldi	r26, 0x5D	; 93
   17992:	b0 e0       	ldi	r27, 0x00	; 0
   17994:	ee ec       	ldi	r30, 0xCE	; 206
   17996:	fc eb       	ldi	r31, 0xBC	; 188
   17998:	0c 94 db e2 	jmp	0x1c5b6	; 0x1c5b6 <__prologue_saves__+0x18>
   1799c:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   1799e:	89 2b       	or	r24, r25
   179a0:	09 f0       	breq	.+2      	; 0x179a4 <printer_open+0x14>
   179a2:	4f c0       	rjmp	.+158    	; 0x17a42 <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   179a4:	be 01       	movw	r22, r28
   179a6:	6e 5a       	subi	r22, 0xAE	; 174
   179a8:	7f 4f       	sbci	r23, 0xFF	; 255
   179aa:	80 e0       	ldi	r24, 0x00	; 0
   179ac:	90 e0       	ldi	r25, 0x00	; 0
   179ae:	0e 94 f6 33 	call	0x67ec	; 0x67ec <clock_gettime>
        seconds = ts.tv_sec;
   179b2:	66 96       	adiw	r28, 0x16	; 22
   179b4:	8c ad       	ldd	r24, Y+60	; 0x3c
   179b6:	9d ad       	ldd	r25, Y+61	; 0x3d
   179b8:	ae ad       	ldd	r26, Y+62	; 0x3e
   179ba:	bf ad       	ldd	r27, Y+63	; 0x3f
   179bc:	66 97       	sbiw	r28, 0x16	; 22
   179be:	6e 96       	adiw	r28, 0x1e	; 30
   179c0:	8c af       	std	Y+60, r24	; 0x3c
   179c2:	9d af       	std	Y+61, r25	; 0x3d
   179c4:	ae af       	std	Y+62, r26	; 0x3e
   179c6:	bf af       	std	Y+63, r27	; 0x3f
   179c8:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   179ca:	ce 01       	movw	r24, r28
   179cc:	86 5a       	subi	r24, 0xA6	; 166
   179ce:	9f 4f       	sbci	r25, 0xFF	; 255
   179d0:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <gmtime>
   179d4:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   179d6:	fc 01       	movw	r30, r24
   179d8:	e6 80       	ldd	r14, Z+6	; 0x06
   179da:	f7 80       	ldd	r15, Z+7	; 0x07
   179dc:	80 85       	ldd	r24, Z+8	; 0x08
   179de:	91 85       	ldd	r25, Z+9	; 0x09
   179e0:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <tm_mon_to_ascii>
   179e4:	f8 01       	movw	r30, r16
   179e6:	20 81       	ld	r18, Z
   179e8:	31 81       	ldd	r19, Z+1	; 0x01
   179ea:	ed b7       	in	r30, 0x3d	; 61
   179ec:	fe b7       	in	r31, 0x3e	; 62
   179ee:	31 8b       	std	Z+17, r19	; 0x11
   179f0:	20 8b       	std	Z+16, r18	; 0x10
   179f2:	f8 01       	movw	r30, r16
   179f4:	22 81       	ldd	r18, Z+2	; 0x02
   179f6:	33 81       	ldd	r19, Z+3	; 0x03
   179f8:	ed b7       	in	r30, 0x3d	; 61
   179fa:	fe b7       	in	r31, 0x3e	; 62
   179fc:	37 87       	std	Z+15, r19	; 0x0f
   179fe:	26 87       	std	Z+14, r18	; 0x0e
   17a00:	f8 01       	movw	r30, r16
   17a02:	24 81       	ldd	r18, Z+4	; 0x04
   17a04:	35 81       	ldd	r19, Z+5	; 0x05
   17a06:	ed b7       	in	r30, 0x3d	; 61
   17a08:	fe b7       	in	r31, 0x3e	; 62
   17a0a:	35 87       	std	Z+13, r19	; 0x0d
   17a0c:	24 87       	std	Z+12, r18	; 0x0c
   17a0e:	f8 01       	movw	r30, r16
   17a10:	22 85       	ldd	r18, Z+10	; 0x0a
   17a12:	33 85       	ldd	r19, Z+11	; 0x0b
   17a14:	24 59       	subi	r18, 0x94	; 148
   17a16:	38 4f       	sbci	r19, 0xF8	; 248
   17a18:	ed b7       	in	r30, 0x3d	; 61
   17a1a:	fe b7       	in	r31, 0x3e	; 62
   17a1c:	33 87       	std	Z+11, r19	; 0x0b
   17a1e:	22 87       	std	Z+10, r18	; 0x0a
   17a20:	91 87       	std	Z+9, r25	; 0x09
   17a22:	80 87       	std	Z+8, r24	; 0x08
   17a24:	f7 82       	std	Z+7, r15	; 0x07
   17a26:	e6 82       	std	Z+6, r14	; 0x06
   17a28:	8e e1       	ldi	r24, 0x1E	; 30
   17a2a:	9e e2       	ldi	r25, 0x2E	; 46
   17a2c:	a0 e0       	ldi	r26, 0x00	; 0
   17a2e:	83 83       	std	Z+3, r24	; 0x03
   17a30:	94 83       	std	Z+4, r25	; 0x04
   17a32:	a5 83       	std	Z+5, r26	; 0x05
   17a34:	8e 01       	movw	r16, r28
   17a36:	0e 5e       	subi	r16, 0xEE	; 238
   17a38:	1f 4f       	sbci	r17, 0xFF	; 255
   17a3a:	12 83       	std	Z+2, r17	; 0x02
   17a3c:	01 83       	std	Z+1, r16	; 0x01
   17a3e:	0e 94 67 46 	call	0x8cce	; 0x8cce <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a42:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a46:	85 ff       	sbrs	r24, 5
   17a48:	0c c0       	rjmp	.+24     	; 0x17a62 <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   17a4a:	ed b7       	in	r30, 0x3d	; 61
   17a4c:	fe b7       	in	r31, 0x3e	; 62
   17a4e:	15 83       	std	Z+5, r17	; 0x05
   17a50:	04 83       	std	Z+4, r16	; 0x04
   17a52:	88 e0       	ldi	r24, 0x08	; 8
   17a54:	9e e2       	ldi	r25, 0x2E	; 46
   17a56:	a0 e0       	ldi	r26, 0x00	; 0
   17a58:	81 83       	std	Z+1, r24	; 0x01
   17a5a:	92 83       	std	Z+2, r25	; 0x02
   17a5c:	a3 83       	std	Z+3, r26	; 0x03
   17a5e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

    plot.fp = fopen(ptr,"wb");
   17a62:	6b ef       	ldi	r22, 0xFB	; 251
   17a64:	78 e0       	ldi	r23, 0x08	; 8
   17a66:	c8 01       	movw	r24, r16
   17a68:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <fopen>
   17a6c:	90 93 a5 19 	sts	0x19A5, r25	; 0x8019a5 <plot+0xa>
   17a70:	80 93 a4 19 	sts	0x19A4, r24	; 0x8019a4 <plot+0x9>
    if(plot.fp == NULL)
   17a74:	89 2b       	or	r24, r25
   17a76:	b9 f4       	brne	.+46     	; 0x17aa6 <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17a78:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a7c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17a80:	81 72       	andi	r24, 0x21	; 33
   17a82:	99 27       	eor	r25, r25
   17a84:	89 2b       	or	r24, r25
   17a86:	11 f1       	breq	.+68     	; 0x17acc <printer_open+0x13c>
        {
            perror("open failed");
   17a88:	83 e9       	ldi	r24, 0x93	; 147
   17a8a:	9d e0       	ldi	r25, 0x0D	; 13
   17a8c:	0e 94 f0 78 	call	0xf1e0	; 0xf1e0 <perror>
            printf("exiting...\n");
   17a90:	8c ef       	ldi	r24, 0xFC	; 252
   17a92:	9d e2       	ldi	r25, 0x2D	; 45
   17a94:	a0 e0       	ldi	r26, 0x00	; 0
   17a96:	ed b7       	in	r30, 0x3d	; 61
   17a98:	fe b7       	in	r31, 0x3e	; 62
   17a9a:	81 83       	std	Z+1, r24	; 0x01
   17a9c:	92 83       	std	Z+2, r25	; 0x02
   17a9e:	a3 83       	std	Z+3, r26	; 0x03
   17aa0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   17aa4:	13 c0       	rjmp	.+38     	; 0x17acc <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   17aa6:	61 e0       	ldi	r22, 0x01	; 1
   17aa8:	70 e0       	ldi	r23, 0x00	; 0
   17aaa:	81 e0       	ldi	r24, 0x01	; 1
   17aac:	92 e0       	ldi	r25, 0x02	; 2
   17aae:	0e 94 8d 28 	call	0x511a	; 0x511a <safecalloc>
   17ab2:	90 93 a7 19 	sts	0x19A7, r25	; 0x8019a7 <plot+0xc>
   17ab6:	80 93 a6 19 	sts	0x19A6, r24	; 0x8019a6 <plot+0xb>
    if(plot.buf == NULL)
   17aba:	89 2b       	or	r24, r25
        printer_close();
   17abc:	09 f4       	brne	.+2      	; 0x17ac0 <printer_open+0x130>
    plot.size = 512;
   17abe:	10 df       	rcall	.-480    	; 0x178e0 <printer_close>
   17ac0:	80 e0       	ldi	r24, 0x00	; 0
   17ac2:	92 e0       	ldi	r25, 0x02	; 2
   17ac4:	90 93 a2 19 	sts	0x19A2, r25	; 0x8019a2 <plot+0x7>
   17ac8:	80 93 a1 19 	sts	0x19A1, r24	; 0x8019a1 <plot+0x6>
}
   17acc:	c3 5a       	subi	r28, 0xA3	; 163
   17ace:	df 4f       	sbci	r29, 0xFF	; 255
   17ad0:	e6 e0       	ldi	r30, 0x06	; 6
   17ad2:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

00017ad6 <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   17ad6:	cf 93       	push	r28
   17ad8:	df 93       	push	r29
   17ada:	ad b7       	in	r26, 0x3d	; 61
   17adc:	be b7       	in	r27, 0x3e	; 62
   17ade:	17 97       	sbiw	r26, 0x07	; 7
   17ae0:	0f b6       	in	r0, 0x3f	; 63
   17ae2:	f8 94       	cli
   17ae4:	be bf       	out	0x3e, r27	; 62
   17ae6:	0f be       	out	0x3f, r0	; 63
   17ae8:	ad bf       	out	0x3d, r26	; 61
   17aea:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17aec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17af0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17af4:	81 72       	andi	r24, 0x21	; 33
   17af6:	99 27       	eor	r25, r25
   17af8:	89 2b       	or	r24, r25
   17afa:	c1 f0       	breq	.+48     	; 0x17b2c <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   17afc:	80 91 9b 19 	lds	r24, 0x199B	; 0x80199b <plot>
   17b00:	30 91 9c 19 	lds	r19, 0x199C	; 0x80199c <plot+0x1>
   17b04:	20 91 9d 19 	lds	r18, 0x199D	; 0x80199d <plot+0x2>
   17b08:	90 91 9e 19 	lds	r25, 0x199E	; 0x80199e <plot+0x3>
   17b0c:	81 11       	cpse	r24, r1
   17b0e:	0e c0       	rjmp	.+28     	; 0x17b2c <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   17b10:	ed b7       	in	r30, 0x3d	; 61
   17b12:	fe b7       	in	r31, 0x3e	; 62
   17b14:	84 83       	std	Z+4, r24	; 0x04
   17b16:	35 83       	std	Z+5, r19	; 0x05
   17b18:	26 83       	std	Z+6, r18	; 0x06
   17b1a:	97 83       	std	Z+7, r25	; 0x07
   17b1c:	81 eb       	ldi	r24, 0xB1	; 177
   17b1e:	9d e2       	ldi	r25, 0x2D	; 45
   17b20:	a0 e0       	ldi	r26, 0x00	; 0
   17b22:	81 83       	std	Z+1, r24	; 0x01
   17b24:	92 83       	std	Z+2, r25	; 0x02
   17b26:	a3 83       	std	Z+3, r26	; 0x03
   17b28:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   17b2c:	ce 01       	movw	r24, r28
   17b2e:	88 27       	eor	r24, r24
   17b30:	97 7f       	andi	r25, 0xF7	; 247
   17b32:	89 2b       	or	r24, r25
    {
        if( receive_plot_flush() )
   17b34:	41 f0       	breq	.+16     	; 0x17b46 <printer_buffer+0x70>
   17b36:	75 de       	rcall	.-790    	; 0x17822 <receive_plot_flush>
   17b38:	89 2b       	or	r24, r25
   17b3a:	09 f4       	brne	.+2      	; 0x17b3e <printer_buffer+0x68>
            plot.error = 1;
   17b3c:	3f c0       	rjmp	.+126    	; 0x17bbc <printer_buffer+0xe6>
   17b3e:	81 e0       	ldi	r24, 0x01	; 1
   17b40:	80 93 a3 19 	sts	0x19A3, r24	; 0x8019a3 <plot+0x8>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   17b44:	3b c0       	rjmp	.+118    	; 0x17bbc <printer_buffer+0xe6>
   17b46:	20 91 a6 19 	lds	r18, 0x19A6	; 0x8019a6 <plot+0xb>
   17b4a:	30 91 a7 19 	lds	r19, 0x19A7	; 0x8019a7 <plot+0xc>
   17b4e:	80 91 9f 19 	lds	r24, 0x199F	; 0x80199f <plot+0x4>
   17b52:	90 91 a0 19 	lds	r25, 0x19A0	; 0x8019a0 <plot+0x5>
   17b56:	ac 01       	movw	r20, r24
   17b58:	4f 5f       	subi	r20, 0xFF	; 255
   17b5a:	5f 4f       	sbci	r21, 0xFF	; 255
   17b5c:	50 93 a0 19 	sts	0x19A0, r21	; 0x8019a0 <plot+0x5>
   17b60:	40 93 9f 19 	sts	0x199F, r20	; 0x80199f <plot+0x4>
   17b64:	f9 01       	movw	r30, r18
   17b66:	e8 0f       	add	r30, r24
   17b68:	f9 1f       	adc	r31, r25
        plot.count++;
   17b6a:	c0 83       	st	Z, r28
   17b6c:	80 91 9b 19 	lds	r24, 0x199B	; 0x80199b <plot>
   17b70:	90 91 9c 19 	lds	r25, 0x199C	; 0x80199c <plot+0x1>
   17b74:	a0 91 9d 19 	lds	r26, 0x199D	; 0x80199d <plot+0x2>
   17b78:	b0 91 9e 19 	lds	r27, 0x199E	; 0x80199e <plot+0x3>
   17b7c:	01 96       	adiw	r24, 0x01	; 1
   17b7e:	a1 1d       	adc	r26, r1
   17b80:	b1 1d       	adc	r27, r1
   17b82:	80 93 9b 19 	sts	0x199B, r24	; 0x80199b <plot>
   17b86:	90 93 9c 19 	sts	0x199C, r25	; 0x80199c <plot+0x1>
   17b8a:	a0 93 9d 19 	sts	0x199D, r26	; 0x80199d <plot+0x2>
   17b8e:	b0 93 9e 19 	sts	0x199E, r27	; 0x80199e <plot+0x3>

        if(plot.ind >= plot.size)
   17b92:	20 91 9f 19 	lds	r18, 0x199F	; 0x80199f <plot+0x4>
   17b96:	30 91 a0 19 	lds	r19, 0x19A0	; 0x8019a0 <plot+0x5>
   17b9a:	80 91 a1 19 	lds	r24, 0x19A1	; 0x8019a1 <plot+0x6>
   17b9e:	90 91 a2 19 	lds	r25, 0x19A2	; 0x8019a2 <plot+0x7>
   17ba2:	28 17       	cp	r18, r24
        {
            if( receive_plot_flush() < 0 )
   17ba4:	39 07       	cpc	r19, r25
   17ba6:	54 f0       	brlt	.+20     	; 0x17bbc <printer_buffer+0xe6>
   17ba8:	3c de       	rcall	.-904    	; 0x17822 <receive_plot_flush>
   17baa:	97 ff       	sbrs	r25, 7
                plot.error = 1;
   17bac:	03 c0       	rjmp	.+6      	; 0x17bb4 <printer_buffer+0xde>
   17bae:	81 e0       	ldi	r24, 0x01	; 1
   17bb0:	80 93 a3 19 	sts	0x19A3, r24	; 0x8019a3 <plot+0x8>
            plot.ind  = 0;
   17bb4:	10 92 a0 19 	sts	0x19A0, r1	; 0x8019a0 <plot+0x5>
   17bb8:	10 92 9f 19 	sts	0x199F, r1	; 0x80199f <plot+0x4>
        }
    }
}
   17bbc:	cd b7       	in	r28, 0x3d	; 61
   17bbe:	de b7       	in	r29, 0x3e	; 62
   17bc0:	27 96       	adiw	r28, 0x07	; 7
   17bc2:	e2 e0       	ldi	r30, 0x02	; 2
   17bc4:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00017bc8 <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   17bc8:	cf 93       	push	r28
   17bca:	00 d0       	rcall	.+0      	; 0x17bcc <PRINTER_COMMANDS+0x4>
   17bcc:	00 d0       	rcall	.+0      	; 0x17bce <PRINTER_COMMANDS+0x6>
   17bce:	1f 92       	push	r1
   17bd0:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   17bd2:	80 91 e3 1e 	lds	r24, 0x1EE3	; 0x801ee3 <listening>
   17bd6:	90 e0       	ldi	r25, 0x00	; 0
   17bd8:	0e 94 53 8d 	call	0x11aa6	; 0x11aa6 <PRINTER_is_MLA>
   17bdc:	89 2b       	or	r24, r25
   17bde:	69 f0       	breq	.+26     	; 0x17bfa <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17be0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17be4:	85 ff       	sbrs	r24, 5
   17be6:	22 c0       	rjmp	.+68     	; 0x17c2c <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   17be8:	8c 2f       	mov	r24, r28
   17bea:	90 e0       	ldi	r25, 0x00	; 0
   17bec:	ed b7       	in	r30, 0x3d	; 61
   17bee:	fe b7       	in	r31, 0x3e	; 62
   17bf0:	95 83       	std	Z+5, r25	; 0x05
   17bf2:	84 83       	std	Z+4, r24	; 0x04
   17bf4:	85 e9       	ldi	r24, 0x95	; 149
   17bf6:	9d e2       	ldi	r25, 0x2D	; 45
   17bf8:	13 c0       	rjmp	.+38     	; 0x17c20 <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   17bfa:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <talking>
   17bfe:	90 e0       	ldi	r25, 0x00	; 0
   17c00:	0e 94 64 8d 	call	0x11ac8	; 0x11ac8 <PRINTER_is_MTA>
   17c04:	89 2b       	or	r24, r25
   17c06:	91 f0       	breq	.+36     	; 0x17c2c <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17c08:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17c0c:	85 ff       	sbrs	r24, 5
   17c0e:	0e c0       	rjmp	.+28     	; 0x17c2c <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   17c10:	8c 2f       	mov	r24, r28
   17c12:	90 e0       	ldi	r25, 0x00	; 0
   17c14:	ed b7       	in	r30, 0x3d	; 61
   17c16:	fe b7       	in	r31, 0x3e	; 62
   17c18:	95 83       	std	Z+5, r25	; 0x05
   17c1a:	84 83       	std	Z+4, r24	; 0x04
   17c1c:	8b e7       	ldi	r24, 0x7B	; 123
   17c1e:	9d e2       	ldi	r25, 0x2D	; 45
   17c20:	a0 e0       	ldi	r26, 0x00	; 0
   17c22:	81 83       	std	Z+1, r24	; 0x01
   17c24:	92 83       	std	Z+2, r25	; 0x02
   17c26:	a3 83       	std	Z+3, r26	; 0x03
   17c28:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif
        return(0);
    }
    return(0);
}
   17c2c:	80 e0       	ldi	r24, 0x00	; 0
   17c2e:	90 e0       	ldi	r25, 0x00	; 0
   17c30:	0f 90       	pop	r0
   17c32:	0f 90       	pop	r0
   17c34:	0f 90       	pop	r0
   17c36:	0f 90       	pop	r0
   17c38:	0f 90       	pop	r0
   17c3a:	cf 91       	pop	r28
   17c3c:	08 95       	ret

00017c3e <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   17c3e:	0f 93       	push	r16
   17c40:	1f 93       	push	r17
   17c42:	da 01       	movw	r26, r20
   17c44:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   17c46:	b7 fd       	sbrc	r27, 7
   17c48:	0b c0       	rjmp	.+22     	; 0x17c60 <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   17c4a:	fd 01       	movw	r30, r26
   17c4c:	e6 0f       	add	r30, r22
   17c4e:	f7 1f       	adc	r31, r23
   17c50:	e8 0f       	add	r30, r24
   17c52:	f9 1f       	adc	r31, r25
   17c54:	00 83       	st	Z, r16
        val >>= 8;
   17c56:	01 2f       	mov	r16, r17
   17c58:	12 2f       	mov	r17, r18
   17c5a:	23 2f       	mov	r18, r19
   17c5c:	33 27       	eor	r19, r19
   17c5e:	f2 cf       	rjmp	.-28     	; 0x17c44 <V2B_MSB+0x6>
    }
}
   17c60:	1f 91       	pop	r17
   17c62:	0f 91       	pop	r16
   17c64:	08 95       	ret

00017c66 <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   17c66:	0f 93       	push	r16
   17c68:	1f 93       	push	r17
   17c6a:	fc 01       	movw	r30, r24
   17c6c:	e6 0f       	add	r30, r22
   17c6e:	f7 1f       	adc	r31, r23
   17c70:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   17c72:	cf 01       	movw	r24, r30
   17c74:	86 1b       	sub	r24, r22
   17c76:	97 0b       	sbc	r25, r23
   17c78:	84 17       	cp	r24, r20
   17c7a:	95 07       	cpc	r25, r21
   17c7c:	34 f4       	brge	.+12     	; 0x17c8a <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   17c7e:	01 93       	st	Z+, r16
        val >>= 8;
   17c80:	01 2f       	mov	r16, r17
   17c82:	12 2f       	mov	r17, r18
   17c84:	23 2f       	mov	r18, r19
   17c86:	33 27       	eor	r19, r19
   17c88:	f4 cf       	rjmp	.-24     	; 0x17c72 <V2B_LSB+0xc>
    }
}
   17c8a:	1f 91       	pop	r17
   17c8c:	0f 91       	pop	r16
   17c8e:	08 95       	ret

00017c90 <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   17c90:	cf 92       	push	r12
   17c92:	df 92       	push	r13
   17c94:	ef 92       	push	r14
   17c96:	ff 92       	push	r15
   17c98:	fc 01       	movw	r30, r24
   17c9a:	e6 0f       	add	r30, r22
   17c9c:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   17c9e:	60 e0       	ldi	r22, 0x00	; 0
   17ca0:	70 e0       	ldi	r23, 0x00	; 0
   17ca2:	cb 01       	movw	r24, r22
   17ca4:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   17ca6:	9f 01       	movw	r18, r30
   17ca8:	2a 1b       	sub	r18, r26
   17caa:	3b 0b       	sbc	r19, r27
   17cac:	24 17       	cp	r18, r20
   17cae:	35 07       	cpc	r19, r21
   17cb0:	4c f4       	brge	.+18     	; 0x17cc4 <B2V_MSB+0x34>
    {
        val <<= 8;
   17cb2:	cc 24       	eor	r12, r12
   17cb4:	d6 2e       	mov	r13, r22
   17cb6:	e7 2e       	mov	r14, r23
   17cb8:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   17cba:	21 91       	ld	r18, Z+
   17cbc:	c7 01       	movw	r24, r14
   17cbe:	b6 01       	movw	r22, r12
   17cc0:	62 2b       	or	r22, r18
   17cc2:	f1 cf       	rjmp	.-30     	; 0x17ca6 <B2V_MSB+0x16>
    }
    return(val);
}
   17cc4:	ff 90       	pop	r15
   17cc6:	ef 90       	pop	r14
   17cc8:	df 90       	pop	r13
   17cca:	cf 90       	pop	r12
   17ccc:	08 95       	ret

00017cce <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   17cce:	cf 92       	push	r12
   17cd0:	df 92       	push	r13
   17cd2:	ef 92       	push	r14
   17cd4:	ff 92       	push	r15
   17cd6:	9c 01       	movw	r18, r24
   17cd8:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   17cda:	60 e0       	ldi	r22, 0x00	; 0
   17cdc:	70 e0       	ldi	r23, 0x00	; 0
   17cde:	cb 01       	movw	r24, r22
   17ce0:	41 50       	subi	r20, 0x01	; 1
   17ce2:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   17ce4:	57 fd       	sbrc	r21, 7
   17ce6:	0e c0       	rjmp	.+28     	; 0x17d04 <B2V_LSB+0x36>
    {
        val <<= 8;
   17ce8:	cc 24       	eor	r12, r12
   17cea:	d6 2e       	mov	r13, r22
   17cec:	e7 2e       	mov	r14, r23
   17cee:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   17cf0:	fa 01       	movw	r30, r20
   17cf2:	ea 0f       	add	r30, r26
   17cf4:	fb 1f       	adc	r31, r27
   17cf6:	e2 0f       	add	r30, r18
   17cf8:	f3 1f       	adc	r31, r19
   17cfa:	e0 81       	ld	r30, Z
   17cfc:	c7 01       	movw	r24, r14
   17cfe:	b6 01       	movw	r22, r12
   17d00:	6e 2b       	or	r22, r30
   17d02:	ee cf       	rjmp	.-36     	; 0x17ce0 <B2V_LSB+0x12>
    }
    return(val);
}
   17d04:	ff 90       	pop	r15
   17d06:	ef 90       	pop	r14
   17d08:	df 90       	pop	r13
   17d0a:	cf 90       	pop	r12
   17d0c:	08 95       	ret

00017d0e <lif_help>:
   17d0e:	cf 93       	push	r28
   17d10:	df 93       	push	r29
   17d12:	00 d0       	rcall	.+0      	; 0x17d14 <lif_help+0x6>
   17d14:	1f 92       	push	r1
   17d16:	ec 01       	movw	r28, r24
   17d18:	8e e5       	ldi	r24, 0x5E	; 94
   17d1a:	92 e4       	ldi	r25, 0x42	; 66
   17d1c:	a0 e0       	ldi	r26, 0x00	; 0
   17d1e:	ed b7       	in	r30, 0x3d	; 61
   17d20:	fe b7       	in	r31, 0x3e	; 62
   17d22:	81 83       	std	Z+1, r24	; 0x01
   17d24:	92 83       	std	Z+2, r25	; 0x02
   17d26:	a3 83       	std	Z+3, r26	; 0x03
   17d28:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   17d2c:	cd 2b       	or	r28, r29
   17d2e:	51 f0       	breq	.+20     	; 0x17d44 <lif_help+0x36>
   17d30:	85 e9       	ldi	r24, 0x95	; 149
   17d32:	90 e4       	ldi	r25, 0x40	; 64
   17d34:	a0 e0       	ldi	r26, 0x00	; 0
   17d36:	ed b7       	in	r30, 0x3d	; 61
   17d38:	fe b7       	in	r31, 0x3e	; 62
   17d3a:	81 83       	std	Z+1, r24	; 0x01
   17d3c:	92 83       	std	Z+2, r25	; 0x02
   17d3e:	a3 83       	std	Z+3, r26	; 0x03
   17d40:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   17d44:	cd b7       	in	r28, 0x3d	; 61
   17d46:	de b7       	in	r29, 0x3e	; 62
   17d48:	23 96       	adiw	r28, 0x03	; 3
   17d4a:	e2 e0       	ldi	r30, 0x02	; 2
   17d4c:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00017d50 <lif_calloc>:
   17d50:	cf 92       	push	r12
   17d52:	df 92       	push	r13
   17d54:	ef 92       	push	r14
   17d56:	ff 92       	push	r15
   17d58:	cf 93       	push	r28
   17d5a:	df 93       	push	r29
   17d5c:	ad b7       	in	r26, 0x3d	; 61
   17d5e:	be b7       	in	r27, 0x3e	; 62
   17d60:	17 97       	sbiw	r26, 0x07	; 7
   17d62:	0f b6       	in	r0, 0x3f	; 63
   17d64:	f8 94       	cli
   17d66:	be bf       	out	0x3e, r27	; 62
   17d68:	0f be       	out	0x3f, r0	; 63
   17d6a:	ad bf       	out	0x3d, r26	; 61
   17d6c:	6b 01       	movw	r12, r22
   17d6e:	7c 01       	movw	r14, r24
   17d70:	61 e0       	ldi	r22, 0x01	; 1
   17d72:	70 e0       	ldi	r23, 0x00	; 0
   17d74:	c6 01       	movw	r24, r12
   17d76:	0e 94 8d 28 	call	0x511a	; 0x511a <safecalloc>
   17d7a:	ec 01       	movw	r28, r24
   17d7c:	89 2b       	or	r24, r25
   17d7e:	71 f4       	brne	.+28     	; 0x17d9c <lif_calloc+0x4c>
   17d80:	ed b7       	in	r30, 0x3d	; 61
   17d82:	fe b7       	in	r31, 0x3e	; 62
   17d84:	c4 82       	std	Z+4, r12	; 0x04
   17d86:	d5 82       	std	Z+5, r13	; 0x05
   17d88:	e6 82       	std	Z+6, r14	; 0x06
   17d8a:	f7 82       	std	Z+7, r15	; 0x07
   17d8c:	8b e4       	ldi	r24, 0x4B	; 75
   17d8e:	90 e4       	ldi	r25, 0x40	; 64
   17d90:	a0 e0       	ldi	r26, 0x00	; 0
   17d92:	81 83       	std	Z+1, r24	; 0x01
   17d94:	92 83       	std	Z+2, r25	; 0x02
   17d96:	a3 83       	std	Z+3, r26	; 0x03
   17d98:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   17d9c:	ce 01       	movw	r24, r28
   17d9e:	ad b7       	in	r26, 0x3d	; 61
   17da0:	be b7       	in	r27, 0x3e	; 62
   17da2:	17 96       	adiw	r26, 0x07	; 7
   17da4:	0f b6       	in	r0, 0x3f	; 63
   17da6:	f8 94       	cli
   17da8:	be bf       	out	0x3e, r27	; 62
   17daa:	0f be       	out	0x3f, r0	; 63
   17dac:	ad bf       	out	0x3d, r26	; 61
   17dae:	df 91       	pop	r29
   17db0:	cf 91       	pop	r28
   17db2:	ff 90       	pop	r15
   17db4:	ef 90       	pop	r14
   17db6:	df 90       	pop	r13
   17db8:	cf 90       	pop	r12
   17dba:	08 95       	ret

00017dbc <lif_free>:
   17dbc:	00 d0       	rcall	.+0      	; 0x17dbe <lif_free+0x2>
   17dbe:	1f 92       	push	r1
   17dc0:	00 97       	sbiw	r24, 0x00	; 0
   17dc2:	59 f4       	brne	.+22     	; 0x17dda <lif_free+0x1e>
   17dc4:	83 e3       	ldi	r24, 0x33	; 51
   17dc6:	90 e4       	ldi	r25, 0x40	; 64
   17dc8:	a0 e0       	ldi	r26, 0x00	; 0
   17dca:	ed b7       	in	r30, 0x3d	; 61
   17dcc:	fe b7       	in	r31, 0x3e	; 62
   17dce:	81 83       	std	Z+1, r24	; 0x01
   17dd0:	92 83       	std	Z+2, r25	; 0x02
   17dd2:	a3 83       	std	Z+3, r26	; 0x03
   17dd4:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   17dd8:	02 c0       	rjmp	.+4      	; 0x17dde <lif_free+0x22>
   17dda:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <safefree>
   17dde:	0f 90       	pop	r0
   17de0:	0f 90       	pop	r0
   17de2:	0f 90       	pop	r0
   17de4:	08 95       	ret

00017de6 <lif_stralloc>:
   17de6:	0f 93       	push	r16
   17de8:	1f 93       	push	r17
   17dea:	cf 93       	push	r28
   17dec:	df 93       	push	r29
   17dee:	ec 01       	movw	r28, r24
   17df0:	fc 01       	movw	r30, r24
   17df2:	01 90       	ld	r0, Z+
   17df4:	00 20       	and	r0, r0
   17df6:	e9 f7       	brne	.-6      	; 0x17df2 <lif_stralloc+0xc>
   17df8:	bf 01       	movw	r22, r30
   17dfa:	68 1b       	sub	r22, r24
   17dfc:	79 0b       	sbc	r23, r25
   17dfe:	6d 5f       	subi	r22, 0xFD	; 253
   17e00:	7f 4f       	sbci	r23, 0xFF	; 255
   17e02:	07 2e       	mov	r0, r23
   17e04:	00 0c       	add	r0, r0
   17e06:	88 0b       	sbc	r24, r24
   17e08:	99 0b       	sbc	r25, r25
   17e0a:	a2 df       	rcall	.-188    	; 0x17d50 <lif_calloc>
   17e0c:	8c 01       	movw	r16, r24
   17e0e:	00 97       	sbiw	r24, 0x00	; 0
   17e10:	19 f0       	breq	.+6      	; 0x17e18 <lif_stralloc+0x32>
   17e12:	be 01       	movw	r22, r28
   17e14:	0e 94 79 31 	call	0x62f2	; 0x62f2 <strcpy>
   17e18:	c8 01       	movw	r24, r16
   17e1a:	df 91       	pop	r29
   17e1c:	cf 91       	pop	r28
   17e1e:	1f 91       	pop	r17
   17e20:	0f 91       	pop	r16
   17e22:	08 95       	ret

00017e24 <lif_open>:
   17e24:	ef 92       	push	r14
   17e26:	ff 92       	push	r15
   17e28:	0f 93       	push	r16
   17e2a:	1f 93       	push	r17
   17e2c:	cf 93       	push	r28
   17e2e:	df 93       	push	r29
   17e30:	ad b7       	in	r26, 0x3d	; 61
   17e32:	be b7       	in	r27, 0x3e	; 62
   17e34:	17 97       	sbiw	r26, 0x07	; 7
   17e36:	0f b6       	in	r0, 0x3f	; 63
   17e38:	f8 94       	cli
   17e3a:	be bf       	out	0x3e, r27	; 62
   17e3c:	0f be       	out	0x3f, r0	; 63
   17e3e:	ad bf       	out	0x3d, r26	; 61
   17e40:	8c 01       	movw	r16, r24
   17e42:	7b 01       	movw	r14, r22
   17e44:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <fopen>
   17e48:	ec 01       	movw	r28, r24
   17e4a:	89 2b       	or	r24, r25
   17e4c:	71 f4       	brne	.+28     	; 0x17e6a <lif_open+0x46>
   17e4e:	ed b7       	in	r30, 0x3d	; 61
   17e50:	fe b7       	in	r31, 0x3e	; 62
   17e52:	f7 82       	std	Z+7, r15	; 0x07
   17e54:	e6 82       	std	Z+6, r14	; 0x06
   17e56:	15 83       	std	Z+5, r17	; 0x05
   17e58:	04 83       	std	Z+4, r16	; 0x04
   17e5a:	8e e0       	ldi	r24, 0x0E	; 14
   17e5c:	90 e4       	ldi	r25, 0x40	; 64
   17e5e:	a0 e0       	ldi	r26, 0x00	; 0
   17e60:	81 83       	std	Z+1, r24	; 0x01
   17e62:	92 83       	std	Z+2, r25	; 0x02
   17e64:	a3 83       	std	Z+3, r26	; 0x03
   17e66:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   17e6a:	ce 01       	movw	r24, r28
   17e6c:	cd b7       	in	r28, 0x3d	; 61
   17e6e:	de b7       	in	r29, 0x3e	; 62
   17e70:	27 96       	adiw	r28, 0x07	; 7
   17e72:	e6 e0       	ldi	r30, 0x06	; 6
   17e74:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

00017e78 <lif_stat>:
   17e78:	0f 93       	push	r16
   17e7a:	1f 93       	push	r17
   17e7c:	cf 93       	push	r28
   17e7e:	df 93       	push	r29
   17e80:	00 d0       	rcall	.+0      	; 0x17e82 <lif_stat+0xa>
   17e82:	00 d0       	rcall	.+0      	; 0x17e84 <lif_stat+0xc>
   17e84:	1f 92       	push	r1
   17e86:	8c 01       	movw	r16, r24
   17e88:	d6 2f       	mov	r29, r22
   17e8a:	c7 2f       	mov	r28, r23
   17e8c:	0e 94 c4 79 	call	0xf388	; 0xf388 <stat>
   17e90:	97 ff       	sbrs	r25, 7
   17e92:	0f c0       	rjmp	.+30     	; 0x17eb2 <lif_stat+0x3a>
   17e94:	ed b7       	in	r30, 0x3d	; 61
   17e96:	fe b7       	in	r31, 0x3e	; 62
   17e98:	15 83       	std	Z+5, r17	; 0x05
   17e9a:	04 83       	std	Z+4, r16	; 0x04
   17e9c:	85 ef       	ldi	r24, 0xF5	; 245
   17e9e:	9f e3       	ldi	r25, 0x3F	; 63
   17ea0:	a0 e0       	ldi	r26, 0x00	; 0
   17ea2:	81 83       	std	Z+1, r24	; 0x01
   17ea4:	92 83       	std	Z+2, r25	; 0x02
   17ea6:	a3 83       	std	Z+3, r26	; 0x03
   17ea8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   17eac:	80 e0       	ldi	r24, 0x00	; 0
   17eae:	90 e0       	ldi	r25, 0x00	; 0
   17eb0:	02 c0       	rjmp	.+4      	; 0x17eb6 <lif_stat+0x3e>
   17eb2:	8d 2f       	mov	r24, r29
   17eb4:	9c 2f       	mov	r25, r28
   17eb6:	cd b7       	in	r28, 0x3d	; 61
   17eb8:	de b7       	in	r29, 0x3e	; 62
   17eba:	25 96       	adiw	r28, 0x05	; 5
   17ebc:	e4 e0       	ldi	r30, 0x04	; 4
   17ebe:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

00017ec2 <lif_seek_msg>:
   17ec2:	a9 e0       	ldi	r26, 0x09	; 9
   17ec4:	b0 e0       	ldi	r27, 0x00	; 0
   17ec6:	e7 e6       	ldi	r30, 0x67	; 103
   17ec8:	ff eb       	ldi	r31, 0xBF	; 191
   17eca:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
   17ece:	ec 01       	movw	r28, r24
   17ed0:	6a 01       	movw	r12, r20
   17ed2:	7b 01       	movw	r14, r22
   17ed4:	89 01       	movw	r16, r18
   17ed6:	0e 94 fe 7a 	call	0xf5fc	; 0xf5fc <ftell>
   17eda:	6c 15       	cp	r22, r12
   17edc:	7d 05       	cpc	r23, r13
   17ede:	8e 05       	cpc	r24, r14
   17ee0:	9f 05       	cpc	r25, r15
   17ee2:	19 f4       	brne	.+6      	; 0x17eea <lif_seek_msg+0x28>
   17ee4:	81 e0       	ldi	r24, 0x01	; 1
   17ee6:	90 e0       	ldi	r25, 0x00	; 0
   17ee8:	1b c0       	rjmp	.+54     	; 0x17f20 <lif_seek_msg+0x5e>
   17eea:	20 e0       	ldi	r18, 0x00	; 0
   17eec:	30 e0       	ldi	r19, 0x00	; 0
   17eee:	b7 01       	movw	r22, r14
   17ef0:	a6 01       	movw	r20, r12
   17ef2:	ce 01       	movw	r24, r28
   17ef4:	0e 94 81 7b 	call	0xf702	; 0xf702 <fseek>
   17ef8:	97 ff       	sbrs	r25, 7
   17efa:	f4 cf       	rjmp	.-24     	; 0x17ee4 <lif_seek_msg+0x22>
   17efc:	ed b7       	in	r30, 0x3d	; 61
   17efe:	fe b7       	in	r31, 0x3e	; 62
   17f00:	c6 82       	std	Z+6, r12	; 0x06
   17f02:	d7 82       	std	Z+7, r13	; 0x07
   17f04:	e0 86       	std	Z+8, r14	; 0x08
   17f06:	f1 86       	std	Z+9, r15	; 0x09
   17f08:	15 83       	std	Z+5, r17	; 0x05
   17f0a:	04 83       	std	Z+4, r16	; 0x04
   17f0c:	84 ed       	ldi	r24, 0xD4	; 212
   17f0e:	9f e3       	ldi	r25, 0x3F	; 63
   17f10:	a0 e0       	ldi	r26, 0x00	; 0
   17f12:	81 83       	std	Z+1, r24	; 0x01
   17f14:	92 83       	std	Z+2, r25	; 0x02
   17f16:	a3 83       	std	Z+3, r26	; 0x03
   17f18:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   17f1c:	80 e0       	ldi	r24, 0x00	; 0
   17f1e:	90 e0       	ldi	r25, 0x00	; 0
   17f20:	cd b7       	in	r28, 0x3d	; 61
   17f22:	de b7       	in	r29, 0x3e	; 62
   17f24:	29 96       	adiw	r28, 0x09	; 9
   17f26:	e8 e0       	ldi	r30, 0x08	; 8
   17f28:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

00017f2c <lif_read>:
   17f2c:	af e0       	ldi	r26, 0x0F	; 15
   17f2e:	b0 e0       	ldi	r27, 0x00	; 0
   17f30:	ec e9       	ldi	r30, 0x9C	; 156
   17f32:	ff eb       	ldi	r31, 0xBF	; 191
   17f34:	0c 94 d5 e2 	jmp	0x1c5aa	; 0x1c5aa <__prologue_saves__+0xc>
   17f38:	ec 01       	movw	r28, r24
   17f3a:	7b 01       	movw	r14, r22
   17f3c:	49 01       	movw	r8, r18
   17f3e:	5a 01       	movw	r10, r20
   17f40:	28 81       	ld	r18, Y
   17f42:	39 81       	ldd	r19, Y+1	; 0x01
   17f44:	b5 01       	movw	r22, r10
   17f46:	a4 01       	movw	r20, r8
   17f48:	8a 81       	ldd	r24, Y+2	; 0x02
   17f4a:	9b 81       	ldd	r25, Y+3	; 0x03
   17f4c:	ba df       	rcall	.-140    	; 0x17ec2 <lif_seek_msg>
   17f4e:	89 2b       	or	r24, r25
   17f50:	91 f1       	breq	.+100    	; 0x17fb6 <lif_read+0x8a>
   17f52:	2a 81       	ldd	r18, Y+2	; 0x02
   17f54:	3b 81       	ldd	r19, Y+3	; 0x03
   17f56:	a8 01       	movw	r20, r16
   17f58:	61 e0       	ldi	r22, 0x01	; 1
   17f5a:	70 e0       	ldi	r23, 0x00	; 0
   17f5c:	c7 01       	movw	r24, r14
   17f5e:	0e 94 15 7c 	call	0xf82a	; 0xf82a <fread>
   17f62:	6c 01       	movw	r12, r24
   17f64:	e1 2c       	mov	r14, r1
   17f66:	f1 2c       	mov	r15, r1
   17f68:	b8 01       	movw	r22, r16
   17f6a:	01 2e       	mov	r0, r17
   17f6c:	00 0c       	add	r0, r0
   17f6e:	88 0b       	sbc	r24, r24
   17f70:	99 0b       	sbc	r25, r25
   17f72:	c6 16       	cp	r12, r22
   17f74:	d7 06       	cpc	r13, r23
   17f76:	e8 06       	cpc	r14, r24
   17f78:	f9 06       	cpc	r15, r25
   17f7a:	19 f1       	breq	.+70     	; 0x17fc2 <lif_read+0x96>
   17f7c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17f80:	81 ff       	sbrs	r24, 1
   17f82:	1d c0       	rjmp	.+58     	; 0x17fbe <lif_read+0x92>
   17f84:	ed b7       	in	r30, 0x3d	; 61
   17f86:	fe b7       	in	r31, 0x3e	; 62
   17f88:	17 87       	std	Z+15, r17	; 0x0f
   17f8a:	06 87       	std	Z+14, r16	; 0x0e
   17f8c:	c2 86       	std	Z+10, r12	; 0x0a
   17f8e:	d3 86       	std	Z+11, r13	; 0x0b
   17f90:	e4 86       	std	Z+12, r14	; 0x0c
   17f92:	f5 86       	std	Z+13, r15	; 0x0d
   17f94:	86 82       	std	Z+6, r8	; 0x06
   17f96:	97 82       	std	Z+7, r9	; 0x07
   17f98:	a0 86       	std	Z+8, r10	; 0x08
   17f9a:	b1 86       	std	Z+9, r11	; 0x09
   17f9c:	88 81       	ld	r24, Y
   17f9e:	99 81       	ldd	r25, Y+1	; 0x01
   17fa0:	95 83       	std	Z+5, r25	; 0x05
   17fa2:	84 83       	std	Z+4, r24	; 0x04
   17fa4:	88 e9       	ldi	r24, 0x98	; 152
   17fa6:	9f e3       	ldi	r25, 0x3F	; 63
   17fa8:	a0 e0       	ldi	r26, 0x00	; 0
   17faa:	81 83       	std	Z+1, r24	; 0x01
   17fac:	92 83       	std	Z+2, r25	; 0x02
   17fae:	a3 83       	std	Z+3, r26	; 0x03
   17fb0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   17fb4:	04 c0       	rjmp	.+8      	; 0x17fbe <lif_read+0x92>
   17fb6:	60 e0       	ldi	r22, 0x00	; 0
   17fb8:	70 e0       	ldi	r23, 0x00	; 0
   17fba:	cb 01       	movw	r24, r22
   17fbc:	02 c0       	rjmp	.+4      	; 0x17fc2 <lif_read+0x96>
   17fbe:	c7 01       	movw	r24, r14
   17fc0:	b6 01       	movw	r22, r12
   17fc2:	cd b7       	in	r28, 0x3d	; 61
   17fc4:	de b7       	in	r29, 0x3e	; 62
   17fc6:	2f 96       	adiw	r28, 0x0f	; 15
   17fc8:	ec e0       	ldi	r30, 0x0C	; 12
   17fca:	0c 94 f1 e2 	jmp	0x1c5e2	; 0x1c5e2 <__epilogue_restores__+0xc>

00017fce <lif_write>:
   17fce:	8f 92       	push	r8
   17fd0:	9f 92       	push	r9
   17fd2:	af 92       	push	r10
   17fd4:	bf 92       	push	r11
   17fd6:	ef 92       	push	r14
   17fd8:	ff 92       	push	r15
   17fda:	0f 93       	push	r16
   17fdc:	1f 93       	push	r17
   17fde:	cf 93       	push	r28
   17fe0:	df 93       	push	r29
   17fe2:	ad b7       	in	r26, 0x3d	; 61
   17fe4:	be b7       	in	r27, 0x3e	; 62
   17fe6:	1d 97       	sbiw	r26, 0x0d	; 13
   17fe8:	0f b6       	in	r0, 0x3f	; 63
   17fea:	f8 94       	cli
   17fec:	be bf       	out	0x3e, r27	; 62
   17fee:	0f be       	out	0x3f, r0	; 63
   17ff0:	ad bf       	out	0x3d, r26	; 61
   17ff2:	7c 01       	movw	r14, r24
   17ff4:	eb 01       	movw	r28, r22
   17ff6:	49 01       	movw	r8, r18
   17ff8:	5a 01       	movw	r10, r20
   17ffa:	fc 01       	movw	r30, r24
   17ffc:	20 81       	ld	r18, Z
   17ffe:	31 81       	ldd	r19, Z+1	; 0x01
   18000:	b5 01       	movw	r22, r10
   18002:	a4 01       	movw	r20, r8
   18004:	82 81       	ldd	r24, Z+2	; 0x02
   18006:	93 81       	ldd	r25, Z+3	; 0x03
   18008:	5c df       	rcall	.-328    	; 0x17ec2 <lif_seek_msg>
   1800a:	00 97       	sbiw	r24, 0x00	; 0
   1800c:	71 f1       	breq	.+92     	; 0x1806a <lif_write+0x9c>
   1800e:	f7 01       	movw	r30, r14
   18010:	22 81       	ldd	r18, Z+2	; 0x02
   18012:	33 81       	ldd	r19, Z+3	; 0x03
   18014:	a8 01       	movw	r20, r16
   18016:	61 e0       	ldi	r22, 0x01	; 1
   18018:	70 e0       	ldi	r23, 0x00	; 0
   1801a:	ce 01       	movw	r24, r28
   1801c:	0e 94 e7 7c 	call	0xf9ce	; 0xf9ce <fwrite>
   18020:	ec 01       	movw	r28, r24
   18022:	08 17       	cp	r16, r24
   18024:	19 07       	cpc	r17, r25
   18026:	f1 f0       	breq	.+60     	; 0x18064 <lif_write+0x96>
   18028:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1802c:	81 ff       	sbrs	r24, 1
   1802e:	1c c0       	rjmp	.+56     	; 0x18068 <lif_write+0x9a>
   18030:	ed b7       	in	r30, 0x3d	; 61
   18032:	fe b7       	in	r31, 0x3e	; 62
   18034:	15 87       	std	Z+13, r17	; 0x0d
   18036:	04 87       	std	Z+12, r16	; 0x0c
   18038:	d3 87       	std	Z+11, r29	; 0x0b
   1803a:	c2 87       	std	Z+10, r28	; 0x0a
   1803c:	86 82       	std	Z+6, r8	; 0x06
   1803e:	97 82       	std	Z+7, r9	; 0x07
   18040:	a0 86       	std	Z+8, r10	; 0x08
   18042:	b1 86       	std	Z+9, r11	; 0x09
   18044:	f7 01       	movw	r30, r14
   18046:	80 81       	ld	r24, Z
   18048:	91 81       	ldd	r25, Z+1	; 0x01
   1804a:	ed b7       	in	r30, 0x3d	; 61
   1804c:	fe b7       	in	r31, 0x3e	; 62
   1804e:	95 83       	std	Z+5, r25	; 0x05
   18050:	84 83       	std	Z+4, r24	; 0x04
   18052:	8b e5       	ldi	r24, 0x5B	; 91
   18054:	9f e3       	ldi	r25, 0x3F	; 63
   18056:	a0 e0       	ldi	r26, 0x00	; 0
   18058:	81 83       	std	Z+1, r24	; 0x01
   1805a:	92 83       	std	Z+2, r25	; 0x02
   1805c:	a3 83       	std	Z+3, r26	; 0x03
   1805e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18062:	02 c0       	rjmp	.+4      	; 0x18068 <lif_write+0x9a>
   18064:	c8 01       	movw	r24, r16
   18066:	01 c0       	rjmp	.+2      	; 0x1806a <lif_write+0x9c>
   18068:	ce 01       	movw	r24, r28
   1806a:	ad b7       	in	r26, 0x3d	; 61
   1806c:	be b7       	in	r27, 0x3e	; 62
   1806e:	1d 96       	adiw	r26, 0x0d	; 13
   18070:	0f b6       	in	r0, 0x3f	; 63
   18072:	f8 94       	cli
   18074:	be bf       	out	0x3e, r27	; 62
   18076:	0f be       	out	0x3f, r0	; 63
   18078:	ad bf       	out	0x3d, r26	; 61
   1807a:	df 91       	pop	r29
   1807c:	cf 91       	pop	r28
   1807e:	1f 91       	pop	r17
   18080:	0f 91       	pop	r16
   18082:	ff 90       	pop	r15
   18084:	ef 90       	pop	r14
   18086:	bf 90       	pop	r11
   18088:	af 90       	pop	r10
   1808a:	9f 90       	pop	r9
   1808c:	8f 90       	pop	r8
   1808e:	08 95       	ret

00018090 <lif_chars>:
   18090:	80 32       	cpi	r24, 0x20	; 32
   18092:	91 05       	cpc	r25, r1
   18094:	e1 f0       	breq	.+56     	; 0x180ce <lif_chars+0x3e>
   18096:	9c 01       	movw	r18, r24
   18098:	21 56       	subi	r18, 0x61	; 97
   1809a:	31 09       	sbc	r19, r1
   1809c:	2a 31       	cpi	r18, 0x1A	; 26
   1809e:	31 05       	cpc	r19, r1
   180a0:	10 f4       	brcc	.+4      	; 0x180a6 <lif_chars+0x16>
   180a2:	80 97       	sbiw	r24, 0x20	; 32
   180a4:	08 95       	ret
   180a6:	9c 01       	movw	r18, r24
   180a8:	21 54       	subi	r18, 0x41	; 65
   180aa:	31 09       	sbc	r19, r1
   180ac:	2a 31       	cpi	r18, 0x1A	; 26
   180ae:	31 05       	cpc	r19, r1
   180b0:	c8 f0       	brcs	.+50     	; 0x180e4 <lif_chars+0x54>
   180b2:	16 16       	cp	r1, r22
   180b4:	17 06       	cpc	r1, r23
   180b6:	74 f4       	brge	.+28     	; 0x180d4 <lif_chars+0x44>
   180b8:	2f 5e       	subi	r18, 0xEF	; 239
   180ba:	3f 4f       	sbci	r19, 0xFF	; 255
   180bc:	2a 30       	cpi	r18, 0x0A	; 10
   180be:	31 05       	cpc	r19, r1
   180c0:	88 f0       	brcs	.+34     	; 0x180e4 <lif_chars+0x54>
   180c2:	8f 35       	cpi	r24, 0x5F	; 95
   180c4:	91 05       	cpc	r25, r1
   180c6:	49 f0       	breq	.+18     	; 0x180da <lif_chars+0x4a>
   180c8:	8d 97       	sbiw	r24, 0x2d	; 45
   180ca:	21 f4       	brne	.+8      	; 0x180d4 <lif_chars+0x44>
   180cc:	09 c0       	rjmp	.+18     	; 0x180e0 <lif_chars+0x50>
   180ce:	80 e2       	ldi	r24, 0x20	; 32
   180d0:	90 e0       	ldi	r25, 0x00	; 0
   180d2:	08 95       	ret
   180d4:	80 e0       	ldi	r24, 0x00	; 0
   180d6:	90 e0       	ldi	r25, 0x00	; 0
   180d8:	08 95       	ret
   180da:	8f e5       	ldi	r24, 0x5F	; 95
   180dc:	90 e0       	ldi	r25, 0x00	; 0
   180de:	08 95       	ret
   180e0:	8d e2       	ldi	r24, 0x2D	; 45
   180e2:	90 e0       	ldi	r25, 0x00	; 0
   180e4:	08 95       	ret

000180e6 <lif_B2S>:
   180e6:	a0 e0       	ldi	r26, 0x00	; 0
   180e8:	b0 e0       	ldi	r27, 0x00	; 0
   180ea:	e9 e7       	ldi	r30, 0x79	; 121
   180ec:	f0 ec       	ldi	r31, 0xC0	; 192
   180ee:	0c 94 d5 e2 	jmp	0x1c5aa	; 0x1c5aa <__prologue_saves__+0xc>
   180f2:	5c 01       	movw	r10, r24
   180f4:	6b 01       	movw	r12, r22
   180f6:	ea 01       	movw	r28, r20
   180f8:	4c 01       	movw	r8, r24
   180fa:	ee 24       	eor	r14, r14
   180fc:	e3 94       	inc	r14
   180fe:	f1 2c       	mov	r15, r1
   18100:	00 e0       	ldi	r16, 0x00	; 0
   18102:	10 e0       	ldi	r17, 0x00	; 0
   18104:	0c 17       	cp	r16, r28
   18106:	1d 07       	cpc	r17, r29
   18108:	6c f4       	brge	.+26     	; 0x18124 <lif_B2S+0x3e>
   1810a:	f4 01       	movw	r30, r8
   1810c:	81 91       	ld	r24, Z+
   1810e:	4f 01       	movw	r8, r30
   18110:	b8 01       	movw	r22, r16
   18112:	90 e0       	ldi	r25, 0x00	; 0
   18114:	bd df       	rcall	.-134    	; 0x18090 <lif_chars>
   18116:	89 2b       	or	r24, r25
   18118:	11 f4       	brne	.+4      	; 0x1811e <lif_B2S+0x38>
   1811a:	e1 2c       	mov	r14, r1
   1811c:	f1 2c       	mov	r15, r1
   1811e:	0f 5f       	subi	r16, 0xFF	; 255
   18120:	1f 4f       	sbci	r17, 0xFF	; 255
   18122:	f0 cf       	rjmp	.-32     	; 0x18104 <lif_B2S+0x1e>
   18124:	d6 01       	movw	r26, r12
   18126:	f5 01       	movw	r30, r10
   18128:	cf 01       	movw	r24, r30
   1812a:	8a 19       	sub	r24, r10
   1812c:	9b 09       	sbc	r25, r11
   1812e:	8c 17       	cp	r24, r28
   18130:	9d 07       	cpc	r25, r29
   18132:	1c f4       	brge	.+6      	; 0x1813a <lif_B2S+0x54>
   18134:	81 91       	ld	r24, Z+
   18136:	8d 93       	st	X+, r24
   18138:	f7 cf       	rjmp	.-18     	; 0x18128 <lif_B2S+0x42>
   1813a:	d7 ff       	sbrs	r29, 7
   1813c:	02 c0       	rjmp	.+4      	; 0x18142 <lif_B2S+0x5c>
   1813e:	c0 e0       	ldi	r28, 0x00	; 0
   18140:	d0 e0       	ldi	r29, 0x00	; 0
   18142:	cc 0d       	add	r28, r12
   18144:	dd 1d       	adc	r29, r13
   18146:	18 82       	st	Y, r1
   18148:	c6 01       	movw	r24, r12
   1814a:	0e 94 57 32 	call	0x64ae	; 0x64ae <trim_tail>
   1814e:	c7 01       	movw	r24, r14
   18150:	cd b7       	in	r28, 0x3d	; 61
   18152:	de b7       	in	r29, 0x3e	; 62
   18154:	ec e0       	ldi	r30, 0x0C	; 12
   18156:	0c 94 f1 e2 	jmp	0x1c5e2	; 0x1c5e2 <__epilogue_restores__+0xc>

0001815a <lif_checkname>:
   1815a:	ef 92       	push	r14
   1815c:	ff 92       	push	r15
   1815e:	0f 93       	push	r16
   18160:	1f 93       	push	r17
   18162:	cf 93       	push	r28
   18164:	df 93       	push	r29
   18166:	7c 01       	movw	r14, r24
   18168:	ec 01       	movw	r28, r24
   1816a:	01 e0       	ldi	r16, 0x01	; 1
   1816c:	10 e0       	ldi	r17, 0x00	; 0
   1816e:	be 01       	movw	r22, r28
   18170:	6e 19       	sub	r22, r14
   18172:	7f 09       	sbc	r23, r15
   18174:	89 91       	ld	r24, Y+
   18176:	88 23       	and	r24, r24
   18178:	39 f0       	breq	.+14     	; 0x18188 <lif_checkname+0x2e>
   1817a:	90 e0       	ldi	r25, 0x00	; 0
   1817c:	89 df       	rcall	.-238    	; 0x18090 <lif_chars>
   1817e:	89 2b       	or	r24, r25
   18180:	b1 f7       	brne	.-20     	; 0x1816e <lif_checkname+0x14>
   18182:	00 e0       	ldi	r16, 0x00	; 0
   18184:	10 e0       	ldi	r17, 0x00	; 0
   18186:	f3 cf       	rjmp	.-26     	; 0x1816e <lif_checkname+0x14>
   18188:	c8 01       	movw	r24, r16
   1818a:	cd b7       	in	r28, 0x3d	; 61
   1818c:	de b7       	in	r29, 0x3e	; 62
   1818e:	e6 e0       	ldi	r30, 0x06	; 6
   18190:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

00018194 <lif_S2B>:
   18194:	fb 01       	movw	r30, r22
   18196:	dc 01       	movw	r26, r24
   18198:	20 e0       	ldi	r18, 0x00	; 0
   1819a:	30 e0       	ldi	r19, 0x00	; 0
   1819c:	61 91       	ld	r22, Z+
   1819e:	61 11       	cpse	r22, r1
   181a0:	05 c0       	rjmp	.+10     	; 0x181ac <lif_S2B+0x18>
   181a2:	fc 01       	movw	r30, r24
   181a4:	e2 0f       	add	r30, r18
   181a6:	f3 1f       	adc	r31, r19
   181a8:	60 e2       	ldi	r22, 0x20	; 32
   181aa:	08 c0       	rjmp	.+16     	; 0x181bc <lif_S2B+0x28>
   181ac:	24 17       	cp	r18, r20
   181ae:	35 07       	cpc	r19, r21
   181b0:	24 f4       	brge	.+8      	; 0x181ba <lif_S2B+0x26>
   181b2:	6d 93       	st	X+, r22
   181b4:	2f 5f       	subi	r18, 0xFF	; 255
   181b6:	3f 4f       	sbci	r19, 0xFF	; 255
   181b8:	f1 cf       	rjmp	.-30     	; 0x1819c <lif_S2B+0x8>
   181ba:	08 95       	ret
   181bc:	9f 01       	movw	r18, r30
   181be:	28 1b       	sub	r18, r24
   181c0:	39 0b       	sbc	r19, r25
   181c2:	24 17       	cp	r18, r20
   181c4:	35 07       	cpc	r19, r21
   181c6:	14 f4       	brge	.+4      	; 0x181cc <lif_S2B+0x38>
   181c8:	61 93       	st	Z+, r22
   181ca:	f8 cf       	rjmp	.-16     	; 0x181bc <lif_S2B+0x28>
   181cc:	08 95       	ret

000181ce <lif_fixname>:
   181ce:	a0 e0       	ldi	r26, 0x00	; 0
   181d0:	b0 e0       	ldi	r27, 0x00	; 0
   181d2:	ed ee       	ldi	r30, 0xED	; 237
   181d4:	f0 ec       	ldi	r31, 0xC0	; 192
   181d6:	0c 94 d8 e2 	jmp	0x1c5b0	; 0x1c5b0 <__prologue_saves__+0x12>
   181da:	8c 01       	movw	r16, r24
   181dc:	cb 01       	movw	r24, r22
   181de:	7a 01       	movw	r14, r20
   181e0:	0e 94 90 77 	call	0xef20	; 0xef20 <basename>
   181e4:	6c 01       	movw	r12, r24
   181e6:	e8 01       	movw	r28, r16
   181e8:	80 e2       	ldi	r24, 0x20	; 32
   181ea:	b8 2e       	mov	r11, r24
   181ec:	be 01       	movw	r22, r28
   181ee:	60 1b       	sub	r22, r16
   181f0:	71 0b       	sbc	r23, r17
   181f2:	f6 01       	movw	r30, r12
   181f4:	81 91       	ld	r24, Z+
   181f6:	6f 01       	movw	r12, r30
   181f8:	81 11       	cpse	r24, r1
   181fa:	02 c0       	rjmp	.+4      	; 0x18200 <lif_fixname+0x32>
   181fc:	20 e2       	ldi	r18, 0x20	; 32
   181fe:	0e c0       	rjmp	.+28     	; 0x1821c <lif_fixname+0x4e>
   18200:	1e 14       	cp	r1, r14
   18202:	1f 04       	cpc	r1, r15
   18204:	dc f7       	brge	.-10     	; 0x181fc <lif_fixname+0x2e>
   18206:	8e 32       	cpi	r24, 0x2E	; 46
   18208:	c9 f3       	breq	.-14     	; 0x181fc <lif_fixname+0x2e>
   1820a:	90 e0       	ldi	r25, 0x00	; 0
   1820c:	41 df       	rcall	.-382    	; 0x18090 <lif_chars>
   1820e:	88 23       	and	r24, r24
   18210:	11 f0       	breq	.+4      	; 0x18216 <lif_fixname+0x48>
   18212:	88 83       	st	Y, r24
   18214:	01 c0       	rjmp	.+2      	; 0x18218 <lif_fixname+0x4a>
   18216:	b8 82       	st	Y, r11
   18218:	21 96       	adiw	r28, 0x01	; 1
   1821a:	e8 cf       	rjmp	.-48     	; 0x181ec <lif_fixname+0x1e>
   1821c:	ce 01       	movw	r24, r28
   1821e:	80 1b       	sub	r24, r16
   18220:	91 0b       	sbc	r25, r17
   18222:	8e 15       	cp	r24, r14
   18224:	9f 05       	cpc	r25, r15
   18226:	14 f4       	brge	.+4      	; 0x1822c <lif_fixname+0x5e>
   18228:	29 93       	st	Y+, r18
   1822a:	f8 cf       	rjmp	.-16     	; 0x1821c <lif_fixname+0x4e>
   1822c:	18 82       	st	Y, r1
   1822e:	f8 01       	movw	r30, r16
   18230:	01 90       	ld	r0, Z+
   18232:	00 20       	and	r0, r0
   18234:	e9 f7       	brne	.-6      	; 0x18230 <lif_fixname+0x62>
   18236:	cf 01       	movw	r24, r30
   18238:	01 97       	sbiw	r24, 0x01	; 1
   1823a:	80 1b       	sub	r24, r16
   1823c:	91 0b       	sbc	r25, r17
   1823e:	cd b7       	in	r28, 0x3d	; 61
   18240:	de b7       	in	r29, 0x3e	; 62
   18242:	e9 e0       	ldi	r30, 0x09	; 9
   18244:	0c 94 f4 e2 	jmp	0x1c5e8	; 0x1c5e8 <__epilogue_restores__+0x12>

00018248 <lif_vol2str>:
   18248:	ef 92       	push	r14
   1824a:	ff 92       	push	r15
   1824c:	0f 93       	push	r16
   1824e:	1f 93       	push	r17
   18250:	cf 93       	push	r28
   18252:	df 93       	push	r29
   18254:	7c 01       	movw	r14, r24
   18256:	eb 01       	movw	r28, r22
   18258:	fc 01       	movw	r30, r24
   1825a:	04 a1       	ldd	r16, Z+36	; 0x24
   1825c:	15 a1       	ldd	r17, Z+37	; 0x25
   1825e:	20 e0       	ldi	r18, 0x00	; 0
   18260:	30 e0       	ldi	r19, 0x00	; 0
   18262:	42 e0       	ldi	r20, 0x02	; 2
   18264:	50 e0       	ldi	r21, 0x00	; 0
   18266:	60 e0       	ldi	r22, 0x00	; 0
   18268:	70 e0       	ldi	r23, 0x00	; 0
   1826a:	ce 01       	movw	r24, r28
   1826c:	e8 dc       	rcall	.-1584   	; 0x17c3e <V2B_MSB>
   1826e:	b7 01       	movw	r22, r14
   18270:	6a 5d       	subi	r22, 0xDA	; 218
   18272:	7f 4f       	sbci	r23, 0xFF	; 255
   18274:	46 e0       	ldi	r20, 0x06	; 6
   18276:	50 e0       	ldi	r21, 0x00	; 0
   18278:	ce 01       	movw	r24, r28
   1827a:	02 96       	adiw	r24, 0x02	; 2
   1827c:	8b df       	rcall	.-234    	; 0x18194 <lif_S2B>
   1827e:	f7 01       	movw	r30, r14
   18280:	05 a5       	ldd	r16, Z+45	; 0x2d
   18282:	16 a5       	ldd	r17, Z+46	; 0x2e
   18284:	27 a5       	ldd	r18, Z+47	; 0x2f
   18286:	30 a9       	ldd	r19, Z+48	; 0x30
   18288:	44 e0       	ldi	r20, 0x04	; 4
   1828a:	50 e0       	ldi	r21, 0x00	; 0
   1828c:	68 e0       	ldi	r22, 0x08	; 8
   1828e:	70 e0       	ldi	r23, 0x00	; 0
   18290:	ce 01       	movw	r24, r28
   18292:	d5 dc       	rcall	.-1622   	; 0x17c3e <V2B_MSB>
   18294:	f7 01       	movw	r30, r14
   18296:	01 a9       	ldd	r16, Z+49	; 0x31
   18298:	12 a9       	ldd	r17, Z+50	; 0x32
   1829a:	20 e0       	ldi	r18, 0x00	; 0
   1829c:	30 e0       	ldi	r19, 0x00	; 0
   1829e:	42 e0       	ldi	r20, 0x02	; 2
   182a0:	50 e0       	ldi	r21, 0x00	; 0
   182a2:	6c e0       	ldi	r22, 0x0C	; 12
   182a4:	70 e0       	ldi	r23, 0x00	; 0
   182a6:	ce 01       	movw	r24, r28
   182a8:	ca dc       	rcall	.-1644   	; 0x17c3e <V2B_MSB>
   182aa:	00 e0       	ldi	r16, 0x00	; 0
   182ac:	10 e0       	ldi	r17, 0x00	; 0
   182ae:	98 01       	movw	r18, r16
   182b0:	42 e0       	ldi	r20, 0x02	; 2
   182b2:	50 e0       	ldi	r21, 0x00	; 0
   182b4:	6e e0       	ldi	r22, 0x0E	; 14
   182b6:	70 e0       	ldi	r23, 0x00	; 0
   182b8:	ce 01       	movw	r24, r28
   182ba:	c1 dc       	rcall	.-1662   	; 0x17c3e <V2B_MSB>
   182bc:	f7 01       	movw	r30, r14
   182be:	05 a9       	ldd	r16, Z+53	; 0x35
   182c0:	16 a9       	ldd	r17, Z+54	; 0x36
   182c2:	27 a9       	ldd	r18, Z+55	; 0x37
   182c4:	30 ad       	ldd	r19, Z+56	; 0x38
   182c6:	44 e0       	ldi	r20, 0x04	; 4
   182c8:	50 e0       	ldi	r21, 0x00	; 0
   182ca:	60 e1       	ldi	r22, 0x10	; 16
   182cc:	70 e0       	ldi	r23, 0x00	; 0
   182ce:	ce 01       	movw	r24, r28
   182d0:	b6 dc       	rcall	.-1684   	; 0x17c3e <V2B_MSB>
   182d2:	f7 01       	movw	r30, r14
   182d4:	01 ad       	ldd	r16, Z+57	; 0x39
   182d6:	12 ad       	ldd	r17, Z+58	; 0x3a
   182d8:	20 e0       	ldi	r18, 0x00	; 0
   182da:	30 e0       	ldi	r19, 0x00	; 0
   182dc:	42 e0       	ldi	r20, 0x02	; 2
   182de:	50 e0       	ldi	r21, 0x00	; 0
   182e0:	64 e1       	ldi	r22, 0x14	; 20
   182e2:	70 e0       	ldi	r23, 0x00	; 0
   182e4:	ce 01       	movw	r24, r28
   182e6:	ab dc       	rcall	.-1706   	; 0x17c3e <V2B_MSB>
   182e8:	00 e0       	ldi	r16, 0x00	; 0
   182ea:	10 e0       	ldi	r17, 0x00	; 0
   182ec:	98 01       	movw	r18, r16
   182ee:	42 e0       	ldi	r20, 0x02	; 2
   182f0:	50 e0       	ldi	r21, 0x00	; 0
   182f2:	66 e1       	ldi	r22, 0x16	; 22
   182f4:	70 e0       	ldi	r23, 0x00	; 0
   182f6:	ce 01       	movw	r24, r28
   182f8:	a2 dc       	rcall	.-1724   	; 0x17c3e <V2B_MSB>
   182fa:	f7 01       	movw	r30, r14
   182fc:	fd 96       	adiw	r30, 0x3d	; 61
   182fe:	00 81       	ld	r16, Z
   18300:	11 81       	ldd	r17, Z+1	; 0x01
   18302:	22 81       	ldd	r18, Z+2	; 0x02
   18304:	33 81       	ldd	r19, Z+3	; 0x03
   18306:	44 e0       	ldi	r20, 0x04	; 4
   18308:	50 e0       	ldi	r21, 0x00	; 0
   1830a:	68 e1       	ldi	r22, 0x18	; 24
   1830c:	70 e0       	ldi	r23, 0x00	; 0
   1830e:	ce 01       	movw	r24, r28
   18310:	96 dc       	rcall	.-1748   	; 0x17c3e <V2B_MSB>
   18312:	f7 01       	movw	r30, r14
   18314:	ef 5b       	subi	r30, 0xBF	; 191
   18316:	ff 4f       	sbci	r31, 0xFF	; 255
   18318:	00 81       	ld	r16, Z
   1831a:	11 81       	ldd	r17, Z+1	; 0x01
   1831c:	22 81       	ldd	r18, Z+2	; 0x02
   1831e:	33 81       	ldd	r19, Z+3	; 0x03
   18320:	44 e0       	ldi	r20, 0x04	; 4
   18322:	50 e0       	ldi	r21, 0x00	; 0
   18324:	6c e1       	ldi	r22, 0x1C	; 28
   18326:	70 e0       	ldi	r23, 0x00	; 0
   18328:	ce 01       	movw	r24, r28
   1832a:	89 dc       	rcall	.-1774   	; 0x17c3e <V2B_MSB>
   1832c:	f7 01       	movw	r30, r14
   1832e:	eb 5b       	subi	r30, 0xBB	; 187
   18330:	ff 4f       	sbci	r31, 0xFF	; 255
   18332:	00 81       	ld	r16, Z
   18334:	11 81       	ldd	r17, Z+1	; 0x01
   18336:	22 81       	ldd	r18, Z+2	; 0x02
   18338:	33 81       	ldd	r19, Z+3	; 0x03
   1833a:	44 e0       	ldi	r20, 0x04	; 4
   1833c:	50 e0       	ldi	r21, 0x00	; 0
   1833e:	60 e2       	ldi	r22, 0x20	; 32
   18340:	70 e0       	ldi	r23, 0x00	; 0
   18342:	ce 01       	movw	r24, r28
   18344:	7c dc       	rcall	.-1800   	; 0x17c3e <V2B_MSB>
   18346:	de 01       	movw	r26, r28
   18348:	94 96       	adiw	r26, 0x24	; 36
   1834a:	f7 01       	movw	r30, r14
   1834c:	e7 5b       	subi	r30, 0xB7	; 183
   1834e:	ff 4f       	sbci	r31, 0xFF	; 255
   18350:	86 e0       	ldi	r24, 0x06	; 6
   18352:	01 90       	ld	r0, Z+
   18354:	0d 92       	st	X+, r0
   18356:	8a 95       	dec	r24
   18358:	e1 f7       	brne	.-8      	; 0x18352 <lif_vol2str+0x10a>
   1835a:	cd b7       	in	r28, 0x3d	; 61
   1835c:	de b7       	in	r29, 0x3e	; 62
   1835e:	e6 e0       	ldi	r30, 0x06	; 6
   18360:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

00018364 <lif_str2vol>:
   18364:	0f 93       	push	r16
   18366:	1f 93       	push	r17
   18368:	cf 93       	push	r28
   1836a:	df 93       	push	r29
   1836c:	8c 01       	movw	r16, r24
   1836e:	eb 01       	movw	r28, r22
   18370:	42 e0       	ldi	r20, 0x02	; 2
   18372:	50 e0       	ldi	r21, 0x00	; 0
   18374:	60 e0       	ldi	r22, 0x00	; 0
   18376:	70 e0       	ldi	r23, 0x00	; 0
   18378:	8b dc       	rcall	.-1770   	; 0x17c90 <B2V_MSB>
   1837a:	7d a3       	std	Y+37, r23	; 0x25
   1837c:	6c a3       	std	Y+36, r22	; 0x24
   1837e:	be 01       	movw	r22, r28
   18380:	6a 5d       	subi	r22, 0xDA	; 218
   18382:	7f 4f       	sbci	r23, 0xFF	; 255
   18384:	46 e0       	ldi	r20, 0x06	; 6
   18386:	50 e0       	ldi	r21, 0x00	; 0
   18388:	c8 01       	movw	r24, r16
   1838a:	02 96       	adiw	r24, 0x02	; 2
   1838c:	ac de       	rcall	.-680    	; 0x180e6 <lif_B2S>
   1838e:	44 e0       	ldi	r20, 0x04	; 4
   18390:	50 e0       	ldi	r21, 0x00	; 0
   18392:	68 e0       	ldi	r22, 0x08	; 8
   18394:	70 e0       	ldi	r23, 0x00	; 0
   18396:	c8 01       	movw	r24, r16
   18398:	7b dc       	rcall	.-1802   	; 0x17c90 <B2V_MSB>
   1839a:	6d a7       	std	Y+45, r22	; 0x2d
   1839c:	7e a7       	std	Y+46, r23	; 0x2e
   1839e:	8f a7       	std	Y+47, r24	; 0x2f
   183a0:	98 ab       	std	Y+48, r25	; 0x30
   183a2:	42 e0       	ldi	r20, 0x02	; 2
   183a4:	50 e0       	ldi	r21, 0x00	; 0
   183a6:	6c e0       	ldi	r22, 0x0C	; 12
   183a8:	70 e0       	ldi	r23, 0x00	; 0
   183aa:	c8 01       	movw	r24, r16
   183ac:	71 dc       	rcall	.-1822   	; 0x17c90 <B2V_MSB>
   183ae:	7a ab       	std	Y+50, r23	; 0x32
   183b0:	69 ab       	std	Y+49, r22	; 0x31
   183b2:	42 e0       	ldi	r20, 0x02	; 2
   183b4:	50 e0       	ldi	r21, 0x00	; 0
   183b6:	6e e0       	ldi	r22, 0x0E	; 14
   183b8:	70 e0       	ldi	r23, 0x00	; 0
   183ba:	c8 01       	movw	r24, r16
   183bc:	69 dc       	rcall	.-1838   	; 0x17c90 <B2V_MSB>
   183be:	7c ab       	std	Y+52, r23	; 0x34
   183c0:	6b ab       	std	Y+51, r22	; 0x33
   183c2:	44 e0       	ldi	r20, 0x04	; 4
   183c4:	50 e0       	ldi	r21, 0x00	; 0
   183c6:	60 e1       	ldi	r22, 0x10	; 16
   183c8:	70 e0       	ldi	r23, 0x00	; 0
   183ca:	c8 01       	movw	r24, r16
   183cc:	61 dc       	rcall	.-1854   	; 0x17c90 <B2V_MSB>
   183ce:	6d ab       	std	Y+53, r22	; 0x35
   183d0:	7e ab       	std	Y+54, r23	; 0x36
   183d2:	8f ab       	std	Y+55, r24	; 0x37
   183d4:	98 af       	std	Y+56, r25	; 0x38
   183d6:	42 e0       	ldi	r20, 0x02	; 2
   183d8:	50 e0       	ldi	r21, 0x00	; 0
   183da:	64 e1       	ldi	r22, 0x14	; 20
   183dc:	70 e0       	ldi	r23, 0x00	; 0
   183de:	c8 01       	movw	r24, r16
   183e0:	57 dc       	rcall	.-1874   	; 0x17c90 <B2V_MSB>
   183e2:	7a af       	std	Y+58, r23	; 0x3a
   183e4:	69 af       	std	Y+57, r22	; 0x39
   183e6:	42 e0       	ldi	r20, 0x02	; 2
   183e8:	50 e0       	ldi	r21, 0x00	; 0
   183ea:	66 e1       	ldi	r22, 0x16	; 22
   183ec:	70 e0       	ldi	r23, 0x00	; 0
   183ee:	c8 01       	movw	r24, r16
   183f0:	4f dc       	rcall	.-1890   	; 0x17c90 <B2V_MSB>
   183f2:	7c af       	std	Y+60, r23	; 0x3c
   183f4:	6b af       	std	Y+59, r22	; 0x3b
   183f6:	44 e0       	ldi	r20, 0x04	; 4
   183f8:	50 e0       	ldi	r21, 0x00	; 0
   183fa:	68 e1       	ldi	r22, 0x18	; 24
   183fc:	70 e0       	ldi	r23, 0x00	; 0
   183fe:	c8 01       	movw	r24, r16
   18400:	47 dc       	rcall	.-1906   	; 0x17c90 <B2V_MSB>
   18402:	fe 01       	movw	r30, r28
   18404:	fd 96       	adiw	r30, 0x3d	; 61
   18406:	60 83       	st	Z, r22
   18408:	71 83       	std	Z+1, r23	; 0x01
   1840a:	82 83       	std	Z+2, r24	; 0x02
   1840c:	93 83       	std	Z+3, r25	; 0x03
   1840e:	44 e0       	ldi	r20, 0x04	; 4
   18410:	50 e0       	ldi	r21, 0x00	; 0
   18412:	6c e1       	ldi	r22, 0x1C	; 28
   18414:	70 e0       	ldi	r23, 0x00	; 0
   18416:	c8 01       	movw	r24, r16
   18418:	3b dc       	rcall	.-1930   	; 0x17c90 <B2V_MSB>
   1841a:	fe 01       	movw	r30, r28
   1841c:	ef 5b       	subi	r30, 0xBF	; 191
   1841e:	ff 4f       	sbci	r31, 0xFF	; 255
   18420:	60 83       	st	Z, r22
   18422:	71 83       	std	Z+1, r23	; 0x01
   18424:	82 83       	std	Z+2, r24	; 0x02
   18426:	93 83       	std	Z+3, r25	; 0x03
   18428:	44 e0       	ldi	r20, 0x04	; 4
   1842a:	50 e0       	ldi	r21, 0x00	; 0
   1842c:	60 e2       	ldi	r22, 0x20	; 32
   1842e:	70 e0       	ldi	r23, 0x00	; 0
   18430:	c8 01       	movw	r24, r16
   18432:	2e dc       	rcall	.-1956   	; 0x17c90 <B2V_MSB>
   18434:	fe 01       	movw	r30, r28
   18436:	eb 5b       	subi	r30, 0xBB	; 187
   18438:	ff 4f       	sbci	r31, 0xFF	; 255
   1843a:	60 83       	st	Z, r22
   1843c:	71 83       	std	Z+1, r23	; 0x01
   1843e:	82 83       	std	Z+2, r24	; 0x02
   18440:	93 83       	std	Z+3, r25	; 0x03
   18442:	de 01       	movw	r26, r28
   18444:	a7 5b       	subi	r26, 0xB7	; 183
   18446:	bf 4f       	sbci	r27, 0xFF	; 255
   18448:	f8 01       	movw	r30, r16
   1844a:	b4 96       	adiw	r30, 0x24	; 36
   1844c:	86 e0       	ldi	r24, 0x06	; 6
   1844e:	01 90       	ld	r0, Z+
   18450:	0d 92       	st	X+, r0
   18452:	8a 95       	dec	r24
   18454:	e1 f7       	brne	.-8      	; 0x1844e <lif_str2vol+0xea>
   18456:	df 91       	pop	r29
   18458:	cf 91       	pop	r28
   1845a:	1f 91       	pop	r17
   1845c:	0f 91       	pop	r16
   1845e:	08 95       	ret

00018460 <lif_dir2str>:
   18460:	ef 92       	push	r14
   18462:	ff 92       	push	r15
   18464:	0f 93       	push	r16
   18466:	1f 93       	push	r17
   18468:	cf 93       	push	r28
   1846a:	df 93       	push	r29
   1846c:	ec 01       	movw	r28, r24
   1846e:	7b 01       	movw	r14, r22
   18470:	bc 01       	movw	r22, r24
   18472:	61 5b       	subi	r22, 0xB1	; 177
   18474:	7f 4f       	sbci	r23, 0xFF	; 255
   18476:	4a e0       	ldi	r20, 0x0A	; 10
   18478:	50 e0       	ldi	r21, 0x00	; 0
   1847a:	c7 01       	movw	r24, r14
   1847c:	8b de       	rcall	.-746    	; 0x18194 <lif_S2B>
   1847e:	fe 01       	movw	r30, r28
   18480:	e6 5a       	subi	r30, 0xA6	; 166
   18482:	ff 4f       	sbci	r31, 0xFF	; 255
   18484:	00 81       	ld	r16, Z
   18486:	11 81       	ldd	r17, Z+1	; 0x01
   18488:	20 e0       	ldi	r18, 0x00	; 0
   1848a:	30 e0       	ldi	r19, 0x00	; 0
   1848c:	42 e0       	ldi	r20, 0x02	; 2
   1848e:	50 e0       	ldi	r21, 0x00	; 0
   18490:	6a e0       	ldi	r22, 0x0A	; 10
   18492:	70 e0       	ldi	r23, 0x00	; 0
   18494:	c7 01       	movw	r24, r14
   18496:	d3 db       	rcall	.-2138   	; 0x17c3e <V2B_MSB>
   18498:	fe 01       	movw	r30, r28
   1849a:	e4 5a       	subi	r30, 0xA4	; 164
   1849c:	ff 4f       	sbci	r31, 0xFF	; 255
   1849e:	00 81       	ld	r16, Z
   184a0:	11 81       	ldd	r17, Z+1	; 0x01
   184a2:	22 81       	ldd	r18, Z+2	; 0x02
   184a4:	33 81       	ldd	r19, Z+3	; 0x03
   184a6:	44 e0       	ldi	r20, 0x04	; 4
   184a8:	50 e0       	ldi	r21, 0x00	; 0
   184aa:	6c e0       	ldi	r22, 0x0C	; 12
   184ac:	70 e0       	ldi	r23, 0x00	; 0
   184ae:	c7 01       	movw	r24, r14
   184b0:	c6 db       	rcall	.-2164   	; 0x17c3e <V2B_MSB>
   184b2:	fe 01       	movw	r30, r28
   184b4:	e0 5a       	subi	r30, 0xA0	; 160
   184b6:	ff 4f       	sbci	r31, 0xFF	; 255
   184b8:	00 81       	ld	r16, Z
   184ba:	11 81       	ldd	r17, Z+1	; 0x01
   184bc:	22 81       	ldd	r18, Z+2	; 0x02
   184be:	33 81       	ldd	r19, Z+3	; 0x03
   184c0:	44 e0       	ldi	r20, 0x04	; 4
   184c2:	50 e0       	ldi	r21, 0x00	; 0
   184c4:	60 e1       	ldi	r22, 0x10	; 16
   184c6:	70 e0       	ldi	r23, 0x00	; 0
   184c8:	c7 01       	movw	r24, r14
   184ca:	b9 db       	rcall	.-2190   	; 0x17c3e <V2B_MSB>
   184cc:	d7 01       	movw	r26, r14
   184ce:	54 96       	adiw	r26, 0x14	; 20
   184d0:	fe 01       	movw	r30, r28
   184d2:	ec 59       	subi	r30, 0x9C	; 156
   184d4:	ff 4f       	sbci	r31, 0xFF	; 255
   184d6:	86 e0       	ldi	r24, 0x06	; 6
   184d8:	01 90       	ld	r0, Z+
   184da:	0d 92       	st	X+, r0
   184dc:	8a 95       	dec	r24
   184de:	e1 f7       	brne	.-8      	; 0x184d8 <lif_dir2str+0x78>
   184e0:	fe 01       	movw	r30, r28
   184e2:	e6 59       	subi	r30, 0x96	; 150
   184e4:	ff 4f       	sbci	r31, 0xFF	; 255
   184e6:	00 81       	ld	r16, Z
   184e8:	11 81       	ldd	r17, Z+1	; 0x01
   184ea:	20 e0       	ldi	r18, 0x00	; 0
   184ec:	30 e0       	ldi	r19, 0x00	; 0
   184ee:	42 e0       	ldi	r20, 0x02	; 2
   184f0:	50 e0       	ldi	r21, 0x00	; 0
   184f2:	6a e1       	ldi	r22, 0x1A	; 26
   184f4:	70 e0       	ldi	r23, 0x00	; 0
   184f6:	c7 01       	movw	r24, r14
   184f8:	a2 db       	rcall	.-2236   	; 0x17c3e <V2B_MSB>
   184fa:	fe 01       	movw	r30, r28
   184fc:	e4 59       	subi	r30, 0x94	; 148
   184fe:	ff 4f       	sbci	r31, 0xFF	; 255
   18500:	00 81       	ld	r16, Z
   18502:	11 81       	ldd	r17, Z+1	; 0x01
   18504:	20 e0       	ldi	r18, 0x00	; 0
   18506:	30 e0       	ldi	r19, 0x00	; 0
   18508:	42 e0       	ldi	r20, 0x02	; 2
   1850a:	50 e0       	ldi	r21, 0x00	; 0
   1850c:	6c e1       	ldi	r22, 0x1C	; 28
   1850e:	70 e0       	ldi	r23, 0x00	; 0
   18510:	c7 01       	movw	r24, r14
   18512:	a9 db       	rcall	.-2222   	; 0x17c66 <V2B_LSB>
   18514:	c2 59       	subi	r28, 0x92	; 146
   18516:	df 4f       	sbci	r29, 0xFF	; 255
   18518:	08 81       	ld	r16, Y
   1851a:	19 81       	ldd	r17, Y+1	; 0x01
   1851c:	20 e0       	ldi	r18, 0x00	; 0
   1851e:	30 e0       	ldi	r19, 0x00	; 0
   18520:	42 e0       	ldi	r20, 0x02	; 2
   18522:	50 e0       	ldi	r21, 0x00	; 0
   18524:	6e e1       	ldi	r22, 0x1E	; 30
   18526:	70 e0       	ldi	r23, 0x00	; 0
   18528:	c7 01       	movw	r24, r14
   1852a:	9d db       	rcall	.-2246   	; 0x17c66 <V2B_LSB>
   1852c:	cd b7       	in	r28, 0x3d	; 61
   1852e:	de b7       	in	r29, 0x3e	; 62
   18530:	e6 e0       	ldi	r30, 0x06	; 6
   18532:	0c 94 f7 e2 	jmp	0x1c5ee	; 0x1c5ee <__epilogue_restores__+0x18>

00018536 <lif_str2dir>:
   18536:	0f 93       	push	r16
   18538:	1f 93       	push	r17
   1853a:	cf 93       	push	r28
   1853c:	df 93       	push	r29
   1853e:	8c 01       	movw	r16, r24
   18540:	eb 01       	movw	r28, r22
   18542:	61 5b       	subi	r22, 0xB1	; 177
   18544:	7f 4f       	sbci	r23, 0xFF	; 255
   18546:	4a e0       	ldi	r20, 0x0A	; 10
   18548:	50 e0       	ldi	r21, 0x00	; 0
   1854a:	cd dd       	rcall	.-1126   	; 0x180e6 <lif_B2S>
   1854c:	42 e0       	ldi	r20, 0x02	; 2
   1854e:	50 e0       	ldi	r21, 0x00	; 0
   18550:	6a e0       	ldi	r22, 0x0A	; 10
   18552:	70 e0       	ldi	r23, 0x00	; 0
   18554:	c8 01       	movw	r24, r16
   18556:	9c db       	rcall	.-2248   	; 0x17c90 <B2V_MSB>
   18558:	fe 01       	movw	r30, r28
   1855a:	e6 5a       	subi	r30, 0xA6	; 166
   1855c:	ff 4f       	sbci	r31, 0xFF	; 255
   1855e:	71 83       	std	Z+1, r23	; 0x01
   18560:	60 83       	st	Z, r22
   18562:	44 e0       	ldi	r20, 0x04	; 4
   18564:	50 e0       	ldi	r21, 0x00	; 0
   18566:	6c e0       	ldi	r22, 0x0C	; 12
   18568:	70 e0       	ldi	r23, 0x00	; 0
   1856a:	c8 01       	movw	r24, r16
   1856c:	91 db       	rcall	.-2270   	; 0x17c90 <B2V_MSB>
   1856e:	fe 01       	movw	r30, r28
   18570:	e4 5a       	subi	r30, 0xA4	; 164
   18572:	ff 4f       	sbci	r31, 0xFF	; 255
   18574:	60 83       	st	Z, r22
   18576:	71 83       	std	Z+1, r23	; 0x01
   18578:	82 83       	std	Z+2, r24	; 0x02
   1857a:	93 83       	std	Z+3, r25	; 0x03
   1857c:	44 e0       	ldi	r20, 0x04	; 4
   1857e:	50 e0       	ldi	r21, 0x00	; 0
   18580:	60 e1       	ldi	r22, 0x10	; 16
   18582:	70 e0       	ldi	r23, 0x00	; 0
   18584:	c8 01       	movw	r24, r16
   18586:	84 db       	rcall	.-2296   	; 0x17c90 <B2V_MSB>
   18588:	fe 01       	movw	r30, r28
   1858a:	e0 5a       	subi	r30, 0xA0	; 160
   1858c:	ff 4f       	sbci	r31, 0xFF	; 255
   1858e:	60 83       	st	Z, r22
   18590:	71 83       	std	Z+1, r23	; 0x01
   18592:	82 83       	std	Z+2, r24	; 0x02
   18594:	93 83       	std	Z+3, r25	; 0x03
   18596:	de 01       	movw	r26, r28
   18598:	ac 59       	subi	r26, 0x9C	; 156
   1859a:	bf 4f       	sbci	r27, 0xFF	; 255
   1859c:	f8 01       	movw	r30, r16
   1859e:	74 96       	adiw	r30, 0x14	; 20
   185a0:	86 e0       	ldi	r24, 0x06	; 6
   185a2:	01 90       	ld	r0, Z+
   185a4:	0d 92       	st	X+, r0
   185a6:	8a 95       	dec	r24
   185a8:	e1 f7       	brne	.-8      	; 0x185a2 <lif_str2dir+0x6c>
   185aa:	42 e0       	ldi	r20, 0x02	; 2
   185ac:	50 e0       	ldi	r21, 0x00	; 0
   185ae:	6a e1       	ldi	r22, 0x1A	; 26
   185b0:	70 e0       	ldi	r23, 0x00	; 0
   185b2:	c8 01       	movw	r24, r16
   185b4:	6d db       	rcall	.-2342   	; 0x17c90 <B2V_MSB>
   185b6:	fe 01       	movw	r30, r28
   185b8:	e6 59       	subi	r30, 0x96	; 150
   185ba:	ff 4f       	sbci	r31, 0xFF	; 255
   185bc:	71 83       	std	Z+1, r23	; 0x01
   185be:	60 83       	st	Z, r22
   185c0:	42 e0       	ldi	r20, 0x02	; 2
   185c2:	50 e0       	ldi	r21, 0x00	; 0
   185c4:	6c e1       	ldi	r22, 0x1C	; 28
   185c6:	70 e0       	ldi	r23, 0x00	; 0
   185c8:	c8 01       	movw	r24, r16
   185ca:	81 db       	rcall	.-2302   	; 0x17cce <B2V_LSB>
   185cc:	fe 01       	movw	r30, r28
   185ce:	e4 59       	subi	r30, 0x94	; 148
   185d0:	ff 4f       	sbci	r31, 0xFF	; 255
   185d2:	71 83       	std	Z+1, r23	; 0x01
   185d4:	60 83       	st	Z, r22
   185d6:	42 e0       	ldi	r20, 0x02	; 2
   185d8:	50 e0       	ldi	r21, 0x00	; 0
   185da:	6e e1       	ldi	r22, 0x1E	; 30
   185dc:	70 e0       	ldi	r23, 0x00	; 0
   185de:	c8 01       	movw	r24, r16
   185e0:	76 db       	rcall	.-2324   	; 0x17cce <B2V_LSB>
   185e2:	c2 59       	subi	r28, 0x92	; 146
   185e4:	df 4f       	sbci	r29, 0xFF	; 255
   185e6:	79 83       	std	Y+1, r23	; 0x01
   185e8:	68 83       	st	Y, r22
   185ea:	df 91       	pop	r29
   185ec:	cf 91       	pop	r28
   185ee:	1f 91       	pop	r17
   185f0:	0f 91       	pop	r16
   185f2:	08 95       	ret

000185f4 <lif_BIN2BCD>:
   185f4:	6a e0       	ldi	r22, 0x0A	; 10
   185f6:	0e 94 2f e2 	call	0x1c45e	; 0x1c45e <__udivmodqi4>
   185fa:	82 95       	swap	r24
   185fc:	80 7f       	andi	r24, 0xF0	; 240
   185fe:	89 2b       	or	r24, r25
   18600:	08 95       	ret

00018602 <lif_BCD2BIN>:
   18602:	28 2f       	mov	r18, r24
   18604:	22 95       	swap	r18
   18606:	2f 70       	andi	r18, 0x0F	; 15
   18608:	8f 70       	andi	r24, 0x0F	; 15
   1860a:	90 e0       	ldi	r25, 0x00	; 0
   1860c:	3a e0       	ldi	r19, 0x0A	; 10
   1860e:	23 9f       	mul	r18, r19
   18610:	80 0d       	add	r24, r0
   18612:	91 1d       	adc	r25, r1
   18614:	11 24       	eor	r1, r1
   18616:	08 95       	ret

00018618 <lif_time2lifbcd>:
   18618:	aa e1       	ldi	r26, 0x1A	; 26
   1861a:	b0 e0       	ldi	r27, 0x00	; 0
   1861c:	e2 e1       	ldi	r30, 0x12	; 18
   1861e:	f3 ec       	ldi	r31, 0xC3	; 195
   18620:	0c 94 dd e2 	jmp	0x1c5ba	; 0x1c5ba <__prologue_saves__+0x1c>
   18624:	8b 01       	movw	r16, r22
   18626:	9c 01       	movw	r18, r24
   18628:	6f 8b       	std	Y+23, r22	; 0x17
   1862a:	78 8f       	std	Y+24, r23	; 0x18
   1862c:	89 8f       	std	Y+25, r24	; 0x19
   1862e:	9a 8f       	std	Y+26, r25	; 0x1a
   18630:	67 2b       	or	r22, r23
   18632:	68 2b       	or	r22, r24
   18634:	69 2b       	or	r22, r25
   18636:	41 f4       	brne	.+16     	; 0x18648 <lif_time2lifbcd+0x30>
   18638:	fa 01       	movw	r30, r20
   1863a:	ca 01       	movw	r24, r20
   1863c:	06 96       	adiw	r24, 0x06	; 6
   1863e:	11 92       	st	Z+, r1
   18640:	e8 17       	cp	r30, r24
   18642:	f9 07       	cpc	r31, r25
   18644:	e1 f7       	brne	.-8      	; 0x1863e <lif_time2lifbcd+0x26>
   18646:	26 c0       	rjmp	.+76     	; 0x18694 <lif_time2lifbcd+0x7c>
   18648:	8a 01       	movw	r16, r20
   1864a:	be 01       	movw	r22, r28
   1864c:	6f 5f       	subi	r22, 0xFF	; 255
   1864e:	7f 4f       	sbci	r23, 0xFF	; 255
   18650:	ce 01       	movw	r24, r28
   18652:	47 96       	adiw	r24, 0x17	; 23
   18654:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <gmtime_r>
   18658:	8b 85       	ldd	r24, Y+11	; 0x0b
   1865a:	9c 85       	ldd	r25, Y+12	; 0x0c
   1865c:	64 e6       	ldi	r22, 0x64	; 100
   1865e:	70 e0       	ldi	r23, 0x00	; 0
   18660:	0e 94 4f e2 	call	0x1c49e	; 0x1c49e <__divmodhi4>
   18664:	c7 df       	rcall	.-114    	; 0x185f4 <lif_BIN2BCD>
   18666:	f8 01       	movw	r30, r16
   18668:	80 83       	st	Z, r24
   1866a:	89 85       	ldd	r24, Y+9	; 0x09
   1866c:	8f 5f       	subi	r24, 0xFF	; 255
   1866e:	c2 df       	rcall	.-124    	; 0x185f4 <lif_BIN2BCD>
   18670:	f8 01       	movw	r30, r16
   18672:	81 83       	std	Z+1, r24	; 0x01
   18674:	8f 81       	ldd	r24, Y+7	; 0x07
   18676:	be df       	rcall	.-132    	; 0x185f4 <lif_BIN2BCD>
   18678:	f8 01       	movw	r30, r16
   1867a:	82 83       	std	Z+2, r24	; 0x02
   1867c:	8d 81       	ldd	r24, Y+5	; 0x05
   1867e:	ba df       	rcall	.-140    	; 0x185f4 <lif_BIN2BCD>
   18680:	f8 01       	movw	r30, r16
   18682:	83 83       	std	Z+3, r24	; 0x03
   18684:	8b 81       	ldd	r24, Y+3	; 0x03
   18686:	b6 df       	rcall	.-148    	; 0x185f4 <lif_BIN2BCD>
   18688:	f8 01       	movw	r30, r16
   1868a:	84 83       	std	Z+4, r24	; 0x04
   1868c:	89 81       	ldd	r24, Y+1	; 0x01
   1868e:	b2 df       	rcall	.-156    	; 0x185f4 <lif_BIN2BCD>
   18690:	f8 01       	movw	r30, r16
   18692:	85 83       	std	Z+5, r24	; 0x05
   18694:	6a 96       	adiw	r28, 0x1a	; 26
   18696:	e4 e0       	ldi	r30, 0x04	; 4
   18698:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

0001869c <lif_lifbcd2time>:
   1869c:	a6 e1       	ldi	r26, 0x16	; 22
   1869e:	b0 e0       	ldi	r27, 0x00	; 0
   186a0:	e4 e5       	ldi	r30, 0x54	; 84
   186a2:	f3 ec       	ldi	r31, 0xC3	; 195
   186a4:	0c 94 d7 e2 	jmp	0x1c5ae	; 0x1c5ae <__prologue_saves__+0x10>
   186a8:	8c 01       	movw	r16, r24
   186aa:	7c 01       	movw	r14, r24
   186ac:	5c 01       	movw	r10, r24
   186ae:	26 e0       	ldi	r18, 0x06	; 6
   186b0:	a2 0e       	add	r10, r18
   186b2:	b1 1c       	adc	r11, r1
   186b4:	cc 24       	eor	r12, r12
   186b6:	c3 94       	inc	r12
   186b8:	d1 2c       	mov	r13, r1
   186ba:	f7 01       	movw	r30, r14
   186bc:	81 91       	ld	r24, Z+
   186be:	7f 01       	movw	r14, r30
   186c0:	a0 df       	rcall	.-192    	; 0x18602 <lif_BCD2BIN>
   186c2:	89 2b       	or	r24, r25
   186c4:	11 f0       	breq	.+4      	; 0x186ca <lif_lifbcd2time+0x2e>
   186c6:	c1 2c       	mov	r12, r1
   186c8:	d1 2c       	mov	r13, r1
   186ca:	ea 14       	cp	r14, r10
   186cc:	fb 04       	cpc	r15, r11
   186ce:	a9 f7       	brne	.-22     	; 0x186ba <lif_lifbcd2time+0x1e>
   186d0:	c1 14       	cp	r12, r1
   186d2:	d1 04       	cpc	r13, r1
   186d4:	61 f5       	brne	.+88     	; 0x1872e <lif_lifbcd2time+0x92>
   186d6:	f8 01       	movw	r30, r16
   186d8:	80 81       	ld	r24, Z
   186da:	93 df       	rcall	.-218    	; 0x18602 <lif_BCD2BIN>
   186dc:	7c 01       	movw	r14, r24
   186de:	f8 01       	movw	r30, r16
   186e0:	81 81       	ldd	r24, Z+1	; 0x01
   186e2:	8f df       	rcall	.-226    	; 0x18602 <lif_BCD2BIN>
   186e4:	01 97       	sbiw	r24, 0x01	; 1
   186e6:	f6 e4       	ldi	r31, 0x46	; 70
   186e8:	ef 16       	cp	r14, r31
   186ea:	f1 04       	cpc	r15, r1
   186ec:	1c f4       	brge	.+6      	; 0x186f4 <lif_lifbcd2time+0x58>
   186ee:	24 e6       	ldi	r18, 0x64	; 100
   186f0:	e2 0e       	add	r14, r18
   186f2:	f1 1c       	adc	r15, r1
   186f4:	fc 86       	std	Y+12, r15	; 0x0c
   186f6:	eb 86       	std	Y+11, r14	; 0x0b
   186f8:	9a 87       	std	Y+10, r25	; 0x0a
   186fa:	89 87       	std	Y+9, r24	; 0x09
   186fc:	f8 01       	movw	r30, r16
   186fe:	82 81       	ldd	r24, Z+2	; 0x02
   18700:	80 df       	rcall	.-256    	; 0x18602 <lif_BCD2BIN>
   18702:	98 87       	std	Y+8, r25	; 0x08
   18704:	8f 83       	std	Y+7, r24	; 0x07
   18706:	f8 01       	movw	r30, r16
   18708:	83 81       	ldd	r24, Z+3	; 0x03
   1870a:	7b df       	rcall	.-266    	; 0x18602 <lif_BCD2BIN>
   1870c:	9e 83       	std	Y+6, r25	; 0x06
   1870e:	8d 83       	std	Y+5, r24	; 0x05
   18710:	f8 01       	movw	r30, r16
   18712:	84 81       	ldd	r24, Z+4	; 0x04
   18714:	76 df       	rcall	.-276    	; 0x18602 <lif_BCD2BIN>
   18716:	9c 83       	std	Y+4, r25	; 0x04
   18718:	8b 83       	std	Y+3, r24	; 0x03
   1871a:	f8 01       	movw	r30, r16
   1871c:	85 81       	ldd	r24, Z+5	; 0x05
   1871e:	71 df       	rcall	.-286    	; 0x18602 <lif_BCD2BIN>
   18720:	9a 83       	std	Y+2, r25	; 0x02
   18722:	89 83       	std	Y+1, r24	; 0x01
   18724:	ce 01       	movw	r24, r28
   18726:	01 96       	adiw	r24, 0x01	; 1
   18728:	0e 94 9f 3a 	call	0x753e	; 0x753e <timegm>
   1872c:	03 c0       	rjmp	.+6      	; 0x18734 <lif_lifbcd2time+0x98>
   1872e:	60 e0       	ldi	r22, 0x00	; 0
   18730:	70 e0       	ldi	r23, 0x00	; 0
   18732:	cb 01       	movw	r24, r22
   18734:	66 96       	adiw	r28, 0x16	; 22
   18736:	ea e0       	ldi	r30, 0x0A	; 10
   18738:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__epilogue_restores__+0x10>

0001873c <lif_ctime_gmt>:
   1873c:	a6 e1       	ldi	r26, 0x16	; 22
   1873e:	b0 e0       	ldi	r27, 0x00	; 0
   18740:	e4 ea       	ldi	r30, 0xA4	; 164
   18742:	f3 ec       	ldi	r31, 0xC3	; 195
   18744:	0c 94 dd e2 	jmp	0x1c5ba	; 0x1c5ba <__prologue_saves__+0x1c>
   18748:	20 e2       	ldi	r18, 0x20	; 32
   1874a:	e8 ec       	ldi	r30, 0xC8	; 200
   1874c:	f9 e1       	ldi	r31, 0x19	; 25
   1874e:	df 01       	movw	r26, r30
   18750:	1d 92       	st	X+, r1
   18752:	2a 95       	dec	r18
   18754:	e9 f7       	brne	.-6      	; 0x18750 <lif_ctime_gmt+0x14>
   18756:	be 01       	movw	r22, r28
   18758:	6f 5f       	subi	r22, 0xFF	; 255
   1875a:	7f 4f       	sbci	r23, 0xFF	; 255
   1875c:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <gmtime_r>
   18760:	68 ec       	ldi	r22, 0xC8	; 200
   18762:	79 e1       	ldi	r23, 0x19	; 25
   18764:	0e 94 fb 3c 	call	0x79f6	; 0x79f6 <asctime_r>
   18768:	8c 01       	movw	r16, r24
   1876a:	0e 94 57 32 	call	0x64ae	; 0x64ae <trim_tail>
   1876e:	c8 01       	movw	r24, r16
   18770:	66 96       	adiw	r28, 0x16	; 22
   18772:	e4 e0       	ldi	r30, 0x04	; 4
   18774:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

00018778 <lif_lifbcd2timestr>:
   18778:	a4 e0       	ldi	r26, 0x04	; 4
   1877a:	b0 e0       	ldi	r27, 0x00	; 0
   1877c:	e2 ec       	ldi	r30, 0xC2	; 194
   1877e:	f3 ec       	ldi	r31, 0xC3	; 195
   18780:	0c 94 df e2 	jmp	0x1c5be	; 0x1c5be <__prologue_saves__+0x20>
   18784:	20 e2       	ldi	r18, 0x20	; 32
   18786:	e8 ea       	ldi	r30, 0xA8	; 168
   18788:	f9 e1       	ldi	r31, 0x19	; 25
   1878a:	df 01       	movw	r26, r30
   1878c:	1d 92       	st	X+, r1
   1878e:	2a 95       	dec	r18
   18790:	e9 f7       	brne	.-6      	; 0x1878c <lif_lifbcd2timestr+0x14>
   18792:	84 df       	rcall	.-248    	; 0x1869c <lif_lifbcd2time>
   18794:	69 83       	std	Y+1, r22	; 0x01
   18796:	7a 83       	std	Y+2, r23	; 0x02
   18798:	8b 83       	std	Y+3, r24	; 0x03
   1879a:	9c 83       	std	Y+4, r25	; 0x04
   1879c:	67 2b       	or	r22, r23
   1879e:	68 2b       	or	r22, r24
   187a0:	69 2b       	or	r22, r25
   187a2:	29 f0       	breq	.+10     	; 0x187ae <lif_lifbcd2timestr+0x36>
   187a4:	ce 01       	movw	r24, r28
   187a6:	01 96       	adiw	r24, 0x01	; 1
   187a8:	c9 df       	rcall	.-110    	; 0x1873c <lif_ctime_gmt>
   187aa:	bc 01       	movw	r22, r24
   187ac:	02 c0       	rjmp	.+4      	; 0x187b2 <lif_lifbcd2timestr+0x3a>
   187ae:	64 e0       	ldi	r22, 0x04	; 4
   187b0:	76 e1       	ldi	r23, 0x16	; 22
   187b2:	88 ea       	ldi	r24, 0xA8	; 168
   187b4:	99 e1       	ldi	r25, 0x19	; 25
   187b6:	0e 94 79 31 	call	0x62f2	; 0x62f2 <strcpy>
   187ba:	88 ea       	ldi	r24, 0xA8	; 168
   187bc:	99 e1       	ldi	r25, 0x19	; 25
   187be:	24 96       	adiw	r28, 0x04	; 4
   187c0:	e2 e0       	ldi	r30, 0x02	; 2
   187c2:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

000187c6 <lif_image_clear>:
   187c6:	20 e7       	ldi	r18, 0x70	; 112
   187c8:	fc 01       	movw	r30, r24
   187ca:	11 92       	st	Z+, r1
   187cc:	2a 95       	dec	r18
   187ce:	e9 f7       	brne	.-6      	; 0x187ca <lif_image_clear+0x4>
   187d0:	08 95       	ret

000187d2 <lif_dir_clear>:
   187d2:	81 5b       	subi	r24, 0xB1	; 177
   187d4:	9f 4f       	sbci	r25, 0xFF	; 255
   187d6:	21 e2       	ldi	r18, 0x21	; 33
   187d8:	fc 01       	movw	r30, r24
   187da:	11 92       	st	Z+, r1
   187dc:	2a 95       	dec	r18
   187de:	e9 f7       	brne	.-6      	; 0x187da <lif_dir_clear+0x8>
   187e0:	08 95       	ret

000187e2 <lif_vol_clear>:
   187e2:	84 96       	adiw	r24, 0x24	; 36
   187e4:	2b e2       	ldi	r18, 0x2B	; 43
   187e6:	fc 01       	movw	r30, r24
   187e8:	11 92       	st	Z+, r1
   187ea:	2a 95       	dec	r18
   187ec:	e9 f7       	brne	.-6      	; 0x187e8 <lif_vol_clear+0x6>
   187ee:	08 95       	ret

000187f0 <lif_dump_vol>:
   187f0:	cf 93       	push	r28
   187f2:	df 93       	push	r29
   187f4:	ad b7       	in	r26, 0x3d	; 61
   187f6:	be b7       	in	r27, 0x3e	; 62
   187f8:	17 97       	sbiw	r26, 0x07	; 7
   187fa:	0f b6       	in	r0, 0x3f	; 63
   187fc:	f8 94       	cli
   187fe:	be bf       	out	0x3e, r27	; 62
   18800:	0f be       	out	0x3f, r0	; 63
   18802:	ad bf       	out	0x3d, r26	; 61
   18804:	ec 01       	movw	r28, r24
   18806:	ed b7       	in	r30, 0x3d	; 61
   18808:	fe b7       	in	r31, 0x3e	; 62
   1880a:	75 83       	std	Z+5, r23	; 0x05
   1880c:	64 83       	std	Z+4, r22	; 0x04
   1880e:	86 e5       	ldi	r24, 0x56	; 86
   18810:	9f e3       	ldi	r25, 0x3F	; 63
   18812:	a0 e0       	ldi	r26, 0x00	; 0
   18814:	81 83       	std	Z+1, r24	; 0x01
   18816:	92 83       	std	Z+2, r25	; 0x02
   18818:	a3 83       	std	Z+3, r26	; 0x03
   1881a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1881e:	88 81       	ld	r24, Y
   18820:	99 81       	ldd	r25, Y+1	; 0x01
   18822:	ed b7       	in	r30, 0x3d	; 61
   18824:	fe b7       	in	r31, 0x3e	; 62
   18826:	95 83       	std	Z+5, r25	; 0x05
   18828:	84 83       	std	Z+4, r24	; 0x04
   1882a:	8c e3       	ldi	r24, 0x3C	; 60
   1882c:	9f e3       	ldi	r25, 0x3F	; 63
   1882e:	a0 e0       	ldi	r26, 0x00	; 0
   18830:	81 83       	std	Z+1, r24	; 0x01
   18832:	92 83       	std	Z+2, r25	; 0x02
   18834:	a3 83       	std	Z+3, r26	; 0x03
   18836:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1883a:	8c 81       	ldd	r24, Y+4	; 0x04
   1883c:	9d 81       	ldd	r25, Y+5	; 0x05
   1883e:	ae 81       	ldd	r26, Y+6	; 0x06
   18840:	bf 81       	ldd	r27, Y+7	; 0x07
   18842:	ed b7       	in	r30, 0x3d	; 61
   18844:	fe b7       	in	r31, 0x3e	; 62
   18846:	84 83       	std	Z+4, r24	; 0x04
   18848:	95 83       	std	Z+5, r25	; 0x05
   1884a:	a6 83       	std	Z+6, r26	; 0x06
   1884c:	b7 83       	std	Z+7, r27	; 0x07
   1884e:	8f e1       	ldi	r24, 0x1F	; 31
   18850:	9f e3       	ldi	r25, 0x3F	; 63
   18852:	a0 e0       	ldi	r26, 0x00	; 0
   18854:	81 83       	std	Z+1, r24	; 0x01
   18856:	92 83       	std	Z+2, r25	; 0x02
   18858:	a3 83       	std	Z+3, r26	; 0x03
   1885a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1885e:	88 85       	ldd	r24, Y+8	; 0x08
   18860:	99 85       	ldd	r25, Y+9	; 0x09
   18862:	aa 85       	ldd	r26, Y+10	; 0x0a
   18864:	bb 85       	ldd	r27, Y+11	; 0x0b
   18866:	ed b7       	in	r30, 0x3d	; 61
   18868:	fe b7       	in	r31, 0x3e	; 62
   1886a:	84 83       	std	Z+4, r24	; 0x04
   1886c:	95 83       	std	Z+5, r25	; 0x05
   1886e:	a6 83       	std	Z+6, r26	; 0x06
   18870:	b7 83       	std	Z+7, r27	; 0x07
   18872:	82 e0       	ldi	r24, 0x02	; 2
   18874:	9f e3       	ldi	r25, 0x3F	; 63
   18876:	a0 e0       	ldi	r26, 0x00	; 0
   18878:	81 83       	std	Z+1, r24	; 0x01
   1887a:	92 83       	std	Z+2, r25	; 0x02
   1887c:	a3 83       	std	Z+3, r26	; 0x03
   1887e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18882:	8c 85       	ldd	r24, Y+12	; 0x0c
   18884:	9d 85       	ldd	r25, Y+13	; 0x0d
   18886:	ae 85       	ldd	r26, Y+14	; 0x0e
   18888:	bf 85       	ldd	r27, Y+15	; 0x0f
   1888a:	ed b7       	in	r30, 0x3d	; 61
   1888c:	fe b7       	in	r31, 0x3e	; 62
   1888e:	84 83       	std	Z+4, r24	; 0x04
   18890:	95 83       	std	Z+5, r25	; 0x05
   18892:	a6 83       	std	Z+6, r26	; 0x06
   18894:	b7 83       	std	Z+7, r27	; 0x07
   18896:	85 ee       	ldi	r24, 0xE5	; 229
   18898:	9e e3       	ldi	r25, 0x3E	; 62
   1889a:	a0 e0       	ldi	r26, 0x00	; 0
   1889c:	81 83       	std	Z+1, r24	; 0x01
   1889e:	92 83       	std	Z+2, r25	; 0x02
   188a0:	a3 83       	std	Z+3, r26	; 0x03
   188a2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   188a6:	88 89       	ldd	r24, Y+16	; 0x10
   188a8:	99 89       	ldd	r25, Y+17	; 0x11
   188aa:	aa 89       	ldd	r26, Y+18	; 0x12
   188ac:	bb 89       	ldd	r27, Y+19	; 0x13
   188ae:	ed b7       	in	r30, 0x3d	; 61
   188b0:	fe b7       	in	r31, 0x3e	; 62
   188b2:	84 83       	std	Z+4, r24	; 0x04
   188b4:	95 83       	std	Z+5, r25	; 0x05
   188b6:	a6 83       	std	Z+6, r26	; 0x06
   188b8:	b7 83       	std	Z+7, r27	; 0x07
   188ba:	88 ec       	ldi	r24, 0xC8	; 200
   188bc:	9e e3       	ldi	r25, 0x3E	; 62
   188be:	a0 e0       	ldi	r26, 0x00	; 0
   188c0:	81 83       	std	Z+1, r24	; 0x01
   188c2:	92 83       	std	Z+2, r25	; 0x02
   188c4:	a3 83       	std	Z+3, r26	; 0x03
   188c6:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   188ca:	8c 89       	ldd	r24, Y+20	; 0x14
   188cc:	9d 89       	ldd	r25, Y+21	; 0x15
   188ce:	ae 89       	ldd	r26, Y+22	; 0x16
   188d0:	bf 89       	ldd	r27, Y+23	; 0x17
   188d2:	ed b7       	in	r30, 0x3d	; 61
   188d4:	fe b7       	in	r31, 0x3e	; 62
   188d6:	84 83       	std	Z+4, r24	; 0x04
   188d8:	95 83       	std	Z+5, r25	; 0x05
   188da:	a6 83       	std	Z+6, r26	; 0x06
   188dc:	b7 83       	std	Z+7, r27	; 0x07
   188de:	8b ea       	ldi	r24, 0xAB	; 171
   188e0:	9e e3       	ldi	r25, 0x3E	; 62
   188e2:	a0 e0       	ldi	r26, 0x00	; 0
   188e4:	81 83       	std	Z+1, r24	; 0x01
   188e6:	92 83       	std	Z+2, r25	; 0x02
   188e8:	a3 83       	std	Z+3, r26	; 0x03
   188ea:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   188ee:	88 8d       	ldd	r24, Y+24	; 0x18
   188f0:	99 8d       	ldd	r25, Y+25	; 0x19
   188f2:	aa 8d       	ldd	r26, Y+26	; 0x1a
   188f4:	bb 8d       	ldd	r27, Y+27	; 0x1b
   188f6:	ed b7       	in	r30, 0x3d	; 61
   188f8:	fe b7       	in	r31, 0x3e	; 62
   188fa:	84 83       	std	Z+4, r24	; 0x04
   188fc:	95 83       	std	Z+5, r25	; 0x05
   188fe:	a6 83       	std	Z+6, r26	; 0x06
   18900:	b7 83       	std	Z+7, r27	; 0x07
   18902:	8e e8       	ldi	r24, 0x8E	; 142
   18904:	9e e3       	ldi	r25, 0x3E	; 62
   18906:	a0 e0       	ldi	r26, 0x00	; 0
   18908:	81 83       	std	Z+1, r24	; 0x01
   1890a:	92 83       	std	Z+2, r25	; 0x02
   1890c:	a3 83       	std	Z+3, r26	; 0x03
   1890e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18912:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18914:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18916:	09 2e       	mov	r0, r25
   18918:	00 0c       	add	r0, r0
   1891a:	aa 0b       	sbc	r26, r26
   1891c:	bb 0b       	sbc	r27, r27
   1891e:	ed b7       	in	r30, 0x3d	; 61
   18920:	fe b7       	in	r31, 0x3e	; 62
   18922:	84 83       	std	Z+4, r24	; 0x04
   18924:	95 83       	std	Z+5, r25	; 0x05
   18926:	a6 83       	std	Z+6, r26	; 0x06
   18928:	b7 83       	std	Z+7, r27	; 0x07
   1892a:	81 e7       	ldi	r24, 0x71	; 113
   1892c:	9e e3       	ldi	r25, 0x3E	; 62
   1892e:	a0 e0       	ldi	r26, 0x00	; 0
   18930:	81 83       	std	Z+1, r24	; 0x01
   18932:	92 83       	std	Z+2, r25	; 0x02
   18934:	a3 83       	std	Z+3, r26	; 0x03
   18936:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1893a:	8e 8d       	ldd	r24, Y+30	; 0x1e
   1893c:	9f 8d       	ldd	r25, Y+31	; 0x1f
   1893e:	09 2e       	mov	r0, r25
   18940:	00 0c       	add	r0, r0
   18942:	aa 0b       	sbc	r26, r26
   18944:	bb 0b       	sbc	r27, r27
   18946:	ed b7       	in	r30, 0x3d	; 61
   18948:	fe b7       	in	r31, 0x3e	; 62
   1894a:	84 83       	std	Z+4, r24	; 0x04
   1894c:	95 83       	std	Z+5, r25	; 0x05
   1894e:	a6 83       	std	Z+6, r26	; 0x06
   18950:	b7 83       	std	Z+7, r27	; 0x07
   18952:	84 e5       	ldi	r24, 0x54	; 84
   18954:	9e e3       	ldi	r25, 0x3E	; 62
   18956:	a0 e0       	ldi	r26, 0x00	; 0
   18958:	81 83       	std	Z+1, r24	; 0x01
   1895a:	92 83       	std	Z+2, r25	; 0x02
   1895c:	a3 83       	std	Z+3, r26	; 0x03
   1895e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18962:	ce 01       	movw	r24, r28
   18964:	86 96       	adiw	r24, 0x26	; 38
   18966:	ed b7       	in	r30, 0x3d	; 61
   18968:	fe b7       	in	r31, 0x3e	; 62
   1896a:	95 83       	std	Z+5, r25	; 0x05
   1896c:	84 83       	std	Z+4, r24	; 0x04
   1896e:	8a e3       	ldi	r24, 0x3A	; 58
   18970:	9e e3       	ldi	r25, 0x3E	; 62
   18972:	a0 e0       	ldi	r26, 0x00	; 0
   18974:	81 83       	std	Z+1, r24	; 0x01
   18976:	92 83       	std	Z+2, r25	; 0x02
   18978:	a3 83       	std	Z+3, r26	; 0x03
   1897a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1897e:	8c a1       	ldd	r24, Y+36	; 0x24
   18980:	9d a1       	ldd	r25, Y+37	; 0x25
   18982:	ed b7       	in	r30, 0x3d	; 61
   18984:	fe b7       	in	r31, 0x3e	; 62
   18986:	95 83       	std	Z+5, r25	; 0x05
   18988:	84 83       	std	Z+4, r24	; 0x04
   1898a:	8e e1       	ldi	r24, 0x1E	; 30
   1898c:	9e e3       	ldi	r25, 0x3E	; 62
   1898e:	a0 e0       	ldi	r26, 0x00	; 0
   18990:	81 83       	std	Z+1, r24	; 0x01
   18992:	92 83       	std	Z+2, r25	; 0x02
   18994:	a3 83       	std	Z+3, r26	; 0x03
   18996:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1899a:	8d a5       	ldd	r24, Y+45	; 0x2d
   1899c:	9e a5       	ldd	r25, Y+46	; 0x2e
   1899e:	af a5       	ldd	r26, Y+47	; 0x2f
   189a0:	b8 a9       	ldd	r27, Y+48	; 0x30
   189a2:	ed b7       	in	r30, 0x3d	; 61
   189a4:	fe b7       	in	r31, 0x3e	; 62
   189a6:	84 83       	std	Z+4, r24	; 0x04
   189a8:	95 83       	std	Z+5, r25	; 0x05
   189aa:	a6 83       	std	Z+6, r26	; 0x06
   189ac:	b7 83       	std	Z+7, r27	; 0x07
   189ae:	81 e0       	ldi	r24, 0x01	; 1
   189b0:	9e e3       	ldi	r25, 0x3E	; 62
   189b2:	a0 e0       	ldi	r26, 0x00	; 0
   189b4:	81 83       	std	Z+1, r24	; 0x01
   189b6:	92 83       	std	Z+2, r25	; 0x02
   189b8:	a3 83       	std	Z+3, r26	; 0x03
   189ba:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   189be:	8d a9       	ldd	r24, Y+53	; 0x35
   189c0:	9e a9       	ldd	r25, Y+54	; 0x36
   189c2:	af a9       	ldd	r26, Y+55	; 0x37
   189c4:	b8 ad       	ldd	r27, Y+56	; 0x38
   189c6:	ed b7       	in	r30, 0x3d	; 61
   189c8:	fe b7       	in	r31, 0x3e	; 62
   189ca:	84 83       	std	Z+4, r24	; 0x04
   189cc:	95 83       	std	Z+5, r25	; 0x05
   189ce:	a6 83       	std	Z+6, r26	; 0x06
   189d0:	b7 83       	std	Z+7, r27	; 0x07
   189d2:	84 ee       	ldi	r24, 0xE4	; 228
   189d4:	9d e3       	ldi	r25, 0x3D	; 61
   189d6:	a0 e0       	ldi	r26, 0x00	; 0
   189d8:	81 83       	std	Z+1, r24	; 0x01
   189da:	92 83       	std	Z+2, r25	; 0x02
   189dc:	a3 83       	std	Z+3, r26	; 0x03
   189de:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   189e2:	89 a9       	ldd	r24, Y+49	; 0x31
   189e4:	9a a9       	ldd	r25, Y+50	; 0x32
   189e6:	ed b7       	in	r30, 0x3d	; 61
   189e8:	fe b7       	in	r31, 0x3e	; 62
   189ea:	95 83       	std	Z+5, r25	; 0x05
   189ec:	84 83       	std	Z+4, r24	; 0x04
   189ee:	88 ec       	ldi	r24, 0xC8	; 200
   189f0:	9d e3       	ldi	r25, 0x3D	; 61
   189f2:	a0 e0       	ldi	r26, 0x00	; 0
   189f4:	81 83       	std	Z+1, r24	; 0x01
   189f6:	92 83       	std	Z+2, r25	; 0x02
   189f8:	a3 83       	std	Z+3, r26	; 0x03
   189fa:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   189fe:	89 ad       	ldd	r24, Y+57	; 0x39
   18a00:	9a ad       	ldd	r25, Y+58	; 0x3a
   18a02:	ed b7       	in	r30, 0x3d	; 61
   18a04:	fe b7       	in	r31, 0x3e	; 62
   18a06:	95 83       	std	Z+5, r25	; 0x05
   18a08:	84 83       	std	Z+4, r24	; 0x04
   18a0a:	8c ea       	ldi	r24, 0xAC	; 172
   18a0c:	9d e3       	ldi	r25, 0x3D	; 61
   18a0e:	a0 e0       	ldi	r26, 0x00	; 0
   18a10:	81 83       	std	Z+1, r24	; 0x01
   18a12:	92 83       	std	Z+2, r25	; 0x02
   18a14:	a3 83       	std	Z+3, r26	; 0x03
   18a16:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18a1a:	ce 01       	movw	r24, r28
   18a1c:	87 5b       	subi	r24, 0xB7	; 183
   18a1e:	9f 4f       	sbci	r25, 0xFF	; 255
   18a20:	ab de       	rcall	.-682    	; 0x18778 <lif_lifbcd2timestr>
   18a22:	ed b7       	in	r30, 0x3d	; 61
   18a24:	fe b7       	in	r31, 0x3e	; 62
   18a26:	95 83       	std	Z+5, r25	; 0x05
   18a28:	84 83       	std	Z+4, r24	; 0x04
   18a2a:	82 e9       	ldi	r24, 0x92	; 146
   18a2c:	9d e3       	ldi	r25, 0x3D	; 61
   18a2e:	a0 e0       	ldi	r26, 0x00	; 0
   18a30:	81 83       	std	Z+1, r24	; 0x01
   18a32:	92 83       	std	Z+2, r25	; 0x02
   18a34:	a3 83       	std	Z+3, r26	; 0x03
   18a36:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18a3a:	ce 01       	movw	r24, r28
   18a3c:	81 5b       	subi	r24, 0xB1	; 177
   18a3e:	9f 4f       	sbci	r25, 0xFF	; 255
   18a40:	ed b7       	in	r30, 0x3d	; 61
   18a42:	fe b7       	in	r31, 0x3e	; 62
   18a44:	95 83       	std	Z+5, r25	; 0x05
   18a46:	84 83       	std	Z+4, r24	; 0x04
   18a48:	88 e7       	ldi	r24, 0x78	; 120
   18a4a:	9d e3       	ldi	r25, 0x3D	; 61
   18a4c:	a0 e0       	ldi	r26, 0x00	; 0
   18a4e:	81 83       	std	Z+1, r24	; 0x01
   18a50:	92 83       	std	Z+2, r25	; 0x02
   18a52:	a3 83       	std	Z+3, r26	; 0x03
   18a54:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18a58:	fe 01       	movw	r30, r28
   18a5a:	e6 5a       	subi	r30, 0xA6	; 166
   18a5c:	ff 4f       	sbci	r31, 0xFF	; 255
   18a5e:	80 81       	ld	r24, Z
   18a60:	91 81       	ldd	r25, Z+1	; 0x01
   18a62:	ed b7       	in	r30, 0x3d	; 61
   18a64:	fe b7       	in	r31, 0x3e	; 62
   18a66:	95 83       	std	Z+5, r25	; 0x05
   18a68:	84 83       	std	Z+4, r24	; 0x04
   18a6a:	8c e5       	ldi	r24, 0x5C	; 92
   18a6c:	9d e3       	ldi	r25, 0x3D	; 61
   18a6e:	a0 e0       	ldi	r26, 0x00	; 0
   18a70:	81 83       	std	Z+1, r24	; 0x01
   18a72:	92 83       	std	Z+2, r25	; 0x02
   18a74:	a3 83       	std	Z+3, r26	; 0x03
   18a76:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18a7a:	fe 01       	movw	r30, r28
   18a7c:	e6 59       	subi	r30, 0x96	; 150
   18a7e:	ff 4f       	sbci	r31, 0xFF	; 255
   18a80:	80 81       	ld	r24, Z
   18a82:	91 81       	ldd	r25, Z+1	; 0x01
   18a84:	ed b7       	in	r30, 0x3d	; 61
   18a86:	fe b7       	in	r31, 0x3e	; 62
   18a88:	95 83       	std	Z+5, r25	; 0x05
   18a8a:	84 83       	std	Z+4, r24	; 0x04
   18a8c:	80 e4       	ldi	r24, 0x40	; 64
   18a8e:	9d e3       	ldi	r25, 0x3D	; 61
   18a90:	a0 e0       	ldi	r26, 0x00	; 0
   18a92:	81 83       	std	Z+1, r24	; 0x01
   18a94:	92 83       	std	Z+2, r25	; 0x02
   18a96:	a3 83       	std	Z+3, r26	; 0x03
   18a98:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18a9c:	fe 01       	movw	r30, r28
   18a9e:	e4 5a       	subi	r30, 0xA4	; 164
   18aa0:	ff 4f       	sbci	r31, 0xFF	; 255
   18aa2:	80 81       	ld	r24, Z
   18aa4:	91 81       	ldd	r25, Z+1	; 0x01
   18aa6:	a2 81       	ldd	r26, Z+2	; 0x02
   18aa8:	b3 81       	ldd	r27, Z+3	; 0x03
   18aaa:	ed b7       	in	r30, 0x3d	; 61
   18aac:	fe b7       	in	r31, 0x3e	; 62
   18aae:	84 83       	std	Z+4, r24	; 0x04
   18ab0:	95 83       	std	Z+5, r25	; 0x05
   18ab2:	a6 83       	std	Z+6, r26	; 0x06
   18ab4:	b7 83       	std	Z+7, r27	; 0x07
   18ab6:	83 e2       	ldi	r24, 0x23	; 35
   18ab8:	9d e3       	ldi	r25, 0x3D	; 61
   18aba:	a0 e0       	ldi	r26, 0x00	; 0
   18abc:	81 83       	std	Z+1, r24	; 0x01
   18abe:	92 83       	std	Z+2, r25	; 0x02
   18ac0:	a3 83       	std	Z+3, r26	; 0x03
   18ac2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18ac6:	fe 01       	movw	r30, r28
   18ac8:	e0 5a       	subi	r30, 0xA0	; 160
   18aca:	ff 4f       	sbci	r31, 0xFF	; 255
   18acc:	80 81       	ld	r24, Z
   18ace:	91 81       	ldd	r25, Z+1	; 0x01
   18ad0:	a2 81       	ldd	r26, Z+2	; 0x02
   18ad2:	b3 81       	ldd	r27, Z+3	; 0x03
   18ad4:	ed b7       	in	r30, 0x3d	; 61
   18ad6:	fe b7       	in	r31, 0x3e	; 62
   18ad8:	84 83       	std	Z+4, r24	; 0x04
   18ada:	95 83       	std	Z+5, r25	; 0x05
   18adc:	a6 83       	std	Z+6, r26	; 0x06
   18ade:	b7 83       	std	Z+7, r27	; 0x07
   18ae0:	86 e0       	ldi	r24, 0x06	; 6
   18ae2:	9d e3       	ldi	r25, 0x3D	; 61
   18ae4:	a0 e0       	ldi	r26, 0x00	; 0
   18ae6:	81 83       	std	Z+1, r24	; 0x01
   18ae8:	92 83       	std	Z+2, r25	; 0x02
   18aea:	a3 83       	std	Z+3, r26	; 0x03
   18aec:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18af0:	fe 01       	movw	r30, r28
   18af2:	e4 59       	subi	r30, 0x94	; 148
   18af4:	ff 4f       	sbci	r31, 0xFF	; 255
   18af6:	80 81       	ld	r24, Z
   18af8:	91 81       	ldd	r25, Z+1	; 0x01
   18afa:	a0 e0       	ldi	r26, 0x00	; 0
   18afc:	b0 e0       	ldi	r27, 0x00	; 0
   18afe:	ed b7       	in	r30, 0x3d	; 61
   18b00:	fe b7       	in	r31, 0x3e	; 62
   18b02:	84 83       	std	Z+4, r24	; 0x04
   18b04:	95 83       	std	Z+5, r25	; 0x05
   18b06:	a6 83       	std	Z+6, r26	; 0x06
   18b08:	b7 83       	std	Z+7, r27	; 0x07
   18b0a:	89 ee       	ldi	r24, 0xE9	; 233
   18b0c:	9c e3       	ldi	r25, 0x3C	; 60
   18b0e:	a0 e0       	ldi	r26, 0x00	; 0
   18b10:	81 83       	std	Z+1, r24	; 0x01
   18b12:	92 83       	std	Z+2, r25	; 0x02
   18b14:	a3 83       	std	Z+3, r26	; 0x03
   18b16:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18b1a:	fe 01       	movw	r30, r28
   18b1c:	e2 59       	subi	r30, 0x92	; 146
   18b1e:	ff 4f       	sbci	r31, 0xFF	; 255
   18b20:	80 81       	ld	r24, Z
   18b22:	91 81       	ldd	r25, Z+1	; 0x01
   18b24:	ed b7       	in	r30, 0x3d	; 61
   18b26:	fe b7       	in	r31, 0x3e	; 62
   18b28:	95 83       	std	Z+5, r25	; 0x05
   18b2a:	84 83       	std	Z+4, r24	; 0x04
   18b2c:	8d ec       	ldi	r24, 0xCD	; 205
   18b2e:	9c e3       	ldi	r25, 0x3C	; 60
   18b30:	a0 e0       	ldi	r26, 0x00	; 0
   18b32:	81 83       	std	Z+1, r24	; 0x01
   18b34:	92 83       	std	Z+2, r25	; 0x02
   18b36:	a3 83       	std	Z+3, r26	; 0x03
   18b38:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18b3c:	ce 01       	movw	r24, r28
   18b3e:	8c 59       	subi	r24, 0x9C	; 156
   18b40:	9f 4f       	sbci	r25, 0xFF	; 255
   18b42:	1a de       	rcall	.-972    	; 0x18778 <lif_lifbcd2timestr>
   18b44:	ed b7       	in	r30, 0x3d	; 61
   18b46:	fe b7       	in	r31, 0x3e	; 62
   18b48:	95 83       	std	Z+5, r25	; 0x05
   18b4a:	84 83       	std	Z+4, r24	; 0x04
   18b4c:	83 eb       	ldi	r24, 0xB3	; 179
   18b4e:	9c e3       	ldi	r25, 0x3C	; 60
   18b50:	a0 e0       	ldi	r26, 0x00	; 0
   18b52:	81 83       	std	Z+1, r24	; 0x01
   18b54:	92 83       	std	Z+2, r25	; 0x02
   18b56:	a3 83       	std	Z+3, r26	; 0x03
   18b58:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18b5c:	81 eb       	ldi	r24, 0xB1	; 177
   18b5e:	9c e3       	ldi	r25, 0x3C	; 60
   18b60:	a0 e0       	ldi	r26, 0x00	; 0
   18b62:	ed b7       	in	r30, 0x3d	; 61
   18b64:	fe b7       	in	r31, 0x3e	; 62
   18b66:	81 83       	std	Z+1, r24	; 0x01
   18b68:	92 83       	std	Z+2, r25	; 0x02
   18b6a:	a3 83       	std	Z+3, r26	; 0x03
   18b6c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18b70:	cd b7       	in	r28, 0x3d	; 61
   18b72:	de b7       	in	r29, 0x3e	; 62
   18b74:	27 96       	adiw	r28, 0x07	; 7
   18b76:	e2 e0       	ldi	r30, 0x02	; 2
   18b78:	0c 94 fb e2 	jmp	0x1c5f6	; 0x1c5f6 <__epilogue_restores__+0x20>

00018b7c <lif_check_volume>:
   18b7c:	0f 93       	push	r16
   18b7e:	1f 93       	push	r17
   18b80:	cf 93       	push	r28
   18b82:	df 93       	push	r29
   18b84:	ad b7       	in	r26, 0x3d	; 61
   18b86:	be b7       	in	r27, 0x3e	; 62
   18b88:	17 97       	sbiw	r26, 0x07	; 7
   18b8a:	0f b6       	in	r0, 0x3f	; 63
   18b8c:	f8 94       	cli
   18b8e:	be bf       	out	0x3e, r27	; 62
   18b90:	0f be       	out	0x3f, r0	; 63
   18b92:	ad bf       	out	0x3d, r26	; 61
   18b94:	ec 01       	movw	r28, r24
   18b96:	86 96       	adiw	r24, 0x26	; 38
   18b98:	e0 da       	rcall	.-2624   	; 0x1815a <lif_checkname>
   18b9a:	89 2b       	or	r24, r25
   18b9c:	79 f4       	brne	.+30     	; 0x18bbc <lif_check_volume+0x40>
   18b9e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18ba2:	81 ff       	sbrs	r24, 1
   18ba4:	0e c0       	rjmp	.+28     	; 0x18bc2 <lif_check_volume+0x46>
   18ba6:	82 e9       	ldi	r24, 0x92	; 146
   18ba8:	9c e3       	ldi	r25, 0x3C	; 60
   18baa:	a0 e0       	ldi	r26, 0x00	; 0
   18bac:	ed b7       	in	r30, 0x3d	; 61
   18bae:	fe b7       	in	r31, 0x3e	; 62
   18bb0:	81 83       	std	Z+1, r24	; 0x01
   18bb2:	92 83       	std	Z+2, r25	; 0x02
   18bb4:	a3 83       	std	Z+3, r26	; 0x03
   18bb6:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18bba:	03 c0       	rjmp	.+6      	; 0x18bc2 <lif_check_volume+0x46>
   18bbc:	81 e0       	ldi	r24, 0x01	; 1
   18bbe:	90 e0       	ldi	r25, 0x00	; 0
   18bc0:	02 c0       	rjmp	.+4      	; 0x18bc6 <lif_check_volume+0x4a>
   18bc2:	80 e0       	ldi	r24, 0x00	; 0
   18bc4:	90 e0       	ldi	r25, 0x00	; 0
   18bc6:	29 a9       	ldd	r18, Y+49	; 0x31
   18bc8:	3a a9       	ldd	r19, Y+50	; 0x32
   18bca:	21 15       	cp	r18, r1
   18bcc:	f0 e1       	ldi	r31, 0x10	; 16
   18bce:	3f 07       	cpc	r19, r31
   18bd0:	91 f0       	breq	.+36     	; 0x18bf6 <lif_check_volume+0x7a>
   18bd2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18bd6:	81 ff       	sbrs	r24, 1
   18bd8:	0c c0       	rjmp	.+24     	; 0x18bf2 <lif_check_volume+0x76>
   18bda:	ed b7       	in	r30, 0x3d	; 61
   18bdc:	fe b7       	in	r31, 0x3e	; 62
   18bde:	35 83       	std	Z+5, r19	; 0x05
   18be0:	24 83       	std	Z+4, r18	; 0x04
   18be2:	89 e5       	ldi	r24, 0x59	; 89
   18be4:	9c e3       	ldi	r25, 0x3C	; 60
   18be6:	a0 e0       	ldi	r26, 0x00	; 0
   18be8:	81 83       	std	Z+1, r24	; 0x01
   18bea:	92 83       	std	Z+2, r25	; 0x02
   18bec:	a3 83       	std	Z+3, r26	; 0x03
   18bee:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18bf2:	80 e0       	ldi	r24, 0x00	; 0
   18bf4:	90 e0       	ldi	r25, 0x00	; 0
   18bf6:	29 ad       	ldd	r18, Y+57	; 0x39
   18bf8:	3a ad       	ldd	r19, Y+58	; 0x3a
   18bfa:	22 30       	cpi	r18, 0x02	; 2
   18bfc:	31 05       	cpc	r19, r1
   18bfe:	90 f0       	brcs	.+36     	; 0x18c24 <lif_check_volume+0xa8>
   18c00:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18c04:	81 ff       	sbrs	r24, 1
   18c06:	0c c0       	rjmp	.+24     	; 0x18c20 <lif_check_volume+0xa4>
   18c08:	ed b7       	in	r30, 0x3d	; 61
   18c0a:	fe b7       	in	r31, 0x3e	; 62
   18c0c:	35 83       	std	Z+5, r19	; 0x05
   18c0e:	24 83       	std	Z+4, r18	; 0x04
   18c10:	81 e4       	ldi	r24, 0x41	; 65
   18c12:	9c e3       	ldi	r25, 0x3C	; 60
   18c14:	a0 e0       	ldi	r26, 0x00	; 0
   18c16:	81 83       	std	Z+1, r24	; 0x01
   18c18:	92 83       	std	Z+2, r25	; 0x02
   18c1a:	a3 83       	std	Z+3, r26	; 0x03
   18c1c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18c20:	80 e0       	ldi	r24, 0x00	; 0
   18c22:	90 e0       	ldi	r25, 0x00	; 0
   18c24:	2b a9       	ldd	r18, Y+51	; 0x33
   18c26:	3c a9       	ldd	r19, Y+52	; 0x34
   18c28:	23 2b       	or	r18, r19
   18c2a:	81 f0       	breq	.+32     	; 0x18c4c <lif_check_volume+0xd0>
   18c2c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18c30:	81 ff       	sbrs	r24, 1
   18c32:	0a c0       	rjmp	.+20     	; 0x18c48 <lif_check_volume+0xcc>
   18c34:	88 e0       	ldi	r24, 0x08	; 8
   18c36:	9c e3       	ldi	r25, 0x3C	; 60
   18c38:	a0 e0       	ldi	r26, 0x00	; 0
   18c3a:	ed b7       	in	r30, 0x3d	; 61
   18c3c:	fe b7       	in	r31, 0x3e	; 62
   18c3e:	81 83       	std	Z+1, r24	; 0x01
   18c40:	92 83       	std	Z+2, r25	; 0x02
   18c42:	a3 83       	std	Z+3, r26	; 0x03
   18c44:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18c48:	80 e0       	ldi	r24, 0x00	; 0
   18c4a:	90 e0       	ldi	r25, 0x00	; 0
   18c4c:	2b ad       	ldd	r18, Y+59	; 0x3b
   18c4e:	3c ad       	ldd	r19, Y+60	; 0x3c
   18c50:	23 2b       	or	r18, r19
   18c52:	81 f0       	breq	.+32     	; 0x18c74 <lif_check_volume+0xf8>
   18c54:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18c58:	81 ff       	sbrs	r24, 1
   18c5a:	0a c0       	rjmp	.+20     	; 0x18c70 <lif_check_volume+0xf4>
   18c5c:	8f ec       	ldi	r24, 0xCF	; 207
   18c5e:	9b e3       	ldi	r25, 0x3B	; 59
   18c60:	a0 e0       	ldi	r26, 0x00	; 0
   18c62:	ed b7       	in	r30, 0x3d	; 61
   18c64:	fe b7       	in	r31, 0x3e	; 62
   18c66:	81 83       	std	Z+1, r24	; 0x01
   18c68:	92 83       	std	Z+2, r25	; 0x02
   18c6a:	a3 83       	std	Z+3, r26	; 0x03
   18c6c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18c70:	80 e0       	ldi	r24, 0x00	; 0
   18c72:	90 e0       	ldi	r25, 0x00	; 0
   18c74:	4d a5       	ldd	r20, Y+45	; 0x2d
   18c76:	5e a5       	ldd	r21, Y+46	; 0x2e
   18c78:	6f a5       	ldd	r22, Y+47	; 0x2f
   18c7a:	78 a9       	ldd	r23, Y+48	; 0x30
   18c7c:	45 2b       	or	r20, r21
   18c7e:	46 2b       	or	r20, r22
   18c80:	47 2b       	or	r20, r23
   18c82:	a1 f4       	brne	.+40     	; 0x18cac <lif_check_volume+0x130>
   18c84:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18c88:	81 ff       	sbrs	r24, 1
   18c8a:	0e c0       	rjmp	.+28     	; 0x18ca8 <lif_check_volume+0x12c>
   18c8c:	ed b7       	in	r30, 0x3d	; 61
   18c8e:	fe b7       	in	r31, 0x3e	; 62
   18c90:	14 82       	std	Z+4, r1	; 0x04
   18c92:	15 82       	std	Z+5, r1	; 0x05
   18c94:	16 82       	std	Z+6, r1	; 0x06
   18c96:	17 82       	std	Z+7, r1	; 0x07
   18c98:	8a ea       	ldi	r24, 0xAA	; 170
   18c9a:	9b e3       	ldi	r25, 0x3B	; 59
   18c9c:	a0 e0       	ldi	r26, 0x00	; 0
   18c9e:	81 83       	std	Z+1, r24	; 0x01
   18ca0:	92 83       	std	Z+2, r25	; 0x02
   18ca2:	a3 83       	std	Z+3, r26	; 0x03
   18ca4:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18ca8:	80 e0       	ldi	r24, 0x00	; 0
   18caa:	90 e0       	ldi	r25, 0x00	; 0
   18cac:	4d a9       	ldd	r20, Y+53	; 0x35
   18cae:	5e a9       	ldd	r21, Y+54	; 0x36
   18cb0:	6f a9       	ldd	r22, Y+55	; 0x37
   18cb2:	78 ad       	ldd	r23, Y+56	; 0x38
   18cb4:	45 2b       	or	r20, r21
   18cb6:	46 2b       	or	r20, r22
   18cb8:	47 2b       	or	r20, r23
   18cba:	81 f4       	brne	.+32     	; 0x18cdc <lif_check_volume+0x160>
   18cbc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18cc0:	81 ff       	sbrs	r24, 1
   18cc2:	0a c0       	rjmp	.+20     	; 0x18cd8 <lif_check_volume+0x15c>
   18cc4:	8b e7       	ldi	r24, 0x7B	; 123
   18cc6:	9b e3       	ldi	r25, 0x3B	; 59
   18cc8:	a0 e0       	ldi	r26, 0x00	; 0
   18cca:	ed b7       	in	r30, 0x3d	; 61
   18ccc:	fe b7       	in	r31, 0x3e	; 62
   18cce:	81 83       	std	Z+1, r24	; 0x01
   18cd0:	92 83       	std	Z+2, r25	; 0x02
   18cd2:	a3 83       	std	Z+3, r26	; 0x03
   18cd4:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18cd8:	80 e0       	ldi	r24, 0x00	; 0
   18cda:	90 e0       	ldi	r25, 0x00	; 0
   18cdc:	0d a5       	ldd	r16, Y+45	; 0x2d
   18cde:	1e a5       	ldd	r17, Y+46	; 0x2e
   18ce0:	2f a5       	ldd	r18, Y+47	; 0x2f
   18ce2:	38 a9       	ldd	r19, Y+48	; 0x30
   18ce4:	4d a9       	ldd	r20, Y+53	; 0x35
   18ce6:	5e a9       	ldd	r21, Y+54	; 0x36
   18ce8:	6f a9       	ldd	r22, Y+55	; 0x37
   18cea:	78 ad       	ldd	r23, Y+56	; 0x38
   18cec:	40 0f       	add	r20, r16
   18cee:	51 1f       	adc	r21, r17
   18cf0:	62 1f       	adc	r22, r18
   18cf2:	73 1f       	adc	r23, r19
   18cf4:	0c 81       	ldd	r16, Y+4	; 0x04
   18cf6:	1d 81       	ldd	r17, Y+5	; 0x05
   18cf8:	2e 81       	ldd	r18, Y+6	; 0x06
   18cfa:	3f 81       	ldd	r19, Y+7	; 0x07
   18cfc:	04 17       	cp	r16, r20
   18cfe:	15 07       	cpc	r17, r21
   18d00:	26 07       	cpc	r18, r22
   18d02:	37 07       	cpc	r19, r23
   18d04:	80 f4       	brcc	.+32     	; 0x18d26 <lif_check_volume+0x1aa>
   18d06:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18d0a:	81 ff       	sbrs	r24, 1
   18d0c:	0a c0       	rjmp	.+20     	; 0x18d22 <lif_check_volume+0x1a6>
   18d0e:	8f e4       	ldi	r24, 0x4F	; 79
   18d10:	9b e3       	ldi	r25, 0x3B	; 59
   18d12:	a0 e0       	ldi	r26, 0x00	; 0
   18d14:	ed b7       	in	r30, 0x3d	; 61
   18d16:	fe b7       	in	r31, 0x3e	; 62
   18d18:	81 83       	std	Z+1, r24	; 0x01
   18d1a:	92 83       	std	Z+2, r25	; 0x02
   18d1c:	a3 83       	std	Z+3, r26	; 0x03
   18d1e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18d22:	80 e0       	ldi	r24, 0x00	; 0
   18d24:	90 e0       	ldi	r25, 0x00	; 0
   18d26:	cd b7       	in	r28, 0x3d	; 61
   18d28:	de b7       	in	r29, 0x3e	; 62
   18d2a:	27 96       	adiw	r28, 0x07	; 7
   18d2c:	e4 e0       	ldi	r30, 0x04	; 4
   18d2e:	0c 94 f9 e2 	jmp	0x1c5f2	; 0x1c5f2 <__epilogue_restores__+0x1c>

00018d32 <lif_check_dir>:
   18d32:	a5 e1       	ldi	r26, 0x15	; 21
   18d34:	b0 e0       	ldi	r27, 0x00	; 0
   18d36:	ef e9       	ldi	r30, 0x9F	; 159
   18d38:	f6 ec       	ldi	r31, 0xC6	; 198
   18d3a:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
   18d3e:	6c 01       	movw	r12, r24
   18d40:	2a e5       	ldi	r18, 0x5A	; 90
   18d42:	c2 0e       	add	r12, r18
   18d44:	d1 1c       	adc	r13, r1
   18d46:	f6 01       	movw	r30, r12
   18d48:	20 81       	ld	r18, Z
   18d4a:	31 81       	ldd	r19, Z+1	; 0x01
   18d4c:	21 50       	subi	r18, 0x01	; 1
   18d4e:	31 09       	sbc	r19, r1
   18d50:	2e 3f       	cpi	r18, 0xFE	; 254
   18d52:	3f 4f       	sbci	r19, 0xFF	; 255
   18d54:	08 f0       	brcs	.+2      	; 0x18d58 <lif_check_dir+0x26>
   18d56:	8e c1       	rjmp	.+796    	; 0x19074 <lif_check_dir+0x342>
   18d58:	9d 8b       	std	Y+21, r25	; 0x15
   18d5a:	8c 8b       	std	Y+20, r24	; 0x14
   18d5c:	7c 01       	movw	r14, r24
   18d5e:	2f e4       	ldi	r18, 0x4F	; 79
   18d60:	e2 0e       	add	r14, r18
   18d62:	f1 1c       	adc	r15, r1
   18d64:	c7 01       	movw	r24, r14
   18d66:	f9 d9       	rcall	.-3086   	; 0x1815a <lif_checkname>
   18d68:	89 2b       	or	r24, r25
   18d6a:	89 f4       	brne	.+34     	; 0x18d8e <lif_check_dir+0x5c>
   18d6c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18d70:	81 ff       	sbrs	r24, 1
   18d72:	0f c0       	rjmp	.+30     	; 0x18d92 <lif_check_dir+0x60>
   18d74:	ed b7       	in	r30, 0x3d	; 61
   18d76:	fe b7       	in	r31, 0x3e	; 62
   18d78:	f5 82       	std	Z+5, r15	; 0x05
   18d7a:	e4 82       	std	Z+4, r14	; 0x04
   18d7c:	8e e2       	ldi	r24, 0x2E	; 46
   18d7e:	9b e3       	ldi	r25, 0x3B	; 59
   18d80:	a0 e0       	ldi	r26, 0x00	; 0
   18d82:	81 83       	std	Z+1, r24	; 0x01
   18d84:	92 83       	std	Z+2, r25	; 0x02
   18d86:	a3 83       	std	Z+3, r26	; 0x03
   18d88:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18d8c:	02 c0       	rjmp	.+4      	; 0x18d92 <lif_check_dir+0x60>
   18d8e:	01 e0       	ldi	r16, 0x01	; 1
   18d90:	01 c0       	rjmp	.+2      	; 0x18d94 <lif_check_dir+0x62>
   18d92:	00 e0       	ldi	r16, 0x00	; 0
   18d94:	10 e0       	ldi	r17, 0x00	; 0
   18d96:	ec 89       	ldd	r30, Y+20	; 0x14
   18d98:	fd 89       	ldd	r31, Y+21	; 0x15
   18d9a:	84 85       	ldd	r24, Z+12	; 0x0c
   18d9c:	95 85       	ldd	r25, Z+13	; 0x0d
   18d9e:	a6 85       	ldd	r26, Z+14	; 0x0e
   18da0:	b7 85       	ldd	r27, Z+15	; 0x0f
   18da2:	00 97       	sbiw	r24, 0x00	; 0
   18da4:	a1 05       	cpc	r26, r1
   18da6:	b1 05       	cpc	r27, r1
   18da8:	29 f1       	breq	.+74     	; 0x18df4 <lif_check_dir+0xc2>
   18daa:	e4 5a       	subi	r30, 0xA4	; 164
   18dac:	ff 4f       	sbci	r31, 0xFF	; 255
   18dae:	40 81       	ld	r20, Z
   18db0:	51 81       	ldd	r21, Z+1	; 0x01
   18db2:	62 81       	ldd	r22, Z+2	; 0x02
   18db4:	73 81       	ldd	r23, Z+3	; 0x03
   18db6:	48 17       	cp	r20, r24
   18db8:	59 07       	cpc	r21, r25
   18dba:	6a 07       	cpc	r22, r26
   18dbc:	7b 07       	cpc	r23, r27
   18dbe:	d0 f4       	brcc	.+52     	; 0x18df4 <lif_check_dir+0xc2>
   18dc0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18dc4:	21 ff       	sbrs	r18, 1
   18dc6:	14 c0       	rjmp	.+40     	; 0x18df0 <lif_check_dir+0xbe>
   18dc8:	ed b7       	in	r30, 0x3d	; 61
   18dca:	fe b7       	in	r31, 0x3e	; 62
   18dcc:	82 87       	std	Z+10, r24	; 0x0a
   18dce:	93 87       	std	Z+11, r25	; 0x0b
   18dd0:	a4 87       	std	Z+12, r26	; 0x0c
   18dd2:	b5 87       	std	Z+13, r27	; 0x0d
   18dd4:	46 83       	std	Z+6, r20	; 0x06
   18dd6:	57 83       	std	Z+7, r21	; 0x07
   18dd8:	60 87       	std	Z+8, r22	; 0x08
   18dda:	71 87       	std	Z+9, r23	; 0x09
   18ddc:	f5 82       	std	Z+5, r15	; 0x05
   18dde:	e4 82       	std	Z+4, r14	; 0x04
   18de0:	8a ee       	ldi	r24, 0xEA	; 234
   18de2:	9a e3       	ldi	r25, 0x3A	; 58
   18de4:	a0 e0       	ldi	r26, 0x00	; 0
   18de6:	81 83       	std	Z+1, r24	; 0x01
   18de8:	92 83       	std	Z+2, r25	; 0x02
   18dea:	a3 83       	std	Z+3, r26	; 0x03
   18dec:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18df0:	00 e0       	ldi	r16, 0x00	; 0
   18df2:	10 e0       	ldi	r17, 0x00	; 0
   18df4:	ec 89       	ldd	r30, Y+20	; 0x14
   18df6:	fd 89       	ldd	r31, Y+21	; 0x15
   18df8:	44 81       	ldd	r20, Z+4	; 0x04
   18dfa:	55 81       	ldd	r21, Z+5	; 0x05
   18dfc:	66 81       	ldd	r22, Z+6	; 0x06
   18dfe:	77 81       	ldd	r23, Z+7	; 0x07
   18e00:	41 15       	cp	r20, r1
   18e02:	51 05       	cpc	r21, r1
   18e04:	61 05       	cpc	r22, r1
   18e06:	71 05       	cpc	r23, r1
   18e08:	89 f1       	breq	.+98     	; 0x18e6c <lif_check_dir+0x13a>
   18e0a:	e4 5a       	subi	r30, 0xA4	; 164
   18e0c:	ff 4f       	sbci	r31, 0xFF	; 255
   18e0e:	80 80       	ld	r8, Z
   18e10:	91 80       	ldd	r9, Z+1	; 0x01
   18e12:	a2 80       	ldd	r10, Z+2	; 0x02
   18e14:	b3 80       	ldd	r11, Z+3	; 0x03
   18e16:	ec 89       	ldd	r30, Y+20	; 0x14
   18e18:	fd 89       	ldd	r31, Y+21	; 0x15
   18e1a:	e0 5a       	subi	r30, 0xA0	; 160
   18e1c:	ff 4f       	sbci	r31, 0xFF	; 255
   18e1e:	80 81       	ld	r24, Z
   18e20:	91 81       	ldd	r25, Z+1	; 0x01
   18e22:	a2 81       	ldd	r26, Z+2	; 0x02
   18e24:	b3 81       	ldd	r27, Z+3	; 0x03
   18e26:	88 0d       	add	r24, r8
   18e28:	99 1d       	adc	r25, r9
   18e2a:	aa 1d       	adc	r26, r10
   18e2c:	bb 1d       	adc	r27, r11
   18e2e:	48 17       	cp	r20, r24
   18e30:	59 07       	cpc	r21, r25
   18e32:	6a 07       	cpc	r22, r26
   18e34:	7b 07       	cpc	r23, r27
   18e36:	d0 f4       	brcc	.+52     	; 0x18e6c <lif_check_dir+0x13a>
   18e38:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18e3c:	21 ff       	sbrs	r18, 1
   18e3e:	14 c0       	rjmp	.+40     	; 0x18e68 <lif_check_dir+0x136>
   18e40:	ed b7       	in	r30, 0x3d	; 61
   18e42:	fe b7       	in	r31, 0x3e	; 62
   18e44:	42 87       	std	Z+10, r20	; 0x0a
   18e46:	53 87       	std	Z+11, r21	; 0x0b
   18e48:	64 87       	std	Z+12, r22	; 0x0c
   18e4a:	75 87       	std	Z+13, r23	; 0x0d
   18e4c:	86 83       	std	Z+6, r24	; 0x06
   18e4e:	97 83       	std	Z+7, r25	; 0x07
   18e50:	a0 87       	std	Z+8, r26	; 0x08
   18e52:	b1 87       	std	Z+9, r27	; 0x09
   18e54:	f5 82       	std	Z+5, r15	; 0x05
   18e56:	e4 82       	std	Z+4, r14	; 0x04
   18e58:	89 ea       	ldi	r24, 0xA9	; 169
   18e5a:	9a e3       	ldi	r25, 0x3A	; 58
   18e5c:	a0 e0       	ldi	r26, 0x00	; 0
   18e5e:	81 83       	std	Z+1, r24	; 0x01
   18e60:	92 83       	std	Z+2, r25	; 0x02
   18e62:	a3 83       	std	Z+3, r26	; 0x03
   18e64:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18e68:	00 e0       	ldi	r16, 0x00	; 0
   18e6a:	10 e0       	ldi	r17, 0x00	; 0
   18e6c:	ec 89       	ldd	r30, Y+20	; 0x14
   18e6e:	fd 89       	ldd	r31, Y+21	; 0x15
   18e70:	e6 59       	subi	r30, 0x96	; 150
   18e72:	ff 4f       	sbci	r31, 0xFF	; 255
   18e74:	80 81       	ld	r24, Z
   18e76:	91 81       	ldd	r25, Z+1	; 0x01
   18e78:	81 30       	cpi	r24, 0x01	; 1
   18e7a:	f0 e8       	ldi	r31, 0x80	; 128
   18e7c:	9f 07       	cpc	r25, r31
   18e7e:	a1 f0       	breq	.+40     	; 0x18ea8 <lif_check_dir+0x176>
   18e80:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18e84:	21 ff       	sbrs	r18, 1
   18e86:	0e c0       	rjmp	.+28     	; 0x18ea4 <lif_check_dir+0x172>
   18e88:	ed b7       	in	r30, 0x3d	; 61
   18e8a:	fe b7       	in	r31, 0x3e	; 62
   18e8c:	97 83       	std	Z+7, r25	; 0x07
   18e8e:	86 83       	std	Z+6, r24	; 0x06
   18e90:	f5 82       	std	Z+5, r15	; 0x05
   18e92:	e4 82       	std	Z+4, r14	; 0x04
   18e94:	8b e7       	ldi	r24, 0x7B	; 123
   18e96:	9a e3       	ldi	r25, 0x3A	; 58
   18e98:	a0 e0       	ldi	r26, 0x00	; 0
   18e9a:	81 83       	std	Z+1, r24	; 0x01
   18e9c:	92 83       	std	Z+2, r25	; 0x02
   18e9e:	a3 83       	std	Z+3, r26	; 0x03
   18ea0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18ea4:	00 e0       	ldi	r16, 0x00	; 0
   18ea6:	10 e0       	ldi	r17, 0x00	; 0
   18ea8:	f6 01       	movw	r30, r12
   18eaa:	80 81       	ld	r24, Z
   18eac:	91 81       	ldd	r25, Z+1	; 0x01
   18eae:	8c 7f       	andi	r24, 0xFC	; 252
   18eb0:	80 31       	cpi	r24, 0x10	; 16
   18eb2:	90 4e       	sbci	r25, 0xE0	; 224
   18eb4:	09 f0       	breq	.+2      	; 0x18eb8 <lif_check_dir+0x186>
   18eb6:	af c0       	rjmp	.+350    	; 0x19016 <lif_check_dir+0x2e4>
   18eb8:	cc 88       	ldd	r12, Y+20	; 0x14
   18eba:	dd 88       	ldd	r13, Y+21	; 0x15
   18ebc:	2c e6       	ldi	r18, 0x6C	; 108
   18ebe:	c2 0e       	add	r12, r18
   18ec0:	d1 1c       	adc	r13, r1
   18ec2:	f6 01       	movw	r30, r12
   18ec4:	80 81       	ld	r24, Z
   18ec6:	91 81       	ldd	r25, Z+1	; 0x01
   18ec8:	00 97       	sbiw	r24, 0x00	; 0
   18eca:	09 f4       	brne	.+2      	; 0x18ece <lif_check_dir+0x19c>
   18ecc:	a4 c0       	rjmp	.+328    	; 0x19016 <lif_check_dir+0x2e4>
   18ece:	4c 01       	movw	r8, r24
   18ed0:	a1 2c       	mov	r10, r1
   18ed2:	b1 2c       	mov	r11, r1
   18ed4:	77 27       	eor	r23, r23
   18ed6:	6b 2d       	mov	r22, r11
   18ed8:	5a 2d       	mov	r21, r10
   18eda:	49 2d       	mov	r20, r9
   18edc:	9c 01       	movw	r18, r24
   18ede:	33 27       	eor	r19, r19
   18ee0:	3b 8b       	std	Y+19, r19	; 0x13
   18ee2:	2a 8b       	std	Y+18, r18	; 0x12
   18ee4:	db 01       	movw	r26, r22
   18ee6:	ca 01       	movw	r24, r20
   18ee8:	23 2b       	or	r18, r19
   18eea:	19 f0       	breq	.+6      	; 0x18ef2 <lif_check_dir+0x1c0>
   18eec:	01 96       	adiw	r24, 0x01	; 1
   18eee:	a1 1d       	adc	r26, r1
   18ef0:	b1 1d       	adc	r27, r1
   18ef2:	2c 88       	ldd	r2, Y+20	; 0x14
   18ef4:	3d 88       	ldd	r3, Y+21	; 0x15
   18ef6:	30 e6       	ldi	r19, 0x60	; 96
   18ef8:	23 0e       	add	r2, r19
   18efa:	31 1c       	adc	r3, r1
   18efc:	f1 01       	movw	r30, r2
   18efe:	40 80       	ld	r4, Z
   18f00:	51 80       	ldd	r5, Z+1	; 0x01
   18f02:	62 80       	ldd	r6, Z+2	; 0x02
   18f04:	73 80       	ldd	r7, Z+3	; 0x03
   18f06:	48 16       	cp	r4, r24
   18f08:	59 06       	cpc	r5, r25
   18f0a:	6a 06       	cpc	r6, r26
   18f0c:	7b 06       	cpc	r7, r27
   18f0e:	30 f5       	brcc	.+76     	; 0x18f5c <lif_check_dir+0x22a>
   18f10:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18f14:	21 ff       	sbrs	r18, 1
   18f16:	20 c0       	rjmp	.+64     	; 0x18f58 <lif_check_dir+0x226>
   18f18:	2a 89       	ldd	r18, Y+18	; 0x12
   18f1a:	3b 89       	ldd	r19, Y+19	; 0x13
   18f1c:	23 2b       	or	r18, r19
   18f1e:	21 f0       	breq	.+8      	; 0x18f28 <lif_check_dir+0x1f6>
   18f20:	4f 5f       	subi	r20, 0xFF	; 255
   18f22:	5f 4f       	sbci	r21, 0xFF	; 255
   18f24:	6f 4f       	sbci	r22, 0xFF	; 255
   18f26:	7f 4f       	sbci	r23, 0xFF	; 255
   18f28:	ed b7       	in	r30, 0x3d	; 61
   18f2a:	fe b7       	in	r31, 0x3e	; 62
   18f2c:	46 86       	std	Z+14, r4	; 0x0e
   18f2e:	57 86       	std	Z+15, r5	; 0x0f
   18f30:	60 8a       	std	Z+16, r6	; 0x10
   18f32:	71 8a       	std	Z+17, r7	; 0x11
   18f34:	42 87       	std	Z+10, r20	; 0x0a
   18f36:	53 87       	std	Z+11, r21	; 0x0b
   18f38:	64 87       	std	Z+12, r22	; 0x0c
   18f3a:	75 87       	std	Z+13, r23	; 0x0d
   18f3c:	86 82       	std	Z+6, r8	; 0x06
   18f3e:	97 82       	std	Z+7, r9	; 0x07
   18f40:	a0 86       	std	Z+8, r10	; 0x08
   18f42:	b1 86       	std	Z+9, r11	; 0x09
   18f44:	f5 82       	std	Z+5, r15	; 0x05
   18f46:	e4 82       	std	Z+4, r14	; 0x04
   18f48:	80 e3       	ldi	r24, 0x30	; 48
   18f4a:	9a e3       	ldi	r25, 0x3A	; 58
   18f4c:	a0 e0       	ldi	r26, 0x00	; 0
   18f4e:	81 83       	std	Z+1, r24	; 0x01
   18f50:	92 83       	std	Z+2, r25	; 0x02
   18f52:	a3 83       	std	Z+3, r26	; 0x03
   18f54:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18f58:	00 e0       	ldi	r16, 0x00	; 0
   18f5a:	10 e0       	ldi	r17, 0x00	; 0
   18f5c:	f6 01       	movw	r30, r12
   18f5e:	20 81       	ld	r18, Z
   18f60:	31 81       	ldd	r19, Z+1	; 0x01
   18f62:	a9 01       	movw	r20, r18
   18f64:	60 e0       	ldi	r22, 0x00	; 0
   18f66:	70 e0       	ldi	r23, 0x00	; 0
   18f68:	bb 27       	eor	r27, r27
   18f6a:	a7 2f       	mov	r26, r23
   18f6c:	96 2f       	mov	r25, r22
   18f6e:	85 2f       	mov	r24, r21
   18f70:	f9 01       	movw	r30, r18
   18f72:	ff 27       	eor	r31, r31
   18f74:	fb 8b       	std	Y+19, r31	; 0x13
   18f76:	ea 8b       	std	Y+18, r30	; 0x12
   18f78:	2c 01       	movw	r4, r24
   18f7a:	3d 01       	movw	r6, r26
   18f7c:	ef 2b       	or	r30, r31
   18f7e:	29 f0       	breq	.+10     	; 0x18f8a <lif_check_dir+0x258>
   18f80:	ff ef       	ldi	r31, 0xFF	; 255
   18f82:	4f 1a       	sub	r4, r31
   18f84:	5f 0a       	sbc	r5, r31
   18f86:	6f 0a       	sbc	r6, r31
   18f88:	7f 0a       	sbc	r7, r31
   18f8a:	f1 01       	movw	r30, r2
   18f8c:	80 80       	ld	r8, Z
   18f8e:	91 80       	ldd	r9, Z+1	; 0x01
   18f90:	a2 80       	ldd	r10, Z+2	; 0x02
   18f92:	b3 80       	ldd	r11, Z+3	; 0x03
   18f94:	48 14       	cp	r4, r8
   18f96:	59 04       	cpc	r5, r9
   18f98:	6a 04       	cpc	r6, r10
   18f9a:	7b 04       	cpc	r7, r11
   18f9c:	28 f5       	brcc	.+74     	; 0x18fe8 <lif_check_dir+0x2b6>
   18f9e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18fa2:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18fa6:	32 ff       	sbrs	r19, 2
   18fa8:	1f c0       	rjmp	.+62     	; 0x18fe8 <lif_check_dir+0x2b6>
   18faa:	2a 89       	ldd	r18, Y+18	; 0x12
   18fac:	3b 89       	ldd	r19, Y+19	; 0x13
   18fae:	23 2b       	or	r18, r19
   18fb0:	19 f0       	breq	.+6      	; 0x18fb8 <lif_check_dir+0x286>
   18fb2:	01 96       	adiw	r24, 0x01	; 1
   18fb4:	a1 1d       	adc	r26, r1
   18fb6:	b1 1d       	adc	r27, r1
   18fb8:	ed b7       	in	r30, 0x3d	; 61
   18fba:	fe b7       	in	r31, 0x3e	; 62
   18fbc:	86 86       	std	Z+14, r8	; 0x0e
   18fbe:	97 86       	std	Z+15, r9	; 0x0f
   18fc0:	a0 8a       	std	Z+16, r10	; 0x10
   18fc2:	b1 8a       	std	Z+17, r11	; 0x11
   18fc4:	82 87       	std	Z+10, r24	; 0x0a
   18fc6:	93 87       	std	Z+11, r25	; 0x0b
   18fc8:	a4 87       	std	Z+12, r26	; 0x0c
   18fca:	b5 87       	std	Z+13, r27	; 0x0d
   18fcc:	46 83       	std	Z+6, r20	; 0x06
   18fce:	57 83       	std	Z+7, r21	; 0x07
   18fd0:	60 87       	std	Z+8, r22	; 0x08
   18fd2:	71 87       	std	Z+9, r23	; 0x09
   18fd4:	f5 82       	std	Z+5, r15	; 0x05
   18fd6:	e4 82       	std	Z+4, r14	; 0x04
   18fd8:	85 ee       	ldi	r24, 0xE5	; 229
   18fda:	99 e3       	ldi	r25, 0x39	; 57
   18fdc:	a0 e0       	ldi	r26, 0x00	; 0
   18fde:	81 83       	std	Z+1, r24	; 0x01
   18fe0:	92 83       	std	Z+2, r25	; 0x02
   18fe2:	a3 83       	std	Z+3, r26	; 0x03
   18fe4:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   18fe8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18fec:	81 ff       	sbrs	r24, 1
   18fee:	13 c0       	rjmp	.+38     	; 0x19016 <lif_check_dir+0x2e4>
   18ff0:	f6 01       	movw	r30, r12
   18ff2:	80 81       	ld	r24, Z
   18ff4:	91 81       	ldd	r25, Z+1	; 0x01
   18ff6:	89 2b       	or	r24, r25
   18ff8:	71 f4       	brne	.+28     	; 0x19016 <lif_check_dir+0x2e4>
   18ffa:	ed b7       	in	r30, 0x3d	; 61
   18ffc:	fe b7       	in	r31, 0x3e	; 62
   18ffe:	f5 82       	std	Z+5, r15	; 0x05
   19000:	e4 82       	std	Z+4, r14	; 0x04
   19002:	8a eb       	ldi	r24, 0xBA	; 186
   19004:	99 e3       	ldi	r25, 0x39	; 57
   19006:	a0 e0       	ldi	r26, 0x00	; 0
   19008:	81 83       	std	Z+1, r24	; 0x01
   1900a:	92 83       	std	Z+2, r25	; 0x02
   1900c:	a3 83       	std	Z+3, r26	; 0x03
   1900e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   19012:	00 e0       	ldi	r16, 0x00	; 0
   19014:	10 e0       	ldi	r17, 0x00	; 0
   19016:	ec 89       	ldd	r30, Y+20	; 0x14
   19018:	fd 89       	ldd	r31, Y+21	; 0x15
   1901a:	e2 59       	subi	r30, 0x92	; 146
   1901c:	ff 4f       	sbci	r31, 0xFF	; 255
   1901e:	20 81       	ld	r18, Z
   19020:	31 81       	ldd	r19, Z+1	; 0x01
   19022:	21 15       	cp	r18, r1
   19024:	f1 e0       	ldi	r31, 0x01	; 1
   19026:	3f 07       	cpc	r19, r31
   19028:	41 f1       	breq	.+80     	; 0x1907a <lif_check_dir+0x348>
   1902a:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   1902e:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19032:	ca 01       	movw	r24, r20
   19034:	82 70       	andi	r24, 0x02	; 2
   19036:	99 27       	eor	r25, r25
   19038:	41 ff       	sbrs	r20, 1
   1903a:	20 c0       	rjmp	.+64     	; 0x1907c <lif_check_dir+0x34a>
   1903c:	c9 01       	movw	r24, r18
   1903e:	a0 e0       	ldi	r26, 0x00	; 0
   19040:	b0 e0       	ldi	r27, 0x00	; 0
   19042:	ed b7       	in	r30, 0x3d	; 61
   19044:	fe b7       	in	r31, 0x3e	; 62
   19046:	86 83       	std	Z+6, r24	; 0x06
   19048:	97 83       	std	Z+7, r25	; 0x07
   1904a:	a0 87       	std	Z+8, r26	; 0x08
   1904c:	b1 87       	std	Z+9, r27	; 0x09
   1904e:	ec 89       	ldd	r30, Y+20	; 0x14
   19050:	fd 89       	ldd	r31, Y+21	; 0x15
   19052:	80 81       	ld	r24, Z
   19054:	91 81       	ldd	r25, Z+1	; 0x01
   19056:	ed b7       	in	r30, 0x3d	; 61
   19058:	fe b7       	in	r31, 0x3e	; 62
   1905a:	95 83       	std	Z+5, r25	; 0x05
   1905c:	84 83       	std	Z+4, r24	; 0x04
   1905e:	8e e8       	ldi	r24, 0x8E	; 142
   19060:	99 e3       	ldi	r25, 0x39	; 57
   19062:	a0 e0       	ldi	r26, 0x00	; 0
   19064:	81 83       	std	Z+1, r24	; 0x01
   19066:	92 83       	std	Z+2, r25	; 0x02
   19068:	a3 83       	std	Z+3, r26	; 0x03
   1906a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1906e:	80 e0       	ldi	r24, 0x00	; 0
   19070:	90 e0       	ldi	r25, 0x00	; 0
   19072:	04 c0       	rjmp	.+8      	; 0x1907c <lif_check_dir+0x34a>
   19074:	81 e0       	ldi	r24, 0x01	; 1
   19076:	90 e0       	ldi	r25, 0x00	; 0
   19078:	01 c0       	rjmp	.+2      	; 0x1907c <lif_check_dir+0x34a>
   1907a:	c8 01       	movw	r24, r16
   1907c:	65 96       	adiw	r28, 0x15	; 21
   1907e:	e2 e1       	ldi	r30, 0x12	; 18
   19080:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

00019084 <lif_close_volume>:
   19084:	cf 93       	push	r28
   19086:	df 93       	push	r29
   19088:	00 97       	sbiw	r24, 0x00	; 0
   1908a:	f9 f0       	breq	.+62     	; 0x190ca <lif_close_volume+0x46>
   1908c:	ec 01       	movw	r28, r24
   1908e:	8a 81       	ldd	r24, Y+2	; 0x02
   19090:	9b 81       	ldd	r25, Y+3	; 0x03
   19092:	00 97       	sbiw	r24, 0x00	; 0
   19094:	79 f0       	breq	.+30     	; 0x190b4 <lif_close_volume+0x30>
   19096:	22 e0       	ldi	r18, 0x02	; 2
   19098:	30 e0       	ldi	r19, 0x00	; 0
   1909a:	40 e0       	ldi	r20, 0x00	; 0
   1909c:	50 e0       	ldi	r21, 0x00	; 0
   1909e:	ba 01       	movw	r22, r20
   190a0:	0e 94 81 7b 	call	0xf702	; 0xf702 <fseek>
   190a4:	8a 81       	ldd	r24, Y+2	; 0x02
   190a6:	9b 81       	ldd	r25, Y+3	; 0x03
   190a8:	0e 94 69 7d 	call	0xfad2	; 0xfad2 <fclose>
   190ac:	1b 82       	std	Y+3, r1	; 0x03
   190ae:	1a 82       	std	Y+2, r1	; 0x02
   190b0:	0e 94 64 7c 	call	0xf8c8	; 0xf8c8 <sync>
   190b4:	88 81       	ld	r24, Y
   190b6:	99 81       	ldd	r25, Y+1	; 0x01
   190b8:	00 97       	sbiw	r24, 0x00	; 0
   190ba:	11 f0       	breq	.+4      	; 0x190c0 <lif_close_volume+0x3c>
   190bc:	0e 94 de be 	call	0x17dbc	; 0x17dbc <lif_free>
   190c0:	ce 01       	movw	r24, r28
   190c2:	8f db       	rcall	.-2274   	; 0x187e2 <lif_vol_clear>
   190c4:	ce 01       	movw	r24, r28
   190c6:	0e 94 de be 	call	0x17dbc	; 0x17dbc <lif_free>
   190ca:	df 91       	pop	r29
   190cc:	cf 91       	pop	r28
   190ce:	08 95       	ret

000190d0 <lif_checkdirindex>:
   190d0:	cf 92       	push	r12
   190d2:	df 92       	push	r13
   190d4:	ef 92       	push	r14
   190d6:	ff 92       	push	r15
   190d8:	cf 93       	push	r28
   190da:	df 93       	push	r29
   190dc:	ad b7       	in	r26, 0x3d	; 61
   190de:	be b7       	in	r27, 0x3e	; 62
   190e0:	17 97       	sbiw	r26, 0x07	; 7
   190e2:	0f b6       	in	r0, 0x3f	; 63
   190e4:	f8 94       	cli
   190e6:	be bf       	out	0x3e, r27	; 62
   190e8:	0f be       	out	0x3f, r0	; 63
   190ea:	ad bf       	out	0x3d, r26	; 61
   190ec:	9b 01       	movw	r18, r22
   190ee:	77 fd       	sbrc	r23, 7
   190f0:	25 c0       	rjmp	.+74     	; 0x1913c <lif_checkdirindex+0x6c>
   190f2:	ab 01       	movw	r20, r22
   190f4:	77 0f       	add	r23, r23
   190f6:	66 0b       	sbc	r22, r22
   190f8:	77 0b       	sbc	r23, r23
   190fa:	e5 e0       	ldi	r30, 0x05	; 5
   190fc:	44 0f       	add	r20, r20
   190fe:	55 1f       	adc	r21, r21
   19100:	66 1f       	adc	r22, r22
   19102:	77 1f       	adc	r23, r23
   19104:	ea 95       	dec	r30
   19106:	d1 f7       	brne	.-12     	; 0x190fc <lif_checkdirindex+0x2c>
   19108:	c5 2e       	mov	r12, r21
   1910a:	d6 2e       	mov	r13, r22
   1910c:	e7 2e       	mov	r14, r23
   1910e:	ff 24       	eor	r15, r15
   19110:	55 27       	eor	r21, r21
   19112:	66 27       	eor	r22, r22
   19114:	77 27       	eor	r23, r23
   19116:	45 2b       	or	r20, r21
   19118:	46 2b       	or	r20, r22
   1911a:	47 2b       	or	r20, r23
   1911c:	29 f0       	breq	.+10     	; 0x19128 <lif_checkdirindex+0x58>
   1911e:	4f ef       	ldi	r20, 0xFF	; 255
   19120:	c4 1a       	sub	r12, r20
   19122:	d4 0a       	sbc	r13, r20
   19124:	e4 0a       	sbc	r14, r20
   19126:	f4 0a       	sbc	r15, r20
   19128:	fc 01       	movw	r30, r24
   1912a:	45 a9       	ldd	r20, Z+53	; 0x35
   1912c:	56 a9       	ldd	r21, Z+54	; 0x36
   1912e:	67 a9       	ldd	r22, Z+55	; 0x37
   19130:	70 ad       	ldd	r23, Z+56	; 0x38
   19132:	4c 15       	cp	r20, r12
   19134:	5d 05       	cpc	r21, r13
   19136:	6e 05       	cpc	r22, r14
   19138:	7f 05       	cpc	r23, r15
   1913a:	08 f5       	brcc	.+66     	; 0x1917e <lif_checkdirindex+0xae>
   1913c:	ec 01       	movw	r28, r24
   1913e:	ed b7       	in	r30, 0x3d	; 61
   19140:	fe b7       	in	r31, 0x3e	; 62
   19142:	37 83       	std	Z+7, r19	; 0x07
   19144:	26 83       	std	Z+6, r18	; 0x06
   19146:	88 81       	ld	r24, Y
   19148:	99 81       	ldd	r25, Y+1	; 0x01
   1914a:	95 83       	std	Z+5, r25	; 0x05
   1914c:	84 83       	std	Z+4, r24	; 0x04
   1914e:	8b ec       	ldi	r24, 0xCB	; 203
   19150:	98 e3       	ldi	r25, 0x38	; 56
   19152:	a0 e0       	ldi	r26, 0x00	; 0
   19154:	81 83       	std	Z+1, r24	; 0x01
   19156:	92 83       	std	Z+2, r25	; 0x02
   19158:	a3 83       	std	Z+3, r26	; 0x03
   1915a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1915e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19162:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19166:	c9 01       	movw	r24, r18
   19168:	88 27       	eor	r24, r24
   1916a:	94 70       	andi	r25, 0x04	; 4
   1916c:	32 ff       	sbrs	r19, 2
   1916e:	09 c0       	rjmp	.+18     	; 0x19182 <lif_checkdirindex+0xb2>
   19170:	6c e0       	ldi	r22, 0x0C	; 12
   19172:	76 e1       	ldi	r23, 0x16	; 22
   19174:	ce 01       	movw	r24, r28
   19176:	3c db       	rcall	.-2440   	; 0x187f0 <lif_dump_vol>
   19178:	80 e0       	ldi	r24, 0x00	; 0
   1917a:	90 e0       	ldi	r25, 0x00	; 0
   1917c:	02 c0       	rjmp	.+4      	; 0x19182 <lif_checkdirindex+0xb2>
   1917e:	81 e0       	ldi	r24, 0x01	; 1
   19180:	90 e0       	ldi	r25, 0x00	; 0
   19182:	ad b7       	in	r26, 0x3d	; 61
   19184:	be b7       	in	r27, 0x3e	; 62
   19186:	17 96       	adiw	r26, 0x07	; 7
   19188:	0f b6       	in	r0, 0x3f	; 63
   1918a:	f8 94       	cli
   1918c:	be bf       	out	0x3e, r27	; 62
   1918e:	0f be       	out	0x3f, r0	; 63
   19190:	ad bf       	out	0x3d, r26	; 61
   19192:	df 91       	pop	r29
   19194:	cf 91       	pop	r28
   19196:	ff 90       	pop	r15
   19198:	ef 90       	pop	r14
   1919a:	df 90       	pop	r13
   1919c:	cf 90       	pop	r12
   1919e:	08 95       	ret

000191a0 <lif_readdirindex>:
   191a0:	a5 e2       	ldi	r26, 0x25	; 37
   191a2:	b0 e0       	ldi	r27, 0x00	; 0
   191a4:	e6 ed       	ldi	r30, 0xD6	; 214
   191a6:	f8 ec       	ldi	r31, 0xC8	; 200
   191a8:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
   191ac:	7c 01       	movw	r14, r24
   191ae:	6b 01       	movw	r12, r22
   191b0:	8f df       	rcall	.-226    	; 0x190d0 <lif_checkdirindex>
   191b2:	89 2b       	or	r24, r25
   191b4:	19 f4       	brne	.+6      	; 0x191bc <lif_readdirindex+0x1c>
   191b6:	00 e0       	ldi	r16, 0x00	; 0
   191b8:	10 e0       	ldi	r17, 0x00	; 0
   191ba:	54 c0       	rjmp	.+168    	; 0x19264 <lif_readdirindex+0xc4>
   191bc:	f7 01       	movw	r30, r14
   191be:	85 a5       	ldd	r24, Z+45	; 0x2d
   191c0:	96 a5       	ldd	r25, Z+46	; 0x2e
   191c2:	a7 a5       	ldd	r26, Z+47	; 0x2f
   191c4:	b0 a9       	ldd	r27, Z+48	; 0x30
   191c6:	44 27       	eor	r20, r20
   191c8:	58 2f       	mov	r21, r24
   191ca:	69 2f       	mov	r22, r25
   191cc:	7a 2f       	mov	r23, r26
   191ce:	c6 01       	movw	r24, r12
   191d0:	0d 2c       	mov	r0, r13
   191d2:	00 0c       	add	r0, r0
   191d4:	aa 0b       	sbc	r26, r26
   191d6:	bb 0b       	sbc	r27, r27
   191d8:	35 e0       	ldi	r19, 0x05	; 5
   191da:	88 0f       	add	r24, r24
   191dc:	99 1f       	adc	r25, r25
   191de:	aa 1f       	adc	r26, r26
   191e0:	bb 1f       	adc	r27, r27
   191e2:	3a 95       	dec	r19
   191e4:	d1 f7       	brne	.-12     	; 0x191da <lif_readdirindex+0x3a>
   191e6:	9a 01       	movw	r18, r20
   191e8:	ab 01       	movw	r20, r22
   191ea:	28 0f       	add	r18, r24
   191ec:	39 1f       	adc	r19, r25
   191ee:	4a 1f       	adc	r20, r26
   191f0:	5b 1f       	adc	r21, r27
   191f2:	00 e2       	ldi	r16, 0x20	; 32
   191f4:	10 e0       	ldi	r17, 0x00	; 0
   191f6:	be 01       	movw	r22, r28
   191f8:	6a 5f       	subi	r22, 0xFA	; 250
   191fa:	7f 4f       	sbci	r23, 0xFF	; 255
   191fc:	c7 01       	movw	r24, r14
   191fe:	0e 94 96 bf 	call	0x17f2c	; 0x17f2c <lif_read>
   19202:	60 32       	cpi	r22, 0x20	; 32
   19204:	71 05       	cpc	r23, r1
   19206:	81 05       	cpc	r24, r1
   19208:	91 05       	cpc	r25, r1
   1920a:	a8 f2       	brcs	.-86     	; 0x191b6 <lif_readdirindex+0x16>
   1920c:	b7 01       	movw	r22, r14
   1920e:	ce 01       	movw	r24, r28
   19210:	06 96       	adiw	r24, 0x06	; 6
   19212:	91 d9       	rcall	.-3294   	; 0x18536 <lif_str2dir>
   19214:	f7 01       	movw	r30, r14
   19216:	e6 5a       	subi	r30, 0xA6	; 166
   19218:	ff 4f       	sbci	r31, 0xFF	; 255
   1921a:	80 81       	ld	r24, Z
   1921c:	91 81       	ldd	r25, Z+1	; 0x01
   1921e:	01 96       	adiw	r24, 0x01	; 1
   19220:	19 f4       	brne	.+6      	; 0x19228 <lif_readdirindex+0x88>
   19222:	f7 01       	movw	r30, r14
   19224:	d3 a2       	std	Z+35, r13	; 0x23
   19226:	c2 a2       	std	Z+34, r12	; 0x22
   19228:	c7 01       	movw	r24, r14
   1922a:	83 dd       	rcall	.-1274   	; 0x18d32 <lif_check_dir>
   1922c:	8c 01       	movw	r16, r24
   1922e:	89 2b       	or	r24, r25
   19230:	b9 f4       	brne	.+46     	; 0x19260 <lif_readdirindex+0xc0>
   19232:	ed b7       	in	r30, 0x3d	; 61
   19234:	fe b7       	in	r31, 0x3e	; 62
   19236:	d5 82       	std	Z+5, r13	; 0x05
   19238:	c4 82       	std	Z+4, r12	; 0x04
   1923a:	8b ea       	ldi	r24, 0xAB	; 171
   1923c:	98 e3       	ldi	r25, 0x38	; 56
   1923e:	a0 e0       	ldi	r26, 0x00	; 0
   19240:	81 83       	std	Z+1, r24	; 0x01
   19242:	92 83       	std	Z+2, r25	; 0x02
   19244:	a3 83       	std	Z+3, r26	; 0x03
   19246:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1924a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1924e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19252:	92 ff       	sbrs	r25, 2
   19254:	b0 cf       	rjmp	.-160    	; 0x191b6 <lif_readdirindex+0x16>
   19256:	6d e1       	ldi	r22, 0x1D	; 29
   19258:	76 e1       	ldi	r23, 0x16	; 22
   1925a:	c7 01       	movw	r24, r14
   1925c:	c9 da       	rcall	.-2670   	; 0x187f0 <lif_dump_vol>
   1925e:	02 c0       	rjmp	.+4      	; 0x19264 <lif_readdirindex+0xc4>
   19260:	01 e0       	ldi	r16, 0x01	; 1
   19262:	10 e0       	ldi	r17, 0x00	; 0
   19264:	c8 01       	movw	r24, r16
   19266:	a5 96       	adiw	r28, 0x25	; 37
   19268:	e8 e0       	ldi	r30, 0x08	; 8
   1926a:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

0001926e <lif_writedirindex>:
   1926e:	a0 e2       	ldi	r26, 0x20	; 32
   19270:	b0 e0       	ldi	r27, 0x00	; 0
   19272:	ed e3       	ldi	r30, 0x3D	; 61
   19274:	f9 ec       	ldi	r31, 0xC9	; 201
   19276:	0c 94 d7 e2 	jmp	0x1c5ae	; 0x1c5ae <__prologue_saves__+0x10>
   1927a:	5c 01       	movw	r10, r24
   1927c:	6b 01       	movw	r12, r22
   1927e:	59 dd       	rcall	.-1358   	; 0x18d32 <lif_check_dir>
   19280:	7c 01       	movw	r14, r24
   19282:	89 2b       	or	r24, r25
   19284:	71 f4       	brne	.+28     	; 0x192a2 <lif_writedirindex+0x34>
   19286:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1928a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1928e:	92 fd       	sbrc	r25, 2
   19290:	03 c0       	rjmp	.+6      	; 0x19298 <lif_writedirindex+0x2a>
   19292:	e1 2c       	mov	r14, r1
   19294:	f1 2c       	mov	r15, r1
   19296:	42 c0       	rjmp	.+132    	; 0x1931c <lif_writedirindex+0xae>
   19298:	6e e2       	ldi	r22, 0x2E	; 46
   1929a:	76 e1       	ldi	r23, 0x16	; 22
   1929c:	c5 01       	movw	r24, r10
   1929e:	a8 da       	rcall	.-2736   	; 0x187f0 <lif_dump_vol>
   192a0:	3d c0       	rjmp	.+122    	; 0x1931c <lif_writedirindex+0xae>
   192a2:	b6 01       	movw	r22, r12
   192a4:	c5 01       	movw	r24, r10
   192a6:	14 df       	rcall	.-472    	; 0x190d0 <lif_checkdirindex>
   192a8:	89 2b       	or	r24, r25
   192aa:	99 f3       	breq	.-26     	; 0x19292 <lif_writedirindex+0x24>
   192ac:	f5 01       	movw	r30, r10
   192ae:	e6 5a       	subi	r30, 0xA6	; 166
   192b0:	ff 4f       	sbci	r31, 0xFF	; 255
   192b2:	80 81       	ld	r24, Z
   192b4:	91 81       	ldd	r25, Z+1	; 0x01
   192b6:	01 96       	adiw	r24, 0x01	; 1
   192b8:	19 f4       	brne	.+6      	; 0x192c0 <lif_writedirindex+0x52>
   192ba:	f5 01       	movw	r30, r10
   192bc:	d3 a2       	std	Z+35, r13	; 0x23
   192be:	c2 a2       	std	Z+34, r12	; 0x22
   192c0:	f5 01       	movw	r30, r10
   192c2:	85 a5       	ldd	r24, Z+45	; 0x2d
   192c4:	96 a5       	ldd	r25, Z+46	; 0x2e
   192c6:	a7 a5       	ldd	r26, Z+47	; 0x2f
   192c8:	b0 a9       	ldd	r27, Z+48	; 0x30
   192ca:	ba 2f       	mov	r27, r26
   192cc:	a9 2f       	mov	r26, r25
   192ce:	98 2f       	mov	r25, r24
   192d0:	88 27       	eor	r24, r24
   192d2:	0d 2c       	mov	r0, r13
   192d4:	00 0c       	add	r0, r0
   192d6:	ee 08       	sbc	r14, r14
   192d8:	ff 08       	sbc	r15, r15
   192da:	35 e0       	ldi	r19, 0x05	; 5
   192dc:	cc 0c       	add	r12, r12
   192de:	dd 1c       	adc	r13, r13
   192e0:	ee 1c       	adc	r14, r14
   192e2:	ff 1c       	adc	r15, r15
   192e4:	3a 95       	dec	r19
   192e6:	d1 f7       	brne	.-12     	; 0x192dc <lif_writedirindex+0x6e>
   192e8:	c8 0e       	add	r12, r24
   192ea:	d9 1e       	adc	r13, r25
   192ec:	ea 1e       	adc	r14, r26
   192ee:	fb 1e       	adc	r15, r27
   192f0:	be 01       	movw	r22, r28
   192f2:	6f 5f       	subi	r22, 0xFF	; 255
   192f4:	7f 4f       	sbci	r23, 0xFF	; 255
   192f6:	c5 01       	movw	r24, r10
   192f8:	b3 d8       	rcall	.-3738   	; 0x18460 <lif_dir2str>
   192fa:	00 e2       	ldi	r16, 0x20	; 32
   192fc:	10 e0       	ldi	r17, 0x00	; 0
   192fe:	a7 01       	movw	r20, r14
   19300:	96 01       	movw	r18, r12
   19302:	be 01       	movw	r22, r28
   19304:	6f 5f       	subi	r22, 0xFF	; 255
   19306:	7f 4f       	sbci	r23, 0xFF	; 255
   19308:	c5 01       	movw	r24, r10
   1930a:	0e 94 e7 bf 	call	0x17fce	; 0x17fce <lif_write>
   1930e:	31 e0       	ldi	r19, 0x01	; 1
   19310:	20 e0       	ldi	r18, 0x00	; 0
   19312:	80 97       	sbiw	r24, 0x20	; 32
   19314:	0c f4       	brge	.+2      	; 0x19318 <lif_writedirindex+0xaa>
   19316:	30 e0       	ldi	r19, 0x00	; 0
   19318:	e3 2e       	mov	r14, r19
   1931a:	f2 2e       	mov	r15, r18
   1931c:	c7 01       	movw	r24, r14
   1931e:	a0 96       	adiw	r28, 0x20	; 32
   19320:	ea e0       	ldi	r30, 0x0A	; 10
   19322:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__epilogue_restores__+0x10>

00019326 <lif_writedirEOF>:
   19326:	0f 93       	push	r16
   19328:	1f 93       	push	r17
   1932a:	cf 93       	push	r28
   1932c:	df 93       	push	r29
   1932e:	ec 01       	movw	r28, r24
   19330:	8b 01       	movw	r16, r22
   19332:	4f da       	rcall	.-2914   	; 0x187d2 <lif_dir_clear>
   19334:	fe 01       	movw	r30, r28
   19336:	e6 5a       	subi	r30, 0xA6	; 166
   19338:	ff 4f       	sbci	r31, 0xFF	; 255
   1933a:	8f ef       	ldi	r24, 0xFF	; 255
   1933c:	9f ef       	ldi	r25, 0xFF	; 255
   1933e:	91 83       	std	Z+1, r25	; 0x01
   19340:	80 83       	st	Z, r24
   19342:	1b a3       	std	Y+35, r17	; 0x23
   19344:	0a a3       	std	Y+34, r16	; 0x22
   19346:	b8 01       	movw	r22, r16
   19348:	ce 01       	movw	r24, r28
   1934a:	91 df       	rcall	.-222    	; 0x1926e <lif_writedirindex>
   1934c:	df 91       	pop	r29
   1934e:	cf 91       	pop	r28
   19350:	1f 91       	pop	r17
   19352:	0f 91       	pop	r16
   19354:	08 95       	ret

00019356 <lif_updatefree>:
   19356:	2f 92       	push	r2
   19358:	3f 92       	push	r3
   1935a:	4f 92       	push	r4
   1935c:	5f 92       	push	r5
   1935e:	6f 92       	push	r6
   19360:	7f 92       	push	r7
   19362:	8f 92       	push	r8
   19364:	af 92       	push	r10
   19366:	bf 92       	push	r11
   19368:	cf 92       	push	r12
   1936a:	df 92       	push	r13
   1936c:	ef 92       	push	r14
   1936e:	ff 92       	push	r15
   19370:	0f 93       	push	r16
   19372:	1f 93       	push	r17
   19374:	cf 93       	push	r28
   19376:	df 93       	push	r29
   19378:	cd b7       	in	r28, 0x3d	; 61
   1937a:	de b7       	in	r29, 0x3e	; 62
   1937c:	2f 97       	sbiw	r28, 0x0f	; 15
   1937e:	0f b6       	in	r0, 0x3f	; 63
   19380:	f8 94       	cli
   19382:	de bf       	out	0x3e, r29	; 62
   19384:	0f be       	out	0x3f, r0	; 63
   19386:	cd bf       	out	0x3d, r28	; 61
   19388:	9f 87       	std	Y+15, r25	; 0x0f
   1938a:	8e 87       	std	Y+14, r24	; 0x0e
   1938c:	fc 01       	movw	r30, r24
   1938e:	24 84       	ldd	r2, Z+12	; 0x0c
   19390:	35 84       	ldd	r3, Z+13	; 0x0d
   19392:	46 84       	ldd	r4, Z+14	; 0x0e
   19394:	57 84       	ldd	r5, Z+15	; 0x0f
   19396:	80 89       	ldd	r24, Z+16	; 0x10
   19398:	91 89       	ldd	r25, Z+17	; 0x11
   1939a:	a2 89       	ldd	r26, Z+18	; 0x12
   1939c:	b3 89       	ldd	r27, Z+19	; 0x13
   1939e:	80 8f       	std	Z+24, r24	; 0x18
   193a0:	91 8f       	std	Z+25, r25	; 0x19
   193a2:	a2 8f       	std	Z+26, r26	; 0x1a
   193a4:	b3 8f       	std	Z+27, r27	; 0x1b
   193a6:	14 8a       	std	Z+20, r1	; 0x14
   193a8:	15 8a       	std	Z+21, r1	; 0x15
   193aa:	16 8a       	std	Z+22, r1	; 0x16
   193ac:	17 8a       	std	Z+23, r1	; 0x17
   193ae:	17 8e       	std	Z+31, r1	; 0x1f
   193b0:	16 8e       	std	Z+30, r1	; 0x1e
   193b2:	15 8e       	std	Z+29, r1	; 0x1d
   193b4:	14 8e       	std	Z+28, r1	; 0x1c
   193b6:	11 a2       	std	Z+33, r1	; 0x21
   193b8:	10 a2       	std	Z+32, r1	; 0x20
   193ba:	13 a2       	std	Z+35, r1	; 0x23
   193bc:	12 a2       	std	Z+34, r1	; 0x22
   193be:	cc 24       	eor	r12, r12
   193c0:	c3 94       	inc	r12
   193c2:	d1 2c       	mov	r13, r1
   193c4:	0f ef       	ldi	r16, 0xFF	; 255
   193c6:	1f ef       	ldi	r17, 0xFF	; 255
   193c8:	e6 5a       	subi	r30, 0xA6	; 166
   193ca:	ff 4f       	sbci	r31, 0xFF	; 255
   193cc:	f9 87       	std	Y+9, r31	; 0x09
   193ce:	e8 87       	std	Y+8, r30	; 0x08
   193d0:	ae 84       	ldd	r10, Y+14	; 0x0e
   193d2:	bf 84       	ldd	r11, Y+15	; 0x0f
   193d4:	fc e5       	ldi	r31, 0x5C	; 92
   193d6:	af 0e       	add	r10, r31
   193d8:	b1 1c       	adc	r11, r1
   193da:	8e 85       	ldd	r24, Y+14	; 0x0e
   193dc:	9f 85       	ldd	r25, Y+15	; 0x0f
   193de:	80 5a       	subi	r24, 0xA0	; 160
   193e0:	9f 4f       	sbci	r25, 0xFF	; 255
   193e2:	9b 87       	std	Y+11, r25	; 0x0b
   193e4:	8a 87       	std	Y+10, r24	; 0x0a
   193e6:	ee 85       	ldd	r30, Y+14	; 0x0e
   193e8:	ff 85       	ldd	r31, Y+15	; 0x0f
   193ea:	e1 5b       	subi	r30, 0xB1	; 177
   193ec:	ff 4f       	sbci	r31, 0xFF	; 255
   193ee:	fd 87       	std	Y+13, r31	; 0x0d
   193f0:	ec 87       	std	Y+12, r30	; 0x0c
   193f2:	8e e5       	ldi	r24, 0x5E	; 94
   193f4:	98 e3       	ldi	r25, 0x38	; 56
   193f6:	3c 01       	movw	r6, r24
   193f8:	81 2c       	mov	r8, r1
   193fa:	76 01       	movw	r14, r12
   193fc:	21 e0       	ldi	r18, 0x01	; 1
   193fe:	e2 1a       	sub	r14, r18
   19400:	f1 08       	sbc	r15, r1
   19402:	b7 01       	movw	r22, r14
   19404:	8e 85       	ldd	r24, Y+14	; 0x0e
   19406:	9f 85       	ldd	r25, Y+15	; 0x0f
   19408:	cb de       	rcall	.-618    	; 0x191a0 <lif_readdirindex>
   1940a:	89 2b       	or	r24, r25
   1940c:	19 f4       	brne	.+6      	; 0x19414 <lif_updatefree+0xbe>
   1940e:	80 e0       	ldi	r24, 0x00	; 0
   19410:	90 e0       	ldi	r25, 0x00	; 0
   19412:	91 c0       	rjmp	.+290    	; 0x19536 <lif_updatefree+0x1e0>
   19414:	e8 85       	ldd	r30, Y+8	; 0x08
   19416:	f9 85       	ldd	r31, Y+9	; 0x09
   19418:	80 81       	ld	r24, Z
   1941a:	91 81       	ldd	r25, Z+1	; 0x01
   1941c:	8f 3f       	cpi	r24, 0xFF	; 255
   1941e:	ff ef       	ldi	r31, 0xFF	; 255
   19420:	9f 07       	cpc	r25, r31
   19422:	c1 f4       	brne	.+48     	; 0x19454 <lif_updatefree+0xfe>
   19424:	ee 85       	ldd	r30, Y+14	; 0x0e
   19426:	ff 85       	ldd	r31, Y+15	; 0x0f
   19428:	0f 3f       	cpi	r16, 0xFF	; 255
   1942a:	2f ef       	ldi	r18, 0xFF	; 255
   1942c:	12 07       	cpc	r17, r18
   1942e:	09 f4       	brne	.+2      	; 0x19432 <lif_updatefree+0xdc>
   19430:	78 c0       	rjmp	.+240    	; 0x19522 <lif_updatefree+0x1cc>
   19432:	13 a3       	std	Z+35, r17	; 0x23
   19434:	02 a3       	std	Z+34, r16	; 0x22
   19436:	e0 1a       	sub	r14, r16
   19438:	f1 0a       	sbc	r15, r17
   1943a:	86 8d       	ldd	r24, Z+30	; 0x1e
   1943c:	97 8d       	ldd	r25, Z+31	; 0x1f
   1943e:	8e 19       	sub	r24, r14
   19440:	9f 09       	sbc	r25, r15
   19442:	97 8f       	std	Z+31, r25	; 0x1f
   19444:	86 8f       	std	Z+30, r24	; 0x1e
   19446:	b8 01       	movw	r22, r16
   19448:	cf 01       	movw	r24, r30
   1944a:	6d df       	rcall	.-294    	; 0x19326 <lif_writedirEOF>
   1944c:	89 2b       	or	r24, r25
   1944e:	09 f0       	breq	.+2      	; 0x19452 <lif_updatefree+0xfc>
   19450:	6a c0       	rjmp	.+212    	; 0x19526 <lif_updatefree+0x1d0>
   19452:	dd cf       	rjmp	.-70     	; 0x1940e <lif_updatefree+0xb8>
   19454:	89 2b       	or	r24, r25
   19456:	81 f4       	brne	.+32     	; 0x19478 <lif_updatefree+0x122>
   19458:	0f 3f       	cpi	r16, 0xFF	; 255
   1945a:	ff ef       	ldi	r31, 0xFF	; 255
   1945c:	1f 07       	cpc	r17, r31
   1945e:	09 f4       	brne	.+2      	; 0x19462 <lif_updatefree+0x10c>
   19460:	87 01       	movw	r16, r14
   19462:	ee 85       	ldd	r30, Y+14	; 0x0e
   19464:	ff 85       	ldd	r31, Y+15	; 0x0f
   19466:	86 8d       	ldd	r24, Z+30	; 0x1e
   19468:	97 8d       	ldd	r25, Z+31	; 0x1f
   1946a:	01 96       	adiw	r24, 0x01	; 1
   1946c:	97 8f       	std	Z+31, r25	; 0x1f
   1946e:	86 8f       	std	Z+30, r24	; 0x1e
   19470:	ff ef       	ldi	r31, 0xFF	; 255
   19472:	cf 1a       	sub	r12, r31
   19474:	df 0a       	sbc	r13, r31
   19476:	c1 cf       	rjmp	.-126    	; 0x193fa <lif_updatefree+0xa4>
   19478:	f5 01       	movw	r30, r10
   1947a:	80 81       	ld	r24, Z
   1947c:	91 81       	ldd	r25, Z+1	; 0x01
   1947e:	a2 81       	ldd	r26, Z+2	; 0x02
   19480:	b3 81       	ldd	r27, Z+3	; 0x03
   19482:	82 15       	cp	r24, r2
   19484:	93 05       	cpc	r25, r3
   19486:	a4 05       	cpc	r26, r4
   19488:	b5 05       	cpc	r27, r5
   1948a:	b8 f4       	brcc	.+46     	; 0x194ba <lif_updatefree+0x164>
   1948c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19490:	81 ff       	sbrs	r24, 1
   19492:	13 c0       	rjmp	.+38     	; 0x194ba <lif_updatefree+0x164>
   19494:	8c 85       	ldd	r24, Y+12	; 0x0c
   19496:	9d 85       	ldd	r25, Y+13	; 0x0d
   19498:	ed b7       	in	r30, 0x3d	; 61
   1949a:	fe b7       	in	r31, 0x3e	; 62
   1949c:	97 83       	std	Z+7, r25	; 0x07
   1949e:	86 83       	std	Z+6, r24	; 0x06
   194a0:	ee 85       	ldd	r30, Y+14	; 0x0e
   194a2:	ff 85       	ldd	r31, Y+15	; 0x0f
   194a4:	80 81       	ld	r24, Z
   194a6:	91 81       	ldd	r25, Z+1	; 0x01
   194a8:	ed b7       	in	r30, 0x3d	; 61
   194aa:	fe b7       	in	r31, 0x3e	; 62
   194ac:	95 83       	std	Z+5, r25	; 0x05
   194ae:	84 83       	std	Z+4, r24	; 0x04
   194b0:	61 82       	std	Z+1, r6	; 0x01
   194b2:	72 82       	std	Z+2, r7	; 0x02
   194b4:	83 82       	std	Z+3, r8	; 0x03
   194b6:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   194ba:	ea 85       	ldd	r30, Y+10	; 0x0a
   194bc:	fb 85       	ldd	r31, Y+11	; 0x0b
   194be:	80 81       	ld	r24, Z
   194c0:	91 81       	ldd	r25, Z+1	; 0x01
   194c2:	a2 81       	ldd	r26, Z+2	; 0x02
   194c4:	b3 81       	ldd	r27, Z+3	; 0x03
   194c6:	ee 85       	ldd	r30, Y+14	; 0x0e
   194c8:	ff 85       	ldd	r31, Y+15	; 0x0f
   194ca:	44 89       	ldd	r20, Z+20	; 0x14
   194cc:	55 89       	ldd	r21, Z+21	; 0x15
   194ce:	66 89       	ldd	r22, Z+22	; 0x16
   194d0:	77 89       	ldd	r23, Z+23	; 0x17
   194d2:	48 0f       	add	r20, r24
   194d4:	59 1f       	adc	r21, r25
   194d6:	6a 1f       	adc	r22, r26
   194d8:	7b 1f       	adc	r23, r27
   194da:	44 8b       	std	Z+20, r20	; 0x14
   194dc:	55 8b       	std	Z+21, r21	; 0x15
   194de:	66 8b       	std	Z+22, r22	; 0x16
   194e0:	77 8b       	std	Z+23, r23	; 0x17
   194e2:	40 8d       	ldd	r20, Z+24	; 0x18
   194e4:	51 8d       	ldd	r21, Z+25	; 0x19
   194e6:	62 8d       	ldd	r22, Z+26	; 0x1a
   194e8:	73 8d       	ldd	r23, Z+27	; 0x1b
   194ea:	48 1b       	sub	r20, r24
   194ec:	59 0b       	sbc	r21, r25
   194ee:	6a 0b       	sbc	r22, r26
   194f0:	7b 0b       	sbc	r23, r27
   194f2:	40 8f       	std	Z+24, r20	; 0x18
   194f4:	51 8f       	std	Z+25, r21	; 0x19
   194f6:	62 8f       	std	Z+26, r22	; 0x1a
   194f8:	73 8f       	std	Z+27, r23	; 0x1b
   194fa:	24 8d       	ldd	r18, Z+28	; 0x1c
   194fc:	35 8d       	ldd	r19, Z+29	; 0x1d
   194fe:	2f 5f       	subi	r18, 0xFF	; 255
   19500:	3f 4f       	sbci	r19, 0xFF	; 255
   19502:	35 8f       	std	Z+29, r19	; 0x1d
   19504:	24 8f       	std	Z+28, r18	; 0x1c
   19506:	f5 01       	movw	r30, r10
   19508:	40 81       	ld	r20, Z
   1950a:	51 81       	ldd	r21, Z+1	; 0x01
   1950c:	62 81       	ldd	r22, Z+2	; 0x02
   1950e:	73 81       	ldd	r23, Z+3	; 0x03
   19510:	1c 01       	movw	r2, r24
   19512:	2d 01       	movw	r4, r26
   19514:	24 0e       	add	r2, r20
   19516:	35 1e       	adc	r3, r21
   19518:	46 1e       	adc	r4, r22
   1951a:	57 1e       	adc	r5, r23
   1951c:	0f ef       	ldi	r16, 0xFF	; 255
   1951e:	1f ef       	ldi	r17, 0xFF	; 255
   19520:	a7 cf       	rjmp	.-178    	; 0x19470 <lif_updatefree+0x11a>
   19522:	f3 a2       	std	Z+35, r15	; 0x23
   19524:	e2 a2       	std	Z+34, r14	; 0x22
   19526:	8f ef       	ldi	r24, 0xFF	; 255
   19528:	9f ef       	ldi	r25, 0xFF	; 255
   1952a:	ee 85       	ldd	r30, Y+14	; 0x0e
   1952c:	ff 85       	ldd	r31, Y+15	; 0x0f
   1952e:	91 a3       	std	Z+33, r25	; 0x21
   19530:	80 a3       	std	Z+32, r24	; 0x20
   19532:	8e 85       	ldd	r24, Y+14	; 0x0e
   19534:	9f 85       	ldd	r25, Y+15	; 0x0f
   19536:	2f 96       	adiw	r28, 0x0f	; 15
   19538:	0f b6       	in	r0, 0x3f	; 63
   1953a:	f8 94       	cli
   1953c:	de bf       	out	0x3e, r29	; 62
   1953e:	0f be       	out	0x3f, r0	; 63
   19540:	cd bf       	out	0x3d, r28	; 61
   19542:	df 91       	pop	r29
   19544:	cf 91       	pop	r28
   19546:	1f 91       	pop	r17
   19548:	0f 91       	pop	r16
   1954a:	ff 90       	pop	r15
   1954c:	ef 90       	pop	r14
   1954e:	df 90       	pop	r13
   19550:	cf 90       	pop	r12
   19552:	bf 90       	pop	r11
   19554:	af 90       	pop	r10
   19556:	8f 90       	pop	r8
   19558:	7f 90       	pop	r7
   1955a:	6f 90       	pop	r6
   1955c:	5f 90       	pop	r5
   1955e:	4f 90       	pop	r4
   19560:	3f 90       	pop	r3
   19562:	2f 90       	pop	r2
   19564:	08 95       	ret

00019566 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   19566:	a9 e2       	ldi	r26, 0x29	; 41
   19568:	b1 e0       	ldi	r27, 0x01	; 1
   1956a:	e9 eb       	ldi	r30, 0xB9	; 185
   1956c:	fa ec       	ldi	r31, 0xCA	; 202
   1956e:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
   19572:	4c 01       	movw	r8, r24
   19574:	3b 01       	movw	r6, r22
   19576:	19 01       	movw	r2, r18
   19578:	2a 01       	movw	r4, r20
   1957a:	ca 5d       	subi	r28, 0xDA	; 218
   1957c:	de 4f       	sbci	r29, 0xFE	; 254
   1957e:	e8 82       	st	Y, r14
   19580:	f9 82       	std	Y+1, r15	; 0x01
   19582:	0a 83       	std	Y+2, r16	; 0x02
   19584:	1b 83       	std	Y+3, r17	; 0x03
   19586:	c6 52       	subi	r28, 0x26	; 38
   19588:	d1 40       	sbci	r29, 0x01	; 1
   1958a:	c2 5e       	subi	r28, 0xE2	; 226
   1958c:	de 4f       	sbci	r29, 0xFE	; 254
   1958e:	a8 82       	st	Y, r10
   19590:	b9 82       	std	Y+1, r11	; 0x01
   19592:	ca 82       	std	Y+2, r12	; 0x02
   19594:	db 82       	std	Y+3, r13	; 0x03
   19596:	ce 51       	subi	r28, 0x1E	; 30
   19598:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   1959a:	80 e0       	ldi	r24, 0x00	; 0
   1959c:	90 e0       	ldi	r25, 0x00	; 0
   1959e:	0e 94 3a 38 	call	0x7074	; 0x7074 <time>
   195a2:	5b 01       	movw	r10, r22
   195a4:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   195a6:	64 e7       	ldi	r22, 0x74	; 116
   195a8:	70 e0       	ldi	r23, 0x00	; 0
   195aa:	80 e0       	ldi	r24, 0x00	; 0
   195ac:	90 e0       	ldi	r25, 0x00	; 0
   195ae:	0e 94 a8 be 	call	0x17d50	; 0x17d50 <lif_calloc>
   195b2:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   195b4:	89 2b       	or	r24, r25
   195b6:	09 f4       	brne	.+2      	; 0x195ba <lif_create_volume+0x54>
   195b8:	b6 c2       	rjmp	.+1388   	; 0x19b26 <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   195ba:	c2 5e       	subi	r28, 0xE2	; 226
   195bc:	de 4f       	sbci	r29, 0xFE	; 254
   195be:	28 81       	ld	r18, Y
   195c0:	39 81       	ldd	r19, Y+1	; 0x01
   195c2:	4a 81       	ldd	r20, Y+2	; 0x02
   195c4:	5b 81       	ldd	r21, Y+3	; 0x03
   195c6:	ce 51       	subi	r28, 0x1E	; 30
   195c8:	d1 40       	sbci	r29, 0x01	; 1
   195ca:	ed b7       	in	r30, 0x3d	; 61
   195cc:	fe b7       	in	r31, 0x3e	; 62
   195ce:	20 8b       	std	Z+16, r18	; 0x10
   195d0:	31 8b       	std	Z+17, r19	; 0x11
   195d2:	42 8b       	std	Z+18, r20	; 0x12
   195d4:	53 8b       	std	Z+19, r21	; 0x13
   195d6:	ca 5d       	subi	r28, 0xDA	; 218
   195d8:	de 4f       	sbci	r29, 0xFE	; 254
   195da:	28 81       	ld	r18, Y
   195dc:	39 81       	ldd	r19, Y+1	; 0x01
   195de:	4a 81       	ldd	r20, Y+2	; 0x02
   195e0:	5b 81       	ldd	r21, Y+3	; 0x03
   195e2:	c6 52       	subi	r28, 0x26	; 38
   195e4:	d1 40       	sbci	r29, 0x01	; 1
   195e6:	24 87       	std	Z+12, r18	; 0x0c
   195e8:	35 87       	std	Z+13, r19	; 0x0d
   195ea:	46 87       	std	Z+14, r20	; 0x0e
   195ec:	57 87       	std	Z+15, r21	; 0x0f
   195ee:	20 86       	std	Z+8, r2	; 0x08
   195f0:	31 86       	std	Z+9, r3	; 0x09
   195f2:	42 86       	std	Z+10, r4	; 0x0a
   195f4:	53 86       	std	Z+11, r5	; 0x0b
   195f6:	77 82       	std	Z+7, r7	; 0x07
   195f8:	66 82       	std	Z+6, r6	; 0x06
   195fa:	95 82       	std	Z+5, r9	; 0x05
   195fc:	84 82       	std	Z+4, r8	; 0x04
   195fe:	89 e3       	ldi	r24, 0x39	; 57
   19600:	99 e3       	ldi	r25, 0x39	; 57
   19602:	a0 e0       	ldi	r26, 0x00	; 0
   19604:	81 83       	std	Z+1, r24	; 0x01
   19606:	92 83       	std	Z+2, r25	; 0x02
   19608:	a3 83       	std	Z+3, r26	; 0x03
   1960a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   1960e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19612:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19616:	92 ff       	sbrs	r25, 2
   19618:	04 c0       	rjmp	.+8      	; 0x19622 <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   1961a:	60 e4       	ldi	r22, 0x40	; 64
   1961c:	76 e1       	ldi	r23, 0x16	; 22
   1961e:	c7 01       	movw	r24, r14

    lif_image_clear(LIF);
   19620:	e7 d8       	rcall	.-3634   	; 0x187f0 <lif_dump_vol>
   19622:	c7 01       	movw	r24, r14

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   19624:	d0 d8       	rcall	.-3680   	; 0x187c6 <lif_image_clear>
   19626:	80 e0       	ldi	r24, 0x00	; 0
   19628:	90 e8       	ldi	r25, 0x80	; 128
   1962a:	f7 01       	movw	r30, r14
   1962c:	95 a3       	std	Z+37, r25	; 0x25
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   1962e:	84 a3       	std	Z+36, r24	; 0x24
   19630:	46 e0       	ldi	r20, 0x06	; 6
   19632:	50 e0       	ldi	r21, 0x00	; 0
   19634:	b3 01       	movw	r22, r6
   19636:	c7 01       	movw	r24, r14
   19638:	86 96       	adiw	r24, 0x26	; 38
   1963a:	0e 94 e7 c0 	call	0x181ce	; 0x181ce <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   1963e:	f7 01       	movw	r30, r14
   19640:	25 a6       	std	Z+45, r2	; 0x2d
   19642:	36 a6       	std	Z+46, r3	; 0x2e
   19644:	47 a6       	std	Z+47, r4	; 0x2f
    LIF->VOL.DirSectors = dirsectors;
   19646:	50 aa       	std	Z+48, r5	; 0x30
   19648:	ca 5d       	subi	r28, 0xDA	; 218
   1964a:	de 4f       	sbci	r29, 0xFE	; 254
   1964c:	28 81       	ld	r18, Y
   1964e:	39 81       	ldd	r19, Y+1	; 0x01
   19650:	4a 81       	ldd	r20, Y+2	; 0x02
   19652:	5b 81       	ldd	r21, Y+3	; 0x03
   19654:	c6 52       	subi	r28, 0x26	; 38
   19656:	d1 40       	sbci	r29, 0x01	; 1
   19658:	25 ab       	std	Z+53, r18	; 0x35
   1965a:	36 ab       	std	Z+54, r19	; 0x36
   1965c:	47 ab       	std	Z+55, r20	; 0x37
    LIF->VOL.System3000LIFid = 0x1000;
   1965e:	50 af       	std	Z+56, r21	; 0x38
   19660:	80 e0       	ldi	r24, 0x00	; 0
   19662:	90 e1       	ldi	r25, 0x10	; 16
   19664:	92 ab       	std	Z+50, r25	; 0x32
    LIF->VOL.tracks_per_side = 0;
   19666:	81 ab       	std	Z+49, r24	; 0x31
   19668:	fd 96       	adiw	r30, 0x3d	; 61
   1966a:	10 82       	st	Z, r1
   1966c:	11 82       	std	Z+1, r1	; 0x01
   1966e:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sides = 0;
   19670:	13 82       	std	Z+3, r1	; 0x03
   19672:	34 96       	adiw	r30, 0x04	; 4
   19674:	10 82       	st	Z, r1
   19676:	11 82       	std	Z+1, r1	; 0x01
   19678:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sectors_per_track = 0;
   1967a:	13 82       	std	Z+3, r1	; 0x03
   1967c:	34 96       	adiw	r30, 0x04	; 4
   1967e:	10 82       	st	Z, r1
   19680:	11 82       	std	Z+1, r1	; 0x01
   19682:	12 82       	std	Z+2, r1	; 0x02
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19684:	13 82       	std	Z+3, r1	; 0x03
   19686:	a7 01       	movw	r20, r14
   19688:	47 5b       	subi	r20, 0xB7	; 183
   1968a:	5f 4f       	sbci	r21, 0xFF	; 255
   1968c:	c6 01       	movw	r24, r12
   1968e:	b5 01       	movw	r22, r10
   19690:	0e 94 0c c3 	call	0x18618	; 0x18618 <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   19694:	c4 01       	movw	r24, r8
   19696:	0e 94 f3 be 	call	0x17de6	; 0x17de6 <lif_stralloc>
   1969a:	d7 01       	movw	r26, r14
   1969c:	8d 93       	st	X+, r24
    if(LIF->name == NULL)
   1969e:	9c 93       	st	X, r25
   196a0:	89 2b       	or	r24, r25
   196a2:	09 f4       	brne	.+2      	; 0x196a6 <lif_create_volume+0x140>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   196a4:	35 c2       	rjmp	.+1130   	; 0x19b10 <lif_create_volume+0x5aa>
   196a6:	c2 5e       	subi	r28, 0xE2	; 226
   196a8:	de 4f       	sbci	r29, 0xFE	; 254
   196aa:	28 81       	ld	r18, Y
   196ac:	39 81       	ldd	r19, Y+1	; 0x01
   196ae:	4a 81       	ldd	r20, Y+2	; 0x02
   196b0:	5b 81       	ldd	r21, Y+3	; 0x03
   196b2:	ce 51       	subi	r28, 0x1E	; 30
   196b4:	d1 40       	sbci	r29, 0x01	; 1
   196b6:	f7 01       	movw	r30, r14
   196b8:	20 8b       	std	Z+16, r18	; 0x10
   196ba:	31 8b       	std	Z+17, r19	; 0x11
   196bc:	42 8b       	std	Z+18, r20	; 0x12
    LIF->filestart = dirstart + dirsectors;
   196be:	53 8b       	std	Z+19, r21	; 0x13
   196c0:	ca 5d       	subi	r28, 0xDA	; 218
   196c2:	de 4f       	sbci	r29, 0xFE	; 254
   196c4:	88 81       	ld	r24, Y
   196c6:	99 81       	ldd	r25, Y+1	; 0x01
   196c8:	aa 81       	ldd	r26, Y+2	; 0x02
   196ca:	bb 81       	ldd	r27, Y+3	; 0x03
   196cc:	c6 52       	subi	r28, 0x26	; 38
   196ce:	d1 40       	sbci	r29, 0x01	; 1
   196d0:	82 0d       	add	r24, r2
   196d2:	93 1d       	adc	r25, r3
   196d4:	a4 1d       	adc	r26, r4
   196d6:	b5 1d       	adc	r27, r5
   196d8:	84 87       	std	Z+12, r24	; 0x0c
   196da:	95 87       	std	Z+13, r25	; 0x0d
   196dc:	a6 87       	std	Z+14, r26	; 0x0e
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   196de:	b7 87       	std	Z+15, r27	; 0x0f
   196e0:	82 0f       	add	r24, r18
   196e2:	93 1f       	adc	r25, r19
   196e4:	a4 1f       	adc	r26, r20
   196e6:	b5 1f       	adc	r27, r21
   196e8:	84 83       	std	Z+4, r24	; 0x04
   196ea:	95 83       	std	Z+5, r25	; 0x05
   196ec:	a6 83       	std	Z+6, r26	; 0x06
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   196ee:	b7 83       	std	Z+7, r27	; 0x07
   196f0:	ba 2f       	mov	r27, r26
   196f2:	a9 2f       	mov	r26, r25
   196f4:	98 2f       	mov	r25, r24
   196f6:	88 27       	eor	r24, r24
   196f8:	80 87       	std	Z+8, r24	; 0x08
   196fa:	91 87       	std	Z+9, r25	; 0x09
   196fc:	a2 87       	std	Z+10, r26	; 0x0a
    LIF->freesectors = LIF->filesectors;
   196fe:	b3 87       	std	Z+11, r27	; 0x0b
   19700:	20 8f       	std	Z+24, r18	; 0x18
   19702:	31 8f       	std	Z+25, r19	; 0x19
   19704:	42 8f       	std	Z+26, r20	; 0x1a
    LIF->usedsectors = 0;
   19706:	53 8f       	std	Z+27, r21	; 0x1b
   19708:	14 8a       	std	Z+20, r1	; 0x14
   1970a:	15 8a       	std	Z+21, r1	; 0x15
   1970c:	16 8a       	std	Z+22, r1	; 0x16
    LIF->files = 0;
   1970e:	17 8a       	std	Z+23, r1	; 0x17
   19710:	15 8e       	std	Z+29, r1	; 0x1d
    LIF->purged = 0;
   19712:	14 8e       	std	Z+28, r1	; 0x1c
   19714:	17 8e       	std	Z+31, r1	; 0x1f
    LIF->dirindex = 0;
   19716:	16 8e       	std	Z+30, r1	; 0x1e
   19718:	11 a2       	std	Z+33, r1	; 0x21
    LIF->EOFindex = 0;
   1971a:	10 a2       	std	Z+32, r1	; 0x20
   1971c:	13 a2       	std	Z+35, r1	; 0x23

    memset(buffer,0,LIF_SECTOR_SIZE);
   1971e:	12 a2       	std	Z+34, r1	; 0x22
   19720:	61 2c       	mov	r6, r1
   19722:	77 24       	eor	r7, r7
   19724:	73 94       	inc	r7
   19726:	9e 01       	movw	r18, r28
   19728:	2c 5e       	subi	r18, 0xEC	; 236
   1972a:	3f 4f       	sbci	r19, 0xFF	; 255
   1972c:	49 01       	movw	r8, r18
   1972e:	d9 01       	movw	r26, r18
   19730:	f3 01       	movw	r30, r6
   19732:	1d 92       	st	X+, r1
   19734:	31 97       	sbiw	r30, 0x01	; 1

    lif_vol2str(LIF,buffer);
   19736:	e9 f7       	brne	.-6      	; 0x19732 <lif_create_volume+0x1cc>
   19738:	b9 01       	movw	r22, r18
   1973a:	c7 01       	movw	r24, r14
   1973c:	0e 94 24 c1 	call	0x18248	; 0x18248 <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19740:	65 e0       	ldi	r22, 0x05	; 5
   19742:	79 e0       	ldi	r23, 0x09	; 9
   19744:	d7 01       	movw	r26, r14
   19746:	8d 91       	ld	r24, X+
   19748:	9c 91       	ld	r25, X
   1974a:	0e 94 12 bf 	call	0x17e24	; 0x17e24 <lif_open>
   1974e:	f7 01       	movw	r30, r14
   19750:	93 83       	std	Z+3, r25	; 0x03
    if(LIF->fp == NULL)
   19752:	82 83       	std	Z+2, r24	; 0x02
   19754:	89 2b       	or	r24, r25
   19756:	09 f4       	brne	.+2      	; 0x1975a <lif_create_volume+0x1f4>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19758:	db c1       	rjmp	.+950    	; 0x19b10 <lif_create_volume+0x5aa>
   1975a:	00 e0       	ldi	r16, 0x00	; 0
   1975c:	11 e0       	ldi	r17, 0x01	; 1
   1975e:	20 e0       	ldi	r18, 0x00	; 0
   19760:	30 e0       	ldi	r19, 0x00	; 0
   19762:	a9 01       	movw	r20, r18
   19764:	b4 01       	movw	r22, r8
   19766:	c7 01       	movw	r24, r14
   19768:	0e 94 e7 bf 	call	0x17fce	; 0x17fce <lif_write>
   1976c:	9c 01       	movw	r18, r24
   1976e:	99 0f       	add	r25, r25
   19770:	44 0b       	sbc	r20, r20
   19772:	55 0b       	sbc	r21, r21
   19774:	ca 5e       	subi	r28, 0xEA	; 234
   19776:	de 4f       	sbci	r29, 0xFE	; 254
   19778:	28 83       	st	Y, r18
   1977a:	39 83       	std	Y+1, r19	; 0x01
   1977c:	4a 83       	std	Y+2, r20	; 0x02
   1977e:	5b 83       	std	Y+3, r21	; 0x03
   19780:	c6 51       	subi	r28, 0x16	; 22

    if(size < LIF_SECTOR_SIZE)
   19782:	d1 40       	sbci	r29, 0x01	; 1
   19784:	2f 3f       	cpi	r18, 0xFF	; 255
   19786:	31 05       	cpc	r19, r1
   19788:	41 05       	cpc	r20, r1
   1978a:	51 05       	cpc	r21, r1
   1978c:	09 f0       	breq	.+2      	; 0x19790 <lif_create_volume+0x22a>
   1978e:	0c f4       	brge	.+2      	; 0x19792 <lif_create_volume+0x22c>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   19790:	bf c1       	rjmp	.+894    	; 0x19b10 <lif_create_volume+0x5aa>
   19792:	d4 01       	movw	r26, r8
   19794:	f3 01       	movw	r30, r6
   19796:	1d 92       	st	X+, r1
   19798:	31 97       	sbiw	r30, 0x01	; 1

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1979a:	e9 f7       	brne	.-6      	; 0x19796 <lif_create_volume+0x230>
   1979c:	21 e0       	ldi	r18, 0x01	; 1
   1979e:	30 e0       	ldi	r19, 0x00	; 0
   197a0:	40 e0       	ldi	r20, 0x00	; 0
   197a2:	50 e0       	ldi	r21, 0x00	; 0
   197a4:	c6 5e       	subi	r28, 0xE6	; 230
   197a6:	de 4f       	sbci	r29, 0xFE	; 254
   197a8:	28 83       	st	Y, r18
   197aa:	39 83       	std	Y+1, r19	; 0x01
   197ac:	4a 83       	std	Y+2, r20	; 0x02
   197ae:	5b 83       	std	Y+3, r21	; 0x03
   197b0:	ca 51       	subi	r28, 0x1A	; 26
   197b2:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   197b4:	64 01       	movw	r12, r8
   197b6:	8c e2       	ldi	r24, 0x2C	; 44
   197b8:	99 e3       	ldi	r25, 0x39	; 57
   197ba:	3c 01       	movw	r6, r24
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   197bc:	81 2c       	mov	r8, r1
   197be:	c6 5e       	subi	r28, 0xE6	; 230
   197c0:	de 4f       	sbci	r29, 0xFE	; 254
   197c2:	88 81       	ld	r24, Y
   197c4:	99 81       	ldd	r25, Y+1	; 0x01
   197c6:	aa 81       	ldd	r26, Y+2	; 0x02
   197c8:	bb 81       	ldd	r27, Y+3	; 0x03
   197ca:	ca 51       	subi	r28, 0x1A	; 26
   197cc:	d1 40       	sbci	r29, 0x01	; 1
   197ce:	82 15       	cp	r24, r2
   197d0:	93 05       	cpc	r25, r3
   197d2:	a4 05       	cpc	r26, r4
   197d4:	b5 05       	cpc	r27, r5
   197d6:	0c f0       	brlt	.+2      	; 0x197da <lif_create_volume+0x274>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   197d8:	55 c0       	rjmp	.+170    	; 0x19884 <lif_create_volume+0x31e>
   197da:	00 e0       	ldi	r16, 0x00	; 0
   197dc:	11 e0       	ldi	r17, 0x01	; 1
   197de:	ca 5e       	subi	r28, 0xEA	; 234
   197e0:	de 4f       	sbci	r29, 0xFE	; 254
   197e2:	28 81       	ld	r18, Y
   197e4:	39 81       	ldd	r19, Y+1	; 0x01
   197e6:	4a 81       	ldd	r20, Y+2	; 0x02
   197e8:	5b 81       	ldd	r21, Y+3	; 0x03
   197ea:	c6 51       	subi	r28, 0x16	; 22
   197ec:	d1 40       	sbci	r29, 0x01	; 1
   197ee:	b6 01       	movw	r22, r12
   197f0:	c7 01       	movw	r24, r14
   197f2:	0e 94 e7 bf 	call	0x17fce	; 0x17fce <lif_write>
   197f6:	09 2e       	mov	r0, r25
   197f8:	00 0c       	add	r0, r0
   197fa:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   197fc:	bb 0b       	sbc	r27, r27
   197fe:	8f 3f       	cpi	r24, 0xFF	; 255
   19800:	91 05       	cpc	r25, r1
   19802:	a1 05       	cpc	r26, r1
   19804:	b1 05       	cpc	r27, r1
   19806:	09 f0       	breq	.+2      	; 0x1980a <lif_create_volume+0x2a4>
   19808:	0c f4       	brge	.+2      	; 0x1980c <lif_create_volume+0x2a6>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1980a:	82 c1       	rjmp	.+772    	; 0x19b10 <lif_create_volume+0x5aa>
   1980c:	ca 5e       	subi	r28, 0xEA	; 234
   1980e:	de 4f       	sbci	r29, 0xFE	; 254
   19810:	28 81       	ld	r18, Y
   19812:	39 81       	ldd	r19, Y+1	; 0x01
   19814:	4a 81       	ldd	r20, Y+2	; 0x02
   19816:	5b 81       	ldd	r21, Y+3	; 0x03
   19818:	c6 51       	subi	r28, 0x16	; 22
   1981a:	d1 40       	sbci	r29, 0x01	; 1
   1981c:	28 0f       	add	r18, r24
   1981e:	39 1f       	adc	r19, r25
   19820:	4a 1f       	adc	r20, r26
   19822:	5b 1f       	adc	r21, r27
   19824:	ca 5e       	subi	r28, 0xEA	; 234
   19826:	de 4f       	sbci	r29, 0xFE	; 254
   19828:	28 83       	st	Y, r18
   1982a:	39 83       	std	Y+1, r19	; 0x01
   1982c:	4a 83       	std	Y+2, r20	; 0x02
   1982e:	5b 83       	std	Y+3, r21	; 0x03
   19830:	c6 51       	subi	r28, 0x16	; 22
        printf("\tWrote: %ld\r", count);
   19832:	d1 40       	sbci	r29, 0x01	; 1
   19834:	c6 5e       	subi	r28, 0xE6	; 230
   19836:	de 4f       	sbci	r29, 0xFE	; 254
   19838:	88 81       	ld	r24, Y
   1983a:	99 81       	ldd	r25, Y+1	; 0x01
   1983c:	aa 81       	ldd	r26, Y+2	; 0x02
   1983e:	bb 81       	ldd	r27, Y+3	; 0x03
   19840:	ca 51       	subi	r28, 0x1A	; 26
   19842:	d1 40       	sbci	r29, 0x01	; 1
   19844:	ed b7       	in	r30, 0x3d	; 61
   19846:	fe b7       	in	r31, 0x3e	; 62
   19848:	84 83       	std	Z+4, r24	; 0x04
   1984a:	95 83       	std	Z+5, r25	; 0x05
   1984c:	a6 83       	std	Z+6, r26	; 0x06
   1984e:	b7 83       	std	Z+7, r27	; 0x07
   19850:	61 82       	std	Z+1, r6	; 0x01
   19852:	72 82       	std	Z+2, r7	; 0x02
   19854:	83 82       	std	Z+3, r8	; 0x03
   19856:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1985a:	c6 5e       	subi	r28, 0xE6	; 230
   1985c:	de 4f       	sbci	r29, 0xFE	; 254
   1985e:	28 81       	ld	r18, Y
   19860:	39 81       	ldd	r19, Y+1	; 0x01
   19862:	4a 81       	ldd	r20, Y+2	; 0x02
   19864:	5b 81       	ldd	r21, Y+3	; 0x03
   19866:	ca 51       	subi	r28, 0x1A	; 26
   19868:	d1 40       	sbci	r29, 0x01	; 1
   1986a:	2f 5f       	subi	r18, 0xFF	; 255
   1986c:	3f 4f       	sbci	r19, 0xFF	; 255
   1986e:	4f 4f       	sbci	r20, 0xFF	; 255
   19870:	5f 4f       	sbci	r21, 0xFF	; 255
   19872:	c6 5e       	subi	r28, 0xE6	; 230
   19874:	de 4f       	sbci	r29, 0xFE	; 254
   19876:	28 83       	st	Y, r18
   19878:	39 83       	std	Y+1, r19	; 0x01
   1987a:	4a 83       	std	Y+2, r20	; 0x02
   1987c:	5b 83       	std	Y+3, r21	; 0x03
   1987e:	ca 51       	subi	r28, 0x1A	; 26
   19880:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   19882:	9d cf       	rjmp	.-198    	; 0x197be <lif_create_volume+0x258>
   19884:	c7 01       	movw	r24, r14
   19886:	0e 94 e9 c3 	call	0x187d2	; 0x187d2 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   1988a:	8f ef       	ldi	r24, 0xFF	; 255
   1988c:	9f ef       	ldi	r25, 0xFF	; 255
   1988e:	f7 01       	movw	r30, r14
   19890:	e6 5a       	subi	r30, 0xA6	; 166
   19892:	ff 4f       	sbci	r31, 0xFF	; 255
   19894:	91 83       	std	Z+1, r25	; 0x01
   19896:	80 83       	st	Z, r24
   19898:	46 01       	movw	r8, r12
   1989a:	6e 01       	movw	r12, r28
   1989c:	9c ee       	ldi	r25, 0xEC	; 236
   1989e:	c9 1a       	sub	r12, r25
   198a0:	9e ef       	ldi	r25, 0xFE	; 254

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   198a2:	d9 0a       	sbc	r13, r25
   198a4:	b4 01       	movw	r22, r8
   198a6:	c7 01       	movw	r24, r14
   198a8:	0e 94 30 c2 	call	0x18460	; 0x18460 <lif_dir2str>
   198ac:	a0 e2       	ldi	r26, 0x20	; 32
   198ae:	8a 0e       	add	r8, r26

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   198b0:	91 1c       	adc	r9, r1
   198b2:	c8 14       	cp	r12, r8
   198b4:	d9 04       	cpc	r13, r9
   198b6:	b1 f7       	brne	.-20     	; 0x198a4 <lif_create_volume+0x33e>
   198b8:	a1 2c       	mov	r10, r1
   198ba:	b1 2c       	mov	r11, r1
   198bc:	65 01       	movw	r12, r10
   198be:	fe 01       	movw	r30, r28
   198c0:	74 96       	adiw	r30, 0x14	; 20
   198c2:	cc 5e       	subi	r28, 0xEC	; 236
   198c4:	de 4f       	sbci	r29, 0xFE	; 254
   198c6:	f9 83       	std	Y+1, r31	; 0x01
   198c8:	e8 83       	st	Y, r30
   198ca:	c4 51       	subi	r28, 0x14	; 20
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   198cc:	d1 40       	sbci	r29, 0x01	; 1
   198ce:	84 e6       	ldi	r24, 0x64	; 100
   198d0:	28 2e       	mov	r2, r24
   198d2:	31 2c       	mov	r3, r1
   198d4:	41 2c       	mov	r4, r1
            printf("\tWrote: %ld\r", count);
   198d6:	51 2c       	mov	r5, r1
   198d8:	8f e1       	ldi	r24, 0x1F	; 31
   198da:	99 e3       	ldi	r25, 0x39	; 57
   198dc:	3c 01       	movw	r6, r24
   198de:	81 2c       	mov	r8, r1
   198e0:	c6 5e       	subi	r28, 0xE6	; 230
   198e2:	de 4f       	sbci	r29, 0xFE	; 254
   198e4:	28 81       	ld	r18, Y
   198e6:	39 81       	ldd	r19, Y+1	; 0x01
   198e8:	4a 81       	ldd	r20, Y+2	; 0x02
   198ea:	5b 81       	ldd	r21, Y+3	; 0x03
   198ec:	ca 51       	subi	r28, 0x1A	; 26
   198ee:	d1 40       	sbci	r29, 0x01	; 1
   198f0:	2a 0d       	add	r18, r10
   198f2:	3b 1d       	adc	r19, r11
   198f4:	4c 1d       	adc	r20, r12
   198f6:	5d 1d       	adc	r21, r13
   198f8:	ce 5d       	subi	r28, 0xDE	; 222
   198fa:	de 4f       	sbci	r29, 0xFE	; 254
   198fc:	28 83       	st	Y, r18
   198fe:	39 83       	std	Y+1, r19	; 0x01
   19900:	4a 83       	std	Y+2, r20	; 0x02
   19902:	5b 83       	std	Y+3, r21	; 0x03
   19904:	c2 52       	subi	r28, 0x22	; 34
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19906:	d1 40       	sbci	r29, 0x01	; 1
   19908:	ca 5d       	subi	r28, 0xDA	; 218
   1990a:	de 4f       	sbci	r29, 0xFE	; 254
   1990c:	88 81       	ld	r24, Y
   1990e:	99 81       	ldd	r25, Y+1	; 0x01
   19910:	aa 81       	ldd	r26, Y+2	; 0x02
   19912:	bb 81       	ldd	r27, Y+3	; 0x03
   19914:	c6 52       	subi	r28, 0x26	; 38
   19916:	d1 40       	sbci	r29, 0x01	; 1
   19918:	a8 16       	cp	r10, r24
   1991a:	b9 06       	cpc	r11, r25
   1991c:	ca 06       	cpc	r12, r26
   1991e:	db 06       	cpc	r13, r27
   19920:	0c f0       	brlt	.+2      	; 0x19924 <lif_create_volume+0x3be>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19922:	58 c0       	rjmp	.+176    	; 0x199d4 <lif_create_volume+0x46e>
   19924:	00 e0       	ldi	r16, 0x00	; 0
   19926:	11 e0       	ldi	r17, 0x01	; 1
   19928:	ca 5e       	subi	r28, 0xEA	; 234
   1992a:	de 4f       	sbci	r29, 0xFE	; 254
   1992c:	28 81       	ld	r18, Y
   1992e:	39 81       	ldd	r19, Y+1	; 0x01
   19930:	4a 81       	ldd	r20, Y+2	; 0x02
   19932:	5b 81       	ldd	r21, Y+3	; 0x03
   19934:	c6 51       	subi	r28, 0x16	; 22
   19936:	d1 40       	sbci	r29, 0x01	; 1
   19938:	be 01       	movw	r22, r28
   1993a:	6c 5e       	subi	r22, 0xEC	; 236
   1993c:	7f 4f       	sbci	r23, 0xFF	; 255
   1993e:	c7 01       	movw	r24, r14
   19940:	0e 94 e7 bf 	call	0x17fce	; 0x17fce <lif_write>
   19944:	09 2e       	mov	r0, r25
   19946:	00 0c       	add	r0, r0
   19948:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1994a:	bb 0b       	sbc	r27, r27
   1994c:	8f 3f       	cpi	r24, 0xFF	; 255
   1994e:	91 05       	cpc	r25, r1
   19950:	a1 05       	cpc	r26, r1
   19952:	b1 05       	cpc	r27, r1
   19954:	09 f0       	breq	.+2      	; 0x19958 <lif_create_volume+0x3f2>
   19956:	0c f4       	brge	.+2      	; 0x1995a <lif_create_volume+0x3f4>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19958:	db c0       	rjmp	.+438    	; 0x19b10 <lif_create_volume+0x5aa>
   1995a:	ca 5e       	subi	r28, 0xEA	; 234
   1995c:	de 4f       	sbci	r29, 0xFE	; 254
   1995e:	28 81       	ld	r18, Y
   19960:	39 81       	ldd	r19, Y+1	; 0x01
   19962:	4a 81       	ldd	r20, Y+2	; 0x02
   19964:	5b 81       	ldd	r21, Y+3	; 0x03
   19966:	c6 51       	subi	r28, 0x16	; 22
   19968:	d1 40       	sbci	r29, 0x01	; 1
   1996a:	28 0f       	add	r18, r24
   1996c:	39 1f       	adc	r19, r25
   1996e:	4a 1f       	adc	r20, r26
   19970:	5b 1f       	adc	r21, r27
   19972:	ca 5e       	subi	r28, 0xEA	; 234
   19974:	de 4f       	sbci	r29, 0xFE	; 254
   19976:	28 83       	st	Y, r18
   19978:	39 83       	std	Y+1, r19	; 0x01
   1997a:	4a 83       	std	Y+2, r20	; 0x02
   1997c:	5b 83       	std	Y+3, r21	; 0x03
   1997e:	c6 51       	subi	r28, 0x16	; 22
        if((count % 100) == 0)
   19980:	d1 40       	sbci	r29, 0x01	; 1
   19982:	ce 5d       	subi	r28, 0xDE	; 222
   19984:	de 4f       	sbci	r29, 0xFE	; 254
   19986:	68 81       	ld	r22, Y
   19988:	79 81       	ldd	r23, Y+1	; 0x01
   1998a:	8a 81       	ldd	r24, Y+2	; 0x02
   1998c:	9b 81       	ldd	r25, Y+3	; 0x03
   1998e:	c2 52       	subi	r28, 0x22	; 34
   19990:	d1 40       	sbci	r29, 0x01	; 1
   19992:	a2 01       	movw	r20, r4
   19994:	91 01       	movw	r18, r2
   19996:	0e 94 84 e2 	call	0x1c508	; 0x1c508 <__divmodsi4>
   1999a:	67 2b       	or	r22, r23
   1999c:	68 2b       	or	r22, r24
   1999e:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   199a0:	99 f4       	brne	.+38     	; 0x199c8 <lif_create_volume+0x462>
   199a2:	ce 5d       	subi	r28, 0xDE	; 222
   199a4:	de 4f       	sbci	r29, 0xFE	; 254
   199a6:	88 81       	ld	r24, Y
   199a8:	99 81       	ldd	r25, Y+1	; 0x01
   199aa:	aa 81       	ldd	r26, Y+2	; 0x02
   199ac:	bb 81       	ldd	r27, Y+3	; 0x03
   199ae:	c2 52       	subi	r28, 0x22	; 34
   199b0:	d1 40       	sbci	r29, 0x01	; 1
   199b2:	ed b7       	in	r30, 0x3d	; 61
   199b4:	fe b7       	in	r31, 0x3e	; 62
   199b6:	84 83       	std	Z+4, r24	; 0x04
   199b8:	95 83       	std	Z+5, r25	; 0x05
   199ba:	a6 83       	std	Z+6, r26	; 0x06
   199bc:	b7 83       	std	Z+7, r27	; 0x07
   199be:	61 82       	std	Z+1, r6	; 0x01
   199c0:	72 82       	std	Z+2, r7	; 0x02
   199c2:	83 82       	std	Z+3, r8	; 0x03
   199c4:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   199c8:	ff ef       	ldi	r31, 0xFF	; 255
   199ca:	af 1a       	sub	r10, r31
   199cc:	bf 0a       	sbc	r11, r31
   199ce:	cf 0a       	sbc	r12, r31
   199d0:	df 0a       	sbc	r13, r31
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   199d2:	86 cf       	rjmp	.-244    	; 0x198e0 <lif_create_volume+0x37a>
   199d4:	80 e0       	ldi	r24, 0x00	; 0
   199d6:	91 e0       	ldi	r25, 0x01	; 1
   199d8:	cc 5e       	subi	r28, 0xEC	; 236
   199da:	de 4f       	sbci	r29, 0xFE	; 254
   199dc:	a8 81       	ld	r26, Y
   199de:	b9 81       	ldd	r27, Y+1	; 0x01
   199e0:	c4 51       	subi	r28, 0x14	; 20
   199e2:	d1 40       	sbci	r29, 0x01	; 1
   199e4:	fc 01       	movw	r30, r24
   199e6:	1d 92       	st	X+, r1
   199e8:	31 97       	sbiw	r30, 0x01	; 1
    for(i=0;i<filesectors;++i)
   199ea:	e9 f7       	brne	.-6      	; 0x199e6 <lif_create_volume+0x480>
   199ec:	81 2c       	mov	r8, r1
   199ee:	91 2c       	mov	r9, r1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   199f0:	54 01       	movw	r10, r8
   199f2:	82 e1       	ldi	r24, 0x12	; 18
   199f4:	99 e3       	ldi	r25, 0x39	; 57
   199f6:	9c 01       	movw	r18, r24
   199f8:	40 e0       	ldi	r20, 0x00	; 0
   199fa:	c6 5e       	subi	r28, 0xE6	; 230
   199fc:	de 4f       	sbci	r29, 0xFE	; 254
   199fe:	28 83       	st	Y, r18
   19a00:	39 83       	std	Y+1, r19	; 0x01
   19a02:	4a 83       	std	Y+2, r20	; 0x02
   19a04:	ca 51       	subi	r28, 0x1A	; 26
   19a06:	d1 40       	sbci	r29, 0x01	; 1
   19a08:	ce 5d       	subi	r28, 0xDE	; 222
   19a0a:	de 4f       	sbci	r29, 0xFE	; 254
   19a0c:	48 80       	ld	r4, Y
   19a0e:	59 80       	ldd	r5, Y+1	; 0x01
   19a10:	6a 80       	ldd	r6, Y+2	; 0x02
   19a12:	7b 80       	ldd	r7, Y+3	; 0x03
   19a14:	c2 52       	subi	r28, 0x22	; 34
   19a16:	d1 40       	sbci	r29, 0x01	; 1
   19a18:	48 0c       	add	r4, r8
   19a1a:	59 1c       	adc	r5, r9
   19a1c:	6a 1c       	adc	r6, r10
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19a1e:	7b 1c       	adc	r7, r11
   19a20:	c2 5e       	subi	r28, 0xE2	; 226
   19a22:	de 4f       	sbci	r29, 0xFE	; 254
   19a24:	28 81       	ld	r18, Y
   19a26:	39 81       	ldd	r19, Y+1	; 0x01
   19a28:	4a 81       	ldd	r20, Y+2	; 0x02
   19a2a:	5b 81       	ldd	r21, Y+3	; 0x03
   19a2c:	ce 51       	subi	r28, 0x1E	; 30
   19a2e:	d1 40       	sbci	r29, 0x01	; 1
   19a30:	82 16       	cp	r8, r18
   19a32:	93 06       	cpc	r9, r19
   19a34:	a4 06       	cpc	r10, r20
   19a36:	b5 06       	cpc	r11, r21
   19a38:	0c f0       	brlt	.+2      	; 0x19a3c <lif_create_volume+0x4d6>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19a3a:	53 c0       	rjmp	.+166    	; 0x19ae2 <lif_create_volume+0x57c>
   19a3c:	00 e0       	ldi	r16, 0x00	; 0
   19a3e:	11 e0       	ldi	r17, 0x01	; 1
   19a40:	ca 5e       	subi	r28, 0xEA	; 234
   19a42:	de 4f       	sbci	r29, 0xFE	; 254
   19a44:	28 81       	ld	r18, Y
   19a46:	39 81       	ldd	r19, Y+1	; 0x01
   19a48:	4a 81       	ldd	r20, Y+2	; 0x02
   19a4a:	5b 81       	ldd	r21, Y+3	; 0x03
   19a4c:	c6 51       	subi	r28, 0x16	; 22
   19a4e:	d1 40       	sbci	r29, 0x01	; 1
   19a50:	be 01       	movw	r22, r28
   19a52:	6c 5e       	subi	r22, 0xEC	; 236
   19a54:	7f 4f       	sbci	r23, 0xFF	; 255
   19a56:	c7 01       	movw	r24, r14
   19a58:	0e 94 e7 bf 	call	0x17fce	; 0x17fce <lif_write>
   19a5c:	09 2e       	mov	r0, r25
   19a5e:	00 0c       	add	r0, r0
   19a60:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19a62:	bb 0b       	sbc	r27, r27
   19a64:	8f 3f       	cpi	r24, 0xFF	; 255
   19a66:	91 05       	cpc	r25, r1
   19a68:	a1 05       	cpc	r26, r1
   19a6a:	b1 05       	cpc	r27, r1
   19a6c:	09 f0       	breq	.+2      	; 0x19a70 <lif_create_volume+0x50a>
   19a6e:	0c f4       	brge	.+2      	; 0x19a72 <lif_create_volume+0x50c>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19a70:	4f c0       	rjmp	.+158    	; 0x19b10 <lif_create_volume+0x5aa>
   19a72:	ca 5e       	subi	r28, 0xEA	; 234
   19a74:	de 4f       	sbci	r29, 0xFE	; 254
   19a76:	28 81       	ld	r18, Y
   19a78:	39 81       	ldd	r19, Y+1	; 0x01
   19a7a:	4a 81       	ldd	r20, Y+2	; 0x02
   19a7c:	5b 81       	ldd	r21, Y+3	; 0x03
   19a7e:	c6 51       	subi	r28, 0x16	; 22
   19a80:	d1 40       	sbci	r29, 0x01	; 1
   19a82:	28 0f       	add	r18, r24
   19a84:	39 1f       	adc	r19, r25
   19a86:	4a 1f       	adc	r20, r26
   19a88:	5b 1f       	adc	r21, r27
   19a8a:	ca 5e       	subi	r28, 0xEA	; 234
   19a8c:	de 4f       	sbci	r29, 0xFE	; 254
   19a8e:	28 83       	st	Y, r18
   19a90:	39 83       	std	Y+1, r19	; 0x01
   19a92:	4a 83       	std	Y+2, r20	; 0x02
   19a94:	5b 83       	std	Y+3, r21	; 0x03
   19a96:	c6 51       	subi	r28, 0x16	; 22
        if((count % 100) == 0)
   19a98:	d1 40       	sbci	r29, 0x01	; 1
   19a9a:	c3 01       	movw	r24, r6
   19a9c:	b2 01       	movw	r22, r4
   19a9e:	24 e6       	ldi	r18, 0x64	; 100
   19aa0:	30 e0       	ldi	r19, 0x00	; 0
   19aa2:	40 e0       	ldi	r20, 0x00	; 0
   19aa4:	50 e0       	ldi	r21, 0x00	; 0
   19aa6:	0e 94 84 e2 	call	0x1c508	; 0x1c508 <__divmodsi4>
   19aaa:	67 2b       	or	r22, r23
   19aac:	68 2b       	or	r22, r24
   19aae:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   19ab0:	91 f4       	brne	.+36     	; 0x19ad6 <lif_create_volume+0x570>
   19ab2:	ed b7       	in	r30, 0x3d	; 61
   19ab4:	fe b7       	in	r31, 0x3e	; 62
   19ab6:	44 82       	std	Z+4, r4	; 0x04
   19ab8:	55 82       	std	Z+5, r5	; 0x05
   19aba:	66 82       	std	Z+6, r6	; 0x06
   19abc:	77 82       	std	Z+7, r7	; 0x07
   19abe:	c6 5e       	subi	r28, 0xE6	; 230
   19ac0:	de 4f       	sbci	r29, 0xFE	; 254
   19ac2:	28 81       	ld	r18, Y
   19ac4:	39 81       	ldd	r19, Y+1	; 0x01
   19ac6:	4a 81       	ldd	r20, Y+2	; 0x02
   19ac8:	ca 51       	subi	r28, 0x1A	; 26
   19aca:	d1 40       	sbci	r29, 0x01	; 1
   19acc:	21 83       	std	Z+1, r18	; 0x01
   19ace:	32 83       	std	Z+2, r19	; 0x02
   19ad0:	43 83       	std	Z+3, r20	; 0x03
   19ad2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19ad6:	ff ef       	ldi	r31, 0xFF	; 255
   19ad8:	8f 1a       	sub	r8, r31
   19ada:	9f 0a       	sbc	r9, r31
   19adc:	af 0a       	sbc	r10, r31
   19ade:	bf 0a       	sbc	r11, r31
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   19ae0:	93 cf       	rjmp	.-218    	; 0x19a08 <lif_create_volume+0x4a2>
   19ae2:	ed b7       	in	r30, 0x3d	; 61
   19ae4:	fe b7       	in	r31, 0x3e	; 62
   19ae6:	44 82       	std	Z+4, r4	; 0x04
   19ae8:	55 82       	std	Z+5, r5	; 0x05
   19aea:	66 82       	std	Z+6, r6	; 0x06
   19aec:	77 82       	std	Z+7, r7	; 0x07
   19aee:	85 e0       	ldi	r24, 0x05	; 5
   19af0:	99 e3       	ldi	r25, 0x39	; 57
   19af2:	a0 e0       	ldi	r26, 0x00	; 0
   19af4:	81 83       	std	Z+1, r24	; 0x01
   19af6:	92 83       	std	Z+2, r25	; 0x02
   19af8:	a3 83       	std	Z+3, r26	; 0x03
   19afa:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   19afe:	8f ef       	ldi	r24, 0xFF	; 255
   19b00:	9f ef       	ldi	r25, 0xFF	; 255
   19b02:	f7 01       	movw	r30, r14
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   19b04:	91 a3       	std	Z+33, r25	; 0x21
   19b06:	80 a3       	std	Z+32, r24	; 0x20
   19b08:	c7 01       	movw	r24, r14
   19b0a:	38 d8       	rcall	.-3984   	; 0x18b7c <lif_check_volume>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19b0c:	89 2b       	or	r24, r25
   19b0e:	19 f4       	brne	.+6      	; 0x19b16 <lif_create_volume+0x5b0>
   19b10:	c7 01       	movw	r24, r14
   19b12:	b8 da       	rcall	.-2704   	; 0x19084 <lif_close_volume>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   19b14:	08 c0       	rjmp	.+16     	; 0x19b26 <lif_create_volume+0x5c0>
   19b16:	c7 01       	movw	r24, r14
   19b18:	1e dc       	rcall	.-1988   	; 0x19356 <lif_updatefree>
   19b1a:	6c 01       	movw	r12, r24
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19b1c:	89 2b       	or	r24, r25
   19b1e:	31 f4       	brne	.+12     	; 0x19b2c <lif_create_volume+0x5c6>
   19b20:	c7 01       	movw	r24, r14

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   19b22:	b0 da       	rcall	.-2720   	; 0x19084 <lif_close_volume>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   19b24:	04 c0       	rjmp	.+8      	; 0x19b2e <lif_create_volume+0x5c8>
   19b26:	c1 2c       	mov	r12, r1
   19b28:	d1 2c       	mov	r13, r1
   19b2a:	01 c0       	rjmp	.+2      	; 0x19b2e <lif_create_volume+0x5c8>
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   19b2c:	67 01       	movw	r12, r14
   19b2e:	c6 01       	movw	r24, r12
   19b30:	c7 5d       	subi	r28, 0xD7	; 215
   19b32:	de 4f       	sbci	r29, 0xFE	; 254
   19b34:	e2 e1       	ldi	r30, 0x12	; 18
   19b36:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

00019b3a <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   19b3a:	ad e1       	ldi	r26, 0x1D	; 29
   19b3c:	b0 e0       	ldi	r27, 0x00	; 0
   19b3e:	e3 ea       	ldi	r30, 0xA3	; 163
   19b40:	fd ec       	ldi	r31, 0xCD	; 205
   19b42:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
   19b46:	9d 8f       	std	Y+29, r25	; 0x1d
   19b48:	8c 8f       	std	Y+28, r24	; 0x1c
   19b4a:	4a 01       	movw	r8, r20
   19b4c:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   19b4e:	fc 01       	movw	r30, r24
   19b50:	c4 84       	ldd	r12, Z+12	; 0x0c
   19b52:	d5 84       	ldd	r13, Z+13	; 0x0d
   19b54:	e6 84       	ldd	r14, Z+14	; 0x0e

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   19b56:	f7 84       	ldd	r15, Z+15	; 0x0f
   19b58:	fe db       	rcall	.-2052   	; 0x19356 <lif_updatefree>
   19b5a:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19b5c:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19b5e:	40 8d       	ldd	r20, Z+24	; 0x18
   19b60:	51 8d       	ldd	r21, Z+25	; 0x19
   19b62:	62 8d       	ldd	r22, Z+26	; 0x1a
   19b64:	73 8d       	ldd	r23, Z+27	; 0x1b
   19b66:	89 2b       	or	r24, r25
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   19b68:	99 f4       	brne	.+38     	; 0x19b90 <lif_newdir+0x56>
   19b6a:	ed b7       	in	r30, 0x3d	; 61
   19b6c:	fe b7       	in	r31, 0x3e	; 62
   19b6e:	80 86       	std	Z+8, r8	; 0x08
   19b70:	91 86       	std	Z+9, r9	; 0x09
   19b72:	a2 86       	std	Z+10, r10	; 0x0a
   19b74:	b3 86       	std	Z+11, r11	; 0x0b
   19b76:	44 83       	std	Z+4, r20	; 0x04
   19b78:	55 83       	std	Z+5, r21	; 0x05
   19b7a:	66 83       	std	Z+6, r22	; 0x06
   19b7c:	77 83       	std	Z+7, r23	; 0x07
   19b7e:	86 e2       	ldi	r24, 0x26	; 38
   19b80:	98 e3       	ldi	r25, 0x38	; 56
   19b82:	a0 e0       	ldi	r26, 0x00	; 0
   19b84:	81 83       	std	Z+1, r24	; 0x01
   19b86:	92 83       	std	Z+2, r25	; 0x02
   19b88:	a3 83       	std	Z+3, r26	; 0x03
   19b8a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   19b8e:	2f c1       	rjmp	.+606    	; 0x19dee <lif_newdir+0x2b4>
   19b90:	48 15       	cp	r20, r8
   19b92:	59 05       	cpc	r21, r9
   19b94:	6a 05       	cpc	r22, r10
   19b96:	7b 05       	cpc	r23, r11
   19b98:	c4 f0       	brlt	.+48     	; 0x19bca <lif_newdir+0x90>
   19b9a:	44 24       	eor	r4, r4
   19b9c:	43 94       	inc	r4
   19b9e:	51 2c       	mov	r5, r1
   19ba0:	61 2c       	mov	r6, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19ba2:	71 2c       	mov	r7, r1
   19ba4:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19ba6:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19ba8:	86 5a       	subi	r24, 0xA6	; 166
   19baa:	9f 4f       	sbci	r25, 0xFF	; 255
   19bac:	9d 8b       	std	Y+21, r25	; 0x15
   19bae:	8c 8b       	std	Y+20, r24	; 0x14
   19bb0:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19bb2:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19bb4:	e4 5a       	subi	r30, 0xA4	; 164
   19bb6:	ff 4f       	sbci	r31, 0xFF	; 255
   19bb8:	fb 8b       	std	Y+19, r31	; 0x13
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19bba:	ea 8b       	std	Y+18, r30	; 0x12
   19bbc:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19bbe:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19bc0:	80 5a       	subi	r24, 0xA0	; 160
   19bc2:	9f 4f       	sbci	r25, 0xFF	; 255
   19bc4:	9f 8b       	std	Y+23, r25	; 0x17
   19bc6:	8e 8b       	std	Y+22, r24	; 0x16
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   19bc8:	21 c0       	rjmp	.+66     	; 0x19c0c <lif_newdir+0xd2>
   19bca:	ed b7       	in	r30, 0x3d	; 61
   19bcc:	fe b7       	in	r31, 0x3e	; 62
   19bce:	44 83       	std	Z+4, r20	; 0x04
   19bd0:	55 83       	std	Z+5, r21	; 0x05
   19bd2:	66 83       	std	Z+6, r22	; 0x06
   19bd4:	77 83       	std	Z+7, r23	; 0x07
   19bd6:	8d ef       	ldi	r24, 0xFD	; 253
   19bd8:	97 e3       	ldi	r25, 0x37	; 55
   19bda:	a0 e0       	ldi	r26, 0x00	; 0
   19bdc:	81 83       	std	Z+1, r24	; 0x01
   19bde:	92 83       	std	Z+2, r25	; 0x02
   19be0:	a3 83       	std	Z+3, r26	; 0x03
   19be2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19be6:	03 c1       	rjmp	.+518    	; 0x19dee <lif_newdir+0x2b4>
   19be8:	ec 89       	ldd	r30, Y+20	; 0x14
   19bea:	fd 89       	ldd	r31, Y+21	; 0x15
   19bec:	80 81       	ld	r24, Z
   19bee:	91 81       	ldd	r25, Z+1	; 0x01
   19bf0:	8f 3f       	cpi	r24, 0xFF	; 255
   19bf2:	ff ef       	ldi	r31, 0xFF	; 255
   19bf4:	9f 07       	cpc	r25, r31
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   19bf6:	a1 f0       	breq	.+40     	; 0x19c20 <lif_newdir+0xe6>
   19bf8:	89 2b       	or	r24, r25
   19bfa:	09 f0       	breq	.+2      	; 0x19bfe <lif_newdir+0xc4>
        {
            if(freestate == 0)
   19bfc:	ce c0       	rjmp	.+412    	; 0x19d9a <lif_newdir+0x260>
   19bfe:	61 14       	cp	r6, r1
   19c00:	71 04       	cpc	r7, r1
   19c02:	09 f4       	brne	.+2      	; 0x19c06 <lif_newdir+0xcc>
   19c04:	c1 c0       	rjmp	.+386    	; 0x19d88 <lif_newdir+0x24e>
   19c06:	ff ef       	ldi	r31, 0xFF	; 255
   19c08:	4f 1a       	sub	r4, r31
   19c0a:	5f 0a       	sbc	r5, r31
   19c0c:	82 01       	movw	r16, r4
   19c0e:	01 50       	subi	r16, 0x01	; 1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   19c10:	11 09       	sbc	r17, r1
   19c12:	b8 01       	movw	r22, r16
   19c14:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19c16:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19c18:	c3 da       	rcall	.-2682   	; 0x191a0 <lif_readdirindex>
   19c1a:	89 2b       	or	r24, r25
   19c1c:	29 f7       	brne	.-54     	; 0x19be8 <lif_newdir+0xae>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   19c1e:	e7 c0       	rjmp	.+462    	; 0x19dee <lif_newdir+0x2b4>
   19c20:	22 e0       	ldi	r18, 0x02	; 2
   19c22:	62 16       	cp	r6, r18
   19c24:	71 04       	cpc	r7, r1
   19c26:	09 f0       	breq	.+2      	; 0x19c2a <lif_newdir+0xf0>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   19c28:	46 c0       	rjmp	.+140    	; 0x19cb6 <lif_newdir+0x17c>
   19c2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19c2c:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19c2e:	0e 94 e9 c3 	call	0x187d2	; 0x187d2 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   19c32:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19c34:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19c36:	e4 5a       	subi	r30, 0xA4	; 164
   19c38:	ff 4f       	sbci	r31, 0xFF	; 255
   19c3a:	88 8d       	ldd	r24, Y+24	; 0x18
   19c3c:	80 83       	st	Z, r24
   19c3e:	99 8d       	ldd	r25, Y+25	; 0x19
   19c40:	91 83       	std	Z+1, r25	; 0x01
   19c42:	2a 8d       	ldd	r18, Y+26	; 0x1a
   19c44:	22 83       	std	Z+2, r18	; 0x02
   19c46:	8b 8d       	ldd	r24, Y+27	; 0x1b
                LIF->DIR.FileSectors = sectors;
   19c48:	83 83       	std	Z+3, r24	; 0x03
   19c4a:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19c4c:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19c4e:	e0 5a       	subi	r30, 0xA0	; 160
   19c50:	ff 4f       	sbci	r31, 0xFF	; 255
   19c52:	80 82       	st	Z, r8
   19c54:	91 82       	std	Z+1, r9	; 0x01
   19c56:	a2 82       	std	Z+2, r10	; 0x02
                LIF->usedsectors += sectors;
   19c58:	b3 82       	std	Z+3, r11	; 0x03
   19c5a:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19c5c:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19c5e:	84 89       	ldd	r24, Z+20	; 0x14
   19c60:	95 89       	ldd	r25, Z+21	; 0x15
   19c62:	a6 89       	ldd	r26, Z+22	; 0x16
   19c64:	b7 89       	ldd	r27, Z+23	; 0x17
   19c66:	88 0d       	add	r24, r8
   19c68:	99 1d       	adc	r25, r9
   19c6a:	aa 1d       	adc	r26, r10
   19c6c:	bb 1d       	adc	r27, r11
   19c6e:	84 8b       	std	Z+20, r24	; 0x14
   19c70:	95 8b       	std	Z+21, r25	; 0x15
   19c72:	a6 8b       	std	Z+22, r26	; 0x16
                LIF->freesectors -= sectors;
   19c74:	b7 8b       	std	Z+23, r27	; 0x17
   19c76:	80 8d       	ldd	r24, Z+24	; 0x18
   19c78:	91 8d       	ldd	r25, Z+25	; 0x19
   19c7a:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19c7c:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19c7e:	88 19       	sub	r24, r8
   19c80:	99 09       	sbc	r25, r9
   19c82:	aa 09       	sbc	r26, r10
   19c84:	bb 09       	sbc	r27, r11
   19c86:	80 8f       	std	Z+24, r24	; 0x18
   19c88:	91 8f       	std	Z+25, r25	; 0x19
   19c8a:	a2 8f       	std	Z+26, r26	; 0x1a
                LIF->files++;
   19c8c:	b3 8f       	std	Z+27, r27	; 0x1b
   19c8e:	84 8d       	ldd	r24, Z+28	; 0x1c
   19c90:	95 8d       	ldd	r25, Z+29	; 0x1d
   19c92:	01 96       	adiw	r24, 0x01	; 1
   19c94:	95 8f       	std	Z+29, r25	; 0x1d
                LIF->purged--;
   19c96:	84 8f       	std	Z+28, r24	; 0x1c
   19c98:	86 8d       	ldd	r24, Z+30	; 0x1e
   19c9a:	97 8d       	ldd	r25, Z+31	; 0x1f
   19c9c:	01 97       	sbiw	r24, 0x01	; 1
   19c9e:	97 8f       	std	Z+31, r25	; 0x1f
                LIF->dirindex = freeindex;
   19ca0:	86 8f       	std	Z+30, r24	; 0x1e
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   19ca2:	20 a2       	std	Z+32, r2	; 0x20
   19ca4:	31 a2       	std	Z+33, r3	; 0x21
   19ca6:	b1 01       	movw	r22, r2
   19ca8:	cf 01       	movw	r24, r30
   19caa:	e1 da       	rcall	.-2622   	; 0x1926e <lif_writedirindex>
   19cac:	89 2b       	or	r24, r25
   19cae:	09 f4       	brne	.+2      	; 0x19cb2 <lif_newdir+0x178>
   19cb0:	9e c0       	rjmp	.+316    	; 0x19dee <lif_newdir+0x2b4>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   19cb2:	c1 01       	movw	r24, r2
   19cb4:	9e c0       	rjmp	.+316    	; 0x19df2 <lif_newdir+0x2b8>
   19cb6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19cba:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   19cbe:	92 ff       	sbrs	r25, 2
   19cc0:	1e c0       	rjmp	.+60     	; 0x19cfe <lif_newdir+0x1c4>
   19cc2:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19cc4:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19cc6:	80 8d       	ldd	r24, Z+24	; 0x18
   19cc8:	91 8d       	ldd	r25, Z+25	; 0x19
   19cca:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19ccc:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19cce:	ed b7       	in	r30, 0x3d	; 61
   19cd0:	fe b7       	in	r31, 0x3e	; 62
   19cd2:	86 87       	std	Z+14, r24	; 0x0e
   19cd4:	97 87       	std	Z+15, r25	; 0x0f
   19cd6:	a0 8b       	std	Z+16, r26	; 0x10
   19cd8:	b1 8b       	std	Z+17, r27	; 0x11
   19cda:	82 86       	std	Z+10, r8	; 0x0a
   19cdc:	93 86       	std	Z+11, r9	; 0x0b
   19cde:	a4 86       	std	Z+12, r10	; 0x0c
   19ce0:	b5 86       	std	Z+13, r11	; 0x0d
   19ce2:	c6 82       	std	Z+6, r12	; 0x06
   19ce4:	d7 82       	std	Z+7, r13	; 0x07
   19ce6:	e0 86       	std	Z+8, r14	; 0x08
   19ce8:	f1 86       	std	Z+9, r15	; 0x09
   19cea:	15 83       	std	Z+5, r17	; 0x05
   19cec:	04 83       	std	Z+4, r16	; 0x04
   19cee:	8c ea       	ldi	r24, 0xAC	; 172
   19cf0:	97 e3       	ldi	r25, 0x37	; 55
   19cf2:	a0 e0       	ldi	r26, 0x00	; 0
   19cf4:	81 83       	std	Z+1, r24	; 0x01
   19cf6:	92 83       	std	Z+2, r25	; 0x02
   19cf8:	a3 83       	std	Z+3, r26	; 0x03
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   19cfa:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   19cfe:	b8 01       	movw	r22, r16
   19d00:	6f 5f       	subi	r22, 0xFF	; 255
   19d02:	7f 4f       	sbci	r23, 0xFF	; 255
   19d04:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19d06:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19d08:	0e db       	rcall	.-2532   	; 0x19326 <lif_writedirEOF>
   19d0a:	89 2b       	or	r24, r25
            {
                break;
            }

            lif_dir_clear(LIF);
   19d0c:	09 f4       	brne	.+2      	; 0x19d10 <lif_newdir+0x1d6>
   19d0e:	6f c0       	rjmp	.+222    	; 0x19dee <lif_newdir+0x2b4>
   19d10:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19d12:	9d 8d       	ldd	r25, Y+29	; 0x1d
            LIF->DIR.FileStartSector = start;
   19d14:	0e 94 e9 c3 	call	0x187d2	; 0x187d2 <lif_dir_clear>
   19d18:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19d1a:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19d1c:	e4 5a       	subi	r30, 0xA4	; 164
   19d1e:	ff 4f       	sbci	r31, 0xFF	; 255
   19d20:	c0 82       	st	Z, r12
   19d22:	d1 82       	std	Z+1, r13	; 0x01
            LIF->DIR.FileSectors = sectors;
   19d24:	e2 82       	std	Z+2, r14	; 0x02
   19d26:	f3 82       	std	Z+3, r15	; 0x03
   19d28:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19d2a:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19d2c:	e0 5a       	subi	r30, 0xA0	; 160
   19d2e:	ff 4f       	sbci	r31, 0xFF	; 255
   19d30:	80 82       	st	Z, r8
   19d32:	91 82       	std	Z+1, r9	; 0x01
            LIF->usedsectors += sectors;
   19d34:	a2 82       	std	Z+2, r10	; 0x02
   19d36:	b3 82       	std	Z+3, r11	; 0x03
   19d38:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19d3a:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19d3c:	84 89       	ldd	r24, Z+20	; 0x14
   19d3e:	95 89       	ldd	r25, Z+21	; 0x15
   19d40:	a6 89       	ldd	r26, Z+22	; 0x16
   19d42:	b7 89       	ldd	r27, Z+23	; 0x17
   19d44:	88 0d       	add	r24, r8
   19d46:	99 1d       	adc	r25, r9
   19d48:	aa 1d       	adc	r26, r10
   19d4a:	bb 1d       	adc	r27, r11
   19d4c:	84 8b       	std	Z+20, r24	; 0x14
   19d4e:	95 8b       	std	Z+21, r25	; 0x15
            LIF->freesectors -= sectors;
   19d50:	a6 8b       	std	Z+22, r26	; 0x16
   19d52:	b7 8b       	std	Z+23, r27	; 0x17
   19d54:	80 8d       	ldd	r24, Z+24	; 0x18
   19d56:	91 8d       	ldd	r25, Z+25	; 0x19
   19d58:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19d5a:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19d5c:	88 19       	sub	r24, r8
   19d5e:	99 09       	sbc	r25, r9
   19d60:	aa 09       	sbc	r26, r10
   19d62:	bb 09       	sbc	r27, r11
   19d64:	80 8f       	std	Z+24, r24	; 0x18
   19d66:	91 8f       	std	Z+25, r25	; 0x19
            LIF->files++;
   19d68:	a2 8f       	std	Z+26, r26	; 0x1a
   19d6a:	b3 8f       	std	Z+27, r27	; 0x1b
   19d6c:	84 8d       	ldd	r24, Z+28	; 0x1c
   19d6e:	95 8d       	ldd	r25, Z+29	; 0x1d
            LIF->dirindex = index;
   19d70:	01 96       	adiw	r24, 0x01	; 1
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   19d72:	95 8f       	std	Z+29, r25	; 0x1d
   19d74:	84 8f       	std	Z+28, r24	; 0x1c
   19d76:	11 a3       	std	Z+33, r17	; 0x21
   19d78:	00 a3       	std	Z+32, r16	; 0x20
   19d7a:	b8 01       	movw	r22, r16
   19d7c:	cf 01       	movw	r24, r30
   19d7e:	77 da       	rcall	.-2834   	; 0x1926e <lif_writedirindex>
   19d80:	89 2b       	or	r24, r25
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   19d82:	a9 f1       	breq	.+106    	; 0x19dee <lif_newdir+0x2b4>
   19d84:	c8 01       	movw	r24, r16
   19d86:	35 c0       	rjmp	.+106    	; 0x19df2 <lif_newdir+0x2b8>
   19d88:	c8 8e       	std	Y+24, r12	; 0x18
   19d8a:	d9 8e       	std	Y+25, r13	; 0x19
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   19d8c:	ea 8e       	std	Y+26, r14	; 0x1a
   19d8e:	fb 8e       	std	Y+27, r15	; 0x1b
   19d90:	18 01       	movw	r2, r16
            }
            ++index;
            continue;
   19d92:	66 24       	eor	r6, r6
        }

// VALID record
        if(freestate == 1)
   19d94:	63 94       	inc	r6
   19d96:	71 2c       	mov	r7, r1
   19d98:	36 cf       	rjmp	.-404    	; 0x19c06 <lif_newdir+0xcc>
   19d9a:	f1 e0       	ldi	r31, 0x01	; 1
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   19d9c:	6f 16       	cp	r6, r31
   19d9e:	71 04       	cpc	r7, r1
   19da0:	a9 f4       	brne	.+42     	; 0x19dcc <lif_newdir+0x292>
   19da2:	ea 89       	ldd	r30, Y+18	; 0x12
   19da4:	fb 89       	ldd	r31, Y+19	; 0x13
   19da6:	80 81       	ld	r24, Z
   19da8:	91 81       	ldd	r25, Z+1	; 0x01
   19daa:	a2 81       	ldd	r26, Z+2	; 0x02
   19dac:	b3 81       	ldd	r27, Z+3	; 0x03
   19dae:	8c 19       	sub	r24, r12
   19db0:	9d 09       	sbc	r25, r13
   19db2:	ae 09       	sbc	r26, r14
   19db4:	bf 09       	sbc	r27, r15
   19db6:	88 15       	cp	r24, r8
   19db8:	99 05       	cpc	r25, r9
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   19dba:	aa 05       	cpc	r26, r10
   19dbc:	bb 05       	cpc	r27, r11
   19dbe:	1c f4       	brge	.+6      	; 0x19dc6 <lif_newdir+0x28c>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   19dc0:	61 2c       	mov	r6, r1
   19dc2:	71 2c       	mov	r7, r1
   19dc4:	03 c0       	rjmp	.+6      	; 0x19dcc <lif_newdir+0x292>
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19dc6:	82 e0       	ldi	r24, 0x02	; 2
   19dc8:	68 2e       	mov	r6, r24
   19dca:	71 2c       	mov	r7, r1
   19dcc:	ea 89       	ldd	r30, Y+18	; 0x12
   19dce:	fb 89       	ldd	r31, Y+19	; 0x13
   19dd0:	c0 80       	ld	r12, Z
   19dd2:	d1 80       	ldd	r13, Z+1	; 0x01
   19dd4:	e2 80       	ldd	r14, Z+2	; 0x02
   19dd6:	f3 80       	ldd	r15, Z+3	; 0x03
   19dd8:	ee 89       	ldd	r30, Y+22	; 0x16
   19dda:	ff 89       	ldd	r31, Y+23	; 0x17
   19ddc:	80 81       	ld	r24, Z
   19dde:	91 81       	ldd	r25, Z+1	; 0x01
   19de0:	a2 81       	ldd	r26, Z+2	; 0x02
   19de2:	b3 81       	ldd	r27, Z+3	; 0x03
   19de4:	c8 0e       	add	r12, r24
   19de6:	d9 1e       	adc	r13, r25
        ++index;
    }
// ERROR
    return(-1);
   19de8:	ea 1e       	adc	r14, r26
   19dea:	fb 1e       	adc	r15, r27
}
   19dec:	0c cf       	rjmp	.-488    	; 0x19c06 <lif_newdir+0xcc>
   19dee:	8f ef       	ldi	r24, 0xFF	; 255
   19df0:	9f ef       	ldi	r25, 0xFF	; 255
   19df2:	6d 96       	adiw	r28, 0x1d	; 29
   19df4:	e2 e1       	ldi	r30, 0x12	; 18
   19df6:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

00019dfa <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   19dfa:	a9 e3       	ldi	r26, 0x39	; 57
   19dfc:	b1 e0       	ldi	r27, 0x01	; 1
   19dfe:	e3 e0       	ldi	r30, 0x03	; 3
   19e00:	ff ec       	ldi	r31, 0xCF	; 207
   19e02:	0c 94 d5 e2 	jmp	0x1c5aa	; 0x1c5aa <__prologue_saves__+0xc>
   19e06:	6c 01       	movw	r12, r24
   19e08:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   19e0a:	be 01       	movw	r22, r28
   19e0c:	66 5f       	subi	r22, 0xF6	; 246
   19e0e:	7e 4f       	sbci	r23, 0xFE	; 254
   19e10:	0e 94 3c bf 	call	0x17e78	; 0x17e78 <lif_stat>
   19e14:	5c 01       	movw	r10, r24
    if(sp == NULL)
   19e16:	00 97       	sbiw	r24, 0x00	; 0
   19e18:	f9 f0       	breq	.+62     	; 0x19e58 <lif_open_volume+0x5e>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   19e1a:	fc 01       	movw	r30, r24
   19e1c:	80 8d       	ldd	r24, Z+24	; 0x18
   19e1e:	91 8d       	ldd	r25, Z+25	; 0x19
   19e20:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19e22:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19e24:	81 15       	cp	r24, r1
   19e26:	f2 e0       	ldi	r31, 0x02	; 2
   19e28:	9f 07       	cpc	r25, r31
   19e2a:	a1 05       	cpc	r26, r1
   19e2c:	b1 05       	cpc	r27, r1
   19e2e:	b8 f4       	brcc	.+46     	; 0x19e5e <lif_open_volume+0x64>
    {
        if(debuglevel & GPIB_PPR)
   19e30:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19e34:	21 ff       	sbrs	r18, 1
   19e36:	10 c0       	rjmp	.+32     	; 0x19e58 <lif_open_volume+0x5e>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   19e38:	ed b7       	in	r30, 0x3d	; 61
   19e3a:	fe b7       	in	r31, 0x3e	; 62
   19e3c:	86 83       	std	Z+6, r24	; 0x06
   19e3e:	97 83       	std	Z+7, r25	; 0x07
   19e40:	a0 87       	std	Z+8, r26	; 0x08
   19e42:	b1 87       	std	Z+9, r27	; 0x09
   19e44:	d5 82       	std	Z+5, r13	; 0x05
   19e46:	c4 82       	std	Z+4, r12	; 0x04
   19e48:	8d e6       	ldi	r24, 0x6D	; 109
   19e4a:	97 e3       	ldi	r25, 0x37	; 55
   19e4c:	a0 e0       	ldi	r26, 0x00	; 0
   19e4e:	81 83       	std	Z+1, r24	; 0x01
   19e50:	92 83       	std	Z+2, r25	; 0x02
   19e52:	a3 83       	std	Z+3, r26	; 0x03
   19e54:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        return(NULL);
   19e58:	00 e0       	ldi	r16, 0x00	; 0
   19e5a:	10 e0       	ldi	r17, 0x00	; 0
   19e5c:	c2 c0       	rjmp	.+388    	; 0x19fe2 <lif_open_volume+0x1e8>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   19e5e:	64 e7       	ldi	r22, 0x74	; 116
   19e60:	70 e0       	ldi	r23, 0x00	; 0
   19e62:	80 e0       	ldi	r24, 0x00	; 0
   19e64:	90 e0       	ldi	r25, 0x00	; 0
   19e66:	0e 94 a8 be 	call	0x17d50	; 0x17d50 <lif_calloc>
   19e6a:	7c 01       	movw	r14, r24
    if(!LIF)
   19e6c:	89 2b       	or	r24, r25
   19e6e:	a1 f3       	breq	.-24     	; 0x19e58 <lif_open_volume+0x5e>
        return(NULL);

    LIF->name = lif_stralloc(name);
   19e70:	c6 01       	movw	r24, r12
   19e72:	0e 94 f3 be 	call	0x17de6	; 0x17de6 <lif_stralloc>
   19e76:	f7 01       	movw	r30, r14
   19e78:	91 83       	std	Z+1, r25	; 0x01
   19e7a:	80 83       	st	Z, r24
    if(!LIF->name)
   19e7c:	00 97       	sbiw	r24, 0x00	; 0
   19e7e:	09 f4       	brne	.+2      	; 0x19e82 <lif_open_volume+0x88>
   19e80:	5a c0       	rjmp	.+180    	; 0x19f36 <lif_open_volume+0x13c>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   19e82:	f5 01       	movw	r30, r10
   19e84:	80 8c       	ldd	r8, Z+24	; 0x18
   19e86:	91 8c       	ldd	r9, Z+25	; 0x19
   19e88:	a2 8c       	ldd	r10, Z+26	; 0x1a
   19e8a:	b3 8c       	ldd	r11, Z+27	; 0x1b
   19e8c:	f7 01       	movw	r30, r14
   19e8e:	80 86       	std	Z+8, r8	; 0x08
   19e90:	91 86       	std	Z+9, r9	; 0x09
   19e92:	a2 86       	std	Z+10, r10	; 0x0a
   19e94:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19e96:	77 27       	eor	r23, r23
   19e98:	6b 2d       	mov	r22, r11
   19e9a:	5a 2d       	mov	r21, r10
   19e9c:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19e9e:	88 20       	and	r8, r8
   19ea0:	21 f0       	breq	.+8      	; 0x19eaa <lif_open_volume+0xb0>
        ++sectors;
   19ea2:	4f 5f       	subi	r20, 0xFF	; 255
   19ea4:	5f 4f       	sbci	r21, 0xFF	; 255
   19ea6:	6f 4f       	sbci	r22, 0xFF	; 255
   19ea8:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   19eaa:	f7 01       	movw	r30, r14
   19eac:	44 83       	std	Z+4, r20	; 0x04
   19eae:	55 83       	std	Z+5, r21	; 0x05
   19eb0:	66 83       	std	Z+6, r22	; 0x06
   19eb2:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   19eb4:	b8 01       	movw	r22, r16
   19eb6:	0e 94 12 bf 	call	0x17e24	; 0x17e24 <lif_open>
   19eba:	f7 01       	movw	r30, r14
   19ebc:	93 83       	std	Z+3, r25	; 0x03
   19ebe:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   19ec0:	89 2b       	or	r24, r25
   19ec2:	c9 f1       	breq	.+114    	; 0x19f36 <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   19ec4:	00 e0       	ldi	r16, 0x00	; 0
   19ec6:	11 e0       	ldi	r17, 0x01	; 1
   19ec8:	20 e0       	ldi	r18, 0x00	; 0
   19eca:	30 e0       	ldi	r19, 0x00	; 0
   19ecc:	a9 01       	movw	r20, r18
   19ece:	be 01       	movw	r22, r28
   19ed0:	66 5f       	subi	r22, 0xF6	; 246
   19ed2:	7f 4f       	sbci	r23, 0xFF	; 255
   19ed4:	c7 01       	movw	r24, r14
   19ed6:	0e 94 96 bf 	call	0x17f2c	; 0x17f2c <lif_read>
   19eda:	6f 3f       	cpi	r22, 0xFF	; 255
   19edc:	71 05       	cpc	r23, r1
   19ede:	81 05       	cpc	r24, r1
   19ee0:	91 05       	cpc	r25, r1
   19ee2:	09 f0       	breq	.+2      	; 0x19ee6 <lif_open_volume+0xec>
   19ee4:	5c f4       	brge	.+22     	; 0x19efc <lif_open_volume+0x102>
    {
        if(debuglevel & GPIB_PPR)
   19ee6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19eea:	81 ff       	sbrs	r24, 1
   19eec:	24 c0       	rjmp	.+72     	; 0x19f36 <lif_open_volume+0x13c>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   19eee:	ed b7       	in	r30, 0x3d	; 61
   19ef0:	fe b7       	in	r31, 0x3e	; 62
   19ef2:	d5 82       	std	Z+5, r13	; 0x05
   19ef4:	c4 82       	std	Z+4, r12	; 0x04
   19ef6:	87 e3       	ldi	r24, 0x37	; 55
   19ef8:	97 e3       	ldi	r25, 0x37	; 55
   19efa:	17 c0       	rjmp	.+46     	; 0x19f2a <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   19efc:	b7 01       	movw	r22, r14
   19efe:	ce 01       	movw	r24, r28
   19f00:	0a 96       	adiw	r24, 0x0a	; 10
   19f02:	0e 94 b2 c1 	call	0x18364	; 0x18364 <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   19f06:	c7 01       	movw	r24, r14
   19f08:	0e 94 be c5 	call	0x18b7c	; 0x18b7c <lif_check_volume>
   19f0c:	89 2b       	or	r24, r25
   19f0e:	b1 f4       	brne	.+44     	; 0x19f3c <lif_open_volume+0x142>
    {
        if(debuglevel & GPIB_PPR)
   19f10:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19f14:	81 ff       	sbrs	r24, 1
   19f16:	0f c0       	rjmp	.+30     	; 0x19f36 <lif_open_volume+0x13c>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   19f18:	f7 01       	movw	r30, r14
   19f1a:	80 81       	ld	r24, Z
   19f1c:	91 81       	ldd	r25, Z+1	; 0x01
   19f1e:	ed b7       	in	r30, 0x3d	; 61
   19f20:	fe b7       	in	r31, 0x3e	; 62
   19f22:	95 83       	std	Z+5, r25	; 0x05
   19f24:	84 83       	std	Z+4, r24	; 0x04
   19f26:	84 e0       	ldi	r24, 0x04	; 4
   19f28:	97 e3       	ldi	r25, 0x37	; 55
   19f2a:	a0 e0       	ldi	r26, 0x00	; 0
   19f2c:	81 83       	std	Z+1, r24	; 0x01
   19f2e:	92 83       	std	Z+2, r25	; 0x02
   19f30:	a3 83       	std	Z+3, r26	; 0x03
   19f32:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19f36:	c7 01       	movw	r24, r14
   19f38:	a5 d8       	rcall	.-3766   	; 0x19084 <lif_close_volume>
   19f3a:	8e cf       	rjmp	.-228    	; 0x19e58 <lif_open_volume+0x5e>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   19f3c:	f7 01       	movw	r30, r14
   19f3e:	45 a5       	ldd	r20, Z+45	; 0x2d
   19f40:	56 a5       	ldd	r21, Z+46	; 0x2e
   19f42:	67 a5       	ldd	r22, Z+47	; 0x2f
   19f44:	70 a9       	ldd	r23, Z+48	; 0x30
   19f46:	85 a9       	ldd	r24, Z+53	; 0x35
   19f48:	96 a9       	ldd	r25, Z+54	; 0x36
   19f4a:	a7 a9       	ldd	r26, Z+55	; 0x37
   19f4c:	b0 ad       	ldd	r27, Z+56	; 0x38
   19f4e:	48 0f       	add	r20, r24
   19f50:	59 1f       	adc	r21, r25
   19f52:	6a 1f       	adc	r22, r26
   19f54:	7b 1f       	adc	r23, r27
   19f56:	44 87       	std	Z+12, r20	; 0x0c
   19f58:	55 87       	std	Z+13, r21	; 0x0d
   19f5a:	66 87       	std	Z+14, r22	; 0x0e
   19f5c:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   19f5e:	84 81       	ldd	r24, Z+4	; 0x04
   19f60:	95 81       	ldd	r25, Z+5	; 0x05
   19f62:	a6 81       	ldd	r26, Z+6	; 0x06
   19f64:	b7 81       	ldd	r27, Z+7	; 0x07
   19f66:	84 1b       	sub	r24, r20
   19f68:	95 0b       	sbc	r25, r21
   19f6a:	a6 0b       	sbc	r26, r22
   19f6c:	b7 0b       	sbc	r27, r23
   19f6e:	80 8b       	std	Z+16, r24	; 0x10
   19f70:	91 8b       	std	Z+17, r25	; 0x11
   19f72:	a2 8b       	std	Z+18, r26	; 0x12
   19f74:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   19f76:	80 8f       	std	Z+24, r24	; 0x18
   19f78:	91 8f       	std	Z+25, r25	; 0x19
   19f7a:	a2 8f       	std	Z+26, r26	; 0x1a
   19f7c:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   19f7e:	14 8a       	std	Z+20, r1	; 0x14
   19f80:	15 8a       	std	Z+21, r1	; 0x15
   19f82:	16 8a       	std	Z+22, r1	; 0x16
   19f84:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   19f86:	17 8e       	std	Z+31, r1	; 0x1f
   19f88:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   19f8a:	15 8e       	std	Z+29, r1	; 0x1d
   19f8c:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   19f8e:	11 a2       	std	Z+33, r1	; 0x21
   19f90:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19f92:	13 a2       	std	Z+35, r1	; 0x23

    if( lif_updatefree(LIF) == NULL)
   19f94:	12 a2       	std	Z+34, r1	; 0x22
   19f96:	c7 01       	movw	r24, r14
   19f98:	de d9       	rcall	.-3140   	; 0x19356 <lif_updatefree>
   19f9a:	8c 01       	movw	r16, r24
   19f9c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19fa0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19fa4:	01 15       	cp	r16, r1
   19fa6:	11 05       	cpc	r17, r1
    {
        if(debuglevel & GPIB_PPR)
   19fa8:	a1 f4       	brne	.+40     	; 0x19fd2 <lif_open_volume+0x1d8>
   19faa:	81 ff       	sbrs	r24, 1
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   19fac:	0f c0       	rjmp	.+30     	; 0x19fcc <lif_open_volume+0x1d2>
   19fae:	f7 01       	movw	r30, r14
   19fb0:	80 81       	ld	r24, Z
   19fb2:	91 81       	ldd	r25, Z+1	; 0x01
   19fb4:	ed b7       	in	r30, 0x3d	; 61
   19fb6:	fe b7       	in	r31, 0x3e	; 62
   19fb8:	95 83       	std	Z+5, r25	; 0x05
   19fba:	84 83       	std	Z+4, r24	; 0x04
   19fbc:	81 ed       	ldi	r24, 0xD1	; 209
   19fbe:	96 e3       	ldi	r25, 0x36	; 54
   19fc0:	a0 e0       	ldi	r26, 0x00	; 0
   19fc2:	81 83       	std	Z+1, r24	; 0x01
   19fc4:	92 83       	std	Z+2, r25	; 0x02
   19fc6:	a3 83       	std	Z+3, r26	; 0x03
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19fc8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   19fcc:	c7 01       	movw	r24, r14
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & GPIB_PPR)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   19fce:	5a d8       	rcall	.-3916   	; 0x19084 <lif_close_volume>
    }

    if(debuglevel &LIF_DEBUG)
   19fd0:	08 c0       	rjmp	.+16     	; 0x19fe2 <lif_open_volume+0x1e8>
   19fd2:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF, "Volume Listing");
   19fd4:	05 c0       	rjmp	.+10     	; 0x19fe0 <lif_open_volume+0x1e6>
   19fd6:	62 e5       	ldi	r22, 0x52	; 82
   19fd8:	76 e1       	ldi	r23, 0x16	; 22
   19fda:	c7 01       	movw	r24, r14
   19fdc:	0e 94 f8 c3 	call	0x187f0	; 0x187f0 <lif_dump_vol>
    return( LIF );
}
   19fe0:	87 01       	movw	r16, r14
   19fe2:	c8 01       	movw	r24, r16
   19fe4:	c7 5c       	subi	r28, 0xC7	; 199
   19fe6:	de 4f       	sbci	r29, 0xFE	; 254
   19fe8:	ec e0       	ldi	r30, 0x0C	; 12
   19fea:	0c 94 f1 e2 	jmp	0x1c5e2	; 0x1c5e2 <__epilogue_restores__+0xc>

00019fee <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   19fee:	2f 92       	push	r2
   19ff0:	3f 92       	push	r3
   19ff2:	4f 92       	push	r4
   19ff4:	5f 92       	push	r5
   19ff6:	6f 92       	push	r6
   19ff8:	8f 92       	push	r8
   19ffa:	9f 92       	push	r9
   19ffc:	af 92       	push	r10
   19ffe:	bf 92       	push	r11
   1a000:	cf 92       	push	r12
   1a002:	df 92       	push	r13
   1a004:	ef 92       	push	r14
   1a006:	0f 93       	push	r16
   1a008:	1f 93       	push	r17
   1a00a:	cf 93       	push	r28
   1a00c:	df 93       	push	r29
   1a00e:	cd b7       	in	r28, 0x3d	; 61
   1a010:	de b7       	in	r29, 0x3e	; 62
   1a012:	af 97       	sbiw	r28, 0x2f	; 47
   1a014:	0f b6       	in	r0, 0x3f	; 63
   1a016:	f8 94       	cli
   1a018:	de bf       	out	0x3e, r29	; 62
   1a01a:	0f be       	out	0x3f, r0	; 63
   1a01c:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1a01e:	67 ef       	ldi	r22, 0xF7	; 247
   1a020:	78 e0       	ldi	r23, 0x08	; 8
   1a022:	eb de       	rcall	.-554    	; 0x19dfa <lif_open_volume>
   1a024:	9f a7       	std	Y+47, r25	; 0x2f
   1a026:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   1a028:	00 97       	sbiw	r24, 0x00	; 0
   1a02a:	09 f4       	brne	.+2      	; 0x1a02e <lif_dir+0x40>
   1a02c:	9e c1       	rjmp	.+828    	; 0x1a36a <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1a02e:	fc 01       	movw	r30, r24
   1a030:	86 a1       	ldd	r24, Z+38	; 0x26
   1a032:	88 23       	and	r24, r24
   1a034:	21 f0       	breq	.+8      	; 0x1a03e <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1a036:	8f 01       	movw	r16, r30
   1a038:	0a 5d       	subi	r16, 0xDA	; 218
   1a03a:	1f 4f       	sbci	r17, 0xFF	; 255
   1a03c:	02 c0       	rjmp	.+4      	; 0x1a042 <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   1a03e:	04 e0       	ldi	r16, 0x04	; 4
   1a040:	16 e1       	ldi	r17, 0x16	; 22

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1a042:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a044:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a046:	87 5b       	subi	r24, 0xB7	; 183
   1a048:	9f 4f       	sbci	r25, 0xFF	; 255
   1a04a:	0e 94 bc c3 	call	0x18778	; 0x18778 <lif_lifbcd2timestr>
   1a04e:	ed b7       	in	r30, 0x3d	; 61
   1a050:	fe b7       	in	r31, 0x3e	; 62
   1a052:	97 83       	std	Z+7, r25	; 0x07
   1a054:	86 83       	std	Z+6, r24	; 0x06
   1a056:	15 83       	std	Z+5, r17	; 0x05
   1a058:	04 83       	std	Z+4, r16	; 0x04
   1a05a:	8a eb       	ldi	r24, 0xBA	; 186
   1a05c:	96 e3       	ldi	r25, 0x36	; 54
   1a05e:	a0 e0       	ldi	r26, 0x00	; 0
   1a060:	81 83       	std	Z+1, r24	; 0x01
   1a062:	92 83       	std	Z+2, r25	; 0x02
   1a064:	a3 83       	std	Z+3, r26	; 0x03
   1a066:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1a06a:	8a e7       	ldi	r24, 0x7A	; 122
   1a06c:	96 e3       	ldi	r25, 0x36	; 54
   1a06e:	a0 e0       	ldi	r26, 0x00	; 0
   1a070:	ed b7       	in	r30, 0x3d	; 61
   1a072:	fe b7       	in	r31, 0x3e	; 62
   1a074:	81 83       	std	Z+1, r24	; 0x01
   1a076:	92 83       	std	Z+2, r25	; 0x02
   1a078:	a3 83       	std	Z+3, r26	; 0x03
   1a07a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1a07e:	00 e2       	ldi	r16, 0x20	; 32
   1a080:	10 e0       	ldi	r17, 0x00	; 0
   1a082:	1f 8b       	std	Y+23, r17	; 0x17
   1a084:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1a086:	21 2c       	mov	r2, r1
   1a088:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a08a:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a08c:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a08e:	06 5a       	subi	r16, 0xA6	; 166
   1a090:	1f 4f       	sbci	r17, 0xFF	; 255
   1a092:	1d 8f       	std	Y+29, r17	; 0x1d
   1a094:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a096:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a098:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a09a:	00 5a       	subi	r16, 0xA0	; 160
   1a09c:	1f 4f       	sbci	r17, 0xFF	; 255
   1a09e:	1d a3       	std	Y+37, r17	; 0x25
   1a0a0:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a0a2:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a0a4:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a0a6:	04 59       	subi	r16, 0x94	; 148
   1a0a8:	1f 4f       	sbci	r17, 0xFF	; 255
   1a0aa:	1f a3       	std	Y+39, r17	; 0x27
   1a0ac:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a0ae:	8e e2       	ldi	r24, 0x2E	; 46
   1a0b0:	96 e3       	ldi	r25, 0x36	; 54
   1a0b2:	6c 01       	movw	r12, r24
   1a0b4:	e1 2c       	mov	r14, r1
   1a0b6:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a0b8:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a0ba:	01 5b       	subi	r16, 0xB1	; 177
   1a0bc:	1f 4f       	sbci	r17, 0xFF	; 255
   1a0be:	1f 8f       	std	Y+31, r17	; 0x1f
   1a0c0:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a0c2:	8e ef       	ldi	r24, 0xFE	; 254
   1a0c4:	95 e3       	ldi	r25, 0x35	; 53
   1a0c6:	2c 01       	movw	r4, r24
   1a0c8:	61 2c       	mov	r6, r1
   1a0ca:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a0cc:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a0ce:	04 5a       	subi	r16, 0xA4	; 164
   1a0d0:	1f 4f       	sbci	r17, 0xFF	; 255
   1a0d2:	19 a7       	std	Y+41, r17	; 0x29
   1a0d4:	08 a7       	std	Y+40, r16	; 0x28
   1a0d6:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a0d8:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a0da:	02 59       	subi	r16, 0x92	; 146
   1a0dc:	1f 4f       	sbci	r17, 0xFF	; 255
   1a0de:	1b a7       	std	Y+43, r17	; 0x2b
   1a0e0:	0a a7       	std	Y+42, r16	; 0x2a
   1a0e2:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a0e4:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a0e6:	0c 59       	subi	r16, 0x9C	; 156
   1a0e8:	1f 4f       	sbci	r17, 0xFF	; 255
   1a0ea:	1d a7       	std	Y+45, r17	; 0x2d
   1a0ec:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a0ee:	b1 01       	movw	r22, r2
   1a0f0:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a0f2:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a0f4:	55 d8       	rcall	.-3926   	; 0x191a0 <lif_readdirindex>
   1a0f6:	89 2b       	or	r24, r25
   1a0f8:	09 f4       	brne	.+2      	; 0x1a0fc <lif_dir+0x10e>
   1a0fa:	ad c0       	rjmp	.+346    	; 0x1a256 <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a0fc:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a0fe:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a100:	8d 91       	ld	r24, X+
   1a102:	9c 91       	ld	r25, X
   1a104:	8f 3f       	cpi	r24, 0xFF	; 255
   1a106:	bf ef       	ldi	r27, 0xFF	; 255
   1a108:	9b 07       	cpc	r25, r27
   1a10a:	09 f4       	brne	.+2      	; 0x1a10e <lif_dir+0x120>
   1a10c:	a4 c0       	rjmp	.+328    	; 0x1a256 <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a10e:	ec a1       	ldd	r30, Y+36	; 0x24
   1a110:	fd a1       	ldd	r31, Y+37	; 0x25
   1a112:	40 81       	ld	r20, Z
   1a114:	51 81       	ldd	r21, Z+1	; 0x01
   1a116:	62 81       	ldd	r22, Z+2	; 0x02
   1a118:	73 81       	ldd	r23, Z+3	; 0x03
   1a11a:	00 27       	eor	r16, r16
   1a11c:	14 2f       	mov	r17, r20
   1a11e:	25 2f       	mov	r18, r21
   1a120:	36 2f       	mov	r19, r22
   1a122:	08 8f       	std	Y+24, r16	; 0x18
   1a124:	19 8f       	std	Y+25, r17	; 0x19
   1a126:	2a 8f       	std	Y+26, r18	; 0x1a
   1a128:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a12a:	8c 7f       	andi	r24, 0xFC	; 252
   1a12c:	80 31       	cpi	r24, 0x10	; 16
   1a12e:	90 4e       	sbci	r25, 0xE0	; 224
   1a130:	09 f0       	breq	.+2      	; 0x1a134 <lif_dir+0x146>
   1a132:	4b c0       	rjmp	.+150    	; 0x1a1ca <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a134:	ae a1       	ldd	r26, Y+38	; 0x26
   1a136:	bf a1       	ldd	r27, Y+39	; 0x27
   1a138:	8d 91       	ld	r24, X+
   1a13a:	9c 91       	ld	r25, X
   1a13c:	00 97       	sbiw	r24, 0x00	; 0
   1a13e:	b9 f0       	breq	.+46     	; 0x1a16e <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a140:	4c 01       	movw	r8, r24
   1a142:	a1 2c       	mov	r10, r1
   1a144:	b1 2c       	mov	r11, r1
   1a146:	33 27       	eor	r19, r19
   1a148:	2b 2d       	mov	r18, r11
   1a14a:	1a 2d       	mov	r17, r10
   1a14c:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a14e:	88 23       	and	r24, r24
   1a150:	21 f0       	breq	.+8      	; 0x1a15a <lif_dir+0x16c>
        ++sectors;
   1a152:	0f 5f       	subi	r16, 0xFF	; 255
   1a154:	1f 4f       	sbci	r17, 0xFF	; 255
   1a156:	2f 4f       	sbci	r18, 0xFF	; 255
   1a158:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a15a:	40 17       	cp	r20, r16
   1a15c:	51 07       	cpc	r21, r17
   1a15e:	62 07       	cpc	r22, r18
   1a160:	73 07       	cpc	r23, r19
   1a162:	29 f4       	brne	.+10     	; 0x1a16e <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   1a164:	88 8e       	std	Y+24, r8	; 0x18
   1a166:	99 8e       	std	Y+25, r9	; 0x19
   1a168:	aa 8e       	std	Y+26, r10	; 0x1a
   1a16a:	bb 8e       	std	Y+27, r11	; 0x1b
   1a16c:	2e c0       	rjmp	.+92     	; 0x1a1ca <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   1a16e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a172:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a176:	32 ff       	sbrs	r19, 2
   1a178:	24 c0       	rjmp	.+72     	; 0x1a1c2 <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a17a:	4c 01       	movw	r8, r24
   1a17c:	a1 2c       	mov	r10, r1
   1a17e:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a180:	33 27       	eor	r19, r19
   1a182:	2b 2d       	mov	r18, r11
   1a184:	1a 2d       	mov	r17, r10
   1a186:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a188:	88 23       	and	r24, r24
   1a18a:	21 f0       	breq	.+8      	; 0x1a194 <lif_dir+0x1a6>
        ++sectors;
   1a18c:	0f 5f       	subi	r16, 0xFF	; 255
   1a18e:	1f 4f       	sbci	r17, 0xFF	; 255
   1a190:	2f 4f       	sbci	r18, 0xFF	; 255
   1a192:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a194:	ed b7       	in	r30, 0x3d	; 61
   1a196:	fe b7       	in	r31, 0x3e	; 62
   1a198:	46 87       	std	Z+14, r20	; 0x0e
   1a19a:	57 87       	std	Z+15, r21	; 0x0f
   1a19c:	60 8b       	std	Z+16, r22	; 0x10
   1a19e:	71 8b       	std	Z+17, r23	; 0x11
   1a1a0:	02 87       	std	Z+10, r16	; 0x0a
   1a1a2:	13 87       	std	Z+11, r17	; 0x0b
   1a1a4:	24 87       	std	Z+12, r18	; 0x0c
   1a1a6:	35 87       	std	Z+13, r19	; 0x0d
   1a1a8:	86 82       	std	Z+6, r8	; 0x06
   1a1aa:	97 82       	std	Z+7, r9	; 0x07
   1a1ac:	a0 86       	std	Z+8, r10	; 0x08
   1a1ae:	b1 86       	std	Z+9, r11	; 0x09
   1a1b0:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a1b2:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a1b4:	15 83       	std	Z+5, r17	; 0x05
   1a1b6:	04 83       	std	Z+4, r16	; 0x04
   1a1b8:	c1 82       	std	Z+1, r12	; 0x01
   1a1ba:	d2 82       	std	Z+2, r13	; 0x02
   1a1bc:	e3 82       	std	Z+3, r14	; 0x03
   1a1be:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a1c2:	01 e2       	ldi	r16, 0x21	; 33
   1a1c4:	10 e0       	ldi	r17, 0x00	; 0
   1a1c6:	1f 8b       	std	Y+23, r17	; 0x17
   1a1c8:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a1ca:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a1cc:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a1ce:	8d 90       	ld	r8, X+
   1a1d0:	9c 90       	ld	r9, X
   1a1d2:	81 14       	cp	r8, r1
   1a1d4:	91 04       	cpc	r9, r1
   1a1d6:	19 f0       	breq	.+6      	; 0x1a1de <lif_dir+0x1f0>
   1a1d8:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a1da:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a1dc:	02 c0       	rjmp	.+4      	; 0x1a1e2 <lif_dir+0x1f4>
   1a1de:	01 e6       	ldi	r16, 0x61	; 97
   1a1e0:	16 e1       	ldi	r17, 0x16	; 22
   1a1e2:	a8 a5       	ldd	r26, Y+40	; 0x28
   1a1e4:	b9 a5       	ldd	r27, Y+41	; 0x29
   1a1e6:	8d 91       	ld	r24, X+
   1a1e8:	9d 91       	ld	r25, X+
   1a1ea:	0d 90       	ld	r0, X+
   1a1ec:	bc 91       	ld	r27, X
   1a1ee:	a0 2d       	mov	r26, r0
   1a1f0:	88 a3       	std	Y+32, r24	; 0x20
   1a1f2:	99 a3       	std	Y+33, r25	; 0x21
   1a1f4:	aa a3       	std	Y+34, r26	; 0x22
   1a1f6:	bb a3       	std	Y+35, r27	; 0x23
   1a1f8:	ea a5       	ldd	r30, Y+42	; 0x2a
   1a1fa:	fb a5       	ldd	r31, Y+43	; 0x2b
   1a1fc:	a0 80       	ld	r10, Z
   1a1fe:	b1 80       	ldd	r11, Z+1	; 0x01
   1a200:	8c a5       	ldd	r24, Y+44	; 0x2c
   1a202:	9d a5       	ldd	r25, Y+45	; 0x2d
   1a204:	0e 94 bc c3 	call	0x18778	; 0x18778 <lif_lifbcd2timestr>
   1a208:	ed b7       	in	r30, 0x3d	; 61
   1a20a:	fe b7       	in	r31, 0x3e	; 62
   1a20c:	95 8b       	std	Z+21, r25	; 0x15
   1a20e:	84 8b       	std	Z+20, r24	; 0x14
   1a210:	b3 8a       	std	Z+19, r11	; 0x13
   1a212:	a2 8a       	std	Z+18, r10	; 0x12
   1a214:	2e 89       	ldd	r18, Y+22	; 0x16
   1a216:	3f 89       	ldd	r19, Y+23	; 0x17
   1a218:	31 8b       	std	Z+17, r19	; 0x11
   1a21a:	20 8b       	std	Z+16, r18	; 0x10
   1a21c:	88 8d       	ldd	r24, Y+24	; 0x18
   1a21e:	99 8d       	ldd	r25, Y+25	; 0x19
   1a220:	aa 8d       	ldd	r26, Y+26	; 0x1a
   1a222:	bb 8d       	ldd	r27, Y+27	; 0x1b
   1a224:	84 87       	std	Z+12, r24	; 0x0c
   1a226:	95 87       	std	Z+13, r25	; 0x0d
   1a228:	a6 87       	std	Z+14, r26	; 0x0e
   1a22a:	b7 87       	std	Z+15, r27	; 0x0f
   1a22c:	88 a1       	ldd	r24, Y+32	; 0x20
   1a22e:	99 a1       	ldd	r25, Y+33	; 0x21
   1a230:	aa a1       	ldd	r26, Y+34	; 0x22
   1a232:	bb a1       	ldd	r27, Y+35	; 0x23
   1a234:	80 87       	std	Z+8, r24	; 0x08
   1a236:	91 87       	std	Z+9, r25	; 0x09
   1a238:	a2 87       	std	Z+10, r26	; 0x0a
   1a23a:	b3 87       	std	Z+11, r27	; 0x0b
   1a23c:	97 82       	std	Z+7, r9	; 0x07
   1a23e:	86 82       	std	Z+6, r8	; 0x06
   1a240:	15 83       	std	Z+5, r17	; 0x05
   1a242:	04 83       	std	Z+4, r16	; 0x04
   1a244:	41 82       	std	Z+1, r4	; 0x01
   1a246:	52 82       	std	Z+2, r5	; 0x02
   1a248:	63 82       	std	Z+3, r6	; 0x03
   1a24a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a24e:	ff ef       	ldi	r31, 0xFF	; 255
   1a250:	2f 1a       	sub	r2, r31
   1a252:	3f 0a       	sbc	r3, r31
    }
   1a254:	4c cf       	rjmp	.-360    	; 0x1a0ee <lif_dir+0x100>

    printf("\n");
   1a256:	8c ef       	ldi	r24, 0xFC	; 252
   1a258:	95 e3       	ldi	r25, 0x35	; 53
   1a25a:	a0 e0       	ldi	r26, 0x00	; 0
   1a25c:	ed b7       	in	r30, 0x3d	; 61
   1a25e:	fe b7       	in	r31, 0x3e	; 62
   1a260:	81 83       	std	Z+1, r24	; 0x01
   1a262:	92 83       	std	Z+2, r25	; 0x02
   1a264:	a3 83       	std	Z+3, r26	; 0x03
   1a266:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a26a:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a26c:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a26e:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a270:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a272:	09 2e       	mov	r0, r25
   1a274:	00 0c       	add	r0, r0
   1a276:	aa 0b       	sbc	r26, r26
   1a278:	bb 0b       	sbc	r27, r27
   1a27a:	ed b7       	in	r30, 0x3d	; 61
   1a27c:	fe b7       	in	r31, 0x3e	; 62
   1a27e:	84 83       	std	Z+4, r24	; 0x04
   1a280:	95 83       	std	Z+5, r25	; 0x05
   1a282:	a6 83       	std	Z+6, r26	; 0x06
   1a284:	b7 83       	std	Z+7, r27	; 0x07
   1a286:	80 ef       	ldi	r24, 0xF0	; 240
   1a288:	95 e3       	ldi	r25, 0x35	; 53
   1a28a:	a0 e0       	ldi	r26, 0x00	; 0
   1a28c:	81 83       	std	Z+1, r24	; 0x01
   1a28e:	92 83       	std	Z+2, r25	; 0x02
   1a290:	a3 83       	std	Z+3, r26	; 0x03
   1a292:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a296:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a298:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a29a:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a29c:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a29e:	09 2e       	mov	r0, r25
   1a2a0:	00 0c       	add	r0, r0
   1a2a2:	aa 0b       	sbc	r26, r26
   1a2a4:	bb 0b       	sbc	r27, r27
   1a2a6:	ed b7       	in	r30, 0x3d	; 61
   1a2a8:	fe b7       	in	r31, 0x3e	; 62
   1a2aa:	84 83       	std	Z+4, r24	; 0x04
   1a2ac:	95 83       	std	Z+5, r25	; 0x05
   1a2ae:	a6 83       	std	Z+6, r26	; 0x06
   1a2b0:	b7 83       	std	Z+7, r27	; 0x07
   1a2b2:	83 ee       	ldi	r24, 0xE3	; 227
   1a2b4:	95 e3       	ldi	r25, 0x35	; 53
   1a2b6:	a0 e0       	ldi	r26, 0x00	; 0
   1a2b8:	81 83       	std	Z+1, r24	; 0x01
   1a2ba:	92 83       	std	Z+2, r25	; 0x02
   1a2bc:	a3 83       	std	Z+3, r26	; 0x03
   1a2be:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a2c2:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a2c4:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a2c6:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a2c8:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a2ca:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a2cc:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a2ce:	ed b7       	in	r30, 0x3d	; 61
   1a2d0:	fe b7       	in	r31, 0x3e	; 62
   1a2d2:	84 83       	std	Z+4, r24	; 0x04
   1a2d4:	95 83       	std	Z+5, r25	; 0x05
   1a2d6:	a6 83       	std	Z+6, r26	; 0x06
   1a2d8:	b7 83       	std	Z+7, r27	; 0x07
   1a2da:	82 ed       	ldi	r24, 0xD2	; 210
   1a2dc:	95 e3       	ldi	r25, 0x35	; 53
   1a2de:	a0 e0       	ldi	r26, 0x00	; 0
   1a2e0:	81 83       	std	Z+1, r24	; 0x01
   1a2e2:	92 83       	std	Z+2, r25	; 0x02
   1a2e4:	a3 83       	std	Z+3, r26	; 0x03
   1a2e6:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a2ea:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a2ec:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a2ee:	85 a9       	ldd	r24, Z+53	; 0x35
   1a2f0:	96 a9       	ldd	r25, Z+54	; 0x36
   1a2f2:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a2f4:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a2f6:	ed b7       	in	r30, 0x3d	; 61
   1a2f8:	fe b7       	in	r31, 0x3e	; 62
   1a2fa:	84 83       	std	Z+4, r24	; 0x04
   1a2fc:	95 83       	std	Z+5, r25	; 0x05
   1a2fe:	a6 83       	std	Z+6, r26	; 0x06
   1a300:	b7 83       	std	Z+7, r27	; 0x07
   1a302:	8f eb       	ldi	r24, 0xBF	; 191
   1a304:	95 e3       	ldi	r25, 0x35	; 53
   1a306:	a0 e0       	ldi	r26, 0x00	; 0
   1a308:	81 83       	std	Z+1, r24	; 0x01
   1a30a:	92 83       	std	Z+2, r25	; 0x02
   1a30c:	a3 83       	std	Z+3, r26	; 0x03
   1a30e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a312:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a314:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a316:	84 89       	ldd	r24, Z+20	; 0x14
   1a318:	95 89       	ldd	r25, Z+21	; 0x15
   1a31a:	a6 89       	ldd	r26, Z+22	; 0x16
   1a31c:	b7 89       	ldd	r27, Z+23	; 0x17
   1a31e:	ed b7       	in	r30, 0x3d	; 61
   1a320:	fe b7       	in	r31, 0x3e	; 62
   1a322:	84 83       	std	Z+4, r24	; 0x04
   1a324:	95 83       	std	Z+5, r25	; 0x05
   1a326:	a6 83       	std	Z+6, r26	; 0x06
   1a328:	b7 83       	std	Z+7, r27	; 0x07
   1a32a:	8c ea       	ldi	r24, 0xAC	; 172
   1a32c:	95 e3       	ldi	r25, 0x35	; 53
   1a32e:	a0 e0       	ldi	r26, 0x00	; 0
   1a330:	81 83       	std	Z+1, r24	; 0x01
   1a332:	92 83       	std	Z+2, r25	; 0x02
   1a334:	a3 83       	std	Z+3, r26	; 0x03
   1a336:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a33a:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a33c:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a33e:	80 8d       	ldd	r24, Z+24	; 0x18
   1a340:	91 8d       	ldd	r25, Z+25	; 0x19
   1a342:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a344:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a346:	ed b7       	in	r30, 0x3d	; 61
   1a348:	fe b7       	in	r31, 0x3e	; 62
   1a34a:	84 83       	std	Z+4, r24	; 0x04
   1a34c:	95 83       	std	Z+5, r25	; 0x05
   1a34e:	a6 83       	std	Z+6, r26	; 0x06
   1a350:	b7 83       	std	Z+7, r27	; 0x07
   1a352:	89 e9       	ldi	r24, 0x99	; 153
   1a354:	95 e3       	ldi	r25, 0x35	; 53
   1a356:	a0 e0       	ldi	r26, 0x00	; 0
   1a358:	81 83       	std	Z+1, r24	; 0x01
   1a35a:	92 83       	std	Z+2, r25	; 0x02
   1a35c:	a3 83       	std	Z+3, r26	; 0x03
   1a35e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a362:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a364:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a366:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a36a:	af 96       	adiw	r28, 0x2f	; 47
   1a36c:	0f b6       	in	r0, 0x3f	; 63
   1a36e:	f8 94       	cli
   1a370:	de bf       	out	0x3e, r29	; 62
   1a372:	0f be       	out	0x3f, r0	; 63
   1a374:	cd bf       	out	0x3d, r28	; 61
   1a376:	df 91       	pop	r29
   1a378:	cf 91       	pop	r28
   1a37a:	1f 91       	pop	r17
   1a37c:	0f 91       	pop	r16
   1a37e:	ef 90       	pop	r14
   1a380:	df 90       	pop	r13
   1a382:	cf 90       	pop	r12
   1a384:	bf 90       	pop	r11
   1a386:	af 90       	pop	r10
   1a388:	9f 90       	pop	r9
   1a38a:	8f 90       	pop	r8
   1a38c:	6f 90       	pop	r6
   1a38e:	5f 90       	pop	r5
   1a390:	4f 90       	pop	r4
   1a392:	3f 90       	pop	r3
   1a394:	2f 90       	pop	r2
   1a396:	08 95       	ret

0001a398 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a398:	a5 e0       	ldi	r26, 0x05	; 5
   1a39a:	b0 e0       	ldi	r27, 0x00	; 0
   1a39c:	e2 ed       	ldi	r30, 0xD2	; 210
   1a39e:	f1 ed       	ldi	r31, 0xD1	; 209
   1a3a0:	0c 94 d7 e2 	jmp	0x1c5ae	; 0x1c5ae <__prologue_saves__+0x10>
   1a3a4:	7c 01       	movw	r14, r24
   1a3a6:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a3a8:	cb 01       	movw	r24, r22
   1a3aa:	0e 94 ad c0 	call	0x1815a	; 0x1815a <lif_checkname>
   1a3ae:	89 2b       	or	r24, r25
   1a3b0:	59 f4       	brne	.+22     	; 0x1a3c8 <lif_find_file+0x30>
    {
        if(debuglevel & GPIB_PPR)
   1a3b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a3b6:	81 ff       	sbrs	r24, 1
   1a3b8:	46 c0       	rjmp	.+140    	; 0x1a446 <lif_find_file+0xae>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a3ba:	ed b7       	in	r30, 0x3d	; 61
   1a3bc:	fe b7       	in	r31, 0x3e	; 62
   1a3be:	d5 83       	std	Z+5, r29	; 0x05
   1a3c0:	c4 83       	std	Z+4, r28	; 0x04
   1a3c2:	82 e7       	ldi	r24, 0x72	; 114
   1a3c4:	95 e3       	ldi	r25, 0x35	; 53
   1a3c6:	13 c0       	rjmp	.+38     	; 0x1a3ee <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a3c8:	fe 01       	movw	r30, r28
   1a3ca:	01 90       	ld	r0, Z+
   1a3cc:	00 20       	and	r0, r0
   1a3ce:	e9 f7       	brne	.-6      	; 0x1a3ca <lif_find_file+0x32>
   1a3d0:	31 97       	sbiw	r30, 0x01	; 1
   1a3d2:	ec 1b       	sub	r30, r28
   1a3d4:	fd 0b       	sbc	r31, r29
   1a3d6:	3b 97       	sbiw	r30, 0x0b	; 11
   1a3d8:	88 f0       	brcs	.+34     	; 0x1a3fc <lif_find_file+0x64>
    {
        if(debuglevel & GPIB_PPR)
   1a3da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a3de:	81 ff       	sbrs	r24, 1
   1a3e0:	32 c0       	rjmp	.+100    	; 0x1a446 <lif_find_file+0xae>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a3e2:	ed b7       	in	r30, 0x3d	; 61
   1a3e4:	fe b7       	in	r31, 0x3e	; 62
   1a3e6:	d5 83       	std	Z+5, r29	; 0x05
   1a3e8:	c4 83       	std	Z+4, r28	; 0x04
   1a3ea:	8d e4       	ldi	r24, 0x4D	; 77
   1a3ec:	95 e3       	ldi	r25, 0x35	; 53
   1a3ee:	a0 e0       	ldi	r26, 0x00	; 0
   1a3f0:	81 83       	std	Z+1, r24	; 0x01
   1a3f2:	92 83       	std	Z+2, r25	; 0x02
   1a3f4:	a3 83       	std	Z+3, r26	; 0x03
   1a3f6:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1a3fa:	25 c0       	rjmp	.+74     	; 0x1a446 <lif_find_file+0xae>
        return(-1);
    }

    if(LIF == NULL)
   1a3fc:	e1 14       	cp	r14, r1
   1a3fe:	f1 04       	cpc	r15, r1
   1a400:	11 f1       	breq	.+68     	; 0x1a446 <lif_find_file+0xae>
   1a402:	00 e0       	ldi	r16, 0x00	; 0
   1a404:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a406:	67 01       	movw	r12, r14
   1a408:	fa e5       	ldi	r31, 0x5A	; 90
   1a40a:	cf 0e       	add	r12, r31
   1a40c:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a40e:	57 01       	movw	r10, r14
   1a410:	2f e4       	ldi	r18, 0x4F	; 79
   1a412:	a2 0e       	add	r10, r18
   1a414:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a416:	b8 01       	movw	r22, r16
   1a418:	c7 01       	movw	r24, r14
   1a41a:	0e 94 d0 c8 	call	0x191a0	; 0x191a0 <lif_readdirindex>
   1a41e:	89 2b       	or	r24, r25
   1a420:	91 f0       	breq	.+36     	; 0x1a446 <lif_find_file+0xae>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a422:	f6 01       	movw	r30, r12
   1a424:	80 81       	ld	r24, Z
   1a426:	91 81       	ldd	r25, Z+1	; 0x01
   1a428:	8f 3f       	cpi	r24, 0xFF	; 255
   1a42a:	ff ef       	ldi	r31, 0xFF	; 255
   1a42c:	9f 07       	cpc	r25, r31
   1a42e:	59 f0       	breq	.+22     	; 0x1a446 <lif_find_file+0xae>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a430:	89 2b       	or	r24, r25
   1a432:	31 f0       	breq	.+12     	; 0x1a440 <lif_find_file+0xa8>
   1a434:	be 01       	movw	r22, r28
   1a436:	c5 01       	movw	r24, r10
   1a438:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <strcasecmp>
   1a43c:	89 2b       	or	r24, r25
   1a43e:	31 f0       	breq	.+12     	; 0x1a44c <lif_find_file+0xb4>
            break;
        ++index;
   1a440:	0f 5f       	subi	r16, 0xFF	; 255
   1a442:	1f 4f       	sbci	r17, 0xFF	; 255
   1a444:	e8 cf       	rjmp	.-48     	; 0x1a416 <lif_find_file+0x7e>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & GPIB_PPR)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a446:	8f ef       	ldi	r24, 0xFF	; 255
   1a448:	9f ef       	ldi	r25, 0xFF	; 255
   1a44a:	01 c0       	rjmp	.+2      	; 0x1a44e <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a44c:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a44e:	cd b7       	in	r28, 0x3d	; 61
   1a450:	de b7       	in	r29, 0x3e	; 62
   1a452:	25 96       	adiw	r28, 0x05	; 5
   1a454:	ea e0       	ldi	r30, 0x0A	; 10
   1a456:	0c 94 f3 e2 	jmp	0x1c5e6	; 0x1c5e6 <__epilogue_restores__+0x10>

0001a45a <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a45a:	a5 e0       	ldi	r26, 0x05	; 5
   1a45c:	b0 e0       	ldi	r27, 0x00	; 0
   1a45e:	e3 e3       	ldi	r30, 0x33	; 51
   1a460:	f2 ed       	ldi	r31, 0xD2	; 210
   1a462:	0c 94 d9 e2 	jmp	0x1c5b2	; 0x1c5b2 <__prologue_saves__+0x14>
   1a466:	6b 01       	movw	r12, r22
   1a468:	7c 01       	movw	r14, r24
   1a46a:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a46c:	20 e0       	ldi	r18, 0x00	; 0
   1a46e:	31 e0       	ldi	r19, 0x01	; 1
   1a470:	40 e0       	ldi	r20, 0x00	; 0
   1a472:	50 e0       	ldi	r21, 0x00	; 0
   1a474:	0e 94 84 e2 	call	0x1c508	; 0x1c508 <__divmodsi4>
    if(!pos)
   1a478:	61 15       	cp	r22, r1
   1a47a:	71 05       	cpc	r23, r1
   1a47c:	d1 f1       	breq	.+116    	; 0x1a4f2 <lif_e010_pad_sector+0x98>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a47e:	c0 e0       	ldi	r28, 0x00	; 0
   1a480:	d1 e0       	ldi	r29, 0x01	; 1
   1a482:	c6 1b       	sub	r28, r22
   1a484:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1a486:	f8 01       	movw	r30, r16
   1a488:	8f ee       	ldi	r24, 0xEF	; 239
   1a48a:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a48c:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a48e:	cf 01       	movw	r24, r30
   1a490:	80 1b       	sub	r24, r16
   1a492:	91 0b       	sbc	r25, r17
   1a494:	8c 17       	cp	r24, r28
   1a496:	9d 07       	cpc	r25, r29
   1a498:	14 f4       	brge	.+4      	; 0x1a49e <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a49a:	21 93       	st	Z+, r18
   1a49c:	f8 cf       	rjmp	.-16     	; 0x1a48e <lif_e010_pad_sector+0x34>
   1a49e:	1c 16       	cp	r1, r28
   1a4a0:	1d 06       	cpc	r1, r29
   1a4a2:	14 f0       	brlt	.+4      	; 0x1a4a8 <lif_e010_pad_sector+0x4e>
   1a4a4:	c1 e0       	ldi	r28, 0x01	; 1
   1a4a6:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a4a8:	ce 01       	movw	r24, r28
   1a4aa:	0d 2e       	mov	r0, r29
   1a4ac:	00 0c       	add	r0, r0
   1a4ae:	aa 0b       	sbc	r26, r26
   1a4b0:	bb 0b       	sbc	r27, r27
   1a4b2:	bc 01       	movw	r22, r24
   1a4b4:	cd 01       	movw	r24, r26
   1a4b6:	6c 0d       	add	r22, r12
   1a4b8:	7d 1d       	adc	r23, r13
   1a4ba:	8e 1d       	adc	r24, r14
   1a4bc:	9f 1d       	adc	r25, r15
   1a4be:	20 e0       	ldi	r18, 0x00	; 0
   1a4c0:	31 e0       	ldi	r19, 0x01	; 1
   1a4c2:	40 e0       	ldi	r20, 0x00	; 0
   1a4c4:	50 e0       	ldi	r21, 0x00	; 0
   1a4c6:	0e 94 84 e2 	call	0x1c508	; 0x1c508 <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1a4ca:	61 15       	cp	r22, r1
   1a4cc:	71 05       	cpc	r23, r1
   1a4ce:	a1 f0       	breq	.+40     	; 0x1a4f8 <lif_e010_pad_sector+0x9e>
    {
        if(debuglevel & GPIB_PPR)
   1a4d0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a4d4:	21 ff       	sbrs	r18, 1
   1a4d6:	12 c0       	rjmp	.+36     	; 0x1a4fc <lif_e010_pad_sector+0xa2>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a4d8:	ed b7       	in	r30, 0x3d	; 61
   1a4da:	fe b7       	in	r31, 0x3e	; 62
   1a4dc:	75 83       	std	Z+5, r23	; 0x05
   1a4de:	64 83       	std	Z+4, r22	; 0x04
   1a4e0:	84 e1       	ldi	r24, 0x14	; 20
   1a4e2:	95 e3       	ldi	r25, 0x35	; 53
   1a4e4:	a0 e0       	ldi	r26, 0x00	; 0
   1a4e6:	81 83       	std	Z+1, r24	; 0x01
   1a4e8:	92 83       	std	Z+2, r25	; 0x02
   1a4ea:	a3 83       	std	Z+3, r26	; 0x03
   1a4ec:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1a4f0:	05 c0       	rjmp	.+10     	; 0x1a4fc <lif_e010_pad_sector+0xa2>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a4f2:	80 e0       	ldi	r24, 0x00	; 0
   1a4f4:	90 e0       	ldi	r25, 0x00	; 0
   1a4f6:	04 c0       	rjmp	.+8      	; 0x1a500 <lif_e010_pad_sector+0xa6>
   1a4f8:	ce 01       	movw	r24, r28
   1a4fa:	02 c0       	rjmp	.+4      	; 0x1a500 <lif_e010_pad_sector+0xa6>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & GPIB_PPR)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a4fc:	8f ef       	ldi	r24, 0xFF	; 255
   1a4fe:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a500:	cd b7       	in	r28, 0x3d	; 61
   1a502:	de b7       	in	r29, 0x3e	; 62
   1a504:	25 96       	adiw	r28, 0x05	; 5
   1a506:	e8 e0       	ldi	r30, 0x08	; 8
   1a508:	0c 94 f5 e2 	jmp	0x1c5ea	; 0x1c5ea <__epilogue_restores__+0x14>

0001a50c <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a50c:	a5 e0       	ldi	r26, 0x05	; 5
   1a50e:	b0 e0       	ldi	r27, 0x00	; 0
   1a510:	ec e8       	ldi	r30, 0x8C	; 140
   1a512:	f2 ed       	ldi	r31, 0xD2	; 210
   1a514:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
   1a518:	ec 01       	movw	r28, r24
   1a51a:	4a 01       	movw	r8, r20
   1a51c:	5b 01       	movw	r10, r22
   1a51e:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1a520:	fc 01       	movw	r30, r24
   1a522:	01 90       	ld	r0, Z+
   1a524:	00 20       	and	r0, r0
   1a526:	e9 f7       	brne	.-6      	; 0x1a522 <lif_ascii_string_to_e010+0x16>
   1a528:	31 97       	sbiw	r30, 0x01	; 1
   1a52a:	6f 01       	movw	r12, r30
   1a52c:	c8 1a       	sub	r12, r24
   1a52e:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a530:	41 2c       	mov	r4, r1
   1a532:	51 2c       	mov	r5, r1
   1a534:	32 01       	movw	r6, r4
   1a536:	53 94       	inc	r5
   1a538:	cb 01       	movw	r24, r22
   1a53a:	ba 01       	movw	r22, r20
   1a53c:	a3 01       	movw	r20, r6
   1a53e:	92 01       	movw	r18, r4
   1a540:	0e 94 84 e2 	call	0x1c508	; 0x1c508 <__divmodsi4>
   1a544:	21 2c       	mov	r2, r1
   1a546:	33 24       	eor	r3, r3
   1a548:	33 94       	inc	r3
   1a54a:	c1 01       	movw	r24, r2
   1a54c:	86 1b       	sub	r24, r22
   1a54e:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1a550:	86 30       	cpi	r24, 0x06	; 6
   1a552:	91 05       	cpc	r25, r1
   1a554:	20 f0       	brcs	.+8      	; 0x1a55e <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a556:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1a558:	00 e0       	ldi	r16, 0x00	; 0
   1a55a:	10 e0       	ldi	r17, 0x00	; 0
   1a55c:	17 c0       	rjmp	.+46     	; 0x1a58c <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1a55e:	a7 01       	movw	r20, r14
   1a560:	c5 01       	movw	r24, r10
   1a562:	b4 01       	movw	r22, r8
   1a564:	7a df       	rcall	.-268    	; 0x1a45a <lif_e010_pad_sector>
   1a566:	8c 01       	movw	r16, r24
        if(ind < 0)
   1a568:	97 fd       	sbrc	r25, 7
   1a56a:	81 c0       	rjmp	.+258    	; 0x1a66e <lif_ascii_string_to_e010+0x162>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1a56c:	09 2e       	mov	r0, r25
   1a56e:	00 0c       	add	r0, r0
   1a570:	aa 0b       	sbc	r26, r26
   1a572:	bb 0b       	sbc	r27, r27
   1a574:	bc 01       	movw	r22, r24
   1a576:	cd 01       	movw	r24, r26
   1a578:	68 0d       	add	r22, r8
   1a57a:	79 1d       	adc	r23, r9
   1a57c:	8a 1d       	adc	r24, r10
   1a57e:	9b 1d       	adc	r25, r11
   1a580:	a3 01       	movw	r20, r6
   1a582:	92 01       	movw	r18, r4
   1a584:	0e 94 84 e2 	call	0x1c508	; 0x1c508 <__divmodsi4>
   1a588:	26 1a       	sub	r2, r22
   1a58a:	37 0a       	sbc	r3, r23
   1a58c:	f7 01       	movw	r30, r14
   1a58e:	e0 0f       	add	r30, r16
   1a590:	f1 1f       	adc	r31, r17
   1a592:	0d 5f       	subi	r16, 0xFD	; 253
   1a594:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1a596:	c6 01       	movw	r24, r12
   1a598:	02 96       	adiw	r24, 0x02	; 2
   1a59a:	82 15       	cp	r24, r2
   1a59c:	93 05       	cpc	r25, r3
   1a59e:	84 f4       	brge	.+32     	; 0x1a5c0 <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1a5a0:	8f ed       	ldi	r24, 0xDF	; 223
   1a5a2:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a5a4:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1a5a6:	d2 82       	std	Z+2, r13	; 0x02
   1a5a8:	f7 01       	movw	r30, r14
   1a5aa:	e0 0f       	add	r30, r16
   1a5ac:	f1 1f       	adc	r31, r17
   1a5ae:	cf 01       	movw	r24, r30
   1a5b0:	8e 19       	sub	r24, r14
   1a5b2:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a5b4:	29 91       	ld	r18, Y+
   1a5b6:	22 23       	and	r18, r18
   1a5b8:	09 f4       	brne	.+2      	; 0x1a5bc <lif_ascii_string_to_e010+0xb0>
   1a5ba:	59 c0       	rjmp	.+178    	; 0x1a66e <lif_ascii_string_to_e010+0x162>
            wbuf[ind++] = *str++;
   1a5bc:	21 93       	st	Z+, r18
   1a5be:	f7 cf       	rjmp	.-18     	; 0x1a5ae <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1a5c0:	8f ec       	ldi	r24, 0xCF	; 207
   1a5c2:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a5c4:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1a5c6:	d2 82       	std	Z+2, r13	; 0x02
   1a5c8:	d7 01       	movw	r26, r14
   1a5ca:	a0 0f       	add	r26, r16
   1a5cc:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a5ce:	fe 01       	movw	r30, r28
   1a5d0:	81 91       	ld	r24, Z+
   1a5d2:	81 11       	cpse	r24, r1
   1a5d4:	0e c0       	rjmp	.+28     	; 0x1a5f2 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1a5d6:	c8 01       	movw	r24, r16
   1a5d8:	01 2e       	mov	r0, r17
   1a5da:	00 0c       	add	r0, r0
   1a5dc:	aa 0b       	sbc	r26, r26
   1a5de:	bb 0b       	sbc	r27, r27
   1a5e0:	bc 01       	movw	r22, r24
   1a5e2:	cd 01       	movw	r24, r26
   1a5e4:	68 0d       	add	r22, r8
   1a5e6:	79 1d       	adc	r23, r9
   1a5e8:	8a 1d       	adc	r24, r10
   1a5ea:	9b 1d       	adc	r25, r11
   1a5ec:	61 11       	cpse	r22, r1
   1a5ee:	09 c0       	rjmp	.+18     	; 0x1a602 <lif_ascii_string_to_e010+0xf6>
   1a5f0:	1f c0       	rjmp	.+62     	; 0x1a630 <lif_ascii_string_to_e010+0x124>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a5f2:	02 15       	cp	r16, r2
   1a5f4:	13 05       	cpc	r17, r3
   1a5f6:	7c f7       	brge	.-34     	; 0x1a5d6 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1a5f8:	0f 5f       	subi	r16, 0xFF	; 255
   1a5fa:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5fc:	8d 93       	st	X+, r24
   1a5fe:	ef 01       	movw	r28, r30
   1a600:	e6 cf       	rjmp	.-52     	; 0x1a5ce <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & GPIB_PPR)
   1a602:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a606:	21 ff       	sbrs	r18, 1
   1a608:	30 c0       	rjmp	.+96     	; 0x1a66a <lif_ascii_string_to_e010+0x15e>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1a60a:	20 e0       	ldi	r18, 0x00	; 0
   1a60c:	31 e0       	ldi	r19, 0x01	; 1
   1a60e:	40 e0       	ldi	r20, 0x00	; 0
   1a610:	50 e0       	ldi	r21, 0x00	; 0
   1a612:	0e 94 84 e2 	call	0x1c508	; 0x1c508 <__divmodsi4>
   1a616:	ed b7       	in	r30, 0x3d	; 61
   1a618:	fe b7       	in	r31, 0x3e	; 62
   1a61a:	75 83       	std	Z+5, r23	; 0x05
   1a61c:	64 83       	std	Z+4, r22	; 0x04
   1a61e:	80 ef       	ldi	r24, 0xF0	; 240
   1a620:	94 e3       	ldi	r25, 0x34	; 52
   1a622:	a0 e0       	ldi	r26, 0x00	; 0
   1a624:	81 83       	std	Z+1, r24	; 0x01
   1a626:	92 83       	std	Z+2, r25	; 0x02
   1a628:	a3 83       	std	Z+3, r26	; 0x03
   1a62a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1a62e:	1d c0       	rjmp	.+58     	; 0x1a66a <lif_ascii_string_to_e010+0x15e>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1a630:	fe 01       	movw	r30, r28
   1a632:	01 90       	ld	r0, Z+
   1a634:	00 20       	and	r0, r0
   1a636:	e9 f7       	brne	.-6      	; 0x1a632 <lif_ascii_string_to_e010+0x126>
   1a638:	31 97       	sbiw	r30, 0x01	; 1
   1a63a:	9f 01       	movw	r18, r30
   1a63c:	2c 1b       	sub	r18, r28
   1a63e:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1a640:	d7 01       	movw	r26, r14
   1a642:	a0 0f       	add	r26, r16
   1a644:	b1 1f       	adc	r27, r17
   1a646:	8f e6       	ldi	r24, 0x6F	; 111
   1a648:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1a64a:	fd 01       	movw	r30, r26
   1a64c:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1a64e:	32 83       	std	Z+2, r19	; 0x02
   1a650:	0d 5f       	subi	r16, 0xFD	; 253
   1a652:	1f 4f       	sbci	r17, 0xFF	; 255
   1a654:	f7 01       	movw	r30, r14
   1a656:	e0 0f       	add	r30, r16
   1a658:	f1 1f       	adc	r31, r17
   1a65a:	cf 01       	movw	r24, r30
   1a65c:	8e 19       	sub	r24, r14
   1a65e:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a660:	29 91       	ld	r18, Y+
   1a662:	22 23       	and	r18, r18
   1a664:	21 f0       	breq	.+8      	; 0x1a66e <lif_ascii_string_to_e010+0x162>
            wbuf[ind++] = *str++;
   1a666:	21 93       	st	Z+, r18
   1a668:	f8 cf       	rjmp	.-16     	; 0x1a65a <lif_ascii_string_to_e010+0x14e>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & GPIB_PPR)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1a66a:	8f ef       	ldi	r24, 0xFF	; 255
   1a66c:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1a66e:	cd b7       	in	r28, 0x3d	; 61
   1a670:	de b7       	in	r29, 0x3e	; 62
   1a672:	25 96       	adiw	r28, 0x05	; 5
   1a674:	e2 e1       	ldi	r30, 0x12	; 18
   1a676:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

0001a67a <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1a67a:	ad e0       	ldi	r26, 0x0D	; 13
   1a67c:	b3 e0       	ldi	r27, 0x03	; 3
   1a67e:	e3 e4       	ldi	r30, 0x43	; 67
   1a680:	f3 ed       	ldi	r31, 0xD3	; 211
   1a682:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
   1a686:	5c 01       	movw	r10, r24
   1a688:	2a 01       	movw	r4, r20
   1a68a:	3b 01       	movw	r6, r22
   1a68c:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1a68e:	6d ee       	ldi	r22, 0xED	; 237
   1a690:	78 e0       	ldi	r23, 0x08	; 8
   1a692:	0e 94 12 bf 	call	0x17e24	; 0x17e24 <lif_open>
   1a696:	c7 5f       	subi	r28, 0xF7	; 247
   1a698:	dc 4f       	sbci	r29, 0xFC	; 252
   1a69a:	99 83       	std	Y+1, r25	; 0x01
   1a69c:	88 83       	st	Y, r24
   1a69e:	c9 50       	subi	r28, 0x09	; 9
   1a6a0:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1a6a2:	89 2b       	or	r24, r25
   1a6a4:	09 f4       	brne	.+2      	; 0x1a6a8 <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1a6a6:	63 c0       	rjmp	.+198    	; 0x1a76e <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1a6a8:	81 2c       	mov	r8, r1
   1a6aa:	91 2c       	mov	r9, r1
   1a6ac:	c1 2c       	mov	r12, r1
   1a6ae:	d1 2c       	mov	r13, r1
   1a6b0:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1a6b2:	82 ee       	ldi	r24, 0xE2	; 226
   1a6b4:	94 e3       	ldi	r25, 0x34	; 52
   1a6b6:	9c 01       	movw	r18, r24
   1a6b8:	40 e0       	ldi	r20, 0x00	; 0
   1a6ba:	c5 5f       	subi	r28, 0xF5	; 245
   1a6bc:	dc 4f       	sbci	r29, 0xFC	; 252
   1a6be:	28 83       	st	Y, r18
   1a6c0:	39 83       	std	Y+1, r19	; 0x01
   1a6c2:	4a 83       	std	Y+2, r20	; 0x02
   1a6c4:	cb 50       	subi	r28, 0x0B	; 11
   1a6c6:	d3 40       	sbci	r29, 0x03	; 3
   1a6c8:	14 c0       	rjmp	.+40     	; 0x1a6f2 <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1a6ca:	c1 01       	movw	r24, r2
   1a6cc:	03 2c       	mov	r0, r3
   1a6ce:	00 0c       	add	r0, r0
   1a6d0:	aa 0b       	sbc	r26, r26
   1a6d2:	bb 0b       	sbc	r27, r27
   1a6d4:	48 0e       	add	r4, r24
   1a6d6:	59 1e       	adc	r5, r25
   1a6d8:	6a 1e       	adc	r6, r26
   1a6da:	7b 1e       	adc	r7, r27
        bytes += size;
   1a6dc:	c8 0e       	add	r12, r24
   1a6de:	d9 1e       	adc	r13, r25
   1a6e0:	ea 1e       	adc	r14, r26
   1a6e2:	fb 1e       	adc	r15, r27
        count += size;
   1a6e4:	82 0c       	add	r8, r2
   1a6e6:	93 1c       	adc	r9, r3

        if(count > 256)
   1a6e8:	31 e0       	ldi	r19, 0x01	; 1
   1a6ea:	83 16       	cp	r8, r19
   1a6ec:	93 06       	cpc	r9, r19
   1a6ee:	0c f0       	brlt	.+2      	; 0x1a6f2 <lif_add_ascii_file_as_e010_wrapper+0x78>
   1a6f0:	43 c0       	rjmp	.+134    	; 0x1a778 <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1a6f2:	c7 5f       	subi	r28, 0xF7	; 247
   1a6f4:	dc 4f       	sbci	r29, 0xFC	; 252
   1a6f6:	48 81       	ld	r20, Y
   1a6f8:	59 81       	ldd	r21, Y+1	; 0x01
   1a6fa:	c9 50       	subi	r28, 0x09	; 9
   1a6fc:	d3 40       	sbci	r29, 0x03	; 3
   1a6fe:	6d ef       	ldi	r22, 0xFD	; 253
   1a700:	70 e0       	ldi	r23, 0x00	; 0
   1a702:	ce 01       	movw	r24, r28
   1a704:	88 5f       	subi	r24, 0xF8	; 248
   1a706:	9d 4f       	sbci	r25, 0xFD	; 253
   1a708:	0e 94 d7 76 	call	0xedae	; 0xedae <fgets>
   1a70c:	89 2b       	or	r24, r25
   1a70e:	09 f4       	brne	.+2      	; 0x1a712 <lif_add_ascii_file_as_e010_wrapper+0x98>
   1a710:	4b c0       	rjmp	.+150    	; 0x1a7a8 <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1a712:	ce 01       	movw	r24, r28
   1a714:	88 5f       	subi	r24, 0xF8	; 248
   1a716:	9d 4f       	sbci	r25, 0xFD	; 253
   1a718:	0e 94 57 32 	call	0x64ae	; 0x64ae <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1a71c:	6a e6       	ldi	r22, 0x6A	; 106
   1a71e:	76 e1       	ldi	r23, 0x16	; 22
   1a720:	ce 01       	movw	r24, r28
   1a722:	88 5f       	subi	r24, 0xF8	; 248
   1a724:	9d 4f       	sbci	r25, 0xFD	; 253
   1a726:	0e 94 9a 31 	call	0x6334	; 0x6334 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1a72a:	9e 01       	movw	r18, r28
   1a72c:	28 5f       	subi	r18, 0xF8	; 248
   1a72e:	3f 4f       	sbci	r19, 0xFF	; 255
   1a730:	b3 01       	movw	r22, r6
   1a732:	a2 01       	movw	r20, r4
   1a734:	ce 01       	movw	r24, r28
   1a736:	88 5f       	subi	r24, 0xF8	; 248
   1a738:	9d 4f       	sbci	r25, 0xFD	; 253
   1a73a:	e8 de       	rcall	.-560    	; 0x1a50c <lif_ascii_string_to_e010>
   1a73c:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1a73e:	a1 14       	cp	r10, r1
   1a740:	b1 04       	cpc	r11, r1
   1a742:	19 f2       	breq	.-122    	; 0x1a6ca <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1a744:	8c 01       	movw	r16, r24
   1a746:	a3 01       	movw	r20, r6
   1a748:	92 01       	movw	r18, r4
   1a74a:	be 01       	movw	r22, r28
   1a74c:	68 5f       	subi	r22, 0xF8	; 248
   1a74e:	7f 4f       	sbci	r23, 0xFF	; 255
   1a750:	c5 01       	movw	r24, r10
   1a752:	0e 94 e7 bf 	call	0x17fce	; 0x17fce <lif_write>
            if(len < size)
   1a756:	82 15       	cp	r24, r2
   1a758:	93 05       	cpc	r25, r3
   1a75a:	0c f0       	brlt	.+2      	; 0x1a75e <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1a75c:	b6 cf       	rjmp	.-148    	; 0x1a6ca <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1a75e:	c7 5f       	subi	r28, 0xF7	; 247
   1a760:	dc 4f       	sbci	r29, 0xFC	; 252
   1a762:	88 81       	ld	r24, Y
   1a764:	99 81       	ldd	r25, Y+1	; 0x01
   1a766:	c9 50       	subi	r28, 0x09	; 9
   1a768:	d3 40       	sbci	r29, 0x03	; 3
   1a76a:	0e 94 69 7d 	call	0xfad2	; 0xfad2 <fclose>
                return(-1);
   1a76e:	6f ef       	ldi	r22, 0xFF	; 255
   1a770:	7f ef       	ldi	r23, 0xFF	; 255
   1a772:	8f ef       	ldi	r24, 0xFF	; 255
   1a774:	9f ef       	ldi	r25, 0xFF	; 255
   1a776:	84 c0       	rjmp	.+264    	; 0x1a880 <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1a778:	a1 14       	cp	r10, r1
   1a77a:	b1 04       	cpc	r11, r1
   1a77c:	91 f0       	breq	.+36     	; 0x1a7a2 <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1a77e:	ed b7       	in	r30, 0x3d	; 61
   1a780:	fe b7       	in	r31, 0x3e	; 62
   1a782:	c4 82       	std	Z+4, r12	; 0x04
   1a784:	d5 82       	std	Z+5, r13	; 0x05
   1a786:	e6 82       	std	Z+6, r14	; 0x06
   1a788:	f7 82       	std	Z+7, r15	; 0x07
   1a78a:	c5 5f       	subi	r28, 0xF5	; 245
   1a78c:	dc 4f       	sbci	r29, 0xFC	; 252
   1a78e:	28 81       	ld	r18, Y
   1a790:	39 81       	ldd	r19, Y+1	; 0x01
   1a792:	4a 81       	ldd	r20, Y+2	; 0x02
   1a794:	cb 50       	subi	r28, 0x0B	; 11
   1a796:	d3 40       	sbci	r29, 0x03	; 3
   1a798:	21 83       	std	Z+1, r18	; 0x01
   1a79a:	32 83       	std	Z+2, r19	; 0x02
   1a79c:	43 83       	std	Z+3, r20	; 0x03
   1a79e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1a7a2:	81 2c       	mov	r8, r1
   1a7a4:	91 2c       	mov	r9, r1
   1a7a6:	a5 cf       	rjmp	.-182    	; 0x1a6f2 <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1a7a8:	c7 5f       	subi	r28, 0xF7	; 247
   1a7aa:	dc 4f       	sbci	r29, 0xFC	; 252
   1a7ac:	88 81       	ld	r24, Y
   1a7ae:	99 81       	ldd	r25, Y+1	; 0x01
   1a7b0:	c9 50       	subi	r28, 0x09	; 9
   1a7b2:	d3 40       	sbci	r29, 0x03	; 3
   1a7b4:	0e 94 69 7d 	call	0xfad2	; 0xfad2 <fclose>

// Write EOF
    str[0] = 0;
   1a7b8:	c8 5f       	subi	r28, 0xF8	; 248
   1a7ba:	dd 4f       	sbci	r29, 0xFD	; 253
   1a7bc:	18 82       	st	Y, r1
   1a7be:	c8 50       	subi	r28, 0x08	; 8
   1a7c0:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1a7c2:	9e 01       	movw	r18, r28
   1a7c4:	28 5f       	subi	r18, 0xF8	; 248
   1a7c6:	3f 4f       	sbci	r19, 0xFF	; 255
   1a7c8:	b3 01       	movw	r22, r6
   1a7ca:	a2 01       	movw	r20, r4
   1a7cc:	ce 01       	movw	r24, r28
   1a7ce:	88 5f       	subi	r24, 0xF8	; 248
   1a7d0:	9d 4f       	sbci	r25, 0xFD	; 253
   1a7d2:	9c de       	rcall	.-712    	; 0x1a50c <lif_ascii_string_to_e010>
   1a7d4:	4c 01       	movw	r8, r24

    if(LIF)
   1a7d6:	a1 14       	cp	r10, r1
   1a7d8:	b1 04       	cpc	r11, r1
   1a7da:	d1 f4       	brne	.+52     	; 0x1a810 <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1a7dc:	c4 01       	movw	r24, r8
   1a7de:	09 2c       	mov	r0, r9
   1a7e0:	00 0c       	add	r0, r0
   1a7e2:	aa 0b       	sbc	r26, r26
   1a7e4:	bb 0b       	sbc	r27, r27
   1a7e6:	c8 0e       	add	r12, r24
   1a7e8:	d9 1e       	adc	r13, r25
   1a7ea:	ea 1e       	adc	r14, r26
   1a7ec:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1a7ee:	12 01       	movw	r2, r4
   1a7f0:	23 01       	movw	r4, r6
   1a7f2:	28 0e       	add	r2, r24
   1a7f4:	39 1e       	adc	r3, r25
   1a7f6:	4a 1e       	adc	r4, r26
   1a7f8:	5b 1e       	adc	r5, r27
   1a7fa:	ae 01       	movw	r20, r28
   1a7fc:	48 5f       	subi	r20, 0xF8	; 248
   1a7fe:	5f 4f       	sbci	r21, 0xFF	; 255
   1a800:	c2 01       	movw	r24, r4
   1a802:	b1 01       	movw	r22, r2
   1a804:	2a de       	rcall	.-940    	; 0x1a45a <lif_e010_pad_sector>
   1a806:	3c 01       	movw	r6, r24
    if(LIF)
   1a808:	a1 14       	cp	r10, r1
   1a80a:	b1 04       	cpc	r11, r1
   1a80c:	e1 f4       	brne	.+56     	; 0x1a846 <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1a80e:	36 c0       	rjmp	.+108    	; 0x1a87c <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1a810:	ed b7       	in	r30, 0x3d	; 61
   1a812:	fe b7       	in	r31, 0x3e	; 62
   1a814:	c4 82       	std	Z+4, r12	; 0x04
   1a816:	d5 82       	std	Z+5, r13	; 0x05
   1a818:	e6 82       	std	Z+6, r14	; 0x06
   1a81a:	f7 82       	std	Z+7, r15	; 0x07
   1a81c:	84 ed       	ldi	r24, 0xD4	; 212
   1a81e:	94 e3       	ldi	r25, 0x34	; 52
   1a820:	a0 e0       	ldi	r26, 0x00	; 0
   1a822:	81 83       	std	Z+1, r24	; 0x01
   1a824:	92 83       	std	Z+2, r25	; 0x02
   1a826:	a3 83       	std	Z+3, r26	; 0x03
   1a828:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1a82c:	84 01       	movw	r16, r8
   1a82e:	a3 01       	movw	r20, r6
   1a830:	92 01       	movw	r18, r4
   1a832:	be 01       	movw	r22, r28
   1a834:	68 5f       	subi	r22, 0xF8	; 248
   1a836:	7f 4f       	sbci	r23, 0xFF	; 255
   1a838:	c5 01       	movw	r24, r10
   1a83a:	0e 94 e7 bf 	call	0x17fce	; 0x17fce <lif_write>
        if(len < size)
   1a83e:	88 15       	cp	r24, r8
   1a840:	99 05       	cpc	r25, r9
   1a842:	64 f6       	brge	.-104    	; 0x1a7dc <lif_add_ascii_file_as_e010_wrapper+0x162>
   1a844:	94 cf       	rjmp	.-216    	; 0x1a76e <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1a846:	8c 01       	movw	r16, r24
   1a848:	a2 01       	movw	r20, r4
   1a84a:	91 01       	movw	r18, r2
   1a84c:	be 01       	movw	r22, r28
   1a84e:	68 5f       	subi	r22, 0xF8	; 248
   1a850:	7f 4f       	sbci	r23, 0xFF	; 255
   1a852:	c5 01       	movw	r24, r10
   1a854:	0e 94 e7 bf 	call	0x17fce	; 0x17fce <lif_write>
        if(len < size)
   1a858:	86 15       	cp	r24, r6
   1a85a:	97 05       	cpc	r25, r7
   1a85c:	0c f4       	brge	.+2      	; 0x1a860 <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1a85e:	87 cf       	rjmp	.-242    	; 0x1a76e <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1a860:	ed b7       	in	r30, 0x3d	; 61
   1a862:	fe b7       	in	r31, 0x3e	; 62
   1a864:	c4 82       	std	Z+4, r12	; 0x04
   1a866:	d5 82       	std	Z+5, r13	; 0x05
   1a868:	e6 82       	std	Z+6, r14	; 0x06
   1a86a:	f7 82       	std	Z+7, r15	; 0x07
   1a86c:	86 ec       	ldi	r24, 0xC6	; 198
   1a86e:	94 e3       	ldi	r25, 0x34	; 52
   1a870:	a0 e0       	ldi	r26, 0x00	; 0
   1a872:	81 83       	std	Z+1, r24	; 0x01
   1a874:	92 83       	std	Z+2, r25	; 0x02
   1a876:	a3 83       	std	Z+3, r26	; 0x03
   1a878:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

    return(bytes);
   1a87c:	b6 01       	movw	r22, r12
   1a87e:	c7 01       	movw	r24, r14
}
   1a880:	c3 5f       	subi	r28, 0xF3	; 243
   1a882:	dc 4f       	sbci	r29, 0xFC	; 252
   1a884:	e2 e1       	ldi	r30, 0x12	; 18
   1a886:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

0001a88a <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1a88a:	ab e3       	ldi	r26, 0x3B	; 59
   1a88c:	b0 e0       	ldi	r27, 0x00	; 0
   1a88e:	eb e4       	ldi	r30, 0x4B	; 75
   1a890:	f4 ed       	ldi	r31, 0xD4	; 212
   1a892:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
   1a896:	6c 01       	movw	r12, r24
   1a898:	1b 01       	movw	r2, r22
   1a89a:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1a89c:	fc 01       	movw	r30, r24
   1a89e:	80 81       	ld	r24, Z
   1a8a0:	81 11       	cpse	r24, r1
   1a8a2:	03 c0       	rjmp	.+6      	; 0x1a8aa <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1a8a4:	83 e9       	ldi	r24, 0x93	; 147
   1a8a6:	94 e3       	ldi	r25, 0x34	; 52
   1a8a8:	1a c0       	rjmp	.+52     	; 0x1a8de <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1a8aa:	fb 01       	movw	r30, r22
   1a8ac:	80 81       	ld	r24, Z
   1a8ae:	81 11       	cpse	r24, r1
   1a8b0:	03 c0       	rjmp	.+6      	; 0x1a8b8 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1a8b2:	85 e6       	ldi	r24, 0x65	; 101
   1a8b4:	94 e3       	ldi	r25, 0x34	; 52
   1a8b6:	13 c0       	rjmp	.+38     	; 0x1a8de <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1a8b8:	fa 01       	movw	r30, r20
   1a8ba:	80 81       	ld	r24, Z
   1a8bc:	81 11       	cpse	r24, r1
   1a8be:	03 c0       	rjmp	.+6      	; 0x1a8c6 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1a8c0:	86 e3       	ldi	r24, 0x36	; 54
   1a8c2:	94 e3       	ldi	r25, 0x34	; 52
   1a8c4:	0c c0       	rjmp	.+24     	; 0x1a8de <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1a8c6:	be 01       	movw	r22, r28
   1a8c8:	66 5f       	subi	r22, 0xF6	; 246
   1a8ca:	7f 4f       	sbci	r23, 0xFF	; 255
   1a8cc:	ca 01       	movw	r24, r20
   1a8ce:	0e 94 3c bf 	call	0x17e78	; 0x17e78 <lif_stat>
   1a8d2:	9b af       	std	Y+59, r25	; 0x3b
   1a8d4:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1a8d6:	89 2b       	or	r24, r25
   1a8d8:	59 f4       	brne	.+22     	; 0x1a8f0 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1a8da:	86 e0       	ldi	r24, 0x06	; 6
   1a8dc:	94 e3       	ldi	r25, 0x34	; 52
   1a8de:	a0 e0       	ldi	r26, 0x00	; 0
   1a8e0:	ed b7       	in	r30, 0x3d	; 61
   1a8e2:	fe b7       	in	r31, 0x3e	; 62
   1a8e4:	81 83       	std	Z+1, r24	; 0x01
   1a8e6:	92 83       	std	Z+2, r25	; 0x02
   1a8e8:	a3 83       	std	Z+3, r26	; 0x03
   1a8ea:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1a8ee:	01 c1       	rjmp	.+514    	; 0x1aaf2 <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1a8f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a8f4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a8f8:	92 ff       	sbrs	r25, 2
   1a8fa:	10 c0       	rjmp	.+32     	; 0x1a91c <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1a8fc:	ed b7       	in	r30, 0x3d	; 61
   1a8fe:	fe b7       	in	r31, 0x3e	; 62
   1a900:	f1 86       	std	Z+9, r15	; 0x09
   1a902:	e0 86       	std	Z+8, r14	; 0x08
   1a904:	37 82       	std	Z+7, r3	; 0x07
   1a906:	26 82       	std	Z+6, r2	; 0x06
   1a908:	d5 82       	std	Z+5, r13	; 0x05
   1a90a:	c4 82       	std	Z+4, r12	; 0x04
   1a90c:	87 ed       	ldi	r24, 0xD7	; 215
   1a90e:	93 e3       	ldi	r25, 0x33	; 51
   1a910:	a0 e0       	ldi	r26, 0x00	; 0
   1a912:	81 83       	std	Z+1, r24	; 0x01
   1a914:	92 83       	std	Z+2, r25	; 0x02
   1a916:	a3 83       	std	Z+3, r26	; 0x03
   1a918:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1a91c:	97 01       	movw	r18, r14
   1a91e:	40 e0       	ldi	r20, 0x00	; 0
   1a920:	50 e0       	ldi	r21, 0x00	; 0
   1a922:	ba 01       	movw	r22, r20
   1a924:	80 e0       	ldi	r24, 0x00	; 0
   1a926:	90 e0       	ldi	r25, 0x00	; 0
   1a928:	a8 de       	rcall	.-688    	; 0x1a67a <lif_add_ascii_file_as_e010_wrapper>
   1a92a:	4b 01       	movw	r8, r22
   1a92c:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a92e:	47 2e       	mov	r4, r23
   1a930:	58 2e       	mov	r5, r24
   1a932:	69 2e       	mov	r6, r25
   1a934:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a936:	66 23       	and	r22, r22
   1a938:	29 f0       	breq	.+10     	; 0x1a944 <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1a93a:	ff ef       	ldi	r31, 0xFF	; 255
   1a93c:	4f 1a       	sub	r4, r31
   1a93e:	5f 0a       	sbc	r5, r31
   1a940:	6f 0a       	sbc	r6, r31
   1a942:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1a944:	60 ef       	ldi	r22, 0xF0	; 240
   1a946:	78 e0       	ldi	r23, 0x08	; 8
   1a948:	c6 01       	movw	r24, r12
   1a94a:	57 da       	rcall	.-2898   	; 0x19dfa <lif_open_volume>
   1a94c:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1a94e:	00 97       	sbiw	r24, 0x00	; 0
   1a950:	09 f4       	brne	.+2      	; 0x1a954 <lif_add_ascii_file_as_e010+0xca>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1a952:	cf c0       	rjmp	.+414    	; 0x1aaf2 <lif_add_ascii_file_as_e010+0x268>
   1a954:	b3 01       	movw	r22, r6
   1a956:	a2 01       	movw	r20, r4
   1a958:	f0 d8       	rcall	.-3616   	; 0x19b3a <lif_newdir>
    if(index == -1)
   1a95a:	3c 01       	movw	r6, r24
   1a95c:	8f ef       	ldi	r24, 0xFF	; 255
   1a95e:	68 16       	cp	r6, r24
   1a960:	78 06       	cpc	r7, r24
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1a962:	79 f4       	brne	.+30     	; 0x1a982 <lif_add_ascii_file_as_e010+0xf8>
   1a964:	ed b7       	in	r30, 0x3d	; 61
   1a966:	fe b7       	in	r31, 0x3e	; 62
   1a968:	f7 82       	std	Z+7, r15	; 0x07
   1a96a:	e6 82       	std	Z+6, r14	; 0x06
   1a96c:	d5 82       	std	Z+5, r13	; 0x05
   1a96e:	c4 82       	std	Z+4, r12	; 0x04
   1a970:	87 ea       	ldi	r24, 0xA7	; 167
   1a972:	93 e3       	ldi	r25, 0x33	; 51
   1a974:	a0 e0       	ldi	r26, 0x00	; 0
   1a976:	81 83       	std	Z+1, r24	; 0x01
   1a978:	92 83       	std	Z+2, r25	; 0x02
   1a97a:	a3 83       	std	Z+3, r26	; 0x03
   1a97c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1a980:	a0 c0       	rjmp	.+320    	; 0x1aac2 <lif_add_ascii_file_as_e010+0x238>
   1a982:	68 01       	movw	r12, r16
   1a984:	ff e4       	ldi	r31, 0x4F	; 79
   1a986:	cf 0e       	add	r12, r31
   1a988:	d1 1c       	adc	r13, r1
   1a98a:	4a e0       	ldi	r20, 0x0A	; 10
   1a98c:	50 e0       	ldi	r21, 0x00	; 0
   1a98e:	b1 01       	movw	r22, r2
   1a990:	c6 01       	movw	r24, r12
   1a992:	0e 94 e7 c0 	call	0x181ce	; 0x181ce <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1a996:	80 e1       	ldi	r24, 0x10	; 16
   1a998:	90 ee       	ldi	r25, 0xE0	; 224
   1a99a:	f8 01       	movw	r30, r16
   1a99c:	e6 5a       	subi	r30, 0xA6	; 166
   1a99e:	ff 4f       	sbci	r31, 0xFF	; 255
   1a9a0:	91 83       	std	Z+1, r25	; 0x01
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1a9a2:	80 83       	st	Z, r24
   1a9a4:	ea ad       	ldd	r30, Y+58	; 0x3a
   1a9a6:	fb ad       	ldd	r31, Y+59	; 0x3b
   1a9a8:	60 a5       	ldd	r22, Z+40	; 0x28
   1a9aa:	71 a5       	ldd	r23, Z+41	; 0x29
   1a9ac:	82 a5       	ldd	r24, Z+42	; 0x2a
   1a9ae:	93 a5       	ldd	r25, Z+43	; 0x2b
   1a9b0:	a8 01       	movw	r20, r16
   1a9b2:	4c 59       	subi	r20, 0x9C	; 156
   1a9b4:	5f 4f       	sbci	r21, 0xFF	; 255
   1a9b6:	0e 94 0c c3 	call	0x18618	; 0x18618 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1a9ba:	81 e0       	ldi	r24, 0x01	; 1
   1a9bc:	90 e8       	ldi	r25, 0x80	; 128
   1a9be:	f8 01       	movw	r30, r16
   1a9c0:	e6 59       	subi	r30, 0x96	; 150
   1a9c2:	ff 4f       	sbci	r31, 0xFF	; 255
   1a9c4:	91 83       	std	Z+1, r25	; 0x01
    LIF->DIR.FileBytes = bytes;                   // 28
   1a9c6:	80 83       	st	Z, r24
   1a9c8:	32 96       	adiw	r30, 0x02	; 2
   1a9ca:	91 82       	std	Z+1, r9	; 0x01
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1a9cc:	80 82       	st	Z, r8
   1a9ce:	80 e0       	ldi	r24, 0x00	; 0
   1a9d0:	91 e0       	ldi	r25, 0x01	; 1
   1a9d2:	32 96       	adiw	r30, 0x02	; 2
   1a9d4:	91 83       	std	Z+1, r25	; 0x01
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1a9d6:	80 83       	st	Z, r24
   1a9d8:	58 01       	movw	r10, r16
   1a9da:	fc e5       	ldi	r31, 0x5C	; 92
   1a9dc:	af 0e       	add	r10, r31
   1a9de:	b1 1c       	adc	r11, r1
   1a9e0:	f5 01       	movw	r30, r10
   1a9e2:	80 81       	ld	r24, Z
   1a9e4:	91 81       	ldd	r25, Z+1	; 0x01
   1a9e6:	a2 81       	ldd	r26, Z+2	; 0x02
   1a9e8:	b3 81       	ldd	r27, Z+3	; 0x03
   1a9ea:	22 24       	eor	r2, r2
   1a9ec:	38 2e       	mov	r3, r24
   1a9ee:	49 2e       	mov	r4, r25

    if(debuglevel & LIF_DEBUG)
   1a9f0:	5a 2e       	mov	r5, r26
   1a9f2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a9f6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a9fa:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1a9fc:	05 c0       	rjmp	.+10     	; 0x1aa08 <lif_add_ascii_file_as_e010+0x17e>
   1a9fe:	6c e6       	ldi	r22, 0x6C	; 108
   1aa00:	76 e1       	ldi	r23, 0x16	; 22
   1aa02:	c8 01       	movw	r24, r16
   1aa04:	0e 94 f8 c3 	call	0x187f0	; 0x187f0 <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1aa08:	97 01       	movw	r18, r14
   1aa0a:	b2 01       	movw	r22, r4
   1aa0c:	a1 01       	movw	r20, r2
   1aa0e:	c8 01       	movw	r24, r16
   1aa10:	34 de       	rcall	.-920    	; 0x1a67a <lif_add_ascii_file_as_e010_wrapper>
   1aa12:	4b 01       	movw	r8, r22

    if(debuglevel & LIF_DEBUG)
   1aa14:	7c 01       	movw	r14, r24
   1aa16:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1aa1a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1aa1e:	92 ff       	sbrs	r25, 2
    {
        printf("New Directory Information AFTER write\n");
   1aa20:	4a c0       	rjmp	.+148    	; 0x1aab6 <lif_add_ascii_file_as_e010+0x22c>
   1aa22:	80 e8       	ldi	r24, 0x80	; 128
   1aa24:	93 e3       	ldi	r25, 0x33	; 51
   1aa26:	a0 e0       	ldi	r26, 0x00	; 0
   1aa28:	ed b7       	in	r30, 0x3d	; 61
   1aa2a:	fe b7       	in	r31, 0x3e	; 62
   1aa2c:	81 83       	std	Z+1, r24	; 0x01
   1aa2e:	92 83       	std	Z+2, r25	; 0x02
   1aa30:	a3 83       	std	Z+3, r26	; 0x03
   1aa32:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1aa36:	ed b7       	in	r30, 0x3d	; 61
   1aa38:	fe b7       	in	r31, 0x3e	; 62
   1aa3a:	d5 82       	std	Z+5, r13	; 0x05
   1aa3c:	c4 82       	std	Z+4, r12	; 0x04
   1aa3e:	89 e6       	ldi	r24, 0x69	; 105
   1aa40:	93 e3       	ldi	r25, 0x33	; 51
   1aa42:	a0 e0       	ldi	r26, 0x00	; 0
   1aa44:	81 83       	std	Z+1, r24	; 0x01
   1aa46:	92 83       	std	Z+2, r25	; 0x02
   1aa48:	a3 83       	std	Z+3, r26	; 0x03
   1aa4a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1aa4e:	ed b7       	in	r30, 0x3d	; 61
   1aa50:	fe b7       	in	r31, 0x3e	; 62
   1aa52:	75 82       	std	Z+5, r7	; 0x05
   1aa54:	64 82       	std	Z+4, r6	; 0x04
   1aa56:	82 e5       	ldi	r24, 0x52	; 82
   1aa58:	93 e3       	ldi	r25, 0x33	; 51
   1aa5a:	a0 e0       	ldi	r26, 0x00	; 0
   1aa5c:	81 83       	std	Z+1, r24	; 0x01
   1aa5e:	92 83       	std	Z+2, r25	; 0x02
   1aa60:	a3 83       	std	Z+3, r26	; 0x03
   1aa62:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1aa66:	f5 01       	movw	r30, r10
   1aa68:	80 81       	ld	r24, Z
   1aa6a:	91 81       	ldd	r25, Z+1	; 0x01
   1aa6c:	a2 81       	ldd	r26, Z+2	; 0x02
   1aa6e:	b3 81       	ldd	r27, Z+3	; 0x03
   1aa70:	ed b7       	in	r30, 0x3d	; 61
   1aa72:	fe b7       	in	r31, 0x3e	; 62
   1aa74:	84 83       	std	Z+4, r24	; 0x04
   1aa76:	95 83       	std	Z+5, r25	; 0x05
   1aa78:	a6 83       	std	Z+6, r26	; 0x06
   1aa7a:	b7 83       	std	Z+7, r27	; 0x07
   1aa7c:	89 e3       	ldi	r24, 0x39	; 57
   1aa7e:	93 e3       	ldi	r25, 0x33	; 51
   1aa80:	a0 e0       	ldi	r26, 0x00	; 0
   1aa82:	81 83       	std	Z+1, r24	; 0x01
   1aa84:	92 83       	std	Z+2, r25	; 0x02
   1aa86:	a3 83       	std	Z+3, r26	; 0x03
   1aa88:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1aa8c:	f8 01       	movw	r30, r16
   1aa8e:	e0 5a       	subi	r30, 0xA0	; 160
   1aa90:	ff 4f       	sbci	r31, 0xFF	; 255
   1aa92:	80 81       	ld	r24, Z
   1aa94:	91 81       	ldd	r25, Z+1	; 0x01
   1aa96:	a2 81       	ldd	r26, Z+2	; 0x02
   1aa98:	b3 81       	ldd	r27, Z+3	; 0x03
   1aa9a:	ed b7       	in	r30, 0x3d	; 61
   1aa9c:	fe b7       	in	r31, 0x3e	; 62
   1aa9e:	84 83       	std	Z+4, r24	; 0x04
   1aaa0:	95 83       	std	Z+5, r25	; 0x05
   1aaa2:	a6 83       	std	Z+6, r26	; 0x06
   1aaa4:	b7 83       	std	Z+7, r27	; 0x07
   1aaa6:	80 e2       	ldi	r24, 0x20	; 32
   1aaa8:	93 e3       	ldi	r25, 0x33	; 51
   1aaaa:	a0 e0       	ldi	r26, 0x00	; 0
   1aaac:	81 83       	std	Z+1, r24	; 0x01
   1aaae:	92 83       	std	Z+2, r25	; 0x02
   1aab0:	a3 83       	std	Z+3, r26	; 0x03
   1aab2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1aab6:	b3 01       	movw	r22, r6
   1aab8:	c8 01       	movw	r24, r16
   1aaba:	0e 94 37 c9 	call	0x1926e	; 0x1926e <lif_writedirindex>
   1aabe:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1aac0:	21 f4       	brne	.+8      	; 0x1aaca <lif_add_ascii_file_as_e010+0x240>
   1aac2:	c8 01       	movw	r24, r16
   1aac4:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>
   1aac8:	14 c0       	rjmp	.+40     	; 0x1aaf2 <lif_add_ascii_file_as_e010+0x268>
   1aaca:	c8 01       	movw	r24, r16
   1aacc:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1aad0:	ed b7       	in	r30, 0x3d	; 61
   1aad2:	fe b7       	in	r31, 0x3e	; 62
   1aad4:	84 82       	std	Z+4, r8	; 0x04
   1aad6:	95 82       	std	Z+5, r9	; 0x05
   1aad8:	e6 82       	std	Z+6, r14	; 0x06
   1aada:	f7 82       	std	Z+7, r15	; 0x07
   1aadc:	82 e1       	ldi	r24, 0x12	; 18
   1aade:	93 e3       	ldi	r25, 0x33	; 51
   1aae0:	a0 e0       	ldi	r26, 0x00	; 0
   1aae2:	81 83       	std	Z+1, r24	; 0x01
   1aae4:	92 83       	std	Z+2, r25	; 0x02
   1aae6:	a3 83       	std	Z+3, r26	; 0x03
   1aae8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

// Return file size
    return(bytes);
   1aaec:	b4 01       	movw	r22, r8
   1aaee:	c7 01       	movw	r24, r14
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1aaf0:	04 c0       	rjmp	.+8      	; 0x1aafa <lif_add_ascii_file_as_e010+0x270>
   1aaf2:	6f ef       	ldi	r22, 0xFF	; 255
   1aaf4:	7f ef       	ldi	r23, 0xFF	; 255
   1aaf6:	8f ef       	ldi	r24, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1aaf8:	9f ef       	ldi	r25, 0xFF	; 255
   1aafa:	eb 96       	adiw	r28, 0x3b	; 59
   1aafc:	e2 e1       	ldi	r30, 0x12	; 18
   1aafe:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

0001ab02 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1ab02:	a7 e3       	ldi	r26, 0x37	; 55
   1ab04:	b2 e0       	ldi	r27, 0x02	; 2
   1ab06:	e7 e8       	ldi	r30, 0x87	; 135
   1ab08:	f5 ed       	ldi	r31, 0xD5	; 213
   1ab0a:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
   1ab0e:	7c 01       	movw	r14, r24
   1ab10:	8b 01       	movw	r16, r22
   1ab12:	ca 5d       	subi	r28, 0xDA	; 218
   1ab14:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab16:	59 83       	std	Y+1, r21	; 0x01
   1ab18:	48 83       	st	Y, r20
   1ab1a:	c6 52       	subi	r28, 0x26	; 38
   1ab1c:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1ab1e:	61 e3       	ldi	r22, 0x31	; 49
   1ab20:	73 e0       	ldi	r23, 0x03	; 3
   1ab22:	6b d9       	rcall	.-3370   	; 0x19dfa <lif_open_volume>
   1ab24:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1ab26:	00 97       	sbiw	r24, 0x00	; 0
   1ab28:	69 f4       	brne	.+26     	; 0x1ab44 <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1ab2a:	ed b7       	in	r30, 0x3d	; 61
   1ab2c:	fe b7       	in	r31, 0x3e	; 62
   1ab2e:	f5 82       	std	Z+5, r15	; 0x05
   1ab30:	e4 82       	std	Z+4, r14	; 0x04
   1ab32:	8a ef       	ldi	r24, 0xFA	; 250
   1ab34:	92 e3       	ldi	r25, 0x32	; 50
   1ab36:	a0 e0       	ldi	r26, 0x00	; 0
   1ab38:	81 83       	std	Z+1, r24	; 0x01
   1ab3a:	92 83       	std	Z+2, r25	; 0x02
   1ab3c:	a3 83       	std	Z+3, r26	; 0x03
   1ab3e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1ab42:	13 c0       	rjmp	.+38     	; 0x1ab6a <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1ab44:	b8 01       	movw	r22, r16
   1ab46:	28 dc       	rcall	.-1968   	; 0x1a398 <lif_find_file>
    if(index == -1)
   1ab48:	01 96       	adiw	r24, 0x01	; 1
   1ab4a:	91 f4       	brne	.+36     	; 0x1ab70 <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1ab4c:	ed b7       	in	r30, 0x3d	; 61
   1ab4e:	fe b7       	in	r31, 0x3e	; 62
   1ab50:	15 83       	std	Z+5, r17	; 0x05
   1ab52:	04 83       	std	Z+4, r16	; 0x04
   1ab54:	83 ee       	ldi	r24, 0xE3	; 227
   1ab56:	92 e3       	ldi	r25, 0x32	; 50
   1ab58:	a0 e0       	ldi	r26, 0x00	; 0
   1ab5a:	81 83       	std	Z+1, r24	; 0x01
   1ab5c:	92 83       	std	Z+2, r25	; 0x02
   1ab5e:	a3 83       	std	Z+3, r26	; 0x03
   1ab60:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ab64:	c6 01       	movw	r24, r12
   1ab66:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1ab6a:	80 e0       	ldi	r24, 0x00	; 0
   1ab6c:	90 e0       	ldi	r25, 0x00	; 0
   1ab6e:	73 c2       	rjmp	.+1254   	; 0x1b056 <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1ab70:	f6 01       	movw	r30, r12
   1ab72:	e6 5a       	subi	r30, 0xA6	; 166
   1ab74:	ff 4f       	sbci	r31, 0xFF	; 255
   1ab76:	80 81       	ld	r24, Z
   1ab78:	91 81       	ldd	r25, Z+1	; 0x01
   1ab7a:	9c 01       	movw	r18, r24
   1ab7c:	2c 7f       	andi	r18, 0xFC	; 252
   1ab7e:	20 31       	cpi	r18, 0x10	; 16
   1ab80:	30 4e       	sbci	r19, 0xE0	; 224
   1ab82:	a9 f0       	breq	.+42     	; 0x1abae <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1ab84:	ed b7       	in	r30, 0x3d	; 61
   1ab86:	fe b7       	in	r31, 0x3e	; 62
   1ab88:	97 83       	std	Z+7, r25	; 0x07
   1ab8a:	86 83       	std	Z+6, r24	; 0x06
   1ab8c:	ca 5d       	subi	r28, 0xDA	; 218
   1ab8e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab90:	28 81       	ld	r18, Y
   1ab92:	39 81       	ldd	r19, Y+1	; 0x01
   1ab94:	c6 52       	subi	r28, 0x26	; 38
   1ab96:	d2 40       	sbci	r29, 0x02	; 2
   1ab98:	35 83       	std	Z+5, r19	; 0x05
   1ab9a:	24 83       	std	Z+4, r18	; 0x04
   1ab9c:	8b ea       	ldi	r24, 0xAB	; 171
   1ab9e:	92 e3       	ldi	r25, 0x32	; 50
   1aba0:	a0 e0       	ldi	r26, 0x00	; 0
   1aba2:	81 83       	std	Z+1, r24	; 0x01
   1aba4:	92 83       	std	Z+2, r25	; 0x02
   1aba6:	a3 83       	std	Z+3, r26	; 0x03
   1aba8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1abac:	db cf       	rjmp	.-74     	; 0x1ab64 <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1abae:	f6 01       	movw	r30, r12
   1abb0:	e4 5a       	subi	r30, 0xA4	; 164
   1abb2:	ff 4f       	sbci	r31, 0xFF	; 255
   1abb4:	80 80       	ld	r8, Z
   1abb6:	91 80       	ldd	r9, Z+1	; 0x01
   1abb8:	a2 80       	ldd	r10, Z+2	; 0x02
   1abba:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1abbc:	34 96       	adiw	r30, 0x04	; 4
   1abbe:	80 81       	ld	r24, Z
   1abc0:	91 81       	ldd	r25, Z+1	; 0x01
   1abc2:	a2 81       	ldd	r26, Z+2	; 0x02
   1abc4:	b3 81       	ldd	r27, Z+3	; 0x03
   1abc6:	a5 01       	movw	r20, r10
   1abc8:	94 01       	movw	r18, r8
   1abca:	28 0f       	add	r18, r24
   1abcc:	39 1f       	adc	r19, r25
   1abce:	4a 1f       	adc	r20, r26
   1abd0:	5b 1f       	adc	r21, r27
   1abd2:	c4 5d       	subi	r28, 0xD4	; 212
   1abd4:	dd 4f       	sbci	r29, 0xFD	; 253
   1abd6:	28 83       	st	Y, r18
   1abd8:	39 83       	std	Y+1, r19	; 0x01
   1abda:	4a 83       	std	Y+2, r20	; 0x02
   1abdc:	5b 83       	std	Y+3, r21	; 0x03
   1abde:	cc 52       	subi	r28, 0x2C	; 44
   1abe0:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1abe2:	c6 01       	movw	r24, r12
   1abe4:	8c 59       	subi	r24, 0x9C	; 156
   1abe6:	9f 4f       	sbci	r25, 0xFF	; 255
   1abe8:	0e 94 4e c3 	call	0x1869c	; 0x1869c <lif_lifbcd2time>
   1abec:	c8 5d       	subi	r28, 0xD8	; 216
   1abee:	dd 4f       	sbci	r29, 0xFD	; 253
   1abf0:	68 83       	st	Y, r22
   1abf2:	79 83       	std	Y+1, r23	; 0x01
   1abf4:	8a 83       	std	Y+2, r24	; 0x02
   1abf6:	9b 83       	std	Y+3, r25	; 0x03
   1abf8:	c8 52       	subi	r28, 0x28	; 40
   1abfa:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1abfc:	ba 2d       	mov	r27, r10
   1abfe:	a9 2d       	mov	r26, r9
   1ac00:	98 2d       	mov	r25, r8
   1ac02:	88 27       	eor	r24, r24
   1ac04:	c2 5e       	subi	r28, 0xE2	; 226
   1ac06:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac08:	88 83       	st	Y, r24
   1ac0a:	99 83       	std	Y+1, r25	; 0x01
   1ac0c:	aa 83       	std	Y+2, r26	; 0x02
   1ac0e:	bb 83       	std	Y+3, r27	; 0x03
   1ac10:	ce 51       	subi	r28, 0x1E	; 30
   1ac12:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1ac14:	6b ef       	ldi	r22, 0xFB	; 251
   1ac16:	78 e0       	ldi	r23, 0x08	; 8
   1ac18:	ca 5d       	subi	r28, 0xDA	; 218
   1ac1a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac1c:	88 81       	ld	r24, Y
   1ac1e:	99 81       	ldd	r25, Y+1	; 0x01
   1ac20:	c6 52       	subi	r28, 0x26	; 38
   1ac22:	d2 40       	sbci	r29, 0x02	; 2
   1ac24:	0e 94 12 bf 	call	0x17e24	; 0x17e24 <lif_open>
   1ac28:	cc 5d       	subi	r28, 0xDC	; 220
   1ac2a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac2c:	99 83       	std	Y+1, r25	; 0x01
   1ac2e:	88 83       	st	Y, r24
   1ac30:	c4 52       	subi	r28, 0x24	; 36
   1ac32:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1ac34:	89 2b       	or	r24, r25
   1ac36:	09 f4       	brne	.+2      	; 0x1ac3a <lif_extract_e010_as_ascii+0x138>
   1ac38:	95 cf       	rjmp	.-214    	; 0x1ab64 <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1ac3a:	ca 5d       	subi	r28, 0xDA	; 218
   1ac3c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac3e:	28 81       	ld	r18, Y
   1ac40:	39 81       	ldd	r19, Y+1	; 0x01
   1ac42:	c6 52       	subi	r28, 0x26	; 38
   1ac44:	d2 40       	sbci	r29, 0x02	; 2
   1ac46:	ed b7       	in	r30, 0x3d	; 61
   1ac48:	fe b7       	in	r31, 0x3e	; 62
   1ac4a:	35 83       	std	Z+5, r19	; 0x05
   1ac4c:	24 83       	std	Z+4, r18	; 0x04
   1ac4e:	8b e9       	ldi	r24, 0x9B	; 155
   1ac50:	92 e3       	ldi	r25, 0x32	; 50
   1ac52:	a0 e0       	ldi	r26, 0x00	; 0
   1ac54:	81 83       	std	Z+1, r24	; 0x01
   1ac56:	92 83       	std	Z+2, r25	; 0x02
   1ac58:	a3 83       	std	Z+3, r26	; 0x03
   1ac5a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

    bytes = 0;
    wind = 0;
   1ac5e:	21 2c       	mov	r2, r1
   1ac60:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1ac62:	ce 5d       	subi	r28, 0xDE	; 222
   1ac64:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac66:	19 82       	std	Y+1, r1	; 0x01
   1ac68:	18 82       	st	Y, r1
   1ac6a:	c2 52       	subi	r28, 0x22	; 34
   1ac6c:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1ac6e:	ee 24       	eor	r14, r14
   1ac70:	e3 94       	inc	r14
   1ac72:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1ac74:	41 2c       	mov	r4, r1
   1ac76:	51 2c       	mov	r5, r1
   1ac78:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1ac7a:	8a ed       	ldi	r24, 0xDA	; 218
   1ac7c:	91 e3       	ldi	r25, 0x31	; 49
   1ac7e:	9c 01       	movw	r18, r24
   1ac80:	40 e0       	ldi	r20, 0x00	; 0
   1ac82:	ce 5c       	subi	r28, 0xCE	; 206
   1ac84:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac86:	28 83       	st	Y, r18
   1ac88:	39 83       	std	Y+1, r19	; 0x01
   1ac8a:	4a 83       	std	Y+2, r20	; 0x02
   1ac8c:	c2 53       	subi	r28, 0x32	; 50
   1ac8e:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1ac90:	88 ee       	ldi	r24, 0xE8	; 232
   1ac92:	91 e3       	ldi	r25, 0x31	; 49
   1ac94:	9c 01       	movw	r18, r24
   1ac96:	40 e0       	ldi	r20, 0x00	; 0
   1ac98:	cb 5c       	subi	r28, 0xCB	; 203
   1ac9a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac9c:	28 83       	st	Y, r18
   1ac9e:	39 83       	std	Y+1, r19	; 0x01
   1aca0:	4a 83       	std	Y+2, r20	; 0x02
   1aca2:	c5 53       	subi	r28, 0x35	; 53
   1aca4:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1aca6:	c2 5e       	subi	r28, 0xE2	; 226
   1aca8:	dd 4f       	sbci	r29, 0xFD	; 253
   1acaa:	28 81       	ld	r18, Y
   1acac:	39 81       	ldd	r19, Y+1	; 0x01
   1acae:	4a 81       	ldd	r20, Y+2	; 0x02
   1acb0:	5b 81       	ldd	r21, Y+3	; 0x03
   1acb2:	ce 51       	subi	r28, 0x1E	; 30
   1acb4:	d2 40       	sbci	r29, 0x02	; 2
   1acb6:	bb 27       	eor	r27, r27
   1acb8:	a5 2f       	mov	r26, r21
   1acba:	94 2f       	mov	r25, r20
   1acbc:	83 2f       	mov	r24, r19
   1acbe:	c4 5d       	subi	r28, 0xD4	; 212
   1acc0:	dd 4f       	sbci	r29, 0xFD	; 253
   1acc2:	28 81       	ld	r18, Y
   1acc4:	39 81       	ldd	r19, Y+1	; 0x01
   1acc6:	4a 81       	ldd	r20, Y+2	; 0x02
   1acc8:	5b 81       	ldd	r21, Y+3	; 0x03
   1acca:	cc 52       	subi	r28, 0x2C	; 44
   1accc:	d2 40       	sbci	r29, 0x02	; 2
   1acce:	28 17       	cp	r18, r24
   1acd0:	39 07       	cpc	r19, r25
   1acd2:	4a 07       	cpc	r20, r26
   1acd4:	5b 07       	cpc	r21, r27
   1acd6:	08 f4       	brcc	.+2      	; 0x1acda <lif_extract_e010_as_ascii+0x1d8>
   1acd8:	51 c1       	rjmp	.+674    	; 0x1af7c <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1acda:	00 e0       	ldi	r16, 0x00	; 0
   1acdc:	11 e0       	ldi	r17, 0x01	; 1
   1acde:	c2 5e       	subi	r28, 0xE2	; 226
   1ace0:	dd 4f       	sbci	r29, 0xFD	; 253
   1ace2:	28 81       	ld	r18, Y
   1ace4:	39 81       	ldd	r19, Y+1	; 0x01
   1ace6:	4a 81       	ldd	r20, Y+2	; 0x02
   1ace8:	5b 81       	ldd	r21, Y+3	; 0x03
   1acea:	ce 51       	subi	r28, 0x1E	; 30
   1acec:	d2 40       	sbci	r29, 0x02	; 2
   1acee:	be 01       	movw	r22, r28
   1acf0:	60 5f       	subi	r22, 0xF0	; 240
   1acf2:	7e 4f       	sbci	r23, 0xFE	; 254
   1acf4:	c6 01       	movw	r24, r12
   1acf6:	0e 94 96 bf 	call	0x17f2c	; 0x17f2c <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1acfa:	6f 3f       	cpi	r22, 0xFF	; 255
   1acfc:	71 05       	cpc	r23, r1
   1acfe:	09 f0       	breq	.+2      	; 0x1ad02 <lif_extract_e010_as_ascii+0x200>
   1ad00:	0c f4       	brge	.+2      	; 0x1ad04 <lif_extract_e010_as_ascii+0x202>
   1ad02:	3a c1       	rjmp	.+628    	; 0x1af78 <lif_extract_e010_as_ascii+0x476>
   1ad04:	00 e0       	ldi	r16, 0x00	; 0
   1ad06:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1ad08:	ce 5d       	subi	r28, 0xDE	; 222
   1ad0a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad0c:	88 81       	ld	r24, Y
   1ad0e:	99 81       	ldd	r25, Y+1	; 0x01
   1ad10:	c2 52       	subi	r28, 0x22	; 34
   1ad12:	d2 40       	sbci	r29, 0x02	; 2
   1ad14:	89 2b       	or	r24, r25
   1ad16:	09 f0       	breq	.+2      	; 0x1ad1a <lif_extract_e010_as_ascii+0x218>
   1ad18:	1b c1       	rjmp	.+566    	; 0x1af50 <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1ad1a:	e0 e1       	ldi	r30, 0x10	; 16
   1ad1c:	f1 e0       	ldi	r31, 0x01	; 1
   1ad1e:	ec 0f       	add	r30, r28
   1ad20:	fd 1f       	adc	r31, r29
   1ad22:	e0 0f       	add	r30, r16
   1ad24:	f1 1f       	adc	r31, r17
   1ad26:	80 81       	ld	r24, Z
   1ad28:	98 2f       	mov	r25, r24
   1ad2a:	9f 7e       	andi	r25, 0xEF	; 239
   1ad2c:	9f 3c       	cpi	r25, 0xCF	; 207
   1ad2e:	11 f0       	breq	.+4      	; 0x1ad34 <lif_extract_e010_as_ascii+0x232>
   1ad30:	8f 36       	cpi	r24, 0x6F	; 111
   1ad32:	c9 f5       	brne	.+114    	; 0x1ada6 <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1ad34:	e0 e1       	ldi	r30, 0x10	; 16
   1ad36:	f1 e0       	ldi	r31, 0x01	; 1
   1ad38:	ec 0f       	add	r30, r28
   1ad3a:	fd 1f       	adc	r31, r29
   1ad3c:	e0 0f       	add	r30, r16
   1ad3e:	f1 1f       	adc	r31, r17
   1ad40:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1ad42:	f8 01       	movw	r30, r16
   1ad44:	32 96       	adiw	r30, 0x02	; 2
   1ad46:	40 e1       	ldi	r20, 0x10	; 16
   1ad48:	51 e0       	ldi	r21, 0x01	; 1
   1ad4a:	4c 0f       	add	r20, r28
   1ad4c:	5d 1f       	adc	r21, r29
   1ad4e:	e4 0f       	add	r30, r20
   1ad50:	f5 1f       	adc	r31, r21
   1ad52:	0d 5f       	subi	r16, 0xFD	; 253
   1ad54:	1f 4f       	sbci	r17, 0xFF	; 255
   1ad56:	80 81       	ld	r24, Z
   1ad58:	b1 2c       	mov	r11, r1
   1ad5a:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1ad5c:	a1 14       	cp	r10, r1
   1ad5e:	b1 04       	cpc	r11, r1
   1ad60:	09 f4       	brne	.+2      	; 0x1ad64 <lif_extract_e010_as_ascii+0x262>
   1ad62:	ee c0       	rjmp	.+476    	; 0x1af40 <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1ad64:	5f ef       	ldi	r21, 0xFF	; 255
   1ad66:	a5 16       	cp	r10, r21
   1ad68:	b1 04       	cpc	r11, r1
   1ad6a:	09 f0       	breq	.+2      	; 0x1ad6e <lif_extract_e010_as_ascii+0x26c>
   1ad6c:	7c f4       	brge	.+30     	; 0x1ad8c <lif_extract_e010_as_ascii+0x28a>
   1ad6e:	c4 5e       	subi	r28, 0xE4	; 228
   1ad70:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad72:	19 82       	std	Y+1, r1	; 0x01
   1ad74:	18 82       	st	Y, r1
   1ad76:	cc 51       	subi	r28, 0x1C	; 28
   1ad78:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1ad7a:	c5 01       	movw	r24, r10
   1ad7c:	01 97       	sbiw	r24, 0x01	; 1
   1ad7e:	c0 5d       	subi	r28, 0xD0	; 208
   1ad80:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad82:	99 83       	std	Y+1, r25	; 0x01
   1ad84:	88 83       	st	Y, r24
   1ad86:	c0 53       	subi	r28, 0x30	; 48
   1ad88:	d2 40       	sbci	r29, 0x02	; 2
   1ad8a:	68 c0       	rjmp	.+208    	; 0x1ae5c <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1ad8c:	ed b7       	in	r30, 0x3d	; 61
   1ad8e:	fe b7       	in	r31, 0x3e	; 62
   1ad90:	b5 82       	std	Z+5, r11	; 0x05
   1ad92:	a4 82       	std	Z+4, r10	; 0x04
   1ad94:	86 e6       	ldi	r24, 0x66	; 102
   1ad96:	92 e3       	ldi	r25, 0x32	; 50
   1ad98:	a0 e0       	ldi	r26, 0x00	; 0
   1ad9a:	81 83       	std	Z+1, r24	; 0x01
   1ad9c:	92 83       	std	Z+2, r25	; 0x02
   1ad9e:	a3 83       	std	Z+3, r26	; 0x03
   1ada0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1ada4:	1e c0       	rjmp	.+60     	; 0x1ade2 <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1ada6:	8f 3e       	cpi	r24, 0xEF	; 239
   1ada8:	09 f4       	brne	.+2      	; 0x1adac <lif_extract_e010_as_ascii+0x2aa>
   1adaa:	d2 c0       	rjmp	.+420    	; 0x1af50 <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1adac:	ed b7       	in	r30, 0x3d	; 61
   1adae:	fe b7       	in	r31, 0x3e	; 62
   1adb0:	13 87       	std	Z+11, r17	; 0x0b
   1adb2:	02 87       	std	Z+10, r16	; 0x0a
   1adb4:	c2 5e       	subi	r28, 0xE2	; 226
   1adb6:	dd 4f       	sbci	r29, 0xFD	; 253
   1adb8:	28 81       	ld	r18, Y
   1adba:	39 81       	ldd	r19, Y+1	; 0x01
   1adbc:	4a 81       	ldd	r20, Y+2	; 0x02
   1adbe:	5b 81       	ldd	r21, Y+3	; 0x03
   1adc0:	ce 51       	subi	r28, 0x1E	; 30
   1adc2:	d2 40       	sbci	r29, 0x02	; 2
   1adc4:	26 83       	std	Z+6, r18	; 0x06
   1adc6:	37 83       	std	Z+7, r19	; 0x07
   1adc8:	40 87       	std	Z+8, r20	; 0x08
   1adca:	51 87       	std	Z+9, r21	; 0x09
   1adcc:	90 e0       	ldi	r25, 0x00	; 0
   1adce:	95 83       	std	Z+5, r25	; 0x05
   1add0:	84 83       	std	Z+4, r24	; 0x04
   1add2:	80 e1       	ldi	r24, 0x10	; 16
   1add4:	92 e3       	ldi	r25, 0x32	; 50
   1add6:	a0 e0       	ldi	r26, 0x00	; 0
   1add8:	81 83       	std	Z+1, r24	; 0x01
   1adda:	92 83       	std	Z+2, r25	; 0x02
   1addc:	a3 83       	std	Z+3, r26	; 0x03
   1adde:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
                status = 0;
                done = 1;
   1ade2:	21 e0       	ldi	r18, 0x01	; 1
   1ade4:	30 e0       	ldi	r19, 0x00	; 0
   1ade6:	ce 5d       	subi	r28, 0xDE	; 222
   1ade8:	dd 4f       	sbci	r29, 0xFD	; 253
   1adea:	39 83       	std	Y+1, r19	; 0x01
   1adec:	28 83       	st	Y, r18
   1adee:	c2 52       	subi	r28, 0x22	; 34
   1adf0:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1adf2:	e1 2c       	mov	r14, r1
   1adf4:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1adf6:	ac c0       	rjmp	.+344    	; 0x1af50 <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1adf8:	0f 3f       	cpi	r16, 0xFF	; 255
   1adfa:	11 05       	cpc	r17, r1
   1adfc:	11 f0       	breq	.+4      	; 0x1ae02 <lif_extract_e010_as_ascii+0x300>
   1adfe:	0c f0       	brlt	.+2      	; 0x1ae02 <lif_extract_e010_as_ascii+0x300>
   1ae00:	a7 c0       	rjmp	.+334    	; 0x1af50 <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1ae02:	e0 e1       	ldi	r30, 0x10	; 16
   1ae04:	f1 e0       	ldi	r31, 0x01	; 1
   1ae06:	ec 0f       	add	r30, r28
   1ae08:	fd 1f       	adc	r31, r29
   1ae0a:	e0 0f       	add	r30, r16
   1ae0c:	f1 1f       	adc	r31, r17
   1ae0e:	20 81       	ld	r18, Z
   1ae10:	a1 01       	movw	r20, r2
   1ae12:	4f 5f       	subi	r20, 0xFF	; 255
   1ae14:	5f 4f       	sbci	r21, 0xFF	; 255
   1ae16:	4a 01       	movw	r8, r20
   1ae18:	2d 30       	cpi	r18, 0x0D	; 13
   1ae1a:	51 f1       	breq	.+84     	; 0x1ae70 <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1ae1c:	98 2d       	mov	r25, r8
   1ae1e:	89 2d       	mov	r24, r9
   1ae20:	0f 5f       	subi	r16, 0xFF	; 255
   1ae22:	1f 4f       	sbci	r17, 0xFF	; 255
   1ae24:	ec e0       	ldi	r30, 0x0C	; 12
   1ae26:	f0 e0       	ldi	r31, 0x00	; 0
   1ae28:	ec 0f       	add	r30, r28
   1ae2a:	fd 1f       	adc	r31, r29
   1ae2c:	e2 0d       	add	r30, r2
   1ae2e:	f3 1d       	adc	r31, r3
   1ae30:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1ae32:	ef ef       	ldi	r30, 0xFF	; 255
   1ae34:	8e 16       	cp	r8, r30
   1ae36:	91 04       	cpc	r9, r1
   1ae38:	09 f0       	breq	.+2      	; 0x1ae3c <lif_extract_e010_as_ascii+0x33a>
   1ae3a:	ac f5       	brge	.+106    	; 0x1aea6 <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1ae3c:	c4 5e       	subi	r28, 0xE4	; 228
   1ae3e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae40:	28 81       	ld	r18, Y
   1ae42:	39 81       	ldd	r19, Y+1	; 0x01
   1ae44:	cc 51       	subi	r28, 0x1C	; 28
   1ae46:	d2 40       	sbci	r29, 0x02	; 2
   1ae48:	2f 5f       	subi	r18, 0xFF	; 255
   1ae4a:	3f 4f       	sbci	r19, 0xFF	; 255
   1ae4c:	c4 5e       	subi	r28, 0xE4	; 228
   1ae4e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae50:	39 83       	std	Y+1, r19	; 0x01
   1ae52:	28 83       	st	Y, r18
   1ae54:	cc 51       	subi	r28, 0x1C	; 28
   1ae56:	d2 40       	sbci	r29, 0x02	; 2
   1ae58:	29 2e       	mov	r2, r25
   1ae5a:	38 2e       	mov	r3, r24
   1ae5c:	c4 5e       	subi	r28, 0xE4	; 228
   1ae5e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae60:	48 81       	ld	r20, Y
   1ae62:	59 81       	ldd	r21, Y+1	; 0x01
   1ae64:	cc 51       	subi	r28, 0x1C	; 28
   1ae66:	d2 40       	sbci	r29, 0x02	; 2
   1ae68:	4a 15       	cp	r20, r10
   1ae6a:	5b 05       	cpc	r21, r11
   1ae6c:	2c f2       	brlt	.-118    	; 0x1adf8 <lif_extract_e010_as_ascii+0x2f6>
   1ae6e:	62 c0       	rjmp	.+196    	; 0x1af34 <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1ae70:	c4 5e       	subi	r28, 0xE4	; 228
   1ae72:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae74:	88 81       	ld	r24, Y
   1ae76:	99 81       	ldd	r25, Y+1	; 0x01
   1ae78:	cc 51       	subi	r28, 0x1C	; 28
   1ae7a:	d2 40       	sbci	r29, 0x02	; 2
   1ae7c:	c0 5d       	subi	r28, 0xD0	; 208
   1ae7e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae80:	a8 81       	ld	r26, Y
   1ae82:	b9 81       	ldd	r27, Y+1	; 0x01
   1ae84:	c0 53       	subi	r28, 0x30	; 48
   1ae86:	d2 40       	sbci	r29, 0x02	; 2
   1ae88:	8a 17       	cp	r24, r26
   1ae8a:	9b 07       	cpc	r25, r27
   1ae8c:	39 f6       	brne	.-114    	; 0x1ae1c <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1ae8e:	ec e0       	ldi	r30, 0x0C	; 12
   1ae90:	f0 e0       	ldi	r31, 0x00	; 0
   1ae92:	ec 0f       	add	r30, r28
   1ae94:	fd 1f       	adc	r31, r29
   1ae96:	e2 0d       	add	r30, r2
   1ae98:	f3 1d       	adc	r31, r3
   1ae9a:	ba e0       	ldi	r27, 0x0A	; 10
   1ae9c:	b0 83       	st	Z, r27
                    ++ind;
   1ae9e:	0f 5f       	subi	r16, 0xFF	; 255
   1aea0:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1aea2:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1aea4:	47 c0       	rjmp	.+142    	; 0x1af34 <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1aea6:	cc 5d       	subi	r28, 0xDC	; 220
   1aea8:	dd 4f       	sbci	r29, 0xFD	; 253
   1aeaa:	28 81       	ld	r18, Y
   1aeac:	39 81       	ldd	r19, Y+1	; 0x01
   1aeae:	c4 52       	subi	r28, 0x24	; 36
   1aeb0:	d2 40       	sbci	r29, 0x02	; 2
   1aeb2:	a4 01       	movw	r20, r8
   1aeb4:	61 e0       	ldi	r22, 0x01	; 1
   1aeb6:	70 e0       	ldi	r23, 0x00	; 0
   1aeb8:	ce 01       	movw	r24, r28
   1aeba:	0c 96       	adiw	r24, 0x0c	; 12
   1aebc:	0e 94 e7 7c 	call	0xf9ce	; 0xf9ce <fwrite>
                    if(size < wind)
   1aec0:	88 15       	cp	r24, r8
   1aec2:	99 05       	cpc	r25, r9
   1aec4:	d4 f4       	brge	.+52     	; 0x1aefa <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1aec6:	cb 5c       	subi	r28, 0xCB	; 203
   1aec8:	dd 4f       	sbci	r29, 0xFD	; 253
   1aeca:	28 81       	ld	r18, Y
   1aecc:	39 81       	ldd	r19, Y+1	; 0x01
   1aece:	4a 81       	ldd	r20, Y+2	; 0x02
   1aed0:	c5 53       	subi	r28, 0x35	; 53
   1aed2:	d2 40       	sbci	r29, 0x02	; 2
   1aed4:	ed b7       	in	r30, 0x3d	; 61
   1aed6:	fe b7       	in	r31, 0x3e	; 62
   1aed8:	21 83       	std	Z+1, r18	; 0x01
   1aeda:	32 83       	std	Z+2, r19	; 0x02
   1aedc:	43 83       	std	Z+3, r20	; 0x03
   1aede:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1aee2:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1aee4:	21 e0       	ldi	r18, 0x01	; 1
   1aee6:	30 e0       	ldi	r19, 0x00	; 0
   1aee8:	ce 5d       	subi	r28, 0xDE	; 222
   1aeea:	dd 4f       	sbci	r29, 0xFD	; 253
   1aeec:	39 83       	std	Y+1, r19	; 0x01
   1aeee:	28 83       	st	Y, r18
   1aef0:	c2 52       	subi	r28, 0x22	; 34
   1aef2:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1aef4:	e1 2c       	mov	r14, r1
   1aef6:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1aef8:	1d c0       	rjmp	.+58     	; 0x1af34 <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1aefa:	09 2e       	mov	r0, r25
   1aefc:	00 0c       	add	r0, r0
   1aefe:	aa 0b       	sbc	r26, r26
   1af00:	bb 0b       	sbc	r27, r27
   1af02:	48 0e       	add	r4, r24
   1af04:	59 1e       	adc	r5, r25
   1af06:	6a 1e       	adc	r6, r26
   1af08:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1af0a:	ed b7       	in	r30, 0x3d	; 61
   1af0c:	fe b7       	in	r31, 0x3e	; 62
   1af0e:	44 82       	std	Z+4, r4	; 0x04
   1af10:	55 82       	std	Z+5, r5	; 0x05
   1af12:	66 82       	std	Z+6, r6	; 0x06
   1af14:	77 82       	std	Z+7, r7	; 0x07
   1af16:	ce 5c       	subi	r28, 0xCE	; 206
   1af18:	dd 4f       	sbci	r29, 0xFD	; 253
   1af1a:	28 81       	ld	r18, Y
   1af1c:	39 81       	ldd	r19, Y+1	; 0x01
   1af1e:	4a 81       	ldd	r20, Y+2	; 0x02
   1af20:	c2 53       	subi	r28, 0x32	; 50
   1af22:	d2 40       	sbci	r29, 0x02	; 2
   1af24:	21 83       	std	Z+1, r18	; 0x01
   1af26:	32 83       	std	Z+2, r19	; 0x02
   1af28:	43 83       	std	Z+3, r20	; 0x03
   1af2a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
                    wind = 0;
   1af2e:	90 e0       	ldi	r25, 0x00	; 0
   1af30:	80 e0       	ldi	r24, 0x00	; 0
   1af32:	84 cf       	rjmp	.-248    	; 0x1ae3c <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1af34:	0f 3f       	cpi	r16, 0xFF	; 255
   1af36:	11 05       	cpc	r17, r1
   1af38:	09 f0       	breq	.+2      	; 0x1af3c <lif_extract_e010_as_ascii+0x43a>
   1af3a:	0c f4       	brge	.+2      	; 0x1af3e <lif_extract_e010_as_ascii+0x43c>
   1af3c:	e5 ce       	rjmp	.-566    	; 0x1ad08 <lif_extract_e010_as_ascii+0x206>
   1af3e:	08 c0       	rjmp	.+16     	; 0x1af50 <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1af40:	a1 e0       	ldi	r26, 0x01	; 1
   1af42:	b0 e0       	ldi	r27, 0x00	; 0
   1af44:	ce 5d       	subi	r28, 0xDE	; 222
   1af46:	dd 4f       	sbci	r29, 0xFD	; 253
   1af48:	b9 83       	std	Y+1, r27	; 0x01
   1af4a:	a8 83       	st	Y, r26
   1af4c:	c2 52       	subi	r28, 0x22	; 34
   1af4e:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1af50:	c2 5e       	subi	r28, 0xE2	; 226
   1af52:	dd 4f       	sbci	r29, 0xFD	; 253
   1af54:	28 81       	ld	r18, Y
   1af56:	39 81       	ldd	r19, Y+1	; 0x01
   1af58:	4a 81       	ldd	r20, Y+2	; 0x02
   1af5a:	5b 81       	ldd	r21, Y+3	; 0x03
   1af5c:	ce 51       	subi	r28, 0x1E	; 30
   1af5e:	d2 40       	sbci	r29, 0x02	; 2
   1af60:	3f 5f       	subi	r19, 0xFF	; 255
   1af62:	4f 4f       	sbci	r20, 0xFF	; 255
   1af64:	5f 4f       	sbci	r21, 0xFF	; 255
   1af66:	c2 5e       	subi	r28, 0xE2	; 226
   1af68:	dd 4f       	sbci	r29, 0xFD	; 253
   1af6a:	28 83       	st	Y, r18
   1af6c:	39 83       	std	Y+1, r19	; 0x01
   1af6e:	4a 83       	std	Y+2, r20	; 0x02
   1af70:	5b 83       	std	Y+3, r21	; 0x03
   1af72:	ce 51       	subi	r28, 0x1E	; 30
   1af74:	d2 40       	sbci	r29, 0x02	; 2
   1af76:	97 ce       	rjmp	.-722    	; 0x1aca6 <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1af78:	e1 2c       	mov	r14, r1
   1af7a:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af7c:	c6 01       	movw	r24, r12
   1af7e:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1af82:	21 14       	cp	r2, r1
   1af84:	31 04       	cpc	r3, r1
   1af86:	31 f1       	breq	.+76     	; 0x1afd4 <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1af88:	cc 5d       	subi	r28, 0xDC	; 220
   1af8a:	dd 4f       	sbci	r29, 0xFD	; 253
   1af8c:	28 81       	ld	r18, Y
   1af8e:	39 81       	ldd	r19, Y+1	; 0x01
   1af90:	c4 52       	subi	r28, 0x24	; 36
   1af92:	d2 40       	sbci	r29, 0x02	; 2
   1af94:	a1 01       	movw	r20, r2
   1af96:	61 e0       	ldi	r22, 0x01	; 1
   1af98:	70 e0       	ldi	r23, 0x00	; 0
   1af9a:	ce 01       	movw	r24, r28
   1af9c:	0c 96       	adiw	r24, 0x0c	; 12
   1af9e:	0e 94 e7 7c 	call	0xf9ce	; 0xf9ce <fwrite>
   1afa2:	8c 01       	movw	r16, r24
        if(size < wind)
   1afa4:	82 15       	cp	r24, r2
   1afa6:	93 05       	cpc	r25, r3
   1afa8:	64 f4       	brge	.+24     	; 0x1afc2 <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1afaa:	82 eb       	ldi	r24, 0xB2	; 178
   1afac:	91 e3       	ldi	r25, 0x31	; 49
   1afae:	a0 e0       	ldi	r26, 0x00	; 0
   1afb0:	ed b7       	in	r30, 0x3d	; 61
   1afb2:	fe b7       	in	r31, 0x3e	; 62
   1afb4:	81 83       	std	Z+1, r24	; 0x01
   1afb6:	92 83       	std	Z+2, r25	; 0x02
   1afb8:	a3 83       	std	Z+3, r26	; 0x03
   1afba:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            status = 0;
   1afbe:	e1 2c       	mov	r14, r1
   1afc0:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1afc2:	c8 01       	movw	r24, r16
   1afc4:	01 2e       	mov	r0, r17
   1afc6:	00 0c       	add	r0, r0
   1afc8:	aa 0b       	sbc	r26, r26
   1afca:	bb 0b       	sbc	r27, r27
   1afcc:	48 0e       	add	r4, r24
   1afce:	59 1e       	adc	r5, r25
   1afd0:	6a 1e       	adc	r6, r26
   1afd2:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1afd4:	cc 5d       	subi	r28, 0xDC	; 220
   1afd6:	dd 4f       	sbci	r29, 0xFD	; 253
   1afd8:	88 81       	ld	r24, Y
   1afda:	99 81       	ldd	r25, Y+1	; 0x01
   1afdc:	c4 52       	subi	r28, 0x24	; 36
   1afde:	d2 40       	sbci	r29, 0x02	; 2
   1afe0:	0e 94 69 7d 	call	0xfad2	; 0xfad2 <fclose>
    if(t)
   1afe4:	c8 5d       	subi	r28, 0xD8	; 216
   1afe6:	dd 4f       	sbci	r29, 0xFD	; 253
   1afe8:	28 81       	ld	r18, Y
   1afea:	39 81       	ldd	r19, Y+1	; 0x01
   1afec:	4a 81       	ldd	r20, Y+2	; 0x02
   1afee:	5b 81       	ldd	r21, Y+3	; 0x03
   1aff0:	c8 52       	subi	r28, 0x28	; 40
   1aff2:	d2 40       	sbci	r29, 0x02	; 2
   1aff4:	21 15       	cp	r18, r1
   1aff6:	31 05       	cpc	r19, r1
   1aff8:	41 05       	cpc	r20, r1
   1affa:	51 05       	cpc	r21, r1
   1affc:	d9 f0       	breq	.+54     	; 0x1b034 <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1affe:	c8 5e       	subi	r28, 0xE8	; 232
   1b000:	dd 4f       	sbci	r29, 0xFD	; 253
   1b002:	28 83       	st	Y, r18
   1b004:	39 83       	std	Y+1, r19	; 0x01
   1b006:	4a 83       	std	Y+2, r20	; 0x02
   1b008:	5b 83       	std	Y+3, r21	; 0x03
   1b00a:	c8 51       	subi	r28, 0x18	; 24
   1b00c:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1b00e:	cc 5e       	subi	r28, 0xEC	; 236
   1b010:	dd 4f       	sbci	r29, 0xFD	; 253
   1b012:	28 83       	st	Y, r18
   1b014:	39 83       	std	Y+1, r19	; 0x01
   1b016:	4a 83       	std	Y+2, r20	; 0x02
   1b018:	5b 83       	std	Y+3, r21	; 0x03
   1b01a:	c4 51       	subi	r28, 0x14	; 20
   1b01c:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1b01e:	be 01       	movw	r22, r28
   1b020:	6c 5e       	subi	r22, 0xEC	; 236
   1b022:	7d 4f       	sbci	r23, 0xFD	; 253
   1b024:	ca 5d       	subi	r28, 0xDA	; 218
   1b026:	dd 4f       	sbci	r29, 0xFD	; 253
   1b028:	88 81       	ld	r24, Y
   1b02a:	99 81       	ldd	r25, Y+1	; 0x01
   1b02c:	c6 52       	subi	r28, 0x26	; 38
   1b02e:	d2 40       	sbci	r29, 0x02	; 2
   1b030:	0e 94 a6 7a 	call	0xf54c	; 0xf54c <utime>
    }
    sync();
   1b034:	0e 94 64 7c 	call	0xf8c8	; 0xf8c8 <sync>
    printf("\tWrote: %8ld\n", bytes);
   1b038:	ed b7       	in	r30, 0x3d	; 61
   1b03a:	fe b7       	in	r31, 0x3e	; 62
   1b03c:	44 82       	std	Z+4, r4	; 0x04
   1b03e:	55 82       	std	Z+5, r5	; 0x05
   1b040:	66 82       	std	Z+6, r6	; 0x06
   1b042:	77 82       	std	Z+7, r7	; 0x07
   1b044:	84 ea       	ldi	r24, 0xA4	; 164
   1b046:	91 e3       	ldi	r25, 0x31	; 49
   1b048:	a0 e0       	ldi	r26, 0x00	; 0
   1b04a:	81 83       	std	Z+1, r24	; 0x01
   1b04c:	92 83       	std	Z+2, r25	; 0x02
   1b04e:	a3 83       	std	Z+3, r26	; 0x03
   1b050:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    return(status);
   1b054:	c7 01       	movw	r24, r14
}
   1b056:	c9 5c       	subi	r28, 0xC9	; 201
   1b058:	dd 4f       	sbci	r29, 0xFD	; 253
   1b05a:	e2 e1       	ldi	r30, 0x12	; 18
   1b05c:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

0001b060 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1b060:	a4 e1       	ldi	r26, 0x14	; 20
   1b062:	b1 e0       	ldi	r27, 0x01	; 1
   1b064:	e6 e3       	ldi	r30, 0x36	; 54
   1b066:	f8 ed       	ldi	r31, 0xD8	; 216
   1b068:	0c 94 cf e2 	jmp	0x1c59e	; 0x1c59e <__prologue_saves__>
   1b06c:	7c 01       	movw	r14, r24
   1b06e:	8b 01       	movw	r16, r22
   1b070:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b072:	61 e3       	ldi	r22, 0x31	; 49
   1b074:	73 e0       	ldi	r23, 0x03	; 3
   1b076:	0e 94 fd ce 	call	0x19dfa	; 0x19dfa <lif_open_volume>
   1b07a:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1b07c:	00 97       	sbiw	r24, 0x00	; 0
   1b07e:	69 f4       	brne	.+26     	; 0x1b09a <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b080:	ed b7       	in	r30, 0x3d	; 61
   1b082:	fe b7       	in	r31, 0x3e	; 62
   1b084:	f5 82       	std	Z+5, r15	; 0x05
   1b086:	e4 82       	std	Z+4, r14	; 0x04
   1b088:	8c e8       	ldi	r24, 0x8C	; 140
   1b08a:	91 e3       	ldi	r25, 0x31	; 49
   1b08c:	a0 e0       	ldi	r26, 0x00	; 0
   1b08e:	81 83       	std	Z+1, r24	; 0x01
   1b090:	92 83       	std	Z+2, r25	; 0x02
   1b092:	a3 83       	std	Z+3, r26	; 0x03
   1b094:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1b098:	13 c0       	rjmp	.+38     	; 0x1b0c0 <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b09a:	b8 01       	movw	r22, r16
   1b09c:	7d d9       	rcall	.-3334   	; 0x1a398 <lif_find_file>
    if(index == -1)
   1b09e:	01 96       	adiw	r24, 0x01	; 1
   1b0a0:	91 f4       	brne	.+36     	; 0x1b0c6 <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1b0a2:	ed b7       	in	r30, 0x3d	; 61
   1b0a4:	fe b7       	in	r31, 0x3e	; 62
   1b0a6:	15 83       	std	Z+5, r17	; 0x05
   1b0a8:	04 83       	std	Z+4, r16	; 0x04
   1b0aa:	89 e7       	ldi	r24, 0x79	; 121
   1b0ac:	91 e3       	ldi	r25, 0x31	; 49
   1b0ae:	a0 e0       	ldi	r26, 0x00	; 0
   1b0b0:	81 83       	std	Z+1, r24	; 0x01
   1b0b2:	92 83       	std	Z+2, r25	; 0x02
   1b0b4:	a3 83       	std	Z+3, r26	; 0x03
   1b0b6:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b0ba:	c4 01       	movw	r24, r8
   1b0bc:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b0c0:	00 e0       	ldi	r16, 0x00	; 0
   1b0c2:	10 e0       	ldi	r17, 0x00	; 0
   1b0c4:	ff c0       	rjmp	.+510    	; 0x1b2c4 <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1b0c6:	94 01       	movw	r18, r8
   1b0c8:	20 5a       	subi	r18, 0xA0	; 160
   1b0ca:	3f 4f       	sbci	r19, 0xFF	; 255
   1b0cc:	c0 5f       	subi	r28, 0xF0	; 240
   1b0ce:	de 4f       	sbci	r29, 0xFE	; 254
   1b0d0:	39 83       	std	Y+1, r19	; 0x01
   1b0d2:	28 83       	st	Y, r18
   1b0d4:	c0 51       	subi	r28, 0x10	; 16
   1b0d6:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b0d8:	f9 01       	movw	r30, r18
   1b0da:	a0 80       	ld	r10, Z
   1b0dc:	b1 80       	ldd	r11, Z+1	; 0x01
   1b0de:	0b 2c       	mov	r0, r11
   1b0e0:	00 0c       	add	r0, r0
   1b0e2:	cc 08       	sbc	r12, r12
   1b0e4:	dd 08       	sbc	r13, r13
   1b0e6:	e1 2c       	mov	r14, r1
   1b0e8:	f1 2c       	mov	r15, r1
   1b0ea:	87 01       	movw	r16, r14
   1b0ec:	e3 94       	inc	r14
   1b0ee:	21 e0       	ldi	r18, 0x01	; 1
   1b0f0:	30 e0       	ldi	r19, 0x00	; 0
   1b0f2:	40 e0       	ldi	r20, 0x00	; 0
   1b0f4:	50 e0       	ldi	r21, 0x00	; 0
   1b0f6:	61 e8       	ldi	r22, 0x81	; 129
   1b0f8:	76 e1       	ldi	r23, 0x16	; 22
   1b0fa:	c3 01       	movw	r24, r6
   1b0fc:	0e 94 b3 ca 	call	0x19566	; 0x19566 <lif_create_volume>
   1b100:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1b102:	89 2b       	or	r24, r25
   1b104:	d1 f2       	breq	.-76     	; 0x1b0ba <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1b106:	81 e2       	ldi	r24, 0x21	; 33
   1b108:	f4 01       	movw	r30, r8
   1b10a:	e1 5b       	subi	r30, 0xB1	; 177
   1b10c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b10e:	d7 01       	movw	r26, r14
   1b110:	a1 5b       	subi	r26, 0xB1	; 177
   1b112:	bf 4f       	sbci	r27, 0xFF	; 255
   1b114:	01 90       	ld	r0, Z+
   1b116:	0d 92       	st	X+, r0
   1b118:	8a 95       	dec	r24
   1b11a:	e1 f7       	brne	.-8      	; 0x1b114 <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1b11c:	82 e0       	ldi	r24, 0x02	; 2
   1b11e:	90 e0       	ldi	r25, 0x00	; 0
   1b120:	a0 e0       	ldi	r26, 0x00	; 0
   1b122:	b0 e0       	ldi	r27, 0x00	; 0
   1b124:	f7 01       	movw	r30, r14
   1b126:	e4 5a       	subi	r30, 0xA4	; 164
   1b128:	ff 4f       	sbci	r31, 0xFF	; 255
   1b12a:	80 83       	st	Z, r24
   1b12c:	91 83       	std	Z+1, r25	; 0x01
   1b12e:	a2 83       	std	Z+2, r26	; 0x02
   1b130:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b132:	c0 5f       	subi	r28, 0xF0	; 240
   1b134:	de 4f       	sbci	r29, 0xFE	; 254
   1b136:	e8 81       	ld	r30, Y
   1b138:	f9 81       	ldd	r31, Y+1	; 0x01
   1b13a:	c0 51       	subi	r28, 0x10	; 16
   1b13c:	d1 40       	sbci	r29, 0x01	; 1
   1b13e:	80 81       	ld	r24, Z
   1b140:	91 81       	ldd	r25, Z+1	; 0x01
   1b142:	a2 81       	ldd	r26, Z+2	; 0x02
   1b144:	b3 81       	ldd	r27, Z+3	; 0x03
   1b146:	f7 01       	movw	r30, r14
   1b148:	80 8b       	std	Z+16, r24	; 0x10
   1b14a:	91 8b       	std	Z+17, r25	; 0x11
   1b14c:	a2 8b       	std	Z+18, r26	; 0x12
   1b14e:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b150:	60 e0       	ldi	r22, 0x00	; 0
   1b152:	70 e0       	ldi	r23, 0x00	; 0
   1b154:	c7 01       	movw	r24, r14
   1b156:	0e 94 37 c9 	call	0x1926e	; 0x1926e <lif_writedirindex>
   1b15a:	8c 01       	movw	r16, r24
   1b15c:	89 2b       	or	r24, r25
   1b15e:	41 f0       	breq	.+16     	; 0x1b170 <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b160:	61 e0       	ldi	r22, 0x01	; 1
   1b162:	70 e0       	ldi	r23, 0x00	; 0
   1b164:	c7 01       	movw	r24, r14
   1b166:	0e 94 93 c9 	call	0x19326	; 0x19326 <lif_writedirEOF>
   1b16a:	8c 01       	movw	r16, r24
   1b16c:	89 2b       	or	r24, r25
   1b16e:	39 f4       	brne	.+14     	; 0x1b17e <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b170:	c4 01       	movw	r24, r8
   1b172:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>
   1b176:	c7 01       	movw	r24, r14
   1b178:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b17c:	a3 c0       	rjmp	.+326    	; 0x1b2c4 <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b17e:	f7 01       	movw	r30, r14
   1b180:	44 84       	ldd	r4, Z+12	; 0x0c
   1b182:	55 84       	ldd	r5, Z+13	; 0x0d
   1b184:	66 84       	ldd	r6, Z+14	; 0x0e
   1b186:	77 84       	ldd	r7, Z+15	; 0x0f
   1b188:	76 2c       	mov	r7, r6
   1b18a:	65 2c       	mov	r6, r5
   1b18c:	54 2c       	mov	r5, r4
   1b18e:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b190:	f4 01       	movw	r30, r8
   1b192:	e4 5a       	subi	r30, 0xA4	; 164
   1b194:	ff 4f       	sbci	r31, 0xFF	; 255
   1b196:	80 81       	ld	r24, Z
   1b198:	91 81       	ldd	r25, Z+1	; 0x01
   1b19a:	a2 81       	ldd	r26, Z+2	; 0x02
   1b19c:	b3 81       	ldd	r27, Z+3	; 0x03
   1b19e:	22 27       	eor	r18, r18
   1b1a0:	38 2f       	mov	r19, r24
   1b1a2:	49 2f       	mov	r20, r25
   1b1a4:	5a 2f       	mov	r21, r26
   1b1a6:	c4 5f       	subi	r28, 0xF4	; 244
   1b1a8:	de 4f       	sbci	r29, 0xFE	; 254
   1b1aa:	28 83       	st	Y, r18
   1b1ac:	39 83       	std	Y+1, r19	; 0x01
   1b1ae:	4a 83       	std	Y+2, r20	; 0x02
   1b1b0:	5b 83       	std	Y+3, r21	; 0x03
   1b1b2:	cc 50       	subi	r28, 0x0C	; 12
   1b1b4:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b1b6:	21 2c       	mov	r2, r1
   1b1b8:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b1ba:	8b e6       	ldi	r24, 0x6B	; 107
   1b1bc:	91 e3       	ldi	r25, 0x31	; 49
   1b1be:	9c 01       	movw	r18, r24
   1b1c0:	40 e0       	ldi	r20, 0x00	; 0
   1b1c2:	ce 5e       	subi	r28, 0xEE	; 238
   1b1c4:	de 4f       	sbci	r29, 0xFE	; 254
   1b1c6:	28 83       	st	Y, r18
   1b1c8:	39 83       	std	Y+1, r19	; 0x01
   1b1ca:	4a 83       	std	Y+2, r20	; 0x02
   1b1cc:	c2 51       	subi	r28, 0x12	; 18
   1b1ce:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b1d0:	c0 5f       	subi	r28, 0xF0	; 240
   1b1d2:	de 4f       	sbci	r29, 0xFE	; 254
   1b1d4:	e8 81       	ld	r30, Y
   1b1d6:	f9 81       	ldd	r31, Y+1	; 0x01
   1b1d8:	c0 51       	subi	r28, 0x10	; 16
   1b1da:	d1 40       	sbci	r29, 0x01	; 1
   1b1dc:	80 81       	ld	r24, Z
   1b1de:	91 81       	ldd	r25, Z+1	; 0x01
   1b1e0:	28 16       	cp	r2, r24
   1b1e2:	39 06       	cpc	r3, r25
   1b1e4:	0c f0       	brlt	.+2      	; 0x1b1e8 <lif_extract_lif_as_lif+0x188>
   1b1e6:	58 c0       	rjmp	.+176    	; 0x1b298 <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b1e8:	00 e0       	ldi	r16, 0x00	; 0
   1b1ea:	11 e0       	ldi	r17, 0x01	; 1
   1b1ec:	c4 5f       	subi	r28, 0xF4	; 244
   1b1ee:	de 4f       	sbci	r29, 0xFE	; 254
   1b1f0:	28 81       	ld	r18, Y
   1b1f2:	39 81       	ldd	r19, Y+1	; 0x01
   1b1f4:	4a 81       	ldd	r20, Y+2	; 0x02
   1b1f6:	5b 81       	ldd	r21, Y+3	; 0x03
   1b1f8:	cc 50       	subi	r28, 0x0C	; 12
   1b1fa:	d1 40       	sbci	r29, 0x01	; 1
   1b1fc:	be 01       	movw	r22, r28
   1b1fe:	68 5f       	subi	r22, 0xF8	; 248
   1b200:	7f 4f       	sbci	r23, 0xFF	; 255
   1b202:	c4 01       	movw	r24, r8
   1b204:	0e 94 96 bf 	call	0x17f2c	; 0x17f2c <lif_read>
   1b208:	5b 01       	movw	r10, r22
   1b20a:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1b20c:	6f 3f       	cpi	r22, 0xFF	; 255
   1b20e:	71 05       	cpc	r23, r1
   1b210:	09 f0       	breq	.+2      	; 0x1b214 <lif_extract_lif_as_lif+0x1b4>
   1b212:	2c f4       	brge	.+10     	; 0x1b21e <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b214:	c4 01       	movw	r24, r8
   1b216:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>
   1b21a:	c7 01       	movw	r24, r14
   1b21c:	4f cf       	rjmp	.-354    	; 0x1b0bc <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b21e:	00 e0       	ldi	r16, 0x00	; 0
   1b220:	11 e0       	ldi	r17, 0x01	; 1
   1b222:	a3 01       	movw	r20, r6
   1b224:	92 01       	movw	r18, r4
   1b226:	be 01       	movw	r22, r28
   1b228:	68 5f       	subi	r22, 0xF8	; 248
   1b22a:	7f 4f       	sbci	r23, 0xFF	; 255
   1b22c:	c7 01       	movw	r24, r14
   1b22e:	0e 94 e7 bf 	call	0x17fce	; 0x17fce <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b232:	c5 01       	movw	r24, r10
   1b234:	0b 2c       	mov	r0, r11
   1b236:	00 0c       	add	r0, r0
   1b238:	aa 0b       	sbc	r26, r26
   1b23a:	bb 0b       	sbc	r27, r27
   1b23c:	48 0e       	add	r4, r24
   1b23e:	59 1e       	adc	r5, r25
   1b240:	6a 1e       	adc	r6, r26
   1b242:	7b 1e       	adc	r7, r27
        offset += size;
   1b244:	c4 5f       	subi	r28, 0xF4	; 244
   1b246:	de 4f       	sbci	r29, 0xFE	; 254
   1b248:	28 81       	ld	r18, Y
   1b24a:	39 81       	ldd	r19, Y+1	; 0x01
   1b24c:	4a 81       	ldd	r20, Y+2	; 0x02
   1b24e:	5b 81       	ldd	r21, Y+3	; 0x03
   1b250:	cc 50       	subi	r28, 0x0C	; 12
   1b252:	d1 40       	sbci	r29, 0x01	; 1
   1b254:	28 0f       	add	r18, r24
   1b256:	39 1f       	adc	r19, r25
   1b258:	4a 1f       	adc	r20, r26
   1b25a:	5b 1f       	adc	r21, r27
   1b25c:	c4 5f       	subi	r28, 0xF4	; 244
   1b25e:	de 4f       	sbci	r29, 0xFE	; 254
   1b260:	28 83       	st	Y, r18
   1b262:	39 83       	std	Y+1, r19	; 0x01
   1b264:	4a 83       	std	Y+2, r20	; 0x02
   1b266:	5b 83       	std	Y+3, r21	; 0x03
   1b268:	cc 50       	subi	r28, 0x0C	; 12
   1b26a:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b26c:	ed b7       	in	r30, 0x3d	; 61
   1b26e:	fe b7       	in	r31, 0x3e	; 62
   1b270:	44 82       	std	Z+4, r4	; 0x04
   1b272:	55 82       	std	Z+5, r5	; 0x05
   1b274:	66 82       	std	Z+6, r6	; 0x06
   1b276:	77 82       	std	Z+7, r7	; 0x07
   1b278:	ce 5e       	subi	r28, 0xEE	; 238
   1b27a:	de 4f       	sbci	r29, 0xFE	; 254
   1b27c:	28 81       	ld	r18, Y
   1b27e:	39 81       	ldd	r19, Y+1	; 0x01
   1b280:	4a 81       	ldd	r20, Y+2	; 0x02
   1b282:	c2 51       	subi	r28, 0x12	; 18
   1b284:	d1 40       	sbci	r29, 0x01	; 1
   1b286:	21 83       	std	Z+1, r18	; 0x01
   1b288:	32 83       	std	Z+2, r19	; 0x02
   1b28a:	43 83       	std	Z+3, r20	; 0x03
   1b28c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b290:	ff ef       	ldi	r31, 0xFF	; 255
   1b292:	2f 1a       	sub	r2, r31
   1b294:	3f 0a       	sbc	r3, r31
   1b296:	9c cf       	rjmp	.-200    	; 0x1b1d0 <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b298:	c4 01       	movw	r24, r8
   1b29a:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>
   1b29e:	c7 01       	movw	r24, r14
   1b2a0:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b2a4:	ed b7       	in	r30, 0x3d	; 61
   1b2a6:	fe b7       	in	r31, 0x3e	; 62
   1b2a8:	44 82       	std	Z+4, r4	; 0x04
   1b2aa:	55 82       	std	Z+5, r5	; 0x05
   1b2ac:	66 82       	std	Z+6, r6	; 0x06
   1b2ae:	77 82       	std	Z+7, r7	; 0x07
   1b2b0:	8d e5       	ldi	r24, 0x5D	; 93
   1b2b2:	91 e3       	ldi	r25, 0x31	; 49
   1b2b4:	a0 e0       	ldi	r26, 0x00	; 0
   1b2b6:	81 83       	std	Z+1, r24	; 0x01
   1b2b8:	92 83       	std	Z+2, r25	; 0x02
   1b2ba:	a3 83       	std	Z+3, r26	; 0x03
   1b2bc:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    return(1);
   1b2c0:	01 e0       	ldi	r16, 0x01	; 1
   1b2c2:	10 e0       	ldi	r17, 0x00	; 0
}
   1b2c4:	c8 01       	movw	r24, r16
   1b2c6:	cc 5e       	subi	r28, 0xEC	; 236
   1b2c8:	de 4f       	sbci	r29, 0xFE	; 254
   1b2ca:	e2 e1       	ldi	r30, 0x12	; 18
   1b2cc:	0c 94 eb e2 	jmp	0x1c5d6	; 0x1c5d6 <__epilogue_restores__>

0001b2d0 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b2d0:	2f 92       	push	r2
   1b2d2:	3f 92       	push	r3
   1b2d4:	4f 92       	push	r4
   1b2d6:	5f 92       	push	r5
   1b2d8:	6f 92       	push	r6
   1b2da:	8f 92       	push	r8
   1b2dc:	9f 92       	push	r9
   1b2de:	af 92       	push	r10
   1b2e0:	bf 92       	push	r11
   1b2e2:	cf 92       	push	r12
   1b2e4:	df 92       	push	r13
   1b2e6:	ef 92       	push	r14
   1b2e8:	ff 92       	push	r15
   1b2ea:	0f 93       	push	r16
   1b2ec:	1f 93       	push	r17
   1b2ee:	cf 93       	push	r28
   1b2f0:	df 93       	push	r29
   1b2f2:	cd b7       	in	r28, 0x3d	; 61
   1b2f4:	de b7       	in	r29, 0x3e	; 62
   1b2f6:	cd 51       	subi	r28, 0x1D	; 29
   1b2f8:	d1 40       	sbci	r29, 0x01	; 1
   1b2fa:	0f b6       	in	r0, 0x3f	; 63
   1b2fc:	f8 94       	cli
   1b2fe:	de bf       	out	0x3e, r29	; 62
   1b300:	0f be       	out	0x3f, r0	; 63
   1b302:	cd bf       	out	0x3d, r28	; 61
   1b304:	5c 01       	movw	r10, r24
   1b306:	7b 01       	movw	r14, r22
   1b308:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b30a:	dc 01       	movw	r26, r24
   1b30c:	8c 91       	ld	r24, X
   1b30e:	81 11       	cpse	r24, r1
   1b310:	03 c0       	rjmp	.+6      	; 0x1b318 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b312:	8d e3       	ldi	r24, 0x3D	; 61
   1b314:	91 e3       	ldi	r25, 0x31	; 49
   1b316:	06 c0       	rjmp	.+12     	; 0x1b324 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b318:	db 01       	movw	r26, r22
   1b31a:	8c 91       	ld	r24, X
   1b31c:	81 11       	cpse	r24, r1
   1b31e:	0b c0       	rjmp	.+22     	; 0x1b336 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b320:	82 e2       	ldi	r24, 0x22	; 34
   1b322:	91 e3       	ldi	r25, 0x31	; 49
   1b324:	a0 e0       	ldi	r26, 0x00	; 0
   1b326:	ed b7       	in	r30, 0x3d	; 61
   1b328:	fe b7       	in	r31, 0x3e	; 62
   1b32a:	81 83       	std	Z+1, r24	; 0x01
   1b32c:	92 83       	std	Z+2, r25	; 0x02
   1b32e:	a3 83       	std	Z+3, r26	; 0x03
   1b330:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1b334:	25 c1       	rjmp	.+586    	; 0x1b580 <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b336:	da 01       	movw	r26, r20
   1b338:	8c 91       	ld	r24, X
   1b33a:	81 11       	cpse	r24, r1
   1b33c:	03 c0       	rjmp	.+6      	; 0x1b344 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b33e:	86 e0       	ldi	r24, 0x06	; 6
   1b340:	91 e3       	ldi	r25, 0x31	; 49
   1b342:	f0 cf       	rjmp	.-32     	; 0x1b324 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1b344:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b348:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b34c:	92 ff       	sbrs	r25, 2
   1b34e:	10 c0       	rjmp	.+32     	; 0x1b370 <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1b350:	ed b7       	in	r30, 0x3d	; 61
   1b352:	fe b7       	in	r31, 0x3e	; 62
   1b354:	51 87       	std	Z+9, r21	; 0x09
   1b356:	40 87       	std	Z+8, r20	; 0x08
   1b358:	77 83       	std	Z+7, r23	; 0x07
   1b35a:	66 83       	std	Z+6, r22	; 0x06
   1b35c:	b5 82       	std	Z+5, r11	; 0x05
   1b35e:	a4 82       	std	Z+4, r10	; 0x04
   1b360:	87 ed       	ldi	r24, 0xD7	; 215
   1b362:	90 e3       	ldi	r25, 0x30	; 48
   1b364:	a0 e0       	ldi	r26, 0x00	; 0
   1b366:	81 83       	std	Z+1, r24	; 0x01
   1b368:	92 83       	std	Z+2, r25	; 0x02
   1b36a:	a3 83       	std	Z+3, r26	; 0x03
   1b36c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b370:	67 ef       	ldi	r22, 0xF7	; 247
   1b372:	78 e0       	ldi	r23, 0x08	; 8
   1b374:	c4 01       	movw	r24, r8
   1b376:	0e 94 fd ce 	call	0x19dfa	; 0x19dfa <lif_open_volume>
   1b37a:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b37c:	00 97       	sbiw	r24, 0x00	; 0
   1b37e:	09 f4       	brne	.+2      	; 0x1b382 <lif_add_lif_file+0xb2>
   1b380:	ff c0       	rjmp	.+510    	; 0x1b580 <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b382:	b7 01       	movw	r22, r14
   1b384:	09 d8       	rcall	.-4078   	; 0x1a398 <lif_find_file>
    if(index == -1)
   1b386:	01 96       	adiw	r24, 0x01	; 1
   1b388:	a1 f4       	brne	.+40     	; 0x1b3b2 <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b38a:	ed b7       	in	r30, 0x3d	; 61
   1b38c:	fe b7       	in	r31, 0x3e	; 62
   1b38e:	f5 82       	std	Z+5, r15	; 0x05
   1b390:	e4 82       	std	Z+4, r14	; 0x04
   1b392:	84 ec       	ldi	r24, 0xC4	; 196
   1b394:	90 e3       	ldi	r25, 0x30	; 48
   1b396:	a0 e0       	ldi	r26, 0x00	; 0
   1b398:	81 83       	std	Z+1, r24	; 0x01
   1b39a:	92 83       	std	Z+2, r25	; 0x02
   1b39c:	a3 83       	std	Z+3, r26	; 0x03
   1b39e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b3a2:	c6 01       	movw	r24, r12
   1b3a4:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b3a8:	60 e0       	ldi	r22, 0x00	; 0
   1b3aa:	70 e0       	ldi	r23, 0x00	; 0
   1b3ac:	80 e0       	ldi	r24, 0x00	; 0
   1b3ae:	90 e0       	ldi	r25, 0x00	; 0
   1b3b0:	ff c0       	rjmp	.+510    	; 0x1b5b0 <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b3b2:	67 ef       	ldi	r22, 0xF7	; 247
   1b3b4:	78 e0       	ldi	r23, 0x08	; 8
   1b3b6:	c5 01       	movw	r24, r10
   1b3b8:	0e 94 fd ce 	call	0x19dfa	; 0x19dfa <lif_open_volume>
   1b3bc:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b3be:	00 97       	sbiw	r24, 0x00	; 0
   1b3c0:	09 f4       	brne	.+2      	; 0x1b3c4 <lif_add_lif_file+0xf4>
   1b3c2:	de c0       	rjmp	.+444    	; 0x1b580 <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b3c4:	f6 01       	movw	r30, r12
   1b3c6:	e0 5a       	subi	r30, 0xA0	; 160
   1b3c8:	ff 4f       	sbci	r31, 0xFF	; 255
   1b3ca:	40 81       	ld	r20, Z
   1b3cc:	51 81       	ldd	r21, Z+1	; 0x01
   1b3ce:	62 81       	ldd	r22, Z+2	; 0x02
   1b3d0:	73 81       	ldd	r23, Z+3	; 0x03
   1b3d2:	0e 94 9d cd 	call	0x19b3a	; 0x19b3a <lif_newdir>
   1b3d6:	ca 5e       	subi	r28, 0xEA	; 234
   1b3d8:	de 4f       	sbci	r29, 0xFE	; 254
   1b3da:	99 83       	std	Y+1, r25	; 0x01
   1b3dc:	88 83       	st	Y, r24
   1b3de:	c6 51       	subi	r28, 0x16	; 22
   1b3e0:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b3e2:	01 96       	adiw	r24, 0x01	; 1
   1b3e4:	79 f4       	brne	.+30     	; 0x1b404 <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1b3e6:	ed b7       	in	r30, 0x3d	; 61
   1b3e8:	fe b7       	in	r31, 0x3e	; 62
   1b3ea:	97 82       	std	Z+7, r9	; 0x07
   1b3ec:	86 82       	std	Z+6, r8	; 0x06
   1b3ee:	b5 82       	std	Z+5, r11	; 0x05
   1b3f0:	a4 82       	std	Z+4, r10	; 0x04
   1b3f2:	84 e9       	ldi	r24, 0x94	; 148
   1b3f4:	90 e3       	ldi	r25, 0x30	; 48
   1b3f6:	a0 e0       	ldi	r26, 0x00	; 0
   1b3f8:	81 83       	std	Z+1, r24	; 0x01
   1b3fa:	92 83       	std	Z+2, r25	; 0x02
   1b3fc:	a3 83       	std	Z+3, r26	; 0x03
   1b3fe:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1b402:	a8 c0       	rjmp	.+336    	; 0x1b554 <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1b404:	c7 01       	movw	r24, r14
   1b406:	84 5a       	subi	r24, 0xA4	; 164
   1b408:	9f 4f       	sbci	r25, 0xFF	; 255
   1b40a:	dc 01       	movw	r26, r24
   1b40c:	4d 91       	ld	r20, X+
   1b40e:	5d 91       	ld	r21, X+
   1b410:	6d 91       	ld	r22, X+
   1b412:	7c 91       	ld	r23, X
   1b414:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b416:	21 e2       	ldi	r18, 0x21	; 33
   1b418:	f6 01       	movw	r30, r12
   1b41a:	e1 5b       	subi	r30, 0xB1	; 177
   1b41c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b41e:	1d 97       	sbiw	r26, 0x0d	; 13
   1b420:	01 90       	ld	r0, Z+
   1b422:	0d 92       	st	X+, r0
   1b424:	2a 95       	dec	r18
   1b426:	e1 f7       	brne	.-8      	; 0x1b420 <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b428:	fc 01       	movw	r30, r24
   1b42a:	40 83       	st	Z, r20
   1b42c:	51 83       	std	Z+1, r21	; 0x01
   1b42e:	62 83       	std	Z+2, r22	; 0x02
   1b430:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b432:	b6 2f       	mov	r27, r22
   1b434:	a5 2f       	mov	r26, r21
   1b436:	94 2f       	mov	r25, r20
   1b438:	88 27       	eor	r24, r24
   1b43a:	c2 5f       	subi	r28, 0xF2	; 242
   1b43c:	de 4f       	sbci	r29, 0xFE	; 254
   1b43e:	88 83       	st	Y, r24
   1b440:	99 83       	std	Y+1, r25	; 0x01
   1b442:	aa 83       	std	Y+2, r26	; 0x02
   1b444:	bb 83       	std	Y+3, r27	; 0x03
   1b446:	ce 50       	subi	r28, 0x0E	; 14
   1b448:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b44a:	f6 01       	movw	r30, r12
   1b44c:	e4 5a       	subi	r30, 0xA4	; 164
   1b44e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b450:	80 81       	ld	r24, Z
   1b452:	91 81       	ldd	r25, Z+1	; 0x01
   1b454:	a2 81       	ldd	r26, Z+2	; 0x02
   1b456:	b3 81       	ldd	r27, Z+3	; 0x03
   1b458:	22 27       	eor	r18, r18
   1b45a:	38 2f       	mov	r19, r24
   1b45c:	49 2f       	mov	r20, r25
   1b45e:	5a 2f       	mov	r21, r26
   1b460:	ce 5e       	subi	r28, 0xEE	; 238
   1b462:	de 4f       	sbci	r29, 0xFE	; 254
   1b464:	28 83       	st	Y, r18
   1b466:	39 83       	std	Y+1, r19	; 0x01
   1b468:	4a 83       	std	Y+2, r20	; 0x02
   1b46a:	5b 83       	std	Y+3, r21	; 0x03
   1b46c:	c2 51       	subi	r28, 0x12	; 18
   1b46e:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b470:	21 2c       	mov	r2, r1
   1b472:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b474:	81 2c       	mov	r8, r1
   1b476:	91 2c       	mov	r9, r1
   1b478:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b47a:	a7 01       	movw	r20, r14
   1b47c:	40 5a       	subi	r20, 0xA0	; 160
   1b47e:	5f 4f       	sbci	r21, 0xFF	; 255
   1b480:	c4 5e       	subi	r28, 0xE4	; 228
   1b482:	de 4f       	sbci	r29, 0xFE	; 254
   1b484:	59 83       	std	Y+1, r21	; 0x01
   1b486:	48 83       	st	Y, r20
   1b488:	cc 51       	subi	r28, 0x1C	; 28
   1b48a:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b48c:	86 e8       	ldi	r24, 0x86	; 134
   1b48e:	90 e3       	ldi	r25, 0x30	; 48
   1b490:	2c 01       	movw	r4, r24
   1b492:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b494:	27 c0       	rjmp	.+78     	; 0x1b4e4 <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b496:	00 e0       	ldi	r16, 0x00	; 0
   1b498:	11 e0       	ldi	r17, 0x01	; 1
   1b49a:	c8 5e       	subi	r28, 0xE8	; 232
   1b49c:	de 4f       	sbci	r29, 0xFE	; 254
   1b49e:	28 81       	ld	r18, Y
   1b4a0:	39 81       	ldd	r19, Y+1	; 0x01
   1b4a2:	4a 81       	ldd	r20, Y+2	; 0x02
   1b4a4:	5b 81       	ldd	r21, Y+3	; 0x03
   1b4a6:	c8 51       	subi	r28, 0x18	; 24
   1b4a8:	d1 40       	sbci	r29, 0x01	; 1
   1b4aa:	be 01       	movw	r22, r28
   1b4ac:	66 5f       	subi	r22, 0xF6	; 246
   1b4ae:	7f 4f       	sbci	r23, 0xFF	; 255
   1b4b0:	c7 01       	movw	r24, r14
   1b4b2:	0e 94 e7 bf 	call	0x17fce	; 0x17fce <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b4b6:	8f 3f       	cpi	r24, 0xFF	; 255
   1b4b8:	91 05       	cpc	r25, r1
   1b4ba:	09 f0       	breq	.+2      	; 0x1b4be <lif_add_lif_file+0x1ee>
   1b4bc:	0c f4       	brge	.+2      	; 0x1b4c0 <lif_add_lif_file+0x1f0>
   1b4be:	4a c0       	rjmp	.+148    	; 0x1b554 <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b4c0:	5f ef       	ldi	r21, 0xFF	; 255
   1b4c2:	95 1a       	sub	r9, r21
   1b4c4:	a5 0a       	sbc	r10, r21
   1b4c6:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b4c8:	ed b7       	in	r30, 0x3d	; 61
   1b4ca:	fe b7       	in	r31, 0x3e	; 62
   1b4cc:	84 82       	std	Z+4, r8	; 0x04
   1b4ce:	95 82       	std	Z+5, r9	; 0x05
   1b4d0:	a6 82       	std	Z+6, r10	; 0x06
   1b4d2:	b7 82       	std	Z+7, r11	; 0x07
   1b4d4:	41 82       	std	Z+1, r4	; 0x01
   1b4d6:	52 82       	std	Z+2, r5	; 0x02
   1b4d8:	63 82       	std	Z+3, r6	; 0x03
   1b4da:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b4de:	ff ef       	ldi	r31, 0xFF	; 255
   1b4e0:	2f 1a       	sub	r2, r31
   1b4e2:	3f 0a       	sbc	r3, r31
   1b4e4:	ce 5e       	subi	r28, 0xEE	; 238
   1b4e6:	de 4f       	sbci	r29, 0xFE	; 254
   1b4e8:	28 81       	ld	r18, Y
   1b4ea:	39 81       	ldd	r19, Y+1	; 0x01
   1b4ec:	4a 81       	ldd	r20, Y+2	; 0x02
   1b4ee:	5b 81       	ldd	r21, Y+3	; 0x03
   1b4f0:	c2 51       	subi	r28, 0x12	; 18
   1b4f2:	d1 40       	sbci	r29, 0x01	; 1
   1b4f4:	28 0d       	add	r18, r8
   1b4f6:	39 1d       	adc	r19, r9
   1b4f8:	4a 1d       	adc	r20, r10
   1b4fa:	5b 1d       	adc	r21, r11
   1b4fc:	c2 5f       	subi	r28, 0xF2	; 242
   1b4fe:	de 4f       	sbci	r29, 0xFE	; 254
   1b500:	88 81       	ld	r24, Y
   1b502:	99 81       	ldd	r25, Y+1	; 0x01
   1b504:	aa 81       	ldd	r26, Y+2	; 0x02
   1b506:	bb 81       	ldd	r27, Y+3	; 0x03
   1b508:	ce 50       	subi	r28, 0x0E	; 14
   1b50a:	d1 40       	sbci	r29, 0x01	; 1
   1b50c:	88 0d       	add	r24, r8
   1b50e:	99 1d       	adc	r25, r9
   1b510:	aa 1d       	adc	r26, r10
   1b512:	bb 1d       	adc	r27, r11
   1b514:	c8 5e       	subi	r28, 0xE8	; 232
   1b516:	de 4f       	sbci	r29, 0xFE	; 254
   1b518:	88 83       	st	Y, r24
   1b51a:	99 83       	std	Y+1, r25	; 0x01
   1b51c:	aa 83       	std	Y+2, r26	; 0x02
   1b51e:	bb 83       	std	Y+3, r27	; 0x03
   1b520:	c8 51       	subi	r28, 0x18	; 24
   1b522:	d1 40       	sbci	r29, 0x01	; 1
   1b524:	c4 5e       	subi	r28, 0xE4	; 228
   1b526:	de 4f       	sbci	r29, 0xFE	; 254
   1b528:	a8 81       	ld	r26, Y
   1b52a:	b9 81       	ldd	r27, Y+1	; 0x01
   1b52c:	cc 51       	subi	r28, 0x1C	; 28
   1b52e:	d1 40       	sbci	r29, 0x01	; 1
   1b530:	8d 91       	ld	r24, X+
   1b532:	9c 91       	ld	r25, X
   1b534:	28 16       	cp	r2, r24
   1b536:	39 06       	cpc	r3, r25
   1b538:	94 f4       	brge	.+36     	; 0x1b55e <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1b53a:	00 e0       	ldi	r16, 0x00	; 0
   1b53c:	11 e0       	ldi	r17, 0x01	; 1
   1b53e:	be 01       	movw	r22, r28
   1b540:	66 5f       	subi	r22, 0xF6	; 246
   1b542:	7f 4f       	sbci	r23, 0xFF	; 255
   1b544:	c6 01       	movw	r24, r12
   1b546:	0e 94 96 bf 	call	0x17f2c	; 0x17f2c <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b54a:	6f 3f       	cpi	r22, 0xFF	; 255
   1b54c:	71 05       	cpc	r23, r1
   1b54e:	11 f0       	breq	.+4      	; 0x1b554 <lif_add_lif_file+0x284>
   1b550:	0c f0       	brlt	.+2      	; 0x1b554 <lif_add_lif_file+0x284>
   1b552:	a1 cf       	rjmp	.-190    	; 0x1b496 <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b554:	c7 01       	movw	r24, r14
   1b556:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>
   1b55a:	c6 01       	movw	r24, r12
   1b55c:	0f c0       	rjmp	.+30     	; 0x1b57c <lif_add_lif_file+0x2ac>
   1b55e:	c6 01       	movw	r24, r12
   1b560:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1b564:	ca 5e       	subi	r28, 0xEA	; 234
   1b566:	de 4f       	sbci	r29, 0xFE	; 254
   1b568:	68 81       	ld	r22, Y
   1b56a:	79 81       	ldd	r23, Y+1	; 0x01
   1b56c:	c6 51       	subi	r28, 0x16	; 22
   1b56e:	d1 40       	sbci	r29, 0x01	; 1
   1b570:	c7 01       	movw	r24, r14
   1b572:	0e 94 37 c9 	call	0x1926e	; 0x1926e <lif_writedirindex>
   1b576:	89 2b       	or	r24, r25
   1b578:	41 f4       	brne	.+16     	; 0x1b58a <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b57a:	c7 01       	movw	r24, r14
   1b57c:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1b580:	6f ef       	ldi	r22, 0xFF	; 255
   1b582:	7f ef       	ldi	r23, 0xFF	; 255
   1b584:	8f ef       	ldi	r24, 0xFF	; 255
   1b586:	9f ef       	ldi	r25, 0xFF	; 255
   1b588:	13 c0       	rjmp	.+38     	; 0x1b5b0 <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b58a:	c7 01       	movw	r24, r14
   1b58c:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1b590:	ed b7       	in	r30, 0x3d	; 61
   1b592:	fe b7       	in	r31, 0x3e	; 62
   1b594:	84 82       	std	Z+4, r8	; 0x04
   1b596:	95 82       	std	Z+5, r9	; 0x05
   1b598:	a6 82       	std	Z+6, r10	; 0x06
   1b59a:	b7 82       	std	Z+7, r11	; 0x07
   1b59c:	88 e7       	ldi	r24, 0x78	; 120
   1b59e:	90 e3       	ldi	r25, 0x30	; 48
   1b5a0:	a0 e0       	ldi	r26, 0x00	; 0
   1b5a2:	81 83       	std	Z+1, r24	; 0x01
   1b5a4:	92 83       	std	Z+2, r25	; 0x02
   1b5a6:	a3 83       	std	Z+3, r26	; 0x03
   1b5a8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    return(bytes);
   1b5ac:	b4 01       	movw	r22, r8
   1b5ae:	c5 01       	movw	r24, r10
}
   1b5b0:	c3 5e       	subi	r28, 0xE3	; 227
   1b5b2:	de 4f       	sbci	r29, 0xFE	; 254
   1b5b4:	0f b6       	in	r0, 0x3f	; 63
   1b5b6:	f8 94       	cli
   1b5b8:	de bf       	out	0x3e, r29	; 62
   1b5ba:	0f be       	out	0x3f, r0	; 63
   1b5bc:	cd bf       	out	0x3d, r28	; 61
   1b5be:	df 91       	pop	r29
   1b5c0:	cf 91       	pop	r28
   1b5c2:	1f 91       	pop	r17
   1b5c4:	0f 91       	pop	r16
   1b5c6:	ff 90       	pop	r15
   1b5c8:	ef 90       	pop	r14
   1b5ca:	df 90       	pop	r13
   1b5cc:	cf 90       	pop	r12
   1b5ce:	bf 90       	pop	r11
   1b5d0:	af 90       	pop	r10
   1b5d2:	9f 90       	pop	r9
   1b5d4:	8f 90       	pop	r8
   1b5d6:	6f 90       	pop	r6
   1b5d8:	5f 90       	pop	r5
   1b5da:	4f 90       	pop	r4
   1b5dc:	3f 90       	pop	r3
   1b5de:	2f 90       	pop	r2
   1b5e0:	08 95       	ret

0001b5e2 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1b5e2:	ef 92       	push	r14
   1b5e4:	ff 92       	push	r15
   1b5e6:	0f 93       	push	r16
   1b5e8:	1f 93       	push	r17
   1b5ea:	cf 93       	push	r28
   1b5ec:	df 93       	push	r29
   1b5ee:	ad b7       	in	r26, 0x3d	; 61
   1b5f0:	be b7       	in	r27, 0x3e	; 62
   1b5f2:	17 97       	sbiw	r26, 0x07	; 7
   1b5f4:	0f b6       	in	r0, 0x3f	; 63
   1b5f6:	f8 94       	cli
   1b5f8:	be bf       	out	0x3e, r27	; 62
   1b5fa:	0f be       	out	0x3f, r0	; 63
   1b5fc:	ad bf       	out	0x3d, r26	; 61
   1b5fe:	7c 01       	movw	r14, r24
   1b600:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1b602:	fc 01       	movw	r30, r24
   1b604:	80 81       	ld	r24, Z
   1b606:	81 11       	cpse	r24, r1
   1b608:	03 c0       	rjmp	.+6      	; 0x1b610 <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1b60a:	83 e5       	ldi	r24, 0x53	; 83
   1b60c:	90 e3       	ldi	r25, 0x30	; 48
   1b60e:	06 c0       	rjmp	.+12     	; 0x1b61c <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1b610:	fb 01       	movw	r30, r22
   1b612:	80 81       	ld	r24, Z
   1b614:	81 11       	cpse	r24, r1
   1b616:	0b c0       	rjmp	.+22     	; 0x1b62e <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1b618:	83 e3       	ldi	r24, 0x33	; 51
   1b61a:	90 e3       	ldi	r25, 0x30	; 48
   1b61c:	a0 e0       	ldi	r26, 0x00	; 0
   1b61e:	ed b7       	in	r30, 0x3d	; 61
   1b620:	fe b7       	in	r31, 0x3e	; 62
   1b622:	81 83       	std	Z+1, r24	; 0x01
   1b624:	92 83       	std	Z+2, r25	; 0x02
   1b626:	a3 83       	std	Z+3, r26	; 0x03
   1b628:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1b62c:	68 c0       	rjmp	.+208    	; 0x1b6fe <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1b62e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b632:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b636:	92 ff       	sbrs	r25, 2
   1b638:	0e c0       	rjmp	.+28     	; 0x1b656 <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1b63a:	ed b7       	in	r30, 0x3d	; 61
   1b63c:	fe b7       	in	r31, 0x3e	; 62
   1b63e:	77 83       	std	Z+7, r23	; 0x07
   1b640:	66 83       	std	Z+6, r22	; 0x06
   1b642:	f5 82       	std	Z+5, r15	; 0x05
   1b644:	e4 82       	std	Z+4, r14	; 0x04
   1b646:	84 e1       	ldi	r24, 0x14	; 20
   1b648:	90 e3       	ldi	r25, 0x30	; 48
   1b64a:	a0 e0       	ldi	r26, 0x00	; 0
   1b64c:	81 83       	std	Z+1, r24	; 0x01
   1b64e:	92 83       	std	Z+2, r25	; 0x02
   1b650:	a3 83       	std	Z+3, r26	; 0x03
   1b652:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1b656:	67 ef       	ldi	r22, 0xF7	; 247
   1b658:	78 e0       	ldi	r23, 0x08	; 8
   1b65a:	c7 01       	movw	r24, r14
   1b65c:	0e 94 fd ce 	call	0x19dfa	; 0x19dfa <lif_open_volume>
   1b660:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b662:	00 97       	sbiw	r24, 0x00	; 0
   1b664:	09 f4       	brne	.+2      	; 0x1b668 <lif_del_file+0x86>
   1b666:	4b c0       	rjmp	.+150    	; 0x1b6fe <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1b668:	b8 01       	movw	r22, r16
   1b66a:	0e 94 cc d1 	call	0x1a398	; 0x1a398 <lif_find_file>
    if(index == -1)
   1b66e:	8f 3f       	cpi	r24, 0xFF	; 255
   1b670:	ff ef       	ldi	r31, 0xFF	; 255
   1b672:	9f 07       	cpc	r25, r31
   1b674:	a1 f4       	brne	.+40     	; 0x1b69e <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b676:	ce 01       	movw	r24, r28
   1b678:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1b67c:	ed b7       	in	r30, 0x3d	; 61
   1b67e:	fe b7       	in	r31, 0x3e	; 62
   1b680:	17 83       	std	Z+7, r17	; 0x07
   1b682:	06 83       	std	Z+6, r16	; 0x06
   1b684:	f5 82       	std	Z+5, r15	; 0x05
   1b686:	e4 82       	std	Z+4, r14	; 0x04
   1b688:	8c ee       	ldi	r24, 0xEC	; 236
   1b68a:	9f e2       	ldi	r25, 0x2F	; 47
   1b68c:	a0 e0       	ldi	r26, 0x00	; 0
   1b68e:	81 83       	std	Z+1, r24	; 0x01
   1b690:	92 83       	std	Z+2, r25	; 0x02
   1b692:	a3 83       	std	Z+3, r26	; 0x03
   1b694:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        return(0);
   1b698:	80 e0       	ldi	r24, 0x00	; 0
   1b69a:	90 e0       	ldi	r25, 0x00	; 0
   1b69c:	32 c0       	rjmp	.+100    	; 0x1b702 <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1b69e:	2a a1       	ldd	r18, Y+34	; 0x22
   1b6a0:	3b a1       	ldd	r19, Y+35	; 0x23
   1b6a2:	21 50       	subi	r18, 0x01	; 1
   1b6a4:	31 09       	sbc	r19, r1
   1b6a6:	fe 01       	movw	r30, r28
   1b6a8:	e6 5a       	subi	r30, 0xA6	; 166
   1b6aa:	ff 4f       	sbci	r31, 0xFF	; 255
   1b6ac:	82 17       	cp	r24, r18
   1b6ae:	93 07       	cpc	r25, r19
   1b6b0:	2c f0       	brlt	.+10     	; 0x1b6bc <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1b6b2:	2f ef       	ldi	r18, 0xFF	; 255
   1b6b4:	3f ef       	ldi	r19, 0xFF	; 255
   1b6b6:	31 83       	std	Z+1, r19	; 0x01
   1b6b8:	20 83       	st	Z, r18
   1b6ba:	02 c0       	rjmp	.+4      	; 0x1b6c0 <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1b6bc:	11 82       	std	Z+1, r1	; 0x01
   1b6be:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1b6c0:	bc 01       	movw	r22, r24
   1b6c2:	ce 01       	movw	r24, r28
   1b6c4:	0e 94 37 c9 	call	0x1926e	; 0x1926e <lif_writedirindex>
   1b6c8:	89 2b       	or	r24, r25
   1b6ca:	21 f4       	brne	.+8      	; 0x1b6d4 <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b6cc:	ce 01       	movw	r24, r28
   1b6ce:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>
   1b6d2:	15 c0       	rjmp	.+42     	; 0x1b6fe <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1b6d4:	ce 01       	movw	r24, r28
   1b6d6:	0e 94 ab c9 	call	0x19356	; 0x19356 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b6da:	ce 01       	movw	r24, r28
   1b6dc:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1b6e0:	ed b7       	in	r30, 0x3d	; 61
   1b6e2:	fe b7       	in	r31, 0x3e	; 62
   1b6e4:	15 83       	std	Z+5, r17	; 0x05
   1b6e6:	04 83       	std	Z+4, r16	; 0x04
   1b6e8:	8d ed       	ldi	r24, 0xDD	; 221
   1b6ea:	9f e2       	ldi	r25, 0x2F	; 47
   1b6ec:	a0 e0       	ldi	r26, 0x00	; 0
   1b6ee:	81 83       	std	Z+1, r24	; 0x01
   1b6f0:	92 83       	std	Z+2, r25	; 0x02
   1b6f2:	a3 83       	std	Z+3, r26	; 0x03
   1b6f4:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

    return(1);
   1b6f8:	81 e0       	ldi	r24, 0x01	; 1
   1b6fa:	90 e0       	ldi	r25, 0x00	; 0
   1b6fc:	02 c0       	rjmp	.+4      	; 0x1b702 <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b6fe:	8f ef       	ldi	r24, 0xFF	; 255
   1b700:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1b702:	cd b7       	in	r28, 0x3d	; 61
   1b704:	de b7       	in	r29, 0x3e	; 62
   1b706:	27 96       	adiw	r28, 0x07	; 7
   1b708:	e6 e0       	ldi	r30, 0x06	; 6
   1b70a:	71 c7       	rjmp	.+3810   	; 0x1c5ee <__epilogue_restores__+0x18>

0001b70c <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1b70c:	a7 e0       	ldi	r26, 0x07	; 7
   1b70e:	b0 e0       	ldi	r27, 0x00	; 0
   1b710:	eb e8       	ldi	r30, 0x8B	; 139
   1b712:	fb ed       	ldi	r31, 0xDB	; 219
   1b714:	4c c7       	rjmp	.+3736   	; 0x1c5ae <__prologue_saves__+0x10>
   1b716:	6c 01       	movw	r12, r24
   1b718:	8b 01       	movw	r16, r22
   1b71a:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1b71c:	fc 01       	movw	r30, r24
   1b71e:	80 81       	ld	r24, Z
   1b720:	81 11       	cpse	r24, r1
   1b722:	03 c0       	rjmp	.+6      	; 0x1b72a <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1b724:	85 eb       	ldi	r24, 0xB5	; 181
   1b726:	9f e2       	ldi	r25, 0x2F	; 47
   1b728:	06 c0       	rjmp	.+12     	; 0x1b736 <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1b72a:	fb 01       	movw	r30, r22
   1b72c:	80 81       	ld	r24, Z
   1b72e:	81 11       	cpse	r24, r1
   1b730:	0b c0       	rjmp	.+22     	; 0x1b748 <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1b732:	8e e8       	ldi	r24, 0x8E	; 142
   1b734:	9f e2       	ldi	r25, 0x2F	; 47
   1b736:	a0 e0       	ldi	r26, 0x00	; 0
   1b738:	ed b7       	in	r30, 0x3d	; 61
   1b73a:	fe b7       	in	r31, 0x3e	; 62
   1b73c:	81 83       	std	Z+1, r24	; 0x01
   1b73e:	92 83       	std	Z+2, r25	; 0x02
   1b740:	a3 83       	std	Z+3, r26	; 0x03
   1b742:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1b746:	58 c0       	rjmp	.+176    	; 0x1b7f8 <lif_rename_file+0xec>
        return(-1);
    }
    if(!*newlifname)
   1b748:	fa 01       	movw	r30, r20
   1b74a:	80 81       	ld	r24, Z
   1b74c:	81 11       	cpse	r24, r1
   1b74e:	03 c0       	rjmp	.+6      	; 0x1b756 <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1b750:	87 e6       	ldi	r24, 0x67	; 103
   1b752:	9f e2       	ldi	r25, 0x2F	; 47
   1b754:	f0 cf       	rjmp	.-32     	; 0x1b736 <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1b756:	ca 01       	movw	r24, r20
   1b758:	0e 94 ad c0 	call	0x1815a	; 0x1815a <lif_checkname>
   1b75c:	89 2b       	or	r24, r25
   1b75e:	19 f4       	brne	.+6      	; 0x1b766 <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1b760:	81 e3       	ldi	r24, 0x31	; 49
   1b762:	9f e2       	ldi	r25, 0x2F	; 47
   1b764:	e8 cf       	rjmp	.-48     	; 0x1b736 <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b766:	67 ef       	ldi	r22, 0xF7	; 247
   1b768:	78 e0       	ldi	r23, 0x08	; 8
   1b76a:	c6 01       	movw	r24, r12
   1b76c:	0e 94 fd ce 	call	0x19dfa	; 0x19dfa <lif_open_volume>
   1b770:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b772:	00 97       	sbiw	r24, 0x00	; 0
   1b774:	09 f4       	brne	.+2      	; 0x1b778 <lif_rename_file+0x6c>
   1b776:	40 c0       	rjmp	.+128    	; 0x1b7f8 <lif_rename_file+0xec>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1b778:	b8 01       	movw	r22, r16
   1b77a:	0e 94 cc d1 	call	0x1a398	; 0x1a398 <lif_find_file>
   1b77e:	5c 01       	movw	r10, r24
    if(index == -1)
   1b780:	01 96       	adiw	r24, 0x01	; 1
   1b782:	a1 f4       	brne	.+40     	; 0x1b7ac <lif_rename_file+0xa0>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1b784:	ed b7       	in	r30, 0x3d	; 61
   1b786:	fe b7       	in	r31, 0x3e	; 62
   1b788:	17 83       	std	Z+7, r17	; 0x07
   1b78a:	06 83       	std	Z+6, r16	; 0x06
   1b78c:	d5 82       	std	Z+5, r13	; 0x05
   1b78e:	c4 82       	std	Z+4, r12	; 0x04
   1b790:	88 e0       	ldi	r24, 0x08	; 8
   1b792:	9f e2       	ldi	r25, 0x2F	; 47
   1b794:	a0 e0       	ldi	r26, 0x00	; 0
   1b796:	81 83       	std	Z+1, r24	; 0x01
   1b798:	92 83       	std	Z+2, r25	; 0x02
   1b79a:	a3 83       	std	Z+3, r26	; 0x03
   1b79c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b7a0:	ce 01       	movw	r24, r28
   1b7a2:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1b7a6:	80 e0       	ldi	r24, 0x00	; 0
   1b7a8:	90 e0       	ldi	r25, 0x00	; 0
   1b7aa:	28 c0       	rjmp	.+80     	; 0x1b7fc <lif_rename_file+0xf0>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1b7ac:	4a e0       	ldi	r20, 0x0A	; 10
   1b7ae:	50 e0       	ldi	r21, 0x00	; 0
   1b7b0:	b7 01       	movw	r22, r14
   1b7b2:	ce 01       	movw	r24, r28
   1b7b4:	81 5b       	subi	r24, 0xB1	; 177
   1b7b6:	9f 4f       	sbci	r25, 0xFF	; 255
   1b7b8:	0e 94 e7 c0 	call	0x181ce	; 0x181ce <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1b7bc:	b5 01       	movw	r22, r10
   1b7be:	ce 01       	movw	r24, r28
   1b7c0:	0e 94 37 c9 	call	0x1926e	; 0x1926e <lif_writedirindex>
   1b7c4:	89 2b       	or	r24, r25
   1b7c6:	21 f4       	brne	.+8      	; 0x1b7d0 <lif_rename_file+0xc4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b7c8:	ce 01       	movw	r24, r28
   1b7ca:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>
   1b7ce:	14 c0       	rjmp	.+40     	; 0x1b7f8 <lif_rename_file+0xec>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1b7d0:	ed b7       	in	r30, 0x3d	; 61
   1b7d2:	fe b7       	in	r31, 0x3e	; 62
   1b7d4:	f7 82       	std	Z+7, r15	; 0x07
   1b7d6:	e6 82       	std	Z+6, r14	; 0x06
   1b7d8:	15 83       	std	Z+5, r17	; 0x05
   1b7da:	04 83       	std	Z+4, r16	; 0x04
   1b7dc:	81 ef       	ldi	r24, 0xF1	; 241
   1b7de:	9e e2       	ldi	r25, 0x2E	; 46
   1b7e0:	a0 e0       	ldi	r26, 0x00	; 0
   1b7e2:	81 83       	std	Z+1, r24	; 0x01
   1b7e4:	92 83       	std	Z+2, r25	; 0x02
   1b7e6:	a3 83       	std	Z+3, r26	; 0x03
   1b7e8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b7ec:	ce 01       	movw	r24, r28
   1b7ee:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1b7f2:	81 e0       	ldi	r24, 0x01	; 1
   1b7f4:	90 e0       	ldi	r25, 0x00	; 0
   1b7f6:	02 c0       	rjmp	.+4      	; 0x1b7fc <lif_rename_file+0xf0>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b7f8:	8f ef       	ldi	r24, 0xFF	; 255
   1b7fa:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1b7fc:	cd b7       	in	r28, 0x3d	; 61
   1b7fe:	de b7       	in	r29, 0x3e	; 62
   1b800:	27 96       	adiw	r28, 0x07	; 7
   1b802:	ea e0       	ldi	r30, 0x0A	; 10
   1b804:	f0 c6       	rjmp	.+3552   	; 0x1c5e6 <__epilogue_restores__+0x10>

0001b806 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1b806:	4f 92       	push	r4
   1b808:	5f 92       	push	r5
   1b80a:	6f 92       	push	r6
   1b80c:	7f 92       	push	r7
   1b80e:	af 92       	push	r10
   1b810:	bf 92       	push	r11
   1b812:	cf 92       	push	r12
   1b814:	df 92       	push	r13
   1b816:	ef 92       	push	r14
   1b818:	ff 92       	push	r15
   1b81a:	0f 93       	push	r16
   1b81c:	1f 93       	push	r17
   1b81e:	cf 93       	push	r28
   1b820:	df 93       	push	r29
   1b822:	ad b7       	in	r26, 0x3d	; 61
   1b824:	be b7       	in	r27, 0x3e	; 62
   1b826:	17 97       	sbiw	r26, 0x07	; 7
   1b828:	0f b6       	in	r0, 0x3f	; 63
   1b82a:	f8 94       	cli
   1b82c:	be bf       	out	0x3e, r27	; 62
   1b82e:	0f be       	out	0x3f, r0	; 63
   1b830:	ad bf       	out	0x3d, r26	; 61
   1b832:	27 01       	movw	r4, r14
   1b834:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1b836:	dc 01       	movw	r26, r24
   1b838:	ec 91       	ld	r30, X
   1b83a:	e1 11       	cpse	r30, r1
   1b83c:	03 c0       	rjmp	.+6      	; 0x1b844 <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1b83e:	88 ec       	ldi	r24, 0xC8	; 200
   1b840:	9e e2       	ldi	r25, 0x2E	; 46
   1b842:	16 c0       	rjmp	.+44     	; 0x1b870 <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1b844:	db 01       	movw	r26, r22
   1b846:	ec 91       	ld	r30, X
   1b848:	e1 11       	cpse	r30, r1
   1b84a:	03 c0       	rjmp	.+6      	; 0x1b852 <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1b84c:	83 ea       	ldi	r24, 0xA3	; 163
   1b84e:	9e e2       	ldi	r25, 0x2E	; 46
   1b850:	0f c0       	rjmp	.+30     	; 0x1b870 <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1b852:	21 15       	cp	r18, r1
   1b854:	31 05       	cpc	r19, r1
   1b856:	41 05       	cpc	r20, r1
   1b858:	51 05       	cpc	r21, r1
   1b85a:	19 f4       	brne	.+6      	; 0x1b862 <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1b85c:	80 e8       	ldi	r24, 0x80	; 128
   1b85e:	9e e2       	ldi	r25, 0x2E	; 46
   1b860:	07 c0       	rjmp	.+14     	; 0x1b870 <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1b862:	e1 14       	cp	r14, r1
   1b864:	f1 04       	cpc	r15, r1
   1b866:	01 05       	cpc	r16, r1
   1b868:	11 05       	cpc	r17, r1
   1b86a:	59 f4       	brne	.+22     	; 0x1b882 <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1b86c:	80 e6       	ldi	r24, 0x60	; 96
   1b86e:	9e e2       	ldi	r25, 0x2E	; 46
   1b870:	a0 e0       	ldi	r26, 0x00	; 0
   1b872:	ed b7       	in	r30, 0x3d	; 61
   1b874:	fe b7       	in	r31, 0x3e	; 62
   1b876:	81 83       	std	Z+1, r24	; 0x01
   1b878:	92 83       	std	Z+2, r25	; 0x02
   1b87a:	a3 83       	std	Z+3, r26	; 0x03
   1b87c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1b880:	2b c0       	rjmp	.+86     	; 0x1b8d8 <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1b882:	67 01       	movw	r12, r14
   1b884:	78 01       	movw	r14, r16
   1b886:	f2 e0       	ldi	r31, 0x02	; 2
   1b888:	cf 1a       	sub	r12, r31
   1b88a:	d1 08       	sbc	r13, r1
   1b88c:	e1 08       	sbc	r14, r1
   1b88e:	f1 08       	sbc	r15, r1
   1b890:	56 01       	movw	r10, r12
   1b892:	67 01       	movw	r12, r14
   1b894:	a2 1a       	sub	r10, r18
   1b896:	b3 0a       	sbc	r11, r19
   1b898:	c4 0a       	sbc	r12, r20
   1b89a:	d5 0a       	sbc	r13, r21
   1b89c:	79 01       	movw	r14, r18
   1b89e:	8a 01       	movw	r16, r20
   1b8a0:	22 e0       	ldi	r18, 0x02	; 2
   1b8a2:	30 e0       	ldi	r19, 0x00	; 0
   1b8a4:	40 e0       	ldi	r20, 0x00	; 0
   1b8a6:	50 e0       	ldi	r21, 0x00	; 0
   1b8a8:	0e 94 b3 ca 	call	0x19566	; 0x19566 <lif_create_volume>
    if(LIF == NULL)
   1b8ac:	00 97       	sbiw	r24, 0x00	; 0
   1b8ae:	a1 f0       	breq	.+40     	; 0x1b8d8 <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1b8b0:	0e 94 42 c8 	call	0x19084	; 0x19084 <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1b8b4:	82 01       	movw	r16, r4
   1b8b6:	d6 2d       	mov	r29, r6
   1b8b8:	c7 2d       	mov	r28, r7
   1b8ba:	ed b7       	in	r30, 0x3d	; 61
   1b8bc:	fe b7       	in	r31, 0x3e	; 62
   1b8be:	44 82       	std	Z+4, r4	; 0x04
   1b8c0:	15 83       	std	Z+5, r17	; 0x05
   1b8c2:	66 82       	std	Z+6, r6	; 0x06
   1b8c4:	77 82       	std	Z+7, r7	; 0x07
   1b8c6:	80 e4       	ldi	r24, 0x40	; 64
   1b8c8:	9e e2       	ldi	r25, 0x2E	; 46
   1b8ca:	a0 e0       	ldi	r26, 0x00	; 0
   1b8cc:	81 83       	std	Z+1, r24	; 0x01
   1b8ce:	92 83       	std	Z+2, r25	; 0x02
   1b8d0:	a3 83       	std	Z+3, r26	; 0x03
   1b8d2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    return(end);
   1b8d6:	04 c0       	rjmp	.+8      	; 0x1b8e0 <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1b8d8:	0f ef       	ldi	r16, 0xFF	; 255
   1b8da:	1f ef       	ldi	r17, 0xFF	; 255
   1b8dc:	df ef       	ldi	r29, 0xFF	; 255
   1b8de:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1b8e0:	b8 01       	movw	r22, r16
   1b8e2:	8d 2f       	mov	r24, r29
   1b8e4:	9c 2f       	mov	r25, r28
   1b8e6:	ad b7       	in	r26, 0x3d	; 61
   1b8e8:	be b7       	in	r27, 0x3e	; 62
   1b8ea:	17 96       	adiw	r26, 0x07	; 7
   1b8ec:	0f b6       	in	r0, 0x3f	; 63
   1b8ee:	f8 94       	cli
   1b8f0:	be bf       	out	0x3e, r27	; 62
   1b8f2:	0f be       	out	0x3f, r0	; 63
   1b8f4:	ad bf       	out	0x3d, r26	; 61
   1b8f6:	df 91       	pop	r29
   1b8f8:	cf 91       	pop	r28
   1b8fa:	1f 91       	pop	r17
   1b8fc:	0f 91       	pop	r16
   1b8fe:	ff 90       	pop	r15
   1b900:	ef 90       	pop	r14
   1b902:	df 90       	pop	r13
   1b904:	cf 90       	pop	r12
   1b906:	bf 90       	pop	r11
   1b908:	af 90       	pop	r10
   1b90a:	7f 90       	pop	r7
   1b90c:	6f 90       	pop	r6
   1b90e:	5f 90       	pop	r5
   1b910:	4f 90       	pop	r4
   1b912:	08 95       	ret

0001b914 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1b914:	8f 92       	push	r8
   1b916:	9f 92       	push	r9
   1b918:	af 92       	push	r10
   1b91a:	bf 92       	push	r11
   1b91c:	ef 92       	push	r14
   1b91e:	ff 92       	push	r15
   1b920:	0f 93       	push	r16
   1b922:	1f 93       	push	r17
   1b924:	cf 93       	push	r28
   1b926:	df 93       	push	r29
   1b928:	00 d0       	rcall	.+0      	; 0x1b92a <lif_tests+0x16>
   1b92a:	00 d0       	rcall	.+0      	; 0x1b92c <lif_tests+0x18>
   1b92c:	1f 92       	push	r1
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1b92e:	82 30       	cpi	r24, 0x02	; 2
   1b930:	91 05       	cpc	r25, r1
   1b932:	0c f4       	brge	.+2      	; 0x1b936 <lif_tests+0x22>
   1b934:	17 c1       	rjmp	.+558    	; 0x1bb64 <lif_tests+0x250>
        return (1);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1b936:	fb 01       	movw	r30, r22
   1b938:	02 81       	ldd	r16, Z+2	; 0x02
   1b93a:	13 81       	ldd	r17, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1b93c:	01 15       	cp	r16, r1
   1b93e:	11 05       	cpc	r17, r1
   1b940:	09 f4       	brne	.+2      	; 0x1b944 <lif_tests+0x30>
   1b942:	10 c1       	rjmp	.+544    	; 0x1bb64 <lif_tests+0x250>
   1b944:	f8 01       	movw	r30, r16
   1b946:	20 81       	ld	r18, Z
   1b948:	22 23       	and	r18, r18
   1b94a:	09 f4       	brne	.+2      	; 0x1b94e <lif_tests+0x3a>
   1b94c:	0b c1       	rjmp	.+534    	; 0x1bb64 <lif_tests+0x250>
   1b94e:	eb 01       	movw	r28, r22
   1b950:	7c 01       	movw	r14, r24
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b952:	69 e8       	ldi	r22, 0x89	; 137
   1b954:	76 e1       	ldi	r23, 0x16	; 22
   1b956:	c8 01       	movw	r24, r16
   1b958:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
   1b95c:	89 2b       	or	r24, r25
   1b95e:	29 f0       	breq	.+10     	; 0x1b96a <lif_tests+0x56>
    {
        lif_help(1);
   1b960:	81 e0       	ldi	r24, 0x01	; 1
   1b962:	90 e0       	ldi	r25, 0x00	; 0
   1b964:	0e 94 87 be 	call	0x17d0e	; 0x17d0e <lif_help>
   1b968:	fd c0       	rjmp	.+506    	; 0x1bb64 <lif_tests+0x250>
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b96a:	68 e8       	ldi	r22, 0x88	; 136
   1b96c:	76 e1       	ldi	r23, 0x16	; 22
   1b96e:	c8 01       	movw	r24, r16
   1b970:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
   1b974:	89 2b       	or	r24, r25
   1b976:	a1 f7       	brne	.-24     	; 0x1b960 <lif_tests+0x4c>
   1b978:	6e e8       	ldi	r22, 0x8E	; 142
   1b97a:	76 e1       	ldi	r23, 0x16	; 22
   1b97c:	c8 01       	movw	r24, r16
   1b97e:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
   1b982:	89 2b       	or	r24, r25
   1b984:	69 f7       	brne	.-38     	; 0x1b960 <lif_tests+0x4c>
        return(1);
    }

// Turn one debugging
// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1b986:	97 01       	movw	r18, r14
   1b988:	42 e0       	ldi	r20, 0x02	; 2
   1b98a:	50 e0       	ldi	r21, 0x00	; 0
   1b98c:	61 e9       	ldi	r22, 0x91	; 145
   1b98e:	76 e1       	ldi	r23, 0x16	; 22
   1b990:	c8 01       	movw	r24, r16
   1b992:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1b996:	89 2b       	or	r24, r25
   1b998:	39 f0       	breq	.+14     	; 0x1b9a8 <lif_tests+0x94>
    {
        debuglevel = 0xffff;
   1b99a:	8f ef       	ldi	r24, 0xFF	; 255
   1b99c:	9f ef       	ldi	r25, 0xFF	; 255
   1b99e:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1b9a2:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
   1b9a6:	de c0       	rjmp	.+444    	; 0x1bb64 <lif_tests+0x250>
        return(1);
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1b9a8:	97 01       	movw	r18, r14
   1b9aa:	45 e0       	ldi	r20, 0x05	; 5
   1b9ac:	50 e0       	ldi	r21, 0x00	; 0
   1b9ae:	64 e9       	ldi	r22, 0x94	; 148
   1b9b0:	76 e1       	ldi	r23, 0x16	; 22
   1b9b2:	c8 01       	movw	r24, r16
   1b9b4:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1b9b8:	89 2b       	or	r24, r25
   1b9ba:	41 f0       	breq	.+16     	; 0x1b9cc <lif_tests+0xb8>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b9bc:	48 85       	ldd	r20, Y+8	; 0x08
   1b9be:	59 85       	ldd	r21, Y+9	; 0x09
   1b9c0:	6e 81       	ldd	r22, Y+6	; 0x06
   1b9c2:	7f 81       	ldd	r23, Y+7	; 0x07
   1b9c4:	8c 81       	ldd	r24, Y+4	; 0x04
   1b9c6:	9d 81       	ldd	r25, Y+5	; 0x05
   1b9c8:	83 dc       	rcall	.-1786   	; 0x1b2d0 <lif_add_lif_file>
   1b9ca:	cc c0       	rjmp	.+408    	; 0x1bb64 <lif_tests+0x250>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1b9cc:	97 01       	movw	r18, r14
   1b9ce:	45 e0       	ldi	r20, 0x05	; 5
   1b9d0:	50 e0       	ldi	r21, 0x00	; 0
   1b9d2:	6b e9       	ldi	r22, 0x9B	; 155
   1b9d4:	76 e1       	ldi	r23, 0x16	; 22
   1b9d6:	c8 01       	movw	r24, r16
   1b9d8:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1b9dc:	89 2b       	or	r24, r25
   1b9de:	49 f0       	breq	.+18     	; 0x1b9f2 <lif_tests+0xde>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1b9e0:	48 85       	ldd	r20, Y+8	; 0x08
   1b9e2:	59 85       	ldd	r21, Y+9	; 0x09
   1b9e4:	6e 81       	ldd	r22, Y+6	; 0x06
   1b9e6:	7f 81       	ldd	r23, Y+7	; 0x07
   1b9e8:	8c 81       	ldd	r24, Y+4	; 0x04
   1b9ea:	9d 81       	ldd	r25, Y+5	; 0x05
   1b9ec:	0e 94 45 d4 	call	0x1a88a	; 0x1a88a <lif_add_ascii_file_as_e010>
   1b9f0:	b9 c0       	rjmp	.+370    	; 0x1bb64 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1b9f2:	97 01       	movw	r18, r14
   1b9f4:	45 e0       	ldi	r20, 0x05	; 5
   1b9f6:	50 e0       	ldi	r21, 0x00	; 0
   1b9f8:	6f e9       	ldi	r22, 0x9F	; 159
   1b9fa:	76 e1       	ldi	r23, 0x16	; 22
   1b9fc:	c8 01       	movw	r24, r16
   1b9fe:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1ba02:	89 2b       	or	r24, r25
   1ba04:	e1 f1       	breq	.+120    	; 0x1ba7e <lif_tests+0x16a>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1ba06:	ac 80       	ldd	r10, Y+4	; 0x04
   1ba08:	bd 80       	ldd	r11, Y+5	; 0x05
        char *label = argv[ind+1];
   1ba0a:	8e 80       	ldd	r8, Y+6	; 0x06
   1ba0c:	9f 80       	ldd	r9, Y+7	; 0x07
        char *model = argv[ind+2];
   1ba0e:	08 84       	ldd	r0, Y+8	; 0x08
   1ba10:	d9 85       	ldd	r29, Y+9	; 0x09
   1ba12:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1ba14:	6a ea       	ldi	r22, 0xAA	; 170
   1ba16:	76 e1       	ldi	r23, 0x16	; 22
   1ba18:	ce 01       	movw	r24, r28
   1ba1a:	0e 94 c3 32 	call	0x6586	; 0x6586 <MATCHI_LEN>
   1ba1e:	89 2b       	or	r24, r25
   1ba20:	09 f0       	breq	.+2      	; 0x1ba24 <lif_tests+0x110>
            model +=2;
   1ba22:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1ba24:	40 e0       	ldi	r20, 0x00	; 0
   1ba26:	50 e0       	ldi	r21, 0x00	; 0
   1ba28:	60 e0       	ldi	r22, 0x00	; 0
   1ba2a:	70 e0       	ldi	r23, 0x00	; 0
   1ba2c:	ce 01       	movw	r24, r28
   1ba2e:	0e 94 da a1 	call	0x143b4	; 0x143b4 <hpdir_find_drive>
   1ba32:	89 2b       	or	r24, r25
   1ba34:	b9 f0       	breq	.+46     	; 0x1ba64 <lif_tests+0x150>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1ba36:	60 91 97 21 	lds	r22, 0x2197	; 0x802197 <hpdir+0xac>
   1ba3a:	70 91 98 21 	lds	r23, 0x2198	; 0x802198 <hpdir+0xad>
   1ba3e:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <hpdir+0xae>
   1ba42:	90 91 9a 21 	lds	r25, 0x219A	; 0x80219a <hpdir+0xaf>
   1ba46:	0e 94 bd a1 	call	0x1437a	; 0x1437a <lif_dir_count>
   1ba4a:	9b 01       	movw	r18, r22
   1ba4c:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
            lif_create_image(name, label, dir, sectors);
   1ba4e:	e0 90 97 21 	lds	r14, 0x2197	; 0x802197 <hpdir+0xac>
   1ba52:	f0 90 98 21 	lds	r15, 0x2198	; 0x802198 <hpdir+0xad>
   1ba56:	00 91 99 21 	lds	r16, 0x2199	; 0x802199 <hpdir+0xae>
   1ba5a:	10 91 9a 21 	lds	r17, 0x219A	; 0x80219a <hpdir+0xaf>
   1ba5e:	b4 01       	movw	r22, r8
   1ba60:	c5 01       	movw	r24, r10
   1ba62:	29 c0       	rjmp	.+82     	; 0x1bab6 <lif_tests+0x1a2>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1ba64:	ed b7       	in	r30, 0x3d	; 61
   1ba66:	fe b7       	in	r31, 0x3e	; 62
   1ba68:	d5 83       	std	Z+5, r29	; 0x05
   1ba6a:	c4 83       	std	Z+4, r28	; 0x04
   1ba6c:	84 e7       	ldi	r24, 0x74	; 116
   1ba6e:	90 e4       	ldi	r25, 0x40	; 64
   1ba70:	a0 e0       	ldi	r26, 0x00	; 0
   1ba72:	81 83       	std	Z+1, r24	; 0x01
   1ba74:	92 83       	std	Z+2, r25	; 0x02
   1ba76:	a3 83       	std	Z+3, r26	; 0x03
   1ba78:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1ba7c:	73 c0       	rjmp	.+230    	; 0x1bb64 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1ba7e:	97 01       	movw	r18, r14
   1ba80:	46 e0       	ldi	r20, 0x06	; 6
   1ba82:	50 e0       	ldi	r21, 0x00	; 0
   1ba84:	6d ea       	ldi	r22, 0xAD	; 173
   1ba86:	76 e1       	ldi	r23, 0x16	; 22
   1ba88:	c8 01       	movw	r24, r16
   1ba8a:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1ba8e:	89 2b       	or	r24, r25
   1ba90:	a1 f0       	breq	.+40     	; 0x1baba <lif_tests+0x1a6>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1ba92:	88 85       	ldd	r24, Y+8	; 0x08
   1ba94:	99 85       	ldd	r25, Y+9	; 0x09
   1ba96:	0e 94 1b 47 	call	0x8e36	; 0x8e36 <atol>
   1ba9a:	4b 01       	movw	r8, r22
   1ba9c:	5c 01       	movw	r10, r24
   1ba9e:	8a 85       	ldd	r24, Y+10	; 0x0a
   1baa0:	9b 85       	ldd	r25, Y+11	; 0x0b
   1baa2:	0e 94 1b 47 	call	0x8e36	; 0x8e36 <atol>
   1baa6:	7b 01       	movw	r14, r22
   1baa8:	8c 01       	movw	r16, r24
   1baaa:	6e 81       	ldd	r22, Y+6	; 0x06
   1baac:	7f 81       	ldd	r23, Y+7	; 0x07
   1baae:	a5 01       	movw	r20, r10
   1bab0:	94 01       	movw	r18, r8
   1bab2:	8c 81       	ldd	r24, Y+4	; 0x04
   1bab4:	9d 81       	ldd	r25, Y+5	; 0x05
   1bab6:	a7 de       	rcall	.-690    	; 0x1b806 <lif_create_image>
   1bab8:	55 c0       	rjmp	.+170    	; 0x1bb64 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1baba:	97 01       	movw	r18, r14
   1babc:	44 e0       	ldi	r20, 0x04	; 4
   1babe:	50 e0       	ldi	r21, 0x00	; 0
   1bac0:	64 eb       	ldi	r22, 0xB4	; 180
   1bac2:	76 e1       	ldi	r23, 0x16	; 22
   1bac4:	c8 01       	movw	r24, r16
   1bac6:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1baca:	89 2b       	or	r24, r25
   1bacc:	31 f0       	breq	.+12     	; 0x1bada <lif_tests+0x1c6>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1bace:	6e 81       	ldd	r22, Y+6	; 0x06
   1bad0:	7f 81       	ldd	r23, Y+7	; 0x07
   1bad2:	8c 81       	ldd	r24, Y+4	; 0x04
   1bad4:	9d 81       	ldd	r25, Y+5	; 0x05
   1bad6:	85 dd       	rcall	.-1270   	; 0x1b5e2 <lif_del_file>
   1bad8:	45 c0       	rjmp	.+138    	; 0x1bb64 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1bada:	97 01       	movw	r18, r14
   1badc:	43 e0       	ldi	r20, 0x03	; 3
   1bade:	50 e0       	ldi	r21, 0x00	; 0
   1bae0:	64 ec       	ldi	r22, 0xC4	; 196
   1bae2:	7b e0       	ldi	r23, 0x0B	; 11
   1bae4:	c8 01       	movw	r24, r16
   1bae6:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1baea:	89 2b       	or	r24, r25
   1baec:	29 f0       	breq	.+10     	; 0x1baf8 <lif_tests+0x1e4>
    {
        lif_dir(argv[ind]);
   1baee:	8c 81       	ldd	r24, Y+4	; 0x04
   1baf0:	9d 81       	ldd	r25, Y+5	; 0x05
   1baf2:	0e 94 f7 cf 	call	0x19fee	; 0x19fee <lif_dir>
   1baf6:	36 c0       	rjmp	.+108    	; 0x1bb64 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1baf8:	97 01       	movw	r18, r14
   1bafa:	45 e0       	ldi	r20, 0x05	; 5
   1bafc:	50 e0       	ldi	r21, 0x00	; 0
   1bafe:	68 eb       	ldi	r22, 0xB8	; 184
   1bb00:	76 e1       	ldi	r23, 0x16	; 22
   1bb02:	c8 01       	movw	r24, r16
   1bb04:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1bb08:	89 2b       	or	r24, r25
   1bb0a:	41 f0       	breq	.+16     	; 0x1bb1c <lif_tests+0x208>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1bb0c:	48 85       	ldd	r20, Y+8	; 0x08
   1bb0e:	59 85       	ldd	r21, Y+9	; 0x09
   1bb10:	6e 81       	ldd	r22, Y+6	; 0x06
   1bb12:	7f 81       	ldd	r23, Y+7	; 0x07
   1bb14:	8c 81       	ldd	r24, Y+4	; 0x04
   1bb16:	9d 81       	ldd	r25, Y+5	; 0x05
   1bb18:	a3 da       	rcall	.-2746   	; 0x1b060 <lif_extract_lif_as_lif>
   1bb1a:	24 c0       	rjmp	.+72     	; 0x1bb64 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1bb1c:	97 01       	movw	r18, r14
   1bb1e:	45 e0       	ldi	r20, 0x05	; 5
   1bb20:	50 e0       	ldi	r21, 0x00	; 0
   1bb22:	63 ec       	ldi	r22, 0xC3	; 195
   1bb24:	76 e1       	ldi	r23, 0x16	; 22
   1bb26:	c8 01       	movw	r24, r16
   1bb28:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1bb2c:	89 2b       	or	r24, r25
   1bb2e:	49 f0       	breq	.+18     	; 0x1bb42 <lif_tests+0x22e>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1bb30:	48 85       	ldd	r20, Y+8	; 0x08
   1bb32:	59 85       	ldd	r21, Y+9	; 0x09
   1bb34:	6e 81       	ldd	r22, Y+6	; 0x06
   1bb36:	7f 81       	ldd	r23, Y+7	; 0x07
   1bb38:	8c 81       	ldd	r24, Y+4	; 0x04
   1bb3a:	9d 81       	ldd	r25, Y+5	; 0x05
   1bb3c:	0e 94 81 d5 	call	0x1ab02	; 0x1ab02 <lif_extract_e010_as_ascii>
   1bb40:	11 c0       	rjmp	.+34     	; 0x1bb64 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1bb42:	97 01       	movw	r18, r14
   1bb44:	45 e0       	ldi	r20, 0x05	; 5
   1bb46:	50 e0       	ldi	r21, 0x00	; 0
   1bb48:	61 ed       	ldi	r22, 0xD1	; 209
   1bb4a:	7b e0       	ldi	r23, 0x0B	; 11
   1bb4c:	c8 01       	movw	r24, r16
   1bb4e:	0e 94 99 32 	call	0x6532	; 0x6532 <MATCHARGS>
   1bb52:	00 97       	sbiw	r24, 0x00	; 0
   1bb54:	49 f0       	breq	.+18     	; 0x1bb68 <lif_tests+0x254>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1bb56:	48 85       	ldd	r20, Y+8	; 0x08
   1bb58:	59 85       	ldd	r21, Y+9	; 0x09
   1bb5a:	6e 81       	ldd	r22, Y+6	; 0x06
   1bb5c:	7f 81       	ldd	r23, Y+7	; 0x07
   1bb5e:	8c 81       	ldd	r24, Y+4	; 0x04
   1bb60:	9d 81       	ldd	r25, Y+5	; 0x05
   1bb62:	d4 dd       	rcall	.-1112   	; 0x1b70c <lif_rename_file>
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
        return (1);
   1bb64:	81 e0       	ldi	r24, 0x01	; 1
   1bb66:	90 e0       	ldi	r25, 0x00	; 0
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1bb68:	0f 90       	pop	r0
   1bb6a:	0f 90       	pop	r0
   1bb6c:	0f 90       	pop	r0
   1bb6e:	0f 90       	pop	r0
   1bb70:	0f 90       	pop	r0
   1bb72:	df 91       	pop	r29
   1bb74:	cf 91       	pop	r28
   1bb76:	1f 91       	pop	r17
   1bb78:	0f 91       	pop	r16
   1bb7a:	ff 90       	pop	r15
   1bb7c:	ef 90       	pop	r14
   1bb7e:	bf 90       	pop	r11
   1bb80:	af 90       	pop	r10
   1bb82:	9f 90       	pop	r9
   1bb84:	8f 90       	pop	r8
   1bb86:	08 95       	ret

0001bb88 <lcd_task>:
time_t _seconds = 0;
static int _display_cnt = 0;

void lcd_task()
{
	++_display_cnt;
   1bb88:	80 91 e8 19 	lds	r24, 0x19E8	; 0x8019e8 <_display_cnt>
   1bb8c:	90 91 e9 19 	lds	r25, 0x19E9	; 0x8019e9 <_display_cnt+0x1>
   1bb90:	01 96       	adiw	r24, 0x01	; 1
   1bb92:	90 93 e9 19 	sts	0x19E9, r25	; 0x8019e9 <_display_cnt+0x1>
   1bb96:	80 93 e8 19 	sts	0x19E8, r24	; 0x8019e8 <_display_cnt>
   1bb9a:	08 95       	ret

0001bb9c <copyright>:
#include <math.h>

///@brief Display Copyright
///@return void
void copyright()
{
   1bb9c:	00 d0       	rcall	.+0      	; 0x1bb9e <copyright+0x2>
   1bb9e:	00 d0       	rcall	.+0      	; 0x1bba0 <copyright+0x4>
   1bba0:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1bba2:	88 e1       	ldi	r24, 0x18	; 24
   1bba4:	96 e4       	ldi	r25, 0x46	; 70
   1bba6:	a0 e0       	ldi	r26, 0x00	; 0
   1bba8:	ed b7       	in	r30, 0x3d	; 61
   1bbaa:	fe b7       	in	r31, 0x3e	; 62
   1bbac:	81 83       	std	Z+1, r24	; 0x01
   1bbae:	92 83       	std	Z+2, r25	; 0x02
   1bbb0:	a3 83       	std	Z+3, r26	; 0x03
   1bbb2:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1bbb6:	89 ef       	ldi	r24, 0xF9	; 249
   1bbb8:	95 e4       	ldi	r25, 0x45	; 69
   1bbba:	a0 e0       	ldi	r26, 0x00	; 0
   1bbbc:	ed b7       	in	r30, 0x3d	; 61
   1bbbe:	fe b7       	in	r31, 0x3e	; 62
   1bbc0:	81 83       	std	Z+1, r24	; 0x01
   1bbc2:	92 83       	std	Z+2, r25	; 0x02
   1bbc4:	a3 83       	std	Z+3, r26	; 0x03
   1bbc6:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1bbca:	8c ed       	ldi	r24, 0xDC	; 220
   1bbcc:	95 e4       	ldi	r25, 0x45	; 69
   1bbce:	a0 e0       	ldi	r26, 0x00	; 0
   1bbd0:	ed b7       	in	r30, 0x3d	; 61
   1bbd2:	fe b7       	in	r31, 0x3e	; 62
   1bbd4:	81 83       	std	Z+1, r24	; 0x01
   1bbd6:	92 83       	std	Z+2, r25	; 0x02
   1bbd8:	a3 83       	std	Z+3, r26	; 0x03
   1bbda:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf(" GNU version 3\n");
   1bbde:	8c ec       	ldi	r24, 0xCC	; 204
   1bbe0:	95 e4       	ldi	r25, 0x45	; 69
   1bbe2:	a0 e0       	ldi	r26, 0x00	; 0
   1bbe4:	ed b7       	in	r30, 0x3d	; 61
   1bbe6:	fe b7       	in	r31, 0x3e	; 62
   1bbe8:	81 83       	std	Z+1, r24	; 0x01
   1bbea:	92 83       	std	Z+2, r25	; 0x02
   1bbec:	a3 83       	std	Z+3, r26	; 0x03
   1bbee:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1bbf2:	85 ea       	ldi	r24, 0xA5	; 165
   1bbf4:	95 e4       	ldi	r25, 0x45	; 69
   1bbf6:	a0 e0       	ldi	r26, 0x00	; 0
   1bbf8:	ed b7       	in	r30, 0x3d	; 61
   1bbfa:	fe b7       	in	r31, 0x3e	; 62
   1bbfc:	81 83       	std	Z+1, r24	; 0x01
   1bbfe:	92 83       	std	Z+2, r25	; 0x02
   1bc00:	a3 83       	std	Z+3, r26	; 0x03
   1bc02:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1bc06:	8b ec       	ldi	r24, 0xCB	; 203
   1bc08:	96 e1       	ldi	r25, 0x16	; 22
   1bc0a:	ed b7       	in	r30, 0x3d	; 61
   1bc0c:	fe b7       	in	r31, 0x3e	; 62
   1bc0e:	95 83       	std	Z+5, r25	; 0x05
   1bc10:	84 83       	std	Z+4, r24	; 0x04
   1bc12:	8b e8       	ldi	r24, 0x8B	; 139
   1bc14:	95 e4       	ldi	r25, 0x45	; 69
   1bc16:	a0 e0       	ldi	r26, 0x00	; 0
   1bc18:	81 83       	std	Z+1, r24	; 0x01
   1bc1a:	92 83       	std	Z+2, r25	; 0x02
   1bc1c:	a3 83       	std	Z+3, r26	; 0x03
   1bc1e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1bc22:	8f ee       	ldi	r24, 0xEF	; 239
   1bc24:	96 e1       	ldi	r25, 0x16	; 22
   1bc26:	ed b7       	in	r30, 0x3d	; 61
   1bc28:	fe b7       	in	r31, 0x3e	; 62
   1bc2a:	95 83       	std	Z+5, r25	; 0x05
   1bc2c:	84 83       	std	Z+4, r24	; 0x04
   1bc2e:	81 e7       	ldi	r24, 0x71	; 113
   1bc30:	95 e4       	ldi	r25, 0x45	; 69
   1bc32:	a0 e0       	ldi	r26, 0x00	; 0
   1bc34:	81 83       	std	Z+1, r24	; 0x01
   1bc36:	92 83       	std	Z+2, r25	; 0x02
   1bc38:	a3 83       	std	Z+3, r26	; 0x03
   1bc3a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("\n");
   1bc3e:	8f e6       	ldi	r24, 0x6F	; 111
   1bc40:	95 e4       	ldi	r25, 0x45	; 69
   1bc42:	a0 e0       	ldi	r26, 0x00	; 0
   1bc44:	ed b7       	in	r30, 0x3d	; 61
   1bc46:	fe b7       	in	r31, 0x3e	; 62
   1bc48:	81 83       	std	Z+1, r24	; 0x01
   1bc4a:	92 83       	std	Z+2, r25	; 0x02
   1bc4c:	a3 83       	std	Z+3, r26	; 0x03
   1bc4e:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
}
   1bc52:	0f 90       	pop	r0
   1bc54:	0f 90       	pop	r0
   1bc56:	0f 90       	pop	r0
   1bc58:	0f 90       	pop	r0
   1bc5a:	0f 90       	pop	r0
   1bc5c:	08 95       	ret

0001bc5e <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1bc5e:	00 d0       	rcall	.+0      	; 0x1bc60 <help+0x2>

    copyright();
   1bc60:	1f 92       	push	r1

#ifdef FATFS_TESTS
    fatfs_help(0);
   1bc62:	9c df       	rcall	.-200    	; 0x1bb9c <copyright>
   1bc64:	80 e0       	ldi	r24, 0x00	; 0
   1bc66:	90 e0       	ldi	r25, 0x00	; 0
   1bc68:	0e 94 9e 73 	call	0xe73c	; 0xe73c <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1bc6c:	80 e0       	ldi	r24, 0x00	; 0
   1bc6e:	90 e0       	ldi	r25, 0x00	; 0
   1bc70:	0e 94 eb 7e 	call	0xfdd6	; 0xfdd6 <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1bc74:	80 e0       	ldi	r24, 0x00	; 0
   1bc76:	90 e0       	ldi	r25, 0x00	; 0
   1bc78:	0e 94 87 be 	call	0x17d0e	; 0x17d0e <lif_help>
#endif

    gpib_help(0);
   1bc7c:	80 e0       	ldi	r24, 0x00	; 0
   1bc7e:	90 e0       	ldi	r25, 0x00	; 0
   1bc80:	0e 94 40 92 	call	0x12480	; 0x12480 <gpib_help>

    printf(
   1bc84:	81 e5       	ldi	r24, 0x51	; 81
   1bc86:	95 e4       	ldi	r25, 0x45	; 69
   1bc88:	a0 e0       	ldi	r26, 0x00	; 0
   1bc8a:	ed b7       	in	r30, 0x3d	; 61
   1bc8c:	fe b7       	in	r31, 0x3e	; 62
   1bc8e:	81 83       	std	Z+1, r24	; 0x01
   1bc90:	92 83       	std	Z+2, r25	; 0x02
   1bc92:	a3 83       	std	Z+3, r26	; 0x03
   1bc94:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
        "setdate\n"
        "time\n"
        "reset\n"
        "\n"
        );
}
   1bc98:	0f 90       	pop	r0
   1bc9a:	0f 90       	pop	r0
   1bc9c:	0f 90       	pop	r0
   1bc9e:	08 95       	ret

0001bca0 <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1bca0:	a1 e1       	ldi	r26, 0x11	; 17
   1bca2:	b0 e0       	ldi	r27, 0x00	; 0
   1bca4:	e5 e5       	ldi	r30, 0x55	; 85
   1bca6:	fe ed       	ldi	r31, 0xDE	; 222
   1bca8:	86 c4       	rjmp	.+2316   	; 0x1c5b6 <__prologue_saves__+0x18>
   1bcaa:	ec 01       	movw	r28, r24
   1bcac:	7b 01       	movw	r14, r22
   1bcae:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1bcb0:	60 e0       	ldi	r22, 0x00	; 0
   1bcb2:	70 e0       	ldi	r23, 0x00	; 0
   1bcb4:	0e 94 d7 38 	call	0x71ae	; 0x71ae <normalize>
    memset(buf,0,max);
   1bcb8:	a8 01       	movw	r20, r16
   1bcba:	60 e0       	ldi	r22, 0x00	; 0
   1bcbc:	70 e0       	ldi	r23, 0x00	; 0
   1bcbe:	c7 01       	movw	r24, r14
   1bcc0:	0e 94 aa e7 	call	0x1cf54	; 0x1cf54 <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1bcc4:	88 85       	ldd	r24, Y+8	; 0x08
   1bcc6:	99 85       	ldd	r25, Y+9	; 0x09
   1bcc8:	0e 94 bc 36 	call	0x6d78	; 0x6d78 <tm_mon_to_ascii>
   1bccc:	28 81       	ld	r18, Y
   1bcce:	39 81       	ldd	r19, Y+1	; 0x01
   1bcd0:	ed b7       	in	r30, 0x3d	; 61
   1bcd2:	fe b7       	in	r31, 0x3e	; 62
   1bcd4:	31 8b       	std	Z+17, r19	; 0x11
   1bcd6:	20 8b       	std	Z+16, r18	; 0x10
   1bcd8:	2a 81       	ldd	r18, Y+2	; 0x02
   1bcda:	3b 81       	ldd	r19, Y+3	; 0x03
   1bcdc:	37 87       	std	Z+15, r19	; 0x0f
   1bcde:	26 87       	std	Z+14, r18	; 0x0e
   1bce0:	2c 81       	ldd	r18, Y+4	; 0x04
   1bce2:	3d 81       	ldd	r19, Y+5	; 0x05
   1bce4:	35 87       	std	Z+13, r19	; 0x0d
   1bce6:	24 87       	std	Z+12, r18	; 0x0c
   1bce8:	2e 81       	ldd	r18, Y+6	; 0x06
   1bcea:	3f 81       	ldd	r19, Y+7	; 0x07
   1bcec:	33 87       	std	Z+11, r19	; 0x0b
   1bcee:	22 87       	std	Z+10, r18	; 0x0a
   1bcf0:	91 87       	std	Z+9, r25	; 0x09
   1bcf2:	80 87       	std	Z+8, r24	; 0x08
   1bcf4:	8b e3       	ldi	r24, 0x3B	; 59
   1bcf6:	95 e4       	ldi	r25, 0x45	; 69
   1bcf8:	a0 e0       	ldi	r26, 0x00	; 0
   1bcfa:	85 83       	std	Z+5, r24	; 0x05
   1bcfc:	96 83       	std	Z+6, r25	; 0x06
   1bcfe:	a7 83       	std	Z+7, r26	; 0x07
   1bd00:	01 50       	subi	r16, 0x01	; 1
   1bd02:	11 09       	sbc	r17, r1
   1bd04:	14 83       	std	Z+4, r17	; 0x04
   1bd06:	03 83       	std	Z+3, r16	; 0x03
   1bd08:	f2 82       	std	Z+2, r15	; 0x02
   1bd0a:	e1 82       	std	Z+1, r14	; 0x01
   1bd0c:	0e 94 53 46 	call	0x8ca6	; 0x8ca6 <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1bd10:	c7 01       	movw	r24, r14
   1bd12:	cd b7       	in	r28, 0x3d	; 61
   1bd14:	de b7       	in	r29, 0x3e	; 62
   1bd16:	61 96       	adiw	r28, 0x11	; 17
   1bd18:	e6 e0       	ldi	r30, 0x06	; 6
   1bd1a:	69 c4       	rjmp	.+2258   	; 0x1c5ee <__epilogue_restores__+0x18>

0001bd1c <i2c_lcd_test>:

void i2c_lcd_test()
{
   1bd1c:	af e2       	ldi	r26, 0x2F	; 47
   1bd1e:	b0 e0       	ldi	r27, 0x00	; 0
   1bd20:	e3 e9       	ldi	r30, 0x93	; 147
   1bd22:	fe ed       	ldi	r31, 0xDE	; 222
   1bd24:	4b c4       	rjmp	.+2198   	; 0x1c5bc <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1bd26:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1bd28:	f8 94       	cli
	if(!mmc_ins_status())
   1bd2a:	0e 94 99 6f 	call	0xdf32	; 0xdf32 <mmc_ins_status>
   1bd2e:	89 2b       	or	r24, r25
   1bd30:	49 f4       	brne	.+18     	; 0x1bd44 <i2c_lcd_test+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1bd32:	83 e1       	ldi	r24, 0x13	; 19
   1bd34:	97 e1       	ldi	r25, 0x17	; 23
   1bd36:	ed b7       	in	r30, 0x3d	; 61
   1bd38:	fe b7       	in	r31, 0x3e	; 62
   1bd3a:	97 83       	std	Z+7, r25	; 0x07
   1bd3c:	86 83       	std	Z+6, r24	; 0x06
   1bd3e:	85 e3       	ldi	r24, 0x35	; 53
   1bd40:	95 e4       	ldi	r25, 0x45	; 69
   1bd42:	17 c0       	rjmp	.+46     	; 0x1bd72 <i2c_lcd_test+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1bd44:	be 01       	movw	r22, r28
   1bd46:	68 5d       	subi	r22, 0xD8	; 216
   1bd48:	7f 4f       	sbci	r23, 0xFF	; 255
   1bd4a:	80 e0       	ldi	r24, 0x00	; 0
   1bd4c:	90 e0       	ldi	r25, 0x00	; 0
   1bd4e:	0e 94 f6 33 	call	0x67ec	; 0x67ec <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1bd52:	ce 01       	movw	r24, r28
   1bd54:	88 96       	adiw	r24, 0x28	; 40
   1bd56:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <gmtime>
   1bd5a:	4f e1       	ldi	r20, 0x1F	; 31
   1bd5c:	50 e0       	ldi	r21, 0x00	; 0
   1bd5e:	be 01       	movw	r22, r28
   1bd60:	68 5f       	subi	r22, 0xF8	; 248
   1bd62:	7f 4f       	sbci	r23, 0xFF	; 255
   1bd64:	9d df       	rcall	.-198    	; 0x1bca0 <lcd_time>
   1bd66:	ed b7       	in	r30, 0x3d	; 61
   1bd68:	fe b7       	in	r31, 0x3e	; 62
   1bd6a:	97 83       	std	Z+7, r25	; 0x07
   1bd6c:	86 83       	std	Z+6, r24	; 0x06
   1bd6e:	8f e2       	ldi	r24, 0x2F	; 47
   1bd70:	95 e4       	ldi	r25, 0x45	; 69
   1bd72:	a0 e0       	ldi	r26, 0x00	; 0
   1bd74:	83 83       	std	Z+3, r24	; 0x03
   1bd76:	94 83       	std	Z+4, r25	; 0x04
   1bd78:	a5 83       	std	Z+5, r26	; 0x05
   1bd7a:	80 ef       	ldi	r24, 0xF0	; 240
   1bd7c:	92 e0       	ldi	r25, 0x02	; 2
   1bd7e:	92 83       	std	Z+2, r25	; 0x02
   1bd80:	81 83       	std	Z+1, r24	; 0x01
   1bd82:	0e 94 67 46 	call	0x8cce	; 0x8cce <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1bd86:	1f bf       	out	0x3f, r17	; 63

    i2c_post();
   1bd88:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <i2c_post>
}
   1bd8c:	af 96       	adiw	r28, 0x2f	; 47
   1bd8e:	e3 e0       	ldi	r30, 0x03	; 3
   1bd90:	31 c4       	rjmp	.+2146   	; 0x1c5f4 <__epilogue_restores__+0x1e>

0001bd92 <task.part.0>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void task(uint8_t gpib)
   1bd92:	a9 e6       	ldi	r26, 0x69	; 105
   1bd94:	b1 e0       	ldi	r27, 0x01	; 1
   1bd96:	ee ec       	ldi	r30, 0xCE	; 206
   1bd98:	fe ed       	ldi	r31, 0xDE	; 222
   1bd9a:	0b c4       	rjmp	.+2070   	; 0x1c5b2 <__prologue_saves__+0x14>
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1bd9c:	82 ed       	ldi	r24, 0xD2	; 210
   1bd9e:	94 e4       	ldi	r25, 0x44	; 68
   1bda0:	a0 e0       	ldi	r26, 0x00	; 0
   1bda2:	ed b7       	in	r30, 0x3d	; 61
   1bda4:	fe b7       	in	r31, 0x3e	; 62
   1bda6:	81 83       	std	Z+1, r24	; 0x01
   1bda8:	92 83       	std	Z+2, r25	; 0x02
   1bdaa:	a3 83       	std	Z+3, r26	; 0x03
   1bdac:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

    fgets(line,sizeof(line)-2,stdin);
   1bdb0:	40 91 b2 1c 	lds	r20, 0x1CB2	; 0x801cb2 <__iob>
   1bdb4:	50 91 b3 1c 	lds	r21, 0x1CB3	; 0x801cb3 <__iob+0x1>
   1bdb8:	6e ef       	ldi	r22, 0xFE	; 254
   1bdba:	70 e0       	ldi	r23, 0x00	; 0
   1bdbc:	ce 01       	movw	r24, r28
   1bdbe:	06 96       	adiw	r24, 0x06	; 6
   1bdc0:	6c 01       	movw	r12, r24
   1bdc2:	0e 94 d7 76 	call	0xedae	; 0xedae <fgets>
    trim_tail(line);
   1bdc6:	c6 01       	movw	r24, r12
   1bdc8:	0e 94 57 32 	call	0x64ae	; 0x64ae <trim_tail>
    argc = split_args(line,argv,50);
   1bdcc:	42 e3       	ldi	r20, 0x32	; 50
   1bdce:	50 e0       	ldi	r21, 0x00	; 0
   1bdd0:	be 01       	movw	r22, r28
   1bdd2:	6a 5f       	subi	r22, 0xFA	; 250
   1bdd4:	7e 4f       	sbci	r23, 0xFE	; 254
   1bdd6:	c6 01       	movw	r24, r12
   1bdd8:	0e 94 dd 32 	call	0x65ba	; 0x65ba <split_args>
   1bddc:	7c 01       	movw	r14, r24
    for(i=0;i<argc;++i)
        printf("   [%s]\n", argv[i]);
#endif

    ind = 0;
    ptr = argv[ind++];
   1bdde:	ca 5f       	subi	r28, 0xFA	; 250
   1bde0:	de 4f       	sbci	r29, 0xFE	; 254
   1bde2:	08 81       	ld	r16, Y
   1bde4:	19 81       	ldd	r17, Y+1	; 0x01
   1bde6:	c6 50       	subi	r28, 0x06	; 6
   1bde8:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1bdea:	01 15       	cp	r16, r1
   1bdec:	11 05       	cpc	r17, r1
   1bdee:	09 f4       	brne	.+2      	; 0x1bdf2 <task.part.0+0x60>
   1bdf0:	6d c0       	rjmp	.+218    	; 0x1becc <task.part.0+0x13a>
   1bdf2:	18 16       	cp	r1, r24
   1bdf4:	19 06       	cpc	r1, r25
   1bdf6:	0c f0       	brlt	.+2      	; 0x1bdfa <task.part.0+0x68>
   1bdf8:	69 c0       	rjmp	.+210    	; 0x1becc <task.part.0+0x13a>
        delay_tests();
        result = 1;

    }
#endif
    else if ( MATCHI(ptr,"time") )
   1bdfa:	61 e2       	ldi	r22, 0x21	; 33
   1bdfc:	77 e1       	ldi	r23, 0x17	; 23
   1bdfe:	c8 01       	movw	r24, r16
   1be00:	0e 94 85 32 	call	0x650a	; 0x650a <MATCHI>
   1be04:	89 2b       	or	r24, r25
   1be06:	19 f5       	brne	.+70     	; 0x1be4e <task.part.0+0xbc>
    {
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"lcd") )
   1be08:	66 e2       	ldi	r22, 0x26	; 38
   1be0a:	77 e1       	ldi	r23, 0x17	; 23
   1be0c:	c8 01       	movw	r24, r16
   1be0e:	0e 94 85 32 	call	0x650a	; 0x650a <MATCHI>
   1be12:	89 2b       	or	r24, r25
    {
		i2c_lcd_test();
   1be14:	11 f0       	breq	.+4      	; 0x1be1a <task.part.0+0x88>
   1be16:	82 df       	rcall	.-252    	; 0x1bd1c <i2c_lcd_test>
   1be18:	59 c0       	rjmp	.+178    	; 0x1becc <task.part.0+0x13a>
        result = 1;
    }
    else if ( MATCHI(ptr,"reset") )
   1be1a:	66 ec       	ldi	r22, 0xC6	; 198
   1be1c:	7d e0       	ldi	r23, 0x0D	; 13
   1be1e:	c8 01       	movw	r24, r16
   1be20:	0e 94 85 32 	call	0x650a	; 0x650a <MATCHI>
   1be24:	89 2b       	or	r24, r25
   1be26:	51 f0       	breq	.+20     	; 0x1be3c <task.part.0+0xaa>
    {
        cli();
   1be28:	f8 94       	cli
        uart_rx_flush(0);
   1be2a:	80 e0       	ldi	r24, 0x00	; 0
   1be2c:	0e 94 83 29 	call	0x5306	; 0x5306 <uart_rx_flush>
        cli();
   1be30:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1be32:	82 e0       	ldi	r24, 0x02	; 2
   1be34:	84 bf       	out	0x34, r24	; 52
        RESET();
   1be36:	e0 e0       	ldi	r30, 0x00	; 0
   1be38:	fc ef       	ldi	r31, 0xFC	; 252
   1be3a:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1be3c:	6a e2       	ldi	r22, 0x2A	; 42
   1be3e:	77 e1       	ldi	r23, 0x17	; 23
   1be40:	c8 01       	movw	r24, r16
   1be42:	0e 94 85 32 	call	0x650a	; 0x650a <MATCHI>
   1be46:	89 2b       	or	r24, r25
   1be48:	29 f0       	breq	.+10     	; 0x1be54 <task.part.0+0xc2>
    {
        setdate();
   1be4a:	0e 94 c0 3b 	call	0x7780	; 0x7780 <setdate>
        display_clock();
   1be4e:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <display_clock>
   1be52:	3c c0       	rjmp	.+120    	; 0x1becc <task.part.0+0x13a>
        result = 1;
    }
    else if ( MATCH(ptr,"mem") )
   1be54:	62 e3       	ldi	r22, 0x32	; 50
   1be56:	77 e1       	ldi	r23, 0x17	; 23
   1be58:	c8 01       	movw	r24, r16
   1be5a:	0e 94 71 32 	call	0x64e2	; 0x64e2 <MATCH>
   1be5e:	89 2b       	or	r24, r25
   1be60:	19 f0       	breq	.+6      	; 0x1be68 <task.part.0+0xd6>
    {
        PrintFree();
   1be62:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <PrintFree>
   1be66:	32 c0       	rjmp	.+100    	; 0x1becc <task.part.0+0x13a>
        result = 1;

    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1be68:	69 e8       	ldi	r22, 0x89	; 137
   1be6a:	76 e1       	ldi	r23, 0x16	; 22
   1be6c:	c8 01       	movw	r24, r16
   1be6e:	0e 94 85 32 	call	0x650a	; 0x650a <MATCHI>
   1be72:	89 2b       	or	r24, r25
    {
        help();
   1be74:	11 f0       	breq	.+4      	; 0x1be7a <task.part.0+0xe8>
   1be76:	f3 de       	rcall	.-538    	; 0x1bc5e <help>
   1be78:	29 c0       	rjmp	.+82     	; 0x1becc <task.part.0+0x13a>
    {
        PrintFree();
        result = 1;

    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1be7a:	6f e8       	ldi	r22, 0x8F	; 143
   1be7c:	76 e1       	ldi	r23, 0x16	; 22
   1be7e:	c8 01       	movw	r24, r16
   1be80:	0e 94 85 32 	call	0x650a	; 0x650a <MATCHI>
   1be84:	89 2b       	or	r24, r25
   1be86:	b9 f7       	brne	.-18     	; 0x1be76 <task.part.0+0xe4>
    {
        help();
        result = 1;
    }

    else if(gpib_tests(argc,argv))
   1be88:	be 01       	movw	r22, r28
   1be8a:	6a 5f       	subi	r22, 0xFA	; 250
   1be8c:	7e 4f       	sbci	r23, 0xFE	; 254
   1be8e:	c7 01       	movw	r24, r14
   1be90:	0e 94 61 92 	call	0x124c2	; 0x124c2 <gpib_tests>
   1be94:	89 2b       	or	r24, r25
   1be96:	19 f0       	breq	.+6      	; 0x1be9e <task.part.0+0x10c>
    {
// Restore GPIB BUS states
        gpib_init_devices();
   1be98:	0e 94 75 8d 	call	0x11aea	; 0x11aea <gpib_init_devices>
   1be9c:	17 c0       	rjmp	.+46     	; 0x1becc <task.part.0+0x13a>
        result = 1;
    }

#ifdef POSIX_TESTS
    else if(posix_tests(argc,argv))
   1be9e:	be 01       	movw	r22, r28
   1bea0:	6a 5f       	subi	r22, 0xFA	; 250
   1bea2:	7e 4f       	sbci	r23, 0xFE	; 254
   1bea4:	c7 01       	movw	r24, r14
   1bea6:	0e 94 5d 82 	call	0x104ba	; 0x104ba <posix_tests>
   1beaa:	89 2b       	or	r24, r25
   1beac:	79 f4       	brne	.+30     	; 0x1becc <task.part.0+0x13a>
        result = 1;
#endif

#ifdef FATFS_TESTS
    else if(fatfs_tests(argc,argv))
   1beae:	be 01       	movw	r22, r28
   1beb0:	6a 5f       	subi	r22, 0xFA	; 250
   1beb2:	7e 4f       	sbci	r23, 0xFE	; 254
   1beb4:	c7 01       	movw	r24, r14
   1beb6:	0e 94 b8 74 	call	0xe970	; 0xe970 <fatfs_tests>
   1beba:	89 2b       	or	r24, r25
   1bebc:	39 f4       	brne	.+14     	; 0x1becc <task.part.0+0x13a>
        result = 1;
#endif

#ifdef LIF_SUPPORT
    else if(lif_tests(argc,argv))
   1bebe:	be 01       	movw	r22, r28
   1bec0:	6a 5f       	subi	r22, 0xFA	; 250
   1bec2:	7e 4f       	sbci	r23, 0xFE	; 254
   1bec4:	c7 01       	movw	r24, r14
   1bec6:	26 dd       	rcall	.-1460   	; 0x1b914 <lif_tests>
   1bec8:	89 2b       	or	r24, r25
   1beca:	59 f0       	breq	.+22     	; 0x1bee2 <task.part.0+0x150>
        result = 1;
#endif
    if(result)
        printf("OK\n");
   1becc:	8e ec       	ldi	r24, 0xCE	; 206
   1bece:	94 e4       	ldi	r25, 0x44	; 68
   1bed0:	a0 e0       	ldi	r26, 0x00	; 0
   1bed2:	ed b7       	in	r30, 0x3d	; 61
   1bed4:	fe b7       	in	r31, 0x3e	; 62
   1bed6:	81 83       	std	Z+1, r24	; 0x01
   1bed8:	92 83       	std	Z+2, r25	; 0x02
   1beda:	a3 83       	std	Z+3, r26	; 0x03
   1bedc:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1bee0:	0c c0       	rjmp	.+24     	; 0x1befa <task.part.0+0x168>
    else
        printf("Error:[%s]\n",line);
   1bee2:	ed b7       	in	r30, 0x3d	; 61
   1bee4:	fe b7       	in	r31, 0x3e	; 62
   1bee6:	d5 82       	std	Z+5, r13	; 0x05
   1bee8:	c4 82       	std	Z+4, r12	; 0x04
   1beea:	82 ec       	ldi	r24, 0xC2	; 194
   1beec:	94 e4       	ldi	r25, 0x44	; 68
   1beee:	a0 e0       	ldi	r26, 0x00	; 0
   1bef0:	81 83       	std	Z+1, r24	; 0x01
   1bef2:	92 83       	std	Z+2, r25	; 0x02
   1bef4:	a3 83       	std	Z+3, r26	; 0x03
   1bef6:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
}
   1befa:	c7 59       	subi	r28, 0x97	; 151
   1befc:	de 4f       	sbci	r29, 0xFE	; 254
   1befe:	e8 e0       	ldi	r30, 0x08	; 8
   1bf00:	74 c3       	rjmp	.+1768   	; 0x1c5ea <__epilogue_restores__+0x14>

0001bf02 <setup_lcd>:
#endif	// LCD_SUPPORT


///@ initialize Optional I2C LCD
void setup_lcd()
{
   1bf02:	cf 93       	push	r28
   1bf04:	ad b7       	in	r26, 0x3d	; 61
   1bf06:	be b7       	in	r27, 0x3e	; 62
   1bf08:	17 97       	sbiw	r26, 0x07	; 7
   1bf0a:	0f b6       	in	r0, 0x3f	; 63
   1bf0c:	f8 94       	cli
   1bf0e:	be bf       	out	0x3e, r27	; 62
   1bf10:	0f be       	out	0x3f, r0	; 63
   1bf12:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1bf14:	cf b7       	in	r28, 0x3f	; 63
	extern i2c_op_t *i2c_op[];

    printf("I2C LCD initialization start\n");
   1bf16:	81 e1       	ldi	r24, 0x11	; 17
   1bf18:	95 e4       	ldi	r25, 0x45	; 69
   1bf1a:	a0 e0       	ldi	r26, 0x00	; 0
   1bf1c:	ed b7       	in	r30, 0x3d	; 61
   1bf1e:	fe b7       	in	r31, 0x3e	; 62
   1bf20:	81 83       	std	Z+1, r24	; 0x01
   1bf22:	92 83       	std	Z+2, r25	; 0x02
   1bf24:	a3 83       	std	Z+3, r26	; 0x03
   1bf26:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1bf2a:	61 e0       	ldi	r22, 0x01	; 1
   1bf2c:	70 e0       	ldi	r23, 0x00	; 0
   1bf2e:	84 ec       	ldi	r24, 0xC4	; 196
   1bf30:	9d ed       	ldi	r25, 0xDD	; 221
   1bf32:	0e 94 e6 34 	call	0x69cc	; 0x69cc <set_timers>
   1bf36:	01 96       	adiw	r24, 0x01	; 1
   1bf38:	51 f4       	brne	.+20     	; 0x1bf4e <setup_lcd+0x4c>
        printf("lcd_task init failed\n");
   1bf3a:	8b ef       	ldi	r24, 0xFB	; 251
   1bf3c:	94 e4       	ldi	r25, 0x44	; 68
   1bf3e:	a0 e0       	ldi	r26, 0x00	; 0
   1bf40:	ed b7       	in	r30, 0x3d	; 61
   1bf42:	fe b7       	in	r31, 0x3e	; 62
   1bf44:	81 83       	std	Z+1, r24	; 0x01
   1bf46:	92 83       	std	Z+2, r25	; 0x02
   1bf48:	a3 83       	std	Z+3, r26	; 0x03
   1bf4a:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

	cli();
   1bf4e:	f8 94       	cli
	i2c_init(100000);
   1bf50:	60 ea       	ldi	r22, 0xA0	; 160
   1bf52:	76 e8       	ldi	r23, 0x86	; 134
   1bf54:	81 e0       	ldi	r24, 0x01	; 1
   1bf56:	90 e0       	ldi	r25, 0x00	; 0
   1bf58:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <i2c_init>

    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1bf5c:	86 e3       	ldi	r24, 0x36	; 54
   1bf5e:	97 e1       	ldi	r25, 0x17	; 23
   1bf60:	ed b7       	in	r30, 0x3d	; 61
   1bf62:	fe b7       	in	r31, 0x3e	; 62
   1bf64:	97 83       	std	Z+7, r25	; 0x07
   1bf66:	86 83       	std	Z+6, r24	; 0x06
   1bf68:	85 ef       	ldi	r24, 0xF5	; 245
   1bf6a:	94 e4       	ldi	r25, 0x44	; 68
   1bf6c:	a0 e0       	ldi	r26, 0x00	; 0
   1bf6e:	83 83       	std	Z+3, r24	; 0x03
   1bf70:	94 83       	std	Z+4, r25	; 0x04
   1bf72:	a5 83       	std	Z+5, r26	; 0x05
   1bf74:	87 e0       	ldi	r24, 0x07	; 7
   1bf76:	93 e0       	ldi	r25, 0x03	; 3
   1bf78:	92 83       	std	Z+2, r25	; 0x02
   1bf7a:	81 83       	std	Z+1, r24	; 0x01
   1bf7c:	0e 94 67 46 	call	0x8cce	; 0x8cce <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1bf80:	82 e4       	ldi	r24, 0x42	; 66
   1bf82:	97 e1       	ldi	r25, 0x17	; 23
   1bf84:	ed b7       	in	r30, 0x3d	; 61
   1bf86:	fe b7       	in	r31, 0x3e	; 62
   1bf88:	97 83       	std	Z+7, r25	; 0x07
   1bf8a:	86 83       	std	Z+6, r24	; 0x06
   1bf8c:	8f ee       	ldi	r24, 0xEF	; 239
   1bf8e:	94 e4       	ldi	r25, 0x44	; 68
   1bf90:	a0 e0       	ldi	r26, 0x00	; 0
   1bf92:	83 83       	std	Z+3, r24	; 0x03
   1bf94:	94 83       	std	Z+4, r25	; 0x04
   1bf96:	a5 83       	std	Z+5, r26	; 0x05
   1bf98:	80 ef       	ldi	r24, 0xF0	; 240
   1bf9a:	92 e0       	ldi	r25, 0x02	; 2
   1bf9c:	92 83       	std	Z+2, r25	; 0x02
   1bf9e:	81 83       	std	Z+1, r24	; 0x01
   1bfa0:	0e 94 67 46 	call	0x8cce	; 0x8cce <sprintf_P>

	i2c_op[ind++] = i2c_op_add(0x72, TW_WRITE, _cmd1, 2);
   1bfa4:	22 e0       	ldi	r18, 0x02	; 2
   1bfa6:	4c e1       	ldi	r20, 0x1C	; 28
   1bfa8:	53 e0       	ldi	r21, 0x03	; 3
   1bfaa:	60 e0       	ldi	r22, 0x00	; 0
   1bfac:	82 e7       	ldi	r24, 0x72	; 114
   1bfae:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <i2c_op_add>
   1bfb2:	90 93 58 17 	sts	0x1758, r25	; 0x801758 <i2c_op+0x1>
   1bfb6:	80 93 57 17 	sts	0x1757, r24	; 0x801757 <i2c_op>
	i2c_op[ind++] = i2c_op_add(0x72, TW_WRITE, _line1, 16);
   1bfba:	20 e1       	ldi	r18, 0x10	; 16
   1bfbc:	47 e0       	ldi	r20, 0x07	; 7
   1bfbe:	53 e0       	ldi	r21, 0x03	; 3
   1bfc0:	60 e0       	ldi	r22, 0x00	; 0
   1bfc2:	82 e7       	ldi	r24, 0x72	; 114
   1bfc4:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <i2c_op_add>
   1bfc8:	90 93 5a 17 	sts	0x175A, r25	; 0x80175a <i2c_op+0x3>
   1bfcc:	80 93 59 17 	sts	0x1759, r24	; 0x801759 <i2c_op+0x2>
	i2c_op[ind++] = i2c_op_add(0x72, TW_WRITE, _cmd2, 2);
   1bfd0:	22 e0       	ldi	r18, 0x02	; 2
   1bfd2:	45 e0       	ldi	r20, 0x05	; 5
   1bfd4:	53 e0       	ldi	r21, 0x03	; 3
   1bfd6:	60 e0       	ldi	r22, 0x00	; 0
   1bfd8:	82 e7       	ldi	r24, 0x72	; 114
   1bfda:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <i2c_op_add>
   1bfde:	90 93 5c 17 	sts	0x175C, r25	; 0x80175c <i2c_op+0x5>
   1bfe2:	80 93 5b 17 	sts	0x175B, r24	; 0x80175b <i2c_op+0x4>
	i2c_op[ind++] = i2c_op_add(0x72, TW_WRITE, _line2, 16);
   1bfe6:	20 e1       	ldi	r18, 0x10	; 16
   1bfe8:	40 ef       	ldi	r20, 0xF0	; 240
   1bfea:	52 e0       	ldi	r21, 0x02	; 2
   1bfec:	60 e0       	ldi	r22, 0x00	; 0
   1bfee:	82 e7       	ldi	r24, 0x72	; 114
   1bff0:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <i2c_op_add>
   1bff4:	90 93 5e 17 	sts	0x175E, r25	; 0x80175e <i2c_op+0x7>
   1bff8:	80 93 5d 17 	sts	0x175D, r24	; 0x80175d <i2c_op+0x6>

	SREG = sreg;
   1bffc:	cf bf       	out	0x3f, r28	; 63

    i2c_post();
   1bffe:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <i2c_post>
    delayms(1000);
   1c002:	68 ee       	ldi	r22, 0xE8	; 232
   1c004:	73 e0       	ldi	r23, 0x03	; 3
   1c006:	80 e0       	ldi	r24, 0x00	; 0
   1c008:	90 e0       	ldi	r25, 0x00	; 0
   1c00a:	0e 94 3b 29 	call	0x5276	; 0x5276 <delayms>
    if(!i2c_done() || !i2c_ok())
   1c00e:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <i2c_done>
   1c012:	89 2b       	or	r24, r25
   1c014:	59 f4       	brne	.+22     	; 0x1c02c <setup_lcd+0x12a>
        printf("I2C LCD is NOT attached!\n");
   1c016:	85 ed       	ldi	r24, 0xD5	; 213
   1c018:	94 e4       	ldi	r25, 0x44	; 68
   1c01a:	a0 e0       	ldi	r26, 0x00	; 0
   1c01c:	ed b7       	in	r30, 0x3d	; 61
   1c01e:	fe b7       	in	r31, 0x3e	; 62
   1c020:	81 83       	std	Z+1, r24	; 0x01
   1c022:	92 83       	std	Z+2, r25	; 0x02
   1c024:	a3 83       	std	Z+3, r26	; 0x03
   1c026:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1c02a:	04 c0       	rjmp	.+8      	; 0x1c034 <setup_lcd+0x132>

	SREG = sreg;

    i2c_post();
    delayms(1000);
    if(!i2c_done() || !i2c_ok())
   1c02c:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <i2c_ok>
   1c030:	89 2b       	or	r24, r25
   1c032:	89 f3       	breq	.-30     	; 0x1c016 <setup_lcd+0x114>
        printf("I2C LCD is NOT attached!\n");
    sep();
   1c034:	0e 94 47 32 	call	0x648e	; 0x648e <sep>
}
   1c038:	ad b7       	in	r26, 0x3d	; 61
   1c03a:	be b7       	in	r27, 0x3e	; 62
   1c03c:	17 96       	adiw	r26, 0x07	; 7
   1c03e:	0f b6       	in	r0, 0x3f	; 63
   1c040:	f8 94       	cli
   1c042:	be bf       	out	0x3e, r27	; 62
   1c044:	0f be       	out	0x3f, r0	; 63
   1c046:	ad bf       	out	0x3d, r26	; 61
   1c048:	cf 91       	pop	r28
   1c04a:	08 95       	ret

0001c04c <gpib_user_task>:

/// ======================================
#ifdef LCD_SUPPORT
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1c04c:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1c04e:	f8 94       	cli
	if(_display_cnt > 100) // 10HZ
   1c050:	20 91 e8 19 	lds	r18, 0x19E8	; 0x8019e8 <_display_cnt>
   1c054:	30 91 e9 19 	lds	r19, 0x19E9	; 0x8019e9 <_display_cnt+0x1>
   1c058:	25 36       	cpi	r18, 0x65	; 101
   1c05a:	31 05       	cpc	r19, r1
   1c05c:	3c f0       	brlt	.+14     	; 0x1c06c <gpib_user_task+0x20>
	{
		_display_cnt = 0;
   1c05e:	10 92 e9 19 	sts	0x19E9, r1	; 0x8019e9 <_display_cnt+0x1>
   1c062:	10 92 e8 19 	sts	0x19E8, r1	; 0x8019e8 <_display_cnt>
		SREG = sreg;
		i2c_lcd_test();
   1c066:	8f bf       	out	0x3f, r24	; 63
		return;
   1c068:	59 ce       	rjmp	.-846    	; 0x1bd1c <i2c_lcd_test>
	}
	SREG = sreg;
   1c06a:	08 95       	ret
   1c06c:	8f bf       	out	0x3f, r24	; 63
   1c06e:	08 95       	ret

0001c070 <task>:
    int result = 0;
    char *argv[50];
    char line[256];


    if(gpib)
   1c070:	81 11       	cpse	r24, r1
        gpib_task();
   1c072:	0e 94 e0 91 	call	0x123c0	; 0x123c0 <gpib_task>

    if(!kbhit(0))
   1c076:	80 e0       	ldi	r24, 0x00	; 0
   1c078:	0e 94 c2 2a 	call	0x5584	; 0x5584 <uart_rx_count>
   1c07c:	89 2b       	or	r24, r25
   1c07e:	09 f0       	breq	.+2      	; 0x1c082 <task+0x12>
   1c080:	88 ce       	rjmp	.-752    	; 0x1bd92 <task.part.0>
   1c082:	08 95       	ret

0001c084 <main>:


/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1c084:	a3 e3       	ldi	r26, 0x33	; 51
   1c086:	b0 e0       	ldi	r27, 0x00	; 0
   1c088:	e7 e4       	ldi	r30, 0x47	; 71
   1c08a:	f0 ee       	ldi	r31, 0xE0	; 224
   1c08c:	92 c2       	rjmp	.+1316   	; 0x1c5b2 <__prologue_saves__+0x14>
    ts_t ts;
    uint32_t actual,baud;
	char tmp[32];

	clear_error();		// Clear error state
   1c08e:	0e 94 e0 27 	call	0x4fc0	; 0x4fc0 <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1c092:	46 98       	cbi	0x08, 6	; 8
   1c094:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c096:	0e 94 41 86 	call	0x10c82	; 0x10c82 <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1c09a:	40 e0       	ldi	r20, 0x00	; 0
   1c09c:	52 ec       	ldi	r21, 0xC2	; 194
   1c09e:	61 e0       	ldi	r22, 0x01	; 1
   1c0a0:	70 e0       	ldi	r23, 0x00	; 0
   1c0a2:	80 e0       	ldi	r24, 0x00	; 0
   1c0a4:	0e 94 2e 2a 	call	0x545c	; 0x545c <uart_init>
   1c0a8:	6b 01       	movw	r12, r22
   1c0aa:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1c0ac:	68 ec       	ldi	r22, 0xC8	; 200
   1c0ae:	70 e0       	ldi	r23, 0x00	; 0
   1c0b0:	80 e0       	ldi	r24, 0x00	; 0
   1c0b2:	90 e0       	ldi	r25, 0x00	; 0
   1c0b4:	0e 94 3b 29 	call	0x5276	; 0x5276 <delayms>

    sep();
   1c0b8:	0e 94 47 32 	call	0x648e	; 0x648e <sep>
    printf("Start\n");
   1c0bc:	8b eb       	ldi	r24, 0xBB	; 187
   1c0be:	94 e4       	ldi	r25, 0x44	; 68
   1c0c0:	a0 e0       	ldi	r26, 0x00	; 0
   1c0c2:	ed b7       	in	r30, 0x3d	; 61
   1c0c4:	fe b7       	in	r31, 0x3e	; 62
   1c0c6:	81 83       	std	Z+1, r24	; 0x01
   1c0c8:	92 83       	std	Z+2, r25	; 0x02
   1c0ca:	a3 83       	std	Z+3, r26	; 0x03
   1c0cc:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1c0d0:	80 e0       	ldi	r24, 0x00	; 0
   1c0d2:	9d e2       	ldi	r25, 0x2D	; 45
   1c0d4:	a1 e3       	ldi	r26, 0x31	; 49
   1c0d6:	b1 e0       	ldi	r27, 0x01	; 1
   1c0d8:	ed b7       	in	r30, 0x3d	; 61
   1c0da:	fe b7       	in	r31, 0x3e	; 62
   1c0dc:	84 83       	std	Z+4, r24	; 0x04
   1c0de:	95 83       	std	Z+5, r25	; 0x05
   1c0e0:	a6 83       	std	Z+6, r26	; 0x06
   1c0e2:	b7 83       	std	Z+7, r27	; 0x07
   1c0e4:	8a ea       	ldi	r24, 0xAA	; 170
   1c0e6:	94 e4       	ldi	r25, 0x44	; 68
   1c0e8:	a0 e0       	ldi	r26, 0x00	; 0
   1c0ea:	81 83       	std	Z+1, r24	; 0x01
   1c0ec:	92 83       	std	Z+2, r25	; 0x02
   1c0ee:	a3 83       	std	Z+3, r26	; 0x03
   1c0f0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1c0f4:	ed b7       	in	r30, 0x3d	; 61
   1c0f6:	fe b7       	in	r31, 0x3e	; 62
   1c0f8:	c0 86       	std	Z+8, r12	; 0x08
   1c0fa:	d1 86       	std	Z+9, r13	; 0x09
   1c0fc:	e2 86       	std	Z+10, r14	; 0x0a
   1c0fe:	f3 86       	std	Z+11, r15	; 0x0b
   1c100:	80 e0       	ldi	r24, 0x00	; 0
   1c102:	92 ec       	ldi	r25, 0xC2	; 194
   1c104:	a1 e0       	ldi	r26, 0x01	; 1
   1c106:	b0 e0       	ldi	r27, 0x00	; 0
   1c108:	84 83       	std	Z+4, r24	; 0x04
   1c10a:	95 83       	std	Z+5, r25	; 0x05
   1c10c:	a6 83       	std	Z+6, r26	; 0x06
   1c10e:	b7 83       	std	Z+7, r27	; 0x07
   1c110:	83 e8       	ldi	r24, 0x83	; 131
   1c112:	94 e4       	ldi	r25, 0x44	; 68
   1c114:	a0 e0       	ldi	r26, 0x00	; 0
   1c116:	81 83       	std	Z+1, r24	; 0x01
   1c118:	92 83       	std	Z+2, r25	; 0x02
   1c11a:	a3 83       	std	Z+3, r26	; 0x03
   1c11c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

    init_timers();
   1c120:	0e 94 2d 36 	call	0x6c5a	; 0x6c5a <init_timers>

    sep();
   1c124:	0e 94 47 32 	call	0x648e	; 0x648e <sep>
    printf("HP85 Disk and Device Emulator\n");
   1c128:	84 e6       	ldi	r24, 0x64	; 100
   1c12a:	94 e4       	ldi	r25, 0x44	; 68
   1c12c:	a0 e0       	ldi	r26, 0x00	; 0
   1c12e:	ed b7       	in	r30, 0x3d	; 61
   1c130:	fe b7       	in	r31, 0x3e	; 62
   1c132:	81 83       	std	Z+1, r24	; 0x01
   1c134:	92 83       	std	Z+2, r25	; 0x02
   1c136:	a3 83       	std	Z+3, r26	; 0x03
   1c138:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1c13c:	87 e4       	ldi	r24, 0x47	; 71
   1c13e:	94 e4       	ldi	r25, 0x44	; 68
   1c140:	a0 e0       	ldi	r26, 0x00	; 0
   1c142:	ed b7       	in	r30, 0x3d	; 61
   1c144:	fe b7       	in	r31, 0x3e	; 62
   1c146:	81 83       	std	Z+1, r24	; 0x01
   1c148:	92 83       	std	Z+2, r25	; 0x02
   1c14a:	a3 83       	std	Z+3, r26	; 0x03
   1c14c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf(" GNU version 3\n");
   1c150:	87 e3       	ldi	r24, 0x37	; 55
   1c152:	94 e4       	ldi	r25, 0x44	; 68
   1c154:	a0 e0       	ldi	r26, 0x00	; 0
   1c156:	ed b7       	in	r30, 0x3d	; 61
   1c158:	fe b7       	in	r31, 0x3e	; 62
   1c15a:	81 83       	std	Z+1, r24	; 0x01
   1c15c:	92 83       	std	Z+2, r25	; 0x02
   1c15e:	a3 83       	std	Z+3, r26	; 0x03
   1c160:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c164:	80 e1       	ldi	r24, 0x10	; 16
   1c166:	94 e4       	ldi	r25, 0x44	; 68
   1c168:	a0 e0       	ldi	r26, 0x00	; 0
   1c16a:	ed b7       	in	r30, 0x3d	; 61
   1c16c:	fe b7       	in	r31, 0x3e	; 62
   1c16e:	81 83       	std	Z+1, r24	; 0x01
   1c170:	92 83       	std	Z+2, r25	; 0x02
   1c172:	a3 83       	std	Z+3, r26	; 0x03
   1c174:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c178:	8b ec       	ldi	r24, 0xCB	; 203
   1c17a:	96 e1       	ldi	r25, 0x16	; 22
   1c17c:	ed b7       	in	r30, 0x3d	; 61
   1c17e:	fe b7       	in	r31, 0x3e	; 62
   1c180:	95 83       	std	Z+5, r25	; 0x05
   1c182:	84 83       	std	Z+4, r24	; 0x04
   1c184:	86 ef       	ldi	r24, 0xF6	; 246
   1c186:	93 e4       	ldi	r25, 0x43	; 67
   1c188:	a0 e0       	ldi	r26, 0x00	; 0
   1c18a:	81 83       	std	Z+1, r24	; 0x01
   1c18c:	92 83       	std	Z+2, r25	; 0x02
   1c18e:	a3 83       	std	Z+3, r26	; 0x03
   1c190:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c194:	8f ee       	ldi	r24, 0xEF	; 239
   1c196:	96 e1       	ldi	r25, 0x16	; 22
   1c198:	ed b7       	in	r30, 0x3d	; 61
   1c19a:	fe b7       	in	r31, 0x3e	; 62
   1c19c:	95 83       	std	Z+5, r25	; 0x05
   1c19e:	84 83       	std	Z+4, r24	; 0x04
   1c1a0:	8c ed       	ldi	r24, 0xDC	; 220
   1c1a2:	93 e4       	ldi	r25, 0x43	; 67
   1c1a4:	a0 e0       	ldi	r26, 0x00	; 0
   1c1a6:	81 83       	std	Z+1, r24	; 0x01
   1c1a8:	92 83       	std	Z+2, r25	; 0x02
   1c1aa:	a3 83       	std	Z+3, r26	; 0x03
   1c1ac:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

    sep();
   1c1b0:	0e 94 47 32 	call	0x648e	; 0x648e <sep>
    PrintFree();
   1c1b4:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <PrintFree>

    sep();
   1c1b8:	0e 94 47 32 	call	0x648e	; 0x648e <sep>
    delayms(200);                                 ///@brief Power up delay
   1c1bc:	68 ec       	ldi	r22, 0xC8	; 200
   1c1be:	70 e0       	ldi	r23, 0x00	; 0
   1c1c0:	80 e0       	ldi	r24, 0x00	; 0
   1c1c2:	90 e0       	ldi	r25, 0x00	; 0
   1c1c4:	0e 94 3b 29 	call	0x5276	; 0x5276 <delayms>

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1c1c8:	86 ec       	ldi	r24, 0xC6	; 198
   1c1ca:	93 e4       	ldi	r25, 0x43	; 67
   1c1cc:	a0 e0       	ldi	r26, 0x00	; 0
   1c1ce:	ed b7       	in	r30, 0x3d	; 61
   1c1d0:	fe b7       	in	r31, 0x3e	; 62
   1c1d2:	81 83       	std	Z+1, r24	; 0x01
   1c1d4:	92 83       	std	Z+2, r25	; 0x02
   1c1d6:	a3 83       	std	Z+3, r26	; 0x03
   1c1d8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1c1dc:	4b e0       	ldi	r20, 0x0B	; 11
   1c1de:	50 e0       	ldi	r21, 0x00	; 0
   1c1e0:	60 e2       	ldi	r22, 0x20	; 32
   1c1e2:	71 ea       	ldi	r23, 0xA1	; 161
   1c1e4:	87 e0       	ldi	r24, 0x07	; 7
   1c1e6:	90 e0       	ldi	r25, 0x00	; 0
   1c1e8:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1c1ec:	80 eb       	ldi	r24, 0xB0	; 176
   1c1ee:	93 e4       	ldi	r25, 0x43	; 67
   1c1f0:	a0 e0       	ldi	r26, 0x00	; 0
   1c1f2:	ed b7       	in	r30, 0x3d	; 61
   1c1f4:	fe b7       	in	r31, 0x3e	; 62
   1c1f6:	81 83       	std	Z+1, r24	; 0x01
   1c1f8:	92 83       	std	Z+2, r25	; 0x02
   1c1fa:	a3 83       	std	Z+3, r26	; 0x03
   1c1fc:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 100000));
   1c200:	61 e1       	ldi	r22, 0x11	; 17
   1c202:	81 e0       	ldi	r24, 0x01	; 1
   1c204:	0e 94 5a 2c 	call	0x58b4	; 0x58b4 <TWI_Init>
    sep();
   1c208:	0e 94 47 32 	call	0x648e	; 0x648e <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1c20c:	8e e9       	ldi	r24, 0x9E	; 158
   1c20e:	93 e4       	ldi	r25, 0x43	; 67
   1c210:	a0 e0       	ldi	r26, 0x00	; 0
   1c212:	ed b7       	in	r30, 0x3d	; 61
   1c214:	fe b7       	in	r31, 0x3e	; 62
   1c216:	81 83       	std	Z+1, r24	; 0x01
   1c218:	92 83       	std	Z+2, r25	; 0x02
   1c21a:	a3 83       	std	Z+3, r26	; 0x03
   1c21c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    clock_clear();
   1c220:	0e 94 ea 35 	call	0x6bd4	; 0x6bd4 <clock_clear>
    printf("Clock cleared\n");
   1c224:	8f e8       	ldi	r24, 0x8F	; 143
   1c226:	93 e4       	ldi	r25, 0x43	; 67
   1c228:	a0 e0       	ldi	r26, 0x00	; 0
   1c22a:	ed b7       	in	r30, 0x3d	; 61
   1c22c:	fe b7       	in	r31, 0x3e	; 62
   1c22e:	81 83       	std	Z+1, r24	; 0x01
   1c230:	92 83       	std	Z+2, r25	; 0x02
   1c232:	a3 83       	std	Z+3, r26	; 0x03
   1c234:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1c238:	be 01       	movw	r22, r28
   1c23a:	64 5d       	subi	r22, 0xD4	; 212
   1c23c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c23e:	80 e0       	ldi	r24, 0x00	; 0
   1c240:	90 e0       	ldi	r25, 0x00	; 0
   1c242:	0e 94 8a 36 	call	0x6d14	; 0x6d14 <clock_getres>
    printf("SYSTEM_TASK_COUNTER_RES:%ld\n", (uint32_t) ts.tv_nsec);
   1c246:	88 a9       	ldd	r24, Y+48	; 0x30
   1c248:	99 a9       	ldd	r25, Y+49	; 0x31
   1c24a:	aa a9       	ldd	r26, Y+50	; 0x32
   1c24c:	bb a9       	ldd	r27, Y+51	; 0x33
   1c24e:	ed b7       	in	r30, 0x3d	; 61
   1c250:	fe b7       	in	r31, 0x3e	; 62
   1c252:	84 83       	std	Z+4, r24	; 0x04
   1c254:	95 83       	std	Z+5, r25	; 0x05
   1c256:	a6 83       	std	Z+6, r26	; 0x06
   1c258:	b7 83       	std	Z+7, r27	; 0x07
   1c25a:	82 e7       	ldi	r24, 0x72	; 114
   1c25c:	93 e4       	ldi	r25, 0x43	; 67
   1c25e:	a0 e0       	ldi	r26, 0x00	; 0
   1c260:	81 83       	std	Z+1, r24	; 0x01
   1c262:	92 83       	std	Z+2, r25	; 0x02
   1c264:	a3 83       	std	Z+3, r26	; 0x03
   1c266:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

// Timezone offset
    initialize_clock(0);
   1c26a:	80 e0       	ldi	r24, 0x00	; 0
   1c26c:	90 e0       	ldi	r25, 0x00	; 0
   1c26e:	0e 94 65 3d 	call	0x7aca	; 0x7aca <initialize_clock>
    display_clock();
   1c272:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <display_clock>
    sep();
   1c276:	0e 94 47 32 	call	0x648e	; 0x648e <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	setup_lcd();
   1c27a:	43 de       	rcall	.-890    	; 0x1bf02 <setup_lcd>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1c27c:	8a e5       	ldi	r24, 0x5A	; 90
   1c27e:	93 e4       	ldi	r25, 0x43	; 67
   1c280:	a0 e0       	ldi	r26, 0x00	; 0
   1c282:	ed b7       	in	r30, 0x3d	; 61
   1c284:	fe b7       	in	r31, 0x3e	; 62
   1c286:	81 83       	std	Z+1, r24	; 0x01
   1c288:	92 83       	std	Z+2, r25	; 0x02
   1c28a:	a3 83       	std	Z+3, r26	; 0x03
   1c28c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    if ( !mmc_init(1) )
   1c290:	81 e0       	ldi	r24, 0x01	; 1
   1c292:	90 e0       	ldi	r25, 0x00	; 0
   1c294:	0e 94 ca 6f 	call	0xdf94	; 0xdf94 <mmc_init>
   1c298:	89 2b       	or	r24, r25
   1c29a:	51 f4       	brne	.+20     	; 0x1c2b0 <main+0x22c>
		printf("MMC initialized\n");
   1c29c:	89 e4       	ldi	r24, 0x49	; 73
   1c29e:	93 e4       	ldi	r25, 0x43	; 67
   1c2a0:	a0 e0       	ldi	r26, 0x00	; 0
   1c2a2:	ed b7       	in	r30, 0x3d	; 61
   1c2a4:	fe b7       	in	r31, 0x3e	; 62
   1c2a6:	81 83       	std	Z+1, r24	; 0x01
   1c2a8:	92 83       	std	Z+2, r25	; 0x02
   1c2aa:	a3 83       	std	Z+3, r26	; 0x03
   1c2ac:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    sep();
   1c2b0:	0e 94 47 32 	call	0x648e	; 0x648e <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c2b4:	0e 94 41 86 	call	0x10c82	; 0x10c82 <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1c2b8:	83 e3       	ldi	r24, 0x33	; 51
   1c2ba:	93 e4       	ldi	r25, 0x43	; 67
   1c2bc:	a0 e0       	ldi	r26, 0x00	; 0
   1c2be:	ed b7       	in	r30, 0x3d	; 61
   1c2c0:	fe b7       	in	r31, 0x3e	; 62
   1c2c2:	81 83       	std	Z+1, r24	; 0x01
   1c2c4:	92 83       	std	Z+2, r25	; 0x02
   1c2c6:	a3 83       	std	Z+3, r26	; 0x03
   1c2c8:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

///@ initialize Printer Capture
    printer_init();
   1c2cc:	0e 94 03 bc 	call	0x17806	; 0x17806 <printer_init>
    printf("Printer initialized\n");
   1c2d0:	8e e1       	ldi	r24, 0x1E	; 30
   1c2d2:	93 e4       	ldi	r25, 0x43	; 67
   1c2d4:	a0 e0       	ldi	r26, 0x00	; 0
   1c2d6:	ed b7       	in	r30, 0x3d	; 61
   1c2d8:	fe b7       	in	r31, 0x3e	; 62
   1c2da:	81 83       	std	Z+1, r24	; 0x01
   1c2dc:	92 83       	std	Z+2, r25	; 0x02
   1c2de:	a3 83       	std	Z+3, r26	; 0x03
   1c2e0:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1c2e4:	8c e0       	ldi	r24, 0x0C	; 12
   1c2e6:	93 e4       	ldi	r25, 0x43	; 67
   1c2e8:	a0 e0       	ldi	r26, 0x00	; 0
   1c2ea:	ed b7       	in	r30, 0x3d	; 61
   1c2ec:	fe b7       	in	r31, 0x3e	; 62
   1c2ee:	81 83       	std	Z+1, r24	; 0x01
   1c2f0:	92 83       	std	Z+2, r25	; 0x02
   1c2f2:	a3 83       	std	Z+3, r26	; 0x03
   1c2f4:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    gpib_timer_init();
   1c2f8:	0e 94 32 84 	call	0x10864	; 0x10864 <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1c2fc:	84 ef       	ldi	r24, 0xF4	; 244
   1c2fe:	92 e4       	ldi	r25, 0x42	; 66
   1c300:	a0 e0       	ldi	r26, 0x00	; 0
   1c302:	ed b7       	in	r30, 0x3d	; 61
   1c304:	fe b7       	in	r31, 0x3e	; 62
   1c306:	81 83       	std	Z+1, r24	; 0x01
   1c308:	92 83       	std	Z+2, r25	; 0x02
   1c30a:	a3 83       	std	Z+3, r26	; 0x03
   1c30c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1c310:	0e 94 a0 8c 	call	0x11940	; 0x11940 <gpib_file_init>
    printf("GPIB File init done\n");
   1c314:	8f ed       	ldi	r24, 0xDF	; 223
   1c316:	92 e4       	ldi	r25, 0x42	; 66
   1c318:	a0 e0       	ldi	r26, 0x00	; 0
   1c31a:	ed b7       	in	r30, 0x3d	; 61
   1c31c:	fe b7       	in	r31, 0x3e	; 62
   1c31e:	81 83       	std	Z+1, r24	; 0x01
   1c320:	92 83       	std	Z+2, r25	; 0x02
   1c322:	a3 83       	std	Z+3, r26	; 0x03
   1c324:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1c328:	0e 94 6e 86 	call	0x10cdc	; 0x10cdc <gpib_state_init>
    printf("GPIB State init done\n");
   1c32c:	89 ec       	ldi	r24, 0xC9	; 201
   1c32e:	92 e4       	ldi	r25, 0x42	; 66
   1c330:	a0 e0       	ldi	r26, 0x00	; 0
   1c332:	ed b7       	in	r30, 0x3d	; 61
   1c334:	fe b7       	in	r31, 0x3e	; 62
   1c336:	81 83       	std	Z+1, r24	; 0x01
   1c338:	92 83       	std	Z+2, r25	; 0x02
   1c33a:	a3 83       	std	Z+3, r26	; 0x03
   1c33c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    sep();
   1c340:	0e 94 47 32 	call	0x648e	; 0x648e <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1c344:	80 e0       	ldi	r24, 0x00	; 0
   1c346:	90 e0       	ldi	r25, 0x00	; 0
   1c348:	0e 94 2e 94 	call	0x1285c	; 0x1285c <display_Addresses>
    sep();
   1c34c:	0e 94 47 32 	call	0x648e	; 0x648e <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1c350:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1c354:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1c358:	ed b7       	in	r30, 0x3d	; 61
   1c35a:	fe b7       	in	r31, 0x3e	; 62
   1c35c:	95 83       	std	Z+5, r25	; 0x05
   1c35e:	84 83       	std	Z+4, r24	; 0x04
   1c360:	83 eb       	ldi	r24, 0xB3	; 179
   1c362:	92 e4       	ldi	r25, 0x42	; 66
   1c364:	a0 e0       	ldi	r26, 0x00	; 0
   1c366:	81 83       	std	Z+1, r24	; 0x01
   1c368:	92 83       	std	Z+2, r25	; 0x02
   1c36a:	a3 83       	std	Z+3, r26	; 0x03
   1c36c:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
    sep();
   1c370:	0e 94 47 32 	call	0x648e	; 0x648e <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1c374:	0e 94 c6 9f 	call	0x13f8c	; 0x13f8c <format_drives>

#ifdef LCD_SUPPORT
	sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1c378:	83 e0       	ldi	r24, 0x03	; 3
   1c37a:	0e 94 a3 97 	call	0x12f46	; 0x12f46 <count_drive_types>
   1c37e:	8c 01       	movw	r16, r24
   1c380:	81 e0       	ldi	r24, 0x01	; 1
   1c382:	0e 94 a3 97 	call	0x12f46	; 0x12f46 <count_drive_types>
   1c386:	ed b7       	in	r30, 0x3d	; 61
   1c388:	fe b7       	in	r31, 0x3e	; 62
   1c38a:	91 87       	std	Z+9, r25	; 0x09
   1c38c:	80 87       	std	Z+8, r24	; 0x08
   1c38e:	17 83       	std	Z+7, r17	; 0x07
   1c390:	06 83       	std	Z+6, r16	; 0x06
   1c392:	82 ea       	ldi	r24, 0xA2	; 162
   1c394:	92 e4       	ldi	r25, 0x42	; 66
   1c396:	a0 e0       	ldi	r26, 0x00	; 0
   1c398:	83 83       	std	Z+3, r24	; 0x03
   1c39a:	94 83       	std	Z+4, r25	; 0x04
   1c39c:	a5 83       	std	Z+5, r26	; 0x05
   1c39e:	8e 01       	movw	r16, r28
   1c3a0:	04 5f       	subi	r16, 0xF4	; 244
   1c3a2:	1f 4f       	sbci	r17, 0xFF	; 255
   1c3a4:	12 83       	std	Z+2, r17	; 0x02
   1c3a6:	01 83       	std	Z+1, r16	; 0x01
   1c3a8:	0e 94 67 46 	call	0x8cce	; 0x8cce <sprintf_P>
		(int) count_drive_types(SS80_TYPE),
		(int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1c3ac:	ed b7       	in	r30, 0x3d	; 61
   1c3ae:	fe b7       	in	r31, 0x3e	; 62
   1c3b0:	17 83       	std	Z+7, r17	; 0x07
   1c3b2:	06 83       	std	Z+6, r16	; 0x06
   1c3b4:	8c e9       	ldi	r24, 0x9C	; 156
   1c3b6:	92 e4       	ldi	r25, 0x42	; 66
   1c3b8:	a0 e0       	ldi	r26, 0x00	; 0
   1c3ba:	83 83       	std	Z+3, r24	; 0x03
   1c3bc:	94 83       	std	Z+4, r25	; 0x04
   1c3be:	a5 83       	std	Z+5, r26	; 0x05
   1c3c0:	87 e0       	ldi	r24, 0x07	; 7
   1c3c2:	93 e0       	ldi	r25, 0x03	; 3
   1c3c4:	92 83       	std	Z+2, r25	; 0x02
   1c3c6:	81 83       	std	Z+1, r24	; 0x01
   1c3c8:	0e 94 67 46 	call	0x8cce	; 0x8cce <sprintf_P>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1c3cc:	82 e4       	ldi	r24, 0x42	; 66
   1c3ce:	97 e1       	ldi	r25, 0x17	; 23
   1c3d0:	ed b7       	in	r30, 0x3d	; 61
   1c3d2:	fe b7       	in	r31, 0x3e	; 62
   1c3d4:	97 83       	std	Z+7, r25	; 0x07
   1c3d6:	86 83       	std	Z+6, r24	; 0x06
   1c3d8:	86 e9       	ldi	r24, 0x96	; 150
   1c3da:	92 e4       	ldi	r25, 0x42	; 66
   1c3dc:	a0 e0       	ldi	r26, 0x00	; 0
   1c3de:	83 83       	std	Z+3, r24	; 0x03
   1c3e0:	94 83       	std	Z+4, r25	; 0x04
   1c3e2:	a5 83       	std	Z+5, r26	; 0x05
   1c3e4:	80 ef       	ldi	r24, 0xF0	; 240
   1c3e6:	92 e0       	ldi	r25, 0x02	; 2
   1c3e8:	92 83       	std	Z+2, r25	; 0x02
   1c3ea:	81 83       	std	Z+1, r24	; 0x01
   1c3ec:	0e 94 67 46 	call	0x8cce	; 0x8cce <sprintf_P>
	i2c_post();
   1c3f0:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <i2c_post>
	delayms(1000);
   1c3f4:	68 ee       	ldi	r22, 0xE8	; 232
   1c3f6:	73 e0       	ldi	r23, 0x03	; 3
   1c3f8:	80 e0       	ldi	r24, 0x00	; 0
   1c3fa:	90 e0       	ldi	r25, 0x00	; 0
   1c3fc:	0e 94 3b 29 	call	0x5276	; 0x5276 <delayms>
    if(!i2c_done() || !i2c_ok())
   1c400:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <i2c_done>
   1c404:	89 2b       	or	r24, r25
   1c406:	59 f4       	brne	.+22     	; 0x1c41e <main+0x39a>
		printf("I2C LCD is NOT attached!\n");
   1c408:	8c e7       	ldi	r24, 0x7C	; 124
   1c40a:	92 e4       	ldi	r25, 0x42	; 66
   1c40c:	a0 e0       	ldi	r26, 0x00	; 0
   1c40e:	ed b7       	in	r30, 0x3d	; 61
   1c410:	fe b7       	in	r31, 0x3e	; 62
   1c412:	81 83       	std	Z+1, r24	; 0x01
   1c414:	92 83       	std	Z+2, r25	; 0x02
   1c416:	a3 83       	std	Z+3, r26	; 0x03
   1c418:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
   1c41c:	04 c0       	rjmp	.+8      	; 0x1c426 <main+0x3a2>
		(int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
	i2c_post();
	delayms(1000);
    if(!i2c_done() || !i2c_ok())
   1c41e:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <i2c_ok>
   1c422:	89 2b       	or	r24, r25
   1c424:	89 f3       	breq	.-30     	; 0x1c408 <main+0x384>
		printf("I2C LCD is NOT attached!\n");
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1c426:	88 e6       	ldi	r24, 0x68	; 104
   1c428:	92 e4       	ldi	r25, 0x42	; 66
   1c42a:	a0 e0       	ldi	r26, 0x00	; 0
   1c42c:	ed b7       	in	r30, 0x3d	; 61
   1c42e:	fe b7       	in	r31, 0x3e	; 62
   1c430:	81 83       	std	Z+1, r24	; 0x01
   1c432:	92 83       	std	Z+2, r25	; 0x02
   1c434:	a3 83       	std	Z+3, r26	; 0x03
   1c436:	0e 94 7b 46 	call	0x8cf6	; 0x8cf6 <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        task(1);
   1c43a:	81 e0       	ldi	r24, 0x01	; 1
   1c43c:	19 de       	rcall	.-974    	; 0x1c070 <task>
   1c43e:	fd cf       	rjmp	.-6      	; 0x1c43a <main+0x3b6>

0001c440 <__mulsi3>:
   1c440:	db 01       	movw	r26, r22
   1c442:	8f 93       	push	r24
   1c444:	9f 93       	push	r25
   1c446:	8b d0       	rcall	.+278    	; 0x1c55e <__muluhisi3>
   1c448:	bf 91       	pop	r27
   1c44a:	af 91       	pop	r26
   1c44c:	a2 9f       	mul	r26, r18
   1c44e:	80 0d       	add	r24, r0
   1c450:	91 1d       	adc	r25, r1
   1c452:	a3 9f       	mul	r26, r19
   1c454:	90 0d       	add	r25, r0
   1c456:	b2 9f       	mul	r27, r18
   1c458:	90 0d       	add	r25, r0
   1c45a:	11 24       	eor	r1, r1
   1c45c:	08 95       	ret

0001c45e <__udivmodqi4>:
   1c45e:	99 1b       	sub	r25, r25
   1c460:	79 e0       	ldi	r23, 0x09	; 9
   1c462:	04 c0       	rjmp	.+8      	; 0x1c46c <__udivmodqi4_ep>

0001c464 <__udivmodqi4_loop>:
   1c464:	99 1f       	adc	r25, r25
   1c466:	96 17       	cp	r25, r22
   1c468:	08 f0       	brcs	.+2      	; 0x1c46c <__udivmodqi4_ep>
   1c46a:	96 1b       	sub	r25, r22

0001c46c <__udivmodqi4_ep>:
   1c46c:	88 1f       	adc	r24, r24
   1c46e:	7a 95       	dec	r23
   1c470:	c9 f7       	brne	.-14     	; 0x1c464 <__udivmodqi4_loop>
   1c472:	80 95       	com	r24
   1c474:	08 95       	ret

0001c476 <__udivmodhi4>:
   1c476:	aa 1b       	sub	r26, r26
   1c478:	bb 1b       	sub	r27, r27
   1c47a:	51 e1       	ldi	r21, 0x11	; 17
   1c47c:	07 c0       	rjmp	.+14     	; 0x1c48c <__udivmodhi4_ep>

0001c47e <__udivmodhi4_loop>:
   1c47e:	aa 1f       	adc	r26, r26
   1c480:	bb 1f       	adc	r27, r27
   1c482:	a6 17       	cp	r26, r22
   1c484:	b7 07       	cpc	r27, r23
   1c486:	10 f0       	brcs	.+4      	; 0x1c48c <__udivmodhi4_ep>
   1c488:	a6 1b       	sub	r26, r22
   1c48a:	b7 0b       	sbc	r27, r23

0001c48c <__udivmodhi4_ep>:
   1c48c:	88 1f       	adc	r24, r24
   1c48e:	99 1f       	adc	r25, r25
   1c490:	5a 95       	dec	r21
   1c492:	a9 f7       	brne	.-22     	; 0x1c47e <__udivmodhi4_loop>
   1c494:	80 95       	com	r24
   1c496:	90 95       	com	r25
   1c498:	bc 01       	movw	r22, r24
   1c49a:	cd 01       	movw	r24, r26
   1c49c:	08 95       	ret

0001c49e <__divmodhi4>:
   1c49e:	97 fb       	bst	r25, 7
   1c4a0:	07 2e       	mov	r0, r23
   1c4a2:	16 f4       	brtc	.+4      	; 0x1c4a8 <__divmodhi4+0xa>
   1c4a4:	00 94       	com	r0
   1c4a6:	06 d0       	rcall	.+12     	; 0x1c4b4 <__divmodhi4_neg1>
   1c4a8:	77 fd       	sbrc	r23, 7
   1c4aa:	08 d0       	rcall	.+16     	; 0x1c4bc <__divmodhi4_neg2>
   1c4ac:	e4 df       	rcall	.-56     	; 0x1c476 <__udivmodhi4>
   1c4ae:	07 fc       	sbrc	r0, 7
   1c4b0:	05 d0       	rcall	.+10     	; 0x1c4bc <__divmodhi4_neg2>
   1c4b2:	3e f4       	brtc	.+14     	; 0x1c4c2 <__divmodhi4_exit>

0001c4b4 <__divmodhi4_neg1>:
   1c4b4:	90 95       	com	r25
   1c4b6:	81 95       	neg	r24
   1c4b8:	9f 4f       	sbci	r25, 0xFF	; 255
   1c4ba:	08 95       	ret

0001c4bc <__divmodhi4_neg2>:
   1c4bc:	70 95       	com	r23
   1c4be:	61 95       	neg	r22
   1c4c0:	7f 4f       	sbci	r23, 0xFF	; 255

0001c4c2 <__divmodhi4_exit>:
   1c4c2:	08 95       	ret

0001c4c4 <__udivmodsi4>:
   1c4c4:	a1 e2       	ldi	r26, 0x21	; 33
   1c4c6:	1a 2e       	mov	r1, r26
   1c4c8:	aa 1b       	sub	r26, r26
   1c4ca:	bb 1b       	sub	r27, r27
   1c4cc:	fd 01       	movw	r30, r26
   1c4ce:	0d c0       	rjmp	.+26     	; 0x1c4ea <__udivmodsi4_ep>

0001c4d0 <__udivmodsi4_loop>:
   1c4d0:	aa 1f       	adc	r26, r26
   1c4d2:	bb 1f       	adc	r27, r27
   1c4d4:	ee 1f       	adc	r30, r30
   1c4d6:	ff 1f       	adc	r31, r31
   1c4d8:	a2 17       	cp	r26, r18
   1c4da:	b3 07       	cpc	r27, r19
   1c4dc:	e4 07       	cpc	r30, r20
   1c4de:	f5 07       	cpc	r31, r21
   1c4e0:	20 f0       	brcs	.+8      	; 0x1c4ea <__udivmodsi4_ep>
   1c4e2:	a2 1b       	sub	r26, r18
   1c4e4:	b3 0b       	sbc	r27, r19
   1c4e6:	e4 0b       	sbc	r30, r20
   1c4e8:	f5 0b       	sbc	r31, r21

0001c4ea <__udivmodsi4_ep>:
   1c4ea:	66 1f       	adc	r22, r22
   1c4ec:	77 1f       	adc	r23, r23
   1c4ee:	88 1f       	adc	r24, r24
   1c4f0:	99 1f       	adc	r25, r25
   1c4f2:	1a 94       	dec	r1
   1c4f4:	69 f7       	brne	.-38     	; 0x1c4d0 <__udivmodsi4_loop>
   1c4f6:	60 95       	com	r22
   1c4f8:	70 95       	com	r23
   1c4fa:	80 95       	com	r24
   1c4fc:	90 95       	com	r25
   1c4fe:	9b 01       	movw	r18, r22
   1c500:	ac 01       	movw	r20, r24
   1c502:	bd 01       	movw	r22, r26
   1c504:	cf 01       	movw	r24, r30
   1c506:	08 95       	ret

0001c508 <__divmodsi4>:
   1c508:	05 2e       	mov	r0, r21
   1c50a:	97 fb       	bst	r25, 7
   1c50c:	16 f4       	brtc	.+4      	; 0x1c512 <__divmodsi4+0xa>
   1c50e:	00 94       	com	r0
   1c510:	0f d0       	rcall	.+30     	; 0x1c530 <__negsi2>
   1c512:	57 fd       	sbrc	r21, 7
   1c514:	05 d0       	rcall	.+10     	; 0x1c520 <__divmodsi4_neg2>
   1c516:	d6 df       	rcall	.-84     	; 0x1c4c4 <__udivmodsi4>
   1c518:	07 fc       	sbrc	r0, 7
   1c51a:	02 d0       	rcall	.+4      	; 0x1c520 <__divmodsi4_neg2>
   1c51c:	46 f4       	brtc	.+16     	; 0x1c52e <__divmodsi4_exit>
   1c51e:	08 c0       	rjmp	.+16     	; 0x1c530 <__negsi2>

0001c520 <__divmodsi4_neg2>:
   1c520:	50 95       	com	r21
   1c522:	40 95       	com	r20
   1c524:	30 95       	com	r19
   1c526:	21 95       	neg	r18
   1c528:	3f 4f       	sbci	r19, 0xFF	; 255
   1c52a:	4f 4f       	sbci	r20, 0xFF	; 255
   1c52c:	5f 4f       	sbci	r21, 0xFF	; 255

0001c52e <__divmodsi4_exit>:
   1c52e:	08 95       	ret

0001c530 <__negsi2>:
   1c530:	90 95       	com	r25
   1c532:	80 95       	com	r24
   1c534:	70 95       	com	r23
   1c536:	61 95       	neg	r22
   1c538:	7f 4f       	sbci	r23, 0xFF	; 255
   1c53a:	8f 4f       	sbci	r24, 0xFF	; 255
   1c53c:	9f 4f       	sbci	r25, 0xFF	; 255
   1c53e:	08 95       	ret

0001c540 <__tablejump2__>:
   1c540:	ee 0f       	add	r30, r30
   1c542:	ff 1f       	adc	r31, r31
   1c544:	00 24       	eor	r0, r0
   1c546:	00 1c       	adc	r0, r0
   1c548:	0b be       	out	0x3b, r0	; 59
   1c54a:	07 90       	elpm	r0, Z+
   1c54c:	f6 91       	elpm	r31, Z
   1c54e:	e0 2d       	mov	r30, r0
   1c550:	09 94       	ijmp

0001c552 <__usmulhisi3>:
   1c552:	6f d0       	rcall	.+222    	; 0x1c632 <__umulhisi3>

0001c554 <__usmulhisi3_tail>:
   1c554:	b7 ff       	sbrs	r27, 7
   1c556:	08 95       	ret
   1c558:	82 1b       	sub	r24, r18
   1c55a:	93 0b       	sbc	r25, r19
   1c55c:	08 95       	ret

0001c55e <__muluhisi3>:
   1c55e:	69 d0       	rcall	.+210    	; 0x1c632 <__umulhisi3>
   1c560:	a5 9f       	mul	r26, r21
   1c562:	90 0d       	add	r25, r0
   1c564:	b4 9f       	mul	r27, r20
   1c566:	90 0d       	add	r25, r0
   1c568:	a4 9f       	mul	r26, r20
   1c56a:	80 0d       	add	r24, r0
   1c56c:	91 1d       	adc	r25, r1
   1c56e:	11 24       	eor	r1, r1
   1c570:	08 95       	ret

0001c572 <__mulshisi3>:
   1c572:	b7 ff       	sbrs	r27, 7
   1c574:	f4 cf       	rjmp	.-24     	; 0x1c55e <__muluhisi3>

0001c576 <__mulohisi3>:
   1c576:	f3 df       	rcall	.-26     	; 0x1c55e <__muluhisi3>
   1c578:	82 1b       	sub	r24, r18
   1c57a:	93 0b       	sbc	r25, r19
   1c57c:	08 95       	ret

0001c57e <__negdi2>:
   1c57e:	60 95       	com	r22
   1c580:	70 95       	com	r23
   1c582:	80 95       	com	r24
   1c584:	90 95       	com	r25
   1c586:	30 95       	com	r19
   1c588:	40 95       	com	r20
   1c58a:	50 95       	com	r21
   1c58c:	21 95       	neg	r18
   1c58e:	3f 4f       	sbci	r19, 0xFF	; 255
   1c590:	4f 4f       	sbci	r20, 0xFF	; 255
   1c592:	5f 4f       	sbci	r21, 0xFF	; 255
   1c594:	6f 4f       	sbci	r22, 0xFF	; 255
   1c596:	7f 4f       	sbci	r23, 0xFF	; 255
   1c598:	8f 4f       	sbci	r24, 0xFF	; 255
   1c59a:	9f 4f       	sbci	r25, 0xFF	; 255
   1c59c:	08 95       	ret

0001c59e <__prologue_saves__>:
   1c59e:	2f 92       	push	r2
   1c5a0:	3f 92       	push	r3
   1c5a2:	4f 92       	push	r4
   1c5a4:	5f 92       	push	r5
   1c5a6:	6f 92       	push	r6
   1c5a8:	7f 92       	push	r7
   1c5aa:	8f 92       	push	r8
   1c5ac:	9f 92       	push	r9
   1c5ae:	af 92       	push	r10
   1c5b0:	bf 92       	push	r11
   1c5b2:	cf 92       	push	r12
   1c5b4:	df 92       	push	r13
   1c5b6:	ef 92       	push	r14
   1c5b8:	ff 92       	push	r15
   1c5ba:	0f 93       	push	r16
   1c5bc:	1f 93       	push	r17
   1c5be:	cf 93       	push	r28
   1c5c0:	df 93       	push	r29
   1c5c2:	cd b7       	in	r28, 0x3d	; 61
   1c5c4:	de b7       	in	r29, 0x3e	; 62
   1c5c6:	ca 1b       	sub	r28, r26
   1c5c8:	db 0b       	sbc	r29, r27
   1c5ca:	0f b6       	in	r0, 0x3f	; 63
   1c5cc:	f8 94       	cli
   1c5ce:	de bf       	out	0x3e, r29	; 62
   1c5d0:	0f be       	out	0x3f, r0	; 63
   1c5d2:	cd bf       	out	0x3d, r28	; 61
   1c5d4:	09 94       	ijmp

0001c5d6 <__epilogue_restores__>:
   1c5d6:	2a 88       	ldd	r2, Y+18	; 0x12
   1c5d8:	39 88       	ldd	r3, Y+17	; 0x11
   1c5da:	48 88       	ldd	r4, Y+16	; 0x10
   1c5dc:	5f 84       	ldd	r5, Y+15	; 0x0f
   1c5de:	6e 84       	ldd	r6, Y+14	; 0x0e
   1c5e0:	7d 84       	ldd	r7, Y+13	; 0x0d
   1c5e2:	8c 84       	ldd	r8, Y+12	; 0x0c
   1c5e4:	9b 84       	ldd	r9, Y+11	; 0x0b
   1c5e6:	aa 84       	ldd	r10, Y+10	; 0x0a
   1c5e8:	b9 84       	ldd	r11, Y+9	; 0x09
   1c5ea:	c8 84       	ldd	r12, Y+8	; 0x08
   1c5ec:	df 80       	ldd	r13, Y+7	; 0x07
   1c5ee:	ee 80       	ldd	r14, Y+6	; 0x06
   1c5f0:	fd 80       	ldd	r15, Y+5	; 0x05
   1c5f2:	0c 81       	ldd	r16, Y+4	; 0x04
   1c5f4:	1b 81       	ldd	r17, Y+3	; 0x03
   1c5f6:	aa 81       	ldd	r26, Y+2	; 0x02
   1c5f8:	b9 81       	ldd	r27, Y+1	; 0x01
   1c5fa:	ce 0f       	add	r28, r30
   1c5fc:	d1 1d       	adc	r29, r1
   1c5fe:	0f b6       	in	r0, 0x3f	; 63
   1c600:	f8 94       	cli
   1c602:	de bf       	out	0x3e, r29	; 62
   1c604:	0f be       	out	0x3f, r0	; 63
   1c606:	cd bf       	out	0x3d, r28	; 61
   1c608:	ed 01       	movw	r28, r26
   1c60a:	08 95       	ret

0001c60c <__xload_1>:
   1c60c:	57 fd       	sbrc	r21, 7
   1c60e:	03 c0       	rjmp	.+6      	; 0x1c616 <__xload_1+0xa>
   1c610:	5b bf       	out	0x3b, r21	; 59
   1c612:	67 91       	elpm	r22, Z+
   1c614:	08 95       	ret
   1c616:	60 81       	ld	r22, Z
   1c618:	08 95       	ret

0001c61a <__cmpdi2_s8>:
   1c61a:	00 24       	eor	r0, r0
   1c61c:	a7 fd       	sbrc	r26, 7
   1c61e:	00 94       	com	r0
   1c620:	2a 17       	cp	r18, r26
   1c622:	30 05       	cpc	r19, r0
   1c624:	40 05       	cpc	r20, r0
   1c626:	50 05       	cpc	r21, r0
   1c628:	60 05       	cpc	r22, r0
   1c62a:	70 05       	cpc	r23, r0
   1c62c:	80 05       	cpc	r24, r0
   1c62e:	90 05       	cpc	r25, r0
   1c630:	08 95       	ret

0001c632 <__umulhisi3>:
   1c632:	a2 9f       	mul	r26, r18
   1c634:	b0 01       	movw	r22, r0
   1c636:	b3 9f       	mul	r27, r19
   1c638:	c0 01       	movw	r24, r0
   1c63a:	a3 9f       	mul	r26, r19
   1c63c:	70 0d       	add	r23, r0
   1c63e:	81 1d       	adc	r24, r1
   1c640:	11 24       	eor	r1, r1
   1c642:	91 1d       	adc	r25, r1
   1c644:	b2 9f       	mul	r27, r18
   1c646:	70 0d       	add	r23, r0
   1c648:	81 1d       	adc	r24, r1
   1c64a:	11 24       	eor	r1, r1
   1c64c:	91 1d       	adc	r25, r1
   1c64e:	08 95       	ret

0001c650 <__subsf3>:
   1c650:	50 58       	subi	r21, 0x80	; 128

0001c652 <__addsf3>:
   1c652:	bb 27       	eor	r27, r27
   1c654:	aa 27       	eor	r26, r26
   1c656:	0e d0       	rcall	.+28     	; 0x1c674 <__addsf3x>
   1c658:	75 c1       	rjmp	.+746    	; 0x1c944 <__fp_round>
   1c65a:	66 d1       	rcall	.+716    	; 0x1c928 <__fp_pscA>
   1c65c:	30 f0       	brcs	.+12     	; 0x1c66a <__addsf3+0x18>
   1c65e:	6b d1       	rcall	.+726    	; 0x1c936 <__fp_pscB>
   1c660:	20 f0       	brcs	.+8      	; 0x1c66a <__addsf3+0x18>
   1c662:	31 f4       	brne	.+12     	; 0x1c670 <__addsf3+0x1e>
   1c664:	9f 3f       	cpi	r25, 0xFF	; 255
   1c666:	11 f4       	brne	.+4      	; 0x1c66c <__addsf3+0x1a>
   1c668:	1e f4       	brtc	.+6      	; 0x1c670 <__addsf3+0x1e>
   1c66a:	5b c1       	rjmp	.+694    	; 0x1c922 <__fp_nan>
   1c66c:	0e f4       	brtc	.+2      	; 0x1c670 <__addsf3+0x1e>
   1c66e:	e0 95       	com	r30
   1c670:	e7 fb       	bst	r30, 7
   1c672:	51 c1       	rjmp	.+674    	; 0x1c916 <__fp_inf>

0001c674 <__addsf3x>:
   1c674:	e9 2f       	mov	r30, r25
   1c676:	77 d1       	rcall	.+750    	; 0x1c966 <__fp_split3>
   1c678:	80 f3       	brcs	.-32     	; 0x1c65a <__addsf3+0x8>
   1c67a:	ba 17       	cp	r27, r26
   1c67c:	62 07       	cpc	r22, r18
   1c67e:	73 07       	cpc	r23, r19
   1c680:	84 07       	cpc	r24, r20
   1c682:	95 07       	cpc	r25, r21
   1c684:	18 f0       	brcs	.+6      	; 0x1c68c <__addsf3x+0x18>
   1c686:	71 f4       	brne	.+28     	; 0x1c6a4 <__addsf3x+0x30>
   1c688:	9e f5       	brtc	.+102    	; 0x1c6f0 <__addsf3x+0x7c>
   1c68a:	8f c1       	rjmp	.+798    	; 0x1c9aa <__fp_zero>
   1c68c:	0e f4       	brtc	.+2      	; 0x1c690 <__addsf3x+0x1c>
   1c68e:	e0 95       	com	r30
   1c690:	0b 2e       	mov	r0, r27
   1c692:	ba 2f       	mov	r27, r26
   1c694:	a0 2d       	mov	r26, r0
   1c696:	0b 01       	movw	r0, r22
   1c698:	b9 01       	movw	r22, r18
   1c69a:	90 01       	movw	r18, r0
   1c69c:	0c 01       	movw	r0, r24
   1c69e:	ca 01       	movw	r24, r20
   1c6a0:	a0 01       	movw	r20, r0
   1c6a2:	11 24       	eor	r1, r1
   1c6a4:	ff 27       	eor	r31, r31
   1c6a6:	59 1b       	sub	r21, r25
   1c6a8:	99 f0       	breq	.+38     	; 0x1c6d0 <__addsf3x+0x5c>
   1c6aa:	59 3f       	cpi	r21, 0xF9	; 249
   1c6ac:	50 f4       	brcc	.+20     	; 0x1c6c2 <__addsf3x+0x4e>
   1c6ae:	50 3e       	cpi	r21, 0xE0	; 224
   1c6b0:	68 f1       	brcs	.+90     	; 0x1c70c <__addsf3x+0x98>
   1c6b2:	1a 16       	cp	r1, r26
   1c6b4:	f0 40       	sbci	r31, 0x00	; 0
   1c6b6:	a2 2f       	mov	r26, r18
   1c6b8:	23 2f       	mov	r18, r19
   1c6ba:	34 2f       	mov	r19, r20
   1c6bc:	44 27       	eor	r20, r20
   1c6be:	58 5f       	subi	r21, 0xF8	; 248
   1c6c0:	f3 cf       	rjmp	.-26     	; 0x1c6a8 <__addsf3x+0x34>
   1c6c2:	46 95       	lsr	r20
   1c6c4:	37 95       	ror	r19
   1c6c6:	27 95       	ror	r18
   1c6c8:	a7 95       	ror	r26
   1c6ca:	f0 40       	sbci	r31, 0x00	; 0
   1c6cc:	53 95       	inc	r21
   1c6ce:	c9 f7       	brne	.-14     	; 0x1c6c2 <__addsf3x+0x4e>
   1c6d0:	7e f4       	brtc	.+30     	; 0x1c6f0 <__addsf3x+0x7c>
   1c6d2:	1f 16       	cp	r1, r31
   1c6d4:	ba 0b       	sbc	r27, r26
   1c6d6:	62 0b       	sbc	r22, r18
   1c6d8:	73 0b       	sbc	r23, r19
   1c6da:	84 0b       	sbc	r24, r20
   1c6dc:	ba f0       	brmi	.+46     	; 0x1c70c <__addsf3x+0x98>
   1c6de:	91 50       	subi	r25, 0x01	; 1
   1c6e0:	a1 f0       	breq	.+40     	; 0x1c70a <__addsf3x+0x96>
   1c6e2:	ff 0f       	add	r31, r31
   1c6e4:	bb 1f       	adc	r27, r27
   1c6e6:	66 1f       	adc	r22, r22
   1c6e8:	77 1f       	adc	r23, r23
   1c6ea:	88 1f       	adc	r24, r24
   1c6ec:	c2 f7       	brpl	.-16     	; 0x1c6de <__addsf3x+0x6a>
   1c6ee:	0e c0       	rjmp	.+28     	; 0x1c70c <__addsf3x+0x98>
   1c6f0:	ba 0f       	add	r27, r26
   1c6f2:	62 1f       	adc	r22, r18
   1c6f4:	73 1f       	adc	r23, r19
   1c6f6:	84 1f       	adc	r24, r20
   1c6f8:	48 f4       	brcc	.+18     	; 0x1c70c <__addsf3x+0x98>
   1c6fa:	87 95       	ror	r24
   1c6fc:	77 95       	ror	r23
   1c6fe:	67 95       	ror	r22
   1c700:	b7 95       	ror	r27
   1c702:	f7 95       	ror	r31
   1c704:	9e 3f       	cpi	r25, 0xFE	; 254
   1c706:	08 f0       	brcs	.+2      	; 0x1c70a <__addsf3x+0x96>
   1c708:	b3 cf       	rjmp	.-154    	; 0x1c670 <__addsf3+0x1e>
   1c70a:	93 95       	inc	r25
   1c70c:	88 0f       	add	r24, r24
   1c70e:	08 f0       	brcs	.+2      	; 0x1c712 <__addsf3x+0x9e>
   1c710:	99 27       	eor	r25, r25
   1c712:	ee 0f       	add	r30, r30
   1c714:	97 95       	ror	r25
   1c716:	87 95       	ror	r24
   1c718:	08 95       	ret

0001c71a <__cmpsf2>:
   1c71a:	d9 d0       	rcall	.+434    	; 0x1c8ce <__fp_cmp>
   1c71c:	08 f4       	brcc	.+2      	; 0x1c720 <__cmpsf2+0x6>
   1c71e:	81 e0       	ldi	r24, 0x01	; 1
   1c720:	08 95       	ret

0001c722 <__divsf3>:
   1c722:	0c d0       	rcall	.+24     	; 0x1c73c <__divsf3x>
   1c724:	0f c1       	rjmp	.+542    	; 0x1c944 <__fp_round>
   1c726:	07 d1       	rcall	.+526    	; 0x1c936 <__fp_pscB>
   1c728:	40 f0       	brcs	.+16     	; 0x1c73a <__divsf3+0x18>
   1c72a:	fe d0       	rcall	.+508    	; 0x1c928 <__fp_pscA>
   1c72c:	30 f0       	brcs	.+12     	; 0x1c73a <__divsf3+0x18>
   1c72e:	21 f4       	brne	.+8      	; 0x1c738 <__divsf3+0x16>
   1c730:	5f 3f       	cpi	r21, 0xFF	; 255
   1c732:	19 f0       	breq	.+6      	; 0x1c73a <__divsf3+0x18>
   1c734:	f0 c0       	rjmp	.+480    	; 0x1c916 <__fp_inf>
   1c736:	51 11       	cpse	r21, r1
   1c738:	39 c1       	rjmp	.+626    	; 0x1c9ac <__fp_szero>
   1c73a:	f3 c0       	rjmp	.+486    	; 0x1c922 <__fp_nan>

0001c73c <__divsf3x>:
   1c73c:	14 d1       	rcall	.+552    	; 0x1c966 <__fp_split3>
   1c73e:	98 f3       	brcs	.-26     	; 0x1c726 <__divsf3+0x4>

0001c740 <__divsf3_pse>:
   1c740:	99 23       	and	r25, r25
   1c742:	c9 f3       	breq	.-14     	; 0x1c736 <__divsf3+0x14>
   1c744:	55 23       	and	r21, r21
   1c746:	b1 f3       	breq	.-20     	; 0x1c734 <__divsf3+0x12>
   1c748:	95 1b       	sub	r25, r21
   1c74a:	55 0b       	sbc	r21, r21
   1c74c:	bb 27       	eor	r27, r27
   1c74e:	aa 27       	eor	r26, r26
   1c750:	62 17       	cp	r22, r18
   1c752:	73 07       	cpc	r23, r19
   1c754:	84 07       	cpc	r24, r20
   1c756:	38 f0       	brcs	.+14     	; 0x1c766 <__divsf3_pse+0x26>
   1c758:	9f 5f       	subi	r25, 0xFF	; 255
   1c75a:	5f 4f       	sbci	r21, 0xFF	; 255
   1c75c:	22 0f       	add	r18, r18
   1c75e:	33 1f       	adc	r19, r19
   1c760:	44 1f       	adc	r20, r20
   1c762:	aa 1f       	adc	r26, r26
   1c764:	a9 f3       	breq	.-22     	; 0x1c750 <__divsf3_pse+0x10>
   1c766:	33 d0       	rcall	.+102    	; 0x1c7ce <__divsf3_pse+0x8e>
   1c768:	0e 2e       	mov	r0, r30
   1c76a:	3a f0       	brmi	.+14     	; 0x1c77a <__divsf3_pse+0x3a>
   1c76c:	e0 e8       	ldi	r30, 0x80	; 128
   1c76e:	30 d0       	rcall	.+96     	; 0x1c7d0 <__divsf3_pse+0x90>
   1c770:	91 50       	subi	r25, 0x01	; 1
   1c772:	50 40       	sbci	r21, 0x00	; 0
   1c774:	e6 95       	lsr	r30
   1c776:	00 1c       	adc	r0, r0
   1c778:	ca f7       	brpl	.-14     	; 0x1c76c <__divsf3_pse+0x2c>
   1c77a:	29 d0       	rcall	.+82     	; 0x1c7ce <__divsf3_pse+0x8e>
   1c77c:	fe 2f       	mov	r31, r30
   1c77e:	27 d0       	rcall	.+78     	; 0x1c7ce <__divsf3_pse+0x8e>
   1c780:	66 0f       	add	r22, r22
   1c782:	77 1f       	adc	r23, r23
   1c784:	88 1f       	adc	r24, r24
   1c786:	bb 1f       	adc	r27, r27
   1c788:	26 17       	cp	r18, r22
   1c78a:	37 07       	cpc	r19, r23
   1c78c:	48 07       	cpc	r20, r24
   1c78e:	ab 07       	cpc	r26, r27
   1c790:	b0 e8       	ldi	r27, 0x80	; 128
   1c792:	09 f0       	breq	.+2      	; 0x1c796 <__divsf3_pse+0x56>
   1c794:	bb 0b       	sbc	r27, r27
   1c796:	80 2d       	mov	r24, r0
   1c798:	bf 01       	movw	r22, r30
   1c79a:	ff 27       	eor	r31, r31
   1c79c:	93 58       	subi	r25, 0x83	; 131
   1c79e:	5f 4f       	sbci	r21, 0xFF	; 255
   1c7a0:	2a f0       	brmi	.+10     	; 0x1c7ac <__divsf3_pse+0x6c>
   1c7a2:	9e 3f       	cpi	r25, 0xFE	; 254
   1c7a4:	51 05       	cpc	r21, r1
   1c7a6:	68 f0       	brcs	.+26     	; 0x1c7c2 <__divsf3_pse+0x82>
   1c7a8:	b6 c0       	rjmp	.+364    	; 0x1c916 <__fp_inf>
   1c7aa:	00 c1       	rjmp	.+512    	; 0x1c9ac <__fp_szero>
   1c7ac:	5f 3f       	cpi	r21, 0xFF	; 255
   1c7ae:	ec f3       	brlt	.-6      	; 0x1c7aa <__divsf3_pse+0x6a>
   1c7b0:	98 3e       	cpi	r25, 0xE8	; 232
   1c7b2:	dc f3       	brlt	.-10     	; 0x1c7aa <__divsf3_pse+0x6a>
   1c7b4:	86 95       	lsr	r24
   1c7b6:	77 95       	ror	r23
   1c7b8:	67 95       	ror	r22
   1c7ba:	b7 95       	ror	r27
   1c7bc:	f7 95       	ror	r31
   1c7be:	9f 5f       	subi	r25, 0xFF	; 255
   1c7c0:	c9 f7       	brne	.-14     	; 0x1c7b4 <__divsf3_pse+0x74>
   1c7c2:	88 0f       	add	r24, r24
   1c7c4:	91 1d       	adc	r25, r1
   1c7c6:	96 95       	lsr	r25
   1c7c8:	87 95       	ror	r24
   1c7ca:	97 f9       	bld	r25, 7
   1c7cc:	08 95       	ret
   1c7ce:	e1 e0       	ldi	r30, 0x01	; 1
   1c7d0:	66 0f       	add	r22, r22
   1c7d2:	77 1f       	adc	r23, r23
   1c7d4:	88 1f       	adc	r24, r24
   1c7d6:	bb 1f       	adc	r27, r27
   1c7d8:	62 17       	cp	r22, r18
   1c7da:	73 07       	cpc	r23, r19
   1c7dc:	84 07       	cpc	r24, r20
   1c7de:	ba 07       	cpc	r27, r26
   1c7e0:	20 f0       	brcs	.+8      	; 0x1c7ea <__divsf3_pse+0xaa>
   1c7e2:	62 1b       	sub	r22, r18
   1c7e4:	73 0b       	sbc	r23, r19
   1c7e6:	84 0b       	sbc	r24, r20
   1c7e8:	ba 0b       	sbc	r27, r26
   1c7ea:	ee 1f       	adc	r30, r30
   1c7ec:	88 f7       	brcc	.-30     	; 0x1c7d0 <__divsf3_pse+0x90>
   1c7ee:	e0 95       	com	r30
   1c7f0:	08 95       	ret

0001c7f2 <__fixsfsi>:
   1c7f2:	04 d0       	rcall	.+8      	; 0x1c7fc <__fixunssfsi>
   1c7f4:	68 94       	set
   1c7f6:	b1 11       	cpse	r27, r1
   1c7f8:	d9 c0       	rjmp	.+434    	; 0x1c9ac <__fp_szero>
   1c7fa:	08 95       	ret

0001c7fc <__fixunssfsi>:
   1c7fc:	bc d0       	rcall	.+376    	; 0x1c976 <__fp_splitA>
   1c7fe:	88 f0       	brcs	.+34     	; 0x1c822 <__fixunssfsi+0x26>
   1c800:	9f 57       	subi	r25, 0x7F	; 127
   1c802:	90 f0       	brcs	.+36     	; 0x1c828 <__fixunssfsi+0x2c>
   1c804:	b9 2f       	mov	r27, r25
   1c806:	99 27       	eor	r25, r25
   1c808:	b7 51       	subi	r27, 0x17	; 23
   1c80a:	a0 f0       	brcs	.+40     	; 0x1c834 <__fixunssfsi+0x38>
   1c80c:	d1 f0       	breq	.+52     	; 0x1c842 <__fixunssfsi+0x46>
   1c80e:	66 0f       	add	r22, r22
   1c810:	77 1f       	adc	r23, r23
   1c812:	88 1f       	adc	r24, r24
   1c814:	99 1f       	adc	r25, r25
   1c816:	1a f0       	brmi	.+6      	; 0x1c81e <__fixunssfsi+0x22>
   1c818:	ba 95       	dec	r27
   1c81a:	c9 f7       	brne	.-14     	; 0x1c80e <__fixunssfsi+0x12>
   1c81c:	12 c0       	rjmp	.+36     	; 0x1c842 <__fixunssfsi+0x46>
   1c81e:	b1 30       	cpi	r27, 0x01	; 1
   1c820:	81 f0       	breq	.+32     	; 0x1c842 <__fixunssfsi+0x46>
   1c822:	c3 d0       	rcall	.+390    	; 0x1c9aa <__fp_zero>
   1c824:	b1 e0       	ldi	r27, 0x01	; 1
   1c826:	08 95       	ret
   1c828:	c0 c0       	rjmp	.+384    	; 0x1c9aa <__fp_zero>
   1c82a:	67 2f       	mov	r22, r23
   1c82c:	78 2f       	mov	r23, r24
   1c82e:	88 27       	eor	r24, r24
   1c830:	b8 5f       	subi	r27, 0xF8	; 248
   1c832:	39 f0       	breq	.+14     	; 0x1c842 <__fixunssfsi+0x46>
   1c834:	b9 3f       	cpi	r27, 0xF9	; 249
   1c836:	cc f3       	brlt	.-14     	; 0x1c82a <__fixunssfsi+0x2e>
   1c838:	86 95       	lsr	r24
   1c83a:	77 95       	ror	r23
   1c83c:	67 95       	ror	r22
   1c83e:	b3 95       	inc	r27
   1c840:	d9 f7       	brne	.-10     	; 0x1c838 <__fixunssfsi+0x3c>
   1c842:	3e f4       	brtc	.+14     	; 0x1c852 <__fixunssfsi+0x56>
   1c844:	90 95       	com	r25
   1c846:	80 95       	com	r24
   1c848:	70 95       	com	r23
   1c84a:	61 95       	neg	r22
   1c84c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c84e:	8f 4f       	sbci	r24, 0xFF	; 255
   1c850:	9f 4f       	sbci	r25, 0xFF	; 255
   1c852:	08 95       	ret

0001c854 <__floatunsisf>:
   1c854:	e8 94       	clt
   1c856:	09 c0       	rjmp	.+18     	; 0x1c86a <__floatsisf+0x12>

0001c858 <__floatsisf>:
   1c858:	97 fb       	bst	r25, 7
   1c85a:	3e f4       	brtc	.+14     	; 0x1c86a <__floatsisf+0x12>
   1c85c:	90 95       	com	r25
   1c85e:	80 95       	com	r24
   1c860:	70 95       	com	r23
   1c862:	61 95       	neg	r22
   1c864:	7f 4f       	sbci	r23, 0xFF	; 255
   1c866:	8f 4f       	sbci	r24, 0xFF	; 255
   1c868:	9f 4f       	sbci	r25, 0xFF	; 255
   1c86a:	99 23       	and	r25, r25
   1c86c:	a9 f0       	breq	.+42     	; 0x1c898 <__floatsisf+0x40>
   1c86e:	f9 2f       	mov	r31, r25
   1c870:	96 e9       	ldi	r25, 0x96	; 150
   1c872:	bb 27       	eor	r27, r27
   1c874:	93 95       	inc	r25
   1c876:	f6 95       	lsr	r31
   1c878:	87 95       	ror	r24
   1c87a:	77 95       	ror	r23
   1c87c:	67 95       	ror	r22
   1c87e:	b7 95       	ror	r27
   1c880:	f1 11       	cpse	r31, r1
   1c882:	f8 cf       	rjmp	.-16     	; 0x1c874 <__floatsisf+0x1c>
   1c884:	fa f4       	brpl	.+62     	; 0x1c8c4 <__floatsisf+0x6c>
   1c886:	bb 0f       	add	r27, r27
   1c888:	11 f4       	brne	.+4      	; 0x1c88e <__floatsisf+0x36>
   1c88a:	60 ff       	sbrs	r22, 0
   1c88c:	1b c0       	rjmp	.+54     	; 0x1c8c4 <__floatsisf+0x6c>
   1c88e:	6f 5f       	subi	r22, 0xFF	; 255
   1c890:	7f 4f       	sbci	r23, 0xFF	; 255
   1c892:	8f 4f       	sbci	r24, 0xFF	; 255
   1c894:	9f 4f       	sbci	r25, 0xFF	; 255
   1c896:	16 c0       	rjmp	.+44     	; 0x1c8c4 <__floatsisf+0x6c>
   1c898:	88 23       	and	r24, r24
   1c89a:	11 f0       	breq	.+4      	; 0x1c8a0 <__floatsisf+0x48>
   1c89c:	96 e9       	ldi	r25, 0x96	; 150
   1c89e:	11 c0       	rjmp	.+34     	; 0x1c8c2 <__floatsisf+0x6a>
   1c8a0:	77 23       	and	r23, r23
   1c8a2:	21 f0       	breq	.+8      	; 0x1c8ac <__floatsisf+0x54>
   1c8a4:	9e e8       	ldi	r25, 0x8E	; 142
   1c8a6:	87 2f       	mov	r24, r23
   1c8a8:	76 2f       	mov	r23, r22
   1c8aa:	05 c0       	rjmp	.+10     	; 0x1c8b6 <__floatsisf+0x5e>
   1c8ac:	66 23       	and	r22, r22
   1c8ae:	71 f0       	breq	.+28     	; 0x1c8cc <__floatsisf+0x74>
   1c8b0:	96 e8       	ldi	r25, 0x86	; 134
   1c8b2:	86 2f       	mov	r24, r22
   1c8b4:	70 e0       	ldi	r23, 0x00	; 0
   1c8b6:	60 e0       	ldi	r22, 0x00	; 0
   1c8b8:	2a f0       	brmi	.+10     	; 0x1c8c4 <__floatsisf+0x6c>
   1c8ba:	9a 95       	dec	r25
   1c8bc:	66 0f       	add	r22, r22
   1c8be:	77 1f       	adc	r23, r23
   1c8c0:	88 1f       	adc	r24, r24
   1c8c2:	da f7       	brpl	.-10     	; 0x1c8ba <__floatsisf+0x62>
   1c8c4:	88 0f       	add	r24, r24
   1c8c6:	96 95       	lsr	r25
   1c8c8:	87 95       	ror	r24
   1c8ca:	97 f9       	bld	r25, 7
   1c8cc:	08 95       	ret

0001c8ce <__fp_cmp>:
   1c8ce:	99 0f       	add	r25, r25
   1c8d0:	00 08       	sbc	r0, r0
   1c8d2:	55 0f       	add	r21, r21
   1c8d4:	aa 0b       	sbc	r26, r26
   1c8d6:	e0 e8       	ldi	r30, 0x80	; 128
   1c8d8:	fe ef       	ldi	r31, 0xFE	; 254
   1c8da:	16 16       	cp	r1, r22
   1c8dc:	17 06       	cpc	r1, r23
   1c8de:	e8 07       	cpc	r30, r24
   1c8e0:	f9 07       	cpc	r31, r25
   1c8e2:	c0 f0       	brcs	.+48     	; 0x1c914 <__fp_cmp+0x46>
   1c8e4:	12 16       	cp	r1, r18
   1c8e6:	13 06       	cpc	r1, r19
   1c8e8:	e4 07       	cpc	r30, r20
   1c8ea:	f5 07       	cpc	r31, r21
   1c8ec:	98 f0       	brcs	.+38     	; 0x1c914 <__fp_cmp+0x46>
   1c8ee:	62 1b       	sub	r22, r18
   1c8f0:	73 0b       	sbc	r23, r19
   1c8f2:	84 0b       	sbc	r24, r20
   1c8f4:	95 0b       	sbc	r25, r21
   1c8f6:	39 f4       	brne	.+14     	; 0x1c906 <__fp_cmp+0x38>
   1c8f8:	0a 26       	eor	r0, r26
   1c8fa:	61 f0       	breq	.+24     	; 0x1c914 <__fp_cmp+0x46>
   1c8fc:	23 2b       	or	r18, r19
   1c8fe:	24 2b       	or	r18, r20
   1c900:	25 2b       	or	r18, r21
   1c902:	21 f4       	brne	.+8      	; 0x1c90c <__fp_cmp+0x3e>
   1c904:	08 95       	ret
   1c906:	0a 26       	eor	r0, r26
   1c908:	09 f4       	brne	.+2      	; 0x1c90c <__fp_cmp+0x3e>
   1c90a:	a1 40       	sbci	r26, 0x01	; 1
   1c90c:	a6 95       	lsr	r26
   1c90e:	8f ef       	ldi	r24, 0xFF	; 255
   1c910:	81 1d       	adc	r24, r1
   1c912:	81 1d       	adc	r24, r1
   1c914:	08 95       	ret

0001c916 <__fp_inf>:
   1c916:	97 f9       	bld	r25, 7
   1c918:	9f 67       	ori	r25, 0x7F	; 127
   1c91a:	80 e8       	ldi	r24, 0x80	; 128
   1c91c:	70 e0       	ldi	r23, 0x00	; 0
   1c91e:	60 e0       	ldi	r22, 0x00	; 0
   1c920:	08 95       	ret

0001c922 <__fp_nan>:
   1c922:	9f ef       	ldi	r25, 0xFF	; 255
   1c924:	80 ec       	ldi	r24, 0xC0	; 192
   1c926:	08 95       	ret

0001c928 <__fp_pscA>:
   1c928:	00 24       	eor	r0, r0
   1c92a:	0a 94       	dec	r0
   1c92c:	16 16       	cp	r1, r22
   1c92e:	17 06       	cpc	r1, r23
   1c930:	18 06       	cpc	r1, r24
   1c932:	09 06       	cpc	r0, r25
   1c934:	08 95       	ret

0001c936 <__fp_pscB>:
   1c936:	00 24       	eor	r0, r0
   1c938:	0a 94       	dec	r0
   1c93a:	12 16       	cp	r1, r18
   1c93c:	13 06       	cpc	r1, r19
   1c93e:	14 06       	cpc	r1, r20
   1c940:	05 06       	cpc	r0, r21
   1c942:	08 95       	ret

0001c944 <__fp_round>:
   1c944:	09 2e       	mov	r0, r25
   1c946:	03 94       	inc	r0
   1c948:	00 0c       	add	r0, r0
   1c94a:	11 f4       	brne	.+4      	; 0x1c950 <__fp_round+0xc>
   1c94c:	88 23       	and	r24, r24
   1c94e:	52 f0       	brmi	.+20     	; 0x1c964 <__fp_round+0x20>
   1c950:	bb 0f       	add	r27, r27
   1c952:	40 f4       	brcc	.+16     	; 0x1c964 <__fp_round+0x20>
   1c954:	bf 2b       	or	r27, r31
   1c956:	11 f4       	brne	.+4      	; 0x1c95c <__fp_round+0x18>
   1c958:	60 ff       	sbrs	r22, 0
   1c95a:	04 c0       	rjmp	.+8      	; 0x1c964 <__fp_round+0x20>
   1c95c:	6f 5f       	subi	r22, 0xFF	; 255
   1c95e:	7f 4f       	sbci	r23, 0xFF	; 255
   1c960:	8f 4f       	sbci	r24, 0xFF	; 255
   1c962:	9f 4f       	sbci	r25, 0xFF	; 255
   1c964:	08 95       	ret

0001c966 <__fp_split3>:
   1c966:	57 fd       	sbrc	r21, 7
   1c968:	90 58       	subi	r25, 0x80	; 128
   1c96a:	44 0f       	add	r20, r20
   1c96c:	55 1f       	adc	r21, r21
   1c96e:	59 f0       	breq	.+22     	; 0x1c986 <__fp_splitA+0x10>
   1c970:	5f 3f       	cpi	r21, 0xFF	; 255
   1c972:	71 f0       	breq	.+28     	; 0x1c990 <__fp_splitA+0x1a>
   1c974:	47 95       	ror	r20

0001c976 <__fp_splitA>:
   1c976:	88 0f       	add	r24, r24
   1c978:	97 fb       	bst	r25, 7
   1c97a:	99 1f       	adc	r25, r25
   1c97c:	61 f0       	breq	.+24     	; 0x1c996 <__fp_splitA+0x20>
   1c97e:	9f 3f       	cpi	r25, 0xFF	; 255
   1c980:	79 f0       	breq	.+30     	; 0x1c9a0 <__fp_splitA+0x2a>
   1c982:	87 95       	ror	r24
   1c984:	08 95       	ret
   1c986:	12 16       	cp	r1, r18
   1c988:	13 06       	cpc	r1, r19
   1c98a:	14 06       	cpc	r1, r20
   1c98c:	55 1f       	adc	r21, r21
   1c98e:	f2 cf       	rjmp	.-28     	; 0x1c974 <__fp_split3+0xe>
   1c990:	46 95       	lsr	r20
   1c992:	f1 df       	rcall	.-30     	; 0x1c976 <__fp_splitA>
   1c994:	08 c0       	rjmp	.+16     	; 0x1c9a6 <__fp_splitA+0x30>
   1c996:	16 16       	cp	r1, r22
   1c998:	17 06       	cpc	r1, r23
   1c99a:	18 06       	cpc	r1, r24
   1c99c:	99 1f       	adc	r25, r25
   1c99e:	f1 cf       	rjmp	.-30     	; 0x1c982 <__fp_splitA+0xc>
   1c9a0:	86 95       	lsr	r24
   1c9a2:	71 05       	cpc	r23, r1
   1c9a4:	61 05       	cpc	r22, r1
   1c9a6:	08 94       	sec
   1c9a8:	08 95       	ret

0001c9aa <__fp_zero>:
   1c9aa:	e8 94       	clt

0001c9ac <__fp_szero>:
   1c9ac:	bb 27       	eor	r27, r27
   1c9ae:	66 27       	eor	r22, r22
   1c9b0:	77 27       	eor	r23, r23
   1c9b2:	cb 01       	movw	r24, r22
   1c9b4:	97 f9       	bld	r25, 7
   1c9b6:	08 95       	ret

0001c9b8 <__gesf2>:
   1c9b8:	8a df       	rcall	.-236    	; 0x1c8ce <__fp_cmp>
   1c9ba:	08 f4       	brcc	.+2      	; 0x1c9be <__gesf2+0x6>
   1c9bc:	8f ef       	ldi	r24, 0xFF	; 255
   1c9be:	08 95       	ret

0001c9c0 <__mulsf3>:
   1c9c0:	0b d0       	rcall	.+22     	; 0x1c9d8 <__mulsf3x>
   1c9c2:	c0 cf       	rjmp	.-128    	; 0x1c944 <__fp_round>
   1c9c4:	b1 df       	rcall	.-158    	; 0x1c928 <__fp_pscA>
   1c9c6:	28 f0       	brcs	.+10     	; 0x1c9d2 <__mulsf3+0x12>
   1c9c8:	b6 df       	rcall	.-148    	; 0x1c936 <__fp_pscB>
   1c9ca:	18 f0       	brcs	.+6      	; 0x1c9d2 <__mulsf3+0x12>
   1c9cc:	95 23       	and	r25, r21
   1c9ce:	09 f0       	breq	.+2      	; 0x1c9d2 <__mulsf3+0x12>
   1c9d0:	a2 cf       	rjmp	.-188    	; 0x1c916 <__fp_inf>
   1c9d2:	a7 cf       	rjmp	.-178    	; 0x1c922 <__fp_nan>
   1c9d4:	11 24       	eor	r1, r1
   1c9d6:	ea cf       	rjmp	.-44     	; 0x1c9ac <__fp_szero>

0001c9d8 <__mulsf3x>:
   1c9d8:	c6 df       	rcall	.-116    	; 0x1c966 <__fp_split3>
   1c9da:	a0 f3       	brcs	.-24     	; 0x1c9c4 <__mulsf3+0x4>

0001c9dc <__mulsf3_pse>:
   1c9dc:	95 9f       	mul	r25, r21
   1c9de:	d1 f3       	breq	.-12     	; 0x1c9d4 <__mulsf3+0x14>
   1c9e0:	95 0f       	add	r25, r21
   1c9e2:	50 e0       	ldi	r21, 0x00	; 0
   1c9e4:	55 1f       	adc	r21, r21
   1c9e6:	62 9f       	mul	r22, r18
   1c9e8:	f0 01       	movw	r30, r0
   1c9ea:	72 9f       	mul	r23, r18
   1c9ec:	bb 27       	eor	r27, r27
   1c9ee:	f0 0d       	add	r31, r0
   1c9f0:	b1 1d       	adc	r27, r1
   1c9f2:	63 9f       	mul	r22, r19
   1c9f4:	aa 27       	eor	r26, r26
   1c9f6:	f0 0d       	add	r31, r0
   1c9f8:	b1 1d       	adc	r27, r1
   1c9fa:	aa 1f       	adc	r26, r26
   1c9fc:	64 9f       	mul	r22, r20
   1c9fe:	66 27       	eor	r22, r22
   1ca00:	b0 0d       	add	r27, r0
   1ca02:	a1 1d       	adc	r26, r1
   1ca04:	66 1f       	adc	r22, r22
   1ca06:	82 9f       	mul	r24, r18
   1ca08:	22 27       	eor	r18, r18
   1ca0a:	b0 0d       	add	r27, r0
   1ca0c:	a1 1d       	adc	r26, r1
   1ca0e:	62 1f       	adc	r22, r18
   1ca10:	73 9f       	mul	r23, r19
   1ca12:	b0 0d       	add	r27, r0
   1ca14:	a1 1d       	adc	r26, r1
   1ca16:	62 1f       	adc	r22, r18
   1ca18:	83 9f       	mul	r24, r19
   1ca1a:	a0 0d       	add	r26, r0
   1ca1c:	61 1d       	adc	r22, r1
   1ca1e:	22 1f       	adc	r18, r18
   1ca20:	74 9f       	mul	r23, r20
   1ca22:	33 27       	eor	r19, r19
   1ca24:	a0 0d       	add	r26, r0
   1ca26:	61 1d       	adc	r22, r1
   1ca28:	23 1f       	adc	r18, r19
   1ca2a:	84 9f       	mul	r24, r20
   1ca2c:	60 0d       	add	r22, r0
   1ca2e:	21 1d       	adc	r18, r1
   1ca30:	82 2f       	mov	r24, r18
   1ca32:	76 2f       	mov	r23, r22
   1ca34:	6a 2f       	mov	r22, r26
   1ca36:	11 24       	eor	r1, r1
   1ca38:	9f 57       	subi	r25, 0x7F	; 127
   1ca3a:	50 40       	sbci	r21, 0x00	; 0
   1ca3c:	8a f0       	brmi	.+34     	; 0x1ca60 <__mulsf3_pse+0x84>
   1ca3e:	e1 f0       	breq	.+56     	; 0x1ca78 <__mulsf3_pse+0x9c>
   1ca40:	88 23       	and	r24, r24
   1ca42:	4a f0       	brmi	.+18     	; 0x1ca56 <__mulsf3_pse+0x7a>
   1ca44:	ee 0f       	add	r30, r30
   1ca46:	ff 1f       	adc	r31, r31
   1ca48:	bb 1f       	adc	r27, r27
   1ca4a:	66 1f       	adc	r22, r22
   1ca4c:	77 1f       	adc	r23, r23
   1ca4e:	88 1f       	adc	r24, r24
   1ca50:	91 50       	subi	r25, 0x01	; 1
   1ca52:	50 40       	sbci	r21, 0x00	; 0
   1ca54:	a9 f7       	brne	.-22     	; 0x1ca40 <__mulsf3_pse+0x64>
   1ca56:	9e 3f       	cpi	r25, 0xFE	; 254
   1ca58:	51 05       	cpc	r21, r1
   1ca5a:	70 f0       	brcs	.+28     	; 0x1ca78 <__mulsf3_pse+0x9c>
   1ca5c:	5c cf       	rjmp	.-328    	; 0x1c916 <__fp_inf>
   1ca5e:	a6 cf       	rjmp	.-180    	; 0x1c9ac <__fp_szero>
   1ca60:	5f 3f       	cpi	r21, 0xFF	; 255
   1ca62:	ec f3       	brlt	.-6      	; 0x1ca5e <__mulsf3_pse+0x82>
   1ca64:	98 3e       	cpi	r25, 0xE8	; 232
   1ca66:	dc f3       	brlt	.-10     	; 0x1ca5e <__mulsf3_pse+0x82>
   1ca68:	86 95       	lsr	r24
   1ca6a:	77 95       	ror	r23
   1ca6c:	67 95       	ror	r22
   1ca6e:	b7 95       	ror	r27
   1ca70:	f7 95       	ror	r31
   1ca72:	e7 95       	ror	r30
   1ca74:	9f 5f       	subi	r25, 0xFF	; 255
   1ca76:	c1 f7       	brne	.-16     	; 0x1ca68 <__mulsf3_pse+0x8c>
   1ca78:	fe 2b       	or	r31, r30
   1ca7a:	88 0f       	add	r24, r24
   1ca7c:	91 1d       	adc	r25, r1
   1ca7e:	96 95       	lsr	r25
   1ca80:	87 95       	ror	r24
   1ca82:	97 f9       	bld	r25, 7
   1ca84:	08 95       	ret

0001ca86 <round>:
   1ca86:	77 df       	rcall	.-274    	; 0x1c976 <__fp_splitA>
   1ca88:	e0 f0       	brcs	.+56     	; 0x1cac2 <round+0x3c>
   1ca8a:	9e 37       	cpi	r25, 0x7E	; 126
   1ca8c:	d8 f0       	brcs	.+54     	; 0x1cac4 <round+0x3e>
   1ca8e:	96 39       	cpi	r25, 0x96	; 150
   1ca90:	b8 f4       	brcc	.+46     	; 0x1cac0 <round+0x3a>
   1ca92:	9e 38       	cpi	r25, 0x8E	; 142
   1ca94:	48 f4       	brcc	.+18     	; 0x1caa8 <round+0x22>
   1ca96:	67 2f       	mov	r22, r23
   1ca98:	78 2f       	mov	r23, r24
   1ca9a:	88 27       	eor	r24, r24
   1ca9c:	98 5f       	subi	r25, 0xF8	; 248
   1ca9e:	f9 cf       	rjmp	.-14     	; 0x1ca92 <round+0xc>
   1caa0:	86 95       	lsr	r24
   1caa2:	77 95       	ror	r23
   1caa4:	67 95       	ror	r22
   1caa6:	93 95       	inc	r25
   1caa8:	95 39       	cpi	r25, 0x95	; 149
   1caaa:	d0 f3       	brcs	.-12     	; 0x1caa0 <round+0x1a>
   1caac:	b6 2f       	mov	r27, r22
   1caae:	b1 70       	andi	r27, 0x01	; 1
   1cab0:	6b 0f       	add	r22, r27
   1cab2:	71 1d       	adc	r23, r1
   1cab4:	81 1d       	adc	r24, r1
   1cab6:	20 f4       	brcc	.+8      	; 0x1cac0 <round+0x3a>
   1cab8:	87 95       	ror	r24
   1caba:	77 95       	ror	r23
   1cabc:	67 95       	ror	r22
   1cabe:	93 95       	inc	r25
   1cac0:	02 c0       	rjmp	.+4      	; 0x1cac6 <__fp_mintl>
   1cac2:	1c c0       	rjmp	.+56     	; 0x1cafc <__fp_mpack>
   1cac4:	73 cf       	rjmp	.-282    	; 0x1c9ac <__fp_szero>

0001cac6 <__fp_mintl>:
   1cac6:	88 23       	and	r24, r24
   1cac8:	71 f4       	brne	.+28     	; 0x1cae6 <__fp_mintl+0x20>
   1caca:	77 23       	and	r23, r23
   1cacc:	21 f0       	breq	.+8      	; 0x1cad6 <__fp_mintl+0x10>
   1cace:	98 50       	subi	r25, 0x08	; 8
   1cad0:	87 2b       	or	r24, r23
   1cad2:	76 2f       	mov	r23, r22
   1cad4:	07 c0       	rjmp	.+14     	; 0x1cae4 <__fp_mintl+0x1e>
   1cad6:	66 23       	and	r22, r22
   1cad8:	11 f4       	brne	.+4      	; 0x1cade <__fp_mintl+0x18>
   1cada:	99 27       	eor	r25, r25
   1cadc:	0d c0       	rjmp	.+26     	; 0x1caf8 <__fp_mintl+0x32>
   1cade:	90 51       	subi	r25, 0x10	; 16
   1cae0:	86 2b       	or	r24, r22
   1cae2:	70 e0       	ldi	r23, 0x00	; 0
   1cae4:	60 e0       	ldi	r22, 0x00	; 0
   1cae6:	2a f0       	brmi	.+10     	; 0x1caf2 <__fp_mintl+0x2c>
   1cae8:	9a 95       	dec	r25
   1caea:	66 0f       	add	r22, r22
   1caec:	77 1f       	adc	r23, r23
   1caee:	88 1f       	adc	r24, r24
   1caf0:	da f7       	brpl	.-10     	; 0x1cae8 <__fp_mintl+0x22>
   1caf2:	88 0f       	add	r24, r24
   1caf4:	96 95       	lsr	r25
   1caf6:	87 95       	ror	r24
   1caf8:	97 f9       	bld	r25, 7
   1cafa:	08 95       	ret

0001cafc <__fp_mpack>:
   1cafc:	9f 3f       	cpi	r25, 0xFF	; 255
   1cafe:	31 f0       	breq	.+12     	; 0x1cb0c <__fp_mpack_finite+0xc>

0001cb00 <__fp_mpack_finite>:
   1cb00:	91 50       	subi	r25, 0x01	; 1
   1cb02:	20 f4       	brcc	.+8      	; 0x1cb0c <__fp_mpack_finite+0xc>
   1cb04:	87 95       	ror	r24
   1cb06:	77 95       	ror	r23
   1cb08:	67 95       	ror	r22
   1cb0a:	b7 95       	ror	r27
   1cb0c:	88 0f       	add	r24, r24
   1cb0e:	91 1d       	adc	r25, r1
   1cb10:	96 95       	lsr	r25
   1cb12:	87 95       	ror	r24
   1cb14:	97 f9       	bld	r25, 7
   1cb16:	08 95       	ret

0001cb18 <calloc>:
   1cb18:	0f 93       	push	r16
   1cb1a:	1f 93       	push	r17
   1cb1c:	cf 93       	push	r28
   1cb1e:	df 93       	push	r29
   1cb20:	86 9f       	mul	r24, r22
   1cb22:	80 01       	movw	r16, r0
   1cb24:	87 9f       	mul	r24, r23
   1cb26:	10 0d       	add	r17, r0
   1cb28:	96 9f       	mul	r25, r22
   1cb2a:	10 0d       	add	r17, r0
   1cb2c:	11 24       	eor	r1, r1
   1cb2e:	c8 01       	movw	r24, r16
   1cb30:	0d d0       	rcall	.+26     	; 0x1cb4c <malloc>
   1cb32:	ec 01       	movw	r28, r24
   1cb34:	00 97       	sbiw	r24, 0x00	; 0
   1cb36:	21 f0       	breq	.+8      	; 0x1cb40 <calloc+0x28>
   1cb38:	a8 01       	movw	r20, r16
   1cb3a:	60 e0       	ldi	r22, 0x00	; 0
   1cb3c:	70 e0       	ldi	r23, 0x00	; 0
   1cb3e:	0a d2       	rcall	.+1044   	; 0x1cf54 <memset>
   1cb40:	ce 01       	movw	r24, r28
   1cb42:	df 91       	pop	r29
   1cb44:	cf 91       	pop	r28
   1cb46:	1f 91       	pop	r17
   1cb48:	0f 91       	pop	r16
   1cb4a:	08 95       	ret

0001cb4c <malloc>:
   1cb4c:	0f 93       	push	r16
   1cb4e:	1f 93       	push	r17
   1cb50:	cf 93       	push	r28
   1cb52:	df 93       	push	r29
   1cb54:	82 30       	cpi	r24, 0x02	; 2
   1cb56:	91 05       	cpc	r25, r1
   1cb58:	10 f4       	brcc	.+4      	; 0x1cb5e <malloc+0x12>
   1cb5a:	82 e0       	ldi	r24, 0x02	; 2
   1cb5c:	90 e0       	ldi	r25, 0x00	; 0
   1cb5e:	e0 91 a1 21 	lds	r30, 0x21A1	; 0x8021a1 <__flp>
   1cb62:	f0 91 a2 21 	lds	r31, 0x21A2	; 0x8021a2 <__flp+0x1>
   1cb66:	20 e0       	ldi	r18, 0x00	; 0
   1cb68:	30 e0       	ldi	r19, 0x00	; 0
   1cb6a:	a0 e0       	ldi	r26, 0x00	; 0
   1cb6c:	b0 e0       	ldi	r27, 0x00	; 0
   1cb6e:	30 97       	sbiw	r30, 0x00	; 0
   1cb70:	19 f1       	breq	.+70     	; 0x1cbb8 <malloc+0x6c>
   1cb72:	40 81       	ld	r20, Z
   1cb74:	51 81       	ldd	r21, Z+1	; 0x01
   1cb76:	02 81       	ldd	r16, Z+2	; 0x02
   1cb78:	13 81       	ldd	r17, Z+3	; 0x03
   1cb7a:	48 17       	cp	r20, r24
   1cb7c:	59 07       	cpc	r21, r25
   1cb7e:	c8 f0       	brcs	.+50     	; 0x1cbb2 <malloc+0x66>
   1cb80:	84 17       	cp	r24, r20
   1cb82:	95 07       	cpc	r25, r21
   1cb84:	69 f4       	brne	.+26     	; 0x1cba0 <malloc+0x54>
   1cb86:	10 97       	sbiw	r26, 0x00	; 0
   1cb88:	31 f0       	breq	.+12     	; 0x1cb96 <malloc+0x4a>
   1cb8a:	12 96       	adiw	r26, 0x02	; 2
   1cb8c:	0c 93       	st	X, r16
   1cb8e:	12 97       	sbiw	r26, 0x02	; 2
   1cb90:	13 96       	adiw	r26, 0x03	; 3
   1cb92:	1c 93       	st	X, r17
   1cb94:	27 c0       	rjmp	.+78     	; 0x1cbe4 <malloc+0x98>
   1cb96:	00 93 a1 21 	sts	0x21A1, r16	; 0x8021a1 <__flp>
   1cb9a:	10 93 a2 21 	sts	0x21A2, r17	; 0x8021a2 <__flp+0x1>
   1cb9e:	22 c0       	rjmp	.+68     	; 0x1cbe4 <malloc+0x98>
   1cba0:	21 15       	cp	r18, r1
   1cba2:	31 05       	cpc	r19, r1
   1cba4:	19 f0       	breq	.+6      	; 0x1cbac <malloc+0x60>
   1cba6:	42 17       	cp	r20, r18
   1cba8:	53 07       	cpc	r21, r19
   1cbaa:	18 f4       	brcc	.+6      	; 0x1cbb2 <malloc+0x66>
   1cbac:	9a 01       	movw	r18, r20
   1cbae:	bd 01       	movw	r22, r26
   1cbb0:	ef 01       	movw	r28, r30
   1cbb2:	df 01       	movw	r26, r30
   1cbb4:	f8 01       	movw	r30, r16
   1cbb6:	db cf       	rjmp	.-74     	; 0x1cb6e <malloc+0x22>
   1cbb8:	21 15       	cp	r18, r1
   1cbba:	31 05       	cpc	r19, r1
   1cbbc:	f9 f0       	breq	.+62     	; 0x1cbfc <malloc+0xb0>
   1cbbe:	28 1b       	sub	r18, r24
   1cbc0:	39 0b       	sbc	r19, r25
   1cbc2:	24 30       	cpi	r18, 0x04	; 4
   1cbc4:	31 05       	cpc	r19, r1
   1cbc6:	80 f4       	brcc	.+32     	; 0x1cbe8 <malloc+0x9c>
   1cbc8:	8a 81       	ldd	r24, Y+2	; 0x02
   1cbca:	9b 81       	ldd	r25, Y+3	; 0x03
   1cbcc:	61 15       	cp	r22, r1
   1cbce:	71 05       	cpc	r23, r1
   1cbd0:	21 f0       	breq	.+8      	; 0x1cbda <malloc+0x8e>
   1cbd2:	fb 01       	movw	r30, r22
   1cbd4:	93 83       	std	Z+3, r25	; 0x03
   1cbd6:	82 83       	std	Z+2, r24	; 0x02
   1cbd8:	04 c0       	rjmp	.+8      	; 0x1cbe2 <malloc+0x96>
   1cbda:	90 93 a2 21 	sts	0x21A2, r25	; 0x8021a2 <__flp+0x1>
   1cbde:	80 93 a1 21 	sts	0x21A1, r24	; 0x8021a1 <__flp>
   1cbe2:	fe 01       	movw	r30, r28
   1cbe4:	32 96       	adiw	r30, 0x02	; 2
   1cbe6:	44 c0       	rjmp	.+136    	; 0x1cc70 <malloc+0x124>
   1cbe8:	fe 01       	movw	r30, r28
   1cbea:	e2 0f       	add	r30, r18
   1cbec:	f3 1f       	adc	r31, r19
   1cbee:	81 93       	st	Z+, r24
   1cbf0:	91 93       	st	Z+, r25
   1cbf2:	22 50       	subi	r18, 0x02	; 2
   1cbf4:	31 09       	sbc	r19, r1
   1cbf6:	39 83       	std	Y+1, r19	; 0x01
   1cbf8:	28 83       	st	Y, r18
   1cbfa:	3a c0       	rjmp	.+116    	; 0x1cc70 <malloc+0x124>
   1cbfc:	20 91 9f 21 	lds	r18, 0x219F	; 0x80219f <__brkval>
   1cc00:	30 91 a0 21 	lds	r19, 0x21A0	; 0x8021a0 <__brkval+0x1>
   1cc04:	23 2b       	or	r18, r19
   1cc06:	41 f4       	brne	.+16     	; 0x1cc18 <malloc+0xcc>
   1cc08:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1cc0c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1cc10:	30 93 a0 21 	sts	0x21A0, r19	; 0x8021a0 <__brkval+0x1>
   1cc14:	20 93 9f 21 	sts	0x219F, r18	; 0x80219f <__brkval>
   1cc18:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
   1cc1c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
   1cc20:	21 15       	cp	r18, r1
   1cc22:	31 05       	cpc	r19, r1
   1cc24:	41 f4       	brne	.+16     	; 0x1cc36 <malloc+0xea>
   1cc26:	2d b7       	in	r18, 0x3d	; 61
   1cc28:	3e b7       	in	r19, 0x3e	; 62
   1cc2a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1cc2e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1cc32:	24 1b       	sub	r18, r20
   1cc34:	35 0b       	sbc	r19, r21
   1cc36:	e0 91 9f 21 	lds	r30, 0x219F	; 0x80219f <__brkval>
   1cc3a:	f0 91 a0 21 	lds	r31, 0x21A0	; 0x8021a0 <__brkval+0x1>
   1cc3e:	e2 17       	cp	r30, r18
   1cc40:	f3 07       	cpc	r31, r19
   1cc42:	a0 f4       	brcc	.+40     	; 0x1cc6c <malloc+0x120>
   1cc44:	2e 1b       	sub	r18, r30
   1cc46:	3f 0b       	sbc	r19, r31
   1cc48:	28 17       	cp	r18, r24
   1cc4a:	39 07       	cpc	r19, r25
   1cc4c:	78 f0       	brcs	.+30     	; 0x1cc6c <malloc+0x120>
   1cc4e:	ac 01       	movw	r20, r24
   1cc50:	4e 5f       	subi	r20, 0xFE	; 254
   1cc52:	5f 4f       	sbci	r21, 0xFF	; 255
   1cc54:	24 17       	cp	r18, r20
   1cc56:	35 07       	cpc	r19, r21
   1cc58:	48 f0       	brcs	.+18     	; 0x1cc6c <malloc+0x120>
   1cc5a:	4e 0f       	add	r20, r30
   1cc5c:	5f 1f       	adc	r21, r31
   1cc5e:	50 93 a0 21 	sts	0x21A0, r21	; 0x8021a0 <__brkval+0x1>
   1cc62:	40 93 9f 21 	sts	0x219F, r20	; 0x80219f <__brkval>
   1cc66:	81 93       	st	Z+, r24
   1cc68:	91 93       	st	Z+, r25
   1cc6a:	02 c0       	rjmp	.+4      	; 0x1cc70 <malloc+0x124>
   1cc6c:	e0 e0       	ldi	r30, 0x00	; 0
   1cc6e:	f0 e0       	ldi	r31, 0x00	; 0
   1cc70:	cf 01       	movw	r24, r30
   1cc72:	df 91       	pop	r29
   1cc74:	cf 91       	pop	r28
   1cc76:	1f 91       	pop	r17
   1cc78:	0f 91       	pop	r16
   1cc7a:	08 95       	ret

0001cc7c <free>:
   1cc7c:	cf 93       	push	r28
   1cc7e:	df 93       	push	r29
   1cc80:	00 97       	sbiw	r24, 0x00	; 0
   1cc82:	09 f4       	brne	.+2      	; 0x1cc86 <free+0xa>
   1cc84:	81 c0       	rjmp	.+258    	; 0x1cd88 <free+0x10c>
   1cc86:	fc 01       	movw	r30, r24
   1cc88:	32 97       	sbiw	r30, 0x02	; 2
   1cc8a:	13 82       	std	Z+3, r1	; 0x03
   1cc8c:	12 82       	std	Z+2, r1	; 0x02
   1cc8e:	a0 91 a1 21 	lds	r26, 0x21A1	; 0x8021a1 <__flp>
   1cc92:	b0 91 a2 21 	lds	r27, 0x21A2	; 0x8021a2 <__flp+0x1>
   1cc96:	10 97       	sbiw	r26, 0x00	; 0
   1cc98:	81 f4       	brne	.+32     	; 0x1ccba <free+0x3e>
   1cc9a:	20 81       	ld	r18, Z
   1cc9c:	31 81       	ldd	r19, Z+1	; 0x01
   1cc9e:	82 0f       	add	r24, r18
   1cca0:	93 1f       	adc	r25, r19
   1cca2:	20 91 9f 21 	lds	r18, 0x219F	; 0x80219f <__brkval>
   1cca6:	30 91 a0 21 	lds	r19, 0x21A0	; 0x8021a0 <__brkval+0x1>
   1ccaa:	28 17       	cp	r18, r24
   1ccac:	39 07       	cpc	r19, r25
   1ccae:	51 f5       	brne	.+84     	; 0x1cd04 <free+0x88>
   1ccb0:	f0 93 a0 21 	sts	0x21A0, r31	; 0x8021a0 <__brkval+0x1>
   1ccb4:	e0 93 9f 21 	sts	0x219F, r30	; 0x80219f <__brkval>
   1ccb8:	67 c0       	rjmp	.+206    	; 0x1cd88 <free+0x10c>
   1ccba:	ed 01       	movw	r28, r26
   1ccbc:	20 e0       	ldi	r18, 0x00	; 0
   1ccbe:	30 e0       	ldi	r19, 0x00	; 0
   1ccc0:	ce 17       	cp	r28, r30
   1ccc2:	df 07       	cpc	r29, r31
   1ccc4:	40 f4       	brcc	.+16     	; 0x1ccd6 <free+0x5a>
   1ccc6:	4a 81       	ldd	r20, Y+2	; 0x02
   1ccc8:	5b 81       	ldd	r21, Y+3	; 0x03
   1ccca:	9e 01       	movw	r18, r28
   1cccc:	41 15       	cp	r20, r1
   1ccce:	51 05       	cpc	r21, r1
   1ccd0:	f1 f0       	breq	.+60     	; 0x1cd0e <free+0x92>
   1ccd2:	ea 01       	movw	r28, r20
   1ccd4:	f5 cf       	rjmp	.-22     	; 0x1ccc0 <free+0x44>
   1ccd6:	d3 83       	std	Z+3, r29	; 0x03
   1ccd8:	c2 83       	std	Z+2, r28	; 0x02
   1ccda:	40 81       	ld	r20, Z
   1ccdc:	51 81       	ldd	r21, Z+1	; 0x01
   1ccde:	84 0f       	add	r24, r20
   1cce0:	95 1f       	adc	r25, r21
   1cce2:	c8 17       	cp	r28, r24
   1cce4:	d9 07       	cpc	r29, r25
   1cce6:	59 f4       	brne	.+22     	; 0x1ccfe <free+0x82>
   1cce8:	88 81       	ld	r24, Y
   1ccea:	99 81       	ldd	r25, Y+1	; 0x01
   1ccec:	84 0f       	add	r24, r20
   1ccee:	95 1f       	adc	r25, r21
   1ccf0:	02 96       	adiw	r24, 0x02	; 2
   1ccf2:	91 83       	std	Z+1, r25	; 0x01
   1ccf4:	80 83       	st	Z, r24
   1ccf6:	8a 81       	ldd	r24, Y+2	; 0x02
   1ccf8:	9b 81       	ldd	r25, Y+3	; 0x03
   1ccfa:	93 83       	std	Z+3, r25	; 0x03
   1ccfc:	82 83       	std	Z+2, r24	; 0x02
   1ccfe:	21 15       	cp	r18, r1
   1cd00:	31 05       	cpc	r19, r1
   1cd02:	29 f4       	brne	.+10     	; 0x1cd0e <free+0x92>
   1cd04:	f0 93 a2 21 	sts	0x21A2, r31	; 0x8021a2 <__flp+0x1>
   1cd08:	e0 93 a1 21 	sts	0x21A1, r30	; 0x8021a1 <__flp>
   1cd0c:	3d c0       	rjmp	.+122    	; 0x1cd88 <free+0x10c>
   1cd0e:	e9 01       	movw	r28, r18
   1cd10:	fb 83       	std	Y+3, r31	; 0x03
   1cd12:	ea 83       	std	Y+2, r30	; 0x02
   1cd14:	49 91       	ld	r20, Y+
   1cd16:	59 91       	ld	r21, Y+
   1cd18:	c4 0f       	add	r28, r20
   1cd1a:	d5 1f       	adc	r29, r21
   1cd1c:	ec 17       	cp	r30, r28
   1cd1e:	fd 07       	cpc	r31, r29
   1cd20:	61 f4       	brne	.+24     	; 0x1cd3a <free+0xbe>
   1cd22:	80 81       	ld	r24, Z
   1cd24:	91 81       	ldd	r25, Z+1	; 0x01
   1cd26:	84 0f       	add	r24, r20
   1cd28:	95 1f       	adc	r25, r21
   1cd2a:	02 96       	adiw	r24, 0x02	; 2
   1cd2c:	e9 01       	movw	r28, r18
   1cd2e:	99 83       	std	Y+1, r25	; 0x01
   1cd30:	88 83       	st	Y, r24
   1cd32:	82 81       	ldd	r24, Z+2	; 0x02
   1cd34:	93 81       	ldd	r25, Z+3	; 0x03
   1cd36:	9b 83       	std	Y+3, r25	; 0x03
   1cd38:	8a 83       	std	Y+2, r24	; 0x02
   1cd3a:	e0 e0       	ldi	r30, 0x00	; 0
   1cd3c:	f0 e0       	ldi	r31, 0x00	; 0
   1cd3e:	12 96       	adiw	r26, 0x02	; 2
   1cd40:	8d 91       	ld	r24, X+
   1cd42:	9c 91       	ld	r25, X
   1cd44:	13 97       	sbiw	r26, 0x03	; 3
   1cd46:	00 97       	sbiw	r24, 0x00	; 0
   1cd48:	19 f0       	breq	.+6      	; 0x1cd50 <free+0xd4>
   1cd4a:	fd 01       	movw	r30, r26
   1cd4c:	dc 01       	movw	r26, r24
   1cd4e:	f7 cf       	rjmp	.-18     	; 0x1cd3e <free+0xc2>
   1cd50:	8d 91       	ld	r24, X+
   1cd52:	9c 91       	ld	r25, X
   1cd54:	11 97       	sbiw	r26, 0x01	; 1
   1cd56:	9d 01       	movw	r18, r26
   1cd58:	2e 5f       	subi	r18, 0xFE	; 254
   1cd5a:	3f 4f       	sbci	r19, 0xFF	; 255
   1cd5c:	82 0f       	add	r24, r18
   1cd5e:	93 1f       	adc	r25, r19
   1cd60:	20 91 9f 21 	lds	r18, 0x219F	; 0x80219f <__brkval>
   1cd64:	30 91 a0 21 	lds	r19, 0x21A0	; 0x8021a0 <__brkval+0x1>
   1cd68:	28 17       	cp	r18, r24
   1cd6a:	39 07       	cpc	r19, r25
   1cd6c:	69 f4       	brne	.+26     	; 0x1cd88 <free+0x10c>
   1cd6e:	30 97       	sbiw	r30, 0x00	; 0
   1cd70:	29 f4       	brne	.+10     	; 0x1cd7c <free+0x100>
   1cd72:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <__flp+0x1>
   1cd76:	10 92 a1 21 	sts	0x21A1, r1	; 0x8021a1 <__flp>
   1cd7a:	02 c0       	rjmp	.+4      	; 0x1cd80 <free+0x104>
   1cd7c:	13 82       	std	Z+3, r1	; 0x03
   1cd7e:	12 82       	std	Z+2, r1	; 0x02
   1cd80:	b0 93 a0 21 	sts	0x21A0, r27	; 0x8021a0 <__brkval+0x1>
   1cd84:	a0 93 9f 21 	sts	0x219F, r26	; 0x80219f <__brkval>
   1cd88:	df 91       	pop	r29
   1cd8a:	cf 91       	pop	r28
   1cd8c:	08 95       	ret

0001cd8e <__ftoa_engine>:
   1cd8e:	28 30       	cpi	r18, 0x08	; 8
   1cd90:	08 f0       	brcs	.+2      	; 0x1cd94 <__ftoa_engine+0x6>
   1cd92:	27 e0       	ldi	r18, 0x07	; 7
   1cd94:	33 27       	eor	r19, r19
   1cd96:	da 01       	movw	r26, r20
   1cd98:	99 0f       	add	r25, r25
   1cd9a:	31 1d       	adc	r19, r1
   1cd9c:	87 fd       	sbrc	r24, 7
   1cd9e:	91 60       	ori	r25, 0x01	; 1
   1cda0:	00 96       	adiw	r24, 0x00	; 0
   1cda2:	61 05       	cpc	r22, r1
   1cda4:	71 05       	cpc	r23, r1
   1cda6:	39 f4       	brne	.+14     	; 0x1cdb6 <__ftoa_engine+0x28>
   1cda8:	32 60       	ori	r19, 0x02	; 2
   1cdaa:	2e 5f       	subi	r18, 0xFE	; 254
   1cdac:	3d 93       	st	X+, r19
   1cdae:	30 e3       	ldi	r19, 0x30	; 48
   1cdb0:	2a 95       	dec	r18
   1cdb2:	e1 f7       	brne	.-8      	; 0x1cdac <__ftoa_engine+0x1e>
   1cdb4:	08 95       	ret
   1cdb6:	9f 3f       	cpi	r25, 0xFF	; 255
   1cdb8:	30 f0       	brcs	.+12     	; 0x1cdc6 <__ftoa_engine+0x38>
   1cdba:	80 38       	cpi	r24, 0x80	; 128
   1cdbc:	71 05       	cpc	r23, r1
   1cdbe:	61 05       	cpc	r22, r1
   1cdc0:	09 f0       	breq	.+2      	; 0x1cdc4 <__ftoa_engine+0x36>
   1cdc2:	3c 5f       	subi	r19, 0xFC	; 252
   1cdc4:	3c 5f       	subi	r19, 0xFC	; 252
   1cdc6:	3d 93       	st	X+, r19
   1cdc8:	91 30       	cpi	r25, 0x01	; 1
   1cdca:	08 f0       	brcs	.+2      	; 0x1cdce <__ftoa_engine+0x40>
   1cdcc:	80 68       	ori	r24, 0x80	; 128
   1cdce:	91 1d       	adc	r25, r1
   1cdd0:	df 93       	push	r29
   1cdd2:	cf 93       	push	r28
   1cdd4:	1f 93       	push	r17
   1cdd6:	0f 93       	push	r16
   1cdd8:	ff 92       	push	r15
   1cdda:	ef 92       	push	r14
   1cddc:	19 2f       	mov	r17, r25
   1cdde:	98 7f       	andi	r25, 0xF8	; 248
   1cde0:	96 95       	lsr	r25
   1cde2:	e9 2f       	mov	r30, r25
   1cde4:	96 95       	lsr	r25
   1cde6:	96 95       	lsr	r25
   1cde8:	e9 0f       	add	r30, r25
   1cdea:	ff 27       	eor	r31, r31
   1cdec:	e8 5c       	subi	r30, 0xC8	; 200
   1cdee:	fd 4f       	sbci	r31, 0xFD	; 253
   1cdf0:	99 27       	eor	r25, r25
   1cdf2:	33 27       	eor	r19, r19
   1cdf4:	ee 24       	eor	r14, r14
   1cdf6:	ff 24       	eor	r15, r15
   1cdf8:	a7 01       	movw	r20, r14
   1cdfa:	e7 01       	movw	r28, r14
   1cdfc:	05 90       	lpm	r0, Z+
   1cdfe:	08 94       	sec
   1ce00:	07 94       	ror	r0
   1ce02:	28 f4       	brcc	.+10     	; 0x1ce0e <__ftoa_engine+0x80>
   1ce04:	36 0f       	add	r19, r22
   1ce06:	e7 1e       	adc	r14, r23
   1ce08:	f8 1e       	adc	r15, r24
   1ce0a:	49 1f       	adc	r20, r25
   1ce0c:	51 1d       	adc	r21, r1
   1ce0e:	66 0f       	add	r22, r22
   1ce10:	77 1f       	adc	r23, r23
   1ce12:	88 1f       	adc	r24, r24
   1ce14:	99 1f       	adc	r25, r25
   1ce16:	06 94       	lsr	r0
   1ce18:	a1 f7       	brne	.-24     	; 0x1ce02 <__ftoa_engine+0x74>
   1ce1a:	05 90       	lpm	r0, Z+
   1ce1c:	07 94       	ror	r0
   1ce1e:	28 f4       	brcc	.+10     	; 0x1ce2a <__ftoa_engine+0x9c>
   1ce20:	e7 0e       	add	r14, r23
   1ce22:	f8 1e       	adc	r15, r24
   1ce24:	49 1f       	adc	r20, r25
   1ce26:	56 1f       	adc	r21, r22
   1ce28:	c1 1d       	adc	r28, r1
   1ce2a:	77 0f       	add	r23, r23
   1ce2c:	88 1f       	adc	r24, r24
   1ce2e:	99 1f       	adc	r25, r25
   1ce30:	66 1f       	adc	r22, r22
   1ce32:	06 94       	lsr	r0
   1ce34:	a1 f7       	brne	.-24     	; 0x1ce1e <__ftoa_engine+0x90>
   1ce36:	05 90       	lpm	r0, Z+
   1ce38:	07 94       	ror	r0
   1ce3a:	28 f4       	brcc	.+10     	; 0x1ce46 <__ftoa_engine+0xb8>
   1ce3c:	f8 0e       	add	r15, r24
   1ce3e:	49 1f       	adc	r20, r25
   1ce40:	56 1f       	adc	r21, r22
   1ce42:	c7 1f       	adc	r28, r23
   1ce44:	d1 1d       	adc	r29, r1
   1ce46:	88 0f       	add	r24, r24
   1ce48:	99 1f       	adc	r25, r25
   1ce4a:	66 1f       	adc	r22, r22
   1ce4c:	77 1f       	adc	r23, r23
   1ce4e:	06 94       	lsr	r0
   1ce50:	a1 f7       	brne	.-24     	; 0x1ce3a <__ftoa_engine+0xac>
   1ce52:	05 90       	lpm	r0, Z+
   1ce54:	07 94       	ror	r0
   1ce56:	20 f4       	brcc	.+8      	; 0x1ce60 <__ftoa_engine+0xd2>
   1ce58:	49 0f       	add	r20, r25
   1ce5a:	56 1f       	adc	r21, r22
   1ce5c:	c7 1f       	adc	r28, r23
   1ce5e:	d8 1f       	adc	r29, r24
   1ce60:	99 0f       	add	r25, r25
   1ce62:	66 1f       	adc	r22, r22
   1ce64:	77 1f       	adc	r23, r23
   1ce66:	88 1f       	adc	r24, r24
   1ce68:	06 94       	lsr	r0
   1ce6a:	a9 f7       	brne	.-22     	; 0x1ce56 <__ftoa_engine+0xc8>
   1ce6c:	84 91       	lpm	r24, Z
   1ce6e:	10 95       	com	r17
   1ce70:	17 70       	andi	r17, 0x07	; 7
   1ce72:	41 f0       	breq	.+16     	; 0x1ce84 <__ftoa_engine+0xf6>
   1ce74:	d6 95       	lsr	r29
   1ce76:	c7 95       	ror	r28
   1ce78:	57 95       	ror	r21
   1ce7a:	47 95       	ror	r20
   1ce7c:	f7 94       	ror	r15
   1ce7e:	e7 94       	ror	r14
   1ce80:	1a 95       	dec	r17
   1ce82:	c1 f7       	brne	.-16     	; 0x1ce74 <__ftoa_engine+0xe6>
   1ce84:	ee ed       	ldi	r30, 0xDE	; 222
   1ce86:	f1 e0       	ldi	r31, 0x01	; 1
   1ce88:	68 94       	set
   1ce8a:	15 90       	lpm	r1, Z+
   1ce8c:	15 91       	lpm	r17, Z+
   1ce8e:	35 91       	lpm	r19, Z+
   1ce90:	65 91       	lpm	r22, Z+
   1ce92:	95 91       	lpm	r25, Z+
   1ce94:	05 90       	lpm	r0, Z+
   1ce96:	7f e2       	ldi	r23, 0x2F	; 47
   1ce98:	73 95       	inc	r23
   1ce9a:	e1 18       	sub	r14, r1
   1ce9c:	f1 0a       	sbc	r15, r17
   1ce9e:	43 0b       	sbc	r20, r19
   1cea0:	56 0b       	sbc	r21, r22
   1cea2:	c9 0b       	sbc	r28, r25
   1cea4:	d0 09       	sbc	r29, r0
   1cea6:	c0 f7       	brcc	.-16     	; 0x1ce98 <__ftoa_engine+0x10a>
   1cea8:	e1 0c       	add	r14, r1
   1ceaa:	f1 1e       	adc	r15, r17
   1ceac:	43 1f       	adc	r20, r19
   1ceae:	56 1f       	adc	r21, r22
   1ceb0:	c9 1f       	adc	r28, r25
   1ceb2:	d0 1d       	adc	r29, r0
   1ceb4:	7e f4       	brtc	.+30     	; 0x1ced4 <__ftoa_engine+0x146>
   1ceb6:	70 33       	cpi	r23, 0x30	; 48
   1ceb8:	11 f4       	brne	.+4      	; 0x1cebe <__ftoa_engine+0x130>
   1ceba:	8a 95       	dec	r24
   1cebc:	e6 cf       	rjmp	.-52     	; 0x1ce8a <__ftoa_engine+0xfc>
   1cebe:	e8 94       	clt
   1cec0:	01 50       	subi	r16, 0x01	; 1
   1cec2:	30 f0       	brcs	.+12     	; 0x1ced0 <__ftoa_engine+0x142>
   1cec4:	08 0f       	add	r16, r24
   1cec6:	0a f4       	brpl	.+2      	; 0x1ceca <__ftoa_engine+0x13c>
   1cec8:	00 27       	eor	r16, r16
   1ceca:	02 17       	cp	r16, r18
   1cecc:	08 f4       	brcc	.+2      	; 0x1ced0 <__ftoa_engine+0x142>
   1cece:	20 2f       	mov	r18, r16
   1ced0:	23 95       	inc	r18
   1ced2:	02 2f       	mov	r16, r18
   1ced4:	7a 33       	cpi	r23, 0x3A	; 58
   1ced6:	28 f0       	brcs	.+10     	; 0x1cee2 <__ftoa_engine+0x154>
   1ced8:	79 e3       	ldi	r23, 0x39	; 57
   1ceda:	7d 93       	st	X+, r23
   1cedc:	2a 95       	dec	r18
   1cede:	e9 f7       	brne	.-6      	; 0x1ceda <__ftoa_engine+0x14c>
   1cee0:	10 c0       	rjmp	.+32     	; 0x1cf02 <__ftoa_engine+0x174>
   1cee2:	7d 93       	st	X+, r23
   1cee4:	2a 95       	dec	r18
   1cee6:	89 f6       	brne	.-94     	; 0x1ce8a <__ftoa_engine+0xfc>
   1cee8:	06 94       	lsr	r0
   1ceea:	97 95       	ror	r25
   1ceec:	67 95       	ror	r22
   1ceee:	37 95       	ror	r19
   1cef0:	17 95       	ror	r17
   1cef2:	17 94       	ror	r1
   1cef4:	e1 18       	sub	r14, r1
   1cef6:	f1 0a       	sbc	r15, r17
   1cef8:	43 0b       	sbc	r20, r19
   1cefa:	56 0b       	sbc	r21, r22
   1cefc:	c9 0b       	sbc	r28, r25
   1cefe:	d0 09       	sbc	r29, r0
   1cf00:	98 f0       	brcs	.+38     	; 0x1cf28 <__ftoa_engine+0x19a>
   1cf02:	23 95       	inc	r18
   1cf04:	7e 91       	ld	r23, -X
   1cf06:	73 95       	inc	r23
   1cf08:	7a 33       	cpi	r23, 0x3A	; 58
   1cf0a:	08 f0       	brcs	.+2      	; 0x1cf0e <__ftoa_engine+0x180>
   1cf0c:	70 e3       	ldi	r23, 0x30	; 48
   1cf0e:	7c 93       	st	X, r23
   1cf10:	20 13       	cpse	r18, r16
   1cf12:	b8 f7       	brcc	.-18     	; 0x1cf02 <__ftoa_engine+0x174>
   1cf14:	7e 91       	ld	r23, -X
   1cf16:	70 61       	ori	r23, 0x10	; 16
   1cf18:	7d 93       	st	X+, r23
   1cf1a:	30 f0       	brcs	.+12     	; 0x1cf28 <__ftoa_engine+0x19a>
   1cf1c:	83 95       	inc	r24
   1cf1e:	71 e3       	ldi	r23, 0x31	; 49
   1cf20:	7d 93       	st	X+, r23
   1cf22:	70 e3       	ldi	r23, 0x30	; 48
   1cf24:	2a 95       	dec	r18
   1cf26:	e1 f7       	brne	.-8      	; 0x1cf20 <__ftoa_engine+0x192>
   1cf28:	11 24       	eor	r1, r1
   1cf2a:	ef 90       	pop	r14
   1cf2c:	ff 90       	pop	r15
   1cf2e:	0f 91       	pop	r16
   1cf30:	1f 91       	pop	r17
   1cf32:	cf 91       	pop	r28
   1cf34:	df 91       	pop	r29
   1cf36:	99 27       	eor	r25, r25
   1cf38:	87 fd       	sbrc	r24, 7
   1cf3a:	90 95       	com	r25
   1cf3c:	08 95       	ret

0001cf3e <strnlen_P>:
   1cf3e:	fc 01       	movw	r30, r24
   1cf40:	05 90       	lpm	r0, Z+
   1cf42:	61 50       	subi	r22, 0x01	; 1
   1cf44:	70 40       	sbci	r23, 0x00	; 0
   1cf46:	01 10       	cpse	r0, r1
   1cf48:	d8 f7       	brcc	.-10     	; 0x1cf40 <strnlen_P+0x2>
   1cf4a:	80 95       	com	r24
   1cf4c:	90 95       	com	r25
   1cf4e:	8e 0f       	add	r24, r30
   1cf50:	9f 1f       	adc	r25, r31
   1cf52:	08 95       	ret

0001cf54 <memset>:
   1cf54:	dc 01       	movw	r26, r24
   1cf56:	01 c0       	rjmp	.+2      	; 0x1cf5a <memset+0x6>
   1cf58:	6d 93       	st	X+, r22
   1cf5a:	41 50       	subi	r20, 0x01	; 1
   1cf5c:	50 40       	sbci	r21, 0x00	; 0
   1cf5e:	e0 f7       	brcc	.-8      	; 0x1cf58 <memset+0x4>
   1cf60:	08 95       	ret

0001cf62 <strnlen>:
   1cf62:	fc 01       	movw	r30, r24
   1cf64:	61 50       	subi	r22, 0x01	; 1
   1cf66:	70 40       	sbci	r23, 0x00	; 0
   1cf68:	01 90       	ld	r0, Z+
   1cf6a:	01 10       	cpse	r0, r1
   1cf6c:	d8 f7       	brcc	.-10     	; 0x1cf64 <strnlen+0x2>
   1cf6e:	80 95       	com	r24
   1cf70:	90 95       	com	r25
   1cf72:	8e 0f       	add	r24, r30
   1cf74:	9f 1f       	adc	r25, r31
   1cf76:	08 95       	ret

0001cf78 <__ultoa_invert>:
   1cf78:	fa 01       	movw	r30, r20
   1cf7a:	aa 27       	eor	r26, r26
   1cf7c:	28 30       	cpi	r18, 0x08	; 8
   1cf7e:	51 f1       	breq	.+84     	; 0x1cfd4 <__ultoa_invert+0x5c>
   1cf80:	20 31       	cpi	r18, 0x10	; 16
   1cf82:	81 f1       	breq	.+96     	; 0x1cfe4 <__ultoa_invert+0x6c>
   1cf84:	e8 94       	clt
   1cf86:	6f 93       	push	r22
   1cf88:	6e 7f       	andi	r22, 0xFE	; 254
   1cf8a:	6e 5f       	subi	r22, 0xFE	; 254
   1cf8c:	7f 4f       	sbci	r23, 0xFF	; 255
   1cf8e:	8f 4f       	sbci	r24, 0xFF	; 255
   1cf90:	9f 4f       	sbci	r25, 0xFF	; 255
   1cf92:	af 4f       	sbci	r26, 0xFF	; 255
   1cf94:	b1 e0       	ldi	r27, 0x01	; 1
   1cf96:	3e d0       	rcall	.+124    	; 0x1d014 <__ultoa_invert+0x9c>
   1cf98:	b4 e0       	ldi	r27, 0x04	; 4
   1cf9a:	3c d0       	rcall	.+120    	; 0x1d014 <__ultoa_invert+0x9c>
   1cf9c:	67 0f       	add	r22, r23
   1cf9e:	78 1f       	adc	r23, r24
   1cfa0:	89 1f       	adc	r24, r25
   1cfa2:	9a 1f       	adc	r25, r26
   1cfa4:	a1 1d       	adc	r26, r1
   1cfa6:	68 0f       	add	r22, r24
   1cfa8:	79 1f       	adc	r23, r25
   1cfaa:	8a 1f       	adc	r24, r26
   1cfac:	91 1d       	adc	r25, r1
   1cfae:	a1 1d       	adc	r26, r1
   1cfb0:	6a 0f       	add	r22, r26
   1cfb2:	71 1d       	adc	r23, r1
   1cfb4:	81 1d       	adc	r24, r1
   1cfb6:	91 1d       	adc	r25, r1
   1cfb8:	a1 1d       	adc	r26, r1
   1cfba:	20 d0       	rcall	.+64     	; 0x1cffc <__ultoa_invert+0x84>
   1cfbc:	09 f4       	brne	.+2      	; 0x1cfc0 <__ultoa_invert+0x48>
   1cfbe:	68 94       	set
   1cfc0:	3f 91       	pop	r19
   1cfc2:	2a e0       	ldi	r18, 0x0A	; 10
   1cfc4:	26 9f       	mul	r18, r22
   1cfc6:	11 24       	eor	r1, r1
   1cfc8:	30 19       	sub	r19, r0
   1cfca:	30 5d       	subi	r19, 0xD0	; 208
   1cfcc:	31 93       	st	Z+, r19
   1cfce:	de f6       	brtc	.-74     	; 0x1cf86 <__ultoa_invert+0xe>
   1cfd0:	cf 01       	movw	r24, r30
   1cfd2:	08 95       	ret
   1cfd4:	46 2f       	mov	r20, r22
   1cfd6:	47 70       	andi	r20, 0x07	; 7
   1cfd8:	40 5d       	subi	r20, 0xD0	; 208
   1cfda:	41 93       	st	Z+, r20
   1cfdc:	b3 e0       	ldi	r27, 0x03	; 3
   1cfde:	0f d0       	rcall	.+30     	; 0x1cffe <__ultoa_invert+0x86>
   1cfe0:	c9 f7       	brne	.-14     	; 0x1cfd4 <__ultoa_invert+0x5c>
   1cfe2:	f6 cf       	rjmp	.-20     	; 0x1cfd0 <__ultoa_invert+0x58>
   1cfe4:	46 2f       	mov	r20, r22
   1cfe6:	4f 70       	andi	r20, 0x0F	; 15
   1cfe8:	40 5d       	subi	r20, 0xD0	; 208
   1cfea:	4a 33       	cpi	r20, 0x3A	; 58
   1cfec:	18 f0       	brcs	.+6      	; 0x1cff4 <__ultoa_invert+0x7c>
   1cfee:	49 5d       	subi	r20, 0xD9	; 217
   1cff0:	31 fd       	sbrc	r19, 1
   1cff2:	40 52       	subi	r20, 0x20	; 32
   1cff4:	41 93       	st	Z+, r20
   1cff6:	02 d0       	rcall	.+4      	; 0x1cffc <__ultoa_invert+0x84>
   1cff8:	a9 f7       	brne	.-22     	; 0x1cfe4 <__ultoa_invert+0x6c>
   1cffa:	ea cf       	rjmp	.-44     	; 0x1cfd0 <__ultoa_invert+0x58>
   1cffc:	b4 e0       	ldi	r27, 0x04	; 4
   1cffe:	a6 95       	lsr	r26
   1d000:	97 95       	ror	r25
   1d002:	87 95       	ror	r24
   1d004:	77 95       	ror	r23
   1d006:	67 95       	ror	r22
   1d008:	ba 95       	dec	r27
   1d00a:	c9 f7       	brne	.-14     	; 0x1cffe <__ultoa_invert+0x86>
   1d00c:	00 97       	sbiw	r24, 0x00	; 0
   1d00e:	61 05       	cpc	r22, r1
   1d010:	71 05       	cpc	r23, r1
   1d012:	08 95       	ret
   1d014:	9b 01       	movw	r18, r22
   1d016:	ac 01       	movw	r20, r24
   1d018:	0a 2e       	mov	r0, r26
   1d01a:	06 94       	lsr	r0
   1d01c:	57 95       	ror	r21
   1d01e:	47 95       	ror	r20
   1d020:	37 95       	ror	r19
   1d022:	27 95       	ror	r18
   1d024:	ba 95       	dec	r27
   1d026:	c9 f7       	brne	.-14     	; 0x1d01a <__ultoa_invert+0xa2>
   1d028:	62 0f       	add	r22, r18
   1d02a:	73 1f       	adc	r23, r19
   1d02c:	84 1f       	adc	r24, r20
   1d02e:	95 1f       	adc	r25, r21
   1d030:	a0 1d       	adc	r26, r0
   1d032:	08 95       	ret

0001d034 <_exit>:
   1d034:	f8 94       	cli

0001d036 <__stop_program>:
   1d036:	ff cf       	rjmp	.-2      	; 0x1d036 <__stop_program>
