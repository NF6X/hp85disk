
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001652  00800100  0001ceba  0001cf4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001ceba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a61  00801752  00801752  0001e5a0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001e5a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001e5b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000016e0  00000000  00000000  0001e5f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00028788  00000000  00000000  0001fcd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000607f  00000000  00000000  0004845c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000121e0  00000000  00000000  0004e4db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005104  00000000  00000000  000606bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004833  00000000  00000000  000657c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00023fc5  00000000  00000000  00069ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000016e0  00000000  00000000  0008dfb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f7 23 	jmp	0x47ee	; 0x47ee <__ctors_end>
       4:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
       8:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
       c:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      10:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      14:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      18:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      1c:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      20:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      24:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      28:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      2c:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      30:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      34:	0c 94 a5 31 	jmp	0x634a	; 0x634a <__vector_13>
      38:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      3c:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      40:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      44:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      48:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      4c:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      50:	0c 94 c6 27 	jmp	0x4f8c	; 0x4f8c <__vector_20>
      54:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      58:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      5c:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      60:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      64:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      68:	0c 94 c8 2b 	jmp	0x5790	; 0x5790 <__vector_26>
      6c:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      70:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      74:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      78:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      7c:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      80:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      84:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      88:	0c 94 16 24 	jmp	0x482c	; 0x482c <__bad_interrupt>
      8c:	d5 41       	sbci	r29, 0x15	; 21
      8e:	25 43       	sbci	r18, 0x35	; 53
      90:	0d 42       	sbci	r16, 0x2D	; 45
      92:	f8 42       	sbci	r31, 0x28	; 40
      94:	f8 42       	sbci	r31, 0x28	; 40
      96:	25 43       	sbci	r18, 0x35	; 53
      98:	25 43       	sbci	r18, 0x35	; 53
      9a:	25 43       	sbci	r18, 0x35	; 53
      9c:	25 43       	sbci	r18, 0x35	; 53
      9e:	25 43       	sbci	r18, 0x35	; 53
      a0:	25 43       	sbci	r18, 0x35	; 53
      a2:	25 43       	sbci	r18, 0x35	; 53
      a4:	25 43       	sbci	r18, 0x35	; 53
      a6:	d5 41       	sbci	r29, 0x15	; 21
      a8:	d2 41       	sbci	r29, 0x12	; 18
      aa:	25 43       	sbci	r18, 0x35	; 53
      ac:	25 43       	sbci	r18, 0x35	; 53
      ae:	1b 43       	sbci	r17, 0x3B	; 59
      b0:	25 43       	sbci	r18, 0x35	; 53
      b2:	07 42       	sbci	r16, 0x27	; 39
      b4:	25 43       	sbci	r18, 0x35	; 53
      b6:	25 43       	sbci	r18, 0x35	; 53
      b8:	d5 41       	sbci	r29, 0x15	; 21
      ba:	25 43       	sbci	r18, 0x35	; 53
      bc:	25 43       	sbci	r18, 0x35	; 53
      be:	25 43       	sbci	r18, 0x35	; 53
      c0:	25 43       	sbci	r18, 0x35	; 53
      c2:	25 43       	sbci	r18, 0x35	; 53
      c4:	25 43       	sbci	r18, 0x35	; 53
      c6:	25 43       	sbci	r18, 0x35	; 53
      c8:	25 43       	sbci	r18, 0x35	; 53
      ca:	25 43       	sbci	r18, 0x35	; 53
      cc:	d5 41       	sbci	r29, 0x15	; 21
      ce:	20 43       	sbci	r18, 0x30	; 48
      d0:	0d 42       	sbci	r16, 0x2D	; 45
      d2:	f8 42       	sbci	r31, 0x28	; 40
      d4:	f8 42       	sbci	r31, 0x28	; 40
      d6:	25 43       	sbci	r18, 0x35	; 53
      d8:	25 43       	sbci	r18, 0x35	; 53
      da:	25 43       	sbci	r18, 0x35	; 53
      dc:	25 43       	sbci	r18, 0x35	; 53
      de:	25 43       	sbci	r18, 0x35	; 53
      e0:	25 43       	sbci	r18, 0x35	; 53
      e2:	25 43       	sbci	r18, 0x35	; 53
      e4:	25 43       	sbci	r18, 0x35	; 53
      e6:	d5 41       	sbci	r29, 0x15	; 21
      e8:	d2 41       	sbci	r29, 0x12	; 18
      ea:	25 43       	sbci	r18, 0x35	; 53
      ec:	25 43       	sbci	r18, 0x35	; 53
      ee:	16 43       	sbci	r17, 0x36	; 54
      f0:	25 43       	sbci	r18, 0x35	; 53
      f2:	07 42       	sbci	r16, 0x27	; 39
      f4:	25 43       	sbci	r18, 0x35	; 53
      f6:	25 43       	sbci	r18, 0x35	; 53
      f8:	d5 41       	sbci	r29, 0x15	; 21
      fa:	4a 43       	sbci	r20, 0x3A	; 58
      fc:	8b 44       	sbci	r24, 0x4B	; 75
      fe:	3d 43       	sbci	r19, 0x3D	; 61
     100:	a5 43       	sbci	r26, 0x35	; 53
     102:	89 43       	sbci	r24, 0x39	; 57
     104:	8b 44       	sbci	r24, 0x4B	; 75
     106:	8b 44       	sbci	r24, 0x4B	; 75
     108:	8b 44       	sbci	r24, 0x4B	; 75
     10a:	8b 44       	sbci	r24, 0x4B	; 75
     10c:	8b 44       	sbci	r24, 0x4B	; 75
     10e:	8b 44       	sbci	r24, 0x4B	; 75
     110:	8b 44       	sbci	r24, 0x4B	; 75
     112:	8b 44       	sbci	r24, 0x4B	; 75
     114:	57 43       	sbci	r21, 0x37	; 55
     116:	6b 43       	sbci	r22, 0x3B	; 59
     118:	8b 44       	sbci	r24, 0x4B	; 75
     11a:	8b 44       	sbci	r24, 0x4B	; 75
     11c:	31 44       	sbci	r19, 0x41	; 65
     11e:	8b 44       	sbci	r24, 0x4B	; 75
     120:	39 43       	sbci	r19, 0x39	; 57
     122:	8b 44       	sbci	r24, 0x4B	; 75
     124:	8b 44       	sbci	r24, 0x4B	; 75
     126:	6b 43       	sbci	r22, 0x3B	; 59
     128:	8b 44       	sbci	r24, 0x4B	; 75
     12a:	8b 44       	sbci	r24, 0x4B	; 75
     12c:	8b 44       	sbci	r24, 0x4B	; 75
     12e:	8b 44       	sbci	r24, 0x4B	; 75
     130:	8b 44       	sbci	r24, 0x4B	; 75
     132:	8b 44       	sbci	r24, 0x4B	; 75
     134:	8b 44       	sbci	r24, 0x4B	; 75
     136:	8b 44       	sbci	r24, 0x4B	; 75
     138:	8b 44       	sbci	r24, 0x4B	; 75
     13a:	4a 43       	sbci	r20, 0x3A	; 58
     13c:	d9 43       	sbci	r29, 0x39	; 57
     13e:	3d 43       	sbci	r19, 0x3D	; 61
     140:	a5 43       	sbci	r26, 0x35	; 53
     142:	89 43       	sbci	r24, 0x39	; 57
     144:	8b 44       	sbci	r24, 0x4B	; 75
     146:	8b 44       	sbci	r24, 0x4B	; 75
     148:	8b 44       	sbci	r24, 0x4B	; 75
     14a:	8b 44       	sbci	r24, 0x4B	; 75
     14c:	8b 44       	sbci	r24, 0x4B	; 75
     14e:	8b 44       	sbci	r24, 0x4B	; 75
     150:	8b 44       	sbci	r24, 0x4B	; 75
     152:	8b 44       	sbci	r24, 0x4B	; 75
     154:	57 43       	sbci	r21, 0x37	; 55
     156:	6b 43       	sbci	r22, 0x3B	; 59
     158:	8b 44       	sbci	r24, 0x4B	; 75
     15a:	8b 44       	sbci	r24, 0x4B	; 75
     15c:	d9 43       	sbci	r29, 0x39	; 57
     15e:	8b 44       	sbci	r24, 0x4B	; 75
     160:	39 43       	sbci	r19, 0x39	; 57
     162:	8b 44       	sbci	r24, 0x4B	; 75
     164:	8b 44       	sbci	r24, 0x4B	; 75
     166:	6b 43       	sbci	r22, 0x3B	; 59
     168:	9a 68       	ori	r25, 0x8A	; 138
     16a:	a4 68       	ori	r26, 0x84	; 132
     16c:	ac 68       	ori	r26, 0x8C	; 140
     16e:	af 68       	ori	r26, 0x8F	; 143
     170:	b2 68       	ori	r27, 0x82	; 130
     172:	b5 68       	ori	r27, 0x85	; 133
     174:	b8 68       	ori	r27, 0x88	; 136
     176:	bb 68       	ori	r27, 0x8B	; 139
     178:	be 68       	ori	r27, 0x8E	; 142
     17a:	58 86       	std	Y+8, r5	; 0x08
     17c:	61 86       	std	Z+9, r6	; 0x09
     17e:	92 86       	std	Z+10, r9	; 0x0a
     180:	ab 86       	std	Y+11, r10	; 0x0b
     182:	c7 86       	std	Z+15, r12	; 0x0f
     184:	d4 86       	std	Z+12, r13	; 0x0c
     186:	f0 86       	std	Z+8, r15	; 0x08
     188:	1a 87       	std	Y+10, r17	; 0x0a
     18a:	fd 86       	std	Y+13, r15	; 0x0d
     18c:	2a 9b       	sbis	0x05, 2	; 5
     18e:	fc 9b       	sbis	0x1f, 4	; 31
     190:	38 9c       	mul	r3, r8
     192:	67 9c       	mul	r6, r7
     194:	77 9c       	mul	r7, r7
     196:	94 9c       	mul	r9, r4
     198:	f4 9c       	mul	r15, r4
     19a:	03 9e       	mul	r0, r19
     19c:	03 9e       	mul	r0, r19
     19e:	03 9e       	mul	r0, r19
     1a0:	28 9d       	mul	r18, r8
     1a2:	54 9d       	mul	r21, r4
     1a4:	a2 9d       	mul	r26, r2
     1a6:	be 9d       	mul	r27, r14
     1a8:	c7 9b       	sbis	0x18, 7	; 24
     1aa:	da 9b       	sbis	0x1b, 2	; 27
     1ac:	cb ba       	out	0x1b, r12	; 27
     1ae:	8a ba       	out	0x1a, r8	; 26
     1b0:	8a ba       	out	0x1a, r8	; 26
     1b2:	8a ba       	out	0x1a, r8	; 26
     1b4:	8a ba       	out	0x1a, r8	; 26
     1b6:	4e ba       	out	0x1e, r4	; 30
     1b8:	55 ba       	out	0x15, r5	; 21
     1ba:	5c ba       	out	0x1c, r5	; 28
     1bc:	6c ba       	out	0x1c, r6	; 28
     1be:	7a ba       	out	0x1a, r7	; 26
     1c0:	73 ba       	out	0x13, r7	; 19

000001c2 <__trampolines_end>:
     1c2:	63 73       	andi	r22, 0x33	; 51
     1c4:	5f 64       	ori	r21, 0x4F	; 79
     1c6:	69 73       	andi	r22, 0x39	; 57
     1c8:	61 62       	ori	r22, 0x21	; 33
     1ca:	6c 65       	ori	r22, 0x5C	; 92
     1cc:	20 77       	andi	r18, 0x70	; 112
     1ce:	61 73       	andi	r22, 0x31	; 49
     1d0:	3a 20       	and	r3, r10
     1d2:	25 64       	ori	r18, 0x45	; 69
     1d4:	2c 20       	and	r2, r12
     1d6:	77 61       	ori	r23, 0x17	; 23
     1d8:	6e 74       	andi	r22, 0x4E	; 78
     1da:	3a 20       	and	r3, r10
     1dc:	25 64       	ori	r18, 0x45	; 69
     1de:	0a 00       	.word	0x000a	; ????

000001e0 <__c.3617>:
     1e0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     1f0:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

000001fd <__c.3648>:
     1fd:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     20d:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     21d:	25 75 29 0a 00                                      %u)..

00000222 <__c.3639>:
     222:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     232:	61 69 6c 65 64 21 0a 00                             ailed!..

0000023a <__c.3633>:
     23a:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     24a:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000255 <__c.3618>:
     255:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     265:	35 75 0a 00                                         5u..

00000269 <__c.3616>:
     269:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     279:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

00000287 <__c.3614>:
     287:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     297:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002a5 <__c.3612>:
     2a5:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     2b5:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002c3 <__c.3610>:
     2c3:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     2d3:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002e1 <__c.3608>:
     2e1:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     2f1:	75 0a 00                                            u..

000002f4 <__c.3606>:
     2f4:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     304:	75 0a 00                                            u..

00000307 <__c.3604>:
     307:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000314 <__c.3602>:
     314:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     324:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000331 <__c.3721>:
     331:	0a 00                                               ..

00000333 <__c.3719>:
     333:	74 61 73 6b 3a 20 25 64 0a 00                       task: %d..

0000033d <__c.3717>:
     33d:	69 32 63 5f 74 61 73 6b 2e 65 72 72 6f 72 3a 20     i2c_task.error: 
     34d:	25 64 0a 00                                         %d..

00000351 <__c.3715>:
     351:	69 32 63 5f 74 61 73 6b 2e 64 6f 6e 65 3a 20 25     i2c_task.done: %
     361:	64 0a 00                                            d..

00000364 <__c.3710>:
     364:	0a 00                                               ..

00000366 <__c.3708>:
     366:	20 20 54 57 5f 4d 54 5f 44 41 54 41 5f 4e 41 43       TW_MT_DATA_NAC
     376:	4b 0a 00                                            K..

00000379 <__c.3706>:
     379:	20 20 54 57 5f 4d 54 5f 53 4c 41 5f 4e 41 43 4b       TW_MT_SLA_NACK
     389:	0a 00                                               ..

0000038b <__c.3704>:
     38b:	20 20 54 57 5f 4d 52 5f 53 4c 41 5f 4e 41 43 4b       TW_MR_SLA_NACK
     39b:	0a 00                                               ..

0000039d <__c.3702>:
     39d:	20 20 4f 50 5f 45 52 52 4f 52 0a 00                   OP_ERROR..

000003a9 <__c.3700>:
     3a9:	20 20 4f 50 5f 4c 45 4e 0a 00                         OP_LEN..

000003b3 <__c.3698>:
     3b3:	20 20 4f 50 5f 54 49 4d 45 4f 55 54 0a 00             OP_TIMEOUT..

000003c1 <__c.3696>:
     3c1:	20 20 25 73 0a 00                                     %s..

000003c7 <__c.3646>:
     3c7:	69 32 63 5f 74 69 6d 65 72 20 69 6e 69 74 20 66     i2c_timer init f
     3d7:	61 69 6c 65 64 0a 00                                ailed..

000003de <__c.3640>:
     3de:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     3ee:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

000003fa <__c.3597>:
     3fa:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     40a:	3d 3d 20 30 0a 00                                   == 0..

00000410 <__c.3595>:
     410:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     420:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

00000429 <__c.3593>:
     429:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     439:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

00000441 <__c.3643>:
     441:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     451:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

0000045f <__c.3633>:
     45f:	72 74 63 5f 72 75 6e 20 77 72 69 74 65 20 65 72     rtc_run write er
     46f:	72 6f 72 0a 00                                      ror..

00000474 <__c.3631>:
     474:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     484:	6f 72 0a 00                                         or..

00000488 <__c.3625>:
     488:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000498 <__c.3619>:
     498:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000004a9 <__c.3611>:
     4a9:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 64 61 74     i2c_rtc_read dat
     4b9:	61 20 65 72 72 6f 72 0a 00                          a error..

000004c2 <__c.3609>:
     4c2:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 61 64 64     i2c_rtc_read add
     4d2:	72 65 73 73 20 65 72 72 6f 72 0a 00                 ress error..

000004de <__c.3601>:
     4de:	69 32 63 5f 72 74 63 5f 77 72 69 74 65 20 64 61     i2c_rtc_write da
     4ee:	74 61 20 65 72 72 6f 72 0a 00                       ta error..

000004f8 <__c.3629>:
     4f8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     508:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     518:	74 20 25 64 0a 00                                   t %d..

0000051e <__c.3586>:
     51e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     52e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000053e <__c.3665>:
     53e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000054e <__c.3663>:
     54e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000055f <__c.3661>:
     55f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     56f:	66 61 69 6c 65 64 0a 00                             failed..

00000577 <__c.3659>:
     577:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000583 <__c.3657>:
     583:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     593:	64 0a 00                                            d..

00000596 <__c.3655>:
     596:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     5a6:	65 64 0a 00                                         ed..

000005aa <__c.3635>:
     5aa:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000005b5 <__c.3633>:
     5b5:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005c3 <__c.3619>:
     5c3:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005cd <__c.3599>:
     5cd:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5dd:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005ea <__c.3874>:
     5ea:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005fb <__c.3872>:
     5fb:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     60b:	0a 00                                               ..

0000060d <__c.3870>:
     60d:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000061e <__c.3868>:
     61e:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000062f <__c.3866>:
     62f:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     63f:	0a 00                                               ..

00000641 <__c.3859>:
     641:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     651:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     661:	6d 65 0a 00                                         me..

00000665 <__c.3857>:
     665:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     675:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000067f <__c.3855>:
     67f:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     68f:	61 69 6c 65 64 0a 00                                ailed..

00000696 <__c.3853>:
     696:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     6a6:	6e 69 74 0a 00                                      nit..

000006ab <__c.3851>:
     6ab:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6bb:	0a 00                                               ..

000006bd <__c.3805>:
     6bd:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6cd:	61 69 6c 65 64 0a 00                                ailed..

000006d4 <__c.3803>:
     6d4:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006e5 <__c.3801>:
     6e5:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6f5:	0a 00                                               ..

000006f7 <__c.3799>:
     6f7:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

00000708 <__c.3797>:
     708:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

00000719 <__c.3795>:
     719:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     729:	0a 00                                               ..

0000072b <__c.3774>:
     72b:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     73b:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000074c <__c.3649>:
     74c:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     75c:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

00000769 <__c.3617>:
     769:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

00000779 <__c.3650>:
     779:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

00000787 <__c.3648>:
     787:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     797:	25 6c 64 0a 00                                      %ld..

0000079c <__c.3646>:
     79c:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ac:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000007ba <__c.3643>:
     7ba:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000007cb <__c.3641>:
     7cb:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000007d7 <__c.3639>:
     7d7:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     7e7:	64 0a 00                                            d..

000007ea <__c.3637>:
     7ea:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     7fa:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

0000080a <__c.3635>:
     80a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000081a <__c.3622>:
     81a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000827 <__c.3594>:
     827:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     837:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000843 <__c.3666>:
     843:	0a 00                                               ..

00000845 <__c.3664>:
     845:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     855:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     865:	73 00                                               s.

00000867 <__c.3662>:
     867:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     877:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000882 <__c.3656>:
     882:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     892:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8a2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8b2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8c2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008cf <__c.3654>:
     8cf:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     8df:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     8ef:	30 34 58 0a 00                                      04X..

000008f4 <__c.3652>:
     8f4:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     904:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000912 <__c.3650>:
     912:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     922:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000931 <__c.3648>:
     931:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     941:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000950 <__c.3646>:
     950:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     960:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

0000096f <__c.3644>:
     96f:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     97f:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

0000098e <__c.3642>:
     98e:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     99e:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009ad <__c.3640>:
     9ad:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     9bd:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009cb <__c.3638>:
     9cb:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     9db:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009e9 <__c.3636>:
     9e9:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     9f9:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a08 <__c.3634>:
     a08:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a18:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a26 <__c.3632>:
     a26:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a37 <__c.3596>:
     a37:	72 63 3d 25 75 0a 00                                rc=%u..

00000a3e <__c.3632>:
     a3e:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a4e:	72 65 65 0a 00                                      ree..

00000a53 <__c.3630>:
     a53:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     a63:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a73:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000a7c <__c.3626>:
     a7c:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000a8a <__c.3613>:
     a8a:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a9a:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000aaa <__c.3611>:
     aaa:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000ab8 <__c.3609>:
     ab8:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     ac8:	73 74 0a 00                                         st..

00000acc <__c.3607>:
     acc:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000adc <__c.3605>:
     adc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aec:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000afc <__c.3589>:
     afc:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b0c:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b1c:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b2c:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b3c:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b4c:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b5c:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     b6c:	61 74 75 73 0a 0a 00                                atus...

00000b73 <__c.3587>:
     b73:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000b7f <__c.3919>:
     b7f:	25 73 0a 00                                         %s..

00000b83 <__c.3917>:
     b83:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000b8b <__c.3672>:
     b8b:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000b97 <__c.3601>:
     b97:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     ba7:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000baf <__c.3594>:
     baf:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     bbf:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bc7 <__c.3761>:
     bc7:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000bd2 <__c.3757>:
     bd2:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     be2:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     bf2:	68 0a 00                                            h..

00000bf5 <__c.3754>:
     bf5:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000c05 <__c.3749>:
     c05:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     c15:	5b 25 73 5d 0a 00                                   [%s]..

00000c1b <__c.3747>:
     c1b:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000c29 <__c.3745>:
     c29:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     c39:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000c4a <__c.3732>:
     c4a:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c5a:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c64 <__c.3727>:
     c64:	25 73 0a 00                                         %s..

00000c68 <__c.3725>:
     c68:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     c78:	0a 00                                               ..

00000c7a <__c.3713>:
     c7a:	0d 00                                               ..

00000c7c <__c.3711>:
     c7c:	4d 6f 72 65 2e 2e 00                                More...

00000c83 <__c.3701>:
     c83:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     c93:	2e 0a 00                                            ...

00000c96 <__c.3697>:
     c96:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000ca5 <__c.3694>:
     ca5:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000cb2 <__c.3692>:
     cb2:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000cbf <__c.3690>:
     cbf:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000ccf <__c.3688>:
     ccf:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000cdc <__c.3686>:
     cdc:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cec <__c.3684>:
     cec:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000cf8 <__c.3673>:
     cf8:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000d03 <__c.3671>:
     d03:	0a 00                                               ..

00000d05 <__c.3666>:
     d05:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d15 <__c.3656>:
     d15:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d26 <__c.3654>:
     d26:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d34 <__c.3652>:
     d34:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000d45 <__c.3650>:
     d45:	25 73 0a 00                                         %s..

00000d49 <__c.3647>:
     d49:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d5a <__c.3640>:
     d5a:	6c 73 3a 20 6e 75 6c 6c 20 61 72 67 75 6d 65 6e     ls: null argumen
     d6a:	74 20 23 20 25 64 0a 00                             t # %d..

00000d72 <__c.3636>:
     d72:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000d83 <__c.3620>:
     d83:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     d93:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     da3:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     db3:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     dc3:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     dd3:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     de3:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     df3:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     e03:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     e13:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     e23:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     e33:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     e43:	6e 65 77 0a 0a 00                                   new...

00000e49 <__c.3618>:
     e49:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000e55 <__c.3809>:
     e55:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000e63 <__c.3803>:
     e63:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000e70 <__c.3796>:
     e70:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000e7e <__c.3787>:
     e7e:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000e8b <__c.3778>:
     e8b:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000e9c <__c.3764>:
     e9c:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     eac:	5d 0a 00                                            ]..

00000eaf <__c.3746>:
     eaf:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     ebf:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000ecc <__c.4408>:
     ecc:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     edc:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     eec:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000ef4 <__c.4400>:
     ef4:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f04:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f0e <__c.4395>:
     f0e:	3c 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     <gpib_write_str 
     f1e:	74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67 20     timeout waiting 
     f2e:	66 6f 72 20 41 54 4e 20 3d 20 31 3e 0a 00           for ATN = 1>..

00000f3c <__c.4393>:
     f3c:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f4c:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f56 <__c.4383>:
     f56:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f66:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     f76:	28 25 64 29 5d 0a 00                                (%d)]..

00000f7d <__c.4379>:
     f7d:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     f8d:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     f9d:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000faa <__c.4376>:
     faa:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     fba:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000fc3 <__c.4360>:
     fc3:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000fce <__c.4358>:
     fce:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00000fd9 <__c.4356>:
     fd9:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00000fe4 <__c.4352>:
     fe4:	20 20 20 20 20 00                                        .

00000fea <__c.4350>:
     fea:	25 30 32 58 20 25 63 20 00                          %02X %c .

00000ff3 <__c.4324>:
     ff3:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    1003:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

00001011 <__c.4321>:
    1011:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    1021:	73 74 61 74 65 3d 25 64 0a 00                       state=%d..

0000102b <__c.4306>:
    102b:	3c 47 50 49 42 20 54 58 20 54 49 4d 45 4f 55 54     <GPIB TX TIMEOUT
    103b:	3e 0a 00                                            >..

0000103e <__c.4301>:
    103e:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    104e:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    105e:	20 66 6f 72 20 4e 44 41 43 3d 3d 31 3e 0a 00         for NDAC==1>..

0000106d <__c.4297>:
    106d:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    107d:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    108d:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    109d:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010a9 <__c.4293>:
    10a9:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    10b9:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10c9:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10d9:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010e5 <__c.4291>:
    10e5:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    10f5:	20 41 54 4e 20 3d 20 30 20 77 68 69 6c 65 20 77      ATN = 0 while w
    1105:	61 69 74 69 6e 67 20 66 6f 72 20 4e 52 46 44 20     aiting for NRFD 
    1115:	4c 4f 57 20 73 74 61 74 65 20 3d 25 64 0a 00        LOW state =%d..

00001124 <__c.4286>:
    1124:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1134:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

00001143 <__c.4283>:
    1143:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1153:	20 4b 45 59 20 73 74 61 74 65 3d 25 64 0a 00         KEY state=%d..

00001162 <__c.4268>:
    1162:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    1172:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    1182:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

00001190 <__c.4250>:
    1190:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    11a0:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011ab <__c.4248>:
    11ab:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    11bb:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    11cb:	72 61 6e 67 65 0a 00                                range..

000011d2 <__c.4243>:
    11d2:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    11e2:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011ed <__c.4241>:
    11ed:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    11fd:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    120d:	61 6e 67 65 0a 00                                   ange..

00001213 <__c.4236>:
    1213:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    1223:	5d 0a 00                                            ]..

00001226 <__c.4223>:
    1226:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

00001237 <__c.4400>:
    1237:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

00001248 <__c.4395>:
    1248:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    1258:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    1268:	32 58 48 5d 0a 00                                   2XH]..

0000126e <__c.4393>:
    126e:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    127e:	0a 00                                               ..

00001280 <__c.4391>:
    1280:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001291 <__c.4386>:
    1291:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

0000129d <__c.4384>:
    129d:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

000012ad <__c.4382>:
    12ad:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    12bd:	52 5d 0a 00                                         R]..

000012c1 <__c.4380>:
    12c1:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    12d1:	0a 00                                               ..

000012d3 <__c.4378>:
    12d3:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

000012e4 <__c.4376>:
    12e4:	5b 55 4e 54 5d 0a 00                                [UNT]..

000012eb <__c.4371>:
    12eb:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012f7 <__c.4369>:
    12f7:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    1307:	52 5d 0a 00                                         R]..

0000130b <__c.4367>:
    130b:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

0000131c <__c.4365>:
    131c:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    132c:	0a 00                                               ..

0000132e <__c.4363>:
    132e:	0a 00                                               ..

00001330 <__c.4361>:
    1330:	5b 55 4e 4c 5d 0a 00                                [UNL]..

00001337 <__c.4356>:
    1337:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    1347:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

00001358 <__c.4354>:
    1358:	5b 44 43 4c 5d 0a 00                                [DCL]..

0000135f <__c.4352>:
    135f:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

0000136c <__c.4350>:
    136c:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

00001378 <__c.4348>:
    1378:	5b 53 44 43 5d 0a 00                                [SDC]..

0000137f <__c.4346>:
    137f:	5b 53 50 44 5d 0a 00                                [SPD]..

00001386 <__c.4344>:
    1386:	5b 53 50 45 5d 0a 00                                [SPE]..

0000138d <__c.4342>:
    138d:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    139d:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013a5 <__c.4340>:
    13a5:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    13b5:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013bd <__c.4335>:
    13bd:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13cd:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

000013d7 <__c.4333>:
    13d7:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13e7:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

000013f8 <__c.4306>:
    13f8:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

00001409 <__c.4304>:
    1409:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

00001416 <__c.4302>:
    1416:	3c 42 55 53 3e 0a 00                                <BUS>..

0000141d <__c.4300>:
    141d:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

00001428 <__c.4298>:
    1428:	3c 49 46 43 3e 0a 00                                <IFC>..

0000142f <__c.4293>:
    142f:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    143f:	0a 00                                               ..

00001441 <__c.4291>:
    1441:	44 6f 6e 65 0a 00                                   Done..

00001447 <__c.4287>:
    1447:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00001453 <__c.4285>:
    1453:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1463:	20 65 78 69 74 0a 00                                 exit..

0000146a <__c.4283>:
    146a:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    147a:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    148a:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001495 <__c.4281>:
    1495:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    14a5:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

000014af <__c.4235>:
    14af:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    14bf:	6f 74 65 63 74 65 64 0a 00                          otected..

000014c8 <__c.4233>:
    14c8:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

000014d9 <__c.4231>:
    14d9:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    14e9:	0a 00                                               ..

000014eb <__c.4426>:
    14eb:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

000014f8 <__c.4418>:
    14f8:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    1508:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    1518:	69 62 20 61 64 64 72 65 73 73 65 73 0a 20 20 20     ib addresses.   
    1528:	44 69 73 70 6c 61 79 20 61 6c 6c 20 64 65 76 69     Display all devi
    1538:	63 65 20 47 50 49 42 20 62 75 73 20 61 64 64 72     ce GPIB bus addr
    1548:	65 73 73 65 73 20 61 6e 64 20 50 50 52 20 76 61     esses and PPR va
    1558:	6c 75 65 73 0a 67 70 69 62 20 63 6f 6e 66 69 67     lues.gpib config
    1568:	20 5b 2d 76 5d 0a 20 20 20 44 69 73 70 6c 61 79      [-v].   Display
    1578:	20 63 75 72 72 65 6e 74 20 64 72 69 76 65 73 20      current drives 
    1588:	63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 0a 20 20     configuration.  
    1598:	20 2d 76 20 56 65 72 62 6f 73 65 20 2d 20 73 68      -v Verbose - sh
    15a8:	6f 77 20 66 75 6c 6c 20 64 65 74 61 69 6c 0a 67     ow full detail.g
    15b8:	70 69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64     pib debug N.   d
    15c8:	65 62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70     ebug message rep
    15d8:	6f 72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73     orting see hpdis
    15e8:	6b 2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c     k.cfg for detail
    15f8:	73 0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67     s.gpib elapsed.g
    1608:	70 69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65     pib elapsed_rese
    1618:	74 0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20     t.gpib ifc.gpib 
    1628:	70 6c 6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78     plot filename.tx
    1638:	74 0a 67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f     t.gpib plot_echo
    1648:	0a 67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20     .gpib task.gpib 
    1658:	74 72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74     trace filename.t
    1668:	78 74 20 5b 42 55 53 5d 0a 20 20 20 44 69 73 70     xt [BUS].   Disp
    1678:	6c 61 79 20 61 63 74 69 76 69 74 79 20 6f 66 20     lay activity of 
    1688:	47 50 49 42 20 62 75 73 20 61 6e 64 20 6c 6f 67     GPIB bus and log
    1698:	20 69 74 0a 20 20 20 42 55 53 20 2d 20 69 6e 63      it.   BUS - inc
    16a8:	6c 75 64 65 20 68 61 6e 64 73 68 61 6b 65 20 73     lude handshake s
    16b8:	74 61 74 65 73 0a 0a 0a 00                          tates....

000016c1 <__c.4416>:
    16c1:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

000016cc <__c.4837>:
    16cc:	0a 00                                               ..

000016ce <__c.4832>:
    16ce:	25 2d 31 36 73 20 20 20 20 20 20 20 25 32 64 0a     %-16s       %2d.
	...

000016df <__c.4830>:
    16df:	25 2d 31 36 73 20 41 4d 49 47 4f 20 25 32 64 20     %-16s AMIGO %2d 
    16ef:	25 73 0a 00                                         %s..

000016f3 <__c.4828>:
    16f3:	25 2d 31 36 73 20 53 53 38 30 20 20 25 32 64 20     %-16s SS80  %2d 
    1703:	25 73 0a 00                                         %s..

00001707 <__c.4816>:
    1707:	61 72 67 76 5b 25 64 5d 20 3d 20 25 73 0a 00        argv[%d] = %s..

00001716 <__c.4806>:
    1716:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

0000171e <__c.4804>:
    171e:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    172e:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001738 <__c.4802>:
    1738:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1748:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1758:	0a 00                                               ..

0000175a <__c.4800>:
    175a:	53 53 38 30 2d 25 64 00                             SS80-%d.

00001762 <__c.4798>:
    1762:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1772:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

0000177c <__c.4796>:
    177c:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    178c:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    179c:	0a 00                                               ..

0000179e <__c.4779>:
    179e:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    17ae:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    17be:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    17ce:	6f 20 32 35 36 0a 00                                o 256..

000017d5 <__c.4777>:
    17d5:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    17e5:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    17f5:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1805:	20 32 35 36 0a 00                                    256..

0000180b <__c.4764>:
    180b:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    181b:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

0000182a <__c.4728>:
    182a:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    183a:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    184a:	0a 00                                               ..

0000184c <__c.4720>:
    184c:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    185c:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    186c:	6c 6c 0a 00                                         ll..

00001870 <__c.4707>:
    1870:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1880:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1890:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

0000189b <__c.4705>:
    189b:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    18ab:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    18bb:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    18cb:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

000018d3 <__c.4703>:
    18d3:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    18e3:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    18f3:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1903:	3a 25 73 0a 00                                      :%s..

00001908 <__c.4701>:
    1908:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1918:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1928:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1938:	55 4c 4c 0a 00                                      ULL..

0000193d <__c.4699>:
    193d:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    194d:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    195d:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    196d:	66 20 72 61 6e 67 65 0a 00                          f range..

00001976 <__c.4697>:
    1976:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1986:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1996:	6e 67 65 0a 00                                      nge..

0000199b <__c.4658>:
    199b:	0a 00                                               ..

0000199d <__c.4653>:
    199d:	0a 00                                               ..

0000199f <__c.4651>:
    199f:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    19af:	6c 64 0a 00                                         ld..

000019b3 <__c.4649>:
    19b3:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    19c3:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

000019d2 <__c.4647>:
    19d2:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

000019dc <__c.4645>:
    19dc:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    19ec:	6c 64 0a 00                                         ld..

000019f0 <__c.4643>:
    19f0:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1a00:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001a0f <__c.4641>:
    1a0f:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001a18 <__c.4638>:
    1a18:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1a28:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001a38 <__c.4629>:
    1a38:	0a 00                                               ..

00001a3a <__c.4624>:
    1a3a:	0a 00                                               ..

00001a3c <__c.4622>:
    1a3c:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00001a45 <__c.4620>:
    1a45:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001a4f <__c.4618>:
    1a4f:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001a58 <__c.4615>:
    1a58:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    1a68:	0a 00                                               ..

00001a6a <__c.4609>:
    1a6a:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1a7a:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1a8a:	2a 2a 2a 2a 2a 0a 00                                *****..

00001a91 <__c.4607>:
    1a91:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1aa1:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001aae <__c.4605>:
    1aae:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1abe:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1ace:	0a 00                                               ..

00001ad0 <__c.4601>:
    1ad0:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1ae0:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1af0:	0a 00                                               ..

00001af2 <__c.4598>:
    1af2:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b02:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1b12:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001b22 <__c.4589>:
    1b22:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b32:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1b42:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001b51 <__c.4586>:
    1b51:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1b61:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1b71:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001b81 <__c.4577>:
    1b81:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b91:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1ba1:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001baf <__c.4569>:
    1baf:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bbf:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1bcf:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001bdd <__c.4559>:
    1bdd:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bed:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1bfd:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001c09 <__c.4542>:
    1c09:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c19:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1c29:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1c39:	0a 00                                               ..

00001c3b <__c.4534>:
    1c3b:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c4b:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1c5b:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001c69 <__c.4531>:
    1c69:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c79:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1c89:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001c97 <__c.4523>:
    1c97:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1ca7:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1cb7:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001cc4 <__c.4513>:
    1cc4:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1cd4:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1ce4:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001cf5 <__c.4510>:
    1cf5:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1d05:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1d15:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001d1f <__c.4506>:
    1d1f:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1d2f:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1d3f:	0a 00                                               ..

00001d41 <__c.4495>:
    1d41:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1d51:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1d61:	0a 00                                               ..

00001d63 <__c.4492>:
    1d63:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1d73:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001d81 <__c.4490>:
    1d81:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001d8e <__c.4471>:
    1d8e:	25 73 0a 00                                         %s..

00001d92 <__c.4461>:
    1d92:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

00001d9e <__c.4450>:
    1d9e:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    1dae:	6c 64 29 0a 00                                      ld)..

00001db3 <__c.3643>:
    1db3:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001dc4 <__c.3641>:
    1dc4:	25 73 20 25 73 0a 00                                %s %s..

00001dcb <__c.3637>:
    1dcb:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    1ddb:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00001de8 <__c.4543>:
    1de8:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1df8:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1e08:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1e18:	48 5d 0a 00                                         H]..

00001e1c <__c.4541>:
    1e1c:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1e2c:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1e3c:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1e4c:	48 5d 0a 00                                         H]..

00001e50 <__c.4539>:
    1e50:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1e60:	74 5d 0a 00                                         t]..

00001e64 <__c.4537>:
    1e64:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001e73 <__c.4535>:
    1e73:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    1e83:	74 65 5d 0a 00                                      te]..

00001e88 <__c.4533>:
    1e88:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    1e98:	61 74 65 5d 0a 00                                   ate]..

00001e9e <__c.4531>:
    1e9e:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    1eae:	61 74 65 5d 0a 00                                   ate]..

00001eb4 <__c.4526>:
    1eb4:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    1ec4:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    1ed4:	5d 0a 00                                            ]..

00001ed7 <__c.4512>:
    1ed7:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001ee6 <__c.4510>:
    1ee6:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1ef6:	5d 0a 00                                            ]..

00001ef9 <__c.4503>:
    1ef9:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00001f05 <__c.4489>:
    1f05:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    1f15:	5d 0a 00                                            ]..

00001f18 <__c.4487>:
    1f18:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    1f28:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00001f32 <__c.4480>:
    1f32:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    1f42:	48 5d 0a 00                                         H]..

00001f46 <__c.4478>:
    1f46:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    1f56:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

00001f66 <__c.4473>:
    1f66:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1f76:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    1f86:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    1f96:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00001fa2 <__c.4470>:
    1fa2:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1fb2:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001fc2 <__c.4468>:
    1fc2:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    1fd2:	29 5d 0a 00                                         )]..

00001fd6 <__c.4466>:
    1fd6:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    1fe6:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    1ff6:	28 25 64 29 5d 0a 00                                (%d)]..

00001ffd <__c.4464>:
    1ffd:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    200d:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

0000201b <__c.4462>:
    201b:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    202b:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00002038 <__c.4459>:
    2038:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    2048:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    2058:	44 4f 5d 0a 00                                      DO]..

0000205d <__c.4456>:
    205d:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    206d:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002076 <__c.4454>:
    2076:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    2086:	5d 0a 00                                            ]..

00002089 <__c.4445>:
    2089:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    2099:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    20a9:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    20b9:	43 6f 64 65 73 5d 0a 00                             Codes]..

000020c1 <__c.4442>:
    20c1:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    20d1:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

000020e1 <__c.4440>:
    20e1:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    20f1:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    2101:	5d 0a 00                                            ]..

00002104 <__c.4438>:
    2104:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    2114:	61 74 75 73 5d 0a 00                                atus]..

0000211b <__c.4436>:
    211b:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    212b:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00002134 <__c.4434>:
    2134:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    2144:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

0000214f <__c.4432>:
    214f:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    215f:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

0000216e <__c.4430>:
    216e:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    217e:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

0000218c <__c.4428>:
    218c:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

0000219d <__c.4426>:
    219d:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    21ad:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

000021b9 <__c.4424>:
    21b9:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    21c9:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

000021d6 <__c.4422>:
    21d6:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    21e6:	2d 4f 50 5d 0a 00                                   -OP]..

000021ec <__c.4420>:
    21ec:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    21fc:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

0000220d <__c.4418>:
    220d:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    221d:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    222d:	44 4f 5d 0a 00                                      DO]..

00002232 <__c.4416>:
    2232:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    2242:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

0000224c <__c.4414>:
    224c:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    225c:	2d 4f 50 5d 0a 00                                   -OP]..

00002262 <__c.4412>:
    2262:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

00002270 <__c.4410>:
    2270:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    2280:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

0000228c <__c.4408>:
    228c:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    229c:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

000022a9 <__c.4406>:
    22a9:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    22b9:	20 57 72 69 74 65 5d 0a 00                           Write]..

000022c2 <__c.4403>:
    22c2:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    22d2:	20 52 65 61 64 5d 0a 00                              Read]..

000022da <__c.4401>:
    22da:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    22ea:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

000022f3 <__c.4398>:
    22f3:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    2303:	25 64 29 5d 0a 00                                   %d)]..

00002309 <__c.4396>:
    2309:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2319:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002322 <__c.4394>:
    2322:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2332:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    2342:	52 4f 52 5d 0a 00                                   ROR]..

00002348 <__c.4385>:
    2348:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    2358:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

00002362 <__c.4380>:
    2362:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    2372:	76 61 6c 69 64 5d 0a 00                             valid]..

0000237a <__c.4375>:
    237a:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    238a:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

00002399 <__c.4373>:
    2399:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    23a9:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

000023b6 <__c.4371>:
    23b6:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    23c6:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    23d6:	5d 0a 00                                            ]..

000023d9 <__c.4369>:
    23d9:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000023ea <__c.4361>:
    23ea:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    23fa:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

00002405 <__c.4359>:
    2405:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2415:	73 5d 0a 00                                         s]..

00002419 <__c.4349>:
    2419:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

00002424 <__c.4347>:
    2424:	25 73 3a 0a 00                                      %s:..

00002429 <__c.4322>:
    2429:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2439:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    2449:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

00002454 <__c.4320>:
    2454:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2464:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    2474:	49 4e 49 53 48 5d 0a 00                             INISH]..

0000247c <__c.4316>:
    247c:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    248c:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    249c:	58 48 29 5d 0a 00                                   XH)]..

000024a2 <__c.4314>:
    24a2:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    24b2:	72 5d 0a 00                                         r]..

000024b6 <__c.4310>:
    24b6:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    24c6:	5d 0a 00                                            ]..

000024c9 <__c.4308>:
    24c9:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    24d9:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    24e9:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

000024f2 <__c.4296>:
    24f2:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2502:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    2512:	62 79 74 65 73 5d 0a 00                             bytes]..

0000251a <__c.4294>:
    251a:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    252a:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    253a:	53 48 5d 0a 00                                      SH]..

0000253f <__c.4289>:
    253f:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    254f:	20 45 72 72 6f 72 5d 0a 00                           Error]..

00002558 <__c.4287>:
    2558:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2568:	45 72 72 6f 72 5d 0a 00                             Error]..

00002570 <__c.4285>:
    2570:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2580:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

0000258e <__c.4283>:
    258e:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    259e:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    25ae:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

000025b6 <__c.4266>:
    25b6:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    25c6:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

000025d2 <__c.4250>:
    25d2:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    25e2:	5d 0a 00                                            ]..

000025e5 <__c.4366>:
    25e5:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    25f5:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    2605:	64 64 72 65 73 73 5d 0a 00                          ddress]..

0000260e <__c.4363>:
    260e:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    261e:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    262e:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

00002639 <__c.4360>:
    2639:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2649:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    2659:	66 66 65 72 65 64 5d 0a 00                          ffered]..

00002662 <__c.4355>:
    2662:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2672:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

00002682 <__c.4352>:
    2682:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    2692:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

0000269e <__c.4349>:
    269e:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    26ae:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    26be:	0a 00                                               ..

000026c0 <__c.4346>:
    26c0:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    26d0:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

000026df <__c.4343>:
    26df:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    26ef:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

00002700 <__c.4340>:
    2700:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2710:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002720 <__c.4336>:
    2720:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    2730:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2740:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2750:	0a 00                                               ..

00002752 <__c.4331>:
    2752:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002762 <__c.4328>:
    2762:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2772:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002781 <__c.4326>:
    2781:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2791:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    27a1:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

000027ac <__c.4324>:
    27ac:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    27bc:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

000027cc <__c.4322>:
    27cc:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    27dc:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    27ec:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000027f5 <__c.4320>:
    27f5:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2805:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002811 <__c.4318>:
    2811:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2821:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2831:	0a 00                                               ..

00002833 <__c.4316>:
    2833:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002843 <__c.4313>:
    2843:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2853:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002864 <__c.4311>:
    2864:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2874:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2884:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

0000288d <__c.4309>:
    288d:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    289d:	36 5d 0a 00                                         6]..

000028a1 <__c.4306>:
    28a1:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    28b1:	35 5d 0a 00                                         5]..

000028b5 <__c.4303>:
    28b5:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    28c5:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

000028d5 <__c.4300>:
    28d5:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    28e5:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    28f5:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002904 <__c.4298>:
    2904:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2914:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002925 <__c.4296>:
    2925:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2935:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002946 <__c.4294>:
    2946:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2956:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2966:	0a 00                                               ..

00002968 <__c.4292>:
    2968:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2978:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2988:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2998:	0a 00                                               ..

0000299a <__c.4280>:
    299a:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    29aa:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    29ba:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    29ca:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    29da:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

000029eb <__c.4278>:
    29eb:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    29fb:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a0b:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2a1b:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2a2b:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002a3b <__c.4276>:
    2a3b:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2a4b:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a5b:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2a6b:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2a7b:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002a8b <__c.4274>:
    2a8b:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2a9b:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2aab:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2abb:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2acb:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002adb <__c.4269>:
    2adb:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2aeb:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2afb:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2b0b:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2b1b:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2b2b:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2b3b:	58 48 5d 0a 00                                      XH]..

00002b40 <__c.4267>:
    2b40:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2b50:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2b60:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2b70:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2b80:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2b90:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2ba0:	30 32 58 48 5d 0a 00                                02XH]..

00002ba7 <__c.4265>:
    2ba7:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2bb7:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2bc7:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2bd7:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2be7:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2bf7:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2c07:	30 32 58 48 5d 0a 00                                02XH]..

00002c0e <__c.4263>:
    2c0e:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2c1e:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2c2e:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2c3e:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2c4e:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2c5e:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2c6e:	30 32 58 48 5d 0a 00                                02XH]..

00002c75 <__c.4256>:
    2c75:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002c84 <__c.4243>:
    2c84:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002c91 <__c.4241>:
    2c91:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2ca1:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002cab <__c.4234>:
    2cab:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 64 69 73     [AMIGO Write dis
    2cbb:	6b 20 77 72 69 74 65 20 65 72 72 6f 72 5d 0a 00     k write error]..

00002ccb <__c.4232>:
    2ccb:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2cdb:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002cea <__c.4230>:
    2cea:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2cfa:	0a 00                                               ..

00002cfc <__c.4223>:
    2cfc:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2d0c:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002d16 <__c.4217>:
    2d16:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2d26:	0a 00                                               ..

00002d28 <__c.4211>:
    2d28:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2d38:	6e 65 5d 0a 00                                      ne]..

00002d3d <__c.4207>:
    2d3d:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002d4d <__c.4166>:
    2d4d:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2d5d:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2d6d:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002d78 <__c.4196>:
    2d78:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2d88:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2d98:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002da0 <__c.4173>:
    2da0:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2db0:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002db9 <__c.4159>:
    2db9:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2dc9:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002dd3 <__c.4157>:
    2dd3:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2de3:	75 73 5d 0a 00                                      us]..

00002de8 <__c.4151>:
    2de8:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2df8:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002e02 <__c.4149>:
    2e02:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2e12:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002e20 <__c.4143>:
    2e20:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2e30:	74 61 74 75 73 5d 0a 00                             tatus]..

00002e38 <__c.4128>:
    2e38:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    2e48:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00002e52 <__c.4126>:
    2e52:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2e62:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00002e6e <__c.4121>:
    2e6e:	25 30 38 6c 64 0d 00                                %08ld..

00002e75 <__c.4115>:
    2e75:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2e85:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002e96 <__c.4109>:
    2e96:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00002ea4 <__c.4107>:
    2ea4:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    2eb4:	69 74 65 0a 00                                      ite..

00002eb9 <__c.4101>:
    2eb9:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00002ec5 <__c.4099>:
    2ec5:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    2ed5:	6f 3a 25 73 0a 00                                   o:%s..

00002edb <__c.4097>:
    2edb:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    2eeb:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    2efb:	74 00                                               t.

00002efd <__c.4553>:
    2efd:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    2f0d:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

00002f1d <__c.4551>:
    2f1d:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f2d:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00002f3d <__c.4549>:
    2f3d:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f4d:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    2f5d:	30 0a 00                                            0..

00002f60 <__c.4547>:
    2f60:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f70:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    2f80:	70 74 79 0a 00                                      pty..

00002f85 <__c.4545>:
    2f85:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f95:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    2fa5:	73 20 65 6d 70 74 79 0a 00                          s empty..

00002fae <__c.4532>:
    2fae:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    2fbe:	20 25 31 30 73 0a 00                                 %10s..

00002fc5 <__c.4530>:
    2fc5:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    2fd5:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    2fe5:	74 20 66 6f 75 6e 64 0a 00                          t found..

00002fee <__c.4528>:
    2fee:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2ffe:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    300e:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    301e:	74 65 72 73 0a 00                                   ters..

00003024 <__c.4526>:
    3024:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3034:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    3044:	65 6d 70 74 79 0a 00                                empty..

0000304b <__c.4524>:
    304b:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    305b:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    306b:	65 6d 70 74 79 0a 00                                empty..

00003072 <__c.4522>:
    3072:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3082:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    3092:	20 65 6d 70 74 79 0a 00                              empty..

0000309a <__c.4513>:
    309a:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

000030a9 <__c.4511>:
    30a9:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    30b9:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    30c9:	20 66 6f 75 6e 64 0a 00                              found..

000030d1 <__c.4509>:
    30d1:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    30e1:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

000030f0 <__c.4507>:
    30f0:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3100:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

00003110 <__c.4505>:
    3110:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3120:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    3130:	70 74 79 0a 00                                      pty..

00003135 <__c.4497>:
    3135:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003143 <__c.4492>:
    3143:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003151 <__c.4490>:
    3151:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3161:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3171:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003181 <__c.4488>:
    3181:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3191:	73 0a 00                                            s..

00003194 <__c.4486>:
    3194:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    31a4:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    31b4:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000031c3 <__c.4484>:
    31c3:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    31d3:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

000031df <__c.4482>:
    31df:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    31ef:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

000031fa <__c.4480>:
    31fa:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    320a:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

0000321a <__c.4463>:
    321a:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003228 <__c.4458>:
    3228:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003236 <__c.4456>:
    3236:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3246:	73 0a 00                                            s..

00003249 <__c.4454>:
    3249:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3259:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003261 <__c.4437>:
    3261:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000326f <__c.4434>:
    326f:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    327f:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    328f:	20 65 72 72 6f 72 0a 00                              error..

00003297 <__c.4426>:
    3297:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000032a5 <__c.4424>:
    32a5:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    32b5:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    32c5:	20 65 72 72 6f 72 0a 00                              error..

000032cd <__c.4421>:
    32cd:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    32dd:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    32ed:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    32fd:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    330d:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    331d:	30 32 58 48 0a 00                                   02XH..

00003323 <__c.4419>:
    3323:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3333:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    3343:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    3353:	20 25 64 0a 00                                       %d..

00003358 <__c.4415>:
    3358:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003368 <__c.4413>:
    3368:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    3378:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    3388:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    3398:	30 78 45 30 31 33 0a 00                             0xE013..

000033a0 <__c.4411>:
    33a0:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    33b0:	6e 64 3a 25 73 0a 00                                nd:%s..

000033b7 <__c.4409>:
    33b7:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    33c7:	75 6e 64 3a 25 73 0a 00                             und:%s..

000033cf <__c.4385>:
    33cf:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000033dd <__c.4383>:
    33dd:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    33ed:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000033f6 <__c.4381>:
    33f6:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    3406:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000340f <__c.4379>:
    340f:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    341f:	20 20 25 34 64 0a 00                                  %4d..

00003426 <__c.4377>:
    3426:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3436:	20 20 20 25 73 0a 00                                   %s..

0000343d <__c.4375>:
    343d:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    344d:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    345d:	77 72 69 74 65 0a 00                                write..

00003464 <__c.4373>:
    3464:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3474:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3484:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003494 <__c.4371>:
    3494:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34a4:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    34b4:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000034c3 <__c.4369>:
    34c3:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    34d3:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    34e3:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

000034f3 <__c.4367>:
    34f3:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3503:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3513:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

00003522 <__c.4365>:
    3522:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3532:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    3542:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003550 <__c.4363>:
    3550:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3560:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    3570:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    3580:	79 0a 00                                            y..

00003583 <__c.4349>:
    3583:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003591 <__c.4347>:
    3591:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000359f <__c.4342>:
    359f:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000035ad <__c.4325>:
    35ad:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    35bd:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    35cd:	25 64 0a 00                                         %d..

000035d1 <__c.4308>:
    35d1:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    35e1:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    35f1:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    3601:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

0000360a <__c.4294>:
    360a:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    361a:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    362a:	62 69 67 0a 00                                      big..

0000362f <__c.4292>:
    362f:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    363f:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    364f:	63 74 65 72 73 0a 00                                cters..

00003656 <__c.4285>:
    3656:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    3666:	73 0a 00                                            s..

00003669 <__c.4283>:
    3669:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3679:	73 0a 00                                            s..

0000367c <__c.4281>:
    367c:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    368c:	73 0a 00                                            s..

0000368f <__c.4279>:
    368f:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

000036a0 <__c.4277>:
    36a0:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

000036ad <__c.4275>:
    36ad:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000036b9 <__c.4273>:
    36b9:	0a 00                                               ..

000036bb <__c.4270>:
    36bb:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    36cb:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    36db:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

000036eb <__c.4268>:
    36eb:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    36fb:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    370b:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    371b:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    372b:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003737 <__c.4265>:
    3737:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3747:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3757:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3767:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003777 <__c.4263>:
    3777:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3787:	3a 5b 25 73 5d 0a 00                                :[%s]..

0000378e <__c.4253>:
    378e:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    379e:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    37ae:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    37be:	64 0a 00                                            d..

000037c1 <__c.4251>:
    37c1:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    37d1:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    37e1:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    37f1:	64 0a 00                                            d..

000037f4 <__c.4249>:
    37f4:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3804:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3814:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3824:	69 6c 65 64 0a 00                                   iled..

0000382a <__c.4247>:
    382a:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    383a:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    384a:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    385a:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003869 <__c.4234>:
    3869:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3879:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3889:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3899:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    38a9:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

000038ba <__c.4231>:
    38ba:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    38ca:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    38da:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

000038e3 <__c.4229>:
    38e3:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    38f3:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3903:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3913:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

0000391b <__c.4217>:
    391b:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    392b:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    393b:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    394b:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    395b:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003968 <__c.4192>:
    3968:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3978:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003988 <__c.4183>:
    3988:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3998:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    39a8:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    39b8:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

000039c2 <__c.4164>:
    39c2:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

000039cf <__c.4159>:
    39cf:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000039dc <__c.4154>:
    39dc:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000039e9 <__c.4146>:
    39e9:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000039f6 <__c.4144>:
    39f6:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3a06:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3a16:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3a26:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3a36:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3a46:	25 6c 64 0a 00                                      %ld..

00003a4b <__c.4128>:
    3a4b:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a5b:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3a6b:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003a77 <__c.4126>:
    3a77:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a87:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3a97:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003aa2 <__c.4124>:
    3aa2:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ab2:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3ac2:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3ad2:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3ae2:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003aed <__c.4122>:
    3aed:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3afd:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3b0d:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3b1d:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3b2d:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003b38 <__c.4120>:
    3b38:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b48:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3b58:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003b66 <__c.4118>:
    3b66:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b76:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3b86:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3b96:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003ba7 <__c.4116>:
    3ba7:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3bb7:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3bc7:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3bd7:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3be7:	58 68 0a 00                                         Xh..

00003beb <__c.4114>:
    3beb:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3bfb:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003c0c <__c.4108>:
    3c0c:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c1c:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3c2c:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003c38 <__c.4106>:
    3c38:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c48:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3c58:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003c67 <__c.4104>:
    3c67:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c77:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3c87:	25 6c 64 0a 00                                      %ld..

00003c8c <__c.4102>:
    3c8c:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c9c:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3cac:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3cbc:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003cc5 <__c.4100>:
    3cc5:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3cd5:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3ce5:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3cf5:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003cfe <__c.4098>:
    3cfe:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3d0e:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003d16 <__c.4096>:
    3d16:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d26:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3d36:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3d46:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003d4f <__c.4094>:
    3d4f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d5f:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003d6e <__c.4087>:
    3d6e:	0a 00                                               ..

00003d70 <__c.4085>:
    3d70:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3d80:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003d8a <__c.4083>:
    3d8a:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    3d9a:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00003da6 <__c.4081>:
    3da6:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    3db6:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003dc3 <__c.4079>:
    3dc3:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    3dd3:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003de0 <__c.4077>:
    3de0:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    3df0:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003dfd <__c.4075>:
    3dfd:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    3e0d:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00003e19 <__c.4073>:
    3e19:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    3e29:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e35 <__c.4071>:
    3e35:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    3e45:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e4f <__c.4069>:
    3e4f:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    3e5f:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e69 <__c.4067>:
    3e69:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    3e79:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e85 <__c.4065>:
    3e85:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    3e95:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003ea1 <__c.4063>:
    3ea1:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    3eb1:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ebe <__c.4061>:
    3ebe:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    3ece:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003edb <__c.4059>:
    3edb:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    3eeb:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003ef7 <__c.4057>:
    3ef7:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    3f07:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003f11 <__c.4055>:
    3f11:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    3f21:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f2e <__c.4053>:
    3f2e:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    3f3e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f4b <__c.4051>:
    3f4b:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    3f5b:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f68 <__c.4049>:
    3f68:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    3f78:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f85 <__c.4047>:
    3f85:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    3f95:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003fa2 <__c.4045>:
    3fa2:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    3fb2:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fbf <__c.4043>:
    3fbf:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    3fcf:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fdc <__c.4041>:
    3fdc:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    3fec:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ff9 <__c.4039>:
    3ff9:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    4009:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004013 <__c.4037>:
    4013:	0a 25 73 0a 00                                      .%s..

00004018 <__c.3914>:
    4018:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    4028:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4038:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4048:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00004055 <__c.3905>:
    4055:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    4065:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    4075:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    4085:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

00004091 <__c.3896>:
    4091:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    40a1:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

000040b2 <__c.3889>:
    40b2:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    40c2:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

000040cb <__c.3883>:
    40cb:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    40db:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    40eb:	25 73 5d 0a 00                                      %s]..

000040f0 <__c.3871>:
    40f0:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    4100:	6f 69 6e 74 65 72 0a 00                             ointer..

00004108 <__c.3866>:
    4108:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    4118:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    4128:	20 6d 65 6d 6f 72 79 0a 00                           memory..

00004131 <__c.3860>:
    4131:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    4141:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

00004152 <__c.3847>:
    4152:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    4162:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    4172:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    4182:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    4192:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    41a2:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    41b2:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    41c2:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    41d2:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    41e2:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    41f2:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    4202:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    4212:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    4222:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    4232:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    4242:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    4252:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    4262:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    4272:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    4282:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    4292:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    42a2:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    42b2:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    42c2:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    42d2:	6d 65 0a 55 73 65 20 2d 64 20 20 61 66 74 65 72     me.Use -d  after
    42e2:	20 27 6c 69 66 27 20 6b 65 79 77 6f 72 64 20 74      'lif' keyword t
    42f2:	6f 20 65 6e 61 62 6c 65 20 4c 49 46 20 66 69 6c     o enable LIF fil
    4302:	65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69 6e     esystem debuggin
    4312:	67 0a 0a 00                                         g...

00004316 <__c.3845>:
    4316:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

00004320 <__c.4604>:
    4320:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    4330:	53 4b 0a 00                                         SK..

00004334 <__c.4602>:
    4334:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4344:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

0000434e <__c.4600>:
    434e:	25 2d 31 36 73 00                                   %-16s.

00004354 <__c.4598>:
    4354:	25 2d 31 36 73 00                                   %-16s.

0000435a <__c.4596>:
    435a:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

0000436b <__c.4594>:
    436b:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    437b:	30 34 78 48 0a 00                                   04xH..

00004381 <__c.4592>:
    4381:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    4391:	64 6f 6e 65 0a 00                                   done..

00004397 <__c.4590>:
    4397:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    43a7:	6f 6e 65 0a 00                                      one..

000043ac <__c.4588>:
    43ac:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    43bc:	61 6c 69 7a 65 64 0a 00                             alized..

000043c4 <__c.4586>:
    43c4:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    43d4:	0a 00                                               ..

000043d6 <__c.4584>:
    43d6:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    43e6:	7a 65 64 0a 00                                      zed..

000043eb <__c.4582>:
    43eb:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    43fb:	69 7a 65 64 0a 00                                   ized..

00004401 <__c.4580>:
    4401:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

00004412 <__c.4578>:
    4412:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    4422:	20 73 74 61 72 74 0a 00                              start..

0000442a <__c.4576>:
    442a:	53 79 73 74 65 6d 20 54 61 73 6b 20 49 6e 74 65     System Task Inte
    443a:	72 72 75 70 74 20 52 61 74 65 3a 20 25 6c 64 20     rrupt Rate: %ld 
    444a:	4e 61 6e 6f 20 53 65 63 6f 6e 64 73 0a 00           Nano Seconds..

00004458 <__c.4574>:
    4458:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

00004467 <__c.4572>:
    4467:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    4477:	0a 00                                               ..

00004479 <__c.4570>:
    4479:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    4489:	20 62 75 73 0a 00                                    bus..

0000448f <__c.4568>:
    448f:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    449f:	20 62 75 73 0a 00                                    bus..

000044a5 <__c.4566>:
    44a5:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    44b5:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000044bf <__c.4564>:
    44bf:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    44cf:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000044d9 <__c.4562>:
    44d9:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    44e9:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    44f9:	35 64 69 73 6b 0a 00                                5disk..

00004500 <__c.4560>:
    4500:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004510 <__c.4558>:
    4510:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    4520:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000452d <__c.4556>:
    452d:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    453d:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

0000454c <__c.4554>:
    454c:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    455c:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    456c:	3a 20 25 6c 64 0a 00                                : %ld..

00004573 <__c.4552>:
    4573:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004584 <__c.4550>:
    4584:	53 74 61 72 74 0a 00                                Start..

0000458b <__c.4541>:
    458b:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

00004597 <__c.4539>:
    4597:	4f 4b 0a 00                                         OK..

0000459b <__c.4536>:
    459b:	49 6e 70 75 74 20 64 65 62 75 67 67 69 6e 67 3a     Input debugging:
    45ab:	20 25 73 0a 00                                       %s..

000045b0 <__c.4531>:
    45b0:	20 20 20 5b 25 73 5d 0a 00                             [%s]..

000045b9 <__c.4529>:
    45b9:	20 20 20 61 72 67 63 20 3d 20 25 64 0a 00              argc = %d..

000045c7 <__c.4527>:
    45c7:	41 72 67 75 6d 65 6e 74 73 3a 0a 00                 Arguments:..

000045d3 <__c.4525>:
    45d3:	0a 3e 00                                            .>.

000045d6 <__c.4513>:
    45d6:	62 61 63 6b 6c 69 67 68 74 20 30 78 52 52 47 47     backlight 0xRRGG
    45e6:	42 42 0a 68 65 6c 70 0a 69 6e 70 75 74 0a 20 20     BB.help.input.  
    45f6:	20 2d 20 74 6f 67 67 6c 65 20 69 6e 70 75 74 20      - toggle input 
    4606:	64 65 62 75 67 67 69 6e 67 0a 6d 65 6d 0a 20 20     debugging.mem.  
    4616:	20 2d 20 64 69 73 70 6c 61 79 20 66 72 65 65 20      - display free 
    4626:	6d 65 6d 6f 72 79 0a 72 65 73 65 74 0a 20 20 20     memory.reset.   
    4636:	2d 20 72 65 73 65 74 20 65 6d 75 6c 61 74 6f 72     - reset emulator
    4646:	0a 73 65 74 64 61 74 65 0a 20 20 20 2d 20 73 65     .setdate.   - se
    4656:	74 20 64 61 74 65 0a 74 69 6d 65 0a 20 20 20 2d     t date.time.   -
    4666:	20 64 69 73 70 6c 61 79 20 63 75 72 72 65 6e 74      display current
    4676:	20 74 69 6d 65 0a 0a 00                              time...

0000467e <__c.4506>:
    467e:	25 2d 31 36 73 00                                   %-16s.

00004684 <__c.4504>:
    4684:	25 2d 31 36 73 00                                   %-16s.

0000468a <__c.4497>:
    468a:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    469a:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

000046a4 <__c.4495>:
    46a4:	25 2d 31 36 73 00                                   %-16s.

000046aa <__c.4493>:
    46aa:	25 2d 31 36 73 00                                   %-16s.

000046b0 <__c.4491>:
    46b0:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    46c0:	69 6c 65 64 0a 00                                   iled..

000046c6 <__c.4489>:
    46c6:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    46d6:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

000046e4 <__c.4483>:
    46e4:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    46f4:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

000046fe <__c.4477>:
    46fe:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    470e:	3a 25 30 32 64 00                                   :%02d.

00004714 <__c.4463>:
    4714:	0a 00                                               ..

00004716 <__c.4461>:
    4716:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4726:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004730 <__c.4459>:
    4730:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4740:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

0000474a <__c.4457>:
    474a:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    475a:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    476a:	35 64 69 73 6b 0a 00                                5disk..

00004771 <__c.4455>:
    4771:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004781 <__c.4453>:
    4781:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4791:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000479e <__c.4451>:
    479e:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    47ae:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000047bd <__c.4449>:
    47bd:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    47cd:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    47dd:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..
	...

000047ee <__ctors_end>:
    47ee:	11 24       	eor	r1, r1
    47f0:	1f be       	out	0x3f, r1	; 63
    47f2:	cf ef       	ldi	r28, 0xFF	; 255
    47f4:	d0 e4       	ldi	r29, 0x40	; 64
    47f6:	de bf       	out	0x3e, r29	; 62
    47f8:	cd bf       	out	0x3d, r28	; 61

000047fa <__do_copy_data>:
    47fa:	17 e1       	ldi	r17, 0x17	; 23
    47fc:	a0 e0       	ldi	r26, 0x00	; 0
    47fe:	b1 e0       	ldi	r27, 0x01	; 1
    4800:	ea eb       	ldi	r30, 0xBA	; 186
    4802:	fe ec       	ldi	r31, 0xCE	; 206
    4804:	01 e0       	ldi	r16, 0x01	; 1
    4806:	0b bf       	out	0x3b, r16	; 59
    4808:	02 c0       	rjmp	.+4      	; 0x480e <__do_copy_data+0x14>
    480a:	07 90       	elpm	r0, Z+
    480c:	0d 92       	st	X+, r0
    480e:	a2 35       	cpi	r26, 0x52	; 82
    4810:	b1 07       	cpc	r27, r17
    4812:	d9 f7       	brne	.-10     	; 0x480a <__do_copy_data+0x10>

00004814 <__do_clear_bss>:
    4814:	21 e2       	ldi	r18, 0x21	; 33
    4816:	a2 e5       	ldi	r26, 0x52	; 82
    4818:	b7 e1       	ldi	r27, 0x17	; 23
    481a:	01 c0       	rjmp	.+2      	; 0x481e <.do_clear_bss_start>

0000481c <.do_clear_bss_loop>:
    481c:	1d 92       	st	X+, r1

0000481e <.do_clear_bss_start>:
    481e:	a3 3b       	cpi	r26, 0xB3	; 179
    4820:	b2 07       	cpc	r27, r18
    4822:	e1 f7       	brne	.-8      	; 0x481c <.do_clear_bss_loop>
    4824:	0e 94 d2 e0 	call	0x1c1a4	; 0x1c1a4 <main>
    4828:	0c 94 5b e7 	jmp	0x1ceb6	; 0x1ceb6 <_exit>

0000482c <__bad_interrupt>:
    482c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004830 <chip_select>:
#endif
#ifdef AVR
    SPI0_RX(&data,1);
#endif
    return(data);
}
    4830:	e8 2f       	mov	r30, r24
    4832:	e6 95       	lsr	r30
    4834:	e6 95       	lsr	r30
    4836:	e6 95       	lsr	r30
    4838:	93 e0       	ldi	r25, 0x03	; 3
    483a:	e9 9f       	mul	r30, r25
    483c:	f0 01       	movw	r30, r0
    483e:	11 24       	eor	r1, r1
    4840:	32 a1       	ldd	r19, Z+34	; 0x22
    4842:	28 2f       	mov	r18, r24
    4844:	27 70       	andi	r18, 0x07	; 7
    4846:	81 e0       	ldi	r24, 0x01	; 1
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	01 c0       	rjmp	.+2      	; 0x484e <chip_select+0x1e>
    484c:	88 0f       	add	r24, r24
    484e:	2a 95       	dec	r18
    4850:	ea f7       	brpl	.-6      	; 0x484c <chip_select+0x1c>
    4852:	98 2f       	mov	r25, r24
    4854:	90 95       	com	r25
    4856:	93 23       	and	r25, r19
    4858:	92 a3       	std	Z+34, r25	; 0x22
    485a:	91 a1       	ldd	r25, Z+33	; 0x21
    485c:	89 2b       	or	r24, r25
    485e:	81 a3       	std	Z+33, r24	; 0x21
    4860:	08 95       	ret

00004862 <chip_deselect>:
    4862:	e8 2f       	mov	r30, r24
    4864:	e6 95       	lsr	r30
    4866:	e6 95       	lsr	r30
    4868:	e6 95       	lsr	r30
    486a:	93 e0       	ldi	r25, 0x03	; 3
    486c:	e9 9f       	mul	r30, r25
    486e:	f0 01       	movw	r30, r0
    4870:	11 24       	eor	r1, r1
    4872:	32 a1       	ldd	r19, Z+34	; 0x22
    4874:	28 2f       	mov	r18, r24
    4876:	27 70       	andi	r18, 0x07	; 7
    4878:	81 e0       	ldi	r24, 0x01	; 1
    487a:	90 e0       	ldi	r25, 0x00	; 0
    487c:	01 c0       	rjmp	.+2      	; 0x4880 <chip_deselect+0x1e>
    487e:	88 0f       	add	r24, r24
    4880:	2a 95       	dec	r18
    4882:	ea f7       	brpl	.-6      	; 0x487e <chip_deselect+0x1c>
    4884:	93 2f       	mov	r25, r19
    4886:	98 2b       	or	r25, r24
    4888:	92 a3       	std	Z+34, r25	; 0x22
    488a:	91 a1       	ldd	r25, Z+33	; 0x21
    488c:	89 2b       	or	r24, r25
    488e:	81 a3       	std	Z+33, r24	; 0x21
    4890:	08 95       	ret

00004892 <chip_select_init>:
    4892:	e7 cf       	rjmp	.-50     	; 0x4862 <chip_deselect>
    4894:	08 95       	ret

00004896 <spi_end>:
    4896:	cf 93       	push	r28
    4898:	ad b7       	in	r26, 0x3d	; 61
    489a:	be b7       	in	r27, 0x3e	; 62
    489c:	17 97       	sbiw	r26, 0x07	; 7
    489e:	0f b6       	in	r0, 0x3f	; 63
    48a0:	f8 94       	cli
    48a2:	be bf       	out	0x3e, r27	; 62
    48a4:	0f be       	out	0x3f, r0	; 63
    48a6:	ad bf       	out	0x3d, r26	; 61
    48a8:	c8 2f       	mov	r28, r24
    48aa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    48ae:	8c 17       	cp	r24, r28
    48b0:	99 f0       	breq	.+38     	; 0x48d8 <spi_end+0x42>
    48b2:	8f 3f       	cpi	r24, 0xFF	; 255
    48b4:	89 f0       	breq	.+34     	; 0x48d8 <spi_end+0x42>
    48b6:	2c 2f       	mov	r18, r28
    48b8:	30 e0       	ldi	r19, 0x00	; 0
    48ba:	ed b7       	in	r30, 0x3d	; 61
    48bc:	fe b7       	in	r31, 0x3e	; 62
    48be:	37 83       	std	Z+7, r19	; 0x07
    48c0:	26 83       	std	Z+6, r18	; 0x06
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	95 83       	std	Z+5, r25	; 0x05
    48c6:	84 83       	std	Z+4, r24	; 0x04
    48c8:	82 ec       	ldi	r24, 0xC2	; 194
    48ca:	91 e0       	ldi	r25, 0x01	; 1
    48cc:	a0 e0       	ldi	r26, 0x00	; 0
    48ce:	81 83       	std	Z+1, r24	; 0x01
    48d0:	92 83       	std	Z+2, r25	; 0x02
    48d2:	a3 83       	std	Z+3, r26	; 0x03
    48d4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    48d8:	8c 2f       	mov	r24, r28
    48da:	c3 df       	rcall	.-122    	; 0x4862 <chip_deselect>
    48dc:	8f ef       	ldi	r24, 0xFF	; 255
    48de:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    48e2:	ad b7       	in	r26, 0x3d	; 61
    48e4:	be b7       	in	r27, 0x3e	; 62
    48e6:	17 96       	adiw	r26, 0x07	; 7
    48e8:	0f b6       	in	r0, 0x3f	; 63
    48ea:	f8 94       	cli
    48ec:	be bf       	out	0x3e, r27	; 62
    48ee:	0f be       	out	0x3f, r0	; 63
    48f0:	ad bf       	out	0x3d, r26	; 61
    48f2:	cf 91       	pop	r28
    48f4:	08 95       	ret

000048f6 <spi_TX_buffer>:
    48f6:	cd c4       	rjmp	.+2458   	; 0x5292 <SPI0_TX>
    48f8:	08 95       	ret

000048fa <spi_RX_buffer>:
    48fa:	f5 c4       	rjmp	.+2538   	; 0x52e6 <SPI0_RX>
    48fc:	08 95       	ret

000048fe <spi_TX>:

/// @brief SPI write 1 byte
/// @param[in] data: value to transmit
/// @return  void
void spi_TX(uint8_t data)
{
    48fe:	a1 e0       	ldi	r26, 0x01	; 1
    4900:	b0 e0       	ldi	r27, 0x00	; 0
    4902:	e5 e8       	ldi	r30, 0x85	; 133
    4904:	f4 e2       	ldi	r31, 0x24	; 36
    4906:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
    490a:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TX(&data,1);
#endif
#ifdef AVR
    SPI0_TX(&data,1);
    490c:	61 e0       	ldi	r22, 0x01	; 1
    490e:	70 e0       	ldi	r23, 0x00	; 0
    4910:	ce 01       	movw	r24, r28
    4912:	01 96       	adiw	r24, 0x01	; 1
    4914:	be d4       	rcall	.+2428   	; 0x5292 <SPI0_TX>
#endif
}
    4916:	21 96       	adiw	r28, 0x01	; 1
    4918:	e2 e0       	ldi	r30, 0x02	; 2
    491a:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

0000491e <spi_init>:
 @return void
*/
uint8_t _cs_pin = 0xff;
uint32_t _spi_clock = -1L;
void spi_init(uint32_t clock, int pin)
{
    491e:	cf 92       	push	r12
    4920:	df 92       	push	r13
    4922:	ef 92       	push	r14
    4924:	ff 92       	push	r15
    4926:	6b 01       	movw	r12, r22
    4928:	7c 01       	movw	r14, r24
    492a:	84 2f       	mov	r24, r20
    spi_waitReady();
    chip_deselect(pin);
    492c:	9a df       	rcall	.-204    	; 0x4862 <chip_deselect>
    _cs_pin = 0xff;
    492e:	8f ef       	ldi	r24, 0xFF	; 255
    4930:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>

#ifdef AVR
    SPI0_Init(clock);                             // Initialize the SPI bus - does nothing if clock unchanged
    4934:	c7 01       	movw	r24, r14
    4936:	b6 01       	movw	r22, r12
    4938:	7f d4       	rcall	.+2302   	; 0x5238 <SPI0_Init>
    SPI0_Mode(0);                                 // Set the clocking mode, etc
    493a:	80 e0       	ldi	r24, 0x00	; 0
    493c:	90 e0       	ldi	r25, 0x00	; 0
#endif
#ifdef ESP8266
    hspi_init(clock,0);                           // Initialize the SPI bus - does nothing if clock unchanged
#endif
    spi_TX(0xff);
    493e:	3c d4       	rcall	.+2168   	; 0x51b8 <SPI0_Mode>
    4940:	8f ef       	ldi	r24, 0xFF	; 255
    4942:	dd df       	rcall	.-70     	; 0x48fe <spi_TX>
    _spi_clock = clock;
    4944:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    4948:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    494c:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    4950:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
// waits for any prior transactions to complete before updating
    spi_waitReady();
}
    4954:	ff 90       	pop	r15
    4956:	ef 90       	pop	r14
    4958:	df 90       	pop	r13
    495a:	cf 90       	pop	r12
    495c:	08 95       	ret

0000495e <spi_begin>:
 @param[in] clock: SPI clock rate
 @param[in] pin: GPIO CS pin
 @return void
*/
void spi_begin(uint32_t clock, int pin)
{
    495e:	cf 92       	push	r12
    4960:	df 92       	push	r13
    4962:	ef 92       	push	r14
    4964:	ff 92       	push	r15
    4966:	cf 93       	push	r28
    4968:	df 93       	push	r29
    496a:	ad b7       	in	r26, 0x3d	; 61
    496c:	be b7       	in	r27, 0x3e	; 62
    496e:	17 97       	sbiw	r26, 0x07	; 7
    4970:	0f b6       	in	r0, 0x3f	; 63
    4972:	f8 94       	cli
    4974:	be bf       	out	0x3e, r27	; 62
    4976:	0f be       	out	0x3f, r0	; 63
    4978:	ad bf       	out	0x3d, r26	; 61
    497a:	6b 01       	movw	r12, r22
    497c:	7c 01       	movw	r14, r24
    497e:	ea 01       	movw	r28, r20
// FIXME allow nesting by using an array of clock values for each pin

//@brief if there is a prior chip select in progress flag an error
    if(_cs_pin != 0xff)
    4980:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4984:	8f 3f       	cpi	r24, 0xFF	; 255
    4986:	79 f0       	breq	.+30     	; 0x49a6 <spi_begin+0x48>
    {
// This implies a bug!
        printf("cs_enable was: %d, want: %d\n", 0xff & _cs_pin, pin);
    4988:	ed b7       	in	r30, 0x3d	; 61
    498a:	fe b7       	in	r31, 0x3e	; 62
    498c:	46 83       	std	Z+6, r20	; 0x06
    498e:	d7 83       	std	Z+7, r29	; 0x07
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	95 83       	std	Z+5, r25	; 0x05
    4994:	84 83       	std	Z+4, r24	; 0x04
    4996:	80 ee       	ldi	r24, 0xE0	; 224
    4998:	91 e0       	ldi	r25, 0x01	; 1
    499a:	a0 e0       	ldi	r26, 0x00	; 0
    499c:	81 83       	std	Z+1, r24	; 0x01
    499e:	92 83       	std	Z+2, r25	; 0x02
    49a0:	a3 83       	std	Z+3, r26	; 0x03
    49a2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
// waits for any prior transactions to complete before updating
    spi_waitReady();

///@brief initialize pin in case it has not been done yet
///@ we cache the clock frequency seeting for multiple device support
    if(_spi_clock != clock)
    49a6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    49aa:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    49ae:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    49b2:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    49b6:	8c 15       	cp	r24, r12
    49b8:	9d 05       	cpc	r25, r13
    49ba:	ae 05       	cpc	r26, r14
    49bc:	bf 05       	cpc	r27, r15
    49be:	21 f0       	breq	.+8      	; 0x49c8 <spi_begin+0x6a>
    {
        spi_init(clock,pin);
    49c0:	ae 01       	movw	r20, r28
    49c2:	c7 01       	movw	r24, r14
    49c4:	b6 01       	movw	r22, r12
    49c6:	ab df       	rcall	.-170    	; 0x491e <spi_init>
    }

    chip_select(pin);
    49c8:	8c 2f       	mov	r24, r28
    49ca:	32 df       	rcall	.-412    	; 0x4830 <chip_select>
    _cs_pin = pin;
    49cc:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
}
    49d0:	ad b7       	in	r26, 0x3d	; 61
    49d2:	be b7       	in	r27, 0x3e	; 62
    49d4:	17 96       	adiw	r26, 0x07	; 7
    49d6:	0f b6       	in	r0, 0x3f	; 63
    49d8:	f8 94       	cli
    49da:	be bf       	out	0x3e, r27	; 62
    49dc:	0f be       	out	0x3f, r0	; 63
    49de:	ad bf       	out	0x3d, r26	; 61
    49e0:	df 91       	pop	r29
    49e2:	cf 91       	pop	r28
    49e4:	ff 90       	pop	r15
    49e6:	ef 90       	pop	r14
    49e8:	df 90       	pop	r13
    49ea:	cf 90       	pop	r12
    49ec:	08 95       	ret

000049ee <spi_TXRX>:

/// @brief SPI read and write 1 byte
/// @param[in] data: value to transmit
/// @return  uint8_t value read
uint8_t spi_TXRX(uint8_t data)
{
    49ee:	a1 e0       	ldi	r26, 0x01	; 1
    49f0:	b0 e0       	ldi	r27, 0x00	; 0
    49f2:	ed ef       	ldi	r30, 0xFD	; 253
    49f4:	f4 e2       	ldi	r31, 0x24	; 36
    49f6:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
    49fa:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TXRX(&data,1);
#endif
#ifdef AVR
    SPI0_TXRX(&data,1);
    49fc:	61 e0       	ldi	r22, 0x01	; 1
    49fe:	70 e0       	ldi	r23, 0x00	; 0
    4a00:	ce 01       	movw	r24, r28
    4a02:	01 96       	adiw	r24, 0x01	; 1
    4a04:	5a d4       	rcall	.+2228   	; 0x52ba <SPI0_TXRX>
#endif
    return(data);
}
    4a06:	89 81       	ldd	r24, Y+1	; 0x01
    4a08:	21 96       	adiw	r28, 0x01	; 1
    4a0a:	e2 e0       	ldi	r30, 0x02	; 2
    4a0c:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00004a10 <set_error>:
static uint8_t error_flag = 0;
/// @brief Set error condition
/// @return  void
void set_error(uint8_t error)
{
	error_flag = error;
    4a10:	80 93 52 17 	sts	0x1752, r24	; 0x801752 <__data_end>
    GPIO_PIN_HI(LED2);
    4a14:	2c 9a       	sbi	0x05, 4	; 5
    4a16:	24 9a       	sbi	0x04, 4	; 4
    4a18:	08 95       	ret

00004a1a <clear_error>:

/// @brief Set error condition
/// @return  void
void clear_error()
{
	error_flag = 0;
    4a1a:	10 92 52 17 	sts	0x1752, r1	; 0x801752 <__data_end>
    GPIO_PIN_LOW(LED2);
    4a1e:	2c 98       	cbi	0x05, 4	; 5
    4a20:	24 9a       	sbi	0x04, 4	; 4
    4a22:	08 95       	ret

00004a24 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    4a24:	a2 e0       	ldi	r26, 0x02	; 2
    4a26:	b0 e0       	ldi	r27, 0x00	; 0
    4a28:	e8 e1       	ldi	r30, 0x18	; 24
    4a2a:	f5 e2       	ldi	r31, 0x25	; 37
    4a2c:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    4a30:	20 91 af 21 	lds	r18, 0x21AF	; 0x8021af <__brkval>
    4a34:	30 91 b0 21 	lds	r19, 0x21B0	; 0x8021b0 <__brkval+0x1>
    4a38:	21 15       	cp	r18, r1
    4a3a:	31 05       	cpc	r19, r1
    4a3c:	11 f4       	brne	.+4      	; 0x4a42 <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4a3e:	23 eb       	ldi	r18, 0xB3	; 179
    4a40:	31 e2       	ldi	r19, 0x21	; 33

    ret = (uint16_t) &v - top;
    return ( ret );
}
    4a42:	ce 01       	movw	r24, r28
    4a44:	01 96       	adiw	r24, 0x01	; 1
    4a46:	82 1b       	sub	r24, r18
    4a48:	93 0b       	sbc	r25, r19
    4a4a:	22 96       	adiw	r28, 0x02	; 2
    4a4c:	e2 e0       	ldi	r30, 0x02	; 2
    4a4e:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00004a52 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4a52:	a9 e0       	ldi	r26, 0x09	; 9
    4a54:	b0 e0       	ldi	r27, 0x00	; 0
    4a56:	ef e2       	ldi	r30, 0x2F	; 47
    4a58:	f5 e2       	ldi	r31, 0x25	; 37
    4a5a:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    4a5e:	e2 df       	rcall	.-60     	; 0x4a24 <freeRam>
    4a60:	99 87       	std	Y+9, r25	; 0x09
    4a62:	88 87       	std	Y+8, r24	; 0x08

    printf("Free Ram:%u\n", ram);
    4a64:	ed b7       	in	r30, 0x3d	; 61
    4a66:	fe b7       	in	r31, 0x3e	; 62
    4a68:	95 83       	std	Z+5, r25	; 0x05
    4a6a:	84 83       	std	Z+4, r24	; 0x04
    4a6c:	87 e0       	ldi	r24, 0x07	; 7
    4a6e:	93 e0       	ldi	r25, 0x03	; 3
    4a70:	a0 e0       	ldi	r26, 0x00	; 0
    4a72:	81 83       	std	Z+1, r24	; 0x01
    4a74:	92 83       	std	Z+2, r25	; 0x02
    4a76:	a3 83       	std	Z+3, r26	; 0x03
    4a78:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    4a7c:	8f ef       	ldi	r24, 0xFF	; 255
    4a7e:	90 e4       	ldi	r25, 0x40	; 64
    4a80:	ed b7       	in	r30, 0x3d	; 61
    4a82:	fe b7       	in	r31, 0x3e	; 62
    4a84:	95 83       	std	Z+5, r25	; 0x05
    4a86:	84 83       	std	Z+4, r24	; 0x04
    4a88:	84 ef       	ldi	r24, 0xF4	; 244
    4a8a:	92 e0       	ldi	r25, 0x02	; 2
    4a8c:	a0 e0       	ldi	r26, 0x00	; 0
    4a8e:	81 83       	std	Z+1, r24	; 0x01
    4a90:	92 83       	std	Z+2, r25	; 0x02
    4a92:	a3 83       	std	Z+3, r26	; 0x03
    4a94:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    4a98:	ce 01       	movw	r24, r28
    4a9a:	08 96       	adiw	r24, 0x08	; 8
    4a9c:	ed b7       	in	r30, 0x3d	; 61
    4a9e:	fe b7       	in	r31, 0x3e	; 62
    4aa0:	95 83       	std	Z+5, r25	; 0x05
    4aa2:	84 83       	std	Z+4, r24	; 0x04
    4aa4:	81 ee       	ldi	r24, 0xE1	; 225
    4aa6:	92 e0       	ldi	r25, 0x02	; 2
    4aa8:	a0 e0       	ldi	r26, 0x00	; 0
    4aaa:	81 83       	std	Z+1, r24	; 0x01
    4aac:	92 83       	std	Z+2, r25	; 0x02
    4aae:	a3 83       	std	Z+3, r26	; 0x03
    4ab0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    4ab4:	83 eb       	ldi	r24, 0xB3	; 179
    4ab6:	91 e2       	ldi	r25, 0x21	; 33
    4ab8:	ed b7       	in	r30, 0x3d	; 61
    4aba:	fe b7       	in	r31, 0x3e	; 62
    4abc:	97 83       	std	Z+7, r25	; 0x07
    4abe:	86 83       	std	Z+6, r24	; 0x06
    4ac0:	82 e5       	ldi	r24, 0x52	; 82
    4ac2:	97 e1       	ldi	r25, 0x17	; 23
    4ac4:	95 83       	std	Z+5, r25	; 0x05
    4ac6:	84 83       	std	Z+4, r24	; 0x04
    4ac8:	83 ec       	ldi	r24, 0xC3	; 195
    4aca:	92 e0       	ldi	r25, 0x02	; 2
    4acc:	a0 e0       	ldi	r26, 0x00	; 0
    4ace:	81 83       	std	Z+1, r24	; 0x01
    4ad0:	92 83       	std	Z+2, r25	; 0x02
    4ad2:	a3 83       	std	Z+3, r26	; 0x03
    4ad4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    4ad8:	82 e5       	ldi	r24, 0x52	; 82
    4ada:	97 e1       	ldi	r25, 0x17	; 23
    4adc:	ed b7       	in	r30, 0x3d	; 61
    4ade:	fe b7       	in	r31, 0x3e	; 62
    4ae0:	97 83       	std	Z+7, r25	; 0x07
    4ae2:	86 83       	std	Z+6, r24	; 0x06
    4ae4:	80 e0       	ldi	r24, 0x00	; 0
    4ae6:	91 e0       	ldi	r25, 0x01	; 1
    4ae8:	95 83       	std	Z+5, r25	; 0x05
    4aea:	84 83       	std	Z+4, r24	; 0x04
    4aec:	85 ea       	ldi	r24, 0xA5	; 165
    4aee:	92 e0       	ldi	r25, 0x02	; 2
    4af0:	a0 e0       	ldi	r26, 0x00	; 0
    4af2:	81 83       	std	Z+1, r24	; 0x01
    4af4:	92 83       	std	Z+2, r25	; 0x02
    4af6:	a3 83       	std	Z+3, r26	; 0x03
    4af8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    4afc:	80 e0       	ldi	r24, 0x00	; 0
    4afe:	90 e0       	ldi	r25, 0x00	; 0
    4b00:	ed b7       	in	r30, 0x3d	; 61
    4b02:	fe b7       	in	r31, 0x3e	; 62
    4b04:	97 83       	std	Z+7, r25	; 0x07
    4b06:	86 83       	std	Z+6, r24	; 0x06
    4b08:	83 eb       	ldi	r24, 0xB3	; 179
    4b0a:	91 e2       	ldi	r25, 0x21	; 33
    4b0c:	95 83       	std	Z+5, r25	; 0x05
    4b0e:	84 83       	std	Z+4, r24	; 0x04
    4b10:	87 e8       	ldi	r24, 0x87	; 135
    4b12:	92 e0       	ldi	r25, 0x02	; 2
    4b14:	a0 e0       	ldi	r26, 0x00	; 0
    4b16:	81 83       	std	Z+1, r24	; 0x01
    4b18:	92 83       	std	Z+2, r25	; 0x02
    4b1a:	a3 83       	std	Z+3, r26	; 0x03
    4b1c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    4b20:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4b24:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4b28:	ed b7       	in	r30, 0x3d	; 61
    4b2a:	fe b7       	in	r31, 0x3e	; 62
    4b2c:	97 83       	std	Z+7, r25	; 0x07
    4b2e:	86 83       	std	Z+6, r24	; 0x06
    4b30:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    4b34:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4b38:	95 83       	std	Z+5, r25	; 0x05
    4b3a:	84 83       	std	Z+4, r24	; 0x04
    4b3c:	89 e6       	ldi	r24, 0x69	; 105
    4b3e:	92 e0       	ldi	r25, 0x02	; 2
    4b40:	a0 e0       	ldi	r26, 0x00	; 0
    4b42:	81 83       	std	Z+1, r24	; 0x01
    4b44:	92 83       	std	Z+2, r25	; 0x02
    4b46:	a3 83       	std	Z+3, r26	; 0x03
    4b48:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    4b4c:	80 91 af 21 	lds	r24, 0x21AF	; 0x8021af <__brkval>
    4b50:	90 91 b0 21 	lds	r25, 0x21B0	; 0x8021b0 <__brkval+0x1>
    4b54:	ed b7       	in	r30, 0x3d	; 61
    4b56:	fe b7       	in	r31, 0x3e	; 62
    4b58:	95 83       	std	Z+5, r25	; 0x05
    4b5a:	84 83       	std	Z+4, r24	; 0x04
    4b5c:	85 e5       	ldi	r24, 0x55	; 85
    4b5e:	92 e0       	ldi	r25, 0x02	; 2
    4b60:	a0 e0       	ldi	r26, 0x00	; 0
    4b62:	81 83       	std	Z+1, r24	; 0x01
    4b64:	92 83       	std	Z+2, r25	; 0x02
    4b66:	a3 83       	std	Z+3, r26	; 0x03
    4b68:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

}
    4b6c:	29 96       	adiw	r28, 0x09	; 9
    4b6e:	e2 e0       	ldi	r30, 0x02	; 2
    4b70:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00004b74 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    4b74:	ef 92       	push	r14
    4b76:	ff 92       	push	r15
    4b78:	0f 93       	push	r16
    4b7a:	1f 93       	push	r17
    4b7c:	cf 93       	push	r28
    4b7e:	df 93       	push	r29
    4b80:	ad b7       	in	r26, 0x3d	; 61
    4b82:	be b7       	in	r27, 0x3e	; 62
    4b84:	17 97       	sbiw	r26, 0x07	; 7
    4b86:	0f b6       	in	r0, 0x3f	; 63
    4b88:	f8 94       	cli
    4b8a:	be bf       	out	0x3e, r27	; 62
    4b8c:	0f be       	out	0x3f, r0	; 63
    4b8e:	ad bf       	out	0x3d, r26	; 61
    4b90:	8c 01       	movw	r16, r24
    4b92:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    4b94:	0e 94 19 e6 	call	0x1cc32	; 0x1cc32 <calloc>
    4b98:	ec 01       	movw	r28, r24
    if(!p)
    4b9a:	89 2b       	or	r24, r25
    4b9c:	71 f4       	brne	.+28     	; 0x4bba <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    4b9e:	ed b7       	in	r30, 0x3d	; 61
    4ba0:	fe b7       	in	r31, 0x3e	; 62
    4ba2:	f7 82       	std	Z+7, r15	; 0x07
    4ba4:	e6 82       	std	Z+6, r14	; 0x06
    4ba6:	15 83       	std	Z+5, r17	; 0x05
    4ba8:	04 83       	std	Z+4, r16	; 0x04
    4baa:	8a e3       	ldi	r24, 0x3A	; 58
    4bac:	92 e0       	ldi	r25, 0x02	; 2
    4bae:	a0 e0       	ldi	r26, 0x00	; 0
    4bb0:	81 83       	std	Z+1, r24	; 0x01
    4bb2:	92 83       	std	Z+2, r25	; 0x02
    4bb4:	a3 83       	std	Z+3, r26	; 0x03
    4bb6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    }
    return(p);
}
    4bba:	ce 01       	movw	r24, r28
    4bbc:	cd b7       	in	r28, 0x3d	; 61
    4bbe:	de b7       	in	r29, 0x3e	; 62
    4bc0:	27 96       	adiw	r28, 0x07	; 7
    4bc2:	e6 e0       	ldi	r30, 0x06	; 6
    4bc4:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

00004bc8 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    4bc8:	0f 93       	push	r16
    4bca:	1f 93       	push	r17
    4bcc:	cf 93       	push	r28
    4bce:	df 93       	push	r29
    4bd0:	00 d0       	rcall	.+0      	; 0x4bd2 <safemalloc+0xa>
    4bd2:	00 d0       	rcall	.+0      	; 0x4bd4 <safemalloc+0xc>
    4bd4:	1f 92       	push	r1
    4bd6:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    4bd8:	61 e0       	ldi	r22, 0x01	; 1
    4bda:	70 e0       	ldi	r23, 0x00	; 0
    4bdc:	0e 94 19 e6 	call	0x1cc32	; 0x1cc32 <calloc>
    4be0:	ec 01       	movw	r28, r24
    if(!p)
    4be2:	89 2b       	or	r24, r25
    4be4:	61 f4       	brne	.+24     	; 0x4bfe <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    4be6:	ed b7       	in	r30, 0x3d	; 61
    4be8:	fe b7       	in	r31, 0x3e	; 62
    4bea:	15 83       	std	Z+5, r17	; 0x05
    4bec:	04 83       	std	Z+4, r16	; 0x04
    4bee:	82 e2       	ldi	r24, 0x22	; 34
    4bf0:	92 e0       	ldi	r25, 0x02	; 2
    4bf2:	a0 e0       	ldi	r26, 0x00	; 0
    4bf4:	81 83       	std	Z+1, r24	; 0x01
    4bf6:	92 83       	std	Z+2, r25	; 0x02
    4bf8:	a3 83       	std	Z+3, r26	; 0x03
    4bfa:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    }
    return(p);
}
    4bfe:	ce 01       	movw	r24, r28
    4c00:	cd b7       	in	r28, 0x3d	; 61
    4c02:	de b7       	in	r29, 0x3e	; 62
    4c04:	25 96       	adiw	r28, 0x05	; 5
    4c06:	e4 e0       	ldi	r30, 0x04	; 4
    4c08:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

00004c0c <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    4c0c:	ad b7       	in	r26, 0x3d	; 61
    4c0e:	be b7       	in	r27, 0x3e	; 62
    4c10:	17 97       	sbiw	r26, 0x07	; 7
    4c12:	0f b6       	in	r0, 0x3f	; 63
    4c14:	f8 94       	cli
    4c16:	be bf       	out	0x3e, r27	; 62
    4c18:	0f be       	out	0x3f, r0	; 63
    4c1a:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    4c1c:	00 97       	sbiw	r24, 0x00	; 0
    4c1e:	11 f1       	breq	.+68     	; 0x4c64 <safefree+0x58>
        return;

    if(__brkval)
    4c20:	20 91 af 21 	lds	r18, 0x21AF	; 0x8021af <__brkval>
    4c24:	30 91 b0 21 	lds	r19, 0x21B0	; 0x8021b0 <__brkval+0x1>
    4c28:	21 15       	cp	r18, r1
    4c2a:	31 05       	cpc	r19, r1
    4c2c:	11 f4       	brne	.+4      	; 0x4c32 <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4c2e:	23 eb       	ldi	r18, 0xB3	; 179
    4c30:	31 e2       	ldi	r19, 0x21	; 33

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    4c32:	41 e2       	ldi	r20, 0x21	; 33
    4c34:	83 3b       	cpi	r24, 0xB3	; 179
    4c36:	94 07       	cpc	r25, r20
    4c38:	30 f0       	brcs	.+12     	; 0x4c46 <safefree+0x3a>
    4c3a:	28 17       	cp	r18, r24
    4c3c:	39 07       	cpc	r19, r25
    4c3e:	18 f0       	brcs	.+6      	; 0x4c46 <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    4c40:	0e 94 cb e6 	call	0x1cd96	; 0x1cd96 <free>
        return;
    4c44:	0f c0       	rjmp	.+30     	; 0x4c64 <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    4c46:	ed b7       	in	r30, 0x3d	; 61
    4c48:	fe b7       	in	r31, 0x3e	; 62
    4c4a:	37 83       	std	Z+7, r19	; 0x07
    4c4c:	26 83       	std	Z+6, r18	; 0x06
    4c4e:	95 83       	std	Z+5, r25	; 0x05
    4c50:	84 83       	std	Z+4, r24	; 0x04
    4c52:	8d ef       	ldi	r24, 0xFD	; 253
    4c54:	91 e0       	ldi	r25, 0x01	; 1
    4c56:	a0 e0       	ldi	r26, 0x00	; 0
    4c58:	81 83       	std	Z+1, r24	; 0x01
    4c5a:	92 83       	std	Z+2, r25	; 0x02
    4c5c:	a3 83       	std	Z+3, r26	; 0x03
    4c5e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    PrintFree();
    4c62:	f7 de       	rcall	.-530    	; 0x4a52 <PrintFree>
}
    4c64:	ad b7       	in	r26, 0x3d	; 61
    4c66:	be b7       	in	r27, 0x3e	; 62
    4c68:	17 96       	adiw	r26, 0x07	; 7
    4c6a:	0f b6       	in	r0, 0x3f	; 63
    4c6c:	f8 94       	cli
    4c6e:	be bf       	out	0x3e, r27	; 62
    4c70:	0f be       	out	0x3f, r0	; 63
    4c72:	ad bf       	out	0x3d, r26	; 61
    4c74:	08 95       	ret

00004c76 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    4c76:	64 36       	cpi	r22, 0x64	; 100
    4c78:	71 05       	cpc	r23, r1
    4c7a:	81 05       	cpc	r24, r1
    4c7c:	91 05       	cpc	r25, r1
    4c7e:	58 f0       	brcs	.+22     	; 0x4c96 <delayus+0x20>
    {
        us -= 100U;
    4c80:	64 56       	subi	r22, 0x64	; 100
    4c82:	71 09       	sbc	r23, r1
    4c84:	81 09       	sbc	r24, r1
    4c86:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4c88:	e3 ef       	ldi	r30, 0xF3	; 243
    4c8a:	f1 e0       	ldi	r31, 0x01	; 1
    4c8c:	31 97       	sbiw	r30, 0x01	; 1
    4c8e:	f1 f7       	brne	.-4      	; 0x4c8c <delayus+0x16>
    4c90:	00 c0       	rjmp	.+0      	; 0x4c92 <delayus+0x1c>
    4c92:	00 00       	nop
    4c94:	f0 cf       	rjmp	.-32     	; 0x4c76 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    4c96:	6a 30       	cpi	r22, 0x0A	; 10
    4c98:	71 05       	cpc	r23, r1
    4c9a:	81 05       	cpc	r24, r1
    4c9c:	91 05       	cpc	r25, r1
    4c9e:	48 f0       	brcs	.+18     	; 0x4cb2 <delayus+0x3c>
    {
        us -= 10U;
    4ca0:	6a 50       	subi	r22, 0x0A	; 10
    4ca2:	71 09       	sbc	r23, r1
    4ca4:	81 09       	sbc	r24, r1
    4ca6:	91 09       	sbc	r25, r1
    4ca8:	f2 e4       	ldi	r31, 0x42	; 66
    4caa:	fa 95       	dec	r31
    4cac:	f1 f7       	brne	.-4      	; 0x4caa <delayus+0x34>
    4cae:	00 c0       	rjmp	.+0      	; 0x4cb0 <delayus+0x3a>
    4cb0:	f2 cf       	rjmp	.-28     	; 0x4c96 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    4cb2:	61 15       	cp	r22, r1
    4cb4:	71 05       	cpc	r23, r1
    4cb6:	81 05       	cpc	r24, r1
    4cb8:	91 05       	cpc	r25, r1
    4cba:	49 f0       	breq	.+18     	; 0x4cce <delayus+0x58>
    {
        --us;
    4cbc:	61 50       	subi	r22, 0x01	; 1
    4cbe:	71 09       	sbc	r23, r1
    4cc0:	81 09       	sbc	r24, r1
    4cc2:	91 09       	sbc	r25, r1
    4cc4:	26 e0       	ldi	r18, 0x06	; 6
    4cc6:	2a 95       	dec	r18
    4cc8:	f1 f7       	brne	.-4      	; 0x4cc6 <delayus+0x50>
    4cca:	00 c0       	rjmp	.+0      	; 0x4ccc <delayus+0x56>
    4ccc:	f2 cf       	rjmp	.-28     	; 0x4cb2 <delayus+0x3c>
        _delay_us(1);
    }
}
    4cce:	08 95       	ret

00004cd0 <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    4cd0:	61 15       	cp	r22, r1
    4cd2:	71 05       	cpc	r23, r1
    4cd4:	81 05       	cpc	r24, r1
    4cd6:	91 05       	cpc	r25, r1
    4cd8:	09 f4       	brne	.+2      	; 0x4cdc <delayms+0xc>
    4cda:	41 c0       	rjmp	.+130    	; 0x4d5e <delayms+0x8e>
    4cdc:	e3 ef       	ldi	r30, 0xF3	; 243
    4cde:	f1 e0       	ldi	r31, 0x01	; 1
    4ce0:	31 97       	sbiw	r30, 0x01	; 1
    4ce2:	f1 f7       	brne	.-4      	; 0x4ce0 <delayms+0x10>
    4ce4:	00 c0       	rjmp	.+0      	; 0x4ce6 <delayms+0x16>
    4ce6:	00 00       	nop
    4ce8:	e3 ef       	ldi	r30, 0xF3	; 243
    4cea:	f1 e0       	ldi	r31, 0x01	; 1
    4cec:	31 97       	sbiw	r30, 0x01	; 1
    4cee:	f1 f7       	brne	.-4      	; 0x4cec <delayms+0x1c>
    4cf0:	00 c0       	rjmp	.+0      	; 0x4cf2 <delayms+0x22>
    4cf2:	00 00       	nop
    4cf4:	e3 ef       	ldi	r30, 0xF3	; 243
    4cf6:	f1 e0       	ldi	r31, 0x01	; 1
    4cf8:	31 97       	sbiw	r30, 0x01	; 1
    4cfa:	f1 f7       	brne	.-4      	; 0x4cf8 <delayms+0x28>
    4cfc:	00 c0       	rjmp	.+0      	; 0x4cfe <delayms+0x2e>
    4cfe:	00 00       	nop
    4d00:	e3 ef       	ldi	r30, 0xF3	; 243
    4d02:	f1 e0       	ldi	r31, 0x01	; 1
    4d04:	31 97       	sbiw	r30, 0x01	; 1
    4d06:	f1 f7       	brne	.-4      	; 0x4d04 <delayms+0x34>
    4d08:	00 c0       	rjmp	.+0      	; 0x4d0a <delayms+0x3a>
    4d0a:	00 00       	nop
    4d0c:	e3 ef       	ldi	r30, 0xF3	; 243
    4d0e:	f1 e0       	ldi	r31, 0x01	; 1
    4d10:	31 97       	sbiw	r30, 0x01	; 1
    4d12:	f1 f7       	brne	.-4      	; 0x4d10 <delayms+0x40>
    4d14:	00 c0       	rjmp	.+0      	; 0x4d16 <delayms+0x46>
    4d16:	00 00       	nop
    4d18:	e3 ef       	ldi	r30, 0xF3	; 243
    4d1a:	f1 e0       	ldi	r31, 0x01	; 1
    4d1c:	31 97       	sbiw	r30, 0x01	; 1
    4d1e:	f1 f7       	brne	.-4      	; 0x4d1c <delayms+0x4c>
    4d20:	00 c0       	rjmp	.+0      	; 0x4d22 <delayms+0x52>
    4d22:	00 00       	nop
    4d24:	e3 ef       	ldi	r30, 0xF3	; 243
    4d26:	f1 e0       	ldi	r31, 0x01	; 1
    4d28:	31 97       	sbiw	r30, 0x01	; 1
    4d2a:	f1 f7       	brne	.-4      	; 0x4d28 <delayms+0x58>
    4d2c:	00 c0       	rjmp	.+0      	; 0x4d2e <delayms+0x5e>
    4d2e:	00 00       	nop
    4d30:	e3 ef       	ldi	r30, 0xF3	; 243
    4d32:	f1 e0       	ldi	r31, 0x01	; 1
    4d34:	31 97       	sbiw	r30, 0x01	; 1
    4d36:	f1 f7       	brne	.-4      	; 0x4d34 <delayms+0x64>
    4d38:	00 c0       	rjmp	.+0      	; 0x4d3a <delayms+0x6a>
    4d3a:	00 00       	nop
    4d3c:	e3 ef       	ldi	r30, 0xF3	; 243
    4d3e:	f1 e0       	ldi	r31, 0x01	; 1
    4d40:	31 97       	sbiw	r30, 0x01	; 1
    4d42:	f1 f7       	brne	.-4      	; 0x4d40 <delayms+0x70>
    4d44:	00 c0       	rjmp	.+0      	; 0x4d46 <delayms+0x76>
    4d46:	00 00       	nop
    4d48:	e3 ef       	ldi	r30, 0xF3	; 243
    4d4a:	f1 e0       	ldi	r31, 0x01	; 1
    4d4c:	31 97       	sbiw	r30, 0x01	; 1
    4d4e:	f1 f7       	brne	.-4      	; 0x4d4c <delayms+0x7c>
    4d50:	00 c0       	rjmp	.+0      	; 0x4d52 <delayms+0x82>
    4d52:	00 00       	nop
    4d54:	61 50       	subi	r22, 0x01	; 1
    4d56:	71 09       	sbc	r23, r1
    4d58:	81 09       	sbc	r24, r1
    4d5a:	91 09       	sbc	r25, r1
    4d5c:	b9 cf       	rjmp	.-142    	; 0x4cd0 <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    4d5e:	08 95       	ret

00004d60 <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    4d60:	81 11       	cpse	r24, r1
    4d62:	0e c0       	rjmp	.+28     	; 0x4d80 <uart_rx_flush+0x20>
    4d64:	f8 94       	cli
    4d66:	10 92 f6 19 	sts	0x19F6, r1	; 0x8019f6 <uarts+0x4>
    4d6a:	10 92 f5 19 	sts	0x19F5, r1	; 0x8019f5 <uarts+0x3>
    4d6e:	10 92 f2 19 	sts	0x19F2, r1	; 0x8019f2 <uarts>
    4d72:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <uarts+0x1>
    4d76:	10 92 f4 19 	sts	0x19F4, r1	; 0x8019f4 <uarts+0x2>
    4d7a:	10 92 f7 19 	sts	0x19F7, r1	; 0x8019f7 <uarts+0x5>
    4d7e:	78 94       	sei
    4d80:	08 95       	ret

00004d82 <uart_ubr>:
    4d82:	4f 92       	push	r4
    4d84:	5f 92       	push	r5
    4d86:	6f 92       	push	r6
    4d88:	7f 92       	push	r7
    4d8a:	8f 92       	push	r8
    4d8c:	9f 92       	push	r9
    4d8e:	af 92       	push	r10
    4d90:	bf 92       	push	r11
    4d92:	cf 92       	push	r12
    4d94:	df 92       	push	r13
    4d96:	ef 92       	push	r14
    4d98:	ff 92       	push	r15
    4d9a:	cf 93       	push	r28
    4d9c:	df 93       	push	r29
    4d9e:	5a 01       	movw	r10, r20
    4da0:	e9 01       	movw	r28, r18
    4da2:	0e 94 b7 e4 	call	0x1c96e	; 0x1c96e <__floatunsisf>
    4da6:	2b 01       	movw	r4, r22
    4da8:	3c 01       	movw	r6, r24
    4daa:	20 e0       	ldi	r18, 0x00	; 0
    4dac:	30 e0       	ldi	r19, 0x00	; 0
    4dae:	40 e0       	ldi	r20, 0x00	; 0
    4db0:	51 e4       	ldi	r21, 0x41	; 65
    4db2:	0e 94 6d e5 	call	0x1cada	; 0x1cada <__mulsf3>
    4db6:	9b 01       	movw	r18, r22
    4db8:	ac 01       	movw	r20, r24
    4dba:	60 e8       	ldi	r22, 0x80	; 128
    4dbc:	76 e9       	ldi	r23, 0x96	; 150
    4dbe:	88 e9       	ldi	r24, 0x98	; 152
    4dc0:	9b e4       	ldi	r25, 0x4B	; 75
    4dc2:	0e 94 1e e4 	call	0x1c83c	; 0x1c83c <__divsf3>
    4dc6:	20 e0       	ldi	r18, 0x00	; 0
    4dc8:	30 e0       	ldi	r19, 0x00	; 0
    4dca:	40 e8       	ldi	r20, 0x80	; 128
    4dcc:	5f e3       	ldi	r21, 0x3F	; 63
    4dce:	0e 94 b5 e3 	call	0x1c76a	; 0x1c76a <__subsf3>
    4dd2:	0e 94 d0 e5 	call	0x1cba0	; 0x1cba0 <round>
    4dd6:	0e 94 8b e4 	call	0x1c916	; 0x1c916 <__fixunssfsi>
    4dda:	6b 01       	movw	r12, r22
    4ddc:	7c 01       	movw	r14, r24
    4dde:	c1 14       	cp	r12, r1
    4de0:	80 e1       	ldi	r24, 0x10	; 16
    4de2:	d8 06       	cpc	r13, r24
    4de4:	e1 04       	cpc	r14, r1
    4de6:	f1 04       	cpc	r15, r1
    4de8:	58 f4       	brcc	.+22     	; 0x4e00 <uart_ubr+0x7e>
    4dea:	81 e0       	ldi	r24, 0x01	; 1
    4dec:	90 e0       	ldi	r25, 0x00	; 0
    4dee:	f5 01       	movw	r30, r10
    4df0:	91 83       	std	Z+1, r25	; 0x01
    4df2:	80 83       	st	Z, r24
    4df4:	81 2c       	mov	r8, r1
    4df6:	91 2c       	mov	r9, r1
    4df8:	a1 2c       	mov	r10, r1
    4dfa:	21 e4       	ldi	r18, 0x41	; 65
    4dfc:	b2 2e       	mov	r11, r18
    4dfe:	31 c0       	rjmp	.+98     	; 0x4e62 <uart_ubr+0xe0>
    4e00:	f5 01       	movw	r30, r10
    4e02:	11 82       	std	Z+1, r1	; 0x01
    4e04:	10 82       	st	Z, r1
    4e06:	20 e0       	ldi	r18, 0x00	; 0
    4e08:	30 e0       	ldi	r19, 0x00	; 0
    4e0a:	40 e8       	ldi	r20, 0x80	; 128
    4e0c:	51 e4       	ldi	r21, 0x41	; 65
    4e0e:	c3 01       	movw	r24, r6
    4e10:	b2 01       	movw	r22, r4
    4e12:	0e 94 6d e5 	call	0x1cada	; 0x1cada <__mulsf3>
    4e16:	9b 01       	movw	r18, r22
    4e18:	ac 01       	movw	r20, r24
    4e1a:	60 e8       	ldi	r22, 0x80	; 128
    4e1c:	76 e9       	ldi	r23, 0x96	; 150
    4e1e:	88 e9       	ldi	r24, 0x98	; 152
    4e20:	9b e4       	ldi	r25, 0x4B	; 75
    4e22:	0e 94 1e e4 	call	0x1c83c	; 0x1c83c <__divsf3>
    4e26:	20 e0       	ldi	r18, 0x00	; 0
    4e28:	30 e0       	ldi	r19, 0x00	; 0
    4e2a:	40 e8       	ldi	r20, 0x80	; 128
    4e2c:	5f e3       	ldi	r21, 0x3F	; 63
    4e2e:	0e 94 b5 e3 	call	0x1c76a	; 0x1c76a <__subsf3>
    4e32:	0e 94 d0 e5 	call	0x1cba0	; 0x1cba0 <round>
    4e36:	0e 94 8b e4 	call	0x1c916	; 0x1c916 <__fixunssfsi>
    4e3a:	6b 01       	movw	r12, r22
    4e3c:	7c 01       	movw	r14, r24
    4e3e:	81 2c       	mov	r8, r1
    4e40:	91 2c       	mov	r9, r1
    4e42:	90 e8       	ldi	r25, 0x80	; 128
    4e44:	a9 2e       	mov	r10, r25
    4e46:	91 e4       	ldi	r25, 0x41	; 65
    4e48:	b9 2e       	mov	r11, r25
    4e4a:	c1 14       	cp	r12, r1
    4e4c:	f0 e1       	ldi	r31, 0x10	; 16
    4e4e:	df 06       	cpc	r13, r31
    4e50:	e1 04       	cpc	r14, r1
    4e52:	f1 04       	cpc	r15, r1
    4e54:	30 f0       	brcs	.+12     	; 0x4e62 <uart_ubr+0xe0>
    4e56:	cc 24       	eor	r12, r12
    4e58:	ca 94       	dec	r12
    4e5a:	8f e0       	ldi	r24, 0x0F	; 15
    4e5c:	d8 2e       	mov	r13, r24
    4e5e:	e1 2c       	mov	r14, r1
    4e60:	f1 2c       	mov	r15, r1
    4e62:	c7 01       	movw	r24, r14
    4e64:	b6 01       	movw	r22, r12
    4e66:	6f 5f       	subi	r22, 0xFF	; 255
    4e68:	7f 4f       	sbci	r23, 0xFF	; 255
    4e6a:	8f 4f       	sbci	r24, 0xFF	; 255
    4e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    4e6e:	0e 94 b7 e4 	call	0x1c96e	; 0x1c96e <__floatunsisf>
    4e72:	a5 01       	movw	r20, r10
    4e74:	94 01       	movw	r18, r8
    4e76:	0e 94 6d e5 	call	0x1cada	; 0x1cada <__mulsf3>
    4e7a:	9b 01       	movw	r18, r22
    4e7c:	ac 01       	movw	r20, r24
    4e7e:	60 e8       	ldi	r22, 0x80	; 128
    4e80:	76 e9       	ldi	r23, 0x96	; 150
    4e82:	88 e9       	ldi	r24, 0x98	; 152
    4e84:	9b e4       	ldi	r25, 0x4B	; 75
    4e86:	0e 94 1e e4 	call	0x1c83c	; 0x1c83c <__divsf3>
    4e8a:	0e 94 8b e4 	call	0x1c916	; 0x1c916 <__fixunssfsi>
    4e8e:	68 83       	st	Y, r22
    4e90:	79 83       	std	Y+1, r23	; 0x01
    4e92:	8a 83       	std	Y+2, r24	; 0x02
    4e94:	9b 83       	std	Y+3, r25	; 0x03
    4e96:	c6 01       	movw	r24, r12
    4e98:	df 91       	pop	r29
    4e9a:	cf 91       	pop	r28
    4e9c:	ff 90       	pop	r15
    4e9e:	ef 90       	pop	r14
    4ea0:	df 90       	pop	r13
    4ea2:	cf 90       	pop	r12
    4ea4:	bf 90       	pop	r11
    4ea6:	af 90       	pop	r10
    4ea8:	9f 90       	pop	r9
    4eaa:	8f 90       	pop	r8
    4eac:	7f 90       	pop	r7
    4eae:	6f 90       	pop	r6
    4eb0:	5f 90       	pop	r5
    4eb2:	4f 90       	pop	r4
    4eb4:	08 95       	ret

00004eb6 <uart_init>:
    4eb6:	a6 e0       	ldi	r26, 0x06	; 6
    4eb8:	b0 e0       	ldi	r27, 0x00	; 0
    4eba:	e1 e6       	ldi	r30, 0x61	; 97
    4ebc:	f7 e2       	ldi	r31, 0x27	; 39
    4ebe:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
    4ec2:	1e 82       	std	Y+6, r1	; 0x06
    4ec4:	1d 82       	std	Y+5, r1	; 0x05
    4ec6:	81 11       	cpse	r24, r1
    4ec8:	36 c0       	rjmp	.+108    	; 0x4f36 <uart_init+0x80>
    4eca:	cb 01       	movw	r24, r22
    4ecc:	ba 01       	movw	r22, r20
    4ece:	9e 01       	movw	r18, r28
    4ed0:	2f 5f       	subi	r18, 0xFF	; 255
    4ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ed4:	ae 01       	movw	r20, r28
    4ed6:	4b 5f       	subi	r20, 0xFB	; 251
    4ed8:	5f 4f       	sbci	r21, 0xFF	; 255
    4eda:	53 df       	rcall	.-346    	; 0x4d82 <uart_ubr>
    4edc:	f8 94       	cli
    4ede:	10 92 f6 19 	sts	0x19F6, r1	; 0x8019f6 <uarts+0x4>
    4ee2:	10 92 f5 19 	sts	0x19F5, r1	; 0x8019f5 <uarts+0x3>
    4ee6:	10 92 f2 19 	sts	0x19F2, r1	; 0x8019f2 <uarts>
    4eea:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <uarts+0x1>
    4eee:	10 92 f4 19 	sts	0x19F4, r1	; 0x8019f4 <uarts+0x2>
    4ef2:	10 92 f7 19 	sts	0x19F7, r1	; 0x8019f7 <uarts+0x5>
    4ef6:	78 94       	sei
    4ef8:	f8 94       	cli
    4efa:	58 9a       	sbi	0x0b, 0	; 11
    4efc:	59 9a       	sbi	0x0b, 1	; 11
    4efe:	50 98       	cbi	0x0a, 0	; 10
    4f00:	51 9a       	sbi	0x0a, 1	; 10
    4f02:	28 e9       	ldi	r18, 0x98	; 152
    4f04:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    4f08:	2d 81       	ldd	r18, Y+5	; 0x05
    4f0a:	3e 81       	ldd	r19, Y+6	; 0x06
    4f0c:	23 2b       	or	r18, r19
    4f0e:	19 f0       	breq	.+6      	; 0x4f16 <uart_init+0x60>
    4f10:	22 e0       	ldi	r18, 0x02	; 2
    4f12:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4f16:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    4f1a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    4f1e:	78 94       	sei
    4f20:	64 e5       	ldi	r22, 0x54	; 84
    4f22:	78 e2       	ldi	r23, 0x28	; 40
    4f24:	89 e6       	ldi	r24, 0x69	; 105
    4f26:	98 e2       	ldi	r25, 0x28	; 40
    4f28:	0e 94 ac 77 	call	0xef58	; 0xef58 <fdevopen>
    4f2c:	69 81       	ldd	r22, Y+1	; 0x01
    4f2e:	7a 81       	ldd	r23, Y+2	; 0x02
    4f30:	8b 81       	ldd	r24, Y+3	; 0x03
    4f32:	9c 81       	ldd	r25, Y+4	; 0x04
    4f34:	03 c0       	rjmp	.+6      	; 0x4f3c <uart_init+0x86>
    4f36:	60 e0       	ldi	r22, 0x00	; 0
    4f38:	70 e0       	ldi	r23, 0x00	; 0
    4f3a:	cb 01       	movw	r24, r22
    4f3c:	26 96       	adiw	r28, 0x06	; 6
    4f3e:	e2 e0       	ldi	r30, 0x02	; 2
    4f40:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00004f44 <uart_rx_interrupt>:
    4f44:	cf 93       	push	r28
    4f46:	df 93       	push	r29
    4f48:	27 e5       	ldi	r18, 0x57	; 87
    4f4a:	82 9f       	mul	r24, r18
    4f4c:	c0 01       	movw	r24, r0
    4f4e:	11 24       	eor	r1, r1
    4f50:	fc 01       	movw	r30, r24
    4f52:	ee 50       	subi	r30, 0x0E	; 14
    4f54:	f6 4e       	sbci	r31, 0xE6	; 230
    4f56:	83 81       	ldd	r24, Z+3	; 0x03
    4f58:	94 81       	ldd	r25, Z+4	; 0x04
    4f5a:	80 35       	cpi	r24, 0x50	; 80
    4f5c:	91 05       	cpc	r25, r1
    4f5e:	84 f4       	brge	.+32     	; 0x4f80 <uart_rx_interrupt+0x3c>
    4f60:	30 81       	ld	r19, Z
    4f62:	21 e0       	ldi	r18, 0x01	; 1
    4f64:	23 0f       	add	r18, r19
    4f66:	20 83       	st	Z, r18
    4f68:	ef 01       	movw	r28, r30
    4f6a:	c3 0f       	add	r28, r19
    4f6c:	d1 1d       	adc	r29, r1
    4f6e:	6f 77       	andi	r22, 0x7F	; 127
    4f70:	6e 83       	std	Y+6, r22	; 0x06
    4f72:	01 96       	adiw	r24, 0x01	; 1
    4f74:	94 83       	std	Z+4, r25	; 0x04
    4f76:	83 83       	std	Z+3, r24	; 0x03
    4f78:	20 35       	cpi	r18, 0x50	; 80
    4f7a:	28 f0       	brcs	.+10     	; 0x4f86 <uart_rx_interrupt+0x42>
    4f7c:	10 82       	st	Z, r1
    4f7e:	03 c0       	rjmp	.+6      	; 0x4f86 <uart_rx_interrupt+0x42>
    4f80:	85 81       	ldd	r24, Z+5	; 0x05
    4f82:	81 60       	ori	r24, 0x01	; 1
    4f84:	85 83       	std	Z+5, r24	; 0x05
    4f86:	df 91       	pop	r29
    4f88:	cf 91       	pop	r28
    4f8a:	08 95       	ret

00004f8c <__vector_20>:
    4f8c:	1f 92       	push	r1
    4f8e:	0f 92       	push	r0
    4f90:	0f b6       	in	r0, 0x3f	; 63
    4f92:	0f 92       	push	r0
    4f94:	11 24       	eor	r1, r1
    4f96:	0b b6       	in	r0, 0x3b	; 59
    4f98:	0f 92       	push	r0
    4f9a:	2f 93       	push	r18
    4f9c:	3f 93       	push	r19
    4f9e:	4f 93       	push	r20
    4fa0:	5f 93       	push	r21
    4fa2:	6f 93       	push	r22
    4fa4:	7f 93       	push	r23
    4fa6:	8f 93       	push	r24
    4fa8:	9f 93       	push	r25
    4faa:	af 93       	push	r26
    4fac:	bf 93       	push	r27
    4fae:	ef 93       	push	r30
    4fb0:	ff 93       	push	r31
    4fb2:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    4fb6:	80 e0       	ldi	r24, 0x00	; 0
    4fb8:	c5 df       	rcall	.-118    	; 0x4f44 <uart_rx_interrupt>
    4fba:	ff 91       	pop	r31
    4fbc:	ef 91       	pop	r30
    4fbe:	bf 91       	pop	r27
    4fc0:	af 91       	pop	r26
    4fc2:	9f 91       	pop	r25
    4fc4:	8f 91       	pop	r24
    4fc6:	7f 91       	pop	r23
    4fc8:	6f 91       	pop	r22
    4fca:	5f 91       	pop	r21
    4fcc:	4f 91       	pop	r20
    4fce:	3f 91       	pop	r19
    4fd0:	2f 91       	pop	r18
    4fd2:	0f 90       	pop	r0
    4fd4:	0b be       	out	0x3b, r0	; 59
    4fd6:	0f 90       	pop	r0
    4fd8:	0f be       	out	0x3f, r0	; 63
    4fda:	0f 90       	pop	r0
    4fdc:	1f 90       	pop	r1
    4fde:	18 95       	reti

00004fe0 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    4fe0:	81 11       	cpse	r24, r1
    4fe2:	07 c0       	rjmp	.+14     	; 0x4ff2 <uart_rx_count+0x12>
        return(EOF);

    cli();
    4fe4:	f8 94       	cli

    count = uarts[uart].rx_count;
    4fe6:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <uarts+0x3>
    4fea:	90 91 f6 19 	lds	r25, 0x19F6	; 0x8019f6 <uarts+0x4>

    sei();
    4fee:	78 94       	sei

    return (count );
    4ff0:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    4ff2:	8f ef       	ldi	r24, 0xFF	; 255
    4ff4:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    4ff6:	08 95       	ret

00004ff8 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    4ff8:	81 11       	cpse	r24, r1
    4ffa:	21 c0       	rjmp	.+66     	; 0x503e <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    4ffc:	80 e0       	ldi	r24, 0x00	; 0
    4ffe:	f0 df       	rcall	.-32     	; 0x4fe0 <uart_rx_count>
    5000:	18 16       	cp	r1, r24
    5002:	19 06       	cpc	r1, r25
    5004:	dc f7       	brge	.-10     	; 0x4ffc <uart_get_tail+0x4>
        ;

    cli();
    5006:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    5008:	e0 91 f3 19 	lds	r30, 0x19F3	; 0x8019f3 <uarts+0x1>
    500c:	91 e0       	ldi	r25, 0x01	; 1
    500e:	9e 0f       	add	r25, r30
    5010:	90 93 f3 19 	sts	0x19F3, r25	; 0x8019f3 <uarts+0x1>
    5014:	f0 e0       	ldi	r31, 0x00	; 0
    5016:	ee 50       	subi	r30, 0x0E	; 14
    5018:	f6 4e       	sbci	r31, 0xE6	; 230
    501a:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    501c:	90 35       	cpi	r25, 0x50	; 80
    501e:	10 f0       	brcs	.+4      	; 0x5024 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    5020:	10 92 f3 19 	sts	0x19F3, r1	; 0x8019f3 <uarts+0x1>
    uarts[uart].rx_count--;
    5024:	20 91 f5 19 	lds	r18, 0x19F5	; 0x8019f5 <uarts+0x3>
    5028:	30 91 f6 19 	lds	r19, 0x19F6	; 0x8019f6 <uarts+0x4>
    502c:	21 50       	subi	r18, 0x01	; 1
    502e:	31 09       	sbc	r19, r1
    5030:	30 93 f6 19 	sts	0x19F6, r19	; 0x8019f6 <uarts+0x4>
    5034:	20 93 f5 19 	sts	0x19F5, r18	; 0x8019f5 <uarts+0x3>
    sei();
    5038:	78 94       	sei

    return (c & 0xff);
    503a:	90 e0       	ldi	r25, 0x00	; 0
    503c:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    503e:	8f ef       	ldi	r24, 0xFF	; 255
    5040:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    5042:	08 95       	ret

00005044 <uart_rx_byte>:
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    return( uart_get_tail(uart) & 0xff);
    5044:	d9 df       	rcall	.-78     	; 0x4ff8 <uart_get_tail>
}
    5046:	99 27       	eor	r25, r25
    5048:	08 95       	ret

0000504a <uart_tx_byte>:
/// @param[in] uart: uart number.
///
/// @return void.
int uart_tx_byte(int c, uint8_t uart)
{
    if(uart == 0)
    504a:	61 11       	cpse	r22, r1
    504c:	09 c0       	rjmp	.+18     	; 0x5060 <uart_tx_byte+0x16>
    {
        while (!BIT_TST(UCSR0A, UDRE0))
    504e:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5052:	25 ff       	sbrs	r18, 5
    5054:	fc cf       	rjmp	.-8      	; 0x504e <uart_tx_byte+0x4>
            ;
        UDR0 = c & 0x7f;
    5056:	28 2f       	mov	r18, r24
    5058:	2f 77       	andi	r18, 0x7F	; 127
    505a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        return(c);
    505e:	08 95       	ret
    }
#ifdef UARTS > 1
    if(uart == 1)
    5060:	61 30       	cpi	r22, 0x01	; 1
    5062:	49 f4       	brne	.+18     	; 0x5076 <uart_tx_byte+0x2c>
    {
        while (!BIT_TST(UCSR1A, UDRE1))
    5064:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5068:	25 ff       	sbrs	r18, 5
    506a:	fc cf       	rjmp	.-8      	; 0x5064 <uart_tx_byte+0x1a>
            ;
        UDR1 = c & 0x7f;
    506c:	28 2f       	mov	r18, r24
    506e:	2f 77       	andi	r18, 0x7F	; 127
    5070:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    5074:	08 95       	ret
        return(c);
    }
#endif
    return(EOF);
    5076:	8f ef       	ldi	r24, 0xFF	; 255
    5078:	9f ef       	ldi	r25, 0xFF	; 255
}
    507a:	08 95       	ret

0000507c <uart_getchar>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_getchar(uint8_t uart)
{
    507c:	cf 93       	push	r28
    uint8_t c;

    if(uart >= UARTS)
    507e:	81 11       	cpse	r24, r1
    5080:	0f c0       	rjmp	.+30     	; 0x50a0 <uart_getchar+0x24>
        break;
    }
    if(c == '\r')
        c = '\n';
#endif
    c = uart_rx_byte(uart);
    5082:	e0 df       	rcall	.-64     	; 0x5044 <uart_rx_byte>
    5084:	c8 2f       	mov	r28, r24
    uart_tx_byte(c, uart);
    5086:	60 e0       	ldi	r22, 0x00	; 0
    5088:	90 e0       	ldi	r25, 0x00	; 0
    508a:	df df       	rcall	.-66     	; 0x504a <uart_tx_byte>
    if(c == '\r')
    508c:	cd 30       	cpi	r28, 0x0D	; 13
    508e:	29 f4       	brne	.+10     	; 0x509a <uart_getchar+0x1e>
    {
        c = '\n';
        uart_tx_byte(c, uart);
    5090:	60 e0       	ldi	r22, 0x00	; 0
    5092:	8a e0       	ldi	r24, 0x0A	; 10
    5094:	90 e0       	ldi	r25, 0x00	; 0
    5096:	d9 df       	rcall	.-78     	; 0x504a <uart_tx_byte>
#endif
    c = uart_rx_byte(uart);
    uart_tx_byte(c, uart);
    if(c == '\r')
    {
        c = '\n';
    5098:	ca e0       	ldi	r28, 0x0A	; 10
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
    509a:	8c 2f       	mov	r24, r28
    509c:	90 e0       	ldi	r25, 0x00	; 0
    509e:	02 c0       	rjmp	.+4      	; 0x50a4 <uart_getchar+0x28>
int uart_getchar(uint8_t uart)
{
    uint8_t c;

    if(uart >= UARTS)
        return(EOF);
    50a0:	8f ef       	ldi	r24, 0xFF	; 255
    50a2:	9f ef       	ldi	r25, 0xFF	; 255
        c = '\n';
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
}
    50a4:	cf 91       	pop	r28
    50a6:	08 95       	ret

000050a8 <uart0_getchar>:
///
/// @return  uart_getchar(0);.
/// @see fdevopen() from avr-libc.
int uart0_getchar( void *f  __attribute__((unused)))
{
    return( uart_getchar(0) );
    50a8:	80 e0       	ldi	r24, 0x00	; 0
    50aa:	e8 cf       	rjmp	.-48     	; 0x507c <uart_getchar>
}
    50ac:	08 95       	ret

000050ae <uart_putchar>:
/// @param[in] c: transmit character.
/// @param[in] uart: uart number.
///
/// @return void.
int uart_putchar(int c, int uart)
{
    50ae:	1f 93       	push	r17
    50b0:	cf 93       	push	r28
    50b2:	df 93       	push	r29
    50b4:	ec 01       	movw	r28, r24
    50b6:	16 2f       	mov	r17, r22
    uart_tx_byte(c, uart);
    50b8:	c8 df       	rcall	.-112    	; 0x504a <uart_tx_byte>

    if( c == '\n' )
    50ba:	ca 30       	cpi	r28, 0x0A	; 10
    50bc:	d1 05       	cpc	r29, r1
    50be:	21 f4       	brne	.+8      	; 0x50c8 <uart_putchar+0x1a>
        uart_tx_byte('\r', uart);
    50c0:	61 2f       	mov	r22, r17
    50c2:	8d e0       	ldi	r24, 0x0D	; 13
    50c4:	90 e0       	ldi	r25, 0x00	; 0
    50c6:	c1 df       	rcall	.-126    	; 0x504a <uart_tx_byte>

    return(c);
}
    50c8:	ce 01       	movw	r24, r28
    50ca:	df 91       	pop	r29
    50cc:	cf 91       	pop	r28
    50ce:	1f 91       	pop	r17
    50d0:	08 95       	ret

000050d2 <uart0_putchar>:
/// @param[in] f: unused FILE *stream pointer.
///
/// @return  uart_putchar(c, 0);.
/// @see fdevopen() from avr-libc.
int uart0_putchar(int c, void *f  __attribute__((unused)))
{
    50d2:	cf 93       	push	r28
    50d4:	df 93       	push	r29
    50d6:	ec 01       	movw	r28, r24
    uart_putchar(c, 0);
    50d8:	60 e0       	ldi	r22, 0x00	; 0
    50da:	70 e0       	ldi	r23, 0x00	; 0
    50dc:	e8 df       	rcall	.-48     	; 0x50ae <uart_putchar>
    return(c);
}
    50de:	ce 01       	movw	r24, r28
    50e0:	df 91       	pop	r29
    50e2:	cf 91       	pop	r28
    50e4:	08 95       	ret

000050e6 <uart_keyhit>:
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
    return ( uart_rx_count( uart ) );
    50e6:	7c cf       	rjmp	.-264    	; 0x4fe0 <uart_rx_count>
}
    50e8:	08 95       	ret

000050ea <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    50ea:	cf 92       	push	r12
    50ec:	df 92       	push	r13
    50ee:	ef 92       	push	r14
    50f0:	ff 92       	push	r15
    50f2:	6b 01       	movw	r12, r22
    50f4:	7c 01       	movw	r14, r24
    50f6:	80 91 55 17 	lds	r24, 0x1755	; 0x801755 <SPI0_Speed_value>
    50fa:	90 91 56 17 	lds	r25, 0x1756	; 0x801756 <SPI0_Speed_value+0x1>
    50fe:	a0 91 57 17 	lds	r26, 0x1757	; 0x801757 <SPI0_Speed_value+0x2>
    5102:	b0 91 58 17 	lds	r27, 0x1758	; 0x801758 <SPI0_Speed_value+0x3>
    5106:	8c 15       	cp	r24, r12
    5108:	9d 05       	cpc	r25, r13
    510a:	ae 05       	cpc	r26, r14
    510c:	bf 05       	cpc	r27, r15
    510e:	09 f4       	brne	.+2      	; 0x5112 <SPI0_Speed+0x28>
    5110:	4e c0       	rjmp	.+156    	; 0x51ae <SPI0_Speed+0xc4>
    5112:	60 e0       	ldi	r22, 0x00	; 0
    5114:	7d e2       	ldi	r23, 0x2D	; 45
    5116:	81 e3       	ldi	r24, 0x31	; 49
    5118:	91 e0       	ldi	r25, 0x01	; 1
    511a:	a7 01       	movw	r20, r14
    511c:	96 01       	movw	r18, r12
    511e:	0e 94 ef e2 	call	0x1c5de	; 0x1c5de <__udivmodsi4>
    5122:	20 38       	cpi	r18, 0x80	; 128
    5124:	31 05       	cpc	r19, r1
    5126:	41 05       	cpc	r20, r1
    5128:	51 05       	cpc	r21, r1
    512a:	28 f4       	brcc	.+10     	; 0x5136 <SPI0_Speed+0x4c>
    512c:	20 34       	cpi	r18, 0x40	; 64
    512e:	31 05       	cpc	r19, r1
    5130:	41 05       	cpc	r20, r1
    5132:	51 05       	cpc	r21, r1
    5134:	30 f0       	brcs	.+12     	; 0x5142 <SPI0_Speed+0x58>
    5136:	8d b5       	in	r24, 0x2d	; 45
    5138:	8e 7f       	andi	r24, 0xFE	; 254
    513a:	8d bd       	out	0x2d, r24	; 45
    513c:	8c b5       	in	r24, 0x2c	; 44
    513e:	82 60       	ori	r24, 0x02	; 2
    5140:	1b c0       	rjmp	.+54     	; 0x5178 <SPI0_Speed+0x8e>
    5142:	8d b5       	in	r24, 0x2d	; 45
    5144:	20 32       	cpi	r18, 0x20	; 32
    5146:	31 05       	cpc	r19, r1
    5148:	41 05       	cpc	r20, r1
    514a:	51 05       	cpc	r21, r1
    514c:	28 f0       	brcs	.+10     	; 0x5158 <SPI0_Speed+0x6e>
    514e:	81 60       	ori	r24, 0x01	; 1
    5150:	8d bd       	out	0x2d, r24	; 45
    5152:	8c b5       	in	r24, 0x2c	; 44
    5154:	82 60       	ori	r24, 0x02	; 2
    5156:	1f c0       	rjmp	.+62     	; 0x5196 <SPI0_Speed+0xac>
    5158:	20 31       	cpi	r18, 0x10	; 16
    515a:	31 05       	cpc	r19, r1
    515c:	41 05       	cpc	r20, r1
    515e:	51 05       	cpc	r21, r1
    5160:	10 f0       	brcs	.+4      	; 0x5166 <SPI0_Speed+0x7c>
    5162:	8e 7f       	andi	r24, 0xFE	; 254
    5164:	06 c0       	rjmp	.+12     	; 0x5172 <SPI0_Speed+0x88>
    5166:	28 30       	cpi	r18, 0x08	; 8
    5168:	31 05       	cpc	r19, r1
    516a:	41 05       	cpc	r20, r1
    516c:	51 05       	cpc	r21, r1
    516e:	40 f0       	brcs	.+16     	; 0x5180 <SPI0_Speed+0x96>
    5170:	81 60       	ori	r24, 0x01	; 1
    5172:	8d bd       	out	0x2d, r24	; 45
    5174:	8c b5       	in	r24, 0x2c	; 44
    5176:	8d 7f       	andi	r24, 0xFD	; 253
    5178:	8c bd       	out	0x2c, r24	; 44
    517a:	8c b5       	in	r24, 0x2c	; 44
    517c:	81 60       	ori	r24, 0x01	; 1
    517e:	0e c0       	rjmp	.+28     	; 0x519c <SPI0_Speed+0xb2>
    5180:	24 30       	cpi	r18, 0x04	; 4
    5182:	31 05       	cpc	r19, r1
    5184:	41 05       	cpc	r20, r1
    5186:	51 05       	cpc	r21, r1
    5188:	10 f0       	brcs	.+4      	; 0x518e <SPI0_Speed+0xa4>
    518a:	8e 7f       	andi	r24, 0xFE	; 254
    518c:	01 c0       	rjmp	.+2      	; 0x5190 <SPI0_Speed+0xa6>
    518e:	81 60       	ori	r24, 0x01	; 1
    5190:	8d bd       	out	0x2d, r24	; 45
    5192:	8c b5       	in	r24, 0x2c	; 44
    5194:	8d 7f       	andi	r24, 0xFD	; 253
    5196:	8c bd       	out	0x2c, r24	; 44
    5198:	8c b5       	in	r24, 0x2c	; 44
    519a:	8e 7f       	andi	r24, 0xFE	; 254
    519c:	8c bd       	out	0x2c, r24	; 44
    519e:	c0 92 55 17 	sts	0x1755, r12	; 0x801755 <SPI0_Speed_value>
    51a2:	d0 92 56 17 	sts	0x1756, r13	; 0x801756 <SPI0_Speed_value+0x1>
    51a6:	e0 92 57 17 	sts	0x1757, r14	; 0x801757 <SPI0_Speed_value+0x2>
    51aa:	f0 92 58 17 	sts	0x1758, r15	; 0x801758 <SPI0_Speed_value+0x3>
    51ae:	ff 90       	pop	r15
    51b0:	ef 90       	pop	r14
    51b2:	df 90       	pop	r13
    51b4:	cf 90       	pop	r12
    51b6:	08 95       	ret

000051b8 <SPI0_Mode>:
    51b8:	cf 93       	push	r28
    51ba:	df 93       	push	r29
    51bc:	00 d0       	rcall	.+0      	; 0x51be <SPI0_Mode+0x6>
    51be:	00 d0       	rcall	.+0      	; 0x51c0 <SPI0_Mode+0x8>
    51c0:	1f 92       	push	r1
    51c2:	ec 01       	movw	r28, r24
    51c4:	81 30       	cpi	r24, 0x01	; 1
    51c6:	91 05       	cpc	r25, r1
    51c8:	71 f0       	breq	.+28     	; 0x51e6 <SPI0_Mode+0x2e>
    51ca:	2c f4       	brge	.+10     	; 0x51d6 <SPI0_Mode+0x1e>
    51cc:	89 2b       	or	r24, r25
    51ce:	c1 f4       	brne	.+48     	; 0x5200 <SPI0_Mode+0x48>
    51d0:	8c b5       	in	r24, 0x2c	; 44
    51d2:	87 7f       	andi	r24, 0xF7	; 247
    51d4:	11 c0       	rjmp	.+34     	; 0x51f8 <SPI0_Mode+0x40>
    51d6:	82 30       	cpi	r24, 0x02	; 2
    51d8:	91 05       	cpc	r25, r1
    51da:	61 f0       	breq	.+24     	; 0x51f4 <SPI0_Mode+0x3c>
    51dc:	03 97       	sbiw	r24, 0x03	; 3
    51de:	81 f4       	brne	.+32     	; 0x5200 <SPI0_Mode+0x48>
    51e0:	8c b5       	in	r24, 0x2c	; 44
    51e2:	88 60       	ori	r24, 0x08	; 8
    51e4:	02 c0       	rjmp	.+4      	; 0x51ea <SPI0_Mode+0x32>
    51e6:	8c b5       	in	r24, 0x2c	; 44
    51e8:	87 7f       	andi	r24, 0xF7	; 247
    51ea:	8c bd       	out	0x2c, r24	; 44
    51ec:	8c b5       	in	r24, 0x2c	; 44
    51ee:	84 60       	ori	r24, 0x04	; 4
    51f0:	8c bd       	out	0x2c, r24	; 44
    51f2:	12 c0       	rjmp	.+36     	; 0x5218 <SPI0_Mode+0x60>
    51f4:	8c b5       	in	r24, 0x2c	; 44
    51f6:	88 60       	ori	r24, 0x08	; 8
    51f8:	8c bd       	out	0x2c, r24	; 44
    51fa:	8c b5       	in	r24, 0x2c	; 44
    51fc:	8b 7f       	andi	r24, 0xFB	; 251
    51fe:	f8 cf       	rjmp	.-16     	; 0x51f0 <SPI0_Mode+0x38>
    5200:	ed b7       	in	r30, 0x3d	; 61
    5202:	fe b7       	in	r31, 0x3e	; 62
    5204:	d5 83       	std	Z+5, r29	; 0x05
    5206:	c4 83       	std	Z+4, r28	; 0x04
    5208:	84 e1       	ldi	r24, 0x14	; 20
    520a:	93 e0       	ldi	r25, 0x03	; 3
    520c:	a0 e0       	ldi	r26, 0x00	; 0
    520e:	81 83       	std	Z+1, r24	; 0x01
    5210:	92 83       	std	Z+2, r25	; 0x02
    5212:	a3 83       	std	Z+3, r26	; 0x03
    5214:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    5218:	d0 93 54 17 	sts	0x1754, r29	; 0x801754 <SPI0_Mode_value+0x1>
    521c:	c0 93 53 17 	sts	0x1753, r28	; 0x801753 <SPI0_Mode_value>
    5220:	cd b7       	in	r28, 0x3d	; 61
    5222:	de b7       	in	r29, 0x3e	; 62
    5224:	25 96       	adiw	r28, 0x05	; 5
    5226:	e2 e0       	ldi	r30, 0x02	; 2
    5228:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

0000522c <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    522c:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    522e:	0d b4       	in	r0, 0x2d	; 45
    5230:	07 fe       	sbrs	r0, 7
    5232:	fd cf       	rjmp	.-6      	; 0x522e <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5234:	8e b5       	in	r24, 0x2e	; 46
}
    5236:	08 95       	ret

00005238 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5238:	cf 92       	push	r12
    523a:	df 92       	push	r13
    523c:	ef 92       	push	r14
    523e:	ff 92       	push	r15
    5240:	cf 93       	push	r28
    5242:	df 93       	push	r29
    5244:	1f 92       	push	r1
    5246:	cd b7       	in	r28, 0x3d	; 61
    5248:	de b7       	in	r29, 0x3e	; 62
    524a:	6b 01       	movw	r12, r22
    524c:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    524e:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    5250:	2f 9a       	sbi	0x05, 7	; 5
    5252:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    5254:	2d 9a       	sbi	0x05, 5	; 5
    5256:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    5258:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    525a:	2c 98       	cbi	0x05, 4	; 5
    525c:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    525e:	8c b5       	in	r24, 0x2c	; 44
    5260:	80 61       	ori	r24, 0x10	; 16
    5262:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    5264:	8c b5       	in	r24, 0x2c	; 44
    5266:	80 64       	ori	r24, 0x40	; 64
    5268:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    526a:	8d b5       	in	r24, 0x2d	; 45
    526c:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    526e:	8e b5       	in	r24, 0x2e	; 46
    5270:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    5272:	80 e0       	ldi	r24, 0x00	; 0
    5274:	90 e0       	ldi	r25, 0x00	; 0
    5276:	a0 df       	rcall	.-192    	; 0x51b8 <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    5278:	c7 01       	movw	r24, r14
    527a:	b6 01       	movw	r22, r12
    527c:	36 df       	rcall	.-404    	; 0x50ea <SPI0_Speed>

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    527e:	8f ef       	ldi	r24, 0xFF	; 255
    5280:	d5 df       	rcall	.-86     	; 0x522c <SPI0_TXRX_Byte>
    5282:	0f 90       	pop	r0
    SPI0_Init_state = 1;

}
    5284:	df 91       	pop	r29
    5286:	cf 91       	pop	r28
    5288:	ff 90       	pop	r15
    528a:	ef 90       	pop	r14
    528c:	df 90       	pop	r13
    528e:	cf 90       	pop	r12
    5290:	08 95       	ret

00005292 <SPI0_TX>:
    5292:	0f 93       	push	r16
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    5294:	1f 93       	push	r17
    5296:	cf 93       	push	r28
    5298:	df 93       	push	r29
    529a:	8c 01       	movw	r16, r24
    529c:	eb 01       	movw	r28, r22

    while(count > 0)
    529e:	1c 16       	cp	r1, r28
    52a0:	1d 06       	cpc	r1, r29
    52a2:	34 f4       	brge	.+12     	; 0x52b0 <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    52a4:	f8 01       	movw	r30, r16
    52a6:	81 91       	ld	r24, Z+
    52a8:	8f 01       	movw	r16, r30
    52aa:	c0 df       	rcall	.-128    	; 0x522c <SPI0_TXRX_Byte>
        ++data;
        --count;
    52ac:	21 97       	sbiw	r28, 0x01	; 1
    52ae:	f7 cf       	rjmp	.-18     	; 0x529e <SPI0_TX+0xc>
    }
}
    52b0:	df 91       	pop	r29
    52b2:	cf 91       	pop	r28
    52b4:	1f 91       	pop	r17
    52b6:	0f 91       	pop	r16
    52b8:	08 95       	ret

000052ba <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    52ba:	0f 93       	push	r16
    52bc:	1f 93       	push	r17
    52be:	cf 93       	push	r28
    52c0:	df 93       	push	r29
    52c2:	8c 01       	movw	r16, r24
    52c4:	eb 01       	movw	r28, r22

    while(count > 0)
    52c6:	1c 16       	cp	r1, r28
    52c8:	1d 06       	cpc	r1, r29
    52ca:	44 f4       	brge	.+16     	; 0x52dc <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    52cc:	f8 01       	movw	r30, r16
    52ce:	80 81       	ld	r24, Z
    52d0:	ad df       	rcall	.-166    	; 0x522c <SPI0_TXRX_Byte>
    52d2:	f8 01       	movw	r30, r16
    52d4:	81 93       	st	Z+, r24
    52d6:	8f 01       	movw	r16, r30
        ++data;
        --count;
    52d8:	21 97       	sbiw	r28, 0x01	; 1
    52da:	f5 cf       	rjmp	.-22     	; 0x52c6 <SPI0_TXRX+0xc>
    }
}
    52dc:	df 91       	pop	r29
    52de:	cf 91       	pop	r28
    52e0:	1f 91       	pop	r17
    52e2:	0f 91       	pop	r16
    52e4:	08 95       	ret

000052e6 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    52e6:	0f 93       	push	r16
    52e8:	1f 93       	push	r17
    52ea:	cf 93       	push	r28
    52ec:	df 93       	push	r29
    52ee:	8c 01       	movw	r16, r24
    52f0:	eb 01       	movw	r28, r22

    while(count > 0)
    52f2:	1c 16       	cp	r1, r28
    52f4:	1d 06       	cpc	r1, r29
    52f6:	3c f4       	brge	.+14     	; 0x5306 <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    52f8:	8f ef       	ldi	r24, 0xFF	; 255
    52fa:	98 df       	rcall	.-208    	; 0x522c <SPI0_TXRX_Byte>
    52fc:	f8 01       	movw	r30, r16
    52fe:	81 93       	st	Z+, r24
    5300:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5302:	21 97       	sbiw	r28, 0x01	; 1
    5304:	f6 cf       	rjmp	.-20     	; 0x52f2 <SPI0_RX+0xc>
    }
}
    5306:	df 91       	pop	r29
    5308:	cf 91       	pop	r28
    530a:	1f 91       	pop	r17
    530c:	0f 91       	pop	r16
    530e:	08 95       	ret

00005310 <i2c_timer>:
int8_t i2c_ok()
{
	if (i2c.flags) 
		return(0);
	return(1);
}
    5310:	2f b7       	in	r18, 0x3f	; 63
    5312:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <i2c+0x1>
    5316:	81 11       	cpse	r24, r1
    5318:	04 c0       	rjmp	.+8      	; 0x5322 <i2c_timer+0x12>
    531a:	80 91 4b 1a 	lds	r24, 0x1A4B	; 0x801a4b <i2c+0x2>
    531e:	81 11       	cpse	r24, r1
    5320:	0b c0       	rjmp	.+22     	; 0x5338 <i2c_timer+0x28>
    5322:	80 91 4d 1a 	lds	r24, 0x1A4D	; 0x801a4d <i2c+0x4>
    5326:	90 91 4e 1a 	lds	r25, 0x1A4E	; 0x801a4e <i2c+0x5>
    532a:	00 97       	sbiw	r24, 0x00	; 0
    532c:	29 f0       	breq	.+10     	; 0x5338 <i2c_timer+0x28>
    532e:	01 97       	sbiw	r24, 0x01	; 1
    5330:	90 93 4e 1a 	sts	0x1A4E, r25	; 0x801a4e <i2c+0x5>
    5334:	80 93 4d 1a 	sts	0x1A4D, r24	; 0x801a4d <i2c+0x4>
    5338:	2f bf       	out	0x3f, r18	; 63
    533a:	08 95       	ret

0000533c <i2c_check_op>:
    533c:	ad b7       	in	r26, 0x3d	; 61
    533e:	be b7       	in	r27, 0x3e	; 62
    5340:	17 97       	sbiw	r26, 0x07	; 7
    5342:	0f b6       	in	r0, 0x3f	; 63
    5344:	f8 94       	cli
    5346:	be bf       	out	0x3e, r27	; 62
    5348:	0f be       	out	0x3f, r0	; 63
    534a:	ad bf       	out	0x3d, r26	; 61
    534c:	28 2f       	mov	r18, r24
    534e:	08 2e       	mov	r0, r24
    5350:	00 0c       	add	r0, r0
    5352:	33 0b       	sbc	r19, r19
    5354:	80 31       	cpi	r24, 0x10	; 16
    5356:	88 f0       	brcs	.+34     	; 0x537a <i2c_check_op+0x3e>
    5358:	80 e1       	ldi	r24, 0x10	; 16
    535a:	90 e0       	ldi	r25, 0x00	; 0
    535c:	ed b7       	in	r30, 0x3d	; 61
    535e:	fe b7       	in	r31, 0x3e	; 62
    5360:	97 83       	std	Z+7, r25	; 0x07
    5362:	86 83       	std	Z+6, r24	; 0x06
    5364:	35 83       	std	Z+5, r19	; 0x05
    5366:	24 83       	std	Z+4, r18	; 0x04
    5368:	89 e2       	ldi	r24, 0x29	; 41
    536a:	94 e0       	ldi	r25, 0x04	; 4
    536c:	a0 e0       	ldi	r26, 0x00	; 0
    536e:	81 83       	std	Z+1, r24	; 0x01
    5370:	92 83       	std	Z+2, r25	; 0x02
    5372:	a3 83       	std	Z+3, r26	; 0x03
    5374:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    5378:	24 c0       	rjmp	.+72     	; 0x53c2 <i2c_check_op+0x86>
    537a:	f9 01       	movw	r30, r18
    537c:	ee 0f       	add	r30, r30
    537e:	ff 1f       	adc	r31, r31
    5380:	e6 5a       	subi	r30, 0xA6	; 166
    5382:	f8 4e       	sbci	r31, 0xE8	; 232
    5384:	01 90       	ld	r0, Z+
    5386:	f0 81       	ld	r31, Z
    5388:	e0 2d       	mov	r30, r0
    538a:	30 97       	sbiw	r30, 0x00	; 0
    538c:	d1 f0       	breq	.+52     	; 0x53c2 <i2c_check_op+0x86>
    538e:	80 85       	ldd	r24, Z+8	; 0x08
    5390:	91 85       	ldd	r25, Z+9	; 0x09
    5392:	89 2b       	or	r24, r25
    5394:	39 f4       	brne	.+14     	; 0x53a4 <i2c_check_op+0x68>
    5396:	ed b7       	in	r30, 0x3d	; 61
    5398:	fe b7       	in	r31, 0x3e	; 62
    539a:	35 83       	std	Z+5, r19	; 0x05
    539c:	24 83       	std	Z+4, r18	; 0x04
    539e:	80 e1       	ldi	r24, 0x10	; 16
    53a0:	94 e0       	ldi	r25, 0x04	; 4
    53a2:	09 c0       	rjmp	.+18     	; 0x53b6 <i2c_check_op+0x7a>
    53a4:	86 81       	ldd	r24, Z+6	; 0x06
    53a6:	81 11       	cpse	r24, r1
    53a8:	0e c0       	rjmp	.+28     	; 0x53c6 <i2c_check_op+0x8a>
    53aa:	ed b7       	in	r30, 0x3d	; 61
    53ac:	fe b7       	in	r31, 0x3e	; 62
    53ae:	35 83       	std	Z+5, r19	; 0x05
    53b0:	24 83       	std	Z+4, r18	; 0x04
    53b2:	8a ef       	ldi	r24, 0xFA	; 250
    53b4:	93 e0       	ldi	r25, 0x03	; 3
    53b6:	a0 e0       	ldi	r26, 0x00	; 0
    53b8:	81 83       	std	Z+1, r24	; 0x01
    53ba:	92 83       	std	Z+2, r25	; 0x02
    53bc:	a3 83       	std	Z+3, r26	; 0x03
    53be:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    53c2:	80 e0       	ldi	r24, 0x00	; 0
    53c4:	01 c0       	rjmp	.+2      	; 0x53c8 <i2c_check_op+0x8c>
    53c6:	81 e0       	ldi	r24, 0x01	; 1
    53c8:	ad b7       	in	r26, 0x3d	; 61
    53ca:	be b7       	in	r27, 0x3e	; 62
    53cc:	17 96       	adiw	r26, 0x07	; 7
    53ce:	0f b6       	in	r0, 0x3f	; 63
    53d0:	f8 94       	cli
    53d2:	be bf       	out	0x3e, r27	; 62
    53d4:	0f be       	out	0x3f, r0	; 63
    53d6:	ad bf       	out	0x3d, r26	; 61
    53d8:	08 95       	ret

000053da <i2c_task_init>:
    53da:	8f b7       	in	r24, 0x3f	; 63
    53dc:	f8 94       	cli
    53de:	ea e5       	ldi	r30, 0x5A	; 90
    53e0:	f7 e1       	ldi	r31, 0x17	; 23
    53e2:	11 92       	st	Z+, r1
    53e4:	11 92       	st	Z+, r1
    53e6:	97 e1       	ldi	r25, 0x17	; 23
    53e8:	ea 37       	cpi	r30, 0x7A	; 122
    53ea:	f9 07       	cpc	r31, r25
    53ec:	d1 f7       	brne	.-12     	; 0x53e2 <i2c_task_init+0x8>
    53ee:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <i2c_task>
    53f2:	91 e0       	ldi	r25, 0x01	; 1
    53f4:	90 93 7c 17 	sts	0x177C, r25	; 0x80177c <i2c_task+0x2>
    53f8:	10 92 7b 17 	sts	0x177B, r1	; 0x80177b <i2c_task+0x1>
    53fc:	10 92 7d 17 	sts	0x177D, r1	; 0x80177d <i2c_task+0x3>
    5400:	8f bf       	out	0x3f, r24	; 63
    5402:	08 95       	ret

00005404 <i2c_task_op_add>:
    5404:	ef 92       	push	r14
    5406:	ff 92       	push	r15
    5408:	0f 93       	push	r16
    540a:	1f 93       	push	r17
    540c:	cf 93       	push	r28
    540e:	df 93       	push	r29
    5410:	d8 2f       	mov	r29, r24
    5412:	c6 2f       	mov	r28, r22
    5414:	7a 01       	movw	r14, r20
    5416:	02 2f       	mov	r16, r18
    5418:	1f b7       	in	r17, 0x3f	; 63
    541a:	6a e0       	ldi	r22, 0x0A	; 10
    541c:	70 e0       	ldi	r23, 0x00	; 0
    541e:	81 e0       	ldi	r24, 0x01	; 1
    5420:	90 e0       	ldi	r25, 0x00	; 0
    5422:	a8 db       	rcall	.-2224   	; 0x4b74 <safecalloc>
    5424:	fc 01       	movw	r30, r24
    5426:	89 2b       	or	r24, r25
    5428:	89 f0       	breq	.+34     	; 0x544c <i2c_task_op_add+0x48>
    542a:	f8 94       	cli
    542c:	11 82       	std	Z+1, r1	; 0x01
    542e:	12 82       	std	Z+2, r1	; 0x02
    5430:	dd 0f       	add	r29, r29
    5432:	c1 70       	andi	r28, 0x01	; 1
    5434:	cd 2b       	or	r28, r29
    5436:	c0 83       	st	Z, r28
    5438:	8a e0       	ldi	r24, 0x0A	; 10
    543a:	90 e0       	ldi	r25, 0x00	; 0
    543c:	95 83       	std	Z+5, r25	; 0x05
    543e:	84 83       	std	Z+4, r24	; 0x04
    5440:	13 82       	std	Z+3, r1	; 0x03
    5442:	06 83       	std	Z+6, r16	; 0x06
    5444:	17 82       	std	Z+7, r1	; 0x07
    5446:	f1 86       	std	Z+9, r15	; 0x09
    5448:	e0 86       	std	Z+8, r14	; 0x08
    544a:	1f bf       	out	0x3f, r17	; 63
    544c:	cf 01       	movw	r24, r30
    544e:	cd b7       	in	r28, 0x3d	; 61
    5450:	de b7       	in	r29, 0x3e	; 62
    5452:	e6 e0       	ldi	r30, 0x06	; 6
    5454:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

00005458 <i2c_init>:
    5458:	cf 93       	push	r28
    545a:	00 d0       	rcall	.+0      	; 0x545c <i2c_init+0x4>
    545c:	1f 92       	push	r1
    545e:	9b 01       	movw	r18, r22
    5460:	ac 01       	movw	r20, r24
    5462:	cf b7       	in	r28, 0x3f	; 63
    5464:	60 e0       	ldi	r22, 0x00	; 0
    5466:	7d e2       	ldi	r23, 0x2D	; 45
    5468:	81 e3       	ldi	r24, 0x31	; 49
    546a:	91 e0       	ldi	r25, 0x01	; 1
    546c:	0e 94 ef e2 	call	0x1c5de	; 0x1c5de <__udivmodsi4>
    5470:	da 01       	movw	r26, r20
    5472:	c9 01       	movw	r24, r18
    5474:	40 97       	sbiw	r24, 0x10	; 16
    5476:	a1 09       	sbc	r26, r1
    5478:	b1 09       	sbc	r27, r1
    547a:	ac 01       	movw	r20, r24
    547c:	bd 01       	movw	r22, r26
    547e:	76 95       	lsr	r23
    5480:	67 95       	ror	r22
    5482:	57 95       	ror	r21
    5484:	47 95       	ror	r20
    5486:	ca 01       	movw	r24, r20
    5488:	88 27       	eor	r24, r24
    548a:	89 2b       	or	r24, r25
    548c:	59 f0       	breq	.+22     	; 0x54a4 <i2c_init+0x4c>
    548e:	8e ed       	ldi	r24, 0xDE	; 222
    5490:	93 e0       	ldi	r25, 0x03	; 3
    5492:	a0 e0       	ldi	r26, 0x00	; 0
    5494:	ed b7       	in	r30, 0x3d	; 61
    5496:	fe b7       	in	r31, 0x3e	; 62
    5498:	81 83       	std	Z+1, r24	; 0x01
    549a:	92 83       	std	Z+2, r25	; 0x02
    549c:	a3 83       	std	Z+3, r26	; 0x03
    549e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    54a2:	3a c0       	rjmp	.+116    	; 0x5518 <i2c_init+0xc0>
    54a4:	f8 94       	cli
    54a6:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    54aa:	10 92 4a 1a 	sts	0x1A4A, r1	; 0x801a4a <i2c+0x1>
    54ae:	81 e0       	ldi	r24, 0x01	; 1
    54b0:	80 93 4b 1a 	sts	0x1A4B, r24	; 0x801a4b <i2c+0x2>
    54b4:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <i2c_task>
    54b8:	80 93 7c 17 	sts	0x177C, r24	; 0x80177c <i2c_task+0x2>
    54bc:	40 9a       	sbi	0x08, 0	; 8
    54be:	41 9a       	sbi	0x08, 1	; 8
    54c0:	84 e8       	ldi	r24, 0x84	; 132
    54c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    54c6:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    54ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    54ce:	8c 7f       	andi	r24, 0xFC	; 252
    54d0:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    54d4:	80 91 59 17 	lds	r24, 0x1759	; 0x801759 <i2c_init_status>
    54d8:	81 11       	cpse	r24, r1
    54da:	1d c0       	rjmp	.+58     	; 0x5516 <i2c_init+0xbe>
    54dc:	ea e5       	ldi	r30, 0x5A	; 90
    54de:	f7 e1       	ldi	r31, 0x17	; 23
    54e0:	11 92       	st	Z+, r1
    54e2:	11 92       	st	Z+, r1
    54e4:	27 e1       	ldi	r18, 0x17	; 23
    54e6:	ea 37       	cpi	r30, 0x7A	; 122
    54e8:	f2 07       	cpc	r31, r18
    54ea:	d1 f7       	brne	.-12     	; 0x54e0 <i2c_init+0x88>
    54ec:	61 e0       	ldi	r22, 0x01	; 1
    54ee:	70 e0       	ldi	r23, 0x00	; 0
    54f0:	88 e8       	ldi	r24, 0x88	; 136
    54f2:	99 e2       	ldi	r25, 0x29	; 41
    54f4:	0e 94 bc 32 	call	0x6578	; 0x6578 <set_timers>
    54f8:	01 96       	adiw	r24, 0x01	; 1
    54fa:	51 f4       	brne	.+20     	; 0x5510 <i2c_init+0xb8>
    54fc:	87 ec       	ldi	r24, 0xC7	; 199
    54fe:	93 e0       	ldi	r25, 0x03	; 3
    5500:	a0 e0       	ldi	r26, 0x00	; 0
    5502:	ed b7       	in	r30, 0x3d	; 61
    5504:	fe b7       	in	r31, 0x3e	; 62
    5506:	81 83       	std	Z+1, r24	; 0x01
    5508:	92 83       	std	Z+2, r25	; 0x02
    550a:	a3 83       	std	Z+3, r26	; 0x03
    550c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    5510:	81 e0       	ldi	r24, 0x01	; 1
    5512:	80 93 59 17 	sts	0x1759, r24	; 0x801759 <i2c_init_status>
    5516:	cf bf       	out	0x3f, r28	; 63
    5518:	0f 90       	pop	r0
    551a:	0f 90       	pop	r0
    551c:	0f 90       	pop	r0
    551e:	cf 91       	pop	r28
    5520:	08 95       	ret

00005522 <i2c_done>:
///@brief Is i2c structure done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_done()
{
	delayus(1);
    5522:	61 e0       	ldi	r22, 0x01	; 1
    5524:	70 e0       	ldi	r23, 0x00	; 0
    5526:	80 e0       	ldi	r24, 0x00	; 0
    5528:	90 e0       	ldi	r25, 0x00	; 0
    552a:	a5 db       	rcall	.-2230   	; 0x4c76 <delayus>
	if(!i2c.enable || i2c.done )
    552c:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <i2c+0x1>
    5530:	88 23       	and	r24, r24
    5532:	39 f0       	breq	.+14     	; 0x5542 <i2c_done+0x20>
		return(1);
    5534:	81 e0       	ldi	r24, 0x01	; 1
    5536:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <i2c+0x2>
    553a:	91 11       	cpse	r25, r1
    553c:	03 c0       	rjmp	.+6      	; 0x5544 <i2c_done+0x22>
    553e:	80 e0       	ldi	r24, 0x00	; 0
    5540:	08 95       	ret
    5542:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    5544:	08 95       	ret

00005546 <i2c_task_done>:
///@brief Are all i2c_task_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_task_done()
{
	delayus(1);
    5546:	61 e0       	ldi	r22, 0x01	; 1
    5548:	70 e0       	ldi	r23, 0x00	; 0
    554a:	80 e0       	ldi	r24, 0x00	; 0
    554c:	90 e0       	ldi	r25, 0x00	; 0
    554e:	93 db       	rcall	.-2266   	; 0x4c76 <delayus>
	if(!i2c_task.enable || i2c_task.done )
    5550:	80 91 7a 17 	lds	r24, 0x177A	; 0x80177a <i2c_task>
    5554:	88 23       	and	r24, r24
    5556:	39 f0       	breq	.+14     	; 0x5566 <i2c_task_done+0x20>
		return(1);
    5558:	81 e0       	ldi	r24, 0x01	; 1
    555a:	90 91 7c 17 	lds	r25, 0x177C	; 0x80177c <i2c_task+0x2>
    555e:	91 11       	cpse	r25, r1
    5560:	03 c0       	rjmp	.+6      	; 0x5568 <i2c_task_done+0x22>
    5562:	80 e0       	ldi	r24, 0x00	; 0
    5564:	08 95       	ret
    5566:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    5568:	08 95       	ret

0000556a <i2c_send_start>:
///@brief Send I2C START and enable interrupts
///
/// @return  void
void i2c_send_start()
{
	i2c.done = 0;
    556a:	e9 e4       	ldi	r30, 0x49	; 73
    556c:	fa e1       	ldi	r31, 0x1A	; 26
    556e:	12 82       	std	Z+2, r1	; 0x02
	i2c.enable = 1;
    5570:	81 e0       	ldi	r24, 0x01	; 1
    5572:	81 83       	std	Z+1, r24	; 0x01
	i2c.timeout = I2C_TIMEOUT;		// Start timeout timer
    5574:	8a e0       	ldi	r24, 0x0A	; 10
    5576:	90 e0       	ldi	r25, 0x00	; 0
    5578:	95 83       	std	Z+5, r25	; 0x05
    557a:	84 83       	std	Z+4, r24	; 0x04
	// Start a transactions
	// TWI Enable
	// TWI Interrupt Enable
	// TWI Interrupt Clear
	// TWI SEND RESTART
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    557c:	85 ea       	ldi	r24, 0xA5	; 165
    557e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5582:	08 95       	ret

00005584 <i2c_task_run>:

/// @brief Run all valid i2c_task_op[] tasks
///
/// @return  void
void i2c_task_run()
{
    5584:	ef 92       	push	r14
    5586:	ff 92       	push	r15
    5588:	0f 93       	push	r16
    558a:	1f 93       	push	r17
    558c:	cf 93       	push	r28
    558e:	df 93       	push	r29
	uint8_t sreg = SREG;
    5590:	ff b6       	in	r15, 0x3f	; 63
	i2c_op_t *o;
    uint8_t run = 0;
	int8_t i;


	cli();
    5592:	f8 94       	cli
	i2c_task.done = 0;
    5594:	10 92 7c 17 	sts	0x177C, r1	; 0x80177c <i2c_task+0x2>
	i2c_task.error = 0;
    5598:	10 92 7d 17 	sts	0x177D, r1	; 0x80177d <i2c_task+0x3>
	i2c_task.ind = 0;
    559c:	10 92 7b 17 	sts	0x177B, r1	; 0x80177b <i2c_task+0x1>

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    55a0:	c0 e0       	ldi	r28, 0x00	; 0
/// @return  void
void i2c_task_run()
{
	uint8_t sreg = SREG;
	i2c_op_t *o;
    uint8_t run = 0;
    55a2:	d0 e0       	ldi	r29, 0x00	; 0

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
	{
		o = i2c_task_op[i];
		o->enable = 1;
    55a4:	ee 24       	eor	r14, r14
    55a6:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->ind = 0;
		o->timeout = I2C_TIMEOUT;
    55a8:	0a e0       	ldi	r16, 0x0A	; 10
    55aa:	10 e0       	ldi	r17, 0x00	; 0
	i2c_task.done = 0;
	i2c_task.error = 0;
	i2c_task.ind = 0;

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    55ac:	8c 2f       	mov	r24, r28
    55ae:	c6 de       	rcall	.-628    	; 0x533c <i2c_check_op>
    55b0:	88 23       	and	r24, r24
    55b2:	d1 f0       	breq	.+52     	; 0x55e8 <i2c_task_run+0x64>
	{
		o = i2c_task_op[i];
    55b4:	ec 2f       	mov	r30, r28
    55b6:	ee 0f       	add	r30, r30
    55b8:	ff 0b       	sbc	r31, r31
    55ba:	e6 5a       	subi	r30, 0xA6	; 166
    55bc:	f8 4e       	sbci	r31, 0xE8	; 232
    55be:	01 90       	ld	r0, Z+
    55c0:	f0 81       	ld	r31, Z
    55c2:	e0 2d       	mov	r30, r0
		o->enable = 1;
    55c4:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    55c6:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    55c8:	13 82       	std	Z+3, r1	; 0x03
		o->ind = 0;
    55ca:	17 82       	std	Z+7, r1	; 0x07
		o->timeout = I2C_TIMEOUT;
    55cc:	15 83       	std	Z+5, r17	; 0x05
    55ce:	04 83       	std	Z+4, r16	; 0x04
		if(!run)
    55d0:	d1 11       	cpse	r29, r1
    55d2:	07 c0       	rjmp	.+14     	; 0x55e2 <i2c_task_run+0x5e>
		{
			run = 1;
			i2c = *o;
    55d4:	8a e0       	ldi	r24, 0x0A	; 10
    55d6:	a9 e4       	ldi	r26, 0x49	; 73
    55d8:	ba e1       	ldi	r27, 0x1A	; 26
    55da:	01 90       	ld	r0, Z+
    55dc:	0d 92       	st	X+, r0
    55de:	8a 95       	dec	r24
    55e0:	e1 f7       	brne	.-8      	; 0x55da <i2c_task_run+0x56>
    55e2:	cf 5f       	subi	r28, 0xFF	; 255
    55e4:	d1 e0       	ldi	r29, 0x01	; 1
    55e6:	e2 cf       	rjmp	.-60     	; 0x55ac <i2c_task_run+0x28>
		}
	}

	if(run)
    55e8:	dd 23       	and	r29, r29
    55ea:	91 f0       	breq	.+36     	; 0x5610 <i2c_task_run+0x8c>
	{
		// TASK callback
		i2c_callback = i2c_task_next_op;
    55ec:	8f e5       	ldi	r24, 0x5F	; 95
    55ee:	9b e2       	ldi	r25, 0x2B	; 43
    55f0:	90 93 7f 17 	sts	0x177F, r25	; 0x80177f <i2c_callback+0x1>
    55f4:	80 93 7e 17 	sts	0x177E, r24	; 0x80177e <i2c_callback>

		i2c_task.enable = 1;
    55f8:	81 e0       	ldi	r24, 0x01	; 1
    55fa:	80 93 7a 17 	sts	0x177A, r24	; 0x80177a <i2c_task>
		i2c_task.done = 0;
    55fe:	10 92 7c 17 	sts	0x177C, r1	; 0x80177c <i2c_task+0x2>

        // Reset Status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5602:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5606:	8c 7f       	andi	r24, 0xFC	; 252
    5608:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // TWI Interrupt Clear
        // TWI SEND RESTART
        // TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
        // Disable Slave Mode

		i2c_send_start();
    560c:	ae df       	rcall	.-164    	; 0x556a <i2c_send_start>
    560e:	15 c0       	rjmp	.+42     	; 0x563a <i2c_task_run+0xb6>
        // FIXME we should notify the user ?
		// Nothing to DO
		// User Error

		// TASK callback
		i2c_callback = NULL;
    5610:	10 92 7f 17 	sts	0x177F, r1	; 0x80177f <i2c_callback+0x1>
    5614:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_callback>

		// TASK Nothing to DO
		i2c_task.enable = 0;
    5618:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <i2c_task>
		i2c_task.done = 1;
    561c:	81 e0       	ldi	r24, 0x01	; 1
    561e:	80 93 7c 17 	sts	0x177C, r24	; 0x80177c <i2c_task+0x2>

		// I2C Nothing to do
        i2c.done = 1;
    5622:	80 93 4b 1a 	sts	0x1A4B, r24	; 0x801a4b <i2c+0x2>
        i2c.enable = 0;
    5626:	10 92 4a 1a 	sts	0x1A4A, r1	; 0x801a4a <i2c+0x1>

        // TWI Enable
        // TWI Disable Enable
        // TWI Interrupt Clear
        TWCR = _BV(TWEN) | _BV(TWINT);
    562a:	84 e8       	ldi	r24, 0x84	; 132
    562c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        // Reset status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5630:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5634:	8c 7f       	andi	r24, 0xFC	; 252
    5636:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // Disable Slave Mode
        TWAR = 0;
    563a:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}
	// Disable Slave Mode

	SREG = sreg;
    563e:	ff be       	out	0x3f, r15	; 63

}
    5640:	cd b7       	in	r28, 0x3d	; 61
    5642:	de b7       	in	r29, 0x3e	; 62
    5644:	e6 e0       	ldi	r30, 0x06	; 6
    5646:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

0000564a <i2c_fn>:
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  1 = OK, 0 = ERROR
uint8_t i2c_fn(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	uint8_t sreg = SREG;
    564a:	9f b7       	in	r25, 0x3f	; 63
	
    cli();
    564c:	f8 94       	cli

	// sign task only
	i2c_callback = NULL;
    564e:	10 92 7f 17 	sts	0x177F, r1	; 0x80177f <i2c_callback+0x1>
    5652:	10 92 7e 17 	sts	0x177E, r1	; 0x80177e <i2c_callback>

	i2c.enable = 1; // Enabled
    5656:	31 e0       	ldi	r19, 0x01	; 1
    5658:	30 93 4a 1a 	sts	0x1A4A, r19	; 0x801a4a <i2c+0x1>
	i2c.done = 0;
    565c:	10 92 4b 1a 	sts	0x1A4B, r1	; 0x801a4b <i2c+0x2>
    i2c.address = (address << 1) | (mode & 1);
    5660:	88 0f       	add	r24, r24
    5662:	61 70       	andi	r22, 0x01	; 1
    5664:	68 2b       	or	r22, r24
    5666:	60 93 49 1a 	sts	0x1A49, r22	; 0x801a49 <i2c>
	i2c.flags = 0;
    566a:	10 92 4c 1a 	sts	0x1A4C, r1	; 0x801a4c <i2c+0x3>
    i2c.len = len;
    566e:	20 93 4f 1a 	sts	0x1A4F, r18	; 0x801a4f <i2c+0x6>
    i2c.ind = 0;
    5672:	10 92 50 1a 	sts	0x1A50, r1	; 0x801a50 <i2c+0x7>
    i2c.buf = buf;
    5676:	50 93 52 1a 	sts	0x1A52, r21	; 0x801a52 <i2c+0x9>
    567a:	40 93 51 1a 	sts	0x1A51, r20	; 0x801a51 <i2c+0x8>

	// Reset Status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    567e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5682:	8c 7f       	andi	r24, 0xFC	; 252
    5684:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Disable Slave Mode
	TWAR = 0;
    5688:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	SREG = sreg;
    568c:	9f bf       	out	0x3f, r25	; 63

	i2c_send_start();
    568e:	6d df       	rcall	.-294    	; 0x556a <i2c_send_start>
	{
		printf("timeout: %d\r",(int)i2c.timeout);
	}
	printf("\n");
#else
	while(! i2c_done() )
    5690:	48 df       	rcall	.-368    	; 0x5522 <i2c_done>
    5692:	88 23       	and	r24, r24
    5694:	e9 f3       	breq	.-6      	; 0x5690 <i2c_fn+0x46>
    5696:	81 e0       	ldi	r24, 0x01	; 1
		;
#endif
	return( i2c.flags ? 0 : 1);
    5698:	90 91 4c 1a 	lds	r25, 0x1A4C	; 0x801a4c <i2c+0x3>
    569c:	91 11       	cpse	r25, r1
    569e:	80 e0       	ldi	r24, 0x00	; 0
    56a0:	08 95       	ret

000056a2 <i2c_send_stop>:
}
    56a2:	e9 e4       	ldi	r30, 0x49	; 73
///
/// @return  void
void i2c_send_stop()
{
    // All transactions are done
    i2c.done = 1;
    56a4:	fa e1       	ldi	r31, 0x1A	; 26
    56a6:	81 e0       	ldi	r24, 0x01	; 1
    56a8:	82 83       	std	Z+2, r24	; 0x02
    i2c.enable = 0;
    56aa:	11 82       	std	Z+1, r1	; 0x01
    // We are DONE
    // TWI Enable
    // TWI Interrupt Disable
    // TWI Interrupt Clear
    // TWI SEND STOP
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    56ac:	84 e9       	ldi	r24, 0x94	; 148
    56ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	delayus(10);
    56b2:	6a e0       	ldi	r22, 0x0A	; 10
    56b4:	70 e0       	ldi	r23, 0x00	; 0
    56b6:	80 e0       	ldi	r24, 0x00	; 0
    56b8:	90 e0       	ldi	r25, 0x00	; 0
    56ba:	dd ca       	rjmp	.-2630   	; 0x4c76 <delayus>
    56bc:	08 95       	ret

000056be <i2c_task_next_op>:

///@brief I2C task ISR callback function
///
/// @return  void
int8_t i2c_task_next_op()
{
    56be:	cf 93       	push	r28
    56c0:	df 93       	push	r29
	i2c_op_t *o;

	// NOTE: we are in an ISR do not disable other interrupts

	if(i2c_task.enable)
    56c2:	80 91 7a 17 	lds	r24, 0x177A	; 0x80177a <i2c_task>
    56c6:	88 23       	and	r24, r24
    56c8:	09 f4       	brne	.+2      	; 0x56cc <i2c_task_next_op+0xe>
    56ca:	46 c0       	rjmp	.+140    	; 0x5758 <i2c_task_next_op+0x9a>
	{
		// Save state of LAST operation
		if(i2c_check_op(i2c_task.ind) )
    56cc:	80 91 7b 17 	lds	r24, 0x177B	; 0x80177b <i2c_task+0x1>
    56d0:	35 de       	rcall	.-918    	; 0x533c <i2c_check_op>
    56d2:	88 23       	and	r24, r24
    56d4:	b1 f0       	breq	.+44     	; 0x5702 <i2c_task_next_op+0x44>
		{
			o = i2c_task_op[i2c_task.ind];
    56d6:	e0 91 7b 17 	lds	r30, 0x177B	; 0x80177b <i2c_task+0x1>
    56da:	ee 0f       	add	r30, r30
    56dc:	ff 0b       	sbc	r31, r31
    56de:	e6 5a       	subi	r30, 0xA6	; 166
    56e0:	f8 4e       	sbci	r31, 0xE8	; 232
    56e2:	c0 81       	ld	r28, Z
    56e4:	d1 81       	ldd	r29, Z+1	; 0x01
			// Save state in last opperation
			*o = i2c;
    56e6:	8a e0       	ldi	r24, 0x0A	; 10
    56e8:	e9 e4       	ldi	r30, 0x49	; 73
    56ea:	fa e1       	ldi	r31, 0x1A	; 26
    56ec:	de 01       	movw	r26, r28
    56ee:	01 90       	ld	r0, Z+
    56f0:	0d 92       	st	X+, r0
    56f2:	8a 95       	dec	r24
    56f4:	e1 f7       	brne	.-8      	; 0x56ee <i2c_task_next_op+0x30>
			if(o->flags)
    56f6:	8b 81       	ldd	r24, Y+3	; 0x03
    56f8:	88 23       	and	r24, r24
    56fa:	19 f0       	breq	.+6      	; 0x5702 <i2c_task_next_op+0x44>
				i2c_task.error = 1;
    56fc:	81 e0       	ldi	r24, 0x01	; 1
    56fe:	80 93 7d 17 	sts	0x177D, r24	; 0x80177d <i2c_task+0x3>
		}

		if(i2c_check_op(i2c_task.ind+1) )
    5702:	80 91 7b 17 	lds	r24, 0x177B	; 0x80177b <i2c_task+0x1>
    5706:	8f 5f       	subi	r24, 0xFF	; 255
    5708:	19 de       	rcall	.-974    	; 0x533c <i2c_check_op>
    570a:	88 23       	and	r24, r24
    570c:	29 f1       	breq	.+74     	; 0x5758 <i2c_task_next_op+0x9a>
		{
			i2c_task.ind++;
    570e:	e0 91 7b 17 	lds	r30, 0x177B	; 0x80177b <i2c_task+0x1>
    5712:	ef 5f       	subi	r30, 0xFF	; 255
    5714:	e0 93 7b 17 	sts	0x177B, r30	; 0x80177b <i2c_task+0x1>

			o = i2c_task_op[i2c_task.ind];
    5718:	ee 0f       	add	r30, r30
    571a:	ff 0b       	sbc	r31, r31
    571c:	e6 5a       	subi	r30, 0xA6	; 166
    571e:	f8 4e       	sbci	r31, 0xE8	; 232
    5720:	01 90       	ld	r0, Z+
    5722:	f0 81       	ld	r31, Z
    5724:	e0 2d       	mov	r30, r0

			if( o->enable == 1 || o->done == 0)
    5726:	81 81       	ldd	r24, Z+1	; 0x01
    5728:	81 30       	cpi	r24, 0x01	; 1
    572a:	19 f0       	breq	.+6      	; 0x5732 <i2c_task_next_op+0x74>
    572c:	82 81       	ldd	r24, Z+2	; 0x02
    572e:	81 11       	cpse	r24, r1
    5730:	13 c0       	rjmp	.+38     	; 0x5758 <i2c_task_next_op+0x9a>
			{
				o->timeout = I2C_TIMEOUT;
    5732:	8a e0       	ldi	r24, 0x0A	; 10
    5734:	90 e0       	ldi	r25, 0x00	; 0
    5736:	95 83       	std	Z+5, r25	; 0x05
    5738:	84 83       	std	Z+4, r24	; 0x04
				o->flags = 0;
    573a:	13 82       	std	Z+3, r1	; 0x03
				o->ind = 0;
    573c:	17 82       	std	Z+7, r1	; 0x07
				o->enable = 1;
    573e:	81 e0       	ldi	r24, 0x01	; 1
    5740:	81 83       	std	Z+1, r24	; 0x01
				o->done = 0;
    5742:	12 82       	std	Z+2, r1	; 0x02

				i2c = *o;
    5744:	8a e0       	ldi	r24, 0x0A	; 10
    5746:	a9 e4       	ldi	r26, 0x49	; 73
    5748:	ba e1       	ldi	r27, 0x1A	; 26
    574a:	01 90       	ld	r0, Z+
    574c:	0d 92       	st	X+, r0
    574e:	8a 95       	dec	r24

				i2c_send_start();
    5750:	e1 f7       	brne	.-8      	; 0x574a <i2c_task_next_op+0x8c>
    5752:	0b df       	rcall	.-490    	; 0x556a <i2c_send_start>

				return(1);
    5754:	81 e0       	ldi	r24, 0x01	; 1
    5756:	0f c0       	rjmp	.+30     	; 0x5776 <i2c_task_next_op+0xb8>
			}
		}
	}
	// program error
	// Disable TASK
	i2c_task.enable = 0;
    5758:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <i2c_task>
	i2c_task.done = 1;
    575c:	81 e0       	ldi	r24, 0x01	; 1
    575e:	80 93 7c 17 	sts	0x177C, r24	; 0x80177c <i2c_task+0x2>

	// I2C disable
	i2c.done = 1;
    5762:	80 93 4b 1a 	sts	0x1A4B, r24	; 0x801a4b <i2c+0x2>
	i2c.enable = 0;
    5766:	10 92 4a 1a 	sts	0x1A4A, r1	; 0x801a4a <i2c+0x1>
	i2c.flags = 0;
    576a:	10 92 4c 1a 	sts	0x1A4C, r1	; 0x801a4c <i2c+0x3>
	i2c.ind = 0;
    576e:	10 92 50 1a 	sts	0x1A50, r1	; 0x801a50 <i2c+0x7>

	i2c_send_stop();
    5772:	97 df       	rcall	.-210    	; 0x56a2 <i2c_send_stop>

	return(0);
    5774:	80 e0       	ldi	r24, 0x00	; 0
}
    5776:	df 91       	pop	r29
    5778:	cf 91       	pop	r28
    577a:	08 95       	ret

0000577c <i2c_next>:
{

	// IF we have an i2c_callback() function then
	// it must save status and reset i2c structure for next operation

	if(i2c_callback)
    577c:	e0 91 7e 17 	lds	r30, 0x177E	; 0x80177e <i2c_callback>
    5780:	f0 91 7f 17 	lds	r31, 0x177F	; 0x80177f <i2c_callback+0x1>
    5784:	30 97       	sbiw	r30, 0x00	; 0
    5786:	11 f0       	breq	.+4      	; 0x578c <i2c_next+0x10>
	    i2c_callback();
    5788:	09 95       	icall
    578a:	08 95       	ret
	else
		i2c_send_stop();
    578c:	8a cf       	rjmp	.-236    	; 0x56a2 <i2c_send_stop>
    578e:	08 95       	ret

00005790 <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    5790:	1f 92       	push	r1
    5792:	0f 92       	push	r0
    5794:	0f b6       	in	r0, 0x3f	; 63
    5796:	0f 92       	push	r0
    5798:	11 24       	eor	r1, r1
    579a:	0b b6       	in	r0, 0x3b	; 59
    579c:	0f 92       	push	r0
    579e:	2f 93       	push	r18
    57a0:	3f 93       	push	r19
    57a2:	4f 93       	push	r20
    57a4:	5f 93       	push	r21
    57a6:	6f 93       	push	r22
    57a8:	7f 93       	push	r23
    57aa:	8f 93       	push	r24
    57ac:	9f 93       	push	r25
    57ae:	af 93       	push	r26
    57b0:	bf 93       	push	r27
    57b2:	ef 93       	push	r30
    57b4:	ff 93       	push	r31
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    57b6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	// Program errors - these should not happen
	if(!i2c.enable || i2c.done || !i2c.buf || !i2c.len )
    57ba:	90 91 4a 1a 	lds	r25, 0x1A4A	; 0x801a4a <i2c+0x1>
    57be:	99 23       	and	r25, r25
    57c0:	09 f1       	breq	.+66     	; 0x5804 <__vector_26+0x74>
    57c2:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <i2c+0x2>
    57c6:	91 11       	cpse	r25, r1
    57c8:	1d c0       	rjmp	.+58     	; 0x5804 <__vector_26+0x74>
    57ca:	20 91 51 1a 	lds	r18, 0x1A51	; 0x801a51 <i2c+0x8>
    57ce:	30 91 52 1a 	lds	r19, 0x1A52	; 0x801a52 <i2c+0x9>
    57d2:	21 15       	cp	r18, r1
    57d4:	31 05       	cpc	r19, r1
    57d6:	b1 f0       	breq	.+44     	; 0x5804 <__vector_26+0x74>
    57d8:	90 91 4f 1a 	lds	r25, 0x1A4F	; 0x801a4f <i2c+0x6>
    57dc:	99 23       	and	r25, r25
    57de:	91 f0       	breq	.+36     	; 0x5804 <__vector_26+0x74>
		i2c_send_stop();
		return;
	}

	// TUMEOUT ? STOP everything
	if(i2c.timeout == 0)
    57e0:	40 91 4d 1a 	lds	r20, 0x1A4D	; 0x801a4d <i2c+0x4>
    57e4:	50 91 4e 1a 	lds	r21, 0x1A4E	; 0x801a4e <i2c+0x5>
    57e8:	45 2b       	or	r20, r21
    57ea:	71 f4       	brne	.+28     	; 0x5808 <__vector_26+0x78>
	{
		i2c.flags |= (I2C_OP_TIMEOUT);
    57ec:	80 91 4c 1a 	lds	r24, 0x1A4C	; 0x801a4c <i2c+0x3>
    57f0:	81 60       	ori	r24, 0x01	; 1
    57f2:	80 93 4c 1a 	sts	0x1A4C, r24	; 0x801a4c <i2c+0x3>
		i2c_task.enable = 0;
    57f6:	10 92 7a 17 	sts	0x177A, r1	; 0x80177a <i2c_task>
		i2c_task.done = 1;
    57fa:	81 e0       	ldi	r24, 0x01	; 1
    57fc:	80 93 7c 17 	sts	0x177C, r24	; 0x80177c <i2c_task+0x2>
		i2c_task.error = 1;
    5800:	80 93 7d 17 	sts	0x177D, r24	; 0x80177d <i2c_task+0x3>
		i2c_send_stop();
    5804:	4e df       	rcall	.-356    	; 0x56a2 <i2c_send_stop>
		return;
    5806:	9b c0       	rjmp	.+310    	; 0x593e <__vector_26+0x1ae>
	}

	// Master Receiver mode
	switch (status)
    5808:	88 7f       	andi	r24, 0xF8	; 248
    580a:	80 33       	cpi	r24, 0x30	; 48
    580c:	09 f4       	brne	.+2      	; 0x5810 <__vector_26+0x80>
    580e:	83 c0       	rjmp	.+262    	; 0x5916 <__vector_26+0x186>
    5810:	70 f4       	brcc	.+28     	; 0x582e <__vector_26+0x9e>
    5812:	88 31       	cpi	r24, 0x18	; 24
    5814:	09 f1       	breq	.+66     	; 0x5858 <__vector_26+0xc8>
    5816:	28 f4       	brcc	.+10     	; 0x5822 <__vector_26+0x92>
    5818:	88 30       	cpi	r24, 0x08	; 8
    581a:	c9 f0       	breq	.+50     	; 0x584e <__vector_26+0xbe>
    581c:	80 31       	cpi	r24, 0x10	; 16
    581e:	b9 f0       	breq	.+46     	; 0x584e <__vector_26+0xbe>
    5820:	83 c0       	rjmp	.+262    	; 0x5928 <__vector_26+0x198>
    5822:	80 32       	cpi	r24, 0x20	; 32
    5824:	09 f4       	brne	.+2      	; 0x5828 <__vector_26+0x98>
    5826:	65 c0       	rjmp	.+202    	; 0x58f2 <__vector_26+0x162>
    5828:	88 32       	cpi	r24, 0x28	; 40
    582a:	b1 f0       	breq	.+44     	; 0x5858 <__vector_26+0xc8>
    582c:	7d c0       	rjmp	.+250    	; 0x5928 <__vector_26+0x198>
    582e:	88 34       	cpi	r24, 0x48	; 72
    5830:	09 f4       	brne	.+2      	; 0x5834 <__vector_26+0xa4>
    5832:	68 c0       	rjmp	.+208    	; 0x5904 <__vector_26+0x174>
    5834:	38 f4       	brcc	.+14     	; 0x5844 <__vector_26+0xb4>
    5836:	88 33       	cpi	r24, 0x38	; 56
    5838:	09 f4       	brne	.+2      	; 0x583c <__vector_26+0xac>
    583a:	57 c0       	rjmp	.+174    	; 0x58ea <__vector_26+0x15a>
    583c:	80 34       	cpi	r24, 0x40	; 64
    583e:	09 f4       	brne	.+2      	; 0x5842 <__vector_26+0xb2>
    5840:	42 c0       	rjmp	.+132    	; 0x58c6 <__vector_26+0x136>
    5842:	72 c0       	rjmp	.+228    	; 0x5928 <__vector_26+0x198>
    5844:	80 35       	cpi	r24, 0x50	; 80
    5846:	79 f1       	breq	.+94     	; 0x58a6 <__vector_26+0x116>
    5848:	88 35       	cpi	r24, 0x58	; 88
    584a:	b9 f0       	breq	.+46     	; 0x587a <__vector_26+0xea>
    584c:	6d c0       	rjmp	.+218    	; 0x5928 <__vector_26+0x198>
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			i2c.ind = 0;
    584e:	10 92 50 1a 	sts	0x1A50, r1	; 0x801a50 <i2c+0x7>
			TWDR = i2c.address;
    5852:	80 91 49 1a 	lds	r24, 0x1A49	; 0x801a49 <i2c>
    5856:	0e c0       	rjmp	.+28     	; 0x5874 <__vector_26+0xe4>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (i2c.ind < i2c.len)
    5858:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <i2c+0x7>
    585c:	89 17       	cp	r24, r25
    585e:	ec f4       	brge	.+58     	; 0x589a <__vector_26+0x10a>
			{
				TWDR = i2c.buf[i2c.ind++];
    5860:	91 e0       	ldi	r25, 0x01	; 1
    5862:	98 0f       	add	r25, r24
    5864:	90 93 50 1a 	sts	0x1A50, r25	; 0x801a50 <i2c+0x7>
    5868:	f9 01       	movw	r30, r18
    586a:	e8 0f       	add	r30, r24
    586c:	f1 1d       	adc	r31, r1
    586e:	87 fd       	sbrc	r24, 7
    5870:	fa 95       	dec	r31
    5872:	80 81       	ld	r24, Z
    5874:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5878:	36 c0       	rjmp	.+108    	; 0x58e6 <__vector_26+0x156>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			if(i2c.ind < i2c.len)
    587a:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <i2c+0x7>
    587e:	89 17       	cp	r24, r25
    5880:	64 f4       	brge	.+24     	; 0x589a <__vector_26+0x10a>
				i2c.buf[i2c.ind++] = TWDR;
    5882:	91 e0       	ldi	r25, 0x01	; 1
    5884:	98 0f       	add	r25, r24
    5886:	90 93 50 1a 	sts	0x1A50, r25	; 0x801a50 <i2c+0x7>
    588a:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    588e:	f9 01       	movw	r30, r18
    5890:	e8 0f       	add	r30, r24
    5892:	f1 1d       	adc	r31, r1
    5894:	87 fd       	sbrc	r24, 7
    5896:	fa 95       	dec	r31
    5898:	90 83       	st	Z, r25
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			else
			{
				// Done
				i2c.done = 1;
    589a:	81 e0       	ldi	r24, 0x01	; 1
    589c:	80 93 4b 1a 	sts	0x1A4B, r24	; 0x801a4b <i2c+0x2>
				i2c.enable = 0;
    58a0:	10 92 4a 1a 	sts	0x1A4A, r1	; 0x801a4a <i2c+0x1>
    58a4:	4b c0       	rjmp	.+150    	; 0x593c <__vector_26+0x1ac>
				i2c_next();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			if(i2c.ind < i2c.len)
    58a6:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <i2c+0x7>
    58aa:	89 17       	cp	r24, r25
    58ac:	64 f4       	brge	.+24     	; 0x58c6 <__vector_26+0x136>
				i2c.buf[i2c.ind++] = TWDR;
    58ae:	91 e0       	ldi	r25, 0x01	; 1
    58b0:	98 0f       	add	r25, r24
    58b2:	90 93 50 1a 	sts	0x1A50, r25	; 0x801a50 <i2c+0x7>
    58b6:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    58ba:	f9 01       	movw	r30, r18
    58bc:	e8 0f       	add	r30, r24
    58be:	f1 1d       	adc	r31, r1
    58c0:	87 fd       	sbrc	r24, 7
    58c2:	fa 95       	dec	r31
    58c4:	90 83       	st	Z, r25
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((i2c.ind+1) < i2c.len)
    58c6:	80 91 50 1a 	lds	r24, 0x1A50	; 0x801a50 <i2c+0x7>
    58ca:	08 2e       	mov	r0, r24
    58cc:	00 0c       	add	r0, r0
    58ce:	99 0b       	sbc	r25, r25
    58d0:	01 96       	adiw	r24, 0x01	; 1
    58d2:	20 91 4f 1a 	lds	r18, 0x1A4F	; 0x801a4f <i2c+0x6>
    58d6:	02 2e       	mov	r0, r18
    58d8:	00 0c       	add	r0, r0
    58da:	33 0b       	sbc	r19, r19
    58dc:	82 17       	cp	r24, r18
    58de:	93 07       	cpc	r25, r19
    58e0:	14 f4       	brge	.+4      	; 0x58e6 <__vector_26+0x156>
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    58e2:	85 ec       	ldi	r24, 0xC5	; 197
    58e4:	03 c0       	rjmp	.+6      	; 0x58ec <__vector_26+0x15c>
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    58e6:	85 e8       	ldi	r24, 0x85	; 133
    58e8:	01 c0       	rjmp	.+2      	; 0x58ec <__vector_26+0x15c>
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    58ea:	85 ea       	ldi	r24, 0xA5	; 165
    58ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
    58f0:	26 c0       	rjmp	.+76     	; 0x593e <__vector_26+0x1ae>

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			i2c.done = 1;
    58f2:	81 e0       	ldi	r24, 0x01	; 1
    58f4:	80 93 4b 1a 	sts	0x1A4B, r24	; 0x801a4b <i2c+0x2>
			i2c.enable = 0;
    58f8:	10 92 4a 1a 	sts	0x1A4A, r1	; 0x801a4a <i2c+0x1>
			i2c.flags |= I2C_TW_MT_SLA_NACK;
    58fc:	80 91 4c 1a 	lds	r24, 0x1A4C	; 0x801a4c <i2c+0x3>
    5900:	88 60       	ori	r24, 0x08	; 8
    5902:	1a c0       	rjmp	.+52     	; 0x5938 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			i2c.done = 1;
    5904:	81 e0       	ldi	r24, 0x01	; 1
    5906:	80 93 4b 1a 	sts	0x1A4B, r24	; 0x801a4b <i2c+0x2>
			i2c.enable = 0;
    590a:	10 92 4a 1a 	sts	0x1A4A, r1	; 0x801a4a <i2c+0x1>
			i2c.flags |= I2C_TW_MR_SLA_NACK;
    590e:	80 91 4c 1a 	lds	r24, 0x1A4C	; 0x801a4c <i2c+0x3>
    5912:	80 61       	ori	r24, 0x10	; 16
    5914:	11 c0       	rjmp	.+34     	; 0x5938 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			i2c.done = 1;
    5916:	81 e0       	ldi	r24, 0x01	; 1
    5918:	80 93 4b 1a 	sts	0x1A4B, r24	; 0x801a4b <i2c+0x2>
			i2c.enable = 0;
    591c:	10 92 4a 1a 	sts	0x1A4A, r1	; 0x801a4a <i2c+0x1>
			i2c.flags |= I2C_TW_MT_DATA_NACK;
    5920:	80 91 4c 1a 	lds	r24, 0x1A4C	; 0x801a4c <i2c+0x3>
    5924:	80 62       	ori	r24, 0x20	; 32
    5926:	08 c0       	rjmp	.+16     	; 0x5938 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		default:				// Error
			i2c.done = 1;
    5928:	81 e0       	ldi	r24, 0x01	; 1
    592a:	80 93 4b 1a 	sts	0x1A4B, r24	; 0x801a4b <i2c+0x2>
			i2c.enable = 0;
    592e:	10 92 4a 1a 	sts	0x1A4A, r1	; 0x801a4a <i2c+0x1>
			// ERROR
			i2c.flags |= I2C_BUS_ERROR;
    5932:	80 91 4c 1a 	lds	r24, 0x1A4C	; 0x801a4c <i2c+0x3>
    5936:	80 64       	ori	r24, 0x40	; 64
    5938:	80 93 4c 1a 	sts	0x1A4C, r24	; 0x801a4c <i2c+0x3>
			i2c_next();
    593c:	1f df       	rcall	.-450    	; 0x577c <i2c_next>
			break;
	}
}
    593e:	ff 91       	pop	r31
    5940:	ef 91       	pop	r30
    5942:	bf 91       	pop	r27
    5944:	af 91       	pop	r26
    5946:	9f 91       	pop	r25
    5948:	8f 91       	pop	r24
    594a:	7f 91       	pop	r23
    594c:	6f 91       	pop	r22
    594e:	5f 91       	pop	r21
    5950:	4f 91       	pop	r20
    5952:	3f 91       	pop	r19
    5954:	2f 91       	pop	r18
    5956:	0f 90       	pop	r0
    5958:	0b be       	out	0x3b, r0	; 59
    595a:	0f 90       	pop	r0
    595c:	0f be       	out	0x3f, r0	; 63
    595e:	0f 90       	pop	r0
    5960:	1f 90       	pop	r1
    5962:	18 95       	reti

00005964 <i2c_print_error>:
/// @brief Display Errors for i2c_task_op[index]
///
/// @param[in] index: index of i2c_task_op[] array
/// @return  void
void i2c_print_error(i2c_op_t *o)
{
    5964:	cf 93       	push	r28
    5966:	00 d0       	rcall	.+0      	; 0x5968 <i2c_print_error+0x4>
    5968:	00 d0       	rcall	.+0      	; 0x596a <i2c_print_error+0x6>
    596a:	1f 92       	push	r1
    int flags = o->flags;
    596c:	fc 01       	movw	r30, r24
    596e:	c3 81       	ldd	r28, Z+3	; 0x03

	if(flags)
    5970:	cc 23       	and	r28, r28
    5972:	09 f4       	brne	.+2      	; 0x5976 <i2c_print_error+0x12>
    5974:	67 c0       	rjmp	.+206    	; 0x5a44 <i2c_print_error+0xe0>
	{
		printf("  %s\n", (i2c.done ? "DONE" : "ACTIVE") );
    5976:	80 91 4b 1a 	lds	r24, 0x1A4B	; 0x801a4b <i2c+0x2>
    597a:	81 11       	cpse	r24, r1
    597c:	03 c0       	rjmp	.+6      	; 0x5984 <i2c_print_error+0x20>
    597e:	88 e2       	ldi	r24, 0x28	; 40
    5980:	93 e0       	ldi	r25, 0x03	; 3
    5982:	02 c0       	rjmp	.+4      	; 0x5988 <i2c_print_error+0x24>
    5984:	83 e2       	ldi	r24, 0x23	; 35
    5986:	93 e0       	ldi	r25, 0x03	; 3
    5988:	ed b7       	in	r30, 0x3d	; 61
    598a:	fe b7       	in	r31, 0x3e	; 62
    598c:	95 83       	std	Z+5, r25	; 0x05
    598e:	84 83       	std	Z+4, r24	; 0x04
    5990:	81 ec       	ldi	r24, 0xC1	; 193
    5992:	93 e0       	ldi	r25, 0x03	; 3
    5994:	a0 e0       	ldi	r26, 0x00	; 0
    5996:	81 83       	std	Z+1, r24	; 0x01
    5998:	92 83       	std	Z+2, r25	; 0x02
    599a:	a3 83       	std	Z+3, r26	; 0x03
    599c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
		if(flags & I2C_OP_TIMEOUT)
    59a0:	c0 ff       	sbrs	r28, 0
    59a2:	0a c0       	rjmp	.+20     	; 0x59b8 <i2c_print_error+0x54>
			printf("  OP_TIMEOUT\n");
    59a4:	83 eb       	ldi	r24, 0xB3	; 179
    59a6:	93 e0       	ldi	r25, 0x03	; 3
    59a8:	a0 e0       	ldi	r26, 0x00	; 0
    59aa:	ed b7       	in	r30, 0x3d	; 61
    59ac:	fe b7       	in	r31, 0x3e	; 62
    59ae:	81 83       	std	Z+1, r24	; 0x01
    59b0:	92 83       	std	Z+2, r25	; 0x02
    59b2:	a3 83       	std	Z+3, r26	; 0x03
    59b4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
		if(flags & I2C_OP_LEN)
    59b8:	c1 ff       	sbrs	r28, 1
    59ba:	0a c0       	rjmp	.+20     	; 0x59d0 <i2c_print_error+0x6c>
			printf("  OP_LEN\n");
    59bc:	89 ea       	ldi	r24, 0xA9	; 169
    59be:	93 e0       	ldi	r25, 0x03	; 3
    59c0:	a0 e0       	ldi	r26, 0x00	; 0
    59c2:	ed b7       	in	r30, 0x3d	; 61
    59c4:	fe b7       	in	r31, 0x3e	; 62
    59c6:	81 83       	std	Z+1, r24	; 0x01
    59c8:	92 83       	std	Z+2, r25	; 0x02
    59ca:	a3 83       	std	Z+3, r26	; 0x03
    59cc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
		if(flags & I2C_OP_ERROR)
    59d0:	c2 ff       	sbrs	r28, 2
    59d2:	0a c0       	rjmp	.+20     	; 0x59e8 <i2c_print_error+0x84>
			printf("  OP_ERROR\n");
    59d4:	8d e9       	ldi	r24, 0x9D	; 157
    59d6:	93 e0       	ldi	r25, 0x03	; 3
    59d8:	a0 e0       	ldi	r26, 0x00	; 0
    59da:	ed b7       	in	r30, 0x3d	; 61
    59dc:	fe b7       	in	r31, 0x3e	; 62
    59de:	81 83       	std	Z+1, r24	; 0x01
    59e0:	92 83       	std	Z+2, r25	; 0x02
    59e2:	a3 83       	std	Z+3, r26	; 0x03
    59e4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
		if(flags & I2C_TW_MR_SLA_NACK)
    59e8:	c4 ff       	sbrs	r28, 4
    59ea:	0a c0       	rjmp	.+20     	; 0x5a00 <i2c_print_error+0x9c>
			printf("  TW_MR_SLA_NACK\n");
    59ec:	8b e8       	ldi	r24, 0x8B	; 139
    59ee:	93 e0       	ldi	r25, 0x03	; 3
    59f0:	a0 e0       	ldi	r26, 0x00	; 0
    59f2:	ed b7       	in	r30, 0x3d	; 61
    59f4:	fe b7       	in	r31, 0x3e	; 62
    59f6:	81 83       	std	Z+1, r24	; 0x01
    59f8:	92 83       	std	Z+2, r25	; 0x02
    59fa:	a3 83       	std	Z+3, r26	; 0x03
    59fc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
		if(flags & I2C_TW_MT_SLA_NACK)
    5a00:	c3 ff       	sbrs	r28, 3
    5a02:	0a c0       	rjmp	.+20     	; 0x5a18 <i2c_print_error+0xb4>
			printf("  TW_MT_SLA_NACK\n");
    5a04:	89 e7       	ldi	r24, 0x79	; 121
    5a06:	93 e0       	ldi	r25, 0x03	; 3
    5a08:	a0 e0       	ldi	r26, 0x00	; 0
    5a0a:	ed b7       	in	r30, 0x3d	; 61
    5a0c:	fe b7       	in	r31, 0x3e	; 62
    5a0e:	81 83       	std	Z+1, r24	; 0x01
    5a10:	92 83       	std	Z+2, r25	; 0x02
    5a12:	a3 83       	std	Z+3, r26	; 0x03
    5a14:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
		if(flags & I2C_TW_MT_DATA_NACK)
    5a18:	c5 ff       	sbrs	r28, 5
    5a1a:	0a c0       	rjmp	.+20     	; 0x5a30 <i2c_print_error+0xcc>
			printf("  TW_MT_DATA_NACK\n");
    5a1c:	86 e6       	ldi	r24, 0x66	; 102
    5a1e:	93 e0       	ldi	r25, 0x03	; 3
    5a20:	a0 e0       	ldi	r26, 0x00	; 0
    5a22:	ed b7       	in	r30, 0x3d	; 61
    5a24:	fe b7       	in	r31, 0x3e	; 62
    5a26:	81 83       	std	Z+1, r24	; 0x01
    5a28:	92 83       	std	Z+2, r25	; 0x02
    5a2a:	a3 83       	std	Z+3, r26	; 0x03
    5a2c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
		printf("\n");
    5a30:	84 e6       	ldi	r24, 0x64	; 100
    5a32:	93 e0       	ldi	r25, 0x03	; 3
    5a34:	a0 e0       	ldi	r26, 0x00	; 0
    5a36:	ed b7       	in	r30, 0x3d	; 61
    5a38:	fe b7       	in	r31, 0x3e	; 62
    5a3a:	81 83       	std	Z+1, r24	; 0x01
    5a3c:	92 83       	std	Z+2, r25	; 0x02
    5a3e:	a3 83       	std	Z+3, r26	; 0x03
    5a40:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
	}
}
    5a44:	0f 90       	pop	r0
    5a46:	0f 90       	pop	r0
    5a48:	0f 90       	pop	r0
    5a4a:	0f 90       	pop	r0
    5a4c:	0f 90       	pop	r0
    5a4e:	cf 91       	pop	r28
    5a50:	08 95       	ret

00005a52 <i2c_display_task_errors>:

///@brief Display any task errors
void i2c_display_task_errors()
{
    5a52:	6f 92       	push	r6
    5a54:	7f 92       	push	r7
    5a56:	8f 92       	push	r8
    5a58:	af 92       	push	r10
    5a5a:	bf 92       	push	r11
    5a5c:	cf 92       	push	r12
    5a5e:	df 92       	push	r13
    5a60:	ef 92       	push	r14
    5a62:	0f 93       	push	r16
    5a64:	1f 93       	push	r17
    5a66:	cf 93       	push	r28
    5a68:	df 93       	push	r29
    5a6a:	00 d0       	rcall	.+0      	; 0x5a6c <i2c_display_task_errors+0x1a>
    5a6c:	00 d0       	rcall	.+0      	; 0x5a6e <i2c_display_task_errors+0x1c>
    5a6e:	1f 92       	push	r1
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
    5a70:	80 91 7c 17 	lds	r24, 0x177C	; 0x80177c <i2c_task+0x2>
    5a74:	90 e0       	ldi	r25, 0x00	; 0
    5a76:	ed b7       	in	r30, 0x3d	; 61
    5a78:	fe b7       	in	r31, 0x3e	; 62
    5a7a:	95 83       	std	Z+5, r25	; 0x05
    5a7c:	84 83       	std	Z+4, r24	; 0x04
    5a7e:	81 e5       	ldi	r24, 0x51	; 81
    5a80:	93 e0       	ldi	r25, 0x03	; 3
    5a82:	a0 e0       	ldi	r26, 0x00	; 0
    5a84:	81 83       	std	Z+1, r24	; 0x01
    5a86:	92 83       	std	Z+2, r25	; 0x02
    5a88:	a3 83       	std	Z+3, r26	; 0x03
    5a8a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
    5a8e:	80 91 7d 17 	lds	r24, 0x177D	; 0x80177d <i2c_task+0x3>
    5a92:	90 e0       	ldi	r25, 0x00	; 0
    5a94:	ed b7       	in	r30, 0x3d	; 61
    5a96:	fe b7       	in	r31, 0x3e	; 62
    5a98:	95 83       	std	Z+5, r25	; 0x05
    5a9a:	84 83       	std	Z+4, r24	; 0x04
    5a9c:	8d e3       	ldi	r24, 0x3D	; 61
    5a9e:	93 e0       	ldi	r25, 0x03	; 3
    5aa0:	a0 e0       	ldi	r26, 0x00	; 0
    5aa2:	81 83       	std	Z+1, r24	; 0x01
    5aa4:	92 83       	std	Z+2, r25	; 0x02
    5aa6:	a3 83       	std	Z+3, r26	; 0x03
    5aa8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    5aac:	ca e5       	ldi	r28, 0x5A	; 90
    5aae:	d7 e1       	ldi	r29, 0x17	; 23
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5ab0:	00 e0       	ldi	r16, 0x00	; 0
    5ab2:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("task: %d\n", (int) i);
    5ab4:	83 e3       	ldi	r24, 0x33	; 51
    5ab6:	93 e0       	ldi	r25, 0x03	; 3
    5ab8:	6c 01       	movw	r12, r24
    5aba:	e1 2c       	mov	r14, r1
		i2c_print_error(i2c_task_op[i]);
		printf("\n");
    5abc:	81 e3       	ldi	r24, 0x31	; 49
    5abe:	93 e0       	ldi	r25, 0x03	; 3
    5ac0:	3c 01       	movw	r6, r24
    5ac2:	81 2c       	mov	r8, r1
void i2c_display_task_errors()
{
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5ac4:	30 2f       	mov	r19, r16
    5ac6:	21 2f       	mov	r18, r17
    5ac8:	5e 01       	movw	r10, r28
    5aca:	0f 5f       	subi	r16, 0xFF	; 255
    5acc:	1f 4f       	sbci	r17, 0xFF	; 255
    5ace:	88 81       	ld	r24, Y
    5ad0:	99 81       	ldd	r25, Y+1	; 0x01
    5ad2:	89 2b       	or	r24, r25
    5ad4:	b1 f0       	breq	.+44     	; 0x5b02 <i2c_display_task_errors+0xb0>
	{
		printf("task: %d\n", (int) i);
    5ad6:	ed b7       	in	r30, 0x3d	; 61
    5ad8:	fe b7       	in	r31, 0x3e	; 62
    5ada:	34 83       	std	Z+4, r19	; 0x04
    5adc:	25 83       	std	Z+5, r18	; 0x05
    5ade:	c1 82       	std	Z+1, r12	; 0x01
    5ae0:	d2 82       	std	Z+2, r13	; 0x02
    5ae2:	e3 82       	std	Z+3, r14	; 0x03
    5ae4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    5ae8:	22 96       	adiw	r28, 0x02	; 2
		i2c_print_error(i2c_task_op[i]);
    5aea:	f5 01       	movw	r30, r10
    5aec:	80 81       	ld	r24, Z
    5aee:	91 81       	ldd	r25, Z+1	; 0x01
    5af0:	39 df       	rcall	.-398    	; 0x5964 <i2c_print_error>
		printf("\n");
    5af2:	ed b7       	in	r30, 0x3d	; 61
    5af4:	fe b7       	in	r31, 0x3e	; 62
    5af6:	61 82       	std	Z+1, r6	; 0x01
    5af8:	72 82       	std	Z+2, r7	; 0x02
    5afa:	83 82       	std	Z+3, r8	; 0x03
    5afc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    5b00:	e1 cf       	rjmp	.-62     	; 0x5ac4 <i2c_display_task_errors+0x72>
	}
}
    5b02:	0f 90       	pop	r0
    5b04:	0f 90       	pop	r0
    5b06:	0f 90       	pop	r0
    5b08:	0f 90       	pop	r0
    5b0a:	0f 90       	pop	r0
    5b0c:	df 91       	pop	r29
    5b0e:	cf 91       	pop	r28
    5b10:	1f 91       	pop	r17
    5b12:	0f 91       	pop	r16
    5b14:	ef 90       	pop	r14
    5b16:	df 90       	pop	r13
    5b18:	cf 90       	pop	r12
    5b1a:	bf 90       	pop	r11
    5b1c:	af 90       	pop	r10
    5b1e:	8f 90       	pop	r8
    5b20:	7f 90       	pop	r7
    5b22:	6f 90       	pop	r6
    5b24:	08 95       	ret

00005b26 <BINtoBCD>:
/// @return 0 if not running.
/// @return -1 ERROR
int8_t rtc_run_test()
{
	return ( rtc_run(-1) );
}
    5b26:	6a e0       	ldi	r22, 0x0A	; 10
    5b28:	0e 94 bc e2 	call	0x1c578	; 0x1c578 <__udivmodqi4>
    5b2c:	82 95       	swap	r24
    5b2e:	80 7f       	andi	r24, 0xF0	; 240
    5b30:	89 2b       	or	r24, r25
    5b32:	08 95       	ret

00005b34 <BCDtoBIN>:
    5b34:	98 2f       	mov	r25, r24
    5b36:	92 95       	swap	r25
    5b38:	9f 70       	andi	r25, 0x0F	; 15
    5b3a:	8f 70       	andi	r24, 0x0F	; 15
    5b3c:	2a e0       	ldi	r18, 0x0A	; 10
    5b3e:	92 9f       	mul	r25, r18
    5b40:	80 0d       	add	r24, r0
    5b42:	11 24       	eor	r1, r1
    5b44:	08 95       	ret

00005b46 <i2c_rtc_write>:
    5b46:	ac e0       	ldi	r26, 0x0C	; 12
    5b48:	b0 e0       	ldi	r27, 0x00	; 0
    5b4a:	e9 ea       	ldi	r30, 0xA9	; 169
    5b4c:	fd e2       	ldi	r31, 0x2D	; 45
    5b4e:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__prologue_saves__+0x1c>
    5b52:	9f ef       	ldi	r25, 0xFF	; 255
    5b54:	92 0f       	add	r25, r18
    5b56:	98 30       	cpi	r25, 0x08	; 8
    5b58:	50 f5       	brcc	.+84     	; 0x5bae <i2c_rtc_write+0x68>
    5b5a:	6c 83       	std	Y+4, r22	; 0x04
    5b5c:	90 e0       	ldi	r25, 0x00	; 0
    5b5e:	02 2f       	mov	r16, r18
    5b60:	10 e0       	ldi	r17, 0x00	; 0
    5b62:	69 2f       	mov	r22, r25
    5b64:	09 2e       	mov	r0, r25
    5b66:	00 0c       	add	r0, r0
    5b68:	77 0b       	sbc	r23, r23
    5b6a:	60 17       	cp	r22, r16
    5b6c:	71 07       	cpc	r23, r17
    5b6e:	6c f4       	brge	.+26     	; 0x5b8a <i2c_rtc_write+0x44>
    5b70:	a5 e0       	ldi	r26, 0x05	; 5
    5b72:	b0 e0       	ldi	r27, 0x00	; 0
    5b74:	ac 0f       	add	r26, r28
    5b76:	bd 1f       	adc	r27, r29
    5b78:	a6 0f       	add	r26, r22
    5b7a:	b7 1f       	adc	r27, r23
    5b7c:	64 0f       	add	r22, r20
    5b7e:	75 1f       	adc	r23, r21
    5b80:	fb 01       	movw	r30, r22
    5b82:	30 81       	ld	r19, Z
    5b84:	3c 93       	st	X, r19
    5b86:	9f 5f       	subi	r25, 0xFF	; 255
    5b88:	ec cf       	rjmp	.-40     	; 0x5b62 <i2c_rtc_write+0x1c>
    5b8a:	2f 5f       	subi	r18, 0xFF	; 255
    5b8c:	ae 01       	movw	r20, r28
    5b8e:	4c 5f       	subi	r20, 0xFC	; 252
    5b90:	5f 4f       	sbci	r21, 0xFF	; 255
    5b92:	60 e0       	ldi	r22, 0x00	; 0
    5b94:	5a dd       	rcall	.-1356   	; 0x564a <i2c_fn>
    5b96:	81 11       	cpse	r24, r1
    5b98:	0c c0       	rjmp	.+24     	; 0x5bb2 <i2c_rtc_write+0x6c>
    5b9a:	8e ed       	ldi	r24, 0xDE	; 222
    5b9c:	94 e0       	ldi	r25, 0x04	; 4
    5b9e:	a0 e0       	ldi	r26, 0x00	; 0
    5ba0:	ed b7       	in	r30, 0x3d	; 61
    5ba2:	fe b7       	in	r31, 0x3e	; 62
    5ba4:	81 83       	std	Z+1, r24	; 0x01
    5ba6:	92 83       	std	Z+2, r25	; 0x02
    5ba8:	a3 83       	std	Z+3, r26	; 0x03
    5baa:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    5bae:	80 e0       	ldi	r24, 0x00	; 0
    5bb0:	01 c0       	rjmp	.+2      	; 0x5bb4 <i2c_rtc_write+0x6e>
    5bb2:	81 e0       	ldi	r24, 0x01	; 1
    5bb4:	2c 96       	adiw	r28, 0x0c	; 12
    5bb6:	e4 e0       	ldi	r30, 0x04	; 4
    5bb8:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

00005bbc <i2c_rtc_read>:
    5bbc:	a4 e0       	ldi	r26, 0x04	; 4
    5bbe:	b0 e0       	ldi	r27, 0x00	; 0
    5bc0:	e4 ee       	ldi	r30, 0xE4	; 228
    5bc2:	fd e2       	ldi	r31, 0x2D	; 45
    5bc4:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__prologue_saves__+0x18>
    5bc8:	6c 83       	std	Y+4, r22	; 0x04
    5bca:	9f ef       	ldi	r25, 0xFF	; 255
    5bcc:	92 0f       	add	r25, r18
    5bce:	98 30       	cpi	r25, 0x08	; 8
    5bd0:	f8 f4       	brcc	.+62     	; 0x5c10 <i2c_rtc_read+0x54>
    5bd2:	02 2f       	mov	r16, r18
    5bd4:	7a 01       	movw	r14, r20
    5bd6:	18 2f       	mov	r17, r24
    5bd8:	21 e0       	ldi	r18, 0x01	; 1
    5bda:	ae 01       	movw	r20, r28
    5bdc:	4c 5f       	subi	r20, 0xFC	; 252
    5bde:	5f 4f       	sbci	r21, 0xFF	; 255
    5be0:	60 e0       	ldi	r22, 0x00	; 0
    5be2:	33 dd       	rcall	.-1434   	; 0x564a <i2c_fn>
    5be4:	81 11       	cpse	r24, r1
    5be6:	03 c0       	rjmp	.+6      	; 0x5bee <i2c_rtc_read+0x32>
    5be8:	82 ec       	ldi	r24, 0xC2	; 194
    5bea:	94 e0       	ldi	r25, 0x04	; 4
    5bec:	09 c0       	rjmp	.+18     	; 0x5c00 <i2c_rtc_read+0x44>
    5bee:	20 2f       	mov	r18, r16
    5bf0:	a7 01       	movw	r20, r14
    5bf2:	61 e0       	ldi	r22, 0x01	; 1
    5bf4:	81 2f       	mov	r24, r17
    5bf6:	29 dd       	rcall	.-1454   	; 0x564a <i2c_fn>
    5bf8:	81 11       	cpse	r24, r1
    5bfa:	0c c0       	rjmp	.+24     	; 0x5c14 <i2c_rtc_read+0x58>
    5bfc:	89 ea       	ldi	r24, 0xA9	; 169
    5bfe:	94 e0       	ldi	r25, 0x04	; 4
    5c00:	a0 e0       	ldi	r26, 0x00	; 0
    5c02:	ed b7       	in	r30, 0x3d	; 61
    5c04:	fe b7       	in	r31, 0x3e	; 62
    5c06:	81 83       	std	Z+1, r24	; 0x01
    5c08:	92 83       	std	Z+2, r25	; 0x02
    5c0a:	a3 83       	std	Z+3, r26	; 0x03
    5c0c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    5c10:	80 e0       	ldi	r24, 0x00	; 0
    5c12:	01 c0       	rjmp	.+2      	; 0x5c16 <i2c_rtc_read+0x5a>
    5c14:	81 e0       	ldi	r24, 0x01	; 1
    5c16:	24 96       	adiw	r28, 0x04	; 4
    5c18:	e6 e0       	ldi	r30, 0x06	; 6
    5c1a:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

00005c1e <i2c_rtc_init>:
    5c1e:	60 ea       	ldi	r22, 0xA0	; 160
    5c20:	76 e8       	ldi	r23, 0x86	; 134
    5c22:	81 e0       	ldi	r24, 0x01	; 1
    5c24:	90 e0       	ldi	r25, 0x00	; 0
    5c26:	18 cc       	rjmp	.-2000   	; 0x5458 <i2c_init>
    5c28:	08 95       	ret

00005c2a <rtc_write>:
    5c2a:	ab e0       	ldi	r26, 0x0B	; 11
    5c2c:	b0 e0       	ldi	r27, 0x00	; 0
    5c2e:	eb e1       	ldi	r30, 0x1B	; 27
    5c30:	fe e2       	ldi	r31, 0x2E	; 46
    5c32:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__prologue_saves__+0x1c>
    5c36:	8c 01       	movw	r16, r24
    5c38:	fc 01       	movw	r30, r24
    5c3a:	80 81       	ld	r24, Z
    5c3c:	74 df       	rcall	.-280    	; 0x5b26 <BINtoBCD>
    5c3e:	8f 77       	andi	r24, 0x7F	; 127
    5c40:	8c 83       	std	Y+4, r24	; 0x04
    5c42:	f8 01       	movw	r30, r16
    5c44:	82 81       	ldd	r24, Z+2	; 0x02
    5c46:	6f df       	rcall	.-290    	; 0x5b26 <BINtoBCD>
    5c48:	8f 77       	andi	r24, 0x7F	; 127
    5c4a:	8d 83       	std	Y+5, r24	; 0x05
    5c4c:	f8 01       	movw	r30, r16
    5c4e:	84 81       	ldd	r24, Z+4	; 0x04
    5c50:	6a df       	rcall	.-300    	; 0x5b26 <BINtoBCD>
    5c52:	8f 73       	andi	r24, 0x3F	; 63
    5c54:	8e 83       	std	Y+6, r24	; 0x06
    5c56:	f8 01       	movw	r30, r16
    5c58:	84 85       	ldd	r24, Z+12	; 0x0c
    5c5a:	87 70       	andi	r24, 0x07	; 7
    5c5c:	8f 5f       	subi	r24, 0xFF	; 255
    5c5e:	8f 83       	std	Y+7, r24	; 0x07
    5c60:	86 81       	ldd	r24, Z+6	; 0x06
    5c62:	61 df       	rcall	.-318    	; 0x5b26 <BINtoBCD>
    5c64:	8f 73       	andi	r24, 0x3F	; 63
    5c66:	88 87       	std	Y+8, r24	; 0x08
    5c68:	f8 01       	movw	r30, r16
    5c6a:	80 85       	ldd	r24, Z+8	; 0x08
    5c6c:	8f 5f       	subi	r24, 0xFF	; 255
    5c6e:	5b df       	rcall	.-330    	; 0x5b26 <BINtoBCD>
    5c70:	8f 71       	andi	r24, 0x1F	; 31
    5c72:	89 87       	std	Y+9, r24	; 0x09
    5c74:	f8 01       	movw	r30, r16
    5c76:	82 85       	ldd	r24, Z+10	; 0x0a
    5c78:	84 56       	subi	r24, 0x64	; 100
    5c7a:	55 df       	rcall	.-342    	; 0x5b26 <BINtoBCD>
    5c7c:	8a 87       	std	Y+10, r24	; 0x0a
    5c7e:	83 e9       	ldi	r24, 0x93	; 147
    5c80:	8b 87       	std	Y+11, r24	; 0x0b
    5c82:	28 e0       	ldi	r18, 0x08	; 8
    5c84:	ae 01       	movw	r20, r28
    5c86:	4c 5f       	subi	r20, 0xFC	; 252
    5c88:	5f 4f       	sbci	r21, 0xFF	; 255
    5c8a:	60 e0       	ldi	r22, 0x00	; 0
    5c8c:	88 e6       	ldi	r24, 0x68	; 104
    5c8e:	5b df       	rcall	.-330    	; 0x5b46 <i2c_rtc_write>
    5c90:	81 11       	cpse	r24, r1
    5c92:	0c c0       	rjmp	.+24     	; 0x5cac <rtc_write+0x82>
    5c94:	88 e9       	ldi	r24, 0x98	; 152
    5c96:	94 e0       	ldi	r25, 0x04	; 4
    5c98:	a0 e0       	ldi	r26, 0x00	; 0
    5c9a:	ed b7       	in	r30, 0x3d	; 61
    5c9c:	fe b7       	in	r31, 0x3e	; 62
    5c9e:	81 83       	std	Z+1, r24	; 0x01
    5ca0:	92 83       	std	Z+2, r25	; 0x02
    5ca2:	a3 83       	std	Z+3, r26	; 0x03
    5ca4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    5ca8:	80 e0       	ldi	r24, 0x00	; 0
    5caa:	01 c0       	rjmp	.+2      	; 0x5cae <rtc_write+0x84>
    5cac:	81 e0       	ldi	r24, 0x01	; 1
    5cae:	2b 96       	adiw	r28, 0x0b	; 11
    5cb0:	e4 e0       	ldi	r30, 0x04	; 4
    5cb2:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

00005cb6 <rtc_read>:
    5cb6:	ab e0       	ldi	r26, 0x0B	; 11
    5cb8:	b0 e0       	ldi	r27, 0x00	; 0
    5cba:	e1 e6       	ldi	r30, 0x61	; 97
    5cbc:	fe e2       	ldi	r31, 0x2E	; 46
    5cbe:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__prologue_saves__+0x1c>
    5cc2:	8c 01       	movw	r16, r24
    5cc4:	28 e0       	ldi	r18, 0x08	; 8
    5cc6:	ae 01       	movw	r20, r28
    5cc8:	4c 5f       	subi	r20, 0xFC	; 252
    5cca:	5f 4f       	sbci	r21, 0xFF	; 255
    5ccc:	60 e0       	ldi	r22, 0x00	; 0
    5cce:	88 e6       	ldi	r24, 0x68	; 104
    5cd0:	75 df       	rcall	.-278    	; 0x5bbc <i2c_rtc_read>
    5cd2:	81 11       	cpse	r24, r1
    5cd4:	0c c0       	rjmp	.+24     	; 0x5cee <rtc_read+0x38>
    5cd6:	88 e8       	ldi	r24, 0x88	; 136
    5cd8:	94 e0       	ldi	r25, 0x04	; 4
    5cda:	a0 e0       	ldi	r26, 0x00	; 0
    5cdc:	ed b7       	in	r30, 0x3d	; 61
    5cde:	fe b7       	in	r31, 0x3e	; 62
    5ce0:	81 83       	std	Z+1, r24	; 0x01
    5ce2:	92 83       	std	Z+2, r25	; 0x02
    5ce4:	a3 83       	std	Z+3, r26	; 0x03
    5ce6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    5cea:	80 e0       	ldi	r24, 0x00	; 0
    5cec:	33 c0       	rjmp	.+102    	; 0x5d54 <rtc_read+0x9e>
    5cee:	8c 81       	ldd	r24, Y+4	; 0x04
    5cf0:	8f 77       	andi	r24, 0x7F	; 127
    5cf2:	20 df       	rcall	.-448    	; 0x5b34 <BCDtoBIN>
    5cf4:	90 e0       	ldi	r25, 0x00	; 0
    5cf6:	f8 01       	movw	r30, r16
    5cf8:	91 83       	std	Z+1, r25	; 0x01
    5cfa:	80 83       	st	Z, r24
    5cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    5cfe:	8f 77       	andi	r24, 0x7F	; 127
    5d00:	19 df       	rcall	.-462    	; 0x5b34 <BCDtoBIN>
    5d02:	90 e0       	ldi	r25, 0x00	; 0
    5d04:	f8 01       	movw	r30, r16
    5d06:	93 83       	std	Z+3, r25	; 0x03
    5d08:	82 83       	std	Z+2, r24	; 0x02
    5d0a:	8e 81       	ldd	r24, Y+6	; 0x06
    5d0c:	8f 73       	andi	r24, 0x3F	; 63
    5d0e:	12 df       	rcall	.-476    	; 0x5b34 <BCDtoBIN>
    5d10:	90 e0       	ldi	r25, 0x00	; 0
    5d12:	f8 01       	movw	r30, r16
    5d14:	95 83       	std	Z+5, r25	; 0x05
    5d16:	84 83       	std	Z+4, r24	; 0x04
    5d18:	8f 81       	ldd	r24, Y+7	; 0x07
    5d1a:	87 70       	andi	r24, 0x07	; 7
    5d1c:	90 e0       	ldi	r25, 0x00	; 0
    5d1e:	01 97       	sbiw	r24, 0x01	; 1
    5d20:	95 87       	std	Z+13, r25	; 0x0d
    5d22:	84 87       	std	Z+12, r24	; 0x0c
    5d24:	88 85       	ldd	r24, Y+8	; 0x08
    5d26:	8f 73       	andi	r24, 0x3F	; 63
    5d28:	05 df       	rcall	.-502    	; 0x5b34 <BCDtoBIN>
    5d2a:	90 e0       	ldi	r25, 0x00	; 0
    5d2c:	f8 01       	movw	r30, r16
    5d2e:	97 83       	std	Z+7, r25	; 0x07
    5d30:	86 83       	std	Z+6, r24	; 0x06
    5d32:	89 85       	ldd	r24, Y+9	; 0x09
    5d34:	8f 71       	andi	r24, 0x1F	; 31
    5d36:	fe de       	rcall	.-516    	; 0x5b34 <BCDtoBIN>
    5d38:	90 e0       	ldi	r25, 0x00	; 0
    5d3a:	01 97       	sbiw	r24, 0x01	; 1
    5d3c:	f8 01       	movw	r30, r16
    5d3e:	91 87       	std	Z+9, r25	; 0x09
    5d40:	80 87       	std	Z+8, r24	; 0x08
    5d42:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d44:	f7 de       	rcall	.-530    	; 0x5b34 <BCDtoBIN>
    5d46:	90 e0       	ldi	r25, 0x00	; 0
    5d48:	8c 59       	subi	r24, 0x9C	; 156
    5d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d4c:	f8 01       	movw	r30, r16
    5d4e:	93 87       	std	Z+11, r25	; 0x0b
    5d50:	82 87       	std	Z+10, r24	; 0x0a
    5d52:	81 e0       	ldi	r24, 0x01	; 1
    5d54:	2b 96       	adiw	r28, 0x0b	; 11
    5d56:	e4 e0       	ldi	r30, 0x04	; 4
    5d58:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

00005d5c <rtc_run>:
    5d5c:	a4 e0       	ldi	r26, 0x04	; 4
    5d5e:	b0 e0       	ldi	r27, 0x00	; 0
    5d60:	e4 eb       	ldi	r30, 0xB4	; 180
    5d62:	fe e2       	ldi	r31, 0x2E	; 46
    5d64:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__prologue_saves__+0x1c>
    5d68:	8c 01       	movw	r16, r24
    5d6a:	21 e0       	ldi	r18, 0x01	; 1
    5d6c:	ae 01       	movw	r20, r28
    5d6e:	4c 5f       	subi	r20, 0xFC	; 252
    5d70:	5f 4f       	sbci	r21, 0xFF	; 255
    5d72:	60 e0       	ldi	r22, 0x00	; 0
    5d74:	88 e6       	ldi	r24, 0x68	; 104
    5d76:	22 df       	rcall	.-444    	; 0x5bbc <i2c_rtc_read>
    5d78:	81 11       	cpse	r24, r1
    5d7a:	03 c0       	rjmp	.+6      	; 0x5d82 <rtc_run+0x26>
    5d7c:	84 e7       	ldi	r24, 0x74	; 116
    5d7e:	94 e0       	ldi	r25, 0x04	; 4
    5d80:	24 c0       	rjmp	.+72     	; 0x5dca <rtc_run+0x6e>
    5d82:	8c 81       	ldd	r24, Y+4	; 0x04
    5d84:	0f 3f       	cpi	r16, 0xFF	; 255
    5d86:	ff ef       	ldi	r31, 0xFF	; 255
    5d88:	1f 07       	cpc	r17, r31
    5d8a:	59 f4       	brne	.+22     	; 0x5da2 <rtc_run+0x46>
    5d8c:	08 2e       	mov	r0, r24
    5d8e:	00 0c       	add	r0, r0
    5d90:	99 0b       	sbc	r25, r25
    5d92:	80 95       	com	r24
    5d94:	90 95       	com	r25
    5d96:	89 2f       	mov	r24, r25
    5d98:	88 1f       	adc	r24, r24
    5d9a:	88 27       	eor	r24, r24
    5d9c:	88 1f       	adc	r24, r24
    5d9e:	90 e0       	ldi	r25, 0x00	; 0
    5da0:	20 c0       	rjmp	.+64     	; 0x5de2 <rtc_run+0x86>
    5da2:	8f 77       	andi	r24, 0x7F	; 127
    5da4:	01 15       	cp	r16, r1
    5da6:	11 05       	cpc	r17, r1
    5da8:	11 f4       	brne	.+4      	; 0x5dae <rtc_run+0x52>
    5daa:	90 e8       	ldi	r25, 0x80	; 128
    5dac:	01 c0       	rjmp	.+2      	; 0x5db0 <rtc_run+0x54>
    5dae:	90 e0       	ldi	r25, 0x00	; 0
    5db0:	89 2b       	or	r24, r25
    5db2:	8c 83       	std	Y+4, r24	; 0x04
    5db4:	21 e0       	ldi	r18, 0x01	; 1
    5db6:	ae 01       	movw	r20, r28
    5db8:	4c 5f       	subi	r20, 0xFC	; 252
    5dba:	5f 4f       	sbci	r21, 0xFF	; 255
    5dbc:	60 e0       	ldi	r22, 0x00	; 0
    5dbe:	88 e6       	ldi	r24, 0x68	; 104
    5dc0:	c2 de       	rcall	.-636    	; 0x5b46 <i2c_rtc_write>
    5dc2:	81 11       	cpse	r24, r1
    5dc4:	0d c0       	rjmp	.+26     	; 0x5de0 <rtc_run+0x84>
    5dc6:	8f e5       	ldi	r24, 0x5F	; 95
    5dc8:	94 e0       	ldi	r25, 0x04	; 4
    5dca:	a0 e0       	ldi	r26, 0x00	; 0
    5dcc:	ed b7       	in	r30, 0x3d	; 61
    5dce:	fe b7       	in	r31, 0x3e	; 62
    5dd0:	81 83       	std	Z+1, r24	; 0x01
    5dd2:	92 83       	std	Z+2, r25	; 0x02
    5dd4:	a3 83       	std	Z+3, r26	; 0x03
    5dd6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    5dda:	8f ef       	ldi	r24, 0xFF	; 255
    5ddc:	9f ef       	ldi	r25, 0xFF	; 255
    5dde:	01 c0       	rjmp	.+2      	; 0x5de2 <rtc_run+0x86>
    5de0:	c8 01       	movw	r24, r16
    5de2:	24 96       	adiw	r28, 0x04	; 4
    5de4:	e4 e0       	ldi	r30, 0x04	; 4
    5de6:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

00005dea <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  run state 0 = STOP, 1 = RUN
/// @return -1 = ERROR
uint8_t rtc_init (int force, time_t seconds)
{
    5dea:	a7 e0       	ldi	r26, 0x07	; 7
    5dec:	b0 e0       	ldi	r27, 0x00	; 0
    5dee:	eb ef       	ldi	r30, 0xFB	; 251
    5df0:	fe e2       	ldi	r31, 0x2E	; 46
    5df2:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__prologue_saves__+0x1c>
    5df6:	8c 01       	movw	r16, r24
    5df8:	4c 83       	std	Y+4, r20	; 0x04
    5dfa:	5d 83       	std	Y+5, r21	; 0x05
    5dfc:	6e 83       	std	Y+6, r22	; 0x06
    5dfe:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    i2c_rtc_init();
    5e00:	0e df       	rcall	.-484    	; 0x5c1e <i2c_rtc_init>

    if(!force)
    5e02:	01 15       	cp	r16, r1
    5e04:	11 05       	cpc	r17, r1
    5e06:	39 f4       	brne	.+14     	; 0x5e16 <rtc_init+0x2c>
    {
        state = rtc_run(-1);
    5e08:	8f ef       	ldi	r24, 0xFF	; 255
    5e0a:	9f ef       	ldi	r25, 0xFF	; 255
    5e0c:	a7 df       	rcall	.-178    	; 0x5d5c <rtc_run>
        if(state < 0)
    5e0e:	87 fd       	sbrc	r24, 7
    5e10:	16 c0       	rjmp	.+44     	; 0x5e3e <rtc_init+0x54>
        {
            rtc_ok = 0;
            return 0;
        }
        if(state == 0)                            // stopped
    5e12:	81 11       	cpse	r24, r1
    5e14:	22 c0       	rjmp	.+68     	; 0x5e5a <rtc_init+0x70>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5e16:	80 e0       	ldi	r24, 0x00	; 0
    5e18:	90 e0       	ldi	r25, 0x00	; 0
    5e1a:	a0 df       	rcall	.-192    	; 0x5d5c <rtc_run>
    5e1c:	97 fd       	sbrc	r25, 7
    5e1e:	0f c0       	rjmp	.+30     	; 0x5e3e <rtc_init+0x54>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }

        tmp = gmtime(&seconds);
    5e20:	ce 01       	movw	r24, r28
    5e22:	04 96       	adiw	r24, 0x04	; 4
    5e24:	a3 d6       	rcall	.+3398   	; 0x6b6c <gmtime>
    5e26:	00 97       	sbiw	r24, 0x00	; 0

        if(tmp == NULL || !rtc_write(tmp))
    5e28:	81 f4       	brne	.+32     	; 0x5e4a <rtc_init+0x60>
    5e2a:	81 e4       	ldi	r24, 0x41	; 65
        {
            printf("rtc_init  write epoch failed\n");
    5e2c:	94 e0       	ldi	r25, 0x04	; 4
    5e2e:	a0 e0       	ldi	r26, 0x00	; 0
    5e30:	ed b7       	in	r30, 0x3d	; 61
    5e32:	fe b7       	in	r31, 0x3e	; 62
    5e34:	81 83       	std	Z+1, r24	; 0x01
    5e36:	92 83       	std	Z+2, r25	; 0x02
    5e38:	a3 83       	std	Z+3, r26	; 0x03
    5e3a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    5e3e:	10 92 f1 19 	sts	0x19F1, r1	; 0x8019f1 <rtc_ok+0x1>
            rtc_ok = 0;
    5e42:	10 92 f0 19 	sts	0x19F0, r1	; 0x8019f0 <rtc_ok>
            return 0;
    5e46:	80 e0       	ldi	r24, 0x00	; 0
    5e48:	0e c0       	rjmp	.+28     	; 0x5e66 <rtc_init+0x7c>
            return 0;
        }

        tmp = gmtime(&seconds);

        if(tmp == NULL || !rtc_write(tmp))
    5e4a:	ef de       	rcall	.-546    	; 0x5c2a <rtc_write>
    5e4c:	88 23       	and	r24, r24
    5e4e:	69 f3       	breq	.-38     	; 0x5e2a <rtc_init+0x40>
            printf("rtc_init  write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        if(rtc_run(1) < 0)                        // START RTC
    5e50:	81 e0       	ldi	r24, 0x01	; 1
    5e52:	90 e0       	ldi	r25, 0x00	; 0
    5e54:	83 df       	rcall	.-250    	; 0x5d5c <rtc_run>
    5e56:	97 fd       	sbrc	r25, 7
    5e58:	f2 cf       	rjmp	.-28     	; 0x5e3e <rtc_init+0x54>
    5e5a:	81 e0       	ldi	r24, 0x01	; 1
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5e5c:	90 e0       	ldi	r25, 0x00	; 0
    5e5e:	90 93 f1 19 	sts	0x19F1, r25	; 0x8019f1 <rtc_ok+0x1>
    5e62:	80 93 f0 19 	sts	0x19F0, r24	; 0x8019f0 <rtc_ok>
    5e66:	27 96       	adiw	r28, 0x07	; 7
    return 1;
}
    5e68:	e4 e0       	ldi	r30, 0x04	; 4
    5e6a:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

00005e6e <islower>:
    5e6e:	9c 01       	movw	r18, r24
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    5e70:	21 56       	subi	r18, 0x61	; 97
    5e72:	31 09       	sbc	r19, r1
    5e74:	81 e0       	ldi	r24, 0x01	; 1
    5e76:	90 e0       	ldi	r25, 0x00	; 0
    5e78:	2a 31       	cpi	r18, 0x1A	; 26
    5e7a:	31 05       	cpc	r19, r1
    5e7c:	10 f0       	brcs	.+4      	; 0x5e82 <islower+0x14>
    5e7e:	80 e0       	ldi	r24, 0x00	; 0
    5e80:	90 e0       	ldi	r25, 0x00	; 0
    5e82:	08 95       	ret

00005e84 <toupper>:
    5e84:	cf 93       	push	r28
    5e86:	df 93       	push	r29
    5e88:	ec 01       	movw	r28, r24
    5e8a:	f1 df       	rcall	.-30     	; 0x5e6e <islower>
    5e8c:	89 2b       	or	r24, r25
    5e8e:	19 f0       	breq	.+6      	; 0x5e96 <toupper+0x12>
    5e90:	ce 01       	movw	r24, r28
    5e92:	80 97       	sbiw	r24, 0x20	; 32
    5e94:	01 c0       	rjmp	.+2      	; 0x5e98 <toupper+0x14>
    5e96:	ce 01       	movw	r24, r28
    5e98:	df 91       	pop	r29
    5e9a:	cf 91       	pop	r28
    5e9c:	08 95       	ret

00005e9e <strcpy>:
    5e9e:	fc 01       	movw	r30, r24
    5ea0:	db 01       	movw	r26, r22
    5ea2:	2d 91       	ld	r18, X+
    5ea4:	bd 01       	movw	r22, r26
    5ea6:	01 96       	adiw	r24, 0x01	; 1
    5ea8:	22 23       	and	r18, r18
    5eaa:	11 f0       	breq	.+4      	; 0x5eb0 <strcpy+0x12>
    5eac:	20 83       	st	Z, r18
    5eae:	f7 cf       	rjmp	.-18     	; 0x5e9e <strcpy>
    5eb0:	10 82       	st	Z, r1
    5eb2:	08 95       	ret

00005eb4 <strncpy>:
    5eb4:	db 01       	movw	r26, r22
    5eb6:	fc 01       	movw	r30, r24
    5eb8:	2d 91       	ld	r18, X+
    5eba:	21 11       	cpse	r18, r1
    5ebc:	03 c0       	rjmp	.+6      	; 0x5ec4 <strncpy+0x10>
    5ebe:	4e 0f       	add	r20, r30
    5ec0:	5f 1f       	adc	r21, r31
    5ec2:	08 c0       	rjmp	.+16     	; 0x5ed4 <strncpy+0x20>
    5ec4:	41 15       	cp	r20, r1
    5ec6:	51 05       	cpc	r21, r1
    5ec8:	21 f0       	breq	.+8      	; 0x5ed2 <strncpy+0x1e>
    5eca:	21 93       	st	Z+, r18
    5ecc:	41 50       	subi	r20, 0x01	; 1
    5ece:	51 09       	sbc	r21, r1
    5ed0:	f3 cf       	rjmp	.-26     	; 0x5eb8 <strncpy+0x4>
    5ed2:	08 95       	ret
    5ed4:	4e 17       	cp	r20, r30
    5ed6:	5f 07       	cpc	r21, r31
    5ed8:	11 f0       	breq	.+4      	; 0x5ede <strncpy+0x2a>
    5eda:	11 92       	st	Z+, r1
    5edc:	fb cf       	rjmp	.-10     	; 0x5ed4 <strncpy+0x20>
    5ede:	08 95       	ret

00005ee0 <strcat>:
    5ee0:	cf 93       	push	r28
    5ee2:	df 93       	push	r29
    5ee4:	d8 2f       	mov	r29, r24
    5ee6:	c9 2f       	mov	r28, r25
    5ee8:	28 2f       	mov	r18, r24
    5eea:	39 2f       	mov	r19, r25
    5eec:	c9 01       	movw	r24, r18
    5eee:	2f 5f       	subi	r18, 0xFF	; 255
    5ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    5ef2:	fc 01       	movw	r30, r24
    5ef4:	40 81       	ld	r20, Z
    5ef6:	41 11       	cpse	r20, r1
    5ef8:	f9 cf       	rjmp	.-14     	; 0x5eec <strcat+0xc>
    5efa:	d1 df       	rcall	.-94     	; 0x5e9e <strcpy>
    5efc:	8d 2f       	mov	r24, r29
    5efe:	9c 2f       	mov	r25, r28
    5f00:	df 91       	pop	r29
    5f02:	cf 91       	pop	r28
    5f04:	08 95       	ret

00005f06 <reverse>:
    5f06:	fc 01       	movw	r30, r24
    5f08:	01 90       	ld	r0, Z+
    5f0a:	00 20       	and	r0, r0
    5f0c:	e9 f7       	brne	.-6      	; 0x5f08 <reverse+0x2>
    5f0e:	31 97       	sbiw	r30, 0x01	; 1
    5f10:	e8 1b       	sub	r30, r24
    5f12:	f9 0b       	sbc	r31, r25
    5f14:	af 01       	movw	r20, r30
    5f16:	55 95       	asr	r21
    5f18:	47 95       	ror	r20
    5f1a:	e8 0f       	add	r30, r24
    5f1c:	f9 1f       	adc	r31, r25
    5f1e:	dc 01       	movw	r26, r24
    5f20:	9d 01       	movw	r18, r26
    5f22:	28 1b       	sub	r18, r24
    5f24:	39 0b       	sbc	r19, r25
    5f26:	24 17       	cp	r18, r20
    5f28:	35 07       	cpc	r19, r21
    5f2a:	2c f4       	brge	.+10     	; 0x5f36 <reverse+0x30>
    5f2c:	22 91       	ld	r18, -Z
    5f2e:	3c 91       	ld	r19, X
    5f30:	30 83       	st	Z, r19
    5f32:	2d 93       	st	X+, r18
    5f34:	f5 cf       	rjmp	.-22     	; 0x5f20 <reverse+0x1a>
    5f36:	08 95       	ret

00005f38 <strupper>:
    5f38:	cf 93       	push	r28
    5f3a:	df 93       	push	r29
    5f3c:	ec 01       	movw	r28, r24
    5f3e:	88 81       	ld	r24, Y
    5f40:	88 23       	and	r24, r24
    5f42:	21 f0       	breq	.+8      	; 0x5f4c <strupper+0x14>
    5f44:	90 e0       	ldi	r25, 0x00	; 0
    5f46:	9e df       	rcall	.-196    	; 0x5e84 <toupper>
    5f48:	89 93       	st	Y+, r24
    5f4a:	f9 cf       	rjmp	.-14     	; 0x5f3e <strupper+0x6>
    5f4c:	df 91       	pop	r29
    5f4e:	cf 91       	pop	r28
    5f50:	08 95       	ret

00005f52 <strcmp>:
    5f52:	dc 01       	movw	r26, r24
    5f54:	fb 01       	movw	r30, r22
    5f56:	2d 91       	ld	r18, X+
    5f58:	41 91       	ld	r20, Z+
    5f5a:	50 e0       	ldi	r21, 0x00	; 0
    5f5c:	30 e0       	ldi	r19, 0x00	; 0
    5f5e:	c9 01       	movw	r24, r18
    5f60:	84 1b       	sub	r24, r20
    5f62:	95 0b       	sbc	r25, r21
    5f64:	11 f4       	brne	.+4      	; 0x5f6a <strcmp+0x18>
    5f66:	45 2b       	or	r20, r21
    5f68:	b1 f7       	brne	.-20     	; 0x5f56 <strcmp+0x4>
    5f6a:	08 95       	ret

00005f6c <strcasecmp>:
    5f6c:	ef 92       	push	r14
    5f6e:	ff 92       	push	r15
    5f70:	0f 93       	push	r16
    5f72:	1f 93       	push	r17
    5f74:	cf 93       	push	r28
    5f76:	df 93       	push	r29
    5f78:	7c 01       	movw	r14, r24
    5f7a:	8b 01       	movw	r16, r22
    5f7c:	f7 01       	movw	r30, r14
    5f7e:	81 91       	ld	r24, Z+
    5f80:	7f 01       	movw	r14, r30
    5f82:	90 e0       	ldi	r25, 0x00	; 0
    5f84:	7f df       	rcall	.-258    	; 0x5e84 <toupper>
    5f86:	ec 01       	movw	r28, r24
    5f88:	f8 01       	movw	r30, r16
    5f8a:	81 91       	ld	r24, Z+
    5f8c:	8f 01       	movw	r16, r30
    5f8e:	90 e0       	ldi	r25, 0x00	; 0
    5f90:	79 df       	rcall	.-270    	; 0x5e84 <toupper>
    5f92:	9c 01       	movw	r18, r24
    5f94:	ce 01       	movw	r24, r28
    5f96:	82 1b       	sub	r24, r18
    5f98:	93 0b       	sbc	r25, r19
    5f9a:	11 f4       	brne	.+4      	; 0x5fa0 <strcasecmp+0x34>
    5f9c:	23 2b       	or	r18, r19
    5f9e:	71 f7       	brne	.-36     	; 0x5f7c <strcasecmp+0x10>
    5fa0:	cd b7       	in	r28, 0x3d	; 61
    5fa2:	de b7       	in	r29, 0x3e	; 62
    5fa4:	e6 e0       	ldi	r30, 0x06	; 6
    5fa6:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

00005faa <strncasecmp>:
    5faa:	a0 e0       	ldi	r26, 0x00	; 0
    5fac:	b0 e0       	ldi	r27, 0x00	; 0
    5fae:	eb ed       	ldi	r30, 0xDB	; 219
    5fb0:	ff e2       	ldi	r31, 0x2F	; 47
    5fb2:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
    5fb6:	8c 01       	movw	r16, r24
    5fb8:	7b 01       	movw	r14, r22
    5fba:	6c 01       	movw	r12, r24
    5fbc:	c4 0e       	add	r12, r20
    5fbe:	d5 1e       	adc	r13, r21
    5fc0:	0c 15       	cp	r16, r12
    5fc2:	1d 05       	cpc	r17, r13
    5fc4:	99 f0       	breq	.+38     	; 0x5fec <strncasecmp+0x42>
    5fc6:	f8 01       	movw	r30, r16
    5fc8:	81 91       	ld	r24, Z+
    5fca:	8f 01       	movw	r16, r30
    5fcc:	90 e0       	ldi	r25, 0x00	; 0
    5fce:	5a df       	rcall	.-332    	; 0x5e84 <toupper>
    5fd0:	ec 01       	movw	r28, r24
    5fd2:	f7 01       	movw	r30, r14
    5fd4:	81 91       	ld	r24, Z+
    5fd6:	7f 01       	movw	r14, r30
    5fd8:	90 e0       	ldi	r25, 0x00	; 0
    5fda:	54 df       	rcall	.-344    	; 0x5e84 <toupper>
    5fdc:	9c 01       	movw	r18, r24
    5fde:	ce 01       	movw	r24, r28
    5fe0:	82 1b       	sub	r24, r18
    5fe2:	93 0b       	sbc	r25, r19
    5fe4:	29 f4       	brne	.+10     	; 0x5ff0 <strncasecmp+0x46>
    5fe6:	23 2b       	or	r18, r19
    5fe8:	59 f7       	brne	.-42     	; 0x5fc0 <strncasecmp+0x16>
    5fea:	02 c0       	rjmp	.+4      	; 0x5ff0 <strncasecmp+0x46>
    5fec:	80 e0       	ldi	r24, 0x00	; 0
    5fee:	90 e0       	ldi	r25, 0x00	; 0
    5ff0:	cd b7       	in	r28, 0x3d	; 61
    5ff2:	de b7       	in	r29, 0x3e	; 62
    5ff4:	e8 e0       	ldi	r30, 0x08	; 8
    5ff6:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

00005ffa <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    5ffa:	0f 93       	push	r16
    5ffc:	1f 93       	push	r17
    5ffe:	cf 93       	push	r28
    6000:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    6002:	00 97       	sbiw	r24, 0x00	; 0
    6004:	99 f0       	breq	.+38     	; 0x602c <stralloc+0x32>
    6006:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    6008:	fc 01       	movw	r30, r24
    600a:	01 90       	ld	r0, Z+
    600c:	00 20       	and	r0, r0
    600e:	e9 f7       	brne	.-6      	; 0x600a <stralloc+0x10>
    6010:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    6012:	61 e0       	ldi	r22, 0x01	; 1
    6014:	70 e0       	ldi	r23, 0x00	; 0
    6016:	8c 1b       	sub	r24, r28
    6018:	9d 0b       	sbc	r25, r29
    601a:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <safecalloc>
    601e:	8c 01       	movw	r16, r24
    if(!ptr)
    6020:	00 97       	sbiw	r24, 0x00	; 0
    6022:	21 f0       	breq	.+8      	; 0x602c <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    6024:	be 01       	movw	r22, r28
    6026:	3b df       	rcall	.-394    	; 0x5e9e <strcpy>
    return(ptr);
    6028:	c8 01       	movw	r24, r16
    602a:	02 c0       	rjmp	.+4      	; 0x6030 <stralloc+0x36>
    602c:	80 e0       	ldi	r24, 0x00	; 0
    602e:	90 e0       	ldi	r25, 0x00	; 0
}
    6030:	df 91       	pop	r29
    6032:	cf 91       	pop	r28
    6034:	1f 91       	pop	r17
    6036:	0f 91       	pop	r16
    6038:	08 95       	ret

0000603a <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    603a:	00 d0       	rcall	.+0      	; 0x603c <sep+0x2>
    603c:	1f 92       	push	r1
    603e:	8e e1       	ldi	r24, 0x1E	; 30
    6040:	95 e0       	ldi	r25, 0x05	; 5
    6042:	a0 e0       	ldi	r26, 0x00	; 0
    6044:	ed b7       	in	r30, 0x3d	; 61
    6046:	fe b7       	in	r31, 0x3e	; 62
    6048:	81 83       	std	Z+1, r24	; 0x01
    604a:	92 83       	std	Z+2, r25	; 0x02
    604c:	a3 83       	std	Z+3, r26	; 0x03
    604e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    6052:	0f 90       	pop	r0
    6054:	0f 90       	pop	r0
    6056:	0f 90       	pop	r0
    6058:	08 95       	ret

0000605a <trim_tail>:
    605a:	00 97       	sbiw	r24, 0x00	; 0
    605c:	69 f0       	breq	.+26     	; 0x6078 <trim_tail+0x1e>
    605e:	fc 01       	movw	r30, r24
    6060:	01 90       	ld	r0, Z+
    6062:	00 20       	and	r0, r0
    6064:	e9 f7       	brne	.-6      	; 0x6060 <trim_tail+0x6>
    6066:	31 97       	sbiw	r30, 0x01	; 1
    6068:	e8 17       	cp	r30, r24
    606a:	f9 07       	cpc	r31, r25
    606c:	29 f0       	breq	.+10     	; 0x6078 <trim_tail+0x1e>
    606e:	22 91       	ld	r18, -Z
    6070:	21 32       	cpi	r18, 0x21	; 33
    6072:	10 f4       	brcc	.+4      	; 0x6078 <trim_tail+0x1e>
    6074:	10 82       	st	Z, r1
    6076:	f8 cf       	rjmp	.-16     	; 0x6068 <trim_tail+0xe>
    6078:	08 95       	ret

0000607a <skipspaces>:
    607a:	00 97       	sbiw	r24, 0x00	; 0
    607c:	39 f0       	breq	.+14     	; 0x608c <skipspaces+0x12>
    607e:	fc 01       	movw	r30, r24
    6080:	cf 01       	movw	r24, r30
    6082:	21 91       	ld	r18, Z+
    6084:	20 32       	cpi	r18, 0x20	; 32
    6086:	e1 f3       	breq	.-8      	; 0x6080 <skipspaces+0x6>
    6088:	29 30       	cpi	r18, 0x09	; 9
    608a:	d1 f3       	breq	.-12     	; 0x6080 <skipspaces+0x6>
    608c:	08 95       	ret

0000608e <MATCH>:
    608e:	cf 93       	push	r28
    6090:	df 93       	push	r29
    6092:	fb 01       	movw	r30, r22
    6094:	01 90       	ld	r0, Z+
    6096:	00 20       	and	r0, r0
    6098:	e9 f7       	brne	.-6      	; 0x6094 <MATCH+0x6>
    609a:	31 97       	sbiw	r30, 0x01	; 1
    609c:	ef 01       	movw	r28, r30
    609e:	c6 1b       	sub	r28, r22
    60a0:	d7 0b       	sbc	r29, r23
    60a2:	57 df       	rcall	.-338    	; 0x5f52 <strcmp>
    60a4:	89 2b       	or	r24, r25
    60a6:	11 f4       	brne	.+4      	; 0x60ac <MATCH+0x1e>
    60a8:	ce 01       	movw	r24, r28
    60aa:	02 c0       	rjmp	.+4      	; 0x60b0 <MATCH+0x22>
    60ac:	80 e0       	ldi	r24, 0x00	; 0
    60ae:	90 e0       	ldi	r25, 0x00	; 0
    60b0:	df 91       	pop	r29
    60b2:	cf 91       	pop	r28
    60b4:	08 95       	ret

000060b6 <MATCHI>:
    60b6:	cf 93       	push	r28
    60b8:	df 93       	push	r29
    60ba:	fb 01       	movw	r30, r22
    60bc:	01 90       	ld	r0, Z+
    60be:	00 20       	and	r0, r0
    60c0:	e9 f7       	brne	.-6      	; 0x60bc <MATCHI+0x6>
    60c2:	31 97       	sbiw	r30, 0x01	; 1
    60c4:	ef 01       	movw	r28, r30
    60c6:	c6 1b       	sub	r28, r22
    60c8:	d7 0b       	sbc	r29, r23
    60ca:	50 df       	rcall	.-352    	; 0x5f6c <strcasecmp>
    60cc:	89 2b       	or	r24, r25
    60ce:	11 f4       	brne	.+4      	; 0x60d4 <MATCHI+0x1e>
    60d0:	ce 01       	movw	r24, r28
    60d2:	02 c0       	rjmp	.+4      	; 0x60d8 <MATCHI+0x22>
    60d4:	80 e0       	ldi	r24, 0x00	; 0
    60d6:	90 e0       	ldi	r25, 0x00	; 0
    60d8:	df 91       	pop	r29
    60da:	cf 91       	pop	r28
    60dc:	08 95       	ret

000060de <MATCHARGS>:
    60de:	a9 e0       	ldi	r26, 0x09	; 9
    60e0:	b0 e0       	ldi	r27, 0x00	; 0
    60e2:	e5 e7       	ldi	r30, 0x75	; 117
    60e4:	f0 e3       	ldi	r31, 0x30	; 48
    60e6:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__prologue_saves__+0x18>
    60ea:	eb 01       	movw	r28, r22
    60ec:	8a 01       	movw	r16, r20
    60ee:	79 01       	movw	r14, r18
    60f0:	e2 df       	rcall	.-60     	; 0x60b6 <MATCHI>
    60f2:	00 97       	sbiw	r24, 0x00	; 0
    60f4:	c1 f0       	breq	.+48     	; 0x6126 <MATCHARGS+0x48>
    60f6:	e0 16       	cp	r14, r16
    60f8:	f1 06       	cpc	r15, r17
    60fa:	9c f4       	brge	.+38     	; 0x6122 <MATCHARGS+0x44>
    60fc:	ed b7       	in	r30, 0x3d	; 61
    60fe:	fe b7       	in	r31, 0x3e	; 62
    6100:	f1 86       	std	Z+9, r15	; 0x09
    6102:	e0 86       	std	Z+8, r14	; 0x08
    6104:	17 83       	std	Z+7, r17	; 0x07
    6106:	06 83       	std	Z+6, r16	; 0x06
    6108:	d5 83       	std	Z+5, r29	; 0x05
    610a:	c4 83       	std	Z+4, r28	; 0x04
    610c:	88 ef       	ldi	r24, 0xF8	; 248
    610e:	94 e0       	ldi	r25, 0x04	; 4
    6110:	a0 e0       	ldi	r26, 0x00	; 0
    6112:	81 83       	std	Z+1, r24	; 0x01
    6114:	92 83       	std	Z+2, r25	; 0x02
    6116:	a3 83       	std	Z+3, r26	; 0x03
    6118:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    611c:	80 e0       	ldi	r24, 0x00	; 0
    611e:	90 e0       	ldi	r25, 0x00	; 0
    6120:	02 c0       	rjmp	.+4      	; 0x6126 <MATCHARGS+0x48>
    6122:	81 e0       	ldi	r24, 0x01	; 1
    6124:	90 e0       	ldi	r25, 0x00	; 0
    6126:	cd b7       	in	r28, 0x3d	; 61
    6128:	de b7       	in	r29, 0x3e	; 62
    612a:	29 96       	adiw	r28, 0x09	; 9
    612c:	e6 e0       	ldi	r30, 0x06	; 6
    612e:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

00006132 <MATCHI_LEN>:
    6132:	cf 93       	push	r28
    6134:	df 93       	push	r29
    6136:	00 97       	sbiw	r24, 0x00	; 0
    6138:	89 f0       	breq	.+34     	; 0x615c <MATCHI_LEN+0x2a>
    613a:	61 15       	cp	r22, r1
    613c:	71 05       	cpc	r23, r1
    613e:	71 f0       	breq	.+28     	; 0x615c <MATCHI_LEN+0x2a>
    6140:	eb 01       	movw	r28, r22
    6142:	09 90       	ld	r0, Y+
    6144:	00 20       	and	r0, r0
    6146:	e9 f7       	brne	.-6      	; 0x6142 <MATCHI_LEN+0x10>
    6148:	21 97       	sbiw	r28, 0x01	; 1
    614a:	c6 1b       	sub	r28, r22
    614c:	d7 0b       	sbc	r29, r23
    614e:	31 f0       	breq	.+12     	; 0x615c <MATCHI_LEN+0x2a>
    6150:	ae 01       	movw	r20, r28
    6152:	2b df       	rcall	.-426    	; 0x5faa <strncasecmp>
    6154:	89 2b       	or	r24, r25
    6156:	11 f4       	brne	.+4      	; 0x615c <MATCHI_LEN+0x2a>
    6158:	ce 01       	movw	r24, r28
    615a:	02 c0       	rjmp	.+4      	; 0x6160 <MATCHI_LEN+0x2e>
    615c:	80 e0       	ldi	r24, 0x00	; 0
    615e:	90 e0       	ldi	r25, 0x00	; 0
    6160:	df 91       	pop	r29
    6162:	cf 91       	pop	r28
    6164:	08 95       	ret

00006166 <split_args>:
    6166:	a0 e0       	ldi	r26, 0x00	; 0
    6168:	b0 e0       	ldi	r27, 0x00	; 0
    616a:	e9 eb       	ldi	r30, 0xB9	; 185
    616c:	f0 e3       	ldi	r31, 0x30	; 48
    616e:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
    6172:	dc 01       	movw	r26, r24
    6174:	6a 01       	movw	r12, r20
    6176:	8b 01       	movw	r16, r22
    6178:	fb 01       	movw	r30, r22
    617a:	80 e0       	ldi	r24, 0x00	; 0
    617c:	90 e0       	ldi	r25, 0x00	; 0
    617e:	8c 15       	cp	r24, r12
    6180:	9d 05       	cpc	r25, r13
    6182:	24 f4       	brge	.+8      	; 0x618c <split_args+0x26>
    6184:	11 92       	st	Z+, r1
    6186:	11 92       	st	Z+, r1
    6188:	01 96       	adiw	r24, 0x01	; 1
    618a:	f9 cf       	rjmp	.-14     	; 0x617e <split_args+0x18>
    618c:	c1 14       	cp	r12, r1
    618e:	d1 04       	cpc	r13, r1
    6190:	d9 f1       	breq	.+118    	; 0x6208 <split_args+0xa2>
    6192:	10 97       	sbiw	r26, 0x00	; 0
    6194:	c9 f1       	breq	.+114    	; 0x6208 <split_args+0xa2>
    6196:	ee 24       	eor	r14, r14
    6198:	e3 94       	inc	r14
    619a:	f1 2c       	mov	r15, r1
    619c:	c0 e0       	ldi	r28, 0x00	; 0
    619e:	d0 e0       	ldi	r29, 0x00	; 0
    61a0:	8c 91       	ld	r24, X
    61a2:	88 23       	and	r24, r24
    61a4:	b1 f1       	breq	.+108    	; 0x6212 <split_args+0xac>
    61a6:	cc 15       	cp	r28, r12
    61a8:	dd 05       	cpc	r29, r13
    61aa:	9c f5       	brge	.+102    	; 0x6212 <split_args+0xac>
    61ac:	cd 01       	movw	r24, r26
    61ae:	65 df       	rcall	.-310    	; 0x607a <skipspaces>
    61b0:	dc 01       	movw	r26, r24
    61b2:	2c 91       	ld	r18, X
    61b4:	22 23       	and	r18, r18
    61b6:	69 f1       	breq	.+90     	; 0x6212 <split_args+0xac>
    61b8:	22 32       	cpi	r18, 0x22	; 34
    61ba:	79 f4       	brne	.+30     	; 0x61da <split_args+0x74>
    61bc:	fc 01       	movw	r30, r24
    61be:	31 96       	adiw	r30, 0x01	; 1
    61c0:	d8 01       	movw	r26, r16
    61c2:	ed 93       	st	X+, r30
    61c4:	fc 93       	st	X, r31
    61c6:	df 01       	movw	r26, r30
    61c8:	80 81       	ld	r24, Z
    61ca:	31 96       	adiw	r30, 0x01	; 1
    61cc:	88 23       	and	r24, r24
    61ce:	a9 f0       	breq	.+42     	; 0x61fa <split_args+0x94>
    61d0:	82 32       	cpi	r24, 0x22	; 34
    61d2:	c9 f7       	brne	.-14     	; 0x61c6 <split_args+0x60>
    61d4:	1c 92       	st	X, r1
    61d6:	df 01       	movw	r26, r30
    61d8:	10 c0       	rjmp	.+32     	; 0x61fa <split_args+0x94>
    61da:	f8 01       	movw	r30, r16
    61dc:	91 83       	std	Z+1, r25	; 0x01
    61de:	80 83       	st	Z, r24
    61e0:	fc 01       	movw	r30, r24
    61e2:	2e 2f       	mov	r18, r30
    61e4:	9f 2f       	mov	r25, r31
    61e6:	81 91       	ld	r24, Z+
    61e8:	3f ed       	ldi	r19, 0xDF	; 223
    61ea:	38 0f       	add	r19, r24
    61ec:	3e 35       	cpi	r19, 0x5E	; 94
    61ee:	c8 f3       	brcs	.-14     	; 0x61e2 <split_args+0x7c>
    61f0:	88 23       	and	r24, r24
    61f2:	69 f0       	breq	.+26     	; 0x620e <split_args+0xa8>
    61f4:	a2 2f       	mov	r26, r18
    61f6:	b9 2f       	mov	r27, r25
    61f8:	1d 92       	st	X+, r1
    61fa:	21 96       	adiw	r28, 0x01	; 1
    61fc:	ff ef       	ldi	r31, 0xFF	; 255
    61fe:	ef 1a       	sub	r14, r31
    6200:	ff 0a       	sbc	r15, r31
    6202:	0e 5f       	subi	r16, 0xFE	; 254
    6204:	1f 4f       	sbci	r17, 0xFF	; 255
    6206:	cc cf       	rjmp	.-104    	; 0x61a0 <split_args+0x3a>
    6208:	80 e0       	ldi	r24, 0x00	; 0
    620a:	90 e0       	ldi	r25, 0x00	; 0
    620c:	03 c0       	rjmp	.+6      	; 0x6214 <split_args+0xae>
    620e:	c7 01       	movw	r24, r14
    6210:	01 c0       	rjmp	.+2      	; 0x6214 <split_args+0xae>
    6212:	ce 01       	movw	r24, r28
    6214:	cd b7       	in	r28, 0x3d	; 61
    6216:	de b7       	in	r29, 0x3e	; 62
    6218:	e8 e0       	ldi	r30, 0x08	; 8
    621a:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

0000621e <get_token>:
    621e:	ef 92       	push	r14
    6220:	ff 92       	push	r15
    6222:	0f 93       	push	r16
    6224:	1f 93       	push	r17
    6226:	cf 93       	push	r28
    6228:	df 93       	push	r29
    622a:	eb 01       	movw	r28, r22
    622c:	8a 01       	movw	r16, r20
    622e:	18 82       	st	Y, r1
    6230:	00 97       	sbiw	r24, 0x00	; 0
    6232:	89 f1       	breq	.+98     	; 0x6296 <get_token+0x78>
    6234:	fc 01       	movw	r30, r24
    6236:	20 81       	ld	r18, Z
    6238:	22 23       	and	r18, r18
    623a:	79 f1       	breq	.+94     	; 0x629a <get_token+0x7c>
    623c:	1e df       	rcall	.-452    	; 0x607a <skipspaces>
    623e:	7c 01       	movw	r14, r24
    6240:	0c df       	rcall	.-488    	; 0x605a <trim_tail>
    6242:	f7 01       	movw	r30, r14
    6244:	cf 01       	movw	r24, r30
    6246:	21 91       	ld	r18, Z+
    6248:	21 32       	cpi	r18, 0x21	; 33
    624a:	e0 f0       	brcs	.+56     	; 0x6284 <get_token+0x66>
    624c:	10 16       	cp	r1, r16
    624e:	11 06       	cpc	r1, r17
    6250:	cc f4       	brge	.+50     	; 0x6284 <get_token+0x66>
    6252:	22 32       	cpi	r18, 0x22	; 34
    6254:	79 f4       	brne	.+30     	; 0x6274 <get_token+0x56>
    6256:	fc 01       	movw	r30, r24
    6258:	31 96       	adiw	r30, 0x01	; 1
    625a:	0c 0f       	add	r16, r28
    625c:	1d 1f       	adc	r17, r29
    625e:	cf 01       	movw	r24, r30
    6260:	21 91       	ld	r18, Z+
    6262:	22 23       	and	r18, r18
    6264:	79 f0       	breq	.+30     	; 0x6284 <get_token+0x66>
    6266:	22 32       	cpi	r18, 0x22	; 34
    6268:	59 f0       	breq	.+22     	; 0x6280 <get_token+0x62>
    626a:	c0 17       	cp	r28, r16
    626c:	d1 07       	cpc	r29, r17
    626e:	51 f0       	breq	.+20     	; 0x6284 <get_token+0x66>
    6270:	29 93       	st	Y+, r18
    6272:	f5 cf       	rjmp	.-22     	; 0x625e <get_token+0x40>
    6274:	2c 32       	cpi	r18, 0x2C	; 44
    6276:	31 f0       	breq	.+12     	; 0x6284 <get_token+0x66>
    6278:	29 93       	st	Y+, r18
    627a:	01 50       	subi	r16, 0x01	; 1
    627c:	11 09       	sbc	r17, r1
    627e:	e2 cf       	rjmp	.-60     	; 0x6244 <get_token+0x26>
    6280:	cf 01       	movw	r24, r30
    6282:	18 82       	st	Y, r1
    6284:	fa de       	rcall	.-524    	; 0x607a <skipspaces>
    6286:	fc 01       	movw	r30, r24
    6288:	80 81       	ld	r24, Z
    628a:	8c 32       	cpi	r24, 0x2C	; 44
    628c:	09 f4       	brne	.+2      	; 0x6290 <get_token+0x72>
    628e:	31 96       	adiw	r30, 0x01	; 1
    6290:	18 82       	st	Y, r1
    6292:	cf 01       	movw	r24, r30
    6294:	02 c0       	rjmp	.+4      	; 0x629a <get_token+0x7c>
    6296:	80 e0       	ldi	r24, 0x00	; 0
    6298:	90 e0       	ldi	r25, 0x00	; 0
    629a:	cd b7       	in	r28, 0x3d	; 61
    629c:	de b7       	in	r29, 0x3e	; 62
    629e:	e6 e0       	ldi	r30, 0x06	; 6
    62a0:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

000062a4 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    62a4:	a2 e0       	ldi	r26, 0x02	; 2
    62a6:	b0 e0       	ldi	r27, 0x00	; 0
    62a8:	e8 e5       	ldi	r30, 0x58	; 88
    62aa:	f1 e3       	ldi	r31, 0x31	; 49
    62ac:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    62b0:	00 97       	sbiw	r24, 0x00	; 0
    62b2:	79 f1       	breq	.+94     	; 0x6312 <get_value+0x6e>
    62b4:	fc 01       	movw	r30, r24
    62b6:	20 81       	ld	r18, Z
    62b8:	22 23       	and	r18, r18
    62ba:	59 f1       	breq	.+86     	; 0x6312 <get_value+0x6e>
        return(0);

    ptr = skipspaces(str);
    62bc:	de de       	rcall	.-580    	; 0x607a <skipspaces>
    62be:	8c 01       	movw	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    62c0:	6f e2       	ldi	r22, 0x2F	; 47
    62c2:	73 e0       	ldi	r23, 0x03	; 3
    62c4:	36 df       	rcall	.-404    	; 0x6132 <MATCHI_LEN>
    62c6:	00 97       	sbiw	r24, 0x00	; 0
    62c8:	29 f0       	breq	.+10     	; 0x62d4 <get_value+0x30>
    {
        base = 16;
        ptr += ret;
    62ca:	08 0f       	add	r16, r24
    62cc:	19 1f       	adc	r17, r25
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    62ce:	40 e1       	ldi	r20, 0x10	; 16
    62d0:	50 e0       	ldi	r21, 0x00	; 0
    62d2:	18 c0       	rjmp	.+48     	; 0x6304 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    62d4:	62 e3       	ldi	r22, 0x32	; 50
    62d6:	73 e0       	ldi	r23, 0x03	; 3
    62d8:	c8 01       	movw	r24, r16
    62da:	2b df       	rcall	.-426    	; 0x6132 <MATCHI_LEN>
    62dc:	00 97       	sbiw	r24, 0x00	; 0
    62de:	29 f0       	breq	.+10     	; 0x62ea <get_value+0x46>
    {
        base = 8;
        ptr += ret;
    62e0:	08 0f       	add	r16, r24
    62e2:	19 1f       	adc	r17, r25
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    62e4:	48 e0       	ldi	r20, 0x08	; 8
    62e6:	50 e0       	ldi	r21, 0x00	; 0
    62e8:	0d c0       	rjmp	.+26     	; 0x6304 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    62ea:	65 e3       	ldi	r22, 0x35	; 53
    62ec:	73 e0       	ldi	r23, 0x03	; 3
    62ee:	c8 01       	movw	r24, r16
    62f0:	20 df       	rcall	.-448    	; 0x6132 <MATCHI_LEN>
    62f2:	00 97       	sbiw	r24, 0x00	; 0
    62f4:	29 f0       	breq	.+10     	; 0x6300 <get_value+0x5c>
    {
        base = 2;
        ptr += ret;
    62f6:	08 0f       	add	r16, r24
    62f8:	19 1f       	adc	r17, r25
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    62fa:	42 e0       	ldi	r20, 0x02	; 2
    62fc:	50 e0       	ldi	r21, 0x00	; 0
    62fe:	02 c0       	rjmp	.+4      	; 0x6304 <get_value+0x60>

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    6300:	4a e0       	ldi	r20, 0x0A	; 10
    6302:	50 e0       	ldi	r21, 0x00	; 0
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    6304:	be 01       	movw	r22, r28
    6306:	6f 5f       	subi	r22, 0xFF	; 255
    6308:	7f 4f       	sbci	r23, 0xFF	; 255
    630a:	c8 01       	movw	r24, r16
    630c:	0e 94 49 45 	call	0x8a92	; 0x8a92 <strtol>
    6310:	03 c0       	rjmp	.+6      	; 0x6318 <get_value+0x74>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    6312:	60 e0       	ldi	r22, 0x00	; 0
    6314:	70 e0       	ldi	r23, 0x00	; 0
    6316:	cb 01       	movw	r24, r22
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    6318:	22 96       	adiw	r28, 0x02	; 2
    631a:	e4 e0       	ldi	r30, 0x04	; 4
    631c:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

00006320 <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    6320:	78 94       	sei
    6322:	08 95       	ret

00006324 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    6324:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    6326:	89 e0       	ldi	r24, 0x09	; 9
    6328:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    632c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    6330:	8f e1       	ldi	r24, 0x1F	; 31
    6332:	9e e4       	ldi	r25, 0x4E	; 78
    6334:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    6338:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    633c:	ef e6       	ldi	r30, 0x6F	; 111
    633e:	f0 e0       	ldi	r31, 0x00	; 0
    6340:	80 81       	ld	r24, Z
    6342:	82 60       	ori	r24, 0x02	; 2
    6344:	80 83       	st	Z, r24
    sei();
    6346:	78 94       	sei
    6348:	08 95       	ret

0000634a <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    634a:	1f 92       	push	r1
    634c:	0f 92       	push	r0
    634e:	0f b6       	in	r0, 0x3f	; 63
    6350:	0f 92       	push	r0
    6352:	11 24       	eor	r1, r1
    6354:	0b b6       	in	r0, 0x3b	; 59
    6356:	0f 92       	push	r0
    6358:	2f 93       	push	r18
    635a:	3f 93       	push	r19
    635c:	4f 93       	push	r20
    635e:	5f 93       	push	r21
    6360:	6f 93       	push	r22
    6362:	7f 93       	push	r23
    6364:	8f 93       	push	r24
    6366:	9f 93       	push	r25
    6368:	af 93       	push	r26
    636a:	bf 93       	push	r27
    636c:	ef 93       	push	r30
    636e:	ff 93       	push	r31
    execute_timers();
    6370:	36 d2       	rcall	.+1132   	; 0x67de <execute_timers>
}
    6372:	ff 91       	pop	r31
    6374:	ef 91       	pop	r30
    6376:	bf 91       	pop	r27
    6378:	af 91       	pop	r26
    637a:	9f 91       	pop	r25
    637c:	8f 91       	pop	r24
    637e:	7f 91       	pop	r23
    6380:	6f 91       	pop	r22
    6382:	5f 91       	pop	r21
    6384:	4f 91       	pop	r20
    6386:	3f 91       	pop	r19
    6388:	2f 91       	pop	r18
    638a:	0f 90       	pop	r0
    638c:	0b be       	out	0x3b, r0	; 59
    638e:	0f 90       	pop	r0
    6390:	0f be       	out	0x3f, r0	; 63
    6392:	0f 90       	pop	r0
    6394:	1f 90       	pop	r1
    6396:	18 95       	reti

00006398 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    6398:	0f 93       	push	r16
    639a:	1f 93       	push	r17
    639c:	cf 93       	push	r28
    639e:	df 93       	push	r29
    63a0:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    63a2:	f8 94       	cli

    count1 = TCNT1;
    63a4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    63a8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    63ac:	80 91 53 1a 	lds	r24, 0x1A53	; 0x801a53 <__clock>
    63b0:	90 91 54 1a 	lds	r25, 0x1A54	; 0x801a54 <__clock+0x1>
    63b4:	a0 91 55 1a 	lds	r26, 0x1A55	; 0x801a55 <__clock+0x2>
    63b8:	b0 91 56 1a 	lds	r27, 0x1A56	; 0x801a56 <__clock+0x3>
    63bc:	80 83       	st	Z, r24
    63be:	91 83       	std	Z+1, r25	; 0x01
    63c0:	a2 83       	std	Z+2, r26	; 0x02
    63c2:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    63c4:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <__clock+0x4>
    63c8:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <__clock+0x5>
    63cc:	a0 91 59 1a 	lds	r26, 0x1A59	; 0x801a59 <__clock+0x6>
    63d0:	b0 91 5a 1a 	lds	r27, 0x1A5A	; 0x801a5a <__clock+0x7>
    63d4:	84 83       	std	Z+4, r24	; 0x04
    63d6:	95 83       	std	Z+5, r25	; 0x05
    63d8:	a6 83       	std	Z+6, r26	; 0x06
    63da:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    63dc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    63e0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    63e4:	b1 9b       	sbis	0x16, 1	; 22
    63e6:	03 c0       	rjmp	.+6      	; 0x63ee <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    63e8:	c0 e0       	ldi	r28, 0x00	; 0
    63ea:	d0 e0       	ldi	r29, 0x00	; 0
    63ec:	3f c0       	rjmp	.+126    	; 0x646c <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    63ee:	82 17       	cp	r24, r18
    63f0:	93 07       	cpc	r25, r19
    63f2:	d0 f1       	brcs	.+116    	; 0x6468 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    63f4:	c0 e0       	ldi	r28, 0x00	; 0
    63f6:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    63f8:	40 e0       	ldi	r20, 0x00	; 0
    63fa:	50 e0       	ldi	r21, 0x00	; 0
    63fc:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    63fe:	9a 01       	movw	r18, r20
    6400:	ab 01       	movw	r20, r22
    6402:	28 0f       	add	r18, r24
    6404:	39 1f       	adc	r19, r25
    6406:	41 1d       	adc	r20, r1
    6408:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    640a:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    640c:	a2 e3       	ldi	r26, 0x32	; 50
    640e:	b0 e0       	ldi	r27, 0x00	; 0
    6410:	0e 94 3c e3 	call	0x1c678	; 0x1c678 <__muluhisi3>
    6414:	04 81       	ldd	r16, Z+4	; 0x04
    6416:	15 81       	ldd	r17, Z+5	; 0x05
    6418:	26 81       	ldd	r18, Z+6	; 0x06
    641a:	37 81       	ldd	r19, Z+7	; 0x07
    641c:	dc 01       	movw	r26, r24
    641e:	cb 01       	movw	r24, r22
    6420:	80 0f       	add	r24, r16
    6422:	91 1f       	adc	r25, r17
    6424:	a2 1f       	adc	r26, r18
    6426:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    6428:	81 15       	cp	r24, r1
    642a:	2a ec       	ldi	r18, 0xCA	; 202
    642c:	92 07       	cpc	r25, r18
    642e:	2a e9       	ldi	r18, 0x9A	; 154
    6430:	a2 07       	cpc	r26, r18
    6432:	2b e3       	ldi	r18, 0x3B	; 59
    6434:	b2 07       	cpc	r27, r18
    6436:	2c f4       	brge	.+10     	; 0x6442 <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6438:	84 83       	std	Z+4, r24	; 0x04
    643a:	95 83       	std	Z+5, r25	; 0x05
    643c:	a6 83       	std	Z+6, r26	; 0x06
    643e:	b7 83       	std	Z+7, r27	; 0x07
    6440:	1a c0       	rjmp	.+52     	; 0x6476 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6442:	9a 5c       	subi	r25, 0xCA	; 202
    6444:	aa 49       	sbci	r26, 0x9A	; 154
    6446:	bb 43       	sbci	r27, 0x3B	; 59
    6448:	84 83       	std	Z+4, r24	; 0x04
    644a:	95 83       	std	Z+5, r25	; 0x05
    644c:	a6 83       	std	Z+6, r26	; 0x06
    644e:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    6450:	80 81       	ld	r24, Z
    6452:	91 81       	ldd	r25, Z+1	; 0x01
    6454:	a2 81       	ldd	r26, Z+2	; 0x02
    6456:	b3 81       	ldd	r27, Z+3	; 0x03
    6458:	01 96       	adiw	r24, 0x01	; 1
    645a:	a1 1d       	adc	r26, r1
    645c:	b1 1d       	adc	r27, r1
    645e:	80 83       	st	Z, r24
    6460:	91 83       	std	Z+1, r25	; 0x01
    6462:	a2 83       	std	Z+2, r26	; 0x02
    6464:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6466:	07 c0       	rjmp	.+14     	; 0x6476 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    6468:	cf ef       	ldi	r28, 0xFF	; 255
    646a:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    646c:	40 e2       	ldi	r20, 0x20	; 32
    646e:	5e e4       	ldi	r21, 0x4E	; 78
    6470:	60 e0       	ldi	r22, 0x00	; 0
    6472:	70 e0       	ldi	r23, 0x00	; 0
    6474:	c4 cf       	rjmp	.-120    	; 0x63fe <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6476:	ce 01       	movw	r24, r28
    6478:	df 91       	pop	r29
    647a:	cf 91       	pop	r28
    647c:	1f 91       	pop	r17
    647e:	0f 91       	pop	r16
    6480:	08 95       	ret

00006482 <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    6482:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <__clock+0x4>
    6486:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <__clock+0x5>
    648a:	a0 91 59 1a 	lds	r26, 0x1A59	; 0x801a59 <__clock+0x6>
    648e:	b0 91 5a 1a 	lds	r27, 0x1A5A	; 0x801a5a <__clock+0x7>
    6492:	80 5c       	subi	r24, 0xC0	; 192
    6494:	9d 4b       	sbci	r25, 0xBD	; 189
    6496:	a0 4f       	sbci	r26, 0xF0	; 240
    6498:	bf 4f       	sbci	r27, 0xFF	; 255
    649a:	80 93 57 1a 	sts	0x1A57, r24	; 0x801a57 <__clock+0x4>
    649e:	90 93 58 1a 	sts	0x1A58, r25	; 0x801a58 <__clock+0x5>
    64a2:	a0 93 59 1a 	sts	0x1A59, r26	; 0x801a59 <__clock+0x6>
    64a6:	b0 93 5a 1a 	sts	0x1A5A, r27	; 0x801a5a <__clock+0x7>
    64aa:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <__clock+0x4>
    64ae:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <__clock+0x5>
    64b2:	a0 91 59 1a 	lds	r26, 0x1A59	; 0x801a59 <__clock+0x6>
    64b6:	b0 91 5a 1a 	lds	r27, 0x1A5A	; 0x801a5a <__clock+0x7>
    64ba:	81 15       	cp	r24, r1
    64bc:	9a 4c       	sbci	r25, 0xCA	; 202
    64be:	aa 49       	sbci	r26, 0x9A	; 154
    64c0:	bb 43       	sbci	r27, 0x3B	; 59
    64c2:	dc f0       	brlt	.+54     	; 0x64fa <clock_task+0x78>
    64c4:	80 91 53 1a 	lds	r24, 0x1A53	; 0x801a53 <__clock>
    64c8:	90 91 54 1a 	lds	r25, 0x1A54	; 0x801a54 <__clock+0x1>
    64cc:	a0 91 55 1a 	lds	r26, 0x1A55	; 0x801a55 <__clock+0x2>
    64d0:	b0 91 56 1a 	lds	r27, 0x1A56	; 0x801a56 <__clock+0x3>
    64d4:	01 96       	adiw	r24, 0x01	; 1
    64d6:	a1 1d       	adc	r26, r1
    64d8:	b1 1d       	adc	r27, r1
    64da:	80 93 53 1a 	sts	0x1A53, r24	; 0x801a53 <__clock>
    64de:	90 93 54 1a 	sts	0x1A54, r25	; 0x801a54 <__clock+0x1>
    64e2:	a0 93 55 1a 	sts	0x1A55, r26	; 0x801a55 <__clock+0x2>
    64e6:	b0 93 56 1a 	sts	0x1A56, r27	; 0x801a56 <__clock+0x3>
    64ea:	10 92 57 1a 	sts	0x1A57, r1	; 0x801a57 <__clock+0x4>
    64ee:	10 92 58 1a 	sts	0x1A58, r1	; 0x801a58 <__clock+0x5>
    64f2:	10 92 59 1a 	sts	0x1A59, r1	; 0x801a59 <__clock+0x6>
    64f6:	10 92 5a 1a 	sts	0x1A5A, r1	; 0x801a5a <__clock+0x7>
    64fa:	08 95       	ret

000064fc <clock_settime.part.2>:
    64fc:	fc 01       	movw	r30, r24
    64fe:	84 81       	ldd	r24, Z+4	; 0x04
    6500:	95 81       	ldd	r25, Z+5	; 0x05
    6502:	a6 81       	ldd	r26, Z+6	; 0x06
    6504:	b7 81       	ldd	r27, Z+7	; 0x07
    6506:	80 93 57 1a 	sts	0x1A57, r24	; 0x801a57 <__clock+0x4>
    650a:	90 93 58 1a 	sts	0x1A58, r25	; 0x801a58 <__clock+0x5>
    650e:	a0 93 59 1a 	sts	0x1A59, r26	; 0x801a59 <__clock+0x6>
    6512:	b0 93 5a 1a 	sts	0x1A5A, r27	; 0x801a5a <__clock+0x7>
    6516:	80 81       	ld	r24, Z
    6518:	91 81       	ldd	r25, Z+1	; 0x01
    651a:	a2 81       	ldd	r26, Z+2	; 0x02
    651c:	b3 81       	ldd	r27, Z+3	; 0x03
    651e:	80 93 53 1a 	sts	0x1A53, r24	; 0x801a53 <__clock>
    6522:	90 93 54 1a 	sts	0x1A54, r25	; 0x801a54 <__clock+0x1>
    6526:	a0 93 55 1a 	sts	0x1A55, r26	; 0x801a55 <__clock+0x2>
    652a:	b0 93 56 1a 	sts	0x1A56, r27	; 0x801a56 <__clock+0x3>
    652e:	80 91 57 1a 	lds	r24, 0x1A57	; 0x801a57 <__clock+0x4>
    6532:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <__clock+0x5>
    6536:	a0 91 59 1a 	lds	r26, 0x1A59	; 0x801a59 <__clock+0x6>
    653a:	b0 91 5a 1a 	lds	r27, 0x1A5A	; 0x801a5a <__clock+0x7>
    653e:	44 81       	ldd	r20, Z+4	; 0x04
    6540:	55 81       	ldd	r21, Z+5	; 0x05
    6542:	66 81       	ldd	r22, Z+6	; 0x06
    6544:	77 81       	ldd	r23, Z+7	; 0x07
    6546:	48 17       	cp	r20, r24
    6548:	59 07       	cpc	r21, r25
    654a:	6a 07       	cpc	r22, r26
    654c:	7b 07       	cpc	r23, r27
    654e:	b9 f6       	brne	.-82     	; 0x64fe <clock_settime.part.2+0x2>
    6550:	80 91 53 1a 	lds	r24, 0x1A53	; 0x801a53 <__clock>
    6554:	90 91 54 1a 	lds	r25, 0x1A54	; 0x801a54 <__clock+0x1>
    6558:	a0 91 55 1a 	lds	r26, 0x1A55	; 0x801a55 <__clock+0x2>
    655c:	b0 91 56 1a 	lds	r27, 0x1A56	; 0x801a56 <__clock+0x3>
    6560:	40 81       	ld	r20, Z
    6562:	51 81       	ldd	r21, Z+1	; 0x01
    6564:	62 81       	ldd	r22, Z+2	; 0x02
    6566:	73 81       	ldd	r23, Z+3	; 0x03
    6568:	48 17       	cp	r20, r24
    656a:	59 07       	cpc	r21, r25
    656c:	6a 07       	cpc	r22, r26
    656e:	7b 07       	cpc	r23, r27
    6570:	31 f6       	brne	.-116    	; 0x64fe <clock_settime.part.2+0x2>
    6572:	80 e0       	ldi	r24, 0x00	; 0
    6574:	90 e0       	ldi	r25, 0x00	; 0
    6576:	08 95       	ret

00006578 <set_timers>:
    6578:	00 d0       	rcall	.+0      	; 0x657a <set_timers+0x2>
    657a:	1f 92       	push	r1
    657c:	00 97       	sbiw	r24, 0x00	; 0
    657e:	79 f1       	breq	.+94     	; 0x65de <set_timers+0x66>
    6580:	eb e5       	ldi	r30, 0x5B	; 91
    6582:	fa e1       	ldi	r31, 0x1A	; 26
    6584:	4f ef       	ldi	r20, 0xFF	; 255
    6586:	5f ef       	ldi	r21, 0xFF	; 255
    6588:	20 e0       	ldi	r18, 0x00	; 0
    658a:	30 e0       	ldi	r19, 0x00	; 0
    658c:	60 81       	ld	r22, Z
    658e:	71 81       	ldd	r23, Z+1	; 0x01
    6590:	86 17       	cp	r24, r22
    6592:	97 07       	cpc	r25, r23
    6594:	79 f0       	breq	.+30     	; 0x65b4 <set_timers+0x3c>
    6596:	67 2b       	or	r22, r23
    6598:	71 f4       	brne	.+28     	; 0x65b6 <set_timers+0x3e>
    659a:	f9 01       	movw	r30, r18
    659c:	ee 0f       	add	r30, r30
    659e:	ff 1f       	adc	r31, r31
    65a0:	e2 0f       	add	r30, r18
    65a2:	f3 1f       	adc	r31, r19
    65a4:	e5 5a       	subi	r30, 0xA5	; 165
    65a6:	f5 4e       	sbci	r31, 0xE5	; 229
    65a8:	91 83       	std	Z+1, r25	; 0x01
    65aa:	80 83       	st	Z, r24
    65ac:	81 e0       	ldi	r24, 0x01	; 1
    65ae:	82 83       	std	Z+2, r24	; 0x02
    65b0:	c9 01       	movw	r24, r18
    65b2:	19 c0       	rjmp	.+50     	; 0x65e6 <set_timers+0x6e>
    65b4:	a9 01       	movw	r20, r18
    65b6:	2f 5f       	subi	r18, 0xFF	; 255
    65b8:	3f 4f       	sbci	r19, 0xFF	; 255
    65ba:	33 96       	adiw	r30, 0x03	; 3
    65bc:	28 30       	cpi	r18, 0x08	; 8
    65be:	31 05       	cpc	r19, r1
    65c0:	29 f7       	brne	.-54     	; 0x658c <set_timers+0x14>
    65c2:	4f 3f       	cpi	r20, 0xFF	; 255
    65c4:	8f ef       	ldi	r24, 0xFF	; 255
    65c6:	58 07       	cpc	r21, r24
    65c8:	69 f4       	brne	.+26     	; 0x65e4 <set_timers+0x6c>
    65ca:	8d ec       	ldi	r24, 0xCD	; 205
    65cc:	95 e0       	ldi	r25, 0x05	; 5
    65ce:	a0 e0       	ldi	r26, 0x00	; 0
    65d0:	ed b7       	in	r30, 0x3d	; 61
    65d2:	fe b7       	in	r31, 0x3e	; 62
    65d4:	81 83       	std	Z+1, r24	; 0x01
    65d6:	92 83       	std	Z+2, r25	; 0x02
    65d8:	a3 83       	std	Z+3, r26	; 0x03
    65da:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    65de:	8f ef       	ldi	r24, 0xFF	; 255
    65e0:	9f ef       	ldi	r25, 0xFF	; 255
    65e2:	01 c0       	rjmp	.+2      	; 0x65e6 <set_timers+0x6e>
    65e4:	ca 01       	movw	r24, r20
    65e6:	0f 90       	pop	r0
    65e8:	0f 90       	pop	r0
    65ea:	0f 90       	pop	r0
    65ec:	08 95       	ret

000065ee <delete_all_timers>:
    65ee:	eb e5       	ldi	r30, 0x5B	; 91
    65f0:	fa e1       	ldi	r31, 0x1A	; 26
    65f2:	12 82       	std	Z+2, r1	; 0x02
    65f4:	11 82       	std	Z+1, r1	; 0x01
    65f6:	10 82       	st	Z, r1
    65f8:	33 96       	adiw	r30, 0x03	; 3
    65fa:	8a e1       	ldi	r24, 0x1A	; 26
    65fc:	e3 37       	cpi	r30, 0x73	; 115
    65fe:	f8 07       	cpc	r31, r24
    6600:	c1 f7       	brne	.-16     	; 0x65f2 <delete_all_timers+0x4>
    6602:	08 95       	ret

00006604 <subtract_timespec>:
    6604:	0f 93       	push	r16
    6606:	1f 93       	push	r17
    6608:	cf 93       	push	r28
    660a:	df 93       	push	r29
    660c:	fc 01       	movw	r30, r24
    660e:	84 81       	ldd	r24, Z+4	; 0x04
    6610:	95 81       	ldd	r25, Z+5	; 0x05
    6612:	a6 81       	ldd	r26, Z+6	; 0x06
    6614:	b7 81       	ldd	r27, Z+7	; 0x07
    6616:	eb 01       	movw	r28, r22
    6618:	0c 81       	ldd	r16, Y+4	; 0x04
    661a:	1d 81       	ldd	r17, Y+5	; 0x05
    661c:	2e 81       	ldd	r18, Y+6	; 0x06
    661e:	3f 81       	ldd	r19, Y+7	; 0x07
    6620:	80 1b       	sub	r24, r16
    6622:	91 0b       	sbc	r25, r17
    6624:	a2 0b       	sbc	r26, r18
    6626:	b3 0b       	sbc	r27, r19
    6628:	b7 fd       	sbrc	r27, 7
    662a:	05 c0       	rjmp	.+10     	; 0x6636 <subtract_timespec+0x32>
    662c:	84 83       	std	Z+4, r24	; 0x04
    662e:	95 83       	std	Z+5, r25	; 0x05
    6630:	a6 83       	std	Z+6, r26	; 0x06
    6632:	b7 83       	std	Z+7, r27	; 0x07
    6634:	12 c0       	rjmp	.+36     	; 0x665a <subtract_timespec+0x56>
    6636:	96 53       	subi	r25, 0x36	; 54
    6638:	a5 46       	sbci	r26, 0x65	; 101
    663a:	b4 4c       	sbci	r27, 0xC4	; 196
    663c:	84 83       	std	Z+4, r24	; 0x04
    663e:	95 83       	std	Z+5, r25	; 0x05
    6640:	a6 83       	std	Z+6, r26	; 0x06
    6642:	b7 83       	std	Z+7, r27	; 0x07
    6644:	80 81       	ld	r24, Z
    6646:	91 81       	ldd	r25, Z+1	; 0x01
    6648:	a2 81       	ldd	r26, Z+2	; 0x02
    664a:	b3 81       	ldd	r27, Z+3	; 0x03
    664c:	01 97       	sbiw	r24, 0x01	; 1
    664e:	a1 09       	sbc	r26, r1
    6650:	b1 09       	sbc	r27, r1
    6652:	80 83       	st	Z, r24
    6654:	91 83       	std	Z+1, r25	; 0x01
    6656:	a2 83       	std	Z+2, r26	; 0x02
    6658:	b3 83       	std	Z+3, r27	; 0x03
    665a:	80 81       	ld	r24, Z
    665c:	91 81       	ldd	r25, Z+1	; 0x01
    665e:	a2 81       	ldd	r26, Z+2	; 0x02
    6660:	b3 81       	ldd	r27, Z+3	; 0x03
    6662:	eb 01       	movw	r28, r22
    6664:	48 81       	ld	r20, Y
    6666:	59 81       	ldd	r21, Y+1	; 0x01
    6668:	6a 81       	ldd	r22, Y+2	; 0x02
    666a:	7b 81       	ldd	r23, Y+3	; 0x03
    666c:	84 1b       	sub	r24, r20
    666e:	95 0b       	sbc	r25, r21
    6670:	a6 0b       	sbc	r26, r22
    6672:	b7 0b       	sbc	r27, r23
    6674:	80 83       	st	Z, r24
    6676:	91 83       	std	Z+1, r25	; 0x01
    6678:	a2 83       	std	Z+2, r26	; 0x02
    667a:	b3 83       	std	Z+3, r27	; 0x03
    667c:	df 91       	pop	r29
    667e:	cf 91       	pop	r28
    6680:	1f 91       	pop	r17
    6682:	0f 91       	pop	r16
    6684:	08 95       	ret

00006686 <ts_to_str>:
    6686:	ad b7       	in	r26, 0x3d	; 61
    6688:	be b7       	in	r27, 0x3e	; 62
    668a:	1f 97       	sbiw	r26, 0x0f	; 15
    668c:	0f b6       	in	r0, 0x3f	; 63
    668e:	f8 94       	cli
    6690:	be bf       	out	0x3e, r27	; 62
    6692:	0f be       	out	0x3f, r0	; 63
    6694:	ad bf       	out	0x3d, r26	; 61
    6696:	fc 01       	movw	r30, r24
    6698:	44 81       	ldd	r20, Z+4	; 0x04
    669a:	55 81       	ldd	r21, Z+5	; 0x05
    669c:	66 81       	ldd	r22, Z+6	; 0x06
    669e:	77 81       	ldd	r23, Z+7	; 0x07
    66a0:	ed b7       	in	r30, 0x3d	; 61
    66a2:	fe b7       	in	r31, 0x3e	; 62
    66a4:	44 87       	std	Z+12, r20	; 0x0c
    66a6:	55 87       	std	Z+13, r21	; 0x0d
    66a8:	66 87       	std	Z+14, r22	; 0x0e
    66aa:	77 87       	std	Z+15, r23	; 0x0f
    66ac:	fc 01       	movw	r30, r24
    66ae:	80 81       	ld	r24, Z
    66b0:	91 81       	ldd	r25, Z+1	; 0x01
    66b2:	a2 81       	ldd	r26, Z+2	; 0x02
    66b4:	b3 81       	ldd	r27, Z+3	; 0x03
    66b6:	ed b7       	in	r30, 0x3d	; 61
    66b8:	fe b7       	in	r31, 0x3e	; 62
    66ba:	80 87       	std	Z+8, r24	; 0x08
    66bc:	91 87       	std	Z+9, r25	; 0x09
    66be:	a2 87       	std	Z+10, r26	; 0x0a
    66c0:	b3 87       	std	Z+11, r27	; 0x0b
    66c2:	83 ec       	ldi	r24, 0xC3	; 195
    66c4:	95 e0       	ldi	r25, 0x05	; 5
    66c6:	a0 e0       	ldi	r26, 0x00	; 0
    66c8:	85 83       	std	Z+5, r24	; 0x05
    66ca:	96 83       	std	Z+6, r25	; 0x06
    66cc:	a7 83       	std	Z+7, r26	; 0x07
    66ce:	8f e1       	ldi	r24, 0x1F	; 31
    66d0:	90 e0       	ldi	r25, 0x00	; 0
    66d2:	94 83       	std	Z+4, r25	; 0x04
    66d4:	83 83       	std	Z+3, r24	; 0x03
    66d6:	88 e8       	ldi	r24, 0x88	; 136
    66d8:	97 e1       	ldi	r25, 0x17	; 23
    66da:	92 83       	std	Z+2, r25	; 0x02
    66dc:	81 83       	std	Z+1, r24	; 0x01
    66de:	0e 94 e6 44 	call	0x89cc	; 0x89cc <snprintf_P>
    66e2:	88 e8       	ldi	r24, 0x88	; 136
    66e4:	97 e1       	ldi	r25, 0x17	; 23
    66e6:	ad b7       	in	r26, 0x3d	; 61
    66e8:	be b7       	in	r27, 0x3e	; 62
    66ea:	1f 96       	adiw	r26, 0x0f	; 15
    66ec:	0f b6       	in	r0, 0x3f	; 63
    66ee:	f8 94       	cli
    66f0:	be bf       	out	0x3e, r27	; 62
    66f2:	0f be       	out	0x3f, r0	; 63
    66f4:	ad bf       	out	0x3d, r26	; 61
    66f6:	08 95       	ret

000066f8 <clock_elapsed_begin>:
    66f8:	60 e8       	ldi	r22, 0x80	; 128
    66fa:	77 e1       	ldi	r23, 0x17	; 23
    66fc:	80 e0       	ldi	r24, 0x00	; 0
    66fe:	90 e0       	ldi	r25, 0x00	; 0
    6700:	4b ce       	rjmp	.-874    	; 0x6398 <clock_gettime>
    6702:	08 95       	ret

00006704 <clock_elapsed_end>:
    6704:	af e0       	ldi	r26, 0x0F	; 15
    6706:	b0 e0       	ldi	r27, 0x00	; 0
    6708:	e8 e8       	ldi	r30, 0x88	; 136
    670a:	f3 e3       	ldi	r31, 0x33	; 51
    670c:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__prologue_saves__+0x1c>
    6710:	8c 01       	movw	r16, r24
    6712:	be 01       	movw	r22, r28
    6714:	68 5f       	subi	r22, 0xF8	; 248
    6716:	7f 4f       	sbci	r23, 0xFF	; 255
    6718:	80 e0       	ldi	r24, 0x00	; 0
    671a:	90 e0       	ldi	r25, 0x00	; 0
    671c:	3d de       	rcall	.-902    	; 0x6398 <clock_gettime>
    671e:	60 e8       	ldi	r22, 0x80	; 128
    6720:	77 e1       	ldi	r23, 0x17	; 23
    6722:	ce 01       	movw	r24, r28
    6724:	08 96       	adiw	r24, 0x08	; 8
    6726:	6e df       	rcall	.-292    	; 0x6604 <subtract_timespec>
    6728:	01 15       	cp	r16, r1
    672a:	11 05       	cpc	r17, r1
    672c:	b1 f0       	breq	.+44     	; 0x675a <clock_elapsed_end+0x56>
    672e:	f8 01       	movw	r30, r16
    6730:	80 81       	ld	r24, Z
    6732:	88 23       	and	r24, r24
    6734:	91 f0       	breq	.+36     	; 0x675a <clock_elapsed_end+0x56>
    6736:	ce 01       	movw	r24, r28
    6738:	08 96       	adiw	r24, 0x08	; 8
    673a:	a5 df       	rcall	.-182    	; 0x6686 <ts_to_str>
    673c:	ed b7       	in	r30, 0x3d	; 61
    673e:	fe b7       	in	r31, 0x3e	; 62
    6740:	97 83       	std	Z+7, r25	; 0x07
    6742:	86 83       	std	Z+6, r24	; 0x06
    6744:	15 83       	std	Z+5, r17	; 0x05
    6746:	04 83       	std	Z+4, r16	; 0x04
    6748:	85 eb       	ldi	r24, 0xB5	; 181
    674a:	95 e0       	ldi	r25, 0x05	; 5
    674c:	a0 e0       	ldi	r26, 0x00	; 0
    674e:	81 83       	std	Z+1, r24	; 0x01
    6750:	92 83       	std	Z+2, r25	; 0x02
    6752:	a3 83       	std	Z+3, r26	; 0x03
    6754:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    6758:	0f c0       	rjmp	.+30     	; 0x6778 <clock_elapsed_end+0x74>
    675a:	ce 01       	movw	r24, r28
    675c:	08 96       	adiw	r24, 0x08	; 8
    675e:	93 df       	rcall	.-218    	; 0x6686 <ts_to_str>
    6760:	ed b7       	in	r30, 0x3d	; 61
    6762:	fe b7       	in	r31, 0x3e	; 62
    6764:	95 83       	std	Z+5, r25	; 0x05
    6766:	84 83       	std	Z+4, r24	; 0x04
    6768:	8a ea       	ldi	r24, 0xAA	; 170
    676a:	95 e0       	ldi	r25, 0x05	; 5
    676c:	a0 e0       	ldi	r26, 0x00	; 0
    676e:	81 83       	std	Z+1, r24	; 0x01
    6770:	92 83       	std	Z+2, r25	; 0x02
    6772:	a3 83       	std	Z+3, r26	; 0x03
    6774:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    6778:	2f 96       	adiw	r28, 0x0f	; 15
    677a:	e4 e0       	ldi	r30, 0x04	; 4
    677c:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

00006780 <clock_clear>:
    6780:	a8 e0       	ldi	r26, 0x08	; 8
    6782:	b0 e0       	ldi	r27, 0x00	; 0
    6784:	e6 ec       	ldi	r30, 0xC6	; 198
    6786:	f3 e3       	ldi	r31, 0x33	; 51
    6788:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
    678c:	1d 82       	std	Y+5, r1	; 0x05
    678e:	1e 82       	std	Y+6, r1	; 0x06
    6790:	1f 82       	std	Y+7, r1	; 0x07
    6792:	18 86       	std	Y+8, r1	; 0x08
    6794:	19 82       	std	Y+1, r1	; 0x01
    6796:	1a 82       	std	Y+2, r1	; 0x02
    6798:	1b 82       	std	Y+3, r1	; 0x03
    679a:	1c 82       	std	Y+4, r1	; 0x04
    679c:	ce 01       	movw	r24, r28
    679e:	01 96       	adiw	r24, 0x01	; 1
    67a0:	ad de       	rcall	.-678    	; 0x64fc <clock_settime.part.2>
    67a2:	e3 e7       	ldi	r30, 0x73	; 115
    67a4:	fa e1       	ldi	r31, 0x1A	; 26
    67a6:	11 82       	std	Z+1, r1	; 0x01
    67a8:	10 82       	st	Z, r1
    67aa:	13 82       	std	Z+3, r1	; 0x03
    67ac:	12 82       	std	Z+2, r1	; 0x02
    67ae:	28 96       	adiw	r28, 0x08	; 8
    67b0:	e2 e0       	ldi	r30, 0x02	; 2
    67b2:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

000067b6 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    67b6:	80 91 a8 17 	lds	r24, 0x17A8	; 0x8017a8 <timers_configured>
    67ba:	90 91 a9 17 	lds	r25, 0x17A9	; 0x8017a9 <timers_configured+0x1>
    67be:	89 2b       	or	r24, r25
    67c0:	69 f0       	breq	.+26     	; 0x67dc <enable_timers+0x26>
    67c2:	80 91 aa 17 	lds	r24, 0x17AA	; 0x8017aa <timers_enabled>
    67c6:	90 91 ab 17 	lds	r25, 0x17AB	; 0x8017ab <timers_enabled+0x1>
    67ca:	89 2b       	or	r24, r25
    67cc:	39 f4       	brne	.+14     	; 0x67dc <enable_timers+0x26>
    {
        enable_system_task();
    67ce:	a8 dd       	rcall	.-1200   	; 0x6320 <enable_system_task>
        timers_enabled = 1;
    67d0:	81 e0       	ldi	r24, 0x01	; 1
    67d2:	90 e0       	ldi	r25, 0x00	; 0
    67d4:	90 93 ab 17 	sts	0x17AB, r25	; 0x8017ab <timers_enabled+0x1>
    67d8:	80 93 aa 17 	sts	0x17AA, r24	; 0x8017aa <timers_enabled>
    67dc:	08 95       	ret

000067de <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    67de:	cf 93       	push	r28
    67e0:	df 93       	push	r29
    67e2:	cb e5       	ldi	r28, 0x5B	; 91
    67e4:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    67e6:	8a 81       	ldd	r24, Y+2	; 0x02
    67e8:	88 23       	and	r24, r24
    67ea:	29 f0       	breq	.+10     	; 0x67f6 <execute_timers+0x18>
    67ec:	e8 81       	ld	r30, Y
    67ee:	f9 81       	ldd	r31, Y+1	; 0x01
    67f0:	30 97       	sbiw	r30, 0x00	; 0
    67f2:	09 f0       	breq	.+2      	; 0x67f6 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    67f4:	09 95       	icall
    67f6:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    67f8:	8a e1       	ldi	r24, 0x1A	; 26
    67fa:	c3 37       	cpi	r28, 0x73	; 115
    67fc:	d8 07       	cpc	r29, r24
    67fe:	99 f7       	brne	.-26     	; 0x67e6 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6800:	df 91       	pop	r29
    6802:	cf 91       	pop	r28
    6804:	08 95       	ret

00006806 <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6806:	00 d0       	rcall	.+0      	; 0x6808 <init_timers+0x2>
    6808:	1f 92       	push	r1
    printf("Timers init called\n");
    680a:	86 e9       	ldi	r24, 0x96	; 150
    680c:	95 e0       	ldi	r25, 0x05	; 5
    680e:	a0 e0       	ldi	r26, 0x00	; 0
    6810:	ed b7       	in	r30, 0x3d	; 61
    6812:	fe b7       	in	r31, 0x3e	; 62
    6814:	81 83       	std	Z+1, r24	; 0x01
    6816:	92 83       	std	Z+2, r25	; 0x02
    6818:	a3 83       	std	Z+3, r26	; 0x03
    681a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    if(!timers_configured)
    681e:	80 91 a8 17 	lds	r24, 0x17A8	; 0x8017a8 <timers_configured>
    6822:	90 91 a9 17 	lds	r25, 0x17A9	; 0x8017a9 <timers_configured+0x1>
    6826:	89 2b       	or	r24, r25
    6828:	a9 f4       	brne	.+42     	; 0x6854 <init_timers+0x4e>
    {
        install_timers_isr();
    682a:	7c dd       	rcall	.-1288   	; 0x6324 <install_timers_isr>
        timers_configured = 1;
    682c:	81 e0       	ldi	r24, 0x01	; 1
    682e:	90 e0       	ldi	r25, 0x00	; 0
    6830:	90 93 a9 17 	sts	0x17A9, r25	; 0x8017a9 <timers_configured+0x1>
    6834:	80 93 a8 17 	sts	0x17A8, r24	; 0x8017a8 <timers_configured>
        timers_enabled = 0;
    6838:	10 92 ab 17 	sts	0x17AB, r1	; 0x8017ab <timers_enabled+0x1>
    683c:	10 92 aa 17 	sts	0x17AA, r1	; 0x8017aa <timers_enabled>
        printf("Timers configured\n");
    6840:	83 e8       	ldi	r24, 0x83	; 131
    6842:	95 e0       	ldi	r25, 0x05	; 5
    6844:	a0 e0       	ldi	r26, 0x00	; 0
    6846:	ed b7       	in	r30, 0x3d	; 61
    6848:	fe b7       	in	r31, 0x3e	; 62
    684a:	81 83       	std	Z+1, r24	; 0x01
    684c:	92 83       	std	Z+2, r25	; 0x02
    684e:	a3 83       	std	Z+3, r26	; 0x03
    6850:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    }

    delete_all_timers();

    clock_clear();
    6854:	cc de       	rcall	.-616    	; 0x65ee <delete_all_timers>
    6856:	94 df       	rcall	.-216    	; 0x6780 <clock_clear>
    printf("Clock Init\n");
    6858:	87 e7       	ldi	r24, 0x77	; 119
    685a:	95 e0       	ldi	r25, 0x05	; 5
    685c:	a0 e0       	ldi	r26, 0x00	; 0
    685e:	ed b7       	in	r30, 0x3d	; 61
    6860:	fe b7       	in	r31, 0x3e	; 62
    6862:	81 83       	std	Z+1, r24	; 0x01
    6864:	92 83       	std	Z+2, r25	; 0x02
    6866:	a3 83       	std	Z+3, r26	; 0x03
    6868:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

///  See time.c
    if(set_timers(clock_task,1) == -1)
    686c:	61 e0       	ldi	r22, 0x01	; 1
    686e:	70 e0       	ldi	r23, 0x00	; 0
    6870:	81 e4       	ldi	r24, 0x41	; 65
    6872:	92 e3       	ldi	r25, 0x32	; 50
    6874:	81 de       	rcall	.-766    	; 0x6578 <set_timers>
    6876:	01 96       	adiw	r24, 0x01	; 1
    6878:	51 f4       	brne	.+20     	; 0x688e <init_timers+0x88>
        printf("Clock task init failed\n");
    687a:	8f e5       	ldi	r24, 0x5F	; 95
    687c:	95 e0       	ldi	r25, 0x05	; 5
    687e:	a0 e0       	ldi	r26, 0x00	; 0
    6880:	ed b7       	in	r30, 0x3d	; 61
    6882:	fe b7       	in	r31, 0x3e	; 62
    6884:	81 83       	std	Z+1, r24	; 0x01
    6886:	92 83       	std	Z+2, r25	; 0x02
    6888:	a3 83       	std	Z+3, r26	; 0x03
    688a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("Clock Installed\n");
    688e:	8e e4       	ldi	r24, 0x4E	; 78
    6890:	95 e0       	ldi	r25, 0x05	; 5
    6892:	a0 e0       	ldi	r26, 0x00	; 0
    6894:	ed b7       	in	r30, 0x3d	; 61
    6896:	fe b7       	in	r31, 0x3e	; 62
    6898:	81 83       	std	Z+1, r24	; 0x01
    689a:	92 83       	std	Z+2, r25	; 0x02
    689c:	a3 83       	std	Z+3, r26	; 0x03
    689e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    enable_timers();
    68a2:	89 df       	rcall	.-238    	; 0x67b6 <enable_timers>

    printf("Timers enabled\n");
    68a4:	8e e3       	ldi	r24, 0x3E	; 62
    68a6:	95 e0       	ldi	r25, 0x05	; 5
    68a8:	a0 e0       	ldi	r26, 0x00	; 0
    68aa:	ed b7       	in	r30, 0x3d	; 61
    68ac:	fe b7       	in	r31, 0x3e	; 62
    68ae:	81 83       	std	Z+1, r24	; 0x01
    68b0:	92 83       	std	Z+2, r25	; 0x02
    68b2:	a3 83       	std	Z+3, r26	; 0x03
    68b4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
}
    68b8:	0f 90       	pop	r0
    68ba:	0f 90       	pop	r0
    68bc:	0f 90       	pop	r0
    68be:	08 95       	ret

000068c0 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    68c0:	89 2b       	or	r24, r25
    68c2:	81 f4       	brne	.+32     	; 0x68e4 <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    68c4:	fb 01       	movw	r30, r22
    68c6:	10 82       	st	Z, r1
    68c8:	11 82       	std	Z+1, r1	; 0x01
    68ca:	12 82       	std	Z+2, r1	; 0x02
    68cc:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    68ce:	80 e4       	ldi	r24, 0x40	; 64
    68d0:	92 e4       	ldi	r25, 0x42	; 66
    68d2:	af e0       	ldi	r26, 0x0F	; 15
    68d4:	b0 e0       	ldi	r27, 0x00	; 0
    68d6:	84 83       	std	Z+4, r24	; 0x04
    68d8:	95 83       	std	Z+5, r25	; 0x05
    68da:	a6 83       	std	Z+6, r26	; 0x06
    68dc:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    68de:	80 e0       	ldi	r24, 0x00	; 0
    68e0:	90 e0       	ldi	r25, 0x00	; 0
    68e2:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    68e4:	8f ef       	ldi	r24, 0xFF	; 255
    68e6:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    68e8:	08 95       	ret

000068ea <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    68ea:	89 2b       	or	r24, r25
    68ec:	19 f4       	brne	.+6      	; 0x68f4 <clock_settime+0xa>
    68ee:	cb 01       	movw	r24, r22
    68f0:	05 ce       	rjmp	.-1014   	; 0x64fc <clock_settime.part.2>
    68f2:	08 95       	ret
        return(-1);
    68f4:	8f ef       	ldi	r24, 0xFF	; 255
    68f6:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    68f8:	08 95       	ret

000068fa <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    68fa:	9c 01       	movw	r18, r24
    68fc:	83 70       	andi	r24, 0x03	; 3
    68fe:	99 27       	eor	r25, r25
    6900:	00 97       	sbiw	r24, 0x00	; 0
    6902:	69 f4       	brne	.+26     	; 0x691e <IS_Leap+0x24>
    6904:	2c 36       	cpi	r18, 0x6C	; 108
    6906:	47 e0       	ldi	r20, 0x07	; 7
    6908:	34 07       	cpc	r19, r20
    690a:	59 f0       	breq	.+22     	; 0x6922 <IS_Leap+0x28>
    690c:	51 e0       	ldi	r21, 0x01	; 1
    690e:	40 e0       	ldi	r20, 0x00	; 0
    6910:	24 33       	cpi	r18, 0x34	; 52
    6912:	38 40       	sbci	r19, 0x08	; 8
    6914:	09 f4       	brne	.+2      	; 0x6918 <IS_Leap+0x1e>
    6916:	50 e0       	ldi	r21, 0x00	; 0
    6918:	85 2f       	mov	r24, r21
    691a:	94 2f       	mov	r25, r20
    691c:	08 95       	ret
    691e:	80 e0       	ldi	r24, 0x00	; 0
    6920:	90 e0       	ldi	r25, 0x00	; 0
    6922:	08 95       	ret

00006924 <tm_mon_to_ascii>:
    6924:	8c 30       	cpi	r24, 0x0C	; 12
    6926:	91 05       	cpc	r25, r1
    6928:	40 f4       	brcc	.+16     	; 0x693a <tm_mon_to_ascii+0x16>
    692a:	88 0f       	add	r24, r24
    692c:	99 1f       	adc	r25, r25
    692e:	fc 01       	movw	r30, r24
    6930:	e5 5f       	subi	r30, 0xF5	; 245
    6932:	fe 4f       	sbci	r31, 0xFE	; 254
    6934:	80 81       	ld	r24, Z
    6936:	91 81       	ldd	r25, Z+1	; 0x01
    6938:	08 95       	ret
    693a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    693e:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    6942:	08 95       	ret

00006944 <Days_Per_Month>:
    6944:	cf 93       	push	r28
    6946:	df 93       	push	r29
    6948:	8c 30       	cpi	r24, 0x0C	; 12
    694a:	91 05       	cpc	r25, r1
    694c:	24 f0       	brlt	.+8      	; 0x6956 <Days_Per_Month+0x12>
    694e:	6f 5f       	subi	r22, 0xFF	; 255
    6950:	7f 4f       	sbci	r23, 0xFF	; 255
    6952:	0c 97       	sbiw	r24, 0x0c	; 12
    6954:	f9 cf       	rjmp	.-14     	; 0x6948 <Days_Per_Month+0x4>
    6956:	97 ff       	sbrs	r25, 7
    6958:	04 c0       	rjmp	.+8      	; 0x6962 <Days_Per_Month+0x1e>
    695a:	61 50       	subi	r22, 0x01	; 1
    695c:	71 09       	sbc	r23, r1
    695e:	0c 96       	adiw	r24, 0x0c	; 12
    6960:	fa cf       	rjmp	.-12     	; 0x6956 <Days_Per_Month+0x12>
    6962:	fc 01       	movw	r30, r24
    6964:	ee 0f       	add	r30, r30
    6966:	ff 1f       	adc	r31, r31
    6968:	e8 57       	subi	r30, 0x78	; 120
    696a:	fc 4f       	sbci	r31, 0xFC	; 252
    696c:	c0 81       	ld	r28, Z
    696e:	d1 81       	ldd	r29, Z+1	; 0x01
    6970:	01 97       	sbiw	r24, 0x01	; 1
    6972:	29 f4       	brne	.+10     	; 0x697e <Days_Per_Month+0x3a>
    6974:	cb 01       	movw	r24, r22
    6976:	c1 df       	rcall	.-126    	; 0x68fa <IS_Leap>
    6978:	89 2b       	or	r24, r25
    697a:	09 f0       	breq	.+2      	; 0x697e <Days_Per_Month+0x3a>
    697c:	21 96       	adiw	r28, 0x01	; 1
    697e:	ce 01       	movw	r24, r28
    6980:	df 91       	pop	r29
    6982:	cf 91       	pop	r28
    6984:	08 95       	ret

00006986 <time_to_tm>:
    6986:	a0 e0       	ldi	r26, 0x00	; 0
    6988:	b0 e0       	ldi	r27, 0x00	; 0
    698a:	e9 ec       	ldi	r30, 0xC9	; 201
    698c:	f4 e3       	ldi	r31, 0x34	; 52
    698e:	0c 94 5e e3 	jmp	0x1c6bc	; 0x1c6bc <__prologue_saves__+0x4>
    6992:	e8 01       	movw	r28, r16
    6994:	e6 e1       	ldi	r30, 0x16	; 22
    6996:	d8 01       	movw	r26, r16
    6998:	1d 92       	st	X+, r1
    699a:	ea 95       	dec	r30
    699c:	e9 f7       	brne	.-6      	; 0x6998 <time_to_tm+0x12>
    699e:	61 15       	cp	r22, r1
    69a0:	bd e5       	ldi	r27, 0x5D	; 93
    69a2:	7b 07       	cpc	r23, r27
    69a4:	bd ef       	ldi	r27, 0xFD	; 253
    69a6:	8b 07       	cpc	r24, r27
    69a8:	bf ef       	ldi	r27, 0xFF	; 255
    69aa:	9b 07       	cpc	r25, r27
    69ac:	08 f0       	brcs	.+2      	; 0x69b0 <time_to_tm+0x2a>
    69ae:	c0 c0       	rjmp	.+384    	; 0x6b30 <time_to_tm+0x1aa>
    69b0:	6b 01       	movw	r12, r22
    69b2:	7c 01       	movw	r14, r24
    69b4:	c2 1a       	sub	r12, r18
    69b6:	d3 0a       	sbc	r13, r19
    69b8:	e4 0a       	sbc	r14, r20
    69ba:	f5 0a       	sbc	r15, r21
    69bc:	46 01       	movw	r8, r12
    69be:	57 01       	movw	r10, r14
    69c0:	e0 e8       	ldi	r30, 0x80	; 128
    69c2:	ce 16       	cp	r12, r30
    69c4:	ee ea       	ldi	r30, 0xAE	; 174
    69c6:	de 06       	cpc	r13, r30
    69c8:	ee ef       	ldi	r30, 0xFE	; 254
    69ca:	ee 06       	cpc	r14, r30
    69cc:	ef ef       	ldi	r30, 0xFF	; 255
    69ce:	fe 06       	cpc	r15, r30
    69d0:	50 f0       	brcs	.+20     	; 0x69e6 <time_to_tm+0x60>
    69d2:	80 e8       	ldi	r24, 0x80	; 128
    69d4:	88 0e       	add	r8, r24
    69d6:	81 e5       	ldi	r24, 0x51	; 81
    69d8:	98 1e       	adc	r9, r24
    69da:	81 e0       	ldi	r24, 0x01	; 1
    69dc:	a8 1e       	adc	r10, r24
    69de:	b1 1c       	adc	r11, r1
    69e0:	01 e0       	ldi	r16, 0x01	; 1
    69e2:	10 e0       	ldi	r17, 0x00	; 0
    69e4:	02 c0       	rjmp	.+4      	; 0x69ea <time_to_tm+0x64>
    69e6:	00 e0       	ldi	r16, 0x00	; 0
    69e8:	10 e0       	ldi	r17, 0x00	; 0
    69ea:	8c e3       	ldi	r24, 0x3C	; 60
    69ec:	48 2e       	mov	r4, r24
    69ee:	51 2c       	mov	r5, r1
    69f0:	61 2c       	mov	r6, r1
    69f2:	71 2c       	mov	r7, r1
    69f4:	c5 01       	movw	r24, r10
    69f6:	b4 01       	movw	r22, r8
    69f8:	a3 01       	movw	r20, r6
    69fa:	92 01       	movw	r18, r4
    69fc:	0e 94 ef e2 	call	0x1c5de	; 0x1c5de <__udivmodsi4>
    6a00:	79 83       	std	Y+1, r23	; 0x01
    6a02:	68 83       	st	Y, r22
    6a04:	ca 01       	movw	r24, r20
    6a06:	b9 01       	movw	r22, r18
    6a08:	a3 01       	movw	r20, r6
    6a0a:	92 01       	movw	r18, r4
    6a0c:	0e 94 ef e2 	call	0x1c5de	; 0x1c5de <__udivmodsi4>
    6a10:	7b 83       	std	Y+3, r23	; 0x03
    6a12:	6a 83       	std	Y+2, r22	; 0x02
    6a14:	c5 01       	movw	r24, r10
    6a16:	b4 01       	movw	r22, r8
    6a18:	20 e1       	ldi	r18, 0x10	; 16
    6a1a:	3e e0       	ldi	r19, 0x0E	; 14
    6a1c:	40 e0       	ldi	r20, 0x00	; 0
    6a1e:	50 e0       	ldi	r21, 0x00	; 0
    6a20:	0e 94 ef e2 	call	0x1c5de	; 0x1c5de <__udivmodsi4>
    6a24:	ca 01       	movw	r24, r20
    6a26:	b9 01       	movw	r22, r18
    6a28:	28 e1       	ldi	r18, 0x18	; 24
    6a2a:	30 e0       	ldi	r19, 0x00	; 0
    6a2c:	40 e0       	ldi	r20, 0x00	; 0
    6a2e:	50 e0       	ldi	r21, 0x00	; 0
    6a30:	0e 94 ef e2 	call	0x1c5de	; 0x1c5de <__udivmodsi4>
    6a34:	7d 83       	std	Y+5, r23	; 0x05
    6a36:	6c 83       	std	Y+4, r22	; 0x04
    6a38:	01 15       	cp	r16, r1
    6a3a:	11 05       	cpc	r17, r1
    6a3c:	89 f0       	breq	.+34     	; 0x6a60 <time_to_tm+0xda>
    6a3e:	85 e4       	ldi	r24, 0x45	; 69
    6a40:	90 e0       	ldi	r25, 0x00	; 0
    6a42:	9b 87       	std	Y+11, r25	; 0x0b
    6a44:	8a 87       	std	Y+10, r24	; 0x0a
    6a46:	8b e0       	ldi	r24, 0x0B	; 11
    6a48:	90 e0       	ldi	r25, 0x00	; 0
    6a4a:	99 87       	std	Y+9, r25	; 0x09
    6a4c:	88 87       	std	Y+8, r24	; 0x08
    6a4e:	8f e1       	ldi	r24, 0x1F	; 31
    6a50:	90 e0       	ldi	r25, 0x00	; 0
    6a52:	9f 83       	std	Y+7, r25	; 0x07
    6a54:	8e 83       	std	Y+6, r24	; 0x06
    6a56:	83 e0       	ldi	r24, 0x03	; 3
    6a58:	90 e0       	ldi	r25, 0x00	; 0
    6a5a:	9d 87       	std	Y+13, r25	; 0x0d
    6a5c:	8c 87       	std	Y+12, r24	; 0x0c
    6a5e:	65 c0       	rjmp	.+202    	; 0x6b2a <time_to_tm+0x1a4>
    6a60:	c5 01       	movw	r24, r10
    6a62:	b4 01       	movw	r22, r8
    6a64:	20 e8       	ldi	r18, 0x80	; 128
    6a66:	31 e5       	ldi	r19, 0x51	; 81
    6a68:	41 e0       	ldi	r20, 0x01	; 1
    6a6a:	50 e0       	ldi	r21, 0x00	; 0
    6a6c:	0e 94 ef e2 	call	0x1c5de	; 0x1c5de <__udivmodsi4>
    6a70:	49 01       	movw	r8, r18
    6a72:	5a 01       	movw	r10, r20
    6a74:	ca 01       	movw	r24, r20
    6a76:	b9 01       	movw	r22, r18
    6a78:	6c 5f       	subi	r22, 0xFC	; 252
    6a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    6a7c:	8f 4f       	sbci	r24, 0xFF	; 255
    6a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    6a80:	27 e0       	ldi	r18, 0x07	; 7
    6a82:	30 e0       	ldi	r19, 0x00	; 0
    6a84:	40 e0       	ldi	r20, 0x00	; 0
    6a86:	50 e0       	ldi	r21, 0x00	; 0
    6a88:	0e 94 11 e3 	call	0x1c622	; 0x1c622 <__divmodsi4>
    6a8c:	7d 87       	std	Y+13, r23	; 0x0d
    6a8e:	6c 87       	std	Y+12, r22	; 0x0c
    6a90:	02 eb       	ldi	r16, 0xB2	; 178
    6a92:	17 e0       	ldi	r17, 0x07	; 7
    6a94:	c8 01       	movw	r24, r16
    6a96:	31 df       	rcall	.-414    	; 0x68fa <IS_Leap>
    6a98:	00 97       	sbiw	r24, 0x00	; 0
    6a9a:	19 f4       	brne	.+6      	; 0x6aa2 <time_to_tm+0x11c>
    6a9c:	4d e6       	ldi	r20, 0x6D	; 109
    6a9e:	51 e0       	ldi	r21, 0x01	; 1
    6aa0:	02 c0       	rjmp	.+4      	; 0x6aa6 <time_to_tm+0x120>
    6aa2:	4e e6       	ldi	r20, 0x6E	; 110
    6aa4:	51 e0       	ldi	r21, 0x01	; 1
    6aa6:	05 2e       	mov	r0, r21
    6aa8:	00 0c       	add	r0, r0
    6aaa:	66 0b       	sbc	r22, r22
    6aac:	77 0b       	sbc	r23, r23
    6aae:	84 16       	cp	r8, r20
    6ab0:	95 06       	cpc	r9, r21
    6ab2:	a6 06       	cpc	r10, r22
    6ab4:	b7 06       	cpc	r11, r23
    6ab6:	3c f0       	brlt	.+14     	; 0x6ac6 <time_to_tm+0x140>
    6ab8:	0f 5f       	subi	r16, 0xFF	; 255
    6aba:	1f 4f       	sbci	r17, 0xFF	; 255
    6abc:	84 1a       	sub	r8, r20
    6abe:	95 0a       	sbc	r9, r21
    6ac0:	a6 0a       	sbc	r10, r22
    6ac2:	b7 0a       	sbc	r11, r23
    6ac4:	e7 cf       	rjmp	.-50     	; 0x6a94 <time_to_tm+0x10e>
    6ac6:	0c 56       	subi	r16, 0x6C	; 108
    6ac8:	17 40       	sbci	r17, 0x07	; 7
    6aca:	1b 87       	std	Y+11, r17	; 0x0b
    6acc:	0a 87       	std	Y+10, r16	; 0x0a
    6ace:	9f 86       	std	Y+15, r9	; 0x0f
    6ad0:	8e 86       	std	Y+14, r8	; 0x0e
    6ad2:	e8 e8       	ldi	r30, 0x88	; 136
    6ad4:	f3 e0       	ldi	r31, 0x03	; 3
    6ad6:	20 e0       	ldi	r18, 0x00	; 0
    6ad8:	30 e0       	ldi	r19, 0x00	; 0
    6ada:	18 14       	cp	r1, r8
    6adc:	19 04       	cpc	r1, r9
    6ade:	1a 04       	cpc	r1, r10
    6ae0:	1b 04       	cpc	r1, r11
    6ae2:	e4 f4       	brge	.+56     	; 0x6b1c <time_to_tm+0x196>
    6ae4:	2c 30       	cpi	r18, 0x0C	; 12
    6ae6:	31 05       	cpc	r19, r1
    6ae8:	c9 f0       	breq	.+50     	; 0x6b1c <time_to_tm+0x196>
    6aea:	41 91       	ld	r20, Z+
    6aec:	51 91       	ld	r21, Z+
    6aee:	21 30       	cpi	r18, 0x01	; 1
    6af0:	31 05       	cpc	r19, r1
    6af2:	21 f4       	brne	.+8      	; 0x6afc <time_to_tm+0x176>
    6af4:	00 97       	sbiw	r24, 0x00	; 0
    6af6:	11 f0       	breq	.+4      	; 0x6afc <time_to_tm+0x176>
    6af8:	4f 5f       	subi	r20, 0xFF	; 255
    6afa:	5f 4f       	sbci	r21, 0xFF	; 255
    6afc:	05 2e       	mov	r0, r21
    6afe:	00 0c       	add	r0, r0
    6b00:	66 0b       	sbc	r22, r22
    6b02:	77 0b       	sbc	r23, r23
    6b04:	84 16       	cp	r8, r20
    6b06:	95 06       	cpc	r9, r21
    6b08:	a6 06       	cpc	r10, r22
    6b0a:	b7 06       	cpc	r11, r23
    6b0c:	3c f0       	brlt	.+14     	; 0x6b1c <time_to_tm+0x196>
    6b0e:	84 1a       	sub	r8, r20
    6b10:	95 0a       	sbc	r9, r21
    6b12:	a6 0a       	sbc	r10, r22
    6b14:	b7 0a       	sbc	r11, r23
    6b16:	2f 5f       	subi	r18, 0xFF	; 255
    6b18:	3f 4f       	sbci	r19, 0xFF	; 255
    6b1a:	df cf       	rjmp	.-66     	; 0x6ada <time_to_tm+0x154>
    6b1c:	39 87       	std	Y+9, r19	; 0x09
    6b1e:	28 87       	std	Y+8, r18	; 0x08
    6b20:	af ef       	ldi	r26, 0xFF	; 255
    6b22:	8a 1a       	sub	r8, r26
    6b24:	9a 0a       	sbc	r9, r26
    6b26:	9f 82       	std	Y+7, r9	; 0x07
    6b28:	8e 82       	std	Y+6, r8	; 0x06
    6b2a:	b6 01       	movw	r22, r12
    6b2c:	c7 01       	movw	r24, r14
    6b2e:	04 c0       	rjmp	.+8      	; 0x6b38 <time_to_tm+0x1b2>
    6b30:	6f ef       	ldi	r22, 0xFF	; 255
    6b32:	7f ef       	ldi	r23, 0xFF	; 255
    6b34:	8f ef       	ldi	r24, 0xFF	; 255
    6b36:	9f ef       	ldi	r25, 0xFF	; 255
    6b38:	cd b7       	in	r28, 0x3d	; 61
    6b3a:	de b7       	in	r29, 0x3e	; 62
    6b3c:	e0 e1       	ldi	r30, 0x10	; 16
    6b3e:	0c 94 7a e3 	jmp	0x1c6f4	; 0x1c6f4 <__epilogue_restores__+0x4>

00006b42 <gmtime_r>:
    6b42:	0f 93       	push	r16
    6b44:	1f 93       	push	r17
    6b46:	cf 93       	push	r28
    6b48:	df 93       	push	r29
    6b4a:	eb 01       	movw	r28, r22
    6b4c:	fc 01       	movw	r30, r24
    6b4e:	60 81       	ld	r22, Z
    6b50:	71 81       	ldd	r23, Z+1	; 0x01
    6b52:	82 81       	ldd	r24, Z+2	; 0x02
    6b54:	93 81       	ldd	r25, Z+3	; 0x03
    6b56:	8e 01       	movw	r16, r28
    6b58:	20 e0       	ldi	r18, 0x00	; 0
    6b5a:	30 e0       	ldi	r19, 0x00	; 0
    6b5c:	a9 01       	movw	r20, r18
    6b5e:	13 df       	rcall	.-474    	; 0x6986 <time_to_tm>
    6b60:	ce 01       	movw	r24, r28
    6b62:	df 91       	pop	r29
    6b64:	cf 91       	pop	r28
    6b66:	1f 91       	pop	r17
    6b68:	0f 91       	pop	r16
    6b6a:	08 95       	ret

00006b6c <gmtime>:
    6b6c:	2a ec       	ldi	r18, 0xCA	; 202
    6b6e:	37 e1       	ldi	r19, 0x17	; 23
    6b70:	30 93 e1 17 	sts	0x17E1, r19	; 0x8017e1 <p.3677+0x1>
    6b74:	20 93 e0 17 	sts	0x17E0, r18	; 0x8017e0 <p.3677>
    6b78:	b9 01       	movw	r22, r18
    6b7a:	e3 df       	rcall	.-58     	; 0x6b42 <gmtime_r>
    6b7c:	8a ec       	ldi	r24, 0xCA	; 202
    6b7e:	97 e1       	ldi	r25, 0x17	; 23
    6b80:	08 95       	ret

00006b82 <gettimezone>:
    6b82:	e3 e7       	ldi	r30, 0x73	; 115
    6b84:	fa e1       	ldi	r31, 0x1A	; 26
    6b86:	20 81       	ld	r18, Z
    6b88:	31 81       	ldd	r19, Z+1	; 0x01
    6b8a:	dc 01       	movw	r26, r24
    6b8c:	2d 93       	st	X+, r18
    6b8e:	3c 93       	st	X, r19
    6b90:	22 81       	ldd	r18, Z+2	; 0x02
    6b92:	33 81       	ldd	r19, Z+3	; 0x03
    6b94:	fc 01       	movw	r30, r24
    6b96:	33 83       	std	Z+3, r19	; 0x03
    6b98:	22 83       	std	Z+2, r18	; 0x02
    6b9a:	80 e0       	ldi	r24, 0x00	; 0
    6b9c:	90 e0       	ldi	r25, 0x00	; 0
    6b9e:	08 95       	ret

00006ba0 <settimezone>:
    6ba0:	cf 93       	push	r28
    6ba2:	df 93       	push	r29
    6ba4:	ec 01       	movw	r28, r24
    6ba6:	28 81       	ld	r18, Y
    6ba8:	39 81       	ldd	r19, Y+1	; 0x01
    6baa:	e3 e7       	ldi	r30, 0x73	; 115
    6bac:	fa e1       	ldi	r31, 0x1A	; 26
    6bae:	31 83       	std	Z+1, r19	; 0x01
    6bb0:	20 83       	st	Z, r18
    6bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    6bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    6bb6:	93 83       	std	Z+3, r25	; 0x03
    6bb8:	82 83       	std	Z+2, r24	; 0x02
    6bba:	80 e0       	ldi	r24, 0x00	; 0
    6bbc:	90 e0       	ldi	r25, 0x00	; 0
    6bbe:	df 91       	pop	r29
    6bc0:	cf 91       	pop	r28
    6bc2:	08 95       	ret

00006bc4 <gettimeofday>:
    6bc4:	a8 e0       	ldi	r26, 0x08	; 8
    6bc6:	b0 e0       	ldi	r27, 0x00	; 0
    6bc8:	e8 ee       	ldi	r30, 0xE8	; 232
    6bca:	f5 e3       	ldi	r31, 0x35	; 53
    6bcc:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__prologue_saves__+0x18>
    6bd0:	8c 01       	movw	r16, r24
    6bd2:	7b 01       	movw	r14, r22
    6bd4:	be 01       	movw	r22, r28
    6bd6:	6f 5f       	subi	r22, 0xFF	; 255
    6bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    6bda:	80 e0       	ldi	r24, 0x00	; 0
    6bdc:	90 e0       	ldi	r25, 0x00	; 0
    6bde:	dc db       	rcall	.-2120   	; 0x6398 <clock_gettime>
    6be0:	89 81       	ldd	r24, Y+1	; 0x01
    6be2:	9a 81       	ldd	r25, Y+2	; 0x02
    6be4:	ab 81       	ldd	r26, Y+3	; 0x03
    6be6:	bc 81       	ldd	r27, Y+4	; 0x04
    6be8:	f8 01       	movw	r30, r16
    6bea:	80 83       	st	Z, r24
    6bec:	91 83       	std	Z+1, r25	; 0x01
    6bee:	a2 83       	std	Z+2, r26	; 0x02
    6bf0:	b3 83       	std	Z+3, r27	; 0x03
    6bf2:	6d 81       	ldd	r22, Y+5	; 0x05
    6bf4:	7e 81       	ldd	r23, Y+6	; 0x06
    6bf6:	8f 81       	ldd	r24, Y+7	; 0x07
    6bf8:	98 85       	ldd	r25, Y+8	; 0x08
    6bfa:	28 ee       	ldi	r18, 0xE8	; 232
    6bfc:	33 e0       	ldi	r19, 0x03	; 3
    6bfe:	40 e0       	ldi	r20, 0x00	; 0
    6c00:	50 e0       	ldi	r21, 0x00	; 0
    6c02:	0e 94 11 e3 	call	0x1c622	; 0x1c622 <__divmodsi4>
    6c06:	f8 01       	movw	r30, r16
    6c08:	24 83       	std	Z+4, r18	; 0x04
    6c0a:	35 83       	std	Z+5, r19	; 0x05
    6c0c:	46 83       	std	Z+6, r20	; 0x06
    6c0e:	57 83       	std	Z+7, r21	; 0x07
    6c10:	c7 01       	movw	r24, r14
    6c12:	b7 df       	rcall	.-146    	; 0x6b82 <gettimezone>
    6c14:	80 e0       	ldi	r24, 0x00	; 0
    6c16:	90 e0       	ldi	r25, 0x00	; 0
    6c18:	28 96       	adiw	r28, 0x08	; 8
    6c1a:	e6 e0       	ldi	r30, 0x06	; 6
    6c1c:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

00006c20 <time>:
    6c20:	cf 93       	push	r28
    6c22:	df 93       	push	r29
    6c24:	ec 01       	movw	r28, r24
    6c26:	6c ea       	ldi	r22, 0xAC	; 172
    6c28:	77 e1       	ldi	r23, 0x17	; 23
    6c2a:	80 e0       	ldi	r24, 0x00	; 0
    6c2c:	90 e0       	ldi	r25, 0x00	; 0
    6c2e:	b4 db       	rcall	.-2200   	; 0x6398 <clock_gettime>
    6c30:	20 97       	sbiw	r28, 0x00	; 0
    6c32:	61 f0       	breq	.+24     	; 0x6c4c <time+0x2c>
    6c34:	80 91 ac 17 	lds	r24, 0x17AC	; 0x8017ac <ts.3755>
    6c38:	90 91 ad 17 	lds	r25, 0x17AD	; 0x8017ad <ts.3755+0x1>
    6c3c:	a0 91 ae 17 	lds	r26, 0x17AE	; 0x8017ae <ts.3755+0x2>
    6c40:	b0 91 af 17 	lds	r27, 0x17AF	; 0x8017af <ts.3755+0x3>
    6c44:	88 83       	st	Y, r24
    6c46:	99 83       	std	Y+1, r25	; 0x01
    6c48:	aa 83       	std	Y+2, r26	; 0x02
    6c4a:	bb 83       	std	Y+3, r27	; 0x03
    6c4c:	60 91 ac 17 	lds	r22, 0x17AC	; 0x8017ac <ts.3755>
    6c50:	70 91 ad 17 	lds	r23, 0x17AD	; 0x8017ad <ts.3755+0x1>
    6c54:	80 91 ae 17 	lds	r24, 0x17AE	; 0x8017ae <ts.3755+0x2>
    6c58:	90 91 af 17 	lds	r25, 0x17AF	; 0x8017af <ts.3755+0x3>
    6c5c:	df 91       	pop	r29
    6c5e:	cf 91       	pop	r28
    6c60:	08 95       	ret

00006c62 <is_dst>:
    6c62:	cf 92       	push	r12
    6c64:	df 92       	push	r13
    6c66:	ef 92       	push	r14
    6c68:	ff 92       	push	r15
    6c6a:	6b 01       	movw	r12, r22
    6c6c:	7c 01       	movw	r14, r24
    6c6e:	05 d4       	rcall	.+2058   	; 0x747a <set_dst>
    6c70:	80 91 77 1a 	lds	r24, 0x1A77	; 0x801a77 <dst>
    6c74:	90 91 78 1a 	lds	r25, 0x1A78	; 0x801a78 <dst+0x1>
    6c78:	a0 91 79 1a 	lds	r26, 0x1A79	; 0x801a79 <dst+0x2>
    6c7c:	b0 91 7a 1a 	lds	r27, 0x1A7A	; 0x801a7a <dst+0x3>
    6c80:	c8 16       	cp	r12, r24
    6c82:	d9 06       	cpc	r13, r25
    6c84:	ea 06       	cpc	r14, r26
    6c86:	fb 06       	cpc	r15, r27
    6c88:	88 f0       	brcs	.+34     	; 0x6cac <is_dst+0x4a>
    6c8a:	81 e0       	ldi	r24, 0x01	; 1
    6c8c:	90 e0       	ldi	r25, 0x00	; 0
    6c8e:	40 91 7b 1a 	lds	r20, 0x1A7B	; 0x801a7b <dst+0x4>
    6c92:	50 91 7c 1a 	lds	r21, 0x1A7C	; 0x801a7c <dst+0x5>
    6c96:	60 91 7d 1a 	lds	r22, 0x1A7D	; 0x801a7d <dst+0x6>
    6c9a:	70 91 7e 1a 	lds	r23, 0x1A7E	; 0x801a7e <dst+0x7>
    6c9e:	4c 15       	cp	r20, r12
    6ca0:	5d 05       	cpc	r21, r13
    6ca2:	6e 05       	cpc	r22, r14
    6ca4:	7f 05       	cpc	r23, r15
    6ca6:	20 f4       	brcc	.+8      	; 0x6cb0 <is_dst+0x4e>
    6ca8:	80 e0       	ldi	r24, 0x00	; 0
    6caa:	02 c0       	rjmp	.+4      	; 0x6cb0 <is_dst+0x4e>
    6cac:	80 e0       	ldi	r24, 0x00	; 0
    6cae:	90 e0       	ldi	r25, 0x00	; 0
    6cb0:	ff 90       	pop	r15
    6cb2:	ef 90       	pop	r14
    6cb4:	df 90       	pop	r13
    6cb6:	cf 90       	pop	r12
    6cb8:	08 95       	ret

00006cba <localtime_r>:
    6cba:	4f 92       	push	r4
    6cbc:	5f 92       	push	r5
    6cbe:	6f 92       	push	r6
    6cc0:	7f 92       	push	r7
    6cc2:	af 92       	push	r10
    6cc4:	bf 92       	push	r11
    6cc6:	cf 92       	push	r12
    6cc8:	df 92       	push	r13
    6cca:	ef 92       	push	r14
    6ccc:	ff 92       	push	r15
    6cce:	0f 93       	push	r16
    6cd0:	1f 93       	push	r17
    6cd2:	cf 93       	push	r28
    6cd4:	df 93       	push	r29
    6cd6:	00 d0       	rcall	.+0      	; 0x6cd8 <localtime_r+0x1e>
    6cd8:	00 d0       	rcall	.+0      	; 0x6cda <localtime_r+0x20>
    6cda:	cd b7       	in	r28, 0x3d	; 61
    6cdc:	de b7       	in	r29, 0x3e	; 62
    6cde:	5b 01       	movw	r10, r22
    6ce0:	fc 01       	movw	r30, r24
    6ce2:	40 80       	ld	r4, Z
    6ce4:	51 80       	ldd	r5, Z+1	; 0x01
    6ce6:	62 80       	ldd	r6, Z+2	; 0x02
    6ce8:	73 80       	ldd	r7, Z+3	; 0x03
    6cea:	ce 01       	movw	r24, r28
    6cec:	01 96       	adiw	r24, 0x01	; 1
    6cee:	49 df       	rcall	.-366    	; 0x6b82 <gettimezone>
    6cf0:	a9 81       	ldd	r26, Y+1	; 0x01
    6cf2:	ba 81       	ldd	r27, Y+2	; 0x02
    6cf4:	2c e3       	ldi	r18, 0x3C	; 60
    6cf6:	30 e0       	ldi	r19, 0x00	; 0
    6cf8:	0e 94 36 e3 	call	0x1c66c	; 0x1c66c <__usmulhisi3>
    6cfc:	6b 01       	movw	r12, r22
    6cfe:	7c 01       	movw	r14, r24
    6d00:	c3 01       	movw	r24, r6
    6d02:	b2 01       	movw	r22, r4
    6d04:	6c 19       	sub	r22, r12
    6d06:	7d 09       	sbc	r23, r13
    6d08:	8e 09       	sbc	r24, r14
    6d0a:	9f 09       	sbc	r25, r15
    6d0c:	aa df       	rcall	.-172    	; 0x6c62 <is_dst>
    6d0e:	89 2b       	or	r24, r25
    6d10:	31 f0       	breq	.+12     	; 0x6d1e <localtime_r+0x64>
    6d12:	f0 e1       	ldi	r31, 0x10	; 16
    6d14:	cf 1a       	sub	r12, r31
    6d16:	fe e0       	ldi	r31, 0x0E	; 14
    6d18:	df 0a       	sbc	r13, r31
    6d1a:	e1 08       	sbc	r14, r1
    6d1c:	f1 08       	sbc	r15, r1
    6d1e:	85 01       	movw	r16, r10
    6d20:	a7 01       	movw	r20, r14
    6d22:	96 01       	movw	r18, r12
    6d24:	c3 01       	movw	r24, r6
    6d26:	b2 01       	movw	r22, r4
    6d28:	2e de       	rcall	.-932    	; 0x6986 <time_to_tm>
    6d2a:	c5 01       	movw	r24, r10
    6d2c:	0f 90       	pop	r0
    6d2e:	0f 90       	pop	r0
    6d30:	0f 90       	pop	r0
    6d32:	0f 90       	pop	r0
    6d34:	df 91       	pop	r29
    6d36:	cf 91       	pop	r28
    6d38:	1f 91       	pop	r17
    6d3a:	0f 91       	pop	r16
    6d3c:	ff 90       	pop	r15
    6d3e:	ef 90       	pop	r14
    6d40:	df 90       	pop	r13
    6d42:	cf 90       	pop	r12
    6d44:	bf 90       	pop	r11
    6d46:	af 90       	pop	r10
    6d48:	7f 90       	pop	r7
    6d4a:	6f 90       	pop	r6
    6d4c:	5f 90       	pop	r5
    6d4e:	4f 90       	pop	r4
    6d50:	08 95       	ret

00006d52 <localtime>:
    6d52:	64 eb       	ldi	r22, 0xB4	; 180
    6d54:	77 e1       	ldi	r23, 0x17	; 23
    6d56:	b1 cf       	rjmp	.-158    	; 0x6cba <localtime_r>
    6d58:	08 95       	ret

00006d5a <normalize>:
    6d5a:	aa e0       	ldi	r26, 0x0A	; 10
    6d5c:	b0 e0       	ldi	r27, 0x00	; 0
    6d5e:	e3 eb       	ldi	r30, 0xB3	; 179
    6d60:	f6 e3       	ldi	r31, 0x36	; 54
    6d62:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
    6d66:	7c 01       	movw	r14, r24
    6d68:	7a 87       	std	Y+10, r23	; 0x0a
    6d6a:	69 87       	std	Y+9, r22	; 0x09
    6d6c:	f7 01       	movw	r30, r14
    6d6e:	80 81       	ld	r24, Z
    6d70:	91 81       	ldd	r25, Z+1	; 0x01
    6d72:	8c 33       	cpi	r24, 0x3C	; 60
    6d74:	91 05       	cpc	r25, r1
    6d76:	5c f0       	brlt	.+22     	; 0x6d8e <normalize+0x34>
    6d78:	f7 01       	movw	r30, r14
    6d7a:	22 81       	ldd	r18, Z+2	; 0x02
    6d7c:	33 81       	ldd	r19, Z+3	; 0x03
    6d7e:	2f 5f       	subi	r18, 0xFF	; 255
    6d80:	3f 4f       	sbci	r19, 0xFF	; 255
    6d82:	33 83       	std	Z+3, r19	; 0x03
    6d84:	22 83       	std	Z+2, r18	; 0x02
    6d86:	cc 97       	sbiw	r24, 0x3c	; 60
    6d88:	91 83       	std	Z+1, r25	; 0x01
    6d8a:	80 83       	st	Z, r24
    6d8c:	ef cf       	rjmp	.-34     	; 0x6d6c <normalize+0x12>
    6d8e:	f7 01       	movw	r30, r14
    6d90:	01 90       	ld	r0, Z+
    6d92:	f0 81       	ld	r31, Z
    6d94:	e0 2d       	mov	r30, r0
    6d96:	fe 83       	std	Y+6, r31	; 0x06
    6d98:	ed 83       	std	Y+5, r30	; 0x05
    6d9a:	f7 ff       	sbrs	r31, 7
    6d9c:	0d c0       	rjmp	.+26     	; 0x6db8 <normalize+0x5e>
    6d9e:	f7 01       	movw	r30, r14
    6da0:	82 81       	ldd	r24, Z+2	; 0x02
    6da2:	93 81       	ldd	r25, Z+3	; 0x03
    6da4:	01 97       	sbiw	r24, 0x01	; 1
    6da6:	93 83       	std	Z+3, r25	; 0x03
    6da8:	82 83       	std	Z+2, r24	; 0x02
    6daa:	6d 81       	ldd	r22, Y+5	; 0x05
    6dac:	7e 81       	ldd	r23, Y+6	; 0x06
    6dae:	64 5c       	subi	r22, 0xC4	; 196
    6db0:	7f 4f       	sbci	r23, 0xFF	; 255
    6db2:	71 83       	std	Z+1, r23	; 0x01
    6db4:	60 83       	st	Z, r22
    6db6:	eb cf       	rjmp	.-42     	; 0x6d8e <normalize+0x34>
    6db8:	f7 01       	movw	r30, r14
    6dba:	82 81       	ldd	r24, Z+2	; 0x02
    6dbc:	93 81       	ldd	r25, Z+3	; 0x03
    6dbe:	8c 33       	cpi	r24, 0x3C	; 60
    6dc0:	91 05       	cpc	r25, r1
    6dc2:	5c f0       	brlt	.+22     	; 0x6dda <normalize+0x80>
    6dc4:	f7 01       	movw	r30, r14
    6dc6:	24 81       	ldd	r18, Z+4	; 0x04
    6dc8:	35 81       	ldd	r19, Z+5	; 0x05
    6dca:	2f 5f       	subi	r18, 0xFF	; 255
    6dcc:	3f 4f       	sbci	r19, 0xFF	; 255
    6dce:	35 83       	std	Z+5, r19	; 0x05
    6dd0:	24 83       	std	Z+4, r18	; 0x04
    6dd2:	cc 97       	sbiw	r24, 0x3c	; 60
    6dd4:	93 83       	std	Z+3, r25	; 0x03
    6dd6:	82 83       	std	Z+2, r24	; 0x02
    6dd8:	ef cf       	rjmp	.-34     	; 0x6db8 <normalize+0x5e>
    6dda:	f7 01       	movw	r30, r14
    6ddc:	22 80       	ldd	r2, Z+2	; 0x02
    6dde:	33 80       	ldd	r3, Z+3	; 0x03
    6de0:	37 fe       	sbrs	r3, 7
    6de2:	0d c0       	rjmp	.+26     	; 0x6dfe <normalize+0xa4>
    6de4:	f7 01       	movw	r30, r14
    6de6:	84 81       	ldd	r24, Z+4	; 0x04
    6de8:	95 81       	ldd	r25, Z+5	; 0x05
    6dea:	01 97       	sbiw	r24, 0x01	; 1
    6dec:	95 83       	std	Z+5, r25	; 0x05
    6dee:	84 83       	std	Z+4, r24	; 0x04
    6df0:	fc e3       	ldi	r31, 0x3C	; 60
    6df2:	2f 0e       	add	r2, r31
    6df4:	31 1c       	adc	r3, r1
    6df6:	f7 01       	movw	r30, r14
    6df8:	33 82       	std	Z+3, r3	; 0x03
    6dfa:	22 82       	std	Z+2, r2	; 0x02
    6dfc:	ee cf       	rjmp	.-36     	; 0x6dda <normalize+0x80>
    6dfe:	f7 01       	movw	r30, r14
    6e00:	84 81       	ldd	r24, Z+4	; 0x04
    6e02:	95 81       	ldd	r25, Z+5	; 0x05
    6e04:	88 31       	cpi	r24, 0x18	; 24
    6e06:	91 05       	cpc	r25, r1
    6e08:	5c f0       	brlt	.+22     	; 0x6e20 <normalize+0xc6>
    6e0a:	f7 01       	movw	r30, r14
    6e0c:	26 81       	ldd	r18, Z+6	; 0x06
    6e0e:	37 81       	ldd	r19, Z+7	; 0x07
    6e10:	2f 5f       	subi	r18, 0xFF	; 255
    6e12:	3f 4f       	sbci	r19, 0xFF	; 255
    6e14:	37 83       	std	Z+7, r19	; 0x07
    6e16:	26 83       	std	Z+6, r18	; 0x06
    6e18:	48 97       	sbiw	r24, 0x18	; 24
    6e1a:	95 83       	std	Z+5, r25	; 0x05
    6e1c:	84 83       	std	Z+4, r24	; 0x04
    6e1e:	ef cf       	rjmp	.-34     	; 0x6dfe <normalize+0xa4>
    6e20:	f7 01       	movw	r30, r14
    6e22:	04 81       	ldd	r16, Z+4	; 0x04
    6e24:	15 81       	ldd	r17, Z+5	; 0x05
    6e26:	17 ff       	sbrs	r17, 7
    6e28:	0b c0       	rjmp	.+22     	; 0x6e40 <normalize+0xe6>
    6e2a:	f7 01       	movw	r30, r14
    6e2c:	86 81       	ldd	r24, Z+6	; 0x06
    6e2e:	97 81       	ldd	r25, Z+7	; 0x07
    6e30:	01 97       	sbiw	r24, 0x01	; 1
    6e32:	97 83       	std	Z+7, r25	; 0x07
    6e34:	86 83       	std	Z+6, r24	; 0x06
    6e36:	08 5e       	subi	r16, 0xE8	; 232
    6e38:	1f 4f       	sbci	r17, 0xFF	; 255
    6e3a:	15 83       	std	Z+5, r17	; 0x05
    6e3c:	04 83       	std	Z+4, r16	; 0x04
    6e3e:	f0 cf       	rjmp	.-32     	; 0x6e20 <normalize+0xc6>
    6e40:	f7 01       	movw	r30, r14
    6e42:	80 85       	ldd	r24, Z+8	; 0x08
    6e44:	91 85       	ldd	r25, Z+9	; 0x09
    6e46:	8c 30       	cpi	r24, 0x0C	; 12
    6e48:	91 05       	cpc	r25, r1
    6e4a:	5c f0       	brlt	.+22     	; 0x6e62 <normalize+0x108>
    6e4c:	f7 01       	movw	r30, r14
    6e4e:	22 85       	ldd	r18, Z+10	; 0x0a
    6e50:	33 85       	ldd	r19, Z+11	; 0x0b
    6e52:	2f 5f       	subi	r18, 0xFF	; 255
    6e54:	3f 4f       	sbci	r19, 0xFF	; 255
    6e56:	33 87       	std	Z+11, r19	; 0x0b
    6e58:	22 87       	std	Z+10, r18	; 0x0a
    6e5a:	0c 97       	sbiw	r24, 0x0c	; 12
    6e5c:	91 87       	std	Z+9, r25	; 0x09
    6e5e:	80 87       	std	Z+8, r24	; 0x08
    6e60:	ef cf       	rjmp	.-34     	; 0x6e40 <normalize+0xe6>
    6e62:	f7 01       	movw	r30, r14
    6e64:	80 85       	ldd	r24, Z+8	; 0x08
    6e66:	91 85       	ldd	r25, Z+9	; 0x09
    6e68:	97 ff       	sbrs	r25, 7
    6e6a:	2d c0       	rjmp	.+90     	; 0x6ec6 <normalize+0x16c>
    6e6c:	f7 01       	movw	r30, r14
    6e6e:	22 85       	ldd	r18, Z+10	; 0x0a
    6e70:	33 85       	ldd	r19, Z+11	; 0x0b
    6e72:	21 50       	subi	r18, 0x01	; 1
    6e74:	31 09       	sbc	r19, r1
    6e76:	33 87       	std	Z+11, r19	; 0x0b
    6e78:	22 87       	std	Z+10, r18	; 0x0a
    6e7a:	0c 96       	adiw	r24, 0x0c	; 12
    6e7c:	91 87       	std	Z+9, r25	; 0x09
    6e7e:	80 87       	std	Z+8, r24	; 0x08
    6e80:	f0 cf       	rjmp	.-32     	; 0x6e62 <normalize+0x108>
    6e82:	f7 01       	movw	r30, r14
    6e84:	c6 80       	ldd	r12, Z+6	; 0x06
    6e86:	d7 80       	ldd	r13, Z+7	; 0x07
    6e88:	a0 84       	ldd	r10, Z+8	; 0x08
    6e8a:	b1 84       	ldd	r11, Z+9	; 0x09
    6e8c:	b4 01       	movw	r22, r8
    6e8e:	c5 01       	movw	r24, r10
    6e90:	59 dd       	rcall	.-1358   	; 0x6944 <Days_Per_Month>
    6e92:	8c 15       	cp	r24, r12
    6e94:	9d 05       	cpc	r25, r13
    6e96:	84 f5       	brge	.+96     	; 0x6ef8 <normalize+0x19e>
    6e98:	c8 1a       	sub	r12, r24
    6e9a:	d9 0a       	sbc	r13, r25
    6e9c:	f7 01       	movw	r30, r14
    6e9e:	d7 82       	std	Z+7, r13	; 0x07
    6ea0:	c6 82       	std	Z+6, r12	; 0x06
    6ea2:	c5 01       	movw	r24, r10
    6ea4:	01 96       	adiw	r24, 0x01	; 1
    6ea6:	91 87       	std	Z+9, r25	; 0x09
    6ea8:	80 87       	std	Z+8, r24	; 0x08
    6eaa:	0c 97       	sbiw	r24, 0x0c	; 12
    6eac:	54 f3       	brlt	.-44     	; 0x6e82 <normalize+0x128>
    6eae:	fb e0       	ldi	r31, 0x0B	; 11
    6eb0:	af 1a       	sub	r10, r31
    6eb2:	b1 08       	sbc	r11, r1
    6eb4:	f7 01       	movw	r30, r14
    6eb6:	b1 86       	std	Z+9, r11	; 0x09
    6eb8:	a0 86       	std	Z+8, r10	; 0x08
    6eba:	ff ef       	ldi	r31, 0xFF	; 255
    6ebc:	8f 1a       	sub	r8, r31
    6ebe:	9f 0a       	sbc	r9, r31
    6ec0:	f7 01       	movw	r30, r14
    6ec2:	93 86       	std	Z+11, r9	; 0x0b
    6ec4:	82 86       	std	Z+10, r8	; 0x0a
    6ec6:	f7 01       	movw	r30, r14
    6ec8:	82 84       	ldd	r8, Z+10	; 0x0a
    6eca:	93 84       	ldd	r9, Z+11	; 0x0b
    6ecc:	da cf       	rjmp	.-76     	; 0x6e82 <normalize+0x128>
    6ece:	f7 01       	movw	r30, r14
    6ed0:	80 85       	ldd	r24, Z+8	; 0x08
    6ed2:	91 85       	ldd	r25, Z+9	; 0x09
    6ed4:	9c 01       	movw	r18, r24
    6ed6:	21 50       	subi	r18, 0x01	; 1
    6ed8:	31 09       	sbc	r19, r1
    6eda:	37 fd       	sbrc	r19, 7
    6edc:	16 c0       	rjmp	.+44     	; 0x6f0a <normalize+0x1b0>
    6ede:	31 87       	std	Z+9, r19	; 0x09
    6ee0:	20 87       	std	Z+8, r18	; 0x08
    6ee2:	f7 01       	movw	r30, r14
    6ee4:	62 85       	ldd	r22, Z+10	; 0x0a
    6ee6:	73 85       	ldd	r23, Z+11	; 0x0b
    6ee8:	80 85       	ldd	r24, Z+8	; 0x08
    6eea:	91 85       	ldd	r25, Z+9	; 0x09
    6eec:	2b dd       	rcall	.-1450   	; 0x6944 <Days_Per_Month>
    6eee:	88 0d       	add	r24, r8
    6ef0:	99 1d       	adc	r25, r9
    6ef2:	f7 01       	movw	r30, r14
    6ef4:	97 83       	std	Z+7, r25	; 0x07
    6ef6:	86 83       	std	Z+6, r24	; 0x06
    6ef8:	f7 01       	movw	r30, r14
    6efa:	86 80       	ldd	r8, Z+6	; 0x06
    6efc:	97 80       	ldd	r9, Z+7	; 0x07
    6efe:	a2 84       	ldd	r10, Z+10	; 0x0a
    6f00:	b3 84       	ldd	r11, Z+11	; 0x0b
    6f02:	18 14       	cp	r1, r8
    6f04:	19 04       	cpc	r1, r9
    6f06:	1c f7       	brge	.-58     	; 0x6ece <normalize+0x174>
    6f08:	0b c0       	rjmp	.+22     	; 0x6f20 <normalize+0x1c6>
    6f0a:	0b 96       	adiw	r24, 0x0b	; 11
    6f0c:	f7 01       	movw	r30, r14
    6f0e:	91 87       	std	Z+9, r25	; 0x09
    6f10:	80 87       	std	Z+8, r24	; 0x08
    6f12:	f1 e0       	ldi	r31, 0x01	; 1
    6f14:	af 1a       	sub	r10, r31
    6f16:	b1 08       	sbc	r11, r1
    6f18:	f7 01       	movw	r30, r14
    6f1a:	b3 86       	std	Z+11, r11	; 0x0b
    6f1c:	a2 86       	std	Z+10, r10	; 0x0a
    6f1e:	e1 cf       	rjmp	.-62     	; 0x6ee2 <normalize+0x188>
    6f20:	a5 01       	movw	r20, r10
    6f22:	44 59       	subi	r20, 0x94	; 148
    6f24:	58 4f       	sbci	r21, 0xF8	; 248
    6f26:	58 87       	std	Y+8, r21	; 0x08
    6f28:	4f 83       	std	Y+7, r20	; 0x07
    6f2a:	35 01       	movw	r6, r10
    6f2c:	56 e4       	ldi	r21, 0x46	; 70
    6f2e:	65 1a       	sub	r6, r21
    6f30:	71 08       	sbc	r7, r1
    6f32:	89 e8       	ldi	r24, 0x89	; 137
    6f34:	68 16       	cp	r6, r24
    6f36:	71 04       	cpc	r7, r1
    6f38:	08 f0       	brcs	.+2      	; 0x6f3c <normalize+0x1e2>
    6f3a:	9b c0       	rjmp	.+310    	; 0x7072 <normalize+0x318>
    6f3c:	c0 84       	ldd	r12, Z+8	; 0x08
    6f3e:	d1 84       	ldd	r13, Z+9	; 0x09
    6f40:	9c e0       	ldi	r25, 0x0C	; 12
    6f42:	c9 16       	cp	r12, r25
    6f44:	d1 04       	cpc	r13, r1
    6f46:	08 f0       	brcs	.+2      	; 0x6f4a <normalize+0x1f0>
    6f48:	94 c0       	rjmp	.+296    	; 0x7072 <normalize+0x318>
    6f4a:	24 01       	movw	r4, r8
    6f4c:	e1 e0       	ldi	r30, 0x01	; 1
    6f4e:	4e 1a       	sub	r4, r30
    6f50:	51 08       	sbc	r5, r1
    6f52:	6f 81       	ldd	r22, Y+7	; 0x07
    6f54:	78 85       	ldd	r23, Y+8	; 0x08
    6f56:	c6 01       	movw	r24, r12
    6f58:	f5 dc       	rcall	.-1558   	; 0x6944 <Days_Per_Month>
    6f5a:	48 16       	cp	r4, r24
    6f5c:	59 06       	cpc	r5, r25
    6f5e:	0c f0       	brlt	.+2      	; 0x6f62 <normalize+0x208>
    6f60:	88 c0       	rjmp	.+272    	; 0x7072 <normalize+0x318>
    6f62:	08 31       	cpi	r16, 0x18	; 24
    6f64:	11 05       	cpc	r17, r1
    6f66:	0c f0       	brlt	.+2      	; 0x6f6a <normalize+0x210>
    6f68:	84 c0       	rjmp	.+264    	; 0x7072 <normalize+0x318>
    6f6a:	fc e3       	ldi	r31, 0x3C	; 60
    6f6c:	2f 16       	cp	r2, r31
    6f6e:	31 04       	cpc	r3, r1
    6f70:	0c f0       	brlt	.+2      	; 0x6f74 <normalize+0x21a>
    6f72:	7f c0       	rjmp	.+254    	; 0x7072 <normalize+0x318>
    6f74:	4d 81       	ldd	r20, Y+5	; 0x05
    6f76:	5e 81       	ldd	r21, Y+6	; 0x06
    6f78:	4c 33       	cpi	r20, 0x3C	; 60
    6f7a:	51 05       	cpc	r21, r1
    6f7c:	0c f0       	brlt	.+2      	; 0x6f80 <normalize+0x226>
    6f7e:	79 c0       	rjmp	.+242    	; 0x7072 <normalize+0x318>
    6f80:	2d e6       	ldi	r18, 0x6D	; 109
    6f82:	31 e0       	ldi	r19, 0x01	; 1
    6f84:	d3 01       	movw	r26, r6
    6f86:	0e 94 36 e3 	call	0x1c66c	; 0x1c66c <__usmulhisi3>
    6f8a:	f6 01       	movw	r30, r12
    6f8c:	ee 0f       	add	r30, r30
    6f8e:	ff 1f       	adc	r31, r31
    6f90:	e0 56       	subi	r30, 0x60	; 96
    6f92:	fc 4f       	sbci	r31, 0xFC	; 252
    6f94:	20 81       	ld	r18, Z
    6f96:	31 81       	ldd	r19, Z+1	; 0x01
    6f98:	dc 01       	movw	r26, r24
    6f9a:	cb 01       	movw	r24, r22
    6f9c:	82 0f       	add	r24, r18
    6f9e:	93 1f       	adc	r25, r19
    6fa0:	a1 1d       	adc	r26, r1
    6fa2:	b1 1d       	adc	r27, r1
    6fa4:	05 2c       	mov	r0, r5
    6fa6:	00 0c       	add	r0, r0
    6fa8:	66 08       	sbc	r6, r6
    6faa:	77 08       	sbc	r7, r7
    6fac:	48 0e       	add	r4, r24
    6fae:	59 1e       	adc	r5, r25
    6fb0:	6a 1e       	adc	r6, r26
    6fb2:	7b 1e       	adc	r7, r27
    6fb4:	1a 14       	cp	r1, r10
    6fb6:	1b 04       	cpc	r1, r11
    6fb8:	1c f4       	brge	.+6      	; 0x6fc0 <normalize+0x266>
    6fba:	51 e0       	ldi	r21, 0x01	; 1
    6fbc:	a5 1a       	sub	r10, r21
    6fbe:	b1 08       	sbc	r11, r1
    6fc0:	45 01       	movw	r8, r10
    6fc2:	95 94       	asr	r9
    6fc4:	87 94       	ror	r8
    6fc6:	95 94       	asr	r9
    6fc8:	87 94       	ror	r8
    6fca:	88 ec       	ldi	r24, 0xC8	; 200
    6fcc:	a8 16       	cp	r10, r24
    6fce:	b1 04       	cpc	r11, r1
    6fd0:	1c f0       	brlt	.+6      	; 0x6fd8 <normalize+0x27e>
    6fd2:	91 e0       	ldi	r25, 0x01	; 1
    6fd4:	89 1a       	sub	r8, r25
    6fd6:	91 08       	sbc	r9, r1
    6fd8:	09 2c       	mov	r0, r9
    6fda:	00 0c       	add	r0, r0
    6fdc:	aa 08       	sbc	r10, r10
    6fde:	bb 08       	sbc	r11, r11
    6fe0:	84 0c       	add	r8, r4
    6fe2:	95 1c       	adc	r9, r5
    6fe4:	a6 1c       	adc	r10, r6
    6fe6:	b7 1c       	adc	r11, r7
    6fe8:	24 01       	movw	r4, r8
    6fea:	35 01       	movw	r6, r10
    6fec:	e1 e1       	ldi	r30, 0x11	; 17
    6fee:	4e 1a       	sub	r4, r30
    6ff0:	51 08       	sbc	r5, r1
    6ff2:	61 08       	sbc	r6, r1
    6ff4:	71 08       	sbc	r7, r1
    6ff6:	f2 e0       	ldi	r31, 0x02	; 2
    6ff8:	cf 16       	cp	r12, r31
    6ffa:	d1 04       	cpc	r13, r1
    6ffc:	64 f0       	brlt	.+24     	; 0x7016 <normalize+0x2bc>
    6ffe:	8f 81       	ldd	r24, Y+7	; 0x07
    7000:	98 85       	ldd	r25, Y+8	; 0x08
    7002:	7b dc       	rcall	.-1802   	; 0x68fa <IS_Leap>
    7004:	89 2b       	or	r24, r25
    7006:	39 f0       	breq	.+14     	; 0x7016 <normalize+0x2bc>
    7008:	24 01       	movw	r4, r8
    700a:	35 01       	movw	r6, r10
    700c:	40 e1       	ldi	r20, 0x10	; 16
    700e:	44 1a       	sub	r4, r20
    7010:	51 08       	sbc	r5, r1
    7012:	61 08       	sbc	r6, r1
    7014:	71 08       	sbc	r7, r1
    7016:	a8 e1       	ldi	r26, 0x18	; 24
    7018:	b0 e0       	ldi	r27, 0x00	; 0
    701a:	a3 01       	movw	r20, r6
    701c:	92 01       	movw	r18, r4
    701e:	0e 94 3c e3 	call	0x1c678	; 0x1c678 <__muluhisi3>
    7022:	01 2e       	mov	r0, r17
    7024:	00 0c       	add	r0, r0
    7026:	22 0b       	sbc	r18, r18
    7028:	33 0b       	sbc	r19, r19
    702a:	a9 01       	movw	r20, r18
    702c:	98 01       	movw	r18, r16
    702e:	26 0f       	add	r18, r22
    7030:	37 1f       	adc	r19, r23
    7032:	48 1f       	adc	r20, r24
    7034:	59 1f       	adc	r21, r25
    7036:	ac e3       	ldi	r26, 0x3C	; 60
    7038:	b0 e0       	ldi	r27, 0x00	; 0
    703a:	0e 94 3c e3 	call	0x1c678	; 0x1c678 <__muluhisi3>
    703e:	81 01       	movw	r16, r2
    7040:	03 2c       	mov	r0, r3
    7042:	00 0c       	add	r0, r0
    7044:	22 0b       	sbc	r18, r18
    7046:	33 0b       	sbc	r19, r19
    7048:	a9 01       	movw	r20, r18
    704a:	98 01       	movw	r18, r16
    704c:	26 0f       	add	r18, r22
    704e:	37 1f       	adc	r19, r23
    7050:	48 1f       	adc	r20, r24
    7052:	59 1f       	adc	r21, r25
    7054:	0e 94 3c e3 	call	0x1c678	; 0x1c678 <__muluhisi3>
    7058:	ed 81       	ldd	r30, Y+5	; 0x05
    705a:	fe 81       	ldd	r31, Y+6	; 0x06
    705c:	8f 01       	movw	r16, r30
    705e:	ff 0f       	add	r31, r31
    7060:	22 0b       	sbc	r18, r18
    7062:	33 0b       	sbc	r19, r19
    7064:	48 01       	movw	r8, r16
    7066:	59 01       	movw	r10, r18
    7068:	86 0e       	add	r8, r22
    706a:	97 1e       	adc	r9, r23
    706c:	a8 1e       	adc	r10, r24
    706e:	b9 1e       	adc	r11, r25
    7070:	04 c0       	rjmp	.+8      	; 0x707a <normalize+0x320>
    7072:	88 24       	eor	r8, r8
    7074:	8a 94       	dec	r8
    7076:	98 2c       	mov	r9, r8
    7078:	54 01       	movw	r10, r8
    707a:	49 85       	ldd	r20, Y+9	; 0x09
    707c:	5a 85       	ldd	r21, Y+10	; 0x0a
    707e:	45 2b       	or	r20, r21
    7080:	e9 f0       	breq	.+58     	; 0x70bc <normalize+0x362>
    7082:	ce 01       	movw	r24, r28
    7084:	01 96       	adiw	r24, 0x01	; 1
    7086:	7d dd       	rcall	.-1286   	; 0x6b82 <gettimezone>
    7088:	a9 81       	ldd	r26, Y+1	; 0x01
    708a:	ba 81       	ldd	r27, Y+2	; 0x02
    708c:	2c e3       	ldi	r18, 0x3C	; 60
    708e:	30 e0       	ldi	r19, 0x00	; 0
    7090:	0e 94 36 e3 	call	0x1c66c	; 0x1c66c <__usmulhisi3>
    7094:	2b 01       	movw	r4, r22
    7096:	3c 01       	movw	r6, r24
    7098:	c5 01       	movw	r24, r10
    709a:	b4 01       	movw	r22, r8
    709c:	e2 dd       	rcall	.-1084   	; 0x6c62 <is_dst>
    709e:	89 2b       	or	r24, r25
    70a0:	51 f0       	breq	.+20     	; 0x70b6 <normalize+0x35c>
    70a2:	50 e1       	ldi	r21, 0x10	; 16
    70a4:	45 1a       	sub	r4, r21
    70a6:	5e e0       	ldi	r21, 0x0E	; 14
    70a8:	55 0a       	sbc	r5, r21
    70aa:	61 08       	sbc	r6, r1
    70ac:	71 08       	sbc	r7, r1
    70ae:	cc 24       	eor	r12, r12
    70b0:	c3 94       	inc	r12
    70b2:	d1 2c       	mov	r13, r1
    70b4:	08 c0       	rjmp	.+16     	; 0x70c6 <normalize+0x36c>
    70b6:	c1 2c       	mov	r12, r1
    70b8:	d1 2c       	mov	r13, r1
    70ba:	05 c0       	rjmp	.+10     	; 0x70c6 <normalize+0x36c>
    70bc:	c1 2c       	mov	r12, r1
    70be:	d1 2c       	mov	r13, r1
    70c0:	41 2c       	mov	r4, r1
    70c2:	51 2c       	mov	r5, r1
    70c4:	32 01       	movw	r6, r4
    70c6:	87 01       	movw	r16, r14
    70c8:	a3 01       	movw	r20, r6
    70ca:	92 01       	movw	r18, r4
    70cc:	c5 01       	movw	r24, r10
    70ce:	b4 01       	movw	r22, r8
    70d0:	5a dc       	rcall	.-1868   	; 0x6986 <time_to_tm>
    70d2:	c1 14       	cp	r12, r1
    70d4:	d1 04       	cpc	r13, r1
    70d6:	29 f0       	breq	.+10     	; 0x70e2 <normalize+0x388>
    70d8:	21 e0       	ldi	r18, 0x01	; 1
    70da:	30 e0       	ldi	r19, 0x00	; 0
    70dc:	f7 01       	movw	r30, r14
    70de:	31 8b       	std	Z+17, r19	; 0x11
    70e0:	20 8b       	std	Z+16, r18	; 0x10
    70e2:	2a 96       	adiw	r28, 0x0a	; 10
    70e4:	e2 e1       	ldi	r30, 0x12	; 18
    70e6:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

000070ea <timegm>:
    70ea:	60 e0       	ldi	r22, 0x00	; 0
    70ec:	70 e0       	ldi	r23, 0x00	; 0
    70ee:	35 ce       	rjmp	.-918    	; 0x6d5a <normalize>
    70f0:	08 95       	ret

000070f2 <setdate_r>:
    70f2:	cf 92       	push	r12
    70f4:	df 92       	push	r13
    70f6:	ef 92       	push	r14
    70f8:	ff 92       	push	r15
    70fa:	cf 93       	push	r28
    70fc:	df 93       	push	r29
    70fe:	cd b7       	in	r28, 0x3d	; 61
    7100:	de b7       	in	r29, 0x3e	; 62
    7102:	a5 97       	sbiw	r28, 0x25	; 37
    7104:	0f b6       	in	r0, 0x3f	; 63
    7106:	f8 94       	cli
    7108:	de bf       	out	0x3e, r29	; 62
    710a:	0f be       	out	0x3f, r0	; 63
    710c:	cd bf       	out	0x3d, r28	; 61
    710e:	9d a3       	std	Y+37, r25	; 0x25
    7110:	8c a3       	std	Y+36, r24	; 0x24
    7112:	1f 82       	std	Y+7, r1	; 0x07
    7114:	1e 82       	std	Y+6, r1	; 0x06
    7116:	19 86       	std	Y+9, r1	; 0x09
    7118:	18 86       	std	Y+8, r1	; 0x08
    711a:	1b 86       	std	Y+11, r1	; 0x0b
    711c:	1a 86       	std	Y+10, r1	; 0x0a
    711e:	1d 86       	std	Y+13, r1	; 0x0d
    7120:	1c 86       	std	Y+12, r1	; 0x0c
    7122:	1f 86       	std	Y+15, r1	; 0x0f
    7124:	1e 86       	std	Y+14, r1	; 0x0e
    7126:	19 8a       	std	Y+17, r1	; 0x11
    7128:	18 8a       	std	Y+16, r1	; 0x10
    712a:	8c a1       	ldd	r24, Y+36	; 0x24
    712c:	9d a1       	ldd	r25, Y+37	; 0x25
    712e:	fc 01       	movw	r30, r24
    7130:	20 81       	ld	r18, Z
    7132:	20 32       	cpi	r18, 0x20	; 32
    7134:	21 f4       	brne	.+8      	; 0x713e <setdate_r+0x4c>
    7136:	01 96       	adiw	r24, 0x01	; 1
    7138:	9d a3       	std	Y+37, r25	; 0x25
    713a:	8c a3       	std	Y+36, r24	; 0x24
    713c:	f6 cf       	rjmp	.-20     	; 0x712a <setdate_r+0x38>
    713e:	4a e0       	ldi	r20, 0x0A	; 10
    7140:	50 e0       	ldi	r21, 0x00	; 0
    7142:	be 01       	movw	r22, r28
    7144:	6c 5d       	subi	r22, 0xDC	; 220
    7146:	7f 4f       	sbci	r23, 0xFF	; 255
    7148:	0e 94 49 45 	call	0x8a92	; 0x8a92 <strtol>
    714c:	79 8b       	std	Y+17, r23	; 0x11
    714e:	68 8b       	std	Y+16, r22	; 0x10
    7150:	8c a1       	ldd	r24, Y+36	; 0x24
    7152:	9d a1       	ldd	r25, Y+37	; 0x25
    7154:	fc 01       	movw	r30, r24
    7156:	20 81       	ld	r18, Z
    7158:	20 32       	cpi	r18, 0x20	; 32
    715a:	21 f4       	brne	.+8      	; 0x7164 <setdate_r+0x72>
    715c:	01 96       	adiw	r24, 0x01	; 1
    715e:	9d a3       	std	Y+37, r25	; 0x25
    7160:	8c a3       	std	Y+36, r24	; 0x24
    7162:	f6 cf       	rjmp	.-20     	; 0x7150 <setdate_r+0x5e>
    7164:	4a e0       	ldi	r20, 0x0A	; 10
    7166:	50 e0       	ldi	r21, 0x00	; 0
    7168:	be 01       	movw	r22, r28
    716a:	6c 5d       	subi	r22, 0xDC	; 220
    716c:	7f 4f       	sbci	r23, 0xFF	; 255
    716e:	0e 94 49 45 	call	0x8a92	; 0x8a92 <strtol>
    7172:	7f 87       	std	Y+15, r23	; 0x0f
    7174:	6e 87       	std	Y+14, r22	; 0x0e
    7176:	8c a1       	ldd	r24, Y+36	; 0x24
    7178:	9d a1       	ldd	r25, Y+37	; 0x25
    717a:	fc 01       	movw	r30, r24
    717c:	20 81       	ld	r18, Z
    717e:	20 32       	cpi	r18, 0x20	; 32
    7180:	21 f4       	brne	.+8      	; 0x718a <setdate_r+0x98>
    7182:	01 96       	adiw	r24, 0x01	; 1
    7184:	9d a3       	std	Y+37, r25	; 0x25
    7186:	8c a3       	std	Y+36, r24	; 0x24
    7188:	f6 cf       	rjmp	.-20     	; 0x7176 <setdate_r+0x84>
    718a:	4a e0       	ldi	r20, 0x0A	; 10
    718c:	50 e0       	ldi	r21, 0x00	; 0
    718e:	be 01       	movw	r22, r28
    7190:	6c 5d       	subi	r22, 0xDC	; 220
    7192:	7f 4f       	sbci	r23, 0xFF	; 255
    7194:	0e 94 49 45 	call	0x8a92	; 0x8a92 <strtol>
    7198:	7d 87       	std	Y+13, r23	; 0x0d
    719a:	6c 87       	std	Y+12, r22	; 0x0c
    719c:	8c a1       	ldd	r24, Y+36	; 0x24
    719e:	9d a1       	ldd	r25, Y+37	; 0x25
    71a0:	fc 01       	movw	r30, r24
    71a2:	20 81       	ld	r18, Z
    71a4:	20 32       	cpi	r18, 0x20	; 32
    71a6:	21 f4       	brne	.+8      	; 0x71b0 <setdate_r+0xbe>
    71a8:	01 96       	adiw	r24, 0x01	; 1
    71aa:	9d a3       	std	Y+37, r25	; 0x25
    71ac:	8c a3       	std	Y+36, r24	; 0x24
    71ae:	f6 cf       	rjmp	.-20     	; 0x719c <setdate_r+0xaa>
    71b0:	4a e0       	ldi	r20, 0x0A	; 10
    71b2:	50 e0       	ldi	r21, 0x00	; 0
    71b4:	be 01       	movw	r22, r28
    71b6:	6c 5d       	subi	r22, 0xDC	; 220
    71b8:	7f 4f       	sbci	r23, 0xFF	; 255
    71ba:	0e 94 49 45 	call	0x8a92	; 0x8a92 <strtol>
    71be:	7b 87       	std	Y+11, r23	; 0x0b
    71c0:	6a 87       	std	Y+10, r22	; 0x0a
    71c2:	ec a1       	ldd	r30, Y+36	; 0x24
    71c4:	fd a1       	ldd	r31, Y+37	; 0x25
    71c6:	80 81       	ld	r24, Z
    71c8:	88 23       	and	r24, r24
    71ca:	39 f0       	breq	.+14     	; 0x71da <setdate_r+0xe8>
    71cc:	80 32       	cpi	r24, 0x20	; 32
    71ce:	11 f0       	breq	.+4      	; 0x71d4 <setdate_r+0xe2>
    71d0:	8a 33       	cpi	r24, 0x3A	; 58
    71d2:	19 f4       	brne	.+6      	; 0x71da <setdate_r+0xe8>
    71d4:	31 96       	adiw	r30, 0x01	; 1
    71d6:	fd a3       	std	Y+37, r31	; 0x25
    71d8:	ec a3       	std	Y+36, r30	; 0x24
    71da:	4a e0       	ldi	r20, 0x0A	; 10
    71dc:	50 e0       	ldi	r21, 0x00	; 0
    71de:	be 01       	movw	r22, r28
    71e0:	6c 5d       	subi	r22, 0xDC	; 220
    71e2:	7f 4f       	sbci	r23, 0xFF	; 255
    71e4:	8c a1       	ldd	r24, Y+36	; 0x24
    71e6:	9d a1       	ldd	r25, Y+37	; 0x25
    71e8:	0e 94 49 45 	call	0x8a92	; 0x8a92 <strtol>
    71ec:	79 87       	std	Y+9, r23	; 0x09
    71ee:	68 87       	std	Y+8, r22	; 0x08
    71f0:	ec a1       	ldd	r30, Y+36	; 0x24
    71f2:	fd a1       	ldd	r31, Y+37	; 0x25
    71f4:	80 81       	ld	r24, Z
    71f6:	88 23       	and	r24, r24
    71f8:	39 f0       	breq	.+14     	; 0x7208 <setdate_r+0x116>
    71fa:	80 32       	cpi	r24, 0x20	; 32
    71fc:	11 f0       	breq	.+4      	; 0x7202 <setdate_r+0x110>
    71fe:	8a 33       	cpi	r24, 0x3A	; 58
    7200:	19 f4       	brne	.+6      	; 0x7208 <setdate_r+0x116>
    7202:	31 96       	adiw	r30, 0x01	; 1
    7204:	fd a3       	std	Y+37, r31	; 0x25
    7206:	ec a3       	std	Y+36, r30	; 0x24
    7208:	4a e0       	ldi	r20, 0x0A	; 10
    720a:	50 e0       	ldi	r21, 0x00	; 0
    720c:	be 01       	movw	r22, r28
    720e:	6c 5d       	subi	r22, 0xDC	; 220
    7210:	7f 4f       	sbci	r23, 0xFF	; 255
    7212:	8c a1       	ldd	r24, Y+36	; 0x24
    7214:	9d a1       	ldd	r25, Y+37	; 0x25
    7216:	0e 94 49 45 	call	0x8a92	; 0x8a92 <strtol>
    721a:	7f 83       	std	Y+7, r23	; 0x07
    721c:	6e 83       	std	Y+6, r22	; 0x06
    721e:	2e 85       	ldd	r18, Y+14	; 0x0e
    7220:	3f 85       	ldd	r19, Y+15	; 0x0f
    7222:	21 50       	subi	r18, 0x01	; 1
    7224:	31 09       	sbc	r19, r1
    7226:	3f 87       	std	Y+15, r19	; 0x0f
    7228:	2e 87       	std	Y+14, r18	; 0x0e
    722a:	88 89       	ldd	r24, Y+16	; 0x10
    722c:	99 89       	ldd	r25, Y+17	; 0x11
    722e:	ac 01       	movw	r20, r24
    7230:	42 5b       	subi	r20, 0xB2	; 178
    7232:	57 40       	sbci	r21, 0x07	; 7
    7234:	45 34       	cpi	r20, 0x45	; 69
    7236:	51 05       	cpc	r21, r1
    7238:	38 f0       	brcs	.+14     	; 0x7248 <setdate_r+0x156>
    723a:	ed b7       	in	r30, 0x3d	; 61
    723c:	fe b7       	in	r31, 0x3e	; 62
    723e:	95 83       	std	Z+5, r25	; 0x05
    7240:	84 83       	std	Z+4, r24	; 0x04
    7242:	89 e1       	ldi	r24, 0x19	; 25
    7244:	97 e0       	ldi	r25, 0x07	; 7
    7246:	34 c0       	rjmp	.+104    	; 0x72b0 <setdate_r+0x1be>
    7248:	8c 56       	subi	r24, 0x6C	; 108
    724a:	97 40       	sbci	r25, 0x07	; 7
    724c:	99 8b       	std	Y+17, r25	; 0x11
    724e:	88 8b       	std	Y+16, r24	; 0x10
    7250:	2c 30       	cpi	r18, 0x0C	; 12
    7252:	31 05       	cpc	r19, r1
    7254:	38 f0       	brcs	.+14     	; 0x7264 <setdate_r+0x172>
    7256:	ed b7       	in	r30, 0x3d	; 61
    7258:	fe b7       	in	r31, 0x3e	; 62
    725a:	95 83       	std	Z+5, r25	; 0x05
    725c:	84 83       	std	Z+4, r24	; 0x04
    725e:	88 e0       	ldi	r24, 0x08	; 8
    7260:	97 e0       	ldi	r25, 0x07	; 7
    7262:	26 c0       	rjmp	.+76     	; 0x72b0 <setdate_r+0x1be>
    7264:	8c 85       	ldd	r24, Y+12	; 0x0c
    7266:	9d 85       	ldd	r25, Y+13	; 0x0d
    7268:	9c 01       	movw	r18, r24
    726a:	21 50       	subi	r18, 0x01	; 1
    726c:	31 09       	sbc	r19, r1
    726e:	2f 31       	cpi	r18, 0x1F	; 31
    7270:	31 05       	cpc	r19, r1
    7272:	38 f0       	brcs	.+14     	; 0x7282 <setdate_r+0x190>
    7274:	ed b7       	in	r30, 0x3d	; 61
    7276:	fe b7       	in	r31, 0x3e	; 62
    7278:	95 83       	std	Z+5, r25	; 0x05
    727a:	84 83       	std	Z+4, r24	; 0x04
    727c:	87 ef       	ldi	r24, 0xF7	; 247
    727e:	96 e0       	ldi	r25, 0x06	; 6
    7280:	17 c0       	rjmp	.+46     	; 0x72b0 <setdate_r+0x1be>
    7282:	8a 85       	ldd	r24, Y+10	; 0x0a
    7284:	9b 85       	ldd	r25, Y+11	; 0x0b
    7286:	88 31       	cpi	r24, 0x18	; 24
    7288:	91 05       	cpc	r25, r1
    728a:	38 f0       	brcs	.+14     	; 0x729a <setdate_r+0x1a8>
    728c:	ed b7       	in	r30, 0x3d	; 61
    728e:	fe b7       	in	r31, 0x3e	; 62
    7290:	95 83       	std	Z+5, r25	; 0x05
    7292:	84 83       	std	Z+4, r24	; 0x04
    7294:	85 ee       	ldi	r24, 0xE5	; 229
    7296:	96 e0       	ldi	r25, 0x06	; 6
    7298:	0b c0       	rjmp	.+22     	; 0x72b0 <setdate_r+0x1be>
    729a:	88 85       	ldd	r24, Y+8	; 0x08
    729c:	99 85       	ldd	r25, Y+9	; 0x09
    729e:	8c 33       	cpi	r24, 0x3C	; 60
    72a0:	91 05       	cpc	r25, r1
    72a2:	68 f0       	brcs	.+26     	; 0x72be <setdate_r+0x1cc>
    72a4:	ed b7       	in	r30, 0x3d	; 61
    72a6:	fe b7       	in	r31, 0x3e	; 62
    72a8:	95 83       	std	Z+5, r25	; 0x05
    72aa:	84 83       	std	Z+4, r24	; 0x04
    72ac:	84 ed       	ldi	r24, 0xD4	; 212
    72ae:	96 e0       	ldi	r25, 0x06	; 6
    72b0:	a0 e0       	ldi	r26, 0x00	; 0
    72b2:	81 83       	std	Z+1, r24	; 0x01
    72b4:	92 83       	std	Z+2, r25	; 0x02
    72b6:	a3 83       	std	Z+3, r26	; 0x03
    72b8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    72bc:	25 c0       	rjmp	.+74     	; 0x7308 <setdate_r+0x216>
    72be:	ce 01       	movw	r24, r28
    72c0:	06 96       	adiw	r24, 0x06	; 6
    72c2:	13 df       	rcall	.-474    	; 0x70ea <timegm>
    72c4:	6b 01       	movw	r12, r22
    72c6:	7c 01       	movw	r14, r24
    72c8:	6c 8f       	std	Y+28, r22	; 0x1c
    72ca:	7d 8f       	std	Y+29, r23	; 0x1d
    72cc:	8e 8f       	std	Y+30, r24	; 0x1e
    72ce:	9f 8f       	std	Y+31, r25	; 0x1f
    72d0:	18 a2       	std	Y+32, r1	; 0x20
    72d2:	19 a2       	std	Y+33, r1	; 0x21
    72d4:	1a a2       	std	Y+34, r1	; 0x22
    72d6:	1b a2       	std	Y+35, r1	; 0x23
    72d8:	be 01       	movw	r22, r28
    72da:	64 5e       	subi	r22, 0xE4	; 228
    72dc:	7f 4f       	sbci	r23, 0xFF	; 255
    72de:	80 e0       	ldi	r24, 0x00	; 0
    72e0:	90 e0       	ldi	r25, 0x00	; 0
    72e2:	03 db       	rcall	.-2554   	; 0x68ea <clock_settime>
    72e4:	b7 01       	movw	r22, r14
    72e6:	a6 01       	movw	r20, r12
    72e8:	81 e0       	ldi	r24, 0x01	; 1
    72ea:	90 e0       	ldi	r25, 0x00	; 0
    72ec:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <rtc_init>
    72f0:	81 11       	cpse	r24, r1
    72f2:	0d c0       	rjmp	.+26     	; 0x730e <setdate_r+0x21c>
    72f4:	8d eb       	ldi	r24, 0xBD	; 189
    72f6:	96 e0       	ldi	r25, 0x06	; 6
    72f8:	a0 e0       	ldi	r26, 0x00	; 0
    72fa:	ed b7       	in	r30, 0x3d	; 61
    72fc:	fe b7       	in	r31, 0x3e	; 62
    72fe:	81 83       	std	Z+1, r24	; 0x01
    7300:	92 83       	std	Z+2, r25	; 0x02
    7302:	a3 83       	std	Z+3, r26	; 0x03
    7304:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    7308:	8f ef       	ldi	r24, 0xFF	; 255
    730a:	9f ef       	ldi	r25, 0xFF	; 255
    730c:	02 c0       	rjmp	.+4      	; 0x7312 <setdate_r+0x220>
    730e:	80 e0       	ldi	r24, 0x00	; 0
    7310:	90 e0       	ldi	r25, 0x00	; 0
    7312:	a5 96       	adiw	r28, 0x25	; 37
    7314:	0f b6       	in	r0, 0x3f	; 63
    7316:	f8 94       	cli
    7318:	de bf       	out	0x3e, r29	; 62
    731a:	0f be       	out	0x3f, r0	; 63
    731c:	cd bf       	out	0x3d, r28	; 61
    731e:	df 91       	pop	r29
    7320:	cf 91       	pop	r28
    7322:	ff 90       	pop	r15
    7324:	ef 90       	pop	r14
    7326:	df 90       	pop	r13
    7328:	cf 90       	pop	r12
    732a:	08 95       	ret

0000732c <setdate>:
    732c:	ab e2       	ldi	r26, 0x2B	; 43
    732e:	b0 e0       	ldi	r27, 0x00	; 0
    7330:	ec e9       	ldi	r30, 0x9C	; 156
    7332:	f9 e3       	ldi	r31, 0x39	; 57
    7334:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
    7338:	8b e2       	ldi	r24, 0x2B	; 43
    733a:	97 e0       	ldi	r25, 0x07	; 7
    733c:	a0 e0       	ldi	r26, 0x00	; 0
    733e:	ed b7       	in	r30, 0x3d	; 61
    7340:	fe b7       	in	r31, 0x3e	; 62
    7342:	81 83       	std	Z+1, r24	; 0x01
    7344:	92 83       	std	Z+2, r25	; 0x02
    7346:	a3 83       	std	Z+3, r26	; 0x03
    7348:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    734c:	40 91 c2 1c 	lds	r20, 0x1CC2	; 0x801cc2 <__iob>
    7350:	50 91 c3 1c 	lds	r21, 0x1CC3	; 0x801cc3 <__iob+0x1>
    7354:	66 e2       	ldi	r22, 0x26	; 38
    7356:	70 e0       	ldi	r23, 0x00	; 0
    7358:	ce 01       	movw	r24, r28
    735a:	04 96       	adiw	r24, 0x04	; 4
    735c:	0e 94 4e 75 	call	0xea9c	; 0xea9c <fgets>
    7360:	ce 01       	movw	r24, r28
    7362:	04 96       	adiw	r24, 0x04	; 4
    7364:	c6 de       	rcall	.-628    	; 0x70f2 <setdate_r>
    7366:	ab 96       	adiw	r28, 0x2b	; 43
    7368:	e2 e0       	ldi	r30, 0x02	; 2
    736a:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

0000736e <find_dst>:
    736e:	a8 e2       	ldi	r26, 0x28	; 40
    7370:	b0 e0       	ldi	r27, 0x00	; 0
    7372:	ed eb       	ldi	r30, 0xBD	; 189
    7374:	f9 e3       	ldi	r31, 0x39	; 57
    7376:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
    737a:	3c 01       	movw	r6, r24
    737c:	1a 01       	movw	r2, r20
    737e:	2b 01       	movw	r4, r22
    7380:	49 01       	movw	r8, r18
    7382:	1c a3       	std	Y+36, r17	; 0x24
    7384:	0b a3       	std	Y+35, r16	; 0x23
    7386:	de a2       	std	Y+38, r13	; 0x26
    7388:	cd a2       	std	Y+37, r12	; 0x25
    738a:	b8 a6       	std	Y+40, r11	; 0x28
    738c:	af a2       	std	Y+39, r10	; 0x27
    738e:	be 01       	movw	r22, r28
    7390:	61 5e       	subi	r22, 0xE1	; 225
    7392:	7f 4f       	sbci	r23, 0xFF	; 255
    7394:	ce 01       	movw	r24, r28
    7396:	47 96       	adiw	r24, 0x17	; 23
    7398:	15 dc       	rcall	.-2006   	; 0x6bc4 <gettimeofday>
    739a:	af 8d       	ldd	r26, Y+31	; 0x1f
    739c:	b8 a1       	ldd	r27, Y+32	; 0x20
    739e:	2c e3       	ldi	r18, 0x3C	; 60
    73a0:	30 e0       	ldi	r19, 0x00	; 0
    73a2:	0e 94 36 e3 	call	0x1c66c	; 0x1c66c <__usmulhisi3>
    73a6:	5b 01       	movw	r10, r22
    73a8:	6c 01       	movw	r12, r24
    73aa:	61 14       	cp	r6, r1
    73ac:	71 04       	cpc	r7, r1
    73ae:	31 f0       	breq	.+12     	; 0x73bc <find_dst+0x4e>
    73b0:	20 e1       	ldi	r18, 0x10	; 16
    73b2:	a2 1a       	sub	r10, r18
    73b4:	2e e0       	ldi	r18, 0x0E	; 14
    73b6:	b2 0a       	sbc	r11, r18
    73b8:	c1 08       	sbc	r12, r1
    73ba:	d1 08       	sbc	r13, r1
    73bc:	81 14       	cp	r8, r1
    73be:	91 04       	cpc	r9, r1
    73c0:	39 f0       	breq	.+14     	; 0x73d0 <find_dst+0x62>
    73c2:	4c e6       	ldi	r20, 0x6C	; 108
    73c4:	84 1a       	sub	r8, r20
    73c6:	47 e0       	ldi	r20, 0x07	; 7
    73c8:	94 0a       	sbc	r9, r20
    73ca:	9c 86       	std	Y+12, r9	; 0x0c
    73cc:	8b 86       	std	Y+11, r8	; 0x0b
    73ce:	11 c0       	rjmp	.+34     	; 0x73f2 <find_dst+0x84>
    73d0:	21 14       	cp	r2, r1
    73d2:	31 04       	cpc	r3, r1
    73d4:	41 04       	cpc	r4, r1
    73d6:	51 04       	cpc	r5, r1
    73d8:	21 f4       	brne	.+8      	; 0x73e2 <find_dst+0x74>
    73da:	2f 88       	ldd	r2, Y+23	; 0x17
    73dc:	38 8c       	ldd	r3, Y+24	; 0x18
    73de:	49 8c       	ldd	r4, Y+25	; 0x19
    73e0:	5a 8c       	ldd	r5, Y+26	; 0x1a
    73e2:	8e 01       	movw	r16, r28
    73e4:	0f 5f       	subi	r16, 0xFF	; 255
    73e6:	1f 4f       	sbci	r17, 0xFF	; 255
    73e8:	a6 01       	movw	r20, r12
    73ea:	95 01       	movw	r18, r10
    73ec:	c2 01       	movw	r24, r4
    73ee:	b1 01       	movw	r22, r2
    73f0:	ca da       	rcall	.-2668   	; 0x6986 <time_to_tm>
    73f2:	8b a1       	ldd	r24, Y+35	; 0x23
    73f4:	9c a1       	ldd	r25, Y+36	; 0x24
    73f6:	01 97       	sbiw	r24, 0x01	; 1
    73f8:	9a 87       	std	Y+10, r25	; 0x0a
    73fa:	89 87       	std	Y+9, r24	; 0x09
    73fc:	81 e0       	ldi	r24, 0x01	; 1
    73fe:	90 e0       	ldi	r25, 0x00	; 0
    7400:	98 87       	std	Y+8, r25	; 0x08
    7402:	8f 83       	std	Y+7, r24	; 0x07
    7404:	8f a1       	ldd	r24, Y+39	; 0x27
    7406:	98 a5       	ldd	r25, Y+40	; 0x28
    7408:	9e 83       	std	Y+6, r25	; 0x06
    740a:	8d 83       	std	Y+5, r24	; 0x05
    740c:	1c 82       	std	Y+4, r1	; 0x04
    740e:	1b 82       	std	Y+3, r1	; 0x03
    7410:	1a 82       	std	Y+2, r1	; 0x02
    7412:	19 82       	std	Y+1, r1	; 0x01
    7414:	ce 01       	movw	r24, r28
    7416:	01 96       	adiw	r24, 0x01	; 1
    7418:	68 de       	rcall	.-816    	; 0x70ea <timegm>
    741a:	45 01       	movw	r8, r10
    741c:	56 01       	movw	r10, r12
    741e:	86 0e       	add	r8, r22
    7420:	97 1e       	adc	r9, r23
    7422:	a8 1e       	adc	r10, r24
    7424:	b9 1e       	adc	r11, r25
    7426:	8e 01       	movw	r16, r28
    7428:	0f 5f       	subi	r16, 0xFF	; 255
    742a:	1f 4f       	sbci	r17, 0xFF	; 255
    742c:	20 e0       	ldi	r18, 0x00	; 0
    742e:	30 e0       	ldi	r19, 0x00	; 0
    7430:	a9 01       	movw	r20, r18
    7432:	c5 01       	movw	r24, r10
    7434:	b4 01       	movw	r22, r8
    7436:	a7 da       	rcall	.-2738   	; 0x6986 <time_to_tm>
    7438:	2d 85       	ldd	r18, Y+13	; 0x0d
    743a:	3e 85       	ldd	r19, Y+14	; 0x0e
    743c:	e7 e0       	ldi	r30, 0x07	; 7
    743e:	f0 e0       	ldi	r31, 0x00	; 0
    7440:	c9 01       	movw	r24, r18
    7442:	bf 01       	movw	r22, r30
    7444:	0e 94 dc e2 	call	0x1c5b8	; 0x1c5b8 <__divmodhi4>
    7448:	4d a1       	ldd	r20, Y+37	; 0x25
    744a:	5e a1       	ldd	r21, Y+38	; 0x26
    744c:	48 17       	cp	r20, r24
    744e:	59 07       	cpc	r21, r25
    7450:	21 f4       	brne	.+8      	; 0x745a <find_dst+0xec>
    7452:	51 e0       	ldi	r21, 0x01	; 1
    7454:	e5 1a       	sub	r14, r21
    7456:	f1 08       	sbc	r15, r1
    7458:	51 f0       	breq	.+20     	; 0x746e <find_dst+0x100>
    745a:	80 e8       	ldi	r24, 0x80	; 128
    745c:	88 0e       	add	r8, r24
    745e:	81 e5       	ldi	r24, 0x51	; 81
    7460:	98 1e       	adc	r9, r24
    7462:	81 e0       	ldi	r24, 0x01	; 1
    7464:	a8 1e       	adc	r10, r24
    7466:	b1 1c       	adc	r11, r1
    7468:	2f 5f       	subi	r18, 0xFF	; 255
    746a:	3f 4f       	sbci	r19, 0xFF	; 255
    746c:	e9 cf       	rjmp	.-46     	; 0x7440 <find_dst+0xd2>
    746e:	c5 01       	movw	r24, r10
    7470:	b4 01       	movw	r22, r8
    7472:	a8 96       	adiw	r28, 0x28	; 40
    7474:	e2 e1       	ldi	r30, 0x12	; 18
    7476:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

0000747a <set_dst>:
    747a:	4f 92       	push	r4
    747c:	5f 92       	push	r5
    747e:	6f 92       	push	r6
    7480:	7f 92       	push	r7
    7482:	af 92       	push	r10
    7484:	bf 92       	push	r11
    7486:	cf 92       	push	r12
    7488:	df 92       	push	r13
    748a:	ef 92       	push	r14
    748c:	ff 92       	push	r15
    748e:	0f 93       	push	r16
    7490:	1f 93       	push	r17
    7492:	cf 93       	push	r28
    7494:	df 93       	push	r29
    7496:	cd b7       	in	r28, 0x3d	; 61
    7498:	de b7       	in	r29, 0x3e	; 62
    749a:	2c 97       	sbiw	r28, 0x0c	; 12
    749c:	0f b6       	in	r0, 0x3f	; 63
    749e:	f8 94       	cli
    74a0:	de bf       	out	0x3e, r29	; 62
    74a2:	0f be       	out	0x3f, r0	; 63
    74a4:	cd bf       	out	0x3d, r28	; 61
    74a6:	2b 01       	movw	r4, r22
    74a8:	3c 01       	movw	r6, r24
    74aa:	67 2b       	or	r22, r23
    74ac:	68 2b       	or	r22, r24
    74ae:	69 2b       	or	r22, r25
    74b0:	51 f4       	brne	.+20     	; 0x74c6 <set_dst+0x4c>
    74b2:	be 01       	movw	r22, r28
    74b4:	67 5f       	subi	r22, 0xF7	; 247
    74b6:	7f 4f       	sbci	r23, 0xFF	; 255
    74b8:	ce 01       	movw	r24, r28
    74ba:	01 96       	adiw	r24, 0x01	; 1
    74bc:	83 db       	rcall	.-2298   	; 0x6bc4 <gettimeofday>
    74be:	49 80       	ldd	r4, Y+1	; 0x01
    74c0:	5a 80       	ldd	r5, Y+2	; 0x02
    74c2:	6b 80       	ldd	r6, Y+3	; 0x03
    74c4:	7c 80       	ldd	r7, Y+4	; 0x04
    74c6:	80 91 7f 1a 	lds	r24, 0x1A7F	; 0x801a7f <dst+0x8>
    74ca:	90 91 80 1a 	lds	r25, 0x1A80	; 0x801a80 <dst+0x9>
    74ce:	a0 91 81 1a 	lds	r26, 0x1A81	; 0x801a81 <dst+0xa>
    74d2:	b0 91 82 1a 	lds	r27, 0x1A82	; 0x801a82 <dst+0xb>
    74d6:	84 15       	cp	r24, r4
    74d8:	95 05       	cpc	r25, r5
    74da:	a6 05       	cpc	r26, r6
    74dc:	b7 05       	cpc	r27, r7
    74de:	50 f0       	brcs	.+20     	; 0x74f4 <set_dst+0x7a>
    74e0:	84 19       	sub	r24, r4
    74e2:	95 09       	sbc	r25, r5
    74e4:	a6 09       	sbc	r26, r6
    74e6:	b7 09       	sbc	r27, r7
    74e8:	80 38       	cpi	r24, 0x80	; 128
    74ea:	91 45       	sbci	r25, 0x51	; 81
    74ec:	a1 40       	sbci	r26, 0x01	; 1
    74ee:	b1 05       	cpc	r27, r1
    74f0:	70 f4       	brcc	.+28     	; 0x750e <set_dst+0x94>
    74f2:	42 c0       	rjmp	.+132    	; 0x7578 <set_dst+0xfe>
    74f4:	a3 01       	movw	r20, r6
    74f6:	92 01       	movw	r18, r4
    74f8:	28 1b       	sub	r18, r24
    74fa:	39 0b       	sbc	r19, r25
    74fc:	4a 0b       	sbc	r20, r26
    74fe:	5b 0b       	sbc	r21, r27
    7500:	da 01       	movw	r26, r20
    7502:	c9 01       	movw	r24, r18
    7504:	80 38       	cpi	r24, 0x80	; 128
    7506:	91 45       	sbci	r25, 0x51	; 81
    7508:	a1 40       	sbci	r26, 0x01	; 1
    750a:	b1 05       	cpc	r27, r1
    750c:	a8 f1       	brcs	.+106    	; 0x7578 <set_dst+0xfe>
    750e:	40 92 7f 1a 	sts	0x1A7F, r4	; 0x801a7f <dst+0x8>
    7512:	50 92 80 1a 	sts	0x1A80, r5	; 0x801a80 <dst+0x9>
    7516:	60 92 81 1a 	sts	0x1A81, r6	; 0x801a81 <dst+0xa>
    751a:	70 92 82 1a 	sts	0x1A82, r7	; 0x801a82 <dst+0xb>
    751e:	82 e0       	ldi	r24, 0x02	; 2
    7520:	a8 2e       	mov	r10, r24
    7522:	b1 2c       	mov	r11, r1
    7524:	c1 2c       	mov	r12, r1
    7526:	d1 2c       	mov	r13, r1
    7528:	92 e0       	ldi	r25, 0x02	; 2
    752a:	e9 2e       	mov	r14, r25
    752c:	f1 2c       	mov	r15, r1
    752e:	03 e0       	ldi	r16, 0x03	; 3
    7530:	10 e0       	ldi	r17, 0x00	; 0
    7532:	20 e0       	ldi	r18, 0x00	; 0
    7534:	30 e0       	ldi	r19, 0x00	; 0
    7536:	b3 01       	movw	r22, r6
    7538:	a2 01       	movw	r20, r4
    753a:	80 e0       	ldi	r24, 0x00	; 0
    753c:	90 e0       	ldi	r25, 0x00	; 0
    753e:	17 df       	rcall	.-466    	; 0x736e <find_dst>
    7540:	60 93 77 1a 	sts	0x1A77, r22	; 0x801a77 <dst>
    7544:	70 93 78 1a 	sts	0x1A78, r23	; 0x801a78 <dst+0x1>
    7548:	80 93 79 1a 	sts	0x1A79, r24	; 0x801a79 <dst+0x2>
    754c:	90 93 7a 1a 	sts	0x1A7A, r25	; 0x801a7a <dst+0x3>
    7550:	ee 24       	eor	r14, r14
    7552:	e3 94       	inc	r14
    7554:	f1 2c       	mov	r15, r1
    7556:	0b e0       	ldi	r16, 0x0B	; 11
    7558:	10 e0       	ldi	r17, 0x00	; 0
    755a:	20 e0       	ldi	r18, 0x00	; 0
    755c:	30 e0       	ldi	r19, 0x00	; 0
    755e:	b3 01       	movw	r22, r6
    7560:	a2 01       	movw	r20, r4
    7562:	81 e0       	ldi	r24, 0x01	; 1
    7564:	90 e0       	ldi	r25, 0x00	; 0
    7566:	03 df       	rcall	.-506    	; 0x736e <find_dst>
    7568:	60 93 7b 1a 	sts	0x1A7B, r22	; 0x801a7b <dst+0x4>
    756c:	70 93 7c 1a 	sts	0x1A7C, r23	; 0x801a7c <dst+0x5>
    7570:	80 93 7d 1a 	sts	0x1A7D, r24	; 0x801a7d <dst+0x6>
    7574:	90 93 7e 1a 	sts	0x1A7E, r25	; 0x801a7e <dst+0x7>
    7578:	2c 96       	adiw	r28, 0x0c	; 12
    757a:	0f b6       	in	r0, 0x3f	; 63
    757c:	f8 94       	cli
    757e:	de bf       	out	0x3e, r29	; 62
    7580:	0f be       	out	0x3f, r0	; 63
    7582:	cd bf       	out	0x3d, r28	; 61
    7584:	df 91       	pop	r29
    7586:	cf 91       	pop	r28
    7588:	1f 91       	pop	r17
    758a:	0f 91       	pop	r16
    758c:	ff 90       	pop	r15
    758e:	ef 90       	pop	r14
    7590:	df 90       	pop	r13
    7592:	cf 90       	pop	r12
    7594:	bf 90       	pop	r11
    7596:	af 90       	pop	r10
    7598:	7f 90       	pop	r7
    759a:	6f 90       	pop	r6
    759c:	5f 90       	pop	r5
    759e:	4f 90       	pop	r4
    75a0:	08 95       	ret

000075a2 <asctime_r>:
    75a2:	a5 e1       	ldi	r26, 0x15	; 21
    75a4:	b0 e0       	ldi	r27, 0x00	; 0
    75a6:	e7 ed       	ldi	r30, 0xD7	; 215
    75a8:	fa e3       	ldi	r31, 0x3A	; 58
    75aa:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__prologue_saves__+0x1c>
    75ae:	ec 01       	movw	r28, r24
    75b0:	8b 01       	movw	r16, r22
    75b2:	60 e0       	ldi	r22, 0x00	; 0
    75b4:	70 e0       	ldi	r23, 0x00	; 0
    75b6:	d1 db       	rcall	.-2142   	; 0x6d5a <normalize>
    75b8:	80 e2       	ldi	r24, 0x20	; 32
    75ba:	f8 01       	movw	r30, r16
    75bc:	11 92       	st	Z+, r1
    75be:	8a 95       	dec	r24
    75c0:	e9 f7       	brne	.-6      	; 0x75bc <asctime_r+0x1a>
    75c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    75c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    75c6:	84 59       	subi	r24, 0x94	; 148
    75c8:	98 4f       	sbci	r25, 0xF8	; 248
    75ca:	ed b7       	in	r30, 0x3d	; 61
    75cc:	fe b7       	in	r31, 0x3e	; 62
    75ce:	95 8b       	std	Z+21, r25	; 0x15
    75d0:	84 8b       	std	Z+20, r24	; 0x14
    75d2:	88 81       	ld	r24, Y
    75d4:	99 81       	ldd	r25, Y+1	; 0x01
    75d6:	93 8b       	std	Z+19, r25	; 0x13
    75d8:	82 8b       	std	Z+18, r24	; 0x12
    75da:	8a 81       	ldd	r24, Y+2	; 0x02
    75dc:	9b 81       	ldd	r25, Y+3	; 0x03
    75de:	91 8b       	std	Z+17, r25	; 0x11
    75e0:	80 8b       	std	Z+16, r24	; 0x10
    75e2:	8c 81       	ldd	r24, Y+4	; 0x04
    75e4:	9d 81       	ldd	r25, Y+5	; 0x05
    75e6:	97 87       	std	Z+15, r25	; 0x0f
    75e8:	86 87       	std	Z+14, r24	; 0x0e
    75ea:	8e 81       	ldd	r24, Y+6	; 0x06
    75ec:	9f 81       	ldd	r25, Y+7	; 0x07
    75ee:	95 87       	std	Z+13, r25	; 0x0d
    75f0:	84 87       	std	Z+12, r24	; 0x0c
    75f2:	e8 85       	ldd	r30, Y+8	; 0x08
    75f4:	f9 85       	ldd	r31, Y+9	; 0x09
    75f6:	ee 0f       	add	r30, r30
    75f8:	ff 1f       	adc	r31, r31
    75fa:	e5 5f       	subi	r30, 0xF5	; 245
    75fc:	fe 4f       	sbci	r31, 0xFE	; 254
    75fe:	80 81       	ld	r24, Z
    7600:	91 81       	ldd	r25, Z+1	; 0x01
    7602:	ed b7       	in	r30, 0x3d	; 61
    7604:	fe b7       	in	r31, 0x3e	; 62
    7606:	93 87       	std	Z+11, r25	; 0x0b
    7608:	82 87       	std	Z+10, r24	; 0x0a
    760a:	ec 85       	ldd	r30, Y+12	; 0x0c
    760c:	fd 85       	ldd	r31, Y+13	; 0x0d
    760e:	ee 0f       	add	r30, r30
    7610:	ff 1f       	adc	r31, r31
    7612:	eb 5d       	subi	r30, 0xDB	; 219
    7614:	fe 4f       	sbci	r31, 0xFE	; 254
    7616:	80 81       	ld	r24, Z
    7618:	91 81       	ldd	r25, Z+1	; 0x01
    761a:	ed b7       	in	r30, 0x3d	; 61
    761c:	fe b7       	in	r31, 0x3e	; 62
    761e:	91 87       	std	Z+9, r25	; 0x09
    7620:	80 87       	std	Z+8, r24	; 0x08
    7622:	8c e4       	ldi	r24, 0x4C	; 76
    7624:	97 e0       	ldi	r25, 0x07	; 7
    7626:	a0 e0       	ldi	r26, 0x00	; 0
    7628:	85 83       	std	Z+5, r24	; 0x05
    762a:	96 83       	std	Z+6, r25	; 0x06
    762c:	a7 83       	std	Z+7, r26	; 0x07
    762e:	80 e2       	ldi	r24, 0x20	; 32
    7630:	90 e0       	ldi	r25, 0x00	; 0
    7632:	94 83       	std	Z+4, r25	; 0x04
    7634:	83 83       	std	Z+3, r24	; 0x03
    7636:	12 83       	std	Z+2, r17	; 0x02
    7638:	01 83       	std	Z+1, r16	; 0x01
    763a:	0e 94 e6 44 	call	0x89cc	; 0x89cc <snprintf_P>
    763e:	c8 01       	movw	r24, r16
    7640:	cd b7       	in	r28, 0x3d	; 61
    7642:	de b7       	in	r29, 0x3e	; 62
    7644:	65 96       	adiw	r28, 0x15	; 21
    7646:	e4 e0       	ldi	r30, 0x04	; 4
    7648:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

0000764c <asctime>:
    764c:	62 e0       	ldi	r22, 0x02	; 2
    764e:	78 e1       	ldi	r23, 0x18	; 24
    7650:	a8 cf       	rjmp	.-176    	; 0x75a2 <asctime_r>
    7652:	08 95       	ret

00007654 <ctime_gm>:
    7654:	a6 e1       	ldi	r26, 0x16	; 22
    7656:	b0 e0       	ldi	r27, 0x00	; 0
    7658:	e0 e3       	ldi	r30, 0x30	; 48
    765a:	fb e3       	ldi	r31, 0x3B	; 59
    765c:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
    7660:	be 01       	movw	r22, r28
    7662:	6f 5f       	subi	r22, 0xFF	; 255
    7664:	7f 4f       	sbci	r23, 0xFF	; 255
    7666:	6d da       	rcall	.-2854   	; 0x6b42 <gmtime_r>
    7668:	62 ee       	ldi	r22, 0xE2	; 226
    766a:	77 e1       	ldi	r23, 0x17	; 23
    766c:	9a df       	rcall	.-204    	; 0x75a2 <asctime_r>
    766e:	66 96       	adiw	r28, 0x16	; 22
    7670:	e2 e0       	ldi	r30, 0x02	; 2
    7672:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00007676 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7676:	a5 e2       	ldi	r26, 0x25	; 37
    7678:	b0 e0       	ldi	r27, 0x00	; 0
    767a:	e1 e4       	ldi	r30, 0x41	; 65
    767c:	fb e3       	ldi	r31, 0x3B	; 59
    767e:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
    7682:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7684:	40 e0       	ldi	r20, 0x00	; 0
    7686:	50 e0       	ldi	r21, 0x00	; 0
    7688:	ba 01       	movw	r22, r20
    768a:	80 e0       	ldi	r24, 0x00	; 0
    768c:	90 e0       	ldi	r25, 0x00	; 0
    768e:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <rtc_init>
    7692:	81 11       	cpse	r24, r1
    7694:	27 c0       	rjmp	.+78     	; 0x76e4 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7696:	8b ea       	ldi	r24, 0xAB	; 171
    7698:	96 e0       	ldi	r25, 0x06	; 6
    769a:	a0 e0       	ldi	r26, 0x00	; 0
    769c:	ed b7       	in	r30, 0x3d	; 61
    769e:	fe b7       	in	r31, 0x3e	; 62
    76a0:	81 83       	std	Z+1, r24	; 0x01
    76a2:	92 83       	std	Z+2, r25	; 0x02
    76a4:	a3 83       	std	Z+3, r26	; 0x03
    76a6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        printf("attempting rtc init\n");
    76aa:	86 e9       	ldi	r24, 0x96	; 150
    76ac:	96 e0       	ldi	r25, 0x06	; 6
    76ae:	a0 e0       	ldi	r26, 0x00	; 0
    76b0:	ed b7       	in	r30, 0x3d	; 61
    76b2:	fe b7       	in	r31, 0x3e	; 62
    76b4:	81 83       	std	Z+1, r24	; 0x01
    76b6:	92 83       	std	Z+2, r25	; 0x02
    76b8:	a3 83       	std	Z+3, r26	; 0x03
    76ba:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    76be:	40 e0       	ldi	r20, 0x00	; 0
    76c0:	50 e0       	ldi	r21, 0x00	; 0
    76c2:	ba 01       	movw	r22, r20
    76c4:	81 e0       	ldi	r24, 0x01	; 1
    76c6:	90 e0       	ldi	r25, 0x00	; 0
    76c8:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <rtc_init>
    76cc:	81 11       	cpse	r24, r1
    76ce:	0a c0       	rjmp	.+20     	; 0x76e4 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    76d0:	8f e7       	ldi	r24, 0x7F	; 127
    76d2:	96 e0       	ldi	r25, 0x06	; 6
    76d4:	a0 e0       	ldi	r26, 0x00	; 0
    76d6:	ed b7       	in	r30, 0x3d	; 61
    76d8:	fe b7       	in	r31, 0x3e	; 62
    76da:	81 83       	std	Z+1, r24	; 0x01
    76dc:	92 83       	std	Z+2, r25	; 0x02
    76de:	a3 83       	std	Z+3, r26	; 0x03
    76e0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        }
    }

    if(rtc_read(&tc))
    76e4:	ce 01       	movw	r24, r28
    76e6:	04 96       	adiw	r24, 0x04	; 4
    76e8:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <rtc_read>
    76ec:	88 23       	and	r24, r24
    76ee:	51 f0       	breq	.+20     	; 0x7704 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    76f0:	ce 01       	movw	r24, r28
    76f2:	04 96       	adiw	r24, 0x04	; 4
    76f4:	fa dc       	rcall	.-1548   	; 0x70ea <timegm>
    76f6:	6b 01       	movw	r12, r22
    76f8:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    76fa:	67 2b       	or	r22, r23
    76fc:	68 2b       	or	r22, r24
    76fe:	69 2b       	or	r22, r25
    7700:	c1 f4       	brne	.+48     	; 0x7732 <initialize_clock+0xbc>
    7702:	0a c0       	rjmp	.+20     	; 0x7718 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7704:	85 e6       	ldi	r24, 0x65	; 101
    7706:	96 e0       	ldi	r25, 0x06	; 6
    7708:	a0 e0       	ldi	r26, 0x00	; 0
    770a:	ed b7       	in	r30, 0x3d	; 61
    770c:	fe b7       	in	r31, 0x3e	; 62
    770e:	81 83       	std	Z+1, r24	; 0x01
    7710:	92 83       	std	Z+2, r25	; 0x02
    7712:	a3 83       	std	Z+3, r26	; 0x03
    7714:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7718:	81 e4       	ldi	r24, 0x41	; 65
    771a:	96 e0       	ldi	r25, 0x06	; 6
    771c:	a0 e0       	ldi	r26, 0x00	; 0
    771e:	ed b7       	in	r30, 0x3d	; 61
    7720:	fe b7       	in	r31, 0x3e	; 62
    7722:	81 83       	std	Z+1, r24	; 0x01
    7724:	92 83       	std	Z+2, r25	; 0x02
    7726:	a3 83       	std	Z+3, r26	; 0x03
    7728:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    772c:	c1 2c       	mov	r12, r1
    772e:	d1 2c       	mov	r13, r1
    7730:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7732:	1b a3       	std	Y+35, r17	; 0x23
    7734:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    7736:	1d a2       	std	Y+37, r1	; 0x25
    7738:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    773a:	ce 01       	movw	r24, r28
    773c:	82 96       	adiw	r24, 0x22	; 34
    773e:	30 da       	rcall	.-2976   	; 0x6ba0 <settimezone>

    ts.tv_sec = seconds;
    7740:	ca 8e       	std	Y+26, r12	; 0x1a
    7742:	db 8e       	std	Y+27, r13	; 0x1b
    7744:	ec 8e       	std	Y+28, r14	; 0x1c
    7746:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    7748:	1e 8e       	std	Y+30, r1	; 0x1e
    774a:	1f 8e       	std	Y+31, r1	; 0x1f
    774c:	18 a2       	std	Y+32, r1	; 0x20
    774e:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    7750:	be 01       	movw	r22, r28
    7752:	66 5e       	subi	r22, 0xE6	; 230
    7754:	7f 4f       	sbci	r23, 0xFF	; 255
    7756:	80 e0       	ldi	r24, 0x00	; 0
    7758:	90 e0       	ldi	r25, 0x00	; 0
    775a:	c7 d8       	rcall	.-3698   	; 0x68ea <clock_settime>
}
    775c:	a5 96       	adiw	r28, 0x25	; 37
    775e:	e8 e0       	ldi	r30, 0x08	; 8
    7760:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

00007764 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7764:	a9 e2       	ldi	r26, 0x29	; 41
    7766:	b0 e0       	ldi	r27, 0x00	; 0
    7768:	e8 eb       	ldi	r30, 0xB8	; 184
    776a:	fb e3       	ldi	r31, 0x3B	; 59
    776c:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7770:	ce 01       	movw	r24, r28
    7772:	08 96       	adiw	r24, 0x08	; 8
    7774:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <rtc_read>
    7778:	88 23       	and	r24, r24
    777a:	29 f1       	breq	.+74     	; 0x77c6 <display_clock+0x62>
    {
        seconds = timegm(&tc);
    777c:	ce 01       	movw	r24, r28
    777e:	08 96       	adiw	r24, 0x08	; 8
    7780:	b4 dc       	rcall	.-1688   	; 0x70ea <timegm>
    7782:	6e a3       	std	Y+38, r22	; 0x26
    7784:	7f a3       	std	Y+39, r23	; 0x27
    7786:	88 a7       	std	Y+40, r24	; 0x28
    7788:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    778a:	ed b7       	in	r30, 0x3d	; 61
    778c:	fe b7       	in	r31, 0x3e	; 62
    778e:	64 83       	std	Z+4, r22	; 0x04
    7790:	75 83       	std	Z+5, r23	; 0x05
    7792:	86 83       	std	Z+6, r24	; 0x06
    7794:	97 83       	std	Z+7, r25	; 0x07
    7796:	8f e2       	ldi	r24, 0x2F	; 47
    7798:	96 e0       	ldi	r25, 0x06	; 6
    779a:	a0 e0       	ldi	r26, 0x00	; 0
    779c:	81 83       	std	Z+1, r24	; 0x01
    779e:	92 83       	std	Z+2, r25	; 0x02
    77a0:	a3 83       	std	Z+3, r26	; 0x03
    77a2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    77a6:	ce 01       	movw	r24, r28
    77a8:	08 96       	adiw	r24, 0x08	; 8
    77aa:	50 df       	rcall	.-352    	; 0x764c <asctime>
    77ac:	ed b7       	in	r30, 0x3d	; 61
    77ae:	fe b7       	in	r31, 0x3e	; 62
    77b0:	95 83       	std	Z+5, r25	; 0x05
    77b2:	84 83       	std	Z+4, r24	; 0x04
    77b4:	8e e1       	ldi	r24, 0x1E	; 30
    77b6:	96 e0       	ldi	r25, 0x06	; 6
    77b8:	a0 e0       	ldi	r26, 0x00	; 0
    77ba:	81 83       	std	Z+1, r24	; 0x01
    77bc:	92 83       	std	Z+2, r25	; 0x02
    77be:	a3 83       	std	Z+3, r26	; 0x03
    77c0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    77c4:	0a c0       	rjmp	.+20     	; 0x77da <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    77c6:	8d e0       	ldi	r24, 0x0D	; 13
    77c8:	96 e0       	ldi	r25, 0x06	; 6
    77ca:	a0 e0       	ldi	r26, 0x00	; 0
    77cc:	ed b7       	in	r30, 0x3d	; 61
    77ce:	fe b7       	in	r31, 0x3e	; 62
    77d0:	81 83       	std	Z+1, r24	; 0x01
    77d2:	92 83       	std	Z+2, r25	; 0x02
    77d4:	a3 83       	std	Z+3, r26	; 0x03
    77d6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    77da:	be 01       	movw	r22, r28
    77dc:	62 5e       	subi	r22, 0xE2	; 226
    77de:	7f 4f       	sbci	r23, 0xFF	; 255
    77e0:	80 e0       	ldi	r24, 0x00	; 0
    77e2:	90 e0       	ldi	r25, 0x00	; 0
    77e4:	0e 94 cc 31 	call	0x6398	; 0x6398 <clock_gettime>
    seconds = ts.tv_sec;
    77e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    77ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    77ec:	a8 a1       	ldd	r26, Y+32	; 0x20
    77ee:	b9 a1       	ldd	r27, Y+33	; 0x21
    77f0:	8e a3       	std	Y+38, r24	; 0x26
    77f2:	9f a3       	std	Y+39, r25	; 0x27
    77f4:	a8 a7       	std	Y+40, r26	; 0x28
    77f6:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    77f8:	ed b7       	in	r30, 0x3d	; 61
    77fa:	fe b7       	in	r31, 0x3e	; 62
    77fc:	84 83       	std	Z+4, r24	; 0x04
    77fe:	95 83       	std	Z+5, r25	; 0x05
    7800:	a6 83       	std	Z+6, r26	; 0x06
    7802:	b7 83       	std	Z+7, r27	; 0x07
    7804:	8b ef       	ldi	r24, 0xFB	; 251
    7806:	95 e0       	ldi	r25, 0x05	; 5
    7808:	a0 e0       	ldi	r26, 0x00	; 0
    780a:	81 83       	std	Z+1, r24	; 0x01
    780c:	92 83       	std	Z+2, r25	; 0x02
    780e:	a3 83       	std	Z+3, r26	; 0x03
    7810:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7814:	ce 01       	movw	r24, r28
    7816:	86 96       	adiw	r24, 0x26	; 38
    7818:	a9 d9       	rcall	.-3246   	; 0x6b6c <gmtime>
    781a:	18 df       	rcall	.-464    	; 0x764c <asctime>
    781c:	ed b7       	in	r30, 0x3d	; 61
    781e:	fe b7       	in	r31, 0x3e	; 62
    7820:	95 83       	std	Z+5, r25	; 0x05
    7822:	84 83       	std	Z+4, r24	; 0x04
    7824:	8a ee       	ldi	r24, 0xEA	; 234
    7826:	95 e0       	ldi	r25, 0x05	; 5
    7828:	a0 e0       	ldi	r26, 0x00	; 0
    782a:	81 83       	std	Z+1, r24	; 0x01
    782c:	92 83       	std	Z+2, r25	; 0x02
    782e:	a3 83       	std	Z+3, r26	; 0x03
    7830:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
}
    7834:	a9 96       	adiw	r28, 0x29	; 41
    7836:	e2 e0       	ldi	r30, 0x02	; 2
    7838:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

0000783c <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    783c:	fc 01       	movw	r30, r24
    783e:	84 81       	ldd	r24, Z+4	; 0x04
    7840:	95 81       	ldd	r25, Z+5	; 0x05
    7842:	00 97       	sbiw	r24, 0x00	; 0
    7844:	79 f0       	breq	.+30     	; 0x7864 <_putc_buffer_fn+0x28>
    7846:	66 23       	and	r22, r22
    7848:	69 f0       	breq	.+26     	; 0x7864 <_putc_buffer_fn+0x28>
    784a:	01 97       	sbiw	r24, 0x01	; 1
    784c:	95 83       	std	Z+5, r25	; 0x05
    784e:	84 83       	std	Z+4, r24	; 0x04
    7850:	86 81       	ldd	r24, Z+6	; 0x06
    7852:	97 81       	ldd	r25, Z+7	; 0x07
    7854:	01 96       	adiw	r24, 0x01	; 1
    7856:	97 83       	std	Z+7, r25	; 0x07
    7858:	86 83       	std	Z+6, r24	; 0x06
    785a:	a2 81       	ldd	r26, Z+2	; 0x02
    785c:	b3 81       	ldd	r27, Z+3	; 0x03
    785e:	6d 93       	st	X+, r22
    7860:	b3 83       	std	Z+3, r27	; 0x03
    7862:	a2 83       	std	Z+2, r26	; 0x02
    7864:	02 80       	ldd	r0, Z+2	; 0x02
    7866:	f3 81       	ldd	r31, Z+3	; 0x03
    7868:	e0 2d       	mov	r30, r0
    786a:	10 82       	st	Z, r1
    786c:	08 95       	ret

0000786e <_putc_fn>:
    786e:	fc 01       	movw	r30, r24
    7870:	26 81       	ldd	r18, Z+6	; 0x06
    7872:	37 81       	ldd	r19, Z+7	; 0x07
    7874:	2f 5f       	subi	r18, 0xFF	; 255
    7876:	3f 4f       	sbci	r19, 0xFF	; 255
    7878:	37 83       	std	Z+7, r19	; 0x07
    787a:	26 83       	std	Z+6, r18	; 0x06
    787c:	86 2f       	mov	r24, r22
    787e:	90 e0       	ldi	r25, 0x00	; 0
    7880:	0c 94 48 75 	jmp	0xea90	; 0xea90 <putchar>
    7884:	08 95       	ret

00007886 <bin2num>:
    7886:	a0 e0       	ldi	r26, 0x00	; 0
    7888:	b0 e0       	ldi	r27, 0x00	; 0
    788a:	e9 e4       	ldi	r30, 0x49	; 73
    788c:	fc e3       	ldi	r31, 0x3C	; 60
    788e:	0c 94 63 e3 	jmp	0x1c6c6	; 0x1c6c6 <__prologue_saves__+0xe>
    7892:	ea 01       	movw	r28, r20
    7894:	53 e0       	ldi	r21, 0x03	; 3
    7896:	ee 0c       	add	r14, r14
    7898:	ff 1c       	adc	r15, r15
    789a:	5a 95       	dec	r21
    789c:	e1 f7       	brne	.-8      	; 0x7896 <bin2num+0x10>
    789e:	fc 01       	movw	r30, r24
    78a0:	af 01       	movw	r20, r30
    78a2:	48 1b       	sub	r20, r24
    78a4:	59 0b       	sbc	r21, r25
    78a6:	c4 17       	cp	r28, r20
    78a8:	d5 07       	cpc	r29, r21
    78aa:	14 f0       	brlt	.+4      	; 0x78b0 <bin2num+0x2a>
    78ac:	11 92       	st	Z+, r1
    78ae:	f8 cf       	rjmp	.-16     	; 0x78a0 <bin2num+0x1a>
    78b0:	41 e0       	ldi	r20, 0x01	; 1
    78b2:	e4 1a       	sub	r14, r20
    78b4:	f1 08       	sbc	r15, r1
    78b6:	5b 01       	movw	r10, r22
    78b8:	42 e0       	ldi	r20, 0x02	; 2
    78ba:	a4 1a       	sub	r10, r20
    78bc:	b1 08       	sbc	r11, r1
    78be:	f7 fc       	sbrc	r15, 7
    78c0:	3b c0       	rjmp	.+118    	; 0x7938 <bin2num+0xb2>
    78c2:	f7 01       	movw	r30, r14
    78c4:	43 e0       	ldi	r20, 0x03	; 3
    78c6:	f5 95       	asr	r31
    78c8:	e7 95       	ror	r30
    78ca:	4a 95       	dec	r20
    78cc:	e1 f7       	brne	.-8      	; 0x78c6 <bin2num+0x40>
    78ce:	e0 0f       	add	r30, r16
    78d0:	f1 1f       	adc	r31, r17
    78d2:	40 81       	ld	r20, Z
    78d4:	50 e0       	ldi	r21, 0x00	; 0
    78d6:	f7 01       	movw	r30, r14
    78d8:	e7 70       	andi	r30, 0x07	; 7
    78da:	ff 27       	eor	r31, r31
    78dc:	02 c0       	rjmp	.+4      	; 0x78e2 <bin2num+0x5c>
    78de:	55 95       	asr	r21
    78e0:	47 95       	ror	r20
    78e2:	ea 95       	dec	r30
    78e4:	e2 f7       	brpl	.-8      	; 0x78de <bin2num+0x58>
    78e6:	41 70       	andi	r20, 0x01	; 1
    78e8:	55 27       	eor	r21, r21
    78ea:	dc 01       	movw	r26, r24
    78ec:	e0 e0       	ldi	r30, 0x00	; 0
    78ee:	f0 e0       	ldi	r31, 0x00	; 0
    78f0:	ec 17       	cp	r30, r28
    78f2:	fd 07       	cpc	r31, r29
    78f4:	ec f4       	brge	.+58     	; 0x7930 <bin2num+0xaa>
    78f6:	ea 15       	cp	r30, r10
    78f8:	fb 05       	cpc	r31, r11
    78fa:	4c f0       	brlt	.+18     	; 0x790e <bin2num+0x88>
    78fc:	dc 01       	movw	r26, r24
    78fe:	ae 0f       	add	r26, r30
    7900:	bf 1f       	adc	r27, r31
    7902:	1c 92       	st	X, r1
    7904:	41 e0       	ldi	r20, 0x01	; 1
    7906:	e4 1a       	sub	r14, r20
    7908:	f1 08       	sbc	r15, r1
    790a:	ef 01       	movw	r28, r30
    790c:	d8 cf       	rjmp	.-80     	; 0x78be <bin2num+0x38>
    790e:	9c 90       	ld	r9, X
    7910:	99 0c       	add	r9, r9
    7912:	94 2a       	or	r9, r20
    7914:	49 2d       	mov	r20, r9
    7916:	50 e0       	ldi	r21, 0x00	; 0
    7918:	42 17       	cp	r20, r18
    791a:	53 07       	cpc	r21, r19
    791c:	24 f0       	brlt	.+8      	; 0x7926 <bin2num+0xa0>
    791e:	92 1a       	sub	r9, r18
    7920:	41 e0       	ldi	r20, 0x01	; 1
    7922:	50 e0       	ldi	r21, 0x00	; 0
    7924:	02 c0       	rjmp	.+4      	; 0x792a <bin2num+0xa4>
    7926:	40 e0       	ldi	r20, 0x00	; 0
    7928:	50 e0       	ldi	r21, 0x00	; 0
    792a:	9d 92       	st	X+, r9
    792c:	31 96       	adiw	r30, 0x01	; 1
    792e:	e0 cf       	rjmp	.-64     	; 0x78f0 <bin2num+0x6a>
    7930:	41 15       	cp	r20, r1
    7932:	51 05       	cpc	r21, r1
    7934:	01 f7       	brne	.-64     	; 0x78f6 <bin2num+0x70>
    7936:	e2 cf       	rjmp	.-60     	; 0x78fc <bin2num+0x76>
    7938:	fc 01       	movw	r30, r24
    793a:	9f 01       	movw	r18, r30
    793c:	28 1b       	sub	r18, r24
    793e:	39 0b       	sbc	r19, r25
    7940:	2c 17       	cp	r18, r28
    7942:	3d 07       	cpc	r19, r29
    7944:	4c f4       	brge	.+18     	; 0x7958 <bin2num+0xd2>
    7946:	20 81       	ld	r18, Z
    7948:	2a 30       	cpi	r18, 0x0A	; 10
    794a:	10 f4       	brcc	.+4      	; 0x7950 <bin2num+0xca>
    794c:	20 5d       	subi	r18, 0xD0	; 208
    794e:	01 c0       	rjmp	.+2      	; 0x7952 <bin2num+0xcc>
    7950:	29 5a       	subi	r18, 0xA9	; 169
    7952:	20 83       	st	Z, r18
    7954:	31 96       	adiw	r30, 0x01	; 1
    7956:	f1 cf       	rjmp	.-30     	; 0x793a <bin2num+0xb4>
    7958:	9e 01       	movw	r18, r28
    795a:	d7 ff       	sbrs	r29, 7
    795c:	02 c0       	rjmp	.+4      	; 0x7962 <bin2num+0xdc>
    795e:	20 e0       	ldi	r18, 0x00	; 0
    7960:	30 e0       	ldi	r19, 0x00	; 0
    7962:	c1 14       	cp	r12, r1
    7964:	d1 04       	cpc	r13, r1
    7966:	61 f0       	breq	.+24     	; 0x7980 <bin2num+0xfa>
    7968:	61 50       	subi	r22, 0x01	; 1
    796a:	71 09       	sbc	r23, r1
    796c:	26 17       	cp	r18, r22
    796e:	37 07       	cpc	r19, r23
    7970:	3c f4       	brge	.+14     	; 0x7980 <bin2num+0xfa>
    7972:	fc 01       	movw	r30, r24
    7974:	e2 0f       	add	r30, r18
    7976:	f3 1f       	adc	r31, r19
    7978:	c0 82       	st	Z, r12
    797a:	21 96       	adiw	r28, 0x01	; 1
    797c:	2f 5f       	subi	r18, 0xFF	; 255
    797e:	3f 4f       	sbci	r19, 0xFF	; 255
    7980:	fc 01       	movw	r30, r24
    7982:	e2 0f       	add	r30, r18
    7984:	f3 1f       	adc	r31, r19
    7986:	10 82       	st	Z, r1
    7988:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <reverse>
    798c:	ce 01       	movw	r24, r28
    798e:	cd b7       	in	r28, 0x3d	; 61
    7990:	de b7       	in	r29, 0x3e	; 62
    7992:	eb e0       	ldi	r30, 0x0B	; 11
    7994:	0c 94 7f e3 	jmp	0x1c6fe	; 0x1c6fe <__epilogue_restores__+0xe>

00007998 <pch>:
    7998:	fc 01       	movw	r30, r24
    799a:	22 81       	ldd	r18, Z+2	; 0x02
    799c:	33 81       	ldd	r19, Z+3	; 0x03
    799e:	44 81       	ldd	r20, Z+4	; 0x04
    79a0:	55 81       	ldd	r21, Z+5	; 0x05
    79a2:	80 81       	ld	r24, Z
    79a4:	91 81       	ldd	r25, Z+1	; 0x01
    79a6:	24 17       	cp	r18, r20
    79a8:	35 07       	cpc	r19, r21
    79aa:	54 f4       	brge	.+20     	; 0x79c0 <pch+0x28>
    79ac:	a9 01       	movw	r20, r18
    79ae:	4f 5f       	subi	r20, 0xFF	; 255
    79b0:	5f 4f       	sbci	r21, 0xFF	; 255
    79b2:	53 83       	std	Z+3, r21	; 0x03
    79b4:	42 83       	std	Z+2, r20	; 0x02
    79b6:	dc 01       	movw	r26, r24
    79b8:	a2 0f       	add	r26, r18
    79ba:	b3 1f       	adc	r27, r19
    79bc:	6c 93       	st	X, r22
    79be:	04 c0       	rjmp	.+8      	; 0x79c8 <pch+0x30>
    79c0:	dc 01       	movw	r26, r24
    79c2:	a2 0f       	add	r26, r18
    79c4:	b3 1f       	adc	r27, r19
    79c6:	1c 92       	st	X, r1
    79c8:	82 81       	ldd	r24, Z+2	; 0x02
    79ca:	93 81       	ldd	r25, Z+3	; 0x03
    79cc:	08 95       	ret

000079ce <p_ntoa>:
    79ce:	af 92       	push	r10
    79d0:	cf 92       	push	r12
    79d2:	df 92       	push	r13
    79d4:	ef 92       	push	r14
    79d6:	ff 92       	push	r15
    79d8:	0f 93       	push	r16
    79da:	1f 93       	push	r17
    79dc:	cf 93       	push	r28
    79de:	df 93       	push	r29
    79e0:	dc 01       	movw	r26, r24
    79e2:	eb 01       	movw	r28, r22
    79e4:	fa 01       	movw	r30, r20
    79e6:	b9 01       	movw	r22, r18
    79e8:	98 01       	movw	r18, r16
    79ea:	a6 01       	movw	r20, r12
    79ec:	9a 2d       	mov	r25, r10
    79ee:	a5 fa       	bst	r10, 5
    79f0:	cc 24       	eor	r12, r12
    79f2:	c0 f8       	bld	r12, 0
    79f4:	a6 fc       	sbrc	r10, 6
    79f6:	07 c0       	rjmp	.+14     	; 0x7a06 <p_ntoa+0x38>
    79f8:	a2 fc       	sbrc	r10, 2
    79fa:	08 c0       	rjmp	.+16     	; 0x7a0c <p_ntoa+0x3e>
    79fc:	a4 fe       	sbrs	r10, 4
    79fe:	09 c0       	rjmp	.+18     	; 0x7a12 <p_ntoa+0x44>
    7a00:	00 e2       	ldi	r16, 0x20	; 32
    7a02:	10 e0       	ldi	r17, 0x00	; 0
    7a04:	08 c0       	rjmp	.+16     	; 0x7a16 <p_ntoa+0x48>
    7a06:	0d e2       	ldi	r16, 0x2D	; 45
    7a08:	10 e0       	ldi	r17, 0x00	; 0
    7a0a:	05 c0       	rjmp	.+10     	; 0x7a16 <p_ntoa+0x48>
    7a0c:	0b e2       	ldi	r16, 0x2B	; 43
    7a0e:	10 e0       	ldi	r17, 0x00	; 0
    7a10:	02 c0       	rjmp	.+4      	; 0x7a16 <p_ntoa+0x48>
    7a12:	00 e0       	ldi	r16, 0x00	; 0
    7a14:	10 e0       	ldi	r17, 0x00	; 0
    7a16:	95 ff       	sbrs	r25, 5
    7a18:	04 c0       	rjmp	.+8      	; 0x7a22 <p_ntoa+0x54>
    7a1a:	89 2f       	mov	r24, r25
    7a1c:	8a 70       	andi	r24, 0x0A	; 10
    7a1e:	09 f0       	breq	.+2      	; 0x7a22 <p_ntoa+0x54>
    7a20:	c1 2c       	mov	r12, r1
    7a22:	c0 fa       	bst	r12, 0
    7a24:	95 f9       	bld	r25, 5
    7a26:	89 2f       	mov	r24, r25
    7a28:	82 70       	andi	r24, 0x02	; 2
    7a2a:	c8 2e       	mov	r12, r24
    7a2c:	91 fd       	sbrc	r25, 1
    7a2e:	02 c0       	rjmp	.+4      	; 0x7a34 <p_ntoa+0x66>
    7a30:	40 e0       	ldi	r20, 0x00	; 0
    7a32:	50 e0       	ldi	r21, 0x00	; 0
    7a34:	89 2f       	mov	r24, r25
    7a36:	83 70       	andi	r24, 0x03	; 3
    7a38:	11 f4       	brne	.+4      	; 0x7a3e <p_ntoa+0x70>
    7a3a:	41 e0       	ldi	r20, 0x01	; 1
    7a3c:	50 e0       	ldi	r21, 0x00	; 0
    7a3e:	90 ff       	sbrs	r25, 0
    7a40:	0c c0       	rjmp	.+24     	; 0x7a5a <p_ntoa+0x8c>
    7a42:	95 fd       	sbrc	r25, 5
    7a44:	05 c0       	rjmp	.+10     	; 0x7a50 <p_ntoa+0x82>
    7a46:	c1 10       	cpse	r12, r1
    7a48:	08 c0       	rjmp	.+16     	; 0x7a5a <p_ntoa+0x8c>
    7a4a:	41 e0       	ldi	r20, 0x01	; 1
    7a4c:	50 e0       	ldi	r21, 0x00	; 0
    7a4e:	05 c0       	rjmp	.+10     	; 0x7a5a <p_ntoa+0x8c>
    7a50:	94 75       	andi	r25, 0x54	; 84
    7a52:	a7 01       	movw	r20, r14
    7a54:	11 f0       	breq	.+4      	; 0x7a5a <p_ntoa+0x8c>
    7a56:	41 50       	subi	r20, 0x01	; 1
    7a58:	51 09       	sbc	r21, r1
    7a5a:	68 01       	movw	r12, r16
    7a5c:	7e 01       	movw	r14, r28
    7a5e:	8d 01       	movw	r16, r26
    7a60:	cf 01       	movw	r24, r30
    7a62:	11 df       	rcall	.-478    	; 0x7886 <bin2num>
    7a64:	df 91       	pop	r29
    7a66:	cf 91       	pop	r28
    7a68:	1f 91       	pop	r17
    7a6a:	0f 91       	pop	r16
    7a6c:	ff 90       	pop	r15
    7a6e:	ef 90       	pop	r14
    7a70:	df 90       	pop	r13
    7a72:	cf 90       	pop	r12
    7a74:	af 90       	pop	r10
    7a76:	08 95       	ret

00007a78 <p_ftoa>:
    7a78:	aa e0       	ldi	r26, 0x0A	; 10
    7a7a:	b0 e0       	ldi	r27, 0x00	; 0
    7a7c:	e2 e4       	ldi	r30, 0x42	; 66
    7a7e:	fd e3       	ldi	r31, 0x3D	; 61
    7a80:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
    7a84:	4b 01       	movw	r8, r22
    7a86:	5c 01       	movw	r10, r24
    7a88:	1a 01       	movw	r2, r20
    7a8a:	28 01       	movw	r4, r16
    7a8c:	c6 fa       	bst	r12, 6
    7a8e:	11 27       	eor	r17, r17
    7a90:	10 f9       	bld	r17, 0
    7a92:	5a 83       	std	Y+2, r21	; 0x02
    7a94:	49 83       	std	Y+1, r20	; 0x01
    7a96:	1c 82       	std	Y+4, r1	; 0x04
    7a98:	1b 82       	std	Y+3, r1	; 0x03
    7a9a:	21 50       	subi	r18, 0x01	; 1
    7a9c:	31 09       	sbc	r19, r1
    7a9e:	3e 83       	std	Y+6, r19	; 0x06
    7aa0:	2d 83       	std	Y+5, r18	; 0x05
    7aa2:	fa 01       	movw	r30, r20
    7aa4:	10 82       	st	Z, r1
    7aa6:	20 e0       	ldi	r18, 0x00	; 0
    7aa8:	30 e0       	ldi	r19, 0x00	; 0
    7aaa:	a9 01       	movw	r20, r18
    7aac:	0e 94 1a e4 	call	0x1c834	; 0x1c834 <__cmpsf2>
    7ab0:	87 ff       	sbrs	r24, 7
    7ab2:	05 c0       	rjmp	.+10     	; 0x7abe <p_ftoa+0x46>
    7ab4:	b7 fa       	bst	r11, 7
    7ab6:	b0 94       	com	r11
    7ab8:	b7 f8       	bld	r11, 7
    7aba:	b0 94       	com	r11
    7abc:	11 e0       	ldi	r17, 0x01	; 1
    7abe:	10 fb       	bst	r17, 0
    7ac0:	c6 f8       	bld	r12, 6
    7ac2:	c6 fe       	sbrs	r12, 6
    7ac4:	02 c0       	rjmp	.+4      	; 0x7aca <p_ftoa+0x52>
    7ac6:	6d e2       	ldi	r22, 0x2D	; 45
    7ac8:	07 c0       	rjmp	.+14     	; 0x7ad8 <p_ftoa+0x60>
    7aca:	c2 fe       	sbrs	r12, 2
    7acc:	02 c0       	rjmp	.+4      	; 0x7ad2 <p_ftoa+0x5a>
    7ace:	6b e2       	ldi	r22, 0x2B	; 43
    7ad0:	03 c0       	rjmp	.+6      	; 0x7ad8 <p_ftoa+0x60>
    7ad2:	c4 fe       	sbrs	r12, 4
    7ad4:	04 c0       	rjmp	.+8      	; 0x7ade <p_ftoa+0x66>
    7ad6:	60 e2       	ldi	r22, 0x20	; 32
    7ad8:	ce 01       	movw	r24, r28
    7ada:	01 96       	adiw	r24, 0x01	; 1
    7adc:	5d df       	rcall	.-326    	; 0x7998 <pch>
    7ade:	37 01       	movw	r6, r14
    7ae0:	f7 fe       	sbrs	r15, 7
    7ae2:	02 c0       	rjmp	.+4      	; 0x7ae8 <p_ftoa+0x70>
    7ae4:	61 2c       	mov	r6, r1
    7ae6:	71 2c       	mov	r7, r1
    7ae8:	20 e0       	ldi	r18, 0x00	; 0
    7aea:	30 e0       	ldi	r19, 0x00	; 0
    7aec:	a9 01       	movw	r20, r18
    7aee:	c5 01       	movw	r24, r10
    7af0:	b4 01       	movw	r22, r8
    7af2:	0e 94 1a e4 	call	0x1c834	; 0x1c834 <__cmpsf2>
    7af6:	88 23       	and	r24, r24
    7af8:	d1 f1       	breq	.+116    	; 0x7b6e <p_ftoa+0xf6>
    7afa:	c1 fe       	sbrs	r12, 1
    7afc:	11 c0       	rjmp	.+34     	; 0x7b20 <p_ftoa+0xa8>
    7afe:	83 01       	movw	r16, r6
    7b00:	60 e0       	ldi	r22, 0x00	; 0
    7b02:	70 e0       	ldi	r23, 0x00	; 0
    7b04:	80 e0       	ldi	r24, 0x00	; 0
    7b06:	9f e3       	ldi	r25, 0x3F	; 63
    7b08:	01 15       	cp	r16, r1
    7b0a:	11 05       	cpc	r17, r1
    7b0c:	69 f0       	breq	.+26     	; 0x7b28 <p_ftoa+0xb0>
    7b0e:	20 e0       	ldi	r18, 0x00	; 0
    7b10:	30 e0       	ldi	r19, 0x00	; 0
    7b12:	40 e2       	ldi	r20, 0x20	; 32
    7b14:	51 e4       	ldi	r21, 0x41	; 65
    7b16:	0e 94 1e e4 	call	0x1c83c	; 0x1c83c <__divsf3>
    7b1a:	01 50       	subi	r16, 0x01	; 1
    7b1c:	11 09       	sbc	r17, r1
    7b1e:	f4 cf       	rjmp	.-24     	; 0x7b08 <p_ftoa+0x90>
    7b20:	60 e0       	ldi	r22, 0x00	; 0
    7b22:	70 e0       	ldi	r23, 0x00	; 0
    7b24:	80 e0       	ldi	r24, 0x00	; 0
    7b26:	9f e3       	ldi	r25, 0x3F	; 63
    7b28:	9b 01       	movw	r18, r22
    7b2a:	ac 01       	movw	r20, r24
    7b2c:	c5 01       	movw	r24, r10
    7b2e:	b4 01       	movw	r22, r8
    7b30:	0e 94 b6 e3 	call	0x1c76c	; 0x1c76c <__addsf3>
    7b34:	4b 01       	movw	r8, r22
    7b36:	5c 01       	movw	r10, r24
    7b38:	ee 24       	eor	r14, r14
    7b3a:	e3 94       	inc	r14
    7b3c:	f1 2c       	mov	r15, r1
    7b3e:	20 e0       	ldi	r18, 0x00	; 0
    7b40:	30 e0       	ldi	r19, 0x00	; 0
    7b42:	40 e2       	ldi	r20, 0x20	; 32
    7b44:	51 e4       	ldi	r21, 0x41	; 65
    7b46:	c5 01       	movw	r24, r10
    7b48:	b4 01       	movw	r22, r8
    7b4a:	0e 94 69 e5 	call	0x1cad2	; 0x1cad2 <__gesf2>
    7b4e:	87 fd       	sbrc	r24, 7
    7b50:	11 c0       	rjmp	.+34     	; 0x7b74 <p_ftoa+0xfc>
    7b52:	ff ef       	ldi	r31, 0xFF	; 255
    7b54:	ef 1a       	sub	r14, r31
    7b56:	ff 0a       	sbc	r15, r31
    7b58:	20 e0       	ldi	r18, 0x00	; 0
    7b5a:	30 e0       	ldi	r19, 0x00	; 0
    7b5c:	40 e2       	ldi	r20, 0x20	; 32
    7b5e:	51 e4       	ldi	r21, 0x41	; 65
    7b60:	c5 01       	movw	r24, r10
    7b62:	b4 01       	movw	r22, r8
    7b64:	0e 94 1e e4 	call	0x1c83c	; 0x1c83c <__divsf3>
    7b68:	4b 01       	movw	r8, r22
    7b6a:	5c 01       	movw	r10, r24
    7b6c:	e8 cf       	rjmp	.-48     	; 0x7b3e <p_ftoa+0xc6>
    7b6e:	ee 24       	eor	r14, r14
    7b70:	e3 94       	inc	r14
    7b72:	f1 2c       	mov	r15, r1
    7b74:	8c 2d       	mov	r24, r12
    7b76:	88 72       	andi	r24, 0x28	; 40
    7b78:	80 32       	cpi	r24, 0x20	; 32
    7b7a:	c1 f4       	brne	.+48     	; 0x7bac <p_ftoa+0x134>
    7b7c:	82 01       	movw	r16, r4
    7b7e:	0e 19       	sub	r16, r14
    7b80:	1f 09       	sbc	r17, r15
    7b82:	8b 81       	ldd	r24, Y+3	; 0x03
    7b84:	9c 81       	ldd	r25, Y+4	; 0x04
    7b86:	08 1b       	sub	r16, r24
    7b88:	19 0b       	sbc	r17, r25
    7b8a:	c1 fe       	sbrs	r12, 1
    7b8c:	07 c0       	rjmp	.+14     	; 0x7b9c <p_ftoa+0x124>
    7b8e:	61 14       	cp	r6, r1
    7b90:	71 04       	cpc	r7, r1
    7b92:	21 f0       	breq	.+8      	; 0x7b9c <p_ftoa+0x124>
    7b94:	06 19       	sub	r16, r6
    7b96:	17 09       	sbc	r17, r7
    7b98:	01 50       	subi	r16, 0x01	; 1
    7b9a:	11 09       	sbc	r17, r1
    7b9c:	10 16       	cp	r1, r16
    7b9e:	11 06       	cpc	r1, r17
    7ba0:	2c f4       	brge	.+10     	; 0x7bac <p_ftoa+0x134>
    7ba2:	60 e3       	ldi	r22, 0x30	; 48
    7ba4:	ce 01       	movw	r24, r28
    7ba6:	01 96       	adiw	r24, 0x01	; 1
    7ba8:	f7 de       	rcall	.-530    	; 0x7998 <pch>
    7baa:	f6 cf       	rjmp	.-20     	; 0x7b98 <p_ftoa+0x120>
    7bac:	c5 01       	movw	r24, r10
    7bae:	b4 01       	movw	r22, r8
    7bb0:	0e 94 86 e4 	call	0x1c90c	; 0x1c90c <__fixsfsi>
    7bb4:	6f 83       	std	Y+7, r22	; 0x07
    7bb6:	78 87       	std	Y+8, r23	; 0x08
    7bb8:	89 87       	std	Y+9, r24	; 0x09
    7bba:	9a 87       	std	Y+10, r25	; 0x0a
    7bbc:	6f 81       	ldd	r22, Y+7	; 0x07
    7bbe:	60 5d       	subi	r22, 0xD0	; 208
    7bc0:	ce 01       	movw	r24, r28
    7bc2:	01 96       	adiw	r24, 0x01	; 1
    7bc4:	e9 de       	rcall	.-558    	; 0x7998 <pch>
    7bc6:	2f 81       	ldd	r18, Y+7	; 0x07
    7bc8:	38 85       	ldd	r19, Y+8	; 0x08
    7bca:	b9 01       	movw	r22, r18
    7bcc:	33 0f       	add	r19, r19
    7bce:	88 0b       	sbc	r24, r24
    7bd0:	99 0b       	sbc	r25, r25
    7bd2:	0e 94 b9 e4 	call	0x1c972	; 0x1c972 <__floatsisf>
    7bd6:	9b 01       	movw	r18, r22
    7bd8:	ac 01       	movw	r20, r24
    7bda:	c5 01       	movw	r24, r10
    7bdc:	b4 01       	movw	r22, r8
    7bde:	0e 94 b5 e3 	call	0x1c76a	; 0x1c76a <__subsf3>
    7be2:	31 e0       	ldi	r19, 0x01	; 1
    7be4:	e3 1a       	sub	r14, r19
    7be6:	f1 08       	sbc	r15, r1
    7be8:	20 e0       	ldi	r18, 0x00	; 0
    7bea:	30 e0       	ldi	r19, 0x00	; 0
    7bec:	40 e2       	ldi	r20, 0x20	; 32
    7bee:	51 e4       	ldi	r21, 0x41	; 65
    7bf0:	0e 94 6d e5 	call	0x1cada	; 0x1cada <__mulsf3>
    7bf4:	4b 01       	movw	r8, r22
    7bf6:	5c 01       	movw	r10, r24
    7bf8:	e1 14       	cp	r14, r1
    7bfa:	f1 04       	cpc	r15, r1
    7bfc:	b9 f6       	brne	.-82     	; 0x7bac <p_ftoa+0x134>
    7bfe:	c1 fc       	sbrc	r12, 1
    7c00:	10 c0       	rjmp	.+32     	; 0x7c22 <p_ftoa+0x1aa>
    7c02:	60 e0       	ldi	r22, 0x00	; 0
    7c04:	ce 01       	movw	r24, r28
    7c06:	01 96       	adiw	r24, 0x01	; 1
    7c08:	c7 de       	rcall	.-626    	; 0x7998 <pch>
    7c0a:	f1 01       	movw	r30, r2
    7c0c:	01 90       	ld	r0, Z+
    7c0e:	00 20       	and	r0, r0
    7c10:	e9 f7       	brne	.-6      	; 0x7c0c <p_ftoa+0x194>
    7c12:	31 97       	sbiw	r30, 0x01	; 1
    7c14:	cf 01       	movw	r24, r30
    7c16:	82 19       	sub	r24, r2
    7c18:	93 09       	sbc	r25, r3
    7c1a:	2a 96       	adiw	r28, 0x0a	; 10
    7c1c:	e2 e1       	ldi	r30, 0x12	; 18
    7c1e:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>
    7c22:	61 14       	cp	r6, r1
    7c24:	71 04       	cpc	r7, r1
    7c26:	69 f3       	breq	.-38     	; 0x7c02 <p_ftoa+0x18a>
    7c28:	6e e2       	ldi	r22, 0x2E	; 46
    7c2a:	ce 01       	movw	r24, r28
    7c2c:	01 96       	adiw	r24, 0x01	; 1
    7c2e:	b4 de       	rcall	.-664    	; 0x7998 <pch>
    7c30:	c5 01       	movw	r24, r10
    7c32:	b4 01       	movw	r22, r8
    7c34:	0e 94 86 e4 	call	0x1c90c	; 0x1c90c <__fixsfsi>
    7c38:	6b 01       	movw	r12, r22
    7c3a:	7c 01       	movw	r14, r24
    7c3c:	07 2e       	mov	r0, r23
    7c3e:	00 0c       	add	r0, r0
    7c40:	88 0b       	sbc	r24, r24
    7c42:	99 0b       	sbc	r25, r25
    7c44:	0e 94 b9 e4 	call	0x1c972	; 0x1c972 <__floatsisf>
    7c48:	9b 01       	movw	r18, r22
    7c4a:	ac 01       	movw	r20, r24
    7c4c:	c5 01       	movw	r24, r10
    7c4e:	b4 01       	movw	r22, r8
    7c50:	0e 94 b5 e3 	call	0x1c76a	; 0x1c76a <__subsf3>
    7c54:	4b 01       	movw	r8, r22
    7c56:	5c 01       	movw	r10, r24
    7c58:	b6 01       	movw	r22, r12
    7c5a:	60 5d       	subi	r22, 0xD0	; 208
    7c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    7c5e:	ce 01       	movw	r24, r28
    7c60:	01 96       	adiw	r24, 0x01	; 1
    7c62:	9a de       	rcall	.-716    	; 0x7998 <pch>
    7c64:	81 e0       	ldi	r24, 0x01	; 1
    7c66:	68 1a       	sub	r6, r24
    7c68:	71 08       	sbc	r7, r1
    7c6a:	20 e0       	ldi	r18, 0x00	; 0
    7c6c:	30 e0       	ldi	r19, 0x00	; 0
    7c6e:	40 e2       	ldi	r20, 0x20	; 32
    7c70:	51 e4       	ldi	r21, 0x41	; 65
    7c72:	c5 01       	movw	r24, r10
    7c74:	b4 01       	movw	r22, r8
    7c76:	0e 94 6d e5 	call	0x1cada	; 0x1cada <__mulsf3>
    7c7a:	4b 01       	movw	r8, r22
    7c7c:	5c 01       	movw	r10, r24
    7c7e:	61 14       	cp	r6, r1
    7c80:	71 04       	cpc	r7, r1
    7c82:	b1 f6       	brne	.-84     	; 0x7c30 <p_ftoa+0x1b8>
    7c84:	be cf       	rjmp	.-132    	; 0x7c02 <p_ftoa+0x18a>

00007c86 <p_etoa>:
    7c86:	a3 e1       	ldi	r26, 0x13	; 19
    7c88:	b0 e0       	ldi	r27, 0x00	; 0
    7c8a:	e9 e4       	ldi	r30, 0x49	; 73
    7c8c:	fe e3       	ldi	r31, 0x3E	; 62
    7c8e:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
    7c92:	4b 01       	movw	r8, r22
    7c94:	5c 01       	movw	r10, r24
    7c96:	59 8b       	std	Y+17, r21	; 0x11
    7c98:	48 8b       	std	Y+16, r20	; 0x10
    7c9a:	1b 8b       	std	Y+19, r17	; 0x13
    7c9c:	0a 8b       	std	Y+18, r16	; 0x12
    7c9e:	3c 2c       	mov	r3, r12
    7ca0:	c6 fa       	bst	r12, 6
    7ca2:	11 27       	eor	r17, r17
    7ca4:	10 f9       	bld	r17, 0
    7ca6:	59 87       	std	Y+9, r21	; 0x09
    7ca8:	48 87       	std	Y+8, r20	; 0x08
    7caa:	1b 86       	std	Y+11, r1	; 0x0b
    7cac:	1a 86       	std	Y+10, r1	; 0x0a
    7cae:	21 50       	subi	r18, 0x01	; 1
    7cb0:	31 09       	sbc	r19, r1
    7cb2:	3d 87       	std	Y+13, r19	; 0x0d
    7cb4:	2c 87       	std	Y+12, r18	; 0x0c
    7cb6:	fa 01       	movw	r30, r20
    7cb8:	10 82       	st	Z, r1
    7cba:	20 e0       	ldi	r18, 0x00	; 0
    7cbc:	30 e0       	ldi	r19, 0x00	; 0
    7cbe:	a9 01       	movw	r20, r18
    7cc0:	0e 94 1a e4 	call	0x1c834	; 0x1c834 <__cmpsf2>
    7cc4:	87 ff       	sbrs	r24, 7
    7cc6:	05 c0       	rjmp	.+10     	; 0x7cd2 <p_etoa+0x4c>
    7cc8:	b7 fa       	bst	r11, 7
    7cca:	b0 94       	com	r11
    7ccc:	b7 f8       	bld	r11, 7
    7cce:	b0 94       	com	r11
    7cd0:	11 e0       	ldi	r17, 0x01	; 1
    7cd2:	10 fb       	bst	r17, 0
    7cd4:	36 f8       	bld	r3, 6
    7cd6:	36 fe       	sbrs	r3, 6
    7cd8:	02 c0       	rjmp	.+4      	; 0x7cde <p_etoa+0x58>
    7cda:	6d e2       	ldi	r22, 0x2D	; 45
    7cdc:	07 c0       	rjmp	.+14     	; 0x7cec <p_etoa+0x66>
    7cde:	32 fe       	sbrs	r3, 2
    7ce0:	02 c0       	rjmp	.+4      	; 0x7ce6 <p_etoa+0x60>
    7ce2:	6b e2       	ldi	r22, 0x2B	; 43
    7ce4:	03 c0       	rjmp	.+6      	; 0x7cec <p_etoa+0x66>
    7ce6:	34 fe       	sbrs	r3, 4
    7ce8:	04 c0       	rjmp	.+8      	; 0x7cf2 <p_etoa+0x6c>
    7cea:	60 e2       	ldi	r22, 0x20	; 32
    7cec:	ce 01       	movw	r24, r28
    7cee:	08 96       	adiw	r24, 0x08	; 8
    7cf0:	53 de       	rcall	.-858    	; 0x7998 <pch>
    7cf2:	37 01       	movw	r6, r14
    7cf4:	f7 fe       	sbrs	r15, 7
    7cf6:	02 c0       	rjmp	.+4      	; 0x7cfc <p_etoa+0x76>
    7cf8:	61 2c       	mov	r6, r1
    7cfa:	71 2c       	mov	r7, r1
    7cfc:	1f 86       	std	Y+15, r1	; 0x0f
    7cfe:	1e 86       	std	Y+14, r1	; 0x0e
    7d00:	20 e0       	ldi	r18, 0x00	; 0
    7d02:	30 e0       	ldi	r19, 0x00	; 0
    7d04:	a9 01       	movw	r20, r18
    7d06:	c5 01       	movw	r24, r10
    7d08:	b4 01       	movw	r22, r8
    7d0a:	0e 94 1a e4 	call	0x1c834	; 0x1c834 <__cmpsf2>
    7d0e:	f3 2d       	mov	r31, r3
    7d10:	f2 70       	andi	r31, 0x02	; 2
    7d12:	2f 2e       	mov	r2, r31
    7d14:	88 23       	and	r24, r24
    7d16:	09 f4       	brne	.+2      	; 0x7d1a <p_etoa+0x94>
    7d18:	70 c0       	rjmp	.+224    	; 0x7dfa <p_etoa+0x174>
    7d1a:	ff 23       	and	r31, r31
    7d1c:	b1 f0       	breq	.+44     	; 0x7d4a <p_etoa+0xc4>
    7d1e:	83 01       	movw	r16, r6
    7d20:	c1 2c       	mov	r12, r1
    7d22:	d1 2c       	mov	r13, r1
    7d24:	e1 2c       	mov	r14, r1
    7d26:	2f e3       	ldi	r18, 0x3F	; 63
    7d28:	f2 2e       	mov	r15, r18
    7d2a:	01 15       	cp	r16, r1
    7d2c:	11 05       	cpc	r17, r1
    7d2e:	91 f0       	breq	.+36     	; 0x7d54 <p_etoa+0xce>
    7d30:	20 e0       	ldi	r18, 0x00	; 0
    7d32:	30 e0       	ldi	r19, 0x00	; 0
    7d34:	40 e2       	ldi	r20, 0x20	; 32
    7d36:	51 e4       	ldi	r21, 0x41	; 65
    7d38:	c7 01       	movw	r24, r14
    7d3a:	b6 01       	movw	r22, r12
    7d3c:	0e 94 1e e4 	call	0x1c83c	; 0x1c83c <__divsf3>
    7d40:	6b 01       	movw	r12, r22
    7d42:	7c 01       	movw	r14, r24
    7d44:	01 50       	subi	r16, 0x01	; 1
    7d46:	11 09       	sbc	r17, r1
    7d48:	f0 cf       	rjmp	.-32     	; 0x7d2a <p_etoa+0xa4>
    7d4a:	c1 2c       	mov	r12, r1
    7d4c:	d1 2c       	mov	r13, r1
    7d4e:	e1 2c       	mov	r14, r1
    7d50:	9f e3       	ldi	r25, 0x3F	; 63
    7d52:	f9 2e       	mov	r15, r25
    7d54:	41 2c       	mov	r4, r1
    7d56:	51 2c       	mov	r5, r1
    7d58:	82 01       	movw	r16, r4
    7d5a:	01 50       	subi	r16, 0x01	; 1
    7d5c:	11 09       	sbc	r17, r1
    7d5e:	20 e0       	ldi	r18, 0x00	; 0
    7d60:	30 e0       	ldi	r19, 0x00	; 0
    7d62:	40 e8       	ldi	r20, 0x80	; 128
    7d64:	5f e3       	ldi	r21, 0x3F	; 63
    7d66:	c5 01       	movw	r24, r10
    7d68:	b4 01       	movw	r22, r8
    7d6a:	0e 94 1a e4 	call	0x1c834	; 0x1c834 <__cmpsf2>
    7d6e:	87 ff       	sbrs	r24, 7
    7d70:	0c c0       	rjmp	.+24     	; 0x7d8a <p_etoa+0x104>
    7d72:	20 e0       	ldi	r18, 0x00	; 0
    7d74:	30 e0       	ldi	r19, 0x00	; 0
    7d76:	40 e2       	ldi	r20, 0x20	; 32
    7d78:	51 e4       	ldi	r21, 0x41	; 65
    7d7a:	c5 01       	movw	r24, r10
    7d7c:	b4 01       	movw	r22, r8
    7d7e:	0e 94 6d e5 	call	0x1cada	; 0x1cada <__mulsf3>
    7d82:	4b 01       	movw	r8, r22
    7d84:	5c 01       	movw	r10, r24
    7d86:	28 01       	movw	r4, r16
    7d88:	e7 cf       	rjmp	.-50     	; 0x7d58 <p_etoa+0xd2>
    7d8a:	82 01       	movw	r16, r4
    7d8c:	0f 5f       	subi	r16, 0xFF	; 255
    7d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    7d90:	20 e0       	ldi	r18, 0x00	; 0
    7d92:	30 e0       	ldi	r19, 0x00	; 0
    7d94:	40 e2       	ldi	r20, 0x20	; 32
    7d96:	51 e4       	ldi	r21, 0x41	; 65
    7d98:	c5 01       	movw	r24, r10
    7d9a:	b4 01       	movw	r22, r8
    7d9c:	0e 94 69 e5 	call	0x1cad2	; 0x1cad2 <__gesf2>
    7da0:	87 fd       	sbrc	r24, 7
    7da2:	0c c0       	rjmp	.+24     	; 0x7dbc <p_etoa+0x136>
    7da4:	20 e0       	ldi	r18, 0x00	; 0
    7da6:	30 e0       	ldi	r19, 0x00	; 0
    7da8:	40 e2       	ldi	r20, 0x20	; 32
    7daa:	51 e4       	ldi	r21, 0x41	; 65
    7dac:	c5 01       	movw	r24, r10
    7dae:	b4 01       	movw	r22, r8
    7db0:	0e 94 1e e4 	call	0x1c83c	; 0x1c83c <__divsf3>
    7db4:	4b 01       	movw	r8, r22
    7db6:	5c 01       	movw	r10, r24
    7db8:	28 01       	movw	r4, r16
    7dba:	e7 cf       	rjmp	.-50     	; 0x7d8a <p_etoa+0x104>
    7dbc:	a7 01       	movw	r20, r14
    7dbe:	96 01       	movw	r18, r12
    7dc0:	c5 01       	movw	r24, r10
    7dc2:	b4 01       	movw	r22, r8
    7dc4:	0e 94 b6 e3 	call	0x1c76c	; 0x1c76c <__addsf3>
    7dc8:	4b 01       	movw	r8, r22
    7dca:	5c 01       	movw	r10, r24
    7dcc:	82 01       	movw	r16, r4
    7dce:	2f ef       	ldi	r18, 0xFF	; 255
    7dd0:	42 1a       	sub	r4, r18
    7dd2:	52 0a       	sbc	r5, r18
    7dd4:	20 e0       	ldi	r18, 0x00	; 0
    7dd6:	30 e0       	ldi	r19, 0x00	; 0
    7dd8:	40 e2       	ldi	r20, 0x20	; 32
    7dda:	51 e4       	ldi	r21, 0x41	; 65
    7ddc:	0e 94 69 e5 	call	0x1cad2	; 0x1cad2 <__gesf2>
    7de0:	87 fd       	sbrc	r24, 7
    7de2:	09 c0       	rjmp	.+18     	; 0x7df6 <p_etoa+0x170>
    7de4:	20 e0       	ldi	r18, 0x00	; 0
    7de6:	30 e0       	ldi	r19, 0x00	; 0
    7de8:	40 e2       	ldi	r20, 0x20	; 32
    7dea:	51 e4       	ldi	r21, 0x41	; 65
    7dec:	c5 01       	movw	r24, r10
    7dee:	b4 01       	movw	r22, r8
    7df0:	0e 94 1e e4 	call	0x1c83c	; 0x1c83c <__divsf3>
    7df4:	e9 cf       	rjmp	.-46     	; 0x7dc8 <p_etoa+0x142>
    7df6:	0e 87       	std	Y+14, r16	; 0x0e
    7df8:	1f 87       	std	Y+15, r17	; 0x0f
    7dfa:	85 e6       	ldi	r24, 0x65	; 101
    7dfc:	89 83       	std	Y+1, r24	; 0x01
    7dfe:	8e 85       	ldd	r24, Y+14	; 0x0e
    7e00:	9f 85       	ldd	r25, Y+15	; 0x0f
    7e02:	97 ff       	sbrs	r25, 7
    7e04:	08 c0       	rjmp	.+16     	; 0x7e16 <p_etoa+0x190>
    7e06:	91 95       	neg	r25
    7e08:	81 95       	neg	r24
    7e0a:	91 09       	sbc	r25, r1
    7e0c:	9f 87       	std	Y+15, r25	; 0x0f
    7e0e:	8e 87       	std	Y+14, r24	; 0x0e
    7e10:	8d e2       	ldi	r24, 0x2D	; 45
    7e12:	90 e0       	ldi	r25, 0x00	; 0
    7e14:	02 c0       	rjmp	.+4      	; 0x7e1a <p_etoa+0x194>
    7e16:	8b e2       	ldi	r24, 0x2B	; 43
    7e18:	90 e0       	ldi	r25, 0x00	; 0
    7e1a:	6c 01       	movw	r12, r24
    7e1c:	82 e0       	ldi	r24, 0x02	; 2
    7e1e:	e8 2e       	mov	r14, r24
    7e20:	f1 2c       	mov	r15, r1
    7e22:	8e 01       	movw	r16, r28
    7e24:	02 5f       	subi	r16, 0xF2	; 242
    7e26:	1f 4f       	sbci	r17, 0xFF	; 255
    7e28:	2a e0       	ldi	r18, 0x0A	; 10
    7e2a:	30 e0       	ldi	r19, 0x00	; 0
    7e2c:	42 e0       	ldi	r20, 0x02	; 2
    7e2e:	50 e0       	ldi	r21, 0x00	; 0
    7e30:	65 e0       	ldi	r22, 0x05	; 5
    7e32:	70 e0       	ldi	r23, 0x00	; 0
    7e34:	ce 01       	movw	r24, r28
    7e36:	02 96       	adiw	r24, 0x02	; 2
    7e38:	26 dd       	rcall	.-1460   	; 0x7886 <bin2num>
    7e3a:	9c 01       	movw	r18, r24
    7e3c:	93 2d       	mov	r25, r3
    7e3e:	98 72       	andi	r25, 0x28	; 40
    7e40:	90 32       	cpi	r25, 0x20	; 32
    7e42:	71 f0       	breq	.+28     	; 0x7e60 <p_etoa+0x1da>
    7e44:	c5 01       	movw	r24, r10
    7e46:	b4 01       	movw	r22, r8
    7e48:	0e 94 86 e4 	call	0x1c90c	; 0x1c90c <__fixsfsi>
    7e4c:	6b 01       	movw	r12, r22
    7e4e:	7c 01       	movw	r14, r24
    7e50:	60 e3       	ldi	r22, 0x30	; 48
    7e52:	6c 0d       	add	r22, r12
    7e54:	ce 01       	movw	r24, r28
    7e56:	08 96       	adiw	r24, 0x08	; 8
    7e58:	9f dd       	rcall	.-1218   	; 0x7998 <pch>
    7e5a:	21 10       	cpse	r2, r1
    7e5c:	20 c0       	rjmp	.+64     	; 0x7e9e <p_etoa+0x218>
    7e5e:	63 c0       	rjmp	.+198    	; 0x7f26 <p_etoa+0x2a0>
    7e60:	8a 85       	ldd	r24, Y+10	; 0x0a
    7e62:	9b 85       	ldd	r25, Y+11	; 0x0b
    7e64:	0a 89       	ldd	r16, Y+18	; 0x12
    7e66:	1b 89       	ldd	r17, Y+19	; 0x13
    7e68:	08 1b       	sub	r16, r24
    7e6a:	19 0b       	sbc	r17, r25
    7e6c:	22 20       	and	r2, r2
    7e6e:	41 f0       	breq	.+16     	; 0x7e80 <p_etoa+0x1fa>
    7e70:	61 14       	cp	r6, r1
    7e72:	71 04       	cpc	r7, r1
    7e74:	29 f0       	breq	.+10     	; 0x7e80 <p_etoa+0x1fa>
    7e76:	06 19       	sub	r16, r6
    7e78:	17 09       	sbc	r17, r7
    7e7a:	06 50       	subi	r16, 0x06	; 6
    7e7c:	11 09       	sbc	r17, r1
    7e7e:	02 c0       	rjmp	.+4      	; 0x7e84 <p_etoa+0x1fe>
    7e80:	05 50       	subi	r16, 0x05	; 5
    7e82:	11 09       	sbc	r17, r1
    7e84:	24 30       	cpi	r18, 0x04	; 4
    7e86:	31 05       	cpc	r19, r1
    7e88:	14 f0       	brlt	.+4      	; 0x7e8e <p_etoa+0x208>
    7e8a:	01 50       	subi	r16, 0x01	; 1
    7e8c:	11 09       	sbc	r17, r1
    7e8e:	10 16       	cp	r1, r16
    7e90:	11 06       	cpc	r1, r17
    7e92:	c4 f6       	brge	.-80     	; 0x7e44 <p_etoa+0x1be>
    7e94:	60 e3       	ldi	r22, 0x30	; 48
    7e96:	ce 01       	movw	r24, r28
    7e98:	08 96       	adiw	r24, 0x08	; 8
    7e9a:	7e dd       	rcall	.-1284   	; 0x7998 <pch>
    7e9c:	f6 cf       	rjmp	.-20     	; 0x7e8a <p_etoa+0x204>
    7e9e:	61 14       	cp	r6, r1
    7ea0:	71 04       	cpc	r7, r1
    7ea2:	09 f4       	brne	.+2      	; 0x7ea6 <p_etoa+0x220>
    7ea4:	40 c0       	rjmp	.+128    	; 0x7f26 <p_etoa+0x2a0>
    7ea6:	b6 01       	movw	r22, r12
    7ea8:	dd 0c       	add	r13, r13
    7eaa:	88 0b       	sbc	r24, r24
    7eac:	99 0b       	sbc	r25, r25
    7eae:	0e 94 b9 e4 	call	0x1c972	; 0x1c972 <__floatsisf>
    7eb2:	9b 01       	movw	r18, r22
    7eb4:	ac 01       	movw	r20, r24
    7eb6:	c5 01       	movw	r24, r10
    7eb8:	b4 01       	movw	r22, r8
    7eba:	0e 94 b5 e3 	call	0x1c76a	; 0x1c76a <__subsf3>
    7ebe:	20 e0       	ldi	r18, 0x00	; 0
    7ec0:	30 e0       	ldi	r19, 0x00	; 0
    7ec2:	40 e2       	ldi	r20, 0x20	; 32
    7ec4:	51 e4       	ldi	r21, 0x41	; 65
    7ec6:	0e 94 6d e5 	call	0x1cada	; 0x1cada <__mulsf3>
    7eca:	4b 01       	movw	r8, r22
    7ecc:	5c 01       	movw	r10, r24
    7ece:	6e e2       	ldi	r22, 0x2E	; 46
    7ed0:	ce 01       	movw	r24, r28
    7ed2:	08 96       	adiw	r24, 0x08	; 8
    7ed4:	61 dd       	rcall	.-1342   	; 0x7998 <pch>
    7ed6:	c5 01       	movw	r24, r10
    7ed8:	b4 01       	movw	r22, r8
    7eda:	0e 94 86 e4 	call	0x1c90c	; 0x1c90c <__fixsfsi>
    7ede:	6b 01       	movw	r12, r22
    7ee0:	7c 01       	movw	r14, r24
    7ee2:	07 2e       	mov	r0, r23
    7ee4:	00 0c       	add	r0, r0
    7ee6:	88 0b       	sbc	r24, r24
    7ee8:	99 0b       	sbc	r25, r25
    7eea:	0e 94 b9 e4 	call	0x1c972	; 0x1c972 <__floatsisf>
    7eee:	9b 01       	movw	r18, r22
    7ef0:	ac 01       	movw	r20, r24
    7ef2:	c5 01       	movw	r24, r10
    7ef4:	b4 01       	movw	r22, r8
    7ef6:	0e 94 b5 e3 	call	0x1c76a	; 0x1c76a <__subsf3>
    7efa:	4b 01       	movw	r8, r22
    7efc:	5c 01       	movw	r10, r24
    7efe:	b6 01       	movw	r22, r12
    7f00:	60 5d       	subi	r22, 0xD0	; 208
    7f02:	7f 4f       	sbci	r23, 0xFF	; 255
    7f04:	ce 01       	movw	r24, r28
    7f06:	08 96       	adiw	r24, 0x08	; 8
    7f08:	47 dd       	rcall	.-1394   	; 0x7998 <pch>
    7f0a:	20 e0       	ldi	r18, 0x00	; 0
    7f0c:	30 e0       	ldi	r19, 0x00	; 0
    7f0e:	40 e2       	ldi	r20, 0x20	; 32
    7f10:	51 e4       	ldi	r21, 0x41	; 65
    7f12:	c5 01       	movw	r24, r10
    7f14:	b4 01       	movw	r22, r8
    7f16:	0e 94 6d e5 	call	0x1cada	; 0x1cada <__mulsf3>
    7f1a:	4b 01       	movw	r8, r22
    7f1c:	5c 01       	movw	r10, r24
    7f1e:	31 e0       	ldi	r19, 0x01	; 1
    7f20:	63 1a       	sub	r6, r19
    7f22:	71 08       	sbc	r7, r1
    7f24:	c1 f6       	brne	.-80     	; 0x7ed6 <p_etoa+0x250>
    7f26:	8e 01       	movw	r16, r28
    7f28:	0f 5f       	subi	r16, 0xFF	; 255
    7f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    7f2c:	f8 01       	movw	r30, r16
    7f2e:	61 91       	ld	r22, Z+
    7f30:	8f 01       	movw	r16, r30
    7f32:	ce 01       	movw	r24, r28
    7f34:	08 96       	adiw	r24, 0x08	; 8
    7f36:	66 23       	and	r22, r22
    7f38:	11 f0       	breq	.+4      	; 0x7f3e <p_etoa+0x2b8>
    7f3a:	2e dd       	rcall	.-1444   	; 0x7998 <pch>
    7f3c:	f7 cf       	rjmp	.-18     	; 0x7f2c <p_etoa+0x2a6>
    7f3e:	2c dd       	rcall	.-1448   	; 0x7998 <pch>
    7f40:	e8 89       	ldd	r30, Y+16	; 0x10
    7f42:	f9 89       	ldd	r31, Y+17	; 0x11
    7f44:	01 90       	ld	r0, Z+
    7f46:	00 20       	and	r0, r0
    7f48:	e9 f7       	brne	.-6      	; 0x7f44 <p_etoa+0x2be>
    7f4a:	cf 01       	movw	r24, r30
    7f4c:	01 97       	sbiw	r24, 0x01	; 1
    7f4e:	28 89       	ldd	r18, Y+16	; 0x10
    7f50:	39 89       	ldd	r19, Y+17	; 0x11
    7f52:	82 1b       	sub	r24, r18
    7f54:	93 0b       	sbc	r25, r19
    7f56:	63 96       	adiw	r28, 0x13	; 19
    7f58:	e2 e1       	ldi	r30, 0x12	; 18
    7f5a:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

00007f5e <_puts_pad>:
    7f5e:	a0 e0       	ldi	r26, 0x00	; 0
    7f60:	b0 e0       	ldi	r27, 0x00	; 0
    7f62:	e5 eb       	ldi	r30, 0xB5	; 181
    7f64:	ff e3       	ldi	r31, 0x3F	; 63
    7f66:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__prologue_saves__+0xc>
    7f6a:	6c 01       	movw	r12, r24
    7f6c:	4b 01       	movw	r8, r22
    7f6e:	79 01       	movw	r14, r18
    7f70:	24 17       	cp	r18, r20
    7f72:	35 07       	cpc	r19, r21
    7f74:	24 f4       	brge	.+8      	; 0x7f7e <_puts_pad+0x20>
    7f76:	ea 01       	movw	r28, r20
    7f78:	c2 1b       	sub	r28, r18
    7f7a:	d3 0b       	sbc	r29, r19
    7f7c:	02 c0       	rjmp	.+4      	; 0x7f82 <_puts_pad+0x24>
    7f7e:	c0 e0       	ldi	r28, 0x00	; 0
    7f80:	d0 e0       	ldi	r29, 0x00	; 0
    7f82:	01 15       	cp	r16, r1
    7f84:	11 05       	cpc	r17, r1
    7f86:	49 f4       	brne	.+18     	; 0x7f9a <_puts_pad+0x3c>
    7f88:	21 97       	sbiw	r28, 0x01	; 1
    7f8a:	38 f0       	brcs	.+14     	; 0x7f9a <_puts_pad+0x3c>
    7f8c:	d6 01       	movw	r26, r12
    7f8e:	ed 91       	ld	r30, X+
    7f90:	fc 91       	ld	r31, X
    7f92:	60 e2       	ldi	r22, 0x20	; 32
    7f94:	c6 01       	movw	r24, r12
    7f96:	09 95       	icall
    7f98:	f7 cf       	rjmp	.-18     	; 0x7f88 <_puts_pad+0x2a>
    7f9a:	54 01       	movw	r10, r8
    7f9c:	f5 01       	movw	r30, r10
    7f9e:	61 91       	ld	r22, Z+
    7fa0:	5f 01       	movw	r10, r30
    7fa2:	66 23       	and	r22, r22
    7fa4:	61 f0       	breq	.+24     	; 0x7fbe <_puts_pad+0x60>
    7fa6:	e1 14       	cp	r14, r1
    7fa8:	f1 04       	cpc	r15, r1
    7faa:	49 f0       	breq	.+18     	; 0x7fbe <_puts_pad+0x60>
    7fac:	d6 01       	movw	r26, r12
    7fae:	ed 91       	ld	r30, X+
    7fb0:	fc 91       	ld	r31, X
    7fb2:	c6 01       	movw	r24, r12
    7fb4:	09 95       	icall
    7fb6:	b1 e0       	ldi	r27, 0x01	; 1
    7fb8:	eb 1a       	sub	r14, r27
    7fba:	f1 08       	sbc	r15, r1
    7fbc:	ef cf       	rjmp	.-34     	; 0x7f9c <_puts_pad+0x3e>
    7fbe:	01 15       	cp	r16, r1
    7fc0:	11 05       	cpc	r17, r1
    7fc2:	51 f0       	breq	.+20     	; 0x7fd8 <_puts_pad+0x7a>
    7fc4:	20 97       	sbiw	r28, 0x00	; 0
    7fc6:	41 f0       	breq	.+16     	; 0x7fd8 <_puts_pad+0x7a>
    7fc8:	d6 01       	movw	r26, r12
    7fca:	ed 91       	ld	r30, X+
    7fcc:	fc 91       	ld	r31, X
    7fce:	60 e2       	ldi	r22, 0x20	; 32
    7fd0:	c6 01       	movw	r24, r12
    7fd2:	09 95       	icall
    7fd4:	21 97       	sbiw	r28, 0x01	; 1
    7fd6:	f6 cf       	rjmp	.-20     	; 0x7fc4 <_puts_pad+0x66>
    7fd8:	cd b7       	in	r28, 0x3d	; 61
    7fda:	de b7       	in	r29, 0x3e	; 62
    7fdc:	ec e0       	ldi	r30, 0x0C	; 12
    7fde:	0c 94 7e e3 	jmp	0x1c6fc	; 0x1c6fc <__epilogue_restores__+0xc>

00007fe2 <_puts_pad_X>:
    7fe2:	2f 92       	push	r2
    7fe4:	3f 92       	push	r3
    7fe6:	4f 92       	push	r4
    7fe8:	6f 92       	push	r6
    7fea:	7f 92       	push	r7
    7fec:	8f 92       	push	r8
    7fee:	cf 92       	push	r12
    7ff0:	df 92       	push	r13
    7ff2:	ef 92       	push	r14
    7ff4:	ff 92       	push	r15
    7ff6:	0f 93       	push	r16
    7ff8:	1f 93       	push	r17
    7ffa:	cf 93       	push	r28
    7ffc:	df 93       	push	r29
    7ffe:	6c 01       	movw	r12, r24
    8000:	3a 01       	movw	r6, r20
    8002:	86 2e       	mov	r8, r22
    8004:	02 17       	cp	r16, r18
    8006:	13 07       	cpc	r17, r19
    8008:	24 f4       	brge	.+8      	; 0x8012 <_puts_pad_X+0x30>
    800a:	e9 01       	movw	r28, r18
    800c:	c0 1b       	sub	r28, r16
    800e:	d1 0b       	sbc	r29, r17
    8010:	02 c0       	rjmp	.+4      	; 0x8016 <_puts_pad_X+0x34>
    8012:	c0 e0       	ldi	r28, 0x00	; 0
    8014:	d0 e0       	ldi	r29, 0x00	; 0
    8016:	e1 14       	cp	r14, r1
    8018:	f1 04       	cpc	r15, r1
    801a:	49 f4       	brne	.+18     	; 0x802e <_puts_pad_X+0x4c>
    801c:	21 97       	sbiw	r28, 0x01	; 1
    801e:	38 f0       	brcs	.+14     	; 0x802e <_puts_pad_X+0x4c>
    8020:	d6 01       	movw	r26, r12
    8022:	ed 91       	ld	r30, X+
    8024:	fc 91       	ld	r31, X
    8026:	60 e2       	ldi	r22, 0x20	; 32
    8028:	c6 01       	movw	r24, r12
    802a:	09 95       	icall
    802c:	f7 cf       	rjmp	.-18     	; 0x801c <_puts_pad_X+0x3a>
    802e:	13 01       	movw	r2, r6
    8030:	48 2c       	mov	r4, r8
    8032:	20 0e       	add	r2, r16
    8034:	31 1e       	adc	r3, r17
    8036:	41 1c       	adc	r4, r1
    8038:	17 fd       	sbrc	r17, 7
    803a:	4a 94       	dec	r4
    803c:	f3 01       	movw	r30, r6
    803e:	58 2d       	mov	r21, r8
    8040:	0e 94 93 e3 	call	0x1c726	; 0x1c726 <__xload_1>
    8044:	66 23       	and	r22, r22
    8046:	71 f0       	breq	.+28     	; 0x8064 <_puts_pad_X+0x82>
    8048:	62 14       	cp	r6, r2
    804a:	73 04       	cpc	r7, r3
    804c:	84 04       	cpc	r8, r4
    804e:	51 f0       	breq	.+20     	; 0x8064 <_puts_pad_X+0x82>
    8050:	d6 01       	movw	r26, r12
    8052:	ed 91       	ld	r30, X+
    8054:	fc 91       	ld	r31, X
    8056:	c6 01       	movw	r24, r12
    8058:	09 95       	icall
    805a:	bf ef       	ldi	r27, 0xFF	; 255
    805c:	6b 1a       	sub	r6, r27
    805e:	7b 0a       	sbc	r7, r27
    8060:	8b 0a       	sbc	r8, r27
    8062:	ec cf       	rjmp	.-40     	; 0x803c <_puts_pad_X+0x5a>
    8064:	ef 28       	or	r14, r15
    8066:	51 f0       	breq	.+20     	; 0x807c <_puts_pad_X+0x9a>
    8068:	20 97       	sbiw	r28, 0x00	; 0
    806a:	41 f0       	breq	.+16     	; 0x807c <_puts_pad_X+0x9a>
    806c:	d6 01       	movw	r26, r12
    806e:	ed 91       	ld	r30, X+
    8070:	fc 91       	ld	r31, X
    8072:	60 e2       	ldi	r22, 0x20	; 32
    8074:	c6 01       	movw	r24, r12
    8076:	09 95       	icall
    8078:	21 97       	sbiw	r28, 0x01	; 1
    807a:	f6 cf       	rjmp	.-20     	; 0x8068 <_puts_pad_X+0x86>
    807c:	df 91       	pop	r29
    807e:	cf 91       	pop	r28
    8080:	1f 91       	pop	r17
    8082:	0f 91       	pop	r16
    8084:	ff 90       	pop	r15
    8086:	ef 90       	pop	r14
    8088:	df 90       	pop	r13
    808a:	cf 90       	pop	r12
    808c:	8f 90       	pop	r8
    808e:	7f 90       	pop	r7
    8090:	6f 90       	pop	r6
    8092:	4f 90       	pop	r4
    8094:	3f 90       	pop	r3
    8096:	2f 90       	pop	r2
    8098:	08 95       	ret

0000809a <strlen_X>:
    809a:	cf 92       	push	r12
    809c:	df 92       	push	r13
    809e:	ef 92       	push	r14
    80a0:	9b 01       	movw	r18, r22
    80a2:	48 2f       	mov	r20, r24
    80a4:	80 e0       	ldi	r24, 0x00	; 0
    80a6:	90 e0       	ldi	r25, 0x00	; 0
    80a8:	2f 5f       	subi	r18, 0xFF	; 255
    80aa:	3f 4f       	sbci	r19, 0xFF	; 255
    80ac:	4f 4f       	sbci	r20, 0xFF	; 255
    80ae:	69 01       	movw	r12, r18
    80b0:	e4 2e       	mov	r14, r20
    80b2:	51 e0       	ldi	r21, 0x01	; 1
    80b4:	c5 1a       	sub	r12, r21
    80b6:	d1 08       	sbc	r13, r1
    80b8:	e1 08       	sbc	r14, r1
    80ba:	f6 01       	movw	r30, r12
    80bc:	5e 2d       	mov	r21, r14
    80be:	0e 94 93 e3 	call	0x1c726	; 0x1c726 <__xload_1>
    80c2:	66 23       	and	r22, r22
    80c4:	11 f0       	breq	.+4      	; 0x80ca <strlen_X+0x30>
    80c6:	01 96       	adiw	r24, 0x01	; 1
    80c8:	ef cf       	rjmp	.-34     	; 0x80a8 <strlen_X+0xe>
    80ca:	ef 90       	pop	r14
    80cc:	df 90       	pop	r13
    80ce:	cf 90       	pop	r12
    80d0:	08 95       	ret

000080d2 <_printf_fn>:
    80d2:	ae e6       	ldi	r26, 0x6E	; 110
    80d4:	b0 e0       	ldi	r27, 0x00	; 0
    80d6:	ef e6       	ldi	r30, 0x6F	; 111
    80d8:	f0 e4       	ldi	r31, 0x40	; 64
    80da:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
    80de:	a5 96       	adiw	r28, 0x25	; 37
    80e0:	9f af       	std	Y+63, r25	; 0x3f
    80e2:	8e af       	std	Y+62, r24	; 0x3e
    80e4:	a5 97       	sbiw	r28, 0x25	; 37
    80e6:	6a 01       	movw	r12, r20
    80e8:	e6 2e       	mov	r14, r22
    80ea:	19 01       	movw	r2, r18
    80ec:	a9 96       	adiw	r28, 0x29	; 41
    80ee:	1c ae       	std	Y+60, r1	; 0x3c
    80f0:	1d ae       	std	Y+61, r1	; 0x3d
    80f2:	1e ae       	std	Y+62, r1	; 0x3e
    80f4:	1f ae       	std	Y+63, r1	; 0x3f
    80f6:	a9 97       	sbiw	r28, 0x29	; 41
    80f8:	8a e1       	ldi	r24, 0x1A	; 26
    80fa:	94 e0       	ldi	r25, 0x04	; 4
    80fc:	9c 01       	movw	r18, r24
    80fe:	40 e8       	ldi	r20, 0x80	; 128
    8100:	ae 96       	adiw	r28, 0x2e	; 46
    8102:	2d af       	std	Y+61, r18	; 0x3d
    8104:	3e af       	std	Y+62, r19	; 0x3e
    8106:	4f af       	std	Y+63, r20	; 0x3f
    8108:	ae 97       	sbiw	r28, 0x2e	; 46
    810a:	ae 01       	movw	r20, r28
    810c:	4f 5a       	subi	r20, 0xAF	; 175
    810e:	5f 4f       	sbci	r21, 0xFF	; 255
    8110:	67 96       	adiw	r28, 0x17	; 23
    8112:	5f af       	std	Y+63, r21	; 0x3f
    8114:	4e af       	std	Y+62, r20	; 0x3e
    8116:	67 97       	sbiw	r28, 0x17	; 23
    8118:	ce 01       	movw	r24, r28
    811a:	8d 5b       	subi	r24, 0xBD	; 189
    811c:	9f 4f       	sbci	r25, 0xFF	; 255
    811e:	69 96       	adiw	r28, 0x19	; 25
    8120:	9f af       	std	Y+63, r25	; 0x3f
    8122:	8e af       	std	Y+62, r24	; 0x3e
    8124:	69 97       	sbiw	r28, 0x19	; 25
    8126:	de 01       	movw	r26, r28
    8128:	a5 5b       	subi	r26, 0xB5	; 181
    812a:	bf 4f       	sbci	r27, 0xFF	; 255
    812c:	6b 96       	adiw	r28, 0x1b	; 27
    812e:	bf af       	std	Y+63, r27	; 0x3f
    8130:	ae af       	std	Y+62, r26	; 0x3e
    8132:	6b 97       	sbiw	r28, 0x1b	; 27
    8134:	fe 01       	movw	r30, r28
    8136:	ed 5a       	subi	r30, 0xAD	; 173
    8138:	ff 4f       	sbci	r31, 0xFF	; 255
    813a:	6d 96       	adiw	r28, 0x1d	; 29
    813c:	ff af       	std	Y+63, r31	; 0x3f
    813e:	ee af       	std	Y+62, r30	; 0x3e
    8140:	6d 97       	sbiw	r28, 0x1d	; 29
    8142:	f6 01       	movw	r30, r12
    8144:	5e 2d       	mov	r21, r14
    8146:	0e 94 93 e3 	call	0x1c726	; 0x1c726 <__xload_1>
    814a:	66 23       	and	r22, r22
    814c:	09 f4       	brne	.+2      	; 0x8150 <_printf_fn+0x7e>
    814e:	13 c4       	rjmp	.+2086   	; 0x8976 <_printf_fn+0x8a4>
    8150:	ae 2d       	mov	r26, r14
    8152:	c6 01       	movw	r24, r12
    8154:	01 96       	adiw	r24, 0x01	; 1
    8156:	a1 1d       	adc	r26, r1
    8158:	3c 01       	movw	r6, r24
    815a:	8a 2e       	mov	r8, r26
    815c:	65 32       	cpi	r22, 0x25	; 37
    815e:	51 f0       	breq	.+20     	; 0x8174 <_printf_fn+0xa2>
    8160:	a5 96       	adiw	r28, 0x25	; 37
    8162:	ae ad       	ldd	r26, Y+62	; 0x3e
    8164:	bf ad       	ldd	r27, Y+63	; 0x3f
    8166:	a5 97       	sbiw	r28, 0x25	; 37
    8168:	ed 91       	ld	r30, X+
    816a:	fc 91       	ld	r31, X
    816c:	11 97       	sbiw	r26, 0x01	; 1
    816e:	cd 01       	movw	r24, r26
    8170:	09 95       	icall
    8172:	d5 c3       	rjmp	.+1962   	; 0x891e <_printf_fn+0x84c>
    8174:	91 2c       	mov	r9, r1
    8176:	f3 01       	movw	r30, r6
    8178:	58 2d       	mov	r21, r8
    817a:	0e 94 93 e3 	call	0x1c726	; 0x1c726 <__xload_1>
    817e:	63 32       	cpi	r22, 0x23	; 35
    8180:	19 f4       	brne	.+6      	; 0x8188 <_printf_fn+0xb6>
    8182:	68 94       	set
    8184:	97 f8       	bld	r9, 7
    8186:	04 c0       	rjmp	.+8      	; 0x8190 <_printf_fn+0xbe>
    8188:	6b 32       	cpi	r22, 0x2B	; 43
    818a:	39 f4       	brne	.+14     	; 0x819a <_printf_fn+0xc8>
    818c:	68 94       	set
    818e:	92 f8       	bld	r9, 2
    8190:	bf ef       	ldi	r27, 0xFF	; 255
    8192:	6b 1a       	sub	r6, r27
    8194:	7b 0a       	sbc	r7, r27
    8196:	8b 0a       	sbc	r8, r27
    8198:	ee cf       	rjmp	.-36     	; 0x8176 <_printf_fn+0xa4>
    819a:	6d 32       	cpi	r22, 0x2D	; 45
    819c:	a9 f4       	brne	.+42     	; 0x81c8 <_printf_fn+0xf6>
    819e:	93 fc       	sbrc	r9, 3
    81a0:	05 c0       	rjmp	.+10     	; 0x81ac <_printf_fn+0xda>
    81a2:	6d 32       	cpi	r22, 0x2D	; 45
    81a4:	19 f4       	brne	.+6      	; 0x81ac <_printf_fn+0xda>
    81a6:	68 94       	set
    81a8:	93 f8       	bld	r9, 3
    81aa:	f2 cf       	rjmp	.-28     	; 0x8190 <_printf_fn+0xbe>
    81ac:	94 fc       	sbrc	r9, 4
    81ae:	05 c0       	rjmp	.+10     	; 0x81ba <_printf_fn+0xe8>
    81b0:	60 32       	cpi	r22, 0x20	; 32
    81b2:	19 f4       	brne	.+6      	; 0x81ba <_printf_fn+0xe8>
    81b4:	68 94       	set
    81b6:	94 f8       	bld	r9, 4
    81b8:	eb cf       	rjmp	.-42     	; 0x8190 <_printf_fn+0xbe>
    81ba:	95 fc       	sbrc	r9, 5
    81bc:	e9 cf       	rjmp	.-46     	; 0x8190 <_printf_fn+0xbe>
    81be:	60 33       	cpi	r22, 0x30	; 48
    81c0:	39 f7       	brne	.-50     	; 0x8190 <_printf_fn+0xbe>
    81c2:	68 94       	set
    81c4:	95 f8       	bld	r9, 5
    81c6:	e4 cf       	rjmp	.-56     	; 0x8190 <_printf_fn+0xbe>
    81c8:	86 2f       	mov	r24, r22
    81ca:	8f 7e       	andi	r24, 0xEF	; 239
    81cc:	80 32       	cpi	r24, 0x20	; 32
    81ce:	39 f3       	breq	.-50     	; 0x819e <_printf_fn+0xcc>
    81d0:	70 e0       	ldi	r23, 0x00	; 0
    81d2:	60 53       	subi	r22, 0x30	; 48
    81d4:	71 09       	sbc	r23, r1
    81d6:	6f 96       	adiw	r28, 0x1f	; 31
    81d8:	1f ae       	std	Y+63, r1	; 0x3f
    81da:	1e ae       	std	Y+62, r1	; 0x3e
    81dc:	6f 97       	sbiw	r28, 0x1f	; 31
    81de:	6a 30       	cpi	r22, 0x0A	; 10
    81e0:	71 05       	cpc	r23, r1
    81e2:	10 f5       	brcc	.+68     	; 0x8228 <_printf_fn+0x156>
    81e4:	2a e0       	ldi	r18, 0x0A	; 10
    81e6:	f3 01       	movw	r30, r6
    81e8:	58 2d       	mov	r21, r8
    81ea:	0e 94 93 e3 	call	0x1c726	; 0x1c726 <__xload_1>
    81ee:	70 e0       	ldi	r23, 0x00	; 0
    81f0:	cb 01       	movw	r24, r22
    81f2:	c0 97       	sbiw	r24, 0x30	; 48
    81f4:	0a 97       	sbiw	r24, 0x0a	; 10
    81f6:	b0 f4       	brcc	.+44     	; 0x8224 <_printf_fn+0x152>
    81f8:	ef ef       	ldi	r30, 0xFF	; 255
    81fa:	6e 1a       	sub	r6, r30
    81fc:	7e 0a       	sbc	r7, r30
    81fe:	8e 0a       	sbc	r8, r30
    8200:	6f 96       	adiw	r28, 0x1f	; 31
    8202:	4e ad       	ldd	r20, Y+62	; 0x3e
    8204:	5f ad       	ldd	r21, Y+63	; 0x3f
    8206:	6f 97       	sbiw	r28, 0x1f	; 31
    8208:	24 9f       	mul	r18, r20
    820a:	c0 01       	movw	r24, r0
    820c:	25 9f       	mul	r18, r21
    820e:	90 0d       	add	r25, r0
    8210:	11 24       	eor	r1, r1
    8212:	68 0f       	add	r22, r24
    8214:	79 1f       	adc	r23, r25
    8216:	cb 01       	movw	r24, r22
    8218:	c0 97       	sbiw	r24, 0x30	; 48
    821a:	6f 96       	adiw	r28, 0x1f	; 31
    821c:	9f af       	std	Y+63, r25	; 0x3f
    821e:	8e af       	std	Y+62, r24	; 0x3e
    8220:	6f 97       	sbiw	r28, 0x1f	; 31
    8222:	e1 cf       	rjmp	.-62     	; 0x81e6 <_printf_fn+0x114>
    8224:	68 94       	set
    8226:	90 f8       	bld	r9, 0
    8228:	f3 01       	movw	r30, r6
    822a:	58 2d       	mov	r21, r8
    822c:	0e 94 93 e3 	call	0x1c726	; 0x1c726 <__xload_1>
    8230:	6e 32       	cpi	r22, 0x2E	; 46
    8232:	61 f5       	brne	.+88     	; 0x828c <_printf_fn+0x1ba>
    8234:	9f ef       	ldi	r25, 0xFF	; 255
    8236:	69 1a       	sub	r6, r25
    8238:	79 0a       	sbc	r7, r25
    823a:	89 0a       	sbc	r8, r25
    823c:	a1 96       	adiw	r28, 0x21	; 33
    823e:	1f ae       	std	Y+63, r1	; 0x3f
    8240:	1e ae       	std	Y+62, r1	; 0x3e
    8242:	a1 97       	sbiw	r28, 0x21	; 33
    8244:	2a e0       	ldi	r18, 0x0A	; 10
    8246:	f3 01       	movw	r30, r6
    8248:	58 2d       	mov	r21, r8
    824a:	0e 94 93 e3 	call	0x1c726	; 0x1c726 <__xload_1>
    824e:	70 e0       	ldi	r23, 0x00	; 0
    8250:	cb 01       	movw	r24, r22
    8252:	c0 97       	sbiw	r24, 0x30	; 48
    8254:	0a 97       	sbiw	r24, 0x0a	; 10
    8256:	b8 f4       	brcc	.+46     	; 0x8286 <_printf_fn+0x1b4>
    8258:	af ef       	ldi	r26, 0xFF	; 255
    825a:	6a 1a       	sub	r6, r26
    825c:	7a 0a       	sbc	r7, r26
    825e:	8a 0a       	sbc	r8, r26
    8260:	a1 96       	adiw	r28, 0x21	; 33
    8262:	ee ad       	ldd	r30, Y+62	; 0x3e
    8264:	ff ad       	ldd	r31, Y+63	; 0x3f
    8266:	a1 97       	sbiw	r28, 0x21	; 33
    8268:	2e 9f       	mul	r18, r30
    826a:	c0 01       	movw	r24, r0
    826c:	2f 9f       	mul	r18, r31
    826e:	90 0d       	add	r25, r0
    8270:	11 24       	eor	r1, r1
    8272:	68 0f       	add	r22, r24
    8274:	79 1f       	adc	r23, r25
    8276:	ab 01       	movw	r20, r22
    8278:	40 53       	subi	r20, 0x30	; 48
    827a:	51 09       	sbc	r21, r1
    827c:	a1 96       	adiw	r28, 0x21	; 33
    827e:	5f af       	std	Y+63, r21	; 0x3f
    8280:	4e af       	std	Y+62, r20	; 0x3e
    8282:	a1 97       	sbiw	r28, 0x21	; 33
    8284:	e0 cf       	rjmp	.-64     	; 0x8246 <_printf_fn+0x174>
    8286:	68 94       	set
    8288:	91 f8       	bld	r9, 1
    828a:	04 c0       	rjmp	.+8      	; 0x8294 <_printf_fn+0x1c2>
    828c:	a1 96       	adiw	r28, 0x21	; 33
    828e:	1f ae       	std	Y+63, r1	; 0x3f
    8290:	1e ae       	std	Y+62, r1	; 0x3e
    8292:	a1 97       	sbiw	r28, 0x21	; 33
    8294:	f3 01       	movw	r30, r6
    8296:	58 2d       	mov	r21, r8
    8298:	0e 94 93 e3 	call	0x1c726	; 0x1c726 <__xload_1>
    829c:	69 34       	cpi	r22, 0x49	; 73
    829e:	91 f5       	brne	.+100    	; 0x8304 <_printf_fn+0x232>
    82a0:	5f ef       	ldi	r21, 0xFF	; 255
    82a2:	65 1a       	sub	r6, r21
    82a4:	75 0a       	sbc	r7, r21
    82a6:	85 0a       	sbc	r8, r21
    82a8:	41 2c       	mov	r4, r1
    82aa:	51 2c       	mov	r5, r1
    82ac:	2a e0       	ldi	r18, 0x0A	; 10
    82ae:	f3 01       	movw	r30, r6
    82b0:	58 2d       	mov	r21, r8
    82b2:	0e 94 93 e3 	call	0x1c726	; 0x1c726 <__xload_1>
    82b6:	70 e0       	ldi	r23, 0x00	; 0
    82b8:	cb 01       	movw	r24, r22
    82ba:	c0 97       	sbiw	r24, 0x30	; 48
    82bc:	0a 97       	sbiw	r24, 0x0a	; 10
    82be:	80 f4       	brcc	.+32     	; 0x82e0 <_printf_fn+0x20e>
    82c0:	8f ef       	ldi	r24, 0xFF	; 255
    82c2:	68 1a       	sub	r6, r24
    82c4:	78 0a       	sbc	r7, r24
    82c6:	88 0a       	sbc	r8, r24
    82c8:	24 9d       	mul	r18, r4
    82ca:	c0 01       	movw	r24, r0
    82cc:	25 9d       	mul	r18, r5
    82ce:	90 0d       	add	r25, r0
    82d0:	11 24       	eor	r1, r1
    82d2:	68 0f       	add	r22, r24
    82d4:	79 1f       	adc	r23, r25
    82d6:	2b 01       	movw	r4, r22
    82d8:	90 e3       	ldi	r25, 0x30	; 48
    82da:	49 1a       	sub	r4, r25
    82dc:	51 08       	sbc	r5, r1
    82de:	e7 cf       	rjmp	.-50     	; 0x82ae <_printf_fn+0x1dc>
    82e0:	41 14       	cp	r4, r1
    82e2:	51 04       	cpc	r5, r1
    82e4:	09 f4       	brne	.+2      	; 0x82e8 <_printf_fn+0x216>
    82e6:	40 c0       	rjmp	.+128    	; 0x8368 <_printf_fn+0x296>
    82e8:	c2 01       	movw	r24, r4
    82ea:	87 70       	andi	r24, 0x07	; 7
    82ec:	99 27       	eor	r25, r25
    82ee:	89 2b       	or	r24, r25
    82f0:	c9 f5       	brne	.+114    	; 0x8364 <_printf_fn+0x292>
    82f2:	63 e0       	ldi	r22, 0x03	; 3
    82f4:	55 94       	asr	r5
    82f6:	47 94       	ror	r4
    82f8:	6a 95       	dec	r22
    82fa:	e1 f7       	brne	.-8      	; 0x82f4 <_printf_fn+0x222>
    82fc:	41 14       	cp	r4, r1
    82fe:	51 04       	cpc	r5, r1
    8300:	99 f1       	breq	.+102    	; 0x8368 <_printf_fn+0x296>
    8302:	21 c0       	rjmp	.+66     	; 0x8346 <_printf_fn+0x274>
    8304:	68 36       	cpi	r22, 0x68	; 104
    8306:	29 f4       	brne	.+10     	; 0x8312 <_printf_fn+0x240>
    8308:	af ef       	ldi	r26, 0xFF	; 255
    830a:	6a 1a       	sub	r6, r26
    830c:	7a 0a       	sbc	r7, r26
    830e:	8a 0a       	sbc	r8, r26
    8310:	09 c3       	rjmp	.+1554   	; 0x8924 <_printf_fn+0x852>
    8312:	6c 36       	cpi	r22, 0x6C	; 108
    8314:	09 f0       	breq	.+2      	; 0x8318 <_printf_fn+0x246>
    8316:	06 c3       	rjmp	.+1548   	; 0x8924 <_printf_fn+0x852>
    8318:	a8 2d       	mov	r26, r8
    831a:	c3 01       	movw	r24, r6
    831c:	01 96       	adiw	r24, 0x01	; 1
    831e:	a1 1d       	adc	r26, r1
    8320:	fc 01       	movw	r30, r24
    8322:	5a 2f       	mov	r21, r26
    8324:	0e 94 93 e3 	call	0x1c726	; 0x1c726 <__xload_1>
    8328:	6c 36       	cpi	r22, 0x6C	; 108
    832a:	31 f0       	breq	.+12     	; 0x8338 <_printf_fn+0x266>
    832c:	3c 01       	movw	r6, r24
    832e:	8a 2e       	mov	r8, r26
    8330:	54 e0       	ldi	r21, 0x04	; 4
    8332:	45 2e       	mov	r4, r21
    8334:	51 2c       	mov	r5, r1
    8336:	07 c0       	rjmp	.+14     	; 0x8346 <_printf_fn+0x274>
    8338:	b2 e0       	ldi	r27, 0x02	; 2
    833a:	6b 0e       	add	r6, r27
    833c:	71 1c       	adc	r7, r1
    833e:	81 1c       	adc	r8, r1
    8340:	48 e0       	ldi	r20, 0x08	; 8
    8342:	44 2e       	mov	r4, r20
    8344:	51 2c       	mov	r5, r1
    8346:	f3 01       	movw	r30, r6
    8348:	58 2d       	mov	r21, r8
    834a:	0e 94 93 e3 	call	0x1c726	; 0x1c726 <__xload_1>
    834e:	e6 2f       	mov	r30, r22
    8350:	f0 e0       	ldi	r31, 0x00	; 0
    8352:	a3 96       	adiw	r28, 0x23	; 35
    8354:	ff af       	std	Y+63, r31	; 0x3f
    8356:	ee af       	std	Y+62, r30	; 0x3e
    8358:	a3 97       	sbiw	r28, 0x23	; 35
    835a:	e4 36       	cpi	r30, 0x64	; 100
    835c:	f1 05       	cpc	r31, r1
    835e:	09 f4       	brne	.+2      	; 0x8362 <_printf_fn+0x290>
    8360:	e5 c2       	rjmp	.+1482   	; 0x892c <_printf_fn+0x85a>
    8362:	06 c0       	rjmp	.+12     	; 0x8370 <_printf_fn+0x29e>
    8364:	41 2c       	mov	r4, r1
    8366:	51 2c       	mov	r5, r1
    8368:	a3 96       	adiw	r28, 0x23	; 35
    836a:	1f ae       	std	Y+63, r1	; 0x3f
    836c:	1e ae       	std	Y+62, r1	; 0x3e
    836e:	a3 97       	sbiw	r28, 0x23	; 35
    8370:	31 e0       	ldi	r19, 0x01	; 1
    8372:	20 e0       	ldi	r18, 0x00	; 0
    8374:	a3 96       	adiw	r28, 0x23	; 35
    8376:	4e ad       	ldd	r20, Y+62	; 0x3e
    8378:	5f ad       	ldd	r21, Y+63	; 0x3f
    837a:	a3 97       	sbiw	r28, 0x23	; 35
    837c:	44 34       	cpi	r20, 0x44	; 68
    837e:	51 05       	cpc	r21, r1
    8380:	09 f0       	breq	.+2      	; 0x8384 <_printf_fn+0x2b2>
    8382:	30 e0       	ldi	r19, 0x00	; 0
    8384:	83 2f       	mov	r24, r19
    8386:	92 2f       	mov	r25, r18
    8388:	a3 96       	adiw	r28, 0x23	; 35
    838a:	ee ad       	ldd	r30, Y+62	; 0x3e
    838c:	ff ad       	ldd	r31, Y+63	; 0x3f
    838e:	a3 97       	sbiw	r28, 0x23	; 35
    8390:	e2 54       	subi	r30, 0x42	; 66
    8392:	f1 09       	sbc	r31, r1
    8394:	e7 33       	cpi	r30, 0x37	; 55
    8396:	f1 05       	cpc	r31, r1
    8398:	08 f0       	brcs	.+2      	; 0x839c <_printf_fn+0x2ca>
    839a:	57 c1       	rjmp	.+686    	; 0x864a <_printf_fn+0x578>
    839c:	ea 5b       	subi	r30, 0xBA	; 186
    839e:	ff 4f       	sbci	r31, 0xFF	; 255
    83a0:	0c 94 2d e3 	jmp	0x1c65a	; 0x1c65a <__tablejump2__>
    83a4:	32 e0       	ldi	r19, 0x02	; 2
    83a6:	43 2e       	mov	r4, r19
    83a8:	51 2c       	mov	r5, r1
    83aa:	29 2d       	mov	r18, r9
    83ac:	28 72       	andi	r18, 0x28	; 40
    83ae:	28 32       	cpi	r18, 0x28	; 40
    83b0:	11 f4       	brne	.+4      	; 0x83b6 <_printf_fn+0x2e4>
    83b2:	e8 94       	clt
    83b4:	95 f8       	bld	r9, 5
    83b6:	29 2d       	mov	r18, r9
    83b8:	22 72       	andi	r18, 0x22	; 34
    83ba:	22 32       	cpi	r18, 0x22	; 34
    83bc:	11 f4       	brne	.+4      	; 0x83c2 <_printf_fn+0x2f0>
    83be:	e8 94       	clt
    83c0:	95 f8       	bld	r9, 5
    83c2:	29 2d       	mov	r18, r9
    83c4:	21 72       	andi	r18, 0x21	; 33
    83c6:	21 32       	cpi	r18, 0x21	; 33
    83c8:	79 f4       	brne	.+30     	; 0x83e8 <_printf_fn+0x316>
    83ca:	a1 96       	adiw	r28, 0x21	; 33
    83cc:	ae ad       	ldd	r26, Y+62	; 0x3e
    83ce:	bf ad       	ldd	r27, Y+63	; 0x3f
    83d0:	a1 97       	sbiw	r28, 0x21	; 33
    83d2:	6f 96       	adiw	r28, 0x1f	; 31
    83d4:	ee ad       	ldd	r30, Y+62	; 0x3e
    83d6:	ff ad       	ldd	r31, Y+63	; 0x3f
    83d8:	6f 97       	sbiw	r28, 0x1f	; 31
    83da:	ae 17       	cp	r26, r30
    83dc:	bf 07       	cpc	r27, r31
    83de:	24 f4       	brge	.+8      	; 0x83e8 <_printf_fn+0x316>
    83e0:	a1 96       	adiw	r28, 0x21	; 33
    83e2:	ff af       	std	Y+63, r31	; 0x3f
    83e4:	ee af       	std	Y+62, r30	; 0x3e
    83e6:	a1 97       	sbiw	r28, 0x21	; 33
    83e8:	29 2d       	mov	r18, r9
    83ea:	23 72       	andi	r18, 0x23	; 35
    83ec:	23 32       	cpi	r18, 0x23	; 35
    83ee:	79 f4       	brne	.+30     	; 0x840e <_printf_fn+0x33c>
    83f0:	a1 96       	adiw	r28, 0x21	; 33
    83f2:	2e ad       	ldd	r18, Y+62	; 0x3e
    83f4:	3f ad       	ldd	r19, Y+63	; 0x3f
    83f6:	a1 97       	sbiw	r28, 0x21	; 33
    83f8:	6f 96       	adiw	r28, 0x1f	; 31
    83fa:	4e ad       	ldd	r20, Y+62	; 0x3e
    83fc:	5f ad       	ldd	r21, Y+63	; 0x3f
    83fe:	6f 97       	sbiw	r28, 0x1f	; 31
    8400:	24 17       	cp	r18, r20
    8402:	35 07       	cpc	r19, r21
    8404:	24 f4       	brge	.+8      	; 0x840e <_printf_fn+0x33c>
    8406:	a1 96       	adiw	r28, 0x21	; 33
    8408:	5f af       	std	Y+63, r21	; 0x3f
    840a:	4e af       	std	Y+62, r20	; 0x3e
    840c:	a1 97       	sbiw	r28, 0x21	; 33
    840e:	e8 94       	clt
    8410:	94 f8       	bld	r9, 4
    8412:	e8 94       	clt
    8414:	92 f8       	bld	r9, 2
    8416:	e8 94       	clt
    8418:	96 f8       	bld	r9, 6
    841a:	52 e0       	ldi	r21, 0x02	; 2
    841c:	45 16       	cp	r4, r21
    841e:	51 04       	cpc	r5, r1
    8420:	f9 f4       	brne	.+62     	; 0x8460 <_printf_fn+0x38e>
    8422:	51 01       	movw	r10, r2
    8424:	82 e0       	ldi	r24, 0x02	; 2
    8426:	a8 0e       	add	r10, r24
    8428:	b1 1c       	adc	r11, r1
    842a:	d1 01       	movw	r26, r2
    842c:	8d 91       	ld	r24, X+
    842e:	9c 91       	ld	r25, X
    8430:	65 96       	adiw	r28, 0x15	; 21
    8432:	9f af       	std	Y+63, r25	; 0x3f
    8434:	8e af       	std	Y+62, r24	; 0x3e
    8436:	65 97       	sbiw	r28, 0x15	; 21
    8438:	a3 96       	adiw	r28, 0x23	; 35
    843a:	ee ad       	ldd	r30, Y+62	; 0x3e
    843c:	ff ad       	ldd	r31, Y+63	; 0x3f
    843e:	a3 97       	sbiw	r28, 0x23	; 35
    8440:	e4 34       	cpi	r30, 0x44	; 68
    8442:	f1 05       	cpc	r31, r1
    8444:	09 f0       	breq	.+2      	; 0x8448 <_printf_fn+0x376>
    8446:	ac c0       	rjmp	.+344    	; 0x85a0 <_printf_fn+0x4ce>
    8448:	97 ff       	sbrs	r25, 7
    844a:	a7 c0       	rjmp	.+334    	; 0x859a <_printf_fn+0x4c8>
    844c:	68 94       	set
    844e:	96 f8       	bld	r9, 6
    8450:	91 95       	neg	r25
    8452:	81 95       	neg	r24
    8454:	91 09       	sbc	r25, r1
    8456:	65 96       	adiw	r28, 0x15	; 21
    8458:	9f af       	std	Y+63, r25	; 0x3f
    845a:	8e af       	std	Y+62, r24	; 0x3e
    845c:	65 97       	sbiw	r28, 0x15	; 21
    845e:	9d c0       	rjmp	.+314    	; 0x859a <_printf_fn+0x4c8>
    8460:	f4 e0       	ldi	r31, 0x04	; 4
    8462:	4f 16       	cp	r4, r31
    8464:	51 04       	cpc	r5, r1
    8466:	59 f5       	brne	.+86     	; 0x84be <_printf_fn+0x3ec>
    8468:	51 01       	movw	r10, r2
    846a:	24 e0       	ldi	r18, 0x04	; 4
    846c:	a2 0e       	add	r10, r18
    846e:	b1 1c       	adc	r11, r1
    8470:	f1 01       	movw	r30, r2
    8472:	80 81       	ld	r24, Z
    8474:	91 81       	ldd	r25, Z+1	; 0x01
    8476:	a2 81       	ldd	r26, Z+2	; 0x02
    8478:	b3 81       	ldd	r27, Z+3	; 0x03
    847a:	2f 96       	adiw	r28, 0x0f	; 15
    847c:	8c af       	std	Y+60, r24	; 0x3c
    847e:	9d af       	std	Y+61, r25	; 0x3d
    8480:	ae af       	std	Y+62, r26	; 0x3e
    8482:	bf af       	std	Y+63, r27	; 0x3f
    8484:	2f 97       	sbiw	r28, 0x0f	; 15
    8486:	a3 96       	adiw	r28, 0x23	; 35
    8488:	2e ad       	ldd	r18, Y+62	; 0x3e
    848a:	3f ad       	ldd	r19, Y+63	; 0x3f
    848c:	a3 97       	sbiw	r28, 0x23	; 35
    848e:	24 34       	cpi	r18, 0x44	; 68
    8490:	31 05       	cpc	r19, r1
    8492:	09 f0       	breq	.+2      	; 0x8496 <_printf_fn+0x3c4>
    8494:	8f c0       	rjmp	.+286    	; 0x85b4 <_printf_fn+0x4e2>
    8496:	b7 ff       	sbrs	r27, 7
    8498:	8a c0       	rjmp	.+276    	; 0x85ae <_printf_fn+0x4dc>
    849a:	68 94       	set
    849c:	96 f8       	bld	r9, 6
    849e:	b0 95       	com	r27
    84a0:	a0 95       	com	r26
    84a2:	90 95       	com	r25
    84a4:	81 95       	neg	r24
    84a6:	9f 4f       	sbci	r25, 0xFF	; 255
    84a8:	af 4f       	sbci	r26, 0xFF	; 255
    84aa:	bf 4f       	sbci	r27, 0xFF	; 255
    84ac:	2f 96       	adiw	r28, 0x0f	; 15
    84ae:	8c af       	std	Y+60, r24	; 0x3c
    84b0:	9d af       	std	Y+61, r25	; 0x3d
    84b2:	ae af       	std	Y+62, r26	; 0x3e
    84b4:	bf af       	std	Y+63, r27	; 0x3f
    84b6:	2f 97       	sbiw	r28, 0x0f	; 15
    84b8:	7a c0       	rjmp	.+244    	; 0x85ae <_printf_fn+0x4dc>
    84ba:	81 e0       	ldi	r24, 0x01	; 1
    84bc:	90 e0       	ldi	r25, 0x00	; 0
    84be:	51 01       	movw	r10, r2
    84c0:	38 e0       	ldi	r19, 0x08	; 8
    84c2:	43 16       	cp	r4, r19
    84c4:	51 04       	cpc	r5, r1
    84c6:	09 f0       	breq	.+2      	; 0x84ca <_printf_fn+0x3f8>
    84c8:	7c c0       	rjmp	.+248    	; 0x85c2 <_printf_fn+0x4f0>
    84ca:	48 e0       	ldi	r20, 0x08	; 8
    84cc:	a4 0e       	add	r10, r20
    84ce:	b1 1c       	adc	r11, r1
    84d0:	d1 01       	movw	r26, r2
    84d2:	fc 90       	ld	r15, X
    84d4:	f1 01       	movw	r30, r2
    84d6:	01 81       	ldd	r16, Z+1	; 0x01
    84d8:	12 81       	ldd	r17, Z+2	; 0x02
    84da:	f3 81       	ldd	r31, Z+3	; 0x03
    84dc:	aa 96       	adiw	r28, 0x2a	; 42
    84de:	ff af       	std	Y+63, r31	; 0x3f
    84e0:	aa 97       	sbiw	r28, 0x2a	; 42
    84e2:	f1 01       	movw	r30, r2
    84e4:	f4 81       	ldd	r31, Z+4	; 0x04
    84e6:	ab 96       	adiw	r28, 0x2b	; 43
    84e8:	ff af       	std	Y+63, r31	; 0x3f
    84ea:	ab 97       	sbiw	r28, 0x2b	; 43
    84ec:	f1 01       	movw	r30, r2
    84ee:	b5 81       	ldd	r27, Z+5	; 0x05
    84f0:	f6 81       	ldd	r31, Z+6	; 0x06
    84f2:	af 96       	adiw	r28, 0x2f	; 47
    84f4:	ff af       	std	Y+63, r31	; 0x3f
    84f6:	af 97       	sbiw	r28, 0x2f	; 47
    84f8:	f1 01       	movw	r30, r2
    84fa:	37 80       	ldd	r3, Z+7	; 0x07
    84fc:	24 96       	adiw	r28, 0x04	; 4
    84fe:	ff ae       	std	Y+63, r15	; 0x3f
    8500:	24 97       	sbiw	r28, 0x04	; 4
    8502:	25 96       	adiw	r28, 0x05	; 5
    8504:	0f af       	std	Y+63, r16	; 0x3f
    8506:	25 97       	sbiw	r28, 0x05	; 5
    8508:	26 96       	adiw	r28, 0x06	; 6
    850a:	1f af       	std	Y+63, r17	; 0x3f
    850c:	26 97       	sbiw	r28, 0x06	; 6
    850e:	aa 96       	adiw	r28, 0x2a	; 42
    8510:	ff ad       	ldd	r31, Y+63	; 0x3f
    8512:	aa 97       	sbiw	r28, 0x2a	; 42
    8514:	27 96       	adiw	r28, 0x07	; 7
    8516:	ff af       	std	Y+63, r31	; 0x3f
    8518:	27 97       	sbiw	r28, 0x07	; 7
    851a:	ab 96       	adiw	r28, 0x2b	; 43
    851c:	ef ad       	ldd	r30, Y+63	; 0x3f
    851e:	ab 97       	sbiw	r28, 0x2b	; 43
    8520:	28 96       	adiw	r28, 0x08	; 8
    8522:	ef af       	std	Y+63, r30	; 0x3f
    8524:	28 97       	sbiw	r28, 0x08	; 8
    8526:	29 96       	adiw	r28, 0x09	; 9
    8528:	bf af       	std	Y+63, r27	; 0x3f
    852a:	29 97       	sbiw	r28, 0x09	; 9
    852c:	af 96       	adiw	r28, 0x2f	; 47
    852e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8530:	af 97       	sbiw	r28, 0x2f	; 47
    8532:	2a 96       	adiw	r28, 0x0a	; 10
    8534:	ff af       	std	Y+63, r31	; 0x3f
    8536:	2a 97       	sbiw	r28, 0x0a	; 10
    8538:	2b 96       	adiw	r28, 0x0b	; 11
    853a:	3f ae       	std	Y+63, r3	; 0x3f
    853c:	2b 97       	sbiw	r28, 0x0b	; 11
    853e:	89 2b       	or	r24, r25
    8540:	09 f4       	brne	.+2      	; 0x8544 <_printf_fn+0x472>
    8542:	4a c0       	rjmp	.+148    	; 0x85d8 <_printf_fn+0x506>
    8544:	2f 2d       	mov	r18, r15
    8546:	30 2f       	mov	r19, r16
    8548:	41 2f       	mov	r20, r17
    854a:	aa 96       	adiw	r28, 0x2a	; 42
    854c:	5f ad       	ldd	r21, Y+63	; 0x3f
    854e:	aa 97       	sbiw	r28, 0x2a	; 42
    8550:	6e 2f       	mov	r22, r30
    8552:	7b 2f       	mov	r23, r27
    8554:	8f 2f       	mov	r24, r31
    8556:	93 2d       	mov	r25, r3
    8558:	a0 e0       	ldi	r26, 0x00	; 0
    855a:	0e 94 9a e3 	call	0x1c734	; 0x1c734 <__cmpdi2_s8>
    855e:	e4 f5       	brge	.+120    	; 0x85d8 <_printf_fn+0x506>
    8560:	68 94       	set
    8562:	96 f8       	bld	r9, 6
    8564:	0e 94 4c e3 	call	0x1c698	; 0x1c698 <__negdi2>
    8568:	24 96       	adiw	r28, 0x04	; 4
    856a:	2f af       	std	Y+63, r18	; 0x3f
    856c:	24 97       	sbiw	r28, 0x04	; 4
    856e:	25 96       	adiw	r28, 0x05	; 5
    8570:	3f af       	std	Y+63, r19	; 0x3f
    8572:	25 97       	sbiw	r28, 0x05	; 5
    8574:	26 96       	adiw	r28, 0x06	; 6
    8576:	4f af       	std	Y+63, r20	; 0x3f
    8578:	26 97       	sbiw	r28, 0x06	; 6
    857a:	27 96       	adiw	r28, 0x07	; 7
    857c:	5f af       	std	Y+63, r21	; 0x3f
    857e:	27 97       	sbiw	r28, 0x07	; 7
    8580:	28 96       	adiw	r28, 0x08	; 8
    8582:	6f af       	std	Y+63, r22	; 0x3f
    8584:	28 97       	sbiw	r28, 0x08	; 8
    8586:	29 96       	adiw	r28, 0x09	; 9
    8588:	7f af       	std	Y+63, r23	; 0x3f
    858a:	29 97       	sbiw	r28, 0x09	; 9
    858c:	2a 96       	adiw	r28, 0x0a	; 10
    858e:	8f af       	std	Y+63, r24	; 0x3f
    8590:	2a 97       	sbiw	r28, 0x0a	; 10
    8592:	2b 96       	adiw	r28, 0x0b	; 11
    8594:	9f af       	std	Y+63, r25	; 0x3f
    8596:	2b 97       	sbiw	r28, 0x0b	; 11
    8598:	1f c0       	rjmp	.+62     	; 0x85d8 <_printf_fn+0x506>
    859a:	22 e0       	ldi	r18, 0x02	; 2
    859c:	42 2e       	mov	r4, r18
    859e:	51 2c       	mov	r5, r1
    85a0:	6c 96       	adiw	r28, 0x1c	; 28
    85a2:	8f ad       	ldd	r24, Y+63	; 0x3f
    85a4:	6c 97       	sbiw	r28, 0x1c	; 28
    85a6:	6d 96       	adiw	r28, 0x1d	; 29
    85a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    85aa:	6d 97       	sbiw	r28, 0x1d	; 29
    85ac:	1b c0       	rjmp	.+54     	; 0x85e4 <_printf_fn+0x512>
    85ae:	94 e0       	ldi	r25, 0x04	; 4
    85b0:	49 2e       	mov	r4, r25
    85b2:	51 2c       	mov	r5, r1
    85b4:	6a 96       	adiw	r28, 0x1a	; 26
    85b6:	8f ad       	ldd	r24, Y+63	; 0x3f
    85b8:	6a 97       	sbiw	r28, 0x1a	; 26
    85ba:	6b 96       	adiw	r28, 0x1b	; 27
    85bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    85be:	6b 97       	sbiw	r28, 0x1b	; 27
    85c0:	11 c0       	rjmp	.+34     	; 0x85e4 <_printf_fn+0x512>
    85c2:	66 96       	adiw	r28, 0x16	; 22
    85c4:	8f ad       	ldd	r24, Y+63	; 0x3f
    85c6:	66 97       	sbiw	r28, 0x16	; 22
    85c8:	67 96       	adiw	r28, 0x17	; 23
    85ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    85cc:	67 97       	sbiw	r28, 0x17	; 23
    85ce:	a3 96       	adiw	r28, 0x23	; 35
    85d0:	1f ae       	std	Y+63, r1	; 0x3f
    85d2:	1e ae       	std	Y+62, r1	; 0x3e
    85d4:	a3 97       	sbiw	r28, 0x23	; 35
    85d6:	06 c0       	rjmp	.+12     	; 0x85e4 <_printf_fn+0x512>
    85d8:	68 96       	adiw	r28, 0x18	; 24
    85da:	8f ad       	ldd	r24, Y+63	; 0x3f
    85dc:	68 97       	sbiw	r28, 0x18	; 24
    85de:	69 96       	adiw	r28, 0x19	; 25
    85e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    85e2:	69 97       	sbiw	r28, 0x19	; 25
    85e4:	2f ef       	ldi	r18, 0xFF	; 255
    85e6:	62 1a       	sub	r6, r18
    85e8:	72 0a       	sbc	r7, r18
    85ea:	82 0a       	sbc	r8, r18
    85ec:	15 01       	movw	r2, r10
    85ee:	33 c0       	rjmp	.+102    	; 0x8656 <_printf_fn+0x584>
    85f0:	91 fc       	sbrc	r9, 1
    85f2:	08 c0       	rjmp	.+16     	; 0x8604 <_printf_fn+0x532>
    85f4:	68 94       	set
    85f6:	91 f8       	bld	r9, 1
    85f8:	46 e0       	ldi	r20, 0x06	; 6
    85fa:	50 e0       	ldi	r21, 0x00	; 0
    85fc:	a1 96       	adiw	r28, 0x21	; 33
    85fe:	5f af       	std	Y+63, r21	; 0x3f
    8600:	4e af       	std	Y+62, r20	; 0x3e
    8602:	a1 97       	sbiw	r28, 0x21	; 33
    8604:	d1 01       	movw	r26, r2
    8606:	8d 91       	ld	r24, X+
    8608:	9d 91       	ld	r25, X+
    860a:	0d 90       	ld	r0, X+
    860c:	bc 91       	ld	r27, X
    860e:	a0 2d       	mov	r26, r0
    8610:	a9 96       	adiw	r28, 0x29	; 41
    8612:	8c af       	std	Y+60, r24	; 0x3c
    8614:	9d af       	std	Y+61, r25	; 0x3d
    8616:	ae af       	std	Y+62, r26	; 0x3e
    8618:	bf af       	std	Y+63, r27	; 0x3f
    861a:	a9 97       	sbiw	r28, 0x29	; 41
    861c:	bf ef       	ldi	r27, 0xFF	; 255
    861e:	6b 1a       	sub	r6, r27
    8620:	7b 0a       	sbc	r7, r27
    8622:	8b 0a       	sbc	r8, r27
    8624:	f1 01       	movw	r30, r2
    8626:	34 96       	adiw	r30, 0x04	; 4
    8628:	1f 01       	movw	r2, r30
    862a:	0f c0       	rjmp	.+30     	; 0x864a <_printf_fn+0x578>
    862c:	ff ef       	ldi	r31, 0xFF	; 255
    862e:	6f 1a       	sub	r6, r31
    8630:	7f 0a       	sbc	r7, r31
    8632:	8f 0a       	sbc	r8, r31
    8634:	c5 c0       	rjmp	.+394    	; 0x87c0 <_printf_fn+0x6ee>
    8636:	2f ef       	ldi	r18, 0xFF	; 255
    8638:	62 1a       	sub	r6, r18
    863a:	72 0a       	sbc	r7, r18
    863c:	82 0a       	sbc	r8, r18
    863e:	11 c1       	rjmp	.+546    	; 0x8862 <_printf_fn+0x790>
    8640:	3f ef       	ldi	r19, 0xFF	; 255
    8642:	63 1a       	sub	r6, r19
    8644:	73 0a       	sbc	r7, r19
    8646:	83 0a       	sbc	r8, r19
    8648:	c8 c0       	rjmp	.+400    	; 0x87da <_printf_fn+0x708>
    864a:	66 96       	adiw	r28, 0x16	; 22
    864c:	8f ad       	ldd	r24, Y+63	; 0x3f
    864e:	66 97       	sbiw	r28, 0x16	; 22
    8650:	67 96       	adiw	r28, 0x17	; 23
    8652:	9f ad       	ldd	r25, Y+63	; 0x3f
    8654:	67 97       	sbiw	r28, 0x17	; 23
    8656:	a3 96       	adiw	r28, 0x23	; 35
    8658:	ee ad       	ldd	r30, Y+62	; 0x3e
    865a:	ff ad       	ldd	r31, Y+63	; 0x3f
    865c:	a3 97       	sbiw	r28, 0x23	; 35
    865e:	e2 54       	subi	r30, 0x42	; 66
    8660:	f1 09       	sbc	r31, r1
    8662:	e7 33       	cpi	r30, 0x37	; 55
    8664:	f1 05       	cpc	r31, r1
    8666:	08 f0       	brcs	.+2      	; 0x866a <_printf_fn+0x598>
    8668:	56 c1       	rjmp	.+684    	; 0x8916 <_printf_fn+0x844>
    866a:	e3 58       	subi	r30, 0x83	; 131
    866c:	ff 4f       	sbci	r31, 0xFF	; 255
    866e:	0c 94 2d e3 	jmp	0x1c65a	; 0x1c65a <__tablejump2__>
    8672:	e8 94       	clt
    8674:	94 f8       	bld	r9, 4
    8676:	e8 94       	clt
    8678:	92 f8       	bld	r9, 2
    867a:	a9 2c       	mov	r10, r9
    867c:	b1 2c       	mov	r11, r1
    867e:	a1 96       	adiw	r28, 0x21	; 33
    8680:	ce ac       	ldd	r12, Y+62	; 0x3e
    8682:	df ac       	ldd	r13, Y+63	; 0x3f
    8684:	a1 97       	sbiw	r28, 0x21	; 33
    8686:	6f 96       	adiw	r28, 0x1f	; 31
    8688:	ee ac       	ldd	r14, Y+62	; 0x3e
    868a:	ff ac       	ldd	r15, Y+63	; 0x3f
    868c:	6f 97       	sbiw	r28, 0x1f	; 31
    868e:	0a e0       	ldi	r16, 0x0A	; 10
    8690:	10 e0       	ldi	r17, 0x00	; 0
    8692:	19 c0       	rjmp	.+50     	; 0x86c6 <_printf_fn+0x5f4>
    8694:	a9 2c       	mov	r10, r9
    8696:	b1 2c       	mov	r11, r1
    8698:	a1 96       	adiw	r28, 0x21	; 33
    869a:	ce ac       	ldd	r12, Y+62	; 0x3e
    869c:	df ac       	ldd	r13, Y+63	; 0x3f
    869e:	a1 97       	sbiw	r28, 0x21	; 33
    86a0:	6f 96       	adiw	r28, 0x1f	; 31
    86a2:	ee ac       	ldd	r14, Y+62	; 0x3e
    86a4:	ff ac       	ldd	r15, Y+63	; 0x3f
    86a6:	6f 97       	sbiw	r28, 0x1f	; 31
    86a8:	02 e0       	ldi	r16, 0x02	; 2
    86aa:	10 e0       	ldi	r17, 0x00	; 0
    86ac:	0c c0       	rjmp	.+24     	; 0x86c6 <_printf_fn+0x5f4>
    86ae:	a9 2c       	mov	r10, r9
    86b0:	b1 2c       	mov	r11, r1
    86b2:	a1 96       	adiw	r28, 0x21	; 33
    86b4:	ce ac       	ldd	r12, Y+62	; 0x3e
    86b6:	df ac       	ldd	r13, Y+63	; 0x3f
    86b8:	a1 97       	sbiw	r28, 0x21	; 33
    86ba:	6f 96       	adiw	r28, 0x1f	; 31
    86bc:	ee ac       	ldd	r14, Y+62	; 0x3e
    86be:	ff ac       	ldd	r15, Y+63	; 0x3f
    86c0:	6f 97       	sbiw	r28, 0x1f	; 31
    86c2:	08 e0       	ldi	r16, 0x08	; 8
    86c4:	10 e0       	ldi	r17, 0x00	; 0
    86c6:	22 e4       	ldi	r18, 0x42	; 66
    86c8:	30 e0       	ldi	r19, 0x00	; 0
    86ca:	ae 01       	movw	r20, r28
    86cc:	4f 5f       	subi	r20, 0xFF	; 255
    86ce:	5f 4f       	sbci	r21, 0xFF	; 255
    86d0:	b2 01       	movw	r22, r4
    86d2:	7d d9       	rcall	.-3334   	; 0x79ce <p_ntoa>
    86d4:	34 c0       	rjmp	.+104    	; 0x873e <_printf_fn+0x66c>
    86d6:	a9 2c       	mov	r10, r9
    86d8:	b1 2c       	mov	r11, r1
    86da:	a1 96       	adiw	r28, 0x21	; 33
    86dc:	ce ac       	ldd	r12, Y+62	; 0x3e
    86de:	df ac       	ldd	r13, Y+63	; 0x3f
    86e0:	a1 97       	sbiw	r28, 0x21	; 33
    86e2:	6f 96       	adiw	r28, 0x1f	; 31
    86e4:	ee ac       	ldd	r14, Y+62	; 0x3e
    86e6:	ff ac       	ldd	r15, Y+63	; 0x3f
    86e8:	6f 97       	sbiw	r28, 0x1f	; 31
    86ea:	00 e1       	ldi	r16, 0x10	; 16
    86ec:	10 e0       	ldi	r17, 0x00	; 0
    86ee:	22 e4       	ldi	r18, 0x42	; 66
    86f0:	30 e0       	ldi	r19, 0x00	; 0
    86f2:	ae 01       	movw	r20, r28
    86f4:	4f 5f       	subi	r20, 0xFF	; 255
    86f6:	5f 4f       	sbci	r21, 0xFF	; 255
    86f8:	b2 01       	movw	r22, r4
    86fa:	69 d9       	rcall	.-3374   	; 0x79ce <p_ntoa>
    86fc:	6c 01       	movw	r12, r24
    86fe:	a3 96       	adiw	r28, 0x23	; 35
    8700:	6e ad       	ldd	r22, Y+62	; 0x3e
    8702:	7f ad       	ldd	r23, Y+63	; 0x3f
    8704:	a3 97       	sbiw	r28, 0x23	; 35
    8706:	67 7f       	andi	r22, 0xF7	; 247
    8708:	60 35       	cpi	r22, 0x50	; 80
    870a:	71 05       	cpc	r23, r1
    870c:	09 f0       	breq	.+2      	; 0x8710 <_printf_fn+0x63e>
    870e:	3f c0       	rjmp	.+126    	; 0x878e <_printf_fn+0x6bc>
    8710:	3a c0       	rjmp	.+116    	; 0x8786 <_printf_fn+0x6b4>
    8712:	c9 2c       	mov	r12, r9
    8714:	d1 2c       	mov	r13, r1
    8716:	a1 96       	adiw	r28, 0x21	; 33
    8718:	ee ac       	ldd	r14, Y+62	; 0x3e
    871a:	ff ac       	ldd	r15, Y+63	; 0x3f
    871c:	a1 97       	sbiw	r28, 0x21	; 33
    871e:	6f 96       	adiw	r28, 0x1f	; 31
    8720:	0e ad       	ldd	r16, Y+62	; 0x3e
    8722:	1f ad       	ldd	r17, Y+63	; 0x3f
    8724:	6f 97       	sbiw	r28, 0x1f	; 31
    8726:	22 e4       	ldi	r18, 0x42	; 66
    8728:	30 e0       	ldi	r19, 0x00	; 0
    872a:	ae 01       	movw	r20, r28
    872c:	4f 5f       	subi	r20, 0xFF	; 255
    872e:	5f 4f       	sbci	r21, 0xFF	; 255
    8730:	a9 96       	adiw	r28, 0x29	; 41
    8732:	6c ad       	ldd	r22, Y+60	; 0x3c
    8734:	7d ad       	ldd	r23, Y+61	; 0x3d
    8736:	8e ad       	ldd	r24, Y+62	; 0x3e
    8738:	9f ad       	ldd	r25, Y+63	; 0x3f
    873a:	a9 97       	sbiw	r28, 0x29	; 41
    873c:	9d d9       	rcall	.-3270   	; 0x7a78 <p_ftoa>
    873e:	93 fa       	bst	r9, 3
    8740:	00 27       	eor	r16, r16
    8742:	00 f9       	bld	r16, 0
    8744:	10 e0       	ldi	r17, 0x00	; 0
    8746:	9c 01       	movw	r18, r24
    8748:	27 c0       	rjmp	.+78     	; 0x8798 <_printf_fn+0x6c6>
    874a:	c9 2c       	mov	r12, r9
    874c:	d1 2c       	mov	r13, r1
    874e:	a1 96       	adiw	r28, 0x21	; 33
    8750:	ee ac       	ldd	r14, Y+62	; 0x3e
    8752:	ff ac       	ldd	r15, Y+63	; 0x3f
    8754:	a1 97       	sbiw	r28, 0x21	; 33
    8756:	6f 96       	adiw	r28, 0x1f	; 31
    8758:	0e ad       	ldd	r16, Y+62	; 0x3e
    875a:	1f ad       	ldd	r17, Y+63	; 0x3f
    875c:	6f 97       	sbiw	r28, 0x1f	; 31
    875e:	22 e4       	ldi	r18, 0x42	; 66
    8760:	30 e0       	ldi	r19, 0x00	; 0
    8762:	ae 01       	movw	r20, r28
    8764:	4f 5f       	subi	r20, 0xFF	; 255
    8766:	5f 4f       	sbci	r21, 0xFF	; 255
    8768:	a9 96       	adiw	r28, 0x29	; 41
    876a:	6c ad       	ldd	r22, Y+60	; 0x3c
    876c:	7d ad       	ldd	r23, Y+61	; 0x3d
    876e:	8e ad       	ldd	r24, Y+62	; 0x3e
    8770:	9f ad       	ldd	r25, Y+63	; 0x3f
    8772:	a9 97       	sbiw	r28, 0x29	; 41
    8774:	88 da       	rcall	.-2800   	; 0x7c86 <p_etoa>
    8776:	6c 01       	movw	r12, r24
    8778:	a3 96       	adiw	r28, 0x23	; 35
    877a:	4e ad       	ldd	r20, Y+62	; 0x3e
    877c:	5f ad       	ldd	r21, Y+63	; 0x3f
    877e:	a3 97       	sbiw	r28, 0x23	; 35
    8780:	45 34       	cpi	r20, 0x45	; 69
    8782:	51 05       	cpc	r21, r1
    8784:	21 f4       	brne	.+8      	; 0x878e <_printf_fn+0x6bc>
    8786:	ce 01       	movw	r24, r28
    8788:	01 96       	adiw	r24, 0x01	; 1
    878a:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <strupper>
    878e:	93 fa       	bst	r9, 3
    8790:	00 27       	eor	r16, r16
    8792:	00 f9       	bld	r16, 0
    8794:	10 e0       	ldi	r17, 0x00	; 0
    8796:	96 01       	movw	r18, r12
    8798:	6f 96       	adiw	r28, 0x1f	; 31
    879a:	4e ad       	ldd	r20, Y+62	; 0x3e
    879c:	5f ad       	ldd	r21, Y+63	; 0x3f
    879e:	6f 97       	sbiw	r28, 0x1f	; 31
    87a0:	be 01       	movw	r22, r28
    87a2:	6f 5f       	subi	r22, 0xFF	; 255
    87a4:	7f 4f       	sbci	r23, 0xFF	; 255
    87a6:	a5 96       	adiw	r28, 0x25	; 37
    87a8:	8e ad       	ldd	r24, Y+62	; 0x3e
    87aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    87ac:	a5 97       	sbiw	r28, 0x25	; 37
    87ae:	d7 db       	rcall	.-2130   	; 0x7f5e <_puts_pad>
    87b0:	b6 c0       	rjmp	.+364    	; 0x891e <_printf_fn+0x84c>
    87b2:	a3 96       	adiw	r28, 0x23	; 35
    87b4:	8e ad       	ldd	r24, Y+62	; 0x3e
    87b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    87b8:	a3 97       	sbiw	r28, 0x23	; 35
    87ba:	83 37       	cpi	r24, 0x73	; 115
    87bc:	91 05       	cpc	r25, r1
    87be:	69 f4       	brne	.+26     	; 0x87da <_printf_fn+0x708>
    87c0:	61 01       	movw	r12, r2
    87c2:	92 e0       	ldi	r25, 0x02	; 2
    87c4:	c9 0e       	add	r12, r25
    87c6:	d1 1c       	adc	r13, r1
    87c8:	d1 01       	movw	r26, r2
    87ca:	6d 91       	ld	r22, X+
    87cc:	7c 91       	ld	r23, X
    87ce:	61 15       	cp	r22, r1
    87d0:	71 05       	cpc	r23, r1
    87d2:	91 f4       	brne	.+36     	; 0x87f8 <_printf_fn+0x726>
    87d4:	6a e1       	ldi	r22, 0x1A	; 26
    87d6:	74 e0       	ldi	r23, 0x04	; 4
    87d8:	0f c0       	rjmp	.+30     	; 0x87f8 <_printf_fn+0x726>
    87da:	61 01       	movw	r12, r2
    87dc:	b2 e0       	ldi	r27, 0x02	; 2
    87de:	cb 0e       	add	r12, r27
    87e0:	d1 1c       	adc	r13, r1
    87e2:	f1 01       	movw	r30, r2
    87e4:	80 81       	ld	r24, Z
    87e6:	60 96       	adiw	r28, 0x10	; 16
    87e8:	8f af       	std	Y+63, r24	; 0x3f
    87ea:	60 97       	sbiw	r28, 0x10	; 16
    87ec:	61 96       	adiw	r28, 0x11	; 17
    87ee:	1f ae       	std	Y+63, r1	; 0x3f
    87f0:	61 97       	sbiw	r28, 0x11	; 17
    87f2:	be 01       	movw	r22, r28
    87f4:	61 5b       	subi	r22, 0xB1	; 177
    87f6:	7f 4f       	sbci	r23, 0xFF	; 255
    87f8:	fb 01       	movw	r30, r22
    87fa:	01 90       	ld	r0, Z+
    87fc:	00 20       	and	r0, r0
    87fe:	e9 f7       	brne	.-6      	; 0x87fa <_printf_fn+0x728>
    8800:	31 97       	sbiw	r30, 0x01	; 1
    8802:	e6 1b       	sub	r30, r22
    8804:	f7 0b       	sbc	r31, r23
    8806:	a1 96       	adiw	r28, 0x21	; 33
    8808:	2e ad       	ldd	r18, Y+62	; 0x3e
    880a:	3f ad       	ldd	r19, Y+63	; 0x3f
    880c:	a1 97       	sbiw	r28, 0x21	; 33
    880e:	23 2b       	or	r18, r19
    8810:	21 f4       	brne	.+8      	; 0x881a <_printf_fn+0x748>
    8812:	a1 96       	adiw	r28, 0x21	; 33
    8814:	ff af       	std	Y+63, r31	; 0x3f
    8816:	ee af       	std	Y+62, r30	; 0x3e
    8818:	a1 97       	sbiw	r28, 0x21	; 33
    881a:	6f 96       	adiw	r28, 0x1f	; 31
    881c:	4e ad       	ldd	r20, Y+62	; 0x3e
    881e:	5f ad       	ldd	r21, Y+63	; 0x3f
    8820:	6f 97       	sbiw	r28, 0x1f	; 31
    8822:	a1 96       	adiw	r28, 0x21	; 33
    8824:	8e ad       	ldd	r24, Y+62	; 0x3e
    8826:	9f ad       	ldd	r25, Y+63	; 0x3f
    8828:	a1 97       	sbiw	r28, 0x21	; 33
    882a:	48 17       	cp	r20, r24
    882c:	59 07       	cpc	r21, r25
    882e:	3c f4       	brge	.+14     	; 0x883e <_printf_fn+0x76c>
    8830:	41 15       	cp	r20, r1
    8832:	51 05       	cpc	r21, r1
    8834:	21 f0       	breq	.+8      	; 0x883e <_printf_fn+0x76c>
    8836:	a1 96       	adiw	r28, 0x21	; 33
    8838:	5f af       	std	Y+63, r21	; 0x3f
    883a:	4e af       	std	Y+62, r20	; 0x3e
    883c:	a1 97       	sbiw	r28, 0x21	; 33
    883e:	93 fa       	bst	r9, 3
    8840:	00 27       	eor	r16, r16
    8842:	00 f9       	bld	r16, 0
    8844:	10 e0       	ldi	r17, 0x00	; 0
    8846:	a1 96       	adiw	r28, 0x21	; 33
    8848:	2e ad       	ldd	r18, Y+62	; 0x3e
    884a:	3f ad       	ldd	r19, Y+63	; 0x3f
    884c:	a1 97       	sbiw	r28, 0x21	; 33
    884e:	6f 96       	adiw	r28, 0x1f	; 31
    8850:	4e ad       	ldd	r20, Y+62	; 0x3e
    8852:	5f ad       	ldd	r21, Y+63	; 0x3f
    8854:	6f 97       	sbiw	r28, 0x1f	; 31
    8856:	a5 96       	adiw	r28, 0x25	; 37
    8858:	8e ad       	ldd	r24, Y+62	; 0x3e
    885a:	9f ad       	ldd	r25, Y+63	; 0x3f
    885c:	a5 97       	sbiw	r28, 0x25	; 37
    885e:	7f db       	rcall	.-2306   	; 0x7f5e <_puts_pad>
    8860:	45 c0       	rjmp	.+138    	; 0x88ec <_printf_fn+0x81a>
    8862:	61 01       	movw	r12, r2
    8864:	92 e0       	ldi	r25, 0x02	; 2
    8866:	c9 0e       	add	r12, r25
    8868:	d1 1c       	adc	r13, r1
    886a:	d1 01       	movw	r26, r2
    886c:	2d 90       	ld	r2, X+
    886e:	3c 90       	ld	r3, X
    8870:	41 2c       	mov	r4, r1
    8872:	21 14       	cp	r2, r1
    8874:	31 04       	cpc	r3, r1
    8876:	41 04       	cpc	r4, r1
    8878:	29 f4       	brne	.+10     	; 0x8884 <_printf_fn+0x7b2>
    887a:	ae 96       	adiw	r28, 0x2e	; 46
    887c:	2d ac       	ldd	r2, Y+61	; 0x3d
    887e:	3e ac       	ldd	r3, Y+62	; 0x3e
    8880:	4f ac       	ldd	r4, Y+63	; 0x3f
    8882:	ae 97       	sbiw	r28, 0x2e	; 46
    8884:	84 2d       	mov	r24, r4
    8886:	b1 01       	movw	r22, r2
    8888:	08 dc       	rcall	.-2032   	; 0x809a <strlen_X>
    888a:	a1 96       	adiw	r28, 0x21	; 33
    888c:	ee ad       	ldd	r30, Y+62	; 0x3e
    888e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8890:	a1 97       	sbiw	r28, 0x21	; 33
    8892:	ef 2b       	or	r30, r31
    8894:	31 f4       	brne	.+12     	; 0x88a2 <_printf_fn+0x7d0>
    8896:	a0 96       	adiw	r28, 0x20	; 32
    8898:	8f af       	std	Y+63, r24	; 0x3f
    889a:	a0 97       	sbiw	r28, 0x20	; 32
    889c:	a1 96       	adiw	r28, 0x21	; 33
    889e:	9f af       	std	Y+63, r25	; 0x3f
    88a0:	a1 97       	sbiw	r28, 0x21	; 33
    88a2:	6f 96       	adiw	r28, 0x1f	; 31
    88a4:	2e ad       	ldd	r18, Y+62	; 0x3e
    88a6:	3f ad       	ldd	r19, Y+63	; 0x3f
    88a8:	6f 97       	sbiw	r28, 0x1f	; 31
    88aa:	a1 96       	adiw	r28, 0x21	; 33
    88ac:	4e ad       	ldd	r20, Y+62	; 0x3e
    88ae:	5f ad       	ldd	r21, Y+63	; 0x3f
    88b0:	a1 97       	sbiw	r28, 0x21	; 33
    88b2:	24 17       	cp	r18, r20
    88b4:	35 07       	cpc	r19, r21
    88b6:	3c f4       	brge	.+14     	; 0x88c6 <_printf_fn+0x7f4>
    88b8:	21 15       	cp	r18, r1
    88ba:	31 05       	cpc	r19, r1
    88bc:	21 f0       	breq	.+8      	; 0x88c6 <_printf_fn+0x7f4>
    88be:	a1 96       	adiw	r28, 0x21	; 33
    88c0:	3f af       	std	Y+63, r19	; 0x3f
    88c2:	2e af       	std	Y+62, r18	; 0x3e
    88c4:	a1 97       	sbiw	r28, 0x21	; 33
    88c6:	93 fa       	bst	r9, 3
    88c8:	ee 24       	eor	r14, r14
    88ca:	e0 f8       	bld	r14, 0
    88cc:	f1 2c       	mov	r15, r1
    88ce:	a1 96       	adiw	r28, 0x21	; 33
    88d0:	0e ad       	ldd	r16, Y+62	; 0x3e
    88d2:	1f ad       	ldd	r17, Y+63	; 0x3f
    88d4:	a1 97       	sbiw	r28, 0x21	; 33
    88d6:	6f 96       	adiw	r28, 0x1f	; 31
    88d8:	2e ad       	ldd	r18, Y+62	; 0x3e
    88da:	3f ad       	ldd	r19, Y+63	; 0x3f
    88dc:	6f 97       	sbiw	r28, 0x1f	; 31
    88de:	64 2d       	mov	r22, r4
    88e0:	a1 01       	movw	r20, r2
    88e2:	a5 96       	adiw	r28, 0x25	; 37
    88e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    88e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    88e8:	a5 97       	sbiw	r28, 0x25	; 37
    88ea:	7b db       	rcall	.-2314   	; 0x7fe2 <_puts_pad_X>
    88ec:	16 01       	movw	r2, r12
    88ee:	17 c0       	rjmp	.+46     	; 0x891e <_printf_fn+0x84c>
    88f0:	f6 01       	movw	r30, r12
    88f2:	5e 2d       	mov	r21, r14
    88f4:	0e 94 93 e3 	call	0x1c726	; 0x1c726 <__xload_1>
    88f8:	66 23       	and	r22, r22
    88fa:	89 f0       	breq	.+34     	; 0x891e <_printf_fn+0x84c>
    88fc:	5f ef       	ldi	r21, 0xFF	; 255
    88fe:	c5 1a       	sub	r12, r21
    8900:	d5 0a       	sbc	r13, r21
    8902:	e5 0a       	sbc	r14, r21
    8904:	a5 96       	adiw	r28, 0x25	; 37
    8906:	ae ad       	ldd	r26, Y+62	; 0x3e
    8908:	bf ad       	ldd	r27, Y+63	; 0x3f
    890a:	a5 97       	sbiw	r28, 0x25	; 37
    890c:	ed 91       	ld	r30, X+
    890e:	fc 91       	ld	r31, X
    8910:	11 97       	sbiw	r26, 0x01	; 1
    8912:	cd 01       	movw	r24, r26
    8914:	09 95       	icall
    8916:	6c 14       	cp	r6, r12
    8918:	7d 04       	cpc	r7, r13
    891a:	8e 04       	cpc	r8, r14
    891c:	48 f7       	brcc	.-46     	; 0x88f0 <_printf_fn+0x81e>
    891e:	e8 2c       	mov	r14, r8
    8920:	63 01       	movw	r12, r6
    8922:	0f cc       	rjmp	.-2018   	; 0x8142 <_printf_fn+0x70>
    8924:	82 e0       	ldi	r24, 0x02	; 2
    8926:	48 2e       	mov	r4, r24
    8928:	51 2c       	mov	r5, r1
    892a:	0d cd       	rjmp	.-1510   	; 0x8346 <_printf_fn+0x274>
    892c:	f2 e0       	ldi	r31, 0x02	; 2
    892e:	4f 16       	cp	r4, r31
    8930:	51 04       	cpc	r5, r1
    8932:	61 f4       	brne	.+24     	; 0x894c <_printf_fn+0x87a>
    8934:	51 01       	movw	r10, r2
    8936:	b2 e0       	ldi	r27, 0x02	; 2
    8938:	ab 0e       	add	r10, r27
    893a:	b1 1c       	adc	r11, r1
    893c:	f1 01       	movw	r30, r2
    893e:	80 81       	ld	r24, Z
    8940:	91 81       	ldd	r25, Z+1	; 0x01
    8942:	65 96       	adiw	r28, 0x15	; 21
    8944:	9f af       	std	Y+63, r25	; 0x3f
    8946:	8e af       	std	Y+62, r24	; 0x3e
    8948:	65 97       	sbiw	r28, 0x15	; 21
    894a:	7e cd       	rjmp	.-1284   	; 0x8448 <_printf_fn+0x376>
    894c:	f4 e0       	ldi	r31, 0x04	; 4
    894e:	4f 16       	cp	r4, r31
    8950:	51 04       	cpc	r5, r1
    8952:	09 f0       	breq	.+2      	; 0x8956 <_printf_fn+0x884>
    8954:	b2 cd       	rjmp	.-1180   	; 0x84ba <_printf_fn+0x3e8>
    8956:	51 01       	movw	r10, r2
    8958:	24 e0       	ldi	r18, 0x04	; 4
    895a:	a2 0e       	add	r10, r18
    895c:	b1 1c       	adc	r11, r1
    895e:	f1 01       	movw	r30, r2
    8960:	80 81       	ld	r24, Z
    8962:	91 81       	ldd	r25, Z+1	; 0x01
    8964:	a2 81       	ldd	r26, Z+2	; 0x02
    8966:	b3 81       	ldd	r27, Z+3	; 0x03
    8968:	2f 96       	adiw	r28, 0x0f	; 15
    896a:	8c af       	std	Y+60, r24	; 0x3c
    896c:	9d af       	std	Y+61, r25	; 0x3d
    896e:	ae af       	std	Y+62, r26	; 0x3e
    8970:	bf af       	std	Y+63, r27	; 0x3f
    8972:	2f 97       	sbiw	r28, 0x0f	; 15
    8974:	90 cd       	rjmp	.-1248   	; 0x8496 <_printf_fn+0x3c4>
    8976:	c2 59       	subi	r28, 0x92	; 146
    8978:	df 4f       	sbci	r29, 0xFF	; 255
    897a:	e2 e1       	ldi	r30, 0x12	; 18
    897c:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

00008980 <vsnprintf_P>:
    8980:	a8 e0       	ldi	r26, 0x08	; 8
    8982:	b0 e0       	ldi	r27, 0x00	; 0
    8984:	e6 ec       	ldi	r30, 0xC6	; 198
    8986:	f4 e4       	ldi	r31, 0x44	; 68
    8988:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__prologue_saves__+0x18>
    898c:	7c 01       	movw	r14, r24
    898e:	cb 01       	movw	r24, r22
    8990:	64 2f       	mov	r22, r20
    8992:	a9 01       	movw	r20, r18
    8994:	98 01       	movw	r18, r16
    8996:	f7 01       	movw	r30, r14
    8998:	10 82       	st	Z, r1
    899a:	ee e1       	ldi	r30, 0x1E	; 30
    899c:	fc e3       	ldi	r31, 0x3C	; 60
    899e:	fa 83       	std	Y+2, r31	; 0x02
    89a0:	e9 83       	std	Y+1, r30	; 0x01
    89a2:	9e 83       	std	Y+6, r25	; 0x06
    89a4:	8d 83       	std	Y+5, r24	; 0x05
    89a6:	18 86       	std	Y+8, r1	; 0x08
    89a8:	1f 82       	std	Y+7, r1	; 0x07
    89aa:	fc 82       	std	Y+4, r15	; 0x04
    89ac:	eb 82       	std	Y+3, r14	; 0x03
    89ae:	ce 01       	movw	r24, r28
    89b0:	01 96       	adiw	r24, 0x01	; 1
    89b2:	8f db       	rcall	.-2274   	; 0x80d2 <_printf_fn>
    89b4:	f7 01       	movw	r30, r14
    89b6:	01 90       	ld	r0, Z+
    89b8:	00 20       	and	r0, r0
    89ba:	e9 f7       	brne	.-6      	; 0x89b6 <vsnprintf_P+0x36>
    89bc:	cf 01       	movw	r24, r30
    89be:	01 97       	sbiw	r24, 0x01	; 1
    89c0:	8e 19       	sub	r24, r14
    89c2:	9f 09       	sbc	r25, r15
    89c4:	28 96       	adiw	r28, 0x08	; 8
    89c6:	e6 e0       	ldi	r30, 0x06	; 6
    89c8:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

000089cc <snprintf_P>:
    89cc:	a0 e0       	ldi	r26, 0x00	; 0
    89ce:	b0 e0       	ldi	r27, 0x00	; 0
    89d0:	ec ee       	ldi	r30, 0xEC	; 236
    89d2:	f4 e4       	ldi	r31, 0x44	; 68
    89d4:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__prologue_saves__+0x1c>
    89d8:	8e 01       	movw	r16, r28
    89da:	02 5f       	subi	r16, 0xF2	; 242
    89dc:	1f 4f       	sbci	r17, 0xFF	; 255
    89de:	2b 85       	ldd	r18, Y+11	; 0x0b
    89e0:	3c 85       	ldd	r19, Y+12	; 0x0c
    89e2:	4d 85       	ldd	r20, Y+13	; 0x0d
    89e4:	69 85       	ldd	r22, Y+9	; 0x09
    89e6:	7a 85       	ldd	r23, Y+10	; 0x0a
    89e8:	8f 81       	ldd	r24, Y+7	; 0x07
    89ea:	98 85       	ldd	r25, Y+8	; 0x08
    89ec:	c9 df       	rcall	.-110    	; 0x8980 <vsnprintf_P>
    89ee:	e4 e0       	ldi	r30, 0x04	; 4
    89f0:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

000089f4 <sprintf_P>:
    89f4:	a0 e0       	ldi	r26, 0x00	; 0
    89f6:	b0 e0       	ldi	r27, 0x00	; 0
    89f8:	e0 e0       	ldi	r30, 0x00	; 0
    89fa:	f5 e4       	ldi	r31, 0x45	; 69
    89fc:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__prologue_saves__+0x1c>
    8a00:	8e 01       	movw	r16, r28
    8a02:	04 5f       	subi	r16, 0xF4	; 244
    8a04:	1f 4f       	sbci	r17, 0xFF	; 255
    8a06:	29 85       	ldd	r18, Y+9	; 0x09
    8a08:	3a 85       	ldd	r19, Y+10	; 0x0a
    8a0a:	4b 85       	ldd	r20, Y+11	; 0x0b
    8a0c:	60 e0       	ldi	r22, 0x00	; 0
    8a0e:	74 e0       	ldi	r23, 0x04	; 4
    8a10:	8f 81       	ldd	r24, Y+7	; 0x07
    8a12:	98 85       	ldd	r25, Y+8	; 0x08
    8a14:	b5 df       	rcall	.-150    	; 0x8980 <vsnprintf_P>
    8a16:	e4 e0       	ldi	r30, 0x04	; 4
    8a18:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

00008a1c <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    8a1c:	a8 e0       	ldi	r26, 0x08	; 8
    8a1e:	b0 e0       	ldi	r27, 0x00	; 0
    8a20:	e4 e1       	ldi	r30, 0x14	; 20
    8a22:	f5 e4       	ldi	r31, 0x45	; 69
    8a24:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
    8a28:	9e 01       	movw	r18, r28
    8a2a:	23 5f       	subi	r18, 0xF3	; 243
    8a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    8a2e:	f9 01       	movw	r30, r18
    8a30:	41 91       	ld	r20, Z+
    8a32:	51 91       	ld	r21, Z+
    8a34:	61 91       	ld	r22, Z+
    8a36:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8a38:	87 e3       	ldi	r24, 0x37	; 55
    8a3a:	9c e3       	ldi	r25, 0x3C	; 60
    8a3c:	9a 83       	std	Y+2, r25	; 0x02
    8a3e:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8a40:	18 86       	std	Y+8, r1	; 0x08
    8a42:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8a44:	ce 01       	movw	r24, r28
    8a46:	01 96       	adiw	r24, 0x01	; 1
    8a48:	44 db       	rcall	.-2424   	; 0x80d2 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8a4a:	8f 81       	ldd	r24, Y+7	; 0x07
    8a4c:	98 85       	ldd	r25, Y+8	; 0x08
    8a4e:	28 96       	adiw	r28, 0x08	; 8
    8a50:	e2 e0       	ldi	r30, 0x02	; 2
    8a52:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00008a56 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8a56:	9c 01       	movw	r18, r24
    8a58:	20 53       	subi	r18, 0x30	; 48
    8a5a:	31 09       	sbc	r19, r1
    8a5c:	2a 30       	cpi	r18, 0x0A	; 10
    8a5e:	31 05       	cpc	r19, r1
    8a60:	10 f4       	brcc	.+4      	; 0x8a66 <atodigit+0x10>
    8a62:	c9 01       	movw	r24, r18
    8a64:	10 c0       	rjmp	.+32     	; 0x8a86 <atodigit+0x30>
    8a66:	9c 01       	movw	r18, r24
    8a68:	21 54       	subi	r18, 0x41	; 65
    8a6a:	31 09       	sbc	r19, r1
    8a6c:	26 30       	cpi	r18, 0x06	; 6
    8a6e:	31 05       	cpc	r19, r1
    8a70:	10 f4       	brcc	.+4      	; 0x8a76 <atodigit+0x20>
    8a72:	c7 97       	sbiw	r24, 0x37	; 55
    8a74:	08 c0       	rjmp	.+16     	; 0x8a86 <atodigit+0x30>
    8a76:	9c 01       	movw	r18, r24
    8a78:	21 56       	subi	r18, 0x61	; 97
    8a7a:	31 09       	sbc	r19, r1
    8a7c:	26 30       	cpi	r18, 0x06	; 6
    8a7e:	31 05       	cpc	r19, r1
    8a80:	28 f4       	brcc	.+10     	; 0x8a8c <atodigit+0x36>
    8a82:	87 55       	subi	r24, 0x57	; 87
    8a84:	91 09       	sbc	r25, r1
    8a86:	86 17       	cp	r24, r22
    8a88:	97 07       	cpc	r25, r23
    8a8a:	14 f0       	brlt	.+4      	; 0x8a90 <atodigit+0x3a>
    8a8c:	8f ef       	ldi	r24, 0xFF	; 255
    8a8e:	9f ef       	ldi	r25, 0xFF	; 255
    8a90:	08 95       	ret

00008a92 <strtol>:
    8a92:	a0 e0       	ldi	r26, 0x00	; 0
    8a94:	b0 e0       	ldi	r27, 0x00	; 0
    8a96:	ef e4       	ldi	r30, 0x4F	; 79
    8a98:	f5 e4       	ldi	r31, 0x45	; 69
    8a9a:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
    8a9e:	2b 01       	movw	r4, r22
    8aa0:	8a 01       	movw	r16, r20
    8aa2:	ec 01       	movw	r28, r24
    8aa4:	28 81       	ld	r18, Y
    8aa6:	01 96       	adiw	r24, 0x01	; 1
    8aa8:	20 32       	cpi	r18, 0x20	; 32
    8aaa:	d9 f3       	breq	.-10     	; 0x8aa2 <strtol+0x10>
    8aac:	29 30       	cpi	r18, 0x09	; 9
    8aae:	c9 f3       	breq	.-14     	; 0x8aa2 <strtol+0x10>
    8ab0:	2d 32       	cpi	r18, 0x2D	; 45
    8ab2:	29 f4       	brne	.+10     	; 0x8abe <strtol+0x2c>
    8ab4:	ec 01       	movw	r28, r24
    8ab6:	66 24       	eor	r6, r6
    8ab8:	63 94       	inc	r6
    8aba:	71 2c       	mov	r7, r1
    8abc:	05 c0       	rjmp	.+10     	; 0x8ac8 <strtol+0x36>
    8abe:	2b 32       	cpi	r18, 0x2B	; 43
    8ac0:	09 f4       	brne	.+2      	; 0x8ac4 <strtol+0x32>
    8ac2:	ec 01       	movw	r28, r24
    8ac4:	61 2c       	mov	r6, r1
    8ac6:	71 2c       	mov	r7, r1
    8ac8:	9e 01       	movw	r18, r28
    8aca:	2f 5f       	subi	r18, 0xFF	; 255
    8acc:	3f 4f       	sbci	r19, 0xFF	; 255
    8ace:	88 81       	ld	r24, Y
    8ad0:	80 33       	cpi	r24, 0x30	; 48
    8ad2:	11 f4       	brne	.+4      	; 0x8ad8 <strtol+0x46>
    8ad4:	e9 01       	movw	r28, r18
    8ad6:	f8 cf       	rjmp	.-16     	; 0x8ac8 <strtol+0x36>
    8ad8:	c1 2c       	mov	r12, r1
    8ada:	d1 2c       	mov	r13, r1
    8adc:	76 01       	movw	r14, r12
    8ade:	48 01       	movw	r8, r16
    8ae0:	01 2e       	mov	r0, r17
    8ae2:	00 0c       	add	r0, r0
    8ae4:	aa 08       	sbc	r10, r10
    8ae6:	bb 08       	sbc	r11, r11
    8ae8:	3c 2e       	mov	r3, r28
    8aea:	2d 2e       	mov	r2, r29
    8aec:	89 91       	ld	r24, Y+
    8aee:	88 23       	and	r24, r24
    8af0:	31 f0       	breq	.+12     	; 0x8afe <strtol+0x6c>
    8af2:	b8 01       	movw	r22, r16
    8af4:	90 e0       	ldi	r25, 0x00	; 0
    8af6:	af df       	rcall	.-162    	; 0x8a56 <atodigit>
    8af8:	fc 01       	movw	r30, r24
    8afa:	97 ff       	sbrs	r25, 7
    8afc:	0c c0       	rjmp	.+24     	; 0x8b16 <strtol+0x84>
    8afe:	61 14       	cp	r6, r1
    8b00:	71 04       	cpc	r7, r1
    8b02:	c1 f0       	breq	.+48     	; 0x8b34 <strtol+0xa2>
    8b04:	f0 94       	com	r15
    8b06:	e0 94       	com	r14
    8b08:	d0 94       	com	r13
    8b0a:	c0 94       	com	r12
    8b0c:	c1 1c       	adc	r12, r1
    8b0e:	d1 1c       	adc	r13, r1
    8b10:	e1 1c       	adc	r14, r1
    8b12:	f1 1c       	adc	r15, r1
    8b14:	0f c0       	rjmp	.+30     	; 0x8b34 <strtol+0xa2>
    8b16:	a5 01       	movw	r20, r10
    8b18:	94 01       	movw	r18, r8
    8b1a:	c7 01       	movw	r24, r14
    8b1c:	b6 01       	movw	r22, r12
    8b1e:	0e 94 ad e2 	call	0x1c55a	; 0x1c55a <__mulsi3>
    8b22:	6f 01       	movw	r12, r30
    8b24:	ff 0f       	add	r31, r31
    8b26:	ee 08       	sbc	r14, r14
    8b28:	ff 08       	sbc	r15, r15
    8b2a:	c6 0e       	add	r12, r22
    8b2c:	d7 1e       	adc	r13, r23
    8b2e:	e8 1e       	adc	r14, r24
    8b30:	f9 1e       	adc	r15, r25
    8b32:	da cf       	rjmp	.-76     	; 0x8ae8 <strtol+0x56>
    8b34:	41 14       	cp	r4, r1
    8b36:	51 04       	cpc	r5, r1
    8b38:	19 f0       	breq	.+6      	; 0x8b40 <strtol+0xae>
    8b3a:	f2 01       	movw	r30, r4
    8b3c:	30 82       	st	Z, r3
    8b3e:	21 82       	std	Z+1, r2	; 0x01
    8b40:	c7 01       	movw	r24, r14
    8b42:	b6 01       	movw	r22, r12
    8b44:	cd b7       	in	r28, 0x3d	; 61
    8b46:	de b7       	in	r29, 0x3e	; 62
    8b48:	e2 e1       	ldi	r30, 0x12	; 18
    8b4a:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

00008b4e <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8b4e:	4a e0       	ldi	r20, 0x0A	; 10
    8b50:	50 e0       	ldi	r21, 0x00	; 0
    8b52:	60 e0       	ldi	r22, 0x00	; 0
    8b54:	70 e0       	ldi	r23, 0x00	; 0
    8b56:	9d df       	rcall	.-198    	; 0x8a92 <strtol>
    return((int)num);
}
    8b58:	cb 01       	movw	r24, r22
    8b5a:	08 95       	ret

00008b5c <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8b5c:	4a e0       	ldi	r20, 0x0A	; 10
    8b5e:	50 e0       	ldi	r21, 0x00	; 0
    8b60:	60 e0       	ldi	r22, 0x00	; 0
    8b62:	70 e0       	ldi	r23, 0x00	; 0
    8b64:	96 cf       	rjmp	.-212    	; 0x8a92 <strtol>
    return(num);
}
    8b66:	08 95       	ret

00008b68 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8b68:	fc 01       	movw	r30, r24
    8b6a:	62 81       	ldd	r22, Z+2	; 0x02
    8b6c:	73 81       	ldd	r23, Z+3	; 0x03
    8b6e:	cb 01       	movw	r24, r22
    8b70:	a0 e0       	ldi	r26, 0x00	; 0
    8b72:	b0 e0       	ldi	r27, 0x00	; 0
    8b74:	ba 2f       	mov	r27, r26
    8b76:	a9 2f       	mov	r26, r25
    8b78:	98 2f       	mov	r25, r24
    8b7a:	88 27       	eor	r24, r24
    8b7c:	21 81       	ldd	r18, Z+1	; 0x01
    8b7e:	82 2b       	or	r24, r18
    8b80:	ba 2f       	mov	r27, r26
    8b82:	a9 2f       	mov	r26, r25
    8b84:	98 2f       	mov	r25, r24
    8b86:	88 27       	eor	r24, r24
    8b88:	20 81       	ld	r18, Z
    8b8a:	bc 01       	movw	r22, r24
    8b8c:	cd 01       	movw	r24, r26
    8b8e:	62 2b       	or	r22, r18
    8b90:	08 95       	ret

00008b92 <st_dword>:
    8b92:	fc 01       	movw	r30, r24
    8b94:	40 83       	st	Z, r20
    8b96:	51 83       	std	Z+1, r21	; 0x01
    8b98:	62 83       	std	Z+2, r22	; 0x02
    8b9a:	73 83       	std	Z+3, r23	; 0x03
    8b9c:	08 95       	ret

00008b9e <mem_set>:
    8b9e:	48 0f       	add	r20, r24
    8ba0:	59 1f       	adc	r21, r25
    8ba2:	fc 01       	movw	r30, r24
    8ba4:	61 93       	st	Z+, r22
    8ba6:	cf 01       	movw	r24, r30
    8ba8:	e4 17       	cp	r30, r20
    8baa:	f5 07       	cpc	r31, r21
    8bac:	d1 f7       	brne	.-12     	; 0x8ba2 <mem_set+0x4>
    8bae:	08 95       	ret

00008bb0 <mem_cmp>:
    8bb0:	dc 01       	movw	r26, r24
    8bb2:	fb 01       	movw	r30, r22
    8bb4:	2d 91       	ld	r18, X+
    8bb6:	81 91       	ld	r24, Z+
    8bb8:	30 e0       	ldi	r19, 0x00	; 0
    8bba:	b9 01       	movw	r22, r18
    8bbc:	68 1b       	sub	r22, r24
    8bbe:	71 09       	sbc	r23, r1
    8bc0:	cb 01       	movw	r24, r22
    8bc2:	41 50       	subi	r20, 0x01	; 1
    8bc4:	51 09       	sbc	r21, r1
    8bc6:	11 f0       	breq	.+4      	; 0x8bcc <mem_cmp+0x1c>
    8bc8:	00 97       	sbiw	r24, 0x00	; 0
    8bca:	a1 f3       	breq	.-24     	; 0x8bb4 <mem_cmp+0x4>
    8bcc:	08 95       	ret

00008bce <tchar2uni>:
    8bce:	0f 93       	push	r16
    8bd0:	1f 93       	push	r17
    8bd2:	fc 01       	movw	r30, r24
    8bd4:	a0 81       	ld	r26, Z
    8bd6:	b1 81       	ldd	r27, Z+1	; 0x01
    8bd8:	fd 01       	movw	r30, r26
    8bda:	31 96       	adiw	r30, 0x01	; 1
    8bdc:	4c 91       	ld	r20, X
    8bde:	47 fd       	sbrc	r20, 7
    8be0:	04 c0       	rjmp	.+8      	; 0x8bea <tchar2uni+0x1c>
    8be2:	50 e0       	ldi	r21, 0x00	; 0
    8be4:	60 e0       	ldi	r22, 0x00	; 0
    8be6:	70 e0       	ldi	r23, 0x00	; 0
    8be8:	68 c0       	rjmp	.+208    	; 0x8cba <tchar2uni+0xec>
    8bea:	24 2f       	mov	r18, r20
    8bec:	20 7e       	andi	r18, 0xE0	; 224
    8bee:	20 3c       	cpi	r18, 0xC0	; 192
    8bf0:	39 f4       	brne	.+14     	; 0x8c00 <tchar2uni+0x32>
    8bf2:	4f 71       	andi	r20, 0x1F	; 31
    8bf4:	50 e0       	ldi	r21, 0x00	; 0
    8bf6:	60 e0       	ldi	r22, 0x00	; 0
    8bf8:	70 e0       	ldi	r23, 0x00	; 0
    8bfa:	21 e0       	ldi	r18, 0x01	; 1
    8bfc:	30 e0       	ldi	r19, 0x00	; 0
    8bfe:	16 c0       	rjmp	.+44     	; 0x8c2c <tchar2uni+0x5e>
    8c00:	24 2f       	mov	r18, r20
    8c02:	20 7f       	andi	r18, 0xF0	; 240
    8c04:	20 3e       	cpi	r18, 0xE0	; 224
    8c06:	39 f4       	brne	.+14     	; 0x8c16 <tchar2uni+0x48>
    8c08:	4f 70       	andi	r20, 0x0F	; 15
    8c0a:	50 e0       	ldi	r21, 0x00	; 0
    8c0c:	60 e0       	ldi	r22, 0x00	; 0
    8c0e:	70 e0       	ldi	r23, 0x00	; 0
    8c10:	22 e0       	ldi	r18, 0x02	; 2
    8c12:	30 e0       	ldi	r19, 0x00	; 0
    8c14:	0b c0       	rjmp	.+22     	; 0x8c2c <tchar2uni+0x5e>
    8c16:	24 2f       	mov	r18, r20
    8c18:	28 7f       	andi	r18, 0xF8	; 248
    8c1a:	20 3f       	cpi	r18, 0xF0	; 240
    8c1c:	09 f0       	breq	.+2      	; 0x8c20 <tchar2uni+0x52>
    8c1e:	54 c0       	rjmp	.+168    	; 0x8cc8 <tchar2uni+0xfa>
    8c20:	47 70       	andi	r20, 0x07	; 7
    8c22:	50 e0       	ldi	r21, 0x00	; 0
    8c24:	60 e0       	ldi	r22, 0x00	; 0
    8c26:	70 e0       	ldi	r23, 0x00	; 0
    8c28:	23 e0       	ldi	r18, 0x03	; 3
    8c2a:	30 e0       	ldi	r19, 0x00	; 0
    8c2c:	31 96       	adiw	r30, 0x01	; 1
    8c2e:	df 01       	movw	r26, r30
    8c30:	11 97       	sbiw	r26, 0x01	; 1
    8c32:	ac 91       	ld	r26, X
    8c34:	ba 2f       	mov	r27, r26
    8c36:	b0 7c       	andi	r27, 0xC0	; 192
    8c38:	b0 38       	cpi	r27, 0x80	; 128
    8c3a:	09 f0       	breq	.+2      	; 0x8c3e <tchar2uni+0x70>
    8c3c:	45 c0       	rjmp	.+138    	; 0x8cc8 <tchar2uni+0xfa>
    8c3e:	b6 e0       	ldi	r27, 0x06	; 6
    8c40:	44 0f       	add	r20, r20
    8c42:	55 1f       	adc	r21, r21
    8c44:	66 1f       	adc	r22, r22
    8c46:	77 1f       	adc	r23, r23
    8c48:	ba 95       	dec	r27
    8c4a:	d1 f7       	brne	.-12     	; 0x8c40 <tchar2uni+0x72>
    8c4c:	af 73       	andi	r26, 0x3F	; 63
    8c4e:	4a 2b       	or	r20, r26
    8c50:	21 50       	subi	r18, 0x01	; 1
    8c52:	31 09       	sbc	r19, r1
    8c54:	59 f7       	brne	.-42     	; 0x8c2c <tchar2uni+0x5e>
    8c56:	8a 01       	movw	r16, r20
    8c58:	9b 01       	movw	r18, r22
    8c5a:	00 58       	subi	r16, 0x80	; 128
    8c5c:	11 09       	sbc	r17, r1
    8c5e:	21 09       	sbc	r18, r1
    8c60:	31 09       	sbc	r19, r1
    8c62:	00 38       	cpi	r16, 0x80	; 128
    8c64:	1f 4f       	sbci	r17, 0xFF	; 255
    8c66:	20 41       	sbci	r18, 0x10	; 16
    8c68:	31 05       	cpc	r19, r1
    8c6a:	70 f5       	brcc	.+92     	; 0x8cc8 <tchar2uni+0xfa>
    8c6c:	8a 01       	movw	r16, r20
    8c6e:	9b 01       	movw	r18, r22
    8c70:	18 5d       	subi	r17, 0xD8	; 216
    8c72:	21 09       	sbc	r18, r1
    8c74:	31 09       	sbc	r19, r1
    8c76:	01 15       	cp	r16, r1
    8c78:	18 40       	sbci	r17, 0x08	; 8
    8c7a:	21 05       	cpc	r18, r1
    8c7c:	31 05       	cpc	r19, r1
    8c7e:	20 f1       	brcs	.+72     	; 0x8cc8 <tchar2uni+0xfa>
    8c80:	41 15       	cp	r20, r1
    8c82:	51 05       	cpc	r21, r1
    8c84:	21 e0       	ldi	r18, 0x01	; 1
    8c86:	62 07       	cpc	r22, r18
    8c88:	71 05       	cpc	r23, r1
    8c8a:	b8 f0       	brcs	.+46     	; 0x8cba <tchar2uni+0xec>
    8c8c:	8a 01       	movw	r16, r20
    8c8e:	9b 01       	movw	r18, r22
    8c90:	21 50       	subi	r18, 0x01	; 1
    8c92:	31 09       	sbc	r19, r1
    8c94:	a6 e0       	ldi	r26, 0x06	; 6
    8c96:	00 0f       	add	r16, r16
    8c98:	11 1f       	adc	r17, r17
    8c9a:	22 1f       	adc	r18, r18
    8c9c:	33 1f       	adc	r19, r19
    8c9e:	aa 95       	dec	r26
    8ca0:	d1 f7       	brne	.-12     	; 0x8c96 <tchar2uni+0xc8>
    8ca2:	00 27       	eor	r16, r16
    8ca4:	11 27       	eor	r17, r17
    8ca6:	33 70       	andi	r19, 0x03	; 3
    8ca8:	53 70       	andi	r21, 0x03	; 3
    8caa:	66 27       	eor	r22, r22
    8cac:	77 27       	eor	r23, r23
    8cae:	5c 6d       	ori	r21, 0xDC	; 220
    8cb0:	78 6d       	ori	r23, 0xD8	; 216
    8cb2:	40 2b       	or	r20, r16
    8cb4:	51 2b       	or	r21, r17
    8cb6:	62 2b       	or	r22, r18
    8cb8:	73 2b       	or	r23, r19
    8cba:	dc 01       	movw	r26, r24
    8cbc:	ed 93       	st	X+, r30
    8cbe:	fc 93       	st	X, r31
    8cc0:	34 2f       	mov	r19, r20
    8cc2:	25 2f       	mov	r18, r21
    8cc4:	cb 01       	movw	r24, r22
    8cc6:	04 c0       	rjmp	.+8      	; 0x8cd0 <tchar2uni+0x102>
    8cc8:	3f ef       	ldi	r19, 0xFF	; 255
    8cca:	2f ef       	ldi	r18, 0xFF	; 255
    8ccc:	8f ef       	ldi	r24, 0xFF	; 255
    8cce:	9f ef       	ldi	r25, 0xFF	; 255
    8cd0:	63 2f       	mov	r22, r19
    8cd2:	72 2f       	mov	r23, r18
    8cd4:	1f 91       	pop	r17
    8cd6:	0f 91       	pop	r16
    8cd8:	08 95       	ret

00008cda <clst2sect>:
    8cda:	0f 93       	push	r16
    8cdc:	1f 93       	push	r17
    8cde:	fc 01       	movw	r30, r24
    8ce0:	9a 01       	movw	r18, r20
    8ce2:	ab 01       	movw	r20, r22
    8ce4:	22 50       	subi	r18, 0x02	; 2
    8ce6:	31 09       	sbc	r19, r1
    8ce8:	41 09       	sbc	r20, r1
    8cea:	51 09       	sbc	r21, r1
    8cec:	81 8d       	ldd	r24, Z+25	; 0x19
    8cee:	92 8d       	ldd	r25, Z+26	; 0x1a
    8cf0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8cf2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8cf4:	02 97       	sbiw	r24, 0x02	; 2
    8cf6:	a1 09       	sbc	r26, r1
    8cf8:	b1 09       	sbc	r27, r1
    8cfa:	28 17       	cp	r18, r24
    8cfc:	39 07       	cpc	r19, r25
    8cfe:	4a 07       	cpc	r20, r26
    8d00:	5b 07       	cpc	r21, r27
    8d02:	68 f4       	brcc	.+26     	; 0x8d1e <clst2sect+0x44>
    8d04:	a1 85       	ldd	r26, Z+9	; 0x09
    8d06:	b2 85       	ldd	r27, Z+10	; 0x0a
    8d08:	0e 94 3c e3 	call	0x1c678	; 0x1c678 <__muluhisi3>
    8d0c:	05 a5       	ldd	r16, Z+45	; 0x2d
    8d0e:	16 a5       	ldd	r17, Z+46	; 0x2e
    8d10:	27 a5       	ldd	r18, Z+47	; 0x2f
    8d12:	30 a9       	ldd	r19, Z+48	; 0x30
    8d14:	60 0f       	add	r22, r16
    8d16:	71 1f       	adc	r23, r17
    8d18:	82 1f       	adc	r24, r18
    8d1a:	93 1f       	adc	r25, r19
    8d1c:	03 c0       	rjmp	.+6      	; 0x8d24 <clst2sect+0x4a>
    8d1e:	60 e0       	ldi	r22, 0x00	; 0
    8d20:	70 e0       	ldi	r23, 0x00	; 0
    8d22:	cb 01       	movw	r24, r22
    8d24:	1f 91       	pop	r17
    8d26:	0f 91       	pop	r16
    8d28:	08 95       	ret

00008d2a <clmt_clust>:
    8d2a:	cf 93       	push	r28
    8d2c:	df 93       	push	r29
    8d2e:	fc 01       	movw	r30, r24
    8d30:	c2 a1       	ldd	r28, Z+34	; 0x22
    8d32:	d3 a1       	ldd	r29, Z+35	; 0x23
    8d34:	24 96       	adiw	r28, 0x04	; 4
    8d36:	cb 01       	movw	r24, r22
    8d38:	ba 01       	movw	r22, r20
    8d3a:	29 e0       	ldi	r18, 0x09	; 9
    8d3c:	96 95       	lsr	r25
    8d3e:	87 95       	ror	r24
    8d40:	77 95       	ror	r23
    8d42:	67 95       	ror	r22
    8d44:	2a 95       	dec	r18
    8d46:	d1 f7       	brne	.-12     	; 0x8d3c <clmt_clust+0x12>
    8d48:	01 90       	ld	r0, Z+
    8d4a:	f0 81       	ld	r31, Z
    8d4c:	e0 2d       	mov	r30, r0
    8d4e:	21 85       	ldd	r18, Z+9	; 0x09
    8d50:	32 85       	ldd	r19, Z+10	; 0x0a
    8d52:	40 e0       	ldi	r20, 0x00	; 0
    8d54:	50 e0       	ldi	r21, 0x00	; 0
    8d56:	0e 94 ef e2 	call	0x1c5de	; 0x1c5de <__udivmodsi4>
    8d5a:	88 81       	ld	r24, Y
    8d5c:	99 81       	ldd	r25, Y+1	; 0x01
    8d5e:	aa 81       	ldd	r26, Y+2	; 0x02
    8d60:	bb 81       	ldd	r27, Y+3	; 0x03
    8d62:	00 97       	sbiw	r24, 0x00	; 0
    8d64:	a1 05       	cpc	r26, r1
    8d66:	b1 05       	cpc	r27, r1
    8d68:	b1 f0       	breq	.+44     	; 0x8d96 <clmt_clust+0x6c>
    8d6a:	28 17       	cp	r18, r24
    8d6c:	39 07       	cpc	r19, r25
    8d6e:	4a 07       	cpc	r20, r26
    8d70:	5b 07       	cpc	r21, r27
    8d72:	30 f0       	brcs	.+12     	; 0x8d80 <clmt_clust+0x56>
    8d74:	28 1b       	sub	r18, r24
    8d76:	39 0b       	sbc	r19, r25
    8d78:	4a 0b       	sbc	r20, r26
    8d7a:	5b 0b       	sbc	r21, r27
    8d7c:	28 96       	adiw	r28, 0x08	; 8
    8d7e:	ed cf       	rjmp	.-38     	; 0x8d5a <clmt_clust+0x30>
    8d80:	8c 81       	ldd	r24, Y+4	; 0x04
    8d82:	9d 81       	ldd	r25, Y+5	; 0x05
    8d84:	ae 81       	ldd	r26, Y+6	; 0x06
    8d86:	bf 81       	ldd	r27, Y+7	; 0x07
    8d88:	bc 01       	movw	r22, r24
    8d8a:	cd 01       	movw	r24, r26
    8d8c:	62 0f       	add	r22, r18
    8d8e:	73 1f       	adc	r23, r19
    8d90:	84 1f       	adc	r24, r20
    8d92:	95 1f       	adc	r25, r21
    8d94:	03 c0       	rjmp	.+6      	; 0x8d9c <clmt_clust+0x72>
    8d96:	60 e0       	ldi	r22, 0x00	; 0
    8d98:	70 e0       	ldi	r23, 0x00	; 0
    8d9a:	cb 01       	movw	r24, r22
    8d9c:	df 91       	pop	r29
    8d9e:	cf 91       	pop	r28
    8da0:	08 95       	ret

00008da2 <sum_sfn>:
    8da2:	fc 01       	movw	r30, r24
    8da4:	9c 01       	movw	r18, r24
    8da6:	25 5f       	subi	r18, 0xF5	; 245
    8da8:	3f 4f       	sbci	r19, 0xFF	; 255
    8daa:	80 e0       	ldi	r24, 0x00	; 0
    8dac:	98 2f       	mov	r25, r24
    8dae:	90 fb       	bst	r25, 0
    8db0:	97 95       	ror	r25
    8db2:	97 f9       	bld	r25, 7
    8db4:	81 91       	ld	r24, Z+
    8db6:	89 0f       	add	r24, r25
    8db8:	e2 17       	cp	r30, r18
    8dba:	f3 07       	cpc	r31, r19
    8dbc:	b9 f7       	brne	.-18     	; 0x8dac <sum_sfn+0xa>
    8dbe:	08 95       	ret

00008dc0 <get_ldnumber>:
    8dc0:	cf 93       	push	r28
    8dc2:	df 93       	push	r29
    8dc4:	dc 01       	movw	r26, r24
    8dc6:	ed 91       	ld	r30, X+
    8dc8:	fc 91       	ld	r31, X
    8dca:	11 97       	sbiw	r26, 0x01	; 1
    8dcc:	30 97       	sbiw	r30, 0x00	; 0
    8dce:	f9 f0       	breq	.+62     	; 0x8e0e <get_ldnumber+0x4e>
    8dd0:	9f 01       	movw	r18, r30
    8dd2:	2f 5f       	subi	r18, 0xFF	; 255
    8dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    8dd6:	e9 01       	movw	r28, r18
    8dd8:	21 97       	sbiw	r28, 0x01	; 1
    8dda:	88 81       	ld	r24, Y
    8ddc:	80 32       	cpi	r24, 0x20	; 32
    8dde:	18 f0       	brcs	.+6      	; 0x8de6 <get_ldnumber+0x26>
    8de0:	8a 33       	cpi	r24, 0x3A	; 58
    8de2:	b9 f7       	brne	.-18     	; 0x8dd2 <get_ldnumber+0x12>
    8de4:	04 c0       	rjmp	.+8      	; 0x8dee <get_ldnumber+0x2e>
    8de6:	80 91 22 18 	lds	r24, 0x1822	; 0x801822 <CurrVol>
    8dea:	90 e0       	ldi	r25, 0x00	; 0
    8dec:	12 c0       	rjmp	.+36     	; 0x8e12 <get_ldnumber+0x52>
    8dee:	90 81       	ld	r25, Z
    8df0:	80 ed       	ldi	r24, 0xD0	; 208
    8df2:	89 0f       	add	r24, r25
    8df4:	8a 30       	cpi	r24, 0x0A	; 10
    8df6:	58 f4       	brcc	.+22     	; 0x8e0e <get_ldnumber+0x4e>
    8df8:	32 96       	adiw	r30, 0x02	; 2
    8dfa:	2e 17       	cp	r18, r30
    8dfc:	3f 07       	cpc	r19, r31
    8dfe:	39 f4       	brne	.+14     	; 0x8e0e <get_ldnumber+0x4e>
    8e00:	90 33       	cpi	r25, 0x30	; 48
    8e02:	29 f4       	brne	.+10     	; 0x8e0e <get_ldnumber+0x4e>
    8e04:	2d 93       	st	X+, r18
    8e06:	3c 93       	st	X, r19
    8e08:	80 e0       	ldi	r24, 0x00	; 0
    8e0a:	90 e0       	ldi	r25, 0x00	; 0
    8e0c:	02 c0       	rjmp	.+4      	; 0x8e12 <get_ldnumber+0x52>
    8e0e:	8f ef       	ldi	r24, 0xFF	; 255
    8e10:	9f ef       	ldi	r25, 0xFF	; 255
    8e12:	df 91       	pop	r29
    8e14:	cf 91       	pop	r28
    8e16:	08 95       	ret

00008e18 <validate>:
    8e18:	0f 93       	push	r16
    8e1a:	1f 93       	push	r17
    8e1c:	cf 93       	push	r28
    8e1e:	df 93       	push	r29
    8e20:	ec 01       	movw	r28, r24
    8e22:	8b 01       	movw	r16, r22
    8e24:	89 2b       	or	r24, r25
    8e26:	f9 f0       	breq	.+62     	; 0x8e66 <validate+0x4e>
    8e28:	e8 81       	ld	r30, Y
    8e2a:	f9 81       	ldd	r31, Y+1	; 0x01
    8e2c:	30 97       	sbiw	r30, 0x00	; 0
    8e2e:	d9 f0       	breq	.+54     	; 0x8e66 <validate+0x4e>
    8e30:	80 81       	ld	r24, Z
    8e32:	88 23       	and	r24, r24
    8e34:	c1 f0       	breq	.+48     	; 0x8e66 <validate+0x4e>
    8e36:	2a 81       	ldd	r18, Y+2	; 0x02
    8e38:	3b 81       	ldd	r19, Y+3	; 0x03
    8e3a:	85 81       	ldd	r24, Z+5	; 0x05
    8e3c:	96 81       	ldd	r25, Z+6	; 0x06
    8e3e:	28 17       	cp	r18, r24
    8e40:	39 07       	cpc	r19, r25
    8e42:	89 f4       	brne	.+34     	; 0x8e66 <validate+0x4e>
    8e44:	81 81       	ldd	r24, Z+1	; 0x01
    8e46:	0e 94 cc 68 	call	0xd198	; 0xd198 <disk_status>
    8e4a:	80 fd       	sbrc	r24, 0
    8e4c:	0c c0       	rjmp	.+24     	; 0x8e66 <validate+0x4e>
    8e4e:	28 81       	ld	r18, Y
    8e50:	39 81       	ldd	r19, Y+1	; 0x01
    8e52:	80 e0       	ldi	r24, 0x00	; 0
    8e54:	90 e0       	ldi	r25, 0x00	; 0
    8e56:	f8 01       	movw	r30, r16
    8e58:	31 83       	std	Z+1, r19	; 0x01
    8e5a:	20 83       	st	Z, r18
    8e5c:	df 91       	pop	r29
    8e5e:	cf 91       	pop	r28
    8e60:	1f 91       	pop	r17
    8e62:	0f 91       	pop	r16
    8e64:	08 95       	ret
    8e66:	89 e0       	ldi	r24, 0x09	; 9
    8e68:	90 e0       	ldi	r25, 0x00	; 0
    8e6a:	20 e0       	ldi	r18, 0x00	; 0
    8e6c:	30 e0       	ldi	r19, 0x00	; 0
    8e6e:	f3 cf       	rjmp	.-26     	; 0x8e56 <validate+0x3e>

00008e70 <mem_cpy.part.0>:
    8e70:	fb 01       	movw	r30, r22
    8e72:	48 0f       	add	r20, r24
    8e74:	59 1f       	adc	r21, r25
    8e76:	21 91       	ld	r18, Z+
    8e78:	dc 01       	movw	r26, r24
    8e7a:	2d 93       	st	X+, r18
    8e7c:	cd 01       	movw	r24, r26
    8e7e:	a4 17       	cp	r26, r20
    8e80:	b5 07       	cpc	r27, r21
    8e82:	c9 f7       	brne	.-14     	; 0x8e76 <mem_cpy.part.0+0x6>
    8e84:	08 95       	ret

00008e86 <put_utf>:
    8e86:	0f 93       	push	r16
    8e88:	1f 93       	push	r17
    8e8a:	fa 01       	movw	r30, r20
    8e8c:	60 38       	cpi	r22, 0x80	; 128
    8e8e:	71 05       	cpc	r23, r1
    8e90:	81 05       	cpc	r24, r1
    8e92:	91 05       	cpc	r25, r1
    8e94:	30 f4       	brcc	.+12     	; 0x8ea2 <put_utf+0x1c>
    8e96:	23 2b       	or	r18, r19
    8e98:	09 f4       	brne	.+2      	; 0x8e9c <put_utf+0x16>
    8e9a:	9e c0       	rjmp	.+316    	; 0x8fd8 <put_utf+0x152>
    8e9c:	60 83       	st	Z, r22
    8e9e:	81 e0       	ldi	r24, 0x01	; 1
    8ea0:	9c c0       	rjmp	.+312    	; 0x8fda <put_utf+0x154>
    8ea2:	61 15       	cp	r22, r1
    8ea4:	48 e0       	ldi	r20, 0x08	; 8
    8ea6:	74 07       	cpc	r23, r20
    8ea8:	81 05       	cpc	r24, r1
    8eaa:	91 05       	cpc	r25, r1
    8eac:	a0 f4       	brcc	.+40     	; 0x8ed6 <put_utf+0x50>
    8eae:	22 30       	cpi	r18, 0x02	; 2
    8eb0:	31 05       	cpc	r19, r1
    8eb2:	08 f4       	brcc	.+2      	; 0x8eb6 <put_utf+0x30>
    8eb4:	91 c0       	rjmp	.+290    	; 0x8fd8 <put_utf+0x152>
    8eb6:	8b 01       	movw	r16, r22
    8eb8:	9c 01       	movw	r18, r24
    8eba:	76 e0       	ldi	r23, 0x06	; 6
    8ebc:	36 95       	lsr	r19
    8ebe:	27 95       	ror	r18
    8ec0:	17 95       	ror	r17
    8ec2:	07 95       	ror	r16
    8ec4:	7a 95       	dec	r23
    8ec6:	d1 f7       	brne	.-12     	; 0x8ebc <put_utf+0x36>
    8ec8:	00 6c       	ori	r16, 0xC0	; 192
    8eca:	00 83       	st	Z, r16
    8ecc:	6f 73       	andi	r22, 0x3F	; 63
    8ece:	60 68       	ori	r22, 0x80	; 128
    8ed0:	61 83       	std	Z+1, r22	; 0x01
    8ed2:	82 e0       	ldi	r24, 0x02	; 2
    8ed4:	82 c0       	rjmp	.+260    	; 0x8fda <put_utf+0x154>
    8ed6:	61 15       	cp	r22, r1
    8ed8:	71 05       	cpc	r23, r1
    8eda:	41 e0       	ldi	r20, 0x01	; 1
    8edc:	84 07       	cpc	r24, r20
    8ede:	91 05       	cpc	r25, r1
    8ee0:	58 f5       	brcc	.+86     	; 0x8f38 <put_utf+0xb2>
    8ee2:	23 30       	cpi	r18, 0x03	; 3
    8ee4:	31 05       	cpc	r19, r1
    8ee6:	08 f4       	brcc	.+2      	; 0x8eea <put_utf+0x64>
    8ee8:	77 c0       	rjmp	.+238    	; 0x8fd8 <put_utf+0x152>
    8eea:	8b 01       	movw	r16, r22
    8eec:	9c 01       	movw	r18, r24
    8eee:	18 5d       	subi	r17, 0xD8	; 216
    8ef0:	21 09       	sbc	r18, r1
    8ef2:	31 09       	sbc	r19, r1
    8ef4:	01 15       	cp	r16, r1
    8ef6:	18 40       	sbci	r17, 0x08	; 8
    8ef8:	21 05       	cpc	r18, r1
    8efa:	31 05       	cpc	r19, r1
    8efc:	08 f4       	brcc	.+2      	; 0x8f00 <put_utf+0x7a>
    8efe:	6c c0       	rjmp	.+216    	; 0x8fd8 <put_utf+0x152>
    8f00:	8b 01       	movw	r16, r22
    8f02:	9c 01       	movw	r18, r24
    8f04:	4c e0       	ldi	r20, 0x0C	; 12
    8f06:	36 95       	lsr	r19
    8f08:	27 95       	ror	r18
    8f0a:	17 95       	ror	r17
    8f0c:	07 95       	ror	r16
    8f0e:	4a 95       	dec	r20
    8f10:	d1 f7       	brne	.-12     	; 0x8f06 <put_utf+0x80>
    8f12:	00 6e       	ori	r16, 0xE0	; 224
    8f14:	00 83       	st	Z, r16
    8f16:	8b 01       	movw	r16, r22
    8f18:	9c 01       	movw	r18, r24
    8f1a:	56 e0       	ldi	r21, 0x06	; 6
    8f1c:	36 95       	lsr	r19
    8f1e:	27 95       	ror	r18
    8f20:	17 95       	ror	r17
    8f22:	07 95       	ror	r16
    8f24:	5a 95       	dec	r21
    8f26:	d1 f7       	brne	.-12     	; 0x8f1c <put_utf+0x96>
    8f28:	0f 73       	andi	r16, 0x3F	; 63
    8f2a:	00 68       	ori	r16, 0x80	; 128
    8f2c:	01 83       	std	Z+1, r16	; 0x01
    8f2e:	6f 73       	andi	r22, 0x3F	; 63
    8f30:	60 68       	ori	r22, 0x80	; 128
    8f32:	62 83       	std	Z+2, r22	; 0x02
    8f34:	83 e0       	ldi	r24, 0x03	; 3
    8f36:	51 c0       	rjmp	.+162    	; 0x8fda <put_utf+0x154>
    8f38:	24 30       	cpi	r18, 0x04	; 4
    8f3a:	31 05       	cpc	r19, r1
    8f3c:	08 f4       	brcc	.+2      	; 0x8f40 <put_utf+0xba>
    8f3e:	4c c0       	rjmp	.+152    	; 0x8fd8 <put_utf+0x152>
    8f40:	8b 01       	movw	r16, r22
    8f42:	9c 01       	movw	r18, r24
    8f44:	00 27       	eor	r16, r16
    8f46:	11 27       	eor	r17, r17
    8f48:	38 5d       	subi	r19, 0xD8	; 216
    8f4a:	b6 e0       	ldi	r27, 0x06	; 6
    8f4c:	36 95       	lsr	r19
    8f4e:	27 95       	ror	r18
    8f50:	17 95       	ror	r17
    8f52:	07 95       	ror	r16
    8f54:	ba 95       	dec	r27
    8f56:	d1 f7       	brne	.-12     	; 0x8f4c <put_utf+0xc6>
    8f58:	01 15       	cp	r16, r1
    8f5a:	11 05       	cpc	r17, r1
    8f5c:	40 e1       	ldi	r20, 0x10	; 16
    8f5e:	24 07       	cpc	r18, r20
    8f60:	31 05       	cpc	r19, r1
    8f62:	d0 f5       	brcc	.+116    	; 0x8fd8 <put_utf+0x152>
    8f64:	dc 01       	movw	r26, r24
    8f66:	cb 01       	movw	r24, r22
    8f68:	aa 27       	eor	r26, r26
    8f6a:	bb 27       	eor	r27, r27
    8f6c:	9c 5d       	subi	r25, 0xDC	; 220
    8f6e:	a1 09       	sbc	r26, r1
    8f70:	b1 09       	sbc	r27, r1
    8f72:	81 15       	cp	r24, r1
    8f74:	44 e0       	ldi	r20, 0x04	; 4
    8f76:	94 07       	cpc	r25, r20
    8f78:	a1 05       	cpc	r26, r1
    8f7a:	b1 05       	cpc	r27, r1
    8f7c:	68 f5       	brcc	.+90     	; 0x8fd8 <put_utf+0x152>
    8f7e:	80 2b       	or	r24, r16
    8f80:	91 2b       	or	r25, r17
    8f82:	a2 2b       	or	r26, r18
    8f84:	b3 2b       	or	r27, r19
    8f86:	11 96       	adiw	r26, 0x01	; 1
    8f88:	ac 01       	movw	r20, r24
    8f8a:	bd 01       	movw	r22, r26
    8f8c:	22 e1       	ldi	r18, 0x12	; 18
    8f8e:	76 95       	lsr	r23
    8f90:	67 95       	ror	r22
    8f92:	57 95       	ror	r21
    8f94:	47 95       	ror	r20
    8f96:	2a 95       	dec	r18
    8f98:	d1 f7       	brne	.-12     	; 0x8f8e <put_utf+0x108>
    8f9a:	40 6f       	ori	r20, 0xF0	; 240
    8f9c:	40 83       	st	Z, r20
    8f9e:	ac 01       	movw	r20, r24
    8fa0:	bd 01       	movw	r22, r26
    8fa2:	3c e0       	ldi	r19, 0x0C	; 12
    8fa4:	76 95       	lsr	r23
    8fa6:	67 95       	ror	r22
    8fa8:	57 95       	ror	r21
    8faa:	47 95       	ror	r20
    8fac:	3a 95       	dec	r19
    8fae:	d1 f7       	brne	.-12     	; 0x8fa4 <put_utf+0x11e>
    8fb0:	4f 73       	andi	r20, 0x3F	; 63
    8fb2:	40 68       	ori	r20, 0x80	; 128
    8fb4:	41 83       	std	Z+1, r20	; 0x01
    8fb6:	ac 01       	movw	r20, r24
    8fb8:	bd 01       	movw	r22, r26
    8fba:	a6 e0       	ldi	r26, 0x06	; 6
    8fbc:	76 95       	lsr	r23
    8fbe:	67 95       	ror	r22
    8fc0:	57 95       	ror	r21
    8fc2:	47 95       	ror	r20
    8fc4:	aa 95       	dec	r26
    8fc6:	d1 f7       	brne	.-12     	; 0x8fbc <put_utf+0x136>
    8fc8:	4f 73       	andi	r20, 0x3F	; 63
    8fca:	40 68       	ori	r20, 0x80	; 128
    8fcc:	42 83       	std	Z+2, r20	; 0x02
    8fce:	8f 73       	andi	r24, 0x3F	; 63
    8fd0:	80 68       	ori	r24, 0x80	; 128
    8fd2:	83 83       	std	Z+3, r24	; 0x03
    8fd4:	84 e0       	ldi	r24, 0x04	; 4
    8fd6:	01 c0       	rjmp	.+2      	; 0x8fda <put_utf+0x154>
    8fd8:	80 e0       	ldi	r24, 0x00	; 0
    8fda:	1f 91       	pop	r17
    8fdc:	0f 91       	pop	r16
    8fde:	08 95       	ret

00008fe0 <get_fileinfo>:
    8fe0:	a0 e0       	ldi	r26, 0x00	; 0
    8fe2:	b0 e0       	ldi	r27, 0x00	; 0
    8fe4:	e6 ef       	ldi	r30, 0xF6	; 246
    8fe6:	f7 e4       	ldi	r31, 0x47	; 71
    8fe8:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
    8fec:	fc 01       	movw	r30, r24
    8fee:	60 80       	ld	r6, Z
    8ff0:	71 80       	ldd	r7, Z+1	; 0x01
    8ff2:	fb 01       	movw	r30, r22
    8ff4:	16 8a       	std	Z+22, r1	; 0x16
    8ff6:	fc 01       	movw	r30, r24
    8ff8:	06 89       	ldd	r16, Z+22	; 0x16
    8ffa:	17 89       	ldd	r17, Z+23	; 0x17
    8ffc:	20 8d       	ldd	r18, Z+24	; 0x18
    8ffe:	31 8d       	ldd	r19, Z+25	; 0x19
    9000:	01 15       	cp	r16, r1
    9002:	11 05       	cpc	r17, r1
    9004:	21 05       	cpc	r18, r1
    9006:	31 05       	cpc	r19, r1
    9008:	09 f4       	brne	.+2      	; 0x900c <get_fileinfo+0x2c>
    900a:	f5 c0       	rjmp	.+490    	; 0x91f6 <get_fileinfo+0x216>
    900c:	eb 01       	movw	r28, r22
    900e:	8c 01       	movw	r16, r24
    9010:	80 a5       	ldd	r24, Z+40	; 0x28
    9012:	91 a5       	ldd	r25, Z+41	; 0x29
    9014:	a2 a5       	ldd	r26, Z+42	; 0x2a
    9016:	b3 a5       	ldd	r27, Z+43	; 0x2b
    9018:	8f 3f       	cpi	r24, 0xFF	; 255
    901a:	9f 4f       	sbci	r25, 0xFF	; 255
    901c:	af 4f       	sbci	r26, 0xFF	; 255
    901e:	bf 4f       	sbci	r27, 0xFF	; 255
    9020:	09 f4       	brne	.+2      	; 0x9024 <get_fileinfo+0x44>
    9022:	48 c0       	rjmp	.+144    	; 0x90b4 <get_fileinfo+0xd4>
    9024:	a1 2c       	mov	r10, r1
    9026:	b1 2c       	mov	r11, r1
    9028:	c1 2c       	mov	r12, r1
    902a:	d1 2c       	mov	r13, r1
    902c:	e1 2c       	mov	r14, r1
    902e:	f1 2c       	mov	r15, r1
    9030:	88 24       	eor	r8, r8
    9032:	8a 94       	dec	r8
    9034:	91 2c       	mov	r9, r1
    9036:	f3 01       	movw	r30, r6
    9038:	83 85       	ldd	r24, Z+11	; 0x0b
    903a:	94 85       	ldd	r25, Z+12	; 0x0c
    903c:	fc 01       	movw	r30, r24
    903e:	ea 0d       	add	r30, r10
    9040:	fb 1d       	adc	r31, r11
    9042:	80 81       	ld	r24, Z
    9044:	91 81       	ldd	r25, Z+1	; 0x01
    9046:	00 97       	sbiw	r24, 0x00	; 0
    9048:	69 f1       	breq	.+90     	; 0x90a4 <get_fileinfo+0xc4>
    904a:	c1 14       	cp	r12, r1
    904c:	d1 04       	cpc	r13, r1
    904e:	29 f4       	brne	.+10     	; 0x905a <get_fileinfo+0x7a>
    9050:	9c 01       	movw	r18, r24
    9052:	38 5d       	subi	r19, 0xD8	; 216
    9054:	21 15       	cp	r18, r1
    9056:	38 40       	sbci	r19, 0x08	; 8
    9058:	f0 f0       	brcs	.+60     	; 0x9096 <get_fileinfo+0xb6>
    905a:	a7 01       	movw	r20, r14
    905c:	4a 5e       	subi	r20, 0xEA	; 234
    905e:	5f 4f       	sbci	r21, 0xFF	; 255
    9060:	4c 0f       	add	r20, r28
    9062:	5d 1f       	adc	r21, r29
    9064:	16 01       	movw	r2, r12
    9066:	41 2c       	mov	r4, r1
    9068:	51 2c       	mov	r5, r1
    906a:	21 01       	movw	r4, r2
    906c:	33 24       	eor	r3, r3
    906e:	22 24       	eor	r2, r2
    9070:	a0 e0       	ldi	r26, 0x00	; 0
    9072:	b0 e0       	ldi	r27, 0x00	; 0
    9074:	bc 01       	movw	r22, r24
    9076:	cd 01       	movw	r24, r26
    9078:	62 29       	or	r22, r2
    907a:	73 29       	or	r23, r3
    907c:	84 29       	or	r24, r4
    907e:	95 29       	or	r25, r5
    9080:	94 01       	movw	r18, r8
    9082:	2e 19       	sub	r18, r14
    9084:	3f 09       	sbc	r19, r15
    9086:	ff de       	rcall	.-514    	; 0x8e86 <put_utf>
    9088:	90 e0       	ldi	r25, 0x00	; 0
    908a:	00 97       	sbiw	r24, 0x00	; 0
    908c:	49 f0       	breq	.+18     	; 0x90a0 <get_fileinfo+0xc0>
    908e:	e8 0e       	add	r14, r24
    9090:	f9 1e       	adc	r15, r25
    9092:	80 e0       	ldi	r24, 0x00	; 0
    9094:	90 e0       	ldi	r25, 0x00	; 0
    9096:	e2 e0       	ldi	r30, 0x02	; 2
    9098:	ae 0e       	add	r10, r30
    909a:	b1 1c       	adc	r11, r1
    909c:	6c 01       	movw	r12, r24
    909e:	cb cf       	rjmp	.-106    	; 0x9036 <get_fileinfo+0x56>
    90a0:	e1 2c       	mov	r14, r1
    90a2:	f1 2c       	mov	r15, r1
    90a4:	cd 28       	or	r12, r13
    90a6:	11 f0       	breq	.+4      	; 0x90ac <get_fileinfo+0xcc>
    90a8:	e1 2c       	mov	r14, r1
    90aa:	f1 2c       	mov	r15, r1
    90ac:	fe 01       	movw	r30, r28
    90ae:	ee 0d       	add	r30, r14
    90b0:	ff 1d       	adc	r31, r15
    90b2:	16 8a       	std	Z+22, r1	; 0x16
    90b4:	e1 2c       	mov	r14, r1
    90b6:	f1 2c       	mov	r15, r1
    90b8:	80 e0       	ldi	r24, 0x00	; 0
    90ba:	90 e0       	ldi	r25, 0x00	; 0
    90bc:	2c e0       	ldi	r18, 0x0C	; 12
    90be:	a2 2e       	mov	r10, r18
    90c0:	b1 2c       	mov	r11, r1
    90c2:	3e e2       	ldi	r19, 0x2E	; 46
    90c4:	93 2e       	mov	r9, r19
    90c6:	6c 01       	movw	r12, r24
    90c8:	ff ef       	ldi	r31, 0xFF	; 255
    90ca:	cf 1a       	sub	r12, r31
    90cc:	df 0a       	sbc	r13, r31
    90ce:	f8 01       	movw	r30, r16
    90d0:	22 8d       	ldd	r18, Z+26	; 0x1a
    90d2:	33 8d       	ldd	r19, Z+27	; 0x1b
    90d4:	f9 01       	movw	r30, r18
    90d6:	e8 0f       	add	r30, r24
    90d8:	f9 1f       	adc	r31, r25
    90da:	80 81       	ld	r24, Z
    90dc:	90 e0       	ldi	r25, 0x00	; 0
    90de:	80 32       	cpi	r24, 0x20	; 32
    90e0:	91 05       	cpc	r25, r1
    90e2:	71 f1       	breq	.+92     	; 0x9140 <get_fileinfo+0x160>
    90e4:	85 30       	cpi	r24, 0x05	; 5
    90e6:	91 05       	cpc	r25, r1
    90e8:	11 f4       	brne	.+4      	; 0x90ee <get_fileinfo+0x10e>
    90ea:	85 ee       	ldi	r24, 0xE5	; 229
    90ec:	90 e0       	ldi	r25, 0x00	; 0
    90ee:	f9 e0       	ldi	r31, 0x09	; 9
    90f0:	cf 16       	cp	r12, r31
    90f2:	d1 04       	cpc	r13, r1
    90f4:	59 f4       	brne	.+22     	; 0x910c <get_fileinfo+0x12c>
    90f6:	2c e0       	ldi	r18, 0x0C	; 12
    90f8:	e2 16       	cp	r14, r18
    90fa:	f1 04       	cpc	r15, r1
    90fc:	38 f4       	brcc	.+14     	; 0x910c <get_fileinfo+0x12c>
    90fe:	fe 01       	movw	r30, r28
    9100:	ee 0d       	add	r30, r14
    9102:	ff 1d       	adc	r31, r15
    9104:	91 86       	std	Z+9, r9	; 0x09
    9106:	f7 01       	movw	r30, r14
    9108:	31 96       	adiw	r30, 0x01	; 1
    910a:	7f 01       	movw	r14, r30
    910c:	65 eb       	ldi	r22, 0xB5	; 181
    910e:	71 e0       	ldi	r23, 0x01	; 1
    9110:	0e 94 55 68 	call	0xd0aa	; 0xd0aa <ff_oem2uni>
    9114:	00 97       	sbiw	r24, 0x00	; 0
    9116:	19 f4       	brne	.+6      	; 0x911e <get_fileinfo+0x13e>
    9118:	e1 2c       	mov	r14, r1
    911a:	f1 2c       	mov	r15, r1
    911c:	16 c0       	rjmp	.+44     	; 0x914a <get_fileinfo+0x16a>
    911e:	a7 01       	movw	r20, r14
    9120:	47 5f       	subi	r20, 0xF7	; 247
    9122:	5f 4f       	sbci	r21, 0xFF	; 255
    9124:	4c 0f       	add	r20, r28
    9126:	5d 1f       	adc	r21, r29
    9128:	bc 01       	movw	r22, r24
    912a:	80 e0       	ldi	r24, 0x00	; 0
    912c:	90 e0       	ldi	r25, 0x00	; 0
    912e:	95 01       	movw	r18, r10
    9130:	2e 19       	sub	r18, r14
    9132:	3f 09       	sbc	r19, r15
    9134:	a8 de       	rcall	.-688    	; 0x8e86 <put_utf>
    9136:	90 e0       	ldi	r25, 0x00	; 0
    9138:	00 97       	sbiw	r24, 0x00	; 0
    913a:	71 f3       	breq	.-36     	; 0x9118 <get_fileinfo+0x138>
    913c:	e8 0e       	add	r14, r24
    913e:	f9 1e       	adc	r15, r25
    9140:	c6 01       	movw	r24, r12
    9142:	8b 30       	cpi	r24, 0x0B	; 11
    9144:	91 05       	cpc	r25, r1
    9146:	09 f0       	breq	.+2      	; 0x914a <get_fileinfo+0x16a>
    9148:	be cf       	rjmp	.-132    	; 0x90c6 <get_fileinfo+0xe6>
    914a:	fe 01       	movw	r30, r28
    914c:	ee 0d       	add	r30, r14
    914e:	ff 1d       	adc	r31, r15
    9150:	11 86       	std	Z+9, r1	; 0x09
    9152:	8e 89       	ldd	r24, Y+22	; 0x16
    9154:	81 11       	cpse	r24, r1
    9156:	36 c0       	rjmp	.+108    	; 0x91c4 <get_fileinfo+0x1e4>
    9158:	e1 14       	cp	r14, r1
    915a:	f1 04       	cpc	r15, r1
    915c:	31 f0       	breq	.+12     	; 0x916a <get_fileinfo+0x18a>
    915e:	de 01       	movw	r26, r28
    9160:	19 96       	adiw	r26, 0x09	; 9
    9162:	58 e0       	ldi	r21, 0x08	; 8
    9164:	20 e0       	ldi	r18, 0x00	; 0
    9166:	30 e0       	ldi	r19, 0x00	; 0
    9168:	14 c0       	rjmp	.+40     	; 0x9192 <get_fileinfo+0x1b2>
    916a:	8f e3       	ldi	r24, 0x3F	; 63
    916c:	8e 8b       	std	Y+22, r24	; 0x16
    916e:	21 e0       	ldi	r18, 0x01	; 1
    9170:	30 e0       	ldi	r19, 0x00	; 0
    9172:	1c c0       	rjmp	.+56     	; 0x91ac <get_fileinfo+0x1cc>
    9174:	90 e0       	ldi	r25, 0x00	; 0
    9176:	8e 32       	cpi	r24, 0x2E	; 46
    9178:	91 05       	cpc	r25, r1
    917a:	09 f4       	brne	.+2      	; 0x917e <get_fileinfo+0x19e>
    917c:	50 e1       	ldi	r21, 0x10	; 16
    917e:	bc 01       	movw	r22, r24
    9180:	61 54       	subi	r22, 0x41	; 65
    9182:	71 09       	sbc	r23, r1
    9184:	6a 31       	cpi	r22, 0x1A	; 26
    9186:	71 05       	cpc	r23, r1
    9188:	40 f0       	brcs	.+16     	; 0x919a <get_fileinfo+0x1ba>
    918a:	fd 01       	movw	r30, r26
    918c:	84 87       	std	Z+12, r24	; 0x0c
    918e:	2f 5f       	subi	r18, 0xFF	; 255
    9190:	3f 4f       	sbci	r19, 0xFF	; 255
    9192:	8d 91       	ld	r24, X+
    9194:	81 11       	cpse	r24, r1
    9196:	ee cf       	rjmp	.-36     	; 0x9174 <get_fileinfo+0x194>
    9198:	09 c0       	rjmp	.+18     	; 0x91ac <get_fileinfo+0x1cc>
    919a:	f8 01       	movw	r30, r16
    919c:	62 8d       	ldd	r22, Z+26	; 0x1a
    919e:	73 8d       	ldd	r23, Z+27	; 0x1b
    91a0:	fb 01       	movw	r30, r22
    91a2:	44 85       	ldd	r20, Z+12	; 0x0c
    91a4:	45 23       	and	r20, r21
    91a6:	89 f3       	breq	.-30     	; 0x918a <get_fileinfo+0x1aa>
    91a8:	80 96       	adiw	r24, 0x20	; 32
    91aa:	ef cf       	rjmp	.-34     	; 0x918a <get_fileinfo+0x1aa>
    91ac:	fe 01       	movw	r30, r28
    91ae:	e2 0f       	add	r30, r18
    91b0:	f3 1f       	adc	r31, r19
    91b2:	16 8a       	std	Z+22, r1	; 0x16
    91b4:	f8 01       	movw	r30, r16
    91b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    91b8:	93 8d       	ldd	r25, Z+27	; 0x1b
    91ba:	fc 01       	movw	r30, r24
    91bc:	84 85       	ldd	r24, Z+12	; 0x0c
    91be:	81 11       	cpse	r24, r1
    91c0:	01 c0       	rjmp	.+2      	; 0x91c4 <get_fileinfo+0x1e4>
    91c2:	19 86       	std	Y+9, r1	; 0x09
    91c4:	f8 01       	movw	r30, r16
    91c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    91c8:	93 8d       	ldd	r25, Z+27	; 0x1b
    91ca:	fc 01       	movw	r30, r24
    91cc:	83 85       	ldd	r24, Z+11	; 0x0b
    91ce:	88 87       	std	Y+8, r24	; 0x08
    91d0:	f8 01       	movw	r30, r16
    91d2:	02 8d       	ldd	r16, Z+26	; 0x1a
    91d4:	13 8d       	ldd	r17, Z+27	; 0x1b
    91d6:	c8 01       	movw	r24, r16
    91d8:	4c 96       	adiw	r24, 0x1c	; 28
    91da:	c6 dc       	rcall	.-1652   	; 0x8b68 <ld_dword>
    91dc:	68 83       	st	Y, r22
    91de:	79 83       	std	Y+1, r23	; 0x01
    91e0:	8a 83       	std	Y+2, r24	; 0x02
    91e2:	9b 83       	std	Y+3, r25	; 0x03
    91e4:	f8 01       	movw	r30, r16
    91e6:	86 89       	ldd	r24, Z+22	; 0x16
    91e8:	97 89       	ldd	r25, Z+23	; 0x17
    91ea:	9f 83       	std	Y+7, r25	; 0x07
    91ec:	8e 83       	std	Y+6, r24	; 0x06
    91ee:	80 8d       	ldd	r24, Z+24	; 0x18
    91f0:	91 8d       	ldd	r25, Z+25	; 0x19
    91f2:	9d 83       	std	Y+5, r25	; 0x05
    91f4:	8c 83       	std	Y+4, r24	; 0x04
    91f6:	cd b7       	in	r28, 0x3d	; 61
    91f8:	de b7       	in	r29, 0x3e	; 62
    91fa:	e2 e1       	ldi	r30, 0x12	; 18
    91fc:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

00009200 <ld_clust.isra.4>:
    9200:	fb 01       	movw	r30, r22
    9202:	42 8d       	ldd	r20, Z+26	; 0x1a
    9204:	53 8d       	ldd	r21, Z+27	; 0x1b
    9206:	60 e0       	ldi	r22, 0x00	; 0
    9208:	70 e0       	ldi	r23, 0x00	; 0
    920a:	83 30       	cpi	r24, 0x03	; 3
    920c:	59 f4       	brne	.+22     	; 0x9224 <ld_clust.isra.4+0x24>
    920e:	84 89       	ldd	r24, Z+20	; 0x14
    9210:	95 89       	ldd	r25, Z+21	; 0x15
    9212:	a0 e0       	ldi	r26, 0x00	; 0
    9214:	b0 e0       	ldi	r27, 0x00	; 0
    9216:	dc 01       	movw	r26, r24
    9218:	99 27       	eor	r25, r25
    921a:	88 27       	eor	r24, r24
    921c:	48 2b       	or	r20, r24
    921e:	59 2b       	or	r21, r25
    9220:	6a 2b       	or	r22, r26
    9222:	7b 2b       	or	r23, r27
    9224:	cb 01       	movw	r24, r22
    9226:	ba 01       	movw	r22, r20
    9228:	08 95       	ret

0000922a <st_clust.isra.5>:
    922a:	fb 01       	movw	r30, r22
    922c:	22 8f       	std	Z+26, r18	; 0x1a
    922e:	33 8f       	std	Z+27, r19	; 0x1b
    9230:	dc 01       	movw	r26, r24
    9232:	8c 91       	ld	r24, X
    9234:	83 30       	cpi	r24, 0x03	; 3
    9236:	29 f4       	brne	.+10     	; 0x9242 <st_clust.isra.5+0x18>
    9238:	ca 01       	movw	r24, r20
    923a:	aa 27       	eor	r26, r26
    923c:	bb 27       	eor	r27, r27
    923e:	84 8b       	std	Z+20, r24	; 0x14
    9240:	95 8b       	std	Z+21, r25	; 0x15
    9242:	08 95       	ret

00009244 <sync_window.part.6>:
    9244:	8f 92       	push	r8
    9246:	9f 92       	push	r9
    9248:	af 92       	push	r10
    924a:	bf 92       	push	r11
    924c:	ef 92       	push	r14
    924e:	ff 92       	push	r15
    9250:	0f 93       	push	r16
    9252:	1f 93       	push	r17
    9254:	cf 93       	push	r28
    9256:	df 93       	push	r29
    9258:	ec 01       	movw	r28, r24
    925a:	7c 01       	movw	r14, r24
    925c:	45 e3       	ldi	r20, 0x35	; 53
    925e:	e4 0e       	add	r14, r20
    9260:	f1 1c       	adc	r15, r1
    9262:	29 a9       	ldd	r18, Y+49	; 0x31
    9264:	3a a9       	ldd	r19, Y+50	; 0x32
    9266:	4b a9       	ldd	r20, Y+51	; 0x33
    9268:	5c a9       	ldd	r21, Y+52	; 0x34
    926a:	01 e0       	ldi	r16, 0x01	; 1
    926c:	10 e0       	ldi	r17, 0x00	; 0
    926e:	b7 01       	movw	r22, r14
    9270:	89 81       	ldd	r24, Y+1	; 0x01
    9272:	0e 94 e8 68 	call	0xd1d0	; 0xd1d0 <disk_write>
    9276:	89 2b       	or	r24, r25
    9278:	41 f5       	brne	.+80     	; 0x92ca <sync_window.part.6+0x86>
    927a:	1b 82       	std	Y+3, r1	; 0x03
    927c:	09 a9       	ldd	r16, Y+49	; 0x31
    927e:	1a a9       	ldd	r17, Y+50	; 0x32
    9280:	2b a9       	ldd	r18, Y+51	; 0x33
    9282:	3c a9       	ldd	r19, Y+52	; 0x34
    9284:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9286:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9288:	af 8d       	ldd	r26, Y+31	; 0x1f
    928a:	b8 a1       	ldd	r27, Y+32	; 0x20
    928c:	8d a0       	ldd	r8, Y+37	; 0x25
    928e:	9e a0       	ldd	r9, Y+38	; 0x26
    9290:	af a0       	ldd	r10, Y+39	; 0x27
    9292:	b8 a4       	ldd	r11, Y+40	; 0x28
    9294:	b9 01       	movw	r22, r18
    9296:	a8 01       	movw	r20, r16
    9298:	48 19       	sub	r20, r8
    929a:	59 09       	sbc	r21, r9
    929c:	6a 09       	sbc	r22, r10
    929e:	7b 09       	sbc	r23, r11
    92a0:	48 17       	cp	r20, r24
    92a2:	59 07       	cpc	r21, r25
    92a4:	6a 07       	cpc	r22, r26
    92a6:	7b 07       	cpc	r23, r27
    92a8:	98 f4       	brcc	.+38     	; 0x92d0 <sync_window.part.6+0x8c>
    92aa:	6a 81       	ldd	r22, Y+2	; 0x02
    92ac:	62 30       	cpi	r22, 0x02	; 2
    92ae:	81 f4       	brne	.+32     	; 0x92d0 <sync_window.part.6+0x8c>
    92b0:	a9 01       	movw	r20, r18
    92b2:	98 01       	movw	r18, r16
    92b4:	28 0f       	add	r18, r24
    92b6:	39 1f       	adc	r19, r25
    92b8:	4a 1f       	adc	r20, r26
    92ba:	5b 1f       	adc	r21, r27
    92bc:	01 e0       	ldi	r16, 0x01	; 1
    92be:	10 e0       	ldi	r17, 0x00	; 0
    92c0:	b7 01       	movw	r22, r14
    92c2:	89 81       	ldd	r24, Y+1	; 0x01
    92c4:	0e 94 e8 68 	call	0xd1d0	; 0xd1d0 <disk_write>
    92c8:	03 c0       	rjmp	.+6      	; 0x92d0 <sync_window.part.6+0x8c>
    92ca:	81 e0       	ldi	r24, 0x01	; 1
    92cc:	90 e0       	ldi	r25, 0x00	; 0
    92ce:	02 c0       	rjmp	.+4      	; 0x92d4 <sync_window.part.6+0x90>
    92d0:	80 e0       	ldi	r24, 0x00	; 0
    92d2:	90 e0       	ldi	r25, 0x00	; 0
    92d4:	df 91       	pop	r29
    92d6:	cf 91       	pop	r28
    92d8:	1f 91       	pop	r17
    92da:	0f 91       	pop	r16
    92dc:	ff 90       	pop	r15
    92de:	ef 90       	pop	r14
    92e0:	bf 90       	pop	r11
    92e2:	af 90       	pop	r10
    92e4:	9f 90       	pop	r9
    92e6:	8f 90       	pop	r8
    92e8:	08 95       	ret

000092ea <sync_fs>:
    92ea:	ef 92       	push	r14
    92ec:	ff 92       	push	r15
    92ee:	0f 93       	push	r16
    92f0:	1f 93       	push	r17
    92f2:	cf 93       	push	r28
    92f4:	df 93       	push	r29
    92f6:	ec 01       	movw	r28, r24
    92f8:	8b 81       	ldd	r24, Y+3	; 0x03
    92fa:	81 11       	cpse	r24, r1
    92fc:	05 c0       	rjmp	.+10     	; 0x9308 <sync_fs+0x1e>
    92fe:	88 81       	ld	r24, Y
    9300:	83 30       	cpi	r24, 0x03	; 3
    9302:	09 f0       	breq	.+2      	; 0x9306 <sync_fs+0x1c>
    9304:	52 c0       	rjmp	.+164    	; 0x93aa <sync_fs+0xc0>
    9306:	06 c0       	rjmp	.+12     	; 0x9314 <sync_fs+0x2a>
    9308:	ce 01       	movw	r24, r28
    930a:	9c df       	rcall	.-200    	; 0x9244 <sync_window.part.6>
    930c:	00 97       	sbiw	r24, 0x00	; 0
    930e:	09 f0       	breq	.+2      	; 0x9312 <sync_fs+0x28>
    9310:	59 c0       	rjmp	.+178    	; 0x93c4 <sync_fs+0xda>
    9312:	f5 cf       	rjmp	.-22     	; 0x92fe <sync_fs+0x14>
    9314:	8c 81       	ldd	r24, Y+4	; 0x04
    9316:	81 30       	cpi	r24, 0x01	; 1
    9318:	09 f0       	breq	.+2      	; 0x931c <sync_fs+0x32>
    931a:	47 c0       	rjmp	.+142    	; 0x93aa <sync_fs+0xc0>
    931c:	40 e0       	ldi	r20, 0x00	; 0
    931e:	52 e0       	ldi	r21, 0x02	; 2
    9320:	60 e0       	ldi	r22, 0x00	; 0
    9322:	70 e0       	ldi	r23, 0x00	; 0
    9324:	7e 01       	movw	r14, r28
    9326:	85 e3       	ldi	r24, 0x35	; 53
    9328:	e8 0e       	add	r14, r24
    932a:	f1 1c       	adc	r15, r1
    932c:	c7 01       	movw	r24, r14
    932e:	37 dc       	rcall	.-1938   	; 0x8b9e <mem_set>
    9330:	85 e5       	ldi	r24, 0x55	; 85
    9332:	fe 01       	movw	r30, r28
    9334:	ed 5c       	subi	r30, 0xCD	; 205
    9336:	fd 4f       	sbci	r31, 0xFD	; 253
    9338:	80 83       	st	Z, r24
    933a:	8a ea       	ldi	r24, 0xAA	; 170
    933c:	31 96       	adiw	r30, 0x01	; 1
    933e:	80 83       	st	Z, r24
    9340:	82 e5       	ldi	r24, 0x52	; 82
    9342:	8d ab       	std	Y+53, r24	; 0x35
    9344:	8e ab       	std	Y+54, r24	; 0x36
    9346:	81 e6       	ldi	r24, 0x61	; 97
    9348:	8f ab       	std	Y+55, r24	; 0x37
    934a:	91 e4       	ldi	r25, 0x41	; 65
    934c:	98 af       	std	Y+56, r25	; 0x38
    934e:	22 e7       	ldi	r18, 0x72	; 114
    9350:	7b 97       	sbiw	r30, 0x1b	; 27
    9352:	20 83       	st	Z, r18
    9354:	31 96       	adiw	r30, 0x01	; 1
    9356:	20 83       	st	Z, r18
    9358:	31 96       	adiw	r30, 0x01	; 1
    935a:	90 83       	st	Z, r25
    935c:	31 96       	adiw	r30, 0x01	; 1
    935e:	80 83       	st	Z, r24
    9360:	49 89       	ldd	r20, Y+17	; 0x11
    9362:	5a 89       	ldd	r21, Y+18	; 0x12
    9364:	6b 89       	ldd	r22, Y+19	; 0x13
    9366:	7c 89       	ldd	r23, Y+20	; 0x14
    9368:	ce 01       	movw	r24, r28
    936a:	83 5e       	subi	r24, 0xE3	; 227
    936c:	9d 4f       	sbci	r25, 0xFD	; 253
    936e:	11 dc       	rcall	.-2014   	; 0x8b92 <st_dword>
    9370:	4d 85       	ldd	r20, Y+13	; 0x0d
    9372:	5e 85       	ldd	r21, Y+14	; 0x0e
    9374:	6f 85       	ldd	r22, Y+15	; 0x0f
    9376:	78 89       	ldd	r23, Y+16	; 0x10
    9378:	ce 01       	movw	r24, r28
    937a:	8f 5d       	subi	r24, 0xDF	; 223
    937c:	9d 4f       	sbci	r25, 0xFD	; 253
    937e:	09 dc       	rcall	.-2030   	; 0x8b92 <st_dword>
    9380:	89 a1       	ldd	r24, Y+33	; 0x21
    9382:	9a a1       	ldd	r25, Y+34	; 0x22
    9384:	ab a1       	ldd	r26, Y+35	; 0x23
    9386:	bc a1       	ldd	r27, Y+36	; 0x24
    9388:	9c 01       	movw	r18, r24
    938a:	ad 01       	movw	r20, r26
    938c:	2f 5f       	subi	r18, 0xFF	; 255
    938e:	3f 4f       	sbci	r19, 0xFF	; 255
    9390:	4f 4f       	sbci	r20, 0xFF	; 255
    9392:	5f 4f       	sbci	r21, 0xFF	; 255
    9394:	29 ab       	std	Y+49, r18	; 0x31
    9396:	3a ab       	std	Y+50, r19	; 0x32
    9398:	4b ab       	std	Y+51, r20	; 0x33
    939a:	5c ab       	std	Y+52, r21	; 0x34
    939c:	01 e0       	ldi	r16, 0x01	; 1
    939e:	10 e0       	ldi	r17, 0x00	; 0
    93a0:	b7 01       	movw	r22, r14
    93a2:	89 81       	ldd	r24, Y+1	; 0x01
    93a4:	0e 94 e8 68 	call	0xd1d0	; 0xd1d0 <disk_write>
    93a8:	1c 82       	std	Y+4, r1	; 0x04
    93aa:	40 e0       	ldi	r20, 0x00	; 0
    93ac:	50 e0       	ldi	r21, 0x00	; 0
    93ae:	60 e0       	ldi	r22, 0x00	; 0
    93b0:	89 81       	ldd	r24, Y+1	; 0x01
    93b2:	0e 94 f8 68 	call	0xd1f0	; 0xd1f0 <disk_ioctl>
    93b6:	31 e0       	ldi	r19, 0x01	; 1
    93b8:	20 e0       	ldi	r18, 0x00	; 0
    93ba:	89 2b       	or	r24, r25
    93bc:	09 f4       	brne	.+2      	; 0x93c0 <sync_fs+0xd6>
    93be:	30 e0       	ldi	r19, 0x00	; 0
    93c0:	83 2f       	mov	r24, r19
    93c2:	92 2f       	mov	r25, r18
    93c4:	cd b7       	in	r28, 0x3d	; 61
    93c6:	de b7       	in	r29, 0x3e	; 62
    93c8:	e6 e0       	ldi	r30, 0x06	; 6
    93ca:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

000093ce <dir_clear>:
    93ce:	4f 92       	push	r4
    93d0:	5f 92       	push	r5
    93d2:	6f 92       	push	r6
    93d4:	7f 92       	push	r7
    93d6:	af 92       	push	r10
    93d8:	bf 92       	push	r11
    93da:	cf 92       	push	r12
    93dc:	df 92       	push	r13
    93de:	ef 92       	push	r14
    93e0:	ff 92       	push	r15
    93e2:	0f 93       	push	r16
    93e4:	1f 93       	push	r17
    93e6:	cf 93       	push	r28
    93e8:	df 93       	push	r29
    93ea:	ec 01       	movw	r28, r24
    93ec:	6a 01       	movw	r12, r20
    93ee:	7b 01       	movw	r14, r22
    93f0:	8b 81       	ldd	r24, Y+3	; 0x03
    93f2:	81 11       	cpse	r24, r1
    93f4:	28 c0       	rjmp	.+80     	; 0x9446 <dir_clear+0x78>
    93f6:	b7 01       	movw	r22, r14
    93f8:	a6 01       	movw	r20, r12
    93fa:	ce 01       	movw	r24, r28
    93fc:	6e dc       	rcall	.-1828   	; 0x8cda <clst2sect>
    93fe:	2b 01       	movw	r4, r22
    9400:	3c 01       	movw	r6, r24
    9402:	69 ab       	std	Y+49, r22	; 0x31
    9404:	7a ab       	std	Y+50, r23	; 0x32
    9406:	8b ab       	std	Y+51, r24	; 0x33
    9408:	9c ab       	std	Y+52, r25	; 0x34
    940a:	5e 01       	movw	r10, r28
    940c:	25 e3       	ldi	r18, 0x35	; 53
    940e:	a2 0e       	add	r10, r18
    9410:	b1 1c       	adc	r11, r1
    9412:	40 e0       	ldi	r20, 0x00	; 0
    9414:	52 e0       	ldi	r21, 0x02	; 2
    9416:	60 e0       	ldi	r22, 0x00	; 0
    9418:	70 e0       	ldi	r23, 0x00	; 0
    941a:	c5 01       	movw	r24, r10
    941c:	c0 db       	rcall	.-2176   	; 0x8b9e <mem_set>
    941e:	09 85       	ldd	r16, Y+9	; 0x09
    9420:	1a 85       	ldd	r17, Y+10	; 0x0a
    9422:	c8 01       	movw	r24, r16
    9424:	a0 e0       	ldi	r26, 0x00	; 0
    9426:	b0 e0       	ldi	r27, 0x00	; 0
    9428:	39 e0       	ldi	r19, 0x09	; 9
    942a:	88 0f       	add	r24, r24
    942c:	99 1f       	adc	r25, r25
    942e:	aa 1f       	adc	r26, r26
    9430:	bb 1f       	adc	r27, r27
    9432:	3a 95       	dec	r19
    9434:	d1 f7       	brne	.-12     	; 0x942a <dir_clear+0x5c>
    9436:	81 15       	cp	r24, r1
    9438:	90 48       	sbci	r25, 0x80	; 128
    943a:	a1 05       	cpc	r26, r1
    943c:	b1 05       	cpc	r27, r1
    943e:	50 f0       	brcs	.+20     	; 0x9454 <dir_clear+0x86>
    9440:	00 e0       	ldi	r16, 0x00	; 0
    9442:	10 e8       	ldi	r17, 0x80	; 128
    9444:	14 c0       	rjmp	.+40     	; 0x946e <dir_clear+0xa0>
    9446:	ce 01       	movw	r24, r28
    9448:	fd de       	rcall	.-518    	; 0x9244 <sync_window.part.6>
    944a:	89 2b       	or	r24, r25
    944c:	a1 f2       	breq	.-88     	; 0x93f6 <dir_clear+0x28>
    944e:	81 e0       	ldi	r24, 0x01	; 1
    9450:	90 e0       	ldi	r25, 0x00	; 0
    9452:	56 c0       	rjmp	.+172    	; 0x9500 <dir_clear+0x132>
    9454:	10 2f       	mov	r17, r16
    9456:	00 27       	eor	r16, r16
    9458:	11 0f       	add	r17, r17
    945a:	09 c0       	rjmp	.+18     	; 0x946e <dir_clear+0xa0>
    945c:	c8 01       	movw	r24, r16
    945e:	0e 94 1c 68 	call	0xd038	; 0xd038 <ff_memalloc>
    9462:	6c 01       	movw	r12, r24
    9464:	00 97       	sbiw	r24, 0x00	; 0
    9466:	09 f0       	breq	.+2      	; 0x946a <dir_clear+0x9c>
    9468:	40 c0       	rjmp	.+128    	; 0x94ea <dir_clear+0x11c>
    946a:	16 95       	lsr	r17
    946c:	07 95       	ror	r16
    946e:	01 30       	cpi	r16, 0x01	; 1
    9470:	82 e0       	ldi	r24, 0x02	; 2
    9472:	18 07       	cpc	r17, r24
    9474:	98 f7       	brcc	.-26     	; 0x945c <dir_clear+0x8e>
    9476:	e1 2c       	mov	r14, r1
    9478:	f1 2c       	mov	r15, r1
    947a:	11 c0       	rjmp	.+34     	; 0x949e <dir_clear+0xd0>
    947c:	01 e0       	ldi	r16, 0x01	; 1
    947e:	10 e0       	ldi	r17, 0x00	; 0
    9480:	a3 01       	movw	r20, r6
    9482:	92 01       	movw	r18, r4
    9484:	2e 0d       	add	r18, r14
    9486:	3f 1d       	adc	r19, r15
    9488:	41 1d       	adc	r20, r1
    948a:	51 1d       	adc	r21, r1
    948c:	b5 01       	movw	r22, r10
    948e:	89 81       	ldd	r24, Y+1	; 0x01
    9490:	0e 94 e8 68 	call	0xd1d0	; 0xd1d0 <disk_write>
    9494:	89 2b       	or	r24, r25
    9496:	01 f5       	brne	.+64     	; 0x94d8 <dir_clear+0x10a>
    9498:	2f ef       	ldi	r18, 0xFF	; 255
    949a:	e2 1a       	sub	r14, r18
    949c:	f2 0a       	sbc	r15, r18
    949e:	89 85       	ldd	r24, Y+9	; 0x09
    94a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    94a2:	e8 16       	cp	r14, r24
    94a4:	f9 06       	cpc	r15, r25
    94a6:	50 f3       	brcs	.-44     	; 0x947c <dir_clear+0xae>
    94a8:	17 c0       	rjmp	.+46     	; 0x94d8 <dir_clear+0x10a>
    94aa:	85 01       	movw	r16, r10
    94ac:	a3 01       	movw	r20, r6
    94ae:	92 01       	movw	r18, r4
    94b0:	2e 0d       	add	r18, r14
    94b2:	3f 1d       	adc	r19, r15
    94b4:	41 1d       	adc	r20, r1
    94b6:	51 1d       	adc	r21, r1
    94b8:	b6 01       	movw	r22, r12
    94ba:	89 81       	ldd	r24, Y+1	; 0x01
    94bc:	0e 94 e8 68 	call	0xd1d0	; 0xd1d0 <disk_write>
    94c0:	89 2b       	or	r24, r25
    94c2:	39 f4       	brne	.+14     	; 0x94d2 <dir_clear+0x104>
    94c4:	ea 0c       	add	r14, r10
    94c6:	fb 1c       	adc	r15, r11
    94c8:	89 85       	ldd	r24, Y+9	; 0x09
    94ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    94cc:	e8 16       	cp	r14, r24
    94ce:	f9 06       	cpc	r15, r25
    94d0:	60 f3       	brcs	.-40     	; 0x94aa <dir_clear+0xdc>
    94d2:	c6 01       	movw	r24, r12
    94d4:	0e 94 1f 68 	call	0xd03e	; 0xd03e <ff_memfree>
    94d8:	81 e0       	ldi	r24, 0x01	; 1
    94da:	90 e0       	ldi	r25, 0x00	; 0
    94dc:	29 85       	ldd	r18, Y+9	; 0x09
    94de:	3a 85       	ldd	r19, Y+10	; 0x0a
    94e0:	2e 15       	cp	r18, r14
    94e2:	3f 05       	cpc	r19, r15
    94e4:	69 f4       	brne	.+26     	; 0x9500 <dir_clear+0x132>
    94e6:	80 e0       	ldi	r24, 0x00	; 0
    94e8:	0b c0       	rjmp	.+22     	; 0x9500 <dir_clear+0x132>
    94ea:	a8 01       	movw	r20, r16
    94ec:	60 e0       	ldi	r22, 0x00	; 0
    94ee:	70 e0       	ldi	r23, 0x00	; 0
    94f0:	56 db       	rcall	.-2388   	; 0x8b9e <mem_set>
    94f2:	58 01       	movw	r10, r16
    94f4:	ab 2c       	mov	r10, r11
    94f6:	bb 24       	eor	r11, r11
    94f8:	a6 94       	lsr	r10
    94fa:	e1 2c       	mov	r14, r1
    94fc:	f1 2c       	mov	r15, r1
    94fe:	e4 cf       	rjmp	.-56     	; 0x94c8 <dir_clear+0xfa>
    9500:	df 91       	pop	r29
    9502:	cf 91       	pop	r28
    9504:	1f 91       	pop	r17
    9506:	0f 91       	pop	r16
    9508:	ff 90       	pop	r15
    950a:	ef 90       	pop	r14
    950c:	df 90       	pop	r13
    950e:	cf 90       	pop	r12
    9510:	bf 90       	pop	r11
    9512:	af 90       	pop	r10
    9514:	7f 90       	pop	r7
    9516:	6f 90       	pop	r6
    9518:	5f 90       	pop	r5
    951a:	4f 90       	pop	r4
    951c:	08 95       	ret

0000951e <move_window>:
    951e:	a0 e0       	ldi	r26, 0x00	; 0
    9520:	b0 e0       	ldi	r27, 0x00	; 0
    9522:	e5 e9       	ldi	r30, 0x95	; 149
    9524:	fa e4       	ldi	r31, 0x4A	; 74
    9526:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
    952a:	ec 01       	movw	r28, r24
    952c:	6a 01       	movw	r12, r20
    952e:	7b 01       	movw	r14, r22
    9530:	89 a9       	ldd	r24, Y+49	; 0x31
    9532:	9a a9       	ldd	r25, Y+50	; 0x32
    9534:	ab a9       	ldd	r26, Y+51	; 0x33
    9536:	bc a9       	ldd	r27, Y+52	; 0x34
    9538:	84 17       	cp	r24, r20
    953a:	95 07       	cpc	r25, r21
    953c:	a6 07       	cpc	r26, r22
    953e:	b7 07       	cpc	r27, r23
    9540:	11 f1       	breq	.+68     	; 0x9586 <move_window+0x68>
    9542:	8b 81       	ldd	r24, Y+3	; 0x03
    9544:	81 11       	cpse	r24, r1
    9546:	13 c0       	rjmp	.+38     	; 0x956e <move_window+0x50>
    9548:	01 e0       	ldi	r16, 0x01	; 1
    954a:	10 e0       	ldi	r17, 0x00	; 0
    954c:	a7 01       	movw	r20, r14
    954e:	96 01       	movw	r18, r12
    9550:	be 01       	movw	r22, r28
    9552:	6b 5c       	subi	r22, 0xCB	; 203
    9554:	7f 4f       	sbci	r23, 0xFF	; 255
    9556:	89 81       	ldd	r24, Y+1	; 0x01
    9558:	0e 94 d8 68 	call	0xd1b0	; 0xd1b0 <disk_read>
    955c:	89 2b       	or	r24, r25
    955e:	61 f0       	breq	.+24     	; 0x9578 <move_window+0x5a>
    9560:	81 e0       	ldi	r24, 0x01	; 1
    9562:	90 e0       	ldi	r25, 0x00	; 0
    9564:	cc 24       	eor	r12, r12
    9566:	ca 94       	dec	r12
    9568:	dc 2c       	mov	r13, r12
    956a:	76 01       	movw	r14, r12
    956c:	07 c0       	rjmp	.+14     	; 0x957c <move_window+0x5e>
    956e:	ce 01       	movw	r24, r28
    9570:	69 de       	rcall	.-814    	; 0x9244 <sync_window.part.6>
    9572:	00 97       	sbiw	r24, 0x00	; 0
    9574:	51 f4       	brne	.+20     	; 0x958a <move_window+0x6c>
    9576:	e8 cf       	rjmp	.-48     	; 0x9548 <move_window+0x2a>
    9578:	80 e0       	ldi	r24, 0x00	; 0
    957a:	90 e0       	ldi	r25, 0x00	; 0
    957c:	c9 aa       	std	Y+49, r12	; 0x31
    957e:	da aa       	std	Y+50, r13	; 0x32
    9580:	eb aa       	std	Y+51, r14	; 0x33
    9582:	fc aa       	std	Y+52, r15	; 0x34
    9584:	02 c0       	rjmp	.+4      	; 0x958a <move_window+0x6c>
    9586:	80 e0       	ldi	r24, 0x00	; 0
    9588:	90 e0       	ldi	r25, 0x00	; 0
    958a:	cd b7       	in	r28, 0x3d	; 61
    958c:	de b7       	in	r29, 0x3e	; 62
    958e:	e8 e0       	ldi	r30, 0x08	; 8
    9590:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

00009594 <check_fs>:
    9594:	cf 93       	push	r28
    9596:	df 93       	push	r29
    9598:	ec 01       	movw	r28, r24
    959a:	1b 82       	std	Y+3, r1	; 0x03
    959c:	8f ef       	ldi	r24, 0xFF	; 255
    959e:	9f ef       	ldi	r25, 0xFF	; 255
    95a0:	dc 01       	movw	r26, r24
    95a2:	89 ab       	std	Y+49, r24	; 0x31
    95a4:	9a ab       	std	Y+50, r25	; 0x32
    95a6:	ab ab       	std	Y+51, r26	; 0x33
    95a8:	bc ab       	std	Y+52, r27	; 0x34
    95aa:	ce 01       	movw	r24, r28
    95ac:	b8 df       	rcall	.-144    	; 0x951e <move_window>
    95ae:	89 2b       	or	r24, r25
    95b0:	19 f5       	brne	.+70     	; 0x95f8 <check_fs+0x64>
    95b2:	fe 01       	movw	r30, r28
    95b4:	ed 5c       	subi	r30, 0xCD	; 205
    95b6:	fd 4f       	sbci	r31, 0xFD	; 253
    95b8:	80 81       	ld	r24, Z
    95ba:	91 81       	ldd	r25, Z+1	; 0x01
    95bc:	85 35       	cpi	r24, 0x55	; 85
    95be:	9a 4a       	sbci	r25, 0xAA	; 170
    95c0:	f1 f4       	brne	.+60     	; 0x95fe <check_fs+0x6a>
    95c2:	8d a9       	ldd	r24, Y+53	; 0x35
    95c4:	8b 3e       	cpi	r24, 0xEB	; 235
    95c6:	19 f0       	breq	.+6      	; 0x95ce <check_fs+0x3a>
    95c8:	88 5e       	subi	r24, 0xE8	; 232
    95ca:	82 30       	cpi	r24, 0x02	; 2
    95cc:	f0 f4       	brcc	.+60     	; 0x960a <check_fs+0x76>
    95ce:	43 e0       	ldi	r20, 0x03	; 3
    95d0:	50 e0       	ldi	r21, 0x00	; 0
    95d2:	66 ec       	ldi	r22, 0xC6	; 198
    95d4:	78 e0       	ldi	r23, 0x08	; 8
    95d6:	ce 01       	movw	r24, r28
    95d8:	85 59       	subi	r24, 0x95	; 149
    95da:	9f 4f       	sbci	r25, 0xFF	; 255
    95dc:	e9 da       	rcall	.-2606   	; 0x8bb0 <mem_cmp>
    95de:	89 2b       	or	r24, r25
    95e0:	89 f0       	breq	.+34     	; 0x9604 <check_fs+0x70>
    95e2:	45 e0       	ldi	r20, 0x05	; 5
    95e4:	50 e0       	ldi	r21, 0x00	; 0
    95e6:	61 e2       	ldi	r22, 0x21	; 33
    95e8:	74 e0       	ldi	r23, 0x04	; 4
    95ea:	ce 01       	movw	r24, r28
    95ec:	89 57       	subi	r24, 0x79	; 121
    95ee:	9f 4f       	sbci	r25, 0xFF	; 255
    95f0:	df da       	rcall	.-2626   	; 0x8bb0 <mem_cmp>
    95f2:	89 2b       	or	r24, r25
    95f4:	51 f4       	brne	.+20     	; 0x960a <check_fs+0x76>
    95f6:	06 c0       	rjmp	.+12     	; 0x9604 <check_fs+0x70>
    95f8:	84 e0       	ldi	r24, 0x04	; 4
    95fa:	90 e0       	ldi	r25, 0x00	; 0
    95fc:	08 c0       	rjmp	.+16     	; 0x960e <check_fs+0x7a>
    95fe:	83 e0       	ldi	r24, 0x03	; 3
    9600:	90 e0       	ldi	r25, 0x00	; 0
    9602:	05 c0       	rjmp	.+10     	; 0x960e <check_fs+0x7a>
    9604:	80 e0       	ldi	r24, 0x00	; 0
    9606:	90 e0       	ldi	r25, 0x00	; 0
    9608:	02 c0       	rjmp	.+4      	; 0x960e <check_fs+0x7a>
    960a:	82 e0       	ldi	r24, 0x02	; 2
    960c:	90 e0       	ldi	r25, 0x00	; 0
    960e:	df 91       	pop	r29
    9610:	cf 91       	pop	r28
    9612:	08 95       	ret

00009614 <mount_volume>:
    9614:	a0 e2       	ldi	r26, 0x20	; 32
    9616:	b0 e0       	ldi	r27, 0x00	; 0
    9618:	e0 e1       	ldi	r30, 0x10	; 16
    961a:	fb e4       	ldi	r31, 0x4B	; 75
    961c:	0c 94 5e e3 	jmp	0x1c6bc	; 0x1c6bc <__prologue_saves__+0x4>
    9620:	5b 01       	movw	r10, r22
    9622:	f4 2e       	mov	r15, r20
    9624:	db 01       	movw	r26, r22
    9626:	1d 92       	st	X+, r1
    9628:	1c 92       	st	X, r1
    962a:	ca db       	rcall	.-2156   	; 0x8dc0 <get_ldnumber>
    962c:	6c 01       	movw	r12, r24
    962e:	97 fd       	sbrc	r25, 7
    9630:	39 c2       	rjmp	.+1138   	; 0x9aa4 <mount_volume+0x490>
    9632:	fc 01       	movw	r30, r24
    9634:	ee 0f       	add	r30, r30
    9636:	ff 1f       	adc	r31, r31
    9638:	eb 5d       	subi	r30, 0xDB	; 219
    963a:	f7 4e       	sbci	r31, 0xE7	; 231
    963c:	00 81       	ld	r16, Z
    963e:	11 81       	ldd	r17, Z+1	; 0x01
    9640:	01 15       	cp	r16, r1
    9642:	11 05       	cpc	r17, r1
    9644:	09 f4       	brne	.+2      	; 0x9648 <mount_volume+0x34>
    9646:	31 c2       	rjmp	.+1122   	; 0x9aaa <mount_volume+0x496>
    9648:	f5 01       	movw	r30, r10
    964a:	11 83       	std	Z+1, r17	; 0x01
    964c:	00 83       	st	Z, r16
    964e:	ff 2d       	mov	r31, r15
    9650:	fe 7f       	andi	r31, 0xFE	; 254
    9652:	ff 2e       	mov	r15, r31
    9654:	d8 01       	movw	r26, r16
    9656:	8c 91       	ld	r24, X
    9658:	88 23       	and	r24, r24
    965a:	71 f0       	breq	.+28     	; 0x9678 <mount_volume+0x64>
    965c:	f8 01       	movw	r30, r16
    965e:	81 81       	ldd	r24, Z+1	; 0x01
    9660:	0e 94 cc 68 	call	0xd198	; 0xd198 <disk_status>
    9664:	80 fd       	sbrc	r24, 0
    9666:	08 c0       	rjmp	.+16     	; 0x9678 <mount_volume+0x64>
    9668:	ff 20       	and	r15, r15
    966a:	09 f4       	brne	.+2      	; 0x966e <mount_volume+0x5a>
    966c:	21 c2       	rjmp	.+1090   	; 0x9ab0 <mount_volume+0x49c>
    966e:	82 ff       	sbrs	r24, 2
    9670:	1f c2       	rjmp	.+1086   	; 0x9ab0 <mount_volume+0x49c>
    9672:	8a e0       	ldi	r24, 0x0A	; 10
    9674:	90 e0       	ldi	r25, 0x00	; 0
    9676:	24 c2       	rjmp	.+1096   	; 0x9ac0 <mount_volume+0x4ac>
    9678:	d8 01       	movw	r26, r16
    967a:	1c 92       	st	X, r1
    967c:	f8 01       	movw	r30, r16
    967e:	c1 82       	std	Z+1, r12	; 0x01
    9680:	8c 2d       	mov	r24, r12
    9682:	0e 94 d2 68 	call	0xd1a4	; 0xd1a4 <disk_initialize>
    9686:	80 fd       	sbrc	r24, 0
    9688:	16 c2       	rjmp	.+1068   	; 0x9ab6 <mount_volume+0x4a2>
    968a:	ff 20       	and	r15, r15
    968c:	11 f0       	breq	.+4      	; 0x9692 <mount_volume+0x7e>
    968e:	82 fd       	sbrc	r24, 2
    9690:	f0 cf       	rjmp	.-32     	; 0x9672 <mount_volume+0x5e>
    9692:	40 e0       	ldi	r20, 0x00	; 0
    9694:	50 e0       	ldi	r21, 0x00	; 0
    9696:	ba 01       	movw	r22, r20
    9698:	c8 01       	movw	r24, r16
    969a:	7c df       	rcall	.-264    	; 0x9594 <check_fs>
    969c:	82 30       	cpi	r24, 0x02	; 2
    969e:	91 05       	cpc	r25, r1
    96a0:	b9 f5       	brne	.+110    	; 0x9710 <mount_volume+0xfc>
    96a2:	68 01       	movw	r12, r16
    96a4:	f5 e0       	ldi	r31, 0x05	; 5
    96a6:	cf 1a       	sub	r12, r31
    96a8:	fe ef       	ldi	r31, 0xFE	; 254
    96aa:	df 0a       	sbc	r13, r31
    96ac:	9e 01       	movw	r18, r28
    96ae:	2f 5f       	subi	r18, 0xFF	; 255
    96b0:	3f 4f       	sbci	r19, 0xFF	; 255
    96b2:	79 01       	movw	r14, r18
    96b4:	48 01       	movw	r8, r16
    96b6:	35 ec       	ldi	r19, 0xC5	; 197
    96b8:	83 1a       	sub	r8, r19
    96ba:	3d ef       	ldi	r19, 0xFD	; 253
    96bc:	93 0a       	sbc	r9, r19
    96be:	57 01       	movw	r10, r14
    96c0:	c6 01       	movw	r24, r12
    96c2:	52 da       	rcall	.-2908   	; 0x8b68 <ld_dword>
    96c4:	d5 01       	movw	r26, r10
    96c6:	6d 93       	st	X+, r22
    96c8:	7d 93       	st	X+, r23
    96ca:	8d 93       	st	X+, r24
    96cc:	9d 93       	st	X+, r25
    96ce:	5d 01       	movw	r10, r26
    96d0:	b0 e1       	ldi	r27, 0x10	; 16
    96d2:	cb 0e       	add	r12, r27
    96d4:	d1 1c       	adc	r13, r1
    96d6:	c8 14       	cp	r12, r8
    96d8:	d9 04       	cpc	r13, r9
    96da:	91 f7       	brne	.-28     	; 0x96c0 <mount_volume+0xac>
    96dc:	6e 01       	movw	r12, r28
    96de:	e1 e1       	ldi	r30, 0x11	; 17
    96e0:	ce 0e       	add	r12, r30
    96e2:	d1 1c       	adc	r13, r1
    96e4:	d7 01       	movw	r26, r14
    96e6:	4d 91       	ld	r20, X+
    96e8:	5d 91       	ld	r21, X+
    96ea:	6d 91       	ld	r22, X+
    96ec:	7d 91       	ld	r23, X+
    96ee:	7d 01       	movw	r14, r26
    96f0:	41 15       	cp	r20, r1
    96f2:	51 05       	cpc	r21, r1
    96f4:	61 05       	cpc	r22, r1
    96f6:	71 05       	cpc	r23, r1
    96f8:	31 f0       	breq	.+12     	; 0x9706 <mount_volume+0xf2>
    96fa:	c8 01       	movw	r24, r16
    96fc:	4b df       	rcall	.-362    	; 0x9594 <check_fs>
    96fe:	82 30       	cpi	r24, 0x02	; 2
    9700:	91 05       	cpc	r25, r1
    9702:	18 f4       	brcc	.+6      	; 0x970a <mount_volume+0xf6>
    9704:	05 c0       	rjmp	.+10     	; 0x9710 <mount_volume+0xfc>
    9706:	83 e0       	ldi	r24, 0x03	; 3
    9708:	90 e0       	ldi	r25, 0x00	; 0
    970a:	ce 14       	cp	r12, r14
    970c:	df 04       	cpc	r13, r15
    970e:	51 f7       	brne	.-44     	; 0x96e4 <mount_volume+0xd0>
    9710:	84 30       	cpi	r24, 0x04	; 4
    9712:	91 05       	cpc	r25, r1
    9714:	09 f4       	brne	.+2      	; 0x9718 <mount_volume+0x104>
    9716:	d2 c1       	rjmp	.+932    	; 0x9abc <mount_volume+0x4a8>
    9718:	02 97       	sbiw	r24, 0x02	; 2
    971a:	18 f0       	brcs	.+6      	; 0x9722 <mount_volume+0x10e>
    971c:	8d e0       	ldi	r24, 0x0D	; 13
    971e:	90 e0       	ldi	r25, 0x00	; 0
    9720:	cf c1       	rjmp	.+926    	; 0x9ac0 <mount_volume+0x4ac>
    9722:	f8 01       	movw	r30, r16
    9724:	e0 5c       	subi	r30, 0xC0	; 192
    9726:	ff 4f       	sbci	r31, 0xFF	; 255
    9728:	80 81       	ld	r24, Z
    972a:	91 81       	ldd	r25, Z+1	; 0x01
    972c:	81 15       	cp	r24, r1
    972e:	92 40       	sbci	r25, 0x02	; 2
    9730:	a9 f7       	brne	.-22     	; 0x971c <mount_volume+0x108>
    9732:	3b 96       	adiw	r30, 0x0b	; 11
    9734:	40 80       	ld	r4, Z
    9736:	51 80       	ldd	r5, Z+1	; 0x01
    9738:	41 14       	cp	r4, r1
    973a:	51 04       	cpc	r5, r1
    973c:	19 f0       	breq	.+6      	; 0x9744 <mount_volume+0x130>
    973e:	61 2c       	mov	r6, r1
    9740:	71 2c       	mov	r7, r1
    9742:	06 c0       	rjmp	.+12     	; 0x9750 <mount_volume+0x13c>
    9744:	c8 01       	movw	r24, r16
    9746:	87 5a       	subi	r24, 0xA7	; 167
    9748:	9f 4f       	sbci	r25, 0xFF	; 255
    974a:	0e da       	rcall	.-3044   	; 0x8b68 <ld_dword>
    974c:	2b 01       	movw	r4, r22
    974e:	3c 01       	movw	r6, r24
    9750:	f8 01       	movw	r30, r16
    9752:	21 a9       	ldd	r18, Z+49	; 0x31
    9754:	32 a9       	ldd	r19, Z+50	; 0x32
    9756:	43 a9       	ldd	r20, Z+51	; 0x33
    9758:	54 a9       	ldd	r21, Z+52	; 0x34
    975a:	29 8b       	std	Y+17, r18	; 0x11
    975c:	3a 8b       	std	Y+18, r19	; 0x12
    975e:	4b 8b       	std	Y+19, r20	; 0x13
    9760:	5c 8b       	std	Y+20, r21	; 0x14
    9762:	45 8e       	std	Z+29, r4	; 0x1d
    9764:	56 8e       	std	Z+30, r5	; 0x1e
    9766:	67 8e       	std	Z+31, r6	; 0x1f
    9768:	70 a2       	std	Z+32, r7	; 0x20
    976a:	eb 5b       	subi	r30, 0xBB	; 187
    976c:	ff 4f       	sbci	r31, 0xFF	; 255
    976e:	a0 80       	ld	r10, Z
    9770:	f8 01       	movw	r30, r16
    9772:	a2 82       	std	Z+2, r10	; 0x02
    9774:	8f ef       	ldi	r24, 0xFF	; 255
    9776:	8a 0d       	add	r24, r10
    9778:	82 30       	cpi	r24, 0x02	; 2
    977a:	80 f6       	brcc	.-96     	; 0x971c <mount_volume+0x108>
    977c:	ee 5b       	subi	r30, 0xBE	; 190
    977e:	ff 4f       	sbci	r31, 0xFF	; 255
    9780:	b0 80       	ld	r11, Z
    9782:	8b 2d       	mov	r24, r11
    9784:	90 e0       	ldi	r25, 0x00	; 0
    9786:	f8 01       	movw	r30, r16
    9788:	92 87       	std	Z+10, r25	; 0x0a
    978a:	81 87       	std	Z+9, r24	; 0x09
    978c:	00 97       	sbiw	r24, 0x00	; 0
    978e:	31 f2       	breq	.-116    	; 0x971c <mount_volume+0x108>
    9790:	9c 01       	movw	r18, r24
    9792:	21 50       	subi	r18, 0x01	; 1
    9794:	31 09       	sbc	r19, r1
    9796:	82 23       	and	r24, r18
    9798:	93 23       	and	r25, r19
    979a:	89 2b       	or	r24, r25
    979c:	09 f0       	breq	.+2      	; 0x97a0 <mount_volume+0x18c>
    979e:	be cf       	rjmp	.-132    	; 0x971c <mount_volume+0x108>
    97a0:	ea 5b       	subi	r30, 0xBA	; 186
    97a2:	ff 4f       	sbci	r31, 0xFF	; 255
    97a4:	80 80       	ld	r8, Z
    97a6:	91 80       	ldd	r9, Z+1	; 0x01
    97a8:	f8 01       	movw	r30, r16
    97aa:	90 86       	std	Z+8, r9	; 0x08
    97ac:	87 82       	std	Z+7, r8	; 0x07
    97ae:	c4 01       	movw	r24, r8
    97b0:	8f 70       	andi	r24, 0x0F	; 15
    97b2:	99 27       	eor	r25, r25
    97b4:	89 2b       	or	r24, r25
    97b6:	09 f0       	breq	.+2      	; 0x97ba <mount_volume+0x1a6>
    97b8:	b1 cf       	rjmp	.-158    	; 0x971c <mount_volume+0x108>
    97ba:	e8 5b       	subi	r30, 0xB8	; 184
    97bc:	ff 4f       	sbci	r31, 0xFF	; 255
    97be:	80 81       	ld	r24, Z
    97c0:	91 81       	ldd	r25, Z+1	; 0x01
    97c2:	6c 01       	movw	r12, r24
    97c4:	e1 2c       	mov	r14, r1
    97c6:	f1 2c       	mov	r15, r1
    97c8:	89 2b       	or	r24, r25
    97ca:	31 f4       	brne	.+12     	; 0x97d8 <mount_volume+0x1c4>
    97cc:	c8 01       	movw	r24, r16
    97ce:	8b 5a       	subi	r24, 0xAB	; 171
    97d0:	9f 4f       	sbci	r25, 0xFF	; 255
    97d2:	ca d9       	rcall	.-3180   	; 0x8b68 <ld_dword>
    97d4:	6b 01       	movw	r12, r22
    97d6:	7c 01       	movw	r14, r24
    97d8:	f8 01       	movw	r30, r16
    97da:	ed 5b       	subi	r30, 0xBD	; 189
    97dc:	ff 4f       	sbci	r31, 0xFF	; 255
    97de:	01 90       	ld	r0, Z+
    97e0:	f0 81       	ld	r31, Z
    97e2:	e0 2d       	mov	r30, r0
    97e4:	30 97       	sbiw	r30, 0x00	; 0
    97e6:	09 f4       	brne	.+2      	; 0x97ea <mount_volume+0x1d6>
    97e8:	99 cf       	rjmp	.-206    	; 0x971c <mount_volume+0x108>
    97ea:	aa 2d       	mov	r26, r10
    97ec:	b0 e0       	ldi	r27, 0x00	; 0
    97ee:	a3 01       	movw	r20, r6
    97f0:	92 01       	movw	r18, r4
    97f2:	0e 94 3c e3 	call	0x1c678	; 0x1c678 <__muluhisi3>
    97f6:	69 8f       	std	Y+25, r22	; 0x19
    97f8:	7a 8f       	std	Y+26, r23	; 0x1a
    97fa:	8b 8f       	std	Y+27, r24	; 0x1b
    97fc:	9c 8f       	std	Y+28, r25	; 0x1c
    97fe:	9f 01       	movw	r18, r30
    9800:	40 e0       	ldi	r20, 0x00	; 0
    9802:	50 e0       	ldi	r21, 0x00	; 0
    9804:	2d 8f       	std	Y+29, r18	; 0x1d
    9806:	3e 8f       	std	Y+30, r19	; 0x1e
    9808:	4f 8f       	std	Y+31, r20	; 0x1f
    980a:	58 a3       	std	Y+32, r21	; 0x20
    980c:	c4 01       	movw	r24, r8
    980e:	f4 e0       	ldi	r31, 0x04	; 4
    9810:	96 95       	lsr	r25
    9812:	87 95       	ror	r24
    9814:	fa 95       	dec	r31
    9816:	e1 f7       	brne	.-8      	; 0x9810 <mount_volume+0x1fc>
    9818:	28 0f       	add	r18, r24
    981a:	39 1f       	adc	r19, r25
    981c:	41 1d       	adc	r20, r1
    981e:	51 1d       	adc	r21, r1
    9820:	da 01       	movw	r26, r20
    9822:	c9 01       	movw	r24, r18
    9824:	29 8d       	ldd	r18, Y+25	; 0x19
    9826:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9828:	4b 8d       	ldd	r20, Y+27	; 0x1b
    982a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    982c:	28 0f       	add	r18, r24
    982e:	39 1f       	adc	r19, r25
    9830:	4a 1f       	adc	r20, r26
    9832:	5b 1f       	adc	r21, r27
    9834:	2d 8b       	std	Y+21, r18	; 0x15
    9836:	3e 8b       	std	Y+22, r19	; 0x16
    9838:	4f 8b       	std	Y+23, r20	; 0x17
    983a:	58 8f       	std	Y+24, r21	; 0x18
    983c:	c2 16       	cp	r12, r18
    983e:	d3 06       	cpc	r13, r19
    9840:	e4 06       	cpc	r14, r20
    9842:	f5 06       	cpc	r15, r21
    9844:	08 f4       	brcc	.+2      	; 0x9848 <mount_volume+0x234>
    9846:	6a cf       	rjmp	.-300    	; 0x971c <mount_volume+0x108>
    9848:	c7 01       	movw	r24, r14
    984a:	b6 01       	movw	r22, r12
    984c:	62 1b       	sub	r22, r18
    984e:	73 0b       	sbc	r23, r19
    9850:	84 0b       	sbc	r24, r20
    9852:	95 0b       	sbc	r25, r21
    9854:	2b 2d       	mov	r18, r11
    9856:	30 e0       	ldi	r19, 0x00	; 0
    9858:	40 e0       	ldi	r20, 0x00	; 0
    985a:	50 e0       	ldi	r21, 0x00	; 0
    985c:	0e 94 ef e2 	call	0x1c5de	; 0x1c5de <__udivmodsi4>
    9860:	da 01       	movw	r26, r20
    9862:	c9 01       	movw	r24, r18
    9864:	01 97       	sbiw	r24, 0x01	; 1
    9866:	a1 09       	sbc	r26, r1
    9868:	b1 09       	sbc	r27, r1
    986a:	85 3f       	cpi	r24, 0xF5	; 245
    986c:	9f 4f       	sbci	r25, 0xFF	; 255
    986e:	af 4f       	sbci	r26, 0xFF	; 255
    9870:	bf 40       	sbci	r27, 0x0F	; 15
    9872:	08 f0       	brcs	.+2      	; 0x9876 <mount_volume+0x262>
    9874:	53 cf       	rjmp	.-346    	; 0x971c <mount_volume+0x108>
    9876:	26 3f       	cpi	r18, 0xF6	; 246
    9878:	8f ef       	ldi	r24, 0xFF	; 255
    987a:	38 07       	cpc	r19, r24
    987c:	41 05       	cpc	r20, r1
    987e:	51 05       	cpc	r21, r1
    9880:	50 f4       	brcc	.+20     	; 0x9896 <mount_volume+0x282>
    9882:	26 3f       	cpi	r18, 0xF6	; 246
    9884:	9f e0       	ldi	r25, 0x0F	; 15
    9886:	39 07       	cpc	r19, r25
    9888:	41 05       	cpc	r20, r1
    988a:	51 05       	cpc	r21, r1
    988c:	40 f4       	brcc	.+16     	; 0x989e <mount_volume+0x28a>
    988e:	aa 24       	eor	r10, r10
    9890:	a3 94       	inc	r10
    9892:	b1 2c       	mov	r11, r1
    9894:	07 c0       	rjmp	.+14     	; 0x98a4 <mount_volume+0x290>
    9896:	73 e0       	ldi	r23, 0x03	; 3
    9898:	a7 2e       	mov	r10, r23
    989a:	b1 2c       	mov	r11, r1
    989c:	03 c0       	rjmp	.+6      	; 0x98a4 <mount_volume+0x290>
    989e:	62 e0       	ldi	r22, 0x02	; 2
    98a0:	a6 2e       	mov	r10, r22
    98a2:	b1 2c       	mov	r11, r1
    98a4:	69 01       	movw	r12, r18
    98a6:	7a 01       	movw	r14, r20
    98a8:	a2 e0       	ldi	r26, 0x02	; 2
    98aa:	ca 0e       	add	r12, r26
    98ac:	d1 1c       	adc	r13, r1
    98ae:	e1 1c       	adc	r14, r1
    98b0:	f1 1c       	adc	r15, r1
    98b2:	f8 01       	movw	r30, r16
    98b4:	c1 8e       	std	Z+25, r12	; 0x19
    98b6:	d2 8e       	std	Z+26, r13	; 0x1a
    98b8:	e3 8e       	std	Z+27, r14	; 0x1b
    98ba:	f4 8e       	std	Z+28, r15	; 0x1c
    98bc:	29 89       	ldd	r18, Y+17	; 0x11
    98be:	3a 89       	ldd	r19, Y+18	; 0x12
    98c0:	4b 89       	ldd	r20, Y+19	; 0x13
    98c2:	5c 89       	ldd	r21, Y+20	; 0x14
    98c4:	21 a3       	std	Z+33, r18	; 0x21
    98c6:	32 a3       	std	Z+34, r19	; 0x22
    98c8:	43 a3       	std	Z+35, r20	; 0x23
    98ca:	54 a3       	std	Z+36, r21	; 0x24
    98cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    98ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    98d0:	af 8d       	ldd	r26, Y+31	; 0x1f
    98d2:	b8 a1       	ldd	r27, Y+32	; 0x20
    98d4:	28 0f       	add	r18, r24
    98d6:	39 1f       	adc	r19, r25
    98d8:	4a 1f       	adc	r20, r26
    98da:	5b 1f       	adc	r21, r27
    98dc:	2d 8f       	std	Y+29, r18	; 0x1d
    98de:	3e 8f       	std	Y+30, r19	; 0x1e
    98e0:	4f 8f       	std	Y+31, r20	; 0x1f
    98e2:	58 a3       	std	Y+32, r21	; 0x20
    98e4:	25 a3       	std	Z+37, r18	; 0x25
    98e6:	36 a3       	std	Z+38, r19	; 0x26
    98e8:	47 a3       	std	Z+39, r20	; 0x27
    98ea:	50 a7       	std	Z+40, r21	; 0x28
    98ec:	49 89       	ldd	r20, Y+17	; 0x11
    98ee:	5a 89       	ldd	r21, Y+18	; 0x12
    98f0:	6b 89       	ldd	r22, Y+19	; 0x13
    98f2:	7c 89       	ldd	r23, Y+20	; 0x14
    98f4:	8d 89       	ldd	r24, Y+21	; 0x15
    98f6:	9e 89       	ldd	r25, Y+22	; 0x16
    98f8:	af 89       	ldd	r26, Y+23	; 0x17
    98fa:	b8 8d       	ldd	r27, Y+24	; 0x18
    98fc:	48 0f       	add	r20, r24
    98fe:	59 1f       	adc	r21, r25
    9900:	6a 1f       	adc	r22, r26
    9902:	7b 1f       	adc	r23, r27
    9904:	45 a7       	std	Z+45, r20	; 0x2d
    9906:	56 a7       	std	Z+46, r21	; 0x2e
    9908:	67 a7       	std	Z+47, r22	; 0x2f
    990a:	70 ab       	std	Z+48, r23	; 0x30
    990c:	f3 e0       	ldi	r31, 0x03	; 3
    990e:	af 16       	cp	r10, r31
    9910:	b1 04       	cpc	r11, r1
    9912:	e9 f4       	brne	.+58     	; 0x994e <mount_volume+0x33a>
    9914:	f8 01       	movw	r30, r16
    9916:	e1 5a       	subi	r30, 0xA1	; 161
    9918:	ff 4f       	sbci	r31, 0xFF	; 255
    991a:	80 81       	ld	r24, Z
    991c:	91 81       	ldd	r25, Z+1	; 0x01
    991e:	89 2b       	or	r24, r25
    9920:	09 f0       	breq	.+2      	; 0x9924 <mount_volume+0x310>
    9922:	fc ce       	rjmp	.-520    	; 0x971c <mount_volume+0x108>
    9924:	81 14       	cp	r8, r1
    9926:	91 04       	cpc	r9, r1
    9928:	09 f0       	breq	.+2      	; 0x992c <mount_volume+0x318>
    992a:	f8 ce       	rjmp	.-528    	; 0x971c <mount_volume+0x108>
    992c:	c8 01       	movw	r24, r16
    992e:	8f 59       	subi	r24, 0x9F	; 159
    9930:	9f 4f       	sbci	r25, 0xFF	; 255
    9932:	1a d9       	rcall	.-3532   	; 0x8b68 <ld_dword>
    9934:	f8 01       	movw	r30, r16
    9936:	61 a7       	std	Z+41, r22	; 0x29
    9938:	72 a7       	std	Z+42, r23	; 0x2a
    993a:	83 a7       	std	Z+43, r24	; 0x2b
    993c:	94 a7       	std	Z+44, r25	; 0x2c
    993e:	42 e0       	ldi	r20, 0x02	; 2
    9940:	cc 0c       	add	r12, r12
    9942:	dd 1c       	adc	r13, r13
    9944:	ee 1c       	adc	r14, r14
    9946:	ff 1c       	adc	r15, r15
    9948:	4a 95       	dec	r20
    994a:	d1 f7       	brne	.-12     	; 0x9940 <mount_volume+0x32c>
    994c:	33 c0       	rjmp	.+102    	; 0x99b4 <mount_volume+0x3a0>
    994e:	81 14       	cp	r8, r1
    9950:	91 04       	cpc	r9, r1
    9952:	09 f4       	brne	.+2      	; 0x9956 <mount_volume+0x342>
    9954:	e3 ce       	rjmp	.-570    	; 0x971c <mount_volume+0x108>
    9956:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9958:	9e 8d       	ldd	r25, Y+30	; 0x1e
    995a:	af 8d       	ldd	r26, Y+31	; 0x1f
    995c:	b8 a1       	ldd	r27, Y+32	; 0x20
    995e:	29 8d       	ldd	r18, Y+25	; 0x19
    9960:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9962:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9964:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9966:	82 0f       	add	r24, r18
    9968:	93 1f       	adc	r25, r19
    996a:	a4 1f       	adc	r26, r20
    996c:	b5 1f       	adc	r27, r21
    996e:	f8 01       	movw	r30, r16
    9970:	81 a7       	std	Z+41, r24	; 0x29
    9972:	92 a7       	std	Z+42, r25	; 0x2a
    9974:	a3 a7       	std	Z+43, r26	; 0x2b
    9976:	b4 a7       	std	Z+44, r27	; 0x2c
    9978:	f2 e0       	ldi	r31, 0x02	; 2
    997a:	af 16       	cp	r10, r31
    997c:	b1 04       	cpc	r11, r1
    997e:	29 f4       	brne	.+10     	; 0x998a <mount_volume+0x376>
    9980:	cc 0c       	add	r12, r12
    9982:	dd 1c       	adc	r13, r13
    9984:	ee 1c       	adc	r14, r14
    9986:	ff 1c       	adc	r15, r15
    9988:	15 c0       	rjmp	.+42     	; 0x99b4 <mount_volume+0x3a0>
    998a:	a3 e0       	ldi	r26, 0x03	; 3
    998c:	b0 e0       	ldi	r27, 0x00	; 0
    998e:	a7 01       	movw	r20, r14
    9990:	96 01       	movw	r18, r12
    9992:	0e 94 3c e3 	call	0x1c678	; 0x1c678 <__muluhisi3>
    9996:	dc 01       	movw	r26, r24
    9998:	cb 01       	movw	r24, r22
    999a:	b6 95       	lsr	r27
    999c:	a7 95       	ror	r26
    999e:	97 95       	ror	r25
    99a0:	87 95       	ror	r24
    99a2:	21 e0       	ldi	r18, 0x01	; 1
    99a4:	c2 22       	and	r12, r18
    99a6:	dd 24       	eor	r13, r13
    99a8:	ee 24       	eor	r14, r14
    99aa:	ff 24       	eor	r15, r15
    99ac:	c8 0e       	add	r12, r24
    99ae:	d9 1e       	adc	r13, r25
    99b0:	ea 1e       	adc	r14, r26
    99b2:	fb 1e       	adc	r15, r27
    99b4:	3f ef       	ldi	r19, 0xFF	; 255
    99b6:	c3 0e       	add	r12, r19
    99b8:	31 e0       	ldi	r19, 0x01	; 1
    99ba:	d3 1e       	adc	r13, r19
    99bc:	e1 1c       	adc	r14, r1
    99be:	f1 1c       	adc	r15, r1
    99c0:	89 e0       	ldi	r24, 0x09	; 9
    99c2:	f6 94       	lsr	r15
    99c4:	e7 94       	ror	r14
    99c6:	d7 94       	ror	r13
    99c8:	c7 94       	ror	r12
    99ca:	8a 95       	dec	r24
    99cc:	d1 f7       	brne	.-12     	; 0x99c2 <mount_volume+0x3ae>
    99ce:	4c 14       	cp	r4, r12
    99d0:	5d 04       	cpc	r5, r13
    99d2:	6e 04       	cpc	r6, r14
    99d4:	7f 04       	cpc	r7, r15
    99d6:	08 f4       	brcc	.+2      	; 0x99da <mount_volume+0x3c6>
    99d8:	a1 ce       	rjmp	.-702    	; 0x971c <mount_volume+0x108>
    99da:	8f ef       	ldi	r24, 0xFF	; 255
    99dc:	9f ef       	ldi	r25, 0xFF	; 255
    99de:	dc 01       	movw	r26, r24
    99e0:	f8 01       	movw	r30, r16
    99e2:	81 8b       	std	Z+17, r24	; 0x11
    99e4:	92 8b       	std	Z+18, r25	; 0x12
    99e6:	a3 8b       	std	Z+19, r26	; 0x13
    99e8:	b4 8b       	std	Z+20, r27	; 0x14
    99ea:	85 87       	std	Z+13, r24	; 0x0d
    99ec:	96 87       	std	Z+14, r25	; 0x0e
    99ee:	a7 87       	std	Z+15, r26	; 0x0f
    99f0:	b0 8b       	std	Z+16, r27	; 0x10
    99f2:	80 e8       	ldi	r24, 0x80	; 128
    99f4:	84 83       	std	Z+4, r24	; 0x04
    99f6:	f3 e0       	ldi	r31, 0x03	; 3
    99f8:	af 16       	cp	r10, r31
    99fa:	b1 04       	cpc	r11, r1
    99fc:	09 f0       	breq	.+2      	; 0x9a00 <mount_volume+0x3ec>
    99fe:	3f c0       	rjmp	.+126    	; 0x9a7e <mount_volume+0x46a>
    9a00:	f8 01       	movw	r30, r16
    9a02:	eb 59       	subi	r30, 0x9B	; 155
    9a04:	ff 4f       	sbci	r31, 0xFF	; 255
    9a06:	80 81       	ld	r24, Z
    9a08:	91 81       	ldd	r25, Z+1	; 0x01
    9a0a:	01 97       	sbiw	r24, 0x01	; 1
    9a0c:	c1 f5       	brne	.+112    	; 0x9a7e <mount_volume+0x46a>
    9a0e:	49 89       	ldd	r20, Y+17	; 0x11
    9a10:	5a 89       	ldd	r21, Y+18	; 0x12
    9a12:	6b 89       	ldd	r22, Y+19	; 0x13
    9a14:	7c 89       	ldd	r23, Y+20	; 0x14
    9a16:	4f 5f       	subi	r20, 0xFF	; 255
    9a18:	5f 4f       	sbci	r21, 0xFF	; 255
    9a1a:	6f 4f       	sbci	r22, 0xFF	; 255
    9a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    9a1e:	c8 01       	movw	r24, r16
    9a20:	7e dd       	rcall	.-1284   	; 0x951e <move_window>
    9a22:	89 2b       	or	r24, r25
    9a24:	61 f5       	brne	.+88     	; 0x9a7e <mount_volume+0x46a>
    9a26:	f8 01       	movw	r30, r16
    9a28:	14 82       	std	Z+4, r1	; 0x04
    9a2a:	ed 5c       	subi	r30, 0xCD	; 205
    9a2c:	fd 4f       	sbci	r31, 0xFD	; 253
    9a2e:	80 81       	ld	r24, Z
    9a30:	91 81       	ldd	r25, Z+1	; 0x01
    9a32:	85 35       	cpi	r24, 0x55	; 85
    9a34:	9a 4a       	sbci	r25, 0xAA	; 170
    9a36:	19 f5       	brne	.+70     	; 0x9a7e <mount_volume+0x46a>
    9a38:	c8 01       	movw	r24, r16
    9a3a:	c5 96       	adiw	r24, 0x35	; 53
    9a3c:	95 d8       	rcall	.-3798   	; 0x8b68 <ld_dword>
    9a3e:	62 35       	cpi	r22, 0x52	; 82
    9a40:	72 45       	sbci	r23, 0x52	; 82
    9a42:	81 46       	sbci	r24, 0x61	; 97
    9a44:	91 44       	sbci	r25, 0x41	; 65
    9a46:	d9 f4       	brne	.+54     	; 0x9a7e <mount_volume+0x46a>
    9a48:	c8 01       	movw	r24, r16
    9a4a:	87 5e       	subi	r24, 0xE7	; 231
    9a4c:	9d 4f       	sbci	r25, 0xFD	; 253
    9a4e:	8c d8       	rcall	.-3816   	; 0x8b68 <ld_dword>
    9a50:	62 37       	cpi	r22, 0x72	; 114
    9a52:	72 47       	sbci	r23, 0x72	; 114
    9a54:	81 44       	sbci	r24, 0x41	; 65
    9a56:	91 46       	sbci	r25, 0x61	; 97
    9a58:	91 f4       	brne	.+36     	; 0x9a7e <mount_volume+0x46a>
    9a5a:	c8 01       	movw	r24, r16
    9a5c:	83 5e       	subi	r24, 0xE3	; 227
    9a5e:	9d 4f       	sbci	r25, 0xFD	; 253
    9a60:	83 d8       	rcall	.-3834   	; 0x8b68 <ld_dword>
    9a62:	f8 01       	movw	r30, r16
    9a64:	61 8b       	std	Z+17, r22	; 0x11
    9a66:	72 8b       	std	Z+18, r23	; 0x12
    9a68:	83 8b       	std	Z+19, r24	; 0x13
    9a6a:	94 8b       	std	Z+20, r25	; 0x14
    9a6c:	c8 01       	movw	r24, r16
    9a6e:	8f 5d       	subi	r24, 0xDF	; 223
    9a70:	9d 4f       	sbci	r25, 0xFD	; 253
    9a72:	7a d8       	rcall	.-3852   	; 0x8b68 <ld_dword>
    9a74:	f8 01       	movw	r30, r16
    9a76:	65 87       	std	Z+13, r22	; 0x0d
    9a78:	76 87       	std	Z+14, r23	; 0x0e
    9a7a:	87 87       	std	Z+15, r24	; 0x0f
    9a7c:	90 8b       	std	Z+16, r25	; 0x10
    9a7e:	d8 01       	movw	r26, r16
    9a80:	ac 92       	st	X, r10
    9a82:	80 91 23 18 	lds	r24, 0x1823	; 0x801823 <Fsid>
    9a86:	90 91 24 18 	lds	r25, 0x1824	; 0x801824 <Fsid+0x1>
    9a8a:	01 96       	adiw	r24, 0x01	; 1
    9a8c:	90 93 24 18 	sts	0x1824, r25	; 0x801824 <Fsid+0x1>
    9a90:	80 93 23 18 	sts	0x1823, r24	; 0x801823 <Fsid>
    9a94:	f8 01       	movw	r30, r16
    9a96:	96 83       	std	Z+6, r25	; 0x06
    9a98:	85 83       	std	Z+5, r24	; 0x05
    9a9a:	15 8a       	std	Z+21, r1	; 0x15
    9a9c:	16 8a       	std	Z+22, r1	; 0x16
    9a9e:	17 8a       	std	Z+23, r1	; 0x17
    9aa0:	10 8e       	std	Z+24, r1	; 0x18
    9aa2:	06 c0       	rjmp	.+12     	; 0x9ab0 <mount_volume+0x49c>
    9aa4:	8b e0       	ldi	r24, 0x0B	; 11
    9aa6:	90 e0       	ldi	r25, 0x00	; 0
    9aa8:	0b c0       	rjmp	.+22     	; 0x9ac0 <mount_volume+0x4ac>
    9aaa:	8c e0       	ldi	r24, 0x0C	; 12
    9aac:	90 e0       	ldi	r25, 0x00	; 0
    9aae:	08 c0       	rjmp	.+16     	; 0x9ac0 <mount_volume+0x4ac>
    9ab0:	80 e0       	ldi	r24, 0x00	; 0
    9ab2:	90 e0       	ldi	r25, 0x00	; 0
    9ab4:	05 c0       	rjmp	.+10     	; 0x9ac0 <mount_volume+0x4ac>
    9ab6:	83 e0       	ldi	r24, 0x03	; 3
    9ab8:	90 e0       	ldi	r25, 0x00	; 0
    9aba:	02 c0       	rjmp	.+4      	; 0x9ac0 <mount_volume+0x4ac>
    9abc:	81 e0       	ldi	r24, 0x01	; 1
    9abe:	90 e0       	ldi	r25, 0x00	; 0
    9ac0:	a0 96       	adiw	r28, 0x20	; 32
    9ac2:	e0 e1       	ldi	r30, 0x10	; 16
    9ac4:	0c 94 7a e3 	jmp	0x1c6f4	; 0x1c6f4 <__epilogue_restores__+0x4>

00009ac8 <put_fat>:
    9ac8:	a6 e0       	ldi	r26, 0x06	; 6
    9aca:	b0 e0       	ldi	r27, 0x00	; 0
    9acc:	ea e6       	ldi	r30, 0x6A	; 106
    9ace:	fd e4       	ldi	r31, 0x4D	; 77
    9ad0:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
    9ad4:	42 30       	cpi	r20, 0x02	; 2
    9ad6:	51 05       	cpc	r21, r1
    9ad8:	61 05       	cpc	r22, r1
    9ada:	71 05       	cpc	r23, r1
    9adc:	08 f4       	brcc	.+2      	; 0x9ae0 <put_fat+0x18>
    9ade:	e7 c0       	rjmp	.+462    	; 0x9cae <put_fat+0x1e6>
    9ae0:	fc 01       	movw	r30, r24
    9ae2:	c1 8c       	ldd	r12, Z+25	; 0x19
    9ae4:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9ae6:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9ae8:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9aea:	4c 15       	cp	r20, r12
    9aec:	5d 05       	cpc	r21, r13
    9aee:	6e 05       	cpc	r22, r14
    9af0:	7f 05       	cpc	r23, r15
    9af2:	08 f0       	brcs	.+2      	; 0x9af6 <put_fat+0x2e>
    9af4:	dc c0       	rjmp	.+440    	; 0x9cae <put_fat+0x1e6>
    9af6:	28 01       	movw	r4, r16
    9af8:	39 01       	movw	r6, r18
    9afa:	6a 01       	movw	r12, r20
    9afc:	7b 01       	movw	r14, r22
    9afe:	9e 83       	std	Y+6, r25	; 0x06
    9b00:	8d 83       	std	Y+5, r24	; 0x05
    9b02:	80 81       	ld	r24, Z
    9b04:	82 30       	cpi	r24, 0x02	; 2
    9b06:	09 f4       	brne	.+2      	; 0x9b0a <put_fat+0x42>
    9b08:	73 c0       	rjmp	.+230    	; 0x9bf0 <put_fat+0x128>
    9b0a:	83 30       	cpi	r24, 0x03	; 3
    9b0c:	09 f4       	brne	.+2      	; 0x9b10 <put_fat+0x48>
    9b0e:	92 c0       	rjmp	.+292    	; 0x9c34 <put_fat+0x16c>
    9b10:	81 30       	cpi	r24, 0x01	; 1
    9b12:	09 f0       	breq	.+2      	; 0x9b16 <put_fat+0x4e>
    9b14:	cc c0       	rjmp	.+408    	; 0x9cae <put_fat+0x1e6>
    9b16:	4a 01       	movw	r8, r20
    9b18:	96 94       	lsr	r9
    9b1a:	87 94       	ror	r8
    9b1c:	84 0e       	add	r8, r20
    9b1e:	95 1e       	adc	r9, r21
    9b20:	c4 01       	movw	r24, r8
    9b22:	89 2f       	mov	r24, r25
    9b24:	99 27       	eor	r25, r25
    9b26:	86 95       	lsr	r24
    9b28:	45 a1       	ldd	r20, Z+37	; 0x25
    9b2a:	56 a1       	ldd	r21, Z+38	; 0x26
    9b2c:	67 a1       	ldd	r22, Z+39	; 0x27
    9b2e:	70 a5       	ldd	r23, Z+40	; 0x28
    9b30:	48 0f       	add	r20, r24
    9b32:	59 1f       	adc	r21, r25
    9b34:	61 1d       	adc	r22, r1
    9b36:	71 1d       	adc	r23, r1
    9b38:	cf 01       	movw	r24, r30
    9b3a:	f1 dc       	rcall	.-1566   	; 0x951e <move_window>
    9b3c:	5c 01       	movw	r10, r24
    9b3e:	89 2b       	or	r24, r25
    9b40:	09 f0       	breq	.+2      	; 0x9b44 <put_fat+0x7c>
    9b42:	b8 c0       	rjmp	.+368    	; 0x9cb4 <put_fat+0x1ec>
    9b44:	2d 80       	ldd	r2, Y+5	; 0x05
    9b46:	3e 80       	ldd	r3, Y+6	; 0x06
    9b48:	f5 e3       	ldi	r31, 0x35	; 53
    9b4a:	2f 0e       	add	r2, r31
    9b4c:	31 1c       	adc	r3, r1
    9b4e:	84 01       	movw	r16, r8
    9b50:	0f 5f       	subi	r16, 0xFF	; 255
    9b52:	1f 4f       	sbci	r17, 0xFF	; 255
    9b54:	21 e0       	ldi	r18, 0x01	; 1
    9b56:	92 22       	and	r9, r18
    9b58:	f1 01       	movw	r30, r2
    9b5a:	e8 0d       	add	r30, r8
    9b5c:	f9 1d       	adc	r31, r9
    9b5e:	d7 01       	movw	r26, r14
    9b60:	c6 01       	movw	r24, r12
    9b62:	81 70       	andi	r24, 0x01	; 1
    9b64:	99 27       	eor	r25, r25
    9b66:	aa 27       	eor	r26, r26
    9b68:	bb 27       	eor	r27, r27
    9b6a:	89 83       	std	Y+1, r24	; 0x01
    9b6c:	9a 83       	std	Y+2, r25	; 0x02
    9b6e:	ab 83       	std	Y+3, r26	; 0x03
    9b70:	bc 83       	std	Y+4, r27	; 0x04
    9b72:	c0 fe       	sbrs	r12, 0
    9b74:	09 c0       	rjmp	.+18     	; 0x9b88 <put_fat+0xc0>
    9b76:	80 81       	ld	r24, Z
    9b78:	28 2f       	mov	r18, r24
    9b7a:	2f 70       	andi	r18, 0x0F	; 15
    9b7c:	a0 e1       	ldi	r26, 0x10	; 16
    9b7e:	4a 9e       	mul	r4, r26
    9b80:	c0 01       	movw	r24, r0
    9b82:	11 24       	eor	r1, r1
    9b84:	82 2b       	or	r24, r18
    9b86:	01 c0       	rjmp	.+2      	; 0x9b8a <put_fat+0xc2>
    9b88:	84 2d       	mov	r24, r4
    9b8a:	80 83       	st	Z, r24
    9b8c:	81 e0       	ldi	r24, 0x01	; 1
    9b8e:	ed 81       	ldd	r30, Y+5	; 0x05
    9b90:	fe 81       	ldd	r31, Y+6	; 0x06
    9b92:	83 83       	std	Z+3, r24	; 0x03
    9b94:	45 a1       	ldd	r20, Z+37	; 0x25
    9b96:	56 a1       	ldd	r21, Z+38	; 0x26
    9b98:	67 a1       	ldd	r22, Z+39	; 0x27
    9b9a:	70 a5       	ldd	r23, Z+40	; 0x28
    9b9c:	c8 01       	movw	r24, r16
    9b9e:	89 2f       	mov	r24, r25
    9ba0:	99 27       	eor	r25, r25
    9ba2:	86 95       	lsr	r24
    9ba4:	48 0f       	add	r20, r24
    9ba6:	59 1f       	adc	r21, r25
    9ba8:	61 1d       	adc	r22, r1
    9baa:	71 1d       	adc	r23, r1
    9bac:	cf 01       	movw	r24, r30
    9bae:	b7 dc       	rcall	.-1682   	; 0x951e <move_window>
    9bb0:	5c 01       	movw	r10, r24
    9bb2:	89 2b       	or	r24, r25
    9bb4:	09 f0       	breq	.+2      	; 0x9bb8 <put_fat+0xf0>
    9bb6:	7e c0       	rjmp	.+252    	; 0x9cb4 <put_fat+0x1ec>
    9bb8:	11 70       	andi	r17, 0x01	; 1
    9bba:	f1 01       	movw	r30, r2
    9bbc:	e0 0f       	add	r30, r16
    9bbe:	f1 1f       	adc	r31, r17
    9bc0:	89 81       	ldd	r24, Y+1	; 0x01
    9bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    9bc4:	ab 81       	ldd	r26, Y+3	; 0x03
    9bc6:	bc 81       	ldd	r27, Y+4	; 0x04
    9bc8:	89 2b       	or	r24, r25
    9bca:	8a 2b       	or	r24, r26
    9bcc:	8b 2b       	or	r24, r27
    9bce:	41 f0       	breq	.+16     	; 0x9be0 <put_fat+0x118>
    9bd0:	54 e0       	ldi	r21, 0x04	; 4
    9bd2:	76 94       	lsr	r7
    9bd4:	67 94       	ror	r6
    9bd6:	57 94       	ror	r5
    9bd8:	47 94       	ror	r4
    9bda:	5a 95       	dec	r21
    9bdc:	d1 f7       	brne	.-12     	; 0x9bd2 <put_fat+0x10a>
    9bde:	06 c0       	rjmp	.+12     	; 0x9bec <put_fat+0x124>
    9be0:	00 81       	ld	r16, Z
    9be2:	00 7f       	andi	r16, 0xF0	; 240
    9be4:	85 2d       	mov	r24, r5
    9be6:	8f 70       	andi	r24, 0x0F	; 15
    9be8:	40 2e       	mov	r4, r16
    9bea:	48 2a       	or	r4, r24
    9bec:	40 82       	st	Z, r4
    9bee:	5a c0       	rjmp	.+180    	; 0x9ca4 <put_fat+0x1dc>
    9bf0:	77 27       	eor	r23, r23
    9bf2:	6f 2d       	mov	r22, r15
    9bf4:	5e 2d       	mov	r21, r14
    9bf6:	4d 2d       	mov	r20, r13
    9bf8:	ed 81       	ldd	r30, Y+5	; 0x05
    9bfa:	fe 81       	ldd	r31, Y+6	; 0x06
    9bfc:	85 a1       	ldd	r24, Z+37	; 0x25
    9bfe:	96 a1       	ldd	r25, Z+38	; 0x26
    9c00:	a7 a1       	ldd	r26, Z+39	; 0x27
    9c02:	b0 a5       	ldd	r27, Z+40	; 0x28
    9c04:	48 0f       	add	r20, r24
    9c06:	59 1f       	adc	r21, r25
    9c08:	6a 1f       	adc	r22, r26
    9c0a:	7b 1f       	adc	r23, r27
    9c0c:	cf 01       	movw	r24, r30
    9c0e:	87 dc       	rcall	.-1778   	; 0x951e <move_window>
    9c10:	5c 01       	movw	r10, r24
    9c12:	89 2b       	or	r24, r25
    9c14:	09 f0       	breq	.+2      	; 0x9c18 <put_fat+0x150>
    9c16:	4e c0       	rjmp	.+156    	; 0x9cb4 <put_fat+0x1ec>
    9c18:	ed 81       	ldd	r30, Y+5	; 0x05
    9c1a:	fe 81       	ldd	r31, Y+6	; 0x06
    9c1c:	f5 96       	adiw	r30, 0x35	; 53
    9c1e:	cc 0c       	add	r12, r12
    9c20:	dd 1c       	adc	r13, r13
    9c22:	e8 94       	clt
    9c24:	c0 f8       	bld	r12, 0
    9c26:	21 e0       	ldi	r18, 0x01	; 1
    9c28:	d2 22       	and	r13, r18
    9c2a:	ec 0d       	add	r30, r12
    9c2c:	fd 1d       	adc	r31, r13
    9c2e:	40 82       	st	Z, r4
    9c30:	51 82       	std	Z+1, r5	; 0x01
    9c32:	38 c0       	rjmp	.+112    	; 0x9ca4 <put_fat+0x1dc>
    9c34:	ed 81       	ldd	r30, Y+5	; 0x05
    9c36:	fe 81       	ldd	r31, Y+6	; 0x06
    9c38:	85 a1       	ldd	r24, Z+37	; 0x25
    9c3a:	96 a1       	ldd	r25, Z+38	; 0x26
    9c3c:	a7 a1       	ldd	r26, Z+39	; 0x27
    9c3e:	b0 a5       	ldd	r27, Z+40	; 0x28
    9c40:	27 e0       	ldi	r18, 0x07	; 7
    9c42:	76 95       	lsr	r23
    9c44:	67 95       	ror	r22
    9c46:	57 95       	ror	r21
    9c48:	47 95       	ror	r20
    9c4a:	2a 95       	dec	r18
    9c4c:	d1 f7       	brne	.-12     	; 0x9c42 <put_fat+0x17a>
    9c4e:	48 0f       	add	r20, r24
    9c50:	59 1f       	adc	r21, r25
    9c52:	6a 1f       	adc	r22, r26
    9c54:	7b 1f       	adc	r23, r27
    9c56:	cf 01       	movw	r24, r30
    9c58:	62 dc       	rcall	.-1852   	; 0x951e <move_window>
    9c5a:	5c 01       	movw	r10, r24
    9c5c:	89 2b       	or	r24, r25
    9c5e:	51 f5       	brne	.+84     	; 0x9cb4 <put_fat+0x1ec>
    9c60:	4d 81       	ldd	r20, Y+5	; 0x05
    9c62:	5e 81       	ldd	r21, Y+6	; 0x06
    9c64:	4b 5c       	subi	r20, 0xCB	; 203
    9c66:	5f 4f       	sbci	r21, 0xFF	; 255
    9c68:	cc 0c       	add	r12, r12
    9c6a:	dd 1c       	adc	r13, r13
    9c6c:	cc 0c       	add	r12, r12
    9c6e:	dd 1c       	adc	r13, r13
    9c70:	fc ef       	ldi	r31, 0xFC	; 252
    9c72:	cf 22       	and	r12, r31
    9c74:	f1 e0       	ldi	r31, 0x01	; 1
    9c76:	df 22       	and	r13, r31
    9c78:	c4 0e       	add	r12, r20
    9c7a:	d5 1e       	adc	r13, r21
    9c7c:	c6 01       	movw	r24, r12
    9c7e:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <ld_dword>
    9c82:	2f e0       	ldi	r18, 0x0F	; 15
    9c84:	72 22       	and	r7, r18
    9c86:	dc 01       	movw	r26, r24
    9c88:	cb 01       	movw	r24, r22
    9c8a:	88 27       	eor	r24, r24
    9c8c:	99 27       	eor	r25, r25
    9c8e:	aa 27       	eor	r26, r26
    9c90:	b0 7f       	andi	r27, 0xF0	; 240
    9c92:	b3 01       	movw	r22, r6
    9c94:	a2 01       	movw	r20, r4
    9c96:	48 2b       	or	r20, r24
    9c98:	59 2b       	or	r21, r25
    9c9a:	6a 2b       	or	r22, r26
    9c9c:	7b 2b       	or	r23, r27
    9c9e:	c6 01       	movw	r24, r12
    9ca0:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <st_dword>
    9ca4:	81 e0       	ldi	r24, 0x01	; 1
    9ca6:	ed 81       	ldd	r30, Y+5	; 0x05
    9ca8:	fe 81       	ldd	r31, Y+6	; 0x06
    9caa:	83 83       	std	Z+3, r24	; 0x03
    9cac:	03 c0       	rjmp	.+6      	; 0x9cb4 <put_fat+0x1ec>
    9cae:	82 e0       	ldi	r24, 0x02	; 2
    9cb0:	a8 2e       	mov	r10, r24
    9cb2:	b1 2c       	mov	r11, r1
    9cb4:	c5 01       	movw	r24, r10
    9cb6:	26 96       	adiw	r28, 0x06	; 6
    9cb8:	e2 e1       	ldi	r30, 0x12	; 18
    9cba:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

00009cbe <get_fat.isra.10>:
    9cbe:	a0 e0       	ldi	r26, 0x00	; 0
    9cc0:	b0 e0       	ldi	r27, 0x00	; 0
    9cc2:	e5 e6       	ldi	r30, 0x65	; 101
    9cc4:	fe e4       	ldi	r31, 0x4E	; 78
    9cc6:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__prologue_saves__+0x10>
    9cca:	42 30       	cpi	r20, 0x02	; 2
    9ccc:	51 05       	cpc	r21, r1
    9cce:	61 05       	cpc	r22, r1
    9cd0:	71 05       	cpc	r23, r1
    9cd2:	08 f4       	brcc	.+2      	; 0x9cd6 <get_fat.isra.10+0x18>
    9cd4:	9f c0       	rjmp	.+318    	; 0x9e14 <get_fat.isra.10+0x156>
    9cd6:	fc 01       	movw	r30, r24
    9cd8:	01 8d       	ldd	r16, Z+25	; 0x19
    9cda:	12 8d       	ldd	r17, Z+26	; 0x1a
    9cdc:	23 8d       	ldd	r18, Z+27	; 0x1b
    9cde:	34 8d       	ldd	r19, Z+28	; 0x1c
    9ce0:	40 17       	cp	r20, r16
    9ce2:	51 07       	cpc	r21, r17
    9ce4:	62 07       	cpc	r22, r18
    9ce6:	73 07       	cpc	r23, r19
    9ce8:	08 f0       	brcs	.+2      	; 0x9cec <get_fat.isra.10+0x2e>
    9cea:	94 c0       	rjmp	.+296    	; 0x9e14 <get_fat.isra.10+0x156>
    9cec:	6a 01       	movw	r12, r20
    9cee:	7b 01       	movw	r14, r22
    9cf0:	8c 01       	movw	r16, r24
    9cf2:	80 81       	ld	r24, Z
    9cf4:	82 30       	cpi	r24, 0x02	; 2
    9cf6:	09 f4       	brne	.+2      	; 0x9cfa <get_fat.isra.10+0x3c>
    9cf8:	4b c0       	rjmp	.+150    	; 0x9d90 <get_fat.isra.10+0xd2>
    9cfa:	83 30       	cpi	r24, 0x03	; 3
    9cfc:	09 f4       	brne	.+2      	; 0x9d00 <get_fat.isra.10+0x42>
    9cfe:	67 c0       	rjmp	.+206    	; 0x9dce <get_fat.isra.10+0x110>
    9d00:	81 30       	cpi	r24, 0x01	; 1
    9d02:	09 f0       	breq	.+2      	; 0x9d06 <get_fat.isra.10+0x48>
    9d04:	87 c0       	rjmp	.+270    	; 0x9e14 <get_fat.isra.10+0x156>
    9d06:	ea 01       	movw	r28, r20
    9d08:	d6 95       	lsr	r29
    9d0a:	c7 95       	ror	r28
    9d0c:	cc 0d       	add	r28, r12
    9d0e:	dd 1d       	adc	r29, r13
    9d10:	ce 01       	movw	r24, r28
    9d12:	89 2f       	mov	r24, r25
    9d14:	99 27       	eor	r25, r25
    9d16:	86 95       	lsr	r24
    9d18:	45 a1       	ldd	r20, Z+37	; 0x25
    9d1a:	56 a1       	ldd	r21, Z+38	; 0x26
    9d1c:	67 a1       	ldd	r22, Z+39	; 0x27
    9d1e:	70 a5       	ldd	r23, Z+40	; 0x28
    9d20:	48 0f       	add	r20, r24
    9d22:	59 1f       	adc	r21, r25
    9d24:	61 1d       	adc	r22, r1
    9d26:	71 1d       	adc	r23, r1
    9d28:	cf 01       	movw	r24, r30
    9d2a:	f9 db       	rcall	.-2062   	; 0x951e <move_window>
    9d2c:	89 2b       	or	r24, r25
    9d2e:	21 f0       	breq	.+8      	; 0x9d38 <get_fat.isra.10+0x7a>
    9d30:	6f ef       	ldi	r22, 0xFF	; 255
    9d32:	7f ef       	ldi	r23, 0xFF	; 255
    9d34:	cb 01       	movw	r24, r22
    9d36:	72 c0       	rjmp	.+228    	; 0x9e1c <get_fat.isra.10+0x15e>
    9d38:	5e 01       	movw	r10, r28
    9d3a:	ff ef       	ldi	r31, 0xFF	; 255
    9d3c:	af 1a       	sub	r10, r31
    9d3e:	bf 0a       	sbc	r11, r31
    9d40:	d1 70       	andi	r29, 0x01	; 1
    9d42:	c0 0f       	add	r28, r16
    9d44:	d1 1f       	adc	r29, r17
    9d46:	cd a9       	ldd	r28, Y+53	; 0x35
    9d48:	c5 01       	movw	r24, r10
    9d4a:	89 2f       	mov	r24, r25
    9d4c:	99 27       	eor	r25, r25
    9d4e:	86 95       	lsr	r24
    9d50:	f8 01       	movw	r30, r16
    9d52:	45 a1       	ldd	r20, Z+37	; 0x25
    9d54:	56 a1       	ldd	r21, Z+38	; 0x26
    9d56:	67 a1       	ldd	r22, Z+39	; 0x27
    9d58:	70 a5       	ldd	r23, Z+40	; 0x28
    9d5a:	48 0f       	add	r20, r24
    9d5c:	59 1f       	adc	r21, r25
    9d5e:	61 1d       	adc	r22, r1
    9d60:	71 1d       	adc	r23, r1
    9d62:	c8 01       	movw	r24, r16
    9d64:	dc db       	rcall	.-2120   	; 0x951e <move_window>
    9d66:	89 2b       	or	r24, r25
    9d68:	19 f7       	brne	.-58     	; 0x9d30 <get_fat.isra.10+0x72>
    9d6a:	f1 e0       	ldi	r31, 0x01	; 1
    9d6c:	bf 22       	and	r11, r31
    9d6e:	f8 01       	movw	r30, r16
    9d70:	ea 0d       	add	r30, r10
    9d72:	fb 1d       	adc	r31, r11
    9d74:	85 a9       	ldd	r24, Z+53	; 0x35
    9d76:	6c 2f       	mov	r22, r28
    9d78:	70 e0       	ldi	r23, 0x00	; 0
    9d7a:	78 2b       	or	r23, r24
    9d7c:	c0 fe       	sbrs	r12, 0
    9d7e:	06 c0       	rjmp	.+12     	; 0x9d8c <get_fat.isra.10+0xce>
    9d80:	54 e0       	ldi	r21, 0x04	; 4
    9d82:	76 95       	lsr	r23
    9d84:	67 95       	ror	r22
    9d86:	5a 95       	dec	r21
    9d88:	e1 f7       	brne	.-8      	; 0x9d82 <get_fat.isra.10+0xc4>
    9d8a:	1e c0       	rjmp	.+60     	; 0x9dc8 <get_fat.isra.10+0x10a>
    9d8c:	7f 70       	andi	r23, 0x0F	; 15
    9d8e:	1c c0       	rjmp	.+56     	; 0x9dc8 <get_fat.isra.10+0x10a>
    9d90:	77 27       	eor	r23, r23
    9d92:	6f 2d       	mov	r22, r15
    9d94:	5e 2d       	mov	r21, r14
    9d96:	4d 2d       	mov	r20, r13
    9d98:	85 a1       	ldd	r24, Z+37	; 0x25
    9d9a:	96 a1       	ldd	r25, Z+38	; 0x26
    9d9c:	a7 a1       	ldd	r26, Z+39	; 0x27
    9d9e:	b0 a5       	ldd	r27, Z+40	; 0x28
    9da0:	48 0f       	add	r20, r24
    9da2:	59 1f       	adc	r21, r25
    9da4:	6a 1f       	adc	r22, r26
    9da6:	7b 1f       	adc	r23, r27
    9da8:	cf 01       	movw	r24, r30
    9daa:	b9 db       	rcall	.-2190   	; 0x951e <move_window>
    9dac:	89 2b       	or	r24, r25
    9dae:	09 f0       	breq	.+2      	; 0x9db2 <get_fat.isra.10+0xf4>
    9db0:	bf cf       	rjmp	.-130    	; 0x9d30 <get_fat.isra.10+0x72>
    9db2:	cc 0c       	add	r12, r12
    9db4:	dd 1c       	adc	r13, r13
    9db6:	e8 94       	clt
    9db8:	c0 f8       	bld	r12, 0
    9dba:	f1 e0       	ldi	r31, 0x01	; 1
    9dbc:	df 22       	and	r13, r31
    9dbe:	f8 01       	movw	r30, r16
    9dc0:	ec 0d       	add	r30, r12
    9dc2:	fd 1d       	adc	r31, r13
    9dc4:	65 a9       	ldd	r22, Z+53	; 0x35
    9dc6:	76 a9       	ldd	r23, Z+54	; 0x36
    9dc8:	80 e0       	ldi	r24, 0x00	; 0
    9dca:	90 e0       	ldi	r25, 0x00	; 0
    9dcc:	27 c0       	rjmp	.+78     	; 0x9e1c <get_fat.isra.10+0x15e>
    9dce:	85 a1       	ldd	r24, Z+37	; 0x25
    9dd0:	96 a1       	ldd	r25, Z+38	; 0x26
    9dd2:	a7 a1       	ldd	r26, Z+39	; 0x27
    9dd4:	b0 a5       	ldd	r27, Z+40	; 0x28
    9dd6:	27 e0       	ldi	r18, 0x07	; 7
    9dd8:	76 95       	lsr	r23
    9dda:	67 95       	ror	r22
    9ddc:	57 95       	ror	r21
    9dde:	47 95       	ror	r20
    9de0:	2a 95       	dec	r18
    9de2:	d1 f7       	brne	.-12     	; 0x9dd8 <get_fat.isra.10+0x11a>
    9de4:	48 0f       	add	r20, r24
    9de6:	59 1f       	adc	r21, r25
    9de8:	6a 1f       	adc	r22, r26
    9dea:	7b 1f       	adc	r23, r27
    9dec:	cf 01       	movw	r24, r30
    9dee:	97 db       	rcall	.-2258   	; 0x951e <move_window>
    9df0:	89 2b       	or	r24, r25
    9df2:	09 f0       	breq	.+2      	; 0x9df6 <get_fat.isra.10+0x138>
    9df4:	9d cf       	rjmp	.-198    	; 0x9d30 <get_fat.isra.10+0x72>
    9df6:	0b 5c       	subi	r16, 0xCB	; 203
    9df8:	1f 4f       	sbci	r17, 0xFF	; 255
    9dfa:	cc 0c       	add	r12, r12
    9dfc:	dd 1c       	adc	r13, r13
    9dfe:	cc 0c       	add	r12, r12
    9e00:	dd 1c       	adc	r13, r13
    9e02:	c6 01       	movw	r24, r12
    9e04:	8c 7f       	andi	r24, 0xFC	; 252
    9e06:	91 70       	andi	r25, 0x01	; 1
    9e08:	80 0f       	add	r24, r16
    9e0a:	91 1f       	adc	r25, r17
    9e0c:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <ld_dword>
    9e10:	9f 70       	andi	r25, 0x0F	; 15
    9e12:	04 c0       	rjmp	.+8      	; 0x9e1c <get_fat.isra.10+0x15e>
    9e14:	61 e0       	ldi	r22, 0x01	; 1
    9e16:	70 e0       	ldi	r23, 0x00	; 0
    9e18:	80 e0       	ldi	r24, 0x00	; 0
    9e1a:	90 e0       	ldi	r25, 0x00	; 0
    9e1c:	cd b7       	in	r28, 0x3d	; 61
    9e1e:	de b7       	in	r29, 0x3e	; 62
    9e20:	ea e0       	ldi	r30, 0x0A	; 10
    9e22:	0c 94 80 e3 	jmp	0x1c700	; 0x1c700 <__epilogue_restores__+0x10>

00009e26 <dir_sdi>:
    9e26:	a0 e0       	ldi	r26, 0x00	; 0
    9e28:	b0 e0       	ldi	r27, 0x00	; 0
    9e2a:	e9 e1       	ldi	r30, 0x19	; 25
    9e2c:	ff e4       	ldi	r31, 0x4F	; 79
    9e2e:	0c 94 5e e3 	jmp	0x1c6bc	; 0x1c6bc <__prologue_saves__+0x4>
    9e32:	ec 01       	movw	r28, r24
    9e34:	6a 01       	movw	r12, r20
    9e36:	7b 01       	movw	r14, r22
    9e38:	41 15       	cp	r20, r1
    9e3a:	51 05       	cpc	r21, r1
    9e3c:	80 e2       	ldi	r24, 0x20	; 32
    9e3e:	68 07       	cpc	r22, r24
    9e40:	71 05       	cpc	r23, r1
    9e42:	18 f0       	brcs	.+6      	; 0x9e4a <dir_sdi+0x24>
    9e44:	82 e0       	ldi	r24, 0x02	; 2
    9e46:	90 e0       	ldi	r25, 0x00	; 0
    9e48:	aa c0       	rjmp	.+340    	; 0x9f9e <dir_sdi+0x178>
    9e4a:	db 01       	movw	r26, r22
    9e4c:	ca 01       	movw	r24, r20
    9e4e:	8f 71       	andi	r24, 0x1F	; 31
    9e50:	99 27       	eor	r25, r25
    9e52:	aa 27       	eor	r26, r26
    9e54:	bb 27       	eor	r27, r27
    9e56:	89 2b       	or	r24, r25
    9e58:	8a 2b       	or	r24, r26
    9e5a:	8b 2b       	or	r24, r27
    9e5c:	99 f7       	brne	.-26     	; 0x9e44 <dir_sdi+0x1e>
    9e5e:	08 81       	ld	r16, Y
    9e60:	19 81       	ldd	r17, Y+1	; 0x01
    9e62:	4e 87       	std	Y+14, r20	; 0x0e
    9e64:	5f 87       	std	Y+15, r21	; 0x0f
    9e66:	68 8b       	std	Y+16, r22	; 0x10
    9e68:	79 8b       	std	Y+17, r23	; 0x11
    9e6a:	8e 80       	ldd	r8, Y+6	; 0x06
    9e6c:	9f 80       	ldd	r9, Y+7	; 0x07
    9e6e:	a8 84       	ldd	r10, Y+8	; 0x08
    9e70:	b9 84       	ldd	r11, Y+9	; 0x09
    9e72:	81 14       	cp	r8, r1
    9e74:	91 04       	cpc	r9, r1
    9e76:	a1 04       	cpc	r10, r1
    9e78:	b1 04       	cpc	r11, r1
    9e7a:	51 f5       	brne	.+84     	; 0x9ed0 <dir_sdi+0xaa>
    9e7c:	f8 01       	movw	r30, r16
    9e7e:	80 81       	ld	r24, Z
    9e80:	83 30       	cpi	r24, 0x03	; 3
    9e82:	40 f0       	brcs	.+16     	; 0x9e94 <dir_sdi+0x6e>
    9e84:	81 a5       	ldd	r24, Z+41	; 0x29
    9e86:	92 a5       	ldd	r25, Z+42	; 0x2a
    9e88:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9e8a:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9e8c:	00 97       	sbiw	r24, 0x00	; 0
    9e8e:	a1 05       	cpc	r26, r1
    9e90:	b1 05       	cpc	r27, r1
    9e92:	e1 f4       	brne	.+56     	; 0x9ecc <dir_sdi+0xa6>
    9e94:	f8 01       	movw	r30, r16
    9e96:	87 81       	ldd	r24, Z+7	; 0x07
    9e98:	90 85       	ldd	r25, Z+8	; 0x08
    9e9a:	a0 e0       	ldi	r26, 0x00	; 0
    9e9c:	b0 e0       	ldi	r27, 0x00	; 0
    9e9e:	b7 01       	movw	r22, r14
    9ea0:	a6 01       	movw	r20, r12
    9ea2:	25 e0       	ldi	r18, 0x05	; 5
    9ea4:	76 95       	lsr	r23
    9ea6:	67 95       	ror	r22
    9ea8:	57 95       	ror	r21
    9eaa:	47 95       	ror	r20
    9eac:	2a 95       	dec	r18
    9eae:	d1 f7       	brne	.-12     	; 0x9ea4 <dir_sdi+0x7e>
    9eb0:	48 17       	cp	r20, r24
    9eb2:	59 07       	cpc	r21, r25
    9eb4:	6a 07       	cpc	r22, r26
    9eb6:	7b 07       	cpc	r23, r27
    9eb8:	28 f6       	brcc	.-118    	; 0x9e44 <dir_sdi+0x1e>
    9eba:	81 a5       	ldd	r24, Z+41	; 0x29
    9ebc:	92 a5       	ldd	r25, Z+42	; 0x2a
    9ebe:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9ec0:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9ec2:	8e 8b       	std	Y+22, r24	; 0x16
    9ec4:	9f 8b       	std	Y+23, r25	; 0x17
    9ec6:	a8 8f       	std	Y+24, r26	; 0x18
    9ec8:	b9 8f       	std	Y+25, r27	; 0x19
    9eca:	3e c0       	rjmp	.+124    	; 0x9f48 <dir_sdi+0x122>
    9ecc:	4c 01       	movw	r8, r24
    9ece:	5d 01       	movw	r10, r26
    9ed0:	f8 01       	movw	r30, r16
    9ed2:	41 84       	ldd	r4, Z+9	; 0x09
    9ed4:	52 84       	ldd	r5, Z+10	; 0x0a
    9ed6:	61 2c       	mov	r6, r1
    9ed8:	71 2c       	mov	r7, r1
    9eda:	39 e0       	ldi	r19, 0x09	; 9
    9edc:	44 0c       	add	r4, r4
    9ede:	55 1c       	adc	r5, r5
    9ee0:	66 1c       	adc	r6, r6
    9ee2:	77 1c       	adc	r7, r7
    9ee4:	3a 95       	dec	r19
    9ee6:	d1 f7       	brne	.-12     	; 0x9edc <dir_sdi+0xb6>
    9ee8:	b5 01       	movw	r22, r10
    9eea:	a4 01       	movw	r20, r8
    9eec:	c4 14       	cp	r12, r4
    9eee:	d5 04       	cpc	r13, r5
    9ef0:	e6 04       	cpc	r14, r6
    9ef2:	f7 04       	cpc	r15, r7
    9ef4:	10 f1       	brcs	.+68     	; 0x9f3a <dir_sdi+0x114>
    9ef6:	88 81       	ld	r24, Y
    9ef8:	99 81       	ldd	r25, Y+1	; 0x01
    9efa:	e1 de       	rcall	.-574    	; 0x9cbe <get_fat.isra.10>
    9efc:	4b 01       	movw	r8, r22
    9efe:	5c 01       	movw	r10, r24
    9f00:	6f 3f       	cpi	r22, 0xFF	; 255
    9f02:	7f 4f       	sbci	r23, 0xFF	; 255
    9f04:	8f 4f       	sbci	r24, 0xFF	; 255
    9f06:	9f 4f       	sbci	r25, 0xFF	; 255
    9f08:	09 f4       	brne	.+2      	; 0x9f0c <dir_sdi+0xe6>
    9f0a:	47 c0       	rjmp	.+142    	; 0x9f9a <dir_sdi+0x174>
    9f0c:	82 e0       	ldi	r24, 0x02	; 2
    9f0e:	88 16       	cp	r8, r24
    9f10:	91 04       	cpc	r9, r1
    9f12:	a1 04       	cpc	r10, r1
    9f14:	b1 04       	cpc	r11, r1
    9f16:	08 f4       	brcc	.+2      	; 0x9f1a <dir_sdi+0xf4>
    9f18:	95 cf       	rjmp	.-214    	; 0x9e44 <dir_sdi+0x1e>
    9f1a:	f8 01       	movw	r30, r16
    9f1c:	81 8d       	ldd	r24, Z+25	; 0x19
    9f1e:	92 8d       	ldd	r25, Z+26	; 0x1a
    9f20:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9f22:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9f24:	88 16       	cp	r8, r24
    9f26:	99 06       	cpc	r9, r25
    9f28:	aa 06       	cpc	r10, r26
    9f2a:	bb 06       	cpc	r11, r27
    9f2c:	08 f0       	brcs	.+2      	; 0x9f30 <dir_sdi+0x10a>
    9f2e:	8a cf       	rjmp	.-236    	; 0x9e44 <dir_sdi+0x1e>
    9f30:	c4 18       	sub	r12, r4
    9f32:	d5 08       	sbc	r13, r5
    9f34:	e6 08       	sbc	r14, r6
    9f36:	f7 08       	sbc	r15, r7
    9f38:	d7 cf       	rjmp	.-82     	; 0x9ee8 <dir_sdi+0xc2>
    9f3a:	c8 01       	movw	r24, r16
    9f3c:	0e 94 6d 46 	call	0x8cda	; 0x8cda <clst2sect>
    9f40:	6e 8b       	std	Y+22, r22	; 0x16
    9f42:	7f 8b       	std	Y+23, r23	; 0x17
    9f44:	88 8f       	std	Y+24, r24	; 0x18
    9f46:	99 8f       	std	Y+25, r25	; 0x19
    9f48:	8a 8a       	std	Y+18, r8	; 0x12
    9f4a:	9b 8a       	std	Y+19, r9	; 0x13
    9f4c:	ac 8a       	std	Y+20, r10	; 0x14
    9f4e:	bd 8a       	std	Y+21, r11	; 0x15
    9f50:	8e 89       	ldd	r24, Y+22	; 0x16
    9f52:	9f 89       	ldd	r25, Y+23	; 0x17
    9f54:	a8 8d       	ldd	r26, Y+24	; 0x18
    9f56:	b9 8d       	ldd	r27, Y+25	; 0x19
    9f58:	00 97       	sbiw	r24, 0x00	; 0
    9f5a:	a1 05       	cpc	r26, r1
    9f5c:	b1 05       	cpc	r27, r1
    9f5e:	09 f4       	brne	.+2      	; 0x9f62 <dir_sdi+0x13c>
    9f60:	71 cf       	rjmp	.-286    	; 0x9e44 <dir_sdi+0x1e>
    9f62:	b7 01       	movw	r22, r14
    9f64:	a6 01       	movw	r20, r12
    9f66:	29 e0       	ldi	r18, 0x09	; 9
    9f68:	76 95       	lsr	r23
    9f6a:	67 95       	ror	r22
    9f6c:	57 95       	ror	r21
    9f6e:	47 95       	ror	r20
    9f70:	2a 95       	dec	r18
    9f72:	d1 f7       	brne	.-12     	; 0x9f68 <dir_sdi+0x142>
    9f74:	84 0f       	add	r24, r20
    9f76:	95 1f       	adc	r25, r21
    9f78:	a6 1f       	adc	r26, r22
    9f7a:	b7 1f       	adc	r27, r23
    9f7c:	8e 8b       	std	Y+22, r24	; 0x16
    9f7e:	9f 8b       	std	Y+23, r25	; 0x17
    9f80:	a8 8f       	std	Y+24, r26	; 0x18
    9f82:	b9 8f       	std	Y+25, r27	; 0x19
    9f84:	0b 5c       	subi	r16, 0xCB	; 203
    9f86:	1f 4f       	sbci	r17, 0xFF	; 255
    9f88:	f1 e0       	ldi	r31, 0x01	; 1
    9f8a:	df 22       	and	r13, r31
    9f8c:	c0 0e       	add	r12, r16
    9f8e:	d1 1e       	adc	r13, r17
    9f90:	db 8e       	std	Y+27, r13	; 0x1b
    9f92:	ca 8e       	std	Y+26, r12	; 0x1a
    9f94:	80 e0       	ldi	r24, 0x00	; 0
    9f96:	90 e0       	ldi	r25, 0x00	; 0
    9f98:	02 c0       	rjmp	.+4      	; 0x9f9e <dir_sdi+0x178>
    9f9a:	81 e0       	ldi	r24, 0x01	; 1
    9f9c:	90 e0       	ldi	r25, 0x00	; 0
    9f9e:	cd b7       	in	r28, 0x3d	; 61
    9fa0:	de b7       	in	r29, 0x3e	; 62
    9fa2:	e0 e1       	ldi	r30, 0x10	; 16
    9fa4:	0c 94 7a e3 	jmp	0x1c6f4	; 0x1c6f4 <__epilogue_restores__+0x4>

00009fa8 <create_chain>:
    9fa8:	a0 e0       	ldi	r26, 0x00	; 0
    9faa:	b0 e0       	ldi	r27, 0x00	; 0
    9fac:	ea ed       	ldi	r30, 0xDA	; 218
    9fae:	ff e4       	ldi	r31, 0x4F	; 79
    9fb0:	0c 94 5e e3 	jmp	0x1c6bc	; 0x1c6bc <__prologue_saves__+0x4>
    9fb4:	8c 01       	movw	r16, r24
    9fb6:	2a 01       	movw	r4, r20
    9fb8:	3b 01       	movw	r6, r22
    9fba:	fc 01       	movw	r30, r24
    9fbc:	c0 81       	ld	r28, Z
    9fbe:	d1 81       	ldd	r29, Z+1	; 0x01
    9fc0:	41 15       	cp	r20, r1
    9fc2:	51 05       	cpc	r21, r1
    9fc4:	61 05       	cpc	r22, r1
    9fc6:	71 05       	cpc	r23, r1
    9fc8:	99 f4       	brne	.+38     	; 0x9ff0 <create_chain+0x48>
    9fca:	8d 84       	ldd	r8, Y+13	; 0x0d
    9fcc:	9e 84       	ldd	r9, Y+14	; 0x0e
    9fce:	af 84       	ldd	r10, Y+15	; 0x0f
    9fd0:	b8 88       	ldd	r11, Y+16	; 0x10
    9fd2:	81 14       	cp	r8, r1
    9fd4:	91 04       	cpc	r9, r1
    9fd6:	a1 04       	cpc	r10, r1
    9fd8:	b1 04       	cpc	r11, r1
    9fda:	51 f1       	breq	.+84     	; 0xa030 <create_chain+0x88>
    9fdc:	89 8d       	ldd	r24, Y+25	; 0x19
    9fde:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9fe0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9fe2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9fe4:	88 16       	cp	r8, r24
    9fe6:	99 06       	cpc	r9, r25
    9fe8:	aa 06       	cpc	r10, r26
    9fea:	bb 06       	cpc	r11, r27
    9fec:	28 f1       	brcs	.+74     	; 0xa038 <create_chain+0x90>
    9fee:	20 c0       	rjmp	.+64     	; 0xa030 <create_chain+0x88>
    9ff0:	ce 01       	movw	r24, r28
    9ff2:	65 de       	rcall	.-822    	; 0x9cbe <get_fat.isra.10>
    9ff4:	62 30       	cpi	r22, 0x02	; 2
    9ff6:	71 05       	cpc	r23, r1
    9ff8:	81 05       	cpc	r24, r1
    9ffa:	91 05       	cpc	r25, r1
    9ffc:	08 f4       	brcc	.+2      	; 0xa000 <create_chain+0x58>
    9ffe:	ea c0       	rjmp	.+468    	; 0xa1d4 <create_chain+0x22c>
    a000:	6f 3f       	cpi	r22, 0xFF	; 255
    a002:	ff ef       	ldi	r31, 0xFF	; 255
    a004:	7f 07       	cpc	r23, r31
    a006:	8f 07       	cpc	r24, r31
    a008:	9f 07       	cpc	r25, r31
    a00a:	29 f4       	brne	.+10     	; 0xa016 <create_chain+0x6e>
    a00c:	4f ef       	ldi	r20, 0xFF	; 255
    a00e:	3f ef       	ldi	r19, 0xFF	; 255
    a010:	2f ef       	ldi	r18, 0xFF	; 255
    a012:	9f ef       	ldi	r25, 0xFF	; 255
    a014:	e7 c0       	rjmp	.+462    	; 0xa1e4 <create_chain+0x23c>
    a016:	c9 8c       	ldd	r12, Y+25	; 0x19
    a018:	da 8c       	ldd	r13, Y+26	; 0x1a
    a01a:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a01c:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a01e:	6c 15       	cp	r22, r12
    a020:	7d 05       	cpc	r23, r13
    a022:	8e 05       	cpc	r24, r14
    a024:	9f 05       	cpc	r25, r15
    a026:	08 f4       	brcc	.+2      	; 0xa02a <create_chain+0x82>
    a028:	da c0       	rjmp	.+436    	; 0xa1de <create_chain+0x236>
    a02a:	53 01       	movw	r10, r6
    a02c:	42 01       	movw	r8, r4
    a02e:	04 c0       	rjmp	.+8      	; 0xa038 <create_chain+0x90>
    a030:	81 2c       	mov	r8, r1
    a032:	91 2c       	mov	r9, r1
    a034:	54 01       	movw	r10, r8
    a036:	83 94       	inc	r8
    a038:	89 89       	ldd	r24, Y+17	; 0x11
    a03a:	9a 89       	ldd	r25, Y+18	; 0x12
    a03c:	ab 89       	ldd	r26, Y+19	; 0x13
    a03e:	bc 89       	ldd	r27, Y+20	; 0x14
    a040:	89 2b       	or	r24, r25
    a042:	8a 2b       	or	r24, r26
    a044:	8b 2b       	or	r24, r27
    a046:	11 f4       	brne	.+4      	; 0xa04c <create_chain+0xa4>
    a048:	40 e0       	ldi	r20, 0x00	; 0
    a04a:	c5 c0       	rjmp	.+394    	; 0xa1d6 <create_chain+0x22e>
    a04c:	84 14       	cp	r8, r4
    a04e:	95 04       	cpc	r9, r5
    a050:	a6 04       	cpc	r10, r6
    a052:	b7 04       	cpc	r11, r7
    a054:	09 f0       	breq	.+2      	; 0xa058 <create_chain+0xb0>
    a056:	46 c0       	rjmp	.+140    	; 0xa0e4 <create_chain+0x13c>
    a058:	75 01       	movw	r14, r10
    a05a:	64 01       	movw	r12, r8
    a05c:	2f ef       	ldi	r18, 0xFF	; 255
    a05e:	c2 1a       	sub	r12, r18
    a060:	d2 0a       	sbc	r13, r18
    a062:	e2 0a       	sbc	r14, r18
    a064:	f2 0a       	sbc	r15, r18
    a066:	89 8d       	ldd	r24, Y+25	; 0x19
    a068:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a06a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a06c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a06e:	c8 16       	cp	r12, r24
    a070:	d9 06       	cpc	r13, r25
    a072:	ea 06       	cpc	r14, r26
    a074:	fb 06       	cpc	r15, r27
    a076:	28 f0       	brcs	.+10     	; 0xa082 <create_chain+0xda>
    a078:	92 e0       	ldi	r25, 0x02	; 2
    a07a:	c9 2e       	mov	r12, r25
    a07c:	d1 2c       	mov	r13, r1
    a07e:	e1 2c       	mov	r14, r1
    a080:	f1 2c       	mov	r15, r1
    a082:	b7 01       	movw	r22, r14
    a084:	a6 01       	movw	r20, r12
    a086:	f8 01       	movw	r30, r16
    a088:	80 81       	ld	r24, Z
    a08a:	91 81       	ldd	r25, Z+1	; 0x01
    a08c:	18 de       	rcall	.-976    	; 0x9cbe <get_fat.isra.10>
    a08e:	61 30       	cpi	r22, 0x01	; 1
    a090:	71 05       	cpc	r23, r1
    a092:	81 05       	cpc	r24, r1
    a094:	91 05       	cpc	r25, r1
    a096:	09 f4       	brne	.+2      	; 0xa09a <create_chain+0xf2>
    a098:	9d c0       	rjmp	.+314    	; 0xa1d4 <create_chain+0x22c>
    a09a:	6f 3f       	cpi	r22, 0xFF	; 255
    a09c:	ff ef       	ldi	r31, 0xFF	; 255
    a09e:	7f 07       	cpc	r23, r31
    a0a0:	8f 07       	cpc	r24, r31
    a0a2:	9f 07       	cpc	r25, r31
    a0a4:	09 f4       	brne	.+2      	; 0xa0a8 <create_chain+0x100>
    a0a6:	b2 cf       	rjmp	.-156    	; 0xa00c <create_chain+0x64>
    a0a8:	67 2b       	or	r22, r23
    a0aa:	68 2b       	or	r22, r24
    a0ac:	69 2b       	or	r22, r25
    a0ae:	a9 f0       	breq	.+42     	; 0xa0da <create_chain+0x132>
    a0b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    a0b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    a0b4:	af 85       	ldd	r26, Y+15	; 0x0f
    a0b6:	b8 89       	ldd	r27, Y+16	; 0x10
    a0b8:	82 30       	cpi	r24, 0x02	; 2
    a0ba:	91 05       	cpc	r25, r1
    a0bc:	a1 05       	cpc	r26, r1
    a0be:	b1 05       	cpc	r27, r1
    a0c0:	88 f0       	brcs	.+34     	; 0xa0e4 <create_chain+0x13c>
    a0c2:	49 8d       	ldd	r20, Y+25	; 0x19
    a0c4:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a0c6:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a0c8:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a0ca:	84 17       	cp	r24, r20
    a0cc:	95 07       	cpc	r25, r21
    a0ce:	a6 07       	cpc	r26, r22
    a0d0:	b7 07       	cpc	r27, r23
    a0d2:	40 f4       	brcc	.+16     	; 0xa0e4 <create_chain+0x13c>
    a0d4:	4c 01       	movw	r8, r24
    a0d6:	5d 01       	movw	r10, r26
    a0d8:	05 c0       	rjmp	.+10     	; 0xa0e4 <create_chain+0x13c>
    a0da:	c1 14       	cp	r12, r1
    a0dc:	d1 04       	cpc	r13, r1
    a0de:	e1 04       	cpc	r14, r1
    a0e0:	f1 04       	cpc	r15, r1
    a0e2:	c9 f5       	brne	.+114    	; 0xa156 <create_chain+0x1ae>
    a0e4:	75 01       	movw	r14, r10
    a0e6:	64 01       	movw	r12, r8
    a0e8:	2f ef       	ldi	r18, 0xFF	; 255
    a0ea:	c2 1a       	sub	r12, r18
    a0ec:	d2 0a       	sbc	r13, r18
    a0ee:	e2 0a       	sbc	r14, r18
    a0f0:	f2 0a       	sbc	r15, r18
    a0f2:	89 8d       	ldd	r24, Y+25	; 0x19
    a0f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a0f6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a0f8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a0fa:	c8 16       	cp	r12, r24
    a0fc:	d9 06       	cpc	r13, r25
    a0fe:	ea 06       	cpc	r14, r26
    a100:	fb 06       	cpc	r15, r27
    a102:	60 f0       	brcs	.+24     	; 0xa11c <create_chain+0x174>
    a104:	82 e0       	ldi	r24, 0x02	; 2
    a106:	88 16       	cp	r8, r24
    a108:	91 04       	cpc	r9, r1
    a10a:	a1 04       	cpc	r10, r1
    a10c:	b1 04       	cpc	r11, r1
    a10e:	08 f4       	brcc	.+2      	; 0xa112 <create_chain+0x16a>
    a110:	9b cf       	rjmp	.-202    	; 0xa048 <create_chain+0xa0>
    a112:	82 e0       	ldi	r24, 0x02	; 2
    a114:	c8 2e       	mov	r12, r24
    a116:	d1 2c       	mov	r13, r1
    a118:	e1 2c       	mov	r14, r1
    a11a:	f1 2c       	mov	r15, r1
    a11c:	b7 01       	movw	r22, r14
    a11e:	a6 01       	movw	r20, r12
    a120:	f8 01       	movw	r30, r16
    a122:	80 81       	ld	r24, Z
    a124:	91 81       	ldd	r25, Z+1	; 0x01
    a126:	cb dd       	rcall	.-1130   	; 0x9cbe <get_fat.isra.10>
    a128:	61 15       	cp	r22, r1
    a12a:	71 05       	cpc	r23, r1
    a12c:	81 05       	cpc	r24, r1
    a12e:	91 05       	cpc	r25, r1
    a130:	91 f0       	breq	.+36     	; 0xa156 <create_chain+0x1ae>
    a132:	61 30       	cpi	r22, 0x01	; 1
    a134:	71 05       	cpc	r23, r1
    a136:	81 05       	cpc	r24, r1
    a138:	91 05       	cpc	r25, r1
    a13a:	09 f4       	brne	.+2      	; 0xa13e <create_chain+0x196>
    a13c:	4b c0       	rjmp	.+150    	; 0xa1d4 <create_chain+0x22c>
    a13e:	6f 3f       	cpi	r22, 0xFF	; 255
    a140:	7f 4f       	sbci	r23, 0xFF	; 255
    a142:	8f 4f       	sbci	r24, 0xFF	; 255
    a144:	9f 4f       	sbci	r25, 0xFF	; 255
    a146:	09 f4       	brne	.+2      	; 0xa14a <create_chain+0x1a2>
    a148:	61 cf       	rjmp	.-318    	; 0xa00c <create_chain+0x64>
    a14a:	c8 14       	cp	r12, r8
    a14c:	d9 04       	cpc	r13, r9
    a14e:	ea 04       	cpc	r14, r10
    a150:	fb 04       	cpc	r15, r11
    a152:	51 f6       	brne	.-108    	; 0xa0e8 <create_chain+0x140>
    a154:	79 cf       	rjmp	.-270    	; 0xa048 <create_chain+0xa0>
    a156:	0f ef       	ldi	r16, 0xFF	; 255
    a158:	1f ef       	ldi	r17, 0xFF	; 255
    a15a:	98 01       	movw	r18, r16
    a15c:	b7 01       	movw	r22, r14
    a15e:	a6 01       	movw	r20, r12
    a160:	ce 01       	movw	r24, r28
    a162:	b2 dc       	rcall	.-1692   	; 0x9ac8 <put_fat>
    a164:	00 97       	sbiw	r24, 0x00	; 0
    a166:	99 f5       	brne	.+102    	; 0xa1ce <create_chain+0x226>
    a168:	41 14       	cp	r4, r1
    a16a:	51 04       	cpc	r5, r1
    a16c:	61 04       	cpc	r6, r1
    a16e:	71 04       	cpc	r7, r1
    a170:	e9 f4       	brne	.+58     	; 0xa1ac <create_chain+0x204>
    a172:	cd 86       	std	Y+13, r12	; 0x0d
    a174:	de 86       	std	Y+14, r13	; 0x0e
    a176:	ef 86       	std	Y+15, r14	; 0x0f
    a178:	f8 8a       	std	Y+16, r15	; 0x10
    a17a:	89 89       	ldd	r24, Y+17	; 0x11
    a17c:	9a 89       	ldd	r25, Y+18	; 0x12
    a17e:	ab 89       	ldd	r26, Y+19	; 0x13
    a180:	bc 89       	ldd	r27, Y+20	; 0x14
    a182:	49 8d       	ldd	r20, Y+25	; 0x19
    a184:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a186:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a188:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a18a:	42 50       	subi	r20, 0x02	; 2
    a18c:	51 09       	sbc	r21, r1
    a18e:	61 09       	sbc	r22, r1
    a190:	71 09       	sbc	r23, r1
    a192:	48 17       	cp	r20, r24
    a194:	59 07       	cpc	r21, r25
    a196:	6a 07       	cpc	r22, r26
    a198:	7b 07       	cpc	r23, r27
    a19a:	88 f0       	brcs	.+34     	; 0xa1be <create_chain+0x216>
    a19c:	01 97       	sbiw	r24, 0x01	; 1
    a19e:	a1 09       	sbc	r26, r1
    a1a0:	b1 09       	sbc	r27, r1
    a1a2:	89 8b       	std	Y+17, r24	; 0x11
    a1a4:	9a 8b       	std	Y+18, r25	; 0x12
    a1a6:	ab 8b       	std	Y+19, r26	; 0x13
    a1a8:	bc 8b       	std	Y+20, r27	; 0x14
    a1aa:	09 c0       	rjmp	.+18     	; 0xa1be <create_chain+0x216>
    a1ac:	97 01       	movw	r18, r14
    a1ae:	86 01       	movw	r16, r12
    a1b0:	b3 01       	movw	r22, r6
    a1b2:	a2 01       	movw	r20, r4
    a1b4:	ce 01       	movw	r24, r28
    a1b6:	88 dc       	rcall	.-1776   	; 0x9ac8 <put_fat>
    a1b8:	00 97       	sbiw	r24, 0x00	; 0
    a1ba:	d9 f2       	breq	.-74     	; 0xa172 <create_chain+0x1ca>
    a1bc:	08 c0       	rjmp	.+16     	; 0xa1ce <create_chain+0x226>
    a1be:	8c 81       	ldd	r24, Y+4	; 0x04
    a1c0:	81 60       	ori	r24, 0x01	; 1
    a1c2:	8c 83       	std	Y+4, r24	; 0x04
    a1c4:	4c 2d       	mov	r20, r12
    a1c6:	3d 2d       	mov	r19, r13
    a1c8:	2e 2d       	mov	r18, r14
    a1ca:	9f 2d       	mov	r25, r15
    a1cc:	0b c0       	rjmp	.+22     	; 0xa1e4 <create_chain+0x23c>
    a1ce:	01 97       	sbiw	r24, 0x01	; 1
    a1d0:	09 f4       	brne	.+2      	; 0xa1d4 <create_chain+0x22c>
    a1d2:	1c cf       	rjmp	.-456    	; 0xa00c <create_chain+0x64>
    a1d4:	41 e0       	ldi	r20, 0x01	; 1
    a1d6:	30 e0       	ldi	r19, 0x00	; 0
    a1d8:	20 e0       	ldi	r18, 0x00	; 0
    a1da:	90 e0       	ldi	r25, 0x00	; 0
    a1dc:	03 c0       	rjmp	.+6      	; 0xa1e4 <create_chain+0x23c>
    a1de:	46 2f       	mov	r20, r22
    a1e0:	37 2f       	mov	r19, r23
    a1e2:	28 2f       	mov	r18, r24
    a1e4:	64 2f       	mov	r22, r20
    a1e6:	73 2f       	mov	r23, r19
    a1e8:	82 2f       	mov	r24, r18
    a1ea:	cd b7       	in	r28, 0x3d	; 61
    a1ec:	de b7       	in	r29, 0x3e	; 62
    a1ee:	e0 e1       	ldi	r30, 0x10	; 16
    a1f0:	0c 94 7a e3 	jmp	0x1c6f4	; 0x1c6f4 <__epilogue_restores__+0x4>

0000a1f4 <remove_chain>:
    a1f4:	4f 92       	push	r4
    a1f6:	5f 92       	push	r5
    a1f8:	6f 92       	push	r6
    a1fa:	7f 92       	push	r7
    a1fc:	af 92       	push	r10
    a1fe:	bf 92       	push	r11
    a200:	cf 92       	push	r12
    a202:	df 92       	push	r13
    a204:	ef 92       	push	r14
    a206:	ff 92       	push	r15
    a208:	0f 93       	push	r16
    a20a:	1f 93       	push	r17
    a20c:	cf 93       	push	r28
    a20e:	df 93       	push	r29
    a210:	5c 01       	movw	r10, r24
    a212:	6a 01       	movw	r12, r20
    a214:	7b 01       	movw	r14, r22
    a216:	b9 01       	movw	r22, r18
    a218:	a8 01       	movw	r20, r16
    a21a:	22 e0       	ldi	r18, 0x02	; 2
    a21c:	c2 16       	cp	r12, r18
    a21e:	d1 04       	cpc	r13, r1
    a220:	e1 04       	cpc	r14, r1
    a222:	f1 04       	cpc	r15, r1
    a224:	10 f4       	brcc	.+4      	; 0xa22a <remove_chain+0x36>
    a226:	22 e0       	ldi	r18, 0x02	; 2
    a228:	27 c0       	rjmp	.+78     	; 0xa278 <remove_chain+0x84>
    a22a:	fc 01       	movw	r30, r24
    a22c:	c0 81       	ld	r28, Z
    a22e:	d1 81       	ldd	r29, Z+1	; 0x01
    a230:	89 8d       	ldd	r24, Y+25	; 0x19
    a232:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a234:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a236:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a238:	c8 16       	cp	r12, r24
    a23a:	d9 06       	cpc	r13, r25
    a23c:	ea 06       	cpc	r14, r26
    a23e:	fb 06       	cpc	r15, r27
    a240:	90 f7       	brcc	.-28     	; 0xa226 <remove_chain+0x32>
    a242:	41 15       	cp	r20, r1
    a244:	51 05       	cpc	r21, r1
    a246:	61 05       	cpc	r22, r1
    a248:	71 05       	cpc	r23, r1
    a24a:	41 f0       	breq	.+16     	; 0xa25c <remove_chain+0x68>
    a24c:	0f ef       	ldi	r16, 0xFF	; 255
    a24e:	1f ef       	ldi	r17, 0xFF	; 255
    a250:	98 01       	movw	r18, r16
    a252:	ce 01       	movw	r24, r28
    a254:	39 dc       	rcall	.-1934   	; 0x9ac8 <put_fat>
    a256:	00 97       	sbiw	r24, 0x00	; 0
    a258:	09 f0       	breq	.+2      	; 0xa25c <remove_chain+0x68>
    a25a:	4c c0       	rjmp	.+152    	; 0xa2f4 <remove_chain+0x100>
    a25c:	b7 01       	movw	r22, r14
    a25e:	a6 01       	movw	r20, r12
    a260:	f5 01       	movw	r30, r10
    a262:	80 81       	ld	r24, Z
    a264:	91 81       	ldd	r25, Z+1	; 0x01
    a266:	2b dd       	rcall	.-1450   	; 0x9cbe <get_fat.isra.10>
    a268:	2b 01       	movw	r4, r22
    a26a:	3c 01       	movw	r6, r24
    a26c:	61 15       	cp	r22, r1
    a26e:	71 05       	cpc	r23, r1
    a270:	81 05       	cpc	r24, r1
    a272:	91 05       	cpc	r25, r1
    a274:	19 f4       	brne	.+6      	; 0xa27c <remove_chain+0x88>
    a276:	20 e0       	ldi	r18, 0x00	; 0
    a278:	90 e0       	ldi	r25, 0x00	; 0
    a27a:	3d c0       	rjmp	.+122    	; 0xa2f6 <remove_chain+0x102>
    a27c:	61 30       	cpi	r22, 0x01	; 1
    a27e:	71 05       	cpc	r23, r1
    a280:	81 05       	cpc	r24, r1
    a282:	91 05       	cpc	r25, r1
    a284:	81 f2       	breq	.-96     	; 0xa226 <remove_chain+0x32>
    a286:	6f 3f       	cpi	r22, 0xFF	; 255
    a288:	7f 4f       	sbci	r23, 0xFF	; 255
    a28a:	8f 4f       	sbci	r24, 0xFF	; 255
    a28c:	9f 4f       	sbci	r25, 0xFF	; 255
    a28e:	81 f1       	breq	.+96     	; 0xa2f0 <remove_chain+0xfc>
    a290:	00 e0       	ldi	r16, 0x00	; 0
    a292:	10 e0       	ldi	r17, 0x00	; 0
    a294:	98 01       	movw	r18, r16
    a296:	b7 01       	movw	r22, r14
    a298:	a6 01       	movw	r20, r12
    a29a:	ce 01       	movw	r24, r28
    a29c:	15 dc       	rcall	.-2006   	; 0x9ac8 <put_fat>
    a29e:	00 97       	sbiw	r24, 0x00	; 0
    a2a0:	49 f5       	brne	.+82     	; 0xa2f4 <remove_chain+0x100>
    a2a2:	89 89       	ldd	r24, Y+17	; 0x11
    a2a4:	9a 89       	ldd	r25, Y+18	; 0x12
    a2a6:	ab 89       	ldd	r26, Y+19	; 0x13
    a2a8:	bc 89       	ldd	r27, Y+20	; 0x14
    a2aa:	49 8d       	ldd	r20, Y+25	; 0x19
    a2ac:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a2ae:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a2b0:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a2b2:	6a 01       	movw	r12, r20
    a2b4:	7b 01       	movw	r14, r22
    a2b6:	e2 e0       	ldi	r30, 0x02	; 2
    a2b8:	ce 1a       	sub	r12, r30
    a2ba:	d1 08       	sbc	r13, r1
    a2bc:	e1 08       	sbc	r14, r1
    a2be:	f1 08       	sbc	r15, r1
    a2c0:	8c 15       	cp	r24, r12
    a2c2:	9d 05       	cpc	r25, r13
    a2c4:	ae 05       	cpc	r26, r14
    a2c6:	bf 05       	cpc	r27, r15
    a2c8:	50 f4       	brcc	.+20     	; 0xa2de <remove_chain+0xea>
    a2ca:	01 96       	adiw	r24, 0x01	; 1
    a2cc:	a1 1d       	adc	r26, r1
    a2ce:	b1 1d       	adc	r27, r1
    a2d0:	89 8b       	std	Y+17, r24	; 0x11
    a2d2:	9a 8b       	std	Y+18, r25	; 0x12
    a2d4:	ab 8b       	std	Y+19, r26	; 0x13
    a2d6:	bc 8b       	std	Y+20, r27	; 0x14
    a2d8:	8c 81       	ldd	r24, Y+4	; 0x04
    a2da:	81 60       	ori	r24, 0x01	; 1
    a2dc:	8c 83       	std	Y+4, r24	; 0x04
    a2de:	73 01       	movw	r14, r6
    a2e0:	62 01       	movw	r12, r4
    a2e2:	44 16       	cp	r4, r20
    a2e4:	55 06       	cpc	r5, r21
    a2e6:	66 06       	cpc	r6, r22
    a2e8:	77 06       	cpc	r7, r23
    a2ea:	08 f4       	brcc	.+2      	; 0xa2ee <remove_chain+0xfa>
    a2ec:	b7 cf       	rjmp	.-146    	; 0xa25c <remove_chain+0x68>
    a2ee:	c3 cf       	rjmp	.-122    	; 0xa276 <remove_chain+0x82>
    a2f0:	21 e0       	ldi	r18, 0x01	; 1
    a2f2:	c2 cf       	rjmp	.-124    	; 0xa278 <remove_chain+0x84>
    a2f4:	28 2f       	mov	r18, r24
    a2f6:	82 2f       	mov	r24, r18
    a2f8:	df 91       	pop	r29
    a2fa:	cf 91       	pop	r28
    a2fc:	1f 91       	pop	r17
    a2fe:	0f 91       	pop	r16
    a300:	ff 90       	pop	r15
    a302:	ef 90       	pop	r14
    a304:	df 90       	pop	r13
    a306:	cf 90       	pop	r12
    a308:	bf 90       	pop	r11
    a30a:	af 90       	pop	r10
    a30c:	7f 90       	pop	r7
    a30e:	6f 90       	pop	r6
    a310:	5f 90       	pop	r5
    a312:	4f 90       	pop	r4
    a314:	08 95       	ret

0000a316 <dir_next>:
    a316:	4f 92       	push	r4
    a318:	5f 92       	push	r5
    a31a:	6f 92       	push	r6
    a31c:	7f 92       	push	r7
    a31e:	af 92       	push	r10
    a320:	bf 92       	push	r11
    a322:	cf 92       	push	r12
    a324:	df 92       	push	r13
    a326:	ef 92       	push	r14
    a328:	ff 92       	push	r15
    a32a:	0f 93       	push	r16
    a32c:	1f 93       	push	r17
    a32e:	cf 93       	push	r28
    a330:	df 93       	push	r29
    a332:	ec 01       	movw	r28, r24
    a334:	08 81       	ld	r16, Y
    a336:	19 81       	ldd	r17, Y+1	; 0x01
    a338:	ce 84       	ldd	r12, Y+14	; 0x0e
    a33a:	df 84       	ldd	r13, Y+15	; 0x0f
    a33c:	e8 88       	ldd	r14, Y+16	; 0x10
    a33e:	f9 88       	ldd	r15, Y+17	; 0x11
    a340:	80 e2       	ldi	r24, 0x20	; 32
    a342:	c8 0e       	add	r12, r24
    a344:	d1 1c       	adc	r13, r1
    a346:	e1 1c       	adc	r14, r1
    a348:	f1 1c       	adc	r15, r1
    a34a:	c1 14       	cp	r12, r1
    a34c:	d1 04       	cpc	r13, r1
    a34e:	e0 e2       	ldi	r30, 0x20	; 32
    a350:	ee 06       	cpc	r14, r30
    a352:	f1 04       	cpc	r15, r1
    a354:	20 f0       	brcs	.+8      	; 0xa35e <dir_next+0x48>
    a356:	1e 8a       	std	Y+22, r1	; 0x16
    a358:	1f 8a       	std	Y+23, r1	; 0x17
    a35a:	18 8e       	std	Y+24, r1	; 0x18
    a35c:	19 8e       	std	Y+25, r1	; 0x19
    a35e:	8e 89       	ldd	r24, Y+22	; 0x16
    a360:	9f 89       	ldd	r25, Y+23	; 0x17
    a362:	a8 8d       	ldd	r26, Y+24	; 0x18
    a364:	b9 8d       	ldd	r27, Y+25	; 0x19
    a366:	00 97       	sbiw	r24, 0x00	; 0
    a368:	a1 05       	cpc	r26, r1
    a36a:	b1 05       	cpc	r27, r1
    a36c:	09 f4       	brne	.+2      	; 0xa370 <dir_next+0x5a>
    a36e:	a7 c0       	rjmp	.+334    	; 0xa4be <dir_next+0x1a8>
    a370:	5b 01       	movw	r10, r22
    a372:	b7 01       	movw	r22, r14
    a374:	a6 01       	movw	r20, r12
    a376:	51 70       	andi	r21, 0x01	; 1
    a378:	66 27       	eor	r22, r22
    a37a:	77 27       	eor	r23, r23
    a37c:	45 2b       	or	r20, r21
    a37e:	46 2b       	or	r20, r22
    a380:	47 2b       	or	r20, r23
    a382:	09 f0       	breq	.+2      	; 0xa386 <dir_next+0x70>
    a384:	8d c0       	rjmp	.+282    	; 0xa4a0 <dir_next+0x18a>
    a386:	01 96       	adiw	r24, 0x01	; 1
    a388:	a1 1d       	adc	r26, r1
    a38a:	b1 1d       	adc	r27, r1
    a38c:	8e 8b       	std	Y+22, r24	; 0x16
    a38e:	9f 8b       	std	Y+23, r25	; 0x17
    a390:	a8 8f       	std	Y+24, r26	; 0x18
    a392:	b9 8f       	std	Y+25, r27	; 0x19
    a394:	4a 89       	ldd	r20, Y+18	; 0x12
    a396:	5b 89       	ldd	r21, Y+19	; 0x13
    a398:	6c 89       	ldd	r22, Y+20	; 0x14
    a39a:	7d 89       	ldd	r23, Y+21	; 0x15
    a39c:	f8 01       	movw	r30, r16
    a39e:	41 15       	cp	r20, r1
    a3a0:	51 05       	cpc	r21, r1
    a3a2:	61 05       	cpc	r22, r1
    a3a4:	71 05       	cpc	r23, r1
    a3a6:	c1 f4       	brne	.+48     	; 0xa3d8 <dir_next+0xc2>
    a3a8:	87 81       	ldd	r24, Z+7	; 0x07
    a3aa:	90 85       	ldd	r25, Z+8	; 0x08
    a3ac:	a0 e0       	ldi	r26, 0x00	; 0
    a3ae:	b0 e0       	ldi	r27, 0x00	; 0
    a3b0:	b7 01       	movw	r22, r14
    a3b2:	a6 01       	movw	r20, r12
    a3b4:	35 e0       	ldi	r19, 0x05	; 5
    a3b6:	76 95       	lsr	r23
    a3b8:	67 95       	ror	r22
    a3ba:	57 95       	ror	r21
    a3bc:	47 95       	ror	r20
    a3be:	3a 95       	dec	r19
    a3c0:	d1 f7       	brne	.-12     	; 0xa3b6 <dir_next+0xa0>
    a3c2:	48 17       	cp	r20, r24
    a3c4:	59 07       	cpc	r21, r25
    a3c6:	6a 07       	cpc	r22, r26
    a3c8:	7b 07       	cpc	r23, r27
    a3ca:	08 f4       	brcc	.+2      	; 0xa3ce <dir_next+0xb8>
    a3cc:	69 c0       	rjmp	.+210    	; 0xa4a0 <dir_next+0x18a>
    a3ce:	1e 8a       	std	Y+22, r1	; 0x16
    a3d0:	1f 8a       	std	Y+23, r1	; 0x17
    a3d2:	18 8e       	std	Y+24, r1	; 0x18
    a3d4:	19 8e       	std	Y+25, r1	; 0x19
    a3d6:	73 c0       	rjmp	.+230    	; 0xa4be <dir_next+0x1a8>
    a3d8:	81 85       	ldd	r24, Z+9	; 0x09
    a3da:	92 85       	ldd	r25, Z+10	; 0x0a
    a3dc:	01 97       	sbiw	r24, 0x01	; 1
    a3de:	a0 e0       	ldi	r26, 0x00	; 0
    a3e0:	b0 e0       	ldi	r27, 0x00	; 0
    a3e2:	26 01       	movw	r4, r12
    a3e4:	37 01       	movw	r6, r14
    a3e6:	29 e0       	ldi	r18, 0x09	; 9
    a3e8:	76 94       	lsr	r7
    a3ea:	67 94       	ror	r6
    a3ec:	57 94       	ror	r5
    a3ee:	47 94       	ror	r4
    a3f0:	2a 95       	dec	r18
    a3f2:	d1 f7       	brne	.-12     	; 0xa3e8 <dir_next+0xd2>
    a3f4:	84 21       	and	r24, r4
    a3f6:	95 21       	and	r25, r5
    a3f8:	a6 21       	and	r26, r6
    a3fa:	b7 21       	and	r27, r7
    a3fc:	89 2b       	or	r24, r25
    a3fe:	8a 2b       	or	r24, r26
    a400:	8b 2b       	or	r24, r27
    a402:	09 f0       	breq	.+2      	; 0xa406 <dir_next+0xf0>
    a404:	4d c0       	rjmp	.+154    	; 0xa4a0 <dir_next+0x18a>
    a406:	c8 01       	movw	r24, r16
    a408:	5a dc       	rcall	.-1868   	; 0x9cbe <get_fat.isra.10>
    a40a:	2b 01       	movw	r4, r22
    a40c:	3c 01       	movw	r6, r24
    a40e:	62 30       	cpi	r22, 0x02	; 2
    a410:	71 05       	cpc	r23, r1
    a412:	81 05       	cpc	r24, r1
    a414:	91 05       	cpc	r25, r1
    a416:	18 f4       	brcc	.+6      	; 0xa41e <dir_next+0x108>
    a418:	82 e0       	ldi	r24, 0x02	; 2
    a41a:	90 e0       	ldi	r25, 0x00	; 0
    a41c:	55 c0       	rjmp	.+170    	; 0xa4c8 <dir_next+0x1b2>
    a41e:	8f ef       	ldi	r24, 0xFF	; 255
    a420:	48 16       	cp	r4, r24
    a422:	58 06       	cpc	r5, r24
    a424:	68 06       	cpc	r6, r24
    a426:	78 06       	cpc	r7, r24
    a428:	19 f4       	brne	.+6      	; 0xa430 <dir_next+0x11a>
    a42a:	81 e0       	ldi	r24, 0x01	; 1
    a42c:	90 e0       	ldi	r25, 0x00	; 0
    a42e:	4c c0       	rjmp	.+152    	; 0xa4c8 <dir_next+0x1b2>
    a430:	f8 01       	movw	r30, r16
    a432:	81 8d       	ldd	r24, Z+25	; 0x19
    a434:	92 8d       	ldd	r25, Z+26	; 0x1a
    a436:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a438:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a43a:	48 16       	cp	r4, r24
    a43c:	59 06       	cpc	r5, r25
    a43e:	6a 06       	cpc	r6, r26
    a440:	7b 06       	cpc	r7, r27
    a442:	08 f1       	brcs	.+66     	; 0xa486 <dir_next+0x170>
    a444:	ab 28       	or	r10, r11
    a446:	19 f2       	breq	.-122    	; 0xa3ce <dir_next+0xb8>
    a448:	4a 89       	ldd	r20, Y+18	; 0x12
    a44a:	5b 89       	ldd	r21, Y+19	; 0x13
    a44c:	6c 89       	ldd	r22, Y+20	; 0x14
    a44e:	7d 89       	ldd	r23, Y+21	; 0x15
    a450:	ce 01       	movw	r24, r28
    a452:	aa dd       	rcall	.-1196   	; 0x9fa8 <create_chain>
    a454:	2b 01       	movw	r4, r22
    a456:	3c 01       	movw	r6, r24
    a458:	61 15       	cp	r22, r1
    a45a:	71 05       	cpc	r23, r1
    a45c:	81 05       	cpc	r24, r1
    a45e:	91 05       	cpc	r25, r1
    a460:	89 f1       	breq	.+98     	; 0xa4c4 <dir_next+0x1ae>
    a462:	61 30       	cpi	r22, 0x01	; 1
    a464:	71 05       	cpc	r23, r1
    a466:	81 05       	cpc	r24, r1
    a468:	91 05       	cpc	r25, r1
    a46a:	b1 f2       	breq	.-84     	; 0xa418 <dir_next+0x102>
    a46c:	8f ef       	ldi	r24, 0xFF	; 255
    a46e:	48 16       	cp	r4, r24
    a470:	58 06       	cpc	r5, r24
    a472:	68 06       	cpc	r6, r24
    a474:	78 06       	cpc	r7, r24
    a476:	c9 f2       	breq	.-78     	; 0xa42a <dir_next+0x114>
    a478:	b3 01       	movw	r22, r6
    a47a:	a2 01       	movw	r20, r4
    a47c:	c8 01       	movw	r24, r16
    a47e:	0e 94 e7 49 	call	0x93ce	; 0x93ce <dir_clear>
    a482:	89 2b       	or	r24, r25
    a484:	91 f6       	brne	.-92     	; 0xa42a <dir_next+0x114>
    a486:	4a 8a       	std	Y+18, r4	; 0x12
    a488:	5b 8a       	std	Y+19, r5	; 0x13
    a48a:	6c 8a       	std	Y+20, r6	; 0x14
    a48c:	7d 8a       	std	Y+21, r7	; 0x15
    a48e:	b3 01       	movw	r22, r6
    a490:	a2 01       	movw	r20, r4
    a492:	c8 01       	movw	r24, r16
    a494:	0e 94 6d 46 	call	0x8cda	; 0x8cda <clst2sect>
    a498:	6e 8b       	std	Y+22, r22	; 0x16
    a49a:	7f 8b       	std	Y+23, r23	; 0x17
    a49c:	88 8f       	std	Y+24, r24	; 0x18
    a49e:	99 8f       	std	Y+25, r25	; 0x19
    a4a0:	ce 86       	std	Y+14, r12	; 0x0e
    a4a2:	df 86       	std	Y+15, r13	; 0x0f
    a4a4:	e8 8a       	std	Y+16, r14	; 0x10
    a4a6:	f9 8a       	std	Y+17, r15	; 0x11
    a4a8:	0b 5c       	subi	r16, 0xCB	; 203
    a4aa:	1f 4f       	sbci	r17, 0xFF	; 255
    a4ac:	e1 e0       	ldi	r30, 0x01	; 1
    a4ae:	de 22       	and	r13, r30
    a4b0:	c0 0e       	add	r12, r16
    a4b2:	d1 1e       	adc	r13, r17
    a4b4:	db 8e       	std	Y+27, r13	; 0x1b
    a4b6:	ca 8e       	std	Y+26, r12	; 0x1a
    a4b8:	80 e0       	ldi	r24, 0x00	; 0
    a4ba:	90 e0       	ldi	r25, 0x00	; 0
    a4bc:	05 c0       	rjmp	.+10     	; 0xa4c8 <dir_next+0x1b2>
    a4be:	84 e0       	ldi	r24, 0x04	; 4
    a4c0:	90 e0       	ldi	r25, 0x00	; 0
    a4c2:	02 c0       	rjmp	.+4      	; 0xa4c8 <dir_next+0x1b2>
    a4c4:	87 e0       	ldi	r24, 0x07	; 7
    a4c6:	90 e0       	ldi	r25, 0x00	; 0
    a4c8:	df 91       	pop	r29
    a4ca:	cf 91       	pop	r28
    a4cc:	1f 91       	pop	r17
    a4ce:	0f 91       	pop	r16
    a4d0:	ff 90       	pop	r15
    a4d2:	ef 90       	pop	r14
    a4d4:	df 90       	pop	r13
    a4d6:	cf 90       	pop	r12
    a4d8:	bf 90       	pop	r11
    a4da:	af 90       	pop	r10
    a4dc:	7f 90       	pop	r7
    a4de:	6f 90       	pop	r6
    a4e0:	5f 90       	pop	r5
    a4e2:	4f 90       	pop	r4
    a4e4:	08 95       	ret

0000a4e6 <dir_alloc>:
    a4e6:	a0 e0       	ldi	r26, 0x00	; 0
    a4e8:	b0 e0       	ldi	r27, 0x00	; 0
    a4ea:	e9 e7       	ldi	r30, 0x79	; 121
    a4ec:	f2 e5       	ldi	r31, 0x52	; 82
    a4ee:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
    a4f2:	ec 01       	movw	r28, r24
    a4f4:	6b 01       	movw	r12, r22
    a4f6:	e8 80       	ld	r14, Y
    a4f8:	f9 80       	ldd	r15, Y+1	; 0x01
    a4fa:	40 e0       	ldi	r20, 0x00	; 0
    a4fc:	50 e0       	ldi	r21, 0x00	; 0
    a4fe:	ba 01       	movw	r22, r20
    a500:	92 dc       	rcall	.-1756   	; 0x9e26 <dir_sdi>
    a502:	00 97       	sbiw	r24, 0x00	; 0
    a504:	f9 f4       	brne	.+62     	; 0xa544 <dir_alloc+0x5e>
    a506:	00 e0       	ldi	r16, 0x00	; 0
    a508:	10 e0       	ldi	r17, 0x00	; 0
    a50a:	4e 89       	ldd	r20, Y+22	; 0x16
    a50c:	5f 89       	ldd	r21, Y+23	; 0x17
    a50e:	68 8d       	ldd	r22, Y+24	; 0x18
    a510:	79 8d       	ldd	r23, Y+25	; 0x19
    a512:	c7 01       	movw	r24, r14
    a514:	04 d8       	rcall	.-4088   	; 0x951e <move_window>
    a516:	00 97       	sbiw	r24, 0x00	; 0
    a518:	a9 f4       	brne	.+42     	; 0xa544 <dir_alloc+0x5e>
    a51a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a51c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a51e:	20 81       	ld	r18, Z
    a520:	25 3e       	cpi	r18, 0xE5	; 229
    a522:	11 f0       	breq	.+4      	; 0xa528 <dir_alloc+0x42>
    a524:	21 11       	cpse	r18, r1
    a526:	06 c0       	rjmp	.+12     	; 0xa534 <dir_alloc+0x4e>
    a528:	0f 5f       	subi	r16, 0xFF	; 255
    a52a:	1f 4f       	sbci	r17, 0xFF	; 255
    a52c:	0c 15       	cp	r16, r12
    a52e:	1d 05       	cpc	r17, r13
    a530:	19 f4       	brne	.+6      	; 0xa538 <dir_alloc+0x52>
    a532:	0d c0       	rjmp	.+26     	; 0xa54e <dir_alloc+0x68>
    a534:	00 e0       	ldi	r16, 0x00	; 0
    a536:	10 e0       	ldi	r17, 0x00	; 0
    a538:	61 e0       	ldi	r22, 0x01	; 1
    a53a:	70 e0       	ldi	r23, 0x00	; 0
    a53c:	ce 01       	movw	r24, r28
    a53e:	eb de       	rcall	.-554    	; 0xa316 <dir_next>
    a540:	00 97       	sbiw	r24, 0x00	; 0
    a542:	19 f3       	breq	.-58     	; 0xa50a <dir_alloc+0x24>
    a544:	84 30       	cpi	r24, 0x04	; 4
    a546:	91 05       	cpc	r25, r1
    a548:	11 f4       	brne	.+4      	; 0xa54e <dir_alloc+0x68>
    a54a:	87 e0       	ldi	r24, 0x07	; 7
    a54c:	90 e0       	ldi	r25, 0x00	; 0
    a54e:	cd b7       	in	r28, 0x3d	; 61
    a550:	de b7       	in	r29, 0x3e	; 62
    a552:	e8 e0       	ldi	r30, 0x08	; 8
    a554:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

0000a558 <dir_read>:
    a558:	a0 e0       	ldi	r26, 0x00	; 0
    a55a:	b0 e0       	ldi	r27, 0x00	; 0
    a55c:	e2 eb       	ldi	r30, 0xB2	; 178
    a55e:	f2 e5       	ldi	r31, 0x52	; 82
    a560:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__prologue_saves__+0xc>
    a564:	ec 01       	movw	r28, r24
    a566:	7b 01       	movw	r14, r22
    a568:	a8 80       	ld	r10, Y
    a56a:	b9 80       	ldd	r11, Y+1	; 0x01
    a56c:	dd 24       	eor	r13, r13
    a56e:	da 94       	dec	r13
    a570:	1f ef       	ldi	r17, 0xFF	; 255
    a572:	84 e0       	ldi	r24, 0x04	; 4
    a574:	90 e0       	ldi	r25, 0x00	; 0
    a576:	fd e0       	ldi	r31, 0x0D	; 13
    a578:	cf 2e       	mov	r12, r31
    a57a:	4e 89       	ldd	r20, Y+22	; 0x16
    a57c:	5f 89       	ldd	r21, Y+23	; 0x17
    a57e:	68 8d       	ldd	r22, Y+24	; 0x18
    a580:	79 8d       	ldd	r23, Y+25	; 0x19
    a582:	41 15       	cp	r20, r1
    a584:	51 05       	cpc	r21, r1
    a586:	61 05       	cpc	r22, r1
    a588:	71 05       	cpc	r23, r1
    a58a:	09 f4       	brne	.+2      	; 0xa58e <dir_read+0x36>
    a58c:	9a c0       	rjmp	.+308    	; 0xa6c2 <dir_read+0x16a>
    a58e:	c5 01       	movw	r24, r10
    a590:	0e 94 8f 4a 	call	0x951e	; 0x951e <move_window>
    a594:	00 97       	sbiw	r24, 0x00	; 0
    a596:	09 f0       	breq	.+2      	; 0xa59a <dir_read+0x42>
    a598:	96 c0       	rjmp	.+300    	; 0xa6c6 <dir_read+0x16e>
    a59a:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a59c:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a59e:	f4 01       	movw	r30, r8
    a5a0:	00 81       	ld	r16, Z
    a5a2:	00 23       	and	r16, r16
    a5a4:	09 f4       	brne	.+2      	; 0xa5a8 <dir_read+0x50>
    a5a6:	97 c0       	rjmp	.+302    	; 0xa6d6 <dir_read+0x17e>
    a5a8:	83 85       	ldd	r24, Z+11	; 0x0b
    a5aa:	8f 73       	andi	r24, 0x3F	; 63
    a5ac:	8c 83       	std	Y+4, r24	; 0x04
    a5ae:	05 3e       	cpi	r16, 0xE5	; 229
    a5b0:	09 f4       	brne	.+2      	; 0xa5b4 <dir_read+0x5c>
    a5b2:	7e c0       	rjmp	.+252    	; 0xa6b0 <dir_read+0x158>
    a5b4:	0e 32       	cpi	r16, 0x2E	; 46
    a5b6:	09 f4       	brne	.+2      	; 0xa5ba <dir_read+0x62>
    a5b8:	7b c0       	rjmp	.+246    	; 0xa6b0 <dir_read+0x158>
    a5ba:	21 e0       	ldi	r18, 0x01	; 1
    a5bc:	30 e0       	ldi	r19, 0x00	; 0
    a5be:	98 2f       	mov	r25, r24
    a5c0:	9f 71       	andi	r25, 0x1F	; 31
    a5c2:	98 30       	cpi	r25, 0x08	; 8
    a5c4:	11 f0       	breq	.+4      	; 0xa5ca <dir_read+0x72>
    a5c6:	20 e0       	ldi	r18, 0x00	; 0
    a5c8:	30 e0       	ldi	r19, 0x00	; 0
    a5ca:	2e 15       	cp	r18, r14
    a5cc:	3f 05       	cpc	r19, r15
    a5ce:	09 f0       	breq	.+2      	; 0xa5d2 <dir_read+0x7a>
    a5d0:	6f c0       	rjmp	.+222    	; 0xa6b0 <dir_read+0x158>
    a5d2:	8f 30       	cpi	r24, 0x0F	; 15
    a5d4:	09 f0       	breq	.+2      	; 0xa5d8 <dir_read+0x80>
    a5d6:	5c c0       	rjmp	.+184    	; 0xa690 <dir_read+0x138>
    a5d8:	06 ff       	sbrs	r16, 6
    a5da:	0c c0       	rjmp	.+24     	; 0xa5f4 <dir_read+0x9c>
    a5dc:	f4 01       	movw	r30, r8
    a5de:	85 85       	ldd	r24, Z+13	; 0x0d
    a5e0:	0f 7b       	andi	r16, 0xBF	; 191
    a5e2:	4e 85       	ldd	r20, Y+14	; 0x0e
    a5e4:	5f 85       	ldd	r21, Y+15	; 0x0f
    a5e6:	68 89       	ldd	r22, Y+16	; 0x10
    a5e8:	79 89       	ldd	r23, Y+17	; 0x11
    a5ea:	48 a7       	std	Y+40, r20	; 0x28
    a5ec:	59 a7       	std	Y+41, r21	; 0x29
    a5ee:	6a a7       	std	Y+42, r22	; 0x2a
    a5f0:	7b a7       	std	Y+43, r23	; 0x2b
    a5f2:	03 c0       	rjmp	.+6      	; 0xa5fa <dir_read+0xa2>
    a5f4:	10 13       	cpse	r17, r16
    a5f6:	5c c0       	rjmp	.+184    	; 0xa6b0 <dir_read+0x158>
    a5f8:	8d 2d       	mov	r24, r13
    a5fa:	f4 01       	movw	r30, r8
    a5fc:	d5 84       	ldd	r13, Z+13	; 0x0d
    a5fe:	d8 12       	cpse	r13, r24
    a600:	56 c0       	rjmp	.+172    	; 0xa6ae <dir_read+0x156>
    a602:	82 8d       	ldd	r24, Z+26	; 0x1a
    a604:	93 8d       	ldd	r25, Z+27	; 0x1b
    a606:	89 2b       	or	r24, r25
    a608:	09 f0       	breq	.+2      	; 0xa60c <dir_read+0xb4>
    a60a:	52 c0       	rjmp	.+164    	; 0xa6b0 <dir_read+0x158>
    a60c:	f5 01       	movw	r30, r10
    a60e:	63 85       	ldd	r22, Z+11	; 0x0b
    a610:	74 85       	ldd	r23, Z+12	; 0x0c
    a612:	f4 01       	movw	r30, r8
    a614:	80 81       	ld	r24, Z
    a616:	90 e0       	ldi	r25, 0x00	; 0
    a618:	8f 7b       	andi	r24, 0xBF	; 191
    a61a:	01 97       	sbiw	r24, 0x01	; 1
    a61c:	c8 9e       	mul	r12, r24
    a61e:	90 01       	movw	r18, r0
    a620:	c9 9e       	mul	r12, r25
    a622:	30 0d       	add	r19, r0
    a624:	11 24       	eor	r1, r1
    a626:	ab ee       	ldi	r26, 0xEB	; 235
    a628:	b4 e0       	ldi	r27, 0x04	; 4
    a62a:	81 e0       	ldi	r24, 0x01	; 1
    a62c:	90 e0       	ldi	r25, 0x00	; 0
    a62e:	4d 91       	ld	r20, X+
    a630:	f4 01       	movw	r30, r8
    a632:	e4 0f       	add	r30, r20
    a634:	f1 1d       	adc	r31, r1
    a636:	40 81       	ld	r20, Z
    a638:	51 81       	ldd	r21, Z+1	; 0x01
    a63a:	00 97       	sbiw	r24, 0x00	; 0
    a63c:	81 f0       	breq	.+32     	; 0xa65e <dir_read+0x106>
    a63e:	2f 3f       	cpi	r18, 0xFF	; 255
    a640:	31 05       	cpc	r19, r1
    a642:	09 f0       	breq	.+2      	; 0xa646 <dir_read+0xee>
    a644:	a8 f5       	brcc	.+106    	; 0xa6b0 <dir_read+0x158>
    a646:	c9 01       	movw	r24, r18
    a648:	88 0f       	add	r24, r24
    a64a:	99 1f       	adc	r25, r25
    a64c:	86 0f       	add	r24, r22
    a64e:	97 1f       	adc	r25, r23
    a650:	fc 01       	movw	r30, r24
    a652:	51 83       	std	Z+1, r21	; 0x01
    a654:	40 83       	st	Z, r20
    a656:	ca 01       	movw	r24, r20
    a658:	2f 5f       	subi	r18, 0xFF	; 255
    a65a:	3f 4f       	sbci	r19, 0xFF	; 255
    a65c:	03 c0       	rjmp	.+6      	; 0xa664 <dir_read+0x10c>
    a65e:	4f 3f       	cpi	r20, 0xFF	; 255
    a660:	5f 4f       	sbci	r21, 0xFF	; 255
    a662:	31 f5       	brne	.+76     	; 0xa6b0 <dir_read+0x158>
    a664:	44 e0       	ldi	r20, 0x04	; 4
    a666:	a8 3f       	cpi	r26, 0xF8	; 248
    a668:	b4 07       	cpc	r27, r20
    a66a:	09 f7       	brne	.-62     	; 0xa62e <dir_read+0xd6>
    a66c:	f4 01       	movw	r30, r8
    a66e:	40 81       	ld	r20, Z
    a670:	46 ff       	sbrs	r20, 6
    a672:	2e c0       	rjmp	.+92     	; 0xa6d0 <dir_read+0x178>
    a674:	89 2b       	or	r24, r25
    a676:	61 f1       	breq	.+88     	; 0xa6d0 <dir_read+0x178>
    a678:	2f 3f       	cpi	r18, 0xFF	; 255
    a67a:	31 05       	cpc	r19, r1
    a67c:	09 f0       	breq	.+2      	; 0xa680 <dir_read+0x128>
    a67e:	c0 f4       	brcc	.+48     	; 0xa6b0 <dir_read+0x158>
    a680:	22 0f       	add	r18, r18
    a682:	33 1f       	adc	r19, r19
    a684:	fb 01       	movw	r30, r22
    a686:	e2 0f       	add	r30, r18
    a688:	f3 1f       	adc	r31, r19
    a68a:	11 82       	std	Z+1, r1	; 0x01
    a68c:	10 82       	st	Z, r1
    a68e:	20 c0       	rjmp	.+64     	; 0xa6d0 <dir_read+0x178>
    a690:	11 11       	cpse	r17, r1
    a692:	05 c0       	rjmp	.+10     	; 0xa69e <dir_read+0x146>
    a694:	c4 01       	movw	r24, r8
    a696:	0e 94 d1 46 	call	0x8da2	; 0x8da2 <sum_sfn>
    a69a:	d8 16       	cp	r13, r24
    a69c:	f9 f0       	breq	.+62     	; 0xa6dc <dir_read+0x184>
    a69e:	8f ef       	ldi	r24, 0xFF	; 255
    a6a0:	9f ef       	ldi	r25, 0xFF	; 255
    a6a2:	dc 01       	movw	r26, r24
    a6a4:	88 a7       	std	Y+40, r24	; 0x28
    a6a6:	99 a7       	std	Y+41, r25	; 0x29
    a6a8:	aa a7       	std	Y+42, r26	; 0x2a
    a6aa:	bb a7       	std	Y+43, r27	; 0x2b
    a6ac:	17 c0       	rjmp	.+46     	; 0xa6dc <dir_read+0x184>
    a6ae:	d8 2e       	mov	r13, r24
    a6b0:	1f ef       	ldi	r17, 0xFF	; 255
    a6b2:	60 e0       	ldi	r22, 0x00	; 0
    a6b4:	70 e0       	ldi	r23, 0x00	; 0
    a6b6:	ce 01       	movw	r24, r28
    a6b8:	2e de       	rcall	.-932    	; 0xa316 <dir_next>
    a6ba:	00 97       	sbiw	r24, 0x00	; 0
    a6bc:	09 f4       	brne	.+2      	; 0xa6c0 <dir_read+0x168>
    a6be:	5d cf       	rjmp	.-326    	; 0xa57a <dir_read+0x22>
    a6c0:	02 c0       	rjmp	.+4      	; 0xa6c6 <dir_read+0x16e>
    a6c2:	00 97       	sbiw	r24, 0x00	; 0
    a6c4:	59 f0       	breq	.+22     	; 0xa6dc <dir_read+0x184>
    a6c6:	1e 8a       	std	Y+22, r1	; 0x16
    a6c8:	1f 8a       	std	Y+23, r1	; 0x17
    a6ca:	18 8e       	std	Y+24, r1	; 0x18
    a6cc:	19 8e       	std	Y+25, r1	; 0x19
    a6ce:	08 c0       	rjmp	.+16     	; 0xa6e0 <dir_read+0x188>
    a6d0:	1f ef       	ldi	r17, 0xFF	; 255
    a6d2:	10 0f       	add	r17, r16
    a6d4:	ee cf       	rjmp	.-36     	; 0xa6b2 <dir_read+0x15a>
    a6d6:	84 e0       	ldi	r24, 0x04	; 4
    a6d8:	90 e0       	ldi	r25, 0x00	; 0
    a6da:	f5 cf       	rjmp	.-22     	; 0xa6c6 <dir_read+0x16e>
    a6dc:	80 e0       	ldi	r24, 0x00	; 0
    a6de:	90 e0       	ldi	r25, 0x00	; 0
    a6e0:	cd b7       	in	r28, 0x3d	; 61
    a6e2:	de b7       	in	r29, 0x3e	; 62
    a6e4:	ec e0       	ldi	r30, 0x0C	; 12
    a6e6:	0c 94 7e e3 	jmp	0x1c6fc	; 0x1c6fc <__epilogue_restores__+0xc>

0000a6ea <dir_remove>:
    a6ea:	a0 e0       	ldi	r26, 0x00	; 0
    a6ec:	b0 e0       	ldi	r27, 0x00	; 0
    a6ee:	eb e7       	ldi	r30, 0x7B	; 123
    a6f0:	f3 e5       	ldi	r31, 0x53	; 83
    a6f2:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__prologue_saves__+0x10>
    a6f6:	ec 01       	movw	r28, r24
    a6f8:	08 81       	ld	r16, Y
    a6fa:	19 81       	ldd	r17, Y+1	; 0x01
    a6fc:	ce 84       	ldd	r12, Y+14	; 0x0e
    a6fe:	df 84       	ldd	r13, Y+15	; 0x0f
    a700:	e8 88       	ldd	r14, Y+16	; 0x10
    a702:	f9 88       	ldd	r15, Y+17	; 0x11
    a704:	48 a5       	ldd	r20, Y+40	; 0x28
    a706:	59 a5       	ldd	r21, Y+41	; 0x29
    a708:	6a a5       	ldd	r22, Y+42	; 0x2a
    a70a:	7b a5       	ldd	r23, Y+43	; 0x2b
    a70c:	4f 3f       	cpi	r20, 0xFF	; 255
    a70e:	8f ef       	ldi	r24, 0xFF	; 255
    a710:	58 07       	cpc	r21, r24
    a712:	68 07       	cpc	r22, r24
    a714:	78 07       	cpc	r23, r24
    a716:	29 f4       	brne	.+10     	; 0xa722 <dir_remove+0x38>
    a718:	85 ee       	ldi	r24, 0xE5	; 229
    a71a:	b8 2e       	mov	r11, r24
    a71c:	aa 24       	eor	r10, r10
    a71e:	a3 94       	inc	r10
    a720:	19 c0       	rjmp	.+50     	; 0xa754 <dir_remove+0x6a>
    a722:	ce 01       	movw	r24, r28
    a724:	80 db       	rcall	.-2304   	; 0x9e26 <dir_sdi>
    a726:	00 97       	sbiw	r24, 0x00	; 0
    a728:	19 f5       	brne	.+70     	; 0xa770 <dir_remove+0x86>
    a72a:	f6 cf       	rjmp	.-20     	; 0xa718 <dir_remove+0x2e>
    a72c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a72e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a730:	b0 82       	st	Z, r11
    a732:	f8 01       	movw	r30, r16
    a734:	a3 82       	std	Z+3, r10	; 0x03
    a736:	4e 85       	ldd	r20, Y+14	; 0x0e
    a738:	5f 85       	ldd	r21, Y+15	; 0x0f
    a73a:	68 89       	ldd	r22, Y+16	; 0x10
    a73c:	79 89       	ldd	r23, Y+17	; 0x11
    a73e:	4c 15       	cp	r20, r12
    a740:	5d 05       	cpc	r21, r13
    a742:	6e 05       	cpc	r22, r14
    a744:	7f 05       	cpc	r23, r15
    a746:	a0 f4       	brcc	.+40     	; 0xa770 <dir_remove+0x86>
    a748:	60 e0       	ldi	r22, 0x00	; 0
    a74a:	70 e0       	ldi	r23, 0x00	; 0
    a74c:	ce 01       	movw	r24, r28
    a74e:	e3 dd       	rcall	.-1082   	; 0xa316 <dir_next>
    a750:	00 97       	sbiw	r24, 0x00	; 0
    a752:	49 f4       	brne	.+18     	; 0xa766 <dir_remove+0x7c>
    a754:	4e 89       	ldd	r20, Y+22	; 0x16
    a756:	5f 89       	ldd	r21, Y+23	; 0x17
    a758:	68 8d       	ldd	r22, Y+24	; 0x18
    a75a:	79 8d       	ldd	r23, Y+25	; 0x19
    a75c:	c8 01       	movw	r24, r16
    a75e:	0e 94 8f 4a 	call	0x951e	; 0x951e <move_window>
    a762:	00 97       	sbiw	r24, 0x00	; 0
    a764:	19 f3       	breq	.-58     	; 0xa72c <dir_remove+0x42>
    a766:	84 30       	cpi	r24, 0x04	; 4
    a768:	91 05       	cpc	r25, r1
    a76a:	11 f4       	brne	.+4      	; 0xa770 <dir_remove+0x86>
    a76c:	82 e0       	ldi	r24, 0x02	; 2
    a76e:	90 e0       	ldi	r25, 0x00	; 0
    a770:	cd b7       	in	r28, 0x3d	; 61
    a772:	de b7       	in	r29, 0x3e	; 62
    a774:	ea e0       	ldi	r30, 0x0A	; 10
    a776:	0c 94 80 e3 	jmp	0x1c700	; 0x1c700 <__epilogue_restores__+0x10>

0000a77a <dir_find>:
    a77a:	ac e0       	ldi	r26, 0x0C	; 12
    a77c:	b0 e0       	ldi	r27, 0x00	; 0
    a77e:	e3 ec       	ldi	r30, 0xC3	; 195
    a780:	f3 e5       	ldi	r31, 0x53	; 83
    a782:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
    a786:	9c 87       	std	Y+12, r25	; 0x0c
    a788:	8b 87       	std	Y+11, r24	; 0x0b
    a78a:	fc 01       	movw	r30, r24
    a78c:	01 90       	ld	r0, Z+
    a78e:	f0 81       	ld	r31, Z
    a790:	e0 2d       	mov	r30, r0
    a792:	fc 83       	std	Y+4, r31	; 0x04
    a794:	eb 83       	std	Y+3, r30	; 0x03
    a796:	40 e0       	ldi	r20, 0x00	; 0
    a798:	50 e0       	ldi	r21, 0x00	; 0
    a79a:	ba 01       	movw	r22, r20
    a79c:	44 db       	rcall	.-2424   	; 0x9e26 <dir_sdi>
    a79e:	00 97       	sbiw	r24, 0x00	; 0
    a7a0:	09 f0       	breq	.+2      	; 0xa7a4 <dir_find+0x2a>
    a7a2:	e7 c0       	rjmp	.+462    	; 0xa972 <dir_find+0x1f8>
    a7a4:	8f ef       	ldi	r24, 0xFF	; 255
    a7a6:	9f ef       	ldi	r25, 0xFF	; 255
    a7a8:	dc 01       	movw	r26, r24
    a7aa:	eb 85       	ldd	r30, Y+11	; 0x0b
    a7ac:	fc 85       	ldd	r31, Y+12	; 0x0c
    a7ae:	80 a7       	std	Z+40, r24	; 0x28
    a7b0:	91 a7       	std	Z+41, r25	; 0x29
    a7b2:	a2 a7       	std	Z+42, r26	; 0x2a
    a7b4:	b3 a7       	std	Z+43, r27	; 0x2b
    a7b6:	0f ef       	ldi	r16, 0xFF	; 255
    a7b8:	1f ef       	ldi	r17, 0xFF	; 255
    a7ba:	44 24       	eor	r4, r4
    a7bc:	4a 94       	dec	r4
    a7be:	54 2c       	mov	r5, r4
    a7c0:	32 01       	movw	r6, r4
    a7c2:	7c 96       	adiw	r30, 0x1c	; 28
    a7c4:	fa 87       	std	Y+10, r31	; 0x0a
    a7c6:	e9 87       	std	Y+9, r30	; 0x09
    a7c8:	eb 85       	ldd	r30, Y+11	; 0x0b
    a7ca:	fc 85       	ldd	r31, Y+12	; 0x0c
    a7cc:	46 89       	ldd	r20, Z+22	; 0x16
    a7ce:	57 89       	ldd	r21, Z+23	; 0x17
    a7d0:	60 8d       	ldd	r22, Z+24	; 0x18
    a7d2:	71 8d       	ldd	r23, Z+25	; 0x19
    a7d4:	8b 81       	ldd	r24, Y+3	; 0x03
    a7d6:	9c 81       	ldd	r25, Y+4	; 0x04
    a7d8:	0e 94 8f 4a 	call	0x951e	; 0x951e <move_window>
    a7dc:	00 97       	sbiw	r24, 0x00	; 0
    a7de:	09 f0       	breq	.+2      	; 0xa7e2 <dir_find+0x68>
    a7e0:	c8 c0       	rjmp	.+400    	; 0xa972 <dir_find+0x1f8>
    a7e2:	eb 85       	ldd	r30, Y+11	; 0x0b
    a7e4:	fc 85       	ldd	r31, Y+12	; 0x0c
    a7e6:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a7e8:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a7ea:	f7 01       	movw	r30, r14
    a7ec:	d0 80       	ld	r13, Z
    a7ee:	dd 20       	and	r13, r13
    a7f0:	09 f4       	brne	.+2      	; 0xa7f4 <dir_find+0x7a>
    a7f2:	c1 c0       	rjmp	.+386    	; 0xa976 <dir_find+0x1fc>
    a7f4:	93 85       	ldd	r25, Z+11	; 0x0b
    a7f6:	89 2f       	mov	r24, r25
    a7f8:	8f 73       	andi	r24, 0x3F	; 63
    a7fa:	eb 85       	ldd	r30, Y+11	; 0x0b
    a7fc:	fc 85       	ldd	r31, Y+12	; 0x0c
    a7fe:	84 83       	std	Z+4, r24	; 0x04
    a800:	f5 ee       	ldi	r31, 0xE5	; 229
    a802:	df 16       	cp	r13, r31
    a804:	09 f4       	brne	.+2      	; 0xa808 <dir_find+0x8e>
    a806:	a6 c0       	rjmp	.+332    	; 0xa954 <dir_find+0x1da>
    a808:	93 ff       	sbrs	r25, 3
    a80a:	04 c0       	rjmp	.+8      	; 0xa814 <dir_find+0x9a>
    a80c:	8f 30       	cpi	r24, 0x0F	; 15
    a80e:	09 f0       	breq	.+2      	; 0xa812 <dir_find+0x98>
    a810:	a1 c0       	rjmp	.+322    	; 0xa954 <dir_find+0x1da>
    a812:	03 c0       	rjmp	.+6      	; 0xa81a <dir_find+0xa0>
    a814:	8f 30       	cpi	r24, 0x0F	; 15
    a816:	09 f0       	breq	.+2      	; 0xa81a <dir_find+0xa0>
    a818:	88 c0       	rjmp	.+272    	; 0xa92a <dir_find+0x1b0>
    a81a:	eb 85       	ldd	r30, Y+11	; 0x0b
    a81c:	fc 85       	ldd	r31, Y+12	; 0x0c
    a81e:	87 a1       	ldd	r24, Z+39	; 0x27
    a820:	86 fd       	sbrc	r24, 6
    a822:	9f c0       	rjmp	.+318    	; 0xa962 <dir_find+0x1e8>
    a824:	d6 fe       	sbrs	r13, 6
    a826:	10 c0       	rjmp	.+32     	; 0xa848 <dir_find+0xce>
    a828:	f7 01       	movw	r30, r14
    a82a:	05 85       	ldd	r16, Z+13	; 0x0d
    a82c:	fd 2d       	mov	r31, r13
    a82e:	ff 7b       	andi	r31, 0xBF	; 191
    a830:	df 2e       	mov	r13, r31
    a832:	eb 85       	ldd	r30, Y+11	; 0x0b
    a834:	fc 85       	ldd	r31, Y+12	; 0x0c
    a836:	86 85       	ldd	r24, Z+14	; 0x0e
    a838:	97 85       	ldd	r25, Z+15	; 0x0f
    a83a:	a0 89       	ldd	r26, Z+16	; 0x10
    a83c:	b1 89       	ldd	r27, Z+17	; 0x11
    a83e:	80 a7       	std	Z+40, r24	; 0x28
    a840:	91 a7       	std	Z+41, r25	; 0x29
    a842:	a2 a7       	std	Z+42, r26	; 0x2a
    a844:	b3 a7       	std	Z+43, r27	; 0x2b
    a846:	02 c0       	rjmp	.+4      	; 0xa84c <dir_find+0xd2>
    a848:	1d 11       	cpse	r17, r13
    a84a:	8a c0       	rjmp	.+276    	; 0xa960 <dir_find+0x1e6>
    a84c:	f7 01       	movw	r30, r14
    a84e:	c5 84       	ldd	r12, Z+13	; 0x0d
    a850:	c0 12       	cpse	r12, r16
    a852:	86 c0       	rjmp	.+268    	; 0xa960 <dir_find+0x1e6>
    a854:	82 8d       	ldd	r24, Z+26	; 0x1a
    a856:	93 8d       	ldd	r25, Z+27	; 0x1b
    a858:	89 2b       	or	r24, r25
    a85a:	09 f0       	breq	.+2      	; 0xa85e <dir_find+0xe4>
    a85c:	91 c0       	rjmp	.+290    	; 0xa980 <dir_find+0x206>
    a85e:	eb 81       	ldd	r30, Y+3	; 0x03
    a860:	fc 81       	ldd	r31, Y+4	; 0x04
    a862:	03 84       	ldd	r0, Z+11	; 0x0b
    a864:	f4 85       	ldd	r31, Z+12	; 0x0c
    a866:	e0 2d       	mov	r30, r0
    a868:	fe 83       	std	Y+6, r31	; 0x06
    a86a:	ed 83       	std	Y+5, r30	; 0x05
    a86c:	f7 01       	movw	r30, r14
    a86e:	80 81       	ld	r24, Z
    a870:	8f 73       	andi	r24, 0x3F	; 63
    a872:	90 e0       	ldi	r25, 0x00	; 0
    a874:	01 97       	sbiw	r24, 0x01	; 1
    a876:	fd e0       	ldi	r31, 0x0D	; 13
    a878:	f8 9f       	mul	r31, r24
    a87a:	80 01       	movw	r16, r0
    a87c:	f9 9f       	mul	r31, r25
    a87e:	10 0d       	add	r17, r0
    a880:	11 24       	eor	r1, r1
    a882:	2b ee       	ldi	r18, 0xEB	; 235
    a884:	34 e0       	ldi	r19, 0x04	; 4
    a886:	3a 83       	std	Y+2, r19	; 0x02
    a888:	29 83       	std	Y+1, r18	; 0x01
    a88a:	81 e0       	ldi	r24, 0x01	; 1
    a88c:	90 e0       	ldi	r25, 0x00	; 0
    a88e:	e9 81       	ldd	r30, Y+1	; 0x01
    a890:	fa 81       	ldd	r31, Y+2	; 0x02
    a892:	21 91       	ld	r18, Z+
    a894:	fa 83       	std	Y+2, r31	; 0x02
    a896:	e9 83       	std	Y+1, r30	; 0x01
    a898:	f7 01       	movw	r30, r14
    a89a:	e2 0f       	add	r30, r18
    a89c:	f1 1d       	adc	r31, r1
    a89e:	20 80       	ld	r2, Z
    a8a0:	31 80       	ldd	r3, Z+1	; 0x01
    a8a2:	00 97       	sbiw	r24, 0x00	; 0
    a8a4:	39 f1       	breq	.+78     	; 0xa8f4 <dir_find+0x17a>
    a8a6:	0f 3f       	cpi	r16, 0xFF	; 255
    a8a8:	11 05       	cpc	r17, r1
    a8aa:	11 f0       	breq	.+4      	; 0xa8b0 <dir_find+0x136>
    a8ac:	08 f0       	brcs	.+2      	; 0xa8b0 <dir_find+0x136>
    a8ae:	68 c0       	rjmp	.+208    	; 0xa980 <dir_find+0x206>
    a8b0:	b1 01       	movw	r22, r2
    a8b2:	80 e0       	ldi	r24, 0x00	; 0
    a8b4:	90 e0       	ldi	r25, 0x00	; 0
    a8b6:	0e 94 6a 68 	call	0xd0d4	; 0xd0d4 <ff_wtoupper>
    a8ba:	4b 01       	movw	r8, r22
    a8bc:	5c 01       	movw	r10, r24
    a8be:	98 01       	movw	r18, r16
    a8c0:	2f 5f       	subi	r18, 0xFF	; 255
    a8c2:	3f 4f       	sbci	r19, 0xFF	; 255
    a8c4:	38 87       	std	Y+8, r19	; 0x08
    a8c6:	2f 83       	std	Y+7, r18	; 0x07
    a8c8:	00 0f       	add	r16, r16
    a8ca:	11 1f       	adc	r17, r17
    a8cc:	ed 81       	ldd	r30, Y+5	; 0x05
    a8ce:	fe 81       	ldd	r31, Y+6	; 0x06
    a8d0:	e0 0f       	add	r30, r16
    a8d2:	f1 1f       	adc	r31, r17
    a8d4:	60 81       	ld	r22, Z
    a8d6:	71 81       	ldd	r23, Z+1	; 0x01
    a8d8:	80 e0       	ldi	r24, 0x00	; 0
    a8da:	90 e0       	ldi	r25, 0x00	; 0
    a8dc:	0e 94 6a 68 	call	0xd0d4	; 0xd0d4 <ff_wtoupper>
    a8e0:	86 16       	cp	r8, r22
    a8e2:	97 06       	cpc	r9, r23
    a8e4:	a8 06       	cpc	r10, r24
    a8e6:	b9 06       	cpc	r11, r25
    a8e8:	09 f0       	breq	.+2      	; 0xa8ec <dir_find+0x172>
    a8ea:	4a c0       	rjmp	.+148    	; 0xa980 <dir_find+0x206>
    a8ec:	c1 01       	movw	r24, r2
    a8ee:	0f 81       	ldd	r16, Y+7	; 0x07
    a8f0:	18 85       	ldd	r17, Y+8	; 0x08
    a8f2:	05 c0       	rjmp	.+10     	; 0xa8fe <dir_find+0x184>
    a8f4:	3f ef       	ldi	r19, 0xFF	; 255
    a8f6:	23 16       	cp	r2, r19
    a8f8:	33 06       	cpc	r3, r19
    a8fa:	09 f0       	breq	.+2      	; 0xa8fe <dir_find+0x184>
    a8fc:	41 c0       	rjmp	.+130    	; 0xa980 <dir_find+0x206>
    a8fe:	e9 81       	ldd	r30, Y+1	; 0x01
    a900:	fa 81       	ldd	r31, Y+2	; 0x02
    a902:	e8 5f       	subi	r30, 0xF8	; 248
    a904:	f4 40       	sbci	r31, 0x04	; 4
    a906:	19 f6       	brne	.-122    	; 0xa88e <dir_find+0x114>
    a908:	f7 01       	movw	r30, r14
    a90a:	20 81       	ld	r18, Z
    a90c:	26 ff       	sbrs	r18, 6
    a90e:	3a c0       	rjmp	.+116    	; 0xa984 <dir_find+0x20a>
    a910:	89 2b       	or	r24, r25
    a912:	c1 f1       	breq	.+112    	; 0xa984 <dir_find+0x20a>
    a914:	00 0f       	add	r16, r16
    a916:	11 1f       	adc	r17, r17
    a918:	ed 81       	ldd	r30, Y+5	; 0x05
    a91a:	fe 81       	ldd	r31, Y+6	; 0x06
    a91c:	e0 0f       	add	r30, r16
    a91e:	f1 1f       	adc	r31, r17
    a920:	80 81       	ld	r24, Z
    a922:	91 81       	ldd	r25, Z+1	; 0x01
    a924:	89 2b       	or	r24, r25
    a926:	71 f1       	breq	.+92     	; 0xa984 <dir_find+0x20a>
    a928:	2b c0       	rjmp	.+86     	; 0xa980 <dir_find+0x206>
    a92a:	11 11       	cpse	r17, r1
    a92c:	05 c0       	rjmp	.+10     	; 0xa938 <dir_find+0x1be>
    a92e:	c7 01       	movw	r24, r14
    a930:	0e 94 d1 46 	call	0x8da2	; 0x8da2 <sum_sfn>
    a934:	08 17       	cp	r16, r24
    a936:	09 f1       	breq	.+66     	; 0xa97a <dir_find+0x200>
    a938:	eb 85       	ldd	r30, Y+11	; 0x0b
    a93a:	fc 85       	ldd	r31, Y+12	; 0x0c
    a93c:	87 a1       	ldd	r24, Z+39	; 0x27
    a93e:	80 fd       	sbrc	r24, 0
    a940:	09 c0       	rjmp	.+18     	; 0xa954 <dir_find+0x1da>
    a942:	4b e0       	ldi	r20, 0x0B	; 11
    a944:	50 e0       	ldi	r21, 0x00	; 0
    a946:	69 85       	ldd	r22, Y+9	; 0x09
    a948:	7a 85       	ldd	r23, Y+10	; 0x0a
    a94a:	c7 01       	movw	r24, r14
    a94c:	0e 94 d8 45 	call	0x8bb0	; 0x8bb0 <mem_cmp>
    a950:	89 2b       	or	r24, r25
    a952:	99 f0       	breq	.+38     	; 0xa97a <dir_find+0x200>
    a954:	eb 85       	ldd	r30, Y+11	; 0x0b
    a956:	fc 85       	ldd	r31, Y+12	; 0x0c
    a958:	40 a6       	std	Z+40, r4	; 0x28
    a95a:	51 a6       	std	Z+41, r5	; 0x29
    a95c:	62 a6       	std	Z+42, r6	; 0x2a
    a95e:	73 a6       	std	Z+43, r7	; 0x2b
    a960:	1f ef       	ldi	r17, 0xFF	; 255
    a962:	60 e0       	ldi	r22, 0x00	; 0
    a964:	70 e0       	ldi	r23, 0x00	; 0
    a966:	8b 85       	ldd	r24, Y+11	; 0x0b
    a968:	9c 85       	ldd	r25, Y+12	; 0x0c
    a96a:	d5 dc       	rcall	.-1622   	; 0xa316 <dir_next>
    a96c:	00 97       	sbiw	r24, 0x00	; 0
    a96e:	09 f4       	brne	.+2      	; 0xa972 <dir_find+0x1f8>
    a970:	2b cf       	rjmp	.-426    	; 0xa7c8 <dir_find+0x4e>
    a972:	28 2f       	mov	r18, r24
    a974:	0b c0       	rjmp	.+22     	; 0xa98c <dir_find+0x212>
    a976:	24 e0       	ldi	r18, 0x04	; 4
    a978:	01 c0       	rjmp	.+2      	; 0xa97c <dir_find+0x202>
    a97a:	20 e0       	ldi	r18, 0x00	; 0
    a97c:	90 e0       	ldi	r25, 0x00	; 0
    a97e:	06 c0       	rjmp	.+12     	; 0xa98c <dir_find+0x212>
    a980:	0c 2d       	mov	r16, r12
    a982:	ee cf       	rjmp	.-36     	; 0xa960 <dir_find+0x1e6>
    a984:	1f ef       	ldi	r17, 0xFF	; 255
    a986:	1d 0d       	add	r17, r13
    a988:	0c 2d       	mov	r16, r12
    a98a:	eb cf       	rjmp	.-42     	; 0xa962 <dir_find+0x1e8>
    a98c:	82 2f       	mov	r24, r18
    a98e:	2c 96       	adiw	r28, 0x0c	; 12
    a990:	e2 e1       	ldi	r30, 0x12	; 18
    a992:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

0000a996 <dir_register>:
    a996:	a6 e1       	ldi	r26, 0x16	; 22
    a998:	b0 e0       	ldi	r27, 0x00	; 0
    a99a:	e1 ed       	ldi	r30, 0xD1	; 209
    a99c:	f4 e5       	ldi	r31, 0x54	; 84
    a99e:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
    a9a2:	fc 01       	movw	r30, r24
    a9a4:	27 a1       	ldd	r18, Z+39	; 0x27
    a9a6:	20 7a       	andi	r18, 0xA0	; 160
    a9a8:	09 f0       	breq	.+2      	; 0xa9ac <dir_register+0x16>
    a9aa:	53 c1       	rjmp	.+678    	; 0xac52 <dir_register+0x2bc>
    a9ac:	c0 80       	ld	r12, Z
    a9ae:	d1 80       	ldd	r13, Z+1	; 0x01
    a9b0:	f6 01       	movw	r30, r12
    a9b2:	a3 85       	ldd	r26, Z+11	; 0x0b
    a9b4:	b4 85       	ldd	r27, Z+12	; 0x0c
    a9b6:	81 2c       	mov	r8, r1
    a9b8:	91 2c       	mov	r9, r1
    a9ba:	2d 91       	ld	r18, X+
    a9bc:	3d 91       	ld	r19, X+
    a9be:	23 2b       	or	r18, r19
    a9c0:	21 f0       	breq	.+8      	; 0xa9ca <dir_register+0x34>
    a9c2:	ff ef       	ldi	r31, 0xFF	; 255
    a9c4:	8f 1a       	sub	r8, r31
    a9c6:	9f 0a       	sbc	r9, r31
    a9c8:	f8 cf       	rjmp	.-16     	; 0xa9ba <dir_register+0x24>
    a9ca:	8c 01       	movw	r16, r24
    a9cc:	5c 01       	movw	r10, r24
    a9ce:	2c e1       	ldi	r18, 0x1C	; 28
    a9d0:	a2 0e       	add	r10, r18
    a9d2:	b1 1c       	adc	r11, r1
    a9d4:	4c e0       	ldi	r20, 0x0C	; 12
    a9d6:	50 e0       	ldi	r21, 0x00	; 0
    a9d8:	b5 01       	movw	r22, r10
    a9da:	ce 01       	movw	r24, r28
    a9dc:	01 96       	adiw	r24, 0x01	; 1
    a9de:	0e 94 38 47 	call	0x8e70	; 0x8e70 <mem_cpy.part.0>
    a9e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    a9e4:	80 ff       	sbrs	r24, 0
    a9e6:	94 c0       	rjmp	.+296    	; 0xab10 <dir_register+0x17a>
    a9e8:	80 e4       	ldi	r24, 0x40	; 64
    a9ea:	f8 01       	movw	r30, r16
    a9ec:	87 a3       	std	Z+39, r24	; 0x27
    a9ee:	41 2c       	mov	r4, r1
    a9f0:	51 2c       	mov	r5, r1
    a9f2:	32 01       	movw	r6, r4
    a9f4:	43 94       	inc	r4
    a9f6:	72 01       	movw	r14, r4
    a9f8:	f6 01       	movw	r30, r12
    a9fa:	23 84       	ldd	r2, Z+11	; 0x0b
    a9fc:	34 84       	ldd	r3, Z+12	; 0x0c
    a9fe:	4b e0       	ldi	r20, 0x0B	; 11
    aa00:	50 e0       	ldi	r21, 0x00	; 0
    aa02:	be 01       	movw	r22, r28
    aa04:	6f 5f       	subi	r22, 0xFF	; 255
    aa06:	7f 4f       	sbci	r23, 0xFF	; 255
    aa08:	c5 01       	movw	r24, r10
    aa0a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <mem_cpy.part.0>
    aa0e:	f6 e0       	ldi	r31, 0x06	; 6
    aa10:	4f 16       	cp	r4, r31
    aa12:	51 04       	cpc	r5, r1
    aa14:	18 f1       	brcs	.+70     	; 0xaa5c <dir_register+0xc6>
    aa16:	f1 01       	movw	r30, r2
    aa18:	b3 01       	movw	r22, r6
    aa1a:	a2 01       	movw	r20, r4
    aa1c:	81 91       	ld	r24, Z+
    aa1e:	91 91       	ld	r25, Z+
    aa20:	00 97       	sbiw	r24, 0x00	; 0
    aa22:	d9 f0       	breq	.+54     	; 0xaa5a <dir_register+0xc4>
    aa24:	20 e1       	ldi	r18, 0x10	; 16
    aa26:	30 e0       	ldi	r19, 0x00	; 0
    aa28:	44 0f       	add	r20, r20
    aa2a:	55 1f       	adc	r21, r21
    aa2c:	66 1f       	adc	r22, r22
    aa2e:	77 1f       	adc	r23, r23
    aa30:	dc 01       	movw	r26, r24
    aa32:	a1 70       	andi	r26, 0x01	; 1
    aa34:	bb 27       	eor	r27, r27
    aa36:	4a 0f       	add	r20, r26
    aa38:	5b 1f       	adc	r21, r27
    aa3a:	61 1d       	adc	r22, r1
    aa3c:	71 1d       	adc	r23, r1
    aa3e:	96 95       	lsr	r25
    aa40:	87 95       	ror	r24
    aa42:	60 ff       	sbrs	r22, 0
    aa44:	06 c0       	rjmp	.+12     	; 0xaa52 <dir_register+0xbc>
    aa46:	a1 e2       	ldi	r26, 0x21	; 33
    aa48:	4a 27       	eor	r20, r26
    aa4a:	a0 e1       	ldi	r26, 0x10	; 16
    aa4c:	5a 27       	eor	r21, r26
    aa4e:	a1 e0       	ldi	r26, 0x01	; 1
    aa50:	6a 27       	eor	r22, r26
    aa52:	21 50       	subi	r18, 0x01	; 1
    aa54:	31 09       	sbc	r19, r1
    aa56:	41 f7       	brne	.-48     	; 0xaa28 <dir_register+0x92>
    aa58:	e1 cf       	rjmp	.-62     	; 0xaa1c <dir_register+0x86>
    aa5a:	7a 01       	movw	r14, r20
    aa5c:	fe 01       	movw	r30, r28
    aa5e:	75 96       	adiw	r30, 0x15	; 21
    aa60:	27 e0       	ldi	r18, 0x07	; 7
    aa62:	30 e0       	ldi	r19, 0x00	; 0
    aa64:	9e 2d       	mov	r25, r14
    aa66:	9f 70       	andi	r25, 0x0F	; 15
    aa68:	80 e3       	ldi	r24, 0x30	; 48
    aa6a:	89 0f       	add	r24, r25
    aa6c:	8a 33       	cpi	r24, 0x3A	; 58
    aa6e:	10 f0       	brcs	.+4      	; 0xaa74 <dir_register+0xde>
    aa70:	87 e3       	ldi	r24, 0x37	; 55
    aa72:	89 0f       	add	r24, r25
    aa74:	21 50       	subi	r18, 0x01	; 1
    aa76:	31 09       	sbc	r19, r1
    aa78:	82 93       	st	-Z, r24
    aa7a:	a4 e0       	ldi	r26, 0x04	; 4
    aa7c:	f6 94       	lsr	r15
    aa7e:	e7 94       	ror	r14
    aa80:	aa 95       	dec	r26
    aa82:	e1 f7       	brne	.-8      	; 0xaa7c <dir_register+0xe6>
    aa84:	e1 14       	cp	r14, r1
    aa86:	f1 04       	cpc	r15, r1
    aa88:	69 f7       	brne	.-38     	; 0xaa64 <dir_register+0xce>
    aa8a:	ed e0       	ldi	r30, 0x0D	; 13
    aa8c:	f0 e0       	ldi	r31, 0x00	; 0
    aa8e:	ec 0f       	add	r30, r28
    aa90:	fd 1f       	adc	r31, r29
    aa92:	e2 0f       	add	r30, r18
    aa94:	f3 1f       	adc	r31, r19
    aa96:	4e e7       	ldi	r20, 0x7E	; 126
    aa98:	40 83       	st	Z, r20
    aa9a:	f5 01       	movw	r30, r10
    aa9c:	80 e0       	ldi	r24, 0x00	; 0
    aa9e:	90 e0       	ldi	r25, 0x00	; 0
    aaa0:	28 17       	cp	r18, r24
    aaa2:	39 07       	cpc	r19, r25
    aaa4:	29 f0       	breq	.+10     	; 0xaab0 <dir_register+0x11a>
    aaa6:	41 91       	ld	r20, Z+
    aaa8:	40 32       	cpi	r20, 0x20	; 32
    aaaa:	11 f0       	breq	.+4      	; 0xaab0 <dir_register+0x11a>
    aaac:	01 96       	adiw	r24, 0x01	; 1
    aaae:	f8 cf       	rjmp	.-16     	; 0xaaa0 <dir_register+0x10a>
    aab0:	f5 01       	movw	r30, r10
    aab2:	e8 0f       	add	r30, r24
    aab4:	f9 1f       	adc	r31, r25
    aab6:	28 30       	cpi	r18, 0x08	; 8
    aab8:	31 05       	cpc	r19, r1
    aaba:	50 f4       	brcc	.+20     	; 0xaad0 <dir_register+0x13a>
    aabc:	ad e0       	ldi	r26, 0x0D	; 13
    aabe:	b0 e0       	ldi	r27, 0x00	; 0
    aac0:	ac 0f       	add	r26, r28
    aac2:	bd 1f       	adc	r27, r29
    aac4:	a2 0f       	add	r26, r18
    aac6:	b3 1f       	adc	r27, r19
    aac8:	8c 91       	ld	r24, X
    aaca:	2f 5f       	subi	r18, 0xFF	; 255
    aacc:	3f 4f       	sbci	r19, 0xFF	; 255
    aace:	01 c0       	rjmp	.+2      	; 0xaad2 <dir_register+0x13c>
    aad0:	80 e2       	ldi	r24, 0x20	; 32
    aad2:	81 93       	st	Z+, r24
    aad4:	cf 01       	movw	r24, r30
    aad6:	8a 19       	sub	r24, r10
    aad8:	9b 09       	sbc	r25, r11
    aada:	08 97       	sbiw	r24, 0x08	; 8
    aadc:	60 f3       	brcs	.-40     	; 0xaab6 <dir_register+0x120>
    aade:	c8 01       	movw	r24, r16
    aae0:	4c de       	rcall	.-872    	; 0xa77a <dir_find>
    aae2:	00 97       	sbiw	r24, 0x00	; 0
    aae4:	71 f4       	brne	.+28     	; 0xab02 <dir_register+0x16c>
    aae6:	8f ef       	ldi	r24, 0xFF	; 255
    aae8:	48 1a       	sub	r4, r24
    aaea:	58 0a       	sbc	r5, r24
    aaec:	68 0a       	sbc	r6, r24
    aaee:	78 0a       	sbc	r7, r24
    aaf0:	94 e6       	ldi	r25, 0x64	; 100
    aaf2:	49 16       	cp	r4, r25
    aaf4:	51 04       	cpc	r5, r1
    aaf6:	61 04       	cpc	r6, r1
    aaf8:	71 04       	cpc	r7, r1
    aafa:	09 f0       	breq	.+2      	; 0xaafe <dir_register+0x168>
    aafc:	7c cf       	rjmp	.-264    	; 0xa9f6 <dir_register+0x60>
    aafe:	27 e0       	ldi	r18, 0x07	; 7
    ab00:	a9 c0       	rjmp	.+338    	; 0xac54 <dir_register+0x2be>
    ab02:	84 30       	cpi	r24, 0x04	; 4
    ab04:	91 05       	cpc	r25, r1
    ab06:	09 f0       	breq	.+2      	; 0xab0a <dir_register+0x174>
    ab08:	ce c0       	rjmp	.+412    	; 0xaca6 <dir_register+0x310>
    ab0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    ab0c:	f8 01       	movw	r30, r16
    ab0e:	87 a3       	std	Z+39, r24	; 0x27
    ab10:	8c 85       	ldd	r24, Y+12	; 0x0c
    ab12:	81 ff       	sbrs	r24, 1
    ab14:	0b c0       	rjmp	.+22     	; 0xab2c <dir_register+0x196>
    ab16:	c4 01       	movw	r24, r8
    ab18:	0c 96       	adiw	r24, 0x0c	; 12
    ab1a:	6d e0       	ldi	r22, 0x0D	; 13
    ab1c:	70 e0       	ldi	r23, 0x00	; 0
    ab1e:	0e 94 c8 e2 	call	0x1c590	; 0x1c590 <__udivmodhi4>
    ab22:	7b 01       	movw	r14, r22
    ab24:	ff ef       	ldi	r31, 0xFF	; 255
    ab26:	ef 1a       	sub	r14, r31
    ab28:	ff 0a       	sbc	r15, r31
    ab2a:	03 c0       	rjmp	.+6      	; 0xab32 <dir_register+0x19c>
    ab2c:	ee 24       	eor	r14, r14
    ab2e:	e3 94       	inc	r14
    ab30:	f1 2c       	mov	r15, r1
    ab32:	b7 01       	movw	r22, r14
    ab34:	c8 01       	movw	r24, r16
    ab36:	d7 dc       	rcall	.-1618   	; 0xa4e6 <dir_alloc>
    ab38:	00 97       	sbiw	r24, 0x00	; 0
    ab3a:	09 f0       	breq	.+2      	; 0xab3e <dir_register+0x1a8>
    ab3c:	b4 c0       	rjmp	.+360    	; 0xaca6 <dir_register+0x310>
    ab3e:	21 e0       	ldi	r18, 0x01	; 1
    ab40:	e2 1a       	sub	r14, r18
    ab42:	f1 08       	sbc	r15, r1
    ab44:	09 f4       	brne	.+2      	; 0xab48 <dir_register+0x1b2>
    ab46:	88 c0       	rjmp	.+272    	; 0xac58 <dir_register+0x2c2>
    ab48:	f8 01       	movw	r30, r16
    ab4a:	46 85       	ldd	r20, Z+14	; 0x0e
    ab4c:	57 85       	ldd	r21, Z+15	; 0x0f
    ab4e:	60 89       	ldd	r22, Z+16	; 0x10
    ab50:	71 89       	ldd	r23, Z+17	; 0x11
    ab52:	c7 01       	movw	r24, r14
    ab54:	e5 e0       	ldi	r30, 0x05	; 5
    ab56:	88 0f       	add	r24, r24
    ab58:	99 1f       	adc	r25, r25
    ab5a:	ea 95       	dec	r30
    ab5c:	e1 f7       	brne	.-8      	; 0xab56 <dir_register+0x1c0>
    ab5e:	48 1b       	sub	r20, r24
    ab60:	59 0b       	sbc	r21, r25
    ab62:	61 09       	sbc	r22, r1
    ab64:	71 09       	sbc	r23, r1
    ab66:	c8 01       	movw	r24, r16
    ab68:	5e d9       	rcall	.-3396   	; 0x9e26 <dir_sdi>
    ab6a:	00 97       	sbiw	r24, 0x00	; 0
    ab6c:	09 f0       	breq	.+2      	; 0xab70 <dir_register+0x1da>
    ab6e:	9b c0       	rjmp	.+310    	; 0xaca6 <dir_register+0x310>
    ab70:	c5 01       	movw	r24, r10
    ab72:	0e 94 d1 46 	call	0x8da2	; 0x8da2 <sum_sfn>
    ab76:	68 2e       	mov	r6, r24
    ab78:	5f e0       	ldi	r21, 0x0F	; 15
    ab7a:	35 2e       	mov	r3, r21
    ab7c:	6d e0       	ldi	r22, 0x0D	; 13
    ab7e:	46 2e       	mov	r4, r22
    ab80:	78 ef       	ldi	r23, 0xF8	; 248
    ab82:	87 2e       	mov	r8, r23
    ab84:	74 e0       	ldi	r23, 0x04	; 4
    ab86:	97 2e       	mov	r9, r23
    ab88:	55 24       	eor	r5, r5
    ab8a:	53 94       	inc	r5
    ab8c:	f8 01       	movw	r30, r16
    ab8e:	46 89       	ldd	r20, Z+22	; 0x16
    ab90:	57 89       	ldd	r21, Z+23	; 0x17
    ab92:	60 8d       	ldd	r22, Z+24	; 0x18
    ab94:	71 8d       	ldd	r23, Z+25	; 0x19
    ab96:	c6 01       	movw	r24, r12
    ab98:	0e 94 8f 4a 	call	0x951e	; 0x951e <move_window>
    ab9c:	00 97       	sbiw	r24, 0x00	; 0
    ab9e:	09 f0       	breq	.+2      	; 0xaba2 <dir_register+0x20c>
    aba0:	82 c0       	rjmp	.+260    	; 0xaca6 <dir_register+0x310>
    aba2:	f6 01       	movw	r30, r12
    aba4:	63 85       	ldd	r22, Z+11	; 0x0b
    aba6:	74 85       	ldd	r23, Z+12	; 0x0c
    aba8:	f8 01       	movw	r30, r16
    abaa:	02 8c       	ldd	r0, Z+26	; 0x1a
    abac:	f3 8d       	ldd	r31, Z+27	; 0x1b
    abae:	e0 2d       	mov	r30, r0
    abb0:	fe 8b       	std	Y+22, r31	; 0x16
    abb2:	ed 8b       	std	Y+21, r30	; 0x15
    abb4:	7e 2c       	mov	r7, r14
    abb6:	65 86       	std	Z+13, r6	; 0x0d
    abb8:	33 86       	std	Z+11, r3	; 0x0b
    abba:	14 86       	std	Z+12, r1	; 0x0c
    abbc:	12 8e       	std	Z+26, r1	; 0x1a
    abbe:	13 8e       	std	Z+27, r1	; 0x1b
    abc0:	97 01       	movw	r18, r14
    abc2:	33 27       	eor	r19, r19
    abc4:	21 50       	subi	r18, 0x01	; 1
    abc6:	31 09       	sbc	r19, r1
    abc8:	42 9e       	mul	r4, r18
    abca:	c0 01       	movw	r24, r0
    abcc:	43 9e       	mul	r4, r19
    abce:	90 0d       	add	r25, r0
    abd0:	11 24       	eor	r1, r1
    abd2:	ab ee       	ldi	r26, 0xEB	; 235
    abd4:	b4 e0       	ldi	r27, 0x04	; 4
    abd6:	20 e0       	ldi	r18, 0x00	; 0
    abd8:	30 e0       	ldi	r19, 0x00	; 0
    abda:	2f 3f       	cpi	r18, 0xFF	; 255
    abdc:	ff ef       	ldi	r31, 0xFF	; 255
    abde:	3f 07       	cpc	r19, r31
    abe0:	49 f0       	breq	.+18     	; 0xabf4 <dir_register+0x25e>
    abe2:	9c 01       	movw	r18, r24
    abe4:	22 0f       	add	r18, r18
    abe6:	33 1f       	adc	r19, r19
    abe8:	26 0f       	add	r18, r22
    abea:	37 1f       	adc	r19, r23
    abec:	f9 01       	movw	r30, r18
    abee:	20 81       	ld	r18, Z
    abf0:	31 81       	ldd	r19, Z+1	; 0x01
    abf2:	01 96       	adiw	r24, 0x01	; 1
    abf4:	4d 91       	ld	r20, X+
    abf6:	ed 89       	ldd	r30, Y+21	; 0x15
    abf8:	fe 89       	ldd	r31, Y+22	; 0x16
    abfa:	e4 0f       	add	r30, r20
    abfc:	f1 1d       	adc	r31, r1
    abfe:	20 83       	st	Z, r18
    ac00:	31 83       	std	Z+1, r19	; 0x01
    ac02:	21 15       	cp	r18, r1
    ac04:	31 05       	cpc	r19, r1
    ac06:	11 f4       	brne	.+4      	; 0xac0c <dir_register+0x276>
    ac08:	2f ef       	ldi	r18, 0xFF	; 255
    ac0a:	3f ef       	ldi	r19, 0xFF	; 255
    ac0c:	8a 16       	cp	r8, r26
    ac0e:	9b 06       	cpc	r9, r27
    ac10:	21 f7       	brne	.-56     	; 0xabda <dir_register+0x244>
    ac12:	2f 3f       	cpi	r18, 0xFF	; 255
    ac14:	3f 4f       	sbci	r19, 0xFF	; 255
    ac16:	49 f0       	breq	.+18     	; 0xac2a <dir_register+0x294>
    ac18:	88 0f       	add	r24, r24
    ac1a:	99 1f       	adc	r25, r25
    ac1c:	db 01       	movw	r26, r22
    ac1e:	a8 0f       	add	r26, r24
    ac20:	b9 1f       	adc	r27, r25
    ac22:	8d 91       	ld	r24, X+
    ac24:	9c 91       	ld	r25, X
    ac26:	89 2b       	or	r24, r25
    ac28:	19 f4       	brne	.+6      	; 0xac30 <dir_register+0x29a>
    ac2a:	27 2d       	mov	r18, r7
    ac2c:	20 64       	ori	r18, 0x40	; 64
    ac2e:	72 2e       	mov	r7, r18
    ac30:	ed 89       	ldd	r30, Y+21	; 0x15
    ac32:	fe 89       	ldd	r31, Y+22	; 0x16
    ac34:	70 82       	st	Z, r7
    ac36:	f6 01       	movw	r30, r12
    ac38:	53 82       	std	Z+3, r5	; 0x03
    ac3a:	60 e0       	ldi	r22, 0x00	; 0
    ac3c:	70 e0       	ldi	r23, 0x00	; 0
    ac3e:	c8 01       	movw	r24, r16
    ac40:	6a db       	rcall	.-2348   	; 0xa316 <dir_next>
    ac42:	00 97       	sbiw	r24, 0x00	; 0
    ac44:	81 f5       	brne	.+96     	; 0xaca6 <dir_register+0x310>
    ac46:	f1 e0       	ldi	r31, 0x01	; 1
    ac48:	ef 1a       	sub	r14, r31
    ac4a:	f1 08       	sbc	r15, r1
    ac4c:	09 f0       	breq	.+2      	; 0xac50 <dir_register+0x2ba>
    ac4e:	9e cf       	rjmp	.-196    	; 0xab8c <dir_register+0x1f6>
    ac50:	03 c0       	rjmp	.+6      	; 0xac58 <dir_register+0x2c2>
    ac52:	26 e0       	ldi	r18, 0x06	; 6
    ac54:	90 e0       	ldi	r25, 0x00	; 0
    ac56:	28 c0       	rjmp	.+80     	; 0xaca8 <dir_register+0x312>
    ac58:	f8 01       	movw	r30, r16
    ac5a:	46 89       	ldd	r20, Z+22	; 0x16
    ac5c:	57 89       	ldd	r21, Z+23	; 0x17
    ac5e:	60 8d       	ldd	r22, Z+24	; 0x18
    ac60:	71 8d       	ldd	r23, Z+25	; 0x19
    ac62:	c6 01       	movw	r24, r12
    ac64:	0e 94 8f 4a 	call	0x951e	; 0x951e <move_window>
    ac68:	00 97       	sbiw	r24, 0x00	; 0
    ac6a:	e9 f4       	brne	.+58     	; 0xaca6 <dir_register+0x310>
    ac6c:	40 e2       	ldi	r20, 0x20	; 32
    ac6e:	50 e0       	ldi	r21, 0x00	; 0
    ac70:	60 e0       	ldi	r22, 0x00	; 0
    ac72:	70 e0       	ldi	r23, 0x00	; 0
    ac74:	f8 01       	movw	r30, r16
    ac76:	82 8d       	ldd	r24, Z+26	; 0x1a
    ac78:	93 8d       	ldd	r25, Z+27	; 0x1b
    ac7a:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <mem_set>
    ac7e:	4b e0       	ldi	r20, 0x0B	; 11
    ac80:	50 e0       	ldi	r21, 0x00	; 0
    ac82:	b5 01       	movw	r22, r10
    ac84:	f8 01       	movw	r30, r16
    ac86:	82 8d       	ldd	r24, Z+26	; 0x1a
    ac88:	93 8d       	ldd	r25, Z+27	; 0x1b
    ac8a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <mem_cpy.part.0>
    ac8e:	f8 01       	movw	r30, r16
    ac90:	22 8d       	ldd	r18, Z+26	; 0x1a
    ac92:	33 8d       	ldd	r19, Z+27	; 0x1b
    ac94:	87 a1       	ldd	r24, Z+39	; 0x27
    ac96:	88 71       	andi	r24, 0x18	; 24
    ac98:	f9 01       	movw	r30, r18
    ac9a:	84 87       	std	Z+12, r24	; 0x0c
    ac9c:	81 e0       	ldi	r24, 0x01	; 1
    ac9e:	f6 01       	movw	r30, r12
    aca0:	83 83       	std	Z+3, r24	; 0x03
    aca2:	20 e0       	ldi	r18, 0x00	; 0
    aca4:	d7 cf       	rjmp	.-82     	; 0xac54 <dir_register+0x2be>
    aca6:	28 2f       	mov	r18, r24
    aca8:	82 2f       	mov	r24, r18
    acaa:	66 96       	adiw	r28, 0x16	; 22
    acac:	e2 e1       	ldi	r30, 0x12	; 18
    acae:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

0000acb2 <follow_path>:
    acb2:	aa e0       	ldi	r26, 0x0A	; 10
    acb4:	b0 e0       	ldi	r27, 0x00	; 0
    acb6:	ef e5       	ldi	r30, 0x5F	; 95
    acb8:	f6 e5       	ldi	r31, 0x56	; 86
    acba:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
    acbe:	7c 01       	movw	r14, r24
    acc0:	3b 01       	movw	r6, r22
    acc2:	dc 01       	movw	r26, r24
    acc4:	0d 90       	ld	r0, X+
    acc6:	bc 91       	ld	r27, X
    acc8:	a0 2d       	mov	r26, r0
    acca:	be 83       	std	Y+6, r27	; 0x06
    accc:	ad 83       	std	Y+5, r26	; 0x05
    acce:	fb 01       	movw	r30, r22
    acd0:	80 81       	ld	r24, Z
    acd2:	8f 32       	cpi	r24, 0x2F	; 47
    acd4:	11 f0       	breq	.+4      	; 0xacda <follow_path+0x28>
    acd6:	8c 35       	cpi	r24, 0x5C	; 92
    acd8:	11 f4       	brne	.+4      	; 0xacde <follow_path+0x2c>
    acda:	93 01       	movw	r18, r6
    acdc:	0c c0       	rjmp	.+24     	; 0xacf6 <follow_path+0x44>
    acde:	ed 81       	ldd	r30, Y+5	; 0x05
    ace0:	fe 81       	ldd	r31, Y+6	; 0x06
    ace2:	85 89       	ldd	r24, Z+21	; 0x15
    ace4:	96 89       	ldd	r25, Z+22	; 0x16
    ace6:	a7 89       	ldd	r26, Z+23	; 0x17
    ace8:	b0 8d       	ldd	r27, Z+24	; 0x18
    acea:	f7 01       	movw	r30, r14
    acec:	86 83       	std	Z+6, r24	; 0x06
    acee:	97 83       	std	Z+7, r25	; 0x07
    acf0:	a0 87       	std	Z+8, r26	; 0x08
    acf2:	b1 87       	std	Z+9, r27	; 0x09
    acf4:	0e c0       	rjmp	.+28     	; 0xad12 <follow_path+0x60>
    acf6:	39 01       	movw	r6, r18
    acf8:	d9 01       	movw	r26, r18
    acfa:	8c 91       	ld	r24, X
    acfc:	2f 5f       	subi	r18, 0xFF	; 255
    acfe:	3f 4f       	sbci	r19, 0xFF	; 255
    ad00:	8f 32       	cpi	r24, 0x2F	; 47
    ad02:	c9 f3       	breq	.-14     	; 0xacf6 <follow_path+0x44>
    ad04:	8c 35       	cpi	r24, 0x5C	; 92
    ad06:	b9 f3       	breq	.-18     	; 0xacf6 <follow_path+0x44>
    ad08:	f7 01       	movw	r30, r14
    ad0a:	16 82       	std	Z+6, r1	; 0x06
    ad0c:	17 82       	std	Z+7, r1	; 0x07
    ad0e:	10 86       	std	Z+8, r1	; 0x08
    ad10:	11 86       	std	Z+9, r1	; 0x09
    ad12:	d3 01       	movw	r26, r6
    ad14:	8c 91       	ld	r24, X
    ad16:	80 32       	cpi	r24, 0x20	; 32
    ad18:	58 f0       	brcs	.+22     	; 0xad30 <follow_path+0x7e>
    ad1a:	f7 01       	movw	r30, r14
    ad1c:	7c 96       	adiw	r30, 0x1c	; 28
    ad1e:	f8 87       	std	Y+8, r31	; 0x08
    ad20:	ef 83       	std	Y+7, r30	; 0x07
    ad22:	2d 81       	ldd	r18, Y+5	; 0x05
    ad24:	3e 81       	ldd	r19, Y+6	; 0x06
    ad26:	2b 5c       	subi	r18, 0xCB	; 203
    ad28:	3f 4f       	sbci	r19, 0xFF	; 255
    ad2a:	3a 87       	std	Y+10, r19	; 0x0a
    ad2c:	29 87       	std	Y+9, r18	; 0x09
    ad2e:	96 c0       	rjmp	.+300    	; 0xae5c <follow_path+0x1aa>
    ad30:	80 e8       	ldi	r24, 0x80	; 128
    ad32:	f7 01       	movw	r30, r14
    ad34:	87 a3       	std	Z+39, r24	; 0x27
    ad36:	40 e0       	ldi	r20, 0x00	; 0
    ad38:	50 e0       	ldi	r21, 0x00	; 0
    ad3a:	ba 01       	movw	r22, r20
    ad3c:	c7 01       	movw	r24, r14
    ad3e:	73 d8       	rcall	.-3866   	; 0x9e26 <dir_sdi>
    ad40:	e5 c1       	rjmp	.+970    	; 0xb10c <follow_path+0x45a>
    ad42:	6c 35       	cpi	r22, 0x5C	; 92
    ad44:	71 05       	cpc	r23, r1
    ad46:	b9 f1       	breq	.+110    	; 0xadb6 <follow_path+0x104>
    ad48:	60 38       	cpi	r22, 0x80	; 128
    ad4a:	71 05       	cpc	r23, r1
    ad4c:	28 f4       	brcc	.+10     	; 0xad58 <follow_path+0xa6>
    ad4e:	e7 e2       	ldi	r30, 0x27	; 39
    ad50:	f4 e0       	ldi	r31, 0x04	; 4
    ad52:	41 91       	ld	r20, Z+
    ad54:	41 11       	cpse	r20, r1
    ad56:	8c c0       	rjmp	.+280    	; 0xae70 <follow_path+0x1be>
    ad58:	0f 3f       	cpi	r16, 0xFF	; 255
    ad5a:	11 05       	cpc	r17, r1
    ad5c:	08 f0       	brcs	.+2      	; 0xad60 <follow_path+0xae>
    ad5e:	b9 c1       	rjmp	.+882    	; 0xb0d2 <follow_path+0x420>
    ad60:	f8 01       	movw	r30, r16
    ad62:	ee 0f       	add	r30, r30
    ad64:	ff 1f       	adc	r31, r31
    ad66:	ea 0d       	add	r30, r10
    ad68:	fb 1d       	adc	r31, r11
    ad6a:	71 83       	std	Z+1, r23	; 0x01
    ad6c:	60 83       	st	Z, r22
    ad6e:	0f 5f       	subi	r16, 0xFF	; 255
    ad70:	1f 4f       	sbci	r17, 0xFF	; 255
    ad72:	ce 01       	movw	r24, r28
    ad74:	01 96       	adiw	r24, 0x01	; 1
    ad76:	0e 94 e7 45 	call	0x8bce	; 0x8bce <tchar2uni>
    ad7a:	6f 3f       	cpi	r22, 0xFF	; 255
    ad7c:	bf ef       	ldi	r27, 0xFF	; 255
    ad7e:	7b 07       	cpc	r23, r27
    ad80:	8b 07       	cpc	r24, r27
    ad82:	9b 07       	cpc	r25, r27
    ad84:	09 f4       	brne	.+2      	; 0xad88 <follow_path+0xd6>
    ad86:	a5 c1       	rjmp	.+842    	; 0xb0d2 <follow_path+0x420>
    ad88:	61 15       	cp	r22, r1
    ad8a:	71 05       	cpc	r23, r1
    ad8c:	e1 e0       	ldi	r30, 0x01	; 1
    ad8e:	8e 07       	cpc	r24, r30
    ad90:	91 05       	cpc	r25, r1
    ad92:	48 f0       	brcs	.+18     	; 0xada6 <follow_path+0xf4>
    ad94:	f8 01       	movw	r30, r16
    ad96:	ee 0f       	add	r30, r30
    ad98:	ff 1f       	adc	r31, r31
    ad9a:	ea 0d       	add	r30, r10
    ad9c:	fb 1d       	adc	r31, r11
    ad9e:	91 83       	std	Z+1, r25	; 0x01
    ada0:	80 83       	st	Z, r24
    ada2:	0f 5f       	subi	r16, 0xFF	; 255
    ada4:	1f 4f       	sbci	r17, 0xFF	; 255
    ada6:	9b 01       	movw	r18, r22
    ada8:	60 32       	cpi	r22, 0x20	; 32
    adaa:	71 05       	cpc	r23, r1
    adac:	08 f4       	brcc	.+2      	; 0xadb0 <follow_path+0xfe>
    adae:	6a c0       	rjmp	.+212    	; 0xae84 <follow_path+0x1d2>
    adb0:	6f 32       	cpi	r22, 0x2F	; 47
    adb2:	71 05       	cpc	r23, r1
    adb4:	31 f6       	brne	.-116    	; 0xad42 <follow_path+0x90>
    adb6:	e9 81       	ldd	r30, Y+1	; 0x01
    adb8:	fa 81       	ldd	r31, Y+2	; 0x02
    adba:	80 81       	ld	r24, Z
    adbc:	8f 32       	cpi	r24, 0x2F	; 47
    adbe:	09 f4       	brne	.+2      	; 0xadc2 <follow_path+0x110>
    adc0:	5d c0       	rjmp	.+186    	; 0xae7c <follow_path+0x1ca>
    adc2:	8c 35       	cpi	r24, 0x5C	; 92
    adc4:	09 f4       	brne	.+2      	; 0xadc8 <follow_path+0x116>
    adc6:	5a c0       	rjmp	.+180    	; 0xae7c <follow_path+0x1ca>
    adc8:	1b 82       	std	Y+3, r1	; 0x03
    adca:	69 80       	ldd	r6, Y+1	; 0x01
    adcc:	7a 80       	ldd	r7, Y+2	; 0x02
    adce:	98 01       	movw	r18, r16
    add0:	22 0f       	add	r18, r18
    add2:	33 1f       	adc	r19, r19
    add4:	01 30       	cpi	r16, 0x01	; 1
    add6:	11 05       	cpc	r17, r1
    add8:	09 f0       	breq	.+2      	; 0xaddc <follow_path+0x12a>
    adda:	57 c0       	rjmp	.+174    	; 0xae8a <follow_path+0x1d8>
    addc:	d5 01       	movw	r26, r10
    adde:	8d 91       	ld	r24, X+
    ade0:	9c 91       	ld	r25, X
    ade2:	8e 97       	sbiw	r24, 0x2e	; 46
    ade4:	09 f0       	breq	.+2      	; 0xade8 <follow_path+0x136>
    ade6:	5c c0       	rjmp	.+184    	; 0xaea0 <follow_path+0x1ee>
    ade8:	f9 01       	movw	r30, r18
    adea:	ea 0d       	add	r30, r10
    adec:	fb 1d       	adc	r31, r11
    adee:	11 82       	std	Z+1, r1	; 0x01
    adf0:	10 82       	st	Z, r1
    adf2:	f7 01       	movw	r30, r14
    adf4:	7c 96       	adiw	r30, 0x1c	; 28
    adf6:	80 e0       	ldi	r24, 0x00	; 0
    adf8:	90 e0       	ldi	r25, 0x00	; 0
    adfa:	80 17       	cp	r24, r16
    adfc:	91 07       	cpc	r25, r17
    adfe:	08 f0       	brcs	.+2      	; 0xae02 <follow_path+0x150>
    ae00:	53 c0       	rjmp	.+166    	; 0xaea8 <follow_path+0x1f6>
    ae02:	2e e2       	ldi	r18, 0x2E	; 46
    ae04:	21 93       	st	Z+, r18
    ae06:	01 96       	adiw	r24, 0x01	; 1
    ae08:	8b 30       	cpi	r24, 0x0B	; 11
    ae0a:	91 05       	cpc	r25, r1
    ae0c:	b1 f7       	brne	.-20     	; 0xadfa <follow_path+0x148>
    ae0e:	8b 81       	ldd	r24, Y+3	; 0x03
    ae10:	80 62       	ori	r24, 0x20	; 32
    ae12:	f7 01       	movw	r30, r14
    ae14:	87 a3       	std	Z+39, r24	; 0x27
    ae16:	80 e0       	ldi	r24, 0x00	; 0
    ae18:	90 e0       	ldi	r25, 0x00	; 0
    ae1a:	00 97       	sbiw	r24, 0x00	; 0
    ae1c:	09 f0       	breq	.+2      	; 0xae20 <follow_path+0x16e>
    ae1e:	76 c1       	rjmp	.+748    	; 0xb10c <follow_path+0x45a>
    ae20:	c7 01       	movw	r24, r14
    ae22:	ab dc       	rcall	.-1706   	; 0xa77a <dir_find>
    ae24:	f7 01       	movw	r30, r14
    ae26:	27 a1       	ldd	r18, Z+39	; 0x27
    ae28:	00 97       	sbiw	r24, 0x00	; 0
    ae2a:	09 f0       	breq	.+2      	; 0xae2e <follow_path+0x17c>
    ae2c:	55 c1       	rjmp	.+682    	; 0xb0d8 <follow_path+0x426>
    ae2e:	22 fd       	sbrc	r18, 2
    ae30:	6d c1       	rjmp	.+730    	; 0xb10c <follow_path+0x45a>
    ae32:	f7 01       	movw	r30, r14
    ae34:	84 81       	ldd	r24, Z+4	; 0x04
    ae36:	84 ff       	sbrs	r24, 4
    ae38:	60 c1       	rjmp	.+704    	; 0xb0fa <follow_path+0x448>
    ae3a:	66 85       	ldd	r22, Z+14	; 0x0e
    ae3c:	77 85       	ldd	r23, Z+15	; 0x0f
    ae3e:	71 70       	andi	r23, 0x01	; 1
    ae40:	29 85       	ldd	r18, Y+9	; 0x09
    ae42:	3a 85       	ldd	r19, Y+10	; 0x0a
    ae44:	62 0f       	add	r22, r18
    ae46:	73 1f       	adc	r23, r19
    ae48:	ad 81       	ldd	r26, Y+5	; 0x05
    ae4a:	be 81       	ldd	r27, Y+6	; 0x06
    ae4c:	8c 91       	ld	r24, X
    ae4e:	0e 94 00 49 	call	0x9200	; 0x9200 <ld_clust.isra.4>
    ae52:	f7 01       	movw	r30, r14
    ae54:	66 83       	std	Z+6, r22	; 0x06
    ae56:	77 83       	std	Z+7, r23	; 0x07
    ae58:	80 87       	std	Z+8, r24	; 0x08
    ae5a:	91 87       	std	Z+9, r25	; 0x09
    ae5c:	7a 82       	std	Y+2, r7	; 0x02
    ae5e:	69 82       	std	Y+1, r6	; 0x01
    ae60:	d7 01       	movw	r26, r14
    ae62:	ed 91       	ld	r30, X+
    ae64:	fc 91       	ld	r31, X
    ae66:	a3 84       	ldd	r10, Z+11	; 0x0b
    ae68:	b4 84       	ldd	r11, Z+12	; 0x0c
    ae6a:	00 e0       	ldi	r16, 0x00	; 0
    ae6c:	10 e0       	ldi	r17, 0x00	; 0
    ae6e:	81 cf       	rjmp	.-254    	; 0xad72 <follow_path+0xc0>
    ae70:	50 e0       	ldi	r21, 0x00	; 0
    ae72:	24 17       	cp	r18, r20
    ae74:	35 07       	cpc	r19, r21
    ae76:	09 f0       	breq	.+2      	; 0xae7a <follow_path+0x1c8>
    ae78:	6c cf       	rjmp	.-296    	; 0xad52 <follow_path+0xa0>
    ae7a:	2b c1       	rjmp	.+598    	; 0xb0d2 <follow_path+0x420>
    ae7c:	31 96       	adiw	r30, 0x01	; 1
    ae7e:	fa 83       	std	Y+2, r31	; 0x02
    ae80:	e9 83       	std	Y+1, r30	; 0x01
    ae82:	99 cf       	rjmp	.-206    	; 0xadb6 <follow_path+0x104>
    ae84:	f4 e0       	ldi	r31, 0x04	; 4
    ae86:	fb 83       	std	Y+3, r31	; 0x03
    ae88:	a0 cf       	rjmp	.-192    	; 0xadca <follow_path+0x118>
    ae8a:	02 30       	cpi	r16, 0x02	; 2
    ae8c:	11 05       	cpc	r17, r1
    ae8e:	41 f4       	brne	.+16     	; 0xaea0 <follow_path+0x1ee>
    ae90:	f5 01       	movw	r30, r10
    ae92:	82 81       	ldd	r24, Z+2	; 0x02
    ae94:	93 81       	ldd	r25, Z+3	; 0x03
    ae96:	8e 97       	sbiw	r24, 0x2e	; 46
    ae98:	19 f4       	brne	.+6      	; 0xaea0 <follow_path+0x1ee>
    ae9a:	80 81       	ld	r24, Z
    ae9c:	91 81       	ldd	r25, Z+1	; 0x01
    ae9e:	a1 cf       	rjmp	.-190    	; 0xade2 <follow_path+0x130>
    aea0:	f9 01       	movw	r30, r18
    aea2:	ea 0d       	add	r30, r10
    aea4:	fb 1d       	adc	r31, r11
    aea6:	09 c0       	rjmp	.+18     	; 0xaeba <follow_path+0x208>
    aea8:	20 e2       	ldi	r18, 0x20	; 32
    aeaa:	ac cf       	rjmp	.-168    	; 0xae04 <follow_path+0x152>
    aeac:	92 91       	ld	r25, -Z
    aeae:	82 91       	ld	r24, -Z
    aeb0:	80 32       	cpi	r24, 0x20	; 32
    aeb2:	91 05       	cpc	r25, r1
    aeb4:	31 f4       	brne	.+12     	; 0xaec2 <follow_path+0x210>
    aeb6:	01 50       	subi	r16, 0x01	; 1
    aeb8:	11 09       	sbc	r17, r1
    aeba:	01 15       	cp	r16, r1
    aebc:	11 05       	cpc	r17, r1
    aebe:	b1 f7       	brne	.-20     	; 0xaeac <follow_path+0x1fa>
    aec0:	02 c0       	rjmp	.+4      	; 0xaec6 <follow_path+0x214>
    aec2:	8e 97       	sbiw	r24, 0x2e	; 46
    aec4:	c1 f3       	breq	.-16     	; 0xaeb6 <follow_path+0x204>
    aec6:	f8 01       	movw	r30, r16
    aec8:	ee 0f       	add	r30, r30
    aeca:	ff 1f       	adc	r31, r31
    aecc:	ea 0d       	add	r30, r10
    aece:	fb 1d       	adc	r31, r11
    aed0:	11 82       	std	Z+1, r1	; 0x01
    aed2:	10 82       	st	Z, r1
    aed4:	01 15       	cp	r16, r1
    aed6:	11 05       	cpc	r17, r1
    aed8:	09 f4       	brne	.+2      	; 0xaedc <follow_path+0x22a>
    aeda:	fb c0       	rjmp	.+502    	; 0xb0d2 <follow_path+0x420>
    aedc:	d5 01       	movw	r26, r10
    aede:	41 2c       	mov	r4, r1
    aee0:	51 2c       	mov	r5, r1
    aee2:	8d 91       	ld	r24, X+
    aee4:	9d 91       	ld	r25, X+
    aee6:	80 32       	cpi	r24, 0x20	; 32
    aee8:	91 05       	cpc	r25, r1
    aeea:	21 f4       	brne	.+8      	; 0xaef4 <follow_path+0x242>
    aeec:	2f ef       	ldi	r18, 0xFF	; 255
    aeee:	42 1a       	sub	r4, r18
    aef0:	52 0a       	sbc	r5, r18
    aef2:	f7 cf       	rjmp	.-18     	; 0xaee2 <follow_path+0x230>
    aef4:	41 14       	cp	r4, r1
    aef6:	51 04       	cpc	r5, r1
    aef8:	11 f4       	brne	.+4      	; 0xaefe <follow_path+0x24c>
    aefa:	8e 97       	sbiw	r24, 0x2e	; 46
    aefc:	39 f4       	brne	.+14     	; 0xaf0c <follow_path+0x25a>
    aefe:	3b 81       	ldd	r19, Y+3	; 0x03
    af00:	33 60       	ori	r19, 0x03	; 3
    af02:	3b 83       	std	Y+3, r19	; 0x03
    af04:	03 c0       	rjmp	.+6      	; 0xaf0c <follow_path+0x25a>
    af06:	01 50       	subi	r16, 0x01	; 1
    af08:	11 09       	sbc	r17, r1
    af0a:	21 f0       	breq	.+8      	; 0xaf14 <follow_path+0x262>
    af0c:	92 91       	ld	r25, -Z
    af0e:	82 91       	ld	r24, -Z
    af10:	8e 97       	sbiw	r24, 0x2e	; 46
    af12:	c9 f7       	brne	.-14     	; 0xaf06 <follow_path+0x254>
    af14:	4b e0       	ldi	r20, 0x0B	; 11
    af16:	50 e0       	ldi	r21, 0x00	; 0
    af18:	60 e2       	ldi	r22, 0x20	; 32
    af1a:	70 e0       	ldi	r23, 0x00	; 0
    af1c:	8f 81       	ldd	r24, Y+7	; 0x07
    af1e:	98 85       	ldd	r25, Y+8	; 0x08
    af20:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <mem_set>
    af24:	48 e0       	ldi	r20, 0x08	; 8
    af26:	84 2e       	mov	r8, r20
    af28:	91 2c       	mov	r9, r1
    af2a:	c1 2c       	mov	r12, r1
    af2c:	d1 2c       	mov	r13, r1
    af2e:	1c 82       	std	Y+4, r1	; 0x04
    af30:	12 01       	movw	r2, r4
    af32:	8f ef       	ldi	r24, 0xFF	; 255
    af34:	28 1a       	sub	r2, r24
    af36:	38 0a       	sbc	r3, r24
    af38:	44 0c       	add	r4, r4
    af3a:	55 1c       	adc	r5, r5
    af3c:	f5 01       	movw	r30, r10
    af3e:	e4 0d       	add	r30, r4
    af40:	f5 1d       	adc	r31, r5
    af42:	80 81       	ld	r24, Z
    af44:	91 81       	ldd	r25, Z+1	; 0x01
    af46:	00 97       	sbiw	r24, 0x00	; 0
    af48:	09 f4       	brne	.+2      	; 0xaf4c <follow_path+0x29a>
    af4a:	98 c0       	rjmp	.+304    	; 0xb07c <follow_path+0x3ca>
    af4c:	80 32       	cpi	r24, 0x20	; 32
    af4e:	91 05       	cpc	r25, r1
    af50:	31 f0       	breq	.+12     	; 0xaf5e <follow_path+0x2ac>
    af52:	8e 32       	cpi	r24, 0x2E	; 46
    af54:	91 05       	cpc	r25, r1
    af56:	41 f4       	brne	.+16     	; 0xaf68 <follow_path+0x2b6>
    af58:	20 16       	cp	r2, r16
    af5a:	31 06       	cpc	r3, r17
    af5c:	61 f0       	breq	.+24     	; 0xaf76 <follow_path+0x2c4>
    af5e:	9b 81       	ldd	r25, Y+3	; 0x03
    af60:	93 60       	ori	r25, 0x03	; 3
    af62:	9b 83       	std	Y+3, r25	; 0x03
    af64:	21 01       	movw	r4, r2
    af66:	e4 cf       	rjmp	.-56     	; 0xaf30 <follow_path+0x27e>
    af68:	c8 14       	cp	r12, r8
    af6a:	d9 04       	cpc	r13, r9
    af6c:	40 f4       	brcc	.+16     	; 0xaf7e <follow_path+0x2cc>
    af6e:	20 16       	cp	r2, r16
    af70:	31 06       	cpc	r3, r17
    af72:	31 f5       	brne	.+76     	; 0xafc0 <follow_path+0x30e>
    af74:	c5 c0       	rjmp	.+394    	; 0xb100 <follow_path+0x44e>
    af76:	c8 14       	cp	r12, r8
    af78:	d9 04       	cpc	r13, r9
    af7a:	08 f4       	brcc	.+2      	; 0xaf7e <follow_path+0x2cc>
    af7c:	c1 c0       	rjmp	.+386    	; 0xb100 <follow_path+0x44e>
    af7e:	ab e0       	ldi	r26, 0x0B	; 11
    af80:	8a 16       	cp	r8, r26
    af82:	91 04       	cpc	r9, r1
    af84:	39 f4       	brne	.+14     	; 0xaf94 <follow_path+0x2e2>
    af86:	bb 81       	ldd	r27, Y+3	; 0x03
    af88:	b3 60       	ori	r27, 0x03	; 3
    af8a:	bb 83       	std	Y+3, r27	; 0x03
    af8c:	2b e0       	ldi	r18, 0x0B	; 11
    af8e:	82 2e       	mov	r8, r18
    af90:	91 2c       	mov	r9, r1
    af92:	74 c0       	rjmp	.+232    	; 0xb07c <follow_path+0x3ca>
    af94:	20 16       	cp	r2, r16
    af96:	31 06       	cpc	r3, r17
    af98:	39 f0       	breq	.+14     	; 0xafa8 <follow_path+0x2f6>
    af9a:	eb 81       	ldd	r30, Y+3	; 0x03
    af9c:	e3 60       	ori	r30, 0x03	; 3
    af9e:	eb 83       	std	Y+3, r30	; 0x03
    afa0:	02 15       	cp	r16, r2
    afa2:	13 05       	cpc	r17, r3
    afa4:	08 f4       	brcc	.+2      	; 0xafa8 <follow_path+0x2f6>
    afa6:	6a c0       	rjmp	.+212    	; 0xb07c <follow_path+0x3ca>
    afa8:	fc 81       	ldd	r31, Y+4	; 0x04
    afaa:	ff 0f       	add	r31, r31
    afac:	ff 0f       	add	r31, r31
    afae:	fc 83       	std	Y+4, r31	; 0x04
    afb0:	18 01       	movw	r2, r16
    afb2:	8b e0       	ldi	r24, 0x0B	; 11
    afb4:	88 2e       	mov	r8, r24
    afb6:	91 2c       	mov	r9, r1
    afb8:	98 e0       	ldi	r25, 0x08	; 8
    afba:	c9 2e       	mov	r12, r25
    afbc:	d1 2c       	mov	r13, r1
    afbe:	d2 cf       	rjmp	.-92     	; 0xaf64 <follow_path+0x2b2>
    afc0:	80 38       	cpi	r24, 0x80	; 128
    afc2:	91 05       	cpc	r25, r1
    afc4:	78 f1       	brcs	.+94     	; 0xb024 <follow_path+0x372>
    afc6:	2b 81       	ldd	r18, Y+3	; 0x03
    afc8:	22 60       	ori	r18, 0x02	; 2
    afca:	52 2e       	mov	r5, r18
    afcc:	bc 01       	movw	r22, r24
    afce:	80 e0       	ldi	r24, 0x00	; 0
    afd0:	90 e0       	ldi	r25, 0x00	; 0
    afd2:	45 eb       	ldi	r20, 0xB5	; 181
    afd4:	51 e0       	ldi	r21, 0x01	; 1
    afd6:	0e 94 22 68 	call	0xd044	; 0xd044 <ff_uni2oem>
    afda:	87 ff       	sbrs	r24, 7
    afdc:	08 c0       	rjmp	.+16     	; 0xafee <follow_path+0x33c>
    afde:	8f 77       	andi	r24, 0x7F	; 127
    afe0:	99 27       	eor	r25, r25
    afe2:	fc 01       	movw	r30, r24
    afe4:	e5 59       	subi	r30, 0x95	; 149
    afe6:	fb 4f       	sbci	r31, 0xFB	; 251
    afe8:	80 81       	ld	r24, Z
    afea:	90 e0       	ldi	r25, 0x00	; 0
    afec:	18 c0       	rjmp	.+48     	; 0xb01e <follow_path+0x36c>
    afee:	8f 3f       	cpi	r24, 0xFF	; 255
    aff0:	91 05       	cpc	r25, r1
    aff2:	a9 f0       	breq	.+42     	; 0xb01e <follow_path+0x36c>
    aff4:	a0 f0       	brcs	.+40     	; 0xb01e <follow_path+0x36c>
    aff6:	94 01       	movw	r18, r8
    aff8:	21 50       	subi	r18, 0x01	; 1
    affa:	31 09       	sbc	r19, r1
    affc:	c2 16       	cp	r12, r18
    affe:	d3 06       	cpc	r13, r19
    b000:	28 f0       	brcs	.+10     	; 0xb00c <follow_path+0x35a>
    b002:	3b 81       	ldd	r19, Y+3	; 0x03
    b004:	33 60       	ori	r19, 0x03	; 3
    b006:	3b 83       	std	Y+3, r19	; 0x03
    b008:	64 01       	movw	r12, r8
    b00a:	ac cf       	rjmp	.-168    	; 0xaf64 <follow_path+0x2b2>
    b00c:	f7 01       	movw	r30, r14
    b00e:	ec 0d       	add	r30, r12
    b010:	fd 1d       	adc	r31, r13
    b012:	94 8f       	std	Z+28, r25	; 0x1c
    b014:	d6 01       	movw	r26, r12
    b016:	11 96       	adiw	r26, 0x01	; 1
    b018:	6d 01       	movw	r12, r26
    b01a:	5b 82       	std	Y+3, r5	; 0x03
    b01c:	26 c0       	rjmp	.+76     	; 0xb06a <follow_path+0x3b8>
    b01e:	00 97       	sbiw	r24, 0x00	; 0
    b020:	59 f0       	breq	.+22     	; 0xb038 <follow_path+0x386>
    b022:	5b 82       	std	Y+3, r5	; 0x03
    b024:	e0 e3       	ldi	r30, 0x30	; 48
    b026:	f4 e0       	ldi	r31, 0x04	; 4
    b028:	21 91       	ld	r18, Z+
    b02a:	22 23       	and	r18, r18
    b02c:	59 f0       	breq	.+22     	; 0xb044 <follow_path+0x392>
    b02e:	30 e0       	ldi	r19, 0x00	; 0
    b030:	82 17       	cp	r24, r18
    b032:	93 07       	cpc	r25, r19
    b034:	c9 f7       	brne	.-14     	; 0xb028 <follow_path+0x376>
    b036:	5b 80       	ldd	r5, Y+3	; 0x03
    b038:	b5 2d       	mov	r27, r5
    b03a:	b3 60       	ori	r27, 0x03	; 3
    b03c:	bb 83       	std	Y+3, r27	; 0x03
    b03e:	8f e5       	ldi	r24, 0x5F	; 95
    b040:	90 e0       	ldi	r25, 0x00	; 0
    b042:	13 c0       	rjmp	.+38     	; 0xb06a <follow_path+0x3b8>
    b044:	9c 01       	movw	r18, r24
    b046:	21 54       	subi	r18, 0x41	; 65
    b048:	31 09       	sbc	r19, r1
    b04a:	2a 31       	cpi	r18, 0x1A	; 26
    b04c:	31 05       	cpc	r19, r1
    b04e:	18 f4       	brcc	.+6      	; 0xb056 <follow_path+0x3a4>
    b050:	ec 81       	ldd	r30, Y+4	; 0x04
    b052:	e2 60       	ori	r30, 0x02	; 2
    b054:	ec 83       	std	Y+4, r30	; 0x04
    b056:	9c 01       	movw	r18, r24
    b058:	21 56       	subi	r18, 0x61	; 97
    b05a:	31 09       	sbc	r19, r1
    b05c:	2a 31       	cpi	r18, 0x1A	; 26
    b05e:	31 05       	cpc	r19, r1
    b060:	20 f4       	brcc	.+8      	; 0xb06a <follow_path+0x3b8>
    b062:	fc 81       	ldd	r31, Y+4	; 0x04
    b064:	f1 60       	ori	r31, 0x01	; 1
    b066:	fc 83       	std	Y+4, r31	; 0x04
    b068:	80 97       	sbiw	r24, 0x20	; 32
    b06a:	f7 01       	movw	r30, r14
    b06c:	ec 0d       	add	r30, r12
    b06e:	fd 1d       	adc	r31, r13
    b070:	84 8f       	std	Z+28, r24	; 0x1c
    b072:	96 01       	movw	r18, r12
    b074:	2f 5f       	subi	r18, 0xFF	; 255
    b076:	3f 4f       	sbci	r19, 0xFF	; 255
    b078:	69 01       	movw	r12, r18
    b07a:	74 cf       	rjmp	.-280    	; 0xaf64 <follow_path+0x2b2>
    b07c:	f7 01       	movw	r30, r14
    b07e:	84 8d       	ldd	r24, Z+28	; 0x1c
    b080:	85 3e       	cpi	r24, 0xE5	; 229
    b082:	11 f4       	brne	.+4      	; 0xb088 <follow_path+0x3d6>
    b084:	25 e0       	ldi	r18, 0x05	; 5
    b086:	24 8f       	std	Z+28, r18	; 0x1c
    b088:	38 e0       	ldi	r19, 0x08	; 8
    b08a:	83 16       	cp	r8, r19
    b08c:	91 04       	cpc	r9, r1
    b08e:	21 f4       	brne	.+8      	; 0xb098 <follow_path+0x3e6>
    b090:	8c 81       	ldd	r24, Y+4	; 0x04
    b092:	88 0f       	add	r24, r24
    b094:	88 0f       	add	r24, r24
    b096:	8c 83       	std	Y+4, r24	; 0x04
    b098:	8c 81       	ldd	r24, Y+4	; 0x04
    b09a:	8c 70       	andi	r24, 0x0C	; 12
    b09c:	8c 30       	cpi	r24, 0x0C	; 12
    b09e:	21 f0       	breq	.+8      	; 0xb0a8 <follow_path+0x3f6>
    b0a0:	8c 81       	ldd	r24, Y+4	; 0x04
    b0a2:	83 70       	andi	r24, 0x03	; 3
    b0a4:	83 30       	cpi	r24, 0x03	; 3
    b0a6:	19 f4       	brne	.+6      	; 0xb0ae <follow_path+0x3fc>
    b0a8:	9b 81       	ldd	r25, Y+3	; 0x03
    b0aa:	92 60       	ori	r25, 0x02	; 2
    b0ac:	9b 83       	std	Y+3, r25	; 0x03
    b0ae:	ab 81       	ldd	r26, Y+3	; 0x03
    b0b0:	a1 fd       	sbrc	r26, 1
    b0b2:	0b c0       	rjmp	.+22     	; 0xb0ca <follow_path+0x418>
    b0b4:	bc 81       	ldd	r27, Y+4	; 0x04
    b0b6:	b0 ff       	sbrs	r27, 0
    b0b8:	02 c0       	rjmp	.+4      	; 0xb0be <follow_path+0x40c>
    b0ba:	a0 61       	ori	r26, 0x10	; 16
    b0bc:	ab 83       	std	Y+3, r26	; 0x03
    b0be:	ec 81       	ldd	r30, Y+4	; 0x04
    b0c0:	e2 ff       	sbrs	r30, 2
    b0c2:	03 c0       	rjmp	.+6      	; 0xb0ca <follow_path+0x418>
    b0c4:	fb 81       	ldd	r31, Y+3	; 0x03
    b0c6:	f8 60       	ori	r31, 0x08	; 8
    b0c8:	fb 83       	std	Y+3, r31	; 0x03
    b0ca:	2b 81       	ldd	r18, Y+3	; 0x03
    b0cc:	f7 01       	movw	r30, r14
    b0ce:	27 a3       	std	Z+39, r18	; 0x27
    b0d0:	a2 ce       	rjmp	.-700    	; 0xae16 <follow_path+0x164>
    b0d2:	86 e0       	ldi	r24, 0x06	; 6
    b0d4:	90 e0       	ldi	r25, 0x00	; 0
    b0d6:	a1 ce       	rjmp	.-702    	; 0xae1a <follow_path+0x168>
    b0d8:	84 30       	cpi	r24, 0x04	; 4
    b0da:	91 05       	cpc	r25, r1
    b0dc:	b9 f4       	brne	.+46     	; 0xb10c <follow_path+0x45a>
    b0de:	32 2f       	mov	r19, r18
    b0e0:	34 70       	andi	r19, 0x04	; 4
    b0e2:	25 ff       	sbrs	r18, 5
    b0e4:	08 c0       	rjmp	.+16     	; 0xb0f6 <follow_path+0x444>
    b0e6:	33 23       	and	r19, r19
    b0e8:	09 f4       	brne	.+2      	; 0xb0ec <follow_path+0x43a>
    b0ea:	b8 ce       	rjmp	.-656    	; 0xae5c <follow_path+0x1aa>
    b0ec:	80 e8       	ldi	r24, 0x80	; 128
    b0ee:	87 a3       	std	Z+39, r24	; 0x27
    b0f0:	80 e0       	ldi	r24, 0x00	; 0
    b0f2:	90 e0       	ldi	r25, 0x00	; 0
    b0f4:	0b c0       	rjmp	.+22     	; 0xb10c <follow_path+0x45a>
    b0f6:	31 11       	cpse	r19, r1
    b0f8:	09 c0       	rjmp	.+18     	; 0xb10c <follow_path+0x45a>
    b0fa:	85 e0       	ldi	r24, 0x05	; 5
    b0fc:	90 e0       	ldi	r25, 0x00	; 0
    b0fe:	06 c0       	rjmp	.+12     	; 0xb10c <follow_path+0x45a>
    b100:	fb e0       	ldi	r31, 0x0B	; 11
    b102:	8f 16       	cp	r8, r31
    b104:	91 04       	cpc	r9, r1
    b106:	09 f0       	breq	.+2      	; 0xb10a <follow_path+0x458>
    b108:	4f cf       	rjmp	.-354    	; 0xafa8 <follow_path+0x2f6>
    b10a:	3d cf       	rjmp	.-390    	; 0xaf86 <follow_path+0x2d4>
    b10c:	2a 96       	adiw	r28, 0x0a	; 10
    b10e:	e2 e1       	ldi	r30, 0x12	; 18
    b110:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

0000b114 <f_mount>:
    b114:	a6 e0       	ldi	r26, 0x06	; 6
    b116:	b0 e0       	ldi	r27, 0x00	; 0
    b118:	e0 e9       	ldi	r30, 0x90	; 144
    b11a:	f8 e5       	ldi	r31, 0x58	; 88
    b11c:	0c 94 6b e3 	jmp	0x1c6d6	; 0x1c6d6 <__prologue_saves__+0x1e>
    b120:	9c 83       	std	Y+4, r25	; 0x04
    b122:	8b 83       	std	Y+3, r24	; 0x03
    b124:	7e 83       	std	Y+6, r23	; 0x06
    b126:	6d 83       	std	Y+5, r22	; 0x05
    b128:	14 2f       	mov	r17, r20
    b12a:	7a 83       	std	Y+2, r23	; 0x02
    b12c:	69 83       	std	Y+1, r22	; 0x01
    b12e:	ce 01       	movw	r24, r28
    b130:	01 96       	adiw	r24, 0x01	; 1
    b132:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <get_ldnumber>
    b136:	97 fd       	sbrc	r25, 7
    b138:	20 c0       	rjmp	.+64     	; 0xb17a <f_mount+0x66>
    b13a:	88 0f       	add	r24, r24
    b13c:	99 1f       	adc	r25, r25
    b13e:	fc 01       	movw	r30, r24
    b140:	eb 5d       	subi	r30, 0xDB	; 219
    b142:	f7 4e       	sbci	r31, 0xE7	; 231
    b144:	01 90       	ld	r0, Z+
    b146:	f0 81       	ld	r31, Z
    b148:	e0 2d       	mov	r30, r0
    b14a:	30 97       	sbiw	r30, 0x00	; 0
    b14c:	09 f0       	breq	.+2      	; 0xb150 <f_mount+0x3c>
    b14e:	10 82       	st	Z, r1
    b150:	eb 81       	ldd	r30, Y+3	; 0x03
    b152:	fc 81       	ldd	r31, Y+4	; 0x04
    b154:	30 97       	sbiw	r30, 0x00	; 0
    b156:	09 f0       	breq	.+2      	; 0xb15a <f_mount+0x46>
    b158:	10 82       	st	Z, r1
    b15a:	dc 01       	movw	r26, r24
    b15c:	ab 5d       	subi	r26, 0xDB	; 219
    b15e:	b7 4e       	sbci	r27, 0xE7	; 231
    b160:	ed 93       	st	X+, r30
    b162:	fc 93       	st	X, r31
    b164:	11 23       	and	r17, r17
    b166:	61 f0       	breq	.+24     	; 0xb180 <f_mount+0x6c>
    b168:	40 e0       	ldi	r20, 0x00	; 0
    b16a:	be 01       	movw	r22, r28
    b16c:	6d 5f       	subi	r22, 0xFD	; 253
    b16e:	7f 4f       	sbci	r23, 0xFF	; 255
    b170:	ce 01       	movw	r24, r28
    b172:	05 96       	adiw	r24, 0x05	; 5
    b174:	0e 94 0a 4b 	call	0x9614	; 0x9614 <mount_volume>
    b178:	05 c0       	rjmp	.+10     	; 0xb184 <f_mount+0x70>
    b17a:	8b e0       	ldi	r24, 0x0B	; 11
    b17c:	90 e0       	ldi	r25, 0x00	; 0
    b17e:	02 c0       	rjmp	.+4      	; 0xb184 <f_mount+0x70>
    b180:	80 e0       	ldi	r24, 0x00	; 0
    b182:	90 e0       	ldi	r25, 0x00	; 0
    b184:	26 96       	adiw	r28, 0x06	; 6
    b186:	e3 e0       	ldi	r30, 0x03	; 3
    b188:	0c 94 87 e3 	jmp	0x1c70e	; 0x1c70e <__epilogue_restores__+0x1e>

0000b18c <f_open>:
    b18c:	a6 e3       	ldi	r26, 0x36	; 54
    b18e:	b0 e0       	ldi	r27, 0x00	; 0
    b190:	ec ec       	ldi	r30, 0xCC	; 204
    b192:	f8 e5       	ldi	r31, 0x58	; 88
    b194:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
    b198:	7a ab       	std	Y+50, r23	; 0x32
    b19a:	69 ab       	std	Y+49, r22	; 0x31
    b19c:	00 97       	sbiw	r24, 0x00	; 0
    b19e:	09 f4       	brne	.+2      	; 0xb1a2 <f_open+0x16>
    b1a0:	93 c1       	rjmp	.+806    	; 0xb4c8 <f_open+0x33c>
    b1a2:	74 2e       	mov	r7, r20
    b1a4:	7c 01       	movw	r14, r24
    b1a6:	24 2f       	mov	r18, r20
    b1a8:	2f 73       	andi	r18, 0x3F	; 63
    b1aa:	32 2e       	mov	r3, r18
    b1ac:	42 2f       	mov	r20, r18
    b1ae:	be 01       	movw	r22, r28
    b1b0:	61 5d       	subi	r22, 0xD1	; 209
    b1b2:	7f 4f       	sbci	r23, 0xFF	; 255
    b1b4:	ce 01       	movw	r24, r28
    b1b6:	c1 96       	adiw	r24, 0x31	; 49
    b1b8:	0e 94 0a 4b 	call	0x9614	; 0x9614 <mount_volume>
    b1bc:	00 97       	sbiw	r24, 0x00	; 0
    b1be:	09 f0       	breq	.+2      	; 0xb1c2 <f_open+0x36>
    b1c0:	7d c1       	rjmp	.+762    	; 0xb4bc <f_open+0x330>
    b1c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    b1c4:	98 a9       	ldd	r25, Y+48	; 0x30
    b1c6:	9a 83       	std	Y+2, r25	; 0x02
    b1c8:	89 83       	std	Y+1, r24	; 0x01
    b1ca:	80 e0       	ldi	r24, 0x00	; 0
    b1cc:	92 e0       	ldi	r25, 0x02	; 2
    b1ce:	0e 94 1c 68 	call	0xd038	; 0xd038 <ff_memalloc>
    b1d2:	5c 01       	movw	r10, r24
    b1d4:	00 97       	sbiw	r24, 0x00	; 0
    b1d6:	09 f4       	brne	.+2      	; 0xb1da <f_open+0x4e>
    b1d8:	79 c1       	rjmp	.+754    	; 0xb4cc <f_open+0x340>
    b1da:	ef a5       	ldd	r30, Y+47	; 0x2f
    b1dc:	f8 a9       	ldd	r31, Y+48	; 0x30
    b1de:	94 87       	std	Z+12, r25	; 0x0c
    b1e0:	83 87       	std	Z+11, r24	; 0x0b
    b1e2:	69 a9       	ldd	r22, Y+49	; 0x31
    b1e4:	7a a9       	ldd	r23, Y+50	; 0x32
    b1e6:	ce 01       	movw	r24, r28
    b1e8:	01 96       	adiw	r24, 0x01	; 1
    b1ea:	63 dd       	rcall	.-1338   	; 0xacb2 <follow_path>
    b1ec:	8c 01       	movw	r16, r24
    b1ee:	89 2b       	or	r24, r25
    b1f0:	29 f4       	brne	.+10     	; 0xb1fc <f_open+0x70>
    b1f2:	88 a5       	ldd	r24, Y+40	; 0x28
    b1f4:	87 ff       	sbrs	r24, 7
    b1f6:	02 c0       	rjmp	.+4      	; 0xb1fc <f_open+0x70>
    b1f8:	06 e0       	ldi	r16, 0x06	; 6
    b1fa:	10 e0       	ldi	r17, 0x00	; 0
    b1fc:	87 2d       	mov	r24, r7
    b1fe:	8c 71       	andi	r24, 0x1C	; 28
    b200:	09 f4       	brne	.+2      	; 0xb204 <f_open+0x78>
    b202:	75 c0       	rjmp	.+234    	; 0xb2ee <f_open+0x162>
    b204:	01 15       	cp	r16, r1
    b206:	11 05       	cpc	r17, r1
    b208:	79 f0       	breq	.+30     	; 0xb228 <f_open+0x9c>
    b20a:	04 30       	cpi	r16, 0x04	; 4
    b20c:	11 05       	cpc	r17, r1
    b20e:	09 f0       	breq	.+2      	; 0xb212 <f_open+0x86>
    b210:	6d c1       	rjmp	.+730    	; 0xb4ec <f_open+0x360>
    b212:	ce 01       	movw	r24, r28
    b214:	01 96       	adiw	r24, 0x01	; 1
    b216:	bf db       	rcall	.-2178   	; 0xa996 <dir_register>
    b218:	8c 01       	movw	r16, r24
    b21a:	89 2b       	or	r24, r25
    b21c:	09 f0       	breq	.+2      	; 0xb220 <f_open+0x94>
    b21e:	66 c1       	rjmp	.+716    	; 0xb4ec <f_open+0x360>
    b220:	33 2d       	mov	r19, r3
    b222:	38 60       	ori	r19, 0x08	; 8
    b224:	33 2e       	mov	r3, r19
    b226:	06 c0       	rjmp	.+12     	; 0xb234 <f_open+0xa8>
    b228:	8d 81       	ldd	r24, Y+5	; 0x05
    b22a:	81 71       	andi	r24, 0x11	; 17
    b22c:	09 f0       	breq	.+2      	; 0xb230 <f_open+0xa4>
    b22e:	5c c1       	rjmp	.+696    	; 0xb4e8 <f_open+0x35c>
    b230:	72 fc       	sbrc	r7, 2
    b232:	51 c1       	rjmp	.+674    	; 0xb4d6 <f_open+0x34a>
    b234:	33 fe       	sbrs	r3, 3
    b236:	6b c0       	rjmp	.+214    	; 0xb30e <f_open+0x182>
    b238:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b23a:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b23c:	ef a5       	ldd	r30, Y+47	; 0x2f
    b23e:	f8 a9       	ldd	r31, Y+48	; 0x30
    b240:	b8 01       	movw	r22, r16
    b242:	80 81       	ld	r24, Z
    b244:	0e 94 00 49 	call	0x9200	; 0x9200 <ld_clust.isra.4>
    b248:	2b 01       	movw	r4, r22
    b24a:	3c 01       	movw	r6, r24
    b24c:	0e 94 8d 6f 	call	0xdf1a	; 0xdf1a <get_fattime>
    b250:	ab 01       	movw	r20, r22
    b252:	bc 01       	movw	r22, r24
    b254:	c8 01       	movw	r24, r16
    b256:	0e 96       	adiw	r24, 0x0e	; 14
    b258:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <st_dword>
    b25c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b25e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b260:	80 e2       	ldi	r24, 0x20	; 32
    b262:	83 87       	std	Z+11, r24	; 0x0b
    b264:	af a5       	ldd	r26, Y+47	; 0x2f
    b266:	b8 a9       	ldd	r27, Y+48	; 0x30
    b268:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b26a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b26c:	12 8e       	std	Z+26, r1	; 0x1a
    b26e:	13 8e       	std	Z+27, r1	; 0x1b
    b270:	8c 91       	ld	r24, X
    b272:	83 30       	cpi	r24, 0x03	; 3
    b274:	11 f4       	brne	.+4      	; 0xb27a <f_open+0xee>
    b276:	14 8a       	std	Z+20, r1	; 0x14
    b278:	15 8a       	std	Z+21, r1	; 0x15
    b27a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b27c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b27e:	14 8e       	std	Z+28, r1	; 0x1c
    b280:	15 8e       	std	Z+29, r1	; 0x1d
    b282:	16 8e       	std	Z+30, r1	; 0x1e
    b284:	17 8e       	std	Z+31, r1	; 0x1f
    b286:	81 e0       	ldi	r24, 0x01	; 1
    b288:	fd 01       	movw	r30, r26
    b28a:	83 83       	std	Z+3, r24	; 0x03
    b28c:	41 14       	cp	r4, r1
    b28e:	51 04       	cpc	r5, r1
    b290:	61 04       	cpc	r6, r1
    b292:	71 04       	cpc	r7, r1
    b294:	c9 f1       	breq	.+114    	; 0xb308 <f_open+0x17c>
    b296:	21 a9       	ldd	r18, Z+49	; 0x31
    b298:	32 a9       	ldd	r19, Z+50	; 0x32
    b29a:	43 a9       	ldd	r20, Z+51	; 0x33
    b29c:	54 a9       	ldd	r21, Z+52	; 0x34
    b29e:	2b ab       	std	Y+51, r18	; 0x33
    b2a0:	3c ab       	std	Y+52, r19	; 0x34
    b2a2:	4d ab       	std	Y+53, r20	; 0x35
    b2a4:	5e ab       	std	Y+54, r21	; 0x36
    b2a6:	00 e0       	ldi	r16, 0x00	; 0
    b2a8:	10 e0       	ldi	r17, 0x00	; 0
    b2aa:	98 01       	movw	r18, r16
    b2ac:	b3 01       	movw	r22, r6
    b2ae:	a2 01       	movw	r20, r4
    b2b0:	ce 01       	movw	r24, r28
    b2b2:	01 96       	adiw	r24, 0x01	; 1
    b2b4:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <remove_chain>
    b2b8:	8c 01       	movw	r16, r24
    b2ba:	89 2b       	or	r24, r25
    b2bc:	09 f0       	breq	.+2      	; 0xb2c0 <f_open+0x134>
    b2be:	16 c1       	rjmp	.+556    	; 0xb4ec <f_open+0x360>
    b2c0:	4b a9       	ldd	r20, Y+51	; 0x33
    b2c2:	5c a9       	ldd	r21, Y+52	; 0x34
    b2c4:	6d a9       	ldd	r22, Y+53	; 0x35
    b2c6:	7e a9       	ldd	r23, Y+54	; 0x36
    b2c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    b2ca:	98 a9       	ldd	r25, Y+48	; 0x30
    b2cc:	0e 94 8f 4a 	call	0x951e	; 0x951e <move_window>
    b2d0:	8c 01       	movw	r16, r24
    b2d2:	ef a5       	ldd	r30, Y+47	; 0x2f
    b2d4:	f8 a9       	ldd	r31, Y+48	; 0x30
    b2d6:	21 e0       	ldi	r18, 0x01	; 1
    b2d8:	42 1a       	sub	r4, r18
    b2da:	51 08       	sbc	r5, r1
    b2dc:	61 08       	sbc	r6, r1
    b2de:	71 08       	sbc	r7, r1
    b2e0:	45 86       	std	Z+13, r4	; 0x0d
    b2e2:	56 86       	std	Z+14, r5	; 0x0e
    b2e4:	67 86       	std	Z+15, r6	; 0x0f
    b2e6:	70 8a       	std	Z+16, r7	; 0x10
    b2e8:	89 2b       	or	r24, r25
    b2ea:	61 f0       	breq	.+24     	; 0xb304 <f_open+0x178>
    b2ec:	ff c0       	rjmp	.+510    	; 0xb4ec <f_open+0x360>
    b2ee:	01 15       	cp	r16, r1
    b2f0:	11 05       	cpc	r17, r1
    b2f2:	09 f0       	breq	.+2      	; 0xb2f6 <f_open+0x16a>
    b2f4:	fb c0       	rjmp	.+502    	; 0xb4ec <f_open+0x360>
    b2f6:	8d 81       	ldd	r24, Y+5	; 0x05
    b2f8:	84 fd       	sbrc	r24, 4
    b2fa:	f3 c0       	rjmp	.+486    	; 0xb4e2 <f_open+0x356>
    b2fc:	71 fe       	sbrs	r7, 1
    b2fe:	02 c0       	rjmp	.+4      	; 0xb304 <f_open+0x178>
    b300:	80 fd       	sbrc	r24, 0
    b302:	f2 c0       	rjmp	.+484    	; 0xb4e8 <f_open+0x35c>
    b304:	33 fe       	sbrs	r3, 3
    b306:	03 c0       	rjmp	.+6      	; 0xb30e <f_open+0x182>
    b308:	33 2d       	mov	r19, r3
    b30a:	30 64       	ori	r19, 0x40	; 64
    b30c:	33 2e       	mov	r3, r19
    b30e:	0f a5       	ldd	r16, Y+47	; 0x2f
    b310:	18 a9       	ldd	r17, Y+48	; 0x30
    b312:	f8 01       	movw	r30, r16
    b314:	81 a9       	ldd	r24, Z+49	; 0x31
    b316:	92 a9       	ldd	r25, Z+50	; 0x32
    b318:	a3 a9       	ldd	r26, Z+51	; 0x33
    b31a:	b4 a9       	ldd	r27, Z+52	; 0x34
    b31c:	f7 01       	movw	r30, r14
    b31e:	84 8f       	std	Z+28, r24	; 0x1c
    b320:	95 8f       	std	Z+29, r25	; 0x1d
    b322:	a6 8f       	std	Z+30, r26	; 0x1e
    b324:	b7 8f       	std	Z+31, r27	; 0x1f
    b326:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b328:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b32a:	71 a2       	std	Z+33, r7	; 0x21
    b32c:	60 a2       	std	Z+32, r6	; 0x20
    b32e:	b3 01       	movw	r22, r6
    b330:	f8 01       	movw	r30, r16
    b332:	80 81       	ld	r24, Z
    b334:	0e 94 00 49 	call	0x9200	; 0x9200 <ld_clust.isra.4>
    b338:	f7 01       	movw	r30, r14
    b33a:	66 83       	std	Z+6, r22	; 0x06
    b33c:	77 83       	std	Z+7, r23	; 0x07
    b33e:	80 87       	std	Z+8, r24	; 0x08
    b340:	91 87       	std	Z+9, r25	; 0x09
    b342:	c3 01       	movw	r24, r6
    b344:	4c 96       	adiw	r24, 0x1c	; 28
    b346:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <ld_dword>
    b34a:	f7 01       	movw	r30, r14
    b34c:	62 87       	std	Z+10, r22	; 0x0a
    b34e:	73 87       	std	Z+11, r23	; 0x0b
    b350:	84 87       	std	Z+12, r24	; 0x0c
    b352:	95 87       	std	Z+13, r25	; 0x0d
    b354:	13 a2       	std	Z+35, r1	; 0x23
    b356:	12 a2       	std	Z+34, r1	; 0x22
    b358:	11 83       	std	Z+1, r17	; 0x01
    b35a:	00 83       	st	Z, r16
    b35c:	f8 01       	movw	r30, r16
    b35e:	85 81       	ldd	r24, Z+5	; 0x05
    b360:	96 81       	ldd	r25, Z+6	; 0x06
    b362:	f7 01       	movw	r30, r14
    b364:	93 83       	std	Z+3, r25	; 0x03
    b366:	82 83       	std	Z+2, r24	; 0x02
    b368:	36 86       	std	Z+14, r3	; 0x0e
    b36a:	17 86       	std	Z+15, r1	; 0x0f
    b36c:	10 8e       	std	Z+24, r1	; 0x18
    b36e:	11 8e       	std	Z+25, r1	; 0x19
    b370:	12 8e       	std	Z+26, r1	; 0x1a
    b372:	13 8e       	std	Z+27, r1	; 0x1b
    b374:	10 8a       	std	Z+16, r1	; 0x10
    b376:	11 8a       	std	Z+17, r1	; 0x11
    b378:	12 8a       	std	Z+18, r1	; 0x12
    b37a:	13 8a       	std	Z+19, r1	; 0x13
    b37c:	67 01       	movw	r12, r14
    b37e:	f4 e2       	ldi	r31, 0x24	; 36
    b380:	cf 0e       	add	r12, r31
    b382:	d1 1c       	adc	r13, r1
    b384:	40 e0       	ldi	r20, 0x00	; 0
    b386:	52 e0       	ldi	r21, 0x02	; 2
    b388:	60 e0       	ldi	r22, 0x00	; 0
    b38a:	70 e0       	ldi	r23, 0x00	; 0
    b38c:	c6 01       	movw	r24, r12
    b38e:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <mem_set>
    b392:	35 fc       	sbrc	r3, 5
    b394:	03 c0       	rjmp	.+6      	; 0xb39c <f_open+0x210>
    b396:	00 e0       	ldi	r16, 0x00	; 0
    b398:	10 e0       	ldi	r17, 0x00	; 0
    b39a:	89 c0       	rjmp	.+274    	; 0xb4ae <f_open+0x322>
    b39c:	f7 01       	movw	r30, r14
    b39e:	62 84       	ldd	r6, Z+10	; 0x0a
    b3a0:	73 84       	ldd	r7, Z+11	; 0x0b
    b3a2:	84 84       	ldd	r8, Z+12	; 0x0c
    b3a4:	95 84       	ldd	r9, Z+13	; 0x0d
    b3a6:	61 14       	cp	r6, r1
    b3a8:	71 04       	cpc	r7, r1
    b3aa:	81 04       	cpc	r8, r1
    b3ac:	91 04       	cpc	r9, r1
    b3ae:	99 f3       	breq	.-26     	; 0xb396 <f_open+0x20a>
    b3b0:	60 8a       	std	Z+16, r6	; 0x10
    b3b2:	71 8a       	std	Z+17, r7	; 0x11
    b3b4:	82 8a       	std	Z+18, r8	; 0x12
    b3b6:	93 8a       	std	Z+19, r9	; 0x13
    b3b8:	ef a5       	ldd	r30, Y+47	; 0x2f
    b3ba:	f8 a9       	ldd	r31, Y+48	; 0x30
    b3bc:	21 84       	ldd	r2, Z+9	; 0x09
    b3be:	32 84       	ldd	r3, Z+10	; 0x0a
    b3c0:	c1 01       	movw	r24, r2
    b3c2:	a0 e0       	ldi	r26, 0x00	; 0
    b3c4:	b0 e0       	ldi	r27, 0x00	; 0
    b3c6:	1c 01       	movw	r2, r24
    b3c8:	2d 01       	movw	r4, r26
    b3ca:	59 e0       	ldi	r21, 0x09	; 9
    b3cc:	22 0c       	add	r2, r2
    b3ce:	33 1c       	adc	r3, r3
    b3d0:	44 1c       	adc	r4, r4
    b3d2:	55 1c       	adc	r5, r5
    b3d4:	5a 95       	dec	r21
    b3d6:	d1 f7       	brne	.-12     	; 0xb3cc <f_open+0x240>
    b3d8:	f7 01       	movw	r30, r14
    b3da:	46 81       	ldd	r20, Z+6	; 0x06
    b3dc:	57 81       	ldd	r21, Z+7	; 0x07
    b3de:	60 85       	ldd	r22, Z+8	; 0x08
    b3e0:	71 85       	ldd	r23, Z+9	; 0x09
    b3e2:	26 14       	cp	r2, r6
    b3e4:	37 04       	cpc	r3, r7
    b3e6:	48 04       	cpc	r4, r8
    b3e8:	59 04       	cpc	r5, r9
    b3ea:	f0 f4       	brcc	.+60     	; 0xb428 <f_open+0x29c>
    b3ec:	f7 01       	movw	r30, r14
    b3ee:	80 81       	ld	r24, Z
    b3f0:	91 81       	ldd	r25, Z+1	; 0x01
    b3f2:	0e 94 5f 4e 	call	0x9cbe	; 0x9cbe <get_fat.isra.10>
    b3f6:	ab 01       	movw	r20, r22
    b3f8:	bc 01       	movw	r22, r24
    b3fa:	d4 01       	movw	r26, r8
    b3fc:	c3 01       	movw	r24, r6
    b3fe:	82 19       	sub	r24, r2
    b400:	93 09       	sbc	r25, r3
    b402:	a4 09       	sbc	r26, r4
    b404:	b5 09       	sbc	r27, r5
    b406:	3c 01       	movw	r6, r24
    b408:	4d 01       	movw	r8, r26
    b40a:	42 30       	cpi	r20, 0x02	; 2
    b40c:	51 05       	cpc	r21, r1
    b40e:	61 05       	cpc	r22, r1
    b410:	71 05       	cpc	r23, r1
    b412:	08 f4       	brcc	.+2      	; 0xb416 <f_open+0x28a>
    b414:	63 c0       	rjmp	.+198    	; 0xb4dc <f_open+0x350>
    b416:	4f 3f       	cpi	r20, 0xFF	; 255
    b418:	ff ef       	ldi	r31, 0xFF	; 255
    b41a:	5f 07       	cpc	r21, r31
    b41c:	6f 07       	cpc	r22, r31
    b41e:	7f 07       	cpc	r23, r31
    b420:	01 f7       	brne	.-64     	; 0xb3e2 <f_open+0x256>
    b422:	01 e0       	ldi	r16, 0x01	; 1
    b424:	10 e0       	ldi	r17, 0x00	; 0
    b426:	02 c0       	rjmp	.+4      	; 0xb42c <f_open+0x2a0>
    b428:	00 e0       	ldi	r16, 0x00	; 0
    b42a:	10 e0       	ldi	r17, 0x00	; 0
    b42c:	f7 01       	movw	r30, r14
    b42e:	44 8b       	std	Z+20, r20	; 0x14
    b430:	55 8b       	std	Z+21, r21	; 0x15
    b432:	66 8b       	std	Z+22, r22	; 0x16
    b434:	77 8b       	std	Z+23, r23	; 0x17
    b436:	01 15       	cp	r16, r1
    b438:	11 05       	cpc	r17, r1
    b43a:	c9 f5       	brne	.+114    	; 0xb4ae <f_open+0x322>
    b43c:	d4 01       	movw	r26, r8
    b43e:	c3 01       	movw	r24, r6
    b440:	91 70       	andi	r25, 0x01	; 1
    b442:	aa 27       	eor	r26, r26
    b444:	bb 27       	eor	r27, r27
    b446:	89 2b       	or	r24, r25
    b448:	8a 2b       	or	r24, r26
    b44a:	8b 2b       	or	r24, r27
    b44c:	09 f4       	brne	.+2      	; 0xb450 <f_open+0x2c4>
    b44e:	a3 cf       	rjmp	.-186    	; 0xb396 <f_open+0x20a>
    b450:	4f a4       	ldd	r4, Y+47	; 0x2f
    b452:	58 a8       	ldd	r5, Y+48	; 0x30
    b454:	c2 01       	movw	r24, r4
    b456:	0e 94 6d 46 	call	0x8cda	; 0x8cda <clst2sect>
    b45a:	61 15       	cp	r22, r1
    b45c:	71 05       	cpc	r23, r1
    b45e:	81 05       	cpc	r24, r1
    b460:	91 05       	cpc	r25, r1
    b462:	19 f1       	breq	.+70     	; 0xb4aa <f_open+0x31e>
    b464:	94 01       	movw	r18, r8
    b466:	83 01       	movw	r16, r6
    b468:	49 e0       	ldi	r20, 0x09	; 9
    b46a:	36 95       	lsr	r19
    b46c:	27 95       	ror	r18
    b46e:	17 95       	ror	r17
    b470:	07 95       	ror	r16
    b472:	4a 95       	dec	r20
    b474:	d1 f7       	brne	.-12     	; 0xb46a <f_open+0x2de>
    b476:	a9 01       	movw	r20, r18
    b478:	98 01       	movw	r18, r16
    b47a:	26 0f       	add	r18, r22
    b47c:	37 1f       	adc	r19, r23
    b47e:	48 1f       	adc	r20, r24
    b480:	59 1f       	adc	r21, r25
    b482:	f7 01       	movw	r30, r14
    b484:	20 8f       	std	Z+24, r18	; 0x18
    b486:	31 8f       	std	Z+25, r19	; 0x19
    b488:	42 8f       	std	Z+26, r20	; 0x1a
    b48a:	53 8f       	std	Z+27, r21	; 0x1b
    b48c:	01 e0       	ldi	r16, 0x01	; 1
    b48e:	10 e0       	ldi	r17, 0x00	; 0
    b490:	b6 01       	movw	r22, r12
    b492:	f2 01       	movw	r30, r4
    b494:	81 81       	ldd	r24, Z+1	; 0x01
    b496:	0e 94 d8 68 	call	0xd1b0	; 0xd1b0 <disk_read>
    b49a:	31 e0       	ldi	r19, 0x01	; 1
    b49c:	20 e0       	ldi	r18, 0x00	; 0
    b49e:	89 2b       	or	r24, r25
    b4a0:	09 f4       	brne	.+2      	; 0xb4a4 <f_open+0x318>
    b4a2:	30 e0       	ldi	r19, 0x00	; 0
    b4a4:	03 2f       	mov	r16, r19
    b4a6:	12 2f       	mov	r17, r18
    b4a8:	02 c0       	rjmp	.+4      	; 0xb4ae <f_open+0x322>
    b4aa:	02 e0       	ldi	r16, 0x02	; 2
    b4ac:	10 e0       	ldi	r17, 0x00	; 0
    b4ae:	c5 01       	movw	r24, r10
    b4b0:	0e 94 1f 68 	call	0xd03e	; 0xd03e <ff_memfree>
    b4b4:	01 15       	cp	r16, r1
    b4b6:	11 05       	cpc	r17, r1
    b4b8:	59 f0       	breq	.+22     	; 0xb4d0 <f_open+0x344>
    b4ba:	01 c0       	rjmp	.+2      	; 0xb4be <f_open+0x332>
    b4bc:	8c 01       	movw	r16, r24
    b4be:	f7 01       	movw	r30, r14
    b4c0:	11 82       	std	Z+1, r1	; 0x01
    b4c2:	10 82       	st	Z, r1
    b4c4:	c8 01       	movw	r24, r16
    b4c6:	16 c0       	rjmp	.+44     	; 0xb4f4 <f_open+0x368>
    b4c8:	89 e0       	ldi	r24, 0x09	; 9
    b4ca:	03 c0       	rjmp	.+6      	; 0xb4d2 <f_open+0x346>
    b4cc:	81 e1       	ldi	r24, 0x11	; 17
    b4ce:	01 c0       	rjmp	.+2      	; 0xb4d2 <f_open+0x346>
    b4d0:	80 e0       	ldi	r24, 0x00	; 0
    b4d2:	90 e0       	ldi	r25, 0x00	; 0
    b4d4:	0f c0       	rjmp	.+30     	; 0xb4f4 <f_open+0x368>
    b4d6:	08 e0       	ldi	r16, 0x08	; 8
    b4d8:	10 e0       	ldi	r17, 0x00	; 0
    b4da:	08 c0       	rjmp	.+16     	; 0xb4ec <f_open+0x360>
    b4dc:	02 e0       	ldi	r16, 0x02	; 2
    b4de:	10 e0       	ldi	r17, 0x00	; 0
    b4e0:	a5 cf       	rjmp	.-182    	; 0xb42c <f_open+0x2a0>
    b4e2:	04 e0       	ldi	r16, 0x04	; 4
    b4e4:	10 e0       	ldi	r17, 0x00	; 0
    b4e6:	02 c0       	rjmp	.+4      	; 0xb4ec <f_open+0x360>
    b4e8:	07 e0       	ldi	r16, 0x07	; 7
    b4ea:	10 e0       	ldi	r17, 0x00	; 0
    b4ec:	c5 01       	movw	r24, r10
    b4ee:	0e 94 1f 68 	call	0xd03e	; 0xd03e <ff_memfree>
    b4f2:	e5 cf       	rjmp	.-54     	; 0xb4be <f_open+0x332>
    b4f4:	e6 96       	adiw	r28, 0x36	; 54
    b4f6:	e2 e1       	ldi	r30, 0x12	; 18
    b4f8:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

0000b4fc <f_read>:
    b4fc:	a6 e0       	ldi	r26, 0x06	; 6
    b4fe:	b0 e0       	ldi	r27, 0x00	; 0
    b500:	e4 e8       	ldi	r30, 0x84	; 132
    b502:	fa e5       	ldi	r31, 0x5A	; 90
    b504:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
    b508:	7c 01       	movw	r14, r24
    b50a:	4b 01       	movw	r8, r22
    b50c:	5a 01       	movw	r10, r20
    b50e:	3e 83       	std	Y+6, r19	; 0x06
    b510:	2d 83       	std	Y+5, r18	; 0x05
    b512:	f9 01       	movw	r30, r18
    b514:	11 82       	std	Z+1, r1	; 0x01
    b516:	10 82       	st	Z, r1
    b518:	be 01       	movw	r22, r28
    b51a:	6f 5f       	subi	r22, 0xFF	; 255
    b51c:	7f 4f       	sbci	r23, 0xFF	; 255
    b51e:	0e 94 0c 47 	call	0x8e18	; 0x8e18 <validate>
    b522:	00 97       	sbiw	r24, 0x00	; 0
    b524:	09 f0       	breq	.+2      	; 0xb528 <f_read+0x2c>
    b526:	31 c1       	rjmp	.+610    	; 0xb78a <f_read+0x28e>
    b528:	f7 01       	movw	r30, r14
    b52a:	87 85       	ldd	r24, Z+15	; 0x0f
    b52c:	90 e0       	ldi	r25, 0x00	; 0
    b52e:	00 97       	sbiw	r24, 0x00	; 0
    b530:	09 f0       	breq	.+2      	; 0xb534 <f_read+0x38>
    b532:	2b c1       	rjmp	.+598    	; 0xb78a <f_read+0x28e>
    b534:	86 85       	ldd	r24, Z+14	; 0x0e
    b536:	80 ff       	sbrs	r24, 0
    b538:	26 c1       	rjmp	.+588    	; 0xb786 <f_read+0x28a>
    b53a:	82 85       	ldd	r24, Z+10	; 0x0a
    b53c:	93 85       	ldd	r25, Z+11	; 0x0b
    b53e:	a4 85       	ldd	r26, Z+12	; 0x0c
    b540:	b5 85       	ldd	r27, Z+13	; 0x0d
    b542:	40 89       	ldd	r20, Z+16	; 0x10
    b544:	51 89       	ldd	r21, Z+17	; 0x11
    b546:	62 89       	ldd	r22, Z+18	; 0x12
    b548:	73 89       	ldd	r23, Z+19	; 0x13
    b54a:	84 1b       	sub	r24, r20
    b54c:	95 0b       	sbc	r25, r21
    b54e:	a6 0b       	sbc	r26, r22
    b550:	b7 0b       	sbc	r27, r23
    b552:	a5 01       	movw	r20, r10
    b554:	60 e0       	ldi	r22, 0x00	; 0
    b556:	70 e0       	ldi	r23, 0x00	; 0
    b558:	84 17       	cp	r24, r20
    b55a:	95 07       	cpc	r25, r21
    b55c:	a6 07       	cpc	r26, r22
    b55e:	b7 07       	cpc	r27, r23
    b560:	08 f4       	brcc	.+2      	; 0xb564 <f_read+0x68>
    b562:	5c 01       	movw	r10, r24
    b564:	17 01       	movw	r2, r14
    b566:	f4 e2       	ldi	r31, 0x24	; 36
    b568:	2f 0e       	add	r2, r31
    b56a:	31 1c       	adc	r3, r1
    b56c:	a1 14       	cp	r10, r1
    b56e:	b1 04       	cpc	r11, r1
    b570:	09 f4       	brne	.+2      	; 0xb574 <f_read+0x78>
    b572:	07 c1       	rjmp	.+526    	; 0xb782 <f_read+0x286>
    b574:	f7 01       	movw	r30, r14
    b576:	40 89       	ldd	r20, Z+16	; 0x10
    b578:	51 89       	ldd	r21, Z+17	; 0x11
    b57a:	62 89       	ldd	r22, Z+18	; 0x12
    b57c:	73 89       	ldd	r23, Z+19	; 0x13
    b57e:	db 01       	movw	r26, r22
    b580:	ca 01       	movw	r24, r20
    b582:	91 70       	andi	r25, 0x01	; 1
    b584:	aa 27       	eor	r26, r26
    b586:	bb 27       	eor	r27, r27
    b588:	89 2b       	or	r24, r25
    b58a:	8a 2b       	or	r24, r26
    b58c:	8b 2b       	or	r24, r27
    b58e:	09 f0       	breq	.+2      	; 0xb592 <f_read+0x96>
    b590:	cb c0       	rjmp	.+406    	; 0xb728 <f_read+0x22c>
    b592:	e9 81       	ldd	r30, Y+1	; 0x01
    b594:	fa 81       	ldd	r31, Y+2	; 0x02
    b596:	01 85       	ldd	r16, Z+9	; 0x09
    b598:	12 85       	ldd	r17, Z+10	; 0x0a
    b59a:	01 50       	subi	r16, 0x01	; 1
    b59c:	11 09       	sbc	r17, r1
    b59e:	db 01       	movw	r26, r22
    b5a0:	ca 01       	movw	r24, r20
    b5a2:	e9 e0       	ldi	r30, 0x09	; 9
    b5a4:	b6 95       	lsr	r27
    b5a6:	a7 95       	ror	r26
    b5a8:	97 95       	ror	r25
    b5aa:	87 95       	ror	r24
    b5ac:	ea 95       	dec	r30
    b5ae:	d1 f7       	brne	.-12     	; 0xb5a4 <f_read+0xa8>
    b5b0:	08 23       	and	r16, r24
    b5b2:	19 23       	and	r17, r25
    b5b4:	01 15       	cp	r16, r1
    b5b6:	11 05       	cpc	r17, r1
    b5b8:	91 f5       	brne	.+100    	; 0xb61e <f_read+0x122>
    b5ba:	f7 01       	movw	r30, r14
    b5bc:	41 15       	cp	r20, r1
    b5be:	51 05       	cpc	r21, r1
    b5c0:	61 05       	cpc	r22, r1
    b5c2:	71 05       	cpc	r23, r1
    b5c4:	29 f4       	brne	.+10     	; 0xb5d0 <f_read+0xd4>
    b5c6:	66 81       	ldd	r22, Z+6	; 0x06
    b5c8:	77 81       	ldd	r23, Z+7	; 0x07
    b5ca:	80 85       	ldd	r24, Z+8	; 0x08
    b5cc:	91 85       	ldd	r25, Z+9	; 0x09
    b5ce:	11 c0       	rjmp	.+34     	; 0xb5f2 <f_read+0xf6>
    b5d0:	82 a1       	ldd	r24, Z+34	; 0x22
    b5d2:	93 a1       	ldd	r25, Z+35	; 0x23
    b5d4:	89 2b       	or	r24, r25
    b5d6:	21 f0       	breq	.+8      	; 0xb5e0 <f_read+0xe4>
    b5d8:	c7 01       	movw	r24, r14
    b5da:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <clmt_clust>
    b5de:	09 c0       	rjmp	.+18     	; 0xb5f2 <f_read+0xf6>
    b5e0:	f7 01       	movw	r30, r14
    b5e2:	44 89       	ldd	r20, Z+20	; 0x14
    b5e4:	55 89       	ldd	r21, Z+21	; 0x15
    b5e6:	66 89       	ldd	r22, Z+22	; 0x16
    b5e8:	77 89       	ldd	r23, Z+23	; 0x17
    b5ea:	80 81       	ld	r24, Z
    b5ec:	91 81       	ldd	r25, Z+1	; 0x01
    b5ee:	0e 94 5f 4e 	call	0x9cbe	; 0x9cbe <get_fat.isra.10>
    b5f2:	62 30       	cpi	r22, 0x02	; 2
    b5f4:	71 05       	cpc	r23, r1
    b5f6:	81 05       	cpc	r24, r1
    b5f8:	91 05       	cpc	r25, r1
    b5fa:	10 f4       	brcc	.+4      	; 0xb600 <f_read+0x104>
    b5fc:	82 e0       	ldi	r24, 0x02	; 2
    b5fe:	07 c0       	rjmp	.+14     	; 0xb60e <f_read+0x112>
    b600:	6f 3f       	cpi	r22, 0xFF	; 255
    b602:	ff ef       	ldi	r31, 0xFF	; 255
    b604:	7f 07       	cpc	r23, r31
    b606:	8f 07       	cpc	r24, r31
    b608:	9f 07       	cpc	r25, r31
    b60a:	21 f4       	brne	.+8      	; 0xb614 <f_read+0x118>
    b60c:	81 e0       	ldi	r24, 0x01	; 1
    b60e:	f7 01       	movw	r30, r14
    b610:	87 87       	std	Z+15, r24	; 0x0f
    b612:	ba c0       	rjmp	.+372    	; 0xb788 <f_read+0x28c>
    b614:	f7 01       	movw	r30, r14
    b616:	64 8b       	std	Z+20, r22	; 0x14
    b618:	75 8b       	std	Z+21, r23	; 0x15
    b61a:	86 8b       	std	Z+22, r24	; 0x16
    b61c:	97 8b       	std	Z+23, r25	; 0x17
    b61e:	89 81       	ldd	r24, Y+1	; 0x01
    b620:	9a 81       	ldd	r25, Y+2	; 0x02
    b622:	9c 83       	std	Y+4, r25	; 0x04
    b624:	8b 83       	std	Y+3, r24	; 0x03
    b626:	f7 01       	movw	r30, r14
    b628:	44 89       	ldd	r20, Z+20	; 0x14
    b62a:	55 89       	ldd	r21, Z+21	; 0x15
    b62c:	66 89       	ldd	r22, Z+22	; 0x16
    b62e:	77 89       	ldd	r23, Z+23	; 0x17
    b630:	0e 94 6d 46 	call	0x8cda	; 0x8cda <clst2sect>
    b634:	61 15       	cp	r22, r1
    b636:	71 05       	cpc	r23, r1
    b638:	81 05       	cpc	r24, r1
    b63a:	91 05       	cpc	r25, r1
    b63c:	f9 f2       	breq	.-66     	; 0xb5fc <f_read+0x100>
    b63e:	2b 01       	movw	r4, r22
    b640:	3c 01       	movw	r6, r24
    b642:	40 0e       	add	r4, r16
    b644:	51 1e       	adc	r5, r17
    b646:	61 1c       	adc	r6, r1
    b648:	71 1c       	adc	r7, r1
    b64a:	65 01       	movw	r12, r10
    b64c:	cd 2c       	mov	r12, r13
    b64e:	dd 24       	eor	r13, r13
    b650:	c6 94       	lsr	r12
    b652:	c1 14       	cp	r12, r1
    b654:	d1 04       	cpc	r13, r1
    b656:	d1 f1       	breq	.+116    	; 0xb6cc <f_read+0x1d0>
    b658:	eb 81       	ldd	r30, Y+3	; 0x03
    b65a:	fc 81       	ldd	r31, Y+4	; 0x04
    b65c:	81 85       	ldd	r24, Z+9	; 0x09
    b65e:	92 85       	ldd	r25, Z+10	; 0x0a
    b660:	98 01       	movw	r18, r16
    b662:	2c 0d       	add	r18, r12
    b664:	3d 1d       	adc	r19, r13
    b666:	82 17       	cp	r24, r18
    b668:	93 07       	cpc	r25, r19
    b66a:	18 f4       	brcc	.+6      	; 0xb672 <f_read+0x176>
    b66c:	6c 01       	movw	r12, r24
    b66e:	c0 1a       	sub	r12, r16
    b670:	d1 0a       	sbc	r13, r17
    b672:	86 01       	movw	r16, r12
    b674:	a3 01       	movw	r20, r6
    b676:	92 01       	movw	r18, r4
    b678:	b4 01       	movw	r22, r8
    b67a:	eb 81       	ldd	r30, Y+3	; 0x03
    b67c:	fc 81       	ldd	r31, Y+4	; 0x04
    b67e:	81 81       	ldd	r24, Z+1	; 0x01
    b680:	0e 94 d8 68 	call	0xd1b0	; 0xd1b0 <disk_read>
    b684:	89 2b       	or	r24, r25
    b686:	11 f6       	brne	.-124    	; 0xb60c <f_read+0x110>
    b688:	f7 01       	movw	r30, r14
    b68a:	86 85       	ldd	r24, Z+14	; 0x0e
    b68c:	87 ff       	sbrs	r24, 7
    b68e:	1a c0       	rjmp	.+52     	; 0xb6c4 <f_read+0x1c8>
    b690:	80 8d       	ldd	r24, Z+24	; 0x18
    b692:	91 8d       	ldd	r25, Z+25	; 0x19
    b694:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b696:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b698:	84 19       	sub	r24, r4
    b69a:	95 09       	sbc	r25, r5
    b69c:	a6 09       	sbc	r26, r6
    b69e:	b7 09       	sbc	r27, r7
    b6a0:	a6 01       	movw	r20, r12
    b6a2:	60 e0       	ldi	r22, 0x00	; 0
    b6a4:	70 e0       	ldi	r23, 0x00	; 0
    b6a6:	84 17       	cp	r24, r20
    b6a8:	95 07       	cpc	r25, r21
    b6aa:	a6 07       	cpc	r26, r22
    b6ac:	b7 07       	cpc	r27, r23
    b6ae:	50 f4       	brcc	.+20     	; 0xb6c4 <f_read+0x1c8>
    b6b0:	98 2f       	mov	r25, r24
    b6b2:	88 27       	eor	r24, r24
    b6b4:	99 0f       	add	r25, r25
    b6b6:	40 e0       	ldi	r20, 0x00	; 0
    b6b8:	52 e0       	ldi	r21, 0x02	; 2
    b6ba:	b1 01       	movw	r22, r2
    b6bc:	88 0d       	add	r24, r8
    b6be:	99 1d       	adc	r25, r9
    b6c0:	0e 94 38 47 	call	0x8e70	; 0x8e70 <mem_cpy.part.0>
    b6c4:	dc 2c       	mov	r13, r12
    b6c6:	cc 24       	eor	r12, r12
    b6c8:	dd 0c       	add	r13, r13
    b6ca:	41 c0       	rjmp	.+130    	; 0xb74e <f_read+0x252>
    b6cc:	f7 01       	movw	r30, r14
    b6ce:	20 8d       	ldd	r18, Z+24	; 0x18
    b6d0:	31 8d       	ldd	r19, Z+25	; 0x19
    b6d2:	42 8d       	ldd	r20, Z+26	; 0x1a
    b6d4:	53 8d       	ldd	r21, Z+27	; 0x1b
    b6d6:	42 16       	cp	r4, r18
    b6d8:	53 06       	cpc	r5, r19
    b6da:	64 06       	cpc	r6, r20
    b6dc:	75 06       	cpc	r7, r21
    b6de:	f9 f0       	breq	.+62     	; 0xb71e <f_read+0x222>
    b6e0:	86 85       	ldd	r24, Z+14	; 0x0e
    b6e2:	87 ff       	sbrs	r24, 7
    b6e4:	0f c0       	rjmp	.+30     	; 0xb704 <f_read+0x208>
    b6e6:	01 e0       	ldi	r16, 0x01	; 1
    b6e8:	10 e0       	ldi	r17, 0x00	; 0
    b6ea:	b1 01       	movw	r22, r2
    b6ec:	eb 81       	ldd	r30, Y+3	; 0x03
    b6ee:	fc 81       	ldd	r31, Y+4	; 0x04
    b6f0:	81 81       	ldd	r24, Z+1	; 0x01
    b6f2:	0e 94 e8 68 	call	0xd1d0	; 0xd1d0 <disk_write>
    b6f6:	89 2b       	or	r24, r25
    b6f8:	09 f0       	breq	.+2      	; 0xb6fc <f_read+0x200>
    b6fa:	88 cf       	rjmp	.-240    	; 0xb60c <f_read+0x110>
    b6fc:	f7 01       	movw	r30, r14
    b6fe:	86 85       	ldd	r24, Z+14	; 0x0e
    b700:	8f 77       	andi	r24, 0x7F	; 127
    b702:	86 87       	std	Z+14, r24	; 0x0e
    b704:	e9 81       	ldd	r30, Y+1	; 0x01
    b706:	fa 81       	ldd	r31, Y+2	; 0x02
    b708:	01 e0       	ldi	r16, 0x01	; 1
    b70a:	10 e0       	ldi	r17, 0x00	; 0
    b70c:	a3 01       	movw	r20, r6
    b70e:	92 01       	movw	r18, r4
    b710:	b1 01       	movw	r22, r2
    b712:	81 81       	ldd	r24, Z+1	; 0x01
    b714:	0e 94 d8 68 	call	0xd1b0	; 0xd1b0 <disk_read>
    b718:	89 2b       	or	r24, r25
    b71a:	09 f0       	breq	.+2      	; 0xb71e <f_read+0x222>
    b71c:	77 cf       	rjmp	.-274    	; 0xb60c <f_read+0x110>
    b71e:	f7 01       	movw	r30, r14
    b720:	40 8e       	std	Z+24, r4	; 0x18
    b722:	51 8e       	std	Z+25, r5	; 0x19
    b724:	62 8e       	std	Z+26, r6	; 0x1a
    b726:	73 8e       	std	Z+27, r7	; 0x1b
    b728:	f7 01       	movw	r30, r14
    b72a:	60 89       	ldd	r22, Z+16	; 0x10
    b72c:	71 89       	ldd	r23, Z+17	; 0x11
    b72e:	71 70       	andi	r23, 0x01	; 1
    b730:	80 e0       	ldi	r24, 0x00	; 0
    b732:	92 e0       	ldi	r25, 0x02	; 2
    b734:	86 1b       	sub	r24, r22
    b736:	97 0b       	sbc	r25, r23
    b738:	65 01       	movw	r12, r10
    b73a:	8a 15       	cp	r24, r10
    b73c:	9b 05       	cpc	r25, r11
    b73e:	08 f4       	brcc	.+2      	; 0xb742 <f_read+0x246>
    b740:	6c 01       	movw	r12, r24
    b742:	62 0d       	add	r22, r2
    b744:	73 1d       	adc	r23, r3
    b746:	a6 01       	movw	r20, r12
    b748:	c4 01       	movw	r24, r8
    b74a:	0e 94 38 47 	call	0x8e70	; 0x8e70 <mem_cpy.part.0>
    b74e:	ac 18       	sub	r10, r12
    b750:	bd 08       	sbc	r11, r13
    b752:	ed 81       	ldd	r30, Y+5	; 0x05
    b754:	fe 81       	ldd	r31, Y+6	; 0x06
    b756:	80 81       	ld	r24, Z
    b758:	91 81       	ldd	r25, Z+1	; 0x01
    b75a:	8c 0d       	add	r24, r12
    b75c:	9d 1d       	adc	r25, r13
    b75e:	91 83       	std	Z+1, r25	; 0x01
    b760:	80 83       	st	Z, r24
    b762:	8c 0c       	add	r8, r12
    b764:	9d 1c       	adc	r9, r13
    b766:	f7 01       	movw	r30, r14
    b768:	80 89       	ldd	r24, Z+16	; 0x10
    b76a:	91 89       	ldd	r25, Z+17	; 0x11
    b76c:	a2 89       	ldd	r26, Z+18	; 0x12
    b76e:	b3 89       	ldd	r27, Z+19	; 0x13
    b770:	8c 0d       	add	r24, r12
    b772:	9d 1d       	adc	r25, r13
    b774:	a1 1d       	adc	r26, r1
    b776:	b1 1d       	adc	r27, r1
    b778:	80 8b       	std	Z+16, r24	; 0x10
    b77a:	91 8b       	std	Z+17, r25	; 0x11
    b77c:	a2 8b       	std	Z+18, r26	; 0x12
    b77e:	b3 8b       	std	Z+19, r27	; 0x13
    b780:	f5 ce       	rjmp	.-534    	; 0xb56c <f_read+0x70>
    b782:	80 e0       	ldi	r24, 0x00	; 0
    b784:	01 c0       	rjmp	.+2      	; 0xb788 <f_read+0x28c>
    b786:	87 e0       	ldi	r24, 0x07	; 7
    b788:	90 e0       	ldi	r25, 0x00	; 0
    b78a:	26 96       	adiw	r28, 0x06	; 6
    b78c:	e2 e1       	ldi	r30, 0x12	; 18
    b78e:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

0000b792 <f_write>:
    b792:	a8 e0       	ldi	r26, 0x08	; 8
    b794:	b0 e0       	ldi	r27, 0x00	; 0
    b796:	ef ec       	ldi	r30, 0xCF	; 207
    b798:	fb e5       	ldi	r31, 0x5B	; 91
    b79a:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
    b79e:	7c 01       	movw	r14, r24
    b7a0:	3b 01       	movw	r6, r22
    b7a2:	5a 01       	movw	r10, r20
    b7a4:	38 87       	std	Y+8, r19	; 0x08
    b7a6:	2f 83       	std	Y+7, r18	; 0x07
    b7a8:	f9 01       	movw	r30, r18
    b7aa:	11 82       	std	Z+1, r1	; 0x01
    b7ac:	10 82       	st	Z, r1
    b7ae:	be 01       	movw	r22, r28
    b7b0:	6f 5f       	subi	r22, 0xFF	; 255
    b7b2:	7f 4f       	sbci	r23, 0xFF	; 255
    b7b4:	0e 94 0c 47 	call	0x8e18	; 0x8e18 <validate>
    b7b8:	00 97       	sbiw	r24, 0x00	; 0
    b7ba:	09 f0       	breq	.+2      	; 0xb7be <f_write+0x2c>
    b7bc:	7d c1       	rjmp	.+762    	; 0xbab8 <f_write+0x326>
    b7be:	f7 01       	movw	r30, r14
    b7c0:	87 85       	ldd	r24, Z+15	; 0x0f
    b7c2:	90 e0       	ldi	r25, 0x00	; 0
    b7c4:	00 97       	sbiw	r24, 0x00	; 0
    b7c6:	09 f0       	breq	.+2      	; 0xb7ca <f_write+0x38>
    b7c8:	77 c1       	rjmp	.+750    	; 0xbab8 <f_write+0x326>
    b7ca:	86 85       	ldd	r24, Z+14	; 0x0e
    b7cc:	81 ff       	sbrs	r24, 1
    b7ce:	72 c1       	rjmp	.+740    	; 0xbab4 <f_write+0x322>
    b7d0:	80 89       	ldd	r24, Z+16	; 0x10
    b7d2:	91 89       	ldd	r25, Z+17	; 0x11
    b7d4:	a2 89       	ldd	r26, Z+18	; 0x12
    b7d6:	b3 89       	ldd	r27, Z+19	; 0x13
    b7d8:	ac 01       	movw	r20, r24
    b7da:	bd 01       	movw	r22, r26
    b7dc:	4a 0d       	add	r20, r10
    b7de:	5b 1d       	adc	r21, r11
    b7e0:	61 1d       	adc	r22, r1
    b7e2:	71 1d       	adc	r23, r1
    b7e4:	48 17       	cp	r20, r24
    b7e6:	59 07       	cpc	r21, r25
    b7e8:	6a 07       	cpc	r22, r26
    b7ea:	7b 07       	cpc	r23, r27
    b7ec:	18 f4       	brcc	.+6      	; 0xb7f4 <f_write+0x62>
    b7ee:	5c 01       	movw	r10, r24
    b7f0:	a0 94       	com	r10
    b7f2:	b0 94       	com	r11
    b7f4:	97 01       	movw	r18, r14
    b7f6:	2c 5d       	subi	r18, 0xDC	; 220
    b7f8:	3f 4f       	sbci	r19, 0xFF	; 255
    b7fa:	3e 83       	std	Y+6, r19	; 0x06
    b7fc:	2d 83       	std	Y+5, r18	; 0x05
    b7fe:	a1 14       	cp	r10, r1
    b800:	b1 04       	cpc	r11, r1
    b802:	09 f4       	brne	.+2      	; 0xb806 <f_write+0x74>
    b804:	4d c0       	rjmp	.+154    	; 0xb8a0 <f_write+0x10e>
    b806:	f7 01       	movw	r30, r14
    b808:	40 89       	ldd	r20, Z+16	; 0x10
    b80a:	51 89       	ldd	r21, Z+17	; 0x11
    b80c:	62 89       	ldd	r22, Z+18	; 0x12
    b80e:	73 89       	ldd	r23, Z+19	; 0x13
    b810:	db 01       	movw	r26, r22
    b812:	ca 01       	movw	r24, r20
    b814:	91 70       	andi	r25, 0x01	; 1
    b816:	aa 27       	eor	r26, r26
    b818:	bb 27       	eor	r27, r27
    b81a:	89 2b       	or	r24, r25
    b81c:	8a 2b       	or	r24, r26
    b81e:	8b 2b       	or	r24, r27
    b820:	09 f0       	breq	.+2      	; 0xb824 <f_write+0x92>
    b822:	05 c1       	rjmp	.+522    	; 0xba2e <f_write+0x29c>
    b824:	e9 81       	ldd	r30, Y+1	; 0x01
    b826:	fa 81       	ldd	r31, Y+2	; 0x02
    b828:	81 84       	ldd	r8, Z+9	; 0x09
    b82a:	92 84       	ldd	r9, Z+10	; 0x0a
    b82c:	f1 e0       	ldi	r31, 0x01	; 1
    b82e:	8f 1a       	sub	r8, r31
    b830:	91 08       	sbc	r9, r1
    b832:	db 01       	movw	r26, r22
    b834:	ca 01       	movw	r24, r20
    b836:	e9 e0       	ldi	r30, 0x09	; 9
    b838:	b6 95       	lsr	r27
    b83a:	a7 95       	ror	r26
    b83c:	97 95       	ror	r25
    b83e:	87 95       	ror	r24
    b840:	ea 95       	dec	r30
    b842:	d1 f7       	brne	.-12     	; 0xb838 <f_write+0xa6>
    b844:	88 22       	and	r8, r24
    b846:	99 22       	and	r9, r25
    b848:	81 14       	cp	r8, r1
    b84a:	91 04       	cpc	r9, r1
    b84c:	09 f0       	breq	.+2      	; 0xb850 <f_write+0xbe>
    b84e:	51 c0       	rjmp	.+162    	; 0xb8f2 <f_write+0x160>
    b850:	f7 01       	movw	r30, r14
    b852:	41 15       	cp	r20, r1
    b854:	51 05       	cpc	r21, r1
    b856:	61 05       	cpc	r22, r1
    b858:	71 05       	cpc	r23, r1
    b85a:	69 f4       	brne	.+26     	; 0xb876 <f_write+0xe4>
    b85c:	66 81       	ldd	r22, Z+6	; 0x06
    b85e:	77 81       	ldd	r23, Z+7	; 0x07
    b860:	80 85       	ldd	r24, Z+8	; 0x08
    b862:	91 85       	ldd	r25, Z+9	; 0x09
    b864:	61 15       	cp	r22, r1
    b866:	71 05       	cpc	r23, r1
    b868:	81 05       	cpc	r24, r1
    b86a:	91 05       	cpc	r25, r1
    b86c:	f9 f4       	brne	.+62     	; 0xb8ac <f_write+0x11a>
    b86e:	40 e0       	ldi	r20, 0x00	; 0
    b870:	50 e0       	ldi	r21, 0x00	; 0
    b872:	ba 01       	movw	r22, r20
    b874:	0d c0       	rjmp	.+26     	; 0xb890 <f_write+0xfe>
    b876:	82 a1       	ldd	r24, Z+34	; 0x22
    b878:	93 a1       	ldd	r25, Z+35	; 0x23
    b87a:	89 2b       	or	r24, r25
    b87c:	21 f0       	breq	.+8      	; 0xb886 <f_write+0xf4>
    b87e:	c7 01       	movw	r24, r14
    b880:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <clmt_clust>
    b884:	08 c0       	rjmp	.+16     	; 0xb896 <f_write+0x104>
    b886:	f7 01       	movw	r30, r14
    b888:	44 89       	ldd	r20, Z+20	; 0x14
    b88a:	55 89       	ldd	r21, Z+21	; 0x15
    b88c:	66 89       	ldd	r22, Z+22	; 0x16
    b88e:	77 89       	ldd	r23, Z+23	; 0x17
    b890:	c7 01       	movw	r24, r14
    b892:	0e 94 d4 4f 	call	0x9fa8	; 0x9fa8 <create_chain>
    b896:	61 15       	cp	r22, r1
    b898:	71 05       	cpc	r23, r1
    b89a:	81 05       	cpc	r24, r1
    b89c:	91 05       	cpc	r25, r1
    b89e:	31 f4       	brne	.+12     	; 0xb8ac <f_write+0x11a>
    b8a0:	f7 01       	movw	r30, r14
    b8a2:	86 85       	ldd	r24, Z+14	; 0x0e
    b8a4:	80 64       	ori	r24, 0x40	; 64
    b8a6:	86 87       	std	Z+14, r24	; 0x0e
    b8a8:	80 e0       	ldi	r24, 0x00	; 0
    b8aa:	05 c1       	rjmp	.+522    	; 0xbab6 <f_write+0x324>
    b8ac:	61 30       	cpi	r22, 0x01	; 1
    b8ae:	71 05       	cpc	r23, r1
    b8b0:	81 05       	cpc	r24, r1
    b8b2:	91 05       	cpc	r25, r1
    b8b4:	11 f4       	brne	.+4      	; 0xb8ba <f_write+0x128>
    b8b6:	82 e0       	ldi	r24, 0x02	; 2
    b8b8:	07 c0       	rjmp	.+14     	; 0xb8c8 <f_write+0x136>
    b8ba:	6f 3f       	cpi	r22, 0xFF	; 255
    b8bc:	ff ef       	ldi	r31, 0xFF	; 255
    b8be:	7f 07       	cpc	r23, r31
    b8c0:	8f 07       	cpc	r24, r31
    b8c2:	9f 07       	cpc	r25, r31
    b8c4:	21 f4       	brne	.+8      	; 0xb8ce <f_write+0x13c>
    b8c6:	81 e0       	ldi	r24, 0x01	; 1
    b8c8:	f7 01       	movw	r30, r14
    b8ca:	87 87       	std	Z+15, r24	; 0x0f
    b8cc:	f4 c0       	rjmp	.+488    	; 0xbab6 <f_write+0x324>
    b8ce:	f7 01       	movw	r30, r14
    b8d0:	64 8b       	std	Z+20, r22	; 0x14
    b8d2:	75 8b       	std	Z+21, r23	; 0x15
    b8d4:	86 8b       	std	Z+22, r24	; 0x16
    b8d6:	97 8b       	std	Z+23, r25	; 0x17
    b8d8:	06 81       	ldd	r16, Z+6	; 0x06
    b8da:	17 81       	ldd	r17, Z+7	; 0x07
    b8dc:	20 85       	ldd	r18, Z+8	; 0x08
    b8de:	31 85       	ldd	r19, Z+9	; 0x09
    b8e0:	01 15       	cp	r16, r1
    b8e2:	11 05       	cpc	r17, r1
    b8e4:	21 05       	cpc	r18, r1
    b8e6:	31 05       	cpc	r19, r1
    b8e8:	21 f4       	brne	.+8      	; 0xb8f2 <f_write+0x160>
    b8ea:	66 83       	std	Z+6, r22	; 0x06
    b8ec:	77 83       	std	Z+7, r23	; 0x07
    b8ee:	80 87       	std	Z+8, r24	; 0x08
    b8f0:	91 87       	std	Z+9, r25	; 0x09
    b8f2:	f7 01       	movw	r30, r14
    b8f4:	86 85       	ldd	r24, Z+14	; 0x0e
    b8f6:	87 ff       	sbrs	r24, 7
    b8f8:	13 c0       	rjmp	.+38     	; 0xb920 <f_write+0x18e>
    b8fa:	20 8d       	ldd	r18, Z+24	; 0x18
    b8fc:	31 8d       	ldd	r19, Z+25	; 0x19
    b8fe:	42 8d       	ldd	r20, Z+26	; 0x1a
    b900:	53 8d       	ldd	r21, Z+27	; 0x1b
    b902:	e9 81       	ldd	r30, Y+1	; 0x01
    b904:	fa 81       	ldd	r31, Y+2	; 0x02
    b906:	01 e0       	ldi	r16, 0x01	; 1
    b908:	10 e0       	ldi	r17, 0x00	; 0
    b90a:	6d 81       	ldd	r22, Y+5	; 0x05
    b90c:	7e 81       	ldd	r23, Y+6	; 0x06
    b90e:	81 81       	ldd	r24, Z+1	; 0x01
    b910:	0e 94 e8 68 	call	0xd1d0	; 0xd1d0 <disk_write>
    b914:	89 2b       	or	r24, r25
    b916:	b9 f6       	brne	.-82     	; 0xb8c6 <f_write+0x134>
    b918:	f7 01       	movw	r30, r14
    b91a:	86 85       	ldd	r24, Z+14	; 0x0e
    b91c:	8f 77       	andi	r24, 0x7F	; 127
    b91e:	86 87       	std	Z+14, r24	; 0x0e
    b920:	29 81       	ldd	r18, Y+1	; 0x01
    b922:	3a 81       	ldd	r19, Y+2	; 0x02
    b924:	3c 83       	std	Y+4, r19	; 0x04
    b926:	2b 83       	std	Y+3, r18	; 0x03
    b928:	f7 01       	movw	r30, r14
    b92a:	44 89       	ldd	r20, Z+20	; 0x14
    b92c:	55 89       	ldd	r21, Z+21	; 0x15
    b92e:	66 89       	ldd	r22, Z+22	; 0x16
    b930:	77 89       	ldd	r23, Z+23	; 0x17
    b932:	c9 01       	movw	r24, r18
    b934:	0e 94 6d 46 	call	0x8cda	; 0x8cda <clst2sect>
    b938:	61 15       	cp	r22, r1
    b93a:	71 05       	cpc	r23, r1
    b93c:	81 05       	cpc	r24, r1
    b93e:	91 05       	cpc	r25, r1
    b940:	09 f4       	brne	.+2      	; 0xb944 <f_write+0x1b2>
    b942:	b9 cf       	rjmp	.-142    	; 0xb8b6 <f_write+0x124>
    b944:	1b 01       	movw	r2, r22
    b946:	2c 01       	movw	r4, r24
    b948:	28 0c       	add	r2, r8
    b94a:	39 1c       	adc	r3, r9
    b94c:	41 1c       	adc	r4, r1
    b94e:	51 1c       	adc	r5, r1
    b950:	65 01       	movw	r12, r10
    b952:	cd 2c       	mov	r12, r13
    b954:	dd 24       	eor	r13, r13
    b956:	c6 94       	lsr	r12
    b958:	c1 14       	cp	r12, r1
    b95a:	d1 04       	cpc	r13, r1
    b95c:	f1 f1       	breq	.+124    	; 0xb9da <f_write+0x248>
    b95e:	eb 81       	ldd	r30, Y+3	; 0x03
    b960:	fc 81       	ldd	r31, Y+4	; 0x04
    b962:	81 85       	ldd	r24, Z+9	; 0x09
    b964:	92 85       	ldd	r25, Z+10	; 0x0a
    b966:	94 01       	movw	r18, r8
    b968:	2c 0d       	add	r18, r12
    b96a:	3d 1d       	adc	r19, r13
    b96c:	82 17       	cp	r24, r18
    b96e:	93 07       	cpc	r25, r19
    b970:	18 f4       	brcc	.+6      	; 0xb978 <f_write+0x1e6>
    b972:	6c 01       	movw	r12, r24
    b974:	c8 18       	sub	r12, r8
    b976:	d9 08       	sbc	r13, r9
    b978:	86 01       	movw	r16, r12
    b97a:	a2 01       	movw	r20, r4
    b97c:	91 01       	movw	r18, r2
    b97e:	b3 01       	movw	r22, r6
    b980:	eb 81       	ldd	r30, Y+3	; 0x03
    b982:	fc 81       	ldd	r31, Y+4	; 0x04
    b984:	81 81       	ldd	r24, Z+1	; 0x01
    b986:	0e 94 e8 68 	call	0xd1d0	; 0xd1d0 <disk_write>
    b98a:	89 2b       	or	r24, r25
    b98c:	09 f0       	breq	.+2      	; 0xb990 <f_write+0x1fe>
    b98e:	9b cf       	rjmp	.-202    	; 0xb8c6 <f_write+0x134>
    b990:	f7 01       	movw	r30, r14
    b992:	80 8d       	ldd	r24, Z+24	; 0x18
    b994:	91 8d       	ldd	r25, Z+25	; 0x19
    b996:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b998:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b99a:	82 19       	sub	r24, r2
    b99c:	93 09       	sbc	r25, r3
    b99e:	a4 09       	sbc	r26, r4
    b9a0:	b5 09       	sbc	r27, r5
    b9a2:	a6 01       	movw	r20, r12
    b9a4:	60 e0       	ldi	r22, 0x00	; 0
    b9a6:	70 e0       	ldi	r23, 0x00	; 0
    b9a8:	84 17       	cp	r24, r20
    b9aa:	95 07       	cpc	r25, r21
    b9ac:	a6 07       	cpc	r26, r22
    b9ae:	b7 07       	cpc	r27, r23
    b9b0:	80 f4       	brcc	.+32     	; 0xb9d2 <f_write+0x240>
    b9b2:	98 2f       	mov	r25, r24
    b9b4:	88 27       	eor	r24, r24
    b9b6:	99 0f       	add	r25, r25
    b9b8:	b3 01       	movw	r22, r6
    b9ba:	68 0f       	add	r22, r24
    b9bc:	79 1f       	adc	r23, r25
    b9be:	40 e0       	ldi	r20, 0x00	; 0
    b9c0:	52 e0       	ldi	r21, 0x02	; 2
    b9c2:	8d 81       	ldd	r24, Y+5	; 0x05
    b9c4:	9e 81       	ldd	r25, Y+6	; 0x06
    b9c6:	0e 94 38 47 	call	0x8e70	; 0x8e70 <mem_cpy.part.0>
    b9ca:	f7 01       	movw	r30, r14
    b9cc:	86 85       	ldd	r24, Z+14	; 0x0e
    b9ce:	8f 77       	andi	r24, 0x7F	; 127
    b9d0:	86 87       	std	Z+14, r24	; 0x0e
    b9d2:	dc 2c       	mov	r13, r12
    b9d4:	cc 24       	eor	r12, r12
    b9d6:	dd 0c       	add	r13, r13
    b9d8:	43 c0       	rjmp	.+134    	; 0xba60 <f_write+0x2ce>
    b9da:	f7 01       	movw	r30, r14
    b9dc:	80 8d       	ldd	r24, Z+24	; 0x18
    b9de:	91 8d       	ldd	r25, Z+25	; 0x19
    b9e0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b9e2:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b9e4:	28 16       	cp	r2, r24
    b9e6:	39 06       	cpc	r3, r25
    b9e8:	4a 06       	cpc	r4, r26
    b9ea:	5b 06       	cpc	r5, r27
    b9ec:	d9 f0       	breq	.+54     	; 0xba24 <f_write+0x292>
    b9ee:	40 89       	ldd	r20, Z+16	; 0x10
    b9f0:	51 89       	ldd	r21, Z+17	; 0x11
    b9f2:	62 89       	ldd	r22, Z+18	; 0x12
    b9f4:	73 89       	ldd	r23, Z+19	; 0x13
    b9f6:	82 85       	ldd	r24, Z+10	; 0x0a
    b9f8:	93 85       	ldd	r25, Z+11	; 0x0b
    b9fa:	a4 85       	ldd	r26, Z+12	; 0x0c
    b9fc:	b5 85       	ldd	r27, Z+13	; 0x0d
    b9fe:	48 17       	cp	r20, r24
    ba00:	59 07       	cpc	r21, r25
    ba02:	6a 07       	cpc	r22, r26
    ba04:	7b 07       	cpc	r23, r27
    ba06:	70 f4       	brcc	.+28     	; 0xba24 <f_write+0x292>
    ba08:	01 e0       	ldi	r16, 0x01	; 1
    ba0a:	10 e0       	ldi	r17, 0x00	; 0
    ba0c:	a2 01       	movw	r20, r4
    ba0e:	91 01       	movw	r18, r2
    ba10:	6d 81       	ldd	r22, Y+5	; 0x05
    ba12:	7e 81       	ldd	r23, Y+6	; 0x06
    ba14:	eb 81       	ldd	r30, Y+3	; 0x03
    ba16:	fc 81       	ldd	r31, Y+4	; 0x04
    ba18:	81 81       	ldd	r24, Z+1	; 0x01
    ba1a:	0e 94 d8 68 	call	0xd1b0	; 0xd1b0 <disk_read>
    ba1e:	89 2b       	or	r24, r25
    ba20:	09 f0       	breq	.+2      	; 0xba24 <f_write+0x292>
    ba22:	51 cf       	rjmp	.-350    	; 0xb8c6 <f_write+0x134>
    ba24:	f7 01       	movw	r30, r14
    ba26:	20 8e       	std	Z+24, r2	; 0x18
    ba28:	31 8e       	std	Z+25, r3	; 0x19
    ba2a:	42 8e       	std	Z+26, r4	; 0x1a
    ba2c:	53 8e       	std	Z+27, r5	; 0x1b
    ba2e:	f7 01       	movw	r30, r14
    ba30:	80 89       	ldd	r24, Z+16	; 0x10
    ba32:	91 89       	ldd	r25, Z+17	; 0x11
    ba34:	91 70       	andi	r25, 0x01	; 1
    ba36:	20 e0       	ldi	r18, 0x00	; 0
    ba38:	32 e0       	ldi	r19, 0x02	; 2
    ba3a:	28 1b       	sub	r18, r24
    ba3c:	39 0b       	sbc	r19, r25
    ba3e:	65 01       	movw	r12, r10
    ba40:	2a 15       	cp	r18, r10
    ba42:	3b 05       	cpc	r19, r11
    ba44:	08 f4       	brcc	.+2      	; 0xba48 <f_write+0x2b6>
    ba46:	69 01       	movw	r12, r18
    ba48:	a6 01       	movw	r20, r12
    ba4a:	b3 01       	movw	r22, r6
    ba4c:	2d 81       	ldd	r18, Y+5	; 0x05
    ba4e:	3e 81       	ldd	r19, Y+6	; 0x06
    ba50:	82 0f       	add	r24, r18
    ba52:	93 1f       	adc	r25, r19
    ba54:	0e 94 38 47 	call	0x8e70	; 0x8e70 <mem_cpy.part.0>
    ba58:	f7 01       	movw	r30, r14
    ba5a:	86 85       	ldd	r24, Z+14	; 0x0e
    ba5c:	80 68       	ori	r24, 0x80	; 128
    ba5e:	86 87       	std	Z+14, r24	; 0x0e
    ba60:	ac 18       	sub	r10, r12
    ba62:	bd 08       	sbc	r11, r13
    ba64:	ef 81       	ldd	r30, Y+7	; 0x07
    ba66:	f8 85       	ldd	r31, Y+8	; 0x08
    ba68:	80 81       	ld	r24, Z
    ba6a:	91 81       	ldd	r25, Z+1	; 0x01
    ba6c:	8c 0d       	add	r24, r12
    ba6e:	9d 1d       	adc	r25, r13
    ba70:	91 83       	std	Z+1, r25	; 0x01
    ba72:	80 83       	st	Z, r24
    ba74:	6c 0c       	add	r6, r12
    ba76:	7d 1c       	adc	r7, r13
    ba78:	f7 01       	movw	r30, r14
    ba7a:	80 89       	ldd	r24, Z+16	; 0x10
    ba7c:	91 89       	ldd	r25, Z+17	; 0x11
    ba7e:	a2 89       	ldd	r26, Z+18	; 0x12
    ba80:	b3 89       	ldd	r27, Z+19	; 0x13
    ba82:	8c 0d       	add	r24, r12
    ba84:	9d 1d       	adc	r25, r13
    ba86:	a1 1d       	adc	r26, r1
    ba88:	b1 1d       	adc	r27, r1
    ba8a:	80 8b       	std	Z+16, r24	; 0x10
    ba8c:	91 8b       	std	Z+17, r25	; 0x11
    ba8e:	a2 8b       	std	Z+18, r26	; 0x12
    ba90:	b3 8b       	std	Z+19, r27	; 0x13
    ba92:	42 85       	ldd	r20, Z+10	; 0x0a
    ba94:	53 85       	ldd	r21, Z+11	; 0x0b
    ba96:	64 85       	ldd	r22, Z+12	; 0x0c
    ba98:	75 85       	ldd	r23, Z+13	; 0x0d
    ba9a:	48 17       	cp	r20, r24
    ba9c:	59 07       	cpc	r21, r25
    ba9e:	6a 07       	cpc	r22, r26
    baa0:	7b 07       	cpc	r23, r27
    baa2:	10 f4       	brcc	.+4      	; 0xbaa8 <f_write+0x316>
    baa4:	ac 01       	movw	r20, r24
    baa6:	bd 01       	movw	r22, r26
    baa8:	f7 01       	movw	r30, r14
    baaa:	42 87       	std	Z+10, r20	; 0x0a
    baac:	53 87       	std	Z+11, r21	; 0x0b
    baae:	64 87       	std	Z+12, r22	; 0x0c
    bab0:	75 87       	std	Z+13, r23	; 0x0d
    bab2:	a5 ce       	rjmp	.-694    	; 0xb7fe <f_write+0x6c>
    bab4:	87 e0       	ldi	r24, 0x07	; 7
    bab6:	90 e0       	ldi	r25, 0x00	; 0
    bab8:	28 96       	adiw	r28, 0x08	; 8
    baba:	e2 e1       	ldi	r30, 0x12	; 18
    babc:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

0000bac0 <f_sync>:
    bac0:	8f 92       	push	r8
    bac2:	9f 92       	push	r9
    bac4:	af 92       	push	r10
    bac6:	bf 92       	push	r11
    bac8:	ef 92       	push	r14
    baca:	ff 92       	push	r15
    bacc:	0f 93       	push	r16
    bace:	1f 93       	push	r17
    bad0:	cf 93       	push	r28
    bad2:	df 93       	push	r29
    bad4:	00 d0       	rcall	.+0      	; 0xbad6 <f_sync+0x16>
    bad6:	cd b7       	in	r28, 0x3d	; 61
    bad8:	de b7       	in	r29, 0x3e	; 62
    bada:	7c 01       	movw	r14, r24
    badc:	be 01       	movw	r22, r28
    bade:	6f 5f       	subi	r22, 0xFF	; 255
    bae0:	7f 4f       	sbci	r23, 0xFF	; 255
    bae2:	0e 94 0c 47 	call	0x8e18	; 0x8e18 <validate>
    bae6:	00 97       	sbiw	r24, 0x00	; 0
    bae8:	09 f0       	breq	.+2      	; 0xbaec <f_sync+0x2c>
    baea:	5d c0       	rjmp	.+186    	; 0xbba6 <f_sync+0xe6>
    baec:	f7 01       	movw	r30, r14
    baee:	86 85       	ldd	r24, Z+14	; 0x0e
    baf0:	86 ff       	sbrs	r24, 6
    baf2:	55 c0       	rjmp	.+170    	; 0xbb9e <f_sync+0xde>
    baf4:	87 ff       	sbrs	r24, 7
    baf6:	15 c0       	rjmp	.+42     	; 0xbb22 <f_sync+0x62>
    baf8:	20 8d       	ldd	r18, Z+24	; 0x18
    bafa:	31 8d       	ldd	r19, Z+25	; 0x19
    bafc:	42 8d       	ldd	r20, Z+26	; 0x1a
    bafe:	53 8d       	ldd	r21, Z+27	; 0x1b
    bb00:	e9 81       	ldd	r30, Y+1	; 0x01
    bb02:	fa 81       	ldd	r31, Y+2	; 0x02
    bb04:	01 e0       	ldi	r16, 0x01	; 1
    bb06:	10 e0       	ldi	r17, 0x00	; 0
    bb08:	b7 01       	movw	r22, r14
    bb0a:	6c 5d       	subi	r22, 0xDC	; 220
    bb0c:	7f 4f       	sbci	r23, 0xFF	; 255
    bb0e:	81 81       	ldd	r24, Z+1	; 0x01
    bb10:	0e 94 e8 68 	call	0xd1d0	; 0xd1d0 <disk_write>
    bb14:	89 2b       	or	r24, r25
    bb16:	09 f0       	breq	.+2      	; 0xbb1a <f_sync+0x5a>
    bb18:	44 c0       	rjmp	.+136    	; 0xbba2 <f_sync+0xe2>
    bb1a:	f7 01       	movw	r30, r14
    bb1c:	86 85       	ldd	r24, Z+14	; 0x0e
    bb1e:	8f 77       	andi	r24, 0x7F	; 127
    bb20:	86 87       	std	Z+14, r24	; 0x0e
    bb22:	0e 94 8d 6f 	call	0xdf1a	; 0xdf1a <get_fattime>
    bb26:	4b 01       	movw	r8, r22
    bb28:	5c 01       	movw	r10, r24
    bb2a:	f7 01       	movw	r30, r14
    bb2c:	44 8d       	ldd	r20, Z+28	; 0x1c
    bb2e:	55 8d       	ldd	r21, Z+29	; 0x1d
    bb30:	66 8d       	ldd	r22, Z+30	; 0x1e
    bb32:	77 8d       	ldd	r23, Z+31	; 0x1f
    bb34:	89 81       	ldd	r24, Y+1	; 0x01
    bb36:	9a 81       	ldd	r25, Y+2	; 0x02
    bb38:	0e 94 8f 4a 	call	0x951e	; 0x951e <move_window>
    bb3c:	00 97       	sbiw	r24, 0x00	; 0
    bb3e:	99 f5       	brne	.+102    	; 0xbba6 <f_sync+0xe6>
    bb40:	f7 01       	movw	r30, r14
    bb42:	00 a1       	ldd	r16, Z+32	; 0x20
    bb44:	11 a1       	ldd	r17, Z+33	; 0x21
    bb46:	f8 01       	movw	r30, r16
    bb48:	83 85       	ldd	r24, Z+11	; 0x0b
    bb4a:	80 62       	ori	r24, 0x20	; 32
    bb4c:	83 87       	std	Z+11, r24	; 0x0b
    bb4e:	f7 01       	movw	r30, r14
    bb50:	26 81       	ldd	r18, Z+6	; 0x06
    bb52:	37 81       	ldd	r19, Z+7	; 0x07
    bb54:	40 85       	ldd	r20, Z+8	; 0x08
    bb56:	51 85       	ldd	r21, Z+9	; 0x09
    bb58:	b8 01       	movw	r22, r16
    bb5a:	80 81       	ld	r24, Z
    bb5c:	91 81       	ldd	r25, Z+1	; 0x01
    bb5e:	0e 94 15 49 	call	0x922a	; 0x922a <st_clust.isra.5>
    bb62:	f7 01       	movw	r30, r14
    bb64:	42 85       	ldd	r20, Z+10	; 0x0a
    bb66:	53 85       	ldd	r21, Z+11	; 0x0b
    bb68:	64 85       	ldd	r22, Z+12	; 0x0c
    bb6a:	75 85       	ldd	r23, Z+13	; 0x0d
    bb6c:	c8 01       	movw	r24, r16
    bb6e:	4c 96       	adiw	r24, 0x1c	; 28
    bb70:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <st_dword>
    bb74:	b5 01       	movw	r22, r10
    bb76:	a4 01       	movw	r20, r8
    bb78:	c8 01       	movw	r24, r16
    bb7a:	46 96       	adiw	r24, 0x16	; 22
    bb7c:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <st_dword>
    bb80:	f8 01       	movw	r30, r16
    bb82:	12 8a       	std	Z+18, r1	; 0x12
    bb84:	13 8a       	std	Z+19, r1	; 0x13
    bb86:	89 81       	ldd	r24, Y+1	; 0x01
    bb88:	9a 81       	ldd	r25, Y+2	; 0x02
    bb8a:	21 e0       	ldi	r18, 0x01	; 1
    bb8c:	fc 01       	movw	r30, r24
    bb8e:	23 83       	std	Z+3, r18	; 0x03
    bb90:	0e 94 75 49 	call	0x92ea	; 0x92ea <sync_fs>
    bb94:	f7 01       	movw	r30, r14
    bb96:	26 85       	ldd	r18, Z+14	; 0x0e
    bb98:	2f 7b       	andi	r18, 0xBF	; 191
    bb9a:	26 87       	std	Z+14, r18	; 0x0e
    bb9c:	04 c0       	rjmp	.+8      	; 0xbba6 <f_sync+0xe6>
    bb9e:	80 e0       	ldi	r24, 0x00	; 0
    bba0:	01 c0       	rjmp	.+2      	; 0xbba4 <f_sync+0xe4>
    bba2:	81 e0       	ldi	r24, 0x01	; 1
    bba4:	90 e0       	ldi	r25, 0x00	; 0
    bba6:	0f 90       	pop	r0
    bba8:	0f 90       	pop	r0
    bbaa:	df 91       	pop	r29
    bbac:	cf 91       	pop	r28
    bbae:	1f 91       	pop	r17
    bbb0:	0f 91       	pop	r16
    bbb2:	ff 90       	pop	r15
    bbb4:	ef 90       	pop	r14
    bbb6:	bf 90       	pop	r11
    bbb8:	af 90       	pop	r10
    bbba:	9f 90       	pop	r9
    bbbc:	8f 90       	pop	r8
    bbbe:	08 95       	ret

0000bbc0 <f_close>:
    bbc0:	a2 e0       	ldi	r26, 0x02	; 2
    bbc2:	b0 e0       	ldi	r27, 0x00	; 0
    bbc4:	e6 ee       	ldi	r30, 0xE6	; 230
    bbc6:	fd e5       	ldi	r31, 0x5D	; 93
    bbc8:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__prologue_saves__+0x1c>
    bbcc:	8c 01       	movw	r16, r24
    bbce:	78 df       	rcall	.-272    	; 0xbac0 <f_sync>
    bbd0:	00 97       	sbiw	r24, 0x00	; 0
    bbd2:	59 f4       	brne	.+22     	; 0xbbea <f_close+0x2a>
    bbd4:	be 01       	movw	r22, r28
    bbd6:	6f 5f       	subi	r22, 0xFF	; 255
    bbd8:	7f 4f       	sbci	r23, 0xFF	; 255
    bbda:	c8 01       	movw	r24, r16
    bbdc:	0e 94 0c 47 	call	0x8e18	; 0x8e18 <validate>
    bbe0:	00 97       	sbiw	r24, 0x00	; 0
    bbe2:	19 f4       	brne	.+6      	; 0xbbea <f_close+0x2a>
    bbe4:	f8 01       	movw	r30, r16
    bbe6:	11 82       	std	Z+1, r1	; 0x01
    bbe8:	10 82       	st	Z, r1
    bbea:	22 96       	adiw	r28, 0x02	; 2
    bbec:	e4 e0       	ldi	r30, 0x04	; 4
    bbee:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

0000bbf2 <f_chdir>:
    bbf2:	a2 e3       	ldi	r26, 0x32	; 50
    bbf4:	b0 e0       	ldi	r27, 0x00	; 0
    bbf6:	ef ef       	ldi	r30, 0xFF	; 255
    bbf8:	fd e5       	ldi	r31, 0x5D	; 93
    bbfa:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
    bbfe:	9a ab       	std	Y+50, r25	; 0x32
    bc00:	89 ab       	std	Y+49, r24	; 0x31
    bc02:	40 e0       	ldi	r20, 0x00	; 0
    bc04:	be 01       	movw	r22, r28
    bc06:	61 5d       	subi	r22, 0xD1	; 209
    bc08:	7f 4f       	sbci	r23, 0xFF	; 255
    bc0a:	ce 01       	movw	r24, r28
    bc0c:	c1 96       	adiw	r24, 0x31	; 49
    bc0e:	0e 94 0a 4b 	call	0x9614	; 0x9614 <mount_volume>
    bc12:	00 97       	sbiw	r24, 0x00	; 0
    bc14:	09 f0       	breq	.+2      	; 0xbc18 <f_chdir+0x26>
    bc16:	44 c0       	rjmp	.+136    	; 0xbca0 <f_chdir+0xae>
    bc18:	8f a5       	ldd	r24, Y+47	; 0x2f
    bc1a:	98 a9       	ldd	r25, Y+48	; 0x30
    bc1c:	9a 83       	std	Y+2, r25	; 0x02
    bc1e:	89 83       	std	Y+1, r24	; 0x01
    bc20:	80 e0       	ldi	r24, 0x00	; 0
    bc22:	92 e0       	ldi	r25, 0x02	; 2
    bc24:	0e 94 1c 68 	call	0xd038	; 0xd038 <ff_memalloc>
    bc28:	7c 01       	movw	r14, r24
    bc2a:	00 97       	sbiw	r24, 0x00	; 0
    bc2c:	a9 f1       	breq	.+106    	; 0xbc98 <f_chdir+0xa6>
    bc2e:	ef a5       	ldd	r30, Y+47	; 0x2f
    bc30:	f8 a9       	ldd	r31, Y+48	; 0x30
    bc32:	94 87       	std	Z+12, r25	; 0x0c
    bc34:	83 87       	std	Z+11, r24	; 0x0b
    bc36:	69 a9       	ldd	r22, Y+49	; 0x31
    bc38:	7a a9       	ldd	r23, Y+50	; 0x32
    bc3a:	ce 01       	movw	r24, r28
    bc3c:	01 96       	adiw	r24, 0x01	; 1
    bc3e:	39 d8       	rcall	.-3982   	; 0xacb2 <follow_path>
    bc40:	8c 01       	movw	r16, r24
    bc42:	89 2b       	or	r24, r25
    bc44:	09 f5       	brne	.+66     	; 0xbc88 <f_chdir+0x96>
    bc46:	88 a5       	ldd	r24, Y+40	; 0x28
    bc48:	87 ff       	sbrs	r24, 7
    bc4a:	0b c0       	rjmp	.+22     	; 0xbc62 <f_chdir+0x70>
    bc4c:	ef a5       	ldd	r30, Y+47	; 0x2f
    bc4e:	f8 a9       	ldd	r31, Y+48	; 0x30
    bc50:	8f 81       	ldd	r24, Y+7	; 0x07
    bc52:	98 85       	ldd	r25, Y+8	; 0x08
    bc54:	a9 85       	ldd	r26, Y+9	; 0x09
    bc56:	ba 85       	ldd	r27, Y+10	; 0x0a
    bc58:	85 8b       	std	Z+21, r24	; 0x15
    bc5a:	96 8b       	std	Z+22, r25	; 0x16
    bc5c:	a7 8b       	std	Z+23, r26	; 0x17
    bc5e:	b0 8f       	std	Z+24, r27	; 0x18
    bc60:	13 c0       	rjmp	.+38     	; 0xbc88 <f_chdir+0x96>
    bc62:	8d 81       	ldd	r24, Y+5	; 0x05
    bc64:	84 ff       	sbrs	r24, 4
    bc66:	0e c0       	rjmp	.+28     	; 0xbc84 <f_chdir+0x92>
    bc68:	cf a4       	ldd	r12, Y+47	; 0x2f
    bc6a:	d8 a8       	ldd	r13, Y+48	; 0x30
    bc6c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    bc6e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    bc70:	f6 01       	movw	r30, r12
    bc72:	80 81       	ld	r24, Z
    bc74:	0e 94 00 49 	call	0x9200	; 0x9200 <ld_clust.isra.4>
    bc78:	f6 01       	movw	r30, r12
    bc7a:	65 8b       	std	Z+21, r22	; 0x15
    bc7c:	76 8b       	std	Z+22, r23	; 0x16
    bc7e:	87 8b       	std	Z+23, r24	; 0x17
    bc80:	90 8f       	std	Z+24, r25	; 0x18
    bc82:	02 c0       	rjmp	.+4      	; 0xbc88 <f_chdir+0x96>
    bc84:	05 e0       	ldi	r16, 0x05	; 5
    bc86:	10 e0       	ldi	r17, 0x00	; 0
    bc88:	c7 01       	movw	r24, r14
    bc8a:	0e 94 1f 68 	call	0xd03e	; 0xd03e <ff_memfree>
    bc8e:	04 30       	cpi	r16, 0x04	; 4
    bc90:	11 05       	cpc	r17, r1
    bc92:	29 f4       	brne	.+10     	; 0xbc9e <f_chdir+0xac>
    bc94:	85 e0       	ldi	r24, 0x05	; 5
    bc96:	01 c0       	rjmp	.+2      	; 0xbc9a <f_chdir+0xa8>
    bc98:	81 e1       	ldi	r24, 0x11	; 17
    bc9a:	90 e0       	ldi	r25, 0x00	; 0
    bc9c:	01 c0       	rjmp	.+2      	; 0xbca0 <f_chdir+0xae>
    bc9e:	c8 01       	movw	r24, r16
    bca0:	e2 96       	adiw	r28, 0x32	; 50
    bca2:	e8 e0       	ldi	r30, 0x08	; 8
    bca4:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

0000bca8 <f_getcwd>:
    bca8:	a8 e4       	ldi	r26, 0x48	; 72
    bcaa:	b1 e0       	ldi	r27, 0x01	; 1
    bcac:	ea e5       	ldi	r30, 0x5A	; 90
    bcae:	fe e5       	ldi	r31, 0x5E	; 94
    bcb0:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
    bcb4:	c9 5b       	subi	r28, 0xB9	; 185
    bcb6:	de 4f       	sbci	r29, 0xFE	; 254
    bcb8:	99 83       	std	Y+1, r25	; 0x01
    bcba:	88 83       	st	Y, r24
    bcbc:	c7 54       	subi	r28, 0x47	; 71
    bcbe:	d1 40       	sbci	r29, 0x01	; 1
    bcc0:	4b 01       	movw	r8, r22
    bcc2:	7c 01       	movw	r14, r24
    bcc4:	fc 01       	movw	r30, r24
    bcc6:	10 82       	st	Z, r1
    bcc8:	40 e0       	ldi	r20, 0x00	; 0
    bcca:	be 01       	movw	r22, r28
    bccc:	6b 5b       	subi	r22, 0xBB	; 187
    bcce:	7e 4f       	sbci	r23, 0xFE	; 254
    bcd0:	ce 01       	movw	r24, r28
    bcd2:	89 5b       	subi	r24, 0xB9	; 185
    bcd4:	9e 4f       	sbci	r25, 0xFE	; 254
    bcd6:	0e 94 0a 4b 	call	0x9614	; 0x9614 <mount_volume>
    bcda:	1c 01       	movw	r2, r24
    bcdc:	89 2b       	or	r24, r25
    bcde:	09 f0       	breq	.+2      	; 0xbce2 <f_getcwd+0x3a>
    bce0:	03 c1       	rjmp	.+518    	; 0xbee8 <f_getcwd+0x240>
    bce2:	cb 5b       	subi	r28, 0xBB	; 187
    bce4:	de 4f       	sbci	r29, 0xFE	; 254
    bce6:	88 81       	ld	r24, Y
    bce8:	99 81       	ldd	r25, Y+1	; 0x01
    bcea:	c5 54       	subi	r28, 0x45	; 69
    bcec:	d1 40       	sbci	r29, 0x01	; 1
    bcee:	c9 5e       	subi	r28, 0xE9	; 233
    bcf0:	de 4f       	sbci	r29, 0xFE	; 254
    bcf2:	99 83       	std	Y+1, r25	; 0x01
    bcf4:	88 83       	st	Y, r24
    bcf6:	c7 51       	subi	r28, 0x17	; 23
    bcf8:	d1 40       	sbci	r29, 0x01	; 1
    bcfa:	80 e0       	ldi	r24, 0x00	; 0
    bcfc:	92 e0       	ldi	r25, 0x02	; 2
    bcfe:	0e 94 1c 68 	call	0xd038	; 0xd038 <ff_memalloc>
    bd02:	5c 01       	movw	r10, r24
    bd04:	00 97       	sbiw	r24, 0x00	; 0
    bd06:	09 f4       	brne	.+2      	; 0xbd0a <f_getcwd+0x62>
    bd08:	f3 c0       	rjmp	.+486    	; 0xbef0 <f_getcwd+0x248>
    bd0a:	cb 5b       	subi	r28, 0xBB	; 187
    bd0c:	de 4f       	sbci	r29, 0xFE	; 254
    bd0e:	e8 81       	ld	r30, Y
    bd10:	f9 81       	ldd	r31, Y+1	; 0x01
    bd12:	c5 54       	subi	r28, 0x45	; 69
    bd14:	d1 40       	sbci	r29, 0x01	; 1
    bd16:	94 87       	std	Z+12, r25	; 0x0c
    bd18:	83 87       	std	Z+11, r24	; 0x0b
    bd1a:	85 89       	ldd	r24, Z+21	; 0x15
    bd1c:	96 89       	ldd	r25, Z+22	; 0x16
    bd1e:	a7 89       	ldd	r26, Z+23	; 0x17
    bd20:	b0 8d       	ldd	r27, Z+24	; 0x18
    bd22:	c3 5e       	subi	r28, 0xE3	; 227
    bd24:	de 4f       	sbci	r29, 0xFE	; 254
    bd26:	88 83       	st	Y, r24
    bd28:	99 83       	std	Y+1, r25	; 0x01
    bd2a:	aa 83       	std	Y+2, r26	; 0x02
    bd2c:	bb 83       	std	Y+3, r27	; 0x03
    bd2e:	cd 51       	subi	r28, 0x1D	; 29
    bd30:	d1 40       	sbci	r29, 0x01	; 1
    bd32:	84 01       	movw	r16, r8
    bd34:	ce 01       	movw	r24, r28
    bd36:	01 96       	adiw	r24, 0x01	; 1
    bd38:	6c 01       	movw	r12, r24
    bd3a:	c3 5e       	subi	r28, 0xE3	; 227
    bd3c:	de 4f       	sbci	r29, 0xFE	; 254
    bd3e:	48 80       	ld	r4, Y
    bd40:	59 80       	ldd	r5, Y+1	; 0x01
    bd42:	6a 80       	ldd	r6, Y+2	; 0x02
    bd44:	7b 80       	ldd	r7, Y+3	; 0x03
    bd46:	cd 51       	subi	r28, 0x1D	; 29
    bd48:	d1 40       	sbci	r29, 0x01	; 1
    bd4a:	41 14       	cp	r4, r1
    bd4c:	51 04       	cpc	r5, r1
    bd4e:	61 04       	cpc	r6, r1
    bd50:	71 04       	cpc	r7, r1
    bd52:	09 f4       	brne	.+2      	; 0xbd56 <f_getcwd+0xae>
    bd54:	a3 c0       	rjmp	.+326    	; 0xbe9c <f_getcwd+0x1f4>
    bd56:	40 e2       	ldi	r20, 0x20	; 32
    bd58:	50 e0       	ldi	r21, 0x00	; 0
    bd5a:	60 e0       	ldi	r22, 0x00	; 0
    bd5c:	70 e0       	ldi	r23, 0x00	; 0
    bd5e:	ce 01       	movw	r24, r28
    bd60:	89 5e       	subi	r24, 0xE9	; 233
    bd62:	9e 4f       	sbci	r25, 0xFE	; 254
    bd64:	0e 94 13 4f 	call	0x9e26	; 0x9e26 <dir_sdi>
    bd68:	00 97       	sbiw	r24, 0x00	; 0
    bd6a:	09 f0       	breq	.+2      	; 0xbd6e <f_getcwd+0xc6>
    bd6c:	c6 c0       	rjmp	.+396    	; 0xbefa <f_getcwd+0x252>
    bd6e:	c3 5d       	subi	r28, 0xD3	; 211
    bd70:	de 4f       	sbci	r29, 0xFE	; 254
    bd72:	48 81       	ld	r20, Y
    bd74:	59 81       	ldd	r21, Y+1	; 0x01
    bd76:	6a 81       	ldd	r22, Y+2	; 0x02
    bd78:	7b 81       	ldd	r23, Y+3	; 0x03
    bd7a:	cd 52       	subi	r28, 0x2D	; 45
    bd7c:	d1 40       	sbci	r29, 0x01	; 1
    bd7e:	cb 5b       	subi	r28, 0xBB	; 187
    bd80:	de 4f       	sbci	r29, 0xFE	; 254
    bd82:	88 81       	ld	r24, Y
    bd84:	99 81       	ldd	r25, Y+1	; 0x01
    bd86:	c5 54       	subi	r28, 0x45	; 69
    bd88:	d1 40       	sbci	r29, 0x01	; 1
    bd8a:	0e 94 8f 4a 	call	0x951e	; 0x951e <move_window>
    bd8e:	00 97       	sbiw	r24, 0x00	; 0
    bd90:	09 f0       	breq	.+2      	; 0xbd94 <f_getcwd+0xec>
    bd92:	b3 c0       	rjmp	.+358    	; 0xbefa <f_getcwd+0x252>
    bd94:	cf 5c       	subi	r28, 0xCF	; 207
    bd96:	de 4f       	sbci	r29, 0xFE	; 254
    bd98:	68 81       	ld	r22, Y
    bd9a:	79 81       	ldd	r23, Y+1	; 0x01
    bd9c:	c1 53       	subi	r28, 0x31	; 49
    bd9e:	d1 40       	sbci	r29, 0x01	; 1
    bda0:	cb 5b       	subi	r28, 0xBB	; 187
    bda2:	de 4f       	sbci	r29, 0xFE	; 254
    bda4:	e8 81       	ld	r30, Y
    bda6:	f9 81       	ldd	r31, Y+1	; 0x01
    bda8:	c5 54       	subi	r28, 0x45	; 69
    bdaa:	d1 40       	sbci	r29, 0x01	; 1
    bdac:	80 81       	ld	r24, Z
    bdae:	0e 94 00 49 	call	0x9200	; 0x9200 <ld_clust.isra.4>
    bdb2:	c3 5e       	subi	r28, 0xE3	; 227
    bdb4:	de 4f       	sbci	r29, 0xFE	; 254
    bdb6:	68 83       	st	Y, r22
    bdb8:	79 83       	std	Y+1, r23	; 0x01
    bdba:	8a 83       	std	Y+2, r24	; 0x02
    bdbc:	9b 83       	std	Y+3, r25	; 0x03
    bdbe:	cd 51       	subi	r28, 0x1D	; 29
    bdc0:	d1 40       	sbci	r29, 0x01	; 1
    bdc2:	40 e0       	ldi	r20, 0x00	; 0
    bdc4:	50 e0       	ldi	r21, 0x00	; 0
    bdc6:	ba 01       	movw	r22, r20
    bdc8:	ce 01       	movw	r24, r28
    bdca:	89 5e       	subi	r24, 0xE9	; 233
    bdcc:	9e 4f       	sbci	r25, 0xFE	; 254
    bdce:	0e 94 13 4f 	call	0x9e26	; 0x9e26 <dir_sdi>
    bdd2:	00 97       	sbiw	r24, 0x00	; 0
    bdd4:	09 f0       	breq	.+2      	; 0xbdd8 <f_getcwd+0x130>
    bdd6:	91 c0       	rjmp	.+290    	; 0xbefa <f_getcwd+0x252>
    bdd8:	60 e0       	ldi	r22, 0x00	; 0
    bdda:	70 e0       	ldi	r23, 0x00	; 0
    bddc:	ce 01       	movw	r24, r28
    bdde:	89 5e       	subi	r24, 0xE9	; 233
    bde0:	9e 4f       	sbci	r25, 0xFE	; 254
    bde2:	0e 94 ac 52 	call	0xa558	; 0xa558 <dir_read>
    bde6:	00 97       	sbiw	r24, 0x00	; 0
    bde8:	09 f0       	breq	.+2      	; 0xbdec <f_getcwd+0x144>
    bdea:	89 c0       	rjmp	.+274    	; 0xbefe <f_getcwd+0x256>
    bdec:	cf 5c       	subi	r28, 0xCF	; 207
    bdee:	de 4f       	sbci	r29, 0xFE	; 254
    bdf0:	68 81       	ld	r22, Y
    bdf2:	79 81       	ldd	r23, Y+1	; 0x01
    bdf4:	c1 53       	subi	r28, 0x31	; 49
    bdf6:	d1 40       	sbci	r29, 0x01	; 1
    bdf8:	cb 5b       	subi	r28, 0xBB	; 187
    bdfa:	de 4f       	sbci	r29, 0xFE	; 254
    bdfc:	e8 81       	ld	r30, Y
    bdfe:	f9 81       	ldd	r31, Y+1	; 0x01
    be00:	c5 54       	subi	r28, 0x45	; 69
    be02:	d1 40       	sbci	r29, 0x01	; 1
    be04:	80 81       	ld	r24, Z
    be06:	0e 94 00 49 	call	0x9200	; 0x9200 <ld_clust.isra.4>
    be0a:	46 16       	cp	r4, r22
    be0c:	57 06       	cpc	r5, r23
    be0e:	68 06       	cpc	r6, r24
    be10:	79 06       	cpc	r7, r25
    be12:	41 f4       	brne	.+16     	; 0xbe24 <f_getcwd+0x17c>
    be14:	b6 01       	movw	r22, r12
    be16:	ce 01       	movw	r24, r28
    be18:	89 5e       	subi	r24, 0xE9	; 233
    be1a:	9e 4f       	sbci	r25, 0xFE	; 254
    be1c:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <get_fileinfo>
    be20:	f6 01       	movw	r30, r12
    be22:	0a c0       	rjmp	.+20     	; 0xbe38 <f_getcwd+0x190>
    be24:	60 e0       	ldi	r22, 0x00	; 0
    be26:	70 e0       	ldi	r23, 0x00	; 0
    be28:	ce 01       	movw	r24, r28
    be2a:	89 5e       	subi	r24, 0xE9	; 233
    be2c:	9e 4f       	sbci	r25, 0xFE	; 254
    be2e:	0e 94 8b 51 	call	0xa316	; 0xa316 <dir_next>
    be32:	00 97       	sbiw	r24, 0x00	; 0
    be34:	89 f2       	breq	.-94     	; 0xbdd8 <f_getcwd+0x130>
    be36:	63 c0       	rjmp	.+198    	; 0xbefe <f_getcwd+0x256>
    be38:	cf 01       	movw	r24, r30
    be3a:	8c 19       	sub	r24, r12
    be3c:	9d 09       	sbc	r25, r13
    be3e:	31 96       	adiw	r30, 0x01	; 1
    be40:	25 89       	ldd	r18, Z+21	; 0x15
    be42:	21 11       	cpse	r18, r1
    be44:	f9 cf       	rjmp	.-14     	; 0xbe38 <f_getcwd+0x190>
    be46:	9c 01       	movw	r18, r24
    be48:	2f 5f       	subi	r18, 0xFF	; 255
    be4a:	3f 4f       	sbci	r19, 0xFF	; 255
    be4c:	02 17       	cp	r16, r18
    be4e:	13 07       	cpc	r17, r19
    be50:	08 f4       	brcc	.+2      	; 0xbe54 <f_getcwd+0x1ac>
    be52:	51 c0       	rjmp	.+162    	; 0xbef6 <f_getcwd+0x24e>
    be54:	f6 01       	movw	r30, r12
    be56:	e8 0f       	add	r30, r24
    be58:	f9 1f       	adc	r31, r25
    be5a:	98 01       	movw	r18, r16
    be5c:	ce 16       	cp	r12, r30
    be5e:	df 06       	cpc	r13, r31
    be60:	71 f0       	breq	.+28     	; 0xbe7e <f_getcwd+0x1d6>
    be62:	21 50       	subi	r18, 0x01	; 1
    be64:	31 09       	sbc	r19, r1
    be66:	45 89       	ldd	r20, Z+21	; 0x15
    be68:	c9 5b       	subi	r28, 0xB9	; 185
    be6a:	de 4f       	sbci	r29, 0xFE	; 254
    be6c:	a8 81       	ld	r26, Y
    be6e:	b9 81       	ldd	r27, Y+1	; 0x01
    be70:	c7 54       	subi	r28, 0x47	; 71
    be72:	d1 40       	sbci	r29, 0x01	; 1
    be74:	a2 0f       	add	r26, r18
    be76:	b3 1f       	adc	r27, r19
    be78:	4c 93       	st	X, r20
    be7a:	31 97       	sbiw	r30, 0x01	; 1
    be7c:	ef cf       	rjmp	.-34     	; 0xbe5c <f_getcwd+0x1b4>
    be7e:	80 95       	com	r24
    be80:	90 95       	com	r25
    be82:	08 0f       	add	r16, r24
    be84:	19 1f       	adc	r17, r25
    be86:	c9 5b       	subi	r28, 0xB9	; 185
    be88:	de 4f       	sbci	r29, 0xFE	; 254
    be8a:	e8 81       	ld	r30, Y
    be8c:	f9 81       	ldd	r31, Y+1	; 0x01
    be8e:	c7 54       	subi	r28, 0x47	; 71
    be90:	d1 40       	sbci	r29, 0x01	; 1
    be92:	e0 0f       	add	r30, r16
    be94:	f1 1f       	adc	r31, r17
    be96:	9f e2       	ldi	r25, 0x2F	; 47
    be98:	90 83       	st	Z, r25
    be9a:	4f cf       	rjmp	.-354    	; 0xbd3a <f_getcwd+0x92>
    be9c:	08 15       	cp	r16, r8
    be9e:	19 05       	cpc	r17, r9
    bea0:	61 f4       	brne	.+24     	; 0xbeba <f_getcwd+0x212>
    bea2:	01 50       	subi	r16, 0x01	; 1
    bea4:	11 09       	sbc	r17, r1
    bea6:	c9 5b       	subi	r28, 0xB9	; 185
    bea8:	de 4f       	sbci	r29, 0xFE	; 254
    beaa:	e8 81       	ld	r30, Y
    beac:	f9 81       	ldd	r31, Y+1	; 0x01
    beae:	c7 54       	subi	r28, 0x47	; 71
    beb0:	d1 40       	sbci	r29, 0x01	; 1
    beb2:	e0 0f       	add	r30, r16
    beb4:	f1 1f       	adc	r31, r17
    beb6:	8f e2       	ldi	r24, 0x2F	; 47
    beb8:	80 83       	st	Z, r24
    beba:	ef ef       	ldi	r30, 0xFF	; 255
    bebc:	ee 1a       	sub	r14, r30
    bebe:	fe 0a       	sbc	r15, r30
    bec0:	c9 5b       	subi	r28, 0xB9	; 185
    bec2:	de 4f       	sbci	r29, 0xFE	; 254
    bec4:	e8 81       	ld	r30, Y
    bec6:	f9 81       	ldd	r31, Y+1	; 0x01
    bec8:	c7 54       	subi	r28, 0x47	; 71
    beca:	d1 40       	sbci	r29, 0x01	; 1
    becc:	e0 0f       	add	r30, r16
    bece:	f1 1f       	adc	r31, r17
    bed0:	80 81       	ld	r24, Z
    bed2:	f7 01       	movw	r30, r14
    bed4:	31 97       	sbiw	r30, 0x01	; 1
    bed6:	80 83       	st	Z, r24
    bed8:	0f 5f       	subi	r16, 0xFF	; 255
    beda:	1f 4f       	sbci	r17, 0xFF	; 255
    bedc:	08 15       	cp	r16, r8
    bede:	19 05       	cpc	r17, r9
    bee0:	60 f3       	brcs	.-40     	; 0xbeba <f_getcwd+0x212>
    bee2:	c5 01       	movw	r24, r10
    bee4:	0e 94 1f 68 	call	0xd03e	; 0xd03e <ff_memfree>
    bee8:	f7 01       	movw	r30, r14
    beea:	10 82       	st	Z, r1
    beec:	c1 01       	movw	r24, r2
    beee:	0d c0       	rjmp	.+26     	; 0xbf0a <f_getcwd+0x262>
    bef0:	81 e1       	ldi	r24, 0x11	; 17
    bef2:	90 e0       	ldi	r25, 0x00	; 0
    bef4:	0a c0       	rjmp	.+20     	; 0xbf0a <f_getcwd+0x262>
    bef6:	81 e1       	ldi	r24, 0x11	; 17
    bef8:	90 e0       	ldi	r25, 0x00	; 0
    befa:	1c 01       	movw	r2, r24
    befc:	f2 cf       	rjmp	.-28     	; 0xbee2 <f_getcwd+0x23a>
    befe:	84 30       	cpi	r24, 0x04	; 4
    bf00:	91 05       	cpc	r25, r1
    bf02:	d9 f7       	brne	.-10     	; 0xbefa <f_getcwd+0x252>
    bf04:	82 e0       	ldi	r24, 0x02	; 2
    bf06:	90 e0       	ldi	r25, 0x00	; 0
    bf08:	f8 cf       	rjmp	.-16     	; 0xbefa <f_getcwd+0x252>
    bf0a:	c8 5b       	subi	r28, 0xB8	; 184
    bf0c:	de 4f       	sbci	r29, 0xFE	; 254
    bf0e:	e2 e1       	ldi	r30, 0x12	; 18
    bf10:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

0000bf14 <f_lseek>:
    bf14:	aa e0       	ldi	r26, 0x0A	; 10
    bf16:	b0 e0       	ldi	r27, 0x00	; 0
    bf18:	e0 e9       	ldi	r30, 0x90	; 144
    bf1a:	ff e5       	ldi	r31, 0x5F	; 95
    bf1c:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
    bf20:	1c 01       	movw	r2, r24
    bf22:	6a 01       	movw	r12, r20
    bf24:	7b 01       	movw	r14, r22
    bf26:	be 01       	movw	r22, r28
    bf28:	6f 5f       	subi	r22, 0xFF	; 255
    bf2a:	7f 4f       	sbci	r23, 0xFF	; 255
    bf2c:	0e 94 0c 47 	call	0x8e18	; 0x8e18 <validate>
    bf30:	00 97       	sbiw	r24, 0x00	; 0
    bf32:	09 f0       	breq	.+2      	; 0xbf36 <f_lseek+0x22>
    bf34:	a7 c2       	rjmp	.+1358   	; 0xc484 <f_lseek+0x570>
    bf36:	f1 01       	movw	r30, r2
    bf38:	87 85       	ldd	r24, Z+15	; 0x0f
    bf3a:	90 e0       	ldi	r25, 0x00	; 0
    bf3c:	00 97       	sbiw	r24, 0x00	; 0
    bf3e:	09 f0       	breq	.+2      	; 0xbf42 <f_lseek+0x2e>
    bf40:	a1 c2       	rjmp	.+1346   	; 0xc484 <f_lseek+0x570>
    bf42:	22 a1       	ldd	r18, Z+34	; 0x22
    bf44:	33 a1       	ldd	r19, Z+35	; 0x23
    bf46:	21 15       	cp	r18, r1
    bf48:	31 05       	cpc	r19, r1
    bf4a:	09 f4       	brne	.+2      	; 0xbf4e <f_lseek+0x3a>
    bf4c:	2e c1       	rjmp	.+604    	; 0xc1aa <f_lseek+0x296>
    bf4e:	ff ef       	ldi	r31, 0xFF	; 255
    bf50:	cf 16       	cp	r12, r31
    bf52:	df 06       	cpc	r13, r31
    bf54:	ef 06       	cpc	r14, r31
    bf56:	ff 06       	cpc	r15, r31
    bf58:	09 f0       	breq	.+2      	; 0xbf5c <f_lseek+0x48>
    bf5a:	9a c0       	rjmp	.+308    	; 0xc090 <f_lseek+0x17c>
    bf5c:	89 01       	movw	r16, r18
    bf5e:	0c 5f       	subi	r16, 0xFC	; 252
    bf60:	1f 4f       	sbci	r17, 0xFF	; 255
    bf62:	d9 01       	movw	r26, r18
    bf64:	4d 91       	ld	r20, X+
    bf66:	5d 91       	ld	r21, X+
    bf68:	6d 91       	ld	r22, X+
    bf6a:	7c 91       	ld	r23, X
    bf6c:	4f 83       	std	Y+7, r20	; 0x07
    bf6e:	58 87       	std	Y+8, r21	; 0x08
    bf70:	69 87       	std	Y+9, r22	; 0x09
    bf72:	7a 87       	std	Y+10, r23	; 0x0a
    bf74:	f1 01       	movw	r30, r2
    bf76:	86 80       	ldd	r8, Z+6	; 0x06
    bf78:	97 80       	ldd	r9, Z+7	; 0x07
    bf7a:	a0 84       	ldd	r10, Z+8	; 0x08
    bf7c:	b1 84       	ldd	r11, Z+9	; 0x09
    bf7e:	52 e0       	ldi	r21, 0x02	; 2
    bf80:	c5 2e       	mov	r12, r21
    bf82:	d1 2c       	mov	r13, r1
    bf84:	e1 2c       	mov	r14, r1
    bf86:	f1 2c       	mov	r15, r1
    bf88:	81 14       	cp	r8, r1
    bf8a:	91 04       	cpc	r9, r1
    bf8c:	a1 04       	cpc	r10, r1
    bf8e:	b1 04       	cpc	r11, r1
    bf90:	09 f4       	brne	.+2      	; 0xbf94 <f_lseek+0x80>
    bf92:	65 c0       	rjmp	.+202    	; 0xc05e <f_lseek+0x14a>
    bf94:	24 01       	movw	r4, r8
    bf96:	35 01       	movw	r6, r10
    bf98:	1b 82       	std	Y+3, r1	; 0x03
    bf9a:	1c 82       	std	Y+4, r1	; 0x04
    bf9c:	1d 82       	std	Y+5, r1	; 0x05
    bf9e:	1e 82       	std	Y+6, r1	; 0x06
    bfa0:	2b 81       	ldd	r18, Y+3	; 0x03
    bfa2:	3c 81       	ldd	r19, Y+4	; 0x04
    bfa4:	4d 81       	ldd	r20, Y+5	; 0x05
    bfa6:	5e 81       	ldd	r21, Y+6	; 0x06
    bfa8:	2f 5f       	subi	r18, 0xFF	; 255
    bfaa:	3f 4f       	sbci	r19, 0xFF	; 255
    bfac:	4f 4f       	sbci	r20, 0xFF	; 255
    bfae:	5f 4f       	sbci	r21, 0xFF	; 255
    bfb0:	2b 83       	std	Y+3, r18	; 0x03
    bfb2:	3c 83       	std	Y+4, r19	; 0x04
    bfb4:	4d 83       	std	Y+5, r20	; 0x05
    bfb6:	5e 83       	std	Y+6, r21	; 0x06
    bfb8:	b3 01       	movw	r22, r6
    bfba:	a2 01       	movw	r20, r4
    bfbc:	d1 01       	movw	r26, r2
    bfbe:	8d 91       	ld	r24, X+
    bfc0:	9c 91       	ld	r25, X
    bfc2:	0e 94 5f 4e 	call	0x9cbe	; 0x9cbe <get_fat.isra.10>
    bfc6:	62 30       	cpi	r22, 0x02	; 2
    bfc8:	71 05       	cpc	r23, r1
    bfca:	81 05       	cpc	r24, r1
    bfcc:	91 05       	cpc	r25, r1
    bfce:	10 f4       	brcc	.+4      	; 0xbfd4 <f_lseek+0xc0>
    bfd0:	82 e0       	ldi	r24, 0x02	; 2
    bfd2:	07 c0       	rjmp	.+14     	; 0xbfe2 <f_lseek+0xce>
    bfd4:	6f 3f       	cpi	r22, 0xFF	; 255
    bfd6:	ff ef       	ldi	r31, 0xFF	; 255
    bfd8:	7f 07       	cpc	r23, r31
    bfda:	8f 07       	cpc	r24, r31
    bfdc:	9f 07       	cpc	r25, r31
    bfde:	29 f4       	brne	.+10     	; 0xbfea <f_lseek+0xd6>
    bfe0:	81 e0       	ldi	r24, 0x01	; 1
    bfe2:	f1 01       	movw	r30, r2
    bfe4:	87 87       	std	Z+15, r24	; 0x0f
    bfe6:	90 e0       	ldi	r25, 0x00	; 0
    bfe8:	4d c2       	rjmp	.+1178   	; 0xc484 <f_lseek+0x570>
    bfea:	a3 01       	movw	r20, r6
    bfec:	92 01       	movw	r18, r4
    bfee:	2f 5f       	subi	r18, 0xFF	; 255
    bff0:	3f 4f       	sbci	r19, 0xFF	; 255
    bff2:	4f 4f       	sbci	r20, 0xFF	; 255
    bff4:	5f 4f       	sbci	r21, 0xFF	; 255
    bff6:	2b 01       	movw	r4, r22
    bff8:	3c 01       	movw	r6, r24
    bffa:	62 17       	cp	r22, r18
    bffc:	73 07       	cpc	r23, r19
    bffe:	84 07       	cpc	r24, r20
    c000:	95 07       	cpc	r25, r21
    c002:	71 f2       	breq	.-100    	; 0xbfa0 <f_lseek+0x8c>
    c004:	f2 e0       	ldi	r31, 0x02	; 2
    c006:	cf 0e       	add	r12, r31
    c008:	d1 1c       	adc	r13, r1
    c00a:	e1 1c       	adc	r14, r1
    c00c:	f1 1c       	adc	r15, r1
    c00e:	2f 81       	ldd	r18, Y+7	; 0x07
    c010:	38 85       	ldd	r19, Y+8	; 0x08
    c012:	49 85       	ldd	r20, Y+9	; 0x09
    c014:	5a 85       	ldd	r21, Y+10	; 0x0a
    c016:	2c 15       	cp	r18, r12
    c018:	3d 05       	cpc	r19, r13
    c01a:	4e 05       	cpc	r20, r14
    c01c:	5f 05       	cpc	r21, r15
    c01e:	88 f0       	brcs	.+34     	; 0xc042 <f_lseek+0x12e>
    c020:	2b 81       	ldd	r18, Y+3	; 0x03
    c022:	3c 81       	ldd	r19, Y+4	; 0x04
    c024:	4d 81       	ldd	r20, Y+5	; 0x05
    c026:	5e 81       	ldd	r21, Y+6	; 0x06
    c028:	d8 01       	movw	r26, r16
    c02a:	2d 93       	st	X+, r18
    c02c:	3d 93       	st	X+, r19
    c02e:	4d 93       	st	X+, r20
    c030:	5c 93       	st	X, r21
    c032:	13 97       	sbiw	r26, 0x03	; 3
    c034:	f8 01       	movw	r30, r16
    c036:	84 82       	std	Z+4, r8	; 0x04
    c038:	95 82       	std	Z+5, r9	; 0x05
    c03a:	a6 82       	std	Z+6, r10	; 0x06
    c03c:	b7 82       	std	Z+7, r11	; 0x07
    c03e:	08 5f       	subi	r16, 0xF8	; 248
    c040:	1f 4f       	sbci	r17, 0xFF	; 255
    c042:	e9 81       	ldd	r30, Y+1	; 0x01
    c044:	fa 81       	ldd	r31, Y+2	; 0x02
    c046:	81 8c       	ldd	r8, Z+25	; 0x19
    c048:	92 8c       	ldd	r9, Z+26	; 0x1a
    c04a:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c04c:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c04e:	68 15       	cp	r22, r8
    c050:	79 05       	cpc	r23, r9
    c052:	8a 05       	cpc	r24, r10
    c054:	9b 05       	cpc	r25, r11
    c056:	18 f4       	brcc	.+6      	; 0xc05e <f_lseek+0x14a>
    c058:	4b 01       	movw	r8, r22
    c05a:	5c 01       	movw	r10, r24
    c05c:	9b cf       	rjmp	.-202    	; 0xbf94 <f_lseek+0x80>
    c05e:	f1 01       	movw	r30, r2
    c060:	a2 a1       	ldd	r26, Z+34	; 0x22
    c062:	b3 a1       	ldd	r27, Z+35	; 0x23
    c064:	cd 92       	st	X+, r12
    c066:	dd 92       	st	X+, r13
    c068:	ed 92       	st	X+, r14
    c06a:	fc 92       	st	X, r15
    c06c:	13 97       	sbiw	r26, 0x03	; 3
    c06e:	2f 81       	ldd	r18, Y+7	; 0x07
    c070:	38 85       	ldd	r19, Y+8	; 0x08
    c072:	49 85       	ldd	r20, Y+9	; 0x09
    c074:	5a 85       	ldd	r21, Y+10	; 0x0a
    c076:	2c 15       	cp	r18, r12
    c078:	3d 05       	cpc	r19, r13
    c07a:	4e 05       	cpc	r20, r14
    c07c:	5f 05       	cpc	r21, r15
    c07e:	08 f4       	brcc	.+2      	; 0xc082 <f_lseek+0x16e>
    c080:	f8 c1       	rjmp	.+1008   	; 0xc472 <f_lseek+0x55e>
    c082:	d8 01       	movw	r26, r16
    c084:	1d 92       	st	X+, r1
    c086:	1d 92       	st	X+, r1
    c088:	1d 92       	st	X+, r1
    c08a:	1c 92       	st	X, r1
    c08c:	13 97       	sbiw	r26, 0x03	; 3
    c08e:	ef c1       	rjmp	.+990    	; 0xc46e <f_lseek+0x55a>
    c090:	f1 01       	movw	r30, r2
    c092:	82 85       	ldd	r24, Z+10	; 0x0a
    c094:	93 85       	ldd	r25, Z+11	; 0x0b
    c096:	a4 85       	ldd	r26, Z+12	; 0x0c
    c098:	b5 85       	ldd	r27, Z+13	; 0x0d
    c09a:	46 01       	movw	r8, r12
    c09c:	57 01       	movw	r10, r14
    c09e:	8c 15       	cp	r24, r12
    c0a0:	9d 05       	cpc	r25, r13
    c0a2:	ae 05       	cpc	r26, r14
    c0a4:	bf 05       	cpc	r27, r15
    c0a6:	10 f4       	brcc	.+4      	; 0xc0ac <f_lseek+0x198>
    c0a8:	4c 01       	movw	r8, r24
    c0aa:	5d 01       	movw	r10, r26
    c0ac:	f1 01       	movw	r30, r2
    c0ae:	80 8a       	std	Z+16, r8	; 0x10
    c0b0:	91 8a       	std	Z+17, r9	; 0x11
    c0b2:	a2 8a       	std	Z+18, r10	; 0x12
    c0b4:	b3 8a       	std	Z+19, r11	; 0x13
    c0b6:	81 14       	cp	r8, r1
    c0b8:	91 04       	cpc	r9, r1
    c0ba:	a1 04       	cpc	r10, r1
    c0bc:	b1 04       	cpc	r11, r1
    c0be:	09 f4       	brne	.+2      	; 0xc0c2 <f_lseek+0x1ae>
    c0c0:	d6 c1       	rjmp	.+940    	; 0xc46e <f_lseek+0x55a>
    c0c2:	24 01       	movw	r4, r8
    c0c4:	35 01       	movw	r6, r10
    c0c6:	f1 e0       	ldi	r31, 0x01	; 1
    c0c8:	4f 1a       	sub	r4, r31
    c0ca:	51 08       	sbc	r5, r1
    c0cc:	61 08       	sbc	r6, r1
    c0ce:	71 08       	sbc	r7, r1
    c0d0:	b3 01       	movw	r22, r6
    c0d2:	a2 01       	movw	r20, r4
    c0d4:	c1 01       	movw	r24, r2
    c0d6:	0e 94 95 46 	call	0x8d2a	; 0x8d2a <clmt_clust>
    c0da:	ab 01       	movw	r20, r22
    c0dc:	bc 01       	movw	r22, r24
    c0de:	f1 01       	movw	r30, r2
    c0e0:	44 8b       	std	Z+20, r20	; 0x14
    c0e2:	55 8b       	std	Z+21, r21	; 0x15
    c0e4:	66 8b       	std	Z+22, r22	; 0x16
    c0e6:	77 8b       	std	Z+23, r23	; 0x17
    c0e8:	e9 80       	ldd	r14, Y+1	; 0x01
    c0ea:	fa 80       	ldd	r15, Y+2	; 0x02
    c0ec:	c7 01       	movw	r24, r14
    c0ee:	0e 94 6d 46 	call	0x8cda	; 0x8cda <clst2sect>
    c0f2:	61 15       	cp	r22, r1
    c0f4:	71 05       	cpc	r23, r1
    c0f6:	81 05       	cpc	r24, r1
    c0f8:	91 05       	cpc	r25, r1
    c0fa:	09 f4       	brne	.+2      	; 0xc0fe <f_lseek+0x1ea>
    c0fc:	69 cf       	rjmp	.-302    	; 0xbfd0 <f_lseek+0xbc>
    c0fe:	95 01       	movw	r18, r10
    c100:	84 01       	movw	r16, r8
    c102:	11 70       	andi	r17, 0x01	; 1
    c104:	22 27       	eor	r18, r18
    c106:	33 27       	eor	r19, r19
    c108:	01 15       	cp	r16, r1
    c10a:	11 05       	cpc	r17, r1
    c10c:	21 05       	cpc	r18, r1
    c10e:	31 05       	cpc	r19, r1
    c110:	09 f4       	brne	.+2      	; 0xc114 <f_lseek+0x200>
    c112:	ad c1       	rjmp	.+858    	; 0xc46e <f_lseek+0x55a>
    c114:	f7 01       	movw	r30, r14
    c116:	81 84       	ldd	r8, Z+9	; 0x09
    c118:	92 84       	ldd	r9, Z+10	; 0x0a
    c11a:	f1 e0       	ldi	r31, 0x01	; 1
    c11c:	8f 1a       	sub	r8, r31
    c11e:	91 08       	sbc	r9, r1
    c120:	a1 2c       	mov	r10, r1
    c122:	b1 2c       	mov	r11, r1
    c124:	49 e0       	ldi	r20, 0x09	; 9
    c126:	76 94       	lsr	r7
    c128:	67 94       	ror	r6
    c12a:	57 94       	ror	r5
    c12c:	47 94       	ror	r4
    c12e:	4a 95       	dec	r20
    c130:	d1 f7       	brne	.-12     	; 0xc126 <f_lseek+0x212>
    c132:	48 20       	and	r4, r8
    c134:	59 20       	and	r5, r9
    c136:	6a 20       	and	r6, r10
    c138:	7b 20       	and	r7, r11
    c13a:	53 01       	movw	r10, r6
    c13c:	42 01       	movw	r8, r4
    c13e:	86 0e       	add	r8, r22
    c140:	97 1e       	adc	r9, r23
    c142:	a8 1e       	adc	r10, r24
    c144:	b9 1e       	adc	r11, r25
    c146:	f1 01       	movw	r30, r2
    c148:	20 8d       	ldd	r18, Z+24	; 0x18
    c14a:	31 8d       	ldd	r19, Z+25	; 0x19
    c14c:	42 8d       	ldd	r20, Z+26	; 0x1a
    c14e:	53 8d       	ldd	r21, Z+27	; 0x1b
    c150:	82 16       	cp	r8, r18
    c152:	93 06       	cpc	r9, r19
    c154:	a4 06       	cpc	r10, r20
    c156:	b5 06       	cpc	r11, r21
    c158:	09 f4       	brne	.+2      	; 0xc15c <f_lseek+0x248>
    c15a:	89 c1       	rjmp	.+786    	; 0xc46e <f_lseek+0x55a>
    c15c:	86 85       	ldd	r24, Z+14	; 0x0e
    c15e:	b1 01       	movw	r22, r2
    c160:	6c 5d       	subi	r22, 0xDC	; 220
    c162:	7f 4f       	sbci	r23, 0xFF	; 255
    c164:	6b 01       	movw	r12, r22
    c166:	87 ff       	sbrs	r24, 7
    c168:	0d c0       	rjmp	.+26     	; 0xc184 <f_lseek+0x270>
    c16a:	01 e0       	ldi	r16, 0x01	; 1
    c16c:	10 e0       	ldi	r17, 0x00	; 0
    c16e:	f7 01       	movw	r30, r14
    c170:	81 81       	ldd	r24, Z+1	; 0x01
    c172:	0e 94 e8 68 	call	0xd1d0	; 0xd1d0 <disk_write>
    c176:	89 2b       	or	r24, r25
    c178:	09 f0       	breq	.+2      	; 0xc17c <f_lseek+0x268>
    c17a:	32 cf       	rjmp	.-412    	; 0xbfe0 <f_lseek+0xcc>
    c17c:	f1 01       	movw	r30, r2
    c17e:	86 85       	ldd	r24, Z+14	; 0x0e
    c180:	8f 77       	andi	r24, 0x7F	; 127
    c182:	86 87       	std	Z+14, r24	; 0x0e
    c184:	e9 81       	ldd	r30, Y+1	; 0x01
    c186:	fa 81       	ldd	r31, Y+2	; 0x02
    c188:	01 e0       	ldi	r16, 0x01	; 1
    c18a:	10 e0       	ldi	r17, 0x00	; 0
    c18c:	a5 01       	movw	r20, r10
    c18e:	94 01       	movw	r18, r8
    c190:	b6 01       	movw	r22, r12
    c192:	81 81       	ldd	r24, Z+1	; 0x01
    c194:	0e 94 d8 68 	call	0xd1b0	; 0xd1b0 <disk_read>
    c198:	89 2b       	or	r24, r25
    c19a:	09 f0       	breq	.+2      	; 0xc19e <f_lseek+0x28a>
    c19c:	21 cf       	rjmp	.-446    	; 0xbfe0 <f_lseek+0xcc>
    c19e:	f1 01       	movw	r30, r2
    c1a0:	80 8e       	std	Z+24, r8	; 0x18
    c1a2:	91 8e       	std	Z+25, r9	; 0x19
    c1a4:	a2 8e       	std	Z+26, r10	; 0x1a
    c1a6:	b3 8e       	std	Z+27, r11	; 0x1b
    c1a8:	62 c1       	rjmp	.+708    	; 0xc46e <f_lseek+0x55a>
    c1aa:	f1 01       	movw	r30, r2
    c1ac:	82 85       	ldd	r24, Z+10	; 0x0a
    c1ae:	93 85       	ldd	r25, Z+11	; 0x0b
    c1b0:	a4 85       	ldd	r26, Z+12	; 0x0c
    c1b2:	b5 85       	ldd	r27, Z+13	; 0x0d
    c1b4:	8c 15       	cp	r24, r12
    c1b6:	9d 05       	cpc	r25, r13
    c1b8:	ae 05       	cpc	r26, r14
    c1ba:	bf 05       	cpc	r27, r15
    c1bc:	28 f4       	brcc	.+10     	; 0xc1c8 <f_lseek+0x2b4>
    c1be:	26 85       	ldd	r18, Z+14	; 0x0e
    c1c0:	21 fd       	sbrc	r18, 1
    c1c2:	02 c0       	rjmp	.+4      	; 0xc1c8 <f_lseek+0x2b4>
    c1c4:	6c 01       	movw	r12, r24
    c1c6:	7d 01       	movw	r14, r26
    c1c8:	f1 01       	movw	r30, r2
    c1ca:	40 88       	ldd	r4, Z+16	; 0x10
    c1cc:	51 88       	ldd	r5, Z+17	; 0x11
    c1ce:	62 88       	ldd	r6, Z+18	; 0x12
    c1d0:	73 88       	ldd	r7, Z+19	; 0x13
    c1d2:	10 8a       	std	Z+16, r1	; 0x10
    c1d4:	11 8a       	std	Z+17, r1	; 0x11
    c1d6:	12 8a       	std	Z+18, r1	; 0x12
    c1d8:	13 8a       	std	Z+19, r1	; 0x13
    c1da:	c1 14       	cp	r12, r1
    c1dc:	d1 04       	cpc	r13, r1
    c1de:	e1 04       	cpc	r14, r1
    c1e0:	f1 04       	cpc	r15, r1
    c1e2:	09 f4       	brne	.+2      	; 0xc1e6 <f_lseek+0x2d2>
    c1e4:	48 c1       	rjmp	.+656    	; 0xc476 <f_lseek+0x562>
    c1e6:	e9 81       	ldd	r30, Y+1	; 0x01
    c1e8:	fa 81       	ldd	r31, Y+2	; 0x02
    c1ea:	81 84       	ldd	r8, Z+9	; 0x09
    c1ec:	92 84       	ldd	r9, Z+10	; 0x0a
    c1ee:	a1 2c       	mov	r10, r1
    c1f0:	b1 2c       	mov	r11, r1
    c1f2:	39 e0       	ldi	r19, 0x09	; 9
    c1f4:	88 0c       	add	r8, r8
    c1f6:	99 1c       	adc	r9, r9
    c1f8:	aa 1c       	adc	r10, r10
    c1fa:	bb 1c       	adc	r11, r11
    c1fc:	3a 95       	dec	r19
    c1fe:	d1 f7       	brne	.-12     	; 0xc1f4 <f_lseek+0x2e0>
    c200:	41 14       	cp	r4, r1
    c202:	51 04       	cpc	r5, r1
    c204:	61 04       	cpc	r6, r1
    c206:	71 04       	cpc	r7, r1
    c208:	d9 f1       	breq	.+118    	; 0xc280 <f_lseek+0x36c>
    c20a:	f1 e0       	ldi	r31, 0x01	; 1
    c20c:	4f 1a       	sub	r4, r31
    c20e:	51 08       	sbc	r5, r1
    c210:	61 08       	sbc	r6, r1
    c212:	71 08       	sbc	r7, r1
    c214:	c7 01       	movw	r24, r14
    c216:	b6 01       	movw	r22, r12
    c218:	61 50       	subi	r22, 0x01	; 1
    c21a:	71 09       	sbc	r23, r1
    c21c:	81 09       	sbc	r24, r1
    c21e:	91 09       	sbc	r25, r1
    c220:	a5 01       	movw	r20, r10
    c222:	94 01       	movw	r18, r8
    c224:	0e 94 ef e2 	call	0x1c5de	; 0x1c5de <__udivmodsi4>
    c228:	2b 83       	std	Y+3, r18	; 0x03
    c22a:	3c 83       	std	Y+4, r19	; 0x04
    c22c:	4d 83       	std	Y+5, r20	; 0x05
    c22e:	5e 83       	std	Y+6, r21	; 0x06
    c230:	c3 01       	movw	r24, r6
    c232:	b2 01       	movw	r22, r4
    c234:	a5 01       	movw	r20, r10
    c236:	94 01       	movw	r18, r8
    c238:	0e 94 ef e2 	call	0x1c5de	; 0x1c5de <__udivmodsi4>
    c23c:	6b 81       	ldd	r22, Y+3	; 0x03
    c23e:	7c 81       	ldd	r23, Y+4	; 0x04
    c240:	8d 81       	ldd	r24, Y+5	; 0x05
    c242:	9e 81       	ldd	r25, Y+6	; 0x06
    c244:	62 17       	cp	r22, r18
    c246:	73 07       	cpc	r23, r19
    c248:	84 07       	cpc	r24, r20
    c24a:	95 07       	cpc	r25, r21
    c24c:	c8 f0       	brcs	.+50     	; 0xc280 <f_lseek+0x36c>
    c24e:	88 27       	eor	r24, r24
    c250:	99 27       	eor	r25, r25
    c252:	dc 01       	movw	r26, r24
    c254:	88 19       	sub	r24, r8
    c256:	99 09       	sbc	r25, r9
    c258:	aa 09       	sbc	r26, r10
    c25a:	bb 09       	sbc	r27, r11
    c25c:	48 22       	and	r4, r24
    c25e:	59 22       	and	r5, r25
    c260:	6a 22       	and	r6, r26
    c262:	7b 22       	and	r7, r27
    c264:	f1 01       	movw	r30, r2
    c266:	40 8a       	std	Z+16, r4	; 0x10
    c268:	51 8a       	std	Z+17, r5	; 0x11
    c26a:	62 8a       	std	Z+18, r6	; 0x12
    c26c:	73 8a       	std	Z+19, r7	; 0x13
    c26e:	c4 18       	sub	r12, r4
    c270:	d5 08       	sbc	r13, r5
    c272:	e6 08       	sbc	r14, r6
    c274:	f7 08       	sbc	r15, r7
    c276:	44 89       	ldd	r20, Z+20	; 0x14
    c278:	55 89       	ldd	r21, Z+21	; 0x15
    c27a:	66 89       	ldd	r22, Z+22	; 0x16
    c27c:	77 89       	ldd	r23, Z+23	; 0x17
    c27e:	29 c0       	rjmp	.+82     	; 0xc2d2 <f_lseek+0x3be>
    c280:	f1 01       	movw	r30, r2
    c282:	46 81       	ldd	r20, Z+6	; 0x06
    c284:	57 81       	ldd	r21, Z+7	; 0x07
    c286:	60 85       	ldd	r22, Z+8	; 0x08
    c288:	71 85       	ldd	r23, Z+9	; 0x09
    c28a:	41 15       	cp	r20, r1
    c28c:	51 05       	cpc	r21, r1
    c28e:	61 05       	cpc	r22, r1
    c290:	71 05       	cpc	r23, r1
    c292:	d1 f4       	brne	.+52     	; 0xc2c8 <f_lseek+0x3b4>
    c294:	40 e0       	ldi	r20, 0x00	; 0
    c296:	50 e0       	ldi	r21, 0x00	; 0
    c298:	ba 01       	movw	r22, r20
    c29a:	c1 01       	movw	r24, r2
    c29c:	0e 94 d4 4f 	call	0x9fa8	; 0x9fa8 <create_chain>
    c2a0:	ab 01       	movw	r20, r22
    c2a2:	bc 01       	movw	r22, r24
    c2a4:	41 30       	cpi	r20, 0x01	; 1
    c2a6:	51 05       	cpc	r21, r1
    c2a8:	61 05       	cpc	r22, r1
    c2aa:	71 05       	cpc	r23, r1
    c2ac:	09 f4       	brne	.+2      	; 0xc2b0 <f_lseek+0x39c>
    c2ae:	90 ce       	rjmp	.-736    	; 0xbfd0 <f_lseek+0xbc>
    c2b0:	4f 3f       	cpi	r20, 0xFF	; 255
    c2b2:	ff ef       	ldi	r31, 0xFF	; 255
    c2b4:	5f 07       	cpc	r21, r31
    c2b6:	6f 07       	cpc	r22, r31
    c2b8:	7f 07       	cpc	r23, r31
    c2ba:	09 f4       	brne	.+2      	; 0xc2be <f_lseek+0x3aa>
    c2bc:	91 ce       	rjmp	.-734    	; 0xbfe0 <f_lseek+0xcc>
    c2be:	f1 01       	movw	r30, r2
    c2c0:	46 83       	std	Z+6, r20	; 0x06
    c2c2:	57 83       	std	Z+7, r21	; 0x07
    c2c4:	60 87       	std	Z+8, r22	; 0x08
    c2c6:	71 87       	std	Z+9, r23	; 0x09
    c2c8:	f1 01       	movw	r30, r2
    c2ca:	44 8b       	std	Z+20, r20	; 0x14
    c2cc:	55 8b       	std	Z+21, r21	; 0x15
    c2ce:	66 8b       	std	Z+22, r22	; 0x16
    c2d0:	77 8b       	std	Z+23, r23	; 0x17
    c2d2:	41 15       	cp	r20, r1
    c2d4:	51 05       	cpc	r21, r1
    c2d6:	61 05       	cpc	r22, r1
    c2d8:	71 05       	cpc	r23, r1
    c2da:	09 f0       	breq	.+2      	; 0xc2de <f_lseek+0x3ca>
    c2dc:	40 c0       	rjmp	.+128    	; 0xc35e <f_lseek+0x44a>
    c2de:	c1 2c       	mov	r12, r1
    c2e0:	d1 2c       	mov	r13, r1
    c2e2:	76 01       	movw	r14, r12
    c2e4:	79 c0       	rjmp	.+242    	; 0xc3d8 <f_lseek+0x4c4>
    c2e6:	c8 18       	sub	r12, r8
    c2e8:	d9 08       	sbc	r13, r9
    c2ea:	ea 08       	sbc	r14, r10
    c2ec:	fb 08       	sbc	r15, r11
    c2ee:	f1 01       	movw	r30, r2
    c2f0:	80 89       	ldd	r24, Z+16	; 0x10
    c2f2:	91 89       	ldd	r25, Z+17	; 0x11
    c2f4:	a2 89       	ldd	r26, Z+18	; 0x12
    c2f6:	b3 89       	ldd	r27, Z+19	; 0x13
    c2f8:	88 0d       	add	r24, r8
    c2fa:	99 1d       	adc	r25, r9
    c2fc:	aa 1d       	adc	r26, r10
    c2fe:	bb 1d       	adc	r27, r11
    c300:	80 8b       	std	Z+16, r24	; 0x10
    c302:	91 8b       	std	Z+17, r25	; 0x11
    c304:	a2 8b       	std	Z+18, r26	; 0x12
    c306:	b3 8b       	std	Z+19, r27	; 0x13
    c308:	86 85       	ldd	r24, Z+14	; 0x0e
    c30a:	81 ff       	sbrs	r24, 1
    c30c:	2f c0       	rjmp	.+94     	; 0xc36c <f_lseek+0x458>
    c30e:	c1 01       	movw	r24, r2
    c310:	0e 94 d4 4f 	call	0x9fa8	; 0x9fa8 <create_chain>
    c314:	ab 01       	movw	r20, r22
    c316:	bc 01       	movw	r22, r24
    c318:	41 15       	cp	r20, r1
    c31a:	51 05       	cpc	r21, r1
    c31c:	61 05       	cpc	r22, r1
    c31e:	71 05       	cpc	r23, r1
    c320:	61 f1       	breq	.+88     	; 0xc37a <f_lseek+0x466>
    c322:	4f 3f       	cpi	r20, 0xFF	; 255
    c324:	bf ef       	ldi	r27, 0xFF	; 255
    c326:	5b 07       	cpc	r21, r27
    c328:	6b 07       	cpc	r22, r27
    c32a:	7b 07       	cpc	r23, r27
    c32c:	09 f4       	brne	.+2      	; 0xc330 <f_lseek+0x41c>
    c32e:	58 ce       	rjmp	.-848    	; 0xbfe0 <f_lseek+0xcc>
    c330:	42 30       	cpi	r20, 0x02	; 2
    c332:	51 05       	cpc	r21, r1
    c334:	61 05       	cpc	r22, r1
    c336:	71 05       	cpc	r23, r1
    c338:	08 f4       	brcc	.+2      	; 0xc33c <f_lseek+0x428>
    c33a:	4a ce       	rjmp	.-876    	; 0xbfd0 <f_lseek+0xbc>
    c33c:	e9 81       	ldd	r30, Y+1	; 0x01
    c33e:	fa 81       	ldd	r31, Y+2	; 0x02
    c340:	81 8d       	ldd	r24, Z+25	; 0x19
    c342:	92 8d       	ldd	r25, Z+26	; 0x1a
    c344:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c346:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c348:	48 17       	cp	r20, r24
    c34a:	59 07       	cpc	r21, r25
    c34c:	6a 07       	cpc	r22, r26
    c34e:	7b 07       	cpc	r23, r27
    c350:	08 f0       	brcs	.+2      	; 0xc354 <f_lseek+0x440>
    c352:	3e ce       	rjmp	.-900    	; 0xbfd0 <f_lseek+0xbc>
    c354:	f1 01       	movw	r30, r2
    c356:	44 8b       	std	Z+20, r20	; 0x14
    c358:	55 8b       	std	Z+21, r21	; 0x15
    c35a:	66 8b       	std	Z+22, r22	; 0x16
    c35c:	77 8b       	std	Z+23, r23	; 0x17
    c35e:	8c 14       	cp	r8, r12
    c360:	9d 04       	cpc	r9, r13
    c362:	ae 04       	cpc	r10, r14
    c364:	bf 04       	cpc	r11, r15
    c366:	08 f4       	brcc	.+2      	; 0xc36a <f_lseek+0x456>
    c368:	be cf       	rjmp	.-132    	; 0xc2e6 <f_lseek+0x3d2>
    c36a:	0a c0       	rjmp	.+20     	; 0xc380 <f_lseek+0x46c>
    c36c:	80 81       	ld	r24, Z
    c36e:	91 81       	ldd	r25, Z+1	; 0x01
    c370:	0e 94 5f 4e 	call	0x9cbe	; 0x9cbe <get_fat.isra.10>
    c374:	ab 01       	movw	r20, r22
    c376:	bc 01       	movw	r22, r24
    c378:	d4 cf       	rjmp	.-88     	; 0xc322 <f_lseek+0x40e>
    c37a:	c1 2c       	mov	r12, r1
    c37c:	d1 2c       	mov	r13, r1
    c37e:	76 01       	movw	r14, r12
    c380:	f1 01       	movw	r30, r2
    c382:	80 89       	ldd	r24, Z+16	; 0x10
    c384:	91 89       	ldd	r25, Z+17	; 0x11
    c386:	a2 89       	ldd	r26, Z+18	; 0x12
    c388:	b3 89       	ldd	r27, Z+19	; 0x13
    c38a:	8c 0d       	add	r24, r12
    c38c:	9d 1d       	adc	r25, r13
    c38e:	ae 1d       	adc	r26, r14
    c390:	bf 1d       	adc	r27, r15
    c392:	80 8b       	std	Z+16, r24	; 0x10
    c394:	91 8b       	std	Z+17, r25	; 0x11
    c396:	a2 8b       	std	Z+18, r26	; 0x12
    c398:	b3 8b       	std	Z+19, r27	; 0x13
    c39a:	d7 01       	movw	r26, r14
    c39c:	c6 01       	movw	r24, r12
    c39e:	91 70       	andi	r25, 0x01	; 1
    c3a0:	aa 27       	eor	r26, r26
    c3a2:	bb 27       	eor	r27, r27
    c3a4:	89 2b       	or	r24, r25
    c3a6:	8a 2b       	or	r24, r26
    c3a8:	8b 2b       	or	r24, r27
    c3aa:	09 f4       	brne	.+2      	; 0xc3ae <f_lseek+0x49a>
    c3ac:	98 cf       	rjmp	.-208    	; 0xc2de <f_lseek+0x3ca>
    c3ae:	89 81       	ldd	r24, Y+1	; 0x01
    c3b0:	9a 81       	ldd	r25, Y+2	; 0x02
    c3b2:	0e 94 6d 46 	call	0x8cda	; 0x8cda <clst2sect>
    c3b6:	61 15       	cp	r22, r1
    c3b8:	71 05       	cpc	r23, r1
    c3ba:	81 05       	cpc	r24, r1
    c3bc:	91 05       	cpc	r25, r1
    c3be:	09 f4       	brne	.+2      	; 0xc3c2 <f_lseek+0x4ae>
    c3c0:	07 ce       	rjmp	.-1010   	; 0xbfd0 <f_lseek+0xbc>
    c3c2:	29 e0       	ldi	r18, 0x09	; 9
    c3c4:	f6 94       	lsr	r15
    c3c6:	e7 94       	ror	r14
    c3c8:	d7 94       	ror	r13
    c3ca:	c7 94       	ror	r12
    c3cc:	2a 95       	dec	r18
    c3ce:	d1 f7       	brne	.-12     	; 0xc3c4 <f_lseek+0x4b0>
    c3d0:	c6 0e       	add	r12, r22
    c3d2:	d7 1e       	adc	r13, r23
    c3d4:	e8 1e       	adc	r14, r24
    c3d6:	f9 1e       	adc	r15, r25
    c3d8:	f1 01       	movw	r30, r2
    c3da:	80 89       	ldd	r24, Z+16	; 0x10
    c3dc:	91 89       	ldd	r25, Z+17	; 0x11
    c3de:	a2 89       	ldd	r26, Z+18	; 0x12
    c3e0:	b3 89       	ldd	r27, Z+19	; 0x13
    c3e2:	42 85       	ldd	r20, Z+10	; 0x0a
    c3e4:	53 85       	ldd	r21, Z+11	; 0x0b
    c3e6:	64 85       	ldd	r22, Z+12	; 0x0c
    c3e8:	75 85       	ldd	r23, Z+13	; 0x0d
    c3ea:	48 17       	cp	r20, r24
    c3ec:	59 07       	cpc	r21, r25
    c3ee:	6a 07       	cpc	r22, r26
    c3f0:	7b 07       	cpc	r23, r27
    c3f2:	38 f4       	brcc	.+14     	; 0xc402 <f_lseek+0x4ee>
    c3f4:	82 87       	std	Z+10, r24	; 0x0a
    c3f6:	93 87       	std	Z+11, r25	; 0x0b
    c3f8:	a4 87       	std	Z+12, r26	; 0x0c
    c3fa:	b5 87       	std	Z+13, r27	; 0x0d
    c3fc:	26 85       	ldd	r18, Z+14	; 0x0e
    c3fe:	20 64       	ori	r18, 0x40	; 64
    c400:	26 87       	std	Z+14, r18	; 0x0e
    c402:	91 70       	andi	r25, 0x01	; 1
    c404:	aa 27       	eor	r26, r26
    c406:	bb 27       	eor	r27, r27
    c408:	89 2b       	or	r24, r25
    c40a:	8a 2b       	or	r24, r26
    c40c:	8b 2b       	or	r24, r27
    c40e:	79 f1       	breq	.+94     	; 0xc46e <f_lseek+0x55a>
    c410:	f1 01       	movw	r30, r2
    c412:	20 8d       	ldd	r18, Z+24	; 0x18
    c414:	31 8d       	ldd	r19, Z+25	; 0x19
    c416:	42 8d       	ldd	r20, Z+26	; 0x1a
    c418:	53 8d       	ldd	r21, Z+27	; 0x1b
    c41a:	2c 15       	cp	r18, r12
    c41c:	3d 05       	cpc	r19, r13
    c41e:	4e 05       	cpc	r20, r14
    c420:	5f 05       	cpc	r21, r15
    c422:	29 f1       	breq	.+74     	; 0xc46e <f_lseek+0x55a>
    c424:	86 85       	ldd	r24, Z+14	; 0x0e
    c426:	b1 01       	movw	r22, r2
    c428:	6c 5d       	subi	r22, 0xDC	; 220
    c42a:	7f 4f       	sbci	r23, 0xFF	; 255
    c42c:	5b 01       	movw	r10, r22
    c42e:	87 ff       	sbrs	r24, 7
    c430:	0d c0       	rjmp	.+26     	; 0xc44c <f_lseek+0x538>
    c432:	e9 81       	ldd	r30, Y+1	; 0x01
    c434:	fa 81       	ldd	r31, Y+2	; 0x02
    c436:	01 e0       	ldi	r16, 0x01	; 1
    c438:	10 e0       	ldi	r17, 0x00	; 0
    c43a:	81 81       	ldd	r24, Z+1	; 0x01
    c43c:	c9 d6       	rcall	.+3474   	; 0xd1d0 <disk_write>
    c43e:	89 2b       	or	r24, r25
    c440:	09 f0       	breq	.+2      	; 0xc444 <f_lseek+0x530>
    c442:	ce cd       	rjmp	.-1124   	; 0xbfe0 <f_lseek+0xcc>
    c444:	f1 01       	movw	r30, r2
    c446:	86 85       	ldd	r24, Z+14	; 0x0e
    c448:	8f 77       	andi	r24, 0x7F	; 127
    c44a:	86 87       	std	Z+14, r24	; 0x0e
    c44c:	e9 81       	ldd	r30, Y+1	; 0x01
    c44e:	fa 81       	ldd	r31, Y+2	; 0x02
    c450:	01 e0       	ldi	r16, 0x01	; 1
    c452:	10 e0       	ldi	r17, 0x00	; 0
    c454:	a7 01       	movw	r20, r14
    c456:	96 01       	movw	r18, r12
    c458:	b5 01       	movw	r22, r10
    c45a:	81 81       	ldd	r24, Z+1	; 0x01
    c45c:	a9 d6       	rcall	.+3410   	; 0xd1b0 <disk_read>
    c45e:	89 2b       	or	r24, r25
    c460:	09 f0       	breq	.+2      	; 0xc464 <f_lseek+0x550>
    c462:	be cd       	rjmp	.-1156   	; 0xbfe0 <f_lseek+0xcc>
    c464:	f1 01       	movw	r30, r2
    c466:	c0 8e       	std	Z+24, r12	; 0x18
    c468:	d1 8e       	std	Z+25, r13	; 0x19
    c46a:	e2 8e       	std	Z+26, r14	; 0x1a
    c46c:	f3 8e       	std	Z+27, r15	; 0x1b
    c46e:	80 e0       	ldi	r24, 0x00	; 0
    c470:	ba cd       	rjmp	.-1164   	; 0xbfe6 <f_lseek+0xd2>
    c472:	81 e1       	ldi	r24, 0x11	; 17
    c474:	b8 cd       	rjmp	.-1168   	; 0xbfe6 <f_lseek+0xd2>
    c476:	80 e0       	ldi	r24, 0x00	; 0
    c478:	90 e0       	ldi	r25, 0x00	; 0
    c47a:	dc 01       	movw	r26, r24
    c47c:	c1 2c       	mov	r12, r1
    c47e:	d1 2c       	mov	r13, r1
    c480:	76 01       	movw	r14, r12
    c482:	bf cf       	rjmp	.-130    	; 0xc402 <f_lseek+0x4ee>
    c484:	2a 96       	adiw	r28, 0x0a	; 10
    c486:	e2 e1       	ldi	r30, 0x12	; 18
    c488:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

0000c48c <f_opendir>:
    c48c:	a4 e0       	ldi	r26, 0x04	; 4
    c48e:	b0 e0       	ldi	r27, 0x00	; 0
    c490:	ec e4       	ldi	r30, 0x4C	; 76
    c492:	f2 e6       	ldi	r31, 0x62	; 98
    c494:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
    c498:	7c 83       	std	Y+4, r23	; 0x04
    c49a:	6b 83       	std	Y+3, r22	; 0x03
    c49c:	00 97       	sbiw	r24, 0x00	; 0
    c49e:	09 f4       	brne	.+2      	; 0xc4a2 <f_opendir+0x16>
    c4a0:	48 c0       	rjmp	.+144    	; 0xc532 <f_opendir+0xa6>
    c4a2:	8c 01       	movw	r16, r24
    c4a4:	40 e0       	ldi	r20, 0x00	; 0
    c4a6:	be 01       	movw	r22, r28
    c4a8:	6f 5f       	subi	r22, 0xFF	; 255
    c4aa:	7f 4f       	sbci	r23, 0xFF	; 255
    c4ac:	ce 01       	movw	r24, r28
    c4ae:	03 96       	adiw	r24, 0x03	; 3
    c4b0:	0e 94 0a 4b 	call	0x9614	; 0x9614 <mount_volume>
    c4b4:	7c 01       	movw	r14, r24
    c4b6:	89 2b       	or	r24, r25
    c4b8:	b9 f5       	brne	.+110    	; 0xc528 <f_opendir+0x9c>
    c4ba:	89 81       	ldd	r24, Y+1	; 0x01
    c4bc:	9a 81       	ldd	r25, Y+2	; 0x02
    c4be:	f8 01       	movw	r30, r16
    c4c0:	91 83       	std	Z+1, r25	; 0x01
    c4c2:	80 83       	st	Z, r24
    c4c4:	80 e0       	ldi	r24, 0x00	; 0
    c4c6:	92 e0       	ldi	r25, 0x02	; 2
    c4c8:	b7 d5       	rcall	.+2926   	; 0xd038 <ff_memalloc>
    c4ca:	6c 01       	movw	r12, r24
    c4cc:	00 97       	sbiw	r24, 0x00	; 0
    c4ce:	99 f1       	breq	.+102    	; 0xc536 <f_opendir+0xaa>
    c4d0:	e9 81       	ldd	r30, Y+1	; 0x01
    c4d2:	fa 81       	ldd	r31, Y+2	; 0x02
    c4d4:	94 87       	std	Z+12, r25	; 0x0c
    c4d6:	83 87       	std	Z+11, r24	; 0x0b
    c4d8:	6b 81       	ldd	r22, Y+3	; 0x03
    c4da:	7c 81       	ldd	r23, Y+4	; 0x04
    c4dc:	c8 01       	movw	r24, r16
    c4de:	0e 94 59 56 	call	0xacb2	; 0xacb2 <follow_path>
    c4e2:	7c 01       	movw	r14, r24
    c4e4:	89 2b       	or	r24, r25
    c4e6:	b9 f4       	brne	.+46     	; 0xc516 <f_opendir+0x8a>
    c4e8:	f8 01       	movw	r30, r16
    c4ea:	87 a1       	ldd	r24, Z+39	; 0x27
    c4ec:	87 fd       	sbrc	r24, 7
    c4ee:	28 c0       	rjmp	.+80     	; 0xc540 <f_opendir+0xb4>
    c4f0:	84 81       	ldd	r24, Z+4	; 0x04
    c4f2:	84 ff       	sbrs	r24, 4
    c4f4:	0d c0       	rjmp	.+26     	; 0xc510 <f_opendir+0x84>
    c4f6:	62 8d       	ldd	r22, Z+26	; 0x1a
    c4f8:	73 8d       	ldd	r23, Z+27	; 0x1b
    c4fa:	e9 81       	ldd	r30, Y+1	; 0x01
    c4fc:	fa 81       	ldd	r31, Y+2	; 0x02
    c4fe:	80 81       	ld	r24, Z
    c500:	0e 94 00 49 	call	0x9200	; 0x9200 <ld_clust.isra.4>
    c504:	f8 01       	movw	r30, r16
    c506:	66 83       	std	Z+6, r22	; 0x06
    c508:	77 83       	std	Z+7, r23	; 0x07
    c50a:	80 87       	std	Z+8, r24	; 0x08
    c50c:	91 87       	std	Z+9, r25	; 0x09
    c50e:	18 c0       	rjmp	.+48     	; 0xc540 <f_opendir+0xb4>
    c510:	95 e0       	ldi	r25, 0x05	; 5
    c512:	e9 2e       	mov	r14, r25
    c514:	f1 2c       	mov	r15, r1
    c516:	c6 01       	movw	r24, r12
    c518:	92 d5       	rcall	.+2852   	; 0xd03e <ff_memfree>
    c51a:	f4 e0       	ldi	r31, 0x04	; 4
    c51c:	ef 16       	cp	r14, r31
    c51e:	f1 04       	cpc	r15, r1
    c520:	f1 f0       	breq	.+60     	; 0xc55e <f_opendir+0xd2>
    c522:	e1 14       	cp	r14, r1
    c524:	f1 04       	cpc	r15, r1
    c526:	49 f0       	breq	.+18     	; 0xc53a <f_opendir+0xae>
    c528:	f8 01       	movw	r30, r16
    c52a:	11 82       	std	Z+1, r1	; 0x01
    c52c:	10 82       	st	Z, r1
    c52e:	c7 01       	movw	r24, r14
    c530:	1a c0       	rjmp	.+52     	; 0xc566 <f_opendir+0xda>
    c532:	89 e0       	ldi	r24, 0x09	; 9
    c534:	03 c0       	rjmp	.+6      	; 0xc53c <f_opendir+0xb0>
    c536:	81 e1       	ldi	r24, 0x11	; 17
    c538:	01 c0       	rjmp	.+2      	; 0xc53c <f_opendir+0xb0>
    c53a:	80 e0       	ldi	r24, 0x00	; 0
    c53c:	90 e0       	ldi	r25, 0x00	; 0
    c53e:	13 c0       	rjmp	.+38     	; 0xc566 <f_opendir+0xda>
    c540:	e9 81       	ldd	r30, Y+1	; 0x01
    c542:	fa 81       	ldd	r31, Y+2	; 0x02
    c544:	85 81       	ldd	r24, Z+5	; 0x05
    c546:	96 81       	ldd	r25, Z+6	; 0x06
    c548:	f8 01       	movw	r30, r16
    c54a:	93 83       	std	Z+3, r25	; 0x03
    c54c:	82 83       	std	Z+2, r24	; 0x02
    c54e:	40 e0       	ldi	r20, 0x00	; 0
    c550:	50 e0       	ldi	r21, 0x00	; 0
    c552:	ba 01       	movw	r22, r20
    c554:	c8 01       	movw	r24, r16
    c556:	0e 94 13 4f 	call	0x9e26	; 0x9e26 <dir_sdi>
    c55a:	7c 01       	movw	r14, r24
    c55c:	dc cf       	rjmp	.-72     	; 0xc516 <f_opendir+0x8a>
    c55e:	85 e0       	ldi	r24, 0x05	; 5
    c560:	e8 2e       	mov	r14, r24
    c562:	f1 2c       	mov	r15, r1
    c564:	e1 cf       	rjmp	.-62     	; 0xc528 <f_opendir+0x9c>
    c566:	24 96       	adiw	r28, 0x04	; 4
    c568:	e8 e0       	ldi	r30, 0x08	; 8
    c56a:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

0000c56e <f_closedir>:
    c56e:	a2 e0       	ldi	r26, 0x02	; 2
    c570:	b0 e0       	ldi	r27, 0x00	; 0
    c572:	ed eb       	ldi	r30, 0xBD	; 189
    c574:	f2 e6       	ldi	r31, 0x62	; 98
    c576:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__prologue_saves__+0x1c>
    c57a:	8c 01       	movw	r16, r24
    c57c:	be 01       	movw	r22, r28
    c57e:	6f 5f       	subi	r22, 0xFF	; 255
    c580:	7f 4f       	sbci	r23, 0xFF	; 255
    c582:	0e 94 0c 47 	call	0x8e18	; 0x8e18 <validate>
    c586:	00 97       	sbiw	r24, 0x00	; 0
    c588:	19 f4       	brne	.+6      	; 0xc590 <f_closedir+0x22>
    c58a:	f8 01       	movw	r30, r16
    c58c:	11 82       	std	Z+1, r1	; 0x01
    c58e:	10 82       	st	Z, r1
    c590:	22 96       	adiw	r28, 0x02	; 2
    c592:	e4 e0       	ldi	r30, 0x04	; 4
    c594:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

0000c598 <f_readdir>:
    c598:	a2 e0       	ldi	r26, 0x02	; 2
    c59a:	b0 e0       	ldi	r27, 0x00	; 0
    c59c:	e2 ed       	ldi	r30, 0xD2	; 210
    c59e:	f2 e6       	ldi	r31, 0x62	; 98
    c5a0:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__prologue_saves__+0x10>
    c5a4:	7c 01       	movw	r14, r24
    c5a6:	5b 01       	movw	r10, r22
    c5a8:	be 01       	movw	r22, r28
    c5aa:	6f 5f       	subi	r22, 0xFF	; 255
    c5ac:	7f 4f       	sbci	r23, 0xFF	; 255
    c5ae:	0e 94 0c 47 	call	0x8e18	; 0x8e18 <validate>
    c5b2:	00 97       	sbiw	r24, 0x00	; 0
    c5b4:	89 f5       	brne	.+98     	; 0xc618 <f_readdir+0x80>
    c5b6:	a1 14       	cp	r10, r1
    c5b8:	b1 04       	cpc	r11, r1
    c5ba:	39 f4       	brne	.+14     	; 0xc5ca <f_readdir+0x32>
    c5bc:	40 e0       	ldi	r20, 0x00	; 0
    c5be:	50 e0       	ldi	r21, 0x00	; 0
    c5c0:	ba 01       	movw	r22, r20
    c5c2:	c7 01       	movw	r24, r14
    c5c4:	0e 94 13 4f 	call	0x9e26	; 0x9e26 <dir_sdi>
    c5c8:	27 c0       	rjmp	.+78     	; 0xc618 <f_readdir+0x80>
    c5ca:	80 e0       	ldi	r24, 0x00	; 0
    c5cc:	92 e0       	ldi	r25, 0x02	; 2
    c5ce:	34 d5       	rcall	.+2664   	; 0xd038 <ff_memalloc>
    c5d0:	6c 01       	movw	r12, r24
    c5d2:	00 97       	sbiw	r24, 0x00	; 0
    c5d4:	f9 f0       	breq	.+62     	; 0xc614 <f_readdir+0x7c>
    c5d6:	e9 81       	ldd	r30, Y+1	; 0x01
    c5d8:	fa 81       	ldd	r31, Y+2	; 0x02
    c5da:	94 87       	std	Z+12, r25	; 0x0c
    c5dc:	83 87       	std	Z+11, r24	; 0x0b
    c5de:	60 e0       	ldi	r22, 0x00	; 0
    c5e0:	70 e0       	ldi	r23, 0x00	; 0
    c5e2:	c7 01       	movw	r24, r14
    c5e4:	0e 94 ac 52 	call	0xa558	; 0xa558 <dir_read>
    c5e8:	8c 01       	movw	r16, r24
    c5ea:	8b 7f       	andi	r24, 0xFB	; 251
    c5ec:	89 2b       	or	r24, r25
    c5ee:	71 f4       	brne	.+28     	; 0xc60c <f_readdir+0x74>
    c5f0:	b5 01       	movw	r22, r10
    c5f2:	c7 01       	movw	r24, r14
    c5f4:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <get_fileinfo>
    c5f8:	60 e0       	ldi	r22, 0x00	; 0
    c5fa:	70 e0       	ldi	r23, 0x00	; 0
    c5fc:	c7 01       	movw	r24, r14
    c5fe:	0e 94 8b 51 	call	0xa316	; 0xa316 <dir_next>
    c602:	8c 01       	movw	r16, r24
    c604:	04 97       	sbiw	r24, 0x04	; 4
    c606:	11 f4       	brne	.+4      	; 0xc60c <f_readdir+0x74>
    c608:	00 e0       	ldi	r16, 0x00	; 0
    c60a:	10 e0       	ldi	r17, 0x00	; 0
    c60c:	c6 01       	movw	r24, r12
    c60e:	17 d5       	rcall	.+2606   	; 0xd03e <ff_memfree>
    c610:	c8 01       	movw	r24, r16
    c612:	02 c0       	rjmp	.+4      	; 0xc618 <f_readdir+0x80>
    c614:	81 e1       	ldi	r24, 0x11	; 17
    c616:	90 e0       	ldi	r25, 0x00	; 0
    c618:	22 96       	adiw	r28, 0x02	; 2
    c61a:	ea e0       	ldi	r30, 0x0A	; 10
    c61c:	0c 94 80 e3 	jmp	0x1c700	; 0x1c700 <__epilogue_restores__+0x10>

0000c620 <f_stat>:
    c620:	a0 e3       	ldi	r26, 0x30	; 48
    c622:	b0 e0       	ldi	r27, 0x00	; 0
    c624:	e6 e1       	ldi	r30, 0x16	; 22
    c626:	f3 e6       	ldi	r31, 0x63	; 99
    c628:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
    c62c:	98 ab       	std	Y+48, r25	; 0x30
    c62e:	8f a7       	std	Y+47, r24	; 0x2f
    c630:	6b 01       	movw	r12, r22
    c632:	40 e0       	ldi	r20, 0x00	; 0
    c634:	be 01       	movw	r22, r28
    c636:	6f 5f       	subi	r22, 0xFF	; 255
    c638:	7f 4f       	sbci	r23, 0xFF	; 255
    c63a:	ce 01       	movw	r24, r28
    c63c:	8f 96       	adiw	r24, 0x2f	; 47
    c63e:	0e 94 0a 4b 	call	0x9614	; 0x9614 <mount_volume>
    c642:	00 97       	sbiw	r24, 0x00	; 0
    c644:	39 f5       	brne	.+78     	; 0xc694 <f_stat+0x74>
    c646:	80 e0       	ldi	r24, 0x00	; 0
    c648:	92 e0       	ldi	r25, 0x02	; 2
    c64a:	f6 d4       	rcall	.+2540   	; 0xd038 <ff_memalloc>
    c64c:	7c 01       	movw	r14, r24
    c64e:	00 97       	sbiw	r24, 0x00	; 0
    c650:	f9 f0       	breq	.+62     	; 0xc690 <f_stat+0x70>
    c652:	e9 81       	ldd	r30, Y+1	; 0x01
    c654:	fa 81       	ldd	r31, Y+2	; 0x02
    c656:	94 87       	std	Z+12, r25	; 0x0c
    c658:	83 87       	std	Z+11, r24	; 0x0b
    c65a:	6f a5       	ldd	r22, Y+47	; 0x2f
    c65c:	78 a9       	ldd	r23, Y+48	; 0x30
    c65e:	ce 01       	movw	r24, r28
    c660:	01 96       	adiw	r24, 0x01	; 1
    c662:	0e 94 59 56 	call	0xacb2	; 0xacb2 <follow_path>
    c666:	8c 01       	movw	r16, r24
    c668:	89 2b       	or	r24, r25
    c66a:	71 f4       	brne	.+28     	; 0xc688 <f_stat+0x68>
    c66c:	88 a5       	ldd	r24, Y+40	; 0x28
    c66e:	87 fd       	sbrc	r24, 7
    c670:	09 c0       	rjmp	.+18     	; 0xc684 <f_stat+0x64>
    c672:	c1 14       	cp	r12, r1
    c674:	d1 04       	cpc	r13, r1
    c676:	41 f0       	breq	.+16     	; 0xc688 <f_stat+0x68>
    c678:	b6 01       	movw	r22, r12
    c67a:	ce 01       	movw	r24, r28
    c67c:	01 96       	adiw	r24, 0x01	; 1
    c67e:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <get_fileinfo>
    c682:	02 c0       	rjmp	.+4      	; 0xc688 <f_stat+0x68>
    c684:	06 e0       	ldi	r16, 0x06	; 6
    c686:	10 e0       	ldi	r17, 0x00	; 0
    c688:	c7 01       	movw	r24, r14
    c68a:	d9 d4       	rcall	.+2482   	; 0xd03e <ff_memfree>
    c68c:	c8 01       	movw	r24, r16
    c68e:	02 c0       	rjmp	.+4      	; 0xc694 <f_stat+0x74>
    c690:	81 e1       	ldi	r24, 0x11	; 17
    c692:	90 e0       	ldi	r25, 0x00	; 0
    c694:	e0 96       	adiw	r28, 0x30	; 48
    c696:	e8 e0       	ldi	r30, 0x08	; 8
    c698:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

0000c69c <f_getfree>:
    c69c:	aa e0       	ldi	r26, 0x0A	; 10
    c69e:	b0 e0       	ldi	r27, 0x00	; 0
    c6a0:	e4 e5       	ldi	r30, 0x54	; 84
    c6a2:	f3 e6       	ldi	r31, 0x63	; 99
    c6a4:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
    c6a8:	9c 83       	std	Y+4, r25	; 0x04
    c6aa:	8b 83       	std	Y+3, r24	; 0x03
    c6ac:	7e 83       	std	Y+6, r23	; 0x06
    c6ae:	6d 83       	std	Y+5, r22	; 0x05
    c6b0:	7a 01       	movw	r14, r20
    c6b2:	40 e0       	ldi	r20, 0x00	; 0
    c6b4:	be 01       	movw	r22, r28
    c6b6:	6f 5f       	subi	r22, 0xFF	; 255
    c6b8:	7f 4f       	sbci	r23, 0xFF	; 255
    c6ba:	ce 01       	movw	r24, r28
    c6bc:	03 96       	adiw	r24, 0x03	; 3
    c6be:	0e 94 0a 4b 	call	0x9614	; 0x9614 <mount_volume>
    c6c2:	8c 01       	movw	r16, r24
    c6c4:	89 2b       	or	r24, r25
    c6c6:	09 f0       	breq	.+2      	; 0xc6ca <f_getfree+0x2e>
    c6c8:	c4 c0       	rjmp	.+392    	; 0xc852 <f_getfree+0x1b6>
    c6ca:	69 80       	ldd	r6, Y+1	; 0x01
    c6cc:	7a 80       	ldd	r7, Y+2	; 0x02
    c6ce:	d7 01       	movw	r26, r14
    c6d0:	6d 92       	st	X+, r6
    c6d2:	7c 92       	st	X, r7
    c6d4:	f3 01       	movw	r30, r6
    c6d6:	81 89       	ldd	r24, Z+17	; 0x11
    c6d8:	92 89       	ldd	r25, Z+18	; 0x12
    c6da:	a3 89       	ldd	r26, Z+19	; 0x13
    c6dc:	b4 89       	ldd	r27, Z+20	; 0x14
    c6de:	81 8c       	ldd	r8, Z+25	; 0x19
    c6e0:	92 8c       	ldd	r9, Z+26	; 0x1a
    c6e2:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c6e4:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c6e6:	b5 01       	movw	r22, r10
    c6e8:	a4 01       	movw	r20, r8
    c6ea:	42 50       	subi	r20, 0x02	; 2
    c6ec:	51 09       	sbc	r21, r1
    c6ee:	61 09       	sbc	r22, r1
    c6f0:	71 09       	sbc	r23, r1
    c6f2:	48 17       	cp	r20, r24
    c6f4:	59 07       	cpc	r21, r25
    c6f6:	6a 07       	cpc	r22, r26
    c6f8:	7b 07       	cpc	r23, r27
    c6fa:	38 f0       	brcs	.+14     	; 0xc70a <f_getfree+0x6e>
    c6fc:	ed 81       	ldd	r30, Y+5	; 0x05
    c6fe:	fe 81       	ldd	r31, Y+6	; 0x06
    c700:	80 83       	st	Z, r24
    c702:	91 83       	std	Z+1, r25	; 0x01
    c704:	a2 83       	std	Z+2, r26	; 0x02
    c706:	b3 83       	std	Z+3, r27	; 0x03
    c708:	a4 c0       	rjmp	.+328    	; 0xc852 <f_getfree+0x1b6>
    c70a:	80 81       	ld	r24, Z
    c70c:	81 30       	cpi	r24, 0x01	; 1
    c70e:	a1 f5       	brne	.+104    	; 0xc778 <f_getfree+0xdc>
    c710:	82 e0       	ldi	r24, 0x02	; 2
    c712:	88 2e       	mov	r8, r24
    c714:	91 2c       	mov	r9, r1
    c716:	a1 2c       	mov	r10, r1
    c718:	b1 2c       	mov	r11, r1
    c71a:	c1 2c       	mov	r12, r1
    c71c:	d1 2c       	mov	r13, r1
    c71e:	76 01       	movw	r14, r12
    c720:	b5 01       	movw	r22, r10
    c722:	a4 01       	movw	r20, r8
    c724:	c3 01       	movw	r24, r6
    c726:	0e 94 5f 4e 	call	0x9cbe	; 0x9cbe <get_fat.isra.10>
    c72a:	6f 3f       	cpi	r22, 0xFF	; 255
    c72c:	bf ef       	ldi	r27, 0xFF	; 255
    c72e:	7b 07       	cpc	r23, r27
    c730:	8b 07       	cpc	r24, r27
    c732:	9b 07       	cpc	r25, r27
    c734:	09 f4       	brne	.+2      	; 0xc738 <f_getfree+0x9c>
    c736:	76 c0       	rjmp	.+236    	; 0xc824 <f_getfree+0x188>
    c738:	61 30       	cpi	r22, 0x01	; 1
    c73a:	71 05       	cpc	r23, r1
    c73c:	81 05       	cpc	r24, r1
    c73e:	91 05       	cpc	r25, r1
    c740:	09 f4       	brne	.+2      	; 0xc744 <f_getfree+0xa8>
    c742:	73 c0       	rjmp	.+230    	; 0xc82a <f_getfree+0x18e>
    c744:	67 2b       	or	r22, r23
    c746:	68 2b       	or	r22, r24
    c748:	69 2b       	or	r22, r25
    c74a:	29 f4       	brne	.+10     	; 0xc756 <f_getfree+0xba>
    c74c:	ef ef       	ldi	r30, 0xFF	; 255
    c74e:	ce 1a       	sub	r12, r30
    c750:	de 0a       	sbc	r13, r30
    c752:	ee 0a       	sbc	r14, r30
    c754:	fe 0a       	sbc	r15, r30
    c756:	ff ef       	ldi	r31, 0xFF	; 255
    c758:	8f 1a       	sub	r8, r31
    c75a:	9f 0a       	sbc	r9, r31
    c75c:	af 0a       	sbc	r10, r31
    c75e:	bf 0a       	sbc	r11, r31
    c760:	e9 81       	ldd	r30, Y+1	; 0x01
    c762:	fa 81       	ldd	r31, Y+2	; 0x02
    c764:	81 8d       	ldd	r24, Z+25	; 0x19
    c766:	92 8d       	ldd	r25, Z+26	; 0x1a
    c768:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c76a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c76c:	88 16       	cp	r8, r24
    c76e:	99 06       	cpc	r9, r25
    c770:	aa 06       	cpc	r10, r26
    c772:	bb 06       	cpc	r11, r27
    c774:	a8 f2       	brcs	.-86     	; 0xc720 <f_getfree+0x84>
    c776:	5d c0       	rjmp	.+186    	; 0xc832 <f_getfree+0x196>
    c778:	f3 01       	movw	r30, r6
    c77a:	45 a0       	ldd	r4, Z+37	; 0x25
    c77c:	56 a0       	ldd	r5, Z+38	; 0x26
    c77e:	67 a0       	ldd	r6, Z+39	; 0x27
    c780:	70 a4       	ldd	r7, Z+40	; 0x28
    c782:	21 2c       	mov	r2, r1
    c784:	31 2c       	mov	r3, r1
    c786:	c1 2c       	mov	r12, r1
    c788:	d1 2c       	mov	r13, r1
    c78a:	76 01       	movw	r14, r12
    c78c:	21 14       	cp	r2, r1
    c78e:	31 04       	cpc	r3, r1
    c790:	b1 f4       	brne	.+44     	; 0xc7be <f_getfree+0x122>
    c792:	d3 01       	movw	r26, r6
    c794:	c2 01       	movw	r24, r4
    c796:	01 96       	adiw	r24, 0x01	; 1
    c798:	a1 1d       	adc	r26, r1
    c79a:	b1 1d       	adc	r27, r1
    c79c:	8f 83       	std	Y+7, r24	; 0x07
    c79e:	98 87       	std	Y+8, r25	; 0x08
    c7a0:	a9 87       	std	Y+9, r26	; 0x09
    c7a2:	ba 87       	std	Y+10, r27	; 0x0a
    c7a4:	b3 01       	movw	r22, r6
    c7a6:	a2 01       	movw	r20, r4
    c7a8:	89 81       	ldd	r24, Y+1	; 0x01
    c7aa:	9a 81       	ldd	r25, Y+2	; 0x02
    c7ac:	0e 94 8f 4a 	call	0x951e	; 0x951e <move_window>
    c7b0:	00 97       	sbiw	r24, 0x00	; 0
    c7b2:	09 f0       	breq	.+2      	; 0xc7b6 <f_getfree+0x11a>
    c7b4:	3d c0       	rjmp	.+122    	; 0xc830 <f_getfree+0x194>
    c7b6:	4f 80       	ldd	r4, Y+7	; 0x07
    c7b8:	58 84       	ldd	r5, Y+8	; 0x08
    c7ba:	69 84       	ldd	r6, Y+9	; 0x09
    c7bc:	7a 84       	ldd	r7, Y+10	; 0x0a
    c7be:	e9 81       	ldd	r30, Y+1	; 0x01
    c7c0:	fa 81       	ldd	r31, Y+2	; 0x02
    c7c2:	80 81       	ld	r24, Z
    c7c4:	82 30       	cpi	r24, 0x02	; 2
    c7c6:	79 f4       	brne	.+30     	; 0xc7e6 <f_getfree+0x14a>
    c7c8:	e2 0d       	add	r30, r2
    c7ca:	f3 1d       	adc	r31, r3
    c7cc:	85 a9       	ldd	r24, Z+53	; 0x35
    c7ce:	96 a9       	ldd	r25, Z+54	; 0x36
    c7d0:	89 2b       	or	r24, r25
    c7d2:	29 f4       	brne	.+10     	; 0xc7de <f_getfree+0x142>
    c7d4:	9f ef       	ldi	r25, 0xFF	; 255
    c7d6:	c9 1a       	sub	r12, r25
    c7d8:	d9 0a       	sbc	r13, r25
    c7da:	e9 0a       	sbc	r14, r25
    c7dc:	f9 0a       	sbc	r15, r25
    c7de:	a2 e0       	ldi	r26, 0x02	; 2
    c7e0:	2a 0e       	add	r2, r26
    c7e2:	31 1c       	adc	r3, r1
    c7e4:	15 c0       	rjmp	.+42     	; 0xc810 <f_getfree+0x174>
    c7e6:	cf 01       	movw	r24, r30
    c7e8:	c5 96       	adiw	r24, 0x35	; 53
    c7ea:	82 0d       	add	r24, r2
    c7ec:	93 1d       	adc	r25, r3
    c7ee:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <ld_dword>
    c7f2:	dc 01       	movw	r26, r24
    c7f4:	cb 01       	movw	r24, r22
    c7f6:	bf 70       	andi	r27, 0x0F	; 15
    c7f8:	89 2b       	or	r24, r25
    c7fa:	8a 2b       	or	r24, r26
    c7fc:	8b 2b       	or	r24, r27
    c7fe:	29 f4       	brne	.+10     	; 0xc80a <f_getfree+0x16e>
    c800:	bf ef       	ldi	r27, 0xFF	; 255
    c802:	cb 1a       	sub	r12, r27
    c804:	db 0a       	sbc	r13, r27
    c806:	eb 0a       	sbc	r14, r27
    c808:	fb 0a       	sbc	r15, r27
    c80a:	e4 e0       	ldi	r30, 0x04	; 4
    c80c:	2e 0e       	add	r2, r30
    c80e:	31 1c       	adc	r3, r1
    c810:	f1 e0       	ldi	r31, 0x01	; 1
    c812:	3f 22       	and	r3, r31
    c814:	21 e0       	ldi	r18, 0x01	; 1
    c816:	82 1a       	sub	r8, r18
    c818:	91 08       	sbc	r9, r1
    c81a:	a1 08       	sbc	r10, r1
    c81c:	b1 08       	sbc	r11, r1
    c81e:	09 f0       	breq	.+2      	; 0xc822 <f_getfree+0x186>
    c820:	b5 cf       	rjmp	.-150    	; 0xc78c <f_getfree+0xf0>
    c822:	07 c0       	rjmp	.+14     	; 0xc832 <f_getfree+0x196>
    c824:	01 e0       	ldi	r16, 0x01	; 1
    c826:	10 e0       	ldi	r17, 0x00	; 0
    c828:	04 c0       	rjmp	.+8      	; 0xc832 <f_getfree+0x196>
    c82a:	02 e0       	ldi	r16, 0x02	; 2
    c82c:	10 e0       	ldi	r17, 0x00	; 0
    c82e:	01 c0       	rjmp	.+2      	; 0xc832 <f_getfree+0x196>
    c830:	8c 01       	movw	r16, r24
    c832:	ad 81       	ldd	r26, Y+5	; 0x05
    c834:	be 81       	ldd	r27, Y+6	; 0x06
    c836:	cd 92       	st	X+, r12
    c838:	dd 92       	st	X+, r13
    c83a:	ed 92       	st	X+, r14
    c83c:	fc 92       	st	X, r15
    c83e:	13 97       	sbiw	r26, 0x03	; 3
    c840:	e9 81       	ldd	r30, Y+1	; 0x01
    c842:	fa 81       	ldd	r31, Y+2	; 0x02
    c844:	c1 8a       	std	Z+17, r12	; 0x11
    c846:	d2 8a       	std	Z+18, r13	; 0x12
    c848:	e3 8a       	std	Z+19, r14	; 0x13
    c84a:	f4 8a       	std	Z+20, r15	; 0x14
    c84c:	84 81       	ldd	r24, Z+4	; 0x04
    c84e:	81 60       	ori	r24, 0x01	; 1
    c850:	84 83       	std	Z+4, r24	; 0x04
    c852:	c8 01       	movw	r24, r16
    c854:	2a 96       	adiw	r28, 0x0a	; 10
    c856:	e2 e1       	ldi	r30, 0x12	; 18
    c858:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

0000c85c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    c85c:	a0 e6       	ldi	r26, 0x60	; 96
    c85e:	b0 e0       	ldi	r27, 0x00	; 0
    c860:	e4 e3       	ldi	r30, 0x34	; 52
    c862:	f4 e6       	ldi	r31, 0x64	; 100
    c864:	0c 94 63 e3 	jmp	0x1c6c6	; 0x1c6c6 <__prologue_saves__+0xe>
    c868:	a1 96       	adiw	r28, 0x21	; 33
    c86a:	9f af       	std	Y+63, r25	; 0x3f
    c86c:	8e af       	std	Y+62, r24	; 0x3e
    c86e:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    c870:	42 e0       	ldi	r20, 0x02	; 2
    c872:	be 01       	movw	r22, r28
    c874:	63 5a       	subi	r22, 0xA3	; 163
    c876:	7f 4f       	sbci	r23, 0xFF	; 255
    c878:	ce 01       	movw	r24, r28
    c87a:	81 5a       	subi	r24, 0xA1	; 161
    c87c:	9f 4f       	sbci	r25, 0xFF	; 255
    c87e:	0e 94 0a 4b 	call	0x9614	; 0x9614 <mount_volume>
	if (res == FR_OK) {
    c882:	00 97       	sbiw	r24, 0x00	; 0
    c884:	09 f0       	breq	.+2      	; 0xc888 <f_unlink+0x2c>
    c886:	8c c0       	rjmp	.+280    	; 0xc9a0 <f_unlink+0x144>
		dj.obj.fs = fs;
    c888:	6f 96       	adiw	r28, 0x1f	; 31
    c88a:	8e ad       	ldd	r24, Y+62	; 0x3e
    c88c:	9f ad       	ldd	r25, Y+63	; 0x3f
    c88e:	6f 97       	sbiw	r28, 0x1f	; 31
    c890:	98 ab       	std	Y+48, r25	; 0x30
    c892:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    c894:	80 e0       	ldi	r24, 0x00	; 0
    c896:	92 e0       	ldi	r25, 0x02	; 2
    c898:	cf d3       	rcall	.+1950   	; 0xd038 <ff_memalloc>
    c89a:	5c 01       	movw	r10, r24
    c89c:	00 97       	sbiw	r24, 0x00	; 0
    c89e:	09 f4       	brne	.+2      	; 0xc8a2 <f_unlink+0x46>
    c8a0:	49 c0       	rjmp	.+146    	; 0xc934 <f_unlink+0xd8>
    c8a2:	6f 96       	adiw	r28, 0x1f	; 31
    c8a4:	ee ad       	ldd	r30, Y+62	; 0x3e
    c8a6:	ff ad       	ldd	r31, Y+63	; 0x3f
    c8a8:	6f 97       	sbiw	r28, 0x1f	; 31
    c8aa:	94 87       	std	Z+12, r25	; 0x0c
    c8ac:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    c8ae:	a1 96       	adiw	r28, 0x21	; 33
    c8b0:	6e ad       	ldd	r22, Y+62	; 0x3e
    c8b2:	7f ad       	ldd	r23, Y+63	; 0x3f
    c8b4:	a1 97       	sbiw	r28, 0x21	; 33
    c8b6:	ce 01       	movw	r24, r28
    c8b8:	8f 96       	adiw	r24, 0x2f	; 47
    c8ba:	0e 94 59 56 	call	0xacb2	; 0xacb2 <follow_path>
    c8be:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    c8c0:	89 2b       	or	r24, r25
    c8c2:	a1 f5       	brne	.+104    	; 0xc92c <f_unlink+0xd0>
    c8c4:	67 96       	adiw	r28, 0x17	; 23
    c8c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    c8c8:	67 97       	sbiw	r28, 0x17	; 23
    c8ca:	85 fd       	sbrc	r24, 5
    c8cc:	36 c0       	rjmp	.+108    	; 0xc93a <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    c8ce:	87 fd       	sbrc	r24, 7
    c8d0:	34 c0       	rjmp	.+104    	; 0xc93a <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    c8d2:	9b a8       	ldd	r9, Y+51	; 0x33
    c8d4:	90 fc       	sbrc	r9, 0
    c8d6:	40 c0       	rjmp	.+128    	; 0xc958 <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    c8d8:	6f 96       	adiw	r28, 0x1f	; 31
    c8da:	0e ad       	ldd	r16, Y+62	; 0x3e
    c8dc:	1f ad       	ldd	r17, Y+63	; 0x3f
    c8de:	6f 97       	sbiw	r28, 0x1f	; 31
    c8e0:	2b 96       	adiw	r28, 0x0b	; 11
    c8e2:	6e ad       	ldd	r22, Y+62	; 0x3e
    c8e4:	7f ad       	ldd	r23, Y+63	; 0x3f
    c8e6:	2b 97       	sbiw	r28, 0x0b	; 11
    c8e8:	f8 01       	movw	r30, r16
    c8ea:	80 81       	ld	r24, Z
    c8ec:	0e 94 00 49 	call	0x9200	; 0x9200 <ld_clust.isra.4>
    c8f0:	6b 01       	movw	r12, r22
    c8f2:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    c8f4:	94 fe       	sbrs	r9, 4
    c8f6:	33 c0       	rjmp	.+102    	; 0xc95e <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    c8f8:	f8 01       	movw	r30, r16
    c8fa:	85 89       	ldd	r24, Z+21	; 0x15
    c8fc:	96 89       	ldd	r25, Z+22	; 0x16
    c8fe:	a7 89       	ldd	r26, Z+23	; 0x17
    c900:	b0 8d       	ldd	r27, Z+24	; 0x18
    c902:	c8 16       	cp	r12, r24
    c904:	d9 06       	cpc	r13, r25
    c906:	ea 06       	cpc	r14, r26
    c908:	fb 06       	cpc	r15, r27
    c90a:	31 f1       	breq	.+76     	; 0xc958 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    c90c:	1a 83       	std	Y+2, r17	; 0x02
    c90e:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    c910:	cf 82       	std	Y+7, r12	; 0x07
    c912:	d8 86       	std	Y+8, r13	; 0x08
    c914:	e9 86       	std	Y+9, r14	; 0x09
    c916:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    c918:	40 e0       	ldi	r20, 0x00	; 0
    c91a:	50 e0       	ldi	r21, 0x00	; 0
    c91c:	ba 01       	movw	r22, r20
    c91e:	ce 01       	movw	r24, r28
    c920:	01 96       	adiw	r24, 0x01	; 1
    c922:	0e 94 13 4f 	call	0x9e26	; 0x9e26 <dir_sdi>
    c926:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    c928:	89 2b       	or	r24, r25
    c92a:	51 f0       	breq	.+20     	; 0xc940 <f_unlink+0xe4>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    c92c:	c5 01       	movw	r24, r10
    c92e:	87 d3       	rcall	.+1806   	; 0xd03e <ff_memfree>
    c930:	c8 01       	movw	r24, r16
    c932:	36 c0       	rjmp	.+108    	; 0xc9a0 <f_unlink+0x144>

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    c934:	81 e1       	ldi	r24, 0x11	; 17
    c936:	90 e0       	ldi	r25, 0x00	; 0
    c938:	33 c0       	rjmp	.+102    	; 0xc9a0 <f_unlink+0x144>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    c93a:	06 e0       	ldi	r16, 0x06	; 6
    c93c:	10 e0       	ldi	r17, 0x00	; 0
    c93e:	f6 cf       	rjmp	.-20     	; 0xc92c <f_unlink+0xd0>
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    c940:	60 e0       	ldi	r22, 0x00	; 0
    c942:	70 e0       	ldi	r23, 0x00	; 0
    c944:	ce 01       	movw	r24, r28
    c946:	01 96       	adiw	r24, 0x01	; 1
    c948:	0e 94 ac 52 	call	0xa558	; 0xa558 <dir_read>
    c94c:	8c 01       	movw	r16, r24
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    c94e:	00 97       	sbiw	r24, 0x00	; 0
    c950:	19 f0       	breq	.+6      	; 0xc958 <f_unlink+0xfc>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    c952:	04 97       	sbiw	r24, 0x04	; 4
    c954:	21 f0       	breq	.+8      	; 0xc95e <f_unlink+0x102>
    c956:	ea cf       	rjmp	.-44     	; 0xc92c <f_unlink+0xd0>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    c958:	07 e0       	ldi	r16, 0x07	; 7
    c95a:	10 e0       	ldi	r17, 0x00	; 0
    c95c:	e7 cf       	rjmp	.-50     	; 0xc92c <f_unlink+0xd0>
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    c95e:	ce 01       	movw	r24, r28
    c960:	8f 96       	adiw	r24, 0x2f	; 47
    c962:	0e 94 75 53 	call	0xa6ea	; 0xa6ea <dir_remove>
    c966:	8c 01       	movw	r16, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    c968:	89 2b       	or	r24, r25
    c96a:	01 f7       	brne	.-64     	; 0xc92c <f_unlink+0xd0>
    c96c:	c1 14       	cp	r12, r1
    c96e:	d1 04       	cpc	r13, r1
    c970:	e1 04       	cpc	r14, r1
    c972:	f1 04       	cpc	r15, r1
    c974:	41 f4       	brne	.+16     	; 0xc986 <f_unlink+0x12a>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    c976:	6f 96       	adiw	r28, 0x1f	; 31
    c978:	8e ad       	ldd	r24, Y+62	; 0x3e
    c97a:	9f ad       	ldd	r25, Y+63	; 0x3f
    c97c:	6f 97       	sbiw	r28, 0x1f	; 31
    c97e:	0e 94 75 49 	call	0x92ea	; 0x92ea <sync_fs>
    c982:	8c 01       	movw	r16, r24
    c984:	d3 cf       	rjmp	.-90     	; 0xc92c <f_unlink+0xd0>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    c986:	00 e0       	ldi	r16, 0x00	; 0
    c988:	10 e0       	ldi	r17, 0x00	; 0
    c98a:	98 01       	movw	r18, r16
    c98c:	b7 01       	movw	r22, r14
    c98e:	a6 01       	movw	r20, r12
    c990:	ce 01       	movw	r24, r28
    c992:	8f 96       	adiw	r24, 0x2f	; 47
    c994:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <remove_chain>
    c998:	8c 01       	movw	r16, r24
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    c99a:	89 2b       	or	r24, r25
    c99c:	39 f6       	brne	.-114    	; 0xc92c <f_unlink+0xd0>
    c99e:	eb cf       	rjmp	.-42     	; 0xc976 <f_unlink+0x11a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    c9a0:	c0 5a       	subi	r28, 0xA0	; 160
    c9a2:	df 4f       	sbci	r29, 0xFF	; 255
    c9a4:	eb e0       	ldi	r30, 0x0B	; 11
    c9a6:	0c 94 7f e3 	jmp	0x1c6fe	; 0x1c6fe <__epilogue_restores__+0xe>

0000c9aa <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    c9aa:	a0 e4       	ldi	r26, 0x40	; 64
    c9ac:	b0 e0       	ldi	r27, 0x00	; 0
    c9ae:	eb ed       	ldi	r30, 0xDB	; 219
    c9b0:	f4 e6       	ldi	r31, 0x64	; 100
    c9b2:	0c 94 5e e3 	jmp	0x1c6bc	; 0x1c6bc <__prologue_saves__+0x4>
    c9b6:	21 96       	adiw	r28, 0x01	; 1
    c9b8:	9f af       	std	Y+63, r25	; 0x3f
    c9ba:	8e af       	std	Y+62, r24	; 0x3e
    c9bc:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    c9be:	42 e0       	ldi	r20, 0x02	; 2
    c9c0:	be 01       	movw	r22, r28
    c9c2:	63 5c       	subi	r22, 0xC3	; 195
    c9c4:	7f 4f       	sbci	r23, 0xFF	; 255
    c9c6:	ce 01       	movw	r24, r28
    c9c8:	cf 96       	adiw	r24, 0x3f	; 63
    c9ca:	0e 94 0a 4b 	call	0x9614	; 0x9614 <mount_volume>
	if (res == FR_OK) {
    c9ce:	00 97       	sbiw	r24, 0x00	; 0
    c9d0:	09 f0       	breq	.+2      	; 0xc9d4 <f_mkdir+0x2a>
    c9d2:	d6 c0       	rjmp	.+428    	; 0xcb80 <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    c9d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    c9d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    c9d8:	9a 83       	std	Y+2, r25	; 0x02
    c9da:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    c9dc:	80 e0       	ldi	r24, 0x00	; 0
    c9de:	92 e0       	ldi	r25, 0x02	; 2
    c9e0:	2b d3       	rcall	.+1622   	; 0xd038 <ff_memalloc>
    c9e2:	6c 01       	movw	r12, r24
    c9e4:	00 97       	sbiw	r24, 0x00	; 0
    c9e6:	e9 f0       	breq	.+58     	; 0xca22 <f_mkdir+0x78>
    c9e8:	ed ad       	ldd	r30, Y+61	; 0x3d
    c9ea:	fe ad       	ldd	r31, Y+62	; 0x3e
    c9ec:	94 87       	std	Z+12, r25	; 0x0c
    c9ee:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    c9f0:	21 96       	adiw	r28, 0x01	; 1
    c9f2:	6e ad       	ldd	r22, Y+62	; 0x3e
    c9f4:	7f ad       	ldd	r23, Y+63	; 0x3f
    c9f6:	21 97       	sbiw	r28, 0x01	; 1
    c9f8:	ce 01       	movw	r24, r28
    c9fa:	01 96       	adiw	r24, 0x01	; 1
    c9fc:	0e 94 59 56 	call	0xacb2	; 0xacb2 <follow_path>
    ca00:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    ca02:	89 2b       	or	r24, r25
    ca04:	89 f0       	breq	.+34     	; 0xca28 <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    ca06:	84 e0       	ldi	r24, 0x04	; 4
    ca08:	e8 16       	cp	r14, r24
    ca0a:	f1 04       	cpc	r15, r1
    ca0c:	31 f4       	brne	.+12     	; 0xca1a <f_mkdir+0x70>
    ca0e:	88 a5       	ldd	r24, Y+40	; 0x28
    ca10:	85 ff       	sbrs	r24, 5
    ca12:	0e c0       	rjmp	.+28     	; 0xca30 <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    ca14:	26 e0       	ldi	r18, 0x06	; 6
    ca16:	e2 2e       	mov	r14, r18
    ca18:	f1 2c       	mov	r15, r1
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    ca1a:	c6 01       	movw	r24, r12
    ca1c:	10 d3       	rcall	.+1568   	; 0xd03e <ff_memfree>
    ca1e:	c7 01       	movw	r24, r14
    ca20:	af c0       	rjmp	.+350    	; 0xcb80 <f_mkdir+0x1d6>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    ca22:	81 e1       	ldi	r24, 0x11	; 17
    ca24:	90 e0       	ldi	r25, 0x00	; 0
    ca26:	ac c0       	rjmp	.+344    	; 0xcb80 <f_mkdir+0x1d6>
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    ca28:	38 e0       	ldi	r19, 0x08	; 8
    ca2a:	e3 2e       	mov	r14, r19
    ca2c:	f1 2c       	mov	r15, r1
    ca2e:	f5 cf       	rjmp	.-22     	; 0xca1a <f_mkdir+0x70>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    ca30:	8d ad       	ldd	r24, Y+61	; 0x3d
    ca32:	9e ad       	ldd	r25, Y+62	; 0x3e
    ca34:	98 ab       	std	Y+48, r25	; 0x30
    ca36:	8f a7       	std	Y+47, r24	; 0x2f
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    ca38:	40 e0       	ldi	r20, 0x00	; 0
    ca3a:	50 e0       	ldi	r21, 0x00	; 0
    ca3c:	ba 01       	movw	r22, r20
    ca3e:	ce 01       	movw	r24, r28
    ca40:	8f 96       	adiw	r24, 0x2f	; 47
    ca42:	0e 94 d4 4f 	call	0x9fa8	; 0x9fa8 <create_chain>
    ca46:	4b 01       	movw	r8, r22
    ca48:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    ca4a:	67 2b       	or	r22, r23
    ca4c:	68 2b       	or	r22, r24
    ca4e:	69 2b       	or	r22, r25
    ca50:	09 f1       	breq	.+66     	; 0xca94 <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    ca52:	e1 e0       	ldi	r30, 0x01	; 1
    ca54:	8e 16       	cp	r8, r30
    ca56:	91 04       	cpc	r9, r1
    ca58:	a1 04       	cpc	r10, r1
    ca5a:	b1 04       	cpc	r11, r1
    ca5c:	61 f0       	breq	.+24     	; 0xca76 <f_mkdir+0xcc>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    ca5e:	ff ef       	ldi	r31, 0xFF	; 255
    ca60:	8f 16       	cp	r8, r31
    ca62:	9f 06       	cpc	r9, r31
    ca64:	af 06       	cpc	r10, r31
    ca66:	bf 06       	cpc	r11, r31
    ca68:	d9 f4       	brne	.+54     	; 0xcaa0 <f_mkdir+0xf6>
			tm = GET_FATTIME();
    ca6a:	0e 94 8d 6f 	call	0xdf1a	; 0xdf1a <get_fattime>
    ca6e:	ee 24       	eor	r14, r14
    ca70:	e3 94       	inc	r14
    ca72:	f1 2c       	mov	r15, r1
    ca74:	05 c0       	rjmp	.+10     	; 0xca80 <f_mkdir+0xd6>
    ca76:	0e 94 8d 6f 	call	0xdf1a	; 0xdf1a <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    ca7a:	92 e0       	ldi	r25, 0x02	; 2
    ca7c:	e9 2e       	mov	r14, r25
    ca7e:	f1 2c       	mov	r15, r1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    ca80:	00 e0       	ldi	r16, 0x00	; 0
    ca82:	10 e0       	ldi	r17, 0x00	; 0
    ca84:	98 01       	movw	r18, r16
    ca86:	b5 01       	movw	r22, r10
    ca88:	a4 01       	movw	r20, r8
    ca8a:	ce 01       	movw	r24, r28
    ca8c:	8f 96       	adiw	r24, 0x2f	; 47
    ca8e:	0e 94 fa 50 	call	0xa1f4	; 0xa1f4 <remove_chain>
    ca92:	c3 cf       	rjmp	.-122    	; 0xca1a <f_mkdir+0x70>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    ca94:	0e 94 8d 6f 	call	0xdf1a	; 0xdf1a <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    ca98:	87 e0       	ldi	r24, 0x07	; 7
    ca9a:	e8 2e       	mov	r14, r24
    ca9c:	f1 2c       	mov	r15, r1
    ca9e:	f0 cf       	rjmp	.-32     	; 0xca80 <f_mkdir+0xd6>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    caa0:	0e 94 8d 6f 	call	0xdf1a	; 0xdf1a <get_fattime>
    caa4:	2b 01       	movw	r4, r22
    caa6:	3c 01       	movw	r6, r24
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    caa8:	b5 01       	movw	r22, r10
    caaa:	a4 01       	movw	r20, r8
    caac:	8d ad       	ldd	r24, Y+61	; 0x3d
    caae:	9e ad       	ldd	r25, Y+62	; 0x3e
    cab0:	0e 94 e7 49 	call	0x93ce	; 0x93ce <dir_clear>
    cab4:	7c 01       	movw	r14, r24
				if (res == FR_OK) {
    cab6:	89 2b       	or	r24, r25
    cab8:	19 f7       	brne	.-58     	; 0xca80 <f_mkdir+0xd6>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    caba:	8d ad       	ldd	r24, Y+61	; 0x3d
    cabc:	9e ad       	ldd	r25, Y+62	; 0x3e
    cabe:	4b e0       	ldi	r20, 0x0B	; 11
    cac0:	50 e0       	ldi	r21, 0x00	; 0
    cac2:	60 e2       	ldi	r22, 0x20	; 32
    cac4:	70 e0       	ldi	r23, 0x00	; 0
    cac6:	c5 96       	adiw	r24, 0x35	; 53
    cac8:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <mem_set>
						fs->win[DIR_Name] = '.';
    cacc:	8d ad       	ldd	r24, Y+61	; 0x3d
    cace:	9e ad       	ldd	r25, Y+62	; 0x3e
    cad0:	1e e2       	ldi	r17, 0x2E	; 46
    cad2:	fc 01       	movw	r30, r24
    cad4:	15 ab       	std	Z+53, r17	; 0x35
						fs->win[DIR_Attr] = AM_DIR;
    cad6:	e0 5c       	subi	r30, 0xC0	; 192
    cad8:	ff 4f       	sbci	r31, 0xFF	; 255
    cada:	20 e1       	ldi	r18, 0x10	; 16
    cadc:	20 83       	st	Z, r18
						st_dword(fs->win + DIR_ModTime, tm);
    cade:	b3 01       	movw	r22, r6
    cae0:	a2 01       	movw	r20, r4
    cae2:	85 5b       	subi	r24, 0xB5	; 181
    cae4:	9f 4f       	sbci	r25, 0xFF	; 255
    cae6:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <st_dword>
						st_clust(fs, fs->win, dcl);
    caea:	8d ad       	ldd	r24, Y+61	; 0x3d
    caec:	9e ad       	ldd	r25, Y+62	; 0x3e
    caee:	bc 01       	movw	r22, r24
    caf0:	6b 5c       	subi	r22, 0xCB	; 203
    caf2:	7f 4f       	sbci	r23, 0xFF	; 255
    caf4:	a5 01       	movw	r20, r10
    caf6:	94 01       	movw	r18, r8
    caf8:	0e 94 15 49 	call	0x922a	; 0x922a <st_clust.isra.5>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    cafc:	8d ad       	ldd	r24, Y+61	; 0x3d
    cafe:	9e ad       	ldd	r25, Y+62	; 0x3e
    cb00:	bc 01       	movw	r22, r24
    cb02:	6b 5c       	subi	r22, 0xCB	; 203
    cb04:	7f 4f       	sbci	r23, 0xFF	; 255
    cb06:	40 e2       	ldi	r20, 0x20	; 32
    cb08:	50 e0       	ldi	r21, 0x00	; 0
    cb0a:	8b 5a       	subi	r24, 0xAB	; 171
    cb0c:	9f 4f       	sbci	r25, 0xFF	; 255
    cb0e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    cb12:	8d ad       	ldd	r24, Y+61	; 0x3d
    cb14:	9e ad       	ldd	r25, Y+62	; 0x3e
    cb16:	fc 01       	movw	r30, r24
    cb18:	ea 5a       	subi	r30, 0xAA	; 170
    cb1a:	ff 4f       	sbci	r31, 0xFF	; 255
    cb1c:	10 83       	st	Z, r17
						st_clust(fs, fs->win + SZDIRE, pcl);
    cb1e:	2f 81       	ldd	r18, Y+7	; 0x07
    cb20:	38 85       	ldd	r19, Y+8	; 0x08
    cb22:	49 85       	ldd	r20, Y+9	; 0x09
    cb24:	5a 85       	ldd	r21, Y+10	; 0x0a
    cb26:	bc 01       	movw	r22, r24
    cb28:	6b 5a       	subi	r22, 0xAB	; 171
    cb2a:	7f 4f       	sbci	r23, 0xFF	; 255
    cb2c:	0e 94 15 49 	call	0x922a	; 0x922a <st_clust.isra.5>
						fs->wflag = 1;
    cb30:	ed ad       	ldd	r30, Y+61	; 0x3d
    cb32:	fe ad       	ldd	r31, Y+62	; 0x3e
    cb34:	81 e0       	ldi	r24, 0x01	; 1
    cb36:	83 83       	std	Z+3, r24	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    cb38:	ce 01       	movw	r24, r28
    cb3a:	01 96       	adiw	r24, 0x01	; 1
    cb3c:	0e 94 cb 54 	call	0xa996	; 0xa996 <dir_register>
    cb40:	7c 01       	movw	r14, r24
				}
			}
			if (res == FR_OK) {
    cb42:	89 2b       	or	r24, r25
    cb44:	09 f0       	breq	.+2      	; 0xcb48 <f_mkdir+0x19e>
    cb46:	9c cf       	rjmp	.-200    	; 0xca80 <f_mkdir+0xd6>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    cb48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cb4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cb4c:	b3 01       	movw	r22, r6
    cb4e:	a2 01       	movw	r20, r4
    cb50:	46 96       	adiw	r24, 0x16	; 22
    cb52:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    cb56:	6b 8d       	ldd	r22, Y+27	; 0x1b
    cb58:	7c 8d       	ldd	r23, Y+28	; 0x1c
    cb5a:	a5 01       	movw	r20, r10
    cb5c:	94 01       	movw	r18, r8
    cb5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    cb60:	9e ad       	ldd	r25, Y+62	; 0x3e
    cb62:	0e 94 15 49 	call	0x922a	; 0x922a <st_clust.isra.5>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    cb66:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cb68:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cb6a:	80 e1       	ldi	r24, 0x10	; 16
    cb6c:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    cb6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    cb70:	9e ad       	ldd	r25, Y+62	; 0x3e
    cb72:	21 e0       	ldi	r18, 0x01	; 1
    cb74:	fc 01       	movw	r30, r24
    cb76:	23 83       	std	Z+3, r18	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    cb78:	0e 94 75 49 	call	0x92ea	; 0x92ea <sync_fs>
    cb7c:	7c 01       	movw	r14, r24
    cb7e:	4d cf       	rjmp	.-358    	; 0xca1a <f_mkdir+0x70>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cb80:	c0 5c       	subi	r28, 0xC0	; 192
    cb82:	df 4f       	sbci	r29, 0xFF	; 255
    cb84:	e0 e1       	ldi	r30, 0x10	; 16
    cb86:	0c 94 7a e3 	jmp	0x1c6f4	; 0x1c6f4 <__epilogue_restores__+0x4>

0000cb8a <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    cb8a:	a2 e8       	ldi	r26, 0x82	; 130
    cb8c:	b0 e0       	ldi	r27, 0x00	; 0
    cb8e:	eb ec       	ldi	r30, 0xCB	; 203
    cb90:	f5 e6       	ldi	r31, 0x65	; 101
    cb92:	0c 94 65 e3 	jmp	0x1c6ca	; 0x1c6ca <__prologue_saves__+0x12>
    cb96:	c1 58       	subi	r28, 0x81	; 129
    cb98:	df 4f       	sbci	r29, 0xFF	; 255
    cb9a:	99 83       	std	Y+1, r25	; 0x01
    cb9c:	88 83       	st	Y, r24
    cb9e:	cf 57       	subi	r28, 0x7F	; 127
    cba0:	d0 40       	sbci	r29, 0x00	; 0
    cba2:	cf 57       	subi	r28, 0x7F	; 127
    cba4:	df 4f       	sbci	r29, 0xFF	; 255
    cba6:	79 83       	std	Y+1, r23	; 0x01
    cba8:	68 83       	st	Y, r22
    cbaa:	c1 58       	subi	r28, 0x81	; 129
    cbac:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    cbae:	ce 01       	movw	r24, r28
    cbb0:	8f 57       	subi	r24, 0x7F	; 127
    cbb2:	9f 4f       	sbci	r25, 0xFF	; 255
    cbb4:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    cbb8:	42 e0       	ldi	r20, 0x02	; 2
    cbba:	be 01       	movw	r22, r28
    cbbc:	63 58       	subi	r22, 0x83	; 131
    cbbe:	7f 4f       	sbci	r23, 0xFF	; 255
    cbc0:	ce 01       	movw	r24, r28
    cbc2:	81 58       	subi	r24, 0x81	; 129
    cbc4:	9f 4f       	sbci	r25, 0xFF	; 255
    cbc6:	0e 94 0a 4b 	call	0x9614	; 0x9614 <mount_volume>
	if (res == FR_OK) {
    cbca:	00 97       	sbiw	r24, 0x00	; 0
    cbcc:	09 f0       	breq	.+2      	; 0xcbd0 <f_rename+0x46>
    cbce:	ed c0       	rjmp	.+474    	; 0xcdaa <f_rename+0x220>
		djo.obj.fs = fs;
    cbd0:	ef 96       	adiw	r28, 0x3f	; 63
    cbd2:	8e ad       	ldd	r24, Y+62	; 0x3e
    cbd4:	9f ad       	ldd	r25, Y+63	; 0x3f
    cbd6:	ef 97       	sbiw	r28, 0x3f	; 63
    cbd8:	98 ab       	std	Y+48, r25	; 0x30
    cbda:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cbdc:	80 e0       	ldi	r24, 0x00	; 0
    cbde:	92 e0       	ldi	r25, 0x02	; 2
    cbe0:	2b d2       	rcall	.+1110   	; 0xd038 <ff_memalloc>
    cbe2:	6c 01       	movw	r12, r24
    cbe4:	00 97       	sbiw	r24, 0x00	; 0
    cbe6:	f1 f0       	breq	.+60     	; 0xcc24 <f_rename+0x9a>
    cbe8:	ef 96       	adiw	r28, 0x3f	; 63
    cbea:	ee ad       	ldd	r30, Y+62	; 0x3e
    cbec:	ff ad       	ldd	r31, Y+63	; 0x3f
    cbee:	ef 97       	sbiw	r28, 0x3f	; 63
    cbf0:	94 87       	std	Z+12, r25	; 0x0c
    cbf2:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    cbf4:	c1 58       	subi	r28, 0x81	; 129
    cbf6:	df 4f       	sbci	r29, 0xFF	; 255
    cbf8:	68 81       	ld	r22, Y
    cbfa:	79 81       	ldd	r23, Y+1	; 0x01
    cbfc:	cf 57       	subi	r28, 0x7F	; 127
    cbfe:	d0 40       	sbci	r29, 0x00	; 0
    cc00:	ce 01       	movw	r24, r28
    cc02:	8f 96       	adiw	r24, 0x2f	; 47
    cc04:	0e 94 59 56 	call	0xacb2	; 0xacb2 <follow_path>
    cc08:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    cc0a:	89 2b       	or	r24, r25
    cc0c:	39 f4       	brne	.+14     	; 0xcc1c <f_rename+0x92>
    cc0e:	67 96       	adiw	r28, 0x17	; 23
    cc10:	8f ad       	ldd	r24, Y+63	; 0x3f
    cc12:	67 97       	sbiw	r28, 0x17	; 23
    cc14:	80 7a       	andi	r24, 0xA0	; 160
    cc16:	49 f0       	breq	.+18     	; 0xcc2a <f_rename+0xa0>
    cc18:	06 e0       	ldi	r16, 0x06	; 6
    cc1a:	10 e0       	ldi	r17, 0x00	; 0
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    cc1c:	c6 01       	movw	r24, r12
    cc1e:	0f d2       	rcall	.+1054   	; 0xd03e <ff_memfree>
    cc20:	c8 01       	movw	r24, r16
    cc22:	c3 c0       	rjmp	.+390    	; 0xcdaa <f_rename+0x220>

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    cc24:	81 e1       	ldi	r24, 0x11	; 17
    cc26:	90 e0       	ldi	r25, 0x00	; 0
    cc28:	c0 c0       	rjmp	.+384    	; 0xcdaa <f_rename+0x220>
    cc2a:	2b 96       	adiw	r28, 0x0b	; 11
    cc2c:	6e ad       	ldd	r22, Y+62	; 0x3e
    cc2e:	7f ad       	ldd	r23, Y+63	; 0x3f
    cc30:	2b 97       	sbiw	r28, 0x0b	; 11
    cc32:	40 e2       	ldi	r20, 0x20	; 32
    cc34:	50 e0       	ldi	r21, 0x00	; 0
    cc36:	ce 01       	movw	r24, r28
    cc38:	83 5a       	subi	r24, 0xA3	; 163
    cc3a:	9f 4f       	sbci	r25, 0xFF	; 255
    cc3c:	0e 94 38 47 	call	0x8e70	; 0x8e70 <mem_cpy.part.0>
    cc40:	4e e2       	ldi	r20, 0x2E	; 46
    cc42:	50 e0       	ldi	r21, 0x00	; 0
    cc44:	be 01       	movw	r22, r28
    cc46:	61 5d       	subi	r22, 0xD1	; 209
    cc48:	7f 4f       	sbci	r23, 0xFF	; 255
    cc4a:	ce 01       	movw	r24, r28
    cc4c:	01 96       	adiw	r24, 0x01	; 1
    cc4e:	0e 94 38 47 	call	0x8e70	; 0x8e70 <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    cc52:	cf 57       	subi	r28, 0x7F	; 127
    cc54:	df 4f       	sbci	r29, 0xFF	; 255
    cc56:	68 81       	ld	r22, Y
    cc58:	79 81       	ldd	r23, Y+1	; 0x01
    cc5a:	c1 58       	subi	r28, 0x81	; 129
    cc5c:	d0 40       	sbci	r29, 0x00	; 0
    cc5e:	ce 01       	movw	r24, r28
    cc60:	01 96       	adiw	r24, 0x01	; 1
    cc62:	0e 94 59 56 	call	0xacb2	; 0xacb2 <follow_path>
    cc66:	8c 01       	movw	r16, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    cc68:	89 2b       	or	r24, r25
    cc6a:	f9 f4       	brne	.+62     	; 0xccaa <f_rename+0x120>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    cc6c:	4f 81       	ldd	r20, Y+7	; 0x07
    cc6e:	58 85       	ldd	r21, Y+8	; 0x08
    cc70:	69 85       	ldd	r22, Y+9	; 0x09
    cc72:	7a 85       	ldd	r23, Y+10	; 0x0a
    cc74:	8d a9       	ldd	r24, Y+53	; 0x35
    cc76:	9e a9       	ldd	r25, Y+54	; 0x36
    cc78:	af a9       	ldd	r26, Y+55	; 0x37
    cc7a:	b8 ad       	ldd	r27, Y+56	; 0x38
    cc7c:	48 17       	cp	r20, r24
    cc7e:	59 07       	cpc	r21, r25
    cc80:	6a 07       	cpc	r22, r26
    cc82:	7b 07       	cpc	r23, r27
    cc84:	09 f0       	breq	.+2      	; 0xcc88 <f_rename+0xfe>
    cc86:	8b c0       	rjmp	.+278    	; 0xcd9e <f_rename+0x214>
    cc88:	4f 85       	ldd	r20, Y+15	; 0x0f
    cc8a:	58 89       	ldd	r21, Y+16	; 0x10
    cc8c:	69 89       	ldd	r22, Y+17	; 0x11
    cc8e:	7a 89       	ldd	r23, Y+18	; 0x12
    cc90:	21 96       	adiw	r28, 0x01	; 1
    cc92:	8c ad       	ldd	r24, Y+60	; 0x3c
    cc94:	9d ad       	ldd	r25, Y+61	; 0x3d
    cc96:	ae ad       	ldd	r26, Y+62	; 0x3e
    cc98:	bf ad       	ldd	r27, Y+63	; 0x3f
    cc9a:	21 97       	sbiw	r28, 0x01	; 1
    cc9c:	48 17       	cp	r20, r24
    cc9e:	59 07       	cpc	r21, r25
    cca0:	6a 07       	cpc	r22, r26
    cca2:	7b 07       	cpc	r23, r27
    cca4:	09 f0       	breq	.+2      	; 0xcca8 <f_rename+0x11e>
    cca6:	7b c0       	rjmp	.+246    	; 0xcd9e <f_rename+0x214>
    cca8:	04 c0       	rjmp	.+8      	; 0xccb2 <f_rename+0x128>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    ccaa:	04 30       	cpi	r16, 0x04	; 4
    ccac:	11 05       	cpc	r17, r1
    ccae:	09 f0       	breq	.+2      	; 0xccb2 <f_rename+0x128>
    ccb0:	b5 cf       	rjmp	.-150    	; 0xcc1c <f_rename+0x92>
					res = dir_register(&djn);			/* Register the new entry */
    ccb2:	ce 01       	movw	r24, r28
    ccb4:	01 96       	adiw	r24, 0x01	; 1
    ccb6:	0e 94 cb 54 	call	0xa996	; 0xa996 <dir_register>
    ccba:	8c 01       	movw	r16, r24
					if (res == FR_OK) {
    ccbc:	89 2b       	or	r24, r25
    ccbe:	09 f0       	breq	.+2      	; 0xccc2 <f_rename+0x138>
    ccc0:	ad cf       	rjmp	.-166    	; 0xcc1c <f_rename+0x92>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    ccc2:	0b 8d       	ldd	r16, Y+27	; 0x1b
    ccc4:	1c 8d       	ldd	r17, Y+28	; 0x1c
    ccc6:	6d e5       	ldi	r22, 0x5D	; 93
    ccc8:	70 e0       	ldi	r23, 0x00	; 0
    ccca:	6c 0f       	add	r22, r28
    cccc:	7d 1f       	adc	r23, r29
    ccce:	63 5f       	subi	r22, 0xF3	; 243
    ccd0:	7f 4f       	sbci	r23, 0xFF	; 255
    ccd2:	43 e1       	ldi	r20, 0x13	; 19
    ccd4:	50 e0       	ldi	r21, 0x00	; 0
    ccd6:	c8 01       	movw	r24, r16
    ccd8:	0d 96       	adiw	r24, 0x0d	; 13
    ccda:	0e 94 38 47 	call	0x8e70	; 0x8e70 <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    ccde:	a9 96       	adiw	r28, 0x29	; 41
    cce0:	8f ad       	ldd	r24, Y+63	; 0x3f
    cce2:	a9 97       	sbiw	r28, 0x29	; 41
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    cce4:	84 ff       	sbrs	r24, 4
    cce6:	80 62       	ori	r24, 0x20	; 32
    cce8:	f8 01       	movw	r30, r16
    ccea:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    ccec:	ef 96       	adiw	r28, 0x3f	; 63
    ccee:	ee ac       	ldd	r14, Y+62	; 0x3e
    ccf0:	ff ac       	ldd	r15, Y+63	; 0x3f
    ccf2:	ef 97       	sbiw	r28, 0x3f	; 63
    ccf4:	bb 24       	eor	r11, r11
    ccf6:	b3 94       	inc	r11
    ccf8:	f7 01       	movw	r30, r14
    ccfa:	b3 82       	std	Z+3, r11	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    ccfc:	f8 01       	movw	r30, r16
    ccfe:	83 85       	ldd	r24, Z+11	; 0x0b
    cd00:	84 ff       	sbrs	r24, 4
    cd02:	3d c0       	rjmp	.+122    	; 0xcd7e <f_rename+0x1f4>
    cd04:	4d a9       	ldd	r20, Y+53	; 0x35
    cd06:	5e a9       	ldd	r21, Y+54	; 0x36
    cd08:	6f a9       	ldd	r22, Y+55	; 0x37
    cd0a:	78 ad       	ldd	r23, Y+56	; 0x38
    cd0c:	8f 81       	ldd	r24, Y+7	; 0x07
    cd0e:	98 85       	ldd	r25, Y+8	; 0x08
    cd10:	a9 85       	ldd	r26, Y+9	; 0x09
    cd12:	ba 85       	ldd	r27, Y+10	; 0x0a
    cd14:	48 17       	cp	r20, r24
    cd16:	59 07       	cpc	r21, r25
    cd18:	6a 07       	cpc	r22, r26
    cd1a:	7b 07       	cpc	r23, r27
    cd1c:	81 f1       	breq	.+96     	; 0xcd7e <f_rename+0x1f4>
							sect = clst2sect(fs, ld_clust(fs, dir));
    cd1e:	b8 01       	movw	r22, r16
    cd20:	f7 01       	movw	r30, r14
    cd22:	80 81       	ld	r24, Z
    cd24:	0e 94 00 49 	call	0x9200	; 0x9200 <ld_clust.isra.4>
    cd28:	ab 01       	movw	r20, r22
    cd2a:	bc 01       	movw	r22, r24
    cd2c:	c7 01       	movw	r24, r14
    cd2e:	0e 94 6d 46 	call	0x8cda	; 0x8cda <clst2sect>
    cd32:	ab 01       	movw	r20, r22
    cd34:	bc 01       	movw	r22, r24
							if (sect == 0) {
    cd36:	41 15       	cp	r20, r1
    cd38:	51 05       	cpc	r21, r1
    cd3a:	61 05       	cpc	r22, r1
    cd3c:	71 05       	cpc	r23, r1
    cd3e:	91 f1       	breq	.+100    	; 0xcda4 <f_rename+0x21a>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    cd40:	c7 01       	movw	r24, r14
    cd42:	0e 94 8f 4a 	call	0x951e	; 0x951e <move_window>
    cd46:	8c 01       	movw	r16, r24
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    cd48:	89 2b       	or	r24, r25
    cd4a:	09 f0       	breq	.+2      	; 0xcd4e <f_rename+0x1c4>
    cd4c:	67 cf       	rjmp	.-306    	; 0xcc1c <f_rename+0x92>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cd4e:	ef 96       	adiw	r28, 0x3f	; 63
    cd50:	8e ad       	ldd	r24, Y+62	; 0x3e
    cd52:	9f ad       	ldd	r25, Y+63	; 0x3f
    cd54:	ef 97       	sbiw	r28, 0x3f	; 63
								if (res == FR_OK && dir[1] == '.') {
    cd56:	fc 01       	movw	r30, r24
    cd58:	ea 5a       	subi	r30, 0xAA	; 170
    cd5a:	ff 4f       	sbci	r31, 0xFF	; 255
    cd5c:	20 81       	ld	r18, Z
    cd5e:	2e 32       	cpi	r18, 0x2E	; 46
    cd60:	71 f4       	brne	.+28     	; 0xcd7e <f_rename+0x1f4>
									st_clust(fs, dir, djn.obj.sclust);
    cd62:	2f 81       	ldd	r18, Y+7	; 0x07
    cd64:	38 85       	ldd	r19, Y+8	; 0x08
    cd66:	49 85       	ldd	r20, Y+9	; 0x09
    cd68:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cd6a:	bc 01       	movw	r22, r24
    cd6c:	6b 5a       	subi	r22, 0xAB	; 171
    cd6e:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    cd70:	0e 94 15 49 	call	0x922a	; 0x922a <st_clust.isra.5>
									fs->wflag = 1;
    cd74:	ef 96       	adiw	r28, 0x3f	; 63
    cd76:	ee ad       	ldd	r30, Y+62	; 0x3e
    cd78:	ff ad       	ldd	r31, Y+63	; 0x3f
    cd7a:	ef 97       	sbiw	r28, 0x3f	; 63
    cd7c:	b3 82       	std	Z+3, r11	; 0x03
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    cd7e:	ce 01       	movw	r24, r28
    cd80:	8f 96       	adiw	r24, 0x2f	; 47
    cd82:	0e 94 75 53 	call	0xa6ea	; 0xa6ea <dir_remove>
    cd86:	8c 01       	movw	r16, r24
				if (res == FR_OK) {
    cd88:	89 2b       	or	r24, r25
    cd8a:	09 f0       	breq	.+2      	; 0xcd8e <f_rename+0x204>
    cd8c:	47 cf       	rjmp	.-370    	; 0xcc1c <f_rename+0x92>
					res = sync_fs(fs);
    cd8e:	ef 96       	adiw	r28, 0x3f	; 63
    cd90:	8e ad       	ldd	r24, Y+62	; 0x3e
    cd92:	9f ad       	ldd	r25, Y+63	; 0x3f
    cd94:	ef 97       	sbiw	r28, 0x3f	; 63
    cd96:	0e 94 75 49 	call	0x92ea	; 0x92ea <sync_fs>
    cd9a:	8c 01       	movw	r16, r24
    cd9c:	3f cf       	rjmp	.-386    	; 0xcc1c <f_rename+0x92>
    cd9e:	08 e0       	ldi	r16, 0x08	; 8
    cda0:	10 e0       	ldi	r17, 0x00	; 0
    cda2:	3c cf       	rjmp	.-392    	; 0xcc1c <f_rename+0x92>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    cda4:	02 e0       	ldi	r16, 0x02	; 2
    cda6:	10 e0       	ldi	r17, 0x00	; 0
    cda8:	39 cf       	rjmp	.-398    	; 0xcc1c <f_rename+0x92>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cdaa:	ce 57       	subi	r28, 0x7E	; 126
    cdac:	df 4f       	sbci	r29, 0xFF	; 255
    cdae:	e9 e0       	ldi	r30, 0x09	; 9
    cdb0:	0c 94 81 e3 	jmp	0x1c702	; 0x1c702 <__epilogue_restores__+0x12>

0000cdb4 <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    cdb4:	a2 e3       	ldi	r26, 0x32	; 50
    cdb6:	b0 e0       	ldi	r27, 0x00	; 0
    cdb8:	e0 ee       	ldi	r30, 0xE0	; 224
    cdba:	f6 e6       	ldi	r31, 0x66	; 102
    cdbc:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
    cdc0:	9a ab       	std	Y+50, r25	; 0x32
    cdc2:	89 ab       	std	Y+49, r24	; 0x31
    cdc4:	e6 2e       	mov	r14, r22
    cdc6:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cdc8:	42 e0       	ldi	r20, 0x02	; 2
    cdca:	be 01       	movw	r22, r28
    cdcc:	61 5d       	subi	r22, 0xD1	; 209
    cdce:	7f 4f       	sbci	r23, 0xFF	; 255
    cdd0:	ce 01       	movw	r24, r28
    cdd2:	c1 96       	adiw	r24, 0x31	; 49
    cdd4:	0e 94 0a 4b 	call	0x9614	; 0x9614 <mount_volume>
	if (res == FR_OK) {
    cdd8:	00 97       	sbiw	r24, 0x00	; 0
    cdda:	a9 f5       	brne	.+106    	; 0xce46 <f_chmod+0x92>
		dj.obj.fs = fs;
    cddc:	8f a5       	ldd	r24, Y+47	; 0x2f
    cdde:	98 a9       	ldd	r25, Y+48	; 0x30
    cde0:	9a 83       	std	Y+2, r25	; 0x02
    cde2:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cde4:	80 e0       	ldi	r24, 0x00	; 0
    cde6:	92 e0       	ldi	r25, 0x02	; 2
    cde8:	27 d1       	rcall	.+590    	; 0xd038 <ff_memalloc>
    cdea:	6c 01       	movw	r12, r24
    cdec:	00 97       	sbiw	r24, 0x00	; 0
    cdee:	b1 f0       	breq	.+44     	; 0xce1c <f_chmod+0x68>
    cdf0:	ef a5       	ldd	r30, Y+47	; 0x2f
    cdf2:	f8 a9       	ldd	r31, Y+48	; 0x30
    cdf4:	94 87       	std	Z+12, r25	; 0x0c
    cdf6:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cdf8:	69 a9       	ldd	r22, Y+49	; 0x31
    cdfa:	7a a9       	ldd	r23, Y+50	; 0x32
    cdfc:	ce 01       	movw	r24, r28
    cdfe:	01 96       	adiw	r24, 0x01	; 1
    ce00:	0e 94 59 56 	call	0xacb2	; 0xacb2 <follow_path>
    ce04:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    ce06:	89 2b       	or	r24, r25
    ce08:	29 f4       	brne	.+10     	; 0xce14 <f_chmod+0x60>
    ce0a:	88 a5       	ldd	r24, Y+40	; 0x28
    ce0c:	80 7a       	andi	r24, 0xA0	; 160
    ce0e:	49 f0       	breq	.+18     	; 0xce22 <f_chmod+0x6e>
    ce10:	06 e0       	ldi	r16, 0x06	; 6
    ce12:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    ce14:	c6 01       	movw	r24, r12
    ce16:	13 d1       	rcall	.+550    	; 0xd03e <ff_memfree>
    ce18:	c8 01       	movw	r24, r16
    ce1a:	15 c0       	rjmp	.+42     	; 0xce46 <f_chmod+0x92>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    ce1c:	81 e1       	ldi	r24, 0x11	; 17
    ce1e:	90 e0       	ldi	r25, 0x00	; 0
    ce20:	12 c0       	rjmp	.+36     	; 0xce46 <f_chmod+0x92>
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    ce22:	eb 8d       	ldd	r30, Y+27	; 0x1b
    ce24:	fc 8d       	ldd	r31, Y+28	; 0x1c
    ce26:	83 85       	ldd	r24, Z+11	; 0x0b
    ce28:	6e 2d       	mov	r22, r14
    ce2a:	68 27       	eor	r22, r24
    ce2c:	6f 21       	and	r22, r15
    ce2e:	67 72       	andi	r22, 0x27	; 39
    ce30:	68 27       	eor	r22, r24
    ce32:	63 87       	std	Z+11, r22	; 0x0b
				fs->wflag = 1;
    ce34:	8f a5       	ldd	r24, Y+47	; 0x2f
    ce36:	98 a9       	ldd	r25, Y+48	; 0x30
    ce38:	21 e0       	ldi	r18, 0x01	; 1
    ce3a:	fc 01       	movw	r30, r24
    ce3c:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    ce3e:	0e 94 75 49 	call	0x92ea	; 0x92ea <sync_fs>
    ce42:	8c 01       	movw	r16, r24
    ce44:	e7 cf       	rjmp	.-50     	; 0xce14 <f_chmod+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    ce46:	e2 96       	adiw	r28, 0x32	; 50
    ce48:	e8 e0       	ldi	r30, 0x08	; 8
    ce4a:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

0000ce4e <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    ce4e:	a2 e3       	ldi	r26, 0x32	; 50
    ce50:	b0 e0       	ldi	r27, 0x00	; 0
    ce52:	ed e2       	ldi	r30, 0x2D	; 45
    ce54:	f7 e6       	ldi	r31, 0x67	; 103
    ce56:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
    ce5a:	9a ab       	std	Y+50, r25	; 0x32
    ce5c:	89 ab       	std	Y+49, r24	; 0x31
    ce5e:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    ce60:	42 e0       	ldi	r20, 0x02	; 2
    ce62:	be 01       	movw	r22, r28
    ce64:	61 5d       	subi	r22, 0xD1	; 209
    ce66:	7f 4f       	sbci	r23, 0xFF	; 255
    ce68:	ce 01       	movw	r24, r28
    ce6a:	c1 96       	adiw	r24, 0x31	; 49
    ce6c:	0e 94 0a 4b 	call	0x9614	; 0x9614 <mount_volume>
	if (res == FR_OK) {
    ce70:	00 97       	sbiw	r24, 0x00	; 0
    ce72:	09 f0       	breq	.+2      	; 0xce76 <f_utime+0x28>
    ce74:	41 c0       	rjmp	.+130    	; 0xcef8 <f_utime+0xaa>
		dj.obj.fs = fs;
    ce76:	8f a5       	ldd	r24, Y+47	; 0x2f
    ce78:	98 a9       	ldd	r25, Y+48	; 0x30
    ce7a:	9a 83       	std	Y+2, r25	; 0x02
    ce7c:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    ce7e:	80 e0       	ldi	r24, 0x00	; 0
    ce80:	92 e0       	ldi	r25, 0x02	; 2
    ce82:	da d0       	rcall	.+436    	; 0xd038 <ff_memalloc>
    ce84:	7c 01       	movw	r14, r24
    ce86:	00 97       	sbiw	r24, 0x00	; 0
    ce88:	b1 f0       	breq	.+44     	; 0xceb6 <f_utime+0x68>
    ce8a:	ef a5       	ldd	r30, Y+47	; 0x2f
    ce8c:	f8 a9       	ldd	r31, Y+48	; 0x30
    ce8e:	94 87       	std	Z+12, r25	; 0x0c
    ce90:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    ce92:	69 a9       	ldd	r22, Y+49	; 0x31
    ce94:	7a a9       	ldd	r23, Y+50	; 0x32
    ce96:	ce 01       	movw	r24, r28
    ce98:	01 96       	adiw	r24, 0x01	; 1
    ce9a:	0e 94 59 56 	call	0xacb2	; 0xacb2 <follow_path>
    ce9e:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cea0:	89 2b       	or	r24, r25
    cea2:	29 f4       	brne	.+10     	; 0xceae <f_utime+0x60>
    cea4:	88 a5       	ldd	r24, Y+40	; 0x28
    cea6:	80 7a       	andi	r24, 0xA0	; 160
    cea8:	49 f0       	breq	.+18     	; 0xcebc <f_utime+0x6e>
    ceaa:	06 e0       	ldi	r16, 0x06	; 6
    ceac:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    ceae:	c7 01       	movw	r24, r14
    ceb0:	c6 d0       	rcall	.+396    	; 0xd03e <ff_memfree>
    ceb2:	c8 01       	movw	r24, r16
    ceb4:	21 c0       	rjmp	.+66     	; 0xcef8 <f_utime+0xaa>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    ceb6:	81 e1       	ldi	r24, 0x11	; 17
    ceb8:	90 e0       	ldi	r25, 0x00	; 0
    ceba:	1e c0       	rjmp	.+60     	; 0xcef8 <f_utime+0xaa>
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    cebc:	f6 01       	movw	r30, r12
    cebe:	44 81       	ldd	r20, Z+4	; 0x04
    cec0:	55 81       	ldd	r21, Z+5	; 0x05
    cec2:	60 e0       	ldi	r22, 0x00	; 0
    cec4:	70 e0       	ldi	r23, 0x00	; 0
    cec6:	ba 01       	movw	r22, r20
    cec8:	55 27       	eor	r21, r21
    ceca:	44 27       	eor	r20, r20
    cecc:	86 81       	ldd	r24, Z+6	; 0x06
    cece:	97 81       	ldd	r25, Z+7	; 0x07
    ced0:	a0 e0       	ldi	r26, 0x00	; 0
    ced2:	b0 e0       	ldi	r27, 0x00	; 0
    ced4:	48 2b       	or	r20, r24
    ced6:	59 2b       	or	r21, r25
    ced8:	6a 2b       	or	r22, r26
    ceda:	7b 2b       	or	r23, r27
    cedc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cede:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cee0:	46 96       	adiw	r24, 0x16	; 22
    cee2:	0e 94 c9 45 	call	0x8b92	; 0x8b92 <st_dword>
				fs->wflag = 1;
    cee6:	8f a5       	ldd	r24, Y+47	; 0x2f
    cee8:	98 a9       	ldd	r25, Y+48	; 0x30
    ceea:	21 e0       	ldi	r18, 0x01	; 1
    ceec:	fc 01       	movw	r30, r24
    ceee:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cef0:	0e 94 75 49 	call	0x92ea	; 0x92ea <sync_fs>
    cef4:	8c 01       	movw	r16, r24
    cef6:	db cf       	rjmp	.-74     	; 0xceae <f_utime+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cef8:	e2 96       	adiw	r28, 0x32	; 50
    cefa:	e8 e0       	ldi	r30, 0x08	; 8
    cefc:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

0000cf00 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    cf00:	a2 e3       	ldi	r26, 0x32	; 50
    cf02:	b0 e0       	ldi	r27, 0x00	; 0
    cf04:	e6 e8       	ldi	r30, 0x86	; 134
    cf06:	f7 e6       	ldi	r31, 0x67	; 103
    cf08:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__prologue_saves__+0xc>
    cf0c:	9a ab       	std	Y+50, r25	; 0x32
    cf0e:	89 ab       	std	Y+49, r24	; 0x31
    cf10:	6b 01       	movw	r12, r22
    cf12:	5a 01       	movw	r10, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    cf14:	40 e0       	ldi	r20, 0x00	; 0
    cf16:	be 01       	movw	r22, r28
    cf18:	61 5d       	subi	r22, 0xD1	; 209
    cf1a:	7f 4f       	sbci	r23, 0xFF	; 255
    cf1c:	ce 01       	movw	r24, r28
    cf1e:	c1 96       	adiw	r24, 0x31	; 49
    cf20:	0e 94 0a 4b 	call	0x9614	; 0x9614 <mount_volume>
    cf24:	7c 01       	movw	r14, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    cf26:	89 2b       	or	r24, r25
    cf28:	09 f0       	breq	.+2      	; 0xcf2c <f_getlabel+0x2c>
    cf2a:	81 c0       	rjmp	.+258    	; 0xd02e <f_getlabel+0x12e>
    cf2c:	c1 14       	cp	r12, r1
    cf2e:	d1 04       	cpc	r13, r1
    cf30:	09 f4       	brne	.+2      	; 0xcf34 <f_getlabel+0x34>
    cf32:	53 c0       	rjmp	.+166    	; 0xcfda <f_getlabel+0xda>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    cf34:	8f a5       	ldd	r24, Y+47	; 0x2f
    cf36:	98 a9       	ldd	r25, Y+48	; 0x30
    cf38:	9a 83       	std	Y+2, r25	; 0x02
    cf3a:	89 83       	std	Y+1, r24	; 0x01
    cf3c:	1f 82       	std	Y+7, r1	; 0x07
    cf3e:	18 86       	std	Y+8, r1	; 0x08
    cf40:	19 86       	std	Y+9, r1	; 0x09
    cf42:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    cf44:	40 e0       	ldi	r20, 0x00	; 0
    cf46:	50 e0       	ldi	r21, 0x00	; 0
    cf48:	ba 01       	movw	r22, r20
    cf4a:	ce 01       	movw	r24, r28
    cf4c:	01 96       	adiw	r24, 0x01	; 1
    cf4e:	0e 94 13 4f 	call	0x9e26	; 0x9e26 <dir_sdi>
		if (res == FR_OK) {
    cf52:	00 97       	sbiw	r24, 0x00	; 0
    cf54:	e9 f5       	brne	.+122    	; 0xcfd0 <f_getlabel+0xd0>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    cf56:	61 e0       	ldi	r22, 0x01	; 1
    cf58:	70 e0       	ldi	r23, 0x00	; 0
    cf5a:	ce 01       	movw	r24, r28
    cf5c:	01 96       	adiw	r24, 0x01	; 1
    cf5e:	0e 94 ac 52 	call	0xa558	; 0xa558 <dir_read>
		 	if (res == FR_OK) {
    cf62:	00 97       	sbiw	r24, 0x00	; 0
    cf64:	a9 f5       	brne	.+106    	; 0xcfd0 <f_getlabel+0xd0>
    cf66:	00 e0       	ldi	r16, 0x00	; 0
    cf68:	10 e0       	ldi	r17, 0x00	; 0
    cf6a:	80 e0       	ldi	r24, 0x00	; 0
    cf6c:	90 e0       	ldi	r25, 0x00	; 0
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    cf6e:	4c 01       	movw	r8, r24
    cf70:	2f ef       	ldi	r18, 0xFF	; 255
    cf72:	82 1a       	sub	r8, r18
    cf74:	92 0a       	sbc	r9, r18
    cf76:	2b 8d       	ldd	r18, Y+27	; 0x1b
    cf78:	3c 8d       	ldd	r19, Y+28	; 0x1c
    cf7a:	f9 01       	movw	r30, r18
    cf7c:	e8 0f       	add	r30, r24
    cf7e:	f9 1f       	adc	r31, r25
    cf80:	80 81       	ld	r24, Z
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
    cf82:	65 eb       	ldi	r22, 0xB5	; 181
    cf84:	71 e0       	ldi	r23, 0x01	; 1
    cf86:	90 e0       	ldi	r25, 0x00	; 0
    cf88:	90 d0       	rcall	.+288    	; 0xd0aa <ff_oem2uni>
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    cf8a:	00 97       	sbiw	r24, 0x00	; 0
    cf8c:	19 f4       	brne	.+6      	; 0xcf94 <f_getlabel+0x94>
						if (wc == 0) { di = 0; break; }
    cf8e:	00 e0       	ldi	r16, 0x00	; 0
    cf90:	10 e0       	ldi	r17, 0x00	; 0
    cf92:	13 c0       	rjmp	.+38     	; 0xcfba <f_getlabel+0xba>
					while (si < 11) {
						wc = dj.dir[si++];
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    cf94:	bc 01       	movw	r22, r24
    cf96:	80 e0       	ldi	r24, 0x00	; 0
    cf98:	90 e0       	ldi	r25, 0x00	; 0
    cf9a:	24 e0       	ldi	r18, 0x04	; 4
    cf9c:	30 e0       	ldi	r19, 0x00	; 0
    cf9e:	a6 01       	movw	r20, r12
    cfa0:	40 0f       	add	r20, r16
    cfa2:	51 1f       	adc	r21, r17
    cfa4:	0e 94 43 47 	call	0x8e86	; 0x8e86 <put_utf>
    cfa8:	90 e0       	ldi	r25, 0x00	; 0
						if (wc == 0) { di = 0; break; }
    cfaa:	00 97       	sbiw	r24, 0x00	; 0
    cfac:	81 f3       	breq	.-32     	; 0xcf8e <f_getlabel+0x8e>
						di += wc;
    cfae:	08 0f       	add	r16, r24
    cfb0:	19 1f       	adc	r17, r25
    cfb2:	c4 01       	movw	r24, r8
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    cfb4:	8b 30       	cpi	r24, 0x0B	; 11
    cfb6:	91 05       	cpc	r25, r1
    cfb8:	d1 f6       	brne	.-76     	; 0xcf6e <f_getlabel+0x6e>
    cfba:	f6 01       	movw	r30, r12
    cfbc:	e0 0f       	add	r30, r16
    cfbe:	f1 1f       	adc	r31, r17
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    cfc0:	10 82       	st	Z, r1
						if (di == 0) break;
    cfc2:	ce 16       	cp	r12, r30
    cfc4:	df 06       	cpc	r13, r31
    cfc6:	49 f0       	breq	.+18     	; 0xcfda <f_getlabel+0xda>
					} while (label[--di] == ' ');
    cfc8:	82 91       	ld	r24, -Z
    cfca:	80 32       	cpi	r24, 0x20	; 32
    cfcc:	c9 f3       	breq	.-14     	; 0xcfc0 <f_getlabel+0xc0>
    cfce:	05 c0       	rjmp	.+10     	; 0xcfda <f_getlabel+0xda>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    cfd0:	84 30       	cpi	r24, 0x04	; 4
    cfd2:	91 05       	cpc	r25, r1
    cfd4:	59 f5       	brne	.+86     	; 0xd02c <f_getlabel+0x12c>
			label[0] = 0;
    cfd6:	f6 01       	movw	r30, r12
    cfd8:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    cfda:	a1 14       	cp	r10, r1
    cfdc:	b1 04       	cpc	r11, r1
    cfde:	39 f1       	breq	.+78     	; 0xd02e <f_getlabel+0x12e>
		res = move_window(fs, fs->volbase);
    cfe0:	8f a5       	ldd	r24, Y+47	; 0x2f
    cfe2:	98 a9       	ldd	r25, Y+48	; 0x30
    cfe4:	fc 01       	movw	r30, r24
    cfe6:	41 a1       	ldd	r20, Z+33	; 0x21
    cfe8:	52 a1       	ldd	r21, Z+34	; 0x22
    cfea:	63 a1       	ldd	r22, Z+35	; 0x23
    cfec:	74 a1       	ldd	r23, Z+36	; 0x24
    cfee:	0e 94 8f 4a 	call	0x951e	; 0x951e <move_window>
    cff2:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    cff4:	89 2b       	or	r24, r25
    cff6:	d9 f4       	brne	.+54     	; 0xd02e <f_getlabel+0x12e>
			switch (fs->fs_type) {
    cff8:	ef a5       	ldd	r30, Y+47	; 0x2f
    cffa:	f8 a9       	ldd	r31, Y+48	; 0x30
    cffc:	80 81       	ld	r24, Z
    cffe:	83 30       	cpi	r24, 0x03	; 3
    d000:	29 f0       	breq	.+10     	; 0xd00c <f_getlabel+0x10c>
    d002:	84 30       	cpi	r24, 0x04	; 4
    d004:	31 f0       	breq	.+12     	; 0xd012 <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d006:	87 e2       	ldi	r24, 0x27	; 39
    d008:	90 e0       	ldi	r25, 0x00	; 0
    d00a:	05 c0       	rjmp	.+10     	; 0xd016 <f_getlabel+0x116>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d00c:	83 e4       	ldi	r24, 0x43	; 67
    d00e:	90 e0       	ldi	r25, 0x00	; 0
    d010:	02 c0       	rjmp	.+4      	; 0xd016 <f_getlabel+0x116>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d012:	84 e6       	ldi	r24, 0x64	; 100
    d014:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d016:	f5 96       	adiw	r30, 0x35	; 53
    d018:	8e 0f       	add	r24, r30
    d01a:	9f 1f       	adc	r25, r31
    d01c:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <ld_dword>
    d020:	f5 01       	movw	r30, r10
    d022:	60 83       	st	Z, r22
    d024:	71 83       	std	Z+1, r23	; 0x01
    d026:	82 83       	std	Z+2, r24	; 0x02
    d028:	93 83       	std	Z+3, r25	; 0x03
    d02a:	01 c0       	rjmp	.+2      	; 0xd02e <f_getlabel+0x12e>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d02c:	7c 01       	movw	r14, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d02e:	c7 01       	movw	r24, r14
    d030:	e2 96       	adiw	r28, 0x32	; 50
    d032:	ec e0       	ldi	r30, 0x0C	; 12
    d034:	0c 94 7e e3 	jmp	0x1c6fc	; 0x1c6fc <__epilogue_restores__+0xc>

0000d038 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d038:	0c 94 e4 25 	jmp	0x4bc8	; 0x4bc8 <safemalloc>
}
    d03c:	08 95       	ret

0000d03e <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d03e:	0c 94 06 26 	jmp	0x4c0c	; 0x4c0c <safefree>
    d042:	08 95       	ret

0000d044 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d044:	cf 92       	push	r12
    d046:	df 92       	push	r13
    d048:	ef 92       	push	r14
    d04a:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d04c:	60 38       	cpi	r22, 0x80	; 128
    d04e:	71 05       	cpc	r23, r1
    d050:	81 05       	cpc	r24, r1
    d052:	91 05       	cpc	r25, r1
    d054:	10 f4       	brcc	.+4      	; 0xd05a <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d056:	cb 01       	movw	r24, r22
    d058:	23 c0       	rjmp	.+70     	; 0xd0a0 <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d05a:	61 15       	cp	r22, r1
    d05c:	71 05       	cpc	r23, r1
    d05e:	21 e0       	ldi	r18, 0x01	; 1
    d060:	82 07       	cpc	r24, r18
    d062:	91 05       	cpc	r25, r1
    d064:	d8 f4       	brcc	.+54     	; 0xd09c <ff_uni2oem+0x58>
    d066:	45 3b       	cpi	r20, 0xB5	; 181
    d068:	51 40       	sbci	r21, 0x01	; 1
    d06a:	c1 f4       	brne	.+48     	; 0xd09c <ff_uni2oem+0x58>
    d06c:	e6 ea       	ldi	r30, 0xA6	; 166
    d06e:	f7 e0       	ldi	r31, 0x07	; 7
    d070:	20 e0       	ldi	r18, 0x00	; 0
    d072:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d074:	c1 90       	ld	r12, Z+
    d076:	d1 90       	ld	r13, Z+
    d078:	e1 2c       	mov	r14, r1
    d07a:	f1 2c       	mov	r15, r1
    d07c:	6c 15       	cp	r22, r12
    d07e:	7d 05       	cpc	r23, r13
    d080:	8e 05       	cpc	r24, r14
    d082:	9f 05       	cpc	r25, r15
    d084:	29 f0       	breq	.+10     	; 0xd090 <ff_uni2oem+0x4c>
    d086:	2f 5f       	subi	r18, 0xFF	; 255
    d088:	3f 4f       	sbci	r19, 0xFF	; 255
    d08a:	20 38       	cpi	r18, 0x80	; 128
    d08c:	31 05       	cpc	r19, r1
    d08e:	91 f7       	brne	.-28     	; 0xd074 <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d090:	b9 01       	movw	r22, r18
    d092:	60 58       	subi	r22, 0x80	; 128
    d094:	7f 4f       	sbci	r23, 0xFF	; 255
    d096:	cb 01       	movw	r24, r22
    d098:	99 27       	eor	r25, r25
    d09a:	02 c0       	rjmp	.+4      	; 0xd0a0 <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d09c:	80 e0       	ldi	r24, 0x00	; 0
    d09e:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d0a0:	ff 90       	pop	r15
    d0a2:	ef 90       	pop	r14
    d0a4:	df 90       	pop	r13
    d0a6:	cf 90       	pop	r12
    d0a8:	08 95       	ret

0000d0aa <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d0aa:	80 38       	cpi	r24, 0x80	; 128
    d0ac:	91 05       	cpc	r25, r1
    d0ae:	88 f0       	brcs	.+34     	; 0xd0d2 <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d0b0:	65 3b       	cpi	r22, 0xB5	; 181
    d0b2:	71 40       	sbci	r23, 0x01	; 1
    d0b4:	61 f4       	brne	.+24     	; 0xd0ce <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d0b6:	8f 3f       	cpi	r24, 0xFF	; 255
    d0b8:	91 05       	cpc	r25, r1
    d0ba:	09 f0       	breq	.+2      	; 0xd0be <ff_oem2uni+0x14>
    d0bc:	40 f4       	brcc	.+16     	; 0xd0ce <ff_oem2uni+0x24>
    d0be:	88 0f       	add	r24, r24
    d0c0:	99 1f       	adc	r25, r25
    d0c2:	fc 01       	movw	r30, r24
    d0c4:	ea 55       	subi	r30, 0x5A	; 90
    d0c6:	f9 4f       	sbci	r31, 0xF9	; 249
    d0c8:	80 81       	ld	r24, Z
    d0ca:	91 81       	ldd	r25, Z+1	; 0x01
    d0cc:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d0ce:	80 e0       	ldi	r24, 0x00	; 0
    d0d0:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d0d2:	08 95       	ret

0000d0d4 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d0d4:	61 15       	cp	r22, r1
    d0d6:	71 05       	cpc	r23, r1
    d0d8:	21 e0       	ldi	r18, 0x01	; 1
    d0da:	82 07       	cpc	r24, r18
    d0dc:	91 05       	cpc	r25, r1
    d0de:	08 f0       	brcs	.+2      	; 0xd0e2 <ff_wtoupper+0xe>
    d0e0:	5a c0       	rjmp	.+180    	; 0xd196 <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d0e2:	61 15       	cp	r22, r1
    d0e4:	80 e1       	ldi	r24, 0x10	; 16
    d0e6:	78 07       	cpc	r23, r24
    d0e8:	18 f0       	brcs	.+6      	; 0xd0f0 <ff_wtoupper+0x1c>
    d0ea:	a8 ef       	ldi	r26, 0xF8	; 248
    d0ec:	b4 e0       	ldi	r27, 0x04	; 4
    d0ee:	02 c0       	rjmp	.+4      	; 0xd0f4 <ff_wtoupper+0x20>
    d0f0:	a4 eb       	ldi	r26, 0xB4	; 180
    d0f2:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    d0f4:	2d 91       	ld	r18, X+
    d0f6:	3c 91       	ld	r19, X
    d0f8:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d0fa:	21 15       	cp	r18, r1
    d0fc:	31 05       	cpc	r19, r1
    d0fe:	09 f4       	brne	.+2      	; 0xd102 <ff_wtoupper+0x2e>
    d100:	48 c0       	rjmp	.+144    	; 0xd192 <ff_wtoupper+0xbe>
    d102:	62 17       	cp	r22, r18
    d104:	73 07       	cpc	r23, r19
    d106:	08 f4       	brcc	.+2      	; 0xd10a <ff_wtoupper+0x36>
    d108:	44 c0       	rjmp	.+136    	; 0xd192 <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d10a:	14 96       	adiw	r26, 0x04	; 4
    d10c:	fd 01       	movw	r30, r26
    d10e:	32 97       	sbiw	r30, 0x02	; 2
    d110:	80 81       	ld	r24, Z
    d112:	91 81       	ldd	r25, Z+1	; 0x01
    d114:	e9 2f       	mov	r30, r25
    d116:	ff 27       	eor	r31, r31
    d118:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d11a:	a9 01       	movw	r20, r18
    d11c:	48 0f       	add	r20, r24
    d11e:	59 1f       	adc	r21, r25
    d120:	64 17       	cp	r22, r20
    d122:	75 07       	cpc	r23, r21
    d124:	70 f5       	brcc	.+92     	; 0xd182 <ff_wtoupper+0xae>
				switch (cmd) {
    d126:	e9 30       	cpi	r30, 0x09	; 9
    d128:	f1 05       	cpc	r31, r1
    d12a:	98 f5       	brcc	.+102    	; 0xd192 <ff_wtoupper+0xbe>
    d12c:	ec 54       	subi	r30, 0x4C	; 76
    d12e:	ff 4f       	sbci	r31, 0xFF	; 255
    d130:	0c 94 2d e3 	jmp	0x1c65a	; 0x1c65a <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d134:	62 1b       	sub	r22, r18
    d136:	73 0b       	sbc	r23, r19
    d138:	fb 01       	movw	r30, r22
    d13a:	ee 0f       	add	r30, r30
    d13c:	ff 1f       	adc	r31, r31
    d13e:	ea 0f       	add	r30, r26
    d140:	fb 1f       	adc	r31, r27
    d142:	60 81       	ld	r22, Z
    d144:	71 81       	ldd	r23, Z+1	; 0x01
    d146:	25 c0       	rjmp	.+74     	; 0xd192 <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d148:	cb 01       	movw	r24, r22
    d14a:	82 1b       	sub	r24, r18
    d14c:	93 0b       	sbc	r25, r19
    d14e:	81 70       	andi	r24, 0x01	; 1
    d150:	99 27       	eor	r25, r25
    d152:	68 1b       	sub	r22, r24
    d154:	79 0b       	sbc	r23, r25
    d156:	1d c0       	rjmp	.+58     	; 0xd192 <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d158:	60 51       	subi	r22, 0x10	; 16
    d15a:	71 09       	sbc	r23, r1
    d15c:	1a c0       	rjmp	.+52     	; 0xd192 <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d15e:	60 52       	subi	r22, 0x20	; 32
    d160:	71 09       	sbc	r23, r1
    d162:	17 c0       	rjmp	.+46     	; 0xd192 <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d164:	60 53       	subi	r22, 0x30	; 48
    d166:	71 09       	sbc	r23, r1
    d168:	14 c0       	rjmp	.+40     	; 0xd192 <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d16a:	6a 51       	subi	r22, 0x1A	; 26
    d16c:	71 09       	sbc	r23, r1
    d16e:	11 c0       	rjmp	.+34     	; 0xd192 <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d170:	68 5f       	subi	r22, 0xF8	; 248
    d172:	7f 4f       	sbci	r23, 0xFF	; 255
    d174:	0e c0       	rjmp	.+28     	; 0xd192 <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d176:	60 55       	subi	r22, 0x50	; 80
    d178:	71 09       	sbc	r23, r1
    d17a:	0b c0       	rjmp	.+22     	; 0xd192 <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d17c:	60 56       	subi	r22, 0x60	; 96
    d17e:	7c 41       	sbci	r23, 0x1C	; 28
    d180:	08 c0       	rjmp	.+16     	; 0xd192 <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d182:	ef 2b       	or	r30, r31
    d184:	09 f0       	breq	.+2      	; 0xd188 <ff_wtoupper+0xb4>
    d186:	b6 cf       	rjmp	.-148    	; 0xd0f4 <ff_wtoupper+0x20>
    d188:	88 0f       	add	r24, r24
    d18a:	99 1f       	adc	r25, r25
    d18c:	a8 0f       	add	r26, r24
    d18e:	b9 1f       	adc	r27, r25
    d190:	b1 cf       	rjmp	.-158    	; 0xd0f4 <ff_wtoupper+0x20>
		}
		uni = uc;
    d192:	80 e0       	ldi	r24, 0x00	; 0
    d194:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d196:	08 95       	ret

0000d198 <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    d198:	81 11       	cpse	r24, r1
    d19a:	02 c0       	rjmp	.+4      	; 0xd1a0 <disk_status+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    d19c:	a1 c1       	rjmp	.+834    	; 0xd4e0 <mmc_disk_status>
    d19e:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    d1a0:	81 e0       	ldi	r24, 0x01	; 1
}
    d1a2:	08 95       	ret

0000d1a4 <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    d1a4:	81 11       	cpse	r24, r1
    d1a6:	02 c0       	rjmp	.+4      	; 0xd1ac <disk_initialize+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    d1a8:	f6 c0       	rjmp	.+492    	; 0xd396 <mmc_disk_initialize>
    d1aa:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    d1ac:	81 e0       	ldi	r24, 0x01	; 1
}
    d1ae:	08 95       	ret

0000d1b0 <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    d1b0:	0f 93       	push	r16
    d1b2:	1f 93       	push	r17
    d1b4:	fb 01       	movw	r30, r22
    switch (pdrv)
    d1b6:	81 11       	cpse	r24, r1
    d1b8:	06 c0       	rjmp	.+12     	; 0xd1c6 <disk_read+0x16>
    d1ba:	ba 01       	movw	r22, r20
    d1bc:	a9 01       	movw	r20, r18
    d1be:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    d1c0:	98 01       	movw	r18, r16
    d1c2:	91 d1       	rcall	.+802    	; 0xd4e6 <mmc_disk_read>
    d1c4:	02 c0       	rjmp	.+4      	; 0xd1ca <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    d1c6:	84 e0       	ldi	r24, 0x04	; 4
    d1c8:	90 e0       	ldi	r25, 0x00	; 0
}
    d1ca:	1f 91       	pop	r17
    d1cc:	0f 91       	pop	r16
    d1ce:	08 95       	ret

0000d1d0 <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    d1d0:	0f 93       	push	r16
    d1d2:	1f 93       	push	r17
    d1d4:	fb 01       	movw	r30, r22
    switch (pdrv)
    d1d6:	81 11       	cpse	r24, r1
    d1d8:	06 c0       	rjmp	.+12     	; 0xd1e6 <disk_write+0x16>
    d1da:	ba 01       	movw	r22, r20
    d1dc:	a9 01       	movw	r20, r18
    d1de:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    d1e0:	98 01       	movw	r18, r16
    d1e2:	e2 d1       	rcall	.+964    	; 0xd5a8 <mmc_disk_write>
    d1e4:	02 c0       	rjmp	.+4      	; 0xd1ea <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    d1e6:	84 e0       	ldi	r24, 0x04	; 4
    d1e8:	90 e0       	ldi	r25, 0x00	; 0
}
    d1ea:	1f 91       	pop	r17
    d1ec:	0f 91       	pop	r16
    d1ee:	08 95       	ret

0000d1f0 <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d1f0:	96 2f       	mov	r25, r22
    switch (pdrv)
    d1f2:	81 11       	cpse	r24, r1
    d1f4:	04 c0       	rjmp	.+8      	; 0xd1fe <disk_ioctl+0xe>
    d1f6:	ba 01       	movw	r22, r20
    d1f8:	89 2f       	mov	r24, r25
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    d1fa:	4a c2       	rjmp	.+1172   	; 0xd690 <mmc_disk_ioctl>
    d1fc:	08 95       	ret
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d1fe:	84 e0       	ldi	r24, 0x04	; 4
    d200:	90 e0       	ldi	r25, 0x00	; 0
}
    d202:	08 95       	ret

0000d204 <xchg_spi>:
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d204:	f9 c4       	rjmp	.+2546   	; 0xdbf8 <mmc_spi_TXRX>
    return dat;
}
    d206:	08 95       	ret

0000d208 <deselect>:
///@return void
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    d208:	ce d4       	rcall	.+2460   	; 0xdba6 <mmc_spi_end>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d20a:	8f ef       	ldi	r24, 0xFF	; 255
    d20c:	fb df       	rcall	.-10     	; 0xd204 <xchg_spi>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d20e:	8f ef       	ldi	r24, 0xFF	; 255
    d210:	f9 cf       	rjmp	.-14     	; 0xd204 <xchg_spi>
    d212:	08 95       	ret

0000d214 <rcvr_datablock>:
    d214:	0f 93       	push	r16
static
int rcvr_datablock (
BYTE *buff,                                       /*< Data buffer to store received data */
UINT btr                                          /*< Byte count (must be multiple of 4) */
)
{
    d216:	1f 93       	push	r17
    d218:	cf 93       	push	r28
    d21a:	df 93       	push	r29
    d21c:	ec 01       	movw	r28, r24
    d21e:	8b 01       	movw	r16, r22
    BYTE token;

    mmc_set_ms_timeout(1000);
    d220:	88 ee       	ldi	r24, 0xE8	; 232
    d222:	93 e0       	ldi	r25, 0x03	; 3
    d224:	ec d4       	rcall	.+2520   	; 0xdbfe <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d226:	8f ef       	ldi	r24, 0xFF	; 255
    d228:	e7 d4       	rcall	.+2510   	; 0xdbf8 <mmc_spi_TXRX>

    mmc_set_ms_timeout(1000);
    do                                            /* Wait for data packet in timeout of 400ms */
    {
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    d22a:	8f 3f       	cpi	r24, 0xFF	; 255
    d22c:	31 f4       	brne	.+12     	; 0xd23a <rcvr_datablock+0x26>
    d22e:	ee d4       	rcall	.+2524   	; 0xdc0c <mmc_test_timeout>
    d230:	89 2b       	or	r24, r25
    d232:	c9 f3       	breq	.-14     	; 0xd226 <rcvr_datablock+0x12>
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */
    d234:	80 e0       	ldi	r24, 0x00	; 0
    d236:	90 e0       	ldi	r25, 0x00	; 0
    d238:	0b c0       	rjmp	.+22     	; 0xd250 <rcvr_datablock+0x3c>
    d23a:	8e 3f       	cpi	r24, 0xFE	; 254
void rcvr_spi_multi (
BYTE *p,                                          /* Data read buffer */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_RX_buffer((uint8_t *)p, cnt);
    d23c:	d9 f7       	brne	.-10     	; 0xd234 <rcvr_datablock+0x20>
    d23e:	b8 01       	movw	r22, r16
    d240:	ce 01       	movw	r24, r28
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */

    rcvr_spi_multi(buff, btr);                    /* Receive the data block into buffer */
    xchg_spi(0xFF);                               /* Discard CRC */
    d242:	d7 d4       	rcall	.+2478   	; 0xdbf2 <mmc_spi_RX_buffer>
    d244:	8f ef       	ldi	r24, 0xFF	; 255
    d246:	de df       	rcall	.-68     	; 0xd204 <xchg_spi>
    xchg_spi(0xFF);
    d248:	8f ef       	ldi	r24, 0xFF	; 255
    d24a:	dc df       	rcall	.-72     	; 0xd204 <xchg_spi>
    d24c:	81 e0       	ldi	r24, 0x01	; 1
    d24e:	90 e0       	ldi	r25, 0x00	; 0
    d250:	df 91       	pop	r29

    return 1;                                     /* Return with success */
}
    d252:	cf 91       	pop	r28
    d254:	1f 91       	pop	r17
    d256:	0f 91       	pop	r16
    d258:	08 95       	ret

0000d25a <wait_ready>:
    d25a:	cf 93       	push	r28
int wait_ready (
UINT wt                                           /*< Timeout [ms] */
)
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    d25c:	d0 d4       	rcall	.+2464   	; 0xdbfe <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d25e:	8f ef       	ldi	r24, 0xFF	; 255
    d260:	cb d4       	rcall	.+2454   	; 0xdbf8 <mmc_spi_TXRX>
    d262:	c8 2f       	mov	r28, r24
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    do
    d = xchg_spi(0xFF);
    while (d != 0xFF && !mmc_test_timeout());
    d264:	8f 3f       	cpi	r24, 0xFF	; 255
    d266:	19 f0       	breq	.+6      	; 0xd26e <wait_ready+0x14>
    d268:	d1 d4       	rcall	.+2466   	; 0xdc0c <mmc_test_timeout>
    d26a:	89 2b       	or	r24, r25
    d26c:	c1 f3       	breq	.-16     	; 0xd25e <wait_ready+0x4>

    return (d == 0xFF) ? 1 : 0;
    d26e:	81 e0       	ldi	r24, 0x01	; 1
    d270:	90 e0       	ldi	r25, 0x00	; 0
    d272:	cf 3f       	cpi	r28, 0xFF	; 255
    d274:	11 f0       	breq	.+4      	; 0xd27a <wait_ready+0x20>
    d276:	80 e0       	ldi	r24, 0x00	; 0
    d278:	90 e0       	ldi	r25, 0x00	; 0
}
    d27a:	cf 91       	pop	r28
    d27c:	08 95       	ret

0000d27e <select>:
///@return 1 Successful
///@return 0 Timeout
MEMSPACE
static
int select (void)
{
    d27e:	cf 93       	push	r28
    d280:	df 93       	push	r29
    d282:	00 d0       	rcall	.+0      	; 0xd284 <select+0x6>
    d284:	1f 92       	push	r1
    CS_LOW();
    d286:	82 d4       	rcall	.+2308   	; 0xdb8c <mmc_spi_begin>
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */
    d288:	8f ef       	ldi	r24, 0xFF	; 255
    d28a:	bc df       	rcall	.-136    	; 0xd204 <xchg_spi>

    if (wait_ready(1000))
    d28c:	88 ee       	ldi	r24, 0xE8	; 232
    d28e:	93 e0       	ldi	r25, 0x03	; 3
    d290:	e4 df       	rcall	.-56     	; 0xd25a <wait_ready>
    d292:	ec 01       	movw	r28, r24
    d294:	89 2b       	or	r24, r25
    d296:	61 f4       	brne	.+24     	; 0xd2b0 <select+0x32>
        return 1;                                 /* OK */

    printf("select failed!\n");
    d298:	89 e6       	ldi	r24, 0x69	; 105
    d29a:	97 e0       	ldi	r25, 0x07	; 7
    d29c:	a0 e0       	ldi	r26, 0x00	; 0
    d29e:	ed b7       	in	r30, 0x3d	; 61
    d2a0:	fe b7       	in	r31, 0x3e	; 62
    d2a2:	81 83       	std	Z+1, r24	; 0x01
    d2a4:	92 83       	std	Z+2, r25	; 0x02
    d2a6:	a3 83       	std	Z+3, r26	; 0x03
    d2a8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    deselect();
    d2ac:	ad df       	rcall	.-166    	; 0xd208 <deselect>
    d2ae:	02 c0       	rjmp	.+4      	; 0xd2b4 <select+0x36>
{
    CS_LOW();
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */

    if (wait_ready(1000))
        return 1;                                 /* OK */
    d2b0:	c1 e0       	ldi	r28, 0x01	; 1
    d2b2:	d0 e0       	ldi	r29, 0x00	; 0

    printf("select failed!\n");

    deselect();
    return 0;                                     /* Timeout */
}
    d2b4:	ce 01       	movw	r24, r28
    d2b6:	cd b7       	in	r28, 0x3d	; 61
    d2b8:	de b7       	in	r29, 0x3e	; 62
    d2ba:	23 96       	adiw	r28, 0x03	; 3
    d2bc:	e2 e0       	ldi	r30, 0x02	; 2
    d2be:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

0000d2c2 <send_cmd>:
static
BYTE send_cmd (
BYTE cmd,                                         /*< Command index */
DWORD arg                                         /*< Argument */
)
{
    d2c2:	ff 92       	push	r15
    d2c4:	0f 93       	push	r16
    d2c6:	1f 93       	push	r17
    d2c8:	cf 93       	push	r28
    d2ca:	df 93       	push	r29
    d2cc:	c8 2f       	mov	r28, r24
    d2ce:	d4 2f       	mov	r29, r20
    d2d0:	15 2f       	mov	r17, r21
    d2d2:	06 2f       	mov	r16, r22
    d2d4:	f7 2e       	mov	r15, r23
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    d2d6:	87 ff       	sbrs	r24, 7
    d2d8:	08 c0       	rjmp	.+16     	; 0xd2ea <send_cmd+0x28>
    {
        cmd &= 0x7F;
        res = send_cmd(CMD55, 0);
    d2da:	40 e0       	ldi	r20, 0x00	; 0
    d2dc:	50 e0       	ldi	r21, 0x00	; 0
    d2de:	ba 01       	movw	r22, r20
    d2e0:	87 e3       	ldi	r24, 0x37	; 55
    d2e2:	ef df       	rcall	.-34     	; 0xd2c2 <send_cmd>
        if (res > 1) return res;
    d2e4:	82 30       	cpi	r24, 0x02	; 2
    d2e6:	58 f5       	brcc	.+86     	; 0xd33e <send_cmd+0x7c>
{
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    {
        cmd &= 0x7F;
    d2e8:	cf 77       	andi	r28, 0x7F	; 127
        res = send_cmd(CMD55, 0);
        if (res > 1) return res;
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    d2ea:	cc 30       	cpi	r28, 0x0C	; 12
    d2ec:	71 f4       	brne	.+28     	; 0xd30a <send_cmd+0x48>
        deselect();
        if (!select()) return 0xFF;
    }

/* Send command packet */
    xchg_spi(0x40 | cmd);                         /* Start + Command index */
    d2ee:	8c 2f       	mov	r24, r28
    d2f0:	80 64       	ori	r24, 0x40	; 64
    d2f2:	88 df       	rcall	.-240    	; 0xd204 <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));                  /* Argument[31..24] */
    d2f4:	8f 2d       	mov	r24, r15
    d2f6:	86 df       	rcall	.-244    	; 0xd204 <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    d2f8:	80 2f       	mov	r24, r16
    d2fa:	84 df       	rcall	.-248    	; 0xd204 <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    d2fc:	81 2f       	mov	r24, r17
    d2fe:	82 df       	rcall	.-252    	; 0xd204 <xchg_spi>
    d300:	8d 2f       	mov	r24, r29
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    d302:	80 df       	rcall	.-256    	; 0xd204 <xchg_spi>
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    d304:	cc 23       	and	r28, r28
    d306:	c9 f0       	breq	.+50     	; 0xd33a <send_cmd+0x78>
    d308:	06 c0       	rjmp	.+12     	; 0xd316 <send_cmd+0x54>
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    {
        deselect();
    d30a:	7e df       	rcall	.-260    	; 0xd208 <deselect>
    d30c:	b8 df       	rcall	.-144    	; 0xd27e <select>
        if (!select()) return 0xFF;
    d30e:	89 2b       	or	r24, r25
    d310:	71 f7       	brne	.-36     	; 0xd2ee <send_cmd+0x2c>
    d312:	8f ef       	ldi	r24, 0xFF	; 255
    d314:	14 c0       	rjmp	.+40     	; 0xd33e <send_cmd+0x7c>
    d316:	c8 30       	cpi	r28, 0x08	; 8
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d318:	11 f4       	brne	.+4      	; 0xd31e <send_cmd+0x5c>
    d31a:	87 e8       	ldi	r24, 0x87	; 135
    d31c:	01 c0       	rjmp	.+2      	; 0xd320 <send_cmd+0x5e>

    xchg_spi(n);
    d31e:	81 e0       	ldi	r24, 0x01	; 1
    d320:	71 df       	rcall	.-286    	; 0xd204 <xchg_spi>

/* Receive command response */
    if (cmd == CMD12) xchg_spi(0xFF);             /* Skip a stuff byte when stop reading */
    d322:	cc 30       	cpi	r28, 0x0C	; 12
    d324:	11 f4       	brne	.+4      	; 0xd32a <send_cmd+0x68>
    d326:	8f ef       	ldi	r24, 0xFF	; 255
    d328:	6d df       	rcall	.-294    	; 0xd204 <xchg_spi>
    d32a:	ca e0       	ldi	r28, 0x0A	; 10
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d32c:	8f ef       	ldi	r24, 0xFF	; 255
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d32e:	64 d4       	rcall	.+2248   	; 0xdbf8 <mmc_spi_TXRX>
    d330:	87 ff       	sbrs	r24, 7
    d332:	05 c0       	rjmp	.+10     	; 0xd33e <send_cmd+0x7c>
    n = 10;                                       /* Wait for a valid response in timeout of 10 attempts */
    do
    {
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);
    d334:	c1 50       	subi	r28, 0x01	; 1
    d336:	d1 f7       	brne	.-12     	; 0xd32c <send_cmd+0x6a>
    d338:	02 c0       	rjmp	.+4      	; 0xd33e <send_cmd+0x7c>
    d33a:	85 e9       	ldi	r24, 0x95	; 149
    d33c:	f5 cf       	rjmp	.-22     	; 0xd328 <send_cmd+0x66>
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */

    xchg_spi(n);
    d33e:	cd b7       	in	r28, 0x3d	; 61
    d340:	de b7       	in	r29, 0x3e	; 62
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);

    return res;                                   /* Return with the response value */
}
    d342:	e5 e0       	ldi	r30, 0x05	; 5
    d344:	0c 94 85 e3 	jmp	0x1c70a	; 0x1c70a <__epilogue_restores__+0x1a>

0000d348 <xmit_datablock>:
    d348:	0f 93       	push	r16
    d34a:	1f 93       	push	r17
static
int xmit_datablock (
const BYTE *buff,                                 /*< 512 byte data block to be transmitted */
BYTE token                                        /*< Data/Stop token */
)
{
    d34c:	cf 93       	push	r28
    d34e:	8c 01       	movw	r16, r24
    d350:	c6 2f       	mov	r28, r22
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d352:	88 ee       	ldi	r24, 0xE8	; 232
    d354:	93 e0       	ldi	r25, 0x03	; 3
    d356:	81 df       	rcall	.-254    	; 0xd25a <wait_ready>
    d358:	00 97       	sbiw	r24, 0x00	; 0
    d35a:	c9 f0       	breq	.+50     	; 0xd38e <xmit_datablock+0x46>

    xchg_spi(token);                              /* Xmit data token */
    d35c:	8c 2f       	mov	r24, r28
    d35e:	52 df       	rcall	.-348    	; 0xd204 <xchg_spi>
    if (token != 0xFD)                            /* Is data token */
    d360:	cd 3f       	cpi	r28, 0xFD	; 253
    d362:	99 f0       	breq	.+38     	; 0xd38a <xmit_datablock+0x42>
void xmit_spi_multi (
const BYTE *p,                                    /* Data block to be sent */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_TX_buffer((uint8_t *)p, cnt);
    d364:	60 e0       	ldi	r22, 0x00	; 0
    d366:	72 e0       	ldi	r23, 0x02	; 2
    d368:	c8 01       	movw	r24, r16
    xchg_spi(token);                              /* Xmit data token */
    if (token != 0xFD)                            /* Is data token */
    {
        xmit_spi_multi(buff, 512);                /* Xmit the data block to the MMC */

        xchg_spi(0xFF);                           /* CRC (Dummy) */
    d36a:	40 d4       	rcall	.+2176   	; 0xdbec <mmc_spi_TX_buffer>
    d36c:	8f ef       	ldi	r24, 0xFF	; 255
        xchg_spi(0xFF);
    d36e:	4a df       	rcall	.-364    	; 0xd204 <xchg_spi>
    d370:	8f ef       	ldi	r24, 0xFF	; 255
    d372:	48 df       	rcall	.-368    	; 0xd204 <xchg_spi>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d374:	8f ef       	ldi	r24, 0xFF	; 255
    d376:	40 d4       	rcall	.+2176   	; 0xdbf8 <mmc_spi_TXRX>
    d378:	8f 71       	andi	r24, 0x1F	; 31
BYTE token                                        /*< Data/Stop token */
)
{
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d37a:	31 e0       	ldi	r19, 0x01	; 1
    d37c:	20 e0       	ldi	r18, 0x00	; 0
    d37e:	85 30       	cpi	r24, 0x05	; 5
    d380:	09 f0       	breq	.+2      	; 0xd384 <xmit_datablock+0x3c>
    d382:	30 e0       	ldi	r19, 0x00	; 0
    d384:	83 2f       	mov	r24, r19
    d386:	92 2f       	mov	r25, r18
    d388:	02 c0       	rjmp	.+4      	; 0xd38e <xmit_datablock+0x46>
    d38a:	81 e0       	ldi	r24, 0x01	; 1
        resp = xchg_spi(0xFF);                    /* Reveive data response */
        if ((resp & 0x1F) != 0x05)                /* If not accepted, return with error */
            return 0;
    }

    return 1;
    d38c:	90 e0       	ldi	r25, 0x00	; 0
    d38e:	cf 91       	pop	r28
}
    d390:	1f 91       	pop	r17
    d392:	0f 91       	pop	r16
    d394:	08 95       	ret

0000d396 <mmc_disk_initialize>:
    d396:	a4 e0       	ldi	r26, 0x04	; 4

///@brief Initialize Disk Drive
///@return Stat
MEMSPACE
DSTATUS mmc_disk_initialize (void)
{
    d398:	b0 e0       	ldi	r27, 0x00	; 0
    d39a:	e1 ed       	ldi	r30, 0xD1	; 209
    d39c:	f9 e6       	ldi	r31, 0x69	; 105
    d39e:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d3a2:	59 d4       	rcall	.+2226   	; 0xdc56 <mmc_power_off>
DSTATUS mmc_disk_initialize (void)
{
    BYTE n, cmd, ty, ocr[4];

    power_off();                                  /* Turn off the socket power to reset the card */
    delayms(100);                                 /* Wait for 100ms */
    d3a4:	64 e6       	ldi	r22, 0x64	; 100
    d3a6:	70 e0       	ldi	r23, 0x00	; 0
    d3a8:	80 e0       	ldi	r24, 0x00	; 0
    d3aa:	90 e0       	ldi	r25, 0x00	; 0
    d3ac:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <delayms>

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    d3b0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d3b4:	81 fd       	sbrc	r24, 1
void power_on (void)
{
/* Turn socket power on and wait for 10ms+ (nothing to do if no power controls) */
/* Configure MOSI/MISO/SCLK/CS pins */
/* Enable SPI module in SPI mode 0 */
    mmc_power_on();
    d3b6:	8e c0       	rjmp	.+284    	; 0xd4d4 <mmc_disk_initialize+0x13e>
    delayms(100);                                 /* Wait for 100ms */

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    power_on();                                   /* Turn on the socket power */

    FCLK_SLOW();
    d3b8:	4d d4       	rcall	.+2202   	; 0xdc54 <mmc_power_on>
    d3ba:	f9 d3       	rcall	.+2034   	; 0xdbae <mmc_slow>

    for (n = 10; n; n--) xchg_spi(0xFF);          /* 80 dummy clocks */
    d3bc:	1a e0       	ldi	r17, 0x0A	; 10
    d3be:	8f ef       	ldi	r24, 0xFF	; 255
    d3c0:	21 df       	rcall	.-446    	; 0xd204 <xchg_spi>
    d3c2:	11 50       	subi	r17, 0x01	; 1
    d3c4:	e1 f7       	brne	.-8      	; 0xd3be <mmc_disk_initialize+0x28>

    ty = 0;
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    d3c6:	40 e0       	ldi	r20, 0x00	; 0
    d3c8:	50 e0       	ldi	r21, 0x00	; 0
    d3ca:	ba 01       	movw	r22, r20
    d3cc:	80 e0       	ldi	r24, 0x00	; 0
    d3ce:	79 df       	rcall	.-270    	; 0xd2c2 <send_cmd>
    d3d0:	81 30       	cpi	r24, 0x01	; 1
    d3d2:	09 f0       	breq	.+2      	; 0xd3d6 <mmc_disk_initialize+0x40>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
    d3d4:	6f c0       	rjmp	.+222    	; 0xd4b4 <mmc_disk_initialize+0x11e>
    d3d6:	80 ed       	ldi	r24, 0xD0	; 208
    d3d8:	97 e0       	ldi	r25, 0x07	; 7
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
    d3da:	11 d4       	rcall	.+2082   	; 0xdbfe <mmc_set_ms_timeout>
    d3dc:	4a ea       	ldi	r20, 0xAA	; 170
    d3de:	51 e0       	ldi	r21, 0x01	; 1
    d3e0:	60 e0       	ldi	r22, 0x00	; 0
    d3e2:	70 e0       	ldi	r23, 0x00	; 0
    d3e4:	88 e0       	ldi	r24, 0x08	; 8
    d3e6:	6d df       	rcall	.-294    	; 0xd2c2 <send_cmd>
    d3e8:	81 30       	cpi	r24, 0x01	; 1
    d3ea:	09 f0       	breq	.+2      	; 0xd3ee <mmc_disk_initialize+0x58>
    d3ec:	3d c0       	rjmp	.+122    	; 0xd468 <mmc_disk_initialize+0xd2>
    d3ee:	8e 01       	movw	r16, r28
    d3f0:	0f 5f       	subi	r16, 0xFF	; 255
    d3f2:	1f 4f       	sbci	r17, 0xFF	; 255
    d3f4:	6e 01       	movw	r12, r28
    d3f6:	85 e0       	ldi	r24, 0x05	; 5
    d3f8:	c8 0e       	add	r12, r24
    d3fa:	d1 1c       	adc	r13, r1
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d3fc:	78 01       	movw	r14, r16
    d3fe:	8f ef       	ldi	r24, 0xFF	; 255
    d400:	fb d3       	rcall	.+2038   	; 0xdbf8 <mmc_spi_TXRX>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
    d402:	f7 01       	movw	r30, r14
    d404:	81 93       	st	Z+, r24
    d406:	7f 01       	movw	r14, r30
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
    d408:	ce 16       	cp	r12, r30
    d40a:	df 06       	cpc	r13, r31
    d40c:	c1 f7       	brne	.-16     	; 0xd3fe <mmc_disk_initialize+0x68>
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
    d40e:	8b 81       	ldd	r24, Y+3	; 0x03
    d410:	81 30       	cpi	r24, 0x01	; 1
    d412:	09 f0       	breq	.+2      	; 0xd416 <mmc_disk_initialize+0x80>
    d414:	4f c0       	rjmp	.+158    	; 0xd4b4 <mmc_disk_initialize+0x11e>
    d416:	8c 81       	ldd	r24, Y+4	; 0x04
    d418:	8a 3a       	cpi	r24, 0xAA	; 170
    d41a:	09 f0       	breq	.+2      	; 0xd41e <mmc_disk_initialize+0x88>
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d41c:	4b c0       	rjmp	.+150    	; 0xd4b4 <mmc_disk_initialize+0x11e>
    d41e:	f6 d3       	rcall	.+2028   	; 0xdc0c <mmc_test_timeout>
    d420:	89 2b       	or	r24, r25
    d422:	29 f0       	breq	.+10     	; 0xd42e <mmc_disk_initialize+0x98>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d424:	f3 d3       	rcall	.+2022   	; 0xdc0c <mmc_test_timeout>
    d426:	89 2b       	or	r24, r25
    d428:	09 f0       	breq	.+2      	; 0xd42c <mmc_disk_initialize+0x96>
    d42a:	44 c0       	rjmp	.+136    	; 0xd4b4 <mmc_disk_initialize+0x11e>
    d42c:	09 c0       	rjmp	.+18     	; 0xd440 <mmc_disk_initialize+0xaa>
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d42e:	40 e0       	ldi	r20, 0x00	; 0
    d430:	50 e0       	ldi	r21, 0x00	; 0
    d432:	60 e0       	ldi	r22, 0x00	; 0
    d434:	70 e4       	ldi	r23, 0x40	; 64
    d436:	89 ea       	ldi	r24, 0xA9	; 169
    d438:	44 df       	rcall	.-376    	; 0xd2c2 <send_cmd>
    d43a:	81 11       	cpse	r24, r1
    d43c:	f0 cf       	rjmp	.-32     	; 0xd41e <mmc_disk_initialize+0x88>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d43e:	f2 cf       	rjmp	.-28     	; 0xd424 <mmc_disk_initialize+0x8e>
    d440:	40 e0       	ldi	r20, 0x00	; 0
    d442:	50 e0       	ldi	r21, 0x00	; 0
    d444:	ba 01       	movw	r22, r20
    d446:	8a e3       	ldi	r24, 0x3A	; 58
    d448:	3c df       	rcall	.-392    	; 0xd2c2 <send_cmd>
    d44a:	81 11       	cpse	r24, r1
    d44c:	33 c0       	rjmp	.+102    	; 0xd4b4 <mmc_disk_initialize+0x11e>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d44e:	8f ef       	ldi	r24, 0xFF	; 255
    d450:	d3 d3       	rcall	.+1958   	; 0xdbf8 <mmc_spi_TXRX>
    d452:	f8 01       	movw	r30, r16
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    d454:	81 93       	st	Z+, r24
    d456:	8f 01       	movw	r16, r30
    d458:	ce 16       	cp	r12, r30
    d45a:	df 06       	cpc	r13, r31
    d45c:	c1 f7       	brne	.-16     	; 0xd44e <mmc_disk_initialize+0xb8>
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d45e:	89 81       	ldd	r24, Y+1	; 0x01
    d460:	86 fd       	sbrc	r24, 6
    d462:	2a c0       	rjmp	.+84     	; 0xd4b8 <mmc_disk_initialize+0x122>
    d464:	14 e0       	ldi	r17, 0x04	; 4
    d466:	29 c0       	rjmp	.+82     	; 0xd4ba <mmc_disk_initialize+0x124>
                }
            }
        }
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
    d468:	80 ed       	ldi	r24, 0xD0	; 208
    d46a:	97 e0       	ldi	r25, 0x07	; 7
    d46c:	c8 d3       	rcall	.+1936   	; 0xdbfe <mmc_set_ms_timeout>
            if (send_cmd(ACMD41, 0) <= 1)
    d46e:	40 e0       	ldi	r20, 0x00	; 0
    d470:	50 e0       	ldi	r21, 0x00	; 0
    d472:	ba 01       	movw	r22, r20
    d474:	89 ea       	ldi	r24, 0xA9	; 169
    d476:	25 df       	rcall	.-438    	; 0xd2c2 <send_cmd>
    d478:	82 30       	cpi	r24, 0x02	; 2
    d47a:	18 f0       	brcs	.+6      	; 0xd482 <mmc_disk_initialize+0xec>
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
            }
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
    d47c:	11 e0       	ldi	r17, 0x01	; 1
    d47e:	01 e0       	ldi	r16, 0x01	; 1
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
            if (send_cmd(ACMD41, 0) <= 1)
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
    d480:	02 c0       	rjmp	.+4      	; 0xd486 <mmc_disk_initialize+0xf0>
    d482:	12 e0       	ldi	r17, 0x02	; 2
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d484:	09 ea       	ldi	r16, 0xA9	; 169
    d486:	c2 d3       	rcall	.+1924   	; 0xdc0c <mmc_test_timeout>
    d488:	89 2b       	or	r24, r25
    d48a:	21 f0       	breq	.+8      	; 0xd494 <mmc_disk_initialize+0xfe>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d48c:	bf d3       	rcall	.+1918   	; 0xdc0c <mmc_test_timeout>
    d48e:	89 2b       	or	r24, r25
    d490:	89 f4       	brne	.+34     	; 0xd4b4 <mmc_disk_initialize+0x11e>
    d492:	08 c0       	rjmp	.+16     	; 0xd4a4 <mmc_disk_initialize+0x10e>
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d494:	40 e0       	ldi	r20, 0x00	; 0
    d496:	50 e0       	ldi	r21, 0x00	; 0
    d498:	ba 01       	movw	r22, r20
    d49a:	80 2f       	mov	r24, r16
    d49c:	12 df       	rcall	.-476    	; 0xd2c2 <send_cmd>
    d49e:	81 11       	cpse	r24, r1
    d4a0:	f2 cf       	rjmp	.-28     	; 0xd486 <mmc_disk_initialize+0xf0>
    d4a2:	f4 cf       	rjmp	.-24     	; 0xd48c <mmc_disk_initialize+0xf6>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d4a4:	40 e0       	ldi	r20, 0x00	; 0
    d4a6:	52 e0       	ldi	r21, 0x02	; 2
    d4a8:	60 e0       	ldi	r22, 0x00	; 0
    d4aa:	70 e0       	ldi	r23, 0x00	; 0
    d4ac:	80 e1       	ldi	r24, 0x10	; 16
    d4ae:	09 df       	rcall	.-494    	; 0xd2c2 <send_cmd>
    d4b0:	88 23       	and	r24, r24
                ty = 0;
    d4b2:	19 f0       	breq	.+6      	; 0xd4ba <mmc_disk_initialize+0x124>
    d4b4:	10 e0       	ldi	r17, 0x00	; 0
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d4b6:	01 c0       	rjmp	.+2      	; 0xd4ba <mmc_disk_initialize+0x124>
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
                ty = 0;
        }
    }

    CardType = ty;
    d4b8:	1c e0       	ldi	r17, 0x0C	; 12
    d4ba:	10 93 27 18 	sts	0x1827, r17	; 0x801827 <CardType>
    deselect();
    d4be:	a4 de       	rcall	.-696    	; 0xd208 <deselect>

    if (ty)                                       /* Initialization succeded */
    d4c0:	11 23       	and	r17, r17
    d4c2:	39 f0       	breq	.+14     	; 0xd4d2 <mmc_disk_initialize+0x13c>
    {
        Stat &= ~STA_NOINIT;                      /* Clear STA_NOINIT */
    d4c4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d4c8:	8e 7f       	andi	r24, 0xFE	; 254
    d4ca:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
        FCLK_FAST();
    d4ce:	81 d3       	rcall	.+1794   	; 0xdbd2 <mmc_fast>
    d4d0:	01 c0       	rjmp	.+2      	; 0xd4d4 <mmc_disk_initialize+0x13e>
    d4d2:	c1 d3       	rcall	.+1922   	; 0xdc56 <mmc_power_off>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d4d4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    else
    {
        power_off();
    }

    return Stat;
    d4d8:	24 96       	adiw	r28, 0x04	; 4
    d4da:	e8 e0       	ldi	r30, 0x08	; 8
}
    d4dc:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

0000d4e0 <mmc_disk_status>:
    d4e0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
/// @return STA_NOINIT if no drive
MEMSPACE
DSTATUS mmc_disk_status ( void )
{
    return Stat;
}
    d4e4:	08 95       	ret

0000d4e6 <mmc_disk_read>:
DRESULT mmc_disk_read (
BYTE *buff,                                       /*< Pointer to the data buffer to store read data */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /*< Sector count (1..128) */
)
{
    d4e6:	8f 92       	push	r8
    d4e8:	9f 92       	push	r9
    d4ea:	af 92       	push	r10
    d4ec:	bf 92       	push	r11
    d4ee:	ef 92       	push	r14
    d4f0:	ff 92       	push	r15
    d4f2:	1f 93       	push	r17
    d4f4:	cf 93       	push	r28
    d4f6:	df 93       	push	r29
    d4f8:	7c 01       	movw	r14, r24
    d4fa:	4a 01       	movw	r8, r20
    d4fc:	5b 01       	movw	r10, r22
    d4fe:	e9 01       	movw	r28, r18
    BYTE cmd;

    if (!count)
    d500:	20 97       	sbiw	r28, 0x00	; 0
    d502:	19 f4       	brne	.+6      	; 0xd50a <mmc_disk_read+0x24>
    {
        deselect();
    d504:	81 de       	rcall	.-766    	; 0xd208 <deselect>
        return RES_PARERR;
    d506:	84 e0       	ldi	r24, 0x04	; 4
    d508:	0d c0       	rjmp	.+26     	; 0xd524 <mmc_disk_read+0x3e>
    }

	if( Stat )
    d50a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d50e:	88 23       	and	r24, r24
    d510:	19 f0       	breq	.+6      	; 0xd518 <mmc_disk_read+0x32>
		set_error(1);
    d512:	81 e0       	ldi	r24, 0x01	; 1
    d514:	0e 94 08 25 	call	0x4a10	; 0x4a10 <set_error>

    if (Stat & STA_NOINIT)
    d518:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d51c:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d51e:	04 c0       	rjmp	.+8      	; 0xd528 <mmc_disk_read+0x42>
    d520:	73 de       	rcall	.-794    	; 0xd208 <deselect>
        return RES_NOTRDY;
    d522:	83 e0       	ldi	r24, 0x03	; 3
    d524:	90 e0       	ldi	r25, 0x00	; 0
    d526:	36 c0       	rjmp	.+108    	; 0xd594 <mmc_disk_read+0xae>
    }
    if (Stat & STA_NODISK)
    d528:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d52c:	81 fd       	sbrc	r24, 1
    d52e:	f8 cf       	rjmp	.-16     	; 0xd520 <mmc_disk_read+0x3a>
    {
        deselect();
        return RES_NOTRDY;
	}
    GPIO_PIN_HI(LED1);
    d530:	46 9a       	sbi	0x08, 6	; 8
    d532:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d534:	80 91 27 18 	lds	r24, 0x1827	; 0x801827 <CardType>
    d538:	83 fd       	sbrc	r24, 3
    d53a:	07 c0       	rjmp	.+14     	; 0xd54a <mmc_disk_read+0x64>
    d53c:	89 e0       	ldi	r24, 0x09	; 9
    d53e:	88 0c       	add	r8, r8
    d540:	99 1c       	adc	r9, r9
    d542:	aa 1c       	adc	r10, r10
    d544:	bb 1c       	adc	r11, r11
    d546:	8a 95       	dec	r24
    d548:	d1 f7       	brne	.-12     	; 0xd53e <mmc_disk_read+0x58>

    cmd = count > 1 ? CMD18 : CMD17;              /*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    d54a:	c2 30       	cpi	r28, 0x02	; 2
    d54c:	d1 05       	cpc	r29, r1
    d54e:	10 f4       	brcc	.+4      	; 0xd554 <mmc_disk_read+0x6e>
    d550:	11 e1       	ldi	r17, 0x11	; 17
    d552:	01 c0       	rjmp	.+2      	; 0xd556 <mmc_disk_read+0x70>
    d554:	12 e1       	ldi	r17, 0x12	; 18
    if (send_cmd(cmd, sector) == 0)
    d556:	b5 01       	movw	r22, r10
    d558:	a4 01       	movw	r20, r8
    d55a:	81 2f       	mov	r24, r17
    d55c:	b2 de       	rcall	.-668    	; 0xd2c2 <send_cmd>
    d55e:	81 11       	cpse	r24, r1
    d560:	11 c0       	rjmp	.+34     	; 0xd584 <mmc_disk_read+0x9e>
    {
        do
        {
            if (!rcvr_datablock(buff, 512))
    d562:	60 e0       	ldi	r22, 0x00	; 0
    d564:	72 e0       	ldi	r23, 0x02	; 2
    d566:	c7 01       	movw	r24, r14
    d568:	55 de       	rcall	.-854    	; 0xd214 <rcvr_datablock>
    d56a:	89 2b       	or	r24, r25
    d56c:	21 f0       	breq	.+8      	; 0xd576 <mmc_disk_read+0x90>
                break;
            buff += 512;
    d56e:	8e ef       	ldi	r24, 0xFE	; 254
    d570:	f8 1a       	sub	r15, r24
        } while (--count);
    d572:	21 97       	sbiw	r28, 0x01	; 1
    d574:	b1 f7       	brne	.-20     	; 0xd562 <mmc_disk_read+0x7c>
        if (cmd == CMD18) send_cmd(CMD12, 0);     /* STOP_TRANSMISSION */
    d576:	12 31       	cpi	r17, 0x12	; 18
    d578:	29 f4       	brne	.+10     	; 0xd584 <mmc_disk_read+0x9e>
    d57a:	40 e0       	ldi	r20, 0x00	; 0
    d57c:	50 e0       	ldi	r21, 0x00	; 0
    d57e:	ba 01       	movw	r22, r20
    d580:	8c e0       	ldi	r24, 0x0C	; 12
    }
    deselect();
    d582:	9f de       	rcall	.-706    	; 0xd2c2 <send_cmd>
    d584:	41 de       	rcall	.-894    	; 0xd208 <deselect>
    GPIO_PIN_LOW(LED1);
    d586:	46 98       	cbi	0x08, 6	; 8
    d588:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d58a:	81 e0       	ldi	r24, 0x01	; 1
    d58c:	90 e0       	ldi	r25, 0x00	; 0
    d58e:	cd 2b       	or	r28, r29
    d590:	09 f4       	brne	.+2      	; 0xd594 <mmc_disk_read+0xae>
    d592:	80 e0       	ldi	r24, 0x00	; 0
}
    d594:	df 91       	pop	r29
    d596:	cf 91       	pop	r28
    d598:	1f 91       	pop	r17
    d59a:	ff 90       	pop	r15
    d59c:	ef 90       	pop	r14
    d59e:	bf 90       	pop	r11
    d5a0:	af 90       	pop	r10
    d5a2:	9f 90       	pop	r9
    d5a4:	8f 90       	pop	r8
    d5a6:	08 95       	ret

0000d5a8 <mmc_disk_write>:
DRESULT mmc_disk_write (
const BYTE *buff,                                 /*< Pointer to the data to be written */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /* Sector count (1..128) */
)
{
    d5a8:	a0 e0       	ldi	r26, 0x00	; 0
    d5aa:	b0 e0       	ldi	r27, 0x00	; 0
    d5ac:	ea ed       	ldi	r30, 0xDA	; 218
    d5ae:	fa e6       	ldi	r31, 0x6A	; 106
    d5b0:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
    d5b4:	8c 01       	movw	r16, r24
    d5b6:	6a 01       	movw	r12, r20
    d5b8:	7b 01       	movw	r14, r22
    d5ba:	e9 01       	movw	r28, r18
    if (!count)
    d5bc:	20 97       	sbiw	r28, 0x00	; 0
    d5be:	19 f4       	brne	.+6      	; 0xd5c6 <mmc_disk_write+0x1e>
    {
        deselect();
    d5c0:	23 de       	rcall	.-954    	; 0xd208 <deselect>
        return RES_PARERR;
    d5c2:	84 e0       	ldi	r24, 0x04	; 4
    d5c4:	18 c0       	rjmp	.+48     	; 0xd5f6 <mmc_disk_write+0x4e>
    }

	if( Stat )
    d5c6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d5ca:	88 23       	and	r24, r24
    d5cc:	19 f0       	breq	.+6      	; 0xd5d4 <mmc_disk_write+0x2c>
		set_error(1);
    d5ce:	81 e0       	ldi	r24, 0x01	; 1
    d5d0:	0e 94 08 25 	call	0x4a10	; 0x4a10 <set_error>

    if (Stat & STA_NOINIT)
    d5d4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d5d8:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d5da:	03 c0       	rjmp	.+6      	; 0xd5e2 <mmc_disk_write+0x3a>
    d5dc:	15 de       	rcall	.-982    	; 0xd208 <deselect>
        return RES_NOTRDY;
    d5de:	83 e0       	ldi	r24, 0x03	; 3
    d5e0:	0a c0       	rjmp	.+20     	; 0xd5f6 <mmc_disk_write+0x4e>
    }
    if (Stat & STA_NODISK)
    d5e2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d5e6:	81 fd       	sbrc	r24, 1
    d5e8:	f9 cf       	rjmp	.-14     	; 0xd5dc <mmc_disk_write+0x34>
    {
        deselect();
        return RES_NOTRDY;
	}
    if (Stat & STA_PROTECT)
    d5ea:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d5ee:	82 ff       	sbrs	r24, 2
    {
        deselect();
    d5f0:	04 c0       	rjmp	.+8      	; 0xd5fa <mmc_disk_write+0x52>
    d5f2:	0a de       	rcall	.-1004   	; 0xd208 <deselect>
        return RES_WRPRT;
    d5f4:	82 e0       	ldi	r24, 0x02	; 2
    d5f6:	90 e0       	ldi	r25, 0x00	; 0
    d5f8:	46 c0       	rjmp	.+140    	; 0xd686 <mmc_disk_write+0xde>
    }

    GPIO_PIN_HI(LED1);
    d5fa:	46 9a       	sbi	0x08, 6	; 8
    d5fc:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d5fe:	80 91 27 18 	lds	r24, 0x1827	; 0x801827 <CardType>
    d602:	83 fd       	sbrc	r24, 3
    d604:	07 c0       	rjmp	.+14     	; 0xd614 <mmc_disk_write+0x6c>
    d606:	99 e0       	ldi	r25, 0x09	; 9
    d608:	cc 0c       	add	r12, r12
    d60a:	dd 1c       	adc	r13, r13
    d60c:	ee 1c       	adc	r14, r14
    d60e:	ff 1c       	adc	r15, r15
    d610:	9a 95       	dec	r25
    d612:	d1 f7       	brne	.-12     	; 0xd608 <mmc_disk_write+0x60>

    if (count == 1)                               /* Single block write */
    d614:	c1 30       	cpi	r28, 0x01	; 1
    d616:	d1 05       	cpc	r29, r1
    d618:	89 f4       	brne	.+34     	; 0xd63c <mmc_disk_write+0x94>
    {
        if ((send_cmd(CMD24, sector) == 0)        /* WRITE_BLOCK */
    d61a:	b7 01       	movw	r22, r14
    d61c:	a6 01       	movw	r20, r12
    d61e:	88 e1       	ldi	r24, 0x18	; 24
    d620:	50 de       	rcall	.-864    	; 0xd2c2 <send_cmd>
    d622:	81 11       	cpse	r24, r1
            && xmit_datablock(buff, 0xFE))
    d624:	26 c0       	rjmp	.+76     	; 0xd672 <mmc_disk_write+0xca>
    d626:	6e ef       	ldi	r22, 0xFE	; 254
    d628:	c8 01       	movw	r24, r16
    d62a:	8e de       	rcall	.-740    	; 0xd348 <xmit_datablock>
    d62c:	31 e0       	ldi	r19, 0x01	; 1
    d62e:	20 e0       	ldi	r18, 0x00	; 0
    d630:	89 2b       	or	r24, r25
    d632:	09 f0       	breq	.+2      	; 0xd636 <mmc_disk_write+0x8e>
    d634:	30 e0       	ldi	r19, 0x00	; 0
    d636:	c3 2f       	mov	r28, r19
    d638:	d2 2f       	mov	r29, r18
    d63a:	1d c0       	rjmp	.+58     	; 0xd676 <mmc_disk_write+0xce>
            count = 0;
    }
    else                                          /* Multiple block write */
    {
        if (CardType & CT_SDC) send_cmd(ACMD23, count);
    d63c:	86 70       	andi	r24, 0x06	; 6
    d63e:	29 f0       	breq	.+10     	; 0xd64a <mmc_disk_write+0xa2>
    d640:	ae 01       	movw	r20, r28
    d642:	60 e0       	ldi	r22, 0x00	; 0
    d644:	70 e0       	ldi	r23, 0x00	; 0
    d646:	87 e9       	ldi	r24, 0x97	; 151
        if (send_cmd(CMD25, sector) == 0)         /* WRITE_MULTIPLE_BLOCK */
    d648:	3c de       	rcall	.-904    	; 0xd2c2 <send_cmd>
    d64a:	b7 01       	movw	r22, r14
    d64c:	a6 01       	movw	r20, r12
    d64e:	89 e1       	ldi	r24, 0x19	; 25
    d650:	38 de       	rcall	.-912    	; 0xd2c2 <send_cmd>
    d652:	81 11       	cpse	r24, r1
        {
            do
            {
                if (!xmit_datablock(buff, 0xFC)) break;
    d654:	10 c0       	rjmp	.+32     	; 0xd676 <mmc_disk_write+0xce>
    d656:	6c ef       	ldi	r22, 0xFC	; 252
    d658:	c8 01       	movw	r24, r16
    d65a:	76 de       	rcall	.-788    	; 0xd348 <xmit_datablock>
    d65c:	89 2b       	or	r24, r25
                buff += 512;
    d65e:	19 f0       	breq	.+6      	; 0xd666 <mmc_disk_write+0xbe>
            } while (--count);
    d660:	1e 5f       	subi	r17, 0xFE	; 254
    d662:	21 97       	sbiw	r28, 0x01	; 1
            if (!xmit_datablock(0, 0xFD))         /* STOP_TRAN token */
    d664:	c1 f7       	brne	.-16     	; 0xd656 <mmc_disk_write+0xae>
    d666:	6d ef       	ldi	r22, 0xFD	; 253
    d668:	80 e0       	ldi	r24, 0x00	; 0
    d66a:	90 e0       	ldi	r25, 0x00	; 0
    d66c:	6d de       	rcall	.-806    	; 0xd348 <xmit_datablock>
    d66e:	89 2b       	or	r24, r25
                count = 1;
    d670:	11 f4       	brne	.+4      	; 0xd676 <mmc_disk_write+0xce>
    d672:	c1 e0       	ldi	r28, 0x01	; 1
        }
    }
    deselect();
    d674:	d0 e0       	ldi	r29, 0x00	; 0
    d676:	c8 dd       	rcall	.-1136   	; 0xd208 <deselect>
    GPIO_PIN_LOW(LED1);
    d678:	46 98       	cbi	0x08, 6	; 8
    d67a:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d67c:	81 e0       	ldi	r24, 0x01	; 1
    d67e:	90 e0       	ldi	r25, 0x00	; 0
    d680:	cd 2b       	or	r28, r29
    d682:	09 f4       	brne	.+2      	; 0xd686 <mmc_disk_write+0xde>
    d684:	80 e0       	ldi	r24, 0x00	; 0
}
    d686:	cd b7       	in	r28, 0x3d	; 61
    d688:	de b7       	in	r29, 0x3e	; 62
    d68a:	e8 e0       	ldi	r30, 0x08	; 8
    d68c:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

0000d690 <mmc_disk_ioctl>:
MEMSPACE
DRESULT mmc_disk_ioctl (
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d690:	a0 e1       	ldi	r26, 0x10	; 16
    d692:	b0 e0       	ldi	r27, 0x00	; 0
    d694:	ee e4       	ldi	r30, 0x4E	; 78
    d696:	fb e6       	ldi	r31, 0x6B	; 107
    d698:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
    SDIO_CTRL *sdi;
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    d69c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d6a0:	90 fd       	sbrc	r25, 0
    d6a2:	31 c2       	rjmp	.+1122   	; 0xdb06 <mmc_disk_ioctl+0x476>
    d6a4:	8b 01       	movw	r16, r22
        return RES_NOTRDY;

    if (Stat & STA_NODISK)
    d6a6:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d6aa:	91 ff       	sbrs	r25, 1
    d6ac:	02 c0       	rjmp	.+4      	; 0xd6b2 <mmc_disk_ioctl+0x22>
    {
        deselect();
    d6ae:	ac dd       	rcall	.-1192   	; 0xd208 <deselect>
    d6b0:	2a c2       	rjmp	.+1108   	; 0xdb06 <mmc_disk_ioctl+0x476>
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d6b2:	83 33       	cpi	r24, 0x33	; 51
    d6b4:	09 f4       	brne	.+2      	; 0xd6b8 <mmc_disk_ioctl+0x28>
    d6b6:	01 c1       	rjmp	.+514    	; 0xd8ba <mmc_disk_ioctl+0x22a>
    d6b8:	a0 f4       	brcc	.+40     	; 0xd6e2 <mmc_disk_ioctl+0x52>
    d6ba:	83 30       	cpi	r24, 0x03	; 3
    d6bc:	09 f4       	brne	.+2      	; 0xd6c0 <mmc_disk_ioctl+0x30>
    d6be:	85 c0       	rjmp	.+266    	; 0xd7ca <mmc_disk_ioctl+0x13a>
    d6c0:	28 f4       	brcc	.+10     	; 0xd6cc <mmc_disk_ioctl+0x3c>
    d6c2:	88 23       	and	r24, r24
    d6c4:	11 f1       	breq	.+68     	; 0xd70a <mmc_disk_ioctl+0x7a>
    d6c6:	81 30       	cpi	r24, 0x01	; 1
    d6c8:	11 f1       	breq	.+68     	; 0xd70e <mmc_disk_ioctl+0x7e>
    d6ca:	1f c2       	rjmp	.+1086   	; 0xdb0a <mmc_disk_ioctl+0x47a>
    d6cc:	87 30       	cpi	r24, 0x07	; 7
    d6ce:	09 f4       	brne	.+2      	; 0xd6d2 <mmc_disk_ioctl+0x42>
    d6d0:	2a c1       	rjmp	.+596    	; 0xd926 <mmc_disk_ioctl+0x296>
    d6d2:	82 33       	cpi	r24, 0x32	; 50
    d6d4:	09 f0       	breq	.+2      	; 0xd6d8 <mmc_disk_ioctl+0x48>
    d6d6:	19 c2       	rjmp	.+1074   	; 0xdb0a <mmc_disk_ioctl+0x47a>
#endif

/* Following commands are never used by FatFs module */

        case MMC_GET_TYPE :                       /* Get card type flags (1 byte) */
            *ptr = CardType;
    d6d8:	80 91 27 18 	lds	r24, 0x1827	; 0x801827 <CardType>
    d6dc:	fb 01       	movw	r30, r22
    d6de:	80 83       	st	Z, r24
    d6e0:	28 c1       	rjmp	.+592    	; 0xd932 <mmc_disk_ioctl+0x2a2>
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d6e2:	86 33       	cpi	r24, 0x36	; 54
    d6e4:	09 f4       	brne	.+2      	; 0xd6e8 <mmc_disk_ioctl+0x58>
    d6e6:	0c c1       	rjmp	.+536    	; 0xd900 <mmc_disk_ioctl+0x270>
    d6e8:	38 f4       	brcc	.+14     	; 0xd6f8 <mmc_disk_ioctl+0x68>
    d6ea:	84 33       	cpi	r24, 0x34	; 52
    d6ec:	09 f4       	brne	.+2      	; 0xd6f0 <mmc_disk_ioctl+0x60>
    d6ee:	ea c0       	rjmp	.+468    	; 0xd8c4 <mmc_disk_ioctl+0x234>
    d6f0:	85 33       	cpi	r24, 0x35	; 53
    d6f2:	09 f4       	brne	.+2      	; 0xd6f6 <mmc_disk_ioctl+0x66>
    d6f4:	f1 c0       	rjmp	.+482    	; 0xd8d8 <mmc_disk_ioctl+0x248>
    d6f6:	09 c2       	rjmp	.+1042   	; 0xdb0a <mmc_disk_ioctl+0x47a>
    d6f8:	88 33       	cpi	r24, 0x38	; 56
    d6fa:	09 f4       	brne	.+2      	; 0xd6fe <mmc_disk_ioctl+0x6e>
    d6fc:	74 c1       	rjmp	.+744    	; 0xd9e6 <mmc_disk_ioctl+0x356>
    d6fe:	08 f4       	brcc	.+2      	; 0xd702 <mmc_disk_ioctl+0x72>
    d700:	1a c1       	rjmp	.+564    	; 0xd936 <mmc_disk_ioctl+0x2a6>
    d702:	89 33       	cpi	r24, 0x39	; 57
    d704:	09 f4       	brne	.+2      	; 0xd708 <mmc_disk_ioctl+0x78>
    d706:	bc c1       	rjmp	.+888    	; 0xda80 <mmc_disk_ioctl+0x3f0>
    {
        case CTRL_SYNC :                          /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select()) res = RES_OK;
    d708:	00 c2       	rjmp	.+1024   	; 0xdb0a <mmc_disk_ioctl+0x47a>
    d70a:	b9 dd       	rcall	.-1166   	; 0xd27e <select>
    d70c:	06 c1       	rjmp	.+524    	; 0xd91a <mmc_disk_ioctl+0x28a>
            deselect();
            break;

        case GET_SECTOR_COUNT :                   /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d70e:	40 e0       	ldi	r20, 0x00	; 0
    d710:	50 e0       	ldi	r21, 0x00	; 0
    d712:	ba 01       	movw	r22, r20
    d714:	89 e0       	ldi	r24, 0x09	; 9
    d716:	d5 dd       	rcall	.-1110   	; 0xd2c2 <send_cmd>
    d718:	81 11       	cpse	r24, r1
    d71a:	f1 c1       	rjmp	.+994    	; 0xdafe <mmc_disk_ioctl+0x46e>
    d71c:	60 e1       	ldi	r22, 0x10	; 16
    d71e:	70 e0       	ldi	r23, 0x00	; 0
    d720:	ce 01       	movw	r24, r28
    d722:	01 96       	adiw	r24, 0x01	; 1
    d724:	77 dd       	rcall	.-1298   	; 0xd214 <rcvr_datablock>
    d726:	89 2b       	or	r24, r25
    d728:	09 f4       	brne	.+2      	; 0xd72c <mmc_disk_ioctl+0x9c>
    d72a:	e9 c1       	rjmp	.+978    	; 0xdafe <mmc_disk_ioctl+0x46e>
            {
                if ((csd[0] >> 6) == 1)           /* SDC ver 2.00 */
    d72c:	99 81       	ldd	r25, Y+1	; 0x01
    d72e:	92 95       	swap	r25
    d730:	96 95       	lsr	r25
    d732:	96 95       	lsr	r25
    d734:	93 70       	andi	r25, 0x03	; 3
    d736:	29 85       	ldd	r18, Y+9	; 0x09
    d738:	4a 85       	ldd	r20, Y+10	; 0x0a
    d73a:	88 85       	ldd	r24, Y+8	; 0x08
    d73c:	91 30       	cpi	r25, 0x01	; 1
    d73e:	d9 f4       	brne	.+54     	; 0xd776 <mmc_disk_ioctl+0xe6>
                {
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
                    *(DWORD*)buff = csize << 10;
    d740:	30 e0       	ldi	r19, 0x00	; 0
    d742:	32 2f       	mov	r19, r18
    d744:	22 27       	eor	r18, r18
    d746:	24 0f       	add	r18, r20
    d748:	31 1d       	adc	r19, r1
    d74a:	8f 73       	andi	r24, 0x3F	; 63
    d74c:	90 e0       	ldi	r25, 0x00	; 0
    d74e:	a0 e0       	ldi	r26, 0x00	; 0
    d750:	b0 e0       	ldi	r27, 0x00	; 0
    d752:	dc 01       	movw	r26, r24
    d754:	99 27       	eor	r25, r25
    d756:	88 27       	eor	r24, r24
    d758:	01 96       	adiw	r24, 0x01	; 1
    d75a:	a1 1d       	adc	r26, r1
    d75c:	b1 1d       	adc	r27, r1
    d75e:	82 0f       	add	r24, r18
    d760:	93 1f       	adc	r25, r19
    d762:	a1 1d       	adc	r26, r1
    d764:	b1 1d       	adc	r27, r1
    d766:	fa e0       	ldi	r31, 0x0A	; 10
    d768:	88 0f       	add	r24, r24
    d76a:	99 1f       	adc	r25, r25
    d76c:	aa 1f       	adc	r26, r26
    d76e:	bb 1f       	adc	r27, r27
    d770:	fa 95       	dec	r31
    d772:	d1 f7       	brne	.-12     	; 0xd768 <mmc_disk_ioctl+0xd8>
    d774:	9b c0       	rjmp	.+310    	; 0xd8ac <mmc_disk_ioctl+0x21c>
                }                                 /* SDC ver 1.XX or MMC*/
                else
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(DWORD*)buff = csize << (n - 9);
    d776:	22 95       	swap	r18
    d778:	26 95       	lsr	r18
    d77a:	26 95       	lsr	r18
    d77c:	23 70       	andi	r18, 0x03	; 3
    d77e:	f4 e0       	ldi	r31, 0x04	; 4
    d780:	8f 9f       	mul	r24, r31
    d782:	c0 01       	movw	r24, r0
    d784:	11 24       	eor	r1, r1
    d786:	82 0f       	add	r24, r18
    d788:	91 1d       	adc	r25, r1
    d78a:	01 96       	adiw	r24, 0x01	; 1
    d78c:	2f 81       	ldd	r18, Y+7	; 0x07
    d78e:	23 70       	andi	r18, 0x03	; 3
    d790:	30 e0       	ldi	r19, 0x00	; 0
    d792:	32 2f       	mov	r19, r18
    d794:	22 27       	eor	r18, r18
    d796:	33 0f       	add	r19, r19
    d798:	33 0f       	add	r19, r19
    d79a:	82 0f       	add	r24, r18
    d79c:	93 1f       	adc	r25, r19
    d79e:	a0 e0       	ldi	r26, 0x00	; 0
    d7a0:	b0 e0       	ldi	r27, 0x00	; 0
    d7a2:	2e 81       	ldd	r18, Y+6	; 0x06
    d7a4:	32 2f       	mov	r19, r18
    d7a6:	3f 70       	andi	r19, 0x0F	; 15
    d7a8:	2b 85       	ldd	r18, Y+11	; 0x0b
    d7aa:	22 1f       	adc	r18, r18
    d7ac:	22 27       	eor	r18, r18
    d7ae:	22 1f       	adc	r18, r18
    d7b0:	23 0f       	add	r18, r19
    d7b2:	43 70       	andi	r20, 0x03	; 3
    d7b4:	44 0f       	add	r20, r20
    d7b6:	42 0f       	add	r20, r18
    d7b8:	47 50       	subi	r20, 0x07	; 7
    d7ba:	04 c0       	rjmp	.+8      	; 0xd7c4 <mmc_disk_ioctl+0x134>
    d7bc:	88 0f       	add	r24, r24
    d7be:	99 1f       	adc	r25, r25
    d7c0:	aa 1f       	adc	r26, r26
    d7c2:	bb 1f       	adc	r27, r27
    d7c4:	4a 95       	dec	r20
    d7c6:	d2 f7       	brpl	.-12     	; 0xd7bc <mmc_disk_ioctl+0x12c>
    d7c8:	71 c0       	rjmp	.+226    	; 0xd8ac <mmc_disk_ioctl+0x21c>
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d7ca:	80 91 27 18 	lds	r24, 0x1827	; 0x801827 <CardType>
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d7ce:	40 e0       	ldi	r20, 0x00	; 0
    d7d0:	50 e0       	ldi	r21, 0x00	; 0
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d7d2:	ba 01       	movw	r22, r20
    d7d4:	82 ff       	sbrs	r24, 2
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d7d6:	24 c0       	rjmp	.+72     	; 0xd820 <mmc_disk_ioctl+0x190>
    d7d8:	8d e8       	ldi	r24, 0x8D	; 141
    d7da:	73 dd       	rcall	.-1306   	; 0xd2c2 <send_cmd>
    d7dc:	81 11       	cpse	r24, r1
                {
                    xchg_spi(0xFF);
    d7de:	8f c1       	rjmp	.+798    	; 0xdafe <mmc_disk_ioctl+0x46e>
    d7e0:	8f ef       	ldi	r24, 0xFF	; 255
                    if (rcvr_datablock(csd, 16))  /* Read partial block */
    d7e2:	10 dd       	rcall	.-1504   	; 0xd204 <xchg_spi>
    d7e4:	60 e1       	ldi	r22, 0x10	; 16
    d7e6:	70 e0       	ldi	r23, 0x00	; 0
    d7e8:	ce 01       	movw	r24, r28
    d7ea:	01 96       	adiw	r24, 0x01	; 1
    d7ec:	13 dd       	rcall	.-1498   	; 0xd214 <rcvr_datablock>
    d7ee:	89 2b       	or	r24, r25
    d7f0:	09 f4       	brne	.+2      	; 0xd7f4 <mmc_disk_ioctl+0x164>
    d7f2:	85 c1       	rjmp	.+778    	; 0xdafe <mmc_disk_ioctl+0x46e>
    d7f4:	50 e3       	ldi	r21, 0x30	; 48
                    {
/* Purge trailing data */
                        for (n = 64 - 16; n; n--) xchg_spi(0xFF);
    d7f6:	f5 2e       	mov	r15, r21
    d7f8:	8f ef       	ldi	r24, 0xFF	; 255
    d7fa:	04 dd       	rcall	.-1528   	; 0xd204 <xchg_spi>
    d7fc:	fa 94       	dec	r15
    d7fe:	f1 10       	cpse	r15, r1
    d800:	fb cf       	rjmp	.-10     	; 0xd7f8 <mmc_disk_ioctl+0x168>
                        *(DWORD*)buff = 16UL << (csd[10] >> 4);
    d802:	2b 85       	ldd	r18, Y+11	; 0x0b
    d804:	22 95       	swap	r18
    d806:	2f 70       	andi	r18, 0x0F	; 15
    d808:	80 e1       	ldi	r24, 0x10	; 16
    d80a:	90 e0       	ldi	r25, 0x00	; 0
    d80c:	a0 e0       	ldi	r26, 0x00	; 0
    d80e:	b0 e0       	ldi	r27, 0x00	; 0
    d810:	04 c0       	rjmp	.+8      	; 0xd81a <mmc_disk_ioctl+0x18a>
    d812:	88 0f       	add	r24, r24
    d814:	99 1f       	adc	r25, r25
    d816:	aa 1f       	adc	r26, r26
    d818:	bb 1f       	adc	r27, r27
    d81a:	2a 95       	dec	r18
    d81c:	d2 f7       	brpl	.-12     	; 0xd812 <mmc_disk_ioctl+0x182>
                }
            }                                     /* SDv1 or MMCv3 */
            else
            {
/* Read CSD */
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d81e:	46 c0       	rjmp	.+140    	; 0xd8ac <mmc_disk_ioctl+0x21c>
    d820:	89 e0       	ldi	r24, 0x09	; 9
    d822:	4f dd       	rcall	.-1378   	; 0xd2c2 <send_cmd>
    d824:	81 11       	cpse	r24, r1
    d826:	6b c1       	rjmp	.+726    	; 0xdafe <mmc_disk_ioctl+0x46e>
    d828:	60 e1       	ldi	r22, 0x10	; 16
    d82a:	70 e0       	ldi	r23, 0x00	; 0
    d82c:	ce 01       	movw	r24, r28
    d82e:	01 96       	adiw	r24, 0x01	; 1
    d830:	f1 dc       	rcall	.-1566   	; 0xd214 <rcvr_datablock>
    d832:	89 2b       	or	r24, r25
    d834:	09 f4       	brne	.+2      	; 0xd838 <mmc_disk_ioctl+0x1a8>
    d836:	63 c1       	rjmp	.+710    	; 0xdafe <mmc_disk_ioctl+0x46e>
                {
                    if (CardType & CT_SD1)        /* SDv1 */
    d838:	90 91 27 18 	lds	r25, 0x1827	; 0x801827 <CardType>
    d83c:	2b 85       	ldd	r18, Y+11	; 0x0b
    d83e:	8c 85       	ldd	r24, Y+12	; 0x0c
    d840:	91 ff       	sbrs	r25, 1
    d842:	16 c0       	rjmp	.+44     	; 0xd870 <mmc_disk_ioctl+0x1e0>
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    d844:	2f 73       	andi	r18, 0x3F	; 63
    d846:	88 1f       	adc	r24, r24
    d848:	88 27       	eor	r24, r24
    d84a:	88 1f       	adc	r24, r24
    d84c:	90 e0       	ldi	r25, 0x00	; 0
    d84e:	01 96       	adiw	r24, 0x01	; 1
    d850:	82 0f       	add	r24, r18
    d852:	91 1d       	adc	r25, r1
    d854:	82 0f       	add	r24, r18
    d856:	91 1d       	adc	r25, r1
    d858:	2e 85       	ldd	r18, Y+14	; 0x0e
    d85a:	22 95       	swap	r18
    d85c:	26 95       	lsr	r18
    d85e:	26 95       	lsr	r18
    d860:	23 70       	andi	r18, 0x03	; 3
    d862:	21 50       	subi	r18, 0x01	; 1
    d864:	02 c0       	rjmp	.+4      	; 0xd86a <mmc_disk_ioctl+0x1da>
    d866:	88 0f       	add	r24, r24
    d868:	99 1f       	adc	r25, r25
    d86a:	2a 95       	dec	r18
    d86c:	e2 f7       	brpl	.-8      	; 0xd866 <mmc_disk_ioctl+0x1d6>
    d86e:	1c c0       	rjmp	.+56     	; 0xd8a8 <mmc_disk_ioctl+0x218>
                    }                             /* MMCv3 */
                    else
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    d870:	38 2f       	mov	r19, r24
    d872:	33 70       	andi	r19, 0x03	; 3
    d874:	82 95       	swap	r24
    d876:	86 95       	lsr	r24
    d878:	87 70       	andi	r24, 0x07	; 7
    d87a:	90 e0       	ldi	r25, 0x00	; 0
    d87c:	f8 e0       	ldi	r31, 0x08	; 8
    d87e:	3f 9f       	mul	r19, r31
    d880:	80 0d       	add	r24, r0
    d882:	91 1d       	adc	r25, r1
    d884:	11 24       	eor	r1, r1
    d886:	01 96       	adiw	r24, 0x01	; 1
    d888:	2c 77       	andi	r18, 0x7C	; 124
    d88a:	30 e0       	ldi	r19, 0x00	; 0
    d88c:	35 95       	asr	r19
    d88e:	27 95       	ror	r18
    d890:	35 95       	asr	r19
    d892:	27 95       	ror	r18
    d894:	2f 5f       	subi	r18, 0xFF	; 255
    d896:	3f 4f       	sbci	r19, 0xFF	; 255
    d898:	82 9f       	mul	r24, r18
    d89a:	a0 01       	movw	r20, r0
    d89c:	83 9f       	mul	r24, r19
    d89e:	50 0d       	add	r21, r0
    d8a0:	92 9f       	mul	r25, r18
    d8a2:	50 0d       	add	r21, r0
    d8a4:	11 24       	eor	r1, r1
    d8a6:	ca 01       	movw	r24, r20
    d8a8:	a0 e0       	ldi	r26, 0x00	; 0
    d8aa:	b0 e0       	ldi	r27, 0x00	; 0
    d8ac:	f8 01       	movw	r30, r16
    d8ae:	80 83       	st	Z, r24
    d8b0:	91 83       	std	Z+1, r25	; 0x01
    d8b2:	a2 83       	std	Z+2, r26	; 0x02
    d8b4:	b3 83       	std	Z+3, r27	; 0x03
                    }
                    res = RES_OK;
    d8b6:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
            break;

        case MMC_GET_CSD :                        /* Receive CSD as a data block (16 bytes) */
/* READ_CSD */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))
    d8b8:	23 c1       	rjmp	.+582    	; 0xdb00 <mmc_disk_ioctl+0x470>
    d8ba:	40 e0       	ldi	r20, 0x00	; 0
    d8bc:	50 e0       	ldi	r21, 0x00	; 0
    d8be:	ba 01       	movw	r22, r20
    d8c0:	89 e0       	ldi	r24, 0x09	; 9
            deselect();
            break;

        case MMC_GET_CID :                        /* Receive CID as a data block (16 bytes) */
/* READ_CID */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))
    d8c2:	04 c0       	rjmp	.+8      	; 0xd8cc <mmc_disk_ioctl+0x23c>
    d8c4:	40 e0       	ldi	r20, 0x00	; 0
    d8c6:	50 e0       	ldi	r21, 0x00	; 0
    d8c8:	ba 01       	movw	r22, r20
    d8ca:	8a e0       	ldi	r24, 0x0A	; 10
    d8cc:	fa dc       	rcall	.-1548   	; 0xd2c2 <send_cmd>
    d8ce:	81 11       	cpse	r24, r1
    d8d0:	16 c1       	rjmp	.+556    	; 0xdafe <mmc_disk_ioctl+0x46e>
    d8d2:	60 e1       	ldi	r22, 0x10	; 16
    d8d4:	70 e0       	ldi	r23, 0x00	; 0
                res = RES_OK;
            deselect();
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
    d8d6:	1f c0       	rjmp	.+62     	; 0xd916 <mmc_disk_ioctl+0x286>
    d8d8:	40 e0       	ldi	r20, 0x00	; 0
    d8da:	50 e0       	ldi	r21, 0x00	; 0
    d8dc:	ba 01       	movw	r22, r20
    d8de:	8a e3       	ldi	r24, 0x3A	; 58
    d8e0:	f0 dc       	rcall	.-1568   	; 0xd2c2 <send_cmd>
    d8e2:	81 11       	cpse	r24, r1
    d8e4:	0c c1       	rjmp	.+536    	; 0xdafe <mmc_disk_ioctl+0x46e>
    d8e6:	78 01       	movw	r14, r16
    d8e8:	f4 e0       	ldi	r31, 0x04	; 4
    d8ea:	ef 0e       	add	r14, r31
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d8ec:	f1 1c       	adc	r15, r1
    d8ee:	8f ef       	ldi	r24, 0xFF	; 255
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
            {
                for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    d8f0:	83 d1       	rcall	.+774    	; 0xdbf8 <mmc_spi_TXRX>
    d8f2:	f8 01       	movw	r30, r16
    d8f4:	81 93       	st	Z+, r24
    d8f6:	8f 01       	movw	r16, r30
    d8f8:	ee 15       	cp	r30, r14
    d8fa:	ff 05       	cpc	r31, r15
            }
            deselect();
            break;

        case MMC_GET_SDSTAT :                     /* Receive SD statsu as a data block (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0)         /* SD_STATUS */
    d8fc:	c1 f7       	brne	.-16     	; 0xd8ee <mmc_disk_ioctl+0x25e>
    d8fe:	db cf       	rjmp	.-74     	; 0xd8b6 <mmc_disk_ioctl+0x226>
    d900:	40 e0       	ldi	r20, 0x00	; 0
    d902:	50 e0       	ldi	r21, 0x00	; 0
    d904:	ba 01       	movw	r22, r20
    d906:	8d e8       	ldi	r24, 0x8D	; 141
    d908:	dc dc       	rcall	.-1608   	; 0xd2c2 <send_cmd>
            {
                xchg_spi(0xFF);
    d90a:	81 11       	cpse	r24, r1
    d90c:	f8 c0       	rjmp	.+496    	; 0xdafe <mmc_disk_ioctl+0x46e>
    d90e:	8f ef       	ldi	r24, 0xFF	; 255
                if (rcvr_datablock(ptr, 64)) res = RES_OK;
    d910:	79 dc       	rcall	.-1806   	; 0xd204 <xchg_spi>
    d912:	60 e4       	ldi	r22, 0x40	; 64
    d914:	70 e0       	ldi	r23, 0x00	; 0
    d916:	c8 01       	movw	r24, r16
    d918:	7d dc       	rcall	.-1798   	; 0xd214 <rcvr_datablock>
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    d91a:	01 e0       	ldi	r16, 0x01	; 1
    d91c:	10 e0       	ldi	r17, 0x00	; 0
    d91e:	89 2b       	or	r24, r25
    d920:	09 f4       	brne	.+2      	; 0xd924 <mmc_disk_ioctl+0x294>
    d922:	ef c0       	rjmp	.+478    	; 0xdb02 <mmc_disk_ioctl+0x472>
    d924:	ea c0       	rjmp	.+468    	; 0xdafa <mmc_disk_ioctl+0x46a>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d926:	97 d1       	rcall	.+814    	; 0xdc56 <mmc_power_off>
    d928:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
            deselect();
            break;

        case CTRL_POWER_OFF :                     /* Power off */
            power_off();
            Stat |= STA_NOINIT;
    d92c:	81 60       	ori	r24, 0x01	; 1
    d92e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    d932:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
    d934:	eb c0       	rjmp	.+470    	; 0xdb0c <mmc_disk_ioctl+0x47c>
    d936:	fb 01       	movw	r30, r22
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    d938:	43 81       	ldd	r20, Z+3	; 0x03
    d93a:	54 81       	ldd	r21, Z+4	; 0x04
    d93c:	65 81       	ldd	r22, Z+5	; 0x05
    d93e:	76 81       	ldd	r23, Z+6	; 0x06
    d940:	39 e0       	ldi	r19, 0x09	; 9
    d942:	44 0f       	add	r20, r20
    d944:	55 1f       	adc	r21, r21
    d946:	66 1f       	adc	r22, r22
    d948:	77 1f       	adc	r23, r23
    d94a:	3a 95       	dec	r19
    d94c:	d1 f7       	brne	.-12     	; 0xd942 <mmc_disk_ioctl+0x2b2>
    d94e:	70 68       	ori	r23, 0x80	; 128
    d950:	80 81       	ld	r24, Z
    d952:	90 e0       	ldi	r25, 0x00	; 0
    d954:	a0 e0       	ldi	r26, 0x00	; 0
    d956:	b0 e0       	ldi	r27, 0x00	; 0
    d958:	2c e1       	ldi	r18, 0x1C	; 28
    d95a:	88 0f       	add	r24, r24
    d95c:	99 1f       	adc	r25, r25
    d95e:	aa 1f       	adc	r26, r26
    d960:	bb 1f       	adc	r27, r27
    d962:	2a 95       	dec	r18
    d964:	d1 f7       	brne	.-12     	; 0xd95a <mmc_disk_ioctl+0x2ca>
    d966:	48 2b       	or	r20, r24
    d968:	59 2b       	or	r21, r25
    d96a:	6a 2b       	or	r22, r26
    d96c:	7b 2b       	or	r23, r27
    d96e:	81 81       	ldd	r24, Z+1	; 0x01
    d970:	92 81       	ldd	r25, Z+2	; 0x02
    d972:	01 97       	sbiw	r24, 0x01	; 1
    d974:	91 70       	andi	r25, 0x01	; 1
    d976:	a0 e0       	ldi	r26, 0x00	; 0
    d978:	b0 e0       	ldi	r27, 0x00	; 0
    d97a:	48 2b       	or	r20, r24
    d97c:	59 2b       	or	r21, r25
    d97e:	6a 2b       	or	r22, r26
    d980:	7b 2b       	or	r23, r27
    d982:	80 e3       	ldi	r24, 0x30	; 48
    d984:	9e dc       	rcall	.-1732   	; 0xd2c2 <send_cmd>
            {
                mmc_set_ms_timeout(1000);
    d986:	81 11       	cpse	r24, r1
    d988:	ba c0       	rjmp	.+372    	; 0xdafe <mmc_disk_ioctl+0x46e>
    d98a:	88 ee       	ldi	r24, 0xE8	; 232
    d98c:	93 e0       	ldi	r25, 0x03	; 3
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d98e:	37 d1       	rcall	.+622    	; 0xdbfe <mmc_set_ms_timeout>
    d990:	8f ef       	ldi	r24, 0xFF	; 255
    d992:	32 d1       	rcall	.+612    	; 0xdbf8 <mmc_spi_TXRX>
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
    d994:	8f 3f       	cpi	r24, 0xFF	; 255
    d996:	21 f4       	brne	.+8      	; 0xd9a0 <mmc_disk_ioctl+0x310>
    d998:	39 d1       	rcall	.+626    	; 0xdc0c <mmc_test_timeout>
    d99a:	89 2b       	or	r24, r25
    d99c:	c9 f3       	breq	.-14     	; 0xd990 <mmc_disk_ioctl+0x300>
    d99e:	af c0       	rjmp	.+350    	; 0xdafe <mmc_disk_ioctl+0x46e>
                    ;
                if (rc == 0xFE)
    d9a0:	8e 3f       	cpi	r24, 0xFE	; 254
    d9a2:	09 f0       	breq	.+2      	; 0xd9a6 <mmc_disk_ioctl+0x316>
    d9a4:	ac c0       	rjmp	.+344    	; 0xdafe <mmc_disk_ioctl+0x46e>
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    d9a6:	f8 01       	movw	r30, r16
    d9a8:	e7 80       	ldd	r14, Z+7	; 0x07
    d9aa:	f0 84       	ldd	r15, Z+8	; 0x08
    d9ac:	c1 80       	ldd	r12, Z+1	; 0x01
    d9ae:	d2 80       	ldd	r13, Z+2	; 0x02
    d9b0:	ce 0c       	add	r12, r14
    d9b2:	df 1c       	adc	r13, r15
    d9b4:	ce 14       	cp	r12, r14
    d9b6:	df 04       	cpc	r13, r15
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d9b8:	31 f0       	breq	.+12     	; 0xd9c6 <mmc_disk_ioctl+0x336>
    d9ba:	8f ef       	ldi	r24, 0xFF	; 255
    d9bc:	1d d1       	rcall	.+570    	; 0xdbf8 <mmc_spi_TXRX>
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
                    ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    d9be:	f7 01       	movw	r30, r14
    d9c0:	81 93       	st	Z+, r24
    d9c2:	7f 01       	movw	r14, r30
    d9c4:	f7 cf       	rjmp	.-18     	; 0xd9b4 <mmc_disk_ioctl+0x324>
                    for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    d9c6:	f8 01       	movw	r30, r16
    d9c8:	81 81       	ldd	r24, Z+1	; 0x01
    d9ca:	92 81       	ldd	r25, Z+2	; 0x02
    d9cc:	02 e0       	ldi	r16, 0x02	; 2
    d9ce:	12 e0       	ldi	r17, 0x02	; 2
    d9d0:	08 1b       	sub	r16, r24
    d9d2:	19 0b       	sbc	r17, r25
    d9d4:	01 15       	cp	r16, r1
    d9d6:	11 05       	cpc	r17, r1
    d9d8:	09 f4       	brne	.+2      	; 0xd9dc <mmc_disk_ioctl+0x34c>
    d9da:	6d cf       	rjmp	.-294    	; 0xd8b6 <mmc_disk_ioctl+0x226>
    d9dc:	8f ef       	ldi	r24, 0xFF	; 255
    d9de:	12 dc       	rcall	.-2012   	; 0xd204 <xchg_spi>
    d9e0:	01 50       	subi	r16, 0x01	; 1
    d9e2:	11 09       	sbc	r17, r1
    d9e4:	f7 cf       	rjmp	.-18     	; 0xd9d4 <mmc_disk_ioctl+0x344>
    d9e6:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    d9e8:	43 81       	ldd	r20, Z+3	; 0x03
    d9ea:	54 81       	ldd	r21, Z+4	; 0x04
    d9ec:	65 81       	ldd	r22, Z+5	; 0x05
    d9ee:	76 81       	ldd	r23, Z+6	; 0x06
    d9f0:	39 e0       	ldi	r19, 0x09	; 9
    d9f2:	44 0f       	add	r20, r20
    d9f4:	55 1f       	adc	r21, r21
    d9f6:	66 1f       	adc	r22, r22
    d9f8:	77 1f       	adc	r23, r23
    d9fa:	3a 95       	dec	r19
    d9fc:	d1 f7       	brne	.-12     	; 0xd9f2 <mmc_disk_ioctl+0x362>
    d9fe:	70 68       	ori	r23, 0x80	; 128
    da00:	80 81       	ld	r24, Z
    da02:	90 e0       	ldi	r25, 0x00	; 0
    da04:	a0 e0       	ldi	r26, 0x00	; 0
    da06:	b0 e0       	ldi	r27, 0x00	; 0
    da08:	2c e1       	ldi	r18, 0x1C	; 28
    da0a:	88 0f       	add	r24, r24
    da0c:	99 1f       	adc	r25, r25
    da0e:	aa 1f       	adc	r26, r26
    da10:	bb 1f       	adc	r27, r27
    da12:	2a 95       	dec	r18
    da14:	d1 f7       	brne	.-12     	; 0xda0a <mmc_disk_ioctl+0x37a>
    da16:	48 2b       	or	r20, r24
    da18:	59 2b       	or	r21, r25
    da1a:	6a 2b       	or	r22, r26
    da1c:	7b 2b       	or	r23, r27
    da1e:	81 81       	ldd	r24, Z+1	; 0x01
    da20:	92 81       	ldd	r25, Z+2	; 0x02
    da22:	01 97       	sbiw	r24, 0x01	; 1
    da24:	91 70       	andi	r25, 0x01	; 1
    da26:	a0 e0       	ldi	r26, 0x00	; 0
    da28:	b0 e0       	ldi	r27, 0x00	; 0
    da2a:	48 2b       	or	r20, r24
    da2c:	59 2b       	or	r21, r25
    da2e:	6a 2b       	or	r22, r26
    da30:	7b 2b       	or	r23, r27
    da32:	81 e3       	ldi	r24, 0x31	; 49
    da34:	46 dc       	rcall	.-1908   	; 0xd2c2 <send_cmd>
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    da36:	81 11       	cpse	r24, r1
    da38:	62 c0       	rjmp	.+196    	; 0xdafe <mmc_disk_ioctl+0x46e>
    da3a:	8f ef       	ldi	r24, 0xFF	; 255
    da3c:	e3 db       	rcall	.-2106   	; 0xd204 <xchg_spi>
    da3e:	8e ef       	ldi	r24, 0xFE	; 254
    da40:	e1 db       	rcall	.-2110   	; 0xd204 <xchg_spi>
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    da42:	f8 01       	movw	r30, r16
    da44:	e7 80       	ldd	r14, Z+7	; 0x07
    da46:	f0 84       	ldd	r15, Z+8	; 0x08
    da48:	c1 80       	ldd	r12, Z+1	; 0x01
    da4a:	d2 80       	ldd	r13, Z+2	; 0x02
    da4c:	ce 0c       	add	r12, r14
    da4e:	df 1c       	adc	r13, r15
    da50:	ec 14       	cp	r14, r12
    da52:	fd 04       	cpc	r15, r13
    da54:	29 f0       	breq	.+10     	; 0xda60 <mmc_disk_ioctl+0x3d0>
    da56:	f7 01       	movw	r30, r14
    da58:	81 91       	ld	r24, Z+
    da5a:	7f 01       	movw	r14, r30
    da5c:	d3 db       	rcall	.-2138   	; 0xd204 <xchg_spi>
    da5e:	f8 cf       	rjmp	.-16     	; 0xda50 <mmc_disk_ioctl+0x3c0>
                for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    da60:	f8 01       	movw	r30, r16
    da62:	81 81       	ldd	r24, Z+1	; 0x01
    da64:	92 81       	ldd	r25, Z+2	; 0x02
    da66:	02 e0       	ldi	r16, 0x02	; 2
    da68:	12 e0       	ldi	r17, 0x02	; 2
    da6a:	08 1b       	sub	r16, r24
    da6c:	19 0b       	sbc	r17, r25
    da6e:	8f ef       	ldi	r24, 0xFF	; 255
    da70:	01 15       	cp	r16, r1
    da72:	11 05       	cpc	r17, r1
    da74:	09 f4       	brne	.+2      	; 0xda78 <mmc_disk_ioctl+0x3e8>
    da76:	3b c0       	rjmp	.+118    	; 0xdaee <mmc_disk_ioctl+0x45e>
    da78:	c5 db       	rcall	.-2166   	; 0xd204 <xchg_spi>
    da7a:	01 50       	subi	r16, 0x01	; 1
    da7c:	11 09       	sbc	r17, r1
    da7e:	f7 cf       	rjmp	.-18     	; 0xda6e <mmc_disk_ioctl+0x3de>
    da80:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    da82:	43 81       	ldd	r20, Z+3	; 0x03
    da84:	54 81       	ldd	r21, Z+4	; 0x04
    da86:	65 81       	ldd	r22, Z+5	; 0x05
    da88:	76 81       	ldd	r23, Z+6	; 0x06
    da8a:	89 e0       	ldi	r24, 0x09	; 9
    da8c:	44 0f       	add	r20, r20
    da8e:	55 1f       	adc	r21, r21
    da90:	66 1f       	adc	r22, r22
    da92:	77 1f       	adc	r23, r23
    da94:	8a 95       	dec	r24
    da96:	d1 f7       	brne	.-12     	; 0xda8c <mmc_disk_ioctl+0x3fc>
    da98:	74 68       	ori	r23, 0x84	; 132
    da9a:	80 81       	ld	r24, Z
    da9c:	90 e0       	ldi	r25, 0x00	; 0
    da9e:	a0 e0       	ldi	r26, 0x00	; 0
    daa0:	b0 e0       	ldi	r27, 0x00	; 0
    daa2:	2c e1       	ldi	r18, 0x1C	; 28
    daa4:	88 0f       	add	r24, r24
    daa6:	99 1f       	adc	r25, r25
    daa8:	aa 1f       	adc	r26, r26
    daaa:	bb 1f       	adc	r27, r27
    daac:	2a 95       	dec	r18
    daae:	d1 f7       	brne	.-12     	; 0xdaa4 <mmc_disk_ioctl+0x414>
    dab0:	48 2b       	or	r20, r24
    dab2:	59 2b       	or	r21, r25
    dab4:	6a 2b       	or	r22, r26
    dab6:	7b 2b       	or	r23, r27
    dab8:	82 81       	ldd	r24, Z+2	; 0x02
    daba:	90 e0       	ldi	r25, 0x00	; 0
    dabc:	a0 e0       	ldi	r26, 0x00	; 0
    dabe:	b0 e0       	ldi	r27, 0x00	; 0
    dac0:	48 2b       	or	r20, r24
    dac2:	59 2b       	or	r21, r25
    dac4:	6a 2b       	or	r22, r26
    dac6:	7b 2b       	or	r23, r27
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    dac8:	81 e3       	ldi	r24, 0x31	; 49
    daca:	fb db       	rcall	.-2058   	; 0xd2c2 <send_cmd>
    dacc:	81 11       	cpse	r24, r1
    dace:	17 c0       	rjmp	.+46     	; 0xdafe <mmc_disk_ioctl+0x46e>
    dad0:	8f ef       	ldi	r24, 0xFF	; 255
    dad2:	98 db       	rcall	.-2256   	; 0xd204 <xchg_spi>
                xchg_spi(sdi->ndata);
    dad4:	8e ef       	ldi	r24, 0xFE	; 254
    dad6:	96 db       	rcall	.-2260   	; 0xd204 <xchg_spi>
    dad8:	f8 01       	movw	r30, r16
    dada:	81 81       	ldd	r24, Z+1	; 0x01
    dadc:	93 db       	rcall	.-2266   	; 0xd204 <xchg_spi>
    dade:	01 e0       	ldi	r16, 0x01	; 1
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
    dae0:	12 e0       	ldi	r17, 0x02	; 2
    dae2:	8f ef       	ldi	r24, 0xFF	; 255
    dae4:	8f db       	rcall	.-2274   	; 0xd204 <xchg_spi>
    dae6:	01 50       	subi	r16, 0x01	; 1
    dae8:	11 09       	sbc	r17, r1
    daea:	d9 f7       	brne	.-10     	; 0xdae2 <mmc_disk_ioctl+0x452>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    daec:	8f ef       	ldi	r24, 0xFF	; 255
    daee:	84 d0       	rcall	.+264    	; 0xdbf8 <mmc_spi_TXRX>
    daf0:	8f 71       	andi	r24, 0x1F	; 31
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    daf2:	01 e0       	ldi	r16, 0x01	; 1
    daf4:	10 e0       	ldi	r17, 0x00	; 0
    daf6:	85 30       	cpi	r24, 0x05	; 5
    daf8:	21 f4       	brne	.+8      	; 0xdb02 <mmc_disk_ioctl+0x472>
    dafa:	00 e0       	ldi	r16, 0x00	; 0
    dafc:	02 c0       	rjmp	.+4      	; 0xdb02 <mmc_disk_ioctl+0x472>
    dafe:	01 e0       	ldi	r16, 0x01	; 1
    db00:	10 e0       	ldi	r17, 0x00	; 0
    db02:	82 db       	rcall	.-2300   	; 0xd208 <deselect>
                xchg_spi(0xFF); xchg_spi(0xFE);
                xchg_spi(sdi->ndata);
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
                if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
            }
            deselect();
    db04:	04 c0       	rjmp	.+8      	; 0xdb0e <mmc_disk_ioctl+0x47e>
    db06:	03 e0       	ldi	r16, 0x03	; 3
            break;
    db08:	01 c0       	rjmp	.+2      	; 0xdb0c <mmc_disk_ioctl+0x47c>
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
        return RES_NOTRDY;
    db0a:	04 e0       	ldi	r16, 0x04	; 4
    db0c:	10 e0       	ldi	r17, 0x00	; 0
            }
            deselect();
            break;
#endif
        default:
            res = RES_PARERR;
    db0e:	c8 01       	movw	r24, r16
    db10:	60 96       	adiw	r28, 0x10	; 16
    }

    return res;
}
    db12:	e8 e0       	ldi	r30, 0x08	; 8
    db14:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

0000db18 <mmc_disk_timerproc>:
    db18:	cf 93       	push	r28
    db1a:	80 91 29 18 	lds	r24, 0x1829	; 0x801829 <Timer1>
{
    BYTE n;
    BYTE s;

    n = Timer1;                                   /* 100Hz decrement timer */
    if (n) Timer1 = --n;
    db1e:	88 23       	and	r24, r24
    db20:	19 f0       	breq	.+6      	; 0xdb28 <mmc_disk_timerproc+0x10>
    db22:	81 50       	subi	r24, 0x01	; 1
    db24:	80 93 29 18 	sts	0x1829, r24	; 0x801829 <Timer1>
    n = Timer2;
    db28:	80 91 28 18 	lds	r24, 0x1828	; 0x801828 <Timer2>
    if (n) Timer2 = --n;
    db2c:	88 23       	and	r24, r24
    db2e:	19 f0       	breq	.+6      	; 0xdb36 <mmc_disk_timerproc+0x1e>
    db30:	81 50       	subi	r24, 0x01	; 1
    db32:	80 93 28 18 	sts	0x1828, r24	; 0x801828 <Timer2>

    s = Stat;
    db36:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
        s |= STA_PROTECT;
    else                                          /* Write enabled */
        s &= ~STA_PROTECT;
#endif

    if (MMC_CD)                                   /* Card inserted */
    db3a:	8e d0       	rcall	.+284    	; 0xdc58 <mmc_ins_status>
    db3c:	89 2b       	or	r24, r25
    db3e:	11 f0       	breq	.+4      	; 0xdb44 <mmc_disk_timerproc+0x2c>
	{
        s &= ~STA_NODISK;
    db40:	cd 7f       	andi	r28, 0xFD	; 253
    db42:	04 c0       	rjmp	.+8      	; 0xdb4c <mmc_disk_timerproc+0x34>
	}
    else                                          /* Socket empty */
	{	
        s |= (STA_NODISK | STA_NOINIT);
    db44:	c3 60       	ori	r28, 0x03	; 3
		set_error(1);
    db46:	81 e0       	ldi	r24, 0x01	; 1
    db48:	0e 94 08 25 	call	0x4a10	; 0x4a10 <set_error>
	}

    Stat = s;                                     /* Update MMC status */
    db4c:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
}
    db50:	cf 91       	pop	r28
    db52:	08 95       	ret

0000db54 <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    db54:	00 d0       	rcall	.+0      	; 0xdb56 <mmc_install_timer+0x2>
    db56:	1f 92       	push	r1
    db58:	10 92 33 18 	sts	0x1833, r1	; 0x801833 <_mmc_timeout+0x1>
    db5c:	10 92 32 18 	sts	0x1832, r1	; 0x801832 <_mmc_timeout>
    db60:	61 e0       	ldi	r22, 0x01	; 1
    db62:	70 e0       	ldi	r23, 0x00	; 0
    db64:	89 e3       	ldi	r24, 0x39	; 57
    db66:	9e e6       	ldi	r25, 0x6E	; 110
    db68:	0e 94 bc 32 	call	0x6578	; 0x6578 <set_timers>
    db6c:	01 96       	adiw	r24, 0x01	; 1
    db6e:	51 f4       	brne	.+20     	; 0xdb84 <mmc_install_timer+0x30>
    db70:	87 e2       	ldi	r24, 0x27	; 39
    db72:	98 e0       	ldi	r25, 0x08	; 8
    db74:	a0 e0       	ldi	r26, 0x00	; 0
    db76:	ed b7       	in	r30, 0x3d	; 61
    db78:	fe b7       	in	r31, 0x3e	; 62
    db7a:	81 83       	std	Z+1, r24	; 0x01
    db7c:	92 83       	std	Z+2, r25	; 0x02
    db7e:	a3 83       	std	Z+3, r26	; 0x03
    db80:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    db84:	0f 90       	pop	r0
    db86:	0f 90       	pop	r0
    db88:	0f 90       	pop	r0
    db8a:	08 95       	ret

0000db8c <mmc_spi_begin>:
    db8c:	60 91 2e 18 	lds	r22, 0x182E	; 0x80182e <_mmc_clock>
    db90:	70 91 2f 18 	lds	r23, 0x182F	; 0x80182f <_mmc_clock+0x1>
    db94:	80 91 30 18 	lds	r24, 0x1830	; 0x801830 <_mmc_clock+0x2>
    db98:	90 91 31 18 	lds	r25, 0x1831	; 0x801831 <_mmc_clock+0x3>
    db9c:	4b e0       	ldi	r20, 0x0B	; 11
    db9e:	50 e0       	ldi	r21, 0x00	; 0
    dba0:	0c 94 af 24 	jmp	0x495e	; 0x495e <spi_begin>
    dba4:	08 95       	ret

0000dba6 <mmc_spi_end>:
    dba6:	8b e0       	ldi	r24, 0x0B	; 11
    dba8:	0c 94 4b 24 	jmp	0x4896	; 0x4896 <spi_end>
    dbac:	08 95       	ret

0000dbae <mmc_slow>:
    dbae:	80 e2       	ldi	r24, 0x20	; 32
    dbb0:	91 ea       	ldi	r25, 0xA1	; 161
    dbb2:	a7 e0       	ldi	r26, 0x07	; 7
    dbb4:	b0 e0       	ldi	r27, 0x00	; 0
    dbb6:	80 93 2e 18 	sts	0x182E, r24	; 0x80182e <_mmc_clock>
    dbba:	90 93 2f 18 	sts	0x182F, r25	; 0x80182f <_mmc_clock+0x1>
    dbbe:	a0 93 30 18 	sts	0x1830, r26	; 0x801830 <_mmc_clock+0x2>
    dbc2:	b0 93 31 18 	sts	0x1831, r27	; 0x801831 <_mmc_clock+0x3>
    dbc6:	08 95       	ret

0000dbc8 <mmc_spi_init>:
    dbc8:	8b e0       	ldi	r24, 0x0B	; 11
    dbca:	0e 94 49 24 	call	0x4892	; 0x4892 <chip_select_init>
    dbce:	ef cf       	rjmp	.-34     	; 0xdbae <mmc_slow>
    dbd0:	08 95       	ret

0000dbd2 <mmc_fast>:
    dbd2:	80 ea       	ldi	r24, 0xA0	; 160
    dbd4:	95 e2       	ldi	r25, 0x25	; 37
    dbd6:	a6 e2       	ldi	r26, 0x26	; 38
    dbd8:	b0 e0       	ldi	r27, 0x00	; 0
    dbda:	80 93 2e 18 	sts	0x182E, r24	; 0x80182e <_mmc_clock>
    dbde:	90 93 2f 18 	sts	0x182F, r25	; 0x80182f <_mmc_clock+0x1>
    dbe2:	a0 93 30 18 	sts	0x1830, r26	; 0x801830 <_mmc_clock+0x2>
    dbe6:	b0 93 31 18 	sts	0x1831, r27	; 0x801831 <_mmc_clock+0x3>
    dbea:	08 95       	ret

0000dbec <mmc_spi_TX_buffer>:
    dbec:	0c 94 7b 24 	jmp	0x48f6	; 0x48f6 <spi_TX_buffer>
    dbf0:	08 95       	ret

0000dbf2 <mmc_spi_RX_buffer>:
    dbf2:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <spi_RX_buffer>
    dbf6:	08 95       	ret

0000dbf8 <mmc_spi_TXRX>:
    dbf8:	0c 94 f7 24 	jmp	0x49ee	; 0x49ee <spi_TXRX>
    dbfc:	08 95       	ret

0000dbfe <mmc_set_ms_timeout>:
    dbfe:	f8 94       	cli
    dc00:	90 93 33 18 	sts	0x1833, r25	; 0x801833 <_mmc_timeout+0x1>
    dc04:	80 93 32 18 	sts	0x1832, r24	; 0x801832 <_mmc_timeout>
    dc08:	78 94       	sei
    dc0a:	08 95       	ret

0000dc0c <mmc_test_timeout>:
    dc0c:	00 d0       	rcall	.+0      	; 0xdc0e <mmc_test_timeout+0x2>
    dc0e:	1f 92       	push	r1
    dc10:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    dc14:	81 fd       	sbrc	r24, 1
    dc16:	15 c0       	rjmp	.+42     	; 0xdc42 <mmc_test_timeout+0x36>
    dc18:	80 91 32 18 	lds	r24, 0x1832	; 0x801832 <_mmc_timeout>
    dc1c:	90 91 33 18 	lds	r25, 0x1833	; 0x801833 <_mmc_timeout+0x1>
    dc20:	89 2b       	or	r24, r25
    dc22:	91 f4       	brne	.+36     	; 0xdc48 <mmc_test_timeout+0x3c>
    dc24:	8a e1       	ldi	r24, 0x1A	; 26
    dc26:	98 e0       	ldi	r25, 0x08	; 8
    dc28:	a0 e0       	ldi	r26, 0x00	; 0
    dc2a:	ed b7       	in	r30, 0x3d	; 61
    dc2c:	fe b7       	in	r31, 0x3e	; 62
    dc2e:	81 83       	std	Z+1, r24	; 0x01
    dc30:	92 83       	std	Z+2, r25	; 0x02
    dc32:	a3 83       	std	Z+3, r26	; 0x03
    dc34:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    dc38:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    dc3c:	83 60       	ori	r24, 0x03	; 3
    dc3e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    dc42:	81 e0       	ldi	r24, 0x01	; 1
    dc44:	90 e0       	ldi	r25, 0x00	; 0
    dc46:	02 c0       	rjmp	.+4      	; 0xdc4c <mmc_test_timeout+0x40>
    dc48:	80 e0       	ldi	r24, 0x00	; 0
    dc4a:	90 e0       	ldi	r25, 0x00	; 0
    dc4c:	0f 90       	pop	r0
    dc4e:	0f 90       	pop	r0
    dc50:	0f 90       	pop	r0
    dc52:	08 95       	ret

0000dc54 <mmc_power_on>:
    dc54:	08 95       	ret

0000dc56 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    dc56:	08 95       	ret

0000dc58 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    dc58:	3f 98       	cbi	0x07, 7	; 7
    dc5a:	86 b1       	in	r24, 0x06	; 6
    dc5c:	08 2e       	mov	r0, r24
    dc5e:	00 0c       	add	r0, r0
    dc60:	99 0b       	sbc	r25, r25
    dc62:	80 95       	com	r24
    dc64:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    dc66:	89 2f       	mov	r24, r25
    dc68:	88 1f       	adc	r24, r24
    dc6a:	88 27       	eor	r24, r24
    dc6c:	88 1f       	adc	r24, r24
    dc6e:	90 e0       	ldi	r25, 0x00	; 0
    dc70:	08 95       	ret

0000dc72 <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    dc72:	80 91 32 18 	lds	r24, 0x1832	; 0x801832 <_mmc_timeout>
    dc76:	90 91 33 18 	lds	r25, 0x1833	; 0x801833 <_mmc_timeout+0x1>
    dc7a:	00 97       	sbiw	r24, 0x00	; 0
    dc7c:	29 f0       	breq	.+10     	; 0xdc88 <mmc_task+0x16>
        _mmc_timeout--;
    dc7e:	01 97       	sbiw	r24, 0x01	; 1
    dc80:	90 93 33 18 	sts	0x1833, r25	; 0x801833 <_mmc_timeout+0x1>
    dc84:	80 93 32 18 	sts	0x1832, r24	; 0x801832 <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    dc88:	80 91 2c 18 	lds	r24, 0x182C	; 0x80182c <_mmc_pre>
    dc8c:	90 91 2d 18 	lds	r25, 0x182D	; 0x80182d <_mmc_pre+0x1>
    dc90:	8a 30       	cpi	r24, 0x0A	; 10
    dc92:	91 05       	cpc	r25, r1
    dc94:	30 f4       	brcc	.+12     	; 0xdca2 <mmc_task+0x30>
    dc96:	01 96       	adiw	r24, 0x01	; 1
    dc98:	90 93 2d 18 	sts	0x182D, r25	; 0x80182d <_mmc_pre+0x1>
    dc9c:	80 93 2c 18 	sts	0x182C, r24	; 0x80182c <_mmc_pre>
    dca0:	08 95       	ret
        return;

    _mmc_pre = 0;
    dca2:	10 92 2d 18 	sts	0x182D, r1	; 0x80182d <_mmc_pre+0x1>
    dca6:	10 92 2c 18 	sts	0x182C, r1	; 0x80182c <_mmc_pre>

	if(!mmc_ins_status())
    dcaa:	d6 df       	rcall	.-84     	; 0xdc58 <mmc_ins_status>
    dcac:	89 2b       	or	r24, r25
    dcae:	19 f4       	brne	.+6      	; 0xdcb6 <mmc_task+0x44>
		set_error(1);
    dcb0:	81 e0       	ldi	r24, 0x01	; 1
    dcb2:	0e 94 08 25 	call	0x4a10	; 0x4a10 <set_error>

    mmc_disk_timerproc();
    dcb6:	30 cf       	rjmp	.-416    	; 0xdb18 <mmc_disk_timerproc>
    dcb8:	08 95       	ret

0000dcba <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    dcba:	ab e0       	ldi	r26, 0x0B	; 11
    dcbc:	b0 e0       	ldi	r27, 0x00	; 0
    dcbe:	e3 e6       	ldi	r30, 0x63	; 99
    dcc0:	fe e6       	ldi	r31, 0x6E	; 110
    dcc2:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__prologue_saves__+0x18>
    dcc6:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    dcc8:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    dccc:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    dcd0:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);
    dcd2:	3f 98       	cbi	0x07, 7	; 7

    mmc_spi_init();
    dcd4:	79 df       	rcall	.-270    	; 0xdbc8 <mmc_spi_init>

    if( verbose)
    dcd6:	e1 14       	cp	r14, r1
    dcd8:	f1 04       	cpc	r15, r1
    dcda:	51 f0       	breq	.+20     	; 0xdcf0 <mmc_init+0x36>
    {
        printf("START MMC INIT\n");
    dcdc:	8a e0       	ldi	r24, 0x0A	; 10
    dcde:	98 e0       	ldi	r25, 0x08	; 8
    dce0:	a0 e0       	ldi	r26, 0x00	; 0
    dce2:	ed b7       	in	r30, 0x3d	; 61
    dce4:	fe b7       	in	r31, 0x3e	; 62
    dce6:	81 83       	std	Z+1, r24	; 0x01
    dce8:	92 83       	std	Z+2, r25	; 0x02
    dcea:	a3 83       	std	Z+3, r26	; 0x03
    dcec:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    dcf0:	80 91 2a 18 	lds	r24, 0x182A	; 0x80182a <mmc_init_flag>
    dcf4:	90 91 2b 18 	lds	r25, 0x182B	; 0x80182b <mmc_init_flag+0x1>
    dcf8:	89 2b       	or	r24, r25
        mmc_install_timer();
    dcfa:	09 f4       	brne	.+2      	; 0xdcfe <mmc_init+0x44>

	if(!mmc_ins_status())
    dcfc:	2b df       	rcall	.-426    	; 0xdb54 <mmc_install_timer>
    dcfe:	ac df       	rcall	.-168    	; 0xdc58 <mmc_ins_status>
    dd00:	89 2b       	or	r24, r25
    dd02:	61 f4       	brne	.+24     	; 0xdd1c <mmc_init+0x62>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    dd04:	8a ee       	ldi	r24, 0xEA	; 234
    dd06:	97 e0       	ldi	r25, 0x07	; 7
    dd08:	a0 e0       	ldi	r26, 0x00	; 0
    dd0a:	ed b7       	in	r30, 0x3d	; 61
    dd0c:	fe b7       	in	r31, 0x3e	; 62
    dd0e:	81 83       	std	Z+1, r24	; 0x01
    dd10:	92 83       	std	Z+2, r25	; 0x02
    dd12:	a3 83       	std	Z+3, r26	; 0x03
    dd14:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
		return(RES_NOTRDY);	
    dd18:	83 e0       	ldi	r24, 0x03	; 3
    dd1a:	8b c0       	rjmp	.+278    	; 0xde32 <mmc_init+0x178>
	}


    if( verbose)
    dd1c:	e1 14       	cp	r14, r1
    dd1e:	f1 04       	cpc	r15, r1
    dd20:	11 f1       	breq	.+68     	; 0xdd66 <mmc_init+0xac>
    {
		printf("MMC Card Inserted\n");
    dd22:	87 ed       	ldi	r24, 0xD7	; 215
    dd24:	97 e0       	ldi	r25, 0x07	; 7
    dd26:	a0 e0       	ldi	r26, 0x00	; 0
    dd28:	ed b7       	in	r30, 0x3d	; 61
    dd2a:	fe b7       	in	r31, 0x3e	; 62
    dd2c:	81 83       	std	Z+1, r24	; 0x01
    dd2e:	92 83       	std	Z+2, r25	; 0x02
    dd30:	a3 83       	std	Z+3, r26	; 0x03
    dd32:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    dd36:	8b ec       	ldi	r24, 0xCB	; 203
    dd38:	97 e0       	ldi	r25, 0x07	; 7
    dd3a:	a0 e0       	ldi	r26, 0x00	; 0
    dd3c:	ed b7       	in	r30, 0x3d	; 61
    dd3e:	fe b7       	in	r31, 0x3e	; 62
    dd40:	81 83       	std	Z+1, r24	; 0x01
    dd42:	92 83       	std	Z+2, r25	; 0x02
    dd44:	a3 83       	std	Z+3, r26	; 0x03
    dd46:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    dd4a:	85 eb       	ldi	r24, 0xB5	; 181
    dd4c:	91 e0       	ldi	r25, 0x01	; 1
    dd4e:	ed b7       	in	r30, 0x3d	; 61
    dd50:	fe b7       	in	r31, 0x3e	; 62
    dd52:	95 83       	std	Z+5, r25	; 0x05
    dd54:	84 83       	std	Z+4, r24	; 0x04
    dd56:	8a eb       	ldi	r24, 0xBA	; 186
    dd58:	97 e0       	ldi	r25, 0x07	; 7
    dd5a:	a0 e0       	ldi	r26, 0x00	; 0
    dd5c:	81 83       	std	Z+1, r24	; 0x01
    dd5e:	92 83       	std	Z+2, r25	; 0x02
    dd60:	a3 83       	std	Z+3, r26	; 0x03
    dd62:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    dd66:	80 e0       	ldi	r24, 0x00	; 0
    dd68:	1d da       	rcall	.-3014   	; 0xd1a4 <disk_initialize>
    dd6a:	08 2f       	mov	r16, r24
    dd6c:	10 e0       	ldi	r17, 0x00	; 0

    if( rc != RES_OK  )
    dd6e:	01 15       	cp	r16, r1
    dd70:	11 05       	cpc	r17, r1
        put_rc(rc);
    dd72:	19 f0       	breq	.+6      	; 0xdd7a <mmc_init+0xc0>
    dd74:	c8 01       	movw	r24, r16
    dd76:	e4 d0       	rcall	.+456    	; 0xdf40 <put_rc>
    dd78:	0e c0       	rjmp	.+28     	; 0xdd96 <mmc_init+0xdc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    dd7a:	40 e0       	ldi	r20, 0x00	; 0
    dd7c:	66 ea       	ldi	r22, 0xA6	; 166
    dd7e:	78 e0       	ldi	r23, 0x08	; 8
    dd80:	83 e8       	ldi	r24, 0x83	; 131
    dd82:	9a e1       	ldi	r25, 0x1A	; 26
    dd84:	0e 94 8a 58 	call	0xb114	; 0xb114 <f_mount>
    dd88:	8c 01       	movw	r16, r24

    if( rc != RES_OK || verbose)
    dd8a:	89 2b       	or	r24, r25
    dd8c:	21 f4       	brne	.+8      	; 0xdd96 <mmc_init+0xdc>
    dd8e:	e1 14       	cp	r14, r1
    dd90:	f1 04       	cpc	r15, r1
    dd92:	09 f4       	brne	.+2      	; 0xdd96 <mmc_init+0xdc>
        put_rc( rc );
    dd94:	40 c0       	rjmp	.+128    	; 0xde16 <mmc_init+0x15c>
    dd96:	c8 01       	movw	r24, r16
    dd98:	d3 d0       	rcall	.+422    	; 0xdf40 <put_rc>

    if (verbose )
    dd9a:	e1 14       	cp	r14, r1
    dd9c:	f1 04       	cpc	r15, r1
    dd9e:	d9 f1       	breq	.+118    	; 0xde16 <mmc_init+0x15c>
    {
        DWORD blksize = 0;
    dda0:	18 86       	std	Y+8, r1	; 0x08
    dda2:	19 86       	std	Y+9, r1	; 0x09
    dda4:	1a 86       	std	Y+10, r1	; 0x0a
    dda6:	1b 86       	std	Y+11, r1	; 0x0b
        if(rc == RES_OK)
    dda8:	01 15       	cp	r16, r1
    ddaa:	11 05       	cpc	r17, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    ddac:	51 f5       	brne	.+84     	; 0xde02 <mmc_init+0x148>
    ddae:	ae 01       	movw	r20, r28
    ddb0:	48 5f       	subi	r20, 0xF8	; 248
    ddb2:	5f 4f       	sbci	r21, 0xFF	; 255
    ddb4:	63 e0       	ldi	r22, 0x03	; 3
    ddb6:	80 e0       	ldi	r24, 0x00	; 0
    ddb8:	1b da       	rcall	.-3018   	; 0xd1f0 <disk_ioctl>
            if( rc != RES_OK)
    ddba:	8c 01       	movw	r16, r24
    ddbc:	00 97       	sbiw	r24, 0x00	; 0
            {
                put_rc( rc );
    ddbe:	61 f0       	breq	.+24     	; 0xddd8 <mmc_init+0x11e>
    ddc0:	bf d0       	rcall	.+382    	; 0xdf40 <put_rc>
                printf("MMC Block Size - read failed\n");
    ddc2:	8c e9       	ldi	r24, 0x9C	; 156
    ddc4:	97 e0       	ldi	r25, 0x07	; 7
    ddc6:	a0 e0       	ldi	r26, 0x00	; 0
    ddc8:	ed b7       	in	r30, 0x3d	; 61
    ddca:	fe b7       	in	r31, 0x3e	; 62
    ddcc:	81 83       	std	Z+1, r24	; 0x01
    ddce:	92 83       	std	Z+2, r25	; 0x02
    ddd0:	a3 83       	std	Z+3, r26	; 0x03
    ddd2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    ddd6:	15 c0       	rjmp	.+42     	; 0xde02 <mmc_init+0x148>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    ddd8:	88 85       	ldd	r24, Y+8	; 0x08
    ddda:	99 85       	ldd	r25, Y+9	; 0x09
    dddc:	aa 85       	ldd	r26, Y+10	; 0x0a
    ddde:	bb 85       	ldd	r27, Y+11	; 0x0b
    dde0:	ed b7       	in	r30, 0x3d	; 61
    dde2:	fe b7       	in	r31, 0x3e	; 62
    dde4:	84 83       	std	Z+4, r24	; 0x04
    dde6:	95 83       	std	Z+5, r25	; 0x05
    dde8:	a6 83       	std	Z+6, r26	; 0x06
    ddea:	b7 83       	std	Z+7, r27	; 0x07
    ddec:	87 e8       	ldi	r24, 0x87	; 135
    ddee:	97 e0       	ldi	r25, 0x07	; 7
    ddf0:	a0 e0       	ldi	r26, 0x00	; 0
    ddf2:	81 83       	std	Z+1, r24	; 0x01
    ddf4:	92 83       	std	Z+2, r25	; 0x02
    ddf6:	a3 83       	std	Z+3, r26	; 0x03
    ddf8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    ddfc:	86 ea       	ldi	r24, 0xA6	; 166
    ddfe:	98 e0       	ldi	r25, 0x08	; 8
    de00:	33 d1       	rcall	.+614    	; 0xe068 <fatfs_status>
            }
        }
        printf("END MMC INIT\n");
    de02:	89 e7       	ldi	r24, 0x79	; 121
    de04:	97 e0       	ldi	r25, 0x07	; 7
    de06:	a0 e0       	ldi	r26, 0x00	; 0
    de08:	ed b7       	in	r30, 0x3d	; 61
    de0a:	fe b7       	in	r31, 0x3e	; 62
    de0c:	81 83       	std	Z+1, r24	; 0x01
    de0e:	92 83       	std	Z+2, r25	; 0x02
    de10:	a3 83       	std	Z+3, r26	; 0x03
    de12:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    }
    mmc_init_flag = 1;
    de16:	81 e0       	ldi	r24, 0x01	; 1
    de18:	90 e0       	ldi	r25, 0x00	; 0
    de1a:	90 93 2b 18 	sts	0x182B, r25	; 0x80182b <mmc_init_flag+0x1>
    de1e:	80 93 2a 18 	sts	0x182A, r24	; 0x80182a <mmc_init_flag>

	if(rc != RES_OK)
    de22:	01 15       	cp	r16, r1
    de24:	11 05       	cpc	r17, r1
    de26:	21 f0       	breq	.+8      	; 0xde30 <mmc_init+0x176>
		set_error(1);
    de28:	0e 94 08 25 	call	0x4a10	; 0x4a10 <set_error>
    de2c:	c8 01       	movw	r24, r16
    de2e:	02 c0       	rjmp	.+4      	; 0xde34 <mmc_init+0x17a>
    de30:	80 e0       	ldi	r24, 0x00	; 0
    de32:	90 e0       	ldi	r25, 0x00	; 0

    return( rc ) ;
}
    de34:	2b 96       	adiw	r28, 0x0b	; 11
    de36:	e6 e0       	ldi	r30, 0x06	; 6
    de38:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

0000de3c <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    de3c:	80 e0       	ldi	r24, 0x00	; 0
    de3e:	90 e0       	ldi	r25, 0x00	; 0
    de40:	08 95       	ret

0000de42 <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    de42:	0f 93       	push	r16
    de44:	1f 93       	push	r17
    de46:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    de48:	46 81       	ldd	r20, Z+6	; 0x06
    de4a:	57 81       	ldd	r21, Z+7	; 0x07
    de4c:	05 2e       	mov	r0, r21
    de4e:	00 0c       	add	r0, r0
    de50:	66 0b       	sbc	r22, r22
    de52:	77 0b       	sbc	r23, r23
    de54:	ba 01       	movw	r22, r20
    de56:	55 27       	eor	r21, r21
    de58:	44 27       	eor	r20, r20
    de5a:	84 81       	ldd	r24, Z+4	; 0x04
    de5c:	95 81       	ldd	r25, Z+5	; 0x05
    de5e:	09 2e       	mov	r0, r25
    de60:	00 0c       	add	r0, r0
    de62:	aa 0b       	sbc	r26, r26
    de64:	bb 0b       	sbc	r27, r27
    de66:	2b e0       	ldi	r18, 0x0B	; 11
    de68:	88 0f       	add	r24, r24
    de6a:	99 1f       	adc	r25, r25
    de6c:	aa 1f       	adc	r26, r26
    de6e:	bb 1f       	adc	r27, r27
    de70:	2a 95       	dec	r18
    de72:	d1 f7       	brne	.-12     	; 0xde68 <tm_to_fat+0x26>
    de74:	48 2b       	or	r20, r24
    de76:	59 2b       	or	r21, r25
    de78:	6a 2b       	or	r22, r26
    de7a:	7b 2b       	or	r23, r27
    de7c:	82 81       	ldd	r24, Z+2	; 0x02
    de7e:	93 81       	ldd	r25, Z+3	; 0x03
    de80:	09 2e       	mov	r0, r25
    de82:	00 0c       	add	r0, r0
    de84:	aa 0b       	sbc	r26, r26
    de86:	bb 0b       	sbc	r27, r27
    de88:	35 e0       	ldi	r19, 0x05	; 5
    de8a:	88 0f       	add	r24, r24
    de8c:	99 1f       	adc	r25, r25
    de8e:	aa 1f       	adc	r26, r26
    de90:	bb 1f       	adc	r27, r27
    de92:	3a 95       	dec	r19
    de94:	d1 f7       	brne	.-12     	; 0xde8a <tm_to_fat+0x48>
    de96:	48 2b       	or	r20, r24
    de98:	59 2b       	or	r21, r25
    de9a:	6a 2b       	or	r22, r26
    de9c:	7b 2b       	or	r23, r27
    de9e:	80 81       	ld	r24, Z
    dea0:	91 81       	ldd	r25, Z+1	; 0x01
    dea2:	09 2e       	mov	r0, r25
    dea4:	00 0c       	add	r0, r0
    dea6:	aa 0b       	sbc	r26, r26
    dea8:	bb 0b       	sbc	r27, r27
    deaa:	b6 95       	lsr	r27
    deac:	a7 95       	ror	r26
    deae:	97 95       	ror	r25
    deb0:	87 95       	ror	r24
    deb2:	84 2b       	or	r24, r20
    deb4:	95 2b       	or	r25, r21
    deb6:	a6 2b       	or	r26, r22
    deb8:	b7 2b       	or	r27, r23
    deba:	02 85       	ldd	r16, Z+10	; 0x0a
    debc:	13 85       	ldd	r17, Z+11	; 0x0b
    debe:	00 55       	subi	r16, 0x50	; 80
    dec0:	11 09       	sbc	r17, r1
    dec2:	01 2e       	mov	r0, r17
    dec4:	00 0c       	add	r0, r0
    dec6:	22 0b       	sbc	r18, r18
    dec8:	33 0b       	sbc	r19, r19
    deca:	49 e1       	ldi	r20, 0x19	; 25
    decc:	00 0f       	add	r16, r16
    dece:	11 1f       	adc	r17, r17
    ded0:	22 1f       	adc	r18, r18
    ded2:	33 1f       	adc	r19, r19
    ded4:	4a 95       	dec	r20
    ded6:	d1 f7       	brne	.-12     	; 0xdecc <tm_to_fat+0x8a>
    ded8:	ac 01       	movw	r20, r24
    deda:	bd 01       	movw	r22, r26
    dedc:	40 2b       	or	r20, r16
    dede:	51 2b       	or	r21, r17
    dee0:	62 2b       	or	r22, r18
    dee2:	73 2b       	or	r23, r19
    dee4:	80 85       	ldd	r24, Z+8	; 0x08
    dee6:	91 85       	ldd	r25, Z+9	; 0x09
    dee8:	09 2e       	mov	r0, r25
    deea:	00 0c       	add	r0, r0
    deec:	aa 0b       	sbc	r26, r26
    deee:	bb 0b       	sbc	r27, r27
    def0:	01 96       	adiw	r24, 0x01	; 1
    def2:	a1 1d       	adc	r26, r1
    def4:	b1 1d       	adc	r27, r1
    def6:	e5 e1       	ldi	r30, 0x15	; 21
    def8:	88 0f       	add	r24, r24
    defa:	99 1f       	adc	r25, r25
    defc:	aa 1f       	adc	r26, r26
    defe:	bb 1f       	adc	r27, r27
    df00:	ea 95       	dec	r30
    df02:	d1 f7       	brne	.-12     	; 0xdef8 <tm_to_fat+0xb6>
    df04:	8a 01       	movw	r16, r20
    df06:	9b 01       	movw	r18, r22
    df08:	08 2b       	or	r16, r24
    df0a:	19 2b       	or	r17, r25
    df0c:	2a 2b       	or	r18, r26
    df0e:	3b 2b       	or	r19, r27
    df10:	c9 01       	movw	r24, r18
    df12:	b8 01       	movw	r22, r16
}
    df14:	1f 91       	pop	r17
    df16:	0f 91       	pop	r16
    df18:	08 95       	ret

0000df1a <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    df1a:	a4 e0       	ldi	r26, 0x04	; 4
    df1c:	b0 e0       	ldi	r27, 0x00	; 0
    df1e:	e3 e9       	ldi	r30, 0x93	; 147
    df20:	ff e6       	ldi	r31, 0x6F	; 111
    df22:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    df26:	ce 01       	movw	r24, r28
    df28:	01 96       	adiw	r24, 0x01	; 1
    df2a:	0e 94 10 36 	call	0x6c20	; 0x6c20 <time>
    return( tm_to_fat(localtime(&t)));
    df2e:	ce 01       	movw	r24, r28
    df30:	01 96       	adiw	r24, 0x01	; 1
    df32:	0e 94 a9 36 	call	0x6d52	; 0x6d52 <localtime>
    df36:	85 df       	rcall	.-246    	; 0xde42 <tm_to_fat>
}
    df38:	24 96       	adiw	r28, 0x04	; 4
    df3a:	e2 e0       	ldi	r30, 0x02	; 2
    df3c:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

0000df40 <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    df40:	00 d0       	rcall	.+0      	; 0xdf42 <put_rc+0x2>
    df42:	00 d0       	rcall	.+0      	; 0xdf44 <put_rc+0x4>
    df44:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    df46:	ed b7       	in	r30, 0x3d	; 61
    df48:	fe b7       	in	r31, 0x3e	; 62
    df4a:	95 83       	std	Z+5, r25	; 0x05
    df4c:	84 83       	std	Z+4, r24	; 0x04
    df4e:	87 e3       	ldi	r24, 0x37	; 55
    df50:	9a e0       	ldi	r25, 0x0A	; 10
    df52:	a0 e0       	ldi	r26, 0x00	; 0
    df54:	81 83       	std	Z+1, r24	; 0x01
    df56:	92 83       	std	Z+2, r25	; 0x02
    df58:	a3 83       	std	Z+3, r26	; 0x03
    df5a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
}
    df5e:	0f 90       	pop	r0
    df60:	0f 90       	pop	r0
    df62:	0f 90       	pop	r0
    df64:	0f 90       	pop	r0
    df66:	0f 90       	pop	r0
    df68:	08 95       	ret

0000df6a <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    df6a:	a4 e4       	ldi	r26, 0x44	; 68
    df6c:	b1 e0       	ldi	r27, 0x01	; 1
    df6e:	eb eb       	ldi	r30, 0xBB	; 187
    df70:	ff e6       	ldi	r31, 0x6F	; 111
    df72:	0c 94 67 e3 	jmp	0x1c6ce	; 0x1c6ce <__prologue_saves__+0x16>
    df76:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    df78:	bc 01       	movw	r22, r24
    df7a:	ce 01       	movw	r24, r28
    df7c:	89 5e       	subi	r24, 0xE9	; 233
    df7e:	9e 4f       	sbci	r25, 0xFE	; 254
    df80:	0e 94 46 62 	call	0xc48c	; 0xc48c <f_opendir>
    if (fr == FR_OK)
    df84:	00 97       	sbiw	r24, 0x00	; 0
    df86:	09 f0       	breq	.+2      	; 0xdf8a <fatfs_scan_files+0x20>
    df88:	5b c0       	rjmp	.+182    	; 0xe040 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    df8a:	8f e2       	ldi	r24, 0x2F	; 47
    df8c:	d8 2e       	mov	r13, r24
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    df8e:	be 01       	movw	r22, r28
    df90:	6f 5f       	subi	r22, 0xFF	; 255
    df92:	7f 4f       	sbci	r23, 0xFF	; 255
    df94:	ce 01       	movw	r24, r28
    df96:	89 5e       	subi	r24, 0xE9	; 233
    df98:	9e 4f       	sbci	r25, 0xFE	; 254
    df9a:	0e 94 cc 62 	call	0xc598	; 0xc598 <f_readdir>
    df9e:	00 97       	sbiw	r24, 0x00	; 0
    dfa0:	09 f0       	breq	.+2      	; 0xdfa4 <fatfs_scan_files+0x3a>
    dfa2:	4e c0       	rjmp	.+156    	; 0xe040 <fatfs_scan_files+0xd6>
    dfa4:	2f 89       	ldd	r18, Y+23	; 0x17
    dfa6:	22 23       	and	r18, r18
    dfa8:	09 f4       	brne	.+2      	; 0xdfac <fatfs_scan_files+0x42>
    dfaa:	4a c0       	rjmp	.+148    	; 0xe040 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    dfac:	89 85       	ldd	r24, Y+9	; 0x09
    dfae:	84 ff       	sbrs	r24, 4
    dfb0:	25 c0       	rjmp	.+74     	; 0xdffc <fatfs_scan_files+0x92>
            {
                AccDirs++;
    dfb2:	80 91 bc 1c 	lds	r24, 0x1CBC	; 0x801cbc <AccDirs>
    dfb6:	90 91 bd 1c 	lds	r25, 0x1CBD	; 0x801cbd <AccDirs+0x1>
    dfba:	01 96       	adiw	r24, 0x01	; 1
    dfbc:	90 93 bd 1c 	sts	0x1CBD, r25	; 0x801cbd <AccDirs+0x1>
    dfc0:	80 93 bc 1c 	sts	0x1CBC, r24	; 0x801cbc <AccDirs>
                i = strlen(path);
    dfc4:	f8 01       	movw	r30, r16
    dfc6:	01 90       	ld	r0, Z+
    dfc8:	00 20       	and	r0, r0
    dfca:	e9 f7       	brne	.-6      	; 0xdfc6 <fatfs_scan_files+0x5c>
    dfcc:	31 97       	sbiw	r30, 0x01	; 1
    dfce:	e0 1b       	sub	r30, r16
    dfd0:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    dfd2:	78 01       	movw	r14, r16
    dfd4:	ee 0e       	add	r14, r30
    dfd6:	ff 1e       	adc	r15, r31
    dfd8:	d7 01       	movw	r26, r14
    dfda:	dc 92       	st	X, r13
    dfdc:	cf 01       	movw	r24, r30
    dfde:	01 96       	adiw	r24, 0x01	; 1
    dfe0:	be 01       	movw	r22, r28
    dfe2:	69 5e       	subi	r22, 0xE9	; 233
    dfe4:	7f 4f       	sbci	r23, 0xFF	; 255
    dfe6:	80 0f       	add	r24, r16
    dfe8:	91 1f       	adc	r25, r17
    dfea:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <strcpy>
                fr = fatfs_scan_files(path);
    dfee:	c8 01       	movw	r24, r16
    dff0:	bc df       	rcall	.-136    	; 0xdf6a <fatfs_scan_files>
                path[i] = 0;
    dff2:	f7 01       	movw	r30, r14
    dff4:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    dff6:	00 97       	sbiw	r24, 0x00	; 0
    dff8:	51 f2       	breq	.-108    	; 0xdf8e <fatfs_scan_files+0x24>
    dffa:	22 c0       	rjmp	.+68     	; 0xe040 <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    dffc:	80 91 be 1c 	lds	r24, 0x1CBE	; 0x801cbe <AccFiles>
    e000:	90 91 bf 1c 	lds	r25, 0x1CBF	; 0x801cbf <AccFiles+0x1>
    e004:	01 96       	adiw	r24, 0x01	; 1
    e006:	90 93 bf 1c 	sts	0x1CBF, r25	; 0x801cbf <AccFiles+0x1>
    e00a:	80 93 be 1c 	sts	0x1CBE, r24	; 0x801cbe <AccFiles>
                AccSize += info.fsize;
    e00e:	40 91 b8 1c 	lds	r20, 0x1CB8	; 0x801cb8 <AccSize>
    e012:	50 91 b9 1c 	lds	r21, 0x1CB9	; 0x801cb9 <AccSize+0x1>
    e016:	60 91 ba 1c 	lds	r22, 0x1CBA	; 0x801cba <AccSize+0x2>
    e01a:	70 91 bb 1c 	lds	r23, 0x1CBB	; 0x801cbb <AccSize+0x3>
    e01e:	89 81       	ldd	r24, Y+1	; 0x01
    e020:	9a 81       	ldd	r25, Y+2	; 0x02
    e022:	ab 81       	ldd	r26, Y+3	; 0x03
    e024:	bc 81       	ldd	r27, Y+4	; 0x04
    e026:	84 0f       	add	r24, r20
    e028:	95 1f       	adc	r25, r21
    e02a:	a6 1f       	adc	r26, r22
    e02c:	b7 1f       	adc	r27, r23
    e02e:	80 93 b8 1c 	sts	0x1CB8, r24	; 0x801cb8 <AccSize>
    e032:	90 93 b9 1c 	sts	0x1CB9, r25	; 0x801cb9 <AccSize+0x1>
    e036:	a0 93 ba 1c 	sts	0x1CBA, r26	; 0x801cba <AccSize+0x2>
    e03a:	b0 93 bb 1c 	sts	0x1CBB, r27	; 0x801cbb <AccSize+0x3>
    e03e:	a7 cf       	rjmp	.-178    	; 0xdf8e <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e040:	cc 5b       	subi	r28, 0xBC	; 188
    e042:	de 4f       	sbci	r29, 0xFE	; 254
    e044:	e7 e0       	ldi	r30, 0x07	; 7
    e046:	0c 94 83 e3 	jmp	0x1c706	; 0x1c706 <__epilogue_restores__+0x16>

0000e04a <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e04a:	01 97       	sbiw	r24, 0x01	; 1
    e04c:	84 30       	cpi	r24, 0x04	; 4
    e04e:	91 05       	cpc	r25, r1
    e050:	40 f4       	brcc	.+16     	; 0xe062 <fatfs_fstype+0x18>
    e052:	88 0f       	add	r24, r24
    e054:	99 1f       	adc	r25, r25
    e056:	fc 01       	movw	r30, r24
    e058:	e6 53       	subi	r30, 0x36	; 54
    e05a:	f7 4f       	sbci	r31, 0xF7	; 247
    e05c:	80 81       	ld	r24, Z
    e05e:	91 81       	ldd	r25, Z+1	; 0x01
    e060:	08 95       	ret
    char *ptr;
    switch(type)
    e062:	88 ea       	ldi	r24, 0xA8	; 168
    e064:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e066:	08 95       	ret

0000e068 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    e068:	a7 e3       	ldi	r26, 0x37	; 55
    e06a:	b0 e0       	ldi	r27, 0x00	; 0
    e06c:	ea e3       	ldi	r30, 0x3A	; 58
    e06e:	f0 e7       	ldi	r31, 0x70	; 112
    e070:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
    e074:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e076:	fc 01       	movw	r30, r24
    e078:	21 91       	ld	r18, Z+
    e07a:	cf 01       	movw	r24, r30
    e07c:	20 32       	cpi	r18, 0x20	; 32
    e07e:	d1 f3       	breq	.-12     	; 0xe074 <fatfs_status+0xc>
    e080:	29 30       	cpi	r18, 0x09	; 9
    e082:	c1 f3       	breq	.-16     	; 0xe074 <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    e084:	ed b7       	in	r30, 0x3d	; 61
    e086:	fe b7       	in	r31, 0x3e	; 62
    e088:	e4 82       	std	Z+4, r14	; 0x04
    e08a:	f5 82       	std	Z+5, r15	; 0x05
    e08c:	86 e2       	ldi	r24, 0x26	; 38
    e08e:	9a e0       	ldi	r25, 0x0A	; 10
    e090:	a0 e0       	ldi	r26, 0x00	; 0
    e092:	81 83       	std	Z+1, r24	; 0x01
    e094:	92 83       	std	Z+2, r25	; 0x02
    e096:	a3 83       	std	Z+3, r26	; 0x03
    e098:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e09c:	ae 01       	movw	r20, r28
    e09e:	4a 5c       	subi	r20, 0xCA	; 202
    e0a0:	5f 4f       	sbci	r21, 0xFF	; 255
    e0a2:	be 01       	movw	r22, r28
    e0a4:	6e 5c       	subi	r22, 0xCE	; 206
    e0a6:	7f 4f       	sbci	r23, 0xFF	; 255
    e0a8:	c7 01       	movw	r24, r14
    e0aa:	0e 94 4e 63 	call	0xc69c	; 0xc69c <f_getfree>
    if (res)
    e0ae:	00 97       	sbiw	r24, 0x00	; 0
    e0b0:	09 f0       	breq	.+2      	; 0xe0b4 <fatfs_status+0x4c>
    e0b2:	f8 c0       	rjmp	.+496    	; 0xe2a4 <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e0b4:	ee a9       	ldd	r30, Y+54	; 0x36
    e0b6:	ff a9       	ldd	r31, Y+55	; 0x37
    e0b8:	80 81       	ld	r24, Z
    e0ba:	90 e0       	ldi	r25, 0x00	; 0
    e0bc:	c6 df       	rcall	.-116    	; 0xe04a <fatfs_fstype>
    e0be:	ed b7       	in	r30, 0x3d	; 61
    e0c0:	fe b7       	in	r31, 0x3e	; 62
    e0c2:	95 83       	std	Z+5, r25	; 0x05
    e0c4:	84 83       	std	Z+4, r24	; 0x04
    e0c6:	88 e0       	ldi	r24, 0x08	; 8
    e0c8:	9a e0       	ldi	r25, 0x0A	; 10
    e0ca:	a0 e0       	ldi	r26, 0x00	; 0
    e0cc:	81 83       	std	Z+1, r24	; 0x01
    e0ce:	92 83       	std	Z+2, r25	; 0x02
    e0d0:	a3 83       	std	Z+3, r26	; 0x03
    e0d2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e0d6:	ee a9       	ldd	r30, Y+54	; 0x36
    e0d8:	ff a9       	ldd	r31, Y+55	; 0x37
    e0da:	81 85       	ldd	r24, Z+9	; 0x09
    e0dc:	92 85       	ldd	r25, Z+10	; 0x0a
    e0de:	a0 e0       	ldi	r26, 0x00	; 0
    e0e0:	b0 e0       	ldi	r27, 0x00	; 0
    e0e2:	39 e0       	ldi	r19, 0x09	; 9
    e0e4:	88 0f       	add	r24, r24
    e0e6:	99 1f       	adc	r25, r25
    e0e8:	aa 1f       	adc	r26, r26
    e0ea:	bb 1f       	adc	r27, r27
    e0ec:	3a 95       	dec	r19
    e0ee:	d1 f7       	brne	.-12     	; 0xe0e4 <fatfs_status+0x7c>
    e0f0:	ed b7       	in	r30, 0x3d	; 61
    e0f2:	fe b7       	in	r31, 0x3e	; 62
    e0f4:	84 83       	std	Z+4, r24	; 0x04
    e0f6:	95 83       	std	Z+5, r25	; 0x05
    e0f8:	a6 83       	std	Z+6, r26	; 0x06
    e0fa:	b7 83       	std	Z+7, r27	; 0x07
    e0fc:	89 ee       	ldi	r24, 0xE9	; 233
    e0fe:	99 e0       	ldi	r25, 0x09	; 9
    e100:	a0 e0       	ldi	r26, 0x00	; 0
    e102:	81 83       	std	Z+1, r24	; 0x01
    e104:	92 83       	std	Z+2, r25	; 0x02
    e106:	a3 83       	std	Z+3, r26	; 0x03
    e108:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e10c:	ee a9       	ldd	r30, Y+54	; 0x36
    e10e:	ff a9       	ldd	r31, Y+55	; 0x37
    e110:	82 81       	ldd	r24, Z+2	; 0x02
    e112:	90 e0       	ldi	r25, 0x00	; 0
    e114:	ed b7       	in	r30, 0x3d	; 61
    e116:	fe b7       	in	r31, 0x3e	; 62
    e118:	95 83       	std	Z+5, r25	; 0x05
    e11a:	84 83       	std	Z+4, r24	; 0x04
    e11c:	8b ec       	ldi	r24, 0xCB	; 203
    e11e:	99 e0       	ldi	r25, 0x09	; 9
    e120:	a0 e0       	ldi	r26, 0x00	; 0
    e122:	81 83       	std	Z+1, r24	; 0x01
    e124:	92 83       	std	Z+2, r25	; 0x02
    e126:	a3 83       	std	Z+3, r26	; 0x03
    e128:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e12c:	ee a9       	ldd	r30, Y+54	; 0x36
    e12e:	ff a9       	ldd	r31, Y+55	; 0x37
    e130:	87 81       	ldd	r24, Z+7	; 0x07
    e132:	90 85       	ldd	r25, Z+8	; 0x08
    e134:	ed b7       	in	r30, 0x3d	; 61
    e136:	fe b7       	in	r31, 0x3e	; 62
    e138:	95 83       	std	Z+5, r25	; 0x05
    e13a:	84 83       	std	Z+4, r24	; 0x04
    e13c:	8d ea       	ldi	r24, 0xAD	; 173
    e13e:	99 e0       	ldi	r25, 0x09	; 9
    e140:	a0 e0       	ldi	r26, 0x00	; 0
    e142:	81 83       	std	Z+1, r24	; 0x01
    e144:	92 83       	std	Z+2, r25	; 0x02
    e146:	a3 83       	std	Z+3, r26	; 0x03
    e148:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e14c:	ee a9       	ldd	r30, Y+54	; 0x36
    e14e:	ff a9       	ldd	r31, Y+55	; 0x37
    e150:	85 8d       	ldd	r24, Z+29	; 0x1d
    e152:	96 8d       	ldd	r25, Z+30	; 0x1e
    e154:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e156:	b0 a1       	ldd	r27, Z+32	; 0x20
    e158:	ed b7       	in	r30, 0x3d	; 61
    e15a:	fe b7       	in	r31, 0x3e	; 62
    e15c:	84 83       	std	Z+4, r24	; 0x04
    e15e:	95 83       	std	Z+5, r25	; 0x05
    e160:	a6 83       	std	Z+6, r26	; 0x06
    e162:	b7 83       	std	Z+7, r27	; 0x07
    e164:	8e e8       	ldi	r24, 0x8E	; 142
    e166:	99 e0       	ldi	r25, 0x09	; 9
    e168:	a0 e0       	ldi	r26, 0x00	; 0
    e16a:	81 83       	std	Z+1, r24	; 0x01
    e16c:	92 83       	std	Z+2, r25	; 0x02
    e16e:	a3 83       	std	Z+3, r26	; 0x03
    e170:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e174:	ee a9       	ldd	r30, Y+54	; 0x36
    e176:	ff a9       	ldd	r31, Y+55	; 0x37
    e178:	81 8d       	ldd	r24, Z+25	; 0x19
    e17a:	92 8d       	ldd	r25, Z+26	; 0x1a
    e17c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e17e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e180:	02 97       	sbiw	r24, 0x02	; 2
    e182:	a1 09       	sbc	r26, r1
    e184:	b1 09       	sbc	r27, r1
    e186:	ed b7       	in	r30, 0x3d	; 61
    e188:	fe b7       	in	r31, 0x3e	; 62
    e18a:	84 83       	std	Z+4, r24	; 0x04
    e18c:	95 83       	std	Z+5, r25	; 0x05
    e18e:	a6 83       	std	Z+6, r26	; 0x06
    e190:	b7 83       	std	Z+7, r27	; 0x07
    e192:	8f e6       	ldi	r24, 0x6F	; 111
    e194:	99 e0       	ldi	r25, 0x09	; 9
    e196:	a0 e0       	ldi	r26, 0x00	; 0
    e198:	81 83       	std	Z+1, r24	; 0x01
    e19a:	92 83       	std	Z+2, r25	; 0x02
    e19c:	a3 83       	std	Z+3, r26	; 0x03
    e19e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e1a2:	ee a9       	ldd	r30, Y+54	; 0x36
    e1a4:	ff a9       	ldd	r31, Y+55	; 0x37
    e1a6:	85 a1       	ldd	r24, Z+37	; 0x25
    e1a8:	96 a1       	ldd	r25, Z+38	; 0x26
    e1aa:	a7 a1       	ldd	r26, Z+39	; 0x27
    e1ac:	b0 a5       	ldd	r27, Z+40	; 0x28
    e1ae:	ed b7       	in	r30, 0x3d	; 61
    e1b0:	fe b7       	in	r31, 0x3e	; 62
    e1b2:	84 83       	std	Z+4, r24	; 0x04
    e1b4:	95 83       	std	Z+5, r25	; 0x05
    e1b6:	a6 83       	std	Z+6, r26	; 0x06
    e1b8:	b7 83       	std	Z+7, r27	; 0x07
    e1ba:	80 e5       	ldi	r24, 0x50	; 80
    e1bc:	99 e0       	ldi	r25, 0x09	; 9
    e1be:	a0 e0       	ldi	r26, 0x00	; 0
    e1c0:	81 83       	std	Z+1, r24	; 0x01
    e1c2:	92 83       	std	Z+2, r25	; 0x02
    e1c4:	a3 83       	std	Z+3, r26	; 0x03
    e1c6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e1ca:	ee a9       	ldd	r30, Y+54	; 0x36
    e1cc:	ff a9       	ldd	r31, Y+55	; 0x37
    e1ce:	81 a5       	ldd	r24, Z+41	; 0x29
    e1d0:	92 a5       	ldd	r25, Z+42	; 0x2a
    e1d2:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e1d4:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e1d6:	ed b7       	in	r30, 0x3d	; 61
    e1d8:	fe b7       	in	r31, 0x3e	; 62
    e1da:	84 83       	std	Z+4, r24	; 0x04
    e1dc:	95 83       	std	Z+5, r25	; 0x05
    e1de:	a6 83       	std	Z+6, r26	; 0x06
    e1e0:	b7 83       	std	Z+7, r27	; 0x07
    e1e2:	81 e3       	ldi	r24, 0x31	; 49
    e1e4:	99 e0       	ldi	r25, 0x09	; 9
    e1e6:	a0 e0       	ldi	r26, 0x00	; 0
    e1e8:	81 83       	std	Z+1, r24	; 0x01
    e1ea:	92 83       	std	Z+2, r25	; 0x02
    e1ec:	a3 83       	std	Z+3, r26	; 0x03
    e1ee:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e1f2:	ee a9       	ldd	r30, Y+54	; 0x36
    e1f4:	ff a9       	ldd	r31, Y+55	; 0x37
    e1f6:	85 a5       	ldd	r24, Z+45	; 0x2d
    e1f8:	96 a5       	ldd	r25, Z+46	; 0x2e
    e1fa:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e1fc:	b0 a9       	ldd	r27, Z+48	; 0x30
    e1fe:	ed b7       	in	r30, 0x3d	; 61
    e200:	fe b7       	in	r31, 0x3e	; 62
    e202:	84 83       	std	Z+4, r24	; 0x04
    e204:	95 83       	std	Z+5, r25	; 0x05
    e206:	a6 83       	std	Z+6, r26	; 0x06
    e208:	b7 83       	std	Z+7, r27	; 0x07
    e20a:	82 e1       	ldi	r24, 0x12	; 18
    e20c:	99 e0       	ldi	r25, 0x09	; 9
    e20e:	a0 e0       	ldi	r26, 0x00	; 0
    e210:	81 83       	std	Z+1, r24	; 0x01
    e212:	92 83       	std	Z+2, r25	; 0x02
    e214:	a3 83       	std	Z+3, r26	; 0x03
    e216:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e21a:	ae 01       	movw	r20, r28
    e21c:	42 5d       	subi	r20, 0xD2	; 210
    e21e:	5f 4f       	sbci	r21, 0xFF	; 255
    e220:	be 01       	movw	r22, r28
    e222:	6c 5e       	subi	r22, 0xEC	; 236
    e224:	7f 4f       	sbci	r23, 0xFF	; 255
    e226:	c7 01       	movw	r24, r14
    e228:	0e 94 80 67 	call	0xcf00	; 0xcf00 <f_getlabel>
    if (res)
    e22c:	00 97       	sbiw	r24, 0x00	; 0
    e22e:	d1 f5       	brne	.+116    	; 0xe2a4 <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e230:	8c 89       	ldd	r24, Y+20	; 0x14
    e232:	81 11       	cpse	r24, r1
    e234:	03 c0       	rjmp	.+6      	; 0xe23c <fatfs_status+0x1d4>
    e236:	80 eb       	ldi	r24, 0xB0	; 176
    e238:	98 e0       	ldi	r25, 0x08	; 8
    e23a:	02 c0       	rjmp	.+4      	; 0xe240 <fatfs_status+0x1d8>
    e23c:	ce 01       	movw	r24, r28
    e23e:	44 96       	adiw	r24, 0x14	; 20
    e240:	ed b7       	in	r30, 0x3d	; 61
    e242:	fe b7       	in	r31, 0x3e	; 62
    e244:	95 83       	std	Z+5, r25	; 0x05
    e246:	84 83       	std	Z+4, r24	; 0x04
    e248:	84 ef       	ldi	r24, 0xF4	; 244
    e24a:	98 e0       	ldi	r25, 0x08	; 8
    e24c:	a0 e0       	ldi	r26, 0x00	; 0
    e24e:	81 83       	std	Z+1, r24	; 0x01
    e250:	92 83       	std	Z+2, r25	; 0x02
    e252:	a3 83       	std	Z+3, r26	; 0x03
    e254:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e258:	8e a5       	ldd	r24, Y+46	; 0x2e
    e25a:	9f a5       	ldd	r25, Y+47	; 0x2f
    e25c:	a8 a9       	ldd	r26, Y+48	; 0x30
    e25e:	b9 a9       	ldd	r27, Y+49	; 0x31
    e260:	ed b7       	in	r30, 0x3d	; 61
    e262:	fe b7       	in	r31, 0x3e	; 62
    e264:	97 83       	std	Z+7, r25	; 0x07
    e266:	86 83       	std	Z+6, r24	; 0x06
    e268:	b5 83       	std	Z+5, r27	; 0x05
    e26a:	a4 83       	std	Z+4, r26	; 0x04
    e26c:	8f ec       	ldi	r24, 0xCF	; 207
    e26e:	98 e0       	ldi	r25, 0x08	; 8
    e270:	a0 e0       	ldi	r26, 0x00	; 0
    e272:	81 83       	std	Z+1, r24	; 0x01
    e274:	92 83       	std	Z+2, r25	; 0x02
    e276:	a3 83       	std	Z+3, r26	; 0x03
    e278:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e27c:	10 92 bd 1c 	sts	0x1CBD, r1	; 0x801cbd <AccDirs+0x1>
    e280:	10 92 bc 1c 	sts	0x1CBC, r1	; 0x801cbc <AccDirs>
    e284:	10 92 bf 1c 	sts	0x1CBF, r1	; 0x801cbf <AccFiles+0x1>
    e288:	10 92 be 1c 	sts	0x1CBE, r1	; 0x801cbe <AccFiles>
    e28c:	10 92 b8 1c 	sts	0x1CB8, r1	; 0x801cb8 <AccSize>
    e290:	10 92 b9 1c 	sts	0x1CB9, r1	; 0x801cb9 <AccSize+0x1>
    e294:	10 92 ba 1c 	sts	0x1CBA, r1	; 0x801cba <AccSize+0x2>
    e298:	10 92 bb 1c 	sts	0x1CBB, r1	; 0x801cbb <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e29c:	c7 01       	movw	r24, r14
    e29e:	65 de       	rcall	.-822    	; 0xdf6a <fatfs_scan_files>
    if (res)
    e2a0:	00 97       	sbiw	r24, 0x00	; 0
    {
        put_rc(res);
    e2a2:	11 f0       	breq	.+4      	; 0xe2a8 <fatfs_status+0x240>
    e2a4:	4d de       	rcall	.-870    	; 0xdf40 <put_rc>
        return;
    e2a6:	56 c0       	rjmp	.+172    	; 0xe354 <fatfs_status+0x2ec>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e2a8:	0e a9       	ldd	r16, Y+54	; 0x36
    e2aa:	1f a9       	ldd	r17, Y+55	; 0x37
    e2ac:	f8 01       	movw	r30, r16
    e2ae:	c1 84       	ldd	r12, Z+9	; 0x09
    e2b0:	d2 84       	ldd	r13, Z+10	; 0x0a
    e2b2:	e1 2c       	mov	r14, r1
    e2b4:	f1 2c       	mov	r15, r1
    e2b6:	6a a9       	ldd	r22, Y+50	; 0x32
    e2b8:	7b a9       	ldd	r23, Y+51	; 0x33
    e2ba:	8c a9       	ldd	r24, Y+52	; 0x34
    e2bc:	9d a9       	ldd	r25, Y+53	; 0x35
    e2be:	a7 01       	movw	r20, r14
    e2c0:	96 01       	movw	r18, r12
    e2c2:	0e 94 ad e2 	call	0x1c55a	; 0x1c55a <__mulsi3>
    e2c6:	22 e0       	ldi	r18, 0x02	; 2
    e2c8:	30 e0       	ldi	r19, 0x00	; 0
    e2ca:	40 e0       	ldi	r20, 0x00	; 0
    e2cc:	50 e0       	ldi	r21, 0x00	; 0
    e2ce:	0e 94 11 e3 	call	0x1c622	; 0x1c622 <__divmodsi4>
    e2d2:	ed b7       	in	r30, 0x3d	; 61
    e2d4:	fe b7       	in	r31, 0x3e	; 62
    e2d6:	20 8b       	std	Z+16, r18	; 0x10
    e2d8:	31 8b       	std	Z+17, r19	; 0x11
    e2da:	42 8b       	std	Z+18, r20	; 0x12
    e2dc:	53 8b       	std	Z+19, r21	; 0x13
    e2de:	f8 01       	movw	r30, r16
    e2e0:	81 8d       	ldd	r24, Z+25	; 0x19
    e2e2:	92 8d       	ldd	r25, Z+26	; 0x1a
    e2e4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e2e6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e2e8:	9c 01       	movw	r18, r24
    e2ea:	ad 01       	movw	r20, r26
    e2ec:	22 50       	subi	r18, 0x02	; 2
    e2ee:	31 09       	sbc	r19, r1
    e2f0:	41 09       	sbc	r20, r1
    e2f2:	51 09       	sbc	r21, r1
    e2f4:	c7 01       	movw	r24, r14
    e2f6:	b6 01       	movw	r22, r12
    e2f8:	0e 94 ad e2 	call	0x1c55a	; 0x1c55a <__mulsi3>
    e2fc:	dc 01       	movw	r26, r24
    e2fe:	cb 01       	movw	r24, r22
    e300:	b6 95       	lsr	r27
    e302:	a7 95       	ror	r26
    e304:	97 95       	ror	r25
    e306:	87 95       	ror	r24
    e308:	ed b7       	in	r30, 0x3d	; 61
    e30a:	fe b7       	in	r31, 0x3e	; 62
    e30c:	84 87       	std	Z+12, r24	; 0x0c
    e30e:	95 87       	std	Z+13, r25	; 0x0d
    e310:	a6 87       	std	Z+14, r26	; 0x0e
    e312:	b7 87       	std	Z+15, r27	; 0x0f
    e314:	80 91 bc 1c 	lds	r24, 0x1CBC	; 0x801cbc <AccDirs>
    e318:	90 91 bd 1c 	lds	r25, 0x1CBD	; 0x801cbd <AccDirs+0x1>
    e31c:	93 87       	std	Z+11, r25	; 0x0b
    e31e:	82 87       	std	Z+10, r24	; 0x0a
    e320:	80 91 b8 1c 	lds	r24, 0x1CB8	; 0x801cb8 <AccSize>
    e324:	90 91 b9 1c 	lds	r25, 0x1CB9	; 0x801cb9 <AccSize+0x1>
    e328:	a0 91 ba 1c 	lds	r26, 0x1CBA	; 0x801cba <AccSize+0x2>
    e32c:	b0 91 bb 1c 	lds	r27, 0x1CBB	; 0x801cbb <AccSize+0x3>
    e330:	86 83       	std	Z+6, r24	; 0x06
    e332:	97 83       	std	Z+7, r25	; 0x07
    e334:	a0 87       	std	Z+8, r26	; 0x08
    e336:	b1 87       	std	Z+9, r27	; 0x09
    e338:	80 91 be 1c 	lds	r24, 0x1CBE	; 0x801cbe <AccFiles>
    e33c:	90 91 bf 1c 	lds	r25, 0x1CBF	; 0x801cbf <AccFiles+0x1>
    e340:	95 83       	std	Z+5, r25	; 0x05
    e342:	84 83       	std	Z+4, r24	; 0x04
    e344:	82 e8       	ldi	r24, 0x82	; 130
    e346:	98 e0       	ldi	r25, 0x08	; 8
    e348:	a0 e0       	ldi	r26, 0x00	; 0
    e34a:	81 83       	std	Z+1, r24	; 0x01
    e34c:	92 83       	std	Z+2, r25	; 0x02
    e34e:	a3 83       	std	Z+3, r26	; 0x03
    e350:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );

}
    e354:	e7 96       	adiw	r28, 0x37	; 55
    e356:	e8 e0       	ldi	r30, 0x08	; 8
    e358:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

0000e35c <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e35c:	ab e1       	ldi	r26, 0x1B	; 27
    e35e:	b0 e0       	ldi	r27, 0x00	; 0
    e360:	e4 eb       	ldi	r30, 0xB4	; 180
    e362:	f1 e7       	ldi	r31, 0x71	; 113
    e364:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
    e368:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e36a:	fc 01       	movw	r30, r24
    e36c:	86 89       	ldd	r24, Z+22	; 0x16
    e36e:	81 11       	cpse	r24, r1
    e370:	03 c0       	rjmp	.+6      	; 0xe378 <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e372:	87 e6       	ldi	r24, 0x67	; 103
    e374:	98 e0       	ldi	r25, 0x08	; 8
    e376:	69 c0       	rjmp	.+210    	; 0xe44a <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e378:	fd 01       	movw	r30, r26
    e37a:	80 85       	ldd	r24, Z+8	; 0x08
    e37c:	84 fd       	sbrc	r24, 4
    e37e:	02 c0       	rjmp	.+4      	; 0xe384 <fatfs_filinfo_list+0x28>
    e380:	9d e2       	ldi	r25, 0x2D	; 45
    e382:	01 c0       	rjmp	.+2      	; 0xe386 <fatfs_filinfo_list+0x2a>
    e384:	94 e4       	ldi	r25, 0x44	; 68
    e386:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e388:	80 fd       	sbrc	r24, 0
    e38a:	02 c0       	rjmp	.+4      	; 0xe390 <fatfs_filinfo_list+0x34>
    e38c:	9d e2       	ldi	r25, 0x2D	; 45
    e38e:	01 c0       	rjmp	.+2      	; 0xe392 <fatfs_filinfo_list+0x36>
    e390:	92 e5       	ldi	r25, 0x52	; 82
    e392:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e394:	81 fd       	sbrc	r24, 1
    e396:	02 c0       	rjmp	.+4      	; 0xe39c <fatfs_filinfo_list+0x40>
    e398:	9d e2       	ldi	r25, 0x2D	; 45
    e39a:	01 c0       	rjmp	.+2      	; 0xe39e <fatfs_filinfo_list+0x42>
    e39c:	98 e4       	ldi	r25, 0x48	; 72
    e39e:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e3a0:	82 fd       	sbrc	r24, 2
    e3a2:	02 c0       	rjmp	.+4      	; 0xe3a8 <fatfs_filinfo_list+0x4c>
    e3a4:	9d e2       	ldi	r25, 0x2D	; 45
    e3a6:	01 c0       	rjmp	.+2      	; 0xe3aa <fatfs_filinfo_list+0x4e>
    e3a8:	93 e5       	ldi	r25, 0x53	; 83
    e3aa:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e3ac:	85 fd       	sbrc	r24, 5
    e3ae:	02 c0       	rjmp	.+4      	; 0xe3b4 <fatfs_filinfo_list+0x58>
    e3b0:	8d e2       	ldi	r24, 0x2D	; 45
    e3b2:	01 c0       	rjmp	.+2      	; 0xe3b6 <fatfs_filinfo_list+0x5a>
    e3b4:	81 e4       	ldi	r24, 0x41	; 65
    e3b6:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e3b8:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e3ba:	fd 01       	movw	r30, r26
    e3bc:	24 81       	ldd	r18, Z+4	; 0x04
    e3be:	35 81       	ldd	r19, Z+5	; 0x05
    e3c0:	46 81       	ldd	r20, Z+6	; 0x06
    e3c2:	57 81       	ldd	r21, Z+7	; 0x07
    e3c4:	cd 01       	movw	r24, r26
    e3c6:	46 96       	adiw	r24, 0x16	; 22
    e3c8:	ed b7       	in	r30, 0x3d	; 61
    e3ca:	fe b7       	in	r31, 0x3e	; 62
    e3cc:	95 8b       	std	Z+21, r25	; 0x15
    e3ce:	84 8b       	std	Z+20, r24	; 0x14
    e3d0:	8d 91       	ld	r24, X+
    e3d2:	9d 91       	ld	r25, X+
    e3d4:	0d 90       	ld	r0, X+
    e3d6:	bc 91       	ld	r27, X
    e3d8:	a0 2d       	mov	r26, r0
    e3da:	80 8b       	std	Z+16, r24	; 0x10
    e3dc:	91 8b       	std	Z+17, r25	; 0x11
    e3de:	a2 8b       	std	Z+18, r26	; 0x12
    e3e0:	b3 8b       	std	Z+19, r27	; 0x13
    e3e2:	ca 01       	movw	r24, r20
    e3e4:	45 e0       	ldi	r20, 0x05	; 5
    e3e6:	96 95       	lsr	r25
    e3e8:	87 95       	ror	r24
    e3ea:	4a 95       	dec	r20
    e3ec:	e1 f7       	brne	.-8      	; 0xe3e6 <fatfs_filinfo_list+0x8a>
    e3ee:	8f 73       	andi	r24, 0x3F	; 63
    e3f0:	99 27       	eor	r25, r25
    e3f2:	97 87       	std	Z+15, r25	; 0x0f
    e3f4:	86 87       	std	Z+14, r24	; 0x0e
    e3f6:	85 2f       	mov	r24, r21
    e3f8:	86 95       	lsr	r24
    e3fa:	86 95       	lsr	r24
    e3fc:	86 95       	lsr	r24
    e3fe:	84 87       	std	Z+12, r24	; 0x0c
    e400:	15 86       	std	Z+13, r1	; 0x0d
    e402:	c9 01       	movw	r24, r18
    e404:	8f 71       	andi	r24, 0x1F	; 31
    e406:	99 27       	eor	r25, r25
    e408:	93 87       	std	Z+11, r25	; 0x0b
    e40a:	82 87       	std	Z+10, r24	; 0x0a
    e40c:	c9 01       	movw	r24, r18
    e40e:	55 e0       	ldi	r21, 0x05	; 5
    e410:	96 95       	lsr	r25
    e412:	87 95       	ror	r24
    e414:	5a 95       	dec	r21
    e416:	e1 f7       	brne	.-8      	; 0xe410 <fatfs_filinfo_list+0xb4>
    e418:	8f 70       	andi	r24, 0x0F	; 15
    e41a:	99 27       	eor	r25, r25
    e41c:	91 87       	std	Z+9, r25	; 0x09
    e41e:	80 87       	std	Z+8, r24	; 0x08
    e420:	23 2f       	mov	r18, r19
    e422:	33 27       	eor	r19, r19
    e424:	26 95       	lsr	r18
    e426:	24 54       	subi	r18, 0x44	; 68
    e428:	38 4f       	sbci	r19, 0xF8	; 248
    e42a:	37 83       	std	Z+7, r19	; 0x07
    e42c:	26 83       	std	Z+6, r18	; 0x06
    e42e:	ce 01       	movw	r24, r28
    e430:	46 96       	adiw	r24, 0x16	; 22
    e432:	95 83       	std	Z+5, r25	; 0x05
    e434:	84 83       	std	Z+4, r24	; 0x04
    e436:	85 e4       	ldi	r24, 0x45	; 69
    e438:	98 e0       	ldi	r25, 0x08	; 8
    e43a:	a0 e0       	ldi	r26, 0x00	; 0
    e43c:	81 83       	std	Z+1, r24	; 0x01
    e43e:	92 83       	std	Z+2, r25	; 0x02
    e440:	a3 83       	std	Z+3, r26	; 0x03
    e442:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e446:	83 e4       	ldi	r24, 0x43	; 67
    e448:	98 e0       	ldi	r25, 0x08	; 8
    e44a:	a0 e0       	ldi	r26, 0x00	; 0
    e44c:	ed b7       	in	r30, 0x3d	; 61
    e44e:	fe b7       	in	r31, 0x3e	; 62
    e450:	81 83       	std	Z+1, r24	; 0x01
    e452:	92 83       	std	Z+2, r25	; 0x02
    e454:	a3 83       	std	Z+3, r26	; 0x03
    e456:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
}
    e45a:	6b 96       	adiw	r28, 0x1b	; 27
    e45c:	e2 e0       	ldi	r30, 0x02	; 2
    e45e:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

0000e462 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e462:	cf 93       	push	r28
    e464:	df 93       	push	r29
    e466:	00 d0       	rcall	.+0      	; 0xe468 <fatfs_help+0x6>
    e468:	1f 92       	push	r1
    e46a:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e46c:	83 e7       	ldi	r24, 0x73	; 115
    e46e:	9b e0       	ldi	r25, 0x0B	; 11
    e470:	a0 e0       	ldi	r26, 0x00	; 0
    e472:	ed b7       	in	r30, 0x3d	; 61
    e474:	fe b7       	in	r31, 0x3e	; 62
    e476:	81 83       	std	Z+1, r24	; 0x01
    e478:	92 83       	std	Z+2, r25	; 0x02
    e47a:	a3 83       	std	Z+3, r26	; 0x03
    e47c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    if(full)
    e480:	cd 2b       	or	r28, r29
    e482:	51 f0       	breq	.+20     	; 0xe498 <fatfs_help+0x36>
    {
        printf(
    e484:	8c ef       	ldi	r24, 0xFC	; 252
    e486:	9a e0       	ldi	r25, 0x0A	; 10
    e488:	a0 e0       	ldi	r26, 0x00	; 0
    e48a:	ed b7       	in	r30, 0x3d	; 61
    e48c:	fe b7       	in	r31, 0x3e	; 62
    e48e:	81 83       	std	Z+1, r24	; 0x01
    e490:	92 83       	std	Z+2, r25	; 0x02
    e492:	a3 83       	std	Z+3, r26	; 0x03
    e494:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    #endif
            "\n"
            );
    }

}
    e498:	cd b7       	in	r28, 0x3d	; 61
    e49a:	de b7       	in	r29, 0x3e	; 62
    e49c:	23 96       	adiw	r28, 0x03	; 3
    e49e:	e2 e0       	ldi	r30, 0x02	; 2
    e4a0:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

0000e4a4 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    e4a4:	a5 e5       	ldi	r26, 0x55	; 85
    e4a6:	b2 e0       	ldi	r27, 0x02	; 2
    e4a8:	e8 e5       	ldi	r30, 0x58	; 88
    e4aa:	f2 e7       	ldi	r31, 0x72	; 114
    e4ac:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256];

	memset(buff,0,sizeof(buff)-1);
    e4b0:	8e 01       	movw	r16, r28
    e4b2:	0e 5d       	subi	r16, 0xDE	; 222
    e4b4:	1e 4f       	sbci	r17, 0xFE	; 254
    e4b6:	2f ef       	ldi	r18, 0xFF	; 255
    e4b8:	f8 01       	movw	r30, r16
    e4ba:	11 92       	st	Z+, r1
    e4bc:	2a 95       	dec	r18
    e4be:	e9 f7       	brne	.-6      	; 0xe4ba <fatfs_ls+0x16>

    if(!name || !*name)
    e4c0:	00 97       	sbiw	r24, 0x00	; 0
    e4c2:	21 f0       	breq	.+8      	; 0xe4cc <fatfs_ls+0x28>
    e4c4:	fc 01       	movw	r30, r24
    e4c6:	20 81       	ld	r18, Z
    e4c8:	21 11       	cpse	r18, r1
    e4ca:	03 c0       	rjmp	.+6      	; 0xe4d2 <fatfs_ls+0x2e>
    {
        strcpy(buff,".");
    e4cc:	6d ef       	ldi	r22, 0xFD	; 253
    e4ce:	72 e1       	ldi	r23, 0x12	; 18
    e4d0:	01 c0       	rjmp	.+2      	; 0xe4d4 <fatfs_ls+0x30>
    }
    else
    {
        strcpy(buff,name);
    e4d2:	bc 01       	movw	r22, r24
    e4d4:	c8 01       	movw	r24, r16
    e4d6:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e4da:	ed b7       	in	r30, 0x3d	; 61
    e4dc:	fe b7       	in	r31, 0x3e	; 62
    e4de:	15 83       	std	Z+5, r17	; 0x05
    e4e0:	04 83       	std	Z+4, r16	; 0x04
    e4e2:	8c e7       	ldi	r24, 0x7C	; 124
    e4e4:	9a e0       	ldi	r25, 0x0A	; 10
    e4e6:	a0 e0       	ldi	r26, 0x00	; 0
    e4e8:	81 83       	std	Z+1, r24	; 0x01
    e4ea:	92 83       	std	Z+2, r25	; 0x02
    e4ec:	a3 83       	std	Z+3, r26	; 0x03
    e4ee:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    res = f_opendir(&dirs, buff);
    e4f2:	b8 01       	movw	r22, r16
    e4f4:	ce 01       	movw	r24, r28
    e4f6:	8e 5d       	subi	r24, 0xDE	; 222
    e4f8:	9d 4f       	sbci	r25, 0xFD	; 253
    e4fa:	0e 94 46 62 	call	0xc48c	; 0xc48c <f_opendir>
    if (res) { put_rc(res); return; }
    e4fe:	00 97       	sbiw	r24, 0x00	; 0
    e500:	11 f0       	breq	.+4      	; 0xe506 <fatfs_ls+0x62>
    e502:	1e dd       	rcall	.-1476   	; 0xdf40 <put_rc>
    e504:	8a c0       	rjmp	.+276    	; 0xe61a <fatfs_ls+0x176>
    p1 = s1 = s2 = 0;
    e506:	c0 5b       	subi	r28, 0xB0	; 176
    e508:	dd 4f       	sbci	r29, 0xFD	; 253
    e50a:	18 82       	st	Y, r1
    e50c:	19 82       	std	Y+1, r1	; 0x01
    e50e:	1a 82       	std	Y+2, r1	; 0x02
    e510:	1b 82       	std	Y+3, r1	; 0x03
    e512:	c0 55       	subi	r28, 0x50	; 80
    e514:	d2 40       	sbci	r29, 0x02	; 2
    e516:	c1 2c       	mov	r12, r1
    e518:	d1 2c       	mov	r13, r1
    e51a:	e1 2c       	mov	r14, r1
    e51c:	f1 2c       	mov	r15, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e51e:	be 01       	movw	r22, r28
    e520:	64 5f       	subi	r22, 0xF4	; 244
    e522:	7f 4f       	sbci	r23, 0xFF	; 255
    e524:	ce 01       	movw	r24, r28
    e526:	8e 5d       	subi	r24, 0xDE	; 222
    e528:	9d 4f       	sbci	r25, 0xFD	; 253
    e52a:	0e 94 cc 62 	call	0xc598	; 0xc598 <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    e52e:	89 2b       	or	r24, r25
    e530:	49 f5       	brne	.+82     	; 0xe584 <fatfs_ls+0xe0>
    e532:	8a a1       	ldd	r24, Y+34	; 0x22
    e534:	88 23       	and	r24, r24
    e536:	31 f1       	breq	.+76     	; 0xe584 <fatfs_ls+0xe0>
        if (fno.fattrib & AM_DIR)
    e538:	8c 89       	ldd	r24, Y+20	; 0x14
    e53a:	84 ff       	sbrs	r24, 4
    e53c:	04 c0       	rjmp	.+8      	; 0xe546 <fatfs_ls+0xa2>
        {
            s2++;
    e53e:	ff ef       	ldi	r31, 0xFF	; 255
    e540:	cf 1a       	sub	r12, r31
    e542:	df 0a       	sbc	r13, r31
    e544:	1b c0       	rjmp	.+54     	; 0xe57c <fatfs_ls+0xd8>
        }
        else
        {
            s1++; p1 += fno.fsize;
    e546:	8f ef       	ldi	r24, 0xFF	; 255
    e548:	e8 1a       	sub	r14, r24
    e54a:	f8 0a       	sbc	r15, r24
    e54c:	4c 85       	ldd	r20, Y+12	; 0x0c
    e54e:	5d 85       	ldd	r21, Y+13	; 0x0d
    e550:	6e 85       	ldd	r22, Y+14	; 0x0e
    e552:	7f 85       	ldd	r23, Y+15	; 0x0f
    e554:	c0 5b       	subi	r28, 0xB0	; 176
    e556:	dd 4f       	sbci	r29, 0xFD	; 253
    e558:	88 81       	ld	r24, Y
    e55a:	99 81       	ldd	r25, Y+1	; 0x01
    e55c:	aa 81       	ldd	r26, Y+2	; 0x02
    e55e:	bb 81       	ldd	r27, Y+3	; 0x03
    e560:	c0 55       	subi	r28, 0x50	; 80
    e562:	d2 40       	sbci	r29, 0x02	; 2
    e564:	84 0f       	add	r24, r20
    e566:	95 1f       	adc	r25, r21
    e568:	a6 1f       	adc	r26, r22
    e56a:	b7 1f       	adc	r27, r23
    e56c:	c0 5b       	subi	r28, 0xB0	; 176
    e56e:	dd 4f       	sbci	r29, 0xFD	; 253
    e570:	88 83       	st	Y, r24
    e572:	99 83       	std	Y+1, r25	; 0x01
    e574:	aa 83       	std	Y+2, r26	; 0x02
    e576:	bb 83       	std	Y+3, r27	; 0x03
    e578:	c0 55       	subi	r28, 0x50	; 80
    e57a:	d2 40       	sbci	r29, 0x02	; 2
        }
        fatfs_filinfo_list(&fno);
    e57c:	ce 01       	movw	r24, r28
    e57e:	0c 96       	adiw	r24, 0x0c	; 12
    e580:	ed de       	rcall	.-550    	; 0xe35c <fatfs_filinfo_list>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e582:	cd cf       	rjmp	.-102    	; 0xe51e <fatfs_ls+0x7a>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e584:	ed b7       	in	r30, 0x3d	; 61
    e586:	fe b7       	in	r31, 0x3e	; 62
    e588:	d3 86       	std	Z+11, r13	; 0x0b
    e58a:	c2 86       	std	Z+10, r12	; 0x0a
    e58c:	c0 5b       	subi	r28, 0xB0	; 176
    e58e:	dd 4f       	sbci	r29, 0xFD	; 253
    e590:	88 81       	ld	r24, Y
    e592:	99 81       	ldd	r25, Y+1	; 0x01
    e594:	aa 81       	ldd	r26, Y+2	; 0x02
    e596:	bb 81       	ldd	r27, Y+3	; 0x03
    e598:	c0 55       	subi	r28, 0x50	; 80
    e59a:	d2 40       	sbci	r29, 0x02	; 2
    e59c:	86 83       	std	Z+6, r24	; 0x06
    e59e:	97 83       	std	Z+7, r25	; 0x07
    e5a0:	a0 87       	std	Z+8, r26	; 0x08
    e5a2:	b1 87       	std	Z+9, r27	; 0x09
    e5a4:	f5 82       	std	Z+5, r15	; 0x05
    e5a6:	e4 82       	std	Z+4, r14	; 0x04
    e5a8:	83 e5       	ldi	r24, 0x53	; 83
    e5aa:	9a e0       	ldi	r25, 0x0A	; 10
    e5ac:	a0 e0       	ldi	r26, 0x00	; 0
    e5ae:	81 83       	std	Z+1, r24	; 0x01
    e5b0:	92 83       	std	Z+2, r25	; 0x02
    e5b2:	a3 83       	std	Z+3, r26	; 0x03
    e5b4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e5b8:	ae 01       	movw	r20, r28
    e5ba:	4c 5a       	subi	r20, 0xAC	; 172
    e5bc:	5d 4f       	sbci	r21, 0xFD	; 253
    e5be:	be 01       	movw	r22, r28
    e5c0:	60 5b       	subi	r22, 0xB0	; 176
    e5c2:	7d 4f       	sbci	r23, 0xFD	; 253
    e5c4:	c8 01       	movw	r24, r16
    e5c6:	0e 94 4e 63 	call	0xc69c	; 0xc69c <f_getfree>
    e5ca:	89 2b       	or	r24, r25
    e5cc:	31 f5       	brne	.+76     	; 0xe61a <fatfs_ls+0x176>
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e5ce:	cc 5a       	subi	r28, 0xAC	; 172
    e5d0:	dd 4f       	sbci	r29, 0xFD	; 253
    e5d2:	e8 81       	ld	r30, Y
    e5d4:	f9 81       	ldd	r31, Y+1	; 0x01
    e5d6:	c4 55       	subi	r28, 0x54	; 84
    e5d8:	d2 40       	sbci	r29, 0x02	; 2
    e5da:	a1 85       	ldd	r26, Z+9	; 0x09
    e5dc:	b2 85       	ldd	r27, Z+10	; 0x0a
    e5de:	c0 5b       	subi	r28, 0xB0	; 176
    e5e0:	dd 4f       	sbci	r29, 0xFD	; 253
    e5e2:	28 81       	ld	r18, Y
    e5e4:	39 81       	ldd	r19, Y+1	; 0x01
    e5e6:	4a 81       	ldd	r20, Y+2	; 0x02
    e5e8:	5b 81       	ldd	r21, Y+3	; 0x03
    e5ea:	c0 55       	subi	r28, 0x50	; 80
    e5ec:	d2 40       	sbci	r29, 0x02	; 2
    e5ee:	0e 94 3c e3 	call	0x1c678	; 0x1c678 <__muluhisi3>
    e5f2:	22 e0       	ldi	r18, 0x02	; 2
    e5f4:	30 e0       	ldi	r19, 0x00	; 0
    e5f6:	40 e0       	ldi	r20, 0x00	; 0
    e5f8:	50 e0       	ldi	r21, 0x00	; 0
    e5fa:	0e 94 11 e3 	call	0x1c622	; 0x1c622 <__divmodsi4>
    e5fe:	ed b7       	in	r30, 0x3d	; 61
    e600:	fe b7       	in	r31, 0x3e	; 62
    e602:	24 83       	std	Z+4, r18	; 0x04
    e604:	35 83       	std	Z+5, r19	; 0x05
    e606:	46 83       	std	Z+6, r20	; 0x06
    e608:	57 83       	std	Z+7, r21	; 0x07
    e60a:	8e e3       	ldi	r24, 0x3E	; 62
    e60c:	9a e0       	ldi	r25, 0x0A	; 10
    e60e:	a0 e0       	ldi	r26, 0x00	; 0
    e610:	81 83       	std	Z+1, r24	; 0x01
    e612:	92 83       	std	Z+2, r25	; 0x02
    e614:	a3 83       	std	Z+3, r26	; 0x03
    e616:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
}
    e61a:	cb 5a       	subi	r28, 0xAB	; 171
    e61c:	dd 4f       	sbci	r29, 0xFD	; 253
    e61e:	e8 e0       	ldi	r30, 0x08	; 8
    e620:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

0000e624 <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e624:	00 d0       	rcall	.+0      	; 0xe626 <mmc_test+0x2>
    e626:	1f 92       	push	r1
    printf("==============================\n");
    e628:	8c ed       	ldi	r24, 0xDC	; 220
    e62a:	9a e0       	ldi	r25, 0x0A	; 10
    e62c:	a0 e0       	ldi	r26, 0x00	; 0
    e62e:	ed b7       	in	r30, 0x3d	; 61
    e630:	fe b7       	in	r31, 0x3e	; 62
    e632:	81 83       	std	Z+1, r24	; 0x01
    e634:	92 83       	std	Z+2, r25	; 0x02
    e636:	a3 83       	std	Z+3, r26	; 0x03
    e638:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("START MMC TEST\n");
    e63c:	8c ec       	ldi	r24, 0xCC	; 204
    e63e:	9a e0       	ldi	r25, 0x0A	; 10
    e640:	a0 e0       	ldi	r26, 0x00	; 0
    e642:	ed b7       	in	r30, 0x3d	; 61
    e644:	fe b7       	in	r31, 0x3e	; 62
    e646:	81 83       	std	Z+1, r24	; 0x01
    e648:	92 83       	std	Z+2, r25	; 0x02
    e64a:	a3 83       	std	Z+3, r26	; 0x03
    e64c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    fatfs_status("/");
    e650:	86 ea       	ldi	r24, 0xA6	; 166
    e652:	98 e0       	ldi	r25, 0x08	; 8
    e654:	09 dd       	rcall	.-1518   	; 0xe068 <fatfs_status>
    printf("MMC Directory List\n");
    e656:	88 eb       	ldi	r24, 0xB8	; 184
    e658:	9a e0       	ldi	r25, 0x0A	; 10
    e65a:	a0 e0       	ldi	r26, 0x00	; 0
    e65c:	ed b7       	in	r30, 0x3d	; 61
    e65e:	fe b7       	in	r31, 0x3e	; 62
    e660:	81 83       	std	Z+1, r24	; 0x01
    e662:	92 83       	std	Z+2, r25	; 0x02
    e664:	a3 83       	std	Z+3, r26	; 0x03
    e666:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    fatfs_ls("/");
    e66a:	86 ea       	ldi	r24, 0xA6	; 166
    e66c:	98 e0       	ldi	r25, 0x08	; 8
    e66e:	1a df       	rcall	.-460    	; 0xe4a4 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e670:	8a ea       	ldi	r24, 0xAA	; 170
    e672:	9a e0       	ldi	r25, 0x0A	; 10
    e674:	a0 e0       	ldi	r26, 0x00	; 0
    e676:	ed b7       	in	r30, 0x3d	; 61
    e678:	fe b7       	in	r31, 0x3e	; 62
    e67a:	81 83       	std	Z+1, r24	; 0x01
    e67c:	92 83       	std	Z+2, r25	; 0x02
    e67e:	a3 83       	std	Z+3, r26	; 0x03
    e680:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("==============================\n");
    e684:	8a e8       	ldi	r24, 0x8A	; 138
    e686:	9a e0       	ldi	r25, 0x0A	; 10
    e688:	a0 e0       	ldi	r26, 0x00	; 0
    e68a:	ed b7       	in	r30, 0x3d	; 61
    e68c:	fe b7       	in	r31, 0x3e	; 62
    e68e:	81 83       	std	Z+1, r24	; 0x01
    e690:	92 83       	std	Z+2, r25	; 0x02
    e692:	a3 83       	std	Z+3, r26	; 0x03
    e694:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
}
    e698:	0f 90       	pop	r0
    e69a:	0f 90       	pop	r0
    e69c:	0f 90       	pop	r0
    e69e:	08 95       	ret

0000e6a0 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e6a0:	ef 92       	push	r14
    e6a2:	ff 92       	push	r15
    e6a4:	0f 93       	push	r16
    e6a6:	1f 93       	push	r17
    e6a8:	cf 93       	push	r28
    e6aa:	df 93       	push	r29
    e6ac:	7c 01       	movw	r14, r24
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
    e6ae:	fb 01       	movw	r30, r22
    e6b0:	80 81       	ld	r24, Z
    e6b2:	91 81       	ldd	r25, Z+1	; 0x01

    if(!ptr)
    e6b4:	00 97       	sbiw	r24, 0x00	; 0
    e6b6:	19 f4       	brne	.+6      	; 0xe6be <fatfs_tests+0x1e>
        return(0);
    e6b8:	80 e0       	ldi	r24, 0x00	; 0
    e6ba:	90 e0       	ldi	r25, 0x00	; 0
    e6bc:	5b c0       	rjmp	.+182    	; 0xe774 <fatfs_tests+0xd4>
    e6be:	eb 01       	movw	r28, r22

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    e6c0:	62 ed       	ldi	r22, 0xD2	; 210
    e6c2:	78 e0       	ldi	r23, 0x08	; 8
    e6c4:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
    e6c8:	89 2b       	or	r24, r25
    e6ca:	b1 f3       	breq	.-20     	; 0xe6b8 <fatfs_tests+0x18>
    {
        ptr = argv[ind++];
    e6cc:	0a 81       	ldd	r16, Y+2	; 0x02
    e6ce:	1b 81       	ldd	r17, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    e6d0:	01 15       	cp	r16, r1
    e6d2:	11 05       	cpc	r17, r1
    e6d4:	21 f4       	brne	.+8      	; 0xe6de <fatfs_tests+0x3e>
        {
            fatfs_help(1);
    e6d6:	81 e0       	ldi	r24, 0x01	; 1
    e6d8:	90 e0       	ldi	r25, 0x00	; 0
    e6da:	c3 de       	rcall	.-634    	; 0xe462 <fatfs_help>
    e6dc:	49 c0       	rjmp	.+146    	; 0xe770 <fatfs_tests+0xd0>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    e6de:	69 e7       	ldi	r22, 0x79	; 121
    e6e0:	76 e1       	ldi	r23, 0x16	; 22
    e6e2:	c8 01       	movw	r24, r16
    e6e4:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
    e6e8:	89 2b       	or	r24, r25
    e6ea:	a9 f7       	brne	.-22     	; 0xe6d6 <fatfs_tests+0x36>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") )
    e6ec:	68 ed       	ldi	r22, 0xD8	; 216
    e6ee:	78 e0       	ldi	r23, 0x08	; 8
    e6f0:	c8 01       	movw	r24, r16
    e6f2:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <MATCHI>
    e6f6:	89 2b       	or	r24, r25
    e6f8:	99 f0       	breq	.+38     	; 0xe720 <fatfs_tests+0x80>
    e6fa:	24 96       	adiw	r28, 0x04	; 4
    e6fc:	02 e0       	ldi	r16, 0x02	; 2
    e6fe:	10 e0       	ldi	r17, 0x00	; 0
    {
        int i;
        int args = 0;
// printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    e700:	0e 15       	cp	r16, r14
    e702:	1f 05       	cpc	r17, r15
    e704:	34 f4       	brge	.+12     	; 0xe712 <fatfs_tests+0x72>
        {
//printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    e706:	89 91       	ld	r24, Y+
    e708:	99 91       	ld	r25, Y+
    e70a:	cc de       	rcall	.-616    	; 0xe4a4 <fatfs_ls>
    if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
// printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    e70c:	0f 5f       	subi	r16, 0xFF	; 255
    e70e:	1f 4f       	sbci	r17, 0xFF	; 255
    e710:	f7 cf       	rjmp	.-18     	; 0xe700 <fatfs_tests+0x60>
        {
//printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    e712:	02 30       	cpi	r16, 0x02	; 2
    e714:	11 05       	cpc	r17, r1
    e716:	61 f5       	brne	.+88     	; 0xe770 <fatfs_tests+0xd0>
        {
            fatfs_ls("");
    e718:	8d e2       	ldi	r24, 0x2D	; 45
    e71a:	9c e0       	ldi	r25, 0x0C	; 12
    e71c:	c3 de       	rcall	.-634    	; 0xe4a4 <fatfs_ls>
    e71e:	28 c0       	rjmp	.+80     	; 0xe770 <fatfs_tests+0xd0>
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    e720:	97 01       	movw	r18, r14
    e722:	42 e0       	ldi	r20, 0x02	; 2
    e724:	50 e0       	ldi	r21, 0x00	; 0
    e726:	6b ed       	ldi	r22, 0xDB	; 219
    e728:	78 e0       	ldi	r23, 0x08	; 8
    e72a:	c8 01       	movw	r24, r16
    e72c:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
    e730:	89 2b       	or	r24, r25
    {
        mmc_test();
    e732:	11 f0       	breq	.+4      	; 0xe738 <fatfs_tests+0x98>
    e734:	77 df       	rcall	.-274    	; 0xe624 <mmc_test>
    e736:	1c c0       	rjmp	.+56     	; 0xe770 <fatfs_tests+0xd0>
        return(1);
    }

    else if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    e738:	97 01       	movw	r18, r14
    e73a:	42 e0       	ldi	r20, 0x02	; 2
    e73c:	50 e0       	ldi	r21, 0x00	; 0
    e73e:	64 ee       	ldi	r22, 0xE4	; 228
    e740:	78 e0       	ldi	r23, 0x08	; 8
    e742:	c8 01       	movw	r24, r16
    e744:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
    e748:	89 2b       	or	r24, r25
    {
        mmc_init(1);
    e74a:	21 f0       	breq	.+8      	; 0xe754 <fatfs_tests+0xb4>
    e74c:	81 e0       	ldi	r24, 0x01	; 1
    e74e:	90 e0       	ldi	r25, 0x00	; 0
    e750:	b4 da       	rcall	.-2712   	; 0xdcba <mmc_init>
    e752:	0e c0       	rjmp	.+28     	; 0xe770 <fatfs_tests+0xd0>
        return(1);
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    e754:	97 01       	movw	r18, r14
    e756:	43 e0       	ldi	r20, 0x03	; 3
    e758:	50 e0       	ldi	r21, 0x00	; 0
    e75a:	6d ee       	ldi	r22, 0xED	; 237
    e75c:	78 e0       	ldi	r23, 0x08	; 8
    e75e:	c8 01       	movw	r24, r16
    e760:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
    e764:	89 2b       	or	r24, r25
    e766:	09 f4       	brne	.+2      	; 0xe76a <fatfs_tests+0xca>
    {
        fatfs_status(argv[ind]);
    e768:	a7 cf       	rjmp	.-178    	; 0xe6b8 <fatfs_tests+0x18>
    e76a:	8c 81       	ldd	r24, Y+4	; 0x04
    e76c:	9d 81       	ldd	r25, Y+5	; 0x05
    e76e:	7c dc       	rcall	.-1800   	; 0xe068 <fatfs_status>
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    e770:	81 e0       	ldi	r24, 0x01	; 1
    e772:	90 e0       	ldi	r25, 0x00	; 0
        return(1);
    }
#endif

    return(0);
}
    e774:	cd b7       	in	r28, 0x3d	; 61
    e776:	de b7       	in	r29, 0x3e	; 62
    e778:	e6 e0       	ldi	r30, 0x06	; 6
    e77a:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

0000e77e <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    e77e:	8f 92       	push	r8
    e780:	9f 92       	push	r9
    e782:	af 92       	push	r10
    e784:	bf 92       	push	r11
    e786:	ef 92       	push	r14
    e788:	ff 92       	push	r15
    e78a:	0f 93       	push	r16
    e78c:	1f 93       	push	r17
    e78e:	cf 93       	push	r28
    e790:	df 93       	push	r29
    e792:	00 d0       	rcall	.+0      	; 0xe794 <fatfs_getc+0x16>
    e794:	1f 92       	push	r1
    e796:	cd b7       	in	r28, 0x3d	; 61
    e798:	de b7       	in	r29, 0x3e	; 62
    e79a:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    e79e:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    e7a2:	00 97       	sbiw	r24, 0x00	; 0
    e7a4:	39 f4       	brne	.+14     	; 0xe7b4 <fatfs_getc+0x36>
    e7a6:	89 e0       	ldi	r24, 0x09	; 9
    e7a8:	90 e0       	ldi	r25, 0x00	; 0
    e7aa:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    e7ae:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    e7b2:	2f c0       	rjmp	.+94     	; 0xe812 <fatfs_getc+0x94>
    e7b4:	fc 01       	movw	r30, r24
    e7b6:	e4 84       	ldd	r14, Z+12	; 0x0c
    e7b8:	f5 84       	ldd	r15, Z+13	; 0x0d
    e7ba:	e1 14       	cp	r14, r1
    e7bc:	f1 04       	cpc	r15, r1
    e7be:	99 f3       	breq	.-26     	; 0xe7a6 <fatfs_getc+0x28>
    e7c0:	8c 01       	movw	r16, r24
    e7c2:	9e 01       	movw	r18, r28
    e7c4:	2f 5f       	subi	r18, 0xFF	; 255
    e7c6:	3f 4f       	sbci	r19, 0xFF	; 255
    e7c8:	41 e0       	ldi	r20, 0x01	; 1
    e7ca:	50 e0       	ldi	r21, 0x00	; 0
    e7cc:	be 01       	movw	r22, r28
    e7ce:	6d 5f       	subi	r22, 0xFD	; 253
    e7d0:	7f 4f       	sbci	r23, 0xFF	; 255
    e7d2:	c7 01       	movw	r24, r14
    e7d4:	0e 94 7e 5a 	call	0xb4fc	; 0xb4fc <f_read>
    e7d8:	00 97       	sbiw	r24, 0x00	; 0
    e7da:	31 f4       	brne	.+12     	; 0xe7e8 <fatfs_getc+0x6a>
    e7dc:	29 81       	ldd	r18, Y+1	; 0x01
    e7de:	3a 81       	ldd	r19, Y+2	; 0x02
    e7e0:	21 30       	cpi	r18, 0x01	; 1
    e7e2:	31 05       	cpc	r19, r1
    e7e4:	c9 f0       	breq	.+50     	; 0xe818 <fatfs_getc+0x9a>
    e7e6:	03 c0       	rjmp	.+6      	; 0xe7ee <fatfs_getc+0x70>
    e7e8:	84 31       	cpi	r24, 0x14	; 20
    e7ea:	91 05       	cpc	r25, r1
    e7ec:	40 f4       	brcc	.+16     	; 0xe7fe <fatfs_getc+0x80>
    e7ee:	fc 01       	movw	r30, r24
    e7f0:	ea 55       	subi	r30, 0x5A	; 90
    e7f2:	f4 4f       	sbci	r31, 0xF4	; 244
    e7f4:	80 81       	ld	r24, Z
    e7f6:	08 2e       	mov	r0, r24
    e7f8:	00 0c       	add	r0, r0
    e7fa:	99 0b       	sbc	r25, r25
    e7fc:	02 c0       	rjmp	.+4      	; 0xe802 <fatfs_getc+0x84>
    e7fe:	83 e2       	ldi	r24, 0x23	; 35
    e800:	90 e0       	ldi	r25, 0x00	; 0
    e802:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    e806:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    e80a:	f8 01       	movw	r30, r16
    e80c:	83 81       	ldd	r24, Z+3	; 0x03
    e80e:	80 62       	ori	r24, 0x20	; 32
    e810:	83 83       	std	Z+3, r24	; 0x03
    e812:	8f ef       	ldi	r24, 0xFF	; 255
    e814:	9f ef       	ldi	r25, 0xFF	; 255
    e816:	28 c0       	rjmp	.+80     	; 0xe868 <fatfs_getc+0xea>
    e818:	8b 81       	ldd	r24, Y+3	; 0x03
    e81a:	8d 30       	cpi	r24, 0x0D	; 13
    e81c:	01 f5       	brne	.+64     	; 0xe85e <fatfs_getc+0xe0>
    e81e:	f7 01       	movw	r30, r14
    e820:	80 88       	ldd	r8, Z+16	; 0x10
    e822:	91 88       	ldd	r9, Z+17	; 0x11
    e824:	a2 88       	ldd	r10, Z+18	; 0x12
    e826:	b3 88       	ldd	r11, Z+19	; 0x13
    e828:	9e 01       	movw	r18, r28
    e82a:	2f 5f       	subi	r18, 0xFF	; 255
    e82c:	3f 4f       	sbci	r19, 0xFF	; 255
    e82e:	41 e0       	ldi	r20, 0x01	; 1
    e830:	50 e0       	ldi	r21, 0x00	; 0
    e832:	be 01       	movw	r22, r28
    e834:	6d 5f       	subi	r22, 0xFD	; 253
    e836:	7f 4f       	sbci	r23, 0xFF	; 255
    e838:	c7 01       	movw	r24, r14
    e83a:	0e 94 7e 5a 	call	0xb4fc	; 0xb4fc <f_read>
    e83e:	89 2b       	or	r24, r25
    e840:	89 f4       	brne	.+34     	; 0xe864 <fatfs_getc+0xe6>
    e842:	89 81       	ldd	r24, Y+1	; 0x01
    e844:	9a 81       	ldd	r25, Y+2	; 0x02
    e846:	01 97       	sbiw	r24, 0x01	; 1
    e848:	69 f4       	brne	.+26     	; 0xe864 <fatfs_getc+0xe6>
    e84a:	8b 81       	ldd	r24, Y+3	; 0x03
    e84c:	8a 30       	cpi	r24, 0x0A	; 10
    e84e:	31 f0       	breq	.+12     	; 0xe85c <fatfs_getc+0xde>
    e850:	b5 01       	movw	r22, r10
    e852:	a4 01       	movw	r20, r8
    e854:	c7 01       	movw	r24, r14
    e856:	0e 94 8a 5f 	call	0xbf14	; 0xbf14 <f_lseek>
    e85a:	04 c0       	rjmp	.+8      	; 0xe864 <fatfs_getc+0xe6>
    e85c:	8b 83       	std	Y+3, r24	; 0x03
    e85e:	8b 81       	ldd	r24, Y+3	; 0x03
    e860:	90 e0       	ldi	r25, 0x00	; 0
    e862:	02 c0       	rjmp	.+4      	; 0xe868 <fatfs_getc+0xea>
    e864:	8a e0       	ldi	r24, 0x0A	; 10
    e866:	90 e0       	ldi	r25, 0x00	; 0
    e868:	0f 90       	pop	r0
    e86a:	0f 90       	pop	r0
    e86c:	0f 90       	pop	r0
    e86e:	df 91       	pop	r29
    e870:	cf 91       	pop	r28
    e872:	1f 91       	pop	r17
    e874:	0f 91       	pop	r16
    e876:	ff 90       	pop	r15
    e878:	ef 90       	pop	r14
    e87a:	bf 90       	pop	r11
    e87c:	af 90       	pop	r10
    e87e:	9f 90       	pop	r9
    e880:	8f 90       	pop	r8
    e882:	08 95       	ret

0000e884 <fatfs_putc>:
    e884:	a3 e0       	ldi	r26, 0x03	; 3
    e886:	b0 e0       	ldi	r27, 0x00	; 0
    e888:	e8 e4       	ldi	r30, 0x48	; 72
    e88a:	f4 e7       	ldi	r31, 0x74	; 116
    e88c:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__prologue_saves__+0x1c>
    e890:	8b 83       	std	Y+3, r24	; 0x03
    e892:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    e896:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    e89a:	61 15       	cp	r22, r1
    e89c:	71 05       	cpc	r23, r1
    e89e:	39 f4       	brne	.+14     	; 0xe8ae <fatfs_putc+0x2a>
    e8a0:	89 e0       	ldi	r24, 0x09	; 9
    e8a2:	90 e0       	ldi	r25, 0x00	; 0
    e8a4:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    e8a8:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    e8ac:	2d c0       	rjmp	.+90     	; 0xe908 <fatfs_putc+0x84>
    e8ae:	fb 01       	movw	r30, r22
    e8b0:	84 85       	ldd	r24, Z+12	; 0x0c
    e8b2:	95 85       	ldd	r25, Z+13	; 0x0d
    e8b4:	00 97       	sbiw	r24, 0x00	; 0
    e8b6:	a1 f3       	breq	.-24     	; 0xe8a0 <fatfs_putc+0x1c>
    e8b8:	8b 01       	movw	r16, r22
    e8ba:	9e 01       	movw	r18, r28
    e8bc:	2f 5f       	subi	r18, 0xFF	; 255
    e8be:	3f 4f       	sbci	r19, 0xFF	; 255
    e8c0:	41 e0       	ldi	r20, 0x01	; 1
    e8c2:	50 e0       	ldi	r21, 0x00	; 0
    e8c4:	be 01       	movw	r22, r28
    e8c6:	6d 5f       	subi	r22, 0xFD	; 253
    e8c8:	7f 4f       	sbci	r23, 0xFF	; 255
    e8ca:	0e 94 c9 5b 	call	0xb792	; 0xb792 <f_write>
    e8ce:	00 97       	sbiw	r24, 0x00	; 0
    e8d0:	31 f4       	brne	.+12     	; 0xe8de <fatfs_putc+0x5a>
    e8d2:	29 81       	ldd	r18, Y+1	; 0x01
    e8d4:	3a 81       	ldd	r19, Y+2	; 0x02
    e8d6:	21 30       	cpi	r18, 0x01	; 1
    e8d8:	31 05       	cpc	r19, r1
    e8da:	c9 f0       	breq	.+50     	; 0xe90e <fatfs_putc+0x8a>
    e8dc:	03 c0       	rjmp	.+6      	; 0xe8e4 <fatfs_putc+0x60>
    e8de:	84 31       	cpi	r24, 0x14	; 20
    e8e0:	91 05       	cpc	r25, r1
    e8e2:	40 f4       	brcc	.+16     	; 0xe8f4 <fatfs_putc+0x70>
    e8e4:	fc 01       	movw	r30, r24
    e8e6:	ea 55       	subi	r30, 0x5A	; 90
    e8e8:	f4 4f       	sbci	r31, 0xF4	; 244
    e8ea:	80 81       	ld	r24, Z
    e8ec:	08 2e       	mov	r0, r24
    e8ee:	00 0c       	add	r0, r0
    e8f0:	99 0b       	sbc	r25, r25
    e8f2:	02 c0       	rjmp	.+4      	; 0xe8f8 <fatfs_putc+0x74>
    e8f4:	83 e2       	ldi	r24, 0x23	; 35
    e8f6:	90 e0       	ldi	r25, 0x00	; 0
    e8f8:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    e8fc:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    e900:	f8 01       	movw	r30, r16
    e902:	83 81       	ldd	r24, Z+3	; 0x03
    e904:	80 62       	ori	r24, 0x20	; 32
    e906:	83 83       	std	Z+3, r24	; 0x03
    e908:	8f ef       	ldi	r24, 0xFF	; 255
    e90a:	9f ef       	ldi	r25, 0xFF	; 255
    e90c:	02 c0       	rjmp	.+4      	; 0xe912 <fatfs_putc+0x8e>
    e90e:	8b 81       	ldd	r24, Y+3	; 0x03
    e910:	90 e0       	ldi	r25, 0x00	; 0
    e912:	23 96       	adiw	r28, 0x03	; 3
    e914:	e4 e0       	ldi	r30, 0x04	; 4
    e916:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

0000e91a <fgetc>:
    e91a:	cf 93       	push	r28
    e91c:	df 93       	push	r29
    e91e:	00 d0       	rcall	.+0      	; 0xe920 <fgetc+0x6>
    e920:	1f 92       	push	r1
    e922:	ec 01       	movw	r28, r24
    e924:	00 97       	sbiw	r24, 0x00	; 0
    e926:	39 f4       	brne	.+14     	; 0xe936 <fgetc+0x1c>
    e928:	89 e0       	ldi	r24, 0x09	; 9
    e92a:	90 e0       	ldi	r25, 0x00	; 0
    e92c:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    e930:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    e934:	40 c0       	rjmp	.+128    	; 0xe9b6 <fgetc+0x9c>
    e936:	2b 81       	ldd	r18, Y+3	; 0x03
    e938:	20 ff       	sbrs	r18, 0
    e93a:	3d c0       	rjmp	.+122    	; 0xe9b6 <fgetc+0x9c>
    e93c:	26 ff       	sbrs	r18, 6
    e93e:	0a c0       	rjmp	.+20     	; 0xe954 <fgetc+0x3a>
    e940:	2f 7b       	andi	r18, 0xBF	; 191
    e942:	2b 83       	std	Y+3, r18	; 0x03
    e944:	8e 81       	ldd	r24, Y+6	; 0x06
    e946:	9f 81       	ldd	r25, Y+7	; 0x07
    e948:	01 96       	adiw	r24, 0x01	; 1
    e94a:	9f 83       	std	Y+7, r25	; 0x07
    e94c:	8e 83       	std	Y+6, r24	; 0x06
    e94e:	8a 81       	ldd	r24, Y+2	; 0x02
    e950:	90 e0       	ldi	r25, 0x00	; 0
    e952:	33 c0       	rjmp	.+102    	; 0xe9ba <fgetc+0xa0>
    e954:	22 ff       	sbrs	r18, 2
    e956:	0d c0       	rjmp	.+26     	; 0xe972 <fgetc+0x58>
    e958:	e8 81       	ld	r30, Y
    e95a:	f9 81       	ldd	r31, Y+1	; 0x01
    e95c:	80 81       	ld	r24, Z
    e95e:	90 e0       	ldi	r25, 0x00	; 0
    e960:	00 97       	sbiw	r24, 0x00	; 0
    e962:	19 f4       	brne	.+6      	; 0xe96a <fgetc+0x50>
    e964:	20 62       	ori	r18, 0x20	; 32
    e966:	2b 83       	std	Y+3, r18	; 0x03
    e968:	26 c0       	rjmp	.+76     	; 0xe9b6 <fgetc+0x9c>
    e96a:	31 96       	adiw	r30, 0x01	; 1
    e96c:	f9 83       	std	Y+1, r31	; 0x01
    e96e:	e8 83       	st	Y, r30
    e970:	1b c0       	rjmp	.+54     	; 0xe9a8 <fgetc+0x8e>
    e972:	ea 85       	ldd	r30, Y+10	; 0x0a
    e974:	fb 85       	ldd	r31, Y+11	; 0x0b
    e976:	30 97       	sbiw	r30, 0x00	; 0
    e978:	59 f4       	brne	.+22     	; 0xe990 <fgetc+0x76>
    e97a:	8f ea       	ldi	r24, 0xAF	; 175
    e97c:	9b e0       	ldi	r25, 0x0B	; 11
    e97e:	a0 e0       	ldi	r26, 0x00	; 0
    e980:	ed b7       	in	r30, 0x3d	; 61
    e982:	fe b7       	in	r31, 0x3e	; 62
    e984:	81 83       	std	Z+1, r24	; 0x01
    e986:	92 83       	std	Z+2, r25	; 0x02
    e988:	a3 83       	std	Z+3, r26	; 0x03
    e98a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    e98e:	13 c0       	rjmp	.+38     	; 0xe9b6 <fgetc+0x9c>
    e990:	09 95       	icall
    e992:	97 ff       	sbrs	r25, 7
    e994:	09 c0       	rjmp	.+18     	; 0xe9a8 <fgetc+0x8e>
    e996:	2b 81       	ldd	r18, Y+3	; 0x03
    e998:	02 96       	adiw	r24, 0x02	; 2
    e99a:	11 f0       	breq	.+4      	; 0xe9a0 <fgetc+0x86>
    e99c:	80 e2       	ldi	r24, 0x20	; 32
    e99e:	01 c0       	rjmp	.+2      	; 0xe9a2 <fgetc+0x88>
    e9a0:	80 e1       	ldi	r24, 0x10	; 16
    e9a2:	82 2b       	or	r24, r18
    e9a4:	8b 83       	std	Y+3, r24	; 0x03
    e9a6:	07 c0       	rjmp	.+14     	; 0xe9b6 <fgetc+0x9c>
    e9a8:	2e 81       	ldd	r18, Y+6	; 0x06
    e9aa:	3f 81       	ldd	r19, Y+7	; 0x07
    e9ac:	2f 5f       	subi	r18, 0xFF	; 255
    e9ae:	3f 4f       	sbci	r19, 0xFF	; 255
    e9b0:	3f 83       	std	Y+7, r19	; 0x07
    e9b2:	2e 83       	std	Y+6, r18	; 0x06
    e9b4:	02 c0       	rjmp	.+4      	; 0xe9ba <fgetc+0xa0>
    e9b6:	8f ef       	ldi	r24, 0xFF	; 255
    e9b8:	9f ef       	ldi	r25, 0xFF	; 255
    e9ba:	cd b7       	in	r28, 0x3d	; 61
    e9bc:	de b7       	in	r29, 0x3e	; 62
    e9be:	23 96       	adiw	r28, 0x03	; 3
    e9c0:	e2 e0       	ldi	r30, 0x02	; 2
    e9c2:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

0000e9c6 <fputc>:
    e9c6:	cf 93       	push	r28
    e9c8:	df 93       	push	r29
    e9ca:	00 d0       	rcall	.+0      	; 0xe9cc <fputc+0x6>
    e9cc:	1f 92       	push	r1
    e9ce:	eb 01       	movw	r28, r22
    e9d0:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    e9d4:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    e9d8:	20 91 c4 1c 	lds	r18, 0x1CC4	; 0x801cc4 <__iob+0x2>
    e9dc:	30 91 c5 1c 	lds	r19, 0x1CC5	; 0x801cc5 <__iob+0x3>
    e9e0:	62 17       	cp	r22, r18
    e9e2:	73 07       	cpc	r23, r19
    e9e4:	49 f0       	breq	.+18     	; 0xe9f8 <fputc+0x32>
    e9e6:	20 91 c6 1c 	lds	r18, 0x1CC6	; 0x801cc6 <__iob+0x4>
    e9ea:	30 91 c7 1c 	lds	r19, 0x1CC7	; 0x801cc7 <__iob+0x5>
    e9ee:	62 17       	cp	r22, r18
    e9f0:	73 07       	cpc	r23, r19
    e9f2:	11 f0       	breq	.+4      	; 0xe9f8 <fputc+0x32>
    e9f4:	47 df       	rcall	.-370    	; 0xe884 <fatfs_putc>
    e9f6:	33 c0       	rjmp	.+102    	; 0xea5e <fputc+0x98>
    e9f8:	2b 81       	ldd	r18, Y+3	; 0x03
    e9fa:	21 ff       	sbrs	r18, 1
    e9fc:	2e c0       	rjmp	.+92     	; 0xea5a <fputc+0x94>
    e9fe:	22 ff       	sbrs	r18, 2
    ea00:	10 c0       	rjmp	.+32     	; 0xea22 <fputc+0x5c>
    ea02:	4e 81       	ldd	r20, Y+6	; 0x06
    ea04:	5f 81       	ldd	r21, Y+7	; 0x07
    ea06:	2c 81       	ldd	r18, Y+4	; 0x04
    ea08:	3d 81       	ldd	r19, Y+5	; 0x05
    ea0a:	42 17       	cp	r20, r18
    ea0c:	53 07       	cpc	r21, r19
    ea0e:	f4 f4       	brge	.+60     	; 0xea4c <fputc+0x86>
    ea10:	e8 81       	ld	r30, Y
    ea12:	f9 81       	ldd	r31, Y+1	; 0x01
    ea14:	9f 01       	movw	r18, r30
    ea16:	2f 5f       	subi	r18, 0xFF	; 255
    ea18:	3f 4f       	sbci	r19, 0xFF	; 255
    ea1a:	39 83       	std	Y+1, r19	; 0x01
    ea1c:	28 83       	st	Y, r18
    ea1e:	80 83       	st	Z, r24
    ea20:	15 c0       	rjmp	.+42     	; 0xea4c <fputc+0x86>
    ea22:	e8 85       	ldd	r30, Y+8	; 0x08
    ea24:	f9 85       	ldd	r31, Y+9	; 0x09
    ea26:	30 97       	sbiw	r30, 0x00	; 0
    ea28:	59 f4       	brne	.+22     	; 0xea40 <fputc+0x7a>
    ea2a:	87 e9       	ldi	r24, 0x97	; 151
    ea2c:	9b e0       	ldi	r25, 0x0B	; 11
    ea2e:	a0 e0       	ldi	r26, 0x00	; 0
    ea30:	ed b7       	in	r30, 0x3d	; 61
    ea32:	fe b7       	in	r31, 0x3e	; 62
    ea34:	81 83       	std	Z+1, r24	; 0x01
    ea36:	92 83       	std	Z+2, r25	; 0x02
    ea38:	a3 83       	std	Z+3, r26	; 0x03
    ea3a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    ea3e:	0d c0       	rjmp	.+26     	; 0xea5a <fputc+0x94>
    ea40:	be 01       	movw	r22, r28
    ea42:	09 95       	icall
    ea44:	8f 3f       	cpi	r24, 0xFF	; 255
    ea46:	ff ef       	ldi	r31, 0xFF	; 255
    ea48:	9f 07       	cpc	r25, r31
    ea4a:	39 f0       	breq	.+14     	; 0xea5a <fputc+0x94>
    ea4c:	2e 81       	ldd	r18, Y+6	; 0x06
    ea4e:	3f 81       	ldd	r19, Y+7	; 0x07
    ea50:	2f 5f       	subi	r18, 0xFF	; 255
    ea52:	3f 4f       	sbci	r19, 0xFF	; 255
    ea54:	3f 83       	std	Y+7, r19	; 0x07
    ea56:	2e 83       	std	Y+6, r18	; 0x06
    ea58:	02 c0       	rjmp	.+4      	; 0xea5e <fputc+0x98>
    ea5a:	8f ef       	ldi	r24, 0xFF	; 255
    ea5c:	9f ef       	ldi	r25, 0xFF	; 255
    ea5e:	cd b7       	in	r28, 0x3d	; 61
    ea60:	de b7       	in	r29, 0x3e	; 62
    ea62:	23 96       	adiw	r28, 0x03	; 3
    ea64:	e2 e0       	ldi	r30, 0x02	; 2
    ea66:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

0000ea6a <_fprintf_putc>:
    ea6a:	fc 01       	movw	r30, r24
    ea6c:	86 2f       	mov	r24, r22
    ea6e:	26 81       	ldd	r18, Z+6	; 0x06
    ea70:	37 81       	ldd	r19, Z+7	; 0x07
    ea72:	2f 5f       	subi	r18, 0xFF	; 255
    ea74:	3f 4f       	sbci	r19, 0xFF	; 255
    ea76:	37 83       	std	Z+7, r19	; 0x07
    ea78:	26 83       	std	Z+6, r18	; 0x06
    ea7a:	62 81       	ldd	r22, Z+2	; 0x02
    ea7c:	73 81       	ldd	r23, Z+3	; 0x03
    ea7e:	90 e0       	ldi	r25, 0x00	; 0
    ea80:	a2 cf       	rjmp	.-188    	; 0xe9c6 <fputc>
    ea82:	08 95       	ret

0000ea84 <getchar>:
    ea84:	80 91 c2 1c 	lds	r24, 0x1CC2	; 0x801cc2 <__iob>
    ea88:	90 91 c3 1c 	lds	r25, 0x1CC3	; 0x801cc3 <__iob+0x1>
    ea8c:	46 cf       	rjmp	.-372    	; 0xe91a <fgetc>
    ea8e:	08 95       	ret

0000ea90 <putchar>:
    ea90:	60 91 c4 1c 	lds	r22, 0x1CC4	; 0x801cc4 <__iob+0x2>
    ea94:	70 91 c5 1c 	lds	r23, 0x1CC5	; 0x801cc5 <__iob+0x3>
    ea98:	96 cf       	rjmp	.-212    	; 0xe9c6 <fputc>
    ea9a:	08 95       	ret

0000ea9c <fgets>:
    ea9c:	a0 e0       	ldi	r26, 0x00	; 0
    ea9e:	b0 e0       	ldi	r27, 0x00	; 0
    eaa0:	e4 e5       	ldi	r30, 0x54	; 84
    eaa2:	f5 e7       	ldi	r31, 0x75	; 117
    eaa4:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
    eaa8:	7c 01       	movw	r14, r24
    eaaa:	6a 01       	movw	r12, r20
    eaac:	8b 01       	movw	r16, r22
    eaae:	c0 e0       	ldi	r28, 0x00	; 0
    eab0:	d0 e0       	ldi	r29, 0x00	; 0
    eab2:	01 15       	cp	r16, r1
    eab4:	11 05       	cpc	r17, r1
    eab6:	41 f0       	breq	.+16     	; 0xeac8 <fgets+0x2c>
    eab8:	c6 01       	movw	r24, r12
    eaba:	2f df       	rcall	.-418    	; 0xe91a <fgetc>
    eabc:	8f 3f       	cpi	r24, 0xFF	; 255
    eabe:	2f ef       	ldi	r18, 0xFF	; 255
    eac0:	92 07       	cpc	r25, r18
    eac2:	39 f4       	brne	.+14     	; 0xead2 <fgets+0x36>
    eac4:	20 97       	sbiw	r28, 0x00	; 0
    eac6:	b9 f0       	breq	.+46     	; 0xeaf6 <fgets+0x5a>
    eac8:	ce 0d       	add	r28, r14
    eaca:	df 1d       	adc	r29, r15
    eacc:	18 82       	st	Y, r1
    eace:	c7 01       	movw	r24, r14
    ead0:	14 c0       	rjmp	.+40     	; 0xeafa <fgets+0x5e>
    ead2:	8a 30       	cpi	r24, 0x0A	; 10
    ead4:	91 05       	cpc	r25, r1
    ead6:	c1 f3       	breq	.-16     	; 0xeac8 <fgets+0x2c>
    ead8:	88 30       	cpi	r24, 0x08	; 8
    eada:	91 05       	cpc	r25, r1
    eadc:	21 f4       	brne	.+8      	; 0xeae6 <fgets+0x4a>
    eade:	20 97       	sbiw	r28, 0x00	; 0
    eae0:	39 f0       	breq	.+14     	; 0xeaf0 <fgets+0x54>
    eae2:	21 97       	sbiw	r28, 0x01	; 1
    eae4:	05 c0       	rjmp	.+10     	; 0xeaf0 <fgets+0x54>
    eae6:	f7 01       	movw	r30, r14
    eae8:	ec 0f       	add	r30, r28
    eaea:	fd 1f       	adc	r31, r29
    eaec:	80 83       	st	Z, r24
    eaee:	21 96       	adiw	r28, 0x01	; 1
    eaf0:	01 50       	subi	r16, 0x01	; 1
    eaf2:	11 09       	sbc	r17, r1
    eaf4:	de cf       	rjmp	.-68     	; 0xeab2 <fgets+0x16>
    eaf6:	80 e0       	ldi	r24, 0x00	; 0
    eaf8:	90 e0       	ldi	r25, 0x00	; 0
    eafa:	cd b7       	in	r28, 0x3d	; 61
    eafc:	de b7       	in	r29, 0x3e	; 62
    eafe:	e8 e0       	ldi	r30, 0x08	; 8
    eb00:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

0000eb04 <fputs>:
    eb04:	0f 93       	push	r16
    eb06:	1f 93       	push	r17
    eb08:	cf 93       	push	r28
    eb0a:	df 93       	push	r29
    eb0c:	8b 01       	movw	r16, r22
    eb0e:	ec 01       	movw	r28, r24
    eb10:	89 91       	ld	r24, Y+
    eb12:	88 23       	and	r24, r24
    eb14:	41 f0       	breq	.+16     	; 0xeb26 <fputs+0x22>
    eb16:	b8 01       	movw	r22, r16
    eb18:	90 e0       	ldi	r25, 0x00	; 0
    eb1a:	55 df       	rcall	.-342    	; 0xe9c6 <fputc>
    eb1c:	8f 3f       	cpi	r24, 0xFF	; 255
    eb1e:	2f ef       	ldi	r18, 0xFF	; 255
    eb20:	92 07       	cpc	r25, r18
    eb22:	b1 f7       	brne	.-20     	; 0xeb10 <fputs+0xc>
    eb24:	02 c0       	rjmp	.+4      	; 0xeb2a <fputs+0x26>
    eb26:	80 e0       	ldi	r24, 0x00	; 0
    eb28:	90 e0       	ldi	r25, 0x00	; 0
    eb2a:	df 91       	pop	r29
    eb2c:	cf 91       	pop	r28
    eb2e:	1f 91       	pop	r17
    eb30:	0f 91       	pop	r16
    eb32:	08 95       	ret

0000eb34 <puts>:
    eb34:	cf 93       	push	r28
    eb36:	df 93       	push	r29
    eb38:	ec 01       	movw	r28, r24
    eb3a:	89 91       	ld	r24, Y+
    eb3c:	60 91 c4 1c 	lds	r22, 0x1CC4	; 0x801cc4 <__iob+0x2>
    eb40:	70 91 c5 1c 	lds	r23, 0x1CC5	; 0x801cc5 <__iob+0x3>
    eb44:	88 23       	and	r24, r24
    eb46:	39 f0       	breq	.+14     	; 0xeb56 <puts+0x22>
    eb48:	90 e0       	ldi	r25, 0x00	; 0
    eb4a:	3d df       	rcall	.-390    	; 0xe9c6 <fputc>
    eb4c:	8f 3f       	cpi	r24, 0xFF	; 255
    eb4e:	2f ef       	ldi	r18, 0xFF	; 255
    eb50:	92 07       	cpc	r25, r18
    eb52:	99 f7       	brne	.-26     	; 0xeb3a <puts+0x6>
    eb54:	03 c0       	rjmp	.+6      	; 0xeb5c <puts+0x28>
    eb56:	8a e0       	ldi	r24, 0x0A	; 10
    eb58:	90 e0       	ldi	r25, 0x00	; 0
    eb5a:	35 df       	rcall	.-406    	; 0xe9c6 <fputc>
    eb5c:	df 91       	pop	r29
    eb5e:	cf 91       	pop	r28
    eb60:	08 95       	ret

0000eb62 <fileno>:
    eb62:	00 97       	sbiw	r24, 0x00	; 0
    eb64:	39 f4       	brne	.+14     	; 0xeb74 <fileno+0x12>
    eb66:	89 e0       	ldi	r24, 0x09	; 9
    eb68:	90 e0       	ldi	r25, 0x00	; 0
    eb6a:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    eb6e:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    eb72:	0e c0       	rjmp	.+28     	; 0xeb90 <fileno+0x2e>
    eb74:	e2 ec       	ldi	r30, 0xC2	; 194
    eb76:	fc e1       	ldi	r31, 0x1C	; 28
    eb78:	20 e0       	ldi	r18, 0x00	; 0
    eb7a:	30 e0       	ldi	r19, 0x00	; 0
    eb7c:	41 91       	ld	r20, Z+
    eb7e:	51 91       	ld	r21, Z+
    eb80:	84 17       	cp	r24, r20
    eb82:	95 07       	cpc	r25, r21
    eb84:	41 f0       	breq	.+16     	; 0xeb96 <fileno+0x34>
    eb86:	2f 5f       	subi	r18, 0xFF	; 255
    eb88:	3f 4f       	sbci	r19, 0xFF	; 255
    eb8a:	20 31       	cpi	r18, 0x10	; 16
    eb8c:	31 05       	cpc	r19, r1
    eb8e:	b1 f7       	brne	.-20     	; 0xeb7c <fileno+0x1a>
    eb90:	8f ef       	ldi	r24, 0xFF	; 255
    eb92:	9f ef       	ldi	r25, 0xFF	; 255
    eb94:	08 95       	ret
    eb96:	c9 01       	movw	r24, r18
    eb98:	08 95       	ret

0000eb9a <fileno_to_stream>:
    eb9a:	80 31       	cpi	r24, 0x10	; 16
    eb9c:	91 05       	cpc	r25, r1
    eb9e:	48 f4       	brcc	.+18     	; 0xebb2 <fileno_to_stream+0x18>
    eba0:	88 0f       	add	r24, r24
    eba2:	99 1f       	adc	r25, r25
    eba4:	fc 01       	movw	r30, r24
    eba6:	ee 53       	subi	r30, 0x3E	; 62
    eba8:	f3 4e       	sbci	r31, 0xE3	; 227
    ebaa:	80 81       	ld	r24, Z
    ebac:	91 81       	ldd	r25, Z+1	; 0x01
    ebae:	00 97       	sbiw	r24, 0x00	; 0
    ebb0:	41 f4       	brne	.+16     	; 0xebc2 <fileno_to_stream+0x28>
    ebb2:	89 e0       	ldi	r24, 0x09	; 9
    ebb4:	90 e0       	ldi	r25, 0x00	; 0
    ebb6:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    ebba:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    ebbe:	80 e0       	ldi	r24, 0x00	; 0
    ebc0:	90 e0       	ldi	r25, 0x00	; 0
    ebc2:	08 95       	ret

0000ebc4 <mctime>:
    ebc4:	a4 e0       	ldi	r26, 0x04	; 4
    ebc6:	b0 e0       	ldi	r27, 0x00	; 0
    ebc8:	e8 ee       	ldi	r30, 0xE8	; 232
    ebca:	f5 e7       	ldi	r31, 0x75	; 117
    ebcc:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
    ebd0:	69 83       	std	Y+1, r22	; 0x01
    ebd2:	7a 83       	std	Y+2, r23	; 0x02
    ebd4:	8b 83       	std	Y+3, r24	; 0x03
    ebd6:	9c 83       	std	Y+4, r25	; 0x04
    ebd8:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    ebdc:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    ebe0:	ce 01       	movw	r24, r28
    ebe2:	01 96       	adiw	r24, 0x01	; 1
    ebe4:	0e 94 2a 3b 	call	0x7654	; 0x7654 <ctime_gm>
    ebe8:	fc 01       	movw	r30, r24
    ebea:	01 90       	ld	r0, Z+
    ebec:	00 20       	and	r0, r0
    ebee:	e9 f7       	brne	.-6      	; 0xebea <mctime+0x26>
    ebf0:	31 97       	sbiw	r30, 0x01	; 1
    ebf2:	e8 1b       	sub	r30, r24
    ebf4:	f9 0b       	sbc	r31, r25
    ebf6:	39 f0       	breq	.+14     	; 0xec06 <mctime+0x42>
    ebf8:	31 97       	sbiw	r30, 0x01	; 1
    ebfa:	e8 0f       	add	r30, r24
    ebfc:	f9 1f       	adc	r31, r25
    ebfe:	20 81       	ld	r18, Z
    ec00:	2a 30       	cpi	r18, 0x0A	; 10
    ec02:	09 f4       	brne	.+2      	; 0xec06 <mctime+0x42>
    ec04:	10 82       	st	Z, r1
    ec06:	24 96       	adiw	r28, 0x04	; 4
    ec08:	e2 e0       	ldi	r30, 0x02	; 2
    ec0a:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

0000ec0e <basename>:
    ec0e:	00 97       	sbiw	r24, 0x00	; 0
    ec10:	49 f0       	breq	.+18     	; 0xec24 <basename+0x16>
    ec12:	fc 01       	movw	r30, r24
    ec14:	21 91       	ld	r18, Z+
    ec16:	22 23       	and	r18, r18
    ec18:	21 f0       	breq	.+8      	; 0xec22 <basename+0x14>
    ec1a:	2f 32       	cpi	r18, 0x2F	; 47
    ec1c:	d9 f7       	brne	.-10     	; 0xec14 <basename+0x6>
    ec1e:	cf 01       	movw	r24, r30
    ec20:	f9 cf       	rjmp	.-14     	; 0xec14 <basename+0x6>
    ec22:	08 95       	ret
    ec24:	8d e2       	ldi	r24, 0x2D	; 45
    ec26:	9c e0       	ldi	r25, 0x0C	; 12
    ec28:	08 95       	ret

0000ec2a <chdir>:
    ec2a:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    ec2e:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    ec32:	0e 94 f9 5d 	call	0xbbf2	; 0xbbf2 <f_chdir>
    ec36:	00 97       	sbiw	r24, 0x00	; 0
    ec38:	a1 f0       	breq	.+40     	; 0xec62 <chdir+0x38>
    ec3a:	84 31       	cpi	r24, 0x14	; 20
    ec3c:	91 05       	cpc	r25, r1
    ec3e:	40 f4       	brcc	.+16     	; 0xec50 <chdir+0x26>
    ec40:	fc 01       	movw	r30, r24
    ec42:	ea 55       	subi	r30, 0x5A	; 90
    ec44:	f4 4f       	sbci	r31, 0xF4	; 244
    ec46:	80 81       	ld	r24, Z
    ec48:	08 2e       	mov	r0, r24
    ec4a:	00 0c       	add	r0, r0
    ec4c:	99 0b       	sbc	r25, r25
    ec4e:	02 c0       	rjmp	.+4      	; 0xec54 <chdir+0x2a>
    ec50:	83 e2       	ldi	r24, 0x23	; 35
    ec52:	90 e0       	ldi	r25, 0x00	; 0
    ec54:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    ec58:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    ec5c:	8f ef       	ldi	r24, 0xFF	; 255
    ec5e:	9f ef       	ldi	r25, 0xFF	; 255
    ec60:	08 95       	ret
    ec62:	80 e0       	ldi	r24, 0x00	; 0
    ec64:	90 e0       	ldi	r25, 0x00	; 0
    ec66:	08 95       	ret

0000ec68 <chmod>:
    ec68:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    ec6c:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    ec70:	42 79       	andi	r20, 0x92	; 146
    ec72:	55 27       	eor	r21, r21
    ec74:	66 27       	eor	r22, r22
    ec76:	77 27       	eor	r23, r23
    ec78:	45 2b       	or	r20, r21
    ec7a:	46 2b       	or	r20, r22
    ec7c:	47 2b       	or	r20, r23
    ec7e:	19 f0       	breq	.+6      	; 0xec86 <chmod+0x1e>
    ec80:	80 e0       	ldi	r24, 0x00	; 0
    ec82:	90 e0       	ldi	r25, 0x00	; 0
    ec84:	08 95       	ret
    ec86:	41 e0       	ldi	r20, 0x01	; 1
    ec88:	61 e0       	ldi	r22, 0x01	; 1
    ec8a:	0e 94 da 66 	call	0xcdb4	; 0xcdb4 <f_chmod>
    ec8e:	00 97       	sbiw	r24, 0x00	; 0
    ec90:	b9 f3       	breq	.-18     	; 0xec80 <chmod+0x18>
    ec92:	84 31       	cpi	r24, 0x14	; 20
    ec94:	91 05       	cpc	r25, r1
    ec96:	40 f4       	brcc	.+16     	; 0xeca8 <chmod+0x40>
    ec98:	fc 01       	movw	r30, r24
    ec9a:	ea 55       	subi	r30, 0x5A	; 90
    ec9c:	f4 4f       	sbci	r31, 0xF4	; 244
    ec9e:	80 81       	ld	r24, Z
    eca0:	08 2e       	mov	r0, r24
    eca2:	00 0c       	add	r0, r0
    eca4:	99 0b       	sbc	r25, r25
    eca6:	02 c0       	rjmp	.+4      	; 0xecac <chmod+0x44>
    eca8:	83 e2       	ldi	r24, 0x23	; 35
    ecaa:	90 e0       	ldi	r25, 0x00	; 0
    ecac:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    ecb0:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    ecb4:	8f ef       	ldi	r24, 0xFF	; 255
    ecb6:	9f ef       	ldi	r25, 0xFF	; 255
    ecb8:	08 95       	ret

0000ecba <getcwd>:
    ecba:	cf 93       	push	r28
    ecbc:	df 93       	push	r29
    ecbe:	d8 2f       	mov	r29, r24
    ecc0:	c9 2f       	mov	r28, r25
    ecc2:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    ecc6:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    ecca:	0e 94 54 5e 	call	0xbca8	; 0xbca8 <f_getcwd>
    ecce:	00 97       	sbiw	r24, 0x00	; 0
    ecd0:	a1 f0       	breq	.+40     	; 0xecfa <getcwd+0x40>
    ecd2:	84 31       	cpi	r24, 0x14	; 20
    ecd4:	91 05       	cpc	r25, r1
    ecd6:	40 f4       	brcc	.+16     	; 0xece8 <getcwd+0x2e>
    ecd8:	fc 01       	movw	r30, r24
    ecda:	ea 55       	subi	r30, 0x5A	; 90
    ecdc:	f4 4f       	sbci	r31, 0xF4	; 244
    ecde:	80 81       	ld	r24, Z
    ece0:	08 2e       	mov	r0, r24
    ece2:	00 0c       	add	r0, r0
    ece4:	99 0b       	sbc	r25, r25
    ece6:	02 c0       	rjmp	.+4      	; 0xecec <getcwd+0x32>
    ece8:	83 e2       	ldi	r24, 0x23	; 35
    ecea:	90 e0       	ldi	r25, 0x00	; 0
    ecec:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    ecf0:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    ecf4:	80 e0       	ldi	r24, 0x00	; 0
    ecf6:	90 e0       	ldi	r25, 0x00	; 0
    ecf8:	02 c0       	rjmp	.+4      	; 0xecfe <getcwd+0x44>
    ecfa:	8d 2f       	mov	r24, r29
    ecfc:	9c 2f       	mov	r25, r28
    ecfe:	df 91       	pop	r29
    ed00:	cf 91       	pop	r28
    ed02:	08 95       	ret

0000ed04 <mkdir>:
    ed04:	cf 93       	push	r28
    ed06:	df 93       	push	r29
    ed08:	ec 01       	movw	r28, r24
    ed0a:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    ed0e:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    ed12:	41 15       	cp	r20, r1
    ed14:	51 05       	cpc	r21, r1
    ed16:	61 05       	cpc	r22, r1
    ed18:	71 05       	cpc	r23, r1
    ed1a:	41 f4       	brne	.+16     	; 0xed2c <mkdir+0x28>
    ed1c:	ce 01       	movw	r24, r28
    ed1e:	0e 94 d5 64 	call	0xc9aa	; 0xc9aa <f_mkdir>
    ed22:	00 97       	sbiw	r24, 0x00	; 0
    ed24:	39 f4       	brne	.+14     	; 0xed34 <mkdir+0x30>
    ed26:	80 e0       	ldi	r24, 0x00	; 0
    ed28:	90 e0       	ldi	r25, 0x00	; 0
    ed2a:	17 c0       	rjmp	.+46     	; 0xed5a <mkdir+0x56>
    ed2c:	9d df       	rcall	.-198    	; 0xec68 <chmod>
    ed2e:	89 2b       	or	r24, r25
    ed30:	a9 f3       	breq	.-22     	; 0xed1c <mkdir+0x18>
    ed32:	11 c0       	rjmp	.+34     	; 0xed56 <mkdir+0x52>
    ed34:	84 31       	cpi	r24, 0x14	; 20
    ed36:	91 05       	cpc	r25, r1
    ed38:	40 f4       	brcc	.+16     	; 0xed4a <mkdir+0x46>
    ed3a:	fc 01       	movw	r30, r24
    ed3c:	ea 55       	subi	r30, 0x5A	; 90
    ed3e:	f4 4f       	sbci	r31, 0xF4	; 244
    ed40:	80 81       	ld	r24, Z
    ed42:	08 2e       	mov	r0, r24
    ed44:	00 0c       	add	r0, r0
    ed46:	99 0b       	sbc	r25, r25
    ed48:	02 c0       	rjmp	.+4      	; 0xed4e <mkdir+0x4a>
    ed4a:	83 e2       	ldi	r24, 0x23	; 35
    ed4c:	90 e0       	ldi	r25, 0x00	; 0
    ed4e:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    ed52:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    ed56:	8f ef       	ldi	r24, 0xFF	; 255
    ed58:	9f ef       	ldi	r25, 0xFF	; 255
    ed5a:	df 91       	pop	r29
    ed5c:	cf 91       	pop	r28
    ed5e:	08 95       	ret

0000ed60 <rename>:
    ed60:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    ed64:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    ed68:	0e 94 c5 65 	call	0xcb8a	; 0xcb8a <f_rename>
    ed6c:	00 97       	sbiw	r24, 0x00	; 0
    ed6e:	a1 f0       	breq	.+40     	; 0xed98 <rename+0x38>
    ed70:	84 31       	cpi	r24, 0x14	; 20
    ed72:	91 05       	cpc	r25, r1
    ed74:	40 f4       	brcc	.+16     	; 0xed86 <rename+0x26>
    ed76:	fc 01       	movw	r30, r24
    ed78:	ea 55       	subi	r30, 0x5A	; 90
    ed7a:	f4 4f       	sbci	r31, 0xF4	; 244
    ed7c:	80 81       	ld	r24, Z
    ed7e:	08 2e       	mov	r0, r24
    ed80:	00 0c       	add	r0, r0
    ed82:	99 0b       	sbc	r25, r25
    ed84:	02 c0       	rjmp	.+4      	; 0xed8a <rename+0x2a>
    ed86:	83 e2       	ldi	r24, 0x23	; 35
    ed88:	90 e0       	ldi	r25, 0x00	; 0
    ed8a:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    ed8e:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    ed92:	8f ef       	ldi	r24, 0xFF	; 255
    ed94:	9f ef       	ldi	r25, 0xFF	; 255
    ed96:	08 95       	ret
    ed98:	80 e0       	ldi	r24, 0x00	; 0
    ed9a:	90 e0       	ldi	r25, 0x00	; 0
    ed9c:	08 95       	ret

0000ed9e <unlink>:
    ed9e:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    eda2:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    eda6:	0e 94 2e 64 	call	0xc85c	; 0xc85c <f_unlink>
    edaa:	00 97       	sbiw	r24, 0x00	; 0
    edac:	a1 f0       	breq	.+40     	; 0xedd6 <unlink+0x38>
    edae:	84 31       	cpi	r24, 0x14	; 20
    edb0:	91 05       	cpc	r25, r1
    edb2:	40 f4       	brcc	.+16     	; 0xedc4 <unlink+0x26>
    edb4:	fc 01       	movw	r30, r24
    edb6:	ea 55       	subi	r30, 0x5A	; 90
    edb8:	f4 4f       	sbci	r31, 0xF4	; 244
    edba:	80 81       	ld	r24, Z
    edbc:	08 2e       	mov	r0, r24
    edbe:	00 0c       	add	r0, r0
    edc0:	99 0b       	sbc	r25, r25
    edc2:	02 c0       	rjmp	.+4      	; 0xedc8 <unlink+0x2a>
    edc4:	83 e2       	ldi	r24, 0x23	; 35
    edc6:	90 e0       	ldi	r25, 0x00	; 0
    edc8:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    edcc:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    edd0:	8f ef       	ldi	r24, 0xFF	; 255
    edd2:	9f ef       	ldi	r25, 0xFF	; 255
    edd4:	08 95       	ret
    edd6:	80 e0       	ldi	r24, 0x00	; 0
    edd8:	90 e0       	ldi	r25, 0x00	; 0
    edda:	08 95       	ret

0000eddc <rmdir>:
    eddc:	e0 cf       	rjmp	.-64     	; 0xed9e <unlink>
    edde:	08 95       	ret

0000ede0 <closedir>:
    ede0:	0e 94 b7 62 	call	0xc56e	; 0xc56e <f_closedir>
    ede4:	00 97       	sbiw	r24, 0x00	; 0
    ede6:	a1 f0       	breq	.+40     	; 0xee10 <closedir+0x30>
    ede8:	84 31       	cpi	r24, 0x14	; 20
    edea:	91 05       	cpc	r25, r1
    edec:	40 f4       	brcc	.+16     	; 0xedfe <closedir+0x1e>
    edee:	fc 01       	movw	r30, r24
    edf0:	ea 55       	subi	r30, 0x5A	; 90
    edf2:	f4 4f       	sbci	r31, 0xF4	; 244
    edf4:	80 81       	ld	r24, Z
    edf6:	08 2e       	mov	r0, r24
    edf8:	00 0c       	add	r0, r0
    edfa:	99 0b       	sbc	r25, r25
    edfc:	02 c0       	rjmp	.+4      	; 0xee02 <closedir+0x22>
    edfe:	83 e2       	ldi	r24, 0x23	; 35
    ee00:	90 e0       	ldi	r25, 0x00	; 0
    ee02:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    ee06:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    ee0a:	8f ef       	ldi	r24, 0xFF	; 255
    ee0c:	9f ef       	ldi	r25, 0xFF	; 255
    ee0e:	08 95       	ret
    ee10:	80 e0       	ldi	r24, 0x00	; 0
    ee12:	90 e0       	ldi	r25, 0x00	; 0
    ee14:	08 95       	ret

0000ee16 <opendir>:
    ee16:	bc 01       	movw	r22, r24
    ee18:	83 e3       	ldi	r24, 0x33	; 51
    ee1a:	99 e1       	ldi	r25, 0x19	; 25
    ee1c:	0e 94 46 62 	call	0xc48c	; 0xc48c <f_opendir>
    ee20:	00 97       	sbiw	r24, 0x00	; 0
    ee22:	a1 f0       	breq	.+40     	; 0xee4c <opendir+0x36>
    ee24:	84 31       	cpi	r24, 0x14	; 20
    ee26:	91 05       	cpc	r25, r1
    ee28:	40 f4       	brcc	.+16     	; 0xee3a <opendir+0x24>
    ee2a:	fc 01       	movw	r30, r24
    ee2c:	ea 55       	subi	r30, 0x5A	; 90
    ee2e:	f4 4f       	sbci	r31, 0xF4	; 244
    ee30:	80 81       	ld	r24, Z
    ee32:	08 2e       	mov	r0, r24
    ee34:	00 0c       	add	r0, r0
    ee36:	99 0b       	sbc	r25, r25
    ee38:	02 c0       	rjmp	.+4      	; 0xee3e <opendir+0x28>
    ee3a:	83 e2       	ldi	r24, 0x23	; 35
    ee3c:	90 e0       	ldi	r25, 0x00	; 0
    ee3e:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    ee42:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    ee46:	80 e0       	ldi	r24, 0x00	; 0
    ee48:	90 e0       	ldi	r25, 0x00	; 0
    ee4a:	08 95       	ret
    ee4c:	83 e3       	ldi	r24, 0x33	; 51
    ee4e:	99 e1       	ldi	r25, 0x19	; 25
    ee50:	08 95       	ret

0000ee52 <readdir>:
    ee52:	a6 e1       	ldi	r26, 0x16	; 22
    ee54:	b1 e0       	ldi	r27, 0x01	; 1
    ee56:	ef e2       	ldi	r30, 0x2F	; 47
    ee58:	f7 e7       	ldi	r31, 0x77	; 119
    ee5a:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__prologue_saves__+0x1c>
    ee5e:	10 92 34 18 	sts	0x1834, r1	; 0x801834 <_de>
    ee62:	be 01       	movw	r22, r28
    ee64:	6f 5f       	subi	r22, 0xFF	; 255
    ee66:	7f 4f       	sbci	r23, 0xFF	; 255
    ee68:	0e 94 cc 62 	call	0xc598	; 0xc598 <f_readdir>
    ee6c:	00 97       	sbiw	r24, 0x00	; 0
    ee6e:	a1 f0       	breq	.+40     	; 0xee98 <readdir+0x46>
    ee70:	84 31       	cpi	r24, 0x14	; 20
    ee72:	91 05       	cpc	r25, r1
    ee74:	40 f4       	brcc	.+16     	; 0xee86 <readdir+0x34>
    ee76:	fc 01       	movw	r30, r24
    ee78:	ea 55       	subi	r30, 0x5A	; 90
    ee7a:	f4 4f       	sbci	r31, 0xF4	; 244
    ee7c:	80 81       	ld	r24, Z
    ee7e:	08 2e       	mov	r0, r24
    ee80:	00 0c       	add	r0, r0
    ee82:	99 0b       	sbc	r25, r25
    ee84:	02 c0       	rjmp	.+4      	; 0xee8a <readdir+0x38>
    ee86:	83 e2       	ldi	r24, 0x23	; 35
    ee88:	90 e0       	ldi	r25, 0x00	; 0
    ee8a:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    ee8e:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    ee92:	80 e0       	ldi	r24, 0x00	; 0
    ee94:	90 e0       	ldi	r25, 0x00	; 0
    ee96:	16 c0       	rjmp	.+44     	; 0xeec4 <readdir+0x72>
    ee98:	be 01       	movw	r22, r28
    ee9a:	69 5e       	subi	r22, 0xE9	; 233
    ee9c:	7f 4f       	sbci	r23, 0xFF	; 255
    ee9e:	fb 01       	movw	r30, r22
    eea0:	01 90       	ld	r0, Z+
    eea2:	00 20       	and	r0, r0
    eea4:	e9 f7       	brne	.-6      	; 0xeea0 <readdir+0x4e>
    eea6:	31 97       	sbiw	r30, 0x01	; 1
    eea8:	8f 01       	movw	r16, r30
    eeaa:	06 1b       	sub	r16, r22
    eeac:	17 0b       	sbc	r17, r23
    eeae:	a8 01       	movw	r20, r16
    eeb0:	84 e3       	ldi	r24, 0x34	; 52
    eeb2:	98 e1       	ldi	r25, 0x18	; 24
    eeb4:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <strncpy>
    eeb8:	f8 01       	movw	r30, r16
    eeba:	ec 5c       	subi	r30, 0xCC	; 204
    eebc:	f7 4e       	sbci	r31, 0xE7	; 231
    eebe:	10 82       	st	Z, r1
    eec0:	84 e3       	ldi	r24, 0x34	; 52
    eec2:	98 e1       	ldi	r25, 0x18	; 24
    eec4:	ca 5e       	subi	r28, 0xEA	; 234
    eec6:	de 4f       	sbci	r29, 0xFE	; 254
    eec8:	e4 e0       	ldi	r30, 0x04	; 4
    eeca:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

0000eece <perror>:
    eece:	ad b7       	in	r26, 0x3d	; 61
    eed0:	be b7       	in	r27, 0x3e	; 62
    eed2:	17 97       	sbiw	r26, 0x07	; 7
    eed4:	0f b6       	in	r0, 0x3f	; 63
    eed6:	f8 94       	cli
    eed8:	be bf       	out	0x3e, r27	; 62
    eeda:	0f be       	out	0x3f, r0	; 63
    eedc:	ad bf       	out	0x3d, r26	; 61
    eede:	20 91 c0 1c 	lds	r18, 0x1CC0	; 0x801cc0 <errno>
    eee2:	30 91 c1 1c 	lds	r19, 0x1CC1	; 0x801cc1 <errno+0x1>
    eee6:	23 32       	cpi	r18, 0x23	; 35
    eee8:	31 05       	cpc	r19, r1
    eeea:	40 f4       	brcc	.+16     	; 0xeefc <perror+0x2e>
    eeec:	22 0f       	add	r18, r18
    eeee:	33 1f       	adc	r19, r19
    eef0:	f9 01       	movw	r30, r18
    eef2:	ea 5c       	subi	r30, 0xCA	; 202
    eef4:	fe 4f       	sbci	r31, 0xFE	; 254
    eef6:	20 81       	ld	r18, Z
    eef8:	31 81       	ldd	r19, Z+1	; 0x01
    eefa:	04 c0       	rjmp	.+8      	; 0xef04 <perror+0x36>
    eefc:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    ef00:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    ef04:	00 97       	sbiw	r24, 0x00	; 0
    ef06:	99 f0       	breq	.+38     	; 0xef2e <perror+0x60>
    ef08:	fc 01       	movw	r30, r24
    ef0a:	40 81       	ld	r20, Z
    ef0c:	44 23       	and	r20, r20
    ef0e:	79 f0       	breq	.+30     	; 0xef2e <perror+0x60>
    ef10:	ed b7       	in	r30, 0x3d	; 61
    ef12:	fe b7       	in	r31, 0x3e	; 62
    ef14:	37 83       	std	Z+7, r19	; 0x07
    ef16:	26 83       	std	Z+6, r18	; 0x06
    ef18:	95 83       	std	Z+5, r25	; 0x05
    ef1a:	84 83       	std	Z+4, r24	; 0x04
    ef1c:	83 e8       	ldi	r24, 0x83	; 131
    ef1e:	9b e0       	ldi	r25, 0x0B	; 11
    ef20:	a0 e0       	ldi	r26, 0x00	; 0
    ef22:	81 83       	std	Z+1, r24	; 0x01
    ef24:	92 83       	std	Z+2, r25	; 0x02
    ef26:	a3 83       	std	Z+3, r26	; 0x03
    ef28:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    ef2c:	0c c0       	rjmp	.+24     	; 0xef46 <perror+0x78>
    ef2e:	ed b7       	in	r30, 0x3d	; 61
    ef30:	fe b7       	in	r31, 0x3e	; 62
    ef32:	35 83       	std	Z+5, r19	; 0x05
    ef34:	24 83       	std	Z+4, r18	; 0x04
    ef36:	8f e7       	ldi	r24, 0x7F	; 127
    ef38:	9b e0       	ldi	r25, 0x0B	; 11
    ef3a:	a0 e0       	ldi	r26, 0x00	; 0
    ef3c:	81 83       	std	Z+1, r24	; 0x01
    ef3e:	92 83       	std	Z+2, r25	; 0x02
    ef40:	a3 83       	std	Z+3, r26	; 0x03
    ef42:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    ef46:	ad b7       	in	r26, 0x3d	; 61
    ef48:	be b7       	in	r27, 0x3e	; 62
    ef4a:	17 96       	adiw	r26, 0x07	; 7
    ef4c:	0f b6       	in	r0, 0x3f	; 63
    ef4e:	f8 94       	cli
    ef50:	be bf       	out	0x3e, r27	; 62
    ef52:	0f be       	out	0x3f, r0	; 63
    ef54:	ad bf       	out	0x3d, r26	; 61
    ef56:	08 95       	ret

0000ef58 <fdevopen>:
    ef58:	0f 93       	push	r16
    ef5a:	1f 93       	push	r17
    ef5c:	cf 93       	push	r28
    ef5e:	df 93       	push	r29
    ef60:	00 97       	sbiw	r24, 0x00	; 0
    ef62:	31 f4       	brne	.+12     	; 0xef70 <fdevopen+0x18>
    ef64:	61 15       	cp	r22, r1
    ef66:	71 05       	cpc	r23, r1
    ef68:	19 f4       	brne	.+6      	; 0xef70 <fdevopen+0x18>
    ef6a:	80 e0       	ldi	r24, 0x00	; 0
    ef6c:	90 e0       	ldi	r25, 0x00	; 0
    ef6e:	3a c0       	rjmp	.+116    	; 0xefe4 <fdevopen+0x8c>
    ef70:	8b 01       	movw	r16, r22
    ef72:	ec 01       	movw	r28, r24
    ef74:	6e e0       	ldi	r22, 0x0E	; 14
    ef76:	70 e0       	ldi	r23, 0x00	; 0
    ef78:	81 e0       	ldi	r24, 0x01	; 1
    ef7a:	90 e0       	ldi	r25, 0x00	; 0
    ef7c:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <safecalloc>
    ef80:	fc 01       	movw	r30, r24
    ef82:	89 2b       	or	r24, r25
    ef84:	91 f3       	breq	.-28     	; 0xef6a <fdevopen+0x12>
    ef86:	80 e8       	ldi	r24, 0x80	; 128
    ef88:	83 83       	std	Z+3, r24	; 0x03
    ef8a:	01 15       	cp	r16, r1
    ef8c:	11 05       	cpc	r17, r1
    ef8e:	71 f0       	breq	.+28     	; 0xefac <fdevopen+0x54>
    ef90:	13 87       	std	Z+11, r17	; 0x0b
    ef92:	02 87       	std	Z+10, r16	; 0x0a
    ef94:	81 e8       	ldi	r24, 0x81	; 129
    ef96:	83 83       	std	Z+3, r24	; 0x03
    ef98:	80 91 c2 1c 	lds	r24, 0x1CC2	; 0x801cc2 <__iob>
    ef9c:	90 91 c3 1c 	lds	r25, 0x1CC3	; 0x801cc3 <__iob+0x1>
    efa0:	89 2b       	or	r24, r25
    efa2:	21 f4       	brne	.+8      	; 0xefac <fdevopen+0x54>
    efa4:	f0 93 c3 1c 	sts	0x1CC3, r31	; 0x801cc3 <__iob+0x1>
    efa8:	e0 93 c2 1c 	sts	0x1CC2, r30	; 0x801cc2 <__iob>
    efac:	20 97       	sbiw	r28, 0x00	; 0
    efae:	c9 f0       	breq	.+50     	; 0xefe2 <fdevopen+0x8a>
    efb0:	d1 87       	std	Z+9, r29	; 0x09
    efb2:	c0 87       	std	Z+8, r28	; 0x08
    efb4:	83 81       	ldd	r24, Z+3	; 0x03
    efb6:	82 60       	ori	r24, 0x02	; 2
    efb8:	83 83       	std	Z+3, r24	; 0x03
    efba:	80 91 c4 1c 	lds	r24, 0x1CC4	; 0x801cc4 <__iob+0x2>
    efbe:	90 91 c5 1c 	lds	r25, 0x1CC5	; 0x801cc5 <__iob+0x3>
    efc2:	89 2b       	or	r24, r25
    efc4:	21 f4       	brne	.+8      	; 0xefce <fdevopen+0x76>
    efc6:	f0 93 c5 1c 	sts	0x1CC5, r31	; 0x801cc5 <__iob+0x3>
    efca:	e0 93 c4 1c 	sts	0x1CC4, r30	; 0x801cc4 <__iob+0x2>
    efce:	80 91 c6 1c 	lds	r24, 0x1CC6	; 0x801cc6 <__iob+0x4>
    efd2:	90 91 c7 1c 	lds	r25, 0x1CC7	; 0x801cc7 <__iob+0x5>
    efd6:	89 2b       	or	r24, r25
    efd8:	21 f4       	brne	.+8      	; 0xefe2 <fdevopen+0x8a>
    efda:	f0 93 c7 1c 	sts	0x1CC7, r31	; 0x801cc7 <__iob+0x5>
    efde:	e0 93 c6 1c 	sts	0x1CC6, r30	; 0x801cc6 <__iob+0x4>
    efe2:	cf 01       	movw	r24, r30
    efe4:	df 91       	pop	r29
    efe6:	cf 91       	pop	r28
    efe8:	1f 91       	pop	r17
    efea:	0f 91       	pop	r16
    efec:	08 95       	ret

0000efee <fat_time_to_unix>:
    efee:	a6 e1       	ldi	r26, 0x16	; 22
    eff0:	b0 e0       	ldi	r27, 0x00	; 0
    eff2:	ed ef       	ldi	r30, 0xFD	; 253
    eff4:	f7 e7       	ldi	r31, 0x77	; 119
    eff6:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
    effa:	fe 01       	movw	r30, r28
    effc:	31 96       	adiw	r30, 0x01	; 1
    effe:	26 e1       	ldi	r18, 0x16	; 22
    f000:	df 01       	movw	r26, r30
    f002:	1d 92       	st	X+, r1
    f004:	2a 95       	dec	r18
    f006:	e9 f7       	brne	.-6      	; 0xf002 <fat_time_to_unix+0x14>
    f008:	9b 01       	movw	r18, r22
    f00a:	22 0f       	add	r18, r18
    f00c:	33 1f       	adc	r19, r19
    f00e:	2e 73       	andi	r18, 0x3E	; 62
    f010:	33 27       	eor	r19, r19
    f012:	3a 83       	std	Y+2, r19	; 0x02
    f014:	29 83       	std	Y+1, r18	; 0x01
    f016:	9b 01       	movw	r18, r22
    f018:	55 e0       	ldi	r21, 0x05	; 5
    f01a:	36 95       	lsr	r19
    f01c:	27 95       	ror	r18
    f01e:	5a 95       	dec	r21
    f020:	e1 f7       	brne	.-8      	; 0xf01a <fat_time_to_unix+0x2c>
    f022:	2f 73       	andi	r18, 0x3F	; 63
    f024:	33 27       	eor	r19, r19
    f026:	3c 83       	std	Y+4, r19	; 0x04
    f028:	2b 83       	std	Y+3, r18	; 0x03
    f02a:	27 2f       	mov	r18, r23
    f02c:	26 95       	lsr	r18
    f02e:	26 95       	lsr	r18
    f030:	26 95       	lsr	r18
    f032:	2d 83       	std	Y+5, r18	; 0x05
    f034:	1e 82       	std	Y+6, r1	; 0x06
    f036:	9c 01       	movw	r18, r24
    f038:	2f 71       	andi	r18, 0x1F	; 31
    f03a:	33 27       	eor	r19, r19
    f03c:	38 87       	std	Y+8, r19	; 0x08
    f03e:	2f 83       	std	Y+7, r18	; 0x07
    f040:	9c 01       	movw	r18, r24
    f042:	65 e0       	ldi	r22, 0x05	; 5
    f044:	36 95       	lsr	r19
    f046:	27 95       	ror	r18
    f048:	6a 95       	dec	r22
    f04a:	e1 f7       	brne	.-8      	; 0xf044 <fat_time_to_unix+0x56>
    f04c:	2f 70       	andi	r18, 0x0F	; 15
    f04e:	33 27       	eor	r19, r19
    f050:	21 50       	subi	r18, 0x01	; 1
    f052:	31 09       	sbc	r19, r1
    f054:	3a 87       	std	Y+10, r19	; 0x0a
    f056:	29 87       	std	Y+9, r18	; 0x09
    f058:	9c 01       	movw	r18, r24
    f05a:	23 2f       	mov	r18, r19
    f05c:	33 27       	eor	r19, r19
    f05e:	26 95       	lsr	r18
    f060:	20 5b       	subi	r18, 0xB0	; 176
    f062:	3f 4f       	sbci	r19, 0xFF	; 255
    f064:	3c 87       	std	Y+12, r19	; 0x0c
    f066:	2b 87       	std	Y+11, r18	; 0x0b
    f068:	cf 01       	movw	r24, r30
    f06a:	0e 94 75 38 	call	0x70ea	; 0x70ea <timegm>
    f06e:	66 96       	adiw	r28, 0x16	; 22
    f070:	e2 e0       	ldi	r30, 0x02	; 2
    f072:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

0000f076 <stat>:
    f076:	a6 e1       	ldi	r26, 0x16	; 22
    f078:	b1 e0       	ldi	r27, 0x01	; 1
    f07a:	e1 e4       	ldi	r30, 0x41	; 65
    f07c:	f8 e7       	ldi	r31, 0x78	; 120
    f07e:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
    f082:	6c 01       	movw	r12, r24
    f084:	8b 01       	movw	r16, r22
    f086:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    f08a:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    f08e:	6c ef       	ldi	r22, 0xFC	; 252
    f090:	78 e0       	ldi	r23, 0x08	; 8
    f092:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
    f096:	89 2b       	or	r24, r25
    f098:	01 f1       	breq	.+64     	; 0xf0da <stat+0x64>
    f09a:	f8 01       	movw	r30, r16
    f09c:	14 a2       	std	Z+36, r1	; 0x24
    f09e:	15 a2       	std	Z+37, r1	; 0x25
    f0a0:	16 a2       	std	Z+38, r1	; 0x26
    f0a2:	17 a2       	std	Z+39, r1	; 0x27
    f0a4:	10 a6       	std	Z+40, r1	; 0x28
    f0a6:	11 a6       	std	Z+41, r1	; 0x29
    f0a8:	12 a6       	std	Z+42, r1	; 0x2a
    f0aa:	13 a6       	std	Z+43, r1	; 0x2b
    f0ac:	14 a6       	std	Z+44, r1	; 0x2c
    f0ae:	15 a6       	std	Z+45, r1	; 0x2d
    f0b0:	16 a6       	std	Z+46, r1	; 0x2e
    f0b2:	17 a6       	std	Z+47, r1	; 0x2f
    f0b4:	11 8a       	std	Z+17, r1	; 0x11
    f0b6:	10 8a       	std	Z+16, r1	; 0x10
    f0b8:	13 8a       	std	Z+19, r1	; 0x13
    f0ba:	12 8a       	std	Z+18, r1	; 0x12
    f0bc:	10 8e       	std	Z+24, r1	; 0x18
    f0be:	11 8e       	std	Z+25, r1	; 0x19
    f0c0:	12 8e       	std	Z+26, r1	; 0x1a
    f0c2:	13 8e       	std	Z+27, r1	; 0x1b
    f0c4:	80 e0       	ldi	r24, 0x00	; 0
    f0c6:	90 e4       	ldi	r25, 0x40	; 64
    f0c8:	a0 e0       	ldi	r26, 0x00	; 0
    f0ca:	b0 e0       	ldi	r27, 0x00	; 0
    f0cc:	80 87       	std	Z+8, r24	; 0x08
    f0ce:	91 87       	std	Z+9, r25	; 0x09
    f0d0:	a2 87       	std	Z+10, r26	; 0x0a
    f0d2:	b3 87       	std	Z+11, r27	; 0x0b
    f0d4:	e1 2c       	mov	r14, r1
    f0d6:	f1 2c       	mov	r15, r1
    f0d8:	62 c0       	rjmp	.+196    	; 0xf19e <stat+0x128>
    f0da:	66 ea       	ldi	r22, 0xA6	; 166
    f0dc:	78 e0       	ldi	r23, 0x08	; 8
    f0de:	c6 01       	movw	r24, r12
    f0e0:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
    f0e4:	89 2b       	or	r24, r25
    f0e6:	c9 f6       	brne	.-78     	; 0xf09a <stat+0x24>
    f0e8:	6d ef       	ldi	r22, 0xFD	; 253
    f0ea:	72 e1       	ldi	r23, 0x12	; 18
    f0ec:	c6 01       	movw	r24, r12
    f0ee:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
    f0f2:	7c 01       	movw	r14, r24
    f0f4:	89 2b       	or	r24, r25
    f0f6:	89 f6       	brne	.-94     	; 0xf09a <stat+0x24>
    f0f8:	be 01       	movw	r22, r28
    f0fa:	6f 5f       	subi	r22, 0xFF	; 255
    f0fc:	7f 4f       	sbci	r23, 0xFF	; 255
    f0fe:	c6 01       	movw	r24, r12
    f100:	0e 94 10 63 	call	0xc620	; 0xc620 <f_stat>
    f104:	00 97       	sbiw	r24, 0x00	; 0
    f106:	a9 f0       	breq	.+42     	; 0xf132 <stat+0xbc>
    f108:	84 31       	cpi	r24, 0x14	; 20
    f10a:	91 05       	cpc	r25, r1
    f10c:	40 f4       	brcc	.+16     	; 0xf11e <stat+0xa8>
    f10e:	fc 01       	movw	r30, r24
    f110:	ea 55       	subi	r30, 0x5A	; 90
    f112:	f4 4f       	sbci	r31, 0xF4	; 244
    f114:	80 81       	ld	r24, Z
    f116:	08 2e       	mov	r0, r24
    f118:	00 0c       	add	r0, r0
    f11a:	99 0b       	sbc	r25, r25
    f11c:	02 c0       	rjmp	.+4      	; 0xf122 <stat+0xac>
    f11e:	83 e2       	ldi	r24, 0x23	; 35
    f120:	90 e0       	ldi	r25, 0x00	; 0
    f122:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f126:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f12a:	ee 24       	eor	r14, r14
    f12c:	ea 94       	dec	r14
    f12e:	fe 2c       	mov	r15, r14
    f130:	36 c0       	rjmp	.+108    	; 0xf19e <stat+0x128>
    f132:	89 81       	ldd	r24, Y+1	; 0x01
    f134:	9a 81       	ldd	r25, Y+2	; 0x02
    f136:	ab 81       	ldd	r26, Y+3	; 0x03
    f138:	bc 81       	ldd	r27, Y+4	; 0x04
    f13a:	f8 01       	movw	r30, r16
    f13c:	80 8f       	std	Z+24, r24	; 0x18
    f13e:	91 8f       	std	Z+25, r25	; 0x19
    f140:	a2 8f       	std	Z+26, r26	; 0x1a
    f142:	b3 8f       	std	Z+27, r27	; 0x1b
    f144:	6f 81       	ldd	r22, Y+7	; 0x07
    f146:	78 85       	ldd	r23, Y+8	; 0x08
    f148:	8d 81       	ldd	r24, Y+5	; 0x05
    f14a:	9e 81       	ldd	r25, Y+6	; 0x06
    f14c:	50 df       	rcall	.-352    	; 0xefee <fat_time_to_unix>
    f14e:	f8 01       	movw	r30, r16
    f150:	64 a3       	std	Z+36, r22	; 0x24
    f152:	75 a3       	std	Z+37, r23	; 0x25
    f154:	86 a3       	std	Z+38, r24	; 0x26
    f156:	97 a3       	std	Z+39, r25	; 0x27
    f158:	60 a7       	std	Z+40, r22	; 0x28
    f15a:	71 a7       	std	Z+41, r23	; 0x29
    f15c:	82 a7       	std	Z+42, r24	; 0x2a
    f15e:	93 a7       	std	Z+43, r25	; 0x2b
    f160:	64 a7       	std	Z+44, r22	; 0x2c
    f162:	75 a7       	std	Z+45, r23	; 0x2d
    f164:	86 a7       	std	Z+46, r24	; 0x2e
    f166:	97 a7       	std	Z+47, r25	; 0x2f
    f168:	29 85       	ldd	r18, Y+9	; 0x09
    f16a:	20 fd       	sbrc	r18, 0
    f16c:	03 c0       	rjmp	.+6      	; 0xf174 <stat+0xfe>
    f16e:	8f ef       	ldi	r24, 0xFF	; 255
    f170:	91 e0       	ldi	r25, 0x01	; 1
    f172:	02 c0       	rjmp	.+4      	; 0xf178 <stat+0x102>
    f174:	8d e6       	ldi	r24, 0x6D	; 109
    f176:	91 e0       	ldi	r25, 0x01	; 1
    f178:	48 ee       	ldi	r20, 0xE8	; 232
    f17a:	53 e0       	ldi	r21, 0x03	; 3
    f17c:	f8 01       	movw	r30, r16
    f17e:	51 8b       	std	Z+17, r21	; 0x11
    f180:	40 8b       	std	Z+16, r20	; 0x10
    f182:	53 8b       	std	Z+19, r21	; 0x13
    f184:	42 8b       	std	Z+18, r20	; 0x12
    f186:	24 ff       	sbrs	r18, 4
    f188:	02 c0       	rjmp	.+4      	; 0xf18e <stat+0x118>
    f18a:	90 64       	ori	r25, 0x40	; 64
    f18c:	01 c0       	rjmp	.+2      	; 0xf190 <stat+0x11a>
    f18e:	90 68       	ori	r25, 0x80	; 128
    f190:	a0 e0       	ldi	r26, 0x00	; 0
    f192:	b0 e0       	ldi	r27, 0x00	; 0
    f194:	f8 01       	movw	r30, r16
    f196:	80 87       	std	Z+8, r24	; 0x08
    f198:	91 87       	std	Z+9, r25	; 0x09
    f19a:	a2 87       	std	Z+10, r26	; 0x0a
    f19c:	b3 87       	std	Z+11, r27	; 0x0b
    f19e:	c7 01       	movw	r24, r14
    f1a0:	ca 5e       	subi	r28, 0xEA	; 234
    f1a2:	de 4f       	sbci	r29, 0xFE	; 254
    f1a4:	e8 e0       	ldi	r30, 0x08	; 8
    f1a6:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

0000f1aa <unix_time_to_fat>:
    f1aa:	a4 e0       	ldi	r26, 0x04	; 4
    f1ac:	b0 e0       	ldi	r27, 0x00	; 0
    f1ae:	eb ed       	ldi	r30, 0xDB	; 219
    f1b0:	f8 e7       	ldi	r31, 0x78	; 120
    f1b2:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__prologue_saves__+0x18>
    f1b6:	69 83       	std	Y+1, r22	; 0x01
    f1b8:	7a 83       	std	Y+2, r23	; 0x02
    f1ba:	8b 83       	std	Y+3, r24	; 0x03
    f1bc:	9c 83       	std	Y+4, r25	; 0x04
    f1be:	7a 01       	movw	r14, r20
    f1c0:	89 01       	movw	r16, r18
    f1c2:	ce 01       	movw	r24, r28
    f1c4:	01 96       	adiw	r24, 0x01	; 1
    f1c6:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <gmtime>
    f1ca:	fc 01       	movw	r30, r24
    f1cc:	22 85       	ldd	r18, Z+10	; 0x0a
    f1ce:	33 85       	ldd	r19, Z+11	; 0x0b
    f1d0:	20 55       	subi	r18, 0x50	; 80
    f1d2:	31 09       	sbc	r19, r1
    f1d4:	c9 01       	movw	r24, r18
    f1d6:	98 2f       	mov	r25, r24
    f1d8:	88 27       	eor	r24, r24
    f1da:	99 0f       	add	r25, r25
    f1dc:	20 85       	ldd	r18, Z+8	; 0x08
    f1de:	31 85       	ldd	r19, Z+9	; 0x09
    f1e0:	2f 5f       	subi	r18, 0xFF	; 255
    f1e2:	3f 4f       	sbci	r19, 0xFF	; 255
    f1e4:	45 e0       	ldi	r20, 0x05	; 5
    f1e6:	22 0f       	add	r18, r18
    f1e8:	33 1f       	adc	r19, r19
    f1ea:	4a 95       	dec	r20
    f1ec:	e1 f7       	brne	.-8      	; 0xf1e6 <unix_time_to_fat+0x3c>
    f1ee:	28 2b       	or	r18, r24
    f1f0:	39 2b       	or	r19, r25
    f1f2:	86 81       	ldd	r24, Z+6	; 0x06
    f1f4:	97 81       	ldd	r25, Z+7	; 0x07
    f1f6:	28 2b       	or	r18, r24
    f1f8:	39 2b       	or	r19, r25
    f1fa:	d7 01       	movw	r26, r14
    f1fc:	2d 93       	st	X+, r18
    f1fe:	3c 93       	st	X, r19
    f200:	84 81       	ldd	r24, Z+4	; 0x04
    f202:	20 e0       	ldi	r18, 0x00	; 0
    f204:	30 e0       	ldi	r19, 0x00	; 0
    f206:	38 2f       	mov	r19, r24
    f208:	33 0f       	add	r19, r19
    f20a:	33 0f       	add	r19, r19
    f20c:	33 0f       	add	r19, r19
    f20e:	82 81       	ldd	r24, Z+2	; 0x02
    f210:	93 81       	ldd	r25, Z+3	; 0x03
    f212:	55 e0       	ldi	r21, 0x05	; 5
    f214:	88 0f       	add	r24, r24
    f216:	99 1f       	adc	r25, r25
    f218:	5a 95       	dec	r21
    f21a:	e1 f7       	brne	.-8      	; 0xf214 <unix_time_to_fat+0x6a>
    f21c:	82 2b       	or	r24, r18
    f21e:	93 2b       	or	r25, r19
    f220:	20 81       	ld	r18, Z
    f222:	31 81       	ldd	r19, Z+1	; 0x01
    f224:	36 95       	lsr	r19
    f226:	27 95       	ror	r18
    f228:	82 2b       	or	r24, r18
    f22a:	93 2b       	or	r25, r19
    f22c:	f8 01       	movw	r30, r16
    f22e:	91 83       	std	Z+1, r25	; 0x01
    f230:	80 83       	st	Z, r24
    f232:	24 96       	adiw	r28, 0x04	; 4
    f234:	e6 e0       	ldi	r30, 0x06	; 6
    f236:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

0000f23a <utime>:
    f23a:	aa e1       	ldi	r26, 0x1A	; 26
    f23c:	b1 e0       	ldi	r27, 0x01	; 1
    f23e:	e3 e2       	ldi	r30, 0x23	; 35
    f240:	f9 e7       	ldi	r31, 0x79	; 121
    f242:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__prologue_saves__+0x1c>
    f246:	8c 01       	movw	r16, r24
    f248:	61 15       	cp	r22, r1
    f24a:	71 05       	cpc	r23, r1
    f24c:	31 f0       	breq	.+12     	; 0xf25a <utime+0x20>
    f24e:	fb 01       	movw	r30, r22
    f250:	64 81       	ldd	r22, Z+4	; 0x04
    f252:	75 81       	ldd	r23, Z+5	; 0x05
    f254:	86 81       	ldd	r24, Z+6	; 0x06
    f256:	97 81       	ldd	r25, Z+7	; 0x07
    f258:	04 c0       	rjmp	.+8      	; 0xf262 <utime+0x28>
    f25a:	80 e0       	ldi	r24, 0x00	; 0
    f25c:	90 e0       	ldi	r25, 0x00	; 0
    f25e:	0e 94 10 36 	call	0x6c20	; 0x6c20 <time>
    f262:	9e 01       	movw	r18, r28
    f264:	29 5e       	subi	r18, 0xE9	; 233
    f266:	3e 4f       	sbci	r19, 0xFE	; 254
    f268:	ae 01       	movw	r20, r28
    f26a:	47 5e       	subi	r20, 0xE7	; 231
    f26c:	5e 4f       	sbci	r21, 0xFE	; 254
    f26e:	9d df       	rcall	.-198    	; 0xf1aa <unix_time_to_fat>
    f270:	c7 5e       	subi	r28, 0xE7	; 231
    f272:	de 4f       	sbci	r29, 0xFE	; 254
    f274:	88 81       	ld	r24, Y
    f276:	99 81       	ldd	r25, Y+1	; 0x01
    f278:	c9 51       	subi	r28, 0x19	; 25
    f27a:	d1 40       	sbci	r29, 0x01	; 1
    f27c:	9e 83       	std	Y+6, r25	; 0x06
    f27e:	8d 83       	std	Y+5, r24	; 0x05
    f280:	c9 5e       	subi	r28, 0xE9	; 233
    f282:	de 4f       	sbci	r29, 0xFE	; 254
    f284:	88 81       	ld	r24, Y
    f286:	99 81       	ldd	r25, Y+1	; 0x01
    f288:	c7 51       	subi	r28, 0x17	; 23
    f28a:	d1 40       	sbci	r29, 0x01	; 1
    f28c:	98 87       	std	Y+8, r25	; 0x08
    f28e:	8f 83       	std	Y+7, r24	; 0x07
    f290:	be 01       	movw	r22, r28
    f292:	6f 5f       	subi	r22, 0xFF	; 255
    f294:	7f 4f       	sbci	r23, 0xFF	; 255
    f296:	c8 01       	movw	r24, r16
    f298:	0e 94 27 67 	call	0xce4e	; 0xce4e <f_utime>
    f29c:	84 31       	cpi	r24, 0x14	; 20
    f29e:	91 05       	cpc	r25, r1
    f2a0:	40 f4       	brcc	.+16     	; 0xf2b2 <utime+0x78>
    f2a2:	fc 01       	movw	r30, r24
    f2a4:	ea 55       	subi	r30, 0x5A	; 90
    f2a6:	f4 4f       	sbci	r31, 0xF4	; 244
    f2a8:	80 81       	ld	r24, Z
    f2aa:	08 2e       	mov	r0, r24
    f2ac:	00 0c       	add	r0, r0
    f2ae:	99 0b       	sbc	r25, r25
    f2b0:	02 c0       	rjmp	.+4      	; 0xf2b6 <utime+0x7c>
    f2b2:	83 e2       	ldi	r24, 0x23	; 35
    f2b4:	90 e0       	ldi	r25, 0x00	; 0
    f2b6:	c6 5e       	subi	r28, 0xE6	; 230
    f2b8:	de 4f       	sbci	r29, 0xFE	; 254
    f2ba:	e4 e0       	ldi	r30, 0x04	; 4
    f2bc:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

0000f2c0 <fileno_to_fatfs>:
    f2c0:	83 30       	cpi	r24, 0x03	; 3
    f2c2:	91 05       	cpc	r25, r1
    f2c4:	48 f4       	brcc	.+18     	; 0xf2d8 <fileno_to_fatfs+0x18>
    f2c6:	89 e0       	ldi	r24, 0x09	; 9
    f2c8:	90 e0       	ldi	r25, 0x00	; 0
    f2ca:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f2ce:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f2d2:	80 e0       	ldi	r24, 0x00	; 0
    f2d4:	90 e0       	ldi	r25, 0x00	; 0
    f2d6:	08 95       	ret
    f2d8:	60 dc       	rcall	.-1856   	; 0xeb9a <fileno_to_stream>
    f2da:	00 97       	sbiw	r24, 0x00	; 0
    f2dc:	d1 f3       	breq	.-12     	; 0xf2d2 <fileno_to_fatfs+0x12>
    f2de:	fc 01       	movw	r30, r24
    f2e0:	84 85       	ldd	r24, Z+12	; 0x0c
    f2e2:	95 85       	ldd	r25, Z+13	; 0x0d
    f2e4:	00 97       	sbiw	r24, 0x00	; 0
    f2e6:	79 f3       	breq	.-34     	; 0xf2c6 <fileno_to_fatfs+0x6>
    f2e8:	08 95       	ret

0000f2ea <ftell>:
    f2ea:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    f2ee:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    f2f2:	37 dc       	rcall	.-1938   	; 0xeb62 <fileno>
    f2f4:	83 30       	cpi	r24, 0x03	; 3
    f2f6:	91 05       	cpc	r25, r1
    f2f8:	48 f0       	brcs	.+18     	; 0xf30c <ftell+0x22>
    f2fa:	e2 df       	rcall	.-60     	; 0xf2c0 <fileno_to_fatfs>
    f2fc:	00 97       	sbiw	r24, 0x00	; 0
    f2fe:	51 f4       	brne	.+20     	; 0xf314 <ftell+0x2a>
    f300:	89 e0       	ldi	r24, 0x09	; 9
    f302:	90 e0       	ldi	r25, 0x00	; 0
    f304:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f308:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f30c:	6f ef       	ldi	r22, 0xFF	; 255
    f30e:	7f ef       	ldi	r23, 0xFF	; 255
    f310:	cb 01       	movw	r24, r22
    f312:	08 95       	ret
    f314:	fc 01       	movw	r30, r24
    f316:	60 89       	ldd	r22, Z+16	; 0x10
    f318:	71 89       	ldd	r23, Z+17	; 0x11
    f31a:	82 89       	ldd	r24, Z+18	; 0x12
    f31c:	93 89       	ldd	r25, Z+19	; 0x13
    f31e:	08 95       	ret

0000f320 <lseek>:
    f320:	a3 e0       	ldi	r26, 0x03	; 3
    f322:	b0 e0       	ldi	r27, 0x00	; 0
    f324:	e6 e9       	ldi	r30, 0x96	; 150
    f326:	f9 e7       	ldi	r31, 0x79	; 121
    f328:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__prologue_saves__+0x10>
    f32c:	5c 01       	movw	r10, r24
    f32e:	6a 01       	movw	r12, r20
    f330:	7b 01       	movw	r14, r22
    f332:	89 01       	movw	r16, r18
    f334:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    f338:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
    f33c:	c1 df       	rcall	.-126    	; 0xf2c0 <fileno_to_fatfs>
    f33e:	ec 01       	movw	r28, r24
    f340:	89 2b       	or	r24, r25
    f342:	19 f4       	brne	.+6      	; 0xf34a <lseek+0x2a>
    f344:	88 e1       	ldi	r24, 0x18	; 24
    f346:	90 e0       	ldi	r25, 0x00	; 0
    f348:	26 c0       	rjmp	.+76     	; 0xf396 <lseek+0x76>
    f34a:	83 e0       	ldi	r24, 0x03	; 3
    f34c:	a8 16       	cp	r10, r24
    f34e:	b1 04       	cpc	r11, r1
    f350:	d0 f1       	brcs	.+116    	; 0xf3c6 <lseek+0xa6>
    f352:	c5 01       	movw	r24, r10
    f354:	22 dc       	rcall	.-1980   	; 0xeb9a <fileno_to_stream>
    f356:	fc 01       	movw	r30, r24
    f358:	93 81       	ldd	r25, Z+3	; 0x03
    f35a:	90 64       	ori	r25, 0x40	; 64
    f35c:	93 83       	std	Z+3, r25	; 0x03
    f35e:	02 30       	cpi	r16, 0x02	; 2
    f360:	11 05       	cpc	r17, r1
    f362:	a9 f5       	brne	.+106    	; 0xf3ce <lseek+0xae>
    f364:	8a 85       	ldd	r24, Y+10	; 0x0a
    f366:	9b 85       	ldd	r25, Y+11	; 0x0b
    f368:	ac 85       	ldd	r26, Y+12	; 0x0c
    f36a:	bd 85       	ldd	r27, Y+13	; 0x0d
    f36c:	c8 0e       	add	r12, r24
    f36e:	d9 1e       	adc	r13, r25
    f370:	ea 1e       	adc	r14, r26
    f372:	fb 1e       	adc	r15, r27
    f374:	b7 01       	movw	r22, r14
    f376:	a6 01       	movw	r20, r12
    f378:	ce 01       	movw	r24, r28
    f37a:	0e 94 8a 5f 	call	0xbf14	; 0xbf14 <f_lseek>
    f37e:	00 97       	sbiw	r24, 0x00	; 0
    f380:	79 f0       	breq	.+30     	; 0xf3a0 <lseek+0x80>
    f382:	84 31       	cpi	r24, 0x14	; 20
    f384:	91 05       	cpc	r25, r1
    f386:	58 f5       	brcc	.+86     	; 0xf3de <lseek+0xbe>
    f388:	fc 01       	movw	r30, r24
    f38a:	ea 55       	subi	r30, 0x5A	; 90
    f38c:	f4 4f       	sbci	r31, 0xF4	; 244
    f38e:	80 81       	ld	r24, Z
    f390:	08 2e       	mov	r0, r24
    f392:	00 0c       	add	r0, r0
    f394:	99 0b       	sbc	r25, r25
    f396:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f39a:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f39e:	13 c0       	rjmp	.+38     	; 0xf3c6 <lseek+0xa6>
    f3a0:	68 89       	ldd	r22, Y+16	; 0x10
    f3a2:	79 89       	ldd	r23, Y+17	; 0x11
    f3a4:	8a 89       	ldd	r24, Y+18	; 0x12
    f3a6:	9b 89       	ldd	r25, Y+19	; 0x13
    f3a8:	c6 16       	cp	r12, r22
    f3aa:	d7 06       	cpc	r13, r23
    f3ac:	e8 06       	cpc	r14, r24
    f3ae:	f9 06       	cpc	r15, r25
    f3b0:	c9 f0       	breq	.+50     	; 0xf3e4 <lseek+0xc4>
    f3b2:	8b e8       	ldi	r24, 0x8B	; 139
    f3b4:	9b e0       	ldi	r25, 0x0B	; 11
    f3b6:	a0 e0       	ldi	r26, 0x00	; 0
    f3b8:	ed b7       	in	r30, 0x3d	; 61
    f3ba:	fe b7       	in	r31, 0x3e	; 62
    f3bc:	81 83       	std	Z+1, r24	; 0x01
    f3be:	92 83       	std	Z+2, r25	; 0x02
    f3c0:	a3 83       	std	Z+3, r26	; 0x03
    f3c2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    f3c6:	6f ef       	ldi	r22, 0xFF	; 255
    f3c8:	7f ef       	ldi	r23, 0xFF	; 255
    f3ca:	cb 01       	movw	r24, r22
    f3cc:	0b c0       	rjmp	.+22     	; 0xf3e4 <lseek+0xc4>
    f3ce:	01 30       	cpi	r16, 0x01	; 1
    f3d0:	11 05       	cpc	r17, r1
    f3d2:	81 f6       	brne	.-96     	; 0xf374 <lseek+0x54>
    f3d4:	88 89       	ldd	r24, Y+16	; 0x10
    f3d6:	99 89       	ldd	r25, Y+17	; 0x11
    f3d8:	aa 89       	ldd	r26, Y+18	; 0x12
    f3da:	bb 89       	ldd	r27, Y+19	; 0x13
    f3dc:	c7 cf       	rjmp	.-114    	; 0xf36c <lseek+0x4c>
    f3de:	83 e2       	ldi	r24, 0x23	; 35
    f3e0:	90 e0       	ldi	r25, 0x00	; 0
    f3e2:	d9 cf       	rjmp	.-78     	; 0xf396 <lseek+0x76>
    f3e4:	cd b7       	in	r28, 0x3d	; 61
    f3e6:	de b7       	in	r29, 0x3e	; 62
    f3e8:	23 96       	adiw	r28, 0x03	; 3
    f3ea:	ea e0       	ldi	r30, 0x0A	; 10
    f3ec:	0c 94 80 e3 	jmp	0x1c700	; 0x1c700 <__epilogue_restores__+0x10>

0000f3f0 <fseek>:
    f3f0:	cf 92       	push	r12
    f3f2:	df 92       	push	r13
    f3f4:	ef 92       	push	r14
    f3f6:	ff 92       	push	r15
    f3f8:	cf 93       	push	r28
    f3fa:	df 93       	push	r29
    f3fc:	6a 01       	movw	r12, r20
    f3fe:	7b 01       	movw	r14, r22
    f400:	e9 01       	movw	r28, r18
    f402:	af db       	rcall	.-2210   	; 0xeb62 <fileno>
    f404:	97 fd       	sbrc	r25, 7
    f406:	12 c0       	rjmp	.+36     	; 0xf42c <fseek+0x3c>
    f408:	9e 01       	movw	r18, r28
    f40a:	b7 01       	movw	r22, r14
    f40c:	a6 01       	movw	r20, r12
    f40e:	88 df       	rcall	.-240    	; 0xf320 <lseek>
    f410:	21 e0       	ldi	r18, 0x01	; 1
    f412:	30 e0       	ldi	r19, 0x00	; 0
    f414:	6f 3f       	cpi	r22, 0xFF	; 255
    f416:	7f 4f       	sbci	r23, 0xFF	; 255
    f418:	8f 4f       	sbci	r24, 0xFF	; 255
    f41a:	9f 4f       	sbci	r25, 0xFF	; 255
    f41c:	11 f0       	breq	.+4      	; 0xf422 <fseek+0x32>
    f41e:	20 e0       	ldi	r18, 0x00	; 0
    f420:	30 e0       	ldi	r19, 0x00	; 0
    f422:	88 27       	eor	r24, r24
    f424:	99 27       	eor	r25, r25
    f426:	82 1b       	sub	r24, r18
    f428:	93 0b       	sbc	r25, r19
    f42a:	02 c0       	rjmp	.+4      	; 0xf430 <fseek+0x40>
    f42c:	8f ef       	ldi	r24, 0xFF	; 255
    f42e:	9f ef       	ldi	r25, 0xFF	; 255
    f430:	df 91       	pop	r29
    f432:	cf 91       	pop	r28
    f434:	ff 90       	pop	r15
    f436:	ef 90       	pop	r14
    f438:	df 90       	pop	r13
    f43a:	cf 90       	pop	r12
    f43c:	08 95       	ret

0000f43e <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f43e:	a2 e0       	ldi	r26, 0x02	; 2
    f440:	b0 e0       	ldi	r27, 0x00	; 0
    f442:	e5 e2       	ldi	r30, 0x25	; 37
    f444:	fa e7       	ldi	r31, 0x7A	; 122
    f446:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__prologue_saves__+0x10>
    f44a:	5c 01       	movw	r10, r24
    f44c:	8b 01       	movw	r16, r22
    f44e:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f450:	fb 01       	movw	r30, r22
    f452:	10 82       	st	Z, r1

    errno = 0;
    f454:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    f458:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f45c:	9e db       	rcall	.-2244   	; 0xeb9a <fileno_to_stream>
    f45e:	7c 01       	movw	r14, r24
    if(stream == stdin)
    f460:	80 91 c2 1c 	lds	r24, 0x1CC2	; 0x801cc2 <__iob>
    f464:	90 91 c3 1c 	lds	r25, 0x1CC3	; 0x801cc3 <__iob+0x1>
    f468:	e8 16       	cp	r14, r24
    f46a:	f9 06       	cpc	r15, r25
    f46c:	c9 f4       	brne	.+50     	; 0xf4a0 <read+0x62>
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f46e:	f7 01       	movw	r30, r14
    f470:	83 81       	ldd	r24, Z+3	; 0x03
    f472:	80 64       	ori	r24, 0x40	; 64
    f474:	83 83       	std	Z+3, r24	; 0x03
        size = 0;
    f476:	1a 82       	std	Y+2, r1	; 0x02
    f478:	19 82       	std	Y+1, r1	; 0x01
    f47a:	c0 0e       	add	r12, r16
    f47c:	d1 1e       	adc	r13, r17
        while(count--)
    f47e:	0c 15       	cp	r16, r12
    f480:	1d 05       	cpc	r17, r13
    f482:	09 f4       	brne	.+2      	; 0xf486 <read+0x48>
    f484:	3d c0       	rjmp	.+122    	; 0xf500 <read+0xc2>
        {
            ret = fgetc(stream);
    f486:	c7 01       	movw	r24, r14
    f488:	48 da       	rcall	.-2928   	; 0xe91a <fgetc>
            if(ret < 0)
    f48a:	97 fd       	sbrc	r25, 7
    f48c:	39 c0       	rjmp	.+114    	; 0xf500 <read+0xc2>
                break;

            *ptr++ = ret;
    f48e:	f8 01       	movw	r30, r16
    f490:	81 93       	st	Z+, r24
    f492:	8f 01       	movw	r16, r30
            ++size;
    f494:	89 81       	ldd	r24, Y+1	; 0x01
    f496:	9a 81       	ldd	r25, Y+2	; 0x02
    f498:	01 96       	adiw	r24, 0x01	; 1
    f49a:	9a 83       	std	Y+2, r25	; 0x02
    f49c:	89 83       	std	Y+1, r24	; 0x01
    f49e:	ef cf       	rjmp	.-34     	; 0xf47e <read+0x40>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f4a0:	80 91 c4 1c 	lds	r24, 0x1CC4	; 0x801cc4 <__iob+0x2>
    f4a4:	90 91 c5 1c 	lds	r25, 0x1CC5	; 0x801cc5 <__iob+0x3>
    f4a8:	e8 16       	cp	r14, r24
    f4aa:	f9 06       	cpc	r15, r25
    f4ac:	71 f1       	breq	.+92     	; 0xf50a <read+0xcc>
    f4ae:	80 91 c6 1c 	lds	r24, 0x1CC6	; 0x801cc6 <__iob+0x4>
    f4b2:	90 91 c7 1c 	lds	r25, 0x1CC7	; 0x801cc7 <__iob+0x5>
    f4b6:	e8 16       	cp	r14, r24
    f4b8:	f9 06       	cpc	r15, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f4ba:	39 f1       	breq	.+78     	; 0xf50a <read+0xcc>
    f4bc:	c5 01       	movw	r24, r10
    f4be:	00 df       	rcall	.-512    	; 0xf2c0 <fileno_to_fatfs>
    if ( fh == NULL )
    f4c0:	00 97       	sbiw	r24, 0x00	; 0
    f4c2:	19 f4       	brne	.+6      	; 0xf4ca <read+0x8c>
    {
        errno = EBADF;
    f4c4:	89 e0       	ldi	r24, 0x09	; 9
    f4c6:	90 e0       	ldi	r25, 0x00	; 0
    f4c8:	16 c0       	rjmp	.+44     	; 0xf4f6 <read+0xb8>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f4ca:	9e 01       	movw	r18, r28
    f4cc:	2f 5f       	subi	r18, 0xFF	; 255
    f4ce:	3f 4f       	sbci	r19, 0xFF	; 255
    f4d0:	a6 01       	movw	r20, r12
    f4d2:	b8 01       	movw	r22, r16
    f4d4:	0e 94 7e 5a 	call	0xb4fc	; 0xb4fc <f_read>
    if(res != FR_OK)
    f4d8:	00 97       	sbiw	r24, 0x00	; 0
    f4da:	91 f0       	breq	.+36     	; 0xf500 <read+0xc2>
    f4dc:	84 31       	cpi	r24, 0x14	; 20
    f4de:	91 05       	cpc	r25, r1
    f4e0:	40 f4       	brcc	.+16     	; 0xf4f2 <read+0xb4>
    f4e2:	fc 01       	movw	r30, r24
    f4e4:	ea 55       	subi	r30, 0x5A	; 90
    f4e6:	f4 4f       	sbci	r31, 0xF4	; 244
    f4e8:	80 81       	ld	r24, Z
    f4ea:	08 2e       	mov	r0, r24
    f4ec:	00 0c       	add	r0, r0
    f4ee:	99 0b       	sbc	r25, r25
    f4f0:	02 c0       	rjmp	.+4      	; 0xf4f6 <read+0xb8>
    f4f2:	83 e2       	ldi	r24, 0x23	; 35
    f4f4:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f4f6:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f4fa:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f4fe:	05 c0       	rjmp	.+10     	; 0xf50a <read+0xcc>
        return(-1);
    }
    return ((ssize_t) size);
    f500:	69 81       	ldd	r22, Y+1	; 0x01
    f502:	7a 81       	ldd	r23, Y+2	; 0x02
    f504:	80 e0       	ldi	r24, 0x00	; 0
    f506:	90 e0       	ldi	r25, 0x00	; 0
    f508:	03 c0       	rjmp	.+6      	; 0xf510 <read+0xd2>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f50a:	6f ef       	ldi	r22, 0xFF	; 255
    f50c:	7f ef       	ldi	r23, 0xFF	; 255
    f50e:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f510:	22 96       	adiw	r28, 0x02	; 2
    f512:	ea e0       	ldi	r30, 0x0A	; 10
    f514:	0c 94 80 e3 	jmp	0x1c700	; 0x1c700 <__epilogue_restores__+0x10>

0000f518 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f518:	0f 93       	push	r16
    f51a:	1f 93       	push	r17
    f51c:	cf 93       	push	r28
    f51e:	df 93       	push	r29
    f520:	ec 01       	movw	r28, r24
    f522:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f524:	64 9f       	mul	r22, r20
    f526:	80 01       	movw	r16, r0
    f528:	65 9f       	mul	r22, r21
    f52a:	10 0d       	add	r17, r0
    f52c:	74 9f       	mul	r23, r20
    f52e:	10 0d       	add	r17, r0
    f530:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f532:	17 db       	rcall	.-2514   	; 0xeb62 <fileno>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f534:	a8 01       	movw	r20, r16
    f536:	be 01       	movw	r22, r28
    f538:	82 df       	rcall	.-252    	; 0xf43e <read>
    if(ret < 0)
    f53a:	97 fd       	sbrc	r25, 7
    f53c:	02 c0       	rjmp	.+4      	; 0xf542 <fread+0x2a>
        return(0);

    return((size_t) ret);
    f53e:	cb 01       	movw	r24, r22
    f540:	02 c0       	rjmp	.+4      	; 0xf546 <fread+0x2e>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f542:	80 e0       	ldi	r24, 0x00	; 0
    f544:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f546:	df 91       	pop	r29
    f548:	cf 91       	pop	r28
    f54a:	1f 91       	pop	r17
    f54c:	0f 91       	pop	r16
    f54e:	08 95       	ret

0000f550 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f550:	cf 93       	push	r28
    f552:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f554:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    f558:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f55c:	83 30       	cpi	r24, 0x03	; 3
    f55e:	91 05       	cpc	r25, r1
    f560:	18 f4       	brcc	.+6      	; 0xf568 <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f562:	89 e0       	ldi	r24, 0x09	; 9
    f564:	90 e0       	ldi	r25, 0x00	; 0
    f566:	18 c0       	rjmp	.+48     	; 0xf598 <syncfs+0x48>
    f568:	ec 01       	movw	r28, r24
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f56a:	17 db       	rcall	.-2514   	; 0xeb9a <fileno_to_stream>
    f56c:	fc 01       	movw	r30, r24
// reset unget on sync
    stream->flags |= __SUNGET;
    f56e:	93 81       	ldd	r25, Z+3	; 0x03
    f570:	90 64       	ori	r25, 0x40	; 64
    f572:	93 83       	std	Z+3, r25	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f574:	ce 01       	movw	r24, r28
    f576:	a4 de       	rcall	.-696    	; 0xf2c0 <fileno_to_fatfs>
    if(fh == NULL)
    f578:	00 97       	sbiw	r24, 0x00	; 0
    f57a:	99 f3       	breq	.-26     	; 0xf562 <syncfs+0x12>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f57c:	0e 94 60 5d 	call	0xbac0	; 0xbac0 <f_sync>
    if (res != FR_OK)
    f580:	00 97       	sbiw	r24, 0x00	; 0
    f582:	a1 f0       	breq	.+40     	; 0xf5ac <syncfs+0x5c>
    f584:	84 31       	cpi	r24, 0x14	; 20
    f586:	91 05       	cpc	r25, r1
    f588:	70 f4       	brcc	.+28     	; 0xf5a6 <syncfs+0x56>
    f58a:	fc 01       	movw	r30, r24
    f58c:	ea 55       	subi	r30, 0x5A	; 90
    f58e:	f4 4f       	sbci	r31, 0xF4	; 244
    f590:	80 81       	ld	r24, Z
    f592:	08 2e       	mov	r0, r24
    f594:	00 0c       	add	r0, r0
    f596:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    f598:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f59c:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
        return(-1);
    f5a0:	8f ef       	ldi	r24, 0xFF	; 255
    f5a2:	9f ef       	ldi	r25, 0xFF	; 255
    f5a4:	05 c0       	rjmp	.+10     	; 0xf5b0 <syncfs+0x60>
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f5a6:	83 e2       	ldi	r24, 0x23	; 35
    f5a8:	90 e0       	ldi	r25, 0x00	; 0
    f5aa:	f6 cf       	rjmp	.-20     	; 0xf598 <syncfs+0x48>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f5ac:	80 e0       	ldi	r24, 0x00	; 0
    f5ae:	90 e0       	ldi	r25, 0x00	; 0
}
    f5b0:	df 91       	pop	r29
    f5b2:	cf 91       	pop	r28
    f5b4:	08 95       	ret

0000f5b6 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f5b6:	cf 93       	push	r28
    f5b8:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f5ba:	c0 e0       	ldi	r28, 0x00	; 0
    f5bc:	d0 e0       	ldi	r29, 0x00	; 0
    f5be:	21 96       	adiw	r28, 0x01	; 1
    f5c0:	c0 31       	cpi	r28, 0x10	; 16
    f5c2:	d1 05       	cpc	r29, r1
    f5c4:	51 f0       	breq	.+20     	; 0xf5da <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f5c6:	c3 30       	cpi	r28, 0x03	; 3
    f5c8:	d1 05       	cpc	r29, r1
    f5ca:	cc f3       	brlt	.-14     	; 0xf5be <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f5cc:	ce 01       	movw	r24, r28
    f5ce:	78 de       	rcall	.-784    	; 0xf2c0 <fileno_to_fatfs>
        if(fh == NULL)
    f5d0:	89 2b       	or	r24, r25
    f5d2:	a9 f3       	breq	.-22     	; 0xf5be <sync+0x8>
            continue;

        (void ) syncfs(i);
    f5d4:	ce 01       	movw	r24, r28
    f5d6:	bc df       	rcall	.-136    	; 0xf550 <syncfs>
    f5d8:	f2 cf       	rjmp	.-28     	; 0xf5be <sync+0x8>
    }
}
    f5da:	df 91       	pop	r29
    f5dc:	cf 91       	pop	r28
    f5de:	08 95       	ret

0000f5e0 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f5e0:	a2 e0       	ldi	r26, 0x02	; 2
    f5e2:	b0 e0       	ldi	r27, 0x00	; 0
    f5e4:	e6 ef       	ldi	r30, 0xF6	; 246
    f5e6:	fa e7       	ldi	r31, 0x7A	; 122
    f5e8:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__prologue_saves__+0xc>
    f5ec:	8c 01       	movw	r16, r24
    f5ee:	b6 2e       	mov	r11, r22
    f5f0:	f7 2e       	mov	r15, r23
    f5f2:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f5f4:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    f5f8:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    f5fc:	ce da       	rcall	.-2660   	; 0xeb9a <fileno_to_stream>
    f5fe:	6c 01       	movw	r12, r24
    if(stream == stdout || stream == stderr)
    f600:	80 91 c4 1c 	lds	r24, 0x1CC4	; 0x801cc4 <__iob+0x2>
    f604:	90 91 c5 1c 	lds	r25, 0x1CC5	; 0x801cc5 <__iob+0x3>
    f608:	c8 16       	cp	r12, r24
    f60a:	d9 06       	cpc	r13, r25
    f60c:	39 f0       	breq	.+14     	; 0xf61c <write+0x3c>
    f60e:	80 91 c6 1c 	lds	r24, 0x1CC6	; 0x801cc6 <__iob+0x4>
    f612:	90 91 c7 1c 	lds	r25, 0x1CC7	; 0x801cc7 <__iob+0x5>
    f616:	c8 16       	cp	r12, r24
    f618:	d9 06       	cpc	r13, r25
    f61a:	d1 f4       	brne	.+52     	; 0xf650 <write+0x70>
    {
        char *ptr = (char *) buf;
        size = 0;
    f61c:	1a 82       	std	Y+2, r1	; 0x02
    f61e:	19 82       	std	Y+1, r1	; 0x01
    f620:	0b 2d       	mov	r16, r11
    f622:	1f 2d       	mov	r17, r15
    f624:	78 01       	movw	r14, r16
    f626:	e8 0c       	add	r14, r8
    f628:	f9 1c       	adc	r15, r9
        while(count--)
    f62a:	0e 15       	cp	r16, r14
    f62c:	1f 05       	cpc	r17, r15
    f62e:	d1 f1       	breq	.+116    	; 0xf6a4 <write+0xc4>
        {
            int c,ret;
            c = *ptr++;
    f630:	f8 01       	movw	r30, r16
    f632:	a1 90       	ld	r10, Z+
    f634:	8f 01       	movw	r16, r30
    f636:	b1 2c       	mov	r11, r1
            ret = fputc(c, stream);
    f638:	b6 01       	movw	r22, r12
    f63a:	c5 01       	movw	r24, r10
    f63c:	c4 d9       	rcall	.-3192   	; 0xe9c6 <fputc>
            if(c != ret)
    f63e:	a8 16       	cp	r10, r24
    f640:	b9 06       	cpc	r11, r25
    f642:	81 f5       	brne	.+96     	; 0xf6a4 <write+0xc4>
                break;

            ++size;
    f644:	89 81       	ldd	r24, Y+1	; 0x01
    f646:	9a 81       	ldd	r25, Y+2	; 0x02
    f648:	01 96       	adiw	r24, 0x01	; 1
    f64a:	9a 83       	std	Y+2, r25	; 0x02
    f64c:	89 83       	std	Y+1, r24	; 0x01
    f64e:	ed cf       	rjmp	.-38     	; 0xf62a <write+0x4a>
        }
        return(size);
    }
    if(stream == stdin)
    f650:	80 91 c2 1c 	lds	r24, 0x1CC2	; 0x801cc2 <__iob>
    f654:	90 91 c3 1c 	lds	r25, 0x1CC3	; 0x801cc3 <__iob+0x1>
    f658:	c8 16       	cp	r12, r24
    f65a:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f65c:	41 f1       	breq	.+80     	; 0xf6ae <write+0xce>
    f65e:	c8 01       	movw	r24, r16
    f660:	2f de       	rcall	.-930    	; 0xf2c0 <fileno_to_fatfs>
    if ( fh == NULL )
    f662:	00 97       	sbiw	r24, 0x00	; 0
    f664:	19 f4       	brne	.+6      	; 0xf66c <write+0x8c>
    {
        errno = EBADF;
    f666:	89 e0       	ldi	r24, 0x09	; 9
    f668:	90 e0       	ldi	r25, 0x00	; 0
    f66a:	17 c0       	rjmp	.+46     	; 0xf69a <write+0xba>
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f66c:	9e 01       	movw	r18, r28
    f66e:	2f 5f       	subi	r18, 0xFF	; 255
    f670:	3f 4f       	sbci	r19, 0xFF	; 255
    f672:	a4 01       	movw	r20, r8
    f674:	6b 2d       	mov	r22, r11
    f676:	7f 2d       	mov	r23, r15
    f678:	0e 94 c9 5b 	call	0xb792	; 0xb792 <f_write>
    if(res != FR_OK)
    f67c:	00 97       	sbiw	r24, 0x00	; 0
    f67e:	91 f0       	breq	.+36     	; 0xf6a4 <write+0xc4>
    f680:	84 31       	cpi	r24, 0x14	; 20
    f682:	91 05       	cpc	r25, r1
    f684:	40 f4       	brcc	.+16     	; 0xf696 <write+0xb6>
    f686:	fc 01       	movw	r30, r24
    f688:	ea 55       	subi	r30, 0x5A	; 90
    f68a:	f4 4f       	sbci	r31, 0xF4	; 244
    f68c:	80 81       	ld	r24, Z
    f68e:	08 2e       	mov	r0, r24
    f690:	00 0c       	add	r0, r0
    f692:	99 0b       	sbc	r25, r25
    f694:	02 c0       	rjmp	.+4      	; 0xf69a <write+0xba>
    f696:	83 e2       	ldi	r24, 0x23	; 35
    f698:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f69a:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f69e:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f6a2:	05 c0       	rjmp	.+10     	; 0xf6ae <write+0xce>
        return(-1);
    }
    return ((ssize_t) size);
    f6a4:	69 81       	ldd	r22, Y+1	; 0x01
    f6a6:	7a 81       	ldd	r23, Y+2	; 0x02
    f6a8:	80 e0       	ldi	r24, 0x00	; 0
    f6aa:	90 e0       	ldi	r25, 0x00	; 0
    f6ac:	03 c0       	rjmp	.+6      	; 0xf6b4 <write+0xd4>
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f6ae:	6f ef       	ldi	r22, 0xFF	; 255
    f6b0:	7f ef       	ldi	r23, 0xFF	; 255
    f6b2:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f6b4:	22 96       	adiw	r28, 0x02	; 2
    f6b6:	ec e0       	ldi	r30, 0x0C	; 12
    f6b8:	0c 94 7e e3 	jmp	0x1c6fc	; 0x1c6fc <__epilogue_restores__+0xc>

0000f6bc <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f6bc:	0f 93       	push	r16
    f6be:	1f 93       	push	r17
    f6c0:	cf 93       	push	r28
    f6c2:	df 93       	push	r29
    f6c4:	ec 01       	movw	r28, r24
    f6c6:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f6c8:	64 9f       	mul	r22, r20
    f6ca:	80 01       	movw	r16, r0
    f6cc:	65 9f       	mul	r22, r21
    f6ce:	10 0d       	add	r17, r0
    f6d0:	74 9f       	mul	r23, r20
    f6d2:	10 0d       	add	r17, r0
    f6d4:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f6d6:	45 da       	rcall	.-2934   	; 0xeb62 <fileno>
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f6d8:	a8 01       	movw	r20, r16
    f6da:	be 01       	movw	r22, r28
    f6dc:	81 df       	rcall	.-254    	; 0xf5e0 <write>

    if(ret < 0)
    f6de:	97 fd       	sbrc	r25, 7
    f6e0:	02 c0       	rjmp	.+4      	; 0xf6e6 <fwrite+0x2a>
        return(0);

    return((size_t) ret);
    f6e2:	cb 01       	movw	r24, r22
    f6e4:	02 c0       	rjmp	.+4      	; 0xf6ea <fwrite+0x2e>

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f6e6:	80 e0       	ldi	r24, 0x00	; 0
    f6e8:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f6ea:	df 91       	pop	r29
    f6ec:	cf 91       	pop	r28
    f6ee:	1f 91       	pop	r17
    f6f0:	0f 91       	pop	r16
    f6f2:	08 95       	ret

0000f6f4 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f6f4:	0f 93       	push	r16
    f6f6:	1f 93       	push	r17
    f6f8:	cf 93       	push	r28
    f6fa:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f6fc:	83 30       	cpi	r24, 0x03	; 3
    f6fe:	91 05       	cpc	r25, r1
    f700:	48 f4       	brcc	.+18     	; 0xf714 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f702:	89 e0       	ldi	r24, 0x09	; 9
    f704:	90 e0       	ldi	r25, 0x00	; 0
    f706:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f70a:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
        return(-1);
    f70e:	8f ef       	ldi	r24, 0xFF	; 255
    f710:	9f ef       	ldi	r25, 0xFF	; 255
    f712:	20 c0       	rjmp	.+64     	; 0xf754 <free_file_descriptor+0x60>
    f714:	ec 01       	movw	r28, r24
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f716:	41 da       	rcall	.-2942   	; 0xeb9a <fileno_to_stream>
    f718:	8c 01       	movw	r16, r24
    if(stream == NULL)
    f71a:	89 2b       	or	r24, r25
    f71c:	c1 f3       	breq	.-16     	; 0xf70e <free_file_descriptor+0x1a>
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f71e:	f8 01       	movw	r30, r16
    f720:	84 85       	ldd	r24, Z+12	; 0x0c
    f722:	95 85       	ldd	r25, Z+13	; 0x0d

    if(fh != NULL)
    f724:	00 97       	sbiw	r24, 0x00	; 0
    f726:	11 f0       	breq	.+4      	; 0xf72c <free_file_descriptor+0x38>
    {
        safefree(fh);
    f728:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f72c:	f8 01       	movw	r30, r16
    f72e:	80 81       	ld	r24, Z
    f730:	91 81       	ldd	r25, Z+1	; 0x01
    f732:	00 97       	sbiw	r24, 0x00	; 0
    f734:	21 f0       	breq	.+8      	; 0xf73e <free_file_descriptor+0x4a>
    f736:	23 81       	ldd	r18, Z+3	; 0x03
    f738:	27 fd       	sbrc	r18, 7
    {
        safefree(stream->buf);
    f73a:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <safefree>
    }

    __iob[fileno]  = NULL;
    f73e:	fe 01       	movw	r30, r28
    f740:	ee 0f       	add	r30, r30
    f742:	ff 1f       	adc	r31, r31
    f744:	ee 53       	subi	r30, 0x3E	; 62
    f746:	f3 4e       	sbci	r31, 0xE3	; 227
    f748:	11 82       	std	Z+1, r1	; 0x01
    f74a:	10 82       	st	Z, r1
    safefree(stream);
    f74c:	c8 01       	movw	r24, r16
    f74e:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <safefree>
    return(fileno);
    f752:	ce 01       	movw	r24, r28
}
    f754:	df 91       	pop	r29
    f756:	cf 91       	pop	r28
    f758:	1f 91       	pop	r17
    f75a:	0f 91       	pop	r16
    f75c:	08 95       	ret

0000f75e <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    f75e:	0f 93       	push	r16
    f760:	1f 93       	push	r17
    f762:	cf 93       	push	r28
    f764:	df 93       	push	r29
    f766:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f768:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    f76c:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f770:	14 da       	rcall	.-3032   	; 0xeb9a <fileno_to_stream>
    if(stream == NULL)
    f772:	89 2b       	or	r24, r25
    f774:	d9 f0       	breq	.+54     	; 0xf7ac <close+0x4e>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f776:	c8 01       	movw	r24, r16
    f778:	a3 dd       	rcall	.-1210   	; 0xf2c0 <fileno_to_fatfs>
    if(fh == NULL)
    f77a:	00 97       	sbiw	r24, 0x00	; 0
    f77c:	b9 f0       	breq	.+46     	; 0xf7ac <close+0x4e>
    {
        return(-1);
    }
    res = f_close(fh);
    f77e:	0e 94 e0 5d 	call	0xbbc0	; 0xbbc0 <f_close>
    free_file_descriptor(fileno);
    f782:	ec 01       	movw	r28, r24
    f784:	c8 01       	movw	r24, r16
    f786:	b6 df       	rcall	.-148    	; 0xf6f4 <free_file_descriptor>
    if (res != FR_OK)
    f788:	20 97       	sbiw	r28, 0x00	; 0
    f78a:	99 f0       	breq	.+38     	; 0xf7b2 <close+0x54>
    f78c:	c4 31       	cpi	r28, 0x14	; 20
    f78e:	d1 05       	cpc	r29, r1
    f790:	38 f4       	brcc	.+14     	; 0xf7a0 <close+0x42>
    f792:	ca 55       	subi	r28, 0x5A	; 90
    f794:	d4 4f       	sbci	r29, 0xF4	; 244
    f796:	88 81       	ld	r24, Y
    f798:	08 2e       	mov	r0, r24
    f79a:	00 0c       	add	r0, r0
    f79c:	99 0b       	sbc	r25, r25
    f79e:	02 c0       	rjmp	.+4      	; 0xf7a4 <close+0x46>
    f7a0:	83 e2       	ldi	r24, 0x23	; 35
    f7a2:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f7a4:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f7a8:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
        return(-1);
    f7ac:	8f ef       	ldi	r24, 0xFF	; 255
    f7ae:	9f ef       	ldi	r25, 0xFF	; 255
    f7b0:	02 c0       	rjmp	.+4      	; 0xf7b6 <close+0x58>
    }
    return(0);
    f7b2:	80 e0       	ldi	r24, 0x00	; 0
    f7b4:	90 e0       	ldi	r25, 0x00	; 0
}
    f7b6:	df 91       	pop	r29
    f7b8:	cf 91       	pop	r28
    f7ba:	1f 91       	pop	r17
    f7bc:	0f 91       	pop	r16
    f7be:	08 95       	ret

0000f7c0 <fclose>:
/// @return  0 on sucess.
/// @return  -1 on error witrh errno set.
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    f7c0:	d0 d9       	rcall	.-3168   	; 0xeb62 <fileno>
    if(fn < 0)
    f7c2:	97 fd       	sbrc	r25, 7
        return(EOF);

    return( close(fn) );
    f7c4:	02 c0       	rjmp	.+4      	; 0xf7ca <fclose+0xa>
    f7c6:	cb cf       	rjmp	.-106    	; 0xf75e <close>
    f7c8:	08 95       	ret
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    if(fn < 0)
        return(EOF);
    f7ca:	8f ef       	ldi	r24, 0xFF	; 255
    f7cc:	9f ef       	ldi	r25, 0xFF	; 255

    return( close(fn) );
}
    f7ce:	08 95       	ret

0000f7d0 <new_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure with errno set.
MEMSPACE
int new_file_descriptor( void )
{
    f7d0:	0f 93       	push	r16
    f7d2:	1f 93       	push	r17
    f7d4:	cf 93       	push	r28
    f7d6:	df 93       	push	r29
    f7d8:	e2 ec       	ldi	r30, 0xC2	; 194
    f7da:	fc e1       	ldi	r31, 0x1C	; 28
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f7dc:	c0 e0       	ldi	r28, 0x00	; 0
    f7de:	d0 e0       	ldi	r29, 0x00	; 0
    f7e0:	21 96       	adiw	r28, 0x01	; 1
    f7e2:	c0 31       	cpi	r28, 0x10	; 16
    f7e4:	d1 05       	cpc	r29, r1
    f7e6:	49 f0       	breq	.+18     	; 0xf7fa <new_file_descriptor+0x2a>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f7e8:	c3 30       	cpi	r28, 0x03	; 3
    f7ea:	d1 05       	cpc	r29, r1
    f7ec:	24 f0       	brlt	.+8      	; 0xf7f6 <new_file_descriptor+0x26>

    for(i=0;i<MAX_FILES;++i)
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
    f7ee:	82 81       	ldd	r24, Z+2	; 0x02
    f7f0:	93 81       	ldd	r25, Z+3	; 0x03
    f7f2:	89 2b       	or	r24, r25
    f7f4:	59 f0       	breq	.+22     	; 0xf80c <new_file_descriptor+0x3c>
    f7f6:	32 96       	adiw	r30, 0x02	; 2
    f7f8:	f3 cf       	rjmp	.-26     	; 0xf7e0 <new_file_descriptor+0x10>
            __iob[i]  = stream;
            fdev_set_udata(stream, (void *) fh);
            return(i);
        }
    }
    errno = ENFILE;
    f7fa:	87 e1       	ldi	r24, 0x17	; 23
    f7fc:	90 e0       	ldi	r25, 0x00	; 0
    f7fe:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f802:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    return(-1);
    f806:	8f ef       	ldi	r24, 0xFF	; 255
    f808:	9f ef       	ldi	r25, 0xFF	; 255
    f80a:	22 c0       	rjmp	.+68     	; 0xf850 <new_file_descriptor+0x80>
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
        {
            stream = (FILE *) safecalloc(sizeof(FILE),1);
    f80c:	61 e0       	ldi	r22, 0x01	; 1
    f80e:	70 e0       	ldi	r23, 0x00	; 0
    f810:	8e e0       	ldi	r24, 0x0E	; 14
    f812:	90 e0       	ldi	r25, 0x00	; 0
    f814:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <safecalloc>
    f818:	8c 01       	movw	r16, r24
            if(stream == NULL)
    f81a:	89 2b       	or	r24, r25
    f81c:	59 f0       	breq	.+22     	; 0xf834 <new_file_descriptor+0x64>
            {
                errno = ENOMEM;
                return(-1);
            }
            fh = (FIL *) safecalloc(sizeof(FIL),1);
    f81e:	61 e0       	ldi	r22, 0x01	; 1
    f820:	70 e0       	ldi	r23, 0x00	; 0
    f822:	84 e2       	ldi	r24, 0x24	; 36
    f824:	92 e0       	ldi	r25, 0x02	; 2
    f826:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <safecalloc>
            if(fh == NULL)
    f82a:	00 97       	sbiw	r24, 0x00	; 0
    f82c:	31 f4       	brne	.+12     	; 0xf83a <new_file_descriptor+0x6a>
            {
                safefree(stream);
    f82e:	c8 01       	movw	r24, r16
    f830:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <safefree>
                errno = ENOMEM;
    f834:	8c e0       	ldi	r24, 0x0C	; 12
    f836:	90 e0       	ldi	r25, 0x00	; 0
    f838:	e2 cf       	rjmp	.-60     	; 0xf7fe <new_file_descriptor+0x2e>
                return(-1);
            }

            __iob[i]  = stream;
    f83a:	fe 01       	movw	r30, r28
    f83c:	ee 0f       	add	r30, r30
    f83e:	ff 1f       	adc	r31, r31
    f840:	ee 53       	subi	r30, 0x3E	; 62
    f842:	f3 4e       	sbci	r31, 0xE3	; 227
    f844:	11 83       	std	Z+1, r17	; 0x01
    f846:	00 83       	st	Z, r16
            fdev_set_udata(stream, (void *) fh);
    f848:	f8 01       	movw	r30, r16
    f84a:	95 87       	std	Z+13, r25	; 0x0d
    f84c:	84 87       	std	Z+12, r24	; 0x0c
{
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f84e:	ce 01       	movw	r24, r28
            return(i);
        }
    }
    errno = ENFILE;
    return(-1);
}
    f850:	df 91       	pop	r29
    f852:	cf 91       	pop	r28
    f854:	1f 91       	pop	r17
    f856:	0f 91       	pop	r16
    f858:	08 95       	ret

0000f85a <open>:
///
/// @return fileno on success.
/// @return -1 on error with errno set.
MEMSPACE
int open(const char *pathname, int flags)
{
    f85a:	a0 e0       	ldi	r26, 0x00	; 0
    f85c:	b0 e0       	ldi	r27, 0x00	; 0
    f85e:	e3 e3       	ldi	r30, 0x33	; 51
    f860:	fc e7       	ldi	r31, 0x7C	; 124
    f862:	0c 94 60 e3 	jmp	0x1c6c0	; 0x1c6c0 <__prologue_saves__+0x8>
    f866:	5c 01       	movw	r10, r24
    f868:	6b 01       	movw	r12, r22
    int fatfs_modes;
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f86a:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <errno+0x1>
    f86e:	10 92 c0 1c 	sts	0x1CC0, r1	; 0x801cc0 <errno>
        errno = fatfs_to_errno(res);
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
    f872:	7b 01       	movw	r14, r22
    f874:	83 e0       	ldi	r24, 0x03	; 3
    f876:	e8 22       	and	r14, r24
    f878:	ff 24       	eor	r15, r15
    f87a:	e2 e0       	ldi	r30, 0x02	; 2
    f87c:	ee 16       	cp	r14, r30
    f87e:	f1 04       	cpc	r15, r1
    f880:	31 f0       	breq	.+12     	; 0xf88e <open+0x34>
        fatfs_modes = FA_READ | FA_WRITE;
    else if((flags & O_ACCMODE) == O_RDONLY)
    f882:	e1 14       	cp	r14, r1
    f884:	f1 04       	cpc	r15, r1
    f886:	31 f0       	breq	.+12     	; 0xf894 <open+0x3a>
        fatfs_modes = FA_READ;
    else
        fatfs_modes = FA_WRITE;
    f888:	02 e0       	ldi	r16, 0x02	; 2
    f88a:	10 e0       	ldi	r17, 0x00	; 0
    f88c:	05 c0       	rjmp	.+10     	; 0xf898 <open+0x3e>
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
        fatfs_modes = FA_READ | FA_WRITE;
    f88e:	03 e0       	ldi	r16, 0x03	; 3
    f890:	10 e0       	ldi	r17, 0x00	; 0
    f892:	02 c0       	rjmp	.+4      	; 0xf898 <open+0x3e>
    else if((flags & O_ACCMODE) == O_RDONLY)
        fatfs_modes = FA_READ;
    f894:	01 e0       	ldi	r16, 0x01	; 1
    f896:	10 e0       	ldi	r17, 0x00	; 0
    else
        fatfs_modes = FA_WRITE;

    if(flags & O_CREAT)
    f898:	c6 fe       	sbrs	r12, 6
    f89a:	05 c0       	rjmp	.+10     	; 0xf8a6 <open+0x4c>
    {
        if(flags & O_TRUNC)
    f89c:	d1 fe       	sbrs	r13, 1
    f89e:	02 c0       	rjmp	.+4      	; 0xf8a4 <open+0x4a>
            fatfs_modes |= FA_CREATE_ALWAYS;
    f8a0:	08 60       	ori	r16, 0x08	; 8
    f8a2:	01 c0       	rjmp	.+2      	; 0xf8a6 <open+0x4c>
        else
            fatfs_modes |= FA_OPEN_ALWAYS;
    f8a4:	00 61       	ori	r16, 0x10	; 16
    }

    fileno = new_file_descriptor();
    f8a6:	94 df       	rcall	.-216    	; 0xf7d0 <new_file_descriptor>
    f8a8:	3c 01       	movw	r6, r24

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f8aa:	77 d9       	rcall	.-3346   	; 0xeb9a <fileno_to_stream>
    f8ac:	ec 01       	movw	r28, r24
    f8ae:	c3 01       	movw	r24, r6
    if(stream == NULL)
    {
        free_file_descriptor(fileno);
    f8b0:	20 97       	sbiw	r28, 0x00	; 0

    fileno = new_file_descriptor();

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    f8b2:	09 f4       	brne	.+2      	; 0xf8b6 <open+0x5c>
    f8b4:	48 c0       	rjmp	.+144    	; 0xf946 <open+0xec>
        free_file_descriptor(fileno);
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f8b6:	04 dd       	rcall	.-1528   	; 0xf2c0 <fileno_to_fatfs>
    f8b8:	4c 01       	movw	r8, r24
    f8ba:	00 97       	sbiw	r24, 0x00	; 0
    if(fh == NULL)
    f8bc:	59 f4       	brne	.+22     	; 0xf8d4 <open+0x7a>
    {
        free_file_descriptor(fileno);
    f8be:	c3 01       	movw	r24, r6
    f8c0:	19 df       	rcall	.-462    	; 0xf6f4 <free_file_descriptor>
    f8c2:	89 e0       	ldi	r24, 0x09	; 9
        errno = EBADF;
    f8c4:	90 e0       	ldi	r25, 0x00	; 0
    f8c6:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    f8ca:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f8ce:	8f ef       	ldi	r24, 0xFF	; 255
        return(-1);
    f8d0:	9f ef       	ldi	r25, 0xFF	; 255
    f8d2:	5d c0       	rjmp	.+186    	; 0xf98e <open+0x134>
    f8d4:	40 2f       	mov	r20, r16
    }
    res = f_open(fh, pathname, (BYTE) (fatfs_modes & 0xff));
    f8d6:	b5 01       	movw	r22, r10
    f8d8:	0e 94 c6 58 	call	0xb18c	; 0xb18c <f_open>
    f8dc:	00 97       	sbiw	r24, 0x00	; 0
    if(res != FR_OK)
    f8de:	91 f0       	breq	.+36     	; 0xf904 <open+0xaa>
    f8e0:	84 31       	cpi	r24, 0x14	; 20
    f8e2:	91 05       	cpc	r25, r1
    f8e4:	40 f4       	brcc	.+16     	; 0xf8f6 <open+0x9c>
    f8e6:	fc 01       	movw	r30, r24
    f8e8:	ea 55       	subi	r30, 0x5A	; 90
    f8ea:	f4 4f       	sbci	r31, 0xF4	; 244
    f8ec:	80 81       	ld	r24, Z
    f8ee:	08 2e       	mov	r0, r24
    f8f0:	00 0c       	add	r0, r0
    f8f2:	99 0b       	sbc	r25, r25
    f8f4:	02 c0       	rjmp	.+4      	; 0xf8fa <open+0xa0>
    f8f6:	83 e2       	ldi	r24, 0x23	; 35
    f8f8:	90 e0       	ldi	r25, 0x00	; 0
    f8fa:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
    {
        errno = fatfs_to_errno(res);
    f8fe:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f902:	20 c0       	rjmp	.+64     	; 0xf944 <open+0xea>
    f904:	d2 fe       	sbrs	r13, 2
        free_file_descriptor(fileno);
        return(-1);
    }
    if(flags & O_APPEND)
    f906:	21 c0       	rjmp	.+66     	; 0xf94a <open+0xf0>
    f908:	f4 01       	movw	r30, r8
    {
///  Seek to end of the file
        res = f_lseek(fh, f_size(fh));
    f90a:	42 85       	ldd	r20, Z+10	; 0x0a
    f90c:	53 85       	ldd	r21, Z+11	; 0x0b
    f90e:	64 85       	ldd	r22, Z+12	; 0x0c
    f910:	75 85       	ldd	r23, Z+13	; 0x0d
    f912:	c4 01       	movw	r24, r8
    f914:	0e 94 8a 5f 	call	0xbf14	; 0xbf14 <f_lseek>
    f918:	00 97       	sbiw	r24, 0x00	; 0
        if (res != FR_OK)
    f91a:	b9 f0       	breq	.+46     	; 0xf94a <open+0xf0>
    f91c:	84 31       	cpi	r24, 0x14	; 20
    f91e:	91 05       	cpc	r25, r1
    f920:	40 f4       	brcc	.+16     	; 0xf932 <open+0xd8>
    f922:	fc 01       	movw	r30, r24
    f924:	ea 55       	subi	r30, 0x5A	; 90
    f926:	f4 4f       	sbci	r31, 0xF4	; 244
    f928:	80 81       	ld	r24, Z
    f92a:	08 2e       	mov	r0, r24
    f92c:	00 0c       	add	r0, r0
    f92e:	99 0b       	sbc	r25, r25
    f930:	02 c0       	rjmp	.+4      	; 0xf936 <open+0xdc>
    f932:	83 e2       	ldi	r24, 0x23	; 35
    f934:	90 e0       	ldi	r25, 0x00	; 0
    f936:	90 93 c1 1c 	sts	0x1CC1, r25	; 0x801cc1 <errno+0x1>
        {
            errno = fatfs_to_errno(res);
    f93a:	80 93 c0 1c 	sts	0x1CC0, r24	; 0x801cc0 <errno>
    f93e:	c4 01       	movw	r24, r8
            f_close(fh);
    f940:	0e 94 e0 5d 	call	0xbbc0	; 0xbbc0 <f_close>
            free_file_descriptor(fileno);
    f944:	c3 01       	movw	r24, r6
    f946:	d6 de       	rcall	.-596    	; 0xf6f4 <free_file_descriptor>
    f948:	c2 cf       	rjmp	.-124    	; 0xf8ce <open+0x74>
    f94a:	f2 e0       	ldi	r31, 0x02	; 2
            return(-1);
        }
    }

    if((flags & O_ACCMODE) == O_RDWR)
    f94c:	ef 16       	cp	r14, r31
    f94e:	f1 04       	cpc	r15, r1
    f950:	51 f4       	brne	.+20     	; 0xf966 <open+0x10c>
    f952:	82 e4       	ldi	r24, 0x42	; 66
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    f954:	94 e7       	ldi	r25, 0x74	; 116
    f956:	99 87       	std	Y+9, r25	; 0x09
    f958:	88 87       	std	Y+8, r24	; 0x08
    f95a:	8f eb       	ldi	r24, 0xBF	; 191
        stream->get = fatfs_getc;
    f95c:	93 e7       	ldi	r25, 0x73	; 115
    f95e:	9b 87       	std	Y+11, r25	; 0x0b
    f960:	8a 87       	std	Y+10, r24	; 0x0a
    f962:	83 e0       	ldi	r24, 0x03	; 3
        stream->flags = _FDEV_SETUP_RW;
    f964:	12 c0       	rjmp	.+36     	; 0xf98a <open+0x130>
    f966:	e1 14       	cp	r14, r1
    }
    else if((flags & O_ACCMODE) == O_RDONLY)
    f968:	f1 04       	cpc	r15, r1
    f96a:	41 f4       	brne	.+16     	; 0xf97c <open+0x122>
    f96c:	19 86       	std	Y+9, r1	; 0x09
    {
// FIXME fdevopen should do this
        stream->put = NULL;
    f96e:	18 86       	std	Y+8, r1	; 0x08
    f970:	8f eb       	ldi	r24, 0xBF	; 191
        stream->get = fatfs_getc;
    f972:	93 e7       	ldi	r25, 0x73	; 115
    f974:	9b 87       	std	Y+11, r25	; 0x0b
    f976:	8a 87       	std	Y+10, r24	; 0x0a
    f978:	81 e0       	ldi	r24, 0x01	; 1
        stream->flags = _FDEV_SETUP_READ;
    f97a:	07 c0       	rjmp	.+14     	; 0xf98a <open+0x130>
    f97c:	82 e4       	ldi	r24, 0x42	; 66
    }
    else
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    f97e:	94 e7       	ldi	r25, 0x74	; 116
    f980:	99 87       	std	Y+9, r25	; 0x09
    f982:	88 87       	std	Y+8, r24	; 0x08
    f984:	1b 86       	std	Y+11, r1	; 0x0b
        stream->get = NULL;
    f986:	1a 86       	std	Y+10, r1	; 0x0a
    f988:	82 e0       	ldi	r24, 0x02	; 2
        stream->flags = _FDEV_SETUP_WRITE;
    f98a:	8b 83       	std	Y+3, r24	; 0x03
    f98c:	c3 01       	movw	r24, r6
    }

    return(fileno);
    f98e:	cd b7       	in	r28, 0x3d	; 61
}
    f990:	de b7       	in	r29, 0x3e	; 62
    f992:	ee e0       	ldi	r30, 0x0E	; 14
    f994:	0c 94 7c e3 	jmp	0x1c6f8	; 0x1c6f8 <__epilogue_restores__+0x8>

0000f998 <posix_fopen_modes_to_open>:
    f998:	cf 93       	push	r28
/// @return open mode flags.
/// @return -1 on error.
/// @warning read and write BOTH share the same stream buffer and buffer index pointers.
MEMSPACE
int posix_fopen_modes_to_open(const char *mode)
{
    f99a:	df 93       	push	r29
    f99c:	ec 01       	movw	r28, r24
    int flag = 0;

    if(modecmp(mode,"r") || modecmp(mode,"rb"))
    f99e:	62 e4       	ldi	r22, 0x42	; 66
    f9a0:	73 e0       	ldi	r23, 0x03	; 3
    f9a2:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <strcmp>
    f9a6:	00 97       	sbiw	r24, 0x00	; 0
    f9a8:	09 f4       	brne	.+2      	; 0xf9ac <posix_fopen_modes_to_open+0x14>
    f9aa:	5d c0       	rjmp	.+186    	; 0xfa66 <posix_fopen_modes_to_open+0xce>
    f9ac:	6e ef       	ldi	r22, 0xFE	; 254
    f9ae:	78 e0       	ldi	r23, 0x08	; 8
    f9b0:	ce 01       	movw	r24, r28
    f9b2:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <strcmp>
    f9b6:	00 97       	sbiw	r24, 0x00	; 0
    f9b8:	09 f4       	brne	.+2      	; 0xf9bc <posix_fopen_modes_to_open+0x24>
    f9ba:	55 c0       	rjmp	.+170    	; 0xfa66 <posix_fopen_modes_to_open+0xce>
    {
        flag = O_RDONLY;
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    f9bc:	61 e0       	ldi	r22, 0x01	; 1
    f9be:	79 e0       	ldi	r23, 0x09	; 9
    f9c0:	ce 01       	movw	r24, r28
    f9c2:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <strcmp>
    f9c6:	89 2b       	or	r24, r25
    f9c8:	09 f4       	brne	.+2      	; 0xf9cc <posix_fopen_modes_to_open+0x34>
    f9ca:	42 c0       	rjmp	.+132    	; 0xfa50 <posix_fopen_modes_to_open+0xb8>
    f9cc:	64 e0       	ldi	r22, 0x04	; 4
    f9ce:	79 e0       	ldi	r23, 0x09	; 9
    f9d0:	ce 01       	movw	r24, r28
    f9d2:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <strcmp>
    f9d6:	89 2b       	or	r24, r25
    f9d8:	d9 f1       	breq	.+118    	; 0xfa50 <posix_fopen_modes_to_open+0xb8>
    f9da:	68 e0       	ldi	r22, 0x08	; 8
    f9dc:	79 e0       	ldi	r23, 0x09	; 9
    f9de:	ce 01       	movw	r24, r28
    f9e0:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <strcmp>
    f9e4:	89 2b       	or	r24, r25
    f9e6:	a1 f1       	breq	.+104    	; 0xfa50 <posix_fopen_modes_to_open+0xb8>
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    f9e8:	6d eb       	ldi	r22, 0xBD	; 189
    f9ea:	7a e0       	ldi	r23, 0x0A	; 10
    f9ec:	ce 01       	movw	r24, r28
    f9ee:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <strcmp>
    f9f2:	89 2b       	or	r24, r25
    f9f4:	81 f1       	breq	.+96     	; 0xfa56 <posix_fopen_modes_to_open+0xbe>
    f9f6:	6c e0       	ldi	r22, 0x0C	; 12
    f9f8:	79 e0       	ldi	r23, 0x09	; 9
    f9fa:	ce 01       	movw	r24, r28
    f9fc:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <strcmp>
    fa00:	89 2b       	or	r24, r25
    fa02:	49 f1       	breq	.+82     	; 0xfa56 <posix_fopen_modes_to_open+0xbe>
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    fa04:	6f e0       	ldi	r22, 0x0F	; 15
    fa06:	79 e0       	ldi	r23, 0x09	; 9
    fa08:	ce 01       	movw	r24, r28
    fa0a:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <strcmp>
    fa0e:	89 2b       	or	r24, r25
    fa10:	29 f1       	breq	.+74     	; 0xfa5c <posix_fopen_modes_to_open+0xc4>
    fa12:	62 e1       	ldi	r22, 0x12	; 18
    fa14:	79 e0       	ldi	r23, 0x09	; 9
    fa16:	ce 01       	movw	r24, r28
    fa18:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <strcmp>
    fa1c:	89 2b       	or	r24, r25
    fa1e:	f1 f0       	breq	.+60     	; 0xfa5c <posix_fopen_modes_to_open+0xc4>
    fa20:	66 e1       	ldi	r22, 0x16	; 22
    fa22:	79 e0       	ldi	r23, 0x09	; 9
    fa24:	ce 01       	movw	r24, r28
    fa26:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <strcmp>
    fa2a:	89 2b       	or	r24, r25
    fa2c:	b9 f0       	breq	.+46     	; 0xfa5c <posix_fopen_modes_to_open+0xc4>
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    fa2e:	6e e2       	ldi	r22, 0x2E	; 46
    fa30:	73 e1       	ldi	r23, 0x13	; 19
    fa32:	ce 01       	movw	r24, r28
    fa34:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <strcmp>
    fa38:	89 2b       	or	r24, r25
    fa3a:	99 f0       	breq	.+38     	; 0xfa62 <posix_fopen_modes_to_open+0xca>
    fa3c:	6a e1       	ldi	r22, 0x1A	; 26
    fa3e:	79 e0       	ldi	r23, 0x09	; 9
    fa40:	ce 01       	movw	r24, r28
    fa42:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <strcmp>
    fa46:	89 2b       	or	r24, r25
    fa48:	61 f0       	breq	.+24     	; 0xfa62 <posix_fopen_modes_to_open+0xca>
        return(flag);
    }
    if(modecmp(mode,"a+") || modecmp(mode, "a+b" ) || modecmp(mode, "ab+" ))
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    fa4a:	8f ef       	ldi	r24, 0xFF	; 255
    fa4c:	9f ef       	ldi	r25, 0xFF	; 255
    fa4e:	0b c0       	rjmp	.+22     	; 0xfa66 <posix_fopen_modes_to_open+0xce>
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    fa50:	82 e0       	ldi	r24, 0x02	; 2
    fa52:	92 e0       	ldi	r25, 0x02	; 2
    fa54:	08 c0       	rjmp	.+16     	; 0xfa66 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    fa56:	81 e4       	ldi	r24, 0x41	; 65
    fa58:	92 e0       	ldi	r25, 0x02	; 2
    fa5a:	05 c0       	rjmp	.+10     	; 0xfa66 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    fa5c:	82 e4       	ldi	r24, 0x42	; 66
    fa5e:	92 e0       	ldi	r25, 0x02	; 2
    fa60:	02 c0       	rjmp	.+4      	; 0xfa66 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    {
        flag = O_WRONLY | O_CREAT | O_APPEND;
        return(flag);
    fa62:	81 e4       	ldi	r24, 0x41	; 65
    fa64:	94 e0       	ldi	r25, 0x04	; 4
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    }
    return(-1);                                   // nvalid mode
}
    fa66:	df 91       	pop	r29
    fa68:	cf 91       	pop	r28
    fa6a:	08 95       	ret

0000fa6c <fopen>:
///
/// @return stream * on success.
/// @return NULL on error with errno set.
MEMSPACE
FILE *fopen(const char *path, const char *mode)
{
    fa6c:	cf 93       	push	r28
    fa6e:	df 93       	push	r29
    fa70:	ec 01       	movw	r28, r24
    fa72:	cb 01       	movw	r24, r22
    int flags = posix_fopen_modes_to_open(mode);
    fa74:	91 df       	rcall	.-222    	; 0xf998 <posix_fopen_modes_to_open>
    int fileno = open(path, flags);
    fa76:	bc 01       	movw	r22, r24
    fa78:	ce 01       	movw	r24, r28

// checks if fileno out of bounds
    return( fileno_to_stream(fileno) );
    fa7a:	ef de       	rcall	.-546    	; 0xf85a <open>
    fa7c:	8e d8       	rcall	.-3812   	; 0xeb9a <fileno_to_stream>
}
    fa7e:	df 91       	pop	r29
    fa80:	cf 91       	pop	r28
    fa82:	08 95       	ret

0000fa84 <fprintf>:
/// @param[in] ...: vararg list or arguments
/// @return size of printed result
MEMSPACE
int
fprintf(FILE *fp, const char *format, ...)
{
    fa84:	a8 e0       	ldi	r26, 0x08	; 8
    fa86:	b0 e0       	ldi	r27, 0x00	; 0
    fa88:	e8 e4       	ldi	r30, 0x48	; 72
    fa8a:	fd e7       	ldi	r31, 0x7D	; 125
    fa8c:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
    printf_t fn;
    va_list va;

    fn.put = _fprintf_putc;
    fa90:	85 e3       	ldi	r24, 0x35	; 53
    fa92:	95 e7       	ldi	r25, 0x75	; 117
    fa94:	9a 83       	std	Y+2, r25	; 0x02
    fa96:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    fa98:	18 86       	std	Y+8, r1	; 0x08
    fa9a:	1f 82       	std	Y+7, r1	; 0x07
    fn.buffer = (void *) fp;
    fa9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    fa9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    faa0:	9c 83       	std	Y+4, r25	; 0x04
    faa2:	8b 83       	std	Y+3, r24	; 0x03

    va_start(va, format);
    _printf_fn(&fn, format, va);
    faa4:	4f 85       	ldd	r20, Y+15	; 0x0f
    faa6:	58 89       	ldd	r21, Y+16	; 0x10
    faa8:	60 e8       	ldi	r22, 0x80	; 128
    faaa:	9e 01       	movw	r18, r28
    faac:	2f 5e       	subi	r18, 0xEF	; 239
    faae:	3f 4f       	sbci	r19, 0xFF	; 255
    fab0:	ce 01       	movw	r24, r28
    fab2:	01 96       	adiw	r24, 0x01	; 1
    fab4:	0e 94 69 40 	call	0x80d2	; 0x80d2 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    fab8:	8f 81       	ldd	r24, Y+7	; 0x07
    faba:	98 85       	ldd	r25, Y+8	; 0x08
    fabc:	28 96       	adiw	r28, 0x08	; 8
    fabe:	e2 e0       	ldi	r30, 0x02	; 2
    fac0:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

0000fac4 <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    fac4:	cf 93       	push	r28
    fac6:	df 93       	push	r29
    fac8:	00 d0       	rcall	.+0      	; 0xfaca <posix_help+0x6>
    faca:	1f 92       	push	r1
    facc:	ec 01       	movw	r28, r24
    face:	89 e4       	ldi	r24, 0x49	; 73
    fad0:	9e e0       	ldi	r25, 0x0E	; 14
    fad2:	a0 e0       	ldi	r26, 0x00	; 0
    fad4:	ed b7       	in	r30, 0x3d	; 61
    fad6:	fe b7       	in	r31, 0x3e	; 62
    fad8:	81 83       	std	Z+1, r24	; 0x01
    fada:	92 83       	std	Z+2, r25	; 0x02
    fadc:	a3 83       	std	Z+3, r26	; 0x03
    fade:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    fae2:	cd 2b       	or	r28, r29
    fae4:	51 f0       	breq	.+20     	; 0xfafa <posix_help+0x36>
    fae6:	83 e8       	ldi	r24, 0x83	; 131
    fae8:	9d e0       	ldi	r25, 0x0D	; 13
    faea:	a0 e0       	ldi	r26, 0x00	; 0
    faec:	ed b7       	in	r30, 0x3d	; 61
    faee:	fe b7       	in	r31, 0x3e	; 62
    faf0:	81 83       	std	Z+1, r24	; 0x01
    faf2:	92 83       	std	Z+2, r25	; 0x02
    faf4:	a3 83       	std	Z+3, r26	; 0x03
    faf6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    fafa:	cd b7       	in	r28, 0x3d	; 61
    fafc:	de b7       	in	r29, 0x3e	; 62
    fafe:	23 96       	adiw	r28, 0x03	; 3
    fb00:	e2 e0       	ldi	r30, 0x02	; 2
    fb02:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

0000fb06 <copy>:
    fb06:	4f 92       	push	r4
    fb08:	5f 92       	push	r5
    fb0a:	6f 92       	push	r6
    fb0c:	8f 92       	push	r8
    fb0e:	9f 92       	push	r9
    fb10:	af 92       	push	r10
    fb12:	bf 92       	push	r11
    fb14:	cf 92       	push	r12
    fb16:	df 92       	push	r13
    fb18:	ef 92       	push	r14
    fb1a:	ff 92       	push	r15
    fb1c:	0f 93       	push	r16
    fb1e:	1f 93       	push	r17
    fb20:	cf 93       	push	r28
    fb22:	df 93       	push	r29
    fb24:	ad b7       	in	r26, 0x3d	; 61
    fb26:	be b7       	in	r27, 0x3e	; 62
    fb28:	17 97       	sbiw	r26, 0x07	; 7
    fb2a:	0f b6       	in	r0, 0x3f	; 63
    fb2c:	f8 94       	cli
    fb2e:	be bf       	out	0x3e, r27	; 62
    fb30:	0f be       	out	0x3f, r0	; 63
    fb32:	ad bf       	out	0x3d, r26	; 61
    fb34:	8c 01       	movw	r16, r24
    fb36:	eb 01       	movw	r28, r22
    fb38:	ed b7       	in	r30, 0x3d	; 61
    fb3a:	fe b7       	in	r31, 0x3e	; 62
    fb3c:	95 83       	std	Z+5, r25	; 0x05
    fb3e:	84 83       	std	Z+4, r24	; 0x04
    fb40:	8c ee       	ldi	r24, 0xEC	; 236
    fb42:	9c e0       	ldi	r25, 0x0C	; 12
    fb44:	a0 e0       	ldi	r26, 0x00	; 0
    fb46:	81 83       	std	Z+1, r24	; 0x01
    fb48:	92 83       	std	Z+2, r25	; 0x02
    fb4a:	a3 83       	std	Z+3, r26	; 0x03
    fb4c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    fb50:	6e ef       	ldi	r22, 0xFE	; 254
    fb52:	78 e0       	ldi	r23, 0x08	; 8
    fb54:	c8 01       	movw	r24, r16
    fb56:	8a df       	rcall	.-236    	; 0xfa6c <fopen>
    fb58:	7c 01       	movw	r14, r24
    fb5a:	ed b7       	in	r30, 0x3d	; 61
    fb5c:	fe b7       	in	r31, 0x3e	; 62
    fb5e:	89 2b       	or	r24, r25
    fb60:	59 f4       	brne	.+22     	; 0xfb78 <copy+0x72>
    fb62:	15 83       	std	Z+5, r17	; 0x05
    fb64:	04 83       	std	Z+4, r16	; 0x04
    fb66:	8c ed       	ldi	r24, 0xDC	; 220
    fb68:	9c e0       	ldi	r25, 0x0C	; 12
    fb6a:	a0 e0       	ldi	r26, 0x00	; 0
    fb6c:	81 83       	std	Z+1, r24	; 0x01
    fb6e:	92 83       	std	Z+2, r25	; 0x02
    fb70:	a3 83       	std	Z+3, r26	; 0x03
    fb72:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    fb76:	20 c0       	rjmp	.+64     	; 0xfbb8 <copy+0xb2>
    fb78:	d5 83       	std	Z+5, r29	; 0x05
    fb7a:	c4 83       	std	Z+4, r28	; 0x04
    fb7c:	8f ec       	ldi	r24, 0xCF	; 207
    fb7e:	9c e0       	ldi	r25, 0x0C	; 12
    fb80:	a0 e0       	ldi	r26, 0x00	; 0
    fb82:	81 83       	std	Z+1, r24	; 0x01
    fb84:	92 83       	std	Z+2, r25	; 0x02
    fb86:	a3 83       	std	Z+3, r26	; 0x03
    fb88:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    fb8c:	6c e0       	ldi	r22, 0x0C	; 12
    fb8e:	79 e0       	ldi	r23, 0x09	; 9
    fb90:	ce 01       	movw	r24, r28
    fb92:	6c df       	rcall	.-296    	; 0xfa6c <fopen>
    fb94:	8c 01       	movw	r16, r24
    fb96:	89 2b       	or	r24, r25
    fb98:	a1 f4       	brne	.+40     	; 0xfbc2 <copy+0xbc>
    fb9a:	ed b7       	in	r30, 0x3d	; 61
    fb9c:	fe b7       	in	r31, 0x3e	; 62
    fb9e:	d5 83       	std	Z+5, r29	; 0x05
    fba0:	c4 83       	std	Z+4, r28	; 0x04
    fba2:	8f eb       	ldi	r24, 0xBF	; 191
    fba4:	9c e0       	ldi	r25, 0x0C	; 12
    fba6:	a0 e0       	ldi	r26, 0x00	; 0
    fba8:	81 83       	std	Z+1, r24	; 0x01
    fbaa:	92 83       	std	Z+2, r25	; 0x02
    fbac:	a3 83       	std	Z+3, r26	; 0x03
    fbae:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    fbb2:	80 e0       	ldi	r24, 0x00	; 0
    fbb4:	90 e0       	ldi	r25, 0x00	; 0
    fbb6:	04 de       	rcall	.-1016   	; 0xf7c0 <fclose>
    fbb8:	60 e0       	ldi	r22, 0x00	; 0
    fbba:	70 e0       	ldi	r23, 0x00	; 0
    fbbc:	80 e0       	ldi	r24, 0x00	; 0
    fbbe:	90 e0       	ldi	r25, 0x00	; 0
    fbc0:	68 c0       	rjmp	.+208    	; 0xfc92 <copy+0x18c>
    fbc2:	61 e0       	ldi	r22, 0x01	; 1
    fbc4:	70 e0       	ldi	r23, 0x00	; 0
    fbc6:	80 e0       	ldi	r24, 0x00	; 0
    fbc8:	92 e0       	ldi	r25, 0x02	; 2
    fbca:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <safecalloc>
    fbce:	6c 01       	movw	r12, r24
    fbd0:	89 2b       	or	r24, r25
    fbd2:	21 f4       	brne	.+8      	; 0xfbdc <copy+0xd6>
    fbd4:	c7 01       	movw	r24, r14
    fbd6:	f4 dd       	rcall	.-1048   	; 0xf7c0 <fclose>
    fbd8:	c8 01       	movw	r24, r16
    fbda:	ed cf       	rjmp	.-38     	; 0xfbb6 <copy+0xb0>
    fbdc:	82 eb       	ldi	r24, 0xB2	; 178
    fbde:	9c e0       	ldi	r25, 0x0C	; 12
    fbe0:	a0 e0       	ldi	r26, 0x00	; 0
    fbe2:	ed b7       	in	r30, 0x3d	; 61
    fbe4:	fe b7       	in	r31, 0x3e	; 62
    fbe6:	81 83       	std	Z+1, r24	; 0x01
    fbe8:	92 83       	std	Z+2, r25	; 0x02
    fbea:	a3 83       	std	Z+3, r26	; 0x03
    fbec:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    fbf0:	81 2c       	mov	r8, r1
    fbf2:	91 2c       	mov	r9, r1
    fbf4:	54 01       	movw	r10, r8
    fbf6:	86 e9       	ldi	r24, 0x96	; 150
    fbf8:	9c e0       	ldi	r25, 0x0C	; 12
    fbfa:	2c 01       	movw	r4, r24
    fbfc:	61 2c       	mov	r6, r1
    fbfe:	97 01       	movw	r18, r14
    fc00:	40 e0       	ldi	r20, 0x00	; 0
    fc02:	52 e0       	ldi	r21, 0x02	; 2
    fc04:	61 e0       	ldi	r22, 0x01	; 1
    fc06:	70 e0       	ldi	r23, 0x00	; 0
    fc08:	c6 01       	movw	r24, r12
    fc0a:	86 dc       	rcall	.-1780   	; 0xf518 <fread>
    fc0c:	ec 01       	movw	r28, r24
    fc0e:	18 16       	cp	r1, r24
    fc10:	19 06       	cpc	r1, r25
    fc12:	44 f5       	brge	.+80     	; 0xfc64 <copy+0x15e>
    fc14:	98 01       	movw	r18, r16
    fc16:	ae 01       	movw	r20, r28
    fc18:	61 e0       	ldi	r22, 0x01	; 1
    fc1a:	70 e0       	ldi	r23, 0x00	; 0
    fc1c:	c6 01       	movw	r24, r12
    fc1e:	4e dd       	rcall	.-1380   	; 0xf6bc <fwrite>
    fc20:	8c 17       	cp	r24, r28
    fc22:	9d 07       	cpc	r25, r29
    fc24:	5c f4       	brge	.+22     	; 0xfc3c <copy+0x136>
    fc26:	85 ea       	ldi	r24, 0xA5	; 165
    fc28:	9c e0       	ldi	r25, 0x0C	; 12
    fc2a:	a0 e0       	ldi	r26, 0x00	; 0
    fc2c:	ed b7       	in	r30, 0x3d	; 61
    fc2e:	fe b7       	in	r31, 0x3e	; 62
    fc30:	81 83       	std	Z+1, r24	; 0x01
    fc32:	92 83       	std	Z+2, r25	; 0x02
    fc34:	a3 83       	std	Z+3, r26	; 0x03
    fc36:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    fc3a:	14 c0       	rjmp	.+40     	; 0xfc64 <copy+0x15e>
    fc3c:	ce 01       	movw	r24, r28
    fc3e:	dd 0f       	add	r29, r29
    fc40:	aa 0b       	sbc	r26, r26
    fc42:	bb 0b       	sbc	r27, r27
    fc44:	88 0e       	add	r8, r24
    fc46:	99 1e       	adc	r9, r25
    fc48:	aa 1e       	adc	r10, r26
    fc4a:	bb 1e       	adc	r11, r27
    fc4c:	ed b7       	in	r30, 0x3d	; 61
    fc4e:	fe b7       	in	r31, 0x3e	; 62
    fc50:	84 82       	std	Z+4, r8	; 0x04
    fc52:	95 82       	std	Z+5, r9	; 0x05
    fc54:	a6 82       	std	Z+6, r10	; 0x06
    fc56:	b7 82       	std	Z+7, r11	; 0x07
    fc58:	41 82       	std	Z+1, r4	; 0x01
    fc5a:	52 82       	std	Z+2, r5	; 0x02
    fc5c:	63 82       	std	Z+3, r6	; 0x03
    fc5e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    fc62:	cd cf       	rjmp	.-102    	; 0xfbfe <copy+0xf8>
    fc64:	ed b7       	in	r30, 0x3d	; 61
    fc66:	fe b7       	in	r31, 0x3e	; 62
    fc68:	84 82       	std	Z+4, r8	; 0x04
    fc6a:	95 82       	std	Z+5, r9	; 0x05
    fc6c:	a6 82       	std	Z+6, r10	; 0x06
    fc6e:	b7 82       	std	Z+7, r11	; 0x07
    fc70:	83 e8       	ldi	r24, 0x83	; 131
    fc72:	9c e0       	ldi	r25, 0x0C	; 12
    fc74:	a0 e0       	ldi	r26, 0x00	; 0
    fc76:	81 83       	std	Z+1, r24	; 0x01
    fc78:	92 83       	std	Z+2, r25	; 0x02
    fc7a:	a3 83       	std	Z+3, r26	; 0x03
    fc7c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    fc80:	c6 01       	movw	r24, r12
    fc82:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <safefree>
    fc86:	c7 01       	movw	r24, r14
    fc88:	9b dd       	rcall	.-1226   	; 0xf7c0 <fclose>
    fc8a:	c8 01       	movw	r24, r16
    fc8c:	99 dd       	rcall	.-1230   	; 0xf7c0 <fclose>
    fc8e:	b4 01       	movw	r22, r8
    fc90:	c5 01       	movw	r24, r10
    fc92:	ad b7       	in	r26, 0x3d	; 61
    fc94:	be b7       	in	r27, 0x3e	; 62
    fc96:	17 96       	adiw	r26, 0x07	; 7
    fc98:	0f b6       	in	r0, 0x3f	; 63
    fc9a:	f8 94       	cli
    fc9c:	be bf       	out	0x3e, r27	; 62
    fc9e:	0f be       	out	0x3f, r0	; 63
    fca0:	ad bf       	out	0x3d, r26	; 61
    fca2:	df 91       	pop	r29
    fca4:	cf 91       	pop	r28
    fca6:	1f 91       	pop	r17
    fca8:	0f 91       	pop	r16
    fcaa:	ff 90       	pop	r15
    fcac:	ef 90       	pop	r14
    fcae:	df 90       	pop	r13
    fcb0:	cf 90       	pop	r12
    fcb2:	bf 90       	pop	r11
    fcb4:	af 90       	pop	r10
    fcb6:	9f 90       	pop	r9
    fcb8:	8f 90       	pop	r8
    fcba:	6f 90       	pop	r6
    fcbc:	5f 90       	pop	r5
    fcbe:	4f 90       	pop	r4
    fcc0:	08 95       	ret

0000fcc2 <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    fcc2:	cf 93       	push	r28
    fcc4:	df 93       	push	r29
    fcc6:	00 d0       	rcall	.+0      	; 0xfcc8 <testpage+0x6>
    fcc8:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
    fcca:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
    fcce:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
    fcd2:	82 17       	cp	r24, r18
    fcd4:	93 07       	cpc	r25, r19
    fcd6:	3c f1       	brlt	.+78     	; 0xfd26 <testpage+0x64>
    {
        printf("More..");
    fcd8:	8c e7       	ldi	r24, 0x7C	; 124
    fcda:	9c e0       	ldi	r25, 0x0C	; 12
    fcdc:	a0 e0       	ldi	r26, 0x00	; 0
    fcde:	ed b7       	in	r30, 0x3d	; 61
    fce0:	fe b7       	in	r31, 0x3e	; 62
    fce2:	81 83       	std	Z+1, r24	; 0x01
    fce4:	92 83       	std	Z+2, r25	; 0x02
    fce6:	a3 83       	std	Z+3, r26	; 0x03
    fce8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    fcec:	0e 94 42 75 	call	0xea84	; 0xea84 <getchar>
    fcf0:	ec 01       	movw	r28, r24
        printf("\r");
    fcf2:	8a e7       	ldi	r24, 0x7A	; 122
    fcf4:	9c e0       	ldi	r25, 0x0C	; 12
    fcf6:	a0 e0       	ldi	r26, 0x00	; 0
    fcf8:	ed b7       	in	r30, 0x3d	; 61
    fcfa:	fe b7       	in	r31, 0x3e	; 62
    fcfc:	81 83       	std	Z+1, r24	; 0x01
    fcfe:	92 83       	std	Z+2, r25	; 0x02
    fd00:	a3 83       	std	Z+3, r26	; 0x03
    fd02:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        if(c == 'q')
    fd06:	c1 37       	cpi	r28, 0x71	; 113
    fd08:	d1 05       	cpc	r29, r1
    fd0a:	41 f0       	breq	.+16     	; 0xfd1c <testpage+0x5a>
            return(-1);                           // quit
        if(c == '\n')
    fd0c:	2a 97       	sbiw	r28, 0x0a	; 10
    fd0e:	49 f4       	brne	.+18     	; 0xfd22 <testpage+0x60>
            return(_pagesize-1);                  // single line
    fd10:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
    fd14:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
    fd18:	01 97       	sbiw	r24, 0x01	; 1
    fd1a:	05 c0       	rjmp	.+10     	; 0xfd26 <testpage+0x64>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);                           // quit
    fd1c:	8f ef       	ldi	r24, 0xFF	; 255
    fd1e:	9f ef       	ldi	r25, 0xFF	; 255
    fd20:	02 c0       	rjmp	.+4      	; 0xfd26 <testpage+0x64>
        if(c == '\n')
            return(_pagesize-1);                  // single line
        return(0);                                // new page
    fd22:	80 e0       	ldi	r24, 0x00	; 0
    fd24:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    fd26:	cd b7       	in	r28, 0x3d	; 61
    fd28:	de b7       	in	r29, 0x3e	; 62
    fd2a:	23 96       	adiw	r28, 0x03	; 3
    fd2c:	e2 e0       	ldi	r30, 0x02	; 2
    fd2e:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

0000fd32 <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
    fd32:	a7 e0       	ldi	r26, 0x07	; 7
    fd34:	b1 e0       	ldi	r27, 0x01	; 1
    fd36:	ef e9       	ldi	r30, 0x9F	; 159
    fd38:	fe e7       	ldi	r31, 0x7E	; 126
    fd3a:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__prologue_saves__+0xc>
    fd3e:	8c 01       	movw	r16, r24
    fd40:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    fd42:	6e ef       	ldi	r22, 0xFE	; 254
    fd44:	78 e0       	ldi	r23, 0x08	; 8
    fd46:	92 de       	rcall	.-732    	; 0xfa6c <fopen>
    fd48:	7c 01       	movw	r14, r24
    if (!fp)
    fd4a:	89 2b       	or	r24, r25
    fd4c:	41 f0       	breq	.+16     	; 0xfd5e <cat+0x2c>
    fd4e:	c1 2c       	mov	r12, r1
    fd50:	d1 2c       	mov	r13, r1
    fd52:	a1 2c       	mov	r10, r1
    fd54:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fd56:	8e 01       	movw	r16, r28
    fd58:	08 5f       	subi	r16, 0xF8	; 248
    fd5a:	1f 4f       	sbci	r17, 0xFF	; 255
    fd5c:	22 c0       	rjmp	.+68     	; 0xfda2 <cat+0x70>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
    fd5e:	ed b7       	in	r30, 0x3d	; 61
    fd60:	fe b7       	in	r31, 0x3e	; 62
    fd62:	15 83       	std	Z+5, r17	; 0x05
    fd64:	04 83       	std	Z+4, r16	; 0x04
    fd66:	85 e0       	ldi	r24, 0x05	; 5
    fd68:	9d e0       	ldi	r25, 0x0D	; 13
    fd6a:	a0 e0       	ldi	r26, 0x00	; 0
    fd6c:	81 83       	std	Z+1, r24	; 0x01
    fd6e:	92 83       	std	Z+2, r25	; 0x02
    fd70:	a3 83       	std	Z+3, r26	; 0x03
    fd72:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(0);
    fd76:	c1 2c       	mov	r12, r1
    fd78:	d1 2c       	mov	r13, r1
    fd7a:	76 01       	movw	r14, r12
    fd7c:	3f c0       	rjmp	.+126    	; 0xfdfc <cat+0xca>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
    fd7e:	c8 01       	movw	r24, r16
    fd80:	0e 94 2d 30 	call	0x605a	; 0x605a <trim_tail>
        size += strlen(line);
    fd84:	f8 01       	movw	r30, r16
    fd86:	01 90       	ld	r0, Z+
    fd88:	00 20       	and	r0, r0
    fd8a:	e9 f7       	brne	.-6      	; 0xfd86 <cat+0x54>
    fd8c:	31 97       	sbiw	r30, 0x01	; 1
    fd8e:	e0 1b       	sub	r30, r16
    fd90:	f1 0b       	sbc	r31, r17
    fd92:	ce 0e       	add	r12, r30
    fd94:	df 1e       	adc	r13, r31
        puts(line);
    fd96:	c8 01       	movw	r24, r16
    fd98:	0e 94 9a 75 	call	0xeb34	; 0xeb34 <puts>
        if(dopage)
    fd9c:	81 14       	cp	r8, r1
    fd9e:	91 04       	cpc	r9, r1
    fda0:	49 f4       	brne	.+18     	; 0xfdb4 <cat+0x82>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fda2:	a7 01       	movw	r20, r14
    fda4:	6e ef       	ldi	r22, 0xFE	; 254
    fda6:	70 e0       	ldi	r23, 0x00	; 0
    fda8:	c8 01       	movw	r24, r16
    fdaa:	0e 94 4e 75 	call	0xea9c	; 0xea9c <fgets>
    fdae:	89 2b       	or	r24, r25
    fdb0:	31 f7       	brne	.-52     	; 0xfd7e <cat+0x4c>
    fdb2:	06 c0       	rjmp	.+12     	; 0xfdc0 <cat+0x8e>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
    fdb4:	c5 01       	movw	r24, r10
    fdb6:	01 96       	adiw	r24, 0x01	; 1
    fdb8:	84 df       	rcall	.-248    	; 0xfcc2 <testpage>
    fdba:	5c 01       	movw	r10, r24
            if(count < 0)
    fdbc:	97 ff       	sbrs	r25, 7
    fdbe:	f1 cf       	rjmp	.-30     	; 0xfda2 <cat+0x70>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
    fdc0:	83 e0       	ldi	r24, 0x03	; 3
    fdc2:	9d e0       	ldi	r25, 0x0D	; 13
    fdc4:	a0 e0       	ldi	r26, 0x00	; 0
    fdc6:	ed b7       	in	r30, 0x3d	; 61
    fdc8:	fe b7       	in	r31, 0x3e	; 62
    fdca:	81 83       	std	Z+1, r24	; 0x01
    fdcc:	92 83       	std	Z+2, r25	; 0x02
    fdce:	a3 83       	std	Z+3, r26	; 0x03
    fdd0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    fclose(fp);
    fdd4:	c7 01       	movw	r24, r14
    fdd6:	f4 dc       	rcall	.-1560   	; 0xf7c0 <fclose>
    printf("%ld bytes\n", (long)size);
    fdd8:	0d 2c       	mov	r0, r13
    fdda:	00 0c       	add	r0, r0
    fddc:	ee 08       	sbc	r14, r14
    fdde:	ff 08       	sbc	r15, r15
    fde0:	ed b7       	in	r30, 0x3d	; 61
    fde2:	fe b7       	in	r31, 0x3e	; 62
    fde4:	c4 82       	std	Z+4, r12	; 0x04
    fde6:	d5 82       	std	Z+5, r13	; 0x05
    fde8:	e6 82       	std	Z+6, r14	; 0x06
    fdea:	f7 82       	std	Z+7, r15	; 0x07
    fdec:	88 ef       	ldi	r24, 0xF8	; 248
    fdee:	9c e0       	ldi	r25, 0x0C	; 12
    fdf0:	a0 e0       	ldi	r26, 0x00	; 0
    fdf2:	81 83       	std	Z+1, r24	; 0x01
    fdf4:	92 83       	std	Z+2, r25	; 0x02
    fdf6:	a3 83       	std	Z+3, r26	; 0x03
    fdf8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    return(size);
}
    fdfc:	c7 01       	movw	r24, r14
    fdfe:	b6 01       	movw	r22, r12
    fe00:	c9 5f       	subi	r28, 0xF9	; 249
    fe02:	de 4f       	sbci	r29, 0xFE	; 254
    fe04:	ec e0       	ldi	r30, 0x0C	; 12
    fe06:	0c 94 7e e3 	jmp	0x1c6fc	; 0x1c6fc <__epilogue_restores__+0xc>

0000fe0a <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fe0a:	4f 92       	push	r4
    fe0c:	5f 92       	push	r5
    fe0e:	6f 92       	push	r6
    fe10:	7f 92       	push	r7
    fe12:	af 92       	push	r10
    fe14:	bf 92       	push	r11
    fe16:	cf 92       	push	r12
    fe18:	df 92       	push	r13
    fe1a:	ef 92       	push	r14
    fe1c:	ff 92       	push	r15
    fe1e:	0f 93       	push	r16
    fe20:	1f 93       	push	r17
    fe22:	cf 93       	push	r28
    fe24:	df 93       	push	r29
    fe26:	cd b7       	in	r28, 0x3d	; 61
    fe28:	de b7       	in	r29, 0x3e	; 62
    fe2a:	c9 54       	subi	r28, 0x49	; 73
    fe2c:	d1 09       	sbc	r29, r1
    fe2e:	0f b6       	in	r0, 0x3f	; 63
    fe30:	f8 94       	cli
    fe32:	de bf       	out	0x3e, r29	; 62
    fe34:	0f be       	out	0x3f, r0	; 63
    fe36:	cd bf       	out	0x3d, r28	; 61
    fe38:	8c 01       	movw	r16, r24
    fe3a:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
    fe3c:	be 01       	movw	r22, r28
    fe3e:	62 5f       	subi	r22, 0xF2	; 242
    fe40:	7f 4f       	sbci	r23, 0xFF	; 255
    fe42:	19 d9       	rcall	.-3534   	; 0xf076 <stat>
    fe44:	01 96       	adiw	r24, 0x01	; 1
    fe46:	79 f4       	brne	.+30     	; 0xfe66 <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
    fe48:	ed b7       	in	r30, 0x3d	; 61
    fe4a:	fe b7       	in	r31, 0x3e	; 62
    fe4c:	15 83       	std	Z+5, r17	; 0x05
    fe4e:	04 83       	std	Z+4, r16	; 0x04
    fe50:	88 e6       	ldi	r24, 0x68	; 104
    fe52:	9c e0       	ldi	r25, 0x0C	; 12
    fe54:	a0 e0       	ldi	r26, 0x00	; 0
    fe56:	81 83       	std	Z+1, r24	; 0x01
    fe58:	92 83       	std	Z+2, r25	; 0x02
    fe5a:	a3 83       	std	Z+3, r26	; 0x03
    fe5c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(0);
    fe60:	80 e0       	ldi	r24, 0x00	; 0
    fe62:	90 e0       	ldi	r25, 0x00	; 0
    fe64:	77 c0       	rjmp	.+238    	; 0xff54 <__DATA_REGION_LENGTH__+0x54>
    }

    if(!verbose)
    fe66:	ef 28       	or	r14, r15
    fe68:	81 f4       	brne	.+32     	; 0xfe8a <ls_info+0x80>
    {
        printf("%s\n",basename(name));
    fe6a:	c8 01       	movw	r24, r16
    fe6c:	0e 94 07 76 	call	0xec0e	; 0xec0e <basename>
    fe70:	ed b7       	in	r30, 0x3d	; 61
    fe72:	fe b7       	in	r31, 0x3e	; 62
    fe74:	95 83       	std	Z+5, r25	; 0x05
    fe76:	84 83       	std	Z+4, r24	; 0x04
    fe78:	84 e6       	ldi	r24, 0x64	; 100
    fe7a:	9c e0       	ldi	r25, 0x0C	; 12
    fe7c:	a0 e0       	ldi	r26, 0x00	; 0
    fe7e:	81 83       	std	Z+1, r24	; 0x01
    fe80:	92 83       	std	Z+2, r25	; 0x02
    fe82:	a3 83       	std	Z+3, r26	; 0x03
    fe84:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    fe88:	63 c0       	rjmp	.+198    	; 0xff50 <__DATA_REGION_LENGTH__+0x50>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
    fe8a:	4e 88       	ldd	r4, Y+22	; 0x16
    fe8c:	5f 88       	ldd	r5, Y+23	; 0x17
    fe8e:	68 8c       	ldd	r6, Y+24	; 0x18
    fe90:	79 8c       	ldd	r7, Y+25	; 0x19
    fe92:	d3 01       	movw	r26, r6
    fe94:	c2 01       	movw	r24, r4
    fe96:	88 27       	eor	r24, r24
    fe98:	90 7f       	andi	r25, 0xF0	; 240
    fe9a:	aa 27       	eor	r26, r26
    fe9c:	bb 27       	eor	r27, r27
    fe9e:	81 15       	cp	r24, r1
    fea0:	90 44       	sbci	r25, 0x40	; 64
    fea2:	a1 05       	cpc	r26, r1
    fea4:	b1 05       	cpc	r27, r1
    fea6:	11 f4       	brne	.+4      	; 0xfeac <ls_info+0xa2>
        *p++ = 'd';
    fea8:	84 e6       	ldi	r24, 0x64	; 100
    feaa:	01 c0       	rjmp	.+2      	; 0xfeae <ls_info+0xa4>
    else
        *p++ = '-';
    feac:	8d e2       	ldi	r24, 0x2D	; 45
    feae:	8e af       	std	Y+62, r24	; 0x3e
    feb0:	fe 01       	movw	r30, r28
    feb2:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    feb4:	e1 2c       	mov	r14, r1
    feb6:	ff 24       	eor	r15, r15
    feb8:	f3 94       	inc	r15
    feba:	20 e0       	ldi	r18, 0x00	; 0
    febc:	30 e0       	ldi	r19, 0x00	; 0
    febe:	be 2e       	mov	r11, r30
    fec0:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
    fec2:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
    fec4:	53 e0       	ldi	r21, 0x03	; 3
    fec6:	c5 2e       	mov	r12, r21
    fec8:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
    feca:	c7 01       	movw	r24, r14
    fecc:	a0 e0       	ldi	r26, 0x00	; 0
    fece:	b0 e0       	ldi	r27, 0x00	; 0
    fed0:	84 21       	and	r24, r4
    fed2:	95 21       	and	r25, r5
    fed4:	a6 21       	and	r26, r6
    fed6:	b7 21       	and	r27, r7
    fed8:	89 2b       	or	r24, r25
    feda:	8a 2b       	or	r24, r26
    fedc:	8b 2b       	or	r24, r27
    fede:	51 f0       	breq	.+20     	; 0xfef4 <ls_info+0xea>
            *p++ = cm[ i % 3];
    fee0:	c9 01       	movw	r24, r18
    fee2:	b6 01       	movw	r22, r12
    fee4:	0e 94 dc e2 	call	0x1c5b8	; 0x1c5b8 <__divmodhi4>
    fee8:	dc 01       	movw	r26, r24
    feea:	a6 54       	subi	r26, 0x46	; 70
    feec:	b4 4f       	sbci	r27, 0xF4	; 244
    feee:	8c 91       	ld	r24, X
    fef0:	81 83       	std	Z+1, r24	; 0x01
    fef2:	01 c0       	rjmp	.+2      	; 0xfef6 <ls_info+0xec>
        else
            *p++ = '-';
    fef4:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
    fef6:	f6 94       	lsr	r15
    fef8:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
    fefa:	2f 5f       	subi	r18, 0xFF	; 255
    fefc:	3f 4f       	sbci	r19, 0xFF	; 255
    fefe:	31 96       	adiw	r30, 0x01	; 1
    ff00:	29 30       	cpi	r18, 0x09	; 9
    ff02:	31 05       	cpc	r19, r1
    ff04:	11 f7       	brne	.-60     	; 0xfeca <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
    ff06:	29 96       	adiw	r28, 0x09	; 9
    ff08:	1f ae       	std	Y+63, r1	; 0x3f
    ff0a:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
    ff0c:	4e a0       	ldd	r4, Y+38	; 0x26
    ff0e:	5f a0       	ldd	r5, Y+39	; 0x27
    ff10:	68 a4       	ldd	r6, Y+40	; 0x28
    ff12:	79 a4       	ldd	r7, Y+41	; 0x29
    ff14:	6e a9       	ldd	r22, Y+54	; 0x36
    ff16:	7f a9       	ldd	r23, Y+55	; 0x37
    ff18:	88 ad       	ldd	r24, Y+56	; 0x38
    ff1a:	99 ad       	ldd	r25, Y+57	; 0x39
    ff1c:	0e 94 e2 75 	call	0xebc4	; 0xebc4 <mctime>
    ff20:	7c 01       	movw	r14, r24
    ff22:	c8 01       	movw	r24, r16
    ff24:	0e 94 07 76 	call	0xec0e	; 0xec0e <basename>
    ff28:	ed b7       	in	r30, 0x3d	; 61
    ff2a:	fe b7       	in	r31, 0x3e	; 62
    ff2c:	95 87       	std	Z+13, r25	; 0x0d
    ff2e:	84 87       	std	Z+12, r24	; 0x0c
    ff30:	f3 86       	std	Z+11, r15	; 0x0b
    ff32:	e2 86       	std	Z+10, r14	; 0x0a
    ff34:	46 82       	std	Z+6, r4	; 0x06
    ff36:	57 82       	std	Z+7, r5	; 0x07
    ff38:	60 86       	std	Z+8, r6	; 0x08
    ff3a:	71 86       	std	Z+9, r7	; 0x09
    ff3c:	b4 82       	std	Z+4, r11	; 0x04
    ff3e:	a5 82       	std	Z+5, r10	; 0x05
    ff40:	8a e4       	ldi	r24, 0x4A	; 74
    ff42:	9c e0       	ldi	r25, 0x0C	; 12
    ff44:	a0 e0       	ldi	r26, 0x00	; 0
    ff46:	81 83       	std	Z+1, r24	; 0x01
    ff48:	92 83       	std	Z+2, r25	; 0x02
    ff4a:	a3 83       	std	Z+3, r26	; 0x03
    ff4c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
    ff50:	81 e0       	ldi	r24, 0x01	; 1
    ff52:	90 e0       	ldi	r25, 0x00	; 0
}
    ff54:	c7 5b       	subi	r28, 0xB7	; 183
    ff56:	df 4f       	sbci	r29, 0xFF	; 255
    ff58:	0f b6       	in	r0, 0x3f	; 63
    ff5a:	f8 94       	cli
    ff5c:	de bf       	out	0x3e, r29	; 62
    ff5e:	0f be       	out	0x3f, r0	; 63
    ff60:	cd bf       	out	0x3d, r28	; 61
    ff62:	df 91       	pop	r29
    ff64:	cf 91       	pop	r28
    ff66:	1f 91       	pop	r17
    ff68:	0f 91       	pop	r16
    ff6a:	ff 90       	pop	r15
    ff6c:	ef 90       	pop	r14
    ff6e:	df 90       	pop	r13
    ff70:	cf 90       	pop	r12
    ff72:	bf 90       	pop	r11
    ff74:	af 90       	pop	r10
    ff76:	7f 90       	pop	r7
    ff78:	6f 90       	pop	r6
    ff7a:	5f 90       	pop	r5
    ff7c:	4f 90       	pop	r4
    ff7e:	08 95       	ret

0000ff80 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
    ff80:	2f 92       	push	r2
    ff82:	3f 92       	push	r3
    ff84:	4f 92       	push	r4
    ff86:	5f 92       	push	r5
    ff88:	6f 92       	push	r6
    ff8a:	8f 92       	push	r8
    ff8c:	9f 92       	push	r9
    ff8e:	af 92       	push	r10
    ff90:	bf 92       	push	r11
    ff92:	cf 92       	push	r12
    ff94:	df 92       	push	r13
    ff96:	ef 92       	push	r14
    ff98:	ff 92       	push	r15
    ff9a:	0f 93       	push	r16
    ff9c:	1f 93       	push	r17
    ff9e:	cf 93       	push	r28
    ffa0:	df 93       	push	r29
    ffa2:	cd b7       	in	r28, 0x3d	; 61
    ffa4:	de b7       	in	r29, 0x3e	; 62
    ffa6:	c7 53       	subi	r28, 0x37	; 55
    ffa8:	d1 40       	sbci	r29, 0x01	; 1
    ffaa:	0f b6       	in	r0, 0x3f	; 63
    ffac:	f8 94       	cli
    ffae:	de bf       	out	0x3e, r29	; 62
    ffb0:	0f be       	out	0x3f, r0	; 63
    ffb2:	cd bf       	out	0x3d, r28	; 61
    ffb4:	7c 01       	movw	r14, r24
    ffb6:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    ffb8:	1e 82       	std	Y+6, r1	; 0x06
    ffba:	8e 01       	movw	r16, r28
    ffbc:	0a 5f       	subi	r16, 0xFA	; 250
    ffbe:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
    ffc0:	00 97       	sbiw	r24, 0x00	; 0
    ffc2:	91 f4       	brne	.+36     	; 0xffe8 <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
    ffc4:	6e ef       	ldi	r22, 0xFE	; 254
    ffc6:	70 e0       	ldi	r23, 0x00	; 0
    ffc8:	c8 01       	movw	r24, r16
    ffca:	0e 94 5d 76 	call	0xecba	; 0xecba <getcwd>
    ffce:	89 2b       	or	r24, r25
    ffd0:	d1 f4       	brne	.+52     	; 0x10006 <__EEPROM_REGION_LENGTH__+0x6>
        {
            printf("ls: Can't get current directory\n");
    ffd2:	89 e2       	ldi	r24, 0x29	; 41
    ffd4:	9c e0       	ldi	r25, 0x0C	; 12
    ffd6:	a0 e0       	ldi	r26, 0x00	; 0
    ffd8:	ed b7       	in	r30, 0x3d	; 61
    ffda:	fe b7       	in	r31, 0x3e	; 62
    ffdc:	81 83       	std	Z+1, r24	; 0x01
    ffde:	92 83       	std	Z+2, r25	; 0x02
    ffe0:	a3 83       	std	Z+3, r26	; 0x03
    ffe2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    ffe6:	37 c0       	rjmp	.+110    	; 0x10056 <__EEPROM_REGION_LENGTH__+0x56>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
    ffe8:	fc 01       	movw	r30, r24
    ffea:	80 81       	ld	r24, Z
    ffec:	88 23       	and	r24, r24
    ffee:	51 f3       	breq	.-44     	; 0xffc4 <ls+0x44>
    fff0:	6d ef       	ldi	r22, 0xFD	; 253
    fff2:	72 e1       	ldi	r23, 0x12	; 18
    fff4:	c7 01       	movw	r24, r14
    fff6:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
    fffa:	89 2b       	or	r24, r25
    fffc:	19 f7       	brne	.-58     	; 0xffc4 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
    fffe:	b7 01       	movw	r22, r14
   10000:	c8 01       	movw	r24, r16
   10002:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <strcpy>
    }
    len = strlen(fullpath);
   10006:	f8 01       	movw	r30, r16
   10008:	01 90       	ld	r0, Z+
   1000a:	00 20       	and	r0, r0
   1000c:	e9 f7       	brne	.-6      	; 0x10008 <__EEPROM_REGION_LENGTH__+0x8>
   1000e:	31 97       	sbiw	r30, 0x01	; 1
   10010:	1f 01       	movw	r2, r30
   10012:	20 1a       	sub	r2, r16
   10014:	31 0a       	sbc	r3, r17

    printf("Listing:[%s]\n",fullpath);
   10016:	ed b7       	in	r30, 0x3d	; 61
   10018:	fe b7       	in	r31, 0x3e	; 62
   1001a:	15 83       	std	Z+5, r17	; 0x05
   1001c:	04 83       	std	Z+4, r16	; 0x04
   1001e:	8b e1       	ldi	r24, 0x1B	; 27
   10020:	9c e0       	ldi	r25, 0x0C	; 12
   10022:	a0 e0       	ldi	r26, 0x00	; 0
   10024:	81 83       	std	Z+1, r24	; 0x01
   10026:	92 83       	std	Z+2, r25	; 0x02
   10028:	a3 83       	std	Z+3, r26	; 0x03
   1002a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    if (stat(fullpath, &st))
   1002e:	be 01       	movw	r22, r28
   10030:	6a 5f       	subi	r22, 0xFA	; 250
   10032:	7e 4f       	sbci	r23, 0xFE	; 254
   10034:	c8 01       	movw	r24, r16
   10036:	1f d8       	rcall	.-4034   	; 0xf076 <stat>
   10038:	7c 01       	movw	r14, r24
   1003a:	89 2b       	or	r24, r25
   1003c:	79 f0       	breq	.+30     	; 0x1005c <__EEPROM_REGION_LENGTH__+0x5c>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   1003e:	ed b7       	in	r30, 0x3d	; 61
   10040:	fe b7       	in	r31, 0x3e	; 62
   10042:	15 83       	std	Z+5, r17	; 0x05
   10044:	04 83       	std	Z+4, r16	; 0x04
   10046:	85 e0       	ldi	r24, 0x05	; 5
   10048:	9c e0       	ldi	r25, 0x0C	; 12
   1004a:	a0 e0       	ldi	r26, 0x00	; 0
   1004c:	81 83       	std	Z+1, r24	; 0x01
   1004e:	92 83       	std	Z+2, r25	; 0x02
   10050:	a3 83       	std	Z+3, r26	; 0x03
   10052:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(0);
   10056:	e1 2c       	mov	r14, r1
   10058:	f1 2c       	mov	r15, r1
   1005a:	8c c0       	rjmp	.+280    	; 0x10174 <__EEPROM_REGION_LENGTH__+0x174>
    }

    switch (st.st_mode & S_IFMT)
   1005c:	c2 5f       	subi	r28, 0xF2	; 242
   1005e:	de 4f       	sbci	r29, 0xFE	; 254
   10060:	88 81       	ld	r24, Y
   10062:	99 81       	ldd	r25, Y+1	; 0x01
   10064:	aa 81       	ldd	r26, Y+2	; 0x02
   10066:	bb 81       	ldd	r27, Y+3	; 0x03
   10068:	ce 50       	subi	r28, 0x0E	; 14
   1006a:	d1 40       	sbci	r29, 0x01	; 1
   1006c:	88 27       	eor	r24, r24
   1006e:	90 7f       	andi	r25, 0xF0	; 240
   10070:	aa 27       	eor	r26, r26
   10072:	bb 27       	eor	r27, r27
   10074:	81 15       	cp	r24, r1
   10076:	f0 e4       	ldi	r31, 0x40	; 64
   10078:	9f 07       	cpc	r25, r31
   1007a:	a1 05       	cpc	r26, r1
   1007c:	b1 05       	cpc	r27, r1
   1007e:	59 f0       	breq	.+22     	; 0x10096 <__EEPROM_REGION_LENGTH__+0x96>
   10080:	81 15       	cp	r24, r1
   10082:	90 48       	sbci	r25, 0x80	; 128
   10084:	a1 05       	cpc	r26, r1
   10086:	b1 05       	cpc	r27, r1
   10088:	09 f0       	breq	.+2      	; 0x1008c <__EEPROM_REGION_LENGTH__+0x8c>
   1008a:	66 c0       	rjmp	.+204    	; 0x10158 <__EEPROM_REGION_LENGTH__+0x158>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
   1008c:	b4 01       	movw	r22, r8
   1008e:	c8 01       	movw	r24, r16
   10090:	bc de       	rcall	.-648    	; 0xfe0a <ls_info>
   10092:	7c 01       	movw	r14, r24
            break;
   10094:	63 c0       	rjmp	.+198    	; 0x1015c <__EEPROM_REGION_LENGTH__+0x15c>
        case S_IFDIR:
            dirp = opendir(fullpath);
   10096:	c8 01       	movw	r24, r16
   10098:	0e 94 0b 77 	call	0xee16	; 0xee16 <opendir>
   1009c:	5c 01       	movw	r10, r24
            if(!dirp)
   1009e:	89 2b       	or	r24, r25
   100a0:	81 f0       	breq	.+32     	; 0x100c2 <__EEPROM_REGION_LENGTH__+0xc2>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   100a2:	e1 2c       	mov	r14, r1
   100a4:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
   100a6:	c8 01       	movw	r24, r16
   100a8:	82 0d       	add	r24, r2
   100aa:	93 1d       	adc	r25, r3
   100ac:	ca 5c       	subi	r28, 0xCA	; 202
   100ae:	de 4f       	sbci	r29, 0xFE	; 254
   100b0:	99 83       	std	Y+1, r25	; 0x01
   100b2:	88 83       	st	Y, r24
   100b4:	c6 53       	subi	r28, 0x36	; 54
   100b6:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   100b8:	82 ed       	ldi	r24, 0xD2	; 210
   100ba:	9b e0       	ldi	r25, 0x0B	; 11
   100bc:	2c 01       	movw	r4, r24
   100be:	61 2c       	mov	r6, r1
   100c0:	24 c0       	rjmp	.+72     	; 0x1010a <__EEPROM_REGION_LENGTH__+0x10a>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
   100c2:	85 ef       	ldi	r24, 0xF5	; 245
   100c4:	9b e0       	ldi	r25, 0x0B	; 11
   100c6:	a0 e0       	ldi	r26, 0x00	; 0
   100c8:	ed b7       	in	r30, 0x3d	; 61
   100ca:	fe b7       	in	r31, 0x3e	; 62
   100cc:	81 83       	std	Z+1, r24	; 0x01
   100ce:	92 83       	std	Z+2, r25	; 0x02
   100d0:	a3 83       	std	Z+3, r26	; 0x03
   100d2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
                return(0);
   100d6:	4e c0       	rjmp	.+156    	; 0x10174 <__EEPROM_REGION_LENGTH__+0x174>
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
   100d8:	f6 01       	movw	r30, r12
   100da:	80 81       	ld	r24, Z
   100dc:	88 23       	and	r24, r24
   100de:	d9 f0       	breq	.+54     	; 0x10116 <__EEPROM_REGION_LENGTH__+0x116>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
   100e0:	f6 01       	movw	r30, r12
   100e2:	01 90       	ld	r0, Z+
   100e4:	00 20       	and	r0, r0
   100e6:	e9 f7       	brne	.-6      	; 0x100e2 <__EEPROM_REGION_LENGTH__+0xe2>
   100e8:	31 97       	sbiw	r30, 0x01	; 1
   100ea:	ec 19       	sub	r30, r12
   100ec:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
   100ee:	e2 0d       	add	r30, r2
   100f0:	f3 1d       	adc	r31, r3
   100f2:	ef 3f       	cpi	r30, 0xFF	; 255
   100f4:	f1 05       	cpc	r31, r1
   100f6:	9c f0       	brlt	.+38     	; 0x1011e <__EEPROM_REGION_LENGTH__+0x11e>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   100f8:	ed b7       	in	r30, 0x3d	; 61
   100fa:	fe b7       	in	r31, 0x3e	; 62
   100fc:	d5 82       	std	Z+5, r13	; 0x05
   100fe:	c4 82       	std	Z+4, r12	; 0x04
   10100:	41 82       	std	Z+1, r4	; 0x01
   10102:	52 82       	std	Z+2, r5	; 0x02
   10104:	63 82       	std	Z+3, r6	; 0x03
   10106:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(0);
            }
            while ( (de = readdir(dirp)) )
   1010a:	c5 01       	movw	r24, r10
   1010c:	0e 94 29 77 	call	0xee52	; 0xee52 <readdir>
   10110:	6c 01       	movw	r12, r24
   10112:	89 2b       	or	r24, r25
   10114:	09 f7       	brne	.-62     	; 0x100d8 <__EEPROM_REGION_LENGTH__+0xd8>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
   10116:	c5 01       	movw	r24, r10
   10118:	0e 94 f0 76 	call	0xede0	; 0xede0 <closedir>
            break;
   1011c:	1f c0       	rjmp	.+62     	; 0x1015c <__EEPROM_REGION_LENGTH__+0x15c>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
   1011e:	66 ea       	ldi	r22, 0xA6	; 166
   10120:	78 e0       	ldi	r23, 0x08	; 8
   10122:	c8 01       	movw	r24, r16
   10124:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
   10128:	89 2b       	or	r24, r25
   1012a:	29 f4       	brne	.+10     	; 0x10136 <__EEPROM_REGION_LENGTH__+0x136>
                {
                    strcat(fullpath,"/");
   1012c:	66 ea       	ldi	r22, 0xA6	; 166
   1012e:	78 e0       	ldi	r23, 0x08	; 8
   10130:	c8 01       	movw	r24, r16
   10132:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <strcat>
                }
                strcat(fullpath,de->d_name);
   10136:	b6 01       	movw	r22, r12
   10138:	c8 01       	movw	r24, r16
   1013a:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <strcat>
                files +=ls_info(fullpath,verbose);
   1013e:	b4 01       	movw	r22, r8
   10140:	c8 01       	movw	r24, r16
   10142:	63 de       	rcall	.-826    	; 0xfe0a <ls_info>
   10144:	e8 0e       	add	r14, r24
   10146:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
   10148:	ca 5c       	subi	r28, 0xCA	; 202
   1014a:	de 4f       	sbci	r29, 0xFE	; 254
   1014c:	e8 81       	ld	r30, Y
   1014e:	f9 81       	ldd	r31, Y+1	; 0x01
   10150:	c6 53       	subi	r28, 0x36	; 54
   10152:	d1 40       	sbci	r29, 0x01	; 1
   10154:	10 82       	st	Z, r1
   10156:	d9 cf       	rjmp	.-78     	; 0x1010a <__EEPROM_REGION_LENGTH__+0x10a>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   10158:	e1 2c       	mov	r14, r1
   1015a:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
   1015c:	ed b7       	in	r30, 0x3d	; 61
   1015e:	fe b7       	in	r31, 0x3e	; 62
   10160:	f5 82       	std	Z+5, r15	; 0x05
   10162:	e4 82       	std	Z+4, r14	; 0x04
   10164:	87 ec       	ldi	r24, 0xC7	; 199
   10166:	9b e0       	ldi	r25, 0x0B	; 11
   10168:	a0 e0       	ldi	r26, 0x00	; 0
   1016a:	81 83       	std	Z+1, r24	; 0x01
   1016c:	92 83       	std	Z+2, r25	; 0x02
   1016e:	a3 83       	std	Z+3, r26	; 0x03
   10170:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    return(files);
}
   10174:	c7 01       	movw	r24, r14
   10176:	c9 5c       	subi	r28, 0xC9	; 201
   10178:	de 4f       	sbci	r29, 0xFE	; 254
   1017a:	0f b6       	in	r0, 0x3f	; 63
   1017c:	f8 94       	cli
   1017e:	de bf       	out	0x3e, r29	; 62
   10180:	0f be       	out	0x3f, r0	; 63
   10182:	cd bf       	out	0x3d, r28	; 61
   10184:	df 91       	pop	r29
   10186:	cf 91       	pop	r28
   10188:	1f 91       	pop	r17
   1018a:	0f 91       	pop	r16
   1018c:	ff 90       	pop	r15
   1018e:	ef 90       	pop	r14
   10190:	df 90       	pop	r13
   10192:	cf 90       	pop	r12
   10194:	bf 90       	pop	r11
   10196:	af 90       	pop	r10
   10198:	9f 90       	pop	r9
   1019a:	8f 90       	pop	r8
   1019c:	6f 90       	pop	r6
   1019e:	5f 90       	pop	r5
   101a0:	4f 90       	pop	r4
   101a2:	3f 90       	pop	r3
   101a4:	2f 90       	pop	r2
   101a6:	08 95       	ret

000101a8 <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   101a8:	a7 e0       	ldi	r26, 0x07	; 7
   101aa:	b1 e0       	ldi	r27, 0x01	; 1
   101ac:	ea ed       	ldi	r30, 0xDA	; 218
   101ae:	f0 e8       	ldi	r31, 0x80	; 128
   101b0:	0c 94 5e e3 	jmp	0x1c6bc	; 0x1c6bc <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
	if(argc < 1)
   101b4:	18 16       	cp	r1, r24
   101b6:	19 06       	cpc	r1, r25
   101b8:	0c f0       	brlt	.+2      	; 0x101bc <posix_tests+0x14>
   101ba:	a8 c1       	rjmp	.+848    	; 0x1050c <posix_tests+0x364>
		return(0);

    ptr = argv[ind++];
   101bc:	fb 01       	movw	r30, r22
   101be:	c0 80       	ld	r12, Z
   101c0:	d1 80       	ldd	r13, Z+1	; 0x01
	printf("argv[%d]=%s\n",(int)i, argv[i]);
}
#endif


    if(!ptr)
   101c2:	c1 14       	cp	r12, r1
   101c4:	d1 04       	cpc	r13, r1
   101c6:	09 f4       	brne	.+2      	; 0x101ca <posix_tests+0x22>
   101c8:	a1 c1       	rjmp	.+834    	; 0x1050c <posix_tests+0x364>
   101ca:	2b 01       	movw	r4, r22
   101cc:	3c 01       	movw	r6, r24
        return(0);

    if( MATCH(ptr,"posix") )
   101ce:	6e eb       	ldi	r22, 0xBE	; 190
   101d0:	7b e0       	ldi	r23, 0x0B	; 11
   101d2:	c6 01       	movw	r24, r12
   101d4:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
   101d8:	89 2b       	or	r24, r25
   101da:	a1 f0       	breq	.+40     	; 0x10204 <posix_tests+0x5c>
    {
        ptr = argv[ind++];
   101dc:	f2 01       	movw	r30, r4
   101de:	c2 80       	ldd	r12, Z+2	; 0x02
   101e0:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   101e2:	c1 14       	cp	r12, r1
   101e4:	d1 04       	cpc	r13, r1
   101e6:	21 f4       	brne	.+8      	; 0x101f0 <posix_tests+0x48>
        {
            posix_help(1);
   101e8:	81 e0       	ldi	r24, 0x01	; 1
   101ea:	90 e0       	ldi	r25, 0x00	; 0
   101ec:	6b dc       	rcall	.-1834   	; 0xfac4 <posix_help>
   101ee:	31 c1       	rjmp	.+610    	; 0x10452 <posix_tests+0x2aa>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   101f0:	69 e7       	ldi	r22, 0x79	; 121
   101f2:	76 e1       	ldi	r23, 0x16	; 22
   101f4:	c6 01       	movw	r24, r12
   101f6:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
   101fa:	89 2b       	or	r24, r25
   101fc:	a9 f7       	brne	.-22     	; 0x101e8 <posix_tests+0x40>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   101fe:	02 e0       	ldi	r16, 0x02	; 2
   10200:	10 e0       	ldi	r17, 0x00	; 0
   10202:	02 c0       	rjmp	.+4      	; 0x10208 <posix_tests+0x60>

    ind = 0;
	if(argc < 1)
		return(0);

    ptr = argv[ind++];
   10204:	01 e0       	ldi	r16, 0x01	; 1
   10206:	10 e0       	ldi	r17, 0x00	; 0
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   10208:	58 01       	movw	r10, r16
   1020a:	ff ef       	ldi	r31, 0xFF	; 255
   1020c:	af 1a       	sub	r10, r31
   1020e:	bf 0a       	sbc	r11, r31
   10210:	93 01       	movw	r18, r6
   10212:	a5 01       	movw	r20, r10
   10214:	64 ec       	ldi	r22, 0xC4	; 196
   10216:	7b e0       	ldi	r23, 0x0B	; 11
   10218:	c6 01       	movw	r24, r12
   1021a:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
   1021e:	89 2b       	or	r24, r25
   10220:	99 f1       	breq	.+102    	; 0x10288 <posix_tests+0xe0>
   10222:	78 01       	movw	r14, r16
   10224:	ee 0c       	add	r14, r14
   10226:	ff 1c       	adc	r15, r15
   10228:	e4 0c       	add	r14, r4
   1022a:	f5 1c       	adc	r15, r5
   1022c:	57 01       	movw	r10, r14
   1022e:	47 01       	movw	r8, r14
   10230:	68 01       	movw	r12, r16
   10232:	41 2c       	mov	r4, r1
   10234:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   10236:	c6 14       	cp	r12, r6
   10238:	d7 04       	cpc	r13, r7
   1023a:	14 f5       	brge	.+68     	; 0x10280 <posix_tests+0xd8>
        {
            if(MATCH(argv[i],"-p"))
   1023c:	68 ec       	ldi	r22, 0xC8	; 200
   1023e:	7b e0       	ldi	r23, 0x0B	; 11
   10240:	f4 01       	movw	r30, r8
   10242:	81 91       	ld	r24, Z+
   10244:	91 91       	ld	r25, Z+
   10246:	4f 01       	movw	r8, r30
   10248:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
   1024c:	89 2b       	or	r24, r25
   1024e:	19 f0       	breq	.+6      	; 0x10256 <posix_tests+0xae>
                page = 1;
   10250:	44 24       	eor	r4, r4
   10252:	43 94       	inc	r4
   10254:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   10256:	ff ef       	ldi	r31, 0xFF	; 255
   10258:	cf 1a       	sub	r12, r31
   1025a:	df 0a       	sbc	r13, r31
   1025c:	ec cf       	rjmp	.-40     	; 0x10236 <posix_tests+0x8e>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   1025e:	68 ec       	ldi	r22, 0xC8	; 200
   10260:	7b e0       	ldi	r23, 0x0B	; 11
   10262:	f5 01       	movw	r30, r10
   10264:	81 91       	ld	r24, Z+
   10266:	91 91       	ld	r25, Z+
   10268:	5f 01       	movw	r10, r30
   1026a:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
   1026e:	89 2b       	or	r24, r25
   10270:	29 f4       	brne	.+10     	; 0x1027c <posix_tests+0xd4>
                cat(argv[ind], page);
   10272:	b2 01       	movw	r22, r4
   10274:	f7 01       	movw	r30, r14
   10276:	80 81       	ld	r24, Z
   10278:	91 81       	ldd	r25, Z+1	; 0x01
   1027a:	5b dd       	rcall	.-1354   	; 0xfd32 <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   1027c:	0f 5f       	subi	r16, 0xFF	; 255
   1027e:	1f 4f       	sbci	r17, 0xFF	; 255
   10280:	06 15       	cp	r16, r6
   10282:	17 05       	cpc	r17, r7
   10284:	64 f3       	brlt	.-40     	; 0x1025e <posix_tests+0xb6>
   10286:	e5 c0       	rjmp	.+458    	; 0x10452 <posix_tests+0x2aa>
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   10288:	48 01       	movw	r8, r16
   1028a:	f2 e0       	ldi	r31, 0x02	; 2
   1028c:	8f 0e       	add	r8, r31
   1028e:	91 1c       	adc	r9, r1
   10290:	93 01       	movw	r18, r6
   10292:	a4 01       	movw	r20, r8
   10294:	6b ec       	ldi	r22, 0xCB	; 203
   10296:	7b e0       	ldi	r23, 0x0B	; 11
   10298:	c6 01       	movw	r24, r12
   1029a:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
   1029e:	89 2b       	or	r24, r25
   102a0:	59 f0       	breq	.+22     	; 0x102b8 <posix_tests+0x110>
    {
        copy(argv[ind],argv[ind+1]);
   102a2:	f8 01       	movw	r30, r16
   102a4:	ee 0f       	add	r30, r30
   102a6:	ff 1f       	adc	r31, r31
   102a8:	e4 0d       	add	r30, r4
   102aa:	f5 1d       	adc	r31, r5
   102ac:	62 81       	ldd	r22, Z+2	; 0x02
   102ae:	73 81       	ldd	r23, Z+3	; 0x03
   102b0:	80 81       	ld	r24, Z
   102b2:	91 81       	ldd	r25, Z+1	; 0x01
   102b4:	28 dc       	rcall	.-1968   	; 0xfb06 <copy>
   102b6:	cd c0       	rjmp	.+410    	; 0x10452 <posix_tests+0x2aa>
        return(1);
    }

    else if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   102b8:	93 01       	movw	r18, r6
   102ba:	a5 01       	movw	r20, r10
   102bc:	60 ed       	ldi	r22, 0xD0	; 208
   102be:	7b e0       	ldi	r23, 0x0B	; 11
   102c0:	c6 01       	movw	r24, r12
   102c2:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
   102c6:	89 2b       	or	r24, r25
   102c8:	b9 f0       	breq	.+46     	; 0x102f8 <posix_tests+0x150>
    {
        if ( chdir(argv[ind]) != 0)
   102ca:	78 01       	movw	r14, r16
   102cc:	ee 0c       	add	r14, r14
   102ce:	ff 1c       	adc	r15, r15
   102d0:	e4 0c       	add	r14, r4
   102d2:	f5 1c       	adc	r15, r5
   102d4:	f7 01       	movw	r30, r14
   102d6:	80 81       	ld	r24, Z
   102d8:	91 81       	ldd	r25, Z+1	; 0x01
   102da:	0e 94 15 76 	call	0xec2a	; 0xec2a <chdir>
   102de:	89 2b       	or	r24, r25
   102e0:	09 f4       	brne	.+2      	; 0x102e4 <posix_tests+0x13c>
   102e2:	b7 c0       	rjmp	.+366    	; 0x10452 <posix_tests+0x2aa>
            printf("chdir %s failed\n", argv[ind]);
   102e4:	f7 01       	movw	r30, r14
   102e6:	80 81       	ld	r24, Z
   102e8:	91 81       	ldd	r25, Z+1	; 0x01
   102ea:	ed b7       	in	r30, 0x3d	; 61
   102ec:	fe b7       	in	r31, 0x3e	; 62
   102ee:	95 83       	std	Z+5, r25	; 0x05
   102f0:	84 83       	std	Z+4, r24	; 0x04
   102f2:	82 e7       	ldi	r24, 0x72	; 114
   102f4:	9d e0       	ldi	r25, 0x0D	; 13
   102f6:	a7 c0       	rjmp	.+334    	; 0x10446 <posix_tests+0x29e>
        logfile(argv[ind],argv[ind+1]);
        return(1);
    }
#endif

    else if (MATCHI(ptr,"ls") )
   102f8:	68 ed       	ldi	r22, 0xD8	; 216
   102fa:	78 e0       	ldi	r23, 0x08	; 8
   102fc:	c6 01       	movw	r24, r12
   102fe:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <MATCHI>
   10302:	7c 01       	movw	r14, r24
   10304:	89 2b       	or	r24, r25
   10306:	e1 f1       	breq	.+120    	; 0x10380 <posix_tests+0x1d8>
   10308:	78 01       	movw	r14, r16
   1030a:	ee 0c       	add	r14, r14
   1030c:	ff 1c       	adc	r15, r15
   1030e:	e4 0c       	add	r14, r4
   10310:	f5 1c       	adc	r15, r5
   10312:	c1 2c       	mov	r12, r1
   10314:	d1 2c       	mov	r13, r1
        int args = 0;
        for(i=ind;i<argc;++i)
        {
			if(!argv[i])
			{
				printf("ls: null argument # %d\n", i);
   10316:	8a e5       	ldi	r24, 0x5A	; 90
   10318:	9d e0       	ldi	r25, 0x0D	; 13
   1031a:	4c 01       	movw	r8, r24
   1031c:	a1 2c       	mov	r10, r1

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   1031e:	06 15       	cp	r16, r6
   10320:	17 05       	cpc	r17, r7
   10322:	24 f5       	brge	.+72     	; 0x1036c <posix_tests+0x1c4>
        {
			if(!argv[i])
   10324:	f7 01       	movw	r30, r14
   10326:	80 81       	ld	r24, Z
   10328:	91 81       	ldd	r25, Z+1	; 0x01
   1032a:	00 97       	sbiw	r24, 0x00	; 0
   1032c:	51 f4       	brne	.+20     	; 0x10342 <posix_tests+0x19a>
			{
				printf("ls: null argument # %d\n", i);
   1032e:	ed b7       	in	r30, 0x3d	; 61
   10330:	fe b7       	in	r31, 0x3e	; 62
   10332:	15 83       	std	Z+5, r17	; 0x05
   10334:	04 83       	std	Z+4, r16	; 0x04
   10336:	81 82       	std	Z+1, r8	; 0x01
   10338:	92 82       	std	Z+2, r9	; 0x02
   1033a:	a3 82       	std	Z+3, r10	; 0x03
   1033c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
				continue;
   10340:	0f c0       	rjmp	.+30     	; 0x10360 <posix_tests+0x1b8>
			}
            if(MATCH(argv[i],"-l"))	// skip long format test - we always use long format
   10342:	63 ed       	ldi	r22, 0xD3	; 211
   10344:	7b e0       	ldi	r23, 0x0B	; 11
   10346:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
   1034a:	89 2b       	or	r24, r25
   1034c:	49 f4       	brne	.+18     	; 0x10360 <posix_tests+0x1b8>
				continue;
			ls(argv[i],1);
   1034e:	61 e0       	ldi	r22, 0x01	; 1
   10350:	70 e0       	ldi	r23, 0x00	; 0
   10352:	f7 01       	movw	r30, r14
   10354:	80 81       	ld	r24, Z
   10356:	91 81       	ldd	r25, Z+1	; 0x01
   10358:	13 de       	rcall	.-986    	; 0xff80 <ls>
            ++args;
   1035a:	ff ef       	ldi	r31, 0xFF	; 255
   1035c:	cf 1a       	sub	r12, r31
   1035e:	df 0a       	sbc	r13, r31

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   10360:	0f 5f       	subi	r16, 0xFF	; 255
   10362:	1f 4f       	sbci	r17, 0xFF	; 255
   10364:	82 e0       	ldi	r24, 0x02	; 2
   10366:	e8 0e       	add	r14, r24
   10368:	f1 1c       	adc	r15, r1
   1036a:	d9 cf       	rjmp	.-78     	; 0x1031e <posix_tests+0x176>
            if(MATCH(argv[i],"-l"))	// skip long format test - we always use long format
				continue;
			ls(argv[i],1);
            ++args;
        }
        if(!args)
   1036c:	c1 14       	cp	r12, r1
   1036e:	d1 04       	cpc	r13, r1
   10370:	09 f0       	breq	.+2      	; 0x10374 <posix_tests+0x1cc>
   10372:	6f c0       	rjmp	.+222    	; 0x10452 <posix_tests+0x2aa>
        {
            ls("",1);
   10374:	61 e0       	ldi	r22, 0x01	; 1
   10376:	70 e0       	ldi	r23, 0x00	; 0
   10378:	8d e2       	ldi	r24, 0x2D	; 45
   1037a:	9c e0       	ldi	r25, 0x0C	; 12
   1037c:	01 de       	rcall	.-1022   	; 0xff80 <ls>
   1037e:	69 c0       	rjmp	.+210    	; 0x10452 <posix_tests+0x2aa>
        mkfs(argv[ind++]);
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   10380:	93 01       	movw	r18, r6
   10382:	a5 01       	movw	r20, r10
   10384:	66 ed       	ldi	r22, 0xD6	; 214
   10386:	7b e0       	ldi	r23, 0x0B	; 11
   10388:	c6 01       	movw	r24, r12
   1038a:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
   1038e:	89 2b       	or	r24, r25
   10390:	69 f1       	breq	.+90     	; 0x103ec <posix_tests+0x244>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   10392:	a6 14       	cp	r10, r6
   10394:	b7 04       	cpc	r11, r7
   10396:	7c f4       	brge	.+30     	; 0x103b6 <posix_tests+0x20e>
        {
            mode = strtol(argv[ind+1],NULL,8);
   10398:	aa 0c       	add	r10, r10
   1039a:	bb 1c       	adc	r11, r11
   1039c:	f2 01       	movw	r30, r4
   1039e:	ea 0d       	add	r30, r10
   103a0:	fb 1d       	adc	r31, r11
   103a2:	48 e0       	ldi	r20, 0x08	; 8
   103a4:	50 e0       	ldi	r21, 0x00	; 0
   103a6:	60 e0       	ldi	r22, 0x00	; 0
   103a8:	70 e0       	ldi	r23, 0x00	; 0
   103aa:	80 81       	ld	r24, Z
   103ac:	91 81       	ldd	r25, Z+1	; 0x01
   103ae:	0e 94 49 45 	call	0x8a92	; 0x8a92 <strtol>
   103b2:	ab 01       	movw	r20, r22
   103b4:	02 c0       	rjmp	.+4      	; 0x103ba <posix_tests+0x212>
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   103b6:	4f ef       	ldi	r20, 0xFF	; 255
   103b8:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   103ba:	00 0f       	add	r16, r16
   103bc:	11 1f       	adc	r17, r17
   103be:	40 0e       	add	r4, r16
   103c0:	51 1e       	adc	r5, r17
   103c2:	05 2e       	mov	r0, r21
   103c4:	00 0c       	add	r0, r0
   103c6:	66 0b       	sbc	r22, r22
   103c8:	77 0b       	sbc	r23, r23
   103ca:	f2 01       	movw	r30, r4
   103cc:	80 81       	ld	r24, Z
   103ce:	91 81       	ldd	r25, Z+1	; 0x01
   103d0:	0e 94 82 76 	call	0xed04	; 0xed04 <mkdir>
   103d4:	89 2b       	or	r24, r25
   103d6:	e9 f1       	breq	.+122    	; 0x10452 <posix_tests+0x2aa>
        {
            printf("mkdir %s failed\n", argv[ind]);
   103d8:	f2 01       	movw	r30, r4
   103da:	80 81       	ld	r24, Z
   103dc:	91 81       	ldd	r25, Z+1	; 0x01
   103de:	ed b7       	in	r30, 0x3d	; 61
   103e0:	fe b7       	in	r31, 0x3e	; 62
   103e2:	95 83       	std	Z+5, r25	; 0x05
   103e4:	84 83       	std	Z+4, r24	; 0x04
   103e6:	89 e4       	ldi	r24, 0x49	; 73
   103e8:	9d e0       	ldi	r25, 0x0D	; 13
   103ea:	b1 c0       	rjmp	.+354    	; 0x1054e <posix_tests+0x3a6>
            return(0);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"page", (ind + 1), argc))
   103ec:	93 01       	movw	r18, r6
   103ee:	a5 01       	movw	r20, r10
   103f0:	6c ed       	ldi	r22, 0xDC	; 220
   103f2:	7b e0       	ldi	r23, 0x0B	; 11
   103f4:	c6 01       	movw	r24, r12
   103f6:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
   103fa:	89 2b       	or	r24, r25
   103fc:	71 f0       	breq	.+28     	; 0x1041a <posix_tests+0x272>
    {
        setpage(atoi(argv[ind]));
   103fe:	00 0f       	add	r16, r16
   10400:	11 1f       	adc	r17, r17
   10402:	f2 01       	movw	r30, r4
   10404:	e0 0f       	add	r30, r16
   10406:	f1 1f       	adc	r31, r17
   10408:	80 81       	ld	r24, Z
   1040a:	91 81       	ldd	r25, Z+1	; 0x01
   1040c:	0e 94 a7 45 	call	0x8b4e	; 0x8b4e <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   10410:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   10414:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
   10418:	1c c0       	rjmp	.+56     	; 0x10452 <posix_tests+0x2aa>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    else if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   1041a:	93 01       	movw	r18, r6
   1041c:	a8 01       	movw	r20, r16
   1041e:	61 ee       	ldi	r22, 0xE1	; 225
   10420:	7b e0       	ldi	r23, 0x0B	; 11
   10422:	c6 01       	movw	r24, r12
   10424:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
   10428:	7c 01       	movw	r14, r24
   1042a:	89 2b       	or	r24, r25
   1042c:	b1 f0       	breq	.+44     	; 0x1045a <posix_tests+0x2b2>
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   1042e:	6e ef       	ldi	r22, 0xFE	; 254
   10430:	70 e0       	ldi	r23, 0x00	; 0
   10432:	ce 01       	movw	r24, r28
   10434:	08 96       	adiw	r24, 0x08	; 8
   10436:	0e 94 5d 76 	call	0xecba	; 0xecba <getcwd>
   1043a:	ed b7       	in	r30, 0x3d	; 61
   1043c:	fe b7       	in	r31, 0x3e	; 62
   1043e:	95 83       	std	Z+5, r25	; 0x05
   10440:	84 83       	std	Z+4, r24	; 0x04
   10442:	85 e4       	ldi	r24, 0x45	; 69
   10444:	9d e0       	ldi	r25, 0x0D	; 13
   10446:	a0 e0       	ldi	r26, 0x00	; 0
   10448:	81 83       	std	Z+1, r24	; 0x01
   1044a:	92 83       	std	Z+2, r25	; 0x02
   1044c:	a3 83       	std	Z+3, r26	; 0x03
   1044e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(1);
   10452:	ee 24       	eor	r14, r14
   10454:	e3 94       	inc	r14
   10456:	f1 2c       	mov	r15, r1
   10458:	80 c0       	rjmp	.+256    	; 0x1055a <posix_tests+0x3b2>
    }

    else if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   1045a:	93 01       	movw	r18, r6
   1045c:	a4 01       	movw	r20, r8
   1045e:	65 ee       	ldi	r22, 0xE5	; 229
   10460:	7b e0       	ldi	r23, 0x0B	; 11
   10462:	c6 01       	movw	r24, r12
   10464:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
   10468:	89 2b       	or	r24, r25
   1046a:	51 f1       	breq	.+84     	; 0x104c0 <posix_tests+0x318>
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   1046c:	00 0f       	add	r16, r16
   1046e:	11 1f       	adc	r17, r17
   10470:	62 01       	movw	r12, r4
   10472:	c0 0e       	add	r12, r16
   10474:	d1 1e       	adc	r13, r17
   10476:	0e 5f       	subi	r16, 0xFE	; 254
   10478:	1f 4f       	sbci	r17, 0xFF	; 255
   1047a:	40 0e       	add	r4, r16
   1047c:	51 1e       	adc	r5, r17
   1047e:	f2 01       	movw	r30, r4
   10480:	60 81       	ld	r22, Z
   10482:	71 81       	ldd	r23, Z+1	; 0x01
   10484:	f6 01       	movw	r30, r12
   10486:	80 81       	ld	r24, Z
   10488:	91 81       	ldd	r25, Z+1	; 0x01
   1048a:	0e 94 b0 76 	call	0xed60	; 0xed60 <rename>
   1048e:	89 2b       	or	r24, r25
   10490:	01 f3       	breq	.-64     	; 0x10452 <posix_tests+0x2aa>
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   10492:	f2 01       	movw	r30, r4
   10494:	80 81       	ld	r24, Z
   10496:	91 81       	ldd	r25, Z+1	; 0x01
   10498:	ed b7       	in	r30, 0x3d	; 61
   1049a:	fe b7       	in	r31, 0x3e	; 62
   1049c:	97 83       	std	Z+7, r25	; 0x07
   1049e:	86 83       	std	Z+6, r24	; 0x06
   104a0:	f6 01       	movw	r30, r12
   104a2:	80 81       	ld	r24, Z
   104a4:	91 81       	ldd	r25, Z+1	; 0x01
   104a6:	ed b7       	in	r30, 0x3d	; 61
   104a8:	fe b7       	in	r31, 0x3e	; 62
   104aa:	95 83       	std	Z+5, r25	; 0x05
   104ac:	84 83       	std	Z+4, r24	; 0x04
   104ae:	84 e3       	ldi	r24, 0x34	; 52
   104b0:	9d e0       	ldi	r25, 0x0D	; 13
   104b2:	a0 e0       	ldi	r26, 0x00	; 0
   104b4:	81 83       	std	Z+1, r24	; 0x01
   104b6:	92 83       	std	Z+2, r25	; 0x02
   104b8:	a3 83       	std	Z+3, r26	; 0x03
   104ba:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            return(0);
   104be:	4d c0       	rjmp	.+154    	; 0x1055a <posix_tests+0x3b2>
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   104c0:	93 01       	movw	r18, r6
   104c2:	a5 01       	movw	r20, r10
   104c4:	6c ee       	ldi	r22, 0xEC	; 236
   104c6:	7b e0       	ldi	r23, 0x0B	; 11
   104c8:	c6 01       	movw	r24, r12
   104ca:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
   104ce:	7c 01       	movw	r14, r24
   104d0:	89 2b       	or	r24, r25
   104d2:	f9 f0       	breq	.+62     	; 0x10512 <posix_tests+0x36a>
    {
        if ( unlink(argv[ind]) != 0)
   104d4:	78 01       	movw	r14, r16
   104d6:	ee 0c       	add	r14, r14
   104d8:	ff 1c       	adc	r15, r15
   104da:	e4 0c       	add	r14, r4
   104dc:	f5 1c       	adc	r15, r5
   104de:	f7 01       	movw	r30, r14
   104e0:	80 81       	ld	r24, Z
   104e2:	91 81       	ldd	r25, Z+1	; 0x01
   104e4:	0e 94 cf 76 	call	0xed9e	; 0xed9e <unlink>
   104e8:	89 2b       	or	r24, r25
   104ea:	09 f4       	brne	.+2      	; 0x104ee <posix_tests+0x346>
   104ec:	b2 cf       	rjmp	.-156    	; 0x10452 <posix_tests+0x2aa>
        {
            printf("rm %s failed\n", argv[ind]);
   104ee:	f7 01       	movw	r30, r14
   104f0:	80 81       	ld	r24, Z
   104f2:	91 81       	ldd	r25, Z+1	; 0x01
   104f4:	ed b7       	in	r30, 0x3d	; 61
   104f6:	fe b7       	in	r31, 0x3e	; 62
   104f8:	95 83       	std	Z+5, r25	; 0x05
   104fa:	84 83       	std	Z+4, r24	; 0x04
   104fc:	86 e2       	ldi	r24, 0x26	; 38
   104fe:	9d e0       	ldi	r25, 0x0D	; 13
   10500:	a0 e0       	ldi	r26, 0x00	; 0
   10502:	81 83       	std	Z+1, r24	; 0x01
   10504:	92 83       	std	Z+2, r25	; 0x02
   10506:	a3 83       	std	Z+3, r26	; 0x03
   10508:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            return(0);
   1050c:	e1 2c       	mov	r14, r1
   1050e:	f1 2c       	mov	r15, r1
   10510:	24 c0       	rjmp	.+72     	; 0x1055a <posix_tests+0x3b2>
        dump_stat(&p);
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   10512:	93 01       	movw	r18, r6
   10514:	a5 01       	movw	r20, r10
   10516:	6f ee       	ldi	r22, 0xEF	; 239
   10518:	7b e0       	ldi	r23, 0x0B	; 11
   1051a:	c6 01       	movw	r24, r12
   1051c:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
   10520:	89 2b       	or	r24, r25
   10522:	a1 f3       	breq	.-24     	; 0x1050c <posix_tests+0x364>
    {
        if ( rmdir(argv[ind]) != 0)
   10524:	00 0f       	add	r16, r16
   10526:	11 1f       	adc	r17, r17
   10528:	40 0e       	add	r4, r16
   1052a:	51 1e       	adc	r5, r17
   1052c:	f2 01       	movw	r30, r4
   1052e:	80 81       	ld	r24, Z
   10530:	91 81       	ldd	r25, Z+1	; 0x01
   10532:	0e 94 ee 76 	call	0xeddc	; 0xeddc <rmdir>
   10536:	89 2b       	or	r24, r25
   10538:	09 f4       	brne	.+2      	; 0x1053c <posix_tests+0x394>
   1053a:	8b cf       	rjmp	.-234    	; 0x10452 <posix_tests+0x2aa>
        {
            printf("rmdir %s failed\n", argv[ind]);
   1053c:	f2 01       	movw	r30, r4
   1053e:	80 81       	ld	r24, Z
   10540:	91 81       	ldd	r25, Z+1	; 0x01
   10542:	ed b7       	in	r30, 0x3d	; 61
   10544:	fe b7       	in	r31, 0x3e	; 62
   10546:	95 83       	std	Z+5, r25	; 0x05
   10548:	84 83       	std	Z+4, r24	; 0x04
   1054a:	85 e1       	ldi	r24, 0x15	; 21
   1054c:	9d e0       	ldi	r25, 0x0D	; 13
   1054e:	a0 e0       	ldi	r26, 0x00	; 0
   10550:	81 83       	std	Z+1, r24	; 0x01
   10552:	92 83       	std	Z+2, r25	; 0x02
   10554:	a3 83       	std	Z+3, r26	; 0x03
   10556:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(1);
    }
#endif

    return(0);
}
   1055a:	c7 01       	movw	r24, r14
   1055c:	c9 5f       	subi	r28, 0xF9	; 249
   1055e:	de 4f       	sbci	r29, 0xFE	; 254
   10560:	e0 e1       	ldi	r30, 0x10	; 16
   10562:	0c 94 7a e3 	jmp	0x1c6f4	; 0x1c6f4 <__epilogue_restores__+0x4>

00010566 <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   10566:	00 d0       	rcall	.+0      	; 0x10568 <gpib_timer_init+0x2>
   10568:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   1056a:	61 e0       	ldi	r22, 0x01	; 1
   1056c:	70 e0       	ldi	r23, 0x00	; 0
   1056e:	8f e6       	ldi	r24, 0x6F	; 111
   10570:	94 e8       	ldi	r25, 0x84	; 132
   10572:	0e 94 bc 32 	call	0x6578	; 0x6578 <set_timers>
   10576:	01 96       	adiw	r24, 0x01	; 1
   10578:	51 f4       	brne	.+20     	; 0x1058e <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   1057a:	8f ea       	ldi	r24, 0xAF	; 175
   1057c:	9e e0       	ldi	r25, 0x0E	; 14
   1057e:	a0 e0       	ldi	r26, 0x00	; 0
   10580:	ed b7       	in	r30, 0x3d	; 61
   10582:	fe b7       	in	r31, 0x3e	; 62
   10584:	81 83       	std	Z+1, r24	; 0x01
   10586:	92 83       	std	Z+2, r25	; 0x02
   10588:	a3 83       	std	Z+3, r26	; 0x03
   1058a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    gpib_timer_reset();
   1058e:	95 d1       	rcall	.+810    	; 0x108ba <gpib_timer_reset>
}
   10590:	0f 90       	pop	r0
   10592:	0f 90       	pop	r0
   10594:	0f 90       	pop	r0
   10596:	08 95       	ret

00010598 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   10598:	28 2f       	mov	r18, r24
   1059a:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   1059c:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   1059e:	88 0f       	add	r24, r24
        if(mask & 1)
   105a0:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   105a2:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   105a4:	26 95       	lsr	r18
   105a6:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   105a8:	d1 f7       	brne	.-12     	; 0x1059e <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   105aa:	08 95       	ret

000105ac <ppr_set>:
void ppr_set(uint8_t mask)
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    _ppr_reg = reverse_8bits(mask);
   105ac:	f5 df       	rcall	.-22     	; 0x10598 <reverse_8bits>
   105ae:	80 93 61 19 	sts	0x1961, r24	; 0x801961 <_ppr_reg>
#else
    _ppr_reg = mask;
#endif
    SPI0_TXRX_Byte(_ppr_reg);
   105b2:	0e 94 16 29 	call	0x522c	; 0x522c <SPI0_TXRX_Byte>

    GPIB_IO_HI(PPE);
   105b6:	2a 9a       	sbi	0x05, 2	; 5
   105b8:	22 9a       	sbi	0x04, 2	; 4
    GPIB_IO_LOW(PPE);
   105ba:	2a 98       	cbi	0x05, 2	; 5
   105bc:	22 9a       	sbi	0x04, 2	; 4
   105be:	08 95       	ret

000105c0 <ppr_reg>:
uint8_t ppr_reg()
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    return(reverse_8bits(_ppr_reg));
   105c0:	80 91 61 19 	lds	r24, 0x1961	; 0x801961 <_ppr_reg>
   105c4:	e9 cf       	rjmp	.-46     	; 0x10598 <reverse_8bits>
#else
    return(_ppr_reg);
#endif
}
   105c6:	08 95       	ret

000105c8 <ppr_init>:
///
/// - Hides the register access implimentation from the upper level.
/// @return  void

void ppr_init()
{
   105c8:	00 d0       	rcall	.+0      	; 0x105ca <ppr_init+0x2>
   105ca:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_PPR)
   105cc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   105d0:	81 ff       	sbrs	r24, 1
   105d2:	0a c0       	rjmp	.+20     	; 0x105e8 <ppr_init+0x20>
        printf("[PPR DISABLE ALL]\n");
   105d4:	8c e9       	ldi	r24, 0x9C	; 156
   105d6:	9e e0       	ldi	r25, 0x0E	; 14
   105d8:	a0 e0       	ldi	r26, 0x00	; 0
   105da:	ed b7       	in	r30, 0x3d	; 61
   105dc:	fe b7       	in	r31, 0x3e	; 62
   105de:	81 83       	std	Z+1, r24	; 0x01
   105e0:	92 83       	std	Z+2, r25	; 0x02
   105e2:	a3 83       	std	Z+3, r26	; 0x03
   105e4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
    ppr_set(0);
   105e8:	80 e0       	ldi	r24, 0x00	; 0
   105ea:	e0 df       	rcall	.-64     	; 0x105ac <ppr_set>
}
   105ec:	0f 90       	pop	r0
   105ee:	0f 90       	pop	r0
   105f0:	0f 90       	pop	r0
   105f2:	08 95       	ret

000105f4 <ppr_bit_set>:
/// @return  void

void ppr_bit_set(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_SET(_ppr_reg,bit);
   105f4:	21 e0       	ldi	r18, 0x01	; 1
   105f6:	30 e0       	ldi	r19, 0x00	; 0
   105f8:	01 c0       	rjmp	.+2      	; 0x105fc <ppr_bit_set+0x8>
   105fa:	22 0f       	add	r18, r18
   105fc:	8a 95       	dec	r24
   105fe:	ea f7       	brpl	.-6      	; 0x105fa <ppr_bit_set+0x6>
   10600:	80 91 61 19 	lds	r24, 0x1961	; 0x801961 <_ppr_reg>
   10604:	82 2b       	or	r24, r18
   10606:	80 93 61 19 	sts	0x1961, r24	; 0x801961 <_ppr_reg>
    ppr_set(_ppr_reg);
   1060a:	d0 cf       	rjmp	.-96     	; 0x105ac <ppr_set>
   1060c:	08 95       	ret

0001060e <ppr_bit_clr>:
/// @return  void

void ppr_bit_clr(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_CLR(_ppr_reg,bit);
   1060e:	21 e0       	ldi	r18, 0x01	; 1
   10610:	30 e0       	ldi	r19, 0x00	; 0
   10612:	01 c0       	rjmp	.+2      	; 0x10616 <ppr_bit_clr+0x8>
   10614:	22 0f       	add	r18, r18
   10616:	8a 95       	dec	r24
   10618:	ea f7       	brpl	.-6      	; 0x10614 <ppr_bit_clr+0x6>
   1061a:	20 95       	com	r18
   1061c:	80 91 61 19 	lds	r24, 0x1961	; 0x801961 <_ppr_reg>
   10620:	82 23       	and	r24, r18
   10622:	80 93 61 19 	sts	0x1961, r24	; 0x801961 <_ppr_reg>
    ppr_set(_ppr_reg);
   10626:	c2 cf       	rjmp	.-124    	; 0x105ac <ppr_set>
   10628:	08 95       	ret

0001062a <dbf_open>:
/// @see ff.h
///
/// @return  FRESULT f_open(fp,path, mode);

FRESULT dbf_open (FIL* fp, const TCHAR* path, BYTE mode)
{
   1062a:	0f 93       	push	r16
   1062c:	1f 93       	push	r17
   1062e:	cf 93       	push	r28
   10630:	df 93       	push	r29
   10632:	00 d0       	rcall	.+0      	; 0x10634 <dbf_open+0xa>
   10634:	00 d0       	rcall	.+0      	; 0x10636 <dbf_open+0xc>
   10636:	1f 92       	push	r1
   10638:	8b 01       	movw	r16, r22
    int rc;
    rc = f_open(fp,path, mode);
   1063a:	0e 94 c6 58 	call	0xb18c	; 0xb18c <f_open>
   1063e:	ec 01       	movw	r28, r24
    if(rc)
   10640:	89 2b       	or	r24, r25
   10642:	79 f0       	breq	.+30     	; 0x10662 <dbf_open+0x38>
    {
        printf("Open error:[%s] ", path);
   10644:	ed b7       	in	r30, 0x3d	; 61
   10646:	fe b7       	in	r31, 0x3e	; 62
   10648:	15 83       	std	Z+5, r17	; 0x05
   1064a:	04 83       	std	Z+4, r16	; 0x04
   1064c:	8b e8       	ldi	r24, 0x8B	; 139
   1064e:	9e e0       	ldi	r25, 0x0E	; 14
   10650:	a0 e0       	ldi	r26, 0x00	; 0
   10652:	81 83       	std	Z+1, r24	; 0x01
   10654:	92 83       	std	Z+2, r25	; 0x02
   10656:	a3 83       	std	Z+3, r26	; 0x03
   10658:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        put_rc(rc);
   1065c:	ce 01       	movw	r24, r28
   1065e:	0e 94 a0 6f 	call	0xdf40	; 0xdf40 <put_rc>
        return (rc);
    }
    return(0);
}
   10662:	ce 01       	movw	r24, r28
   10664:	cd b7       	in	r28, 0x3d	; 61
   10666:	de b7       	in	r29, 0x3e	; 62
   10668:	25 96       	adiw	r28, 0x05	; 5
   1066a:	e4 e0       	ldi	r30, 0x04	; 4
   1066c:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

00010670 <dbf_read>:
/// @see ff.h
///
/// @return  FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br)

FRESULT dbf_read (FIL* fp, void* buff, UINT btr, UINT* br)
{
   10670:	cf 93       	push	r28
   10672:	df 93       	push	r29
   10674:	00 d0       	rcall	.+0      	; 0x10676 <dbf_read+0x6>
   10676:	1f 92       	push	r1
    int rc;
    rc = f_read(fp, buff, btr, br);
   10678:	0e 94 7e 5a 	call	0xb4fc	; 0xb4fc <f_read>
   1067c:	ec 01       	movw	r28, r24
    if(rc)
   1067e:	89 2b       	or	r24, r25
   10680:	69 f0       	breq	.+26     	; 0x1069c <dbf_read+0x2c>
    {
        printf("Read error: ");
   10682:	8e e7       	ldi	r24, 0x7E	; 126
   10684:	9e e0       	ldi	r25, 0x0E	; 14
   10686:	a0 e0       	ldi	r26, 0x00	; 0
   10688:	ed b7       	in	r30, 0x3d	; 61
   1068a:	fe b7       	in	r31, 0x3e	; 62
   1068c:	81 83       	std	Z+1, r24	; 0x01
   1068e:	92 83       	std	Z+2, r25	; 0x02
   10690:	a3 83       	std	Z+3, r26	; 0x03
   10692:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        put_rc(rc);
   10696:	ce 01       	movw	r24, r28
   10698:	0e 94 a0 6f 	call	0xdf40	; 0xdf40 <put_rc>
        return (rc);
    }
    return(0);
}
   1069c:	ce 01       	movw	r24, r28
   1069e:	cd b7       	in	r28, 0x3d	; 61
   106a0:	de b7       	in	r29, 0x3e	; 62
   106a2:	23 96       	adiw	r28, 0x03	; 3
   106a4:	e2 e0       	ldi	r30, 0x02	; 2
   106a6:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

000106aa <dbf_write>:
///
/// @see ff.h
/// @return  FRESULT f_write (FIL* fp, void* buff, UINT btw, UINT* bw)

FRESULT dbf_write (FIL* fp, const void* buff, UINT btw, UINT* bw)
{
   106aa:	cf 93       	push	r28
   106ac:	df 93       	push	r29
   106ae:	00 d0       	rcall	.+0      	; 0x106b0 <dbf_write+0x6>
   106b0:	1f 92       	push	r1
    int rc;
    rc = f_write(fp, buff, btw, bw);
   106b2:	0e 94 c9 5b 	call	0xb792	; 0xb792 <f_write>
   106b6:	ec 01       	movw	r28, r24
    if(rc)
   106b8:	89 2b       	or	r24, r25
   106ba:	69 f0       	breq	.+26     	; 0x106d6 <dbf_write+0x2c>
    {
        printf("Write error: ");
   106bc:	80 e7       	ldi	r24, 0x70	; 112
   106be:	9e e0       	ldi	r25, 0x0E	; 14
   106c0:	a0 e0       	ldi	r26, 0x00	; 0
   106c2:	ed b7       	in	r30, 0x3d	; 61
   106c4:	fe b7       	in	r31, 0x3e	; 62
   106c6:	81 83       	std	Z+1, r24	; 0x01
   106c8:	92 83       	std	Z+2, r25	; 0x02
   106ca:	a3 83       	std	Z+3, r26	; 0x03
   106cc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        put_rc(rc);
   106d0:	ce 01       	movw	r24, r28
   106d2:	0e 94 a0 6f 	call	0xdf40	; 0xdf40 <put_rc>
        return (rc);
    }
    return(0);
}
   106d6:	ce 01       	movw	r24, r28
   106d8:	cd b7       	in	r28, 0x3d	; 61
   106da:	de b7       	in	r29, 0x3e	; 62
   106dc:	23 96       	adiw	r28, 0x03	; 3
   106de:	e2 e0       	ldi	r30, 0x02	; 2
   106e0:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

000106e4 <dbf_lseek>:
///
/// @see ff.h.
/// @return  FRESULT

FRESULT dbf_lseek (FIL* fp, DWORD ofs)
{
   106e4:	cf 93       	push	r28
   106e6:	df 93       	push	r29
   106e8:	00 d0       	rcall	.+0      	; 0x106ea <dbf_lseek+0x6>
   106ea:	1f 92       	push	r1
    int rc;
    rc = f_lseek(fp, ofs);
   106ec:	0e 94 8a 5f 	call	0xbf14	; 0xbf14 <f_lseek>
   106f0:	ec 01       	movw	r28, r24
    if(rc)
   106f2:	89 2b       	or	r24, r25
   106f4:	69 f0       	breq	.+26     	; 0x10710 <dbf_lseek+0x2c>
    {
        printf("Seek error: ");
   106f6:	83 e6       	ldi	r24, 0x63	; 99
   106f8:	9e e0       	ldi	r25, 0x0E	; 14
   106fa:	a0 e0       	ldi	r26, 0x00	; 0
   106fc:	ed b7       	in	r30, 0x3d	; 61
   106fe:	fe b7       	in	r31, 0x3e	; 62
   10700:	81 83       	std	Z+1, r24	; 0x01
   10702:	92 83       	std	Z+2, r25	; 0x02
   10704:	a3 83       	std	Z+3, r26	; 0x03
   10706:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        put_rc(rc);
   1070a:	ce 01       	movw	r24, r28
   1070c:	0e 94 a0 6f 	call	0xdf40	; 0xdf40 <put_rc>
        return (rc);
    }
    return(0);
}
   10710:	ce 01       	movw	r24, r28
   10712:	cd b7       	in	r28, 0x3d	; 61
   10714:	de b7       	in	r29, 0x3e	; 62
   10716:	23 96       	adiw	r28, 0x03	; 3
   10718:	e2 e0       	ldi	r30, 0x02	; 2
   1071a:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

0001071e <dbf_close>:
///
/// @see ff.h.
/// @return  FRESULT dbf_close (FIL* fp)

FRESULT dbf_close (FIL* fp)
{
   1071e:	cf 93       	push	r28
   10720:	df 93       	push	r29
   10722:	00 d0       	rcall	.+0      	; 0x10724 <dbf_close+0x6>
   10724:	1f 92       	push	r1
    int rc;
    rc = f_close(fp);
   10726:	0e 94 e0 5d 	call	0xbbc0	; 0xbbc0 <f_close>
   1072a:	ec 01       	movw	r28, r24
    if(rc != FR_OK)
   1072c:	89 2b       	or	r24, r25
   1072e:	69 f0       	breq	.+26     	; 0x1074a <dbf_close+0x2c>
    {
        printf("Close error: ");
   10730:	85 e5       	ldi	r24, 0x55	; 85
   10732:	9e e0       	ldi	r25, 0x0E	; 14
   10734:	a0 e0       	ldi	r26, 0x00	; 0
   10736:	ed b7       	in	r30, 0x3d	; 61
   10738:	fe b7       	in	r31, 0x3e	; 62
   1073a:	81 83       	std	Z+1, r24	; 0x01
   1073c:	92 83       	std	Z+2, r25	; 0x02
   1073e:	a3 83       	std	Z+3, r26	; 0x03
   10740:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        put_rc(rc);
   10744:	ce 01       	movw	r24, r28
   10746:	0e 94 a0 6f 	call	0xdf40	; 0xdf40 <put_rc>
        return (rc);
    }
    return(0);
}
   1074a:	ce 01       	movw	r24, r28
   1074c:	cd b7       	in	r28, 0x3d	; 61
   1074e:	de b7       	in	r29, 0x3e	; 62
   10750:	23 96       	adiw	r28, 0x03	; 3
   10752:	e2 e0       	ldi	r30, 0x02	; 2
   10754:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00010758 <dbf_open_read>:
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT

int dbf_open_read(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   10758:	a6 e2       	ldi	r26, 0x26	; 38
   1075a:	b2 e0       	ldi	r27, 0x02	; 2
   1075c:	e2 eb       	ldi	r30, 0xB2	; 178
   1075e:	f3 e8       	ldi	r31, 0x83	; 131
   10760:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__prologue_saves__+0xc>
   10764:	4a 01       	movw	r8, r20
   10766:	5b 01       	movw	r10, r22
   10768:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   1076a:	cb 5d       	subi	r28, 0xDB	; 219
   1076c:	dd 4f       	sbci	r29, 0xFD	; 253
   1076e:	19 82       	std	Y+1, r1	; 0x01
   10770:	18 82       	st	Y, r1
   10772:	c5 52       	subi	r28, 0x25	; 37
   10774:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   10776:	43 e0       	ldi	r20, 0x03	; 3
   10778:	bc 01       	movw	r22, r24
   1077a:	ce 01       	movw	r24, r28
   1077c:	01 96       	adiw	r24, 0x01	; 1
   1077e:	55 df       	rcall	.-342    	; 0x1062a <dbf_open>
    if( rc != FR_OK)
   10780:	89 2b       	or	r24, r25
   10782:	19 f0       	breq	.+6      	; 0x1078a <dbf_open_read+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_READ;
        *errors = flags;
   10784:	81 e1       	ldi	r24, 0x11	; 17
   10786:	90 e0       	ldi	r25, 0x00	; 0
   10788:	2f c0       	rjmp	.+94     	; 0x107e8 <dbf_open_read+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   1078a:	b5 01       	movw	r22, r10
   1078c:	a4 01       	movw	r20, r8
   1078e:	ce 01       	movw	r24, r28
   10790:	01 96       	adiw	r24, 0x01	; 1
   10792:	a8 df       	rcall	.-176    	; 0x106e4 <dbf_lseek>
    if( rc != FR_OK)
   10794:	89 2b       	or	r24, r25
   10796:	59 f0       	breq	.+22     	; 0x107ae <dbf_open_read+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_READ;
        *errors = flags;
   10798:	85 e0       	ldi	r24, 0x05	; 5
   1079a:	90 e0       	ldi	r25, 0x00	; 0
   1079c:	f7 01       	movw	r30, r14
   1079e:	91 83       	std	Z+1, r25	; 0x01
   107a0:	80 83       	st	Z, r24
        dbf_close(&fp);
   107a2:	ce 01       	movw	r24, r28
   107a4:	01 96       	adiw	r24, 0x01	; 1
   107a6:	bb df       	rcall	.-138    	; 0x1071e <dbf_close>
        return( -1 );
   107a8:	8f ef       	ldi	r24, 0xFF	; 255
   107aa:	9f ef       	ldi	r25, 0xFF	; 255
   107ac:	27 c0       	rjmp	.+78     	; 0x107fc <dbf_open_read+0xa4>
    }

    rc = dbf_read(&fp, buff,size,&bytes);
   107ae:	9e 01       	movw	r18, r28
   107b0:	2b 5d       	subi	r18, 0xDB	; 219
   107b2:	3d 4f       	sbci	r19, 0xFD	; 253
   107b4:	a8 01       	movw	r20, r16
   107b6:	b6 01       	movw	r22, r12
   107b8:	ce 01       	movw	r24, r28
   107ba:	01 96       	adiw	r24, 0x01	; 1
   107bc:	59 df       	rcall	.-334    	; 0x10670 <dbf_read>
    if( rc != FR_OK || (UINT) size != bytes)
   107be:	89 2b       	or	r24, r25
   107c0:	49 f4       	brne	.+18     	; 0x107d4 <dbf_open_read+0x7c>
   107c2:	cb 5d       	subi	r28, 0xDB	; 219
   107c4:	dd 4f       	sbci	r29, 0xFD	; 253
   107c6:	88 81       	ld	r24, Y
   107c8:	99 81       	ldd	r25, Y+1	; 0x01
   107ca:	c5 52       	subi	r28, 0x25	; 37
   107cc:	d2 40       	sbci	r29, 0x02	; 2
   107ce:	08 17       	cp	r16, r24
   107d0:	19 07       	cpc	r17, r25
   107d2:	19 f0       	breq	.+6      	; 0x107da <dbf_open_read+0x82>
    {
        flags |= ERR_READ;
        *errors = flags;
   107d4:	81 e0       	ldi	r24, 0x01	; 1
   107d6:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   107d8:	e1 cf       	rjmp	.-62     	; 0x1079c <dbf_open_read+0x44>
   107da:	ce 01       	movw	r24, r28
   107dc:	01 96       	adiw	r24, 0x01	; 1
   107de:	9f df       	rcall	.-194    	; 0x1071e <dbf_close>
    if( rc != FR_OK)
   107e0:	89 2b       	or	r24, r25
   107e2:	31 f0       	breq	.+12     	; 0x107f0 <dbf_open_read+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   107e4:	80 e1       	ldi	r24, 0x10	; 16
   107e6:	90 e0       	ldi	r25, 0x00	; 0
   107e8:	f7 01       	movw	r30, r14
   107ea:	91 83       	std	Z+1, r25	; 0x01
   107ec:	80 83       	st	Z, r24
   107ee:	dc cf       	rjmp	.-72     	; 0x107a8 <dbf_open_read+0x50>
#if 0
// test timeout - this works ok
	delayms(500); 
#endif

    return(bytes);
   107f0:	cb 5d       	subi	r28, 0xDB	; 219
   107f2:	dd 4f       	sbci	r29, 0xFD	; 253
   107f4:	88 81       	ld	r24, Y
   107f6:	99 81       	ldd	r25, Y+1	; 0x01
   107f8:	c5 52       	subi	r28, 0x25	; 37
   107fa:	d2 40       	sbci	r29, 0x02	; 2
}
   107fc:	ca 5d       	subi	r28, 0xDA	; 218
   107fe:	dd 4f       	sbci	r29, 0xFD	; 253
   10800:	ec e0       	ldi	r30, 0x0C	; 12
   10802:	0c 94 7e e3 	jmp	0x1c6fc	; 0x1c6fc <__epilogue_restores__+0xc>

00010806 <dbf_open_write>:
/// @return  bytes actually written.
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT
int dbf_open_write(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   10806:	a6 e2       	ldi	r26, 0x26	; 38
   10808:	b2 e0       	ldi	r27, 0x02	; 2
   1080a:	e9 e0       	ldi	r30, 0x09	; 9
   1080c:	f4 e8       	ldi	r31, 0x84	; 132
   1080e:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__prologue_saves__+0xc>
   10812:	4a 01       	movw	r8, r20
   10814:	5b 01       	movw	r10, r22
   10816:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   10818:	cb 5d       	subi	r28, 0xDB	; 219
   1081a:	dd 4f       	sbci	r29, 0xFD	; 253
   1081c:	19 82       	std	Y+1, r1	; 0x01
   1081e:	18 82       	st	Y, r1
   10820:	c5 52       	subi	r28, 0x25	; 37
   10822:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   10824:	43 e0       	ldi	r20, 0x03	; 3
   10826:	bc 01       	movw	r22, r24
   10828:	ce 01       	movw	r24, r28
   1082a:	01 96       	adiw	r24, 0x01	; 1
   1082c:	fe de       	rcall	.-516    	; 0x1062a <dbf_open>
    if( rc != FR_OK)
   1082e:	89 2b       	or	r24, r25
   10830:	19 f0       	breq	.+6      	; 0x10838 <dbf_open_write+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_WRITE;
        *errors = flags;
   10832:	82 e1       	ldi	r24, 0x12	; 18
   10834:	90 e0       	ldi	r25, 0x00	; 0
   10836:	2f c0       	rjmp	.+94     	; 0x10896 <dbf_open_write+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   10838:	b5 01       	movw	r22, r10
   1083a:	a4 01       	movw	r20, r8
   1083c:	ce 01       	movw	r24, r28
   1083e:	01 96       	adiw	r24, 0x01	; 1
   10840:	51 df       	rcall	.-350    	; 0x106e4 <dbf_lseek>
    if( rc != FR_OK)
   10842:	89 2b       	or	r24, r25
   10844:	59 f0       	breq	.+22     	; 0x1085c <dbf_open_write+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_WRITE;
        *errors = flags;
   10846:	86 e0       	ldi	r24, 0x06	; 6
   10848:	90 e0       	ldi	r25, 0x00	; 0
   1084a:	f7 01       	movw	r30, r14
   1084c:	91 83       	std	Z+1, r25	; 0x01
   1084e:	80 83       	st	Z, r24
        dbf_close(&fp);
   10850:	ce 01       	movw	r24, r28
   10852:	01 96       	adiw	r24, 0x01	; 1
   10854:	64 df       	rcall	.-312    	; 0x1071e <dbf_close>
        return( -1 );
   10856:	8f ef       	ldi	r24, 0xFF	; 255
   10858:	9f ef       	ldi	r25, 0xFF	; 255
   1085a:	27 c0       	rjmp	.+78     	; 0x108aa <dbf_open_write+0xa4>
    }

    rc = dbf_write(&fp, buff,size,&bytes);
   1085c:	9e 01       	movw	r18, r28
   1085e:	2b 5d       	subi	r18, 0xDB	; 219
   10860:	3d 4f       	sbci	r19, 0xFD	; 253
   10862:	a8 01       	movw	r20, r16
   10864:	b6 01       	movw	r22, r12
   10866:	ce 01       	movw	r24, r28
   10868:	01 96       	adiw	r24, 0x01	; 1
   1086a:	1f df       	rcall	.-450    	; 0x106aa <dbf_write>
    if( rc != FR_OK || (UINT) size != bytes)
   1086c:	89 2b       	or	r24, r25
   1086e:	49 f4       	brne	.+18     	; 0x10882 <dbf_open_write+0x7c>
   10870:	cb 5d       	subi	r28, 0xDB	; 219
   10872:	dd 4f       	sbci	r29, 0xFD	; 253
   10874:	88 81       	ld	r24, Y
   10876:	99 81       	ldd	r25, Y+1	; 0x01
   10878:	c5 52       	subi	r28, 0x25	; 37
   1087a:	d2 40       	sbci	r29, 0x02	; 2
   1087c:	08 17       	cp	r16, r24
   1087e:	19 07       	cpc	r17, r25
   10880:	19 f0       	breq	.+6      	; 0x10888 <dbf_open_write+0x82>
    {
        flags |= ERR_WRITE;
        *errors = flags;
   10882:	82 e0       	ldi	r24, 0x02	; 2
   10884:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10886:	e1 cf       	rjmp	.-62     	; 0x1084a <dbf_open_write+0x44>
   10888:	ce 01       	movw	r24, r28
   1088a:	01 96       	adiw	r24, 0x01	; 1
   1088c:	48 df       	rcall	.-368    	; 0x1071e <dbf_close>
    if( rc != FR_OK)
   1088e:	89 2b       	or	r24, r25
   10890:	31 f0       	breq	.+12     	; 0x1089e <dbf_open_write+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10892:	80 e1       	ldi	r24, 0x10	; 16
   10894:	90 e0       	ldi	r25, 0x00	; 0
   10896:	f7 01       	movw	r30, r14
   10898:	91 83       	std	Z+1, r25	; 0x01
   1089a:	80 83       	st	Z, r24
   1089c:	dc cf       	rjmp	.-72     	; 0x10856 <dbf_open_write+0x50>
#if 0
// test timeout - this causes timeout
	delayms(200); 
#endif

    return(bytes);
   1089e:	cb 5d       	subi	r28, 0xDB	; 219
   108a0:	dd 4f       	sbci	r29, 0xFD	; 253
   108a2:	88 81       	ld	r24, Y
   108a4:	99 81       	ldd	r25, Y+1	; 0x01
   108a6:	c5 52       	subi	r28, 0x25	; 37
   108a8:	d2 40       	sbci	r29, 0x02	; 2
}
   108aa:	ca 5d       	subi	r28, 0xDA	; 218
   108ac:	dd 4f       	sbci	r29, 0xFD	; 253
   108ae:	ec e0       	ldi	r30, 0x0C	; 12
   108b0:	0c 94 7e e3 	jmp	0x1c6fc	; 0x1c6fc <__epilogue_restores__+0xc>

000108b4 <gpib_timer_elapsed_begin>:
            gpib_timer_elapsed_end("PP released");
#endif
        return(1);
    }
    return(0);
}
   108b4:	0c 94 7c 33 	jmp	0x66f8	; 0x66f8 <clock_elapsed_begin>
   108b8:	08 95       	ret

000108ba <gpib_timer_reset>:
   108ba:	f8 94       	cli
   108bc:	e2 ee       	ldi	r30, 0xE2	; 226
   108be:	fc e1       	ldi	r31, 0x1C	; 28
   108c0:	10 82       	st	Z, r1
   108c2:	11 82       	std	Z+1, r1	; 0x01
   108c4:	12 82       	std	Z+2, r1	; 0x02
   108c6:	13 82       	std	Z+3, r1	; 0x03
   108c8:	14 82       	std	Z+4, r1	; 0x04
   108ca:	15 82       	std	Z+5, r1	; 0x05
   108cc:	16 82       	std	Z+6, r1	; 0x06
   108ce:	17 82       	std	Z+7, r1	; 0x07
   108d0:	81 e0       	ldi	r24, 0x01	; 1
   108d2:	80 87       	std	Z+8, r24	; 0x08
   108d4:	78 94       	sei
   108d6:	08 95       	ret

000108d8 <gpib_timer_elapsed_end>:
   108d8:	0c 94 82 33 	jmp	0x6704	; 0x6704 <clock_elapsed_end>
   108dc:	08 95       	ret

000108de <gpib_timer_task>:
   108de:	f8 94       	cli
   108e0:	80 91 e6 1c 	lds	r24, 0x1CE6	; 0x801ce6 <gpib_timer+0x4>
   108e4:	90 91 e7 1c 	lds	r25, 0x1CE7	; 0x801ce7 <gpib_timer+0x5>
   108e8:	a0 91 e8 1c 	lds	r26, 0x1CE8	; 0x801ce8 <gpib_timer+0x6>
   108ec:	b0 91 e9 1c 	lds	r27, 0x1CE9	; 0x801ce9 <gpib_timer+0x7>
   108f0:	89 2b       	or	r24, r25
   108f2:	8a 2b       	or	r24, r26
   108f4:	8b 2b       	or	r24, r27
   108f6:	a1 f0       	breq	.+40     	; 0x10920 <gpib_timer_task+0x42>
   108f8:	80 91 e6 1c 	lds	r24, 0x1CE6	; 0x801ce6 <gpib_timer+0x4>
   108fc:	90 91 e7 1c 	lds	r25, 0x1CE7	; 0x801ce7 <gpib_timer+0x5>
   10900:	a0 91 e8 1c 	lds	r26, 0x1CE8	; 0x801ce8 <gpib_timer+0x6>
   10904:	b0 91 e9 1c 	lds	r27, 0x1CE9	; 0x801ce9 <gpib_timer+0x7>
   10908:	01 97       	sbiw	r24, 0x01	; 1
   1090a:	a1 09       	sbc	r26, r1
   1090c:	b1 09       	sbc	r27, r1
   1090e:	80 93 e6 1c 	sts	0x1CE6, r24	; 0x801ce6 <gpib_timer+0x4>
   10912:	90 93 e7 1c 	sts	0x1CE7, r25	; 0x801ce7 <gpib_timer+0x5>
   10916:	a0 93 e8 1c 	sts	0x1CE8, r26	; 0x801ce8 <gpib_timer+0x6>
   1091a:	b0 93 e9 1c 	sts	0x1CE9, r27	; 0x801ce9 <gpib_timer+0x7>
   1091e:	03 c0       	rjmp	.+6      	; 0x10926 <gpib_timer_task+0x48>
   10920:	81 e0       	ldi	r24, 0x01	; 1
   10922:	80 93 ea 1c 	sts	0x1CEA, r24	; 0x801cea <gpib_timer+0x8>
   10926:	78 94       	sei
   10928:	08 95       	ret

0001092a <gpib_timeout_set>:
   1092a:	f8 94       	cli
   1092c:	e2 ee       	ldi	r30, 0xE2	; 226
   1092e:	fc e1       	ldi	r31, 0x1C	; 28
   10930:	64 83       	std	Z+4, r22	; 0x04
   10932:	75 83       	std	Z+5, r23	; 0x05
   10934:	86 83       	std	Z+6, r24	; 0x06
   10936:	97 83       	std	Z+7, r25	; 0x07
   10938:	10 86       	std	Z+8, r1	; 0x08
   1093a:	78 94       	sei
   1093c:	08 95       	ret

0001093e <gpib_bus_init>:
   1093e:	00 d0       	rcall	.+0      	; 0x10940 <gpib_bus_init+0x2>
   10940:	1f 92       	push	r1
   10942:	8f b7       	in	r24, 0x3f	; 63
   10944:	f8 94       	cli
   10946:	10 92 62 19 	sts	0x1962, r1	; 0x801962 <gpib_unread_f>
   1094a:	11 b8       	out	0x01, r1	; 1
   1094c:	9f ef       	ldi	r25, 0xFF	; 255
   1094e:	92 b9       	out	0x02, r25	; 2
   10950:	21 98       	cbi	0x04, 1	; 4
   10952:	29 9a       	sbi	0x05, 1	; 5
   10954:	52 98       	cbi	0x0a, 2	; 10
   10956:	5a 9a       	sbi	0x0b, 2	; 11
   10958:	53 98       	cbi	0x0a, 3	; 10
   1095a:	5b 9a       	sbi	0x0b, 3	; 11
   1095c:	56 98       	cbi	0x0a, 6	; 10
   1095e:	5e 9a       	sbi	0x0b, 6	; 11
   10960:	54 98       	cbi	0x0a, 4	; 10
   10962:	5c 9a       	sbi	0x0b, 4	; 11
   10964:	57 98       	cbi	0x0a, 7	; 10
   10966:	5f 9a       	sbi	0x0b, 7	; 11
   10968:	55 98       	cbi	0x0a, 5	; 10
   1096a:	5d 9a       	sbi	0x0b, 5	; 11
   1096c:	20 98       	cbi	0x04, 0	; 4
   1096e:	28 9a       	sbi	0x05, 0	; 5
   10970:	45 98       	cbi	0x08, 5	; 8
   10972:	3d 9a       	sbi	0x07, 5	; 7
   10974:	44 9a       	sbi	0x08, 4	; 8
   10976:	3c 9a       	sbi	0x07, 4	; 7
   10978:	43 98       	cbi	0x08, 3	; 8
   1097a:	3b 9a       	sbi	0x07, 3	; 7
   1097c:	42 98       	cbi	0x08, 2	; 8
   1097e:	3a 9a       	sbi	0x07, 2	; 7
   10980:	9d e0       	ldi	r25, 0x0D	; 13
   10982:	9a 95       	dec	r25
   10984:	f1 f7       	brne	.-4      	; 0x10982 <gpib_bus_init+0x44>
   10986:	00 00       	nop
   10988:	8f bf       	out	0x3f, r24	; 63
   1098a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1098e:	82 ff       	sbrs	r24, 2
   10990:	0a c0       	rjmp	.+20     	; 0x109a6 <gpib_bus_init+0x68>
   10992:	86 e2       	ldi	r24, 0x26	; 38
   10994:	92 e1       	ldi	r25, 0x12	; 18
   10996:	a0 e0       	ldi	r26, 0x00	; 0
   10998:	ed b7       	in	r30, 0x3d	; 61
   1099a:	fe b7       	in	r31, 0x3e	; 62
   1099c:	81 83       	std	Z+1, r24	; 0x01
   1099e:	92 83       	std	Z+2, r25	; 0x02
   109a0:	a3 83       	std	Z+3, r26	; 0x03
   109a2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   109a6:	0f 90       	pop	r0
   109a8:	0f 90       	pop	r0
   109aa:	0f 90       	pop	r0
   109ac:	08 95       	ret

000109ae <gpib_rx_init>:
   109ae:	9f b7       	in	r25, 0x3f	; 63
   109b0:	f8 94       	cli
   109b2:	11 b8       	out	0x01, r1	; 1
   109b4:	2f ef       	ldi	r18, 0xFF	; 255
   109b6:	22 b9       	out	0x02, r18	; 2
   109b8:	21 98       	cbi	0x04, 1	; 4
   109ba:	29 9a       	sbi	0x05, 1	; 5
   109bc:	20 98       	cbi	0x04, 0	; 4
   109be:	28 9a       	sbi	0x05, 0	; 5
   109c0:	4e 9b       	sbis	0x09, 6	; 9
   109c2:	09 c0       	rjmp	.+18     	; 0x109d6 <gpib_rx_init+0x28>
   109c4:	81 11       	cpse	r24, r1
   109c6:	07 c0       	rjmp	.+14     	; 0x109d6 <gpib_rx_init+0x28>
   109c8:	52 98       	cbi	0x0a, 2	; 10
   109ca:	5a 9a       	sbi	0x0b, 2	; 11
   109cc:	53 98       	cbi	0x0a, 3	; 10
   109ce:	5b 9a       	sbi	0x0b, 3	; 11
   109d0:	42 98       	cbi	0x08, 2	; 8
   109d2:	3a 9a       	sbi	0x07, 2	; 7
   109d4:	08 c0       	rjmp	.+16     	; 0x109e6 <gpib_rx_init+0x38>
   109d6:	42 98       	cbi	0x08, 2	; 8
   109d8:	3a 9a       	sbi	0x07, 2	; 7
   109da:	5b 98       	cbi	0x0b, 3	; 11
   109dc:	53 9a       	sbi	0x0a, 3	; 10
   109de:	5a 98       	cbi	0x0b, 2	; 11
   109e0:	52 9a       	sbi	0x0a, 2	; 10
   109e2:	88 23       	and	r24, r24
   109e4:	89 f3       	breq	.-30     	; 0x109c8 <gpib_rx_init+0x1a>
   109e6:	9f bf       	out	0x3f, r25	; 63
   109e8:	08 95       	ret

000109ea <gpib_tx_init>:
   109ea:	9f b7       	in	r25, 0x3f	; 63
   109ec:	f8 94       	cli
   109ee:	11 b8       	out	0x01, r1	; 1
   109f0:	8f ef       	ldi	r24, 0xFF	; 255
   109f2:	82 b9       	out	0x02, r24	; 2
   109f4:	21 98       	cbi	0x04, 1	; 4
   109f6:	29 9a       	sbi	0x05, 1	; 5
   109f8:	52 98       	cbi	0x0a, 2	; 10
   109fa:	5a 9a       	sbi	0x0b, 2	; 11
   109fc:	53 98       	cbi	0x0a, 3	; 10
   109fe:	5b 9a       	sbi	0x0b, 3	; 11
   10a00:	20 98       	cbi	0x04, 0	; 4
   10a02:	28 9a       	sbi	0x05, 0	; 5
   10a04:	42 9a       	sbi	0x08, 2	; 8
   10a06:	3a 9a       	sbi	0x07, 2	; 7
   10a08:	81 b9       	out	0x01, r24	; 1
   10a0a:	9f bf       	out	0x3f, r25	; 63
   10a0c:	08 95       	ret

00010a0e <gpib_state_init>:
   10a0e:	00 d0       	rcall	.+0      	; 0x10a10 <gpib_state_init+0x2>
   10a10:	1f 92       	push	r1
   10a12:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10a16:	82 ff       	sbrs	r24, 2
   10a18:	0a c0       	rjmp	.+20     	; 0x10a2e <gpib_state_init+0x20>
   10a1a:	83 e1       	ldi	r24, 0x13	; 19
   10a1c:	92 e1       	ldi	r25, 0x12	; 18
   10a1e:	a0 e0       	ldi	r26, 0x00	; 0
   10a20:	ed b7       	in	r30, 0x3d	; 61
   10a22:	fe b7       	in	r31, 0x3e	; 62
   10a24:	81 83       	std	Z+1, r24	; 0x01
   10a26:	92 83       	std	Z+2, r25	; 0x02
   10a28:	a3 83       	std	Z+3, r26	; 0x03
   10a2a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   10a2e:	cc dd       	rcall	.-1128   	; 0x105c8 <ppr_init>
   10a30:	0e 94 bf 8f 	call	0x11f7e	; 0x11f7e <listen_cleanup>
   10a34:	0e 94 d5 90 	call	0x121aa	; 0x121aa <talk_cleanup>
   10a38:	10 92 ee 1e 	sts	0x1EEE, r1	; 0x801eee <spoll>
   10a3c:	10 92 f1 1e 	sts	0x1EF1, r1	; 0x801ef1 <talking>
   10a40:	10 92 f4 1e 	sts	0x1EF4, r1	; 0x801ef4 <talking_last>
   10a44:	10 92 f3 1e 	sts	0x1EF3, r1	; 0x801ef3 <listening>
   10a48:	10 92 ed 1e 	sts	0x1EED, r1	; 0x801eed <listening_last>
   10a4c:	10 92 ec 1c 	sts	0x1CEC, r1	; 0x801cec <lastcmd+0x1>
   10a50:	10 92 eb 1c 	sts	0x1CEB, r1	; 0x801ceb <lastcmd>
   10a54:	10 92 f0 1e 	sts	0x1EF0, r1	; 0x801ef0 <current+0x1>
   10a58:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <current>
   10a5c:	10 92 f2 1e 	sts	0x1EF2, r1	; 0x801ef2 <secondary>
   10a60:	0f 90       	pop	r0
   10a62:	0f 90       	pop	r0
   10a64:	0f 90       	pop	r0
   10a66:	08 95       	ret

00010a68 <gpib_enable_PPR>:
   10a68:	cf 93       	push	r28
   10a6a:	df 93       	push	r29
   10a6c:	ad b7       	in	r26, 0x3d	; 61
   10a6e:	be b7       	in	r27, 0x3e	; 62
   10a70:	17 97       	sbiw	r26, 0x07	; 7
   10a72:	0f b6       	in	r0, 0x3f	; 63
   10a74:	f8 94       	cli
   10a76:	be bf       	out	0x3e, r27	; 62
   10a78:	0f be       	out	0x3f, r0	; 63
   10a7a:	ad bf       	out	0x3d, r26	; 61
   10a7c:	ec 01       	movw	r28, r24
   10a7e:	88 30       	cpi	r24, 0x08	; 8
   10a80:	91 05       	cpc	r25, r1
   10a82:	68 f0       	brcs	.+26     	; 0x10a9e <gpib_enable_PPR+0x36>
   10a84:	ed b7       	in	r30, 0x3d	; 61
   10a86:	fe b7       	in	r31, 0x3e	; 62
   10a88:	95 83       	std	Z+5, r25	; 0x05
   10a8a:	84 83       	std	Z+4, r24	; 0x04
   10a8c:	8d ee       	ldi	r24, 0xED	; 237
   10a8e:	91 e1       	ldi	r25, 0x11	; 17
   10a90:	a0 e0       	ldi	r26, 0x00	; 0
   10a92:	81 83       	std	Z+1, r24	; 0x01
   10a94:	92 83       	std	Z+2, r25	; 0x02
   10a96:	a3 83       	std	Z+3, r26	; 0x03
   10a98:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   10a9c:	15 c0       	rjmp	.+42     	; 0x10ac8 <gpib_enable_PPR+0x60>
   10a9e:	aa dd       	rcall	.-1196   	; 0x105f4 <ppr_bit_set>
   10aa0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10aa4:	81 ff       	sbrs	r24, 1
   10aa6:	10 c0       	rjmp	.+32     	; 0x10ac8 <gpib_enable_PPR+0x60>
   10aa8:	8b dd       	rcall	.-1258   	; 0x105c0 <ppr_reg>
   10aaa:	90 e0       	ldi	r25, 0x00	; 0
   10aac:	ed b7       	in	r30, 0x3d	; 61
   10aae:	fe b7       	in	r31, 0x3e	; 62
   10ab0:	97 83       	std	Z+7, r25	; 0x07
   10ab2:	86 83       	std	Z+6, r24	; 0x06
   10ab4:	d5 83       	std	Z+5, r29	; 0x05
   10ab6:	c4 83       	std	Z+4, r28	; 0x04
   10ab8:	82 ed       	ldi	r24, 0xD2	; 210
   10aba:	91 e1       	ldi	r25, 0x11	; 17
   10abc:	a0 e0       	ldi	r26, 0x00	; 0
   10abe:	81 83       	std	Z+1, r24	; 0x01
   10ac0:	92 83       	std	Z+2, r25	; 0x02
   10ac2:	a3 83       	std	Z+3, r26	; 0x03
   10ac4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   10ac8:	cd b7       	in	r28, 0x3d	; 61
   10aca:	de b7       	in	r29, 0x3e	; 62
   10acc:	27 96       	adiw	r28, 0x07	; 7
   10ace:	e2 e0       	ldi	r30, 0x02	; 2
   10ad0:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00010ad4 <gpib_disable_PPR>:
   10ad4:	cf 93       	push	r28
   10ad6:	df 93       	push	r29
   10ad8:	ad b7       	in	r26, 0x3d	; 61
   10ada:	be b7       	in	r27, 0x3e	; 62
   10adc:	17 97       	sbiw	r26, 0x07	; 7
   10ade:	0f b6       	in	r0, 0x3f	; 63
   10ae0:	f8 94       	cli
   10ae2:	be bf       	out	0x3e, r27	; 62
   10ae4:	0f be       	out	0x3f, r0	; 63
   10ae6:	ad bf       	out	0x3d, r26	; 61
   10ae8:	ec 01       	movw	r28, r24
   10aea:	88 30       	cpi	r24, 0x08	; 8
   10aec:	91 05       	cpc	r25, r1
   10aee:	68 f0       	brcs	.+26     	; 0x10b0a <gpib_disable_PPR+0x36>
   10af0:	ed b7       	in	r30, 0x3d	; 61
   10af2:	fe b7       	in	r31, 0x3e	; 62
   10af4:	95 83       	std	Z+5, r25	; 0x05
   10af6:	84 83       	std	Z+4, r24	; 0x04
   10af8:	8b ea       	ldi	r24, 0xAB	; 171
   10afa:	91 e1       	ldi	r25, 0x11	; 17
   10afc:	a0 e0       	ldi	r26, 0x00	; 0
   10afe:	81 83       	std	Z+1, r24	; 0x01
   10b00:	92 83       	std	Z+2, r25	; 0x02
   10b02:	a3 83       	std	Z+3, r26	; 0x03
   10b04:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   10b08:	15 c0       	rjmp	.+42     	; 0x10b34 <gpib_disable_PPR+0x60>
   10b0a:	81 dd       	rcall	.-1278   	; 0x1060e <ppr_bit_clr>
   10b0c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b10:	81 ff       	sbrs	r24, 1
   10b12:	10 c0       	rjmp	.+32     	; 0x10b34 <gpib_disable_PPR+0x60>
   10b14:	55 dd       	rcall	.-1366   	; 0x105c0 <ppr_reg>
   10b16:	90 e0       	ldi	r25, 0x00	; 0
   10b18:	ed b7       	in	r30, 0x3d	; 61
   10b1a:	fe b7       	in	r31, 0x3e	; 62
   10b1c:	97 83       	std	Z+7, r25	; 0x07
   10b1e:	86 83       	std	Z+6, r24	; 0x06
   10b20:	d5 83       	std	Z+5, r29	; 0x05
   10b22:	c4 83       	std	Z+4, r28	; 0x04
   10b24:	80 e9       	ldi	r24, 0x90	; 144
   10b26:	91 e1       	ldi	r25, 0x11	; 17
   10b28:	a0 e0       	ldi	r26, 0x00	; 0
   10b2a:	81 83       	std	Z+1, r24	; 0x01
   10b2c:	92 83       	std	Z+2, r25	; 0x02
   10b2e:	a3 83       	std	Z+3, r26	; 0x03
   10b30:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   10b34:	cd b7       	in	r28, 0x3d	; 61
   10b36:	de b7       	in	r29, 0x3e	; 62
   10b38:	27 96       	adiw	r28, 0x07	; 7
   10b3a:	e2 e0       	ldi	r30, 0x02	; 2
   10b3c:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00010b40 <gpib_unread>:
///     - If ATN is LOW then we strip parity from the byte.
///   - Upper 8 bits: Status and Errors present.
///     - @see gpib.h _FLAGS defines for a full list.
/// @return ch
uint16_t gpib_unread(uint16_t ch)
{
   10b40:	cf 93       	push	r28
   10b42:	df 93       	push	r29
   10b44:	00 d0       	rcall	.+0      	; 0x10b46 <gpib_unread+0x6>
   10b46:	1f 92       	push	r1
   10b48:	ec 01       	movw	r28, r24
    if(!gpib_unread_f)
   10b4a:	80 91 62 19 	lds	r24, 0x1962	; 0x801962 <gpib_unread_f>
   10b4e:	81 11       	cpse	r24, r1
   10b50:	08 c0       	rjmp	.+16     	; 0x10b62 <gpib_unread+0x22>
    {
        gpib_unread_data = ch;
   10b52:	d0 93 f6 1e 	sts	0x1EF6, r29	; 0x801ef6 <gpib_unread_data+0x1>
   10b56:	c0 93 f5 1e 	sts	0x1EF5, r28	; 0x801ef5 <gpib_unread_data>
        gpib_unread_f = 1;
   10b5a:	81 e0       	ldi	r24, 0x01	; 1
   10b5c:	80 93 62 19 	sts	0x1962, r24	; 0x801962 <gpib_unread_f>
   10b60:	12 c0       	rjmp	.+36     	; 0x10b86 <gpib_unread+0x46>
    }
    else
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10b62:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b66:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10b6a:	85 70       	andi	r24, 0x05	; 5
   10b6c:	99 27       	eor	r25, r25
   10b6e:	89 2b       	or	r24, r25
   10b70:	51 f0       	breq	.+20     	; 0x10b86 <gpib_unread+0x46>
            printf("gpib_unread: error, can only be called once!\n");
   10b72:	82 e6       	ldi	r24, 0x62	; 98
   10b74:	91 e1       	ldi	r25, 0x11	; 17
   10b76:	a0 e0       	ldi	r26, 0x00	; 0
   10b78:	ed b7       	in	r30, 0x3d	; 61
   10b7a:	fe b7       	in	r31, 0x3e	; 62
   10b7c:	81 83       	std	Z+1, r24	; 0x01
   10b7e:	92 83       	std	Z+2, r25	; 0x02
   10b80:	a3 83       	std	Z+3, r26	; 0x03
   10b82:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    }
    return(ch);
}
   10b86:	ce 01       	movw	r24, r28
   10b88:	cd b7       	in	r28, 0x3d	; 61
   10b8a:	de b7       	in	r29, 0x3e	; 62
   10b8c:	23 96       	adiw	r28, 0x03	; 3
   10b8e:	e2 e0       	ldi	r30, 0x02	; 2
   10b90:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00010b94 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10b94:	11 b8       	out	0x01, r1	; 1
   10b96:	80 b1       	in	r24, 0x00	; 0
   10b98:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10b9a:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10b9c:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10b9e:	08 95       	ret

00010ba0 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10ba0:	4e 99       	sbic	0x09, 6	; 9
   10ba2:	03 c0       	rjmp	.+6      	; 0x10baa <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10ba4:	80 e0       	ldi	r24, 0x00	; 0
   10ba6:	94 e0       	ldi	r25, 0x04	; 4
   10ba8:	02 c0       	rjmp	.+4      	; 0x10bae <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10baa:	80 e0       	ldi	r24, 0x00	; 0
   10bac:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10bae:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10bb0:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10bb2:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10bb4:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10bb6:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10bb8:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10bba:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10bbc:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10bbe:	08 95       	ret

00010bc0 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10bc0:	19 99       	sbic	0x03, 1	; 3
   10bc2:	03 c0       	rjmp	.+6      	; 0x10bca <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10bc4:	80 e0       	ldi	r24, 0x00	; 0
   10bc6:	90 e2       	ldi	r25, 0x20	; 32
   10bc8:	02 c0       	rjmp	.+4      	; 0x10bce <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10bca:	80 e0       	ldi	r24, 0x00	; 0
   10bcc:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10bce:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10bd0:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10bd2:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10bd4:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10bd6:	08 95       	ret

00010bd8 <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10bd8:	2f 92       	push	r2
   10bda:	3f 92       	push	r3
   10bdc:	4f 92       	push	r4
   10bde:	6f 92       	push	r6
   10be0:	7f 92       	push	r7
   10be2:	8f 92       	push	r8
   10be4:	af 92       	push	r10
   10be6:	bf 92       	push	r11
   10be8:	cf 92       	push	r12
   10bea:	df 92       	push	r13
   10bec:	ef 92       	push	r14
   10bee:	1f 93       	push	r17
   10bf0:	cf 93       	push	r28
   10bf2:	df 93       	push	r29
   10bf4:	cd b7       	in	r28, 0x3d	; 61
   10bf6:	de b7       	in	r29, 0x3e	; 62
   10bf8:	2a 97       	sbiw	r28, 0x0a	; 10
   10bfa:	0f b6       	in	r0, 0x3f	; 63
   10bfc:	f8 94       	cli
   10bfe:	de bf       	out	0x3e, r29	; 62
   10c00:	0f be       	out	0x3f, r0	; 63
   10c02:	cd bf       	out	0x3d, r28	; 61
   10c04:	9a 87       	std	Y+10, r25	; 0x0a
   10c06:	89 87       	std	Y+9, r24	; 0x09
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10c08:	64 ef       	ldi	r22, 0xF4	; 244
   10c0a:	71 e0       	ldi	r23, 0x01	; 1
   10c0c:	80 e0       	ldi	r24, 0x00	; 0
   10c0e:	90 e0       	ldi	r25, 0x00	; 0
   10c10:	8c de       	rcall	.-744    	; 0x1092a <gpib_timeout_set>
// Now Done in write_str
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
   10c12:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10c14:	8e e3       	ldi	r24, 0x3E	; 62
   10c16:	90 e1       	ldi	r25, 0x10	; 16
   10c18:	6c 01       	movw	r12, r24
   10c1a:	e1 2c       	mov	r14, r1
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10c1c:	8d e6       	ldi	r24, 0x6D	; 109
   10c1e:	90 e1       	ldi	r25, 0x10	; 16
   10c20:	3c 01       	movw	r6, r24
   10c22:	81 2c       	mov	r8, r1
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10c24:	aa 24       	eor	r10, r10
   10c26:	a3 94       	inc	r10
   10c28:	b1 2c       	mov	r11, r1
   10c2a:	85 ee       	ldi	r24, 0xE5	; 229
   10c2c:	90 e1       	ldi	r25, 0x10	; 16
   10c2e:	1c 01       	movw	r2, r24
   10c30:	41 2c       	mov	r4, r1
					break;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10c32:	89 ea       	ldi	r24, 0xA9	; 169
   10c34:	90 e1       	ldi	r25, 0x10	; 16
   10c36:	9c 01       	movw	r18, r24
   10c38:	40 e0       	ldi	r20, 0x00	; 0
   10c3a:	2e 83       	std	Y+6, r18	; 0x06
   10c3c:	3f 83       	std	Y+7, r19	; 0x07
   10c3e:	48 87       	std	Y+8, r20	; 0x08
	// Not called for writting
#if 0
        gpib_user_task();
#endif

		if(uart_keyhit(0))
   10c40:	80 e0       	ldi	r24, 0x00	; 0
   10c42:	0e 94 73 28 	call	0x50e6	; 0x50e6 <uart_keyhit>
   10c46:	89 2b       	or	r24, r25
   10c48:	69 f0       	breq	.+26     	; 0x10c64 <gpib_write_byte+0x8c>
		{
			if(debuglevel & GPIB_ERR)
   10c4a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c4e:	80 ff       	sbrs	r24, 0
   10c50:	f1 c0       	rjmp	.+482    	; 0x10e34 <gpib_write_byte+0x25c>
				printf("gpib_write_byte: KEY state=%d\n", tx_state);
   10c52:	81 2f       	mov	r24, r17
   10c54:	90 e0       	ldi	r25, 0x00	; 0
   10c56:	ed b7       	in	r30, 0x3d	; 61
   10c58:	fe b7       	in	r31, 0x3e	; 62
   10c5a:	95 83       	std	Z+5, r25	; 0x05
   10c5c:	84 83       	std	Z+4, r24	; 0x04
   10c5e:	83 e4       	ldi	r24, 0x43	; 67
   10c60:	91 e1       	ldi	r25, 0x11	; 17
   10c62:	14 c0       	rjmp	.+40     	; 0x10c8c <gpib_write_byte+0xb4>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10c64:	4c 99       	sbic	0x09, 4	; 9
   10c66:	19 c0       	rjmp	.+50     	; 0x10c9a <gpib_write_byte+0xc2>
        {
            ch |= IFC_FLAG;
   10c68:	29 85       	ldd	r18, Y+9	; 0x09
   10c6a:	3a 85       	ldd	r19, Y+10	; 0x0a
   10c6c:	30 61       	ori	r19, 0x10	; 16
   10c6e:	3a 87       	std	Y+10, r19	; 0x0a
            gpib_bus_init();
   10c70:	29 87       	std	Y+9, r18	; 0x09
   10c72:	65 de       	rcall	.-822    	; 0x1093e <gpib_bus_init>
			if(debuglevel & GPIB_ERR)
   10c74:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c78:	80 ff       	sbrs	r24, 0
   10c7a:	dc c0       	rjmp	.+440    	; 0x10e34 <gpib_write_byte+0x25c>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   10c7c:	81 2f       	mov	r24, r17
   10c7e:	90 e0       	ldi	r25, 0x00	; 0
   10c80:	ed b7       	in	r30, 0x3d	; 61
   10c82:	fe b7       	in	r31, 0x3e	; 62
   10c84:	95 83       	std	Z+5, r25	; 0x05
   10c86:	84 83       	std	Z+4, r24	; 0x04
   10c88:	84 e2       	ldi	r24, 0x24	; 36
   10c8a:	91 e1       	ldi	r25, 0x11	; 17
   10c8c:	a0 e0       	ldi	r26, 0x00	; 0
   10c8e:	81 83       	std	Z+1, r24	; 0x01
   10c90:	92 83       	std	Z+2, r25	; 0x02
   10c92:	a3 83       	std	Z+3, r26	; 0x03
   10c94:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   10c98:	cd c0       	rjmp	.+410    	; 0x10e34 <gpib_write_byte+0x25c>
            break;
        }

        switch(tx_state)
   10c9a:	81 2f       	mov	r24, r17
   10c9c:	90 e0       	ldi	r25, 0x00	; 0
   10c9e:	89 30       	cpi	r24, 0x09	; 9
   10ca0:	91 05       	cpc	r25, r1
   10ca2:	08 f0       	brcs	.+2      	; 0x10ca6 <gpib_write_byte+0xce>
   10ca4:	bf c0       	rjmp	.+382    	; 0x10e24 <gpib_write_byte+0x24c>
   10ca6:	fc 01       	movw	r30, r24
   10ca8:	e3 54       	subi	r30, 0x43	; 67
   10caa:	ff 4f       	sbci	r31, 0xFF	; 255
   10cac:	0c 94 2d e3 	jmp	0x1c65a	; 0x1c65a <__tablejump2__>
        {
			// DAV == 1 the bus is ready
            case GPIB_TX_START:
				gpib_tx_init(0);
   10cb0:	80 e0       	ldi	r24, 0x00	; 0
   10cb2:	9b de       	rcall	.-714    	; 0x109ea <gpib_tx_init>
				GPIB_PIN_FLOAT_UP(DAV);
   10cb4:	21 98       	cbi	0x04, 1	; 4
   10cb6:	29 9a       	sbi	0x05, 1	; 5
   10cb8:	fd e0       	ldi	r31, 0x0D	; 13
   10cba:	fa 95       	dec	r31
   10cbc:	f1 f7       	brne	.-4      	; 0x10cba <gpib_write_byte+0xe2>
   10cbe:	00 00       	nop
   10cc0:	06 c0       	rjmp	.+12     	; 0x10cce <gpib_write_byte+0xf6>
                tx_state = GPIB_TX_PUT_DATA;
                break;

// Wait for NRFD or NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_OR_NDAC_LOW:
                if(GPIB_PIN_TST(NRFD) == 0 || GPIB_PIN_TST(NDAC) == 0)
   10cc2:	4a 9b       	sbis	0x09, 2	; 9
   10cc4:	02 c0       	rjmp	.+4      	; 0x10cca <gpib_write_byte+0xf2>
   10cc6:	4b 99       	sbic	0x09, 3	; 9
   10cc8:	17 c0       	rjmp	.+46     	; 0x10cf8 <gpib_write_byte+0x120>
                {
					if(GPIB_PIN_TST(ATN) == 1)
   10cca:	4e 9b       	sbis	0x09, 6	; 9
   10ccc:	07 c0       	rjmp	.+14     	; 0x10cdc <gpib_write_byte+0x104>
					{
						gpib_timeout_set(HTIMEOUT);
   10cce:	64 ef       	ldi	r22, 0xF4	; 244
   10cd0:	71 e0       	ldi	r23, 0x01	; 1
   10cd2:	80 e0       	ldi	r24, 0x00	; 0
   10cd4:	90 e0       	ldi	r25, 0x00	; 0
   10cd6:	29 de       	rcall	.-942    	; 0x1092a <gpib_timeout_set>
						tx_state = GPIB_TX_PUT_DATA;
   10cd8:	12 e0       	ldi	r17, 0x02	; 2
   10cda:	b2 cf       	rjmp	.-156    	; 0x10c40 <gpib_write_byte+0x68>
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
   10cdc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10ce0:	80 ff       	sbrs	r24, 0
   10ce2:	ae cf       	rjmp	.-164    	; 0x10c40 <gpib_write_byte+0x68>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10ce4:	ed b7       	in	r30, 0x3d	; 61
   10ce6:	fe b7       	in	r31, 0x3e	; 62
   10ce8:	b5 82       	std	Z+5, r11	; 0x05
   10cea:	a4 82       	std	Z+4, r10	; 0x04
   10cec:	21 82       	std	Z+1, r2	; 0x01
   10cee:	32 82       	std	Z+2, r3	; 0x02
   10cf0:	43 82       	std	Z+3, r4	; 0x03
   10cf2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   10cf6:	a4 cf       	rjmp	.-184    	; 0x10c40 <gpib_write_byte+0x68>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10cf8:	80 91 ea 1c 	lds	r24, 0x1CEA	; 0x801cea <gpib_timer+0x8>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
#endif
					}
					break;
                }
                if (gpib_timeout_test())
   10cfc:	88 23       	and	r24, r24
   10cfe:	09 f4       	brne	.+2      	; 0x10d02 <gpib_write_byte+0x12a>
   10d00:	9f cf       	rjmp	.-194    	; 0x10c40 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10d02:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d06:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10d0a:	85 70       	andi	r24, 0x05	; 5
   10d0c:	99 27       	eor	r25, r25
   10d0e:	89 2b       	or	r24, r25
   10d10:	c1 f1       	breq	.+112    	; 0x10d82 <gpib_write_byte+0x1aa>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10d12:	2e 81       	ldd	r18, Y+6	; 0x06
   10d14:	3f 81       	ldd	r19, Y+7	; 0x07
   10d16:	48 85       	ldd	r20, Y+8	; 0x08
   10d18:	ed b7       	in	r30, 0x3d	; 61
   10d1a:	fe b7       	in	r31, 0x3e	; 62
   10d1c:	21 83       	std	Z+1, r18	; 0x01
   10d1e:	32 83       	std	Z+2, r19	; 0x02
   10d20:	43 83       	std	Z+3, r20	; 0x03
   10d22:	2d c0       	rjmp	.+90     	; 0x10d7e <gpib_write_byte+0x1a6>
                }
                break;

// Write Data
            case GPIB_TX_PUT_DATA:
                if(ch & EOI_FLAG)
   10d24:	89 85       	ldd	r24, Y+9	; 0x09
   10d26:	9a 85       	ldd	r25, Y+10	; 0x0a
   10d28:	90 ff       	sbrs	r25, 0
   10d2a:	03 c0       	rjmp	.+6      	; 0x10d32 <gpib_write_byte+0x15a>
                    GPIB_IO_LOW(EOI);
   10d2c:	28 98       	cbi	0x05, 0	; 5
   10d2e:	20 9a       	sbi	0x04, 0	; 4
   10d30:	02 c0       	rjmp	.+4      	; 0x10d36 <gpib_write_byte+0x15e>
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10d32:	20 98       	cbi	0x04, 0	; 4
   10d34:	28 9a       	sbi	0x05, 0	; 5
                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10d36:	8f ef       	ldi	r24, 0xFF	; 255
   10d38:	81 b9       	out	0x01, r24	; 1
   10d3a:	89 85       	ldd	r24, Y+9	; 0x09
   10d3c:	80 95       	com	r24
   10d3e:	82 b9       	out	0x02, r24	; 2
   10d40:	9d e0       	ldi	r25, 0x0D	; 13
   10d42:	9a 95       	dec	r25
   10d44:	f1 f7       	brne	.-4      	; 0x10d42 <gpib_write_byte+0x16a>
   10d46:	00 00       	nop
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10d48:	64 ef       	ldi	r22, 0xF4	; 244
   10d4a:	71 e0       	ldi	r23, 0x01	; 1
   10d4c:	80 e0       	ldi	r24, 0x00	; 0
   10d4e:	90 e0       	ldi	r25, 0x00	; 0
   10d50:	ec dd       	rcall	.-1064   	; 0x1092a <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NRFD_HI;
   10d52:	13 e0       	ldi	r17, 0x03	; 3
                break;
   10d54:	75 cf       	rjmp	.-278    	; 0x10c40 <gpib_write_byte+0x68>
// Wait for BOTH NRFD HI and NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_HI:
#if 0
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
#else
                if(GPIB_PIN_TST(NRFD))
   10d56:	4a 99       	sbic	0x09, 2	; 9
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
   10d58:	14 e0       	ldi	r17, 0x04	; 4
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10d5a:	80 91 ea 1c 	lds	r24, 0x1CEA	; 0x801cea <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD))
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
   10d5e:	88 23       	and	r24, r24
   10d60:	09 f4       	brne	.+2      	; 0x10d64 <gpib_write_byte+0x18c>
   10d62:	6e cf       	rjmp	.-292    	; 0x10c40 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10d64:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d68:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10d6c:	85 70       	andi	r24, 0x05	; 5
   10d6e:	99 27       	eor	r25, r25
   10d70:	89 2b       	or	r24, r25
   10d72:	39 f0       	breq	.+14     	; 0x10d82 <gpib_write_byte+0x1aa>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10d74:	ed b7       	in	r30, 0x3d	; 61
   10d76:	fe b7       	in	r31, 0x3e	; 62
   10d78:	61 82       	std	Z+1, r6	; 0x01
   10d7a:	72 82       	std	Z+2, r7	; 0x02
   10d7c:	83 82       	std	Z+3, r8	; 0x03
   10d7e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
                    ch |= TIMEOUT_FLAG;
   10d82:	29 85       	ldd	r18, Y+9	; 0x09
   10d84:	3a 85       	ldd	r19, Y+10	; 0x0a
   10d86:	30 64       	ori	r19, 0x40	; 64
   10d88:	3a 87       	std	Y+10, r19	; 0x0a
   10d8a:	29 87       	std	Y+9, r18	; 0x09
   10d8c:	51 c0       	rjmp	.+162    	; 0x10e30 <gpib_write_byte+0x258>
                    break;
                }
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10d8e:	29 98       	cbi	0x05, 1	; 5
   10d90:	21 9a       	sbi	0x04, 1	; 4
   10d92:	3d e0       	ldi	r19, 0x0D	; 13
   10d94:	3a 95       	dec	r19
   10d96:	f1 f7       	brne	.-4      	; 0x10d94 <gpib_write_byte+0x1bc>
                GPIB_BUS_SETTLE();                
                gpib_timeout_set(HTIMEOUT);
   10d98:	00 00       	nop
   10d9a:	64 ef       	ldi	r22, 0xF4	; 244
   10d9c:	71 e0       	ldi	r23, 0x01	; 1
   10d9e:	80 e0       	ldi	r24, 0x00	; 0
   10da0:	90 e0       	ldi	r25, 0x00	; 0
   10da2:	c3 dd       	rcall	.-1146   	; 0x1092a <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   10da4:	15 e0       	ldi	r17, 0x05	; 5
                break;
   10da6:	4c cf       	rjmp	.-360    	; 0x10c40 <gpib_write_byte+0x68>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   10da8:	4b 99       	sbic	0x09, 3	; 9
   10daa:	40 c0       	rjmp	.+128    	; 0x10e2c <gpib_write_byte+0x254>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10dac:	80 91 ea 1c 	lds	r24, 0x1CEA	; 0x801cea <gpib_timer+0x8>
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   10db0:	88 23       	and	r24, r24
   10db2:	09 f4       	brne	.+2      	; 0x10db6 <gpib_write_byte+0x1de>
   10db4:	45 cf       	rjmp	.-374    	; 0x10c40 <gpib_write_byte+0x68>
                {
                    ch |= TIMEOUT_FLAG;
   10db6:	89 85       	ldd	r24, Y+9	; 0x09
   10db8:	9a 85       	ldd	r25, Y+10	; 0x0a
   10dba:	90 64       	ori	r25, 0x40	; 64
   10dbc:	9a 87       	std	Y+10, r25	; 0x0a
   10dbe:	89 87       	std	Y+9, r24	; 0x09
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10dc0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10dc4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10dc8:	85 70       	andi	r24, 0x05	; 5
   10dca:	99 27       	eor	r25, r25
   10dcc:	89 2b       	or	r24, r25
   10dce:	81 f1       	breq	.+96     	; 0x10e30 <gpib_write_byte+0x258>
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10dd0:	ed b7       	in	r30, 0x3d	; 61
   10dd2:	fe b7       	in	r31, 0x3e	; 62
   10dd4:	c1 82       	std	Z+1, r12	; 0x01
   10dd6:	d2 82       	std	Z+2, r13	; 0x02
   10dd8:	e3 82       	std	Z+3, r14	; 0x03
   10dda:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   10dde:	28 c0       	rjmp	.+80     	; 0x10e30 <gpib_write_byte+0x258>
                }
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   10de0:	21 98       	cbi	0x04, 1	; 4
   10de2:	29 9a       	sbi	0x05, 1	; 5
   10de4:	fd e0       	ldi	r31, 0x0D	; 13
   10de6:	fa 95       	dec	r31
   10de8:	f1 f7       	brne	.-4      	; 0x10de6 <gpib_write_byte+0x20e>
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
                gpib_timeout_set(HTIMEOUT);
   10dea:	00 00       	nop
   10dec:	64 ef       	ldi	r22, 0xF4	; 244
   10dee:	71 e0       	ldi	r23, 0x01	; 1
   10df0:	80 e0       	ldi	r24, 0x00	; 0
   10df2:	90 e0       	ldi	r25, 0x00	; 0

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
   10df4:	9a dd       	rcall	.-1228   	; 0x1092a <gpib_timeout_set>
                gpib_timeout_set(HTIMEOUT);
                break;
   10df6:	17 e0       	ldi	r17, 0x07	; 7
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
				// Free BUS, BUSY on error
                gpib_rx_init(1);
   10df8:	23 cf       	rjmp	.-442    	; 0x10c40 <gpib_write_byte+0x68>
   10dfa:	81 e0       	ldi	r24, 0x01	; 1
   10dfc:	d8 dd       	rcall	.-1104   	; 0x109ae <gpib_rx_init>
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10dfe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10e02:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10e06:	85 70       	andi	r24, 0x05	; 5
   10e08:	99 27       	eor	r25, r25
   10e0a:	89 2b       	or	r24, r25
   10e0c:	99 f0       	breq	.+38     	; 0x10e34 <gpib_write_byte+0x25c>
                    printf("<GPIB TX TIMEOUT>\n");
   10e0e:	8b e2       	ldi	r24, 0x2B	; 43
   10e10:	90 e1       	ldi	r25, 0x10	; 16
   10e12:	a0 e0       	ldi	r26, 0x00	; 0
   10e14:	ed b7       	in	r30, 0x3d	; 61
   10e16:	fe b7       	in	r31, 0x3e	; 62
   10e18:	81 83       	std	Z+1, r24	; 0x01
   10e1a:	92 83       	std	Z+2, r25	; 0x02
   10e1c:	a3 83       	std	Z+3, r26	; 0x03
   10e1e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   10e22:	08 c0       	rjmp	.+16     	; 0x10e34 <gpib_write_byte+0x25c>
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
    while(tx_state != GPIB_TX_DONE )
   10e24:	19 30       	cpi	r17, 0x09	; 9
   10e26:	09 f0       	breq	.+2      	; 0x10e2a <gpib_write_byte+0x252>
   10e28:	0b cf       	rjmp	.-490    	; 0x10c40 <gpib_write_byte+0x68>
   10e2a:	04 c0       	rjmp	.+8      	; 0x10e34 <gpib_write_byte+0x25c>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   10e2c:	16 e0       	ldi	r17, 0x06	; 6
   10e2e:	08 cf       	rjmp	.-496    	; 0x10c40 <gpib_write_byte+0x68>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   10e30:	18 e0       	ldi	r17, 0x08	; 8
   10e32:	06 cf       	rjmp	.-500    	; 0x10c40 <gpib_write_byte+0x68>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   10e34:	89 85       	ldd	r24, Y+9	; 0x09
   10e36:	9a 85       	ldd	r25, Y+10	; 0x0a
   10e38:	2a 96       	adiw	r28, 0x0a	; 10
   10e3a:	0f b6       	in	r0, 0x3f	; 63
   10e3c:	f8 94       	cli
   10e3e:	de bf       	out	0x3e, r29	; 62
   10e40:	0f be       	out	0x3f, r0	; 63
   10e42:	cd bf       	out	0x3d, r28	; 61
   10e44:	df 91       	pop	r29
   10e46:	cf 91       	pop	r28
   10e48:	1f 91       	pop	r17
   10e4a:	ef 90       	pop	r14
   10e4c:	df 90       	pop	r13
   10e4e:	cf 90       	pop	r12
   10e50:	bf 90       	pop	r11
   10e52:	af 90       	pop	r10
   10e54:	8f 90       	pop	r8
   10e56:	7f 90       	pop	r7
   10e58:	6f 90       	pop	r6
   10e5a:	4f 90       	pop	r4
   10e5c:	3f 90       	pop	r3
   10e5e:	2f 90       	pop	r2
   10e60:	08 95       	ret

00010e62 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   10e62:	cf 93       	push	r28
   10e64:	df 93       	push	r29
   10e66:	ec 01       	movw	r28, r24
    if(fo == NULL)
   10e68:	89 2b       	or	r24, r25
   10e6a:	21 f4       	brne	.+8      	; 0x10e74 <gpib_decode_header+0x12>
        fo = stdout;
   10e6c:	c0 91 c4 1c 	lds	r28, 0x1CC4	; 0x801cc4 <__iob+0x2>
   10e70:	d0 91 c5 1c 	lds	r29, 0x1CC5	; 0x801cc5 <__iob+0x3>

    fprintf(fo,"===========================================\n");
   10e74:	be 01       	movw	r22, r28
   10e76:	81 e0       	ldi	r24, 0x01	; 1
   10e78:	9c e0       	ldi	r25, 0x0C	; 12
   10e7a:	0e 94 82 75 	call	0xeb04	; 0xeb04 <fputs>
    fprintf(fo,"GPIB bus state\n");
   10e7e:	be 01       	movw	r22, r28
   10e80:	8e e2       	ldi	r24, 0x2E	; 46
   10e82:	9c e0       	ldi	r25, 0x0C	; 12
   10e84:	0e 94 82 75 	call	0xeb04	; 0xeb04 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   10e88:	be 01       	movw	r22, r28
   10e8a:	8e e3       	ldi	r24, 0x3E	; 62
   10e8c:	9c e0       	ldi	r25, 0x0C	; 12
   10e8e:	0e 94 82 75 	call	0xeb04	; 0xeb04 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   10e92:	be 01       	movw	r22, r28
   10e94:	82 e5       	ldi	r24, 0x52	; 82
   10e96:	9c e0       	ldi	r25, 0x0C	; 12
   10e98:	0e 94 82 75 	call	0xeb04	; 0xeb04 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   10e9c:	be 01       	movw	r22, r28
   10e9e:	85 e7       	ldi	r24, 0x75	; 117
   10ea0:	9c e0       	ldi	r25, 0x0C	; 12
   10ea2:	0e 94 82 75 	call	0xeb04	; 0xeb04 <fputs>
    fprintf(fo,"     A = ATN\n");
   10ea6:	be 01       	movw	r22, r28
   10ea8:	8f e9       	ldi	r24, 0x9F	; 159
   10eaa:	9c e0       	ldi	r25, 0x0C	; 12
   10eac:	0e 94 82 75 	call	0xeb04	; 0xeb04 <fputs>
    fprintf(fo,"      E = EOI\n");
   10eb0:	be 01       	movw	r22, r28
   10eb2:	8d ea       	ldi	r24, 0xAD	; 173
   10eb4:	9c e0       	ldi	r25, 0x0C	; 12
   10eb6:	0e 94 82 75 	call	0xeb04	; 0xeb04 <fputs>
    fprintf(fo,"       S = SRQ\n");
   10eba:	be 01       	movw	r22, r28
   10ebc:	8c eb       	ldi	r24, 0xBC	; 188
   10ebe:	9c e0       	ldi	r25, 0x0C	; 12
   10ec0:	0e 94 82 75 	call	0xeb04	; 0xeb04 <fputs>
    fprintf(fo,"        R = REN\n");
   10ec4:	be 01       	movw	r22, r28
   10ec6:	8c ec       	ldi	r24, 0xCC	; 204
   10ec8:	9c e0       	ldi	r25, 0x0C	; 12
   10eca:	0e 94 82 75 	call	0xeb04	; 0xeb04 <fputs>
    fprintf(fo,"         I = IFC\n");
   10ece:	be 01       	movw	r22, r28
   10ed0:	8d ed       	ldi	r24, 0xDD	; 221
   10ed2:	9c e0       	ldi	r25, 0x0C	; 12
   10ed4:	0e 94 82 75 	call	0xeb04	; 0xeb04 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   10ed8:	be 01       	movw	r22, r28
   10eda:	8f ee       	ldi	r24, 0xEF	; 239
   10edc:	9c e0       	ldi	r25, 0x0C	; 12
   10ede:	0e 94 82 75 	call	0xeb04	; 0xeb04 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   10ee2:	be 01       	movw	r22, r28
   10ee4:	81 e1       	ldi	r24, 0x11	; 17
   10ee6:	9d e0       	ldi	r25, 0x0D	; 13
   10ee8:	0e 94 82 75 	call	0xeb04	; 0xeb04 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   10eec:	be 01       	movw	r22, r28
   10eee:	89 e2       	ldi	r24, 0x29	; 41
   10ef0:	9d e0       	ldi	r25, 0x0D	; 13
   10ef2:	0e 94 82 75 	call	0xeb04	; 0xeb04 <fputs>
    fprintf(fo,"              GPIB commands\n");
   10ef6:	be 01       	movw	r22, r28
   10ef8:	84 e4       	ldi	r24, 0x44	; 68
   10efa:	9d e0       	ldi	r25, 0x0D	; 13
   10efc:	0e 94 82 75 	call	0xeb04	; 0xeb04 <fputs>
}
   10f00:	df 91       	pop	r29
   10f02:	cf 91       	pop	r28
   10f04:	08 95       	ret

00010f06 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   10f06:	a9 e8       	ldi	r26, 0x89	; 137
   10f08:	b0 e0       	ldi	r27, 0x00	; 0
   10f0a:	e9 e8       	ldi	r30, 0x89	; 137
   10f0c:	f7 e8       	ldi	r31, 0x87	; 135
   10f0e:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__prologue_saves__+0xc>
   10f12:	8c 01       	movw	r16, r24
   10f14:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   10f16:	1a 86       	std	Y+10, r1	; 0x0a
   10f18:	4c 01       	movw	r8, r24
   10f1a:	88 24       	eor	r8, r8
   10f1c:	44 e0       	ldi	r20, 0x04	; 4
   10f1e:	94 22       	and	r9, r20
   10f20:	ce 01       	movw	r24, r28
   10f22:	0a 96       	adiw	r24, 0x0a	; 10
   10f24:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   10f26:	62 30       	cpi	r22, 0x02	; 2
   10f28:	71 05       	cpc	r23, r1
   10f2a:	e8 f4       	brcc	.+58     	; 0x10f66 <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10f2c:	81 14       	cp	r8, r1
   10f2e:	91 04       	cpc	r9, r1
   10f30:	29 f4       	brne	.+10     	; 0x10f3c <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   10f32:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10f34:	90 ee       	ldi	r25, 0xE0	; 224
   10f36:	90 0f       	add	r25, r16
   10f38:	9f 35       	cpi	r25, 0x5F	; 95
   10f3a:	08 f0       	brcs	.+2      	; 0x10f3e <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   10f3c:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   10f3e:	90 e0       	ldi	r25, 0x00	; 0
   10f40:	ed b7       	in	r30, 0x3d	; 61
   10f42:	fe b7       	in	r31, 0x3e	; 62
   10f44:	91 87       	std	Z+9, r25	; 0x09
   10f46:	80 87       	std	Z+8, r24	; 0x08
   10f48:	c8 01       	movw	r24, r16
   10f4a:	99 27       	eor	r25, r25
   10f4c:	97 83       	std	Z+7, r25	; 0x07
   10f4e:	86 83       	std	Z+6, r24	; 0x06
   10f50:	8a ee       	ldi	r24, 0xEA	; 234
   10f52:	9f e0       	ldi	r25, 0x0F	; 15
   10f54:	a0 e0       	ldi	r26, 0x00	; 0
   10f56:	83 83       	std	Z+3, r24	; 0x03
   10f58:	94 83       	std	Z+4, r25	; 0x04
   10f5a:	a5 83       	std	Z+5, r26	; 0x05
   10f5c:	f2 82       	std	Z+2, r15	; 0x02
   10f5e:	e1 82       	std	Z+1, r14	; 0x01
   10f60:	0e 94 fa 44 	call	0x89f4	; 0x89f4 <sprintf_P>
   10f64:	0c c0       	rjmp	.+24     	; 0x10f7e <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   10f66:	84 ee       	ldi	r24, 0xE4	; 228
   10f68:	9f e0       	ldi	r25, 0x0F	; 15
   10f6a:	a0 e0       	ldi	r26, 0x00	; 0
   10f6c:	ed b7       	in	r30, 0x3d	; 61
   10f6e:	fe b7       	in	r31, 0x3e	; 62
   10f70:	83 83       	std	Z+3, r24	; 0x03
   10f72:	94 83       	std	Z+4, r25	; 0x04
   10f74:	a5 83       	std	Z+5, r26	; 0x05
   10f76:	f2 82       	std	Z+2, r15	; 0x02
   10f78:	e1 82       	std	Z+1, r14	; 0x01
   10f7a:	0e 94 fa 44 	call	0x89f4	; 0x89f4 <sprintf_P>
    }

    tmp = str + strlen(str);
   10f7e:	f7 01       	movw	r30, r14
   10f80:	01 90       	ld	r0, Z+
   10f82:	00 20       	and	r0, r0
   10f84:	e9 f7       	brne	.-6      	; 0x10f80 <gpib_trace_display+0x7a>
   10f86:	31 97       	sbiw	r30, 0x01	; 1
   10f88:	cf 01       	movw	r24, r30
   10f8a:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   10f8c:	81 14       	cp	r8, r1
   10f8e:	91 04       	cpc	r9, r1
   10f90:	11 f0       	breq	.+4      	; 0x10f96 <gpib_trace_display+0x90>
        *tmp++ = 'A';
   10f92:	21 e4       	ldi	r18, 0x41	; 65
   10f94:	01 c0       	rjmp	.+2      	; 0x10f98 <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   10f96:	2d e2       	ldi	r18, 0x2D	; 45
   10f98:	20 83       	st	Z, r18
   10f9a:	dc 01       	movw	r26, r24
   10f9c:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   10f9e:	10 ff       	sbrs	r17, 0
   10fa0:	02 c0       	rjmp	.+4      	; 0x10fa6 <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   10fa2:	25 e4       	ldi	r18, 0x45	; 69
   10fa4:	01 c0       	rjmp	.+2      	; 0x10fa8 <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   10fa6:	2d e2       	ldi	r18, 0x2D	; 45
   10fa8:	fc 01       	movw	r30, r24
   10faa:	20 83       	st	Z, r18
   10fac:	fd 01       	movw	r30, r26
   10fae:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   10fb0:	11 ff       	sbrs	r17, 1
   10fb2:	02 c0       	rjmp	.+4      	; 0x10fb8 <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   10fb4:	83 e5       	ldi	r24, 0x53	; 83
   10fb6:	01 c0       	rjmp	.+2      	; 0x10fba <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   10fb8:	8d e2       	ldi	r24, 0x2D	; 45
   10fba:	8c 93       	st	X, r24
   10fbc:	df 01       	movw	r26, r30
   10fbe:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   10fc0:	13 ff       	sbrs	r17, 3
   10fc2:	02 c0       	rjmp	.+4      	; 0x10fc8 <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   10fc4:	82 e5       	ldi	r24, 0x52	; 82
   10fc6:	01 c0       	rjmp	.+2      	; 0x10fca <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   10fc8:	8d e2       	ldi	r24, 0x2D	; 45
   10fca:	80 83       	st	Z, r24
   10fcc:	fd 01       	movw	r30, r26
   10fce:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   10fd0:	14 ff       	sbrs	r17, 4
   10fd2:	02 c0       	rjmp	.+4      	; 0x10fd8 <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   10fd4:	89 e4       	ldi	r24, 0x49	; 73
   10fd6:	01 c0       	rjmp	.+2      	; 0x10fda <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   10fd8:	8d e2       	ldi	r24, 0x2D	; 45
   10fda:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   10fdc:	a1 14       	cp	r10, r1
   10fde:	b1 04       	cpc	r11, r1
   10fe0:	d1 f4       	brne	.+52     	; 0x11016 <gpib_trace_display+0x110>
   10fe2:	df 01       	movw	r26, r30
   10fe4:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   10fe6:	15 ff       	sbrs	r17, 5
   10fe8:	02 c0       	rjmp	.+4      	; 0x10fee <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   10fea:	80 e5       	ldi	r24, 0x50	; 80
   10fec:	01 c0       	rjmp	.+2      	; 0x10ff0 <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   10fee:	8d e2       	ldi	r24, 0x2D	; 45
   10ff0:	80 83       	st	Z, r24
   10ff2:	fd 01       	movw	r30, r26
   10ff4:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   10ff6:	16 ff       	sbrs	r17, 6
   10ff8:	02 c0       	rjmp	.+4      	; 0x10ffe <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   10ffa:	84 e5       	ldi	r24, 0x54	; 84
   10ffc:	01 c0       	rjmp	.+2      	; 0x11000 <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   10ffe:	8d e2       	ldi	r24, 0x2D	; 45
   11000:	8c 93       	st	X, r24
   11002:	cf 01       	movw	r24, r30
   11004:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   11006:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   11008:	17 ff       	sbrs	r17, 7
   1100a:	02 c0       	rjmp	.+4      	; 0x11010 <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   1100c:	82 e4       	ldi	r24, 0x42	; 66
   1100e:	01 c0       	rjmp	.+2      	; 0x11012 <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   11010:	8d e2       	ldi	r24, 0x2D	; 45
   11012:	80 83       	st	Z, r24
   11014:	08 c0       	rjmp	.+16     	; 0x11026 <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   11016:	8d e2       	ldi	r24, 0x2D	; 45
   11018:	80 83       	st	Z, r24
        *tmp++ = '-';
   1101a:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   1101c:	6f 01       	movw	r12, r30
   1101e:	43 e0       	ldi	r20, 0x03	; 3
   11020:	c4 0e       	add	r12, r20
   11022:	d1 1c       	adc	r13, r1
   11024:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   11026:	f6 01       	movw	r30, r12
   11028:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   1102a:	f1 e0       	ldi	r31, 0x01	; 1
   1102c:	af 1a       	sub	r10, r31
   1102e:	b1 08       	sbc	r11, r1
   11030:	42 e0       	ldi	r20, 0x02	; 2
   11032:	a4 16       	cp	r10, r20
   11034:	b1 04       	cpc	r11, r1
   11036:	f0 f4       	brcc	.+60     	; 0x11074 <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   11038:	15 ff       	sbrs	r17, 5
   1103a:	03 c0       	rjmp	.+6      	; 0x11042 <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   1103c:	61 e6       	ldi	r22, 0x61	; 97
   1103e:	7d e0       	ldi	r23, 0x0D	; 13
   11040:	02 c0       	rjmp	.+4      	; 0x11046 <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   11042:	65 e6       	ldi	r22, 0x65	; 101
   11044:	74 e0       	ldi	r23, 0x04	; 4
   11046:	c7 01       	movw	r24, r14
   11048:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <strcat>
        if(status & NRFD_FLAG)
   1104c:	16 ff       	sbrs	r17, 6
   1104e:	03 c0       	rjmp	.+6      	; 0x11056 <gpib_trace_display+0x150>
            strcat(str," NRFD");
   11050:	67 e6       	ldi	r22, 0x67	; 103
   11052:	7d e0       	ldi	r23, 0x0D	; 13
   11054:	02 c0       	rjmp	.+4      	; 0x1105a <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   11056:	65 e6       	ldi	r22, 0x65	; 101
   11058:	74 e0       	ldi	r23, 0x04	; 4
   1105a:	c7 01       	movw	r24, r14
   1105c:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <strcat>
        if(status & NDAC_FLAG)
   11060:	17 ff       	sbrs	r17, 7
   11062:	03 c0       	rjmp	.+6      	; 0x1106a <gpib_trace_display+0x164>
            strcat(str," NDAC");
   11064:	6d e6       	ldi	r22, 0x6D	; 109
   11066:	7d e0       	ldi	r23, 0x0D	; 13
   11068:	02 c0       	rjmp	.+4      	; 0x1106e <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   1106a:	65 e6       	ldi	r22, 0x65	; 101
   1106c:	74 e0       	ldi	r23, 0x04	; 4
   1106e:	c7 01       	movw	r24, r14
   11070:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <strcat>
    }

    if( (status & ATN_FLAG) )
   11074:	81 14       	cp	r8, r1
   11076:	91 04       	cpc	r9, r1
   11078:	09 f4       	brne	.+2      	; 0x1107c <gpib_trace_display+0x176>
   1107a:	5a c0       	rjmp	.+180    	; 0x11130 <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   1107c:	c8 01       	movw	r24, r16
   1107e:	8f 77       	andi	r24, 0x7F	; 127
   11080:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   11082:	9c 01       	movw	r18, r24
   11084:	20 52       	subi	r18, 0x20	; 32
   11086:	31 09       	sbc	r19, r1
   11088:	2f 31       	cpi	r18, 0x1F	; 31
   1108a:	31 05       	cpc	r19, r1
   1108c:	48 f4       	brcc	.+18     	; 0x110a0 <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   1108e:	0f 71       	andi	r16, 0x1F	; 31
   11090:	11 27       	eor	r17, r17
   11092:	ed b7       	in	r30, 0x3d	; 61
   11094:	fe b7       	in	r31, 0x3e	; 62
   11096:	17 83       	std	Z+7, r17	; 0x07
   11098:	06 83       	std	Z+6, r16	; 0x06
   1109a:	89 ed       	ldi	r24, 0xD9	; 217
   1109c:	9f e0       	ldi	r25, 0x0F	; 15
   1109e:	0e c0       	rjmp	.+28     	; 0x110bc <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   110a0:	9c 01       	movw	r18, r24
   110a2:	20 54       	subi	r18, 0x40	; 64
   110a4:	31 09       	sbc	r19, r1
   110a6:	2f 30       	cpi	r18, 0x0F	; 15
   110a8:	31 05       	cpc	r19, r1
   110aa:	88 f4       	brcc	.+34     	; 0x110ce <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   110ac:	0f 71       	andi	r16, 0x1F	; 31
   110ae:	11 27       	eor	r17, r17
   110b0:	ed b7       	in	r30, 0x3d	; 61
   110b2:	fe b7       	in	r31, 0x3e	; 62
   110b4:	17 83       	std	Z+7, r17	; 0x07
   110b6:	06 83       	std	Z+6, r16	; 0x06
   110b8:	8e ec       	ldi	r24, 0xCE	; 206
   110ba:	9f e0       	ldi	r25, 0x0F	; 15
   110bc:	a0 e0       	ldi	r26, 0x00	; 0
   110be:	83 83       	std	Z+3, r24	; 0x03
   110c0:	94 83       	std	Z+4, r25	; 0x04
   110c2:	a5 83       	std	Z+5, r26	; 0x05
   110c4:	d2 82       	std	Z+2, r13	; 0x02
   110c6:	c1 82       	std	Z+1, r12	; 0x01
   110c8:	0e 94 fa 44 	call	0x89f4	; 0x89f4 <sprintf_P>
   110cc:	31 c0       	rjmp	.+98     	; 0x11130 <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   110ce:	9c 01       	movw	r18, r24
   110d0:	20 56       	subi	r18, 0x60	; 96
   110d2:	31 09       	sbc	r19, r1
   110d4:	20 31       	cpi	r18, 0x10	; 16
   110d6:	31 05       	cpc	r19, r1
   110d8:	28 f0       	brcs	.+10     	; 0x110e4 <gpib_trace_display+0x1de>
   110da:	e2 e8       	ldi	r30, 0x82	; 130
   110dc:	f1 e0       	ldi	r31, 0x01	; 1
   110de:	00 e0       	ldi	r16, 0x00	; 0
   110e0:	10 e0       	ldi	r17, 0x00	; 0
   110e2:	0b c0       	rjmp	.+22     	; 0x110fa <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   110e4:	0f 71       	andi	r16, 0x1F	; 31
   110e6:	11 27       	eor	r17, r17
   110e8:	ed b7       	in	r30, 0x3d	; 61
   110ea:	fe b7       	in	r31, 0x3e	; 62
   110ec:	17 83       	std	Z+7, r17	; 0x07
   110ee:	06 83       	std	Z+6, r16	; 0x06
   110f0:	83 ec       	ldi	r24, 0xC3	; 195
   110f2:	9f e0       	ldi	r25, 0x0F	; 15
   110f4:	e3 cf       	rjmp	.-58     	; 0x110bc <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   110f6:	0f 5f       	subi	r16, 0xFF	; 255
   110f8:	1f 4f       	sbci	r17, 0xFF	; 255
   110fa:	20 81       	ld	r18, Z
   110fc:	31 81       	ldd	r19, Z+1	; 0x01
   110fe:	2f 3f       	cpi	r18, 0xFF	; 255
   11100:	4f ef       	ldi	r20, 0xFF	; 255
   11102:	34 07       	cpc	r19, r20
   11104:	a9 f0       	breq	.+42     	; 0x11130 <gpib_trace_display+0x22a>
   11106:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   11108:	82 17       	cp	r24, r18
   1110a:	93 07       	cpc	r25, r19
   1110c:	a1 f7       	brne	.-24     	; 0x110f6 <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   1110e:	69 e6       	ldi	r22, 0x69	; 105
   11110:	74 e0       	ldi	r23, 0x04	; 4
   11112:	c6 01       	movw	r24, r12
   11114:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   11118:	f8 01       	movw	r30, r16
   1111a:	ee 0f       	add	r30, r30
   1111c:	ff 1f       	adc	r31, r31
   1111e:	ee 0f       	add	r30, r30
   11120:	ff 1f       	adc	r31, r31
   11122:	ee 57       	subi	r30, 0x7E	; 126
   11124:	fe 4f       	sbci	r31, 0xFE	; 254
   11126:	62 81       	ldd	r22, Z+2	; 0x02
   11128:	73 81       	ldd	r23, Z+3	; 0x03
   1112a:	c6 01       	movw	r24, r12
   1112c:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   11130:	20 91 63 19 	lds	r18, 0x1963	; 0x801963 <gpib_log_fp>
   11134:	30 91 64 19 	lds	r19, 0x1964	; 0x801964 <gpib_log_fp+0x1>
   11138:	80 91 c4 1c 	lds	r24, 0x1CC4	; 0x801cc4 <__iob+0x2>
   1113c:	90 91 c5 1c 	lds	r25, 0x1CC5	; 0x801cc5 <__iob+0x3>
   11140:	23 2b       	or	r18, r19
   11142:	21 f4       	brne	.+8      	; 0x1114c <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   11144:	90 93 64 19 	sts	0x1964, r25	; 0x801964 <gpib_log_fp+0x1>
   11148:	80 93 63 19 	sts	0x1963, r24	; 0x801963 <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   1114c:	20 91 63 19 	lds	r18, 0x1963	; 0x801963 <gpib_log_fp>
   11150:	30 91 64 19 	lds	r19, 0x1964	; 0x801964 <gpib_log_fp+0x1>
   11154:	82 17       	cp	r24, r18
   11156:	93 07       	cpc	r25, r19
   11158:	19 f0       	breq	.+6      	; 0x11160 <gpib_trace_display+0x25a>
        puts(str);
   1115a:	c7 01       	movw	r24, r14
   1115c:	0e 94 9a 75 	call	0xeb34	; 0xeb34 <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   11160:	ed b7       	in	r30, 0x3d	; 61
   11162:	fe b7       	in	r31, 0x3e	; 62
   11164:	f6 82       	std	Z+6, r15	; 0x06
   11166:	e5 82       	std	Z+5, r14	; 0x05
   11168:	83 e7       	ldi	r24, 0x73	; 115
   1116a:	9d e0       	ldi	r25, 0x0D	; 13
   1116c:	94 83       	std	Z+4, r25	; 0x04
   1116e:	83 83       	std	Z+3, r24	; 0x03
   11170:	80 91 63 19 	lds	r24, 0x1963	; 0x801963 <gpib_log_fp>
   11174:	90 91 64 19 	lds	r25, 0x1964	; 0x801964 <gpib_log_fp+0x1>
   11178:	92 83       	std	Z+2, r25	; 0x02
   1117a:	81 83       	std	Z+1, r24	; 0x01
   1117c:	0e 94 42 7d 	call	0xfa84	; 0xfa84 <fprintf>
}
   11180:	c7 57       	subi	r28, 0x77	; 119
   11182:	df 4f       	sbci	r29, 0xFF	; 255
   11184:	ec e0       	ldi	r30, 0x0C	; 12
   11186:	0c 94 7e e3 	jmp	0x1c6fc	; 0x1c6fc <__epilogue_restores__+0xc>

0001118a <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   1118a:	af 92       	push	r10
   1118c:	bf 92       	push	r11
   1118e:	cf 92       	push	r12
   11190:	df 92       	push	r13
   11192:	ef 92       	push	r14
   11194:	ff 92       	push	r15
   11196:	0f 93       	push	r16
   11198:	1f 93       	push	r17
   1119a:	cf 93       	push	r28
   1119c:	00 d0       	rcall	.+0      	; 0x1119e <gpib_read_byte+0x14>
   1119e:	00 d0       	rcall	.+0      	; 0x111a0 <gpib_read_byte+0x16>
   111a0:	1f 92       	push	r1

    ch = 0;
    control_last = 0;

	// Return unread - last read - data and control lines
    if(gpib_unread_f)
   111a2:	20 91 62 19 	lds	r18, 0x1962	; 0x801962 <gpib_unread_f>
   111a6:	22 23       	and	r18, r18
   111a8:	39 f0       	breq	.+14     	; 0x111b8 <gpib_read_byte+0x2e>
    {
		// FYI any unread data has been traced
        gpib_unread_f = 0;
   111aa:	10 92 62 19 	sts	0x1962, r1	; 0x801962 <gpib_unread_f>
        return(gpib_unread_data);
   111ae:	80 91 f5 1e 	lds	r24, 0x1EF5	; 0x801ef5 <gpib_unread_data>
   111b2:	90 91 f6 1e 	lds	r25, 0x1EF6	; 0x801ef6 <gpib_unread_data+0x1>
   111b6:	f2 c0       	rjmp	.+484    	; 0x1139c <gpib_read_byte+0x212>
   111b8:	6c 01       	movw	r12, r24
	// We start and end gpib_read_byte() with NRFD and NDAC LOW 
	// When ATN goes LOW all devices must pull NRFD and NDAC lines LOW
	// within 200 nanoseconds to permit three-wire handshake 
	// ATN requirements are met because we are always reading in command mode
	// ATN = 0 = COmmand Mode
    gpib_rx_init(1);
   111ba:	81 e0       	ldi	r24, 0x01	; 1
   111bc:	f8 db       	rcall	.-2064   	; 0x109ae <gpib_rx_init>
	// GPIB_IO_LOW(TE);			// BUS IN
	// BUS IN, DAV IN, NDAC OUT , NRFD OUT 
	// ATN IN, EOI IN, SRQ OUT OC

	///@brief V2 boards can NOT read ALL bits on the control bus at once
    if(trace)
   111be:	c1 14       	cp	r12, r1
   111c0:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   111c2:	51 f0       	breq	.+20     	; 0x111d8 <gpib_read_byte+0x4e>
   111c4:	ed dc       	rcall	.-1574   	; 0x10ba0 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   111c6:	7c 01       	movw	r14, r24
   111c8:	fb dc       	rcall	.-1546   	; 0x10bc0 <gpib_handshake_pin_read>
   111ca:	e8 2a       	or	r14, r24
   111cc:	f9 2a       	or	r15, r25
        gpib_trace_display(control_last, TRACE_BUS);
   111ce:	62 e0       	ldi	r22, 0x02	; 2
   111d0:	70 e0       	ldi	r23, 0x00	; 0
   111d2:	c7 01       	movw	r24, r14
   111d4:	98 de       	rcall	.-720    	; 0x10f06 <gpib_trace_display>
   111d6:	02 c0       	rjmp	.+4      	; 0x111dc <gpib_read_byte+0x52>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   111d8:	e1 2c       	mov	r14, r1
   111da:	f1 2c       	mov	r15, r1
        control_last = gpib_control_pin_read();
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
   111dc:	64 ef       	ldi	r22, 0xF4	; 244
   111de:	71 e0       	ldi	r23, 0x01	; 1
   111e0:	80 e0       	ldi	r24, 0x00	; 0
   111e2:	90 e0       	ldi	r25, 0x00	; 0
   111e4:	a2 db       	rcall	.-2236   	; 0x1092a <gpib_timeout_set>
    uint16_t ch;
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
   111e6:	00 e0       	ldi	r16, 0x00	; 0
   111e8:	10 e0       	ldi	r17, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
   111ea:	c0 e0       	ldi	r28, 0x00	; 0
    while(rx_state != GPIB_RX_DONE)
    {

        // User task that is called while waiting for commands
        gpib_user_task();
   111ec:	0e 94 3e df 	call	0x1be7c	; 0x1be7c <gpib_user_task>

        if(uart_keyhit(0))
   111f0:	80 e0       	ldi	r24, 0x00	; 0
   111f2:	0e 94 73 28 	call	0x50e6	; 0x50e6 <uart_keyhit>
   111f6:	89 2b       	or	r24, r25
   111f8:	99 f0       	breq	.+38     	; 0x11220 <gpib_read_byte+0x96>
		{
			if(debuglevel & GPIB_ERR)
   111fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   111fe:	80 ff       	sbrs	r24, 0
   11200:	ab c0       	rjmp	.+342    	; 0x11358 <gpib_read_byte+0x1ce>
				printf("gpib_read_byte: state=%d\n", rx_state);
   11202:	8c 2f       	mov	r24, r28
   11204:	90 e0       	ldi	r25, 0x00	; 0
   11206:	ed b7       	in	r30, 0x3d	; 61
   11208:	fe b7       	in	r31, 0x3e	; 62
   1120a:	95 83       	std	Z+5, r25	; 0x05
   1120c:	84 83       	std	Z+4, r24	; 0x04
   1120e:	81 e1       	ldi	r24, 0x11	; 17
   11210:	90 e1       	ldi	r25, 0x10	; 16
   11212:	a0 e0       	ldi	r26, 0x00	; 0
   11214:	81 83       	std	Z+1, r24	; 0x01
   11216:	92 83       	std	Z+2, r25	; 0x02
   11218:	a3 83       	std	Z+3, r26	; 0x03
   1121a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1121e:	9c c0       	rjmp	.+312    	; 0x11358 <gpib_read_byte+0x1ce>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is alwayon IN always in device mode
        if(GPIB_PIN_TST(IFC) == 0)
   11220:	4c 99       	sbic	0x09, 4	; 9
   11222:	15 c0       	rjmp	.+42     	; 0x1124e <gpib_read_byte+0xc4>
        {
            ch |= IFC_FLAG;
   11224:	10 61       	ori	r17, 0x10	; 16
			if(debuglevel & GPIB_ERR)
   11226:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1122a:	80 ff       	sbrs	r24, 0
   1122c:	0e c0       	rjmp	.+28     	; 0x1124a <gpib_read_byte+0xc0>
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   1122e:	8c 2f       	mov	r24, r28
   11230:	90 e0       	ldi	r25, 0x00	; 0
   11232:	ed b7       	in	r30, 0x3d	; 61
   11234:	fe b7       	in	r31, 0x3e	; 62
   11236:	95 83       	std	Z+5, r25	; 0x05
   11238:	84 83       	std	Z+4, r24	; 0x04
   1123a:	83 ef       	ldi	r24, 0xF3	; 243
   1123c:	9f e0       	ldi	r25, 0x0F	; 15
   1123e:	a0 e0       	ldi	r26, 0x00	; 0
   11240:	81 83       	std	Z+1, r24	; 0x01
   11242:	92 83       	std	Z+2, r25	; 0x02
   11244:	a3 83       	std	Z+3, r26	; 0x03
   11246:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            gpib_bus_init();
   1124a:	79 db       	rcall	.-2318   	; 0x1093e <gpib_bus_init>
   1124c:	85 c0       	rjmp	.+266    	; 0x11358 <gpib_read_byte+0x1ce>
            break;
        }

        switch(rx_state)
   1124e:	c2 30       	cpi	r28, 0x02	; 2
   11250:	31 f1       	breq	.+76     	; 0x1129e <gpib_read_byte+0x114>
   11252:	28 f4       	brcc	.+10     	; 0x1125e <gpib_read_byte+0xd4>
   11254:	cc 23       	and	r28, r28
   11256:	69 f0       	breq	.+26     	; 0x11272 <gpib_read_byte+0xe8>
   11258:	c1 30       	cpi	r28, 0x01	; 1
   1125a:	c9 f0       	breq	.+50     	; 0x1128e <gpib_read_byte+0x104>
   1125c:	63 c0       	rjmp	.+198    	; 0x11324 <gpib_read_byte+0x19a>
   1125e:	c5 30       	cpi	r28, 0x05	; 5
   11260:	09 f4       	brne	.+2      	; 0x11264 <gpib_read_byte+0xda>
   11262:	54 c0       	rjmp	.+168    	; 0x1130c <gpib_read_byte+0x182>
   11264:	c7 30       	cpi	r28, 0x07	; 7
   11266:	09 f4       	brne	.+2      	; 0x1126a <gpib_read_byte+0xe0>
   11268:	58 c0       	rjmp	.+176    	; 0x1131a <gpib_read_byte+0x190>
   1126a:	c4 30       	cpi	r28, 0x04	; 4
   1126c:	09 f0       	breq	.+2      	; 0x11270 <gpib_read_byte+0xe6>
   1126e:	5a c0       	rjmp	.+180    	; 0x11324 <gpib_read_byte+0x19a>
   11270:	3e c0       	rjmp	.+124    	; 0x112ee <gpib_read_byte+0x164>
        {

			///@brief DAV must be high
            case GPIB_RX_START:
				//DEBUG
				if (GPIB_PIN_TST(DAV) == 1)
   11272:	19 9b       	sbis	0x03, 1	; 3
   11274:	43 c0       	rjmp	.+134    	; 0x112fc <gpib_read_byte+0x172>
   11276:	fd e0       	ldi	r31, 0x0D	; 13
   11278:	fa 95       	dec	r31
   1127a:	f1 f7       	brne	.-4      	; 0x11278 <gpib_read_byte+0xee>
   1127c:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					GPIB_PIN_FLOAT_UP(NRFD);
   1127e:	52 98       	cbi	0x0a, 2	; 10
   11280:	5a 9a       	sbi	0x0b, 2	; 11
   11282:	8d e0       	ldi	r24, 0x0D	; 13
   11284:	8a 95       	dec	r24
   11286:	f1 f7       	brne	.-4      	; 0x11284 <gpib_read_byte+0xfa>
   11288:	00 00       	nop
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   1128a:	c1 e0       	ldi	r28, 0x01	; 1
   1128c:	37 c0       	rjmp	.+110    	; 0x112fc <gpib_read_byte+0x172>
                }
                break;

			// Wait for Data Avalable without timeout
            case GPIB_RX_WAIT_FOR_DAV_LOW:
                if ( GPIB_PIN_TST(DAV) == 0 )
   1128e:	19 99       	sbic	0x03, 1	; 3
   11290:	80 c0       	rjmp	.+256    	; 0x11392 <gpib_read_byte+0x208>
   11292:	ed e0       	ldi	r30, 0x0D	; 13
   11294:	ea 95       	dec	r30
   11296:	f1 f7       	brne	.-4      	; 0x11294 <gpib_read_byte+0x10a>
   11298:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                
                    rx_state = GPIB_RX_DAV_IS_LOW;
   1129a:	c2 e0       	ldi	r28, 0x02	; 2
   1129c:	7a c0       	rjmp	.+244    	; 0x11392 <gpib_read_byte+0x208>
				}
                break;

			// Data is Avaliable
            case GPIB_RX_DAV_IS_LOW:
				GPIB_IO_LOW(NRFD); // BUSY
   1129e:	5a 98       	cbi	0x0b, 2	; 11
   112a0:	52 9a       	sbi	0x0a, 2	; 10
   112a2:	fd e0       	ldi	r31, 0x0D	; 13
   112a4:	fa 95       	dec	r31
				GPIB_BUS_SETTLE();                

				// Read DATA and Control lines
				// gpib_bus_read() strips parity if ATN is low command state

                bus = gpib_bus_read();
   112a6:	f1 f7       	brne	.-4      	; 0x112a4 <gpib_read_byte+0x11a>
   112a8:	00 00       	nop
   112aa:	74 dc       	rcall	.-1816   	; 0x10b94 <gpib_bus_read>
   112ac:	a8 2e       	mov	r10, r24
                ch |= bus;

				///@brief V2 boards can NOT read all control bits at once
				///@brief NRFD,NDAC and SRQ are cirrently outputs

                control_last = gpib_control_pin_read();
   112ae:	b1 2c       	mov	r11, r1
   112b0:	77 dc       	rcall	.-1810   	; 0x10ba0 <gpib_control_pin_read>
   112b2:	7c 01       	movw	r14, r24
   112b4:	08 2b       	or	r16, r24
                ch |= control_last;
   112b6:	19 2b       	or	r17, r25
   112b8:	0a 29       	or	r16, r10

				// In theory the control_last should not have changed
				// from the initial values. ONly the Data BUS
                if(trace)
   112ba:	1b 29       	or	r17, r11
   112bc:	c1 14       	cp	r12, r1
   112be:	d1 04       	cpc	r13, r1
                {
                    control_last |= gpib_handshake_pin_read();
   112c0:	49 f0       	breq	.+18     	; 0x112d4 <gpib_read_byte+0x14a>
   112c2:	7e dc       	rcall	.-1796   	; 0x10bc0 <gpib_handshake_pin_read>
   112c4:	e8 2a       	or	r14, r24
                    gpib_trace_display(bus | control_last, TRACE_READ);
   112c6:	f9 2a       	or	r15, r25
   112c8:	61 e0       	ldi	r22, 0x01	; 1
   112ca:	70 e0       	ldi	r23, 0x00	; 0
   112cc:	c5 01       	movw	r24, r10
   112ce:	8e 29       	or	r24, r14
   112d0:	9f 29       	or	r25, r15
   112d2:	19 de       	rcall	.-974    	; 0x10f06 <gpib_trace_display>
                }

				// Release NDAC to say we read the byte
                GPIB_PIN_FLOAT_UP(NDAC);
   112d4:	53 98       	cbi	0x0a, 3	; 10
   112d6:	5b 9a       	sbi	0x0b, 3	; 11
   112d8:	8d e0       	ldi	r24, 0x0D	; 13
   112da:	8a 95       	dec	r24
   112dc:	f1 f7       	brne	.-4      	; 0x112da <gpib_read_byte+0x150>
                GPIB_BUS_SETTLE();                // NDAC bus settle time
                gpib_timeout_set(HTIMEOUT);
   112de:	00 00       	nop
   112e0:	64 ef       	ldi	r22, 0xF4	; 244
   112e2:	71 e0       	ldi	r23, 0x01	; 1
   112e4:	80 e0       	ldi	r24, 0x00	; 0
   112e6:	90 e0       	ldi	r25, 0x00	; 0
   112e8:	20 db       	rcall	.-2496   	; 0x1092a <gpib_timeout_set>
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   112ea:	c4 e0       	ldi	r28, 0x04	; 4
   112ec:	52 c0       	rjmp	.+164    	; 0x11392 <gpib_read_byte+0x208>
                break;

			///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   112ee:	19 9b       	sbis	0x03, 1	; 3
   112f0:	05 c0       	rjmp	.+10     	; 0x112fc <gpib_read_byte+0x172>
   112f2:	ed e0       	ldi	r30, 0x0D	; 13
   112f4:	ea 95       	dec	r30
   112f6:	f1 f7       	brne	.-4      	; 0x112f4 <gpib_read_byte+0x16a>
   112f8:	00 00       	nop
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
   112fa:	c5 e0       	ldi	r28, 0x05	; 5
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   112fc:	80 91 ea 1c 	lds	r24, 0x1CEA	; 0x801cea <gpib_timer+0x8>
                if (GPIB_PIN_TST(DAV) == 1)
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   11300:	88 23       	and	r24, r24
   11302:	09 f4       	brne	.+2      	; 0x11306 <gpib_read_byte+0x17c>
   11304:	46 c0       	rjmp	.+140    	; 0x11392 <gpib_read_byte+0x208>
                {
                    ch |= TIMEOUT_FLAG;
   11306:	10 64       	ori	r17, 0x40	; 64
                    rx_state = GPIB_RX_ERROR;
   11308:	c7 e0       	ldi	r28, 0x07	; 7
   1130a:	43 c0       	rjmp	.+134    	; 0x11392 <gpib_read_byte+0x208>
                }
                break;

			///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
				GPIB_IO_LOW(NDAC);
   1130c:	5b 98       	cbi	0x0b, 3	; 11
   1130e:	53 9a       	sbi	0x0a, 3	; 10
   11310:	fd e0       	ldi	r31, 0x0D	; 13
   11312:	fa 95       	dec	r31
   11314:	f1 f7       	brne	.-4      	; 0x11312 <gpib_read_byte+0x188>
   11316:	00 00       	nop
   11318:	09 c0       	rjmp	.+18     	; 0x1132c <gpib_read_byte+0x1a2>
				// Now BOTH NDAC and NRFD are LOW
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_ERROR:
				GPIB_IO_LOW(NRFD);
   1131a:	5a 98       	cbi	0x0b, 2	; 11
   1131c:	52 9a       	sbi	0x0a, 2	; 10
				GPIB_IO_LOW(NDAC);
   1131e:	5b 98       	cbi	0x0b, 3	; 11
   11320:	53 9a       	sbi	0x0a, 3	; 10

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11322:	04 c0       	rjmp	.+8      	; 0x1132c <gpib_read_byte+0x1a2>
   11324:	c1 14       	cp	r12, r1
   11326:	d1 04       	cpc	r13, r1
   11328:	91 f0       	breq	.+36     	; 0x1134e <gpib_read_byte+0x1c4>
   1132a:	04 c0       	rjmp	.+8      	; 0x11334 <gpib_read_byte+0x1aa>
   1132c:	c1 14       	cp	r12, r1
   1132e:	d1 04       	cpc	r13, r1
   11330:	99 f0       	breq	.+38     	; 0x11358 <gpib_read_byte+0x1ce>
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   11332:	c8 e0       	ldi	r28, 0x08	; 8
   11334:	35 dc       	rcall	.-1942   	; 0x10ba0 <gpib_control_pin_read>
            control |= gpib_handshake_pin_read();
   11336:	5c 01       	movw	r10, r24
   11338:	43 dc       	rcall	.-1914   	; 0x10bc0 <gpib_handshake_pin_read>
   1133a:	a8 2a       	or	r10, r24
   1133c:	b9 2a       	or	r11, r25
            if(control_last != control)
   1133e:	ae 14       	cp	r10, r14
   11340:	bf 04       	cpc	r11, r15
   11342:	31 f0       	breq	.+12     	; 0x11350 <gpib_read_byte+0x1c6>
            {
                gpib_trace_display(control, TRACE_BUS);
   11344:	62 e0       	ldi	r22, 0x02	; 2
   11346:	70 e0       	ldi	r23, 0x00	; 0
   11348:	c5 01       	movw	r24, r10
   1134a:	dd dd       	rcall	.-1094   	; 0x10f06 <gpib_trace_display>
   1134c:	01 c0       	rjmp	.+2      	; 0x11350 <gpib_read_byte+0x1c6>
   1134e:	57 01       	movw	r10, r14

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11350:	c8 30       	cpi	r28, 0x08	; 8
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   11352:	11 f0       	breq	.+4      	; 0x11358 <gpib_read_byte+0x1ce>
   11354:	75 01       	movw	r14, r10
   11356:	4a cf       	rjmp	.-364    	; 0x111ec <gpib_read_byte+0x62>
   11358:	80 91 ef 1e 	lds	r24, 0x1EEF	; 0x801eef <current>
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   1135c:	90 91 f0 1e 	lds	r25, 0x1EF0	; 0x801ef0 <current+0x1>
   11360:	90 93 ec 1c 	sts	0x1CEC, r25	; 0x801cec <lastcmd+0x1>
   11364:	80 93 eb 1c 	sts	0x1CEB, r24	; 0x801ceb <lastcmd>
   11368:	c8 01       	movw	r24, r16

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   1136a:	88 27       	eor	r24, r24
   1136c:	90 7d       	andi	r25, 0xD0	; 208
   1136e:	89 2b       	or	r24, r25
   11370:	11 f4       	brne	.+4      	; 0x11376 <gpib_read_byte+0x1ec>
   11372:	12 fd       	sbrc	r17, 2
   11374:	05 c0       	rjmp	.+10     	; 0x11380 <gpib_read_byte+0x1f6>
   11376:	10 92 f0 1e 	sts	0x1EF0, r1	; 0x801ef0 <current+0x1>
        current = 0;
   1137a:	10 92 ef 1e 	sts	0x1EEF, r1	; 0x801eef <current>
   1137e:	07 c0       	rjmp	.+14     	; 0x1138e <gpib_read_byte+0x204>
   11380:	c8 01       	movw	r24, r16
    else
        current = ch & CMD_MASK;
   11382:	8f 77       	andi	r24, 0x7F	; 127
   11384:	99 27       	eor	r25, r25
   11386:	90 93 f0 1e 	sts	0x1EF0, r25	; 0x801ef0 <current+0x1>
   1138a:	80 93 ef 1e 	sts	0x1EEF, r24	; 0x801eef <current>
   1138e:	c8 01       	movw	r24, r16
   11390:	05 c0       	rjmp	.+10     	; 0x1139c <gpib_read_byte+0x212>
   11392:	c1 14       	cp	r12, r1

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11394:	d1 04       	cpc	r13, r1
   11396:	09 f4       	brne	.+2      	; 0x1139a <gpib_read_byte+0x210>
   11398:	29 cf       	rjmp	.-430    	; 0x111ec <gpib_read_byte+0x62>
   1139a:	cc cf       	rjmp	.-104    	; 0x11334 <gpib_read_byte+0x1aa>
   1139c:	0f 90       	pop	r0
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   1139e:	0f 90       	pop	r0
   113a0:	0f 90       	pop	r0
   113a2:	0f 90       	pop	r0
   113a4:	0f 90       	pop	r0
   113a6:	cf 91       	pop	r28
   113a8:	1f 91       	pop	r17
   113aa:	0f 91       	pop	r16
   113ac:	ff 90       	pop	r15
   113ae:	ef 90       	pop	r14
   113b0:	df 90       	pop	r13
   113b2:	cf 90       	pop	r12
   113b4:	bf 90       	pop	r11
   113b6:	af 90       	pop	r10
   113b8:	08 95       	ret

000113ba <gpib_decode>:
   113ba:	60 e0       	ldi	r22, 0x00	; 0
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   113bc:	70 e0       	ldi	r23, 0x00	; 0
   113be:	a3 cd       	rjmp	.-1210   	; 0x10f06 <gpib_trace_display>
   113c0:	08 95       	ret

000113c2 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   113c2:	a7 e0       	ldi	r26, 0x07	; 7
   113c4:	b0 e0       	ldi	r27, 0x00	; 0
   113c6:	e7 ee       	ldi	r30, 0xE7	; 231
   113c8:	f9 e8       	ldi	r31, 0x89	; 137
   113ca:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__prologue_saves__+0x10>
   113ce:	5b 01       	movw	r10, r22
   113d0:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   113d2:	fa 01       	movw	r30, r20
   113d4:	20 81       	ld	r18, Z
   113d6:	31 81       	ldd	r19, Z+1	; 0x01
   113d8:	22 27       	eor	r18, r18
   113da:	31 83       	std	Z+1, r19	; 0x01
   113dc:	20 83       	st	Z, r18

    if(!size)
   113de:	67 2b       	or	r22, r23
   113e0:	21 f0       	breq	.+8      	; 0x113ea <gpib_read_str+0x28>
   113e2:	7c 01       	movw	r14, r24
   113e4:	00 e0       	ldi	r16, 0x00	; 0
   113e6:	10 e0       	ldi	r17, 0x00	; 0
   113e8:	28 c0       	rjmp	.+80     	; 0x1143a <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   113ea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   113ee:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   113f2:	81 72       	andi	r24, 0x21	; 33
   113f4:	91 70       	andi	r25, 0x01	; 1
   113f6:	89 2b       	or	r24, r25
   113f8:	09 f4       	brne	.+2      	; 0x113fc <gpib_read_str+0x3a>
   113fa:	7c c0       	rjmp	.+248    	; 0x114f4 <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   113fc:	8a ea       	ldi	r24, 0xAA	; 170
   113fe:	9f e0       	ldi	r25, 0x0F	; 15
   11400:	a0 e0       	ldi	r26, 0x00	; 0
   11402:	ed b7       	in	r30, 0x3d	; 61
   11404:	fe b7       	in	r31, 0x3e	; 62
   11406:	81 83       	std	Z+1, r24	; 0x01
   11408:	92 83       	std	Z+2, r25	; 0x02
   1140a:	a3 83       	std	Z+3, r26	; 0x03
   1140c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   11410:	71 c0       	rjmp	.+226    	; 0x114f4 <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11412:	8c 27       	eor	r24, r28
   11414:	9d 27       	eor	r25, r29
   11416:	92 fd       	sbrc	r25, 2
   11418:	2e c0       	rjmp	.+92     	; 0x11476 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   1141a:	ce 01       	movw	r24, r28
   1141c:	88 27       	eor	r24, r24
   1141e:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   11420:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11422:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   11424:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   11426:	f7 01       	movw	r30, r14
   11428:	20 83       	st	Z, r18
        ++ind;
   1142a:	0f 5f       	subi	r16, 0xFF	; 255
   1142c:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1142e:	89 2b       	or	r24, r25
   11430:	09 f4       	brne	.+2      	; 0x11434 <gpib_read_str+0x72>
   11432:	3c c0       	rjmp	.+120    	; 0x114ac <gpib_read_str+0xea>
   11434:	ff ef       	ldi	r31, 0xFF	; 255
   11436:	ef 1a       	sub	r14, r31
   11438:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   1143a:	0a 15       	cp	r16, r10
   1143c:	1b 05       	cpc	r17, r11
   1143e:	0c f0       	brlt	.+2      	; 0x11442 <gpib_read_str+0x80>
   11440:	3f c0       	rjmp	.+126    	; 0x114c0 <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   11442:	80 e0       	ldi	r24, 0x00	; 0
   11444:	90 e0       	ldi	r25, 0x00	; 0
   11446:	a1 de       	rcall	.-702    	; 0x1118a <gpib_read_byte>
   11448:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   1144a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1144e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11452:	90 ff       	sbrs	r25, 0
   11454:	02 c0       	rjmp	.+4      	; 0x1145a <gpib_read_str+0x98>
            gpib_decode(val);
   11456:	ce 01       	movw	r24, r28
   11458:	b0 df       	rcall	.-160    	; 0x113ba <gpib_decode>
#endif
        if(val & ERROR_MASK)
   1145a:	9e 01       	movw	r18, r28
   1145c:	22 27       	eor	r18, r18
   1145e:	30 7d       	andi	r19, 0xD0	; 208
   11460:	f6 01       	movw	r30, r12
   11462:	80 81       	ld	r24, Z
   11464:	91 81       	ldd	r25, Z+1	; 0x01
   11466:	21 15       	cp	r18, r1
   11468:	31 05       	cpc	r19, r1
   1146a:	99 f2       	breq	.-90     	; 0x11412 <gpib_read_str+0x50>
        {
            *status |= (val & ERROR_MASK);
   1146c:	82 2b       	or	r24, r18
   1146e:	93 2b       	or	r25, r19
   11470:	91 83       	std	Z+1, r25	; 0x01
   11472:	80 83       	st	Z, r24
            break;
   11474:	28 c0       	rjmp	.+80     	; 0x114c6 <gpib_read_str+0x104>
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11476:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1147a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1147e:	81 72       	andi	r24, 0x21	; 33
   11480:	91 70       	andi	r25, 0x01	; 1
   11482:	89 2b       	or	r24, r25
   11484:	81 f0       	breq	.+32     	; 0x114a6 <gpib_read_str+0xe4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   11486:	ce 01       	movw	r24, r28
   11488:	99 27       	eor	r25, r25
   1148a:	ed b7       	in	r30, 0x3d	; 61
   1148c:	fe b7       	in	r31, 0x3e	; 62
   1148e:	97 83       	std	Z+7, r25	; 0x07
   11490:	86 83       	std	Z+6, r24	; 0x06
   11492:	15 83       	std	Z+5, r17	; 0x05
   11494:	04 83       	std	Z+4, r16	; 0x04
   11496:	8d e7       	ldi	r24, 0x7D	; 125
   11498:	9f e0       	ldi	r25, 0x0F	; 15
   1149a:	a0 e0       	ldi	r26, 0x00	; 0
   1149c:	81 83       	std	Z+1, r24	; 0x01
   1149e:	92 83       	std	Z+2, r25	; 0x02
   114a0:	a3 83       	std	Z+3, r26	; 0x03
   114a2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            gpib_unread(val);
   114a6:	ce 01       	movw	r24, r28
   114a8:	4b db       	rcall	.-2410   	; 0x10b40 <gpib_unread>
            break;
   114aa:	0d c0       	rjmp	.+26     	; 0x114c6 <gpib_read_str+0x104>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   114ac:	d0 ff       	sbrs	r29, 0
   114ae:	c2 cf       	rjmp	.-124    	; 0x11434 <gpib_read_str+0x72>
        {

            if(*status & EOI_FLAG)
   114b0:	f6 01       	movw	r30, r12
   114b2:	80 81       	ld	r24, Z
   114b4:	91 81       	ldd	r25, Z+1	; 0x01
   114b6:	90 fd       	sbrc	r25, 0
   114b8:	1f c0       	rjmp	.+62     	; 0x114f8 <gpib_read_str+0x136>
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   114ba:	91 60       	ori	r25, 0x01	; 1
   114bc:	91 83       	std	Z+1, r25	; 0x01
   114be:	80 83       	st	Z, r24
            break;
        }
    }
    if ( ind != size ) 
   114c0:	0a 15       	cp	r16, r10
   114c2:	1b 05       	cpc	r17, r11
   114c4:	c9 f0       	breq	.+50     	; 0x114f8 <gpib_read_str+0x136>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   114c6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   114ca:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   114ce:	81 72       	andi	r24, 0x21	; 33
   114d0:	99 27       	eor	r25, r25
   114d2:	89 2b       	or	r24, r25
   114d4:	89 f0       	breq	.+34     	; 0x114f8 <gpib_read_str+0x136>
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   114d6:	ed b7       	in	r30, 0x3d	; 61
   114d8:	fe b7       	in	r31, 0x3e	; 62
   114da:	b7 82       	std	Z+7, r11	; 0x07
   114dc:	a6 82       	std	Z+6, r10	; 0x06
   114de:	15 83       	std	Z+5, r17	; 0x05
   114e0:	04 83       	std	Z+4, r16	; 0x04
   114e2:	86 e5       	ldi	r24, 0x56	; 86
   114e4:	9f e0       	ldi	r25, 0x0F	; 15
   114e6:	a0 e0       	ldi	r26, 0x00	; 0
   114e8:	81 83       	std	Z+1, r24	; 0x01
   114ea:	92 83       	std	Z+2, r25	; 0x02
   114ec:	a3 83       	std	Z+3, r26	; 0x03
   114ee:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   114f2:	02 c0       	rjmp	.+4      	; 0x114f8 <gpib_read_str+0x136>
   114f4:	00 e0       	ldi	r16, 0x00	; 0
   114f6:	10 e0       	ldi	r17, 0x00	; 0
    }
    return(ind);
}
   114f8:	c8 01       	movw	r24, r16
   114fa:	cd b7       	in	r28, 0x3d	; 61
   114fc:	de b7       	in	r29, 0x3e	; 62
   114fe:	27 96       	adiw	r28, 0x07	; 7
   11500:	ea e0       	ldi	r30, 0x0A	; 10
   11502:	0c 94 80 e3 	jmp	0x1c700	; 0x1c700 <__epilogue_restores__+0x10>

00011506 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   11506:	a7 e0       	ldi	r26, 0x07	; 7
   11508:	b0 e0       	ldi	r27, 0x00	; 0
   1150a:	e9 e8       	ldi	r30, 0x89	; 137
   1150c:	fa e8       	ldi	r31, 0x8A	; 138
   1150e:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__prologue_saves__+0x10>
   11512:	d8 2f       	mov	r29, r24
   11514:	c9 2f       	mov	r28, r25
   11516:	7b 01       	movw	r14, r22
   11518:	8a 01       	movw	r16, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   1151a:	fa 01       	movw	r30, r20
   1151c:	80 81       	ld	r24, Z
   1151e:	91 81       	ldd	r25, Z+1	; 0x01
   11520:	88 27       	eor	r24, r24
   11522:	91 83       	std	Z+1, r25	; 0x01
   11524:	80 83       	st	Z, r24

    if(!size)
   11526:	67 2b       	or	r22, r23
   11528:	91 f4       	brne	.+36     	; 0x1154e <gpib_write_str+0x48>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1152a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1152e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11532:	81 72       	andi	r24, 0x21	; 33
   11534:	91 70       	andi	r25, 0x01	; 1
   11536:	89 2b       	or	r24, r25
   11538:	51 f0       	breq	.+20     	; 0x1154e <gpib_write_str+0x48>
            printf("gpib_write_str: size = 0\n");
   1153a:	8c e3       	ldi	r24, 0x3C	; 60
   1153c:	9f e0       	ldi	r25, 0x0F	; 15
   1153e:	a0 e0       	ldi	r26, 0x00	; 0
   11540:	ed b7       	in	r30, 0x3d	; 61
   11542:	fe b7       	in	r31, 0x3e	; 62
   11544:	81 83       	std	Z+1, r24	; 0x01
   11546:	92 83       	std	Z+2, r25	; 0x02
   11548:	a3 83       	std	Z+3, r26	; 0x03
   1154a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    }

	// Start with NRFD and NDAC = 1 - ie off the OC BUS
	gpib_rx_init(0);
   1154e:	80 e0       	ldi	r24, 0x00	; 0
   11550:	2e da       	rcall	.-2980   	; 0x109ae <gpib_rx_init>

// Wait until ATN is released!
#if 1
    if (GPIB_PIN_TST(ATN) == 0)
   11552:	4e 9b       	sbis	0x09, 6	; 9
   11554:	06 c0       	rjmp	.+12     	; 0x11562 <gpib_write_str+0x5c>
#endif

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
   11556:	64 ef       	ldi	r22, 0xF4	; 244
   11558:	71 e0       	ldi	r23, 0x01	; 1
   1155a:	80 e0       	ldi	r24, 0x00	; 0
   1155c:	90 e0       	ldi	r25, 0x00	; 0
   1155e:	e5 d9       	rcall	.-3126   	; 0x1092a <gpib_timeout_set>
	while ( GPIB_PIN_TST(DAV) == 0)
   11560:	18 c0       	rjmp	.+48     	; 0x11592 <gpib_write_str+0x8c>
#endif
		// Wait for ATN free
		// Keep in mind that we have been addressed to talk already
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
   11562:	64 ef       	ldi	r22, 0xF4	; 244
   11564:	71 e0       	ldi	r23, 0x01	; 1
   11566:	80 e0       	ldi	r24, 0x00	; 0
   11568:	90 e0       	ldi	r25, 0x00	; 0
   1156a:	df d9       	rcall	.-3138   	; 0x1092a <gpib_timeout_set>
		while(GPIB_PIN_TST(ATN) == 0)
   1156c:	4e 99       	sbic	0x09, 6	; 9
   1156e:	f3 cf       	rjmp	.-26     	; 0x11556 <gpib_write_str+0x50>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11570:	80 91 ea 1c 	lds	r24, 0x1CEA	; 0x801cea <gpib_timer+0x8>
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
		while(GPIB_PIN_TST(ATN) == 0)
		{
			if(gpib_timeout_test())
   11574:	88 23       	and	r24, r24
   11576:	d1 f3       	breq	.-12     	; 0x1156c <gpib_write_str+0x66>
			{
				gpib_rx_init(1);
   11578:	81 e0       	ldi	r24, 0x01	; 1
   1157a:	19 da       	rcall	.-3022   	; 0x109ae <gpib_rx_init>
				if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   1157c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11580:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11584:	85 70       	andi	r24, 0x05	; 5
   11586:	99 27       	eor	r25, r25
   11588:	89 2b       	or	r24, r25
   1158a:	d9 f0       	breq	.+54     	; 0x115c2 <gpib_write_str+0xbc>
					printf("<gpib_write_str timeout waiting for ATN = 1>\n");
   1158c:	8e e0       	ldi	r24, 0x0E	; 14
   1158e:	9f e0       	ldi	r25, 0x0F	; 15
   11590:	10 c0       	rjmp	.+32     	; 0x115b2 <gpib_write_str+0xac>

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   11592:	19 99       	sbic	0x03, 1	; 3
   11594:	1f c0       	rjmp	.+62     	; 0x115d4 <gpib_write_str+0xce>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11596:	80 91 ea 1c 	lds	r24, 0x1CEA	; 0x801cea <gpib_timer+0x8>
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
	{
		if(gpib_timeout_test())
   1159a:	88 23       	and	r24, r24
   1159c:	d1 f3       	breq	.-12     	; 0x11592 <gpib_write_str+0x8c>
		{
			if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   1159e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   115a2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   115a6:	85 70       	andi	r24, 0x05	; 5
   115a8:	99 27       	eor	r25, r25
   115aa:	89 2b       	or	r24, r25
   115ac:	51 f0       	breq	.+20     	; 0x115c2 <gpib_write_str+0xbc>
				printf("<BUS waiting for DAV==1>\n");
   115ae:	84 ef       	ldi	r24, 0xF4	; 244
   115b0:	9e e0       	ldi	r25, 0x0E	; 14
   115b2:	a0 e0       	ldi	r26, 0x00	; 0
   115b4:	ed b7       	in	r30, 0x3d	; 61
   115b6:	fe b7       	in	r31, 0x3e	; 62
   115b8:	81 83       	std	Z+1, r24	; 0x01
   115ba:	92 83       	std	Z+2, r25	; 0x02
   115bc:	a3 83       	std	Z+3, r26	; 0x03
   115be:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
			*status |= (TIMEOUT_FLAG | BUS_ERROR_FLAG);
   115c2:	f8 01       	movw	r30, r16
   115c4:	80 81       	ld	r24, Z
   115c6:	91 81       	ldd	r25, Z+1	; 0x01
   115c8:	90 6c       	ori	r25, 0xC0	; 192
   115ca:	91 83       	std	Z+1, r25	; 0x01
   115cc:	80 83       	st	Z, r24
			return(ind);
   115ce:	c0 e0       	ldi	r28, 0x00	; 0
   115d0:	d0 e0       	ldi	r29, 0x00	; 0
   115d2:	45 c0       	rjmp	.+138    	; 0x1165e <gpib_write_str+0x158>
   115d4:	cd 2e       	mov	r12, r29
   115d6:	dc 2e       	mov	r13, r28

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   115d8:	c0 e0       	ldi	r28, 0x00	; 0
   115da:	d0 e0       	ldi	r29, 0x00	; 0
			return(ind);
		}
	}
#endif

    while(ind < size)
   115dc:	ce 15       	cp	r28, r14
   115de:	df 05       	cpc	r29, r15
   115e0:	1c f5       	brge	.+70     	; 0x11628 <gpib_write_str+0x122>
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   115e2:	21 96       	adiw	r28, 0x01	; 1
   115e4:	f6 01       	movw	r30, r12
   115e6:	81 91       	ld	r24, Z+
   115e8:	6f 01       	movw	r12, r30
   115ea:	90 e0       	ldi	r25, 0x00	; 0

        if( (*status & EOI_FLAG) && (ind == size ) )
   115ec:	f8 01       	movw	r30, r16
   115ee:	20 81       	ld	r18, Z
   115f0:	31 81       	ldd	r19, Z+1	; 0x01
   115f2:	30 ff       	sbrs	r19, 0
   115f4:	04 c0       	rjmp	.+8      	; 0x115fe <gpib_write_str+0xf8>
   115f6:	ec 16       	cp	r14, r28
   115f8:	fd 06       	cpc	r15, r29
            ch |= EOI_FLAG;
   115fa:	09 f4       	brne	.+2      	; 0x115fe <gpib_write_str+0xf8>

/// @return Returns

        val = gpib_write_byte(ch);
   115fc:	91 60       	ori	r25, 0x01	; 1
   115fe:	ec da       	rcall	.-2600   	; 0x10bd8 <gpib_write_byte>
        *status |= (val & ERROR_MASK);
   11600:	5c 01       	movw	r10, r24
   11602:	aa 24       	eor	r10, r10
   11604:	f0 ed       	ldi	r31, 0xD0	; 208
   11606:	bf 22       	and	r11, r31
   11608:	f8 01       	movw	r30, r16
   1160a:	20 81       	ld	r18, Z
   1160c:	31 81       	ldd	r19, Z+1	; 0x01
   1160e:	2a 29       	or	r18, r10
   11610:	3b 29       	or	r19, r11
   11612:	31 83       	std	Z+1, r19	; 0x01
   11614:	20 83       	st	Z, r18

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   11616:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1161a:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   1161e:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   11620:	cc de       	rcall	.-616    	; 0x113ba <gpib_decode>
   11622:	a1 14       	cp	r10, r1
   11624:	b1 04       	cpc	r11, r1

    }                                             // while(ind < size)

// End by setting receive mode and set NRFD and NDAC busy until
// we get back to the main loop (this happens very quickly
	gpib_rx_init(1);	// BUSY
   11626:	d1 f2       	breq	.-76     	; 0x115dc <gpib_write_str+0xd6>
   11628:	81 e0       	ldi	r24, 0x01	; 1
   1162a:	c1 d9       	rcall	.-3198   	; 0x109ae <gpib_rx_init>

    if ( ind != size )
   1162c:	ce 15       	cp	r28, r14
   1162e:	df 05       	cpc	r29, r15
   11630:	b1 f0       	breq	.+44     	; 0x1165e <gpib_write_str+0x158>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11632:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11636:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1163a:	81 72       	andi	r24, 0x21	; 33
   1163c:	91 70       	andi	r25, 0x01	; 1
   1163e:	89 2b       	or	r24, r25
   11640:	71 f0       	breq	.+28     	; 0x1165e <gpib_write_str+0x158>
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   11642:	ed b7       	in	r30, 0x3d	; 61
   11644:	fe b7       	in	r31, 0x3e	; 62
   11646:	f7 82       	std	Z+7, r15	; 0x07
   11648:	e6 82       	std	Z+6, r14	; 0x06
   1164a:	d5 83       	std	Z+5, r29	; 0x05
   1164c:	c4 83       	std	Z+4, r28	; 0x04
   1164e:	8c ec       	ldi	r24, 0xCC	; 204
   11650:	9e e0       	ldi	r25, 0x0E	; 14
   11652:	a0 e0       	ldi	r26, 0x00	; 0
   11654:	81 83       	std	Z+1, r24	; 0x01
   11656:	92 83       	std	Z+2, r25	; 0x02
   11658:	a3 83       	std	Z+3, r26	; 0x03
   1165a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    }
    return(ind);
}
   1165e:	ce 01       	movw	r24, r28
   11660:	cd b7       	in	r28, 0x3d	; 61
   11662:	de b7       	in	r29, 0x3e	; 62
   11664:	27 96       	adiw	r28, 0x07	; 7
   11666:	ea e0       	ldi	r30, 0x0A	; 10
   11668:	0c 94 80 e3 	jmp	0x1c700	; 0x1c700 <__epilogue_restores__+0x10>

0001166c <gpib_file_init>:
{
    int index = find_device(PRINTER_TYPE, address, BASE_MSA);
    if(index == -1)
        return(0);
    return(set_active_device(index));
}
   1166c:	ad b7       	in	r26, 0x3d	; 61
   1166e:	be b7       	in	r27, 0x3e	; 62
   11670:	17 97       	sbiw	r26, 0x07	; 7
   11672:	0f b6       	in	r0, 0x3f	; 63
   11674:	f8 94       	cli
   11676:	be bf       	out	0x3e, r27	; 62
   11678:	0f be       	out	0x3f, r0	; 63
   1167a:	ad bf       	out	0x3d, r26	; 61
   1167c:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   11680:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   11684:	88 eb       	ldi	r24, 0xB8	; 184
   11686:	91 e0       	ldi	r25, 0x01	; 1
   11688:	0e 94 36 9a 	call	0x1346c	; 0x1346c <Read_Config>
   1168c:	18 16       	cp	r1, r24
   1168e:	19 06       	cpc	r1, r25
   11690:	8c f4       	brge	.+34     	; 0x116b4 <gpib_file_init+0x48>
   11692:	ed b7       	in	r30, 0x3d	; 61
   11694:	fe b7       	in	r31, 0x3e	; 62
   11696:	97 83       	std	Z+7, r25	; 0x07
   11698:	86 83       	std	Z+6, r24	; 0x06
   1169a:	88 eb       	ldi	r24, 0xB8	; 184
   1169c:	91 e0       	ldi	r25, 0x01	; 1
   1169e:	95 83       	std	Z+5, r25	; 0x05
   116a0:	84 83       	std	Z+4, r24	; 0x04
   116a2:	89 ed       	ldi	r24, 0xD9	; 217
   116a4:	94 e1       	ldi	r25, 0x14	; 20
   116a6:	a0 e0       	ldi	r26, 0x00	; 0
   116a8:	81 83       	std	Z+1, r24	; 0x01
   116aa:	92 83       	std	Z+2, r25	; 0x02
   116ac:	a3 83       	std	Z+3, r26	; 0x03
   116ae:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   116b2:	10 c0       	rjmp	.+32     	; 0x116d4 <gpib_file_init+0x68>
   116b4:	89 2b       	or	r24, r25
   116b6:	71 f0       	breq	.+28     	; 0x116d4 <gpib_file_init+0x68>
   116b8:	88 eb       	ldi	r24, 0xB8	; 184
   116ba:	91 e0       	ldi	r25, 0x01	; 1
   116bc:	ed b7       	in	r30, 0x3d	; 61
   116be:	fe b7       	in	r31, 0x3e	; 62
   116c0:	95 83       	std	Z+5, r25	; 0x05
   116c2:	84 83       	std	Z+4, r24	; 0x04
   116c4:	88 ec       	ldi	r24, 0xC8	; 200
   116c6:	94 e1       	ldi	r25, 0x14	; 20
   116c8:	a0 e0       	ldi	r26, 0x00	; 0
   116ca:	81 83       	std	Z+1, r24	; 0x01
   116cc:	92 83       	std	Z+2, r25	; 0x02
   116ce:	a3 83       	std	Z+3, r26	; 0x03
   116d0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   116d4:	0e 94 01 99 	call	0x13202	; 0x13202 <set_Config_Defaults>
   116d8:	0e 94 1e 6f 	call	0xde3c	; 0xde3c <mmc_wp_status>
   116dc:	89 2b       	or	r24, r25
   116de:	51 f0       	breq	.+20     	; 0x116f4 <gpib_file_init+0x88>
   116e0:	8f ea       	ldi	r24, 0xAF	; 175
   116e2:	94 e1       	ldi	r25, 0x14	; 20
   116e4:	a0 e0       	ldi	r26, 0x00	; 0
   116e6:	ed b7       	in	r30, 0x3d	; 61
   116e8:	fe b7       	in	r31, 0x3e	; 62
   116ea:	81 83       	std	Z+1, r24	; 0x01
   116ec:	92 83       	std	Z+2, r25	; 0x02
   116ee:	a3 83       	std	Z+3, r26	; 0x03
   116f0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   116f4:	ad b7       	in	r26, 0x3d	; 61
   116f6:	be b7       	in	r27, 0x3e	; 62
   116f8:	17 96       	adiw	r26, 0x07	; 7
   116fa:	0f b6       	in	r0, 0x3f	; 63
   116fc:	f8 94       	cli
   116fe:	be bf       	out	0x3e, r27	; 62
   11700:	0f be       	out	0x3f, r0	; 63
   11702:	ad bf       	out	0x3d, r26	; 61
   11704:	08 95       	ret

00011706 <SS80_is_MLA>:
   11706:	40 e2       	ldi	r20, 0x20	; 32
   11708:	50 e0       	ldi	r21, 0x00	; 0
   1170a:	bc 01       	movw	r22, r24
   1170c:	83 e0       	ldi	r24, 0x03	; 3
   1170e:	90 e0       	ldi	r25, 0x00	; 0
   11710:	0e 94 67 96 	call	0x12cce	; 0x12cce <find_device>
   11714:	8f 3f       	cpi	r24, 0xFF	; 255
   11716:	2f ef       	ldi	r18, 0xFF	; 255
   11718:	92 07       	cpc	r25, r18
   1171a:	19 f0       	breq	.+6      	; 0x11722 <SS80_is_MLA+0x1c>
   1171c:	0c 94 91 96 	jmp	0x12d22	; 0x12d22 <set_active_device>
   11720:	08 95       	ret
   11722:	80 e0       	ldi	r24, 0x00	; 0
   11724:	90 e0       	ldi	r25, 0x00	; 0
   11726:	08 95       	ret

00011728 <SS80_is_MTA>:
   11728:	40 e4       	ldi	r20, 0x40	; 64
   1172a:	50 e0       	ldi	r21, 0x00	; 0
   1172c:	bc 01       	movw	r22, r24
   1172e:	83 e0       	ldi	r24, 0x03	; 3
   11730:	90 e0       	ldi	r25, 0x00	; 0
   11732:	0e 94 67 96 	call	0x12cce	; 0x12cce <find_device>
   11736:	8f 3f       	cpi	r24, 0xFF	; 255
   11738:	2f ef       	ldi	r18, 0xFF	; 255
   1173a:	92 07       	cpc	r25, r18
   1173c:	19 f0       	breq	.+6      	; 0x11744 <SS80_is_MTA+0x1c>
   1173e:	0c 94 91 96 	jmp	0x12d22	; 0x12d22 <set_active_device>
   11742:	08 95       	ret
   11744:	80 e0       	ldi	r24, 0x00	; 0
   11746:	90 e0       	ldi	r25, 0x00	; 0
   11748:	08 95       	ret

0001174a <SS80_is_MSA>:
   1174a:	40 e6       	ldi	r20, 0x60	; 96
   1174c:	50 e0       	ldi	r21, 0x00	; 0
   1174e:	bc 01       	movw	r22, r24
   11750:	83 e0       	ldi	r24, 0x03	; 3
   11752:	90 e0       	ldi	r25, 0x00	; 0
   11754:	0e 94 67 96 	call	0x12cce	; 0x12cce <find_device>
   11758:	8f 3f       	cpi	r24, 0xFF	; 255
   1175a:	2f ef       	ldi	r18, 0xFF	; 255
   1175c:	92 07       	cpc	r25, r18
   1175e:	19 f0       	breq	.+6      	; 0x11766 <SS80_is_MSA+0x1c>
   11760:	0c 94 91 96 	jmp	0x12d22	; 0x12d22 <set_active_device>
   11764:	08 95       	ret
   11766:	80 e0       	ldi	r24, 0x00	; 0
   11768:	90 e0       	ldi	r25, 0x00	; 0
   1176a:	08 95       	ret

0001176c <AMIGO_is_MLA>:
   1176c:	40 e2       	ldi	r20, 0x20	; 32
   1176e:	50 e0       	ldi	r21, 0x00	; 0
   11770:	bc 01       	movw	r22, r24
   11772:	81 e0       	ldi	r24, 0x01	; 1
   11774:	90 e0       	ldi	r25, 0x00	; 0
   11776:	0e 94 67 96 	call	0x12cce	; 0x12cce <find_device>
   1177a:	8f 3f       	cpi	r24, 0xFF	; 255
   1177c:	2f ef       	ldi	r18, 0xFF	; 255
   1177e:	92 07       	cpc	r25, r18
   11780:	19 f0       	breq	.+6      	; 0x11788 <AMIGO_is_MLA+0x1c>
   11782:	0c 94 91 96 	jmp	0x12d22	; 0x12d22 <set_active_device>
   11786:	08 95       	ret
   11788:	80 e0       	ldi	r24, 0x00	; 0
   1178a:	90 e0       	ldi	r25, 0x00	; 0
   1178c:	08 95       	ret

0001178e <AMIGO_is_MTA>:
   1178e:	40 e4       	ldi	r20, 0x40	; 64
   11790:	50 e0       	ldi	r21, 0x00	; 0
   11792:	bc 01       	movw	r22, r24
   11794:	81 e0       	ldi	r24, 0x01	; 1
   11796:	90 e0       	ldi	r25, 0x00	; 0
   11798:	0e 94 67 96 	call	0x12cce	; 0x12cce <find_device>
   1179c:	8f 3f       	cpi	r24, 0xFF	; 255
   1179e:	2f ef       	ldi	r18, 0xFF	; 255
   117a0:	92 07       	cpc	r25, r18
   117a2:	19 f0       	breq	.+6      	; 0x117aa <AMIGO_is_MTA+0x1c>
   117a4:	0c 94 91 96 	jmp	0x12d22	; 0x12d22 <set_active_device>
   117a8:	08 95       	ret
   117aa:	80 e0       	ldi	r24, 0x00	; 0
   117ac:	90 e0       	ldi	r25, 0x00	; 0
   117ae:	08 95       	ret

000117b0 <AMIGO_is_MSA>:
   117b0:	40 e6       	ldi	r20, 0x60	; 96
   117b2:	50 e0       	ldi	r21, 0x00	; 0
   117b4:	bc 01       	movw	r22, r24
   117b6:	81 e0       	ldi	r24, 0x01	; 1
   117b8:	90 e0       	ldi	r25, 0x00	; 0
   117ba:	0e 94 67 96 	call	0x12cce	; 0x12cce <find_device>
   117be:	8f 3f       	cpi	r24, 0xFF	; 255
   117c0:	2f ef       	ldi	r18, 0xFF	; 255
   117c2:	92 07       	cpc	r25, r18
   117c4:	19 f0       	breq	.+6      	; 0x117cc <AMIGO_is_MSA+0x1c>
   117c6:	0c 94 91 96 	jmp	0x12d22	; 0x12d22 <set_active_device>
   117ca:	08 95       	ret
   117cc:	80 e0       	ldi	r24, 0x00	; 0
   117ce:	90 e0       	ldi	r25, 0x00	; 0
   117d0:	08 95       	ret

000117d2 <PRINTER_is_MLA>:
   117d2:	40 e2       	ldi	r20, 0x20	; 32
   117d4:	50 e0       	ldi	r21, 0x00	; 0
   117d6:	bc 01       	movw	r22, r24
   117d8:	84 e0       	ldi	r24, 0x04	; 4
   117da:	90 e0       	ldi	r25, 0x00	; 0
   117dc:	0e 94 67 96 	call	0x12cce	; 0x12cce <find_device>
   117e0:	8f 3f       	cpi	r24, 0xFF	; 255
   117e2:	2f ef       	ldi	r18, 0xFF	; 255
   117e4:	92 07       	cpc	r25, r18
   117e6:	19 f0       	breq	.+6      	; 0x117ee <PRINTER_is_MLA+0x1c>
   117e8:	0c 94 91 96 	jmp	0x12d22	; 0x12d22 <set_active_device>
   117ec:	08 95       	ret
   117ee:	80 e0       	ldi	r24, 0x00	; 0
   117f0:	90 e0       	ldi	r25, 0x00	; 0
   117f2:	08 95       	ret

000117f4 <PRINTER_is_MTA>:
   117f4:	40 e4       	ldi	r20, 0x40	; 64
   117f6:	50 e0       	ldi	r21, 0x00	; 0
   117f8:	bc 01       	movw	r22, r24
   117fa:	84 e0       	ldi	r24, 0x04	; 4
   117fc:	90 e0       	ldi	r25, 0x00	; 0
   117fe:	0e 94 67 96 	call	0x12cce	; 0x12cce <find_device>
   11802:	8f 3f       	cpi	r24, 0xFF	; 255
   11804:	2f ef       	ldi	r18, 0xFF	; 255
   11806:	92 07       	cpc	r25, r18
   11808:	19 f0       	breq	.+6      	; 0x11810 <PRINTER_is_MTA+0x1c>
   1180a:	0c 94 91 96 	jmp	0x12d22	; 0x12d22 <set_active_device>
   1180e:	08 95       	ret
   11810:	80 e0       	ldi	r24, 0x00	; 0
   11812:	90 e0       	ldi	r25, 0x00	; 0
   11814:	08 95       	ret

00011816 <gpib_init_devices>:
///
/// - Used at power up, Bus IFC or user aborts
/// @return  void
void gpib_init_devices(void)
{
    gpib_bus_init();                              // Not busy - we have to free all pins on the BUS
   11816:	93 d8       	rcall	.-3802   	; 0x1093e <gpib_bus_init>

// Init PPR talking and listening states
// Enable this 14 April 2020 - testing MIke Gore
    gpib_state_init();
   11818:	fa d8       	rcall	.-3596   	; 0x10a0e <gpib_state_init>
   1181a:	0e 94 18 ab 	call	0x15630	; 0x15630 <SS80_init>

    SS80_init();                                  // SS80 state init
   1181e:	0e 94 a7 b0 	call	0x1614e	; 0x1614e <amigo_init>

#ifdef AMIGO
    amigo_init();                                 // AMIGO state init
   11822:	0c 94 d8 bb 	jmp	0x177b0	; 0x177b0 <printer_close>
#endif

    printer_close();                              // Close any open fprinter files
   11826:	08 95       	ret

00011828 <gpib_trace_task>:
   11828:	0f 93       	push	r16
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   1182a:	1f 93       	push	r17
   1182c:	cf 93       	push	r28
   1182e:	df 93       	push	r29
   11830:	00 d0       	rcall	.+0      	; 0x11832 <gpib_trace_task+0xa>
   11832:	00 d0       	rcall	.+0      	; 0x11834 <gpib_trace_task+0xc>
   11834:	1f 92       	push	r1
   11836:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   11838:	00 97       	sbiw	r24, 0x00	; 0
   1183a:	09 f4       	brne	.+2      	; 0x1183e <gpib_trace_task+0x16>
   1183c:	44 c0       	rjmp	.+136    	; 0x118c6 <gpib_trace_task+0x9e>
   1183e:	fc 01       	movw	r30, r24
   11840:	20 81       	ld	r18, Z
   11842:	22 23       	and	r18, r18
   11844:	09 f4       	brne	.+2      	; 0x11848 <gpib_trace_task+0x20>
   11846:	3f c0       	rjmp	.+126    	; 0x118c6 <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   11848:	0e 94 3d 30 	call	0x607a	; 0x607a <skipspaces>
   1184c:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   1184e:	ed b7       	in	r30, 0x3d	; 61
   11850:	fe b7       	in	r31, 0x3e	; 62
   11852:	95 83       	std	Z+5, r25	; 0x05
   11854:	84 83       	std	Z+4, r24	; 0x04
   11856:	85 e9       	ldi	r24, 0x95	; 149
   11858:	94 e1       	ldi	r25, 0x14	; 20
   1185a:	a0 e0       	ldi	r26, 0x00	; 0
   1185c:	81 83       	std	Z+1, r24	; 0x01
   1185e:	92 83       	std	Z+2, r25	; 0x02
   11860:	a3 83       	std	Z+3, r26	; 0x03
   11862:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        if(detail)
   11866:	20 97       	sbiw	r28, 0x00	; 0
   11868:	51 f0       	breq	.+20     	; 0x1187e <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   1186a:	8a e6       	ldi	r24, 0x6A	; 106
   1186c:	94 e1       	ldi	r25, 0x14	; 20
   1186e:	a0 e0       	ldi	r26, 0x00	; 0
   11870:	ed b7       	in	r30, 0x3d	; 61
   11872:	fe b7       	in	r31, 0x3e	; 62
   11874:	81 83       	std	Z+1, r24	; 0x01
   11876:	92 83       	std	Z+2, r25	; 0x02
   11878:	a3 83       	std	Z+3, r26	; 0x03
   1187a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        printf("Press ANY key to exit\n");
   1187e:	83 e5       	ldi	r24, 0x53	; 83
   11880:	94 e1       	ldi	r25, 0x14	; 20
   11882:	a0 e0       	ldi	r26, 0x00	; 0
   11884:	ed b7       	in	r30, 0x3d	; 61
   11886:	fe b7       	in	r31, 0x3e	; 62
   11888:	81 83       	std	Z+1, r24	; 0x01
   1188a:	92 83       	std	Z+2, r25	; 0x02
   1188c:	a3 83       	std	Z+3, r26	; 0x03
   1188e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

        gpib_log_fp = fopen(name,"wb");
   11892:	6c e0       	ldi	r22, 0x0C	; 12
   11894:	79 e0       	ldi	r23, 0x09	; 9
   11896:	c8 01       	movw	r24, r16
   11898:	0e 94 36 7d 	call	0xfa6c	; 0xfa6c <fopen>
   1189c:	90 93 64 19 	sts	0x1964, r25	; 0x801964 <gpib_log_fp+0x1>
   118a0:	80 93 63 19 	sts	0x1963, r24	; 0x801963 <gpib_log_fp>
        if(gpib_log_fp == NULL)
   118a4:	89 2b       	or	r24, r25
   118a6:	b9 f4       	brne	.+46     	; 0x118d6 <gpib_trace_task+0xae>
        {
            perror("open failed");
   118a8:	87 ea       	ldi	r24, 0xA7	; 167
   118aa:	9d e0       	ldi	r25, 0x0D	; 13
   118ac:	0e 94 67 77 	call	0xeece	; 0xeece <perror>
            printf("exiting...\n");
   118b0:	87 e4       	ldi	r24, 0x47	; 71
   118b2:	94 e1       	ldi	r25, 0x14	; 20
   118b4:	a0 e0       	ldi	r26, 0x00	; 0
   118b6:	ed b7       	in	r30, 0x3d	; 61
   118b8:	fe b7       	in	r31, 0x3e	; 62
   118ba:	81 83       	std	Z+1, r24	; 0x01
   118bc:	92 83       	std	Z+2, r25	; 0x02
   118be:	a3 83       	std	Z+3, r26	; 0x03
   118c0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            return;
   118c4:	3d c0       	rjmp	.+122    	; 0x11940 <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   118c6:	80 91 c4 1c 	lds	r24, 0x1CC4	; 0x801cc4 <__iob+0x2>
   118ca:	90 91 c5 1c 	lds	r25, 0x1CC5	; 0x801cc5 <__iob+0x3>
   118ce:	90 93 64 19 	sts	0x1964, r25	; 0x801964 <gpib_log_fp+0x1>
   118d2:	80 93 63 19 	sts	0x1963, r24	; 0x801963 <gpib_log_fp>
    }

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();
   118d6:	9f df       	rcall	.-194    	; 0x11816 <gpib_init_devices>

    gpib_decode_header(gpib_log_fp);
   118d8:	80 91 63 19 	lds	r24, 0x1963	; 0x801963 <gpib_log_fp>
   118dc:	90 91 64 19 	lds	r25, 0x1964	; 0x801964 <gpib_log_fp+0x1>
   118e0:	c0 da       	rcall	.-2688   	; 0x10e62 <gpib_decode_header>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   118e2:	80 e0       	ldi	r24, 0x00	; 0
   118e4:	0e 94 73 28 	call	0x50e6	; 0x50e6 <uart_keyhit>
   118e8:	89 2b       	or	r24, r25
            break;

        ch = gpib_read_byte(detail);
   118ea:	31 f4       	brne	.+12     	; 0x118f8 <gpib_trace_task+0xd0>
   118ec:	ce 01       	movw	r24, r28
        if(!detail)
   118ee:	4d dc       	rcall	.-1894   	; 0x1118a <gpib_read_byte>
   118f0:	20 97       	sbiw	r28, 0x00	; 0
            gpib_decode(ch);
   118f2:	b9 f7       	brne	.-18     	; 0x118e2 <gpib_trace_task+0xba>
   118f4:	62 dd       	rcall	.-1340   	; 0x113ba <gpib_decode>
   118f6:	f5 cf       	rjmp	.-22     	; 0x118e2 <gpib_trace_task+0xba>
    }

    printf("Done\n");
   118f8:	81 e4       	ldi	r24, 0x41	; 65
   118fa:	94 e1       	ldi	r25, 0x14	; 20
   118fc:	a0 e0       	ldi	r26, 0x00	; 0
   118fe:	ed b7       	in	r30, 0x3d	; 61
   11900:	fe b7       	in	r31, 0x3e	; 62
   11902:	81 83       	std	Z+1, r24	; 0x01
   11904:	92 83       	std	Z+2, r25	; 0x02
   11906:	a3 83       	std	Z+3, r26	; 0x03
   11908:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    if(gpib_log_fp)
   1190c:	80 91 63 19 	lds	r24, 0x1963	; 0x801963 <gpib_log_fp>
   11910:	90 91 64 19 	lds	r25, 0x1964	; 0x801964 <gpib_log_fp+0x1>
   11914:	00 97       	sbiw	r24, 0x00	; 0
   11916:	a1 f0       	breq	.+40     	; 0x11940 <gpib_trace_task+0x118>
    {
        fclose(gpib_log_fp);
   11918:	0e 94 e0 7b 	call	0xf7c0	; 0xf7c0 <fclose>
        printf("Capturing Closed\n");
   1191c:	8f e2       	ldi	r24, 0x2F	; 47
   1191e:	94 e1       	ldi	r25, 0x14	; 20
   11920:	a0 e0       	ldi	r26, 0x00	; 0
   11922:	ed b7       	in	r30, 0x3d	; 61
   11924:	fe b7       	in	r31, 0x3e	; 62
   11926:	81 83       	std	Z+1, r24	; 0x01
   11928:	92 83       	std	Z+2, r25	; 0x02
   1192a:	a3 83       	std	Z+3, r26	; 0x03
   1192c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        gpib_log_fp = stdout;
   11930:	80 91 c4 1c 	lds	r24, 0x1CC4	; 0x801cc4 <__iob+0x2>
   11934:	90 91 c5 1c 	lds	r25, 0x1CC5	; 0x801cc5 <__iob+0x3>
   11938:	90 93 64 19 	sts	0x1964, r25	; 0x801964 <gpib_log_fp+0x1>
   1193c:	80 93 63 19 	sts	0x1963, r24	; 0x801963 <gpib_log_fp>
    }
}
   11940:	cd b7       	in	r28, 0x3d	; 61
   11942:	de b7       	in	r29, 0x3e	; 62
   11944:	25 96       	adiw	r28, 0x05	; 5
   11946:	e4 e0       	ldi	r30, 0x04	; 4
   11948:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

0001194c <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   1194c:	ef 92       	push	r14
   1194e:	ff 92       	push	r15
   11950:	0f 93       	push	r16
   11952:	1f 93       	push	r17
   11954:	cf 93       	push	r28
   11956:	df 93       	push	r29
   11958:	00 d0       	rcall	.+0      	; 0x1195a <gpib_error_test+0xe>
   1195a:	1f 92       	push	r1
   1195c:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   1195e:	ec 01       	movw	r28, r24
   11960:	cc 27       	eor	r28, r28
   11962:	d0 7d       	andi	r29, 0xD0	; 208
   11964:	20 97       	sbiw	r28, 0x00	; 0
   11966:	61 f0       	breq	.+24     	; 0x11980 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11968:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1196c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11970:	8d 72       	andi	r24, 0x2D	; 45
   11972:	99 27       	eor	r25, r25
   11974:	87 01       	movw	r16, r14
   11976:	00 27       	eor	r16, r16
   11978:	10 71       	andi	r17, 0x10	; 16
   1197a:	89 2b       	or	r24, r25
   1197c:	59 f4       	brne	.+22     	; 0x11994 <gpib_error_test+0x48>
   1197e:	17 c0       	rjmp	.+46     	; 0x119ae <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11980:	80 e0       	ldi	r24, 0x00	; 0
   11982:	0e 94 73 28 	call	0x50e6	; 0x50e6 <uart_keyhit>
   11986:	89 2b       	or	r24, r25
   11988:	79 f7       	brne	.-34     	; 0x11968 <gpib_error_test+0x1c>
   1198a:	0e 94 2c 6e 	call	0xdc58	; 0xdc58 <mmc_ins_status>
   1198e:	01 97       	sbiw	r24, 0x01	; 1
   11990:	59 f7       	brne	.-42     	; 0x11968 <gpib_error_test+0x1c>
   11992:	62 c0       	rjmp	.+196    	; 0x11a58 <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   11994:	01 15       	cp	r16, r1
   11996:	11 05       	cpc	r17, r1
   11998:	51 f0       	breq	.+20     	; 0x119ae <gpib_error_test+0x62>
                printf("<IFC>\n");
   1199a:	88 e2       	ldi	r24, 0x28	; 40
   1199c:	94 e1       	ldi	r25, 0x14	; 20
   1199e:	a0 e0       	ldi	r26, 0x00	; 0
   119a0:	ed b7       	in	r30, 0x3d	; 61
   119a2:	fe b7       	in	r31, 0x3e	; 62
   119a4:	81 83       	std	Z+1, r24	; 0x01
   119a6:	92 83       	std	Z+2, r25	; 0x02
   119a8:	a3 83       	std	Z+3, r26	; 0x03
   119aa:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   119ae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   119b2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   119b6:	8d 72       	andi	r24, 0x2D	; 45
   119b8:	99 27       	eor	r25, r25
   119ba:	89 2b       	or	r24, r25
   119bc:	c1 f0       	breq	.+48     	; 0x119ee <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   119be:	f6 fe       	sbrs	r15, 6
   119c0:	0a c0       	rjmp	.+20     	; 0x119d6 <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   119c2:	8d e1       	ldi	r24, 0x1D	; 29
   119c4:	94 e1       	ldi	r25, 0x14	; 20
   119c6:	a0 e0       	ldi	r26, 0x00	; 0
   119c8:	ed b7       	in	r30, 0x3d	; 61
   119ca:	fe b7       	in	r31, 0x3e	; 62
   119cc:	81 83       	std	Z+1, r24	; 0x01
   119ce:	92 83       	std	Z+2, r25	; 0x02
   119d0:	a3 83       	std	Z+3, r26	; 0x03
   119d2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            if(val & BUS_ERROR_FLAG)
   119d6:	d7 ff       	sbrs	r29, 7
   119d8:	0a c0       	rjmp	.+20     	; 0x119ee <gpib_error_test+0xa2>
                printf("<BUS>\n");
   119da:	86 e1       	ldi	r24, 0x16	; 22
   119dc:	94 e1       	ldi	r25, 0x14	; 20
   119de:	a0 e0       	ldi	r26, 0x00	; 0
   119e0:	ed b7       	in	r30, 0x3d	; 61
   119e2:	fe b7       	in	r31, 0x3e	; 62
   119e4:	81 83       	std	Z+1, r24	; 0x01
   119e6:	92 83       	std	Z+2, r25	; 0x02
   119e8:	a3 83       	std	Z+3, r26	; 0x03
   119ea:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        }

        if(uart_keyhit(0))
   119ee:	80 e0       	ldi	r24, 0x00	; 0
   119f0:	0e 94 73 28 	call	0x50e6	; 0x50e6 <uart_keyhit>
   119f4:	89 2b       	or	r24, r25
   119f6:	51 f0       	breq	.+20     	; 0x11a0c <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   119f8:	89 e0       	ldi	r24, 0x09	; 9
   119fa:	94 e1       	ldi	r25, 0x14	; 20
   119fc:	a0 e0       	ldi	r26, 0x00	; 0
   119fe:	ed b7       	in	r30, 0x3d	; 61
   11a00:	fe b7       	in	r31, 0x3e	; 62
   11a02:	81 83       	std	Z+1, r24	; 0x01
   11a04:	92 83       	std	Z+2, r25	; 0x02
   11a06:	a3 83       	std	Z+3, r26	; 0x03
   11a08:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

        if( mmc_ins_status() != 1 )
   11a0c:	0e 94 2c 6e 	call	0xdc58	; 0xdc58 <mmc_ins_status>
   11a10:	01 97       	sbiw	r24, 0x01	; 1
   11a12:	51 f0       	breq	.+20     	; 0x11a28 <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   11a14:	88 ef       	ldi	r24, 0xF8	; 248
   11a16:	93 e1       	ldi	r25, 0x13	; 19
   11a18:	a0 e0       	ldi	r26, 0x00	; 0
   11a1a:	ed b7       	in	r30, 0x3d	; 61
   11a1c:	fe b7       	in	r31, 0x3e	; 62
   11a1e:	81 83       	std	Z+1, r24	; 0x01
   11a20:	92 83       	std	Z+2, r25	; 0x02
   11a22:	a3 83       	std	Z+3, r26	; 0x03
   11a24:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

        if(val & IFC_FLAG)
   11a28:	01 15       	cp	r16, r1
   11a2a:	11 05       	cpc	r17, r1
   11a2c:	09 f0       	breq	.+2      	; 0x11a30 <gpib_error_test+0xe4>
        {
            gpib_init_devices();
   11a2e:	f3 de       	rcall	.-538    	; 0x11816 <gpib_init_devices>
        }

        if(uart_keyhit(0))
   11a30:	80 e0       	ldi	r24, 0x00	; 0
   11a32:	0e 94 73 28 	call	0x50e6	; 0x50e6 <uart_keyhit>
   11a36:	89 2b       	or	r24, r25
        {
            gpib_init_devices();
   11a38:	11 f0       	breq	.+4      	; 0x11a3e <gpib_error_test+0xf2>
   11a3a:	ed de       	rcall	.-550    	; 0x11816 <gpib_init_devices>
   11a3c:	0b c0       	rjmp	.+22     	; 0x11a54 <gpib_error_test+0x108>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   11a3e:	0e 94 2c 6e 	call	0xdc58	; 0xdc58 <mmc_ins_status>
   11a42:	01 97       	sbiw	r24, 0x01	; 1
   11a44:	39 f4       	brne	.+14     	; 0x11a54 <gpib_error_test+0x108>
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   11a46:	01 15       	cp	r16, r1
   11a48:	11 05       	cpc	r17, r1
   11a4a:	31 f0       	breq	.+12     	; 0x11a58 <gpib_error_test+0x10c>
        {
            while(GPIB_IO_RD(IFC) == 0)
   11a4c:	54 98       	cbi	0x0a, 4	; 10
   11a4e:	4c 9b       	sbis	0x09, 4	; 9
   11a50:	fd cf       	rjmp	.-6      	; 0x11a4c <gpib_error_test+0x100>
   11a52:	02 c0       	rjmp	.+4      	; 0x11a58 <gpib_error_test+0x10c>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   11a54:	c1 e0       	ldi	r28, 0x01	; 1
   11a56:	d0 e0       	ldi	r29, 0x00	; 0
                ;
        }
        return(val);
    }
    return(0);
}
   11a58:	ce 01       	movw	r24, r28
   11a5a:	cd b7       	in	r28, 0x3d	; 61
   11a5c:	de b7       	in	r29, 0x3e	; 62
   11a5e:	23 96       	adiw	r28, 0x03	; 3
   11a60:	e6 e0       	ldi	r30, 0x06	; 6
   11a62:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

00011a66 <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   11a66:	1f 93       	push	r17
   11a68:	cf 93       	push	r28
   11a6a:	df 93       	push	r29
   11a6c:	ec 01       	movw	r28, r24
   11a6e:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   11a70:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   11a74:	8f 35       	cpi	r24, 0x5F	; 95
   11a76:	91 f0       	breq	.+36     	; 0x11a9c <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   11a78:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   11a7c:	90 e0       	ldi	r25, 0x00	; 0
   11a7e:	76 de       	rcall	.-788    	; 0x1176c <AMIGO_is_MLA>
   11a80:	89 2b       	or	r24, r25
   11a82:	c9 f4       	brne	.+50     	; 0x11ab6 <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   11a84:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   11a88:	90 e0       	ldi	r25, 0x00	; 0
   11a8a:	3d de       	rcall	.-902    	; 0x11706 <SS80_is_MLA>
   11a8c:	89 2b       	or	r24, r25
   11a8e:	11 f5       	brne	.+68     	; 0x11ad4 <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11a90:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   11a94:	90 e0       	ldi	r25, 0x00	; 0
   11a96:	9d de       	rcall	.-710    	; 0x117d2 <PRINTER_is_MLA>
   11a98:	89 2b       	or	r24, r25
   11a9a:	59 f5       	brne	.+86     	; 0x11af2 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   11a9c:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   11aa0:	8f 33       	cpi	r24, 0x3F	; 63
   11aa2:	19 f4       	brne	.+6      	; 0x11aaa <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11aa4:	80 e0       	ldi	r24, 0x00	; 0
   11aa6:	90 e0       	ldi	r25, 0x00	; 0
   11aa8:	2e c0       	rjmp	.+92     	; 0x11b06 <GPIB_COMMANDS+0xa0>

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   11aaa:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   11aae:	90 e0       	ldi	r25, 0x00	; 0
   11ab0:	6e de       	rcall	.-804    	; 0x1178e <AMIGO_is_MTA>
   11ab2:	89 2b       	or	r24, r25
   11ab4:	49 f0       	breq	.+18     	; 0x11ac8 <GPIB_COMMANDS+0x62>
        {
            if(unread)
   11ab6:	11 23       	and	r17, r17
   11ab8:	11 f0       	breq	.+4      	; 0x11abe <GPIB_COMMANDS+0x58>
                gpib_unread(val);
   11aba:	ce 01       	movw	r24, r28
   11abc:	41 d8       	rcall	.-3966   	; 0x10b40 <gpib_unread>
   11abe:	80 91 f2 1e 	lds	r24, 0x1EF2	; 0x801ef2 <secondary>
            status = AMIGO_COMMANDS(secondary);
   11ac2:	0e 94 d3 ba 	call	0x175a6	; 0x175a6 <AMIGO_COMMANDS>
   11ac6:	1d c0       	rjmp	.+58     	; 0x11b02 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   11ac8:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   11acc:	90 e0       	ldi	r25, 0x00	; 0
   11ace:	2c de       	rcall	.-936    	; 0x11728 <SS80_is_MTA>
   11ad0:	89 2b       	or	r24, r25
   11ad2:	49 f0       	breq	.+18     	; 0x11ae6 <GPIB_COMMANDS+0x80>
        {
            if(unread)
   11ad4:	11 23       	and	r17, r17
   11ad6:	11 f0       	breq	.+4      	; 0x11adc <GPIB_COMMANDS+0x76>
                gpib_unread(val);
   11ad8:	ce 01       	movw	r24, r28
   11ada:	32 d8       	rcall	.-3996   	; 0x10b40 <gpib_unread>
   11adc:	80 91 f2 1e 	lds	r24, 0x1EF2	; 0x801ef2 <secondary>
            status = SS80_COMMANDS(secondary);
   11ae0:	0e 94 f3 ae 	call	0x15de6	; 0x15de6 <SS80_COMMANDS>
   11ae4:	0e c0       	rjmp	.+28     	; 0x11b02 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11ae6:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   11aea:	90 e0       	ldi	r25, 0x00	; 0
   11aec:	83 de       	rcall	.-762    	; 0x117f4 <PRINTER_is_MTA>
   11aee:	89 2b       	or	r24, r25
   11af0:	c9 f2       	breq	.-78     	; 0x11aa4 <GPIB_COMMANDS+0x3e>
        {
            if(unread)
   11af2:	11 23       	and	r17, r17
   11af4:	11 f0       	breq	.+4      	; 0x11afa <GPIB_COMMANDS+0x94>
                gpib_unread(val);
   11af6:	ce 01       	movw	r24, r28
   11af8:	23 d8       	rcall	.-4026   	; 0x10b40 <gpib_unread>
   11afa:	80 91 f2 1e 	lds	r24, 0x1EF2	; 0x801ef2 <secondary>
            status = PRINTER_COMMANDS(secondary);
   11afe:	0e 94 4c bd 	call	0x17a98	; 0x17a98 <PRINTER_COMMANDS>
   11b02:	10 92 f2 1e 	sts	0x1EF2, r1	; 0x801ef2 <secondary>
            secondary = 0;
   11b06:	df 91       	pop	r29
            return(status);
        }
    }
    return(0);
}
   11b08:	cf 91       	pop	r28
   11b0a:	1f 91       	pop	r17
   11b0c:	08 95       	ret

00011b0e <Send_Identify>:
   11b0e:	cf 92       	push	r12
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11b10:	df 92       	push	r13
   11b12:	ff 92       	push	r15
   11b14:	0f 93       	push	r16
   11b16:	1f 93       	push	r17
   11b18:	cf 93       	push	r28
   11b1a:	df 93       	push	r29
   11b1c:	cd b7       	in	r28, 0x3d	; 61
   11b1e:	de b7       	in	r29, 0x3e	; 62
   11b20:	2b 97       	sbiw	r28, 0x0b	; 11
   11b22:	0f b6       	in	r0, 0x3f	; 63
   11b24:	f8 94       	cli
   11b26:	de bf       	out	0x3e, r29	; 62
   11b28:	0f be       	out	0x3f, r0	; 63
   11b2a:	cd bf       	out	0x3d, r28	; 61
   11b2c:	f8 2e       	mov	r15, r24
   11b2e:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   11b30:	80 e0       	ldi	r24, 0x00	; 0
   11b32:	91 e0       	ldi	r25, 0x01	; 1
   11b34:	9b 87       	std	Y+11, r25	; 0x0b
   11b36:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   11b38:	8b 01       	movw	r16, r22
   11b3a:	20 e0       	ldi	r18, 0x00	; 0
   11b3c:	30 e0       	ldi	r19, 0x00	; 0
   11b3e:	42 e0       	ldi	r20, 0x02	; 2
   11b40:	50 e0       	ldi	r21, 0x00	; 0
   11b42:	60 e0       	ldi	r22, 0x00	; 0
   11b44:	70 e0       	ldi	r23, 0x00	; 0
   11b46:	ce 01       	movw	r24, r28
   11b48:	08 96       	adiw	r24, 0x08	; 8
   11b4a:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   11b4e:	ae 01       	movw	r20, r28
   11b50:	46 5f       	subi	r20, 0xF6	; 246
   11b52:	5f 4f       	sbci	r21, 0xFF	; 255
   11b54:	62 e0       	ldi	r22, 0x02	; 2
   11b56:	70 e0       	ldi	r23, 0x00	; 0
   11b58:	ce 01       	movw	r24, r28
   11b5a:	08 96       	adiw	r24, 0x08	; 8
   11b5c:	d4 dc       	rcall	.-1624   	; 0x11506 <gpib_write_str>
   11b5e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11b62:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11b66:	02 97       	sbiw	r24, 0x02	; 2
   11b68:	79 f0       	breq	.+30     	; 0x11b88 <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11b6a:	25 72       	andi	r18, 0x25	; 37
   11b6c:	33 27       	eor	r19, r19
   11b6e:	23 2b       	or	r18, r19
   11b70:	f9 f0       	breq	.+62     	; 0x11bb0 <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   11b72:	ed b7       	in	r30, 0x3d	; 61
   11b74:	fe b7       	in	r31, 0x3e	; 62
   11b76:	d7 82       	std	Z+7, r13	; 0x07
   11b78:	c6 82       	std	Z+6, r12	; 0x06
   11b7a:	8f 2d       	mov	r24, r15
   11b7c:	90 e0       	ldi	r25, 0x00	; 0
   11b7e:	95 83       	std	Z+5, r25	; 0x05
   11b80:	84 83       	std	Z+4, r24	; 0x04
   11b82:	87 ed       	ldi	r24, 0xD7	; 215
   11b84:	93 e1       	ldi	r25, 0x13	; 19
   11b86:	0e c0       	rjmp	.+28     	; 0x11ba4 <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11b88:	24 72       	andi	r18, 0x24	; 36
   11b8a:	33 27       	eor	r19, r19
   11b8c:	23 2b       	or	r18, r19
   11b8e:	81 f0       	breq	.+32     	; 0x11bb0 <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11b90:	ed b7       	in	r30, 0x3d	; 61
   11b92:	fe b7       	in	r31, 0x3e	; 62
   11b94:	d7 82       	std	Z+7, r13	; 0x07
   11b96:	c6 82       	std	Z+6, r12	; 0x06
   11b98:	8f 2d       	mov	r24, r15
   11b9a:	90 e0       	ldi	r25, 0x00	; 0
   11b9c:	95 83       	std	Z+5, r25	; 0x05
   11b9e:	84 83       	std	Z+4, r24	; 0x04
   11ba0:	8d eb       	ldi	r24, 0xBD	; 189
   11ba2:	93 e1       	ldi	r25, 0x13	; 19
   11ba4:	a0 e0       	ldi	r26, 0x00	; 0
   11ba6:	81 83       	std	Z+1, r24	; 0x01
   11ba8:	92 83       	std	Z+2, r25	; 0x02
   11baa:	a3 83       	std	Z+3, r26	; 0x03
   11bac:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
    return (status & ERROR_MASK);
   11bb0:	8a 85       	ldd	r24, Y+10	; 0x0a
   11bb2:	9b 85       	ldd	r25, Y+11	; 0x0b
   11bb4:	88 27       	eor	r24, r24
   11bb6:	90 7d       	andi	r25, 0xD0	; 208
}
   11bb8:	2b 96       	adiw	r28, 0x0b	; 11
   11bba:	0f b6       	in	r0, 0x3f	; 63
   11bbc:	f8 94       	cli
   11bbe:	de bf       	out	0x3e, r29	; 62
   11bc0:	0f be       	out	0x3f, r0	; 63
   11bc2:	cd bf       	out	0x3d, r28	; 61
   11bc4:	df 91       	pop	r29
   11bc6:	cf 91       	pop	r28
   11bc8:	1f 91       	pop	r17
   11bca:	0f 91       	pop	r16
   11bcc:	ff 90       	pop	r15
   11bce:	df 90       	pop	r13
   11bd0:	cf 90       	pop	r12
   11bd2:	08 95       	ret

00011bd4 <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11bd4:	00 d0       	rcall	.+0      	; 0x11bd6 <GPIB+0x2>
   11bd6:	00 d0       	rcall	.+0      	; 0x11bd8 <GPIB+0x4>
   11bd8:	1f 92       	push	r1
   11bda:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11bde:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   11be2:	85 30       	cpi	r24, 0x05	; 5
   11be4:	89 f4       	brne	.+34     	; 0x11c08 <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11be6:	27 71       	andi	r18, 0x17	; 23
   11be8:	33 27       	eor	r19, r19
   11bea:	23 2b       	or	r18, r19
   11bec:	51 f0       	breq	.+20     	; 0x11c02 <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   11bee:	85 ea       	ldi	r24, 0xA5	; 165
   11bf0:	93 e1       	ldi	r25, 0x13	; 19
   11bf2:	a0 e0       	ldi	r26, 0x00	; 0
   11bf4:	ed b7       	in	r30, 0x3d	; 61
   11bf6:	fe b7       	in	r31, 0x3e	; 62
   11bf8:	81 83       	std	Z+1, r24	; 0x01
   11bfa:	92 83       	std	Z+2, r25	; 0x02
   11bfc:	a3 83       	std	Z+3, r26	; 0x03
   11bfe:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        spoll = 0;
   11c02:	10 92 ee 1e 	sts	0x1EEE, r1	; 0x801eee <spoll>
   11c06:	a0 c0       	rjmp	.+320    	; 0x11d48 <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   11c08:	85 31       	cpi	r24, 0x15	; 21
   11c0a:	39 f4       	brne	.+14     	; 0x11c1a <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11c0c:	27 71       	andi	r18, 0x17	; 23
   11c0e:	33 27       	eor	r19, r19
   11c10:	23 2b       	or	r18, r19
   11c12:	b9 f3       	breq	.-18     	; 0x11c02 <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   11c14:	8d e8       	ldi	r24, 0x8D	; 141
   11c16:	93 e1       	ldi	r25, 0x13	; 19
   11c18:	ec cf       	rjmp	.-40     	; 0x11bf2 <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   11c1a:	88 31       	cpi	r24, 0x18	; 24
   11c1c:	d9 f4       	brne	.+54     	; 0x11c54 <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11c1e:	26 70       	andi	r18, 0x06	; 6
   11c20:	33 27       	eor	r19, r19
   11c22:	23 2b       	or	r18, r19
   11c24:	51 f0       	breq	.+20     	; 0x11c3a <GPIB+0x66>
            printf("[SPE]\n");
   11c26:	86 e8       	ldi	r24, 0x86	; 134
   11c28:	93 e1       	ldi	r25, 0x13	; 19
   11c2a:	a0 e0       	ldi	r26, 0x00	; 0
   11c2c:	ed b7       	in	r30, 0x3d	; 61
   11c2e:	fe b7       	in	r31, 0x3e	; 62
   11c30:	81 83       	std	Z+1, r24	; 0x01
   11c32:	92 83       	std	Z+2, r25	; 0x02
   11c34:	a3 83       	std	Z+3, r26	; 0x03
   11c36:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
        spoll = 1;
   11c3a:	81 e0       	ldi	r24, 0x01	; 1
   11c3c:	80 93 ee 1e 	sts	0x1EEE, r24	; 0x801eee <spoll>
        if(SS80_is_MTA(talking))
   11c40:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   11c44:	90 e0       	ldi	r25, 0x00	; 0
   11c46:	70 dd       	rcall	.-1312   	; 0x11728 <SS80_is_MTA>
   11c48:	89 2b       	or	r24, r25
   11c4a:	09 f4       	brne	.+2      	; 0x11c4e <GPIB+0x7a>
   11c4c:	7d c0       	rjmp	.+250    	; 0x11d48 <GPIB+0x174>
        {
            return( SS80_Report() );
   11c4e:	0e 94 ac aa 	call	0x15558	; 0x15558 <SS80_Report>
   11c52:	7c c0       	rjmp	.+248    	; 0x11d4c <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   11c54:	89 31       	cpi	r24, 0x19	; 25
   11c56:	39 f4       	brne	.+14     	; 0x11c66 <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11c58:	26 70       	andi	r18, 0x06	; 6
   11c5a:	33 27       	eor	r19, r19
   11c5c:	23 2b       	or	r18, r19
   11c5e:	89 f2       	breq	.-94     	; 0x11c02 <GPIB+0x2e>
            printf("[SPD]\n");
   11c60:	8f e7       	ldi	r24, 0x7F	; 127
   11c62:	93 e1       	ldi	r25, 0x13	; 19
   11c64:	c6 cf       	rjmp	.-116    	; 0x11bf2 <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   11c66:	84 30       	cpi	r24, 0x04	; 4
   11c68:	09 f0       	breq	.+2      	; 0x11c6c <GPIB+0x98>
   11c6a:	48 c0       	rjmp	.+144    	; 0x11cfc <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11c6c:	22 ff       	sbrs	r18, 2
   11c6e:	0a c0       	rjmp	.+20     	; 0x11c84 <GPIB+0xb0>
            printf("[SDC]\n");
   11c70:	88 e7       	ldi	r24, 0x78	; 120
   11c72:	93 e1       	ldi	r25, 0x13	; 19
   11c74:	a0 e0       	ldi	r26, 0x00	; 0
   11c76:	ed b7       	in	r30, 0x3d	; 61
   11c78:	fe b7       	in	r31, 0x3e	; 62
   11c7a:	81 83       	std	Z+1, r24	; 0x01
   11c7c:	92 83       	std	Z+2, r25	; 0x02
   11c7e:	a3 83       	std	Z+3, r26	; 0x03
   11c80:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11c84:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   11c88:	90 e0       	ldi	r25, 0x00	; 0
   11c8a:	3d dd       	rcall	.-1414   	; 0x11706 <SS80_is_MLA>
   11c8c:	89 2b       	or	r24, r25
   11c8e:	d9 f0       	breq	.+54     	; 0x11cc6 <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c90:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c94:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c98:	84 72       	andi	r24, 0x24	; 36
   11c9a:	99 27       	eor	r25, r25
   11c9c:	89 2b       	or	r24, r25
   11c9e:	51 f0       	breq	.+20     	; 0x11cb4 <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11ca0:	8c e6       	ldi	r24, 0x6C	; 108
   11ca2:	93 e1       	ldi	r25, 0x13	; 19
   11ca4:	a0 e0       	ldi	r26, 0x00	; 0
   11ca6:	ed b7       	in	r30, 0x3d	; 61
   11ca8:	fe b7       	in	r31, 0x3e	; 62
   11caa:	81 83       	std	Z+1, r24	; 0x01
   11cac:	92 83       	std	Z+2, r25	; 0x02
   11cae:	a3 83       	std	Z+3, r26	; 0x03
   11cb0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11cb4:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   11cb8:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   11cbc:	85 81       	ldd	r24, Z+5	; 0x05
   11cbe:	90 e0       	ldi	r25, 0x00	; 0
   11cc0:	0e 94 78 ab 	call	0x156f0	; 0x156f0 <SS80_Selected_Device_Clear>
   11cc4:	43 c0       	rjmp	.+134    	; 0x11d4c <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11cc6:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   11cca:	90 e0       	ldi	r25, 0x00	; 0
   11ccc:	4f dd       	rcall	.-1378   	; 0x1176c <AMIGO_is_MLA>
   11cce:	89 2b       	or	r24, r25
   11cd0:	d9 f1       	breq	.+118    	; 0x11d48 <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11cd2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11cd6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11cda:	84 72       	andi	r24, 0x24	; 36
   11cdc:	99 27       	eor	r25, r25
   11cde:	89 2b       	or	r24, r25
   11ce0:	51 f0       	breq	.+20     	; 0x11cf6 <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   11ce2:	8f e5       	ldi	r24, 0x5F	; 95
   11ce4:	93 e1       	ldi	r25, 0x13	; 19
   11ce6:	a0 e0       	ldi	r26, 0x00	; 0
   11ce8:	ed b7       	in	r30, 0x3d	; 61
   11cea:	fe b7       	in	r31, 0x3e	; 62
   11cec:	81 83       	std	Z+1, r24	; 0x01
   11cee:	92 83       	std	Z+2, r25	; 0x02
   11cf0:	a3 83       	std	Z+3, r26	; 0x03
   11cf2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
            return( amigo_cmd_clear() );
   11cf6:	0e 94 b9 b5 	call	0x16b72	; 0x16b72 <amigo_cmd_clear>
   11cfa:	28 c0       	rjmp	.+80     	; 0x11d4c <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   11cfc:	84 31       	cpi	r24, 0x14	; 20
   11cfe:	99 f4       	brne	.+38     	; 0x11d26 <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11d00:	22 ff       	sbrs	r18, 2
   11d02:	0a c0       	rjmp	.+20     	; 0x11d18 <GPIB+0x144>
            printf("[DCL]\n");
   11d04:	88 e5       	ldi	r24, 0x58	; 88
   11d06:	93 e1       	ldi	r25, 0x13	; 19
   11d08:	a0 e0       	ldi	r26, 0x00	; 0
   11d0a:	ed b7       	in	r30, 0x3d	; 61
   11d0c:	fe b7       	in	r31, 0x3e	; 62
   11d0e:	81 83       	std	Z+1, r24	; 0x01
   11d10:	92 83       	std	Z+2, r25	; 0x02
   11d12:	a3 83       	std	Z+3, r26	; 0x03
   11d14:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
        SS80_Universal_Device_Clear();
   11d18:	0e 94 6a ab 	call	0x156d4	; 0x156d4 <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   11d1c:	0e 94 b9 b5 	call	0x16b72	; 0x16b72 <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   11d20:	0e 94 d8 bb 	call	0x177b0	; 0x177b0 <printer_close>
   11d24:	11 c0       	rjmp	.+34     	; 0x11d48 <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11d26:	25 71       	andi	r18, 0x15	; 21
   11d28:	33 27       	eor	r19, r19
   11d2a:	23 2b       	or	r18, r19
   11d2c:	69 f0       	breq	.+26     	; 0x11d48 <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   11d2e:	90 e0       	ldi	r25, 0x00	; 0
   11d30:	ed b7       	in	r30, 0x3d	; 61
   11d32:	fe b7       	in	r31, 0x3e	; 62
   11d34:	95 83       	std	Z+5, r25	; 0x05
   11d36:	84 83       	std	Z+4, r24	; 0x04
   11d38:	87 e3       	ldi	r24, 0x37	; 55
   11d3a:	93 e1       	ldi	r25, 0x13	; 19
   11d3c:	a0 e0       	ldi	r26, 0x00	; 0
   11d3e:	81 83       	std	Z+1, r24	; 0x01
   11d40:	92 83       	std	Z+2, r25	; 0x02
   11d42:	a3 83       	std	Z+3, r26	; 0x03
   11d44:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    return(0);
   11d48:	80 e0       	ldi	r24, 0x00	; 0
   11d4a:	90 e0       	ldi	r25, 0x00	; 0
}
   11d4c:	0f 90       	pop	r0
   11d4e:	0f 90       	pop	r0
   11d50:	0f 90       	pop	r0
   11d52:	0f 90       	pop	r0
   11d54:	0f 90       	pop	r0
   11d56:	08 95       	ret

00011d58 <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   11d58:	cf 93       	push	r28
   11d5a:	df 93       	push	r29
   11d5c:	00 d0       	rcall	.+0      	; 0x11d5e <GPIB_TALK+0x6>
   11d5e:	00 d0       	rcall	.+0      	; 0x11d60 <GPIB_TALK+0x8>
   11d60:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   11d62:	90 91 f1 1e 	lds	r25, 0x1EF1	; 0x801ef1 <talking>
   11d66:	90 93 f4 1e 	sts	0x1EF4, r25	; 0x801ef4 <talking_last>
    talking = ch;
   11d6a:	80 93 f1 1e 	sts	0x1EF1, r24	; 0x801ef1 <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   11d6e:	8f 35       	cpi	r24, 0x5F	; 95
   11d70:	79 f4       	brne	.+30     	; 0x11d90 <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11d72:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11d76:	82 ff       	sbrs	r24, 2
   11d78:	7f c0       	rjmp	.+254    	; 0x11e78 <GPIB_TALK+0x120>
            printf("[UNT]\n");
   11d7a:	84 ee       	ldi	r24, 0xE4	; 228
   11d7c:	92 e1       	ldi	r25, 0x12	; 18
   11d7e:	a0 e0       	ldi	r26, 0x00	; 0
   11d80:	ed b7       	in	r30, 0x3d	; 61
   11d82:	fe b7       	in	r31, 0x3e	; 62
   11d84:	81 83       	std	Z+1, r24	; 0x01
   11d86:	92 83       	std	Z+2, r25	; 0x02
   11d88:	a3 83       	std	Z+3, r26	; 0x03
   11d8a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   11d8e:	74 c0       	rjmp	.+232    	; 0x11e78 <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   11d90:	c8 2f       	mov	r28, r24
   11d92:	d0 e0       	ldi	r29, 0x00	; 0
   11d94:	ce 01       	movw	r24, r28
   11d96:	c8 dc       	rcall	.-1648   	; 0x11728 <SS80_is_MTA>
   11d98:	89 2b       	or	r24, r25
   11d9a:	e1 f0       	breq	.+56     	; 0x11dd4 <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d9c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11da0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11da4:	84 72       	andi	r24, 0x24	; 36
   11da6:	99 27       	eor	r25, r25
   11da8:	89 2b       	or	r24, r25
   11daa:	61 f0       	breq	.+24     	; 0x11dc4 <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   11dac:	ed b7       	in	r30, 0x3d	; 61
   11dae:	fe b7       	in	r31, 0x3e	; 62
   11db0:	d5 83       	std	Z+5, r29	; 0x05
   11db2:	c4 83       	std	Z+4, r28	; 0x04
   11db4:	83 ed       	ldi	r24, 0xD3	; 211
   11db6:	92 e1       	ldi	r25, 0x12	; 18
   11db8:	a0 e0       	ldi	r26, 0x00	; 0
   11dba:	81 83       	std	Z+1, r24	; 0x01
   11dbc:	92 83       	std	Z+2, r25	; 0x02
   11dbe:	a3 83       	std	Z+3, r26	; 0x03
   11dc0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif

        if (spoll)
   11dc4:	80 91 ee 1e 	lds	r24, 0x1EEE	; 0x801eee <spoll>
   11dc8:	88 23       	and	r24, r24
   11dca:	09 f4       	brne	.+2      	; 0x11dce <GPIB_TALK+0x76>
   11dcc:	55 c0       	rjmp	.+170    	; 0x11e78 <GPIB_TALK+0x120>
        {
            SS80_Report();
   11dce:	0e 94 ac aa 	call	0x15558	; 0x15558 <SS80_Report>
   11dd2:	52 c0       	rjmp	.+164    	; 0x11e78 <GPIB_TALK+0x120>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   11dd4:	ce 01       	movw	r24, r28
   11dd6:	db dc       	rcall	.-1610   	; 0x1178e <AMIGO_is_MTA>
   11dd8:	89 2b       	or	r24, r25
   11dda:	81 f0       	breq	.+32     	; 0x11dfc <GPIB_TALK+0xa4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ddc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11de0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11de4:	84 72       	andi	r24, 0x24	; 36
   11de6:	99 27       	eor	r25, r25
   11de8:	89 2b       	or	r24, r25
   11dea:	09 f4       	brne	.+2      	; 0x11dee <GPIB_TALK+0x96>
   11dec:	45 c0       	rjmp	.+138    	; 0x11e78 <GPIB_TALK+0x120>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   11dee:	ed b7       	in	r30, 0x3d	; 61
   11df0:	fe b7       	in	r31, 0x3e	; 62
   11df2:	d5 83       	std	Z+5, r29	; 0x05
   11df4:	c4 83       	std	Z+4, r28	; 0x04
   11df6:	81 ec       	ldi	r24, 0xC1	; 193
   11df8:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   11dfa:	38 c0       	rjmp	.+112    	; 0x11e6c <GPIB_TALK+0x114>
   11dfc:	ce 01       	movw	r24, r28
   11dfe:	fa dc       	rcall	.-1548   	; 0x117f4 <PRINTER_is_MTA>
   11e00:	89 2b       	or	r24, r25
   11e02:	79 f0       	breq	.+30     	; 0x11e22 <GPIB_TALK+0xca>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e04:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11e08:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e0c:	84 72       	andi	r24, 0x24	; 36
   11e0e:	99 27       	eor	r25, r25
   11e10:	89 2b       	or	r24, r25
   11e12:	91 f1       	breq	.+100    	; 0x11e78 <GPIB_TALK+0x120>
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   11e14:	ed b7       	in	r30, 0x3d	; 61
   11e16:	fe b7       	in	r31, 0x3e	; 62
   11e18:	d5 83       	std	Z+5, r29	; 0x05
   11e1a:	c4 83       	std	Z+4, r28	; 0x04
   11e1c:	8d ea       	ldi	r24, 0xAD	; 173
   11e1e:	92 e1       	ldi	r25, 0x12	; 18
   11e20:	25 c0       	rjmp	.+74     	; 0x11e6c <GPIB_TALK+0x114>
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   11e22:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   11e26:	90 e0       	ldi	r25, 0x00	; 0
   11e28:	d4 dc       	rcall	.-1624   	; 0x117d2 <PRINTER_is_MLA>
   11e2a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11e2e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e32:	89 2b       	or	r24, r25
   11e34:	99 f0       	breq	.+38     	; 0x11e5c <GPIB_TALK+0x104>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e36:	24 72       	andi	r18, 0x24	; 36
   11e38:	33 27       	eor	r19, r19
   11e3a:	23 2b       	or	r18, r19
   11e3c:	51 f0       	breq	.+20     	; 0x11e52 <GPIB_TALK+0xfa>
            printf("[PRINTER OPEN]\n");
   11e3e:	8d e9       	ldi	r24, 0x9D	; 157
   11e40:	92 e1       	ldi	r25, 0x12	; 18
   11e42:	a0 e0       	ldi	r26, 0x00	; 0
   11e44:	ed b7       	in	r30, 0x3d	; 61
   11e46:	fe b7       	in	r31, 0x3e	; 62
   11e48:	81 83       	std	Z+1, r24	; 0x01
   11e4a:	92 83       	std	Z+2, r25	; 0x02
   11e4c:	a3 83       	std	Z+3, r26	; 0x03
   11e4e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        printer_open(NULL);
   11e52:	80 e0       	ldi	r24, 0x00	; 0
   11e54:	90 e0       	ldi	r25, 0x00	; 0
   11e56:	0e 94 30 bc 	call	0x17860	; 0x17860 <printer_open>
   11e5a:	0e c0       	rjmp	.+28     	; 0x11e78 <GPIB_TALK+0x120>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11e5c:	22 ff       	sbrs	r18, 2
   11e5e:	0c c0       	rjmp	.+24     	; 0x11e78 <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   11e60:	ed b7       	in	r30, 0x3d	; 61
   11e62:	fe b7       	in	r31, 0x3e	; 62
   11e64:	d5 83       	std	Z+5, r29	; 0x05
   11e66:	c4 83       	std	Z+4, r28	; 0x04
   11e68:	81 e9       	ldi	r24, 0x91	; 145
   11e6a:	92 e1       	ldi	r25, 0x12	; 18
   11e6c:	a0 e0       	ldi	r26, 0x00	; 0
   11e6e:	81 83       	std	Z+1, r24	; 0x01
   11e70:	92 83       	std	Z+2, r25	; 0x02
   11e72:	a3 83       	std	Z+3, r26	; 0x03
   11e74:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
    return(0);
}                                                 // Talk Address primary address group
   11e78:	80 e0       	ldi	r24, 0x00	; 0
   11e7a:	90 e0       	ldi	r25, 0x00	; 0
   11e7c:	cd b7       	in	r28, 0x3d	; 61
   11e7e:	de b7       	in	r29, 0x3e	; 62
   11e80:	25 96       	adiw	r28, 0x05	; 5
   11e82:	e2 e0       	ldi	r30, 0x02	; 2
   11e84:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00011e88 <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   11e88:	a9 e0       	ldi	r26, 0x09	; 9
   11e8a:	b0 e0       	ldi	r27, 0x00	; 0
   11e8c:	ea e4       	ldi	r30, 0x4A	; 74
   11e8e:	ff e8       	ldi	r31, 0x8F	; 143
   11e90:	0c 94 6b e3 	jmp	0x1c6d6	; 0x1c6d6 <__prologue_saves__+0x1e>
   11e94:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   11e96:	c8 2f       	mov	r28, r24
   11e98:	d0 e0       	ldi	r29, 0x00	; 0
   11e9a:	ce 01       	movw	r24, r28
   11e9c:	56 dc       	rcall	.-1876   	; 0x1174a <SS80_is_MSA>
   11e9e:	89 2b       	or	r24, r25
   11ea0:	09 f1       	breq	.+66     	; 0x11ee4 <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ea2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11ea6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11eaa:	84 72       	andi	r24, 0x24	; 36
   11eac:	99 27       	eor	r25, r25
   11eae:	89 2b       	or	r24, r25
   11eb0:	61 f0       	breq	.+24     	; 0x11eca <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   11eb2:	ed b7       	in	r30, 0x3d	; 61
   11eb4:	fe b7       	in	r31, 0x3e	; 62
   11eb6:	d5 83       	std	Z+5, r29	; 0x05
   11eb8:	c4 83       	std	Z+4, r28	; 0x04
   11eba:	80 e8       	ldi	r24, 0x80	; 128
   11ebc:	92 e1       	ldi	r25, 0x12	; 18
   11ebe:	a0 e0       	ldi	r26, 0x00	; 0
   11ec0:	81 83       	std	Z+1, r24	; 0x01
   11ec2:	92 83       	std	Z+2, r25	; 0x02
   11ec4:	a3 83       	std	Z+3, r26	; 0x03
   11ec6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   11eca:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   11ece:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   11ed2:	81 81       	ldd	r24, Z+1	; 0x01
   11ed4:	90 e0       	ldi	r25, 0x00	; 0
   11ed6:	0e 94 6a 85 	call	0x10ad4	; 0x10ad4 <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   11eda:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   11ede:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   11ee2:	25 c0       	rjmp	.+74     	; 0x11f2e <GPIB_SECONDARY_ADDRESS+0xa6>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   11ee4:	ce 01       	movw	r24, r28
   11ee6:	64 dc       	rcall	.-1848   	; 0x117b0 <AMIGO_is_MSA>
   11ee8:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11eec:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11ef0:	89 2b       	or	r24, r25
   11ef2:	11 f1       	breq	.+68     	; 0x11f38 <GPIB_SECONDARY_ADDRESS+0xb0>
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ef4:	c9 01       	movw	r24, r18
   11ef6:	84 72       	andi	r24, 0x24	; 36
   11ef8:	99 27       	eor	r25, r25
   11efa:	89 2b       	or	r24, r25
   11efc:	61 f0       	breq	.+24     	; 0x11f16 <GPIB_SECONDARY_ADDRESS+0x8e>
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   11efe:	ed b7       	in	r30, 0x3d	; 61
   11f00:	fe b7       	in	r31, 0x3e	; 62
   11f02:	d5 83       	std	Z+5, r29	; 0x05
   11f04:	c4 83       	std	Z+4, r28	; 0x04
   11f06:	8e e6       	ldi	r24, 0x6E	; 110
   11f08:	92 e1       	ldi	r25, 0x12	; 18
   11f0a:	a0 e0       	ldi	r26, 0x00	; 0
   11f0c:	81 83       	std	Z+1, r24	; 0x01
   11f0e:	92 83       	std	Z+2, r25	; 0x02
   11f10:	a3 83       	std	Z+3, r26	; 0x03
   11f12:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   11f16:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   11f1a:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   11f1e:	81 81       	ldd	r24, Z+1	; 0x01
   11f20:	90 e0       	ldi	r25, 0x00	; 0
   11f22:	0e 94 6a 85 	call	0x10ad4	; 0x10ad4 <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   11f26:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   11f2a:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   11f2e:	64 81       	ldd	r22, Z+4	; 0x04
   11f30:	75 81       	ldd	r23, Z+5	; 0x05
   11f32:	81 2f       	mov	r24, r17
   11f34:	ec dd       	rcall	.-1064   	; 0x11b0e <Send_Identify>
   11f36:	1d c0       	rjmp	.+58     	; 0x11f72 <GPIB_SECONDARY_ADDRESS+0xea>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f38:	c9 01       	movw	r24, r18
   11f3a:	84 72       	andi	r24, 0x24	; 36
   11f3c:	99 27       	eor	r25, r25
   11f3e:	00 97       	sbiw	r24, 0x00	; 0
   11f40:	c1 f0       	breq	.+48     	; 0x11f72 <GPIB_SECONDARY_ADDRESS+0xea>
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   11f42:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   11f46:	90 e0       	ldi	r25, 0x00	; 0
   11f48:	ed b7       	in	r30, 0x3d	; 61
   11f4a:	fe b7       	in	r31, 0x3e	; 62
   11f4c:	91 87       	std	Z+9, r25	; 0x09
   11f4e:	80 87       	std	Z+8, r24	; 0x08
   11f50:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   11f54:	90 e0       	ldi	r25, 0x00	; 0
   11f56:	97 83       	std	Z+7, r25	; 0x07
   11f58:	86 83       	std	Z+6, r24	; 0x06
   11f5a:	d5 83       	std	Z+5, r29	; 0x05
   11f5c:	c4 83       	std	Z+4, r28	; 0x04
   11f5e:	88 e4       	ldi	r24, 0x48	; 72
   11f60:	92 e1       	ldi	r25, 0x12	; 18
   11f62:	a0 e0       	ldi	r26, 0x00	; 0
   11f64:	81 83       	std	Z+1, r24	; 0x01
   11f66:	92 83       	std	Z+2, r25	; 0x02
   11f68:	a3 83       	std	Z+3, r26	; 0x03
   11f6a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   11f6e:	80 e0       	ldi	r24, 0x00	; 0
   11f70:	90 e0       	ldi	r25, 0x00	; 0
}
   11f72:	cd b7       	in	r28, 0x3d	; 61
   11f74:	de b7       	in	r29, 0x3e	; 62
   11f76:	29 96       	adiw	r28, 0x09	; 9
   11f78:	e3 e0       	ldi	r30, 0x03	; 3
   11f7a:	0c 94 87 e3 	jmp	0x1c70e	; 0x1c70e <__epilogue_restores__+0x1e>

00011f7e <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   11f7e:	00 d0       	rcall	.+0      	; 0x11f80 <listen_cleanup+0x2>
   11f80:	1f 92       	push	r1
    if(listening_last)
   11f82:	60 91 ed 1e 	lds	r22, 0x1EED	; 0x801eed <listening_last>
   11f86:	66 23       	and	r22, r22
   11f88:	e1 f0       	breq	.+56     	; 0x11fc2 <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   11f8a:	70 e0       	ldi	r23, 0x00	; 0
   11f8c:	40 e2       	ldi	r20, 0x20	; 32
   11f8e:	50 e0       	ldi	r21, 0x00	; 0
   11f90:	84 e0       	ldi	r24, 0x04	; 4
   11f92:	90 e0       	ldi	r25, 0x00	; 0
   11f94:	9c d6       	rcall	.+3384   	; 0x12cce <find_device>
        if(index == -1)
   11f96:	01 96       	adiw	r24, 0x01	; 1
   11f98:	a1 f0       	breq	.+40     	; 0x11fc2 <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f9a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f9e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11fa2:	84 72       	andi	r24, 0x24	; 36
   11fa4:	99 27       	eor	r25, r25
   11fa6:	89 2b       	or	r24, r25
   11fa8:	51 f0       	breq	.+20     	; 0x11fbe <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   11faa:	87 e3       	ldi	r24, 0x37	; 55
   11fac:	92 e1       	ldi	r25, 0x12	; 18
   11fae:	a0 e0       	ldi	r26, 0x00	; 0
   11fb0:	ed b7       	in	r30, 0x3d	; 61
   11fb2:	fe b7       	in	r31, 0x3e	; 62
   11fb4:	81 83       	std	Z+1, r24	; 0x01
   11fb6:	92 83       	std	Z+2, r25	; 0x02
   11fb8:	a3 83       	std	Z+3, r26	; 0x03
   11fba:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        printer_close();
   11fbe:	0e 94 d8 bb 	call	0x177b0	; 0x177b0 <printer_close>
    }
}
   11fc2:	0f 90       	pop	r0
   11fc4:	0f 90       	pop	r0
   11fc6:	0f 90       	pop	r0
   11fc8:	08 95       	ret

00011fca <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   11fca:	cf 93       	push	r28
   11fcc:	df 93       	push	r29
   11fce:	00 d0       	rcall	.+0      	; 0x11fd0 <GPIB_LISTEN+0x6>
   11fd0:	00 d0       	rcall	.+0      	; 0x11fd2 <GPIB_LISTEN+0x8>
   11fd2:	1f 92       	push	r1
   11fd4:	c8 2f       	mov	r28, r24
    listening_last = listening;
   11fd6:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   11fda:	80 93 ed 1e 	sts	0x1EED, r24	; 0x801eed <listening_last>
    listening = ch;
   11fde:	c0 93 f3 1e 	sts	0x1EF3, r28	; 0x801ef3 <listening>

    listen_cleanup();
   11fe2:	cd df       	rcall	.-102    	; 0x11f7e <listen_cleanup>

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   11fe4:	cf 33       	cpi	r28, 0x3F	; 63
   11fe6:	19 f5       	brne	.+70     	; 0x1202e <GPIB_LISTEN+0x64>
    {
        listening = 0;
   11fe8:	10 92 f3 1e 	sts	0x1EF3, r1	; 0x801ef3 <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11fec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11ff0:	82 ff       	sbrs	r24, 2
   11ff2:	74 c0       	rjmp	.+232    	; 0x120dc <GPIB_LISTEN+0x112>
        {
            printf("[UNL]\n");
   11ff4:	80 e3       	ldi	r24, 0x30	; 48
   11ff6:	93 e1       	ldi	r25, 0x13	; 19
   11ff8:	a0 e0       	ldi	r26, 0x00	; 0
   11ffa:	ed b7       	in	r30, 0x3d	; 61
   11ffc:	fe b7       	in	r31, 0x3e	; 62
   11ffe:	81 83       	std	Z+1, r24	; 0x01
   12000:	92 83       	std	Z+2, r25	; 0x02
   12002:	a3 83       	std	Z+3, r26	; 0x03
   12004:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   12008:	80 91 eb 1c 	lds	r24, 0x1CEB	; 0x801ceb <lastcmd>
   1200c:	90 91 ec 1c 	lds	r25, 0x1CEC	; 0x801cec <lastcmd+0x1>
   12010:	8f 35       	cpi	r24, 0x5F	; 95
   12012:	91 05       	cpc	r25, r1
   12014:	09 f0       	breq	.+2      	; 0x12018 <GPIB_LISTEN+0x4e>
   12016:	62 c0       	rjmp	.+196    	; 0x120dc <GPIB_LISTEN+0x112>
                printf("\n");
   12018:	8e e2       	ldi	r24, 0x2E	; 46
   1201a:	93 e1       	ldi	r25, 0x13	; 19
   1201c:	a0 e0       	ldi	r26, 0x00	; 0
   1201e:	ed b7       	in	r30, 0x3d	; 61
   12020:	fe b7       	in	r31, 0x3e	; 62
   12022:	81 83       	std	Z+1, r24	; 0x01
   12024:	92 83       	std	Z+2, r25	; 0x02
   12026:	a3 83       	std	Z+3, r26	; 0x03
   12028:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1202c:	57 c0       	rjmp	.+174    	; 0x120dc <GPIB_LISTEN+0x112>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   1202e:	d0 e0       	ldi	r29, 0x00	; 0
   12030:	ce 01       	movw	r24, r28
   12032:	9c db       	rcall	.-2248   	; 0x1176c <AMIGO_is_MLA>
   12034:	89 2b       	or	r24, r25
   12036:	81 f0       	breq	.+32     	; 0x12058 <GPIB_LISTEN+0x8e>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12038:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1203c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12040:	84 72       	andi	r24, 0x24	; 36
   12042:	99 27       	eor	r25, r25
   12044:	89 2b       	or	r24, r25
   12046:	09 f4       	brne	.+2      	; 0x1204a <GPIB_LISTEN+0x80>
   12048:	49 c0       	rjmp	.+146    	; 0x120dc <GPIB_LISTEN+0x112>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   1204a:	ed b7       	in	r30, 0x3d	; 61
   1204c:	fe b7       	in	r31, 0x3e	; 62
   1204e:	d5 83       	std	Z+5, r29	; 0x05
   12050:	c4 83       	std	Z+4, r28	; 0x04
   12052:	8c e1       	ldi	r24, 0x1C	; 28
   12054:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   12056:	3c c0       	rjmp	.+120    	; 0x120d0 <GPIB_LISTEN+0x106>
   12058:	ce 01       	movw	r24, r28
   1205a:	55 db       	rcall	.-2390   	; 0x11706 <SS80_is_MLA>
   1205c:	89 2b       	or	r24, r25
   1205e:	79 f0       	breq	.+30     	; 0x1207e <GPIB_LISTEN+0xb4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12060:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12064:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12068:	84 72       	andi	r24, 0x24	; 36
   1206a:	99 27       	eor	r25, r25
   1206c:	89 2b       	or	r24, r25
   1206e:	b1 f1       	breq	.+108    	; 0x120dc <GPIB_LISTEN+0x112>
            printf("[LA %02XH SS80]\n", 0xff & ch);
   12070:	ed b7       	in	r30, 0x3d	; 61
   12072:	fe b7       	in	r31, 0x3e	; 62
   12074:	d5 83       	std	Z+5, r29	; 0x05
   12076:	c4 83       	std	Z+4, r28	; 0x04
   12078:	8b e0       	ldi	r24, 0x0B	; 11
   1207a:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   1207c:	29 c0       	rjmp	.+82     	; 0x120d0 <GPIB_LISTEN+0x106>
   1207e:	ce 01       	movw	r24, r28
   12080:	a8 db       	rcall	.-2224   	; 0x117d2 <PRINTER_is_MLA>
   12082:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12086:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1208a:	89 2b       	or	r24, r25
   1208c:	c9 f0       	breq	.+50     	; 0x120c0 <GPIB_LISTEN+0xf6>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1208e:	24 72       	andi	r18, 0x24	; 36
   12090:	33 27       	eor	r19, r19
   12092:	23 2b       	or	r18, r19
   12094:	61 f0       	breq	.+24     	; 0x120ae <GPIB_LISTEN+0xe4>
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   12096:	ed b7       	in	r30, 0x3d	; 61
   12098:	fe b7       	in	r31, 0x3e	; 62
   1209a:	d5 83       	std	Z+5, r29	; 0x05
   1209c:	c4 83       	std	Z+4, r28	; 0x04
   1209e:	87 ef       	ldi	r24, 0xF7	; 247
   120a0:	92 e1       	ldi	r25, 0x12	; 18
   120a2:	a0 e0       	ldi	r26, 0x00	; 0
   120a4:	81 83       	std	Z+1, r24	; 0x01
   120a6:	92 83       	std	Z+2, r25	; 0x02
   120a8:	a3 83       	std	Z+3, r26	; 0x03
   120aa:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
        if(talking != UNT)
   120ae:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   120b2:	8f 35       	cpi	r24, 0x5F	; 95
   120b4:	99 f0       	breq	.+38     	; 0x120dc <GPIB_LISTEN+0x112>
        {
///@brief NULL creates a file named based on date and time
            printer_open(NULL);
   120b6:	80 e0       	ldi	r24, 0x00	; 0
   120b8:	90 e0       	ldi	r25, 0x00	; 0
   120ba:	0e 94 30 bc 	call	0x17860	; 0x17860 <printer_open>
   120be:	0e c0       	rjmp	.+28     	; 0x120dc <GPIB_LISTEN+0x112>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   120c0:	22 ff       	sbrs	r18, 2
   120c2:	0c c0       	rjmp	.+24     	; 0x120dc <GPIB_LISTEN+0x112>
        printf("[LA %02XH]\n", 0xff & ch);
   120c4:	ed b7       	in	r30, 0x3d	; 61
   120c6:	fe b7       	in	r31, 0x3e	; 62
   120c8:	d5 83       	std	Z+5, r29	; 0x05
   120ca:	c4 83       	std	Z+4, r28	; 0x04
   120cc:	8b ee       	ldi	r24, 0xEB	; 235
   120ce:	92 e1       	ldi	r25, 0x12	; 18
   120d0:	a0 e0       	ldi	r26, 0x00	; 0
   120d2:	81 83       	std	Z+1, r24	; 0x01
   120d4:	92 83       	std	Z+2, r25	; 0x02
   120d6:	a3 83       	std	Z+3, r26	; 0x03
   120d8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   120dc:	80 e0       	ldi	r24, 0x00	; 0
   120de:	90 e0       	ldi	r25, 0x00	; 0
   120e0:	cd b7       	in	r28, 0x3d	; 61
   120e2:	de b7       	in	r29, 0x3e	; 62
   120e4:	25 96       	adiw	r28, 0x05	; 5
   120e6:	e2 e0       	ldi	r30, 0x02	; 2
   120e8:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

000120ec <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   120ec:	cf 93       	push	r28
   120ee:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   120f0:	92 db       	rcall	.-2268   	; 0x11816 <gpib_init_devices>
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   120f2:	10 92 64 19 	sts	0x1964, r1	; 0x801964 <gpib_log_fp+0x1>
   120f6:	10 92 63 19 	sts	0x1963, r1	; 0x801963 <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   120fa:	80 e0       	ldi	r24, 0x00	; 0
   120fc:	90 e0       	ldi	r25, 0x00	; 0
   120fe:	45 d8       	rcall	.-3958   	; 0x1118a <gpib_read_byte>
   12100:	ec 01       	movw	r28, r24

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   12102:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12106:	83 ff       	sbrs	r24, 3
            gpib_decode(val);
   12108:	02 c0       	rjmp	.+4      	; 0x1210e <gpib_task+0x22>
   1210a:	ce 01       	movw	r24, r28
   1210c:	56 d9       	rcall	.-3412   	; 0x113ba <gpib_decode>
#endif
        status = gpib_error_test(val);
   1210e:	ce 01       	movw	r24, r28
   12110:	1d dc       	rcall	.-1990   	; 0x1194c <gpib_error_test>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   12112:	9c 01       	movw	r18, r24
   12114:	23 70       	andi	r18, 0x03	; 3
   12116:	33 27       	eor	r19, r19
   12118:	23 2b       	or	r18, r19
   1211a:	09 f0       	breq	.+2      	; 0x1211e <gpib_task+0x32>
   1211c:	43 c0       	rjmp	.+134    	; 0x121a4 <gpib_task+0xb8>
        {
            return;
        }
        else if(status)
   1211e:	89 2b       	or	r24, r25
   12120:	61 f7       	brne	.-40     	; 0x120fa <gpib_task+0xe>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   12122:	d2 ff       	sbrs	r29, 2
   12124:	26 c0       	rjmp	.+76     	; 0x12172 <gpib_task+0x86>
        {
            ch = val & CMD_MASK;
   12126:	8c 2f       	mov	r24, r28
   12128:	8f 77       	andi	r24, 0x7F	; 127
            if(ch <= 0x1f)
   1212a:	80 32       	cpi	r24, 0x20	; 32
            {
                GPIB(ch);
   1212c:	10 f4       	brcc	.+4      	; 0x12132 <gpib_task+0x46>
   1212e:	52 dd       	rcall	.-1372   	; 0x11bd4 <GPIB>
                continue;
   12130:	e4 cf       	rjmp	.-56     	; 0x120fa <gpib_task+0xe>
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   12132:	90 ee       	ldi	r25, 0xE0	; 224
   12134:	98 0f       	add	r25, r24
   12136:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_LISTEN(ch);
   12138:	10 f4       	brcc	.+4      	; 0x1213e <gpib_task+0x52>
   1213a:	47 df       	rcall	.-370    	; 0x11fca <GPIB_LISTEN>
                continue;
   1213c:	de cf       	rjmp	.-68     	; 0x120fa <gpib_task+0xe>
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   1213e:	90 ec       	ldi	r25, 0xC0	; 192
   12140:	98 0f       	add	r25, r24
   12142:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_TALK(ch);
   12144:	10 f4       	brcc	.+4      	; 0x1214a <gpib_task+0x5e>
   12146:	08 de       	rcall	.-1008   	; 0x11d58 <GPIB_TALK>
                continue;
   12148:	d8 cf       	rjmp	.-80     	; 0x120fa <gpib_task+0xe>
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   1214a:	90 91 f3 1e 	lds	r25, 0x1EF3	; 0x801ef3 <listening>
   1214e:	99 23       	and	r25, r25
   12150:	59 f0       	breq	.+22     	; 0x12168 <gpib_task+0x7c>
   12152:	20 91 eb 1c 	lds	r18, 0x1CEB	; 0x801ceb <lastcmd>
   12156:	30 91 ec 1c 	lds	r19, 0x1CEC	; 0x801cec <lastcmd+0x1>
   1215a:	2f 35       	cpi	r18, 0x5F	; 95
   1215c:	31 05       	cpc	r19, r1
            {
                secondary = 0;
   1215e:	21 f4       	brne	.+8      	; 0x12168 <gpib_task+0x7c>
   12160:	10 92 f2 1e 	sts	0x1EF2, r1	; 0x801ef2 <secondary>
                GPIB_SECONDARY_ADDRESS(ch);
   12164:	91 de       	rcall	.-734    	; 0x11e88 <GPIB_SECONDARY_ADDRESS>
                continue;
   12166:	c9 cf       	rjmp	.-110    	; 0x120fa <gpib_task+0xe>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   12168:	80 93 f2 1e 	sts	0x1EF2, r24	; 0x801ef2 <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   1216c:	60 e0       	ldi	r22, 0x00	; 0
   1216e:	90 e0       	ldi	r25, 0x00	; 0
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   12170:	12 c0       	rjmp	.+36     	; 0x12196 <gpib_task+0xaa>
   12172:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   12176:	90 e0       	ldi	r25, 0x00	; 0
   12178:	2c db       	rcall	.-2472   	; 0x117d2 <PRINTER_is_MLA>
   1217a:	89 2b       	or	r24, r25
   1217c:	29 f0       	breq	.+10     	; 0x12188 <gpib_task+0x9c>
            {
                printer_buffer( 0xff & val );
   1217e:	ce 01       	movw	r24, r28
   12180:	99 27       	eor	r25, r25
   12182:	0e 94 d3 bc 	call	0x179a6	; 0x179a6 <printer_buffer>
                continue;
   12186:	b9 cf       	rjmp	.-142    	; 0x120fa <gpib_task+0xe>
            }

            if(!secondary)
   12188:	80 91 f2 1e 	lds	r24, 0x1EF2	; 0x801ef2 <secondary>
   1218c:	88 23       	and	r24, r24
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   1218e:	09 f4       	brne	.+2      	; 0x12192 <gpib_task+0xa6>
   12190:	b4 cf       	rjmp	.-152    	; 0x120fa <gpib_task+0xe>
   12192:	61 e0       	ldi	r22, 0x01	; 1
   12194:	ce 01       	movw	r24, r28
            status = gpib_error_test(status);
   12196:	67 dc       	rcall	.-1842   	; 0x11a66 <GPIB_COMMANDS>
   12198:	d9 db       	rcall	.-2126   	; 0x1194c <gpib_error_test>

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   1219a:	83 70       	andi	r24, 0x03	; 3
   1219c:	99 27       	eor	r25, r25
   1219e:	89 2b       	or	r24, r25
   121a0:	09 f4       	brne	.+2      	; 0x121a4 <gpib_task+0xb8>
   121a2:	ab cf       	rjmp	.-170    	; 0x120fa <gpib_task+0xe>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   121a4:	df 91       	pop	r29
   121a6:	cf 91       	pop	r28
   121a8:	08 95       	ret

000121aa <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   121aa:	08 95       	ret

000121ac <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   121ac:	cf 93       	push	r28
   121ae:	df 93       	push	r29
   121b0:	00 d0       	rcall	.+0      	; 0x121b2 <gpib_help+0x6>
   121b2:	1f 92       	push	r1
   121b4:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   121b6:	81 ec       	ldi	r24, 0xC1	; 193
   121b8:	96 e1       	ldi	r25, 0x16	; 22
   121ba:	a0 e0       	ldi	r26, 0x00	; 0
   121bc:	ed b7       	in	r30, 0x3d	; 61
   121be:	fe b7       	in	r31, 0x3e	; 62
   121c0:	81 83       	std	Z+1, r24	; 0x01
   121c2:	92 83       	std	Z+2, r25	; 0x02
   121c4:	a3 83       	std	Z+3, r26	; 0x03
   121c6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    if(full)
   121ca:	cd 2b       	or	r28, r29
   121cc:	51 f0       	breq	.+20     	; 0x121e2 <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   121ce:	88 ef       	ldi	r24, 0xF8	; 248
   121d0:	94 e1       	ldi	r25, 0x14	; 20
   121d2:	a0 e0       	ldi	r26, 0x00	; 0
   121d4:	ed b7       	in	r30, 0x3d	; 61
   121d6:	fe b7       	in	r31, 0x3e	; 62
   121d8:	81 83       	std	Z+1, r24	; 0x01
   121da:	92 83       	std	Z+2, r25	; 0x02
   121dc:	a3 83       	std	Z+3, r26	; 0x03
   121de:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            "gpib ppr_set XX\n"
    #endif
            "\n"
            );
    }
}
   121e2:	cd b7       	in	r28, 0x3d	; 61
   121e4:	de b7       	in	r29, 0x3e	; 62
   121e6:	23 96       	adiw	r28, 0x03	; 3
   121e8:	e2 e0       	ldi	r30, 0x02	; 2
   121ea:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

000121ee <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   121ee:	a5 e0       	ldi	r26, 0x05	; 5
   121f0:	b0 e0       	ldi	r27, 0x00	; 0
   121f2:	ed ef       	ldi	r30, 0xFD	; 253
   121f4:	f0 e9       	ldi	r31, 0x90	; 144
   121f6:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__prologue_saves__+0x10>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   121fa:	fb 01       	movw	r30, r22
   121fc:	e0 80       	ld	r14, Z
   121fe:	f1 80       	ldd	r15, Z+1	; 0x01

    if(!ptr)
   12200:	e1 14       	cp	r14, r1
   12202:	f1 04       	cpc	r15, r1
   12204:	19 f4       	brne	.+6      	; 0x1220c <gpib_tests+0x1e>
        return(0);
   12206:	80 e0       	ldi	r24, 0x00	; 0
   12208:	90 e0       	ldi	r25, 0x00	; 0
   1220a:	de c0       	rjmp	.+444    	; 0x123c8 <gpib_tests+0x1da>
   1220c:	6b 01       	movw	r12, r22
   1220e:	5c 01       	movw	r10, r24

    if( MATCH(ptr,"gpib") )
   12210:	63 eb       	ldi	r22, 0xB3	; 179
   12212:	7d e0       	ldi	r23, 0x0D	; 13
   12214:	c7 01       	movw	r24, r14
   12216:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
   1221a:	89 2b       	or	r24, r25
   1221c:	a1 f0       	breq	.+40     	; 0x12246 <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   1221e:	f6 01       	movw	r30, r12
   12220:	e2 80       	ldd	r14, Z+2	; 0x02
   12222:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   12224:	e1 14       	cp	r14, r1
   12226:	f1 04       	cpc	r15, r1
   12228:	21 f4       	brne	.+8      	; 0x12232 <gpib_tests+0x44>
        {
            gpib_help(1);
   1222a:	81 e0       	ldi	r24, 0x01	; 1
   1222c:	90 e0       	ldi	r25, 0x00	; 0
   1222e:	be df       	rcall	.-132    	; 0x121ac <gpib_help>
   12230:	c9 c0       	rjmp	.+402    	; 0x123c4 <gpib_tests+0x1d6>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   12232:	69 e7       	ldi	r22, 0x79	; 121
   12234:	76 e1       	ldi	r23, 0x16	; 22
   12236:	c7 01       	movw	r24, r14
   12238:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
   1223c:	89 2b       	or	r24, r25
   1223e:	a9 f7       	brne	.-22     	; 0x1222a <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   12240:	c2 e0       	ldi	r28, 0x02	; 2
   12242:	d0 e0       	ldi	r29, 0x00	; 0
   12244:	02 c0       	rjmp	.+4      	; 0x1224a <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   12246:	c1 e0       	ldi	r28, 0x01	; 1
   12248:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   1224a:	68 eb       	ldi	r22, 0xB8	; 184
   1224c:	7d e0       	ldi	r23, 0x0D	; 13
   1224e:	c7 01       	movw	r24, r14
   12250:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <MATCHI>
   12254:	89 2b       	or	r24, r25
   12256:	29 f1       	breq	.+74     	; 0x122a2 <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   12258:	fe 01       	movw	r30, r28
   1225a:	ee 0f       	add	r30, r30
   1225c:	ff 1f       	adc	r31, r31
   1225e:	ec 0d       	add	r30, r12
   12260:	fd 1d       	adc	r31, r13
        if(*ptr == '=')
   12262:	01 90       	ld	r0, Z+
   12264:	f0 81       	ld	r31, Z
   12266:	e0 2d       	mov	r30, r0
   12268:	80 81       	ld	r24, Z
   1226a:	8d 33       	cpi	r24, 0x3D	; 61
   1226c:	09 f4       	brne	.+2      	; 0x12270 <gpib_tests+0x82>
            ++ind;
   1226e:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   12270:	cc 0f       	add	r28, r28
   12272:	dd 1f       	adc	r29, r29
   12274:	cc 0d       	add	r28, r12
   12276:	dd 1d       	adc	r29, r13
   12278:	88 81       	ld	r24, Y
   1227a:	99 81       	ldd	r25, Y+1	; 0x01
   1227c:	0e 94 52 31 	call	0x62a4	; 0x62a4 <get_value>
   12280:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   12284:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   12288:	ed b7       	in	r30, 0x3d	; 61
   1228a:	fe b7       	in	r31, 0x3e	; 62
   1228c:	75 83       	std	Z+5, r23	; 0x05
   1228e:	64 83       	std	Z+4, r22	; 0x04
   12290:	8b ee       	ldi	r24, 0xEB	; 235
   12292:	94 e1       	ldi	r25, 0x14	; 20
   12294:	a0 e0       	ldi	r26, 0x00	; 0
   12296:	81 83       	std	Z+1, r24	; 0x01
   12298:	92 83       	std	Z+2, r25	; 0x02
   1229a:	a3 83       	std	Z+3, r26	; 0x03
   1229c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   122a0:	91 c0       	rjmp	.+290    	; 0x123c4 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"mount") )
   122a2:	6e eb       	ldi	r22, 0xBE	; 190
   122a4:	7d e0       	ldi	r23, 0x0D	; 13
   122a6:	c7 01       	movw	r24, r14
   122a8:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <MATCHI>
   122ac:	89 2b       	or	r24, r25
   122ae:	29 f0       	breq	.+10     	; 0x122ba <gpib_tests+0xcc>
    {
		mount(argc, argv);
   122b0:	b6 01       	movw	r22, r12
   122b2:	c5 01       	movw	r24, r10
   122b4:	0e 94 69 a0 	call	0x140d2	; 0x140d2 <mount>
   122b8:	85 c0       	rjmp	.+266    	; 0x123c4 <gpib_tests+0x1d6>
		return(1);
    }

    if (MATCHI(ptr,"addresses") )
   122ba:	64 ec       	ldi	r22, 0xC4	; 196
   122bc:	7d e0       	ldi	r23, 0x0D	; 13
   122be:	c7 01       	movw	r24, r14
   122c0:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <MATCHI>
   122c4:	89 2b       	or	r24, r25
   122c6:	c9 f0       	breq	.+50     	; 0x122fa <gpib_tests+0x10c>
    {
        ptr = argv[ind];
   122c8:	cc 0f       	add	r28, r28
   122ca:	dd 1f       	adc	r29, r29
   122cc:	cc 0d       	add	r28, r12
   122ce:	dd 1d       	adc	r29, r13
   122d0:	88 81       	ld	r24, Y
   122d2:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   122d4:	00 97       	sbiw	r24, 0x00	; 0
   122d6:	69 f0       	breq	.+26     	; 0x122f2 <gpib_tests+0x104>
   122d8:	fc 01       	movw	r30, r24
   122da:	20 81       	ld	r18, Z
   122dc:	22 23       	and	r18, r18
   122de:	49 f0       	breq	.+18     	; 0x122f2 <gpib_tests+0x104>
   122e0:	6e ec       	ldi	r22, 0xCE	; 206
   122e2:	7d e0       	ldi	r23, 0x0D	; 13
   122e4:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
   122e8:	89 2b       	or	r24, r25
   122ea:	19 f0       	breq	.+6      	; 0x122f2 <gpib_tests+0x104>
            display_Addresses(1);
   122ec:	81 e0       	ldi	r24, 0x01	; 1
   122ee:	90 e0       	ldi	r25, 0x00	; 0
   122f0:	02 c0       	rjmp	.+4      	; 0x122f6 <gpib_tests+0x108>
        else
            display_Addresses(0);
   122f2:	80 e0       	ldi	r24, 0x00	; 0
   122f4:	90 e0       	ldi	r25, 0x00	; 0
   122f6:	4a d1       	rcall	.+660    	; 0x1258c <display_Addresses>
   122f8:	65 c0       	rjmp	.+202    	; 0x123c4 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   122fa:	61 ed       	ldi	r22, 0xD1	; 209
   122fc:	7d e0       	ldi	r23, 0x0D	; 13
   122fe:	c7 01       	movw	r24, r14
   12300:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <MATCHI>
   12304:	89 2b       	or	r24, r25
   12306:	c9 f0       	breq	.+50     	; 0x1233a <gpib_tests+0x14c>
    {
        ptr = argv[ind];
   12308:	cc 0f       	add	r28, r28
   1230a:	dd 1f       	adc	r29, r29
   1230c:	cc 0d       	add	r28, r12
   1230e:	dd 1d       	adc	r29, r13
   12310:	88 81       	ld	r24, Y
   12312:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   12314:	00 97       	sbiw	r24, 0x00	; 0
   12316:	69 f0       	breq	.+26     	; 0x12332 <gpib_tests+0x144>
   12318:	fc 01       	movw	r30, r24
   1231a:	20 81       	ld	r18, Z
   1231c:	22 23       	and	r18, r18
   1231e:	49 f0       	breq	.+18     	; 0x12332 <gpib_tests+0x144>
   12320:	6e ec       	ldi	r22, 0xCE	; 206
   12322:	7d e0       	ldi	r23, 0x0D	; 13
   12324:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
   12328:	89 2b       	or	r24, r25
   1232a:	19 f0       	breq	.+6      	; 0x12332 <gpib_tests+0x144>
            display_Config(1);
   1232c:	81 e0       	ldi	r24, 0x01	; 1
   1232e:	90 e0       	ldi	r25, 0x00	; 0
   12330:	02 c0       	rjmp	.+4      	; 0x12336 <gpib_tests+0x148>
        else
            display_Config(0);
   12332:	80 e0       	ldi	r24, 0x00	; 0
   12334:	90 e0       	ldi	r25, 0x00	; 0
   12336:	05 d2       	rcall	.+1034   	; 0x12742 <display_Config>
   12338:	45 c0       	rjmp	.+138    	; 0x123c4 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   1233a:	68 ed       	ldi	r22, 0xD8	; 216
   1233c:	7d e0       	ldi	r23, 0x0D	; 13
   1233e:	c7 01       	movw	r24, r14
   12340:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <MATCHI>
   12344:	89 2b       	or	r24, r25
   12346:	19 f0       	breq	.+6      	; 0x1234e <gpib_tests+0x160>
    {
        gpib_timer_elapsed_begin();
   12348:	0e 94 5a 84 	call	0x108b4	; 0x108b4 <gpib_timer_elapsed_begin>
   1234c:	3b c0       	rjmp	.+118    	; 0x123c4 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   1234e:	66 ee       	ldi	r22, 0xE6	; 230
   12350:	7d e0       	ldi	r23, 0x0D	; 13
   12352:	c7 01       	movw	r24, r14
   12354:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <MATCHI>
   12358:	89 2b       	or	r24, r25
   1235a:	29 f0       	breq	.+10     	; 0x12366 <gpib_tests+0x178>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   1235c:	8e ee       	ldi	r24, 0xEE	; 238
   1235e:	9d e0       	ldi	r25, 0x0D	; 13
   12360:	0e 94 6c 84 	call	0x108d8	; 0x108d8 <gpib_timer_elapsed_end>
   12364:	2f c0       	rjmp	.+94     	; 0x123c4 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"task") )
   12366:	6c ef       	ldi	r22, 0xFC	; 252
   12368:	7d e0       	ldi	r23, 0x0D	; 13
   1236a:	c7 01       	movw	r24, r14
   1236c:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <MATCHI>
   12370:	89 2b       	or	r24, r25
    {
        gpib_task();
   12372:	11 f0       	breq	.+4      	; 0x12378 <gpib_tests+0x18a>
   12374:	bb de       	rcall	.-650    	; 0x120ec <gpib_task>
   12376:	26 c0       	rjmp	.+76     	; 0x123c4 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   12378:	8e 01       	movw	r16, r28
   1237a:	0f 5f       	subi	r16, 0xFF	; 255
   1237c:	1f 4f       	sbci	r17, 0xFF	; 255
   1237e:	95 01       	movw	r18, r10
   12380:	a8 01       	movw	r20, r16
   12382:	61 e0       	ldi	r22, 0x01	; 1
   12384:	7e e0       	ldi	r23, 0x0E	; 14
   12386:	c7 01       	movw	r24, r14
   12388:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
   1238c:	89 2b       	or	r24, r25
   1238e:	09 f4       	brne	.+2      	; 0x12392 <gpib_tests+0x1a4>
   12390:	3a cf       	rjmp	.-396    	; 0x12206 <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   12392:	00 0f       	add	r16, r16
   12394:	11 1f       	adc	r17, r17
   12396:	e6 01       	movw	r28, r12
   12398:	c0 0f       	add	r28, r16
   1239a:	d1 1f       	adc	r29, r17
   1239c:	88 81       	ld	r24, Y
   1239e:	99 81       	ldd	r25, Y+1	; 0x01
   123a0:	00 97       	sbiw	r24, 0x00	; 0
   123a2:	51 f0       	breq	.+20     	; 0x123b8 <gpib_tests+0x1ca>
   123a4:	67 e0       	ldi	r22, 0x07	; 7
   123a6:	7e e0       	ldi	r23, 0x0E	; 14
   123a8:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   123ac:	61 e0       	ldi	r22, 0x01	; 1
   123ae:	70 e0       	ldi	r23, 0x00	; 0
   123b0:	89 2b       	or	r24, r25
   123b2:	21 f4       	brne	.+8      	; 0x123bc <gpib_tests+0x1ce>
   123b4:	60 e0       	ldi	r22, 0x00	; 0
   123b6:	02 c0       	rjmp	.+4      	; 0x123bc <gpib_tests+0x1ce>
   123b8:	60 e0       	ldi	r22, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   123ba:	70 e0       	ldi	r23, 0x00	; 0
   123bc:	22 97       	sbiw	r28, 0x02	; 2
   123be:	88 81       	ld	r24, Y
   123c0:	99 81       	ldd	r25, Y+1	; 0x01
   123c2:	32 da       	rcall	.-2972   	; 0x11828 <gpib_trace_task>
        return(1);
   123c4:	81 e0       	ldi	r24, 0x01	; 1
   123c6:	90 e0       	ldi	r25, 0x00	; 0

    }                                             // port write
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   123c8:	cd b7       	in	r28, 0x3d	; 61
   123ca:	de b7       	in	r29, 0x3e	; 62
   123cc:	25 96       	adiw	r28, 0x05	; 5
   123ce:	ea e0       	ldi	r30, 0x0A	; 10
   123d0:	0c 94 80 e3 	jmp	0x1c700	; 0x1c700 <__epilogue_restores__+0x10>

000123d4 <tok_index>:
        }
    }
    if(bad)
        return(0);
    return(1);
}
   123d4:	ef 92       	push	r14
   123d6:	ff 92       	push	r15
   123d8:	0f 93       	push	r16
   123da:	1f 93       	push	r17
   123dc:	cf 93       	push	r28
   123de:	df 93       	push	r29
   123e0:	7c 01       	movw	r14, r24
   123e2:	c4 ec       	ldi	r28, 0xC4	; 196
   123e4:	d1 e0       	ldi	r29, 0x01	; 1
   123e6:	00 e0       	ldi	r16, 0x00	; 0
   123e8:	10 e0       	ldi	r17, 0x00	; 0
   123ea:	8a 81       	ldd	r24, Y+2	; 0x02
   123ec:	9b 81       	ldd	r25, Y+3	; 0x03
   123ee:	8f 3f       	cpi	r24, 0xFF	; 255
   123f0:	2f ef       	ldi	r18, 0xFF	; 255
   123f2:	92 07       	cpc	r25, r18
   123f4:	61 f0       	breq	.+24     	; 0x1240e <tok_index+0x3a>
   123f6:	68 81       	ld	r22, Y
   123f8:	79 81       	ldd	r23, Y+1	; 0x01
   123fa:	c7 01       	movw	r24, r14
   123fc:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <MATCHI>
   12400:	24 96       	adiw	r28, 0x04	; 4
   12402:	89 2b       	or	r24, r25
   12404:	19 f4       	brne	.+6      	; 0x1240c <tok_index+0x38>
   12406:	0f 5f       	subi	r16, 0xFF	; 255
   12408:	1f 4f       	sbci	r17, 0xFF	; 255
   1240a:	ef cf       	rjmp	.-34     	; 0x123ea <tok_index+0x16>
   1240c:	c8 01       	movw	r24, r16
   1240e:	cd b7       	in	r28, 0x3d	; 61
   12410:	de b7       	in	r29, 0x3e	; 62
   12412:	e6 e0       	ldi	r30, 0x06	; 6
   12414:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

00012418 <tok_name>:
   12418:	e4 ec       	ldi	r30, 0xC4	; 196
   1241a:	f1 e0       	ldi	r31, 0x01	; 1
   1241c:	20 e0       	ldi	r18, 0x00	; 0
   1241e:	30 e0       	ldi	r19, 0x00	; 0
   12420:	90 e0       	ldi	r25, 0x00	; 0
   12422:	42 81       	ldd	r20, Z+2	; 0x02
   12424:	53 81       	ldd	r21, Z+3	; 0x03
   12426:	4f 3f       	cpi	r20, 0xFF	; 255
   12428:	6f ef       	ldi	r22, 0xFF	; 255
   1242a:	56 07       	cpc	r21, r22
   1242c:	89 f0       	breq	.+34     	; 0x12450 <tok_name+0x38>
   1242e:	34 96       	adiw	r30, 0x04	; 4
   12430:	48 17       	cp	r20, r24
   12432:	59 07       	cpc	r21, r25
   12434:	51 f4       	brne	.+20     	; 0x1244a <tok_name+0x32>
   12436:	22 0f       	add	r18, r18
   12438:	33 1f       	adc	r19, r19
   1243a:	22 0f       	add	r18, r18
   1243c:	33 1f       	adc	r19, r19
   1243e:	f9 01       	movw	r30, r18
   12440:	ec 53       	subi	r30, 0x3C	; 60
   12442:	fe 4f       	sbci	r31, 0xFE	; 254
   12444:	80 81       	ld	r24, Z
   12446:	91 81       	ldd	r25, Z+1	; 0x01
   12448:	08 95       	ret
   1244a:	2f 5f       	subi	r18, 0xFF	; 255
   1244c:	3f 4f       	sbci	r19, 0xFF	; 255
   1244e:	e9 cf       	rjmp	.-46     	; 0x12422 <tok_name+0xa>
   12450:	8d e2       	ldi	r24, 0x2D	; 45
   12452:	9c e0       	ldi	r25, 0x0C	; 12
   12454:	08 95       	ret

00012456 <print_tok_val>:
   12456:	cf 92       	push	r12
   12458:	df 92       	push	r13
   1245a:	ef 92       	push	r14
   1245c:	ff 92       	push	r15
   1245e:	0f 93       	push	r16
   12460:	1f 93       	push	r17
   12462:	cf 93       	push	r28
   12464:	ad b7       	in	r26, 0x3d	; 61
   12466:	be b7       	in	r27, 0x3e	; 62
   12468:	1d 97       	sbiw	r26, 0x0d	; 13
   1246a:	0f b6       	in	r0, 0x3f	; 63
   1246c:	f8 94       	cli
   1246e:	be bf       	out	0x3e, r27	; 62
   12470:	0f be       	out	0x3f, r0	; 63
   12472:	ad bf       	out	0x3d, r26	; 61
   12474:	c6 2f       	mov	r28, r22
   12476:	69 01       	movw	r12, r18
   12478:	7a 01       	movw	r14, r20
   1247a:	ce df       	rcall	.-100    	; 0x12418 <tok_name>
   1247c:	8c 01       	movw	r16, r24
   1247e:	cc 23       	and	r28, r28
   12480:	31 f0       	breq	.+12     	; 0x1248e <print_tok_val+0x38>
   12482:	80 e2       	ldi	r24, 0x20	; 32
   12484:	90 e0       	ldi	r25, 0x00	; 0
   12486:	0e 94 48 75 	call	0xea90	; 0xea90 <putchar>
   1248a:	c1 50       	subi	r28, 0x01	; 1
   1248c:	f8 cf       	rjmp	.-16     	; 0x1247e <print_tok_val+0x28>
   1248e:	ed b7       	in	r30, 0x3d	; 61
   12490:	fe b7       	in	r31, 0x3e	; 62
   12492:	c2 86       	std	Z+10, r12	; 0x0a
   12494:	d3 86       	std	Z+11, r13	; 0x0b
   12496:	e4 86       	std	Z+12, r14	; 0x0c
   12498:	f5 86       	std	Z+13, r15	; 0x0d
   1249a:	c6 82       	std	Z+6, r12	; 0x06
   1249c:	d7 82       	std	Z+7, r13	; 0x07
   1249e:	e0 86       	std	Z+8, r14	; 0x08
   124a0:	f1 86       	std	Z+9, r15	; 0x09
   124a2:	15 83       	std	Z+5, r17	; 0x05
   124a4:	04 83       	std	Z+4, r16	; 0x04
   124a6:	8e e9       	ldi	r24, 0x9E	; 158
   124a8:	9d e1       	ldi	r25, 0x1D	; 29
   124aa:	a0 e0       	ldi	r26, 0x00	; 0
   124ac:	81 83       	std	Z+1, r24	; 0x01
   124ae:	92 83       	std	Z+2, r25	; 0x02
   124b0:	a3 83       	std	Z+3, r26	; 0x03
   124b2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   124b6:	ad b7       	in	r26, 0x3d	; 61
   124b8:	be b7       	in	r27, 0x3e	; 62
   124ba:	1d 96       	adiw	r26, 0x0d	; 13
   124bc:	0f b6       	in	r0, 0x3f	; 63
   124be:	f8 94       	cli
   124c0:	be bf       	out	0x3e, r27	; 62
   124c2:	0f be       	out	0x3f, r0	; 63
   124c4:	ad bf       	out	0x3d, r26	; 61
   124c6:	cf 91       	pop	r28
   124c8:	1f 91       	pop	r17
   124ca:	0f 91       	pop	r16
   124cc:	ff 90       	pop	r15
   124ce:	ef 90       	pop	r14
   124d0:	df 90       	pop	r13
   124d2:	cf 90       	pop	r12
   124d4:	08 95       	ret

000124d6 <print_tok_str>:
   124d6:	ef 92       	push	r14
   124d8:	ff 92       	push	r15
   124da:	0f 93       	push	r16
   124dc:	1f 93       	push	r17
   124de:	cf 93       	push	r28
   124e0:	ad b7       	in	r26, 0x3d	; 61
   124e2:	be b7       	in	r27, 0x3e	; 62
   124e4:	17 97       	sbiw	r26, 0x07	; 7
   124e6:	0f b6       	in	r0, 0x3f	; 63
   124e8:	f8 94       	cli
   124ea:	be bf       	out	0x3e, r27	; 62
   124ec:	0f be       	out	0x3f, r0	; 63
   124ee:	ad bf       	out	0x3d, r26	; 61
   124f0:	c6 2f       	mov	r28, r22
   124f2:	7a 01       	movw	r14, r20
   124f4:	91 df       	rcall	.-222    	; 0x12418 <tok_name>
   124f6:	8c 01       	movw	r16, r24
   124f8:	cc 23       	and	r28, r28
   124fa:	31 f0       	breq	.+12     	; 0x12508 <print_tok_str+0x32>
   124fc:	80 e2       	ldi	r24, 0x20	; 32
   124fe:	90 e0       	ldi	r25, 0x00	; 0
   12500:	0e 94 48 75 	call	0xea90	; 0xea90 <putchar>
   12504:	c1 50       	subi	r28, 0x01	; 1
   12506:	f8 cf       	rjmp	.-16     	; 0x124f8 <print_tok_str+0x22>
   12508:	ed b7       	in	r30, 0x3d	; 61
   1250a:	fe b7       	in	r31, 0x3e	; 62
   1250c:	f7 82       	std	Z+7, r15	; 0x07
   1250e:	e6 82       	std	Z+6, r14	; 0x06
   12510:	15 83       	std	Z+5, r17	; 0x05
   12512:	04 83       	std	Z+4, r16	; 0x04
   12514:	82 e9       	ldi	r24, 0x92	; 146
   12516:	9d e1       	ldi	r25, 0x1D	; 29
   12518:	a0 e0       	ldi	r26, 0x00	; 0
   1251a:	81 83       	std	Z+1, r24	; 0x01
   1251c:	92 83       	std	Z+2, r25	; 0x02
   1251e:	a3 83       	std	Z+3, r26	; 0x03
   12520:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12524:	ad b7       	in	r26, 0x3d	; 61
   12526:	be b7       	in	r27, 0x3e	; 62
   12528:	17 96       	adiw	r26, 0x07	; 7
   1252a:	0f b6       	in	r0, 0x3f	; 63
   1252c:	f8 94       	cli
   1252e:	be bf       	out	0x3e, r27	; 62
   12530:	0f be       	out	0x3f, r0	; 63
   12532:	ad bf       	out	0x3d, r26	; 61
   12534:	cf 91       	pop	r28
   12536:	1f 91       	pop	r17
   12538:	0f 91       	pop	r16
   1253a:	ff 90       	pop	r15
   1253c:	ef 90       	pop	r14
   1253e:	08 95       	ret

00012540 <print_tok>:
   12540:	0f 93       	push	r16
   12542:	1f 93       	push	r17
   12544:	cf 93       	push	r28
   12546:	00 d0       	rcall	.+0      	; 0x12548 <print_tok+0x8>
   12548:	00 d0       	rcall	.+0      	; 0x1254a <print_tok+0xa>
   1254a:	1f 92       	push	r1
   1254c:	c6 2f       	mov	r28, r22
   1254e:	64 df       	rcall	.-312    	; 0x12418 <tok_name>
   12550:	8c 01       	movw	r16, r24
   12552:	cc 23       	and	r28, r28
   12554:	31 f0       	breq	.+12     	; 0x12562 <print_tok+0x22>
   12556:	80 e2       	ldi	r24, 0x20	; 32
   12558:	90 e0       	ldi	r25, 0x00	; 0
   1255a:	0e 94 48 75 	call	0xea90	; 0xea90 <putchar>
   1255e:	c1 50       	subi	r28, 0x01	; 1
   12560:	f8 cf       	rjmp	.-16     	; 0x12552 <print_tok+0x12>
   12562:	ed b7       	in	r30, 0x3d	; 61
   12564:	fe b7       	in	r31, 0x3e	; 62
   12566:	15 83       	std	Z+5, r17	; 0x05
   12568:	04 83       	std	Z+4, r16	; 0x04
   1256a:	8e e8       	ldi	r24, 0x8E	; 142
   1256c:	9d e1       	ldi	r25, 0x1D	; 29
   1256e:	a0 e0       	ldi	r26, 0x00	; 0
   12570:	81 83       	std	Z+1, r24	; 0x01
   12572:	92 83       	std	Z+2, r25	; 0x02
   12574:	a3 83       	std	Z+3, r26	; 0x03
   12576:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1257a:	0f 90       	pop	r0
   1257c:	0f 90       	pop	r0
   1257e:	0f 90       	pop	r0
   12580:	0f 90       	pop	r0
   12582:	0f 90       	pop	r0
   12584:	cf 91       	pop	r28
   12586:	1f 91       	pop	r17
   12588:	0f 91       	pop	r16
   1258a:	08 95       	ret

0001258c <display_Addresses>:
   1258c:	2f 92       	push	r2
   1258e:	3f 92       	push	r3
   12590:	4f 92       	push	r4
   12592:	6f 92       	push	r6
   12594:	7f 92       	push	r7
   12596:	8f 92       	push	r8
   12598:	cf 92       	push	r12
   1259a:	df 92       	push	r13
   1259c:	ef 92       	push	r14
   1259e:	cf 93       	push	r28
   125a0:	df 93       	push	r29
   125a2:	cd b7       	in	r28, 0x3d	; 61
   125a4:	de b7       	in	r29, 0x3e	; 62
   125a6:	2a 97       	sbiw	r28, 0x0a	; 10
   125a8:	0f b6       	in	r0, 0x3f	; 63
   125aa:	f8 94       	cli
   125ac:	de bf       	out	0x3e, r29	; 62
   125ae:	0f be       	out	0x3f, r0	; 63
   125b0:	cd bf       	out	0x3d, r28	; 61
   125b2:	88 e5       	ldi	r24, 0x58	; 88
   125b4:	9a e1       	ldi	r25, 0x1A	; 26
   125b6:	a0 e0       	ldi	r26, 0x00	; 0
   125b8:	ed b7       	in	r30, 0x3d	; 61
   125ba:	fe b7       	in	r31, 0x3e	; 62
   125bc:	81 83       	std	Z+1, r24	; 0x01
   125be:	92 83       	std	Z+2, r25	; 0x02
   125c0:	a3 83       	std	Z+3, r26	; 0x03
   125c2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   125c6:	27 ef       	ldi	r18, 0xF7	; 247
   125c8:	3e e1       	ldi	r19, 0x1E	; 30
   125ca:	3a 87       	std	Y+10, r19	; 0x0a
   125cc:	29 87       	std	Y+9, r18	; 0x09
   125ce:	8a e3       	ldi	r24, 0x3A	; 58
   125d0:	9a e1       	ldi	r25, 0x1A	; 26
   125d2:	6c 01       	movw	r12, r24
   125d4:	e1 2c       	mov	r14, r1
   125d6:	8c e3       	ldi	r24, 0x3C	; 60
   125d8:	9a e1       	ldi	r25, 0x1A	; 26
   125da:	3c 01       	movw	r6, r24
   125dc:	81 2c       	mov	r8, r1
   125de:	85 e4       	ldi	r24, 0x45	; 69
   125e0:	9a e1       	ldi	r25, 0x1A	; 26
   125e2:	1c 01       	movw	r2, r24
   125e4:	41 2c       	mov	r4, r1
   125e6:	8f e4       	ldi	r24, 0x4F	; 79
   125e8:	9a e1       	ldi	r25, 0x1A	; 26
   125ea:	9c 01       	movw	r18, r24
   125ec:	40 e0       	ldi	r20, 0x00	; 0
   125ee:	2e 83       	std	Y+6, r18	; 0x06
   125f0:	3f 83       	std	Y+7, r19	; 0x07
   125f2:	48 87       	std	Y+8, r20	; 0x08
   125f4:	e9 85       	ldd	r30, Y+9	; 0x09
   125f6:	fa 85       	ldd	r31, Y+10	; 0x0a
   125f8:	80 81       	ld	r24, Z
   125fa:	88 23       	and	r24, r24
   125fc:	09 f4       	brne	.+2      	; 0x12600 <display_Addresses+0x74>
   125fe:	7b c0       	rjmp	.+246    	; 0x126f6 <display_Addresses+0x16a>
   12600:	83 30       	cpi	r24, 0x03	; 3
   12602:	21 f0       	breq	.+8      	; 0x1260c <display_Addresses+0x80>
   12604:	81 30       	cpi	r24, 0x01	; 1
   12606:	09 f0       	breq	.+2      	; 0x1260a <display_Addresses+0x7e>
   12608:	5a c0       	rjmp	.+180    	; 0x126be <display_Addresses+0x132>
   1260a:	1f c0       	rjmp	.+62     	; 0x1264a <display_Addresses+0xbe>
   1260c:	e9 85       	ldd	r30, Y+9	; 0x09
   1260e:	fa 85       	ldd	r31, Y+10	; 0x0a
   12610:	87 a1       	ldd	r24, Z+39	; 0x27
   12612:	90 a5       	ldd	r25, Z+40	; 0x28
   12614:	90 93 6c 19 	sts	0x196C, r25	; 0x80196c <SS80p+0x1>
   12618:	80 93 6b 19 	sts	0x196B, r24	; 0x80196b <SS80p>
   1261c:	cf 01       	movw	r24, r30
   1261e:	07 96       	adiw	r24, 0x07	; 7
   12620:	ed b7       	in	r30, 0x3d	; 61
   12622:	fe b7       	in	r31, 0x3e	; 62
   12624:	95 83       	std	Z+5, r25	; 0x05
   12626:	84 83       	std	Z+4, r24	; 0x04
   12628:	2e 81       	ldd	r18, Y+6	; 0x06
   1262a:	3f 81       	ldd	r19, Y+7	; 0x07
   1262c:	48 85       	ldd	r20, Y+8	; 0x08
   1262e:	21 83       	std	Z+1, r18	; 0x01
   12630:	32 83       	std	Z+2, r19	; 0x02
   12632:	43 83       	std	Z+3, r20	; 0x03
   12634:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12638:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   1263c:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   12640:	42 81       	ldd	r20, Z+2	; 0x02
   12642:	53 81       	ldd	r21, Z+3	; 0x03
   12644:	64 e0       	ldi	r22, 0x04	; 4
   12646:	82 e1       	ldi	r24, 0x12	; 18
   12648:	46 df       	rcall	.-372    	; 0x124d6 <print_tok_str>
   1264a:	e9 85       	ldd	r30, Y+9	; 0x09
   1264c:	fa 85       	ldd	r31, Y+10	; 0x0a
   1264e:	80 81       	ld	r24, Z
   12650:	81 30       	cpi	r24, 0x01	; 1
   12652:	d1 f4       	brne	.+52     	; 0x12688 <display_Addresses+0xfc>
   12654:	87 a1       	ldd	r24, Z+39	; 0x27
   12656:	90 a5       	ldd	r25, Z+40	; 0x28
   12658:	90 93 68 19 	sts	0x1968, r25	; 0x801968 <AMIGOp+0x1>
   1265c:	80 93 67 19 	sts	0x1967, r24	; 0x801967 <AMIGOp>
   12660:	cf 01       	movw	r24, r30
   12662:	07 96       	adiw	r24, 0x07	; 7
   12664:	ed b7       	in	r30, 0x3d	; 61
   12666:	fe b7       	in	r31, 0x3e	; 62
   12668:	95 83       	std	Z+5, r25	; 0x05
   1266a:	84 83       	std	Z+4, r24	; 0x04
   1266c:	21 82       	std	Z+1, r2	; 0x01
   1266e:	32 82       	std	Z+2, r3	; 0x02
   12670:	43 82       	std	Z+3, r4	; 0x03
   12672:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12676:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   1267a:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   1267e:	42 81       	ldd	r20, Z+2	; 0x02
   12680:	53 81       	ldd	r21, Z+3	; 0x03
   12682:	64 e0       	ldi	r22, 0x04	; 4
   12684:	82 e1       	ldi	r24, 0x12	; 18
   12686:	27 df       	rcall	.-434    	; 0x124d6 <print_tok_str>
   12688:	e9 85       	ldd	r30, Y+9	; 0x09
   1268a:	fa 85       	ldd	r31, Y+10	; 0x0a
   1268c:	21 81       	ldd	r18, Z+1	; 0x01
   1268e:	30 e0       	ldi	r19, 0x00	; 0
   12690:	40 e0       	ldi	r20, 0x00	; 0
   12692:	50 e0       	ldi	r21, 0x00	; 0
   12694:	64 e0       	ldi	r22, 0x04	; 4
   12696:	81 e0       	ldi	r24, 0x01	; 1
   12698:	de de       	rcall	.-580    	; 0x12456 <print_tok_val>
   1269a:	e9 85       	ldd	r30, Y+9	; 0x09
   1269c:	fa 85       	ldd	r31, Y+10	; 0x0a
   1269e:	22 81       	ldd	r18, Z+2	; 0x02
   126a0:	30 e0       	ldi	r19, 0x00	; 0
   126a2:	40 e0       	ldi	r20, 0x00	; 0
   126a4:	50 e0       	ldi	r21, 0x00	; 0
   126a6:	64 e0       	ldi	r22, 0x04	; 4
   126a8:	8f e1       	ldi	r24, 0x1F	; 31
   126aa:	d5 de       	rcall	.-598    	; 0x12456 <print_tok_val>
   126ac:	e9 85       	ldd	r30, Y+9	; 0x09
   126ae:	fa 85       	ldd	r31, Y+10	; 0x0a
   126b0:	23 81       	ldd	r18, Z+3	; 0x03
   126b2:	34 81       	ldd	r19, Z+4	; 0x04
   126b4:	45 81       	ldd	r20, Z+5	; 0x05
   126b6:	56 81       	ldd	r21, Z+6	; 0x06
   126b8:	64 e0       	ldi	r22, 0x04	; 4
   126ba:	83 e0       	ldi	r24, 0x03	; 3
   126bc:	cc de       	rcall	.-616    	; 0x12456 <print_tok_val>
   126be:	e9 85       	ldd	r30, Y+9	; 0x09
   126c0:	fa 85       	ldd	r31, Y+10	; 0x0a
   126c2:	80 81       	ld	r24, Z
   126c4:	84 30       	cpi	r24, 0x04	; 4
   126c6:	81 f4       	brne	.+32     	; 0x126e8 <display_Addresses+0x15c>
   126c8:	ed b7       	in	r30, 0x3d	; 61
   126ca:	fe b7       	in	r31, 0x3e	; 62
   126cc:	61 82       	std	Z+1, r6	; 0x01
   126ce:	72 82       	std	Z+2, r7	; 0x02
   126d0:	83 82       	std	Z+3, r8	; 0x03
   126d2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   126d6:	e9 85       	ldd	r30, Y+9	; 0x09
   126d8:	fa 85       	ldd	r31, Y+10	; 0x0a
   126da:	21 81       	ldd	r18, Z+1	; 0x01
   126dc:	30 e0       	ldi	r19, 0x00	; 0
   126de:	40 e0       	ldi	r20, 0x00	; 0
   126e0:	50 e0       	ldi	r21, 0x00	; 0
   126e2:	64 e0       	ldi	r22, 0x04	; 4
   126e4:	81 e0       	ldi	r24, 0x01	; 1
   126e6:	b7 de       	rcall	.-658    	; 0x12456 <print_tok_val>
   126e8:	ed b7       	in	r30, 0x3d	; 61
   126ea:	fe b7       	in	r31, 0x3e	; 62
   126ec:	c1 82       	std	Z+1, r12	; 0x01
   126ee:	d2 82       	std	Z+2, r13	; 0x02
   126f0:	e3 82       	std	Z+3, r14	; 0x03
   126f2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   126f6:	29 85       	ldd	r18, Y+9	; 0x09
   126f8:	3a 85       	ldd	r19, Y+10	; 0x0a
   126fa:	25 5d       	subi	r18, 0xD5	; 213
   126fc:	3f 4f       	sbci	r19, 0xFF	; 255
   126fe:	3a 87       	std	Y+10, r19	; 0x0a
   12700:	29 87       	std	Y+9, r18	; 0x09
   12702:	2b 5f       	subi	r18, 0xFB	; 251
   12704:	30 42       	sbci	r19, 0x20	; 32
   12706:	09 f0       	breq	.+2      	; 0x1270a <display_Addresses+0x17e>
   12708:	75 cf       	rjmp	.-278    	; 0x125f4 <display_Addresses+0x68>
   1270a:	88 e3       	ldi	r24, 0x38	; 56
   1270c:	9a e1       	ldi	r25, 0x1A	; 26
   1270e:	a0 e0       	ldi	r26, 0x00	; 0
   12710:	ed b7       	in	r30, 0x3d	; 61
   12712:	fe b7       	in	r31, 0x3e	; 62
   12714:	81 83       	std	Z+1, r24	; 0x01
   12716:	92 83       	std	Z+2, r25	; 0x02
   12718:	a3 83       	std	Z+3, r26	; 0x03
   1271a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1271e:	2a 96       	adiw	r28, 0x0a	; 10
   12720:	0f b6       	in	r0, 0x3f	; 63
   12722:	f8 94       	cli
   12724:	de bf       	out	0x3e, r29	; 62
   12726:	0f be       	out	0x3f, r0	; 63
   12728:	cd bf       	out	0x3d, r28	; 61
   1272a:	df 91       	pop	r29
   1272c:	cf 91       	pop	r28
   1272e:	ef 90       	pop	r14
   12730:	df 90       	pop	r13
   12732:	cf 90       	pop	r12
   12734:	8f 90       	pop	r8
   12736:	7f 90       	pop	r7
   12738:	6f 90       	pop	r6
   1273a:	4f 90       	pop	r4
   1273c:	3f 90       	pop	r3
   1273e:	2f 90       	pop	r2
   12740:	08 95       	ret

00012742 <display_Config>:
   12742:	2f 92       	push	r2
   12744:	3f 92       	push	r3
   12746:	4f 92       	push	r4
   12748:	6f 92       	push	r6
   1274a:	7f 92       	push	r7
   1274c:	8f 92       	push	r8
   1274e:	af 92       	push	r10
   12750:	bf 92       	push	r11
   12752:	cf 92       	push	r12
   12754:	df 92       	push	r13
   12756:	ef 92       	push	r14
   12758:	0f 93       	push	r16
   1275a:	1f 93       	push	r17
   1275c:	cf 93       	push	r28
   1275e:	df 93       	push	r29
   12760:	cd b7       	in	r28, 0x3d	; 61
   12762:	de b7       	in	r29, 0x3e	; 62
   12764:	62 97       	sbiw	r28, 0x12	; 18
   12766:	0f b6       	in	r0, 0x3f	; 63
   12768:	f8 94       	cli
   1276a:	de bf       	out	0x3e, r29	; 62
   1276c:	0f be       	out	0x3f, r0	; 63
   1276e:	cd bf       	out	0x3d, r28	; 61
   12770:	5c 01       	movw	r10, r24
   12772:	88 e1       	ldi	r24, 0x18	; 24
   12774:	9a e1       	ldi	r25, 0x1A	; 26
   12776:	a0 e0       	ldi	r26, 0x00	; 0
   12778:	ed b7       	in	r30, 0x3d	; 61
   1277a:	fe b7       	in	r31, 0x3e	; 62
   1277c:	81 83       	std	Z+1, r24	; 0x01
   1277e:	92 83       	std	Z+2, r25	; 0x02
   12780:	a3 83       	std	Z+3, r26	; 0x03
   12782:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12786:	07 ef       	ldi	r16, 0xF7	; 247
   12788:	1e e1       	ldi	r17, 0x1E	; 30
   1278a:	8d e9       	ldi	r24, 0x9D	; 157
   1278c:	99 e1       	ldi	r25, 0x19	; 25
   1278e:	9c 01       	movw	r18, r24
   12790:	40 e0       	ldi	r20, 0x00	; 0
   12792:	28 87       	std	Y+8, r18	; 0x08
   12794:	39 87       	std	Y+9, r19	; 0x09
   12796:	4a 87       	std	Y+10, r20	; 0x0a
   12798:	82 ed       	ldi	r24, 0xD2	; 210
   1279a:	99 e1       	ldi	r25, 0x19	; 25
   1279c:	9c 01       	movw	r18, r24
   1279e:	40 e0       	ldi	r20, 0x00	; 0
   127a0:	2b 87       	std	Y+11, r18	; 0x0b
   127a2:	3c 87       	std	Y+12, r19	; 0x0c
   127a4:	4d 87       	std	Y+13, r20	; 0x0d
   127a6:	83 eb       	ldi	r24, 0xB3	; 179
   127a8:	99 e1       	ldi	r25, 0x19	; 25
   127aa:	9c 01       	movw	r18, r24
   127ac:	40 e0       	ldi	r20, 0x00	; 0
   127ae:	2e 87       	std	Y+14, r18	; 0x0e
   127b0:	3f 87       	std	Y+15, r19	; 0x0f
   127b2:	48 8b       	std	Y+16, r20	; 0x10
   127b4:	8f e9       	ldi	r24, 0x9F	; 159
   127b6:	99 e1       	ldi	r25, 0x19	; 25
   127b8:	1c 01       	movw	r2, r24
   127ba:	41 2c       	mov	r4, r1
   127bc:	8f e0       	ldi	r24, 0x0F	; 15
   127be:	9a e1       	ldi	r25, 0x1A	; 26
   127c0:	6c 01       	movw	r12, r24
   127c2:	e1 2c       	mov	r14, r1
   127c4:	80 ef       	ldi	r24, 0xF0	; 240
   127c6:	99 e1       	ldi	r25, 0x19	; 25
   127c8:	3c 01       	movw	r6, r24
   127ca:	81 2c       	mov	r8, r1
   127cc:	f8 01       	movw	r30, r16
   127ce:	80 81       	ld	r24, Z
   127d0:	88 23       	and	r24, r24
   127d2:	09 f4       	brne	.+2      	; 0x127d6 <display_Config+0x94>
   127d4:	14 c2       	rjmp	.+1064   	; 0x12bfe <display_Config+0x4bc>
   127d6:	83 30       	cpi	r24, 0x03	; 3
   127d8:	09 f0       	breq	.+2      	; 0x127dc <display_Config+0x9a>
   127da:	38 c1       	rjmp	.+624    	; 0x12a4c <display_Config+0x30a>
   127dc:	27 a1       	ldd	r18, Z+39	; 0x27
   127de:	30 a5       	ldd	r19, Z+40	; 0x28
   127e0:	3a 8b       	std	Y+18, r19	; 0x12
   127e2:	29 8b       	std	Y+17, r18	; 0x11
   127e4:	c8 01       	movw	r24, r16
   127e6:	07 96       	adiw	r24, 0x07	; 7
   127e8:	ed b7       	in	r30, 0x3d	; 61
   127ea:	fe b7       	in	r31, 0x3e	; 62
   127ec:	95 83       	std	Z+5, r25	; 0x05
   127ee:	84 83       	std	Z+4, r24	; 0x04
   127f0:	c1 82       	std	Z+1, r12	; 0x01
   127f2:	d2 82       	std	Z+2, r13	; 0x02
   127f4:	e3 82       	std	Z+3, r14	; 0x03
   127f6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   127fa:	e9 89       	ldd	r30, Y+17	; 0x11
   127fc:	fa 89       	ldd	r31, Y+18	; 0x12
   127fe:	80 81       	ld	r24, Z
   12800:	90 e0       	ldi	r25, 0x00	; 0
   12802:	ed b7       	in	r30, 0x3d	; 61
   12804:	fe b7       	in	r31, 0x3e	; 62
   12806:	95 83       	std	Z+5, r25	; 0x05
   12808:	84 83       	std	Z+4, r24	; 0x04
   1280a:	61 82       	std	Z+1, r6	; 0x01
   1280c:	72 82       	std	Z+2, r7	; 0x02
   1280e:	83 82       	std	Z+3, r8	; 0x03
   12810:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12814:	64 e0       	ldi	r22, 0x04	; 4
   12816:	89 e0       	ldi	r24, 0x09	; 9
   12818:	93 de       	rcall	.-730    	; 0x12540 <print_tok>
   1281a:	e9 89       	ldd	r30, Y+17	; 0x11
   1281c:	fa 89       	ldd	r31, Y+18	; 0x12
   1281e:	20 81       	ld	r18, Z
   12820:	30 e0       	ldi	r19, 0x00	; 0
   12822:	40 e0       	ldi	r20, 0x00	; 0
   12824:	50 e0       	ldi	r21, 0x00	; 0
   12826:	68 e0       	ldi	r22, 0x08	; 8
   12828:	81 e0       	ldi	r24, 0x01	; 1
   1282a:	15 de       	rcall	.-982    	; 0x12456 <print_tok_val>
   1282c:	e9 89       	ldd	r30, Y+17	; 0x11
   1282e:	fa 89       	ldd	r31, Y+18	; 0x12
   12830:	21 81       	ldd	r18, Z+1	; 0x01
   12832:	30 e0       	ldi	r19, 0x00	; 0
   12834:	40 e0       	ldi	r20, 0x00	; 0
   12836:	50 e0       	ldi	r21, 0x00	; 0
   12838:	68 e0       	ldi	r22, 0x08	; 8
   1283a:	8f e1       	ldi	r24, 0x1F	; 31
   1283c:	0c de       	rcall	.-1000   	; 0x12456 <print_tok_val>
   1283e:	e9 89       	ldd	r30, Y+17	; 0x11
   12840:	fa 89       	ldd	r31, Y+18	; 0x12
   12842:	42 81       	ldd	r20, Z+2	; 0x02
   12844:	53 81       	ldd	r21, Z+3	; 0x03
   12846:	68 e0       	ldi	r22, 0x08	; 8
   12848:	82 e1       	ldi	r24, 0x12	; 18
   1284a:	45 de       	rcall	.-886    	; 0x124d6 <print_tok_str>
   1284c:	64 e0       	ldi	r22, 0x04	; 4
   1284e:	81 e1       	ldi	r24, 0x11	; 17
   12850:	77 de       	rcall	.-786    	; 0x12540 <print_tok>
   12852:	64 e0       	ldi	r22, 0x04	; 4
   12854:	85 e1       	ldi	r24, 0x15	; 21
   12856:	74 de       	rcall	.-792    	; 0x12540 <print_tok>
   12858:	e9 89       	ldd	r30, Y+17	; 0x11
   1285a:	fa 89       	ldd	r31, Y+18	; 0x12
   1285c:	24 81       	ldd	r18, Z+4	; 0x04
   1285e:	35 81       	ldd	r19, Z+5	; 0x05
   12860:	40 e0       	ldi	r20, 0x00	; 0
   12862:	50 e0       	ldi	r21, 0x00	; 0
   12864:	68 e0       	ldi	r22, 0x08	; 8
   12866:	87 e1       	ldi	r24, 0x17	; 23
   12868:	f6 dd       	rcall	.-1044   	; 0x12456 <print_tok_val>
   1286a:	64 e0       	ldi	r22, 0x04	; 4
   1286c:	81 e1       	ldi	r24, 0x11	; 17
   1286e:	68 de       	rcall	.-816    	; 0x12540 <print_tok>
   12870:	a1 14       	cp	r10, r1
   12872:	b1 04       	cpc	r11, r1
   12874:	09 f1       	breq	.+66     	; 0x128b8 <display_Config+0x176>
   12876:	64 e0       	ldi	r22, 0x04	; 4
   12878:	8b e0       	ldi	r24, 0x0B	; 11
   1287a:	62 de       	rcall	.-828    	; 0x12540 <print_tok>
   1287c:	e9 89       	ldd	r30, Y+17	; 0x11
   1287e:	fa 89       	ldd	r31, Y+18	; 0x12
   12880:	26 81       	ldd	r18, Z+6	; 0x06
   12882:	37 81       	ldd	r19, Z+7	; 0x07
   12884:	40 e0       	ldi	r20, 0x00	; 0
   12886:	50 e0       	ldi	r21, 0x00	; 0
   12888:	68 e0       	ldi	r22, 0x08	; 8
   1288a:	88 e2       	ldi	r24, 0x28	; 40
   1288c:	e4 dd       	rcall	.-1080   	; 0x12456 <print_tok_val>
   1288e:	e9 89       	ldd	r30, Y+17	; 0x11
   12890:	fa 89       	ldd	r31, Y+18	; 0x12
   12892:	20 85       	ldd	r18, Z+8	; 0x08
   12894:	31 85       	ldd	r19, Z+9	; 0x09
   12896:	40 e0       	ldi	r20, 0x00	; 0
   12898:	50 e0       	ldi	r21, 0x00	; 0
   1289a:	68 e0       	ldi	r22, 0x08	; 8
   1289c:	85 e2       	ldi	r24, 0x25	; 37
   1289e:	db dd       	rcall	.-1098   	; 0x12456 <print_tok_val>
   128a0:	e9 89       	ldd	r30, Y+17	; 0x11
   128a2:	fa 89       	ldd	r31, Y+18	; 0x12
   128a4:	22 85       	ldd	r18, Z+10	; 0x0a
   128a6:	30 e0       	ldi	r19, 0x00	; 0
   128a8:	40 e0       	ldi	r20, 0x00	; 0
   128aa:	50 e0       	ldi	r21, 0x00	; 0
   128ac:	68 e0       	ldi	r22, 0x08	; 8
   128ae:	86 e2       	ldi	r24, 0x26	; 38
   128b0:	d2 dd       	rcall	.-1116   	; 0x12456 <print_tok_val>
   128b2:	64 e0       	ldi	r22, 0x04	; 4
   128b4:	81 e1       	ldi	r24, 0x11	; 17
   128b6:	44 de       	rcall	.-888    	; 0x12540 <print_tok>
   128b8:	64 e0       	ldi	r22, 0x04	; 4
   128ba:	87 e2       	ldi	r24, 0x27	; 39
   128bc:	41 de       	rcall	.-894    	; 0x12540 <print_tok>
   128be:	a1 14       	cp	r10, r1
   128c0:	b1 04       	cpc	r11, r1
   128c2:	49 f0       	breq	.+18     	; 0x128d6 <display_Config+0x194>
   128c4:	e9 89       	ldd	r30, Y+17	; 0x11
   128c6:	fa 89       	ldd	r31, Y+18	; 0x12
   128c8:	23 85       	ldd	r18, Z+11	; 0x0b
   128ca:	30 e0       	ldi	r19, 0x00	; 0
   128cc:	40 e0       	ldi	r20, 0x00	; 0
   128ce:	50 e0       	ldi	r21, 0x00	; 0
   128d0:	68 e0       	ldi	r22, 0x08	; 8
   128d2:	89 e2       	ldi	r24, 0x29	; 41
   128d4:	c0 dd       	rcall	.-1152   	; 0x12456 <print_tok_val>
   128d6:	e9 89       	ldd	r30, Y+17	; 0x11
   128d8:	fa 89       	ldd	r31, Y+18	; 0x12
   128da:	24 85       	ldd	r18, Z+12	; 0x0c
   128dc:	35 85       	ldd	r19, Z+13	; 0x0d
   128de:	46 85       	ldd	r20, Z+14	; 0x0e
   128e0:	57 85       	ldd	r21, Z+15	; 0x0f
   128e2:	68 e0       	ldi	r22, 0x08	; 8
   128e4:	8f e0       	ldi	r24, 0x0F	; 15
   128e6:	b7 dd       	rcall	.-1170   	; 0x12456 <print_tok_val>
   128e8:	a1 14       	cp	r10, r1
   128ea:	b1 04       	cpc	r11, r1
   128ec:	09 f4       	brne	.+2      	; 0x128f0 <display_Config+0x1ae>
   128ee:	5a c0       	rjmp	.+180    	; 0x129a4 <display_Config+0x262>
   128f0:	e9 89       	ldd	r30, Y+17	; 0x11
   128f2:	fa 89       	ldd	r31, Y+18	; 0x12
   128f4:	20 89       	ldd	r18, Z+16	; 0x10
   128f6:	31 89       	ldd	r19, Z+17	; 0x11
   128f8:	40 e0       	ldi	r20, 0x00	; 0
   128fa:	50 e0       	ldi	r21, 0x00	; 0
   128fc:	68 e0       	ldi	r22, 0x08	; 8
   128fe:	87 e0       	ldi	r24, 0x07	; 7
   12900:	aa dd       	rcall	.-1196   	; 0x12456 <print_tok_val>
   12902:	e9 89       	ldd	r30, Y+17	; 0x11
   12904:	fa 89       	ldd	r31, Y+18	; 0x12
   12906:	22 89       	ldd	r18, Z+18	; 0x12
   12908:	30 e0       	ldi	r19, 0x00	; 0
   1290a:	40 e0       	ldi	r20, 0x00	; 0
   1290c:	50 e0       	ldi	r21, 0x00	; 0
   1290e:	68 e0       	ldi	r22, 0x08	; 8
   12910:	85 e0       	ldi	r24, 0x05	; 5
   12912:	a1 dd       	rcall	.-1214   	; 0x12456 <print_tok_val>
   12914:	e9 89       	ldd	r30, Y+17	; 0x11
   12916:	fa 89       	ldd	r31, Y+18	; 0x12
   12918:	23 89       	ldd	r18, Z+19	; 0x13
   1291a:	30 e0       	ldi	r19, 0x00	; 0
   1291c:	40 e0       	ldi	r20, 0x00	; 0
   1291e:	50 e0       	ldi	r21, 0x00	; 0
   12920:	68 e0       	ldi	r22, 0x08	; 8
   12922:	86 e0       	ldi	r24, 0x06	; 6
   12924:	98 dd       	rcall	.-1232   	; 0x12456 <print_tok_val>
   12926:	e9 89       	ldd	r30, Y+17	; 0x11
   12928:	fa 89       	ldd	r31, Y+18	; 0x12
   1292a:	24 89       	ldd	r18, Z+20	; 0x14
   1292c:	35 89       	ldd	r19, Z+21	; 0x15
   1292e:	40 e0       	ldi	r20, 0x00	; 0
   12930:	50 e0       	ldi	r21, 0x00	; 0
   12932:	68 e0       	ldi	r22, 0x08	; 8
   12934:	84 e0       	ldi	r24, 0x04	; 4
   12936:	8f dd       	rcall	.-1250   	; 0x12456 <print_tok_val>
   12938:	e9 89       	ldd	r30, Y+17	; 0x11
   1293a:	fa 89       	ldd	r31, Y+18	; 0x12
   1293c:	26 89       	ldd	r18, Z+22	; 0x16
   1293e:	37 89       	ldd	r19, Z+23	; 0x17
   12940:	40 e0       	ldi	r20, 0x00	; 0
   12942:	50 e0       	ldi	r21, 0x00	; 0
   12944:	68 e0       	ldi	r22, 0x08	; 8
   12946:	8a e0       	ldi	r24, 0x0A	; 10
   12948:	86 dd       	rcall	.-1268   	; 0x12456 <print_tok_val>
   1294a:	e9 89       	ldd	r30, Y+17	; 0x11
   1294c:	fa 89       	ldd	r31, Y+18	; 0x12
   1294e:	20 8d       	ldd	r18, Z+24	; 0x18
   12950:	31 8d       	ldd	r19, Z+25	; 0x19
   12952:	40 e0       	ldi	r20, 0x00	; 0
   12954:	50 e0       	ldi	r21, 0x00	; 0
   12956:	68 e0       	ldi	r22, 0x08	; 8
   12958:	8e e1       	ldi	r24, 0x1E	; 30
   1295a:	7d dd       	rcall	.-1286   	; 0x12456 <print_tok_val>
   1295c:	e9 89       	ldd	r30, Y+17	; 0x11
   1295e:	fa 89       	ldd	r31, Y+18	; 0x12
   12960:	22 8d       	ldd	r18, Z+26	; 0x1a
   12962:	33 8d       	ldd	r19, Z+27	; 0x1b
   12964:	40 e0       	ldi	r20, 0x00	; 0
   12966:	50 e0       	ldi	r21, 0x00	; 0
   12968:	68 e0       	ldi	r22, 0x08	; 8
   1296a:	80 e0       	ldi	r24, 0x00	; 0
   1296c:	74 dd       	rcall	.-1304   	; 0x12456 <print_tok_val>
   1296e:	e9 89       	ldd	r30, Y+17	; 0x11
   12970:	fa 89       	ldd	r31, Y+18	; 0x12
   12972:	24 8d       	ldd	r18, Z+28	; 0x1c
   12974:	30 e0       	ldi	r19, 0x00	; 0
   12976:	40 e0       	ldi	r20, 0x00	; 0
   12978:	50 e0       	ldi	r21, 0x00	; 0
   1297a:	68 e0       	ldi	r22, 0x08	; 8
   1297c:	8c e1       	ldi	r24, 0x1C	; 28
   1297e:	6b dd       	rcall	.-1322   	; 0x12456 <print_tok_val>
   12980:	e9 89       	ldd	r30, Y+17	; 0x11
   12982:	fa 89       	ldd	r31, Y+18	; 0x12
   12984:	25 8d       	ldd	r18, Z+29	; 0x1d
   12986:	30 e0       	ldi	r19, 0x00	; 0
   12988:	40 e0       	ldi	r20, 0x00	; 0
   1298a:	50 e0       	ldi	r21, 0x00	; 0
   1298c:	68 e0       	ldi	r22, 0x08	; 8
   1298e:	83 e1       	ldi	r24, 0x13	; 19
   12990:	62 dd       	rcall	.-1340   	; 0x12456 <print_tok_val>
   12992:	e9 89       	ldd	r30, Y+17	; 0x11
   12994:	fa 89       	ldd	r31, Y+18	; 0x12
   12996:	26 8d       	ldd	r18, Z+30	; 0x1e
   12998:	30 e0       	ldi	r19, 0x00	; 0
   1299a:	40 e0       	ldi	r20, 0x00	; 0
   1299c:	50 e0       	ldi	r21, 0x00	; 0
   1299e:	68 e0       	ldi	r22, 0x08	; 8
   129a0:	81 e2       	ldi	r24, 0x21	; 33
   129a2:	59 dd       	rcall	.-1358   	; 0x12456 <print_tok_val>
   129a4:	64 e0       	ldi	r22, 0x04	; 4
   129a6:	81 e1       	ldi	r24, 0x11	; 17
   129a8:	cb dd       	rcall	.-1130   	; 0x12540 <print_tok>
   129aa:	a1 14       	cp	r10, r1
   129ac:	b1 04       	cpc	r11, r1
   129ae:	99 f1       	breq	.+102    	; 0x12a16 <display_Config+0x2d4>
   129b0:	64 e0       	ldi	r22, 0x04	; 4
   129b2:	8a e2       	ldi	r24, 0x2A	; 42
   129b4:	c5 dd       	rcall	.-1142   	; 0x12540 <print_tok>
   129b6:	e9 89       	ldd	r30, Y+17	; 0x11
   129b8:	fa 89       	ldd	r31, Y+18	; 0x12
   129ba:	27 8d       	ldd	r18, Z+31	; 0x1f
   129bc:	30 a1       	ldd	r19, Z+32	; 0x20
   129be:	41 a1       	ldd	r20, Z+33	; 0x21
   129c0:	52 a1       	ldd	r21, Z+34	; 0x22
   129c2:	68 e0       	ldi	r22, 0x08	; 8
   129c4:	8a e1       	ldi	r24, 0x1A	; 26
   129c6:	47 dd       	rcall	.-1394   	; 0x12456 <print_tok_val>
   129c8:	e9 89       	ldd	r30, Y+17	; 0x11
   129ca:	fa 89       	ldd	r31, Y+18	; 0x12
   129cc:	23 a1       	ldd	r18, Z+35	; 0x23
   129ce:	30 e0       	ldi	r19, 0x00	; 0
   129d0:	40 e0       	ldi	r20, 0x00	; 0
   129d2:	50 e0       	ldi	r21, 0x00	; 0
   129d4:	68 e0       	ldi	r22, 0x08	; 8
   129d6:	8b e1       	ldi	r24, 0x1B	; 27
   129d8:	3e dd       	rcall	.-1412   	; 0x12456 <print_tok_val>
   129da:	e9 89       	ldd	r30, Y+17	; 0x11
   129dc:	fa 89       	ldd	r31, Y+18	; 0x12
   129de:	24 a1       	ldd	r18, Z+36	; 0x24
   129e0:	35 a1       	ldd	r19, Z+37	; 0x25
   129e2:	40 e0       	ldi	r20, 0x00	; 0
   129e4:	50 e0       	ldi	r21, 0x00	; 0
   129e6:	68 e0       	ldi	r22, 0x08	; 8
   129e8:	8d e1       	ldi	r24, 0x1D	; 29
   129ea:	35 dd       	rcall	.-1430   	; 0x12456 <print_tok_val>
   129ec:	e9 89       	ldd	r30, Y+17	; 0x11
   129ee:	fa 89       	ldd	r31, Y+18	; 0x12
   129f0:	26 a1       	ldd	r18, Z+38	; 0x26
   129f2:	37 a1       	ldd	r19, Z+39	; 0x27
   129f4:	40 a5       	ldd	r20, Z+40	; 0x28
   129f6:	51 a5       	ldd	r21, Z+41	; 0x29
   129f8:	68 e0       	ldi	r22, 0x08	; 8
   129fa:	89 e1       	ldi	r24, 0x19	; 25
   129fc:	2c dd       	rcall	.-1448   	; 0x12456 <print_tok_val>
   129fe:	e9 89       	ldd	r30, Y+17	; 0x11
   12a00:	fa 89       	ldd	r31, Y+18	; 0x12
   12a02:	22 a5       	ldd	r18, Z+42	; 0x2a
   12a04:	30 e0       	ldi	r19, 0x00	; 0
   12a06:	40 e0       	ldi	r20, 0x00	; 0
   12a08:	50 e0       	ldi	r21, 0x00	; 0
   12a0a:	68 e0       	ldi	r22, 0x08	; 8
   12a0c:	88 e1       	ldi	r24, 0x18	; 24
   12a0e:	23 dd       	rcall	.-1466   	; 0x12456 <print_tok_val>
   12a10:	64 e0       	ldi	r22, 0x04	; 4
   12a12:	81 e1       	ldi	r24, 0x11	; 17
   12a14:	95 dd       	rcall	.-1238   	; 0x12540 <print_tok>
   12a16:	e9 89       	ldd	r30, Y+17	; 0x11
   12a18:	fa 89       	ldd	r31, Y+18	; 0x12
   12a1a:	86 a1       	ldd	r24, Z+38	; 0x26
   12a1c:	97 a1       	ldd	r25, Z+39	; 0x27
   12a1e:	a0 a5       	ldd	r26, Z+40	; 0x28
   12a20:	b1 a5       	ldd	r27, Z+41	; 0x29
   12a22:	01 96       	adiw	r24, 0x01	; 1
   12a24:	a1 1d       	adc	r26, r1
   12a26:	b1 1d       	adc	r27, r1
   12a28:	ed b7       	in	r30, 0x3d	; 61
   12a2a:	fe b7       	in	r31, 0x3e	; 62
   12a2c:	84 83       	std	Z+4, r24	; 0x04
   12a2e:	95 83       	std	Z+5, r25	; 0x05
   12a30:	a6 83       	std	Z+6, r26	; 0x06
   12a32:	b7 83       	std	Z+7, r27	; 0x07
   12a34:	2c ed       	ldi	r18, 0xDC	; 220
   12a36:	39 e1       	ldi	r19, 0x19	; 25
   12a38:	c9 01       	movw	r24, r18
   12a3a:	a0 e0       	ldi	r26, 0x00	; 0
   12a3c:	81 83       	std	Z+1, r24	; 0x01
   12a3e:	92 83       	std	Z+2, r25	; 0x02
   12a40:	a3 83       	std	Z+3, r26	; 0x03
   12a42:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12a46:	60 e0       	ldi	r22, 0x00	; 0
   12a48:	81 e1       	ldi	r24, 0x11	; 17
   12a4a:	7a dd       	rcall	.-1292   	; 0x12540 <print_tok>
   12a4c:	f8 01       	movw	r30, r16
   12a4e:	80 81       	ld	r24, Z
   12a50:	81 30       	cpi	r24, 0x01	; 1
   12a52:	09 f0       	breq	.+2      	; 0x12a56 <display_Config+0x314>
   12a54:	ad c0       	rjmp	.+346    	; 0x12bb0 <display_Config+0x46e>
   12a56:	27 a1       	ldd	r18, Z+39	; 0x27
   12a58:	30 a5       	ldd	r19, Z+40	; 0x28
   12a5a:	3a 8b       	std	Y+18, r19	; 0x12
   12a5c:	29 8b       	std	Y+17, r18	; 0x11
   12a5e:	c8 01       	movw	r24, r16
   12a60:	07 96       	adiw	r24, 0x07	; 7
   12a62:	ed b7       	in	r30, 0x3d	; 61
   12a64:	fe b7       	in	r31, 0x3e	; 62
   12a66:	95 83       	std	Z+5, r25	; 0x05
   12a68:	84 83       	std	Z+4, r24	; 0x04
   12a6a:	2b 85       	ldd	r18, Y+11	; 0x0b
   12a6c:	3c 85       	ldd	r19, Y+12	; 0x0c
   12a6e:	4d 85       	ldd	r20, Y+13	; 0x0d
   12a70:	21 83       	std	Z+1, r18	; 0x01
   12a72:	32 83       	std	Z+2, r19	; 0x02
   12a74:	43 83       	std	Z+3, r20	; 0x03
   12a76:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12a7a:	e9 89       	ldd	r30, Y+17	; 0x11
   12a7c:	fa 89       	ldd	r31, Y+18	; 0x12
   12a7e:	80 81       	ld	r24, Z
   12a80:	90 e0       	ldi	r25, 0x00	; 0
   12a82:	ed b7       	in	r30, 0x3d	; 61
   12a84:	fe b7       	in	r31, 0x3e	; 62
   12a86:	95 83       	std	Z+5, r25	; 0x05
   12a88:	84 83       	std	Z+4, r24	; 0x04
   12a8a:	2e 85       	ldd	r18, Y+14	; 0x0e
   12a8c:	3f 85       	ldd	r19, Y+15	; 0x0f
   12a8e:	48 89       	ldd	r20, Y+16	; 0x10
   12a90:	21 83       	std	Z+1, r18	; 0x01
   12a92:	32 83       	std	Z+2, r19	; 0x02
   12a94:	43 83       	std	Z+3, r20	; 0x03
   12a96:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12a9a:	64 e0       	ldi	r22, 0x04	; 4
   12a9c:	85 e1       	ldi	r24, 0x15	; 21
   12a9e:	50 dd       	rcall	.-1376   	; 0x12540 <print_tok>
   12aa0:	e9 89       	ldd	r30, Y+17	; 0x11
   12aa2:	fa 89       	ldd	r31, Y+18	; 0x12
   12aa4:	20 81       	ld	r18, Z
   12aa6:	30 e0       	ldi	r19, 0x00	; 0
   12aa8:	40 e0       	ldi	r20, 0x00	; 0
   12aaa:	50 e0       	ldi	r21, 0x00	; 0
   12aac:	68 e0       	ldi	r22, 0x08	; 8
   12aae:	81 e0       	ldi	r24, 0x01	; 1
   12ab0:	d2 dc       	rcall	.-1628   	; 0x12456 <print_tok_val>
   12ab2:	e9 89       	ldd	r30, Y+17	; 0x11
   12ab4:	fa 89       	ldd	r31, Y+18	; 0x12
   12ab6:	21 81       	ldd	r18, Z+1	; 0x01
   12ab8:	30 e0       	ldi	r19, 0x00	; 0
   12aba:	40 e0       	ldi	r20, 0x00	; 0
   12abc:	50 e0       	ldi	r21, 0x00	; 0
   12abe:	68 e0       	ldi	r22, 0x08	; 8
   12ac0:	8f e1       	ldi	r24, 0x1F	; 31
   12ac2:	c9 dc       	rcall	.-1646   	; 0x12456 <print_tok_val>
   12ac4:	e9 89       	ldd	r30, Y+17	; 0x11
   12ac6:	fa 89       	ldd	r31, Y+18	; 0x12
   12ac8:	42 81       	ldd	r20, Z+2	; 0x02
   12aca:	53 81       	ldd	r21, Z+3	; 0x03
   12acc:	68 e0       	ldi	r22, 0x08	; 8
   12ace:	82 e1       	ldi	r24, 0x12	; 18
   12ad0:	02 dd       	rcall	.-1532   	; 0x124d6 <print_tok_str>
   12ad2:	64 e0       	ldi	r22, 0x04	; 4
   12ad4:	81 e1       	ldi	r24, 0x11	; 17
   12ad6:	34 dd       	rcall	.-1432   	; 0x12540 <print_tok>
   12ad8:	64 e0       	ldi	r22, 0x04	; 4
   12ada:	89 e0       	ldi	r24, 0x09	; 9
   12adc:	31 dd       	rcall	.-1438   	; 0x12540 <print_tok>
   12ade:	e9 89       	ldd	r30, Y+17	; 0x11
   12ae0:	fa 89       	ldd	r31, Y+18	; 0x12
   12ae2:	24 81       	ldd	r18, Z+4	; 0x04
   12ae4:	35 81       	ldd	r19, Z+5	; 0x05
   12ae6:	40 e0       	ldi	r20, 0x00	; 0
   12ae8:	50 e0       	ldi	r21, 0x00	; 0
   12aea:	68 e0       	ldi	r22, 0x08	; 8
   12aec:	87 e1       	ldi	r24, 0x17	; 23
   12aee:	b3 dc       	rcall	.-1690   	; 0x12456 <print_tok_val>
   12af0:	64 e0       	ldi	r22, 0x04	; 4
   12af2:	81 e1       	ldi	r24, 0x11	; 17
   12af4:	25 dd       	rcall	.-1462   	; 0x12540 <print_tok>
   12af6:	a1 14       	cp	r10, r1
   12af8:	b1 04       	cpc	r11, r1
   12afa:	91 f1       	breq	.+100    	; 0x12b60 <display_Config+0x41e>
   12afc:	64 e0       	ldi	r22, 0x04	; 4
   12afe:	84 e1       	ldi	r24, 0x14	; 20
   12b00:	1f dd       	rcall	.-1474   	; 0x12540 <print_tok>
   12b02:	e9 89       	ldd	r30, Y+17	; 0x11
   12b04:	fa 89       	ldd	r31, Y+18	; 0x12
   12b06:	26 81       	ldd	r18, Z+6	; 0x06
   12b08:	37 81       	ldd	r19, Z+7	; 0x07
   12b0a:	03 2e       	mov	r0, r19
   12b0c:	00 0c       	add	r0, r0
   12b0e:	44 0b       	sbc	r20, r20
   12b10:	55 0b       	sbc	r21, r21
   12b12:	68 e0       	ldi	r22, 0x08	; 8
   12b14:	88 e0       	ldi	r24, 0x08	; 8
   12b16:	9f dc       	rcall	.-1730   	; 0x12456 <print_tok_val>
   12b18:	e9 89       	ldd	r30, Y+17	; 0x11
   12b1a:	fa 89       	ldd	r31, Y+18	; 0x12
   12b1c:	20 85       	ldd	r18, Z+8	; 0x08
   12b1e:	31 85       	ldd	r19, Z+9	; 0x09
   12b20:	03 2e       	mov	r0, r19
   12b22:	00 0c       	add	r0, r0
   12b24:	44 0b       	sbc	r20, r20
   12b26:	55 0b       	sbc	r21, r21
   12b28:	68 e0       	ldi	r22, 0x08	; 8
   12b2a:	82 e2       	ldi	r24, 0x22	; 34
   12b2c:	94 dc       	rcall	.-1752   	; 0x12456 <print_tok_val>
   12b2e:	e9 89       	ldd	r30, Y+17	; 0x11
   12b30:	fa 89       	ldd	r31, Y+18	; 0x12
   12b32:	22 85       	ldd	r18, Z+10	; 0x0a
   12b34:	33 85       	ldd	r19, Z+11	; 0x0b
   12b36:	03 2e       	mov	r0, r19
   12b38:	00 0c       	add	r0, r0
   12b3a:	44 0b       	sbc	r20, r20
   12b3c:	55 0b       	sbc	r21, r21
   12b3e:	68 e0       	ldi	r22, 0x08	; 8
   12b40:	86 e1       	ldi	r24, 0x16	; 22
   12b42:	89 dc       	rcall	.-1774   	; 0x12456 <print_tok_val>
   12b44:	e9 89       	ldd	r30, Y+17	; 0x11
   12b46:	fa 89       	ldd	r31, Y+18	; 0x12
   12b48:	24 85       	ldd	r18, Z+12	; 0x0c
   12b4a:	35 85       	ldd	r19, Z+13	; 0x0d
   12b4c:	03 2e       	mov	r0, r19
   12b4e:	00 0c       	add	r0, r0
   12b50:	44 0b       	sbc	r20, r20
   12b52:	55 0b       	sbc	r21, r21
   12b54:	68 e0       	ldi	r22, 0x08	; 8
   12b56:	8d e0       	ldi	r24, 0x0D	; 13
   12b58:	7e dc       	rcall	.-1796   	; 0x12456 <print_tok_val>
   12b5a:	64 e0       	ldi	r22, 0x04	; 4
   12b5c:	81 e1       	ldi	r24, 0x11	; 17
   12b5e:	f0 dc       	rcall	.-1568   	; 0x12540 <print_tok>
   12b60:	e9 89       	ldd	r30, Y+17	; 0x11
   12b62:	fa 89       	ldd	r31, Y+18	; 0x12
   12b64:	44 85       	ldd	r20, Z+12	; 0x0c
   12b66:	55 85       	ldd	r21, Z+13	; 0x0d
   12b68:	20 85       	ldd	r18, Z+8	; 0x08
   12b6a:	31 85       	ldd	r19, Z+9	; 0x09
   12b6c:	42 9f       	mul	r20, r18
   12b6e:	c0 01       	movw	r24, r0
   12b70:	43 9f       	mul	r20, r19
   12b72:	90 0d       	add	r25, r0
   12b74:	52 9f       	mul	r21, r18
   12b76:	90 0d       	add	r25, r0
   12b78:	11 24       	eor	r1, r1
   12b7a:	42 85       	ldd	r20, Z+10	; 0x0a
   12b7c:	53 85       	ldd	r21, Z+11	; 0x0b
   12b7e:	84 9f       	mul	r24, r20
   12b80:	90 01       	movw	r18, r0
   12b82:	85 9f       	mul	r24, r21
   12b84:	30 0d       	add	r19, r0
   12b86:	94 9f       	mul	r25, r20
   12b88:	30 0d       	add	r19, r0
   12b8a:	11 24       	eor	r1, r1
   12b8c:	c9 01       	movw	r24, r18
   12b8e:	33 0f       	add	r19, r19
   12b90:	aa 0b       	sbc	r26, r26
   12b92:	bb 0b       	sbc	r27, r27
   12b94:	ed b7       	in	r30, 0x3d	; 61
   12b96:	fe b7       	in	r31, 0x3e	; 62
   12b98:	84 83       	std	Z+4, r24	; 0x04
   12b9a:	95 83       	std	Z+5, r25	; 0x05
   12b9c:	a6 83       	std	Z+6, r26	; 0x06
   12b9e:	b7 83       	std	Z+7, r27	; 0x07
   12ba0:	21 82       	std	Z+1, r2	; 0x01
   12ba2:	32 82       	std	Z+2, r3	; 0x02
   12ba4:	43 82       	std	Z+3, r4	; 0x03
   12ba6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12baa:	60 e0       	ldi	r22, 0x00	; 0
   12bac:	81 e1       	ldi	r24, 0x11	; 17
   12bae:	c8 dc       	rcall	.-1648   	; 0x12540 <print_tok>
   12bb0:	f8 01       	movw	r30, r16
   12bb2:	80 81       	ld	r24, Z
   12bb4:	84 30       	cpi	r24, 0x04	; 4
   12bb6:	c9 f4       	brne	.+50     	; 0x12bea <display_Config+0x4a8>
   12bb8:	27 a1       	ldd	r18, Z+39	; 0x27
   12bba:	30 a5       	ldd	r19, Z+40	; 0x28
   12bbc:	3a 8b       	std	Y+18, r19	; 0x12
   12bbe:	29 8b       	std	Y+17, r18	; 0x11
   12bc0:	60 e0       	ldi	r22, 0x00	; 0
   12bc2:	80 e2       	ldi	r24, 0x20	; 32
   12bc4:	bd dc       	rcall	.-1670   	; 0x12540 <print_tok>
   12bc6:	64 e0       	ldi	r22, 0x04	; 4
   12bc8:	89 e0       	ldi	r24, 0x09	; 9
   12bca:	ba dc       	rcall	.-1676   	; 0x12540 <print_tok>
   12bcc:	e9 89       	ldd	r30, Y+17	; 0x11
   12bce:	fa 89       	ldd	r31, Y+18	; 0x12
   12bd0:	20 81       	ld	r18, Z
   12bd2:	30 e0       	ldi	r19, 0x00	; 0
   12bd4:	40 e0       	ldi	r20, 0x00	; 0
   12bd6:	50 e0       	ldi	r21, 0x00	; 0
   12bd8:	68 e0       	ldi	r22, 0x08	; 8
   12bda:	81 e0       	ldi	r24, 0x01	; 1
   12bdc:	3c dc       	rcall	.-1928   	; 0x12456 <print_tok_val>
   12bde:	64 e0       	ldi	r22, 0x04	; 4
   12be0:	81 e1       	ldi	r24, 0x11	; 17
   12be2:	ae dc       	rcall	.-1700   	; 0x12540 <print_tok>
   12be4:	60 e0       	ldi	r22, 0x00	; 0
   12be6:	81 e1       	ldi	r24, 0x11	; 17
   12be8:	ab dc       	rcall	.-1706   	; 0x12540 <print_tok>
   12bea:	28 85       	ldd	r18, Y+8	; 0x08
   12bec:	39 85       	ldd	r19, Y+9	; 0x09
   12bee:	4a 85       	ldd	r20, Y+10	; 0x0a
   12bf0:	ed b7       	in	r30, 0x3d	; 61
   12bf2:	fe b7       	in	r31, 0x3e	; 62
   12bf4:	21 83       	std	Z+1, r18	; 0x01
   12bf6:	32 83       	std	Z+2, r19	; 0x02
   12bf8:	43 83       	std	Z+3, r20	; 0x03
   12bfa:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12bfe:	05 5d       	subi	r16, 0xD5	; 213
   12c00:	1f 4f       	sbci	r17, 0xFF	; 255
   12c02:	2b ef       	ldi	r18, 0xFB	; 251
   12c04:	30 e2       	ldi	r19, 0x20	; 32
   12c06:	20 17       	cp	r18, r16
   12c08:	31 07       	cpc	r19, r17
   12c0a:	09 f0       	breq	.+2      	; 0x12c0e <display_Config+0x4cc>
   12c0c:	df cd       	rjmp	.-1090   	; 0x127cc <display_Config+0x8a>
   12c0e:	8b e9       	ldi	r24, 0x9B	; 155
   12c10:	99 e1       	ldi	r25, 0x19	; 25
   12c12:	a0 e0       	ldi	r26, 0x00	; 0
   12c14:	ed b7       	in	r30, 0x3d	; 61
   12c16:	fe b7       	in	r31, 0x3e	; 62
   12c18:	81 83       	std	Z+1, r24	; 0x01
   12c1a:	92 83       	std	Z+2, r25	; 0x02
   12c1c:	a3 83       	std	Z+3, r26	; 0x03
   12c1e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12c22:	62 96       	adiw	r28, 0x12	; 18
   12c24:	0f b6       	in	r0, 0x3f	; 63
   12c26:	f8 94       	cli
   12c28:	de bf       	out	0x3e, r29	; 62
   12c2a:	0f be       	out	0x3f, r0	; 63
   12c2c:	cd bf       	out	0x3d, r28	; 61
   12c2e:	df 91       	pop	r29
   12c30:	cf 91       	pop	r28
   12c32:	1f 91       	pop	r17
   12c34:	0f 91       	pop	r16
   12c36:	ef 90       	pop	r14
   12c38:	df 90       	pop	r13
   12c3a:	cf 90       	pop	r12
   12c3c:	bf 90       	pop	r11
   12c3e:	af 90       	pop	r10
   12c40:	8f 90       	pop	r8
   12c42:	7f 90       	pop	r7
   12c44:	6f 90       	pop	r6
   12c46:	4f 90       	pop	r4
   12c48:	3f 90       	pop	r3
   12c4a:	2f 90       	pop	r2
   12c4c:	08 95       	ret

00012c4e <find_type>:
   12c4e:	e7 ef       	ldi	r30, 0xF7	; 247
   12c50:	fe e1       	ldi	r31, 0x1E	; 30
   12c52:	20 e0       	ldi	r18, 0x00	; 0
   12c54:	30 e0       	ldi	r19, 0x00	; 0
   12c56:	40 81       	ld	r20, Z
   12c58:	50 e0       	ldi	r21, 0x00	; 0
   12c5a:	48 17       	cp	r20, r24
   12c5c:	59 07       	cpc	r21, r25
   12c5e:	49 f0       	breq	.+18     	; 0x12c72 <find_type+0x24>
   12c60:	2f 5f       	subi	r18, 0xFF	; 255
   12c62:	3f 4f       	sbci	r19, 0xFF	; 255
   12c64:	bb 96       	adiw	r30, 0x2b	; 43
   12c66:	2c 30       	cpi	r18, 0x0C	; 12
   12c68:	31 05       	cpc	r19, r1
   12c6a:	a9 f7       	brne	.-22     	; 0x12c56 <find_type+0x8>
   12c6c:	8f ef       	ldi	r24, 0xFF	; 255
   12c6e:	9f ef       	ldi	r25, 0xFF	; 255
   12c70:	08 95       	ret
   12c72:	c9 01       	movw	r24, r18
   12c74:	08 95       	ret

00012c76 <count_drive_types>:
   12c76:	28 2f       	mov	r18, r24
   12c78:	e7 ef       	ldi	r30, 0xF7	; 247
   12c7a:	fe e1       	ldi	r31, 0x1E	; 30
   12c7c:	80 e0       	ldi	r24, 0x00	; 0
   12c7e:	90 e0       	ldi	r25, 0x00	; 0
   12c80:	30 81       	ld	r19, Z
   12c82:	32 13       	cpse	r19, r18
   12c84:	01 c0       	rjmp	.+2      	; 0x12c88 <count_drive_types+0x12>
   12c86:	01 96       	adiw	r24, 0x01	; 1
   12c88:	bb 96       	adiw	r30, 0x2b	; 43
   12c8a:	30 e2       	ldi	r19, 0x20	; 32
   12c8c:	eb 3f       	cpi	r30, 0xFB	; 251
   12c8e:	f3 07       	cpc	r31, r19
   12c90:	b9 f7       	brne	.-18     	; 0x12c80 <count_drive_types+0xa>
   12c92:	08 95       	ret

00012c94 <type_to_str>:
   12c94:	00 97       	sbiw	r24, 0x00	; 0
   12c96:	59 f0       	breq	.+22     	; 0x12cae <type_to_str+0x1a>
   12c98:	81 30       	cpi	r24, 0x01	; 1
   12c9a:	91 05       	cpc	r25, r1
   12c9c:	59 f0       	breq	.+22     	; 0x12cb4 <type_to_str+0x20>
   12c9e:	83 30       	cpi	r24, 0x03	; 3
   12ca0:	91 05       	cpc	r25, r1
   12ca2:	59 f0       	breq	.+22     	; 0x12cba <type_to_str+0x26>
   12ca4:	04 97       	sbiw	r24, 0x04	; 4
   12ca6:	61 f0       	breq	.+24     	; 0x12cc0 <type_to_str+0x2c>
   12ca8:	85 e3       	ldi	r24, 0x35	; 53
   12caa:	9e e0       	ldi	r25, 0x0E	; 14
   12cac:	08 95       	ret
   12cae:	8b e0       	ldi	r24, 0x0B	; 11
   12cb0:	9e e0       	ldi	r25, 0x0E	; 14
   12cb2:	08 95       	ret
   12cb4:	83 e1       	ldi	r24, 0x13	; 19
   12cb6:	9e e0       	ldi	r25, 0x0E	; 14
   12cb8:	08 95       	ret
   12cba:	8b e2       	ldi	r24, 0x2B	; 43
   12cbc:	9e e0       	ldi	r25, 0x0E	; 14
   12cbe:	08 95       	ret
   12cc0:	8e e1       	ldi	r24, 0x1E	; 30
   12cc2:	9e e0       	ldi	r25, 0x0E	; 14
   12cc4:	08 95       	ret

00012cc6 <find_free>:
   12cc6:	80 e0       	ldi	r24, 0x00	; 0
   12cc8:	90 e0       	ldi	r25, 0x00	; 0
   12cca:	c1 cf       	rjmp	.-126    	; 0x12c4e <find_type>
   12ccc:	08 95       	ret

00012cce <find_device>:
   12cce:	9b 01       	movw	r18, r22
   12cd0:	20 52       	subi	r18, 0x20	; 32
   12cd2:	31 09       	sbc	r19, r1
   12cd4:	2f 35       	cpi	r18, 0x5F	; 95
   12cd6:	31 05       	cpc	r19, r1
   12cd8:	f8 f4       	brcc	.+62     	; 0x12d18 <find_device+0x4a>
   12cda:	64 17       	cp	r22, r20
   12cdc:	75 07       	cpc	r23, r21
   12cde:	e4 f0       	brlt	.+56     	; 0x12d18 <find_device+0x4a>
   12ce0:	9a 01       	movw	r18, r20
   12ce2:	22 5e       	subi	r18, 0xE2	; 226
   12ce4:	3f 4f       	sbci	r19, 0xFF	; 255
   12ce6:	26 17       	cp	r18, r22
   12ce8:	37 07       	cpc	r19, r23
   12cea:	b4 f0       	brlt	.+44     	; 0x12d18 <find_device+0x4a>
   12cec:	64 1b       	sub	r22, r20
   12cee:	75 0b       	sbc	r23, r21
   12cf0:	e7 ef       	ldi	r30, 0xF7	; 247
   12cf2:	fe e1       	ldi	r31, 0x1E	; 30
   12cf4:	20 e0       	ldi	r18, 0x00	; 0
   12cf6:	30 e0       	ldi	r19, 0x00	; 0
   12cf8:	40 81       	ld	r20, Z
   12cfa:	50 e0       	ldi	r21, 0x00	; 0
   12cfc:	48 17       	cp	r20, r24
   12cfe:	59 07       	cpc	r21, r25
   12d00:	29 f4       	brne	.+10     	; 0x12d0c <find_device+0x3e>
   12d02:	41 81       	ldd	r20, Z+1	; 0x01
   12d04:	50 e0       	ldi	r21, 0x00	; 0
   12d06:	64 17       	cp	r22, r20
   12d08:	75 07       	cpc	r23, r21
   12d0a:	49 f0       	breq	.+18     	; 0x12d1e <find_device+0x50>
   12d0c:	2f 5f       	subi	r18, 0xFF	; 255
   12d0e:	3f 4f       	sbci	r19, 0xFF	; 255
   12d10:	bb 96       	adiw	r30, 0x2b	; 43
   12d12:	2c 30       	cpi	r18, 0x0C	; 12
   12d14:	31 05       	cpc	r19, r1
   12d16:	81 f7       	brne	.-32     	; 0x12cf8 <find_device+0x2a>
   12d18:	8f ef       	ldi	r24, 0xFF	; 255
   12d1a:	9f ef       	ldi	r25, 0xFF	; 255
   12d1c:	08 95       	ret
   12d1e:	c9 01       	movw	r24, r18
   12d20:	08 95       	ret

00012d22 <set_active_device>:
   12d22:	a9 e0       	ldi	r26, 0x09	; 9
   12d24:	b0 e0       	ldi	r27, 0x00	; 0
   12d26:	e7 e9       	ldi	r30, 0x97	; 151
   12d28:	f6 e9       	ldi	r31, 0x96	; 150
   12d2a:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__prologue_saves__+0x1c>
   12d2e:	8f 3f       	cpi	r24, 0xFF	; 255
   12d30:	2f ef       	ldi	r18, 0xFF	; 255
   12d32:	92 07       	cpc	r25, r18
   12d34:	09 f4       	brne	.+2      	; 0x12d38 <set_active_device+0x16>
   12d36:	d0 c0       	rjmp	.+416    	; 0x12ed8 <set_active_device+0x1b6>
   12d38:	ec 01       	movw	r28, r24
   12d3a:	0c 97       	sbiw	r24, 0x0c	; 12
   12d3c:	b0 f0       	brcs	.+44     	; 0x12d6a <set_active_device+0x48>
   12d3e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12d42:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12d46:	c9 01       	movw	r24, r18
   12d48:	81 70       	andi	r24, 0x01	; 1
   12d4a:	99 27       	eor	r25, r25
   12d4c:	20 ff       	sbrs	r18, 0
   12d4e:	c6 c0       	rjmp	.+396    	; 0x12edc <set_active_device+0x1ba>
   12d50:	ed b7       	in	r30, 0x3d	; 61
   12d52:	fe b7       	in	r31, 0x3e	; 62
   12d54:	d5 83       	std	Z+5, r29	; 0x05
   12d56:	c4 83       	std	Z+4, r28	; 0x04
   12d58:	86 e7       	ldi	r24, 0x76	; 118
   12d5a:	99 e1       	ldi	r25, 0x19	; 25
   12d5c:	a0 e0       	ldi	r26, 0x00	; 0
   12d5e:	81 83       	std	Z+1, r24	; 0x01
   12d60:	92 83       	std	Z+2, r25	; 0x02
   12d62:	a3 83       	std	Z+3, r26	; 0x03
   12d64:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12d68:	b7 c0       	rjmp	.+366    	; 0x12ed8 <set_active_device+0x1b6>
   12d6a:	8b e2       	ldi	r24, 0x2B	; 43
   12d6c:	8c 9f       	mul	r24, r28
   12d6e:	f0 01       	movw	r30, r0
   12d70:	8d 9f       	mul	r24, r29
   12d72:	f0 0d       	add	r31, r0
   12d74:	11 24       	eor	r1, r1
   12d76:	e9 50       	subi	r30, 0x09	; 9
   12d78:	f1 4e       	sbci	r31, 0xE1	; 225
   12d7a:	21 81       	ldd	r18, Z+1	; 0x01
   12d7c:	2f 31       	cpi	r18, 0x1F	; 31
   12d7e:	d0 f0       	brcs	.+52     	; 0x12db4 <set_active_device+0x92>
   12d80:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   12d84:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12d88:	ca 01       	movw	r24, r20
   12d8a:	81 70       	andi	r24, 0x01	; 1
   12d8c:	99 27       	eor	r25, r25
   12d8e:	40 ff       	sbrs	r20, 0
   12d90:	a5 c0       	rjmp	.+330    	; 0x12edc <set_active_device+0x1ba>
   12d92:	82 2f       	mov	r24, r18
   12d94:	90 e0       	ldi	r25, 0x00	; 0
   12d96:	ed b7       	in	r30, 0x3d	; 61
   12d98:	fe b7       	in	r31, 0x3e	; 62
   12d9a:	97 83       	std	Z+7, r25	; 0x07
   12d9c:	86 83       	std	Z+6, r24	; 0x06
   12d9e:	d5 83       	std	Z+5, r29	; 0x05
   12da0:	c4 83       	std	Z+4, r28	; 0x04
   12da2:	8d e3       	ldi	r24, 0x3D	; 61
   12da4:	99 e1       	ldi	r25, 0x19	; 25
   12da6:	a0 e0       	ldi	r26, 0x00	; 0
   12da8:	81 83       	std	Z+1, r24	; 0x01
   12daa:	92 83       	std	Z+2, r25	; 0x02
   12dac:	a3 83       	std	Z+3, r26	; 0x03
   12dae:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12db2:	92 c0       	rjmp	.+292    	; 0x12ed8 <set_active_device+0x1b6>
   12db4:	20 81       	ld	r18, Z
   12db6:	02 2f       	mov	r16, r18
   12db8:	10 e0       	ldi	r17, 0x00	; 0
   12dba:	87 a1       	ldd	r24, Z+39	; 0x27
   12dbc:	90 a5       	ldd	r25, Z+40	; 0x28
   12dbe:	00 97       	sbiw	r24, 0x00	; 0
   12dc0:	b1 f4       	brne	.+44     	; 0x12dee <set_active_device+0xcc>
   12dc2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12dc6:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12dca:	c9 01       	movw	r24, r18
   12dcc:	81 70       	andi	r24, 0x01	; 1
   12dce:	99 27       	eor	r25, r25
   12dd0:	20 ff       	sbrs	r18, 0
   12dd2:	84 c0       	rjmp	.+264    	; 0x12edc <set_active_device+0x1ba>
   12dd4:	c8 01       	movw	r24, r16
   12dd6:	5e df       	rcall	.-324    	; 0x12c94 <type_to_str>
   12dd8:	ed b7       	in	r30, 0x3d	; 61
   12dda:	fe b7       	in	r31, 0x3e	; 62
   12ddc:	91 87       	std	Z+9, r25	; 0x09
   12dde:	80 87       	std	Z+8, r24	; 0x08
   12de0:	17 83       	std	Z+7, r17	; 0x07
   12de2:	06 83       	std	Z+6, r16	; 0x06
   12de4:	d5 83       	std	Z+5, r29	; 0x05
   12de6:	c4 83       	std	Z+4, r28	; 0x04
   12de8:	88 e0       	ldi	r24, 0x08	; 8
   12dea:	99 e1       	ldi	r25, 0x19	; 25
   12dec:	6f c0       	rjmp	.+222    	; 0x12ecc <set_active_device+0x1aa>
   12dee:	01 15       	cp	r16, r1
   12df0:	11 05       	cpc	r17, r1
   12df2:	b9 f4       	brne	.+46     	; 0x12e22 <set_active_device+0x100>
   12df4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12df8:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12dfc:	c9 01       	movw	r24, r18
   12dfe:	81 70       	andi	r24, 0x01	; 1
   12e00:	99 27       	eor	r25, r25
   12e02:	20 ff       	sbrs	r18, 0
   12e04:	6b c0       	rjmp	.+214    	; 0x12edc <set_active_device+0x1ba>
   12e06:	80 e0       	ldi	r24, 0x00	; 0
   12e08:	90 e0       	ldi	r25, 0x00	; 0
   12e0a:	44 df       	rcall	.-376    	; 0x12c94 <type_to_str>
   12e0c:	ed b7       	in	r30, 0x3d	; 61
   12e0e:	fe b7       	in	r31, 0x3e	; 62
   12e10:	91 87       	std	Z+9, r25	; 0x09
   12e12:	80 87       	std	Z+8, r24	; 0x08
   12e14:	17 82       	std	Z+7, r1	; 0x07
   12e16:	16 82       	std	Z+6, r1	; 0x06
   12e18:	d5 83       	std	Z+5, r29	; 0x05
   12e1a:	c4 83       	std	Z+4, r28	; 0x04
   12e1c:	83 ed       	ldi	r24, 0xD3	; 211
   12e1e:	98 e1       	ldi	r25, 0x18	; 24
   12e20:	55 c0       	rjmp	.+170    	; 0x12ecc <set_active_device+0x1aa>
   12e22:	04 30       	cpi	r16, 0x04	; 4
   12e24:	11 05       	cpc	r17, r1
   12e26:	29 f4       	brne	.+10     	; 0x12e32 <set_active_device+0x110>
   12e28:	90 93 6e 19 	sts	0x196E, r25	; 0x80196e <PRINTERp+0x1>
   12e2c:	80 93 6d 19 	sts	0x196D, r24	; 0x80196d <PRINTERp>
   12e30:	35 c0       	rjmp	.+106    	; 0x12e9c <set_active_device+0x17a>
   12e32:	2d 7f       	andi	r18, 0xFD	; 253
   12e34:	21 30       	cpi	r18, 0x01	; 1
   12e36:	a9 f5       	brne	.+106    	; 0x12ea2 <set_active_device+0x180>
   12e38:	21 a5       	ldd	r18, Z+41	; 0x29
   12e3a:	32 a5       	ldd	r19, Z+42	; 0x2a
   12e3c:	21 15       	cp	r18, r1
   12e3e:	31 05       	cpc	r19, r1
   12e40:	b1 f4       	brne	.+44     	; 0x12e6e <set_active_device+0x14c>
   12e42:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12e46:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12e4a:	c9 01       	movw	r24, r18
   12e4c:	81 70       	andi	r24, 0x01	; 1
   12e4e:	99 27       	eor	r25, r25
   12e50:	20 ff       	sbrs	r18, 0
   12e52:	44 c0       	rjmp	.+136    	; 0x12edc <set_active_device+0x1ba>
   12e54:	c8 01       	movw	r24, r16
   12e56:	1e df       	rcall	.-452    	; 0x12c94 <type_to_str>
   12e58:	ed b7       	in	r30, 0x3d	; 61
   12e5a:	fe b7       	in	r31, 0x3e	; 62
   12e5c:	91 87       	std	Z+9, r25	; 0x09
   12e5e:	80 87       	std	Z+8, r24	; 0x08
   12e60:	17 83       	std	Z+7, r17	; 0x07
   12e62:	06 83       	std	Z+6, r16	; 0x06
   12e64:	d5 83       	std	Z+5, r29	; 0x05
   12e66:	c4 83       	std	Z+4, r28	; 0x04
   12e68:	8b e9       	ldi	r24, 0x9B	; 155
   12e6a:	98 e1       	ldi	r25, 0x18	; 24
   12e6c:	2f c0       	rjmp	.+94     	; 0x12ecc <set_active_device+0x1aa>
   12e6e:	01 30       	cpi	r16, 0x01	; 1
   12e70:	11 05       	cpc	r17, r1
   12e72:	49 f4       	brne	.+18     	; 0x12e86 <set_active_device+0x164>
   12e74:	90 93 68 19 	sts	0x1968, r25	; 0x801968 <AMIGOp+0x1>
   12e78:	80 93 67 19 	sts	0x1967, r24	; 0x801967 <AMIGOp>
   12e7c:	30 93 66 19 	sts	0x1966, r19	; 0x801966 <AMIGOs+0x1>
   12e80:	20 93 65 19 	sts	0x1965, r18	; 0x801965 <AMIGOs>
   12e84:	0b c0       	rjmp	.+22     	; 0x12e9c <set_active_device+0x17a>
   12e86:	03 30       	cpi	r16, 0x03	; 3
   12e88:	11 05       	cpc	r17, r1
   12e8a:	59 f4       	brne	.+22     	; 0x12ea2 <set_active_device+0x180>
   12e8c:	90 93 6c 19 	sts	0x196C, r25	; 0x80196c <SS80p+0x1>
   12e90:	80 93 6b 19 	sts	0x196B, r24	; 0x80196b <SS80p>
   12e94:	30 93 6a 19 	sts	0x196A, r19	; 0x80196a <SS80s+0x1>
   12e98:	20 93 69 19 	sts	0x1969, r18	; 0x801969 <SS80s>
   12e9c:	81 e0       	ldi	r24, 0x01	; 1
   12e9e:	90 e0       	ldi	r25, 0x00	; 0
   12ea0:	1d c0       	rjmp	.+58     	; 0x12edc <set_active_device+0x1ba>
   12ea2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12ea6:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12eaa:	c9 01       	movw	r24, r18
   12eac:	81 70       	andi	r24, 0x01	; 1
   12eae:	99 27       	eor	r25, r25
   12eb0:	20 ff       	sbrs	r18, 0
   12eb2:	14 c0       	rjmp	.+40     	; 0x12edc <set_active_device+0x1ba>
   12eb4:	c8 01       	movw	r24, r16
   12eb6:	ee de       	rcall	.-548    	; 0x12c94 <type_to_str>
   12eb8:	ed b7       	in	r30, 0x3d	; 61
   12eba:	fe b7       	in	r31, 0x3e	; 62
   12ebc:	91 87       	std	Z+9, r25	; 0x09
   12ebe:	80 87       	std	Z+8, r24	; 0x08
   12ec0:	17 83       	std	Z+7, r17	; 0x07
   12ec2:	06 83       	std	Z+6, r16	; 0x06
   12ec4:	d5 83       	std	Z+5, r29	; 0x05
   12ec6:	c4 83       	std	Z+4, r28	; 0x04
   12ec8:	80 e7       	ldi	r24, 0x70	; 112
   12eca:	98 e1       	ldi	r25, 0x18	; 24
   12ecc:	a0 e0       	ldi	r26, 0x00	; 0
   12ece:	81 83       	std	Z+1, r24	; 0x01
   12ed0:	92 83       	std	Z+2, r25	; 0x02
   12ed2:	a3 83       	std	Z+3, r26	; 0x03
   12ed4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12ed8:	80 e0       	ldi	r24, 0x00	; 0
   12eda:	90 e0       	ldi	r25, 0x00	; 0
   12edc:	cd b7       	in	r28, 0x3d	; 61
   12ede:	de b7       	in	r29, 0x3e	; 62
   12ee0:	29 96       	adiw	r28, 0x09	; 9
   12ee2:	e4 e0       	ldi	r30, 0x04	; 4
   12ee4:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

00012ee8 <SS80_Set_Defaults>:
   12ee8:	0f 93       	push	r16
   12eea:	1f 93       	push	r17
   12eec:	cf 93       	push	r28
   12eee:	df 93       	push	r29
   12ef0:	ec 01       	movw	r28, r24
   12ef2:	82 e0       	ldi	r24, 0x02	; 2
   12ef4:	90 e0       	ldi	r25, 0x00	; 0
   12ef6:	ab de       	rcall	.-682    	; 0x12c4e <find_type>
   12ef8:	97 fd       	sbrc	r25, 7
   12efa:	6b c0       	rjmp	.+214    	; 0x12fd2 <SS80_Set_Defaults+0xea>
   12efc:	2b e2       	ldi	r18, 0x2B	; 43
   12efe:	2c 9f       	mul	r18, r28
   12f00:	f0 01       	movw	r30, r0
   12f02:	2d 9f       	mul	r18, r29
   12f04:	f0 0d       	add	r31, r0
   12f06:	11 24       	eor	r1, r1
   12f08:	e9 50       	subi	r30, 0x09	; 9
   12f0a:	f1 4e       	sbci	r31, 0xE1	; 225
   12f0c:	c7 a1       	ldd	r28, Z+39	; 0x27
   12f0e:	d0 a5       	ldd	r29, Z+40	; 0x28
   12f10:	28 9f       	mul	r18, r24
   12f12:	f0 01       	movw	r30, r0
   12f14:	29 9f       	mul	r18, r25
   12f16:	f0 0d       	add	r31, r0
   12f18:	11 24       	eor	r1, r1
   12f1a:	e9 50       	subi	r30, 0x09	; 9
   12f1c:	f1 4e       	sbci	r31, 0xE1	; 225
   12f1e:	07 a1       	ldd	r16, Z+39	; 0x27
   12f20:	10 a5       	ldd	r17, Z+40	; 0x28
   12f22:	f8 01       	movw	r30, r16
   12f24:	80 81       	ld	r24, Z
   12f26:	88 83       	st	Y, r24
   12f28:	81 81       	ldd	r24, Z+1	; 0x01
   12f2a:	89 83       	std	Y+1, r24	; 0x01
   12f2c:	82 81       	ldd	r24, Z+2	; 0x02
   12f2e:	93 81       	ldd	r25, Z+3	; 0x03
   12f30:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <stralloc>
   12f34:	9b 83       	std	Y+3, r25	; 0x03
   12f36:	8a 83       	std	Y+2, r24	; 0x02
   12f38:	f8 01       	movw	r30, r16
   12f3a:	84 81       	ldd	r24, Z+4	; 0x04
   12f3c:	95 81       	ldd	r25, Z+5	; 0x05
   12f3e:	9d 83       	std	Y+5, r25	; 0x05
   12f40:	8c 83       	std	Y+4, r24	; 0x04
   12f42:	86 81       	ldd	r24, Z+6	; 0x06
   12f44:	97 81       	ldd	r25, Z+7	; 0x07
   12f46:	9f 83       	std	Y+7, r25	; 0x07
   12f48:	8e 83       	std	Y+6, r24	; 0x06
   12f4a:	80 85       	ldd	r24, Z+8	; 0x08
   12f4c:	91 85       	ldd	r25, Z+9	; 0x09
   12f4e:	99 87       	std	Y+9, r25	; 0x09
   12f50:	88 87       	std	Y+8, r24	; 0x08
   12f52:	82 85       	ldd	r24, Z+10	; 0x0a
   12f54:	8a 87       	std	Y+10, r24	; 0x0a
   12f56:	83 85       	ldd	r24, Z+11	; 0x0b
   12f58:	8b 87       	std	Y+11, r24	; 0x0b
   12f5a:	84 85       	ldd	r24, Z+12	; 0x0c
   12f5c:	95 85       	ldd	r25, Z+13	; 0x0d
   12f5e:	a6 85       	ldd	r26, Z+14	; 0x0e
   12f60:	b7 85       	ldd	r27, Z+15	; 0x0f
   12f62:	8c 87       	std	Y+12, r24	; 0x0c
   12f64:	9d 87       	std	Y+13, r25	; 0x0d
   12f66:	ae 87       	std	Y+14, r26	; 0x0e
   12f68:	bf 87       	std	Y+15, r27	; 0x0f
   12f6a:	80 89       	ldd	r24, Z+16	; 0x10
   12f6c:	91 89       	ldd	r25, Z+17	; 0x11
   12f6e:	99 8b       	std	Y+17, r25	; 0x11
   12f70:	88 8b       	std	Y+16, r24	; 0x10
   12f72:	82 89       	ldd	r24, Z+18	; 0x12
   12f74:	8a 8b       	std	Y+18, r24	; 0x12
   12f76:	83 89       	ldd	r24, Z+19	; 0x13
   12f78:	8b 8b       	std	Y+19, r24	; 0x13
   12f7a:	84 89       	ldd	r24, Z+20	; 0x14
   12f7c:	95 89       	ldd	r25, Z+21	; 0x15
   12f7e:	9d 8b       	std	Y+21, r25	; 0x15
   12f80:	8c 8b       	std	Y+20, r24	; 0x14
   12f82:	86 89       	ldd	r24, Z+22	; 0x16
   12f84:	97 89       	ldd	r25, Z+23	; 0x17
   12f86:	9f 8b       	std	Y+23, r25	; 0x17
   12f88:	8e 8b       	std	Y+22, r24	; 0x16
   12f8a:	80 8d       	ldd	r24, Z+24	; 0x18
   12f8c:	91 8d       	ldd	r25, Z+25	; 0x19
   12f8e:	99 8f       	std	Y+25, r25	; 0x19
   12f90:	88 8f       	std	Y+24, r24	; 0x18
   12f92:	82 8d       	ldd	r24, Z+26	; 0x1a
   12f94:	93 8d       	ldd	r25, Z+27	; 0x1b
   12f96:	9b 8f       	std	Y+27, r25	; 0x1b
   12f98:	8a 8f       	std	Y+26, r24	; 0x1a
   12f9a:	84 8d       	ldd	r24, Z+28	; 0x1c
   12f9c:	8c 8f       	std	Y+28, r24	; 0x1c
   12f9e:	85 8d       	ldd	r24, Z+29	; 0x1d
   12fa0:	8d 8f       	std	Y+29, r24	; 0x1d
   12fa2:	87 8d       	ldd	r24, Z+31	; 0x1f
   12fa4:	90 a1       	ldd	r25, Z+32	; 0x20
   12fa6:	a1 a1       	ldd	r26, Z+33	; 0x21
   12fa8:	b2 a1       	ldd	r27, Z+34	; 0x22
   12faa:	8f 8f       	std	Y+31, r24	; 0x1f
   12fac:	98 a3       	std	Y+32, r25	; 0x20
   12fae:	a9 a3       	std	Y+33, r26	; 0x21
   12fb0:	ba a3       	std	Y+34, r27	; 0x22
   12fb2:	83 a1       	ldd	r24, Z+35	; 0x23
   12fb4:	8b a3       	std	Y+35, r24	; 0x23
   12fb6:	84 a1       	ldd	r24, Z+36	; 0x24
   12fb8:	95 a1       	ldd	r25, Z+37	; 0x25
   12fba:	9d a3       	std	Y+37, r25	; 0x25
   12fbc:	8c a3       	std	Y+36, r24	; 0x24
   12fbe:	86 a1       	ldd	r24, Z+38	; 0x26
   12fc0:	97 a1       	ldd	r25, Z+39	; 0x27
   12fc2:	a0 a5       	ldd	r26, Z+40	; 0x28
   12fc4:	b1 a5       	ldd	r27, Z+41	; 0x29
   12fc6:	8e a3       	std	Y+38, r24	; 0x26
   12fc8:	9f a3       	std	Y+39, r25	; 0x27
   12fca:	a8 a7       	std	Y+40, r26	; 0x28
   12fcc:	b9 a7       	std	Y+41, r27	; 0x29
   12fce:	82 a5       	ldd	r24, Z+42	; 0x2a
   12fd0:	8a a7       	std	Y+42, r24	; 0x2a
   12fd2:	df 91       	pop	r29
   12fd4:	cf 91       	pop	r28
   12fd6:	1f 91       	pop	r17
   12fd8:	0f 91       	pop	r16
   12fda:	08 95       	ret

00012fdc <alloc_device>:
   12fdc:	0f 93       	push	r16
   12fde:	1f 93       	push	r17
   12fe0:	cf 93       	push	r28
   12fe2:	df 93       	push	r29
   12fe4:	ad b7       	in	r26, 0x3d	; 61
   12fe6:	be b7       	in	r27, 0x3e	; 62
   12fe8:	17 97       	sbiw	r26, 0x07	; 7
   12fea:	0f b6       	in	r0, 0x3f	; 63
   12fec:	f8 94       	cli
   12fee:	be bf       	out	0x3e, r27	; 62
   12ff0:	0f be       	out	0x3f, r0	; 63
   12ff2:	ad bf       	out	0x3d, r26	; 61
   12ff4:	8c 01       	movw	r16, r24
   12ff6:	67 de       	rcall	.-818    	; 0x12cc6 <find_free>
   12ff8:	ec 01       	movw	r28, r24
   12ffa:	cf 3f       	cpi	r28, 0xFF	; 255
   12ffc:	8f ef       	ldi	r24, 0xFF	; 255
   12ffe:	d8 07       	cpc	r29, r24
   13000:	89 f4       	brne	.+34     	; 0x13024 <alloc_device+0x48>
   13002:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13006:	80 ff       	sbrs	r24, 0
   13008:	a1 c0       	rjmp	.+322    	; 0x1314c <alloc_device+0x170>
   1300a:	ed b7       	in	r30, 0x3d	; 61
   1300c:	fe b7       	in	r31, 0x3e	; 62
   1300e:	15 83       	std	Z+5, r17	; 0x05
   13010:	04 83       	std	Z+4, r16	; 0x04
   13012:	8c e4       	ldi	r24, 0x4C	; 76
   13014:	98 e1       	ldi	r25, 0x18	; 24
   13016:	a0 e0       	ldi	r26, 0x00	; 0
   13018:	81 83       	std	Z+1, r24	; 0x01
   1301a:	92 83       	std	Z+2, r25	; 0x02
   1301c:	a3 83       	std	Z+3, r26	; 0x03
   1301e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   13022:	94 c0       	rjmp	.+296    	; 0x1314c <alloc_device+0x170>
   13024:	02 30       	cpi	r16, 0x02	; 2
   13026:	11 05       	cpc	r17, r1
   13028:	e1 f1       	breq	.+120    	; 0x130a2 <alloc_device+0xc6>
   1302a:	ec f4       	brge	.+58     	; 0x13066 <alloc_device+0x8a>
   1302c:	01 30       	cpi	r16, 0x01	; 1
   1302e:	11 05       	cpc	r17, r1
   13030:	09 f0       	breq	.+2      	; 0x13034 <alloc_device+0x58>
   13032:	76 c0       	rjmp	.+236    	; 0x13120 <alloc_device+0x144>
   13034:	8b e2       	ldi	r24, 0x2B	; 43
   13036:	8c 9f       	mul	r24, r28
   13038:	80 01       	movw	r16, r0
   1303a:	8d 9f       	mul	r24, r29
   1303c:	10 0d       	add	r17, r0
   1303e:	11 24       	eor	r1, r1
   13040:	09 50       	subi	r16, 0x09	; 9
   13042:	11 4e       	sbci	r17, 0xE1	; 225
   13044:	81 e0       	ldi	r24, 0x01	; 1
   13046:	f8 01       	movw	r30, r16
   13048:	80 83       	st	Z, r24
   1304a:	61 e0       	ldi	r22, 0x01	; 1
   1304c:	70 e0       	ldi	r23, 0x00	; 0
   1304e:	85 e1       	ldi	r24, 0x15	; 21
   13050:	90 e0       	ldi	r25, 0x00	; 0
   13052:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <safecalloc>
   13056:	f8 01       	movw	r30, r16
   13058:	90 a7       	std	Z+40, r25	; 0x28
   1305a:	87 a3       	std	Z+39, r24	; 0x27
   1305c:	61 e0       	ldi	r22, 0x01	; 1
   1305e:	70 e0       	ldi	r23, 0x00	; 0
   13060:	88 e1       	ldi	r24, 0x18	; 24
   13062:	90 e0       	ldi	r25, 0x00	; 0
   13064:	57 c0       	rjmp	.+174    	; 0x13114 <alloc_device+0x138>
   13066:	03 30       	cpi	r16, 0x03	; 3
   13068:	11 05       	cpc	r17, r1
   1306a:	a1 f1       	breq	.+104    	; 0x130d4 <alloc_device+0xf8>
   1306c:	04 30       	cpi	r16, 0x04	; 4
   1306e:	11 05       	cpc	r17, r1
   13070:	09 f0       	breq	.+2      	; 0x13074 <alloc_device+0x98>
   13072:	56 c0       	rjmp	.+172    	; 0x13120 <alloc_device+0x144>
   13074:	8b e2       	ldi	r24, 0x2B	; 43
   13076:	8c 9f       	mul	r24, r28
   13078:	80 01       	movw	r16, r0
   1307a:	8d 9f       	mul	r24, r29
   1307c:	10 0d       	add	r17, r0
   1307e:	11 24       	eor	r1, r1
   13080:	09 50       	subi	r16, 0x09	; 9
   13082:	11 4e       	sbci	r17, 0xE1	; 225
   13084:	84 e0       	ldi	r24, 0x04	; 4
   13086:	f8 01       	movw	r30, r16
   13088:	80 83       	st	Z, r24
   1308a:	61 e0       	ldi	r22, 0x01	; 1
   1308c:	70 e0       	ldi	r23, 0x00	; 0
   1308e:	8b e0       	ldi	r24, 0x0B	; 11
   13090:	90 e0       	ldi	r25, 0x00	; 0
   13092:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <safecalloc>
   13096:	f8 01       	movw	r30, r16
   13098:	90 a7       	std	Z+40, r25	; 0x28
   1309a:	87 a3       	std	Z+39, r24	; 0x27
   1309c:	12 a6       	std	Z+42, r1	; 0x2a
   1309e:	11 a6       	std	Z+41, r1	; 0x29
   130a0:	55 c0       	rjmp	.+170    	; 0x1314c <alloc_device+0x170>
   130a2:	8b e2       	ldi	r24, 0x2B	; 43
   130a4:	8c 9f       	mul	r24, r28
   130a6:	80 01       	movw	r16, r0
   130a8:	8d 9f       	mul	r24, r29
   130aa:	10 0d       	add	r17, r0
   130ac:	11 24       	eor	r1, r1
   130ae:	09 50       	subi	r16, 0x09	; 9
   130b0:	11 4e       	sbci	r17, 0xE1	; 225
   130b2:	82 e0       	ldi	r24, 0x02	; 2
   130b4:	f8 01       	movw	r30, r16
   130b6:	80 83       	st	Z, r24
   130b8:	61 e0       	ldi	r22, 0x01	; 1
   130ba:	70 e0       	ldi	r23, 0x00	; 0
   130bc:	82 e3       	ldi	r24, 0x32	; 50
   130be:	90 e0       	ldi	r25, 0x00	; 0
   130c0:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <safecalloc>
   130c4:	f8 01       	movw	r30, r16
   130c6:	90 a7       	std	Z+40, r25	; 0x28
   130c8:	87 a3       	std	Z+39, r24	; 0x27
   130ca:	61 e0       	ldi	r22, 0x01	; 1
   130cc:	70 e0       	ldi	r23, 0x00	; 0
   130ce:	86 e1       	ldi	r24, 0x16	; 22
   130d0:	90 e0       	ldi	r25, 0x00	; 0
   130d2:	20 c0       	rjmp	.+64     	; 0x13114 <alloc_device+0x138>
   130d4:	8b e2       	ldi	r24, 0x2B	; 43
   130d6:	8c 9f       	mul	r24, r28
   130d8:	80 01       	movw	r16, r0
   130da:	8d 9f       	mul	r24, r29
   130dc:	10 0d       	add	r17, r0
   130de:	11 24       	eor	r1, r1
   130e0:	09 50       	subi	r16, 0x09	; 9
   130e2:	11 4e       	sbci	r17, 0xE1	; 225
   130e4:	83 e0       	ldi	r24, 0x03	; 3
   130e6:	f8 01       	movw	r30, r16
   130e8:	80 83       	st	Z, r24
   130ea:	61 e0       	ldi	r22, 0x01	; 1
   130ec:	70 e0       	ldi	r23, 0x00	; 0
   130ee:	82 e3       	ldi	r24, 0x32	; 50
   130f0:	90 e0       	ldi	r25, 0x00	; 0
   130f2:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <safecalloc>
   130f6:	f8 01       	movw	r30, r16
   130f8:	90 a7       	std	Z+40, r25	; 0x28
   130fa:	87 a3       	std	Z+39, r24	; 0x27
   130fc:	61 e0       	ldi	r22, 0x01	; 1
   130fe:	70 e0       	ldi	r23, 0x00	; 0
   13100:	86 e1       	ldi	r24, 0x16	; 22
   13102:	90 e0       	ldi	r25, 0x00	; 0
   13104:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <safecalloc>
   13108:	f8 01       	movw	r30, r16
   1310a:	92 a7       	std	Z+42, r25	; 0x2a
   1310c:	81 a7       	std	Z+41, r24	; 0x29
   1310e:	ce 01       	movw	r24, r28
   13110:	eb de       	rcall	.-554    	; 0x12ee8 <SS80_Set_Defaults>
   13112:	1c c0       	rjmp	.+56     	; 0x1314c <alloc_device+0x170>
   13114:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <safecalloc>
   13118:	f8 01       	movw	r30, r16
   1311a:	92 a7       	std	Z+42, r25	; 0x2a
   1311c:	81 a7       	std	Z+41, r24	; 0x29
   1311e:	16 c0       	rjmp	.+44     	; 0x1314c <alloc_device+0x170>
   13120:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13124:	80 ff       	sbrs	r24, 0
   13126:	10 c0       	rjmp	.+32     	; 0x13148 <alloc_device+0x16c>
   13128:	c8 01       	movw	r24, r16
   1312a:	b4 dd       	rcall	.-1176   	; 0x12c94 <type_to_str>
   1312c:	ed b7       	in	r30, 0x3d	; 61
   1312e:	fe b7       	in	r31, 0x3e	; 62
   13130:	97 83       	std	Z+7, r25	; 0x07
   13132:	86 83       	std	Z+6, r24	; 0x06
   13134:	15 83       	std	Z+5, r17	; 0x05
   13136:	04 83       	std	Z+4, r16	; 0x04
   13138:	8a e2       	ldi	r24, 0x2A	; 42
   1313a:	98 e1       	ldi	r25, 0x18	; 24
   1313c:	a0 e0       	ldi	r26, 0x00	; 0
   1313e:	81 83       	std	Z+1, r24	; 0x01
   13140:	92 83       	std	Z+2, r25	; 0x02
   13142:	a3 83       	std	Z+3, r26	; 0x03
   13144:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   13148:	cf ef       	ldi	r28, 0xFF	; 255
   1314a:	df ef       	ldi	r29, 0xFF	; 255
   1314c:	ce 01       	movw	r24, r28
   1314e:	cd b7       	in	r28, 0x3d	; 61
   13150:	de b7       	in	r29, 0x3e	; 62
   13152:	27 96       	adiw	r28, 0x07	; 7
   13154:	e4 e0       	ldi	r30, 0x04	; 4
   13156:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

0001315a <init_Devices>:
   1315a:	cf 93       	push	r28
   1315c:	df 93       	push	r29
   1315e:	10 92 7a 19 	sts	0x197A, r1	; 0x80197a <stack_ind+0x1>
   13162:	10 92 79 19 	sts	0x1979, r1	; 0x801979 <stack_ind>
   13166:	e7 ef       	ldi	r30, 0xF7	; 247
   13168:	fe e1       	ldi	r31, 0x1E	; 30
   1316a:	9f ef       	ldi	r25, 0xFF	; 255
   1316c:	80 e2       	ldi	r24, 0x20	; 32
   1316e:	10 82       	st	Z, r1
   13170:	11 82       	std	Z+1, r1	; 0x01
   13172:	92 83       	std	Z+2, r25	; 0x02
   13174:	13 82       	std	Z+3, r1	; 0x03
   13176:	14 82       	std	Z+4, r1	; 0x04
   13178:	15 82       	std	Z+5, r1	; 0x05
   1317a:	16 82       	std	Z+6, r1	; 0x06
   1317c:	df 01       	movw	r26, r30
   1317e:	17 96       	adiw	r26, 0x07	; 7
   13180:	ed 01       	movw	r28, r26
   13182:	28 2f       	mov	r18, r24
   13184:	19 92       	st	Y+, r1
   13186:	2a 95       	dec	r18
   13188:	e9 f7       	brne	.-6      	; 0x13184 <init_Devices+0x2a>
   1318a:	10 a6       	std	Z+40, r1	; 0x28
   1318c:	17 a2       	std	Z+39, r1	; 0x27
   1318e:	12 a6       	std	Z+42, r1	; 0x2a
   13190:	11 a6       	std	Z+41, r1	; 0x29
   13192:	bb 96       	adiw	r30, 0x2b	; 43
   13194:	c0 e2       	ldi	r28, 0x20	; 32
   13196:	eb 3f       	cpi	r30, 0xFB	; 251
   13198:	fc 07       	cpc	r31, r28
   1319a:	49 f7       	brne	.-46     	; 0x1316e <init_Devices+0x14>
   1319c:	df 91       	pop	r29
   1319e:	cf 91       	pop	r28
   131a0:	08 95       	ret

000131a2 <push_state>:
   131a2:	20 91 79 19 	lds	r18, 0x1979	; 0x801979 <stack_ind>
   131a6:	30 91 7a 19 	lds	r19, 0x197A	; 0x80197a <stack_ind+0x1>
   131aa:	25 30       	cpi	r18, 0x05	; 5
   131ac:	31 05       	cpc	r19, r1
   131ae:	7c f4       	brge	.+30     	; 0x131ce <push_state+0x2c>
   131b0:	a9 01       	movw	r20, r18
   131b2:	4f 5f       	subi	r20, 0xFF	; 255
   131b4:	5f 4f       	sbci	r21, 0xFF	; 255
   131b6:	50 93 7a 19 	sts	0x197A, r21	; 0x80197a <stack_ind+0x1>
   131ba:	40 93 79 19 	sts	0x1979, r20	; 0x801979 <stack_ind>
   131be:	22 0f       	add	r18, r18
   131c0:	33 1f       	adc	r19, r19
   131c2:	f9 01       	movw	r30, r18
   131c4:	e1 59       	subi	r30, 0x91	; 145
   131c6:	f6 4e       	sbci	r31, 0xE6	; 230
   131c8:	80 83       	st	Z, r24
   131ca:	91 83       	std	Z+1, r25	; 0x01
   131cc:	08 95       	ret
   131ce:	80 e0       	ldi	r24, 0x00	; 0
   131d0:	90 e0       	ldi	r25, 0x00	; 0
   131d2:	08 95       	ret

000131d4 <pop_state>:
   131d4:	80 91 79 19 	lds	r24, 0x1979	; 0x801979 <stack_ind>
   131d8:	90 91 7a 19 	lds	r25, 0x197A	; 0x80197a <stack_ind+0x1>
   131dc:	18 16       	cp	r1, r24
   131de:	19 06       	cpc	r1, r25
   131e0:	6c f4       	brge	.+26     	; 0x131fc <pop_state+0x28>
   131e2:	01 97       	sbiw	r24, 0x01	; 1
   131e4:	90 93 7a 19 	sts	0x197A, r25	; 0x80197a <stack_ind+0x1>
   131e8:	80 93 79 19 	sts	0x1979, r24	; 0x801979 <stack_ind>
   131ec:	88 0f       	add	r24, r24
   131ee:	99 1f       	adc	r25, r25
   131f0:	fc 01       	movw	r30, r24
   131f2:	e1 59       	subi	r30, 0x91	; 145
   131f4:	f6 4e       	sbci	r31, 0xE6	; 230
   131f6:	80 81       	ld	r24, Z
   131f8:	91 81       	ldd	r25, Z+1	; 0x01
   131fa:	08 95       	ret
   131fc:	80 e0       	ldi	r24, 0x00	; 0
   131fe:	90 e0       	ldi	r25, 0x00	; 0
   13200:	08 95       	ret

00013202 <set_Config_Defaults>:
/// ===============================================
///@brief Set Defaults for any missing disk or printer devices
/// These are only used if the Config file omits them or is empty
/// @return  void
void set_Config_Defaults()
{
   13202:	08 95       	ret

00013204 <hpdir_set_device>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
   13204:	0f 93       	push	r16
   13206:	1f 93       	push	r17
   13208:	cf 93       	push	r28
   1320a:	df 93       	push	r29
   1320c:	00 d0       	rcall	.+0      	; 0x1320e <hpdir_set_device+0xa>
   1320e:	1f 92       	push	r1
    if(Devices[index].TYPE == SS80_TYPE)
   13210:	2b e2       	ldi	r18, 0x2B	; 43
   13212:	ac 01       	movw	r20, r24
   13214:	24 9f       	mul	r18, r20
   13216:	c0 01       	movw	r24, r0
   13218:	25 9f       	mul	r18, r21
   1321a:	90 0d       	add	r25, r0
   1321c:	11 24       	eor	r1, r1
   1321e:	ec 01       	movw	r28, r24
   13220:	c9 50       	subi	r28, 0x09	; 9
   13222:	d1 4e       	sbci	r29, 0xE1	; 225
   13224:	28 81       	ld	r18, Y
   13226:	23 30       	cpi	r18, 0x03	; 3
   13228:	a1 f5       	brne	.+104    	; 0x13292 <hpdir_set_device+0x8e>
    {
        SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
   1322a:	ef a1       	ldd	r30, Y+39	; 0x27
   1322c:	f8 a5       	ldd	r31, Y+40	; 0x28
        SS80p->CONFIG.ID                = hpdir.ID;
   1322e:	20 91 7b 21 	lds	r18, 0x217B	; 0x80217b <hpdir+0x80>
   13232:	30 91 7c 21 	lds	r19, 0x217C	; 0x80217c <hpdir+0x81>
   13236:	35 83       	std	Z+5, r19	; 0x05
   13238:	24 83       	std	Z+4, r18	; 0x04
        SS80p->UNIT.DEVICE_NUMBER       = hpdir.DEVICE_NUMBER;
   1323a:	40 91 87 21 	lds	r20, 0x2187	; 0x802187 <hpdir+0x8c>
   1323e:	50 91 88 21 	lds	r21, 0x2188	; 0x802188 <hpdir+0x8d>
   13242:	60 91 89 21 	lds	r22, 0x2189	; 0x802189 <hpdir+0x8e>
   13246:	70 91 8a 21 	lds	r23, 0x218A	; 0x80218a <hpdir+0x8f>
   1324a:	44 87       	std	Z+12, r20	; 0x0c
   1324c:	55 87       	std	Z+13, r21	; 0x0d
   1324e:	66 87       	std	Z+14, r22	; 0x0e
   13250:	77 87       	std	Z+15, r23	; 0x0f
        SS80p->UNIT.BYTES_PER_BLOCK     = hpdir.BYTES_PER_SECTOR;
   13252:	20 91 9b 21 	lds	r18, 0x219B	; 0x80219b <hpdir+0xa0>
   13256:	30 91 9c 21 	lds	r19, 0x219C	; 0x80219c <hpdir+0xa1>
   1325a:	31 8b       	std	Z+17, r19	; 0x11
   1325c:	20 8b       	std	Z+16, r18	; 0x10

// CHS NOT used in this emulator!
        SS80p->VOLUME.MAX_CYLINDER      = 0;      // hpdir.CYLINDERS-1;
   1325e:	17 8e       	std	Z+31, r1	; 0x1f
   13260:	10 a2       	std	Z+32, r1	; 0x20
   13262:	11 a2       	std	Z+33, r1	; 0x21
   13264:	12 a2       	std	Z+34, r1	; 0x22
        SS80p->VOLUME.MAX_HEAD          = 0;      // hpdir.HEADS-1;
   13266:	13 a2       	std	Z+35, r1	; 0x23
        SS80p->VOLUME.MAX_SECTOR        = 0;      // hpdir.SECTORS-1;
   13268:	15 a2       	std	Z+37, r1	; 0x25
   1326a:	14 a2       	std	Z+36, r1	; 0x24

        SS80p->VOLUME.MAX_BLOCK_NUMBER  = hpdir.BLOCKS-1;
   1326c:	40 91 a7 21 	lds	r20, 0x21A7	; 0x8021a7 <hpdir+0xac>
   13270:	50 91 a8 21 	lds	r21, 0x21A8	; 0x8021a8 <hpdir+0xad>
   13274:	60 91 a9 21 	lds	r22, 0x21A9	; 0x8021a9 <hpdir+0xae>
   13278:	70 91 aa 21 	lds	r23, 0x21AA	; 0x8021aa <hpdir+0xaf>
   1327c:	8a 01       	movw	r16, r20
   1327e:	9b 01       	movw	r18, r22
   13280:	01 50       	subi	r16, 0x01	; 1
   13282:	11 09       	sbc	r17, r1
   13284:	21 09       	sbc	r18, r1
   13286:	31 09       	sbc	r19, r1
   13288:	06 a3       	std	Z+38, r16	; 0x26
   1328a:	17 a3       	std	Z+39, r17	; 0x27
   1328c:	20 a7       	std	Z+40, r18	; 0x28
   1328e:	31 a7       	std	Z+41, r19	; 0x29
   13290:	2a c0       	rjmp	.+84     	; 0x132e6 <hpdir_set_device+0xe2>
        Devices[index].BLOCKS = hpdir.BLOCKS;
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
    }

#ifdef AMIGO
    else if(Devices[index].TYPE == AMIGO_TYPE)
   13292:	21 30       	cpi	r18, 0x01	; 1
   13294:	a9 f5       	brne	.+106    	; 0x13300 <hpdir_set_device+0xfc>
    {
        AMIGODiskType *AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13296:	ef a1       	ldd	r30, Y+39	; 0x27
   13298:	f8 a5       	ldd	r31, Y+40	; 0x28
        AMIGOp->CONFIG.ID = hpdir.ID;
   1329a:	20 91 7b 21 	lds	r18, 0x217B	; 0x80217b <hpdir+0x80>
   1329e:	30 91 7c 21 	lds	r19, 0x217C	; 0x80217c <hpdir+0x81>
   132a2:	35 83       	std	Z+5, r19	; 0x05
   132a4:	24 83       	std	Z+4, r18	; 0x04
        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   132a6:	20 91 9b 21 	lds	r18, 0x219B	; 0x80219b <hpdir+0xa0>
   132aa:	30 91 9c 21 	lds	r19, 0x219C	; 0x80219c <hpdir+0xa1>
   132ae:	37 83       	std	Z+7, r19	; 0x07
   132b0:	26 83       	std	Z+6, r18	; 0x06
        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   132b2:	20 91 97 21 	lds	r18, 0x2197	; 0x802197 <hpdir+0x9c>
   132b6:	30 91 98 21 	lds	r19, 0x2198	; 0x802198 <hpdir+0x9d>
   132ba:	31 87       	std	Z+9, r19	; 0x09
   132bc:	20 87       	std	Z+8, r18	; 0x08
        AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   132be:	20 91 93 21 	lds	r18, 0x2193	; 0x802193 <hpdir+0x98>
   132c2:	30 91 94 21 	lds	r19, 0x2194	; 0x802194 <hpdir+0x99>
   132c6:	33 87       	std	Z+11, r19	; 0x0b
   132c8:	22 87       	std	Z+10, r18	; 0x0a
        AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   132ca:	20 91 8f 21 	lds	r18, 0x218F	; 0x80218f <hpdir+0x94>
   132ce:	30 91 90 21 	lds	r19, 0x2190	; 0x802190 <hpdir+0x95>
   132d2:	35 87       	std	Z+13, r19	; 0x0d
   132d4:	24 87       	std	Z+12, r18	; 0x0c
        Devices[index].BLOCKS = hpdir.BLOCKS;
   132d6:	40 91 a7 21 	lds	r20, 0x21A7	; 0x8021a7 <hpdir+0xac>
   132da:	50 91 a8 21 	lds	r21, 0x21A8	; 0x8021a8 <hpdir+0xad>
   132de:	60 91 a9 21 	lds	r22, 0x21A9	; 0x8021a9 <hpdir+0xae>
   132e2:	70 91 aa 21 	lds	r23, 0x21AA	; 0x8021aa <hpdir+0xaf>
   132e6:	4b 83       	std	Y+3, r20	; 0x03
   132e8:	5c 83       	std	Y+4, r21	; 0x04
   132ea:	6d 83       	std	Y+5, r22	; 0x05
   132ec:	7e 83       	std	Y+6, r23	; 0x06
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   132ee:	4e e1       	ldi	r20, 0x1E	; 30
   132f0:	50 e0       	ldi	r21, 0x00	; 0
   132f2:	6b ef       	ldi	r22, 0xFB	; 251
   132f4:	70 e2       	ldi	r23, 0x20	; 32
   132f6:	82 50       	subi	r24, 0x02	; 2
   132f8:	91 4e       	sbci	r25, 0xE1	; 225
   132fa:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <strncpy>
   132fe:	0a c0       	rjmp	.+20     	; 0x13314 <hpdir_set_device+0x110>
    }
#endif
    else
    {
        printf("hpdir_parameters invalid TYPE\n");
   13300:	8b e0       	ldi	r24, 0x0B	; 11
   13302:	98 e1       	ldi	r25, 0x18	; 24
   13304:	a0 e0       	ldi	r26, 0x00	; 0
   13306:	ed b7       	in	r30, 0x3d	; 61
   13308:	fe b7       	in	r31, 0x3e	; 62
   1330a:	81 83       	std	Z+1, r24	; 0x01
   1330c:	92 83       	std	Z+2, r25	; 0x02
   1330e:	a3 83       	std	Z+3, r26	; 0x03
   13310:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    }

}
   13314:	cd b7       	in	r28, 0x3d	; 61
   13316:	de b7       	in	r29, 0x3e	; 62
   13318:	23 96       	adiw	r28, 0x03	; 3
   1331a:	e4 e0       	ldi	r30, 0x04	; 4
   1331c:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

00013320 <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   13320:	cf 93       	push	r28
   13322:	df 93       	push	r29
   13324:	ec 01       	movw	r28, r24
   13326:	cb 01       	movw	r24, r22
    if ( hpdir_find_drive( model, 0 ,1) )
   13328:	41 e0       	ldi	r20, 0x01	; 1
   1332a:	50 e0       	ldi	r21, 0x00	; 0
   1332c:	60 e0       	ldi	r22, 0x00	; 0
   1332e:	70 e0       	ldi	r23, 0x00	; 0
   13330:	ad d7       	rcall	.+3930   	; 0x1428c <hpdir_find_drive>
   13332:	89 2b       	or	r24, r25
   13334:	11 f0       	breq	.+4      	; 0x1333a <hpdir_set_parameters+0x1a>
        hpdir_set_device(index);
   13336:	ce 01       	movw	r24, r28
   13338:	65 df       	rcall	.-310    	; 0x13204 <hpdir_set_device>
}
   1333a:	df 91       	pop	r29
   1333c:	cf 91       	pop	r28
   1333e:	08 95       	ret

00013340 <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   13340:	4f 92       	push	r4
   13342:	5f 92       	push	r5
   13344:	6f 92       	push	r6
   13346:	7f 92       	push	r7
   13348:	8f 92       	push	r8
   1334a:	af 92       	push	r10
   1334c:	bf 92       	push	r11
   1334e:	cf 92       	push	r12
   13350:	df 92       	push	r13
   13352:	ef 92       	push	r14
   13354:	0f 93       	push	r16
   13356:	1f 93       	push	r17
   13358:	cf 93       	push	r28
   1335a:	df 93       	push	r29
   1335c:	00 d0       	rcall	.+0      	; 0x1335e <Post_Config+0x1e>
   1335e:	00 d0       	rcall	.+0      	; 0x13360 <Post_Config+0x20>
   13360:	1f 92       	push	r1
   13362:	c7 ef       	ldi	r28, 0xF7	; 247
   13364:	de e1       	ldi	r29, 0x1E	; 30
   13366:	8b ef       	ldi	r24, 0xFB	; 251
   13368:	48 2e       	mov	r4, r24
   1336a:	80 e2       	ldi	r24, 0x20	; 32
   1336c:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   1336e:	a1 2c       	mov	r10, r1
   13370:	bb 24       	eor	r11, r11
   13372:	b3 94       	inc	r11
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   13374:	8e e9       	ldi	r24, 0x9E	; 158
   13376:	97 e1       	ldi	r25, 0x17	; 23
   13378:	6c 01       	movw	r12, r24
   1337a:	e1 2c       	mov	r14, r1
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   1337c:	85 ed       	ldi	r24, 0xD5	; 213
   1337e:	97 e1       	ldi	r25, 0x17	; 23
   13380:	3c 01       	movw	r6, r24
   13382:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13384:	88 81       	ld	r24, Y
   13386:	88 23       	and	r24, r24
   13388:	09 f4       	brne	.+2      	; 0x1338c <Post_Config+0x4c>
   1338a:	57 c0       	rjmp	.+174    	; 0x1343a <Post_Config+0xfa>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   1338c:	83 30       	cpi	r24, 0x03	; 3
   1338e:	f9 f4       	brne	.+62     	; 0x133ce <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13390:	0f a1       	ldd	r16, Y+39	; 0x27
   13392:	18 a5       	ldd	r17, Y+40	; 0x28
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13394:	f8 01       	movw	r30, r16
   13396:	80 89       	ldd	r24, Z+16	; 0x10
   13398:	91 89       	ldd	r25, Z+17	; 0x11
   1339a:	81 15       	cp	r24, r1
   1339c:	91 40       	sbci	r25, 0x01	; 1
   1339e:	59 f0       	breq	.+22     	; 0x133b6 <Post_Config+0x76>
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   133a0:	ce 01       	movw	r24, r28
   133a2:	07 96       	adiw	r24, 0x07	; 7
   133a4:	ed b7       	in	r30, 0x3d	; 61
   133a6:	fe b7       	in	r31, 0x3e	; 62
   133a8:	95 83       	std	Z+5, r25	; 0x05
   133aa:	84 83       	std	Z+4, r24	; 0x04
   133ac:	61 82       	std	Z+1, r6	; 0x01
   133ae:	72 82       	std	Z+2, r7	; 0x02
   133b0:	83 82       	std	Z+3, r8	; 0x03
   133b2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            }
            sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
            Devices[i].BLOCKS = sectors;
   133b6:	f8 01       	movw	r30, r16
   133b8:	86 a1       	ldd	r24, Z+38	; 0x26
   133ba:	97 a1       	ldd	r25, Z+39	; 0x27
   133bc:	a0 a5       	ldd	r26, Z+40	; 0x28
   133be:	b1 a5       	ldd	r27, Z+41	; 0x29
   133c0:	01 96       	adiw	r24, 0x01	; 1
   133c2:	a1 1d       	adc	r26, r1
   133c4:	b1 1d       	adc	r27, r1
   133c6:	8b 83       	std	Y+3, r24	; 0x03
   133c8:	9c 83       	std	Y+4, r25	; 0x04
   133ca:	ad 83       	std	Y+5, r26	; 0x05
   133cc:	be 83       	std	Y+6, r27	; 0x06
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   133ce:	88 81       	ld	r24, Y
   133d0:	81 30       	cpi	r24, 0x01	; 1
   133d2:	99 f5       	brne	.+102    	; 0x1343a <Post_Config+0xfa>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   133d4:	0f a1       	ldd	r16, Y+39	; 0x27
   133d6:	18 a5       	ldd	r17, Y+40	; 0x28
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   133d8:	f8 01       	movw	r30, r16
   133da:	86 81       	ldd	r24, Z+6	; 0x06
   133dc:	97 81       	ldd	r25, Z+7	; 0x07
   133de:	81 15       	cp	r24, r1
   133e0:	91 40       	sbci	r25, 0x01	; 1
   133e2:	71 f0       	breq	.+28     	; 0x13400 <Post_Config+0xc0>
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   133e4:	f8 01       	movw	r30, r16
   133e6:	b7 82       	std	Z+7, r11	; 0x07
   133e8:	a6 82       	std	Z+6, r10	; 0x06
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   133ea:	ce 01       	movw	r24, r28
   133ec:	07 96       	adiw	r24, 0x07	; 7
   133ee:	ed b7       	in	r30, 0x3d	; 61
   133f0:	fe b7       	in	r31, 0x3e	; 62
   133f2:	95 83       	std	Z+5, r25	; 0x05
   133f4:	84 83       	std	Z+4, r24	; 0x04
   133f6:	c1 82       	std	Z+1, r12	; 0x01
   133f8:	d2 82       	std	Z+2, r13	; 0x02
   133fa:	e3 82       	std	Z+3, r14	; 0x03
   133fc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            }
            sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                * AMIGOp->GEOMETRY.HEADS
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
   13400:	f8 01       	movw	r30, r16
   13402:	20 85       	ldd	r18, Z+8	; 0x08
   13404:	31 85       	ldd	r19, Z+9	; 0x09
   13406:	82 85       	ldd	r24, Z+10	; 0x0a
   13408:	93 85       	ldd	r25, Z+11	; 0x0b
   1340a:	28 9f       	mul	r18, r24
   1340c:	a0 01       	movw	r20, r0
   1340e:	29 9f       	mul	r18, r25
   13410:	50 0d       	add	r21, r0
   13412:	38 9f       	mul	r19, r24
   13414:	50 0d       	add	r21, r0
   13416:	11 24       	eor	r1, r1
   13418:	24 85       	ldd	r18, Z+12	; 0x0c
   1341a:	35 85       	ldd	r19, Z+13	; 0x0d
   1341c:	42 9f       	mul	r20, r18
   1341e:	c0 01       	movw	r24, r0
   13420:	43 9f       	mul	r20, r19
   13422:	90 0d       	add	r25, r0
   13424:	52 9f       	mul	r21, r18
   13426:	90 0d       	add	r25, r0
   13428:	11 24       	eor	r1, r1
   1342a:	09 2e       	mov	r0, r25
   1342c:	00 0c       	add	r0, r0
   1342e:	aa 0b       	sbc	r26, r26
   13430:	bb 0b       	sbc	r27, r27
   13432:	8b 83       	std	Y+3, r24	; 0x03
   13434:	9c 83       	std	Y+4, r25	; 0x04
   13436:	ad 83       	std	Y+5, r26	; 0x05
   13438:	be 83       	std	Y+6, r27	; 0x06
   1343a:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   1343c:	4c 16       	cp	r4, r28
   1343e:	5d 06       	cpc	r5, r29
   13440:	09 f0       	breq	.+2      	; 0x13444 <Post_Config+0x104>
   13442:	a0 cf       	rjmp	.-192    	; 0x13384 <Post_Config+0x44>
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
        }
#endif                                    // #ifdef AMIGO
    }
}
   13444:	0f 90       	pop	r0
   13446:	0f 90       	pop	r0
   13448:	0f 90       	pop	r0
   1344a:	0f 90       	pop	r0
   1344c:	0f 90       	pop	r0
   1344e:	df 91       	pop	r29
   13450:	cf 91       	pop	r28
   13452:	1f 91       	pop	r17
   13454:	0f 91       	pop	r16
   13456:	ef 90       	pop	r14
   13458:	df 90       	pop	r13
   1345a:	cf 90       	pop	r12
   1345c:	bf 90       	pop	r11
   1345e:	af 90       	pop	r10
   13460:	8f 90       	pop	r8
   13462:	7f 90       	pop	r7
   13464:	6f 90       	pop	r6
   13466:	5f 90       	pop	r5
   13468:	4f 90       	pop	r4
   1346a:	08 95       	ret

0001346c <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   1346c:	af e1       	ldi	r26, 0x1F	; 31
   1346e:	b1 e0       	ldi	r27, 0x01	; 1
   13470:	ec e3       	ldi	r30, 0x3C	; 60
   13472:	fa e9       	ldi	r31, 0x9A	; 154
   13474:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
   13478:	8c 01       	movw	r16, r24
    int lines = 0;

    char str[128];
    char token[128];

    init_Devices();
   1347a:	6f de       	rcall	.-802    	; 0x1315a <init_Devices>

    printf("Reading: %s\n", name);
   1347c:	ed b7       	in	r30, 0x3d	; 61
   1347e:	fe b7       	in	r31, 0x3e	; 62
   13480:	15 83       	std	Z+5, r17	; 0x05
   13482:	04 83       	std	Z+4, r16	; 0x04
   13484:	81 e8       	ldi	r24, 0x81	; 129
   13486:	9d e1       	ldi	r25, 0x1D	; 29
   13488:	a0 e0       	ldi	r26, 0x00	; 0
   1348a:	81 83       	std	Z+1, r24	; 0x01
   1348c:	92 83       	std	Z+2, r25	; 0x02
   1348e:	a3 83       	std	Z+3, r26	; 0x03
   13490:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    cfg = fopen(name, "rb");
   13494:	6e ef       	ldi	r22, 0xFE	; 254
   13496:	78 e0       	ldi	r23, 0x08	; 8
   13498:	c8 01       	movw	r24, r16
   1349a:	0e 94 36 7d 	call	0xfa6c	; 0xfa6c <fopen>
   1349e:	c4 5f       	subi	r28, 0xF4	; 244
   134a0:	de 4f       	sbci	r29, 0xFE	; 254
   134a2:	99 83       	std	Y+1, r25	; 0x01
   134a4:	88 83       	st	Y, r24
   134a6:	cc 50       	subi	r28, 0x0C	; 12
   134a8:	d1 40       	sbci	r29, 0x01	; 1
    if(cfg == NULL)
   134aa:	89 2b       	or	r24, r25
   134ac:	09 f4       	brne	.+2      	; 0x134b0 <Read_Config+0x44>
   134ae:	59 c0       	rjmp	.+178    	; 0x13562 <Read_Config+0xf6>
   134b0:	41 2c       	mov	r4, r1
   134b2:	51 2c       	mov	r5, r1
   134b4:	c1 2c       	mov	r12, r1
   134b6:	d1 2c       	mov	r13, r1
   134b8:	c8 5f       	subi	r28, 0xF8	; 248
   134ba:	de 4f       	sbci	r29, 0xFE	; 254
   134bc:	19 82       	std	Y+1, r1	; 0x01
   134be:	18 82       	st	Y, r1
   134c0:	c8 50       	subi	r28, 0x08	; 8
   134c2:	d1 40       	sbci	r29, 0x01	; 1
   134c4:	61 2c       	mov	r6, r1
   134c6:	71 2c       	mov	r7, r1
   134c8:	c6 5f       	subi	r28, 0xF6	; 246
   134ca:	de 4f       	sbci	r29, 0xFE	; 254
   134cc:	19 82       	std	Y+1, r1	; 0x01
   134ce:	18 82       	st	Y, r1
   134d0:	ca 50       	subi	r28, 0x0A	; 10
   134d2:	d1 40       	sbci	r29, 0x01	; 1
   134d4:	e1 2c       	mov	r14, r1
   134d6:	f1 2c       	mov	r15, r1
   134d8:	21 2c       	mov	r2, r1
   134da:	31 2c       	mov	r3, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   134dc:	80 ed       	ldi	r24, 0xD0	; 208
   134de:	9a e1       	ldi	r25, 0x1A	; 26
   134e0:	9c 01       	movw	r18, r24
   134e2:	40 e0       	ldi	r20, 0x00	; 0
   134e4:	c2 5f       	subi	r28, 0xF2	; 242
   134e6:	de 4f       	sbci	r29, 0xFE	; 254
   134e8:	28 83       	st	Y, r18
   134ea:	39 83       	std	Y+1, r19	; 0x01
   134ec:	4a 83       	std	Y+2, r20	; 0x02
   134ee:	ce 50       	subi	r28, 0x0E	; 14
   134f0:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   134f2:	82 ef       	ldi	r24, 0xF2	; 242
   134f4:	9a e1       	ldi	r25, 0x1A	; 26
   134f6:	9c 01       	movw	r18, r24
   134f8:	40 e0       	ldi	r20, 0x00	; 0
   134fa:	cf 5e       	subi	r28, 0xEF	; 239
   134fc:	de 4f       	sbci	r29, 0xFE	; 254
   134fe:	28 83       	st	Y, r18
   13500:	39 83       	std	Y+1, r19	; 0x01
   13502:	4a 83       	std	Y+2, r20	; 0x02
   13504:	c1 51       	subi	r28, 0x11	; 17
   13506:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13508:	82 e2       	ldi	r24, 0x22	; 34
   1350a:	9b e1       	ldi	r25, 0x1B	; 27
   1350c:	9c 01       	movw	r18, r24
   1350e:	40 e0       	ldi	r20, 0x00	; 0
   13510:	cc 5e       	subi	r28, 0xEC	; 236
   13512:	de 4f       	sbci	r29, 0xFE	; 254
   13514:	28 83       	st	Y, r18
   13516:	39 83       	std	Y+1, r19	; 0x01
   13518:	4a 83       	std	Y+2, r20	; 0x02
   1351a:	c4 51       	subi	r28, 0x14	; 20
   1351c:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   1351e:	81 e5       	ldi	r24, 0x51	; 81
   13520:	9b e1       	ldi	r25, 0x1B	; 27
   13522:	9c 01       	movw	r18, r24
   13524:	40 e0       	ldi	r20, 0x00	; 0
   13526:	c9 5e       	subi	r28, 0xE9	; 233
   13528:	de 4f       	sbci	r29, 0xFE	; 254
   1352a:	28 83       	st	Y, r18
   1352c:	39 83       	std	Y+1, r19	; 0x01
   1352e:	4a 83       	std	Y+2, r20	; 0x02
   13530:	c7 51       	subi	r28, 0x17	; 23
   13532:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13534:	81 e8       	ldi	r24, 0x81	; 129
   13536:	9b e1       	ldi	r25, 0x1B	; 27
   13538:	9c 01       	movw	r18, r24
   1353a:	40 e0       	ldi	r20, 0x00	; 0
   1353c:	c6 5e       	subi	r28, 0xE6	; 230
   1353e:	de 4f       	sbci	r29, 0xFE	; 254
   13540:	28 83       	st	Y, r18
   13542:	39 83       	std	Y+1, r19	; 0x01
   13544:	4a 83       	std	Y+2, r20	; 0x02
   13546:	ca 51       	subi	r28, 0x1A	; 26
   13548:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   1354a:	8f ea       	ldi	r24, 0xAF	; 175
   1354c:	9b e1       	ldi	r25, 0x1B	; 27
   1354e:	9c 01       	movw	r18, r24
   13550:	40 e0       	ldi	r20, 0x00	; 0
   13552:	c3 5e       	subi	r28, 0xE3	; 227
   13554:	de 4f       	sbci	r29, 0xFE	; 254
   13556:	28 83       	st	Y, r18
   13558:	39 83       	std	Y+1, r19	; 0x01
   1355a:	4a 83       	std	Y+2, r20	; 0x02
   1355c:	cd 51       	subi	r28, 0x1D	; 29
   1355e:	d1 40       	sbci	r29, 0x01	; 1
   13560:	26 c0       	rjmp	.+76     	; 0x135ae <Read_Config+0x142>
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   13562:	8d e5       	ldi	r24, 0x5D	; 93
   13564:	9e e0       	ldi	r25, 0x0E	; 14
   13566:	0e 94 67 77 	call	0xeece	; 0xeece <perror>
        printf("Read_Config: open(%s) failed\n", name);
   1356a:	ed b7       	in	r30, 0x3d	; 61
   1356c:	fe b7       	in	r31, 0x3e	; 62
   1356e:	15 83       	std	Z+5, r17	; 0x05
   13570:	04 83       	std	Z+4, r16	; 0x04
   13572:	83 e6       	ldi	r24, 0x63	; 99
   13574:	9d e1       	ldi	r25, 0x1D	; 29
   13576:	a0 e0       	ldi	r26, 0x00	; 0
   13578:	81 83       	std	Z+1, r24	; 0x01
   1357a:	92 83       	std	Z+2, r25	; 0x02
   1357c:	a3 83       	std	Z+3, r26	; 0x03
   1357e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        set_Config_Defaults();
        return(errors);
   13582:	81 e0       	ldi	r24, 0x01	; 1
   13584:	90 e0       	ldi	r25, 0x00	; 0
   13586:	95 c3       	rjmp	.+1834   	; 0x13cb2 <Read_Config+0x846>
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   13588:	ff ef       	ldi	r31, 0xFF	; 255
   1358a:	4f 1a       	sub	r4, r31
   1358c:	5f 0a       	sbc	r5, r31

        ptr = get_token(str, token, sizeof(token)-2);
   1358e:	4e e7       	ldi	r20, 0x7E	; 126
   13590:	50 e0       	ldi	r21, 0x00	; 0
   13592:	9e 01       	movw	r18, r28
   13594:	28 5f       	subi	r18, 0xF8	; 248
   13596:	3f 4f       	sbci	r19, 0xFF	; 255
   13598:	49 01       	movw	r8, r18
   1359a:	b9 01       	movw	r22, r18
   1359c:	ce 01       	movw	r24, r28
   1359e:	88 57       	subi	r24, 0x78	; 120
   135a0:	9f 4f       	sbci	r25, 0xFF	; 255
   135a2:	0e 94 0f 31 	call	0x621e	; 0x621e <get_token>
   135a6:	5c 01       	movw	r10, r24

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   135a8:	88 85       	ldd	r24, Y+8	; 0x08
   135aa:	81 11       	cpse	r24, r1
   135ac:	10 c0       	rjmp	.+32     	; 0x135ce <Read_Config+0x162>
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   135ae:	c4 5f       	subi	r28, 0xF4	; 244
   135b0:	de 4f       	sbci	r29, 0xFE	; 254
   135b2:	48 81       	ld	r20, Y
   135b4:	59 81       	ldd	r21, Y+1	; 0x01
   135b6:	cc 50       	subi	r28, 0x0C	; 12
   135b8:	d1 40       	sbci	r29, 0x01	; 1
   135ba:	6e e7       	ldi	r22, 0x7E	; 126
   135bc:	70 e0       	ldi	r23, 0x00	; 0
   135be:	ce 01       	movw	r24, r28
   135c0:	88 57       	subi	r24, 0x78	; 120
   135c2:	9f 4f       	sbci	r25, 0xFF	; 255
   135c4:	0e 94 4e 75 	call	0xea9c	; 0xea9c <fgets>
   135c8:	89 2b       	or	r24, r25
   135ca:	f1 f6       	brne	.-68     	; 0x13588 <Read_Config+0x11c>
   135cc:	32 c3       	rjmp	.+1636   	; 0x13c32 <Read_Config+0x7c6>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   135ce:	83 32       	cpi	r24, 0x23	; 35
   135d0:	71 f3       	breq	.-36     	; 0x135ae <Read_Config+0x142>
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   135d2:	c4 01       	movw	r24, r8
   135d4:	0e 94 ea 91 	call	0x123d4	; 0x123d4 <tok_index>
   135d8:	8f 3f       	cpi	r24, 0xFF	; 255
   135da:	3f ef       	ldi	r19, 0xFF	; 255
   135dc:	93 07       	cpc	r25, r19
   135de:	49 f4       	brne	.+18     	; 0x135f2 <Read_Config+0x186>
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   135e0:	ed b7       	in	r30, 0x3d	; 61
   135e2:	fe b7       	in	r31, 0x3e	; 62
   135e4:	57 82       	std	Z+7, r5	; 0x07
   135e6:	46 82       	std	Z+6, r4	; 0x06
   135e8:	95 82       	std	Z+5, r9	; 0x05
   135ea:	84 82       	std	Z+4, r8	; 0x04
   135ec:	81 e4       	ldi	r24, 0x41	; 65
   135ee:	9d e1       	ldi	r25, 0x1D	; 29
   135f0:	c9 c0       	rjmp	.+402    	; 0x13784 <Read_Config+0x318>
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   135f2:	88 0f       	add	r24, r24
   135f4:	99 1f       	adc	r25, r25
   135f6:	88 0f       	add	r24, r24
   135f8:	99 1f       	adc	r25, r25
   135fa:	fc 01       	movw	r30, r24
   135fc:	ec 53       	subi	r30, 0x3C	; 60
   135fe:	fe 4f       	sbci	r31, 0xFE	; 254
   13600:	02 81       	ldd	r16, Z+2	; 0x02
   13602:	13 81       	ldd	r17, Z+3	; 0x03

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   13604:	4e e7       	ldi	r20, 0x7E	; 126
   13606:	50 e0       	ldi	r21, 0x00	; 0
   13608:	b4 01       	movw	r22, r8
   1360a:	c5 01       	movw	r24, r10
   1360c:	0e 94 0f 31 	call	0x621e	; 0x621e <get_token>
   13610:	5c 01       	movw	r10, r24
        if(MATCH(token,"="))
   13612:	60 e7       	ldi	r22, 0x70	; 112
   13614:	7e e0       	ldi	r23, 0x0E	; 14
   13616:	c4 01       	movw	r24, r8
   13618:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
   1361c:	89 2b       	or	r24, r25
   1361e:	39 f0       	breq	.+14     	; 0x1362e <Read_Config+0x1c2>
            ptr = get_token(ptr, token, sizeof(token)-2);
   13620:	4e e7       	ldi	r20, 0x7E	; 126
   13622:	50 e0       	ldi	r21, 0x00	; 0
   13624:	b4 01       	movw	r22, r8
   13626:	c5 01       	movw	r24, r10
   13628:	0e 94 0f 31 	call	0x621e	; 0x621e <get_token>
   1362c:	5c 01       	movw	r10, r24
        val.l = get_value(token);
   1362e:	c4 01       	movw	r24, r8
   13630:	0e 94 52 31 	call	0x62a4	; 0x62a4 <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   13634:	01 31       	cpi	r16, 0x11	; 17
   13636:	11 05       	cpc	r17, r1
        {
            state = pop_state();
   13638:	19 f4       	brne	.+6      	; 0x13640 <Read_Config+0x1d4>
   1363a:	cc dd       	rcall	.-1128   	; 0x131d4 <pop_state>
   1363c:	1c 01       	movw	r2, r24
            continue;
   1363e:	b7 cf       	rjmp	.-146    	; 0x135ae <Read_Config+0x142>
        }

        switch(state)
   13640:	30 e1       	ldi	r19, 0x10	; 16
   13642:	23 16       	cp	r2, r19
   13644:	31 04       	cpc	r3, r1
   13646:	08 f0       	brcs	.+2      	; 0x1364a <Read_Config+0x1de>
   13648:	de c2       	rjmp	.+1468   	; 0x13c06 <Read_Config+0x79a>
   1364a:	f1 01       	movw	r30, r2
   1364c:	ea 53       	subi	r30, 0x3A	; 58
   1364e:	ff 4f       	sbci	r31, 0xFF	; 255
   13650:	0c 94 2d e3 	jmp	0x1c65a	; 0x1c65a <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   13654:	0e 30       	cpi	r16, 0x0E	; 14
   13656:	11 05       	cpc	r17, r1
   13658:	09 f4       	brne	.+2      	; 0x1365c <Read_Config+0x1f0>
   1365a:	87 c0       	rjmp	.+270    	; 0x1376a <Read_Config+0x2fe>
   1365c:	44 f4       	brge	.+16     	; 0x1366e <Read_Config+0x202>
   1365e:	02 30       	cpi	r16, 0x02	; 2
   13660:	11 05       	cpc	r17, r1
   13662:	09 f4       	brne	.+2      	; 0x13666 <Read_Config+0x1fa>
   13664:	41 c0       	rjmp	.+130    	; 0x136e8 <Read_Config+0x27c>
   13666:	0c 30       	cpi	r16, 0x0C	; 12
   13668:	11 05       	cpc	r17, r1
   1366a:	09 f1       	breq	.+66     	; 0x136ae <Read_Config+0x242>
   1366c:	83 c0       	rjmp	.+262    	; 0x13774 <Read_Config+0x308>
   1366e:	03 32       	cpi	r16, 0x23	; 35
   13670:	11 05       	cpc	r17, r1
   13672:	e9 f0       	breq	.+58     	; 0x136ae <Read_Config+0x242>
   13674:	04 32       	cpi	r16, 0x24	; 36
   13676:	11 05       	cpc	r17, r1
   13678:	29 f0       	breq	.+10     	; 0x13684 <Read_Config+0x218>
   1367a:	00 32       	cpi	r16, 0x20	; 32
   1367c:	11 05       	cpc	r17, r1
   1367e:	09 f0       	breq	.+2      	; 0x13682 <Read_Config+0x216>
   13680:	79 c0       	rjmp	.+242    	; 0x13774 <Read_Config+0x308>
   13682:	55 c0       	rjmp	.+170    	; 0x1372e <Read_Config+0x2c2>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   13684:	80 e0       	ldi	r24, 0x00	; 0
   13686:	90 e0       	ldi	r25, 0x00	; 0
   13688:	8c dd       	rcall	.-1256   	; 0x131a2 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   1368a:	82 e0       	ldi	r24, 0x02	; 2
   1368c:	90 e0       	ldi	r25, 0x00	; 0
   1368e:	a6 dc       	rcall	.-1716   	; 0x12fdc <alloc_device>
   13690:	6c 01       	movw	r12, r24
   13692:	01 96       	adiw	r24, 0x01	; 1
                        if(index == -1)
   13694:	09 f4       	brne	.+2      	; 0x13698 <Read_Config+0x22c>
   13696:	8b cf       	rjmp	.-234    	; 0x135ae <Read_Config+0x142>
   13698:	8b e2       	ldi	r24, 0x2B	; 43
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   1369a:	8c 9d       	mul	r24, r12
   1369c:	f0 01       	movw	r30, r0
   1369e:	8d 9d       	mul	r24, r13
   136a0:	f0 0d       	add	r31, r0
   136a2:	11 24       	eor	r1, r1
   136a4:	e9 50       	subi	r30, 0x09	; 9
   136a6:	f1 4e       	sbci	r31, 0xE1	; 225
   136a8:	67 a0       	ldd	r6, Z+39	; 0x27
   136aa:	70 a4       	ldd	r7, Z+40	; 0x28
   136ac:	19 c0       	rjmp	.+50     	; 0x136e0 <Read_Config+0x274>
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   136ae:	80 e0       	ldi	r24, 0x00	; 0
   136b0:	90 e0       	ldi	r25, 0x00	; 0
   136b2:	77 dd       	rcall	.-1298   	; 0x131a2 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   136b4:	83 e0       	ldi	r24, 0x03	; 3
   136b6:	90 e0       	ldi	r25, 0x00	; 0
   136b8:	91 dc       	rcall	.-1758   	; 0x12fdc <alloc_device>
   136ba:	6c 01       	movw	r12, r24
   136bc:	8f ef       	ldi	r24, 0xFF	; 255
                        if(index == -1)
   136be:	c8 16       	cp	r12, r24
   136c0:	d8 06       	cpc	r13, r24
   136c2:	09 f4       	brne	.+2      	; 0x136c6 <Read_Config+0x25a>
   136c4:	74 cf       	rjmp	.-280    	; 0x135ae <Read_Config+0x142>
   136c6:	8b e2       	ldi	r24, 0x2B	; 43
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   136c8:	8c 9d       	mul	r24, r12
   136ca:	f0 01       	movw	r30, r0
   136cc:	8d 9d       	mul	r24, r13
   136ce:	f0 0d       	add	r31, r0
   136d0:	11 24       	eor	r1, r1
   136d2:	e9 50       	subi	r30, 0x09	; 9
   136d4:	f1 4e       	sbci	r31, 0xE1	; 225
   136d6:	67 a0       	ldd	r6, Z+39	; 0x27
   136d8:	70 a4       	ldd	r7, Z+40	; 0x28
// Also sets Devices[index].model
                            hpdir_set_parameters(index,token);
   136da:	b4 01       	movw	r22, r8
   136dc:	c6 01       	movw	r24, r12
   136de:	20 de       	rcall	.-960    	; 0x13320 <hpdir_set_parameters>
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   136e0:	22 24       	eor	r2, r2
   136e2:	23 94       	inc	r2
   136e4:	31 2c       	mov	r3, r1
                            hpdir_set_parameters(index,token);
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   136e6:	63 cf       	rjmp	.-314    	; 0x135ae <Read_Config+0x142>
   136e8:	80 e0       	ldi	r24, 0x00	; 0
   136ea:	90 e0       	ldi	r25, 0x00	; 0
   136ec:	5a dd       	rcall	.-1356   	; 0x131a2 <push_state>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   136ee:	81 e0       	ldi	r24, 0x01	; 1
   136f0:	90 e0       	ldi	r25, 0x00	; 0
   136f2:	74 dc       	rcall	.-1816   	; 0x12fdc <alloc_device>
   136f4:	6c 01       	movw	r12, r24
   136f6:	9f ef       	ldi	r25, 0xFF	; 255
                        if(index == -1)
   136f8:	c9 16       	cp	r12, r25
   136fa:	d9 06       	cpc	r13, r25
   136fc:	09 f4       	brne	.+2      	; 0x13700 <Read_Config+0x294>
   136fe:	57 cf       	rjmp	.-338    	; 0x135ae <Read_Config+0x142>
   13700:	8b e2       	ldi	r24, 0x2B	; 43
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13702:	8c 9d       	mul	r24, r12
   13704:	f0 01       	movw	r30, r0
   13706:	8d 9d       	mul	r24, r13
   13708:	f0 0d       	add	r31, r0
   1370a:	11 24       	eor	r1, r1
   1370c:	e9 50       	subi	r30, 0x09	; 9
   1370e:	f1 4e       	sbci	r31, 0xE1	; 225
   13710:	a7 a1       	ldd	r26, Z+39	; 0x27
   13712:	b0 a5       	ldd	r27, Z+40	; 0x28
   13714:	c8 5f       	subi	r28, 0xF8	; 248
   13716:	de 4f       	sbci	r29, 0xFE	; 254
   13718:	b9 83       	std	Y+1, r27	; 0x01
   1371a:	a8 83       	st	Y, r26
   1371c:	c8 50       	subi	r28, 0x08	; 8
   1371e:	d1 40       	sbci	r29, 0x01	; 1
// Also sets Devices[index.model
                            hpdir_set_parameters(index,token);
   13720:	b4 01       	movw	r22, r8
   13722:	c6 01       	movw	r24, r12
   13724:	fd dd       	rcall	.-1030   	; 0x13320 <hpdir_set_parameters>
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   13726:	aa e0       	ldi	r26, 0x0A	; 10
   13728:	2a 2e       	mov	r2, r26
   1372a:	31 2c       	mov	r3, r1
   1372c:	40 cf       	rjmp	.-384    	; 0x135ae <Read_Config+0x142>
                            hpdir_set_parameters(index,token);
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   1372e:	80 e0       	ldi	r24, 0x00	; 0
   13730:	90 e0       	ldi	r25, 0x00	; 0
   13732:	37 dd       	rcall	.-1426   	; 0x131a2 <push_state>
   13734:	84 e0       	ldi	r24, 0x04	; 4
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   13736:	90 e0       	ldi	r25, 0x00	; 0
   13738:	51 dc       	rcall	.-1886   	; 0x12fdc <alloc_device>
   1373a:	6c 01       	movw	r12, r24
   1373c:	01 96       	adiw	r24, 0x01	; 1
   1373e:	09 f4       	brne	.+2      	; 0x13742 <Read_Config+0x2d6>
                        if(index == -1)
   13740:	36 cf       	rjmp	.-404    	; 0x135ae <Read_Config+0x142>
   13742:	8b e2       	ldi	r24, 0x2B	; 43
   13744:	8c 9d       	mul	r24, r12
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13746:	f0 01       	movw	r30, r0
   13748:	8d 9d       	mul	r24, r13
   1374a:	f0 0d       	add	r31, r0
   1374c:	11 24       	eor	r1, r1
   1374e:	e9 50       	subi	r30, 0x09	; 9
   13750:	f1 4e       	sbci	r31, 0xE1	; 225
   13752:	27 a1       	ldd	r18, Z+39	; 0x27
   13754:	30 a5       	ldd	r19, Z+40	; 0x28
   13756:	c6 5f       	subi	r28, 0xF6	; 246
   13758:	de 4f       	sbci	r29, 0xFE	; 254
   1375a:	39 83       	std	Y+1, r19	; 0x01
   1375c:	28 83       	st	Y, r18
   1375e:	ca 50       	subi	r28, 0x0A	; 10
   13760:	d1 40       	sbci	r29, 0x01	; 1
   13762:	fe e0       	ldi	r31, 0x0E	; 14
   13764:	2f 2e       	mov	r2, r31
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   13766:	31 2c       	mov	r3, r1
   13768:	22 cf       	rjmp	.-444    	; 0x135ae <Read_Config+0x142>
   1376a:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   1376e:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   13772:	1d cf       	rjmp	.-454    	; 0x135ae <Read_Config+0x142>
   13774:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13776:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   13778:	57 82       	std	Z+7, r5	; 0x07
   1377a:	46 82       	std	Z+6, r4	; 0x06
   1377c:	b5 82       	std	Z+5, r11	; 0x05
   1377e:	a4 82       	std	Z+4, r10	; 0x04
   13780:	8f e1       	ldi	r24, 0x1F	; 31
   13782:	9d e1       	ldi	r25, 0x1D	; 29
   13784:	a0 e0       	ldi	r26, 0x00	; 0
   13786:	81 83       	std	Z+1, r24	; 0x01
   13788:	92 83       	std	Z+2, r25	; 0x02
   1378a:	a3 83       	std	Z+3, r26	; 0x03
   1378c:	4c c2       	rjmp	.+1176   	; 0x13c26 <Read_Config+0x7ba>
   1378e:	09 30       	cpi	r16, 0x09	; 9
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   13790:	11 05       	cpc	r17, r1
   13792:	39 f4       	brne	.+14     	; 0x137a2 <Read_Config+0x336>
   13794:	8e e0       	ldi	r24, 0x0E	; 14
                {
                    push_state(state);
   13796:	90 e0       	ldi	r25, 0x00	; 0
   13798:	04 dd       	rcall	.-1528   	; 0x131a2 <push_state>
   1379a:	ef e0       	ldi	r30, 0x0F	; 15
   1379c:	2e 2e       	mov	r2, r30
                    state = PRINTER_CONFIG;
   1379e:	31 2c       	mov	r3, r1
   137a0:	06 cf       	rjmp	.-500    	; 0x135ae <Read_Config+0x142>
   137a2:	ed b7       	in	r30, 0x3d	; 61
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   137a4:	fe b7       	in	r31, 0x3e	; 62
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   137a6:	57 82       	std	Z+7, r5	; 0x07
   137a8:	46 82       	std	Z+6, r4	; 0x06
   137aa:	b5 82       	std	Z+5, r11	; 0x05
   137ac:	a4 82       	std	Z+4, r10	; 0x04
   137ae:	85 ef       	ldi	r24, 0xF5	; 245
   137b0:	9c e1       	ldi	r25, 0x1C	; 28
   137b2:	e8 cf       	rjmp	.-48     	; 0x13784 <Read_Config+0x318>
   137b4:	01 30       	cpi	r16, 0x01	; 1
   137b6:	11 05       	cpc	r17, r1
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   137b8:	b1 f4       	brne	.+44     	; 0x137e6 <Read_Config+0x37a>
   137ba:	6f 71       	andi	r22, 0x1F	; 31
   137bc:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    Devices[index].ADDRESS = 0x1f & val.b;
   137be:	8c 9d       	mul	r24, r12
   137c0:	f0 01       	movw	r30, r0
   137c2:	8d 9d       	mul	r24, r13
   137c4:	f0 0d       	add	r31, r0
   137c6:	11 24       	eor	r1, r1
   137c8:	e9 50       	subi	r30, 0x09	; 9
   137ca:	f1 4e       	sbci	r31, 0xE1	; 225
   137cc:	61 83       	std	Z+1, r22	; 0x01
   137ce:	c6 5f       	subi	r28, 0xF6	; 246
   137d0:	de 4f       	sbci	r29, 0xFE	; 254
                    PRINTERp->HEADER.ADDRESS  = 0x1f & val.b;
   137d2:	a8 81       	ld	r26, Y
   137d4:	b9 81       	ldd	r27, Y+1	; 0x01
   137d6:	ca 50       	subi	r28, 0x0A	; 10
   137d8:	d1 40       	sbci	r29, 0x01	; 1
   137da:	6c 93       	st	X, r22
   137dc:	8f ef       	ldi	r24, 0xFF	; 255
   137de:	82 83       	std	Z+2, r24	; 0x02
// NO PPR
                    Devices[index].PPR = 0xff;
   137e0:	fd 01       	movw	r30, r26
   137e2:	81 83       	std	Z+1, r24	; 0x01
                    PRINTERp->HEADER.PPR = 0xff;
   137e4:	e4 ce       	rjmp	.-568    	; 0x135ae <Read_Config+0x142>
   137e6:	ed b7       	in	r30, 0x3d	; 61
   137e8:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   137ea:	57 82       	std	Z+7, r5	; 0x07
   137ec:	46 82       	std	Z+6, r4	; 0x06
   137ee:	b5 82       	std	Z+5, r11	; 0x05
   137f0:	a4 82       	std	Z+4, r10	; 0x04
   137f2:	84 ec       	ldi	r24, 0xC4	; 196
   137f4:	9c e1       	ldi	r25, 0x1C	; 28
   137f6:	c6 cf       	rjmp	.-116    	; 0x13784 <Read_Config+0x318>
   137f8:	05 31       	cpi	r16, 0x15	; 21
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   137fa:	11 05       	cpc	r17, r1
   137fc:	d9 f0       	breq	.+54     	; 0x13834 <Read_Config+0x3c8>
   137fe:	6c f4       	brge	.+26     	; 0x1381a <Read_Config+0x3ae>
   13800:	09 30       	cpi	r16, 0x09	; 9
   13802:	11 05       	cpc	r17, r1
   13804:	f1 f0       	breq	.+60     	; 0x13842 <Read_Config+0x3d6>
   13806:	0b 30       	cpi	r16, 0x0B	; 11
   13808:	11 05       	cpc	r17, r1
   1380a:	49 f5       	brne	.+82     	; 0x1385e <Read_Config+0x3f2>
   1380c:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   1380e:	90 e0       	ldi	r25, 0x00	; 0
   13810:	c8 dc       	rcall	.-1648   	; 0x131a2 <push_state>
   13812:	54 e0       	ldi	r21, 0x04	; 4
                        state = SS80_CONTROLLER;
   13814:	25 2e       	mov	r2, r21
   13816:	31 2c       	mov	r3, r1
   13818:	ca ce       	rjmp	.-620    	; 0x135ae <Read_Config+0x142>
                        break;
   1381a:	07 32       	cpi	r16, 0x27	; 39
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   1381c:	11 05       	cpc	r17, r1
   1381e:	c1 f0       	breq	.+48     	; 0x13850 <Read_Config+0x3e4>
   13820:	0a 32       	cpi	r16, 0x2A	; 42
   13822:	11 05       	cpc	r17, r1
   13824:	e1 f4       	brne	.+56     	; 0x1385e <Read_Config+0x3f2>
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   13826:	81 e0       	ldi	r24, 0x01	; 1
   13828:	90 e0       	ldi	r25, 0x00	; 0
   1382a:	bb dc       	rcall	.-1674   	; 0x131a2 <push_state>
                        state = SS80_VOLUME;
   1382c:	36 e0       	ldi	r19, 0x06	; 6
   1382e:	23 2e       	mov	r2, r19
   13830:	31 2c       	mov	r3, r1
                        break;
   13832:	bd ce       	rjmp	.-646    	; 0x135ae <Read_Config+0x142>

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   13834:	81 e0       	ldi	r24, 0x01	; 1
   13836:	90 e0       	ldi	r25, 0x00	; 0
   13838:	b4 dc       	rcall	.-1688   	; 0x131a2 <push_state>
                        state = SS80_HEADER;
   1383a:	72 e0       	ldi	r23, 0x02	; 2
   1383c:	27 2e       	mov	r2, r23
   1383e:	31 2c       	mov	r3, r1
                        break;
   13840:	b6 ce       	rjmp	.-660    	; 0x135ae <Read_Config+0x142>
                    case TOK_CONFIG:
                        push_state(state);
   13842:	81 e0       	ldi	r24, 0x01	; 1
   13844:	90 e0       	ldi	r25, 0x00	; 0
   13846:	ad dc       	rcall	.-1702   	; 0x131a2 <push_state>
   13848:	63 e0       	ldi	r22, 0x03	; 3
                        state = SS80_CONFIG;
   1384a:	26 2e       	mov	r2, r22
   1384c:	31 2c       	mov	r3, r1
   1384e:	af ce       	rjmp	.-674    	; 0x135ae <Read_Config+0x142>
                        break;
   13850:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   13852:	90 e0       	ldi	r25, 0x00	; 0
   13854:	a6 dc       	rcall	.-1716   	; 0x131a2 <push_state>
   13856:	45 e0       	ldi	r20, 0x05	; 5
   13858:	24 2e       	mov	r2, r20
                        state = SS80_UNIT;
   1385a:	31 2c       	mov	r3, r1
   1385c:	a8 ce       	rjmp	.-688    	; 0x135ae <Read_Config+0x142>
   1385e:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13860:	fe b7       	in	r31, 0x3e	; 62
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   13862:	57 82       	std	Z+7, r5	; 0x07
   13864:	46 82       	std	Z+6, r4	; 0x06
   13866:	b5 82       	std	Z+5, r11	; 0x05
   13868:	a4 82       	std	Z+4, r10	; 0x04
   1386a:	87 e9       	ldi	r24, 0x97	; 151
   1386c:	9c e1       	ldi	r25, 0x1C	; 28
   1386e:	8a cf       	rjmp	.-236    	; 0x13784 <Read_Config+0x318>
   13870:	02 31       	cpi	r16, 0x12	; 18
   13872:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   13874:	f1 f0       	breq	.+60     	; 0x138b2 <Read_Config+0x446>
   13876:	0f 31       	cpi	r16, 0x1F	; 31
   13878:	11 05       	cpc	r17, r1
   1387a:	79 f0       	breq	.+30     	; 0x1389a <Read_Config+0x42e>
   1387c:	01 30       	cpi	r16, 0x01	; 1
   1387e:	11 05       	cpc	r17, r1
   13880:	e9 f4       	brne	.+58     	; 0x138bc <Read_Config+0x450>
   13882:	6f 71       	andi	r22, 0x1F	; 31
   13884:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   13886:	8c 9d       	mul	r24, r12
   13888:	f0 01       	movw	r30, r0
   1388a:	8d 9d       	mul	r24, r13
   1388c:	f0 0d       	add	r31, r0
   1388e:	11 24       	eor	r1, r1
   13890:	e9 50       	subi	r30, 0x09	; 9
   13892:	f1 4e       	sbci	r31, 0xE1	; 225
   13894:	61 83       	std	Z+1, r22	; 0x01
   13896:	d3 01       	movw	r26, r6
   13898:	37 c1       	rjmp	.+622    	; 0x13b08 <Read_Config+0x69c>
                        SS80p->HEADER.ADDRESS  = 0x1f & val.b;
   1389a:	67 70       	andi	r22, 0x07	; 7
   1389c:	8b e2       	ldi	r24, 0x2B	; 43
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   1389e:	8c 9d       	mul	r24, r12
   138a0:	f0 01       	movw	r30, r0
   138a2:	8d 9d       	mul	r24, r13
   138a4:	f0 0d       	add	r31, r0
   138a6:	11 24       	eor	r1, r1
   138a8:	e9 50       	subi	r30, 0x09	; 9
   138aa:	f1 4e       	sbci	r31, 0xE1	; 225
   138ac:	62 83       	std	Z+2, r22	; 0x02
   138ae:	f3 01       	movw	r30, r6
   138b0:	2d c1       	rjmp	.+602    	; 0x13b0c <Read_Config+0x6a0>
                        SS80p->HEADER.PPR = 0x07 & val.b;
   138b2:	c4 01       	movw	r24, r8
   138b4:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <stralloc>
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   138b8:	f3 01       	movw	r30, r6
   138ba:	33 c1       	rjmp	.+614    	; 0x13b22 <Read_Config+0x6b6>
   138bc:	ed b7       	in	r30, 0x3d	; 61
   138be:	fe b7       	in	r31, 0x3e	; 62
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   138c0:	57 82       	std	Z+7, r5	; 0x07
   138c2:	46 82       	std	Z+6, r4	; 0x06
   138c4:	b5 82       	std	Z+5, r11	; 0x05
   138c6:	a4 82       	std	Z+4, r10	; 0x04
   138c8:	89 e6       	ldi	r24, 0x69	; 105
   138ca:	9c e1       	ldi	r25, 0x1C	; 28
   138cc:	5b cf       	rjmp	.-330    	; 0x13784 <Read_Config+0x318>
   138ce:	07 31       	cpi	r16, 0x17	; 23
   138d0:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   138d2:	21 f4       	brne	.+8      	; 0x138dc <Read_Config+0x470>
   138d4:	96 2f       	mov	r25, r22
   138d6:	87 2f       	mov	r24, r23
                {
                    SS80p->CONFIG.ID = val.w;
   138d8:	f3 01       	movw	r30, r6
   138da:	3f c1       	rjmp	.+638    	; 0x13b5a <Read_Config+0x6ee>
   138dc:	ed b7       	in	r30, 0x3d	; 61
   138de:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   138e0:	57 82       	std	Z+7, r5	; 0x07
   138e2:	46 82       	std	Z+6, r4	; 0x06
   138e4:	b5 82       	std	Z+5, r11	; 0x05
   138e6:	a4 82       	std	Z+4, r10	; 0x04
   138e8:	8b e3       	ldi	r24, 0x3B	; 59
   138ea:	9c e1       	ldi	r25, 0x1C	; 28
   138ec:	4b cf       	rjmp	.-362    	; 0x13784 <Read_Config+0x318>
   138ee:	06 32       	cpi	r16, 0x26	; 38
   138f0:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   138f2:	71 f0       	breq	.+28     	; 0x13910 <Read_Config+0x4a4>
   138f4:	08 32       	cpi	r16, 0x28	; 40
   138f6:	11 05       	cpc	r17, r1
   138f8:	39 f0       	breq	.+14     	; 0x13908 <Read_Config+0x49c>
   138fa:	05 32       	cpi	r16, 0x25	; 37
   138fc:	11 05       	cpc	r17, r1
   138fe:	59 f4       	brne	.+22     	; 0x13916 <Read_Config+0x4aa>
   13900:	96 2f       	mov	r25, r22
   13902:	87 2f       	mov	r24, r23
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   13904:	f3 01       	movw	r30, r6
   13906:	5c c1       	rjmp	.+696    	; 0x13bc0 <Read_Config+0x754>
   13908:	96 2f       	mov	r25, r22
   1390a:	87 2f       	mov	r24, r23

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   1390c:	f3 01       	movw	r30, r6
   1390e:	55 c1       	rjmp	.+682    	; 0x13bba <Read_Config+0x74e>
   13910:	f3 01       	movw	r30, r6
   13912:	62 87       	std	Z+10, r22	; 0x0a
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   13914:	4c ce       	rjmp	.-872    	; 0x135ae <Read_Config+0x142>
   13916:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13918:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   1391a:	57 82       	std	Z+7, r5	; 0x07
   1391c:	46 82       	std	Z+6, r4	; 0x06
   1391e:	b5 82       	std	Z+5, r11	; 0x05
   13920:	a4 82       	std	Z+4, r10	; 0x04
   13922:	89 e0       	ldi	r24, 0x09	; 9
   13924:	9c e1       	ldi	r25, 0x1C	; 28
   13926:	2e cf       	rjmp	.-420    	; 0x13784 <Read_Config+0x318>
   13928:	0a 30       	cpi	r16, 0x0A	; 10
   1392a:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   1392c:	09 f4       	brne	.+2      	; 0x13930 <Read_Config+0x4c4>
   1392e:	45 c0       	rjmp	.+138    	; 0x139ba <Read_Config+0x54e>
   13930:	d4 f4       	brge	.+52     	; 0x13966 <Read_Config+0x4fa>
   13932:	05 30       	cpi	r16, 0x05	; 5
   13934:	11 05       	cpc	r17, r1
   13936:	d1 f1       	breq	.+116    	; 0x139ac <Read_Config+0x540>
   13938:	64 f4       	brge	.+24     	; 0x13952 <Read_Config+0x4e6>
   1393a:	01 15       	cp	r16, r1
   1393c:	11 05       	cpc	r17, r1
   1393e:	09 f4       	brne	.+2      	; 0x13942 <Read_Config+0x4d6>
   13940:	40 c0       	rjmp	.+128    	; 0x139c2 <Read_Config+0x556>
   13942:	04 30       	cpi	r16, 0x04	; 4
   13944:	11 05       	cpc	r17, r1
   13946:	09 f0       	breq	.+2      	; 0x1394a <Read_Config+0x4de>
   13948:	46 c0       	rjmp	.+140    	; 0x139d6 <Read_Config+0x56a>
   1394a:	f3 01       	movw	r30, r6
   1394c:	64 8b       	std	Z+20, r22	; 0x14
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   1394e:	75 8b       	std	Z+21, r23	; 0x15
   13950:	2e ce       	rjmp	.-932    	; 0x135ae <Read_Config+0x142>
   13952:	06 30       	cpi	r16, 0x06	; 6
                        break;
   13954:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13956:	71 f1       	breq	.+92     	; 0x139b4 <Read_Config+0x548>
   13958:	07 30       	cpi	r16, 0x07	; 7
   1395a:	11 05       	cpc	r17, r1
   1395c:	e1 f5       	brne	.+120    	; 0x139d6 <Read_Config+0x56a>
   1395e:	f3 01       	movw	r30, r6
   13960:	60 8b       	std	Z+16, r22	; 0x10
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   13962:	71 8b       	std	Z+17, r23	; 0x11
   13964:	24 ce       	rjmp	.-952    	; 0x135ae <Read_Config+0x142>
   13966:	0c 31       	cpi	r16, 0x1C	; 28
                        break;
   13968:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   1396a:	79 f1       	breq	.+94     	; 0x139ca <Read_Config+0x55e>
   1396c:	4c f4       	brge	.+18     	; 0x13980 <Read_Config+0x514>
   1396e:	0f 30       	cpi	r16, 0x0F	; 15
   13970:	11 05       	cpc	r17, r1
   13972:	b1 f0       	breq	.+44     	; 0x139a0 <Read_Config+0x534>
   13974:	03 31       	cpi	r16, 0x13	; 19
   13976:	11 05       	cpc	r17, r1
   13978:	71 f5       	brne	.+92     	; 0x139d6 <Read_Config+0x56a>
   1397a:	f3 01       	movw	r30, r6
   1397c:	65 8f       	std	Z+29, r22	; 0x1d
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   1397e:	17 ce       	rjmp	.-978    	; 0x135ae <Read_Config+0x142>
   13980:	01 32       	cpi	r16, 0x21	; 33
                        break;
   13982:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13984:	29 f1       	breq	.+74     	; 0x139d0 <Read_Config+0x564>
   13986:	09 32       	cpi	r16, 0x29	; 41
   13988:	11 05       	cpc	r17, r1
   1398a:	39 f0       	breq	.+14     	; 0x1399a <Read_Config+0x52e>
   1398c:	0e 31       	cpi	r16, 0x1E	; 30
   1398e:	11 05       	cpc	r17, r1
   13990:	11 f5       	brne	.+68     	; 0x139d6 <Read_Config+0x56a>
   13992:	f3 01       	movw	r30, r6
   13994:	60 8f       	std	Z+24, r22	; 0x18
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   13996:	71 8f       	std	Z+25, r23	; 0x19
   13998:	0a ce       	rjmp	.-1004   	; 0x135ae <Read_Config+0x142>
   1399a:	f3 01       	movw	r30, r6
                        break;
   1399c:	63 87       	std	Z+11, r22	; 0x0b

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   1399e:	07 ce       	rjmp	.-1010   	; 0x135ae <Read_Config+0x142>
   139a0:	f3 01       	movw	r30, r6
                        break;
   139a2:	64 87       	std	Z+12, r22	; 0x0c
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   139a4:	75 87       	std	Z+13, r23	; 0x0d
   139a6:	86 87       	std	Z+14, r24	; 0x0e
   139a8:	97 87       	std	Z+15, r25	; 0x0f
   139aa:	01 ce       	rjmp	.-1022   	; 0x135ae <Read_Config+0x142>
   139ac:	61 70       	andi	r22, 0x01	; 1
                        break;
   139ae:	f3 01       	movw	r30, r6
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   139b0:	62 8b       	std	Z+18, r22	; 0x12
   139b2:	fd cd       	rjmp	.-1030   	; 0x135ae <Read_Config+0x142>
   139b4:	f3 01       	movw	r30, r6
                        break;
   139b6:	63 8b       	std	Z+19, r22	; 0x13
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   139b8:	fa cd       	rjmp	.-1036   	; 0x135ae <Read_Config+0x142>
   139ba:	f3 01       	movw	r30, r6
                        break;
   139bc:	66 8b       	std	Z+22, r22	; 0x16
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   139be:	77 8b       	std	Z+23, r23	; 0x17
   139c0:	f6 cd       	rjmp	.-1044   	; 0x135ae <Read_Config+0x142>
   139c2:	f3 01       	movw	r30, r6
                        break;
   139c4:	62 8f       	std	Z+26, r22	; 0x1a
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   139c6:	73 8f       	std	Z+27, r23	; 0x1b
   139c8:	f2 cd       	rjmp	.-1052   	; 0x135ae <Read_Config+0x142>
   139ca:	f3 01       	movw	r30, r6
                        break;
   139cc:	64 8f       	std	Z+28, r22	; 0x1c
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   139ce:	ef cd       	rjmp	.-1058   	; 0x135ae <Read_Config+0x142>
   139d0:	f3 01       	movw	r30, r6
                        break;
   139d2:	66 8f       	std	Z+30, r22	; 0x1e
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   139d4:	ec cd       	rjmp	.-1064   	; 0x135ae <Read_Config+0x142>
   139d6:	ed b7       	in	r30, 0x3d	; 61
                        break;
   139d8:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   139da:	57 82       	std	Z+7, r5	; 0x07
   139dc:	46 82       	std	Z+6, r4	; 0x06
   139de:	b5 82       	std	Z+5, r11	; 0x05
   139e0:	a4 82       	std	Z+4, r10	; 0x04
   139e2:	8d ed       	ldi	r24, 0xDD	; 221
   139e4:	9b e1       	ldi	r25, 0x1B	; 27
   139e6:	ce ce       	rjmp	.-612    	; 0x13784 <Read_Config+0x318>
   139e8:	0a 31       	cpi	r16, 0x1A	; 26
   139ea:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   139ec:	b9 f0       	breq	.+46     	; 0x13a1c <Read_Config+0x5b0>
   139ee:	64 f4       	brge	.+24     	; 0x13a08 <Read_Config+0x59c>
   139f0:	08 31       	cpi	r16, 0x18	; 24
   139f2:	11 05       	cpc	r17, r1
   139f4:	e1 f0       	breq	.+56     	; 0x13a2e <Read_Config+0x5c2>
   139f6:	09 31       	cpi	r16, 0x19	; 25
   139f8:	11 05       	cpc	r17, r1
   139fa:	e1 f4       	brne	.+56     	; 0x13a34 <Read_Config+0x5c8>
   139fc:	f3 01       	movw	r30, r6
   139fe:	66 a3       	std	Z+38, r22	; 0x26
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   13a00:	77 a3       	std	Z+39, r23	; 0x27
   13a02:	80 a7       	std	Z+40, r24	; 0x28
   13a04:	91 a7       	std	Z+41, r25	; 0x29
   13a06:	d3 cd       	rjmp	.-1114   	; 0x135ae <Read_Config+0x142>
   13a08:	0b 31       	cpi	r16, 0x1B	; 27
                        break;
   13a0a:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   13a0c:	69 f0       	breq	.+26     	; 0x13a28 <Read_Config+0x5bc>
   13a0e:	0d 31       	cpi	r16, 0x1D	; 29
   13a10:	11 05       	cpc	r17, r1
   13a12:	81 f4       	brne	.+32     	; 0x13a34 <Read_Config+0x5c8>
   13a14:	f3 01       	movw	r30, r6
   13a16:	64 a3       	std	Z+36, r22	; 0x24
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   13a18:	75 a3       	std	Z+37, r23	; 0x25
   13a1a:	c9 cd       	rjmp	.-1134   	; 0x135ae <Read_Config+0x142>
   13a1c:	f3 01       	movw	r30, r6
                        break;
   13a1e:	67 8f       	std	Z+31, r22	; 0x1f

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   13a20:	70 a3       	std	Z+32, r23	; 0x20
   13a22:	81 a3       	std	Z+33, r24	; 0x21
   13a24:	92 a3       	std	Z+34, r25	; 0x22
   13a26:	c3 cd       	rjmp	.-1146   	; 0x135ae <Read_Config+0x142>
   13a28:	f3 01       	movw	r30, r6
                        break;
   13a2a:	63 a3       	std	Z+35, r22	; 0x23
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   13a2c:	c0 cd       	rjmp	.-1152   	; 0x135ae <Read_Config+0x142>
   13a2e:	f3 01       	movw	r30, r6
                        break;
   13a30:	62 a7       	std	Z+42, r22	; 0x2a
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   13a32:	bd cd       	rjmp	.-1158   	; 0x135ae <Read_Config+0x142>
   13a34:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13a36:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13a38:	57 82       	std	Z+7, r5	; 0x07
   13a3a:	46 82       	std	Z+6, r4	; 0x06
   13a3c:	b5 82       	std	Z+5, r11	; 0x05
   13a3e:	a4 82       	std	Z+4, r10	; 0x04
   13a40:	c3 5e       	subi	r28, 0xE3	; 227
   13a42:	de 4f       	sbci	r29, 0xFE	; 254
   13a44:	28 81       	ld	r18, Y
   13a46:	39 81       	ldd	r19, Y+1	; 0x01
   13a48:	4a 81       	ldd	r20, Y+2	; 0x02
   13a4a:	cd 51       	subi	r28, 0x1D	; 29
   13a4c:	d1 40       	sbci	r29, 0x01	; 1
   13a4e:	e8 c0       	rjmp	.+464    	; 0x13c20 <Read_Config+0x7b4>
   13a50:	04 31       	cpi	r16, 0x14	; 20
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   13a52:	11 05       	cpc	r17, r1
   13a54:	a1 f0       	breq	.+40     	; 0x13a7e <Read_Config+0x612>
   13a56:	05 31       	cpi	r16, 0x15	; 21
   13a58:	11 05       	cpc	r17, r1
   13a5a:	51 f0       	breq	.+20     	; 0x13a70 <Read_Config+0x604>
   13a5c:	09 30       	cpi	r16, 0x09	; 9
   13a5e:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   13a60:	a9 f4       	brne	.+42     	; 0x13a8c <Read_Config+0x620>
   13a62:	8a e0       	ldi	r24, 0x0A	; 10
   13a64:	90 e0       	ldi	r25, 0x00	; 0
   13a66:	9d db       	rcall	.-2246   	; 0x131a2 <push_state>
                        state = AMIGO_CONFIG;
   13a68:	9c e0       	ldi	r25, 0x0C	; 12
   13a6a:	29 2e       	mov	r2, r25
   13a6c:	31 2c       	mov	r3, r1
                        break;
   13a6e:	9f cd       	rjmp	.-1218   	; 0x135ae <Read_Config+0x142>
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   13a70:	8a e0       	ldi	r24, 0x0A	; 10
   13a72:	90 e0       	ldi	r25, 0x00	; 0
   13a74:	96 db       	rcall	.-2260   	; 0x131a2 <push_state>
   13a76:	2b e0       	ldi	r18, 0x0B	; 11
                        state = AMIGO_HEADER;
   13a78:	22 2e       	mov	r2, r18
   13a7a:	31 2c       	mov	r3, r1
   13a7c:	98 cd       	rjmp	.-1232   	; 0x135ae <Read_Config+0x142>
                        break;
   13a7e:	8a e0       	ldi	r24, 0x0A	; 10
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   13a80:	90 e0       	ldi	r25, 0x00	; 0
   13a82:	8f db       	rcall	.-2274   	; 0x131a2 <push_state>
   13a84:	8d e0       	ldi	r24, 0x0D	; 13
   13a86:	28 2e       	mov	r2, r24
                        state = AMIGO_GEOMETRY;
   13a88:	31 2c       	mov	r3, r1
   13a8a:	91 cd       	rjmp	.-1246   	; 0x135ae <Read_Config+0x142>
   13a8c:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13a8e:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13a90:	57 82       	std	Z+7, r5	; 0x07
   13a92:	46 82       	std	Z+6, r4	; 0x06
   13a94:	b5 82       	std	Z+5, r11	; 0x05
   13a96:	a4 82       	std	Z+4, r10	; 0x04
   13a98:	c6 5e       	subi	r28, 0xE6	; 230
   13a9a:	de 4f       	sbci	r29, 0xFE	; 254
   13a9c:	28 81       	ld	r18, Y
   13a9e:	39 81       	ldd	r19, Y+1	; 0x01
   13aa0:	4a 81       	ldd	r20, Y+2	; 0x02
   13aa2:	ca 51       	subi	r28, 0x1A	; 26
   13aa4:	d1 40       	sbci	r29, 0x01	; 1
   13aa6:	bc c0       	rjmp	.+376    	; 0x13c20 <Read_Config+0x7b4>
   13aa8:	00 31       	cpi	r16, 0x10	; 16
   13aaa:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   13aac:	09 f4       	brne	.+2      	; 0x13ab0 <Read_Config+0x644>
   13aae:	7f cd       	rjmp	.-1282   	; 0x135ae <Read_Config+0x142>
   13ab0:	a4 f4       	brge	.+40     	; 0x13ada <Read_Config+0x66e>
   13ab2:	01 30       	cpi	r16, 0x01	; 1
   13ab4:	11 05       	cpc	r17, r1
   13ab6:	c1 f5       	brne	.+112    	; 0x13b28 <Read_Config+0x6bc>
   13ab8:	6f 71       	andi	r22, 0x1F	; 31
   13aba:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   13abc:	8c 9d       	mul	r24, r12
   13abe:	f0 01       	movw	r30, r0
   13ac0:	8d 9d       	mul	r24, r13
   13ac2:	f0 0d       	add	r31, r0
   13ac4:	11 24       	eor	r1, r1
   13ac6:	e9 50       	subi	r30, 0x09	; 9
   13ac8:	f1 4e       	sbci	r31, 0xE1	; 225
   13aca:	61 83       	std	Z+1, r22	; 0x01
   13acc:	c8 5f       	subi	r28, 0xF8	; 248
   13ace:	de 4f       	sbci	r29, 0xFE	; 254
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13ad0:	a8 81       	ld	r26, Y
   13ad2:	b9 81       	ldd	r27, Y+1	; 0x01
   13ad4:	c8 50       	subi	r28, 0x08	; 8
   13ad6:	d1 40       	sbci	r29, 0x01	; 1
   13ad8:	17 c0       	rjmp	.+46     	; 0x13b08 <Read_Config+0x69c>
   13ada:	02 31       	cpi	r16, 0x12	; 18
   13adc:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   13ade:	c1 f0       	breq	.+48     	; 0x13b10 <Read_Config+0x6a4>
   13ae0:	0f 31       	cpi	r16, 0x1F	; 31
   13ae2:	11 05       	cpc	r17, r1
   13ae4:	09 f5       	brne	.+66     	; 0x13b28 <Read_Config+0x6bc>
   13ae6:	67 70       	andi	r22, 0x07	; 7
   13ae8:	8b e2       	ldi	r24, 0x2B	; 43
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   13aea:	8c 9d       	mul	r24, r12
   13aec:	f0 01       	movw	r30, r0
   13aee:	8d 9d       	mul	r24, r13
   13af0:	f0 0d       	add	r31, r0
   13af2:	11 24       	eor	r1, r1
   13af4:	e9 50       	subi	r30, 0x09	; 9
   13af6:	f1 4e       	sbci	r31, 0xE1	; 225
   13af8:	62 83       	std	Z+2, r22	; 0x02
   13afa:	c8 5f       	subi	r28, 0xF8	; 248
   13afc:	de 4f       	sbci	r29, 0xFE	; 254
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   13afe:	e8 81       	ld	r30, Y
   13b00:	f9 81       	ldd	r31, Y+1	; 0x01
   13b02:	c8 50       	subi	r28, 0x08	; 8
   13b04:	d1 40       	sbci	r29, 0x01	; 1
   13b06:	02 c0       	rjmp	.+4      	; 0x13b0c <Read_Config+0x6a0>
   13b08:	6c 93       	st	X, r22
   13b0a:	51 cd       	rjmp	.-1374   	; 0x135ae <Read_Config+0x142>
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13b0c:	61 83       	std	Z+1, r22	; 0x01
                        break;
   13b0e:	4f cd       	rjmp	.-1378   	; 0x135ae <Read_Config+0x142>
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   13b10:	c4 01       	movw	r24, r8
                        break;
   13b12:	0e 94 fd 2f 	call	0x5ffa	; 0x5ffa <stralloc>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   13b16:	c8 5f       	subi	r28, 0xF8	; 248
   13b18:	de 4f       	sbci	r29, 0xFE	; 254
   13b1a:	e8 81       	ld	r30, Y
   13b1c:	f9 81       	ldd	r31, Y+1	; 0x01
   13b1e:	c8 50       	subi	r28, 0x08	; 8
   13b20:	d1 40       	sbci	r29, 0x01	; 1
   13b22:	93 83       	std	Z+3, r25	; 0x03
   13b24:	82 83       	std	Z+2, r24	; 0x02
   13b26:	43 cd       	rjmp	.-1402   	; 0x135ae <Read_Config+0x142>
   13b28:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13b2a:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13b2c:	57 82       	std	Z+7, r5	; 0x07
   13b2e:	46 82       	std	Z+6, r4	; 0x06
   13b30:	b5 82       	std	Z+5, r11	; 0x05
   13b32:	a4 82       	std	Z+4, r10	; 0x04
   13b34:	c9 5e       	subi	r28, 0xE9	; 233
   13b36:	de 4f       	sbci	r29, 0xFE	; 254
   13b38:	28 81       	ld	r18, Y
   13b3a:	39 81       	ldd	r19, Y+1	; 0x01
   13b3c:	4a 81       	ldd	r20, Y+2	; 0x02
   13b3e:	c7 51       	subi	r28, 0x17	; 23
   13b40:	d1 40       	sbci	r29, 0x01	; 1
   13b42:	6e c0       	rjmp	.+220    	; 0x13c20 <Read_Config+0x7b4>
   13b44:	07 31       	cpi	r16, 0x17	; 23
   13b46:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   13b48:	59 f4       	brne	.+22     	; 0x13b60 <Read_Config+0x6f4>
   13b4a:	96 2f       	mov	r25, r22
   13b4c:	87 2f       	mov	r24, r23
                {
                    AMIGOp->CONFIG.ID = val.w;
   13b4e:	c8 5f       	subi	r28, 0xF8	; 248
   13b50:	de 4f       	sbci	r29, 0xFE	; 254
   13b52:	e8 81       	ld	r30, Y
   13b54:	f9 81       	ldd	r31, Y+1	; 0x01
   13b56:	c8 50       	subi	r28, 0x08	; 8
   13b58:	d1 40       	sbci	r29, 0x01	; 1
   13b5a:	94 83       	std	Z+4, r25	; 0x04
   13b5c:	85 83       	std	Z+5, r24	; 0x05
   13b5e:	27 cd       	rjmp	.-1458   	; 0x135ae <Read_Config+0x142>
   13b60:	ed b7       	in	r30, 0x3d	; 61
   13b62:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13b64:	57 82       	std	Z+7, r5	; 0x07
   13b66:	46 82       	std	Z+6, r4	; 0x06
   13b68:	b5 82       	std	Z+5, r11	; 0x05
   13b6a:	a4 82       	std	Z+4, r10	; 0x04
   13b6c:	cc 5e       	subi	r28, 0xEC	; 236
   13b6e:	de 4f       	sbci	r29, 0xFE	; 254
   13b70:	28 81       	ld	r18, Y
   13b72:	39 81       	ldd	r19, Y+1	; 0x01
   13b74:	4a 81       	ldd	r20, Y+2	; 0x02
   13b76:	c4 51       	subi	r28, 0x14	; 20
   13b78:	d1 40       	sbci	r29, 0x01	; 1
   13b7a:	52 c0       	rjmp	.+164    	; 0x13c20 <Read_Config+0x7b4>
   13b7c:	0d 30       	cpi	r16, 0x0D	; 13
   13b7e:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   13b80:	59 f1       	breq	.+86     	; 0x13bd8 <Read_Config+0x76c>
   13b82:	64 f4       	brge	.+24     	; 0x13b9c <Read_Config+0x730>
   13b84:	08 30       	cpi	r16, 0x08	; 8
   13b86:	11 05       	cpc	r17, r1
   13b88:	81 f5       	brne	.+96     	; 0x13bea <Read_Config+0x77e>
   13b8a:	96 2f       	mov	r25, r22
   13b8c:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13b8e:	c8 5f       	subi	r28, 0xF8	; 248
   13b90:	de 4f       	sbci	r29, 0xFE	; 254
   13b92:	e8 81       	ld	r30, Y
   13b94:	f9 81       	ldd	r31, Y+1	; 0x01
   13b96:	c8 50       	subi	r28, 0x08	; 8
   13b98:	d1 40       	sbci	r29, 0x01	; 1
   13b9a:	0f c0       	rjmp	.+30     	; 0x13bba <Read_Config+0x74e>
   13b9c:	06 31       	cpi	r16, 0x16	; 22
   13b9e:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   13ba0:	91 f0       	breq	.+36     	; 0x13bc6 <Read_Config+0x75a>
   13ba2:	02 32       	cpi	r16, 0x22	; 34
   13ba4:	11 05       	cpc	r17, r1
   13ba6:	09 f5       	brne	.+66     	; 0x13bea <Read_Config+0x77e>
   13ba8:	96 2f       	mov	r25, r22
   13baa:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13bac:	c8 5f       	subi	r28, 0xF8	; 248
   13bae:	de 4f       	sbci	r29, 0xFE	; 254
   13bb0:	e8 81       	ld	r30, Y
   13bb2:	f9 81       	ldd	r31, Y+1	; 0x01
   13bb4:	c8 50       	subi	r28, 0x08	; 8
   13bb6:	d1 40       	sbci	r29, 0x01	; 1
   13bb8:	03 c0       	rjmp	.+6      	; 0x13bc0 <Read_Config+0x754>
   13bba:	96 83       	std	Z+6, r25	; 0x06
   13bbc:	87 83       	std	Z+7, r24	; 0x07

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13bbe:	f7 cc       	rjmp	.-1554   	; 0x135ae <Read_Config+0x142>
   13bc0:	90 87       	std	Z+8, r25	; 0x08
                        break;
   13bc2:	81 87       	std	Z+9, r24	; 0x09
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13bc4:	f4 cc       	rjmp	.-1560   	; 0x135ae <Read_Config+0x142>
   13bc6:	c8 5f       	subi	r28, 0xF8	; 248
                        break;
   13bc8:	de 4f       	sbci	r29, 0xFE	; 254
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   13bca:	e8 81       	ld	r30, Y
   13bcc:	f9 81       	ldd	r31, Y+1	; 0x01
   13bce:	c8 50       	subi	r28, 0x08	; 8
   13bd0:	d1 40       	sbci	r29, 0x01	; 1
   13bd2:	62 87       	std	Z+10, r22	; 0x0a
   13bd4:	73 87       	std	Z+11, r23	; 0x0b
   13bd6:	eb cc       	rjmp	.-1578   	; 0x135ae <Read_Config+0x142>
   13bd8:	c8 5f       	subi	r28, 0xF8	; 248
                        break;
   13bda:	de 4f       	sbci	r29, 0xFE	; 254
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   13bdc:	e8 81       	ld	r30, Y
   13bde:	f9 81       	ldd	r31, Y+1	; 0x01
   13be0:	c8 50       	subi	r28, 0x08	; 8
   13be2:	d1 40       	sbci	r29, 0x01	; 1
   13be4:	64 87       	std	Z+12, r22	; 0x0c
   13be6:	75 87       	std	Z+13, r23	; 0x0d
   13be8:	e2 cc       	rjmp	.-1596   	; 0x135ae <Read_Config+0x142>
   13bea:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13bec:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13bee:	57 82       	std	Z+7, r5	; 0x07
   13bf0:	46 82       	std	Z+6, r4	; 0x06
   13bf2:	b5 82       	std	Z+5, r11	; 0x05
   13bf4:	a4 82       	std	Z+4, r10	; 0x04
   13bf6:	cf 5e       	subi	r28, 0xEF	; 239
   13bf8:	de 4f       	sbci	r29, 0xFE	; 254
   13bfa:	28 81       	ld	r18, Y
   13bfc:	39 81       	ldd	r19, Y+1	; 0x01
   13bfe:	4a 81       	ldd	r20, Y+2	; 0x02
   13c00:	c1 51       	subi	r28, 0x11	; 17
   13c02:	d1 40       	sbci	r29, 0x01	; 1
   13c04:	0d c0       	rjmp	.+26     	; 0x13c20 <Read_Config+0x7b4>
   13c06:	ed b7       	in	r30, 0x3d	; 61
   13c08:	fe b7       	in	r31, 0x3e	; 62
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13c0a:	57 82       	std	Z+7, r5	; 0x07
   13c0c:	46 82       	std	Z+6, r4	; 0x06
   13c0e:	b5 82       	std	Z+5, r11	; 0x05
   13c10:	a4 82       	std	Z+4, r10	; 0x04
   13c12:	c2 5f       	subi	r28, 0xF2	; 242
   13c14:	de 4f       	sbci	r29, 0xFE	; 254
   13c16:	28 81       	ld	r18, Y
   13c18:	39 81       	ldd	r19, Y+1	; 0x01
   13c1a:	4a 81       	ldd	r20, Y+2	; 0x02
   13c1c:	ce 50       	subi	r28, 0x0E	; 14
   13c1e:	d1 40       	sbci	r29, 0x01	; 1
   13c20:	21 83       	std	Z+1, r18	; 0x01
   13c22:	32 83       	std	Z+2, r19	; 0x02
   13c24:	43 83       	std	Z+3, r20	; 0x03
   13c26:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   13c2a:	ff ef       	ldi	r31, 0xFF	; 255
   13c2c:	ef 1a       	sub	r14, r31
                ++errors;
   13c2e:	ff 0a       	sbc	r15, r31
   13c30:	be cc       	rjmp	.-1668   	; 0x135ae <Read_Config+0x142>
   13c32:	21 14       	cp	r2, r1
                break;
   13c34:	31 04       	cpc	r3, r1

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   13c36:	79 f0       	breq	.+30     	; 0x13c56 <Read_Config+0x7ea>
   13c38:	ed b7       	in	r30, 0x3d	; 61
   13c3a:	fe b7       	in	r31, 0x3e	; 62
    {
        printf("Missing END statement at line:%d\n", lines);
   13c3c:	55 82       	std	Z+5, r5	; 0x05
   13c3e:	44 82       	std	Z+4, r4	; 0x04
   13c40:	8e ea       	ldi	r24, 0xAE	; 174
   13c42:	9a e1       	ldi	r25, 0x1A	; 26
   13c44:	a0 e0       	ldi	r26, 0x00	; 0
   13c46:	81 83       	std	Z+1, r24	; 0x01
   13c48:	92 83       	std	Z+2, r25	; 0x02
   13c4a:	a3 83       	std	Z+3, r26	; 0x03
   13c4c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   13c50:	ff ef       	ldi	r31, 0xFF	; 255
   13c52:	ef 1a       	sub	r14, r31
        ++errors;
   13c54:	ff 0a       	sbc	r15, r31
   13c56:	ed b7       	in	r30, 0x3d	; 61
   13c58:	fe b7       	in	r31, 0x3e	; 62
    }
    printf("Read_Config: read(%d) lines\n", lines);
   13c5a:	55 82       	std	Z+5, r5	; 0x05
   13c5c:	44 82       	std	Z+4, r4	; 0x04
   13c5e:	81 e9       	ldi	r24, 0x91	; 145
   13c60:	9a e1       	ldi	r25, 0x1A	; 26
   13c62:	a0 e0       	ldi	r26, 0x00	; 0
   13c64:	81 83       	std	Z+1, r24	; 0x01
   13c66:	92 83       	std	Z+2, r25	; 0x02
   13c68:	a3 83       	std	Z+3, r26	; 0x03
   13c6a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   13c6e:	e1 14       	cp	r14, r1
   13c70:	f1 04       	cpc	r15, r1
    if(errors)
   13c72:	61 f0       	breq	.+24     	; 0x13c8c <Read_Config+0x820>
   13c74:	ed b7       	in	r30, 0x3d	; 61
   13c76:	fe b7       	in	r31, 0x3e	; 62
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   13c78:	f5 82       	std	Z+5, r15	; 0x05
   13c7a:	e4 82       	std	Z+4, r14	; 0x04
   13c7c:	8a e6       	ldi	r24, 0x6A	; 106
   13c7e:	9a e1       	ldi	r25, 0x1A	; 26
   13c80:	a0 e0       	ldi	r26, 0x00	; 0
   13c82:	81 83       	std	Z+1, r24	; 0x01
   13c84:	92 83       	std	Z+2, r25	; 0x02
   13c86:	a3 83       	std	Z+3, r26	; 0x03
   13c88:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   13c8c:	c4 5f       	subi	r28, 0xF4	; 244

    if(fclose(cfg) == EOF)
   13c8e:	de 4f       	sbci	r29, 0xFE	; 254
   13c90:	88 81       	ld	r24, Y
   13c92:	99 81       	ldd	r25, Y+1	; 0x01
   13c94:	cc 50       	subi	r28, 0x0C	; 12
   13c96:	d1 40       	sbci	r29, 0x01	; 1
   13c98:	0e 94 e0 7b 	call	0xf7c0	; 0xf7c0 <fclose>
   13c9c:	01 96       	adiw	r24, 0x01	; 1
   13c9e:	39 f4       	brne	.+14     	; 0x13cae <Read_Config+0x842>
   13ca0:	82 e7       	ldi	r24, 0x72	; 114
    {
        perror("Read_Config - close error");
   13ca2:	9e e0       	ldi	r25, 0x0E	; 14
   13ca4:	0e 94 67 77 	call	0xeece	; 0xeece <perror>
   13ca8:	2f ef       	ldi	r18, 0xFF	; 255
        ++errors;
   13caa:	e2 1a       	sub	r14, r18
   13cac:	f2 0a       	sbc	r15, r18
   13cae:	48 db       	rcall	.-2416   	; 0x13340 <Post_Config>
    }

// Post process device values
    Post_Config();
   13cb0:	c7 01       	movw	r24, r14
   13cb2:	c1 5e       	subi	r28, 0xE1	; 225

    return(errors);
   13cb4:	de 4f       	sbci	r29, 0xFE	; 254
}
   13cb6:	e2 e1       	ldi	r30, 0x12	; 18
   13cb8:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

00013cbc <format_drives>:
   13cbc:	2f 92       	push	r2
   13cbe:	3f 92       	push	r3

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   13cc0:	4f 92       	push	r4
   13cc2:	5f 92       	push	r5
   13cc4:	6f 92       	push	r6
   13cc6:	7f 92       	push	r7
   13cc8:	8f 92       	push	r8
   13cca:	af 92       	push	r10
   13ccc:	bf 92       	push	r11
   13cce:	cf 92       	push	r12
   13cd0:	df 92       	push	r13
   13cd2:	ef 92       	push	r14
   13cd4:	ff 92       	push	r15
   13cd6:	0f 93       	push	r16
   13cd8:	1f 93       	push	r17
   13cda:	cf 93       	push	r28
   13cdc:	df 93       	push	r29
   13cde:	cd b7       	in	r28, 0x3d	; 61
   13ce0:	de b7       	in	r29, 0x3e	; 62
   13ce2:	ce 56       	subi	r28, 0x6E	; 110
   13ce4:	d1 09       	sbc	r29, r1
   13ce6:	0f b6       	in	r0, 0x3f	; 63
   13ce8:	f8 94       	cli
   13cea:	de bf       	out	0x3e, r29	; 62
   13cec:	0f be       	out	0x3f, r0	; 63
   13cee:	cd bf       	out	0x3d, r28	; 61
   13cf0:	87 ef       	ldi	r24, 0xF7	; 247
   13cf2:	c8 2e       	mov	r12, r24
   13cf4:	8e e1       	ldi	r24, 0x1E	; 30
   13cf6:	d8 2e       	mov	r13, r24
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
    int amigo = 0;
   13cf8:	a0 96       	adiw	r28, 0x20	; 32
   13cfa:	1f ae       	std	Y+63, r1	; 0x3f
   13cfc:	1e ae       	std	Y+62, r1	; 0x3e
   13cfe:	a0 97       	sbiw	r28, 0x20	; 32
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
   13d00:	6e 96       	adiw	r28, 0x1e	; 30
   13d02:	1f ae       	std	Y+63, r1	; 0x3f
   13d04:	1e ae       	std	Y+62, r1	; 0x3e
   13d06:	6e 97       	sbiw	r28, 0x1e	; 30
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
   13d08:	6c 96       	adiw	r28, 0x1c	; 28
   13d0a:	1f ae       	std	Y+63, r1	; 0x3f
   13d0c:	1e ae       	std	Y+62, r1	; 0x3e
   13d0e:	6c 97       	sbiw	r28, 0x1c	; 28
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13d10:	8e e1       	ldi	r24, 0x1E	; 30
   13d12:	97 e1       	ldi	r25, 0x17	; 23
   13d14:	9c 01       	movw	r18, r24
   13d16:	40 e0       	ldi	r20, 0x00	; 0
   13d18:	a3 96       	adiw	r28, 0x23	; 35
   13d1a:	2d af       	std	Y+61, r18	; 0x3d
   13d1c:	3e af       	std	Y+62, r19	; 0x3e
   13d1e:	4f af       	std	Y+63, r20	; 0x3f
   13d20:	a3 97       	sbiw	r28, 0x23	; 35
                sprintf(label,"AMIGO%d", amigo);
   13d22:	86 e1       	ldi	r24, 0x16	; 22
   13d24:	97 e1       	ldi	r25, 0x17	; 23
   13d26:	9c 01       	movw	r18, r24
   13d28:	40 e0       	ldi	r20, 0x00	; 0
   13d2a:	a6 96       	adiw	r28, 0x26	; 38
   13d2c:	2d af       	std	Y+61, r18	; 0x3d
   13d2e:	3e af       	std	Y+62, r19	; 0x3e
   13d30:	4f af       	std	Y+63, r20	; 0x3f
   13d32:	a6 97       	sbiw	r28, 0x26	; 38
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13d34:	88 e3       	ldi	r24, 0x38	; 56
   13d36:	97 e1       	ldi	r25, 0x17	; 23
   13d38:	9c 01       	movw	r18, r24
   13d3a:	40 e0       	ldi	r20, 0x00	; 0
   13d3c:	a9 96       	adiw	r28, 0x29	; 41
   13d3e:	2d af       	std	Y+61, r18	; 0x3d
   13d40:	3e af       	std	Y+62, r19	; 0x3e
   13d42:	4f af       	std	Y+63, r20	; 0x3f
   13d44:	a9 97       	sbiw	r28, 0x29	; 41
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13d46:	82 e6       	ldi	r24, 0x62	; 98
   13d48:	97 e1       	ldi	r25, 0x17	; 23
   13d4a:	9c 01       	movw	r18, r24
   13d4c:	40 e0       	ldi	r20, 0x00	; 0
   13d4e:	ac 96       	adiw	r28, 0x2c	; 44
   13d50:	2d af       	std	Y+61, r18	; 0x3d
   13d52:	3e af       	std	Y+62, r19	; 0x3e
   13d54:	4f af       	std	Y+63, r20	; 0x3f
   13d56:	ac 97       	sbiw	r28, 0x2c	; 44
                sprintf(label,"SS80-%d", ss80);
   13d58:	8a e5       	ldi	r24, 0x5A	; 90
   13d5a:	97 e1       	ldi	r25, 0x17	; 23
   13d5c:	9c 01       	movw	r18, r24
   13d5e:	40 e0       	ldi	r20, 0x00	; 0
   13d60:	af 96       	adiw	r28, 0x2f	; 47
   13d62:	2d af       	std	Y+61, r18	; 0x3d
   13d64:	3e af       	std	Y+62, r19	; 0x3e
   13d66:	4f af       	std	Y+63, r20	; 0x3f
   13d68:	af 97       	sbiw	r28, 0x2f	; 47

            if(stat(SS80p->HEADER.NAME, &st) == -1)
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13d6a:	8c e7       	ldi	r24, 0x7C	; 124
   13d6c:	97 e1       	ldi	r25, 0x17	; 23
   13d6e:	3c 01       	movw	r6, r24
   13d70:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13d72:	f6 01       	movw	r30, r12
   13d74:	80 81       	ld	r24, Z
   13d76:	88 23       	and	r24, r24
   13d78:	09 f4       	brne	.+2      	; 0x13d7c <format_drives+0xc0>
   13d7a:	ef c0       	rjmp	.+478    	; 0x13f5a <format_drives+0x29e>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13d7c:	83 30       	cpi	r24, 0x03	; 3
   13d7e:	09 f0       	breq	.+2      	; 0x13d82 <format_drives+0xc6>
   13d80:	70 c0       	rjmp	.+224    	; 0x13e62 <format_drives+0x1a6>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13d82:	a7 a0       	ldd	r10, Z+39	; 0x27
   13d84:	b0 a4       	ldd	r11, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1)
   13d86:	be 01       	movw	r22, r28
   13d88:	66 5f       	subi	r22, 0xF6	; 246
   13d8a:	7f 4f       	sbci	r23, 0xFF	; 255
   13d8c:	f5 01       	movw	r30, r10
   13d8e:	82 81       	ldd	r24, Z+2	; 0x02
   13d90:	93 81       	ldd	r25, Z+3	; 0x03
   13d92:	0e 94 3b 78 	call	0xf076	; 0xf076 <stat>
   13d96:	01 96       	adiw	r24, 0x01	; 1
   13d98:	09 f0       	breq	.+2      	; 0x13d9c <format_drives+0xe0>
   13d9a:	63 c0       	rjmp	.+198    	; 0x13e62 <format_drives+0x1a6>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13d9c:	f5 01       	movw	r30, r10
   13d9e:	80 89       	ldd	r24, Z+16	; 0x10
   13da0:	91 89       	ldd	r25, Z+17	; 0x11
   13da2:	81 15       	cp	r24, r1
   13da4:	91 40       	sbci	r25, 0x01	; 1
   13da6:	31 f0       	breq	.+12     	; 0x13db4 <format_drives+0xf8>
                {
                    printf("Can not use non 256 byte sectors\n");
   13da8:	ed b7       	in	r30, 0x3d	; 61
   13daa:	fe b7       	in	r31, 0x3e	; 62
   13dac:	61 82       	std	Z+1, r6	; 0x01
   13dae:	72 82       	std	Z+2, r7	; 0x02
   13db0:	83 82       	std	Z+3, r8	; 0x03
   13db2:	79 c0       	rjmp	.+242    	; 0x13ea6 <format_drives+0x1ea>
                    continue;
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   13db4:	f6 01       	movw	r30, r12
   13db6:	23 80       	ldd	r2, Z+3	; 0x03
   13db8:	34 80       	ldd	r3, Z+4	; 0x04
   13dba:	45 80       	ldd	r4, Z+5	; 0x05
   13dbc:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13dbe:	ed b7       	in	r30, 0x3d	; 61
   13dc0:	fe b7       	in	r31, 0x3e	; 62
   13dc2:	26 82       	std	Z+6, r2	; 0x06
   13dc4:	37 82       	std	Z+7, r3	; 0x07
   13dc6:	40 86       	std	Z+8, r4	; 0x08
   13dc8:	51 86       	std	Z+9, r5	; 0x09
   13dca:	f5 01       	movw	r30, r10
   13dcc:	82 81       	ldd	r24, Z+2	; 0x02
   13dce:	93 81       	ldd	r25, Z+3	; 0x03
   13dd0:	ed b7       	in	r30, 0x3d	; 61
   13dd2:	fe b7       	in	r31, 0x3e	; 62
   13dd4:	95 83       	std	Z+5, r25	; 0x05
   13dd6:	84 83       	std	Z+4, r24	; 0x04
   13dd8:	ac 96       	adiw	r28, 0x2c	; 44
   13dda:	2d ad       	ldd	r18, Y+61	; 0x3d
   13ddc:	3e ad       	ldd	r19, Y+62	; 0x3e
   13dde:	4f ad       	ldd	r20, Y+63	; 0x3f
   13de0:	ac 97       	sbiw	r28, 0x2c	; 44
   13de2:	21 83       	std	Z+1, r18	; 0x01
   13de4:	32 83       	std	Z+2, r19	; 0x02
   13de6:	43 83       	std	Z+3, r20	; 0x03
   13de8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
                sprintf(label,"SS80-%d", ss80);
   13dec:	6e 96       	adiw	r28, 0x1e	; 30
   13dee:	2e ad       	ldd	r18, Y+62	; 0x3e
   13df0:	3f ad       	ldd	r19, Y+63	; 0x3f
   13df2:	6e 97       	sbiw	r28, 0x1e	; 30
   13df4:	ed b7       	in	r30, 0x3d	; 61
   13df6:	fe b7       	in	r31, 0x3e	; 62
   13df8:	37 83       	std	Z+7, r19	; 0x07
   13dfa:	26 83       	std	Z+6, r18	; 0x06
   13dfc:	af 96       	adiw	r28, 0x2f	; 47
   13dfe:	8d ad       	ldd	r24, Y+61	; 0x3d
   13e00:	9e ad       	ldd	r25, Y+62	; 0x3e
   13e02:	af ad       	ldd	r26, Y+63	; 0x3f
   13e04:	af 97       	sbiw	r28, 0x2f	; 47
   13e06:	83 83       	std	Z+3, r24	; 0x03
   13e08:	94 83       	std	Z+4, r25	; 0x04
   13e0a:	a5 83       	std	Z+5, r26	; 0x05
   13e0c:	2a e3       	ldi	r18, 0x3A	; 58
   13e0e:	30 e0       	ldi	r19, 0x00	; 0
   13e10:	2c 0f       	add	r18, r28
   13e12:	3d 1f       	adc	r19, r29
   13e14:	32 83       	std	Z+2, r19	; 0x02
   13e16:	21 83       	std	Z+1, r18	; 0x01
   13e18:	0e 94 fa 44 	call	0x89f4	; 0x89f4 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13e1c:	f5 01       	movw	r30, r10
   13e1e:	a2 80       	ldd	r10, Z+2	; 0x02
   13e20:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13e22:	c2 01       	movw	r24, r4
   13e24:	b1 01       	movw	r22, r2
   13e26:	15 d2       	rcall	.+1066   	; 0x14252 <lif_dir_count>
   13e28:	9b 01       	movw	r18, r22
   13e2a:	ac 01       	movw	r20, r24
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13e2c:	82 01       	movw	r16, r4
   13e2e:	71 01       	movw	r14, r2
   13e30:	be 01       	movw	r22, r28
   13e32:	66 5c       	subi	r22, 0xC6	; 198
   13e34:	7f 4f       	sbci	r23, 0xFF	; 255
   13e36:	c5 01       	movw	r24, r10
   13e38:	0e 94 9d db 	call	0x1b73a	; 0x1b73a <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif
                ++count;
   13e3c:	6c 96       	adiw	r28, 0x1c	; 28
   13e3e:	2e ad       	ldd	r18, Y+62	; 0x3e
   13e40:	3f ad       	ldd	r19, Y+63	; 0x3f
   13e42:	6c 97       	sbiw	r28, 0x1c	; 28
   13e44:	2f 5f       	subi	r18, 0xFF	; 255
   13e46:	3f 4f       	sbci	r19, 0xFF	; 255
   13e48:	6c 96       	adiw	r28, 0x1c	; 28
   13e4a:	3f af       	std	Y+63, r19	; 0x3f
   13e4c:	2e af       	std	Y+62, r18	; 0x3e
   13e4e:	6c 97       	sbiw	r28, 0x1c	; 28
                ++ss80;
   13e50:	6e 96       	adiw	r28, 0x1e	; 30
   13e52:	8e ad       	ldd	r24, Y+62	; 0x3e
   13e54:	9f ad       	ldd	r25, Y+63	; 0x3f
   13e56:	6e 97       	sbiw	r28, 0x1e	; 30
   13e58:	01 96       	adiw	r24, 0x01	; 1
   13e5a:	6e 96       	adiw	r28, 0x1e	; 30
   13e5c:	9f af       	std	Y+63, r25	; 0x3f
   13e5e:	8e af       	std	Y+62, r24	; 0x3e
   13e60:	6e 97       	sbiw	r28, 0x1e	; 30

            }
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13e62:	f6 01       	movw	r30, r12
   13e64:	80 81       	ld	r24, Z
   13e66:	81 30       	cpi	r24, 0x01	; 1
   13e68:	09 f0       	breq	.+2      	; 0x13e6c <format_drives+0x1b0>
   13e6a:	77 c0       	rjmp	.+238    	; 0x13f5a <format_drives+0x29e>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   13e6c:	a7 a0       	ldd	r10, Z+39	; 0x27
   13e6e:	b0 a4       	ldd	r11, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
   13e70:	be 01       	movw	r22, r28
   13e72:	66 5f       	subi	r22, 0xF6	; 246
   13e74:	7f 4f       	sbci	r23, 0xFF	; 255
   13e76:	f5 01       	movw	r30, r10
   13e78:	82 81       	ldd	r24, Z+2	; 0x02
   13e7a:	93 81       	ldd	r25, Z+3	; 0x03
   13e7c:	0e 94 3b 78 	call	0xf076	; 0xf076 <stat>
   13e80:	01 96       	adiw	r24, 0x01	; 1
   13e82:	09 f0       	breq	.+2      	; 0x13e86 <format_drives+0x1ca>
   13e84:	6a c0       	rjmp	.+212    	; 0x13f5a <format_drives+0x29e>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13e86:	f5 01       	movw	r30, r10
   13e88:	86 81       	ldd	r24, Z+6	; 0x06
   13e8a:	97 81       	ldd	r25, Z+7	; 0x07
   13e8c:	81 15       	cp	r24, r1
   13e8e:	91 40       	sbci	r25, 0x01	; 1
   13e90:	69 f0       	breq	.+26     	; 0x13eac <format_drives+0x1f0>
                {
                    printf("Can not use non 256 byte sectors\n");
   13e92:	a9 96       	adiw	r28, 0x29	; 41
   13e94:	2d ad       	ldd	r18, Y+61	; 0x3d
   13e96:	3e ad       	ldd	r19, Y+62	; 0x3e
   13e98:	4f ad       	ldd	r20, Y+63	; 0x3f
   13e9a:	a9 97       	sbiw	r28, 0x29	; 41
   13e9c:	ed b7       	in	r30, 0x3d	; 61
   13e9e:	fe b7       	in	r31, 0x3e	; 62
   13ea0:	21 83       	std	Z+1, r18	; 0x01
   13ea2:	32 83       	std	Z+2, r19	; 0x02
   13ea4:	43 83       	std	Z+3, r20	; 0x03
   13ea6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
                    continue;
   13eaa:	57 c0       	rjmp	.+174    	; 0x13f5a <format_drives+0x29e>
                }
                sectors = Devices[i].BLOCKS;
   13eac:	f6 01       	movw	r30, r12
   13eae:	23 80       	ldd	r2, Z+3	; 0x03
   13eb0:	34 80       	ldd	r3, Z+4	; 0x04
   13eb2:	45 80       	ldd	r4, Z+5	; 0x05
   13eb4:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13eb6:	ed b7       	in	r30, 0x3d	; 61
   13eb8:	fe b7       	in	r31, 0x3e	; 62
   13eba:	26 82       	std	Z+6, r2	; 0x06
   13ebc:	37 82       	std	Z+7, r3	; 0x07
   13ebe:	40 86       	std	Z+8, r4	; 0x08
   13ec0:	51 86       	std	Z+9, r5	; 0x09
   13ec2:	f5 01       	movw	r30, r10
   13ec4:	82 81       	ldd	r24, Z+2	; 0x02
   13ec6:	93 81       	ldd	r25, Z+3	; 0x03
   13ec8:	ed b7       	in	r30, 0x3d	; 61
   13eca:	fe b7       	in	r31, 0x3e	; 62
   13ecc:	95 83       	std	Z+5, r25	; 0x05
   13ece:	84 83       	std	Z+4, r24	; 0x04
   13ed0:	a3 96       	adiw	r28, 0x23	; 35
   13ed2:	2d ad       	ldd	r18, Y+61	; 0x3d
   13ed4:	3e ad       	ldd	r19, Y+62	; 0x3e
   13ed6:	4f ad       	ldd	r20, Y+63	; 0x3f
   13ed8:	a3 97       	sbiw	r28, 0x23	; 35
   13eda:	21 83       	std	Z+1, r18	; 0x01
   13edc:	32 83       	std	Z+2, r19	; 0x02
   13ede:	43 83       	std	Z+3, r20	; 0x03
   13ee0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
                sprintf(label,"AMIGO%d", amigo);
   13ee4:	a0 96       	adiw	r28, 0x20	; 32
   13ee6:	2e ad       	ldd	r18, Y+62	; 0x3e
   13ee8:	3f ad       	ldd	r19, Y+63	; 0x3f
   13eea:	a0 97       	sbiw	r28, 0x20	; 32
   13eec:	ed b7       	in	r30, 0x3d	; 61
   13eee:	fe b7       	in	r31, 0x3e	; 62
   13ef0:	37 83       	std	Z+7, r19	; 0x07
   13ef2:	26 83       	std	Z+6, r18	; 0x06
   13ef4:	a6 96       	adiw	r28, 0x26	; 38
   13ef6:	8d ad       	ldd	r24, Y+61	; 0x3d
   13ef8:	9e ad       	ldd	r25, Y+62	; 0x3e
   13efa:	af ad       	ldd	r26, Y+63	; 0x3f
   13efc:	a6 97       	sbiw	r28, 0x26	; 38
   13efe:	83 83       	std	Z+3, r24	; 0x03
   13f00:	94 83       	std	Z+4, r25	; 0x04
   13f02:	a5 83       	std	Z+5, r26	; 0x05
   13f04:	2a e3       	ldi	r18, 0x3A	; 58
   13f06:	30 e0       	ldi	r19, 0x00	; 0
   13f08:	2c 0f       	add	r18, r28
   13f0a:	3d 1f       	adc	r19, r29
   13f0c:	32 83       	std	Z+2, r19	; 0x02
   13f0e:	21 83       	std	Z+1, r18	; 0x01
   13f10:	0e 94 fa 44 	call	0x89f4	; 0x89f4 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13f14:	f5 01       	movw	r30, r10
   13f16:	a2 80       	ldd	r10, Z+2	; 0x02
   13f18:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13f1a:	c2 01       	movw	r24, r4
   13f1c:	b1 01       	movw	r22, r2
   13f1e:	99 d1       	rcall	.+818    	; 0x14252 <lif_dir_count>
   13f20:	9b 01       	movw	r18, r22
   13f22:	ac 01       	movw	r20, r24
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13f24:	82 01       	movw	r16, r4
   13f26:	71 01       	movw	r14, r2
   13f28:	be 01       	movw	r22, r28
   13f2a:	66 5c       	subi	r22, 0xC6	; 198
   13f2c:	7f 4f       	sbci	r23, 0xFF	; 255
   13f2e:	c5 01       	movw	r24, r10
   13f30:	0e 94 9d db 	call	0x1b73a	; 0x1b73a <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
                ++count;
   13f34:	6c 96       	adiw	r28, 0x1c	; 28
   13f36:	2e ad       	ldd	r18, Y+62	; 0x3e
   13f38:	3f ad       	ldd	r19, Y+63	; 0x3f
   13f3a:	6c 97       	sbiw	r28, 0x1c	; 28
   13f3c:	2f 5f       	subi	r18, 0xFF	; 255
   13f3e:	3f 4f       	sbci	r19, 0xFF	; 255
   13f40:	6c 96       	adiw	r28, 0x1c	; 28
   13f42:	3f af       	std	Y+63, r19	; 0x3f
   13f44:	2e af       	std	Y+62, r18	; 0x3e
   13f46:	6c 97       	sbiw	r28, 0x1c	; 28
                ++amigo;
   13f48:	a0 96       	adiw	r28, 0x20	; 32
   13f4a:	8e ad       	ldd	r24, Y+62	; 0x3e
   13f4c:	9f ad       	ldd	r25, Y+63	; 0x3f
   13f4e:	a0 97       	sbiw	r28, 0x20	; 32
   13f50:	01 96       	adiw	r24, 0x01	; 1
   13f52:	a0 96       	adiw	r28, 0x20	; 32
   13f54:	9f af       	std	Y+63, r25	; 0x3f
   13f56:	8e af       	std	Y+62, r24	; 0x3e
   13f58:	a0 97       	sbiw	r28, 0x20	; 32
   13f5a:	9b e2       	ldi	r25, 0x2B	; 43
   13f5c:	c9 0e       	add	r12, r25
   13f5e:	d1 1c       	adc	r13, r1
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13f60:	ab ef       	ldi	r26, 0xFB	; 251
   13f62:	ca 16       	cp	r12, r26
   13f64:	a0 e2       	ldi	r26, 0x20	; 32
   13f66:	da 06       	cpc	r13, r26
   13f68:	09 f0       	breq	.+2      	; 0x13f6c <format_drives+0x2b0>
   13f6a:	03 cf       	rjmp	.-506    	; 0x13d72 <format_drives+0xb6>
                ++amigo;
            }
        }
#endif                                    // #ifdef AMIGO
    }
    if(count)
   13f6c:	6c 96       	adiw	r28, 0x1c	; 28
   13f6e:	ee ad       	ldd	r30, Y+62	; 0x3e
   13f70:	ff ad       	ldd	r31, Y+63	; 0x3f
   13f72:	6c 97       	sbiw	r28, 0x1c	; 28
   13f74:	ef 2b       	or	r30, r31
   13f76:	11 f0       	breq	.+4      	; 0x13f7c <format_drives+0x2c0>
        sep();
   13f78:	0e 94 1d 30 	call	0x603a	; 0x603a <sep>
}
   13f7c:	c2 59       	subi	r28, 0x92	; 146
   13f7e:	df 4f       	sbci	r29, 0xFF	; 255
   13f80:	0f b6       	in	r0, 0x3f	; 63
   13f82:	f8 94       	cli
   13f84:	de bf       	out	0x3e, r29	; 62
   13f86:	0f be       	out	0x3f, r0	; 63
   13f88:	cd bf       	out	0x3d, r28	; 61
   13f8a:	df 91       	pop	r29
   13f8c:	cf 91       	pop	r28
   13f8e:	1f 91       	pop	r17
   13f90:	0f 91       	pop	r16
   13f92:	ff 90       	pop	r15
   13f94:	ef 90       	pop	r14
   13f96:	df 90       	pop	r13
   13f98:	cf 90       	pop	r12
   13f9a:	bf 90       	pop	r11
   13f9c:	af 90       	pop	r10
   13f9e:	8f 90       	pop	r8
   13fa0:	7f 90       	pop	r7
   13fa2:	6f 90       	pop	r6
   13fa4:	5f 90       	pop	r5
   13fa6:	4f 90       	pop	r4
   13fa8:	3f 90       	pop	r3
   13faa:	2f 90       	pop	r2
   13fac:	08 95       	ret

00013fae <display_mounts>:
	}
	display_mounts();
}

void display_mounts( )
{
   13fae:	2f 92       	push	r2
   13fb0:	3f 92       	push	r3
   13fb2:	4f 92       	push	r4
   13fb4:	6f 92       	push	r6
   13fb6:	7f 92       	push	r7
   13fb8:	8f 92       	push	r8
   13fba:	cf 92       	push	r12
   13fbc:	df 92       	push	r13
   13fbe:	ef 92       	push	r14
   13fc0:	0f 93       	push	r16
   13fc2:	1f 93       	push	r17
   13fc4:	cf 93       	push	r28
   13fc6:	df 93       	push	r29
   13fc8:	ad b7       	in	r26, 0x3d	; 61
   13fca:	be b7       	in	r27, 0x3e	; 62
   13fcc:	19 97       	sbiw	r26, 0x09	; 9
   13fce:	0f b6       	in	r0, 0x3f	; 63
   13fd0:	f8 94       	cli
   13fd2:	be bf       	out	0x3e, r27	; 62
   13fd4:	0f be       	out	0x3f, r0	; 63
   13fd6:	ad bf       	out	0x3d, r26	; 61
   13fd8:	c7 ef       	ldi	r28, 0xF7	; 247
   13fda:	de e1       	ldi	r29, 0x1E	; 30
#endif                                    // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
   13fdc:	0c e8       	ldi	r16, 0x8C	; 140
   13fde:	1e e0       	ldi	r17, 0x0E	; 14
   13fe0:	8e ec       	ldi	r24, 0xCE	; 206
   13fe2:	96 e1       	ldi	r25, 0x16	; 22
   13fe4:	6c 01       	movw	r12, r24
   13fe6:	e1 2c       	mov	r14, r1

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            printf("%-16s AMIGO %2d %s\n", Devices[i].model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   13fe8:	8f ed       	ldi	r24, 0xDF	; 223
   13fea:	96 e1       	ldi	r25, 0x16	; 22
   13fec:	3c 01       	movw	r6, r24
   13fee:	81 2c       	mov	r8, r1

        if(Devices[i].TYPE == SS80_TYPE)
        {
            SS80p= (SS80DiskType *)Devices[i].dev;

            printf("%-16s SS80  %2d %s\n", Devices[i].model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   13ff0:	83 ef       	ldi	r24, 0xF3	; 243
   13ff2:	96 e1       	ldi	r25, 0x16	; 22
   13ff4:	1c 01       	movw	r2, r24
   13ff6:	41 2c       	mov	r4, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13ff8:	88 81       	ld	r24, Y
   13ffa:	88 23       	and	r24, r24
   13ffc:	09 f4       	brne	.+2      	; 0x14000 <display_mounts+0x52>
   13ffe:	43 c0       	rjmp	.+134    	; 0x14086 <display_mounts+0xd8>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   14000:	83 30       	cpi	r24, 0x03	; 3
   14002:	b1 f4       	brne	.+44     	; 0x14030 <display_mounts+0x82>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   14004:	af a1       	ldd	r26, Y+39	; 0x27
   14006:	b8 a5       	ldd	r27, Y+40	; 0x28

            printf("%-16s SS80  %2d %s\n", Devices[i].model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   14008:	fd 01       	movw	r30, r26
   1400a:	82 81       	ldd	r24, Z+2	; 0x02
   1400c:	93 81       	ldd	r25, Z+3	; 0x03
   1400e:	ed b7       	in	r30, 0x3d	; 61
   14010:	fe b7       	in	r31, 0x3e	; 62
   14012:	91 87       	std	Z+9, r25	; 0x09
   14014:	80 87       	std	Z+8, r24	; 0x08
   14016:	8c 91       	ld	r24, X
   14018:	90 e0       	ldi	r25, 0x00	; 0
   1401a:	97 83       	std	Z+7, r25	; 0x07
   1401c:	86 83       	std	Z+6, r24	; 0x06
   1401e:	ce 01       	movw	r24, r28
   14020:	07 96       	adiw	r24, 0x07	; 7
   14022:	95 83       	std	Z+5, r25	; 0x05
   14024:	84 83       	std	Z+4, r24	; 0x04
   14026:	21 82       	std	Z+1, r2	; 0x01
   14028:	32 82       	std	Z+2, r3	; 0x02
   1402a:	43 82       	std	Z+3, r4	; 0x03
   1402c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
		}

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   14030:	88 81       	ld	r24, Y
   14032:	81 30       	cpi	r24, 0x01	; 1
   14034:	b1 f4       	brne	.+44     	; 0x14062 <display_mounts+0xb4>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   14036:	af a1       	ldd	r26, Y+39	; 0x27
   14038:	b8 a5       	ldd	r27, Y+40	; 0x28
            printf("%-16s AMIGO %2d %s\n", Devices[i].model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   1403a:	fd 01       	movw	r30, r26
   1403c:	82 81       	ldd	r24, Z+2	; 0x02
   1403e:	93 81       	ldd	r25, Z+3	; 0x03
   14040:	ed b7       	in	r30, 0x3d	; 61
   14042:	fe b7       	in	r31, 0x3e	; 62
   14044:	91 87       	std	Z+9, r25	; 0x09
   14046:	80 87       	std	Z+8, r24	; 0x08
   14048:	8c 91       	ld	r24, X
   1404a:	90 e0       	ldi	r25, 0x00	; 0
   1404c:	97 83       	std	Z+7, r25	; 0x07
   1404e:	86 83       	std	Z+6, r24	; 0x06
   14050:	ce 01       	movw	r24, r28
   14052:	07 96       	adiw	r24, 0x07	; 7
   14054:	95 83       	std	Z+5, r25	; 0x05
   14056:	84 83       	std	Z+4, r24	; 0x04
   14058:	61 82       	std	Z+1, r6	; 0x01
   1405a:	72 82       	std	Z+2, r7	; 0x02
   1405c:	83 82       	std	Z+3, r8	; 0x03
   1405e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        }
#endif                                    // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   14062:	88 81       	ld	r24, Y
   14064:	84 30       	cpi	r24, 0x04	; 4
   14066:	79 f4       	brne	.+30     	; 0x14086 <display_mounts+0xd8>
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
   14068:	ef a1       	ldd	r30, Y+39	; 0x27
   1406a:	f8 a5       	ldd	r31, Y+40	; 0x28
   1406c:	80 81       	ld	r24, Z
   1406e:	90 e0       	ldi	r25, 0x00	; 0
   14070:	ed b7       	in	r30, 0x3d	; 61
   14072:	fe b7       	in	r31, 0x3e	; 62
   14074:	97 83       	std	Z+7, r25	; 0x07
   14076:	86 83       	std	Z+6, r24	; 0x06
   14078:	15 83       	std	Z+5, r17	; 0x05
   1407a:	04 83       	std	Z+4, r16	; 0x04
   1407c:	c1 82       	std	Z+1, r12	; 0x01
   1407e:	d2 82       	std	Z+2, r13	; 0x02
   14080:	e3 82       	std	Z+3, r14	; 0x03
   14082:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14086:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   14088:	f0 e2       	ldi	r31, 0x20	; 32
   1408a:	cb 3f       	cpi	r28, 0xFB	; 251
   1408c:	df 07       	cpc	r29, r31
   1408e:	09 f0       	breq	.+2      	; 0x14092 <display_mounts+0xe4>
   14090:	b3 cf       	rjmp	.-154    	; 0x13ff8 <display_mounts+0x4a>
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
		}
    }
    printf("\n");
   14092:	8c ec       	ldi	r24, 0xCC	; 204
   14094:	96 e1       	ldi	r25, 0x16	; 22
   14096:	a0 e0       	ldi	r26, 0x00	; 0
   14098:	ed b7       	in	r30, 0x3d	; 61
   1409a:	fe b7       	in	r31, 0x3e	; 62
   1409c:	81 83       	std	Z+1, r24	; 0x01
   1409e:	92 83       	std	Z+2, r25	; 0x02
   140a0:	a3 83       	std	Z+3, r26	; 0x03
   140a2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
}
   140a6:	ad b7       	in	r26, 0x3d	; 61
   140a8:	be b7       	in	r27, 0x3e	; 62
   140aa:	19 96       	adiw	r26, 0x09	; 9
   140ac:	0f b6       	in	r0, 0x3f	; 63
   140ae:	f8 94       	cli
   140b0:	be bf       	out	0x3e, r27	; 62
   140b2:	0f be       	out	0x3f, r0	; 63
   140b4:	ad bf       	out	0x3d, r26	; 61
   140b6:	df 91       	pop	r29
   140b8:	cf 91       	pop	r28
   140ba:	1f 91       	pop	r17
   140bc:	0f 91       	pop	r16
   140be:	ef 90       	pop	r14
   140c0:	df 90       	pop	r13
   140c2:	cf 90       	pop	r12
   140c4:	8f 90       	pop	r8
   140c6:	7f 90       	pop	r7
   140c8:	6f 90       	pop	r6
   140ca:	4f 90       	pop	r4
   140cc:	3f 90       	pop	r3
   140ce:	2f 90       	pop	r2
   140d0:	08 95       	ret

000140d2 <mount>:

/// ===============================================
/// @brief mount disks - testing
/// @return  void
void mount(int argc, char *argv[])
{
   140d2:	af 92       	push	r10
   140d4:	bf 92       	push	r11
   140d6:	cf 92       	push	r12
   140d8:	df 92       	push	r13
   140da:	ef 92       	push	r14
   140dc:	0f 93       	push	r16
   140de:	1f 93       	push	r17
   140e0:	cf 93       	push	r28
   140e2:	df 93       	push	r29
   140e4:	ad b7       	in	r26, 0x3d	; 61
   140e6:	be b7       	in	r27, 0x3e	; 62
   140e8:	17 97       	sbiw	r26, 0x07	; 7
   140ea:	0f b6       	in	r0, 0x3f	; 63
   140ec:	f8 94       	cli
   140ee:	be bf       	out	0x3e, r27	; 62
   140f0:	0f be       	out	0x3f, r0	; 63
   140f2:	ad bf       	out	0x3d, r26	; 61
   140f4:	5c 01       	movw	r10, r24
   140f6:	8b 01       	movw	r16, r22
   140f8:	0e 5f       	subi	r16, 0xFE	; 254
   140fa:	1f 4f       	sbci	r17, 0xFF	; 255
	int i;
	for(i = 1;i< argc;++i)
   140fc:	c1 e0       	ldi	r28, 0x01	; 1
   140fe:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);
   14100:	87 e0       	ldi	r24, 0x07	; 7
   14102:	97 e1       	ldi	r25, 0x17	; 23
   14104:	6c 01       	movw	r12, r24
   14106:	e1 2c       	mov	r14, r1
/// @brief mount disks - testing
/// @return  void
void mount(int argc, char *argv[])
{
	int i;
	for(i = 1;i< argc;++i)
   14108:	ca 15       	cp	r28, r10
   1410a:	db 05       	cpc	r29, r11
   1410c:	8c f4       	brge	.+34     	; 0x14130 <mount+0x5e>
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);
   1410e:	f8 01       	movw	r30, r16
   14110:	81 91       	ld	r24, Z+
   14112:	91 91       	ld	r25, Z+
   14114:	8f 01       	movw	r16, r30
   14116:	ed b7       	in	r30, 0x3d	; 61
   14118:	fe b7       	in	r31, 0x3e	; 62
   1411a:	97 83       	std	Z+7, r25	; 0x07
   1411c:	86 83       	std	Z+6, r24	; 0x06
   1411e:	d5 83       	std	Z+5, r29	; 0x05
   14120:	c4 83       	std	Z+4, r28	; 0x04
   14122:	c1 82       	std	Z+1, r12	; 0x01
   14124:	d2 82       	std	Z+2, r13	; 0x02
   14126:	e3 82       	std	Z+3, r14	; 0x03
   14128:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
/// @brief mount disks - testing
/// @return  void
void mount(int argc, char *argv[])
{
	int i;
	for(i = 1;i< argc;++i)
   1412c:	21 96       	adiw	r28, 0x01	; 1
   1412e:	ec cf       	rjmp	.-40     	; 0x14108 <mount+0x36>
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);

	}
	display_mounts();
   14130:	3e df       	rcall	.-388    	; 0x13fae <display_mounts>
}
   14132:	ad b7       	in	r26, 0x3d	; 61
   14134:	be b7       	in	r27, 0x3e	; 62
   14136:	17 96       	adiw	r26, 0x07	; 7
   14138:	0f b6       	in	r0, 0x3f	; 63
   1413a:	f8 94       	cli
   1413c:	be bf       	out	0x3e, r27	; 62
   1413e:	0f be       	out	0x3f, r0	; 63
   14140:	ad bf       	out	0x3d, r26	; 61
   14142:	df 91       	pop	r29
   14144:	cf 91       	pop	r28
   14146:	1f 91       	pop	r17
   14148:	0f 91       	pop	r16
   1414a:	ef 90       	pop	r14
   1414c:	df 90       	pop	r13
   1414e:	cf 90       	pop	r12
   14150:	bf 90       	pop	r11
   14152:	af 90       	pop	r10
   14154:	08 95       	ret

00014156 <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   14156:	8f e1       	ldi	r24, 0x1F	; 31
   14158:	eb ef       	ldi	r30, 0xFB	; 251
   1415a:	f0 e2       	ldi	r31, 0x20	; 32
   1415c:	df 01       	movw	r26, r30
   1415e:	98 2f       	mov	r25, r24
   14160:	1d 92       	st	X+, r1
   14162:	9a 95       	dec	r25
   14164:	e9 f7       	brne	.-6      	; 0x14160 <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   14166:	9f e3       	ldi	r25, 0x3F	; 63
   14168:	eb e1       	ldi	r30, 0x1B	; 27
   1416a:	f1 e2       	ldi	r31, 0x21	; 33
   1416c:	df 01       	movw	r26, r30
   1416e:	1d 92       	st	X+, r1
   14170:	9a 95       	dec	r25
   14172:	e9 f7       	brne	.-6      	; 0x1416e <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   14174:	eb e5       	ldi	r30, 0x5B	; 91
   14176:	f1 e2       	ldi	r31, 0x21	; 33
   14178:	df 01       	movw	r26, r30
   1417a:	1d 92       	st	X+, r1
   1417c:	8a 95       	dec	r24
   1417e:	e9 f7       	brne	.-6      	; 0x1417a <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   14180:	10 92 7b 21 	sts	0x217B, r1	; 0x80217b <hpdir+0x80>
   14184:	10 92 7c 21 	sts	0x217C, r1	; 0x80217c <hpdir+0x81>
   14188:	10 92 7d 21 	sts	0x217D, r1	; 0x80217d <hpdir+0x82>
   1418c:	10 92 7e 21 	sts	0x217E, r1	; 0x80217e <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   14190:	10 92 7f 21 	sts	0x217F, r1	; 0x80217f <hpdir+0x84>
   14194:	10 92 80 21 	sts	0x2180, r1	; 0x802180 <hpdir+0x85>
   14198:	10 92 81 21 	sts	0x2181, r1	; 0x802181 <hpdir+0x86>
   1419c:	10 92 82 21 	sts	0x2182, r1	; 0x802182 <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   141a0:	10 92 83 21 	sts	0x2183, r1	; 0x802183 <hpdir+0x88>
   141a4:	10 92 84 21 	sts	0x2184, r1	; 0x802184 <hpdir+0x89>
   141a8:	10 92 85 21 	sts	0x2185, r1	; 0x802185 <hpdir+0x8a>
   141ac:	10 92 86 21 	sts	0x2186, r1	; 0x802186 <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   141b0:	10 92 87 21 	sts	0x2187, r1	; 0x802187 <hpdir+0x8c>
   141b4:	10 92 88 21 	sts	0x2188, r1	; 0x802188 <hpdir+0x8d>
   141b8:	10 92 89 21 	sts	0x2189, r1	; 0x802189 <hpdir+0x8e>
   141bc:	10 92 8a 21 	sts	0x218A, r1	; 0x80218a <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   141c0:	81 e0       	ldi	r24, 0x01	; 1
   141c2:	90 e8       	ldi	r25, 0x80	; 128
   141c4:	a0 e0       	ldi	r26, 0x00	; 0
   141c6:	b0 e0       	ldi	r27, 0x00	; 0
   141c8:	80 93 8b 21 	sts	0x218B, r24	; 0x80218b <hpdir+0x90>
   141cc:	90 93 8c 21 	sts	0x218C, r25	; 0x80218c <hpdir+0x91>
   141d0:	a0 93 8d 21 	sts	0x218D, r26	; 0x80218d <hpdir+0x92>
   141d4:	b0 93 8e 21 	sts	0x218E, r27	; 0x80218e <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   141d8:	10 92 8f 21 	sts	0x218F, r1	; 0x80218f <hpdir+0x94>
   141dc:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <hpdir+0x95>
   141e0:	10 92 91 21 	sts	0x2191, r1	; 0x802191 <hpdir+0x96>
   141e4:	10 92 92 21 	sts	0x2192, r1	; 0x802192 <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   141e8:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <hpdir+0x98>
   141ec:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <hpdir+0x99>
   141f0:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <hpdir+0x9a>
   141f4:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   141f8:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <hpdir+0x9c>
   141fc:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <hpdir+0x9d>
   14200:	10 92 99 21 	sts	0x2199, r1	; 0x802199 <hpdir+0x9e>
   14204:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   14208:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <hpdir+0xa0>
   1420c:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <hpdir+0xa1>
   14210:	10 92 9d 21 	sts	0x219D, r1	; 0x80219d <hpdir+0xa2>
   14214:	10 92 9e 21 	sts	0x219E, r1	; 0x80219e <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   14218:	10 92 9f 21 	sts	0x219F, r1	; 0x80219f <hpdir+0xa4>
   1421c:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <hpdir+0xa5>
   14220:	10 92 a1 21 	sts	0x21A1, r1	; 0x8021a1 <hpdir+0xa6>
   14224:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   14228:	81 e0       	ldi	r24, 0x01	; 1
   1422a:	90 e0       	ldi	r25, 0x00	; 0
   1422c:	a0 e0       	ldi	r26, 0x00	; 0
   1422e:	b0 e0       	ldi	r27, 0x00	; 0
   14230:	80 93 a3 21 	sts	0x21A3, r24	; 0x8021a3 <hpdir+0xa8>
   14234:	90 93 a4 21 	sts	0x21A4, r25	; 0x8021a4 <hpdir+0xa9>
   14238:	a0 93 a5 21 	sts	0x21A5, r26	; 0x8021a5 <hpdir+0xaa>
   1423c:	b0 93 a6 21 	sts	0x21A6, r27	; 0x8021a6 <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   14240:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <hpdir+0xac>
   14244:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <hpdir+0xad>
   14248:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <hpdir+0xae>
   1424c:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <hpdir+0xaf>
   14250:	08 95       	ret

00014252 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   14252:	20 e0       	ldi	r18, 0x00	; 0
   14254:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   14256:	61 15       	cp	r22, r1
   14258:	71 05       	cpc	r23, r1
   1425a:	81 05       	cpc	r24, r1
   1425c:	91 05       	cpc	r25, r1
   1425e:	39 f0       	breq	.+14     	; 0x1426e <lif_dir_count+0x1c>
    {
        scale++;
   14260:	2f 5f       	subi	r18, 0xFF	; 255
   14262:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   14264:	95 95       	asr	r25
   14266:	87 95       	ror	r24
   14268:	77 95       	ror	r23
   1426a:	67 95       	ror	r22
   1426c:	f4 cf       	rjmp	.-24     	; 0x14256 <lif_dir_count+0x4>
    }
    scale>>=1;
   1426e:	35 95       	asr	r19
   14270:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   14272:	61 e0       	ldi	r22, 0x01	; 1
   14274:	70 e0       	ldi	r23, 0x00	; 0
   14276:	80 e0       	ldi	r24, 0x00	; 0
   14278:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   1427a:	21 50       	subi	r18, 0x01	; 1
   1427c:	31 09       	sbc	r19, r1
   1427e:	28 f0       	brcs	.+10     	; 0x1428a <lif_dir_count+0x38>
        num <<=1;
   14280:	66 0f       	add	r22, r22
   14282:	77 1f       	adc	r23, r23
   14284:	88 1f       	adc	r24, r24
   14286:	99 1f       	adc	r25, r25
   14288:	f8 cf       	rjmp	.-16     	; 0x1427a <lif_dir_count+0x28>
    return(num);
}
   1428a:	08 95       	ret

0001428c <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   1428c:	2f 92       	push	r2
   1428e:	3f 92       	push	r3
   14290:	4f 92       	push	r4
   14292:	5f 92       	push	r5
   14294:	6f 92       	push	r6
   14296:	8f 92       	push	r8
   14298:	9f 92       	push	r9
   1429a:	af 92       	push	r10
   1429c:	bf 92       	push	r11
   1429e:	cf 92       	push	r12
   142a0:	df 92       	push	r13
   142a2:	ef 92       	push	r14
   142a4:	ff 92       	push	r15
   142a6:	0f 93       	push	r16
   142a8:	1f 93       	push	r17
   142aa:	cf 93       	push	r28
   142ac:	df 93       	push	r29
   142ae:	cd b7       	in	r28, 0x3d	; 61
   142b0:	de b7       	in	r29, 0x3e	; 62
   142b2:	c9 58       	subi	r28, 0x89	; 137
   142b4:	d1 40       	sbci	r29, 0x01	; 1
   142b6:	0f b6       	in	r0, 0x3f	; 63
   142b8:	f8 94       	cli
   142ba:	de bf       	out	0x3e, r29	; 62
   142bc:	0f be       	out	0x3f, r0	; 63
   142be:	cd bf       	out	0x3d, r28	; 61
   142c0:	6c 01       	movw	r12, r24
   142c2:	c8 57       	subi	r28, 0x78	; 120
   142c4:	de 4f       	sbci	r29, 0xFE	; 254
   142c6:	79 83       	std	Y+1, r23	; 0x01
   142c8:	68 83       	st	Y, r22
   142ca:	c8 58       	subi	r28, 0x88	; 136
   142cc:	d1 40       	sbci	r29, 0x01	; 1
   142ce:	5a 01       	movw	r10, r20
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   142d0:	42 df       	rcall	.-380    	; 0x14156 <hpdir_init>

    cfg = fopen("hpdir.ini","rb");
   142d2:	6e ef       	ldi	r22, 0xFE	; 254
   142d4:	78 e0       	ldi	r23, 0x08	; 8
   142d6:	83 e6       	ldi	r24, 0x63	; 99
   142d8:	90 e1       	ldi	r25, 0x10	; 16
   142da:	0e 94 36 7d 	call	0xfa6c	; 0xfa6c <fopen>
   142de:	7c 01       	movw	r14, r24

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   142e0:	89 2b       	or	r24, r25
   142e2:	49 f4       	brne	.+18     	; 0x142f6 <hpdir_find_drive+0x6a>
        cfg = fopen("/hpdir.ini","rb");
   142e4:	6e ef       	ldi	r22, 0xFE	; 254
   142e6:	78 e0       	ldi	r23, 0x08	; 8
   142e8:	82 e6       	ldi	r24, 0x62	; 98
   142ea:	90 e1       	ldi	r25, 0x10	; 16
   142ec:	0e 94 36 7d 	call	0xfa6c	; 0xfa6c <fopen>
   142f0:	7c 01       	movw	r14, r24
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   142f2:	89 2b       	or	r24, r25
   142f4:	51 f0       	breq	.+20     	; 0x1430a <hpdir_find_drive+0x7e>
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   142f6:	21 2c       	mov	r2, r1
   142f8:	31 2c       	mov	r3, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   142fa:	8e 01       	movw	r16, r28
   142fc:	08 5f       	subi	r16, 0xF8	; 248
   142fe:	1e 4f       	sbci	r17, 0xFE	; 254
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   14300:	84 ec       	ldi	r24, 0xC4	; 196
   14302:	9d e1       	ldi	r25, 0x1D	; 29
   14304:	2c 01       	movw	r4, r24
   14306:	61 2c       	mov	r6, r1
   14308:	1e c0       	rjmp	.+60     	; 0x14346 <hpdir_find_drive+0xba>
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   1430a:	ab 28       	or	r10, r11
   1430c:	09 f4       	brne	.+2      	; 0x14310 <hpdir_find_drive+0x84>
   1430e:	69 c1       	rjmp	.+722    	; 0x145e2 <hpdir_find_drive+0x356>
            printf("Error: hpdir.ini not found!\n");
   14310:	8b ec       	ldi	r24, 0xCB	; 203
   14312:	9d e1       	ldi	r25, 0x1D	; 29
   14314:	a0 e0       	ldi	r26, 0x00	; 0
   14316:	ed b7       	in	r30, 0x3d	; 61
   14318:	fe b7       	in	r31, 0x3e	; 62
   1431a:	81 83       	std	Z+1, r24	; 0x01
   1431c:	92 83       	std	Z+2, r25	; 0x02
   1431e:	a3 83       	std	Z+3, r26	; 0x03
   14320:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14324:	5e c1       	rjmp	.+700    	; 0x145e2 <hpdir_find_drive+0x356>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   14326:	ce 01       	movw	r24, r28
   14328:	08 96       	adiw	r24, 0x08	; 8
   1432a:	0e 94 2d 30 	call	0x605a	; 0x605a <trim_tail>
        ptr = skipspaces(ptr);
   1432e:	ce 01       	movw	r24, r28
   14330:	08 96       	adiw	r24, 0x08	; 8
   14332:	0e 94 3d 30 	call	0x607a	; 0x607a <skipspaces>

        len = strlen(ptr);
   14336:	fc 01       	movw	r30, r24
   14338:	01 90       	ld	r0, Z+
   1433a:	00 20       	and	r0, r0
   1433c:	e9 f7       	brne	.-6      	; 0x14338 <hpdir_find_drive+0xac>
   1433e:	31 97       	sbiw	r30, 0x01	; 1
        if(!len)
   14340:	8e 17       	cp	r24, r30
   14342:	9f 07       	cpc	r25, r31
   14344:	51 f4       	brne	.+20     	; 0x1435a <hpdir_find_drive+0xce>
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   14346:	a7 01       	movw	r20, r14
   14348:	6e ef       	ldi	r22, 0xFE	; 254
   1434a:	70 e0       	ldi	r23, 0x00	; 0
   1434c:	ce 01       	movw	r24, r28
   1434e:	08 96       	adiw	r24, 0x08	; 8
   14350:	0e 94 4e 75 	call	0xea9c	; 0xea9c <fgets>
   14354:	89 2b       	or	r24, r25
   14356:	39 f7       	brne	.-50     	; 0x14326 <hpdir_find_drive+0x9a>
   14358:	0c c0       	rjmp	.+24     	; 0x14372 <hpdir_find_drive+0xe6>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   1435a:	fc 01       	movw	r30, r24
   1435c:	20 81       	ld	r18, Z
   1435e:	2b 33       	cpi	r18, 0x3B	; 59
   14360:	91 f3       	breq	.-28     	; 0x14346 <hpdir_find_drive+0xba>
   14362:	23 32       	cpi	r18, 0x23	; 35
   14364:	81 f3       	breq	.-32     	; 0x14346 <hpdir_find_drive+0xba>
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   14366:	2b 35       	cpi	r18, 0x5B	; 91
   14368:	31 f4       	brne	.+12     	; 0x14376 <hpdir_find_drive+0xea>
   1436a:	f1 e0       	ldi	r31, 0x01	; 1
   1436c:	2f 16       	cp	r2, r31
   1436e:	31 04       	cpc	r3, r1
   14370:	11 f4       	brne	.+4      	; 0x14376 <hpdir_find_drive+0xea>
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   14372:	00 e0       	ldi	r16, 0x00	; 0
   14374:	30 c1       	rjmp	.+608    	; 0x145d6 <hpdir_find_drive+0x34a>

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14376:	4e e7       	ldi	r20, 0x7E	; 126
   14378:	50 e0       	ldi	r21, 0x00	; 0
   1437a:	b8 01       	movw	r22, r16
   1437c:	0e 94 0f 31 	call	0x621e	; 0x621e <get_token>
   14380:	4c 01       	movw	r8, r24

        if(MATCHI(token,"[driveinfo]"))
   14382:	6d e6       	ldi	r22, 0x6D	; 109
   14384:	70 e1       	ldi	r23, 0x10	; 16
   14386:	c8 01       	movw	r24, r16
   14388:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <MATCHI>
   1438c:	89 2b       	or	r24, r25
   1438e:	21 f0       	breq	.+8      	; 0x14398 <hpdir_find_drive+0x10c>
        {
            driveinfo = 1;
   14390:	22 24       	eor	r2, r2
   14392:	23 94       	inc	r2
   14394:	31 2c       	mov	r3, r1
   14396:	d7 cf       	rjmp	.-82     	; 0x14346 <hpdir_find_drive+0xba>
            continue;
        }

        if( driveinfo != 1)
   14398:	21 e0       	ldi	r18, 0x01	; 1
   1439a:	22 16       	cp	r2, r18
   1439c:	31 04       	cpc	r3, r1
   1439e:	99 f6       	brne	.-90     	; 0x14346 <hpdir_find_drive+0xba>
            continue;

        if(list)
   143a0:	c8 57       	subi	r28, 0x78	; 120
   143a2:	de 4f       	sbci	r29, 0xFE	; 254
   143a4:	88 81       	ld	r24, Y
   143a6:	99 81       	ldd	r25, Y+1	; 0x01
   143a8:	c8 58       	subi	r28, 0x88	; 136
   143aa:	d1 40       	sbci	r29, 0x01	; 1
   143ac:	89 2b       	or	r24, r25
   143ae:	61 f0       	breq	.+24     	; 0x143c8 <hpdir_find_drive+0x13c>
        {
            printf("%s %s\n", token, ptr);
   143b0:	ed b7       	in	r30, 0x3d	; 61
   143b2:	fe b7       	in	r31, 0x3e	; 62
   143b4:	97 82       	std	Z+7, r9	; 0x07
   143b6:	86 82       	std	Z+6, r8	; 0x06
   143b8:	15 83       	std	Z+5, r17	; 0x05
   143ba:	04 83       	std	Z+4, r16	; 0x04
   143bc:	41 82       	std	Z+1, r4	; 0x01
   143be:	52 82       	std	Z+2, r5	; 0x02
   143c0:	63 82       	std	Z+3, r6	; 0x03
   143c2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            continue;
   143c6:	bf cf       	rjmp	.-130    	; 0x14346 <hpdir_find_drive+0xba>
        }

        if ( ! MATCHI(model,token) )
   143c8:	b8 01       	movw	r22, r16
   143ca:	c6 01       	movw	r24, r12
   143cc:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <MATCHI>
   143d0:	89 2b       	or	r24, r25
            continue;

        hpdir_init();
   143d2:	f1 f2       	breq	.-68     	; 0x14390 <hpdir_find_drive+0x104>
   143d4:	c0 de       	rcall	.-640    	; 0x14156 <hpdir_init>

        if(verbose)
   143d6:	ab 28       	or	r10, r11
   143d8:	61 f0       	breq	.+24     	; 0x143f2 <hpdir_find_drive+0x166>
            printf("Found Model: %s\n", model);
   143da:	ed b7       	in	r30, 0x3d	; 61
   143dc:	fe b7       	in	r31, 0x3e	; 62
   143de:	d5 82       	std	Z+5, r13	; 0x05
   143e0:	c4 82       	std	Z+4, r12	; 0x04
   143e2:	83 eb       	ldi	r24, 0xB3	; 179
   143e4:	9d e1       	ldi	r25, 0x1D	; 29
   143e6:	a0 e0       	ldi	r26, 0x00	; 0
   143e8:	81 83       	std	Z+1, r24	; 0x01
   143ea:	92 83       	std	Z+2, r25	; 0x02
   143ec:	a3 83       	std	Z+3, r26	; 0x03
   143ee:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   143f2:	4e e1       	ldi	r20, 0x1E	; 30
   143f4:	50 e0       	ldi	r21, 0x00	; 0
   143f6:	b8 01       	movw	r22, r16
   143f8:	8b ef       	ldi	r24, 0xFB	; 251
   143fa:	90 e2       	ldi	r25, 0x20	; 32
   143fc:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14400:	4e e7       	ldi	r20, 0x7E	; 126
   14402:	50 e0       	ldi	r21, 0x00	; 0
   14404:	b8 01       	movw	r22, r16
   14406:	c4 01       	movw	r24, r8
   14408:	0e 94 0f 31 	call	0x621e	; 0x621e <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   1440c:	4e e3       	ldi	r20, 0x3E	; 62
   1440e:	50 e0       	ldi	r21, 0x00	; 0
   14410:	6b e1       	ldi	r22, 0x1B	; 27
   14412:	71 e2       	ldi	r23, 0x21	; 33
   14414:	0e 94 0f 31 	call	0x621e	; 0x621e <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   14418:	4e e1       	ldi	r20, 0x1E	; 30
   1441a:	50 e0       	ldi	r21, 0x00	; 0
   1441c:	6b e5       	ldi	r22, 0x5B	; 91
   1441e:	71 e2       	ldi	r23, 0x21	; 33
   14420:	0e 94 0f 31 	call	0x621e	; 0x621e <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14424:	4e e7       	ldi	r20, 0x7E	; 126
   14426:	50 e0       	ldi	r21, 0x00	; 0
   14428:	b8 01       	movw	r22, r16
   1442a:	0e 94 0f 31 	call	0x621e	; 0x621e <get_token>
   1442e:	6c 01       	movw	r12, r24
        hpdir.ID = get_value(token);
   14430:	c8 01       	movw	r24, r16
   14432:	0e 94 52 31 	call	0x62a4	; 0x62a4 <get_value>
   14436:	60 93 7b 21 	sts	0x217B, r22	; 0x80217b <hpdir+0x80>
   1443a:	70 93 7c 21 	sts	0x217C, r23	; 0x80217c <hpdir+0x81>
   1443e:	80 93 7d 21 	sts	0x217D, r24	; 0x80217d <hpdir+0x82>
   14442:	90 93 7e 21 	sts	0x217E, r25	; 0x80217e <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14446:	4e e7       	ldi	r20, 0x7E	; 126
   14448:	50 e0       	ldi	r21, 0x00	; 0
   1444a:	b8 01       	movw	r22, r16
   1444c:	c6 01       	movw	r24, r12
   1444e:	0e 94 0f 31 	call	0x621e	; 0x621e <get_token>
   14452:	6c 01       	movw	r12, r24
        hpdir.mask_stat2 = get_value(token);
   14454:	c8 01       	movw	r24, r16
   14456:	0e 94 52 31 	call	0x62a4	; 0x62a4 <get_value>
   1445a:	60 93 7f 21 	sts	0x217F, r22	; 0x80217f <hpdir+0x84>
   1445e:	70 93 80 21 	sts	0x2180, r23	; 0x802180 <hpdir+0x85>
   14462:	80 93 81 21 	sts	0x2181, r24	; 0x802181 <hpdir+0x86>
   14466:	90 93 82 21 	sts	0x2182, r25	; 0x802182 <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1446a:	4e e7       	ldi	r20, 0x7E	; 126
   1446c:	50 e0       	ldi	r21, 0x00	; 0
   1446e:	b8 01       	movw	r22, r16
   14470:	c6 01       	movw	r24, r12
   14472:	0e 94 0f 31 	call	0x621e	; 0x621e <get_token>
   14476:	6c 01       	movw	r12, r24
        hpdir.id_stat2 = get_value(token);
   14478:	c8 01       	movw	r24, r16
   1447a:	0e 94 52 31 	call	0x62a4	; 0x62a4 <get_value>
   1447e:	60 93 83 21 	sts	0x2183, r22	; 0x802183 <hpdir+0x88>
   14482:	70 93 84 21 	sts	0x2184, r23	; 0x802184 <hpdir+0x89>
   14486:	80 93 85 21 	sts	0x2185, r24	; 0x802185 <hpdir+0x8a>
   1448a:	90 93 86 21 	sts	0x2186, r25	; 0x802186 <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1448e:	4e e7       	ldi	r20, 0x7E	; 126
   14490:	50 e0       	ldi	r21, 0x00	; 0
   14492:	b8 01       	movw	r22, r16
   14494:	c6 01       	movw	r24, r12
   14496:	0e 94 0f 31 	call	0x621e	; 0x621e <get_token>
   1449a:	6c 01       	movw	r12, r24
        hpdir.DEVICE_NUMBER = get_value(token);
   1449c:	c8 01       	movw	r24, r16
   1449e:	0e 94 52 31 	call	0x62a4	; 0x62a4 <get_value>
   144a2:	60 93 87 21 	sts	0x2187, r22	; 0x802187 <hpdir+0x8c>
   144a6:	70 93 88 21 	sts	0x2188, r23	; 0x802188 <hpdir+0x8d>
   144aa:	80 93 89 21 	sts	0x2189, r24	; 0x802189 <hpdir+0x8e>
   144ae:	90 93 8a 21 	sts	0x218A, r25	; 0x80218a <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   144b2:	4e e7       	ldi	r20, 0x7E	; 126
   144b4:	50 e0       	ldi	r21, 0x00	; 0
   144b6:	b8 01       	movw	r22, r16
   144b8:	c6 01       	movw	r24, r12
   144ba:	0e 94 0f 31 	call	0x621e	; 0x621e <get_token>
   144be:	6c 01       	movw	r12, r24
        hpdir.UNITS_INSTALLED = get_value(token);
   144c0:	c8 01       	movw	r24, r16
   144c2:	0e 94 52 31 	call	0x62a4	; 0x62a4 <get_value>
   144c6:	60 93 8b 21 	sts	0x218B, r22	; 0x80218b <hpdir+0x90>
   144ca:	70 93 8c 21 	sts	0x218C, r23	; 0x80218c <hpdir+0x91>
   144ce:	80 93 8d 21 	sts	0x218D, r24	; 0x80218d <hpdir+0x92>
   144d2:	90 93 8e 21 	sts	0x218E, r25	; 0x80218e <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   144d6:	4e e7       	ldi	r20, 0x7E	; 126
   144d8:	50 e0       	ldi	r21, 0x00	; 0
   144da:	b8 01       	movw	r22, r16
   144dc:	c6 01       	movw	r24, r12
   144de:	0e 94 0f 31 	call	0x621e	; 0x621e <get_token>
   144e2:	6c 01       	movw	r12, r24
        hpdir.CYLINDERS = get_value(token);
   144e4:	c8 01       	movw	r24, r16
   144e6:	0e 94 52 31 	call	0x62a4	; 0x62a4 <get_value>
   144ea:	60 93 8f 21 	sts	0x218F, r22	; 0x80218f <hpdir+0x94>
   144ee:	70 93 90 21 	sts	0x2190, r23	; 0x802190 <hpdir+0x95>
   144f2:	80 93 91 21 	sts	0x2191, r24	; 0x802191 <hpdir+0x96>
   144f6:	90 93 92 21 	sts	0x2192, r25	; 0x802192 <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   144fa:	4e e7       	ldi	r20, 0x7E	; 126
   144fc:	50 e0       	ldi	r21, 0x00	; 0
   144fe:	b8 01       	movw	r22, r16
   14500:	c6 01       	movw	r24, r12
   14502:	0e 94 0f 31 	call	0x621e	; 0x621e <get_token>
   14506:	6c 01       	movw	r12, r24
        hpdir.HEADS = get_value(token);
   14508:	c8 01       	movw	r24, r16
   1450a:	0e 94 52 31 	call	0x62a4	; 0x62a4 <get_value>
   1450e:	60 93 93 21 	sts	0x2193, r22	; 0x802193 <hpdir+0x98>
   14512:	70 93 94 21 	sts	0x2194, r23	; 0x802194 <hpdir+0x99>
   14516:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <hpdir+0x9a>
   1451a:	90 93 96 21 	sts	0x2196, r25	; 0x802196 <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1451e:	4e e7       	ldi	r20, 0x7E	; 126
   14520:	50 e0       	ldi	r21, 0x00	; 0
   14522:	b8 01       	movw	r22, r16
   14524:	c6 01       	movw	r24, r12
   14526:	0e 94 0f 31 	call	0x621e	; 0x621e <get_token>
   1452a:	6c 01       	movw	r12, r24
        hpdir.SECTORS = get_value(token);
   1452c:	c8 01       	movw	r24, r16
   1452e:	0e 94 52 31 	call	0x62a4	; 0x62a4 <get_value>
   14532:	60 93 97 21 	sts	0x2197, r22	; 0x802197 <hpdir+0x9c>
   14536:	70 93 98 21 	sts	0x2198, r23	; 0x802198 <hpdir+0x9d>
   1453a:	80 93 99 21 	sts	0x2199, r24	; 0x802199 <hpdir+0x9e>
   1453e:	90 93 9a 21 	sts	0x219A, r25	; 0x80219a <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14542:	4e e7       	ldi	r20, 0x7E	; 126
   14544:	50 e0       	ldi	r21, 0x00	; 0
   14546:	b8 01       	movw	r22, r16
   14548:	c6 01       	movw	r24, r12
   1454a:	0e 94 0f 31 	call	0x621e	; 0x621e <get_token>
   1454e:	6c 01       	movw	r12, r24
        hpdir.BYTES_PER_SECTOR = get_value(token);
   14550:	c8 01       	movw	r24, r16
   14552:	0e 94 52 31 	call	0x62a4	; 0x62a4 <get_value>
   14556:	60 93 9b 21 	sts	0x219B, r22	; 0x80219b <hpdir+0xa0>
   1455a:	70 93 9c 21 	sts	0x219C, r23	; 0x80219c <hpdir+0xa1>
   1455e:	80 93 9d 21 	sts	0x219D, r24	; 0x80219d <hpdir+0xa2>
   14562:	90 93 9e 21 	sts	0x219E, r25	; 0x80219e <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14566:	4e e7       	ldi	r20, 0x7E	; 126
   14568:	50 e0       	ldi	r21, 0x00	; 0
   1456a:	b8 01       	movw	r22, r16
   1456c:	c6 01       	movw	r24, r12
   1456e:	0e 94 0f 31 	call	0x621e	; 0x621e <get_token>
        hpdir.INTERLEAVE = get_value(token);
   14572:	c8 01       	movw	r24, r16
   14574:	0e 94 52 31 	call	0x62a4	; 0x62a4 <get_value>
   14578:	60 93 9f 21 	sts	0x219F, r22	; 0x80219f <hpdir+0xa4>
   1457c:	70 93 a0 21 	sts	0x21A0, r23	; 0x8021a0 <hpdir+0xa5>
   14580:	80 93 a1 21 	sts	0x21A1, r24	; 0x8021a1 <hpdir+0xa6>
   14584:	90 93 a2 21 	sts	0x21A2, r25	; 0x8021a2 <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   14588:	20 91 8f 21 	lds	r18, 0x218F	; 0x80218f <hpdir+0x94>
   1458c:	30 91 90 21 	lds	r19, 0x2190	; 0x802190 <hpdir+0x95>
   14590:	40 91 91 21 	lds	r20, 0x2191	; 0x802191 <hpdir+0x96>
   14594:	50 91 92 21 	lds	r21, 0x2192	; 0x802192 <hpdir+0x97>
   14598:	60 91 93 21 	lds	r22, 0x2193	; 0x802193 <hpdir+0x98>
   1459c:	70 91 94 21 	lds	r23, 0x2194	; 0x802194 <hpdir+0x99>
   145a0:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <hpdir+0x9a>
   145a4:	90 91 96 21 	lds	r25, 0x2196	; 0x802196 <hpdir+0x9b>
   145a8:	0e 94 ad e2 	call	0x1c55a	; 0x1c55a <__mulsi3>
   145ac:	9b 01       	movw	r18, r22
   145ae:	ac 01       	movw	r20, r24
   145b0:	60 91 97 21 	lds	r22, 0x2197	; 0x802197 <hpdir+0x9c>
   145b4:	70 91 98 21 	lds	r23, 0x2198	; 0x802198 <hpdir+0x9d>
   145b8:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <hpdir+0x9e>
   145bc:	90 91 9a 21 	lds	r25, 0x219A	; 0x80219a <hpdir+0x9f>
   145c0:	0e 94 ad e2 	call	0x1c55a	; 0x1c55a <__mulsi3>
   145c4:	60 93 a7 21 	sts	0x21A7, r22	; 0x8021a7 <hpdir+0xac>
   145c8:	70 93 a8 21 	sts	0x21A8, r23	; 0x8021a8 <hpdir+0xad>
   145cc:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <hpdir+0xae>
   145d0:	90 93 aa 21 	sts	0x21AA, r25	; 0x8021aa <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   145d4:	01 e0       	ldi	r16, 0x01	; 1
   145d6:	10 e0       	ldi	r17, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
   145d8:	c7 01       	movw	r24, r14
   145da:	0e 94 e0 7b 	call	0xf7c0	; 0xf7c0 <fclose>
    return(found);
   145de:	c8 01       	movw	r24, r16
   145e0:	02 c0       	rjmp	.+4      	; 0x145e6 <hpdir_find_drive+0x35a>

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   145e2:	80 e0       	ldi	r24, 0x00	; 0
   145e4:	90 e0       	ldi	r25, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
    return(found);
}
   145e6:	c7 57       	subi	r28, 0x77	; 119
   145e8:	de 4f       	sbci	r29, 0xFE	; 254
   145ea:	0f b6       	in	r0, 0x3f	; 63
   145ec:	f8 94       	cli
   145ee:	de bf       	out	0x3e, r29	; 62
   145f0:	0f be       	out	0x3f, r0	; 63
   145f2:	cd bf       	out	0x3d, r28	; 61
   145f4:	df 91       	pop	r29
   145f6:	cf 91       	pop	r28
   145f8:	1f 91       	pop	r17
   145fa:	0f 91       	pop	r16
   145fc:	ff 90       	pop	r15
   145fe:	ef 90       	pop	r14
   14600:	df 90       	pop	r13
   14602:	cf 90       	pop	r12
   14604:	bf 90       	pop	r11
   14606:	af 90       	pop	r10
   14608:	9f 90       	pop	r9
   1460a:	8f 90       	pop	r8
   1460c:	6f 90       	pop	r6
   1460e:	5f 90       	pop	r5
   14610:	4f 90       	pop	r4
   14612:	3f 90       	pop	r3
   14614:	2f 90       	pop	r2
   14616:	08 95       	ret

00014618 <SS80ControllerPack>:
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
        printf("[SS80 Increment to (%lXH)]\n",
            (long) SS80_Blocks_to_Bytes(SS80s->AddressBlocks));
#endif
    return(0);
}
   14618:	0f 93       	push	r16
   1461a:	1f 93       	push	r17
   1461c:	25 e0       	ldi	r18, 0x05	; 5
   1461e:	30 e0       	ldi	r19, 0x00	; 0
   14620:	fc 01       	movw	r30, r24
   14622:	31 83       	std	Z+1, r19	; 0x01
   14624:	20 83       	st	Z, r18
   14626:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   1462a:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   1462e:	06 81       	ldd	r16, Z+6	; 0x06
   14630:	17 81       	ldd	r17, Z+7	; 0x07
   14632:	20 e0       	ldi	r18, 0x00	; 0
   14634:	30 e0       	ldi	r19, 0x00	; 0
   14636:	42 e0       	ldi	r20, 0x02	; 2
   14638:	50 e0       	ldi	r21, 0x00	; 0
   1463a:	60 e0       	ldi	r22, 0x00	; 0
   1463c:	70 e0       	ldi	r23, 0x00	; 0
   1463e:	8b e9       	ldi	r24, 0x9B	; 155
   14640:	99 e1       	ldi	r25, 0x19	; 25
   14642:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   14646:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   1464a:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   1464e:	00 85       	ldd	r16, Z+8	; 0x08
   14650:	11 85       	ldd	r17, Z+9	; 0x09
   14652:	20 e0       	ldi	r18, 0x00	; 0
   14654:	30 e0       	ldi	r19, 0x00	; 0
   14656:	42 e0       	ldi	r20, 0x02	; 2
   14658:	50 e0       	ldi	r21, 0x00	; 0
   1465a:	61 e0       	ldi	r22, 0x01	; 1
   1465c:	70 e0       	ldi	r23, 0x00	; 0
   1465e:	8b e9       	ldi	r24, 0x9B	; 155
   14660:	99 e1       	ldi	r25, 0x19	; 25
   14662:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   14666:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   1466a:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   1466e:	02 85       	ldd	r16, Z+10	; 0x0a
   14670:	10 e0       	ldi	r17, 0x00	; 0
   14672:	20 e0       	ldi	r18, 0x00	; 0
   14674:	30 e0       	ldi	r19, 0x00	; 0
   14676:	41 e0       	ldi	r20, 0x01	; 1
   14678:	50 e0       	ldi	r21, 0x00	; 0
   1467a:	64 e0       	ldi	r22, 0x04	; 4
   1467c:	70 e0       	ldi	r23, 0x00	; 0
   1467e:	8b e9       	ldi	r24, 0x9B	; 155
   14680:	99 e1       	ldi	r25, 0x19	; 25
   14682:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   14686:	8b e9       	ldi	r24, 0x9B	; 155
   14688:	99 e1       	ldi	r25, 0x19	; 25
   1468a:	1f 91       	pop	r17
   1468c:	0f 91       	pop	r16
   1468e:	08 95       	ret

00014690 <SS80UnitPack>:
   14690:	0f 93       	push	r16
   14692:	1f 93       	push	r17
   14694:	23 e1       	ldi	r18, 0x13	; 19
   14696:	30 e0       	ldi	r19, 0x00	; 0
   14698:	fc 01       	movw	r30, r24
   1469a:	31 83       	std	Z+1, r19	; 0x01
   1469c:	20 83       	st	Z, r18
   1469e:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   146a2:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   146a6:	03 85       	ldd	r16, Z+11	; 0x0b
   146a8:	10 e0       	ldi	r17, 0x00	; 0
   146aa:	20 e0       	ldi	r18, 0x00	; 0
   146ac:	30 e0       	ldi	r19, 0x00	; 0
   146ae:	41 e0       	ldi	r20, 0x01	; 1
   146b0:	50 e0       	ldi	r21, 0x00	; 0
   146b2:	60 e0       	ldi	r22, 0x00	; 0
   146b4:	70 e0       	ldi	r23, 0x00	; 0
   146b6:	88 e8       	ldi	r24, 0x88	; 136
   146b8:	99 e1       	ldi	r25, 0x19	; 25
   146ba:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   146be:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   146c2:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   146c6:	04 85       	ldd	r16, Z+12	; 0x0c
   146c8:	15 85       	ldd	r17, Z+13	; 0x0d
   146ca:	26 85       	ldd	r18, Z+14	; 0x0e
   146cc:	37 85       	ldd	r19, Z+15	; 0x0f
   146ce:	43 e0       	ldi	r20, 0x03	; 3
   146d0:	50 e0       	ldi	r21, 0x00	; 0
   146d2:	61 e0       	ldi	r22, 0x01	; 1
   146d4:	70 e0       	ldi	r23, 0x00	; 0
   146d6:	88 e8       	ldi	r24, 0x88	; 136
   146d8:	99 e1       	ldi	r25, 0x19	; 25
   146da:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   146de:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   146e2:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   146e6:	00 89       	ldd	r16, Z+16	; 0x10
   146e8:	11 89       	ldd	r17, Z+17	; 0x11
   146ea:	20 e0       	ldi	r18, 0x00	; 0
   146ec:	30 e0       	ldi	r19, 0x00	; 0
   146ee:	42 e0       	ldi	r20, 0x02	; 2
   146f0:	50 e0       	ldi	r21, 0x00	; 0
   146f2:	64 e0       	ldi	r22, 0x04	; 4
   146f4:	70 e0       	ldi	r23, 0x00	; 0
   146f6:	88 e8       	ldi	r24, 0x88	; 136
   146f8:	99 e1       	ldi	r25, 0x19	; 25
   146fa:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   146fe:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   14702:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   14706:	02 89       	ldd	r16, Z+18	; 0x12
   14708:	10 e0       	ldi	r17, 0x00	; 0
   1470a:	20 e0       	ldi	r18, 0x00	; 0
   1470c:	30 e0       	ldi	r19, 0x00	; 0
   1470e:	41 e0       	ldi	r20, 0x01	; 1
   14710:	50 e0       	ldi	r21, 0x00	; 0
   14712:	66 e0       	ldi	r22, 0x06	; 6
   14714:	70 e0       	ldi	r23, 0x00	; 0
   14716:	88 e8       	ldi	r24, 0x88	; 136
   14718:	99 e1       	ldi	r25, 0x19	; 25
   1471a:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   1471e:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   14722:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   14726:	03 89       	ldd	r16, Z+19	; 0x13
   14728:	10 e0       	ldi	r17, 0x00	; 0
   1472a:	20 e0       	ldi	r18, 0x00	; 0
   1472c:	30 e0       	ldi	r19, 0x00	; 0
   1472e:	41 e0       	ldi	r20, 0x01	; 1
   14730:	50 e0       	ldi	r21, 0x00	; 0
   14732:	67 e0       	ldi	r22, 0x07	; 7
   14734:	70 e0       	ldi	r23, 0x00	; 0
   14736:	88 e8       	ldi	r24, 0x88	; 136
   14738:	99 e1       	ldi	r25, 0x19	; 25
   1473a:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   1473e:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   14742:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   14746:	04 89       	ldd	r16, Z+20	; 0x14
   14748:	15 89       	ldd	r17, Z+21	; 0x15
   1474a:	20 e0       	ldi	r18, 0x00	; 0
   1474c:	30 e0       	ldi	r19, 0x00	; 0
   1474e:	42 e0       	ldi	r20, 0x02	; 2
   14750:	50 e0       	ldi	r21, 0x00	; 0
   14752:	68 e0       	ldi	r22, 0x08	; 8
   14754:	70 e0       	ldi	r23, 0x00	; 0
   14756:	88 e8       	ldi	r24, 0x88	; 136
   14758:	99 e1       	ldi	r25, 0x19	; 25
   1475a:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   1475e:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   14762:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   14766:	06 89       	ldd	r16, Z+22	; 0x16
   14768:	17 89       	ldd	r17, Z+23	; 0x17
   1476a:	20 e0       	ldi	r18, 0x00	; 0
   1476c:	30 e0       	ldi	r19, 0x00	; 0
   1476e:	42 e0       	ldi	r20, 0x02	; 2
   14770:	50 e0       	ldi	r21, 0x00	; 0
   14772:	6a e0       	ldi	r22, 0x0A	; 10
   14774:	70 e0       	ldi	r23, 0x00	; 0
   14776:	88 e8       	ldi	r24, 0x88	; 136
   14778:	99 e1       	ldi	r25, 0x19	; 25
   1477a:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   1477e:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   14782:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   14786:	00 8d       	ldd	r16, Z+24	; 0x18
   14788:	11 8d       	ldd	r17, Z+25	; 0x19
   1478a:	20 e0       	ldi	r18, 0x00	; 0
   1478c:	30 e0       	ldi	r19, 0x00	; 0
   1478e:	42 e0       	ldi	r20, 0x02	; 2
   14790:	50 e0       	ldi	r21, 0x00	; 0
   14792:	6c e0       	ldi	r22, 0x0C	; 12
   14794:	70 e0       	ldi	r23, 0x00	; 0
   14796:	88 e8       	ldi	r24, 0x88	; 136
   14798:	99 e1       	ldi	r25, 0x19	; 25
   1479a:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   1479e:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   147a2:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   147a6:	02 8d       	ldd	r16, Z+26	; 0x1a
   147a8:	13 8d       	ldd	r17, Z+27	; 0x1b
   147aa:	20 e0       	ldi	r18, 0x00	; 0
   147ac:	30 e0       	ldi	r19, 0x00	; 0
   147ae:	42 e0       	ldi	r20, 0x02	; 2
   147b0:	50 e0       	ldi	r21, 0x00	; 0
   147b2:	6e e0       	ldi	r22, 0x0E	; 14
   147b4:	70 e0       	ldi	r23, 0x00	; 0
   147b6:	88 e8       	ldi	r24, 0x88	; 136
   147b8:	99 e1       	ldi	r25, 0x19	; 25
   147ba:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   147be:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   147c2:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   147c6:	04 8d       	ldd	r16, Z+28	; 0x1c
   147c8:	10 e0       	ldi	r17, 0x00	; 0
   147ca:	20 e0       	ldi	r18, 0x00	; 0
   147cc:	30 e0       	ldi	r19, 0x00	; 0
   147ce:	41 e0       	ldi	r20, 0x01	; 1
   147d0:	50 e0       	ldi	r21, 0x00	; 0
   147d2:	60 e1       	ldi	r22, 0x10	; 16
   147d4:	70 e0       	ldi	r23, 0x00	; 0
   147d6:	88 e8       	ldi	r24, 0x88	; 136
   147d8:	99 e1       	ldi	r25, 0x19	; 25
   147da:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   147de:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   147e2:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   147e6:	05 8d       	ldd	r16, Z+29	; 0x1d
   147e8:	10 e0       	ldi	r17, 0x00	; 0
   147ea:	20 e0       	ldi	r18, 0x00	; 0
   147ec:	30 e0       	ldi	r19, 0x00	; 0
   147ee:	41 e0       	ldi	r20, 0x01	; 1
   147f0:	50 e0       	ldi	r21, 0x00	; 0
   147f2:	61 e1       	ldi	r22, 0x11	; 17
   147f4:	70 e0       	ldi	r23, 0x00	; 0
   147f6:	88 e8       	ldi	r24, 0x88	; 136
   147f8:	99 e1       	ldi	r25, 0x19	; 25
   147fa:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   147fe:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   14802:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   14806:	06 8d       	ldd	r16, Z+30	; 0x1e
   14808:	10 e0       	ldi	r17, 0x00	; 0
   1480a:	20 e0       	ldi	r18, 0x00	; 0
   1480c:	30 e0       	ldi	r19, 0x00	; 0
   1480e:	41 e0       	ldi	r20, 0x01	; 1
   14810:	50 e0       	ldi	r21, 0x00	; 0
   14812:	62 e1       	ldi	r22, 0x12	; 18
   14814:	70 e0       	ldi	r23, 0x00	; 0
   14816:	88 e8       	ldi	r24, 0x88	; 136
   14818:	99 e1       	ldi	r25, 0x19	; 25
   1481a:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   1481e:	88 e8       	ldi	r24, 0x88	; 136
   14820:	99 e1       	ldi	r25, 0x19	; 25
   14822:	1f 91       	pop	r17
   14824:	0f 91       	pop	r16
   14826:	08 95       	ret

00014828 <SS80VolumePack>:
   14828:	0f 93       	push	r16
   1482a:	1f 93       	push	r17
   1482c:	2d e0       	ldi	r18, 0x0D	; 13
   1482e:	30 e0       	ldi	r19, 0x00	; 0
   14830:	fc 01       	movw	r30, r24
   14832:	31 83       	std	Z+1, r19	; 0x01
   14834:	20 83       	st	Z, r18
   14836:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   1483a:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   1483e:	07 8d       	ldd	r16, Z+31	; 0x1f
   14840:	10 a1       	ldd	r17, Z+32	; 0x20
   14842:	21 a1       	ldd	r18, Z+33	; 0x21
   14844:	32 a1       	ldd	r19, Z+34	; 0x22
   14846:	43 e0       	ldi	r20, 0x03	; 3
   14848:	50 e0       	ldi	r21, 0x00	; 0
   1484a:	60 e0       	ldi	r22, 0x00	; 0
   1484c:	70 e0       	ldi	r23, 0x00	; 0
   1484e:	8b e7       	ldi	r24, 0x7B	; 123
   14850:	99 e1       	ldi	r25, 0x19	; 25
   14852:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   14856:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   1485a:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   1485e:	03 a1       	ldd	r16, Z+35	; 0x23
   14860:	10 e0       	ldi	r17, 0x00	; 0
   14862:	20 e0       	ldi	r18, 0x00	; 0
   14864:	30 e0       	ldi	r19, 0x00	; 0
   14866:	41 e0       	ldi	r20, 0x01	; 1
   14868:	50 e0       	ldi	r21, 0x00	; 0
   1486a:	63 e0       	ldi	r22, 0x03	; 3
   1486c:	70 e0       	ldi	r23, 0x00	; 0
   1486e:	8b e7       	ldi	r24, 0x7B	; 123
   14870:	99 e1       	ldi	r25, 0x19	; 25
   14872:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   14876:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   1487a:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   1487e:	04 a1       	ldd	r16, Z+36	; 0x24
   14880:	15 a1       	ldd	r17, Z+37	; 0x25
   14882:	20 e0       	ldi	r18, 0x00	; 0
   14884:	30 e0       	ldi	r19, 0x00	; 0
   14886:	42 e0       	ldi	r20, 0x02	; 2
   14888:	50 e0       	ldi	r21, 0x00	; 0
   1488a:	64 e0       	ldi	r22, 0x04	; 4
   1488c:	70 e0       	ldi	r23, 0x00	; 0
   1488e:	8b e7       	ldi	r24, 0x7B	; 123
   14890:	99 e1       	ldi	r25, 0x19	; 25
   14892:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   14896:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   1489a:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   1489e:	06 a1       	ldd	r16, Z+38	; 0x26
   148a0:	17 a1       	ldd	r17, Z+39	; 0x27
   148a2:	20 a5       	ldd	r18, Z+40	; 0x28
   148a4:	31 a5       	ldd	r19, Z+41	; 0x29
   148a6:	46 e0       	ldi	r20, 0x06	; 6
   148a8:	50 e0       	ldi	r21, 0x00	; 0
   148aa:	66 e0       	ldi	r22, 0x06	; 6
   148ac:	70 e0       	ldi	r23, 0x00	; 0
   148ae:	8b e7       	ldi	r24, 0x7B	; 123
   148b0:	99 e1       	ldi	r25, 0x19	; 25
   148b2:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   148b6:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   148ba:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   148be:	02 a5       	ldd	r16, Z+42	; 0x2a
   148c0:	10 e0       	ldi	r17, 0x00	; 0
   148c2:	20 e0       	ldi	r18, 0x00	; 0
   148c4:	30 e0       	ldi	r19, 0x00	; 0
   148c6:	41 e0       	ldi	r20, 0x01	; 1
   148c8:	50 e0       	ldi	r21, 0x00	; 0
   148ca:	6c e0       	ldi	r22, 0x0C	; 12
   148cc:	70 e0       	ldi	r23, 0x00	; 0
   148ce:	8b e7       	ldi	r24, 0x7B	; 123
   148d0:	99 e1       	ldi	r25, 0x19	; 25
   148d2:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   148d6:	8b e7       	ldi	r24, 0x7B	; 123
   148d8:	99 e1       	ldi	r25, 0x19	; 25
   148da:	1f 91       	pop	r17
   148dc:	0f 91       	pop	r16
   148de:	08 95       	ret

000148e0 <SS80_test_extended_status>:
   148e0:	9b 01       	movw	r18, r22
   148e2:	43 e0       	ldi	r20, 0x03	; 3
   148e4:	35 95       	asr	r19
   148e6:	27 95       	ror	r18
   148e8:	4a 95       	dec	r20
   148ea:	e1 f7       	brne	.-8      	; 0x148e4 <SS80_test_extended_status+0x4>
   148ec:	82 0f       	add	r24, r18
   148ee:	93 1f       	adc	r25, r19
   148f0:	67 70       	andi	r22, 0x07	; 7
   148f2:	77 27       	eor	r23, r23
   148f4:	20 e8       	ldi	r18, 0x80	; 128
   148f6:	30 e0       	ldi	r19, 0x00	; 0
   148f8:	02 c0       	rjmp	.+4      	; 0x148fe <SS80_test_extended_status+0x1e>
   148fa:	35 95       	asr	r19
   148fc:	27 95       	ror	r18
   148fe:	6a 95       	dec	r22
   14900:	e2 f7       	brpl	.-8      	; 0x148fa <SS80_test_extended_status+0x1a>
   14902:	fc 01       	movw	r30, r24
   14904:	80 81       	ld	r24, Z
   14906:	28 23       	and	r18, r24
   14908:	81 e0       	ldi	r24, 0x01	; 1
   1490a:	90 e0       	ldi	r25, 0x00	; 0
   1490c:	11 f4       	brne	.+4      	; 0x14912 <SS80_test_extended_status+0x32>
   1490e:	80 e0       	ldi	r24, 0x00	; 0
   14910:	90 e0       	ldi	r25, 0x00	; 0
   14912:	08 95       	ret

00014914 <SS80_display_extended_status>:
   14914:	6f 92       	push	r6
   14916:	7f 92       	push	r7
   14918:	8f 92       	push	r8
   1491a:	ef 92       	push	r14
   1491c:	ff 92       	push	r15
   1491e:	0f 93       	push	r16
   14920:	1f 93       	push	r17
   14922:	cf 93       	push	r28
   14924:	df 93       	push	r29
   14926:	ad b7       	in	r26, 0x3d	; 61
   14928:	be b7       	in	r27, 0x3e	; 62
   1492a:	17 97       	sbiw	r26, 0x07	; 7
   1492c:	0f b6       	in	r0, 0x3f	; 63
   1492e:	f8 94       	cli
   14930:	be bf       	out	0x3e, r27	; 62
   14932:	0f be       	out	0x3f, r0	; 63
   14934:	ad bf       	out	0x3d, r26	; 61
   14936:	fc 01       	movw	r30, r24
   14938:	ac 01       	movw	r20, r24
   1493a:	48 5f       	subi	r20, 0xF8	; 248
   1493c:	5f 4f       	sbci	r21, 0xFF	; 255
   1493e:	20 e0       	ldi	r18, 0x00	; 0
   14940:	30 e0       	ldi	r19, 0x00	; 0
   14942:	a1 91       	ld	r26, Z+
   14944:	aa 23       	and	r26, r26
   14946:	11 f0       	breq	.+4      	; 0x1494c <SS80_display_extended_status+0x38>
   14948:	21 e0       	ldi	r18, 0x01	; 1
   1494a:	30 e0       	ldi	r19, 0x00	; 0
   1494c:	e4 17       	cp	r30, r20
   1494e:	f5 07       	cpc	r31, r21
   14950:	c1 f7       	brne	.-16     	; 0x14942 <SS80_display_extended_status+0x2e>
   14952:	23 2b       	or	r18, r19
   14954:	81 f1       	breq	.+96     	; 0x149b6 <SS80_display_extended_status+0xa2>
   14956:	ec 01       	movw	r28, r24
   14958:	ed b7       	in	r30, 0x3d	; 61
   1495a:	fe b7       	in	r31, 0x3e	; 62
   1495c:	75 83       	std	Z+5, r23	; 0x05
   1495e:	64 83       	std	Z+4, r22	; 0x04
   14960:	84 e2       	ldi	r24, 0x24	; 36
   14962:	94 e2       	ldi	r25, 0x24	; 36
   14964:	a0 e0       	ldi	r26, 0x00	; 0
   14966:	81 83       	std	Z+1, r24	; 0x01
   14968:	92 83       	std	Z+2, r25	; 0x02
   1496a:	a3 83       	std	Z+3, r26	; 0x03
   1496c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14970:	0c e7       	ldi	r16, 0x7C	; 124
   14972:	12 e0       	ldi	r17, 0x02	; 2
   14974:	89 e1       	ldi	r24, 0x19	; 25
   14976:	94 e2       	ldi	r25, 0x24	; 36
   14978:	3c 01       	movw	r6, r24
   1497a:	81 2c       	mov	r8, r1
   1497c:	f8 01       	movw	r30, r16
   1497e:	e0 80       	ld	r14, Z
   14980:	f1 80       	ldd	r15, Z+1	; 0x01
   14982:	ff ef       	ldi	r31, 0xFF	; 255
   14984:	ef 16       	cp	r14, r31
   14986:	ff 06       	cpc	r15, r31
   14988:	b1 f0       	breq	.+44     	; 0x149b6 <SS80_display_extended_status+0xa2>
   1498a:	b7 01       	movw	r22, r14
   1498c:	ce 01       	movw	r24, r28
   1498e:	a8 df       	rcall	.-176    	; 0x148e0 <SS80_test_extended_status>
   14990:	89 2b       	or	r24, r25
   14992:	71 f0       	breq	.+28     	; 0x149b0 <SS80_display_extended_status+0x9c>
   14994:	f8 01       	movw	r30, r16
   14996:	82 81       	ldd	r24, Z+2	; 0x02
   14998:	93 81       	ldd	r25, Z+3	; 0x03
   1499a:	ed b7       	in	r30, 0x3d	; 61
   1499c:	fe b7       	in	r31, 0x3e	; 62
   1499e:	97 83       	std	Z+7, r25	; 0x07
   149a0:	86 83       	std	Z+6, r24	; 0x06
   149a2:	f5 82       	std	Z+5, r15	; 0x05
   149a4:	e4 82       	std	Z+4, r14	; 0x04
   149a6:	61 82       	std	Z+1, r6	; 0x01
   149a8:	72 82       	std	Z+2, r7	; 0x02
   149aa:	83 82       	std	Z+3, r8	; 0x03
   149ac:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   149b0:	0c 5f       	subi	r16, 0xFC	; 252
   149b2:	1f 4f       	sbci	r17, 0xFF	; 255
   149b4:	e3 cf       	rjmp	.-58     	; 0x1497c <SS80_display_extended_status+0x68>
   149b6:	ad b7       	in	r26, 0x3d	; 61
   149b8:	be b7       	in	r27, 0x3e	; 62
   149ba:	17 96       	adiw	r26, 0x07	; 7
   149bc:	0f b6       	in	r0, 0x3f	; 63
   149be:	f8 94       	cli
   149c0:	be bf       	out	0x3e, r27	; 62
   149c2:	0f be       	out	0x3f, r0	; 63
   149c4:	ad bf       	out	0x3d, r26	; 61
   149c6:	df 91       	pop	r29
   149c8:	cf 91       	pop	r28
   149ca:	1f 91       	pop	r17
   149cc:	0f 91       	pop	r16
   149ce:	ff 90       	pop	r15
   149d0:	ef 90       	pop	r14
   149d2:	8f 90       	pop	r8
   149d4:	7f 90       	pop	r7
   149d6:	6f 90       	pop	r6
   149d8:	08 95       	ret

000149da <SS80_send_status>:
   149da:	a9 e1       	ldi	r26, 0x19	; 25
   149dc:	b0 e0       	ldi	r27, 0x00	; 0
   149de:	e3 ef       	ldi	r30, 0xF3	; 243
   149e0:	f4 ea       	ldi	r31, 0xA4	; 164
   149e2:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__prologue_saves__+0x18>
   149e6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   149ea:	85 ff       	sbrs	r24, 5
   149ec:	0a c0       	rjmp	.+20     	; 0x14a02 <SS80_send_status+0x28>
   149ee:	85 e0       	ldi	r24, 0x05	; 5
   149f0:	94 e2       	ldi	r25, 0x24	; 36
   149f2:	a0 e0       	ldi	r26, 0x00	; 0
   149f4:	ed b7       	in	r30, 0x3d	; 61
   149f6:	fe b7       	in	r31, 0x3e	; 62
   149f8:	81 83       	std	Z+1, r24	; 0x01
   149fa:	92 83       	std	Z+2, r25	; 0x02
   149fc:	a3 83       	std	Z+3, r26	; 0x03
   149fe:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14a02:	ce 01       	movw	r24, r28
   14a04:	04 96       	adiw	r24, 0x04	; 4
   14a06:	7c 01       	movw	r14, r24
   14a08:	84 e1       	ldi	r24, 0x14	; 20
   14a0a:	f7 01       	movw	r30, r14
   14a0c:	11 92       	st	Z+, r1
   14a0e:	8a 95       	dec	r24
   14a10:	e9 f7       	brne	.-6      	; 0x14a0c <SS80_send_status+0x32>
   14a12:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   14a16:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   14a1a:	86 81       	ldd	r24, Z+6	; 0x06
   14a1c:	20 e1       	ldi	r18, 0x10	; 16
   14a1e:	82 9f       	mul	r24, r18
   14a20:	c0 01       	movw	r24, r0
   14a22:	11 24       	eor	r1, r1
   14a24:	95 81       	ldd	r25, Z+5	; 0x05
   14a26:	9f 70       	andi	r25, 0x0F	; 15
   14a28:	89 2b       	or	r24, r25
   14a2a:	8c 83       	std	Y+4, r24	; 0x04
   14a2c:	8f ef       	ldi	r24, 0xFF	; 255
   14a2e:	8d 83       	std	Y+5, r24	; 0x05
   14a30:	83 81       	ldd	r24, Z+3	; 0x03
   14a32:	86 ff       	sbrs	r24, 6
   14a34:	02 c0       	rjmp	.+4      	; 0x14a3a <SS80_send_status+0x60>
   14a36:	92 e0       	ldi	r25, 0x02	; 2
   14a38:	9e 83       	std	Y+6, r25	; 0x06
   14a3a:	82 ff       	sbrs	r24, 2
   14a3c:	03 c0       	rjmp	.+6      	; 0x14a44 <SS80_send_status+0x6a>
   14a3e:	9e 81       	ldd	r25, Y+6	; 0x06
   14a40:	91 60       	ori	r25, 0x01	; 1
   14a42:	9e 83       	std	Y+6, r25	; 0x06
   14a44:	80 ff       	sbrs	r24, 0
   14a46:	02 c0       	rjmp	.+4      	; 0x14a4c <SS80_send_status+0x72>
   14a48:	82 e0       	ldi	r24, 0x02	; 2
   14a4a:	88 87       	std	Y+8, r24	; 0x08
   14a4c:	83 81       	ldd	r24, Z+3	; 0x03
   14a4e:	81 ff       	sbrs	r24, 1
   14a50:	03 c0       	rjmp	.+6      	; 0x14a58 <SS80_send_status+0x7e>
   14a52:	88 85       	ldd	r24, Y+8	; 0x08
   14a54:	82 60       	ori	r24, 0x02	; 2
   14a56:	88 87       	std	Y+8, r24	; 0x08
   14a58:	83 81       	ldd	r24, Z+3	; 0x03
   14a5a:	83 ff       	sbrs	r24, 3
   14a5c:	02 c0       	rjmp	.+4      	; 0x14a62 <SS80_send_status+0x88>
   14a5e:	88 e0       	ldi	r24, 0x08	; 8
   14a60:	8a 87       	std	Y+10, r24	; 0x0a
   14a62:	83 81       	ldd	r24, Z+3	; 0x03
   14a64:	94 81       	ldd	r25, Z+4	; 0x04
   14a66:	89 2b       	or	r24, r25
   14a68:	59 f4       	brne	.+22     	; 0x14a80 <SS80_send_status+0xa6>
   14a6a:	07 81       	ldd	r16, Z+7	; 0x07
   14a6c:	10 85       	ldd	r17, Z+8	; 0x08
   14a6e:	21 85       	ldd	r18, Z+9	; 0x09
   14a70:	32 85       	ldd	r19, Z+10	; 0x0a
   14a72:	46 e0       	ldi	r20, 0x06	; 6
   14a74:	50 e0       	ldi	r21, 0x00	; 0
   14a76:	6a e0       	ldi	r22, 0x0A	; 10
   14a78:	70 e0       	ldi	r23, 0x00	; 0
   14a7a:	c7 01       	movw	r24, r14
   14a7c:	0e 94 87 bd 	call	0x17b0e	; 0x17b0e <V2B_MSB>
   14a80:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   14a84:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   14a88:	83 81       	ldd	r24, Z+3	; 0x03
   14a8a:	94 81       	ldd	r25, Z+4	; 0x04
   14a8c:	89 2b       	or	r24, r25
   14a8e:	11 f0       	breq	.+4      	; 0x14a94 <SS80_send_status+0xba>
   14a90:	81 e0       	ldi	r24, 0x01	; 1
   14a92:	82 83       	std	Z+2, r24	; 0x02
   14a94:	80 e0       	ldi	r24, 0x00	; 0
   14a96:	91 e0       	ldi	r25, 0x01	; 1
   14a98:	99 8f       	std	Y+25, r25	; 0x19
   14a9a:	88 8f       	std	Y+24, r24	; 0x18
   14a9c:	ae 01       	movw	r20, r28
   14a9e:	48 5e       	subi	r20, 0xE8	; 232
   14aa0:	5f 4f       	sbci	r21, 0xFF	; 255
   14aa2:	64 e1       	ldi	r22, 0x14	; 20
   14aa4:	70 e0       	ldi	r23, 0x00	; 0
   14aa6:	c7 01       	movw	r24, r14
   14aa8:	0e 94 83 8a 	call	0x11506	; 0x11506 <gpib_write_str>
   14aac:	44 97       	sbiw	r24, 0x14	; 20
   14aae:	71 f0       	breq	.+28     	; 0x14acc <SS80_send_status+0xf2>
   14ab0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14ab4:	80 ff       	sbrs	r24, 0
   14ab6:	0a c0       	rjmp	.+20     	; 0x14acc <SS80_send_status+0xf2>
   14ab8:	8a ee       	ldi	r24, 0xEA	; 234
   14aba:	93 e2       	ldi	r25, 0x23	; 35
   14abc:	a0 e0       	ldi	r26, 0x00	; 0
   14abe:	ed b7       	in	r30, 0x3d	; 61
   14ac0:	fe b7       	in	r31, 0x3e	; 62
   14ac2:	81 83       	std	Z+1, r24	; 0x01
   14ac4:	92 83       	std	Z+2, r25	; 0x02
   14ac6:	a3 83       	std	Z+3, r26	; 0x03
   14ac8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14acc:	88 8d       	ldd	r24, Y+24	; 0x18
   14ace:	99 8d       	ldd	r25, Y+25	; 0x19
   14ad0:	88 27       	eor	r24, r24
   14ad2:	90 7d       	andi	r25, 0xD0	; 208
   14ad4:	69 96       	adiw	r28, 0x19	; 25
   14ad6:	e6 e0       	ldi	r30, 0x06	; 6
   14ad8:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

00014adc <SS80_describe>:
   14adc:	a7 e0       	ldi	r26, 0x07	; 7
   14ade:	b0 e0       	ldi	r27, 0x00	; 0
   14ae0:	e4 e7       	ldi	r30, 0x74	; 116
   14ae2:	f5 ea       	ldi	r31, 0xA5	; 165
   14ae4:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
   14ae8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14aec:	85 ff       	sbrs	r24, 5
   14aee:	0a c0       	rjmp	.+20     	; 0x14b04 <SS80_describe+0x28>
   14af0:	89 ed       	ldi	r24, 0xD9	; 217
   14af2:	93 e2       	ldi	r25, 0x23	; 35
   14af4:	a0 e0       	ldi	r26, 0x00	; 0
   14af6:	ed b7       	in	r30, 0x3d	; 61
   14af8:	fe b7       	in	r31, 0x3e	; 62
   14afa:	81 83       	std	Z+1, r24	; 0x01
   14afc:	92 83       	std	Z+2, r25	; 0x02
   14afe:	a3 83       	std	Z+3, r26	; 0x03
   14b00:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14b04:	1f 82       	std	Y+7, r1	; 0x07
   14b06:	1e 82       	std	Y+6, r1	; 0x06
   14b08:	ce 01       	movw	r24, r28
   14b0a:	04 96       	adiw	r24, 0x04	; 4
   14b0c:	85 dd       	rcall	.-1270   	; 0x14618 <SS80ControllerPack>
   14b0e:	6c 81       	ldd	r22, Y+4	; 0x04
   14b10:	7d 81       	ldd	r23, Y+5	; 0x05
   14b12:	ae 01       	movw	r20, r28
   14b14:	4a 5f       	subi	r20, 0xFA	; 250
   14b16:	5f 4f       	sbci	r21, 0xFF	; 255
   14b18:	0e 94 83 8a 	call	0x11506	; 0x11506 <gpib_write_str>
   14b1c:	2c 81       	ldd	r18, Y+4	; 0x04
   14b1e:	3d 81       	ldd	r19, Y+5	; 0x05
   14b20:	82 17       	cp	r24, r18
   14b22:	93 07       	cpc	r25, r19
   14b24:	39 f0       	breq	.+14     	; 0x14b34 <SS80_describe+0x58>
   14b26:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b2a:	80 ff       	sbrs	r24, 0
   14b2c:	3c c0       	rjmp	.+120    	; 0x14ba6 <SS80_describe+0xca>
   14b2e:	86 eb       	ldi	r24, 0xB6	; 182
   14b30:	93 e2       	ldi	r25, 0x23	; 35
   14b32:	31 c0       	rjmp	.+98     	; 0x14b96 <SS80_describe+0xba>
   14b34:	1f 82       	std	Y+7, r1	; 0x07
   14b36:	1e 82       	std	Y+6, r1	; 0x06
   14b38:	ce 01       	movw	r24, r28
   14b3a:	04 96       	adiw	r24, 0x04	; 4
   14b3c:	a9 dd       	rcall	.-1198   	; 0x14690 <SS80UnitPack>
   14b3e:	6c 81       	ldd	r22, Y+4	; 0x04
   14b40:	7d 81       	ldd	r23, Y+5	; 0x05
   14b42:	ae 01       	movw	r20, r28
   14b44:	4a 5f       	subi	r20, 0xFA	; 250
   14b46:	5f 4f       	sbci	r21, 0xFF	; 255
   14b48:	0e 94 83 8a 	call	0x11506	; 0x11506 <gpib_write_str>
   14b4c:	2c 81       	ldd	r18, Y+4	; 0x04
   14b4e:	3d 81       	ldd	r19, Y+5	; 0x05
   14b50:	82 17       	cp	r24, r18
   14b52:	93 07       	cpc	r25, r19
   14b54:	39 f0       	breq	.+14     	; 0x14b64 <SS80_describe+0x88>
   14b56:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b5a:	80 ff       	sbrs	r24, 0
   14b5c:	24 c0       	rjmp	.+72     	; 0x14ba6 <SS80_describe+0xca>
   14b5e:	89 e9       	ldi	r24, 0x99	; 153
   14b60:	93 e2       	ldi	r25, 0x23	; 35
   14b62:	19 c0       	rjmp	.+50     	; 0x14b96 <SS80_describe+0xba>
   14b64:	80 e0       	ldi	r24, 0x00	; 0
   14b66:	91 e0       	ldi	r25, 0x01	; 1
   14b68:	9f 83       	std	Y+7, r25	; 0x07
   14b6a:	8e 83       	std	Y+6, r24	; 0x06
   14b6c:	ce 01       	movw	r24, r28
   14b6e:	04 96       	adiw	r24, 0x04	; 4
   14b70:	5b de       	rcall	.-842    	; 0x14828 <SS80VolumePack>
   14b72:	6c 81       	ldd	r22, Y+4	; 0x04
   14b74:	7d 81       	ldd	r23, Y+5	; 0x05
   14b76:	ae 01       	movw	r20, r28
   14b78:	4a 5f       	subi	r20, 0xFA	; 250
   14b7a:	5f 4f       	sbci	r21, 0xFF	; 255
   14b7c:	0e 94 83 8a 	call	0x11506	; 0x11506 <gpib_write_str>
   14b80:	2c 81       	ldd	r18, Y+4	; 0x04
   14b82:	3d 81       	ldd	r19, Y+5	; 0x05
   14b84:	82 17       	cp	r24, r18
   14b86:	93 07       	cpc	r25, r19
   14b88:	99 f0       	breq	.+38     	; 0x14bb0 <SS80_describe+0xd4>
   14b8a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b8e:	80 ff       	sbrs	r24, 0
   14b90:	0a c0       	rjmp	.+20     	; 0x14ba6 <SS80_describe+0xca>
   14b92:	8a e7       	ldi	r24, 0x7A	; 122
   14b94:	93 e2       	ldi	r25, 0x23	; 35
   14b96:	a0 e0       	ldi	r26, 0x00	; 0
   14b98:	ed b7       	in	r30, 0x3d	; 61
   14b9a:	fe b7       	in	r31, 0x3e	; 62
   14b9c:	81 83       	std	Z+1, r24	; 0x01
   14b9e:	92 83       	std	Z+2, r25	; 0x02
   14ba0:	a3 83       	std	Z+3, r26	; 0x03
   14ba2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14ba6:	8e 81       	ldd	r24, Y+6	; 0x06
   14ba8:	9f 81       	ldd	r25, Y+7	; 0x07
   14baa:	88 27       	eor	r24, r24
   14bac:	90 7d       	andi	r25, 0xD0	; 208
   14bae:	02 c0       	rjmp	.+4      	; 0x14bb4 <SS80_describe+0xd8>
   14bb0:	80 e0       	ldi	r24, 0x00	; 0
   14bb2:	90 e0       	ldi	r25, 0x00	; 0
   14bb4:	27 96       	adiw	r28, 0x07	; 7
   14bb6:	e2 e0       	ldi	r30, 0x02	; 2
   14bb8:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00014bbc <SS80_Check_Unit>:
   14bbc:	00 d0       	rcall	.+0      	; 0x14bbe <SS80_Check_Unit+0x2>
   14bbe:	00 d0       	rcall	.+0      	; 0x14bc0 <SS80_Check_Unit+0x4>
   14bc0:	1f 92       	push	r1
   14bc2:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   14bc6:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   14bca:	88 23       	and	r24, r24
   14bcc:	c9 f0       	breq	.+50     	; 0x14c00 <SS80_Check_Unit+0x44>
   14bce:	8f 30       	cpi	r24, 0x0F	; 15
   14bd0:	b9 f0       	breq	.+46     	; 0x14c00 <SS80_Check_Unit+0x44>
   14bd2:	23 81       	ldd	r18, Z+3	; 0x03
   14bd4:	34 81       	ldd	r19, Z+4	; 0x04
   14bd6:	20 64       	ori	r18, 0x40	; 64
   14bd8:	34 83       	std	Z+4, r19	; 0x04
   14bda:	23 83       	std	Z+3, r18	; 0x03
   14bdc:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14be0:	90 ff       	sbrs	r25, 0
   14be2:	0f c0       	rjmp	.+30     	; 0x14c02 <SS80_Check_Unit+0x46>
   14be4:	90 e0       	ldi	r25, 0x00	; 0
   14be6:	ed b7       	in	r30, 0x3d	; 61
   14be8:	fe b7       	in	r31, 0x3e	; 62
   14bea:	95 83       	std	Z+5, r25	; 0x05
   14bec:	84 83       	std	Z+4, r24	; 0x04
   14bee:	82 e6       	ldi	r24, 0x62	; 98
   14bf0:	93 e2       	ldi	r25, 0x23	; 35
   14bf2:	a0 e0       	ldi	r26, 0x00	; 0
   14bf4:	81 83       	std	Z+1, r24	; 0x01
   14bf6:	92 83       	std	Z+2, r25	; 0x02
   14bf8:	a3 83       	std	Z+3, r26	; 0x03
   14bfa:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14bfe:	01 c0       	rjmp	.+2      	; 0x14c02 <SS80_Check_Unit+0x46>
   14c00:	85 83       	std	Z+5, r24	; 0x05
   14c02:	0f 90       	pop	r0
   14c04:	0f 90       	pop	r0
   14c06:	0f 90       	pop	r0
   14c08:	0f 90       	pop	r0
   14c0a:	0f 90       	pop	r0
   14c0c:	08 95       	ret

00014c0e <SS80_Check_Volume>:
   14c0e:	00 d0       	rcall	.+0      	; 0x14c10 <SS80_Check_Volume+0x2>
   14c10:	00 d0       	rcall	.+0      	; 0x14c12 <SS80_Check_Volume+0x4>
   14c12:	1f 92       	push	r1
   14c14:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   14c18:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   14c1c:	88 23       	and	r24, r24
   14c1e:	b9 f0       	breq	.+46     	; 0x14c4e <SS80_Check_Volume+0x40>
   14c20:	23 81       	ldd	r18, Z+3	; 0x03
   14c22:	34 81       	ldd	r19, Z+4	; 0x04
   14c24:	20 64       	ori	r18, 0x40	; 64
   14c26:	34 83       	std	Z+4, r19	; 0x04
   14c28:	23 83       	std	Z+3, r18	; 0x03
   14c2a:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14c2e:	90 ff       	sbrs	r25, 0
   14c30:	0f c0       	rjmp	.+30     	; 0x14c50 <SS80_Check_Volume+0x42>
   14c32:	90 e0       	ldi	r25, 0x00	; 0
   14c34:	ed b7       	in	r30, 0x3d	; 61
   14c36:	fe b7       	in	r31, 0x3e	; 62
   14c38:	95 83       	std	Z+5, r25	; 0x05
   14c3a:	84 83       	std	Z+4, r24	; 0x04
   14c3c:	88 e4       	ldi	r24, 0x48	; 72
   14c3e:	93 e2       	ldi	r25, 0x23	; 35
   14c40:	a0 e0       	ldi	r26, 0x00	; 0
   14c42:	81 83       	std	Z+1, r24	; 0x01
   14c44:	92 83       	std	Z+2, r25	; 0x02
   14c46:	a3 83       	std	Z+3, r26	; 0x03
   14c48:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14c4c:	01 c0       	rjmp	.+2      	; 0x14c50 <SS80_Check_Volume+0x42>
   14c4e:	16 82       	std	Z+6, r1	; 0x06
   14c50:	0f 90       	pop	r0
   14c52:	0f 90       	pop	r0
   14c54:	0f 90       	pop	r0
   14c56:	0f 90       	pop	r0
   14c58:	0f 90       	pop	r0
   14c5a:	08 95       	ret

00014c5c <SS80_Command_State>:
   14c5c:	2f 92       	push	r2
   14c5e:	3f 92       	push	r3
   14c60:	4f 92       	push	r4
   14c62:	6f 92       	push	r6
   14c64:	7f 92       	push	r7
   14c66:	8f 92       	push	r8
   14c68:	af 92       	push	r10
   14c6a:	bf 92       	push	r11
   14c6c:	cf 92       	push	r12
   14c6e:	ef 92       	push	r14
   14c70:	ff 92       	push	r15
   14c72:	0f 93       	push	r16
   14c74:	1f 93       	push	r17
   14c76:	cf 93       	push	r28
   14c78:	df 93       	push	r29
   14c7a:	cd b7       	in	r28, 0x3d	; 61
   14c7c:	de b7       	in	r29, 0x3e	; 62
   14c7e:	66 97       	sbiw	r28, 0x16	; 22
   14c80:	0f b6       	in	r0, 0x3f	; 63
   14c82:	f8 94       	cli
   14c84:	de bf       	out	0x3e, r29	; 62
   14c86:	0f be       	out	0x3f, r0	; 63
   14c88:	cd bf       	out	0x3d, r28	; 61
   14c8a:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   14c8e:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   14c92:	81 81       	ldd	r24, Z+1	; 0x01
   14c94:	90 e0       	ldi	r25, 0x00	; 0
   14c96:	0e 94 6a 85 	call	0x10ad4	; 0x10ad4 <gpib_disable_PPR>
   14c9a:	80 e0       	ldi	r24, 0x00	; 0
   14c9c:	91 e0       	ldi	r25, 0x01	; 1
   14c9e:	99 87       	std	Y+9, r25	; 0x09
   14ca0:	88 87       	std	Y+8, r24	; 0x08
   14ca2:	ae 01       	movw	r20, r28
   14ca4:	48 5f       	subi	r20, 0xF8	; 248
   14ca6:	5f 4f       	sbci	r21, 0xFF	; 255
   14ca8:	60 e0       	ldi	r22, 0x00	; 0
   14caa:	72 e0       	ldi	r23, 0x02	; 2
   14cac:	8d ee       	ldi	r24, 0xED	; 237
   14cae:	9c e1       	ldi	r25, 0x1C	; 28
   14cb0:	0e 94 e1 89 	call	0x113c2	; 0x113c2 <gpib_read_str>
   14cb4:	9b 87       	std	Y+11, r25	; 0x0b
   14cb6:	8a 87       	std	Y+10, r24	; 0x0a
   14cb8:	88 85       	ldd	r24, Y+8	; 0x08
   14cba:	99 85       	ldd	r25, Y+9	; 0x09
   14cbc:	9c 01       	movw	r18, r24
   14cbe:	22 27       	eor	r18, r18
   14cc0:	30 7d       	andi	r19, 0xD0	; 208
   14cc2:	23 2b       	or	r18, r19
   14cc4:	79 f0       	breq	.+30     	; 0x14ce4 <SS80_Command_State+0x88>
   14cc6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14cca:	80 ff       	sbrs	r24, 0
   14ccc:	21 c2       	rjmp	.+1090   	; 0x15110 <SS80_Command_State+0x4b4>
   14cce:	82 e2       	ldi	r24, 0x22	; 34
   14cd0:	93 e2       	ldi	r25, 0x23	; 35
   14cd2:	a0 e0       	ldi	r26, 0x00	; 0
   14cd4:	ed b7       	in	r30, 0x3d	; 61
   14cd6:	fe b7       	in	r31, 0x3e	; 62
   14cd8:	81 83       	std	Z+1, r24	; 0x01
   14cda:	92 83       	std	Z+2, r25	; 0x02
   14cdc:	a3 83       	std	Z+3, r26	; 0x03
   14cde:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14ce2:	16 c2       	rjmp	.+1068   	; 0x15110 <SS80_Command_State+0x4b4>
   14ce4:	2a 85       	ldd	r18, Y+10	; 0x0a
   14ce6:	3b 85       	ldd	r19, Y+11	; 0x0b
   14ce8:	23 2b       	or	r18, r19
   14cea:	09 f4       	brne	.+2      	; 0x14cee <SS80_Command_State+0x92>
   14cec:	16 c2       	rjmp	.+1068   	; 0x1511a <SS80_Command_State+0x4be>
   14cee:	90 fd       	sbrc	r25, 0
   14cf0:	0e c0       	rjmp	.+28     	; 0x14d0e <SS80_Command_State+0xb2>
   14cf2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14cf6:	80 ff       	sbrs	r24, 0
   14cf8:	0a c0       	rjmp	.+20     	; 0x14d0e <SS80_Command_State+0xb2>
   14cfa:	89 e0       	ldi	r24, 0x09	; 9
   14cfc:	93 e2       	ldi	r25, 0x23	; 35
   14cfe:	a0 e0       	ldi	r26, 0x00	; 0
   14d00:	ed b7       	in	r30, 0x3d	; 61
   14d02:	fe b7       	in	r31, 0x3e	; 62
   14d04:	81 83       	std	Z+1, r24	; 0x01
   14d06:	92 83       	std	Z+2, r25	; 0x02
   14d08:	a3 83       	std	Z+3, r26	; 0x03
   14d0a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14d0e:	e1 2c       	mov	r14, r1
   14d10:	f1 2c       	mov	r15, r1
   14d12:	8d e0       	ldi	r24, 0x0D	; 13
   14d14:	92 e2       	ldi	r25, 0x22	; 34
   14d16:	9c 01       	movw	r18, r24
   14d18:	40 e0       	ldi	r20, 0x00	; 0
   14d1a:	2e 87       	std	Y+14, r18	; 0x0e
   14d1c:	3f 87       	std	Y+15, r19	; 0x0f
   14d1e:	48 8b       	std	Y+16, r20	; 0x10
   14d20:	82 e3       	ldi	r24, 0x32	; 50
   14d22:	92 e2       	ldi	r25, 0x22	; 34
   14d24:	9c 01       	movw	r18, r24
   14d26:	40 e0       	ldi	r20, 0x00	; 0
   14d28:	29 8b       	std	Y+17, r18	; 0x11
   14d2a:	3a 8b       	std	Y+18, r19	; 0x12
   14d2c:	4b 8b       	std	Y+19, r20	; 0x13
   14d2e:	8c e4       	ldi	r24, 0x4C	; 76
   14d30:	92 e2       	ldi	r25, 0x22	; 34
   14d32:	9c 01       	movw	r18, r24
   14d34:	40 e0       	ldi	r20, 0x00	; 0
   14d36:	2c 8b       	std	Y+20, r18	; 0x14
   14d38:	3d 8b       	std	Y+21, r19	; 0x15
   14d3a:	4e 8b       	std	Y+22, r20	; 0x16
   14d3c:	82 e6       	ldi	r24, 0x62	; 98
   14d3e:	92 e2       	ldi	r25, 0x22	; 34
   14d40:	3c 01       	movw	r6, r24
   14d42:	81 2c       	mov	r8, r1
   14d44:	80 e7       	ldi	r24, 0x70	; 112
   14d46:	92 e2       	ldi	r25, 0x22	; 34
   14d48:	5c 01       	movw	r10, r24
   14d4a:	c1 2c       	mov	r12, r1
   14d4c:	8c e8       	ldi	r24, 0x8C	; 140
   14d4e:	92 e2       	ldi	r25, 0x22	; 34
   14d50:	1c 01       	movw	r2, r24
   14d52:	41 2c       	mov	r4, r1
   14d54:	2a 85       	ldd	r18, Y+10	; 0x0a
   14d56:	3b 85       	ldd	r19, Y+11	; 0x0b
   14d58:	87 01       	movw	r16, r14
   14d5a:	e2 16       	cp	r14, r18
   14d5c:	f3 06       	cpc	r15, r19
   14d5e:	0c f0       	brlt	.+2      	; 0x14d62 <SS80_Command_State+0x106>
   14d60:	b6 c1       	rjmp	.+876    	; 0x150ce <SS80_Command_State+0x472>
   14d62:	0f 5f       	subi	r16, 0xFF	; 255
   14d64:	1f 4f       	sbci	r17, 0xFF	; 255
   14d66:	f7 01       	movw	r30, r14
   14d68:	e3 51       	subi	r30, 0x13	; 19
   14d6a:	f3 4e       	sbci	r31, 0xE3	; 227
   14d6c:	80 81       	ld	r24, Z
   14d6e:	28 2f       	mov	r18, r24
   14d70:	30 e0       	ldi	r19, 0x00	; 0
   14d72:	a9 01       	movw	r20, r18
   14d74:	40 52       	subi	r20, 0x20	; 32
   14d76:	51 09       	sbc	r21, r1
   14d78:	40 31       	cpi	r20, 0x10	; 16
   14d7a:	51 05       	cpc	r21, r1
   14d7c:	98 f4       	brcc	.+38     	; 0x14da4 <SS80_Command_State+0x148>
   14d7e:	80 52       	subi	r24, 0x20	; 32
   14d80:	1d df       	rcall	.-454    	; 0x14bbc <SS80_Check_Unit>
   14d82:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14d86:	85 ff       	sbrs	r24, 5
   14d88:	a0 c1       	rjmp	.+832    	; 0x150ca <SS80_Command_State+0x46e>
   14d8a:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   14d8e:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   14d92:	85 81       	ldd	r24, Z+5	; 0x05
   14d94:	90 e0       	ldi	r25, 0x00	; 0
   14d96:	ed b7       	in	r30, 0x3d	; 61
   14d98:	fe b7       	in	r31, 0x3e	; 62
   14d9a:	95 83       	std	Z+5, r25	; 0x05
   14d9c:	84 83       	std	Z+4, r24	; 0x04
   14d9e:	83 ef       	ldi	r24, 0xF3	; 243
   14da0:	92 e2       	ldi	r25, 0x22	; 34
   14da2:	19 c0       	rjmp	.+50     	; 0x14dd6 <SS80_Command_State+0x17a>
   14da4:	a9 01       	movw	r20, r18
   14da6:	40 54       	subi	r20, 0x40	; 64
   14da8:	51 09       	sbc	r21, r1
   14daa:	40 31       	cpi	r20, 0x10	; 16
   14dac:	51 05       	cpc	r21, r1
   14dae:	d0 f4       	brcc	.+52     	; 0x14de4 <SS80_Command_State+0x188>
   14db0:	80 54       	subi	r24, 0x40	; 64
   14db2:	2d df       	rcall	.-422    	; 0x14c0e <SS80_Check_Volume>
   14db4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14db8:	85 ff       	sbrs	r24, 5
   14dba:	87 c1       	rjmp	.+782    	; 0x150ca <SS80_Command_State+0x46e>
   14dbc:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   14dc0:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   14dc4:	86 81       	ldd	r24, Z+6	; 0x06
   14dc6:	90 e0       	ldi	r25, 0x00	; 0
   14dc8:	ed b7       	in	r30, 0x3d	; 61
   14dca:	fe b7       	in	r31, 0x3e	; 62
   14dcc:	95 83       	std	Z+5, r25	; 0x05
   14dce:	84 83       	std	Z+4, r24	; 0x04
   14dd0:	2a ed       	ldi	r18, 0xDA	; 218
   14dd2:	32 e2       	ldi	r19, 0x22	; 34
   14dd4:	c9 01       	movw	r24, r18
   14dd6:	a0 e0       	ldi	r26, 0x00	; 0
   14dd8:	81 83       	std	Z+1, r24	; 0x01
   14dda:	92 83       	std	Z+2, r25	; 0x02
   14ddc:	a3 83       	std	Z+3, r26	; 0x03
   14dde:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14de2:	73 c1       	rjmp	.+742    	; 0x150ca <SS80_Command_State+0x46e>
   14de4:	21 15       	cp	r18, r1
   14de6:	31 05       	cpc	r19, r1
   14de8:	79 f4       	brne	.+30     	; 0x14e08 <SS80_Command_State+0x1ac>
   14dea:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   14dee:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   14df2:	81 e0       	ldi	r24, 0x01	; 1
   14df4:	90 e0       	ldi	r25, 0x00	; 0
   14df6:	91 83       	std	Z+1, r25	; 0x01
   14df8:	80 83       	st	Z, r24
   14dfa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14dfe:	85 ff       	sbrs	r24, 5
   14e00:	66 c1       	rjmp	.+716    	; 0x150ce <SS80_Command_State+0x472>
   14e02:	82 ec       	ldi	r24, 0xC2	; 194
   14e04:	92 e2       	ldi	r25, 0x22	; 34
   14e06:	0f c0       	rjmp	.+30     	; 0x14e26 <SS80_Command_State+0x1ca>
   14e08:	22 30       	cpi	r18, 0x02	; 2
   14e0a:	31 05       	cpc	r19, r1
   14e0c:	a9 f4       	brne	.+42     	; 0x14e38 <SS80_Command_State+0x1dc>
   14e0e:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   14e12:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   14e16:	31 83       	std	Z+1, r19	; 0x01
   14e18:	20 83       	st	Z, r18
   14e1a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14e1e:	85 ff       	sbrs	r24, 5
   14e20:	56 c1       	rjmp	.+684    	; 0x150ce <SS80_Command_State+0x472>
   14e22:	89 ea       	ldi	r24, 0xA9	; 169
   14e24:	92 e2       	ldi	r25, 0x22	; 34
   14e26:	a0 e0       	ldi	r26, 0x00	; 0
   14e28:	ed b7       	in	r30, 0x3d	; 61
   14e2a:	fe b7       	in	r31, 0x3e	; 62
   14e2c:	81 83       	std	Z+1, r24	; 0x01
   14e2e:	92 83       	std	Z+2, r25	; 0x02
   14e30:	a3 83       	std	Z+3, r26	; 0x03
   14e32:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14e36:	4b c1       	rjmp	.+662    	; 0x150ce <SS80_Command_State+0x472>
   14e38:	20 31       	cpi	r18, 0x10	; 16
   14e3a:	31 05       	cpc	r19, r1
   14e3c:	b1 f5       	brne	.+108    	; 0x14eaa <SS80_Command_State+0x24e>
   14e3e:	20 91 69 19 	lds	r18, 0x1969	; 0x801969 <SS80s>
   14e42:	30 91 6a 19 	lds	r19, 0x196A	; 0x80196a <SS80s+0x1>
   14e46:	3d 87       	std	Y+13, r19	; 0x0d
   14e48:	2c 87       	std	Y+12, r18	; 0x0c
   14e4a:	46 e0       	ldi	r20, 0x06	; 6
   14e4c:	50 e0       	ldi	r21, 0x00	; 0
   14e4e:	b8 01       	movw	r22, r16
   14e50:	8d ee       	ldi	r24, 0xED	; 237
   14e52:	9c e1       	ldi	r25, 0x1C	; 28
   14e54:	0e 94 b0 bd 	call	0x17b60	; 0x17b60 <B2V_MSB>
   14e58:	ec 85       	ldd	r30, Y+12	; 0x0c
   14e5a:	fd 85       	ldd	r31, Y+13	; 0x0d
   14e5c:	67 83       	std	Z+7, r22	; 0x07
   14e5e:	70 87       	std	Z+8, r23	; 0x08
   14e60:	81 87       	std	Z+9, r24	; 0x09
   14e62:	92 87       	std	Z+10, r25	; 0x0a
   14e64:	87 01       	movw	r16, r14
   14e66:	09 5f       	subi	r16, 0xF9	; 249
   14e68:	1f 4f       	sbci	r17, 0xFF	; 255
   14e6a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14e6e:	85 ff       	sbrs	r24, 5
   14e70:	2c c1       	rjmp	.+600    	; 0x150ca <SS80_Command_State+0x46e>
   14e72:	20 91 69 19 	lds	r18, 0x1969	; 0x801969 <SS80s>
   14e76:	30 91 6a 19 	lds	r19, 0x196A	; 0x80196a <SS80s+0x1>
   14e7a:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <SS80p>
   14e7e:	90 91 6c 19 	lds	r25, 0x196C	; 0x80196c <SS80p+0x1>
   14e82:	fc 01       	movw	r30, r24
   14e84:	a0 89       	ldd	r26, Z+16	; 0x10
   14e86:	b1 89       	ldd	r27, Z+17	; 0x11
   14e88:	f9 01       	movw	r30, r18
   14e8a:	27 81       	ldd	r18, Z+7	; 0x07
   14e8c:	30 85       	ldd	r19, Z+8	; 0x08
   14e8e:	41 85       	ldd	r20, Z+9	; 0x09
   14e90:	52 85       	ldd	r21, Z+10	; 0x0a
   14e92:	0e 94 3c e3 	call	0x1c678	; 0x1c678 <__muluhisi3>
   14e96:	ed b7       	in	r30, 0x3d	; 61
   14e98:	fe b7       	in	r31, 0x3e	; 62
   14e9a:	64 83       	std	Z+4, r22	; 0x04
   14e9c:	75 83       	std	Z+5, r23	; 0x05
   14e9e:	86 83       	std	Z+6, r24	; 0x06
   14ea0:	97 83       	std	Z+7, r25	; 0x07
   14ea2:	21 82       	std	Z+1, r2	; 0x01
   14ea4:	32 82       	std	Z+2, r3	; 0x02
   14ea6:	43 82       	std	Z+3, r4	; 0x03
   14ea8:	2e c0       	rjmp	.+92     	; 0x14f06 <SS80_Command_State+0x2aa>
   14eaa:	28 31       	cpi	r18, 0x18	; 24
   14eac:	31 05       	cpc	r19, r1
   14eae:	71 f5       	brne	.+92     	; 0x14f0c <SS80_Command_State+0x2b0>
   14eb0:	20 91 69 19 	lds	r18, 0x1969	; 0x801969 <SS80s>
   14eb4:	30 91 6a 19 	lds	r19, 0x196A	; 0x80196a <SS80s+0x1>
   14eb8:	3d 87       	std	Y+13, r19	; 0x0d
   14eba:	2c 87       	std	Y+12, r18	; 0x0c
   14ebc:	44 e0       	ldi	r20, 0x04	; 4
   14ebe:	50 e0       	ldi	r21, 0x00	; 0
   14ec0:	b8 01       	movw	r22, r16
   14ec2:	8d ee       	ldi	r24, 0xED	; 237
   14ec4:	9c e1       	ldi	r25, 0x1C	; 28
   14ec6:	0e 94 b0 bd 	call	0x17b60	; 0x17b60 <B2V_MSB>
   14eca:	ec 85       	ldd	r30, Y+12	; 0x0c
   14ecc:	fd 85       	ldd	r31, Y+13	; 0x0d
   14ece:	63 87       	std	Z+11, r22	; 0x0b
   14ed0:	74 87       	std	Z+12, r23	; 0x0c
   14ed2:	85 87       	std	Z+13, r24	; 0x0d
   14ed4:	96 87       	std	Z+14, r25	; 0x0e
   14ed6:	87 01       	movw	r16, r14
   14ed8:	0b 5f       	subi	r16, 0xFB	; 251
   14eda:	1f 4f       	sbci	r17, 0xFF	; 255
   14edc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14ee0:	85 ff       	sbrs	r24, 5
   14ee2:	f3 c0       	rjmp	.+486    	; 0x150ca <SS80_Command_State+0x46e>
   14ee4:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   14ee8:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   14eec:	83 85       	ldd	r24, Z+11	; 0x0b
   14eee:	94 85       	ldd	r25, Z+12	; 0x0c
   14ef0:	a5 85       	ldd	r26, Z+13	; 0x0d
   14ef2:	b6 85       	ldd	r27, Z+14	; 0x0e
   14ef4:	ed b7       	in	r30, 0x3d	; 61
   14ef6:	fe b7       	in	r31, 0x3e	; 62
   14ef8:	84 83       	std	Z+4, r24	; 0x04
   14efa:	95 83       	std	Z+5, r25	; 0x05
   14efc:	a6 83       	std	Z+6, r26	; 0x06
   14efe:	b7 83       	std	Z+7, r27	; 0x07
   14f00:	a1 82       	std	Z+1, r10	; 0x01
   14f02:	b2 82       	std	Z+2, r11	; 0x02
   14f04:	c3 82       	std	Z+3, r12	; 0x03
   14f06:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14f0a:	df c0       	rjmp	.+446    	; 0x150ca <SS80_Command_State+0x46e>
   14f0c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14f10:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   14f14:	24 33       	cpi	r18, 0x34	; 52
   14f16:	31 05       	cpc	r19, r1
   14f18:	41 f4       	brne	.+16     	; 0x14f2a <SS80_Command_State+0x2ce>
   14f1a:	85 ff       	sbrs	r24, 5
   14f1c:	d6 c0       	rjmp	.+428    	; 0x150ca <SS80_Command_State+0x46e>
   14f1e:	ed b7       	in	r30, 0x3d	; 61
   14f20:	fe b7       	in	r31, 0x3e	; 62
   14f22:	61 82       	std	Z+1, r6	; 0x01
   14f24:	72 82       	std	Z+2, r7	; 0x02
   14f26:	83 82       	std	Z+3, r8	; 0x03
   14f28:	2b c0       	rjmp	.+86     	; 0x14f80 <SS80_Command_State+0x324>
   14f2a:	29 33       	cpi	r18, 0x39	; 57
   14f2c:	31 05       	cpc	r19, r1
   14f2e:	49 f4       	brne	.+18     	; 0x14f42 <SS80_Command_State+0x2e6>
   14f30:	87 01       	movw	r16, r14
   14f32:	0d 5f       	subi	r16, 0xFD	; 253
   14f34:	1f 4f       	sbci	r17, 0xFF	; 255
   14f36:	85 ff       	sbrs	r24, 5
   14f38:	c8 c0       	rjmp	.+400    	; 0x150ca <SS80_Command_State+0x46e>
   14f3a:	2c 89       	ldd	r18, Y+20	; 0x14
   14f3c:	3d 89       	ldd	r19, Y+21	; 0x15
   14f3e:	4e 89       	ldd	r20, Y+22	; 0x16
   14f40:	1a c0       	rjmp	.+52     	; 0x14f76 <SS80_Command_State+0x31a>
   14f42:	2b 33       	cpi	r18, 0x3B	; 59
   14f44:	31 05       	cpc	r19, r1
   14f46:	49 f4       	brne	.+18     	; 0x14f5a <SS80_Command_State+0x2fe>
   14f48:	87 01       	movw	r16, r14
   14f4a:	0e 5f       	subi	r16, 0xFE	; 254
   14f4c:	1f 4f       	sbci	r17, 0xFF	; 255
   14f4e:	85 ff       	sbrs	r24, 5
   14f50:	bc c0       	rjmp	.+376    	; 0x150ca <SS80_Command_State+0x46e>
   14f52:	29 89       	ldd	r18, Y+17	; 0x11
   14f54:	3a 89       	ldd	r19, Y+18	; 0x12
   14f56:	4b 89       	ldd	r20, Y+19	; 0x13
   14f58:	0e c0       	rjmp	.+28     	; 0x14f76 <SS80_Command_State+0x31a>
   14f5a:	28 34       	cpi	r18, 0x48	; 72
   14f5c:	31 05       	cpc	r19, r1
   14f5e:	99 f4       	brne	.+38     	; 0x14f86 <SS80_Command_State+0x32a>
   14f60:	87 01       	movw	r16, r14
   14f62:	0e 5f       	subi	r16, 0xFE	; 254
   14f64:	1f 4f       	sbci	r17, 0xFF	; 255
   14f66:	80 73       	andi	r24, 0x30	; 48
   14f68:	99 27       	eor	r25, r25
   14f6a:	89 2b       	or	r24, r25
   14f6c:	09 f4       	brne	.+2      	; 0x14f70 <SS80_Command_State+0x314>
   14f6e:	ad c0       	rjmp	.+346    	; 0x150ca <SS80_Command_State+0x46e>
   14f70:	2e 85       	ldd	r18, Y+14	; 0x0e
   14f72:	3f 85       	ldd	r19, Y+15	; 0x0f
   14f74:	48 89       	ldd	r20, Y+16	; 0x10
   14f76:	ed b7       	in	r30, 0x3d	; 61
   14f78:	fe b7       	in	r31, 0x3e	; 62
   14f7a:	21 83       	std	Z+1, r18	; 0x01
   14f7c:	32 83       	std	Z+2, r19	; 0x02
   14f7e:	43 83       	std	Z+3, r20	; 0x03
   14f80:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14f84:	a2 c0       	rjmp	.+324    	; 0x150ca <SS80_Command_State+0x46e>
   14f86:	24 30       	cpi	r18, 0x04	; 4
   14f88:	31 05       	cpc	r19, r1
   14f8a:	41 f4       	brne	.+16     	; 0x14f9c <SS80_Command_State+0x340>
   14f8c:	80 73       	andi	r24, 0x30	; 48
   14f8e:	99 27       	eor	r25, r25
   14f90:	89 2b       	or	r24, r25
   14f92:	09 f4       	brne	.+2      	; 0x14f96 <SS80_Command_State+0x33a>
   14f94:	9c c0       	rjmp	.+312    	; 0x150ce <SS80_Command_State+0x472>
   14f96:	8c ee       	ldi	r24, 0xEC	; 236
   14f98:	91 e2       	ldi	r25, 0x21	; 33
   14f9a:	45 cf       	rjmp	.-374    	; 0x14e26 <SS80_Command_State+0x1ca>
   14f9c:	2e 30       	cpi	r18, 0x0E	; 14
   14f9e:	31 05       	cpc	r19, r1
   14fa0:	29 f4       	brne	.+10     	; 0x14fac <SS80_Command_State+0x350>
   14fa2:	85 ff       	sbrs	r24, 5
   14fa4:	94 c0       	rjmp	.+296    	; 0x150ce <SS80_Command_State+0x472>
   14fa6:	86 ed       	ldi	r24, 0xD6	; 214
   14fa8:	91 e2       	ldi	r25, 0x21	; 33
   14faa:	3d cf       	rjmp	.-390    	; 0x14e26 <SS80_Command_State+0x1ca>
   14fac:	2f 30       	cpi	r18, 0x0F	; 15
   14fae:	31 05       	cpc	r19, r1
   14fb0:	29 f4       	brne	.+10     	; 0x14fbc <SS80_Command_State+0x360>
   14fb2:	85 ff       	sbrs	r24, 5
   14fb4:	8c c0       	rjmp	.+280    	; 0x150ce <SS80_Command_State+0x472>
   14fb6:	89 eb       	ldi	r24, 0xB9	; 185
   14fb8:	91 e2       	ldi	r25, 0x21	; 33
   14fba:	35 cf       	rjmp	.-406    	; 0x14e26 <SS80_Command_State+0x1ca>
   14fbc:	21 33       	cpi	r18, 0x31	; 49
   14fbe:	31 05       	cpc	r19, r1
   14fc0:	59 f4       	brne	.+22     	; 0x14fd8 <SS80_Command_State+0x37c>
   14fc2:	87 01       	movw	r16, r14
   14fc4:	0d 5f       	subi	r16, 0xFD	; 253
   14fc6:	1f 4f       	sbci	r17, 0xFF	; 255
   14fc8:	80 73       	andi	r24, 0x30	; 48
   14fca:	99 27       	eor	r25, r25
   14fcc:	89 2b       	or	r24, r25
   14fce:	09 f4       	brne	.+2      	; 0x14fd2 <SS80_Command_State+0x376>
   14fd0:	7e c0       	rjmp	.+252    	; 0x150ce <SS80_Command_State+0x472>
   14fd2:	8d e9       	ldi	r24, 0x9D	; 157
   14fd4:	91 e2       	ldi	r25, 0x21	; 33
   14fd6:	27 cf       	rjmp	.-434    	; 0x14e26 <SS80_Command_State+0x1ca>
   14fd8:	25 33       	cpi	r18, 0x35	; 53
   14fda:	31 05       	cpc	r19, r1
   14fdc:	69 f4       	brne	.+26     	; 0x14ff8 <SS80_Command_State+0x39c>
   14fde:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   14fe2:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   14fe6:	24 e0       	ldi	r18, 0x04	; 4
   14fe8:	30 e0       	ldi	r19, 0x00	; 0
   14fea:	31 83       	std	Z+1, r19	; 0x01
   14fec:	20 83       	st	Z, r18
   14fee:	85 ff       	sbrs	r24, 5
   14ff0:	6e c0       	rjmp	.+220    	; 0x150ce <SS80_Command_State+0x472>
   14ff2:	8c e8       	ldi	r24, 0x8C	; 140
   14ff4:	91 e2       	ldi	r25, 0x21	; 33
   14ff6:	17 cf       	rjmp	.-466    	; 0x14e26 <SS80_Command_State+0x1ca>
   14ff8:	27 33       	cpi	r18, 0x37	; 55
   14ffa:	31 05       	cpc	r19, r1
   14ffc:	59 f4       	brne	.+22     	; 0x15014 <SS80_Command_State+0x3b8>
   14ffe:	87 01       	movw	r16, r14
   15000:	0d 5f       	subi	r16, 0xFD	; 253
   15002:	1f 4f       	sbci	r17, 0xFF	; 255
   15004:	80 73       	andi	r24, 0x30	; 48
   15006:	99 27       	eor	r25, r25
   15008:	89 2b       	or	r24, r25
   1500a:	09 f4       	brne	.+2      	; 0x1500e <SS80_Command_State+0x3b2>
   1500c:	60 c0       	rjmp	.+192    	; 0x150ce <SS80_Command_State+0x472>
   1500e:	8e e6       	ldi	r24, 0x6E	; 110
   15010:	91 e2       	ldi	r25, 0x21	; 33
   15012:	09 cf       	rjmp	.-494    	; 0x14e26 <SS80_Command_State+0x1ca>
   15014:	2e 33       	cpi	r18, 0x3E	; 62
   15016:	31 05       	cpc	r19, r1
   15018:	c1 f4       	brne	.+48     	; 0x1504a <SS80_Command_State+0x3ee>
   1501a:	80 73       	andi	r24, 0x30	; 48
   1501c:	99 27       	eor	r25, r25
   1501e:	89 2b       	or	r24, r25
   15020:	81 f0       	breq	.+32     	; 0x15042 <SS80_Command_State+0x3e6>
   15022:	8f e4       	ldi	r24, 0x4F	; 79
   15024:	91 e2       	ldi	r25, 0x21	; 33
   15026:	a0 e0       	ldi	r26, 0x00	; 0
   15028:	ed b7       	in	r30, 0x3d	; 61
   1502a:	fe b7       	in	r31, 0x3e	; 62
   1502c:	81 83       	std	Z+1, r24	; 0x01
   1502e:	92 83       	std	Z+2, r25	; 0x02
   15030:	a3 83       	std	Z+3, r26	; 0x03
   15032:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15036:	69 e7       	ldi	r22, 0x79	; 121
   15038:	70 e1       	ldi	r23, 0x10	; 16
   1503a:	c8 01       	movw	r24, r16
   1503c:	83 51       	subi	r24, 0x13	; 19
   1503e:	93 4e       	sbci	r25, 0xE3	; 227
   15040:	69 dc       	rcall	.-1838   	; 0x14914 <SS80_display_extended_status>
   15042:	87 01       	movw	r16, r14
   15044:	07 5f       	subi	r16, 0xF7	; 247
   15046:	1f 4f       	sbci	r17, 0xFF	; 255
   15048:	42 c0       	rjmp	.+132    	; 0x150ce <SS80_Command_State+0x472>
   1504a:	2c 34       	cpi	r18, 0x4C	; 76
   1504c:	31 05       	cpc	r19, r1
   1504e:	39 f4       	brne	.+14     	; 0x1505e <SS80_Command_State+0x402>
   15050:	80 73       	andi	r24, 0x30	; 48
   15052:	99 27       	eor	r25, r25
   15054:	89 2b       	or	r24, r25
   15056:	d9 f1       	breq	.+118    	; 0x150ce <SS80_Command_State+0x472>
   15058:	84 e3       	ldi	r24, 0x34	; 52
   1505a:	91 e2       	ldi	r25, 0x21	; 33
   1505c:	e4 ce       	rjmp	.-568    	; 0x14e26 <SS80_Command_State+0x1ca>
   1505e:	2d 34       	cpi	r18, 0x4D	; 77
   15060:	31 05       	cpc	r19, r1
   15062:	39 f4       	brne	.+14     	; 0x15072 <SS80_Command_State+0x416>
   15064:	80 73       	andi	r24, 0x30	; 48
   15066:	99 27       	eor	r25, r25
   15068:	89 2b       	or	r24, r25
   1506a:	89 f1       	breq	.+98     	; 0x150ce <SS80_Command_State+0x472>
   1506c:	8b e1       	ldi	r24, 0x1B	; 27
   1506e:	91 e2       	ldi	r25, 0x21	; 33
   15070:	da ce       	rjmp	.-588    	; 0x14e26 <SS80_Command_State+0x1ca>
   15072:	2d 30       	cpi	r18, 0x0D	; 13
   15074:	31 05       	cpc	r19, r1
   15076:	69 f4       	brne	.+26     	; 0x15092 <SS80_Command_State+0x436>
   15078:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   1507c:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   15080:	23 e0       	ldi	r18, 0x03	; 3
   15082:	30 e0       	ldi	r19, 0x00	; 0
   15084:	31 83       	std	Z+1, r19	; 0x01
   15086:	20 83       	st	Z, r18
   15088:	85 ff       	sbrs	r24, 5
   1508a:	21 c0       	rjmp	.+66     	; 0x150ce <SS80_Command_State+0x472>
   1508c:	84 e0       	ldi	r24, 0x04	; 4
   1508e:	91 e2       	ldi	r25, 0x21	; 33
   15090:	ca ce       	rjmp	.-620    	; 0x14e26 <SS80_Command_State+0x1ca>
   15092:	23 33       	cpi	r18, 0x33	; 51
   15094:	31 05       	cpc	r19, r1
   15096:	51 f4       	brne	.+20     	; 0x150ac <SS80_Command_State+0x450>
   15098:	87 01       	movw	r16, r14
   1509a:	0c 5f       	subi	r16, 0xFC	; 252
   1509c:	1f 4f       	sbci	r17, 0xFF	; 255
   1509e:	80 73       	andi	r24, 0x30	; 48
   150a0:	99 27       	eor	r25, r25
   150a2:	89 2b       	or	r24, r25
   150a4:	a1 f0       	breq	.+40     	; 0x150ce <SS80_Command_State+0x472>
   150a6:	81 ee       	ldi	r24, 0xE1	; 225
   150a8:	90 e2       	ldi	r25, 0x20	; 32
   150aa:	bd ce       	rjmp	.-646    	; 0x14e26 <SS80_Command_State+0x1ca>
   150ac:	80 ff       	sbrs	r24, 0
   150ae:	28 c0       	rjmp	.+80     	; 0x15100 <SS80_Command_State+0x4a4>
   150b0:	ed b7       	in	r30, 0x3d	; 61
   150b2:	fe b7       	in	r31, 0x3e	; 62
   150b4:	35 83       	std	Z+5, r19	; 0x05
   150b6:	24 83       	std	Z+4, r18	; 0x04
   150b8:	81 ec       	ldi	r24, 0xC1	; 193
   150ba:	90 e2       	ldi	r25, 0x20	; 32
   150bc:	a0 e0       	ldi	r26, 0x00	; 0
   150be:	81 83       	std	Z+1, r24	; 0x01
   150c0:	92 83       	std	Z+2, r25	; 0x02
   150c2:	a3 83       	std	Z+3, r26	; 0x03
   150c4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   150c8:	02 c0       	rjmp	.+4      	; 0x150ce <SS80_Command_State+0x472>
   150ca:	78 01       	movw	r14, r16
   150cc:	43 ce       	rjmp	.-890    	; 0x14d54 <SS80_Command_State+0xf8>
   150ce:	8a 85       	ldd	r24, Y+10	; 0x0a
   150d0:	9b 85       	ldd	r25, Y+11	; 0x0b
   150d2:	08 17       	cp	r16, r24
   150d4:	19 07       	cpc	r17, r25
   150d6:	a1 f0       	breq	.+40     	; 0x15100 <SS80_Command_State+0x4a4>
   150d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   150dc:	80 ff       	sbrs	r24, 0
   150de:	10 c0       	rjmp	.+32     	; 0x15100 <SS80_Command_State+0x4a4>
   150e0:	2a 85       	ldd	r18, Y+10	; 0x0a
   150e2:	3b 85       	ldd	r19, Y+11	; 0x0b
   150e4:	ed b7       	in	r30, 0x3d	; 61
   150e6:	fe b7       	in	r31, 0x3e	; 62
   150e8:	37 83       	std	Z+7, r19	; 0x07
   150ea:	26 83       	std	Z+6, r18	; 0x06
   150ec:	15 83       	std	Z+5, r17	; 0x05
   150ee:	04 83       	std	Z+4, r16	; 0x04
   150f0:	89 e8       	ldi	r24, 0x89	; 137
   150f2:	90 e2       	ldi	r25, 0x20	; 32
   150f4:	a0 e0       	ldi	r26, 0x00	; 0
   150f6:	81 83       	std	Z+1, r24	; 0x01
   150f8:	92 83       	std	Z+2, r25	; 0x02
   150fa:	a3 83       	std	Z+3, r26	; 0x03
   150fc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15100:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   15104:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   15108:	81 81       	ldd	r24, Z+1	; 0x01
   1510a:	90 e0       	ldi	r25, 0x00	; 0
   1510c:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
   15110:	88 85       	ldd	r24, Y+8	; 0x08
   15112:	99 85       	ldd	r25, Y+9	; 0x09
   15114:	88 27       	eor	r24, r24
   15116:	90 7d       	andi	r25, 0xD0	; 208
   15118:	02 c0       	rjmp	.+4      	; 0x1511e <SS80_Command_State+0x4c2>
   1511a:	80 e0       	ldi	r24, 0x00	; 0
   1511c:	90 e0       	ldi	r25, 0x00	; 0
   1511e:	66 96       	adiw	r28, 0x16	; 22
   15120:	0f b6       	in	r0, 0x3f	; 63
   15122:	f8 94       	cli
   15124:	de bf       	out	0x3e, r29	; 62
   15126:	0f be       	out	0x3f, r0	; 63
   15128:	cd bf       	out	0x3d, r28	; 61
   1512a:	df 91       	pop	r29
   1512c:	cf 91       	pop	r28
   1512e:	1f 91       	pop	r17
   15130:	0f 91       	pop	r16
   15132:	ff 90       	pop	r15
   15134:	ef 90       	pop	r14
   15136:	cf 90       	pop	r12
   15138:	bf 90       	pop	r11
   1513a:	af 90       	pop	r10
   1513c:	8f 90       	pop	r8
   1513e:	7f 90       	pop	r7
   15140:	6f 90       	pop	r6
   15142:	4f 90       	pop	r4
   15144:	3f 90       	pop	r3
   15146:	2f 90       	pop	r2
   15148:	08 95       	ret

0001514a <SS80_cmd_seek>:
   1514a:	a7 e0       	ldi	r26, 0x07	; 7
   1514c:	b0 e0       	ldi	r27, 0x00	; 0
   1514e:	eb ea       	ldi	r30, 0xAB	; 171
   15150:	f8 ea       	ldi	r31, 0xA8	; 168
   15152:	0c 94 5e e3 	jmp	0x1c6bc	; 0x1c6bc <__prologue_saves__+0x4>
   15156:	c0 91 69 19 	lds	r28, 0x1969	; 0x801969 <SS80s>
   1515a:	d0 91 6a 19 	lds	r29, 0x196A	; 0x80196a <SS80s+0x1>
   1515e:	8f 80       	ldd	r8, Y+7	; 0x07
   15160:	98 84       	ldd	r9, Y+8	; 0x08
   15162:	a9 84       	ldd	r10, Y+9	; 0x09
   15164:	ba 84       	ldd	r11, Y+10	; 0x0a
   15166:	00 91 6b 19 	lds	r16, 0x196B	; 0x80196b <SS80p>
   1516a:	10 91 6c 19 	lds	r17, 0x196C	; 0x80196c <SS80p+0x1>
   1516e:	f8 01       	movw	r30, r16
   15170:	c0 88       	ldd	r12, Z+16	; 0x10
   15172:	d1 88       	ldd	r13, Z+17	; 0x11
   15174:	e1 2c       	mov	r14, r1
   15176:	f1 2c       	mov	r15, r1
   15178:	6b 85       	ldd	r22, Y+11	; 0x0b
   1517a:	7c 85       	ldd	r23, Y+12	; 0x0c
   1517c:	8d 85       	ldd	r24, Y+13	; 0x0d
   1517e:	9e 85       	ldd	r25, Y+14	; 0x0e
   15180:	a7 01       	movw	r20, r14
   15182:	96 01       	movw	r18, r12
   15184:	0e 94 ef e2 	call	0x1c5de	; 0x1c5de <__udivmodsi4>
   15188:	da 01       	movw	r26, r20
   1518a:	c9 01       	movw	r24, r18
   1518c:	88 0d       	add	r24, r8
   1518e:	99 1d       	adc	r25, r9
   15190:	aa 1d       	adc	r26, r10
   15192:	bb 1d       	adc	r27, r11
   15194:	f8 01       	movw	r30, r16
   15196:	46 a0       	ldd	r4, Z+38	; 0x26
   15198:	57 a0       	ldd	r5, Z+39	; 0x27
   1519a:	60 a4       	ldd	r6, Z+40	; 0x28
   1519c:	71 a4       	ldd	r7, Z+41	; 0x29
   1519e:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   151a2:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   151a6:	48 16       	cp	r4, r24
   151a8:	59 06       	cpc	r5, r25
   151aa:	6a 06       	cpc	r6, r26
   151ac:	7b 06       	cpc	r7, r27
   151ae:	f0 f4       	brcc	.+60     	; 0x151ec <SS80_cmd_seek+0xa2>
   151b0:	81 e0       	ldi	r24, 0x01	; 1
   151b2:	8a 83       	std	Y+2, r24	; 0x02
   151b4:	8b 81       	ldd	r24, Y+3	; 0x03
   151b6:	9c 81       	ldd	r25, Y+4	; 0x04
   151b8:	84 60       	ori	r24, 0x04	; 4
   151ba:	9c 83       	std	Y+4, r25	; 0x04
   151bc:	8b 83       	std	Y+3, r24	; 0x03
   151be:	40 ff       	sbrs	r20, 0
   151c0:	31 c0       	rjmp	.+98     	; 0x15224 <SS80_cmd_seek+0xda>
   151c2:	a0 89       	ldd	r26, Z+16	; 0x10
   151c4:	b1 89       	ldd	r27, Z+17	; 0x11
   151c6:	a5 01       	movw	r20, r10
   151c8:	94 01       	movw	r18, r8
   151ca:	0e 94 3c e3 	call	0x1c678	; 0x1c678 <__muluhisi3>
   151ce:	ed b7       	in	r30, 0x3d	; 61
   151d0:	fe b7       	in	r31, 0x3e	; 62
   151d2:	64 83       	std	Z+4, r22	; 0x04
   151d4:	75 83       	std	Z+5, r23	; 0x05
   151d6:	86 83       	std	Z+6, r24	; 0x06
   151d8:	97 83       	std	Z+7, r25	; 0x07
   151da:	86 e4       	ldi	r24, 0x46	; 70
   151dc:	9f e1       	ldi	r25, 0x1F	; 31
   151de:	a0 e0       	ldi	r26, 0x00	; 0
   151e0:	81 83       	std	Z+1, r24	; 0x01
   151e2:	92 83       	std	Z+2, r25	; 0x02
   151e4:	a3 83       	std	Z+3, r26	; 0x03
   151e6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   151ea:	1c c0       	rjmp	.+56     	; 0x15224 <SS80_cmd_seek+0xda>
   151ec:	ca 01       	movw	r24, r20
   151ee:	80 72       	andi	r24, 0x20	; 32
   151f0:	99 27       	eor	r25, r25
   151f2:	45 ff       	sbrs	r20, 5
   151f4:	19 c0       	rjmp	.+50     	; 0x15228 <SS80_cmd_seek+0xde>
   151f6:	a5 01       	movw	r20, r10
   151f8:	94 01       	movw	r18, r8
   151fa:	c7 01       	movw	r24, r14
   151fc:	b6 01       	movw	r22, r12
   151fe:	0e 94 ad e2 	call	0x1c55a	; 0x1c55a <__mulsi3>
   15202:	ed b7       	in	r30, 0x3d	; 61
   15204:	fe b7       	in	r31, 0x3e	; 62
   15206:	64 83       	std	Z+4, r22	; 0x04
   15208:	75 83       	std	Z+5, r23	; 0x05
   1520a:	86 83       	std	Z+6, r24	; 0x06
   1520c:	97 83       	std	Z+7, r25	; 0x07
   1520e:	82 e3       	ldi	r24, 0x32	; 50
   15210:	9f e1       	ldi	r25, 0x1F	; 31
   15212:	a0 e0       	ldi	r26, 0x00	; 0
   15214:	81 83       	std	Z+1, r24	; 0x01
   15216:	92 83       	std	Z+2, r25	; 0x02
   15218:	a3 83       	std	Z+3, r26	; 0x03
   1521a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1521e:	80 e0       	ldi	r24, 0x00	; 0
   15220:	90 e0       	ldi	r25, 0x00	; 0
   15222:	02 c0       	rjmp	.+4      	; 0x15228 <SS80_cmd_seek+0xde>
   15224:	81 e0       	ldi	r24, 0x01	; 1
   15226:	90 e0       	ldi	r25, 0x00	; 0
   15228:	cd b7       	in	r28, 0x3d	; 61
   1522a:	de b7       	in	r29, 0x3e	; 62
   1522c:	27 96       	adiw	r28, 0x07	; 7
   1522e:	e0 e1       	ldi	r30, 0x10	; 16
   15230:	0c 94 7a e3 	jmp	0x1c6f4	; 0x1c6f4 <__epilogue_restores__+0x4>

00015234 <SS80_locate_and_write>:
   15234:	a3 e1       	ldi	r26, 0x13	; 19
   15236:	b0 e0       	ldi	r27, 0x00	; 0
   15238:	e0 e2       	ldi	r30, 0x20	; 32
   1523a:	f9 ea       	ldi	r31, 0xA9	; 169
   1523c:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
   15240:	00 91 69 19 	lds	r16, 0x1969	; 0x801969 <SS80s>
   15244:	10 91 6a 19 	lds	r17, 0x196A	; 0x80196a <SS80s+0x1>
   15248:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <SS80p>
   1524c:	90 91 6c 19 	lds	r25, 0x196C	; 0x80196c <SS80p+0x1>
   15250:	fc 01       	movw	r30, r24
   15252:	a0 89       	ldd	r26, Z+16	; 0x10
   15254:	b1 89       	ldd	r27, Z+17	; 0x11
   15256:	f8 01       	movw	r30, r16
   15258:	27 81       	ldd	r18, Z+7	; 0x07
   1525a:	30 85       	ldd	r19, Z+8	; 0x08
   1525c:	41 85       	ldd	r20, Z+9	; 0x09
   1525e:	52 85       	ldd	r21, Z+10	; 0x0a
   15260:	0e 94 3c e3 	call	0x1c678	; 0x1c678 <__muluhisi3>
   15264:	4b 01       	movw	r8, r22
   15266:	5c 01       	movw	r10, r24
   15268:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1526c:	85 ff       	sbrs	r24, 5
   1526e:	16 c0       	rjmp	.+44     	; 0x1529c <SS80_locate_and_write+0x68>
   15270:	83 85       	ldd	r24, Z+11	; 0x0b
   15272:	94 85       	ldd	r25, Z+12	; 0x0c
   15274:	a5 85       	ldd	r26, Z+13	; 0x0d
   15276:	b6 85       	ldd	r27, Z+14	; 0x0e
   15278:	ed b7       	in	r30, 0x3d	; 61
   1527a:	fe b7       	in	r31, 0x3e	; 62
   1527c:	80 87       	std	Z+8, r24	; 0x08
   1527e:	91 87       	std	Z+9, r25	; 0x09
   15280:	a2 87       	std	Z+10, r26	; 0x0a
   15282:	b3 87       	std	Z+11, r27	; 0x0b
   15284:	84 82       	std	Z+4, r8	; 0x04
   15286:	95 82       	std	Z+5, r9	; 0x05
   15288:	a6 82       	std	Z+6, r10	; 0x06
   1528a:	b7 82       	std	Z+7, r11	; 0x07
   1528c:	89 ec       	ldi	r24, 0xC9	; 201
   1528e:	94 e2       	ldi	r25, 0x24	; 36
   15290:	a0 e0       	ldi	r26, 0x00	; 0
   15292:	81 83       	std	Z+1, r24	; 0x01
   15294:	92 83       	std	Z+2, r25	; 0x02
   15296:	a3 83       	std	Z+3, r26	; 0x03
   15298:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1529c:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   152a0:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   152a4:	12 82       	std	Z+2, r1	; 0x02
   152a6:	54 98       	cbi	0x0a, 4	; 10
   152a8:	4c 99       	sbic	0x09, 4	; 9
   152aa:	03 c0       	rjmp	.+6      	; 0x152b2 <SS80_locate_and_write+0x7e>
   152ac:	80 e0       	ldi	r24, 0x00	; 0
   152ae:	90 e1       	ldi	r25, 0x10	; 16
   152b0:	4f c1       	rjmp	.+670    	; 0x15550 <SS80_locate_and_write+0x31c>
   152b2:	4b df       	rcall	.-362    	; 0x1514a <SS80_cmd_seek>
   152b4:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   152b8:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   152bc:	89 2b       	or	r24, r25
   152be:	41 f0       	breq	.+16     	; 0x152d0 <SS80_locate_and_write+0x9c>
   152c0:	83 81       	ldd	r24, Z+3	; 0x03
   152c2:	94 81       	ldd	r25, Z+4	; 0x04
   152c4:	82 60       	ori	r24, 0x02	; 2
   152c6:	94 83       	std	Z+4, r25	; 0x04
   152c8:	83 83       	std	Z+3, r24	; 0x03
   152ca:	01 e0       	ldi	r16, 0x01	; 1
   152cc:	10 e0       	ldi	r17, 0x00	; 0
   152ce:	02 c0       	rjmp	.+4      	; 0x152d4 <SS80_locate_and_write+0xa0>
   152d0:	00 e0       	ldi	r16, 0x00	; 0
   152d2:	10 e0       	ldi	r17, 0x00	; 0
   152d4:	23 84       	ldd	r2, Z+11	; 0x0b
   152d6:	34 84       	ldd	r3, Z+12	; 0x0c
   152d8:	1d 86       	std	Y+13, r1	; 0x0d
   152da:	1c 86       	std	Y+12, r1	; 0x0c
   152dc:	41 2c       	mov	r4, r1
   152de:	51 2c       	mov	r5, r1
   152e0:	32 01       	movw	r6, r4
   152e2:	8c e7       	ldi	r24, 0x7C	; 124
   152e4:	94 e2       	ldi	r25, 0x24	; 36
   152e6:	9c 01       	movw	r18, r24
   152e8:	40 e0       	ldi	r20, 0x00	; 0
   152ea:	2e 87       	std	Y+14, r18	; 0x0e
   152ec:	3f 87       	std	Y+15, r19	; 0x0f
   152ee:	48 8b       	std	Y+16, r20	; 0x10
   152f0:	82 ea       	ldi	r24, 0xA2	; 162
   152f2:	94 e2       	ldi	r25, 0x24	; 36
   152f4:	9c 01       	movw	r18, r24
   152f6:	40 e0       	ldi	r20, 0x00	; 0
   152f8:	29 8b       	std	Y+17, r18	; 0x11
   152fa:	3a 8b       	std	Y+18, r19	; 0x12
   152fc:	4b 8b       	std	Y+19, r20	; 0x13
   152fe:	12 14       	cp	r1, r2
   15300:	13 04       	cpc	r1, r3
   15302:	0c f0       	brlt	.+2      	; 0x15306 <SS80_locate_and_write+0xd2>
   15304:	f5 c0       	rjmp	.+490    	; 0x154f0 <SS80_locate_and_write+0x2bc>
   15306:	54 98       	cbi	0x0a, 4	; 10
   15308:	4c 9b       	sbis	0x09, 4	; 9
   1530a:	d0 cf       	rjmp	.-96     	; 0x152ac <SS80_locate_and_write+0x78>
   1530c:	71 01       	movw	r14, r2
   1530e:	31 e0       	ldi	r19, 0x01	; 1
   15310:	23 16       	cp	r2, r19
   15312:	33 06       	cpc	r3, r19
   15314:	1c f0       	brlt	.+6      	; 0x1531c <SS80_locate_and_write+0xe8>
   15316:	e1 2c       	mov	r14, r1
   15318:	ff 24       	eor	r15, r15
   1531a:	f3 94       	inc	r15
   1531c:	ed ee       	ldi	r30, 0xED	; 237
   1531e:	fc e1       	ldi	r31, 0x1C	; 28
   15320:	20 e0       	ldi	r18, 0x00	; 0
   15322:	32 e0       	ldi	r19, 0x02	; 2
   15324:	11 92       	st	Z+, r1
   15326:	21 50       	subi	r18, 0x01	; 1
   15328:	30 40       	sbci	r19, 0x00	; 0
   1532a:	e1 f7       	brne	.-8      	; 0x15324 <SS80_locate_and_write+0xf0>
   1532c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15330:	87 fd       	sbrc	r24, 7
   15332:	0e 94 5a 84 	call	0x108b4	; 0x108b4 <gpib_timer_elapsed_begin>
   15336:	ae 01       	movw	r20, r28
   15338:	44 5f       	subi	r20, 0xF4	; 244
   1533a:	5f 4f       	sbci	r21, 0xFF	; 255
   1533c:	b7 01       	movw	r22, r14
   1533e:	8d ee       	ldi	r24, 0xED	; 237
   15340:	9c e1       	ldi	r25, 0x1C	; 28
   15342:	0e 94 e1 89 	call	0x113c2	; 0x113c2 <gpib_read_str>
   15346:	6c 01       	movw	r12, r24
   15348:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1534c:	87 ff       	sbrs	r24, 7
   1534e:	04 c0       	rjmp	.+8      	; 0x15358 <SS80_locate_and_write+0x124>
   15350:	85 e9       	ldi	r24, 0x95	; 149
   15352:	90 e1       	ldi	r25, 0x10	; 16
   15354:	0e 94 6c 84 	call	0x108d8	; 0x108d8 <gpib_timer_elapsed_end>
   15358:	ce 14       	cp	r12, r14
   1535a:	df 04       	cpc	r13, r15
   1535c:	39 f1       	breq	.+78     	; 0x153ac <SS80_locate_and_write+0x178>
   1535e:	8c 85       	ldd	r24, Y+12	; 0x0c
   15360:	9d 85       	ldd	r25, Y+13	; 0x0d
   15362:	9c 01       	movw	r18, r24
   15364:	22 27       	eor	r18, r18
   15366:	30 7d       	andi	r19, 0xD0	; 208
   15368:	23 2b       	or	r18, r19
   1536a:	d1 f0       	breq	.+52     	; 0x153a0 <SS80_locate_and_write+0x16c>
   1536c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15370:	80 ff       	sbrs	r24, 0
   15372:	0a c0       	rjmp	.+20     	; 0x15388 <SS80_locate_and_write+0x154>
   15374:	86 eb       	ldi	r24, 0xB6	; 182
   15376:	94 e2       	ldi	r25, 0x24	; 36
   15378:	a0 e0       	ldi	r26, 0x00	; 0
   1537a:	ed b7       	in	r30, 0x3d	; 61
   1537c:	fe b7       	in	r31, 0x3e	; 62
   1537e:	81 83       	std	Z+1, r24	; 0x01
   15380:	92 83       	std	Z+2, r25	; 0x02
   15382:	a3 83       	std	Z+3, r26	; 0x03
   15384:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15388:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   1538c:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   15390:	83 81       	ldd	r24, Z+3	; 0x03
   15392:	94 81       	ldd	r25, Z+4	; 0x04
   15394:	82 60       	ori	r24, 0x02	; 2
   15396:	94 83       	std	Z+4, r25	; 0x04
   15398:	83 83       	std	Z+3, r24	; 0x03
   1539a:	81 e0       	ldi	r24, 0x01	; 1
   1539c:	82 83       	std	Z+2, r24	; 0x02
   1539e:	99 c0       	rjmp	.+306    	; 0x154d2 <SS80_locate_and_write+0x29e>
   153a0:	c1 14       	cp	r12, r1
   153a2:	d1 04       	cpc	r13, r1
   153a4:	09 f0       	breq	.+2      	; 0x153a8 <SS80_locate_and_write+0x174>
   153a6:	d0 c0       	rjmp	.+416    	; 0x15548 <SS80_locate_and_write+0x314>
   153a8:	90 fd       	sbrc	r25, 0
   153aa:	93 c0       	rjmp	.+294    	; 0x154d2 <SS80_locate_and_write+0x29e>
   153ac:	01 15       	cp	r16, r1
   153ae:	11 05       	cpc	r17, r1
   153b0:	09 f0       	breq	.+2      	; 0x153b4 <SS80_locate_and_write+0x180>
   153b2:	84 c0       	rjmp	.+264    	; 0x154bc <SS80_locate_and_write+0x288>
   153b4:	c1 14       	cp	r12, r1
   153b6:	d1 04       	cpc	r13, r1
   153b8:	09 f4       	brne	.+2      	; 0x153bc <SS80_locate_and_write+0x188>
   153ba:	82 c0       	rjmp	.+260    	; 0x154c0 <SS80_locate_and_write+0x28c>
   153bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153c0:	86 fd       	sbrc	r24, 6
   153c2:	0e 94 5a 84 	call	0x108b4	; 0x108b4 <gpib_timer_elapsed_begin>
   153c6:	e0 90 69 19 	lds	r14, 0x1969	; 0x801969 <SS80s>
   153ca:	f0 90 6a 19 	lds	r15, 0x196A	; 0x80196a <SS80s+0x1>
   153ce:	f3 e0       	ldi	r31, 0x03	; 3
   153d0:	ef 0e       	add	r14, r31
   153d2:	f1 1c       	adc	r15, r1
   153d4:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   153d8:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   153dc:	86 01       	movw	r16, r12
   153de:	2d ee       	ldi	r18, 0xED	; 237
   153e0:	3c e1       	ldi	r19, 0x1C	; 28
   153e2:	b5 01       	movw	r22, r10
   153e4:	a4 01       	movw	r20, r8
   153e6:	82 81       	ldd	r24, Z+2	; 0x02
   153e8:	93 81       	ldd	r25, Z+3	; 0x03
   153ea:	0e 94 03 84 	call	0x10806	; 0x10806 <dbf_open_write>
   153ee:	7c 01       	movw	r14, r24
   153f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153f4:	86 ff       	sbrs	r24, 6
   153f6:	04 c0       	rjmp	.+8      	; 0x15400 <SS80_locate_and_write+0x1cc>
   153f8:	80 ea       	ldi	r24, 0xA0	; 160
   153fa:	90 e1       	ldi	r25, 0x10	; 16
   153fc:	0e 94 6c 84 	call	0x108d8	; 0x108d8 <gpib_timer_elapsed_end>
   15400:	ce 14       	cp	r12, r14
   15402:	df 04       	cpc	r13, r15
   15404:	39 f1       	breq	.+78     	; 0x15454 <SS80_locate_and_write+0x220>
   15406:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   1540a:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   1540e:	83 81       	ldd	r24, Z+3	; 0x03
   15410:	94 81       	ldd	r25, Z+4	; 0x04
   15412:	82 60       	ori	r24, 0x02	; 2
   15414:	94 83       	std	Z+4, r25	; 0x04
   15416:	83 83       	std	Z+3, r24	; 0x03
   15418:	0e 94 1e 6f 	call	0xde3c	; 0xde3c <mmc_wp_status>
   1541c:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   15420:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   15424:	89 2b       	or	r24, r25
   15426:	29 f0       	breq	.+10     	; 0x15432 <SS80_locate_and_write+0x1fe>
   15428:	83 81       	ldd	r24, Z+3	; 0x03
   1542a:	94 81       	ldd	r25, Z+4	; 0x04
   1542c:	88 60       	ori	r24, 0x08	; 8
   1542e:	94 83       	std	Z+4, r25	; 0x04
   15430:	83 83       	std	Z+3, r24	; 0x03
   15432:	21 e0       	ldi	r18, 0x01	; 1
   15434:	22 83       	std	Z+2, r18	; 0x02
   15436:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1543a:	80 ff       	sbrs	r24, 0
   1543c:	27 c0       	rjmp	.+78     	; 0x1548c <SS80_locate_and_write+0x258>
   1543e:	89 89       	ldd	r24, Y+17	; 0x11
   15440:	9a 89       	ldd	r25, Y+18	; 0x12
   15442:	ab 89       	ldd	r26, Y+19	; 0x13
   15444:	ed b7       	in	r30, 0x3d	; 61
   15446:	fe b7       	in	r31, 0x3e	; 62
   15448:	81 83       	std	Z+1, r24	; 0x01
   1544a:	92 83       	std	Z+2, r25	; 0x02
   1544c:	a3 83       	std	Z+3, r26	; 0x03
   1544e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15452:	1c c0       	rjmp	.+56     	; 0x1548c <SS80_locate_and_write+0x258>
   15454:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15458:	85 ff       	sbrs	r24, 5
   1545a:	0c c0       	rjmp	.+24     	; 0x15474 <SS80_locate_and_write+0x240>
   1545c:	ed b7       	in	r30, 0x3d	; 61
   1545e:	fe b7       	in	r31, 0x3e	; 62
   15460:	d5 82       	std	Z+5, r13	; 0x05
   15462:	c4 82       	std	Z+4, r12	; 0x04
   15464:	2e 85       	ldd	r18, Y+14	; 0x0e
   15466:	3f 85       	ldd	r19, Y+15	; 0x0f
   15468:	48 89       	ldd	r20, Y+16	; 0x10
   1546a:	21 83       	std	Z+1, r18	; 0x01
   1546c:	32 83       	std	Z+2, r19	; 0x02
   1546e:	43 83       	std	Z+3, r20	; 0x03
   15470:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15474:	c6 01       	movw	r24, r12
   15476:	0d 2c       	mov	r0, r13
   15478:	00 0c       	add	r0, r0
   1547a:	aa 0b       	sbc	r26, r26
   1547c:	bb 0b       	sbc	r27, r27
   1547e:	88 0e       	add	r8, r24
   15480:	99 1e       	adc	r9, r25
   15482:	aa 1e       	adc	r10, r26
   15484:	bb 1e       	adc	r11, r27
   15486:	00 e0       	ldi	r16, 0x00	; 0
   15488:	10 e0       	ldi	r17, 0x00	; 0
   1548a:	05 c0       	rjmp	.+10     	; 0x15496 <SS80_locate_and_write+0x262>
   1548c:	ec 14       	cp	r14, r12
   1548e:	fd 04       	cpc	r15, r13
   15490:	64 f0       	brlt	.+24     	; 0x154aa <SS80_locate_and_write+0x276>
   15492:	01 e0       	ldi	r16, 0x01	; 1
   15494:	10 e0       	ldi	r17, 0x00	; 0
   15496:	c7 01       	movw	r24, r14
   15498:	0f 2c       	mov	r0, r15
   1549a:	00 0c       	add	r0, r0
   1549c:	aa 0b       	sbc	r26, r26
   1549e:	bb 0b       	sbc	r27, r27
   154a0:	48 0e       	add	r4, r24
   154a2:	59 1e       	adc	r5, r25
   154a4:	6a 1e       	adc	r6, r26
   154a6:	7b 1e       	adc	r7, r27
   154a8:	0b c0       	rjmp	.+22     	; 0x154c0 <SS80_locate_and_write+0x28c>
   154aa:	c6 01       	movw	r24, r12
   154ac:	0d 2c       	mov	r0, r13
   154ae:	00 0c       	add	r0, r0
   154b0:	aa 0b       	sbc	r26, r26
   154b2:	bb 0b       	sbc	r27, r27
   154b4:	48 0e       	add	r4, r24
   154b6:	59 1e       	adc	r5, r25
   154b8:	6a 1e       	adc	r6, r26
   154ba:	7b 1e       	adc	r7, r27
   154bc:	01 e0       	ldi	r16, 0x01	; 1
   154be:	10 e0       	ldi	r17, 0x00	; 0
   154c0:	2c 18       	sub	r2, r12
   154c2:	3d 08       	sbc	r3, r13
   154c4:	8c 85       	ldd	r24, Y+12	; 0x0c
   154c6:	9d 85       	ldd	r25, Y+13	; 0x0d
   154c8:	90 ff       	sbrs	r25, 0
   154ca:	19 cf       	rjmp	.-462    	; 0x152fe <SS80_locate_and_write+0xca>
   154cc:	12 14       	cp	r1, r2
   154ce:	13 04       	cpc	r1, r3
   154d0:	7c f4       	brge	.+30     	; 0x154f0 <SS80_locate_and_write+0x2bc>
   154d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   154d6:	80 ff       	sbrs	r24, 0
   154d8:	1d c0       	rjmp	.+58     	; 0x15514 <SS80_locate_and_write+0x2e0>
   154da:	84 e5       	ldi	r24, 0x54	; 84
   154dc:	94 e2       	ldi	r25, 0x24	; 36
   154de:	a0 e0       	ldi	r26, 0x00	; 0
   154e0:	ed b7       	in	r30, 0x3d	; 61
   154e2:	fe b7       	in	r31, 0x3e	; 62
   154e4:	81 83       	std	Z+1, r24	; 0x01
   154e6:	92 83       	std	Z+2, r25	; 0x02
   154e8:	a3 83       	std	Z+3, r26	; 0x03
   154ea:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   154ee:	12 c0       	rjmp	.+36     	; 0x15514 <SS80_locate_and_write+0x2e0>
   154f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   154f4:	85 ff       	sbrs	r24, 5
   154f6:	0e c0       	rjmp	.+28     	; 0x15514 <SS80_locate_and_write+0x2e0>
   154f8:	ed b7       	in	r30, 0x3d	; 61
   154fa:	fe b7       	in	r31, 0x3e	; 62
   154fc:	44 82       	std	Z+4, r4	; 0x04
   154fe:	55 82       	std	Z+5, r5	; 0x05
   15500:	66 82       	std	Z+6, r6	; 0x06
   15502:	77 82       	std	Z+7, r7	; 0x07
   15504:	89 e2       	ldi	r24, 0x29	; 41
   15506:	94 e2       	ldi	r25, 0x24	; 36
   15508:	a0 e0       	ldi	r26, 0x00	; 0
   1550a:	81 83       	std	Z+1, r24	; 0x01
   1550c:	92 83       	std	Z+2, r25	; 0x02
   1550e:	a3 83       	std	Z+3, r26	; 0x03
   15510:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15514:	00 91 69 19 	lds	r16, 0x1969	; 0x801969 <SS80s>
   15518:	10 91 6a 19 	lds	r17, 0x196A	; 0x80196a <SS80s+0x1>
   1551c:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   15520:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   15524:	20 89       	ldd	r18, Z+16	; 0x10
   15526:	31 89       	ldd	r19, Z+17	; 0x11
   15528:	40 e0       	ldi	r20, 0x00	; 0
   1552a:	50 e0       	ldi	r21, 0x00	; 0
   1552c:	c5 01       	movw	r24, r10
   1552e:	b4 01       	movw	r22, r8
   15530:	0e 94 ef e2 	call	0x1c5de	; 0x1c5de <__udivmodsi4>
   15534:	f8 01       	movw	r30, r16
   15536:	27 83       	std	Z+7, r18	; 0x07
   15538:	30 87       	std	Z+8, r19	; 0x08
   1553a:	41 87       	std	Z+9, r20	; 0x09
   1553c:	52 87       	std	Z+10, r21	; 0x0a
   1553e:	8c 85       	ldd	r24, Y+12	; 0x0c
   15540:	9d 85       	ldd	r25, Y+13	; 0x0d
   15542:	88 27       	eor	r24, r24
   15544:	90 7d       	andi	r25, 0xD0	; 208
   15546:	04 c0       	rjmp	.+8      	; 0x15550 <SS80_locate_and_write+0x31c>
   15548:	01 2b       	or	r16, r17
   1554a:	09 f4       	brne	.+2      	; 0x1554e <SS80_locate_and_write+0x31a>
   1554c:	37 cf       	rjmp	.-402    	; 0x153bc <SS80_locate_and_write+0x188>
   1554e:	b6 cf       	rjmp	.-148    	; 0x154bc <SS80_locate_and_write+0x288>
   15550:	63 96       	adiw	r28, 0x13	; 19
   15552:	e2 e1       	ldi	r30, 0x12	; 18
   15554:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

00015558 <SS80_Report>:
   15558:	a8 e0       	ldi	r26, 0x08	; 8
   1555a:	b0 e0       	ldi	r27, 0x00	; 0
   1555c:	e2 eb       	ldi	r30, 0xB2	; 178
   1555e:	fa ea       	ldi	r31, 0xAA	; 170
   15560:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
   15564:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   15568:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   1556c:	82 81       	ldd	r24, Z+2	; 0x02
   1556e:	88 87       	std	Y+8, r24	; 0x08
   15570:	80 e0       	ldi	r24, 0x00	; 0
   15572:	91 e0       	ldi	r25, 0x01	; 1
   15574:	9f 83       	std	Y+7, r25	; 0x07
   15576:	8e 83       	std	Y+6, r24	; 0x06
   15578:	ae 01       	movw	r20, r28
   1557a:	4a 5f       	subi	r20, 0xFA	; 250
   1557c:	5f 4f       	sbci	r21, 0xFF	; 255
   1557e:	61 e0       	ldi	r22, 0x01	; 1
   15580:	70 e0       	ldi	r23, 0x00	; 0
   15582:	ce 01       	movw	r24, r28
   15584:	08 96       	adiw	r24, 0x08	; 8
   15586:	0e 94 83 8a 	call	0x11506	; 0x11506 <gpib_write_str>
   1558a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1558e:	01 97       	sbiw	r24, 0x01	; 1
   15590:	89 f0       	breq	.+34     	; 0x155b4 <SS80_Report+0x5c>
   15592:	20 ff       	sbrs	r18, 0
   15594:	0a c0       	rjmp	.+20     	; 0x155aa <SS80_Report+0x52>
   15596:	88 e1       	ldi	r24, 0x18	; 24
   15598:	9f e1       	ldi	r25, 0x1F	; 31
   1559a:	a0 e0       	ldi	r26, 0x00	; 0
   1559c:	ed b7       	in	r30, 0x3d	; 61
   1559e:	fe b7       	in	r31, 0x3e	; 62
   155a0:	81 83       	std	Z+1, r24	; 0x01
   155a2:	92 83       	std	Z+2, r25	; 0x02
   155a4:	a3 83       	std	Z+3, r26	; 0x03
   155a6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   155aa:	8e 81       	ldd	r24, Y+6	; 0x06
   155ac:	9f 81       	ldd	r25, Y+7	; 0x07
   155ae:	88 27       	eor	r24, r24
   155b0:	90 7d       	andi	r25, 0xD0	; 208
   155b2:	1b c0       	rjmp	.+54     	; 0x155ea <SS80_Report+0x92>
   155b4:	25 ff       	sbrs	r18, 5
   155b6:	12 c0       	rjmp	.+36     	; 0x155dc <SS80_Report+0x84>
   155b8:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   155bc:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   155c0:	82 81       	ldd	r24, Z+2	; 0x02
   155c2:	90 e0       	ldi	r25, 0x00	; 0
   155c4:	ed b7       	in	r30, 0x3d	; 61
   155c6:	fe b7       	in	r31, 0x3e	; 62
   155c8:	95 83       	std	Z+5, r25	; 0x05
   155ca:	84 83       	std	Z+4, r24	; 0x04
   155cc:	85 e0       	ldi	r24, 0x05	; 5
   155ce:	9f e1       	ldi	r25, 0x1F	; 31
   155d0:	a0 e0       	ldi	r26, 0x00	; 0
   155d2:	81 83       	std	Z+1, r24	; 0x01
   155d4:	92 83       	std	Z+2, r25	; 0x02
   155d6:	a3 83       	std	Z+3, r26	; 0x03
   155d8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   155dc:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   155e0:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   155e4:	12 82       	std	Z+2, r1	; 0x02
   155e6:	80 e0       	ldi	r24, 0x00	; 0
   155e8:	90 e0       	ldi	r25, 0x00	; 0
   155ea:	28 96       	adiw	r28, 0x08	; 8
   155ec:	e2 e0       	ldi	r30, 0x02	; 2
   155ee:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

000155f2 <Clear_Common>:
   155f2:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   155f6:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   155fa:	25 81       	ldd	r18, Z+5	; 0x05
   155fc:	30 e0       	ldi	r19, 0x00	; 0
   155fe:	28 17       	cp	r18, r24
   15600:	39 07       	cpc	r19, r25
   15602:	19 f0       	breq	.+6      	; 0x1560a <Clear_Common+0x18>
   15604:	0f 97       	sbiw	r24, 0x0f	; 15
   15606:	99 f4       	brne	.+38     	; 0x1562e <Clear_Common+0x3c>
   15608:	03 c0       	rjmp	.+6      	; 0x15610 <Clear_Common+0x1e>
   1560a:	2f 30       	cpi	r18, 0x0F	; 15
   1560c:	31 05       	cpc	r19, r1
   1560e:	09 f4       	brne	.+2      	; 0x15612 <Clear_Common+0x20>
   15610:	15 82       	std	Z+5, r1	; 0x05
   15612:	16 82       	std	Z+6, r1	; 0x06
   15614:	17 82       	std	Z+7, r1	; 0x07
   15616:	10 86       	std	Z+8, r1	; 0x08
   15618:	11 86       	std	Z+9, r1	; 0x09
   1561a:	12 86       	std	Z+10, r1	; 0x0a
   1561c:	13 86       	std	Z+11, r1	; 0x0b
   1561e:	14 86       	std	Z+12, r1	; 0x0c
   15620:	15 86       	std	Z+13, r1	; 0x0d
   15622:	16 86       	std	Z+14, r1	; 0x0e
   15624:	11 82       	std	Z+1, r1	; 0x01
   15626:	10 82       	st	Z, r1
   15628:	14 82       	std	Z+4, r1	; 0x04
   1562a:	13 82       	std	Z+3, r1	; 0x03
   1562c:	12 82       	std	Z+2, r1	; 0x02
   1562e:	08 95       	ret

00015630 <SS80_init>:
   15630:	a5 e0       	ldi	r26, 0x05	; 5
   15632:	b0 e0       	ldi	r27, 0x00	; 0
   15634:	ee e1       	ldi	r30, 0x1E	; 30
   15636:	fb ea       	ldi	r31, 0xAB	; 171
   15638:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
   1563c:	00 ed       	ldi	r16, 0xD0	; 208
   1563e:	10 e2       	ldi	r17, 0x20	; 32
   15640:	cb e0       	ldi	r28, 0x0B	; 11
   15642:	d0 e0       	ldi	r29, 0x00	; 0
   15644:	82 e0       	ldi	r24, 0x02	; 2
   15646:	f8 2e       	mov	r15, r24
   15648:	82 ed       	ldi	r24, 0xD2	; 210
   1564a:	95 e2       	ldi	r25, 0x25	; 37
   1564c:	6c 01       	movw	r12, r24
   1564e:	e1 2c       	mov	r14, r1
   15650:	f8 01       	movw	r30, r16
   15652:	80 81       	ld	r24, Z
   15654:	83 30       	cpi	r24, 0x03	; 3
   15656:	29 f5       	brne	.+74     	; 0x156a2 <SS80_init+0x72>
   15658:	ce 01       	movw	r24, r28
   1565a:	0e 94 91 96 	call	0x12d22	; 0x12d22 <set_active_device>
   1565e:	89 2b       	or	r24, r25
   15660:	01 f1       	breq	.+64     	; 0x156a2 <SS80_init+0x72>
   15662:	8f e0       	ldi	r24, 0x0F	; 15
   15664:	90 e0       	ldi	r25, 0x00	; 0
   15666:	c5 df       	rcall	.-118    	; 0x155f2 <Clear_Common>
   15668:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   1566c:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   15670:	f2 82       	std	Z+2, r15	; 0x02
   15672:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15676:	85 ff       	sbrs	r24, 5
   15678:	0c c0       	rjmp	.+24     	; 0x15692 <SS80_init+0x62>
   1567a:	f8 01       	movw	r30, r16
   1567c:	81 81       	ldd	r24, Z+1	; 0x01
   1567e:	90 e0       	ldi	r25, 0x00	; 0
   15680:	ed b7       	in	r30, 0x3d	; 61
   15682:	fe b7       	in	r31, 0x3e	; 62
   15684:	95 83       	std	Z+5, r25	; 0x05
   15686:	84 83       	std	Z+4, r24	; 0x04
   15688:	c1 82       	std	Z+1, r12	; 0x01
   1568a:	d2 82       	std	Z+2, r13	; 0x02
   1568c:	e3 82       	std	Z+3, r14	; 0x03
   1568e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15692:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   15696:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   1569a:	81 81       	ldd	r24, Z+1	; 0x01
   1569c:	90 e0       	ldi	r25, 0x00	; 0
   1569e:	0e 94 6a 85 	call	0x10ad4	; 0x10ad4 <gpib_disable_PPR>
   156a2:	21 97       	sbiw	r28, 0x01	; 1
   156a4:	0b 52       	subi	r16, 0x2B	; 43
   156a6:	11 09       	sbc	r17, r1
   156a8:	cf 3f       	cpi	r28, 0xFF	; 255
   156aa:	ff ef       	ldi	r31, 0xFF	; 255
   156ac:	df 07       	cpc	r29, r31
   156ae:	81 f6       	brne	.-96     	; 0x15650 <SS80_init+0x20>
   156b0:	cd b7       	in	r28, 0x3d	; 61
   156b2:	de b7       	in	r29, 0x3e	; 62
   156b4:	25 96       	adiw	r28, 0x05	; 5
   156b6:	e8 e0       	ldi	r30, 0x08	; 8
   156b8:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

000156bc <SS80_Channel_Independent_Clear>:
   156bc:	9a df       	rcall	.-204    	; 0x155f2 <Clear_Common>
   156be:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   156c2:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   156c6:	81 81       	ldd	r24, Z+1	; 0x01
   156c8:	90 e0       	ldi	r25, 0x00	; 0
   156ca:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
   156ce:	80 e0       	ldi	r24, 0x00	; 0
   156d0:	90 e0       	ldi	r25, 0x00	; 0
   156d2:	08 95       	ret

000156d4 <SS80_Universal_Device_Clear>:
   156d4:	8f e0       	ldi	r24, 0x0F	; 15
   156d6:	90 e0       	ldi	r25, 0x00	; 0
   156d8:	8c df       	rcall	.-232    	; 0x155f2 <Clear_Common>
   156da:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   156de:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   156e2:	81 81       	ldd	r24, Z+1	; 0x01
   156e4:	90 e0       	ldi	r25, 0x00	; 0
   156e6:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
   156ea:	80 e0       	ldi	r24, 0x00	; 0
   156ec:	90 e0       	ldi	r25, 0x00	; 0
   156ee:	08 95       	ret

000156f0 <SS80_Selected_Device_Clear>:
   156f0:	cf 93       	push	r28
   156f2:	df 93       	push	r29
   156f4:	00 d0       	rcall	.+0      	; 0x156f6 <SS80_Selected_Device_Clear+0x6>
   156f6:	1f 92       	push	r1
   156f8:	ec 01       	movw	r28, r24
   156fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   156fe:	85 ff       	sbrs	r24, 5
   15700:	0a c0       	rjmp	.+20     	; 0x15716 <SS80_Selected_Device_Clear+0x26>
   15702:	89 ef       	ldi	r24, 0xF9	; 249
   15704:	9e e1       	ldi	r25, 0x1E	; 30
   15706:	a0 e0       	ldi	r26, 0x00	; 0
   15708:	ed b7       	in	r30, 0x3d	; 61
   1570a:	fe b7       	in	r31, 0x3e	; 62
   1570c:	81 83       	std	Z+1, r24	; 0x01
   1570e:	92 83       	std	Z+2, r25	; 0x02
   15710:	a3 83       	std	Z+3, r26	; 0x03
   15712:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15716:	ce 01       	movw	r24, r28
   15718:	6c df       	rcall	.-296    	; 0x155f2 <Clear_Common>
   1571a:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   1571e:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   15722:	81 81       	ldd	r24, Z+1	; 0x01
   15724:	90 e0       	ldi	r25, 0x00	; 0
   15726:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
   1572a:	80 e0       	ldi	r24, 0x00	; 0
   1572c:	90 e0       	ldi	r25, 0x00	; 0
   1572e:	cd b7       	in	r28, 0x3d	; 61
   15730:	de b7       	in	r29, 0x3e	; 62
   15732:	23 96       	adiw	r28, 0x03	; 3
   15734:	e2 e0       	ldi	r30, 0x02	; 2
   15736:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

0001573a <SS80_Amigo_Clear>:
   1573a:	a6 e0       	ldi	r26, 0x06	; 6
   1573c:	b0 e0       	ldi	r27, 0x00	; 0
   1573e:	e3 ea       	ldi	r30, 0xA3	; 163
   15740:	fb ea       	ldi	r31, 0xAB	; 171
   15742:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
   15746:	1d 82       	std	Y+5, r1	; 0x05
   15748:	1c 82       	std	Y+4, r1	; 0x04
   1574a:	ae 01       	movw	r20, r28
   1574c:	4c 5f       	subi	r20, 0xFC	; 252
   1574e:	5f 4f       	sbci	r21, 0xFF	; 255
   15750:	61 e0       	ldi	r22, 0x01	; 1
   15752:	70 e0       	ldi	r23, 0x00	; 0
   15754:	ce 01       	movw	r24, r28
   15756:	06 96       	adiw	r24, 0x06	; 6
   15758:	0e 94 e1 89 	call	0x113c2	; 0x113c2 <gpib_read_str>
   1575c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15760:	01 97       	sbiw	r24, 0x01	; 1
   15762:	89 f0       	breq	.+34     	; 0x15786 <SS80_Amigo_Clear+0x4c>
   15764:	20 ff       	sbrs	r18, 0
   15766:	0a c0       	rjmp	.+20     	; 0x1577c <SS80_Amigo_Clear+0x42>
   15768:	86 ee       	ldi	r24, 0xE6	; 230
   1576a:	9e e1       	ldi	r25, 0x1E	; 30
   1576c:	a0 e0       	ldi	r26, 0x00	; 0
   1576e:	ed b7       	in	r30, 0x3d	; 61
   15770:	fe b7       	in	r31, 0x3e	; 62
   15772:	81 83       	std	Z+1, r24	; 0x01
   15774:	92 83       	std	Z+2, r25	; 0x02
   15776:	a3 83       	std	Z+3, r26	; 0x03
   15778:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1577c:	8c 81       	ldd	r24, Y+4	; 0x04
   1577e:	9d 81       	ldd	r25, Y+5	; 0x05
   15780:	88 27       	eor	r24, r24
   15782:	90 7d       	andi	r25, 0xD0	; 208
   15784:	19 c0       	rjmp	.+50     	; 0x157b8 <SS80_Amigo_Clear+0x7e>
   15786:	25 ff       	sbrs	r18, 5
   15788:	0a c0       	rjmp	.+20     	; 0x1579e <SS80_Amigo_Clear+0x64>
   1578a:	87 ed       	ldi	r24, 0xD7	; 215
   1578c:	9e e1       	ldi	r25, 0x1E	; 30
   1578e:	a0 e0       	ldi	r26, 0x00	; 0
   15790:	ed b7       	in	r30, 0x3d	; 61
   15792:	fe b7       	in	r31, 0x3e	; 62
   15794:	81 83       	std	Z+1, r24	; 0x01
   15796:	92 83       	std	Z+2, r25	; 0x02
   15798:	a3 83       	std	Z+3, r26	; 0x03
   1579a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1579e:	8f e0       	ldi	r24, 0x0F	; 15
   157a0:	90 e0       	ldi	r25, 0x00	; 0
   157a2:	27 df       	rcall	.-434    	; 0x155f2 <Clear_Common>
   157a4:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   157a8:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   157ac:	81 81       	ldd	r24, Z+1	; 0x01
   157ae:	90 e0       	ldi	r25, 0x00	; 0
   157b0:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
   157b4:	80 e0       	ldi	r24, 0x00	; 0
   157b6:	90 e0       	ldi	r25, 0x00	; 0
   157b8:	26 96       	adiw	r28, 0x06	; 6
   157ba:	e2 e0       	ldi	r30, 0x02	; 2
   157bc:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

000157c0 <SS80_Cancel>:
   157c0:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   157c4:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   157c8:	11 82       	std	Z+1, r1	; 0x01
   157ca:	10 82       	st	Z, r1
   157cc:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   157d0:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   157d4:	81 81       	ldd	r24, Z+1	; 0x01
   157d6:	90 e0       	ldi	r25, 0x00	; 0
   157d8:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
   157dc:	80 e0       	ldi	r24, 0x00	; 0
   157de:	90 e0       	ldi	r25, 0x00	; 0
   157e0:	08 95       	ret

000157e2 <SS80_Transparent_State>:
   157e2:	a9 e0       	ldi	r26, 0x09	; 9
   157e4:	b0 e0       	ldi	r27, 0x00	; 0
   157e6:	e7 ef       	ldi	r30, 0xF7	; 247
   157e8:	fb ea       	ldi	r31, 0xAB	; 171
   157ea:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__prologue_saves__+0x10>
   157ee:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   157f2:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   157f6:	81 81       	ldd	r24, Z+1	; 0x01
   157f8:	90 e0       	ldi	r25, 0x00	; 0
   157fa:	0e 94 6a 85 	call	0x10ad4	; 0x10ad4 <gpib_disable_PPR>
   157fe:	80 e0       	ldi	r24, 0x00	; 0
   15800:	91 e0       	ldi	r25, 0x01	; 1
   15802:	99 87       	std	Y+9, r25	; 0x09
   15804:	88 87       	std	Y+8, r24	; 0x08
   15806:	ae 01       	movw	r20, r28
   15808:	48 5f       	subi	r20, 0xF8	; 248
   1580a:	5f 4f       	sbci	r21, 0xFF	; 255
   1580c:	60 e0       	ldi	r22, 0x00	; 0
   1580e:	72 e0       	ldi	r23, 0x02	; 2
   15810:	8d ee       	ldi	r24, 0xED	; 237
   15812:	9c e1       	ldi	r25, 0x1C	; 28
   15814:	0e 94 e1 89 	call	0x113c2	; 0x113c2 <gpib_read_str>
   15818:	7c 01       	movw	r14, r24
   1581a:	88 85       	ldd	r24, Y+8	; 0x08
   1581c:	99 85       	ldd	r25, Y+9	; 0x09
   1581e:	9c 01       	movw	r18, r24
   15820:	22 27       	eor	r18, r18
   15822:	30 7d       	andi	r19, 0xD0	; 208
   15824:	23 2b       	or	r18, r19
   15826:	79 f0       	breq	.+30     	; 0x15846 <SS80_Transparent_State+0x64>
   15828:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1582c:	80 ff       	sbrs	r24, 0
   1582e:	da c0       	rjmp	.+436    	; 0x159e4 <SS80_Transparent_State+0x202>
   15830:	86 e7       	ldi	r24, 0x76	; 118
   15832:	90 e2       	ldi	r25, 0x20	; 32
   15834:	a0 e0       	ldi	r26, 0x00	; 0
   15836:	ed b7       	in	r30, 0x3d	; 61
   15838:	fe b7       	in	r31, 0x3e	; 62
   1583a:	81 83       	std	Z+1, r24	; 0x01
   1583c:	92 83       	std	Z+2, r25	; 0x02
   1583e:	a3 83       	std	Z+3, r26	; 0x03
   15840:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15844:	cf c0       	rjmp	.+414    	; 0x159e4 <SS80_Transparent_State+0x202>
   15846:	e1 14       	cp	r14, r1
   15848:	f1 04       	cpc	r15, r1
   1584a:	09 f4       	brne	.+2      	; 0x1584e <SS80_Transparent_State+0x6c>
   1584c:	d0 c0       	rjmp	.+416    	; 0x159ee <SS80_Transparent_State+0x20c>
   1584e:	90 fd       	sbrc	r25, 0
   15850:	0e c0       	rjmp	.+28     	; 0x1586e <SS80_Transparent_State+0x8c>
   15852:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15856:	80 ff       	sbrs	r24, 0
   15858:	0a c0       	rjmp	.+20     	; 0x1586e <SS80_Transparent_State+0x8c>
   1585a:	8d e5       	ldi	r24, 0x5D	; 93
   1585c:	90 e2       	ldi	r25, 0x20	; 32
   1585e:	a0 e0       	ldi	r26, 0x00	; 0
   15860:	ed b7       	in	r30, 0x3d	; 61
   15862:	fe b7       	in	r31, 0x3e	; 62
   15864:	81 83       	std	Z+1, r24	; 0x01
   15866:	92 83       	std	Z+2, r25	; 0x02
   15868:	a3 83       	std	Z+3, r26	; 0x03
   1586a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1586e:	8d ee       	ldi	r24, 0xED	; 237
   15870:	a8 2e       	mov	r10, r24
   15872:	8c e1       	ldi	r24, 0x1C	; 28
   15874:	b8 2e       	mov	r11, r24
   15876:	00 e0       	ldi	r16, 0x00	; 0
   15878:	10 e0       	ldi	r17, 0x00	; 0
   1587a:	0e 15       	cp	r16, r14
   1587c:	1f 05       	cpc	r17, r15
   1587e:	0c f0       	brlt	.+2      	; 0x15882 <SS80_Transparent_State+0xa0>
   15880:	9c c0       	rjmp	.+312    	; 0x159ba <SS80_Transparent_State+0x1d8>
   15882:	68 01       	movw	r12, r16
   15884:	ff ef       	ldi	r31, 0xFF	; 255
   15886:	cf 1a       	sub	r12, r31
   15888:	df 0a       	sbc	r13, r31
   1588a:	f5 01       	movw	r30, r10
   1588c:	81 91       	ld	r24, Z+
   1588e:	5f 01       	movw	r10, r30
   15890:	28 2f       	mov	r18, r24
   15892:	30 e0       	ldi	r19, 0x00	; 0
   15894:	a9 01       	movw	r20, r18
   15896:	40 52       	subi	r20, 0x20	; 32
   15898:	51 09       	sbc	r21, r1
   1589a:	40 31       	cpi	r20, 0x10	; 16
   1589c:	51 05       	cpc	r21, r1
   1589e:	20 f4       	brcc	.+8      	; 0x158a8 <SS80_Transparent_State+0xc6>
   158a0:	80 52       	subi	r24, 0x20	; 32
   158a2:	8c d9       	rcall	.-3304   	; 0x14bbc <SS80_Check_Unit>
   158a4:	86 01       	movw	r16, r12
   158a6:	e9 cf       	rjmp	.-46     	; 0x1587a <SS80_Transparent_State+0x98>
   158a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   158ac:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   158b0:	21 30       	cpi	r18, 0x01	; 1
   158b2:	31 05       	cpc	r19, r1
   158b4:	c9 f4       	brne	.+50     	; 0x158e8 <SS80_Transparent_State+0x106>
   158b6:	0e 5f       	subi	r16, 0xFE	; 254
   158b8:	1f 4f       	sbci	r17, 0xFF	; 255
   158ba:	80 73       	andi	r24, 0x30	; 48
   158bc:	99 27       	eor	r25, r25
   158be:	89 2b       	or	r24, r25
   158c0:	51 f0       	breq	.+20     	; 0x158d6 <SS80_Transparent_State+0xf4>
   158c2:	88 e3       	ldi	r24, 0x38	; 56
   158c4:	90 e2       	ldi	r25, 0x20	; 32
   158c6:	a0 e0       	ldi	r26, 0x00	; 0
   158c8:	ed b7       	in	r30, 0x3d	; 61
   158ca:	fe b7       	in	r31, 0x3e	; 62
   158cc:	81 83       	std	Z+1, r24	; 0x01
   158ce:	92 83       	std	Z+2, r25	; 0x02
   158d0:	a3 83       	std	Z+3, r26	; 0x03
   158d2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   158d6:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   158da:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   158de:	81 81       	ldd	r24, Z+1	; 0x01
   158e0:	90 e0       	ldi	r25, 0x00	; 0
   158e2:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
   158e6:	69 c0       	rjmp	.+210    	; 0x159ba <SS80_Transparent_State+0x1d8>
   158e8:	22 30       	cpi	r18, 0x02	; 2
   158ea:	31 05       	cpc	r19, r1
   158ec:	51 f4       	brne	.+20     	; 0x15902 <SS80_Transparent_State+0x120>
   158ee:	0b 5f       	subi	r16, 0xFB	; 251
   158f0:	1f 4f       	sbci	r17, 0xFF	; 255
   158f2:	80 73       	andi	r24, 0x30	; 48
   158f4:	99 27       	eor	r25, r25
   158f6:	89 2b       	or	r24, r25
   158f8:	09 f4       	brne	.+2      	; 0x158fc <SS80_Transparent_State+0x11a>
   158fa:	5f c0       	rjmp	.+190    	; 0x159ba <SS80_Transparent_State+0x1d8>
   158fc:	8b e1       	ldi	r24, 0x1B	; 27
   158fe:	90 e2       	ldi	r25, 0x20	; 32
   15900:	0c c0       	rjmp	.+24     	; 0x1591a <SS80_Transparent_State+0x138>
   15902:	23 30       	cpi	r18, 0x03	; 3
   15904:	31 05       	cpc	r19, r1
   15906:	91 f4       	brne	.+36     	; 0x1592c <SS80_Transparent_State+0x14a>
   15908:	0b 5f       	subi	r16, 0xFB	; 251
   1590a:	1f 4f       	sbci	r17, 0xFF	; 255
   1590c:	80 73       	andi	r24, 0x30	; 48
   1590e:	99 27       	eor	r25, r25
   15910:	89 2b       	or	r24, r25
   15912:	09 f4       	brne	.+2      	; 0x15916 <SS80_Transparent_State+0x134>
   15914:	52 c0       	rjmp	.+164    	; 0x159ba <SS80_Transparent_State+0x1d8>
   15916:	8d ef       	ldi	r24, 0xFD	; 253
   15918:	9f e1       	ldi	r25, 0x1F	; 31
   1591a:	a0 e0       	ldi	r26, 0x00	; 0
   1591c:	ed b7       	in	r30, 0x3d	; 61
   1591e:	fe b7       	in	r31, 0x3e	; 62
   15920:	81 83       	std	Z+1, r24	; 0x01
   15922:	92 83       	std	Z+2, r25	; 0x02
   15924:	a3 83       	std	Z+3, r26	; 0x03
   15926:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1592a:	47 c0       	rjmp	.+142    	; 0x159ba <SS80_Transparent_State+0x1d8>
   1592c:	28 30       	cpi	r18, 0x08	; 8
   1592e:	31 05       	cpc	r19, r1
   15930:	e1 f4       	brne	.+56     	; 0x1596a <SS80_Transparent_State+0x188>
   15932:	85 ff       	sbrs	r24, 5
   15934:	12 c0       	rjmp	.+36     	; 0x1595a <SS80_Transparent_State+0x178>
   15936:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   1593a:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   1593e:	85 81       	ldd	r24, Z+5	; 0x05
   15940:	90 e0       	ldi	r25, 0x00	; 0
   15942:	ed b7       	in	r30, 0x3d	; 61
   15944:	fe b7       	in	r31, 0x3e	; 62
   15946:	95 83       	std	Z+5, r25	; 0x05
   15948:	84 83       	std	Z+4, r24	; 0x04
   1594a:	86 ed       	ldi	r24, 0xD6	; 214
   1594c:	9f e1       	ldi	r25, 0x1F	; 31
   1594e:	a0 e0       	ldi	r26, 0x00	; 0
   15950:	81 83       	std	Z+1, r24	; 0x01
   15952:	92 83       	std	Z+2, r25	; 0x02
   15954:	a3 83       	std	Z+3, r26	; 0x03
   15956:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1595a:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   1595e:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   15962:	85 81       	ldd	r24, Z+5	; 0x05
   15964:	90 e0       	ldi	r25, 0x00	; 0
   15966:	aa de       	rcall	.-684    	; 0x156bc <SS80_Channel_Independent_Clear>
   15968:	44 c0       	rjmp	.+136    	; 0x159f2 <SS80_Transparent_State+0x210>
   1596a:	29 30       	cpi	r18, 0x09	; 9
   1596c:	31 05       	cpc	r19, r1
   1596e:	b1 f4       	brne	.+44     	; 0x1599c <SS80_Transparent_State+0x1ba>
   15970:	85 ff       	sbrs	r24, 5
   15972:	12 c0       	rjmp	.+36     	; 0x15998 <SS80_Transparent_State+0x1b6>
   15974:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   15978:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   1597c:	85 81       	ldd	r24, Z+5	; 0x05
   1597e:	90 e0       	ldi	r25, 0x00	; 0
   15980:	ed b7       	in	r30, 0x3d	; 61
   15982:	fe b7       	in	r31, 0x3e	; 62
   15984:	95 83       	std	Z+5, r25	; 0x05
   15986:	84 83       	std	Z+4, r24	; 0x04
   15988:	82 ec       	ldi	r24, 0xC2	; 194
   1598a:	9f e1       	ldi	r25, 0x1F	; 31
   1598c:	a0 e0       	ldi	r26, 0x00	; 0
   1598e:	81 83       	std	Z+1, r24	; 0x01
   15990:	92 83       	std	Z+2, r25	; 0x02
   15992:	a3 83       	std	Z+3, r26	; 0x03
   15994:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15998:	13 df       	rcall	.-474    	; 0x157c0 <SS80_Cancel>
   1599a:	2b c0       	rjmp	.+86     	; 0x159f2 <SS80_Transparent_State+0x210>
   1599c:	80 ff       	sbrs	r24, 0
   1599e:	22 c0       	rjmp	.+68     	; 0x159e4 <SS80_Transparent_State+0x202>
   159a0:	ed b7       	in	r30, 0x3d	; 61
   159a2:	fe b7       	in	r31, 0x3e	; 62
   159a4:	35 83       	std	Z+5, r19	; 0x05
   159a6:	24 83       	std	Z+4, r18	; 0x04
   159a8:	82 ea       	ldi	r24, 0xA2	; 162
   159aa:	9f e1       	ldi	r25, 0x1F	; 31
   159ac:	a0 e0       	ldi	r26, 0x00	; 0
   159ae:	81 83       	std	Z+1, r24	; 0x01
   159b0:	92 83       	std	Z+2, r25	; 0x02
   159b2:	a3 83       	std	Z+3, r26	; 0x03
   159b4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   159b8:	86 01       	movw	r16, r12
   159ba:	0e 15       	cp	r16, r14
   159bc:	1f 05       	cpc	r17, r15
   159be:	91 f0       	breq	.+36     	; 0x159e4 <SS80_Transparent_State+0x202>
   159c0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159c4:	80 ff       	sbrs	r24, 0
   159c6:	0e c0       	rjmp	.+28     	; 0x159e4 <SS80_Transparent_State+0x202>
   159c8:	ed b7       	in	r30, 0x3d	; 61
   159ca:	fe b7       	in	r31, 0x3e	; 62
   159cc:	f7 82       	std	Z+7, r15	; 0x07
   159ce:	e6 82       	std	Z+6, r14	; 0x06
   159d0:	15 83       	std	Z+5, r17	; 0x05
   159d2:	04 83       	std	Z+4, r16	; 0x04
   159d4:	86 e6       	ldi	r24, 0x66	; 102
   159d6:	9f e1       	ldi	r25, 0x1F	; 31
   159d8:	a0 e0       	ldi	r26, 0x00	; 0
   159da:	81 83       	std	Z+1, r24	; 0x01
   159dc:	92 83       	std	Z+2, r25	; 0x02
   159de:	a3 83       	std	Z+3, r26	; 0x03
   159e0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   159e4:	88 85       	ldd	r24, Y+8	; 0x08
   159e6:	99 85       	ldd	r25, Y+9	; 0x09
   159e8:	88 27       	eor	r24, r24
   159ea:	90 7d       	andi	r25, 0xD0	; 208
   159ec:	02 c0       	rjmp	.+4      	; 0x159f2 <SS80_Transparent_State+0x210>
   159ee:	80 e0       	ldi	r24, 0x00	; 0
   159f0:	90 e0       	ldi	r25, 0x00	; 0
   159f2:	29 96       	adiw	r28, 0x09	; 9
   159f4:	ea e0       	ldi	r30, 0x0A	; 10
   159f6:	0c 94 80 e3 	jmp	0x1c700	; 0x1c700 <__epilogue_restores__+0x10>

000159fa <SS80_error_return>:
/// @return  0 on send
/// @return GPIB flags on send error
/// @see gpib.h _FLAGS defines for a full list.

int SS80_error_return( void )
{
   159fa:	a6 e0       	ldi	r26, 0x06	; 6
   159fc:	b0 e0       	ldi	r27, 0x00	; 0
   159fe:	e3 e0       	ldi	r30, 0x03	; 3
   15a00:	fd ea       	ldi	r31, 0xAD	; 173
   15a02:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
    uint8_t tmp[1];
    uint16_t status = EOI_FLAG;
   15a06:	80 e0       	ldi	r24, 0x00	; 0
   15a08:	91 e0       	ldi	r25, 0x01	; 1
   15a0a:	9d 83       	std	Y+5, r25	; 0x05
   15a0c:	8c 83       	std	Y+4, r24	; 0x04

    SS80s->qstat = 1;
   15a0e:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   15a12:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   15a16:	81 e0       	ldi	r24, 0x01	; 1
   15a18:	82 83       	std	Z+2, r24	; 0x02
    tmp[0] = SS80s->qstat;
   15a1a:	8e 83       	std	Y+6, r24	; 0x06

    status = EOI_FLAG;
    if( gpib_write_str(tmp,sizeof(tmp), &status) != sizeof(tmp))
   15a1c:	ae 01       	movw	r20, r28
   15a1e:	4c 5f       	subi	r20, 0xFC	; 252
   15a20:	5f 4f       	sbci	r21, 0xFF	; 255
   15a22:	61 e0       	ldi	r22, 0x01	; 1
   15a24:	70 e0       	ldi	r23, 0x00	; 0
   15a26:	ce 01       	movw	r24, r28
   15a28:	06 96       	adiw	r24, 0x06	; 6
   15a2a:	0e 94 83 8a 	call	0x11506	; 0x11506 <gpib_write_str>
   15a2e:	01 97       	sbiw	r24, 0x01	; 1
   15a30:	99 f0       	breq	.+38     	; 0x15a58 <SS80_error_return+0x5e>
    {
        if(debuglevel & GPIB_ERR)
   15a32:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a36:	80 ff       	sbrs	r24, 0
   15a38:	0a c0       	rjmp	.+20     	; 0x15a4e <SS80_error_return+0x54>
            printf("[GPIB Error Return - Write ERROR]\n");
   15a3a:	84 eb       	ldi	r24, 0xB4	; 180
   15a3c:	9e e1       	ldi	r25, 0x1E	; 30
   15a3e:	a0 e0       	ldi	r26, 0x00	; 0
   15a40:	ed b7       	in	r30, 0x3d	; 61
   15a42:	fe b7       	in	r31, 0x3e	; 62
   15a44:	81 83       	std	Z+1, r24	; 0x01
   15a46:	92 83       	std	Z+2, r25	; 0x02
   15a48:	a3 83       	std	Z+3, r26	; 0x03
   15a4a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(status & ERROR_MASK);
   15a4e:	8c 81       	ldd	r24, Y+4	; 0x04
   15a50:	9d 81       	ldd	r25, Y+5	; 0x05
   15a52:	88 27       	eor	r24, r24
   15a54:	90 7d       	andi	r25, 0xD0	; 208
   15a56:	07 c0       	rjmp	.+14     	; 0x15a66 <SS80_error_return+0x6c>
    }
    SS80s->qstat = 0;
   15a58:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   15a5c:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   15a60:	12 82       	std	Z+2, r1	; 0x02
    return(0);
   15a62:	80 e0       	ldi	r24, 0x00	; 0
   15a64:	90 e0       	ldi	r25, 0x00	; 0
}
   15a66:	26 96       	adiw	r28, 0x06	; 6
   15a68:	e2 e0       	ldi	r30, 0x02	; 2
   15a6a:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00015a6e <SS80_locate_and_read>:
///  - Currenly we will only process 2 ** 31 bytes Max in one transfer.
///  - If an seek or I/O error happens then we MUST continue to
/// read and discard the GPIB data until we get an EOI or GPIB error...

int SS80_locate_and_read( void )
{
   15a6e:	a7 e1       	ldi	r26, 0x17	; 23
   15a70:	b0 e0       	ldi	r27, 0x00	; 0
   15a72:	ed e3       	ldi	r30, 0x3D	; 61
   15a74:	fd ea       	ldi	r31, 0xAD	; 173
   15a76:	0c 94 5d e3 	jmp	0x1c6ba	; 0x1c6ba <__prologue_saves__+0x2>
    DWORD total_bytes;
    DWORD count;
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);
   15a7a:	60 91 69 19 	lds	r22, 0x1969	; 0x801969 <SS80s>
   15a7e:	70 91 6a 19 	lds	r23, 0x196A	; 0x80196a <SS80s+0x1>
   15a82:	fb 01       	movw	r30, r22
   15a84:	27 81       	ldd	r18, Z+7	; 0x07
   15a86:	30 85       	ldd	r19, Z+8	; 0x08
   15a88:	41 85       	ldd	r20, Z+9	; 0x09
   15a8a:	52 85       	ldd	r21, Z+10	; 0x0a

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   15a8c:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <SS80p>
   15a90:	90 91 6c 19 	lds	r25, 0x196C	; 0x80196c <SS80p+0x1>
   15a94:	fc 01       	movw	r30, r24
   15a96:	a0 89       	ldd	r26, Z+16	; 0x10
   15a98:	b1 89       	ldd	r27, Z+17	; 0x11
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);

    SS80s->qstat = 0;
   15a9a:	fb 01       	movw	r30, r22
   15a9c:	12 82       	std	Z+2, r1	; 0x02

    status = 0;
   15a9e:	1d 86       	std	Y+13, r1	; 0x0d
   15aa0:	1c 86       	std	Y+12, r1	; 0x0c

    if( GPIB_IO_RD(IFC) == 0)
   15aa2:	54 98       	cbi	0x0a, 4	; 10
   15aa4:	4c 99       	sbic	0x09, 4	; 9
   15aa6:	03 c0       	rjmp	.+6      	; 0x15aae <SS80_locate_and_read+0x40>
        return(IFC_FLAG);
   15aa8:	80 e0       	ldi	r24, 0x00	; 0
   15aaa:	90 e1       	ldi	r25, 0x10	; 16
   15aac:	3e c1       	rjmp	.+636    	; 0x15d2a <SS80_locate_and_read+0x2bc>

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   15aae:	0e 94 3c e3 	call	0x1c678	; 0x1c678 <__muluhisi3>
   15ab2:	4b 01       	movw	r8, r22
   15ab4:	5c 01       	movw	r10, r24
/// @todo FIXME
///  SS80 4-39
///  For now we will assume the controller will never do this

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15ab6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15aba:	85 ff       	sbrs	r24, 5
   15abc:	1a c0       	rjmp	.+52     	; 0x15af2 <SS80_locate_and_read+0x84>
        printf("[SS80 Locate and Read at %08lXH(%lXH)]\n",
   15abe:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   15ac2:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   15ac6:	83 85       	ldd	r24, Z+11	; 0x0b
   15ac8:	94 85       	ldd	r25, Z+12	; 0x0c
   15aca:	a5 85       	ldd	r26, Z+13	; 0x0d
   15acc:	b6 85       	ldd	r27, Z+14	; 0x0e
   15ace:	ed b7       	in	r30, 0x3d	; 61
   15ad0:	fe b7       	in	r31, 0x3e	; 62
   15ad2:	80 87       	std	Z+8, r24	; 0x08
   15ad4:	91 87       	std	Z+9, r25	; 0x09
   15ad6:	a2 87       	std	Z+10, r26	; 0x0a
   15ad8:	b3 87       	std	Z+11, r27	; 0x0b
   15ada:	84 82       	std	Z+4, r8	; 0x04
   15adc:	95 82       	std	Z+5, r9	; 0x05
   15ade:	a6 82       	std	Z+6, r10	; 0x06
   15ae0:	b7 82       	std	Z+7, r11	; 0x07
   15ae2:	8e e8       	ldi	r24, 0x8E	; 142
   15ae4:	95 e2       	ldi	r25, 0x25	; 37
   15ae6:	a0 e0       	ldi	r26, 0x00	; 0
   15ae8:	81 83       	std	Z+1, r24	; 0x01
   15aea:	92 83       	std	Z+2, r25	; 0x02
   15aec:	a3 83       	std	Z+3, r26	; 0x03
   15aee:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            (long) Address, (long) SS80s->Length);
#endif

    if( SS80_cmd_seek() )
   15af2:	2b db       	rcall	.-2474   	; 0x1514a <SS80_cmd_seek>
   15af4:	89 2b       	or	r24, r25
   15af6:	09 f0       	breq	.+2      	; 0x15afa <SS80_locate_and_read+0x8c>
   15af8:	ae c0       	rjmp	.+348    	; 0x15c56 <SS80_locate_and_read+0x1e8>
    {
        return(SS80_error_return());
    }

    count = SS80s->Length;
   15afa:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   15afe:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   15b02:	43 84       	ldd	r4, Z+11	; 0x0b
   15b04:	54 84       	ldd	r5, Z+12	; 0x0c
   15b06:	65 84       	ldd	r6, Z+13	; 0x0d
   15b08:	76 84       	ldd	r7, Z+14	; 0x0e
    total_bytes = 0;
   15b0a:	1e 86       	std	Y+14, r1	; 0x0e
   15b0c:	1f 86       	std	Y+15, r1	; 0x0f
   15b0e:	18 8a       	std	Y+16, r1	; 0x10
   15b10:	19 8a       	std	Y+17, r1	; 0x11

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
            gpib_timer_elapsed_end("disk READ ");
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   15b12:	80 e7       	ldi	r24, 0x70	; 112
   15b14:	95 e2       	ldi	r25, 0x25	; 37
   15b16:	9c 01       	movw	r18, r24
   15b18:	40 e0       	ldi	r20, 0x00	; 0
   15b1a:	2a 8b       	std	Y+18, r18	; 0x12
   15b1c:	3b 8b       	std	Y+19, r19	; 0x13
   15b1e:	4c 8b       	std	Y+20, r20	; 0x14
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   15b20:	33 24       	eor	r3, r3
   15b22:	33 94       	inc	r3
            if(debuglevel & GPIB_ERR)
                printf("[SS80 GPIB Write Error]\n");
   15b24:	8f e3       	ldi	r24, 0x3F	; 63
   15b26:	95 e2       	ldi	r25, 0x25	; 37
   15b28:	9c 01       	movw	r18, r24
   15b2a:	40 e0       	ldi	r20, 0x00	; 0
   15b2c:	2d 8b       	std	Y+21, r18	; 0x15
   15b2e:	3e 8b       	std	Y+22, r19	; 0x16
   15b30:	4f 8b       	std	Y+23, r20	; 0x17
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   15b32:	34 c0       	rjmp	.+104    	; 0x15b9c <SS80_locate_and_read+0x12e>
                printf("[SS80 Disk Read Error]\n");
            return( SS80_error_return() );
        }

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   15b34:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   15b36:	0e 94 5a 84 	call	0x108b4	; 0x108b4 <gpib_timer_elapsed_begin>
#endif
        len = gpib_write_str(gpib_iobuff, chunk, &status);
   15b3a:	ae 01       	movw	r20, r28
   15b3c:	44 5f       	subi	r20, 0xF4	; 244
   15b3e:	5f 4f       	sbci	r21, 0xFF	; 255
   15b40:	b6 01       	movw	r22, r12
   15b42:	8d ee       	ldi	r24, 0xED	; 237
   15b44:	9c e1       	ldi	r25, 0x1C	; 28
   15b46:	0e 94 83 8a 	call	0x11506	; 0x11506 <gpib_write_str>
   15b4a:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   15b4c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b50:	87 ff       	sbrs	r24, 7
   15b52:	04 c0       	rjmp	.+8      	; 0x15b5c <SS80_locate_and_read+0xee>
            gpib_timer_elapsed_end("GPIB write");
   15b54:	86 eb       	ldi	r24, 0xB6	; 182
   15b56:	90 e1       	ldi	r25, 0x10	; 16
   15b58:	0e 94 6c 84 	call	0x108d8	; 0x108d8 <gpib_timer_elapsed_end>
#endif
        if( len != chunk)
   15b5c:	c0 16       	cp	r12, r16
   15b5e:	d1 06       	cpc	r13, r17
   15b60:	09 f0       	breq	.+2      	; 0x15b64 <SS80_locate_and_read+0xf6>
   15b62:	82 c0       	rjmp	.+260    	; 0x15c68 <SS80_locate_and_read+0x1fa>
                SS80s->Errors |= ERR_GPIB;
                break;
            }
        }

        Address += chunk;
   15b64:	0d 2c       	mov	r0, r13
   15b66:	00 0c       	add	r0, r0
   15b68:	ee 08       	sbc	r14, r14
   15b6a:	ff 08       	sbc	r15, r15
   15b6c:	8c 0c       	add	r8, r12
   15b6e:	9d 1c       	adc	r9, r13
   15b70:	ae 1c       	adc	r10, r14
   15b72:	bf 1c       	adc	r11, r15
        total_bytes = total_bytes + len;
   15b74:	01 2e       	mov	r0, r17
   15b76:	00 0c       	add	r0, r0
   15b78:	22 0b       	sbc	r18, r18
   15b7a:	33 0b       	sbc	r19, r19
   15b7c:	8e 85       	ldd	r24, Y+14	; 0x0e
   15b7e:	9f 85       	ldd	r25, Y+15	; 0x0f
   15b80:	a8 89       	ldd	r26, Y+16	; 0x10
   15b82:	b9 89       	ldd	r27, Y+17	; 0x11
   15b84:	80 0f       	add	r24, r16
   15b86:	91 1f       	adc	r25, r17
   15b88:	a2 1f       	adc	r26, r18
   15b8a:	b3 1f       	adc	r27, r19
   15b8c:	8e 87       	std	Y+14, r24	; 0x0e
   15b8e:	9f 87       	std	Y+15, r25	; 0x0f
   15b90:	a8 8b       	std	Y+16, r26	; 0x10
   15b92:	b9 8b       	std	Y+17, r27	; 0x11
        count -= len;
   15b94:	40 1a       	sub	r4, r16
   15b96:	51 0a       	sbc	r5, r17
   15b98:	62 0a       	sbc	r6, r18
   15b9a:	73 0a       	sbc	r7, r19
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   15b9c:	41 14       	cp	r4, r1
   15b9e:	51 04       	cpc	r5, r1
   15ba0:	61 04       	cpc	r6, r1
   15ba2:	71 04       	cpc	r7, r1
   15ba4:	09 f4       	brne	.+2      	; 0x15ba8 <SS80_locate_and_read+0x13a>
   15ba6:	92 c0       	rjmp	.+292    	; 0x15ccc <SS80_locate_and_read+0x25e>
    {
        if( GPIB_IO_RD(IFC) == 0)
   15ba8:	54 98       	cbi	0x0a, 4	; 10
   15baa:	4c 9b       	sbis	0x09, 4	; 9
   15bac:	7d cf       	rjmp	.-262    	; 0x15aa8 <SS80_locate_and_read+0x3a>
        {
            return(IFC_FLAG);
        }

        if(count > 256)
   15bae:	31 e0       	ldi	r19, 0x01	; 1
   15bb0:	43 16       	cp	r4, r19
   15bb2:	53 06       	cpc	r5, r19
   15bb4:	61 04       	cpc	r6, r1
   15bb6:	71 04       	cpc	r7, r1
   15bb8:	08 f4       	brcc	.+2      	; 0x15bbc <SS80_locate_and_read+0x14e>
   15bba:	4f c0       	rjmp	.+158    	; 0x15c5a <SS80_locate_and_read+0x1ec>
        {
            chunk = 256;
            status = 0;                           // GPIB status
   15bbc:	1d 86       	std	Y+13, r1	; 0x0d
   15bbe:	1c 86       	std	Y+12, r1	; 0x0c
            return(IFC_FLAG);
        }

        if(count > 256)
        {
            chunk = 256;
   15bc0:	c1 2c       	mov	r12, r1
   15bc2:	dd 24       	eor	r13, r13
   15bc4:	d3 94       	inc	r13
            chunk = count;
            status |= EOI_FLAG;                   // GPIB EOI on final charater
        }

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   15bc6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15bca:	86 fd       	sbrc	r24, 6
            gpib_timer_elapsed_begin();
   15bcc:	0e 94 5a 84 	call	0x108b4	; 0x108b4 <gpib_timer_elapsed_begin>
#endif

// FIXME len != chunk
        len = dbf_open_read(SS80p->HEADER.NAME, Address, gpib_iobuff, chunk, &SS80s->Errors);
   15bd0:	e0 90 69 19 	lds	r14, 0x1969	; 0x801969 <SS80s>
   15bd4:	f0 90 6a 19 	lds	r15, 0x196A	; 0x80196a <SS80s+0x1>
   15bd8:	43 e0       	ldi	r20, 0x03	; 3
   15bda:	e4 0e       	add	r14, r20
   15bdc:	f1 1c       	adc	r15, r1
   15bde:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   15be2:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   15be6:	86 01       	movw	r16, r12
   15be8:	2d ee       	ldi	r18, 0xED	; 237
   15bea:	3c e1       	ldi	r19, 0x1C	; 28
   15bec:	b5 01       	movw	r22, r10
   15bee:	a4 01       	movw	r20, r8
   15bf0:	82 81       	ldd	r24, Z+2	; 0x02
   15bf2:	93 81       	ldd	r25, Z+3	; 0x03
   15bf4:	0e 94 ac 83 	call	0x10758	; 0x10758 <dbf_open_read>
   15bf8:	8c 01       	movw	r16, r24

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   15bfa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15bfe:	86 ff       	sbrs	r24, 6
   15c00:	04 c0       	rjmp	.+8      	; 0x15c0a <SS80_locate_and_read+0x19c>
            gpib_timer_elapsed_end("disk READ ");
   15c02:	8b ea       	ldi	r24, 0xAB	; 171
   15c04:	90 e1       	ldi	r25, 0x10	; 16
   15c06:	0e 94 6c 84 	call	0x108d8	; 0x108d8 <gpib_timer_elapsed_end>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15c0a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c0e:	85 ff       	sbrs	r24, 5
   15c10:	0c c0       	rjmp	.+24     	; 0x15c2a <SS80_locate_and_read+0x1bc>
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   15c12:	ed b7       	in	r30, 0x3d	; 61
   15c14:	fe b7       	in	r31, 0x3e	; 62
   15c16:	15 83       	std	Z+5, r17	; 0x05
   15c18:	04 83       	std	Z+4, r16	; 0x04
   15c1a:	2a 89       	ldd	r18, Y+18	; 0x12
   15c1c:	3b 89       	ldd	r19, Y+19	; 0x13
   15c1e:	4c 89       	ldd	r20, Y+20	; 0x14
   15c20:	21 83       	std	Z+1, r18	; 0x01
   15c22:	32 83       	std	Z+2, r19	; 0x02
   15c24:	43 83       	std	Z+3, r20	; 0x03
   15c26:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15c2a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
#endif
        if(len < 0)
   15c2e:	17 ff       	sbrs	r17, 7
   15c30:	81 cf       	rjmp	.-254    	; 0x15b34 <SS80_locate_and_read+0xc6>
        {
            SS80s->qstat = 1;
   15c32:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   15c36:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   15c3a:	91 e0       	ldi	r25, 0x01	; 1
   15c3c:	92 83       	std	Z+2, r25	; 0x02
/// @return Return
            if(debuglevel & GPIB_ERR)
   15c3e:	80 ff       	sbrs	r24, 0
   15c40:	0a c0       	rjmp	.+20     	; 0x15c56 <SS80_locate_and_read+0x1e8>
                printf("[SS80 Disk Read Error]\n");
   15c42:	88 e5       	ldi	r24, 0x58	; 88
   15c44:	95 e2       	ldi	r25, 0x25	; 37
   15c46:	a0 e0       	ldi	r26, 0x00	; 0
   15c48:	ed b7       	in	r30, 0x3d	; 61
   15c4a:	fe b7       	in	r31, 0x3e	; 62
   15c4c:	81 83       	std	Z+1, r24	; 0x01
   15c4e:	92 83       	std	Z+2, r25	; 0x02
   15c50:	a3 83       	std	Z+3, r26	; 0x03
   15c52:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            return( SS80_error_return() );
   15c56:	d1 de       	rcall	.-606    	; 0x159fa <SS80_error_return>
   15c58:	68 c0       	rjmp	.+208    	; 0x15d2a <SS80_locate_and_read+0x2bc>
            chunk = 256;
            status = 0;                           // GPIB status
        }
        else
        {
            chunk = count;
   15c5a:	62 01       	movw	r12, r4
            status |= EOI_FLAG;                   // GPIB EOI on final charater
   15c5c:	8c 85       	ldd	r24, Y+12	; 0x0c
   15c5e:	9d 85       	ldd	r25, Y+13	; 0x0d
   15c60:	91 60       	ori	r25, 0x01	; 1
   15c62:	9d 87       	std	Y+13, r25	; 0x0d
   15c64:	8c 87       	std	Y+12, r24	; 0x0c
   15c66:	af cf       	rjmp	.-162    	; 0x15bc6 <SS80_locate_and_read+0x158>
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   15c68:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   15c6c:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   15c70:	32 82       	std	Z+2, r3	; 0x02
            if(debuglevel & GPIB_ERR)
   15c72:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c76:	80 ff       	sbrs	r24, 0
   15c78:	0a c0       	rjmp	.+20     	; 0x15c8e <SS80_locate_and_read+0x220>
                printf("[SS80 GPIB Write Error]\n");
   15c7a:	2d 89       	ldd	r18, Y+21	; 0x15
   15c7c:	3e 89       	ldd	r19, Y+22	; 0x16
   15c7e:	4f 89       	ldd	r20, Y+23	; 0x17
   15c80:	ed b7       	in	r30, 0x3d	; 61
   15c82:	fe b7       	in	r31, 0x3e	; 62
   15c84:	21 83       	std	Z+1, r18	; 0x01
   15c86:	32 83       	std	Z+2, r19	; 0x02
   15c88:	43 83       	std	Z+3, r20	; 0x03
   15c8a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            if(status & ERROR_MASK)
   15c8e:	8c 85       	ldd	r24, Y+12	; 0x0c
   15c90:	9d 85       	ldd	r25, Y+13	; 0x0d
   15c92:	88 27       	eor	r24, r24
   15c94:	90 7d       	andi	r25, 0xD0	; 208
   15c96:	89 2b       	or	r24, r25
   15c98:	09 f4       	brne	.+2      	; 0x15c9c <SS80_locate_and_read+0x22e>
   15c9a:	64 cf       	rjmp	.-312    	; 0x15b64 <SS80_locate_and_read+0xf6>
            {
                SS80s->Errors |= ERR_GPIB;
   15c9c:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   15ca0:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   15ca4:	83 81       	ldd	r24, Z+3	; 0x03
   15ca6:	94 81       	ldd	r25, Z+4	; 0x04
   15ca8:	80 62       	ori	r24, 0x20	; 32
   15caa:	94 83       	std	Z+4, r25	; 0x04
   15cac:	83 83       	std	Z+3, r24	; 0x03
        count -= len;
    }
///  Note: this should not happen unless we exit on errors above
    if(count > 0)
    {
        if(debuglevel & GPIB_ERR)
   15cae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15cb2:	80 ff       	sbrs	r24, 0
   15cb4:	21 c0       	rjmp	.+66     	; 0x15cf8 <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read DID NOT FINISH]\n");
   15cb6:	8a e1       	ldi	r24, 0x1A	; 26
   15cb8:	95 e2       	ldi	r25, 0x25	; 37
   15cba:	a0 e0       	ldi	r26, 0x00	; 0
   15cbc:	ed b7       	in	r30, 0x3d	; 61
   15cbe:	fe b7       	in	r31, 0x3e	; 62
   15cc0:	81 83       	std	Z+1, r24	; 0x01
   15cc2:	92 83       	std	Z+2, r25	; 0x02
   15cc4:	a3 83       	std	Z+3, r26	; 0x03
   15cc6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15cca:	16 c0       	rjmp	.+44     	; 0x15cf8 <SS80_locate_and_read+0x28a>
    }
    else
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15ccc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15cd0:	85 ff       	sbrs	r24, 5
   15cd2:	12 c0       	rjmp	.+36     	; 0x15cf8 <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
   15cd4:	8e 85       	ldd	r24, Y+14	; 0x0e
   15cd6:	9f 85       	ldd	r25, Y+15	; 0x0f
   15cd8:	a8 89       	ldd	r26, Y+16	; 0x10
   15cda:	b9 89       	ldd	r27, Y+17	; 0x11
   15cdc:	ed b7       	in	r30, 0x3d	; 61
   15cde:	fe b7       	in	r31, 0x3e	; 62
   15ce0:	84 83       	std	Z+4, r24	; 0x04
   15ce2:	95 83       	std	Z+5, r25	; 0x05
   15ce4:	a6 83       	std	Z+6, r26	; 0x06
   15ce6:	b7 83       	std	Z+7, r27	; 0x07
   15ce8:	82 ef       	ldi	r24, 0xF2	; 242
   15cea:	94 e2       	ldi	r25, 0x24	; 36
   15cec:	a0 e0       	ldi	r26, 0x00	; 0
   15cee:	81 83       	std	Z+1, r24	; 0x01
   15cf0:	92 83       	std	Z+2, r25	; 0x02
   15cf2:	a3 83       	std	Z+3, r26	; 0x03
   15cf4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   15cf8:	00 91 69 19 	lds	r16, 0x1969	; 0x801969 <SS80s>
   15cfc:	10 91 6a 19 	lds	r17, 0x196A	; 0x80196a <SS80s+0x1>

/// @brief  SS80 Return current block addresss from bytes
/// @return Block Address
uint32_t SS80_Bytes_to_Blocks(uint32_t bytes)
{
    return(bytes / SS80p->UNIT.BYTES_PER_BLOCK);
   15d00:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   15d04:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   15d08:	20 89       	ldd	r18, Z+16	; 0x10
   15d0a:	31 89       	ldd	r19, Z+17	; 0x11
   15d0c:	40 e0       	ldi	r20, 0x00	; 0
   15d0e:	50 e0       	ldi	r21, 0x00	; 0
   15d10:	c5 01       	movw	r24, r10
   15d12:	b4 01       	movw	r22, r8
   15d14:	0e 94 ef e2 	call	0x1c5de	; 0x1c5de <__udivmodsi4>
   15d18:	f8 01       	movw	r30, r16
   15d1a:	27 83       	std	Z+7, r18	; 0x07
   15d1c:	30 87       	std	Z+8, r19	; 0x08
   15d1e:	41 87       	std	Z+9, r20	; 0x09
   15d20:	52 87       	std	Z+10, r21	; 0x0a
    return (status & ERROR_MASK);
   15d22:	8c 85       	ldd	r24, Y+12	; 0x0c
   15d24:	9d 85       	ldd	r25, Y+13	; 0x0d
   15d26:	88 27       	eor	r24, r24
   15d28:	90 7d       	andi	r25, 0xD0	; 208
}
   15d2a:	67 96       	adiw	r28, 0x17	; 23
   15d2c:	e1 e1       	ldi	r30, 0x11	; 17
   15d2e:	0c 94 79 e3 	jmp	0x1c6f2	; 0x1c6f2 <__epilogue_restores__+0x2>

00015d32 <SS80_Execute_State>:
/// - State: EXEC STATE COMMAND
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
   15d32:	cf 93       	push	r28
   15d34:	df 93       	push	r29
   15d36:	00 d0       	rcall	.+0      	; 0x15d38 <SS80_Execute_State+0x6>
   15d38:	00 d0       	rcall	.+0      	; 0x15d3a <SS80_Execute_State+0x8>
   15d3a:	1f 92       	push	r1
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
   15d3c:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   15d40:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   15d44:	81 81       	ldd	r24, Z+1	; 0x01
   15d46:	90 e0       	ldi	r25, 0x00	; 0
   15d48:	0e 94 6a 85 	call	0x10ad4	; 0x10ad4 <gpib_disable_PPR>
    switch(SS80s->estate)
   15d4c:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   15d50:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   15d54:	80 81       	ld	r24, Z
   15d56:	91 81       	ldd	r25, Z+1	; 0x01
   15d58:	82 30       	cpi	r24, 0x02	; 2
   15d5a:	91 05       	cpc	r25, r1
   15d5c:	89 f0       	breq	.+34     	; 0x15d80 <SS80_Execute_State+0x4e>
   15d5e:	3c f4       	brge	.+14     	; 0x15d6e <SS80_Execute_State+0x3c>
   15d60:	00 97       	sbiw	r24, 0x00	; 0
   15d62:	81 f1       	breq	.+96     	; 0x15dc4 <SS80_Execute_State+0x92>
   15d64:	81 30       	cpi	r24, 0x01	; 1
   15d66:	91 05       	cpc	r25, r1
   15d68:	b9 f4       	brne	.+46     	; 0x15d98 <SS80_Execute_State+0x66>
    {
        case EXEC_IDLE:
            break;
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
   15d6a:	81 de       	rcall	.-766    	; 0x15a6e <SS80_locate_and_read>
   15d6c:	0d c0       	rjmp	.+26     	; 0x15d88 <SS80_Execute_State+0x56>
int SS80_Execute_State(void)
{
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
    switch(SS80s->estate)
   15d6e:	83 30       	cpi	r24, 0x03	; 3
   15d70:	91 05       	cpc	r25, r1
   15d72:	41 f0       	breq	.+16     	; 0x15d84 <SS80_Execute_State+0x52>
   15d74:	84 30       	cpi	r24, 0x04	; 4
   15d76:	91 05       	cpc	r25, r1
   15d78:	79 f4       	brne	.+30     	; 0x15d98 <SS80_Execute_State+0x66>
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   15d7a:	0e 94 6e a5 	call	0x14adc	; 0x14adc <SS80_describe>
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_LOCATE_AND_WRITE:
            ret = SS80_locate_and_write();
   15d7e:	04 c0       	rjmp	.+8      	; 0x15d88 <SS80_Execute_State+0x56>
   15d80:	59 da       	rcall	.-2894   	; 0x15234 <SS80_locate_and_write>
   15d82:	02 c0       	rjmp	.+4      	; 0x15d88 <SS80_Execute_State+0x56>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
   15d84:	0e 94 ed a4 	call	0x149da	; 0x149da <SS80_send_status>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   15d88:	ec 01       	movw	r28, r24
            SS80s->estate = EXEC_IDLE;
   15d8a:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   15d8e:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   15d92:	11 82       	std	Z+1, r1	; 0x01
   15d94:	10 82       	st	Z, r1
            break;
   15d96:	18 c0       	rjmp	.+48     	; 0x15dc8 <SS80_Execute_State+0x96>
        default:
            if(debuglevel & GPIB_ERR)
   15d98:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15d9c:	20 ff       	sbrs	r18, 0
   15d9e:	0c c0       	rjmp	.+24     	; 0x15db8 <SS80_Execute_State+0x86>
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
   15da0:	ed b7       	in	r30, 0x3d	; 61
   15da2:	fe b7       	in	r31, 0x3e	; 62
   15da4:	95 83       	std	Z+5, r25	; 0x05
   15da6:	84 83       	std	Z+4, r24	; 0x04
   15da8:	86 eb       	ldi	r24, 0xB6	; 182
   15daa:	95 e2       	ldi	r25, 0x25	; 37
   15dac:	a0 e0       	ldi	r26, 0x00	; 0
   15dae:	81 83       	std	Z+1, r24	; 0x01
   15db0:	92 83       	std	Z+2, r25	; 0x02
   15db2:	a3 83       	std	Z+3, r26	; 0x03
   15db4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            SS80s->estate = EXEC_IDLE;
   15db8:	e0 91 69 19 	lds	r30, 0x1969	; 0x801969 <SS80s>
   15dbc:	f0 91 6a 19 	lds	r31, 0x196A	; 0x80196a <SS80s+0x1>
   15dc0:	11 82       	std	Z+1, r1	; 0x01
   15dc2:	10 82       	st	Z, r1
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
    int ret = 0;
   15dc4:	c0 e0       	ldi	r28, 0x00	; 0
   15dc6:	d0 e0       	ldi	r29, 0x00	; 0
            if(debuglevel & GPIB_ERR)
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
            SS80s->estate = EXEC_IDLE;
            break;
    }
    gpib_enable_PPR(SS80p->HEADER.PPR);
   15dc8:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   15dcc:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   15dd0:	81 81       	ldd	r24, Z+1	; 0x01
   15dd2:	90 e0       	ldi	r25, 0x00	; 0
   15dd4:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
    return(ret);
}
   15dd8:	ce 01       	movw	r24, r28
   15dda:	cd b7       	in	r28, 0x3d	; 61
   15ddc:	de b7       	in	r29, 0x3e	; 62
   15dde:	25 96       	adiw	r28, 0x05	; 5
   15de0:	e2 e0       	ldi	r30, 0x02	; 2
   15de2:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00015de6 <SS80_COMMANDS>:
/// @param[in] ch command.
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
   15de6:	a9 e0       	ldi	r26, 0x09	; 9
   15de8:	b0 e0       	ldi	r27, 0x00	; 0
   15dea:	e9 ef       	ldi	r30, 0xF9	; 249
   15dec:	fe ea       	ldi	r31, 0xAE	; 174
   15dee:	0c 94 6b e3 	jmp	0x1c6d6	; 0x1c6d6 <__prologue_saves__+0x1e>
   15df2:	18 2f       	mov	r17, r24
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   15df4:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   15df8:	90 e0       	ldi	r25, 0x00	; 0
   15dfa:	0e 94 94 8b 	call	0x11728	; 0x11728 <SS80_is_MTA>
   15dfe:	89 2b       	or	r24, r25
   15e00:	19 f0       	breq	.+6      	; 0x15e08 <SS80_COMMANDS+0x22>
    {
        if(ch == 0x65 )
   15e02:	15 36       	cpi	r17, 0x65	; 101
   15e04:	19 f5       	brne	.+70     	; 0x15e4c <SS80_COMMANDS+0x66>
   15e06:	09 c0       	rjmp	.+18     	; 0x15e1a <SS80_COMMANDS+0x34>
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   15e08:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   15e0c:	90 e0       	ldi	r25, 0x00	; 0
   15e0e:	0e 94 83 8b 	call	0x11706	; 0x11706 <SS80_is_MLA>
   15e12:	ec 01       	movw	r28, r24
   15e14:	89 2b       	or	r24, r25
   15e16:	a9 f7       	brne	.-22     	; 0x15e02 <SS80_COMMANDS+0x1c>
   15e18:	ad c0       	rjmp	.+346    	; 0x15f74 <SS80_COMMANDS+0x18e>
    {
        if(ch == 0x65 )
        {
            if(SS80_is_MLA(listening))
   15e1a:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   15e1e:	90 e0       	ldi	r25, 0x00	; 0
   15e20:	0e 94 83 8b 	call	0x11706	; 0x11706 <SS80_is_MLA>
   15e24:	89 2b       	or	r24, r25
   15e26:	09 f4       	brne	.+2      	; 0x15e2a <SS80_COMMANDS+0x44>
   15e28:	a2 c0       	rjmp	.+324    	; 0x15f6e <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15e2a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e2e:	85 ff       	sbrs	r24, 5
   15e30:	0a c0       	rjmp	.+20     	; 0x15e46 <SS80_COMMANDS+0x60>
                    printf("[SS80 Command State]\n");
   15e32:	8e e9       	ldi	r24, 0x9E	; 158
   15e34:	9e e1       	ldi	r25, 0x1E	; 30
   15e36:	a0 e0       	ldi	r26, 0x00	; 0
   15e38:	ed b7       	in	r30, 0x3d	; 61
   15e3a:	fe b7       	in	r31, 0x3e	; 62
   15e3c:	81 83       	std	Z+1, r24	; 0x01
   15e3e:	92 83       	std	Z+2, r25	; 0x02
   15e40:	a3 83       	std	Z+3, r26	; 0x03
   15e42:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
                return ( SS80_Command_State() );
   15e46:	0e 94 2e a6 	call	0x14c5c	; 0x14c5c <SS80_Command_State>
   15e4a:	73 c0       	rjmp	.+230    	; 0x15f32 <SS80_COMMANDS+0x14c>
            }
            return(0);
        }

        if(ch == 0x6e )
   15e4c:	1e 36       	cpi	r17, 0x6E	; 110
   15e4e:	01 f5       	brne	.+64     	; 0x15e90 <SS80_COMMANDS+0xaa>
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   15e50:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   15e54:	90 e0       	ldi	r25, 0x00	; 0
   15e56:	0e 94 83 8b 	call	0x11706	; 0x11706 <SS80_is_MLA>
   15e5a:	89 2b       	or	r24, r25
   15e5c:	79 f0       	breq	.+30     	; 0x15e7c <SS80_COMMANDS+0x96>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15e5e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e62:	85 ff       	sbrs	r24, 5
   15e64:	13 c0       	rjmp	.+38     	; 0x15e8c <SS80_COMMANDS+0xa6>
                    printf("[SS00 Execute State]\n");
   15e66:	88 e8       	ldi	r24, 0x88	; 136
   15e68:	9e e1       	ldi	r25, 0x1E	; 30
   15e6a:	a0 e0       	ldi	r26, 0x00	; 0
   15e6c:	ed b7       	in	r30, 0x3d	; 61
   15e6e:	fe b7       	in	r31, 0x3e	; 62
   15e70:	81 83       	std	Z+1, r24	; 0x01
   15e72:	92 83       	std	Z+2, r25	; 0x02
   15e74:	a3 83       	std	Z+3, r26	; 0x03
   15e76:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15e7a:	08 c0       	rjmp	.+16     	; 0x15e8c <SS80_COMMANDS+0xa6>
            return(0);
        }

        if(ch == 0x6e )
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   15e7c:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   15e80:	90 e0       	ldi	r25, 0x00	; 0
   15e82:	0e 94 94 8b 	call	0x11728	; 0x11728 <SS80_is_MTA>
   15e86:	89 2b       	or	r24, r25
   15e88:	51 f7       	brne	.-44     	; 0x15e5e <SS80_COMMANDS+0x78>
   15e8a:	71 c0       	rjmp	.+226    	; 0x15f6e <SS80_COMMANDS+0x188>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
                    printf("[SS00 Execute State]\n");
                return ( SS80_Execute_State() );
   15e8c:	52 df       	rcall	.-348    	; 0x15d32 <SS80_Execute_State>
   15e8e:	51 c0       	rjmp	.+162    	; 0x15f32 <SS80_COMMANDS+0x14c>

            }
            return(0);
        }

        if(ch == 0x70 )
   15e90:	10 37       	cpi	r17, 0x70	; 112
   15e92:	b9 f5       	brne	.+110    	; 0x15f02 <SS80_COMMANDS+0x11c>
        {
            if(SS80_is_MTA(talking) )
   15e94:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   15e98:	90 e0       	ldi	r25, 0x00	; 0
   15e9a:	0e 94 94 8b 	call	0x11728	; 0x11728 <SS80_is_MTA>
   15e9e:	89 2b       	or	r24, r25
   15ea0:	81 f0       	breq	.+32     	; 0x15ec2 <SS80_COMMANDS+0xdc>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15ea2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ea6:	85 ff       	sbrs	r24, 5
   15ea8:	0a c0       	rjmp	.+20     	; 0x15ebe <SS80_COMMANDS+0xd8>
                    printf("[SS80 Report State]\n");
   15eaa:	83 e7       	ldi	r24, 0x73	; 115
   15eac:	9e e1       	ldi	r25, 0x1E	; 30
   15eae:	a0 e0       	ldi	r26, 0x00	; 0
   15eb0:	ed b7       	in	r30, 0x3d	; 61
   15eb2:	fe b7       	in	r31, 0x3e	; 62
   15eb4:	81 83       	std	Z+1, r24	; 0x01
   15eb6:	92 83       	std	Z+2, r25	; 0x02
   15eb8:	a3 83       	std	Z+3, r26	; 0x03
   15eba:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
                return( SS80_Report() );
   15ebe:	4c db       	rcall	.-2408   	; 0x15558 <SS80_Report>
   15ec0:	38 c0       	rjmp	.+112    	; 0x15f32 <SS80_COMMANDS+0x14c>
            }

            if(SS80_is_MLA(listening))
   15ec2:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   15ec6:	90 e0       	ldi	r25, 0x00	; 0
   15ec8:	0e 94 83 8b 	call	0x11706	; 0x11706 <SS80_is_MLA>
   15ecc:	89 2b       	or	r24, r25
   15ece:	09 f4       	brne	.+2      	; 0x15ed2 <SS80_COMMANDS+0xec>
   15ed0:	4e c0       	rjmp	.+156    	; 0x15f6e <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15ed2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ed6:	85 ff       	sbrs	r24, 5
   15ed8:	0a c0       	rjmp	.+20     	; 0x15eee <SS80_COMMANDS+0x108>
                    printf("[Amigo Clear]\n");
   15eda:	84 e6       	ldi	r24, 0x64	; 100
   15edc:	9e e1       	ldi	r25, 0x1E	; 30
   15ede:	a0 e0       	ldi	r26, 0x00	; 0
   15ee0:	ed b7       	in	r30, 0x3d	; 61
   15ee2:	fe b7       	in	r31, 0x3e	; 62
   15ee4:	81 83       	std	Z+1, r24	; 0x01
   15ee6:	92 83       	std	Z+2, r25	; 0x02
   15ee8:	a3 83       	std	Z+3, r26	; 0x03
   15eea:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
                gpib_disable_PPR(SS80p->HEADER.PPR);
   15eee:	e0 91 6b 19 	lds	r30, 0x196B	; 0x80196b <SS80p>
   15ef2:	f0 91 6c 19 	lds	r31, 0x196C	; 0x80196c <SS80p+0x1>
   15ef6:	81 81       	ldd	r24, Z+1	; 0x01
   15ef8:	90 e0       	ldi	r25, 0x00	; 0
   15efa:	0e 94 6a 85 	call	0x10ad4	; 0x10ad4 <gpib_disable_PPR>
                return( SS80_Amigo_Clear() );
   15efe:	1d dc       	rcall	.-1990   	; 0x1573a <SS80_Amigo_Clear>
   15f00:	18 c0       	rjmp	.+48     	; 0x15f32 <SS80_COMMANDS+0x14c>
            }
            return (0);
        }
        if(ch == 0x72 )
   15f02:	12 37       	cpi	r17, 0x72	; 114
   15f04:	c1 f4       	brne	.+48     	; 0x15f36 <SS80_COMMANDS+0x150>
        {
            if(SS80_is_MLA(listening) )
   15f06:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   15f0a:	90 e0       	ldi	r25, 0x00	; 0
   15f0c:	0e 94 83 8b 	call	0x11706	; 0x11706 <SS80_is_MLA>
   15f10:	89 2b       	or	r24, r25
   15f12:	89 f0       	breq	.+34     	; 0x15f36 <SS80_COMMANDS+0x150>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15f14:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f18:	85 ff       	sbrs	r24, 5
   15f1a:	0a c0       	rjmp	.+20     	; 0x15f30 <SS80_COMMANDS+0x14a>
                    printf("[SS80 Transparent]\n");
   15f1c:	80 e5       	ldi	r24, 0x50	; 80
   15f1e:	9e e1       	ldi	r25, 0x1E	; 30
   15f20:	a0 e0       	ldi	r26, 0x00	; 0
   15f22:	ed b7       	in	r30, 0x3d	; 61
   15f24:	fe b7       	in	r31, 0x3e	; 62
   15f26:	81 83       	std	Z+1, r24	; 0x01
   15f28:	92 83       	std	Z+2, r25	; 0x02
   15f2a:	a3 83       	std	Z+3, r26	; 0x03
   15f2c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
                return( SS80_Transparent_State() );
   15f30:	58 dc       	rcall	.-1872   	; 0x157e2 <SS80_Transparent_State>
   15f32:	ec 01       	movw	r28, r24
   15f34:	3b c0       	rjmp	.+118    	; 0x15fac <SS80_COMMANDS+0x1c6>
            }
        }
        if(debuglevel & GPIB_ERR)
   15f36:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f3a:	80 ff       	sbrs	r24, 0
   15f3c:	18 c0       	rjmp	.+48     	; 0x15f6e <SS80_COMMANDS+0x188>
            printf("[SS80 SC Unknown: %02XH, listen:%02XH, talk:%02XH]\n",
   15f3e:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   15f42:	90 e0       	ldi	r25, 0x00	; 0
   15f44:	ed b7       	in	r30, 0x3d	; 61
   15f46:	fe b7       	in	r31, 0x3e	; 62
   15f48:	91 87       	std	Z+9, r25	; 0x09
   15f4a:	80 87       	std	Z+8, r24	; 0x08
   15f4c:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   15f50:	90 e0       	ldi	r25, 0x00	; 0
   15f52:	97 83       	std	Z+7, r25	; 0x07
   15f54:	86 83       	std	Z+6, r24	; 0x06
   15f56:	81 2f       	mov	r24, r17
   15f58:	90 e0       	ldi	r25, 0x00	; 0
   15f5a:	95 83       	std	Z+5, r25	; 0x05
   15f5c:	84 83       	std	Z+4, r24	; 0x04
   15f5e:	8c e1       	ldi	r24, 0x1C	; 28
   15f60:	9e e1       	ldi	r25, 0x1E	; 30
   15f62:	a0 e0       	ldi	r26, 0x00	; 0
   15f64:	81 83       	std	Z+1, r24	; 0x01
   15f66:	92 83       	std	Z+2, r25	; 0x02
   15f68:	a3 83       	std	Z+3, r26	; 0x03
   15f6a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
                0xff & ch, 0xff & listening, 0xff & talking);
        return(0);
   15f6e:	c0 e0       	ldi	r28, 0x00	; 0
   15f70:	d0 e0       	ldi	r29, 0x00	; 0
   15f72:	1c c0       	rjmp	.+56     	; 0x15fac <SS80_COMMANDS+0x1c6>
    }

    if(debuglevel & GPIB_ERR)
   15f74:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f78:	80 ff       	sbrs	r24, 0
   15f7a:	f9 cf       	rjmp	.-14     	; 0x15f6e <SS80_COMMANDS+0x188>
        printf("[SS80 Unknown SC: %02XH, listen:%02XH, talk:%02XH]\n",
   15f7c:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   15f80:	90 e0       	ldi	r25, 0x00	; 0
   15f82:	ed b7       	in	r30, 0x3d	; 61
   15f84:	fe b7       	in	r31, 0x3e	; 62
   15f86:	91 87       	std	Z+9, r25	; 0x09
   15f88:	80 87       	std	Z+8, r24	; 0x08
   15f8a:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   15f8e:	90 e0       	ldi	r25, 0x00	; 0
   15f90:	97 83       	std	Z+7, r25	; 0x07
   15f92:	86 83       	std	Z+6, r24	; 0x06
   15f94:	81 2f       	mov	r24, r17
   15f96:	90 e0       	ldi	r25, 0x00	; 0
   15f98:	95 83       	std	Z+5, r25	; 0x05
   15f9a:	84 83       	std	Z+4, r24	; 0x04
   15f9c:	88 ee       	ldi	r24, 0xE8	; 232
   15f9e:	9d e1       	ldi	r25, 0x1D	; 29
   15fa0:	a0 e0       	ldi	r26, 0x00	; 0
   15fa2:	81 83       	std	Z+1, r24	; 0x01
   15fa4:	92 83       	std	Z+2, r25	; 0x02
   15fa6:	a3 83       	std	Z+3, r26	; 0x03
   15fa8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
    return(0);
}
   15fac:	ce 01       	movw	r24, r28
   15fae:	cd b7       	in	r28, 0x3d	; 61
   15fb0:	de b7       	in	r29, 0x3e	; 62
   15fb2:	29 96       	adiw	r28, 0x09	; 9
   15fb4:	e3 e0       	ldi	r30, 0x03	; 3
   15fb6:	0c 94 87 e3 	jmp	0x1c70e	; 0x1c70e <__epilogue_restores__+0x1e>

00015fba <amigo_overflow_check>:
    }
/// @todo FIXME
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
    AMIGOs->dsj = 0;
    return(status & ERROR_MASK);
}
   15fba:	cf 92       	push	r12
   15fbc:	df 92       	push	r13
   15fbe:	ef 92       	push	r14
   15fc0:	0f 93       	push	r16
   15fc2:	1f 93       	push	r17
   15fc4:	cf 93       	push	r28
   15fc6:	df 93       	push	r29
   15fc8:	00 d0       	rcall	.+0      	; 0x15fca <amigo_overflow_check+0x10>
   15fca:	00 d0       	rcall	.+0      	; 0x15fcc <amigo_overflow_check+0x12>
   15fcc:	1f 92       	push	r1
   15fce:	ec 01       	movw	r28, r24
   15fd0:	8b 01       	movw	r16, r22
   15fd2:	80 e0       	ldi	r24, 0x00	; 0
   15fd4:	90 e0       	ldi	r25, 0x00	; 0
   15fd6:	20 ea       	ldi	r18, 0xA0	; 160
   15fd8:	3d e2       	ldi	r19, 0x2D	; 45
   15fda:	69 01       	movw	r12, r18
   15fdc:	e1 2c       	mov	r14, r1
   15fde:	2d 81       	ldd	r18, Y+5	; 0x05
   15fe0:	30 e0       	ldi	r19, 0x00	; 0
   15fe2:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   15fe6:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   15fea:	40 85       	ldd	r20, Z+8	; 0x08
   15fec:	51 85       	ldd	r21, Z+9	; 0x09
   15fee:	24 17       	cp	r18, r20
   15ff0:	35 07       	cpc	r19, r21
   15ff2:	64 f1       	brlt	.+88     	; 0x1604c <amigo_overflow_check+0x92>
   15ff4:	1d 82       	std	Y+5, r1	; 0x05
   15ff6:	2c 81       	ldd	r18, Y+4	; 0x04
   15ff8:	2f 5f       	subi	r18, 0xFF	; 255
   15ffa:	2c 83       	std	Y+4, r18	; 0x04
   15ffc:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   16000:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   16004:	2c 81       	ldd	r18, Y+4	; 0x04
   16006:	30 e0       	ldi	r19, 0x00	; 0
   16008:	42 85       	ldd	r20, Z+10	; 0x0a
   1600a:	53 85       	ldd	r21, Z+11	; 0x0b
   1600c:	24 17       	cp	r18, r20
   1600e:	35 07       	cpc	r19, r21
   16010:	34 f3       	brlt	.-52     	; 0x15fde <amigo_overflow_check+0x24>
   16012:	1c 82       	std	Y+4, r1	; 0x04
   16014:	2b 81       	ldd	r18, Y+3	; 0x03
   16016:	2f 5f       	subi	r18, 0xFF	; 255
   16018:	2b 83       	std	Y+3, r18	; 0x03
   1601a:	30 e0       	ldi	r19, 0x00	; 0
   1601c:	44 85       	ldd	r20, Z+12	; 0x0c
   1601e:	55 85       	ldd	r21, Z+13	; 0x0d
   16020:	24 17       	cp	r18, r20
   16022:	35 07       	cpc	r19, r21
   16024:	5c f3       	brlt	.-42     	; 0x15ffc <amigo_overflow_check+0x42>
   16026:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1602a:	80 ff       	sbrs	r24, 0
   1602c:	0c c0       	rjmp	.+24     	; 0x16046 <amigo_overflow_check+0x8c>
   1602e:	01 15       	cp	r16, r1
   16030:	11 05       	cpc	r17, r1
   16032:	49 f0       	breq	.+18     	; 0x16046 <amigo_overflow_check+0x8c>
   16034:	ed b7       	in	r30, 0x3d	; 61
   16036:	fe b7       	in	r31, 0x3e	; 62
   16038:	15 83       	std	Z+5, r17	; 0x05
   1603a:	04 83       	std	Z+4, r16	; 0x04
   1603c:	c1 82       	std	Z+1, r12	; 0x01
   1603e:	d2 82       	std	Z+2, r13	; 0x02
   16040:	e3 82       	std	Z+3, r14	; 0x03
   16042:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16046:	81 e0       	ldi	r24, 0x01	; 1
   16048:	90 e0       	ldi	r25, 0x00	; 0
   1604a:	d8 cf       	rjmp	.-80     	; 0x15ffc <amigo_overflow_check+0x42>
   1604c:	0f 90       	pop	r0
   1604e:	0f 90       	pop	r0
   16050:	0f 90       	pop	r0
   16052:	0f 90       	pop	r0
   16054:	0f 90       	pop	r0
   16056:	df 91       	pop	r29
   16058:	cf 91       	pop	r28
   1605a:	1f 91       	pop	r17
   1605c:	0f 91       	pop	r16
   1605e:	ef 90       	pop	r14
   16060:	df 90       	pop	r13
   16062:	cf 90       	pop	r12
   16064:	08 95       	ret

00016066 <amigo_chs_to_logical>:
   16066:	a1 e1       	ldi	r26, 0x11	; 17
   16068:	b0 e0       	ldi	r27, 0x00	; 0
   1606a:	e9 e3       	ldi	r30, 0x39	; 57
   1606c:	f0 eb       	ldi	r31, 0xB0	; 176
   1606e:	0c 94 60 e3 	jmp	0x1c6c0	; 0x1c6c0 <__prologue_saves__+0x8>
   16072:	8b 01       	movw	r16, r22
   16074:	60 91 67 19 	lds	r22, 0x1967	; 0x801967 <AMIGOp>
   16078:	70 91 68 19 	lds	r23, 0x1968	; 0x801968 <AMIGOp+0x1>
   1607c:	fb 01       	movw	r30, r22
   1607e:	40 85       	ldd	r20, Z+8	; 0x08
   16080:	51 85       	ldd	r21, Z+9	; 0x09
   16082:	fc 01       	movw	r30, r24
   16084:	c4 81       	ldd	r28, Z+4	; 0x04
   16086:	d0 e0       	ldi	r29, 0x00	; 0
   16088:	4c 9f       	mul	r20, r28
   1608a:	90 01       	movw	r18, r0
   1608c:	4d 9f       	mul	r20, r29
   1608e:	30 0d       	add	r19, r0
   16090:	5c 9f       	mul	r21, r28
   16092:	30 0d       	add	r19, r0
   16094:	11 24       	eor	r1, r1
   16096:	49 01       	movw	r8, r18
   16098:	33 0f       	add	r19, r19
   1609a:	aa 08       	sbc	r10, r10
   1609c:	bb 08       	sbc	r11, r11
   1609e:	63 80       	ldd	r6, Z+3	; 0x03
   160a0:	71 2c       	mov	r7, r1
   160a2:	fb 01       	movw	r30, r22
   160a4:	e2 84       	ldd	r14, Z+10	; 0x0a
   160a6:	f3 84       	ldd	r15, Z+11	; 0x0b
   160a8:	4e 9d       	mul	r20, r14
   160aa:	d0 01       	movw	r26, r0
   160ac:	4f 9d       	mul	r20, r15
   160ae:	b0 0d       	add	r27, r0
   160b0:	5e 9d       	mul	r21, r14
   160b2:	b0 0d       	add	r27, r0
   160b4:	11 24       	eor	r1, r1
   160b6:	a6 9d       	mul	r26, r6
   160b8:	90 01       	movw	r18, r0
   160ba:	a7 9d       	mul	r26, r7
   160bc:	30 0d       	add	r19, r0
   160be:	b6 9d       	mul	r27, r6
   160c0:	30 0d       	add	r19, r0
   160c2:	11 24       	eor	r1, r1
   160c4:	69 01       	movw	r12, r18
   160c6:	33 0f       	add	r19, r19
   160c8:	ee 08       	sbc	r14, r14
   160ca:	ff 08       	sbc	r15, r15
   160cc:	8c 0c       	add	r8, r12
   160ce:	9d 1c       	adc	r9, r13
   160d0:	ae 1c       	adc	r10, r14
   160d2:	bf 1c       	adc	r11, r15
   160d4:	fc 01       	movw	r30, r24
   160d6:	f5 80       	ldd	r15, Z+5	; 0x05
   160d8:	a5 01       	movw	r20, r10
   160da:	94 01       	movw	r18, r8
   160dc:	2f 0d       	add	r18, r15
   160de:	31 1d       	adc	r19, r1
   160e0:	41 1d       	adc	r20, r1
   160e2:	51 1d       	adc	r21, r1
   160e4:	fb 01       	movw	r30, r22
   160e6:	a6 81       	ldd	r26, Z+6	; 0x06
   160e8:	b7 81       	ldd	r27, Z+7	; 0x07
   160ea:	0e 94 46 e3 	call	0x1c68c	; 0x1c68c <__mulshisi3>
   160ee:	4b 01       	movw	r8, r22
   160f0:	5c 01       	movw	r10, r24
   160f2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   160f6:	85 ff       	sbrs	r24, 5
   160f8:	22 c0       	rjmp	.+68     	; 0x1613e <amigo_chs_to_logical+0xd8>
   160fa:	8f 2d       	mov	r24, r15
   160fc:	90 e0       	ldi	r25, 0x00	; 0
   160fe:	ed b7       	in	r30, 0x3d	; 61
   16100:	fe b7       	in	r31, 0x3e	; 62
   16102:	91 8b       	std	Z+17, r25	; 0x11
   16104:	80 8b       	std	Z+16, r24	; 0x10
   16106:	d7 87       	std	Z+15, r29	; 0x0f
   16108:	c6 87       	std	Z+14, r28	; 0x0e
   1610a:	75 86       	std	Z+13, r7	; 0x0d
   1610c:	64 86       	std	Z+12, r6	; 0x0c
   1610e:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16112:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   16116:	81 81       	ldd	r24, Z+1	; 0x01
   16118:	90 e0       	ldi	r25, 0x00	; 0
   1611a:	ed b7       	in	r30, 0x3d	; 61
   1611c:	fe b7       	in	r31, 0x3e	; 62
   1611e:	93 87       	std	Z+11, r25	; 0x0b
   16120:	82 87       	std	Z+10, r24	; 0x0a
   16122:	86 82       	std	Z+6, r8	; 0x06
   16124:	97 82       	std	Z+7, r9	; 0x07
   16126:	a0 86       	std	Z+8, r10	; 0x08
   16128:	b1 86       	std	Z+9, r11	; 0x09
   1612a:	15 83       	std	Z+5, r17	; 0x05
   1612c:	04 83       	std	Z+4, r16	; 0x04
   1612e:	8d e4       	ldi	r24, 0x4D	; 77
   16130:	9d e2       	ldi	r25, 0x2D	; 45
   16132:	a0 e0       	ldi	r26, 0x00	; 0
   16134:	81 83       	std	Z+1, r24	; 0x01
   16136:	92 83       	std	Z+2, r25	; 0x02
   16138:	a3 83       	std	Z+3, r26	; 0x03
   1613a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1613e:	c5 01       	movw	r24, r10
   16140:	b4 01       	movw	r22, r8
   16142:	cd b7       	in	r28, 0x3d	; 61
   16144:	de b7       	in	r29, 0x3e	; 62
   16146:	61 96       	adiw	r28, 0x11	; 17
   16148:	ee e0       	ldi	r30, 0x0E	; 14
   1614a:	0c 94 7c e3 	jmp	0x1c6f8	; 0x1c6f8 <__epilogue_restores__+0x8>

0001614e <amigo_init>:
   1614e:	ef 92       	push	r14
   16150:	ff 92       	push	r15
   16152:	0f 93       	push	r16
   16154:	1f 93       	push	r17
   16156:	cf 93       	push	r28
   16158:	df 93       	push	r29
   1615a:	00 ed       	ldi	r16, 0xD0	; 208
   1615c:	10 e2       	ldi	r17, 0x20	; 32
   1615e:	cb e0       	ldi	r28, 0x0B	; 11
   16160:	d0 e0       	ldi	r29, 0x00	; 0
   16162:	84 e0       	ldi	r24, 0x04	; 4
   16164:	f8 2e       	mov	r15, r24
   16166:	92 e0       	ldi	r25, 0x02	; 2
   16168:	e9 2e       	mov	r14, r25
   1616a:	d8 01       	movw	r26, r16
   1616c:	8c 91       	ld	r24, X
   1616e:	81 30       	cpi	r24, 0x01	; 1
   16170:	31 f5       	brne	.+76     	; 0x161be <amigo_init+0x70>
   16172:	ce 01       	movw	r24, r28
   16174:	0e 94 91 96 	call	0x12d22	; 0x12d22 <set_active_device>
   16178:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   1617c:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   16180:	10 82       	st	Z, r1
   16182:	9f 01       	movw	r18, r30
   16184:	27 5f       	subi	r18, 0xF7	; 247
   16186:	3f 4f       	sbci	r19, 0xFF	; 255
   16188:	d9 01       	movw	r26, r18
   1618a:	8f 2d       	mov	r24, r15
   1618c:	1d 92       	st	X+, r1
   1618e:	8a 95       	dec	r24
   16190:	e9 f7       	brne	.-6      	; 0x1618c <amigo_init+0x3e>
   16192:	2c 5f       	subi	r18, 0xFC	; 252
   16194:	3f 4f       	sbci	r19, 0xFF	; 255
   16196:	d9 01       	movw	r26, r18
   16198:	8f 2d       	mov	r24, r15
   1619a:	1d 92       	st	X+, r1
   1619c:	8a 95       	dec	r24
   1619e:	e9 f7       	brne	.-6      	; 0x1619a <amigo_init+0x4c>
   161a0:	11 82       	std	Z+1, r1	; 0x01
   161a2:	15 82       	std	Z+5, r1	; 0x05
   161a4:	14 82       	std	Z+4, r1	; 0x04
   161a6:	13 82       	std	Z+3, r1	; 0x03
   161a8:	e6 82       	std	Z+6, r14	; 0x06
   161aa:	10 86       	std	Z+8, r1	; 0x08
   161ac:	17 82       	std	Z+7, r1	; 0x07
   161ae:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   161b2:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   161b6:	81 81       	ldd	r24, Z+1	; 0x01
   161b8:	90 e0       	ldi	r25, 0x00	; 0
   161ba:	0e 94 6a 85 	call	0x10ad4	; 0x10ad4 <gpib_disable_PPR>
   161be:	21 97       	sbiw	r28, 0x01	; 1
   161c0:	0b 52       	subi	r16, 0x2B	; 43
   161c2:	11 09       	sbc	r17, r1
   161c4:	cf 3f       	cpi	r28, 0xFF	; 255
   161c6:	af ef       	ldi	r26, 0xFF	; 255
   161c8:	da 07       	cpc	r29, r26
   161ca:	79 f6       	brne	.-98     	; 0x1616a <amigo_init+0x1c>
   161cc:	cd b7       	in	r28, 0x3d	; 61
   161ce:	de b7       	in	r29, 0x3e	; 62
   161d0:	e6 e0       	ldi	r30, 0x06	; 6
   161d2:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

000161d6 <amigo_request_logical_address>:
   161d6:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   161da:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   161de:	15 86       	std	Z+13, r1	; 0x0d
   161e0:	83 81       	ldd	r24, Z+3	; 0x03
   161e2:	86 87       	std	Z+14, r24	; 0x0e
   161e4:	84 81       	ldd	r24, Z+4	; 0x04
   161e6:	87 87       	std	Z+15, r24	; 0x0f
   161e8:	85 81       	ldd	r24, Z+5	; 0x05
   161ea:	80 8b       	std	Z+16, r24	; 0x10
   161ec:	80 e0       	ldi	r24, 0x00	; 0
   161ee:	90 e0       	ldi	r25, 0x00	; 0
   161f0:	08 95       	ret

000161f2 <amigo_request_status>:
   161f2:	00 d0       	rcall	.+0      	; 0x161f4 <amigo_request_status+0x2>
   161f4:	1f 92       	push	r1
   161f6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161fa:	85 ff       	sbrs	r24, 5
   161fc:	0a c0       	rjmp	.+20     	; 0x16212 <amigo_request_status+0x20>
   161fe:	80 e2       	ldi	r24, 0x20	; 32
   16200:	9e e2       	ldi	r25, 0x2E	; 46
   16202:	a0 e0       	ldi	r26, 0x00	; 0
   16204:	ed b7       	in	r30, 0x3d	; 61
   16206:	fe b7       	in	r31, 0x3e	; 62
   16208:	81 83       	std	Z+1, r24	; 0x01
   1620a:	92 83       	std	Z+2, r25	; 0x02
   1620c:	a3 83       	std	Z+3, r26	; 0x03
   1620e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16212:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16216:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   1621a:	11 86       	std	Z+9, r1	; 0x09
   1621c:	81 81       	ldd	r24, Z+1	; 0x01
   1621e:	82 87       	std	Z+10, r24	; 0x0a
   16220:	8d e0       	ldi	r24, 0x0D	; 13
   16222:	83 87       	std	Z+11, r24	; 0x0b
   16224:	14 86       	std	Z+12, r1	; 0x0c
   16226:	0e 94 1e 6f 	call	0xde3c	; 0xde3c <mmc_wp_status>
   1622a:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   1622e:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   16232:	89 2b       	or	r24, r25
   16234:	19 f0       	breq	.+6      	; 0x1623c <amigo_request_status+0x4a>
   16236:	84 85       	ldd	r24, Z+12	; 0x0c
   16238:	80 66       	ori	r24, 0x60	; 96
   1623a:	84 87       	std	Z+12, r24	; 0x0c
   1623c:	86 81       	ldd	r24, Z+6	; 0x06
   1623e:	82 30       	cpi	r24, 0x02	; 2
   16240:	31 f4       	brne	.+12     	; 0x1624e <amigo_request_status+0x5c>
   16242:	83 e1       	ldi	r24, 0x13	; 19
   16244:	81 87       	std	Z+9, r24	; 0x09
   16246:	84 85       	ldd	r24, Z+12	; 0x0c
   16248:	88 60       	ori	r24, 0x08	; 8
   1624a:	84 87       	std	Z+12, r24	; 0x0c
   1624c:	21 c0       	rjmp	.+66     	; 0x16290 <amigo_request_status+0x9e>
   1624e:	27 81       	ldd	r18, Z+7	; 0x07
   16250:	30 85       	ldd	r19, Z+8	; 0x08
   16252:	21 15       	cp	r18, r1
   16254:	31 05       	cpc	r19, r1
   16256:	11 f4       	brne	.+4      	; 0x1625c <amigo_request_status+0x6a>
   16258:	81 30       	cpi	r24, 0x01	; 1
   1625a:	d1 f4       	brne	.+52     	; 0x16290 <amigo_request_status+0x9e>
   1625c:	26 fd       	sbrc	r18, 6
   1625e:	0c c0       	rjmp	.+24     	; 0x16278 <amigo_request_status+0x86>
   16260:	25 ff       	sbrs	r18, 5
   16262:	03 c0       	rjmp	.+6      	; 0x1626a <amigo_request_status+0x78>
   16264:	8a e0       	ldi	r24, 0x0A	; 10
   16266:	81 87       	std	Z+9, r24	; 0x09
   16268:	0d c0       	rjmp	.+26     	; 0x16284 <amigo_request_status+0x92>
   1626a:	84 85       	ldd	r24, Z+12	; 0x0c
   1626c:	24 ff       	sbrs	r18, 4
   1626e:	02 c0       	rjmp	.+4      	; 0x16274 <amigo_request_status+0x82>
   16270:	83 60       	ori	r24, 0x03	; 3
   16272:	07 c0       	rjmp	.+14     	; 0x16282 <amigo_request_status+0x90>
   16274:	21 ff       	sbrs	r18, 1
   16276:	02 c0       	rjmp	.+4      	; 0x1627c <amigo_request_status+0x8a>
   16278:	83 e1       	ldi	r24, 0x13	; 19
   1627a:	f5 cf       	rjmp	.-22     	; 0x16266 <amigo_request_status+0x74>
   1627c:	22 ff       	sbrs	r18, 2
   1627e:	02 c0       	rjmp	.+4      	; 0x16284 <amigo_request_status+0x92>
   16280:	84 60       	ori	r24, 0x04	; 4
   16282:	84 87       	std	Z+12, r24	; 0x0c
   16284:	84 85       	ldd	r24, Z+12	; 0x0c
   16286:	80 61       	ori	r24, 0x10	; 16
   16288:	84 87       	std	Z+12, r24	; 0x0c
   1628a:	83 85       	ldd	r24, Z+11	; 0x0b
   1628c:	80 68       	ori	r24, 0x80	; 128
   1628e:	83 87       	std	Z+11, r24	; 0x0b
   16290:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   16294:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   16298:	81 81       	ldd	r24, Z+1	; 0x01
   1629a:	90 e0       	ldi	r25, 0x00	; 0
   1629c:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
   162a0:	80 e0       	ldi	r24, 0x00	; 0
   162a2:	90 e0       	ldi	r25, 0x00	; 0
   162a4:	0f 90       	pop	r0
   162a6:	0f 90       	pop	r0
   162a8:	0f 90       	pop	r0
   162aa:	08 95       	ret

000162ac <amigo_send_logical_address>:
   162ac:	a5 e0       	ldi	r26, 0x05	; 5
   162ae:	b0 e0       	ldi	r27, 0x00	; 0
   162b0:	ec e5       	ldi	r30, 0x5C	; 92
   162b2:	f1 eb       	ldi	r31, 0xB1	; 177
   162b4:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
   162b8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   162bc:	85 ff       	sbrs	r24, 5
   162be:	0a c0       	rjmp	.+20     	; 0x162d4 <amigo_send_logical_address+0x28>
   162c0:	82 e0       	ldi	r24, 0x02	; 2
   162c2:	9e e2       	ldi	r25, 0x2E	; 46
   162c4:	a0 e0       	ldi	r26, 0x00	; 0
   162c6:	ed b7       	in	r30, 0x3d	; 61
   162c8:	fe b7       	in	r31, 0x3e	; 62
   162ca:	81 83       	std	Z+1, r24	; 0x01
   162cc:	92 83       	std	Z+2, r25	; 0x02
   162ce:	a3 83       	std	Z+3, r26	; 0x03
   162d0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   162d4:	80 e0       	ldi	r24, 0x00	; 0
   162d6:	91 e0       	ldi	r25, 0x01	; 1
   162d8:	9d 83       	std	Y+5, r25	; 0x05
   162da:	8c 83       	std	Y+4, r24	; 0x04
   162dc:	80 91 65 19 	lds	r24, 0x1965	; 0x801965 <AMIGOs>
   162e0:	90 91 66 19 	lds	r25, 0x1966	; 0x801966 <AMIGOs+0x1>
   162e4:	ae 01       	movw	r20, r28
   162e6:	4c 5f       	subi	r20, 0xFC	; 252
   162e8:	5f 4f       	sbci	r21, 0xFF	; 255
   162ea:	64 e0       	ldi	r22, 0x04	; 4
   162ec:	70 e0       	ldi	r23, 0x00	; 0
   162ee:	0d 96       	adiw	r24, 0x0d	; 13
   162f0:	0e 94 83 8a 	call	0x11506	; 0x11506 <gpib_write_str>
   162f4:	2c 81       	ldd	r18, Y+4	; 0x04
   162f6:	3d 81       	ldd	r19, Y+5	; 0x05
   162f8:	22 27       	eor	r18, r18
   162fa:	30 7d       	andi	r19, 0xD0	; 208
   162fc:	23 2b       	or	r18, r19
   162fe:	11 f4       	brne	.+4      	; 0x16304 <amigo_send_logical_address+0x58>
   16300:	04 97       	sbiw	r24, 0x04	; 4
   16302:	c9 f0       	breq	.+50     	; 0x16336 <amigo_send_logical_address+0x8a>
   16304:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16308:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   1630c:	87 81       	ldd	r24, Z+7	; 0x07
   1630e:	90 85       	ldd	r25, Z+8	; 0x08
   16310:	80 62       	ori	r24, 0x20	; 32
   16312:	90 87       	std	Z+8, r25	; 0x08
   16314:	87 83       	std	Z+7, r24	; 0x07
   16316:	81 e0       	ldi	r24, 0x01	; 1
   16318:	86 83       	std	Z+6, r24	; 0x06
   1631a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1631e:	80 ff       	sbrs	r24, 0
   16320:	0a c0       	rjmp	.+20     	; 0x16336 <amigo_send_logical_address+0x8a>
   16322:	88 ee       	ldi	r24, 0xE8	; 232
   16324:	9d e2       	ldi	r25, 0x2D	; 45
   16326:	a0 e0       	ldi	r26, 0x00	; 0
   16328:	ed b7       	in	r30, 0x3d	; 61
   1632a:	fe b7       	in	r31, 0x3e	; 62
   1632c:	81 83       	std	Z+1, r24	; 0x01
   1632e:	92 83       	std	Z+2, r25	; 0x02
   16330:	a3 83       	std	Z+3, r26	; 0x03
   16332:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16336:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   1633a:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   1633e:	81 81       	ldd	r24, Z+1	; 0x01
   16340:	90 e0       	ldi	r25, 0x00	; 0
   16342:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
   16346:	8c 81       	ldd	r24, Y+4	; 0x04
   16348:	9d 81       	ldd	r25, Y+5	; 0x05
   1634a:	88 27       	eor	r24, r24
   1634c:	90 7d       	andi	r25, 0xD0	; 208
   1634e:	25 96       	adiw	r28, 0x05	; 5
   16350:	e2 e0       	ldi	r30, 0x02	; 2
   16352:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00016356 <amigo_send_status>:
   16356:	a5 e0       	ldi	r26, 0x05	; 5
   16358:	b0 e0       	ldi	r27, 0x00	; 0
   1635a:	e1 eb       	ldi	r30, 0xB1	; 177
   1635c:	f1 eb       	ldi	r31, 0xB1	; 177
   1635e:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
   16362:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16366:	85 ff       	sbrs	r24, 5
   16368:	0a c0       	rjmp	.+20     	; 0x1637e <amigo_send_status+0x28>
   1636a:	83 ed       	ldi	r24, 0xD3	; 211
   1636c:	9d e2       	ldi	r25, 0x2D	; 45
   1636e:	a0 e0       	ldi	r26, 0x00	; 0
   16370:	ed b7       	in	r30, 0x3d	; 61
   16372:	fe b7       	in	r31, 0x3e	; 62
   16374:	81 83       	std	Z+1, r24	; 0x01
   16376:	92 83       	std	Z+2, r25	; 0x02
   16378:	a3 83       	std	Z+3, r26	; 0x03
   1637a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1637e:	80 e0       	ldi	r24, 0x00	; 0
   16380:	91 e0       	ldi	r25, 0x01	; 1
   16382:	9d 83       	std	Y+5, r25	; 0x05
   16384:	8c 83       	std	Y+4, r24	; 0x04
   16386:	80 91 65 19 	lds	r24, 0x1965	; 0x801965 <AMIGOs>
   1638a:	90 91 66 19 	lds	r25, 0x1966	; 0x801966 <AMIGOs+0x1>
   1638e:	ae 01       	movw	r20, r28
   16390:	4c 5f       	subi	r20, 0xFC	; 252
   16392:	5f 4f       	sbci	r21, 0xFF	; 255
   16394:	64 e0       	ldi	r22, 0x04	; 4
   16396:	70 e0       	ldi	r23, 0x00	; 0
   16398:	09 96       	adiw	r24, 0x09	; 9
   1639a:	0e 94 83 8a 	call	0x11506	; 0x11506 <gpib_write_str>
   1639e:	2c 81       	ldd	r18, Y+4	; 0x04
   163a0:	3d 81       	ldd	r19, Y+5	; 0x05
   163a2:	22 27       	eor	r18, r18
   163a4:	30 7d       	andi	r19, 0xD0	; 208
   163a6:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   163aa:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   163ae:	23 2b       	or	r18, r19
   163b0:	11 f4       	brne	.+4      	; 0x163b6 <amigo_send_status+0x60>
   163b2:	04 97       	sbiw	r24, 0x04	; 4
   163b4:	b1 f0       	breq	.+44     	; 0x163e2 <amigo_send_status+0x8c>
   163b6:	87 81       	ldd	r24, Z+7	; 0x07
   163b8:	90 85       	ldd	r25, Z+8	; 0x08
   163ba:	80 62       	ori	r24, 0x20	; 32
   163bc:	90 87       	std	Z+8, r25	; 0x08
   163be:	87 83       	std	Z+7, r24	; 0x07
   163c0:	81 e0       	ldi	r24, 0x01	; 1
   163c2:	86 83       	std	Z+6, r24	; 0x06
   163c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   163c8:	80 ff       	sbrs	r24, 0
   163ca:	0e c0       	rjmp	.+28     	; 0x163e8 <amigo_send_status+0x92>
   163cc:	89 eb       	ldi	r24, 0xB9	; 185
   163ce:	9d e2       	ldi	r25, 0x2D	; 45
   163d0:	a0 e0       	ldi	r26, 0x00	; 0
   163d2:	ed b7       	in	r30, 0x3d	; 61
   163d4:	fe b7       	in	r31, 0x3e	; 62
   163d6:	81 83       	std	Z+1, r24	; 0x01
   163d8:	92 83       	std	Z+2, r25	; 0x02
   163da:	a3 83       	std	Z+3, r26	; 0x03
   163dc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   163e0:	03 c0       	rjmp	.+6      	; 0x163e8 <amigo_send_status+0x92>
   163e2:	10 86       	std	Z+8, r1	; 0x08
   163e4:	17 82       	std	Z+7, r1	; 0x07
   163e6:	16 82       	std	Z+6, r1	; 0x06
   163e8:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   163ec:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   163f0:	81 81       	ldd	r24, Z+1	; 0x01
   163f2:	90 e0       	ldi	r25, 0x00	; 0
   163f4:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
   163f8:	8c 81       	ldd	r24, Y+4	; 0x04
   163fa:	9d 81       	ldd	r25, Y+5	; 0x05
   163fc:	88 27       	eor	r24, r24
   163fe:	90 7d       	andi	r25, 0xD0	; 208
   16400:	25 96       	adiw	r28, 0x05	; 5
   16402:	e2 e0       	ldi	r30, 0x02	; 2
   16404:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00016408 <amigo_increment>:
   16408:	a1 e1       	ldi	r26, 0x11	; 17
   1640a:	b0 e0       	ldi	r27, 0x00	; 0
   1640c:	ea e0       	ldi	r30, 0x0A	; 10
   1640e:	f2 eb       	ldi	r31, 0xB2	; 178
   16410:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
   16414:	bc 01       	movw	r22, r24
   16416:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   1641a:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   1641e:	91 e1       	ldi	r25, 0x11	; 17
   16420:	de 01       	movw	r26, r28
   16422:	11 96       	adiw	r26, 0x01	; 1
   16424:	01 90       	ld	r0, Z+
   16426:	0d 92       	st	X+, r0
   16428:	9a 95       	dec	r25
   1642a:	e1 f7       	brne	.-8      	; 0x16424 <amigo_increment+0x1c>
   1642c:	9e 81       	ldd	r25, Y+6	; 0x06
   1642e:	9f 5f       	subi	r25, 0xFF	; 255
   16430:	9e 83       	std	Y+6, r25	; 0x06
   16432:	ce 01       	movw	r24, r28
   16434:	01 96       	adiw	r24, 0x01	; 1
   16436:	c1 dd       	rcall	.-1150   	; 0x15fba <amigo_overflow_check>
   16438:	00 97       	sbiw	r24, 0x00	; 0
   1643a:	59 f4       	brne	.+22     	; 0x16452 <amigo_increment+0x4a>
   1643c:	a0 91 65 19 	lds	r26, 0x1965	; 0x801965 <AMIGOs>
   16440:	b0 91 66 19 	lds	r27, 0x1966	; 0x801966 <AMIGOs+0x1>
   16444:	21 e1       	ldi	r18, 0x11	; 17
   16446:	fe 01       	movw	r30, r28
   16448:	31 96       	adiw	r30, 0x01	; 1
   1644a:	01 90       	ld	r0, Z+
   1644c:	0d 92       	st	X+, r0
   1644e:	2a 95       	dec	r18
   16450:	e1 f7       	brne	.-8      	; 0x1644a <amigo_increment+0x42>
   16452:	61 96       	adiw	r28, 0x11	; 17
   16454:	e2 e0       	ldi	r30, 0x02	; 2
   16456:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

0001645a <amigo_seek>:
   1645a:	0f 93       	push	r16
   1645c:	1f 93       	push	r17
   1645e:	cf 93       	push	r28
   16460:	df 93       	push	r29
   16462:	ec 01       	movw	r28, r24
   16464:	62 e9       	ldi	r22, 0x92	; 146
   16466:	75 e1       	ldi	r23, 0x15	; 21
   16468:	a8 dd       	rcall	.-1200   	; 0x15fba <amigo_overflow_check>
   1646a:	8c 01       	movw	r16, r24
   1646c:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16470:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   16474:	89 2b       	or	r24, r25
   16476:	41 f0       	breq	.+16     	; 0x16488 <amigo_seek+0x2e>
   16478:	81 e0       	ldi	r24, 0x01	; 1
   1647a:	86 83       	std	Z+6, r24	; 0x06
   1647c:	87 81       	ldd	r24, Z+7	; 0x07
   1647e:	90 85       	ldd	r25, Z+8	; 0x08
   16480:	84 60       	ori	r24, 0x04	; 4
   16482:	90 87       	std	Z+8, r25	; 0x08
   16484:	87 83       	std	Z+7, r24	; 0x07
   16486:	06 c0       	rjmp	.+12     	; 0x16494 <amigo_seek+0x3a>
   16488:	8d 81       	ldd	r24, Y+5	; 0x05
   1648a:	85 83       	std	Z+5, r24	; 0x05
   1648c:	8c 81       	ldd	r24, Y+4	; 0x04
   1648e:	84 83       	std	Z+4, r24	; 0x04
   16490:	8b 81       	ldd	r24, Y+3	; 0x03
   16492:	83 83       	std	Z+3, r24	; 0x03
   16494:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   16498:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   1649c:	81 81       	ldd	r24, Z+1	; 0x01
   1649e:	90 e0       	ldi	r25, 0x00	; 0
   164a0:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
   164a4:	c8 01       	movw	r24, r16
   164a6:	df 91       	pop	r29
   164a8:	cf 91       	pop	r28
   164aa:	1f 91       	pop	r17
   164ac:	0f 91       	pop	r16
   164ae:	08 95       	ret

000164b0 <amigo_verify>:
   164b0:	8f 92       	push	r8
   164b2:	9f 92       	push	r9
   164b4:	af 92       	push	r10
   164b6:	bf 92       	push	r11
   164b8:	ef 92       	push	r14
   164ba:	ff 92       	push	r15
   164bc:	0f 93       	push	r16
   164be:	1f 93       	push	r17
   164c0:	cf 93       	push	r28
   164c2:	df 93       	push	r29
   164c4:	ad b7       	in	r26, 0x3d	; 61
   164c6:	be b7       	in	r27, 0x3e	; 62
   164c8:	19 97       	sbiw	r26, 0x09	; 9
   164ca:	0f b6       	in	r0, 0x3f	; 63
   164cc:	f8 94       	cli
   164ce:	be bf       	out	0x3e, r27	; 62
   164d0:	0f be       	out	0x3f, r0	; 63
   164d2:	ad bf       	out	0x3d, r26	; 61
   164d4:	7c 01       	movw	r14, r24
   164d6:	67 e9       	ldi	r22, 0x97	; 151
   164d8:	75 e1       	ldi	r23, 0x15	; 21
   164da:	80 91 65 19 	lds	r24, 0x1965	; 0x801965 <AMIGOs>
   164de:	90 91 66 19 	lds	r25, 0x1966	; 0x801966 <AMIGOs+0x1>
   164e2:	c1 dd       	rcall	.-1150   	; 0x16066 <amigo_chs_to_logical>
   164e4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   164e8:	25 ff       	sbrs	r18, 5
   164ea:	10 c0       	rjmp	.+32     	; 0x1650c <amigo_verify+0x5c>
   164ec:	ed b7       	in	r30, 0x3d	; 61
   164ee:	fe b7       	in	r31, 0x3e	; 62
   164f0:	e0 86       	std	Z+8, r14	; 0x08
   164f2:	f1 86       	std	Z+9, r15	; 0x09
   164f4:	64 83       	std	Z+4, r22	; 0x04
   164f6:	75 83       	std	Z+5, r23	; 0x05
   164f8:	86 83       	std	Z+6, r24	; 0x06
   164fa:	97 83       	std	Z+7, r25	; 0x07
   164fc:	88 e7       	ldi	r24, 0x78	; 120
   164fe:	9d e2       	ldi	r25, 0x2D	; 45
   16500:	a0 e0       	ldi	r26, 0x00	; 0
   16502:	81 83       	std	Z+1, r24	; 0x01
   16504:	92 83       	std	Z+2, r25	; 0x02
   16506:	a3 83       	std	Z+3, r26	; 0x03
   16508:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1650c:	e7 01       	movw	r28, r14
   1650e:	20 97       	sbiw	r28, 0x00	; 0
   16510:	09 f4       	brne	.+2      	; 0x16514 <amigo_verify+0x64>
   16512:	4b c0       	rjmp	.+150    	; 0x165aa <amigo_verify+0xfa>
   16514:	64 ea       	ldi	r22, 0xA4	; 164
   16516:	75 e1       	ldi	r23, 0x15	; 21
   16518:	80 91 65 19 	lds	r24, 0x1965	; 0x801965 <AMIGOs>
   1651c:	90 91 66 19 	lds	r25, 0x1966	; 0x801966 <AMIGOs+0x1>
   16520:	a2 dd       	rcall	.-1212   	; 0x16066 <amigo_chs_to_logical>
   16522:	4b 01       	movw	r8, r22
   16524:	5c 01       	movw	r10, r24
   16526:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1652a:	86 fd       	sbrc	r24, 6
   1652c:	0e 94 5a 84 	call	0x108b4	; 0x108b4 <gpib_timer_elapsed_begin>
   16530:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   16534:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   16538:	e0 90 65 19 	lds	r14, 0x1965	; 0x801965 <AMIGOs>
   1653c:	f0 90 66 19 	lds	r15, 0x1966	; 0x801966 <AMIGOs+0x1>
   16540:	87 e0       	ldi	r24, 0x07	; 7
   16542:	e8 0e       	add	r14, r24
   16544:	f1 1c       	adc	r15, r1
   16546:	06 81       	ldd	r16, Z+6	; 0x06
   16548:	17 81       	ldd	r17, Z+7	; 0x07
   1654a:	2d ee       	ldi	r18, 0xED	; 237
   1654c:	3c e1       	ldi	r19, 0x1C	; 28
   1654e:	b5 01       	movw	r22, r10
   16550:	a4 01       	movw	r20, r8
   16552:	82 81       	ldd	r24, Z+2	; 0x02
   16554:	93 81       	ldd	r25, Z+3	; 0x03
   16556:	0e 94 ac 83 	call	0x10758	; 0x10758 <dbf_open_read>
   1655a:	7c 01       	movw	r14, r24
   1655c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16560:	86 ff       	sbrs	r24, 6
   16562:	04 c0       	rjmp	.+8      	; 0x1656c <amigo_verify+0xbc>
   16564:	8b ea       	ldi	r24, 0xAB	; 171
   16566:	90 e1       	ldi	r25, 0x10	; 16
   16568:	0e 94 6c 84 	call	0x108d8	; 0x108d8 <gpib_timer_elapsed_end>
   1656c:	20 91 65 19 	lds	r18, 0x1965	; 0x801965 <AMIGOs>
   16570:	30 91 66 19 	lds	r19, 0x1966	; 0x801966 <AMIGOs+0x1>
   16574:	f9 01       	movw	r30, r18
   16576:	87 81       	ldd	r24, Z+7	; 0x07
   16578:	90 85       	ldd	r25, Z+8	; 0x08
   1657a:	89 2b       	or	r24, r25
   1657c:	21 f0       	breq	.+8      	; 0x16586 <amigo_verify+0xd6>
   1657e:	81 e0       	ldi	r24, 0x01	; 1
   16580:	f9 01       	movw	r30, r18
   16582:	86 83       	std	Z+6, r24	; 0x06
   16584:	15 c0       	rjmp	.+42     	; 0x165b0 <amigo_verify+0x100>
   16586:	80 91 67 19 	lds	r24, 0x1967	; 0x801967 <AMIGOp>
   1658a:	90 91 68 19 	lds	r25, 0x1968	; 0x801968 <AMIGOp+0x1>
   1658e:	fc 01       	movw	r30, r24
   16590:	86 81       	ldd	r24, Z+6	; 0x06
   16592:	97 81       	ldd	r25, Z+7	; 0x07
   16594:	e8 16       	cp	r14, r24
   16596:	f9 06       	cpc	r15, r25
   16598:	91 f7       	brne	.-28     	; 0x1657e <amigo_verify+0xce>
   1659a:	8c ea       	ldi	r24, 0xAC	; 172
   1659c:	95 e1       	ldi	r25, 0x15	; 21
   1659e:	34 df       	rcall	.-408    	; 0x16408 <amigo_increment>
   165a0:	21 97       	sbiw	r28, 0x01	; 1
   165a2:	89 2b       	or	r24, r25
   165a4:	09 f4       	brne	.+2      	; 0x165a8 <amigo_verify+0xf8>
   165a6:	b3 cf       	rjmp	.-154    	; 0x1650e <amigo_verify+0x5e>
   165a8:	03 c0       	rjmp	.+6      	; 0x165b0 <amigo_verify+0x100>
   165aa:	c0 e0       	ldi	r28, 0x00	; 0
   165ac:	d0 e0       	ldi	r29, 0x00	; 0
   165ae:	02 c0       	rjmp	.+4      	; 0x165b4 <amigo_verify+0x104>
   165b0:	c1 e0       	ldi	r28, 0x01	; 1
   165b2:	d0 e0       	ldi	r29, 0x00	; 0
   165b4:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   165b8:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   165bc:	81 81       	ldd	r24, Z+1	; 0x01
   165be:	90 e0       	ldi	r25, 0x00	; 0
   165c0:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
   165c4:	ce 01       	movw	r24, r28
   165c6:	ad b7       	in	r26, 0x3d	; 61
   165c8:	be b7       	in	r27, 0x3e	; 62
   165ca:	19 96       	adiw	r26, 0x09	; 9
   165cc:	0f b6       	in	r0, 0x3f	; 63
   165ce:	f8 94       	cli
   165d0:	be bf       	out	0x3e, r27	; 62
   165d2:	0f be       	out	0x3f, r0	; 63
   165d4:	ad bf       	out	0x3d, r26	; 61
   165d6:	df 91       	pop	r29
   165d8:	cf 91       	pop	r28
   165da:	1f 91       	pop	r17
   165dc:	0f 91       	pop	r16
   165de:	ff 90       	pop	r15
   165e0:	ef 90       	pop	r14
   165e2:	bf 90       	pop	r11
   165e4:	af 90       	pop	r10
   165e6:	9f 90       	pop	r9
   165e8:	8f 90       	pop	r8
   165ea:	08 95       	ret

000165ec <amigo_format>:
   165ec:	ef 92       	push	r14
   165ee:	ff 92       	push	r15
   165f0:	0f 93       	push	r16
   165f2:	1f 93       	push	r17
   165f4:	cf 93       	push	r28
   165f6:	df 93       	push	r29
   165f8:	00 d0       	rcall	.+0      	; 0x165fa <amigo_format+0xe>
   165fa:	1f 92       	push	r1
   165fc:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16600:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   16604:	15 82       	std	Z+5, r1	; 0x05
   16606:	14 82       	std	Z+4, r1	; 0x04
   16608:	13 82       	std	Z+3, r1	; 0x03
   1660a:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   1660e:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   16612:	46 81       	ldd	r20, Z+6	; 0x06
   16614:	57 81       	ldd	r21, Z+7	; 0x07
   16616:	68 2f       	mov	r22, r24
   16618:	70 e0       	ldi	r23, 0x00	; 0
   1661a:	8d ee       	ldi	r24, 0xED	; 237
   1661c:	9c e1       	ldi	r25, 0x1C	; 28
   1661e:	0e 94 54 e7 	call	0x1cea8	; 0x1cea8 <memset>
   16622:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16626:	85 ff       	sbrs	r24, 5
   16628:	0a c0       	rjmp	.+20     	; 0x1663e <amigo_format+0x52>
   1662a:	8d e3       	ldi	r24, 0x3D	; 61
   1662c:	9d e2       	ldi	r25, 0x2D	; 45
   1662e:	a0 e0       	ldi	r26, 0x00	; 0
   16630:	ed b7       	in	r30, 0x3d	; 61
   16632:	fe b7       	in	r31, 0x3e	; 62
   16634:	81 83       	std	Z+1, r24	; 0x01
   16636:	92 83       	std	Z+2, r25	; 0x02
   16638:	a3 83       	std	Z+3, r26	; 0x03
   1663a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1663e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16642:	86 fd       	sbrc	r24, 6
   16644:	0e 94 5a 84 	call	0x108b4	; 0x108b4 <gpib_timer_elapsed_begin>
   16648:	63 eb       	ldi	r22, 0xB3	; 179
   1664a:	75 e1       	ldi	r23, 0x15	; 21
   1664c:	80 91 65 19 	lds	r24, 0x1965	; 0x801965 <AMIGOs>
   16650:	90 91 66 19 	lds	r25, 0x1966	; 0x801966 <AMIGOs+0x1>
   16654:	08 dd       	rcall	.-1520   	; 0x16066 <amigo_chs_to_logical>
   16656:	ab 01       	movw	r20, r22
   16658:	bc 01       	movw	r22, r24
   1665a:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   1665e:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   16662:	e0 90 65 19 	lds	r14, 0x1965	; 0x801965 <AMIGOs>
   16666:	f0 90 66 19 	lds	r15, 0x1966	; 0x801966 <AMIGOs+0x1>
   1666a:	87 e0       	ldi	r24, 0x07	; 7
   1666c:	e8 0e       	add	r14, r24
   1666e:	f1 1c       	adc	r15, r1
   16670:	06 81       	ldd	r16, Z+6	; 0x06
   16672:	17 81       	ldd	r17, Z+7	; 0x07
   16674:	2d ee       	ldi	r18, 0xED	; 237
   16676:	3c e1       	ldi	r19, 0x1C	; 28
   16678:	82 81       	ldd	r24, Z+2	; 0x02
   1667a:	93 81       	ldd	r25, Z+3	; 0x03
   1667c:	0e 94 03 84 	call	0x10806	; 0x10806 <dbf_open_write>
   16680:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16684:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   16688:	27 81       	ldd	r18, Z+7	; 0x07
   1668a:	30 85       	ldd	r19, Z+8	; 0x08
   1668c:	21 15       	cp	r18, r1
   1668e:	31 05       	cpc	r19, r1
   16690:	49 f4       	brne	.+18     	; 0x166a4 <amigo_format+0xb8>
   16692:	c0 91 67 19 	lds	r28, 0x1967	; 0x801967 <AMIGOp>
   16696:	d0 91 68 19 	lds	r29, 0x1968	; 0x801968 <AMIGOp+0x1>
   1669a:	4e 81       	ldd	r20, Y+6	; 0x06
   1669c:	5f 81       	ldd	r21, Y+7	; 0x07
   1669e:	84 17       	cp	r24, r20
   166a0:	95 07       	cpc	r25, r21
   166a2:	41 f0       	breq	.+16     	; 0x166b4 <amigo_format+0xc8>
   166a4:	22 60       	ori	r18, 0x02	; 2
   166a6:	30 87       	std	Z+8, r19	; 0x08
   166a8:	27 83       	std	Z+7, r18	; 0x07
   166aa:	81 e0       	ldi	r24, 0x01	; 1
   166ac:	86 83       	std	Z+6, r24	; 0x06
   166ae:	c1 e0       	ldi	r28, 0x01	; 1
   166b0:	d0 e0       	ldi	r29, 0x00	; 0
   166b2:	0f c0       	rjmp	.+30     	; 0x166d2 <amigo_format+0xe6>
   166b4:	80 e0       	ldi	r24, 0x00	; 0
   166b6:	90 e0       	ldi	r25, 0x00	; 0
   166b8:	a7 de       	rcall	.-690    	; 0x16408 <amigo_increment>
   166ba:	89 2b       	or	r24, r25
   166bc:	29 f2       	breq	.-118    	; 0x16648 <amigo_format+0x5c>
   166be:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   166c2:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   166c6:	15 82       	std	Z+5, r1	; 0x05
   166c8:	14 82       	std	Z+4, r1	; 0x04
   166ca:	13 82       	std	Z+3, r1	; 0x03
   166cc:	16 82       	std	Z+6, r1	; 0x06
   166ce:	c0 e0       	ldi	r28, 0x00	; 0
   166d0:	d0 e0       	ldi	r29, 0x00	; 0
   166d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166d6:	86 ff       	sbrs	r24, 6
   166d8:	04 c0       	rjmp	.+8      	; 0x166e2 <amigo_format+0xf6>
   166da:	83 eb       	ldi	r24, 0xB3	; 179
   166dc:	95 e1       	ldi	r25, 0x15	; 21
   166de:	0e 94 6c 84 	call	0x108d8	; 0x108d8 <gpib_timer_elapsed_end>
   166e2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166e6:	85 ff       	sbrs	r24, 5
   166e8:	0a c0       	rjmp	.+20     	; 0x166fe <amigo_format+0x112>
   166ea:	88 e2       	ldi	r24, 0x28	; 40
   166ec:	9d e2       	ldi	r25, 0x2D	; 45
   166ee:	a0 e0       	ldi	r26, 0x00	; 0
   166f0:	ed b7       	in	r30, 0x3d	; 61
   166f2:	fe b7       	in	r31, 0x3e	; 62
   166f4:	81 83       	std	Z+1, r24	; 0x01
   166f6:	92 83       	std	Z+2, r25	; 0x02
   166f8:	a3 83       	std	Z+3, r26	; 0x03
   166fa:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   166fe:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   16702:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   16706:	81 81       	ldd	r24, Z+1	; 0x01
   16708:	90 e0       	ldi	r25, 0x00	; 0
   1670a:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
   1670e:	ce 01       	movw	r24, r28
   16710:	cd b7       	in	r28, 0x3d	; 61
   16712:	de b7       	in	r29, 0x3e	; 62
   16714:	23 96       	adiw	r28, 0x03	; 3
   16716:	e6 e0       	ldi	r30, 0x06	; 6
   16718:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

0001671c <amigo_buffered_read_command>:
   1671c:	8f 92       	push	r8
   1671e:	9f 92       	push	r9
   16720:	af 92       	push	r10
   16722:	bf 92       	push	r11
   16724:	ef 92       	push	r14
   16726:	ff 92       	push	r15
   16728:	0f 93       	push	r16
   1672a:	1f 93       	push	r17
   1672c:	cf 93       	push	r28
   1672e:	df 93       	push	r29
   16730:	00 d0       	rcall	.+0      	; 0x16732 <amigo_buffered_read_command+0x16>
   16732:	00 d0       	rcall	.+0      	; 0x16734 <amigo_buffered_read_command+0x18>
   16734:	1f 92       	push	r1
   16736:	6a eb       	ldi	r22, 0xBA	; 186
   16738:	75 e1       	ldi	r23, 0x15	; 21
   1673a:	80 91 65 19 	lds	r24, 0x1965	; 0x801965 <AMIGOs>
   1673e:	90 91 66 19 	lds	r25, 0x1966	; 0x801966 <AMIGOs+0x1>
   16742:	91 dc       	rcall	.-1758   	; 0x16066 <amigo_chs_to_logical>
   16744:	4b 01       	movw	r8, r22
   16746:	5c 01       	movw	r10, r24
   16748:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1674c:	85 ff       	sbrs	r24, 5
   1674e:	12 c0       	rjmp	.+36     	; 0x16774 <amigo_buffered_read_command+0x58>
   16750:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16754:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   16758:	80 81       	ld	r24, Z
   1675a:	90 e0       	ldi	r25, 0x00	; 0
   1675c:	ed b7       	in	r30, 0x3d	; 61
   1675e:	fe b7       	in	r31, 0x3e	; 62
   16760:	95 83       	std	Z+5, r25	; 0x05
   16762:	84 83       	std	Z+4, r24	; 0x04
   16764:	86 e1       	ldi	r24, 0x16	; 22
   16766:	9d e2       	ldi	r25, 0x2D	; 45
   16768:	a0 e0       	ldi	r26, 0x00	; 0
   1676a:	81 83       	std	Z+1, r24	; 0x01
   1676c:	92 83       	std	Z+2, r25	; 0x02
   1676e:	a3 83       	std	Z+3, r26	; 0x03
   16770:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16774:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16778:	86 fd       	sbrc	r24, 6
   1677a:	0e 94 5a 84 	call	0x108b4	; 0x108b4 <gpib_timer_elapsed_begin>
   1677e:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   16782:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   16786:	e0 90 65 19 	lds	r14, 0x1965	; 0x801965 <AMIGOs>
   1678a:	f0 90 66 19 	lds	r15, 0x1966	; 0x801966 <AMIGOs+0x1>
   1678e:	87 e0       	ldi	r24, 0x07	; 7
   16790:	e8 0e       	add	r14, r24
   16792:	f1 1c       	adc	r15, r1
   16794:	06 81       	ldd	r16, Z+6	; 0x06
   16796:	17 81       	ldd	r17, Z+7	; 0x07
   16798:	2d ee       	ldi	r18, 0xED	; 237
   1679a:	3c e1       	ldi	r19, 0x1C	; 28
   1679c:	b5 01       	movw	r22, r10
   1679e:	a4 01       	movw	r20, r8
   167a0:	82 81       	ldd	r24, Z+2	; 0x02
   167a2:	93 81       	ldd	r25, Z+3	; 0x03
   167a4:	0e 94 ac 83 	call	0x10758	; 0x10758 <dbf_open_read>
   167a8:	7c 01       	movw	r14, r24
   167aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   167ae:	86 ff       	sbrs	r24, 6
   167b0:	04 c0       	rjmp	.+8      	; 0x167ba <amigo_buffered_read_command+0x9e>
   167b2:	8b ea       	ldi	r24, 0xAB	; 171
   167b4:	90 e1       	ldi	r25, 0x10	; 16
   167b6:	0e 94 6c 84 	call	0x108d8	; 0x108d8 <gpib_timer_elapsed_end>
   167ba:	c0 91 65 19 	lds	r28, 0x1965	; 0x801965 <AMIGOs>
   167be:	d0 91 66 19 	lds	r29, 0x1966	; 0x801966 <AMIGOs+0x1>
   167c2:	8f 81       	ldd	r24, Y+7	; 0x07
   167c4:	98 85       	ldd	r25, Y+8	; 0x08
   167c6:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   167ca:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   167ce:	89 2b       	or	r24, r25
   167d0:	29 f4       	brne	.+10     	; 0x167dc <amigo_buffered_read_command+0xc0>
   167d2:	86 81       	ldd	r24, Z+6	; 0x06
   167d4:	97 81       	ldd	r25, Z+7	; 0x07
   167d6:	e8 16       	cp	r14, r24
   167d8:	f9 06       	cpc	r15, r25
   167da:	19 f0       	breq	.+6      	; 0x167e2 <amigo_buffered_read_command+0xc6>
   167dc:	81 e0       	ldi	r24, 0x01	; 1
   167de:	8e 83       	std	Y+6, r24	; 0x06
   167e0:	14 c0       	rjmp	.+40     	; 0x1680a <amigo_buffered_read_command+0xee>
   167e2:	8a eb       	ldi	r24, 0xBA	; 186
   167e4:	95 e1       	ldi	r25, 0x15	; 21
   167e6:	10 de       	rcall	.-992    	; 0x16408 <amigo_increment>
   167e8:	89 2b       	or	r24, r25
   167ea:	59 f0       	breq	.+22     	; 0x16802 <amigo_buffered_read_command+0xe6>
   167ec:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   167f0:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   167f4:	81 e0       	ldi	r24, 0x01	; 1
   167f6:	86 83       	std	Z+6, r24	; 0x06
   167f8:	87 81       	ldd	r24, Z+7	; 0x07
   167fa:	90 85       	ldd	r25, Z+8	; 0x08
   167fc:	84 60       	ori	r24, 0x04	; 4
   167fe:	90 87       	std	Z+8, r25	; 0x08
   16800:	87 83       	std	Z+7, r24	; 0x07
   16802:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   16806:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   1680a:	81 81       	ldd	r24, Z+1	; 0x01
   1680c:	90 e0       	ldi	r25, 0x00	; 0
   1680e:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
   16812:	80 e0       	ldi	r24, 0x00	; 0
   16814:	90 e0       	ldi	r25, 0x00	; 0
   16816:	0f 90       	pop	r0
   16818:	0f 90       	pop	r0
   1681a:	0f 90       	pop	r0
   1681c:	0f 90       	pop	r0
   1681e:	0f 90       	pop	r0
   16820:	df 91       	pop	r29
   16822:	cf 91       	pop	r28
   16824:	1f 91       	pop	r17
   16826:	0f 91       	pop	r16
   16828:	ff 90       	pop	r15
   1682a:	ef 90       	pop	r14
   1682c:	bf 90       	pop	r11
   1682e:	af 90       	pop	r10
   16830:	9f 90       	pop	r9
   16832:	8f 90       	pop	r8
   16834:	08 95       	ret

00016836 <amigo_buffered_read_execute>:
   16836:	a5 e0       	ldi	r26, 0x05	; 5
   16838:	b0 e0       	ldi	r27, 0x00	; 0
   1683a:	e1 e2       	ldi	r30, 0x21	; 33
   1683c:	f4 eb       	ldi	r31, 0xB4	; 180
   1683e:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__prologue_saves__+0x1c>
   16842:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16846:	87 fd       	sbrc	r24, 7
   16848:	0e 94 5a 84 	call	0x108b4	; 0x108b4 <gpib_timer_elapsed_begin>
   1684c:	80 e0       	ldi	r24, 0x00	; 0
   1684e:	91 e0       	ldi	r25, 0x01	; 1
   16850:	9d 83       	std	Y+5, r25	; 0x05
   16852:	8c 83       	std	Y+4, r24	; 0x04
   16854:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   16858:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   1685c:	66 81       	ldd	r22, Z+6	; 0x06
   1685e:	77 81       	ldd	r23, Z+7	; 0x07
   16860:	ae 01       	movw	r20, r28
   16862:	4c 5f       	subi	r20, 0xFC	; 252
   16864:	5f 4f       	sbci	r21, 0xFF	; 255
   16866:	8d ee       	ldi	r24, 0xED	; 237
   16868:	9c e1       	ldi	r25, 0x1C	; 28
   1686a:	0e 94 83 8a 	call	0x11506	; 0x11506 <gpib_write_str>
   1686e:	8c 01       	movw	r16, r24
   16870:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16874:	87 ff       	sbrs	r24, 7
   16876:	04 c0       	rjmp	.+8      	; 0x16880 <amigo_buffered_read_execute+0x4a>
   16878:	86 eb       	ldi	r24, 0xB6	; 182
   1687a:	90 e1       	ldi	r25, 0x10	; 16
   1687c:	0e 94 6c 84 	call	0x108d8	; 0x108d8 <gpib_timer_elapsed_end>
   16880:	8c 81       	ldd	r24, Y+4	; 0x04
   16882:	9d 81       	ldd	r25, Y+5	; 0x05
   16884:	88 27       	eor	r24, r24
   16886:	90 7d       	andi	r25, 0xD0	; 208
   16888:	89 2b       	or	r24, r25
   1688a:	49 f4       	brne	.+18     	; 0x1689e <amigo_buffered_read_execute+0x68>
   1688c:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   16890:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   16894:	86 81       	ldd	r24, Z+6	; 0x06
   16896:	97 81       	ldd	r25, Z+7	; 0x07
   16898:	08 17       	cp	r16, r24
   1689a:	19 07       	cpc	r17, r25
   1689c:	c9 f0       	breq	.+50     	; 0x168d0 <amigo_buffered_read_execute+0x9a>
   1689e:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   168a2:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   168a6:	81 e0       	ldi	r24, 0x01	; 1
   168a8:	86 83       	std	Z+6, r24	; 0x06
   168aa:	87 81       	ldd	r24, Z+7	; 0x07
   168ac:	90 85       	ldd	r25, Z+8	; 0x08
   168ae:	80 62       	ori	r24, 0x20	; 32
   168b0:	90 87       	std	Z+8, r25	; 0x08
   168b2:	87 83       	std	Z+7, r24	; 0x07
   168b4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   168b8:	80 ff       	sbrs	r24, 0
   168ba:	0a c0       	rjmp	.+20     	; 0x168d0 <amigo_buffered_read_execute+0x9a>
   168bc:	8c ef       	ldi	r24, 0xFC	; 252
   168be:	9c e2       	ldi	r25, 0x2C	; 44
   168c0:	a0 e0       	ldi	r26, 0x00	; 0
   168c2:	ed b7       	in	r30, 0x3d	; 61
   168c4:	fe b7       	in	r31, 0x3e	; 62
   168c6:	81 83       	std	Z+1, r24	; 0x01
   168c8:	92 83       	std	Z+2, r25	; 0x02
   168ca:	a3 83       	std	Z+3, r26	; 0x03
   168cc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   168d0:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   168d4:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   168d8:	81 81       	ldd	r24, Z+1	; 0x01
   168da:	90 e0       	ldi	r25, 0x00	; 0
   168dc:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
   168e0:	8c 81       	ldd	r24, Y+4	; 0x04
   168e2:	9d 81       	ldd	r25, Y+5	; 0x05
   168e4:	25 96       	adiw	r28, 0x05	; 5
   168e6:	e4 e0       	ldi	r30, 0x04	; 4
   168e8:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

000168ec <amigo_buffered_write>:
   168ec:	8f 92       	push	r8
   168ee:	9f 92       	push	r9
   168f0:	af 92       	push	r10
   168f2:	bf 92       	push	r11
   168f4:	ef 92       	push	r14
   168f6:	ff 92       	push	r15
   168f8:	0f 93       	push	r16
   168fa:	1f 93       	push	r17
   168fc:	cf 93       	push	r28
   168fe:	df 93       	push	r29
   16900:	cd b7       	in	r28, 0x3d	; 61
   16902:	de b7       	in	r29, 0x3e	; 62
   16904:	27 97       	sbiw	r28, 0x07	; 7
   16906:	0f b6       	in	r0, 0x3f	; 63
   16908:	f8 94       	cli
   1690a:	de bf       	out	0x3e, r29	; 62
   1690c:	0f be       	out	0x3f, r0	; 63
   1690e:	cd bf       	out	0x3d, r28	; 61
   16910:	68 ec       	ldi	r22, 0xC8	; 200
   16912:	75 e1       	ldi	r23, 0x15	; 21
   16914:	80 91 65 19 	lds	r24, 0x1965	; 0x801965 <AMIGOs>
   16918:	90 91 66 19 	lds	r25, 0x1966	; 0x801966 <AMIGOs+0x1>
   1691c:	a4 db       	rcall	.-2232   	; 0x16066 <amigo_chs_to_logical>
   1691e:	4b 01       	movw	r8, r22
   16920:	5c 01       	movw	r10, r24
   16922:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16926:	87 fd       	sbrc	r24, 7
   16928:	0e 94 5a 84 	call	0x108b4	; 0x108b4 <gpib_timer_elapsed_begin>
   1692c:	1f 82       	std	Y+7, r1	; 0x07
   1692e:	1e 82       	std	Y+6, r1	; 0x06
   16930:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   16934:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   16938:	66 81       	ldd	r22, Z+6	; 0x06
   1693a:	77 81       	ldd	r23, Z+7	; 0x07
   1693c:	ae 01       	movw	r20, r28
   1693e:	4a 5f       	subi	r20, 0xFA	; 250
   16940:	5f 4f       	sbci	r21, 0xFF	; 255
   16942:	8d ee       	ldi	r24, 0xED	; 237
   16944:	9c e1       	ldi	r25, 0x1C	; 28
   16946:	0e 94 e1 89 	call	0x113c2	; 0x113c2 <gpib_read_str>
   1694a:	7c 01       	movw	r14, r24
   1694c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16950:	85 ff       	sbrs	r24, 5
   16952:	12 c0       	rjmp	.+36     	; 0x16978 <amigo_buffered_write+0x8c>
   16954:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16958:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   1695c:	80 81       	ld	r24, Z
   1695e:	90 e0       	ldi	r25, 0x00	; 0
   16960:	ed b7       	in	r30, 0x3d	; 61
   16962:	fe b7       	in	r31, 0x3e	; 62
   16964:	95 83       	std	Z+5, r25	; 0x05
   16966:	84 83       	std	Z+4, r24	; 0x04
   16968:	8a ee       	ldi	r24, 0xEA	; 234
   1696a:	9c e2       	ldi	r25, 0x2C	; 44
   1696c:	a0 e0       	ldi	r26, 0x00	; 0
   1696e:	81 83       	std	Z+1, r24	; 0x01
   16970:	92 83       	std	Z+2, r25	; 0x02
   16972:	a3 83       	std	Z+3, r26	; 0x03
   16974:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16978:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1697c:	87 ff       	sbrs	r24, 7
   1697e:	04 c0       	rjmp	.+8      	; 0x16988 <amigo_buffered_write+0x9c>
   16980:	87 ed       	ldi	r24, 0xD7	; 215
   16982:	95 e1       	ldi	r25, 0x15	; 21
   16984:	0e 94 6c 84 	call	0x108d8	; 0x108d8 <gpib_timer_elapsed_end>
   16988:	8e 81       	ldd	r24, Y+6	; 0x06
   1698a:	9f 81       	ldd	r25, Y+7	; 0x07
   1698c:	88 27       	eor	r24, r24
   1698e:	90 7d       	andi	r25, 0xD0	; 208
   16990:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16994:	89 2b       	or	r24, r25
   16996:	49 f4       	brne	.+18     	; 0x169aa <amigo_buffered_write+0xbe>
   16998:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   1699c:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   169a0:	86 81       	ldd	r24, Z+6	; 0x06
   169a2:	97 81       	ldd	r25, Z+7	; 0x07
   169a4:	e8 16       	cp	r14, r24
   169a6:	f9 06       	cpc	r15, r25
   169a8:	c1 f0       	breq	.+48     	; 0x169da <amigo_buffered_write+0xee>
   169aa:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   169ae:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   169b2:	81 e0       	ldi	r24, 0x01	; 1
   169b4:	86 83       	std	Z+6, r24	; 0x06
   169b6:	87 81       	ldd	r24, Z+7	; 0x07
   169b8:	90 85       	ldd	r25, Z+8	; 0x08
   169ba:	80 62       	ori	r24, 0x20	; 32
   169bc:	90 87       	std	Z+8, r25	; 0x08
   169be:	87 83       	std	Z+7, r24	; 0x07
   169c0:	20 ff       	sbrs	r18, 0
   169c2:	5e c0       	rjmp	.+188    	; 0x16a80 <amigo_buffered_write+0x194>
   169c4:	8b ec       	ldi	r24, 0xCB	; 203
   169c6:	9c e2       	ldi	r25, 0x2C	; 44
   169c8:	a0 e0       	ldi	r26, 0x00	; 0
   169ca:	ed b7       	in	r30, 0x3d	; 61
   169cc:	fe b7       	in	r31, 0x3e	; 62
   169ce:	81 83       	std	Z+1, r24	; 0x01
   169d0:	92 83       	std	Z+2, r25	; 0x02
   169d2:	a3 83       	std	Z+3, r26	; 0x03
   169d4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   169d8:	53 c0       	rjmp	.+166    	; 0x16a80 <amigo_buffered_write+0x194>
   169da:	26 fd       	sbrc	r18, 6
   169dc:	0e 94 5a 84 	call	0x108b4	; 0x108b4 <gpib_timer_elapsed_begin>
   169e0:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   169e4:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   169e8:	e0 90 65 19 	lds	r14, 0x1965	; 0x801965 <AMIGOs>
   169ec:	f0 90 66 19 	lds	r15, 0x1966	; 0x801966 <AMIGOs+0x1>
   169f0:	87 e0       	ldi	r24, 0x07	; 7
   169f2:	e8 0e       	add	r14, r24
   169f4:	f1 1c       	adc	r15, r1
   169f6:	06 81       	ldd	r16, Z+6	; 0x06
   169f8:	17 81       	ldd	r17, Z+7	; 0x07
   169fa:	2d ee       	ldi	r18, 0xED	; 237
   169fc:	3c e1       	ldi	r19, 0x1C	; 28
   169fe:	b5 01       	movw	r22, r10
   16a00:	a4 01       	movw	r20, r8
   16a02:	82 81       	ldd	r24, Z+2	; 0x02
   16a04:	93 81       	ldd	r25, Z+3	; 0x03
   16a06:	0e 94 03 84 	call	0x10806	; 0x10806 <dbf_open_write>
   16a0a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16a0e:	86 ff       	sbrs	r24, 6
   16a10:	04 c0       	rjmp	.+8      	; 0x16a1a <amigo_buffered_write+0x12e>
   16a12:	80 ea       	ldi	r24, 0xA0	; 160
   16a14:	90 e1       	ldi	r25, 0x10	; 16
   16a16:	0e 94 6c 84 	call	0x108d8	; 0x108d8 <gpib_timer_elapsed_end>
   16a1a:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16a1e:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   16a22:	87 81       	ldd	r24, Z+7	; 0x07
   16a24:	90 85       	ldd	r25, Z+8	; 0x08
   16a26:	89 2b       	or	r24, r25
   16a28:	d9 f0       	breq	.+54     	; 0x16a60 <amigo_buffered_write+0x174>
   16a2a:	81 e0       	ldi	r24, 0x01	; 1
   16a2c:	86 83       	std	Z+6, r24	; 0x06
   16a2e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16a32:	80 ff       	sbrs	r24, 0
   16a34:	0a c0       	rjmp	.+20     	; 0x16a4a <amigo_buffered_write+0x15e>
   16a36:	8b ea       	ldi	r24, 0xAB	; 171
   16a38:	9c e2       	ldi	r25, 0x2C	; 44
   16a3a:	a0 e0       	ldi	r26, 0x00	; 0
   16a3c:	ed b7       	in	r30, 0x3d	; 61
   16a3e:	fe b7       	in	r31, 0x3e	; 62
   16a40:	81 83       	std	Z+1, r24	; 0x01
   16a42:	92 83       	std	Z+2, r25	; 0x02
   16a44:	a3 83       	std	Z+3, r26	; 0x03
   16a46:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16a4a:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   16a4e:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   16a52:	81 81       	ldd	r24, Z+1	; 0x01
   16a54:	90 e0       	ldi	r25, 0x00	; 0
   16a56:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
   16a5a:	80 e0       	ldi	r24, 0x00	; 0
   16a5c:	90 e0       	ldi	r25, 0x00	; 0
   16a5e:	1c c0       	rjmp	.+56     	; 0x16a98 <amigo_buffered_write+0x1ac>
   16a60:	88 ec       	ldi	r24, 0xC8	; 200
   16a62:	95 e1       	ldi	r25, 0x15	; 21
   16a64:	d1 dc       	rcall	.-1630   	; 0x16408 <amigo_increment>
   16a66:	89 2b       	or	r24, r25
   16a68:	59 f0       	breq	.+22     	; 0x16a80 <amigo_buffered_write+0x194>
   16a6a:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16a6e:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   16a72:	81 e0       	ldi	r24, 0x01	; 1
   16a74:	86 83       	std	Z+6, r24	; 0x06
   16a76:	87 81       	ldd	r24, Z+7	; 0x07
   16a78:	90 85       	ldd	r25, Z+8	; 0x08
   16a7a:	84 60       	ori	r24, 0x04	; 4
   16a7c:	90 87       	std	Z+8, r25	; 0x08
   16a7e:	87 83       	std	Z+7, r24	; 0x07
   16a80:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   16a84:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   16a88:	81 81       	ldd	r24, Z+1	; 0x01
   16a8a:	90 e0       	ldi	r25, 0x00	; 0
   16a8c:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
   16a90:	8e 81       	ldd	r24, Y+6	; 0x06
   16a92:	9f 81       	ldd	r25, Y+7	; 0x07
   16a94:	88 27       	eor	r24, r24
   16a96:	90 7d       	andi	r25, 0xD0	; 208
   16a98:	27 96       	adiw	r28, 0x07	; 7
   16a9a:	0f b6       	in	r0, 0x3f	; 63
   16a9c:	f8 94       	cli
   16a9e:	de bf       	out	0x3e, r29	; 62
   16aa0:	0f be       	out	0x3f, r0	; 63
   16aa2:	cd bf       	out	0x3d, r28	; 61
   16aa4:	df 91       	pop	r29
   16aa6:	cf 91       	pop	r28
   16aa8:	1f 91       	pop	r17
   16aaa:	0f 91       	pop	r16
   16aac:	ff 90       	pop	r15
   16aae:	ef 90       	pop	r14
   16ab0:	bf 90       	pop	r11
   16ab2:	af 90       	pop	r10
   16ab4:	9f 90       	pop	r9
   16ab6:	8f 90       	pop	r8
   16ab8:	08 95       	ret

00016aba <amigo_cmd_dsj>:
   16aba:	a8 e0       	ldi	r26, 0x08	; 8
   16abc:	b0 e0       	ldi	r27, 0x00	; 0
   16abe:	e3 e6       	ldi	r30, 0x63	; 99
   16ac0:	f5 eb       	ldi	r31, 0xB5	; 181
   16ac2:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
   16ac6:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16aca:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   16ace:	86 81       	ldd	r24, Z+6	; 0x06
   16ad0:	88 87       	std	Y+8, r24	; 0x08
   16ad2:	80 e0       	ldi	r24, 0x00	; 0
   16ad4:	91 e0       	ldi	r25, 0x01	; 1
   16ad6:	9f 83       	std	Y+7, r25	; 0x07
   16ad8:	8e 83       	std	Y+6, r24	; 0x06
   16ada:	ae 01       	movw	r20, r28
   16adc:	4a 5f       	subi	r20, 0xFA	; 250
   16ade:	5f 4f       	sbci	r21, 0xFF	; 255
   16ae0:	61 e0       	ldi	r22, 0x01	; 1
   16ae2:	70 e0       	ldi	r23, 0x00	; 0
   16ae4:	ce 01       	movw	r24, r28
   16ae6:	08 96       	adiw	r24, 0x08	; 8
   16ae8:	0e 94 83 8a 	call	0x11506	; 0x11506 <gpib_write_str>
   16aec:	2e 81       	ldd	r18, Y+6	; 0x06
   16aee:	3f 81       	ldd	r19, Y+7	; 0x07
   16af0:	22 27       	eor	r18, r18
   16af2:	30 7d       	andi	r19, 0xD0	; 208
   16af4:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16af8:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   16afc:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   16b00:	23 2b       	or	r18, r19
   16b02:	11 f4       	brne	.+4      	; 0x16b08 <amigo_cmd_dsj+0x4e>
   16b04:	01 97       	sbiw	r24, 0x01	; 1
   16b06:	c1 f0       	breq	.+48     	; 0x16b38 <amigo_cmd_dsj+0x7e>
   16b08:	81 e0       	ldi	r24, 0x01	; 1
   16b0a:	86 83       	std	Z+6, r24	; 0x06
   16b0c:	87 81       	ldd	r24, Z+7	; 0x07
   16b0e:	90 85       	ldd	r25, Z+8	; 0x08
   16b10:	80 62       	ori	r24, 0x20	; 32
   16b12:	90 87       	std	Z+8, r25	; 0x08
   16b14:	87 83       	std	Z+7, r24	; 0x07
   16b16:	40 ff       	sbrs	r20, 0
   16b18:	0a c0       	rjmp	.+20     	; 0x16b2e <amigo_cmd_dsj+0x74>
   16b1a:	81 e9       	ldi	r24, 0x91	; 145
   16b1c:	9c e2       	ldi	r25, 0x2C	; 44
   16b1e:	a0 e0       	ldi	r26, 0x00	; 0
   16b20:	ed b7       	in	r30, 0x3d	; 61
   16b22:	fe b7       	in	r31, 0x3e	; 62
   16b24:	81 83       	std	Z+1, r24	; 0x01
   16b26:	92 83       	std	Z+2, r25	; 0x02
   16b28:	a3 83       	std	Z+3, r26	; 0x03
   16b2a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16b2e:	8e 81       	ldd	r24, Y+6	; 0x06
   16b30:	9f 81       	ldd	r25, Y+7	; 0x07
   16b32:	88 27       	eor	r24, r24
   16b34:	90 7d       	andi	r25, 0xD0	; 208
   16b36:	19 c0       	rjmp	.+50     	; 0x16b6a <amigo_cmd_dsj+0xb0>
   16b38:	45 ff       	sbrs	r20, 5
   16b3a:	0e c0       	rjmp	.+28     	; 0x16b58 <amigo_cmd_dsj+0x9e>
   16b3c:	86 81       	ldd	r24, Z+6	; 0x06
   16b3e:	90 e0       	ldi	r25, 0x00	; 0
   16b40:	ed b7       	in	r30, 0x3d	; 61
   16b42:	fe b7       	in	r31, 0x3e	; 62
   16b44:	95 83       	std	Z+5, r25	; 0x05
   16b46:	84 83       	std	Z+4, r24	; 0x04
   16b48:	84 e8       	ldi	r24, 0x84	; 132
   16b4a:	9c e2       	ldi	r25, 0x2C	; 44
   16b4c:	a0 e0       	ldi	r26, 0x00	; 0
   16b4e:	81 83       	std	Z+1, r24	; 0x01
   16b50:	92 83       	std	Z+2, r25	; 0x02
   16b52:	a3 83       	std	Z+3, r26	; 0x03
   16b54:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16b58:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16b5c:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   16b60:	16 82       	std	Z+6, r1	; 0x06
   16b62:	10 86       	std	Z+8, r1	; 0x08
   16b64:	17 82       	std	Z+7, r1	; 0x07
   16b66:	80 e0       	ldi	r24, 0x00	; 0
   16b68:	90 e0       	ldi	r25, 0x00	; 0
   16b6a:	28 96       	adiw	r28, 0x08	; 8
   16b6c:	e2 e0       	ldi	r30, 0x02	; 2
   16b6e:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00016b72 <amigo_cmd_clear>:
/// - Reference: A23.
/// - Select sector 0.
/// @return  0

int amigo_cmd_clear()
{
   16b72:	00 d0       	rcall	.+0      	; 0x16b74 <amigo_cmd_clear+0x2>
   16b74:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16b76:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16b7a:	85 ff       	sbrs	r24, 5
   16b7c:	0a c0       	rjmp	.+20     	; 0x16b92 <amigo_cmd_clear+0x20>
        printf("[AMIGO Clear]\n");
   16b7e:	85 e7       	ldi	r24, 0x75	; 117
   16b80:	9c e2       	ldi	r25, 0x2C	; 44
   16b82:	a0 e0       	ldi	r26, 0x00	; 0
   16b84:	ed b7       	in	r30, 0x3d	; 61
   16b86:	fe b7       	in	r31, 0x3e	; 62
   16b88:	81 83       	std	Z+1, r24	; 0x01
   16b8a:	92 83       	std	Z+2, r25	; 0x02
   16b8c:	a3 83       	std	Z+3, r26	; 0x03
   16b8e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
    AMIGOs->sector = 0;
   16b92:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16b96:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   16b9a:	15 82       	std	Z+5, r1	; 0x05
    AMIGOs->head = 0;
   16b9c:	14 82       	std	Z+4, r1	; 0x04
    AMIGOs->cyl = 0;
   16b9e:	13 82       	std	Z+3, r1	; 0x03
/// @todo FIXME
///
///  Clear the DSJ byte that might be 2 after powerup
///
    AMIGOs->dsj = 0;
   16ba0:	16 82       	std	Z+6, r1	; 0x06
    AMIGOs->Errors =0;
   16ba2:	10 86       	std	Z+8, r1	; 0x08
   16ba4:	17 82       	std	Z+7, r1	; 0x07

    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16ba6:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   16baa:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   16bae:	81 81       	ldd	r24, Z+1	; 0x01
   16bb0:	90 e0       	ldi	r25, 0x00	; 0
   16bb2:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
    return(0);
}
   16bb6:	80 e0       	ldi	r24, 0x00	; 0
   16bb8:	90 e0       	ldi	r25, 0x00	; 0
   16bba:	0f 90       	pop	r0
   16bbc:	0f 90       	pop	r0
   16bbe:	0f 90       	pop	r0
   16bc0:	08 95       	ret

00016bc2 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   16bc2:	af e0       	ldi	r26, 0x0F	; 15
   16bc4:	b0 e0       	ldi	r27, 0x00	; 0
   16bc6:	e7 ee       	ldi	r30, 0xE7	; 231
   16bc8:	f5 eb       	ldi	r31, 0xB5	; 181
   16bca:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__prologue_saves__+0x18>
   16bce:	c8 2f       	mov	r28, r24
   16bd0:	e6 2e       	mov	r14, r22
   16bd2:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   16bd4:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   16bd8:	90 e0       	ldi	r25, 0x00	; 0
   16bda:	0e 94 b6 8b 	call	0x1176c	; 0x1176c <AMIGO_is_MLA>
   16bde:	20 91 f1 1e 	lds	r18, 0x1EF1	; 0x801ef1 <talking>
   16be2:	f1 2c       	mov	r15, r1
   16be4:	d0 e0       	ldi	r29, 0x00	; 0
   16be6:	89 2b       	or	r24, r25
   16be8:	f1 f0       	breq	.+60     	; 0x16c26 <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16bea:	82 2f       	mov	r24, r18
   16bec:	90 e0       	ldi	r25, 0x00	; 0
   16bee:	ed b7       	in	r30, 0x3d	; 61
   16bf0:	fe b7       	in	r31, 0x3e	; 62
   16bf2:	97 87       	std	Z+15, r25	; 0x0f
   16bf4:	86 87       	std	Z+14, r24	; 0x0e
   16bf6:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   16bfa:	90 e0       	ldi	r25, 0x00	; 0
   16bfc:	95 87       	std	Z+13, r25	; 0x0d
   16bfe:	84 87       	std	Z+12, r24	; 0x0c
   16c00:	13 87       	std	Z+11, r17	; 0x0b
   16c02:	02 87       	std	Z+10, r16	; 0x0a
   16c04:	f1 86       	std	Z+9, r15	; 0x09
   16c06:	e0 86       	std	Z+8, r14	; 0x08
   16c08:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16c0c:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   16c10:	80 81       	ld	r24, Z
   16c12:	90 e0       	ldi	r25, 0x00	; 0
   16c14:	ed b7       	in	r30, 0x3d	; 61
   16c16:	fe b7       	in	r31, 0x3e	; 62
   16c18:	97 83       	std	Z+7, r25	; 0x07
   16c1a:	86 83       	std	Z+6, r24	; 0x06
   16c1c:	d5 83       	std	Z+5, r29	; 0x05
   16c1e:	c4 83       	std	Z+4, r28	; 0x04
   16c20:	8e e0       	ldi	r24, 0x0E	; 14
   16c22:	9c e2       	ldi	r25, 0x2C	; 44
   16c24:	51 c0       	rjmp	.+162    	; 0x16cc8 <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   16c26:	82 2f       	mov	r24, r18
   16c28:	90 e0       	ldi	r25, 0x00	; 0
   16c2a:	0e 94 c7 8b 	call	0x1178e	; 0x1178e <AMIGO_is_MTA>
   16c2e:	20 91 f3 1e 	lds	r18, 0x1EF3	; 0x801ef3 <listening>
   16c32:	30 91 f1 1e 	lds	r19, 0x1EF1	; 0x801ef1 <talking>
   16c36:	a0 91 65 19 	lds	r26, 0x1965	; 0x801965 <AMIGOs>
   16c3a:	b0 91 66 19 	lds	r27, 0x1966	; 0x801966 <AMIGOs+0x1>
   16c3e:	89 2b       	or	r24, r25
   16c40:	b1 f0       	breq	.+44     	; 0x16c6e <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16c42:	83 2f       	mov	r24, r19
   16c44:	90 e0       	ldi	r25, 0x00	; 0
   16c46:	ed b7       	in	r30, 0x3d	; 61
   16c48:	fe b7       	in	r31, 0x3e	; 62
   16c4a:	97 87       	std	Z+15, r25	; 0x0f
   16c4c:	86 87       	std	Z+14, r24	; 0x0e
   16c4e:	30 e0       	ldi	r19, 0x00	; 0
   16c50:	35 87       	std	Z+13, r19	; 0x0d
   16c52:	24 87       	std	Z+12, r18	; 0x0c
   16c54:	13 87       	std	Z+11, r17	; 0x0b
   16c56:	02 87       	std	Z+10, r16	; 0x0a
   16c58:	f1 86       	std	Z+9, r15	; 0x09
   16c5a:	e0 86       	std	Z+8, r14	; 0x08
   16c5c:	8c 91       	ld	r24, X
   16c5e:	90 e0       	ldi	r25, 0x00	; 0
   16c60:	97 83       	std	Z+7, r25	; 0x07
   16c62:	86 83       	std	Z+6, r24	; 0x06
   16c64:	d5 83       	std	Z+5, r29	; 0x05
   16c66:	c4 83       	std	Z+4, r28	; 0x04
   16c68:	87 ea       	ldi	r24, 0xA7	; 167
   16c6a:	9b e2       	ldi	r25, 0x2B	; 43
   16c6c:	2d c0       	rjmp	.+90     	; 0x16cc8 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   16c6e:	3f 35       	cpi	r19, 0x5F	; 95
   16c70:	b1 f4       	brne	.+44     	; 0x16c9e <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16c72:	8f e5       	ldi	r24, 0x5F	; 95
   16c74:	90 e0       	ldi	r25, 0x00	; 0
   16c76:	ed b7       	in	r30, 0x3d	; 61
   16c78:	fe b7       	in	r31, 0x3e	; 62
   16c7a:	97 87       	std	Z+15, r25	; 0x0f
   16c7c:	86 87       	std	Z+14, r24	; 0x0e
   16c7e:	30 e0       	ldi	r19, 0x00	; 0
   16c80:	35 87       	std	Z+13, r19	; 0x0d
   16c82:	24 87       	std	Z+12, r18	; 0x0c
   16c84:	13 87       	std	Z+11, r17	; 0x0b
   16c86:	02 87       	std	Z+10, r16	; 0x0a
   16c88:	f1 86       	std	Z+9, r15	; 0x09
   16c8a:	e0 86       	std	Z+8, r14	; 0x08
   16c8c:	8c 91       	ld	r24, X
   16c8e:	90 e0       	ldi	r25, 0x00	; 0
   16c90:	97 83       	std	Z+7, r25	; 0x07
   16c92:	86 83       	std	Z+6, r24	; 0x06
   16c94:	d5 83       	std	Z+5, r29	; 0x05
   16c96:	c4 83       	std	Z+4, r28	; 0x04
   16c98:	80 e4       	ldi	r24, 0x40	; 64
   16c9a:	9b e2       	ldi	r25, 0x2B	; 43
   16c9c:	15 c0       	rjmp	.+42     	; 0x16cc8 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16c9e:	83 2f       	mov	r24, r19
   16ca0:	90 e0       	ldi	r25, 0x00	; 0
   16ca2:	ed b7       	in	r30, 0x3d	; 61
   16ca4:	fe b7       	in	r31, 0x3e	; 62
   16ca6:	97 87       	std	Z+15, r25	; 0x0f
   16ca8:	86 87       	std	Z+14, r24	; 0x0e
   16caa:	30 e0       	ldi	r19, 0x00	; 0
   16cac:	35 87       	std	Z+13, r19	; 0x0d
   16cae:	24 87       	std	Z+12, r18	; 0x0c
   16cb0:	13 87       	std	Z+11, r17	; 0x0b
   16cb2:	02 87       	std	Z+10, r16	; 0x0a
   16cb4:	f1 86       	std	Z+9, r15	; 0x09
   16cb6:	e0 86       	std	Z+8, r14	; 0x08
   16cb8:	8c 91       	ld	r24, X
   16cba:	90 e0       	ldi	r25, 0x00	; 0
   16cbc:	97 83       	std	Z+7, r25	; 0x07
   16cbe:	86 83       	std	Z+6, r24	; 0x06
   16cc0:	d5 83       	std	Z+5, r29	; 0x05
   16cc2:	c4 83       	std	Z+4, r28	; 0x04
   16cc4:	8b ed       	ldi	r24, 0xDB	; 219
   16cc6:	9a e2       	ldi	r25, 0x2A	; 42
   16cc8:	a0 e0       	ldi	r26, 0x00	; 0
   16cca:	81 83       	std	Z+1, r24	; 0x01
   16ccc:	92 83       	std	Z+2, r25	; 0x02
   16cce:	a3 83       	std	Z+3, r26	; 0x03
   16cd0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16cd4:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   16cd8:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   16cdc:	81 81       	ldd	r24, Z+1	; 0x01
   16cde:	90 e0       	ldi	r25, 0x00	; 0
   16ce0:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
    return(0);
}
   16ce4:	80 e0       	ldi	r24, 0x00	; 0
   16ce6:	90 e0       	ldi	r25, 0x00	; 0
   16ce8:	cd b7       	in	r28, 0x3d	; 61
   16cea:	de b7       	in	r29, 0x3e	; 62
   16cec:	2f 96       	adiw	r28, 0x0f	; 15
   16cee:	e6 e0       	ldi	r30, 0x06	; 6
   16cf0:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

00016cf4 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   16cf4:	ab e0       	ldi	r26, 0x0B	; 11
   16cf6:	b0 e0       	ldi	r27, 0x00	; 0
   16cf8:	e0 e8       	ldi	r30, 0x80	; 128
   16cfa:	f6 eb       	ldi	r31, 0xB6	; 182
   16cfc:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
   16d00:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   16d02:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   16d06:	90 e0       	ldi	r25, 0x00	; 0
   16d08:	0e 94 b6 8b 	call	0x1176c	; 0x1176c <AMIGO_is_MLA>
   16d0c:	20 91 f1 1e 	lds	r18, 0x1EF1	; 0x801ef1 <talking>
   16d10:	d0 e0       	ldi	r29, 0x00	; 0
   16d12:	89 2b       	or	r24, r25
   16d14:	d1 f0       	breq	.+52     	; 0x16d4a <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16d16:	82 2f       	mov	r24, r18
   16d18:	90 e0       	ldi	r25, 0x00	; 0
   16d1a:	ed b7       	in	r30, 0x3d	; 61
   16d1c:	fe b7       	in	r31, 0x3e	; 62
   16d1e:	93 87       	std	Z+11, r25	; 0x0b
   16d20:	82 87       	std	Z+10, r24	; 0x0a
   16d22:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   16d26:	90 e0       	ldi	r25, 0x00	; 0
   16d28:	91 87       	std	Z+9, r25	; 0x09
   16d2a:	80 87       	std	Z+8, r24	; 0x08
   16d2c:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16d30:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   16d34:	80 81       	ld	r24, Z
   16d36:	90 e0       	ldi	r25, 0x00	; 0
   16d38:	ed b7       	in	r30, 0x3d	; 61
   16d3a:	fe b7       	in	r31, 0x3e	; 62
   16d3c:	97 83       	std	Z+7, r25	; 0x07
   16d3e:	86 83       	std	Z+6, r24	; 0x06
   16d40:	d5 83       	std	Z+5, r29	; 0x05
   16d42:	c4 83       	std	Z+4, r28	; 0x04
   16d44:	8b e8       	ldi	r24, 0x8B	; 139
   16d46:	9a e2       	ldi	r25, 0x2A	; 42
   16d48:	43 c0       	rjmp	.+134    	; 0x16dd0 <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   16d4a:	82 2f       	mov	r24, r18
   16d4c:	90 e0       	ldi	r25, 0x00	; 0
   16d4e:	0e 94 c7 8b 	call	0x1178e	; 0x1178e <AMIGO_is_MTA>
   16d52:	20 91 f3 1e 	lds	r18, 0x1EF3	; 0x801ef3 <listening>
   16d56:	40 91 f1 1e 	lds	r20, 0x1EF1	; 0x801ef1 <talking>
   16d5a:	a0 91 65 19 	lds	r26, 0x1965	; 0x801965 <AMIGOs>
   16d5e:	b0 91 66 19 	lds	r27, 0x1966	; 0x801966 <AMIGOs+0x1>
   16d62:	89 2b       	or	r24, r25
   16d64:	89 f0       	breq	.+34     	; 0x16d88 <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16d66:	50 e0       	ldi	r21, 0x00	; 0
   16d68:	ed b7       	in	r30, 0x3d	; 61
   16d6a:	fe b7       	in	r31, 0x3e	; 62
   16d6c:	53 87       	std	Z+11, r21	; 0x0b
   16d6e:	42 87       	std	Z+10, r20	; 0x0a
   16d70:	30 e0       	ldi	r19, 0x00	; 0
   16d72:	31 87       	std	Z+9, r19	; 0x09
   16d74:	20 87       	std	Z+8, r18	; 0x08
   16d76:	8c 91       	ld	r24, X
   16d78:	90 e0       	ldi	r25, 0x00	; 0
   16d7a:	97 83       	std	Z+7, r25	; 0x07
   16d7c:	86 83       	std	Z+6, r24	; 0x06
   16d7e:	d5 83       	std	Z+5, r29	; 0x05
   16d80:	c4 83       	std	Z+4, r28	; 0x04
   16d82:	8b e3       	ldi	r24, 0x3B	; 59
   16d84:	9a e2       	ldi	r25, 0x2A	; 42
   16d86:	24 c0       	rjmp	.+72     	; 0x16dd0 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   16d88:	4f 35       	cpi	r20, 0x5F	; 95
   16d8a:	91 f4       	brne	.+36     	; 0x16db0 <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16d8c:	8f e5       	ldi	r24, 0x5F	; 95
   16d8e:	90 e0       	ldi	r25, 0x00	; 0
   16d90:	ed b7       	in	r30, 0x3d	; 61
   16d92:	fe b7       	in	r31, 0x3e	; 62
   16d94:	93 87       	std	Z+11, r25	; 0x0b
   16d96:	82 87       	std	Z+10, r24	; 0x0a
   16d98:	30 e0       	ldi	r19, 0x00	; 0
   16d9a:	31 87       	std	Z+9, r19	; 0x09
   16d9c:	20 87       	std	Z+8, r18	; 0x08
   16d9e:	8c 91       	ld	r24, X
   16da0:	90 e0       	ldi	r25, 0x00	; 0
   16da2:	97 83       	std	Z+7, r25	; 0x07
   16da4:	86 83       	std	Z+6, r24	; 0x06
   16da6:	d5 83       	std	Z+5, r29	; 0x05
   16da8:	c4 83       	std	Z+4, r28	; 0x04
   16daa:	8b ee       	ldi	r24, 0xEB	; 235
   16dac:	99 e2       	ldi	r25, 0x29	; 41
   16dae:	10 c0       	rjmp	.+32     	; 0x16dd0 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16db0:	50 e0       	ldi	r21, 0x00	; 0
   16db2:	ed b7       	in	r30, 0x3d	; 61
   16db4:	fe b7       	in	r31, 0x3e	; 62
   16db6:	53 87       	std	Z+11, r21	; 0x0b
   16db8:	42 87       	std	Z+10, r20	; 0x0a
   16dba:	30 e0       	ldi	r19, 0x00	; 0
   16dbc:	31 87       	std	Z+9, r19	; 0x09
   16dbe:	20 87       	std	Z+8, r18	; 0x08
   16dc0:	8c 91       	ld	r24, X
   16dc2:	90 e0       	ldi	r25, 0x00	; 0
   16dc4:	97 83       	std	Z+7, r25	; 0x07
   16dc6:	86 83       	std	Z+6, r24	; 0x06
   16dc8:	d5 83       	std	Z+5, r29	; 0x05
   16dca:	c4 83       	std	Z+4, r28	; 0x04
   16dcc:	8a e9       	ldi	r24, 0x9A	; 154
   16dce:	99 e2       	ldi	r25, 0x29	; 41
   16dd0:	a0 e0       	ldi	r26, 0x00	; 0
   16dd2:	81 83       	std	Z+1, r24	; 0x01
   16dd4:	92 83       	std	Z+2, r25	; 0x02
   16dd6:	a3 83       	std	Z+3, r26	; 0x03
   16dd8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16ddc:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   16de0:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   16de4:	81 81       	ldd	r24, Z+1	; 0x01
   16de6:	90 e0       	ldi	r25, 0x00	; 0
   16de8:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
    return(0);
}
   16dec:	80 e0       	ldi	r24, 0x00	; 0
   16dee:	90 e0       	ldi	r25, 0x00	; 0
   16df0:	cd b7       	in	r28, 0x3d	; 61
   16df2:	de b7       	in	r29, 0x3e	; 62
   16df4:	2b 96       	adiw	r28, 0x0b	; 11
   16df6:	e2 e0       	ldi	r30, 0x02	; 2
   16df8:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00016dfc <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   16dfc:	8f 30       	cpi	r24, 0x0F	; 15
   16dfe:	29 f0       	breq	.+10     	; 0x16e0a <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   16e00:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16e04:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   16e08:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   16e0a:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16e0e:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   16e12:	81 81       	ldd	r24, Z+1	; 0x01
   16e14:	88 23       	and	r24, r24
   16e16:	29 f0       	breq	.+10     	; 0x16e22 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   16e18:	87 81       	ldd	r24, Z+7	; 0x07
   16e1a:	90 85       	ldd	r25, Z+8	; 0x08
   16e1c:	80 64       	ori	r24, 0x40	; 64
   16e1e:	90 87       	std	Z+8, r25	; 0x08
   16e20:	87 83       	std	Z+7, r24	; 0x07
   16e22:	08 95       	ret

00016e24 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   16e24:	ac e1       	ldi	r26, 0x1C	; 28
   16e26:	b0 e0       	ldi	r27, 0x00	; 0
   16e28:	e8 e1       	ldi	r30, 0x18	; 24
   16e2a:	f7 eb       	ldi	r31, 0xB7	; 183
   16e2c:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__prologue_saves__+0x18>
   16e30:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16e32:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e36:	85 ff       	sbrs	r24, 5
   16e38:	16 c0       	rjmp	.+44     	; 0x16e66 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   16e3a:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   16e3e:	90 e0       	ldi	r25, 0x00	; 0
   16e40:	ed b7       	in	r30, 0x3d	; 61
   16e42:	fe b7       	in	r31, 0x3e	; 62
   16e44:	91 87       	std	Z+9, r25	; 0x09
   16e46:	80 87       	std	Z+8, r24	; 0x08
   16e48:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   16e4c:	90 e0       	ldi	r25, 0x00	; 0
   16e4e:	97 83       	std	Z+7, r25	; 0x07
   16e50:	86 83       	std	Z+6, r24	; 0x06
   16e52:	f5 82       	std	Z+5, r15	; 0x05
   16e54:	e4 82       	std	Z+4, r14	; 0x04
   16e56:	88 e6       	ldi	r24, 0x68	; 104
   16e58:	99 e2       	ldi	r25, 0x29	; 41
   16e5a:	a0 e0       	ldi	r26, 0x00	; 0
   16e5c:	81 83       	std	Z+1, r24	; 0x01
   16e5e:	92 83       	std	Z+2, r25	; 0x02
   16e60:	a3 83       	std	Z+3, r26	; 0x03
   16e62:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   16e66:	fe e7       	ldi	r31, 0x7E	; 126
   16e68:	ef 16       	cp	r14, r31
   16e6a:	f1 04       	cpc	r15, r1
   16e6c:	f1 f5       	brne	.+124    	; 0x16eea <Amigo_Command+0xc6>
   16e6e:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   16e72:	90 e0       	ldi	r25, 0x00	; 0
   16e74:	0e 94 c7 8b 	call	0x1178e	; 0x1178e <AMIGO_is_MTA>
   16e78:	89 2b       	or	r24, r25
   16e7a:	09 f4       	brne	.+2      	; 0x16e7e <Amigo_Command+0x5a>
   16e7c:	86 c0       	rjmp	.+268    	; 0x16f8a <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16e7e:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   16e82:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   16e86:	81 81       	ldd	r24, Z+1	; 0x01
   16e88:	90 e0       	ldi	r25, 0x00	; 0
   16e8a:	0e 94 6a 85 	call	0x10ad4	; 0x10ad4 <gpib_disable_PPR>
        status = EOI_FLAG;
   16e8e:	80 e0       	ldi	r24, 0x00	; 0
   16e90:	91 e0       	ldi	r25, 0x01	; 1
   16e92:	9c 8f       	std	Y+28, r25	; 0x1c
   16e94:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16e96:	ae 01       	movw	r20, r28
   16e98:	45 5e       	subi	r20, 0xE5	; 229
   16e9a:	5f 4f       	sbci	r21, 0xFF	; 255
   16e9c:	60 e0       	ldi	r22, 0x00	; 0
   16e9e:	72 e0       	ldi	r23, 0x02	; 2
   16ea0:	8d ee       	ldi	r24, 0xED	; 237
   16ea2:	9c e1       	ldi	r25, 0x1C	; 28
   16ea4:	0e 94 83 8a 	call	0x11506	; 0x11506 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16ea8:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   16eac:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   16eb0:	81 81       	ldd	r24, Z+1	; 0x01
   16eb2:	90 e0       	ldi	r25, 0x00	; 0
   16eb4:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16eb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16eba:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16ebc:	88 27       	eor	r24, r24
   16ebe:	90 7d       	andi	r25, 0xD0	; 208
   16ec0:	89 2b       	or	r24, r25
   16ec2:	09 f4       	brne	.+2      	; 0x16ec6 <Amigo_Command+0xa2>
   16ec4:	89 c2       	rjmp	.+1298   	; 0x173d8 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16ec6:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16eca:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   16ece:	81 e0       	ldi	r24, 0x01	; 1
   16ed0:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16ed2:	87 81       	ldd	r24, Z+7	; 0x07
   16ed4:	90 85       	ldd	r25, Z+8	; 0x08
   16ed6:	80 62       	ori	r24, 0x20	; 32
   16ed8:	90 87       	std	Z+8, r25	; 0x08
   16eda:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   16edc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ee0:	80 ff       	sbrs	r24, 0
   16ee2:	7a c2       	rjmp	.+1268   	; 0x173d8 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   16ee4:	86 e4       	ldi	r24, 0x46	; 70
   16ee6:	99 e2       	ldi	r25, 0x29	; 41
   16ee8:	8e c0       	rjmp	.+284    	; 0x17006 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   16eea:	ff e7       	ldi	r31, 0x7F	; 127
   16eec:	ef 16       	cp	r14, r31
   16eee:	f1 04       	cpc	r15, r1
   16ef0:	09 f0       	breq	.+2      	; 0x16ef4 <Amigo_Command+0xd0>
   16ef2:	4b c0       	rjmp	.+150    	; 0x16f8a <Amigo_Command+0x166>
   16ef4:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   16ef8:	90 e0       	ldi	r25, 0x00	; 0
   16efa:	0e 94 b6 8b 	call	0x1176c	; 0x1176c <AMIGO_is_MLA>
   16efe:	89 2b       	or	r24, r25
   16f00:	09 f4       	brne	.+2      	; 0x16f04 <Amigo_Command+0xe0>
   16f02:	43 c0       	rjmp	.+134    	; 0x16f8a <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16f04:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   16f08:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   16f0c:	81 81       	ldd	r24, Z+1	; 0x01
   16f0e:	90 e0       	ldi	r25, 0x00	; 0
   16f10:	0e 94 6a 85 	call	0x10ad4	; 0x10ad4 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16f14:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f18:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   16f1a:	0e 94 5a 84 	call	0x108b4	; 0x108b4 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   16f1e:	80 e0       	ldi	r24, 0x00	; 0
   16f20:	91 e0       	ldi	r25, 0x01	; 1
   16f22:	9c 8f       	std	Y+28, r25	; 0x1c
   16f24:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16f26:	ae 01       	movw	r20, r28
   16f28:	45 5e       	subi	r20, 0xE5	; 229
   16f2a:	5f 4f       	sbci	r21, 0xFF	; 255
   16f2c:	60 e0       	ldi	r22, 0x00	; 0
   16f2e:	72 e0       	ldi	r23, 0x02	; 2
   16f30:	8d ee       	ldi	r24, 0xED	; 237
   16f32:	9c e1       	ldi	r25, 0x1C	; 28
   16f34:	0e 94 e1 89 	call	0x113c2	; 0x113c2 <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16f38:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f3c:	87 ff       	sbrs	r24, 7
   16f3e:	04 c0       	rjmp	.+8      	; 0x16f48 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   16f40:	87 ed       	ldi	r24, 0xD7	; 215
   16f42:	95 e1       	ldi	r25, 0x15	; 21
   16f44:	0e 94 6c 84 	call	0x108d8	; 0x108d8 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16f48:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   16f4c:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   16f50:	81 81       	ldd	r24, Z+1	; 0x01
   16f52:	90 e0       	ldi	r25, 0x00	; 0
   16f54:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16f58:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16f5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16f5c:	88 27       	eor	r24, r24
   16f5e:	90 7d       	andi	r25, 0xD0	; 208
   16f60:	89 2b       	or	r24, r25
   16f62:	09 f4       	brne	.+2      	; 0x16f66 <Amigo_Command+0x142>
   16f64:	39 c2       	rjmp	.+1138   	; 0x173d8 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16f66:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16f6a:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   16f6e:	81 e0       	ldi	r24, 0x01	; 1
   16f70:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16f72:	87 81       	ldd	r24, Z+7	; 0x07
   16f74:	90 85       	ldd	r25, Z+8	; 0x08
   16f76:	80 62       	ori	r24, 0x20	; 32
   16f78:	90 87       	std	Z+8, r25	; 0x08
   16f7a:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   16f7c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f80:	80 ff       	sbrs	r24, 0
   16f82:	2a c2       	rjmp	.+1108   	; 0x173d8 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   16f84:	85 e2       	ldi	r24, 0x25	; 37
   16f86:	99 e2       	ldi	r25, 0x29	; 41
   16f88:	3e c0       	rjmp	.+124    	; 0x17006 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16f8a:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   16f8e:	90 e0       	ldi	r25, 0x00	; 0
   16f90:	0e 94 b6 8b 	call	0x1176c	; 0x1176c <AMIGO_is_MLA>
   16f94:	89 2b       	or	r24, r25
   16f96:	19 f4       	brne	.+6      	; 0x16f9e <Amigo_Command+0x17a>
        return(0);
   16f98:	80 e0       	ldi	r24, 0x00	; 0
   16f9a:	90 e0       	ldi	r25, 0x00	; 0
   16f9c:	25 c2       	rjmp	.+1098   	; 0x173e8 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16f9e:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   16fa2:	90 e0       	ldi	r25, 0x00	; 0
   16fa4:	0e 94 c7 8b 	call	0x1178e	; 0x1178e <AMIGO_is_MTA>
   16fa8:	89 2b       	or	r24, r25
   16faa:	b1 f7       	brne	.-20     	; 0x16f98 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16fac:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   16fb0:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   16fb4:	81 81       	ldd	r24, Z+1	; 0x01
   16fb6:	90 e0       	ldi	r25, 0x00	; 0
   16fb8:	0e 94 6a 85 	call	0x10ad4	; 0x10ad4 <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   16fbc:	80 e0       	ldi	r24, 0x00	; 0
   16fbe:	91 e0       	ldi	r25, 0x01	; 1
   16fc0:	9c 8f       	std	Y+28, r25	; 0x1c
   16fc2:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16fc4:	ae 01       	movw	r20, r28
   16fc6:	45 5e       	subi	r20, 0xE5	; 229
   16fc8:	5f 4f       	sbci	r21, 0xFF	; 255
   16fca:	60 e0       	ldi	r22, 0x00	; 0
   16fcc:	72 e0       	ldi	r23, 0x02	; 2
   16fce:	8d ee       	ldi	r24, 0xED	; 237
   16fd0:	9c e1       	ldi	r25, 0x1C	; 28
   16fd2:	0e 94 e1 89 	call	0x113c2	; 0x113c2 <gpib_read_str>
   16fd6:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   16fd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16fda:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16fdc:	88 27       	eor	r24, r24
   16fde:	90 7d       	andi	r25, 0xD0	; 208
   16fe0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16fe4:	89 2b       	or	r24, r25
   16fe6:	c1 f0       	breq	.+48     	; 0x17018 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   16fe8:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   16fec:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   16ff0:	81 e0       	ldi	r24, 0x01	; 1
   16ff2:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16ff4:	87 81       	ldd	r24, Z+7	; 0x07
   16ff6:	90 85       	ldd	r25, Z+8	; 0x08
   16ff8:	80 62       	ori	r24, 0x20	; 32
   16ffa:	90 87       	std	Z+8, r25	; 0x08
   16ffc:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   16ffe:	20 ff       	sbrs	r18, 0
   17000:	eb c1       	rjmp	.+982    	; 0x173d8 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   17002:	84 e0       	ldi	r24, 0x04	; 4
   17004:	99 e2       	ldi	r25, 0x29	; 41
   17006:	a0 e0       	ldi	r26, 0x00	; 0
   17008:	ed b7       	in	r30, 0x3d	; 61
   1700a:	fe b7       	in	r31, 0x3e	; 62
   1700c:	81 83       	std	Z+1, r24	; 0x01
   1700e:	92 83       	std	Z+2, r25	; 0x02
   17010:	a3 83       	std	Z+3, r26	; 0x03
   17012:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   17016:	e0 c1       	rjmp	.+960    	; 0x173d8 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17018:	25 ff       	sbrs	r18, 5
   1701a:	0e c0       	rjmp	.+28     	; 0x17038 <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   1701c:	ed b7       	in	r30, 0x3d	; 61
   1701e:	fe b7       	in	r31, 0x3e	; 62
   17020:	17 83       	std	Z+7, r17	; 0x07
   17022:	06 83       	std	Z+6, r16	; 0x06
   17024:	f5 82       	std	Z+5, r15	; 0x05
   17026:	e4 82       	std	Z+4, r14	; 0x04
   17028:	85 ed       	ldi	r24, 0xD5	; 213
   1702a:	98 e2       	ldi	r25, 0x28	; 40
   1702c:	a0 e0       	ldi	r26, 0x00	; 0
   1702e:	81 83       	std	Z+1, r24	; 0x01
   17030:	92 83       	std	Z+2, r25	; 0x02
   17032:	a3 83       	std	Z+3, r26	; 0x03
   17034:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            secondary, len);
#endif
    if(!len)
   17038:	01 15       	cp	r16, r1
   1703a:	11 05       	cpc	r17, r1
   1703c:	61 f4       	brne	.+24     	; 0x17056 <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   1703e:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   17042:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   17046:	81 e0       	ldi	r24, 0x01	; 1
   17048:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   1704a:	87 81       	ldd	r24, Z+7	; 0x07
   1704c:	90 85       	ldd	r25, Z+8	; 0x08
   1704e:	80 62       	ori	r24, 0x20	; 32
   17050:	90 87       	std	Z+8, r25	; 0x08
   17052:	87 83       	std	Z+7, r24	; 0x07
   17054:	c1 c1       	rjmp	.+898    	; 0x173d8 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   17056:	60 91 ed 1c 	lds	r22, 0x1CED	; 0x801ced <gpib_iobuff>

    if (secondary == 0x68)
   1705a:	f8 e6       	ldi	r31, 0x68	; 104
   1705c:	ef 16       	cp	r14, r31
   1705e:	f1 04       	cpc	r15, r1
   17060:	09 f0       	breq	.+2      	; 0x17064 <Amigo_Command+0x240>
   17062:	28 c1       	rjmp	.+592    	; 0x172b4 <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   17064:	61 11       	cpse	r22, r1
   17066:	2e c0       	rjmp	.+92     	; 0x170c4 <Amigo_Command+0x2a0>
   17068:	02 30       	cpi	r16, 0x02	; 2
   1706a:	11 05       	cpc	r17, r1
   1706c:	09 f0       	breq	.+2      	; 0x17070 <Amigo_Command+0x24c>
   1706e:	b9 c1       	rjmp	.+882    	; 0x173e2 <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17070:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17074:	85 ff       	sbrs	r24, 5
   17076:	0a c0       	rjmp	.+20     	; 0x1708c <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   17078:	85 eb       	ldi	r24, 0xB5	; 181
   1707a:	98 e2       	ldi	r25, 0x28	; 40
   1707c:	a0 e0       	ldi	r26, 0x00	; 0
   1707e:	ed b7       	in	r30, 0x3d	; 61
   17080:	fe b7       	in	r31, 0x3e	; 62
   17082:	81 83       	std	Z+1, r24	; 0x01
   17084:	92 83       	std	Z+2, r25	; 0x02
   17086:	a3 83       	std	Z+3, r26	; 0x03
   17088:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   1708c:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   17090:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   17094:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   17096:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   17098:	10 86       	std	Z+8, r1	; 0x08
   1709a:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   1709c:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   1709e:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
   170a2:	98 2f       	mov	r25, r24
   170a4:	92 95       	swap	r25
   170a6:	96 95       	lsr	r25
   170a8:	96 95       	lsr	r25
   170aa:	93 70       	andi	r25, 0x03	; 3
   170ac:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   170ae:	8f 73       	andi	r24, 0x3F	; 63
   170b0:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   170b2:	ce 01       	movw	r24, r28
   170b4:	0a 96       	adiw	r24, 0x0a	; 10
   170b6:	d1 d9       	rcall	.-3166   	; 0x1645a <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   170b8:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   170bc:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   170c0:	85 e0       	ldi	r24, 0x05	; 5
   170c2:	19 c1       	rjmp	.+562    	; 0x172f6 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   170c4:	62 30       	cpi	r22, 0x02	; 2
   170c6:	09 f0       	breq	.+2      	; 0x170ca <Amigo_Command+0x2a6>
   170c8:	3f c0       	rjmp	.+126    	; 0x17148 <Amigo_Command+0x324>
   170ca:	05 30       	cpi	r16, 0x05	; 5
   170cc:	11 05       	cpc	r17, r1
   170ce:	d1 f4       	brne	.+52     	; 0x17104 <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   170d0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   170d4:	85 ff       	sbrs	r24, 5
   170d6:	0a c0       	rjmp	.+20     	; 0x170ec <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   170d8:	81 ea       	ldi	r24, 0xA1	; 161
   170da:	98 e2       	ldi	r25, 0x28	; 40
   170dc:	a0 e0       	ldi	r26, 0x00	; 0
   170de:	ed b7       	in	r30, 0x3d	; 61
   170e0:	fe b7       	in	r31, 0x3e	; 62
   170e2:	81 83       	std	Z+1, r24	; 0x01
   170e4:	92 83       	std	Z+2, r25	; 0x02
   170e6:	a3 83       	std	Z+3, r26	; 0x03
   170e8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   170ec:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
   170f0:	85 de       	rcall	.-758    	; 0x16dfc <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   170f2:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_iobuff+0x2>
   170f6:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   170f8:	80 91 f0 1c 	lds	r24, 0x1CF0	; 0x801cf0 <gpib_iobuff+0x3>
   170fc:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   170fe:	80 91 f1 1c 	lds	r24, 0x1CF1	; 0x801cf1 <gpib_iobuff+0x4>
   17102:	1d c0       	rjmp	.+58     	; 0x1713e <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   17104:	06 30       	cpi	r16, 0x06	; 6
   17106:	11 05       	cpc	r17, r1
   17108:	09 f0       	breq	.+2      	; 0x1710c <Amigo_Command+0x2e8>
   1710a:	6b c1       	rjmp	.+726    	; 0x173e2 <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1710c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17110:	85 ff       	sbrs	r24, 5
   17112:	0a c0       	rjmp	.+20     	; 0x17128 <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   17114:	8d e8       	ldi	r24, 0x8D	; 141
   17116:	98 e2       	ldi	r25, 0x28	; 40
   17118:	a0 e0       	ldi	r26, 0x00	; 0
   1711a:	ed b7       	in	r30, 0x3d	; 61
   1711c:	fe b7       	in	r31, 0x3e	; 62
   1711e:	81 83       	std	Z+1, r24	; 0x01
   17120:	92 83       	std	Z+2, r25	; 0x02
   17122:	a3 83       	std	Z+3, r26	; 0x03
   17124:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17128:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
   1712c:	67 de       	rcall	.-818    	; 0x16dfc <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   1712e:	80 91 f0 1c 	lds	r24, 0x1CF0	; 0x801cf0 <gpib_iobuff+0x3>
   17132:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   17134:	80 91 f1 1c 	lds	r24, 0x1CF1	; 0x801cf1 <gpib_iobuff+0x4>
   17138:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   1713a:	80 91 f2 1c 	lds	r24, 0x1CF2	; 0x801cf2 <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   1713e:	8f 87       	std	Y+15, r24	; 0x0f
   17140:	ce 01       	movw	r24, r28
   17142:	0a 96       	adiw	r24, 0x0a	; 10
   17144:	8a d9       	rcall	.-3308   	; 0x1645a <amigo_seek>
   17146:	d8 c0       	rjmp	.+432    	; 0x172f8 <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   17148:	63 30       	cpi	r22, 0x03	; 3
   1714a:	e9 f4       	brne	.+58     	; 0x17186 <Amigo_Command+0x362>
   1714c:	02 30       	cpi	r16, 0x02	; 2
   1714e:	11 05       	cpc	r17, r1
   17150:	09 f0       	breq	.+2      	; 0x17154 <Amigo_Command+0x330>
   17152:	47 c1       	rjmp	.+654    	; 0x173e2 <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17154:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17158:	85 ff       	sbrs	r24, 5
   1715a:	0a c0       	rjmp	.+20     	; 0x17170 <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   1715c:	84 e6       	ldi	r24, 0x64	; 100
   1715e:	98 e2       	ldi	r25, 0x28	; 40
   17160:	a0 e0       	ldi	r26, 0x00	; 0
   17162:	ed b7       	in	r30, 0x3d	; 61
   17164:	fe b7       	in	r31, 0x3e	; 62
   17166:	81 83       	std	Z+1, r24	; 0x01
   17168:	92 83       	std	Z+2, r25	; 0x02
   1716a:	a3 83       	std	Z+3, r26	; 0x03
   1716c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17170:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
            amigo_request_status();
   17174:	43 de       	rcall	.-890    	; 0x16dfc <amigo_check_unit>
   17176:	3d d8       	rcall	.-3974   	; 0x161f2 <amigo_request_status>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   17178:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   1717c:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   17180:	83 e0       	ldi	r24, 0x03	; 3
   17182:	80 83       	st	Z, r24
   17184:	29 c1       	rjmp	.+594    	; 0x173d8 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   17186:	65 30       	cpi	r22, 0x05	; 5
   17188:	d9 f4       	brne	.+54     	; 0x171c0 <Amigo_Command+0x39c>
   1718a:	02 30       	cpi	r16, 0x02	; 2
   1718c:	11 05       	cpc	r17, r1
   1718e:	09 f0       	breq	.+2      	; 0x17192 <Amigo_Command+0x36e>
   17190:	28 c1       	rjmp	.+592    	; 0x173e2 <Amigo_Command+0x5be>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17192:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17196:	85 ff       	sbrs	r24, 5
   17198:	0a c0       	rjmp	.+20     	; 0x171ae <Amigo_Command+0x38a>
                printf("[AMIGO Read Unbuffered Command]\n");
   1719a:	83 e4       	ldi	r24, 0x43	; 67
   1719c:	98 e2       	ldi	r25, 0x28	; 40
   1719e:	a0 e0       	ldi	r26, 0x00	; 0
   171a0:	ed b7       	in	r30, 0x3d	; 61
   171a2:	fe b7       	in	r31, 0x3e	; 62
   171a4:	81 83       	std	Z+1, r24	; 0x01
   171a6:	92 83       	std	Z+2, r25	; 0x02
   171a8:	a3 83       	std	Z+3, r26	; 0x03
   171aa:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   171ae:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
   171b2:	24 de       	rcall	.-952    	; 0x16dfc <amigo_check_unit>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   171b4:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   171b8:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   171bc:	86 e0       	ldi	r24, 0x06	; 6
   171be:	e7 c0       	rjmp	.+462    	; 0x1738e <Amigo_Command+0x56a>
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   171c0:	67 30       	cpi	r22, 0x07	; 7
   171c2:	f9 f4       	brne	.+62     	; 0x17202 <Amigo_Command+0x3de>
   171c4:	04 30       	cpi	r16, 0x04	; 4
   171c6:	11 05       	cpc	r17, r1
   171c8:	09 f0       	breq	.+2      	; 0x171cc <Amigo_Command+0x3a8>
   171ca:	0b c1       	rjmp	.+534    	; 0x173e2 <Amigo_Command+0x5be>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   171cc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   171d0:	85 ff       	sbrs	r24, 5
   171d2:	0a c0       	rjmp	.+20     	; 0x171e8 <Amigo_Command+0x3c4>
                printf("[AMIGO Verify]\n");
   171d4:	83 e3       	ldi	r24, 0x33	; 51
   171d6:	98 e2       	ldi	r25, 0x28	; 40
   171d8:	a0 e0       	ldi	r26, 0x00	; 0
   171da:	ed b7       	in	r30, 0x3d	; 61
   171dc:	fe b7       	in	r31, 0x3e	; 62
   171de:	81 83       	std	Z+1, r24	; 0x01
   171e0:	92 83       	std	Z+2, r25	; 0x02
   171e2:	a3 83       	std	Z+3, r26	; 0x03
   171e4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   171e8:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
   171ec:	07 de       	rcall	.-1010   	; 0x16dfc <amigo_check_unit>
            sectors = (0xff & *ptr++) << 8;
   171ee:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_iobuff+0x2>
   171f2:	90 e0       	ldi	r25, 0x00	; 0
   171f4:	98 2f       	mov	r25, r24
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   171f6:	88 27       	eor	r24, r24
   171f8:	20 91 f0 1c 	lds	r18, 0x1CF0	; 0x801cf0 <gpib_iobuff+0x3>
   171fc:	82 2b       	or	r24, r18
   171fe:	58 d9       	rcall	.-3408   	; 0x164b0 <amigo_verify>
   17200:	f3 c0       	rjmp	.+486    	; 0x173e8 <Amigo_Command+0x5c4>
        }
        else if(op == 0x08 && len == 2)
   17202:	68 30       	cpi	r22, 0x08	; 8
   17204:	d9 f4       	brne	.+54     	; 0x1723c <Amigo_Command+0x418>
   17206:	02 30       	cpi	r16, 0x02	; 2
   17208:	11 05       	cpc	r17, r1
   1720a:	09 f0       	breq	.+2      	; 0x1720e <Amigo_Command+0x3ea>
   1720c:	ea c0       	rjmp	.+468    	; 0x173e2 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1720e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17212:	85 ff       	sbrs	r24, 5
   17214:	0a c0       	rjmp	.+20     	; 0x1722a <Amigo_Command+0x406>
                printf("[AMIGO Write Unbuffered Command]\n");
   17216:	81 e1       	ldi	r24, 0x11	; 17
   17218:	98 e2       	ldi	r25, 0x28	; 40
   1721a:	a0 e0       	ldi	r26, 0x00	; 0
   1721c:	ed b7       	in	r30, 0x3d	; 61
   1721e:	fe b7       	in	r31, 0x3e	; 62
   17220:	81 83       	std	Z+1, r24	; 0x01
   17222:	92 83       	std	Z+2, r25	; 0x02
   17224:	a3 83       	std	Z+3, r26	; 0x03
   17226:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1722a:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
   1722e:	e6 dd       	rcall	.-1076   	; 0x16dfc <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   17230:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   17234:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   17238:	88 e0       	ldi	r24, 0x08	; 8
   1723a:	5d c0       	rjmp	.+186    	; 0x172f6 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   1723c:	86 2f       	mov	r24, r22
   1723e:	8f 7d       	andi	r24, 0xDF	; 223
   17240:	8b 30       	cpi	r24, 0x0B	; 11
   17242:	d9 f4       	brne	.+54     	; 0x1727a <Amigo_Command+0x456>
   17244:	02 30       	cpi	r16, 0x02	; 2
   17246:	11 05       	cpc	r17, r1
   17248:	09 f0       	breq	.+2      	; 0x1724c <Amigo_Command+0x428>
   1724a:	cb c0       	rjmp	.+406    	; 0x173e2 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1724c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17250:	85 ff       	sbrs	r24, 5
   17252:	0a c0       	rjmp	.+20     	; 0x17268 <Amigo_Command+0x444>
                printf("[AMIGO Initialize Command]\n");
   17254:	85 ef       	ldi	r24, 0xF5	; 245
   17256:	97 e2       	ldi	r25, 0x27	; 39
   17258:	a0 e0       	ldi	r26, 0x00	; 0
   1725a:	ed b7       	in	r30, 0x3d	; 61
   1725c:	fe b7       	in	r31, 0x3e	; 62
   1725e:	81 83       	std	Z+1, r24	; 0x01
   17260:	92 83       	std	Z+2, r25	; 0x02
   17262:	a3 83       	std	Z+3, r26	; 0x03
   17264:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17268:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
   1726c:	c7 dd       	rcall	.-1138   	; 0x16dfc <amigo_check_unit>
            AMIGOs->state = AMIGO_INITIALIZE;
   1726e:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   17272:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   17276:	8a e0       	ldi	r24, 0x0A	; 10
   17278:	3e c0       	rjmp	.+124    	; 0x172f6 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   1727a:	64 31       	cpi	r22, 0x14	; 20
   1727c:	09 f0       	breq	.+2      	; 0x17280 <Amigo_Command+0x45c>
   1727e:	b1 c0       	rjmp	.+354    	; 0x173e2 <Amigo_Command+0x5be>
   17280:	02 30       	cpi	r16, 0x02	; 2
   17282:	11 05       	cpc	r17, r1
   17284:	09 f0       	breq	.+2      	; 0x17288 <Amigo_Command+0x464>
   17286:	ad c0       	rjmp	.+346    	; 0x173e2 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17288:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1728c:	85 ff       	sbrs	r24, 5
   1728e:	0a c0       	rjmp	.+20     	; 0x172a4 <Amigo_Command+0x480>
                printf("[AMIGO Request Logical Address Command]\n");
   17290:	8c ec       	ldi	r24, 0xCC	; 204
   17292:	97 e2       	ldi	r25, 0x27	; 39
   17294:	a0 e0       	ldi	r26, 0x00	; 0
   17296:	ed b7       	in	r30, 0x3d	; 61
   17298:	fe b7       	in	r31, 0x3e	; 62
   1729a:	81 83       	std	Z+1, r24	; 0x01
   1729c:	92 83       	std	Z+2, r25	; 0x02
   1729e:	a3 83       	std	Z+3, r26	; 0x03
   172a0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
            amigo_request_logical_address();
   172a4:	0e 94 eb b0 	call	0x161d6	; 0x161d6 <amigo_request_logical_address>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   172a8:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   172ac:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   172b0:	84 e0       	ldi	r24, 0x04	; 4
   172b2:	21 c0       	rjmp	.+66     	; 0x172f6 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   172b4:	f9 e6       	ldi	r31, 0x69	; 105
   172b6:	ef 16       	cp	r14, r31
   172b8:	f1 04       	cpc	r15, r1
   172ba:	39 f5       	brne	.+78     	; 0x1730a <Amigo_Command+0x4e6>
    {
        if(op == 0x08 && len == 2)
   172bc:	68 30       	cpi	r22, 0x08	; 8
   172be:	09 f0       	breq	.+2      	; 0x172c2 <Amigo_Command+0x49e>
   172c0:	90 c0       	rjmp	.+288    	; 0x173e2 <Amigo_Command+0x5be>
   172c2:	02 30       	cpi	r16, 0x02	; 2
   172c4:	11 05       	cpc	r17, r1
   172c6:	09 f0       	breq	.+2      	; 0x172ca <Amigo_Command+0x4a6>
   172c8:	8c c0       	rjmp	.+280    	; 0x173e2 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   172ca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   172ce:	85 ff       	sbrs	r24, 5
   172d0:	0a c0       	rjmp	.+20     	; 0x172e6 <Amigo_Command+0x4c2>
                printf("[AMIGO Write Buffered Command]\n");
   172d2:	8c ea       	ldi	r24, 0xAC	; 172
   172d4:	97 e2       	ldi	r25, 0x27	; 39
   172d6:	a0 e0       	ldi	r26, 0x00	; 0
   172d8:	ed b7       	in	r30, 0x3d	; 61
   172da:	fe b7       	in	r31, 0x3e	; 62
   172dc:	81 83       	std	Z+1, r24	; 0x01
   172de:	92 83       	std	Z+2, r25	; 0x02
   172e0:	a3 83       	std	Z+3, r26	; 0x03
   172e2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   172e6:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
   172ea:	88 dd       	rcall	.-1264   	; 0x16dfc <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   172ec:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   172f0:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   172f4:	89 e0       	ldi	r24, 0x09	; 9
   172f6:	80 83       	st	Z, r24
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   172f8:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   172fc:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   17300:	81 81       	ldd	r24, Z+1	; 0x01
   17302:	90 e0       	ldi	r25, 0x00	; 0
   17304:	0e 94 34 85 	call	0x10a68	; 0x10a68 <gpib_enable_PPR>
   17308:	67 c0       	rjmp	.+206    	; 0x173d8 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   1730a:	fa e6       	ldi	r31, 0x6A	; 106
   1730c:	ef 16       	cp	r14, r31
   1730e:	f1 04       	cpc	r15, r1
   17310:	09 f0       	breq	.+2      	; 0x17314 <Amigo_Command+0x4f0>
   17312:	40 c0       	rjmp	.+128    	; 0x17394 <Amigo_Command+0x570>
    {
        if(op == 0x08 && len == 2)
   17314:	68 30       	cpi	r22, 0x08	; 8
   17316:	f1 f4       	brne	.+60     	; 0x17354 <Amigo_Command+0x530>
   17318:	02 30       	cpi	r16, 0x02	; 2
   1731a:	11 05       	cpc	r17, r1
   1731c:	09 f0       	breq	.+2      	; 0x17320 <Amigo_Command+0x4fc>
   1731e:	61 c0       	rjmp	.+194    	; 0x173e2 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17320:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17324:	85 ff       	sbrs	r24, 5
   17326:	0a c0       	rjmp	.+20     	; 0x1733c <Amigo_Command+0x518>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   17328:	81 e8       	ldi	r24, 0x81	; 129
   1732a:	97 e2       	ldi	r25, 0x27	; 39
   1732c:	a0 e0       	ldi	r26, 0x00	; 0
   1732e:	ed b7       	in	r30, 0x3d	; 61
   17330:	fe b7       	in	r31, 0x3e	; 62
   17332:	81 83       	std	Z+1, r24	; 0x01
   17334:	92 83       	std	Z+2, r25	; 0x02
   17336:	a3 83       	std	Z+3, r26	; 0x03
   17338:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1733c:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
   17340:	5d dd       	rcall	.-1350   	; 0x16dfc <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   17342:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   17346:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   1734a:	82 e0       	ldi	r24, 0x02	; 2
   1734c:	80 83       	st	Z, r24
            amigo_request_status();
   1734e:	0e 94 f9 b0 	call	0x161f2	; 0x161f2 <amigo_request_status>
   17352:	42 c0       	rjmp	.+132    	; 0x173d8 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   17354:	65 30       	cpi	r22, 0x05	; 5
   17356:	09 f0       	breq	.+2      	; 0x1735a <Amigo_Command+0x536>
   17358:	44 c0       	rjmp	.+136    	; 0x173e2 <Amigo_Command+0x5be>
   1735a:	02 30       	cpi	r16, 0x02	; 2
   1735c:	11 05       	cpc	r17, r1
   1735e:	09 f0       	breq	.+2      	; 0x17362 <Amigo_Command+0x53e>
   17360:	40 c0       	rjmp	.+128    	; 0x173e2 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17362:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17366:	85 ff       	sbrs	r24, 5
   17368:	0a c0       	rjmp	.+20     	; 0x1737e <Amigo_Command+0x55a>
                printf("[AMIGO Read Buffered Command]\n");
   1736a:	82 e6       	ldi	r24, 0x62	; 98
   1736c:	97 e2       	ldi	r25, 0x27	; 39
   1736e:	a0 e0       	ldi	r26, 0x00	; 0
   17370:	ed b7       	in	r30, 0x3d	; 61
   17372:	fe b7       	in	r31, 0x3e	; 62
   17374:	81 83       	std	Z+1, r24	; 0x01
   17376:	92 83       	std	Z+2, r25	; 0x02
   17378:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1737a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1737e:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   17382:	3c dd       	rcall	.-1416   	; 0x16dfc <amigo_check_unit>
   17384:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   17388:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   1738c:	87 e0       	ldi	r24, 0x07	; 7

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   1738e:	80 83       	st	Z, r24
   17390:	c5 d9       	rcall	.-3190   	; 0x1671c <amigo_buffered_read_command>
   17392:	2a c0       	rjmp	.+84     	; 0x173e8 <Amigo_Command+0x5c4>
#endif
        }
    }
    else if (secondary == 0x6C)
   17394:	fc e6       	ldi	r31, 0x6C	; 108
   17396:	ef 16       	cp	r14, r31
   17398:	f1 04       	cpc	r15, r1
   1739a:	d1 f4       	brne	.+52     	; 0x173d0 <Amigo_Command+0x5ac>
    {
        if(op == 0x18 && len == 5)
   1739c:	68 31       	cpi	r22, 0x18	; 24
   1739e:	09 f5       	brne	.+66     	; 0x173e2 <Amigo_Command+0x5be>
   173a0:	05 30       	cpi	r16, 0x05	; 5
   173a2:	11 05       	cpc	r17, r1
   173a4:	f1 f4       	brne	.+60     	; 0x173e2 <Amigo_Command+0x5be>
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173a6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173aa:	85 ff       	sbrs	r24, 5
   173ac:	0a c0       	rjmp	.+20     	; 0x173c2 <Amigo_Command+0x59e>
                printf("[AMIGO Format]\n");
   173ae:	82 e5       	ldi	r24, 0x52	; 82
   173b0:	97 e2       	ldi	r25, 0x27	; 39
   173b2:	a0 e0       	ldi	r26, 0x00	; 0
   173b4:	ed b7       	in	r30, 0x3d	; 61
   173b6:	fe b7       	in	r31, 0x3e	; 62
   173b8:	81 83       	std	Z+1, r24	; 0x01
   173ba:	92 83       	std	Z+2, r25	; 0x02
   173bc:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   173be:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   173c2:	80 91 ee 1c 	lds	r24, 0x1CEE	; 0x801cee <gpib_iobuff+0x1>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   173c6:	1a dd       	rcall	.-1484   	; 0x16dfc <amigo_check_unit>
   173c8:	80 91 f1 1c 	lds	r24, 0x1CF1	; 0x801cf1 <gpib_iobuff+0x4>
   173cc:	0f d9       	rcall	.-3554   	; 0x165ec <amigo_format>
   173ce:	04 c0       	rjmp	.+8      	; 0x173d8 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   173d0:	f0 e7       	ldi	r31, 0x70	; 112
   173d2:	ef 16       	cp	r14, r31
   173d4:	f1 04       	cpc	r15, r1
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   173d6:	29 f4       	brne	.+10     	; 0x173e2 <Amigo_Command+0x5be>
   173d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
   173da:	9c 8d       	ldd	r25, Y+28	; 0x1c
   173dc:	88 27       	eor	r24, r24
   173de:	90 7d       	andi	r25, 0xD0	; 208
    }
    return ( amigo_todo_op(secondary, op, len) );
   173e0:	03 c0       	rjmp	.+6      	; 0x173e8 <Amigo_Command+0x5c4>
   173e2:	a8 01       	movw	r20, r16
   173e4:	8e 2d       	mov	r24, r14
   173e6:	ed db       	rcall	.-2086   	; 0x16bc2 <amigo_todo_op>
}
   173e8:	6c 96       	adiw	r28, 0x1c	; 28
   173ea:	e6 e0       	ldi	r30, 0x06	; 6
   173ec:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

000173f0 <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   173f0:	a9 e0       	ldi	r26, 0x09	; 9
   173f2:	b0 e0       	ldi	r27, 0x00	; 0
   173f4:	ee ef       	ldi	r30, 0xFE	; 254
   173f6:	f9 eb       	ldi	r31, 0xB9	; 185
   173f8:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
   173fc:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173fe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17402:	85 ff       	sbrs	r24, 5
   17404:	16 c0       	rjmp	.+44     	; 0x17432 <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   17406:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   1740a:	90 e0       	ldi	r25, 0x00	; 0
   1740c:	ed b7       	in	r30, 0x3d	; 61
   1740e:	fe b7       	in	r31, 0x3e	; 62
   17410:	91 87       	std	Z+9, r25	; 0x09
   17412:	80 87       	std	Z+8, r24	; 0x08
   17414:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   17418:	90 e0       	ldi	r25, 0x00	; 0
   1741a:	97 83       	std	Z+7, r25	; 0x07
   1741c:	86 83       	std	Z+6, r24	; 0x06
   1741e:	d5 83       	std	Z+5, r29	; 0x05
   17420:	c4 83       	std	Z+4, r28	; 0x04
   17422:	80 e2       	ldi	r24, 0x20	; 32
   17424:	97 e2       	ldi	r25, 0x27	; 39
   17426:	a0 e0       	ldi	r26, 0x00	; 0
   17428:	81 83       	std	Z+1, r24	; 0x01
   1742a:	92 83       	std	Z+2, r25	; 0x02
   1742c:	a3 83       	std	Z+3, r26	; 0x03
   1742e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   17432:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   17436:	8f 35       	cpi	r24, 0x5F	; 95
   17438:	09 f4       	brne	.+2      	; 0x1743c <Amigo_Execute+0x4c>
   1743a:	ad c0       	rjmp	.+346    	; 0x17596 <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   1743c:	90 e0       	ldi	r25, 0x00	; 0
   1743e:	0e 94 c7 8b 	call	0x1178e	; 0x1178e <AMIGO_is_MTA>
   17442:	89 2b       	or	r24, r25
   17444:	39 f0       	breq	.+14     	; 0x17454 <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   17446:	ce 01       	movw	r24, r28
   17448:	87 7f       	andi	r24, 0xF7	; 247
   1744a:	80 36       	cpi	r24, 0x60	; 96
   1744c:	91 05       	cpc	r25, r1
   1744e:	09 f0       	breq	.+2      	; 0x17452 <Amigo_Execute+0x62>
   17450:	a2 c0       	rjmp	.+324    	; 0x17596 <Amigo_Execute+0x1a6>
   17452:	08 c0       	rjmp	.+16     	; 0x17464 <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17454:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   17458:	90 e0       	ldi	r25, 0x00	; 0
   1745a:	0e 94 b6 8b 	call	0x1176c	; 0x1176c <AMIGO_is_MLA>
   1745e:	89 2b       	or	r24, r25
   17460:	91 f7       	brne	.-28     	; 0x17446 <Amigo_Execute+0x56>
   17462:	99 c0       	rjmp	.+306    	; 0x17596 <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17464:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   17468:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   1746c:	81 81       	ldd	r24, Z+1	; 0x01
   1746e:	90 e0       	ldi	r25, 0x00	; 0
   17470:	0e 94 6a 85 	call	0x10ad4	; 0x10ad4 <gpib_disable_PPR>

    if(secondary == 0x60)
   17474:	c0 36       	cpi	r28, 0x60	; 96
   17476:	d1 05       	cpc	r29, r1
   17478:	09 f0       	breq	.+2      	; 0x1747c <Amigo_Execute+0x8c>
   1747a:	4e c0       	rjmp	.+156    	; 0x17518 <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   1747c:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   17480:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   17484:	e0 81       	ld	r30, Z
   17486:	8e 2f       	mov	r24, r30
   17488:	90 e0       	ldi	r25, 0x00	; 0
   1748a:	8b 30       	cpi	r24, 0x0B	; 11
   1748c:	91 05       	cpc	r25, r1
   1748e:	08 f0       	brcs	.+2      	; 0x17492 <Amigo_Execute+0xa2>
   17490:	41 c0       	rjmp	.+130    	; 0x17514 <Amigo_Execute+0x124>
   17492:	fc 01       	movw	r30, r24
   17494:	ea 52       	subi	r30, 0x2A	; 42
   17496:	ff 4f       	sbci	r31, 0xFF	; 255
   17498:	0c 94 2d e3 	jmp	0x1c65a	; 0x1c65a <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1749c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174a0:	85 ff       	sbrs	r24, 5
   174a2:	18 c0       	rjmp	.+48     	; 0x174d4 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   174a4:	80 e0       	ldi	r24, 0x00	; 0
   174a6:	97 e2       	ldi	r25, 0x27	; 39
   174a8:	0d c0       	rjmp	.+26     	; 0x174c4 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   174aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174ae:	85 ff       	sbrs	r24, 5
   174b0:	11 c0       	rjmp	.+34     	; 0x174d4 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   174b2:	8f ed       	ldi	r24, 0xDF	; 223
   174b4:	96 e2       	ldi	r25, 0x26	; 38
   174b6:	06 c0       	rjmp	.+12     	; 0x174c4 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   174b8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174bc:	85 ff       	sbrs	r24, 5
   174be:	0a c0       	rjmp	.+20     	; 0x174d4 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   174c0:	80 ec       	ldi	r24, 0xC0	; 192
   174c2:	96 e2       	ldi	r25, 0x26	; 38
   174c4:	a0 e0       	ldi	r26, 0x00	; 0
   174c6:	ed b7       	in	r30, 0x3d	; 61
   174c8:	fe b7       	in	r31, 0x3e	; 62
   174ca:	81 83       	std	Z+1, r24	; 0x01
   174cc:	92 83       	std	Z+2, r25	; 0x02
   174ce:	a3 83       	std	Z+3, r26	; 0x03
   174d0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   174d4:	b0 d9       	rcall	.-3232   	; 0x16836 <amigo_buffered_read_execute>
   174d6:	61 c0       	rjmp	.+194    	; 0x1759a <Amigo_Execute+0x1aa>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   174d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174dc:	85 ff       	sbrs	r24, 5
   174de:	18 c0       	rjmp	.+48     	; 0x17510 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Unbuffered]\n");
   174e0:	8e e9       	ldi	r24, 0x9E	; 158
   174e2:	96 e2       	ldi	r25, 0x26	; 38
   174e4:	0d c0       	rjmp	.+26     	; 0x17500 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   174e6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174ea:	85 ff       	sbrs	r24, 5
   174ec:	11 c0       	rjmp	.+34     	; 0x17510 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Initialize]\n");
   174ee:	82 e8       	ldi	r24, 0x82	; 130
   174f0:	96 e2       	ldi	r25, 0x26	; 38
   174f2:	06 c0       	rjmp	.+12     	; 0x17500 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   174f4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174f8:	85 ff       	sbrs	r24, 5
   174fa:	0a c0       	rjmp	.+20     	; 0x17510 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Buffered]\n");
   174fc:	82 e6       	ldi	r24, 0x62	; 98
   174fe:	96 e2       	ldi	r25, 0x26	; 38
   17500:	a0 e0       	ldi	r26, 0x00	; 0
   17502:	ed b7       	in	r30, 0x3d	; 61
   17504:	fe b7       	in	r31, 0x3e	; 62
   17506:	81 83       	std	Z+1, r24	; 0x01
   17508:	92 83       	std	Z+2, r25	; 0x02
   1750a:	a3 83       	std	Z+3, r26	; 0x03
   1750c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
                return ( amigo_buffered_write() );
   17510:	ed d9       	rcall	.-3110   	; 0x168ec <amigo_buffered_write>
   17512:	43 c0       	rjmp	.+134    	; 0x1759a <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17514:	80 e6       	ldi	r24, 0x60	; 96
   17516:	3d c0       	rjmp	.+122    	; 0x17592 <Amigo_Execute+0x1a2>
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17518:	c8 36       	cpi	r28, 0x68	; 104
   1751a:	d1 05       	cpc	r29, r1
   1751c:	e1 f5       	brne	.+120    	; 0x17596 <Amigo_Execute+0x1a6>
    {
        switch(AMIGOs->state)
   1751e:	e0 91 65 19 	lds	r30, 0x1965	; 0x801965 <AMIGOs>
   17522:	f0 91 66 19 	lds	r31, 0x1966	; 0x801966 <AMIGOs+0x1>
   17526:	80 81       	ld	r24, Z
   17528:	82 30       	cpi	r24, 0x02	; 2
   1752a:	81 f0       	breq	.+32     	; 0x1754c <Amigo_Execute+0x15c>
   1752c:	18 f4       	brcc	.+6      	; 0x17534 <Amigo_Execute+0x144>
   1752e:	88 23       	and	r24, r24
   17530:	91 f1       	breq	.+100    	; 0x17596 <Amigo_Execute+0x1a6>
   17532:	2e c0       	rjmp	.+92     	; 0x17590 <Amigo_Execute+0x1a0>
   17534:	83 30       	cpi	r24, 0x03	; 3
   17536:	19 f0       	breq	.+6      	; 0x1753e <Amigo_Execute+0x14e>
   17538:	84 30       	cpi	r24, 0x04	; 4
   1753a:	c9 f0       	breq	.+50     	; 0x1756e <Amigo_Execute+0x17e>
   1753c:	29 c0       	rjmp	.+82     	; 0x17590 <Amigo_Execute+0x1a0>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1753e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17542:	85 ff       	sbrs	r24, 5
   17544:	11 c0       	rjmp	.+34     	; 0x17568 <Amigo_Execute+0x178>
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17546:	89 e3       	ldi	r24, 0x39	; 57
   17548:	96 e2       	ldi	r25, 0x26	; 38
   1754a:	06 c0       	rjmp	.+12     	; 0x17558 <Amigo_Execute+0x168>
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1754c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17550:	85 ff       	sbrs	r24, 5
   17552:	0a c0       	rjmp	.+20     	; 0x17568 <Amigo_Execute+0x178>
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17554:	8e e0       	ldi	r24, 0x0E	; 14
   17556:	96 e2       	ldi	r25, 0x26	; 38
   17558:	a0 e0       	ldi	r26, 0x00	; 0
   1755a:	ed b7       	in	r30, 0x3d	; 61
   1755c:	fe b7       	in	r31, 0x3e	; 62
   1755e:	81 83       	std	Z+1, r24	; 0x01
   17560:	92 83       	std	Z+2, r25	; 0x02
   17562:	a3 83       	std	Z+3, r26	; 0x03
   17564:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
                return ( amigo_send_status() );
   17568:	0e 94 ab b1 	call	0x16356	; 0x16356 <amigo_send_status>
   1756c:	16 c0       	rjmp	.+44     	; 0x1759a <Amigo_Execute+0x1aa>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1756e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17572:	85 ff       	sbrs	r24, 5
   17574:	0a c0       	rjmp	.+20     	; 0x1758a <Amigo_Execute+0x19a>
                    printf("[AMIGO Execute Request Logical Address]\n");
   17576:	85 ee       	ldi	r24, 0xE5	; 229
   17578:	95 e2       	ldi	r25, 0x25	; 37
   1757a:	a0 e0       	ldi	r26, 0x00	; 0
   1757c:	ed b7       	in	r30, 0x3d	; 61
   1757e:	fe b7       	in	r31, 0x3e	; 62
   17580:	81 83       	std	Z+1, r24	; 0x01
   17582:	92 83       	std	Z+2, r25	; 0x02
   17584:	a3 83       	std	Z+3, r26	; 0x03
   17586:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
                return ( amigo_send_logical_address() );
   1758a:	0e 94 56 b1 	call	0x162ac	; 0x162ac <amigo_send_logical_address>
   1758e:	05 c0       	rjmp	.+10     	; 0x1759a <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17590:	88 e6       	ldi	r24, 0x68	; 104
   17592:	b0 db       	rcall	.-2208   	; 0x16cf4 <amigo_todo>
   17594:	02 c0       	rjmp	.+4      	; 0x1759a <Amigo_Execute+0x1aa>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17596:	80 e0       	ldi	r24, 0x00	; 0
   17598:	90 e0       	ldi	r25, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   1759a:	cd b7       	in	r28, 0x3d	; 61
   1759c:	de b7       	in	r29, 0x3e	; 62
   1759e:	29 96       	adiw	r28, 0x09	; 9
   175a0:	e2 e0       	ldi	r30, 0x02	; 2
   175a2:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

000175a6 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   175a6:	cf 93       	push	r28
   175a8:	df 93       	push	r29
   175aa:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   175ac:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   175b0:	90 e0       	ldi	r25, 0x00	; 0
   175b2:	0e 94 c7 8b 	call	0x1178e	; 0x1178e <AMIGO_is_MTA>
   175b6:	89 2b       	or	r24, r25
   175b8:	51 f0       	breq	.+20     	; 0x175ce <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   175ba:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   175be:	8f 35       	cpi	r24, 0x5F	; 95
   175c0:	71 f4       	brne	.+28     	; 0x175de <AMIGO_COMMANDS+0x38>
   175c2:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   175c6:	90 e0       	ldi	r25, 0x00	; 0
   175c8:	0e 94 b6 8b 	call	0x1176c	; 0x1176c <AMIGO_is_MLA>
   175cc:	08 c0       	rjmp	.+16     	; 0x175de <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   175ce:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   175d2:	90 e0       	ldi	r25, 0x00	; 0
   175d4:	0e 94 b6 8b 	call	0x1176c	; 0x1176c <AMIGO_is_MLA>
   175d8:	89 2b       	or	r24, r25
   175da:	79 f7       	brne	.-34     	; 0x175ba <AMIGO_COMMANDS+0x14>
   175dc:	76 c0       	rjmp	.+236    	; 0x176ca <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   175de:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   175e2:	81 11       	cpse	r24, r1
   175e4:	05 c0       	rjmp	.+10     	; 0x175f0 <AMIGO_COMMANDS+0x4a>
   175e6:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   175ea:	90 e0       	ldi	r25, 0x00	; 0
   175ec:	0e 94 c7 8b 	call	0x1178e	; 0x1178e <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   175f0:	c0 36       	cpi	r28, 0x60	; 96
   175f2:	99 f4       	brne	.+38     	; 0x1761a <AMIGO_COMMANDS+0x74>
   175f4:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   175f8:	90 e0       	ldi	r25, 0x00	; 0
   175fa:	0e 94 c7 8b 	call	0x1178e	; 0x1178e <AMIGO_is_MTA>
   175fe:	89 2b       	or	r24, r25
   17600:	19 f0       	breq	.+6      	; 0x17608 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17602:	80 e6       	ldi	r24, 0x60	; 96
   17604:	90 e0       	ldi	r25, 0x00	; 0
   17606:	14 c0       	rjmp	.+40     	; 0x17630 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17608:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   1760c:	90 e0       	ldi	r25, 0x00	; 0
   1760e:	0e 94 b6 8b 	call	0x1176c	; 0x1176c <AMIGO_is_MLA>
   17612:	89 2b       	or	r24, r25
   17614:	09 f4       	brne	.+2      	; 0x17618 <AMIGO_COMMANDS+0x72>
   17616:	59 c0       	rjmp	.+178    	; 0x176ca <AMIGO_COMMANDS+0x124>
   17618:	f4 cf       	rjmp	.-24     	; 0x17602 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   1761a:	c8 36       	cpi	r28, 0x68	; 104
   1761c:	c1 f4       	brne	.+48     	; 0x1764e <AMIGO_COMMANDS+0xa8>
   1761e:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   17622:	90 e0       	ldi	r25, 0x00	; 0
   17624:	0e 94 c7 8b 	call	0x1178e	; 0x1178e <AMIGO_is_MTA>
   17628:	89 2b       	or	r24, r25
   1762a:	21 f0       	breq	.+8      	; 0x17634 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   1762c:	88 e6       	ldi	r24, 0x68	; 104
   1762e:	90 e0       	ldi	r25, 0x00	; 0
   17630:	df de       	rcall	.-578    	; 0x173f0 <Amigo_Execute>
   17632:	0b c0       	rjmp	.+22     	; 0x1764a <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   17634:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   17638:	90 e0       	ldi	r25, 0x00	; 0
   1763a:	0e 94 b6 8b 	call	0x1176c	; 0x1176c <AMIGO_is_MLA>
   1763e:	89 2b       	or	r24, r25
   17640:	09 f4       	brne	.+2      	; 0x17644 <AMIGO_COMMANDS+0x9e>
   17642:	43 c0       	rjmp	.+134    	; 0x176ca <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17644:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   17646:	90 e0       	ldi	r25, 0x00	; 0
   17648:	ed db       	rcall	.-2086   	; 0x16e24 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   1764a:	ec 01       	movw	r28, r24
   1764c:	40 c0       	rjmp	.+128    	; 0x176ce <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   1764e:	c9 36       	cpi	r28, 0x69	; 105
   17650:	51 f4       	brne	.+20     	; 0x17666 <AMIGO_COMMANDS+0xc0>
   17652:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   17656:	90 e0       	ldi	r25, 0x00	; 0
   17658:	0e 94 b6 8b 	call	0x1176c	; 0x1176c <AMIGO_is_MLA>
   1765c:	89 2b       	or	r24, r25
   1765e:	a9 f1       	breq	.+106    	; 0x176ca <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17660:	89 e6       	ldi	r24, 0x69	; 105
   17662:	90 e0       	ldi	r25, 0x00	; 0
   17664:	f1 cf       	rjmp	.-30     	; 0x17648 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   17666:	ca 36       	cpi	r28, 0x6A	; 106
   17668:	51 f4       	brne	.+20     	; 0x1767e <AMIGO_COMMANDS+0xd8>
   1766a:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   1766e:	90 e0       	ldi	r25, 0x00	; 0
   17670:	0e 94 b6 8b 	call	0x1176c	; 0x1176c <AMIGO_is_MLA>
   17674:	89 2b       	or	r24, r25
   17676:	49 f1       	breq	.+82     	; 0x176ca <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17678:	8a e6       	ldi	r24, 0x6A	; 106
   1767a:	90 e0       	ldi	r25, 0x00	; 0
   1767c:	e5 cf       	rjmp	.-54     	; 0x17648 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   1767e:	cc 36       	cpi	r28, 0x6C	; 108
   17680:	51 f4       	brne	.+20     	; 0x17696 <AMIGO_COMMANDS+0xf0>
   17682:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   17686:	90 e0       	ldi	r25, 0x00	; 0
   17688:	0e 94 b6 8b 	call	0x1176c	; 0x1176c <AMIGO_is_MLA>
   1768c:	89 2b       	or	r24, r25
   1768e:	e9 f0       	breq	.+58     	; 0x176ca <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17690:	8c e6       	ldi	r24, 0x6C	; 108
   17692:	90 e0       	ldi	r25, 0x00	; 0
   17694:	d9 cf       	rjmp	.-78     	; 0x17648 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17696:	c0 37       	cpi	r28, 0x70	; 112
   17698:	c1 f4       	brne	.+48     	; 0x176ca <AMIGO_COMMANDS+0x124>
   1769a:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   1769e:	90 e0       	ldi	r25, 0x00	; 0
   176a0:	0e 94 c7 8b 	call	0x1178e	; 0x1178e <AMIGO_is_MTA>
   176a4:	ec 01       	movw	r28, r24
   176a6:	89 2b       	or	r24, r25
   176a8:	51 f0       	breq	.+20     	; 0x176be <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   176aa:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <AMIGOp>
   176ae:	f0 91 68 19 	lds	r31, 0x1968	; 0x801968 <AMIGOp+0x1>
   176b2:	81 81       	ldd	r24, Z+1	; 0x01
   176b4:	90 e0       	ldi	r25, 0x00	; 0
   176b6:	0e 94 6a 85 	call	0x10ad4	; 0x10ad4 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   176ba:	ff d9       	rcall	.-3074   	; 0x16aba <amigo_cmd_dsj>
   176bc:	c6 cf       	rjmp	.-116    	; 0x1764a <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   176be:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   176c2:	90 e0       	ldi	r25, 0x00	; 0
   176c4:	0e 94 b6 8b 	call	0x1176c	; 0x1176c <AMIGO_is_MLA>
   176c8:	02 c0       	rjmp	.+4      	; 0x176ce <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   176ca:	c0 e0       	ldi	r28, 0x00	; 0
   176cc:	d0 e0       	ldi	r29, 0x00	; 0
}
   176ce:	ce 01       	movw	r24, r28
   176d0:	df 91       	pop	r29
   176d2:	cf 91       	pop	r28
   176d4:	08 95       	ret

000176d6 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   176d6:	e0 ea       	ldi	r30, 0xA0	; 160
   176d8:	f9 e1       	ldi	r31, 0x19	; 25
   176da:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   176dc:	10 82       	st	Z, r1
   176de:	11 82       	std	Z+1, r1	; 0x01
   176e0:	12 82       	std	Z+2, r1	; 0x02
   176e2:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   176e4:	15 82       	std	Z+5, r1	; 0x05
   176e6:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   176e8:	12 86       	std	Z+10, r1	; 0x0a
   176ea:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   176ec:	14 86       	std	Z+12, r1	; 0x0c
   176ee:	13 86       	std	Z+11, r1	; 0x0b
   176f0:	08 95       	ret

000176f2 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   176f2:	cf 93       	push	r28
   176f4:	df 93       	push	r29
   176f6:	ad b7       	in	r26, 0x3d	; 61
   176f8:	be b7       	in	r27, 0x3e	; 62
   176fa:	17 97       	sbiw	r26, 0x07	; 7
   176fc:	0f b6       	in	r0, 0x3f	; 63
   176fe:	f8 94       	cli
   17700:	be bf       	out	0x3e, r27	; 62
   17702:	0f be       	out	0x3f, r0	; 63
   17704:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   17706:	20 91 a9 19 	lds	r18, 0x19A9	; 0x8019a9 <plot+0x9>
   1770a:	30 91 aa 19 	lds	r19, 0x19AA	; 0x8019aa <plot+0xa>
   1770e:	21 15       	cp	r18, r1
   17710:	31 05       	cpc	r19, r1
   17712:	09 f4       	brne	.+2      	; 0x17716 <receive_plot_flush+0x24>
   17714:	45 c0       	rjmp	.+138    	; 0x177a0 <receive_plot_flush+0xae>
   17716:	80 91 a4 19 	lds	r24, 0x19A4	; 0x8019a4 <plot+0x4>
   1771a:	90 91 a5 19 	lds	r25, 0x19A5	; 0x8019a5 <plot+0x5>
   1771e:	00 97       	sbiw	r24, 0x00	; 0
   17720:	09 f4       	brne	.+2      	; 0x17724 <receive_plot_flush+0x32>
   17722:	40 c0       	rjmp	.+128    	; 0x177a4 <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17724:	ac 01       	movw	r20, r24
   17726:	61 e0       	ldi	r22, 0x01	; 1
   17728:	70 e0       	ldi	r23, 0x00	; 0
   1772a:	80 91 ab 19 	lds	r24, 0x19AB	; 0x8019ab <plot+0xb>
   1772e:	90 91 ac 19 	lds	r25, 0x19AC	; 0x8019ac <plot+0xc>
   17732:	0e 94 5e 7b 	call	0xf6bc	; 0xf6bc <fwrite>
   17736:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17738:	80 91 a4 19 	lds	r24, 0x19A4	; 0x8019a4 <plot+0x4>
   1773c:	90 91 a5 19 	lds	r25, 0x19A5	; 0x8019a5 <plot+0x5>
   17740:	c8 17       	cp	r28, r24
   17742:	d9 07       	cpc	r29, r25
   17744:	09 f1       	breq	.+66     	; 0x17788 <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17746:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1774a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1774e:	81 72       	andi	r24, 0x21	; 33
   17750:	99 27       	eor	r25, r25
   17752:	89 2b       	or	r24, r25
   17754:	b1 f0       	breq	.+44     	; 0x17782 <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17756:	81 ee       	ldi	r24, 0xE1	; 225
   17758:	95 e1       	ldi	r25, 0x15	; 21
   1775a:	0e 94 67 77 	call	0xeece	; 0xeece <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   1775e:	ed b7       	in	r30, 0x3d	; 61
   17760:	fe b7       	in	r31, 0x3e	; 62
   17762:	d7 83       	std	Z+7, r29	; 0x07
   17764:	c6 83       	std	Z+6, r28	; 0x06
   17766:	80 91 a4 19 	lds	r24, 0x19A4	; 0x8019a4 <plot+0x4>
   1776a:	90 91 a5 19 	lds	r25, 0x19A5	; 0x8019a5 <plot+0x5>
   1776e:	95 83       	std	Z+5, r25	; 0x05
   17770:	84 83       	std	Z+4, r24	; 0x04
   17772:	85 e7       	ldi	r24, 0x75	; 117
   17774:	9e e2       	ldi	r25, 0x2E	; 46
   17776:	a0 e0       	ldi	r26, 0x00	; 0
   17778:	81 83       	std	Z+1, r24	; 0x01
   1777a:	92 83       	std	Z+2, r25	; 0x02
   1777c:	a3 83       	std	Z+3, r26	; 0x03
   1777e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        }
        return(-1);
   17782:	8f ef       	ldi	r24, 0xFF	; 255
   17784:	9f ef       	ldi	r25, 0xFF	; 255
   17786:	0e c0       	rjmp	.+28     	; 0x177a4 <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   17788:	80 91 a9 19 	lds	r24, 0x19A9	; 0x8019a9 <plot+0x9>
   1778c:	90 91 aa 19 	lds	r25, 0x19AA	; 0x8019aa <plot+0xa>
   17790:	0e 94 b1 75 	call	0xeb62	; 0xeb62 <fileno>
    if(fno < 0)
   17794:	97 fd       	sbrc	r25, 7
   17796:	f5 cf       	rjmp	.-22     	; 0x17782 <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   17798:	0e 94 a8 7a 	call	0xf550	; 0xf550 <syncfs>
    return (ret);
   1779c:	ce 01       	movw	r24, r28
   1779e:	02 c0       	rjmp	.+4      	; 0x177a4 <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   177a0:	80 e0       	ldi	r24, 0x00	; 0
   177a2:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   177a4:	cd b7       	in	r28, 0x3d	; 61
   177a6:	de b7       	in	r29, 0x3e	; 62
   177a8:	27 96       	adiw	r28, 0x07	; 7
   177aa:	e2 e0       	ldi	r30, 0x02	; 2
   177ac:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

000177b0 <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   177b0:	ad b7       	in	r26, 0x3d	; 61
   177b2:	be b7       	in	r27, 0x3e	; 62
   177b4:	17 97       	sbiw	r26, 0x07	; 7
   177b6:	0f b6       	in	r0, 0x3f	; 63
   177b8:	f8 94       	cli
   177ba:	be bf       	out	0x3e, r27	; 62
   177bc:	0f be       	out	0x3f, r0	; 63
   177be:	ad bf       	out	0x3d, r26	; 61
    if( receive_plot_flush() < 0 )
   177c0:	98 df       	rcall	.-208    	; 0x176f2 <receive_plot_flush>
   177c2:	97 ff       	sbrs	r25, 7
   177c4:	03 c0       	rjmp	.+6      	; 0x177cc <printer_close+0x1c>
        plot.error = 1;
   177c6:	81 e0       	ldi	r24, 0x01	; 1
   177c8:	80 93 a8 19 	sts	0x19A8, r24	; 0x8019a8 <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   177cc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   177d0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   177d4:	81 72       	andi	r24, 0x21	; 33
   177d6:	99 27       	eor	r25, r25
   177d8:	89 2b       	or	r24, r25
   177da:	71 f0       	breq	.+28     	; 0x177f8 <printer_close+0x48>
    {
        if(plot.error)
   177dc:	80 91 a8 19 	lds	r24, 0x19A8	; 0x8019a8 <plot+0x8>
   177e0:	88 23       	and	r24, r24
   177e2:	51 f0       	breq	.+20     	; 0x177f8 <printer_close+0x48>
            printf("ERROR durring write\n");
   177e4:	84 ea       	ldi	r24, 0xA4	; 164
   177e6:	9e e2       	ldi	r25, 0x2E	; 46
   177e8:	a0 e0       	ldi	r26, 0x00	; 0
   177ea:	ed b7       	in	r30, 0x3d	; 61
   177ec:	fe b7       	in	r31, 0x3e	; 62
   177ee:	81 83       	std	Z+1, r24	; 0x01
   177f0:	92 83       	std	Z+2, r25	; 0x02
   177f2:	a3 83       	std	Z+3, r26	; 0x03
   177f4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    }

    if(plot.fp)
   177f8:	80 91 a9 19 	lds	r24, 0x19A9	; 0x8019a9 <plot+0x9>
   177fc:	90 91 aa 19 	lds	r25, 0x19AA	; 0x8019aa <plot+0xa>
   17800:	00 97       	sbiw	r24, 0x00	; 0
   17802:	e1 f0       	breq	.+56     	; 0x1783c <printer_close+0x8c>
    {
        fclose(plot.fp);
   17804:	0e 94 e0 7b 	call	0xf7c0	; 0xf7c0 <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17808:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1780c:	85 ff       	sbrs	r24, 5
   1780e:	16 c0       	rjmp	.+44     	; 0x1783c <printer_close+0x8c>
            printf("\nDONE: %08ld\n",plot.count);
   17810:	80 91 a0 19 	lds	r24, 0x19A0	; 0x8019a0 <plot>
   17814:	90 91 a1 19 	lds	r25, 0x19A1	; 0x8019a1 <plot+0x1>
   17818:	a0 91 a2 19 	lds	r26, 0x19A2	; 0x8019a2 <plot+0x2>
   1781c:	b0 91 a3 19 	lds	r27, 0x19A3	; 0x8019a3 <plot+0x3>
   17820:	ed b7       	in	r30, 0x3d	; 61
   17822:	fe b7       	in	r31, 0x3e	; 62
   17824:	84 83       	std	Z+4, r24	; 0x04
   17826:	95 83       	std	Z+5, r25	; 0x05
   17828:	a6 83       	std	Z+6, r26	; 0x06
   1782a:	b7 83       	std	Z+7, r27	; 0x07
   1782c:	86 e9       	ldi	r24, 0x96	; 150
   1782e:	9e e2       	ldi	r25, 0x2E	; 46
   17830:	a0 e0       	ldi	r26, 0x00	; 0
   17832:	81 83       	std	Z+1, r24	; 0x01
   17834:	92 83       	std	Z+2, r25	; 0x02
   17836:	a3 83       	std	Z+3, r26	; 0x03
   17838:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    }

    if(plot.buf)
   1783c:	80 91 ab 19 	lds	r24, 0x19AB	; 0x8019ab <plot+0xb>
   17840:	90 91 ac 19 	lds	r25, 0x19AC	; 0x8019ac <plot+0xc>
   17844:	00 97       	sbiw	r24, 0x00	; 0
   17846:	11 f0       	breq	.+4      	; 0x1784c <printer_close+0x9c>
        safefree(plot.buf);
   17848:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <safefree>
    printer_init();
   1784c:	44 df       	rcall	.-376    	; 0x176d6 <printer_init>
}
   1784e:	ad b7       	in	r26, 0x3d	; 61
   17850:	be b7       	in	r27, 0x3e	; 62
   17852:	17 96       	adiw	r26, 0x07	; 7
   17854:	0f b6       	in	r0, 0x3f	; 63
   17856:	f8 94       	cli
   17858:	be bf       	out	0x3e, r27	; 62
   1785a:	0f be       	out	0x3f, r0	; 63
   1785c:	ad bf       	out	0x3d, r26	; 61
   1785e:	08 95       	ret

00017860 <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   17860:	ad e5       	ldi	r26, 0x5D	; 93
   17862:	b0 e0       	ldi	r27, 0x00	; 0
   17864:	e6 e3       	ldi	r30, 0x36	; 54
   17866:	fc eb       	ldi	r31, 0xBC	; 188
   17868:	0c 94 68 e3 	jmp	0x1c6d0	; 0x1c6d0 <__prologue_saves__+0x18>
   1786c:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   1786e:	89 2b       	or	r24, r25
   17870:	09 f0       	breq	.+2      	; 0x17874 <printer_open+0x14>
   17872:	4f c0       	rjmp	.+158    	; 0x17912 <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   17874:	be 01       	movw	r22, r28
   17876:	6e 5a       	subi	r22, 0xAE	; 174
   17878:	7f 4f       	sbci	r23, 0xFF	; 255
   1787a:	80 e0       	ldi	r24, 0x00	; 0
   1787c:	90 e0       	ldi	r25, 0x00	; 0
   1787e:	0e 94 cc 31 	call	0x6398	; 0x6398 <clock_gettime>
        seconds = ts.tv_sec;
   17882:	66 96       	adiw	r28, 0x16	; 22
   17884:	8c ad       	ldd	r24, Y+60	; 0x3c
   17886:	9d ad       	ldd	r25, Y+61	; 0x3d
   17888:	ae ad       	ldd	r26, Y+62	; 0x3e
   1788a:	bf ad       	ldd	r27, Y+63	; 0x3f
   1788c:	66 97       	sbiw	r28, 0x16	; 22
   1788e:	6e 96       	adiw	r28, 0x1e	; 30
   17890:	8c af       	std	Y+60, r24	; 0x3c
   17892:	9d af       	std	Y+61, r25	; 0x3d
   17894:	ae af       	std	Y+62, r26	; 0x3e
   17896:	bf af       	std	Y+63, r27	; 0x3f
   17898:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   1789a:	ce 01       	movw	r24, r28
   1789c:	86 5a       	subi	r24, 0xA6	; 166
   1789e:	9f 4f       	sbci	r25, 0xFF	; 255
   178a0:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <gmtime>
   178a4:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   178a6:	fc 01       	movw	r30, r24
   178a8:	e6 80       	ldd	r14, Z+6	; 0x06
   178aa:	f7 80       	ldd	r15, Z+7	; 0x07
   178ac:	80 85       	ldd	r24, Z+8	; 0x08
   178ae:	91 85       	ldd	r25, Z+9	; 0x09
   178b0:	0e 94 92 34 	call	0x6924	; 0x6924 <tm_mon_to_ascii>
   178b4:	f8 01       	movw	r30, r16
   178b6:	20 81       	ld	r18, Z
   178b8:	31 81       	ldd	r19, Z+1	; 0x01
   178ba:	ed b7       	in	r30, 0x3d	; 61
   178bc:	fe b7       	in	r31, 0x3e	; 62
   178be:	31 8b       	std	Z+17, r19	; 0x11
   178c0:	20 8b       	std	Z+16, r18	; 0x10
   178c2:	f8 01       	movw	r30, r16
   178c4:	22 81       	ldd	r18, Z+2	; 0x02
   178c6:	33 81       	ldd	r19, Z+3	; 0x03
   178c8:	ed b7       	in	r30, 0x3d	; 61
   178ca:	fe b7       	in	r31, 0x3e	; 62
   178cc:	37 87       	std	Z+15, r19	; 0x0f
   178ce:	26 87       	std	Z+14, r18	; 0x0e
   178d0:	f8 01       	movw	r30, r16
   178d2:	24 81       	ldd	r18, Z+4	; 0x04
   178d4:	35 81       	ldd	r19, Z+5	; 0x05
   178d6:	ed b7       	in	r30, 0x3d	; 61
   178d8:	fe b7       	in	r31, 0x3e	; 62
   178da:	35 87       	std	Z+13, r19	; 0x0d
   178dc:	24 87       	std	Z+12, r18	; 0x0c
   178de:	f8 01       	movw	r30, r16
   178e0:	22 85       	ldd	r18, Z+10	; 0x0a
   178e2:	33 85       	ldd	r19, Z+11	; 0x0b
   178e4:	24 59       	subi	r18, 0x94	; 148
   178e6:	38 4f       	sbci	r19, 0xF8	; 248
   178e8:	ed b7       	in	r30, 0x3d	; 61
   178ea:	fe b7       	in	r31, 0x3e	; 62
   178ec:	33 87       	std	Z+11, r19	; 0x0b
   178ee:	22 87       	std	Z+10, r18	; 0x0a
   178f0:	91 87       	std	Z+9, r25	; 0x09
   178f2:	80 87       	std	Z+8, r24	; 0x08
   178f4:	f7 82       	std	Z+7, r15	; 0x07
   178f6:	e6 82       	std	Z+6, r14	; 0x06
   178f8:	8b ed       	ldi	r24, 0xDB	; 219
   178fa:	9e e2       	ldi	r25, 0x2E	; 46
   178fc:	a0 e0       	ldi	r26, 0x00	; 0
   178fe:	83 83       	std	Z+3, r24	; 0x03
   17900:	94 83       	std	Z+4, r25	; 0x04
   17902:	a5 83       	std	Z+5, r26	; 0x05
   17904:	8e 01       	movw	r16, r28
   17906:	0e 5e       	subi	r16, 0xEE	; 238
   17908:	1f 4f       	sbci	r17, 0xFF	; 255
   1790a:	12 83       	std	Z+2, r17	; 0x02
   1790c:	01 83       	std	Z+1, r16	; 0x01
   1790e:	0e 94 fa 44 	call	0x89f4	; 0x89f4 <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17912:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17916:	85 ff       	sbrs	r24, 5
   17918:	0c c0       	rjmp	.+24     	; 0x17932 <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   1791a:	ed b7       	in	r30, 0x3d	; 61
   1791c:	fe b7       	in	r31, 0x3e	; 62
   1791e:	15 83       	std	Z+5, r17	; 0x05
   17920:	04 83       	std	Z+4, r16	; 0x04
   17922:	85 ec       	ldi	r24, 0xC5	; 197
   17924:	9e e2       	ldi	r25, 0x2E	; 46
   17926:	a0 e0       	ldi	r26, 0x00	; 0
   17928:	81 83       	std	Z+1, r24	; 0x01
   1792a:	92 83       	std	Z+2, r25	; 0x02
   1792c:	a3 83       	std	Z+3, r26	; 0x03
   1792e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    plot.fp = fopen(ptr,"wb");
   17932:	6c e0       	ldi	r22, 0x0C	; 12
   17934:	79 e0       	ldi	r23, 0x09	; 9
   17936:	c8 01       	movw	r24, r16
   17938:	0e 94 36 7d 	call	0xfa6c	; 0xfa6c <fopen>
   1793c:	90 93 aa 19 	sts	0x19AA, r25	; 0x8019aa <plot+0xa>
   17940:	80 93 a9 19 	sts	0x19A9, r24	; 0x8019a9 <plot+0x9>
    if(plot.fp == NULL)
   17944:	89 2b       	or	r24, r25
   17946:	b9 f4       	brne	.+46     	; 0x17976 <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17948:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1794c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17950:	81 72       	andi	r24, 0x21	; 33
   17952:	99 27       	eor	r25, r25
   17954:	89 2b       	or	r24, r25
   17956:	11 f1       	breq	.+68     	; 0x1799c <printer_open+0x13c>
        {
            perror("open failed");
   17958:	87 ea       	ldi	r24, 0xA7	; 167
   1795a:	9d e0       	ldi	r25, 0x0D	; 13
   1795c:	0e 94 67 77 	call	0xeece	; 0xeece <perror>
            printf("exiting...\n");
   17960:	89 eb       	ldi	r24, 0xB9	; 185
   17962:	9e e2       	ldi	r25, 0x2E	; 46
   17964:	a0 e0       	ldi	r26, 0x00	; 0
   17966:	ed b7       	in	r30, 0x3d	; 61
   17968:	fe b7       	in	r31, 0x3e	; 62
   1796a:	81 83       	std	Z+1, r24	; 0x01
   1796c:	92 83       	std	Z+2, r25	; 0x02
   1796e:	a3 83       	std	Z+3, r26	; 0x03
   17970:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   17974:	13 c0       	rjmp	.+38     	; 0x1799c <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   17976:	61 e0       	ldi	r22, 0x01	; 1
   17978:	70 e0       	ldi	r23, 0x00	; 0
   1797a:	81 e0       	ldi	r24, 0x01	; 1
   1797c:	92 e0       	ldi	r25, 0x02	; 2
   1797e:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <safecalloc>
   17982:	90 93 ac 19 	sts	0x19AC, r25	; 0x8019ac <plot+0xc>
   17986:	80 93 ab 19 	sts	0x19AB, r24	; 0x8019ab <plot+0xb>
    if(plot.buf == NULL)
   1798a:	89 2b       	or	r24, r25
   1798c:	09 f4       	brne	.+2      	; 0x17990 <printer_open+0x130>
        printer_close();
   1798e:	10 df       	rcall	.-480    	; 0x177b0 <printer_close>
    plot.size = 512;
   17990:	80 e0       	ldi	r24, 0x00	; 0
   17992:	92 e0       	ldi	r25, 0x02	; 2
   17994:	90 93 a7 19 	sts	0x19A7, r25	; 0x8019a7 <plot+0x7>
   17998:	80 93 a6 19 	sts	0x19A6, r24	; 0x8019a6 <plot+0x6>
}
   1799c:	c3 5a       	subi	r28, 0xA3	; 163
   1799e:	df 4f       	sbci	r29, 0xFF	; 255
   179a0:	e6 e0       	ldi	r30, 0x06	; 6
   179a2:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

000179a6 <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   179a6:	cf 93       	push	r28
   179a8:	df 93       	push	r29
   179aa:	ad b7       	in	r26, 0x3d	; 61
   179ac:	be b7       	in	r27, 0x3e	; 62
   179ae:	17 97       	sbiw	r26, 0x07	; 7
   179b0:	0f b6       	in	r0, 0x3f	; 63
   179b2:	f8 94       	cli
   179b4:	be bf       	out	0x3e, r27	; 62
   179b6:	0f be       	out	0x3f, r0	; 63
   179b8:	ad bf       	out	0x3d, r26	; 61
   179ba:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   179bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   179c0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   179c4:	81 72       	andi	r24, 0x21	; 33
   179c6:	99 27       	eor	r25, r25
   179c8:	89 2b       	or	r24, r25
   179ca:	c1 f0       	breq	.+48     	; 0x179fc <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   179cc:	80 91 a0 19 	lds	r24, 0x19A0	; 0x8019a0 <plot>
   179d0:	30 91 a1 19 	lds	r19, 0x19A1	; 0x8019a1 <plot+0x1>
   179d4:	20 91 a2 19 	lds	r18, 0x19A2	; 0x8019a2 <plot+0x2>
   179d8:	90 91 a3 19 	lds	r25, 0x19A3	; 0x8019a3 <plot+0x3>
   179dc:	81 11       	cpse	r24, r1
   179de:	0e c0       	rjmp	.+28     	; 0x179fc <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   179e0:	ed b7       	in	r30, 0x3d	; 61
   179e2:	fe b7       	in	r31, 0x3e	; 62
   179e4:	84 83       	std	Z+4, r24	; 0x04
   179e6:	35 83       	std	Z+5, r19	; 0x05
   179e8:	26 83       	std	Z+6, r18	; 0x06
   179ea:	97 83       	std	Z+7, r25	; 0x07
   179ec:	8e e6       	ldi	r24, 0x6E	; 110
   179ee:	9e e2       	ldi	r25, 0x2E	; 46
   179f0:	a0 e0       	ldi	r26, 0x00	; 0
   179f2:	81 83       	std	Z+1, r24	; 0x01
   179f4:	92 83       	std	Z+2, r25	; 0x02
   179f6:	a3 83       	std	Z+3, r26	; 0x03
   179f8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   179fc:	ce 01       	movw	r24, r28
   179fe:	88 27       	eor	r24, r24
   17a00:	97 7f       	andi	r25, 0xF7	; 247
   17a02:	89 2b       	or	r24, r25
   17a04:	41 f0       	breq	.+16     	; 0x17a16 <printer_buffer+0x70>
    {
        if( receive_plot_flush() )
   17a06:	75 de       	rcall	.-790    	; 0x176f2 <receive_plot_flush>
   17a08:	89 2b       	or	r24, r25
   17a0a:	09 f4       	brne	.+2      	; 0x17a0e <printer_buffer+0x68>
   17a0c:	3f c0       	rjmp	.+126    	; 0x17a8c <printer_buffer+0xe6>
            plot.error = 1;
   17a0e:	81 e0       	ldi	r24, 0x01	; 1
   17a10:	80 93 a8 19 	sts	0x19A8, r24	; 0x8019a8 <plot+0x8>
   17a14:	3b c0       	rjmp	.+118    	; 0x17a8c <printer_buffer+0xe6>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   17a16:	20 91 ab 19 	lds	r18, 0x19AB	; 0x8019ab <plot+0xb>
   17a1a:	30 91 ac 19 	lds	r19, 0x19AC	; 0x8019ac <plot+0xc>
   17a1e:	80 91 a4 19 	lds	r24, 0x19A4	; 0x8019a4 <plot+0x4>
   17a22:	90 91 a5 19 	lds	r25, 0x19A5	; 0x8019a5 <plot+0x5>
   17a26:	ac 01       	movw	r20, r24
   17a28:	4f 5f       	subi	r20, 0xFF	; 255
   17a2a:	5f 4f       	sbci	r21, 0xFF	; 255
   17a2c:	50 93 a5 19 	sts	0x19A5, r21	; 0x8019a5 <plot+0x5>
   17a30:	40 93 a4 19 	sts	0x19A4, r20	; 0x8019a4 <plot+0x4>
   17a34:	f9 01       	movw	r30, r18
   17a36:	e8 0f       	add	r30, r24
   17a38:	f9 1f       	adc	r31, r25
   17a3a:	c0 83       	st	Z, r28
        plot.count++;
   17a3c:	80 91 a0 19 	lds	r24, 0x19A0	; 0x8019a0 <plot>
   17a40:	90 91 a1 19 	lds	r25, 0x19A1	; 0x8019a1 <plot+0x1>
   17a44:	a0 91 a2 19 	lds	r26, 0x19A2	; 0x8019a2 <plot+0x2>
   17a48:	b0 91 a3 19 	lds	r27, 0x19A3	; 0x8019a3 <plot+0x3>
   17a4c:	01 96       	adiw	r24, 0x01	; 1
   17a4e:	a1 1d       	adc	r26, r1
   17a50:	b1 1d       	adc	r27, r1
   17a52:	80 93 a0 19 	sts	0x19A0, r24	; 0x8019a0 <plot>
   17a56:	90 93 a1 19 	sts	0x19A1, r25	; 0x8019a1 <plot+0x1>
   17a5a:	a0 93 a2 19 	sts	0x19A2, r26	; 0x8019a2 <plot+0x2>
   17a5e:	b0 93 a3 19 	sts	0x19A3, r27	; 0x8019a3 <plot+0x3>

        if(plot.ind >= plot.size)
   17a62:	20 91 a4 19 	lds	r18, 0x19A4	; 0x8019a4 <plot+0x4>
   17a66:	30 91 a5 19 	lds	r19, 0x19A5	; 0x8019a5 <plot+0x5>
   17a6a:	80 91 a6 19 	lds	r24, 0x19A6	; 0x8019a6 <plot+0x6>
   17a6e:	90 91 a7 19 	lds	r25, 0x19A7	; 0x8019a7 <plot+0x7>
   17a72:	28 17       	cp	r18, r24
   17a74:	39 07       	cpc	r19, r25
        {
            if( receive_plot_flush() < 0 )
   17a76:	54 f0       	brlt	.+20     	; 0x17a8c <printer_buffer+0xe6>
   17a78:	3c de       	rcall	.-904    	; 0x176f2 <receive_plot_flush>
   17a7a:	97 ff       	sbrs	r25, 7
   17a7c:	03 c0       	rjmp	.+6      	; 0x17a84 <printer_buffer+0xde>
                plot.error = 1;
   17a7e:	81 e0       	ldi	r24, 0x01	; 1
   17a80:	80 93 a8 19 	sts	0x19A8, r24	; 0x8019a8 <plot+0x8>
            plot.ind  = 0;
   17a84:	10 92 a5 19 	sts	0x19A5, r1	; 0x8019a5 <plot+0x5>
   17a88:	10 92 a4 19 	sts	0x19A4, r1	; 0x8019a4 <plot+0x4>
        }
    }
}
   17a8c:	cd b7       	in	r28, 0x3d	; 61
   17a8e:	de b7       	in	r29, 0x3e	; 62
   17a90:	27 96       	adiw	r28, 0x07	; 7
   17a92:	e2 e0       	ldi	r30, 0x02	; 2
   17a94:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00017a98 <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   17a98:	cf 93       	push	r28
   17a9a:	00 d0       	rcall	.+0      	; 0x17a9c <PRINTER_COMMANDS+0x4>
   17a9c:	00 d0       	rcall	.+0      	; 0x17a9e <PRINTER_COMMANDS+0x6>
   17a9e:	1f 92       	push	r1
   17aa0:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   17aa2:	80 91 f3 1e 	lds	r24, 0x1EF3	; 0x801ef3 <listening>
   17aa6:	90 e0       	ldi	r25, 0x00	; 0
   17aa8:	0e 94 e9 8b 	call	0x117d2	; 0x117d2 <PRINTER_is_MLA>
   17aac:	89 2b       	or	r24, r25
   17aae:	69 f0       	breq	.+26     	; 0x17aca <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17ab0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17ab4:	85 ff       	sbrs	r24, 5
   17ab6:	22 c0       	rjmp	.+68     	; 0x17afc <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   17ab8:	8c 2f       	mov	r24, r28
   17aba:	90 e0       	ldi	r25, 0x00	; 0
   17abc:	ed b7       	in	r30, 0x3d	; 61
   17abe:	fe b7       	in	r31, 0x3e	; 62
   17ac0:	95 83       	std	Z+5, r25	; 0x05
   17ac2:	84 83       	std	Z+4, r24	; 0x04
   17ac4:	82 e5       	ldi	r24, 0x52	; 82
   17ac6:	9e e2       	ldi	r25, 0x2E	; 46
   17ac8:	13 c0       	rjmp	.+38     	; 0x17af0 <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   17aca:	80 91 f1 1e 	lds	r24, 0x1EF1	; 0x801ef1 <talking>
   17ace:	90 e0       	ldi	r25, 0x00	; 0
   17ad0:	0e 94 fa 8b 	call	0x117f4	; 0x117f4 <PRINTER_is_MTA>
   17ad4:	89 2b       	or	r24, r25
   17ad6:	91 f0       	breq	.+36     	; 0x17afc <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17ad8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17adc:	85 ff       	sbrs	r24, 5
   17ade:	0e c0       	rjmp	.+28     	; 0x17afc <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   17ae0:	8c 2f       	mov	r24, r28
   17ae2:	90 e0       	ldi	r25, 0x00	; 0
   17ae4:	ed b7       	in	r30, 0x3d	; 61
   17ae6:	fe b7       	in	r31, 0x3e	; 62
   17ae8:	95 83       	std	Z+5, r25	; 0x05
   17aea:	84 83       	std	Z+4, r24	; 0x04
   17aec:	88 e3       	ldi	r24, 0x38	; 56
   17aee:	9e e2       	ldi	r25, 0x2E	; 46
   17af0:	a0 e0       	ldi	r26, 0x00	; 0
   17af2:	81 83       	std	Z+1, r24	; 0x01
   17af4:	92 83       	std	Z+2, r25	; 0x02
   17af6:	a3 83       	std	Z+3, r26	; 0x03
   17af8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
        return(0);
    }
    return(0);
}
   17afc:	80 e0       	ldi	r24, 0x00	; 0
   17afe:	90 e0       	ldi	r25, 0x00	; 0
   17b00:	0f 90       	pop	r0
   17b02:	0f 90       	pop	r0
   17b04:	0f 90       	pop	r0
   17b06:	0f 90       	pop	r0
   17b08:	0f 90       	pop	r0
   17b0a:	cf 91       	pop	r28
   17b0c:	08 95       	ret

00017b0e <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   17b0e:	0f 93       	push	r16
   17b10:	1f 93       	push	r17
   17b12:	da 01       	movw	r26, r20
   17b14:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   17b16:	b7 fd       	sbrc	r27, 7
   17b18:	0b c0       	rjmp	.+22     	; 0x17b30 <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   17b1a:	fd 01       	movw	r30, r26
   17b1c:	e6 0f       	add	r30, r22
   17b1e:	f7 1f       	adc	r31, r23
   17b20:	e8 0f       	add	r30, r24
   17b22:	f9 1f       	adc	r31, r25
   17b24:	00 83       	st	Z, r16
        val >>= 8;
   17b26:	01 2f       	mov	r16, r17
   17b28:	12 2f       	mov	r17, r18
   17b2a:	23 2f       	mov	r18, r19
   17b2c:	33 27       	eor	r19, r19
   17b2e:	f2 cf       	rjmp	.-28     	; 0x17b14 <V2B_MSB+0x6>
    }
}
   17b30:	1f 91       	pop	r17
   17b32:	0f 91       	pop	r16
   17b34:	08 95       	ret

00017b36 <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   17b36:	0f 93       	push	r16
   17b38:	1f 93       	push	r17
   17b3a:	fc 01       	movw	r30, r24
   17b3c:	e6 0f       	add	r30, r22
   17b3e:	f7 1f       	adc	r31, r23
   17b40:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   17b42:	cf 01       	movw	r24, r30
   17b44:	86 1b       	sub	r24, r22
   17b46:	97 0b       	sbc	r25, r23
   17b48:	84 17       	cp	r24, r20
   17b4a:	95 07       	cpc	r25, r21
   17b4c:	34 f4       	brge	.+12     	; 0x17b5a <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   17b4e:	01 93       	st	Z+, r16
        val >>= 8;
   17b50:	01 2f       	mov	r16, r17
   17b52:	12 2f       	mov	r17, r18
   17b54:	23 2f       	mov	r18, r19
   17b56:	33 27       	eor	r19, r19
   17b58:	f4 cf       	rjmp	.-24     	; 0x17b42 <V2B_LSB+0xc>
    }
}
   17b5a:	1f 91       	pop	r17
   17b5c:	0f 91       	pop	r16
   17b5e:	08 95       	ret

00017b60 <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   17b60:	cf 92       	push	r12
   17b62:	df 92       	push	r13
   17b64:	ef 92       	push	r14
   17b66:	ff 92       	push	r15
   17b68:	fc 01       	movw	r30, r24
   17b6a:	e6 0f       	add	r30, r22
   17b6c:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   17b6e:	60 e0       	ldi	r22, 0x00	; 0
   17b70:	70 e0       	ldi	r23, 0x00	; 0
   17b72:	cb 01       	movw	r24, r22
   17b74:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   17b76:	9f 01       	movw	r18, r30
   17b78:	2a 1b       	sub	r18, r26
   17b7a:	3b 0b       	sbc	r19, r27
   17b7c:	24 17       	cp	r18, r20
   17b7e:	35 07       	cpc	r19, r21
   17b80:	4c f4       	brge	.+18     	; 0x17b94 <B2V_MSB+0x34>
    {
        val <<= 8;
   17b82:	cc 24       	eor	r12, r12
   17b84:	d6 2e       	mov	r13, r22
   17b86:	e7 2e       	mov	r14, r23
   17b88:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   17b8a:	21 91       	ld	r18, Z+
   17b8c:	c7 01       	movw	r24, r14
   17b8e:	b6 01       	movw	r22, r12
   17b90:	62 2b       	or	r22, r18
   17b92:	f1 cf       	rjmp	.-30     	; 0x17b76 <B2V_MSB+0x16>
    }
    return(val);
}
   17b94:	ff 90       	pop	r15
   17b96:	ef 90       	pop	r14
   17b98:	df 90       	pop	r13
   17b9a:	cf 90       	pop	r12
   17b9c:	08 95       	ret

00017b9e <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   17b9e:	cf 92       	push	r12
   17ba0:	df 92       	push	r13
   17ba2:	ef 92       	push	r14
   17ba4:	ff 92       	push	r15
   17ba6:	9c 01       	movw	r18, r24
   17ba8:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   17baa:	60 e0       	ldi	r22, 0x00	; 0
   17bac:	70 e0       	ldi	r23, 0x00	; 0
   17bae:	cb 01       	movw	r24, r22
   17bb0:	41 50       	subi	r20, 0x01	; 1
   17bb2:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   17bb4:	57 fd       	sbrc	r21, 7
   17bb6:	0e c0       	rjmp	.+28     	; 0x17bd4 <B2V_LSB+0x36>
    {
        val <<= 8;
   17bb8:	cc 24       	eor	r12, r12
   17bba:	d6 2e       	mov	r13, r22
   17bbc:	e7 2e       	mov	r14, r23
   17bbe:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   17bc0:	fa 01       	movw	r30, r20
   17bc2:	ea 0f       	add	r30, r26
   17bc4:	fb 1f       	adc	r31, r27
   17bc6:	e2 0f       	add	r30, r18
   17bc8:	f3 1f       	adc	r31, r19
   17bca:	e0 81       	ld	r30, Z
   17bcc:	c7 01       	movw	r24, r14
   17bce:	b6 01       	movw	r22, r12
   17bd0:	6e 2b       	or	r22, r30
   17bd2:	ee cf       	rjmp	.-36     	; 0x17bb0 <B2V_LSB+0x12>
    }
    return(val);
}
   17bd4:	ff 90       	pop	r15
   17bd6:	ef 90       	pop	r14
   17bd8:	df 90       	pop	r13
   17bda:	cf 90       	pop	r12
   17bdc:	08 95       	ret

00017bde <lif_help>:
            return( (lifdir_t *) &LIF->DIR );

// Skip purged records
    }
    return( NULL );
}
   17bde:	cf 93       	push	r28
   17be0:	df 93       	push	r29
   17be2:	00 d0       	rcall	.+0      	; 0x17be4 <lif_help+0x6>
   17be4:	1f 92       	push	r1
   17be6:	ec 01       	movw	r28, r24
   17be8:	86 e1       	ldi	r24, 0x16	; 22
   17bea:	93 e4       	ldi	r25, 0x43	; 67
   17bec:	a0 e0       	ldi	r26, 0x00	; 0
   17bee:	ed b7       	in	r30, 0x3d	; 61
   17bf0:	fe b7       	in	r31, 0x3e	; 62
   17bf2:	81 83       	std	Z+1, r24	; 0x01
   17bf4:	92 83       	std	Z+2, r25	; 0x02
   17bf6:	a3 83       	std	Z+3, r26	; 0x03
   17bf8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   17bfc:	cd 2b       	or	r28, r29
   17bfe:	51 f0       	breq	.+20     	; 0x17c14 <lif_help+0x36>
   17c00:	82 e5       	ldi	r24, 0x52	; 82
   17c02:	91 e4       	ldi	r25, 0x41	; 65
   17c04:	a0 e0       	ldi	r26, 0x00	; 0
   17c06:	ed b7       	in	r30, 0x3d	; 61
   17c08:	fe b7       	in	r31, 0x3e	; 62
   17c0a:	81 83       	std	Z+1, r24	; 0x01
   17c0c:	92 83       	std	Z+2, r25	; 0x02
   17c0e:	a3 83       	std	Z+3, r26	; 0x03
   17c10:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   17c14:	cd b7       	in	r28, 0x3d	; 61
   17c16:	de b7       	in	r29, 0x3e	; 62
   17c18:	23 96       	adiw	r28, 0x03	; 3
   17c1a:	e2 e0       	ldi	r30, 0x02	; 2
   17c1c:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00017c20 <lif_calloc>:
   17c20:	cf 92       	push	r12
   17c22:	df 92       	push	r13
   17c24:	ef 92       	push	r14
   17c26:	ff 92       	push	r15
   17c28:	cf 93       	push	r28
   17c2a:	df 93       	push	r29
   17c2c:	ad b7       	in	r26, 0x3d	; 61
   17c2e:	be b7       	in	r27, 0x3e	; 62
   17c30:	17 97       	sbiw	r26, 0x07	; 7
   17c32:	0f b6       	in	r0, 0x3f	; 63
   17c34:	f8 94       	cli
   17c36:	be bf       	out	0x3e, r27	; 62
   17c38:	0f be       	out	0x3f, r0	; 63
   17c3a:	ad bf       	out	0x3d, r26	; 61
   17c3c:	6b 01       	movw	r12, r22
   17c3e:	7c 01       	movw	r14, r24
   17c40:	61 e0       	ldi	r22, 0x01	; 1
   17c42:	70 e0       	ldi	r23, 0x00	; 0
   17c44:	c6 01       	movw	r24, r12
   17c46:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <safecalloc>
   17c4a:	ec 01       	movw	r28, r24
   17c4c:	89 2b       	or	r24, r25
   17c4e:	71 f4       	brne	.+28     	; 0x17c6c <lif_calloc+0x4c>
   17c50:	ed b7       	in	r30, 0x3d	; 61
   17c52:	fe b7       	in	r31, 0x3e	; 62
   17c54:	c4 82       	std	Z+4, r12	; 0x04
   17c56:	d5 82       	std	Z+5, r13	; 0x05
   17c58:	e6 82       	std	Z+6, r14	; 0x06
   17c5a:	f7 82       	std	Z+7, r15	; 0x07
   17c5c:	88 e0       	ldi	r24, 0x08	; 8
   17c5e:	91 e4       	ldi	r25, 0x41	; 65
   17c60:	a0 e0       	ldi	r26, 0x00	; 0
   17c62:	81 83       	std	Z+1, r24	; 0x01
   17c64:	92 83       	std	Z+2, r25	; 0x02
   17c66:	a3 83       	std	Z+3, r26	; 0x03
   17c68:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   17c6c:	ce 01       	movw	r24, r28
   17c6e:	ad b7       	in	r26, 0x3d	; 61
   17c70:	be b7       	in	r27, 0x3e	; 62
   17c72:	17 96       	adiw	r26, 0x07	; 7
   17c74:	0f b6       	in	r0, 0x3f	; 63
   17c76:	f8 94       	cli
   17c78:	be bf       	out	0x3e, r27	; 62
   17c7a:	0f be       	out	0x3f, r0	; 63
   17c7c:	ad bf       	out	0x3d, r26	; 61
   17c7e:	df 91       	pop	r29
   17c80:	cf 91       	pop	r28
   17c82:	ff 90       	pop	r15
   17c84:	ef 90       	pop	r14
   17c86:	df 90       	pop	r13
   17c88:	cf 90       	pop	r12
   17c8a:	08 95       	ret

00017c8c <lif_free>:
   17c8c:	00 d0       	rcall	.+0      	; 0x17c8e <lif_free+0x2>
   17c8e:	1f 92       	push	r1
   17c90:	00 97       	sbiw	r24, 0x00	; 0
   17c92:	59 f4       	brne	.+22     	; 0x17caa <lif_free+0x1e>
   17c94:	80 ef       	ldi	r24, 0xF0	; 240
   17c96:	90 e4       	ldi	r25, 0x40	; 64
   17c98:	a0 e0       	ldi	r26, 0x00	; 0
   17c9a:	ed b7       	in	r30, 0x3d	; 61
   17c9c:	fe b7       	in	r31, 0x3e	; 62
   17c9e:	81 83       	std	Z+1, r24	; 0x01
   17ca0:	92 83       	std	Z+2, r25	; 0x02
   17ca2:	a3 83       	std	Z+3, r26	; 0x03
   17ca4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   17ca8:	02 c0       	rjmp	.+4      	; 0x17cae <lif_free+0x22>
   17caa:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <safefree>
   17cae:	0f 90       	pop	r0
   17cb0:	0f 90       	pop	r0
   17cb2:	0f 90       	pop	r0
   17cb4:	08 95       	ret

00017cb6 <lif_stralloc>:
   17cb6:	0f 93       	push	r16
   17cb8:	1f 93       	push	r17
   17cba:	cf 93       	push	r28
   17cbc:	df 93       	push	r29
   17cbe:	ec 01       	movw	r28, r24
   17cc0:	fc 01       	movw	r30, r24
   17cc2:	01 90       	ld	r0, Z+
   17cc4:	00 20       	and	r0, r0
   17cc6:	e9 f7       	brne	.-6      	; 0x17cc2 <lif_stralloc+0xc>
   17cc8:	bf 01       	movw	r22, r30
   17cca:	68 1b       	sub	r22, r24
   17ccc:	79 0b       	sbc	r23, r25
   17cce:	6d 5f       	subi	r22, 0xFD	; 253
   17cd0:	7f 4f       	sbci	r23, 0xFF	; 255
   17cd2:	07 2e       	mov	r0, r23
   17cd4:	00 0c       	add	r0, r0
   17cd6:	88 0b       	sbc	r24, r24
   17cd8:	99 0b       	sbc	r25, r25
   17cda:	a2 df       	rcall	.-188    	; 0x17c20 <lif_calloc>
   17cdc:	8c 01       	movw	r16, r24
   17cde:	00 97       	sbiw	r24, 0x00	; 0
   17ce0:	19 f0       	breq	.+6      	; 0x17ce8 <lif_stralloc+0x32>
   17ce2:	be 01       	movw	r22, r28
   17ce4:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <strcpy>
   17ce8:	c8 01       	movw	r24, r16
   17cea:	df 91       	pop	r29
   17cec:	cf 91       	pop	r28
   17cee:	1f 91       	pop	r17
   17cf0:	0f 91       	pop	r16
   17cf2:	08 95       	ret

00017cf4 <lif_open>:
   17cf4:	ef 92       	push	r14
   17cf6:	ff 92       	push	r15
   17cf8:	0f 93       	push	r16
   17cfa:	1f 93       	push	r17
   17cfc:	cf 93       	push	r28
   17cfe:	df 93       	push	r29
   17d00:	ad b7       	in	r26, 0x3d	; 61
   17d02:	be b7       	in	r27, 0x3e	; 62
   17d04:	17 97       	sbiw	r26, 0x07	; 7
   17d06:	0f b6       	in	r0, 0x3f	; 63
   17d08:	f8 94       	cli
   17d0a:	be bf       	out	0x3e, r27	; 62
   17d0c:	0f be       	out	0x3f, r0	; 63
   17d0e:	ad bf       	out	0x3d, r26	; 61
   17d10:	8c 01       	movw	r16, r24
   17d12:	7b 01       	movw	r14, r22
   17d14:	0e 94 36 7d 	call	0xfa6c	; 0xfa6c <fopen>
   17d18:	ec 01       	movw	r28, r24
   17d1a:	89 2b       	or	r24, r25
   17d1c:	71 f4       	brne	.+28     	; 0x17d3a <lif_open+0x46>
   17d1e:	ed b7       	in	r30, 0x3d	; 61
   17d20:	fe b7       	in	r31, 0x3e	; 62
   17d22:	f7 82       	std	Z+7, r15	; 0x07
   17d24:	e6 82       	std	Z+6, r14	; 0x06
   17d26:	15 83       	std	Z+5, r17	; 0x05
   17d28:	04 83       	std	Z+4, r16	; 0x04
   17d2a:	8b ec       	ldi	r24, 0xCB	; 203
   17d2c:	90 e4       	ldi	r25, 0x40	; 64
   17d2e:	a0 e0       	ldi	r26, 0x00	; 0
   17d30:	81 83       	std	Z+1, r24	; 0x01
   17d32:	92 83       	std	Z+2, r25	; 0x02
   17d34:	a3 83       	std	Z+3, r26	; 0x03
   17d36:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   17d3a:	ce 01       	movw	r24, r28
   17d3c:	cd b7       	in	r28, 0x3d	; 61
   17d3e:	de b7       	in	r29, 0x3e	; 62
   17d40:	27 96       	adiw	r28, 0x07	; 7
   17d42:	e6 e0       	ldi	r30, 0x06	; 6
   17d44:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

00017d48 <lif_stat>:
   17d48:	0f 93       	push	r16
   17d4a:	1f 93       	push	r17
   17d4c:	cf 93       	push	r28
   17d4e:	df 93       	push	r29
   17d50:	00 d0       	rcall	.+0      	; 0x17d52 <lif_stat+0xa>
   17d52:	00 d0       	rcall	.+0      	; 0x17d54 <lif_stat+0xc>
   17d54:	1f 92       	push	r1
   17d56:	8c 01       	movw	r16, r24
   17d58:	d6 2f       	mov	r29, r22
   17d5a:	c7 2f       	mov	r28, r23
   17d5c:	0e 94 3b 78 	call	0xf076	; 0xf076 <stat>
   17d60:	97 ff       	sbrs	r25, 7
   17d62:	0f c0       	rjmp	.+30     	; 0x17d82 <lif_stat+0x3a>
   17d64:	ed b7       	in	r30, 0x3d	; 61
   17d66:	fe b7       	in	r31, 0x3e	; 62
   17d68:	15 83       	std	Z+5, r17	; 0x05
   17d6a:	04 83       	std	Z+4, r16	; 0x04
   17d6c:	82 eb       	ldi	r24, 0xB2	; 178
   17d6e:	90 e4       	ldi	r25, 0x40	; 64
   17d70:	a0 e0       	ldi	r26, 0x00	; 0
   17d72:	81 83       	std	Z+1, r24	; 0x01
   17d74:	92 83       	std	Z+2, r25	; 0x02
   17d76:	a3 83       	std	Z+3, r26	; 0x03
   17d78:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   17d7c:	80 e0       	ldi	r24, 0x00	; 0
   17d7e:	90 e0       	ldi	r25, 0x00	; 0
   17d80:	02 c0       	rjmp	.+4      	; 0x17d86 <lif_stat+0x3e>
   17d82:	8d 2f       	mov	r24, r29
   17d84:	9c 2f       	mov	r25, r28
   17d86:	cd b7       	in	r28, 0x3d	; 61
   17d88:	de b7       	in	r29, 0x3e	; 62
   17d8a:	25 96       	adiw	r28, 0x05	; 5
   17d8c:	e4 e0       	ldi	r30, 0x04	; 4
   17d8e:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

00017d92 <lif_seek_msg>:
   17d92:	a9 e0       	ldi	r26, 0x09	; 9
   17d94:	b0 e0       	ldi	r27, 0x00	; 0
   17d96:	ef ec       	ldi	r30, 0xCF	; 207
   17d98:	fe eb       	ldi	r31, 0xBE	; 190
   17d9a:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
   17d9e:	ec 01       	movw	r28, r24
   17da0:	6a 01       	movw	r12, r20
   17da2:	7b 01       	movw	r14, r22
   17da4:	89 01       	movw	r16, r18
   17da6:	0e 94 75 79 	call	0xf2ea	; 0xf2ea <ftell>
   17daa:	6c 15       	cp	r22, r12
   17dac:	7d 05       	cpc	r23, r13
   17dae:	8e 05       	cpc	r24, r14
   17db0:	9f 05       	cpc	r25, r15
   17db2:	19 f4       	brne	.+6      	; 0x17dba <lif_seek_msg+0x28>
   17db4:	81 e0       	ldi	r24, 0x01	; 1
   17db6:	90 e0       	ldi	r25, 0x00	; 0
   17db8:	1b c0       	rjmp	.+54     	; 0x17df0 <lif_seek_msg+0x5e>
   17dba:	20 e0       	ldi	r18, 0x00	; 0
   17dbc:	30 e0       	ldi	r19, 0x00	; 0
   17dbe:	b7 01       	movw	r22, r14
   17dc0:	a6 01       	movw	r20, r12
   17dc2:	ce 01       	movw	r24, r28
   17dc4:	0e 94 f8 79 	call	0xf3f0	; 0xf3f0 <fseek>
   17dc8:	97 ff       	sbrs	r25, 7
   17dca:	f4 cf       	rjmp	.-24     	; 0x17db4 <lif_seek_msg+0x22>
   17dcc:	ed b7       	in	r30, 0x3d	; 61
   17dce:	fe b7       	in	r31, 0x3e	; 62
   17dd0:	c6 82       	std	Z+6, r12	; 0x06
   17dd2:	d7 82       	std	Z+7, r13	; 0x07
   17dd4:	e0 86       	std	Z+8, r14	; 0x08
   17dd6:	f1 86       	std	Z+9, r15	; 0x09
   17dd8:	15 83       	std	Z+5, r17	; 0x05
   17dda:	04 83       	std	Z+4, r16	; 0x04
   17ddc:	81 e9       	ldi	r24, 0x91	; 145
   17dde:	90 e4       	ldi	r25, 0x40	; 64
   17de0:	a0 e0       	ldi	r26, 0x00	; 0
   17de2:	81 83       	std	Z+1, r24	; 0x01
   17de4:	92 83       	std	Z+2, r25	; 0x02
   17de6:	a3 83       	std	Z+3, r26	; 0x03
   17de8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   17dec:	80 e0       	ldi	r24, 0x00	; 0
   17dee:	90 e0       	ldi	r25, 0x00	; 0
   17df0:	cd b7       	in	r28, 0x3d	; 61
   17df2:	de b7       	in	r29, 0x3e	; 62
   17df4:	29 96       	adiw	r28, 0x09	; 9
   17df6:	e8 e0       	ldi	r30, 0x08	; 8
   17df8:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

00017dfc <lif_read>:
   17dfc:	af e0       	ldi	r26, 0x0F	; 15
   17dfe:	b0 e0       	ldi	r27, 0x00	; 0
   17e00:	e4 e0       	ldi	r30, 0x04	; 4
   17e02:	ff eb       	ldi	r31, 0xBF	; 191
   17e04:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__prologue_saves__+0xc>
   17e08:	ec 01       	movw	r28, r24
   17e0a:	7b 01       	movw	r14, r22
   17e0c:	49 01       	movw	r8, r18
   17e0e:	5a 01       	movw	r10, r20
   17e10:	28 81       	ld	r18, Y
   17e12:	39 81       	ldd	r19, Y+1	; 0x01
   17e14:	b5 01       	movw	r22, r10
   17e16:	a4 01       	movw	r20, r8
   17e18:	8a 81       	ldd	r24, Y+2	; 0x02
   17e1a:	9b 81       	ldd	r25, Y+3	; 0x03
   17e1c:	ba df       	rcall	.-140    	; 0x17d92 <lif_seek_msg>
   17e1e:	89 2b       	or	r24, r25
   17e20:	a1 f1       	breq	.+104    	; 0x17e8a <lif_read+0x8e>
   17e22:	2a 81       	ldd	r18, Y+2	; 0x02
   17e24:	3b 81       	ldd	r19, Y+3	; 0x03
   17e26:	a8 01       	movw	r20, r16
   17e28:	61 e0       	ldi	r22, 0x01	; 1
   17e2a:	70 e0       	ldi	r23, 0x00	; 0
   17e2c:	c7 01       	movw	r24, r14
   17e2e:	0e 94 8c 7a 	call	0xf518	; 0xf518 <fread>
   17e32:	6c 01       	movw	r12, r24
   17e34:	e1 2c       	mov	r14, r1
   17e36:	f1 2c       	mov	r15, r1
   17e38:	b8 01       	movw	r22, r16
   17e3a:	01 2e       	mov	r0, r17
   17e3c:	00 0c       	add	r0, r0
   17e3e:	88 0b       	sbc	r24, r24
   17e40:	99 0b       	sbc	r25, r25
   17e42:	c6 16       	cp	r12, r22
   17e44:	d7 06       	cpc	r13, r23
   17e46:	e8 06       	cpc	r14, r24
   17e48:	f9 06       	cpc	r15, r25
   17e4a:	29 f1       	breq	.+74     	; 0x17e96 <lif_read+0x9a>
   17e4c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17e50:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17e54:	92 ff       	sbrs	r25, 2
   17e56:	1d c0       	rjmp	.+58     	; 0x17e92 <lif_read+0x96>
   17e58:	ed b7       	in	r30, 0x3d	; 61
   17e5a:	fe b7       	in	r31, 0x3e	; 62
   17e5c:	17 87       	std	Z+15, r17	; 0x0f
   17e5e:	06 87       	std	Z+14, r16	; 0x0e
   17e60:	c2 86       	std	Z+10, r12	; 0x0a
   17e62:	d3 86       	std	Z+11, r13	; 0x0b
   17e64:	e4 86       	std	Z+12, r14	; 0x0c
   17e66:	f5 86       	std	Z+13, r15	; 0x0d
   17e68:	86 82       	std	Z+6, r8	; 0x06
   17e6a:	97 82       	std	Z+7, r9	; 0x07
   17e6c:	a0 86       	std	Z+8, r10	; 0x08
   17e6e:	b1 86       	std	Z+9, r11	; 0x09
   17e70:	88 81       	ld	r24, Y
   17e72:	99 81       	ldd	r25, Y+1	; 0x01
   17e74:	95 83       	std	Z+5, r25	; 0x05
   17e76:	84 83       	std	Z+4, r24	; 0x04
   17e78:	85 e5       	ldi	r24, 0x55	; 85
   17e7a:	90 e4       	ldi	r25, 0x40	; 64
   17e7c:	a0 e0       	ldi	r26, 0x00	; 0
   17e7e:	81 83       	std	Z+1, r24	; 0x01
   17e80:	92 83       	std	Z+2, r25	; 0x02
   17e82:	a3 83       	std	Z+3, r26	; 0x03
   17e84:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   17e88:	04 c0       	rjmp	.+8      	; 0x17e92 <lif_read+0x96>
   17e8a:	60 e0       	ldi	r22, 0x00	; 0
   17e8c:	70 e0       	ldi	r23, 0x00	; 0
   17e8e:	cb 01       	movw	r24, r22
   17e90:	02 c0       	rjmp	.+4      	; 0x17e96 <lif_read+0x9a>
   17e92:	c7 01       	movw	r24, r14
   17e94:	b6 01       	movw	r22, r12
   17e96:	cd b7       	in	r28, 0x3d	; 61
   17e98:	de b7       	in	r29, 0x3e	; 62
   17e9a:	2f 96       	adiw	r28, 0x0f	; 15
   17e9c:	ec e0       	ldi	r30, 0x0C	; 12
   17e9e:	0c 94 7e e3 	jmp	0x1c6fc	; 0x1c6fc <__epilogue_restores__+0xc>

00017ea2 <lif_write>:
   17ea2:	8f 92       	push	r8
   17ea4:	9f 92       	push	r9
   17ea6:	af 92       	push	r10
   17ea8:	bf 92       	push	r11
   17eaa:	ef 92       	push	r14
   17eac:	ff 92       	push	r15
   17eae:	0f 93       	push	r16
   17eb0:	1f 93       	push	r17
   17eb2:	cf 93       	push	r28
   17eb4:	df 93       	push	r29
   17eb6:	ad b7       	in	r26, 0x3d	; 61
   17eb8:	be b7       	in	r27, 0x3e	; 62
   17eba:	1d 97       	sbiw	r26, 0x0d	; 13
   17ebc:	0f b6       	in	r0, 0x3f	; 63
   17ebe:	f8 94       	cli
   17ec0:	be bf       	out	0x3e, r27	; 62
   17ec2:	0f be       	out	0x3f, r0	; 63
   17ec4:	ad bf       	out	0x3d, r26	; 61
   17ec6:	7c 01       	movw	r14, r24
   17ec8:	eb 01       	movw	r28, r22
   17eca:	49 01       	movw	r8, r18
   17ecc:	5a 01       	movw	r10, r20
   17ece:	fc 01       	movw	r30, r24
   17ed0:	20 81       	ld	r18, Z
   17ed2:	31 81       	ldd	r19, Z+1	; 0x01
   17ed4:	b5 01       	movw	r22, r10
   17ed6:	a4 01       	movw	r20, r8
   17ed8:	82 81       	ldd	r24, Z+2	; 0x02
   17eda:	93 81       	ldd	r25, Z+3	; 0x03
   17edc:	5a df       	rcall	.-332    	; 0x17d92 <lif_seek_msg>
   17ede:	00 97       	sbiw	r24, 0x00	; 0
   17ee0:	81 f1       	breq	.+96     	; 0x17f42 <lif_write+0xa0>
   17ee2:	f7 01       	movw	r30, r14
   17ee4:	22 81       	ldd	r18, Z+2	; 0x02
   17ee6:	33 81       	ldd	r19, Z+3	; 0x03
   17ee8:	a8 01       	movw	r20, r16
   17eea:	61 e0       	ldi	r22, 0x01	; 1
   17eec:	70 e0       	ldi	r23, 0x00	; 0
   17eee:	ce 01       	movw	r24, r28
   17ef0:	0e 94 5e 7b 	call	0xf6bc	; 0xf6bc <fwrite>
   17ef4:	ec 01       	movw	r28, r24
   17ef6:	08 17       	cp	r16, r24
   17ef8:	19 07       	cpc	r17, r25
   17efa:	01 f1       	breq	.+64     	; 0x17f3c <lif_write+0x9a>
   17efc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17f00:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17f04:	92 ff       	sbrs	r25, 2
   17f06:	1c c0       	rjmp	.+56     	; 0x17f40 <lif_write+0x9e>
   17f08:	ed b7       	in	r30, 0x3d	; 61
   17f0a:	fe b7       	in	r31, 0x3e	; 62
   17f0c:	15 87       	std	Z+13, r17	; 0x0d
   17f0e:	04 87       	std	Z+12, r16	; 0x0c
   17f10:	d3 87       	std	Z+11, r29	; 0x0b
   17f12:	c2 87       	std	Z+10, r28	; 0x0a
   17f14:	86 82       	std	Z+6, r8	; 0x06
   17f16:	97 82       	std	Z+7, r9	; 0x07
   17f18:	a0 86       	std	Z+8, r10	; 0x08
   17f1a:	b1 86       	std	Z+9, r11	; 0x09
   17f1c:	f7 01       	movw	r30, r14
   17f1e:	80 81       	ld	r24, Z
   17f20:	91 81       	ldd	r25, Z+1	; 0x01
   17f22:	ed b7       	in	r30, 0x3d	; 61
   17f24:	fe b7       	in	r31, 0x3e	; 62
   17f26:	95 83       	std	Z+5, r25	; 0x05
   17f28:	84 83       	std	Z+4, r24	; 0x04
   17f2a:	88 e1       	ldi	r24, 0x18	; 24
   17f2c:	90 e4       	ldi	r25, 0x40	; 64
   17f2e:	a0 e0       	ldi	r26, 0x00	; 0
   17f30:	81 83       	std	Z+1, r24	; 0x01
   17f32:	92 83       	std	Z+2, r25	; 0x02
   17f34:	a3 83       	std	Z+3, r26	; 0x03
   17f36:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   17f3a:	02 c0       	rjmp	.+4      	; 0x17f40 <lif_write+0x9e>
   17f3c:	c8 01       	movw	r24, r16
   17f3e:	01 c0       	rjmp	.+2      	; 0x17f42 <lif_write+0xa0>
   17f40:	ce 01       	movw	r24, r28
   17f42:	ad b7       	in	r26, 0x3d	; 61
   17f44:	be b7       	in	r27, 0x3e	; 62
   17f46:	1d 96       	adiw	r26, 0x0d	; 13
   17f48:	0f b6       	in	r0, 0x3f	; 63
   17f4a:	f8 94       	cli
   17f4c:	be bf       	out	0x3e, r27	; 62
   17f4e:	0f be       	out	0x3f, r0	; 63
   17f50:	ad bf       	out	0x3d, r26	; 61
   17f52:	df 91       	pop	r29
   17f54:	cf 91       	pop	r28
   17f56:	1f 91       	pop	r17
   17f58:	0f 91       	pop	r16
   17f5a:	ff 90       	pop	r15
   17f5c:	ef 90       	pop	r14
   17f5e:	bf 90       	pop	r11
   17f60:	af 90       	pop	r10
   17f62:	9f 90       	pop	r9
   17f64:	8f 90       	pop	r8
   17f66:	08 95       	ret

00017f68 <lif_chars>:
   17f68:	80 32       	cpi	r24, 0x20	; 32
   17f6a:	91 05       	cpc	r25, r1
   17f6c:	e1 f0       	breq	.+56     	; 0x17fa6 <lif_chars+0x3e>
   17f6e:	9c 01       	movw	r18, r24
   17f70:	21 56       	subi	r18, 0x61	; 97
   17f72:	31 09       	sbc	r19, r1
   17f74:	2a 31       	cpi	r18, 0x1A	; 26
   17f76:	31 05       	cpc	r19, r1
   17f78:	10 f4       	brcc	.+4      	; 0x17f7e <lif_chars+0x16>
   17f7a:	80 97       	sbiw	r24, 0x20	; 32
   17f7c:	08 95       	ret
   17f7e:	9c 01       	movw	r18, r24
   17f80:	21 54       	subi	r18, 0x41	; 65
   17f82:	31 09       	sbc	r19, r1
   17f84:	2a 31       	cpi	r18, 0x1A	; 26
   17f86:	31 05       	cpc	r19, r1
   17f88:	c8 f0       	brcs	.+50     	; 0x17fbc <lif_chars+0x54>
   17f8a:	16 16       	cp	r1, r22
   17f8c:	17 06       	cpc	r1, r23
   17f8e:	74 f4       	brge	.+28     	; 0x17fac <lif_chars+0x44>
   17f90:	2f 5e       	subi	r18, 0xEF	; 239
   17f92:	3f 4f       	sbci	r19, 0xFF	; 255
   17f94:	2a 30       	cpi	r18, 0x0A	; 10
   17f96:	31 05       	cpc	r19, r1
   17f98:	88 f0       	brcs	.+34     	; 0x17fbc <lif_chars+0x54>
   17f9a:	8f 35       	cpi	r24, 0x5F	; 95
   17f9c:	91 05       	cpc	r25, r1
   17f9e:	49 f0       	breq	.+18     	; 0x17fb2 <lif_chars+0x4a>
   17fa0:	8d 97       	sbiw	r24, 0x2d	; 45
   17fa2:	21 f4       	brne	.+8      	; 0x17fac <lif_chars+0x44>
   17fa4:	09 c0       	rjmp	.+18     	; 0x17fb8 <lif_chars+0x50>
   17fa6:	80 e2       	ldi	r24, 0x20	; 32
   17fa8:	90 e0       	ldi	r25, 0x00	; 0
   17faa:	08 95       	ret
   17fac:	80 e0       	ldi	r24, 0x00	; 0
   17fae:	90 e0       	ldi	r25, 0x00	; 0
   17fb0:	08 95       	ret
   17fb2:	8f e5       	ldi	r24, 0x5F	; 95
   17fb4:	90 e0       	ldi	r25, 0x00	; 0
   17fb6:	08 95       	ret
   17fb8:	8d e2       	ldi	r24, 0x2D	; 45
   17fba:	90 e0       	ldi	r25, 0x00	; 0
   17fbc:	08 95       	ret

00017fbe <lif_B2S>:
   17fbe:	a0 e0       	ldi	r26, 0x00	; 0
   17fc0:	b0 e0       	ldi	r27, 0x00	; 0
   17fc2:	e5 ee       	ldi	r30, 0xE5	; 229
   17fc4:	ff eb       	ldi	r31, 0xBF	; 191
   17fc6:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__prologue_saves__+0xc>
   17fca:	5c 01       	movw	r10, r24
   17fcc:	6b 01       	movw	r12, r22
   17fce:	ea 01       	movw	r28, r20
   17fd0:	4c 01       	movw	r8, r24
   17fd2:	ee 24       	eor	r14, r14
   17fd4:	e3 94       	inc	r14
   17fd6:	f1 2c       	mov	r15, r1
   17fd8:	00 e0       	ldi	r16, 0x00	; 0
   17fda:	10 e0       	ldi	r17, 0x00	; 0
   17fdc:	0c 17       	cp	r16, r28
   17fde:	1d 07       	cpc	r17, r29
   17fe0:	6c f4       	brge	.+26     	; 0x17ffc <lif_B2S+0x3e>
   17fe2:	f4 01       	movw	r30, r8
   17fe4:	81 91       	ld	r24, Z+
   17fe6:	4f 01       	movw	r8, r30
   17fe8:	b8 01       	movw	r22, r16
   17fea:	90 e0       	ldi	r25, 0x00	; 0
   17fec:	bd df       	rcall	.-134    	; 0x17f68 <lif_chars>
   17fee:	89 2b       	or	r24, r25
   17ff0:	11 f4       	brne	.+4      	; 0x17ff6 <lif_B2S+0x38>
   17ff2:	e1 2c       	mov	r14, r1
   17ff4:	f1 2c       	mov	r15, r1
   17ff6:	0f 5f       	subi	r16, 0xFF	; 255
   17ff8:	1f 4f       	sbci	r17, 0xFF	; 255
   17ffa:	f0 cf       	rjmp	.-32     	; 0x17fdc <lif_B2S+0x1e>
   17ffc:	d6 01       	movw	r26, r12
   17ffe:	f5 01       	movw	r30, r10
   18000:	cf 01       	movw	r24, r30
   18002:	8a 19       	sub	r24, r10
   18004:	9b 09       	sbc	r25, r11
   18006:	8c 17       	cp	r24, r28
   18008:	9d 07       	cpc	r25, r29
   1800a:	1c f4       	brge	.+6      	; 0x18012 <lif_B2S+0x54>
   1800c:	81 91       	ld	r24, Z+
   1800e:	8d 93       	st	X+, r24
   18010:	f7 cf       	rjmp	.-18     	; 0x18000 <lif_B2S+0x42>
   18012:	d7 ff       	sbrs	r29, 7
   18014:	02 c0       	rjmp	.+4      	; 0x1801a <lif_B2S+0x5c>
   18016:	c0 e0       	ldi	r28, 0x00	; 0
   18018:	d0 e0       	ldi	r29, 0x00	; 0
   1801a:	cc 0d       	add	r28, r12
   1801c:	dd 1d       	adc	r29, r13
   1801e:	18 82       	st	Y, r1
   18020:	c6 01       	movw	r24, r12
   18022:	0e 94 2d 30 	call	0x605a	; 0x605a <trim_tail>
   18026:	c7 01       	movw	r24, r14
   18028:	cd b7       	in	r28, 0x3d	; 61
   1802a:	de b7       	in	r29, 0x3e	; 62
   1802c:	ec e0       	ldi	r30, 0x0C	; 12
   1802e:	0c 94 7e e3 	jmp	0x1c6fc	; 0x1c6fc <__epilogue_restores__+0xc>

00018032 <lif_checkname>:
   18032:	ef 92       	push	r14
   18034:	ff 92       	push	r15
   18036:	0f 93       	push	r16
   18038:	1f 93       	push	r17
   1803a:	cf 93       	push	r28
   1803c:	df 93       	push	r29
   1803e:	7c 01       	movw	r14, r24
   18040:	ec 01       	movw	r28, r24
   18042:	01 e0       	ldi	r16, 0x01	; 1
   18044:	10 e0       	ldi	r17, 0x00	; 0
   18046:	be 01       	movw	r22, r28
   18048:	6e 19       	sub	r22, r14
   1804a:	7f 09       	sbc	r23, r15
   1804c:	89 91       	ld	r24, Y+
   1804e:	88 23       	and	r24, r24
   18050:	39 f0       	breq	.+14     	; 0x18060 <lif_checkname+0x2e>
   18052:	90 e0       	ldi	r25, 0x00	; 0
   18054:	89 df       	rcall	.-238    	; 0x17f68 <lif_chars>
   18056:	89 2b       	or	r24, r25
   18058:	b1 f7       	brne	.-20     	; 0x18046 <lif_checkname+0x14>
   1805a:	00 e0       	ldi	r16, 0x00	; 0
   1805c:	10 e0       	ldi	r17, 0x00	; 0
   1805e:	f3 cf       	rjmp	.-26     	; 0x18046 <lif_checkname+0x14>
   18060:	c8 01       	movw	r24, r16
   18062:	cd b7       	in	r28, 0x3d	; 61
   18064:	de b7       	in	r29, 0x3e	; 62
   18066:	e6 e0       	ldi	r30, 0x06	; 6
   18068:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

0001806c <lif_S2B>:
   1806c:	fb 01       	movw	r30, r22
   1806e:	dc 01       	movw	r26, r24
   18070:	20 e0       	ldi	r18, 0x00	; 0
   18072:	30 e0       	ldi	r19, 0x00	; 0
   18074:	61 91       	ld	r22, Z+
   18076:	61 11       	cpse	r22, r1
   18078:	05 c0       	rjmp	.+10     	; 0x18084 <lif_S2B+0x18>
   1807a:	fc 01       	movw	r30, r24
   1807c:	e2 0f       	add	r30, r18
   1807e:	f3 1f       	adc	r31, r19
   18080:	60 e2       	ldi	r22, 0x20	; 32
   18082:	08 c0       	rjmp	.+16     	; 0x18094 <lif_S2B+0x28>
   18084:	24 17       	cp	r18, r20
   18086:	35 07       	cpc	r19, r21
   18088:	24 f4       	brge	.+8      	; 0x18092 <lif_S2B+0x26>
   1808a:	6d 93       	st	X+, r22
   1808c:	2f 5f       	subi	r18, 0xFF	; 255
   1808e:	3f 4f       	sbci	r19, 0xFF	; 255
   18090:	f1 cf       	rjmp	.-30     	; 0x18074 <lif_S2B+0x8>
   18092:	08 95       	ret
   18094:	9f 01       	movw	r18, r30
   18096:	28 1b       	sub	r18, r24
   18098:	39 0b       	sbc	r19, r25
   1809a:	24 17       	cp	r18, r20
   1809c:	35 07       	cpc	r19, r21
   1809e:	14 f4       	brge	.+4      	; 0x180a4 <lif_S2B+0x38>
   180a0:	61 93       	st	Z+, r22
   180a2:	f8 cf       	rjmp	.-16     	; 0x18094 <lif_S2B+0x28>
   180a4:	08 95       	ret

000180a6 <lif_fixname>:
   180a6:	a0 e0       	ldi	r26, 0x00	; 0
   180a8:	b0 e0       	ldi	r27, 0x00	; 0
   180aa:	e9 e5       	ldi	r30, 0x59	; 89
   180ac:	f0 ec       	ldi	r31, 0xC0	; 192
   180ae:	0c 94 65 e3 	jmp	0x1c6ca	; 0x1c6ca <__prologue_saves__+0x12>
   180b2:	8c 01       	movw	r16, r24
   180b4:	cb 01       	movw	r24, r22
   180b6:	7a 01       	movw	r14, r20
   180b8:	0e 94 07 76 	call	0xec0e	; 0xec0e <basename>
   180bc:	6c 01       	movw	r12, r24
   180be:	e8 01       	movw	r28, r16
   180c0:	80 e2       	ldi	r24, 0x20	; 32
   180c2:	b8 2e       	mov	r11, r24
   180c4:	be 01       	movw	r22, r28
   180c6:	60 1b       	sub	r22, r16
   180c8:	71 0b       	sbc	r23, r17
   180ca:	f6 01       	movw	r30, r12
   180cc:	81 91       	ld	r24, Z+
   180ce:	6f 01       	movw	r12, r30
   180d0:	81 11       	cpse	r24, r1
   180d2:	02 c0       	rjmp	.+4      	; 0x180d8 <lif_fixname+0x32>
   180d4:	20 e2       	ldi	r18, 0x20	; 32
   180d6:	0e c0       	rjmp	.+28     	; 0x180f4 <lif_fixname+0x4e>
   180d8:	1e 14       	cp	r1, r14
   180da:	1f 04       	cpc	r1, r15
   180dc:	dc f7       	brge	.-10     	; 0x180d4 <lif_fixname+0x2e>
   180de:	8e 32       	cpi	r24, 0x2E	; 46
   180e0:	c9 f3       	breq	.-14     	; 0x180d4 <lif_fixname+0x2e>
   180e2:	90 e0       	ldi	r25, 0x00	; 0
   180e4:	41 df       	rcall	.-382    	; 0x17f68 <lif_chars>
   180e6:	88 23       	and	r24, r24
   180e8:	11 f0       	breq	.+4      	; 0x180ee <lif_fixname+0x48>
   180ea:	88 83       	st	Y, r24
   180ec:	01 c0       	rjmp	.+2      	; 0x180f0 <lif_fixname+0x4a>
   180ee:	b8 82       	st	Y, r11
   180f0:	21 96       	adiw	r28, 0x01	; 1
   180f2:	e8 cf       	rjmp	.-48     	; 0x180c4 <lif_fixname+0x1e>
   180f4:	ce 01       	movw	r24, r28
   180f6:	80 1b       	sub	r24, r16
   180f8:	91 0b       	sbc	r25, r17
   180fa:	8e 15       	cp	r24, r14
   180fc:	9f 05       	cpc	r25, r15
   180fe:	14 f4       	brge	.+4      	; 0x18104 <lif_fixname+0x5e>
   18100:	29 93       	st	Y+, r18
   18102:	f8 cf       	rjmp	.-16     	; 0x180f4 <lif_fixname+0x4e>
   18104:	18 82       	st	Y, r1
   18106:	f8 01       	movw	r30, r16
   18108:	01 90       	ld	r0, Z+
   1810a:	00 20       	and	r0, r0
   1810c:	e9 f7       	brne	.-6      	; 0x18108 <lif_fixname+0x62>
   1810e:	cf 01       	movw	r24, r30
   18110:	01 97       	sbiw	r24, 0x01	; 1
   18112:	80 1b       	sub	r24, r16
   18114:	91 0b       	sbc	r25, r17
   18116:	cd b7       	in	r28, 0x3d	; 61
   18118:	de b7       	in	r29, 0x3e	; 62
   1811a:	e9 e0       	ldi	r30, 0x09	; 9
   1811c:	0c 94 81 e3 	jmp	0x1c702	; 0x1c702 <__epilogue_restores__+0x12>

00018120 <lif_vol2str>:
   18120:	ef 92       	push	r14
   18122:	ff 92       	push	r15
   18124:	0f 93       	push	r16
   18126:	1f 93       	push	r17
   18128:	cf 93       	push	r28
   1812a:	df 93       	push	r29
   1812c:	7c 01       	movw	r14, r24
   1812e:	eb 01       	movw	r28, r22
   18130:	fc 01       	movw	r30, r24
   18132:	04 a1       	ldd	r16, Z+36	; 0x24
   18134:	15 a1       	ldd	r17, Z+37	; 0x25
   18136:	20 e0       	ldi	r18, 0x00	; 0
   18138:	30 e0       	ldi	r19, 0x00	; 0
   1813a:	42 e0       	ldi	r20, 0x02	; 2
   1813c:	50 e0       	ldi	r21, 0x00	; 0
   1813e:	60 e0       	ldi	r22, 0x00	; 0
   18140:	70 e0       	ldi	r23, 0x00	; 0
   18142:	ce 01       	movw	r24, r28
   18144:	e4 dc       	rcall	.-1592   	; 0x17b0e <V2B_MSB>
   18146:	b7 01       	movw	r22, r14
   18148:	6a 5d       	subi	r22, 0xDA	; 218
   1814a:	7f 4f       	sbci	r23, 0xFF	; 255
   1814c:	46 e0       	ldi	r20, 0x06	; 6
   1814e:	50 e0       	ldi	r21, 0x00	; 0
   18150:	ce 01       	movw	r24, r28
   18152:	02 96       	adiw	r24, 0x02	; 2
   18154:	8b df       	rcall	.-234    	; 0x1806c <lif_S2B>
   18156:	f7 01       	movw	r30, r14
   18158:	05 a5       	ldd	r16, Z+45	; 0x2d
   1815a:	16 a5       	ldd	r17, Z+46	; 0x2e
   1815c:	27 a5       	ldd	r18, Z+47	; 0x2f
   1815e:	30 a9       	ldd	r19, Z+48	; 0x30
   18160:	44 e0       	ldi	r20, 0x04	; 4
   18162:	50 e0       	ldi	r21, 0x00	; 0
   18164:	68 e0       	ldi	r22, 0x08	; 8
   18166:	70 e0       	ldi	r23, 0x00	; 0
   18168:	ce 01       	movw	r24, r28
   1816a:	d1 dc       	rcall	.-1630   	; 0x17b0e <V2B_MSB>
   1816c:	f7 01       	movw	r30, r14
   1816e:	01 a9       	ldd	r16, Z+49	; 0x31
   18170:	12 a9       	ldd	r17, Z+50	; 0x32
   18172:	20 e0       	ldi	r18, 0x00	; 0
   18174:	30 e0       	ldi	r19, 0x00	; 0
   18176:	42 e0       	ldi	r20, 0x02	; 2
   18178:	50 e0       	ldi	r21, 0x00	; 0
   1817a:	6c e0       	ldi	r22, 0x0C	; 12
   1817c:	70 e0       	ldi	r23, 0x00	; 0
   1817e:	ce 01       	movw	r24, r28
   18180:	c6 dc       	rcall	.-1652   	; 0x17b0e <V2B_MSB>
   18182:	00 e0       	ldi	r16, 0x00	; 0
   18184:	10 e0       	ldi	r17, 0x00	; 0
   18186:	98 01       	movw	r18, r16
   18188:	42 e0       	ldi	r20, 0x02	; 2
   1818a:	50 e0       	ldi	r21, 0x00	; 0
   1818c:	6e e0       	ldi	r22, 0x0E	; 14
   1818e:	70 e0       	ldi	r23, 0x00	; 0
   18190:	ce 01       	movw	r24, r28
   18192:	bd dc       	rcall	.-1670   	; 0x17b0e <V2B_MSB>
   18194:	f7 01       	movw	r30, r14
   18196:	05 a9       	ldd	r16, Z+53	; 0x35
   18198:	16 a9       	ldd	r17, Z+54	; 0x36
   1819a:	27 a9       	ldd	r18, Z+55	; 0x37
   1819c:	30 ad       	ldd	r19, Z+56	; 0x38
   1819e:	44 e0       	ldi	r20, 0x04	; 4
   181a0:	50 e0       	ldi	r21, 0x00	; 0
   181a2:	60 e1       	ldi	r22, 0x10	; 16
   181a4:	70 e0       	ldi	r23, 0x00	; 0
   181a6:	ce 01       	movw	r24, r28
   181a8:	b2 dc       	rcall	.-1692   	; 0x17b0e <V2B_MSB>
   181aa:	f7 01       	movw	r30, r14
   181ac:	01 ad       	ldd	r16, Z+57	; 0x39
   181ae:	12 ad       	ldd	r17, Z+58	; 0x3a
   181b0:	20 e0       	ldi	r18, 0x00	; 0
   181b2:	30 e0       	ldi	r19, 0x00	; 0
   181b4:	42 e0       	ldi	r20, 0x02	; 2
   181b6:	50 e0       	ldi	r21, 0x00	; 0
   181b8:	64 e1       	ldi	r22, 0x14	; 20
   181ba:	70 e0       	ldi	r23, 0x00	; 0
   181bc:	ce 01       	movw	r24, r28
   181be:	a7 dc       	rcall	.-1714   	; 0x17b0e <V2B_MSB>
   181c0:	00 e0       	ldi	r16, 0x00	; 0
   181c2:	10 e0       	ldi	r17, 0x00	; 0
   181c4:	98 01       	movw	r18, r16
   181c6:	42 e0       	ldi	r20, 0x02	; 2
   181c8:	50 e0       	ldi	r21, 0x00	; 0
   181ca:	66 e1       	ldi	r22, 0x16	; 22
   181cc:	70 e0       	ldi	r23, 0x00	; 0
   181ce:	ce 01       	movw	r24, r28
   181d0:	9e dc       	rcall	.-1732   	; 0x17b0e <V2B_MSB>
   181d2:	f7 01       	movw	r30, r14
   181d4:	fd 96       	adiw	r30, 0x3d	; 61
   181d6:	00 81       	ld	r16, Z
   181d8:	11 81       	ldd	r17, Z+1	; 0x01
   181da:	22 81       	ldd	r18, Z+2	; 0x02
   181dc:	33 81       	ldd	r19, Z+3	; 0x03
   181de:	44 e0       	ldi	r20, 0x04	; 4
   181e0:	50 e0       	ldi	r21, 0x00	; 0
   181e2:	68 e1       	ldi	r22, 0x18	; 24
   181e4:	70 e0       	ldi	r23, 0x00	; 0
   181e6:	ce 01       	movw	r24, r28
   181e8:	92 dc       	rcall	.-1756   	; 0x17b0e <V2B_MSB>
   181ea:	f7 01       	movw	r30, r14
   181ec:	ef 5b       	subi	r30, 0xBF	; 191
   181ee:	ff 4f       	sbci	r31, 0xFF	; 255
   181f0:	00 81       	ld	r16, Z
   181f2:	11 81       	ldd	r17, Z+1	; 0x01
   181f4:	22 81       	ldd	r18, Z+2	; 0x02
   181f6:	33 81       	ldd	r19, Z+3	; 0x03
   181f8:	44 e0       	ldi	r20, 0x04	; 4
   181fa:	50 e0       	ldi	r21, 0x00	; 0
   181fc:	6c e1       	ldi	r22, 0x1C	; 28
   181fe:	70 e0       	ldi	r23, 0x00	; 0
   18200:	ce 01       	movw	r24, r28
   18202:	85 dc       	rcall	.-1782   	; 0x17b0e <V2B_MSB>
   18204:	f7 01       	movw	r30, r14
   18206:	eb 5b       	subi	r30, 0xBB	; 187
   18208:	ff 4f       	sbci	r31, 0xFF	; 255
   1820a:	00 81       	ld	r16, Z
   1820c:	11 81       	ldd	r17, Z+1	; 0x01
   1820e:	22 81       	ldd	r18, Z+2	; 0x02
   18210:	33 81       	ldd	r19, Z+3	; 0x03
   18212:	44 e0       	ldi	r20, 0x04	; 4
   18214:	50 e0       	ldi	r21, 0x00	; 0
   18216:	60 e2       	ldi	r22, 0x20	; 32
   18218:	70 e0       	ldi	r23, 0x00	; 0
   1821a:	ce 01       	movw	r24, r28
   1821c:	78 dc       	rcall	.-1808   	; 0x17b0e <V2B_MSB>
   1821e:	de 01       	movw	r26, r28
   18220:	94 96       	adiw	r26, 0x24	; 36
   18222:	f7 01       	movw	r30, r14
   18224:	e7 5b       	subi	r30, 0xB7	; 183
   18226:	ff 4f       	sbci	r31, 0xFF	; 255
   18228:	86 e0       	ldi	r24, 0x06	; 6
   1822a:	01 90       	ld	r0, Z+
   1822c:	0d 92       	st	X+, r0
   1822e:	8a 95       	dec	r24
   18230:	e1 f7       	brne	.-8      	; 0x1822a <lif_vol2str+0x10a>
   18232:	cd b7       	in	r28, 0x3d	; 61
   18234:	de b7       	in	r29, 0x3e	; 62
   18236:	e6 e0       	ldi	r30, 0x06	; 6
   18238:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

0001823c <lif_str2vol>:
   1823c:	0f 93       	push	r16
   1823e:	1f 93       	push	r17
   18240:	cf 93       	push	r28
   18242:	df 93       	push	r29
   18244:	8c 01       	movw	r16, r24
   18246:	eb 01       	movw	r28, r22
   18248:	42 e0       	ldi	r20, 0x02	; 2
   1824a:	50 e0       	ldi	r21, 0x00	; 0
   1824c:	60 e0       	ldi	r22, 0x00	; 0
   1824e:	70 e0       	ldi	r23, 0x00	; 0
   18250:	87 dc       	rcall	.-1778   	; 0x17b60 <B2V_MSB>
   18252:	7d a3       	std	Y+37, r23	; 0x25
   18254:	6c a3       	std	Y+36, r22	; 0x24
   18256:	be 01       	movw	r22, r28
   18258:	6a 5d       	subi	r22, 0xDA	; 218
   1825a:	7f 4f       	sbci	r23, 0xFF	; 255
   1825c:	46 e0       	ldi	r20, 0x06	; 6
   1825e:	50 e0       	ldi	r21, 0x00	; 0
   18260:	c8 01       	movw	r24, r16
   18262:	02 96       	adiw	r24, 0x02	; 2
   18264:	ac de       	rcall	.-680    	; 0x17fbe <lif_B2S>
   18266:	44 e0       	ldi	r20, 0x04	; 4
   18268:	50 e0       	ldi	r21, 0x00	; 0
   1826a:	68 e0       	ldi	r22, 0x08	; 8
   1826c:	70 e0       	ldi	r23, 0x00	; 0
   1826e:	c8 01       	movw	r24, r16
   18270:	77 dc       	rcall	.-1810   	; 0x17b60 <B2V_MSB>
   18272:	6d a7       	std	Y+45, r22	; 0x2d
   18274:	7e a7       	std	Y+46, r23	; 0x2e
   18276:	8f a7       	std	Y+47, r24	; 0x2f
   18278:	98 ab       	std	Y+48, r25	; 0x30
   1827a:	42 e0       	ldi	r20, 0x02	; 2
   1827c:	50 e0       	ldi	r21, 0x00	; 0
   1827e:	6c e0       	ldi	r22, 0x0C	; 12
   18280:	70 e0       	ldi	r23, 0x00	; 0
   18282:	c8 01       	movw	r24, r16
   18284:	6d dc       	rcall	.-1830   	; 0x17b60 <B2V_MSB>
   18286:	7a ab       	std	Y+50, r23	; 0x32
   18288:	69 ab       	std	Y+49, r22	; 0x31
   1828a:	42 e0       	ldi	r20, 0x02	; 2
   1828c:	50 e0       	ldi	r21, 0x00	; 0
   1828e:	6e e0       	ldi	r22, 0x0E	; 14
   18290:	70 e0       	ldi	r23, 0x00	; 0
   18292:	c8 01       	movw	r24, r16
   18294:	65 dc       	rcall	.-1846   	; 0x17b60 <B2V_MSB>
   18296:	7c ab       	std	Y+52, r23	; 0x34
   18298:	6b ab       	std	Y+51, r22	; 0x33
   1829a:	44 e0       	ldi	r20, 0x04	; 4
   1829c:	50 e0       	ldi	r21, 0x00	; 0
   1829e:	60 e1       	ldi	r22, 0x10	; 16
   182a0:	70 e0       	ldi	r23, 0x00	; 0
   182a2:	c8 01       	movw	r24, r16
   182a4:	5d dc       	rcall	.-1862   	; 0x17b60 <B2V_MSB>
   182a6:	6d ab       	std	Y+53, r22	; 0x35
   182a8:	7e ab       	std	Y+54, r23	; 0x36
   182aa:	8f ab       	std	Y+55, r24	; 0x37
   182ac:	98 af       	std	Y+56, r25	; 0x38
   182ae:	42 e0       	ldi	r20, 0x02	; 2
   182b0:	50 e0       	ldi	r21, 0x00	; 0
   182b2:	64 e1       	ldi	r22, 0x14	; 20
   182b4:	70 e0       	ldi	r23, 0x00	; 0
   182b6:	c8 01       	movw	r24, r16
   182b8:	53 dc       	rcall	.-1882   	; 0x17b60 <B2V_MSB>
   182ba:	7a af       	std	Y+58, r23	; 0x3a
   182bc:	69 af       	std	Y+57, r22	; 0x39
   182be:	42 e0       	ldi	r20, 0x02	; 2
   182c0:	50 e0       	ldi	r21, 0x00	; 0
   182c2:	66 e1       	ldi	r22, 0x16	; 22
   182c4:	70 e0       	ldi	r23, 0x00	; 0
   182c6:	c8 01       	movw	r24, r16
   182c8:	4b dc       	rcall	.-1898   	; 0x17b60 <B2V_MSB>
   182ca:	7c af       	std	Y+60, r23	; 0x3c
   182cc:	6b af       	std	Y+59, r22	; 0x3b
   182ce:	44 e0       	ldi	r20, 0x04	; 4
   182d0:	50 e0       	ldi	r21, 0x00	; 0
   182d2:	68 e1       	ldi	r22, 0x18	; 24
   182d4:	70 e0       	ldi	r23, 0x00	; 0
   182d6:	c8 01       	movw	r24, r16
   182d8:	43 dc       	rcall	.-1914   	; 0x17b60 <B2V_MSB>
   182da:	fe 01       	movw	r30, r28
   182dc:	fd 96       	adiw	r30, 0x3d	; 61
   182de:	60 83       	st	Z, r22
   182e0:	71 83       	std	Z+1, r23	; 0x01
   182e2:	82 83       	std	Z+2, r24	; 0x02
   182e4:	93 83       	std	Z+3, r25	; 0x03
   182e6:	44 e0       	ldi	r20, 0x04	; 4
   182e8:	50 e0       	ldi	r21, 0x00	; 0
   182ea:	6c e1       	ldi	r22, 0x1C	; 28
   182ec:	70 e0       	ldi	r23, 0x00	; 0
   182ee:	c8 01       	movw	r24, r16
   182f0:	37 dc       	rcall	.-1938   	; 0x17b60 <B2V_MSB>
   182f2:	fe 01       	movw	r30, r28
   182f4:	ef 5b       	subi	r30, 0xBF	; 191
   182f6:	ff 4f       	sbci	r31, 0xFF	; 255
   182f8:	60 83       	st	Z, r22
   182fa:	71 83       	std	Z+1, r23	; 0x01
   182fc:	82 83       	std	Z+2, r24	; 0x02
   182fe:	93 83       	std	Z+3, r25	; 0x03
   18300:	44 e0       	ldi	r20, 0x04	; 4
   18302:	50 e0       	ldi	r21, 0x00	; 0
   18304:	60 e2       	ldi	r22, 0x20	; 32
   18306:	70 e0       	ldi	r23, 0x00	; 0
   18308:	c8 01       	movw	r24, r16
   1830a:	2a dc       	rcall	.-1964   	; 0x17b60 <B2V_MSB>
   1830c:	fe 01       	movw	r30, r28
   1830e:	eb 5b       	subi	r30, 0xBB	; 187
   18310:	ff 4f       	sbci	r31, 0xFF	; 255
   18312:	60 83       	st	Z, r22
   18314:	71 83       	std	Z+1, r23	; 0x01
   18316:	82 83       	std	Z+2, r24	; 0x02
   18318:	93 83       	std	Z+3, r25	; 0x03
   1831a:	de 01       	movw	r26, r28
   1831c:	a7 5b       	subi	r26, 0xB7	; 183
   1831e:	bf 4f       	sbci	r27, 0xFF	; 255
   18320:	f8 01       	movw	r30, r16
   18322:	b4 96       	adiw	r30, 0x24	; 36
   18324:	86 e0       	ldi	r24, 0x06	; 6
   18326:	01 90       	ld	r0, Z+
   18328:	0d 92       	st	X+, r0
   1832a:	8a 95       	dec	r24
   1832c:	e1 f7       	brne	.-8      	; 0x18326 <lif_str2vol+0xea>
   1832e:	df 91       	pop	r29
   18330:	cf 91       	pop	r28
   18332:	1f 91       	pop	r17
   18334:	0f 91       	pop	r16
   18336:	08 95       	ret

00018338 <lif_dir2str>:
   18338:	ef 92       	push	r14
   1833a:	ff 92       	push	r15
   1833c:	0f 93       	push	r16
   1833e:	1f 93       	push	r17
   18340:	cf 93       	push	r28
   18342:	df 93       	push	r29
   18344:	ec 01       	movw	r28, r24
   18346:	7b 01       	movw	r14, r22
   18348:	bc 01       	movw	r22, r24
   1834a:	61 5b       	subi	r22, 0xB1	; 177
   1834c:	7f 4f       	sbci	r23, 0xFF	; 255
   1834e:	4a e0       	ldi	r20, 0x0A	; 10
   18350:	50 e0       	ldi	r21, 0x00	; 0
   18352:	c7 01       	movw	r24, r14
   18354:	8b de       	rcall	.-746    	; 0x1806c <lif_S2B>
   18356:	fe 01       	movw	r30, r28
   18358:	e6 5a       	subi	r30, 0xA6	; 166
   1835a:	ff 4f       	sbci	r31, 0xFF	; 255
   1835c:	00 81       	ld	r16, Z
   1835e:	11 81       	ldd	r17, Z+1	; 0x01
   18360:	20 e0       	ldi	r18, 0x00	; 0
   18362:	30 e0       	ldi	r19, 0x00	; 0
   18364:	42 e0       	ldi	r20, 0x02	; 2
   18366:	50 e0       	ldi	r21, 0x00	; 0
   18368:	6a e0       	ldi	r22, 0x0A	; 10
   1836a:	70 e0       	ldi	r23, 0x00	; 0
   1836c:	c7 01       	movw	r24, r14
   1836e:	cf db       	rcall	.-2146   	; 0x17b0e <V2B_MSB>
   18370:	fe 01       	movw	r30, r28
   18372:	e4 5a       	subi	r30, 0xA4	; 164
   18374:	ff 4f       	sbci	r31, 0xFF	; 255
   18376:	00 81       	ld	r16, Z
   18378:	11 81       	ldd	r17, Z+1	; 0x01
   1837a:	22 81       	ldd	r18, Z+2	; 0x02
   1837c:	33 81       	ldd	r19, Z+3	; 0x03
   1837e:	44 e0       	ldi	r20, 0x04	; 4
   18380:	50 e0       	ldi	r21, 0x00	; 0
   18382:	6c e0       	ldi	r22, 0x0C	; 12
   18384:	70 e0       	ldi	r23, 0x00	; 0
   18386:	c7 01       	movw	r24, r14
   18388:	c2 db       	rcall	.-2172   	; 0x17b0e <V2B_MSB>
   1838a:	fe 01       	movw	r30, r28
   1838c:	e0 5a       	subi	r30, 0xA0	; 160
   1838e:	ff 4f       	sbci	r31, 0xFF	; 255
   18390:	00 81       	ld	r16, Z
   18392:	11 81       	ldd	r17, Z+1	; 0x01
   18394:	22 81       	ldd	r18, Z+2	; 0x02
   18396:	33 81       	ldd	r19, Z+3	; 0x03
   18398:	44 e0       	ldi	r20, 0x04	; 4
   1839a:	50 e0       	ldi	r21, 0x00	; 0
   1839c:	60 e1       	ldi	r22, 0x10	; 16
   1839e:	70 e0       	ldi	r23, 0x00	; 0
   183a0:	c7 01       	movw	r24, r14
   183a2:	b5 db       	rcall	.-2198   	; 0x17b0e <V2B_MSB>
   183a4:	d7 01       	movw	r26, r14
   183a6:	54 96       	adiw	r26, 0x14	; 20
   183a8:	fe 01       	movw	r30, r28
   183aa:	ec 59       	subi	r30, 0x9C	; 156
   183ac:	ff 4f       	sbci	r31, 0xFF	; 255
   183ae:	86 e0       	ldi	r24, 0x06	; 6
   183b0:	01 90       	ld	r0, Z+
   183b2:	0d 92       	st	X+, r0
   183b4:	8a 95       	dec	r24
   183b6:	e1 f7       	brne	.-8      	; 0x183b0 <lif_dir2str+0x78>
   183b8:	fe 01       	movw	r30, r28
   183ba:	e6 59       	subi	r30, 0x96	; 150
   183bc:	ff 4f       	sbci	r31, 0xFF	; 255
   183be:	00 81       	ld	r16, Z
   183c0:	11 81       	ldd	r17, Z+1	; 0x01
   183c2:	20 e0       	ldi	r18, 0x00	; 0
   183c4:	30 e0       	ldi	r19, 0x00	; 0
   183c6:	42 e0       	ldi	r20, 0x02	; 2
   183c8:	50 e0       	ldi	r21, 0x00	; 0
   183ca:	6a e1       	ldi	r22, 0x1A	; 26
   183cc:	70 e0       	ldi	r23, 0x00	; 0
   183ce:	c7 01       	movw	r24, r14
   183d0:	9e db       	rcall	.-2244   	; 0x17b0e <V2B_MSB>
   183d2:	fe 01       	movw	r30, r28
   183d4:	e4 59       	subi	r30, 0x94	; 148
   183d6:	ff 4f       	sbci	r31, 0xFF	; 255
   183d8:	00 81       	ld	r16, Z
   183da:	11 81       	ldd	r17, Z+1	; 0x01
   183dc:	20 e0       	ldi	r18, 0x00	; 0
   183de:	30 e0       	ldi	r19, 0x00	; 0
   183e0:	42 e0       	ldi	r20, 0x02	; 2
   183e2:	50 e0       	ldi	r21, 0x00	; 0
   183e4:	6c e1       	ldi	r22, 0x1C	; 28
   183e6:	70 e0       	ldi	r23, 0x00	; 0
   183e8:	c7 01       	movw	r24, r14
   183ea:	a5 db       	rcall	.-2230   	; 0x17b36 <V2B_LSB>
   183ec:	c2 59       	subi	r28, 0x92	; 146
   183ee:	df 4f       	sbci	r29, 0xFF	; 255
   183f0:	08 81       	ld	r16, Y
   183f2:	19 81       	ldd	r17, Y+1	; 0x01
   183f4:	20 e0       	ldi	r18, 0x00	; 0
   183f6:	30 e0       	ldi	r19, 0x00	; 0
   183f8:	42 e0       	ldi	r20, 0x02	; 2
   183fa:	50 e0       	ldi	r21, 0x00	; 0
   183fc:	6e e1       	ldi	r22, 0x1E	; 30
   183fe:	70 e0       	ldi	r23, 0x00	; 0
   18400:	c7 01       	movw	r24, r14
   18402:	99 db       	rcall	.-2254   	; 0x17b36 <V2B_LSB>
   18404:	cd b7       	in	r28, 0x3d	; 61
   18406:	de b7       	in	r29, 0x3e	; 62
   18408:	e6 e0       	ldi	r30, 0x06	; 6
   1840a:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

0001840e <lif_str2dir>:
   1840e:	0f 93       	push	r16
   18410:	1f 93       	push	r17
   18412:	cf 93       	push	r28
   18414:	df 93       	push	r29
   18416:	8c 01       	movw	r16, r24
   18418:	eb 01       	movw	r28, r22
   1841a:	61 5b       	subi	r22, 0xB1	; 177
   1841c:	7f 4f       	sbci	r23, 0xFF	; 255
   1841e:	4a e0       	ldi	r20, 0x0A	; 10
   18420:	50 e0       	ldi	r21, 0x00	; 0
   18422:	cd dd       	rcall	.-1126   	; 0x17fbe <lif_B2S>
   18424:	42 e0       	ldi	r20, 0x02	; 2
   18426:	50 e0       	ldi	r21, 0x00	; 0
   18428:	6a e0       	ldi	r22, 0x0A	; 10
   1842a:	70 e0       	ldi	r23, 0x00	; 0
   1842c:	c8 01       	movw	r24, r16
   1842e:	98 db       	rcall	.-2256   	; 0x17b60 <B2V_MSB>
   18430:	fe 01       	movw	r30, r28
   18432:	e6 5a       	subi	r30, 0xA6	; 166
   18434:	ff 4f       	sbci	r31, 0xFF	; 255
   18436:	71 83       	std	Z+1, r23	; 0x01
   18438:	60 83       	st	Z, r22
   1843a:	44 e0       	ldi	r20, 0x04	; 4
   1843c:	50 e0       	ldi	r21, 0x00	; 0
   1843e:	6c e0       	ldi	r22, 0x0C	; 12
   18440:	70 e0       	ldi	r23, 0x00	; 0
   18442:	c8 01       	movw	r24, r16
   18444:	8d db       	rcall	.-2278   	; 0x17b60 <B2V_MSB>
   18446:	fe 01       	movw	r30, r28
   18448:	e4 5a       	subi	r30, 0xA4	; 164
   1844a:	ff 4f       	sbci	r31, 0xFF	; 255
   1844c:	60 83       	st	Z, r22
   1844e:	71 83       	std	Z+1, r23	; 0x01
   18450:	82 83       	std	Z+2, r24	; 0x02
   18452:	93 83       	std	Z+3, r25	; 0x03
   18454:	44 e0       	ldi	r20, 0x04	; 4
   18456:	50 e0       	ldi	r21, 0x00	; 0
   18458:	60 e1       	ldi	r22, 0x10	; 16
   1845a:	70 e0       	ldi	r23, 0x00	; 0
   1845c:	c8 01       	movw	r24, r16
   1845e:	80 db       	rcall	.-2304   	; 0x17b60 <B2V_MSB>
   18460:	fe 01       	movw	r30, r28
   18462:	e0 5a       	subi	r30, 0xA0	; 160
   18464:	ff 4f       	sbci	r31, 0xFF	; 255
   18466:	60 83       	st	Z, r22
   18468:	71 83       	std	Z+1, r23	; 0x01
   1846a:	82 83       	std	Z+2, r24	; 0x02
   1846c:	93 83       	std	Z+3, r25	; 0x03
   1846e:	de 01       	movw	r26, r28
   18470:	ac 59       	subi	r26, 0x9C	; 156
   18472:	bf 4f       	sbci	r27, 0xFF	; 255
   18474:	f8 01       	movw	r30, r16
   18476:	74 96       	adiw	r30, 0x14	; 20
   18478:	86 e0       	ldi	r24, 0x06	; 6
   1847a:	01 90       	ld	r0, Z+
   1847c:	0d 92       	st	X+, r0
   1847e:	8a 95       	dec	r24
   18480:	e1 f7       	brne	.-8      	; 0x1847a <lif_str2dir+0x6c>
   18482:	42 e0       	ldi	r20, 0x02	; 2
   18484:	50 e0       	ldi	r21, 0x00	; 0
   18486:	6a e1       	ldi	r22, 0x1A	; 26
   18488:	70 e0       	ldi	r23, 0x00	; 0
   1848a:	c8 01       	movw	r24, r16
   1848c:	69 db       	rcall	.-2350   	; 0x17b60 <B2V_MSB>
   1848e:	fe 01       	movw	r30, r28
   18490:	e6 59       	subi	r30, 0x96	; 150
   18492:	ff 4f       	sbci	r31, 0xFF	; 255
   18494:	71 83       	std	Z+1, r23	; 0x01
   18496:	60 83       	st	Z, r22
   18498:	42 e0       	ldi	r20, 0x02	; 2
   1849a:	50 e0       	ldi	r21, 0x00	; 0
   1849c:	6c e1       	ldi	r22, 0x1C	; 28
   1849e:	70 e0       	ldi	r23, 0x00	; 0
   184a0:	c8 01       	movw	r24, r16
   184a2:	7d db       	rcall	.-2310   	; 0x17b9e <B2V_LSB>
   184a4:	fe 01       	movw	r30, r28
   184a6:	e4 59       	subi	r30, 0x94	; 148
   184a8:	ff 4f       	sbci	r31, 0xFF	; 255
   184aa:	71 83       	std	Z+1, r23	; 0x01
   184ac:	60 83       	st	Z, r22
   184ae:	42 e0       	ldi	r20, 0x02	; 2
   184b0:	50 e0       	ldi	r21, 0x00	; 0
   184b2:	6e e1       	ldi	r22, 0x1E	; 30
   184b4:	70 e0       	ldi	r23, 0x00	; 0
   184b6:	c8 01       	movw	r24, r16
   184b8:	72 db       	rcall	.-2332   	; 0x17b9e <B2V_LSB>
   184ba:	c2 59       	subi	r28, 0x92	; 146
   184bc:	df 4f       	sbci	r29, 0xFF	; 255
   184be:	79 83       	std	Y+1, r23	; 0x01
   184c0:	68 83       	st	Y, r22
   184c2:	df 91       	pop	r29
   184c4:	cf 91       	pop	r28
   184c6:	1f 91       	pop	r17
   184c8:	0f 91       	pop	r16
   184ca:	08 95       	ret

000184cc <lif_BIN2BCD>:
   184cc:	6a e0       	ldi	r22, 0x0A	; 10
   184ce:	0e 94 bc e2 	call	0x1c578	; 0x1c578 <__udivmodqi4>
   184d2:	82 95       	swap	r24
   184d4:	80 7f       	andi	r24, 0xF0	; 240
   184d6:	89 2b       	or	r24, r25
   184d8:	08 95       	ret

000184da <lif_BCD2BIN>:
   184da:	28 2f       	mov	r18, r24
   184dc:	22 95       	swap	r18
   184de:	2f 70       	andi	r18, 0x0F	; 15
   184e0:	8f 70       	andi	r24, 0x0F	; 15
   184e2:	90 e0       	ldi	r25, 0x00	; 0
   184e4:	3a e0       	ldi	r19, 0x0A	; 10
   184e6:	23 9f       	mul	r18, r19
   184e8:	80 0d       	add	r24, r0
   184ea:	91 1d       	adc	r25, r1
   184ec:	11 24       	eor	r1, r1
   184ee:	08 95       	ret

000184f0 <lif_time2lifbcd>:
   184f0:	aa e1       	ldi	r26, 0x1A	; 26
   184f2:	b0 e0       	ldi	r27, 0x00	; 0
   184f4:	ee e7       	ldi	r30, 0x7E	; 126
   184f6:	f2 ec       	ldi	r31, 0xC2	; 194
   184f8:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__prologue_saves__+0x1c>
   184fc:	8b 01       	movw	r16, r22
   184fe:	9c 01       	movw	r18, r24
   18500:	6f 8b       	std	Y+23, r22	; 0x17
   18502:	78 8f       	std	Y+24, r23	; 0x18
   18504:	89 8f       	std	Y+25, r24	; 0x19
   18506:	9a 8f       	std	Y+26, r25	; 0x1a
   18508:	67 2b       	or	r22, r23
   1850a:	68 2b       	or	r22, r24
   1850c:	69 2b       	or	r22, r25
   1850e:	41 f4       	brne	.+16     	; 0x18520 <lif_time2lifbcd+0x30>
   18510:	fa 01       	movw	r30, r20
   18512:	ca 01       	movw	r24, r20
   18514:	06 96       	adiw	r24, 0x06	; 6
   18516:	11 92       	st	Z+, r1
   18518:	e8 17       	cp	r30, r24
   1851a:	f9 07       	cpc	r31, r25
   1851c:	e1 f7       	brne	.-8      	; 0x18516 <lif_time2lifbcd+0x26>
   1851e:	26 c0       	rjmp	.+76     	; 0x1856c <lif_time2lifbcd+0x7c>
   18520:	8a 01       	movw	r16, r20
   18522:	be 01       	movw	r22, r28
   18524:	6f 5f       	subi	r22, 0xFF	; 255
   18526:	7f 4f       	sbci	r23, 0xFF	; 255
   18528:	ce 01       	movw	r24, r28
   1852a:	47 96       	adiw	r24, 0x17	; 23
   1852c:	0e 94 a1 35 	call	0x6b42	; 0x6b42 <gmtime_r>
   18530:	8b 85       	ldd	r24, Y+11	; 0x0b
   18532:	9c 85       	ldd	r25, Y+12	; 0x0c
   18534:	64 e6       	ldi	r22, 0x64	; 100
   18536:	70 e0       	ldi	r23, 0x00	; 0
   18538:	0e 94 dc e2 	call	0x1c5b8	; 0x1c5b8 <__divmodhi4>
   1853c:	c7 df       	rcall	.-114    	; 0x184cc <lif_BIN2BCD>
   1853e:	f8 01       	movw	r30, r16
   18540:	80 83       	st	Z, r24
   18542:	89 85       	ldd	r24, Y+9	; 0x09
   18544:	8f 5f       	subi	r24, 0xFF	; 255
   18546:	c2 df       	rcall	.-124    	; 0x184cc <lif_BIN2BCD>
   18548:	f8 01       	movw	r30, r16
   1854a:	81 83       	std	Z+1, r24	; 0x01
   1854c:	8f 81       	ldd	r24, Y+7	; 0x07
   1854e:	be df       	rcall	.-132    	; 0x184cc <lif_BIN2BCD>
   18550:	f8 01       	movw	r30, r16
   18552:	82 83       	std	Z+2, r24	; 0x02
   18554:	8d 81       	ldd	r24, Y+5	; 0x05
   18556:	ba df       	rcall	.-140    	; 0x184cc <lif_BIN2BCD>
   18558:	f8 01       	movw	r30, r16
   1855a:	83 83       	std	Z+3, r24	; 0x03
   1855c:	8b 81       	ldd	r24, Y+3	; 0x03
   1855e:	b6 df       	rcall	.-148    	; 0x184cc <lif_BIN2BCD>
   18560:	f8 01       	movw	r30, r16
   18562:	84 83       	std	Z+4, r24	; 0x04
   18564:	89 81       	ldd	r24, Y+1	; 0x01
   18566:	b2 df       	rcall	.-156    	; 0x184cc <lif_BIN2BCD>
   18568:	f8 01       	movw	r30, r16
   1856a:	85 83       	std	Z+5, r24	; 0x05
   1856c:	6a 96       	adiw	r28, 0x1a	; 26
   1856e:	e4 e0       	ldi	r30, 0x04	; 4
   18570:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

00018574 <lif_lifbcd2time>:
   18574:	a6 e1       	ldi	r26, 0x16	; 22
   18576:	b0 e0       	ldi	r27, 0x00	; 0
   18578:	e0 ec       	ldi	r30, 0xC0	; 192
   1857a:	f2 ec       	ldi	r31, 0xC2	; 194
   1857c:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__prologue_saves__+0x10>
   18580:	8c 01       	movw	r16, r24
   18582:	7c 01       	movw	r14, r24
   18584:	5c 01       	movw	r10, r24
   18586:	26 e0       	ldi	r18, 0x06	; 6
   18588:	a2 0e       	add	r10, r18
   1858a:	b1 1c       	adc	r11, r1
   1858c:	cc 24       	eor	r12, r12
   1858e:	c3 94       	inc	r12
   18590:	d1 2c       	mov	r13, r1
   18592:	f7 01       	movw	r30, r14
   18594:	81 91       	ld	r24, Z+
   18596:	7f 01       	movw	r14, r30
   18598:	a0 df       	rcall	.-192    	; 0x184da <lif_BCD2BIN>
   1859a:	89 2b       	or	r24, r25
   1859c:	11 f0       	breq	.+4      	; 0x185a2 <lif_lifbcd2time+0x2e>
   1859e:	c1 2c       	mov	r12, r1
   185a0:	d1 2c       	mov	r13, r1
   185a2:	ea 14       	cp	r14, r10
   185a4:	fb 04       	cpc	r15, r11
   185a6:	a9 f7       	brne	.-22     	; 0x18592 <lif_lifbcd2time+0x1e>
   185a8:	c1 14       	cp	r12, r1
   185aa:	d1 04       	cpc	r13, r1
   185ac:	61 f5       	brne	.+88     	; 0x18606 <lif_lifbcd2time+0x92>
   185ae:	f8 01       	movw	r30, r16
   185b0:	80 81       	ld	r24, Z
   185b2:	93 df       	rcall	.-218    	; 0x184da <lif_BCD2BIN>
   185b4:	7c 01       	movw	r14, r24
   185b6:	f8 01       	movw	r30, r16
   185b8:	81 81       	ldd	r24, Z+1	; 0x01
   185ba:	8f df       	rcall	.-226    	; 0x184da <lif_BCD2BIN>
   185bc:	01 97       	sbiw	r24, 0x01	; 1
   185be:	f6 e4       	ldi	r31, 0x46	; 70
   185c0:	ef 16       	cp	r14, r31
   185c2:	f1 04       	cpc	r15, r1
   185c4:	1c f4       	brge	.+6      	; 0x185cc <lif_lifbcd2time+0x58>
   185c6:	24 e6       	ldi	r18, 0x64	; 100
   185c8:	e2 0e       	add	r14, r18
   185ca:	f1 1c       	adc	r15, r1
   185cc:	fc 86       	std	Y+12, r15	; 0x0c
   185ce:	eb 86       	std	Y+11, r14	; 0x0b
   185d0:	9a 87       	std	Y+10, r25	; 0x0a
   185d2:	89 87       	std	Y+9, r24	; 0x09
   185d4:	f8 01       	movw	r30, r16
   185d6:	82 81       	ldd	r24, Z+2	; 0x02
   185d8:	80 df       	rcall	.-256    	; 0x184da <lif_BCD2BIN>
   185da:	98 87       	std	Y+8, r25	; 0x08
   185dc:	8f 83       	std	Y+7, r24	; 0x07
   185de:	f8 01       	movw	r30, r16
   185e0:	83 81       	ldd	r24, Z+3	; 0x03
   185e2:	7b df       	rcall	.-266    	; 0x184da <lif_BCD2BIN>
   185e4:	9e 83       	std	Y+6, r25	; 0x06
   185e6:	8d 83       	std	Y+5, r24	; 0x05
   185e8:	f8 01       	movw	r30, r16
   185ea:	84 81       	ldd	r24, Z+4	; 0x04
   185ec:	76 df       	rcall	.-276    	; 0x184da <lif_BCD2BIN>
   185ee:	9c 83       	std	Y+4, r25	; 0x04
   185f0:	8b 83       	std	Y+3, r24	; 0x03
   185f2:	f8 01       	movw	r30, r16
   185f4:	85 81       	ldd	r24, Z+5	; 0x05
   185f6:	71 df       	rcall	.-286    	; 0x184da <lif_BCD2BIN>
   185f8:	9a 83       	std	Y+2, r25	; 0x02
   185fa:	89 83       	std	Y+1, r24	; 0x01
   185fc:	ce 01       	movw	r24, r28
   185fe:	01 96       	adiw	r24, 0x01	; 1
   18600:	0e 94 75 38 	call	0x70ea	; 0x70ea <timegm>
   18604:	03 c0       	rjmp	.+6      	; 0x1860c <lif_lifbcd2time+0x98>
   18606:	60 e0       	ldi	r22, 0x00	; 0
   18608:	70 e0       	ldi	r23, 0x00	; 0
   1860a:	cb 01       	movw	r24, r22
   1860c:	66 96       	adiw	r28, 0x16	; 22
   1860e:	ea e0       	ldi	r30, 0x0A	; 10
   18610:	0c 94 80 e3 	jmp	0x1c700	; 0x1c700 <__epilogue_restores__+0x10>

00018614 <lif_ctime_gmt>:
   18614:	a6 e1       	ldi	r26, 0x16	; 22
   18616:	b0 e0       	ldi	r27, 0x00	; 0
   18618:	e0 e1       	ldi	r30, 0x10	; 16
   1861a:	f3 ec       	ldi	r31, 0xC3	; 195
   1861c:	0c 94 6a e3 	jmp	0x1c6d4	; 0x1c6d4 <__prologue_saves__+0x1c>
   18620:	20 e2       	ldi	r18, 0x20	; 32
   18622:	ed ec       	ldi	r30, 0xCD	; 205
   18624:	f9 e1       	ldi	r31, 0x19	; 25
   18626:	df 01       	movw	r26, r30
   18628:	1d 92       	st	X+, r1
   1862a:	2a 95       	dec	r18
   1862c:	e9 f7       	brne	.-6      	; 0x18628 <lif_ctime_gmt+0x14>
   1862e:	be 01       	movw	r22, r28
   18630:	6f 5f       	subi	r22, 0xFF	; 255
   18632:	7f 4f       	sbci	r23, 0xFF	; 255
   18634:	0e 94 a1 35 	call	0x6b42	; 0x6b42 <gmtime_r>
   18638:	6d ec       	ldi	r22, 0xCD	; 205
   1863a:	79 e1       	ldi	r23, 0x19	; 25
   1863c:	0e 94 d1 3a 	call	0x75a2	; 0x75a2 <asctime_r>
   18640:	8c 01       	movw	r16, r24
   18642:	0e 94 2d 30 	call	0x605a	; 0x605a <trim_tail>
   18646:	c8 01       	movw	r24, r16
   18648:	66 96       	adiw	r28, 0x16	; 22
   1864a:	e4 e0       	ldi	r30, 0x04	; 4
   1864c:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

00018650 <lif_lifbcd2timestr>:
   18650:	a4 e0       	ldi	r26, 0x04	; 4
   18652:	b0 e0       	ldi	r27, 0x00	; 0
   18654:	ee e2       	ldi	r30, 0x2E	; 46
   18656:	f3 ec       	ldi	r31, 0xC3	; 195
   18658:	0c 94 6c e3 	jmp	0x1c6d8	; 0x1c6d8 <__prologue_saves__+0x20>
   1865c:	20 e2       	ldi	r18, 0x20	; 32
   1865e:	ed ea       	ldi	r30, 0xAD	; 173
   18660:	f9 e1       	ldi	r31, 0x19	; 25
   18662:	df 01       	movw	r26, r30
   18664:	1d 92       	st	X+, r1
   18666:	2a 95       	dec	r18
   18668:	e9 f7       	brne	.-6      	; 0x18664 <lif_lifbcd2timestr+0x14>
   1866a:	84 df       	rcall	.-248    	; 0x18574 <lif_lifbcd2time>
   1866c:	69 83       	std	Y+1, r22	; 0x01
   1866e:	7a 83       	std	Y+2, r23	; 0x02
   18670:	8b 83       	std	Y+3, r24	; 0x03
   18672:	9c 83       	std	Y+4, r25	; 0x04
   18674:	67 2b       	or	r22, r23
   18676:	68 2b       	or	r22, r24
   18678:	69 2b       	or	r22, r25
   1867a:	29 f0       	breq	.+10     	; 0x18686 <lif_lifbcd2timestr+0x36>
   1867c:	ce 01       	movw	r24, r28
   1867e:	01 96       	adiw	r24, 0x01	; 1
   18680:	c9 df       	rcall	.-110    	; 0x18614 <lif_ctime_gmt>
   18682:	bc 01       	movw	r22, r24
   18684:	02 c0       	rjmp	.+4      	; 0x1868a <lif_lifbcd2timestr+0x3a>
   18686:	64 ef       	ldi	r22, 0xF4	; 244
   18688:	75 e1       	ldi	r23, 0x15	; 21
   1868a:	8d ea       	ldi	r24, 0xAD	; 173
   1868c:	99 e1       	ldi	r25, 0x19	; 25
   1868e:	0e 94 4f 2f 	call	0x5e9e	; 0x5e9e <strcpy>
   18692:	8d ea       	ldi	r24, 0xAD	; 173
   18694:	99 e1       	ldi	r25, 0x19	; 25
   18696:	24 96       	adiw	r28, 0x04	; 4
   18698:	e2 e0       	ldi	r30, 0x02	; 2
   1869a:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

0001869e <lif_image_clear>:
   1869e:	20 e7       	ldi	r18, 0x70	; 112
   186a0:	fc 01       	movw	r30, r24
   186a2:	11 92       	st	Z+, r1
   186a4:	2a 95       	dec	r18
   186a6:	e9 f7       	brne	.-6      	; 0x186a2 <lif_image_clear+0x4>
   186a8:	08 95       	ret

000186aa <lif_dir_clear>:
   186aa:	81 5b       	subi	r24, 0xB1	; 177
   186ac:	9f 4f       	sbci	r25, 0xFF	; 255
   186ae:	21 e2       	ldi	r18, 0x21	; 33
   186b0:	fc 01       	movw	r30, r24
   186b2:	11 92       	st	Z+, r1
   186b4:	2a 95       	dec	r18
   186b6:	e9 f7       	brne	.-6      	; 0x186b2 <lif_dir_clear+0x8>
   186b8:	08 95       	ret

000186ba <lif_vol_clear>:
   186ba:	84 96       	adiw	r24, 0x24	; 36
   186bc:	2b e2       	ldi	r18, 0x2B	; 43
   186be:	fc 01       	movw	r30, r24
   186c0:	11 92       	st	Z+, r1
   186c2:	2a 95       	dec	r18
   186c4:	e9 f7       	brne	.-6      	; 0x186c0 <lif_vol_clear+0x6>
   186c6:	08 95       	ret

000186c8 <lif_dump_vol>:
   186c8:	cf 93       	push	r28
   186ca:	df 93       	push	r29
   186cc:	ad b7       	in	r26, 0x3d	; 61
   186ce:	be b7       	in	r27, 0x3e	; 62
   186d0:	17 97       	sbiw	r26, 0x07	; 7
   186d2:	0f b6       	in	r0, 0x3f	; 63
   186d4:	f8 94       	cli
   186d6:	be bf       	out	0x3e, r27	; 62
   186d8:	0f be       	out	0x3f, r0	; 63
   186da:	ad bf       	out	0x3d, r26	; 61
   186dc:	ec 01       	movw	r28, r24
   186de:	ed b7       	in	r30, 0x3d	; 61
   186e0:	fe b7       	in	r31, 0x3e	; 62
   186e2:	75 83       	std	Z+5, r23	; 0x05
   186e4:	64 83       	std	Z+4, r22	; 0x04
   186e6:	83 e1       	ldi	r24, 0x13	; 19
   186e8:	90 e4       	ldi	r25, 0x40	; 64
   186ea:	a0 e0       	ldi	r26, 0x00	; 0
   186ec:	81 83       	std	Z+1, r24	; 0x01
   186ee:	92 83       	std	Z+2, r25	; 0x02
   186f0:	a3 83       	std	Z+3, r26	; 0x03
   186f2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   186f6:	88 81       	ld	r24, Y
   186f8:	99 81       	ldd	r25, Y+1	; 0x01
   186fa:	ed b7       	in	r30, 0x3d	; 61
   186fc:	fe b7       	in	r31, 0x3e	; 62
   186fe:	95 83       	std	Z+5, r25	; 0x05
   18700:	84 83       	std	Z+4, r24	; 0x04
   18702:	89 ef       	ldi	r24, 0xF9	; 249
   18704:	9f e3       	ldi	r25, 0x3F	; 63
   18706:	a0 e0       	ldi	r26, 0x00	; 0
   18708:	81 83       	std	Z+1, r24	; 0x01
   1870a:	92 83       	std	Z+2, r25	; 0x02
   1870c:	a3 83       	std	Z+3, r26	; 0x03
   1870e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18712:	8c 81       	ldd	r24, Y+4	; 0x04
   18714:	9d 81       	ldd	r25, Y+5	; 0x05
   18716:	ae 81       	ldd	r26, Y+6	; 0x06
   18718:	bf 81       	ldd	r27, Y+7	; 0x07
   1871a:	ed b7       	in	r30, 0x3d	; 61
   1871c:	fe b7       	in	r31, 0x3e	; 62
   1871e:	84 83       	std	Z+4, r24	; 0x04
   18720:	95 83       	std	Z+5, r25	; 0x05
   18722:	a6 83       	std	Z+6, r26	; 0x06
   18724:	b7 83       	std	Z+7, r27	; 0x07
   18726:	8c ed       	ldi	r24, 0xDC	; 220
   18728:	9f e3       	ldi	r25, 0x3F	; 63
   1872a:	a0 e0       	ldi	r26, 0x00	; 0
   1872c:	81 83       	std	Z+1, r24	; 0x01
   1872e:	92 83       	std	Z+2, r25	; 0x02
   18730:	a3 83       	std	Z+3, r26	; 0x03
   18732:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18736:	88 85       	ldd	r24, Y+8	; 0x08
   18738:	99 85       	ldd	r25, Y+9	; 0x09
   1873a:	aa 85       	ldd	r26, Y+10	; 0x0a
   1873c:	bb 85       	ldd	r27, Y+11	; 0x0b
   1873e:	ed b7       	in	r30, 0x3d	; 61
   18740:	fe b7       	in	r31, 0x3e	; 62
   18742:	84 83       	std	Z+4, r24	; 0x04
   18744:	95 83       	std	Z+5, r25	; 0x05
   18746:	a6 83       	std	Z+6, r26	; 0x06
   18748:	b7 83       	std	Z+7, r27	; 0x07
   1874a:	8f eb       	ldi	r24, 0xBF	; 191
   1874c:	9f e3       	ldi	r25, 0x3F	; 63
   1874e:	a0 e0       	ldi	r26, 0x00	; 0
   18750:	81 83       	std	Z+1, r24	; 0x01
   18752:	92 83       	std	Z+2, r25	; 0x02
   18754:	a3 83       	std	Z+3, r26	; 0x03
   18756:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1875a:	8c 85       	ldd	r24, Y+12	; 0x0c
   1875c:	9d 85       	ldd	r25, Y+13	; 0x0d
   1875e:	ae 85       	ldd	r26, Y+14	; 0x0e
   18760:	bf 85       	ldd	r27, Y+15	; 0x0f
   18762:	ed b7       	in	r30, 0x3d	; 61
   18764:	fe b7       	in	r31, 0x3e	; 62
   18766:	84 83       	std	Z+4, r24	; 0x04
   18768:	95 83       	std	Z+5, r25	; 0x05
   1876a:	a6 83       	std	Z+6, r26	; 0x06
   1876c:	b7 83       	std	Z+7, r27	; 0x07
   1876e:	82 ea       	ldi	r24, 0xA2	; 162
   18770:	9f e3       	ldi	r25, 0x3F	; 63
   18772:	a0 e0       	ldi	r26, 0x00	; 0
   18774:	81 83       	std	Z+1, r24	; 0x01
   18776:	92 83       	std	Z+2, r25	; 0x02
   18778:	a3 83       	std	Z+3, r26	; 0x03
   1877a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1877e:	88 89       	ldd	r24, Y+16	; 0x10
   18780:	99 89       	ldd	r25, Y+17	; 0x11
   18782:	aa 89       	ldd	r26, Y+18	; 0x12
   18784:	bb 89       	ldd	r27, Y+19	; 0x13
   18786:	ed b7       	in	r30, 0x3d	; 61
   18788:	fe b7       	in	r31, 0x3e	; 62
   1878a:	84 83       	std	Z+4, r24	; 0x04
   1878c:	95 83       	std	Z+5, r25	; 0x05
   1878e:	a6 83       	std	Z+6, r26	; 0x06
   18790:	b7 83       	std	Z+7, r27	; 0x07
   18792:	85 e8       	ldi	r24, 0x85	; 133
   18794:	9f e3       	ldi	r25, 0x3F	; 63
   18796:	a0 e0       	ldi	r26, 0x00	; 0
   18798:	81 83       	std	Z+1, r24	; 0x01
   1879a:	92 83       	std	Z+2, r25	; 0x02
   1879c:	a3 83       	std	Z+3, r26	; 0x03
   1879e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   187a2:	8c 89       	ldd	r24, Y+20	; 0x14
   187a4:	9d 89       	ldd	r25, Y+21	; 0x15
   187a6:	ae 89       	ldd	r26, Y+22	; 0x16
   187a8:	bf 89       	ldd	r27, Y+23	; 0x17
   187aa:	ed b7       	in	r30, 0x3d	; 61
   187ac:	fe b7       	in	r31, 0x3e	; 62
   187ae:	84 83       	std	Z+4, r24	; 0x04
   187b0:	95 83       	std	Z+5, r25	; 0x05
   187b2:	a6 83       	std	Z+6, r26	; 0x06
   187b4:	b7 83       	std	Z+7, r27	; 0x07
   187b6:	88 e6       	ldi	r24, 0x68	; 104
   187b8:	9f e3       	ldi	r25, 0x3F	; 63
   187ba:	a0 e0       	ldi	r26, 0x00	; 0
   187bc:	81 83       	std	Z+1, r24	; 0x01
   187be:	92 83       	std	Z+2, r25	; 0x02
   187c0:	a3 83       	std	Z+3, r26	; 0x03
   187c2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   187c6:	88 8d       	ldd	r24, Y+24	; 0x18
   187c8:	99 8d       	ldd	r25, Y+25	; 0x19
   187ca:	aa 8d       	ldd	r26, Y+26	; 0x1a
   187cc:	bb 8d       	ldd	r27, Y+27	; 0x1b
   187ce:	ed b7       	in	r30, 0x3d	; 61
   187d0:	fe b7       	in	r31, 0x3e	; 62
   187d2:	84 83       	std	Z+4, r24	; 0x04
   187d4:	95 83       	std	Z+5, r25	; 0x05
   187d6:	a6 83       	std	Z+6, r26	; 0x06
   187d8:	b7 83       	std	Z+7, r27	; 0x07
   187da:	8b e4       	ldi	r24, 0x4B	; 75
   187dc:	9f e3       	ldi	r25, 0x3F	; 63
   187de:	a0 e0       	ldi	r26, 0x00	; 0
   187e0:	81 83       	std	Z+1, r24	; 0x01
   187e2:	92 83       	std	Z+2, r25	; 0x02
   187e4:	a3 83       	std	Z+3, r26	; 0x03
   187e6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   187ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
   187ec:	9d 8d       	ldd	r25, Y+29	; 0x1d
   187ee:	09 2e       	mov	r0, r25
   187f0:	00 0c       	add	r0, r0
   187f2:	aa 0b       	sbc	r26, r26
   187f4:	bb 0b       	sbc	r27, r27
   187f6:	ed b7       	in	r30, 0x3d	; 61
   187f8:	fe b7       	in	r31, 0x3e	; 62
   187fa:	84 83       	std	Z+4, r24	; 0x04
   187fc:	95 83       	std	Z+5, r25	; 0x05
   187fe:	a6 83       	std	Z+6, r26	; 0x06
   18800:	b7 83       	std	Z+7, r27	; 0x07
   18802:	8e e2       	ldi	r24, 0x2E	; 46
   18804:	9f e3       	ldi	r25, 0x3F	; 63
   18806:	a0 e0       	ldi	r26, 0x00	; 0
   18808:	81 83       	std	Z+1, r24	; 0x01
   1880a:	92 83       	std	Z+2, r25	; 0x02
   1880c:	a3 83       	std	Z+3, r26	; 0x03
   1880e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18812:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18814:	9f 8d       	ldd	r25, Y+31	; 0x1f
   18816:	09 2e       	mov	r0, r25
   18818:	00 0c       	add	r0, r0
   1881a:	aa 0b       	sbc	r26, r26
   1881c:	bb 0b       	sbc	r27, r27
   1881e:	ed b7       	in	r30, 0x3d	; 61
   18820:	fe b7       	in	r31, 0x3e	; 62
   18822:	84 83       	std	Z+4, r24	; 0x04
   18824:	95 83       	std	Z+5, r25	; 0x05
   18826:	a6 83       	std	Z+6, r26	; 0x06
   18828:	b7 83       	std	Z+7, r27	; 0x07
   1882a:	81 e1       	ldi	r24, 0x11	; 17
   1882c:	9f e3       	ldi	r25, 0x3F	; 63
   1882e:	a0 e0       	ldi	r26, 0x00	; 0
   18830:	81 83       	std	Z+1, r24	; 0x01
   18832:	92 83       	std	Z+2, r25	; 0x02
   18834:	a3 83       	std	Z+3, r26	; 0x03
   18836:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1883a:	ce 01       	movw	r24, r28
   1883c:	86 96       	adiw	r24, 0x26	; 38
   1883e:	ed b7       	in	r30, 0x3d	; 61
   18840:	fe b7       	in	r31, 0x3e	; 62
   18842:	95 83       	std	Z+5, r25	; 0x05
   18844:	84 83       	std	Z+4, r24	; 0x04
   18846:	87 ef       	ldi	r24, 0xF7	; 247
   18848:	9e e3       	ldi	r25, 0x3E	; 62
   1884a:	a0 e0       	ldi	r26, 0x00	; 0
   1884c:	81 83       	std	Z+1, r24	; 0x01
   1884e:	92 83       	std	Z+2, r25	; 0x02
   18850:	a3 83       	std	Z+3, r26	; 0x03
   18852:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18856:	8c a1       	ldd	r24, Y+36	; 0x24
   18858:	9d a1       	ldd	r25, Y+37	; 0x25
   1885a:	ed b7       	in	r30, 0x3d	; 61
   1885c:	fe b7       	in	r31, 0x3e	; 62
   1885e:	95 83       	std	Z+5, r25	; 0x05
   18860:	84 83       	std	Z+4, r24	; 0x04
   18862:	8b ed       	ldi	r24, 0xDB	; 219
   18864:	9e e3       	ldi	r25, 0x3E	; 62
   18866:	a0 e0       	ldi	r26, 0x00	; 0
   18868:	81 83       	std	Z+1, r24	; 0x01
   1886a:	92 83       	std	Z+2, r25	; 0x02
   1886c:	a3 83       	std	Z+3, r26	; 0x03
   1886e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18872:	8d a5       	ldd	r24, Y+45	; 0x2d
   18874:	9e a5       	ldd	r25, Y+46	; 0x2e
   18876:	af a5       	ldd	r26, Y+47	; 0x2f
   18878:	b8 a9       	ldd	r27, Y+48	; 0x30
   1887a:	ed b7       	in	r30, 0x3d	; 61
   1887c:	fe b7       	in	r31, 0x3e	; 62
   1887e:	84 83       	std	Z+4, r24	; 0x04
   18880:	95 83       	std	Z+5, r25	; 0x05
   18882:	a6 83       	std	Z+6, r26	; 0x06
   18884:	b7 83       	std	Z+7, r27	; 0x07
   18886:	8e eb       	ldi	r24, 0xBE	; 190
   18888:	9e e3       	ldi	r25, 0x3E	; 62
   1888a:	a0 e0       	ldi	r26, 0x00	; 0
   1888c:	81 83       	std	Z+1, r24	; 0x01
   1888e:	92 83       	std	Z+2, r25	; 0x02
   18890:	a3 83       	std	Z+3, r26	; 0x03
   18892:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18896:	8d a9       	ldd	r24, Y+53	; 0x35
   18898:	9e a9       	ldd	r25, Y+54	; 0x36
   1889a:	af a9       	ldd	r26, Y+55	; 0x37
   1889c:	b8 ad       	ldd	r27, Y+56	; 0x38
   1889e:	ed b7       	in	r30, 0x3d	; 61
   188a0:	fe b7       	in	r31, 0x3e	; 62
   188a2:	84 83       	std	Z+4, r24	; 0x04
   188a4:	95 83       	std	Z+5, r25	; 0x05
   188a6:	a6 83       	std	Z+6, r26	; 0x06
   188a8:	b7 83       	std	Z+7, r27	; 0x07
   188aa:	81 ea       	ldi	r24, 0xA1	; 161
   188ac:	9e e3       	ldi	r25, 0x3E	; 62
   188ae:	a0 e0       	ldi	r26, 0x00	; 0
   188b0:	81 83       	std	Z+1, r24	; 0x01
   188b2:	92 83       	std	Z+2, r25	; 0x02
   188b4:	a3 83       	std	Z+3, r26	; 0x03
   188b6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   188ba:	89 a9       	ldd	r24, Y+49	; 0x31
   188bc:	9a a9       	ldd	r25, Y+50	; 0x32
   188be:	ed b7       	in	r30, 0x3d	; 61
   188c0:	fe b7       	in	r31, 0x3e	; 62
   188c2:	95 83       	std	Z+5, r25	; 0x05
   188c4:	84 83       	std	Z+4, r24	; 0x04
   188c6:	85 e8       	ldi	r24, 0x85	; 133
   188c8:	9e e3       	ldi	r25, 0x3E	; 62
   188ca:	a0 e0       	ldi	r26, 0x00	; 0
   188cc:	81 83       	std	Z+1, r24	; 0x01
   188ce:	92 83       	std	Z+2, r25	; 0x02
   188d0:	a3 83       	std	Z+3, r26	; 0x03
   188d2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   188d6:	89 ad       	ldd	r24, Y+57	; 0x39
   188d8:	9a ad       	ldd	r25, Y+58	; 0x3a
   188da:	ed b7       	in	r30, 0x3d	; 61
   188dc:	fe b7       	in	r31, 0x3e	; 62
   188de:	95 83       	std	Z+5, r25	; 0x05
   188e0:	84 83       	std	Z+4, r24	; 0x04
   188e2:	89 e6       	ldi	r24, 0x69	; 105
   188e4:	9e e3       	ldi	r25, 0x3E	; 62
   188e6:	a0 e0       	ldi	r26, 0x00	; 0
   188e8:	81 83       	std	Z+1, r24	; 0x01
   188ea:	92 83       	std	Z+2, r25	; 0x02
   188ec:	a3 83       	std	Z+3, r26	; 0x03
   188ee:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   188f2:	ce 01       	movw	r24, r28
   188f4:	87 5b       	subi	r24, 0xB7	; 183
   188f6:	9f 4f       	sbci	r25, 0xFF	; 255
   188f8:	ab de       	rcall	.-682    	; 0x18650 <lif_lifbcd2timestr>
   188fa:	ed b7       	in	r30, 0x3d	; 61
   188fc:	fe b7       	in	r31, 0x3e	; 62
   188fe:	95 83       	std	Z+5, r25	; 0x05
   18900:	84 83       	std	Z+4, r24	; 0x04
   18902:	8f e4       	ldi	r24, 0x4F	; 79
   18904:	9e e3       	ldi	r25, 0x3E	; 62
   18906:	a0 e0       	ldi	r26, 0x00	; 0
   18908:	81 83       	std	Z+1, r24	; 0x01
   1890a:	92 83       	std	Z+2, r25	; 0x02
   1890c:	a3 83       	std	Z+3, r26	; 0x03
   1890e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18912:	ce 01       	movw	r24, r28
   18914:	81 5b       	subi	r24, 0xB1	; 177
   18916:	9f 4f       	sbci	r25, 0xFF	; 255
   18918:	ed b7       	in	r30, 0x3d	; 61
   1891a:	fe b7       	in	r31, 0x3e	; 62
   1891c:	95 83       	std	Z+5, r25	; 0x05
   1891e:	84 83       	std	Z+4, r24	; 0x04
   18920:	85 e3       	ldi	r24, 0x35	; 53
   18922:	9e e3       	ldi	r25, 0x3E	; 62
   18924:	a0 e0       	ldi	r26, 0x00	; 0
   18926:	81 83       	std	Z+1, r24	; 0x01
   18928:	92 83       	std	Z+2, r25	; 0x02
   1892a:	a3 83       	std	Z+3, r26	; 0x03
   1892c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18930:	fe 01       	movw	r30, r28
   18932:	e6 5a       	subi	r30, 0xA6	; 166
   18934:	ff 4f       	sbci	r31, 0xFF	; 255
   18936:	80 81       	ld	r24, Z
   18938:	91 81       	ldd	r25, Z+1	; 0x01
   1893a:	ed b7       	in	r30, 0x3d	; 61
   1893c:	fe b7       	in	r31, 0x3e	; 62
   1893e:	95 83       	std	Z+5, r25	; 0x05
   18940:	84 83       	std	Z+4, r24	; 0x04
   18942:	89 e1       	ldi	r24, 0x19	; 25
   18944:	9e e3       	ldi	r25, 0x3E	; 62
   18946:	a0 e0       	ldi	r26, 0x00	; 0
   18948:	81 83       	std	Z+1, r24	; 0x01
   1894a:	92 83       	std	Z+2, r25	; 0x02
   1894c:	a3 83       	std	Z+3, r26	; 0x03
   1894e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18952:	fe 01       	movw	r30, r28
   18954:	e6 59       	subi	r30, 0x96	; 150
   18956:	ff 4f       	sbci	r31, 0xFF	; 255
   18958:	80 81       	ld	r24, Z
   1895a:	91 81       	ldd	r25, Z+1	; 0x01
   1895c:	ed b7       	in	r30, 0x3d	; 61
   1895e:	fe b7       	in	r31, 0x3e	; 62
   18960:	95 83       	std	Z+5, r25	; 0x05
   18962:	84 83       	std	Z+4, r24	; 0x04
   18964:	8d ef       	ldi	r24, 0xFD	; 253
   18966:	9d e3       	ldi	r25, 0x3D	; 61
   18968:	a0 e0       	ldi	r26, 0x00	; 0
   1896a:	81 83       	std	Z+1, r24	; 0x01
   1896c:	92 83       	std	Z+2, r25	; 0x02
   1896e:	a3 83       	std	Z+3, r26	; 0x03
   18970:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18974:	fe 01       	movw	r30, r28
   18976:	e4 5a       	subi	r30, 0xA4	; 164
   18978:	ff 4f       	sbci	r31, 0xFF	; 255
   1897a:	80 81       	ld	r24, Z
   1897c:	91 81       	ldd	r25, Z+1	; 0x01
   1897e:	a2 81       	ldd	r26, Z+2	; 0x02
   18980:	b3 81       	ldd	r27, Z+3	; 0x03
   18982:	ed b7       	in	r30, 0x3d	; 61
   18984:	fe b7       	in	r31, 0x3e	; 62
   18986:	84 83       	std	Z+4, r24	; 0x04
   18988:	95 83       	std	Z+5, r25	; 0x05
   1898a:	a6 83       	std	Z+6, r26	; 0x06
   1898c:	b7 83       	std	Z+7, r27	; 0x07
   1898e:	80 ee       	ldi	r24, 0xE0	; 224
   18990:	9d e3       	ldi	r25, 0x3D	; 61
   18992:	a0 e0       	ldi	r26, 0x00	; 0
   18994:	81 83       	std	Z+1, r24	; 0x01
   18996:	92 83       	std	Z+2, r25	; 0x02
   18998:	a3 83       	std	Z+3, r26	; 0x03
   1899a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1899e:	fe 01       	movw	r30, r28
   189a0:	e0 5a       	subi	r30, 0xA0	; 160
   189a2:	ff 4f       	sbci	r31, 0xFF	; 255
   189a4:	80 81       	ld	r24, Z
   189a6:	91 81       	ldd	r25, Z+1	; 0x01
   189a8:	a2 81       	ldd	r26, Z+2	; 0x02
   189aa:	b3 81       	ldd	r27, Z+3	; 0x03
   189ac:	ed b7       	in	r30, 0x3d	; 61
   189ae:	fe b7       	in	r31, 0x3e	; 62
   189b0:	84 83       	std	Z+4, r24	; 0x04
   189b2:	95 83       	std	Z+5, r25	; 0x05
   189b4:	a6 83       	std	Z+6, r26	; 0x06
   189b6:	b7 83       	std	Z+7, r27	; 0x07
   189b8:	83 ec       	ldi	r24, 0xC3	; 195
   189ba:	9d e3       	ldi	r25, 0x3D	; 61
   189bc:	a0 e0       	ldi	r26, 0x00	; 0
   189be:	81 83       	std	Z+1, r24	; 0x01
   189c0:	92 83       	std	Z+2, r25	; 0x02
   189c2:	a3 83       	std	Z+3, r26	; 0x03
   189c4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   189c8:	fe 01       	movw	r30, r28
   189ca:	e4 59       	subi	r30, 0x94	; 148
   189cc:	ff 4f       	sbci	r31, 0xFF	; 255
   189ce:	80 81       	ld	r24, Z
   189d0:	91 81       	ldd	r25, Z+1	; 0x01
   189d2:	a0 e0       	ldi	r26, 0x00	; 0
   189d4:	b0 e0       	ldi	r27, 0x00	; 0
   189d6:	ed b7       	in	r30, 0x3d	; 61
   189d8:	fe b7       	in	r31, 0x3e	; 62
   189da:	84 83       	std	Z+4, r24	; 0x04
   189dc:	95 83       	std	Z+5, r25	; 0x05
   189de:	a6 83       	std	Z+6, r26	; 0x06
   189e0:	b7 83       	std	Z+7, r27	; 0x07
   189e2:	86 ea       	ldi	r24, 0xA6	; 166
   189e4:	9d e3       	ldi	r25, 0x3D	; 61
   189e6:	a0 e0       	ldi	r26, 0x00	; 0
   189e8:	81 83       	std	Z+1, r24	; 0x01
   189ea:	92 83       	std	Z+2, r25	; 0x02
   189ec:	a3 83       	std	Z+3, r26	; 0x03
   189ee:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   189f2:	fe 01       	movw	r30, r28
   189f4:	e2 59       	subi	r30, 0x92	; 146
   189f6:	ff 4f       	sbci	r31, 0xFF	; 255
   189f8:	80 81       	ld	r24, Z
   189fa:	91 81       	ldd	r25, Z+1	; 0x01
   189fc:	ed b7       	in	r30, 0x3d	; 61
   189fe:	fe b7       	in	r31, 0x3e	; 62
   18a00:	95 83       	std	Z+5, r25	; 0x05
   18a02:	84 83       	std	Z+4, r24	; 0x04
   18a04:	8a e8       	ldi	r24, 0x8A	; 138
   18a06:	9d e3       	ldi	r25, 0x3D	; 61
   18a08:	a0 e0       	ldi	r26, 0x00	; 0
   18a0a:	81 83       	std	Z+1, r24	; 0x01
   18a0c:	92 83       	std	Z+2, r25	; 0x02
   18a0e:	a3 83       	std	Z+3, r26	; 0x03
   18a10:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18a14:	ce 01       	movw	r24, r28
   18a16:	8c 59       	subi	r24, 0x9C	; 156
   18a18:	9f 4f       	sbci	r25, 0xFF	; 255
   18a1a:	1a de       	rcall	.-972    	; 0x18650 <lif_lifbcd2timestr>
   18a1c:	ed b7       	in	r30, 0x3d	; 61
   18a1e:	fe b7       	in	r31, 0x3e	; 62
   18a20:	95 83       	std	Z+5, r25	; 0x05
   18a22:	84 83       	std	Z+4, r24	; 0x04
   18a24:	80 e7       	ldi	r24, 0x70	; 112
   18a26:	9d e3       	ldi	r25, 0x3D	; 61
   18a28:	a0 e0       	ldi	r26, 0x00	; 0
   18a2a:	81 83       	std	Z+1, r24	; 0x01
   18a2c:	92 83       	std	Z+2, r25	; 0x02
   18a2e:	a3 83       	std	Z+3, r26	; 0x03
   18a30:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18a34:	8e e6       	ldi	r24, 0x6E	; 110
   18a36:	9d e3       	ldi	r25, 0x3D	; 61
   18a38:	a0 e0       	ldi	r26, 0x00	; 0
   18a3a:	ed b7       	in	r30, 0x3d	; 61
   18a3c:	fe b7       	in	r31, 0x3e	; 62
   18a3e:	81 83       	std	Z+1, r24	; 0x01
   18a40:	92 83       	std	Z+2, r25	; 0x02
   18a42:	a3 83       	std	Z+3, r26	; 0x03
   18a44:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18a48:	cd b7       	in	r28, 0x3d	; 61
   18a4a:	de b7       	in	r29, 0x3e	; 62
   18a4c:	27 96       	adiw	r28, 0x07	; 7
   18a4e:	e2 e0       	ldi	r30, 0x02	; 2
   18a50:	0c 94 88 e3 	jmp	0x1c710	; 0x1c710 <__epilogue_restores__+0x20>

00018a54 <lif_check_volume>:
   18a54:	0f 93       	push	r16
   18a56:	1f 93       	push	r17
   18a58:	cf 93       	push	r28
   18a5a:	df 93       	push	r29
   18a5c:	ad b7       	in	r26, 0x3d	; 61
   18a5e:	be b7       	in	r27, 0x3e	; 62
   18a60:	17 97       	sbiw	r26, 0x07	; 7
   18a62:	0f b6       	in	r0, 0x3f	; 63
   18a64:	f8 94       	cli
   18a66:	be bf       	out	0x3e, r27	; 62
   18a68:	0f be       	out	0x3f, r0	; 63
   18a6a:	ad bf       	out	0x3d, r26	; 61
   18a6c:	ec 01       	movw	r28, r24
   18a6e:	86 96       	adiw	r24, 0x26	; 38
   18a70:	e0 da       	rcall	.-2624   	; 0x18032 <lif_checkname>
   18a72:	89 2b       	or	r24, r25
   18a74:	89 f4       	brne	.+34     	; 0x18a98 <lif_check_volume+0x44>
   18a76:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18a7a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18a7e:	92 ff       	sbrs	r25, 2
   18a80:	0e c0       	rjmp	.+28     	; 0x18a9e <lif_check_volume+0x4a>
   18a82:	8f e4       	ldi	r24, 0x4F	; 79
   18a84:	9d e3       	ldi	r25, 0x3D	; 61
   18a86:	a0 e0       	ldi	r26, 0x00	; 0
   18a88:	ed b7       	in	r30, 0x3d	; 61
   18a8a:	fe b7       	in	r31, 0x3e	; 62
   18a8c:	81 83       	std	Z+1, r24	; 0x01
   18a8e:	92 83       	std	Z+2, r25	; 0x02
   18a90:	a3 83       	std	Z+3, r26	; 0x03
   18a92:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18a96:	03 c0       	rjmp	.+6      	; 0x18a9e <lif_check_volume+0x4a>
   18a98:	81 e0       	ldi	r24, 0x01	; 1
   18a9a:	90 e0       	ldi	r25, 0x00	; 0
   18a9c:	02 c0       	rjmp	.+4      	; 0x18aa2 <lif_check_volume+0x4e>
   18a9e:	80 e0       	ldi	r24, 0x00	; 0
   18aa0:	90 e0       	ldi	r25, 0x00	; 0
   18aa2:	29 a9       	ldd	r18, Y+49	; 0x31
   18aa4:	3a a9       	ldd	r19, Y+50	; 0x32
   18aa6:	21 15       	cp	r18, r1
   18aa8:	f0 e1       	ldi	r31, 0x10	; 16
   18aaa:	3f 07       	cpc	r19, r31
   18aac:	a1 f0       	breq	.+40     	; 0x18ad6 <lif_check_volume+0x82>
   18aae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18ab2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18ab6:	92 ff       	sbrs	r25, 2
   18ab8:	0c c0       	rjmp	.+24     	; 0x18ad2 <lif_check_volume+0x7e>
   18aba:	ed b7       	in	r30, 0x3d	; 61
   18abc:	fe b7       	in	r31, 0x3e	; 62
   18abe:	35 83       	std	Z+5, r19	; 0x05
   18ac0:	24 83       	std	Z+4, r18	; 0x04
   18ac2:	86 e1       	ldi	r24, 0x16	; 22
   18ac4:	9d e3       	ldi	r25, 0x3D	; 61
   18ac6:	a0 e0       	ldi	r26, 0x00	; 0
   18ac8:	81 83       	std	Z+1, r24	; 0x01
   18aca:	92 83       	std	Z+2, r25	; 0x02
   18acc:	a3 83       	std	Z+3, r26	; 0x03
   18ace:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18ad2:	80 e0       	ldi	r24, 0x00	; 0
   18ad4:	90 e0       	ldi	r25, 0x00	; 0
   18ad6:	29 ad       	ldd	r18, Y+57	; 0x39
   18ad8:	3a ad       	ldd	r19, Y+58	; 0x3a
   18ada:	22 30       	cpi	r18, 0x02	; 2
   18adc:	31 05       	cpc	r19, r1
   18ade:	a0 f0       	brcs	.+40     	; 0x18b08 <lif_check_volume+0xb4>
   18ae0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18ae4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18ae8:	92 ff       	sbrs	r25, 2
   18aea:	0c c0       	rjmp	.+24     	; 0x18b04 <lif_check_volume+0xb0>
   18aec:	ed b7       	in	r30, 0x3d	; 61
   18aee:	fe b7       	in	r31, 0x3e	; 62
   18af0:	35 83       	std	Z+5, r19	; 0x05
   18af2:	24 83       	std	Z+4, r18	; 0x04
   18af4:	8e ef       	ldi	r24, 0xFE	; 254
   18af6:	9c e3       	ldi	r25, 0x3C	; 60
   18af8:	a0 e0       	ldi	r26, 0x00	; 0
   18afa:	81 83       	std	Z+1, r24	; 0x01
   18afc:	92 83       	std	Z+2, r25	; 0x02
   18afe:	a3 83       	std	Z+3, r26	; 0x03
   18b00:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18b04:	80 e0       	ldi	r24, 0x00	; 0
   18b06:	90 e0       	ldi	r25, 0x00	; 0
   18b08:	2b a9       	ldd	r18, Y+51	; 0x33
   18b0a:	3c a9       	ldd	r19, Y+52	; 0x34
   18b0c:	23 2b       	or	r18, r19
   18b0e:	91 f0       	breq	.+36     	; 0x18b34 <lif_check_volume+0xe0>
   18b10:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18b14:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18b18:	92 ff       	sbrs	r25, 2
   18b1a:	0a c0       	rjmp	.+20     	; 0x18b30 <lif_check_volume+0xdc>
   18b1c:	85 ec       	ldi	r24, 0xC5	; 197
   18b1e:	9c e3       	ldi	r25, 0x3C	; 60
   18b20:	a0 e0       	ldi	r26, 0x00	; 0
   18b22:	ed b7       	in	r30, 0x3d	; 61
   18b24:	fe b7       	in	r31, 0x3e	; 62
   18b26:	81 83       	std	Z+1, r24	; 0x01
   18b28:	92 83       	std	Z+2, r25	; 0x02
   18b2a:	a3 83       	std	Z+3, r26	; 0x03
   18b2c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18b30:	80 e0       	ldi	r24, 0x00	; 0
   18b32:	90 e0       	ldi	r25, 0x00	; 0
   18b34:	2b ad       	ldd	r18, Y+59	; 0x3b
   18b36:	3c ad       	ldd	r19, Y+60	; 0x3c
   18b38:	23 2b       	or	r18, r19
   18b3a:	91 f0       	breq	.+36     	; 0x18b60 <lif_check_volume+0x10c>
   18b3c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18b40:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18b44:	92 ff       	sbrs	r25, 2
   18b46:	0a c0       	rjmp	.+20     	; 0x18b5c <lif_check_volume+0x108>
   18b48:	8c e8       	ldi	r24, 0x8C	; 140
   18b4a:	9c e3       	ldi	r25, 0x3C	; 60
   18b4c:	a0 e0       	ldi	r26, 0x00	; 0
   18b4e:	ed b7       	in	r30, 0x3d	; 61
   18b50:	fe b7       	in	r31, 0x3e	; 62
   18b52:	81 83       	std	Z+1, r24	; 0x01
   18b54:	92 83       	std	Z+2, r25	; 0x02
   18b56:	a3 83       	std	Z+3, r26	; 0x03
   18b58:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18b5c:	80 e0       	ldi	r24, 0x00	; 0
   18b5e:	90 e0       	ldi	r25, 0x00	; 0
   18b60:	4d a5       	ldd	r20, Y+45	; 0x2d
   18b62:	5e a5       	ldd	r21, Y+46	; 0x2e
   18b64:	6f a5       	ldd	r22, Y+47	; 0x2f
   18b66:	78 a9       	ldd	r23, Y+48	; 0x30
   18b68:	45 2b       	or	r20, r21
   18b6a:	46 2b       	or	r20, r22
   18b6c:	47 2b       	or	r20, r23
   18b6e:	b1 f4       	brne	.+44     	; 0x18b9c <lif_check_volume+0x148>
   18b70:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18b74:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18b78:	92 ff       	sbrs	r25, 2
   18b7a:	0e c0       	rjmp	.+28     	; 0x18b98 <lif_check_volume+0x144>
   18b7c:	ed b7       	in	r30, 0x3d	; 61
   18b7e:	fe b7       	in	r31, 0x3e	; 62
   18b80:	14 82       	std	Z+4, r1	; 0x04
   18b82:	15 82       	std	Z+5, r1	; 0x05
   18b84:	16 82       	std	Z+6, r1	; 0x06
   18b86:	17 82       	std	Z+7, r1	; 0x07
   18b88:	87 e6       	ldi	r24, 0x67	; 103
   18b8a:	9c e3       	ldi	r25, 0x3C	; 60
   18b8c:	a0 e0       	ldi	r26, 0x00	; 0
   18b8e:	81 83       	std	Z+1, r24	; 0x01
   18b90:	92 83       	std	Z+2, r25	; 0x02
   18b92:	a3 83       	std	Z+3, r26	; 0x03
   18b94:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18b98:	80 e0       	ldi	r24, 0x00	; 0
   18b9a:	90 e0       	ldi	r25, 0x00	; 0
   18b9c:	4d a9       	ldd	r20, Y+53	; 0x35
   18b9e:	5e a9       	ldd	r21, Y+54	; 0x36
   18ba0:	6f a9       	ldd	r22, Y+55	; 0x37
   18ba2:	78 ad       	ldd	r23, Y+56	; 0x38
   18ba4:	45 2b       	or	r20, r21
   18ba6:	46 2b       	or	r20, r22
   18ba8:	47 2b       	or	r20, r23
   18baa:	91 f4       	brne	.+36     	; 0x18bd0 <lif_check_volume+0x17c>
   18bac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18bb0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18bb4:	92 ff       	sbrs	r25, 2
   18bb6:	0a c0       	rjmp	.+20     	; 0x18bcc <lif_check_volume+0x178>
   18bb8:	88 e3       	ldi	r24, 0x38	; 56
   18bba:	9c e3       	ldi	r25, 0x3C	; 60
   18bbc:	a0 e0       	ldi	r26, 0x00	; 0
   18bbe:	ed b7       	in	r30, 0x3d	; 61
   18bc0:	fe b7       	in	r31, 0x3e	; 62
   18bc2:	81 83       	std	Z+1, r24	; 0x01
   18bc4:	92 83       	std	Z+2, r25	; 0x02
   18bc6:	a3 83       	std	Z+3, r26	; 0x03
   18bc8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18bcc:	80 e0       	ldi	r24, 0x00	; 0
   18bce:	90 e0       	ldi	r25, 0x00	; 0
   18bd0:	0d a5       	ldd	r16, Y+45	; 0x2d
   18bd2:	1e a5       	ldd	r17, Y+46	; 0x2e
   18bd4:	2f a5       	ldd	r18, Y+47	; 0x2f
   18bd6:	38 a9       	ldd	r19, Y+48	; 0x30
   18bd8:	4d a9       	ldd	r20, Y+53	; 0x35
   18bda:	5e a9       	ldd	r21, Y+54	; 0x36
   18bdc:	6f a9       	ldd	r22, Y+55	; 0x37
   18bde:	78 ad       	ldd	r23, Y+56	; 0x38
   18be0:	40 0f       	add	r20, r16
   18be2:	51 1f       	adc	r21, r17
   18be4:	62 1f       	adc	r22, r18
   18be6:	73 1f       	adc	r23, r19
   18be8:	0c 81       	ldd	r16, Y+4	; 0x04
   18bea:	1d 81       	ldd	r17, Y+5	; 0x05
   18bec:	2e 81       	ldd	r18, Y+6	; 0x06
   18bee:	3f 81       	ldd	r19, Y+7	; 0x07
   18bf0:	04 17       	cp	r16, r20
   18bf2:	15 07       	cpc	r17, r21
   18bf4:	26 07       	cpc	r18, r22
   18bf6:	37 07       	cpc	r19, r23
   18bf8:	90 f4       	brcc	.+36     	; 0x18c1e <lif_check_volume+0x1ca>
   18bfa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18bfe:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18c02:	92 ff       	sbrs	r25, 2
   18c04:	0a c0       	rjmp	.+20     	; 0x18c1a <lif_check_volume+0x1c6>
   18c06:	8c e0       	ldi	r24, 0x0C	; 12
   18c08:	9c e3       	ldi	r25, 0x3C	; 60
   18c0a:	a0 e0       	ldi	r26, 0x00	; 0
   18c0c:	ed b7       	in	r30, 0x3d	; 61
   18c0e:	fe b7       	in	r31, 0x3e	; 62
   18c10:	81 83       	std	Z+1, r24	; 0x01
   18c12:	92 83       	std	Z+2, r25	; 0x02
   18c14:	a3 83       	std	Z+3, r26	; 0x03
   18c16:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18c1a:	80 e0       	ldi	r24, 0x00	; 0
   18c1c:	90 e0       	ldi	r25, 0x00	; 0
   18c1e:	cd b7       	in	r28, 0x3d	; 61
   18c20:	de b7       	in	r29, 0x3e	; 62
   18c22:	27 96       	adiw	r28, 0x07	; 7
   18c24:	e4 e0       	ldi	r30, 0x04	; 4
   18c26:	0c 94 86 e3 	jmp	0x1c70c	; 0x1c70c <__epilogue_restores__+0x1c>

00018c2a <lif_check_dir>:
   18c2a:	a5 e1       	ldi	r26, 0x15	; 21
   18c2c:	b0 e0       	ldi	r27, 0x00	; 0
   18c2e:	eb e1       	ldi	r30, 0x1B	; 27
   18c30:	f6 ec       	ldi	r31, 0xC6	; 198
   18c32:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
   18c36:	6c 01       	movw	r12, r24
   18c38:	2a e5       	ldi	r18, 0x5A	; 90
   18c3a:	c2 0e       	add	r12, r18
   18c3c:	d1 1c       	adc	r13, r1
   18c3e:	f6 01       	movw	r30, r12
   18c40:	20 81       	ld	r18, Z
   18c42:	31 81       	ldd	r19, Z+1	; 0x01
   18c44:	21 50       	subi	r18, 0x01	; 1
   18c46:	31 09       	sbc	r19, r1
   18c48:	2e 3f       	cpi	r18, 0xFE	; 254
   18c4a:	3f 4f       	sbci	r19, 0xFF	; 255
   18c4c:	08 f0       	brcs	.+2      	; 0x18c50 <lif_check_dir+0x26>
   18c4e:	9a c1       	rjmp	.+820    	; 0x18f84 <lif_check_dir+0x35a>
   18c50:	9d 8b       	std	Y+21, r25	; 0x15
   18c52:	8c 8b       	std	Y+20, r24	; 0x14
   18c54:	7c 01       	movw	r14, r24
   18c56:	2f e4       	ldi	r18, 0x4F	; 79
   18c58:	e2 0e       	add	r14, r18
   18c5a:	f1 1c       	adc	r15, r1
   18c5c:	c7 01       	movw	r24, r14
   18c5e:	e9 d9       	rcall	.-3118   	; 0x18032 <lif_checkname>
   18c60:	89 2b       	or	r24, r25
   18c62:	99 f4       	brne	.+38     	; 0x18c8a <lif_check_dir+0x60>
   18c64:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18c68:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18c6c:	92 ff       	sbrs	r25, 2
   18c6e:	0f c0       	rjmp	.+30     	; 0x18c8e <lif_check_dir+0x64>
   18c70:	ed b7       	in	r30, 0x3d	; 61
   18c72:	fe b7       	in	r31, 0x3e	; 62
   18c74:	f5 82       	std	Z+5, r15	; 0x05
   18c76:	e4 82       	std	Z+4, r14	; 0x04
   18c78:	8b ee       	ldi	r24, 0xEB	; 235
   18c7a:	9b e3       	ldi	r25, 0x3B	; 59
   18c7c:	a0 e0       	ldi	r26, 0x00	; 0
   18c7e:	81 83       	std	Z+1, r24	; 0x01
   18c80:	92 83       	std	Z+2, r25	; 0x02
   18c82:	a3 83       	std	Z+3, r26	; 0x03
   18c84:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18c88:	02 c0       	rjmp	.+4      	; 0x18c8e <lif_check_dir+0x64>
   18c8a:	01 e0       	ldi	r16, 0x01	; 1
   18c8c:	01 c0       	rjmp	.+2      	; 0x18c90 <lif_check_dir+0x66>
   18c8e:	00 e0       	ldi	r16, 0x00	; 0
   18c90:	10 e0       	ldi	r17, 0x00	; 0
   18c92:	ec 89       	ldd	r30, Y+20	; 0x14
   18c94:	fd 89       	ldd	r31, Y+21	; 0x15
   18c96:	84 85       	ldd	r24, Z+12	; 0x0c
   18c98:	95 85       	ldd	r25, Z+13	; 0x0d
   18c9a:	a6 85       	ldd	r26, Z+14	; 0x0e
   18c9c:	b7 85       	ldd	r27, Z+15	; 0x0f
   18c9e:	00 97       	sbiw	r24, 0x00	; 0
   18ca0:	a1 05       	cpc	r26, r1
   18ca2:	b1 05       	cpc	r27, r1
   18ca4:	39 f1       	breq	.+78     	; 0x18cf4 <lif_check_dir+0xca>
   18ca6:	e4 5a       	subi	r30, 0xA4	; 164
   18ca8:	ff 4f       	sbci	r31, 0xFF	; 255
   18caa:	40 81       	ld	r20, Z
   18cac:	51 81       	ldd	r21, Z+1	; 0x01
   18cae:	62 81       	ldd	r22, Z+2	; 0x02
   18cb0:	73 81       	ldd	r23, Z+3	; 0x03
   18cb2:	48 17       	cp	r20, r24
   18cb4:	59 07       	cpc	r21, r25
   18cb6:	6a 07       	cpc	r22, r26
   18cb8:	7b 07       	cpc	r23, r27
   18cba:	e0 f4       	brcc	.+56     	; 0x18cf4 <lif_check_dir+0xca>
   18cbc:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18cc0:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18cc4:	32 ff       	sbrs	r19, 2
   18cc6:	14 c0       	rjmp	.+40     	; 0x18cf0 <lif_check_dir+0xc6>
   18cc8:	ed b7       	in	r30, 0x3d	; 61
   18cca:	fe b7       	in	r31, 0x3e	; 62
   18ccc:	82 87       	std	Z+10, r24	; 0x0a
   18cce:	93 87       	std	Z+11, r25	; 0x0b
   18cd0:	a4 87       	std	Z+12, r26	; 0x0c
   18cd2:	b5 87       	std	Z+13, r27	; 0x0d
   18cd4:	46 83       	std	Z+6, r20	; 0x06
   18cd6:	57 83       	std	Z+7, r21	; 0x07
   18cd8:	60 87       	std	Z+8, r22	; 0x08
   18cda:	71 87       	std	Z+9, r23	; 0x09
   18cdc:	f5 82       	std	Z+5, r15	; 0x05
   18cde:	e4 82       	std	Z+4, r14	; 0x04
   18ce0:	87 ea       	ldi	r24, 0xA7	; 167
   18ce2:	9b e3       	ldi	r25, 0x3B	; 59
   18ce4:	a0 e0       	ldi	r26, 0x00	; 0
   18ce6:	81 83       	std	Z+1, r24	; 0x01
   18ce8:	92 83       	std	Z+2, r25	; 0x02
   18cea:	a3 83       	std	Z+3, r26	; 0x03
   18cec:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18cf0:	00 e0       	ldi	r16, 0x00	; 0
   18cf2:	10 e0       	ldi	r17, 0x00	; 0
   18cf4:	ec 89       	ldd	r30, Y+20	; 0x14
   18cf6:	fd 89       	ldd	r31, Y+21	; 0x15
   18cf8:	44 81       	ldd	r20, Z+4	; 0x04
   18cfa:	55 81       	ldd	r21, Z+5	; 0x05
   18cfc:	66 81       	ldd	r22, Z+6	; 0x06
   18cfe:	77 81       	ldd	r23, Z+7	; 0x07
   18d00:	41 15       	cp	r20, r1
   18d02:	51 05       	cpc	r21, r1
   18d04:	61 05       	cpc	r22, r1
   18d06:	71 05       	cpc	r23, r1
   18d08:	99 f1       	breq	.+102    	; 0x18d70 <lif_check_dir+0x146>
   18d0a:	e4 5a       	subi	r30, 0xA4	; 164
   18d0c:	ff 4f       	sbci	r31, 0xFF	; 255
   18d0e:	80 80       	ld	r8, Z
   18d10:	91 80       	ldd	r9, Z+1	; 0x01
   18d12:	a2 80       	ldd	r10, Z+2	; 0x02
   18d14:	b3 80       	ldd	r11, Z+3	; 0x03
   18d16:	ec 89       	ldd	r30, Y+20	; 0x14
   18d18:	fd 89       	ldd	r31, Y+21	; 0x15
   18d1a:	e0 5a       	subi	r30, 0xA0	; 160
   18d1c:	ff 4f       	sbci	r31, 0xFF	; 255
   18d1e:	80 81       	ld	r24, Z
   18d20:	91 81       	ldd	r25, Z+1	; 0x01
   18d22:	a2 81       	ldd	r26, Z+2	; 0x02
   18d24:	b3 81       	ldd	r27, Z+3	; 0x03
   18d26:	88 0d       	add	r24, r8
   18d28:	99 1d       	adc	r25, r9
   18d2a:	aa 1d       	adc	r26, r10
   18d2c:	bb 1d       	adc	r27, r11
   18d2e:	48 17       	cp	r20, r24
   18d30:	59 07       	cpc	r21, r25
   18d32:	6a 07       	cpc	r22, r26
   18d34:	7b 07       	cpc	r23, r27
   18d36:	e0 f4       	brcc	.+56     	; 0x18d70 <lif_check_dir+0x146>
   18d38:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18d3c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18d40:	32 ff       	sbrs	r19, 2
   18d42:	14 c0       	rjmp	.+40     	; 0x18d6c <lif_check_dir+0x142>
   18d44:	ed b7       	in	r30, 0x3d	; 61
   18d46:	fe b7       	in	r31, 0x3e	; 62
   18d48:	42 87       	std	Z+10, r20	; 0x0a
   18d4a:	53 87       	std	Z+11, r21	; 0x0b
   18d4c:	64 87       	std	Z+12, r22	; 0x0c
   18d4e:	75 87       	std	Z+13, r23	; 0x0d
   18d50:	86 83       	std	Z+6, r24	; 0x06
   18d52:	97 83       	std	Z+7, r25	; 0x07
   18d54:	a0 87       	std	Z+8, r26	; 0x08
   18d56:	b1 87       	std	Z+9, r27	; 0x09
   18d58:	f5 82       	std	Z+5, r15	; 0x05
   18d5a:	e4 82       	std	Z+4, r14	; 0x04
   18d5c:	86 e6       	ldi	r24, 0x66	; 102
   18d5e:	9b e3       	ldi	r25, 0x3B	; 59
   18d60:	a0 e0       	ldi	r26, 0x00	; 0
   18d62:	81 83       	std	Z+1, r24	; 0x01
   18d64:	92 83       	std	Z+2, r25	; 0x02
   18d66:	a3 83       	std	Z+3, r26	; 0x03
   18d68:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18d6c:	00 e0       	ldi	r16, 0x00	; 0
   18d6e:	10 e0       	ldi	r17, 0x00	; 0
   18d70:	ec 89       	ldd	r30, Y+20	; 0x14
   18d72:	fd 89       	ldd	r31, Y+21	; 0x15
   18d74:	e6 59       	subi	r30, 0x96	; 150
   18d76:	ff 4f       	sbci	r31, 0xFF	; 255
   18d78:	80 81       	ld	r24, Z
   18d7a:	91 81       	ldd	r25, Z+1	; 0x01
   18d7c:	81 30       	cpi	r24, 0x01	; 1
   18d7e:	f0 e8       	ldi	r31, 0x80	; 128
   18d80:	9f 07       	cpc	r25, r31
   18d82:	b1 f0       	breq	.+44     	; 0x18db0 <lif_check_dir+0x186>
   18d84:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18d88:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18d8c:	32 ff       	sbrs	r19, 2
   18d8e:	0e c0       	rjmp	.+28     	; 0x18dac <lif_check_dir+0x182>
   18d90:	ed b7       	in	r30, 0x3d	; 61
   18d92:	fe b7       	in	r31, 0x3e	; 62
   18d94:	97 83       	std	Z+7, r25	; 0x07
   18d96:	86 83       	std	Z+6, r24	; 0x06
   18d98:	f5 82       	std	Z+5, r15	; 0x05
   18d9a:	e4 82       	std	Z+4, r14	; 0x04
   18d9c:	88 e3       	ldi	r24, 0x38	; 56
   18d9e:	9b e3       	ldi	r25, 0x3B	; 59
   18da0:	a0 e0       	ldi	r26, 0x00	; 0
   18da2:	81 83       	std	Z+1, r24	; 0x01
   18da4:	92 83       	std	Z+2, r25	; 0x02
   18da6:	a3 83       	std	Z+3, r26	; 0x03
   18da8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18dac:	00 e0       	ldi	r16, 0x00	; 0
   18dae:	10 e0       	ldi	r17, 0x00	; 0
   18db0:	f6 01       	movw	r30, r12
   18db2:	80 81       	ld	r24, Z
   18db4:	91 81       	ldd	r25, Z+1	; 0x01
   18db6:	8c 7f       	andi	r24, 0xFC	; 252
   18db8:	80 31       	cpi	r24, 0x10	; 16
   18dba:	90 4e       	sbci	r25, 0xE0	; 224
   18dbc:	09 f0       	breq	.+2      	; 0x18dc0 <lif_check_dir+0x196>
   18dbe:	b3 c0       	rjmp	.+358    	; 0x18f26 <lif_check_dir+0x2fc>
   18dc0:	cc 88       	ldd	r12, Y+20	; 0x14
   18dc2:	dd 88       	ldd	r13, Y+21	; 0x15
   18dc4:	2c e6       	ldi	r18, 0x6C	; 108
   18dc6:	c2 0e       	add	r12, r18
   18dc8:	d1 1c       	adc	r13, r1
   18dca:	f6 01       	movw	r30, r12
   18dcc:	80 81       	ld	r24, Z
   18dce:	91 81       	ldd	r25, Z+1	; 0x01
   18dd0:	00 97       	sbiw	r24, 0x00	; 0
   18dd2:	09 f4       	brne	.+2      	; 0x18dd6 <lif_check_dir+0x1ac>
   18dd4:	a8 c0       	rjmp	.+336    	; 0x18f26 <lif_check_dir+0x2fc>
   18dd6:	4c 01       	movw	r8, r24
   18dd8:	a1 2c       	mov	r10, r1
   18dda:	b1 2c       	mov	r11, r1
   18ddc:	77 27       	eor	r23, r23
   18dde:	6b 2d       	mov	r22, r11
   18de0:	5a 2d       	mov	r21, r10
   18de2:	49 2d       	mov	r20, r9
   18de4:	9c 01       	movw	r18, r24
   18de6:	33 27       	eor	r19, r19
   18de8:	3b 8b       	std	Y+19, r19	; 0x13
   18dea:	2a 8b       	std	Y+18, r18	; 0x12
   18dec:	db 01       	movw	r26, r22
   18dee:	ca 01       	movw	r24, r20
   18df0:	23 2b       	or	r18, r19
   18df2:	19 f0       	breq	.+6      	; 0x18dfa <lif_check_dir+0x1d0>
   18df4:	01 96       	adiw	r24, 0x01	; 1
   18df6:	a1 1d       	adc	r26, r1
   18df8:	b1 1d       	adc	r27, r1
   18dfa:	2c 88       	ldd	r2, Y+20	; 0x14
   18dfc:	3d 88       	ldd	r3, Y+21	; 0x15
   18dfe:	30 e6       	ldi	r19, 0x60	; 96
   18e00:	23 0e       	add	r2, r19
   18e02:	31 1c       	adc	r3, r1
   18e04:	f1 01       	movw	r30, r2
   18e06:	40 80       	ld	r4, Z
   18e08:	51 80       	ldd	r5, Z+1	; 0x01
   18e0a:	62 80       	ldd	r6, Z+2	; 0x02
   18e0c:	73 80       	ldd	r7, Z+3	; 0x03
   18e0e:	48 16       	cp	r4, r24
   18e10:	59 06       	cpc	r5, r25
   18e12:	6a 06       	cpc	r6, r26
   18e14:	7b 06       	cpc	r7, r27
   18e16:	40 f5       	brcc	.+80     	; 0x18e68 <lif_check_dir+0x23e>
   18e18:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18e1c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18e20:	32 ff       	sbrs	r19, 2
   18e22:	20 c0       	rjmp	.+64     	; 0x18e64 <lif_check_dir+0x23a>
   18e24:	2a 89       	ldd	r18, Y+18	; 0x12
   18e26:	3b 89       	ldd	r19, Y+19	; 0x13
   18e28:	23 2b       	or	r18, r19
   18e2a:	21 f0       	breq	.+8      	; 0x18e34 <lif_check_dir+0x20a>
   18e2c:	4f 5f       	subi	r20, 0xFF	; 255
   18e2e:	5f 4f       	sbci	r21, 0xFF	; 255
   18e30:	6f 4f       	sbci	r22, 0xFF	; 255
   18e32:	7f 4f       	sbci	r23, 0xFF	; 255
   18e34:	ed b7       	in	r30, 0x3d	; 61
   18e36:	fe b7       	in	r31, 0x3e	; 62
   18e38:	46 86       	std	Z+14, r4	; 0x0e
   18e3a:	57 86       	std	Z+15, r5	; 0x0f
   18e3c:	60 8a       	std	Z+16, r6	; 0x10
   18e3e:	71 8a       	std	Z+17, r7	; 0x11
   18e40:	42 87       	std	Z+10, r20	; 0x0a
   18e42:	53 87       	std	Z+11, r21	; 0x0b
   18e44:	64 87       	std	Z+12, r22	; 0x0c
   18e46:	75 87       	std	Z+13, r23	; 0x0d
   18e48:	86 82       	std	Z+6, r8	; 0x06
   18e4a:	97 82       	std	Z+7, r9	; 0x07
   18e4c:	a0 86       	std	Z+8, r10	; 0x08
   18e4e:	b1 86       	std	Z+9, r11	; 0x09
   18e50:	f5 82       	std	Z+5, r15	; 0x05
   18e52:	e4 82       	std	Z+4, r14	; 0x04
   18e54:	8d ee       	ldi	r24, 0xED	; 237
   18e56:	9a e3       	ldi	r25, 0x3A	; 58
   18e58:	a0 e0       	ldi	r26, 0x00	; 0
   18e5a:	81 83       	std	Z+1, r24	; 0x01
   18e5c:	92 83       	std	Z+2, r25	; 0x02
   18e5e:	a3 83       	std	Z+3, r26	; 0x03
   18e60:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18e64:	00 e0       	ldi	r16, 0x00	; 0
   18e66:	10 e0       	ldi	r17, 0x00	; 0
   18e68:	f6 01       	movw	r30, r12
   18e6a:	20 81       	ld	r18, Z
   18e6c:	31 81       	ldd	r19, Z+1	; 0x01
   18e6e:	a9 01       	movw	r20, r18
   18e70:	60 e0       	ldi	r22, 0x00	; 0
   18e72:	70 e0       	ldi	r23, 0x00	; 0
   18e74:	bb 27       	eor	r27, r27
   18e76:	a7 2f       	mov	r26, r23
   18e78:	96 2f       	mov	r25, r22
   18e7a:	85 2f       	mov	r24, r21
   18e7c:	f9 01       	movw	r30, r18
   18e7e:	ff 27       	eor	r31, r31
   18e80:	fb 8b       	std	Y+19, r31	; 0x13
   18e82:	ea 8b       	std	Y+18, r30	; 0x12
   18e84:	2c 01       	movw	r4, r24
   18e86:	3d 01       	movw	r6, r26
   18e88:	ef 2b       	or	r30, r31
   18e8a:	29 f0       	breq	.+10     	; 0x18e96 <lif_check_dir+0x26c>
   18e8c:	ff ef       	ldi	r31, 0xFF	; 255
   18e8e:	4f 1a       	sub	r4, r31
   18e90:	5f 0a       	sbc	r5, r31
   18e92:	6f 0a       	sbc	r6, r31
   18e94:	7f 0a       	sbc	r7, r31
   18e96:	f1 01       	movw	r30, r2
   18e98:	80 80       	ld	r8, Z
   18e9a:	91 80       	ldd	r9, Z+1	; 0x01
   18e9c:	a2 80       	ldd	r10, Z+2	; 0x02
   18e9e:	b3 80       	ldd	r11, Z+3	; 0x03
   18ea0:	48 14       	cp	r4, r8
   18ea2:	59 04       	cpc	r5, r9
   18ea4:	6a 04       	cpc	r6, r10
   18ea6:	7b 04       	cpc	r7, r11
   18ea8:	28 f5       	brcc	.+74     	; 0x18ef4 <lif_check_dir+0x2ca>
   18eaa:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18eae:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18eb2:	32 ff       	sbrs	r19, 2
   18eb4:	1f c0       	rjmp	.+62     	; 0x18ef4 <lif_check_dir+0x2ca>
   18eb6:	2a 89       	ldd	r18, Y+18	; 0x12
   18eb8:	3b 89       	ldd	r19, Y+19	; 0x13
   18eba:	23 2b       	or	r18, r19
   18ebc:	19 f0       	breq	.+6      	; 0x18ec4 <lif_check_dir+0x29a>
   18ebe:	01 96       	adiw	r24, 0x01	; 1
   18ec0:	a1 1d       	adc	r26, r1
   18ec2:	b1 1d       	adc	r27, r1
   18ec4:	ed b7       	in	r30, 0x3d	; 61
   18ec6:	fe b7       	in	r31, 0x3e	; 62
   18ec8:	86 86       	std	Z+14, r8	; 0x0e
   18eca:	97 86       	std	Z+15, r9	; 0x0f
   18ecc:	a0 8a       	std	Z+16, r10	; 0x10
   18ece:	b1 8a       	std	Z+17, r11	; 0x11
   18ed0:	82 87       	std	Z+10, r24	; 0x0a
   18ed2:	93 87       	std	Z+11, r25	; 0x0b
   18ed4:	a4 87       	std	Z+12, r26	; 0x0c
   18ed6:	b5 87       	std	Z+13, r27	; 0x0d
   18ed8:	46 83       	std	Z+6, r20	; 0x06
   18eda:	57 83       	std	Z+7, r21	; 0x07
   18edc:	60 87       	std	Z+8, r22	; 0x08
   18ede:	71 87       	std	Z+9, r23	; 0x09
   18ee0:	f5 82       	std	Z+5, r15	; 0x05
   18ee2:	e4 82       	std	Z+4, r14	; 0x04
   18ee4:	82 ea       	ldi	r24, 0xA2	; 162
   18ee6:	9a e3       	ldi	r25, 0x3A	; 58
   18ee8:	a0 e0       	ldi	r26, 0x00	; 0
   18eea:	81 83       	std	Z+1, r24	; 0x01
   18eec:	92 83       	std	Z+2, r25	; 0x02
   18eee:	a3 83       	std	Z+3, r26	; 0x03
   18ef0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18ef4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18ef8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18efc:	92 ff       	sbrs	r25, 2
   18efe:	13 c0       	rjmp	.+38     	; 0x18f26 <lif_check_dir+0x2fc>
   18f00:	f6 01       	movw	r30, r12
   18f02:	80 81       	ld	r24, Z
   18f04:	91 81       	ldd	r25, Z+1	; 0x01
   18f06:	89 2b       	or	r24, r25
   18f08:	71 f4       	brne	.+28     	; 0x18f26 <lif_check_dir+0x2fc>
   18f0a:	ed b7       	in	r30, 0x3d	; 61
   18f0c:	fe b7       	in	r31, 0x3e	; 62
   18f0e:	f5 82       	std	Z+5, r15	; 0x05
   18f10:	e4 82       	std	Z+4, r14	; 0x04
   18f12:	87 e7       	ldi	r24, 0x77	; 119
   18f14:	9a e3       	ldi	r25, 0x3A	; 58
   18f16:	a0 e0       	ldi	r26, 0x00	; 0
   18f18:	81 83       	std	Z+1, r24	; 0x01
   18f1a:	92 83       	std	Z+2, r25	; 0x02
   18f1c:	a3 83       	std	Z+3, r26	; 0x03
   18f1e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18f22:	00 e0       	ldi	r16, 0x00	; 0
   18f24:	10 e0       	ldi	r17, 0x00	; 0
   18f26:	ec 89       	ldd	r30, Y+20	; 0x14
   18f28:	fd 89       	ldd	r31, Y+21	; 0x15
   18f2a:	e2 59       	subi	r30, 0x92	; 146
   18f2c:	ff 4f       	sbci	r31, 0xFF	; 255
   18f2e:	20 81       	ld	r18, Z
   18f30:	31 81       	ldd	r19, Z+1	; 0x01
   18f32:	21 15       	cp	r18, r1
   18f34:	f1 e0       	ldi	r31, 0x01	; 1
   18f36:	3f 07       	cpc	r19, r31
   18f38:	41 f1       	breq	.+80     	; 0x18f8a <lif_check_dir+0x360>
   18f3a:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   18f3e:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18f42:	ca 01       	movw	r24, r20
   18f44:	88 27       	eor	r24, r24
   18f46:	94 70       	andi	r25, 0x04	; 4
   18f48:	52 ff       	sbrs	r21, 2
   18f4a:	20 c0       	rjmp	.+64     	; 0x18f8c <lif_check_dir+0x362>
   18f4c:	c9 01       	movw	r24, r18
   18f4e:	a0 e0       	ldi	r26, 0x00	; 0
   18f50:	b0 e0       	ldi	r27, 0x00	; 0
   18f52:	ed b7       	in	r30, 0x3d	; 61
   18f54:	fe b7       	in	r31, 0x3e	; 62
   18f56:	86 83       	std	Z+6, r24	; 0x06
   18f58:	97 83       	std	Z+7, r25	; 0x07
   18f5a:	a0 87       	std	Z+8, r26	; 0x08
   18f5c:	b1 87       	std	Z+9, r27	; 0x09
   18f5e:	ec 89       	ldd	r30, Y+20	; 0x14
   18f60:	fd 89       	ldd	r31, Y+21	; 0x15
   18f62:	80 81       	ld	r24, Z
   18f64:	91 81       	ldd	r25, Z+1	; 0x01
   18f66:	ed b7       	in	r30, 0x3d	; 61
   18f68:	fe b7       	in	r31, 0x3e	; 62
   18f6a:	95 83       	std	Z+5, r25	; 0x05
   18f6c:	84 83       	std	Z+4, r24	; 0x04
   18f6e:	8b e4       	ldi	r24, 0x4B	; 75
   18f70:	9a e3       	ldi	r25, 0x3A	; 58
   18f72:	a0 e0       	ldi	r26, 0x00	; 0
   18f74:	81 83       	std	Z+1, r24	; 0x01
   18f76:	92 83       	std	Z+2, r25	; 0x02
   18f78:	a3 83       	std	Z+3, r26	; 0x03
   18f7a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18f7e:	80 e0       	ldi	r24, 0x00	; 0
   18f80:	90 e0       	ldi	r25, 0x00	; 0
   18f82:	04 c0       	rjmp	.+8      	; 0x18f8c <lif_check_dir+0x362>
   18f84:	81 e0       	ldi	r24, 0x01	; 1
   18f86:	90 e0       	ldi	r25, 0x00	; 0
   18f88:	01 c0       	rjmp	.+2      	; 0x18f8c <lif_check_dir+0x362>
   18f8a:	c8 01       	movw	r24, r16
   18f8c:	65 96       	adiw	r28, 0x15	; 21
   18f8e:	e2 e1       	ldi	r30, 0x12	; 18
   18f90:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

00018f94 <lif_close_volume>:
   18f94:	cf 93       	push	r28
   18f96:	df 93       	push	r29
   18f98:	00 97       	sbiw	r24, 0x00	; 0
   18f9a:	f9 f0       	breq	.+62     	; 0x18fda <lif_close_volume+0x46>
   18f9c:	ec 01       	movw	r28, r24
   18f9e:	8a 81       	ldd	r24, Y+2	; 0x02
   18fa0:	9b 81       	ldd	r25, Y+3	; 0x03
   18fa2:	00 97       	sbiw	r24, 0x00	; 0
   18fa4:	79 f0       	breq	.+30     	; 0x18fc4 <lif_close_volume+0x30>
   18fa6:	22 e0       	ldi	r18, 0x02	; 2
   18fa8:	30 e0       	ldi	r19, 0x00	; 0
   18faa:	40 e0       	ldi	r20, 0x00	; 0
   18fac:	50 e0       	ldi	r21, 0x00	; 0
   18fae:	ba 01       	movw	r22, r20
   18fb0:	0e 94 f8 79 	call	0xf3f0	; 0xf3f0 <fseek>
   18fb4:	8a 81       	ldd	r24, Y+2	; 0x02
   18fb6:	9b 81       	ldd	r25, Y+3	; 0x03
   18fb8:	0e 94 e0 7b 	call	0xf7c0	; 0xf7c0 <fclose>
   18fbc:	1b 82       	std	Y+3, r1	; 0x03
   18fbe:	1a 82       	std	Y+2, r1	; 0x02
   18fc0:	0e 94 db 7a 	call	0xf5b6	; 0xf5b6 <sync>
   18fc4:	88 81       	ld	r24, Y
   18fc6:	99 81       	ldd	r25, Y+1	; 0x01
   18fc8:	00 97       	sbiw	r24, 0x00	; 0
   18fca:	11 f0       	breq	.+4      	; 0x18fd0 <lif_close_volume+0x3c>
   18fcc:	0e 94 46 be 	call	0x17c8c	; 0x17c8c <lif_free>
   18fd0:	ce 01       	movw	r24, r28
   18fd2:	73 db       	rcall	.-2330   	; 0x186ba <lif_vol_clear>
   18fd4:	ce 01       	movw	r24, r28
   18fd6:	0e 94 46 be 	call	0x17c8c	; 0x17c8c <lif_free>
   18fda:	df 91       	pop	r29
   18fdc:	cf 91       	pop	r28
   18fde:	08 95       	ret

00018fe0 <lif_checkdirindex>:
   18fe0:	cf 92       	push	r12
   18fe2:	df 92       	push	r13
   18fe4:	ef 92       	push	r14
   18fe6:	ff 92       	push	r15
   18fe8:	cf 93       	push	r28
   18fea:	df 93       	push	r29
   18fec:	ad b7       	in	r26, 0x3d	; 61
   18fee:	be b7       	in	r27, 0x3e	; 62
   18ff0:	17 97       	sbiw	r26, 0x07	; 7
   18ff2:	0f b6       	in	r0, 0x3f	; 63
   18ff4:	f8 94       	cli
   18ff6:	be bf       	out	0x3e, r27	; 62
   18ff8:	0f be       	out	0x3f, r0	; 63
   18ffa:	ad bf       	out	0x3d, r26	; 61
   18ffc:	9b 01       	movw	r18, r22
   18ffe:	77 fd       	sbrc	r23, 7
   19000:	25 c0       	rjmp	.+74     	; 0x1904c <lif_checkdirindex+0x6c>
   19002:	ab 01       	movw	r20, r22
   19004:	77 0f       	add	r23, r23
   19006:	66 0b       	sbc	r22, r22
   19008:	77 0b       	sbc	r23, r23
   1900a:	e5 e0       	ldi	r30, 0x05	; 5
   1900c:	44 0f       	add	r20, r20
   1900e:	55 1f       	adc	r21, r21
   19010:	66 1f       	adc	r22, r22
   19012:	77 1f       	adc	r23, r23
   19014:	ea 95       	dec	r30
   19016:	d1 f7       	brne	.-12     	; 0x1900c <lif_checkdirindex+0x2c>
   19018:	c5 2e       	mov	r12, r21
   1901a:	d6 2e       	mov	r13, r22
   1901c:	e7 2e       	mov	r14, r23
   1901e:	ff 24       	eor	r15, r15
   19020:	55 27       	eor	r21, r21
   19022:	66 27       	eor	r22, r22
   19024:	77 27       	eor	r23, r23
   19026:	45 2b       	or	r20, r21
   19028:	46 2b       	or	r20, r22
   1902a:	47 2b       	or	r20, r23
   1902c:	29 f0       	breq	.+10     	; 0x19038 <lif_checkdirindex+0x58>
   1902e:	4f ef       	ldi	r20, 0xFF	; 255
   19030:	c4 1a       	sub	r12, r20
   19032:	d4 0a       	sbc	r13, r20
   19034:	e4 0a       	sbc	r14, r20
   19036:	f4 0a       	sbc	r15, r20
   19038:	fc 01       	movw	r30, r24
   1903a:	45 a9       	ldd	r20, Z+53	; 0x35
   1903c:	56 a9       	ldd	r21, Z+54	; 0x36
   1903e:	67 a9       	ldd	r22, Z+55	; 0x37
   19040:	70 ad       	ldd	r23, Z+56	; 0x38
   19042:	4c 15       	cp	r20, r12
   19044:	5d 05       	cpc	r21, r13
   19046:	6e 05       	cpc	r22, r14
   19048:	7f 05       	cpc	r23, r15
   1904a:	08 f5       	brcc	.+66     	; 0x1908e <lif_checkdirindex+0xae>
   1904c:	ec 01       	movw	r28, r24
   1904e:	ed b7       	in	r30, 0x3d	; 61
   19050:	fe b7       	in	r31, 0x3e	; 62
   19052:	37 83       	std	Z+7, r19	; 0x07
   19054:	26 83       	std	Z+6, r18	; 0x06
   19056:	88 81       	ld	r24, Y
   19058:	99 81       	ldd	r25, Y+1	; 0x01
   1905a:	95 83       	std	Z+5, r25	; 0x05
   1905c:	84 83       	std	Z+4, r24	; 0x04
   1905e:	88 e8       	ldi	r24, 0x88	; 136
   19060:	99 e3       	ldi	r25, 0x39	; 57
   19062:	a0 e0       	ldi	r26, 0x00	; 0
   19064:	81 83       	std	Z+1, r24	; 0x01
   19066:	92 83       	std	Z+2, r25	; 0x02
   19068:	a3 83       	std	Z+3, r26	; 0x03
   1906a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1906e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19072:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19076:	c9 01       	movw	r24, r18
   19078:	88 27       	eor	r24, r24
   1907a:	94 70       	andi	r25, 0x04	; 4
   1907c:	32 ff       	sbrs	r19, 2
   1907e:	09 c0       	rjmp	.+18     	; 0x19092 <lif_checkdirindex+0xb2>
   19080:	6c ef       	ldi	r22, 0xFC	; 252
   19082:	75 e1       	ldi	r23, 0x15	; 21
   19084:	ce 01       	movw	r24, r28
   19086:	20 db       	rcall	.-2496   	; 0x186c8 <lif_dump_vol>
   19088:	80 e0       	ldi	r24, 0x00	; 0
   1908a:	90 e0       	ldi	r25, 0x00	; 0
   1908c:	02 c0       	rjmp	.+4      	; 0x19092 <lif_checkdirindex+0xb2>
   1908e:	81 e0       	ldi	r24, 0x01	; 1
   19090:	90 e0       	ldi	r25, 0x00	; 0
   19092:	ad b7       	in	r26, 0x3d	; 61
   19094:	be b7       	in	r27, 0x3e	; 62
   19096:	17 96       	adiw	r26, 0x07	; 7
   19098:	0f b6       	in	r0, 0x3f	; 63
   1909a:	f8 94       	cli
   1909c:	be bf       	out	0x3e, r27	; 62
   1909e:	0f be       	out	0x3f, r0	; 63
   190a0:	ad bf       	out	0x3d, r26	; 61
   190a2:	df 91       	pop	r29
   190a4:	cf 91       	pop	r28
   190a6:	ff 90       	pop	r15
   190a8:	ef 90       	pop	r14
   190aa:	df 90       	pop	r13
   190ac:	cf 90       	pop	r12
   190ae:	08 95       	ret

000190b0 <lif_readdirindex>:
   190b0:	a5 e2       	ldi	r26, 0x25	; 37
   190b2:	b0 e0       	ldi	r27, 0x00	; 0
   190b4:	ee e5       	ldi	r30, 0x5E	; 94
   190b6:	f8 ec       	ldi	r31, 0xC8	; 200
   190b8:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
   190bc:	7c 01       	movw	r14, r24
   190be:	6b 01       	movw	r12, r22
   190c0:	8f df       	rcall	.-226    	; 0x18fe0 <lif_checkdirindex>
   190c2:	89 2b       	or	r24, r25
   190c4:	19 f4       	brne	.+6      	; 0x190cc <lif_readdirindex+0x1c>
   190c6:	00 e0       	ldi	r16, 0x00	; 0
   190c8:	10 e0       	ldi	r17, 0x00	; 0
   190ca:	54 c0       	rjmp	.+168    	; 0x19174 <lif_readdirindex+0xc4>
   190cc:	f7 01       	movw	r30, r14
   190ce:	85 a5       	ldd	r24, Z+45	; 0x2d
   190d0:	96 a5       	ldd	r25, Z+46	; 0x2e
   190d2:	a7 a5       	ldd	r26, Z+47	; 0x2f
   190d4:	b0 a9       	ldd	r27, Z+48	; 0x30
   190d6:	44 27       	eor	r20, r20
   190d8:	58 2f       	mov	r21, r24
   190da:	69 2f       	mov	r22, r25
   190dc:	7a 2f       	mov	r23, r26
   190de:	c6 01       	movw	r24, r12
   190e0:	0d 2c       	mov	r0, r13
   190e2:	00 0c       	add	r0, r0
   190e4:	aa 0b       	sbc	r26, r26
   190e6:	bb 0b       	sbc	r27, r27
   190e8:	35 e0       	ldi	r19, 0x05	; 5
   190ea:	88 0f       	add	r24, r24
   190ec:	99 1f       	adc	r25, r25
   190ee:	aa 1f       	adc	r26, r26
   190f0:	bb 1f       	adc	r27, r27
   190f2:	3a 95       	dec	r19
   190f4:	d1 f7       	brne	.-12     	; 0x190ea <lif_readdirindex+0x3a>
   190f6:	9a 01       	movw	r18, r20
   190f8:	ab 01       	movw	r20, r22
   190fa:	28 0f       	add	r18, r24
   190fc:	39 1f       	adc	r19, r25
   190fe:	4a 1f       	adc	r20, r26
   19100:	5b 1f       	adc	r21, r27
   19102:	00 e2       	ldi	r16, 0x20	; 32
   19104:	10 e0       	ldi	r17, 0x00	; 0
   19106:	be 01       	movw	r22, r28
   19108:	6a 5f       	subi	r22, 0xFA	; 250
   1910a:	7f 4f       	sbci	r23, 0xFF	; 255
   1910c:	c7 01       	movw	r24, r14
   1910e:	0e 94 fe be 	call	0x17dfc	; 0x17dfc <lif_read>
   19112:	60 32       	cpi	r22, 0x20	; 32
   19114:	71 05       	cpc	r23, r1
   19116:	81 05       	cpc	r24, r1
   19118:	91 05       	cpc	r25, r1
   1911a:	a8 f2       	brcs	.-86     	; 0x190c6 <lif_readdirindex+0x16>
   1911c:	b7 01       	movw	r22, r14
   1911e:	ce 01       	movw	r24, r28
   19120:	06 96       	adiw	r24, 0x06	; 6
   19122:	75 d9       	rcall	.-3350   	; 0x1840e <lif_str2dir>
   19124:	f7 01       	movw	r30, r14
   19126:	e6 5a       	subi	r30, 0xA6	; 166
   19128:	ff 4f       	sbci	r31, 0xFF	; 255
   1912a:	80 81       	ld	r24, Z
   1912c:	91 81       	ldd	r25, Z+1	; 0x01
   1912e:	01 96       	adiw	r24, 0x01	; 1
   19130:	19 f4       	brne	.+6      	; 0x19138 <lif_readdirindex+0x88>
   19132:	f7 01       	movw	r30, r14
   19134:	d3 a2       	std	Z+35, r13	; 0x23
   19136:	c2 a2       	std	Z+34, r12	; 0x22
   19138:	c7 01       	movw	r24, r14
   1913a:	77 dd       	rcall	.-1298   	; 0x18c2a <lif_check_dir>
   1913c:	8c 01       	movw	r16, r24
   1913e:	89 2b       	or	r24, r25
   19140:	b9 f4       	brne	.+46     	; 0x19170 <lif_readdirindex+0xc0>
   19142:	ed b7       	in	r30, 0x3d	; 61
   19144:	fe b7       	in	r31, 0x3e	; 62
   19146:	d5 82       	std	Z+5, r13	; 0x05
   19148:	c4 82       	std	Z+4, r12	; 0x04
   1914a:	88 e6       	ldi	r24, 0x68	; 104
   1914c:	99 e3       	ldi	r25, 0x39	; 57
   1914e:	a0 e0       	ldi	r26, 0x00	; 0
   19150:	81 83       	std	Z+1, r24	; 0x01
   19152:	92 83       	std	Z+2, r25	; 0x02
   19154:	a3 83       	std	Z+3, r26	; 0x03
   19156:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1915a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1915e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19162:	92 ff       	sbrs	r25, 2
   19164:	b0 cf       	rjmp	.-160    	; 0x190c6 <lif_readdirindex+0x16>
   19166:	6d e0       	ldi	r22, 0x0D	; 13
   19168:	76 e1       	ldi	r23, 0x16	; 22
   1916a:	c7 01       	movw	r24, r14
   1916c:	ad da       	rcall	.-2726   	; 0x186c8 <lif_dump_vol>
   1916e:	02 c0       	rjmp	.+4      	; 0x19174 <lif_readdirindex+0xc4>
   19170:	01 e0       	ldi	r16, 0x01	; 1
   19172:	10 e0       	ldi	r17, 0x00	; 0
   19174:	c8 01       	movw	r24, r16
   19176:	a5 96       	adiw	r28, 0x25	; 37
   19178:	e8 e0       	ldi	r30, 0x08	; 8
   1917a:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

0001917e <lif_writedirindex>:
   1917e:	a0 e2       	ldi	r26, 0x20	; 32
   19180:	b0 e0       	ldi	r27, 0x00	; 0
   19182:	e5 ec       	ldi	r30, 0xC5	; 197
   19184:	f8 ec       	ldi	r31, 0xC8	; 200
   19186:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__prologue_saves__+0x10>
   1918a:	5c 01       	movw	r10, r24
   1918c:	6b 01       	movw	r12, r22
   1918e:	4d dd       	rcall	.-1382   	; 0x18c2a <lif_check_dir>
   19190:	7c 01       	movw	r14, r24
   19192:	89 2b       	or	r24, r25
   19194:	71 f4       	brne	.+28     	; 0x191b2 <lif_writedirindex+0x34>
   19196:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1919a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1919e:	92 fd       	sbrc	r25, 2
   191a0:	03 c0       	rjmp	.+6      	; 0x191a8 <lif_writedirindex+0x2a>
   191a2:	e1 2c       	mov	r14, r1
   191a4:	f1 2c       	mov	r15, r1
   191a6:	42 c0       	rjmp	.+132    	; 0x1922c <lif_writedirindex+0xae>
   191a8:	6e e1       	ldi	r22, 0x1E	; 30
   191aa:	76 e1       	ldi	r23, 0x16	; 22
   191ac:	c5 01       	movw	r24, r10
   191ae:	8c da       	rcall	.-2792   	; 0x186c8 <lif_dump_vol>
   191b0:	3d c0       	rjmp	.+122    	; 0x1922c <lif_writedirindex+0xae>
   191b2:	b6 01       	movw	r22, r12
   191b4:	c5 01       	movw	r24, r10
   191b6:	14 df       	rcall	.-472    	; 0x18fe0 <lif_checkdirindex>
   191b8:	89 2b       	or	r24, r25
   191ba:	99 f3       	breq	.-26     	; 0x191a2 <lif_writedirindex+0x24>
   191bc:	f5 01       	movw	r30, r10
   191be:	e6 5a       	subi	r30, 0xA6	; 166
   191c0:	ff 4f       	sbci	r31, 0xFF	; 255
   191c2:	80 81       	ld	r24, Z
   191c4:	91 81       	ldd	r25, Z+1	; 0x01
   191c6:	01 96       	adiw	r24, 0x01	; 1
   191c8:	19 f4       	brne	.+6      	; 0x191d0 <lif_writedirindex+0x52>
   191ca:	f5 01       	movw	r30, r10
   191cc:	d3 a2       	std	Z+35, r13	; 0x23
   191ce:	c2 a2       	std	Z+34, r12	; 0x22
   191d0:	f5 01       	movw	r30, r10
   191d2:	85 a5       	ldd	r24, Z+45	; 0x2d
   191d4:	96 a5       	ldd	r25, Z+46	; 0x2e
   191d6:	a7 a5       	ldd	r26, Z+47	; 0x2f
   191d8:	b0 a9       	ldd	r27, Z+48	; 0x30
   191da:	ba 2f       	mov	r27, r26
   191dc:	a9 2f       	mov	r26, r25
   191de:	98 2f       	mov	r25, r24
   191e0:	88 27       	eor	r24, r24
   191e2:	0d 2c       	mov	r0, r13
   191e4:	00 0c       	add	r0, r0
   191e6:	ee 08       	sbc	r14, r14
   191e8:	ff 08       	sbc	r15, r15
   191ea:	35 e0       	ldi	r19, 0x05	; 5
   191ec:	cc 0c       	add	r12, r12
   191ee:	dd 1c       	adc	r13, r13
   191f0:	ee 1c       	adc	r14, r14
   191f2:	ff 1c       	adc	r15, r15
   191f4:	3a 95       	dec	r19
   191f6:	d1 f7       	brne	.-12     	; 0x191ec <lif_writedirindex+0x6e>
   191f8:	c8 0e       	add	r12, r24
   191fa:	d9 1e       	adc	r13, r25
   191fc:	ea 1e       	adc	r14, r26
   191fe:	fb 1e       	adc	r15, r27
   19200:	be 01       	movw	r22, r28
   19202:	6f 5f       	subi	r22, 0xFF	; 255
   19204:	7f 4f       	sbci	r23, 0xFF	; 255
   19206:	c5 01       	movw	r24, r10
   19208:	97 d8       	rcall	.-3794   	; 0x18338 <lif_dir2str>
   1920a:	00 e2       	ldi	r16, 0x20	; 32
   1920c:	10 e0       	ldi	r17, 0x00	; 0
   1920e:	a7 01       	movw	r20, r14
   19210:	96 01       	movw	r18, r12
   19212:	be 01       	movw	r22, r28
   19214:	6f 5f       	subi	r22, 0xFF	; 255
   19216:	7f 4f       	sbci	r23, 0xFF	; 255
   19218:	c5 01       	movw	r24, r10
   1921a:	0e 94 51 bf 	call	0x17ea2	; 0x17ea2 <lif_write>
   1921e:	31 e0       	ldi	r19, 0x01	; 1
   19220:	20 e0       	ldi	r18, 0x00	; 0
   19222:	80 97       	sbiw	r24, 0x20	; 32
   19224:	0c f4       	brge	.+2      	; 0x19228 <lif_writedirindex+0xaa>
   19226:	30 e0       	ldi	r19, 0x00	; 0
   19228:	e3 2e       	mov	r14, r19
   1922a:	f2 2e       	mov	r15, r18
   1922c:	c7 01       	movw	r24, r14
   1922e:	a0 96       	adiw	r28, 0x20	; 32
   19230:	ea e0       	ldi	r30, 0x0A	; 10
   19232:	0c 94 80 e3 	jmp	0x1c700	; 0x1c700 <__epilogue_restores__+0x10>

00019236 <lif_writedirEOF>:
   19236:	0f 93       	push	r16
   19238:	1f 93       	push	r17
   1923a:	cf 93       	push	r28
   1923c:	df 93       	push	r29
   1923e:	ec 01       	movw	r28, r24
   19240:	8b 01       	movw	r16, r22
   19242:	33 da       	rcall	.-2970   	; 0x186aa <lif_dir_clear>
   19244:	fe 01       	movw	r30, r28
   19246:	e6 5a       	subi	r30, 0xA6	; 166
   19248:	ff 4f       	sbci	r31, 0xFF	; 255
   1924a:	8f ef       	ldi	r24, 0xFF	; 255
   1924c:	9f ef       	ldi	r25, 0xFF	; 255
   1924e:	91 83       	std	Z+1, r25	; 0x01
   19250:	80 83       	st	Z, r24
   19252:	1b a3       	std	Y+35, r17	; 0x23
   19254:	0a a3       	std	Y+34, r16	; 0x22
   19256:	b8 01       	movw	r22, r16
   19258:	ce 01       	movw	r24, r28
   1925a:	91 df       	rcall	.-222    	; 0x1917e <lif_writedirindex>
   1925c:	df 91       	pop	r29
   1925e:	cf 91       	pop	r28
   19260:	1f 91       	pop	r17
   19262:	0f 91       	pop	r16
   19264:	08 95       	ret

00019266 <lif_updatefree>:
/// @brief Update free space
/// @parameter[in] *LIF: LIF structure
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
   19266:	2f 92       	push	r2
   19268:	3f 92       	push	r3
   1926a:	4f 92       	push	r4
   1926c:	5f 92       	push	r5
   1926e:	6f 92       	push	r6
   19270:	7f 92       	push	r7
   19272:	8f 92       	push	r8
   19274:	af 92       	push	r10
   19276:	bf 92       	push	r11
   19278:	cf 92       	push	r12
   1927a:	df 92       	push	r13
   1927c:	ef 92       	push	r14
   1927e:	ff 92       	push	r15
   19280:	0f 93       	push	r16
   19282:	1f 93       	push	r17
   19284:	cf 93       	push	r28
   19286:	df 93       	push	r29
   19288:	cd b7       	in	r28, 0x3d	; 61
   1928a:	de b7       	in	r29, 0x3e	; 62
   1928c:	2f 97       	sbiw	r28, 0x0f	; 15
   1928e:	0f b6       	in	r0, 0x3f	; 63
   19290:	f8 94       	cli
   19292:	de bf       	out	0x3e, r29	; 62
   19294:	0f be       	out	0x3f, r0	; 63
   19296:	cd bf       	out	0x3d, r28	; 61
   19298:	9f 87       	std	Y+15, r25	; 0x0f
   1929a:	8e 87       	std	Y+14, r24	; 0x0e
    int index = 0;
    int purgeindex = -1;

// Start of free space
    uint32_t start = LIF->filestart;
   1929c:	fc 01       	movw	r30, r24
   1929e:	24 84       	ldd	r2, Z+12	; 0x0c
   192a0:	35 84       	ldd	r3, Z+13	; 0x0d
   192a2:	46 84       	ldd	r4, Z+14	; 0x0e
   192a4:	57 84       	ldd	r5, Z+15	; 0x0f
// Free sectors
    LIF->freesectors = LIF->filesectors;
   192a6:	80 89       	ldd	r24, Z+16	; 0x10
   192a8:	91 89       	ldd	r25, Z+17	; 0x11
   192aa:	a2 89       	ldd	r26, Z+18	; 0x12
   192ac:	b3 89       	ldd	r27, Z+19	; 0x13
   192ae:	80 8f       	std	Z+24, r24	; 0x18
   192b0:	91 8f       	std	Z+25, r25	; 0x19
   192b2:	a2 8f       	std	Z+26, r26	; 0x1a
   192b4:	b3 8f       	std	Z+27, r27	; 0x1b
// Used sectors
    LIF->usedsectors = 0;
   192b6:	14 8a       	std	Z+20, r1	; 0x14
   192b8:	15 8a       	std	Z+21, r1	; 0x15
   192ba:	16 8a       	std	Z+22, r1	; 0x16
   192bc:	17 8a       	std	Z+23, r1	; 0x17
// Purged files
    LIF->purged= 0;
   192be:	17 8e       	std	Z+31, r1	; 0x1f
   192c0:	16 8e       	std	Z+30, r1	; 0x1e
// Files
    LIF->files = 0;
   192c2:	15 8e       	std	Z+29, r1	; 0x1d
   192c4:	14 8e       	std	Z+28, r1	; 0x1c
// Director pointer
    LIF->dirindex = 0;
   192c6:	11 a2       	std	Z+33, r1	; 0x21
   192c8:	10 a2       	std	Z+32, r1	; 0x20
// Directory EOF record
    LIF->EOFindex = 0;
   192ca:	13 a2       	std	Z+35, r1	; 0x23
   192cc:	12 a2       	std	Z+34, r1	; 0x22
   192ce:	cc 24       	eor	r12, r12
   192d0:	c3 94       	inc	r12
   192d2:	d1 2c       	mov	r13, r1
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
    int index = 0;
    int purgeindex = -1;
   192d4:	0f ef       	ldi	r16, 0xFF	; 255
   192d6:	1f ef       	ldi	r17, 0xFF	; 255
        if( !lif_readdirindex(LIF,index) )
        {
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
   192d8:	e6 5a       	subi	r30, 0xA6	; 166
   192da:	ff 4f       	sbci	r31, 0xFF	; 255
   192dc:	f9 87       	std	Y+9, r31	; 0x09
   192de:	e8 87       	std	Y+8, r30	; 0x08
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   192e0:	ae 84       	ldd	r10, Y+14	; 0x0e
   192e2:	bf 84       	ldd	r11, Y+15	; 0x0f
   192e4:	fc e5       	ldi	r31, 0x5C	; 92
   192e6:	af 0e       	add	r10, r31
   192e8:	b1 1c       	adc	r11, r1
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   192ea:	8e 85       	ldd	r24, Y+14	; 0x0e
   192ec:	9f 85       	ldd	r25, Y+15	; 0x0f
   192ee:	80 5a       	subi	r24, 0xA0	; 160
   192f0:	9f 4f       	sbci	r25, 0xFF	; 255
   192f2:	9b 87       	std	Y+11, r25	; 0x0b
   192f4:	8a 87       	std	Y+10, r24	; 0x0a
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   192f6:	ee 85       	ldd	r30, Y+14	; 0x0e
   192f8:	ff 85       	ldd	r31, Y+15	; 0x0f
   192fa:	e1 5b       	subi	r30, 0xB1	; 177
   192fc:	ff 4f       	sbci	r31, 0xFF	; 255
   192fe:	fd 87       	std	Y+13, r31	; 0x0d
   19300:	ec 87       	std	Y+12, r30	; 0x0c
   19302:	8b e1       	ldi	r24, 0x1B	; 27
   19304:	99 e3       	ldi	r25, 0x39	; 57
   19306:	3c 01       	movw	r6, r24
   19308:	81 2c       	mov	r8, r1
   1930a:	76 01       	movw	r14, r12
   1930c:	21 e0       	ldi	r18, 0x01	; 1
   1930e:	e2 1a       	sub	r14, r18
   19310:	f1 08       	sbc	r15, r1
    LIF->EOFindex = 0;

/// Update free
    while(1)
    {
        if( !lif_readdirindex(LIF,index) )
   19312:	b7 01       	movw	r22, r14
   19314:	8e 85       	ldd	r24, Y+14	; 0x0e
   19316:	9f 85       	ldd	r25, Y+15	; 0x0f
   19318:	cb de       	rcall	.-618    	; 0x190b0 <lif_readdirindex>
   1931a:	89 2b       	or	r24, r25
   1931c:	19 f4       	brne	.+6      	; 0x19324 <lif_updatefree+0xbe>
        {
            return(NULL);
   1931e:	80 e0       	ldi	r24, 0x00	; 0
   19320:	90 e0       	ldi	r25, 0x00	; 0
   19322:	93 c0       	rjmp	.+294    	; 0x1944a <lif_updatefree+0x1e4>
        }

        if(LIF->DIR.FileType == 0xffff)
   19324:	e8 85       	ldd	r30, Y+8	; 0x08
   19326:	f9 85       	ldd	r31, Y+9	; 0x09
   19328:	80 81       	ld	r24, Z
   1932a:	91 81       	ldd	r25, Z+1	; 0x01
   1932c:	8f 3f       	cpi	r24, 0xFF	; 255
   1932e:	ff ef       	ldi	r31, 0xFF	; 255
   19330:	9f 07       	cpc	r25, r31
   19332:	c1 f4       	brne	.+48     	; 0x19364 <lif_updatefree+0xfe>
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
            {
                LIF->EOFindex = purgeindex;
   19334:	ee 85       	ldd	r30, Y+14	; 0x0e
   19336:	ff 85       	ldd	r31, Y+15	; 0x0f
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
   19338:	0f 3f       	cpi	r16, 0xFF	; 255
   1933a:	2f ef       	ldi	r18, 0xFF	; 255
   1933c:	12 07       	cpc	r17, r18
   1933e:	09 f4       	brne	.+2      	; 0x19342 <lif_updatefree+0xdc>
   19340:	7a c0       	rjmp	.+244    	; 0x19436 <lif_updatefree+0x1d0>
            {
                LIF->EOFindex = purgeindex;
   19342:	13 a3       	std	Z+35, r17	; 0x23
   19344:	02 a3       	std	Z+34, r16	; 0x22

// Adjust purged file count
                LIF->purged -= (index - purgeindex);
   19346:	e0 1a       	sub	r14, r16
   19348:	f1 0a       	sbc	r15, r17
   1934a:	86 8d       	ldd	r24, Z+30	; 0x1e
   1934c:	97 8d       	ldd	r25, Z+31	; 0x1f
   1934e:	8e 19       	sub	r24, r14
   19350:	9f 09       	sbc	r25, r15
   19352:	97 8f       	std	Z+31, r25	; 0x1f
   19354:	86 8f       	std	Z+30, r24	; 0x1e
// update EOF
                if(!lif_writedirEOF(LIF,purgeindex))
   19356:	b8 01       	movw	r22, r16
   19358:	cf 01       	movw	r24, r30
   1935a:	6d df       	rcall	.-294    	; 0x19236 <lif_writedirEOF>
   1935c:	89 2b       	or	r24, r25
   1935e:	09 f0       	breq	.+2      	; 0x19362 <lif_updatefree+0xfc>
   19360:	6c c0       	rjmp	.+216    	; 0x1943a <lif_updatefree+0x1d4>
   19362:	dd cf       	rjmp	.-70     	; 0x1931e <lif_updatefree+0xb8>
                    return(NULL);
                }
            }
            break;
        }
        if(LIF->DIR.FileType == 0)
   19364:	89 2b       	or	r24, r25
   19366:	81 f4       	brne	.+32     	; 0x19388 <lif_updatefree+0x122>
        {
            if(purgeindex == -1)
   19368:	0f 3f       	cpi	r16, 0xFF	; 255
   1936a:	ff ef       	ldi	r31, 0xFF	; 255
   1936c:	1f 07       	cpc	r17, r31
   1936e:	09 f4       	brne	.+2      	; 0x19372 <lif_updatefree+0x10c>
   19370:	87 01       	movw	r16, r14
                purgeindex = index;
            LIF->purged++;
   19372:	ee 85       	ldd	r30, Y+14	; 0x0e
   19374:	ff 85       	ldd	r31, Y+15	; 0x0f
   19376:	86 8d       	ldd	r24, Z+30	; 0x1e
   19378:	97 8d       	ldd	r25, Z+31	; 0x1f
   1937a:	01 96       	adiw	r24, 0x01	; 1
   1937c:	97 8f       	std	Z+31, r25	; 0x1f
   1937e:	86 8f       	std	Z+30, r24	; 0x1e
   19380:	ff ef       	ldi	r31, 0xFF	; 255
   19382:	cf 1a       	sub	r12, r31
   19384:	df 0a       	sbc	r13, r31
   19386:	c1 cf       	rjmp	.-126    	; 0x1930a <lif_updatefree+0xa4>
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   19388:	f5 01       	movw	r30, r10
   1938a:	80 81       	ld	r24, Z
   1938c:	91 81       	ldd	r25, Z+1	; 0x01
   1938e:	a2 81       	ldd	r26, Z+2	; 0x02
   19390:	b3 81       	ldd	r27, Z+3	; 0x03
   19392:	82 15       	cp	r24, r2
   19394:	93 05       	cpc	r25, r3
   19396:	a4 05       	cpc	r26, r4
   19398:	b5 05       	cpc	r27, r5
   1939a:	c8 f4       	brcc	.+50     	; 0x193ce <lif_updatefree+0x168>
        {
            if(debuglevel & LIF_DEBUG)
   1939c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   193a0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   193a4:	92 ff       	sbrs	r25, 2
   193a6:	13 c0       	rjmp	.+38     	; 0x193ce <lif_updatefree+0x168>
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   193a8:	8c 85       	ldd	r24, Y+12	; 0x0c
   193aa:	9d 85       	ldd	r25, Y+13	; 0x0d
   193ac:	ed b7       	in	r30, 0x3d	; 61
   193ae:	fe b7       	in	r31, 0x3e	; 62
   193b0:	97 83       	std	Z+7, r25	; 0x07
   193b2:	86 83       	std	Z+6, r24	; 0x06
   193b4:	ee 85       	ldd	r30, Y+14	; 0x0e
   193b6:	ff 85       	ldd	r31, Y+15	; 0x0f
   193b8:	80 81       	ld	r24, Z
   193ba:	91 81       	ldd	r25, Z+1	; 0x01
   193bc:	ed b7       	in	r30, 0x3d	; 61
   193be:	fe b7       	in	r31, 0x3e	; 62
   193c0:	95 83       	std	Z+5, r25	; 0x05
   193c2:	84 83       	std	Z+4, r24	; 0x04
   193c4:	61 82       	std	Z+1, r6	; 0x01
   193c6:	72 82       	std	Z+2, r7	; 0x02
   193c8:	83 82       	std	Z+3, r8	; 0x03
   193ca:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   193ce:	ea 85       	ldd	r30, Y+10	; 0x0a
   193d0:	fb 85       	ldd	r31, Y+11	; 0x0b
   193d2:	80 81       	ld	r24, Z
   193d4:	91 81       	ldd	r25, Z+1	; 0x01
   193d6:	a2 81       	ldd	r26, Z+2	; 0x02
   193d8:	b3 81       	ldd	r27, Z+3	; 0x03
   193da:	ee 85       	ldd	r30, Y+14	; 0x0e
   193dc:	ff 85       	ldd	r31, Y+15	; 0x0f
   193de:	44 89       	ldd	r20, Z+20	; 0x14
   193e0:	55 89       	ldd	r21, Z+21	; 0x15
   193e2:	66 89       	ldd	r22, Z+22	; 0x16
   193e4:	77 89       	ldd	r23, Z+23	; 0x17
   193e6:	48 0f       	add	r20, r24
   193e8:	59 1f       	adc	r21, r25
   193ea:	6a 1f       	adc	r22, r26
   193ec:	7b 1f       	adc	r23, r27
   193ee:	44 8b       	std	Z+20, r20	; 0x14
   193f0:	55 8b       	std	Z+21, r21	; 0x15
   193f2:	66 8b       	std	Z+22, r22	; 0x16
   193f4:	77 8b       	std	Z+23, r23	; 0x17
        LIF->freesectors -= LIF->DIR.FileSectors;
   193f6:	40 8d       	ldd	r20, Z+24	; 0x18
   193f8:	51 8d       	ldd	r21, Z+25	; 0x19
   193fa:	62 8d       	ldd	r22, Z+26	; 0x1a
   193fc:	73 8d       	ldd	r23, Z+27	; 0x1b
   193fe:	48 1b       	sub	r20, r24
   19400:	59 0b       	sbc	r21, r25
   19402:	6a 0b       	sbc	r22, r26
   19404:	7b 0b       	sbc	r23, r27
   19406:	40 8f       	std	Z+24, r20	; 0x18
   19408:	51 8f       	std	Z+25, r21	; 0x19
   1940a:	62 8f       	std	Z+26, r22	; 0x1a
   1940c:	73 8f       	std	Z+27, r23	; 0x1b
        LIF->files++;
   1940e:	24 8d       	ldd	r18, Z+28	; 0x1c
   19410:	35 8d       	ldd	r19, Z+29	; 0x1d
   19412:	2f 5f       	subi	r18, 0xFF	; 255
   19414:	3f 4f       	sbci	r19, 0xFF	; 255
   19416:	35 8f       	std	Z+29, r19	; 0x1d
   19418:	24 8f       	std	Z+28, r18	; 0x1c
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1941a:	f5 01       	movw	r30, r10
   1941c:	40 81       	ld	r20, Z
   1941e:	51 81       	ldd	r21, Z+1	; 0x01
   19420:	62 81       	ldd	r22, Z+2	; 0x02
   19422:	73 81       	ldd	r23, Z+3	; 0x03
   19424:	1c 01       	movw	r2, r24
   19426:	2d 01       	movw	r4, r26
   19428:	24 0e       	add	r2, r20
   1942a:	35 1e       	adc	r3, r21
   1942c:	46 1e       	adc	r4, r22
   1942e:	57 1e       	adc	r5, r23
                purgeindex = index;
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
   19430:	0f ef       	ldi	r16, 0xFF	; 255
   19432:	1f ef       	ldi	r17, 0xFF	; 255
   19434:	a5 cf       	rjmp	.-182    	; 0x19380 <lif_updatefree+0x11a>
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
   19436:	f3 a2       	std	Z+35, r15	; 0x23
   19438:	e2 a2       	std	Z+34, r14	; 0x22
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   1943a:	8f ef       	ldi	r24, 0xFF	; 255
   1943c:	9f ef       	ldi	r25, 0xFF	; 255
   1943e:	ee 85       	ldd	r30, Y+14	; 0x0e
   19440:	ff 85       	ldd	r31, Y+15	; 0x0f
   19442:	91 a3       	std	Z+33, r25	; 0x21
   19444:	80 a3       	std	Z+32, r24	; 0x20
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
    }
// rewind
    lif_rewinddir(LIF);
    return(LIF);
   19446:	8e 85       	ldd	r24, Y+14	; 0x0e
   19448:	9f 85       	ldd	r25, Y+15	; 0x0f
}
   1944a:	2f 96       	adiw	r28, 0x0f	; 15
   1944c:	0f b6       	in	r0, 0x3f	; 63
   1944e:	f8 94       	cli
   19450:	de bf       	out	0x3e, r29	; 62
   19452:	0f be       	out	0x3f, r0	; 63
   19454:	cd bf       	out	0x3d, r28	; 61
   19456:	df 91       	pop	r29
   19458:	cf 91       	pop	r28
   1945a:	1f 91       	pop	r17
   1945c:	0f 91       	pop	r16
   1945e:	ff 90       	pop	r15
   19460:	ef 90       	pop	r14
   19462:	df 90       	pop	r13
   19464:	cf 90       	pop	r12
   19466:	bf 90       	pop	r11
   19468:	af 90       	pop	r10
   1946a:	8f 90       	pop	r8
   1946c:	7f 90       	pop	r7
   1946e:	6f 90       	pop	r6
   19470:	5f 90       	pop	r5
   19472:	4f 90       	pop	r4
   19474:	3f 90       	pop	r3
   19476:	2f 90       	pop	r2
   19478:	08 95       	ret

0001947a <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   1947a:	a9 e2       	ldi	r26, 0x29	; 41
   1947c:	b1 e0       	ldi	r27, 0x01	; 1
   1947e:	e3 e4       	ldi	r30, 0x43	; 67
   19480:	fa ec       	ldi	r31, 0xCA	; 202
   19482:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
   19486:	4c 01       	movw	r8, r24
   19488:	3b 01       	movw	r6, r22
   1948a:	19 01       	movw	r2, r18
   1948c:	2a 01       	movw	r4, r20
   1948e:	ca 5d       	subi	r28, 0xDA	; 218
   19490:	de 4f       	sbci	r29, 0xFE	; 254
   19492:	e8 82       	st	Y, r14
   19494:	f9 82       	std	Y+1, r15	; 0x01
   19496:	0a 83       	std	Y+2, r16	; 0x02
   19498:	1b 83       	std	Y+3, r17	; 0x03
   1949a:	c6 52       	subi	r28, 0x26	; 38
   1949c:	d1 40       	sbci	r29, 0x01	; 1
   1949e:	c2 5e       	subi	r28, 0xE2	; 226
   194a0:	de 4f       	sbci	r29, 0xFE	; 254
   194a2:	a8 82       	st	Y, r10
   194a4:	b9 82       	std	Y+1, r11	; 0x01
   194a6:	ca 82       	std	Y+2, r12	; 0x02
   194a8:	db 82       	std	Y+3, r13	; 0x03
   194aa:	ce 51       	subi	r28, 0x1E	; 30
   194ac:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   194ae:	80 e0       	ldi	r24, 0x00	; 0
   194b0:	90 e0       	ldi	r25, 0x00	; 0
   194b2:	0e 94 10 36 	call	0x6c20	; 0x6c20 <time>
   194b6:	5b 01       	movw	r10, r22
   194b8:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   194ba:	64 e7       	ldi	r22, 0x74	; 116
   194bc:	70 e0       	ldi	r23, 0x00	; 0
   194be:	80 e0       	ldi	r24, 0x00	; 0
   194c0:	90 e0       	ldi	r25, 0x00	; 0
   194c2:	0e 94 10 be 	call	0x17c20	; 0x17c20 <lif_calloc>
   194c6:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   194c8:	89 2b       	or	r24, r25
   194ca:	09 f4       	brne	.+2      	; 0x194ce <lif_create_volume+0x54>
   194cc:	b6 c2       	rjmp	.+1388   	; 0x19a3a <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   194ce:	c2 5e       	subi	r28, 0xE2	; 226
   194d0:	de 4f       	sbci	r29, 0xFE	; 254
   194d2:	28 81       	ld	r18, Y
   194d4:	39 81       	ldd	r19, Y+1	; 0x01
   194d6:	4a 81       	ldd	r20, Y+2	; 0x02
   194d8:	5b 81       	ldd	r21, Y+3	; 0x03
   194da:	ce 51       	subi	r28, 0x1E	; 30
   194dc:	d1 40       	sbci	r29, 0x01	; 1
   194de:	ed b7       	in	r30, 0x3d	; 61
   194e0:	fe b7       	in	r31, 0x3e	; 62
   194e2:	20 8b       	std	Z+16, r18	; 0x10
   194e4:	31 8b       	std	Z+17, r19	; 0x11
   194e6:	42 8b       	std	Z+18, r20	; 0x12
   194e8:	53 8b       	std	Z+19, r21	; 0x13
   194ea:	ca 5d       	subi	r28, 0xDA	; 218
   194ec:	de 4f       	sbci	r29, 0xFE	; 254
   194ee:	28 81       	ld	r18, Y
   194f0:	39 81       	ldd	r19, Y+1	; 0x01
   194f2:	4a 81       	ldd	r20, Y+2	; 0x02
   194f4:	5b 81       	ldd	r21, Y+3	; 0x03
   194f6:	c6 52       	subi	r28, 0x26	; 38
   194f8:	d1 40       	sbci	r29, 0x01	; 1
   194fa:	24 87       	std	Z+12, r18	; 0x0c
   194fc:	35 87       	std	Z+13, r19	; 0x0d
   194fe:	46 87       	std	Z+14, r20	; 0x0e
   19500:	57 87       	std	Z+15, r21	; 0x0f
   19502:	20 86       	std	Z+8, r2	; 0x08
   19504:	31 86       	std	Z+9, r3	; 0x09
   19506:	42 86       	std	Z+10, r4	; 0x0a
   19508:	53 86       	std	Z+11, r5	; 0x0b
   1950a:	77 82       	std	Z+7, r7	; 0x07
   1950c:	66 82       	std	Z+6, r6	; 0x06
   1950e:	95 82       	std	Z+5, r9	; 0x05
   19510:	84 82       	std	Z+4, r8	; 0x04
   19512:	86 ef       	ldi	r24, 0xF6	; 246
   19514:	99 e3       	ldi	r25, 0x39	; 57
   19516:	a0 e0       	ldi	r26, 0x00	; 0
   19518:	81 83       	std	Z+1, r24	; 0x01
   1951a:	92 83       	std	Z+2, r25	; 0x02
   1951c:	a3 83       	std	Z+3, r26	; 0x03
   1951e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   19522:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19526:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1952a:	92 ff       	sbrs	r25, 2
   1952c:	04 c0       	rjmp	.+8      	; 0x19536 <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   1952e:	60 e3       	ldi	r22, 0x30	; 48
   19530:	76 e1       	ldi	r23, 0x16	; 22
   19532:	c7 01       	movw	r24, r14
   19534:	c9 d8       	rcall	.-3694   	; 0x186c8 <lif_dump_vol>

    lif_image_clear(LIF);
   19536:	c7 01       	movw	r24, r14
   19538:	b2 d8       	rcall	.-3740   	; 0x1869e <lif_image_clear>

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   1953a:	80 e0       	ldi	r24, 0x00	; 0
   1953c:	90 e8       	ldi	r25, 0x80	; 128
   1953e:	f7 01       	movw	r30, r14
   19540:	95 a3       	std	Z+37, r25	; 0x25
   19542:	84 a3       	std	Z+36, r24	; 0x24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   19544:	46 e0       	ldi	r20, 0x06	; 6
   19546:	50 e0       	ldi	r21, 0x00	; 0
   19548:	b3 01       	movw	r22, r6
   1954a:	c7 01       	movw	r24, r14
   1954c:	86 96       	adiw	r24, 0x26	; 38
   1954e:	0e 94 53 c0 	call	0x180a6	; 0x180a6 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   19552:	f7 01       	movw	r30, r14
   19554:	25 a6       	std	Z+45, r2	; 0x2d
   19556:	36 a6       	std	Z+46, r3	; 0x2e
   19558:	47 a6       	std	Z+47, r4	; 0x2f
   1955a:	50 aa       	std	Z+48, r5	; 0x30
    LIF->VOL.DirSectors = dirsectors;
   1955c:	ca 5d       	subi	r28, 0xDA	; 218
   1955e:	de 4f       	sbci	r29, 0xFE	; 254
   19560:	28 81       	ld	r18, Y
   19562:	39 81       	ldd	r19, Y+1	; 0x01
   19564:	4a 81       	ldd	r20, Y+2	; 0x02
   19566:	5b 81       	ldd	r21, Y+3	; 0x03
   19568:	c6 52       	subi	r28, 0x26	; 38
   1956a:	d1 40       	sbci	r29, 0x01	; 1
   1956c:	25 ab       	std	Z+53, r18	; 0x35
   1956e:	36 ab       	std	Z+54, r19	; 0x36
   19570:	47 ab       	std	Z+55, r20	; 0x37
   19572:	50 af       	std	Z+56, r21	; 0x38
    LIF->VOL.System3000LIFid = 0x1000;
   19574:	80 e0       	ldi	r24, 0x00	; 0
   19576:	90 e1       	ldi	r25, 0x10	; 16
   19578:	92 ab       	std	Z+50, r25	; 0x32
   1957a:	81 ab       	std	Z+49, r24	; 0x31
    LIF->VOL.tracks_per_side = 0;
   1957c:	fd 96       	adiw	r30, 0x3d	; 61
   1957e:	10 82       	st	Z, r1
   19580:	11 82       	std	Z+1, r1	; 0x01
   19582:	12 82       	std	Z+2, r1	; 0x02
   19584:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sides = 0;
   19586:	34 96       	adiw	r30, 0x04	; 4
   19588:	10 82       	st	Z, r1
   1958a:	11 82       	std	Z+1, r1	; 0x01
   1958c:	12 82       	std	Z+2, r1	; 0x02
   1958e:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sectors_per_track = 0;
   19590:	34 96       	adiw	r30, 0x04	; 4
   19592:	10 82       	st	Z, r1
   19594:	11 82       	std	Z+1, r1	; 0x01
   19596:	12 82       	std	Z+2, r1	; 0x02
   19598:	13 82       	std	Z+3, r1	; 0x03
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   1959a:	a7 01       	movw	r20, r14
   1959c:	47 5b       	subi	r20, 0xB7	; 183
   1959e:	5f 4f       	sbci	r21, 0xFF	; 255
   195a0:	c6 01       	movw	r24, r12
   195a2:	b5 01       	movw	r22, r10
   195a4:	0e 94 78 c2 	call	0x184f0	; 0x184f0 <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   195a8:	c4 01       	movw	r24, r8
   195aa:	0e 94 5b be 	call	0x17cb6	; 0x17cb6 <lif_stralloc>
   195ae:	d7 01       	movw	r26, r14
   195b0:	8d 93       	st	X+, r24
   195b2:	9c 93       	st	X, r25
    if(LIF->name == NULL)
   195b4:	89 2b       	or	r24, r25
   195b6:	09 f4       	brne	.+2      	; 0x195ba <lif_create_volume+0x140>
   195b8:	35 c2       	rjmp	.+1130   	; 0x19a24 <lif_create_volume+0x5aa>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   195ba:	c2 5e       	subi	r28, 0xE2	; 226
   195bc:	de 4f       	sbci	r29, 0xFE	; 254
   195be:	28 81       	ld	r18, Y
   195c0:	39 81       	ldd	r19, Y+1	; 0x01
   195c2:	4a 81       	ldd	r20, Y+2	; 0x02
   195c4:	5b 81       	ldd	r21, Y+3	; 0x03
   195c6:	ce 51       	subi	r28, 0x1E	; 30
   195c8:	d1 40       	sbci	r29, 0x01	; 1
   195ca:	f7 01       	movw	r30, r14
   195cc:	20 8b       	std	Z+16, r18	; 0x10
   195ce:	31 8b       	std	Z+17, r19	; 0x11
   195d0:	42 8b       	std	Z+18, r20	; 0x12
   195d2:	53 8b       	std	Z+19, r21	; 0x13
    LIF->filestart = dirstart + dirsectors;
   195d4:	ca 5d       	subi	r28, 0xDA	; 218
   195d6:	de 4f       	sbci	r29, 0xFE	; 254
   195d8:	88 81       	ld	r24, Y
   195da:	99 81       	ldd	r25, Y+1	; 0x01
   195dc:	aa 81       	ldd	r26, Y+2	; 0x02
   195de:	bb 81       	ldd	r27, Y+3	; 0x03
   195e0:	c6 52       	subi	r28, 0x26	; 38
   195e2:	d1 40       	sbci	r29, 0x01	; 1
   195e4:	82 0d       	add	r24, r2
   195e6:	93 1d       	adc	r25, r3
   195e8:	a4 1d       	adc	r26, r4
   195ea:	b5 1d       	adc	r27, r5
   195ec:	84 87       	std	Z+12, r24	; 0x0c
   195ee:	95 87       	std	Z+13, r25	; 0x0d
   195f0:	a6 87       	std	Z+14, r26	; 0x0e
   195f2:	b7 87       	std	Z+15, r27	; 0x0f
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   195f4:	82 0f       	add	r24, r18
   195f6:	93 1f       	adc	r25, r19
   195f8:	a4 1f       	adc	r26, r20
   195fa:	b5 1f       	adc	r27, r21
   195fc:	84 83       	std	Z+4, r24	; 0x04
   195fe:	95 83       	std	Z+5, r25	; 0x05
   19600:	a6 83       	std	Z+6, r26	; 0x06
   19602:	b7 83       	std	Z+7, r27	; 0x07
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19604:	ba 2f       	mov	r27, r26
   19606:	a9 2f       	mov	r26, r25
   19608:	98 2f       	mov	r25, r24
   1960a:	88 27       	eor	r24, r24
   1960c:	80 87       	std	Z+8, r24	; 0x08
   1960e:	91 87       	std	Z+9, r25	; 0x09
   19610:	a2 87       	std	Z+10, r26	; 0x0a
   19612:	b3 87       	std	Z+11, r27	; 0x0b
    LIF->freesectors = LIF->filesectors;
   19614:	20 8f       	std	Z+24, r18	; 0x18
   19616:	31 8f       	std	Z+25, r19	; 0x19
   19618:	42 8f       	std	Z+26, r20	; 0x1a
   1961a:	53 8f       	std	Z+27, r21	; 0x1b
    LIF->usedsectors = 0;
   1961c:	14 8a       	std	Z+20, r1	; 0x14
   1961e:	15 8a       	std	Z+21, r1	; 0x15
   19620:	16 8a       	std	Z+22, r1	; 0x16
   19622:	17 8a       	std	Z+23, r1	; 0x17
    LIF->files = 0;
   19624:	15 8e       	std	Z+29, r1	; 0x1d
   19626:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->purged = 0;
   19628:	17 8e       	std	Z+31, r1	; 0x1f
   1962a:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->dirindex = 0;
   1962c:	11 a2       	std	Z+33, r1	; 0x21
   1962e:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19630:	13 a2       	std	Z+35, r1	; 0x23
   19632:	12 a2       	std	Z+34, r1	; 0x22

    memset(buffer,0,LIF_SECTOR_SIZE);
   19634:	61 2c       	mov	r6, r1
   19636:	77 24       	eor	r7, r7
   19638:	73 94       	inc	r7
   1963a:	9e 01       	movw	r18, r28
   1963c:	2c 5e       	subi	r18, 0xEC	; 236
   1963e:	3f 4f       	sbci	r19, 0xFF	; 255
   19640:	49 01       	movw	r8, r18
   19642:	d9 01       	movw	r26, r18
   19644:	f3 01       	movw	r30, r6
   19646:	1d 92       	st	X+, r1
   19648:	31 97       	sbiw	r30, 0x01	; 1
   1964a:	e9 f7       	brne	.-6      	; 0x19646 <lif_create_volume+0x1cc>

    lif_vol2str(LIF,buffer);
   1964c:	b9 01       	movw	r22, r18
   1964e:	c7 01       	movw	r24, r14
   19650:	0e 94 90 c0 	call	0x18120	; 0x18120 <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19654:	66 e1       	ldi	r22, 0x16	; 22
   19656:	79 e0       	ldi	r23, 0x09	; 9
   19658:	d7 01       	movw	r26, r14
   1965a:	8d 91       	ld	r24, X+
   1965c:	9c 91       	ld	r25, X
   1965e:	0e 94 7a be 	call	0x17cf4	; 0x17cf4 <lif_open>
   19662:	f7 01       	movw	r30, r14
   19664:	93 83       	std	Z+3, r25	; 0x03
   19666:	82 83       	std	Z+2, r24	; 0x02
    if(LIF->fp == NULL)
   19668:	89 2b       	or	r24, r25
   1966a:	09 f4       	brne	.+2      	; 0x1966e <lif_create_volume+0x1f4>
   1966c:	db c1       	rjmp	.+950    	; 0x19a24 <lif_create_volume+0x5aa>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1966e:	00 e0       	ldi	r16, 0x00	; 0
   19670:	11 e0       	ldi	r17, 0x01	; 1
   19672:	20 e0       	ldi	r18, 0x00	; 0
   19674:	30 e0       	ldi	r19, 0x00	; 0
   19676:	a9 01       	movw	r20, r18
   19678:	b4 01       	movw	r22, r8
   1967a:	c7 01       	movw	r24, r14
   1967c:	0e 94 51 bf 	call	0x17ea2	; 0x17ea2 <lif_write>
   19680:	9c 01       	movw	r18, r24
   19682:	99 0f       	add	r25, r25
   19684:	44 0b       	sbc	r20, r20
   19686:	55 0b       	sbc	r21, r21
   19688:	ca 5e       	subi	r28, 0xEA	; 234
   1968a:	de 4f       	sbci	r29, 0xFE	; 254
   1968c:	28 83       	st	Y, r18
   1968e:	39 83       	std	Y+1, r19	; 0x01
   19690:	4a 83       	std	Y+2, r20	; 0x02
   19692:	5b 83       	std	Y+3, r21	; 0x03
   19694:	c6 51       	subi	r28, 0x16	; 22
   19696:	d1 40       	sbci	r29, 0x01	; 1

    if(size < LIF_SECTOR_SIZE)
   19698:	2f 3f       	cpi	r18, 0xFF	; 255
   1969a:	31 05       	cpc	r19, r1
   1969c:	41 05       	cpc	r20, r1
   1969e:	51 05       	cpc	r21, r1
   196a0:	09 f0       	breq	.+2      	; 0x196a4 <lif_create_volume+0x22a>
   196a2:	0c f4       	brge	.+2      	; 0x196a6 <lif_create_volume+0x22c>
   196a4:	bf c1       	rjmp	.+894    	; 0x19a24 <lif_create_volume+0x5aa>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   196a6:	d4 01       	movw	r26, r8
   196a8:	f3 01       	movw	r30, r6
   196aa:	1d 92       	st	X+, r1
   196ac:	31 97       	sbiw	r30, 0x01	; 1
   196ae:	e9 f7       	brne	.-6      	; 0x196aa <lif_create_volume+0x230>

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   196b0:	21 e0       	ldi	r18, 0x01	; 1
   196b2:	30 e0       	ldi	r19, 0x00	; 0
   196b4:	40 e0       	ldi	r20, 0x00	; 0
   196b6:	50 e0       	ldi	r21, 0x00	; 0
   196b8:	c6 5e       	subi	r28, 0xE6	; 230
   196ba:	de 4f       	sbci	r29, 0xFE	; 254
   196bc:	28 83       	st	Y, r18
   196be:	39 83       	std	Y+1, r19	; 0x01
   196c0:	4a 83       	std	Y+2, r20	; 0x02
   196c2:	5b 83       	std	Y+3, r21	; 0x03
   196c4:	ca 51       	subi	r28, 0x1A	; 26
   196c6:	d1 40       	sbci	r29, 0x01	; 1
   196c8:	64 01       	movw	r12, r8
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   196ca:	89 ee       	ldi	r24, 0xE9	; 233
   196cc:	99 e3       	ldi	r25, 0x39	; 57
   196ce:	3c 01       	movw	r6, r24
   196d0:	81 2c       	mov	r8, r1
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   196d2:	c6 5e       	subi	r28, 0xE6	; 230
   196d4:	de 4f       	sbci	r29, 0xFE	; 254
   196d6:	88 81       	ld	r24, Y
   196d8:	99 81       	ldd	r25, Y+1	; 0x01
   196da:	aa 81       	ldd	r26, Y+2	; 0x02
   196dc:	bb 81       	ldd	r27, Y+3	; 0x03
   196de:	ca 51       	subi	r28, 0x1A	; 26
   196e0:	d1 40       	sbci	r29, 0x01	; 1
   196e2:	82 15       	cp	r24, r2
   196e4:	93 05       	cpc	r25, r3
   196e6:	a4 05       	cpc	r26, r4
   196e8:	b5 05       	cpc	r27, r5
   196ea:	0c f0       	brlt	.+2      	; 0x196ee <lif_create_volume+0x274>
   196ec:	55 c0       	rjmp	.+170    	; 0x19798 <lif_create_volume+0x31e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   196ee:	00 e0       	ldi	r16, 0x00	; 0
   196f0:	11 e0       	ldi	r17, 0x01	; 1
   196f2:	ca 5e       	subi	r28, 0xEA	; 234
   196f4:	de 4f       	sbci	r29, 0xFE	; 254
   196f6:	28 81       	ld	r18, Y
   196f8:	39 81       	ldd	r19, Y+1	; 0x01
   196fa:	4a 81       	ldd	r20, Y+2	; 0x02
   196fc:	5b 81       	ldd	r21, Y+3	; 0x03
   196fe:	c6 51       	subi	r28, 0x16	; 22
   19700:	d1 40       	sbci	r29, 0x01	; 1
   19702:	b6 01       	movw	r22, r12
   19704:	c7 01       	movw	r24, r14
   19706:	0e 94 51 bf 	call	0x17ea2	; 0x17ea2 <lif_write>
   1970a:	09 2e       	mov	r0, r25
   1970c:	00 0c       	add	r0, r0
   1970e:	aa 0b       	sbc	r26, r26
   19710:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19712:	8f 3f       	cpi	r24, 0xFF	; 255
   19714:	91 05       	cpc	r25, r1
   19716:	a1 05       	cpc	r26, r1
   19718:	b1 05       	cpc	r27, r1
   1971a:	09 f0       	breq	.+2      	; 0x1971e <lif_create_volume+0x2a4>
   1971c:	0c f4       	brge	.+2      	; 0x19720 <lif_create_volume+0x2a6>
   1971e:	82 c1       	rjmp	.+772    	; 0x19a24 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19720:	ca 5e       	subi	r28, 0xEA	; 234
   19722:	de 4f       	sbci	r29, 0xFE	; 254
   19724:	28 81       	ld	r18, Y
   19726:	39 81       	ldd	r19, Y+1	; 0x01
   19728:	4a 81       	ldd	r20, Y+2	; 0x02
   1972a:	5b 81       	ldd	r21, Y+3	; 0x03
   1972c:	c6 51       	subi	r28, 0x16	; 22
   1972e:	d1 40       	sbci	r29, 0x01	; 1
   19730:	28 0f       	add	r18, r24
   19732:	39 1f       	adc	r19, r25
   19734:	4a 1f       	adc	r20, r26
   19736:	5b 1f       	adc	r21, r27
   19738:	ca 5e       	subi	r28, 0xEA	; 234
   1973a:	de 4f       	sbci	r29, 0xFE	; 254
   1973c:	28 83       	st	Y, r18
   1973e:	39 83       	std	Y+1, r19	; 0x01
   19740:	4a 83       	std	Y+2, r20	; 0x02
   19742:	5b 83       	std	Y+3, r21	; 0x03
   19744:	c6 51       	subi	r28, 0x16	; 22
   19746:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
   19748:	c6 5e       	subi	r28, 0xE6	; 230
   1974a:	de 4f       	sbci	r29, 0xFE	; 254
   1974c:	88 81       	ld	r24, Y
   1974e:	99 81       	ldd	r25, Y+1	; 0x01
   19750:	aa 81       	ldd	r26, Y+2	; 0x02
   19752:	bb 81       	ldd	r27, Y+3	; 0x03
   19754:	ca 51       	subi	r28, 0x1A	; 26
   19756:	d1 40       	sbci	r29, 0x01	; 1
   19758:	ed b7       	in	r30, 0x3d	; 61
   1975a:	fe b7       	in	r31, 0x3e	; 62
   1975c:	84 83       	std	Z+4, r24	; 0x04
   1975e:	95 83       	std	Z+5, r25	; 0x05
   19760:	a6 83       	std	Z+6, r26	; 0x06
   19762:	b7 83       	std	Z+7, r27	; 0x07
   19764:	61 82       	std	Z+1, r6	; 0x01
   19766:	72 82       	std	Z+2, r7	; 0x02
   19768:	83 82       	std	Z+3, r8	; 0x03
   1976a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1976e:	c6 5e       	subi	r28, 0xE6	; 230
   19770:	de 4f       	sbci	r29, 0xFE	; 254
   19772:	28 81       	ld	r18, Y
   19774:	39 81       	ldd	r19, Y+1	; 0x01
   19776:	4a 81       	ldd	r20, Y+2	; 0x02
   19778:	5b 81       	ldd	r21, Y+3	; 0x03
   1977a:	ca 51       	subi	r28, 0x1A	; 26
   1977c:	d1 40       	sbci	r29, 0x01	; 1
   1977e:	2f 5f       	subi	r18, 0xFF	; 255
   19780:	3f 4f       	sbci	r19, 0xFF	; 255
   19782:	4f 4f       	sbci	r20, 0xFF	; 255
   19784:	5f 4f       	sbci	r21, 0xFF	; 255
   19786:	c6 5e       	subi	r28, 0xE6	; 230
   19788:	de 4f       	sbci	r29, 0xFE	; 254
   1978a:	28 83       	st	Y, r18
   1978c:	39 83       	std	Y+1, r19	; 0x01
   1978e:	4a 83       	std	Y+2, r20	; 0x02
   19790:	5b 83       	std	Y+3, r21	; 0x03
   19792:	ca 51       	subi	r28, 0x1A	; 26
   19794:	d1 40       	sbci	r29, 0x01	; 1
   19796:	9d cf       	rjmp	.-198    	; 0x196d2 <lif_create_volume+0x258>
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   19798:	c7 01       	movw	r24, r14
   1979a:	0e 94 55 c3 	call	0x186aa	; 0x186aa <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   1979e:	8f ef       	ldi	r24, 0xFF	; 255
   197a0:	9f ef       	ldi	r25, 0xFF	; 255
   197a2:	f7 01       	movw	r30, r14
   197a4:	e6 5a       	subi	r30, 0xA6	; 166
   197a6:	ff 4f       	sbci	r31, 0xFF	; 255
   197a8:	91 83       	std	Z+1, r25	; 0x01
   197aa:	80 83       	st	Z, r24
   197ac:	46 01       	movw	r8, r12
   197ae:	6e 01       	movw	r12, r28
   197b0:	9c ee       	ldi	r25, 0xEC	; 236
   197b2:	c9 1a       	sub	r12, r25
   197b4:	9e ef       	ldi	r25, 0xFE	; 254
   197b6:	d9 0a       	sbc	r13, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   197b8:	b4 01       	movw	r22, r8
   197ba:	c7 01       	movw	r24, r14
   197bc:	0e 94 9c c1 	call	0x18338	; 0x18338 <lif_dir2str>
   197c0:	a0 e2       	ldi	r26, 0x20	; 32
   197c2:	8a 0e       	add	r8, r26
   197c4:	91 1c       	adc	r9, r1

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   197c6:	c8 14       	cp	r12, r8
   197c8:	d9 04       	cpc	r13, r9
   197ca:	b1 f7       	brne	.-20     	; 0x197b8 <lif_create_volume+0x33e>
   197cc:	a1 2c       	mov	r10, r1
   197ce:	b1 2c       	mov	r11, r1
   197d0:	65 01       	movw	r12, r10
   197d2:	fe 01       	movw	r30, r28
   197d4:	74 96       	adiw	r30, 0x14	; 20
   197d6:	cc 5e       	subi	r28, 0xEC	; 236
   197d8:	de 4f       	sbci	r29, 0xFE	; 254
   197da:	f9 83       	std	Y+1, r31	; 0x01
   197dc:	e8 83       	st	Y, r30
   197de:	c4 51       	subi	r28, 0x14	; 20
   197e0:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   197e2:	84 e6       	ldi	r24, 0x64	; 100
   197e4:	28 2e       	mov	r2, r24
   197e6:	31 2c       	mov	r3, r1
   197e8:	41 2c       	mov	r4, r1
   197ea:	51 2c       	mov	r5, r1
            printf("\tWrote: %ld\r", count);
   197ec:	8c ed       	ldi	r24, 0xDC	; 220
   197ee:	99 e3       	ldi	r25, 0x39	; 57
   197f0:	3c 01       	movw	r6, r24
   197f2:	81 2c       	mov	r8, r1
   197f4:	c6 5e       	subi	r28, 0xE6	; 230
   197f6:	de 4f       	sbci	r29, 0xFE	; 254
   197f8:	28 81       	ld	r18, Y
   197fa:	39 81       	ldd	r19, Y+1	; 0x01
   197fc:	4a 81       	ldd	r20, Y+2	; 0x02
   197fe:	5b 81       	ldd	r21, Y+3	; 0x03
   19800:	ca 51       	subi	r28, 0x1A	; 26
   19802:	d1 40       	sbci	r29, 0x01	; 1
   19804:	2a 0d       	add	r18, r10
   19806:	3b 1d       	adc	r19, r11
   19808:	4c 1d       	adc	r20, r12
   1980a:	5d 1d       	adc	r21, r13
   1980c:	ce 5d       	subi	r28, 0xDE	; 222
   1980e:	de 4f       	sbci	r29, 0xFE	; 254
   19810:	28 83       	st	Y, r18
   19812:	39 83       	std	Y+1, r19	; 0x01
   19814:	4a 83       	std	Y+2, r20	; 0x02
   19816:	5b 83       	std	Y+3, r21	; 0x03
   19818:	c2 52       	subi	r28, 0x22	; 34
   1981a:	d1 40       	sbci	r29, 0x01	; 1
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1981c:	ca 5d       	subi	r28, 0xDA	; 218
   1981e:	de 4f       	sbci	r29, 0xFE	; 254
   19820:	88 81       	ld	r24, Y
   19822:	99 81       	ldd	r25, Y+1	; 0x01
   19824:	aa 81       	ldd	r26, Y+2	; 0x02
   19826:	bb 81       	ldd	r27, Y+3	; 0x03
   19828:	c6 52       	subi	r28, 0x26	; 38
   1982a:	d1 40       	sbci	r29, 0x01	; 1
   1982c:	a8 16       	cp	r10, r24
   1982e:	b9 06       	cpc	r11, r25
   19830:	ca 06       	cpc	r12, r26
   19832:	db 06       	cpc	r13, r27
   19834:	0c f0       	brlt	.+2      	; 0x19838 <lif_create_volume+0x3be>
   19836:	58 c0       	rjmp	.+176    	; 0x198e8 <lif_create_volume+0x46e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19838:	00 e0       	ldi	r16, 0x00	; 0
   1983a:	11 e0       	ldi	r17, 0x01	; 1
   1983c:	ca 5e       	subi	r28, 0xEA	; 234
   1983e:	de 4f       	sbci	r29, 0xFE	; 254
   19840:	28 81       	ld	r18, Y
   19842:	39 81       	ldd	r19, Y+1	; 0x01
   19844:	4a 81       	ldd	r20, Y+2	; 0x02
   19846:	5b 81       	ldd	r21, Y+3	; 0x03
   19848:	c6 51       	subi	r28, 0x16	; 22
   1984a:	d1 40       	sbci	r29, 0x01	; 1
   1984c:	be 01       	movw	r22, r28
   1984e:	6c 5e       	subi	r22, 0xEC	; 236
   19850:	7f 4f       	sbci	r23, 0xFF	; 255
   19852:	c7 01       	movw	r24, r14
   19854:	0e 94 51 bf 	call	0x17ea2	; 0x17ea2 <lif_write>
   19858:	09 2e       	mov	r0, r25
   1985a:	00 0c       	add	r0, r0
   1985c:	aa 0b       	sbc	r26, r26
   1985e:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19860:	8f 3f       	cpi	r24, 0xFF	; 255
   19862:	91 05       	cpc	r25, r1
   19864:	a1 05       	cpc	r26, r1
   19866:	b1 05       	cpc	r27, r1
   19868:	09 f0       	breq	.+2      	; 0x1986c <lif_create_volume+0x3f2>
   1986a:	0c f4       	brge	.+2      	; 0x1986e <lif_create_volume+0x3f4>
   1986c:	db c0       	rjmp	.+438    	; 0x19a24 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1986e:	ca 5e       	subi	r28, 0xEA	; 234
   19870:	de 4f       	sbci	r29, 0xFE	; 254
   19872:	28 81       	ld	r18, Y
   19874:	39 81       	ldd	r19, Y+1	; 0x01
   19876:	4a 81       	ldd	r20, Y+2	; 0x02
   19878:	5b 81       	ldd	r21, Y+3	; 0x03
   1987a:	c6 51       	subi	r28, 0x16	; 22
   1987c:	d1 40       	sbci	r29, 0x01	; 1
   1987e:	28 0f       	add	r18, r24
   19880:	39 1f       	adc	r19, r25
   19882:	4a 1f       	adc	r20, r26
   19884:	5b 1f       	adc	r21, r27
   19886:	ca 5e       	subi	r28, 0xEA	; 234
   19888:	de 4f       	sbci	r29, 0xFE	; 254
   1988a:	28 83       	st	Y, r18
   1988c:	39 83       	std	Y+1, r19	; 0x01
   1988e:	4a 83       	std	Y+2, r20	; 0x02
   19890:	5b 83       	std	Y+3, r21	; 0x03
   19892:	c6 51       	subi	r28, 0x16	; 22
   19894:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19896:	ce 5d       	subi	r28, 0xDE	; 222
   19898:	de 4f       	sbci	r29, 0xFE	; 254
   1989a:	68 81       	ld	r22, Y
   1989c:	79 81       	ldd	r23, Y+1	; 0x01
   1989e:	8a 81       	ldd	r24, Y+2	; 0x02
   198a0:	9b 81       	ldd	r25, Y+3	; 0x03
   198a2:	c2 52       	subi	r28, 0x22	; 34
   198a4:	d1 40       	sbci	r29, 0x01	; 1
   198a6:	a2 01       	movw	r20, r4
   198a8:	91 01       	movw	r18, r2
   198aa:	0e 94 11 e3 	call	0x1c622	; 0x1c622 <__divmodsi4>
   198ae:	67 2b       	or	r22, r23
   198b0:	68 2b       	or	r22, r24
   198b2:	69 2b       	or	r22, r25
   198b4:	99 f4       	brne	.+38     	; 0x198dc <lif_create_volume+0x462>
            printf("\tWrote: %ld\r", count);
   198b6:	ce 5d       	subi	r28, 0xDE	; 222
   198b8:	de 4f       	sbci	r29, 0xFE	; 254
   198ba:	88 81       	ld	r24, Y
   198bc:	99 81       	ldd	r25, Y+1	; 0x01
   198be:	aa 81       	ldd	r26, Y+2	; 0x02
   198c0:	bb 81       	ldd	r27, Y+3	; 0x03
   198c2:	c2 52       	subi	r28, 0x22	; 34
   198c4:	d1 40       	sbci	r29, 0x01	; 1
   198c6:	ed b7       	in	r30, 0x3d	; 61
   198c8:	fe b7       	in	r31, 0x3e	; 62
   198ca:	84 83       	std	Z+4, r24	; 0x04
   198cc:	95 83       	std	Z+5, r25	; 0x05
   198ce:	a6 83       	std	Z+6, r26	; 0x06
   198d0:	b7 83       	std	Z+7, r27	; 0x07
   198d2:	61 82       	std	Z+1, r6	; 0x01
   198d4:	72 82       	std	Z+2, r7	; 0x02
   198d6:	83 82       	std	Z+3, r8	; 0x03
   198d8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   198dc:	ff ef       	ldi	r31, 0xFF	; 255
   198de:	af 1a       	sub	r10, r31
   198e0:	bf 0a       	sbc	r11, r31
   198e2:	cf 0a       	sbc	r12, r31
   198e4:	df 0a       	sbc	r13, r31
   198e6:	86 cf       	rjmp	.-244    	; 0x197f4 <lif_create_volume+0x37a>
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   198e8:	80 e0       	ldi	r24, 0x00	; 0
   198ea:	91 e0       	ldi	r25, 0x01	; 1
   198ec:	cc 5e       	subi	r28, 0xEC	; 236
   198ee:	de 4f       	sbci	r29, 0xFE	; 254
   198f0:	a8 81       	ld	r26, Y
   198f2:	b9 81       	ldd	r27, Y+1	; 0x01
   198f4:	c4 51       	subi	r28, 0x14	; 20
   198f6:	d1 40       	sbci	r29, 0x01	; 1
   198f8:	fc 01       	movw	r30, r24
   198fa:	1d 92       	st	X+, r1
   198fc:	31 97       	sbiw	r30, 0x01	; 1
   198fe:	e9 f7       	brne	.-6      	; 0x198fa <lif_create_volume+0x480>
    for(i=0;i<filesectors;++i)
   19900:	81 2c       	mov	r8, r1
   19902:	91 2c       	mov	r9, r1
   19904:	54 01       	movw	r10, r8
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   19906:	8f ec       	ldi	r24, 0xCF	; 207
   19908:	99 e3       	ldi	r25, 0x39	; 57
   1990a:	9c 01       	movw	r18, r24
   1990c:	40 e0       	ldi	r20, 0x00	; 0
   1990e:	c6 5e       	subi	r28, 0xE6	; 230
   19910:	de 4f       	sbci	r29, 0xFE	; 254
   19912:	28 83       	st	Y, r18
   19914:	39 83       	std	Y+1, r19	; 0x01
   19916:	4a 83       	std	Y+2, r20	; 0x02
   19918:	ca 51       	subi	r28, 0x1A	; 26
   1991a:	d1 40       	sbci	r29, 0x01	; 1
   1991c:	ce 5d       	subi	r28, 0xDE	; 222
   1991e:	de 4f       	sbci	r29, 0xFE	; 254
   19920:	48 80       	ld	r4, Y
   19922:	59 80       	ldd	r5, Y+1	; 0x01
   19924:	6a 80       	ldd	r6, Y+2	; 0x02
   19926:	7b 80       	ldd	r7, Y+3	; 0x03
   19928:	c2 52       	subi	r28, 0x22	; 34
   1992a:	d1 40       	sbci	r29, 0x01	; 1
   1992c:	48 0c       	add	r4, r8
   1992e:	59 1c       	adc	r5, r9
   19930:	6a 1c       	adc	r6, r10
   19932:	7b 1c       	adc	r7, r11
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19934:	c2 5e       	subi	r28, 0xE2	; 226
   19936:	de 4f       	sbci	r29, 0xFE	; 254
   19938:	28 81       	ld	r18, Y
   1993a:	39 81       	ldd	r19, Y+1	; 0x01
   1993c:	4a 81       	ldd	r20, Y+2	; 0x02
   1993e:	5b 81       	ldd	r21, Y+3	; 0x03
   19940:	ce 51       	subi	r28, 0x1E	; 30
   19942:	d1 40       	sbci	r29, 0x01	; 1
   19944:	82 16       	cp	r8, r18
   19946:	93 06       	cpc	r9, r19
   19948:	a4 06       	cpc	r10, r20
   1994a:	b5 06       	cpc	r11, r21
   1994c:	0c f0       	brlt	.+2      	; 0x19950 <lif_create_volume+0x4d6>
   1994e:	53 c0       	rjmp	.+166    	; 0x199f6 <lif_create_volume+0x57c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19950:	00 e0       	ldi	r16, 0x00	; 0
   19952:	11 e0       	ldi	r17, 0x01	; 1
   19954:	ca 5e       	subi	r28, 0xEA	; 234
   19956:	de 4f       	sbci	r29, 0xFE	; 254
   19958:	28 81       	ld	r18, Y
   1995a:	39 81       	ldd	r19, Y+1	; 0x01
   1995c:	4a 81       	ldd	r20, Y+2	; 0x02
   1995e:	5b 81       	ldd	r21, Y+3	; 0x03
   19960:	c6 51       	subi	r28, 0x16	; 22
   19962:	d1 40       	sbci	r29, 0x01	; 1
   19964:	be 01       	movw	r22, r28
   19966:	6c 5e       	subi	r22, 0xEC	; 236
   19968:	7f 4f       	sbci	r23, 0xFF	; 255
   1996a:	c7 01       	movw	r24, r14
   1996c:	0e 94 51 bf 	call	0x17ea2	; 0x17ea2 <lif_write>
   19970:	09 2e       	mov	r0, r25
   19972:	00 0c       	add	r0, r0
   19974:	aa 0b       	sbc	r26, r26
   19976:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19978:	8f 3f       	cpi	r24, 0xFF	; 255
   1997a:	91 05       	cpc	r25, r1
   1997c:	a1 05       	cpc	r26, r1
   1997e:	b1 05       	cpc	r27, r1
   19980:	09 f0       	breq	.+2      	; 0x19984 <lif_create_volume+0x50a>
   19982:	0c f4       	brge	.+2      	; 0x19986 <lif_create_volume+0x50c>
   19984:	4f c0       	rjmp	.+158    	; 0x19a24 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19986:	ca 5e       	subi	r28, 0xEA	; 234
   19988:	de 4f       	sbci	r29, 0xFE	; 254
   1998a:	28 81       	ld	r18, Y
   1998c:	39 81       	ldd	r19, Y+1	; 0x01
   1998e:	4a 81       	ldd	r20, Y+2	; 0x02
   19990:	5b 81       	ldd	r21, Y+3	; 0x03
   19992:	c6 51       	subi	r28, 0x16	; 22
   19994:	d1 40       	sbci	r29, 0x01	; 1
   19996:	28 0f       	add	r18, r24
   19998:	39 1f       	adc	r19, r25
   1999a:	4a 1f       	adc	r20, r26
   1999c:	5b 1f       	adc	r21, r27
   1999e:	ca 5e       	subi	r28, 0xEA	; 234
   199a0:	de 4f       	sbci	r29, 0xFE	; 254
   199a2:	28 83       	st	Y, r18
   199a4:	39 83       	std	Y+1, r19	; 0x01
   199a6:	4a 83       	std	Y+2, r20	; 0x02
   199a8:	5b 83       	std	Y+3, r21	; 0x03
   199aa:	c6 51       	subi	r28, 0x16	; 22
   199ac:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   199ae:	c3 01       	movw	r24, r6
   199b0:	b2 01       	movw	r22, r4
   199b2:	24 e6       	ldi	r18, 0x64	; 100
   199b4:	30 e0       	ldi	r19, 0x00	; 0
   199b6:	40 e0       	ldi	r20, 0x00	; 0
   199b8:	50 e0       	ldi	r21, 0x00	; 0
   199ba:	0e 94 11 e3 	call	0x1c622	; 0x1c622 <__divmodsi4>
   199be:	67 2b       	or	r22, r23
   199c0:	68 2b       	or	r22, r24
   199c2:	69 2b       	or	r22, r25
   199c4:	91 f4       	brne	.+36     	; 0x199ea <lif_create_volume+0x570>
            printf("\tWrote: %ld\r", count);
   199c6:	ed b7       	in	r30, 0x3d	; 61
   199c8:	fe b7       	in	r31, 0x3e	; 62
   199ca:	44 82       	std	Z+4, r4	; 0x04
   199cc:	55 82       	std	Z+5, r5	; 0x05
   199ce:	66 82       	std	Z+6, r6	; 0x06
   199d0:	77 82       	std	Z+7, r7	; 0x07
   199d2:	c6 5e       	subi	r28, 0xE6	; 230
   199d4:	de 4f       	sbci	r29, 0xFE	; 254
   199d6:	28 81       	ld	r18, Y
   199d8:	39 81       	ldd	r19, Y+1	; 0x01
   199da:	4a 81       	ldd	r20, Y+2	; 0x02
   199dc:	ca 51       	subi	r28, 0x1A	; 26
   199de:	d1 40       	sbci	r29, 0x01	; 1
   199e0:	21 83       	std	Z+1, r18	; 0x01
   199e2:	32 83       	std	Z+2, r19	; 0x02
   199e4:	43 83       	std	Z+3, r20	; 0x03
   199e6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   199ea:	ff ef       	ldi	r31, 0xFF	; 255
   199ec:	8f 1a       	sub	r8, r31
   199ee:	9f 0a       	sbc	r9, r31
   199f0:	af 0a       	sbc	r10, r31
   199f2:	bf 0a       	sbc	r11, r31
   199f4:	93 cf       	rjmp	.-218    	; 0x1991c <lif_create_volume+0x4a2>
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   199f6:	ed b7       	in	r30, 0x3d	; 61
   199f8:	fe b7       	in	r31, 0x3e	; 62
   199fa:	44 82       	std	Z+4, r4	; 0x04
   199fc:	55 82       	std	Z+5, r5	; 0x05
   199fe:	66 82       	std	Z+6, r6	; 0x06
   19a00:	77 82       	std	Z+7, r7	; 0x07
   19a02:	82 ec       	ldi	r24, 0xC2	; 194
   19a04:	99 e3       	ldi	r25, 0x39	; 57
   19a06:	a0 e0       	ldi	r26, 0x00	; 0
   19a08:	81 83       	std	Z+1, r24	; 0x01
   19a0a:	92 83       	std	Z+2, r25	; 0x02
   19a0c:	a3 83       	std	Z+3, r26	; 0x03
   19a0e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   19a12:	8f ef       	ldi	r24, 0xFF	; 255
   19a14:	9f ef       	ldi	r25, 0xFF	; 255
   19a16:	f7 01       	movw	r30, r14
   19a18:	91 a3       	std	Z+33, r25	; 0x21
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   19a1a:	80 a3       	std	Z+32, r24	; 0x20
   19a1c:	c7 01       	movw	r24, r14
   19a1e:	1a d8       	rcall	.-4044   	; 0x18a54 <lif_check_volume>
   19a20:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19a22:	19 f4       	brne	.+6      	; 0x19a2a <lif_create_volume+0x5b0>
   19a24:	c7 01       	movw	r24, r14
   19a26:	b6 da       	rcall	.-2708   	; 0x18f94 <lif_close_volume>
   19a28:	08 c0       	rjmp	.+16     	; 0x19a3a <lif_create_volume+0x5c0>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   19a2a:	c7 01       	movw	r24, r14
   19a2c:	1c dc       	rcall	.-1992   	; 0x19266 <lif_updatefree>
   19a2e:	6c 01       	movw	r12, r24
   19a30:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19a32:	31 f4       	brne	.+12     	; 0x19a40 <lif_create_volume+0x5c6>
   19a34:	c7 01       	movw	r24, r14
   19a36:	ae da       	rcall	.-2724   	; 0x18f94 <lif_close_volume>

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   19a38:	04 c0       	rjmp	.+8      	; 0x19a42 <lif_create_volume+0x5c8>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   19a3a:	c1 2c       	mov	r12, r1
   19a3c:	d1 2c       	mov	r13, r1
   19a3e:	01 c0       	rjmp	.+2      	; 0x19a42 <lif_create_volume+0x5c8>
   19a40:	67 01       	movw	r12, r14
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   19a42:	c6 01       	movw	r24, r12
   19a44:	c7 5d       	subi	r28, 0xD7	; 215
   19a46:	de 4f       	sbci	r29, 0xFE	; 254
   19a48:	e2 e1       	ldi	r30, 0x12	; 18
   19a4a:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

00019a4e <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   19a4e:	ad e1       	ldi	r26, 0x1D	; 29
   19a50:	b0 e0       	ldi	r27, 0x00	; 0
   19a52:	ed e2       	ldi	r30, 0x2D	; 45
   19a54:	fd ec       	ldi	r31, 0xCD	; 205
   19a56:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
   19a5a:	9d 8f       	std	Y+29, r25	; 0x1d
   19a5c:	8c 8f       	std	Y+28, r24	; 0x1c
   19a5e:	4a 01       	movw	r8, r20
   19a60:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   19a62:	fc 01       	movw	r30, r24
   19a64:	c4 84       	ldd	r12, Z+12	; 0x0c
   19a66:	d5 84       	ldd	r13, Z+13	; 0x0d
   19a68:	e6 84       	ldd	r14, Z+14	; 0x0e
   19a6a:	f7 84       	ldd	r15, Z+15	; 0x0f

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   19a6c:	fc db       	rcall	.-2056   	; 0x19266 <lif_updatefree>
   19a6e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19a70:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19a72:	40 8d       	ldd	r20, Z+24	; 0x18
   19a74:	51 8d       	ldd	r21, Z+25	; 0x19
   19a76:	62 8d       	ldd	r22, Z+26	; 0x1a
   19a78:	73 8d       	ldd	r23, Z+27	; 0x1b
   19a7a:	89 2b       	or	r24, r25
   19a7c:	99 f4       	brne	.+38     	; 0x19aa4 <lif_newdir+0x56>
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   19a7e:	ed b7       	in	r30, 0x3d	; 61
   19a80:	fe b7       	in	r31, 0x3e	; 62
   19a82:	80 86       	std	Z+8, r8	; 0x08
   19a84:	91 86       	std	Z+9, r9	; 0x09
   19a86:	a2 86       	std	Z+10, r10	; 0x0a
   19a88:	b3 86       	std	Z+11, r11	; 0x0b
   19a8a:	44 83       	std	Z+4, r20	; 0x04
   19a8c:	55 83       	std	Z+5, r21	; 0x05
   19a8e:	66 83       	std	Z+6, r22	; 0x06
   19a90:	77 83       	std	Z+7, r23	; 0x07
   19a92:	83 ee       	ldi	r24, 0xE3	; 227
   19a94:	98 e3       	ldi	r25, 0x38	; 56
   19a96:	a0 e0       	ldi	r26, 0x00	; 0
   19a98:	81 83       	std	Z+1, r24	; 0x01
   19a9a:	92 83       	std	Z+2, r25	; 0x02
   19a9c:	a3 83       	std	Z+3, r26	; 0x03
   19a9e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19aa2:	2f c1       	rjmp	.+606    	; 0x19d02 <lif_newdir+0x2b4>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   19aa4:	48 15       	cp	r20, r8
   19aa6:	59 05       	cpc	r21, r9
   19aa8:	6a 05       	cpc	r22, r10
   19aaa:	7b 05       	cpc	r23, r11
   19aac:	c4 f0       	brlt	.+48     	; 0x19ade <lif_newdir+0x90>
   19aae:	44 24       	eor	r4, r4
   19ab0:	43 94       	inc	r4
   19ab2:	51 2c       	mov	r5, r1
   19ab4:	61 2c       	mov	r6, r1
   19ab6:	71 2c       	mov	r7, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19ab8:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19aba:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19abc:	86 5a       	subi	r24, 0xA6	; 166
   19abe:	9f 4f       	sbci	r25, 0xFF	; 255
   19ac0:	9d 8b       	std	Y+21, r25	; 0x15
   19ac2:	8c 8b       	std	Y+20, r24	; 0x14
   19ac4:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19ac6:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19ac8:	e4 5a       	subi	r30, 0xA4	; 164
   19aca:	ff 4f       	sbci	r31, 0xFF	; 255
   19acc:	fb 8b       	std	Y+19, r31	; 0x13
   19ace:	ea 8b       	std	Y+18, r30	; 0x12
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19ad0:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19ad2:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19ad4:	80 5a       	subi	r24, 0xA0	; 160
   19ad6:	9f 4f       	sbci	r25, 0xFF	; 255
   19ad8:	9f 8b       	std	Y+23, r25	; 0x17
   19ada:	8e 8b       	std	Y+22, r24	; 0x16
   19adc:	21 c0       	rjmp	.+66     	; 0x19b20 <lif_newdir+0xd2>
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   19ade:	ed b7       	in	r30, 0x3d	; 61
   19ae0:	fe b7       	in	r31, 0x3e	; 62
   19ae2:	44 83       	std	Z+4, r20	; 0x04
   19ae4:	55 83       	std	Z+5, r21	; 0x05
   19ae6:	66 83       	std	Z+6, r22	; 0x06
   19ae8:	77 83       	std	Z+7, r23	; 0x07
   19aea:	8a eb       	ldi	r24, 0xBA	; 186
   19aec:	98 e3       	ldi	r25, 0x38	; 56
   19aee:	a0 e0       	ldi	r26, 0x00	; 0
   19af0:	81 83       	std	Z+1, r24	; 0x01
   19af2:	92 83       	std	Z+2, r25	; 0x02
   19af4:	a3 83       	std	Z+3, r26	; 0x03
   19af6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19afa:	03 c1       	rjmp	.+518    	; 0x19d02 <lif_newdir+0x2b4>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19afc:	ec 89       	ldd	r30, Y+20	; 0x14
   19afe:	fd 89       	ldd	r31, Y+21	; 0x15
   19b00:	80 81       	ld	r24, Z
   19b02:	91 81       	ldd	r25, Z+1	; 0x01
   19b04:	8f 3f       	cpi	r24, 0xFF	; 255
   19b06:	ff ef       	ldi	r31, 0xFF	; 255
   19b08:	9f 07       	cpc	r25, r31
   19b0a:	a1 f0       	breq	.+40     	; 0x19b34 <lif_newdir+0xe6>
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   19b0c:	89 2b       	or	r24, r25
   19b0e:	09 f0       	breq	.+2      	; 0x19b12 <lif_newdir+0xc4>
   19b10:	ce c0       	rjmp	.+412    	; 0x19cae <lif_newdir+0x260>
        {
            if(freestate == 0)
   19b12:	61 14       	cp	r6, r1
   19b14:	71 04       	cpc	r7, r1
   19b16:	09 f4       	brne	.+2      	; 0x19b1a <lif_newdir+0xcc>
   19b18:	c1 c0       	rjmp	.+386    	; 0x19c9c <lif_newdir+0x24e>
   19b1a:	ff ef       	ldi	r31, 0xFF	; 255
   19b1c:	4f 1a       	sub	r4, r31
   19b1e:	5f 0a       	sbc	r5, r31
   19b20:	82 01       	movw	r16, r4
   19b22:	01 50       	subi	r16, 0x01	; 1
   19b24:	11 09       	sbc	r17, r1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   19b26:	b8 01       	movw	r22, r16
   19b28:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19b2a:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19b2c:	c1 da       	rcall	.-2686   	; 0x190b0 <lif_readdirindex>
   19b2e:	89 2b       	or	r24, r25
   19b30:	29 f7       	brne	.-54     	; 0x19afc <lif_newdir+0xae>
   19b32:	e7 c0       	rjmp	.+462    	; 0x19d02 <lif_newdir+0x2b4>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   19b34:	22 e0       	ldi	r18, 0x02	; 2
   19b36:	62 16       	cp	r6, r18
   19b38:	71 04       	cpc	r7, r1
   19b3a:	09 f0       	breq	.+2      	; 0x19b3e <lif_newdir+0xf0>
   19b3c:	46 c0       	rjmp	.+140    	; 0x19bca <lif_newdir+0x17c>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   19b3e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19b40:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19b42:	0e 94 55 c3 	call	0x186aa	; 0x186aa <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   19b46:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19b48:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19b4a:	e4 5a       	subi	r30, 0xA4	; 164
   19b4c:	ff 4f       	sbci	r31, 0xFF	; 255
   19b4e:	88 8d       	ldd	r24, Y+24	; 0x18
   19b50:	80 83       	st	Z, r24
   19b52:	99 8d       	ldd	r25, Y+25	; 0x19
   19b54:	91 83       	std	Z+1, r25	; 0x01
   19b56:	2a 8d       	ldd	r18, Y+26	; 0x1a
   19b58:	22 83       	std	Z+2, r18	; 0x02
   19b5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
   19b5c:	83 83       	std	Z+3, r24	; 0x03
                LIF->DIR.FileSectors = sectors;
   19b5e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19b60:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19b62:	e0 5a       	subi	r30, 0xA0	; 160
   19b64:	ff 4f       	sbci	r31, 0xFF	; 255
   19b66:	80 82       	st	Z, r8
   19b68:	91 82       	std	Z+1, r9	; 0x01
   19b6a:	a2 82       	std	Z+2, r10	; 0x02
   19b6c:	b3 82       	std	Z+3, r11	; 0x03
                LIF->usedsectors += sectors;
   19b6e:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19b70:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19b72:	84 89       	ldd	r24, Z+20	; 0x14
   19b74:	95 89       	ldd	r25, Z+21	; 0x15
   19b76:	a6 89       	ldd	r26, Z+22	; 0x16
   19b78:	b7 89       	ldd	r27, Z+23	; 0x17
   19b7a:	88 0d       	add	r24, r8
   19b7c:	99 1d       	adc	r25, r9
   19b7e:	aa 1d       	adc	r26, r10
   19b80:	bb 1d       	adc	r27, r11
   19b82:	84 8b       	std	Z+20, r24	; 0x14
   19b84:	95 8b       	std	Z+21, r25	; 0x15
   19b86:	a6 8b       	std	Z+22, r26	; 0x16
   19b88:	b7 8b       	std	Z+23, r27	; 0x17
                LIF->freesectors -= sectors;
   19b8a:	80 8d       	ldd	r24, Z+24	; 0x18
   19b8c:	91 8d       	ldd	r25, Z+25	; 0x19
   19b8e:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19b90:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19b92:	88 19       	sub	r24, r8
   19b94:	99 09       	sbc	r25, r9
   19b96:	aa 09       	sbc	r26, r10
   19b98:	bb 09       	sbc	r27, r11
   19b9a:	80 8f       	std	Z+24, r24	; 0x18
   19b9c:	91 8f       	std	Z+25, r25	; 0x19
   19b9e:	a2 8f       	std	Z+26, r26	; 0x1a
   19ba0:	b3 8f       	std	Z+27, r27	; 0x1b
                LIF->files++;
   19ba2:	84 8d       	ldd	r24, Z+28	; 0x1c
   19ba4:	95 8d       	ldd	r25, Z+29	; 0x1d
   19ba6:	01 96       	adiw	r24, 0x01	; 1
   19ba8:	95 8f       	std	Z+29, r25	; 0x1d
   19baa:	84 8f       	std	Z+28, r24	; 0x1c
                LIF->purged--;
   19bac:	86 8d       	ldd	r24, Z+30	; 0x1e
   19bae:	97 8d       	ldd	r25, Z+31	; 0x1f
   19bb0:	01 97       	sbiw	r24, 0x01	; 1
   19bb2:	97 8f       	std	Z+31, r25	; 0x1f
   19bb4:	86 8f       	std	Z+30, r24	; 0x1e
                LIF->dirindex = freeindex;
   19bb6:	20 a2       	std	Z+32, r2	; 0x20
   19bb8:	31 a2       	std	Z+33, r3	; 0x21
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   19bba:	b1 01       	movw	r22, r2
   19bbc:	cf 01       	movw	r24, r30
   19bbe:	df da       	rcall	.-2626   	; 0x1917e <lif_writedirindex>
   19bc0:	89 2b       	or	r24, r25
   19bc2:	09 f4       	brne	.+2      	; 0x19bc6 <lif_newdir+0x178>
   19bc4:	9e c0       	rjmp	.+316    	; 0x19d02 <lif_newdir+0x2b4>
   19bc6:	c1 01       	movw	r24, r2
   19bc8:	9e c0       	rjmp	.+316    	; 0x19d06 <lif_newdir+0x2b8>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   19bca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19bce:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19bd2:	92 ff       	sbrs	r25, 2
   19bd4:	1e c0       	rjmp	.+60     	; 0x19c12 <lif_newdir+0x1c4>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   19bd6:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19bd8:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19bda:	80 8d       	ldd	r24, Z+24	; 0x18
   19bdc:	91 8d       	ldd	r25, Z+25	; 0x19
   19bde:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19be0:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19be2:	ed b7       	in	r30, 0x3d	; 61
   19be4:	fe b7       	in	r31, 0x3e	; 62
   19be6:	86 87       	std	Z+14, r24	; 0x0e
   19be8:	97 87       	std	Z+15, r25	; 0x0f
   19bea:	a0 8b       	std	Z+16, r26	; 0x10
   19bec:	b1 8b       	std	Z+17, r27	; 0x11
   19bee:	82 86       	std	Z+10, r8	; 0x0a
   19bf0:	93 86       	std	Z+11, r9	; 0x0b
   19bf2:	a4 86       	std	Z+12, r10	; 0x0c
   19bf4:	b5 86       	std	Z+13, r11	; 0x0d
   19bf6:	c6 82       	std	Z+6, r12	; 0x06
   19bf8:	d7 82       	std	Z+7, r13	; 0x07
   19bfa:	e0 86       	std	Z+8, r14	; 0x08
   19bfc:	f1 86       	std	Z+9, r15	; 0x09
   19bfe:	15 83       	std	Z+5, r17	; 0x05
   19c00:	04 83       	std	Z+4, r16	; 0x04
   19c02:	89 e6       	ldi	r24, 0x69	; 105
   19c04:	98 e3       	ldi	r25, 0x38	; 56
   19c06:	a0 e0       	ldi	r26, 0x00	; 0
   19c08:	81 83       	std	Z+1, r24	; 0x01
   19c0a:	92 83       	std	Z+2, r25	; 0x02
   19c0c:	a3 83       	std	Z+3, r26	; 0x03
   19c0e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   19c12:	b8 01       	movw	r22, r16
   19c14:	6f 5f       	subi	r22, 0xFF	; 255
   19c16:	7f 4f       	sbci	r23, 0xFF	; 255
   19c18:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19c1a:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19c1c:	0c db       	rcall	.-2536   	; 0x19236 <lif_writedirEOF>
   19c1e:	89 2b       	or	r24, r25
   19c20:	09 f4       	brne	.+2      	; 0x19c24 <lif_newdir+0x1d6>
   19c22:	6f c0       	rjmp	.+222    	; 0x19d02 <lif_newdir+0x2b4>
            {
                break;
            }

            lif_dir_clear(LIF);
   19c24:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19c26:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19c28:	0e 94 55 c3 	call	0x186aa	; 0x186aa <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   19c2c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19c2e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19c30:	e4 5a       	subi	r30, 0xA4	; 164
   19c32:	ff 4f       	sbci	r31, 0xFF	; 255
   19c34:	c0 82       	st	Z, r12
   19c36:	d1 82       	std	Z+1, r13	; 0x01
   19c38:	e2 82       	std	Z+2, r14	; 0x02
   19c3a:	f3 82       	std	Z+3, r15	; 0x03
            LIF->DIR.FileSectors = sectors;
   19c3c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19c3e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19c40:	e0 5a       	subi	r30, 0xA0	; 160
   19c42:	ff 4f       	sbci	r31, 0xFF	; 255
   19c44:	80 82       	st	Z, r8
   19c46:	91 82       	std	Z+1, r9	; 0x01
   19c48:	a2 82       	std	Z+2, r10	; 0x02
   19c4a:	b3 82       	std	Z+3, r11	; 0x03
            LIF->usedsectors += sectors;
   19c4c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19c4e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19c50:	84 89       	ldd	r24, Z+20	; 0x14
   19c52:	95 89       	ldd	r25, Z+21	; 0x15
   19c54:	a6 89       	ldd	r26, Z+22	; 0x16
   19c56:	b7 89       	ldd	r27, Z+23	; 0x17
   19c58:	88 0d       	add	r24, r8
   19c5a:	99 1d       	adc	r25, r9
   19c5c:	aa 1d       	adc	r26, r10
   19c5e:	bb 1d       	adc	r27, r11
   19c60:	84 8b       	std	Z+20, r24	; 0x14
   19c62:	95 8b       	std	Z+21, r25	; 0x15
   19c64:	a6 8b       	std	Z+22, r26	; 0x16
   19c66:	b7 8b       	std	Z+23, r27	; 0x17
            LIF->freesectors -= sectors;
   19c68:	80 8d       	ldd	r24, Z+24	; 0x18
   19c6a:	91 8d       	ldd	r25, Z+25	; 0x19
   19c6c:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19c6e:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19c70:	88 19       	sub	r24, r8
   19c72:	99 09       	sbc	r25, r9
   19c74:	aa 09       	sbc	r26, r10
   19c76:	bb 09       	sbc	r27, r11
   19c78:	80 8f       	std	Z+24, r24	; 0x18
   19c7a:	91 8f       	std	Z+25, r25	; 0x19
   19c7c:	a2 8f       	std	Z+26, r26	; 0x1a
   19c7e:	b3 8f       	std	Z+27, r27	; 0x1b
            LIF->files++;
   19c80:	84 8d       	ldd	r24, Z+28	; 0x1c
   19c82:	95 8d       	ldd	r25, Z+29	; 0x1d
   19c84:	01 96       	adiw	r24, 0x01	; 1
   19c86:	95 8f       	std	Z+29, r25	; 0x1d
   19c88:	84 8f       	std	Z+28, r24	; 0x1c
            LIF->dirindex = index;
   19c8a:	11 a3       	std	Z+33, r17	; 0x21
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   19c8c:	00 a3       	std	Z+32, r16	; 0x20
   19c8e:	b8 01       	movw	r22, r16
   19c90:	cf 01       	movw	r24, r30
   19c92:	75 da       	rcall	.-2838   	; 0x1917e <lif_writedirindex>
   19c94:	89 2b       	or	r24, r25
   19c96:	a9 f1       	breq	.+106    	; 0x19d02 <lif_newdir+0x2b4>
   19c98:	c8 01       	movw	r24, r16
   19c9a:	35 c0       	rjmp	.+106    	; 0x19d06 <lif_newdir+0x2b8>
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   19c9c:	c8 8e       	std	Y+24, r12	; 0x18
   19c9e:	d9 8e       	std	Y+25, r13	; 0x19
   19ca0:	ea 8e       	std	Y+26, r14	; 0x1a
   19ca2:	fb 8e       	std	Y+27, r15	; 0x1b
   19ca4:	18 01       	movw	r2, r16
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   19ca6:	66 24       	eor	r6, r6
   19ca8:	63 94       	inc	r6
   19caa:	71 2c       	mov	r7, r1
            }
            ++index;
            continue;
   19cac:	36 cf       	rjmp	.-404    	; 0x19b1a <lif_newdir+0xcc>
        }

// VALID record
        if(freestate == 1)
   19cae:	f1 e0       	ldi	r31, 0x01	; 1
   19cb0:	6f 16       	cp	r6, r31
   19cb2:	71 04       	cpc	r7, r1
   19cb4:	a9 f4       	brne	.+42     	; 0x19ce0 <lif_newdir+0x292>
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   19cb6:	ea 89       	ldd	r30, Y+18	; 0x12
   19cb8:	fb 89       	ldd	r31, Y+19	; 0x13
   19cba:	80 81       	ld	r24, Z
   19cbc:	91 81       	ldd	r25, Z+1	; 0x01
   19cbe:	a2 81       	ldd	r26, Z+2	; 0x02
   19cc0:	b3 81       	ldd	r27, Z+3	; 0x03
   19cc2:	8c 19       	sub	r24, r12
   19cc4:	9d 09       	sbc	r25, r13
   19cc6:	ae 09       	sbc	r26, r14
   19cc8:	bf 09       	sbc	r27, r15
   19cca:	88 15       	cp	r24, r8
   19ccc:	99 05       	cpc	r25, r9
   19cce:	aa 05       	cpc	r26, r10
   19cd0:	bb 05       	cpc	r27, r11
   19cd2:	1c f4       	brge	.+6      	; 0x19cda <lif_newdir+0x28c>
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   19cd4:	61 2c       	mov	r6, r1
   19cd6:	71 2c       	mov	r7, r1
   19cd8:	03 c0       	rjmp	.+6      	; 0x19ce0 <lif_newdir+0x292>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   19cda:	82 e0       	ldi	r24, 0x02	; 2
   19cdc:	68 2e       	mov	r6, r24
   19cde:	71 2c       	mov	r7, r1
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19ce0:	ea 89       	ldd	r30, Y+18	; 0x12
   19ce2:	fb 89       	ldd	r31, Y+19	; 0x13
   19ce4:	c0 80       	ld	r12, Z
   19ce6:	d1 80       	ldd	r13, Z+1	; 0x01
   19ce8:	e2 80       	ldd	r14, Z+2	; 0x02
   19cea:	f3 80       	ldd	r15, Z+3	; 0x03
   19cec:	ee 89       	ldd	r30, Y+22	; 0x16
   19cee:	ff 89       	ldd	r31, Y+23	; 0x17
   19cf0:	80 81       	ld	r24, Z
   19cf2:	91 81       	ldd	r25, Z+1	; 0x01
   19cf4:	a2 81       	ldd	r26, Z+2	; 0x02
   19cf6:	b3 81       	ldd	r27, Z+3	; 0x03
   19cf8:	c8 0e       	add	r12, r24
   19cfa:	d9 1e       	adc	r13, r25
   19cfc:	ea 1e       	adc	r14, r26
   19cfe:	fb 1e       	adc	r15, r27
   19d00:	0c cf       	rjmp	.-488    	; 0x19b1a <lif_newdir+0xcc>
        ++index;
    }
// ERROR
    return(-1);
   19d02:	8f ef       	ldi	r24, 0xFF	; 255
   19d04:	9f ef       	ldi	r25, 0xFF	; 255
}
   19d06:	6d 96       	adiw	r28, 0x1d	; 29
   19d08:	e2 e1       	ldi	r30, 0x12	; 18
   19d0a:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

00019d0e <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   19d0e:	a9 e3       	ldi	r26, 0x39	; 57
   19d10:	b1 e0       	ldi	r27, 0x01	; 1
   19d12:	ed e8       	ldi	r30, 0x8D	; 141
   19d14:	fe ec       	ldi	r31, 0xCE	; 206
   19d16:	0c 94 62 e3 	jmp	0x1c6c4	; 0x1c6c4 <__prologue_saves__+0xc>
   19d1a:	6c 01       	movw	r12, r24
   19d1c:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   19d1e:	be 01       	movw	r22, r28
   19d20:	66 5f       	subi	r22, 0xF6	; 246
   19d22:	7e 4f       	sbci	r23, 0xFE	; 254
   19d24:	0e 94 a4 be 	call	0x17d48	; 0x17d48 <lif_stat>
   19d28:	5c 01       	movw	r10, r24
    if(sp == NULL)
   19d2a:	00 97       	sbiw	r24, 0x00	; 0
   19d2c:	09 f1       	breq	.+66     	; 0x19d70 <lif_open_volume+0x62>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   19d2e:	fc 01       	movw	r30, r24
   19d30:	80 8d       	ldd	r24, Z+24	; 0x18
   19d32:	91 8d       	ldd	r25, Z+25	; 0x19
   19d34:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19d36:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19d38:	81 15       	cp	r24, r1
   19d3a:	f2 e0       	ldi	r31, 0x02	; 2
   19d3c:	9f 07       	cpc	r25, r31
   19d3e:	a1 05       	cpc	r26, r1
   19d40:	b1 05       	cpc	r27, r1
   19d42:	c8 f4       	brcc	.+50     	; 0x19d76 <lif_open_volume+0x68>
    {
        if(debuglevel & LIF_DEBUG)
   19d44:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19d48:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19d4c:	32 ff       	sbrs	r19, 2
   19d4e:	10 c0       	rjmp	.+32     	; 0x19d70 <lif_open_volume+0x62>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   19d50:	ed b7       	in	r30, 0x3d	; 61
   19d52:	fe b7       	in	r31, 0x3e	; 62
   19d54:	86 83       	std	Z+6, r24	; 0x06
   19d56:	97 83       	std	Z+7, r25	; 0x07
   19d58:	a0 87       	std	Z+8, r26	; 0x08
   19d5a:	b1 87       	std	Z+9, r27	; 0x09
   19d5c:	d5 82       	std	Z+5, r13	; 0x05
   19d5e:	c4 82       	std	Z+4, r12	; 0x04
   19d60:	8a e2       	ldi	r24, 0x2A	; 42
   19d62:	98 e3       	ldi	r25, 0x38	; 56
   19d64:	a0 e0       	ldi	r26, 0x00	; 0
   19d66:	81 83       	std	Z+1, r24	; 0x01
   19d68:	92 83       	std	Z+2, r25	; 0x02
   19d6a:	a3 83       	std	Z+3, r26	; 0x03
   19d6c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(NULL);
   19d70:	00 e0       	ldi	r16, 0x00	; 0
   19d72:	10 e0       	ldi	r17, 0x00	; 0
   19d74:	c6 c0       	rjmp	.+396    	; 0x19f02 <lif_open_volume+0x1f4>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   19d76:	64 e7       	ldi	r22, 0x74	; 116
   19d78:	70 e0       	ldi	r23, 0x00	; 0
   19d7a:	80 e0       	ldi	r24, 0x00	; 0
   19d7c:	90 e0       	ldi	r25, 0x00	; 0
   19d7e:	0e 94 10 be 	call	0x17c20	; 0x17c20 <lif_calloc>
   19d82:	7c 01       	movw	r14, r24
    if(!LIF)
   19d84:	89 2b       	or	r24, r25
   19d86:	a1 f3       	breq	.-24     	; 0x19d70 <lif_open_volume+0x62>
        return(NULL);

    LIF->name = lif_stralloc(name);
   19d88:	c6 01       	movw	r24, r12
   19d8a:	0e 94 5b be 	call	0x17cb6	; 0x17cb6 <lif_stralloc>
   19d8e:	f7 01       	movw	r30, r14
   19d90:	91 83       	std	Z+1, r25	; 0x01
   19d92:	80 83       	st	Z, r24
    if(!LIF->name)
   19d94:	00 97       	sbiw	r24, 0x00	; 0
   19d96:	09 f4       	brne	.+2      	; 0x19d9a <lif_open_volume+0x8c>
   19d98:	5e c0       	rjmp	.+188    	; 0x19e56 <lif_open_volume+0x148>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   19d9a:	f5 01       	movw	r30, r10
   19d9c:	80 8c       	ldd	r8, Z+24	; 0x18
   19d9e:	91 8c       	ldd	r9, Z+25	; 0x19
   19da0:	a2 8c       	ldd	r10, Z+26	; 0x1a
   19da2:	b3 8c       	ldd	r11, Z+27	; 0x1b
   19da4:	f7 01       	movw	r30, r14
   19da6:	80 86       	std	Z+8, r8	; 0x08
   19da8:	91 86       	std	Z+9, r9	; 0x09
   19daa:	a2 86       	std	Z+10, r10	; 0x0a
   19dac:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19dae:	77 27       	eor	r23, r23
   19db0:	6b 2d       	mov	r22, r11
   19db2:	5a 2d       	mov	r21, r10
   19db4:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19db6:	88 20       	and	r8, r8
   19db8:	21 f0       	breq	.+8      	; 0x19dc2 <lif_open_volume+0xb4>
        ++sectors;
   19dba:	4f 5f       	subi	r20, 0xFF	; 255
   19dbc:	5f 4f       	sbci	r21, 0xFF	; 255
   19dbe:	6f 4f       	sbci	r22, 0xFF	; 255
   19dc0:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   19dc2:	f7 01       	movw	r30, r14
   19dc4:	44 83       	std	Z+4, r20	; 0x04
   19dc6:	55 83       	std	Z+5, r21	; 0x05
   19dc8:	66 83       	std	Z+6, r22	; 0x06
   19dca:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   19dcc:	b8 01       	movw	r22, r16
   19dce:	0e 94 7a be 	call	0x17cf4	; 0x17cf4 <lif_open>
   19dd2:	f7 01       	movw	r30, r14
   19dd4:	93 83       	std	Z+3, r25	; 0x03
   19dd6:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   19dd8:	89 2b       	or	r24, r25
   19dda:	e9 f1       	breq	.+122    	; 0x19e56 <lif_open_volume+0x148>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   19ddc:	00 e0       	ldi	r16, 0x00	; 0
   19dde:	11 e0       	ldi	r17, 0x01	; 1
   19de0:	20 e0       	ldi	r18, 0x00	; 0
   19de2:	30 e0       	ldi	r19, 0x00	; 0
   19de4:	a9 01       	movw	r20, r18
   19de6:	be 01       	movw	r22, r28
   19de8:	66 5f       	subi	r22, 0xF6	; 246
   19dea:	7f 4f       	sbci	r23, 0xFF	; 255
   19dec:	c7 01       	movw	r24, r14
   19dee:	0e 94 fe be 	call	0x17dfc	; 0x17dfc <lif_read>
   19df2:	6f 3f       	cpi	r22, 0xFF	; 255
   19df4:	71 05       	cpc	r23, r1
   19df6:	81 05       	cpc	r24, r1
   19df8:	91 05       	cpc	r25, r1
   19dfa:	09 f0       	breq	.+2      	; 0x19dfe <lif_open_volume+0xf0>
   19dfc:	6c f4       	brge	.+26     	; 0x19e18 <lif_open_volume+0x10a>
    {
        if(debuglevel & LIF_DEBUG)
   19dfe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19e02:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19e06:	92 ff       	sbrs	r25, 2
   19e08:	26 c0       	rjmp	.+76     	; 0x19e56 <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   19e0a:	ed b7       	in	r30, 0x3d	; 61
   19e0c:	fe b7       	in	r31, 0x3e	; 62
   19e0e:	d5 82       	std	Z+5, r13	; 0x05
   19e10:	c4 82       	std	Z+4, r12	; 0x04
   19e12:	84 ef       	ldi	r24, 0xF4	; 244
   19e14:	97 e3       	ldi	r25, 0x37	; 55
   19e16:	19 c0       	rjmp	.+50     	; 0x19e4a <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   19e18:	b7 01       	movw	r22, r14
   19e1a:	ce 01       	movw	r24, r28
   19e1c:	0a 96       	adiw	r24, 0x0a	; 10
   19e1e:	0e 94 1e c1 	call	0x1823c	; 0x1823c <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   19e22:	c7 01       	movw	r24, r14
   19e24:	0e 94 2a c5 	call	0x18a54	; 0x18a54 <lif_check_volume>
   19e28:	89 2b       	or	r24, r25
   19e2a:	c1 f4       	brne	.+48     	; 0x19e5c <lif_open_volume+0x14e>
    {
        if(debuglevel & LIF_DEBUG)
   19e2c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19e30:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19e34:	92 ff       	sbrs	r25, 2
   19e36:	0f c0       	rjmp	.+30     	; 0x19e56 <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   19e38:	f7 01       	movw	r30, r14
   19e3a:	80 81       	ld	r24, Z
   19e3c:	91 81       	ldd	r25, Z+1	; 0x01
   19e3e:	ed b7       	in	r30, 0x3d	; 61
   19e40:	fe b7       	in	r31, 0x3e	; 62
   19e42:	95 83       	std	Z+5, r25	; 0x05
   19e44:	84 83       	std	Z+4, r24	; 0x04
   19e46:	81 ec       	ldi	r24, 0xC1	; 193
   19e48:	97 e3       	ldi	r25, 0x37	; 55
   19e4a:	a0 e0       	ldi	r26, 0x00	; 0
   19e4c:	81 83       	std	Z+1, r24	; 0x01
   19e4e:	92 83       	std	Z+2, r25	; 0x02
   19e50:	a3 83       	std	Z+3, r26	; 0x03
   19e52:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19e56:	c7 01       	movw	r24, r14
   19e58:	9d d8       	rcall	.-3782   	; 0x18f94 <lif_close_volume>
   19e5a:	8a cf       	rjmp	.-236    	; 0x19d70 <lif_open_volume+0x62>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   19e5c:	f7 01       	movw	r30, r14
   19e5e:	45 a5       	ldd	r20, Z+45	; 0x2d
   19e60:	56 a5       	ldd	r21, Z+46	; 0x2e
   19e62:	67 a5       	ldd	r22, Z+47	; 0x2f
   19e64:	70 a9       	ldd	r23, Z+48	; 0x30
   19e66:	85 a9       	ldd	r24, Z+53	; 0x35
   19e68:	96 a9       	ldd	r25, Z+54	; 0x36
   19e6a:	a7 a9       	ldd	r26, Z+55	; 0x37
   19e6c:	b0 ad       	ldd	r27, Z+56	; 0x38
   19e6e:	48 0f       	add	r20, r24
   19e70:	59 1f       	adc	r21, r25
   19e72:	6a 1f       	adc	r22, r26
   19e74:	7b 1f       	adc	r23, r27
   19e76:	44 87       	std	Z+12, r20	; 0x0c
   19e78:	55 87       	std	Z+13, r21	; 0x0d
   19e7a:	66 87       	std	Z+14, r22	; 0x0e
   19e7c:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   19e7e:	84 81       	ldd	r24, Z+4	; 0x04
   19e80:	95 81       	ldd	r25, Z+5	; 0x05
   19e82:	a6 81       	ldd	r26, Z+6	; 0x06
   19e84:	b7 81       	ldd	r27, Z+7	; 0x07
   19e86:	84 1b       	sub	r24, r20
   19e88:	95 0b       	sbc	r25, r21
   19e8a:	a6 0b       	sbc	r26, r22
   19e8c:	b7 0b       	sbc	r27, r23
   19e8e:	80 8b       	std	Z+16, r24	; 0x10
   19e90:	91 8b       	std	Z+17, r25	; 0x11
   19e92:	a2 8b       	std	Z+18, r26	; 0x12
   19e94:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   19e96:	80 8f       	std	Z+24, r24	; 0x18
   19e98:	91 8f       	std	Z+25, r25	; 0x19
   19e9a:	a2 8f       	std	Z+26, r26	; 0x1a
   19e9c:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   19e9e:	14 8a       	std	Z+20, r1	; 0x14
   19ea0:	15 8a       	std	Z+21, r1	; 0x15
   19ea2:	16 8a       	std	Z+22, r1	; 0x16
   19ea4:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   19ea6:	17 8e       	std	Z+31, r1	; 0x1f
   19ea8:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   19eaa:	15 8e       	std	Z+29, r1	; 0x1d
   19eac:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   19eae:	11 a2       	std	Z+33, r1	; 0x21
   19eb0:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19eb2:	13 a2       	std	Z+35, r1	; 0x23
   19eb4:	12 a2       	std	Z+34, r1	; 0x22

    if( lif_updatefree(LIF) == NULL)
   19eb6:	c7 01       	movw	r24, r14
   19eb8:	d6 d9       	rcall	.-3156   	; 0x19266 <lif_updatefree>
   19eba:	8c 01       	movw	r16, r24
   19ebc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19ec0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19ec4:	01 15       	cp	r16, r1
   19ec6:	11 05       	cpc	r17, r1
   19ec8:	a1 f4       	brne	.+40     	; 0x19ef2 <lif_open_volume+0x1e4>
    {
        if(debuglevel & LIF_DEBUG)
   19eca:	92 ff       	sbrs	r25, 2
   19ecc:	0f c0       	rjmp	.+30     	; 0x19eec <lif_open_volume+0x1de>
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   19ece:	f7 01       	movw	r30, r14
   19ed0:	80 81       	ld	r24, Z
   19ed2:	91 81       	ldd	r25, Z+1	; 0x01
   19ed4:	ed b7       	in	r30, 0x3d	; 61
   19ed6:	fe b7       	in	r31, 0x3e	; 62
   19ed8:	95 83       	std	Z+5, r25	; 0x05
   19eda:	84 83       	std	Z+4, r24	; 0x04
   19edc:	8e e8       	ldi	r24, 0x8E	; 142
   19ede:	97 e3       	ldi	r25, 0x37	; 55
   19ee0:	a0 e0       	ldi	r26, 0x00	; 0
   19ee2:	81 83       	std	Z+1, r24	; 0x01
   19ee4:	92 83       	std	Z+2, r25	; 0x02
   19ee6:	a3 83       	std	Z+3, r26	; 0x03
   19ee8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19eec:	c7 01       	movw	r24, r14
   19eee:	52 d8       	rcall	.-3932   	; 0x18f94 <lif_close_volume>
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   19ef0:	08 c0       	rjmp	.+16     	; 0x19f02 <lif_open_volume+0x1f4>
    }

    if(debuglevel &LIF_DEBUG)
   19ef2:	92 ff       	sbrs	r25, 2
   19ef4:	05 c0       	rjmp	.+10     	; 0x19f00 <lif_open_volume+0x1f2>
        lif_dump_vol(LIF, "Volume Listing");
   19ef6:	62 e4       	ldi	r22, 0x42	; 66
   19ef8:	76 e1       	ldi	r23, 0x16	; 22
   19efa:	c7 01       	movw	r24, r14
   19efc:	0e 94 64 c3 	call	0x186c8	; 0x186c8 <lif_dump_vol>
   19f00:	87 01       	movw	r16, r14
    return( LIF );
}
   19f02:	c8 01       	movw	r24, r16
   19f04:	c7 5c       	subi	r28, 0xC7	; 199
   19f06:	de 4f       	sbci	r29, 0xFE	; 254
   19f08:	ec e0       	ldi	r30, 0x0C	; 12
   19f0a:	0c 94 7e e3 	jmp	0x1c6fc	; 0x1c6fc <__epilogue_restores__+0xc>

00019f0e <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   19f0e:	2f 92       	push	r2
   19f10:	3f 92       	push	r3
   19f12:	4f 92       	push	r4
   19f14:	5f 92       	push	r5
   19f16:	6f 92       	push	r6
   19f18:	8f 92       	push	r8
   19f1a:	9f 92       	push	r9
   19f1c:	af 92       	push	r10
   19f1e:	bf 92       	push	r11
   19f20:	cf 92       	push	r12
   19f22:	df 92       	push	r13
   19f24:	ef 92       	push	r14
   19f26:	0f 93       	push	r16
   19f28:	1f 93       	push	r17
   19f2a:	cf 93       	push	r28
   19f2c:	df 93       	push	r29
   19f2e:	cd b7       	in	r28, 0x3d	; 61
   19f30:	de b7       	in	r29, 0x3e	; 62
   19f32:	af 97       	sbiw	r28, 0x2f	; 47
   19f34:	0f b6       	in	r0, 0x3f	; 63
   19f36:	f8 94       	cli
   19f38:	de bf       	out	0x3e, r29	; 62
   19f3a:	0f be       	out	0x3f, r0	; 63
   19f3c:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   19f3e:	68 e0       	ldi	r22, 0x08	; 8
   19f40:	79 e0       	ldi	r23, 0x09	; 9
   19f42:	e5 de       	rcall	.-566    	; 0x19d0e <lif_open_volume>
   19f44:	9f a7       	std	Y+47, r25	; 0x2f
   19f46:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   19f48:	00 97       	sbiw	r24, 0x00	; 0
   19f4a:	09 f4       	brne	.+2      	; 0x19f4e <lif_dir+0x40>
   19f4c:	9e c1       	rjmp	.+828    	; 0x1a28a <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   19f4e:	fc 01       	movw	r30, r24
   19f50:	86 a1       	ldd	r24, Z+38	; 0x26
   19f52:	88 23       	and	r24, r24
   19f54:	21 f0       	breq	.+8      	; 0x19f5e <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   19f56:	8f 01       	movw	r16, r30
   19f58:	0a 5d       	subi	r16, 0xDA	; 218
   19f5a:	1f 4f       	sbci	r17, 0xFF	; 255
   19f5c:	02 c0       	rjmp	.+4      	; 0x19f62 <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   19f5e:	04 ef       	ldi	r16, 0xF4	; 244
   19f60:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   19f62:	8e a5       	ldd	r24, Y+46	; 0x2e
   19f64:	9f a5       	ldd	r25, Y+47	; 0x2f
   19f66:	87 5b       	subi	r24, 0xB7	; 183
   19f68:	9f 4f       	sbci	r25, 0xFF	; 255
   19f6a:	0e 94 28 c3 	call	0x18650	; 0x18650 <lif_lifbcd2timestr>
   19f6e:	ed b7       	in	r30, 0x3d	; 61
   19f70:	fe b7       	in	r31, 0x3e	; 62
   19f72:	97 83       	std	Z+7, r25	; 0x07
   19f74:	86 83       	std	Z+6, r24	; 0x06
   19f76:	15 83       	std	Z+5, r17	; 0x05
   19f78:	04 83       	std	Z+4, r16	; 0x04
   19f7a:	87 e7       	ldi	r24, 0x77	; 119
   19f7c:	97 e3       	ldi	r25, 0x37	; 55
   19f7e:	a0 e0       	ldi	r26, 0x00	; 0
   19f80:	81 83       	std	Z+1, r24	; 0x01
   19f82:	92 83       	std	Z+2, r25	; 0x02
   19f84:	a3 83       	std	Z+3, r26	; 0x03
   19f86:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   19f8a:	87 e3       	ldi	r24, 0x37	; 55
   19f8c:	97 e3       	ldi	r25, 0x37	; 55
   19f8e:	a0 e0       	ldi	r26, 0x00	; 0
   19f90:	ed b7       	in	r30, 0x3d	; 61
   19f92:	fe b7       	in	r31, 0x3e	; 62
   19f94:	81 83       	std	Z+1, r24	; 0x01
   19f96:	92 83       	std	Z+2, r25	; 0x02
   19f98:	a3 83       	std	Z+3, r26	; 0x03
   19f9a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   19f9e:	00 e2       	ldi	r16, 0x20	; 32
   19fa0:	10 e0       	ldi	r17, 0x00	; 0
   19fa2:	1f 8b       	std	Y+23, r17	; 0x17
   19fa4:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   19fa6:	21 2c       	mov	r2, r1
   19fa8:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   19faa:	0e a5       	ldd	r16, Y+46	; 0x2e
   19fac:	1f a5       	ldd	r17, Y+47	; 0x2f
   19fae:	06 5a       	subi	r16, 0xA6	; 166
   19fb0:	1f 4f       	sbci	r17, 0xFF	; 255
   19fb2:	1d 8f       	std	Y+29, r17	; 0x1d
   19fb4:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19fb6:	0e a5       	ldd	r16, Y+46	; 0x2e
   19fb8:	1f a5       	ldd	r17, Y+47	; 0x2f
   19fba:	00 5a       	subi	r16, 0xA0	; 160
   19fbc:	1f 4f       	sbci	r17, 0xFF	; 255
   19fbe:	1d a3       	std	Y+37, r17	; 0x25
   19fc0:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19fc2:	0e a5       	ldd	r16, Y+46	; 0x2e
   19fc4:	1f a5       	ldd	r17, Y+47	; 0x2f
   19fc6:	04 59       	subi	r16, 0x94	; 148
   19fc8:	1f 4f       	sbci	r17, 0xFF	; 255
   19fca:	1f a3       	std	Y+39, r17	; 0x27
   19fcc:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19fce:	8b ee       	ldi	r24, 0xEB	; 235
   19fd0:	96 e3       	ldi	r25, 0x36	; 54
   19fd2:	6c 01       	movw	r12, r24
   19fd4:	e1 2c       	mov	r14, r1
   19fd6:	0e a5       	ldd	r16, Y+46	; 0x2e
   19fd8:	1f a5       	ldd	r17, Y+47	; 0x2f
   19fda:	01 5b       	subi	r16, 0xB1	; 177
   19fdc:	1f 4f       	sbci	r17, 0xFF	; 255
   19fde:	1f 8f       	std	Y+31, r17	; 0x1f
   19fe0:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   19fe2:	8b eb       	ldi	r24, 0xBB	; 187
   19fe4:	96 e3       	ldi	r25, 0x36	; 54
   19fe6:	2c 01       	movw	r4, r24
   19fe8:	61 2c       	mov	r6, r1
   19fea:	0e a5       	ldd	r16, Y+46	; 0x2e
   19fec:	1f a5       	ldd	r17, Y+47	; 0x2f
   19fee:	04 5a       	subi	r16, 0xA4	; 164
   19ff0:	1f 4f       	sbci	r17, 0xFF	; 255
   19ff2:	19 a7       	std	Y+41, r17	; 0x29
   19ff4:	08 a7       	std	Y+40, r16	; 0x28
   19ff6:	0e a5       	ldd	r16, Y+46	; 0x2e
   19ff8:	1f a5       	ldd	r17, Y+47	; 0x2f
   19ffa:	02 59       	subi	r16, 0x92	; 146
   19ffc:	1f 4f       	sbci	r17, 0xFF	; 255
   19ffe:	1b a7       	std	Y+43, r17	; 0x2b
   1a000:	0a a7       	std	Y+42, r16	; 0x2a
   1a002:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a004:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a006:	0c 59       	subi	r16, 0x9C	; 156
   1a008:	1f 4f       	sbci	r17, 0xFF	; 255
   1a00a:	1d a7       	std	Y+45, r17	; 0x2d
   1a00c:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a00e:	b1 01       	movw	r22, r2
   1a010:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a012:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a014:	4d d8       	rcall	.-3942   	; 0x190b0 <lif_readdirindex>
   1a016:	89 2b       	or	r24, r25
   1a018:	09 f4       	brne	.+2      	; 0x1a01c <lif_dir+0x10e>
   1a01a:	ad c0       	rjmp	.+346    	; 0x1a176 <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a01c:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a01e:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a020:	8d 91       	ld	r24, X+
   1a022:	9c 91       	ld	r25, X
   1a024:	8f 3f       	cpi	r24, 0xFF	; 255
   1a026:	bf ef       	ldi	r27, 0xFF	; 255
   1a028:	9b 07       	cpc	r25, r27
   1a02a:	09 f4       	brne	.+2      	; 0x1a02e <lif_dir+0x120>
   1a02c:	a4 c0       	rjmp	.+328    	; 0x1a176 <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a02e:	ec a1       	ldd	r30, Y+36	; 0x24
   1a030:	fd a1       	ldd	r31, Y+37	; 0x25
   1a032:	40 81       	ld	r20, Z
   1a034:	51 81       	ldd	r21, Z+1	; 0x01
   1a036:	62 81       	ldd	r22, Z+2	; 0x02
   1a038:	73 81       	ldd	r23, Z+3	; 0x03
   1a03a:	00 27       	eor	r16, r16
   1a03c:	14 2f       	mov	r17, r20
   1a03e:	25 2f       	mov	r18, r21
   1a040:	36 2f       	mov	r19, r22
   1a042:	08 8f       	std	Y+24, r16	; 0x18
   1a044:	19 8f       	std	Y+25, r17	; 0x19
   1a046:	2a 8f       	std	Y+26, r18	; 0x1a
   1a048:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a04a:	8c 7f       	andi	r24, 0xFC	; 252
   1a04c:	80 31       	cpi	r24, 0x10	; 16
   1a04e:	90 4e       	sbci	r25, 0xE0	; 224
   1a050:	09 f0       	breq	.+2      	; 0x1a054 <lif_dir+0x146>
   1a052:	4b c0       	rjmp	.+150    	; 0x1a0ea <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a054:	ae a1       	ldd	r26, Y+38	; 0x26
   1a056:	bf a1       	ldd	r27, Y+39	; 0x27
   1a058:	8d 91       	ld	r24, X+
   1a05a:	9c 91       	ld	r25, X
   1a05c:	00 97       	sbiw	r24, 0x00	; 0
   1a05e:	b9 f0       	breq	.+46     	; 0x1a08e <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a060:	4c 01       	movw	r8, r24
   1a062:	a1 2c       	mov	r10, r1
   1a064:	b1 2c       	mov	r11, r1
   1a066:	33 27       	eor	r19, r19
   1a068:	2b 2d       	mov	r18, r11
   1a06a:	1a 2d       	mov	r17, r10
   1a06c:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a06e:	88 23       	and	r24, r24
   1a070:	21 f0       	breq	.+8      	; 0x1a07a <lif_dir+0x16c>
        ++sectors;
   1a072:	0f 5f       	subi	r16, 0xFF	; 255
   1a074:	1f 4f       	sbci	r17, 0xFF	; 255
   1a076:	2f 4f       	sbci	r18, 0xFF	; 255
   1a078:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a07a:	40 17       	cp	r20, r16
   1a07c:	51 07       	cpc	r21, r17
   1a07e:	62 07       	cpc	r22, r18
   1a080:	73 07       	cpc	r23, r19
   1a082:	29 f4       	brne	.+10     	; 0x1a08e <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   1a084:	88 8e       	std	Y+24, r8	; 0x18
   1a086:	99 8e       	std	Y+25, r9	; 0x19
   1a088:	aa 8e       	std	Y+26, r10	; 0x1a
   1a08a:	bb 8e       	std	Y+27, r11	; 0x1b
   1a08c:	2e c0       	rjmp	.+92     	; 0x1a0ea <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   1a08e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a092:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a096:	32 ff       	sbrs	r19, 2
   1a098:	24 c0       	rjmp	.+72     	; 0x1a0e2 <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a09a:	4c 01       	movw	r8, r24
   1a09c:	a1 2c       	mov	r10, r1
   1a09e:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a0a0:	33 27       	eor	r19, r19
   1a0a2:	2b 2d       	mov	r18, r11
   1a0a4:	1a 2d       	mov	r17, r10
   1a0a6:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a0a8:	88 23       	and	r24, r24
   1a0aa:	21 f0       	breq	.+8      	; 0x1a0b4 <lif_dir+0x1a6>
        ++sectors;
   1a0ac:	0f 5f       	subi	r16, 0xFF	; 255
   1a0ae:	1f 4f       	sbci	r17, 0xFF	; 255
   1a0b0:	2f 4f       	sbci	r18, 0xFF	; 255
   1a0b2:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a0b4:	ed b7       	in	r30, 0x3d	; 61
   1a0b6:	fe b7       	in	r31, 0x3e	; 62
   1a0b8:	46 87       	std	Z+14, r20	; 0x0e
   1a0ba:	57 87       	std	Z+15, r21	; 0x0f
   1a0bc:	60 8b       	std	Z+16, r22	; 0x10
   1a0be:	71 8b       	std	Z+17, r23	; 0x11
   1a0c0:	02 87       	std	Z+10, r16	; 0x0a
   1a0c2:	13 87       	std	Z+11, r17	; 0x0b
   1a0c4:	24 87       	std	Z+12, r18	; 0x0c
   1a0c6:	35 87       	std	Z+13, r19	; 0x0d
   1a0c8:	86 82       	std	Z+6, r8	; 0x06
   1a0ca:	97 82       	std	Z+7, r9	; 0x07
   1a0cc:	a0 86       	std	Z+8, r10	; 0x08
   1a0ce:	b1 86       	std	Z+9, r11	; 0x09
   1a0d0:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a0d2:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a0d4:	15 83       	std	Z+5, r17	; 0x05
   1a0d6:	04 83       	std	Z+4, r16	; 0x04
   1a0d8:	c1 82       	std	Z+1, r12	; 0x01
   1a0da:	d2 82       	std	Z+2, r13	; 0x02
   1a0dc:	e3 82       	std	Z+3, r14	; 0x03
   1a0de:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a0e2:	01 e2       	ldi	r16, 0x21	; 33
   1a0e4:	10 e0       	ldi	r17, 0x00	; 0
   1a0e6:	1f 8b       	std	Y+23, r17	; 0x17
   1a0e8:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a0ea:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a0ec:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a0ee:	8d 90       	ld	r8, X+
   1a0f0:	9c 90       	ld	r9, X
   1a0f2:	81 14       	cp	r8, r1
   1a0f4:	91 04       	cpc	r9, r1
   1a0f6:	19 f0       	breq	.+6      	; 0x1a0fe <lif_dir+0x1f0>
   1a0f8:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a0fa:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a0fc:	02 c0       	rjmp	.+4      	; 0x1a102 <lif_dir+0x1f4>
   1a0fe:	01 e5       	ldi	r16, 0x51	; 81
   1a100:	16 e1       	ldi	r17, 0x16	; 22
   1a102:	a8 a5       	ldd	r26, Y+40	; 0x28
   1a104:	b9 a5       	ldd	r27, Y+41	; 0x29
   1a106:	8d 91       	ld	r24, X+
   1a108:	9d 91       	ld	r25, X+
   1a10a:	0d 90       	ld	r0, X+
   1a10c:	bc 91       	ld	r27, X
   1a10e:	a0 2d       	mov	r26, r0
   1a110:	88 a3       	std	Y+32, r24	; 0x20
   1a112:	99 a3       	std	Y+33, r25	; 0x21
   1a114:	aa a3       	std	Y+34, r26	; 0x22
   1a116:	bb a3       	std	Y+35, r27	; 0x23
   1a118:	ea a5       	ldd	r30, Y+42	; 0x2a
   1a11a:	fb a5       	ldd	r31, Y+43	; 0x2b
   1a11c:	a0 80       	ld	r10, Z
   1a11e:	b1 80       	ldd	r11, Z+1	; 0x01
   1a120:	8c a5       	ldd	r24, Y+44	; 0x2c
   1a122:	9d a5       	ldd	r25, Y+45	; 0x2d
   1a124:	0e 94 28 c3 	call	0x18650	; 0x18650 <lif_lifbcd2timestr>
   1a128:	ed b7       	in	r30, 0x3d	; 61
   1a12a:	fe b7       	in	r31, 0x3e	; 62
   1a12c:	95 8b       	std	Z+21, r25	; 0x15
   1a12e:	84 8b       	std	Z+20, r24	; 0x14
   1a130:	b3 8a       	std	Z+19, r11	; 0x13
   1a132:	a2 8a       	std	Z+18, r10	; 0x12
   1a134:	2e 89       	ldd	r18, Y+22	; 0x16
   1a136:	3f 89       	ldd	r19, Y+23	; 0x17
   1a138:	31 8b       	std	Z+17, r19	; 0x11
   1a13a:	20 8b       	std	Z+16, r18	; 0x10
   1a13c:	88 8d       	ldd	r24, Y+24	; 0x18
   1a13e:	99 8d       	ldd	r25, Y+25	; 0x19
   1a140:	aa 8d       	ldd	r26, Y+26	; 0x1a
   1a142:	bb 8d       	ldd	r27, Y+27	; 0x1b
   1a144:	84 87       	std	Z+12, r24	; 0x0c
   1a146:	95 87       	std	Z+13, r25	; 0x0d
   1a148:	a6 87       	std	Z+14, r26	; 0x0e
   1a14a:	b7 87       	std	Z+15, r27	; 0x0f
   1a14c:	88 a1       	ldd	r24, Y+32	; 0x20
   1a14e:	99 a1       	ldd	r25, Y+33	; 0x21
   1a150:	aa a1       	ldd	r26, Y+34	; 0x22
   1a152:	bb a1       	ldd	r27, Y+35	; 0x23
   1a154:	80 87       	std	Z+8, r24	; 0x08
   1a156:	91 87       	std	Z+9, r25	; 0x09
   1a158:	a2 87       	std	Z+10, r26	; 0x0a
   1a15a:	b3 87       	std	Z+11, r27	; 0x0b
   1a15c:	97 82       	std	Z+7, r9	; 0x07
   1a15e:	86 82       	std	Z+6, r8	; 0x06
   1a160:	15 83       	std	Z+5, r17	; 0x05
   1a162:	04 83       	std	Z+4, r16	; 0x04
   1a164:	41 82       	std	Z+1, r4	; 0x01
   1a166:	52 82       	std	Z+2, r5	; 0x02
   1a168:	63 82       	std	Z+3, r6	; 0x03
   1a16a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a16e:	ff ef       	ldi	r31, 0xFF	; 255
   1a170:	2f 1a       	sub	r2, r31
   1a172:	3f 0a       	sbc	r3, r31
    }
   1a174:	4c cf       	rjmp	.-360    	; 0x1a00e <lif_dir+0x100>

    printf("\n");
   1a176:	89 eb       	ldi	r24, 0xB9	; 185
   1a178:	96 e3       	ldi	r25, 0x36	; 54
   1a17a:	a0 e0       	ldi	r26, 0x00	; 0
   1a17c:	ed b7       	in	r30, 0x3d	; 61
   1a17e:	fe b7       	in	r31, 0x3e	; 62
   1a180:	81 83       	std	Z+1, r24	; 0x01
   1a182:	92 83       	std	Z+2, r25	; 0x02
   1a184:	a3 83       	std	Z+3, r26	; 0x03
   1a186:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a18a:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a18c:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a18e:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a190:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a192:	09 2e       	mov	r0, r25
   1a194:	00 0c       	add	r0, r0
   1a196:	aa 0b       	sbc	r26, r26
   1a198:	bb 0b       	sbc	r27, r27
   1a19a:	ed b7       	in	r30, 0x3d	; 61
   1a19c:	fe b7       	in	r31, 0x3e	; 62
   1a19e:	84 83       	std	Z+4, r24	; 0x04
   1a1a0:	95 83       	std	Z+5, r25	; 0x05
   1a1a2:	a6 83       	std	Z+6, r26	; 0x06
   1a1a4:	b7 83       	std	Z+7, r27	; 0x07
   1a1a6:	8d ea       	ldi	r24, 0xAD	; 173
   1a1a8:	96 e3       	ldi	r25, 0x36	; 54
   1a1aa:	a0 e0       	ldi	r26, 0x00	; 0
   1a1ac:	81 83       	std	Z+1, r24	; 0x01
   1a1ae:	92 83       	std	Z+2, r25	; 0x02
   1a1b0:	a3 83       	std	Z+3, r26	; 0x03
   1a1b2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a1b6:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a1b8:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a1ba:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a1bc:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a1be:	09 2e       	mov	r0, r25
   1a1c0:	00 0c       	add	r0, r0
   1a1c2:	aa 0b       	sbc	r26, r26
   1a1c4:	bb 0b       	sbc	r27, r27
   1a1c6:	ed b7       	in	r30, 0x3d	; 61
   1a1c8:	fe b7       	in	r31, 0x3e	; 62
   1a1ca:	84 83       	std	Z+4, r24	; 0x04
   1a1cc:	95 83       	std	Z+5, r25	; 0x05
   1a1ce:	a6 83       	std	Z+6, r26	; 0x06
   1a1d0:	b7 83       	std	Z+7, r27	; 0x07
   1a1d2:	80 ea       	ldi	r24, 0xA0	; 160
   1a1d4:	96 e3       	ldi	r25, 0x36	; 54
   1a1d6:	a0 e0       	ldi	r26, 0x00	; 0
   1a1d8:	81 83       	std	Z+1, r24	; 0x01
   1a1da:	92 83       	std	Z+2, r25	; 0x02
   1a1dc:	a3 83       	std	Z+3, r26	; 0x03
   1a1de:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a1e2:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a1e4:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a1e6:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a1e8:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a1ea:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a1ec:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a1ee:	ed b7       	in	r30, 0x3d	; 61
   1a1f0:	fe b7       	in	r31, 0x3e	; 62
   1a1f2:	84 83       	std	Z+4, r24	; 0x04
   1a1f4:	95 83       	std	Z+5, r25	; 0x05
   1a1f6:	a6 83       	std	Z+6, r26	; 0x06
   1a1f8:	b7 83       	std	Z+7, r27	; 0x07
   1a1fa:	8f e8       	ldi	r24, 0x8F	; 143
   1a1fc:	96 e3       	ldi	r25, 0x36	; 54
   1a1fe:	a0 e0       	ldi	r26, 0x00	; 0
   1a200:	81 83       	std	Z+1, r24	; 0x01
   1a202:	92 83       	std	Z+2, r25	; 0x02
   1a204:	a3 83       	std	Z+3, r26	; 0x03
   1a206:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a20a:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a20c:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a20e:	85 a9       	ldd	r24, Z+53	; 0x35
   1a210:	96 a9       	ldd	r25, Z+54	; 0x36
   1a212:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a214:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a216:	ed b7       	in	r30, 0x3d	; 61
   1a218:	fe b7       	in	r31, 0x3e	; 62
   1a21a:	84 83       	std	Z+4, r24	; 0x04
   1a21c:	95 83       	std	Z+5, r25	; 0x05
   1a21e:	a6 83       	std	Z+6, r26	; 0x06
   1a220:	b7 83       	std	Z+7, r27	; 0x07
   1a222:	8c e7       	ldi	r24, 0x7C	; 124
   1a224:	96 e3       	ldi	r25, 0x36	; 54
   1a226:	a0 e0       	ldi	r26, 0x00	; 0
   1a228:	81 83       	std	Z+1, r24	; 0x01
   1a22a:	92 83       	std	Z+2, r25	; 0x02
   1a22c:	a3 83       	std	Z+3, r26	; 0x03
   1a22e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a232:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a234:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a236:	84 89       	ldd	r24, Z+20	; 0x14
   1a238:	95 89       	ldd	r25, Z+21	; 0x15
   1a23a:	a6 89       	ldd	r26, Z+22	; 0x16
   1a23c:	b7 89       	ldd	r27, Z+23	; 0x17
   1a23e:	ed b7       	in	r30, 0x3d	; 61
   1a240:	fe b7       	in	r31, 0x3e	; 62
   1a242:	84 83       	std	Z+4, r24	; 0x04
   1a244:	95 83       	std	Z+5, r25	; 0x05
   1a246:	a6 83       	std	Z+6, r26	; 0x06
   1a248:	b7 83       	std	Z+7, r27	; 0x07
   1a24a:	89 e6       	ldi	r24, 0x69	; 105
   1a24c:	96 e3       	ldi	r25, 0x36	; 54
   1a24e:	a0 e0       	ldi	r26, 0x00	; 0
   1a250:	81 83       	std	Z+1, r24	; 0x01
   1a252:	92 83       	std	Z+2, r25	; 0x02
   1a254:	a3 83       	std	Z+3, r26	; 0x03
   1a256:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a25a:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a25c:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a25e:	80 8d       	ldd	r24, Z+24	; 0x18
   1a260:	91 8d       	ldd	r25, Z+25	; 0x19
   1a262:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a264:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a266:	ed b7       	in	r30, 0x3d	; 61
   1a268:	fe b7       	in	r31, 0x3e	; 62
   1a26a:	84 83       	std	Z+4, r24	; 0x04
   1a26c:	95 83       	std	Z+5, r25	; 0x05
   1a26e:	a6 83       	std	Z+6, r26	; 0x06
   1a270:	b7 83       	std	Z+7, r27	; 0x07
   1a272:	86 e5       	ldi	r24, 0x56	; 86
   1a274:	96 e3       	ldi	r25, 0x36	; 54
   1a276:	a0 e0       	ldi	r26, 0x00	; 0
   1a278:	81 83       	std	Z+1, r24	; 0x01
   1a27a:	92 83       	std	Z+2, r25	; 0x02
   1a27c:	a3 83       	std	Z+3, r26	; 0x03
   1a27e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a282:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a284:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a286:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a28a:	af 96       	adiw	r28, 0x2f	; 47
   1a28c:	0f b6       	in	r0, 0x3f	; 63
   1a28e:	f8 94       	cli
   1a290:	de bf       	out	0x3e, r29	; 62
   1a292:	0f be       	out	0x3f, r0	; 63
   1a294:	cd bf       	out	0x3d, r28	; 61
   1a296:	df 91       	pop	r29
   1a298:	cf 91       	pop	r28
   1a29a:	1f 91       	pop	r17
   1a29c:	0f 91       	pop	r16
   1a29e:	ef 90       	pop	r14
   1a2a0:	df 90       	pop	r13
   1a2a2:	cf 90       	pop	r12
   1a2a4:	bf 90       	pop	r11
   1a2a6:	af 90       	pop	r10
   1a2a8:	9f 90       	pop	r9
   1a2aa:	8f 90       	pop	r8
   1a2ac:	6f 90       	pop	r6
   1a2ae:	5f 90       	pop	r5
   1a2b0:	4f 90       	pop	r4
   1a2b2:	3f 90       	pop	r3
   1a2b4:	2f 90       	pop	r2
   1a2b6:	08 95       	ret

0001a2b8 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a2b8:	a5 e0       	ldi	r26, 0x05	; 5
   1a2ba:	b0 e0       	ldi	r27, 0x00	; 0
   1a2bc:	e2 e6       	ldi	r30, 0x62	; 98
   1a2be:	f1 ed       	ldi	r31, 0xD1	; 209
   1a2c0:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__prologue_saves__+0x10>
   1a2c4:	7c 01       	movw	r14, r24
   1a2c6:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a2c8:	cb 01       	movw	r24, r22
   1a2ca:	0e 94 19 c0 	call	0x18032	; 0x18032 <lif_checkname>
   1a2ce:	89 2b       	or	r24, r25
   1a2d0:	69 f4       	brne	.+26     	; 0x1a2ec <lif_find_file+0x34>
    {
        if(debuglevel & LIF_DEBUG)
   1a2d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a2d6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a2da:	92 ff       	sbrs	r25, 2
   1a2dc:	48 c0       	rjmp	.+144    	; 0x1a36e <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a2de:	ed b7       	in	r30, 0x3d	; 61
   1a2e0:	fe b7       	in	r31, 0x3e	; 62
   1a2e2:	d5 83       	std	Z+5, r29	; 0x05
   1a2e4:	c4 83       	std	Z+4, r28	; 0x04
   1a2e6:	8f e2       	ldi	r24, 0x2F	; 47
   1a2e8:	96 e3       	ldi	r25, 0x36	; 54
   1a2ea:	15 c0       	rjmp	.+42     	; 0x1a316 <lif_find_file+0x5e>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a2ec:	fe 01       	movw	r30, r28
   1a2ee:	01 90       	ld	r0, Z+
   1a2f0:	00 20       	and	r0, r0
   1a2f2:	e9 f7       	brne	.-6      	; 0x1a2ee <lif_find_file+0x36>
   1a2f4:	31 97       	sbiw	r30, 0x01	; 1
   1a2f6:	ec 1b       	sub	r30, r28
   1a2f8:	fd 0b       	sbc	r31, r29
   1a2fa:	3b 97       	sbiw	r30, 0x0b	; 11
   1a2fc:	98 f0       	brcs	.+38     	; 0x1a324 <lif_find_file+0x6c>
    {
        if(debuglevel & LIF_DEBUG)
   1a2fe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a302:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a306:	92 ff       	sbrs	r25, 2
   1a308:	32 c0       	rjmp	.+100    	; 0x1a36e <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a30a:	ed b7       	in	r30, 0x3d	; 61
   1a30c:	fe b7       	in	r31, 0x3e	; 62
   1a30e:	d5 83       	std	Z+5, r29	; 0x05
   1a310:	c4 83       	std	Z+4, r28	; 0x04
   1a312:	8a e0       	ldi	r24, 0x0A	; 10
   1a314:	96 e3       	ldi	r25, 0x36	; 54
   1a316:	a0 e0       	ldi	r26, 0x00	; 0
   1a318:	81 83       	std	Z+1, r24	; 0x01
   1a31a:	92 83       	std	Z+2, r25	; 0x02
   1a31c:	a3 83       	std	Z+3, r26	; 0x03
   1a31e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1a322:	25 c0       	rjmp	.+74     	; 0x1a36e <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1a324:	e1 14       	cp	r14, r1
   1a326:	f1 04       	cpc	r15, r1
   1a328:	11 f1       	breq	.+68     	; 0x1a36e <lif_find_file+0xb6>
   1a32a:	00 e0       	ldi	r16, 0x00	; 0
   1a32c:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a32e:	67 01       	movw	r12, r14
   1a330:	fa e5       	ldi	r31, 0x5A	; 90
   1a332:	cf 0e       	add	r12, r31
   1a334:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a336:	57 01       	movw	r10, r14
   1a338:	2f e4       	ldi	r18, 0x4F	; 79
   1a33a:	a2 0e       	add	r10, r18
   1a33c:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a33e:	b8 01       	movw	r22, r16
   1a340:	c7 01       	movw	r24, r14
   1a342:	0e 94 58 c8 	call	0x190b0	; 0x190b0 <lif_readdirindex>
   1a346:	89 2b       	or	r24, r25
   1a348:	91 f0       	breq	.+36     	; 0x1a36e <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a34a:	f6 01       	movw	r30, r12
   1a34c:	80 81       	ld	r24, Z
   1a34e:	91 81       	ldd	r25, Z+1	; 0x01
   1a350:	8f 3f       	cpi	r24, 0xFF	; 255
   1a352:	ff ef       	ldi	r31, 0xFF	; 255
   1a354:	9f 07       	cpc	r25, r31
   1a356:	59 f0       	breq	.+22     	; 0x1a36e <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a358:	89 2b       	or	r24, r25
   1a35a:	31 f0       	breq	.+12     	; 0x1a368 <lif_find_file+0xb0>
   1a35c:	be 01       	movw	r22, r28
   1a35e:	c5 01       	movw	r24, r10
   1a360:	0e 94 b6 2f 	call	0x5f6c	; 0x5f6c <strcasecmp>
   1a364:	89 2b       	or	r24, r25
   1a366:	31 f0       	breq	.+12     	; 0x1a374 <lif_find_file+0xbc>
            break;
        ++index;
   1a368:	0f 5f       	subi	r16, 0xFF	; 255
   1a36a:	1f 4f       	sbci	r17, 0xFF	; 255
   1a36c:	e8 cf       	rjmp	.-48     	; 0x1a33e <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a36e:	8f ef       	ldi	r24, 0xFF	; 255
   1a370:	9f ef       	ldi	r25, 0xFF	; 255
   1a372:	01 c0       	rjmp	.+2      	; 0x1a376 <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a374:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a376:	cd b7       	in	r28, 0x3d	; 61
   1a378:	de b7       	in	r29, 0x3e	; 62
   1a37a:	25 96       	adiw	r28, 0x05	; 5
   1a37c:	ea e0       	ldi	r30, 0x0A	; 10
   1a37e:	0c 94 80 e3 	jmp	0x1c700	; 0x1c700 <__epilogue_restores__+0x10>

0001a382 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a382:	a5 e0       	ldi	r26, 0x05	; 5
   1a384:	b0 e0       	ldi	r27, 0x00	; 0
   1a386:	e7 ec       	ldi	r30, 0xC7	; 199
   1a388:	f1 ed       	ldi	r31, 0xD1	; 209
   1a38a:	0c 94 66 e3 	jmp	0x1c6cc	; 0x1c6cc <__prologue_saves__+0x14>
   1a38e:	6b 01       	movw	r12, r22
   1a390:	7c 01       	movw	r14, r24
   1a392:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a394:	20 e0       	ldi	r18, 0x00	; 0
   1a396:	31 e0       	ldi	r19, 0x01	; 1
   1a398:	40 e0       	ldi	r20, 0x00	; 0
   1a39a:	50 e0       	ldi	r21, 0x00	; 0
   1a39c:	0e 94 11 e3 	call	0x1c622	; 0x1c622 <__divmodsi4>
    if(!pos)
   1a3a0:	61 15       	cp	r22, r1
   1a3a2:	71 05       	cpc	r23, r1
   1a3a4:	e1 f1       	breq	.+120    	; 0x1a41e <lif_e010_pad_sector+0x9c>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a3a6:	c0 e0       	ldi	r28, 0x00	; 0
   1a3a8:	d1 e0       	ldi	r29, 0x01	; 1
   1a3aa:	c6 1b       	sub	r28, r22
   1a3ac:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1a3ae:	f8 01       	movw	r30, r16
   1a3b0:	8f ee       	ldi	r24, 0xEF	; 239
   1a3b2:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a3b4:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a3b6:	cf 01       	movw	r24, r30
   1a3b8:	80 1b       	sub	r24, r16
   1a3ba:	91 0b       	sbc	r25, r17
   1a3bc:	8c 17       	cp	r24, r28
   1a3be:	9d 07       	cpc	r25, r29
   1a3c0:	14 f4       	brge	.+4      	; 0x1a3c6 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a3c2:	21 93       	st	Z+, r18
   1a3c4:	f8 cf       	rjmp	.-16     	; 0x1a3b6 <lif_e010_pad_sector+0x34>
   1a3c6:	1c 16       	cp	r1, r28
   1a3c8:	1d 06       	cpc	r1, r29
   1a3ca:	14 f0       	brlt	.+4      	; 0x1a3d0 <lif_e010_pad_sector+0x4e>
   1a3cc:	c1 e0       	ldi	r28, 0x01	; 1
   1a3ce:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a3d0:	ce 01       	movw	r24, r28
   1a3d2:	0d 2e       	mov	r0, r29
   1a3d4:	00 0c       	add	r0, r0
   1a3d6:	aa 0b       	sbc	r26, r26
   1a3d8:	bb 0b       	sbc	r27, r27
   1a3da:	bc 01       	movw	r22, r24
   1a3dc:	cd 01       	movw	r24, r26
   1a3de:	6c 0d       	add	r22, r12
   1a3e0:	7d 1d       	adc	r23, r13
   1a3e2:	8e 1d       	adc	r24, r14
   1a3e4:	9f 1d       	adc	r25, r15
   1a3e6:	20 e0       	ldi	r18, 0x00	; 0
   1a3e8:	31 e0       	ldi	r19, 0x01	; 1
   1a3ea:	40 e0       	ldi	r20, 0x00	; 0
   1a3ec:	50 e0       	ldi	r21, 0x00	; 0
   1a3ee:	0e 94 11 e3 	call	0x1c622	; 0x1c622 <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1a3f2:	61 15       	cp	r22, r1
   1a3f4:	71 05       	cpc	r23, r1
   1a3f6:	b1 f0       	breq	.+44     	; 0x1a424 <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & LIF_DEBUG)
   1a3f8:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a3fc:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a400:	32 ff       	sbrs	r19, 2
   1a402:	12 c0       	rjmp	.+36     	; 0x1a428 <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a404:	ed b7       	in	r30, 0x3d	; 61
   1a406:	fe b7       	in	r31, 0x3e	; 62
   1a408:	75 83       	std	Z+5, r23	; 0x05
   1a40a:	64 83       	std	Z+4, r22	; 0x04
   1a40c:	81 ed       	ldi	r24, 0xD1	; 209
   1a40e:	95 e3       	ldi	r25, 0x35	; 53
   1a410:	a0 e0       	ldi	r26, 0x00	; 0
   1a412:	81 83       	std	Z+1, r24	; 0x01
   1a414:	92 83       	std	Z+2, r25	; 0x02
   1a416:	a3 83       	std	Z+3, r26	; 0x03
   1a418:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1a41c:	05 c0       	rjmp	.+10     	; 0x1a428 <lif_e010_pad_sector+0xa6>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a41e:	80 e0       	ldi	r24, 0x00	; 0
   1a420:	90 e0       	ldi	r25, 0x00	; 0
   1a422:	04 c0       	rjmp	.+8      	; 0x1a42c <lif_e010_pad_sector+0xaa>
   1a424:	ce 01       	movw	r24, r28
   1a426:	02 c0       	rjmp	.+4      	; 0x1a42c <lif_e010_pad_sector+0xaa>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a428:	8f ef       	ldi	r24, 0xFF	; 255
   1a42a:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a42c:	cd b7       	in	r28, 0x3d	; 61
   1a42e:	de b7       	in	r29, 0x3e	; 62
   1a430:	25 96       	adiw	r28, 0x05	; 5
   1a432:	e8 e0       	ldi	r30, 0x08	; 8
   1a434:	0c 94 82 e3 	jmp	0x1c704	; 0x1c704 <__epilogue_restores__+0x14>

0001a438 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a438:	a5 e0       	ldi	r26, 0x05	; 5
   1a43a:	b0 e0       	ldi	r27, 0x00	; 0
   1a43c:	e2 e2       	ldi	r30, 0x22	; 34
   1a43e:	f2 ed       	ldi	r31, 0xD2	; 210
   1a440:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
   1a444:	ec 01       	movw	r28, r24
   1a446:	4a 01       	movw	r8, r20
   1a448:	5b 01       	movw	r10, r22
   1a44a:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1a44c:	fc 01       	movw	r30, r24
   1a44e:	01 90       	ld	r0, Z+
   1a450:	00 20       	and	r0, r0
   1a452:	e9 f7       	brne	.-6      	; 0x1a44e <lif_ascii_string_to_e010+0x16>
   1a454:	31 97       	sbiw	r30, 0x01	; 1
   1a456:	6f 01       	movw	r12, r30
   1a458:	c8 1a       	sub	r12, r24
   1a45a:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a45c:	41 2c       	mov	r4, r1
   1a45e:	51 2c       	mov	r5, r1
   1a460:	32 01       	movw	r6, r4
   1a462:	53 94       	inc	r5
   1a464:	cb 01       	movw	r24, r22
   1a466:	ba 01       	movw	r22, r20
   1a468:	a3 01       	movw	r20, r6
   1a46a:	92 01       	movw	r18, r4
   1a46c:	0e 94 11 e3 	call	0x1c622	; 0x1c622 <__divmodsi4>
   1a470:	21 2c       	mov	r2, r1
   1a472:	33 24       	eor	r3, r3
   1a474:	33 94       	inc	r3
   1a476:	c1 01       	movw	r24, r2
   1a478:	86 1b       	sub	r24, r22
   1a47a:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1a47c:	86 30       	cpi	r24, 0x06	; 6
   1a47e:	91 05       	cpc	r25, r1
   1a480:	20 f0       	brcs	.+8      	; 0x1a48a <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a482:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1a484:	00 e0       	ldi	r16, 0x00	; 0
   1a486:	10 e0       	ldi	r17, 0x00	; 0
   1a488:	17 c0       	rjmp	.+46     	; 0x1a4b8 <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1a48a:	a7 01       	movw	r20, r14
   1a48c:	c5 01       	movw	r24, r10
   1a48e:	b4 01       	movw	r22, r8
   1a490:	78 df       	rcall	.-272    	; 0x1a382 <lif_e010_pad_sector>
   1a492:	8c 01       	movw	r16, r24
        if(ind < 0)
   1a494:	97 fd       	sbrc	r25, 7
   1a496:	83 c0       	rjmp	.+262    	; 0x1a59e <lif_ascii_string_to_e010+0x166>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1a498:	09 2e       	mov	r0, r25
   1a49a:	00 0c       	add	r0, r0
   1a49c:	aa 0b       	sbc	r26, r26
   1a49e:	bb 0b       	sbc	r27, r27
   1a4a0:	bc 01       	movw	r22, r24
   1a4a2:	cd 01       	movw	r24, r26
   1a4a4:	68 0d       	add	r22, r8
   1a4a6:	79 1d       	adc	r23, r9
   1a4a8:	8a 1d       	adc	r24, r10
   1a4aa:	9b 1d       	adc	r25, r11
   1a4ac:	a3 01       	movw	r20, r6
   1a4ae:	92 01       	movw	r18, r4
   1a4b0:	0e 94 11 e3 	call	0x1c622	; 0x1c622 <__divmodsi4>
   1a4b4:	26 1a       	sub	r2, r22
   1a4b6:	37 0a       	sbc	r3, r23
   1a4b8:	f7 01       	movw	r30, r14
   1a4ba:	e0 0f       	add	r30, r16
   1a4bc:	f1 1f       	adc	r31, r17
   1a4be:	0d 5f       	subi	r16, 0xFD	; 253
   1a4c0:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1a4c2:	c6 01       	movw	r24, r12
   1a4c4:	02 96       	adiw	r24, 0x02	; 2
   1a4c6:	82 15       	cp	r24, r2
   1a4c8:	93 05       	cpc	r25, r3
   1a4ca:	84 f4       	brge	.+32     	; 0x1a4ec <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1a4cc:	8f ed       	ldi	r24, 0xDF	; 223
   1a4ce:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a4d0:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1a4d2:	d2 82       	std	Z+2, r13	; 0x02
   1a4d4:	f7 01       	movw	r30, r14
   1a4d6:	e0 0f       	add	r30, r16
   1a4d8:	f1 1f       	adc	r31, r17
   1a4da:	cf 01       	movw	r24, r30
   1a4dc:	8e 19       	sub	r24, r14
   1a4de:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a4e0:	29 91       	ld	r18, Y+
   1a4e2:	22 23       	and	r18, r18
   1a4e4:	09 f4       	brne	.+2      	; 0x1a4e8 <lif_ascii_string_to_e010+0xb0>
   1a4e6:	5b c0       	rjmp	.+182    	; 0x1a59e <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1a4e8:	21 93       	st	Z+, r18
   1a4ea:	f7 cf       	rjmp	.-18     	; 0x1a4da <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1a4ec:	8f ec       	ldi	r24, 0xCF	; 207
   1a4ee:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a4f0:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1a4f2:	d2 82       	std	Z+2, r13	; 0x02
   1a4f4:	d7 01       	movw	r26, r14
   1a4f6:	a0 0f       	add	r26, r16
   1a4f8:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a4fa:	fe 01       	movw	r30, r28
   1a4fc:	81 91       	ld	r24, Z+
   1a4fe:	81 11       	cpse	r24, r1
   1a500:	0e c0       	rjmp	.+28     	; 0x1a51e <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1a502:	c8 01       	movw	r24, r16
   1a504:	01 2e       	mov	r0, r17
   1a506:	00 0c       	add	r0, r0
   1a508:	aa 0b       	sbc	r26, r26
   1a50a:	bb 0b       	sbc	r27, r27
   1a50c:	bc 01       	movw	r22, r24
   1a50e:	cd 01       	movw	r24, r26
   1a510:	68 0d       	add	r22, r8
   1a512:	79 1d       	adc	r23, r9
   1a514:	8a 1d       	adc	r24, r10
   1a516:	9b 1d       	adc	r25, r11
   1a518:	61 11       	cpse	r22, r1
   1a51a:	09 c0       	rjmp	.+18     	; 0x1a52e <lif_ascii_string_to_e010+0xf6>
   1a51c:	21 c0       	rjmp	.+66     	; 0x1a560 <lif_ascii_string_to_e010+0x128>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a51e:	02 15       	cp	r16, r2
   1a520:	13 05       	cpc	r17, r3
   1a522:	7c f7       	brge	.-34     	; 0x1a502 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1a524:	0f 5f       	subi	r16, 0xFF	; 255
   1a526:	1f 4f       	sbci	r17, 0xFF	; 255
   1a528:	8d 93       	st	X+, r24
   1a52a:	ef 01       	movw	r28, r30
   1a52c:	e6 cf       	rjmp	.-52     	; 0x1a4fa <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
   1a52e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a532:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a536:	32 ff       	sbrs	r19, 2
   1a538:	30 c0       	rjmp	.+96     	; 0x1a59a <lif_ascii_string_to_e010+0x162>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1a53a:	20 e0       	ldi	r18, 0x00	; 0
   1a53c:	31 e0       	ldi	r19, 0x01	; 1
   1a53e:	40 e0       	ldi	r20, 0x00	; 0
   1a540:	50 e0       	ldi	r21, 0x00	; 0
   1a542:	0e 94 11 e3 	call	0x1c622	; 0x1c622 <__divmodsi4>
   1a546:	ed b7       	in	r30, 0x3d	; 61
   1a548:	fe b7       	in	r31, 0x3e	; 62
   1a54a:	75 83       	std	Z+5, r23	; 0x05
   1a54c:	64 83       	std	Z+4, r22	; 0x04
   1a54e:	8d ea       	ldi	r24, 0xAD	; 173
   1a550:	95 e3       	ldi	r25, 0x35	; 53
   1a552:	a0 e0       	ldi	r26, 0x00	; 0
   1a554:	81 83       	std	Z+1, r24	; 0x01
   1a556:	92 83       	std	Z+2, r25	; 0x02
   1a558:	a3 83       	std	Z+3, r26	; 0x03
   1a55a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1a55e:	1d c0       	rjmp	.+58     	; 0x1a59a <lif_ascii_string_to_e010+0x162>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1a560:	fe 01       	movw	r30, r28
   1a562:	01 90       	ld	r0, Z+
   1a564:	00 20       	and	r0, r0
   1a566:	e9 f7       	brne	.-6      	; 0x1a562 <lif_ascii_string_to_e010+0x12a>
   1a568:	31 97       	sbiw	r30, 0x01	; 1
   1a56a:	9f 01       	movw	r18, r30
   1a56c:	2c 1b       	sub	r18, r28
   1a56e:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1a570:	d7 01       	movw	r26, r14
   1a572:	a0 0f       	add	r26, r16
   1a574:	b1 1f       	adc	r27, r17
   1a576:	8f e6       	ldi	r24, 0x6F	; 111
   1a578:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1a57a:	fd 01       	movw	r30, r26
   1a57c:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1a57e:	32 83       	std	Z+2, r19	; 0x02
   1a580:	0d 5f       	subi	r16, 0xFD	; 253
   1a582:	1f 4f       	sbci	r17, 0xFF	; 255
   1a584:	f7 01       	movw	r30, r14
   1a586:	e0 0f       	add	r30, r16
   1a588:	f1 1f       	adc	r31, r17
   1a58a:	cf 01       	movw	r24, r30
   1a58c:	8e 19       	sub	r24, r14
   1a58e:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a590:	29 91       	ld	r18, Y+
   1a592:	22 23       	and	r18, r18
   1a594:	21 f0       	breq	.+8      	; 0x1a59e <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1a596:	21 93       	st	Z+, r18
   1a598:	f8 cf       	rjmp	.-16     	; 0x1a58a <lif_ascii_string_to_e010+0x152>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1a59a:	8f ef       	ldi	r24, 0xFF	; 255
   1a59c:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1a59e:	cd b7       	in	r28, 0x3d	; 61
   1a5a0:	de b7       	in	r29, 0x3e	; 62
   1a5a2:	25 96       	adiw	r28, 0x05	; 5
   1a5a4:	e2 e1       	ldi	r30, 0x12	; 18
   1a5a6:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

0001a5aa <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1a5aa:	ad e0       	ldi	r26, 0x0D	; 13
   1a5ac:	b3 e0       	ldi	r27, 0x03	; 3
   1a5ae:	eb ed       	ldi	r30, 0xDB	; 219
   1a5b0:	f2 ed       	ldi	r31, 0xD2	; 210
   1a5b2:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
   1a5b6:	5c 01       	movw	r10, r24
   1a5b8:	2a 01       	movw	r4, r20
   1a5ba:	3b 01       	movw	r6, r22
   1a5bc:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1a5be:	6e ef       	ldi	r22, 0xFE	; 254
   1a5c0:	78 e0       	ldi	r23, 0x08	; 8
   1a5c2:	0e 94 7a be 	call	0x17cf4	; 0x17cf4 <lif_open>
   1a5c6:	c7 5f       	subi	r28, 0xF7	; 247
   1a5c8:	dc 4f       	sbci	r29, 0xFC	; 252
   1a5ca:	99 83       	std	Y+1, r25	; 0x01
   1a5cc:	88 83       	st	Y, r24
   1a5ce:	c9 50       	subi	r28, 0x09	; 9
   1a5d0:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1a5d2:	89 2b       	or	r24, r25
   1a5d4:	09 f4       	brne	.+2      	; 0x1a5d8 <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1a5d6:	63 c0       	rjmp	.+198    	; 0x1a69e <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1a5d8:	81 2c       	mov	r8, r1
   1a5da:	91 2c       	mov	r9, r1
   1a5dc:	c1 2c       	mov	r12, r1
   1a5de:	d1 2c       	mov	r13, r1
   1a5e0:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1a5e2:	8f e9       	ldi	r24, 0x9F	; 159
   1a5e4:	95 e3       	ldi	r25, 0x35	; 53
   1a5e6:	9c 01       	movw	r18, r24
   1a5e8:	40 e0       	ldi	r20, 0x00	; 0
   1a5ea:	c5 5f       	subi	r28, 0xF5	; 245
   1a5ec:	dc 4f       	sbci	r29, 0xFC	; 252
   1a5ee:	28 83       	st	Y, r18
   1a5f0:	39 83       	std	Y+1, r19	; 0x01
   1a5f2:	4a 83       	std	Y+2, r20	; 0x02
   1a5f4:	cb 50       	subi	r28, 0x0B	; 11
   1a5f6:	d3 40       	sbci	r29, 0x03	; 3
   1a5f8:	14 c0       	rjmp	.+40     	; 0x1a622 <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1a5fa:	c1 01       	movw	r24, r2
   1a5fc:	03 2c       	mov	r0, r3
   1a5fe:	00 0c       	add	r0, r0
   1a600:	aa 0b       	sbc	r26, r26
   1a602:	bb 0b       	sbc	r27, r27
   1a604:	48 0e       	add	r4, r24
   1a606:	59 1e       	adc	r5, r25
   1a608:	6a 1e       	adc	r6, r26
   1a60a:	7b 1e       	adc	r7, r27
        bytes += size;
   1a60c:	c8 0e       	add	r12, r24
   1a60e:	d9 1e       	adc	r13, r25
   1a610:	ea 1e       	adc	r14, r26
   1a612:	fb 1e       	adc	r15, r27
        count += size;
   1a614:	82 0c       	add	r8, r2
   1a616:	93 1c       	adc	r9, r3

        if(count > 256)
   1a618:	31 e0       	ldi	r19, 0x01	; 1
   1a61a:	83 16       	cp	r8, r19
   1a61c:	93 06       	cpc	r9, r19
   1a61e:	0c f0       	brlt	.+2      	; 0x1a622 <lif_add_ascii_file_as_e010_wrapper+0x78>
   1a620:	43 c0       	rjmp	.+134    	; 0x1a6a8 <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1a622:	c7 5f       	subi	r28, 0xF7	; 247
   1a624:	dc 4f       	sbci	r29, 0xFC	; 252
   1a626:	48 81       	ld	r20, Y
   1a628:	59 81       	ldd	r21, Y+1	; 0x01
   1a62a:	c9 50       	subi	r28, 0x09	; 9
   1a62c:	d3 40       	sbci	r29, 0x03	; 3
   1a62e:	6d ef       	ldi	r22, 0xFD	; 253
   1a630:	70 e0       	ldi	r23, 0x00	; 0
   1a632:	ce 01       	movw	r24, r28
   1a634:	88 5f       	subi	r24, 0xF8	; 248
   1a636:	9d 4f       	sbci	r25, 0xFD	; 253
   1a638:	0e 94 4e 75 	call	0xea9c	; 0xea9c <fgets>
   1a63c:	89 2b       	or	r24, r25
   1a63e:	09 f4       	brne	.+2      	; 0x1a642 <lif_add_ascii_file_as_e010_wrapper+0x98>
   1a640:	4b c0       	rjmp	.+150    	; 0x1a6d8 <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1a642:	ce 01       	movw	r24, r28
   1a644:	88 5f       	subi	r24, 0xF8	; 248
   1a646:	9d 4f       	sbci	r25, 0xFD	; 253
   1a648:	0e 94 2d 30 	call	0x605a	; 0x605a <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1a64c:	6a e5       	ldi	r22, 0x5A	; 90
   1a64e:	76 e1       	ldi	r23, 0x16	; 22
   1a650:	ce 01       	movw	r24, r28
   1a652:	88 5f       	subi	r24, 0xF8	; 248
   1a654:	9d 4f       	sbci	r25, 0xFD	; 253
   1a656:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1a65a:	9e 01       	movw	r18, r28
   1a65c:	28 5f       	subi	r18, 0xF8	; 248
   1a65e:	3f 4f       	sbci	r19, 0xFF	; 255
   1a660:	b3 01       	movw	r22, r6
   1a662:	a2 01       	movw	r20, r4
   1a664:	ce 01       	movw	r24, r28
   1a666:	88 5f       	subi	r24, 0xF8	; 248
   1a668:	9d 4f       	sbci	r25, 0xFD	; 253
   1a66a:	e6 de       	rcall	.-564    	; 0x1a438 <lif_ascii_string_to_e010>
   1a66c:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1a66e:	a1 14       	cp	r10, r1
   1a670:	b1 04       	cpc	r11, r1
   1a672:	19 f2       	breq	.-122    	; 0x1a5fa <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1a674:	8c 01       	movw	r16, r24
   1a676:	a3 01       	movw	r20, r6
   1a678:	92 01       	movw	r18, r4
   1a67a:	be 01       	movw	r22, r28
   1a67c:	68 5f       	subi	r22, 0xF8	; 248
   1a67e:	7f 4f       	sbci	r23, 0xFF	; 255
   1a680:	c5 01       	movw	r24, r10
   1a682:	0e 94 51 bf 	call	0x17ea2	; 0x17ea2 <lif_write>
            if(len < size)
   1a686:	82 15       	cp	r24, r2
   1a688:	93 05       	cpc	r25, r3
   1a68a:	0c f0       	brlt	.+2      	; 0x1a68e <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1a68c:	b6 cf       	rjmp	.-148    	; 0x1a5fa <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1a68e:	c7 5f       	subi	r28, 0xF7	; 247
   1a690:	dc 4f       	sbci	r29, 0xFC	; 252
   1a692:	88 81       	ld	r24, Y
   1a694:	99 81       	ldd	r25, Y+1	; 0x01
   1a696:	c9 50       	subi	r28, 0x09	; 9
   1a698:	d3 40       	sbci	r29, 0x03	; 3
   1a69a:	0e 94 e0 7b 	call	0xf7c0	; 0xf7c0 <fclose>
                return(-1);
   1a69e:	6f ef       	ldi	r22, 0xFF	; 255
   1a6a0:	7f ef       	ldi	r23, 0xFF	; 255
   1a6a2:	8f ef       	ldi	r24, 0xFF	; 255
   1a6a4:	9f ef       	ldi	r25, 0xFF	; 255
   1a6a6:	84 c0       	rjmp	.+264    	; 0x1a7b0 <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1a6a8:	a1 14       	cp	r10, r1
   1a6aa:	b1 04       	cpc	r11, r1
   1a6ac:	91 f0       	breq	.+36     	; 0x1a6d2 <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1a6ae:	ed b7       	in	r30, 0x3d	; 61
   1a6b0:	fe b7       	in	r31, 0x3e	; 62
   1a6b2:	c4 82       	std	Z+4, r12	; 0x04
   1a6b4:	d5 82       	std	Z+5, r13	; 0x05
   1a6b6:	e6 82       	std	Z+6, r14	; 0x06
   1a6b8:	f7 82       	std	Z+7, r15	; 0x07
   1a6ba:	c5 5f       	subi	r28, 0xF5	; 245
   1a6bc:	dc 4f       	sbci	r29, 0xFC	; 252
   1a6be:	28 81       	ld	r18, Y
   1a6c0:	39 81       	ldd	r19, Y+1	; 0x01
   1a6c2:	4a 81       	ldd	r20, Y+2	; 0x02
   1a6c4:	cb 50       	subi	r28, 0x0B	; 11
   1a6c6:	d3 40       	sbci	r29, 0x03	; 3
   1a6c8:	21 83       	std	Z+1, r18	; 0x01
   1a6ca:	32 83       	std	Z+2, r19	; 0x02
   1a6cc:	43 83       	std	Z+3, r20	; 0x03
   1a6ce:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1a6d2:	81 2c       	mov	r8, r1
   1a6d4:	91 2c       	mov	r9, r1
   1a6d6:	a5 cf       	rjmp	.-182    	; 0x1a622 <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1a6d8:	c7 5f       	subi	r28, 0xF7	; 247
   1a6da:	dc 4f       	sbci	r29, 0xFC	; 252
   1a6dc:	88 81       	ld	r24, Y
   1a6de:	99 81       	ldd	r25, Y+1	; 0x01
   1a6e0:	c9 50       	subi	r28, 0x09	; 9
   1a6e2:	d3 40       	sbci	r29, 0x03	; 3
   1a6e4:	0e 94 e0 7b 	call	0xf7c0	; 0xf7c0 <fclose>

// Write EOF
    str[0] = 0;
   1a6e8:	c8 5f       	subi	r28, 0xF8	; 248
   1a6ea:	dd 4f       	sbci	r29, 0xFD	; 253
   1a6ec:	18 82       	st	Y, r1
   1a6ee:	c8 50       	subi	r28, 0x08	; 8
   1a6f0:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1a6f2:	9e 01       	movw	r18, r28
   1a6f4:	28 5f       	subi	r18, 0xF8	; 248
   1a6f6:	3f 4f       	sbci	r19, 0xFF	; 255
   1a6f8:	b3 01       	movw	r22, r6
   1a6fa:	a2 01       	movw	r20, r4
   1a6fc:	ce 01       	movw	r24, r28
   1a6fe:	88 5f       	subi	r24, 0xF8	; 248
   1a700:	9d 4f       	sbci	r25, 0xFD	; 253
   1a702:	9a de       	rcall	.-716    	; 0x1a438 <lif_ascii_string_to_e010>
   1a704:	4c 01       	movw	r8, r24

    if(LIF)
   1a706:	a1 14       	cp	r10, r1
   1a708:	b1 04       	cpc	r11, r1
   1a70a:	d1 f4       	brne	.+52     	; 0x1a740 <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1a70c:	c4 01       	movw	r24, r8
   1a70e:	09 2c       	mov	r0, r9
   1a710:	00 0c       	add	r0, r0
   1a712:	aa 0b       	sbc	r26, r26
   1a714:	bb 0b       	sbc	r27, r27
   1a716:	c8 0e       	add	r12, r24
   1a718:	d9 1e       	adc	r13, r25
   1a71a:	ea 1e       	adc	r14, r26
   1a71c:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1a71e:	12 01       	movw	r2, r4
   1a720:	23 01       	movw	r4, r6
   1a722:	28 0e       	add	r2, r24
   1a724:	39 1e       	adc	r3, r25
   1a726:	4a 1e       	adc	r4, r26
   1a728:	5b 1e       	adc	r5, r27
   1a72a:	ae 01       	movw	r20, r28
   1a72c:	48 5f       	subi	r20, 0xF8	; 248
   1a72e:	5f 4f       	sbci	r21, 0xFF	; 255
   1a730:	c2 01       	movw	r24, r4
   1a732:	b1 01       	movw	r22, r2
   1a734:	26 de       	rcall	.-948    	; 0x1a382 <lif_e010_pad_sector>
   1a736:	3c 01       	movw	r6, r24
    if(LIF)
   1a738:	a1 14       	cp	r10, r1
   1a73a:	b1 04       	cpc	r11, r1
   1a73c:	e1 f4       	brne	.+56     	; 0x1a776 <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1a73e:	36 c0       	rjmp	.+108    	; 0x1a7ac <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1a740:	ed b7       	in	r30, 0x3d	; 61
   1a742:	fe b7       	in	r31, 0x3e	; 62
   1a744:	c4 82       	std	Z+4, r12	; 0x04
   1a746:	d5 82       	std	Z+5, r13	; 0x05
   1a748:	e6 82       	std	Z+6, r14	; 0x06
   1a74a:	f7 82       	std	Z+7, r15	; 0x07
   1a74c:	81 e9       	ldi	r24, 0x91	; 145
   1a74e:	95 e3       	ldi	r25, 0x35	; 53
   1a750:	a0 e0       	ldi	r26, 0x00	; 0
   1a752:	81 83       	std	Z+1, r24	; 0x01
   1a754:	92 83       	std	Z+2, r25	; 0x02
   1a756:	a3 83       	std	Z+3, r26	; 0x03
   1a758:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1a75c:	84 01       	movw	r16, r8
   1a75e:	a3 01       	movw	r20, r6
   1a760:	92 01       	movw	r18, r4
   1a762:	be 01       	movw	r22, r28
   1a764:	68 5f       	subi	r22, 0xF8	; 248
   1a766:	7f 4f       	sbci	r23, 0xFF	; 255
   1a768:	c5 01       	movw	r24, r10
   1a76a:	0e 94 51 bf 	call	0x17ea2	; 0x17ea2 <lif_write>
        if(len < size)
   1a76e:	88 15       	cp	r24, r8
   1a770:	99 05       	cpc	r25, r9
   1a772:	64 f6       	brge	.-104    	; 0x1a70c <lif_add_ascii_file_as_e010_wrapper+0x162>
   1a774:	94 cf       	rjmp	.-216    	; 0x1a69e <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1a776:	8c 01       	movw	r16, r24
   1a778:	a2 01       	movw	r20, r4
   1a77a:	91 01       	movw	r18, r2
   1a77c:	be 01       	movw	r22, r28
   1a77e:	68 5f       	subi	r22, 0xF8	; 248
   1a780:	7f 4f       	sbci	r23, 0xFF	; 255
   1a782:	c5 01       	movw	r24, r10
   1a784:	0e 94 51 bf 	call	0x17ea2	; 0x17ea2 <lif_write>
        if(len < size)
   1a788:	86 15       	cp	r24, r6
   1a78a:	97 05       	cpc	r25, r7
   1a78c:	0c f4       	brge	.+2      	; 0x1a790 <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1a78e:	87 cf       	rjmp	.-242    	; 0x1a69e <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1a790:	ed b7       	in	r30, 0x3d	; 61
   1a792:	fe b7       	in	r31, 0x3e	; 62
   1a794:	c4 82       	std	Z+4, r12	; 0x04
   1a796:	d5 82       	std	Z+5, r13	; 0x05
   1a798:	e6 82       	std	Z+6, r14	; 0x06
   1a79a:	f7 82       	std	Z+7, r15	; 0x07
   1a79c:	83 e8       	ldi	r24, 0x83	; 131
   1a79e:	95 e3       	ldi	r25, 0x35	; 53
   1a7a0:	a0 e0       	ldi	r26, 0x00	; 0
   1a7a2:	81 83       	std	Z+1, r24	; 0x01
   1a7a4:	92 83       	std	Z+2, r25	; 0x02
   1a7a6:	a3 83       	std	Z+3, r26	; 0x03
   1a7a8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    return(bytes);
   1a7ac:	b6 01       	movw	r22, r12
   1a7ae:	c7 01       	movw	r24, r14
}
   1a7b0:	c3 5f       	subi	r28, 0xF3	; 243
   1a7b2:	dc 4f       	sbci	r29, 0xFC	; 252
   1a7b4:	e2 e1       	ldi	r30, 0x12	; 18
   1a7b6:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

0001a7ba <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1a7ba:	ab e3       	ldi	r26, 0x3B	; 59
   1a7bc:	b0 e0       	ldi	r27, 0x00	; 0
   1a7be:	e3 ee       	ldi	r30, 0xE3	; 227
   1a7c0:	f3 ed       	ldi	r31, 0xD3	; 211
   1a7c2:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
   1a7c6:	6c 01       	movw	r12, r24
   1a7c8:	1b 01       	movw	r2, r22
   1a7ca:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1a7cc:	fc 01       	movw	r30, r24
   1a7ce:	80 81       	ld	r24, Z
   1a7d0:	81 11       	cpse	r24, r1
   1a7d2:	03 c0       	rjmp	.+6      	; 0x1a7da <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1a7d4:	80 e5       	ldi	r24, 0x50	; 80
   1a7d6:	95 e3       	ldi	r25, 0x35	; 53
   1a7d8:	1a c0       	rjmp	.+52     	; 0x1a80e <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1a7da:	fb 01       	movw	r30, r22
   1a7dc:	80 81       	ld	r24, Z
   1a7de:	81 11       	cpse	r24, r1
   1a7e0:	03 c0       	rjmp	.+6      	; 0x1a7e8 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1a7e2:	82 e2       	ldi	r24, 0x22	; 34
   1a7e4:	95 e3       	ldi	r25, 0x35	; 53
   1a7e6:	13 c0       	rjmp	.+38     	; 0x1a80e <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1a7e8:	fa 01       	movw	r30, r20
   1a7ea:	80 81       	ld	r24, Z
   1a7ec:	81 11       	cpse	r24, r1
   1a7ee:	03 c0       	rjmp	.+6      	; 0x1a7f6 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1a7f0:	83 ef       	ldi	r24, 0xF3	; 243
   1a7f2:	94 e3       	ldi	r25, 0x34	; 52
   1a7f4:	0c c0       	rjmp	.+24     	; 0x1a80e <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1a7f6:	be 01       	movw	r22, r28
   1a7f8:	66 5f       	subi	r22, 0xF6	; 246
   1a7fa:	7f 4f       	sbci	r23, 0xFF	; 255
   1a7fc:	ca 01       	movw	r24, r20
   1a7fe:	0e 94 a4 be 	call	0x17d48	; 0x17d48 <lif_stat>
   1a802:	9b af       	std	Y+59, r25	; 0x3b
   1a804:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1a806:	89 2b       	or	r24, r25
   1a808:	59 f4       	brne	.+22     	; 0x1a820 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1a80a:	83 ec       	ldi	r24, 0xC3	; 195
   1a80c:	94 e3       	ldi	r25, 0x34	; 52
   1a80e:	a0 e0       	ldi	r26, 0x00	; 0
   1a810:	ed b7       	in	r30, 0x3d	; 61
   1a812:	fe b7       	in	r31, 0x3e	; 62
   1a814:	81 83       	std	Z+1, r24	; 0x01
   1a816:	92 83       	std	Z+2, r25	; 0x02
   1a818:	a3 83       	std	Z+3, r26	; 0x03
   1a81a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1a81e:	01 c1       	rjmp	.+514    	; 0x1aa22 <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1a820:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a824:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a828:	92 ff       	sbrs	r25, 2
   1a82a:	10 c0       	rjmp	.+32     	; 0x1a84c <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1a82c:	ed b7       	in	r30, 0x3d	; 61
   1a82e:	fe b7       	in	r31, 0x3e	; 62
   1a830:	f1 86       	std	Z+9, r15	; 0x09
   1a832:	e0 86       	std	Z+8, r14	; 0x08
   1a834:	37 82       	std	Z+7, r3	; 0x07
   1a836:	26 82       	std	Z+6, r2	; 0x06
   1a838:	d5 82       	std	Z+5, r13	; 0x05
   1a83a:	c4 82       	std	Z+4, r12	; 0x04
   1a83c:	84 e9       	ldi	r24, 0x94	; 148
   1a83e:	94 e3       	ldi	r25, 0x34	; 52
   1a840:	a0 e0       	ldi	r26, 0x00	; 0
   1a842:	81 83       	std	Z+1, r24	; 0x01
   1a844:	92 83       	std	Z+2, r25	; 0x02
   1a846:	a3 83       	std	Z+3, r26	; 0x03
   1a848:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1a84c:	97 01       	movw	r18, r14
   1a84e:	40 e0       	ldi	r20, 0x00	; 0
   1a850:	50 e0       	ldi	r21, 0x00	; 0
   1a852:	ba 01       	movw	r22, r20
   1a854:	80 e0       	ldi	r24, 0x00	; 0
   1a856:	90 e0       	ldi	r25, 0x00	; 0
   1a858:	a8 de       	rcall	.-688    	; 0x1a5aa <lif_add_ascii_file_as_e010_wrapper>
   1a85a:	4b 01       	movw	r8, r22
   1a85c:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a85e:	47 2e       	mov	r4, r23
   1a860:	58 2e       	mov	r5, r24
   1a862:	69 2e       	mov	r6, r25
   1a864:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a866:	66 23       	and	r22, r22
   1a868:	29 f0       	breq	.+10     	; 0x1a874 <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1a86a:	ff ef       	ldi	r31, 0xFF	; 255
   1a86c:	4f 1a       	sub	r4, r31
   1a86e:	5f 0a       	sbc	r5, r31
   1a870:	6f 0a       	sbc	r6, r31
   1a872:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1a874:	61 e0       	ldi	r22, 0x01	; 1
   1a876:	79 e0       	ldi	r23, 0x09	; 9
   1a878:	c6 01       	movw	r24, r12
   1a87a:	49 da       	rcall	.-2926   	; 0x19d0e <lif_open_volume>
   1a87c:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1a87e:	00 97       	sbiw	r24, 0x00	; 0
   1a880:	09 f4       	brne	.+2      	; 0x1a884 <lif_add_ascii_file_as_e010+0xca>
   1a882:	cf c0       	rjmp	.+414    	; 0x1aa22 <lif_add_ascii_file_as_e010+0x268>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1a884:	b3 01       	movw	r22, r6
   1a886:	a2 01       	movw	r20, r4
   1a888:	e2 d8       	rcall	.-3644   	; 0x19a4e <lif_newdir>
   1a88a:	3c 01       	movw	r6, r24
    if(index == -1)
   1a88c:	8f ef       	ldi	r24, 0xFF	; 255
   1a88e:	68 16       	cp	r6, r24
   1a890:	78 06       	cpc	r7, r24
   1a892:	79 f4       	brne	.+30     	; 0x1a8b2 <lif_add_ascii_file_as_e010+0xf8>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1a894:	ed b7       	in	r30, 0x3d	; 61
   1a896:	fe b7       	in	r31, 0x3e	; 62
   1a898:	f7 82       	std	Z+7, r15	; 0x07
   1a89a:	e6 82       	std	Z+6, r14	; 0x06
   1a89c:	d5 82       	std	Z+5, r13	; 0x05
   1a89e:	c4 82       	std	Z+4, r12	; 0x04
   1a8a0:	84 e6       	ldi	r24, 0x64	; 100
   1a8a2:	94 e3       	ldi	r25, 0x34	; 52
   1a8a4:	a0 e0       	ldi	r26, 0x00	; 0
   1a8a6:	81 83       	std	Z+1, r24	; 0x01
   1a8a8:	92 83       	std	Z+2, r25	; 0x02
   1a8aa:	a3 83       	std	Z+3, r26	; 0x03
   1a8ac:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1a8b0:	a0 c0       	rjmp	.+320    	; 0x1a9f2 <lif_add_ascii_file_as_e010+0x238>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1a8b2:	68 01       	movw	r12, r16
   1a8b4:	ff e4       	ldi	r31, 0x4F	; 79
   1a8b6:	cf 0e       	add	r12, r31
   1a8b8:	d1 1c       	adc	r13, r1
   1a8ba:	4a e0       	ldi	r20, 0x0A	; 10
   1a8bc:	50 e0       	ldi	r21, 0x00	; 0
   1a8be:	b1 01       	movw	r22, r2
   1a8c0:	c6 01       	movw	r24, r12
   1a8c2:	0e 94 53 c0 	call	0x180a6	; 0x180a6 <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1a8c6:	80 e1       	ldi	r24, 0x10	; 16
   1a8c8:	90 ee       	ldi	r25, 0xE0	; 224
   1a8ca:	f8 01       	movw	r30, r16
   1a8cc:	e6 5a       	subi	r30, 0xA6	; 166
   1a8ce:	ff 4f       	sbci	r31, 0xFF	; 255
   1a8d0:	91 83       	std	Z+1, r25	; 0x01
   1a8d2:	80 83       	st	Z, r24
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1a8d4:	ea ad       	ldd	r30, Y+58	; 0x3a
   1a8d6:	fb ad       	ldd	r31, Y+59	; 0x3b
   1a8d8:	60 a5       	ldd	r22, Z+40	; 0x28
   1a8da:	71 a5       	ldd	r23, Z+41	; 0x29
   1a8dc:	82 a5       	ldd	r24, Z+42	; 0x2a
   1a8de:	93 a5       	ldd	r25, Z+43	; 0x2b
   1a8e0:	a8 01       	movw	r20, r16
   1a8e2:	4c 59       	subi	r20, 0x9C	; 156
   1a8e4:	5f 4f       	sbci	r21, 0xFF	; 255
   1a8e6:	0e 94 78 c2 	call	0x184f0	; 0x184f0 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1a8ea:	81 e0       	ldi	r24, 0x01	; 1
   1a8ec:	90 e8       	ldi	r25, 0x80	; 128
   1a8ee:	f8 01       	movw	r30, r16
   1a8f0:	e6 59       	subi	r30, 0x96	; 150
   1a8f2:	ff 4f       	sbci	r31, 0xFF	; 255
   1a8f4:	91 83       	std	Z+1, r25	; 0x01
   1a8f6:	80 83       	st	Z, r24
    LIF->DIR.FileBytes = bytes;                   // 28
   1a8f8:	32 96       	adiw	r30, 0x02	; 2
   1a8fa:	91 82       	std	Z+1, r9	; 0x01
   1a8fc:	80 82       	st	Z, r8
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1a8fe:	80 e0       	ldi	r24, 0x00	; 0
   1a900:	91 e0       	ldi	r25, 0x01	; 1
   1a902:	32 96       	adiw	r30, 0x02	; 2
   1a904:	91 83       	std	Z+1, r25	; 0x01
   1a906:	80 83       	st	Z, r24
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1a908:	58 01       	movw	r10, r16
   1a90a:	fc e5       	ldi	r31, 0x5C	; 92
   1a90c:	af 0e       	add	r10, r31
   1a90e:	b1 1c       	adc	r11, r1
   1a910:	f5 01       	movw	r30, r10
   1a912:	80 81       	ld	r24, Z
   1a914:	91 81       	ldd	r25, Z+1	; 0x01
   1a916:	a2 81       	ldd	r26, Z+2	; 0x02
   1a918:	b3 81       	ldd	r27, Z+3	; 0x03
   1a91a:	22 24       	eor	r2, r2
   1a91c:	38 2e       	mov	r3, r24
   1a91e:	49 2e       	mov	r4, r25
   1a920:	5a 2e       	mov	r5, r26

    if(debuglevel & LIF_DEBUG)
   1a922:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a926:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a92a:	92 ff       	sbrs	r25, 2
   1a92c:	05 c0       	rjmp	.+10     	; 0x1a938 <lif_add_ascii_file_as_e010+0x17e>
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1a92e:	6c e5       	ldi	r22, 0x5C	; 92
   1a930:	76 e1       	ldi	r23, 0x16	; 22
   1a932:	c8 01       	movw	r24, r16
   1a934:	0e 94 64 c3 	call	0x186c8	; 0x186c8 <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1a938:	97 01       	movw	r18, r14
   1a93a:	b2 01       	movw	r22, r4
   1a93c:	a1 01       	movw	r20, r2
   1a93e:	c8 01       	movw	r24, r16
   1a940:	34 de       	rcall	.-920    	; 0x1a5aa <lif_add_ascii_file_as_e010_wrapper>
   1a942:	4b 01       	movw	r8, r22
   1a944:	7c 01       	movw	r14, r24

    if(debuglevel & LIF_DEBUG)
   1a946:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a94a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a94e:	92 ff       	sbrs	r25, 2
   1a950:	4a c0       	rjmp	.+148    	; 0x1a9e6 <lif_add_ascii_file_as_e010+0x22c>
    {
        printf("New Directory Information AFTER write\n");
   1a952:	8d e3       	ldi	r24, 0x3D	; 61
   1a954:	94 e3       	ldi	r25, 0x34	; 52
   1a956:	a0 e0       	ldi	r26, 0x00	; 0
   1a958:	ed b7       	in	r30, 0x3d	; 61
   1a95a:	fe b7       	in	r31, 0x3e	; 62
   1a95c:	81 83       	std	Z+1, r24	; 0x01
   1a95e:	92 83       	std	Z+2, r25	; 0x02
   1a960:	a3 83       	std	Z+3, r26	; 0x03
   1a962:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1a966:	ed b7       	in	r30, 0x3d	; 61
   1a968:	fe b7       	in	r31, 0x3e	; 62
   1a96a:	d5 82       	std	Z+5, r13	; 0x05
   1a96c:	c4 82       	std	Z+4, r12	; 0x04
   1a96e:	86 e2       	ldi	r24, 0x26	; 38
   1a970:	94 e3       	ldi	r25, 0x34	; 52
   1a972:	a0 e0       	ldi	r26, 0x00	; 0
   1a974:	81 83       	std	Z+1, r24	; 0x01
   1a976:	92 83       	std	Z+2, r25	; 0x02
   1a978:	a3 83       	std	Z+3, r26	; 0x03
   1a97a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        printf("Index:            %4d\n", (int)index);
   1a97e:	ed b7       	in	r30, 0x3d	; 61
   1a980:	fe b7       	in	r31, 0x3e	; 62
   1a982:	75 82       	std	Z+5, r7	; 0x05
   1a984:	64 82       	std	Z+4, r6	; 0x04
   1a986:	8f e0       	ldi	r24, 0x0F	; 15
   1a988:	94 e3       	ldi	r25, 0x34	; 52
   1a98a:	a0 e0       	ldi	r26, 0x00	; 0
   1a98c:	81 83       	std	Z+1, r24	; 0x01
   1a98e:	92 83       	std	Z+2, r25	; 0x02
   1a990:	a3 83       	std	Z+3, r26	; 0x03
   1a992:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1a996:	f5 01       	movw	r30, r10
   1a998:	80 81       	ld	r24, Z
   1a99a:	91 81       	ldd	r25, Z+1	; 0x01
   1a99c:	a2 81       	ldd	r26, Z+2	; 0x02
   1a99e:	b3 81       	ldd	r27, Z+3	; 0x03
   1a9a0:	ed b7       	in	r30, 0x3d	; 61
   1a9a2:	fe b7       	in	r31, 0x3e	; 62
   1a9a4:	84 83       	std	Z+4, r24	; 0x04
   1a9a6:	95 83       	std	Z+5, r25	; 0x05
   1a9a8:	a6 83       	std	Z+6, r26	; 0x06
   1a9aa:	b7 83       	std	Z+7, r27	; 0x07
   1a9ac:	86 ef       	ldi	r24, 0xF6	; 246
   1a9ae:	93 e3       	ldi	r25, 0x33	; 51
   1a9b0:	a0 e0       	ldi	r26, 0x00	; 0
   1a9b2:	81 83       	std	Z+1, r24	; 0x01
   1a9b4:	92 83       	std	Z+2, r25	; 0x02
   1a9b6:	a3 83       	std	Z+3, r26	; 0x03
   1a9b8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1a9bc:	f8 01       	movw	r30, r16
   1a9be:	e0 5a       	subi	r30, 0xA0	; 160
   1a9c0:	ff 4f       	sbci	r31, 0xFF	; 255
   1a9c2:	80 81       	ld	r24, Z
   1a9c4:	91 81       	ldd	r25, Z+1	; 0x01
   1a9c6:	a2 81       	ldd	r26, Z+2	; 0x02
   1a9c8:	b3 81       	ldd	r27, Z+3	; 0x03
   1a9ca:	ed b7       	in	r30, 0x3d	; 61
   1a9cc:	fe b7       	in	r31, 0x3e	; 62
   1a9ce:	84 83       	std	Z+4, r24	; 0x04
   1a9d0:	95 83       	std	Z+5, r25	; 0x05
   1a9d2:	a6 83       	std	Z+6, r26	; 0x06
   1a9d4:	b7 83       	std	Z+7, r27	; 0x07
   1a9d6:	8d ed       	ldi	r24, 0xDD	; 221
   1a9d8:	93 e3       	ldi	r25, 0x33	; 51
   1a9da:	a0 e0       	ldi	r26, 0x00	; 0
   1a9dc:	81 83       	std	Z+1, r24	; 0x01
   1a9de:	92 83       	std	Z+2, r25	; 0x02
   1a9e0:	a3 83       	std	Z+3, r26	; 0x03
   1a9e2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1a9e6:	b3 01       	movw	r22, r6
   1a9e8:	c8 01       	movw	r24, r16
   1a9ea:	0e 94 bf c8 	call	0x1917e	; 0x1917e <lif_writedirindex>
   1a9ee:	89 2b       	or	r24, r25
   1a9f0:	21 f4       	brne	.+8      	; 0x1a9fa <lif_add_ascii_file_as_e010+0x240>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a9f2:	c8 01       	movw	r24, r16
   1a9f4:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>
   1a9f8:	14 c0       	rjmp	.+40     	; 0x1aa22 <lif_add_ascii_file_as_e010+0x268>
   1a9fa:	c8 01       	movw	r24, r16
   1a9fc:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1aa00:	ed b7       	in	r30, 0x3d	; 61
   1aa02:	fe b7       	in	r31, 0x3e	; 62
   1aa04:	84 82       	std	Z+4, r8	; 0x04
   1aa06:	95 82       	std	Z+5, r9	; 0x05
   1aa08:	e6 82       	std	Z+6, r14	; 0x06
   1aa0a:	f7 82       	std	Z+7, r15	; 0x07
   1aa0c:	8f ec       	ldi	r24, 0xCF	; 207
   1aa0e:	93 e3       	ldi	r25, 0x33	; 51
   1aa10:	a0 e0       	ldi	r26, 0x00	; 0
   1aa12:	81 83       	std	Z+1, r24	; 0x01
   1aa14:	92 83       	std	Z+2, r25	; 0x02
   1aa16:	a3 83       	std	Z+3, r26	; 0x03
   1aa18:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

// Return file size
    return(bytes);
   1aa1c:	b4 01       	movw	r22, r8
   1aa1e:	c7 01       	movw	r24, r14
   1aa20:	04 c0       	rjmp	.+8      	; 0x1aa2a <lif_add_ascii_file_as_e010+0x270>
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1aa22:	6f ef       	ldi	r22, 0xFF	; 255
   1aa24:	7f ef       	ldi	r23, 0xFF	; 255
   1aa26:	8f ef       	ldi	r24, 0xFF	; 255
   1aa28:	9f ef       	ldi	r25, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1aa2a:	eb 96       	adiw	r28, 0x3b	; 59
   1aa2c:	e2 e1       	ldi	r30, 0x12	; 18
   1aa2e:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

0001aa32 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1aa32:	a7 e3       	ldi	r26, 0x37	; 55
   1aa34:	b2 e0       	ldi	r27, 0x02	; 2
   1aa36:	ef e1       	ldi	r30, 0x1F	; 31
   1aa38:	f5 ed       	ldi	r31, 0xD5	; 213
   1aa3a:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
   1aa3e:	7c 01       	movw	r14, r24
   1aa40:	8b 01       	movw	r16, r22
   1aa42:	ca 5d       	subi	r28, 0xDA	; 218
   1aa44:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa46:	59 83       	std	Y+1, r21	; 0x01
   1aa48:	48 83       	st	Y, r20
   1aa4a:	c6 52       	subi	r28, 0x26	; 38
   1aa4c:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1aa4e:	62 e4       	ldi	r22, 0x42	; 66
   1aa50:	73 e0       	ldi	r23, 0x03	; 3
   1aa52:	5d d9       	rcall	.-3398   	; 0x19d0e <lif_open_volume>
   1aa54:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1aa56:	00 97       	sbiw	r24, 0x00	; 0
   1aa58:	69 f4       	brne	.+26     	; 0x1aa74 <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1aa5a:	ed b7       	in	r30, 0x3d	; 61
   1aa5c:	fe b7       	in	r31, 0x3e	; 62
   1aa5e:	f5 82       	std	Z+5, r15	; 0x05
   1aa60:	e4 82       	std	Z+4, r14	; 0x04
   1aa62:	87 eb       	ldi	r24, 0xB7	; 183
   1aa64:	93 e3       	ldi	r25, 0x33	; 51
   1aa66:	a0 e0       	ldi	r26, 0x00	; 0
   1aa68:	81 83       	std	Z+1, r24	; 0x01
   1aa6a:	92 83       	std	Z+2, r25	; 0x02
   1aa6c:	a3 83       	std	Z+3, r26	; 0x03
   1aa6e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1aa72:	13 c0       	rjmp	.+38     	; 0x1aa9a <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1aa74:	b8 01       	movw	r22, r16
   1aa76:	20 dc       	rcall	.-1984   	; 0x1a2b8 <lif_find_file>
    if(index == -1)
   1aa78:	01 96       	adiw	r24, 0x01	; 1
   1aa7a:	91 f4       	brne	.+36     	; 0x1aaa0 <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1aa7c:	ed b7       	in	r30, 0x3d	; 61
   1aa7e:	fe b7       	in	r31, 0x3e	; 62
   1aa80:	15 83       	std	Z+5, r17	; 0x05
   1aa82:	04 83       	std	Z+4, r16	; 0x04
   1aa84:	80 ea       	ldi	r24, 0xA0	; 160
   1aa86:	93 e3       	ldi	r25, 0x33	; 51
   1aa88:	a0 e0       	ldi	r26, 0x00	; 0
   1aa8a:	81 83       	std	Z+1, r24	; 0x01
   1aa8c:	92 83       	std	Z+2, r25	; 0x02
   1aa8e:	a3 83       	std	Z+3, r26	; 0x03
   1aa90:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1aa94:	c6 01       	movw	r24, r12
   1aa96:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1aa9a:	80 e0       	ldi	r24, 0x00	; 0
   1aa9c:	90 e0       	ldi	r25, 0x00	; 0
   1aa9e:	73 c2       	rjmp	.+1254   	; 0x1af86 <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1aaa0:	f6 01       	movw	r30, r12
   1aaa2:	e6 5a       	subi	r30, 0xA6	; 166
   1aaa4:	ff 4f       	sbci	r31, 0xFF	; 255
   1aaa6:	80 81       	ld	r24, Z
   1aaa8:	91 81       	ldd	r25, Z+1	; 0x01
   1aaaa:	9c 01       	movw	r18, r24
   1aaac:	2c 7f       	andi	r18, 0xFC	; 252
   1aaae:	20 31       	cpi	r18, 0x10	; 16
   1aab0:	30 4e       	sbci	r19, 0xE0	; 224
   1aab2:	a9 f0       	breq	.+42     	; 0x1aade <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1aab4:	ed b7       	in	r30, 0x3d	; 61
   1aab6:	fe b7       	in	r31, 0x3e	; 62
   1aab8:	97 83       	std	Z+7, r25	; 0x07
   1aaba:	86 83       	std	Z+6, r24	; 0x06
   1aabc:	ca 5d       	subi	r28, 0xDA	; 218
   1aabe:	dd 4f       	sbci	r29, 0xFD	; 253
   1aac0:	28 81       	ld	r18, Y
   1aac2:	39 81       	ldd	r19, Y+1	; 0x01
   1aac4:	c6 52       	subi	r28, 0x26	; 38
   1aac6:	d2 40       	sbci	r29, 0x02	; 2
   1aac8:	35 83       	std	Z+5, r19	; 0x05
   1aaca:	24 83       	std	Z+4, r18	; 0x04
   1aacc:	88 e6       	ldi	r24, 0x68	; 104
   1aace:	93 e3       	ldi	r25, 0x33	; 51
   1aad0:	a0 e0       	ldi	r26, 0x00	; 0
   1aad2:	81 83       	std	Z+1, r24	; 0x01
   1aad4:	92 83       	std	Z+2, r25	; 0x02
   1aad6:	a3 83       	std	Z+3, r26	; 0x03
   1aad8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1aadc:	db cf       	rjmp	.-74     	; 0x1aa94 <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1aade:	f6 01       	movw	r30, r12
   1aae0:	e4 5a       	subi	r30, 0xA4	; 164
   1aae2:	ff 4f       	sbci	r31, 0xFF	; 255
   1aae4:	80 80       	ld	r8, Z
   1aae6:	91 80       	ldd	r9, Z+1	; 0x01
   1aae8:	a2 80       	ldd	r10, Z+2	; 0x02
   1aaea:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1aaec:	34 96       	adiw	r30, 0x04	; 4
   1aaee:	80 81       	ld	r24, Z
   1aaf0:	91 81       	ldd	r25, Z+1	; 0x01
   1aaf2:	a2 81       	ldd	r26, Z+2	; 0x02
   1aaf4:	b3 81       	ldd	r27, Z+3	; 0x03
   1aaf6:	a5 01       	movw	r20, r10
   1aaf8:	94 01       	movw	r18, r8
   1aafa:	28 0f       	add	r18, r24
   1aafc:	39 1f       	adc	r19, r25
   1aafe:	4a 1f       	adc	r20, r26
   1ab00:	5b 1f       	adc	r21, r27
   1ab02:	c4 5d       	subi	r28, 0xD4	; 212
   1ab04:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab06:	28 83       	st	Y, r18
   1ab08:	39 83       	std	Y+1, r19	; 0x01
   1ab0a:	4a 83       	std	Y+2, r20	; 0x02
   1ab0c:	5b 83       	std	Y+3, r21	; 0x03
   1ab0e:	cc 52       	subi	r28, 0x2C	; 44
   1ab10:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1ab12:	c6 01       	movw	r24, r12
   1ab14:	8c 59       	subi	r24, 0x9C	; 156
   1ab16:	9f 4f       	sbci	r25, 0xFF	; 255
   1ab18:	0e 94 ba c2 	call	0x18574	; 0x18574 <lif_lifbcd2time>
   1ab1c:	c8 5d       	subi	r28, 0xD8	; 216
   1ab1e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab20:	68 83       	st	Y, r22
   1ab22:	79 83       	std	Y+1, r23	; 0x01
   1ab24:	8a 83       	std	Y+2, r24	; 0x02
   1ab26:	9b 83       	std	Y+3, r25	; 0x03
   1ab28:	c8 52       	subi	r28, 0x28	; 40
   1ab2a:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1ab2c:	ba 2d       	mov	r27, r10
   1ab2e:	a9 2d       	mov	r26, r9
   1ab30:	98 2d       	mov	r25, r8
   1ab32:	88 27       	eor	r24, r24
   1ab34:	c2 5e       	subi	r28, 0xE2	; 226
   1ab36:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab38:	88 83       	st	Y, r24
   1ab3a:	99 83       	std	Y+1, r25	; 0x01
   1ab3c:	aa 83       	std	Y+2, r26	; 0x02
   1ab3e:	bb 83       	std	Y+3, r27	; 0x03
   1ab40:	ce 51       	subi	r28, 0x1E	; 30
   1ab42:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1ab44:	6c e0       	ldi	r22, 0x0C	; 12
   1ab46:	79 e0       	ldi	r23, 0x09	; 9
   1ab48:	ca 5d       	subi	r28, 0xDA	; 218
   1ab4a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab4c:	88 81       	ld	r24, Y
   1ab4e:	99 81       	ldd	r25, Y+1	; 0x01
   1ab50:	c6 52       	subi	r28, 0x26	; 38
   1ab52:	d2 40       	sbci	r29, 0x02	; 2
   1ab54:	0e 94 7a be 	call	0x17cf4	; 0x17cf4 <lif_open>
   1ab58:	cc 5d       	subi	r28, 0xDC	; 220
   1ab5a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab5c:	99 83       	std	Y+1, r25	; 0x01
   1ab5e:	88 83       	st	Y, r24
   1ab60:	c4 52       	subi	r28, 0x24	; 36
   1ab62:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1ab64:	89 2b       	or	r24, r25
   1ab66:	09 f4       	brne	.+2      	; 0x1ab6a <lif_extract_e010_as_ascii+0x138>
   1ab68:	95 cf       	rjmp	.-214    	; 0x1aa94 <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1ab6a:	ca 5d       	subi	r28, 0xDA	; 218
   1ab6c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab6e:	28 81       	ld	r18, Y
   1ab70:	39 81       	ldd	r19, Y+1	; 0x01
   1ab72:	c6 52       	subi	r28, 0x26	; 38
   1ab74:	d2 40       	sbci	r29, 0x02	; 2
   1ab76:	ed b7       	in	r30, 0x3d	; 61
   1ab78:	fe b7       	in	r31, 0x3e	; 62
   1ab7a:	35 83       	std	Z+5, r19	; 0x05
   1ab7c:	24 83       	std	Z+4, r18	; 0x04
   1ab7e:	88 e5       	ldi	r24, 0x58	; 88
   1ab80:	93 e3       	ldi	r25, 0x33	; 51
   1ab82:	a0 e0       	ldi	r26, 0x00	; 0
   1ab84:	81 83       	std	Z+1, r24	; 0x01
   1ab86:	92 83       	std	Z+2, r25	; 0x02
   1ab88:	a3 83       	std	Z+3, r26	; 0x03
   1ab8a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    bytes = 0;
    wind = 0;
   1ab8e:	21 2c       	mov	r2, r1
   1ab90:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1ab92:	ce 5d       	subi	r28, 0xDE	; 222
   1ab94:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab96:	19 82       	std	Y+1, r1	; 0x01
   1ab98:	18 82       	st	Y, r1
   1ab9a:	c2 52       	subi	r28, 0x22	; 34
   1ab9c:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1ab9e:	ee 24       	eor	r14, r14
   1aba0:	e3 94       	inc	r14
   1aba2:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1aba4:	41 2c       	mov	r4, r1
   1aba6:	51 2c       	mov	r5, r1
   1aba8:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1abaa:	87 e9       	ldi	r24, 0x97	; 151
   1abac:	92 e3       	ldi	r25, 0x32	; 50
   1abae:	9c 01       	movw	r18, r24
   1abb0:	40 e0       	ldi	r20, 0x00	; 0
   1abb2:	ce 5c       	subi	r28, 0xCE	; 206
   1abb4:	dd 4f       	sbci	r29, 0xFD	; 253
   1abb6:	28 83       	st	Y, r18
   1abb8:	39 83       	std	Y+1, r19	; 0x01
   1abba:	4a 83       	std	Y+2, r20	; 0x02
   1abbc:	c2 53       	subi	r28, 0x32	; 50
   1abbe:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1abc0:	85 ea       	ldi	r24, 0xA5	; 165
   1abc2:	92 e3       	ldi	r25, 0x32	; 50
   1abc4:	9c 01       	movw	r18, r24
   1abc6:	40 e0       	ldi	r20, 0x00	; 0
   1abc8:	cb 5c       	subi	r28, 0xCB	; 203
   1abca:	dd 4f       	sbci	r29, 0xFD	; 253
   1abcc:	28 83       	st	Y, r18
   1abce:	39 83       	std	Y+1, r19	; 0x01
   1abd0:	4a 83       	std	Y+2, r20	; 0x02
   1abd2:	c5 53       	subi	r28, 0x35	; 53
   1abd4:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1abd6:	c2 5e       	subi	r28, 0xE2	; 226
   1abd8:	dd 4f       	sbci	r29, 0xFD	; 253
   1abda:	28 81       	ld	r18, Y
   1abdc:	39 81       	ldd	r19, Y+1	; 0x01
   1abde:	4a 81       	ldd	r20, Y+2	; 0x02
   1abe0:	5b 81       	ldd	r21, Y+3	; 0x03
   1abe2:	ce 51       	subi	r28, 0x1E	; 30
   1abe4:	d2 40       	sbci	r29, 0x02	; 2
   1abe6:	bb 27       	eor	r27, r27
   1abe8:	a5 2f       	mov	r26, r21
   1abea:	94 2f       	mov	r25, r20
   1abec:	83 2f       	mov	r24, r19
   1abee:	c4 5d       	subi	r28, 0xD4	; 212
   1abf0:	dd 4f       	sbci	r29, 0xFD	; 253
   1abf2:	28 81       	ld	r18, Y
   1abf4:	39 81       	ldd	r19, Y+1	; 0x01
   1abf6:	4a 81       	ldd	r20, Y+2	; 0x02
   1abf8:	5b 81       	ldd	r21, Y+3	; 0x03
   1abfa:	cc 52       	subi	r28, 0x2C	; 44
   1abfc:	d2 40       	sbci	r29, 0x02	; 2
   1abfe:	28 17       	cp	r18, r24
   1ac00:	39 07       	cpc	r19, r25
   1ac02:	4a 07       	cpc	r20, r26
   1ac04:	5b 07       	cpc	r21, r27
   1ac06:	08 f4       	brcc	.+2      	; 0x1ac0a <lif_extract_e010_as_ascii+0x1d8>
   1ac08:	51 c1       	rjmp	.+674    	; 0x1aeac <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1ac0a:	00 e0       	ldi	r16, 0x00	; 0
   1ac0c:	11 e0       	ldi	r17, 0x01	; 1
   1ac0e:	c2 5e       	subi	r28, 0xE2	; 226
   1ac10:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac12:	28 81       	ld	r18, Y
   1ac14:	39 81       	ldd	r19, Y+1	; 0x01
   1ac16:	4a 81       	ldd	r20, Y+2	; 0x02
   1ac18:	5b 81       	ldd	r21, Y+3	; 0x03
   1ac1a:	ce 51       	subi	r28, 0x1E	; 30
   1ac1c:	d2 40       	sbci	r29, 0x02	; 2
   1ac1e:	be 01       	movw	r22, r28
   1ac20:	60 5f       	subi	r22, 0xF0	; 240
   1ac22:	7e 4f       	sbci	r23, 0xFE	; 254
   1ac24:	c6 01       	movw	r24, r12
   1ac26:	0e 94 fe be 	call	0x17dfc	; 0x17dfc <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1ac2a:	6f 3f       	cpi	r22, 0xFF	; 255
   1ac2c:	71 05       	cpc	r23, r1
   1ac2e:	09 f0       	breq	.+2      	; 0x1ac32 <lif_extract_e010_as_ascii+0x200>
   1ac30:	0c f4       	brge	.+2      	; 0x1ac34 <lif_extract_e010_as_ascii+0x202>
   1ac32:	3a c1       	rjmp	.+628    	; 0x1aea8 <lif_extract_e010_as_ascii+0x476>
   1ac34:	00 e0       	ldi	r16, 0x00	; 0
   1ac36:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1ac38:	ce 5d       	subi	r28, 0xDE	; 222
   1ac3a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac3c:	88 81       	ld	r24, Y
   1ac3e:	99 81       	ldd	r25, Y+1	; 0x01
   1ac40:	c2 52       	subi	r28, 0x22	; 34
   1ac42:	d2 40       	sbci	r29, 0x02	; 2
   1ac44:	89 2b       	or	r24, r25
   1ac46:	09 f0       	breq	.+2      	; 0x1ac4a <lif_extract_e010_as_ascii+0x218>
   1ac48:	1b c1       	rjmp	.+566    	; 0x1ae80 <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1ac4a:	e0 e1       	ldi	r30, 0x10	; 16
   1ac4c:	f1 e0       	ldi	r31, 0x01	; 1
   1ac4e:	ec 0f       	add	r30, r28
   1ac50:	fd 1f       	adc	r31, r29
   1ac52:	e0 0f       	add	r30, r16
   1ac54:	f1 1f       	adc	r31, r17
   1ac56:	80 81       	ld	r24, Z
   1ac58:	98 2f       	mov	r25, r24
   1ac5a:	9f 7e       	andi	r25, 0xEF	; 239
   1ac5c:	9f 3c       	cpi	r25, 0xCF	; 207
   1ac5e:	11 f0       	breq	.+4      	; 0x1ac64 <lif_extract_e010_as_ascii+0x232>
   1ac60:	8f 36       	cpi	r24, 0x6F	; 111
   1ac62:	c9 f5       	brne	.+114    	; 0x1acd6 <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1ac64:	e0 e1       	ldi	r30, 0x10	; 16
   1ac66:	f1 e0       	ldi	r31, 0x01	; 1
   1ac68:	ec 0f       	add	r30, r28
   1ac6a:	fd 1f       	adc	r31, r29
   1ac6c:	e0 0f       	add	r30, r16
   1ac6e:	f1 1f       	adc	r31, r17
   1ac70:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1ac72:	f8 01       	movw	r30, r16
   1ac74:	32 96       	adiw	r30, 0x02	; 2
   1ac76:	40 e1       	ldi	r20, 0x10	; 16
   1ac78:	51 e0       	ldi	r21, 0x01	; 1
   1ac7a:	4c 0f       	add	r20, r28
   1ac7c:	5d 1f       	adc	r21, r29
   1ac7e:	e4 0f       	add	r30, r20
   1ac80:	f5 1f       	adc	r31, r21
   1ac82:	0d 5f       	subi	r16, 0xFD	; 253
   1ac84:	1f 4f       	sbci	r17, 0xFF	; 255
   1ac86:	80 81       	ld	r24, Z
   1ac88:	b1 2c       	mov	r11, r1
   1ac8a:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1ac8c:	a1 14       	cp	r10, r1
   1ac8e:	b1 04       	cpc	r11, r1
   1ac90:	09 f4       	brne	.+2      	; 0x1ac94 <lif_extract_e010_as_ascii+0x262>
   1ac92:	ee c0       	rjmp	.+476    	; 0x1ae70 <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1ac94:	5f ef       	ldi	r21, 0xFF	; 255
   1ac96:	a5 16       	cp	r10, r21
   1ac98:	b1 04       	cpc	r11, r1
   1ac9a:	09 f0       	breq	.+2      	; 0x1ac9e <lif_extract_e010_as_ascii+0x26c>
   1ac9c:	7c f4       	brge	.+30     	; 0x1acbc <lif_extract_e010_as_ascii+0x28a>
   1ac9e:	c4 5e       	subi	r28, 0xE4	; 228
   1aca0:	dd 4f       	sbci	r29, 0xFD	; 253
   1aca2:	19 82       	std	Y+1, r1	; 0x01
   1aca4:	18 82       	st	Y, r1
   1aca6:	cc 51       	subi	r28, 0x1C	; 28
   1aca8:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1acaa:	c5 01       	movw	r24, r10
   1acac:	01 97       	sbiw	r24, 0x01	; 1
   1acae:	c0 5d       	subi	r28, 0xD0	; 208
   1acb0:	dd 4f       	sbci	r29, 0xFD	; 253
   1acb2:	99 83       	std	Y+1, r25	; 0x01
   1acb4:	88 83       	st	Y, r24
   1acb6:	c0 53       	subi	r28, 0x30	; 48
   1acb8:	d2 40       	sbci	r29, 0x02	; 2
   1acba:	68 c0       	rjmp	.+208    	; 0x1ad8c <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1acbc:	ed b7       	in	r30, 0x3d	; 61
   1acbe:	fe b7       	in	r31, 0x3e	; 62
   1acc0:	b5 82       	std	Z+5, r11	; 0x05
   1acc2:	a4 82       	std	Z+4, r10	; 0x04
   1acc4:	83 e2       	ldi	r24, 0x23	; 35
   1acc6:	93 e3       	ldi	r25, 0x33	; 51
   1acc8:	a0 e0       	ldi	r26, 0x00	; 0
   1acca:	81 83       	std	Z+1, r24	; 0x01
   1accc:	92 83       	std	Z+2, r25	; 0x02
   1acce:	a3 83       	std	Z+3, r26	; 0x03
   1acd0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1acd4:	1e c0       	rjmp	.+60     	; 0x1ad12 <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1acd6:	8f 3e       	cpi	r24, 0xEF	; 239
   1acd8:	09 f4       	brne	.+2      	; 0x1acdc <lif_extract_e010_as_ascii+0x2aa>
   1acda:	d2 c0       	rjmp	.+420    	; 0x1ae80 <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1acdc:	ed b7       	in	r30, 0x3d	; 61
   1acde:	fe b7       	in	r31, 0x3e	; 62
   1ace0:	13 87       	std	Z+11, r17	; 0x0b
   1ace2:	02 87       	std	Z+10, r16	; 0x0a
   1ace4:	c2 5e       	subi	r28, 0xE2	; 226
   1ace6:	dd 4f       	sbci	r29, 0xFD	; 253
   1ace8:	28 81       	ld	r18, Y
   1acea:	39 81       	ldd	r19, Y+1	; 0x01
   1acec:	4a 81       	ldd	r20, Y+2	; 0x02
   1acee:	5b 81       	ldd	r21, Y+3	; 0x03
   1acf0:	ce 51       	subi	r28, 0x1E	; 30
   1acf2:	d2 40       	sbci	r29, 0x02	; 2
   1acf4:	26 83       	std	Z+6, r18	; 0x06
   1acf6:	37 83       	std	Z+7, r19	; 0x07
   1acf8:	40 87       	std	Z+8, r20	; 0x08
   1acfa:	51 87       	std	Z+9, r21	; 0x09
   1acfc:	90 e0       	ldi	r25, 0x00	; 0
   1acfe:	95 83       	std	Z+5, r25	; 0x05
   1ad00:	84 83       	std	Z+4, r24	; 0x04
   1ad02:	8d ec       	ldi	r24, 0xCD	; 205
   1ad04:	92 e3       	ldi	r25, 0x32	; 50
   1ad06:	a0 e0       	ldi	r26, 0x00	; 0
   1ad08:	81 83       	std	Z+1, r24	; 0x01
   1ad0a:	92 83       	std	Z+2, r25	; 0x02
   1ad0c:	a3 83       	std	Z+3, r26	; 0x03
   1ad0e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
                status = 0;
                done = 1;
   1ad12:	21 e0       	ldi	r18, 0x01	; 1
   1ad14:	30 e0       	ldi	r19, 0x00	; 0
   1ad16:	ce 5d       	subi	r28, 0xDE	; 222
   1ad18:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad1a:	39 83       	std	Y+1, r19	; 0x01
   1ad1c:	28 83       	st	Y, r18
   1ad1e:	c2 52       	subi	r28, 0x22	; 34
   1ad20:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1ad22:	e1 2c       	mov	r14, r1
   1ad24:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1ad26:	ac c0       	rjmp	.+344    	; 0x1ae80 <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1ad28:	0f 3f       	cpi	r16, 0xFF	; 255
   1ad2a:	11 05       	cpc	r17, r1
   1ad2c:	11 f0       	breq	.+4      	; 0x1ad32 <lif_extract_e010_as_ascii+0x300>
   1ad2e:	0c f0       	brlt	.+2      	; 0x1ad32 <lif_extract_e010_as_ascii+0x300>
   1ad30:	a7 c0       	rjmp	.+334    	; 0x1ae80 <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1ad32:	e0 e1       	ldi	r30, 0x10	; 16
   1ad34:	f1 e0       	ldi	r31, 0x01	; 1
   1ad36:	ec 0f       	add	r30, r28
   1ad38:	fd 1f       	adc	r31, r29
   1ad3a:	e0 0f       	add	r30, r16
   1ad3c:	f1 1f       	adc	r31, r17
   1ad3e:	20 81       	ld	r18, Z
   1ad40:	a1 01       	movw	r20, r2
   1ad42:	4f 5f       	subi	r20, 0xFF	; 255
   1ad44:	5f 4f       	sbci	r21, 0xFF	; 255
   1ad46:	4a 01       	movw	r8, r20
   1ad48:	2d 30       	cpi	r18, 0x0D	; 13
   1ad4a:	51 f1       	breq	.+84     	; 0x1ada0 <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1ad4c:	98 2d       	mov	r25, r8
   1ad4e:	89 2d       	mov	r24, r9
   1ad50:	0f 5f       	subi	r16, 0xFF	; 255
   1ad52:	1f 4f       	sbci	r17, 0xFF	; 255
   1ad54:	ec e0       	ldi	r30, 0x0C	; 12
   1ad56:	f0 e0       	ldi	r31, 0x00	; 0
   1ad58:	ec 0f       	add	r30, r28
   1ad5a:	fd 1f       	adc	r31, r29
   1ad5c:	e2 0d       	add	r30, r2
   1ad5e:	f3 1d       	adc	r31, r3
   1ad60:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1ad62:	ef ef       	ldi	r30, 0xFF	; 255
   1ad64:	8e 16       	cp	r8, r30
   1ad66:	91 04       	cpc	r9, r1
   1ad68:	09 f0       	breq	.+2      	; 0x1ad6c <lif_extract_e010_as_ascii+0x33a>
   1ad6a:	ac f5       	brge	.+106    	; 0x1add6 <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1ad6c:	c4 5e       	subi	r28, 0xE4	; 228
   1ad6e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad70:	28 81       	ld	r18, Y
   1ad72:	39 81       	ldd	r19, Y+1	; 0x01
   1ad74:	cc 51       	subi	r28, 0x1C	; 28
   1ad76:	d2 40       	sbci	r29, 0x02	; 2
   1ad78:	2f 5f       	subi	r18, 0xFF	; 255
   1ad7a:	3f 4f       	sbci	r19, 0xFF	; 255
   1ad7c:	c4 5e       	subi	r28, 0xE4	; 228
   1ad7e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad80:	39 83       	std	Y+1, r19	; 0x01
   1ad82:	28 83       	st	Y, r18
   1ad84:	cc 51       	subi	r28, 0x1C	; 28
   1ad86:	d2 40       	sbci	r29, 0x02	; 2
   1ad88:	29 2e       	mov	r2, r25
   1ad8a:	38 2e       	mov	r3, r24
   1ad8c:	c4 5e       	subi	r28, 0xE4	; 228
   1ad8e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad90:	48 81       	ld	r20, Y
   1ad92:	59 81       	ldd	r21, Y+1	; 0x01
   1ad94:	cc 51       	subi	r28, 0x1C	; 28
   1ad96:	d2 40       	sbci	r29, 0x02	; 2
   1ad98:	4a 15       	cp	r20, r10
   1ad9a:	5b 05       	cpc	r21, r11
   1ad9c:	2c f2       	brlt	.-118    	; 0x1ad28 <lif_extract_e010_as_ascii+0x2f6>
   1ad9e:	62 c0       	rjmp	.+196    	; 0x1ae64 <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1ada0:	c4 5e       	subi	r28, 0xE4	; 228
   1ada2:	dd 4f       	sbci	r29, 0xFD	; 253
   1ada4:	88 81       	ld	r24, Y
   1ada6:	99 81       	ldd	r25, Y+1	; 0x01
   1ada8:	cc 51       	subi	r28, 0x1C	; 28
   1adaa:	d2 40       	sbci	r29, 0x02	; 2
   1adac:	c0 5d       	subi	r28, 0xD0	; 208
   1adae:	dd 4f       	sbci	r29, 0xFD	; 253
   1adb0:	a8 81       	ld	r26, Y
   1adb2:	b9 81       	ldd	r27, Y+1	; 0x01
   1adb4:	c0 53       	subi	r28, 0x30	; 48
   1adb6:	d2 40       	sbci	r29, 0x02	; 2
   1adb8:	8a 17       	cp	r24, r26
   1adba:	9b 07       	cpc	r25, r27
   1adbc:	39 f6       	brne	.-114    	; 0x1ad4c <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1adbe:	ec e0       	ldi	r30, 0x0C	; 12
   1adc0:	f0 e0       	ldi	r31, 0x00	; 0
   1adc2:	ec 0f       	add	r30, r28
   1adc4:	fd 1f       	adc	r31, r29
   1adc6:	e2 0d       	add	r30, r2
   1adc8:	f3 1d       	adc	r31, r3
   1adca:	ba e0       	ldi	r27, 0x0A	; 10
   1adcc:	b0 83       	st	Z, r27
                    ++ind;
   1adce:	0f 5f       	subi	r16, 0xFF	; 255
   1add0:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1add2:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1add4:	47 c0       	rjmp	.+142    	; 0x1ae64 <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1add6:	cc 5d       	subi	r28, 0xDC	; 220
   1add8:	dd 4f       	sbci	r29, 0xFD	; 253
   1adda:	28 81       	ld	r18, Y
   1addc:	39 81       	ldd	r19, Y+1	; 0x01
   1adde:	c4 52       	subi	r28, 0x24	; 36
   1ade0:	d2 40       	sbci	r29, 0x02	; 2
   1ade2:	a4 01       	movw	r20, r8
   1ade4:	61 e0       	ldi	r22, 0x01	; 1
   1ade6:	70 e0       	ldi	r23, 0x00	; 0
   1ade8:	ce 01       	movw	r24, r28
   1adea:	0c 96       	adiw	r24, 0x0c	; 12
   1adec:	0e 94 5e 7b 	call	0xf6bc	; 0xf6bc <fwrite>
                    if(size < wind)
   1adf0:	88 15       	cp	r24, r8
   1adf2:	99 05       	cpc	r25, r9
   1adf4:	d4 f4       	brge	.+52     	; 0x1ae2a <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1adf6:	cb 5c       	subi	r28, 0xCB	; 203
   1adf8:	dd 4f       	sbci	r29, 0xFD	; 253
   1adfa:	28 81       	ld	r18, Y
   1adfc:	39 81       	ldd	r19, Y+1	; 0x01
   1adfe:	4a 81       	ldd	r20, Y+2	; 0x02
   1ae00:	c5 53       	subi	r28, 0x35	; 53
   1ae02:	d2 40       	sbci	r29, 0x02	; 2
   1ae04:	ed b7       	in	r30, 0x3d	; 61
   1ae06:	fe b7       	in	r31, 0x3e	; 62
   1ae08:	21 83       	std	Z+1, r18	; 0x01
   1ae0a:	32 83       	std	Z+2, r19	; 0x02
   1ae0c:	43 83       	std	Z+3, r20	; 0x03
   1ae0e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1ae12:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1ae14:	21 e0       	ldi	r18, 0x01	; 1
   1ae16:	30 e0       	ldi	r19, 0x00	; 0
   1ae18:	ce 5d       	subi	r28, 0xDE	; 222
   1ae1a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae1c:	39 83       	std	Y+1, r19	; 0x01
   1ae1e:	28 83       	st	Y, r18
   1ae20:	c2 52       	subi	r28, 0x22	; 34
   1ae22:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1ae24:	e1 2c       	mov	r14, r1
   1ae26:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1ae28:	1d c0       	rjmp	.+58     	; 0x1ae64 <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1ae2a:	09 2e       	mov	r0, r25
   1ae2c:	00 0c       	add	r0, r0
   1ae2e:	aa 0b       	sbc	r26, r26
   1ae30:	bb 0b       	sbc	r27, r27
   1ae32:	48 0e       	add	r4, r24
   1ae34:	59 1e       	adc	r5, r25
   1ae36:	6a 1e       	adc	r6, r26
   1ae38:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1ae3a:	ed b7       	in	r30, 0x3d	; 61
   1ae3c:	fe b7       	in	r31, 0x3e	; 62
   1ae3e:	44 82       	std	Z+4, r4	; 0x04
   1ae40:	55 82       	std	Z+5, r5	; 0x05
   1ae42:	66 82       	std	Z+6, r6	; 0x06
   1ae44:	77 82       	std	Z+7, r7	; 0x07
   1ae46:	ce 5c       	subi	r28, 0xCE	; 206
   1ae48:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae4a:	28 81       	ld	r18, Y
   1ae4c:	39 81       	ldd	r19, Y+1	; 0x01
   1ae4e:	4a 81       	ldd	r20, Y+2	; 0x02
   1ae50:	c2 53       	subi	r28, 0x32	; 50
   1ae52:	d2 40       	sbci	r29, 0x02	; 2
   1ae54:	21 83       	std	Z+1, r18	; 0x01
   1ae56:	32 83       	std	Z+2, r19	; 0x02
   1ae58:	43 83       	std	Z+3, r20	; 0x03
   1ae5a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
                    wind = 0;
   1ae5e:	90 e0       	ldi	r25, 0x00	; 0
   1ae60:	80 e0       	ldi	r24, 0x00	; 0
   1ae62:	84 cf       	rjmp	.-248    	; 0x1ad6c <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1ae64:	0f 3f       	cpi	r16, 0xFF	; 255
   1ae66:	11 05       	cpc	r17, r1
   1ae68:	09 f0       	breq	.+2      	; 0x1ae6c <lif_extract_e010_as_ascii+0x43a>
   1ae6a:	0c f4       	brge	.+2      	; 0x1ae6e <lif_extract_e010_as_ascii+0x43c>
   1ae6c:	e5 ce       	rjmp	.-566    	; 0x1ac38 <lif_extract_e010_as_ascii+0x206>
   1ae6e:	08 c0       	rjmp	.+16     	; 0x1ae80 <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1ae70:	a1 e0       	ldi	r26, 0x01	; 1
   1ae72:	b0 e0       	ldi	r27, 0x00	; 0
   1ae74:	ce 5d       	subi	r28, 0xDE	; 222
   1ae76:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae78:	b9 83       	std	Y+1, r27	; 0x01
   1ae7a:	a8 83       	st	Y, r26
   1ae7c:	c2 52       	subi	r28, 0x22	; 34
   1ae7e:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1ae80:	c2 5e       	subi	r28, 0xE2	; 226
   1ae82:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae84:	28 81       	ld	r18, Y
   1ae86:	39 81       	ldd	r19, Y+1	; 0x01
   1ae88:	4a 81       	ldd	r20, Y+2	; 0x02
   1ae8a:	5b 81       	ldd	r21, Y+3	; 0x03
   1ae8c:	ce 51       	subi	r28, 0x1E	; 30
   1ae8e:	d2 40       	sbci	r29, 0x02	; 2
   1ae90:	3f 5f       	subi	r19, 0xFF	; 255
   1ae92:	4f 4f       	sbci	r20, 0xFF	; 255
   1ae94:	5f 4f       	sbci	r21, 0xFF	; 255
   1ae96:	c2 5e       	subi	r28, 0xE2	; 226
   1ae98:	dd 4f       	sbci	r29, 0xFD	; 253
   1ae9a:	28 83       	st	Y, r18
   1ae9c:	39 83       	std	Y+1, r19	; 0x01
   1ae9e:	4a 83       	std	Y+2, r20	; 0x02
   1aea0:	5b 83       	std	Y+3, r21	; 0x03
   1aea2:	ce 51       	subi	r28, 0x1E	; 30
   1aea4:	d2 40       	sbci	r29, 0x02	; 2
   1aea6:	97 ce       	rjmp	.-722    	; 0x1abd6 <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1aea8:	e1 2c       	mov	r14, r1
   1aeaa:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1aeac:	c6 01       	movw	r24, r12
   1aeae:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1aeb2:	21 14       	cp	r2, r1
   1aeb4:	31 04       	cpc	r3, r1
   1aeb6:	31 f1       	breq	.+76     	; 0x1af04 <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1aeb8:	cc 5d       	subi	r28, 0xDC	; 220
   1aeba:	dd 4f       	sbci	r29, 0xFD	; 253
   1aebc:	28 81       	ld	r18, Y
   1aebe:	39 81       	ldd	r19, Y+1	; 0x01
   1aec0:	c4 52       	subi	r28, 0x24	; 36
   1aec2:	d2 40       	sbci	r29, 0x02	; 2
   1aec4:	a1 01       	movw	r20, r2
   1aec6:	61 e0       	ldi	r22, 0x01	; 1
   1aec8:	70 e0       	ldi	r23, 0x00	; 0
   1aeca:	ce 01       	movw	r24, r28
   1aecc:	0c 96       	adiw	r24, 0x0c	; 12
   1aece:	0e 94 5e 7b 	call	0xf6bc	; 0xf6bc <fwrite>
   1aed2:	8c 01       	movw	r16, r24
        if(size < wind)
   1aed4:	82 15       	cp	r24, r2
   1aed6:	93 05       	cpc	r25, r3
   1aed8:	64 f4       	brge	.+24     	; 0x1aef2 <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1aeda:	8f e6       	ldi	r24, 0x6F	; 111
   1aedc:	92 e3       	ldi	r25, 0x32	; 50
   1aede:	a0 e0       	ldi	r26, 0x00	; 0
   1aee0:	ed b7       	in	r30, 0x3d	; 61
   1aee2:	fe b7       	in	r31, 0x3e	; 62
   1aee4:	81 83       	std	Z+1, r24	; 0x01
   1aee6:	92 83       	std	Z+2, r25	; 0x02
   1aee8:	a3 83       	std	Z+3, r26	; 0x03
   1aeea:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            status = 0;
   1aeee:	e1 2c       	mov	r14, r1
   1aef0:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1aef2:	c8 01       	movw	r24, r16
   1aef4:	01 2e       	mov	r0, r17
   1aef6:	00 0c       	add	r0, r0
   1aef8:	aa 0b       	sbc	r26, r26
   1aefa:	bb 0b       	sbc	r27, r27
   1aefc:	48 0e       	add	r4, r24
   1aefe:	59 1e       	adc	r5, r25
   1af00:	6a 1e       	adc	r6, r26
   1af02:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1af04:	cc 5d       	subi	r28, 0xDC	; 220
   1af06:	dd 4f       	sbci	r29, 0xFD	; 253
   1af08:	88 81       	ld	r24, Y
   1af0a:	99 81       	ldd	r25, Y+1	; 0x01
   1af0c:	c4 52       	subi	r28, 0x24	; 36
   1af0e:	d2 40       	sbci	r29, 0x02	; 2
   1af10:	0e 94 e0 7b 	call	0xf7c0	; 0xf7c0 <fclose>
    if(t)
   1af14:	c8 5d       	subi	r28, 0xD8	; 216
   1af16:	dd 4f       	sbci	r29, 0xFD	; 253
   1af18:	28 81       	ld	r18, Y
   1af1a:	39 81       	ldd	r19, Y+1	; 0x01
   1af1c:	4a 81       	ldd	r20, Y+2	; 0x02
   1af1e:	5b 81       	ldd	r21, Y+3	; 0x03
   1af20:	c8 52       	subi	r28, 0x28	; 40
   1af22:	d2 40       	sbci	r29, 0x02	; 2
   1af24:	21 15       	cp	r18, r1
   1af26:	31 05       	cpc	r19, r1
   1af28:	41 05       	cpc	r20, r1
   1af2a:	51 05       	cpc	r21, r1
   1af2c:	d9 f0       	breq	.+54     	; 0x1af64 <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1af2e:	c8 5e       	subi	r28, 0xE8	; 232
   1af30:	dd 4f       	sbci	r29, 0xFD	; 253
   1af32:	28 83       	st	Y, r18
   1af34:	39 83       	std	Y+1, r19	; 0x01
   1af36:	4a 83       	std	Y+2, r20	; 0x02
   1af38:	5b 83       	std	Y+3, r21	; 0x03
   1af3a:	c8 51       	subi	r28, 0x18	; 24
   1af3c:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1af3e:	cc 5e       	subi	r28, 0xEC	; 236
   1af40:	dd 4f       	sbci	r29, 0xFD	; 253
   1af42:	28 83       	st	Y, r18
   1af44:	39 83       	std	Y+1, r19	; 0x01
   1af46:	4a 83       	std	Y+2, r20	; 0x02
   1af48:	5b 83       	std	Y+3, r21	; 0x03
   1af4a:	c4 51       	subi	r28, 0x14	; 20
   1af4c:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1af4e:	be 01       	movw	r22, r28
   1af50:	6c 5e       	subi	r22, 0xEC	; 236
   1af52:	7d 4f       	sbci	r23, 0xFD	; 253
   1af54:	ca 5d       	subi	r28, 0xDA	; 218
   1af56:	dd 4f       	sbci	r29, 0xFD	; 253
   1af58:	88 81       	ld	r24, Y
   1af5a:	99 81       	ldd	r25, Y+1	; 0x01
   1af5c:	c6 52       	subi	r28, 0x26	; 38
   1af5e:	d2 40       	sbci	r29, 0x02	; 2
   1af60:	0e 94 1d 79 	call	0xf23a	; 0xf23a <utime>
    }
    sync();
   1af64:	0e 94 db 7a 	call	0xf5b6	; 0xf5b6 <sync>
    printf("\tWrote: %8ld\n", bytes);
   1af68:	ed b7       	in	r30, 0x3d	; 61
   1af6a:	fe b7       	in	r31, 0x3e	; 62
   1af6c:	44 82       	std	Z+4, r4	; 0x04
   1af6e:	55 82       	std	Z+5, r5	; 0x05
   1af70:	66 82       	std	Z+6, r6	; 0x06
   1af72:	77 82       	std	Z+7, r7	; 0x07
   1af74:	81 e6       	ldi	r24, 0x61	; 97
   1af76:	92 e3       	ldi	r25, 0x32	; 50
   1af78:	a0 e0       	ldi	r26, 0x00	; 0
   1af7a:	81 83       	std	Z+1, r24	; 0x01
   1af7c:	92 83       	std	Z+2, r25	; 0x02
   1af7e:	a3 83       	std	Z+3, r26	; 0x03
   1af80:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    return(status);
   1af84:	c7 01       	movw	r24, r14
}
   1af86:	c9 5c       	subi	r28, 0xC9	; 201
   1af88:	dd 4f       	sbci	r29, 0xFD	; 253
   1af8a:	e2 e1       	ldi	r30, 0x12	; 18
   1af8c:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

0001af90 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1af90:	a4 e1       	ldi	r26, 0x14	; 20
   1af92:	b1 e0       	ldi	r27, 0x01	; 1
   1af94:	ee ec       	ldi	r30, 0xCE	; 206
   1af96:	f7 ed       	ldi	r31, 0xD7	; 215
   1af98:	0c 94 5c e3 	jmp	0x1c6b8	; 0x1c6b8 <__prologue_saves__>
   1af9c:	7c 01       	movw	r14, r24
   1af9e:	8b 01       	movw	r16, r22
   1afa0:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1afa2:	62 e4       	ldi	r22, 0x42	; 66
   1afa4:	73 e0       	ldi	r23, 0x03	; 3
   1afa6:	0e 94 87 ce 	call	0x19d0e	; 0x19d0e <lif_open_volume>
   1afaa:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1afac:	00 97       	sbiw	r24, 0x00	; 0
   1afae:	69 f4       	brne	.+26     	; 0x1afca <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1afb0:	ed b7       	in	r30, 0x3d	; 61
   1afb2:	fe b7       	in	r31, 0x3e	; 62
   1afb4:	f5 82       	std	Z+5, r15	; 0x05
   1afb6:	e4 82       	std	Z+4, r14	; 0x04
   1afb8:	89 e4       	ldi	r24, 0x49	; 73
   1afba:	92 e3       	ldi	r25, 0x32	; 50
   1afbc:	a0 e0       	ldi	r26, 0x00	; 0
   1afbe:	81 83       	std	Z+1, r24	; 0x01
   1afc0:	92 83       	std	Z+2, r25	; 0x02
   1afc2:	a3 83       	std	Z+3, r26	; 0x03
   1afc4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1afc8:	13 c0       	rjmp	.+38     	; 0x1aff0 <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1afca:	b8 01       	movw	r22, r16
   1afcc:	75 d9       	rcall	.-3350   	; 0x1a2b8 <lif_find_file>
    if(index == -1)
   1afce:	01 96       	adiw	r24, 0x01	; 1
   1afd0:	91 f4       	brne	.+36     	; 0x1aff6 <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1afd2:	ed b7       	in	r30, 0x3d	; 61
   1afd4:	fe b7       	in	r31, 0x3e	; 62
   1afd6:	15 83       	std	Z+5, r17	; 0x05
   1afd8:	04 83       	std	Z+4, r16	; 0x04
   1afda:	86 e3       	ldi	r24, 0x36	; 54
   1afdc:	92 e3       	ldi	r25, 0x32	; 50
   1afde:	a0 e0       	ldi	r26, 0x00	; 0
   1afe0:	81 83       	std	Z+1, r24	; 0x01
   1afe2:	92 83       	std	Z+2, r25	; 0x02
   1afe4:	a3 83       	std	Z+3, r26	; 0x03
   1afe6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1afea:	c4 01       	movw	r24, r8
   1afec:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1aff0:	00 e0       	ldi	r16, 0x00	; 0
   1aff2:	10 e0       	ldi	r17, 0x00	; 0
   1aff4:	ff c0       	rjmp	.+510    	; 0x1b1f4 <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1aff6:	94 01       	movw	r18, r8
   1aff8:	20 5a       	subi	r18, 0xA0	; 160
   1affa:	3f 4f       	sbci	r19, 0xFF	; 255
   1affc:	c0 5f       	subi	r28, 0xF0	; 240
   1affe:	de 4f       	sbci	r29, 0xFE	; 254
   1b000:	39 83       	std	Y+1, r19	; 0x01
   1b002:	28 83       	st	Y, r18
   1b004:	c0 51       	subi	r28, 0x10	; 16
   1b006:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b008:	f9 01       	movw	r30, r18
   1b00a:	a0 80       	ld	r10, Z
   1b00c:	b1 80       	ldd	r11, Z+1	; 0x01
   1b00e:	0b 2c       	mov	r0, r11
   1b010:	00 0c       	add	r0, r0
   1b012:	cc 08       	sbc	r12, r12
   1b014:	dd 08       	sbc	r13, r13
   1b016:	e1 2c       	mov	r14, r1
   1b018:	f1 2c       	mov	r15, r1
   1b01a:	87 01       	movw	r16, r14
   1b01c:	e3 94       	inc	r14
   1b01e:	21 e0       	ldi	r18, 0x01	; 1
   1b020:	30 e0       	ldi	r19, 0x00	; 0
   1b022:	40 e0       	ldi	r20, 0x00	; 0
   1b024:	50 e0       	ldi	r21, 0x00	; 0
   1b026:	61 e7       	ldi	r22, 0x71	; 113
   1b028:	76 e1       	ldi	r23, 0x16	; 22
   1b02a:	c3 01       	movw	r24, r6
   1b02c:	0e 94 3d ca 	call	0x1947a	; 0x1947a <lif_create_volume>
   1b030:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1b032:	89 2b       	or	r24, r25
   1b034:	d1 f2       	breq	.-76     	; 0x1afea <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1b036:	81 e2       	ldi	r24, 0x21	; 33
   1b038:	f4 01       	movw	r30, r8
   1b03a:	e1 5b       	subi	r30, 0xB1	; 177
   1b03c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b03e:	d7 01       	movw	r26, r14
   1b040:	a1 5b       	subi	r26, 0xB1	; 177
   1b042:	bf 4f       	sbci	r27, 0xFF	; 255
   1b044:	01 90       	ld	r0, Z+
   1b046:	0d 92       	st	X+, r0
   1b048:	8a 95       	dec	r24
   1b04a:	e1 f7       	brne	.-8      	; 0x1b044 <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1b04c:	82 e0       	ldi	r24, 0x02	; 2
   1b04e:	90 e0       	ldi	r25, 0x00	; 0
   1b050:	a0 e0       	ldi	r26, 0x00	; 0
   1b052:	b0 e0       	ldi	r27, 0x00	; 0
   1b054:	f7 01       	movw	r30, r14
   1b056:	e4 5a       	subi	r30, 0xA4	; 164
   1b058:	ff 4f       	sbci	r31, 0xFF	; 255
   1b05a:	80 83       	st	Z, r24
   1b05c:	91 83       	std	Z+1, r25	; 0x01
   1b05e:	a2 83       	std	Z+2, r26	; 0x02
   1b060:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b062:	c0 5f       	subi	r28, 0xF0	; 240
   1b064:	de 4f       	sbci	r29, 0xFE	; 254
   1b066:	e8 81       	ld	r30, Y
   1b068:	f9 81       	ldd	r31, Y+1	; 0x01
   1b06a:	c0 51       	subi	r28, 0x10	; 16
   1b06c:	d1 40       	sbci	r29, 0x01	; 1
   1b06e:	80 81       	ld	r24, Z
   1b070:	91 81       	ldd	r25, Z+1	; 0x01
   1b072:	a2 81       	ldd	r26, Z+2	; 0x02
   1b074:	b3 81       	ldd	r27, Z+3	; 0x03
   1b076:	f7 01       	movw	r30, r14
   1b078:	80 8b       	std	Z+16, r24	; 0x10
   1b07a:	91 8b       	std	Z+17, r25	; 0x11
   1b07c:	a2 8b       	std	Z+18, r26	; 0x12
   1b07e:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b080:	60 e0       	ldi	r22, 0x00	; 0
   1b082:	70 e0       	ldi	r23, 0x00	; 0
   1b084:	c7 01       	movw	r24, r14
   1b086:	0e 94 bf c8 	call	0x1917e	; 0x1917e <lif_writedirindex>
   1b08a:	8c 01       	movw	r16, r24
   1b08c:	89 2b       	or	r24, r25
   1b08e:	41 f0       	breq	.+16     	; 0x1b0a0 <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b090:	61 e0       	ldi	r22, 0x01	; 1
   1b092:	70 e0       	ldi	r23, 0x00	; 0
   1b094:	c7 01       	movw	r24, r14
   1b096:	0e 94 1b c9 	call	0x19236	; 0x19236 <lif_writedirEOF>
   1b09a:	8c 01       	movw	r16, r24
   1b09c:	89 2b       	or	r24, r25
   1b09e:	39 f4       	brne	.+14     	; 0x1b0ae <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b0a0:	c4 01       	movw	r24, r8
   1b0a2:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>
   1b0a6:	c7 01       	movw	r24, r14
   1b0a8:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b0ac:	a3 c0       	rjmp	.+326    	; 0x1b1f4 <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b0ae:	f7 01       	movw	r30, r14
   1b0b0:	44 84       	ldd	r4, Z+12	; 0x0c
   1b0b2:	55 84       	ldd	r5, Z+13	; 0x0d
   1b0b4:	66 84       	ldd	r6, Z+14	; 0x0e
   1b0b6:	77 84       	ldd	r7, Z+15	; 0x0f
   1b0b8:	76 2c       	mov	r7, r6
   1b0ba:	65 2c       	mov	r6, r5
   1b0bc:	54 2c       	mov	r5, r4
   1b0be:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b0c0:	f4 01       	movw	r30, r8
   1b0c2:	e4 5a       	subi	r30, 0xA4	; 164
   1b0c4:	ff 4f       	sbci	r31, 0xFF	; 255
   1b0c6:	80 81       	ld	r24, Z
   1b0c8:	91 81       	ldd	r25, Z+1	; 0x01
   1b0ca:	a2 81       	ldd	r26, Z+2	; 0x02
   1b0cc:	b3 81       	ldd	r27, Z+3	; 0x03
   1b0ce:	22 27       	eor	r18, r18
   1b0d0:	38 2f       	mov	r19, r24
   1b0d2:	49 2f       	mov	r20, r25
   1b0d4:	5a 2f       	mov	r21, r26
   1b0d6:	c4 5f       	subi	r28, 0xF4	; 244
   1b0d8:	de 4f       	sbci	r29, 0xFE	; 254
   1b0da:	28 83       	st	Y, r18
   1b0dc:	39 83       	std	Y+1, r19	; 0x01
   1b0de:	4a 83       	std	Y+2, r20	; 0x02
   1b0e0:	5b 83       	std	Y+3, r21	; 0x03
   1b0e2:	cc 50       	subi	r28, 0x0C	; 12
   1b0e4:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b0e6:	21 2c       	mov	r2, r1
   1b0e8:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b0ea:	88 e2       	ldi	r24, 0x28	; 40
   1b0ec:	92 e3       	ldi	r25, 0x32	; 50
   1b0ee:	9c 01       	movw	r18, r24
   1b0f0:	40 e0       	ldi	r20, 0x00	; 0
   1b0f2:	ce 5e       	subi	r28, 0xEE	; 238
   1b0f4:	de 4f       	sbci	r29, 0xFE	; 254
   1b0f6:	28 83       	st	Y, r18
   1b0f8:	39 83       	std	Y+1, r19	; 0x01
   1b0fa:	4a 83       	std	Y+2, r20	; 0x02
   1b0fc:	c2 51       	subi	r28, 0x12	; 18
   1b0fe:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b100:	c0 5f       	subi	r28, 0xF0	; 240
   1b102:	de 4f       	sbci	r29, 0xFE	; 254
   1b104:	e8 81       	ld	r30, Y
   1b106:	f9 81       	ldd	r31, Y+1	; 0x01
   1b108:	c0 51       	subi	r28, 0x10	; 16
   1b10a:	d1 40       	sbci	r29, 0x01	; 1
   1b10c:	80 81       	ld	r24, Z
   1b10e:	91 81       	ldd	r25, Z+1	; 0x01
   1b110:	28 16       	cp	r2, r24
   1b112:	39 06       	cpc	r3, r25
   1b114:	0c f0       	brlt	.+2      	; 0x1b118 <lif_extract_lif_as_lif+0x188>
   1b116:	58 c0       	rjmp	.+176    	; 0x1b1c8 <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b118:	00 e0       	ldi	r16, 0x00	; 0
   1b11a:	11 e0       	ldi	r17, 0x01	; 1
   1b11c:	c4 5f       	subi	r28, 0xF4	; 244
   1b11e:	de 4f       	sbci	r29, 0xFE	; 254
   1b120:	28 81       	ld	r18, Y
   1b122:	39 81       	ldd	r19, Y+1	; 0x01
   1b124:	4a 81       	ldd	r20, Y+2	; 0x02
   1b126:	5b 81       	ldd	r21, Y+3	; 0x03
   1b128:	cc 50       	subi	r28, 0x0C	; 12
   1b12a:	d1 40       	sbci	r29, 0x01	; 1
   1b12c:	be 01       	movw	r22, r28
   1b12e:	68 5f       	subi	r22, 0xF8	; 248
   1b130:	7f 4f       	sbci	r23, 0xFF	; 255
   1b132:	c4 01       	movw	r24, r8
   1b134:	0e 94 fe be 	call	0x17dfc	; 0x17dfc <lif_read>
   1b138:	5b 01       	movw	r10, r22
   1b13a:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1b13c:	6f 3f       	cpi	r22, 0xFF	; 255
   1b13e:	71 05       	cpc	r23, r1
   1b140:	09 f0       	breq	.+2      	; 0x1b144 <lif_extract_lif_as_lif+0x1b4>
   1b142:	2c f4       	brge	.+10     	; 0x1b14e <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b144:	c4 01       	movw	r24, r8
   1b146:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>
   1b14a:	c7 01       	movw	r24, r14
   1b14c:	4f cf       	rjmp	.-354    	; 0x1afec <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b14e:	00 e0       	ldi	r16, 0x00	; 0
   1b150:	11 e0       	ldi	r17, 0x01	; 1
   1b152:	a3 01       	movw	r20, r6
   1b154:	92 01       	movw	r18, r4
   1b156:	be 01       	movw	r22, r28
   1b158:	68 5f       	subi	r22, 0xF8	; 248
   1b15a:	7f 4f       	sbci	r23, 0xFF	; 255
   1b15c:	c7 01       	movw	r24, r14
   1b15e:	0e 94 51 bf 	call	0x17ea2	; 0x17ea2 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b162:	c5 01       	movw	r24, r10
   1b164:	0b 2c       	mov	r0, r11
   1b166:	00 0c       	add	r0, r0
   1b168:	aa 0b       	sbc	r26, r26
   1b16a:	bb 0b       	sbc	r27, r27
   1b16c:	48 0e       	add	r4, r24
   1b16e:	59 1e       	adc	r5, r25
   1b170:	6a 1e       	adc	r6, r26
   1b172:	7b 1e       	adc	r7, r27
        offset += size;
   1b174:	c4 5f       	subi	r28, 0xF4	; 244
   1b176:	de 4f       	sbci	r29, 0xFE	; 254
   1b178:	28 81       	ld	r18, Y
   1b17a:	39 81       	ldd	r19, Y+1	; 0x01
   1b17c:	4a 81       	ldd	r20, Y+2	; 0x02
   1b17e:	5b 81       	ldd	r21, Y+3	; 0x03
   1b180:	cc 50       	subi	r28, 0x0C	; 12
   1b182:	d1 40       	sbci	r29, 0x01	; 1
   1b184:	28 0f       	add	r18, r24
   1b186:	39 1f       	adc	r19, r25
   1b188:	4a 1f       	adc	r20, r26
   1b18a:	5b 1f       	adc	r21, r27
   1b18c:	c4 5f       	subi	r28, 0xF4	; 244
   1b18e:	de 4f       	sbci	r29, 0xFE	; 254
   1b190:	28 83       	st	Y, r18
   1b192:	39 83       	std	Y+1, r19	; 0x01
   1b194:	4a 83       	std	Y+2, r20	; 0x02
   1b196:	5b 83       	std	Y+3, r21	; 0x03
   1b198:	cc 50       	subi	r28, 0x0C	; 12
   1b19a:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b19c:	ed b7       	in	r30, 0x3d	; 61
   1b19e:	fe b7       	in	r31, 0x3e	; 62
   1b1a0:	44 82       	std	Z+4, r4	; 0x04
   1b1a2:	55 82       	std	Z+5, r5	; 0x05
   1b1a4:	66 82       	std	Z+6, r6	; 0x06
   1b1a6:	77 82       	std	Z+7, r7	; 0x07
   1b1a8:	ce 5e       	subi	r28, 0xEE	; 238
   1b1aa:	de 4f       	sbci	r29, 0xFE	; 254
   1b1ac:	28 81       	ld	r18, Y
   1b1ae:	39 81       	ldd	r19, Y+1	; 0x01
   1b1b0:	4a 81       	ldd	r20, Y+2	; 0x02
   1b1b2:	c2 51       	subi	r28, 0x12	; 18
   1b1b4:	d1 40       	sbci	r29, 0x01	; 1
   1b1b6:	21 83       	std	Z+1, r18	; 0x01
   1b1b8:	32 83       	std	Z+2, r19	; 0x02
   1b1ba:	43 83       	std	Z+3, r20	; 0x03
   1b1bc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b1c0:	ff ef       	ldi	r31, 0xFF	; 255
   1b1c2:	2f 1a       	sub	r2, r31
   1b1c4:	3f 0a       	sbc	r3, r31
   1b1c6:	9c cf       	rjmp	.-200    	; 0x1b100 <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b1c8:	c4 01       	movw	r24, r8
   1b1ca:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>
   1b1ce:	c7 01       	movw	r24, r14
   1b1d0:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b1d4:	ed b7       	in	r30, 0x3d	; 61
   1b1d6:	fe b7       	in	r31, 0x3e	; 62
   1b1d8:	44 82       	std	Z+4, r4	; 0x04
   1b1da:	55 82       	std	Z+5, r5	; 0x05
   1b1dc:	66 82       	std	Z+6, r6	; 0x06
   1b1de:	77 82       	std	Z+7, r7	; 0x07
   1b1e0:	8a e1       	ldi	r24, 0x1A	; 26
   1b1e2:	92 e3       	ldi	r25, 0x32	; 50
   1b1e4:	a0 e0       	ldi	r26, 0x00	; 0
   1b1e6:	81 83       	std	Z+1, r24	; 0x01
   1b1e8:	92 83       	std	Z+2, r25	; 0x02
   1b1ea:	a3 83       	std	Z+3, r26	; 0x03
   1b1ec:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    return(1);
   1b1f0:	01 e0       	ldi	r16, 0x01	; 1
   1b1f2:	10 e0       	ldi	r17, 0x00	; 0
}
   1b1f4:	c8 01       	movw	r24, r16
   1b1f6:	cc 5e       	subi	r28, 0xEC	; 236
   1b1f8:	de 4f       	sbci	r29, 0xFE	; 254
   1b1fa:	e2 e1       	ldi	r30, 0x12	; 18
   1b1fc:	0c 94 78 e3 	jmp	0x1c6f0	; 0x1c6f0 <__epilogue_restores__>

0001b200 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b200:	2f 92       	push	r2
   1b202:	3f 92       	push	r3
   1b204:	4f 92       	push	r4
   1b206:	5f 92       	push	r5
   1b208:	6f 92       	push	r6
   1b20a:	8f 92       	push	r8
   1b20c:	9f 92       	push	r9
   1b20e:	af 92       	push	r10
   1b210:	bf 92       	push	r11
   1b212:	cf 92       	push	r12
   1b214:	df 92       	push	r13
   1b216:	ef 92       	push	r14
   1b218:	ff 92       	push	r15
   1b21a:	0f 93       	push	r16
   1b21c:	1f 93       	push	r17
   1b21e:	cf 93       	push	r28
   1b220:	df 93       	push	r29
   1b222:	cd b7       	in	r28, 0x3d	; 61
   1b224:	de b7       	in	r29, 0x3e	; 62
   1b226:	cd 51       	subi	r28, 0x1D	; 29
   1b228:	d1 40       	sbci	r29, 0x01	; 1
   1b22a:	0f b6       	in	r0, 0x3f	; 63
   1b22c:	f8 94       	cli
   1b22e:	de bf       	out	0x3e, r29	; 62
   1b230:	0f be       	out	0x3f, r0	; 63
   1b232:	cd bf       	out	0x3d, r28	; 61
   1b234:	5c 01       	movw	r10, r24
   1b236:	7b 01       	movw	r14, r22
   1b238:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b23a:	dc 01       	movw	r26, r24
   1b23c:	8c 91       	ld	r24, X
   1b23e:	81 11       	cpse	r24, r1
   1b240:	03 c0       	rjmp	.+6      	; 0x1b248 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b242:	8a ef       	ldi	r24, 0xFA	; 250
   1b244:	91 e3       	ldi	r25, 0x31	; 49
   1b246:	06 c0       	rjmp	.+12     	; 0x1b254 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b248:	db 01       	movw	r26, r22
   1b24a:	8c 91       	ld	r24, X
   1b24c:	81 11       	cpse	r24, r1
   1b24e:	0b c0       	rjmp	.+22     	; 0x1b266 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b250:	8f ed       	ldi	r24, 0xDF	; 223
   1b252:	91 e3       	ldi	r25, 0x31	; 49
   1b254:	a0 e0       	ldi	r26, 0x00	; 0
   1b256:	ed b7       	in	r30, 0x3d	; 61
   1b258:	fe b7       	in	r31, 0x3e	; 62
   1b25a:	81 83       	std	Z+1, r24	; 0x01
   1b25c:	92 83       	std	Z+2, r25	; 0x02
   1b25e:	a3 83       	std	Z+3, r26	; 0x03
   1b260:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1b264:	25 c1       	rjmp	.+586    	; 0x1b4b0 <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b266:	da 01       	movw	r26, r20
   1b268:	8c 91       	ld	r24, X
   1b26a:	81 11       	cpse	r24, r1
   1b26c:	03 c0       	rjmp	.+6      	; 0x1b274 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b26e:	83 ec       	ldi	r24, 0xC3	; 195
   1b270:	91 e3       	ldi	r25, 0x31	; 49
   1b272:	f0 cf       	rjmp	.-32     	; 0x1b254 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1b274:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b278:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b27c:	92 ff       	sbrs	r25, 2
   1b27e:	10 c0       	rjmp	.+32     	; 0x1b2a0 <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1b280:	ed b7       	in	r30, 0x3d	; 61
   1b282:	fe b7       	in	r31, 0x3e	; 62
   1b284:	51 87       	std	Z+9, r21	; 0x09
   1b286:	40 87       	std	Z+8, r20	; 0x08
   1b288:	77 83       	std	Z+7, r23	; 0x07
   1b28a:	66 83       	std	Z+6, r22	; 0x06
   1b28c:	b5 82       	std	Z+5, r11	; 0x05
   1b28e:	a4 82       	std	Z+4, r10	; 0x04
   1b290:	84 e9       	ldi	r24, 0x94	; 148
   1b292:	91 e3       	ldi	r25, 0x31	; 49
   1b294:	a0 e0       	ldi	r26, 0x00	; 0
   1b296:	81 83       	std	Z+1, r24	; 0x01
   1b298:	92 83       	std	Z+2, r25	; 0x02
   1b29a:	a3 83       	std	Z+3, r26	; 0x03
   1b29c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b2a0:	68 e0       	ldi	r22, 0x08	; 8
   1b2a2:	79 e0       	ldi	r23, 0x09	; 9
   1b2a4:	c4 01       	movw	r24, r8
   1b2a6:	0e 94 87 ce 	call	0x19d0e	; 0x19d0e <lif_open_volume>
   1b2aa:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b2ac:	00 97       	sbiw	r24, 0x00	; 0
   1b2ae:	09 f4       	brne	.+2      	; 0x1b2b2 <lif_add_lif_file+0xb2>
   1b2b0:	ff c0       	rjmp	.+510    	; 0x1b4b0 <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b2b2:	b7 01       	movw	r22, r14
   1b2b4:	01 d8       	rcall	.-4094   	; 0x1a2b8 <lif_find_file>
    if(index == -1)
   1b2b6:	01 96       	adiw	r24, 0x01	; 1
   1b2b8:	a1 f4       	brne	.+40     	; 0x1b2e2 <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b2ba:	ed b7       	in	r30, 0x3d	; 61
   1b2bc:	fe b7       	in	r31, 0x3e	; 62
   1b2be:	f5 82       	std	Z+5, r15	; 0x05
   1b2c0:	e4 82       	std	Z+4, r14	; 0x04
   1b2c2:	81 e8       	ldi	r24, 0x81	; 129
   1b2c4:	91 e3       	ldi	r25, 0x31	; 49
   1b2c6:	a0 e0       	ldi	r26, 0x00	; 0
   1b2c8:	81 83       	std	Z+1, r24	; 0x01
   1b2ca:	92 83       	std	Z+2, r25	; 0x02
   1b2cc:	a3 83       	std	Z+3, r26	; 0x03
   1b2ce:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b2d2:	c6 01       	movw	r24, r12
   1b2d4:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b2d8:	60 e0       	ldi	r22, 0x00	; 0
   1b2da:	70 e0       	ldi	r23, 0x00	; 0
   1b2dc:	80 e0       	ldi	r24, 0x00	; 0
   1b2de:	90 e0       	ldi	r25, 0x00	; 0
   1b2e0:	ff c0       	rjmp	.+510    	; 0x1b4e0 <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b2e2:	68 e0       	ldi	r22, 0x08	; 8
   1b2e4:	79 e0       	ldi	r23, 0x09	; 9
   1b2e6:	c5 01       	movw	r24, r10
   1b2e8:	0e 94 87 ce 	call	0x19d0e	; 0x19d0e <lif_open_volume>
   1b2ec:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b2ee:	00 97       	sbiw	r24, 0x00	; 0
   1b2f0:	09 f4       	brne	.+2      	; 0x1b2f4 <lif_add_lif_file+0xf4>
   1b2f2:	de c0       	rjmp	.+444    	; 0x1b4b0 <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b2f4:	f6 01       	movw	r30, r12
   1b2f6:	e0 5a       	subi	r30, 0xA0	; 160
   1b2f8:	ff 4f       	sbci	r31, 0xFF	; 255
   1b2fa:	40 81       	ld	r20, Z
   1b2fc:	51 81       	ldd	r21, Z+1	; 0x01
   1b2fe:	62 81       	ldd	r22, Z+2	; 0x02
   1b300:	73 81       	ldd	r23, Z+3	; 0x03
   1b302:	0e 94 27 cd 	call	0x19a4e	; 0x19a4e <lif_newdir>
   1b306:	ca 5e       	subi	r28, 0xEA	; 234
   1b308:	de 4f       	sbci	r29, 0xFE	; 254
   1b30a:	99 83       	std	Y+1, r25	; 0x01
   1b30c:	88 83       	st	Y, r24
   1b30e:	c6 51       	subi	r28, 0x16	; 22
   1b310:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b312:	01 96       	adiw	r24, 0x01	; 1
   1b314:	79 f4       	brne	.+30     	; 0x1b334 <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1b316:	ed b7       	in	r30, 0x3d	; 61
   1b318:	fe b7       	in	r31, 0x3e	; 62
   1b31a:	97 82       	std	Z+7, r9	; 0x07
   1b31c:	86 82       	std	Z+6, r8	; 0x06
   1b31e:	b5 82       	std	Z+5, r11	; 0x05
   1b320:	a4 82       	std	Z+4, r10	; 0x04
   1b322:	81 e5       	ldi	r24, 0x51	; 81
   1b324:	91 e3       	ldi	r25, 0x31	; 49
   1b326:	a0 e0       	ldi	r26, 0x00	; 0
   1b328:	81 83       	std	Z+1, r24	; 0x01
   1b32a:	92 83       	std	Z+2, r25	; 0x02
   1b32c:	a3 83       	std	Z+3, r26	; 0x03
   1b32e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1b332:	a8 c0       	rjmp	.+336    	; 0x1b484 <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1b334:	c7 01       	movw	r24, r14
   1b336:	84 5a       	subi	r24, 0xA4	; 164
   1b338:	9f 4f       	sbci	r25, 0xFF	; 255
   1b33a:	dc 01       	movw	r26, r24
   1b33c:	4d 91       	ld	r20, X+
   1b33e:	5d 91       	ld	r21, X+
   1b340:	6d 91       	ld	r22, X+
   1b342:	7c 91       	ld	r23, X
   1b344:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b346:	21 e2       	ldi	r18, 0x21	; 33
   1b348:	f6 01       	movw	r30, r12
   1b34a:	e1 5b       	subi	r30, 0xB1	; 177
   1b34c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b34e:	1d 97       	sbiw	r26, 0x0d	; 13
   1b350:	01 90       	ld	r0, Z+
   1b352:	0d 92       	st	X+, r0
   1b354:	2a 95       	dec	r18
   1b356:	e1 f7       	brne	.-8      	; 0x1b350 <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b358:	fc 01       	movw	r30, r24
   1b35a:	40 83       	st	Z, r20
   1b35c:	51 83       	std	Z+1, r21	; 0x01
   1b35e:	62 83       	std	Z+2, r22	; 0x02
   1b360:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b362:	b6 2f       	mov	r27, r22
   1b364:	a5 2f       	mov	r26, r21
   1b366:	94 2f       	mov	r25, r20
   1b368:	88 27       	eor	r24, r24
   1b36a:	c2 5f       	subi	r28, 0xF2	; 242
   1b36c:	de 4f       	sbci	r29, 0xFE	; 254
   1b36e:	88 83       	st	Y, r24
   1b370:	99 83       	std	Y+1, r25	; 0x01
   1b372:	aa 83       	std	Y+2, r26	; 0x02
   1b374:	bb 83       	std	Y+3, r27	; 0x03
   1b376:	ce 50       	subi	r28, 0x0E	; 14
   1b378:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b37a:	f6 01       	movw	r30, r12
   1b37c:	e4 5a       	subi	r30, 0xA4	; 164
   1b37e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b380:	80 81       	ld	r24, Z
   1b382:	91 81       	ldd	r25, Z+1	; 0x01
   1b384:	a2 81       	ldd	r26, Z+2	; 0x02
   1b386:	b3 81       	ldd	r27, Z+3	; 0x03
   1b388:	22 27       	eor	r18, r18
   1b38a:	38 2f       	mov	r19, r24
   1b38c:	49 2f       	mov	r20, r25
   1b38e:	5a 2f       	mov	r21, r26
   1b390:	ce 5e       	subi	r28, 0xEE	; 238
   1b392:	de 4f       	sbci	r29, 0xFE	; 254
   1b394:	28 83       	st	Y, r18
   1b396:	39 83       	std	Y+1, r19	; 0x01
   1b398:	4a 83       	std	Y+2, r20	; 0x02
   1b39a:	5b 83       	std	Y+3, r21	; 0x03
   1b39c:	c2 51       	subi	r28, 0x12	; 18
   1b39e:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b3a0:	21 2c       	mov	r2, r1
   1b3a2:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b3a4:	81 2c       	mov	r8, r1
   1b3a6:	91 2c       	mov	r9, r1
   1b3a8:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b3aa:	a7 01       	movw	r20, r14
   1b3ac:	40 5a       	subi	r20, 0xA0	; 160
   1b3ae:	5f 4f       	sbci	r21, 0xFF	; 255
   1b3b0:	c4 5e       	subi	r28, 0xE4	; 228
   1b3b2:	de 4f       	sbci	r29, 0xFE	; 254
   1b3b4:	59 83       	std	Y+1, r21	; 0x01
   1b3b6:	48 83       	st	Y, r20
   1b3b8:	cc 51       	subi	r28, 0x1C	; 28
   1b3ba:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b3bc:	83 e4       	ldi	r24, 0x43	; 67
   1b3be:	91 e3       	ldi	r25, 0x31	; 49
   1b3c0:	2c 01       	movw	r4, r24
   1b3c2:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b3c4:	27 c0       	rjmp	.+78     	; 0x1b414 <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b3c6:	00 e0       	ldi	r16, 0x00	; 0
   1b3c8:	11 e0       	ldi	r17, 0x01	; 1
   1b3ca:	c8 5e       	subi	r28, 0xE8	; 232
   1b3cc:	de 4f       	sbci	r29, 0xFE	; 254
   1b3ce:	28 81       	ld	r18, Y
   1b3d0:	39 81       	ldd	r19, Y+1	; 0x01
   1b3d2:	4a 81       	ldd	r20, Y+2	; 0x02
   1b3d4:	5b 81       	ldd	r21, Y+3	; 0x03
   1b3d6:	c8 51       	subi	r28, 0x18	; 24
   1b3d8:	d1 40       	sbci	r29, 0x01	; 1
   1b3da:	be 01       	movw	r22, r28
   1b3dc:	66 5f       	subi	r22, 0xF6	; 246
   1b3de:	7f 4f       	sbci	r23, 0xFF	; 255
   1b3e0:	c7 01       	movw	r24, r14
   1b3e2:	0e 94 51 bf 	call	0x17ea2	; 0x17ea2 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b3e6:	8f 3f       	cpi	r24, 0xFF	; 255
   1b3e8:	91 05       	cpc	r25, r1
   1b3ea:	09 f0       	breq	.+2      	; 0x1b3ee <lif_add_lif_file+0x1ee>
   1b3ec:	0c f4       	brge	.+2      	; 0x1b3f0 <lif_add_lif_file+0x1f0>
   1b3ee:	4a c0       	rjmp	.+148    	; 0x1b484 <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b3f0:	5f ef       	ldi	r21, 0xFF	; 255
   1b3f2:	95 1a       	sub	r9, r21
   1b3f4:	a5 0a       	sbc	r10, r21
   1b3f6:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b3f8:	ed b7       	in	r30, 0x3d	; 61
   1b3fa:	fe b7       	in	r31, 0x3e	; 62
   1b3fc:	84 82       	std	Z+4, r8	; 0x04
   1b3fe:	95 82       	std	Z+5, r9	; 0x05
   1b400:	a6 82       	std	Z+6, r10	; 0x06
   1b402:	b7 82       	std	Z+7, r11	; 0x07
   1b404:	41 82       	std	Z+1, r4	; 0x01
   1b406:	52 82       	std	Z+2, r5	; 0x02
   1b408:	63 82       	std	Z+3, r6	; 0x03
   1b40a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b40e:	ff ef       	ldi	r31, 0xFF	; 255
   1b410:	2f 1a       	sub	r2, r31
   1b412:	3f 0a       	sbc	r3, r31
   1b414:	ce 5e       	subi	r28, 0xEE	; 238
   1b416:	de 4f       	sbci	r29, 0xFE	; 254
   1b418:	28 81       	ld	r18, Y
   1b41a:	39 81       	ldd	r19, Y+1	; 0x01
   1b41c:	4a 81       	ldd	r20, Y+2	; 0x02
   1b41e:	5b 81       	ldd	r21, Y+3	; 0x03
   1b420:	c2 51       	subi	r28, 0x12	; 18
   1b422:	d1 40       	sbci	r29, 0x01	; 1
   1b424:	28 0d       	add	r18, r8
   1b426:	39 1d       	adc	r19, r9
   1b428:	4a 1d       	adc	r20, r10
   1b42a:	5b 1d       	adc	r21, r11
   1b42c:	c2 5f       	subi	r28, 0xF2	; 242
   1b42e:	de 4f       	sbci	r29, 0xFE	; 254
   1b430:	88 81       	ld	r24, Y
   1b432:	99 81       	ldd	r25, Y+1	; 0x01
   1b434:	aa 81       	ldd	r26, Y+2	; 0x02
   1b436:	bb 81       	ldd	r27, Y+3	; 0x03
   1b438:	ce 50       	subi	r28, 0x0E	; 14
   1b43a:	d1 40       	sbci	r29, 0x01	; 1
   1b43c:	88 0d       	add	r24, r8
   1b43e:	99 1d       	adc	r25, r9
   1b440:	aa 1d       	adc	r26, r10
   1b442:	bb 1d       	adc	r27, r11
   1b444:	c8 5e       	subi	r28, 0xE8	; 232
   1b446:	de 4f       	sbci	r29, 0xFE	; 254
   1b448:	88 83       	st	Y, r24
   1b44a:	99 83       	std	Y+1, r25	; 0x01
   1b44c:	aa 83       	std	Y+2, r26	; 0x02
   1b44e:	bb 83       	std	Y+3, r27	; 0x03
   1b450:	c8 51       	subi	r28, 0x18	; 24
   1b452:	d1 40       	sbci	r29, 0x01	; 1
   1b454:	c4 5e       	subi	r28, 0xE4	; 228
   1b456:	de 4f       	sbci	r29, 0xFE	; 254
   1b458:	a8 81       	ld	r26, Y
   1b45a:	b9 81       	ldd	r27, Y+1	; 0x01
   1b45c:	cc 51       	subi	r28, 0x1C	; 28
   1b45e:	d1 40       	sbci	r29, 0x01	; 1
   1b460:	8d 91       	ld	r24, X+
   1b462:	9c 91       	ld	r25, X
   1b464:	28 16       	cp	r2, r24
   1b466:	39 06       	cpc	r3, r25
   1b468:	94 f4       	brge	.+36     	; 0x1b48e <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1b46a:	00 e0       	ldi	r16, 0x00	; 0
   1b46c:	11 e0       	ldi	r17, 0x01	; 1
   1b46e:	be 01       	movw	r22, r28
   1b470:	66 5f       	subi	r22, 0xF6	; 246
   1b472:	7f 4f       	sbci	r23, 0xFF	; 255
   1b474:	c6 01       	movw	r24, r12
   1b476:	0e 94 fe be 	call	0x17dfc	; 0x17dfc <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b47a:	6f 3f       	cpi	r22, 0xFF	; 255
   1b47c:	71 05       	cpc	r23, r1
   1b47e:	11 f0       	breq	.+4      	; 0x1b484 <lif_add_lif_file+0x284>
   1b480:	0c f0       	brlt	.+2      	; 0x1b484 <lif_add_lif_file+0x284>
   1b482:	a1 cf       	rjmp	.-190    	; 0x1b3c6 <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b484:	c7 01       	movw	r24, r14
   1b486:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>
   1b48a:	c6 01       	movw	r24, r12
   1b48c:	0f c0       	rjmp	.+30     	; 0x1b4ac <lif_add_lif_file+0x2ac>
   1b48e:	c6 01       	movw	r24, r12
   1b490:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1b494:	ca 5e       	subi	r28, 0xEA	; 234
   1b496:	de 4f       	sbci	r29, 0xFE	; 254
   1b498:	68 81       	ld	r22, Y
   1b49a:	79 81       	ldd	r23, Y+1	; 0x01
   1b49c:	c6 51       	subi	r28, 0x16	; 22
   1b49e:	d1 40       	sbci	r29, 0x01	; 1
   1b4a0:	c7 01       	movw	r24, r14
   1b4a2:	0e 94 bf c8 	call	0x1917e	; 0x1917e <lif_writedirindex>
   1b4a6:	89 2b       	or	r24, r25
   1b4a8:	41 f4       	brne	.+16     	; 0x1b4ba <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b4aa:	c7 01       	movw	r24, r14
   1b4ac:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1b4b0:	6f ef       	ldi	r22, 0xFF	; 255
   1b4b2:	7f ef       	ldi	r23, 0xFF	; 255
   1b4b4:	8f ef       	ldi	r24, 0xFF	; 255
   1b4b6:	9f ef       	ldi	r25, 0xFF	; 255
   1b4b8:	13 c0       	rjmp	.+38     	; 0x1b4e0 <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b4ba:	c7 01       	movw	r24, r14
   1b4bc:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1b4c0:	ed b7       	in	r30, 0x3d	; 61
   1b4c2:	fe b7       	in	r31, 0x3e	; 62
   1b4c4:	84 82       	std	Z+4, r8	; 0x04
   1b4c6:	95 82       	std	Z+5, r9	; 0x05
   1b4c8:	a6 82       	std	Z+6, r10	; 0x06
   1b4ca:	b7 82       	std	Z+7, r11	; 0x07
   1b4cc:	85 e3       	ldi	r24, 0x35	; 53
   1b4ce:	91 e3       	ldi	r25, 0x31	; 49
   1b4d0:	a0 e0       	ldi	r26, 0x00	; 0
   1b4d2:	81 83       	std	Z+1, r24	; 0x01
   1b4d4:	92 83       	std	Z+2, r25	; 0x02
   1b4d6:	a3 83       	std	Z+3, r26	; 0x03
   1b4d8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    return(bytes);
   1b4dc:	b4 01       	movw	r22, r8
   1b4de:	c5 01       	movw	r24, r10
}
   1b4e0:	c3 5e       	subi	r28, 0xE3	; 227
   1b4e2:	de 4f       	sbci	r29, 0xFE	; 254
   1b4e4:	0f b6       	in	r0, 0x3f	; 63
   1b4e6:	f8 94       	cli
   1b4e8:	de bf       	out	0x3e, r29	; 62
   1b4ea:	0f be       	out	0x3f, r0	; 63
   1b4ec:	cd bf       	out	0x3d, r28	; 61
   1b4ee:	df 91       	pop	r29
   1b4f0:	cf 91       	pop	r28
   1b4f2:	1f 91       	pop	r17
   1b4f4:	0f 91       	pop	r16
   1b4f6:	ff 90       	pop	r15
   1b4f8:	ef 90       	pop	r14
   1b4fa:	df 90       	pop	r13
   1b4fc:	cf 90       	pop	r12
   1b4fe:	bf 90       	pop	r11
   1b500:	af 90       	pop	r10
   1b502:	9f 90       	pop	r9
   1b504:	8f 90       	pop	r8
   1b506:	6f 90       	pop	r6
   1b508:	5f 90       	pop	r5
   1b50a:	4f 90       	pop	r4
   1b50c:	3f 90       	pop	r3
   1b50e:	2f 90       	pop	r2
   1b510:	08 95       	ret

0001b512 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1b512:	ef 92       	push	r14
   1b514:	ff 92       	push	r15
   1b516:	0f 93       	push	r16
   1b518:	1f 93       	push	r17
   1b51a:	cf 93       	push	r28
   1b51c:	df 93       	push	r29
   1b51e:	ad b7       	in	r26, 0x3d	; 61
   1b520:	be b7       	in	r27, 0x3e	; 62
   1b522:	17 97       	sbiw	r26, 0x07	; 7
   1b524:	0f b6       	in	r0, 0x3f	; 63
   1b526:	f8 94       	cli
   1b528:	be bf       	out	0x3e, r27	; 62
   1b52a:	0f be       	out	0x3f, r0	; 63
   1b52c:	ad bf       	out	0x3d, r26	; 61
   1b52e:	7c 01       	movw	r14, r24
   1b530:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1b532:	fc 01       	movw	r30, r24
   1b534:	80 81       	ld	r24, Z
   1b536:	81 11       	cpse	r24, r1
   1b538:	03 c0       	rjmp	.+6      	; 0x1b540 <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1b53a:	80 e1       	ldi	r24, 0x10	; 16
   1b53c:	91 e3       	ldi	r25, 0x31	; 49
   1b53e:	06 c0       	rjmp	.+12     	; 0x1b54c <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1b540:	fb 01       	movw	r30, r22
   1b542:	80 81       	ld	r24, Z
   1b544:	81 11       	cpse	r24, r1
   1b546:	0b c0       	rjmp	.+22     	; 0x1b55e <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1b548:	80 ef       	ldi	r24, 0xF0	; 240
   1b54a:	90 e3       	ldi	r25, 0x30	; 48
   1b54c:	a0 e0       	ldi	r26, 0x00	; 0
   1b54e:	ed b7       	in	r30, 0x3d	; 61
   1b550:	fe b7       	in	r31, 0x3e	; 62
   1b552:	81 83       	std	Z+1, r24	; 0x01
   1b554:	92 83       	std	Z+2, r25	; 0x02
   1b556:	a3 83       	std	Z+3, r26	; 0x03
   1b558:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1b55c:	68 c0       	rjmp	.+208    	; 0x1b62e <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1b55e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b562:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b566:	92 ff       	sbrs	r25, 2
   1b568:	0e c0       	rjmp	.+28     	; 0x1b586 <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1b56a:	ed b7       	in	r30, 0x3d	; 61
   1b56c:	fe b7       	in	r31, 0x3e	; 62
   1b56e:	77 83       	std	Z+7, r23	; 0x07
   1b570:	66 83       	std	Z+6, r22	; 0x06
   1b572:	f5 82       	std	Z+5, r15	; 0x05
   1b574:	e4 82       	std	Z+4, r14	; 0x04
   1b576:	81 ed       	ldi	r24, 0xD1	; 209
   1b578:	90 e3       	ldi	r25, 0x30	; 48
   1b57a:	a0 e0       	ldi	r26, 0x00	; 0
   1b57c:	81 83       	std	Z+1, r24	; 0x01
   1b57e:	92 83       	std	Z+2, r25	; 0x02
   1b580:	a3 83       	std	Z+3, r26	; 0x03
   1b582:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1b586:	68 e0       	ldi	r22, 0x08	; 8
   1b588:	79 e0       	ldi	r23, 0x09	; 9
   1b58a:	c7 01       	movw	r24, r14
   1b58c:	0e 94 87 ce 	call	0x19d0e	; 0x19d0e <lif_open_volume>
   1b590:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b592:	00 97       	sbiw	r24, 0x00	; 0
   1b594:	09 f4       	brne	.+2      	; 0x1b598 <lif_del_file+0x86>
   1b596:	4b c0       	rjmp	.+150    	; 0x1b62e <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1b598:	b8 01       	movw	r22, r16
   1b59a:	0e 94 5c d1 	call	0x1a2b8	; 0x1a2b8 <lif_find_file>
    if(index == -1)
   1b59e:	8f 3f       	cpi	r24, 0xFF	; 255
   1b5a0:	ff ef       	ldi	r31, 0xFF	; 255
   1b5a2:	9f 07       	cpc	r25, r31
   1b5a4:	a1 f4       	brne	.+40     	; 0x1b5ce <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b5a6:	ce 01       	movw	r24, r28
   1b5a8:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1b5ac:	ed b7       	in	r30, 0x3d	; 61
   1b5ae:	fe b7       	in	r31, 0x3e	; 62
   1b5b0:	17 83       	std	Z+7, r17	; 0x07
   1b5b2:	06 83       	std	Z+6, r16	; 0x06
   1b5b4:	f5 82       	std	Z+5, r15	; 0x05
   1b5b6:	e4 82       	std	Z+4, r14	; 0x04
   1b5b8:	89 ea       	ldi	r24, 0xA9	; 169
   1b5ba:	90 e3       	ldi	r25, 0x30	; 48
   1b5bc:	a0 e0       	ldi	r26, 0x00	; 0
   1b5be:	81 83       	std	Z+1, r24	; 0x01
   1b5c0:	92 83       	std	Z+2, r25	; 0x02
   1b5c2:	a3 83       	std	Z+3, r26	; 0x03
   1b5c4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(0);
   1b5c8:	80 e0       	ldi	r24, 0x00	; 0
   1b5ca:	90 e0       	ldi	r25, 0x00	; 0
   1b5cc:	32 c0       	rjmp	.+100    	; 0x1b632 <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1b5ce:	2a a1       	ldd	r18, Y+34	; 0x22
   1b5d0:	3b a1       	ldd	r19, Y+35	; 0x23
   1b5d2:	21 50       	subi	r18, 0x01	; 1
   1b5d4:	31 09       	sbc	r19, r1
   1b5d6:	fe 01       	movw	r30, r28
   1b5d8:	e6 5a       	subi	r30, 0xA6	; 166
   1b5da:	ff 4f       	sbci	r31, 0xFF	; 255
   1b5dc:	82 17       	cp	r24, r18
   1b5de:	93 07       	cpc	r25, r19
   1b5e0:	2c f0       	brlt	.+10     	; 0x1b5ec <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1b5e2:	2f ef       	ldi	r18, 0xFF	; 255
   1b5e4:	3f ef       	ldi	r19, 0xFF	; 255
   1b5e6:	31 83       	std	Z+1, r19	; 0x01
   1b5e8:	20 83       	st	Z, r18
   1b5ea:	02 c0       	rjmp	.+4      	; 0x1b5f0 <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1b5ec:	11 82       	std	Z+1, r1	; 0x01
   1b5ee:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1b5f0:	bc 01       	movw	r22, r24
   1b5f2:	ce 01       	movw	r24, r28
   1b5f4:	0e 94 bf c8 	call	0x1917e	; 0x1917e <lif_writedirindex>
   1b5f8:	89 2b       	or	r24, r25
   1b5fa:	21 f4       	brne	.+8      	; 0x1b604 <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b5fc:	ce 01       	movw	r24, r28
   1b5fe:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>
   1b602:	15 c0       	rjmp	.+42     	; 0x1b62e <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1b604:	ce 01       	movw	r24, r28
   1b606:	0e 94 33 c9 	call	0x19266	; 0x19266 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b60a:	ce 01       	movw	r24, r28
   1b60c:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1b610:	ed b7       	in	r30, 0x3d	; 61
   1b612:	fe b7       	in	r31, 0x3e	; 62
   1b614:	15 83       	std	Z+5, r17	; 0x05
   1b616:	04 83       	std	Z+4, r16	; 0x04
   1b618:	8a e9       	ldi	r24, 0x9A	; 154
   1b61a:	90 e3       	ldi	r25, 0x30	; 48
   1b61c:	a0 e0       	ldi	r26, 0x00	; 0
   1b61e:	81 83       	std	Z+1, r24	; 0x01
   1b620:	92 83       	std	Z+2, r25	; 0x02
   1b622:	a3 83       	std	Z+3, r26	; 0x03
   1b624:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    return(1);
   1b628:	81 e0       	ldi	r24, 0x01	; 1
   1b62a:	90 e0       	ldi	r25, 0x00	; 0
   1b62c:	02 c0       	rjmp	.+4      	; 0x1b632 <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b62e:	8f ef       	ldi	r24, 0xFF	; 255
   1b630:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1b632:	cd b7       	in	r28, 0x3d	; 61
   1b634:	de b7       	in	r29, 0x3e	; 62
   1b636:	27 96       	adiw	r28, 0x07	; 7
   1b638:	e6 e0       	ldi	r30, 0x06	; 6
   1b63a:	0c 94 84 e3 	jmp	0x1c708	; 0x1c708 <__epilogue_restores__+0x18>

0001b63e <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1b63e:	a7 e0       	ldi	r26, 0x07	; 7
   1b640:	b0 e0       	ldi	r27, 0x00	; 0
   1b642:	e5 e2       	ldi	r30, 0x25	; 37
   1b644:	fb ed       	ldi	r31, 0xDB	; 219
   1b646:	0c 94 64 e3 	jmp	0x1c6c8	; 0x1c6c8 <__prologue_saves__+0x10>
   1b64a:	6c 01       	movw	r12, r24
   1b64c:	8b 01       	movw	r16, r22
   1b64e:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1b650:	fc 01       	movw	r30, r24
   1b652:	80 81       	ld	r24, Z
   1b654:	81 11       	cpse	r24, r1
   1b656:	03 c0       	rjmp	.+6      	; 0x1b65e <lif_rename_file+0x20>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1b658:	82 e7       	ldi	r24, 0x72	; 114
   1b65a:	90 e3       	ldi	r25, 0x30	; 48
   1b65c:	06 c0       	rjmp	.+12     	; 0x1b66a <lif_rename_file+0x2c>
        return(-1);
    }
    if(!*oldlifname)
   1b65e:	fb 01       	movw	r30, r22
   1b660:	80 81       	ld	r24, Z
   1b662:	81 11       	cpse	r24, r1
   1b664:	0b c0       	rjmp	.+22     	; 0x1b67c <lif_rename_file+0x3e>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1b666:	8b e4       	ldi	r24, 0x4B	; 75
   1b668:	90 e3       	ldi	r25, 0x30	; 48
   1b66a:	a0 e0       	ldi	r26, 0x00	; 0
   1b66c:	ed b7       	in	r30, 0x3d	; 61
   1b66e:	fe b7       	in	r31, 0x3e	; 62
   1b670:	81 83       	std	Z+1, r24	; 0x01
   1b672:	92 83       	std	Z+2, r25	; 0x02
   1b674:	a3 83       	std	Z+3, r26	; 0x03
   1b676:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1b67a:	58 c0       	rjmp	.+176    	; 0x1b72c <lif_rename_file+0xee>
        return(-1);
    }
    if(!*newlifname)
   1b67c:	fa 01       	movw	r30, r20
   1b67e:	80 81       	ld	r24, Z
   1b680:	81 11       	cpse	r24, r1
   1b682:	03 c0       	rjmp	.+6      	; 0x1b68a <lif_rename_file+0x4c>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1b684:	84 e2       	ldi	r24, 0x24	; 36
   1b686:	90 e3       	ldi	r25, 0x30	; 48
   1b688:	f0 cf       	rjmp	.-32     	; 0x1b66a <lif_rename_file+0x2c>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1b68a:	ca 01       	movw	r24, r20
   1b68c:	0e 94 19 c0 	call	0x18032	; 0x18032 <lif_checkname>
   1b690:	89 2b       	or	r24, r25
   1b692:	19 f4       	brne	.+6      	; 0x1b69a <lif_rename_file+0x5c>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1b694:	8e ee       	ldi	r24, 0xEE	; 238
   1b696:	9f e2       	ldi	r25, 0x2F	; 47
   1b698:	e8 cf       	rjmp	.-48     	; 0x1b66a <lif_rename_file+0x2c>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b69a:	68 e0       	ldi	r22, 0x08	; 8
   1b69c:	79 e0       	ldi	r23, 0x09	; 9
   1b69e:	c6 01       	movw	r24, r12
   1b6a0:	0e 94 87 ce 	call	0x19d0e	; 0x19d0e <lif_open_volume>
   1b6a4:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b6a6:	00 97       	sbiw	r24, 0x00	; 0
   1b6a8:	09 f4       	brne	.+2      	; 0x1b6ac <lif_rename_file+0x6e>
   1b6aa:	40 c0       	rjmp	.+128    	; 0x1b72c <lif_rename_file+0xee>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1b6ac:	b8 01       	movw	r22, r16
   1b6ae:	0e 94 5c d1 	call	0x1a2b8	; 0x1a2b8 <lif_find_file>
   1b6b2:	5c 01       	movw	r10, r24
    if(index == -1)
   1b6b4:	01 96       	adiw	r24, 0x01	; 1
   1b6b6:	a1 f4       	brne	.+40     	; 0x1b6e0 <lif_rename_file+0xa2>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1b6b8:	ed b7       	in	r30, 0x3d	; 61
   1b6ba:	fe b7       	in	r31, 0x3e	; 62
   1b6bc:	17 83       	std	Z+7, r17	; 0x07
   1b6be:	06 83       	std	Z+6, r16	; 0x06
   1b6c0:	d5 82       	std	Z+5, r13	; 0x05
   1b6c2:	c4 82       	std	Z+4, r12	; 0x04
   1b6c4:	85 ec       	ldi	r24, 0xC5	; 197
   1b6c6:	9f e2       	ldi	r25, 0x2F	; 47
   1b6c8:	a0 e0       	ldi	r26, 0x00	; 0
   1b6ca:	81 83       	std	Z+1, r24	; 0x01
   1b6cc:	92 83       	std	Z+2, r25	; 0x02
   1b6ce:	a3 83       	std	Z+3, r26	; 0x03
   1b6d0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b6d4:	ce 01       	movw	r24, r28
   1b6d6:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1b6da:	80 e0       	ldi	r24, 0x00	; 0
   1b6dc:	90 e0       	ldi	r25, 0x00	; 0
   1b6de:	28 c0       	rjmp	.+80     	; 0x1b730 <lif_rename_file+0xf2>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1b6e0:	4a e0       	ldi	r20, 0x0A	; 10
   1b6e2:	50 e0       	ldi	r21, 0x00	; 0
   1b6e4:	b7 01       	movw	r22, r14
   1b6e6:	ce 01       	movw	r24, r28
   1b6e8:	81 5b       	subi	r24, 0xB1	; 177
   1b6ea:	9f 4f       	sbci	r25, 0xFF	; 255
   1b6ec:	0e 94 53 c0 	call	0x180a6	; 0x180a6 <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1b6f0:	b5 01       	movw	r22, r10
   1b6f2:	ce 01       	movw	r24, r28
   1b6f4:	0e 94 bf c8 	call	0x1917e	; 0x1917e <lif_writedirindex>
   1b6f8:	89 2b       	or	r24, r25
   1b6fa:	21 f4       	brne	.+8      	; 0x1b704 <lif_rename_file+0xc6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b6fc:	ce 01       	movw	r24, r28
   1b6fe:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>
   1b702:	14 c0       	rjmp	.+40     	; 0x1b72c <lif_rename_file+0xee>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1b704:	ed b7       	in	r30, 0x3d	; 61
   1b706:	fe b7       	in	r31, 0x3e	; 62
   1b708:	f7 82       	std	Z+7, r15	; 0x07
   1b70a:	e6 82       	std	Z+6, r14	; 0x06
   1b70c:	15 83       	std	Z+5, r17	; 0x05
   1b70e:	04 83       	std	Z+4, r16	; 0x04
   1b710:	8e ea       	ldi	r24, 0xAE	; 174
   1b712:	9f e2       	ldi	r25, 0x2F	; 47
   1b714:	a0 e0       	ldi	r26, 0x00	; 0
   1b716:	81 83       	std	Z+1, r24	; 0x01
   1b718:	92 83       	std	Z+2, r25	; 0x02
   1b71a:	a3 83       	std	Z+3, r26	; 0x03
   1b71c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b720:	ce 01       	movw	r24, r28
   1b722:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1b726:	81 e0       	ldi	r24, 0x01	; 1
   1b728:	90 e0       	ldi	r25, 0x00	; 0
   1b72a:	02 c0       	rjmp	.+4      	; 0x1b730 <lif_rename_file+0xf2>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b72c:	8f ef       	ldi	r24, 0xFF	; 255
   1b72e:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1b730:	cd b7       	in	r28, 0x3d	; 61
   1b732:	de b7       	in	r29, 0x3e	; 62
   1b734:	27 96       	adiw	r28, 0x07	; 7
   1b736:	ea e0       	ldi	r30, 0x0A	; 10
   1b738:	e3 c7       	rjmp	.+4038   	; 0x1c700 <__epilogue_restores__+0x10>

0001b73a <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1b73a:	4f 92       	push	r4
   1b73c:	5f 92       	push	r5
   1b73e:	6f 92       	push	r6
   1b740:	7f 92       	push	r7
   1b742:	af 92       	push	r10
   1b744:	bf 92       	push	r11
   1b746:	cf 92       	push	r12
   1b748:	df 92       	push	r13
   1b74a:	ef 92       	push	r14
   1b74c:	ff 92       	push	r15
   1b74e:	0f 93       	push	r16
   1b750:	1f 93       	push	r17
   1b752:	cf 93       	push	r28
   1b754:	df 93       	push	r29
   1b756:	ad b7       	in	r26, 0x3d	; 61
   1b758:	be b7       	in	r27, 0x3e	; 62
   1b75a:	17 97       	sbiw	r26, 0x07	; 7
   1b75c:	0f b6       	in	r0, 0x3f	; 63
   1b75e:	f8 94       	cli
   1b760:	be bf       	out	0x3e, r27	; 62
   1b762:	0f be       	out	0x3f, r0	; 63
   1b764:	ad bf       	out	0x3d, r26	; 61
   1b766:	27 01       	movw	r4, r14
   1b768:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1b76a:	dc 01       	movw	r26, r24
   1b76c:	ec 91       	ld	r30, X
   1b76e:	e1 11       	cpse	r30, r1
   1b770:	03 c0       	rjmp	.+6      	; 0x1b778 <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1b772:	85 e8       	ldi	r24, 0x85	; 133
   1b774:	9f e2       	ldi	r25, 0x2F	; 47
   1b776:	16 c0       	rjmp	.+44     	; 0x1b7a4 <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1b778:	db 01       	movw	r26, r22
   1b77a:	ec 91       	ld	r30, X
   1b77c:	e1 11       	cpse	r30, r1
   1b77e:	03 c0       	rjmp	.+6      	; 0x1b786 <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1b780:	80 e6       	ldi	r24, 0x60	; 96
   1b782:	9f e2       	ldi	r25, 0x2F	; 47
   1b784:	0f c0       	rjmp	.+30     	; 0x1b7a4 <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1b786:	21 15       	cp	r18, r1
   1b788:	31 05       	cpc	r19, r1
   1b78a:	41 05       	cpc	r20, r1
   1b78c:	51 05       	cpc	r21, r1
   1b78e:	19 f4       	brne	.+6      	; 0x1b796 <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1b790:	8d e3       	ldi	r24, 0x3D	; 61
   1b792:	9f e2       	ldi	r25, 0x2F	; 47
   1b794:	07 c0       	rjmp	.+14     	; 0x1b7a4 <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1b796:	e1 14       	cp	r14, r1
   1b798:	f1 04       	cpc	r15, r1
   1b79a:	01 05       	cpc	r16, r1
   1b79c:	11 05       	cpc	r17, r1
   1b79e:	59 f4       	brne	.+22     	; 0x1b7b6 <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1b7a0:	8d e1       	ldi	r24, 0x1D	; 29
   1b7a2:	9f e2       	ldi	r25, 0x2F	; 47
   1b7a4:	a0 e0       	ldi	r26, 0x00	; 0
   1b7a6:	ed b7       	in	r30, 0x3d	; 61
   1b7a8:	fe b7       	in	r31, 0x3e	; 62
   1b7aa:	81 83       	std	Z+1, r24	; 0x01
   1b7ac:	92 83       	std	Z+2, r25	; 0x02
   1b7ae:	a3 83       	std	Z+3, r26	; 0x03
   1b7b0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1b7b4:	2b c0       	rjmp	.+86     	; 0x1b80c <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1b7b6:	67 01       	movw	r12, r14
   1b7b8:	78 01       	movw	r14, r16
   1b7ba:	f2 e0       	ldi	r31, 0x02	; 2
   1b7bc:	cf 1a       	sub	r12, r31
   1b7be:	d1 08       	sbc	r13, r1
   1b7c0:	e1 08       	sbc	r14, r1
   1b7c2:	f1 08       	sbc	r15, r1
   1b7c4:	56 01       	movw	r10, r12
   1b7c6:	67 01       	movw	r12, r14
   1b7c8:	a2 1a       	sub	r10, r18
   1b7ca:	b3 0a       	sbc	r11, r19
   1b7cc:	c4 0a       	sbc	r12, r20
   1b7ce:	d5 0a       	sbc	r13, r21
   1b7d0:	79 01       	movw	r14, r18
   1b7d2:	8a 01       	movw	r16, r20
   1b7d4:	22 e0       	ldi	r18, 0x02	; 2
   1b7d6:	30 e0       	ldi	r19, 0x00	; 0
   1b7d8:	40 e0       	ldi	r20, 0x00	; 0
   1b7da:	50 e0       	ldi	r21, 0x00	; 0
   1b7dc:	0e 94 3d ca 	call	0x1947a	; 0x1947a <lif_create_volume>
    if(LIF == NULL)
   1b7e0:	00 97       	sbiw	r24, 0x00	; 0
   1b7e2:	a1 f0       	breq	.+40     	; 0x1b80c <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1b7e4:	0e 94 ca c7 	call	0x18f94	; 0x18f94 <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1b7e8:	82 01       	movw	r16, r4
   1b7ea:	d6 2d       	mov	r29, r6
   1b7ec:	c7 2d       	mov	r28, r7
   1b7ee:	ed b7       	in	r30, 0x3d	; 61
   1b7f0:	fe b7       	in	r31, 0x3e	; 62
   1b7f2:	44 82       	std	Z+4, r4	; 0x04
   1b7f4:	15 83       	std	Z+5, r17	; 0x05
   1b7f6:	66 82       	std	Z+6, r6	; 0x06
   1b7f8:	77 82       	std	Z+7, r7	; 0x07
   1b7fa:	8d ef       	ldi	r24, 0xFD	; 253
   1b7fc:	9e e2       	ldi	r25, 0x2E	; 46
   1b7fe:	a0 e0       	ldi	r26, 0x00	; 0
   1b800:	81 83       	std	Z+1, r24	; 0x01
   1b802:	92 83       	std	Z+2, r25	; 0x02
   1b804:	a3 83       	std	Z+3, r26	; 0x03
   1b806:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    return(end);
   1b80a:	04 c0       	rjmp	.+8      	; 0x1b814 <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1b80c:	0f ef       	ldi	r16, 0xFF	; 255
   1b80e:	1f ef       	ldi	r17, 0xFF	; 255
   1b810:	df ef       	ldi	r29, 0xFF	; 255
   1b812:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1b814:	b8 01       	movw	r22, r16
   1b816:	8d 2f       	mov	r24, r29
   1b818:	9c 2f       	mov	r25, r28
   1b81a:	ad b7       	in	r26, 0x3d	; 61
   1b81c:	be b7       	in	r27, 0x3e	; 62
   1b81e:	17 96       	adiw	r26, 0x07	; 7
   1b820:	0f b6       	in	r0, 0x3f	; 63
   1b822:	f8 94       	cli
   1b824:	be bf       	out	0x3e, r27	; 62
   1b826:	0f be       	out	0x3f, r0	; 63
   1b828:	ad bf       	out	0x3d, r26	; 61
   1b82a:	df 91       	pop	r29
   1b82c:	cf 91       	pop	r28
   1b82e:	1f 91       	pop	r17
   1b830:	0f 91       	pop	r16
   1b832:	ff 90       	pop	r15
   1b834:	ef 90       	pop	r14
   1b836:	df 90       	pop	r13
   1b838:	cf 90       	pop	r12
   1b83a:	bf 90       	pop	r11
   1b83c:	af 90       	pop	r10
   1b83e:	7f 90       	pop	r7
   1b840:	6f 90       	pop	r6
   1b842:	5f 90       	pop	r5
   1b844:	4f 90       	pop	r4
   1b846:	08 95       	ret

0001b848 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1b848:	a5 e0       	ldi	r26, 0x05	; 5
   1b84a:	b0 e0       	ldi	r27, 0x00	; 0
   1b84c:	e9 e2       	ldi	r30, 0x29	; 41
   1b84e:	fc ed       	ldi	r31, 0xDC	; 220
   1b850:	39 c7       	rjmp	.+3698   	; 0x1c6c4 <__prologue_saves__+0xc>
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1b852:	82 30       	cpi	r24, 0x02	; 2
   1b854:	91 05       	cpc	r25, r1
   1b856:	1c f4       	brge	.+6      	; 0x1b85e <lif_tests+0x16>
        return (0);
   1b858:	80 e0       	ldi	r24, 0x00	; 0
   1b85a:	90 e0       	ldi	r25, 0x00	; 0
   1b85c:	5b c1       	rjmp	.+694    	; 0x1bb14 <lif_tests+0x2cc>

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1b85e:	fb 01       	movw	r30, r22
   1b860:	e2 80       	ldd	r14, Z+2	; 0x02
   1b862:	f3 80       	ldd	r15, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1b864:	e1 14       	cp	r14, r1
   1b866:	f1 04       	cpc	r15, r1
   1b868:	09 f4       	brne	.+2      	; 0x1b86c <lif_tests+0x24>
   1b86a:	52 c1       	rjmp	.+676    	; 0x1bb10 <lif_tests+0x2c8>
   1b86c:	f7 01       	movw	r30, r14
   1b86e:	20 81       	ld	r18, Z
   1b870:	22 23       	and	r18, r18
   1b872:	09 f4       	brne	.+2      	; 0x1b876 <lif_tests+0x2e>
   1b874:	4d c1       	rjmp	.+666    	; 0x1bb10 <lif_tests+0x2c8>
   1b876:	8b 01       	movw	r16, r22
   1b878:	6c 01       	movw	r12, r24
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b87a:	69 e7       	ldi	r22, 0x79	; 121
   1b87c:	76 e1       	ldi	r23, 0x16	; 22
   1b87e:	c7 01       	movw	r24, r14
   1b880:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
   1b884:	89 2b       	or	r24, r25
   1b886:	29 f0       	breq	.+10     	; 0x1b892 <lif_tests+0x4a>
    {
        lif_help(1);
   1b888:	81 e0       	ldi	r24, 0x01	; 1
   1b88a:	90 e0       	ldi	r25, 0x00	; 0
   1b88c:	0e 94 ef bd 	call	0x17bde	; 0x17bde <lif_help>
   1b890:	3f c1       	rjmp	.+638    	; 0x1bb10 <lif_tests+0x2c8>
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b892:	68 e7       	ldi	r22, 0x78	; 120
   1b894:	76 e1       	ldi	r23, 0x16	; 22
   1b896:	c7 01       	movw	r24, r14
   1b898:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
   1b89c:	89 2b       	or	r24, r25
   1b89e:	a1 f7       	brne	.-24     	; 0x1b888 <lif_tests+0x40>
   1b8a0:	6e e7       	ldi	r22, 0x7E	; 126
   1b8a2:	76 e1       	ldi	r23, 0x16	; 22
   1b8a4:	c7 01       	movw	r24, r14
   1b8a6:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
   1b8aa:	89 2b       	or	r24, r25
   1b8ac:	69 f7       	brne	.-38     	; 0x1b888 <lif_tests+0x40>
        return(1);
    }

// Turn one debugging
// in the future we can add tests for specific messages
	debuglevel &= ~0x400;
   1b8ae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b8b2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b8b6:	9b 7f       	andi	r25, 0xFB	; 251
   1b8b8:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1b8bc:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1b8c0:	96 01       	movw	r18, r12
   1b8c2:	42 e0       	ldi	r20, 0x02	; 2
   1b8c4:	50 e0       	ldi	r21, 0x00	; 0
   1b8c6:	61 e8       	ldi	r22, 0x81	; 129
   1b8c8:	76 e1       	ldi	r23, 0x16	; 22
   1b8ca:	c7 01       	movw	r24, r14
   1b8cc:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
   1b8d0:	89 2b       	or	r24, r25
   1b8d2:	79 f0       	breq	.+30     	; 0x1b8f2 <lif_tests+0xaa>
    {
        debuglevel |= 0x400;
   1b8d4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b8d8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b8dc:	94 60       	ori	r25, 0x04	; 4
   1b8de:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1b8e2:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
        ptr = argv[ind++];
   1b8e6:	f8 01       	movw	r30, r16
   1b8e8:	e4 80       	ldd	r14, Z+4	; 0x04
   1b8ea:	f5 80       	ldd	r15, Z+5	; 0x05
   1b8ec:	c3 e0       	ldi	r28, 0x03	; 3
   1b8ee:	d0 e0       	ldi	r29, 0x00	; 0
   1b8f0:	02 c0       	rjmp	.+4      	; 0x1b8f6 <lif_tests+0xae>
    if(argc < 2)
        return (0);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1b8f2:	c2 e0       	ldi	r28, 0x02	; 2
   1b8f4:	d0 e0       	ldi	r29, 0x00	; 0
    {
        debuglevel |= 0x400;
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1b8f6:	5e 01       	movw	r10, r28
   1b8f8:	f3 e0       	ldi	r31, 0x03	; 3
   1b8fa:	af 0e       	add	r10, r31
   1b8fc:	b1 1c       	adc	r11, r1
   1b8fe:	96 01       	movw	r18, r12
   1b900:	a5 01       	movw	r20, r10
   1b902:	64 e8       	ldi	r22, 0x84	; 132
   1b904:	76 e1       	ldi	r23, 0x16	; 22
   1b906:	c7 01       	movw	r24, r14
   1b908:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
   1b90c:	89 2b       	or	r24, r25
   1b90e:	61 f0       	breq	.+24     	; 0x1b928 <lif_tests+0xe0>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b910:	cc 0f       	add	r28, r28
   1b912:	dd 1f       	adc	r29, r29
   1b914:	c0 0f       	add	r28, r16
   1b916:	d1 1f       	adc	r29, r17
   1b918:	4c 81       	ldd	r20, Y+4	; 0x04
   1b91a:	5d 81       	ldd	r21, Y+5	; 0x05
   1b91c:	6a 81       	ldd	r22, Y+2	; 0x02
   1b91e:	7b 81       	ldd	r23, Y+3	; 0x03
   1b920:	88 81       	ld	r24, Y
   1b922:	99 81       	ldd	r25, Y+1	; 0x01
   1b924:	6d dc       	rcall	.-1830   	; 0x1b200 <lif_add_lif_file>
   1b926:	f4 c0       	rjmp	.+488    	; 0x1bb10 <lif_tests+0x2c8>

        return(1);
    }

    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1b928:	96 01       	movw	r18, r12
   1b92a:	a5 01       	movw	r20, r10
   1b92c:	6b e8       	ldi	r22, 0x8B	; 139
   1b92e:	76 e1       	ldi	r23, 0x16	; 22
   1b930:	c7 01       	movw	r24, r14
   1b932:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
   1b936:	89 2b       	or	r24, r25
   1b938:	69 f0       	breq	.+26     	; 0x1b954 <lif_tests+0x10c>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1b93a:	cc 0f       	add	r28, r28
   1b93c:	dd 1f       	adc	r29, r29
   1b93e:	c0 0f       	add	r28, r16
   1b940:	d1 1f       	adc	r29, r17
   1b942:	4c 81       	ldd	r20, Y+4	; 0x04
   1b944:	5d 81       	ldd	r21, Y+5	; 0x05
   1b946:	6a 81       	ldd	r22, Y+2	; 0x02
   1b948:	7b 81       	ldd	r23, Y+3	; 0x03
   1b94a:	88 81       	ld	r24, Y
   1b94c:	99 81       	ldd	r25, Y+1	; 0x01
   1b94e:	0e 94 dd d3 	call	0x1a7ba	; 0x1a7ba <lif_add_ascii_file_as_e010>
   1b952:	de c0       	rjmp	.+444    	; 0x1bb10 <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1b954:	96 01       	movw	r18, r12
   1b956:	a5 01       	movw	r20, r10
   1b958:	6f e8       	ldi	r22, 0x8F	; 143
   1b95a:	76 e1       	ldi	r23, 0x16	; 22
   1b95c:	c7 01       	movw	r24, r14
   1b95e:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
   1b962:	89 2b       	or	r24, r25
   1b964:	09 f4       	brne	.+2      	; 0x1b968 <lif_tests+0x120>
   1b966:	42 c0       	rjmp	.+132    	; 0x1b9ec <lif_tests+0x1a4>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1b968:	ce 01       	movw	r24, r28
   1b96a:	88 0f       	add	r24, r24
   1b96c:	99 1f       	adc	r25, r25
   1b96e:	e8 01       	movw	r28, r16
   1b970:	c8 0f       	add	r28, r24
   1b972:	d9 1f       	adc	r29, r25
   1b974:	c8 80       	ld	r12, Y
   1b976:	d9 80       	ldd	r13, Y+1	; 0x01
        char *label = argv[ind+1];
   1b978:	aa 80       	ldd	r10, Y+2	; 0x02
   1b97a:	bb 80       	ldd	r11, Y+3	; 0x03
        char *model = argv[ind+2];
   1b97c:	0c 80       	ldd	r0, Y+4	; 0x04
   1b97e:	dd 81       	ldd	r29, Y+5	; 0x05
   1b980:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1b982:	6a e9       	ldi	r22, 0x9A	; 154
   1b984:	76 e1       	ldi	r23, 0x16	; 22
   1b986:	ce 01       	movw	r24, r28
   1b988:	0e 94 99 30 	call	0x6132	; 0x6132 <MATCHI_LEN>
   1b98c:	89 2b       	or	r24, r25
   1b98e:	09 f0       	breq	.+2      	; 0x1b992 <lif_tests+0x14a>
            model +=2;
   1b990:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1b992:	40 e0       	ldi	r20, 0x00	; 0
   1b994:	50 e0       	ldi	r21, 0x00	; 0
   1b996:	60 e0       	ldi	r22, 0x00	; 0
   1b998:	70 e0       	ldi	r23, 0x00	; 0
   1b99a:	ce 01       	movw	r24, r28
   1b99c:	0e 94 46 a1 	call	0x1428c	; 0x1428c <hpdir_find_drive>
   1b9a0:	89 2b       	or	r24, r25
   1b9a2:	b9 f0       	breq	.+46     	; 0x1b9d2 <lif_tests+0x18a>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1b9a4:	60 91 a7 21 	lds	r22, 0x21A7	; 0x8021a7 <hpdir+0xac>
   1b9a8:	70 91 a8 21 	lds	r23, 0x21A8	; 0x8021a8 <hpdir+0xad>
   1b9ac:	80 91 a9 21 	lds	r24, 0x21A9	; 0x8021a9 <hpdir+0xae>
   1b9b0:	90 91 aa 21 	lds	r25, 0x21AA	; 0x8021aa <hpdir+0xaf>
   1b9b4:	0e 94 29 a1 	call	0x14252	; 0x14252 <lif_dir_count>
   1b9b8:	9b 01       	movw	r18, r22
   1b9ba:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
            lif_create_image(name, label, dir, sectors);
   1b9bc:	e0 90 a7 21 	lds	r14, 0x21A7	; 0x8021a7 <hpdir+0xac>
   1b9c0:	f0 90 a8 21 	lds	r15, 0x21A8	; 0x8021a8 <hpdir+0xad>
   1b9c4:	00 91 a9 21 	lds	r16, 0x21A9	; 0x8021a9 <hpdir+0xae>
   1b9c8:	10 91 aa 21 	lds	r17, 0x21AA	; 0x8021aa <hpdir+0xaf>
   1b9cc:	b5 01       	movw	r22, r10
   1b9ce:	c6 01       	movw	r24, r12
   1b9d0:	2e c0       	rjmp	.+92     	; 0x1ba2e <lif_tests+0x1e6>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1b9d2:	ed b7       	in	r30, 0x3d	; 61
   1b9d4:	fe b7       	in	r31, 0x3e	; 62
   1b9d6:	d5 83       	std	Z+5, r29	; 0x05
   1b9d8:	c4 83       	std	Z+4, r28	; 0x04
   1b9da:	81 e3       	ldi	r24, 0x31	; 49
   1b9dc:	91 e4       	ldi	r25, 0x41	; 65
   1b9de:	a0 e0       	ldi	r26, 0x00	; 0
   1b9e0:	81 83       	std	Z+1, r24	; 0x01
   1b9e2:	92 83       	std	Z+2, r25	; 0x02
   1b9e4:	a3 83       	std	Z+3, r26	; 0x03
   1b9e6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1b9ea:	92 c0       	rjmp	.+292    	; 0x1bb10 <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1b9ec:	96 01       	movw	r18, r12
   1b9ee:	ae 01       	movw	r20, r28
   1b9f0:	4c 5f       	subi	r20, 0xFC	; 252
   1b9f2:	5f 4f       	sbci	r21, 0xFF	; 255
   1b9f4:	6d e9       	ldi	r22, 0x9D	; 157
   1b9f6:	76 e1       	ldi	r23, 0x16	; 22
   1b9f8:	c7 01       	movw	r24, r14
   1b9fa:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
   1b9fe:	89 2b       	or	r24, r25
   1ba00:	c1 f0       	breq	.+48     	; 0x1ba32 <lif_tests+0x1ea>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1ba02:	cc 0f       	add	r28, r28
   1ba04:	dd 1f       	adc	r29, r29
   1ba06:	c0 0f       	add	r28, r16
   1ba08:	d1 1f       	adc	r29, r17
   1ba0a:	8c 81       	ldd	r24, Y+4	; 0x04
   1ba0c:	9d 81       	ldd	r25, Y+5	; 0x05
   1ba0e:	0e 94 ae 45 	call	0x8b5c	; 0x8b5c <atol>
   1ba12:	4b 01       	movw	r8, r22
   1ba14:	5c 01       	movw	r10, r24
   1ba16:	8e 81       	ldd	r24, Y+6	; 0x06
   1ba18:	9f 81       	ldd	r25, Y+7	; 0x07
   1ba1a:	0e 94 ae 45 	call	0x8b5c	; 0x8b5c <atol>
   1ba1e:	7b 01       	movw	r14, r22
   1ba20:	8c 01       	movw	r16, r24
   1ba22:	6a 81       	ldd	r22, Y+2	; 0x02
   1ba24:	7b 81       	ldd	r23, Y+3	; 0x03
   1ba26:	a5 01       	movw	r20, r10
   1ba28:	94 01       	movw	r18, r8
   1ba2a:	88 81       	ld	r24, Y
   1ba2c:	99 81       	ldd	r25, Y+1	; 0x01
   1ba2e:	85 de       	rcall	.-758    	; 0x1b73a <lif_create_image>
   1ba30:	6f c0       	rjmp	.+222    	; 0x1bb10 <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1ba32:	96 01       	movw	r18, r12
   1ba34:	ae 01       	movw	r20, r28
   1ba36:	4e 5f       	subi	r20, 0xFE	; 254
   1ba38:	5f 4f       	sbci	r21, 0xFF	; 255
   1ba3a:	64 ea       	ldi	r22, 0xA4	; 164
   1ba3c:	76 e1       	ldi	r23, 0x16	; 22
   1ba3e:	c7 01       	movw	r24, r14
   1ba40:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
   1ba44:	89 2b       	or	r24, r25
   1ba46:	51 f0       	breq	.+20     	; 0x1ba5c <lif_tests+0x214>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1ba48:	cc 0f       	add	r28, r28
   1ba4a:	dd 1f       	adc	r29, r29
   1ba4c:	c0 0f       	add	r28, r16
   1ba4e:	d1 1f       	adc	r29, r17
   1ba50:	6a 81       	ldd	r22, Y+2	; 0x02
   1ba52:	7b 81       	ldd	r23, Y+3	; 0x03
   1ba54:	88 81       	ld	r24, Y
   1ba56:	99 81       	ldd	r25, Y+1	; 0x01
   1ba58:	5c dd       	rcall	.-1352   	; 0x1b512 <lif_del_file>
   1ba5a:	5a c0       	rjmp	.+180    	; 0x1bb10 <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1ba5c:	96 01       	movw	r18, r12
   1ba5e:	ae 01       	movw	r20, r28
   1ba60:	4f 5f       	subi	r20, 0xFF	; 255
   1ba62:	5f 4f       	sbci	r21, 0xFF	; 255
   1ba64:	68 ed       	ldi	r22, 0xD8	; 216
   1ba66:	7b e0       	ldi	r23, 0x0B	; 11
   1ba68:	c7 01       	movw	r24, r14
   1ba6a:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
   1ba6e:	89 2b       	or	r24, r25
   1ba70:	49 f0       	breq	.+18     	; 0x1ba84 <lif_tests+0x23c>
    {
        lif_dir(argv[ind]);
   1ba72:	cc 0f       	add	r28, r28
   1ba74:	dd 1f       	adc	r29, r29
   1ba76:	c0 0f       	add	r28, r16
   1ba78:	d1 1f       	adc	r29, r17
   1ba7a:	88 81       	ld	r24, Y
   1ba7c:	99 81       	ldd	r25, Y+1	; 0x01
   1ba7e:	0e 94 87 cf 	call	0x19f0e	; 0x19f0e <lif_dir>
   1ba82:	46 c0       	rjmp	.+140    	; 0x1bb10 <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1ba84:	96 01       	movw	r18, r12
   1ba86:	a5 01       	movw	r20, r10
   1ba88:	68 ea       	ldi	r22, 0xA8	; 168
   1ba8a:	76 e1       	ldi	r23, 0x16	; 22
   1ba8c:	c7 01       	movw	r24, r14
   1ba8e:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
   1ba92:	89 2b       	or	r24, r25
   1ba94:	71 f0       	breq	.+28     	; 0x1bab2 <lif_tests+0x26a>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1ba96:	ce 01       	movw	r24, r28
   1ba98:	88 0f       	add	r24, r24
   1ba9a:	99 1f       	adc	r25, r25
   1ba9c:	e8 01       	movw	r28, r16
   1ba9e:	c8 0f       	add	r28, r24
   1baa0:	d9 1f       	adc	r29, r25
   1baa2:	4c 81       	ldd	r20, Y+4	; 0x04
   1baa4:	5d 81       	ldd	r21, Y+5	; 0x05
   1baa6:	6a 81       	ldd	r22, Y+2	; 0x02
   1baa8:	7b 81       	ldd	r23, Y+3	; 0x03
   1baaa:	88 81       	ld	r24, Y
   1baac:	99 81       	ldd	r25, Y+1	; 0x01
   1baae:	70 da       	rcall	.-2848   	; 0x1af90 <lif_extract_lif_as_lif>
   1bab0:	2f c0       	rjmp	.+94     	; 0x1bb10 <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1bab2:	96 01       	movw	r18, r12
   1bab4:	a5 01       	movw	r20, r10
   1bab6:	63 eb       	ldi	r22, 0xB3	; 179
   1bab8:	76 e1       	ldi	r23, 0x16	; 22
   1baba:	c7 01       	movw	r24, r14
   1babc:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
   1bac0:	89 2b       	or	r24, r25
   1bac2:	79 f0       	breq	.+30     	; 0x1bae2 <lif_tests+0x29a>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1bac4:	ce 01       	movw	r24, r28
   1bac6:	88 0f       	add	r24, r24
   1bac8:	99 1f       	adc	r25, r25
   1baca:	e8 01       	movw	r28, r16
   1bacc:	c8 0f       	add	r28, r24
   1bace:	d9 1f       	adc	r29, r25
   1bad0:	4c 81       	ldd	r20, Y+4	; 0x04
   1bad2:	5d 81       	ldd	r21, Y+5	; 0x05
   1bad4:	6a 81       	ldd	r22, Y+2	; 0x02
   1bad6:	7b 81       	ldd	r23, Y+3	; 0x03
   1bad8:	88 81       	ld	r24, Y
   1bada:	99 81       	ldd	r25, Y+1	; 0x01
   1badc:	0e 94 19 d5 	call	0x1aa32	; 0x1aa32 <lif_extract_e010_as_ascii>
   1bae0:	17 c0       	rjmp	.+46     	; 0x1bb10 <lif_tests+0x2c8>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1bae2:	96 01       	movw	r18, r12
   1bae4:	a5 01       	movw	r20, r10
   1bae6:	65 ee       	ldi	r22, 0xE5	; 229
   1bae8:	7b e0       	ldi	r23, 0x0B	; 11
   1baea:	c7 01       	movw	r24, r14
   1baec:	0e 94 6f 30 	call	0x60de	; 0x60de <MATCHARGS>
   1baf0:	89 2b       	or	r24, r25
   1baf2:	09 f4       	brne	.+2      	; 0x1baf6 <lif_tests+0x2ae>
   1baf4:	b1 ce       	rjmp	.-670    	; 0x1b858 <lif_tests+0x10>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1baf6:	ce 01       	movw	r24, r28
   1baf8:	88 0f       	add	r24, r24
   1bafa:	99 1f       	adc	r25, r25
   1bafc:	e8 01       	movw	r28, r16
   1bafe:	c8 0f       	add	r28, r24
   1bb00:	d9 1f       	adc	r29, r25
   1bb02:	4c 81       	ldd	r20, Y+4	; 0x04
   1bb04:	5d 81       	ldd	r21, Y+5	; 0x05
   1bb06:	6a 81       	ldd	r22, Y+2	; 0x02
   1bb08:	7b 81       	ldd	r23, Y+3	; 0x03
   1bb0a:	88 81       	ld	r24, Y
   1bb0c:	99 81       	ldd	r25, Y+1	; 0x01
   1bb0e:	97 dd       	rcall	.-1234   	; 0x1b63e <lif_rename_file>

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);
   1bb10:	81 e0       	ldi	r24, 0x01	; 1
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1bb12:	90 e0       	ldi	r25, 0x00	; 0
   1bb14:	cd b7       	in	r28, 0x3d	; 61
   1bb16:	de b7       	in	r29, 0x3e	; 62
   1bb18:	25 96       	adiw	r28, 0x05	; 5
   1bb1a:	ec e0       	ldi	r30, 0x0C	; 12
   1bb1c:	ef c5       	rjmp	.+3038   	; 0x1c6fc <__epilogue_restores__+0xc>

0001bb1e <lcd_task>:
static int16_t lcd_display_time = 0;

///@brief LCD timer function called at 1000HZ
void lcd_task()
{
	++lcd_display_time;
   1bb1e:	80 91 ed 19 	lds	r24, 0x19ED	; 0x8019ed <lcd_display_time>
   1bb22:	90 91 ee 19 	lds	r25, 0x19EE	; 0x8019ee <lcd_display_time+0x1>
   1bb26:	01 96       	adiw	r24, 0x01	; 1
   1bb28:	90 93 ee 19 	sts	0x19EE, r25	; 0x8019ee <lcd_display_time+0x1>
   1bb2c:	80 93 ed 19 	sts	0x19ED, r24	; 0x8019ed <lcd_display_time>
   1bb30:	08 95       	ret

0001bb32 <copyright>:
int8_t debug_input = 0;

///@brief Display Copyright
///@return void
void copyright()
{
   1bb32:	00 d0       	rcall	.+0      	; 0x1bb34 <copyright+0x2>
   1bb34:	00 d0       	rcall	.+0      	; 0x1bb36 <copyright+0x4>
   1bb36:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1bb38:	8d eb       	ldi	r24, 0xBD	; 189
   1bb3a:	97 e4       	ldi	r25, 0x47	; 71
   1bb3c:	a0 e0       	ldi	r26, 0x00	; 0
   1bb3e:	ed b7       	in	r30, 0x3d	; 61
   1bb40:	fe b7       	in	r31, 0x3e	; 62
   1bb42:	81 83       	std	Z+1, r24	; 0x01
   1bb44:	92 83       	std	Z+2, r25	; 0x02
   1bb46:	a3 83       	std	Z+3, r26	; 0x03
   1bb48:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1bb4c:	8e e9       	ldi	r24, 0x9E	; 158
   1bb4e:	97 e4       	ldi	r25, 0x47	; 71
   1bb50:	a0 e0       	ldi	r26, 0x00	; 0
   1bb52:	ed b7       	in	r30, 0x3d	; 61
   1bb54:	fe b7       	in	r31, 0x3e	; 62
   1bb56:	81 83       	std	Z+1, r24	; 0x01
   1bb58:	92 83       	std	Z+2, r25	; 0x02
   1bb5a:	a3 83       	std	Z+3, r26	; 0x03
   1bb5c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1bb60:	81 e8       	ldi	r24, 0x81	; 129
   1bb62:	97 e4       	ldi	r25, 0x47	; 71
   1bb64:	a0 e0       	ldi	r26, 0x00	; 0
   1bb66:	ed b7       	in	r30, 0x3d	; 61
   1bb68:	fe b7       	in	r31, 0x3e	; 62
   1bb6a:	81 83       	std	Z+1, r24	; 0x01
   1bb6c:	92 83       	std	Z+2, r25	; 0x02
   1bb6e:	a3 83       	std	Z+3, r26	; 0x03
   1bb70:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf(" GNU version 3\n");
   1bb74:	81 e7       	ldi	r24, 0x71	; 113
   1bb76:	97 e4       	ldi	r25, 0x47	; 71
   1bb78:	a0 e0       	ldi	r26, 0x00	; 0
   1bb7a:	ed b7       	in	r30, 0x3d	; 61
   1bb7c:	fe b7       	in	r31, 0x3e	; 62
   1bb7e:	81 83       	std	Z+1, r24	; 0x01
   1bb80:	92 83       	std	Z+2, r25	; 0x02
   1bb82:	a3 83       	std	Z+3, r26	; 0x03
   1bb84:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1bb88:	8a e4       	ldi	r24, 0x4A	; 74
   1bb8a:	97 e4       	ldi	r25, 0x47	; 71
   1bb8c:	a0 e0       	ldi	r26, 0x00	; 0
   1bb8e:	ed b7       	in	r30, 0x3d	; 61
   1bb90:	fe b7       	in	r31, 0x3e	; 62
   1bb92:	81 83       	std	Z+1, r24	; 0x01
   1bb94:	92 83       	std	Z+2, r25	; 0x02
   1bb96:	a3 83       	std	Z+3, r26	; 0x03
   1bb98:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1bb9c:	8b eb       	ldi	r24, 0xBB	; 187
   1bb9e:	96 e1       	ldi	r25, 0x16	; 22
   1bba0:	ed b7       	in	r30, 0x3d	; 61
   1bba2:	fe b7       	in	r31, 0x3e	; 62
   1bba4:	95 83       	std	Z+5, r25	; 0x05
   1bba6:	84 83       	std	Z+4, r24	; 0x04
   1bba8:	80 e3       	ldi	r24, 0x30	; 48
   1bbaa:	97 e4       	ldi	r25, 0x47	; 71
   1bbac:	a0 e0       	ldi	r26, 0x00	; 0
   1bbae:	81 83       	std	Z+1, r24	; 0x01
   1bbb0:	92 83       	std	Z+2, r25	; 0x02
   1bbb2:	a3 83       	std	Z+3, r26	; 0x03
   1bbb4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1bbb8:	8f ed       	ldi	r24, 0xDF	; 223
   1bbba:	96 e1       	ldi	r25, 0x16	; 22
   1bbbc:	ed b7       	in	r30, 0x3d	; 61
   1bbbe:	fe b7       	in	r31, 0x3e	; 62
   1bbc0:	95 83       	std	Z+5, r25	; 0x05
   1bbc2:	84 83       	std	Z+4, r24	; 0x04
   1bbc4:	86 e1       	ldi	r24, 0x16	; 22
   1bbc6:	97 e4       	ldi	r25, 0x47	; 71
   1bbc8:	a0 e0       	ldi	r26, 0x00	; 0
   1bbca:	81 83       	std	Z+1, r24	; 0x01
   1bbcc:	92 83       	std	Z+2, r25	; 0x02
   1bbce:	a3 83       	std	Z+3, r26	; 0x03
   1bbd0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("\n");
   1bbd4:	84 e1       	ldi	r24, 0x14	; 20
   1bbd6:	97 e4       	ldi	r25, 0x47	; 71
   1bbd8:	a0 e0       	ldi	r26, 0x00	; 0
   1bbda:	ed b7       	in	r30, 0x3d	; 61
   1bbdc:	fe b7       	in	r31, 0x3e	; 62
   1bbde:	81 83       	std	Z+1, r24	; 0x01
   1bbe0:	92 83       	std	Z+2, r25	; 0x02
   1bbe2:	a3 83       	std	Z+3, r26	; 0x03
   1bbe4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
}
   1bbe8:	0f 90       	pop	r0
   1bbea:	0f 90       	pop	r0
   1bbec:	0f 90       	pop	r0
   1bbee:	0f 90       	pop	r0
   1bbf0:	0f 90       	pop	r0
   1bbf2:	08 95       	ret

0001bbf4 <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1bbf4:	a1 e1       	ldi	r26, 0x11	; 17
   1bbf6:	b0 e0       	ldi	r27, 0x00	; 0
   1bbf8:	ef ef       	ldi	r30, 0xFF	; 255
   1bbfa:	fd ed       	ldi	r31, 0xDD	; 221
   1bbfc:	69 c5       	rjmp	.+2770   	; 0x1c6d0 <__prologue_saves__+0x18>
   1bbfe:	ec 01       	movw	r28, r24
   1bc00:	7b 01       	movw	r14, r22
   1bc02:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1bc04:	60 e0       	ldi	r22, 0x00	; 0
   1bc06:	70 e0       	ldi	r23, 0x00	; 0
   1bc08:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <normalize>
    memset(buf,0,max);
   1bc0c:	a8 01       	movw	r20, r16
   1bc0e:	60 e0       	ldi	r22, 0x00	; 0
   1bc10:	70 e0       	ldi	r23, 0x00	; 0
   1bc12:	c7 01       	movw	r24, r14
   1bc14:	0e 94 54 e7 	call	0x1cea8	; 0x1cea8 <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1bc18:	88 85       	ldd	r24, Y+8	; 0x08
   1bc1a:	99 85       	ldd	r25, Y+9	; 0x09
   1bc1c:	0e 94 92 34 	call	0x6924	; 0x6924 <tm_mon_to_ascii>
   1bc20:	28 81       	ld	r18, Y
   1bc22:	39 81       	ldd	r19, Y+1	; 0x01
   1bc24:	ed b7       	in	r30, 0x3d	; 61
   1bc26:	fe b7       	in	r31, 0x3e	; 62
   1bc28:	31 8b       	std	Z+17, r19	; 0x11
   1bc2a:	20 8b       	std	Z+16, r18	; 0x10
   1bc2c:	2a 81       	ldd	r18, Y+2	; 0x02
   1bc2e:	3b 81       	ldd	r19, Y+3	; 0x03
   1bc30:	37 87       	std	Z+15, r19	; 0x0f
   1bc32:	26 87       	std	Z+14, r18	; 0x0e
   1bc34:	2c 81       	ldd	r18, Y+4	; 0x04
   1bc36:	3d 81       	ldd	r19, Y+5	; 0x05
   1bc38:	35 87       	std	Z+13, r19	; 0x0d
   1bc3a:	24 87       	std	Z+12, r18	; 0x0c
   1bc3c:	2e 81       	ldd	r18, Y+6	; 0x06
   1bc3e:	3f 81       	ldd	r19, Y+7	; 0x07
   1bc40:	33 87       	std	Z+11, r19	; 0x0b
   1bc42:	22 87       	std	Z+10, r18	; 0x0a
   1bc44:	91 87       	std	Z+9, r25	; 0x09
   1bc46:	80 87       	std	Z+8, r24	; 0x08
   1bc48:	8e ef       	ldi	r24, 0xFE	; 254
   1bc4a:	96 e4       	ldi	r25, 0x46	; 70
   1bc4c:	a0 e0       	ldi	r26, 0x00	; 0
   1bc4e:	85 83       	std	Z+5, r24	; 0x05
   1bc50:	96 83       	std	Z+6, r25	; 0x06
   1bc52:	a7 83       	std	Z+7, r26	; 0x07
   1bc54:	01 50       	subi	r16, 0x01	; 1
   1bc56:	11 09       	sbc	r17, r1
   1bc58:	14 83       	std	Z+4, r17	; 0x04
   1bc5a:	03 83       	std	Z+3, r16	; 0x03
   1bc5c:	f2 82       	std	Z+2, r15	; 0x02
   1bc5e:	e1 82       	std	Z+1, r14	; 0x01
   1bc60:	0e 94 e6 44 	call	0x89cc	; 0x89cc <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1bc64:	c7 01       	movw	r24, r14
   1bc66:	cd b7       	in	r28, 0x3d	; 61
   1bc68:	de b7       	in	r29, 0x3e	; 62
   1bc6a:	61 96       	adiw	r28, 0x11	; 17
   1bc6c:	e6 e0       	ldi	r30, 0x06	; 6
   1bc6e:	4c c5       	rjmp	.+2712   	; 0x1c708 <__epilogue_restores__+0x18>

0001bc70 <lcd_backlight>:

///@brief lcd_backlight LCD Backlight settings
/// @param[in] rgb: hex value 0xRRGGBB, RR,GG,BB values are 0 to 255
uint8_t  _backlight[5] = { 0x7c, '+', 0x80, 0x80, 0x80 };	/* Backlight half bright */
uint8_t lcd_backlight(uint32_t rgb)
{
   1bc70:	cf 93       	push	r28
   1bc72:	00 d0       	rcall	.+0      	; 0x1bc74 <lcd_backlight+0x4>
   1bc74:	1f 92       	push	r1

	_backlight[2] = 0xff & (rgb >> 16);
   1bc76:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_backlight+0x2>
	_backlight[3] = 0xff & (rgb >> 8);
   1bc7a:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <_backlight+0x3>
	_backlight[4] = 0xff & (rgb );
   1bc7e:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <_backlight+0x4>

	if(! i2c_fn(0x72, TW_WRITE, _backlight, sizeof(_backlight)) )
   1bc82:	25 e0       	ldi	r18, 0x05	; 5
   1bc84:	40 ef       	ldi	r20, 0xF0	; 240
   1bc86:	52 e0       	ldi	r21, 0x02	; 2
   1bc88:	60 e0       	ldi	r22, 0x00	; 0
   1bc8a:	82 e7       	ldi	r24, 0x72	; 114
   1bc8c:	0e 94 25 2b 	call	0x564a	; 0x564a <i2c_fn>
   1bc90:	c8 2f       	mov	r28, r24
   1bc92:	81 11       	cpse	r24, r1
   1bc94:	0d c0       	rjmp	.+26     	; 0x1bcb0 <lcd_backlight+0x40>
	{
		i2c_display_task_errors();
   1bc96:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1bc9a:	84 ee       	ldi	r24, 0xE4	; 228
   1bc9c:	96 e4       	ldi	r25, 0x46	; 70
   1bc9e:	a0 e0       	ldi	r26, 0x00	; 0
   1bca0:	ed b7       	in	r30, 0x3d	; 61
   1bca2:	fe b7       	in	r31, 0x3e	; 62
   1bca4:	81 83       	std	Z+1, r24	; 0x01
   1bca6:	92 83       	std	Z+2, r25	; 0x02
   1bca8:	a3 83       	std	Z+3, r26	; 0x03
   1bcaa:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1bcae:	01 c0       	rjmp	.+2      	; 0x1bcb2 <lcd_backlight+0x42>
		return(0);
	}
	return(1);
   1bcb0:	c1 e0       	ldi	r28, 0x01	; 1
}
   1bcb2:	8c 2f       	mov	r24, r28
   1bcb4:	0f 90       	pop	r0
   1bcb6:	0f 90       	pop	r0
   1bcb8:	0f 90       	pop	r0
   1bcba:	cf 91       	pop	r28
   1bcbc:	08 95       	ret

0001bcbe <lcd_setup>:
///@brief LCD setup code
/// For a SparkFun SERLCD 2x16 display
/// Initializes the I2C deiplay update task structure 
/// Passes the structures to the interrupt handler
void lcd_setup()
{
   1bcbe:	cf 93       	push	r28
   1bcc0:	ad b7       	in	r26, 0x3d	; 61
   1bcc2:	be b7       	in	r27, 0x3e	; 62
   1bcc4:	17 97       	sbiw	r26, 0x07	; 7
   1bcc6:	0f b6       	in	r0, 0x3f	; 63
   1bcc8:	f8 94       	cli
   1bcca:	be bf       	out	0x3e, r27	; 62
   1bccc:	0f be       	out	0x3f, r0	; 63
   1bcce:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1bcd0:	cf b7       	in	r28, 0x3f	; 63

    printf("I2C LCD initialization start\n");
   1bcd2:	86 ec       	ldi	r24, 0xC6	; 198
   1bcd4:	96 e4       	ldi	r25, 0x46	; 70
   1bcd6:	a0 e0       	ldi	r26, 0x00	; 0
   1bcd8:	ed b7       	in	r30, 0x3d	; 61
   1bcda:	fe b7       	in	r31, 0x3e	; 62
   1bcdc:	81 83       	std	Z+1, r24	; 0x01
   1bcde:	92 83       	std	Z+2, r25	; 0x02
   1bce0:	a3 83       	std	Z+3, r26	; 0x03
   1bce2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1bce6:	61 e0       	ldi	r22, 0x01	; 1
   1bce8:	70 e0       	ldi	r23, 0x00	; 0
   1bcea:	8f e8       	ldi	r24, 0x8F	; 143
   1bcec:	9d ed       	ldi	r25, 0xDD	; 221
   1bcee:	0e 94 bc 32 	call	0x6578	; 0x6578 <set_timers>
   1bcf2:	01 96       	adiw	r24, 0x01	; 1
   1bcf4:	51 f4       	brne	.+20     	; 0x1bd0a <lcd_setup+0x4c>
        printf("lcd_task init failed\n");
   1bcf6:	80 eb       	ldi	r24, 0xB0	; 176
   1bcf8:	96 e4       	ldi	r25, 0x46	; 70
   1bcfa:	a0 e0       	ldi	r26, 0x00	; 0
   1bcfc:	ed b7       	in	r30, 0x3d	; 61
   1bcfe:	fe b7       	in	r31, 0x3e	; 62
   1bd00:	81 83       	std	Z+1, r24	; 0x01
   1bd02:	92 83       	std	Z+2, r25	; 0x02
   1bd04:	a3 83       	std	Z+3, r26	; 0x03
   1bd06:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

	i2c_init(100000);
   1bd0a:	60 ea       	ldi	r22, 0xA0	; 160
   1bd0c:	76 e8       	ldi	r23, 0x86	; 134
   1bd0e:	81 e0       	ldi	r24, 0x01	; 1
   1bd10:	90 e0       	ldi	r25, 0x00	; 0
   1bd12:	0e 94 2c 2a 	call	0x5458	; 0x5458 <i2c_init>

	i2c_task_init();
   1bd16:	0e 94 ed 29 	call	0x53da	; 0x53da <i2c_task_init>

	cli();
   1bd1a:	f8 94       	cli

	// Default startup message
    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1bd1c:	83 e0       	ldi	r24, 0x03	; 3
   1bd1e:	97 e1       	ldi	r25, 0x17	; 23
   1bd20:	ed b7       	in	r30, 0x3d	; 61
   1bd22:	fe b7       	in	r31, 0x3e	; 62
   1bd24:	97 83       	std	Z+7, r25	; 0x07
   1bd26:	86 83       	std	Z+6, r24	; 0x06
   1bd28:	8a ea       	ldi	r24, 0xAA	; 170
   1bd2a:	96 e4       	ldi	r25, 0x46	; 70
   1bd2c:	a0 e0       	ldi	r26, 0x00	; 0
   1bd2e:	83 83       	std	Z+3, r24	; 0x03
   1bd30:	94 83       	std	Z+4, r25	; 0x04
   1bd32:	a5 83       	std	Z+5, r26	; 0x05
   1bd34:	8c e0       	ldi	r24, 0x0C	; 12
   1bd36:	93 e0       	ldi	r25, 0x03	; 3
   1bd38:	92 83       	std	Z+2, r25	; 0x02
   1bd3a:	81 83       	std	Z+1, r24	; 0x01
   1bd3c:	0e 94 fa 44 	call	0x89f4	; 0x89f4 <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1bd40:	8f e0       	ldi	r24, 0x0F	; 15
   1bd42:	97 e1       	ldi	r25, 0x17	; 23
   1bd44:	ed b7       	in	r30, 0x3d	; 61
   1bd46:	fe b7       	in	r31, 0x3e	; 62
   1bd48:	97 83       	std	Z+7, r25	; 0x07
   1bd4a:	86 83       	std	Z+6, r24	; 0x06
   1bd4c:	84 ea       	ldi	r24, 0xA4	; 164
   1bd4e:	96 e4       	ldi	r25, 0x46	; 70
   1bd50:	a0 e0       	ldi	r26, 0x00	; 0
   1bd52:	83 83       	std	Z+3, r24	; 0x03
   1bd54:	94 83       	std	Z+4, r25	; 0x04
   1bd56:	a5 83       	std	Z+5, r26	; 0x05
   1bd58:	85 ef       	ldi	r24, 0xF5	; 245
   1bd5a:	92 e0       	ldi	r25, 0x02	; 2
   1bd5c:	92 83       	std	Z+2, r25	; 0x02
   1bd5e:	81 83       	std	Z+1, r24	; 0x01
   1bd60:	0e 94 fa 44 	call	0x89f4	; 0x89f4 <sprintf_P>

	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd1, sizeof(_cmd1));
   1bd64:	22 e0       	ldi	r18, 0x02	; 2
   1bd66:	41 e2       	ldi	r20, 0x21	; 33
   1bd68:	53 e0       	ldi	r21, 0x03	; 3
   1bd6a:	60 e0       	ldi	r22, 0x00	; 0
   1bd6c:	82 e7       	ldi	r24, 0x72	; 114
   1bd6e:	0e 94 02 2a 	call	0x5404	; 0x5404 <i2c_task_op_add>
   1bd72:	90 93 5b 17 	sts	0x175B, r25	; 0x80175b <i2c_task_op+0x1>
   1bd76:	80 93 5a 17 	sts	0x175A, r24	; 0x80175a <i2c_task_op>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line1, 16);
   1bd7a:	20 e1       	ldi	r18, 0x10	; 16
   1bd7c:	4c e0       	ldi	r20, 0x0C	; 12
   1bd7e:	53 e0       	ldi	r21, 0x03	; 3
   1bd80:	60 e0       	ldi	r22, 0x00	; 0
   1bd82:	82 e7       	ldi	r24, 0x72	; 114
   1bd84:	0e 94 02 2a 	call	0x5404	; 0x5404 <i2c_task_op_add>
   1bd88:	90 93 5d 17 	sts	0x175D, r25	; 0x80175d <i2c_task_op+0x3>
   1bd8c:	80 93 5c 17 	sts	0x175C, r24	; 0x80175c <i2c_task_op+0x2>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd2, sizeof(_cmd2));
   1bd90:	22 e0       	ldi	r18, 0x02	; 2
   1bd92:	4a e0       	ldi	r20, 0x0A	; 10
   1bd94:	53 e0       	ldi	r21, 0x03	; 3
   1bd96:	60 e0       	ldi	r22, 0x00	; 0
   1bd98:	82 e7       	ldi	r24, 0x72	; 114
   1bd9a:	0e 94 02 2a 	call	0x5404	; 0x5404 <i2c_task_op_add>
   1bd9e:	90 93 5f 17 	sts	0x175F, r25	; 0x80175f <i2c_task_op+0x5>
   1bda2:	80 93 5e 17 	sts	0x175E, r24	; 0x80175e <i2c_task_op+0x4>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line2, 16);
   1bda6:	20 e1       	ldi	r18, 0x10	; 16
   1bda8:	45 ef       	ldi	r20, 0xF5	; 245
   1bdaa:	52 e0       	ldi	r21, 0x02	; 2
   1bdac:	60 e0       	ldi	r22, 0x00	; 0
   1bdae:	82 e7       	ldi	r24, 0x72	; 114
   1bdb0:	0e 94 02 2a 	call	0x5404	; 0x5404 <i2c_task_op_add>
   1bdb4:	90 93 61 17 	sts	0x1761, r25	; 0x801761 <i2c_task_op+0x7>
   1bdb8:	80 93 60 17 	sts	0x1760, r24	; 0x801760 <i2c_task_op+0x6>

	SREG = sreg;
   1bdbc:	cf bf       	out	0x3f, r28	; 63

    i2c_task_run();
   1bdbe:	0e 94 c2 2a 	call	0x5584	; 0x5584 <i2c_task_run>
	// wait long enough for us to see the startup message
    delayms(1000);
   1bdc2:	68 ee       	ldi	r22, 0xE8	; 232
   1bdc4:	73 e0       	ldi	r23, 0x03	; 3
   1bdc6:	80 e0       	ldi	r24, 0x00	; 0
   1bdc8:	90 e0       	ldi	r25, 0x00	; 0
   1bdca:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <delayms>
	
	// Verify the task finished - it normally takes < 30mS
    if(!i2c_task_done())
   1bdce:	0e 94 a3 2a 	call	0x5546	; 0x5546 <i2c_task_done>
   1bdd2:	81 11       	cpse	r24, r1
   1bdd4:	0c c0       	rjmp	.+24     	; 0x1bdee <lcd_setup+0x130>
	{
		i2c_display_task_errors();
   1bdd6:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1bdda:	8a e8       	ldi	r24, 0x8A	; 138
   1bddc:	96 e4       	ldi	r25, 0x46	; 70
   1bdde:	a0 e0       	ldi	r26, 0x00	; 0
   1bde0:	ed b7       	in	r30, 0x3d	; 61
   1bde2:	fe b7       	in	r31, 0x3e	; 62
   1bde4:	81 83       	std	Z+1, r24	; 0x01
   1bde6:	92 83       	std	Z+2, r25	; 0x02
   1bde8:	a3 83       	std	Z+3, r26	; 0x03
   1bdea:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
	}

    sep();
   1bdee:	0e 94 1d 30 	call	0x603a	; 0x603a <sep>
}
   1bdf2:	ad b7       	in	r26, 0x3d	; 61
   1bdf4:	be b7       	in	r27, 0x3e	; 62
   1bdf6:	17 96       	adiw	r26, 0x07	; 7
   1bdf8:	0f b6       	in	r0, 0x3f	; 63
   1bdfa:	f8 94       	cli
   1bdfc:	be bf       	out	0x3e, r27	; 62
   1bdfe:	0f be       	out	0x3f, r0	; 63
   1be00:	ad bf       	out	0x3d, r26	; 61
   1be02:	cf 91       	pop	r28
   1be04:	08 95       	ret

0001be06 <i2c_lcd_task>:


///@brief Update the LCD wile the system is running
/// Display SD card fault status and the current time
void i2c_lcd_task()
{
   1be06:	af e2       	ldi	r26, 0x2F	; 47
   1be08:	b0 e0       	ldi	r27, 0x00	; 0
   1be0a:	e8 e0       	ldi	r30, 0x08	; 8
   1be0c:	ff ed       	ldi	r31, 0xDF	; 223
   1be0e:	63 c4       	rjmp	.+2246   	; 0x1c6d6 <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1be10:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1be12:	f8 94       	cli
	if(!mmc_ins_status())
   1be14:	0e 94 2c 6e 	call	0xdc58	; 0xdc58 <mmc_ins_status>
   1be18:	89 2b       	or	r24, r25
   1be1a:	49 f4       	brne	.+18     	; 0x1be2e <i2c_lcd_task+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1be1c:	8c e1       	ldi	r24, 0x1C	; 28
   1be1e:	97 e1       	ldi	r25, 0x17	; 23
   1be20:	ed b7       	in	r30, 0x3d	; 61
   1be22:	fe b7       	in	r31, 0x3e	; 62
   1be24:	97 83       	std	Z+7, r25	; 0x07
   1be26:	86 83       	std	Z+6, r24	; 0x06
   1be28:	84 e8       	ldi	r24, 0x84	; 132
   1be2a:	96 e4       	ldi	r25, 0x46	; 70
   1be2c:	17 c0       	rjmp	.+46     	; 0x1be5c <i2c_lcd_task+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1be2e:	be 01       	movw	r22, r28
   1be30:	68 5d       	subi	r22, 0xD8	; 216
   1be32:	7f 4f       	sbci	r23, 0xFF	; 255
   1be34:	80 e0       	ldi	r24, 0x00	; 0
   1be36:	90 e0       	ldi	r25, 0x00	; 0
   1be38:	0e 94 cc 31 	call	0x6398	; 0x6398 <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1be3c:	ce 01       	movw	r24, r28
   1be3e:	88 96       	adiw	r24, 0x28	; 40
   1be40:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <gmtime>
   1be44:	4f e1       	ldi	r20, 0x1F	; 31
   1be46:	50 e0       	ldi	r21, 0x00	; 0
   1be48:	be 01       	movw	r22, r28
   1be4a:	68 5f       	subi	r22, 0xF8	; 248
   1be4c:	7f 4f       	sbci	r23, 0xFF	; 255
   1be4e:	d2 de       	rcall	.-604    	; 0x1bbf4 <lcd_time>
   1be50:	ed b7       	in	r30, 0x3d	; 61
   1be52:	fe b7       	in	r31, 0x3e	; 62
   1be54:	97 83       	std	Z+7, r25	; 0x07
   1be56:	86 83       	std	Z+6, r24	; 0x06
   1be58:	8e e7       	ldi	r24, 0x7E	; 126
   1be5a:	96 e4       	ldi	r25, 0x46	; 70
   1be5c:	a0 e0       	ldi	r26, 0x00	; 0
   1be5e:	83 83       	std	Z+3, r24	; 0x03
   1be60:	94 83       	std	Z+4, r25	; 0x04
   1be62:	a5 83       	std	Z+5, r26	; 0x05
   1be64:	85 ef       	ldi	r24, 0xF5	; 245
   1be66:	92 e0       	ldi	r25, 0x02	; 2
   1be68:	92 83       	std	Z+2, r25	; 0x02
   1be6a:	81 83       	std	Z+1, r24	; 0x01
   1be6c:	0e 94 fa 44 	call	0x89f4	; 0x89f4 <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1be70:	1f bf       	out	0x3f, r17	; 63

    i2c_task_run();
   1be72:	0e 94 c2 2a 	call	0x5584	; 0x5584 <i2c_task_run>
}
   1be76:	af 96       	adiw	r28, 0x2f	; 47
   1be78:	e3 e0       	ldi	r30, 0x03	; 3
   1be7a:	49 c4       	rjmp	.+2194   	; 0x1c70e <__epilogue_restores__+0x1e>

0001be7c <gpib_user_task>:
///@brief GPIB callback from gpib_read_byte()
/// This function gets called evry time trough the read loop
/// This task run in the forground - is not an interrupt task
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1be7c:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1be7e:	f8 94       	cli
	if(lcd_display_time > 100) // increments at 1000HZ
   1be80:	20 91 ed 19 	lds	r18, 0x19ED	; 0x8019ed <lcd_display_time>
   1be84:	30 91 ee 19 	lds	r19, 0x19EE	; 0x8019ee <lcd_display_time+0x1>
   1be88:	25 36       	cpi	r18, 0x65	; 101
   1be8a:	31 05       	cpc	r19, r1
   1be8c:	3c f0       	brlt	.+14     	; 0x1be9c <gpib_user_task+0x20>
	{
		lcd_display_time = 0;
   1be8e:	10 92 ee 19 	sts	0x19EE, r1	; 0x8019ee <lcd_display_time+0x1>
   1be92:	10 92 ed 19 	sts	0x19ED, r1	; 0x8019ed <lcd_display_time>
		SREG = sreg;
   1be96:	8f bf       	out	0x3f, r24	; 63
		i2c_lcd_task();
   1be98:	b6 cf       	rjmp	.-148    	; 0x1be06 <i2c_lcd_task>
		return;
   1be9a:	08 95       	ret
	}
	SREG = sreg;
   1be9c:	8f bf       	out	0x3f, r24	; 63
   1be9e:	08 95       	ret

0001bea0 <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1bea0:	00 d0       	rcall	.+0      	; 0x1bea2 <help+0x2>
   1bea2:	1f 92       	push	r1

    copyright();
   1bea4:	46 de       	rcall	.-884    	; 0x1bb32 <copyright>

#ifdef FATFS_TESTS
    fatfs_help(0);
   1bea6:	80 e0       	ldi	r24, 0x00	; 0
   1bea8:	90 e0       	ldi	r25, 0x00	; 0
   1beaa:	0e 94 31 72 	call	0xe462	; 0xe462 <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1beae:	80 e0       	ldi	r24, 0x00	; 0
   1beb0:	90 e0       	ldi	r25, 0x00	; 0
   1beb2:	0e 94 62 7d 	call	0xfac4	; 0xfac4 <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1beb6:	80 e0       	ldi	r24, 0x00	; 0
   1beb8:	90 e0       	ldi	r25, 0x00	; 0
   1beba:	0e 94 ef bd 	call	0x17bde	; 0x17bde <lif_help>
#endif

    gpib_help(0);
   1bebe:	80 e0       	ldi	r24, 0x00	; 0
   1bec0:	90 e0       	ldi	r25, 0x00	; 0
   1bec2:	0e 94 d6 90 	call	0x121ac	; 0x121ac <gpib_help>

    printf(
   1bec6:	86 ed       	ldi	r24, 0xD6	; 214
   1bec8:	95 e4       	ldi	r25, 0x45	; 69
   1beca:	a0 e0       	ldi	r26, 0x00	; 0
   1becc:	ed b7       	in	r30, 0x3d	; 61
   1bece:	fe b7       	in	r31, 0x3e	; 62
   1bed0:	81 83       	std	Z+1, r24	; 0x01
   1bed2:	92 83       	std	Z+2, r25	; 0x02
   1bed4:	a3 83       	std	Z+3, r26	; 0x03
   1bed6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        "   - set date\n"
        "time\n"
        "   - display current time\n"
        "\n"
        );
}
   1beda:	0f 90       	pop	r0
   1bedc:	0f 90       	pop	r0
   1bede:	0f 90       	pop	r0
   1bee0:	08 95       	ret

0001bee2 <user_task.part.1>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void user_task(uint8_t gpib)
   1bee2:	6f 92       	push	r6
   1bee4:	7f 92       	push	r7
   1bee6:	8f 92       	push	r8
   1bee8:	af 92       	push	r10
   1beea:	bf 92       	push	r11
   1beec:	cf 92       	push	r12
   1beee:	df 92       	push	r13
   1bef0:	ef 92       	push	r14
   1bef2:	ff 92       	push	r15
   1bef4:	0f 93       	push	r16
   1bef6:	1f 93       	push	r17
   1bef8:	cf 93       	push	r28
   1befa:	df 93       	push	r29
   1befc:	cd b7       	in	r28, 0x3d	; 61
   1befe:	de b7       	in	r29, 0x3e	; 62
   1bf00:	cb 56       	subi	r28, 0x6B	; 107
   1bf02:	d1 40       	sbci	r29, 0x01	; 1
   1bf04:	0f b6       	in	r0, 0x3f	; 63
   1bf06:	f8 94       	cli
   1bf08:	de bf       	out	0x3e, r29	; 62
   1bf0a:	0f be       	out	0x3f, r0	; 63
   1bf0c:	cd bf       	out	0x3d, r28	; 61
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1bf0e:	83 ed       	ldi	r24, 0xD3	; 211
   1bf10:	95 e4       	ldi	r25, 0x45	; 69
   1bf12:	a0 e0       	ldi	r26, 0x00	; 0
   1bf14:	ed b7       	in	r30, 0x3d	; 61
   1bf16:	fe b7       	in	r31, 0x3e	; 62
   1bf18:	81 83       	std	Z+1, r24	; 0x01
   1bf1a:	92 83       	std	Z+2, r25	; 0x02
   1bf1c:	a3 83       	std	Z+3, r26	; 0x03
   1bf1e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

	memset(line,0,sizeof(line)-1);
   1bf22:	ce 01       	movw	r24, r28
   1bf24:	06 96       	adiw	r24, 0x06	; 6
   1bf26:	6c 01       	movw	r12, r24
   1bf28:	8f ef       	ldi	r24, 0xFF	; 255
   1bf2a:	f6 01       	movw	r30, r12
   1bf2c:	11 92       	st	Z+, r1
   1bf2e:	8a 95       	dec	r24
   1bf30:	e9 f7       	brne	.-6      	; 0x1bf2c <user_task.part.1+0x4a>

    fgets(line,sizeof(line)-2,stdin);
   1bf32:	40 91 c2 1c 	lds	r20, 0x1CC2	; 0x801cc2 <__iob>
   1bf36:	50 91 c3 1c 	lds	r21, 0x1CC3	; 0x801cc3 <__iob+0x1>
   1bf3a:	6e ef       	ldi	r22, 0xFE	; 254
   1bf3c:	70 e0       	ldi	r23, 0x00	; 0
   1bf3e:	c6 01       	movw	r24, r12
   1bf40:	0e 94 4e 75 	call	0xea9c	; 0xea9c <fgets>
    trim_tail(line);
   1bf44:	c6 01       	movw	r24, r12
   1bf46:	0e 94 2d 30 	call	0x605a	; 0x605a <trim_tail>
    argc = split_args(line,argv,50);
   1bf4a:	42 e3       	ldi	r20, 0x32	; 50
   1bf4c:	50 e0       	ldi	r21, 0x00	; 0
   1bf4e:	be 01       	movw	r22, r28
   1bf50:	6a 5f       	subi	r22, 0xFA	; 250
   1bf52:	7e 4f       	sbci	r23, 0xFE	; 254
   1bf54:	c6 01       	movw	r24, r12
   1bf56:	0e 94 b3 30 	call	0x6166	; 0x6166 <split_args>
   1bf5a:	7c 01       	movw	r14, r24

	if(debug_input)
   1bf5c:	80 91 ef 19 	lds	r24, 0x19EF	; 0x8019ef <debug_input>
   1bf60:	81 11       	cpse	r24, r1
   1bf62:	0a c0       	rjmp	.+20     	; 0x1bf78 <user_task.part.1+0x96>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1bf64:	ca 5f       	subi	r28, 0xFA	; 250
   1bf66:	de 4f       	sbci	r29, 0xFE	; 254
   1bf68:	08 81       	ld	r16, Y
   1bf6a:	19 81       	ldd	r17, Y+1	; 0x01
   1bf6c:	c6 50       	subi	r28, 0x06	; 6
   1bf6e:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1bf70:	01 15       	cp	r16, r1
   1bf72:	11 05       	cpc	r17, r1
   1bf74:	a1 f5       	brne	.+104    	; 0x1bfde <user_task.part.1+0xfc>
   1bf76:	ed c0       	rjmp	.+474    	; 0x1c152 <user_task.part.1+0x270>
    trim_tail(line);
    argc = split_args(line,argv,50);

	if(debug_input)
	{
		printf("Arguments:\n");
   1bf78:	87 ec       	ldi	r24, 0xC7	; 199
   1bf7a:	95 e4       	ldi	r25, 0x45	; 69
   1bf7c:	a0 e0       	ldi	r26, 0x00	; 0
   1bf7e:	ed b7       	in	r30, 0x3d	; 61
   1bf80:	fe b7       	in	r31, 0x3e	; 62
   1bf82:	81 83       	std	Z+1, r24	; 0x01
   1bf84:	92 83       	std	Z+2, r25	; 0x02
   1bf86:	a3 83       	std	Z+3, r26	; 0x03
   1bf88:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
		printf("   argc = %d\n", argc);
   1bf8c:	ed b7       	in	r30, 0x3d	; 61
   1bf8e:	fe b7       	in	r31, 0x3e	; 62
   1bf90:	f5 82       	std	Z+5, r15	; 0x05
   1bf92:	e4 82       	std	Z+4, r14	; 0x04
   1bf94:	89 eb       	ldi	r24, 0xB9	; 185
   1bf96:	95 e4       	ldi	r25, 0x45	; 69
   1bf98:	a0 e0       	ldi	r26, 0x00	; 0
   1bf9a:	81 83       	std	Z+1, r24	; 0x01
   1bf9c:	92 83       	std	Z+2, r25	; 0x02
   1bf9e:	a3 83       	std	Z+3, r26	; 0x03
   1bfa0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1bfa4:	ce 01       	movw	r24, r28
   1bfa6:	8a 5f       	subi	r24, 0xFA	; 250
   1bfa8:	9e 4f       	sbci	r25, 0xFE	; 254
   1bfaa:	5c 01       	movw	r10, r24
		for(i=0;i<argc;++i)
   1bfac:	00 e0       	ldi	r16, 0x00	; 0
   1bfae:	10 e0       	ldi	r17, 0x00	; 0
			printf("   [%s]\n", argv[i]);
   1bfb0:	80 eb       	ldi	r24, 0xB0	; 176
   1bfb2:	95 e4       	ldi	r25, 0x45	; 69
   1bfb4:	3c 01       	movw	r6, r24
   1bfb6:	81 2c       	mov	r8, r1

	if(debug_input)
	{
		printf("Arguments:\n");
		printf("   argc = %d\n", argc);
		for(i=0;i<argc;++i)
   1bfb8:	0e 15       	cp	r16, r14
   1bfba:	1f 05       	cpc	r17, r15
   1bfbc:	9c f6       	brge	.-90     	; 0x1bf64 <user_task.part.1+0x82>
			printf("   [%s]\n", argv[i]);
   1bfbe:	f5 01       	movw	r30, r10
   1bfc0:	81 91       	ld	r24, Z+
   1bfc2:	91 91       	ld	r25, Z+
   1bfc4:	5f 01       	movw	r10, r30
   1bfc6:	ed b7       	in	r30, 0x3d	; 61
   1bfc8:	fe b7       	in	r31, 0x3e	; 62
   1bfca:	95 83       	std	Z+5, r25	; 0x05
   1bfcc:	84 83       	std	Z+4, r24	; 0x04
   1bfce:	61 82       	std	Z+1, r6	; 0x01
   1bfd0:	72 82       	std	Z+2, r7	; 0x02
   1bfd2:	83 82       	std	Z+3, r8	; 0x03
   1bfd4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

	if(debug_input)
	{
		printf("Arguments:\n");
		printf("   argc = %d\n", argc);
		for(i=0;i<argc;++i)
   1bfd8:	0f 5f       	subi	r16, 0xFF	; 255
   1bfda:	1f 4f       	sbci	r17, 0xFF	; 255
   1bfdc:	ed cf       	rjmp	.-38     	; 0x1bfb8 <user_task.part.1+0xd6>

    ind = 0;
	result = 0;
    ptr = argv[ind++];

    if(!ptr || argc < 1)
   1bfde:	1e 14       	cp	r1, r14
   1bfe0:	1f 04       	cpc	r1, r15
   1bfe2:	0c f0       	brlt	.+2      	; 0x1bfe6 <user_task.part.1+0x104>
   1bfe4:	b6 c0       	rjmp	.+364    	; 0x1c152 <user_task.part.1+0x270>
    {
        result = 1;
    }
    else if (MATCHI(ptr,"input") )
   1bfe6:	61 e3       	ldi	r22, 0x31	; 49
   1bfe8:	77 e1       	ldi	r23, 0x17	; 23
   1bfea:	c8 01       	movw	r24, r16
   1bfec:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <MATCHI>
   1bff0:	89 2b       	or	r24, r25
   1bff2:	d9 f0       	breq	.+54     	; 0x1c02a <user_task.part.1+0x148>
    {
        debug_input = !debug_input;
   1bff4:	80 91 ef 19 	lds	r24, 0x19EF	; 0x8019ef <debug_input>
   1bff8:	91 e0       	ldi	r25, 0x01	; 1
   1bffa:	81 11       	cpse	r24, r1
   1bffc:	90 e0       	ldi	r25, 0x00	; 0
   1bffe:	90 93 ef 19 	sts	0x19EF, r25	; 0x8019ef <debug_input>
		printf("Input debugging: %s\n", debug_input ? "ON" : "OFF");
   1c002:	88 23       	and	r24, r24
   1c004:	19 f0       	breq	.+6      	; 0x1c00c <user_task.part.1+0x12a>
   1c006:	8d e2       	ldi	r24, 0x2D	; 45
   1c008:	97 e1       	ldi	r25, 0x17	; 23
   1c00a:	02 c0       	rjmp	.+4      	; 0x1c010 <user_task.part.1+0x12e>
   1c00c:	8a e2       	ldi	r24, 0x2A	; 42
   1c00e:	97 e1       	ldi	r25, 0x17	; 23
   1c010:	ed b7       	in	r30, 0x3d	; 61
   1c012:	fe b7       	in	r31, 0x3e	; 62
   1c014:	95 83       	std	Z+5, r25	; 0x05
   1c016:	84 83       	std	Z+4, r24	; 0x04
   1c018:	8b e9       	ldi	r24, 0x9B	; 155
   1c01a:	95 e4       	ldi	r25, 0x45	; 69
   1c01c:	a0 e0       	ldi	r26, 0x00	; 0
   1c01e:	81 83       	std	Z+1, r24	; 0x01
   1c020:	92 83       	std	Z+2, r25	; 0x02
   1c022:	a3 83       	std	Z+3, r26	; 0x03
   1c024:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1c028:	94 c0       	rjmp	.+296    	; 0x1c152 <user_task.part.1+0x270>

    }
#endif

#ifdef LCD_SUPPORT
    else if (MATCHI(ptr,"backlight") )
   1c02a:	67 e3       	ldi	r22, 0x37	; 55
   1c02c:	77 e1       	ldi	r23, 0x17	; 23
   1c02e:	c8 01       	movw	r24, r16
   1c030:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <MATCHI>
   1c034:	89 2b       	or	r24, r25
   1c036:	f9 f0       	breq	.+62     	; 0x1c076 <user_task.part.1+0x194>
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
   1c038:	c8 5f       	subi	r28, 0xF8	; 248
   1c03a:	de 4f       	sbci	r29, 0xFE	; 254
   1c03c:	e8 81       	ld	r30, Y
   1c03e:	f9 81       	ldd	r31, Y+1	; 0x01
   1c040:	c8 50       	subi	r28, 0x08	; 8
   1c042:	d1 40       	sbci	r29, 0x01	; 1
   1c044:	80 81       	ld	r24, Z
   1c046:	8d 33       	cpi	r24, 0x3D	; 61
   1c048:	19 f4       	brne	.+6      	; 0x1c050 <user_task.part.1+0x16e>
            ++ind;
   1c04a:	82 e0       	ldi	r24, 0x02	; 2
   1c04c:	90 e0       	ldi	r25, 0x00	; 0
   1c04e:	02 c0       	rjmp	.+4      	; 0x1c054 <user_task.part.1+0x172>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c050:	81 e0       	ldi	r24, 0x01	; 1
   1c052:	90 e0       	ldi	r25, 0x00	; 0
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
            ++ind;
        rgb = get_value(argv[ind]);
   1c054:	88 0f       	add	r24, r24
   1c056:	99 1f       	adc	r25, r25
   1c058:	e6 e0       	ldi	r30, 0x06	; 6
   1c05a:	f1 e0       	ldi	r31, 0x01	; 1
   1c05c:	ec 0f       	add	r30, r28
   1c05e:	fd 1f       	adc	r31, r29
   1c060:	e8 0f       	add	r30, r24
   1c062:	f9 1f       	adc	r31, r25
   1c064:	80 81       	ld	r24, Z
   1c066:	91 81       	ldd	r25, Z+1	; 0x01
   1c068:	0e 94 52 31 	call	0x62a4	; 0x62a4 <get_value>
		result = lcd_backlight(rgb);
   1c06c:	01 de       	rcall	.-1022   	; 0x1bc70 <lcd_backlight>
    else if(lif_tests(argc,argv))
	{
        result = 1;
	}
#endif
    if(result)
   1c06e:	88 23       	and	r24, r24
   1c070:	09 f4       	brne	.+2      	; 0x1c074 <user_task.part.1+0x192>
   1c072:	62 c0       	rjmp	.+196    	; 0x1c138 <user_task.part.1+0x256>
   1c074:	6e c0       	rjmp	.+220    	; 0x1c152 <user_task.part.1+0x270>
        rgb = get_value(argv[ind]);
		result = lcd_backlight(rgb);
    }
#endif

    else if ( MATCH(ptr,"mem") )
   1c076:	61 e4       	ldi	r22, 0x41	; 65
   1c078:	77 e1       	ldi	r23, 0x17	; 23
   1c07a:	c8 01       	movw	r24, r16
   1c07c:	0e 94 47 30 	call	0x608e	; 0x608e <MATCH>
   1c080:	89 2b       	or	r24, r25
   1c082:	19 f0       	breq	.+6      	; 0x1c08a <user_task.part.1+0x1a8>
    {
        PrintFree();
   1c084:	0e 94 29 25 	call	0x4a52	; 0x4a52 <PrintFree>
   1c088:	64 c0       	rjmp	.+200    	; 0x1c152 <user_task.part.1+0x270>
        result = 1;

    }
    else if ( MATCHI(ptr,"reset") )
   1c08a:	60 ee       	ldi	r22, 0xE0	; 224
   1c08c:	7d e0       	ldi	r23, 0x0D	; 13
   1c08e:	c8 01       	movw	r24, r16
   1c090:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <MATCHI>
   1c094:	89 2b       	or	r24, r25
   1c096:	51 f0       	breq	.+20     	; 0x1c0ac <user_task.part.1+0x1ca>
    {
        cli();
   1c098:	f8 94       	cli
        uart_rx_flush(0);
   1c09a:	80 e0       	ldi	r24, 0x00	; 0
   1c09c:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <uart_rx_flush>
        cli();
   1c0a0:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1c0a2:	82 e0       	ldi	r24, 0x02	; 2
   1c0a4:	84 bf       	out	0x34, r24	; 52
        RESET();
   1c0a6:	e0 e0       	ldi	r30, 0x00	; 0
   1c0a8:	fc ef       	ldi	r31, 0xFC	; 252
   1c0aa:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1c0ac:	65 e4       	ldi	r22, 0x45	; 69
   1c0ae:	77 e1       	ldi	r23, 0x17	; 23
   1c0b0:	c8 01       	movw	r24, r16
   1c0b2:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <MATCHI>
   1c0b6:	89 2b       	or	r24, r25
   1c0b8:	19 f0       	breq	.+6      	; 0x1c0c0 <user_task.part.1+0x1de>
    {
        setdate();
   1c0ba:	0e 94 96 39 	call	0x732c	; 0x732c <setdate>
   1c0be:	07 c0       	rjmp	.+14     	; 0x1c0ce <user_task.part.1+0x1ec>
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"time") )
   1c0c0:	6d e4       	ldi	r22, 0x4D	; 77
   1c0c2:	77 e1       	ldi	r23, 0x17	; 23
   1c0c4:	c8 01       	movw	r24, r16
   1c0c6:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <MATCHI>
   1c0ca:	89 2b       	or	r24, r25
   1c0cc:	19 f0       	breq	.+6      	; 0x1c0d4 <user_task.part.1+0x1f2>
    {
        display_clock();
   1c0ce:	0e 94 b2 3b 	call	0x7764	; 0x7764 <display_clock>
   1c0d2:	3f c0       	rjmp	.+126    	; 0x1c152 <user_task.part.1+0x270>
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c0d4:	69 e7       	ldi	r22, 0x79	; 121
   1c0d6:	76 e1       	ldi	r23, 0x16	; 22
   1c0d8:	c8 01       	movw	r24, r16
   1c0da:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <MATCHI>
   1c0de:	89 2b       	or	r24, r25
    {
        help();
   1c0e0:	11 f0       	breq	.+4      	; 0x1c0e6 <user_task.part.1+0x204>
   1c0e2:	de de       	rcall	.-580    	; 0x1bea0 <help>
   1c0e4:	36 c0       	rjmp	.+108    	; 0x1c152 <user_task.part.1+0x270>
    else if ( MATCHI(ptr,"time") )
    {
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c0e6:	6f e7       	ldi	r22, 0x7F	; 127
   1c0e8:	76 e1       	ldi	r23, 0x16	; 22
   1c0ea:	c8 01       	movw	r24, r16
   1c0ec:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <MATCHI>
   1c0f0:	89 2b       	or	r24, r25
   1c0f2:	b9 f7       	brne	.-18     	; 0x1c0e2 <user_task.part.1+0x200>
    {
        help();
        result = 1;
    }

    else if(gpib_tests(argc,argv))
   1c0f4:	be 01       	movw	r22, r28
   1c0f6:	6a 5f       	subi	r22, 0xFA	; 250
   1c0f8:	7e 4f       	sbci	r23, 0xFE	; 254
   1c0fa:	c7 01       	movw	r24, r14
   1c0fc:	0e 94 f7 90 	call	0x121ee	; 0x121ee <gpib_tests>
   1c100:	89 2b       	or	r24, r25
   1c102:	19 f0       	breq	.+6      	; 0x1c10a <user_task.part.1+0x228>
    {
// Restore GPIB BUS states
        gpib_init_devices();
   1c104:	0e 94 0b 8c 	call	0x11816	; 0x11816 <gpib_init_devices>
   1c108:	24 c0       	rjmp	.+72     	; 0x1c152 <user_task.part.1+0x270>
        result = 1;
    }

#ifdef POSIX_TESTS
    else if(posix_tests(argc,argv))
   1c10a:	be 01       	movw	r22, r28
   1c10c:	6a 5f       	subi	r22, 0xFA	; 250
   1c10e:	7e 4f       	sbci	r23, 0xFE	; 254
   1c110:	c7 01       	movw	r24, r14
   1c112:	0e 94 d4 80 	call	0x101a8	; 0x101a8 <posix_tests>
   1c116:	89 2b       	or	r24, r25
   1c118:	e1 f4       	brne	.+56     	; 0x1c152 <user_task.part.1+0x270>
        result = 1;
	}
#endif

#ifdef FATFS_TESTS
    else if(fatfs_tests(argc,argv))
   1c11a:	be 01       	movw	r22, r28
   1c11c:	6a 5f       	subi	r22, 0xFA	; 250
   1c11e:	7e 4f       	sbci	r23, 0xFE	; 254
   1c120:	c7 01       	movw	r24, r14
   1c122:	0e 94 50 73 	call	0xe6a0	; 0xe6a0 <fatfs_tests>
   1c126:	89 2b       	or	r24, r25
   1c128:	a1 f4       	brne	.+40     	; 0x1c152 <user_task.part.1+0x270>
        result = 1;
	}
#endif

#ifdef LIF_SUPPORT
    else if(lif_tests(argc,argv))
   1c12a:	be 01       	movw	r22, r28
   1c12c:	6a 5f       	subi	r22, 0xFA	; 250
   1c12e:	7e 4f       	sbci	r23, 0xFE	; 254
   1c130:	c7 01       	movw	r24, r14
   1c132:	8a db       	rcall	.-2284   	; 0x1b848 <lif_tests>
   1c134:	89 2b       	or	r24, r25
   1c136:	69 f4       	brne	.+26     	; 0x1c152 <user_task.part.1+0x270>
	}
#endif
    if(result)
        printf("OK\n");
    else
        printf("Error:[%s]\n",line);
   1c138:	ed b7       	in	r30, 0x3d	; 61
   1c13a:	fe b7       	in	r31, 0x3e	; 62
   1c13c:	d5 82       	std	Z+5, r13	; 0x05
   1c13e:	c4 82       	std	Z+4, r12	; 0x04
   1c140:	8b e8       	ldi	r24, 0x8B	; 139
   1c142:	95 e4       	ldi	r25, 0x45	; 69
   1c144:	a0 e0       	ldi	r26, 0x00	; 0
   1c146:	81 83       	std	Z+1, r24	; 0x01
   1c148:	92 83       	std	Z+2, r25	; 0x02
   1c14a:	a3 83       	std	Z+3, r26	; 0x03
   1c14c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1c150:	0a c0       	rjmp	.+20     	; 0x1c166 <user_task.part.1+0x284>
	{
        result = 1;
	}
#endif
    if(result)
        printf("OK\n");
   1c152:	87 e9       	ldi	r24, 0x97	; 151
   1c154:	95 e4       	ldi	r25, 0x45	; 69
   1c156:	a0 e0       	ldi	r26, 0x00	; 0
   1c158:	ed b7       	in	r30, 0x3d	; 61
   1c15a:	fe b7       	in	r31, 0x3e	; 62
   1c15c:	81 83       	std	Z+1, r24	; 0x01
   1c15e:	92 83       	std	Z+2, r25	; 0x02
   1c160:	a3 83       	std	Z+3, r26	; 0x03
   1c162:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    else
        printf("Error:[%s]\n",line);
}
   1c166:	c5 59       	subi	r28, 0x95	; 149
   1c168:	de 4f       	sbci	r29, 0xFE	; 254
   1c16a:	0f b6       	in	r0, 0x3f	; 63
   1c16c:	f8 94       	cli
   1c16e:	de bf       	out	0x3e, r29	; 62
   1c170:	0f be       	out	0x3f, r0	; 63
   1c172:	cd bf       	out	0x3d, r28	; 61
   1c174:	df 91       	pop	r29
   1c176:	cf 91       	pop	r28
   1c178:	1f 91       	pop	r17
   1c17a:	0f 91       	pop	r16
   1c17c:	ff 90       	pop	r15
   1c17e:	ef 90       	pop	r14
   1c180:	df 90       	pop	r13
   1c182:	cf 90       	pop	r12
   1c184:	bf 90       	pop	r11
   1c186:	af 90       	pop	r10
   1c188:	8f 90       	pop	r8
   1c18a:	7f 90       	pop	r7
   1c18c:	6f 90       	pop	r6
   1c18e:	08 95       	ret

0001c190 <user_task>:
    int result = 0;
    char *argv[51];
    char line[256];


    if(gpib)
   1c190:	81 11       	cpse	r24, r1
        gpib_task();
   1c192:	0e 94 76 90 	call	0x120ec	; 0x120ec <gpib_task>

    if(!kbhit(0))
   1c196:	80 e0       	ldi	r24, 0x00	; 0
   1c198:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <uart_rx_count>
   1c19c:	89 2b       	or	r24, r25
   1c19e:	09 f0       	breq	.+2      	; 0x1c1a2 <user_task+0x12>
   1c1a0:	a0 ce       	rjmp	.-704    	; 0x1bee2 <user_task.part.1>
   1c1a2:	08 95       	ret

0001c1a4 <main>:


/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1c1a4:	a3 e3       	ldi	r26, 0x33	; 51
   1c1a6:	b0 e0       	ldi	r27, 0x00	; 0
   1c1a8:	e7 ed       	ldi	r30, 0xD7	; 215
   1c1aa:	f0 ee       	ldi	r31, 0xE0	; 224
   1c1ac:	8f c2       	rjmp	.+1310   	; 0x1c6cc <__prologue_saves__+0x14>
    ts_t ts;
    uint32_t actual,baud;
	char tmp[32];

	clear_error();		// Clear error state
   1c1ae:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1c1b2:	46 98       	cbi	0x08, 6	; 8
   1c1b4:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c1b6:	0e 94 9f 84 	call	0x1093e	; 0x1093e <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1c1ba:	40 e0       	ldi	r20, 0x00	; 0
   1c1bc:	52 ec       	ldi	r21, 0xC2	; 194
   1c1be:	61 e0       	ldi	r22, 0x01	; 1
   1c1c0:	70 e0       	ldi	r23, 0x00	; 0
   1c1c2:	80 e0       	ldi	r24, 0x00	; 0
   1c1c4:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <uart_init>
   1c1c8:	6b 01       	movw	r12, r22
   1c1ca:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1c1cc:	68 ec       	ldi	r22, 0xC8	; 200
   1c1ce:	70 e0       	ldi	r23, 0x00	; 0
   1c1d0:	80 e0       	ldi	r24, 0x00	; 0
   1c1d2:	90 e0       	ldi	r25, 0x00	; 0
   1c1d4:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <delayms>

    sep();
   1c1d8:	0e 94 1d 30 	call	0x603a	; 0x603a <sep>
    printf("Start\n");
   1c1dc:	84 e8       	ldi	r24, 0x84	; 132
   1c1de:	95 e4       	ldi	r25, 0x45	; 69
   1c1e0:	a0 e0       	ldi	r26, 0x00	; 0
   1c1e2:	ed b7       	in	r30, 0x3d	; 61
   1c1e4:	fe b7       	in	r31, 0x3e	; 62
   1c1e6:	81 83       	std	Z+1, r24	; 0x01
   1c1e8:	92 83       	std	Z+2, r25	; 0x02
   1c1ea:	a3 83       	std	Z+3, r26	; 0x03
   1c1ec:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1c1f0:	80 e0       	ldi	r24, 0x00	; 0
   1c1f2:	9d e2       	ldi	r25, 0x2D	; 45
   1c1f4:	a1 e3       	ldi	r26, 0x31	; 49
   1c1f6:	b1 e0       	ldi	r27, 0x01	; 1
   1c1f8:	ed b7       	in	r30, 0x3d	; 61
   1c1fa:	fe b7       	in	r31, 0x3e	; 62
   1c1fc:	84 83       	std	Z+4, r24	; 0x04
   1c1fe:	95 83       	std	Z+5, r25	; 0x05
   1c200:	a6 83       	std	Z+6, r26	; 0x06
   1c202:	b7 83       	std	Z+7, r27	; 0x07
   1c204:	83 e7       	ldi	r24, 0x73	; 115
   1c206:	95 e4       	ldi	r25, 0x45	; 69
   1c208:	a0 e0       	ldi	r26, 0x00	; 0
   1c20a:	81 83       	std	Z+1, r24	; 0x01
   1c20c:	92 83       	std	Z+2, r25	; 0x02
   1c20e:	a3 83       	std	Z+3, r26	; 0x03
   1c210:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1c214:	ed b7       	in	r30, 0x3d	; 61
   1c216:	fe b7       	in	r31, 0x3e	; 62
   1c218:	c0 86       	std	Z+8, r12	; 0x08
   1c21a:	d1 86       	std	Z+9, r13	; 0x09
   1c21c:	e2 86       	std	Z+10, r14	; 0x0a
   1c21e:	f3 86       	std	Z+11, r15	; 0x0b
   1c220:	80 e0       	ldi	r24, 0x00	; 0
   1c222:	92 ec       	ldi	r25, 0xC2	; 194
   1c224:	a1 e0       	ldi	r26, 0x01	; 1
   1c226:	b0 e0       	ldi	r27, 0x00	; 0
   1c228:	84 83       	std	Z+4, r24	; 0x04
   1c22a:	95 83       	std	Z+5, r25	; 0x05
   1c22c:	a6 83       	std	Z+6, r26	; 0x06
   1c22e:	b7 83       	std	Z+7, r27	; 0x07
   1c230:	8c e4       	ldi	r24, 0x4C	; 76
   1c232:	95 e4       	ldi	r25, 0x45	; 69
   1c234:	a0 e0       	ldi	r26, 0x00	; 0
   1c236:	81 83       	std	Z+1, r24	; 0x01
   1c238:	92 83       	std	Z+2, r25	; 0x02
   1c23a:	a3 83       	std	Z+3, r26	; 0x03
   1c23c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    init_timers();
   1c240:	0e 94 03 34 	call	0x6806	; 0x6806 <init_timers>

    sep();
   1c244:	0e 94 1d 30 	call	0x603a	; 0x603a <sep>
    printf("HP85 Disk and Device Emulator\n");
   1c248:	8d e2       	ldi	r24, 0x2D	; 45
   1c24a:	95 e4       	ldi	r25, 0x45	; 69
   1c24c:	a0 e0       	ldi	r26, 0x00	; 0
   1c24e:	ed b7       	in	r30, 0x3d	; 61
   1c250:	fe b7       	in	r31, 0x3e	; 62
   1c252:	81 83       	std	Z+1, r24	; 0x01
   1c254:	92 83       	std	Z+2, r25	; 0x02
   1c256:	a3 83       	std	Z+3, r26	; 0x03
   1c258:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1c25c:	80 e1       	ldi	r24, 0x10	; 16
   1c25e:	95 e4       	ldi	r25, 0x45	; 69
   1c260:	a0 e0       	ldi	r26, 0x00	; 0
   1c262:	ed b7       	in	r30, 0x3d	; 61
   1c264:	fe b7       	in	r31, 0x3e	; 62
   1c266:	81 83       	std	Z+1, r24	; 0x01
   1c268:	92 83       	std	Z+2, r25	; 0x02
   1c26a:	a3 83       	std	Z+3, r26	; 0x03
   1c26c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf(" GNU version 3\n");
   1c270:	80 e0       	ldi	r24, 0x00	; 0
   1c272:	95 e4       	ldi	r25, 0x45	; 69
   1c274:	a0 e0       	ldi	r26, 0x00	; 0
   1c276:	ed b7       	in	r30, 0x3d	; 61
   1c278:	fe b7       	in	r31, 0x3e	; 62
   1c27a:	81 83       	std	Z+1, r24	; 0x01
   1c27c:	92 83       	std	Z+2, r25	; 0x02
   1c27e:	a3 83       	std	Z+3, r26	; 0x03
   1c280:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c284:	89 ed       	ldi	r24, 0xD9	; 217
   1c286:	94 e4       	ldi	r25, 0x44	; 68
   1c288:	a0 e0       	ldi	r26, 0x00	; 0
   1c28a:	ed b7       	in	r30, 0x3d	; 61
   1c28c:	fe b7       	in	r31, 0x3e	; 62
   1c28e:	81 83       	std	Z+1, r24	; 0x01
   1c290:	92 83       	std	Z+2, r25	; 0x02
   1c292:	a3 83       	std	Z+3, r26	; 0x03
   1c294:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c298:	8b eb       	ldi	r24, 0xBB	; 187
   1c29a:	96 e1       	ldi	r25, 0x16	; 22
   1c29c:	ed b7       	in	r30, 0x3d	; 61
   1c29e:	fe b7       	in	r31, 0x3e	; 62
   1c2a0:	95 83       	std	Z+5, r25	; 0x05
   1c2a2:	84 83       	std	Z+4, r24	; 0x04
   1c2a4:	8f eb       	ldi	r24, 0xBF	; 191
   1c2a6:	94 e4       	ldi	r25, 0x44	; 68
   1c2a8:	a0 e0       	ldi	r26, 0x00	; 0
   1c2aa:	81 83       	std	Z+1, r24	; 0x01
   1c2ac:	92 83       	std	Z+2, r25	; 0x02
   1c2ae:	a3 83       	std	Z+3, r26	; 0x03
   1c2b0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c2b4:	8f ed       	ldi	r24, 0xDF	; 223
   1c2b6:	96 e1       	ldi	r25, 0x16	; 22
   1c2b8:	ed b7       	in	r30, 0x3d	; 61
   1c2ba:	fe b7       	in	r31, 0x3e	; 62
   1c2bc:	95 83       	std	Z+5, r25	; 0x05
   1c2be:	84 83       	std	Z+4, r24	; 0x04
   1c2c0:	85 ea       	ldi	r24, 0xA5	; 165
   1c2c2:	94 e4       	ldi	r25, 0x44	; 68
   1c2c4:	a0 e0       	ldi	r26, 0x00	; 0
   1c2c6:	81 83       	std	Z+1, r24	; 0x01
   1c2c8:	92 83       	std	Z+2, r25	; 0x02
   1c2ca:	a3 83       	std	Z+3, r26	; 0x03
   1c2cc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    sep();
   1c2d0:	0e 94 1d 30 	call	0x603a	; 0x603a <sep>
    PrintFree();
   1c2d4:	0e 94 29 25 	call	0x4a52	; 0x4a52 <PrintFree>

    sep();
   1c2d8:	0e 94 1d 30 	call	0x603a	; 0x603a <sep>
    // delayms(200);                                 ///@brief Power up delay

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1c2dc:	8f e8       	ldi	r24, 0x8F	; 143
   1c2de:	94 e4       	ldi	r25, 0x44	; 68
   1c2e0:	a0 e0       	ldi	r26, 0x00	; 0
   1c2e2:	ed b7       	in	r30, 0x3d	; 61
   1c2e4:	fe b7       	in	r31, 0x3e	; 62
   1c2e6:	81 83       	std	Z+1, r24	; 0x01
   1c2e8:	92 83       	std	Z+2, r25	; 0x02
   1c2ea:	a3 83       	std	Z+3, r26	; 0x03
   1c2ec:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1c2f0:	4b e0       	ldi	r20, 0x0B	; 11
   1c2f2:	50 e0       	ldi	r21, 0x00	; 0
   1c2f4:	60 e2       	ldi	r22, 0x20	; 32
   1c2f6:	71 ea       	ldi	r23, 0xA1	; 161
   1c2f8:	87 e0       	ldi	r24, 0x07	; 7
   1c2fa:	90 e0       	ldi	r25, 0x00	; 0
   1c2fc:	0e 94 8f 24 	call	0x491e	; 0x491e <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1c300:	89 e7       	ldi	r24, 0x79	; 121
   1c302:	94 e4       	ldi	r25, 0x44	; 68
   1c304:	a0 e0       	ldi	r26, 0x00	; 0
   1c306:	ed b7       	in	r30, 0x3d	; 61
   1c308:	fe b7       	in	r31, 0x3e	; 62
   1c30a:	81 83       	std	Z+1, r24	; 0x01
   1c30c:	92 83       	std	Z+2, r25	; 0x02
   1c30e:	a3 83       	std	Z+3, r26	; 0x03
   1c310:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
	i2c_init(100000);
   1c314:	60 ea       	ldi	r22, 0xA0	; 160
   1c316:	76 e8       	ldi	r23, 0x86	; 134
   1c318:	81 e0       	ldi	r24, 0x01	; 1
   1c31a:	90 e0       	ldi	r25, 0x00	; 0
   1c31c:	0e 94 2c 2a 	call	0x5458	; 0x5458 <i2c_init>
    sep();
   1c320:	0e 94 1d 30 	call	0x603a	; 0x603a <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1c324:	87 e6       	ldi	r24, 0x67	; 103
   1c326:	94 e4       	ldi	r25, 0x44	; 68
   1c328:	a0 e0       	ldi	r26, 0x00	; 0
   1c32a:	ed b7       	in	r30, 0x3d	; 61
   1c32c:	fe b7       	in	r31, 0x3e	; 62
   1c32e:	81 83       	std	Z+1, r24	; 0x01
   1c330:	92 83       	std	Z+2, r25	; 0x02
   1c332:	a3 83       	std	Z+3, r26	; 0x03
   1c334:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    clock_clear();
   1c338:	0e 94 c0 33 	call	0x6780	; 0x6780 <clock_clear>
    printf("Clock cleared\n");
   1c33c:	88 e5       	ldi	r24, 0x58	; 88
   1c33e:	94 e4       	ldi	r25, 0x44	; 68
   1c340:	a0 e0       	ldi	r26, 0x00	; 0
   1c342:	ed b7       	in	r30, 0x3d	; 61
   1c344:	fe b7       	in	r31, 0x3e	; 62
   1c346:	81 83       	std	Z+1, r24	; 0x01
   1c348:	92 83       	std	Z+2, r25	; 0x02
   1c34a:	a3 83       	std	Z+3, r26	; 0x03
   1c34c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1c350:	be 01       	movw	r22, r28
   1c352:	64 5d       	subi	r22, 0xD4	; 212
   1c354:	7f 4f       	sbci	r23, 0xFF	; 255
   1c356:	80 e0       	ldi	r24, 0x00	; 0
   1c358:	90 e0       	ldi	r25, 0x00	; 0
   1c35a:	0e 94 60 34 	call	0x68c0	; 0x68c0 <clock_getres>
    printf("System Task Interrupt Rate: %ld Nano Seconds\n", (long) ts.tv_nsec);
   1c35e:	88 a9       	ldd	r24, Y+48	; 0x30
   1c360:	99 a9       	ldd	r25, Y+49	; 0x31
   1c362:	aa a9       	ldd	r26, Y+50	; 0x32
   1c364:	bb a9       	ldd	r27, Y+51	; 0x33
   1c366:	ed b7       	in	r30, 0x3d	; 61
   1c368:	fe b7       	in	r31, 0x3e	; 62
   1c36a:	84 83       	std	Z+4, r24	; 0x04
   1c36c:	95 83       	std	Z+5, r25	; 0x05
   1c36e:	a6 83       	std	Z+6, r26	; 0x06
   1c370:	b7 83       	std	Z+7, r27	; 0x07
   1c372:	8a e2       	ldi	r24, 0x2A	; 42
   1c374:	94 e4       	ldi	r25, 0x44	; 68
   1c376:	a0 e0       	ldi	r26, 0x00	; 0
   1c378:	81 83       	std	Z+1, r24	; 0x01
   1c37a:	92 83       	std	Z+2, r25	; 0x02
   1c37c:	a3 83       	std	Z+3, r26	; 0x03
   1c37e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

// Timezone offset we just use local time
    initialize_clock(0);
   1c382:	80 e0       	ldi	r24, 0x00	; 0
   1c384:	90 e0       	ldi	r25, 0x00	; 0
   1c386:	0e 94 3b 3b 	call	0x7676	; 0x7676 <initialize_clock>
    display_clock();
   1c38a:	0e 94 b2 3b 	call	0x7764	; 0x7764 <display_clock>
    sep();
   1c38e:	0e 94 1d 30 	call	0x603a	; 0x603a <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	lcd_setup();
   1c392:	95 dc       	rcall	.-1750   	; 0x1bcbe <lcd_setup>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1c394:	82 e1       	ldi	r24, 0x12	; 18
   1c396:	94 e4       	ldi	r25, 0x44	; 68
   1c398:	a0 e0       	ldi	r26, 0x00	; 0
   1c39a:	ed b7       	in	r30, 0x3d	; 61
   1c39c:	fe b7       	in	r31, 0x3e	; 62
   1c39e:	81 83       	std	Z+1, r24	; 0x01
   1c3a0:	92 83       	std	Z+2, r25	; 0x02
   1c3a2:	a3 83       	std	Z+3, r26	; 0x03
   1c3a4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    if ( !mmc_init(1) )
   1c3a8:	81 e0       	ldi	r24, 0x01	; 1
   1c3aa:	90 e0       	ldi	r25, 0x00	; 0
   1c3ac:	0e 94 5d 6e 	call	0xdcba	; 0xdcba <mmc_init>
   1c3b0:	89 2b       	or	r24, r25
   1c3b2:	51 f4       	brne	.+20     	; 0x1c3c8 <main+0x224>
		printf("MMC initialized\n");
   1c3b4:	81 e0       	ldi	r24, 0x01	; 1
   1c3b6:	94 e4       	ldi	r25, 0x44	; 68
   1c3b8:	a0 e0       	ldi	r26, 0x00	; 0
   1c3ba:	ed b7       	in	r30, 0x3d	; 61
   1c3bc:	fe b7       	in	r31, 0x3e	; 62
   1c3be:	81 83       	std	Z+1, r24	; 0x01
   1c3c0:	92 83       	std	Z+2, r25	; 0x02
   1c3c2:	a3 83       	std	Z+3, r26	; 0x03
   1c3c4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    sep();
   1c3c8:	0e 94 1d 30 	call	0x603a	; 0x603a <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c3cc:	0e 94 9f 84 	call	0x1093e	; 0x1093e <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1c3d0:	8b ee       	ldi	r24, 0xEB	; 235
   1c3d2:	93 e4       	ldi	r25, 0x43	; 67
   1c3d4:	a0 e0       	ldi	r26, 0x00	; 0
   1c3d6:	ed b7       	in	r30, 0x3d	; 61
   1c3d8:	fe b7       	in	r31, 0x3e	; 62
   1c3da:	81 83       	std	Z+1, r24	; 0x01
   1c3dc:	92 83       	std	Z+2, r25	; 0x02
   1c3de:	a3 83       	std	Z+3, r26	; 0x03
   1c3e0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

///@ initialize Printer Capture
    printer_init();
   1c3e4:	0e 94 6b bb 	call	0x176d6	; 0x176d6 <printer_init>
    printf("Printer initialized\n");
   1c3e8:	86 ed       	ldi	r24, 0xD6	; 214
   1c3ea:	93 e4       	ldi	r25, 0x43	; 67
   1c3ec:	a0 e0       	ldi	r26, 0x00	; 0
   1c3ee:	ed b7       	in	r30, 0x3d	; 61
   1c3f0:	fe b7       	in	r31, 0x3e	; 62
   1c3f2:	81 83       	std	Z+1, r24	; 0x01
   1c3f4:	92 83       	std	Z+2, r25	; 0x02
   1c3f6:	a3 83       	std	Z+3, r26	; 0x03
   1c3f8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1c3fc:	84 ec       	ldi	r24, 0xC4	; 196
   1c3fe:	93 e4       	ldi	r25, 0x43	; 67
   1c400:	a0 e0       	ldi	r26, 0x00	; 0
   1c402:	ed b7       	in	r30, 0x3d	; 61
   1c404:	fe b7       	in	r31, 0x3e	; 62
   1c406:	81 83       	std	Z+1, r24	; 0x01
   1c408:	92 83       	std	Z+2, r25	; 0x02
   1c40a:	a3 83       	std	Z+3, r26	; 0x03
   1c40c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    gpib_timer_init();
   1c410:	0e 94 b3 82 	call	0x10566	; 0x10566 <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1c414:	8c ea       	ldi	r24, 0xAC	; 172
   1c416:	93 e4       	ldi	r25, 0x43	; 67
   1c418:	a0 e0       	ldi	r26, 0x00	; 0
   1c41a:	ed b7       	in	r30, 0x3d	; 61
   1c41c:	fe b7       	in	r31, 0x3e	; 62
   1c41e:	81 83       	std	Z+1, r24	; 0x01
   1c420:	92 83       	std	Z+2, r25	; 0x02
   1c422:	a3 83       	std	Z+3, r26	; 0x03
   1c424:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1c428:	0e 94 36 8b 	call	0x1166c	; 0x1166c <gpib_file_init>
    printf("GPIB File init done\n");
   1c42c:	87 e9       	ldi	r24, 0x97	; 151
   1c42e:	93 e4       	ldi	r25, 0x43	; 67
   1c430:	a0 e0       	ldi	r26, 0x00	; 0
   1c432:	ed b7       	in	r30, 0x3d	; 61
   1c434:	fe b7       	in	r31, 0x3e	; 62
   1c436:	81 83       	std	Z+1, r24	; 0x01
   1c438:	92 83       	std	Z+2, r25	; 0x02
   1c43a:	a3 83       	std	Z+3, r26	; 0x03
   1c43c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1c440:	0e 94 07 85 	call	0x10a0e	; 0x10a0e <gpib_state_init>
    printf("GPIB State init done\n");
   1c444:	81 e8       	ldi	r24, 0x81	; 129
   1c446:	93 e4       	ldi	r25, 0x43	; 67
   1c448:	a0 e0       	ldi	r26, 0x00	; 0
   1c44a:	ed b7       	in	r30, 0x3d	; 61
   1c44c:	fe b7       	in	r31, 0x3e	; 62
   1c44e:	81 83       	std	Z+1, r24	; 0x01
   1c450:	92 83       	std	Z+2, r25	; 0x02
   1c452:	a3 83       	std	Z+3, r26	; 0x03
   1c454:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    sep();
   1c458:	0e 94 1d 30 	call	0x603a	; 0x603a <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1c45c:	80 e0       	ldi	r24, 0x00	; 0
   1c45e:	90 e0       	ldi	r25, 0x00	; 0
   1c460:	0e 94 c6 92 	call	0x1258c	; 0x1258c <display_Addresses>
    sep();
   1c464:	0e 94 1d 30 	call	0x603a	; 0x603a <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1c468:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1c46c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1c470:	ed b7       	in	r30, 0x3d	; 61
   1c472:	fe b7       	in	r31, 0x3e	; 62
   1c474:	95 83       	std	Z+5, r25	; 0x05
   1c476:	84 83       	std	Z+4, r24	; 0x04
   1c478:	8b e6       	ldi	r24, 0x6B	; 107
   1c47a:	93 e4       	ldi	r25, 0x43	; 67
   1c47c:	a0 e0       	ldi	r26, 0x00	; 0
   1c47e:	81 83       	std	Z+1, r24	; 0x01
   1c480:	92 83       	std	Z+2, r25	; 0x02
   1c482:	a3 83       	std	Z+3, r26	; 0x03
   1c484:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    sep();
   1c488:	0e 94 1d 30 	call	0x603a	; 0x603a <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1c48c:	0e 94 5e 9e 	call	0x13cbc	; 0x13cbc <format_drives>

#ifdef LCD_SUPPORT
	sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1c490:	83 e0       	ldi	r24, 0x03	; 3
   1c492:	0e 94 3b 96 	call	0x12c76	; 0x12c76 <count_drive_types>
   1c496:	8c 01       	movw	r16, r24
   1c498:	81 e0       	ldi	r24, 0x01	; 1
   1c49a:	0e 94 3b 96 	call	0x12c76	; 0x12c76 <count_drive_types>
   1c49e:	ed b7       	in	r30, 0x3d	; 61
   1c4a0:	fe b7       	in	r31, 0x3e	; 62
   1c4a2:	91 87       	std	Z+9, r25	; 0x09
   1c4a4:	80 87       	std	Z+8, r24	; 0x08
   1c4a6:	17 83       	std	Z+7, r17	; 0x07
   1c4a8:	06 83       	std	Z+6, r16	; 0x06
   1c4aa:	8a e5       	ldi	r24, 0x5A	; 90
   1c4ac:	93 e4       	ldi	r25, 0x43	; 67
   1c4ae:	a0 e0       	ldi	r26, 0x00	; 0
   1c4b0:	83 83       	std	Z+3, r24	; 0x03
   1c4b2:	94 83       	std	Z+4, r25	; 0x04
   1c4b4:	a5 83       	std	Z+5, r26	; 0x05
   1c4b6:	8e 01       	movw	r16, r28
   1c4b8:	04 5f       	subi	r16, 0xF4	; 244
   1c4ba:	1f 4f       	sbci	r17, 0xFF	; 255
   1c4bc:	12 83       	std	Z+2, r17	; 0x02
   1c4be:	01 83       	std	Z+1, r16	; 0x01
   1c4c0:	0e 94 fa 44 	call	0x89f4	; 0x89f4 <sprintf_P>
		(int) count_drive_types(SS80_TYPE),
		(int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1c4c4:	ed b7       	in	r30, 0x3d	; 61
   1c4c6:	fe b7       	in	r31, 0x3e	; 62
   1c4c8:	17 83       	std	Z+7, r17	; 0x07
   1c4ca:	06 83       	std	Z+6, r16	; 0x06
   1c4cc:	84 e5       	ldi	r24, 0x54	; 84
   1c4ce:	93 e4       	ldi	r25, 0x43	; 67
   1c4d0:	a0 e0       	ldi	r26, 0x00	; 0
   1c4d2:	83 83       	std	Z+3, r24	; 0x03
   1c4d4:	94 83       	std	Z+4, r25	; 0x04
   1c4d6:	a5 83       	std	Z+5, r26	; 0x05
   1c4d8:	8c e0       	ldi	r24, 0x0C	; 12
   1c4da:	93 e0       	ldi	r25, 0x03	; 3
   1c4dc:	92 83       	std	Z+2, r25	; 0x02
   1c4de:	81 83       	std	Z+1, r24	; 0x01
   1c4e0:	0e 94 fa 44 	call	0x89f4	; 0x89f4 <sprintf_P>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1c4e4:	8f e0       	ldi	r24, 0x0F	; 15
   1c4e6:	97 e1       	ldi	r25, 0x17	; 23
   1c4e8:	ed b7       	in	r30, 0x3d	; 61
   1c4ea:	fe b7       	in	r31, 0x3e	; 62
   1c4ec:	97 83       	std	Z+7, r25	; 0x07
   1c4ee:	86 83       	std	Z+6, r24	; 0x06
   1c4f0:	8e e4       	ldi	r24, 0x4E	; 78
   1c4f2:	93 e4       	ldi	r25, 0x43	; 67
   1c4f4:	a0 e0       	ldi	r26, 0x00	; 0
   1c4f6:	83 83       	std	Z+3, r24	; 0x03
   1c4f8:	94 83       	std	Z+4, r25	; 0x04
   1c4fa:	a5 83       	std	Z+5, r26	; 0x05
   1c4fc:	85 ef       	ldi	r24, 0xF5	; 245
   1c4fe:	92 e0       	ldi	r25, 0x02	; 2
   1c500:	92 83       	std	Z+2, r25	; 0x02
   1c502:	81 83       	std	Z+1, r24	; 0x01
   1c504:	0e 94 fa 44 	call	0x89f4	; 0x89f4 <sprintf_P>

	i2c_task_run();
   1c508:	0e 94 c2 2a 	call	0x5584	; 0x5584 <i2c_task_run>
	delayms(1000);
   1c50c:	68 ee       	ldi	r22, 0xE8	; 232
   1c50e:	73 e0       	ldi	r23, 0x03	; 3
   1c510:	80 e0       	ldi	r24, 0x00	; 0
   1c512:	90 e0       	ldi	r25, 0x00	; 0
   1c514:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <delayms>
    if(!i2c_task.done || i2c_task.error )
   1c518:	80 91 7c 17 	lds	r24, 0x177C	; 0x80177c <i2c_task+0x2>
   1c51c:	88 23       	and	r24, r24
   1c51e:	21 f0       	breq	.+8      	; 0x1c528 <main+0x384>
   1c520:	80 91 7d 17 	lds	r24, 0x177D	; 0x80177d <i2c_task+0x3>
   1c524:	88 23       	and	r24, r24
   1c526:	61 f0       	breq	.+24     	; 0x1c540 <main+0x39c>
	{
		i2c_display_task_errors();
   1c528:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <i2c_display_task_errors>
		printf("I2C LCD is NOT attached!\n");
   1c52c:	84 e3       	ldi	r24, 0x34	; 52
   1c52e:	93 e4       	ldi	r25, 0x43	; 67
   1c530:	a0 e0       	ldi	r26, 0x00	; 0
   1c532:	ed b7       	in	r30, 0x3d	; 61
   1c534:	fe b7       	in	r31, 0x3e	; 62
   1c536:	81 83       	std	Z+1, r24	; 0x01
   1c538:	92 83       	std	Z+2, r25	; 0x02
   1c53a:	a3 83       	std	Z+3, r26	; 0x03
   1c53c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
	}
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1c540:	80 e2       	ldi	r24, 0x20	; 32
   1c542:	93 e4       	ldi	r25, 0x43	; 67
   1c544:	a0 e0       	ldi	r26, 0x00	; 0
   1c546:	ed b7       	in	r30, 0x3d	; 61
   1c548:	fe b7       	in	r31, 0x3e	; 62
   1c54a:	81 83       	std	Z+1, r24	; 0x01
   1c54c:	92 83       	std	Z+2, r25	; 0x02
   1c54e:	a3 83       	std	Z+3, r26	; 0x03
   1c550:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        user_task(1);
   1c554:	81 e0       	ldi	r24, 0x01	; 1
   1c556:	1c de       	rcall	.-968    	; 0x1c190 <user_task>
   1c558:	fd cf       	rjmp	.-6      	; 0x1c554 <main+0x3b0>

0001c55a <__mulsi3>:
   1c55a:	db 01       	movw	r26, r22
   1c55c:	8f 93       	push	r24
   1c55e:	9f 93       	push	r25
   1c560:	8b d0       	rcall	.+278    	; 0x1c678 <__muluhisi3>
   1c562:	bf 91       	pop	r27
   1c564:	af 91       	pop	r26
   1c566:	a2 9f       	mul	r26, r18
   1c568:	80 0d       	add	r24, r0
   1c56a:	91 1d       	adc	r25, r1
   1c56c:	a3 9f       	mul	r26, r19
   1c56e:	90 0d       	add	r25, r0
   1c570:	b2 9f       	mul	r27, r18
   1c572:	90 0d       	add	r25, r0
   1c574:	11 24       	eor	r1, r1
   1c576:	08 95       	ret

0001c578 <__udivmodqi4>:
   1c578:	99 1b       	sub	r25, r25
   1c57a:	79 e0       	ldi	r23, 0x09	; 9
   1c57c:	04 c0       	rjmp	.+8      	; 0x1c586 <__udivmodqi4_ep>

0001c57e <__udivmodqi4_loop>:
   1c57e:	99 1f       	adc	r25, r25
   1c580:	96 17       	cp	r25, r22
   1c582:	08 f0       	brcs	.+2      	; 0x1c586 <__udivmodqi4_ep>
   1c584:	96 1b       	sub	r25, r22

0001c586 <__udivmodqi4_ep>:
   1c586:	88 1f       	adc	r24, r24
   1c588:	7a 95       	dec	r23
   1c58a:	c9 f7       	brne	.-14     	; 0x1c57e <__udivmodqi4_loop>
   1c58c:	80 95       	com	r24
   1c58e:	08 95       	ret

0001c590 <__udivmodhi4>:
   1c590:	aa 1b       	sub	r26, r26
   1c592:	bb 1b       	sub	r27, r27
   1c594:	51 e1       	ldi	r21, 0x11	; 17
   1c596:	07 c0       	rjmp	.+14     	; 0x1c5a6 <__udivmodhi4_ep>

0001c598 <__udivmodhi4_loop>:
   1c598:	aa 1f       	adc	r26, r26
   1c59a:	bb 1f       	adc	r27, r27
   1c59c:	a6 17       	cp	r26, r22
   1c59e:	b7 07       	cpc	r27, r23
   1c5a0:	10 f0       	brcs	.+4      	; 0x1c5a6 <__udivmodhi4_ep>
   1c5a2:	a6 1b       	sub	r26, r22
   1c5a4:	b7 0b       	sbc	r27, r23

0001c5a6 <__udivmodhi4_ep>:
   1c5a6:	88 1f       	adc	r24, r24
   1c5a8:	99 1f       	adc	r25, r25
   1c5aa:	5a 95       	dec	r21
   1c5ac:	a9 f7       	brne	.-22     	; 0x1c598 <__udivmodhi4_loop>
   1c5ae:	80 95       	com	r24
   1c5b0:	90 95       	com	r25
   1c5b2:	bc 01       	movw	r22, r24
   1c5b4:	cd 01       	movw	r24, r26
   1c5b6:	08 95       	ret

0001c5b8 <__divmodhi4>:
   1c5b8:	97 fb       	bst	r25, 7
   1c5ba:	07 2e       	mov	r0, r23
   1c5bc:	16 f4       	brtc	.+4      	; 0x1c5c2 <__divmodhi4+0xa>
   1c5be:	00 94       	com	r0
   1c5c0:	06 d0       	rcall	.+12     	; 0x1c5ce <__divmodhi4_neg1>
   1c5c2:	77 fd       	sbrc	r23, 7
   1c5c4:	08 d0       	rcall	.+16     	; 0x1c5d6 <__divmodhi4_neg2>
   1c5c6:	e4 df       	rcall	.-56     	; 0x1c590 <__udivmodhi4>
   1c5c8:	07 fc       	sbrc	r0, 7
   1c5ca:	05 d0       	rcall	.+10     	; 0x1c5d6 <__divmodhi4_neg2>
   1c5cc:	3e f4       	brtc	.+14     	; 0x1c5dc <__divmodhi4_exit>

0001c5ce <__divmodhi4_neg1>:
   1c5ce:	90 95       	com	r25
   1c5d0:	81 95       	neg	r24
   1c5d2:	9f 4f       	sbci	r25, 0xFF	; 255
   1c5d4:	08 95       	ret

0001c5d6 <__divmodhi4_neg2>:
   1c5d6:	70 95       	com	r23
   1c5d8:	61 95       	neg	r22
   1c5da:	7f 4f       	sbci	r23, 0xFF	; 255

0001c5dc <__divmodhi4_exit>:
   1c5dc:	08 95       	ret

0001c5de <__udivmodsi4>:
   1c5de:	a1 e2       	ldi	r26, 0x21	; 33
   1c5e0:	1a 2e       	mov	r1, r26
   1c5e2:	aa 1b       	sub	r26, r26
   1c5e4:	bb 1b       	sub	r27, r27
   1c5e6:	fd 01       	movw	r30, r26
   1c5e8:	0d c0       	rjmp	.+26     	; 0x1c604 <__udivmodsi4_ep>

0001c5ea <__udivmodsi4_loop>:
   1c5ea:	aa 1f       	adc	r26, r26
   1c5ec:	bb 1f       	adc	r27, r27
   1c5ee:	ee 1f       	adc	r30, r30
   1c5f0:	ff 1f       	adc	r31, r31
   1c5f2:	a2 17       	cp	r26, r18
   1c5f4:	b3 07       	cpc	r27, r19
   1c5f6:	e4 07       	cpc	r30, r20
   1c5f8:	f5 07       	cpc	r31, r21
   1c5fa:	20 f0       	brcs	.+8      	; 0x1c604 <__udivmodsi4_ep>
   1c5fc:	a2 1b       	sub	r26, r18
   1c5fe:	b3 0b       	sbc	r27, r19
   1c600:	e4 0b       	sbc	r30, r20
   1c602:	f5 0b       	sbc	r31, r21

0001c604 <__udivmodsi4_ep>:
   1c604:	66 1f       	adc	r22, r22
   1c606:	77 1f       	adc	r23, r23
   1c608:	88 1f       	adc	r24, r24
   1c60a:	99 1f       	adc	r25, r25
   1c60c:	1a 94       	dec	r1
   1c60e:	69 f7       	brne	.-38     	; 0x1c5ea <__udivmodsi4_loop>
   1c610:	60 95       	com	r22
   1c612:	70 95       	com	r23
   1c614:	80 95       	com	r24
   1c616:	90 95       	com	r25
   1c618:	9b 01       	movw	r18, r22
   1c61a:	ac 01       	movw	r20, r24
   1c61c:	bd 01       	movw	r22, r26
   1c61e:	cf 01       	movw	r24, r30
   1c620:	08 95       	ret

0001c622 <__divmodsi4>:
   1c622:	05 2e       	mov	r0, r21
   1c624:	97 fb       	bst	r25, 7
   1c626:	16 f4       	brtc	.+4      	; 0x1c62c <__divmodsi4+0xa>
   1c628:	00 94       	com	r0
   1c62a:	0f d0       	rcall	.+30     	; 0x1c64a <__negsi2>
   1c62c:	57 fd       	sbrc	r21, 7
   1c62e:	05 d0       	rcall	.+10     	; 0x1c63a <__divmodsi4_neg2>
   1c630:	d6 df       	rcall	.-84     	; 0x1c5de <__udivmodsi4>
   1c632:	07 fc       	sbrc	r0, 7
   1c634:	02 d0       	rcall	.+4      	; 0x1c63a <__divmodsi4_neg2>
   1c636:	46 f4       	brtc	.+16     	; 0x1c648 <__divmodsi4_exit>
   1c638:	08 c0       	rjmp	.+16     	; 0x1c64a <__negsi2>

0001c63a <__divmodsi4_neg2>:
   1c63a:	50 95       	com	r21
   1c63c:	40 95       	com	r20
   1c63e:	30 95       	com	r19
   1c640:	21 95       	neg	r18
   1c642:	3f 4f       	sbci	r19, 0xFF	; 255
   1c644:	4f 4f       	sbci	r20, 0xFF	; 255
   1c646:	5f 4f       	sbci	r21, 0xFF	; 255

0001c648 <__divmodsi4_exit>:
   1c648:	08 95       	ret

0001c64a <__negsi2>:
   1c64a:	90 95       	com	r25
   1c64c:	80 95       	com	r24
   1c64e:	70 95       	com	r23
   1c650:	61 95       	neg	r22
   1c652:	7f 4f       	sbci	r23, 0xFF	; 255
   1c654:	8f 4f       	sbci	r24, 0xFF	; 255
   1c656:	9f 4f       	sbci	r25, 0xFF	; 255
   1c658:	08 95       	ret

0001c65a <__tablejump2__>:
   1c65a:	ee 0f       	add	r30, r30
   1c65c:	ff 1f       	adc	r31, r31
   1c65e:	00 24       	eor	r0, r0
   1c660:	00 1c       	adc	r0, r0
   1c662:	0b be       	out	0x3b, r0	; 59
   1c664:	07 90       	elpm	r0, Z+
   1c666:	f6 91       	elpm	r31, Z
   1c668:	e0 2d       	mov	r30, r0
   1c66a:	09 94       	ijmp

0001c66c <__usmulhisi3>:
   1c66c:	6f d0       	rcall	.+222    	; 0x1c74c <__umulhisi3>

0001c66e <__usmulhisi3_tail>:
   1c66e:	b7 ff       	sbrs	r27, 7
   1c670:	08 95       	ret
   1c672:	82 1b       	sub	r24, r18
   1c674:	93 0b       	sbc	r25, r19
   1c676:	08 95       	ret

0001c678 <__muluhisi3>:
   1c678:	69 d0       	rcall	.+210    	; 0x1c74c <__umulhisi3>
   1c67a:	a5 9f       	mul	r26, r21
   1c67c:	90 0d       	add	r25, r0
   1c67e:	b4 9f       	mul	r27, r20
   1c680:	90 0d       	add	r25, r0
   1c682:	a4 9f       	mul	r26, r20
   1c684:	80 0d       	add	r24, r0
   1c686:	91 1d       	adc	r25, r1
   1c688:	11 24       	eor	r1, r1
   1c68a:	08 95       	ret

0001c68c <__mulshisi3>:
   1c68c:	b7 ff       	sbrs	r27, 7
   1c68e:	f4 cf       	rjmp	.-24     	; 0x1c678 <__muluhisi3>

0001c690 <__mulohisi3>:
   1c690:	f3 df       	rcall	.-26     	; 0x1c678 <__muluhisi3>
   1c692:	82 1b       	sub	r24, r18
   1c694:	93 0b       	sbc	r25, r19
   1c696:	08 95       	ret

0001c698 <__negdi2>:
   1c698:	60 95       	com	r22
   1c69a:	70 95       	com	r23
   1c69c:	80 95       	com	r24
   1c69e:	90 95       	com	r25
   1c6a0:	30 95       	com	r19
   1c6a2:	40 95       	com	r20
   1c6a4:	50 95       	com	r21
   1c6a6:	21 95       	neg	r18
   1c6a8:	3f 4f       	sbci	r19, 0xFF	; 255
   1c6aa:	4f 4f       	sbci	r20, 0xFF	; 255
   1c6ac:	5f 4f       	sbci	r21, 0xFF	; 255
   1c6ae:	6f 4f       	sbci	r22, 0xFF	; 255
   1c6b0:	7f 4f       	sbci	r23, 0xFF	; 255
   1c6b2:	8f 4f       	sbci	r24, 0xFF	; 255
   1c6b4:	9f 4f       	sbci	r25, 0xFF	; 255
   1c6b6:	08 95       	ret

0001c6b8 <__prologue_saves__>:
   1c6b8:	2f 92       	push	r2
   1c6ba:	3f 92       	push	r3
   1c6bc:	4f 92       	push	r4
   1c6be:	5f 92       	push	r5
   1c6c0:	6f 92       	push	r6
   1c6c2:	7f 92       	push	r7
   1c6c4:	8f 92       	push	r8
   1c6c6:	9f 92       	push	r9
   1c6c8:	af 92       	push	r10
   1c6ca:	bf 92       	push	r11
   1c6cc:	cf 92       	push	r12
   1c6ce:	df 92       	push	r13
   1c6d0:	ef 92       	push	r14
   1c6d2:	ff 92       	push	r15
   1c6d4:	0f 93       	push	r16
   1c6d6:	1f 93       	push	r17
   1c6d8:	cf 93       	push	r28
   1c6da:	df 93       	push	r29
   1c6dc:	cd b7       	in	r28, 0x3d	; 61
   1c6de:	de b7       	in	r29, 0x3e	; 62
   1c6e0:	ca 1b       	sub	r28, r26
   1c6e2:	db 0b       	sbc	r29, r27
   1c6e4:	0f b6       	in	r0, 0x3f	; 63
   1c6e6:	f8 94       	cli
   1c6e8:	de bf       	out	0x3e, r29	; 62
   1c6ea:	0f be       	out	0x3f, r0	; 63
   1c6ec:	cd bf       	out	0x3d, r28	; 61
   1c6ee:	09 94       	ijmp

0001c6f0 <__epilogue_restores__>:
   1c6f0:	2a 88       	ldd	r2, Y+18	; 0x12
   1c6f2:	39 88       	ldd	r3, Y+17	; 0x11
   1c6f4:	48 88       	ldd	r4, Y+16	; 0x10
   1c6f6:	5f 84       	ldd	r5, Y+15	; 0x0f
   1c6f8:	6e 84       	ldd	r6, Y+14	; 0x0e
   1c6fa:	7d 84       	ldd	r7, Y+13	; 0x0d
   1c6fc:	8c 84       	ldd	r8, Y+12	; 0x0c
   1c6fe:	9b 84       	ldd	r9, Y+11	; 0x0b
   1c700:	aa 84       	ldd	r10, Y+10	; 0x0a
   1c702:	b9 84       	ldd	r11, Y+9	; 0x09
   1c704:	c8 84       	ldd	r12, Y+8	; 0x08
   1c706:	df 80       	ldd	r13, Y+7	; 0x07
   1c708:	ee 80       	ldd	r14, Y+6	; 0x06
   1c70a:	fd 80       	ldd	r15, Y+5	; 0x05
   1c70c:	0c 81       	ldd	r16, Y+4	; 0x04
   1c70e:	1b 81       	ldd	r17, Y+3	; 0x03
   1c710:	aa 81       	ldd	r26, Y+2	; 0x02
   1c712:	b9 81       	ldd	r27, Y+1	; 0x01
   1c714:	ce 0f       	add	r28, r30
   1c716:	d1 1d       	adc	r29, r1
   1c718:	0f b6       	in	r0, 0x3f	; 63
   1c71a:	f8 94       	cli
   1c71c:	de bf       	out	0x3e, r29	; 62
   1c71e:	0f be       	out	0x3f, r0	; 63
   1c720:	cd bf       	out	0x3d, r28	; 61
   1c722:	ed 01       	movw	r28, r26
   1c724:	08 95       	ret

0001c726 <__xload_1>:
   1c726:	57 fd       	sbrc	r21, 7
   1c728:	03 c0       	rjmp	.+6      	; 0x1c730 <__xload_1+0xa>
   1c72a:	5b bf       	out	0x3b, r21	; 59
   1c72c:	67 91       	elpm	r22, Z+
   1c72e:	08 95       	ret
   1c730:	60 81       	ld	r22, Z
   1c732:	08 95       	ret

0001c734 <__cmpdi2_s8>:
   1c734:	00 24       	eor	r0, r0
   1c736:	a7 fd       	sbrc	r26, 7
   1c738:	00 94       	com	r0
   1c73a:	2a 17       	cp	r18, r26
   1c73c:	30 05       	cpc	r19, r0
   1c73e:	40 05       	cpc	r20, r0
   1c740:	50 05       	cpc	r21, r0
   1c742:	60 05       	cpc	r22, r0
   1c744:	70 05       	cpc	r23, r0
   1c746:	80 05       	cpc	r24, r0
   1c748:	90 05       	cpc	r25, r0
   1c74a:	08 95       	ret

0001c74c <__umulhisi3>:
   1c74c:	a2 9f       	mul	r26, r18
   1c74e:	b0 01       	movw	r22, r0
   1c750:	b3 9f       	mul	r27, r19
   1c752:	c0 01       	movw	r24, r0
   1c754:	a3 9f       	mul	r26, r19
   1c756:	70 0d       	add	r23, r0
   1c758:	81 1d       	adc	r24, r1
   1c75a:	11 24       	eor	r1, r1
   1c75c:	91 1d       	adc	r25, r1
   1c75e:	b2 9f       	mul	r27, r18
   1c760:	70 0d       	add	r23, r0
   1c762:	81 1d       	adc	r24, r1
   1c764:	11 24       	eor	r1, r1
   1c766:	91 1d       	adc	r25, r1
   1c768:	08 95       	ret

0001c76a <__subsf3>:
   1c76a:	50 58       	subi	r21, 0x80	; 128

0001c76c <__addsf3>:
   1c76c:	bb 27       	eor	r27, r27
   1c76e:	aa 27       	eor	r26, r26
   1c770:	0e d0       	rcall	.+28     	; 0x1c78e <__addsf3x>
   1c772:	75 c1       	rjmp	.+746    	; 0x1ca5e <__fp_round>
   1c774:	66 d1       	rcall	.+716    	; 0x1ca42 <__fp_pscA>
   1c776:	30 f0       	brcs	.+12     	; 0x1c784 <__addsf3+0x18>
   1c778:	6b d1       	rcall	.+726    	; 0x1ca50 <__fp_pscB>
   1c77a:	20 f0       	brcs	.+8      	; 0x1c784 <__addsf3+0x18>
   1c77c:	31 f4       	brne	.+12     	; 0x1c78a <__addsf3+0x1e>
   1c77e:	9f 3f       	cpi	r25, 0xFF	; 255
   1c780:	11 f4       	brne	.+4      	; 0x1c786 <__addsf3+0x1a>
   1c782:	1e f4       	brtc	.+6      	; 0x1c78a <__addsf3+0x1e>
   1c784:	5b c1       	rjmp	.+694    	; 0x1ca3c <__fp_nan>
   1c786:	0e f4       	brtc	.+2      	; 0x1c78a <__addsf3+0x1e>
   1c788:	e0 95       	com	r30
   1c78a:	e7 fb       	bst	r30, 7
   1c78c:	51 c1       	rjmp	.+674    	; 0x1ca30 <__fp_inf>

0001c78e <__addsf3x>:
   1c78e:	e9 2f       	mov	r30, r25
   1c790:	77 d1       	rcall	.+750    	; 0x1ca80 <__fp_split3>
   1c792:	80 f3       	brcs	.-32     	; 0x1c774 <__addsf3+0x8>
   1c794:	ba 17       	cp	r27, r26
   1c796:	62 07       	cpc	r22, r18
   1c798:	73 07       	cpc	r23, r19
   1c79a:	84 07       	cpc	r24, r20
   1c79c:	95 07       	cpc	r25, r21
   1c79e:	18 f0       	brcs	.+6      	; 0x1c7a6 <__addsf3x+0x18>
   1c7a0:	71 f4       	brne	.+28     	; 0x1c7be <__addsf3x+0x30>
   1c7a2:	9e f5       	brtc	.+102    	; 0x1c80a <__addsf3x+0x7c>
   1c7a4:	8f c1       	rjmp	.+798    	; 0x1cac4 <__fp_zero>
   1c7a6:	0e f4       	brtc	.+2      	; 0x1c7aa <__addsf3x+0x1c>
   1c7a8:	e0 95       	com	r30
   1c7aa:	0b 2e       	mov	r0, r27
   1c7ac:	ba 2f       	mov	r27, r26
   1c7ae:	a0 2d       	mov	r26, r0
   1c7b0:	0b 01       	movw	r0, r22
   1c7b2:	b9 01       	movw	r22, r18
   1c7b4:	90 01       	movw	r18, r0
   1c7b6:	0c 01       	movw	r0, r24
   1c7b8:	ca 01       	movw	r24, r20
   1c7ba:	a0 01       	movw	r20, r0
   1c7bc:	11 24       	eor	r1, r1
   1c7be:	ff 27       	eor	r31, r31
   1c7c0:	59 1b       	sub	r21, r25
   1c7c2:	99 f0       	breq	.+38     	; 0x1c7ea <__addsf3x+0x5c>
   1c7c4:	59 3f       	cpi	r21, 0xF9	; 249
   1c7c6:	50 f4       	brcc	.+20     	; 0x1c7dc <__addsf3x+0x4e>
   1c7c8:	50 3e       	cpi	r21, 0xE0	; 224
   1c7ca:	68 f1       	brcs	.+90     	; 0x1c826 <__addsf3x+0x98>
   1c7cc:	1a 16       	cp	r1, r26
   1c7ce:	f0 40       	sbci	r31, 0x00	; 0
   1c7d0:	a2 2f       	mov	r26, r18
   1c7d2:	23 2f       	mov	r18, r19
   1c7d4:	34 2f       	mov	r19, r20
   1c7d6:	44 27       	eor	r20, r20
   1c7d8:	58 5f       	subi	r21, 0xF8	; 248
   1c7da:	f3 cf       	rjmp	.-26     	; 0x1c7c2 <__addsf3x+0x34>
   1c7dc:	46 95       	lsr	r20
   1c7de:	37 95       	ror	r19
   1c7e0:	27 95       	ror	r18
   1c7e2:	a7 95       	ror	r26
   1c7e4:	f0 40       	sbci	r31, 0x00	; 0
   1c7e6:	53 95       	inc	r21
   1c7e8:	c9 f7       	brne	.-14     	; 0x1c7dc <__addsf3x+0x4e>
   1c7ea:	7e f4       	brtc	.+30     	; 0x1c80a <__addsf3x+0x7c>
   1c7ec:	1f 16       	cp	r1, r31
   1c7ee:	ba 0b       	sbc	r27, r26
   1c7f0:	62 0b       	sbc	r22, r18
   1c7f2:	73 0b       	sbc	r23, r19
   1c7f4:	84 0b       	sbc	r24, r20
   1c7f6:	ba f0       	brmi	.+46     	; 0x1c826 <__addsf3x+0x98>
   1c7f8:	91 50       	subi	r25, 0x01	; 1
   1c7fa:	a1 f0       	breq	.+40     	; 0x1c824 <__addsf3x+0x96>
   1c7fc:	ff 0f       	add	r31, r31
   1c7fe:	bb 1f       	adc	r27, r27
   1c800:	66 1f       	adc	r22, r22
   1c802:	77 1f       	adc	r23, r23
   1c804:	88 1f       	adc	r24, r24
   1c806:	c2 f7       	brpl	.-16     	; 0x1c7f8 <__addsf3x+0x6a>
   1c808:	0e c0       	rjmp	.+28     	; 0x1c826 <__addsf3x+0x98>
   1c80a:	ba 0f       	add	r27, r26
   1c80c:	62 1f       	adc	r22, r18
   1c80e:	73 1f       	adc	r23, r19
   1c810:	84 1f       	adc	r24, r20
   1c812:	48 f4       	brcc	.+18     	; 0x1c826 <__addsf3x+0x98>
   1c814:	87 95       	ror	r24
   1c816:	77 95       	ror	r23
   1c818:	67 95       	ror	r22
   1c81a:	b7 95       	ror	r27
   1c81c:	f7 95       	ror	r31
   1c81e:	9e 3f       	cpi	r25, 0xFE	; 254
   1c820:	08 f0       	brcs	.+2      	; 0x1c824 <__addsf3x+0x96>
   1c822:	b3 cf       	rjmp	.-154    	; 0x1c78a <__addsf3+0x1e>
   1c824:	93 95       	inc	r25
   1c826:	88 0f       	add	r24, r24
   1c828:	08 f0       	brcs	.+2      	; 0x1c82c <__addsf3x+0x9e>
   1c82a:	99 27       	eor	r25, r25
   1c82c:	ee 0f       	add	r30, r30
   1c82e:	97 95       	ror	r25
   1c830:	87 95       	ror	r24
   1c832:	08 95       	ret

0001c834 <__cmpsf2>:
   1c834:	d9 d0       	rcall	.+434    	; 0x1c9e8 <__fp_cmp>
   1c836:	08 f4       	brcc	.+2      	; 0x1c83a <__cmpsf2+0x6>
   1c838:	81 e0       	ldi	r24, 0x01	; 1
   1c83a:	08 95       	ret

0001c83c <__divsf3>:
   1c83c:	0c d0       	rcall	.+24     	; 0x1c856 <__divsf3x>
   1c83e:	0f c1       	rjmp	.+542    	; 0x1ca5e <__fp_round>
   1c840:	07 d1       	rcall	.+526    	; 0x1ca50 <__fp_pscB>
   1c842:	40 f0       	brcs	.+16     	; 0x1c854 <__divsf3+0x18>
   1c844:	fe d0       	rcall	.+508    	; 0x1ca42 <__fp_pscA>
   1c846:	30 f0       	brcs	.+12     	; 0x1c854 <__divsf3+0x18>
   1c848:	21 f4       	brne	.+8      	; 0x1c852 <__divsf3+0x16>
   1c84a:	5f 3f       	cpi	r21, 0xFF	; 255
   1c84c:	19 f0       	breq	.+6      	; 0x1c854 <__divsf3+0x18>
   1c84e:	f0 c0       	rjmp	.+480    	; 0x1ca30 <__fp_inf>
   1c850:	51 11       	cpse	r21, r1
   1c852:	39 c1       	rjmp	.+626    	; 0x1cac6 <__fp_szero>
   1c854:	f3 c0       	rjmp	.+486    	; 0x1ca3c <__fp_nan>

0001c856 <__divsf3x>:
   1c856:	14 d1       	rcall	.+552    	; 0x1ca80 <__fp_split3>
   1c858:	98 f3       	brcs	.-26     	; 0x1c840 <__divsf3+0x4>

0001c85a <__divsf3_pse>:
   1c85a:	99 23       	and	r25, r25
   1c85c:	c9 f3       	breq	.-14     	; 0x1c850 <__divsf3+0x14>
   1c85e:	55 23       	and	r21, r21
   1c860:	b1 f3       	breq	.-20     	; 0x1c84e <__divsf3+0x12>
   1c862:	95 1b       	sub	r25, r21
   1c864:	55 0b       	sbc	r21, r21
   1c866:	bb 27       	eor	r27, r27
   1c868:	aa 27       	eor	r26, r26
   1c86a:	62 17       	cp	r22, r18
   1c86c:	73 07       	cpc	r23, r19
   1c86e:	84 07       	cpc	r24, r20
   1c870:	38 f0       	brcs	.+14     	; 0x1c880 <__divsf3_pse+0x26>
   1c872:	9f 5f       	subi	r25, 0xFF	; 255
   1c874:	5f 4f       	sbci	r21, 0xFF	; 255
   1c876:	22 0f       	add	r18, r18
   1c878:	33 1f       	adc	r19, r19
   1c87a:	44 1f       	adc	r20, r20
   1c87c:	aa 1f       	adc	r26, r26
   1c87e:	a9 f3       	breq	.-22     	; 0x1c86a <__divsf3_pse+0x10>
   1c880:	33 d0       	rcall	.+102    	; 0x1c8e8 <__divsf3_pse+0x8e>
   1c882:	0e 2e       	mov	r0, r30
   1c884:	3a f0       	brmi	.+14     	; 0x1c894 <__divsf3_pse+0x3a>
   1c886:	e0 e8       	ldi	r30, 0x80	; 128
   1c888:	30 d0       	rcall	.+96     	; 0x1c8ea <__divsf3_pse+0x90>
   1c88a:	91 50       	subi	r25, 0x01	; 1
   1c88c:	50 40       	sbci	r21, 0x00	; 0
   1c88e:	e6 95       	lsr	r30
   1c890:	00 1c       	adc	r0, r0
   1c892:	ca f7       	brpl	.-14     	; 0x1c886 <__divsf3_pse+0x2c>
   1c894:	29 d0       	rcall	.+82     	; 0x1c8e8 <__divsf3_pse+0x8e>
   1c896:	fe 2f       	mov	r31, r30
   1c898:	27 d0       	rcall	.+78     	; 0x1c8e8 <__divsf3_pse+0x8e>
   1c89a:	66 0f       	add	r22, r22
   1c89c:	77 1f       	adc	r23, r23
   1c89e:	88 1f       	adc	r24, r24
   1c8a0:	bb 1f       	adc	r27, r27
   1c8a2:	26 17       	cp	r18, r22
   1c8a4:	37 07       	cpc	r19, r23
   1c8a6:	48 07       	cpc	r20, r24
   1c8a8:	ab 07       	cpc	r26, r27
   1c8aa:	b0 e8       	ldi	r27, 0x80	; 128
   1c8ac:	09 f0       	breq	.+2      	; 0x1c8b0 <__divsf3_pse+0x56>
   1c8ae:	bb 0b       	sbc	r27, r27
   1c8b0:	80 2d       	mov	r24, r0
   1c8b2:	bf 01       	movw	r22, r30
   1c8b4:	ff 27       	eor	r31, r31
   1c8b6:	93 58       	subi	r25, 0x83	; 131
   1c8b8:	5f 4f       	sbci	r21, 0xFF	; 255
   1c8ba:	2a f0       	brmi	.+10     	; 0x1c8c6 <__divsf3_pse+0x6c>
   1c8bc:	9e 3f       	cpi	r25, 0xFE	; 254
   1c8be:	51 05       	cpc	r21, r1
   1c8c0:	68 f0       	brcs	.+26     	; 0x1c8dc <__divsf3_pse+0x82>
   1c8c2:	b6 c0       	rjmp	.+364    	; 0x1ca30 <__fp_inf>
   1c8c4:	00 c1       	rjmp	.+512    	; 0x1cac6 <__fp_szero>
   1c8c6:	5f 3f       	cpi	r21, 0xFF	; 255
   1c8c8:	ec f3       	brlt	.-6      	; 0x1c8c4 <__divsf3_pse+0x6a>
   1c8ca:	98 3e       	cpi	r25, 0xE8	; 232
   1c8cc:	dc f3       	brlt	.-10     	; 0x1c8c4 <__divsf3_pse+0x6a>
   1c8ce:	86 95       	lsr	r24
   1c8d0:	77 95       	ror	r23
   1c8d2:	67 95       	ror	r22
   1c8d4:	b7 95       	ror	r27
   1c8d6:	f7 95       	ror	r31
   1c8d8:	9f 5f       	subi	r25, 0xFF	; 255
   1c8da:	c9 f7       	brne	.-14     	; 0x1c8ce <__divsf3_pse+0x74>
   1c8dc:	88 0f       	add	r24, r24
   1c8de:	91 1d       	adc	r25, r1
   1c8e0:	96 95       	lsr	r25
   1c8e2:	87 95       	ror	r24
   1c8e4:	97 f9       	bld	r25, 7
   1c8e6:	08 95       	ret
   1c8e8:	e1 e0       	ldi	r30, 0x01	; 1
   1c8ea:	66 0f       	add	r22, r22
   1c8ec:	77 1f       	adc	r23, r23
   1c8ee:	88 1f       	adc	r24, r24
   1c8f0:	bb 1f       	adc	r27, r27
   1c8f2:	62 17       	cp	r22, r18
   1c8f4:	73 07       	cpc	r23, r19
   1c8f6:	84 07       	cpc	r24, r20
   1c8f8:	ba 07       	cpc	r27, r26
   1c8fa:	20 f0       	brcs	.+8      	; 0x1c904 <__divsf3_pse+0xaa>
   1c8fc:	62 1b       	sub	r22, r18
   1c8fe:	73 0b       	sbc	r23, r19
   1c900:	84 0b       	sbc	r24, r20
   1c902:	ba 0b       	sbc	r27, r26
   1c904:	ee 1f       	adc	r30, r30
   1c906:	88 f7       	brcc	.-30     	; 0x1c8ea <__divsf3_pse+0x90>
   1c908:	e0 95       	com	r30
   1c90a:	08 95       	ret

0001c90c <__fixsfsi>:
   1c90c:	04 d0       	rcall	.+8      	; 0x1c916 <__fixunssfsi>
   1c90e:	68 94       	set
   1c910:	b1 11       	cpse	r27, r1
   1c912:	d9 c0       	rjmp	.+434    	; 0x1cac6 <__fp_szero>
   1c914:	08 95       	ret

0001c916 <__fixunssfsi>:
   1c916:	bc d0       	rcall	.+376    	; 0x1ca90 <__fp_splitA>
   1c918:	88 f0       	brcs	.+34     	; 0x1c93c <__fixunssfsi+0x26>
   1c91a:	9f 57       	subi	r25, 0x7F	; 127
   1c91c:	90 f0       	brcs	.+36     	; 0x1c942 <__fixunssfsi+0x2c>
   1c91e:	b9 2f       	mov	r27, r25
   1c920:	99 27       	eor	r25, r25
   1c922:	b7 51       	subi	r27, 0x17	; 23
   1c924:	a0 f0       	brcs	.+40     	; 0x1c94e <__fixunssfsi+0x38>
   1c926:	d1 f0       	breq	.+52     	; 0x1c95c <__fixunssfsi+0x46>
   1c928:	66 0f       	add	r22, r22
   1c92a:	77 1f       	adc	r23, r23
   1c92c:	88 1f       	adc	r24, r24
   1c92e:	99 1f       	adc	r25, r25
   1c930:	1a f0       	brmi	.+6      	; 0x1c938 <__fixunssfsi+0x22>
   1c932:	ba 95       	dec	r27
   1c934:	c9 f7       	brne	.-14     	; 0x1c928 <__fixunssfsi+0x12>
   1c936:	12 c0       	rjmp	.+36     	; 0x1c95c <__fixunssfsi+0x46>
   1c938:	b1 30       	cpi	r27, 0x01	; 1
   1c93a:	81 f0       	breq	.+32     	; 0x1c95c <__fixunssfsi+0x46>
   1c93c:	c3 d0       	rcall	.+390    	; 0x1cac4 <__fp_zero>
   1c93e:	b1 e0       	ldi	r27, 0x01	; 1
   1c940:	08 95       	ret
   1c942:	c0 c0       	rjmp	.+384    	; 0x1cac4 <__fp_zero>
   1c944:	67 2f       	mov	r22, r23
   1c946:	78 2f       	mov	r23, r24
   1c948:	88 27       	eor	r24, r24
   1c94a:	b8 5f       	subi	r27, 0xF8	; 248
   1c94c:	39 f0       	breq	.+14     	; 0x1c95c <__fixunssfsi+0x46>
   1c94e:	b9 3f       	cpi	r27, 0xF9	; 249
   1c950:	cc f3       	brlt	.-14     	; 0x1c944 <__fixunssfsi+0x2e>
   1c952:	86 95       	lsr	r24
   1c954:	77 95       	ror	r23
   1c956:	67 95       	ror	r22
   1c958:	b3 95       	inc	r27
   1c95a:	d9 f7       	brne	.-10     	; 0x1c952 <__fixunssfsi+0x3c>
   1c95c:	3e f4       	brtc	.+14     	; 0x1c96c <__fixunssfsi+0x56>
   1c95e:	90 95       	com	r25
   1c960:	80 95       	com	r24
   1c962:	70 95       	com	r23
   1c964:	61 95       	neg	r22
   1c966:	7f 4f       	sbci	r23, 0xFF	; 255
   1c968:	8f 4f       	sbci	r24, 0xFF	; 255
   1c96a:	9f 4f       	sbci	r25, 0xFF	; 255
   1c96c:	08 95       	ret

0001c96e <__floatunsisf>:
   1c96e:	e8 94       	clt
   1c970:	09 c0       	rjmp	.+18     	; 0x1c984 <__floatsisf+0x12>

0001c972 <__floatsisf>:
   1c972:	97 fb       	bst	r25, 7
   1c974:	3e f4       	brtc	.+14     	; 0x1c984 <__floatsisf+0x12>
   1c976:	90 95       	com	r25
   1c978:	80 95       	com	r24
   1c97a:	70 95       	com	r23
   1c97c:	61 95       	neg	r22
   1c97e:	7f 4f       	sbci	r23, 0xFF	; 255
   1c980:	8f 4f       	sbci	r24, 0xFF	; 255
   1c982:	9f 4f       	sbci	r25, 0xFF	; 255
   1c984:	99 23       	and	r25, r25
   1c986:	a9 f0       	breq	.+42     	; 0x1c9b2 <__floatsisf+0x40>
   1c988:	f9 2f       	mov	r31, r25
   1c98a:	96 e9       	ldi	r25, 0x96	; 150
   1c98c:	bb 27       	eor	r27, r27
   1c98e:	93 95       	inc	r25
   1c990:	f6 95       	lsr	r31
   1c992:	87 95       	ror	r24
   1c994:	77 95       	ror	r23
   1c996:	67 95       	ror	r22
   1c998:	b7 95       	ror	r27
   1c99a:	f1 11       	cpse	r31, r1
   1c99c:	f8 cf       	rjmp	.-16     	; 0x1c98e <__floatsisf+0x1c>
   1c99e:	fa f4       	brpl	.+62     	; 0x1c9de <__floatsisf+0x6c>
   1c9a0:	bb 0f       	add	r27, r27
   1c9a2:	11 f4       	brne	.+4      	; 0x1c9a8 <__floatsisf+0x36>
   1c9a4:	60 ff       	sbrs	r22, 0
   1c9a6:	1b c0       	rjmp	.+54     	; 0x1c9de <__floatsisf+0x6c>
   1c9a8:	6f 5f       	subi	r22, 0xFF	; 255
   1c9aa:	7f 4f       	sbci	r23, 0xFF	; 255
   1c9ac:	8f 4f       	sbci	r24, 0xFF	; 255
   1c9ae:	9f 4f       	sbci	r25, 0xFF	; 255
   1c9b0:	16 c0       	rjmp	.+44     	; 0x1c9de <__floatsisf+0x6c>
   1c9b2:	88 23       	and	r24, r24
   1c9b4:	11 f0       	breq	.+4      	; 0x1c9ba <__floatsisf+0x48>
   1c9b6:	96 e9       	ldi	r25, 0x96	; 150
   1c9b8:	11 c0       	rjmp	.+34     	; 0x1c9dc <__floatsisf+0x6a>
   1c9ba:	77 23       	and	r23, r23
   1c9bc:	21 f0       	breq	.+8      	; 0x1c9c6 <__floatsisf+0x54>
   1c9be:	9e e8       	ldi	r25, 0x8E	; 142
   1c9c0:	87 2f       	mov	r24, r23
   1c9c2:	76 2f       	mov	r23, r22
   1c9c4:	05 c0       	rjmp	.+10     	; 0x1c9d0 <__floatsisf+0x5e>
   1c9c6:	66 23       	and	r22, r22
   1c9c8:	71 f0       	breq	.+28     	; 0x1c9e6 <__floatsisf+0x74>
   1c9ca:	96 e8       	ldi	r25, 0x86	; 134
   1c9cc:	86 2f       	mov	r24, r22
   1c9ce:	70 e0       	ldi	r23, 0x00	; 0
   1c9d0:	60 e0       	ldi	r22, 0x00	; 0
   1c9d2:	2a f0       	brmi	.+10     	; 0x1c9de <__floatsisf+0x6c>
   1c9d4:	9a 95       	dec	r25
   1c9d6:	66 0f       	add	r22, r22
   1c9d8:	77 1f       	adc	r23, r23
   1c9da:	88 1f       	adc	r24, r24
   1c9dc:	da f7       	brpl	.-10     	; 0x1c9d4 <__floatsisf+0x62>
   1c9de:	88 0f       	add	r24, r24
   1c9e0:	96 95       	lsr	r25
   1c9e2:	87 95       	ror	r24
   1c9e4:	97 f9       	bld	r25, 7
   1c9e6:	08 95       	ret

0001c9e8 <__fp_cmp>:
   1c9e8:	99 0f       	add	r25, r25
   1c9ea:	00 08       	sbc	r0, r0
   1c9ec:	55 0f       	add	r21, r21
   1c9ee:	aa 0b       	sbc	r26, r26
   1c9f0:	e0 e8       	ldi	r30, 0x80	; 128
   1c9f2:	fe ef       	ldi	r31, 0xFE	; 254
   1c9f4:	16 16       	cp	r1, r22
   1c9f6:	17 06       	cpc	r1, r23
   1c9f8:	e8 07       	cpc	r30, r24
   1c9fa:	f9 07       	cpc	r31, r25
   1c9fc:	c0 f0       	brcs	.+48     	; 0x1ca2e <__fp_cmp+0x46>
   1c9fe:	12 16       	cp	r1, r18
   1ca00:	13 06       	cpc	r1, r19
   1ca02:	e4 07       	cpc	r30, r20
   1ca04:	f5 07       	cpc	r31, r21
   1ca06:	98 f0       	brcs	.+38     	; 0x1ca2e <__fp_cmp+0x46>
   1ca08:	62 1b       	sub	r22, r18
   1ca0a:	73 0b       	sbc	r23, r19
   1ca0c:	84 0b       	sbc	r24, r20
   1ca0e:	95 0b       	sbc	r25, r21
   1ca10:	39 f4       	brne	.+14     	; 0x1ca20 <__fp_cmp+0x38>
   1ca12:	0a 26       	eor	r0, r26
   1ca14:	61 f0       	breq	.+24     	; 0x1ca2e <__fp_cmp+0x46>
   1ca16:	23 2b       	or	r18, r19
   1ca18:	24 2b       	or	r18, r20
   1ca1a:	25 2b       	or	r18, r21
   1ca1c:	21 f4       	brne	.+8      	; 0x1ca26 <__fp_cmp+0x3e>
   1ca1e:	08 95       	ret
   1ca20:	0a 26       	eor	r0, r26
   1ca22:	09 f4       	brne	.+2      	; 0x1ca26 <__fp_cmp+0x3e>
   1ca24:	a1 40       	sbci	r26, 0x01	; 1
   1ca26:	a6 95       	lsr	r26
   1ca28:	8f ef       	ldi	r24, 0xFF	; 255
   1ca2a:	81 1d       	adc	r24, r1
   1ca2c:	81 1d       	adc	r24, r1
   1ca2e:	08 95       	ret

0001ca30 <__fp_inf>:
   1ca30:	97 f9       	bld	r25, 7
   1ca32:	9f 67       	ori	r25, 0x7F	; 127
   1ca34:	80 e8       	ldi	r24, 0x80	; 128
   1ca36:	70 e0       	ldi	r23, 0x00	; 0
   1ca38:	60 e0       	ldi	r22, 0x00	; 0
   1ca3a:	08 95       	ret

0001ca3c <__fp_nan>:
   1ca3c:	9f ef       	ldi	r25, 0xFF	; 255
   1ca3e:	80 ec       	ldi	r24, 0xC0	; 192
   1ca40:	08 95       	ret

0001ca42 <__fp_pscA>:
   1ca42:	00 24       	eor	r0, r0
   1ca44:	0a 94       	dec	r0
   1ca46:	16 16       	cp	r1, r22
   1ca48:	17 06       	cpc	r1, r23
   1ca4a:	18 06       	cpc	r1, r24
   1ca4c:	09 06       	cpc	r0, r25
   1ca4e:	08 95       	ret

0001ca50 <__fp_pscB>:
   1ca50:	00 24       	eor	r0, r0
   1ca52:	0a 94       	dec	r0
   1ca54:	12 16       	cp	r1, r18
   1ca56:	13 06       	cpc	r1, r19
   1ca58:	14 06       	cpc	r1, r20
   1ca5a:	05 06       	cpc	r0, r21
   1ca5c:	08 95       	ret

0001ca5e <__fp_round>:
   1ca5e:	09 2e       	mov	r0, r25
   1ca60:	03 94       	inc	r0
   1ca62:	00 0c       	add	r0, r0
   1ca64:	11 f4       	brne	.+4      	; 0x1ca6a <__fp_round+0xc>
   1ca66:	88 23       	and	r24, r24
   1ca68:	52 f0       	brmi	.+20     	; 0x1ca7e <__fp_round+0x20>
   1ca6a:	bb 0f       	add	r27, r27
   1ca6c:	40 f4       	brcc	.+16     	; 0x1ca7e <__fp_round+0x20>
   1ca6e:	bf 2b       	or	r27, r31
   1ca70:	11 f4       	brne	.+4      	; 0x1ca76 <__fp_round+0x18>
   1ca72:	60 ff       	sbrs	r22, 0
   1ca74:	04 c0       	rjmp	.+8      	; 0x1ca7e <__fp_round+0x20>
   1ca76:	6f 5f       	subi	r22, 0xFF	; 255
   1ca78:	7f 4f       	sbci	r23, 0xFF	; 255
   1ca7a:	8f 4f       	sbci	r24, 0xFF	; 255
   1ca7c:	9f 4f       	sbci	r25, 0xFF	; 255
   1ca7e:	08 95       	ret

0001ca80 <__fp_split3>:
   1ca80:	57 fd       	sbrc	r21, 7
   1ca82:	90 58       	subi	r25, 0x80	; 128
   1ca84:	44 0f       	add	r20, r20
   1ca86:	55 1f       	adc	r21, r21
   1ca88:	59 f0       	breq	.+22     	; 0x1caa0 <__fp_splitA+0x10>
   1ca8a:	5f 3f       	cpi	r21, 0xFF	; 255
   1ca8c:	71 f0       	breq	.+28     	; 0x1caaa <__fp_splitA+0x1a>
   1ca8e:	47 95       	ror	r20

0001ca90 <__fp_splitA>:
   1ca90:	88 0f       	add	r24, r24
   1ca92:	97 fb       	bst	r25, 7
   1ca94:	99 1f       	adc	r25, r25
   1ca96:	61 f0       	breq	.+24     	; 0x1cab0 <__fp_splitA+0x20>
   1ca98:	9f 3f       	cpi	r25, 0xFF	; 255
   1ca9a:	79 f0       	breq	.+30     	; 0x1caba <__fp_splitA+0x2a>
   1ca9c:	87 95       	ror	r24
   1ca9e:	08 95       	ret
   1caa0:	12 16       	cp	r1, r18
   1caa2:	13 06       	cpc	r1, r19
   1caa4:	14 06       	cpc	r1, r20
   1caa6:	55 1f       	adc	r21, r21
   1caa8:	f2 cf       	rjmp	.-28     	; 0x1ca8e <__fp_split3+0xe>
   1caaa:	46 95       	lsr	r20
   1caac:	f1 df       	rcall	.-30     	; 0x1ca90 <__fp_splitA>
   1caae:	08 c0       	rjmp	.+16     	; 0x1cac0 <__fp_splitA+0x30>
   1cab0:	16 16       	cp	r1, r22
   1cab2:	17 06       	cpc	r1, r23
   1cab4:	18 06       	cpc	r1, r24
   1cab6:	99 1f       	adc	r25, r25
   1cab8:	f1 cf       	rjmp	.-30     	; 0x1ca9c <__fp_splitA+0xc>
   1caba:	86 95       	lsr	r24
   1cabc:	71 05       	cpc	r23, r1
   1cabe:	61 05       	cpc	r22, r1
   1cac0:	08 94       	sec
   1cac2:	08 95       	ret

0001cac4 <__fp_zero>:
   1cac4:	e8 94       	clt

0001cac6 <__fp_szero>:
   1cac6:	bb 27       	eor	r27, r27
   1cac8:	66 27       	eor	r22, r22
   1caca:	77 27       	eor	r23, r23
   1cacc:	cb 01       	movw	r24, r22
   1cace:	97 f9       	bld	r25, 7
   1cad0:	08 95       	ret

0001cad2 <__gesf2>:
   1cad2:	8a df       	rcall	.-236    	; 0x1c9e8 <__fp_cmp>
   1cad4:	08 f4       	brcc	.+2      	; 0x1cad8 <__gesf2+0x6>
   1cad6:	8f ef       	ldi	r24, 0xFF	; 255
   1cad8:	08 95       	ret

0001cada <__mulsf3>:
   1cada:	0b d0       	rcall	.+22     	; 0x1caf2 <__mulsf3x>
   1cadc:	c0 cf       	rjmp	.-128    	; 0x1ca5e <__fp_round>
   1cade:	b1 df       	rcall	.-158    	; 0x1ca42 <__fp_pscA>
   1cae0:	28 f0       	brcs	.+10     	; 0x1caec <__mulsf3+0x12>
   1cae2:	b6 df       	rcall	.-148    	; 0x1ca50 <__fp_pscB>
   1cae4:	18 f0       	brcs	.+6      	; 0x1caec <__mulsf3+0x12>
   1cae6:	95 23       	and	r25, r21
   1cae8:	09 f0       	breq	.+2      	; 0x1caec <__mulsf3+0x12>
   1caea:	a2 cf       	rjmp	.-188    	; 0x1ca30 <__fp_inf>
   1caec:	a7 cf       	rjmp	.-178    	; 0x1ca3c <__fp_nan>
   1caee:	11 24       	eor	r1, r1
   1caf0:	ea cf       	rjmp	.-44     	; 0x1cac6 <__fp_szero>

0001caf2 <__mulsf3x>:
   1caf2:	c6 df       	rcall	.-116    	; 0x1ca80 <__fp_split3>
   1caf4:	a0 f3       	brcs	.-24     	; 0x1cade <__mulsf3+0x4>

0001caf6 <__mulsf3_pse>:
   1caf6:	95 9f       	mul	r25, r21
   1caf8:	d1 f3       	breq	.-12     	; 0x1caee <__mulsf3+0x14>
   1cafa:	95 0f       	add	r25, r21
   1cafc:	50 e0       	ldi	r21, 0x00	; 0
   1cafe:	55 1f       	adc	r21, r21
   1cb00:	62 9f       	mul	r22, r18
   1cb02:	f0 01       	movw	r30, r0
   1cb04:	72 9f       	mul	r23, r18
   1cb06:	bb 27       	eor	r27, r27
   1cb08:	f0 0d       	add	r31, r0
   1cb0a:	b1 1d       	adc	r27, r1
   1cb0c:	63 9f       	mul	r22, r19
   1cb0e:	aa 27       	eor	r26, r26
   1cb10:	f0 0d       	add	r31, r0
   1cb12:	b1 1d       	adc	r27, r1
   1cb14:	aa 1f       	adc	r26, r26
   1cb16:	64 9f       	mul	r22, r20
   1cb18:	66 27       	eor	r22, r22
   1cb1a:	b0 0d       	add	r27, r0
   1cb1c:	a1 1d       	adc	r26, r1
   1cb1e:	66 1f       	adc	r22, r22
   1cb20:	82 9f       	mul	r24, r18
   1cb22:	22 27       	eor	r18, r18
   1cb24:	b0 0d       	add	r27, r0
   1cb26:	a1 1d       	adc	r26, r1
   1cb28:	62 1f       	adc	r22, r18
   1cb2a:	73 9f       	mul	r23, r19
   1cb2c:	b0 0d       	add	r27, r0
   1cb2e:	a1 1d       	adc	r26, r1
   1cb30:	62 1f       	adc	r22, r18
   1cb32:	83 9f       	mul	r24, r19
   1cb34:	a0 0d       	add	r26, r0
   1cb36:	61 1d       	adc	r22, r1
   1cb38:	22 1f       	adc	r18, r18
   1cb3a:	74 9f       	mul	r23, r20
   1cb3c:	33 27       	eor	r19, r19
   1cb3e:	a0 0d       	add	r26, r0
   1cb40:	61 1d       	adc	r22, r1
   1cb42:	23 1f       	adc	r18, r19
   1cb44:	84 9f       	mul	r24, r20
   1cb46:	60 0d       	add	r22, r0
   1cb48:	21 1d       	adc	r18, r1
   1cb4a:	82 2f       	mov	r24, r18
   1cb4c:	76 2f       	mov	r23, r22
   1cb4e:	6a 2f       	mov	r22, r26
   1cb50:	11 24       	eor	r1, r1
   1cb52:	9f 57       	subi	r25, 0x7F	; 127
   1cb54:	50 40       	sbci	r21, 0x00	; 0
   1cb56:	8a f0       	brmi	.+34     	; 0x1cb7a <__mulsf3_pse+0x84>
   1cb58:	e1 f0       	breq	.+56     	; 0x1cb92 <__mulsf3_pse+0x9c>
   1cb5a:	88 23       	and	r24, r24
   1cb5c:	4a f0       	brmi	.+18     	; 0x1cb70 <__mulsf3_pse+0x7a>
   1cb5e:	ee 0f       	add	r30, r30
   1cb60:	ff 1f       	adc	r31, r31
   1cb62:	bb 1f       	adc	r27, r27
   1cb64:	66 1f       	adc	r22, r22
   1cb66:	77 1f       	adc	r23, r23
   1cb68:	88 1f       	adc	r24, r24
   1cb6a:	91 50       	subi	r25, 0x01	; 1
   1cb6c:	50 40       	sbci	r21, 0x00	; 0
   1cb6e:	a9 f7       	brne	.-22     	; 0x1cb5a <__mulsf3_pse+0x64>
   1cb70:	9e 3f       	cpi	r25, 0xFE	; 254
   1cb72:	51 05       	cpc	r21, r1
   1cb74:	70 f0       	brcs	.+28     	; 0x1cb92 <__mulsf3_pse+0x9c>
   1cb76:	5c cf       	rjmp	.-328    	; 0x1ca30 <__fp_inf>
   1cb78:	a6 cf       	rjmp	.-180    	; 0x1cac6 <__fp_szero>
   1cb7a:	5f 3f       	cpi	r21, 0xFF	; 255
   1cb7c:	ec f3       	brlt	.-6      	; 0x1cb78 <__mulsf3_pse+0x82>
   1cb7e:	98 3e       	cpi	r25, 0xE8	; 232
   1cb80:	dc f3       	brlt	.-10     	; 0x1cb78 <__mulsf3_pse+0x82>
   1cb82:	86 95       	lsr	r24
   1cb84:	77 95       	ror	r23
   1cb86:	67 95       	ror	r22
   1cb88:	b7 95       	ror	r27
   1cb8a:	f7 95       	ror	r31
   1cb8c:	e7 95       	ror	r30
   1cb8e:	9f 5f       	subi	r25, 0xFF	; 255
   1cb90:	c1 f7       	brne	.-16     	; 0x1cb82 <__mulsf3_pse+0x8c>
   1cb92:	fe 2b       	or	r31, r30
   1cb94:	88 0f       	add	r24, r24
   1cb96:	91 1d       	adc	r25, r1
   1cb98:	96 95       	lsr	r25
   1cb9a:	87 95       	ror	r24
   1cb9c:	97 f9       	bld	r25, 7
   1cb9e:	08 95       	ret

0001cba0 <round>:
   1cba0:	77 df       	rcall	.-274    	; 0x1ca90 <__fp_splitA>
   1cba2:	e0 f0       	brcs	.+56     	; 0x1cbdc <round+0x3c>
   1cba4:	9e 37       	cpi	r25, 0x7E	; 126
   1cba6:	d8 f0       	brcs	.+54     	; 0x1cbde <round+0x3e>
   1cba8:	96 39       	cpi	r25, 0x96	; 150
   1cbaa:	b8 f4       	brcc	.+46     	; 0x1cbda <round+0x3a>
   1cbac:	9e 38       	cpi	r25, 0x8E	; 142
   1cbae:	48 f4       	brcc	.+18     	; 0x1cbc2 <round+0x22>
   1cbb0:	67 2f       	mov	r22, r23
   1cbb2:	78 2f       	mov	r23, r24
   1cbb4:	88 27       	eor	r24, r24
   1cbb6:	98 5f       	subi	r25, 0xF8	; 248
   1cbb8:	f9 cf       	rjmp	.-14     	; 0x1cbac <round+0xc>
   1cbba:	86 95       	lsr	r24
   1cbbc:	77 95       	ror	r23
   1cbbe:	67 95       	ror	r22
   1cbc0:	93 95       	inc	r25
   1cbc2:	95 39       	cpi	r25, 0x95	; 149
   1cbc4:	d0 f3       	brcs	.-12     	; 0x1cbba <round+0x1a>
   1cbc6:	b6 2f       	mov	r27, r22
   1cbc8:	b1 70       	andi	r27, 0x01	; 1
   1cbca:	6b 0f       	add	r22, r27
   1cbcc:	71 1d       	adc	r23, r1
   1cbce:	81 1d       	adc	r24, r1
   1cbd0:	20 f4       	brcc	.+8      	; 0x1cbda <round+0x3a>
   1cbd2:	87 95       	ror	r24
   1cbd4:	77 95       	ror	r23
   1cbd6:	67 95       	ror	r22
   1cbd8:	93 95       	inc	r25
   1cbda:	02 c0       	rjmp	.+4      	; 0x1cbe0 <__fp_mintl>
   1cbdc:	1c c0       	rjmp	.+56     	; 0x1cc16 <__fp_mpack>
   1cbde:	73 cf       	rjmp	.-282    	; 0x1cac6 <__fp_szero>

0001cbe0 <__fp_mintl>:
   1cbe0:	88 23       	and	r24, r24
   1cbe2:	71 f4       	brne	.+28     	; 0x1cc00 <__fp_mintl+0x20>
   1cbe4:	77 23       	and	r23, r23
   1cbe6:	21 f0       	breq	.+8      	; 0x1cbf0 <__fp_mintl+0x10>
   1cbe8:	98 50       	subi	r25, 0x08	; 8
   1cbea:	87 2b       	or	r24, r23
   1cbec:	76 2f       	mov	r23, r22
   1cbee:	07 c0       	rjmp	.+14     	; 0x1cbfe <__fp_mintl+0x1e>
   1cbf0:	66 23       	and	r22, r22
   1cbf2:	11 f4       	brne	.+4      	; 0x1cbf8 <__fp_mintl+0x18>
   1cbf4:	99 27       	eor	r25, r25
   1cbf6:	0d c0       	rjmp	.+26     	; 0x1cc12 <__fp_mintl+0x32>
   1cbf8:	90 51       	subi	r25, 0x10	; 16
   1cbfa:	86 2b       	or	r24, r22
   1cbfc:	70 e0       	ldi	r23, 0x00	; 0
   1cbfe:	60 e0       	ldi	r22, 0x00	; 0
   1cc00:	2a f0       	brmi	.+10     	; 0x1cc0c <__fp_mintl+0x2c>
   1cc02:	9a 95       	dec	r25
   1cc04:	66 0f       	add	r22, r22
   1cc06:	77 1f       	adc	r23, r23
   1cc08:	88 1f       	adc	r24, r24
   1cc0a:	da f7       	brpl	.-10     	; 0x1cc02 <__fp_mintl+0x22>
   1cc0c:	88 0f       	add	r24, r24
   1cc0e:	96 95       	lsr	r25
   1cc10:	87 95       	ror	r24
   1cc12:	97 f9       	bld	r25, 7
   1cc14:	08 95       	ret

0001cc16 <__fp_mpack>:
   1cc16:	9f 3f       	cpi	r25, 0xFF	; 255
   1cc18:	31 f0       	breq	.+12     	; 0x1cc26 <__fp_mpack_finite+0xc>

0001cc1a <__fp_mpack_finite>:
   1cc1a:	91 50       	subi	r25, 0x01	; 1
   1cc1c:	20 f4       	brcc	.+8      	; 0x1cc26 <__fp_mpack_finite+0xc>
   1cc1e:	87 95       	ror	r24
   1cc20:	77 95       	ror	r23
   1cc22:	67 95       	ror	r22
   1cc24:	b7 95       	ror	r27
   1cc26:	88 0f       	add	r24, r24
   1cc28:	91 1d       	adc	r25, r1
   1cc2a:	96 95       	lsr	r25
   1cc2c:	87 95       	ror	r24
   1cc2e:	97 f9       	bld	r25, 7
   1cc30:	08 95       	ret

0001cc32 <calloc>:
   1cc32:	0f 93       	push	r16
   1cc34:	1f 93       	push	r17
   1cc36:	cf 93       	push	r28
   1cc38:	df 93       	push	r29
   1cc3a:	86 9f       	mul	r24, r22
   1cc3c:	80 01       	movw	r16, r0
   1cc3e:	87 9f       	mul	r24, r23
   1cc40:	10 0d       	add	r17, r0
   1cc42:	96 9f       	mul	r25, r22
   1cc44:	10 0d       	add	r17, r0
   1cc46:	11 24       	eor	r1, r1
   1cc48:	c8 01       	movw	r24, r16
   1cc4a:	0d d0       	rcall	.+26     	; 0x1cc66 <malloc>
   1cc4c:	ec 01       	movw	r28, r24
   1cc4e:	00 97       	sbiw	r24, 0x00	; 0
   1cc50:	21 f0       	breq	.+8      	; 0x1cc5a <calloc+0x28>
   1cc52:	a8 01       	movw	r20, r16
   1cc54:	60 e0       	ldi	r22, 0x00	; 0
   1cc56:	70 e0       	ldi	r23, 0x00	; 0
   1cc58:	27 d1       	rcall	.+590    	; 0x1cea8 <memset>
   1cc5a:	ce 01       	movw	r24, r28
   1cc5c:	df 91       	pop	r29
   1cc5e:	cf 91       	pop	r28
   1cc60:	1f 91       	pop	r17
   1cc62:	0f 91       	pop	r16
   1cc64:	08 95       	ret

0001cc66 <malloc>:
   1cc66:	0f 93       	push	r16
   1cc68:	1f 93       	push	r17
   1cc6a:	cf 93       	push	r28
   1cc6c:	df 93       	push	r29
   1cc6e:	82 30       	cpi	r24, 0x02	; 2
   1cc70:	91 05       	cpc	r25, r1
   1cc72:	10 f4       	brcc	.+4      	; 0x1cc78 <malloc+0x12>
   1cc74:	82 e0       	ldi	r24, 0x02	; 2
   1cc76:	90 e0       	ldi	r25, 0x00	; 0
   1cc78:	e0 91 b1 21 	lds	r30, 0x21B1	; 0x8021b1 <__flp>
   1cc7c:	f0 91 b2 21 	lds	r31, 0x21B2	; 0x8021b2 <__flp+0x1>
   1cc80:	20 e0       	ldi	r18, 0x00	; 0
   1cc82:	30 e0       	ldi	r19, 0x00	; 0
   1cc84:	a0 e0       	ldi	r26, 0x00	; 0
   1cc86:	b0 e0       	ldi	r27, 0x00	; 0
   1cc88:	30 97       	sbiw	r30, 0x00	; 0
   1cc8a:	19 f1       	breq	.+70     	; 0x1ccd2 <malloc+0x6c>
   1cc8c:	40 81       	ld	r20, Z
   1cc8e:	51 81       	ldd	r21, Z+1	; 0x01
   1cc90:	02 81       	ldd	r16, Z+2	; 0x02
   1cc92:	13 81       	ldd	r17, Z+3	; 0x03
   1cc94:	48 17       	cp	r20, r24
   1cc96:	59 07       	cpc	r21, r25
   1cc98:	c8 f0       	brcs	.+50     	; 0x1cccc <malloc+0x66>
   1cc9a:	84 17       	cp	r24, r20
   1cc9c:	95 07       	cpc	r25, r21
   1cc9e:	69 f4       	brne	.+26     	; 0x1ccba <malloc+0x54>
   1cca0:	10 97       	sbiw	r26, 0x00	; 0
   1cca2:	31 f0       	breq	.+12     	; 0x1ccb0 <malloc+0x4a>
   1cca4:	12 96       	adiw	r26, 0x02	; 2
   1cca6:	0c 93       	st	X, r16
   1cca8:	12 97       	sbiw	r26, 0x02	; 2
   1ccaa:	13 96       	adiw	r26, 0x03	; 3
   1ccac:	1c 93       	st	X, r17
   1ccae:	27 c0       	rjmp	.+78     	; 0x1ccfe <malloc+0x98>
   1ccb0:	00 93 b1 21 	sts	0x21B1, r16	; 0x8021b1 <__flp>
   1ccb4:	10 93 b2 21 	sts	0x21B2, r17	; 0x8021b2 <__flp+0x1>
   1ccb8:	22 c0       	rjmp	.+68     	; 0x1ccfe <malloc+0x98>
   1ccba:	21 15       	cp	r18, r1
   1ccbc:	31 05       	cpc	r19, r1
   1ccbe:	19 f0       	breq	.+6      	; 0x1ccc6 <malloc+0x60>
   1ccc0:	42 17       	cp	r20, r18
   1ccc2:	53 07       	cpc	r21, r19
   1ccc4:	18 f4       	brcc	.+6      	; 0x1cccc <malloc+0x66>
   1ccc6:	9a 01       	movw	r18, r20
   1ccc8:	bd 01       	movw	r22, r26
   1ccca:	ef 01       	movw	r28, r30
   1cccc:	df 01       	movw	r26, r30
   1ccce:	f8 01       	movw	r30, r16
   1ccd0:	db cf       	rjmp	.-74     	; 0x1cc88 <malloc+0x22>
   1ccd2:	21 15       	cp	r18, r1
   1ccd4:	31 05       	cpc	r19, r1
   1ccd6:	f9 f0       	breq	.+62     	; 0x1cd16 <malloc+0xb0>
   1ccd8:	28 1b       	sub	r18, r24
   1ccda:	39 0b       	sbc	r19, r25
   1ccdc:	24 30       	cpi	r18, 0x04	; 4
   1ccde:	31 05       	cpc	r19, r1
   1cce0:	80 f4       	brcc	.+32     	; 0x1cd02 <malloc+0x9c>
   1cce2:	8a 81       	ldd	r24, Y+2	; 0x02
   1cce4:	9b 81       	ldd	r25, Y+3	; 0x03
   1cce6:	61 15       	cp	r22, r1
   1cce8:	71 05       	cpc	r23, r1
   1ccea:	21 f0       	breq	.+8      	; 0x1ccf4 <malloc+0x8e>
   1ccec:	fb 01       	movw	r30, r22
   1ccee:	93 83       	std	Z+3, r25	; 0x03
   1ccf0:	82 83       	std	Z+2, r24	; 0x02
   1ccf2:	04 c0       	rjmp	.+8      	; 0x1ccfc <malloc+0x96>
   1ccf4:	90 93 b2 21 	sts	0x21B2, r25	; 0x8021b2 <__flp+0x1>
   1ccf8:	80 93 b1 21 	sts	0x21B1, r24	; 0x8021b1 <__flp>
   1ccfc:	fe 01       	movw	r30, r28
   1ccfe:	32 96       	adiw	r30, 0x02	; 2
   1cd00:	44 c0       	rjmp	.+136    	; 0x1cd8a <malloc+0x124>
   1cd02:	fe 01       	movw	r30, r28
   1cd04:	e2 0f       	add	r30, r18
   1cd06:	f3 1f       	adc	r31, r19
   1cd08:	81 93       	st	Z+, r24
   1cd0a:	91 93       	st	Z+, r25
   1cd0c:	22 50       	subi	r18, 0x02	; 2
   1cd0e:	31 09       	sbc	r19, r1
   1cd10:	39 83       	std	Y+1, r19	; 0x01
   1cd12:	28 83       	st	Y, r18
   1cd14:	3a c0       	rjmp	.+116    	; 0x1cd8a <malloc+0x124>
   1cd16:	20 91 af 21 	lds	r18, 0x21AF	; 0x8021af <__brkval>
   1cd1a:	30 91 b0 21 	lds	r19, 0x21B0	; 0x8021b0 <__brkval+0x1>
   1cd1e:	23 2b       	or	r18, r19
   1cd20:	41 f4       	brne	.+16     	; 0x1cd32 <malloc+0xcc>
   1cd22:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1cd26:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1cd2a:	30 93 b0 21 	sts	0x21B0, r19	; 0x8021b0 <__brkval+0x1>
   1cd2e:	20 93 af 21 	sts	0x21AF, r18	; 0x8021af <__brkval>
   1cd32:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1cd36:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
   1cd3a:	21 15       	cp	r18, r1
   1cd3c:	31 05       	cpc	r19, r1
   1cd3e:	41 f4       	brne	.+16     	; 0x1cd50 <malloc+0xea>
   1cd40:	2d b7       	in	r18, 0x3d	; 61
   1cd42:	3e b7       	in	r19, 0x3e	; 62
   1cd44:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1cd48:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1cd4c:	24 1b       	sub	r18, r20
   1cd4e:	35 0b       	sbc	r19, r21
   1cd50:	e0 91 af 21 	lds	r30, 0x21AF	; 0x8021af <__brkval>
   1cd54:	f0 91 b0 21 	lds	r31, 0x21B0	; 0x8021b0 <__brkval+0x1>
   1cd58:	e2 17       	cp	r30, r18
   1cd5a:	f3 07       	cpc	r31, r19
   1cd5c:	a0 f4       	brcc	.+40     	; 0x1cd86 <malloc+0x120>
   1cd5e:	2e 1b       	sub	r18, r30
   1cd60:	3f 0b       	sbc	r19, r31
   1cd62:	28 17       	cp	r18, r24
   1cd64:	39 07       	cpc	r19, r25
   1cd66:	78 f0       	brcs	.+30     	; 0x1cd86 <malloc+0x120>
   1cd68:	ac 01       	movw	r20, r24
   1cd6a:	4e 5f       	subi	r20, 0xFE	; 254
   1cd6c:	5f 4f       	sbci	r21, 0xFF	; 255
   1cd6e:	24 17       	cp	r18, r20
   1cd70:	35 07       	cpc	r19, r21
   1cd72:	48 f0       	brcs	.+18     	; 0x1cd86 <malloc+0x120>
   1cd74:	4e 0f       	add	r20, r30
   1cd76:	5f 1f       	adc	r21, r31
   1cd78:	50 93 b0 21 	sts	0x21B0, r21	; 0x8021b0 <__brkval+0x1>
   1cd7c:	40 93 af 21 	sts	0x21AF, r20	; 0x8021af <__brkval>
   1cd80:	81 93       	st	Z+, r24
   1cd82:	91 93       	st	Z+, r25
   1cd84:	02 c0       	rjmp	.+4      	; 0x1cd8a <malloc+0x124>
   1cd86:	e0 e0       	ldi	r30, 0x00	; 0
   1cd88:	f0 e0       	ldi	r31, 0x00	; 0
   1cd8a:	cf 01       	movw	r24, r30
   1cd8c:	df 91       	pop	r29
   1cd8e:	cf 91       	pop	r28
   1cd90:	1f 91       	pop	r17
   1cd92:	0f 91       	pop	r16
   1cd94:	08 95       	ret

0001cd96 <free>:
   1cd96:	cf 93       	push	r28
   1cd98:	df 93       	push	r29
   1cd9a:	00 97       	sbiw	r24, 0x00	; 0
   1cd9c:	09 f4       	brne	.+2      	; 0x1cda0 <free+0xa>
   1cd9e:	81 c0       	rjmp	.+258    	; 0x1cea2 <free+0x10c>
   1cda0:	fc 01       	movw	r30, r24
   1cda2:	32 97       	sbiw	r30, 0x02	; 2
   1cda4:	13 82       	std	Z+3, r1	; 0x03
   1cda6:	12 82       	std	Z+2, r1	; 0x02
   1cda8:	a0 91 b1 21 	lds	r26, 0x21B1	; 0x8021b1 <__flp>
   1cdac:	b0 91 b2 21 	lds	r27, 0x21B2	; 0x8021b2 <__flp+0x1>
   1cdb0:	10 97       	sbiw	r26, 0x00	; 0
   1cdb2:	81 f4       	brne	.+32     	; 0x1cdd4 <free+0x3e>
   1cdb4:	20 81       	ld	r18, Z
   1cdb6:	31 81       	ldd	r19, Z+1	; 0x01
   1cdb8:	82 0f       	add	r24, r18
   1cdba:	93 1f       	adc	r25, r19
   1cdbc:	20 91 af 21 	lds	r18, 0x21AF	; 0x8021af <__brkval>
   1cdc0:	30 91 b0 21 	lds	r19, 0x21B0	; 0x8021b0 <__brkval+0x1>
   1cdc4:	28 17       	cp	r18, r24
   1cdc6:	39 07       	cpc	r19, r25
   1cdc8:	51 f5       	brne	.+84     	; 0x1ce1e <free+0x88>
   1cdca:	f0 93 b0 21 	sts	0x21B0, r31	; 0x8021b0 <__brkval+0x1>
   1cdce:	e0 93 af 21 	sts	0x21AF, r30	; 0x8021af <__brkval>
   1cdd2:	67 c0       	rjmp	.+206    	; 0x1cea2 <free+0x10c>
   1cdd4:	ed 01       	movw	r28, r26
   1cdd6:	20 e0       	ldi	r18, 0x00	; 0
   1cdd8:	30 e0       	ldi	r19, 0x00	; 0
   1cdda:	ce 17       	cp	r28, r30
   1cddc:	df 07       	cpc	r29, r31
   1cdde:	40 f4       	brcc	.+16     	; 0x1cdf0 <free+0x5a>
   1cde0:	4a 81       	ldd	r20, Y+2	; 0x02
   1cde2:	5b 81       	ldd	r21, Y+3	; 0x03
   1cde4:	9e 01       	movw	r18, r28
   1cde6:	41 15       	cp	r20, r1
   1cde8:	51 05       	cpc	r21, r1
   1cdea:	f1 f0       	breq	.+60     	; 0x1ce28 <free+0x92>
   1cdec:	ea 01       	movw	r28, r20
   1cdee:	f5 cf       	rjmp	.-22     	; 0x1cdda <free+0x44>
   1cdf0:	d3 83       	std	Z+3, r29	; 0x03
   1cdf2:	c2 83       	std	Z+2, r28	; 0x02
   1cdf4:	40 81       	ld	r20, Z
   1cdf6:	51 81       	ldd	r21, Z+1	; 0x01
   1cdf8:	84 0f       	add	r24, r20
   1cdfa:	95 1f       	adc	r25, r21
   1cdfc:	c8 17       	cp	r28, r24
   1cdfe:	d9 07       	cpc	r29, r25
   1ce00:	59 f4       	brne	.+22     	; 0x1ce18 <free+0x82>
   1ce02:	88 81       	ld	r24, Y
   1ce04:	99 81       	ldd	r25, Y+1	; 0x01
   1ce06:	84 0f       	add	r24, r20
   1ce08:	95 1f       	adc	r25, r21
   1ce0a:	02 96       	adiw	r24, 0x02	; 2
   1ce0c:	91 83       	std	Z+1, r25	; 0x01
   1ce0e:	80 83       	st	Z, r24
   1ce10:	8a 81       	ldd	r24, Y+2	; 0x02
   1ce12:	9b 81       	ldd	r25, Y+3	; 0x03
   1ce14:	93 83       	std	Z+3, r25	; 0x03
   1ce16:	82 83       	std	Z+2, r24	; 0x02
   1ce18:	21 15       	cp	r18, r1
   1ce1a:	31 05       	cpc	r19, r1
   1ce1c:	29 f4       	brne	.+10     	; 0x1ce28 <free+0x92>
   1ce1e:	f0 93 b2 21 	sts	0x21B2, r31	; 0x8021b2 <__flp+0x1>
   1ce22:	e0 93 b1 21 	sts	0x21B1, r30	; 0x8021b1 <__flp>
   1ce26:	3d c0       	rjmp	.+122    	; 0x1cea2 <free+0x10c>
   1ce28:	e9 01       	movw	r28, r18
   1ce2a:	fb 83       	std	Y+3, r31	; 0x03
   1ce2c:	ea 83       	std	Y+2, r30	; 0x02
   1ce2e:	49 91       	ld	r20, Y+
   1ce30:	59 91       	ld	r21, Y+
   1ce32:	c4 0f       	add	r28, r20
   1ce34:	d5 1f       	adc	r29, r21
   1ce36:	ec 17       	cp	r30, r28
   1ce38:	fd 07       	cpc	r31, r29
   1ce3a:	61 f4       	brne	.+24     	; 0x1ce54 <free+0xbe>
   1ce3c:	80 81       	ld	r24, Z
   1ce3e:	91 81       	ldd	r25, Z+1	; 0x01
   1ce40:	84 0f       	add	r24, r20
   1ce42:	95 1f       	adc	r25, r21
   1ce44:	02 96       	adiw	r24, 0x02	; 2
   1ce46:	e9 01       	movw	r28, r18
   1ce48:	99 83       	std	Y+1, r25	; 0x01
   1ce4a:	88 83       	st	Y, r24
   1ce4c:	82 81       	ldd	r24, Z+2	; 0x02
   1ce4e:	93 81       	ldd	r25, Z+3	; 0x03
   1ce50:	9b 83       	std	Y+3, r25	; 0x03
   1ce52:	8a 83       	std	Y+2, r24	; 0x02
   1ce54:	e0 e0       	ldi	r30, 0x00	; 0
   1ce56:	f0 e0       	ldi	r31, 0x00	; 0
   1ce58:	12 96       	adiw	r26, 0x02	; 2
   1ce5a:	8d 91       	ld	r24, X+
   1ce5c:	9c 91       	ld	r25, X
   1ce5e:	13 97       	sbiw	r26, 0x03	; 3
   1ce60:	00 97       	sbiw	r24, 0x00	; 0
   1ce62:	19 f0       	breq	.+6      	; 0x1ce6a <free+0xd4>
   1ce64:	fd 01       	movw	r30, r26
   1ce66:	dc 01       	movw	r26, r24
   1ce68:	f7 cf       	rjmp	.-18     	; 0x1ce58 <free+0xc2>
   1ce6a:	8d 91       	ld	r24, X+
   1ce6c:	9c 91       	ld	r25, X
   1ce6e:	11 97       	sbiw	r26, 0x01	; 1
   1ce70:	9d 01       	movw	r18, r26
   1ce72:	2e 5f       	subi	r18, 0xFE	; 254
   1ce74:	3f 4f       	sbci	r19, 0xFF	; 255
   1ce76:	82 0f       	add	r24, r18
   1ce78:	93 1f       	adc	r25, r19
   1ce7a:	20 91 af 21 	lds	r18, 0x21AF	; 0x8021af <__brkval>
   1ce7e:	30 91 b0 21 	lds	r19, 0x21B0	; 0x8021b0 <__brkval+0x1>
   1ce82:	28 17       	cp	r18, r24
   1ce84:	39 07       	cpc	r19, r25
   1ce86:	69 f4       	brne	.+26     	; 0x1cea2 <free+0x10c>
   1ce88:	30 97       	sbiw	r30, 0x00	; 0
   1ce8a:	29 f4       	brne	.+10     	; 0x1ce96 <free+0x100>
   1ce8c:	10 92 b2 21 	sts	0x21B2, r1	; 0x8021b2 <__flp+0x1>
   1ce90:	10 92 b1 21 	sts	0x21B1, r1	; 0x8021b1 <__flp>
   1ce94:	02 c0       	rjmp	.+4      	; 0x1ce9a <free+0x104>
   1ce96:	13 82       	std	Z+3, r1	; 0x03
   1ce98:	12 82       	std	Z+2, r1	; 0x02
   1ce9a:	b0 93 b0 21 	sts	0x21B0, r27	; 0x8021b0 <__brkval+0x1>
   1ce9e:	a0 93 af 21 	sts	0x21AF, r26	; 0x8021af <__brkval>
   1cea2:	df 91       	pop	r29
   1cea4:	cf 91       	pop	r28
   1cea6:	08 95       	ret

0001cea8 <memset>:
   1cea8:	dc 01       	movw	r26, r24
   1ceaa:	01 c0       	rjmp	.+2      	; 0x1ceae <memset+0x6>
   1ceac:	6d 93       	st	X+, r22
   1ceae:	41 50       	subi	r20, 0x01	; 1
   1ceb0:	50 40       	sbci	r21, 0x00	; 0
   1ceb2:	e0 f7       	brcc	.-8      	; 0x1ceac <memset+0x4>
   1ceb4:	08 95       	ret

0001ceb6 <_exit>:
   1ceb6:	f8 94       	cli

0001ceb8 <__stop_program>:
   1ceb8:	ff cf       	rjmp	.-2      	; 0x1ceb8 <__stop_program>
